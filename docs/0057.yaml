- en: Lazy Evaluation Using Recursive Python Generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803?source=collection_archive---------16-----------------------#2023-01-04](https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803?source=collection_archive---------16-----------------------#2023-01-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Can recursive functions use *“lazy evaluation”*? — Yes, they can — Using Python’s
    generator functions!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----9ee6af0dd803---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    ·5 min read·Jan 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9ee6af0dd803&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----9ee6af0dd803---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ee6af0dd803&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&source=-----9ee6af0dd803---------------------bookmark_footer-----------)![](../Images/84db954d46d54cd7ea660368b0737fa3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Generated with Stable Diffusion
  prefs: []
  type: TYPE_NORMAL
- en: We all are familiar with Python’s generators and all their benefits. But, what
    if I told you that we can make them even better by combining them with recursion?
    So, let’s see how we can use them to implement *“lazy recursion”* and supercharge
    what we already do with generators in Python!
  prefs: []
  type: TYPE_NORMAL
- en: Why Even Bother?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into the code, let’s first ask ourselves *“Why even bother? Do
    we really need recursive generators?”*. And the answer is… it depends. Naturally,
    a recursive generator will share both pros and cons of both generators as well
    as normal recursive functions.
  prefs: []
  type: TYPE_NORMAL
- en: For the generators, the number one reason why one would use them is *“lazy”*
    evaluation — that is — computing elements one at the time rather than all at once.
    As for the recursion, it simply makes sense for certain algorithms or problems
    which it can solve elegantly and succinctly, such as tree traversal.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, a situations where recursive generators would make sense are naturally
    recursive algorithms that might process large amount of data or elements, and
    therefore consume a lot of memory if run *“eagerly”*.
  prefs: []
  type: TYPE_NORMAL
