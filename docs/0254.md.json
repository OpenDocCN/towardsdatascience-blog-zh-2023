["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n```", "```py\nmu, sigma = 0, 1 #mean and standard deviation\ns1_pre = np.random.normal(mu, sigma, size=5000)\ns1 = [i for i in s1_pre if i<2.6 and i>-2.6]\n```", "```py\n#defnie a function\ndef pair_sum(input_):\n    input_.sort()\n    if len(input_)%2 == 0:\n        loc = [i for i in range(len(input_)) if i%2 == 0]\n        output = [input_[l] + input_[len(input_)-(l+1)] for l in loc]\n    else:\n        loc = [i for i in range(len(input_)) if i%2 == 0]\n        output = [input_[l] + input_[len(input_)-(l+1)] for l in loc[0:-1]]\n        output.append(input_[-1])\n    return output\n\n#bimodal distribution with gaps\ns2_out, s2_sub1, s2_sub2 = [], [], []\nfor i in s1:\n    if i>0.05 and i<0.6:\n        s2_sub1.append(i)\n    elif i<-0.05 and i>-0.6:\n        s2_sub2.append(i)\n    else:\n        s2_out.append(i)\n\nsub1_mod = pair_sum(s2_sub1)\nsub2_mod = pair_sum(s2_sub2)\ns2 = s2_out + sub1_mod*2 + sub2_mod*2\n\n#distribution with gaps\ns3_out, s3_sub = [], []\nfor i in s1:\n    if i>-0.4 and i<0.4:\n        s3_sub.append(i)\n    else:\n        s3_out.append(i)\n\nsub3 = pair_sum(s3_sub)\ns3 = s3_out + sub3*2\n```", "```py\nc_list = ['#1a936f', '#F77F05', '#D62829']\n\nn = 25\nf, axes = plt.subplots(3, 2 ,figsize=(12,5))\nax1=sns.boxplot(s1,ax= axes[0,0],color= c_list[0],boxprops= dict(alpha=.9))\nax2=sns.boxplot(s2,ax= axes[1,0],color= c_list[1],boxprops= dict(alpha=.9))\nax3=sns.boxplot(s3,ax= axes[2,0],color= c_list[2],boxprops= dict(alpha=.9))\n\nax4=sns.histplot(s1, bins=n, ax=axes[0,1], color=c_list[0])\nax5=sns.histplot(s2, bins=n, ax=axes[1,1], color=c_list[1])\nax6=sns.histplot(s3, bins=n, ax=axes[2,1], color=c_list[2])\n\nax4.set(ylabel=None, yticklabels=[])\nax5.set(ylabel=None, yticklabels=[])\nax6.set(ylabel=None, yticklabels=[])\nplt.show()\n```", "```py\nbins1 = pd.cut(s1, bins=n, labels=False)\nbins2 = pd.cut(s2, bins=n, labels=False)\nbins3 = pd.cut(s3, bins=n, labels=False)\n\ndf1 = pd.DataFrame(zip(s1, bins1), columns=['v1','bins'])\ndf2 = pd.DataFrame(zip(s2, bins2), columns=['v2','bins'])\ndf3 = pd.DataFrame(zip(s3, bins3), columns=['v3','bins'])\n\ndf1_m = pd.melt(df1, id_vars=['bins'],value_vars=['v1'])\ndf2_m = pd.melt(df2, id_vars=['bins'],value_vars=['v2'])\ndf3_m = pd.melt(df3, id_vars=['bins'],value_vars=['v3'])\n\ndf = pd.concat([df1_m, df2_m, df3_m])\ndf.head()\n```", "```py\nimport plotly.express as px\nfig = px.violin(df, x = df['value'], box=True, width=900, height=600,\n                color=df['variable'], color_discrete_sequence=color_list)\nfig.update_layout(legend_title=\"\", xaxis_title=None)\nfig.show()\n```", "```py\nfig1 = px.histogram(x= df[df['variable']=='v1']['value'],\n                    nbins = 50, width=900, height=400,\n                    color_discrete_sequence=[color_list[0]])\nfig2 = px.histogram(x= df[df['variable']=='v2']['value'],\n                    nbins = 50, width=900, height=400,\n                    color_discrete_sequence=[color_list[1]])\nfig3 = px.histogram(x= df[df['variable']=='v3']['value'],\n                    nbins = 50, width=900, height=400,\n                    color_discrete_sequence=[color_list[2]])\n\nfig1.update_layout(xaxis_title=None, yaxis_title=None)\nfig2.update_layout(xaxis_title=None, yaxis_title=None)\nfig3.update_layout(xaxis_title=None, yaxis_title=None)\n\nfig1.show()\nfig2.show()\nfig3.show()\n```", "```py\nfig = px.histogram(df, x= 'value', nbins = 60, color = 'variable',\n                   opacity=0.8, width=900, height=600, marginal=\"rug\",\n                   color_discrete_sequence=color_list)\nfig.update_layout(yaxis_title=None, legend_title=\"\", xaxis_title=None)\nfig.show()\n```", "```py\nimport plotly.figure_factory as ff\n\ngroup_labels = list(set(df['variable']))\nhist_data = [df[df['variable']=='v1']['value'],\n             df[df['variable']=='v2']['value'],\n             df[df['variable']=='v3']['value']]\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.25,\n                         colors=color_list)\nfig.update_layout(width=900, height=600)\nfig.show()\n```", "```py\nimport plotly.express as px\nfig = px.strip(df, x = 'value', y ='variable', stripmode='overlay',\n               width=1000, height=600\n              )\nfig.update_layout(xaxis_range=[-2.69, 2.69])\nfig.update_layout(legend_title=\"\", yaxis_title=None,\n                  xaxis_title=None,showlegend=False)\nfig.show()\n```", "```py\n#add a new columns to facilitate creating a dictionary\ndf['vari_bins'] = [v+'_'+str(b) for v,b in zip(df['variable'],df['bins'])]\n\ndef strip_color(input_list, prefix, color, n_color):\n    #count data in each bin \n    c_bin = [input_list.count(i) for i in range(n)]\n    #create a dictionary by enumerate each bin  \n    dict_c = {prefix+str(c):i for c,i in enumerate(c_bin)}\n\n    #sort the dictionary\n    sort = {i[0]:i[1] for i in sorted(dict_c.items(), key=lambda x: x[1])}\n    #extract color code from color palette\n    pal = list(sns.color_palette(palette=color, n_colors=n_color).as_hex())\n\n    #assign color code to the dictionary\n    dict_out = {c:p for c,p in zip(sort.keys(), pal)}\n\n    return dict_out\n```", "```py\ndict_p1 = strip_color(list(df1_m['bins']), 'v1_', 'YlGn', 25)\ndict_p2 = strip_color(list(df2_m['bins']), 'v2_', 'Oranges', 25)\ndict_p3 = strip_color(list(df3_m['bins']), 'v3_', 'YlOrRd', 25)\n\ndict_ = {}\ndict_.update(dict_p1)\ndict_.update(dict_p2)\ndict_.update(dict_p3)\n```", "```py\nimport plotly.express as px\nfig = px.strip(df, x = 'value', y ='variable',\n               color = 'vari_bins',\n               color_discrete_map=dict_, stripmode='overlay',\n               width=1000, height=600,\n              )\nfig.update_layout(xaxis_range=[-2.69, 2.69])\nfig.update_layout(legend_title=\"\", yaxis_title=None,\n                  xaxis_title=None, showlegend=False)\nfig.show()\n```"]