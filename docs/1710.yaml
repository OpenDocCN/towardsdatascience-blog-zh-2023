- en: Grover’s Quantum Search Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/grovers-quantum-search-algorithm-54c427315768?source=collection_archive---------12-----------------------#2023-05-23](https://towardsdatascience.com/grovers-quantum-search-algorithm-54c427315768?source=collection_archive---------12-----------------------#2023-05-23)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quantum Computing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A visual explanation of one of the first quantum algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@danjackho?source=post_page-----54c427315768--------------------------------)[![Dan
    Jackson](../Images/d7b923d6f0462d8226dd7ded7488ba9c.png)](https://medium.com/@danjackho?source=post_page-----54c427315768--------------------------------)[](https://towardsdatascience.com/?source=post_page-----54c427315768--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----54c427315768--------------------------------)
    [Dan Jackson](https://medium.com/@danjackho?source=post_page-----54c427315768--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F96ed28fe283&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrovers-quantum-search-algorithm-54c427315768&user=Dan+Jackson&userId=96ed28fe283&source=post_page-96ed28fe283----54c427315768---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----54c427315768--------------------------------)
    ·16 min read·May 23, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F54c427315768&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrovers-quantum-search-algorithm-54c427315768&user=Dan+Jackson&userId=96ed28fe283&source=-----54c427315768---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F54c427315768&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrovers-quantum-search-algorithm-54c427315768&source=-----54c427315768---------------------bookmark_footer-----------)![](../Images/7d2e92f1b38559616e6d4b40772d403a.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Close-up image of an IBM cryostat refrigeration system for a quantum computer.
    Image by [IBM/Graham Carlow](https://newsroom.ibm.com/media-quantum-innovation?keywords=quantum&l=100).
  prefs: []
  type: TYPE_NORMAL
- en: G**rover’s algorithm** is one of the earliest proposed quantum algorithms to
    demonstrate a quantum advantage, in this case a quadratic ‘speed-up’, over its
    classical analogue. Developed by ***Lov Grover*** [1] in 1996, the algorithm was
    a breakthrough in the field of quantum computing, following in the tracks of similar
    algorithms such as [***Shor’s algorithm***](https://en.wikipedia.org/wiki/Shor%27s_algorithm)
    and the [***Deutsch-Jozsa algorithm***](https://en.wikipedia.org/wiki/Deutsch%E2%80%93Jozsa_algorithm).
    In this article, we’ll visually explain how Grover’s algorithm works, and we’ll
    mathematically show how it demonstrates a ***quantum ‘speed-up’*** over the best
    classical search algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: The Problem of Unstructured Searching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: However, first let’s introduce the problem that Grover’s algorithm addresses.
    Imagine we have access to an ***unstructured database***, or list, containing
    *N* ***elements***, each of which is represented by a ***unique n-bit string ID
    denoted*** *x*. The list can thus contain at most *N* = 2*ⁿ* elements. We are
    tasked with finding a particular ***“marked”*** element from the database with
    a particular bit-string *x₀.*
  prefs: []
  type: TYPE_NORMAL
