- en: 'Python Exception Testing: Clean and Effective Methods'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-exception-testing-clean-and-effective-methods-86799da86b90?source=collection_archive---------5-----------------------#2023-07-24](https://towardsdatascience.com/python-exception-testing-clean-and-effective-methods-86799da86b90?source=collection_archive---------5-----------------------#2023-07-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Beyond Basics: Advanced Python Exception Testing for Pytest and Unittest'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://naomikriger.medium.com/?source=post_page-----86799da86b90--------------------------------)[![Naomi
    Kriger](../Images/14839f859e1375965c046912f00df5b9.png)](https://naomikriger.medium.com/?source=post_page-----86799da86b90--------------------------------)[](https://towardsdatascience.com/?source=post_page-----86799da86b90--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----86799da86b90--------------------------------)
    [Naomi Kriger](https://naomikriger.medium.com/?source=post_page-----86799da86b90--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fce7969d594d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-exception-testing-clean-and-effective-methods-86799da86b90&user=Naomi+Kriger&userId=ce7969d594d&source=post_page-ce7969d594d----86799da86b90---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----86799da86b90--------------------------------)
    ·4 min read·Jul 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F86799da86b90&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-exception-testing-clean-and-effective-methods-86799da86b90&user=Naomi+Kriger&userId=ce7969d594d&source=-----86799da86b90---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F86799da86b90&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-exception-testing-clean-and-effective-methods-86799da86b90&source=-----86799da86b90---------------------bookmark_footer-----------)![](../Images/57f35113c2a900546ce0274ca735c8b0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[image](https://pixabay.com/illustrations/woman-computer-work-working-5576945/)
    by [chenspec](https://pixabay.com/users/chenspec-7784448/) on [pixabay](http://pixabay.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Testing exceptions is more than just a formality - it’s an essential part of
    writing reliable code. In this tutorial, we will explore practical and effective
    methods to test Python code that raises and does not raise exceptions, verifying
    the accuracy of the exception messages, and covering both `pytest` and `unittest`,
    with and without parameterized tests for each framework.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this tutorial, you will have a solid understanding of how to write
    clean, efficient, and informative exception tests for your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look into the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are several flows we can test for the function above — happy flow, a zero
    denominator, and a non-digit input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see what such tests would look like, using `pytest`:'
  prefs: []
  type: TYPE_NORMAL
- en: pytest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also perform a sanity check to see what happens when we test an invalid
    flow against the wrong exception type or when we attempt to check for a raised
    exception in a happy flow. In these cases, the tests will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, why did the tests above fail? The `with` context catches the specific type
    of exception requested and verifies that the exception type is indeed the one
    we asked for.
  prefs: []
  type: TYPE_NORMAL
- en: In `test_wrong_exception_check`, an exception (`ZeroDivisionError`) was thrown,
    but it wasn’t caught by `TypeError.` Therefore, in the stack trace, we’ll see
    `ZeroDivisionError` was thrown and wasn’t caught by the `TypeError` context.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `test_redundant_exception_context` our `with pytest.raises` context attempted
    to validate the requested exception type (we provided `Exception` in this case)
    but since no exception was thrown — the test failed with the message `Failed:
    DID NOT RAISE <class ‘Exception’>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, moving on to the next stage, let’s explore how we can make our tests much
    more concise and cleaner by using `parametrize`.
  prefs: []
  type: TYPE_NORMAL
- en: Parametrize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ids` parameter changes the test-case name displayed on the IDE’s test-bar
    view. In the screenshot below we can see it in action: with `ids` on the left,
    and without `ids` on the right.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdc3abb6e70438e37f387e7ad923862e.png)'
  prefs: []
  type: TYPE_IMG
- en: screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve covered `pytest` framework, let’s see how to write the same tests
    using `unittest`.
  prefs: []
  type: TYPE_NORMAL
- en: unittest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to use `parameterized` with `unittest` we need to install the package.
    Let’s see parametrized tests in `unittest` would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: Parametrized
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In `unittest`, we also modified the test case names, similar to the `pytest`
    example above. However, to achieve this, we utilized the `name_func` parameter
    along with a custom function.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, today we explored effective methods for testing Python exceptions.
    We learned about recognizing when an exception is thrown as expected and verifying
    that the exception message matches our expectations. We examined various ways
    to test a `divide` function, including the traditional approach using `pytest`
    and a cleaner approach with `parametrize`. We also explored the `unittest` equivalent
    with `parameterized`, which required installing the library, as well as without
    it. The use of `ids` and custom test names provided a cleaner and more informative
    view in the IDE's test bar, making it easier to understand and navigate the test
    cases. By using these techniques, we can improve our unit tests and ensure that
    our code handles exceptions appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Happy testing!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24b04dbae0eb55fa6f00e1992c4ff086.png)'
  prefs: []
  type: TYPE_IMG
- en: '[image](https://pixabay.com/photos/code-program-software-digital-7198654/)
    by [jakob5200](https://pixabay.com/users/jakob5200-10067216/) on [pixabay](http://pixabay.com)'
  prefs: []
  type: TYPE_NORMAL
