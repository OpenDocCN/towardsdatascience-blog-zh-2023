["```py\n# Knowledge base\nkb_loader = GitLoader(\n    clone_url=\"https://github.com/neo4j-documentation/knowledge-base\",\n    repo_path=\"./repos/kb/\",\n    branch=\"master\",\n    file_filter=lambda file_path: file_path.endswith(\".adoc\")\n    and \"articles\" in file_path,\n)\nkb_data = kb_loader.load()\nprint(len(kb_data)) # 309\n```", "```py\n# Define text chunk strategy\nsplitter = CharacterTextSplitter(\n  chunk_size=2000, \n  chunk_overlap=50,\n  separator=\" \"\n)\n# GDS guides\ngds_loader = GitLoader(\n    clone_url=\"https://github.com/neo4j/graph-data-science\",\n    repo_path=\"./repos/gds/\",\n    branch=\"master\",\n    file_filter=lambda file_path: file_path.endswith(\".adoc\") \n    and \"pages\" in file_path,\n)\ngds_data = gds_loader.load()\n# Split documents into chunks\ngds_data_split = splitter.split_documents(gds_data)\nprint(len(gds_data_split)) #771\n```", "```py\nyt_loader = YoutubeLoader(\"1sRgsEKlUr0\")\nyt_data = yt_loader.load()\nyt_data_split = splitter.split_documents(yt_data)\nprint(len(yt_data_split)) #10\n```", "```py\narticle_url = \"https://raw.githubusercontent.com/tomasonjo/blog-datasets/main/medium/neo4j_articles.csv\"\nmedium = pd.read_csv(article_url, sep=\";\")\nmedium[\"source\"] = medium[\"url\"]\nmedium_loader = DataFrameLoader(\n    medium[[\"text\", \"source\"]], \n    page_content_column=\"text\")\nmedium_data = medium_loader.load()\nmedium_data_split = splitter.split_documents(medium_data)\nprint(len(medium_data_split)) #4254\n```", "```py\nso_data = []\nfor i in range(1, 20):\n    # Define the Stack Overflow API endpoint and parameters\n    api_url = \"https://api.stackexchange.com/2.3/questions\"\n    params = {\n        \"order\": \"desc\",\n        \"sort\": \"creation\",\n        \"filter\": \"!-MBrU_IzpJ5H-AG6Bbzy.X-BYQe(2v-.J\",\n        \"tagged\": \"neo4j\",\n        \"site\": \"stackoverflow\",\n        \"pagesize\": 100,\n        \"page\": i,\n    }\n    # Send GET request to Stack Overflow API\n    response = requests.get(api_url, params=params)\n    data = response.json()\n    # Retrieve the resolved questions\n    resolved_questions = [\n        question\n        for question in data[\"items\"]\n        if question[\"is_answered\"] and question.get(\"accepted_answer_id\")\n    ]\n\n    # Print the resolved questions\n    for question in resolved_questions:\n        text = (\n            \"Title:\",\n            question[\"title\"] + \"\\n\" + \"Question:\",\n            BeautifulSoup(question[\"body\"]).get_text()\n            + \"\\n\"\n            + BeautifulSoup(\n                [x[\"body\"] for x in question[\"answers\"] if x[\"is_accepted\"]][0]\n            ).get_text(),\n        )\n        source = question[\"link\"]\n        so_data.append(Document(page_content=str(text), metadata={\"source\": source}))\nprint(len(so_data)) #777\n```", "```py\n# Define embedding model\nOPENAI_API_KEY = \"OPENAI_API_KEY\"\nembeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)\n\nsales_data = medium_data_split + yt_data_split\nsales_store = Chroma.from_documents(\n    sales_data, embeddings, collection_name=\"sales\"\n)\n\nsupport_data = kb_data + gds_data_split + so_data\nsupport_store = Chroma.from_documents(\n    support_data, embeddings, collection_name=\"support\"\n)\n```", "```py\nllm = ChatOpenAI(\n    model_name=\"gpt-3.5-turbo\",\n    temperature=0,\n    openai_api_key=OPENAI_API_KEY,\n    max_tokens=512,\n)\n```", "```py\nsales_template = \"\"\"As a Neo4j marketing bot, your goal is to provide accurate \nand helpful information about Neo4j, a powerful graph database used for \nbuilding various applications. You should answer user inquiries based on the \ncontext provided and avoid making up answers. If you don't know the answer, \nsimply state that you don't know. Remember to provide relevant information \nabout Neo4j's features, benefits, and use cases to assist the user in \nunderstanding its value for application development.\n\n{context}\n\nQuestion: {question}\"\"\"\nSALES_PROMPT = PromptTemplate(\n    template=sales_template, input_variables=[\"context\", \"question\"]\n)\nsales_qa = RetrievalQA.from_chain_type(\n    llm=llm,\n    chain_type=\"stuff\",\n    retriever=sales_store.as_retriever(),\n    chain_type_kwargs={\"prompt\": SALES_PROMPT},\n)\n```", "```py\nsupport_template = \"\"\"\nAs a Neo4j Customer Support bot, you are here to assist with any issues \na user might be facing with their graph database implementation and Cypher statements.\nPlease provide as much detail as possible about the problem, how to solve it, and steps a user should take to fix it.\nIf the provided context doesn't provide enough information, you are allowed to use your knowledge and experience to offer you the best possible assistance.\n\n{context}\n\nQuestion: {question}\"\"\"\n\nSUPPORT_PROMPT = PromptTemplate(\n    template=support_template, input_variables=[\"context\", \"question\"]\n)\n\nsupport_qa = RetrievalQA.from_chain_type(\n    llm=llm,\n    chain_type=\"stuff\",\n    retriever=support_store.as_retriever(),\n    chain_type_kwargs={\"prompt\": SUPPORT_PROMPT},\n)\n```", "```py\ntools = [\n    Tool(\n        name=\"sales\",\n        func=sales_qa.run,\n        description=\"\"\"useful for when a user is interested in various Neo4j information, \n                       use-cases, or applications. A user is not asking for any debugging, but is only\n                       interested in general advice for integrating and using Neo4j.\n                       Input should be a fully formed question.\"\"\",\n    ),\n    Tool(\n        name=\"support\",\n        func=support_qa.run,\n        description=\"\"\"useful for when when a user asks to optimize or debug a Cypher statement or needs\n                       specific instructions how to accomplish a specified task. \n                       Input should be a fully formed question.\"\"\",\n    ),\n]\n```", "```py\nagent = initialize_agent(\n    tools, \n    llm, \n    agent=\"zero-shot-react-description\", \n    verbose=True\n)\n```"]