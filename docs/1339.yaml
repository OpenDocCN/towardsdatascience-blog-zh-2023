- en: Running Python via Excel VBA —a Case of Time Series Resampling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/running-python-via-excel-vba-a-case-of-time-series-resampling-fe108610e4e4?source=collection_archive---------8-----------------------#2023-04-17](https://towardsdatascience.com/running-python-via-excel-vba-a-case-of-time-series-resampling-fe108610e4e4?source=collection_archive---------8-----------------------#2023-04-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A comprehensive assessment of time series resampling of solar irradiance using
    VBA, using Python, and using Python via Excel VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----fe108610e4e4--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----fe108610e4e4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe108610e4e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe108610e4e4--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----fe108610e4e4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frunning-python-via-excel-vba-a-case-of-time-series-resampling-fe108610e4e4&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----fe108610e4e4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe108610e4e4--------------------------------)
    ·11 min read·Apr 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffe108610e4e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frunning-python-via-excel-vba-a-case-of-time-series-resampling-fe108610e4e4&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----fe108610e4e4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffe108610e4e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frunning-python-via-excel-vba-a-case-of-time-series-resampling-fe108610e4e4&source=-----fe108610e4e4---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Recently, I have been working with Excel-based interface and models frequently.
    During this time, I became acquainted with the [Visual Basic for Application (VBA)](https://learn.microsoft.com/en-us/office/vba/library-reference/concepts/getting-started-with-vba-in-office)
    for Office, which is a powerful programming language to extend Office applications.
    VBA is used to automate repetitive tasks, extend user interactions, and interact
    between different Office applications, making the routine tasks more efficient
    and effective.
  prefs: []
  type: TYPE_NORMAL
- en: With a decent programming background in Python, it took me relatively steep
    learning curve towards the beginning to learn different features and functionalities
    of VBA, which gradually turned less steep with time. I have realized that learning
    VBA is very useful since it interacts with Excel workbook directly and can automate
    the tasks on the workbook itself that otherwise would require coding in a different
    programming language. However, if it is possible to run a script in a different
    programming language (e.g., Python) within Excel VBA, it can be even more helpful
    in automating our routine tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I will share my experience of using Excel VBA and Python to perform
    a simple task — time series resampling of solar irradiance data. Furthermore,
    I am going to present how a Python script can be run via Excel VBA to perform
    the same task. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d95a391ba99fb3f6fd922f3c4bbba8f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Aron Visuals](https://unsplash.com/@aronvisuals) on [Unsplash](http://www.unsplash.com).
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data used is hourly All Sky Surface Shortwave Downward Irradiance (`ALLSKY_SFC_SW_DWN`)
    for 2020 (UTC time zone) downloaded from NASA Power [website](https://power.larc.nasa.gov/data-access-viewer/)
    for four cities: Chitwan (Nepal), New York (USA), Sydney (Australia), and Bonn
    (Germany). The data was accessed and downloaded using the [API service](https://power.larc.nasa.gov/api/pages/?urls.primaryName=Hourly)
    of NASA Power with a Python script, which I intend to document in a different
    post.'
  prefs: []
  type: TYPE_NORMAL
- en: Solar irradiance is the power per unit area (W/m2) obtained from the sun in
    the form of electromagnetic radiation in the wavelength range of the measuring
    instrument. Solar irradiance integrated over a time period gives the solar irradiation,
    referred to as solar insolation (Wh/m2).
  prefs: []
  type: TYPE_NORMAL
- en: According to the [definition](https://power.larc.nasa.gov/#resources) of NASA
    Power, the parameter used All Sky Surface Shortwave Downward Irradiance (`ALLSKY_SFC_SW_DWN`)
    refers to the total solar irradiance (direct plus diffused) incident on a horizontal
    plane at the surface of the earth under all sky conditions. An alternative term
    for total solar irradiance is Global Horizontal Irradiance (GHI). Since the values
    are hourly, its unit is Wh/m².
  prefs: []
  type: TYPE_NORMAL
- en: Data in Excel file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since 2020 was a leap year, I obtained the hourly solar irradiance values for
    8784 hours for the four cities. These values are placed in column B, C, D and
    E of the Excel file as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/983b135d28914c1d007e3e3442184821.png)'
  prefs: []
  type: TYPE_IMG
- en: Hourly solar irradiance values for four cities in 2020 placed in the Excel file.
    The formula bar shows the formula used in highlighted cell A2\. Illustration by
    Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the values in column A in date format, the following formula was used
    in Excel (e.g., in cell A2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`ROW(A1)/24` is used to get the value of hour within a day (0–23 hr).'
  prefs: []
  type: TYPE_NORMAL
- en: Also, I named cell A1 as `datetime`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting the original hourly solar irradiance data for 2020 for the four cities
    in Excel looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dba008c168b4ceec74ce33f579a13496.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting hourly solar irradiance values using Excel. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Time series resampling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time series resampling refers to converting the frequency level of time series
    data. In simple words, [resampling](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling)
    is a time-based groupby, followed by a reduction method on each of the groups.
    The data must have a datetime-like index for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Time Series Resampling using Excel VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no default function in Excel for time series resampling. Therefore,
    I wrote a couple of subroutines to get monthly and hourly average values as described
    in the sections a and b respectively below.
  prefs: []
  type: TYPE_NORMAL
- en: a. VBA code for converting hourly values to average monthly frequency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes the code snippet (below) used to convert hourly value
    to average monthly value in VBA.
  prefs: []
  type: TYPE_NORMAL
- en: An array is a group of variables in VBA. The default lower bound of an array
    element in VBA is 0\. Mentioning `Option Base 1` on the top of the sub-routine
    changes the lower bound of array element to 1\. I defined an array called `columns(4)`
    as a group of strings containing 4 variables. And I passed the strings B, C, D
    and E within this array.
  prefs: []
  type: TYPE_NORMAL
- en: Cell A1 in Excel is defined as a named cell `datetime`. To refer to this cell
    in VBA, I declared `datetime` as a range and assigned it to the range with same
    name in Excel.
  prefs: []
  type: TYPE_NORMAL
- en: To refer to the month from the datetime column in Excel, I used the `MONTH()`
    function and assigned it to an integer variable called `mnth`. To loop through
    hourly values in each row, I declared another integer called `row`. Finally, I
    declared `sum` and `num_hours` to calculate the monthly average values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, I created a for-loop to iterate through the columns for values for each
    city. Within this for-loop, there are two other nested loops to iterate through
    each month and hour of the year, respectively. The `sum` aggregates the hourly
    solar irradiance values for each month, and the `num_hours` aggregates the number
    of hours in each month. Finally, by dividing the `sum` with `num_hours`, monthly
    average values of solar irradiance are obtained for each month for each city.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As a note, `Range(column & row).Interior.Color = RGB(255, 255, 0)` highlights
    each cell with yellow color while iterating through the row (city) and column
    (mnth).
  prefs: []
  type: TYPE_NORMAL
- en: b. VBA code for converting hourly values in a year to average hourly values
    for each of the 24 hours (0–23 hr) of the day in 2020
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code used to convert hourly values (of a year) to average hourly values
    for each of the 24 hours of the day in 2020.
  prefs: []
  type: TYPE_NORMAL
- en: In the code for this section, first, I extracted the value for the `last_row`
    (8785) in the data table using
  prefs: []
  type: TYPE_NORMAL
- en: '`Cells(datetime.row, datetime.column).End(xlDown).row`'
  prefs: []
  type: TYPE_NORMAL
- en: to loop through each row for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'And I used the `HOUR()` function in Excel to retrieve the corresponding hour
    in column A in each row using:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Hour(Cells(row, datetime.column).column).Value`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code for the purpose of this section is given in the snippet below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above code snippet, `Debug.Print` command is used to print the intermediate
    results in the intermediate window in the VBA developer space as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e2cf6df88168f0938345df4b2ebceb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of Debug.Print as visible in Immediate Window. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Time Series Resampling using Pandas**'
  prefs: []
  type: TYPE_NORMAL
- en: The pandas library in Python provides an in-built [method](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.resample.html)
    for time series resampling using `df.resample()` and passing the rule for resampling.
    For example, “M” is for monthly, “W” is for weekly, “Q” is for quarterly, “D”
    is for daily, “B” is for Business Day, etc. The complete set of rules available
    for resampling to different frequency levels can be found [here](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects).
  prefs: []
  type: TYPE_NORMAL
- en: A pre-requisite for time series resampling is that the dataframe index needs
    to be converted into a datetime type using `pd.to_datetime()`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57fae4fdafbaffe229db543eb68781bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe index needs to be of type DatetimeIndex as a pre-requisite for time
    series resampling. Illustration by Author
  prefs: []
  type: TYPE_NORMAL
- en: Any built-in method available via [Groupby](https://pandas.pydata.org/pandas-docs/stable/reference/groupby.html#api-groupby)
    is available as a method of the returned object of `df.resample()`, including
    `min()`, `max()`, `mean()`, `median()`, `std()`, `first()`, `last()`, `ohlc()`,
    and `sem()`. In this post, I am simply assessing the mean values of the solar
    irradiance.
  prefs: []
  type: TYPE_NORMAL
- en: In the Python code below, I allow the user to enter the frequency that they
    want to return and display for the solar irradiance values. The options include
    Original, Monthly average, Daily average, Weekly average, Quarterly average, All
    of the above, and Hourly average (for each of the 24 hours within a day).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This script can be run by going to the terminal/command prompt and typing `python
    -m python_script.py` if one is the same path as the script file. To abrubt the
    run, one can type `Ctrl+C`.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Running Python script via Excel VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The above Python script can also be run via Excel VBA. For this purpose, I saved
    the above script as `python_script.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: The complete subroutine written in VBA to run the Python script is given in
    code snippet below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: First, I declared `objShell` variable to refer to the address of an object (Wscript.shell).
    This object allows to access the Windows functionality to run the external program
    (here, Python script).
  prefs: []
  type: TYPE_NORMAL
- en: The `PythonExePath` refers to the path of the Python application in the computer
    system. In a Windows system, this path can be found by typing `where python` in
    the Windows command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: The path of the python script is defined as string in `PythonScriptPath`. Note
    that this path **should not have space** for the script to run
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the following line is used to run the Python script using the Python
    application via the Excel VBA interface.
  prefs: []
  type: TYPE_NORMAL
- en: '`objShell.Run PythonExePath & PythonScriptPath`'
  prefs: []
  type: TYPE_NORMAL
- en: Output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I assigned the above sub-routine/macro (command written using VBA language)
    to a button in Excel file as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffa376dad3846bad9822819ba596cea0.png)'
  prefs: []
  type: TYPE_IMG
- en: Button where the macro is assigned to run the Python script. Illustration by
    Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the button runs the Python script as shown below and asks the user
    to enter the frequency the user wants to display output as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce867f9992f695e2b0c5d5cdbc5c70aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Python asks the user to enter the option. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Upon selecting “All of the above”, I get the output plot for the daily, weekly,
    monthly, and quarterly average values of solar irradiance in the four cities in
    2020\. It is observed that as the time resolution increases from right to left
    and top to bottom, the line/curve becomes smoother as the variabilities in lower
    time resolutions are averaged out.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfafd868b73e5229360ae9284b7bf4a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Output while selecting All of the above shows hourly values of solar irradiance
    averaged out for daily, weekly, monthly and quarterly levels. Illustration by
    Author.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this post, I presented three techniques for time series resampling of hourly
    solar irradiance data for four cities in 2020:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Excel VBA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using pandas in Python
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running Python script via Excel VBA interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Excel VBA can be very handy while working with data in Excel because it allows
    us to perform various operations and have direct interactions with data in different
    sheets in the same or different Excel file where the sub-routines/macros are written.
    Also, by writing macros and assigning them to interactive buttons/userforms or
    other widgets, it is easy to share Excel file with other users to whom only the
    functionalities matter and not what happens with the code in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main advantages of Python is that there are packages with several
    in-built functionalities, which makes writing a separate code for routine tasks
    redundant. In this context, combining the strengths of Excel VBA and Python can
    be very advantageous. This is depicted by the way I ran the Python script for
    time series resampling by clicking a button on an Excel file, which is associated
    with a few simple lines of VBA code.
  prefs: []
  type: TYPE_NORMAL
- en: The Excel file including the macros, and the Python script are available in
    the `script` folder within this [repository](https://github.com/hbshrestha/Data_Analytics).
    Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
