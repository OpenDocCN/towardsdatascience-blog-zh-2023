["```py\npip install tsgm\n```", "```py\n# import the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport random\nfrom tensorflow import keras\nimport tsgm\n```", "```py\n# and now generate the dataset\nX = tsgm.utils.gen_sine_dataset(100, 64, 2, max_value=20)\n```", "```py\naug_model = tsgm.models.augmentations.GaussianNoise()\nsamples = aug_model.generate(X=X, n_samples=10, variance=0.2)\n```", "```py\naug_model = tsgm.models.augmentations.Shuffle()\nsamples = aug_model.generate(X=X, n_samples=3)\n```", "```py\naug_model = tsgm.models.augmentations.SliceAndShuffle()\nsamples = aug_model.generate(X=X, n_samples=10, n_segments=3)\n```", "```py\naug_model = tsgm.models.augmentations.MagnitudeWarping()\nsamples = aug_model.generate(X=X, n_samples=10, sigma=1)\n```", "```py\naug_model = tsgm.models.augmentations.WindowWarping()\nsamples = aug_model.generate(X=X, n_samples=10, scales=(0.5,), window_ratio=0.5)\n```", "```py\naug_model = tsgm.models.augmentations.DTWBarycentricAveraging()\ninitial_timeseries = random.sample(range(X.shape[0]), 10)\ninitial_timeseries = X[initial_timeseries]\nsamples = aug_model.generate(X=X, n_samples=10, initial_timeseries=initial_timeseries )\n```", "```py\nn, n_ts, n_features = 1000, 24, 5\ndata = tsgm.utils.gen_sine_dataset(n, n_ts, n_features)\nscaler = tsgm.utils.TSFeatureWiseScaler() \nscaled_data = scaler.fit_transform(data)\n```", "```py\narchitecture = tsgm.models.zoo[“vae_conv5”](n_ts, n_features, 10)\nencoder, decoder = architecture.encoder, architecture.decodervae = tsgm.models.cvae.BetaVAE(encoder, decoder)\nvae.compile(optimizer=keras.optimizers.Adam())\nvae.fit(scaled_data, epochs=1, batch_size=64)\nsamples = vae.generate(10)\n```", "```py\n@article{\n  nikitin2023tsgm,\n  title={TSGM: A Flexible Framework for Generative Modeling of Synthetic Time Series},\n  author={Nikitin, Alexander and Iannucci, Letizia and Kaski, Samuel},\n  journal={arXiv preprint arXiv:2305.11567},\n  year={2023}\n}\n```"]