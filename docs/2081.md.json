["```py\ncolumn_mapping = ColumnMapping( \n  numerical_features=['Age', 'Positive_Feedback_Count'], \n  categorical_features=['Division_Name', 'Department_Name', 'Class_Name'], \n  text_features=['Review_Text', 'Title']\n)\n```", "```py\nreviews_ref = reviews[reviews.Rating > 3].sample(n=5000, replace=True, ignore_index=True, random_state=42)\nreviews_cur = reviews[reviews.Rating < 3].sample(n=5000, replace=True, ignore_index=True, random_state=42)\n```", "```py\ntext_overview_report = Report(metrics=[ \n  TextOverviewPreset(column_name=\"Review_Text\", descriptors={ \n    \"Review texts - OOV %\" : OOV(), \n    \"Review texts - Non Letter %\" : NonLetterCharacterPercentage(), \n    \"Review texts - Symbol Length\" : TextLength(), \n    \"Review texts - Sentence Count\" : SentenceCount(), \n    \"Review texts - Word Count\" : WordCount(), \n    \"Review texts - Sentiment\" : Sentiment(), \n    \"Reviews about Dress\" : TriggerWordsPresence(words_list=['dress', 'gown']), \n    \"Reviews about Blouses\" : TriggerWordsPresence(words_list=['blouse', 'shirt']), \n  }) \n]) \ntext_overview_report.run(reference_data=reviews_ref, current_data=reviews_cur, column_mapping=column_mapping) \ntext_overview_report\n```", "```py\ndescriptors_report = Report(metrics=[ \n  ColumnDriftMetric(WordCount().for_column(\"Review_Text\")), \n  ColumnDriftMetric(Sentiment().for_column(\"Review_Text\")), \n  ColumnDriftMetric(TriggerWordsPresence(words_list=['dress', 'gown']).for_column(\"Review_Text\")), \n]) \ndescriptors_report.run(reference_data=reviews_ref, current_data=reviews_cur, column_mapping=column_mapping) \ndescriptors_report\n```", "```py\nfrom transformers import pipeline \nclassifier = pipeline(\"text-classification\", model='bhadresh-savani/distilbert-base-uncased-emotion', top_k=1) \nprediction = classifier(\"I love using evidently! It's easy to use\", ) \nprint(prediction)\n```", "```py\ncolumn_mapping = ColumnMapping( \n  numerical_features=['Age', 'Positive_Feedback_Count'], \n  categorical_features=['Division_Name', 'Department_Name', 'Class_Name', 'emotion'], \n  text_features=['Review_Text', 'Title'] )\n```", "```py\ndescriptors_report = Report(metrics=[ \n  ColumnDriftMetric(WordCount().for_column(\"Review_Text\")), \n  ColumnDriftMetric(Sentiment().for_column(\"Review_Text\")), \n  ColumnDriftMetric(TriggerWordsPresence(words_list=['dress', 'gown']).for_column(\"Review_Text\")), \n  ColumnDriftMetric('emotion'), ]) \ndescriptors_report.run(reference_data=reviews_ref, current_data=reviews_cur, column_mapping=column_mapping) \ndescriptors_report\n```", "```py\ndescriptors_test_suite = TestSuite(tests=[ \n  TestColumnDrift(column_name = 'emotion'), \n  TestColumnDrift(column_name = WordCount().for_column(\"Review_Text\")), \n  TestColumnDrift(column_name = Sentiment().for_column(\"Review_Text\")), \n  TestColumnDrift(column_name = TriggerWordsPresence(words_list=['dress', 'gown']).for_column(\"Review_Text\")), \n]) \ndescriptors_test_suite.run(reference_data=reviews_ref, current_data=reviews_cur, column_mapping=column_mapping) \ndescriptors_test_suite\n```", "```py\ndescriptors_test_suite = TestSuite(tests=[ \n  TestNumberOfOutRangeValues(column_name = WordCount().for_column(\"Review_Text\"), left=2, eq=0), \n]) \ndescriptors_test_suite.run(reference_data=reviews_ref, current_data=reviews_cur, column_mapping=column_mapping) \ndescriptors_test_suite\n```"]