["```py\nclass Person:\n    pass\n\nclass Child(Person):\n    pass\n\nchild = Child()\n```", "```py\nclass Person:\n    pass\n\nid(Person) \n# some memory location\n\nclass Child(Person):\n    pass\n\nid(Child)\n# some memory location\n\n# Class objects are created, you can instantiate objects\n\nchild = Child()\n\nid(child)\n# some memory location\n```", "```py\nclass Person:\n    pass\n\nclass Child(Person):\n    pass\n\nchild = Child()\n\ntype(child)\n# Child\n\ntype(Child)\n# type\n```", "```py\nclass Parent:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nparent = Parent('John', 35)\n```", "```py\nclass Parent:\n    def __new__(cls, name, age):\n        print('new is called')\n        return super().__new__(cls)\n\n    def __init__(self, name, age):\n        print('init is called')\n        self.name = name\n        self.age = age\n\nparent = Parent('John', 35)\n# new is called\n# init is called\n```", "```py\nisinstance(object, object)\n# True\n```", "```py\nclass Parent:\n    def __new__(cls, name, age):\n        print('new is called')\n        return super().__new__(cls)\n\n    def __init__(self, name, age):\n        print('init is called')\n        self.name = name\n        self.age = age\n\n    def __call__(self):\n        print('Parent here!')\n\nparent = Parent('John', 35)\nparent()\n# Parent here!\n```", "```py\nclass MyMeta(type):\n    def __call__(self, *args, **kwargs):\n        print(f'{self.__name__} is called'\n              f' with args={args}, kwargs={kwarg}')\n\nclass Parent(metaclass=MyMeta):\n    def __new__(cls, name, age):\n        print('new is called')\n        return super().__new__(cls)\n\n    def __init__(self, name, age):\n        print('init is called')\n        self.name = name\n        self.age = age\n\nparent = Parent('John', 35)\n# Parent is called with args=('John', 35), kwargs={}\ntype(parent)\n# NoneType\n```", "```py\nclass MyMeta(type):\n\n    def __call__(cls, *args, **kwargs):\n        print(f'{cls.__name__} is called'\n              f'with args={args}, kwargs={kwargs}')\n        print('metaclass calls __new__')\n        obj = cls.__new__(cls, *args, **kwargs)\n\n        if isinstance(obj, cls):\n            print('metaclass calls __init__')\n            cls.__init__(obj, *args, **kwargs)\n\n        return obj\n\nclass Parent(metaclass=MyMeta):\n\n    def __new__(cls, name, age):\n        print('new is called')\n        return super().__new__(cls)\n\n    def __init__(self, name, age):\n        print('init is called')\n        self.name = name\n        self.age = age\n\nparent = Parent('John', 35)\n# Parent is called with args=('John', 35), kwargs={}\n# metaclass calls __new__\n# new is called\n# metaclass calls __init__\n# init is called\n\ntype(parent)\n# Parent\n\nstr(parent)\n# '<__main__.Parent object at 0x103d540a0>'\n```"]