- en: 'The Vehicle Routing Problem: Exact and Heuristic Solutions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 车辆路径问题：精确与启发式解决方案
- en: 原文：[https://towardsdatascience.com/the-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734?source=collection_archive---------0-----------------------#2023-08-04](https://towardsdatascience.com/the-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734?source=collection_archive---------0-----------------------#2023-08-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/the-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734?source=collection_archive---------0-----------------------#2023-08-04)'
- en: Understand how to solve complex routing problems with Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何用Python解决复杂的路由问题
- en: '[](https://medium.com/@bruscalia12?source=post_page-----c411c0f4d734--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----c411c0f4d734--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c411c0f4d734--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c411c0f4d734--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----c411c0f4d734--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page-----c411c0f4d734--------------------------------)[![布鲁诺·斯卡利亚
    C. F. 莱特](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----c411c0f4d734--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c411c0f4d734--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c411c0f4d734--------------------------------)
    [布鲁诺·斯卡利亚 C. F. 莱特](https://medium.com/@bruscalia12?source=post_page-----c411c0f4d734--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----c411c0f4d734---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c411c0f4d734--------------------------------)
    ·13 min read·Aug 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc411c0f4d734&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----c411c0f4d734---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----c411c0f4d734---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c411c0f4d734--------------------------------)
    ·13分钟阅读·2023年8月4日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc411c0f4d734&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----c411c0f4d734---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc411c0f4d734&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734&source=-----c411c0f4d734---------------------bookmark_footer-----------)![](../Images/f93bccab1e4c779b83d2245412c6d584.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc411c0f4d734&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-vehicle-routing-problem-exact-and-heuristic-solutions-c411c0f4d734&source=-----c411c0f4d734---------------------bookmark_footer-----------)![](../Images/f93bccab1e4c779b83d2245412c6d584.png)'
- en: Photo by [Nik Shuliahin 💛💙](https://unsplash.com/@tjump?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Nik Shuliahin 💛💙](https://unsplash.com/@tjump?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The Vehicle Routing Problem (VRP) aims to determine the best set of routes to
    be performed by a fleet of vehicles to serve a given set of customers. Due to
    its several applications and challenging combinatorial aspects, it is one of the
    most studied problems in Operations Research and Numerical Optimization.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆路径问题（VRP）的目标是确定由一组车辆执行的最佳路径集合，以服务于一组指定的客户。由于其多种应用和具有挑战性的组合特性，它是运筹学和数值优化中研究最多的问题之一。
- en: The Capacitated Vehicle Routing Problem (CVRP) is one of the most common variants,
    as it introduces vehicles with limited load capacity and possibly duration/distance
    constraints. Other usual variants also introduce multiple depots, heterogeneous
    fleets, pickup and deliveries, and time-window constraints.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 具有负载（和持续时间）约束的容量车辆路径问题（CVRP）是最常见的变种之一，因为它引入了负载容量有限的车辆以及可能的持续时间/距离约束。其他常见的变种还引入了多个仓库、异质车队、取货和配送以及时间窗约束。
- en: Combinatorial aspects of these problems are such that considering a simple set
    of 15 points, there are 6 × 10¹¹ possible routes connecting them (Dantzig & Ramser,
    1959). Therefore, some real-world applications would remain impractical until
    computational and algorithm research advances over the last couple of decades.
    Branch-Cut-and-Price algorithms have been able to prove the optimality of CVRP
    instances with a few hundred customers (Fukasawa et al., 2006; Pecin et al., 2017),
    and state-of-the-art metaheuristics combined with local search techniques can
    provide good quality (sometimes optimal) solutions to these instances within a
    few seconds (Vidal et al., 2012; Vidal, 2022).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题的组合方面使得考虑一个简单的15点集合时，有6 × 10¹¹条可能的路线将其连接起来（Dantzig & Ramser, 1959）。因此，某些现实世界的应用在过去几十年中计算和算法研究进展之前可能仍不切实际。Branch-Cut-and-Price算法已能够证明具有数百名客户的CVRP实例的最优性（Fukasawa
    et al., 2006; Pecin et al., 2017），而最先进的元启发式算法结合局部搜索技术可以在几秒钟内为这些实例提供高质量（有时最优）的解（Vidal
    et al., 2012; Vidal, 2022）。
- en: Throughout this article, we will introduce the Capacitated Vehicle Routing Problem
    with load (and duration) constraints and solve it using Mixed-Integer Programming
    (MIP) and specialized (meta)heuristic algorithms. In the first part, we will use
    the Python AML *Pyomo*, with the HiGHS solver, whereas in the second part, we
    will use the Google *OR Tools* package.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将介绍具有负载（和持续时间）约束的容量车辆路径问题，并使用混合整数规划（MIP）和专门的（元）启发式算法进行求解。在第一部分中，我们将使用Python
    AML *Pyomo*，配合HiGHS求解器，而在第二部分中，我们将使用Google *OR Tools* 包。
- en: The reader who is more interested in real-world applications than in theoretical
    aspects of the problem might quickly skim through the *MIP* section and pay more
    interest to the [*Specialized (Meta)Heuristics*](#45ff)and [*Useful Extensions*](#cb69)sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那些对问题的现实世界应用更感兴趣而不是理论方面的读者可能会快速浏览*MIP*部分，并对[*专门（元）启发式*](#45ff)和[*有用扩展*](#cb69)部分更感兴趣。
- en: Those interested in understanding in detail the MIP formulation but not yet
    familiar with numerical optimization might find it useful to take a look at my
    previous stories about[*Linear Programming*](https://medium.com/towards-data-science/linear-programming-theory-and-applications-c67600591612)and
    the [*Branch & Bound*](/a-gentle-introduction-to-branch-bound-d00a4ee1cad) method
    before proceeding with this one.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那些对MIP公式感兴趣但尚不熟悉数值优化的人可能会发现查看我之前关于[*线性规划*](https://medium.com/towards-data-science/linear-programming-theory-and-applications-c67600591612)和[*分支定界*](/a-gentle-introduction-to-branch-bound-d00a4ee1cad)方法的故事会很有帮助，然后再继续阅读本文。
- en: As usual, you can find the complete code in this [git repository](https://github.com/bruscalia/optimization-demo-files/tree/27ccb5d2fc9e85e07436d1120f5c3f4073960448/vrp).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，你可以在这个 [git 仓库](https://github.com/bruscalia/optimization-demo-files/tree/27ccb5d2fc9e85e07436d1120f5c3f4073960448/vrp)
    中找到完整的代码。
- en: Now, let us dive in!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解吧！
- en: Mixed-Integer Programming
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合整数规划
- en: The mathematical formulation presented in this section will use the same equations
    presented by Toth & Vigo (2002) in the model therein referred to as the “three-index
    vehicle flow formulation”.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中提出的数学公式将使用Toth & Vigo (2002)中所展示的相同方程，该模型被称为“三指数车辆流量公式”。
- en: 'Consider a set *V* of nodes (demands and depot) and a set *K* of vehicles.
    We will use lowercase *i* and *j* to indicate node indexes and lowercase *k* to
    indicate vehicle indexes. As this model is valid for the asymmetric case, let
    us assume the nodes are part of a complete directed graph *G*(*V*, *A*) with arcs
    *A*. In this problem, there is a single depot node indexed by 0 and all vehicles
    have the same capacity *Q*. Consider two groups of decision variables:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个节点集合*V*（需求和仓库）和一个车辆集合*K*。我们将使用小写的*i*和*j*来表示节点索引，小写的*k*来表示车辆索引。由于该模型适用于不对称情况，假设节点是一个完整的有向图*G*(*V*,
    *A*)的一部分，其中*A*是弧。在这个问题中，有一个单一的仓库节点，索引为0，所有车辆的容量都是*Q*。考虑两个决策变量组：
- en: '*x*_{*i, j, k*}: Is a binary variable that indicates an active arc from node
    *i* to node *j* performed by vehicle *k*.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x*_{*i, j, k*}: 是一个二进制变量，表示由车辆 *k* 执行的从节点 *i* 到节点 *j* 的活跃弧。'
- en: '*y*_{*i, k*}: Is a binary variable that indicates that the demand from node
    *i* is fulfilled by vehicle *k*.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y*_{*i, k*}: 是一个二进制变量，表示节点 *i* 的需求由车辆 *k* 满足。'
- en: Consider our objective to minimize the cost value associated with active arcs.
    Total duration or distance are usual examples. Say the cost of traversing the
    arc *i*, *j* is *cᵢⱼ*. The objective function can be stated as the following.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是最小化与活跃弧相关的成本值。总持续时间或距离是常见的例子。假设弧 *i*，*j* 的成本是 *cᵢⱼ*。目标函数可以表示为如下。
- en: '![](../Images/6edb8e70ffd7f3b0b7621fcc56c702c8.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6edb8e70ffd7f3b0b7621fcc56c702c8.png)'
- en: Objective function of CVRP. (Image by the author).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CVRP 的目标函数。（作者提供的图像）。
- en: 'We also need to include constraints that ensure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要包括确保以下条件的约束：
- en: Each customer *i* is visited once, therefore has one active arc which starts
    from it and one that arrives on it.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户 *i* 只被访问一次，因此有一个从它出发的活跃弧和一个到达它的活跃弧。
- en: If any arc variable indexed by vehicle *k* goes into one node *i* or out of
    it, the demand *q* of this node is assigned to vehicle *k*.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何由车辆 *k* 索引的弧变量进入一个节点 *i* 或从中出去，则该节点的需求 *q* 分配给车辆 *k*。
- en: The total demand assigned to a vehicle must not exceed its capacity *Q*.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配给一辆车的总需求不能超过其容量 *Q*。
- en: Exactly |*K*| nodes start at the depot and arrive at the depot.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恰好 |*K*| 个节点从仓库出发并到达仓库。
- en: There are no subtours… However, the number of subtours is potentially too large
    to be enumerated from the start. We will dive into more detail about how to do
    it.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有子回路……然而，子回路的数量可能太大，无法从一开始就枚举出来。我们将详细讨论如何进行处理。
- en: '![](../Images/27107a239f4062abd402f7f61d187d3d.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27107a239f4062abd402f7f61d187d3d.png)'
- en: Constraints of CVRP. (Image by the author).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: CVRP 的约束。（作者提供的图像）。
- en: 'As usual for Python tutorials, let us start our *hands-on* part by importing
    the libraries used in this section:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，在 Python 教程中，让我们通过导入本节中使用的库开始我们的 *动手* 部分：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And now let us instantiate a random problem with *N* demand nodes. In this example,
    the *depot* node is assumed to be the first node (index 0), so we ensure its corresponding
    demand is also zero.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实例化一个具有 *N* 个需求节点的随机问题。在此示例中，*depot* 节点被假设为第一个节点（索引 0），因此我们确保其对应的需求也为零。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The number of necessary vehicles can be calculated by using a Bin Packing Problem.
    An example of how to perform it is also included in the [complete source code](https://github.com/bruscalia/optimization-demo-files/tree/27ccb5d2fc9e85e07436d1120f5c3f4073960448/vrp).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 必要的车辆数量可以通过使用二进制装箱问题来计算。如何执行的示例也包含在 [完整源代码](https://github.com/bruscalia/optimization-demo-files/tree/27ccb5d2fc9e85e07436d1120f5c3f4073960448/vrp)
    中。
- en: 'There are two approaches for modeling a problem in *pyomo*: *Abstract* and
    *Concrete* models. In the first approach, the algebraic expressions of the problem
    are defined before some data values are supplied, whereas, in the second, the
    model instance is created immediately as its elements are defined. You can find
    more about these approaches in the [library documentation](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)
    or in the book by Bynum et al. (2021). Throughout this article, we will adopt
    the *Concrete* model formulation.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *pyomo* 中建模问题有两种方法：*Abstract* 和 *Concrete* 模型。在第一种方法中，问题的代数表达式在提供一些数据值之前被定义，而在第二种方法中，模型实例在定义其元素时立即创建。你可以在
    [库文档](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)
    或 Bynum 等人（2021）的书中找到更多关于这些方法的信息。本文中，我们将采用 *Concrete* 模型的表述。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let us instantiate the sets of demand nodes *V*, arcs *A*, and vehicles *K*.
    Notice that the depot node is included in the set of nodes *V* as in the original
    mathematical formulation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实例化需求节点 *V*、弧 *A* 和车辆 *K* 的集合。注意，仓库节点包含在节点 *V* 集合中，如原始数学公式所示。
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now our parameters for capacity, demand load, and arc costs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们设置容量、需求负荷和弧成本的参数。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And the decision variables indicating active arcs in a given vehicle and that
    a node visited by the vehicle.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以及指示给定车辆中的活跃弧和车辆访问的节点的决策变量。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Before including the constraints, I will create our objective that computes
    the total cost of active arcs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含约束之前，我将创建我们的目标，计算活跃弧的总成本。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We also must include constraints previously listed. First let us implement
    them using the usual *Pyomo* signature: *function(model, *domain)*.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须包括之前列出的约束条件。首先，让我们使用常见的*Pyomo*签名来实现它们：*function(model, *domain)*。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And then incorporate them into our model.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将它们纳入我们的模型中。
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that I didn’t include the subtour elimination constraints yet. We should
    consider all possible permutations of the *N* nodes taking *k* at a time and these
    could be prohibitively large to enumerate even for moderate size instances. Alternatively,
    in our solution procedure, we will recursively include subtour elimination constraints
    each time a new solution is found if we verify that this solution produces subtours.
    In some commercial solvers, these are called “*lazy constraints*” and can be incorporated
    directly into the solver via callback.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我还没有包括子旅行消除约束。我们应该考虑所有可能的*N*个节点的排列，每次取*k*个，这可能会变得非常庞大，即使对于中等规模的实例也很难枚举。或者，在我们的解决过程中，我们将递归地在每次找到新解时包括子旅行消除约束，如果我们验证这个解产生了子旅行的话。在一些商业求解器中，这些称为“*懒惰约束*”，可以通过回调直接纳入求解器。
- en: First let us create a function that, given a subtour, all remaining nodes, a
    node from the subtour, and a vehicle, returns a *Pyomo* expression corresponding
    to the mathematical formulation previously stated. Also, let us include a *ConstraintList*
    to which we will include new elements as we proceed with the solution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个函数，给定一个子旅行、所有剩余节点、一个子旅行中的节点和一辆车，返回一个*Pyomo*表达式，对应于之前陈述的数学公式。此外，让我们包括一个*ConstraintList*，在解决过程中我们将向其中添加新的元素。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We must create some functions that will, given a solution, return subtours created
    (if they exist). To do so, we will first create a list of active arcs in the model
    using the *find_arcs* function. This list will be used to create an incomplete
    directed graph using the *Networkx* *DiGraph* class. And the *find_subtours* function
    should return a *list* of *sets* of connected components.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须创建一些函数，给定一个解，返回创建的子旅行（如果存在）。为此，我们将首先使用*find_arcs*函数创建一个活动弧的列表。这个列表将用于创建一个不完整的有向图，使用*Networkx*的*DiGraph*类。*find_subtours*函数应该返回一个*list*的*sets*，表示连接组件。
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Our goal is to eliminate groups of connected components that do not include
    the depot node. So in the next step, we will create functions that iterate over
    the list of sets, and include new constraints if the set of components does not
    include the depot node. This will use the method *add* of the *ConstraintList*
    class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是消除不包含仓库节点的连接组件组。因此，在下一步中，我们将创建函数，遍历集合列表，并包括新的约束条件，如果组件集合不包括仓库节点的话。这将使用*ConstraintList*类的*add*方法。
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: And now we have everything ready to propose a solution procedure that iteratively
    solves the MIP, verifies if the current solution has subtours, and, if so, includes
    new constraints to eliminate them. Otherwise, the solution found is optimal.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已准备好提出一个解决程序，它迭代地求解MIP，验证当前解是否有子旅行，如果有，则包括新的约束以消除它们。否则，找到的解就是最优的。
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now let us instantiate the solver and solve our model. The *Highs* solver is
    available in *Pyomo* (check the imports) if the *highspy* package is installed.
    So make sure to run a `pip install highspy` .
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实例化求解器并求解我们的模型。如果安装了*highspy*包，*Highs*求解器可以在*Pyomo*中使用（检查导入）。所以确保运行`pip
    install highspy`。
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: One more function to find the tours created and we are ready to plot results.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要一个函数来找到创建的路径，然后我们就准备好绘制结果了。
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/6fb03fe9219dd011aed7342e92b71ae5.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fb03fe9219dd011aed7342e92b71ae5.png)'
- en: Tours produced in CVRP using MIP. (Image by the author).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MIP产生的CVRP路径。（作者提供的图像）。
- en: Amazing results for the small instance with a total of 10 nodes. However, even
    for this small instance, the solver took almost half a minute to obtain the solution
    and the complexity increases significantly with more demand points. Fortunately,
    there are specialized algorithms publicly available to find good quality solutions
    for much larger instances in a short computational time. Let us take a look at
    them in the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于总共有10个节点的小规模实例，结果令人惊讶。然而，即使对于这个小规模实例，求解器也花费了将近半分钟来获得解，而且随着需求点增加，复杂性显著增加。幸运的是，有专门的算法公开可用，用于在短时间内找到更大实例的优质解。让我们在下一节中查看它们。
- en: Specialized (Meta)Heuristics
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专门的（元）启发式算法
- en: Throughout the years several specialized (meta)heuristics have been proposed
    for variants of the VRP. Most of them strongly rely on local search algorithms
    so that, given a solution, different perturbations are tried in order to sequentially
    improve its cost until no further improvement is possible in the given neighborhood.
    When using Google *Or Tools*, we will too use local search methods associated
    with constructive algorithms.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，已经提出了几种针对 VRP 变体的专门（元）启发式算法。它们大多依赖于局部搜索算法，以便在给定的解中尝试不同的扰动，从而顺序地改进其成本，直到在给定的邻域中无法进一步改进。使用
    Google *Or Tools* 时，我们也将使用与构造算法相关的局部搜索方法。
- en: In this section, instance 150d from Rochat and Taillard (1995) will be used.
    Its data was obtained from the [CVRPLIB](http://vrp.atd-lab.inf.puc-rio.br/index.php/en/plotted-instances?data=tai150d).
    This instance has 150 customers and one depot node, so we surely wouldn't be able
    to solve it using the MIP strategy previously presented.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，将使用 Rochat 和 Taillard (1995) 的实例 150d。其数据来源于 [CVRPLIB](http://vrp.atd-lab.inf.puc-rio.br/index.php/en/plotted-instances?data=tai150d)。该实例有
    150 个客户和一个仓库节点，因此我们肯定无法使用之前展示的 MIP 策略来解决它。
- en: Let us once again start by importing the libraries used.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次从导入所使用的库开始。
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And let us load the problem data from a file that includes the coordinates and
    demand of each node.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个包含每个节点坐标和需求的数据文件中加载问题数据。
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first step to using *OR Tools* VRP solver is to instantiate a routing manager
    and a model.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *OR Tools* VRP 求解器的第一步是实例化一个路由管理器和一个模型。
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next, we will include callbacks to quantify dimensions related to arcs/edges
    and nodes. The method *RegisterTransitCallback* of our *routing* instance can
    be used to quantify any dimension related to arcs/edges whereas the method *RegisterUnaryTransitCallback*
    can quantify values related to nodes. It might be important to re-scale your parameters
    depending on their original magnitude because *ortools* considers only integer
    values in dimensions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加回调函数以量化与弧/边和节点相关的维度。我们 *routing* 实例的 *RegisterTransitCallback* 方法可以用来量化与弧/边相关的任何维度，而
    *RegisterUnaryTransitCallback* 方法可以量化与节点相关的值。根据参数的原始大小，可能需要重新缩放你的参数，因为 *ortools*
    只考虑维度中的整数值。
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we will include a capacity constraint using the *demand_callback_index*
    previously defined. Notice that duration constraints could have been defined using
    the same syntax just passing instances of *RegisterTransitCallback* as the first
    argument. Furthermore, it is important to remark that the *routing* model handles
    heterogeneous fleets, so we must pass a list of values in the third argument.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用之前定义的 *demand_callback_index* 来加入容量约束。请注意，持续时间约束也可以使用相同的语法定义，只需将 *RegisterTransitCallback*
    的实例作为第一个参数传递。此外，需要强调的是，*routing* 模型处理异质车队，因此我们必须在第三个参数中传递一个值的列表。
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Similarly, the definition of the objective also takes a *callback* as the main
    argument. In this example, let us minimize the distances defined in the *transit_callback_index*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，目标的定义也将 *callback* 作为主要参数。在这个示例中，让我们最小化在 *transit_callback_index* 中定义的距离。
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: At last, we must define solver parameters and solve our model.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须定义求解器参数并解决我们的模型。
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The following piece of code can be used to extract the routes used in our solution.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段可用于提取我们解决方案中使用的路线。
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: And one can access the objective value by running the simple line `solution.ObjectiveValue()`
    . Using the configuration presented, I got an objective of 2679, which is quite
    close to the proven optimal value of 2645 (1.2% gap). The routes obtained are
    represented below.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行简单的代码 `solution.ObjectiveValue()` 来访问目标值。使用所提供的配置，我得到的目标值为 2679，这与证明的最优值
    2645 非常接近（1.2% 的差距）。获得的路线如下图所示。
- en: '![](../Images/8b71961f6789302f5c15f3eb698c493f.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b71961f6789302f5c15f3eb698c493f.png)'
- en: Routes obtained in instance tai150d using ortools. (Image by the author).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ortools 在实例 tai150d 中获得的路线。（图片来源于作者）。
- en: The complete code (plots included) is available in this [git repository](https://github.com/bruscalia/optimization-demo-files/tree/27ccb5d2fc9e85e07436d1120f5c3f4073960448/vrp).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码（包括图表）可以在这个 [git 仓库](https://github.com/bruscalia/optimization-demo-files/tree/27ccb5d2fc9e85e07436d1120f5c3f4073960448/vrp)
    中找到。
- en: Useful Extensions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的扩展
- en: The *OR Tools* library is fantastic as a general solver for routing problems
    for it handles several variants of the VRP, such as time windows, heterogeneous
    fleets, and multiple depots. However, algorithms fit for the canonical CVRP can
    perform even better. It is totally worth taking a look at the [*HGS-CVRP*](https://github.com/vidalt/HGS-CVRP)package
    (Vidal, 2022) that combines a state-of-the-art genetic algorithm with several
    local search moves. The algorithm finds the optimal solution for the instance
    *tai150d* within less than 20 seconds.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*OR Tools* 库作为路由问题的一般求解器非常出色，因为它处理了多种变体的 VRP，例如时间窗、异构车队和多个仓库。然而，适用于经典 CVRP
    的算法表现可能更佳。完全值得查看一下 [*HGS-CVRP*](https://github.com/vidalt/HGS-CVRP) 包（Vidal, 2022），它结合了最先进的遗传算法和几种局部搜索策略。该算法能在不到
    20 秒的时间内找到实例 *tai150d* 的最优解。'
- en: 'Regarding some real-world applications, it is likely that one should rely on
    road distances (or durations) rather than Euclidean distances to connect locations.
    Google provides a nice paid interface to do so, which you can check in [this tutorial](https://developers.google.com/optimization/routing/google_direction).
    However, if you are looking for open-source alternatives it is worth checking
    out the [OpenStreetMap API](https://wiki.openstreetmap.org/wiki/Main_Page). Some
    useful requests are:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 关于一些实际应用，可能需要依赖于道路距离（或持续时间）而非欧几里得距离来连接位置。谷歌提供了一个很好的付费接口，你可以在 [这个教程](https://developers.google.com/optimization/routing/google_direction)
    中查看。然而，如果你在寻找开源替代方案，值得查看 [OpenStreetMap API](https://wiki.openstreetmap.org/wiki/Main_Page)。一些有用的请求包括：
- en: https://router.project-osrm.org/table/v1/driving/<LOCATIONS>
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://router.project-osrm.org/table/v1/driving/<LOCATIONS>
- en: http://router.project-osrm.org/route/v1/car/<LOCATIONS>?overview=false&steps=true
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: http://router.project-osrm.org/route/v1/car/<LOCATIONS>?overview=false&steps=true
- en: In which *<LOCATIONS>* should be a list of longitude and latitude pairs separated
    by commas within the pairs and by semicolons between different pairs. You can
    also specify sources and destinations in the *table* request, which is useful
    in case the complete table is too large to handle in a single request.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *<LOCATIONS>* 中应该是以逗号分隔的经纬度对的列表，在不同对之间用分号分隔。你还可以在 *table* 请求中指定起点和终点，这在完整表格太大而无法在单个请求中处理时很有用。
- en: Besides doing precise routing calculations, visualization can be an important
    tool. The *Python* library [*folium*](https://python-visualization.github.io/folium/)
    can be quite useful to do it. It is definitely worth taking a look at it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了进行精确的路由计算外，数据可视化也是一个重要工具。*Python* 库 [*folium*](https://python-visualization.github.io/folium/)
    可以非常有用。绝对值得查看一下。
- en: Further Reading
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Earlier in this article we implemented an exact MIP model for the CVRP, which
    is not suitable for moderate-size instances. However, algorithms that combine
    *column generation* to *Branch and Cut* have been successful in solving instances
    with up to a few hundred customers. It is worth taking a look at the research
    papers of Fukasawa et al. (2006) and Pecin et al. (2017).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文早些时候，我们实现了一个精确的 MIP 模型用于 CVRP，这对于中等规模的实例并不适用。然而，结合 *列生成* 和 *分支定界* 的算法在解决上百客户的实例时表现成功。值得查看
    Fukasawa 等人（2006）和 Pecin 等人（2017）的研究论文。
- en: Those interested in a previous introduction to column generation might find
    it in my previous [Medium article](https://medium.com/towards-data-science/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于感兴趣的列生成介绍，可以在我之前的 [Medium 文章](https://medium.com/towards-data-science/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b)
    中找到。
- en: Regarding *meta-heuristics*, the papers of Vidal et al. (2012) and Vidal (2022)
    are fantastic. Both are also available in the form of technical reports, with
    links available in the [*HGS-CVRP*](https://github.com/vidalt/HGS-CVRP) repository.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 *元启发式算法*，Vidal 等人（2012）和 Vidal（2022）的论文非常出色。两者也以技术报告的形式提供，链接可以在 [*HGS-CVRP*](https://github.com/vidalt/HGS-CVRP)
    仓库中找到。
- en: Conclusions
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this article, two approaches for solving the Capacitated Vehicle Routing
    Problem (CVRP) were presented: Mixed-Integer Programming and (Meta)Heuristics.
    The first alternative was used to solve a small instance in which it has been
    successful, although it is not able to handle moderate-size or large instances.
    The second approach was used to solve a challenging problem from the literature
    with 150 customers to which the solver found a good quality solution with a 1.2%
    gap to the known optimal within 300s.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，介绍了两种解决容量受限车辆路径问题（CVRP）的方法：混合整数规划和（元）启发式方法。第一种方法用于解决一个小规模实例，并且成功解决了该问题，但无法处理中等规模或大型实例。第二种方法则用于解决文献中的一个具有挑战性的问题，该问题有150个客户，解算器在300秒内找到了一个与已知最优解相差1.2%的高质量解。
- en: References
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Bynum, M. L. et al., 2021\. *Pyomo-optimization modeling in python.* Springer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Bynum, M. L. 等, 2021\. *Pyomo-optimization modeling in python.* Springer.
- en: Dantzig, G. B., & Ramser, J. H., 1959\. The truck dispatching problem. *Management
    science*, *6*(1), 80–91.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Dantzig, G. B., & Ramser, J. H., 1959\. The truck dispatching problem. *管理科学*,
    *6*(1), 80–91.
- en: Fukasawa, R., Longo, H., Lysgaard, J., Aragão, M. P. D., Reis, M., Uchoa, E.,
    & Werneck, R. F., 2006\. Robust branch-and-cut-and-price for the capacitated vehicle
    routing problem. *Mathematical programming*, *106*, 491–511.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Fukasawa, R., Longo, H., Lysgaard, J., Aragão, M. P. D., Reis, M., Uchoa, E.,
    & Werneck, R. F., 2006\. 针对容量受限车辆路径问题的鲁棒分支定界与定价方法. *数学规划*, *106*, 491–511.
- en: Pecin, D., Pessoa, A., Poggi, M., & Uchoa, E., 2017\. Improved branch-cut-and-price
    for capacitated vehicle routing. *Mathematical Programming Computation*, *9*,
    61–100.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Pecin, D., Pessoa, A., Poggi, M., & Uchoa, E., 2017\. 改进的分支定界与定价方法用于容量受限车辆路径问题.
    *数学规划计算*, *9*, 61–100.
- en: Rochat, Y., & Taillard, É. D., 1995\. Probabilistic diversification and intensification
    in local search for vehicle routing. *Journal of heuristics*, *1*, 147–167.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Rochat, Y., & Taillard, É. D., 1995\. 在车辆路径问题的局部搜索中进行概率性多样化和强化. *启发式期刊*, *1*,
    147–167.
- en: Toth, P., & Vigo, D., 2002\. An overview of vehicle routing problems. *The vehicle
    routing problem*, 1–26.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Toth, P., & Vigo, D., 2002\. 车辆路径问题概述. *车辆路径问题*, 1–26.
- en: 'Vidal, T., 2022\. Hybrid genetic search for the CVRP: Open-source implementation
    and SWAP* neighborhood. *Computers & Operations Research*, *140*, 105643.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Vidal, T., 2022\. 针对CVRP的混合遗传搜索：开源实现和SWAP*邻域. *计算机与运筹研究*, *140*, 105643.
- en: Vidal, T., Crainic, T. G., Gendreau, M., Lahrichi, N., & Rei, W., 2012\. A hybrid
    genetic algorithm for multidepot and periodic vehicle routing problems. *Operations
    Research*, *60*(3), 611–624.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Vidal, T., Crainic, T. G., Gendreau, M., Lahrichi, N., & Rei, W., 2012\. 一种用于多车库和周期性车辆路径问题的混合遗传算法.
    *运筹学*, *60*(3), 611–624.
