- en: 'Delta Lake: Keeping It Fast and Clean'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/delta-lake-keeping-it-fast-and-clean-3c9d4f9e2f5e?source=collection_archive---------2-----------------------#2023-02-15](https://towardsdatascience.com/delta-lake-keeping-it-fast-and-clean-3c9d4f9e2f5e?source=collection_archive---------2-----------------------#2023-02-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ever wondered how to improve your Delta tables’ performance? Hands-on on how
    to keep Delta tables fast and clean.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@vitorf24?source=post_page-----3c9d4f9e2f5e--------------------------------)[![Vitor
    Teixeira](../Images/db450ae1e572a49357c02e9ba3eb4f9d.png)](https://medium.com/@vitorf24?source=post_page-----3c9d4f9e2f5e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3c9d4f9e2f5e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3c9d4f9e2f5e--------------------------------)
    [Vitor Teixeira](https://medium.com/@vitorf24?source=post_page-----3c9d4f9e2f5e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6b05068b69d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdelta-lake-keeping-it-fast-and-clean-3c9d4f9e2f5e&user=Vitor+Teixeira&userId=6b05068b69d8&source=post_page-6b05068b69d8----3c9d4f9e2f5e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3c9d4f9e2f5e--------------------------------)
    ·11 min read·Feb 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3c9d4f9e2f5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdelta-lake-keeping-it-fast-and-clean-3c9d4f9e2f5e&user=Vitor+Teixeira&userId=6b05068b69d8&source=-----3c9d4f9e2f5e---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3c9d4f9e2f5e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdelta-lake-keeping-it-fast-and-clean-3c9d4f9e2f5e&source=-----3c9d4f9e2f5e---------------------bookmark_footer-----------)![](../Images/8e8a76c0c9c9379df0e8dcc11ab6c839.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Simplified flow chart on how to keep Delta tables fast and clean (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Keeping Delta tables fast and clean is important for maintaining the efficiency
    of data pipelines. Delta tables can grow very large over time, leading to slow
    query performance and increased storage costs. However, there are several operations
    and trade-offs that can positively influence the speed of the tables.
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, we’ll use the [people10m public dataset](https://learn.microsoft.com/en-us/azure/databricks/dbfs/databricks-datasets#create-a-table-based-on-a-databricks-dataset)
    that is available on Databricks Community Edition, to showcase the best practices
    on how to keep the tables fast and clean using Delta operations while explaining
    what is happening behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the delta log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by inspecting what is inside the dataset. It is available by default
    on Databricks and you can access it [here](https://learn.microsoft.com/en-us/azure/databricks/dbfs/databricks-datasets#sql).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8aaae8e3d80dd2015369c6e8b3546ce6.png)'
  prefs: []
  type: TYPE_IMG
- en: Files from the original Delta table
  prefs: []
  type: TYPE_NORMAL
- en: We have 16 parquet entries and a *_delta_log* folder containing all the transaction
    logs with all the changes that stack up to create our delta table.
  prefs: []
  type: TYPE_NORMAL
