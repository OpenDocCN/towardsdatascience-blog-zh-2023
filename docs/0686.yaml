- en: Practical MLOps using Azure ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/practical-mlops-using-azure-ml-c6a3cb201d2b?source=collection_archive---------6-----------------------#2023-02-20](https://towardsdatascience.com/practical-mlops-using-azure-ml-c6a3cb201d2b?source=collection_archive---------6-----------------------#2023-02-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/d17a49bdf391f5a3923daaeab5cddd78.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Luca Bravo](https://unsplash.com/@lucabravo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Automating ML pipelines using Azure ML CLI(v2) & github actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://shiftcoder-95.medium.com/?source=post_page-----c6a3cb201d2b--------------------------------)[![Anupam
    Misra](../Images/0190c11f017cabb390797ed1ae524512.png)](https://shiftcoder-95.medium.com/?source=post_page-----c6a3cb201d2b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c6a3cb201d2b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c6a3cb201d2b--------------------------------)
    [Anupam Misra](https://shiftcoder-95.medium.com/?source=post_page-----c6a3cb201d2b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2ebdcaf49014&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-mlops-using-azure-ml-c6a3cb201d2b&user=Anupam+Misra&userId=2ebdcaf49014&source=post_page-2ebdcaf49014----c6a3cb201d2b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c6a3cb201d2b--------------------------------)
    ·10 min read·Feb 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc6a3cb201d2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-mlops-using-azure-ml-c6a3cb201d2b&user=Anupam+Misra&userId=2ebdcaf49014&source=-----c6a3cb201d2b---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc6a3cb201d2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpractical-mlops-using-azure-ml-c6a3cb201d2b&source=-----c6a3cb201d2b---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Machine learning models affect our interaction with the world as much as software
    products we use on a regular basis. Just like DevOps is required for seamless
    CI/CD, MLOps has become imperative for continuously building up-to-date models
    and utilising their predictions.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we are going to build end-end MLOps using Azure ML CLI(v2)
    and Github Actions. This article hopes to serve as the starting point for your
    next MLOps project!
  prefs: []
  type: TYPE_NORMAL
- en: 'This article will help you simulate this scenario:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data drifts frequently and is available through an API. Hence there is a need
    to retrain the model and re-deploy it to the online-endpoint at a defined frequency.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This is achieved via weekly cron jobs through the following steps :'
  prefs: []
  type: TYPE_NORMAL
- en: Download the data using an API and register it as an Azure dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute management and triggering model training jobs in Azure ML Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the model created in the latest job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the new model to an online endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two options to automate your ML pipelines in Azure ML:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Azure DevOps
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Github actions
  prefs: []
  type: TYPE_NORMAL
- en: You can read about them [here](https://medium.com/objectsharp/azure-pipelines-vs-github-actions-key-differences-45390ab132ee).
    I chose GitHub Actions for its ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: A quick recap about MLOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The need for MLOps and the steps to achieve it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quality control via consistency and change tracking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Initial setup for entire project — IDE, workspace, permissions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Environment versioning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Data versioning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Code versioning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e. Versioning of other components
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Fast experimentation with models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Tracking model hyperparameters
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Tracking model metrics, bias, fairness and explainability on different slices
    of data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Maintaining track of links between changing parts of the ML pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Seamless model deployment and comprehensive model monitoring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Fast model deployment into production environment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Staged rollout, blue-green or other deployment strategy
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Tracking model efficacy to trigger retraining
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Tracking data drift to trigger retraining
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I have structured the entire ML project into three different pipelines to achieve
    the aforementioned MLOps goals:'
  prefs: []
  type: TYPE_NORMAL
- en: Build pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Training pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After discussing about these pipelines, we will look into the code implementation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. Build pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1.1 Initial setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Step 1: Setting up Azure ML Studio:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be doing our data versioning, model training and deployment using MS
    Azure. Please follow the below steps to create your Azure ML workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: Login into your Azure account or get a free Azure subscription from [here](https://azure.microsoft.com/en-in/free/search/?ef_id=Cj0KCQiAorKfBhC0ARIsAHDzsluF2Bwn4cqowJoVMFYFEUDP8Q3p-ZbXASpPhkARnhfUKPErWNlomJ0aAv-KEALw_wcB%3AG%3As&OCID=AIDcmmf1elj9v5_SEM_Cj0KCQiAorKfBhC0ARIsAHDzsluF2Bwn4cqowJoVMFYFEUDP8Q3p-ZbXASpPhkARnhfUKPErWNlomJ0aAv-KEALw_wcB%3AG%3As).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Resource group ([ref](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a ML workspace - Navigate to [ml.azure.com](http://ml.azure.com) and
    click on *Create Workspace* and follow the on screen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When your Azure ML workspace is created, you should be able to see a screen
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6392191e004d7a69a14a455dfa06e963.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure ML workspace via ml.azure.com
  prefs: []
  type: TYPE_NORMAL
- en: You would not be able to see these jobs, don’t worry!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Step 2: Linking GitHub Actions with Azure ML Studio:**'
  prefs: []
  type: TYPE_NORMAL
- en: Initialise a repository in GitHub and go to Settings> Secrets and variables>
    Actions>New repository secret
  prefs: []
  type: TYPE_NORMAL
- en: Open a new browser tab to create a Service principal for accessing your ML workspace.([ref](https://learn.microsoft.com/en-us/azure/machine-learning/how-to-setup-authentication?tabs=sdk#configure-a-service-principal))
  prefs: []
  type: TYPE_NORMAL
- en: Save the generated JSON as AZURE_CREDENTIALS in your repository secrets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37f1b9f485e8ae45987d542cc91275e1.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub actions secrets in the repository
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3: Generating a personal access token(PAT)**'
  prefs: []
  type: TYPE_NORMAL
- en: Using the normal GITHUB_TOKEN, you cannot edit workflow files(files in .github/workflows),
    you would need to add a PAT. You would need to edit workflow files in order to
    version the training runs, model versions etc. automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In GitHub, generate the PAT from Settings>Developer settings>Personal access
    tokens.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/197d96360ceb08cba34ef221581e0f36.png)'
  prefs: []
  type: TYPE_IMG
- en: Personal access token for editing workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the PAT to your repository secrets with below repository permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e2f3d02c89776335ef0750c36dc2165.png)'
  prefs: []
  type: TYPE_IMG
- en: Repository permissions for PAT
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Environment versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two environments needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Training environment — For model training dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment environment — For model serving dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could also keep them as the same environment for smaller projects.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Data versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example, data is downloaded every week and is registered in Azure datastore
    as a dataset. Data versioning is important to track lineage of models. In our
    example, it is done by *jobs/data_download.save_to_data_upload(…)*
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Code versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code versioning is done through GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Versioning of other components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You would also need to version *runs, models* and other components. To automate
    their naming, you would have to edit them in a previous cron job. In our example,
    it is done by *jobs/update_training_yamls.py.*
  prefs: []
  type: TYPE_NORMAL
- en: 1.6 Automated testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To automatically test the python files we can use pytests and also track code
    coverage.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Training pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1 Tracking model hyperparameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our example, we have used [mlflow for pytorch](https://mlflow.org/docs/latest/python_api/mlflow.pytorch.html)
    to log the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f0df5264e9bdee328897fbd9f7bccf8.png)'
  prefs: []
  type: TYPE_IMG
- en: Metrics captured during each training job
  prefs: []
  type: TYPE_NORMAL
- en: 'Runtime model parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd264a1c2d1677d117e8372deea0d1db.png)'
  prefs: []
  type: TYPE_IMG
- en: Parameters versioned during each run
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Tracking model metrics, bias, fairness and explainability on different slices
    of data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since I have used stock data to simulate constantly changing data, I have skipped
    this part. However, in most ML use cases, these are very important metrics to
    judge the model performance.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Maintaining links between changing parts of the ML pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure ML studio automatically links everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example lineage tracking during model training:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d0de23fe0891284a2a28c6e9964ebb11.png)'
  prefs: []
  type: TYPE_IMG
- en: Training job snapshot
  prefs: []
  type: TYPE_NORMAL
- en: Similarly data and models are also automatically versioned and their lineage
    is tracked.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Deployment pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3.1 Fast model deployment into production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initially creating the end-point and deploying the first model takes some time.
    After that, newly registered models can be used to update endpoints in much lesser
    time.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Staged rollout, blue-green or different deployment strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different deployment strategies can be used. In our case we override the previously
    deployed model. However through Azure ML, blue-green deployment can be very easily
    achieved during deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Tracking model efficacy to trigger retraining
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Post model deployment, we need to track model performance against known labels.
    This will help us identify in which data strata our model performs poorly. This
    will help us identify whether we need to collect more data or undertake other
    measures during next model re-training.
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 Tracking data drift to trigger retraining
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two schools of thought to model re-training:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Schedule based
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Drift based
  prefs: []
  type: TYPE_NORMAL
- en: There are advantages and disadvantages to both options. In this example I follow
    schedule based model re-training. Hence I have not implemented any data drift
    monitors. However Azure has tools to monitor data drift.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As engineers, it becomes much clearer when we code something from ground up.
    So here you go!
  prefs: []
  type: TYPE_NORMAL
- en: '**Code repository:** [**coderkol95/MLOps_stock_prediction**](https://github.com/coderkol95/MLOps_stock_prediction)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b16aca6ac49230e3ab74f5503205421c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Brief information about the folders and files:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**.github/workflows/**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The yml files for pipeline control are placed here. These trigger data download/upload,
    model training, registration and deployment via cron jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'data_pipeline.yml: Frequency - Every Monday at 1:01 am'
  prefs: []
  type: TYPE_NORMAL
- en: '- download ticker data and update yml file'
  prefs: []
  type: TYPE_NORMAL
- en: Data download via API to a csv file and update the data-upload.yml file with
    dataset tags, version and path.
  prefs: []
  type: TYPE_NORMAL
- en: '- edit yaml files'
  prefs: []
  type: TYPE_NORMAL
- en: Update version of other components in yml files, like job_name, model version
    etc. which will be used during the run
  prefs: []
  type: TYPE_NORMAL
- en: '- push files to github'
  prefs: []
  type: TYPE_NORMAL
- en: Push the updated yml files and downloaded csv to repository
  prefs: []
  type: TYPE_NORMAL
- en: -upload to azure
  prefs: []
  type: TYPE_NORMAL
- en: Dataset registration in Azure datastore
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'model_pipeline.yml: Frequency - Every Monday at 2:01 am'
  prefs: []
  type: TYPE_NORMAL
- en: '* train-job'
  prefs: []
  type: TYPE_NORMAL
- en: Compute creation and model training on the latest dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset preparation and model training is done via pytorch lightning. All
    the logging is done via MLFlow. For code details, please refer to my [repository](https://github.com/coderkol95/MLOps_stock_prediction).
  prefs: []
  type: TYPE_NORMAL
- en: '* register-job'
  prefs: []
  type: TYPE_NORMAL
- en: Registration of the model from the latest run.
  prefs: []
  type: TYPE_NORMAL
- en: '* delete-compute'
  prefs: []
  type: TYPE_NORMAL
- en: Compute deletion after training has completed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'deployment_pipeline.yml: Frequency - Every Monday at 3:01 am'
  prefs: []
  type: TYPE_NORMAL
- en: '* Endpoint & deployment creation(if its the first time)'
  prefs: []
  type: TYPE_NORMAL
- en: '* Updating online deployment with latest model (shown below)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I have kept the cron jobs’ execution 1 hour apart as it completes within 1 hour,
    you may keep a longer duration if required. You may also set flags to capture
    job completion.
  prefs: []
  type: TYPE_NORMAL
- en: '**cli/**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: setup.sh:Configures the VM on which the code runs, for Azure ML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**jobs/**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure specific YAML files are kept here along with python scripts for individual
    pipeline step execution.
  prefs: []
  type: TYPE_NORMAL
- en: '**data_download.py** get_ticker_data(…)'
  prefs: []
  type: TYPE_NORMAL
- en: Download the data via API call and save it to a csv file. I have downloaded
    the data using Yahoo Finance API.
  prefs: []
  type: TYPE_NORMAL
- en: get_dataset_tags(…)
  prefs: []
  type: TYPE_NORMAL
- en: Versioning the data and adding tags.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/287918fd613e7b674d00d7e943155647.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataset tags generated before uploading it to Azure
  prefs: []
  type: TYPE_NORMAL
- en: save_to_data_upload(…)
  prefs: []
  type: TYPE_NORMAL
- en: Write out the dataset specifications to the Azure yml file for uploading to
    Azure datastore.
  prefs: []
  type: TYPE_NORMAL
- en: For the code, you may refer to my [repository](https://github.com/coderkol95/MLOps_stock_prediction).
  prefs: []
  type: TYPE_NORMAL
- en: '**data_upload.yml**'
  prefs: []
  type: TYPE_NORMAL
- en: This yml file is updated by *jobs/data_download.save_to_data_upload(…)* This
    yml file uploads the dataset in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**deploy.yml**'
  prefs: []
  type: TYPE_NORMAL
- en: This yml file is updated by jobs/*update_training_yamls.py* before each cron
    job.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**deployment.py**'
  prefs: []
  type: TYPE_NORMAL
- en: The script used at the endpoint to generate online predictions. For the code,
    you may refer to my [repository](https://github.com/coderkol95/MLOps_stock_prediction).
  prefs: []
  type: TYPE_NORMAL
- en: init()
  prefs: []
  type: TYPE_NORMAL
- en: Initializes the model and the datamodule used by pytorch lightning.
  prefs: []
  type: TYPE_NORMAL
- en: run()
  prefs: []
  type: TYPE_NORMAL
- en: Used to serve online predictions from the model.
  prefs: []
  type: TYPE_NORMAL
- en: '**train.py**'
  prefs: []
  type: TYPE_NORMAL
- en: Model training scipt using pytorch lightning and mlflow. For the code you may
    refer to my [repository](https://github.com/coderkol95/MLOps_stock_prediction).
  prefs: []
  type: TYPE_NORMAL
- en: '**train.yml** This yml file is updated by *jobs/update_training_yamls.py* before
    each cron job.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**update_training_yamls.py**'
  prefs: []
  type: TYPE_NORMAL
- en: Updates several components’ version which need to be updated before every run,
    like run ID, model version to be registered, model to be deployed. For the code
    you may refer to my [repository](https://github.com/coderkol95/MLOps_stock_prediction).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you now have an idea on how to implement automated end-end MLOps project
    using MS Azure. For detailed code implementation you may refer to my [repository](https://github.com/coderkol95/MLOps_stock_prediction).
  prefs: []
  type: TYPE_NORMAL
