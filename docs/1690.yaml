- en: From Data Engineering to Prompt Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/from-data-engineering-to-prompt-engineering-5debd1c636e0?source=collection_archive---------1-----------------------#2023-05-22](https://towardsdatascience.com/from-data-engineering-to-prompt-engineering-5debd1c636e0?source=collection_archive---------1-----------------------#2023-05-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solving data preparation tasks with ChatGPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@c4ristian?source=post_page-----5debd1c636e0--------------------------------)[![Christian
    Koch](../Images/6daf756236838069bf79f1078b03ae6d.png)](https://medium.com/@c4ristian?source=post_page-----5debd1c636e0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5debd1c636e0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5debd1c636e0--------------------------------)
    [Christian Koch](https://medium.com/@c4ristian?source=post_page-----5debd1c636e0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7633c76cf996&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-data-engineering-to-prompt-engineering-5debd1c636e0&user=Christian+Koch&userId=7633c76cf996&source=post_page-7633c76cf996----5debd1c636e0---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5debd1c636e0--------------------------------)
    ·8 min read·May 22, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5debd1c636e0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-data-engineering-to-prompt-engineering-5debd1c636e0&user=Christian+Koch&userId=7633c76cf996&source=-----5debd1c636e0---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5debd1c636e0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-data-engineering-to-prompt-engineering-5debd1c636e0&source=-----5debd1c636e0---------------------bookmark_footer-----------)![](../Images/9fd676ffe1e9c0711ce34e74831e47e0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Ricardo Gomez Angel](https://unsplash.com/@rgaleriacom?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Data engineering makes up a large part of the data science process. In CRISP-DM
    this process stage is called “data preparation”. It comprises tasks such as data
    ingestion, data transformation and data quality assurance. In our article we solve
    typical data engineering tasks using ChatGPT and Python. By doing so, we explore
    the link between data engineering and the new discipline of prompt engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In May 2022, Stephen Wolfram and Lex Fridman gave an insightful talk titled
    “[Is programming dead?](https://www.youtube.com/watch?v=uD353DeOM-4)”. They discussed
    whether high-level languages will still be used by developers in future. According
    to Wolfram, many programming tasks can be automated with large language models
    (LLMs). At the time of this writing, the most prominent example of such a model
    is [ChatGPT](https://openai.com/blog/chatgpt). Since its introduction in late
    2022, it has generated astonishing results. Specifying an action to be performed
    by an LLM is referred to as “prompt engineering”. If Wolfram is right, at least
    part of software development will shift from writing code to writing prompts.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to data science, data preparation can be a time-consuming and
    tedious task. So why not try to automate it with an LLM? In the following sections
    we tackle different data engineering problems with ChatGPT and Python. Instead
    of writing the Python code ourselves, we used prompt engineering to generate it.
    Our experiment was conducted on 19 May 2023 based on the latest freely available
    ChatGPT version (GPT-3.5) at the time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with a simple problem and create a Pandas data frame from a sample
    dataset. Table 1 contains national indicators as provided for instance by the
    [World Bank](https://data.worldbank.org/indicator).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Table 1: Dataset with national indicators*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a data frame from the sample above, we started a new conversation
    with ChatGPT and posted the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Prompt 1: Creating a data frame*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In response, the model generated the Python code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Response 1: Code for data frame creation*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When running the script, we see that the output matches our specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Even though we used a sample for our experiment, the code generated in the next
    sections can in principle also handle bigger datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting the data frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For data science, the table structure we created with our first prompt is not
    optimal. Instead, a so-called “flat table” would be more convenient. In Table
    1, the indicators “GDP” and “Population” are represented by two columns named
    “Variable” and “Value”. In contrast, a flat table would contain separate columns
    for each indicator, as shown in Table 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Table 2: Flat table with national indicators*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converting the format of Table 1 into the format of Table 2 is called “pivoting”.
    Let us try to solve this task with ChatGPT. To this end, we posted a second prompt
    in our conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Prompt 2: Pivoting the data frame*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The above message is based on an example of the required data format. Alternatively,
    we could have formulated our request in a purely verbal way. As with classical
    programming, there are alternative solutions to achieve a goal in prompt engineering.
    Finding the optimal way will be an exciting task for the near future. As a result
    of our prompt, ChatGPT adjusted the Python code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Response 2: Pivoting code*'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, running the second version of the script reveals that the output is
    not what we had requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the expected columns “GDP” and “Population”, the table contains
    two columns named “Demographics” and “Economy”. To fix this problem, we posted
    the next prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Prompt 3: Fix for the pivoting code*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In response, the model corrected the mistake and generated another version
    of the Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Response 3: Fixed pivoting code*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the script reveals that the pivoting was implemented correctly this
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Enriching the data frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another typical data engineering task is to enrich a dataset with additional
    information. For this purpose, we asked ChatGPT to add [ISO country codes](https://en.wikipedia.org/wiki/ISO_3166-1)
    to our data by posting the prompt below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Prompt 4: Adding country codes*'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, the model adjusted the response and returned the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Response 4: Data frame with country codes*'
  prefs: []
  type: TYPE_NORMAL
- en: Running the script shows that a new column with ISO codes had been added to
    the data frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Deriving a column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us next derive a new column “GDP per capita” by dividing the GDP of a country
    by its population size. To do so, we have sent this prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Prompt 5: Deriving a new column*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In response, the model revised the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Response 5: Data frame with new column*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output reveals that the script produces the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Analyzing the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the data transformations are completed, the actual analysis can begin.
    Let us finally calculate the correlation coefficient between the GDP and the population
    of the countries. To this end, we posted a last prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*Prompt 6: Analyzing correlation*'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, the model returned the code fragment below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*Response 6: Code to analyze correlation*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When running the script, we find a positive correlation between the two variables,
    which is not a surprise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Admittedly, our experiment was based on a simple dataset. Nevertheless, the
    results are remarkable. We performed several data engineering tasks without writing
    a single line of code. ChatGPT was not only able to correctly implement our prompts
    in most cases. But even when the model made a mistake, it was capable of reflecting
    and fixing it. As always in software development, generated code must be tested.
    Moreover, it may need refactoring and optimization. Using pylint is still a good
    idea in the age of AI. Summarizing, however, we have to agree with Wolfram: In
    future, a significant part of data engineering will shift from coding to prompt
    engineering. This new approach will not replace data engineers, but will make
    them more efficient.'
  prefs: []
  type: TYPE_NORMAL
- en: All images unless otherwise noted are by the authors.
  prefs: []
  type: TYPE_NORMAL
- en: About the authors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Christian Koch* is an Enterprise Architect at BWI GmbH and Lecturer at the
    Nuremberg Institute of Technology Georg Simon Ohm.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Markus Stadi* is a Senior Cloud Data Engineer at Dehn SE working in the field
    of Data Engineering, Data Science and Data Analytics for many years.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lukas Berle* is a Data Architect at TeamBank AG specialized in the design
    and implementation of robust data analytics architectures.'
  prefs: []
  type: TYPE_NORMAL
