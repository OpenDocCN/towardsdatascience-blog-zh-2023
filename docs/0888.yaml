- en: How to make 40+ interactive plots to analyze your machine learning pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-make-40-interactive-plots-to-analyze-your-machine-learning-pipeline-ee718afd7bc2?source=collection_archive---------14-----------------------#2023-03-08](https://towardsdatascience.com/how-to-make-40-interactive-plots-to-analyze-your-machine-learning-pipeline-ee718afd7bc2?source=collection_archive---------14-----------------------#2023-03-08)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A quick guide on how to make clean-looking, interactive Python plots to validate
    your data and model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://tvdboom.medium.com/?source=post_page-----ee718afd7bc2--------------------------------)[![Marco
    vd Boom](../Images/3fc053efda1c23dd84a6418ded2603ca.png)](https://tvdboom.medium.com/?source=post_page-----ee718afd7bc2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ee718afd7bc2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ee718afd7bc2--------------------------------)
    [Marco vd Boom](https://tvdboom.medium.com/?source=post_page-----ee718afd7bc2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe2091b627921&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-40-interactive-plots-to-analyze-your-machine-learning-pipeline-ee718afd7bc2&user=Marco+vd+Boom&userId=e2091b627921&source=post_page-e2091b627921----ee718afd7bc2---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ee718afd7bc2--------------------------------)
    ·4 min read·Mar 8, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fee718afd7bc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-40-interactive-plots-to-analyze-your-machine-learning-pipeline-ee718afd7bc2&user=Marco+vd+Boom&userId=e2091b627921&source=-----ee718afd7bc2---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fee718afd7bc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-40-interactive-plots-to-analyze-your-machine-learning-pipeline-ee718afd7bc2&source=-----ee718afd7bc2---------------------bookmark_footer-----------)![](../Images/3636287c8b263711e4bdfe3cbcd35a1a.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Markus Winkler](https://unsplash.com/@markuswinkler?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plots have become the de facto tool to help data scientists and stakeholders
    understand the process and results of machine learning projects. In this story,
    we’ll show you how to use the [ATOM](https://github.com/tvdboom/ATOM) library
    to easily make clean-looking, interactive plots, in order to quickly analyze the
    dataset, inspect the pipeline, assess the model’s performance and interpret the
    model’s results. ATOM is an open-source Python package designed to help data scientists
    fasten the exploration of machine learning pipelines. Read [this story](/atom-a-python-package-for-fast-exploration-of-machine-learning-pipelines-653956a16e7b)
    if you want a gentle introduction to the library.
  prefs: []
  type: TYPE_NORMAL
- en: Data plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with plots that can make you understand the dataset you are working
    with a bit better. How to transform pipelines and train models with ATOM lies
    outside the scope of this story. Read [this story](/atom-a-python-package-for-fast-exploration-of-machine-learning-pipelines-653956a16e7b)
    or [this story](/how-to-test-multiple-machine-learning-pipelines-with-just-a-few-lines-of-python-1a16cb4686d)
    to learn more about that. Here, we’ll dive directly into plot making.
  prefs: []
  type: TYPE_NORMAL
- en: After initializing *atom*, creating the plots is as easy as calling the appropriate
    method. Excluding some exceptions, plots are made using the [plotly](https://plotly.com/python/)
    library and rendered in html. Click [here](https://tvdboom.github.io/ATOM/latest/user_guide/plots/#data-plots)
    for a list of all available data plot methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Feature selection plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The feature selection plots can help you analyze the features selected by the
    [PCA](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html)
    or [RFECV](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFECV.html)
    strategies. Click [here](https://tvdboom.github.io/ATOM/latest/user_guide/plots/#feature-selection-plots)
    for a list of all feature selection plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Hyperparameter tuning plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ATOM uses the [optuna](https://optuna.readthedocs.io/en/stable/index.html) library
    to apply [hyperparameter tuning](https://tvdboom.github.io/ATOM/latest/user_guide/training/#hyperparameter-tuning).
    The plots available through optuna are also available directly through ATOM’s
    API, with a few additional plots. Click [here](https://tvdboom.github.io/ATOM/latest/user_guide/plots/#hyperparameter-tuning-plots)
    for a list of all hyperparameter tuning plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Prediction plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After training the model, use its predictions on the train and test sets to
    assess the model’s performance or inspect the feature importance. One of ATOM’s
    most powerful features, is the possibility of plotting results for multiple models
    or data sets (e.g. train vs test) in the same figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Interpretability plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [SHAP](https://github.com/slundberg/shap) (SHapley Additive exPlanations)
    python package uses a game theoretic approach to explain the output of any machine
    learning model. It connects optimal credit allocation with local explanations
    using the classic [Shapley values](https://en.wikipedia.org/wiki/Shapley_value)
    from game theory and their related extensions. ATOM implements methods to plot
    7 of SHAP’s plotting functions directly from its API. Since the plots are not
    made by ATOM, they are not interactive nor can they display multiple models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/83430807e142733d81fb73a3b5b626f7.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0f96b5dd56450c2ca8c285b69318404a.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0c542706a8792dc2f67e5e486b1e0936.png)'
  prefs: []
  type: TYPE_IMG
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from the plot-specific parameters, all plots have five parameters in
    common:'
  prefs: []
  type: TYPE_NORMAL
- en: The `title` parameter adds a title to the plot. The default value doesn't show
    any title. Provide a configuration (as dictionary) to customize its appearance,
    e.g. `title=dict(text="Awesome plot", color="red")`. Read more in plotly's [documentation](https://plotly.com/python/figure-labels/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `legend` parameter is used to show/hide, position or customize the plot''s
    legend. Provide a configuration (as dictionary) to customize its appearance (e.g.
    `legend=dict(title="Title for legend", title_font_color="red")`) or choose one
    of the following locations: upper left, upper right, lower left, lower right,
    upper center, lower center, center left, center right, center, out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `figsize` parameter adjust the plot's size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `filename` parameter is used to save the plot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `display` parameter determines whether to show or return the plot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have shown how to use the ATOM package to make interactive plots in order
    to quickly analyze the results of a machine learning pipeline. For a list of all
    the available plots click [here](https://tvdboom.github.io/ATOM/latest/user_guide/plots/#available-plots).
  prefs: []
  type: TYPE_NORMAL
- en: For further information about ATOM, have a look at the package’s [documentation](https://tvdboom.github.io/ATOM/).
    For bugs or feature requests, don’t hesitate to open an issue on [GitHub](https://github.com/tvdboom/ATOM)
    or send me an email.
  prefs: []
  type: TYPE_NORMAL
- en: 'Related stories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/atom-a-python-package-for-fast-exploration-of-machine-learning-pipelines-653956a16e7b](/atom-a-python-package-for-fast-exploration-of-machine-learning-pipelines-653956a16e7b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/how-to-test-multiple-machine-learning-pipelines-with-just-a-few-lines-of-python-1a16cb4686d](/how-to-test-multiple-machine-learning-pipelines-with-just-a-few-lines-of-python-1a16cb4686d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/from-raw-data-to-web-app-deployment-with-atom-and-streamlit-d8df381aa19f](/from-raw-data-to-web-app-deployment-with-atom-and-streamlit-d8df381aa19f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/exploration-of-deep-learning-pipelines-made-easy-e1cf649892bc](/exploration-of-deep-learning-pipelines-made-easy-e1cf649892bc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/deep-feature-synthesis-vs-genetic-feature-generation-6ba4d05a6ca5](/deep-feature-synthesis-vs-genetic-feature-generation-6ba4d05a6ca5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/from-raw-text-to-model-prediction-in-under-30-lines-of-python-32133d853407](/from-raw-text-to-model-prediction-in-under-30-lines-of-python-32133d853407)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: All plots in this story are created by the author.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
