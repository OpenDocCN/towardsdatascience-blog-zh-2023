["```py\nAWS_ACCESS_KEY_ID=<YOUR_ACCESS_KEY_ID>\nAWS_SECRET_ACCESS_KEY=<YOUR_SECRET_ACCESS_KEY>\n```", "```py\nversion: '3'\nservices:\n  terraform:\n    image: hashicorp/terraform:latest\n    volumes:\n      - ./terraform:/terraform\n    working_dir: /terraform\n    command: [\"init\"]\n    environment:\n      - TF_VAR_AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\n      - TF_VAR_AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\n      - TF_VAR_AWS_DEFAULT_REGION=us-east-1\n```", "```py\nterraform {\n  required_version = \">= 0.12\"\n\n  required_providers {\n    aws = \">= 3.51.0\"\n  }\n}\n\nvariable \"AWS_ACCESS_KEY_ID\" {\n  type = string\n}\n\nvariable \"AWS_SECRET_ACCESS_KEY\" {\n  type = string\n}\n\nvariable \"AWS_DEFAULT_REGION\" {\n  type = string\n}\n\nprovider \"aws\" {\n  access_key = var.AWS_ACCESS_KEY_ID\n  secret_key = var.AWS_SECRET_ACCESS_KEY\n  region     = var.AWS_DEFAULT_REGION\n}\n```", "```py\ndocker compose run terraform init \n```", "```py\nresource \"aws_s3_bucket\" \"enem-bucket-terraform-jobs\" {\n  bucket = \"enem-bucket-terraform-jobs\"\n}\n```", "```py\nresource <resource_type> <resource_name> {\n  argument_1 = \"blah blah blah blah\" \n  argument_2 = \"blah blah blah\"\n  argument_3 {\n    ...\n  }\n}\n```", "```py\ndocker compose run terraform plan\n```", "```py\ndocker compose run terraform apply\n```", "```py\ndocker compose run terraform destroy\n```", "```py\n# CREATE THE LAMBDA FUNCTION\n# ==========================\n\n# CREATE A NEW ROLE FOR THE LAMBDA FUNCTION TO ASSUME\nresource \"aws_iam_role\" \"lambda_execution_role\" {\n  name = \"lambda_execution_role_terraform\"\n  assume_role_policy = jsonencode({\n    # This is the policy document that allows the role to be assumed by Lambda\n    # other services cannot assume this role\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        }\n      }\n    ]\n  })\n}\n```", "```py\n# ATTACH THE BASIC LAMBDA EXECUTION POLICY TO THE ROLE lambda_execution_role\nresource \"aws_iam_role_policy_attachment\" \"lambda_basic_execution\" {\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n  role       = aws_iam_role.lambda_execution_role.name\n}\n```", "```py\n# CREATE A NEW POLICY FOR THE LAMBDA FUNCTION TO ACCESS S3\nresource \"aws_iam_policy\" \"s3_access_policy\" {\n  name = \"s3_access_policy\"\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"s3:GetObject\",\n          \"s3:PutObject\",\n          \"s3:DeleteObject\"\n        ]\n        Resource = aws_s3_bucket.enem-data-bucket.arn\n      }\n    ]\n  })\n\n# ATTACH THE EXECUTION POLICY AND THE S3 ACCESS POLICY TO THE ROLE lambda_execution_role\nresource \"aws_iam_policy_attachment\" \"s3_access_attachment\" {\n  name       = \"s3_and_lambda_execution_access_attachment\"\n  policy_arn = aws_iam_policy.s3_access_policy.arn\n  roles      = [aws_iam_role.lambda_execution_role.name]\n}\n```", "```py\n# CREATE A NEW LAMBDA FUNCTION\nresource \"aws_lambda_function\" \"lambda_function\" {\n  function_name = \"my-lambda-function-aws-terraform-jp\"\n  role          = aws_iam_role.lambda_execution_role.arn\n  handler       = \"lambda_function.lambda_handler\"\n  runtime       = \"python3.8\"\n  filename      = \"lambda_function.zip\"\n}\n```", "```py\n# lambda_function.py\ndef lambda_handler(event, context):\n    return \"Hello from Lambda!\"\n```", "```py\n# ADD A TRIGGER TO THE LAMBDA FUNCTION BASED ON S3 BUCKET CREATION EVENTS\n# https://stackoverflow.com/questions/68245765/add-trigger-to-aws-lambda-functions-via-terraform\n\nresource \"aws_lambda_permission\" \"allow_bucket_execution\" {\n  statement_id  = \"AllowExecutionFromS3Bucket\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.lambda_function.arn\n  principal     = \"s3.amazonaws.com\"\n  source_arn    = aws_s3_bucket.enem-data-bucket.arn\n}\n\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\n  bucket = aws_s3_bucket.enem-data-bucket.id\n\n  lambda_function {\n    lambda_function_arn = aws_lambda_function.lambda_function.arn\n    events              = [\"s3:ObjectCreated:*\"]\n    filter_suffix = \".pdf\"\n  }\n\n  depends_on = [aws_lambda_permission.allow_bucket_execution]\n}\n```", "```py\ndocker compose run terraform apply\n```", "```py\n# INSIDE GLUE.TF\n# Create a new bucket to store the job script\nresource \"aws_s3_bucket\" \"enem-bucket-terraform-jobs\" {\n  bucket = \"enem-bucket-terraform-jobs\"\n}\n```", "```py\nmodule \"glue\" {\n  source = \"./glue\"\n}\n```", "```py\ndocker compose run terraform init\n```", "```py\n# UPLOAD THE SPARK JOB FILE myjob.py to s3\nresource \"aws_s3_object\" \"myjob\" {\n  bucket = aws_s3_bucket.enem-bucket-terraform-jobs.id\n  key    = \"myjob.py\"\n  source = \"myjob.py\"\n}\n```", "```py\n# CREATE A NEW ROLE FOR THE GLUE JOB TO ASSUME\nresource \"aws_iam_role\" \"glue_execution_role\" {\n  name = \"glue_execution_role_terraform\"\n  assume_role_policy = jsonencode({\n    # This is the policy document that allows the role to be assumed by Glue\n    # other services cannot assume this role\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"glue.amazonaws.com\"\n        }\n      }\n    ]\n  })\n}\n\n# ATTACH THE BASIC GLUE EXECUTION POLICY TO THE ROLE glue_execution_role\nresource \"aws_iam_role_policy_attachment\" \"glue_basic_execution\" {\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole\"\n  role       = aws_iam_role.glue_execution_role.name\n}\n```", "```py\n# THIS WILL RESULT IN A ERROR!!!!\n# ATTACH THE THE S3 ACCESS POLICY s3_access_policy TO THE ROLE glue_execution_role\nresource \"aws_iam_policy_attachment\" \"s3_access_attachment_glue\" {\n  name       = \"s3_and_glue_execution_access_attachment\"\n  policy_arn = aws_iam_policy.s3_access_policy.arn\n  roles      = [aws_iam_role.glue_execution_role.name]\n}\n```", "```py\nvariable \"enem-data-bucket-access-policy-arn\" {\n    type = string\n}\n```", "```py\nmodule \"glue\" {\n  source = \"./glue\"\n  enem-data-bucket-access-policy-arn = aws_iam_policy.s3_access_policy.arn\n}\n```", "```py\n# ATTACH THE THE S3 ACCESS POLICY s3_access_policy TO THE ROLE glue_execution_role\nresource \"aws_iam_policy_attachment\" \"s3_access_attachment_glue\" {\n  name       = \"s3_and_glue_execution_access_attachment\"\n  policy_arn = var.enem-data-bucket-access-policy-arn\n  roles      = [aws_iam_role.glue_execution_role.name]\n}\n```", "```py\n# CREATE THE GLUE JOB\nresource \"aws_glue_job\" \"myjob\" {\n  name     = \"myjob\"\n  role_arn = aws_iam_role.glue_execution_role.arn\n  glue_version = \"4.0\"\n  command {\n    script_location = \"s3://${aws_s3_bucket.enem-bucket-terraform-jobs.id}/myjob.py\"\n  }\n  default_arguments = {\n    \"--job-language\" = \"python\"\n    \"--job-bookmark-option\" = \"job-bookmark-disable\"\n    \"--enable-metrics\" = \"\"\n  }\n  depends_on = [aws_s3_object.myjob]\n}\n```", "```py\ndocker compose run terraform apply\n```", "```py\ndocker compose run terraform destroy\n```"]