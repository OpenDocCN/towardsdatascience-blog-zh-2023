- en: A Primer on Linear Algebra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-primer-on-linear-algebra-414111d195ca?source=collection_archive---------14-----------------------#2023-01-12](https://towardsdatascience.com/a-primer-on-linear-algebra-414111d195ca?source=collection_archive---------14-----------------------#2023-01-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A gentle refresher on essential concepts and operations for data science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@dataforyou?source=post_page-----414111d195ca--------------------------------)[![Rob
    Taylor, PhD](../Images/5e4e86da7b77404ed42d00a60ea5eacf.png)](https://medium.com/@dataforyou?source=post_page-----414111d195ca--------------------------------)[](https://towardsdatascience.com/?source=post_page-----414111d195ca--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----414111d195ca--------------------------------)
    [Rob Taylor, PhD](https://medium.com/@dataforyou?source=post_page-----414111d195ca--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F98de080592fc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-primer-on-linear-algebra-414111d195ca&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=post_page-98de080592fc----414111d195ca---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----414111d195ca--------------------------------)
    ·9 min read·Jan 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F414111d195ca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-primer-on-linear-algebra-414111d195ca&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=-----414111d195ca---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F414111d195ca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-primer-on-linear-algebra-414111d195ca&source=-----414111d195ca---------------------bookmark_footer-----------)![](../Images/b5f3e71d4c34baa68e826b8223106e46.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Vashishtha Jogi](https://unsplash.com/@jogi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regardless of whether you’re fitting a simple regression model or a convolutional
    neural net, linear algebra plays a significant role in making those computations
    efficient. While most are likely familiar with its use in geometry — where it’s
    used to define objects such as lines, and planes, along with their transformations
    (like rotations and translations) — linear algebra is foundational across the
    sciences and engineering. Given its importance to scientific computing, it's a
    topic that every data scientist ought to have some familiarity with.
  prefs: []
  type: TYPE_NORMAL
- en: So, if your linear algebra is a little rusty, or you’re just wanting to dip
    your toe in, this primer introduces some of the basic concepts and hopefully steers
    you gently toward the world of linear algebra.
  prefs: []
  type: TYPE_NORMAL
- en: Vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A *vector* contains an ordered set of values that tells us how to shift from
    one point in an *n*-dimensional space to another. For example, in two dimensions
    a vector represents a directed line segment between two displaced (*x, y*) points
    in the plane — it tells you where one point is relative to another. However, vector
    spaces can have more than two dimensions; the number of components contained within
    the vector, therefore, corresponds to the *dimensionality* of its space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a2765f2278af8d822b92cdc36d02e17.png)'
  prefs: []
  type: TYPE_IMG
- en: An n-dimensional column vector (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: where ℝ denotes the set of all real-valued vectors with dimensionality *n*.
    Here, **v** is a *column vector* though it could be represented as a *row vector:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7923299df295ee45beca69a8fb2c483.png)'
  prefs: []
  type: TYPE_IMG
- en: A row vector is created by transposing a column vector (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: where *T* is the *transpose* operator. Typically, vectors a displayed in column
    form using lowercase boldface letters, but it can convenient to display vectors
    in row form.
  prefs: []
  type: TYPE_NORMAL
- en: Vector Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s often useful to apply operations and functions to vectors, and one such
    operation is *vector addition*. There’s nothing mysterious about this operation
    and it works just like it sounds. Suppose we have two *2*-dimensional vectors
    **u** and **v**, that we want to add together. The sum of these vectors is simply
    the sum of their components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffcacff55244bf94f8044154e32bfdc2.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector addition (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also perform multiplication with vectors, the simplest of which is called
    *scalar multiplication*. This involves multiplying each vector component by a
    single real-valued constant *c*, called the *scalar multiple*, or simply *scalar*.
    For example, the vector *c***v** is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7dd3d576e700968ca7c27e79a0911281.png)'
  prefs: []
  type: TYPE_IMG
- en: Scalar multiplication of a vector (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in a *scaled* version of the vector which has the effect of stretching
    or constricting, with the scaled version being |*c*| times as long as the original.
    Also, if *c < 0* then the direction of the vector *reverses*. This is quite useful
    if we wanted to subtract vectors instead of add because the negative of a vector
    **v** is simply (-1)**v = -v,** so *c* = -1 in this case. The difference between
    vectors **u** and **v** can then be expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c9c04cd545947697f51241a21718b6a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector subtraction (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'Scalars are also used to create *linear combinations* of vectors; however,
    in this case, the scalars prefer to be called *coefficients*. For example, we
    could create a vector **w** as a linear combination of the vectors **u** and **v**
    and coefficients *a* and *b* like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7e7977b3b3db466fc57234fa1201097.png)'
  prefs: []
  type: TYPE_IMG
- en: A linear combination of vectors (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: This is just the sum of two scaled vectors.
  prefs: []
  type: TYPE_NORMAL
- en: The Dot Product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *dot product* (or *scalar product*) takes two vectors of identical dimensionality
    and produces a scalar that is the sum of the products of each corresponding component.
    That’s quite a lengthy description, so to illustrate, the dot product for the
    two *n*-dimensional vectors **u** and **v** is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/369536c54fc5479b87d44046cefb411b.png)'
  prefs: []
  type: TYPE_IMG
- en: The dot product (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: This shows that, because each vector is the same size, the multiplication proceeds
    component-wise — the *i*th component in vector **u** is multiplied by the *i*th
    component in vector **v —** before all the products are summed. Note that it doesn’t
    matter which vector is multiplied by which because the dot product is commutative,
    meaning **u** x **v = v** x **u.**
  prefs: []
  type: TYPE_NORMAL
- en: 'The dot product is also used to measure the length of a vector, called the
    *norm*. The norm is a non-negative scalar that is equal to the square root of
    the sum of its squared components and measures the distance between the origin
    *O* = [0, 0] and the vector point in *n*-dimensional space. For example, the norm
    of vector **v** with dimensionality *n* is computed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd76249b195c4c1acb3253ad7c7905cf.png)'
  prefs: []
  type: TYPE_IMG
- en: The norm is the length of the vector (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'In two dimensions, this measures the hypotenuse of a right-angled triangle
    and is identical to Pythagoras’ theorem. We can also measure the distance between
    two vectors, which is just a generalization of the above. If we instead wanted
    to measure the distance between vectors **u** and **v** then this is just the
    norm of the differences between the vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8eac5d6c7423eaf878797eacec7df069.png)'
  prefs: []
  type: TYPE_IMG
- en: The distance between two vectors (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the dot product is used to measure the angle between two non-zero
    vectors. Specifically, the cosine of the angle between vectors **u** and **v**
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33c30d91e0a9a2930a5edd36769fd8e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Cosine of the angle between two vectors (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, the angle is equal to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8220d5f8b7000337d117e72c784c4d07.png)'
  prefs: []
  type: TYPE_IMG
- en: Solving for the angle (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before finishing up with vectors, an important condition to recognize is *orthogonality*.
    Vectors are said to be orthogonal if the angle between them is 90 degrees (or
    *perpendicular*). In this case, the vectors form a right angle and thus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f2f3f95e1e6877c494b4c2f5b9a0f82.png)'
  prefs: []
  type: TYPE_IMG
- en: Two vectors are orthogonal if this condition holds (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'from which it follows that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5d61c5977f7a9cf6955287e3d421b6d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Another implication of orthogonality (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: Matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *matrix* is a table of values arranged into columns and rows. Each value in
    the matrix is referred to as an *element* or *entry* and the *size* of the matrix
    provides a description of how many rows and columns it has. For example, an *m*
    x *n* (read as “*m* by *n”*) matrix has *m* rows and *n* columns. If a matrix
    has only one row then it is identical to the row vector introduced above, though
    it may also be referred to as a *row matrix*. Similarly, a matrix with only one
    column is a column vector or *column matrix*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, a matrix *A* of size *n* x *m* has the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/207da9d5d8ff2a1f87cc769b4c50f30e.png)'
  prefs: []
  type: TYPE_IMG
- en: An m x n matrix (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'When referring to specific matrix elements it’s common to use *double subscript*
    notation, where *i* indexes the row of the entry and *j* the column. For matrix
    *A* above, an entry can be referenced as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e101f46e03bc5c270f3c98a02f7683d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining the elements in matrix A (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'For any matrix, we can define the *diagonal elements* as those having identical
    subscripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b203c63932f548efd9e007fa16e855b1.png)'
  prefs: []
  type: TYPE_IMG
- en: The diagonal elements of a matrix share identical subscripts (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'If the condition holds that *m* = *n* then the matrix is called a *square*
    *matrix* and the number of elements along the main diagonal equals the number
    of rows or columns. Additionally, for any *n* x *n* square matrix, the *trace*
    is defined as the sum of the elements along the main diagonal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64083a1d9712dbd7af022e5987c0b879.png)'
  prefs: []
  type: TYPE_IMG
- en: The trace of a square matrix (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if a matrix only has non-zero diagonal elements — meaning that all other
    elements *are* zero — then the matrix is called a *diagonal matrix*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/32548e06337a2a68c60e8d2791c576f4.png)'
  prefs: []
  type: TYPE_IMG
- en: A diagonal matrix has only non-zero elements along the main diagonal (image
    by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if the values of a diagonal matrix are all the *same —* so, the value
    along the diagonal is a scalar — then the matrix is called a *scalar matrix*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/254accd95745e2b273667a8e5431150c.png)'
  prefs: []
  type: TYPE_IMG
- en: A scalar matrix has only non-zero scalars along the main diagonal (image by
    author).
  prefs: []
  type: TYPE_NORMAL
- en: 'but if the scalar happens to be *c* = 1 then the matrix is referred to as the
    *identity matrix*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34a1343b9fae282f7e53e930f0eb5b8f.png)'
  prefs: []
  type: TYPE_IMG
- en: An identity matrix has only ones along the main diagonal (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that for any scalar *c*, the scalar matrix can be derived as a scalar
    multiple of the identity matrix: *B* = *c* *I*.'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The operations discussed previously for vectors also generalize to matrices.
    For example, if the two matrices *A* and *B* are equal in size they can be summed
    element-wise as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d79e55482f27b137902e67255755d5aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Matrix addition (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, a matrix can be scaled using any real-valued constant *c*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fce7cd2efaa0cee6f30323af76be3eca.png)'
  prefs: []
  type: TYPE_IMG
- en: Scalar multiplication of a matrix (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also discussed how a column vector can be turned into a row vector using
    the transpose operator. This operator also generalizes to matrices and similarly
    works by interchanging rows and columns. Specifically, the transposition of matrix
    *A* results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d685d20afe22b9f5c1c887dd1ab70fdd.png)'
  prefs: []
  type: TYPE_IMG
- en: The transpose of a matrix (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: What this indicates is that the *i*th column of the transposed matrix is the
    *i*th row of the original matrix *A*. Or, put another way, the element in row
    *i* and column *j* of the transpose is the same value in row *j* and column *i*
    of *A*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The transpose is also used to assess whether a square matrix is *symmetric*.
    This is true if the following condition is satisfied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/692c988f3b92316be956dd79e9bb4f80.png)'
  prefs: []
  type: TYPE_IMG
- en: Condition for a symmetric square matrix (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: which states that *A* is equal to its transpose.
  prefs: []
  type: TYPE_NORMAL
- en: Matrix Multiplication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike the vector and matrix operations discussed above, matrix multiplication
    does not operate in an elementwise fashion. For example, if *A* is an *m* x *n*
    matrix and *B* is an *n* x *p* matrix, then the product *C* = *AB* is an *m* x
    *p* matrix, where the entry at row *i* and column *j* is computed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbee4e01e159d11c27d7c49bc857b2d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Element-wise computation for the ith row and jth column (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: This looks quite similar to the dot product discussed previously, and that’s
    because it *is* a dot product! Specifically, the element located at row *i* and
    column *j* in *C* is the dot product of the *i*th row in *A* and the *j*th column
    in *B*. Note that the matrices don’t need to be equal in size; however, matrix
    multiplication does require that the number of columns in *A* match the number
    of rows in *B*.
  prefs: []
  type: TYPE_NORMAL
- en: Final Remarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This post touched on some of the more foundational concepts and operations used
    in linear algebra, so there’s a lot I couldn’t squeeze into a single post. Some
    other notable exceptions are invertible matrices and matrix inversion, solving
    systems of linear equations, and eigenvalues and eigenvectors. I’ll cover these
    in a future post, but in the meantime, I hope you found this brief primer useful.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed this post and would like to stay up to date then please consider
    [following me on Medium.](https://medium.com/@dataforyou) This will ensure you
    don’t miss out on any new content.
  prefs: []
  type: TYPE_NORMAL
- en: To get unlimited access to all content consider signing up for a [Medium subscription](https://medium.com/membership).
  prefs: []
  type: TYPE_NORMAL
- en: You can also follow me on [Twitter](https://twitter.com/dataforyounz), [LinkedIn](https://www.linkedin.com/in/dataforyou/),
    or check out my [GitHub](https://github.com/dataforyounz) if that’s more your
    thing 😉
  prefs: []
  type: TYPE_NORMAL
