- en: 3D Data Processing with Open3D
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/3d-data-processing-with-open3d-c3062aadc72e?source=collection_archive---------1-----------------------#2023-05-08](https://towardsdatascience.com/3d-data-processing-with-open3d-c3062aadc72e?source=collection_archive---------1-----------------------#2023-05-08)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A quick walkthrough on processing 3D models with Python’s Open3D library (with
    an interactive Jupyter Notebook)
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@prerak12.agarwal?source=post_page-----c3062aadc72e--------------------------------)[![Prerak
    Agarwal](../Images/631f00675c83812d32b983fb41b41edf.png)](https://medium.com/@prerak12.agarwal?source=post_page-----c3062aadc72e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c3062aadc72e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c3062aadc72e--------------------------------)
    [Prerak Agarwal](https://medium.com/@prerak12.agarwal?source=post_page-----c3062aadc72e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F885f74d5a8c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3d-data-processing-with-open3d-c3062aadc72e&user=Prerak+Agarwal&userId=885f74d5a8c&source=post_page-885f74d5a8c----c3062aadc72e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c3062aadc72e--------------------------------)
    ·13 min read·May 8, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc3062aadc72e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3d-data-processing-with-open3d-c3062aadc72e&user=Prerak+Agarwal&userId=885f74d5a8c&source=-----c3062aadc72e---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc3062aadc72e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F3d-data-processing-with-open3d-c3062aadc72e&source=-----c3062aadc72e---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I provide a quick walkthrough on how to explore, process and
    visualize 3D models using Python’s [Open3D](http://www.open3d.org/docs/release/index.html)
    library — an open-source library for 3D data processing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d71b3cf9d03ac81a2e4fbbcc7784b555.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: A 3D model visualized using Open3D (original 3D model found [here](https://sketchfab.com/3d-models/tesla-model-s-plaid-9de8855fae324e6cbbb83c9b5288c961)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: You might find this walkthrough helpful if you’re thinking of processing 3D
    data/models for specific tasks, such as training an AI model for 3D model classification
    and/or segmentation. 3D models found on the internet (in datasets like [ShapeNet](https://shapenet.org/))
    are available in a variety of formats, such as *.obj*, *.glb*, *.gltf*, and so
    on. Using libraries like Open3D, such models can be easily processed, visualized
    and converted to other formats, like point clouds, which are easier to understand
    and interpret.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑处理 3D 数据/模型以进行特定任务，如训练 AI 模型进行 3D 模型分类和/或分割，你可能会发现这个讲解很有帮助。互联网上的 3D 模型（如
    [ShapeNet](https://shapenet.org/) 数据集中）有多种格式，如 *.obj*、*.glb*、*.gltf* 等。使用像 Open3D
    这样的库，这些模型可以轻松处理、可视化并转换为其他格式，例如更易于理解和解释的点云。
- en: This article is also available as a Jupyter Notebook for those who wish to follow
    along and run the code locally. The zip file containing the Jupyter Notebook along
    with all the other data and assets can be downloaded from the link below.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文也提供了 Jupyter Notebook 版本，适合那些希望跟随并在本地运行代码的读者。包含 Jupyter Notebook 及所有其他数据和资产的
    zip 文件可以从以下链接下载。
- en: '[## 3D Data Processing with Open3D.zip'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 3D 数据处理与 Open3D.zip'
- en: Zip file containing the Jupyter Notebook, the 3D model and all other necessary
    files.
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含 Jupyter Notebook、3D 模型及所有其他必要文件的 zip 文件。
- en: drive.google.com](https://drive.google.com/file/d/1290xG3_BEYn9WN9TwkYKMmNbNRsrWjGk/view?usp=share_link&source=post_page-----c3062aadc72e--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: drive.google.com](https://drive.google.com/file/d/1290xG3_BEYn9WN9TwkYKMmNbNRsrWjGk/view?usp=share_link&source=post_page-----c3062aadc72e--------------------------------)
- en: 'In this tutorial, I go through the following tasks:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我将介绍以下任务：
- en: '**Loading and visualizing a 3D model as a *mesh***'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加载和可视化一个 3D 模型作为 *网格***'
- en: '**Converting the *mesh* to a *point cloud* by sampling points**'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通过采样点将 *网格* 转换为 *点云***'
- en: '**Removing hidden points from the *point cloud***'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从 *点云* 中移除隐藏点***'
- en: '**Converting the *point cloud* to a dataframe**'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将 *点云* 转换为数据框**'
- en: '**Saving the *point cloud* and dataframe**'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保存 *点云* 和数据框**'
- en: 'Let’s start by importing all the necessary libraries:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先导入所有必要的库：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Loading and visualizing a 3D model as a *mesh*
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和可视化一个 3D 模型作为 *网格*
- en: 'The 3D model can be read as a mesh by running the following lines of code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下代码行将 3D 模型读取为网格：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To visualize the mesh, run the following lines of code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化网格，请运行以下代码行：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The mesh should open up in a new window and should look like the image below
    (take note that the mesh opens up as a static image, and not like the animated
    one shown here). The mesh image can be rotated around as needed using the mouse
    pointer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 网格应在新窗口中打开，呈现出下图所示的样子（请注意，网格以静态图像形式打开，而不是这里展示的动画图像）。可以使用鼠标指针旋转网格图像。
- en: '![](../Images/70991296dafd91cf39eca3039cabb112.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70991296dafd91cf39eca3039cabb112.png)'
- en: 3D model visualized as a mesh (**before** estimation of surface normals).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 模型作为网格可视化（**在**估计表面法线之前）。
- en: As seen above, the car mesh does not appear like a typical 3D model, and is
    painted in a uniform grey colour. This is because the mesh does not have any information
    about *normals* for the vertices and the surfaces in the 3D model.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，汽车网格看起来不像典型的 3D 模型，且被涂成均匀的灰色。这是因为网格没有关于 3D 模型中顶点和表面的 *法线* 信息。
- en: '**What are *normals*?** — The normal vector to a surface at a given point is
    a vector which is perpendicular to the surface at that point. The normal vector
    is often simply called the “*normal*”. To read more on this topic, you can refer
    to these two links: [Normal Vector](https://mathworld.wolfram.com/NormalVector.html)
    and [Estimating Surface Normals in a PointCloud](https://pcl.readthedocs.io/en/latest/normal_estimation.html#).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是 *法线*？** — 在给定点的表面上的法线向量是垂直于该点表面的向量。法线向量通常被称为“*法线*”。要了解更多相关内容，可以参考这两个链接：[法线向量](https://mathworld.wolfram.com/NormalVector.html)
    和 [点云中的表面法线估计](https://pcl.readthedocs.io/en/latest/normal_estimation.html#)。'
- en: 'The *normals* for the 3D mesh above can be estimated by running the following
    lines of code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下代码行来估计上述 3D 网格的 *法线*：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once visualized, the mesh should now appear as shown in the image below. After
    computing the *normals*, the car renders properly and looks like a 3D model.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦可视化，网格应如下面图像所示。计算 *法线* 后，汽车模型将正确渲染，看起来像一个 3D 模型。
- en: '![](../Images/4118a351aecbd1187a8df69c2276047e.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4118a351aecbd1187a8df69c2276047e.png)'
- en: 3D model visualized as a mesh (**after** estimation of surface normals).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 3D模型可视化为网格（**估算表面法线后**）。
- en: 'Let us now create a XYZ coordinate frame to understand the orientation of this
    car model in the Euclidean space. The XYZ coordinate frame can be overlaid on
    the 3D mesh above and visualized by running the following lines of code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个XYZ坐标系，以了解这个车模在欧几里得空间中的方向。XYZ坐标系可以覆盖在上面的3D网格上，通过运行以下代码行进行可视化：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/04e234bb2232060711c09961583c0ff9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04e234bb2232060711c09961583c0ff9.png)'
- en: '3D mesh visualized with the XYZ coordinate frame. X-axis: Red arrow, Y-axis:
    Green arrow, Z-axis: Blue arrow [Easy way to remember — XYZ::RGB]'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 3D网格可视化带有XYZ坐标系。X轴：红色箭头，Y轴：绿色箭头，Z轴：蓝色箭头 [容易记住的方式 — XYZ::RGB]
- en: 'From the above visualization, we see that this car mesh is oriented as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述可视化中，我们可以看到这辆车的网格方向如下：
- en: '**Origin** of XYZ axes : **At the volumetric center** of the car model *(not
    seen in the image above as it is inside the car mesh)*.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XYZ轴的**原点**：**在车模的体积中心**（*在上面的图像中未见，因为它在车模网格内部*）。
- en: '**X-axis** (Red arrow) : Along the **length dimension** of the car with positive
    X-axis pointing towards the hood of the car *(not seen in the image above as it
    is inside the car mesh)*.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X轴**（红色箭头）：沿着汽车的**长度维度**，正X轴指向汽车的引擎盖（*在上面的图像中未见，因为它在车模网格内部*）。'
- en: '**Y-axis** (Green arrow) : Along the **height dimension** of the car with the
    positive Y-axis pointing towards the roof of the car.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Y轴**（绿色箭头）：沿着汽车的**高度维度**，正Y轴指向汽车的车顶。'
- en: '**Z-axis** (Blue arrow) : Along the **width dimension** of the car with the
    positive Z-axis pointing towards the right side of the car.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Z轴**（蓝色箭头）：沿着汽车的**宽度维度**，正Z轴指向车的右侧。'
- en: Let us now take a look at what is inside this car model. To do this, we will
    crop the mesh in the Z-axis and remove the right half of the car (positive Z-axis).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看这个车模内部的情况。为此，我们将沿Z轴裁剪网格，并移除车的右半部分（正Z轴）。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/c66e1e5fba2f67f19c913c3c686aee6e.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c66e1e5fba2f67f19c913c3c686aee6e.png)'
- en: 3D mesh cropped in Z-axis with the right half of the car removed (positive Z-axis).
    The cropped mesh shows the detailed interior in this 3D car model.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Z轴上裁剪的3D网格，右半部分的车被移除（正Z轴）。裁剪后的网格展示了这个3D车模的详细内部结构。
- en: From the above visualization, we see that this car model has a detailed interior.
    Now that we have seen what is inside this 3D mesh, we can convert it to a point
    cloud before removing the “hidden” points which belong to the interior of the
    car.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述可视化中，我们看到这个车模有详细的内部结构。现在我们已经看到这个3D网格内部的内容，我们可以在移除属于车内部的“隐藏”点之前，将其转换为点云。
- en: Converting the *mesh* to a *point cloud* by sampling points
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过采样点将*网格*转换为*点云*
- en: Converting the mesh to a point cloud can be easily done in Open3D by defining
    the number of points we wish to sample from the mesh.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Open3D中，将网格转换为点云可以很容易地完成，通过定义我们希望从网格中采样的点的数量。
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/3489992121f80d4da3c30e9043befd92.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3489992121f80d4da3c30e9043befd92.png)'
- en: 3D point cloud created by sampling 100,000 points uniformly from the 3D mesh.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从3D网格中均匀采样的100,000个点创建的3D点云。
- en: Take note that the colours in the point cloud above only indicate the position
    of the points along the Z-axis.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上面的点云中的颜色仅指示点在Z轴上的位置。
- en: 'If we were to crop the point cloud exactly like we did for the mesh above,
    this is what it would look like:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们像对网格一样裁剪点云，它会是这样的：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/656d506ef643e3a682cf68cb60597adf.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/656d506ef643e3a682cf68cb60597adf.png)'
- en: 3D point cloud cropped in Z-axis with the right half of the car removed (positive
    Z-axis). Like the cropped mesh above, the cropped point cloud also shows the detailed
    interior in this 3D car model.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Z轴上裁剪的3D点云，右半部分的车被移除（正Z轴）。与上面的裁剪网格类似，裁剪后的点云也展示了这个3D车模的详细内部结构。
- en: We see in this visualization of the cropped point cloud that it also contains
    points which belong to the interior of the car model. This is expected as this
    point cloud was created by uniformly sampling points from the entire mesh. In
    the next section, we will remove these “hidden” points which belong to the interior
    of the car and are not on the outer surface of the point cloud.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在裁剪后的点云的可视化中看到，它还包含了属于车模内部的点。这是预期的，因为这个点云是通过从整个网格中均匀采样点创建的。在下一部分中，我们将移除这些属于车内部并不在点云外表面的“隐藏”点。
- en: Removing hidden points from the *point cloud*
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从*点云*中移除隐藏点
- en: Imagine yourself pointing a light on the right side of the car model. All the
    points that fall on the right outer surface of the 3D model would be illuminated,
    while all the other points in the point cloud would not.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你将光线照射到汽车模型的右侧。所有落在 3D 模型右侧外表面的点都会被照亮，而点云中的其他点则不会。
- en: '![](../Images/b9c54a72522967a3ed2ccfb7c22c4579.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9c54a72522967a3ed2ccfb7c22c4579.png)'
- en: Illustration showing how Open3D’s Hidden Point Removal works on the point cloud
    from a given viewpoint. All the illuminated points are considered “visible”, while
    all other points are considered “hidden”.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 插图展示了 Open3D 的隐藏点移除功能如何在从给定视角查看的点云上工作。所有被照亮的点被认为是“可见”的，而所有其他点被认为是“隐藏”的。
- en: Let us now label these illuminated points as “visible” and all the non-illuminated
    points as “hidden”. These “hidden” points would also include all the points that
    belong to the interior of the car.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将这些被照亮的点标记为“可见”，所有未被照亮的点标记为“隐藏”。这些“隐藏”的点还包括所有属于汽车内部的点。
- en: 'This operation is known as *Hidden Point Removal* in Open3D. In order to perform
    this operation on the point cloud using Open3D, run the following lines of code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该操作在 Open3D 中称为*隐藏点移除*。为了在点云上执行此操作，使用 Open3D，运行以下代码行：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the above output list of indexes of points that are visible, we can colour
    the visible and hidden points in different colours before visualizing the point
    cloud.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述输出的可见点索引列表，我们可以在可视化点云之前，用不同的颜色标记可见点和隐藏点。
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/f390adb4db7eae032618205b1879c1a0.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f390adb4db7eae032618205b1879c1a0.png)'
- en: Point cloud after the hidden point removal operation from the camera viewpoint
    shown in the illustration above. The “visible” points are in blue while the “hidden”
    points are in red.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图所示的相机视角下的隐藏点移除操作后的点云。蓝色为“可见”点，而红色为“隐藏”点。
- en: From the visualization above, we see how the hidden point removal operation
    works from a given camera viewpoint. The operation eliminates all the points in
    the background that are occluded by the points in the foreground from a given
    camera viewpoint.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的可视化中，我们可以看到隐藏点移除操作如何在给定的相机视角下工作。该操作从给定的相机视角下消除所有被前景点遮挡的背景点。
- en: To understand this better, we could repeat the same operation again, but this
    time after rotating the point cloud slightly. **Effectively, we’re trying to change
    the viewpoint here. But instead of changing it by re-defining the camera parameters,
    we will be rotating the point cloud itself.**
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，我们可以再次重复相同的操作，但这次在轻微旋转点云之后。**实际上，我们在这里尝试改变视角。但不是通过重新定义相机参数来改变视角，而是通过旋转点云本身。**
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/78ac4406b6279930d1595b81f570d332.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78ac4406b6279930d1595b81f570d332.png)'
- en: 3D point cloud **rotated about the X-axis by 90 degrees**. Notice that now,
    unlike before, the **Y-axis** (Green arrow) is running along the **width dimension**
    of the car, and the **Z-axis** (Blue arrow) is running along the **height dimension**
    of the car. There is no change in the X-axis (Red arrow) which is still running
    along the length dimension of the car.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 点云**绕 X 轴旋转了 90 度**。注意，现在，与之前不同的是，**Y 轴**（绿色箭头）沿着汽车的**宽度方向**，而 **Z 轴**（蓝色箭头）沿着汽车的**高度方向**。X
    轴（红色箭头）没有变化，仍然沿着汽车的长度方向。
- en: '![](../Images/7c39065ff5c12fb88d444f91e97b3920.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c39065ff5c12fb88d444f91e97b3920.png)'
- en: Illustration showing how the hidden point removal operation works on the rotated
    point cloud from the same given viewpoint as earlier. As explained earlier, all
    the illuminated points are considered “visible”, while all other points are considered
    “hidden”.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 插图展示了隐藏点移除操作如何在从之前相同视角查看的旋转点云上工作。如前所述，所有被照亮的点被认为是“可见”的，而所有其他点被认为是“隐藏”的。
- en: By repeating the same process again with the rotated car model, we would see
    that this time all the points that fall on the upper outer surface of the 3D model
    (roof of the car) would get illuminated, while all the other points in the point
    cloud would not.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在旋转的汽车模型上重复相同的过程，我们将看到这次所有落在 3D 模型上表面（汽车的车顶）的点会被照亮，而点云中的其他点则不会。
- en: 'We can repeat the hidden point removal operation with the rotated point cloud
    by running the following lines of code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下代码行来重复对旋转点云的隐藏点移除操作：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/eb03d7895f7075a8b11f7c162fe8a8d5.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb03d7895f7075a8b11f7c162fe8a8d5.png)'
- en: Rotated point cloud after the hidden point removal operation from the camera
    viewpoint shown in the illustration above. Again, the “visible” points are in
    blue while the “hidden” points are in red.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图所示的相机视角隐藏点去除操作后的旋转点云。再次，可见的点为蓝色，而隐藏的点为红色。
- en: 'The above visualization of the rotated point cloud clearly illustrates how
    the hidden point removal operation works. So now, in order to remove *all* the
    “hidden” points from this car point cloud, we can **perform this hidden point
    removal operation *sequentially* by rotating the point cloud slightly about all
    the three axes from -90 to +90 degrees.** After each hidden point removal operation,
    we can aggregate the output list of indexes of points. **After all the hidden
    point removal operations, the aggregated list of indexes of points will contain
    all the points that are not hidden (ie., points that are on the outer surface
    of the point cloud).** The following code performs this sequential hidden point
    removal operation:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述旋转点云的可视化清楚地说明了隐藏点去除操作的工作原理。因此，为了从这个汽车点云中删除所有的“隐藏”点，我们可以通过依次绕三个轴线将点云略微旋转从 -90
    度到 +90 度来**顺序执行这个隐藏点去除操作**。在每次隐藏点去除操作之后，我们可以聚合出点的索引输出列表。**在所有隐藏点去除操作之后，点的聚合索引列表将包含所有未隐藏的点（即，位于点云外表面上的点）。**以下代码执行这个顺序隐藏点去除操作：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/43f28acf371940f0bdaa0586e51c7fff.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/43f28acf371940f0bdaa0586e51c7fff.png)'
- en: Point cloud after all the sequential hidden point removal operations from the
    same camera viewpoint. The aggregated “visible” points (ie., points on the outer
    surface of the point cloud) are in blue while the “hidden” points (ie., points
    **not** on the outer surface of the point cloud) are in red.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从相同相机视角经所有连续隐藏点去除操作后的点云。聚合的“可见”点（即，点云外表面上的点）为蓝色，而“隐藏”点（即，不在点云外表面上的点）为红色。
- en: Let’s crop the point cloud again to have a look at the points which belong to
    the interior of the car.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次裁剪点云，看看属于汽车内部的点。
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/df3b98c5c29de1be0d3e19aa573568da.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df3b98c5c29de1be0d3e19aa573568da.png)'
- en: Cropped point cloud after all the sequential hidden point removal operations
    showing all the “hidden” points in red that belong to the interior of the 3D car
    model.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 经所有连续隐藏点去除操作后的裁剪点云，显示了所有属于 3D 汽车模型内部的“隐藏”点，标记为红色。
- en: From the above visualization of the cropped point cloud after the hidden point
    removal operation, we see that all the “hidden” points which belong to the interior
    of the car model (red) are now separated from the “visible” points which are on
    the outer surface of the point cloud (blue).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述经隐藏点去除操作后的点云可视化中，我们看到所有属于汽车模型内部（红色）的“隐藏”点现在与位于点云外表面（蓝色）的“可见”点分离开来。
- en: Converting the *point cloud* to a dataframe
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将*点云*转换为数据框
- en: As one might expect, the position of each point in the point cloud can be defined
    by three numerical values — the *X, Y & Z coordinates*. However, recall that in
    the section above, we also estimated the surface normals for each point in the
    3D mesh. As we sampled points from this mesh to create the point cloud, each point
    in the point cloud also contains three additional attributes related to these
    surface normals — the *normal unit vector coordinates in the X, Y & Z directions*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，点云中每个点的位置可以用三个数值来定义 — *X、Y 和 Z 坐标*。然而，请回忆上面的部分，我们还为 3D 网格中的每个点估计了表面法线。当我们从这个网格中取样点以创建点云时，点云中的每个点还包含与这些表面法线相关的三个附加属性
    — *X、Y 和 Z 方向的法线单位向量坐标*。
- en: 'So, in order to convert the point cloud to a dataframe, **each point in the
    point cloud can be represented in a single row by the following seven attribute
    columns**:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了将点云转换为数据框，**点云中的每个点可以通过以下七个属性列在单独的行中表示**：
- en: '**X coordinate** (*float*)'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**X 坐标** (*浮点数*)'
- en: '**Y coordinate** (*float*)'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Y 坐标** (*浮点数*)'
- en: '**Z coordinate** (*float*)'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Z 坐标** (*浮点数*)'
- en: '**Normal vector coordinate in X direction** (*float*)'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**X 方向法向量坐标** (*浮点数*)'
- en: '**Normal vector coordinate in Y direction** (*float*)'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Y 方向法向量坐标** (*浮点数*)'
- en: '**Normal vector coordinate in Z direction** (*float*)'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Z 方向法向量坐标** (*浮点数*)'
- en: '**Point visible** (*boolean True or False*)'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**点可见性** (*布尔值 True 或 False*)'
- en: 'The point cloud can be converted to a dataframe by running the following lines
    of code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下代码行，可以将点云转换为数据框：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This would return a dataframe as shown below, where each point is a row represented
    by the seven attribute columns explained above.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回如下所示的数据框，其中每个点都是由上面解释的七个属性列表示的一行。
- en: '![](../Images/8c803e2c89581a325d6cfcda32e90ab1.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c803e2c89581a325d6cfcda32e90ab1.png)'
- en: 3D point cloud converted to a dataframe.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 点云转换为数据框。
- en: Saving the *point cloud* and dataframe
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存*点云*和数据框
- en: 'The point clouds (before and after hidden point removal) and the dataframe
    can now be saved by running the following lines of code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 点云（隐藏点移除前和后）以及数据框现在可以通过运行以下代码行来保存：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/ac1332b3826c2f4143e32746af5f5131.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac1332b3826c2f4143e32746af5f5131.png)'
- en: '3D model (top: whole, bottom: cropped) visualized as 1\. a mesh, 2\. a point
    cloud & 3\. a point cloud after hidden point removal.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 模型（上图：完整，下图：裁剪）可视化为 1. 网格，2. 点云和 3. 隐藏点移除后的点云。
- en: And that’s it! Hope this walkthrough gave you a bit of clarity on how to process
    3D data in Python. Do let me know if you have any questions or any suggestions
    on how I could have approached these tasks in a better way. Reach out to me if
    you have any cool ideas for applications which require the use of 3D data — always
    happy to connect and share similar interests! Also, feel free to connect with
    me on [LinkedIn](https://www.linkedin.com/in/prerakagarwal/).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些！希望本次演示能让你对如何在 Python 中处理 3D 数据有一点清晰的了解。如果你有任何问题或对如何更好地完成这些任务有建议，请告诉我。如果你有需要使用
    3D 数据的有趣应用想法，请随时联系我——我很高兴能交流并分享类似的兴趣！同时，也欢迎在 [LinkedIn](https://www.linkedin.com/in/prerakagarwal/)
    上与我联系。
- en: The 3D car model used in this walkthrough has been modified slightly from the
    original file to fit the purposes of this exercise. Credit to the original creator
    — *“Tesla Model S Plaid” (*[*https://skfb.ly/oEqT9*](https://skfb.ly/oEqT9)*)
    by ValentunW is licensed under Creative Commons Attribution (*[*http://creativecommons.org/licenses/by/4.0/*](http://creativecommons.org/licenses/by/4.0/)*).*
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本次演示中使用的 3D 汽车模型已从原始文件中稍作修改，以适应本练习的需要。感谢原作者 — *“Tesla Model S Plaid”*（[*https://skfb.ly/oEqT9*](https://skfb.ly/oEqT9)）由
    ValentunW 创作，使用了 Creative Commons Attribution 许可协议（[*http://creativecommons.org/licenses/by/4.0/*](http://creativecommons.org/licenses/by/4.0/)）。
