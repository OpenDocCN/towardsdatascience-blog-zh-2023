- en: Cultivating Data Integrity in Data Science with Pandera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/cultivating-data-integrity-in-data-science-with-pandera-2289608626cc?source=collection_archive---------9-----------------------#2023-12-22](https://towardsdatascience.com/cultivating-data-integrity-in-data-science-with-pandera-2289608626cc?source=collection_archive---------9-----------------------#2023-12-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Advanced validation techniques with Pandera to promote data quality and reliability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@le_Tomassini?source=post_page-----2289608626cc--------------------------------)[![Alessandro
    Tomassini](../Images/e5bf527fafd933239bff6b87005ba457.png)](https://medium.com/@le_Tomassini?source=post_page-----2289608626cc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2289608626cc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2289608626cc--------------------------------)
    [Alessandro Tomassini](https://medium.com/@le_Tomassini?source=post_page-----2289608626cc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cb5c2b60ac8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcultivating-data-integrity-in-data-science-with-pandera-2289608626cc&user=Alessandro+Tomassini&userId=4cb5c2b60ac8&source=post_page-4cb5c2b60ac8----2289608626cc---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2289608626cc--------------------------------)
    ·6 min read·Dec 22, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2289608626cc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcultivating-data-integrity-in-data-science-with-pandera-2289608626cc&user=Alessandro+Tomassini&userId=4cb5c2b60ac8&source=-----2289608626cc---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2289608626cc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcultivating-data-integrity-in-data-science-with-pandera-2289608626cc&source=-----2289608626cc---------------------bookmark_footer-----------)![](../Images/496ecd9799362bd2389967b06cf79fa1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image generated by DALL-E
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to an exploratory journey into data validation with Pandera, a lesser-known
    yet powerful tool in the data scientist’s toolkit. This tutorial aims to illuminate
    the path for those seeking to fortify their data processing pipelines with robust
    validation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Pandera is a Python library that provides flexible and expressive data validation
    for pandas data structures. It’s designed to bring more rigor and reliability
    to the data processing steps, ensuring that your data conforms to specified formats,
    types, and other constraints before you proceed with analysis or modeling.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Pandera?**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the intricate tapestry of data science, where data is the fundamental thread,
    ensuring its quality and consistency is paramount. Pandera promotes the integrity
    and quality of data through rigorous validation. It’s not just about checking
    data types or formats; Pandera extends its vigilance to more sophisticated statistical
    validations, making it an indispensable ally in your data science endeavours.
    Specifically, Pandera stands out by offering:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Schema enforcement**: Guarantees that your DataFrame adheres to a predefined
    schema.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Customisable validation**: Enables creation of complex, custom validation
    rules.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integration with Pandas**: Seamlessly works with existing pandas workflows.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Crafting your first schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/f3f8e4e5353cdb195396a0180b6b5cc3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [charlesdeluvio](https://unsplash.com/@charlesdeluvio?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with installing Pandera. This can be done using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A schema in Pandera defines the expected structure, data types, and constraints
    of your DataFrame. We’ll begin by importing the necessary libraries and defining
    a simple schema.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This schema specifies that our DataFrame should have three columns: `name`
    (string), `age` (integer, non-negative), and `email` (string, matching a regular
    expression for email). Now, with our schema in place, let’s validate a DataFrame.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, Pandera will raise a `SchemaError` because Bob's age is negative,
    which violates our schema.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: One of Pandera’s strengths is its ability to define custom validation functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `@pa.check_input` decorator ensures that the input DataFrame adheres to
    the schema before the function processes it.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced data validation with custom check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/63a5c18f885fb03d8561166b8c92ace5.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore more complex validations that Pandera offers. Building upon
    the existing schema, we can add additional columns with various data types and
    more sophisticated checks. We’ll introduce columns for categorical data, datetime
    data, and implement more advanced checks like ensuring unique values or referencing
    other columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this enhanced schema, we’ve added:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Categorical data: The `department` column validates against specific categories.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Datetime data: The `start_date` column ensures dates are in the past.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nullable column: The `performance_score` column can have missing values.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Index validation: An index `employee_id` of type integer is defined.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complex check: A custom function `salary_age_relation_check` ensures a logical
    relationship between salary and age within each department.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implementation of the custom check in the data processing function: We integrate
    the `salary_age_relation_check` logic directly into our data processing function.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use of Pandera’s `validate` method: Instead of using the `@pa.check_types`
    decorator, we manually validated the DataFrame using the `validate` method provided
    by Pandera.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s create an example DataFrame `df_example` that matches the structure
    and constraints of our enhanced schema and validate it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, Pandera will raise a `SchemaError` because of a mismatch between the expected
    data type of the `salary` column in `enhanced_schema` (`float` which corresponds
    to `float64` in pandas/Numpy types) and the actual data type present in `df_example`
    (`int` or `int64` in pandas/Numpy types).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Advanced data validation with statistical hypothesis testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/c642d2aab10a659a3daeb1fb89ec761e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Daniela Paola Alchapar](https://unsplash.com/@paoalchapar?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Pandera can perform statistical hypothesis tests as part of the validation process.
    This feature is particularly useful for validating assumptions about your data
    distributions or relationships between variables.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you want to ensure that the average salary in your dataset is around
    a certain value, say £75,000\. One can define a custom check function to perform
    a one-sample t-test to assess if the mean of a sample (e.g., the mean of the salaries
    in the dataset) differs significantly from a known mean (in our case, £75,000).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code above we have:'
  prefs: []
  type: TYPE_NORMAL
- en: Defined the custom check function `mean_salary_check` that takes a pandas Series
    (the `salary` column in our DataFrame) and performs the t-test against the expected
    mean . The function returns `True` if the p-value from the t-test is greater than
    the significance level (alpha = 0.05), indicating that the mean salary is not
    significantly different from £75,000.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then wrapped this function in a Pandera `Check`, specifying `element_wise=False`
    to indicate that the check is applied to the entire series rather than to each
    element individually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we updated the `salary` column in our Pandera schema to include this
    new check along with any existing checks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With these steps, our Pandera schema now includes a statistical test on the
    `salary` column. We deliberately increase the average salary in `df_example` to
    violate the schema’s expectation so that Pandera will raise a `SchemaError` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pandera elevates data validation from a mundane checkpoint to a dynamic process
    that encompasses even complex statistical validations. By integrating Pandera
    into your data processing pipeline, you can catch inconsistencies and errors early,
    saving time, preventing headaches down the road, and paving the way for more reliable
    and insightful data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For those willing to further their understanding of Pandera and its capabilities,
    the following resources serve as excellent starting points:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pandera Documentation: A comprehensive guide to all features and functionalities
    of Pandera ([Pandera Docs](https://pandera.readthedocs.io/)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pandas Documentation: As Pandera extends pandas, familiarity with pandas is
    crucial ([Pandas Docs](https://pandas.pydata.org/docs/)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disclaimer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am not affiliated with Pandera in any capacity, I am just very enthusiastic
    about it :)
  prefs: []
  type: TYPE_NORMAL
