- en: Geospatial Index 102
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理空间索引 102
- en: 原文：[https://towardsdatascience.com/geospatial-index-102-cb90c9effb2c?source=collection_archive---------16-----------------------#2023-04-11](https://towardsdatascience.com/geospatial-index-102-cb90c9effb2c?source=collection_archive---------16-----------------------#2023-04-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/geospatial-index-102-cb90c9effb2c?source=collection_archive---------16-----------------------#2023-04-11](https://towardsdatascience.com/geospatial-index-102-cb90c9effb2c?source=collection_archive---------16-----------------------#2023-04-11)
- en: A hands-on example of how to apply geospatial index
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个实际示例，展示如何应用地理空间索引
- en: '[](https://medium.com/@thanakornpanyapiang?source=post_page-----cb90c9effb2c--------------------------------)[![Thanakorn
    Panyapiang](../Images/4e68a74a2039c8404c5873d7d364be43.png)](https://medium.com/@thanakornpanyapiang?source=post_page-----cb90c9effb2c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb90c9effb2c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb90c9effb2c--------------------------------)
    [Thanakorn Panyapiang](https://medium.com/@thanakornpanyapiang?source=post_page-----cb90c9effb2c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@thanakornpanyapiang?source=post_page-----cb90c9effb2c--------------------------------)[![Thanakorn
    Panyapiang](../Images/4e68a74a2039c8404c5873d7d364be43.png)](https://medium.com/@thanakornpanyapiang?source=post_page-----cb90c9effb2c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb90c9effb2c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb90c9effb2c--------------------------------)
    [Thanakorn Panyapiang](https://medium.com/@thanakornpanyapiang?source=post_page-----cb90c9effb2c--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3946a0d40f8c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeospatial-index-102-cb90c9effb2c&user=Thanakorn+Panyapiang&userId=3946a0d40f8c&source=post_page-3946a0d40f8c----cb90c9effb2c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb90c9effb2c--------------------------------)
    ·7 min read·Apr 11, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcb90c9effb2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeospatial-index-102-cb90c9effb2c&user=Thanakorn+Panyapiang&userId=3946a0d40f8c&source=-----cb90c9effb2c---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3946a0d40f8c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeospatial-index-102-cb90c9effb2c&user=Thanakorn+Panyapiang&userId=3946a0d40f8c&source=post_page-3946a0d40f8c----cb90c9effb2c---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb90c9effb2c--------------------------------)
    · 7分钟阅读 · 2023年4月11日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcb90c9effb2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeospatial-index-102-cb90c9effb2c&source=-----cb90c9effb2c---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcb90c9effb2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeospatial-index-102-cb90c9effb2c&source=-----cb90c9effb2c---------------------bookmark_footer-----------)'
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Geospatial Indexing is an indexing technique that provides an elegant way to
    manage location-based data. It makes geospatial data can be searched and retrieved
    efficiently so that the system can provide the best experience to its users. This
    article is going to demonstrate how this works in practice by applying a geospatial
    index to real-world data and demonstrating the performance gain by doing that.
    Let’s get started. *(Note: If you have never heard of the geospatial index or
    would like to learn more about it, check out* [*this article*](https://medium.com/towards-data-science/geospatial-index-101-df2c011da04b)*)*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间索引是一种索引技术，它提供了一种优雅的方式来管理基于位置的数据。它使得地理空间数据可以高效地搜索和检索，从而系统能够为用户提供最佳体验。本文将通过将地理空间索引应用于实际数据，并展示这样做所带来的性能提升，来演示其实际操作。让我们开始吧。*（注意：如果你从未听说过地理空间索引或希望了解更多信息，可以查看*
    [*这篇文章*](https://medium.com/towards-data-science/geospatial-index-101-df2c011da04b)*)*
- en: Data
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: The data used in this article is the [Chicago Crime Data](https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-crime)
    which is a part of the [Google Cloud Public Dataset Program](https://cloud.google.com/bigquery/public-data).
    Anyone with a Google Cloud Platform account can access this dataset for free.
    It consists of approximately 8 million rows of data (with a total amount of 1.52
    GB) recording incidents of crime that occurred in Chicago since 2001, where each
    record has geographic data indicating the incident’s location.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文使用的数据是[芝加哥犯罪数据](https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-crime)，这是[Google
    Cloud 公共数据集计划](https://cloud.google.com/bigquery/public-data)的一部分。任何拥有 Google
    Cloud Platform 账户的人都可以免费访问此数据集。数据集包含约 800 万行数据（总量为 1.52 GB），记录了自 2001 年以来发生在芝加哥的犯罪事件，每条记录都有指示事件位置的地理数据。
- en: Platform
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台
- en: Not only that we’ll use the data from Google Cloud, but also we’ll use Google
    Big Query as a data processing platform. Big Query provides the job execution
    details for every query executed. This includes the amount of data used and the
    number of rows processed which will be very useful to illustrate the performance
    gain after optimization.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅会使用 Google Cloud 的数据，还会使用 Google Big Query 作为数据处理平台。Big Query 提供了每个执行查询的作业执行细节。这包括使用的数据量和处理的行数，这将非常有助于展示优化后的性能提升。
- en: Implementation
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: What we’re going to do to demonstrate the power of the geospatial index is to
    optimize the performance of the location-based query. In this example, we’re going
    to use [*Geohash*](https://en.wikipedia.org/wiki/Geohash#:~:text=Geohash%20is%20a%20public%20domain,Morton%20in%201966.)
    as an index because of its simplicity and native support by Google BigQuery.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过优化基于位置的查询来展示地理空间索引的强大功能。在这个例子中，我们将使用[*Geohash*](https://en.wikipedia.org/wiki/Geohash#:~:text=Geohash%20is%20a%20public%20domain,Morton%20in%201966.)作为索引，因为它的简洁性和
    Google BigQuery 的原生支持。
- en: 'We’re going to retrieve all records of crimes that occurred within 2 km of
    the *Chicago Union Station*. Before the optimization, let’s see what the performance
    looks like when we run this query on the original dataset:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检索发生在距离*芝加哥联合车站*2公里范围内的所有犯罪记录。在优化之前，让我们看看在原始数据集上运行此查询时的性能表现：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Below is what the job information and execution details look like:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是作业信息和执行细节的样子：
- en: '![](../Images/5a9071f2857845eb83a5a8cf8cee8403.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a9071f2857845eb83a5a8cf8cee8403.png)'
- en: Job information(Image by author)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作业信息（作者提供的图片）
- en: '![](../Images/ea4e015ea548cd43aa2f2f79b8af4d8b.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea4e015ea548cd43aa2f2f79b8af4d8b.png)'
- en: Execution details(Image by author)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 执行细节（作者提供的图片）
- en: From the number of *Bytes processed* and *Records read*, you can see that the
    query scans the whole table and processes every row in order to get the final
    result. This means the more data we have, the longer the query will take, and
    the more expensive the processing cost will be. Can this be more efficient? Of
    course, and that’s where the geospatial index comes into play.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从*处理的字节数*和*读取的记录数*中，你可以看到查询扫描了整个表并处理了每一行，以获取最终结果。这意味着数据越多，查询所需时间越长，处理成本也越高。这可以更高效吗？当然可以，这就是地理空间索引发挥作用的地方。
- en: The problem with the above query is that even though many records are distant
    from the point-of-interest(Chicago Union Station), it has to be processed anyway.
    If we can eliminate those records, that would make the query a lot more efficient.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询的问题在于，尽管许多记录距离关注点（芝加哥联合车站）较远，但仍然必须处理这些记录。如果我们能排除这些记录，那么查询将更高效。
- en: Geohash can be the solution to this issue. In addition to encoding coordinates
    into a text, another power of geohash is the hash also contains geospatial properties.
    The similarity between hashes can infer geographical similarity between the locations
    they represent. For example, the two areas represented by `wxcgh` and `wxcgd`
    are close because the two hashes are very similar, while `accgh` and `dydgh` are
    distant from each other because the two hashes are very different.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Geohash 可以是解决这个问题的方案。除了将坐标编码为文本外，geohash 的另一个优点是哈希还包含地理空间属性。哈希之间的相似性可以推测它们所代表位置的地理相似性。例如，`wxcgh`
    和 `wxcgd` 代表的两个区域相近，因为这两个哈希非常相似，而 `accgh` 和 `dydgh` 之间则相距较远，因为这两个哈希非常不同。
- en: We can use this property with the [clustered table](https://cloud.google.com/bigquery/docs/clustered-tables)
    to our advantage by calculating the geohash of every row in advance. Then, we
    calculate the geohash of the Chicago Union Station. This way, we can eliminate
    all records that the hashes are not *close enough* to the Chicago Union Station’s
    geohash beforehand.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这一属性与 [聚簇表](https://cloud.google.com/bigquery/docs/clustered-tables) 进行配合，通过预先计算每一行的
    geohash。然后，我们计算芝加哥联合车站的 geohash。这样，我们可以在预先筛选掉所有与芝加哥联合车站的 geohash 不够 *接近* 的记录。
- en: 'Here is how to implement it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实现方法如下：
- en: '**Create a new table with a new column that stores a geohash of the coordinates.**'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个新表，并添加一个新列来存储坐标的 geohash。**'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**2\. Create a clustered table using a geohash column as a cluster key**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 使用 geohash 列作为聚簇键创建聚簇表**'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By using geohash as a cluster key, we create a table in which the rows that
    share the same hash are physically stored together. If you think about it, what
    actually happens is that the dataset is partitioned by geolocation because the
    closer the rows geographically are, the more likely they will have the same hash.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 geohash 作为聚簇键，我们创建了一个表，其中共享相同哈希的行被物理地存储在一起。如果你考虑一下，实际发生的情况是数据集按地理位置进行分区，因为地理位置越接近的行更有可能具有相同的哈希。
- en: '**3\. Compute the geohash of the Chicago Union Station.**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 计算芝加哥联合车站的 geohash。**'
- en: In this article, we use [*this website*](https://www.movable-type.co.uk/scripts/geohash.html)
    but there are plenty of libraries in various programming languages that allow
    you to do this programmatically.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们使用了 [*这个网站*](https://www.movable-type.co.uk/scripts/geohash.html)，但有很多不同编程语言的库可以让你以编程方式实现这一功能。
- en: '![](../Images/2ec306ddc119f65cc73ea6ffdeb21e60.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ec306ddc119f65cc73ea6ffdeb21e60.png)'
- en: Geohash of the Chicago Union Station(Image by author)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 芝加哥联合车站的 geohash（作者提供的图像）
- en: '**4\. Add the geohash to the query condition.**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 将 geohash 添加到查询条件中。**'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This time the query should only scan the records located in the `dp3wj` since
    the geohash is a cluster key of the table. This supposes to save a lot of processing.
    Let's see what happens.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这次查询应该只扫描位于 `dp3wj` 的记录，因为 geohash 是表的聚簇键。这应该能节省很多处理时间。让我们看看会发生什么。
- en: '![](../Images/6da1e87a82d8e8f37c360c66615f8f34.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6da1e87a82d8e8f37c360c66615f8f34.png)'
- en: Job information after creating a clustered table(Image by author)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建聚簇表后的作业信息（作者提供的图像）
- en: '![](../Images/cc1df2e52830f58cc0abaf6f6603b535.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc1df2e52830f58cc0abaf6f6603b535.png)'
- en: Execution details after creating a clustered table(Image by author)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建聚簇表后的执行细节（作者提供的图像）
- en: From the job info and execution details, you can see the number of bytes processed
    and records scanned reduced significantly(from 1.5 GB to 55 MB and 7M to 260k).
    By introducing a geohash column and using it as a cluster key, we eliminate all
    the records that clearly do not satisfy the query beforehand just by looking at
    one column.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从作业信息和执行细节中，你可以看到处理的字节数和扫描的记录数显著减少（从 1.5 GB 减少到 55 MB，7M 减少到 260k）。通过引入 geohash
    列并将其用作聚簇键，我们可以仅通过查看一列就提前排除所有明显不满足查询的记录。
- en: However, we are not finished yet. Look at the number of output rows carefully,
    you’ll see that it only has 100k records where the correct result must have 380k.
    The result we got is still not correct.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们还没有完成。仔细查看输出的行数，你会发现它只有 100k 条记录，而正确的结果应该有 380k 条。我们得到的结果仍然不正确。
- en: '**5\. Compute the neighbor zones and add them to the query.**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. 计算邻近区域并将它们添加到查询中。**'
- en: In this example, all the neighbor hashes are `dp3wk`, `dp3wm`, `dp3wq`, `dp3wh`,
    `dp3wn`, `dp3wu`, `dp3wv`, and `dp3wy` . We use online [*geohash explore*](https://chrishewett.com/blog/geohash-explorer/)
    for this but, again, this can totally be written as a code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，所有的邻近哈希是 `dp3wk`、`dp3wm`、`dp3wq`、`dp3wh`、`dp3wn`、`dp3wu`、`dp3wv` 和 `dp3wy`。我们使用在线的
    [*geohash 探索器*](https://chrishewett.com/blog/geohash-explorer/) 来查看这些，但这也可以完全通过代码实现。
- en: '![](../Images/7b540290a4d435d840fa9c82c8223071.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b540290a4d435d840fa9c82c8223071.png)'
- en: Neighbors of the dp3wj(Image by author)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: dp3wj 的邻居（作者提供的图像）
- en: Why do we need to add the neighbor zones to the query? Because geohash is only
    *an approximation* of location. Although we know Chicago Union Station is in the
    `dp3wj` , we still don't know where exactly it is in the zone. At the top, bottom,
    left, or right? We have no idea. If it's at the top, it's possible some data in
    the `dp3wm` may be closer to it than 2km. If it's on the right, it's possible
    some data in the `dp3wn` zone may closer than 2km. And so on. That's why all the
    neighbor hashes have to be included in the query to get the correct result.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要在查询中添加邻域区域？因为地理哈希只是位置的*一种近似*。虽然我们知道芝加哥联合车站在`dp3wj`区域内，但我们仍然不知道它在区域中的具体位置。是在顶部、底部、左侧还是右侧？我们无从得知。如果它在顶部，那么在`dp3wm`中的一些数据可能比2公里更接近。如果它在右侧，则`dp3wn`区域中的一些数据可能距离更近。依此类推。这就是为什么所有邻域哈希必须包含在查询中以获得正确结果的原因。
- en: Note that geohash level 5 has a precision of 5km. Therefore, all zones other
    than those in the above figure will be too far from the Chicago Union Station.
    This is another important design choice that has to be made because it has a huge
    impact. We’ll gain very little if it’s too coarse. On the other hand, using too
    fine precision-level will make the query sophisticated.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，地理哈希级别5的精度为5公里。因此，除上图中的区域外，所有其他区域距离芝加哥联合车站都太远。这是另一个需要做出的重要设计选择，因为它有巨大的影响。如果精度过粗，我们得到的收益很少。另一方面，使用过细的精度级别会使查询变得复杂。
- en: 'Here’s what the final query looks like:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终查询的样子：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And this is what happens when executing the query:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是执行查询时发生的情况：
- en: '![](../Images/9b7f234072d4f08729a578b8d41ce331.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b7f234072d4f08729a578b8d41ce331.png)'
- en: Job information after adding neighbor hashes(Image by author)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 添加邻域哈希后的工作信息（图片由作者提供）
- en: '![](../Images/11ee2dfe07a9d4fc63b6d7838a205b63.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11ee2dfe07a9d4fc63b6d7838a205b63.png)'
- en: Execution details after adding neighbor hashes(Image by author)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 添加邻域哈希后的执行细节（图片由作者提供）
- en: Now the result is correct and the query processes 527 MB and scans 2.5M records
    in total. In comparison with the original query, using geohash and clustered table
    saves the processing resource around 3 times. However, nothing comes for free.
    Applying geohash adds complexity to the way data is preprocessed and retrieved
    such as the choice of precision level that has to be chosen in advance and the
    additional logic of the SQL query.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在结果是正确的，查询处理了527 MB的数据，总共扫描了250万条记录。与原始查询相比，使用地理哈希和聚簇表节省了大约3倍的处理资源。然而，任何东西都不是免费的。应用地理哈希增加了数据预处理和检索的复杂性，例如需要提前选择的精度级别和额外的SQL查询逻辑。
- en: Conclusion
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we’ve seen how the geospatial index can help improve the processing
    of geospatial data. However, it has a cost that should be well considered in advance.
    At the end of the day, it’s not a free lunch. To make it work properly, a good
    understanding of both the algorithm and the system requirements is required.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们已经看到地理空间索引如何帮助改善地理空间数据的处理。然而，它有一定的成本，需要提前仔细考虑。归根结底，这不是免费的午餐。要使其正常工作，需要对算法和系统要求有良好的理解。
- en: '*Originally published at* [*https://thanakornp.com*](https://thanakornp.com/geospatial-index-in-practice)*.*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发布于* [*https://thanakornp.com*](https://thanakornp.com/geospatial-index-in-practice)*。*'
