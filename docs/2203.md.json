["```py\nimport sys\nprint(sys.version) # displays the version of python installed\n```", "```py\n# Import the dataset for review as a DataFrame\ndf = pd.read_csv(\"../input/water-potability/water_potability.csv\")\n\n# Review the first five observations\ndf.head()\n```", "```py\n# Display information about the DataFrame - contains memory details\ndf.info(memory_usage=\"deep\")\n```", "```py\n# Shape of the DataFrame - shows tuple of (#Rows, #Columns)\nprint(df.shape)\n# Find the number of rows within a DataFrame\nprint(len(df))\n# Extracting information from the shape tuple\nprint(f'Number of rows: {df.shape[0]} \\nNumber of columns: {df.shape[1]}')\n```", "```py\n# Review the high level summary details for each variable\ndf.describe()\n```", "```py\n# Transpose the summary details - easier to review larger number of features\ndf.desribe().T\n```", "```py\n# Magic function in jupyter to display docstring\ndf.describe?\n```", "```py\n# Check for the missing values by column\ndf.isnull().sum()\n```", "```py\n# Proportion of missing values by column\ndef isnull_prop(df):\n    total_rows = df.shape[0]\n    missing_val_dict = {}\n    for col in df.columns:\n        missing_val_dict[col] = [df[col].isnull().sum(), (df[col].isnull().sum() / total_rows)]\n    return missing_val_dict\n\n# Apply the missing value method\nnull_dict = isnull_prop(df)\nprint(null_dict.items())\n```", "```py\n# Create a dataframe of the missing value information\ndf_missing = pd.DataFrame.from_dict(null_dict, \n                                    orient=\"index\", \n                                    columns=['missing', 'miss_percent'])\ndf_missing\n```", "```py\n# Display missing values using a heatmap to understand any patterns\nplt.figure(figsize=(15,8))\nsns.heatmap(df.isnull());\n```", "```py\n# set the histogram, mean and median\nsns.displot(df[\"ph\"], kde=False)\nplt.axvline(x=df.ph.mean(), linewidth=3, color='g', label=\"mean\", alpha=0.5)\nplt.axvline(x=df.ph.median(), linewidth=3, color='y', label=\"median\", alpha=0.5)\n\n# set title, legends and labels\nplt.xlabel(\"ph\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution of ph\", size=14)\nplt.legend([\"mean\", \"median\"]);\n\nprint(f'Mean pH value {df.ph.mean()} \n        \\n Median pH value {df.ph.median()} \n        \\n Min pH value {df.ph.min()} \n        \\n Max pH value {df.ph.max()}')\n```"]