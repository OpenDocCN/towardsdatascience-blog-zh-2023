- en: 'Advanced Python: Dot Operator'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 Python：点运算符
- en: 原文：[https://towardsdatascience.com/advanced-python-dot-operator-809d0eb5d841?source=collection_archive---------0-----------------------#2023-10-20](https://towardsdatascience.com/advanced-python-dot-operator-809d0eb5d841?source=collection_archive---------0-----------------------#2023-10-20)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/advanced-python-dot-operator-809d0eb5d841?source=collection_archive---------0-----------------------#2023-10-20](https://towardsdatascience.com/advanced-python-dot-operator-809d0eb5d841?source=collection_archive---------0-----------------------#2023-10-20)
- en: The operator that enables the object-oriented paradigm in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这个运算符使 Python 中的面向对象范式成为可能
- en: '[](https://medium.com/@ilija.lazarevic?source=post_page-----809d0eb5d841--------------------------------)[![Ilija
    Lazarevic](../Images/4a0d84af6d8fa97705ee35444d319b07.png)](https://medium.com/@ilija.lazarevic?source=post_page-----809d0eb5d841--------------------------------)[](https://towardsdatascience.com/?source=post_page-----809d0eb5d841--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----809d0eb5d841--------------------------------)
    [Ilija Lazarevic](https://medium.com/@ilija.lazarevic?source=post_page-----809d0eb5d841--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ilija.lazarevic?source=post_page-----809d0eb5d841--------------------------------)[![Ilija
    Lazarevic](../Images/4a0d84af6d8fa97705ee35444d319b07.png)](https://medium.com/@ilija.lazarevic?source=post_page-----809d0eb5d841--------------------------------)[](https://towardsdatascience.com/?source=post_page-----809d0eb5d841--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----809d0eb5d841--------------------------------)
    [Ilija Lazarevic](https://medium.com/@ilija.lazarevic?source=post_page-----809d0eb5d841--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe73ea2eae8e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-dot-operator-809d0eb5d841&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=post_page-e73ea2eae8e6----809d0eb5d841---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----809d0eb5d841--------------------------------)
    ·13 min read·Oct 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F809d0eb5d841&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-dot-operator-809d0eb5d841&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=-----809d0eb5d841---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe73ea2eae8e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-dot-operator-809d0eb5d841&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=post_page-e73ea2eae8e6----809d0eb5d841---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----809d0eb5d841--------------------------------)
    ·13 分钟阅读·2023年10月20日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F809d0eb5d841&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-dot-operator-809d0eb5d841&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=-----809d0eb5d841---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F809d0eb5d841&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-dot-operator-809d0eb5d841&source=-----809d0eb5d841---------------------bookmark_footer-----------)![](../Images/841c96a738ad1ab6ce24a4c82866859e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F809d0eb5d841&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-dot-operator-809d0eb5d841&source=-----809d0eb5d841---------------------bookmark_footer-----------)![](../Images/841c96a738ad1ab6ce24a4c82866859e.png)'
- en: Dot operator is one of the pillars of object oriented paradigm in Python. Photo
    by [Madeline Pere](https://unsplash.com/@mpere?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/r37QcATSbD4?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 点运算符是 Python 中面向对象范式的支柱之一。照片来源：[Madeline Pere](https://unsplash.com/@mpere?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    在 [Unsplash](https://unsplash.com/photos/r37QcATSbD4?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: This time, I will write about something seemingly trivial. It is the “dot operator.”
    Most of you have already used this operator many times, without knowing or questioning
    what happens behind the scenes. And in comparison to the concept of [metaclasses](https://medium.com/towards-data-science/advanced-python-metaclasses-e32d46e0ebe3)
    that I talked about last time, this one is a bit more usable for daily tasks.
    Just kidding, you are practically using it each time you use Python for something
    more than a “Hello World.” This is precisely the reason why I thought you might
    want to dig deeper, and I want to be your guide. Let’s start the journey!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我将讨论一个看似微不足道的东西，那就是“点操作符”。你们中的大多数人已经多次使用了这个操作符，却不知道或未曾质疑其背后的工作原理。与我上次讨论的[元类](https://medium.com/towards-data-science/advanced-python-metaclasses-e32d46e0ebe3)概念相比，这个操作符在日常任务中稍显实用。开个玩笑，你在使用Python做更多事情时几乎每次都会用到它。这正是我认为你们可能想深入了解的原因，我愿意做你的向导。让我们开始这段旅程吧！
- en: 'I will start with one trivial question: “What is a “dot operator?”'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从一个简单的问题开始：“什么是‘点操作符’？”
- en: 'Here is an example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Well, this is surely a “Hello World” example, but I can hardly imagine someone
    starting to teach you Python exactly like this. Anyway, the “dot operator” is
    the “.” part of the`hello.upper()`. Let’s try giving a more verbose example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这确实是一个“Hello World”示例，但我很难想象有人会像这样开始教你Python。无论如何，“点操作符”就是`hello.upper()`中的“.”部分。让我们试着给出一个更详细的例子：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are a few places where you use the “dot operator”. To make it easier
    to see the bigger picture, let’s summarize the way you use it in two cases:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你在几个地方使用“点操作符”。为了更清楚地了解整体情况，让我们总结一下你在两个情况下如何使用它：
- en: use it to access attributes of an object or class,
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用它来访问对象或类的属性，
- en: use it to access functions defined in the class definition.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用它来访问在类定义中定义的函数。
- en: 'Obviously, we have all of this in our example, and this seems intuitive and
    as expected. But there is more to this than meets the eye! Take a closer look
    at this example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们的例子中都包含了这些内容，看起来直观且符合预期。但事情远不止于此！仔细看看这个例子：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Somehow, `p.shout` is not referencing the same function as `Person.shout` although
    it should. At least you would expect it, right? And `p.shout` is not even a function!
    Let’s go over the next example before we start discussing what is happening:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不知为何，`p.shout` 并未引用与 `Person.shout` 相同的函数，尽管它应该如此。至少你会期待它这样做，对吧？而且 `p.shout`
    甚至不是一个函数！在我们开始讨论发生了什么之前，让我们先看下一个例子：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For those unaware of the `vars` function, it returns the dictionary that holds
    attributes of an instance. If you run `vars(Person)` you will get a bit different
    response, but you will get the picture. There will be both attributes with their
    values and variables that hold class function definitions. There is obviously
    a difference between an object that is an instance of a class and the class object
    itself, and so there will be a difference in `vars` function response for these
    two.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不了解 `vars` 函数的人，它返回一个字典，该字典包含实例的属性。如果你运行 `vars(Person)`，你会得到一个稍有不同的响应，但你会明白整体情况。字典中会包含属性及其值，还有持有类函数定义的变量。显然，类的实例对象与类对象本身存在差异，因此这两个对象的
    `vars` 函数响应也会有所不同。
- en: Now, it is perfectly valid to additionally define a function after an object
    is created. This is the line `p.shout_v2 = shout_v2`. This does introduce another
    key-value pair in the instance dictionary. Seemingly everything is good, and we
    will be able to run smoothly, as if `shout_v2` were specified in the class definition.
    But alas! Something is truly wrong. We are not able to call it the same way as
    we did the `shout` method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在对象创建之后额外定义一个函数是完全有效的。这就是 `p.shout_v2 = shout_v2` 这一行。这确实在实例字典中引入了另一个键值对。看起来一切正常，我们能够顺利运行，就像
    `shout_v2` 是在类定义中指定的那样。但可惜的是！确实出现了问题。我们无法像调用 `shout` 方法那样调用它。
- en: Astute readers should have noticed by now how carefully I use the terms *function*
    and *method*. After all, there is a difference in how Python prints these as well.
    Take a look at the previous examples. `shout` is a method, `shout_v2` is a function.
    At least if we look at these from the perspective of the object `p`. If we look
    at these from the perspective of the `Person` class, `shout` is a function, and
    `shout_v2` doesn’t exist. It is defined only in the object’s dictionary (namespace).
    So if you are really going to rely on object-oriented paradigms and mechanisms
    like encapsulation, inheritance, abstraction, and polymorphism, you will not define
    functions on objects, like `p` is in our example. You will make sure you are defining
    functions in a class definition (body).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 聪明的读者现在应该已经注意到我如何谨慎地使用*函数*和*方法*这两个术语。毕竟，Python 打印这些术语的方式也是不同的。看看之前的例子。`shout`
    是一个方法，而 `shout_v2` 是一个函数。至少从对象 `p` 的角度来看是这样的。如果从 `Person` 类的角度来看，`shout` 是一个函数，而
    `shout_v2` 并不存在。它仅在对象的字典（命名空间）中定义。因此，如果你真的要依赖面向对象的范式和机制，比如封装、继承、抽象和多态，你不会在对象上定义函数，就像
    `p` 在我们的例子中那样。你会确保在类定义（主体）中定义函数。
- en: So why are these two different, and why do we get the error? Well, the fastest
    answer is because of how the “dot operator” works. The longer answer is that there
    is a mechanism behind the scenes that does the (attribute) name resolution for
    you. This mechanism consists of `__getattribute__` and `__getattr__` dunder methods.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这两者为什么不同，我们为什么会得到错误？最快的答案是因为“点操作符”的工作方式。较长的答案是背后有一个机制为你进行（属性）名称解析。这个机制由 `__getattribute__`
    和 `__getattr__` 双下划线方法组成。
- en: Getting the attributes
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取属性
- en: 'At first, this will probably sound unintuitive and rather unnecessarily complicated,
    but bear with me. Essentially, there are two scenarios that can happen when you
    try to access an attribute of an object in Python: either there is an attribute
    or there is not. Simply. In both cases, `__getattribute__` is called, or to make
    it easier for you, it is **being called always**. This method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这可能听起来不直观而且复杂，但请耐心点。从本质上讲，当你尝试访问 Python 对象的属性时，有两种情况会发生：要么存在属性，要么不存在。简单来说。在这两种情况下，`__getattribute__`
    会被调用，或者为了让你更容易理解，它**总是会被调用**。这个方法：
- en: returns computed attribute value,
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回计算出的属性值，
- en: explicitly calls `__getattr__`, or
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式调用 `__getattr__`，或者
- en: raises `AttributeError` in which case `__getattr__` is called by default.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这种情况下会引发 `AttributeError`，此时会默认调用 `__getattr__`。
- en: If you want to intercept the mechanism that resolves attribute names, this is
    the place to hijack. You just have to be careful, because it is really easy to
    end up in an infinite loop or to mess up the whole mechanism of name resolution,
    especially in the scenario of object-oriented inheritance. It is not as simple
    as it may appear.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想拦截解析属性名称的机制，这就是可以劫持的地方。你只需要小心，因为很容易陷入无限循环或搞砸整个名称解析机制，特别是在面向对象的继承场景中。这并不像看起来那样简单。
- en: 'If you want to handle cases where there is no attribute in the object’s dictionary,
    you can straight away implement the `__getattr__` method. This one gets called
    when `__getattribute__` fails to access the attribute name. If this method can’t
    find an attribute or deal with a missing one after all, it raises an `AttributeError`
    exception as well. Here is how you can play around with these:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想处理对象字典中没有属性的情况，你可以直接实现 `__getattr__` 方法。当 `__getattribute__` 无法访问属性名称时，这个方法会被调用。如果这个方法也找不到属性或处理不了缺失的属性，它也会引发
    `AttributeError` 异常。你可以这样玩弄这些方法：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is very important to call `super().__getattribute__(...)` in your implementation
    of `__getattribute__`, and the reason, like I wrote earlier, is that there is
    a lot going on in Python’s default implementation. And this is exactly the place
    where “dot operator” gets its magic from. Well, at least half of the magic is
    there. The other part is in how a class object is created after interpreting the
    class definition.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在你实现 `__getattribute__` 时调用 `super().__getattribute__(...)` 是非常重要的，原因正如我之前所写的，因为
    Python 的默认实现中发生了很多事情。这正是“点操作符”魔力的来源之一。好吧，至少有一半的魔力在这里。另一部分在于类定义被解释后类对象的创建方式。
- en: Class functions
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类函数
- en: 'The term I use here is purposeful. Class does contain only *functions*, and
    we saw this in one of the first examples:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的术语是有目的的。类确实仅包含*函数*，我们在最初的例子中已经看到这一点。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When looking from the object’s perspective, these are called methods. The process
    of transforming the function of a class into a method of an object is called bounding,
    and the result is what you see in the previous example, a *bound method*. What
    makes it *bound*, and to what? Well, once you have an instance of a class and
    start calling its methods, you are, in essence, passing the object reference to
    each of its methods. Remember the `self` argument? So, how does this happen, and
    who does it?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从对象的角度来看，这些被称为方法。将类的函数转换为对象的方法的过程叫做绑定，结果就是你在前面的示例中看到的一个*绑定方法*。是什么让它变成*绑定*，以及绑定到什么？好吧，一旦你有了一个类的实例并开始调用它的方法，实际上你是在将对象引用传递给每个方法。记住`self`参数吗？那么，这个过程是怎么发生的，谁来做呢？
- en: Well, the first part happens when the class body is being interpreted. There
    are quite a few things that happen in this process, like defining a class namespace,
    adding attribute values to it, defining (class) functions, and binding them to
    their names. Now, as these functions are being defined, they are being wrapped
    in a way. Wrapped in an object conceptually called ***descriptor***. This *descriptor*
    is enabling this change in the identification and behavior of class functions
    that we saw previously. I’ll make sure to write a separate blog post about *descriptors*,
    but for now, know that this object is an instance of a class that implements a
    predefined set of dunder methods. This is also called a *Protocol*. Once these
    are implemented, it is said that objects of this class *follow* the specific protocol
    and therefore behave in the expected way. There is a difference between the **data**
    and **non-data** descriptors. Former implements `__get__`, `__set__`, and/or `__delete__`
    dunder methods. Later, implement only the `__get__` method. Anyway, each function
    in a class ends up being wrapped in a so-called **non-data** descriptor.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，第一部分发生在类体被解释的时候。这个过程中发生了很多事情，比如定义类的命名空间、向其中添加属性值、定义（类）函数，并将它们绑定到它们的名称上。现在，当这些函数被定义时，它们会以某种方式被包装。以一种名为***描述符***的对象进行包装。这个*描述符*使得我们之前看到的类函数的标识和行为发生变化。我会确保单独写一篇关于*描述符*的博客文章，但现在，请知道这个对象是一个实现了一组预定义的双下划线方法的类的实例。这也被称为*协议*。一旦这些实现了，就可以说这个类的对象*遵循*特定的协议，从而表现出预期的行为。**数据**描述符和**非数据**描述符之间有区别。前者实现了`__get__`、`__set__`和/或`__delete__`双下划线方法。后者只实现了`__get__`方法。无论如何，类中的每个函数最终都会被包装在所谓的**非数据**描述符中。
- en: 'Once you initiate attribute lookup by using the “dot operator”, the `__getattribute__`
    method is called, and the whole process of name resolution starts. This process
    stops when resolution is successful, and it goes something like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使用“点操作符”启动属性查找，`__getattribute__`方法就会被调用，整个名称解析过程开始。这一过程在解析成功时停止，流程大致如下：
- en: return the data descriptor that has the desired name (class level), or
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回具有所需名称的数据描述符（类级别），或者
- en: return instance attribute with the desired name (instance level), or
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回具有所需名称的实例属性（实例级别），或者
- en: return non-data descriptor with the desired name (class level), or
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回具有所需名称的非数据描述符（类级别），或者
- en: return class attribute with the desired name (class level), or
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回具有所需名称的类属性（类级别），或者
- en: raise `AttributeError` that essentially calls the `__getattr__` method.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引发`AttributeError`，实际上调用了`__getattr__`方法。
- en: My initial idea was to leave you with a reference to the official documentation
    on how this mechanism is implemented, at least a Python mockup, for learning purposes,
    but I have decided to help you out with that part as well. However, I highly advise
    you to go and read the whole page of official documentation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初的想法是给你提供一个关于这个机制如何实现的官方文档的参考，至少是一个 Python 模拟版，供学习使用，但我决定也帮助你完成这部分内容。然而，我强烈建议你去阅读官方文档的整页内容。
- en: 'So, in the next code snippet, I’ll put some of the descriptions in the comments,
    so it is easier to read and understand the code. Here it is:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在下一个代码片段中，我会在注释中放一些描述，以便更容易阅读和理解代码。这里是：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Keep in mind that this implementation is in Python for the sake of documenting
    and describing the logic implemented in the `__getattribute__` method. In reality,
    it is implemented in C. Just by looking at it, you can imagine that it is better
    not to play around with re-implementing the whole thing. The best way is to try
    doing part of the resolution by yourself and then fall back on the CPython implementation
    with `return super().__getattribute__(name)` as shown in the example above.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个实现是用 Python 编写的，目的是为了记录和描述在 `__getattribute__` 方法中实现的逻辑。实际上，它是用 C 实现的。仅通过查看代码，你可以想象最好不要尝试重新实现整个过程。最好的方法是自己尝试解决部分问题，然后参考
    CPython 实现中的 `return super().__getattribute__(name)`，如上例所示。
- en: 'The important thing here is that each class function (which is an object) gets
    wrapped in a non-data descriptor (which is a `function` class object), and this
    means that this wrapper object has the `__get__` dunder method defined. What this
    dunder method does is return a new callable (think of it as a new function), where
    the first argument is the reference to the object on which we are performing the
    “dot operator”. I said to think about it as a new function since it is a *callable*.
    In essence, it is another object called `MethodType`. Check it out:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里重要的是，每个类函数（它是一个对象）都被包装在一个非数据描述符（即 `function` 类对象）中，这意味着这个包装对象定义了 `__get__`
    双下划线方法。这个双下划线方法的作用是返回一个新的可调用对象（可以把它看作是一个新函数），其中第一个参数是我们正在执行“点操作符”的对象的引用。我说可以把它看作是一个新函数，因为它是
    *可调用* 的。本质上，它是另一个名为 `MethodType` 的对象。看看这个：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: One interesting thing certainly is this `function` class. This one is exactly
    the wrapper object that defines the `__get__` method. However, once we try to
    access it as method `shout` by “dot operator”, `__getattribute__` iterates through
    the list and stops at the third case (return non-data descriptor). This `__get__`
    method contains additional logic that takes the object’s reference and creates
    `MethodType` with reference to the `function` and object.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的事情确实是这个 `function` 类。这个类正是定义 `__get__` 方法的包装对象。然而，一旦我们尝试通过“点操作符”访问它作为方法
    `shout`，`__getattribute__` 会遍历列表并停在第三种情况（返回非数据描述符）。这个 `__get__` 方法包含了额外的逻辑，它获取对象的引用并创建一个
    `MethodType`，其中包含对 `function` 和对象的引用。
- en: 'Here is the official documentation mockup:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是官方文档的模型：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Disregard the difference in class name. I have been using `function` instead
    of `Function` to make it easier for grasping, but I’ll use the `Function` name
    from now on so it follows the official documentation explanation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略类名的不同。我一直使用 `function` 而不是 `Function` 以便于理解，但从现在开始我会使用 `Function` 名称，以便它与官方文档的解释一致。
- en: 'Anyway, just by looking at this mockup, it may be enough to understand how
    this `function` class fits the picture, but let me add a couple of lines of code
    that are missing, which will probably make things even clearer. I’ll add two more
    class functions in this example, namely:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，仅通过查看这个模型，可能已经足以理解 `function` 类如何融入整体，但让我再添加几行缺失的代码，这将可能使事情更加清晰。我将在这个示例中再添加两个类函数，即：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Why did I add these functions? Well, now you can easily imagine how the `Function`
    object plays its role in this whole scenario of method bounding. This new `Function`
    object stores the original function as an attribute. This object is also *callable*
    which means that we can invoke it as a function. In that case, it works just as
    the function it wraps. Remember, everything in Python is an object, even functions.
    And `MethodType` ‘wraps’ `Function` object along with the reference to the object
    on which we are calling method (in our case `shout`).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我为什么添加这些函数？实际上，你现在可以很容易地想象 `Function` 对象在这个方法绑定的整个场景中所扮演的角色。这个新的 `Function`
    对象将原始函数作为一个属性存储。这个对象也是 *可调用* 的，这意味着我们可以像调用函数一样调用它。在这种情况下，它的工作方式和它包装的函数一样。记住，Python
    中的一切都是对象，包括函数。而 `MethodType` ‘包装’ 了 `Function` 对象以及对我们调用方法的对象的引用（在我们的例子中是 `shout`）。
- en: 'How does `MethodType` do this? Well, it keeps these references and implements
    a callable protocol. Here is the official documentation mockup for the `MethodType`
    class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`MethodType` 是如何做到这一点的？实际上，它保持这些引用并实现了一个可调用协议。这里是 `MethodType` 类的官方文档模型：'
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Again, for brevity’s sake, `func` ends up referencing our initial class function
    (`shout`), `obj` references instance (`p`), and then we have arguments and keyword
    arguments that are passed along. `self` in the `shout` declaration ends up referencing
    this ‘obj’, which is essentially `p` in our example.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，`func` 最终引用了我们最初的类函数（`shout`），`obj` 引用了实例（`p`），然后我们还有传递的参数和关键字参数。`self`
    在 `shout` 声明中最终引用了这个‘obj’，在我们的示例中本质上是 `p`。
- en: 'In the end, it should be clear why we make a distinction between functions
    and methods and how functions get bound once they are accessed through objects
    by using the “dot operator”. If you think about it, we would be perfectly okay
    with invoking class functions in the following way:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，应该清楚为什么我们区分函数和方法，以及函数如何在通过对象使用“点操作符”访问时被绑定。如果你考虑一下，我们完全可以通过以下方式调用类函数：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Yet, this really is not the advised way and is just plain ugly. Usually, you
    will not have to do this in your code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这真的不是推荐的方法，只是纯粹的丑陋。通常，你在代码中不需要这样做。
- en: So, before I conclude, I want to go over a couple of examples of attribute resolution
    just to make this easier to grasp. Let’s use the previous example and figure out
    how the dot operator works.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在总结之前，我想回顾几个属性解析的例子，以便更容易理解。让我们使用之前的例子，搞清楚点操作符是如何工作的。
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Conclusion
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: If reading this article in one go was not an easy endeavor, do not fret! The
    whole mechanism behind the “dot operator” is not something you grasp that easily.
    There are at least two reasons, one being how `__getattribute__` does the name
    resolution, and the other being how class functions get wrapped upon class body
    interpretation. So, make sure you go over the article a couple of times and play
    with the examples. Experimenting is really what drove me to start a series called
    Advanced Python.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一次性阅读这篇文章不是一件容易的事情，请不要担心！“点操作符”背后的整个机制并不容易理解。至少有两个原因，一个是 `__getattribute__`
    如何进行名称解析，另一个是类函数如何在类体解释时被封装。所以，确保你多读几遍这篇文章，并尝试例子。实验正是促使我开始一个叫做高级 Python 的系列的原因。
- en: One more thing! If you like the way I explain things and there is something
    advanced in the world of Python that you would like to read about, shout out!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事！如果你喜欢我讲解的方式，并且有 Python 世界中的一些高级内容你想了解，喊一声！
- en: 'Previous articles in Advanced Python series:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 高级 Python 系列的上一篇文章：
- en: '[](/advanced-python-functions-3be6810f92d1?source=post_page-----809d0eb5d841--------------------------------)
    [## Advanced Python: Functions'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[高级 Python 函数](https://towardsdatascience.com/advanced-python-functions-3be6810f92d1?source=post_page-----809d0eb5d841--------------------------------)
    [## 高级 Python：函数'
- en: After reading the title, you probably ask yourself something along the lines
    of, “Functions in Python are an advanced…
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读完标题后，你可能会问自己类似“Python 中的函数是高级的……”这样的问题。
- en: 'towardsdatascience.com](/advanced-python-functions-3be6810f92d1?source=post_page-----809d0eb5d841--------------------------------)
    [](/advanced-python-metaclasses-e32d46e0ebe3?source=post_page-----809d0eb5d841--------------------------------)
    [## Advanced Python: Metaclasses'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[高级 Python 函数](https://towardsdatascience.com/advanced-python-functions-3be6810f92d1?source=post_page-----809d0eb5d841--------------------------------)
    [高级 Python 元类](https://towardsdatascience.com/advanced-python-metaclasses-e32d46e0ebe3?source=post_page-----809d0eb5d841--------------------------------)
    [## 高级 Python：元类'
- en: A brief introduction to Python class object and how it is created
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 Python 类对象及其创建方法的简要介绍
- en: towardsdatascience.com](/advanced-python-metaclasses-e32d46e0ebe3?source=post_page-----809d0eb5d841--------------------------------)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[高级 Python 元类](https://towardsdatascience.com/advanced-python-metaclasses-e32d46e0ebe3?source=post_page-----809d0eb5d841--------------------------------)'
- en: References
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[Invocation from an instance](https://docs.python.org/3/howto/descriptor.html#invocation-from-an-instance)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从实例中调用](https://docs.python.org/3/howto/descriptor.html#invocation-from-an-instance)'
- en: '[Functions and methods](https://docs.python.org/3/howto/descriptor.html#id25)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[函数和方法](https://docs.python.org/3/howto/descriptor.html#id25)'
