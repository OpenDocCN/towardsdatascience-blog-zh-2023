["```py\n(epl_10seasons\n .rename(columns=lambda df_: df_.strip())\n .rename(columns=lambda df_: re.sub('\\W+|[!,*)@#%(&$_?.^]', '_', df_))\n .pipe(lambda df_: df_.astype({column: 'int8' for column in (df_.select_dtypes(\"integer\").columns.tolist())}))\n .pipe(lambda df_: df_.astype({column: 'category' for column in (df_.select_dtypes(\"object\").columns.tolist()[:-1])}))\n .assign(match_date=lambda df_: pd.to_datetime(df_.match_date, infer_datetime_format=True))\n .assign(home_team=lambda df_: np.where((df_.home_team == \"Arsenal\"), \"The Gunners\", df_.home_team),\n         away_team=lambda df_: np.where((df_.away_team == \"Arsenal\"), \"The Gunners\", df_.away_team),\n         month=lambda df_: df_.match_date.dt.month_name())\n .query('home_team == \"The Gunners\"')\n)\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\n%matplotlib inline\n\npd.options.plotting.backend = 'plotly'\n\ndf = pd.DataFrame({\"concerns\": [\"Engine power is less than expected\", \n                                \"Tires make excessive noise while driving\",\n                                \"Engine makes abnormal/excessive noise\",\n                                \"Seat material concerns\",\n                                \"Excessive wind noise\",\n                                \"Hesitation or delay when shifting\",\n                                \"Bluetooth system has poor sound quality\",\n                                \"Steering system/wheel has too much play\",\n                                \"Bluetooth system is difficult to use\",\n                                \"Front seat audio/entertainment/navigation controls\"\n                                 ],\n                   \"concerns per 1,000\": [12.9, 12.3, 11.6, 11.6, 11.0, 10.3, 10.0, 8.8, 8.6, 8.2],}, \n                  index=list(range(0,10,1)))\n```", "```py\n(df\n .plot\n .barh()\n)\n```", "```py\npd.options.plotting.backend = 'plotly'\n```", "```py\n(df\n .plot\n .barh()\n .set_xlabel(\"concerns per 1,000\")\n)\n```", "```py\n(df\n .plot\n .barh(xlabel=\"Concerns per 1,000\", ylabel=\"Concerns\", title=\"Top 10 design concerns\")\n)\n```", "```py\nGRAY1, GRAY2, GRAY3 = '#231F20', '#414040', '#555655'\nGRAY4, GRAY5, GRAY6 = '#646369', '#76787B', '#828282'\nGRAY7, GRAY8, GRAY9, GRAY10 = '#929497', '#A6A6A5', '#BFBEBE', '#FFFFFF'\nBLUE1, BLUE2, BLUE3, BLUE4, BLUE5 = '#25436C', '#174A7E', '#4A81BF', '#94B2D7', '#94AFC5'\nBLUE6, BLUE7 = '#92CDDD', '#2E869D'\nRED1, RED2, RED3 = '#B14D4A', '#C3514E', '#E6BAB7'\nGREEN1, GREEN2 = '#0C8040', '#9ABB59'\nORANGE1, ORANGE2, ORANGE3 = '#F36721', '#F79747', '#FAC090'\n\ngray_palette = [GRAY1, GRAY2, GRAY3, GRAY4, GRAY5, GRAY6, GRAY7, GRAY8, GRAY9, GRAY10]\nblue_palette = [BLUE1, BLUE2, BLUE3, BLUE4, BLUE5, BLUE6, BLUE7]\nred_palette = [RED1, RED2, RED3]\ngreen_palette = [GREEN1, GREEN2]\norange_palette = [ORANGE1, ORANGE2, ORANGE3]\n\nsns.set_style(\"darkgrid\")\nsns.set_palette(gray_palette)\nsns.palplot(sns.color_palette())\n```", "```py\ncolor = np.array(['rgb(255,255,255)']*df.shape[0])\ncolor[df\n      .set_index(\"concerns\", drop=True)\n      .iloc[::-1]\n      [\"concerns per 1,000\"]>=10] = red_palette[0]\ncolor[df\n      .set_index(\"concerns\", drop=True)\n      .iloc[::-1]\n      [\"concerns per 1,000\"]<10] = gray_palette[4]\n```", "```py\n(df\n .set_index(\"concerns\", drop=True)\n .iloc[::-1]\n .plot\n .barh()\n .update_traces(marker=dict(color=color.tolist()))\n)\n```", "```py\n(df\n .set_index(\"concerns\", drop=True)\n .iloc[::-1]\n .plot\n .barh()\n .update_traces(marker=dict(color=color.tolist()))\n .update_layout(template=\"plotly_white\",\n                title=dict(text=\"<b>Top 10 design concerns</b> <br><sup><i>concerns per 1,000</i></sup>\", \n                           font_size=30,\n                           font_color=gray_palette[4]),\n                margin=dict(l=50,\n                            r=50,\n                            b=50,\n                            t=100,\n                            pad=20),\n                width=1000, \n                height=800, \n                showlegend=False, \n                #annotations=annotations\n               )\n)\n```", "```py\n(df\n .set_index(\"concerns\", drop=True)\n .iloc[::-1]\n .plot\n .barh()\n .update_traces(marker=dict(color=color.tolist()))\n .update_layout(template=\"plotly_white\",\n                title=dict(text=\"<b>Top 10 design concerns</b> <br><sup><i>concerns per 1,000</i></sup>\", \n                           font_size=30,\n                           font_color=gray_palette[4]),\n                margin=dict(l=50,\n                            r=50,\n                            b=50,\n                            t=100,\n                            pad=20),\n                width=1000, \n                height=800, \n                showlegend=False, \n                #annotations=annotations\n               )\n .update_xaxes(title_standoff=10,\n               showgrid=False,\n               visible=False,\n               tickfont=dict(\n                        family='Arial',\n                        size=16,\n                        color=gray_palette[4],),\n               title=\"\")\n .update_yaxes(title_standoff=10,\n               tickfont=dict(\n                        family='Arial',\n                        size=16,\n                        color=gray_palette[4],),\n               title=\"\")\n)\n```", "```py\nannotations = []\n\ny_s = np.round(df[\"concerns per 1,000\"], decimals=2)\n\n# Adding data labels\nfor yd, xd in zip(y_s, df.concerns):\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', \n                            yref='y1',\n                            y=xd, x=yd - 1,\n                            text=str(yd) + '%',\n                            font=dict(family='Arial', size=16,\n                                      color=gray_palette[-1]),\n                            showarrow=False))\n\n# Adding Source Annotations\nannotations.append(dict(xref='paper', \n                        yref='paper',\n                        x=-0.72, \n                        y=-0.050,\n                        text='Source: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco'\n                             '<br>laboris nisi ut aliquip ex ea commodo consequat.',\n                        font=dict(family='Arial', size=10, color=gray_palette[4]),\n                        showarrow=False,\n                        align='left'))\n```", "```py\n(df\n .set_index(\"concerns\", drop=True)\n .iloc[::-1]\n .plot\n .barh()\n .update_traces(marker=dict(color=color.tolist()))\n .update_layout(template=\"plotly_white\",\n                title=dict(text=\"<b>Top 10 design concerns</b> <br><sup><i>concerns per 1,000</i></sup>\", \n                           font_size=30,\n                           font_color=gray_palette[4]),\n                margin=dict(l=50,\n                            r=50,\n                            b=50,\n                            t=100,\n                            pad=20),\n                width=1000, \n                height=800, \n                showlegend=False, \n                annotations=annotations\n               )\n .update_xaxes(title_standoff=10,\n               showgrid=False,\n               visible=False,\n               tickfont=dict(\n                        family='Arial',\n                        size=16,\n                        color=gray_palette[4],),\n               title=\"\")\n .update_yaxes(title_standoff=10,\n               tickfont=dict(\n                        family='Arial',\n                        size=16,\n                        color=gray_palette[4],),\n               title=\"\")\n)\n```", "```py\npd.options.plotting.backend = 'matplotlib'\n\ndf = pd.DataFrame({\"Received\": [160,184,241,149,180,161,132,202,160,139,149,177],\n                   \"Processed\":[160,184,237,148,181,150,123,156,126,104,124,140]},\n                  index=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n\n(df\n .plot\n .line()\n);\n```", "```py\npd.options.plotting.backend = 'plotly'\n\n(df\n .plot(x=df.index, \n       y=df.Received,\n       labels=dict(index=\"\", value=\"Number of tickets\"),)\n)\n```", "```py\n(df\n .plot(x=df.index, \n       y=df.Received,\n       labels=dict(index=\"\", value=\"Number of tickets\"),)\n .update_traces(go.Scatter(mode='lines+markers+text', \n                           line={\"color\": gray_palette[4], \"width\":4},\n                           marker=dict(size=12)),)\n)\n```", "```py\n(df\n .plot(x=df.index, \n       y=df.Received,\n       labels=dict(index=\"\", value=\"Number of tickets\"),)\n .update_traces(go.Scatter(mode='lines+markers+text', \n                           line={\"color\": gray_palette[4], \"width\":4},\n                           marker=dict(size=12)),)\n .add_traces(go.Scatter(x=df.index, #Add Processed col\n                        y=df.Processed, \n                        mode=\"lines+markers+text\", \n                        line={\"color\": blue_palette[0], \"width\":4},\n                        marker=dict(size=12)))\n)\n```", "```py\n(df\n .plot(x=df.index, \n       y=df.Received,\n       labels=dict(index=\"\", value=\"Number of tickets\"),)\n .update_traces(go.Scatter(mode='lines+markers+text', \n                           line={\"color\": gray_palette[4], \"width\":4},\n                           marker=dict(size=12)),)\n .add_traces(go.Scatter(x=df.index, #Add Processed col\n                        y=df.Processed, \n                        mode=\"lines+markers+text\", \n                        line={\"color\": blue_palette[0], \"width\":4},\n                        marker=dict(size=12)))\n .add_traces(go.Scatter(x=[\"May\", \"May\"], #Add vline\n                        y=[0,230], \n                        fill=\"toself\", \n                        mode=\"lines\", \n                        line_width=0.5, \n                        line_color= gray_palette[4]))\n)\n```", "```py\n(df\n .plot(x=df.index, \n       y=df.Received,\n       labels=dict(index=\"\", value=\"Number of tickets\"),)\n .update_traces(go.Scatter(mode='lines+markers+text', \n                           line={\"color\": gray_palette[4], \"width\":4},\n                           marker=dict(size=12)),)\n .add_traces(go.Scatter(x=df.index, #Add Processed col\n                        y=df.Processed, \n                        mode=\"lines+markers+text\", \n                        line={\"color\": blue_palette[0], \"width\":4},\n                        marker=dict(size=12)))\n .add_traces(go.Scatter(x=[\"May\", \"May\"], #Add vline\n                        y=[0,230], \n                        fill=\"toself\", \n                        mode=\"lines\", \n                        line_width=0.5, \n                        line_color= gray_palette[4]))\n .update_layout(template=\"plotly_white\",\n                title=dict(text=\"<b>Please approve the hire of 2 FTEs</b> <br><sup>to backfill those who quit in the past year</sup> <br>Ticket volume over time <br><br><br>\", \n                           font_size=30,),\n                margin=dict(l=50,\n                            r=50,\n                            b=100,\n                            t=200,),\n                width=900, \n                height=700, \n                yaxis_range=[0, 300], \n                showlegend=False, \n                #annotations=right_annotations,\n                )\n)\n```", "```py\n(df\n .plot(x=df.index, \n       y=df.Received,\n       labels=dict(index=\"\", value=\"Number of tickets\"),)\n .update_traces(go.Scatter(mode='lines+markers+text', \n                           line={\"color\": gray_palette[4], \"width\":4},\n                           marker=dict(size=12)),)\n .add_traces(go.Scatter(x=df.index, #Add Processed col\n                        y=df.Processed, \n                        mode=\"lines+markers+text\", \n                        line={\"color\": blue_palette[0], \"width\":4},\n                        marker=dict(size=12)))\n .add_traces(go.Scatter(x=[\"May\", \"May\"], #Add vline\n                        y=[0,230], \n                        fill=\"toself\", \n                        mode=\"lines\", \n                        line_width=0.5, \n                        line_color= gray_palette[4]))\n .update_layout(template=\"plotly_white\",\n                title=dict(text=\"<b>Please approve the hire of 2 FTEs</b> <br><sup>to backfill those who quit in the past year</sup> <br>Ticket volume over time <br><br><br>\", \n                           font_size=30,),\n                margin=dict(l=50,\n                            r=50,\n                            b=100,\n                            t=200,),\n                width=900, \n                height=700, \n                yaxis_range=[0, 300], \n                showlegend=False, \n                #annotations=right_annotations,\n                )\n .update_xaxes(dict(range=[0, 12],\n                    showline=True,\n                    showgrid=False,\n                    linecolor=gray_palette[4],\n                    linewidth=2,\n                    ticks='',\n                    tickfont=dict(\n                        family='Arial',\n                        size=13,\n                        color=gray_palette[4],\n                    ),\n ))\n .update_yaxes(dict(showline=True,\n                    showticklabels=True,\n                    showgrid=False,\n                    ticks='outside',\n                    linecolor=gray_palette[4],\n                    linewidth=2,\n                    tickfont=dict(\n                        family='Arial',\n                        size=13,\n                        color=gray_palette[4],\n                    ),\n                    title_text=\"Number of tickets\"\n ))\n)\n```", "```py\ny_data = df.to_numpy()\ncolors = [gray_palette[3], blue_palette[0]]\nlabels = df.columns.to_list()\n\nright_annotations = []\n\n# Adding labels to line\nfor y_trace, label, color in zip(y_data[-1], labels, colors):\n\n    right_annotations.append(dict(xref='paper', \n                                  x=0.95, \n                                  y=y_trace,\n                                  xanchor='left', \n                                  yanchor='middle',\n                                  text=label,\n                                  font=dict(family='Arial',size=16,color=color),\n                                  showarrow=False))\n\n# Adding labels to scatter point\nscatter_annotations = []\n\ny_received = [each for each in df.Received]\ny_processed  = [float(each) for each in df.Processed]\nx_index = [each for each in df.index]\ny_r = np.round(y_received)\ny_p = np.rint(y_processed)\n\nfor ydn, yd, xd in zip(y_r[-5:], y_p[-5:], x_index[-5:]):\n\n    scatter_annotations.append(dict(xref='x2 domain', \n                                    yref='y2 domain', \n                                    y=ydn, \n                                    x=xd, \n                                    text='{:,}'.format(ydn),\n                                    font=dict(family='Arial',size=16,color=gray_palette[4]),\n                                    showarrow=False,\n                                    xanchor='center', \n                                    yanchor='bottom',\n                                    ))\n\n    scatter_annotations.append(dict(xref='x2 domain', \n                                    yref='y2 domain', \n                                    y=yd, \n                                    x=xd, \n                                    text='{:,}'.format(yd),\n                                    font=dict(family='Arial',size=16,color=blue_palette[0]),\n                                    showarrow=False,\n                                    xanchor='center', \n                                    yanchor='top',\n                                    ))\n```", "```py\n(df\n .plot(x=df.index, \n       y=df.Received,\n       labels=dict(index=\"\", value=\"Number of tickets\"),)\n .update_traces(go.Scatter(mode='lines+markers+text', \n                           line={\"color\": gray_palette[4], \"width\":4},\n                           marker=dict(size=12)),)\n .add_traces(go.Scatter(x=df.index, #Add Processed col\n                        y=df.Processed, \n                        mode=\"lines+markers+text\", \n                        line={\"color\": blue_palette[0], \"width\":4},\n                        marker=dict(size=12)))\n .add_traces(go.Scatter(x=[\"May\", \"May\"], #Add vline\n                        y=[0,230], \n                        fill=\"toself\", \n                        mode=\"lines\", \n                        line_width=0.5, \n                        line_color= gray_palette[4]))\n .update_layout(template=\"plotly_white\",\n                title=dict(text=\"<b>Please approve the hire of 2 FTEs</b> <br><sup>to backfill those who quit in the past year</sup> <br>Ticket volume over time <br><br><br>\", \n                           font_size=30,),\n                margin=dict(l=50,\n                            r=50,\n                            b=100,\n                            t=200,),\n                width=900, \n                height=700, \n                yaxis_range=[0, 300], \n                showlegend=False, \n                annotations=right_annotations,\n                )\n .update_layout(annotations=scatter_annotations * 2)\n .update_xaxes(dict(range=[0, 12],\n                    showline=True,\n                    showgrid=False,\n                    linecolor=gray_palette[4],\n                    linewidth=2,\n                    ticks='',\n                    tickfont=dict(\n                        family='Arial',\n                        size=13,\n                        color=gray_palette[4],\n                    ),\n ))\n .update_yaxes(dict(showline=True,\n                    showticklabels=True,\n                    showgrid=False,\n                    ticks='outside',\n                    linecolor=gray_palette[4],\n                    linewidth=2,\n                    tickfont=dict(\n                        family='Arial',\n                        size=13,\n                        color=gray_palette[4],\n                    ),\n                    title_text=\"Number of tickets\"\n ))\n .add_annotation(dict(text=\"<b>2 employees quit in May.</b> We nearly kept up with incoming volume <br>in the following two months, but fell behind with the increase in Aug <br>and haven't been able to catch up since.\",\n                      font_size=18,\n                      align=\"left\",\n                      x=7.5,\n                      y=265,\n                      showarrow=False))\n .add_annotation(dict(xref='paper', \n                        yref='paper',\n                        x=0.5, \n                        y=-0.15,\n                        text='Source: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco'\n                             '<br>laboris nisi ut aliquip ex ea commodo consequat.',\n                        font=dict(family='Arial',\n                                  size=10,\n                                  color='rgb(150,150,150)'),\n                        showarrow=False,\n                        align='left'))\n .update_annotations(yshift=0)\n .show()\n)\n```", "```py\n(go\n .Figure() # Create an empty figure\n .add_annotation(\n    x=0.0,\n    y=1,\n    text='Pilot program was a success',\n    showarrow=False,\n    font={'size': 36, 'color': 'white'},\n    bgcolor=gray_palette[-3],\n    bordercolor='gray',\n    borderwidth=0,\n    xref='paper',\n    yref='paper',\n    xanchor='left',\n    yanchor='top',\n    align='left',\n    ax=0,\n    ay=-10\n )\n .add_annotation(\n    x=-1.0,  # X-coordinate of the text position\n    y=3.0,  # Y-coordinate of the text position\n    text=\"After the pilot program,\",  # The text content\n    showarrow=False,  # Hide the arrow\n    font=dict(size=20, \n              color=blue_palette[1]),  # Customize the font size\n    xanchor='left',\n    yanchor='top',\n    align='left',\n )\n .add_annotation(\n    x=-1.0,  # X-coordinate of the text position\n    y=1.6,  # Y-coordinate of the text position\n    text=\"<b>68%</b>\",  # The text content\n    showarrow=False,  # Hide the arrow\n    font=dict(size=160, \n              color=blue_palette[1]),  # Customize the font size\n    xanchor='left',\n    align='left',\n )\n .add_annotation(\n    x=-1.0,  # X-coordinate of the text position\n    y=0.2,  # Y-coordinate of the text position\n    text=\"<b>of kids expressed interest towards science,</b>\",  # The text content\n    showarrow=False,  # Hide the arrow\n    font=dict(size=20, \n              color=blue_palette[1]),  # Customize the font size\n    xanchor='left',\n    align='left',\n )\n .add_annotation(\n    x=-1.0,  # X-coordinate of the text position\n    y=-0.2,  # Y-coordinate of the text position\n    text=\"compared to 44% going into the program.\",  # The text content\n    showarrow=False,  # Hide the arrow\n    font=dict(size=20, \n              color=gray_palette[-3]),  # Customize the font size\n    xanchor='left',\n    align='left',\n )\n .add_annotation(\n    x=-1.0,  # X-coordinate of the text position\n    y=-0.7,  # Y-coordinate of the text position\n    text='Based on survey of 100 students conducted '\n         'before and after pilot program '\n         '(100% response rate on both surveys).',  # The text content\n    showarrow=False,  # Hide the arrow\n    font=dict(size=10.5, \n              color=gray_palette[-3]),  # Customize the font size\n    xanchor='left',\n    align='left',\n )\n .update_layout(\n    xaxis=dict(visible=False),  # Hide x-axis\n    yaxis=dict(visible=False),  # Hide y-axis\n    margin=dict(l=0,\n                r=0,\n                b=0,\n                t=0,\n                pad=0),\n    font=dict(size=26, \n              color=gray_palette[-3]),  # Customize the font size\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n )\n .show()\n)\n```"]