["```py\na = np.arange(12).reshape(4, 3)\nmeans_columns = a.mean(axis=0)\nres = a - means_columns\nprint('original array', a, sep='\\n')\nprint('.. column means', a.mean(axis=0), sep='\\n')\nprint('demeaned array', res, sep='\\n')\nprint('.. column means', res.mean(axis=0), sep='\\n')\n```", "```py\noriginal array\n[[ 0  1  2]\n [ 3  4  5]\n [ 6  7  8]\n [ 9 10 11]]\n.. column means\n[4.5 5.5 6.5]\ndemeaned array\n[[-4.5 -4.5 -4.5]\n [-1.5 -1.5 -1.5]\n [ 1.5  1.5  1.5]\n [ 4.5  4.5  4.5]]\n.. column means\n[0\\. 0\\. 0.]\n```", "```py\nmeans_columns_bc = np.broadcast_to(means_columns, a.shape)\nprint(means_columns_bc)\nprint('base', means_columns_bc.base, sep='\\n')\nprint('strides', means_columns_bc.strides, sep='\\n')\n```", "```py\n[[4.5 5.5 6.5]\n [4.5 5.5 6.5]\n [4.5 5.5 6.5]\n [4.5 5.5 6.5]]\nbase\n[4.5 5.5 6.5]\nstrides\n(0, 8)\n```", "```py\nmeans_rows = a.mean(axis=1)\nres = a - means_rows.reshape(-1, 1) # or res = a - means_rows[:, np.newaxis]\nprint('original array', a, sep='\\n')\nprint('.. row means', a.mean(axis=1), sep='\\n')\nprint('demeaned array', res, sep='\\n')\nprint('.. row means', res.mean(axis=1), sep='\\n')\n```", "```py\noriginal array\n[[ 0  1  2]\n [ 3  4  5]\n [ 6  7  8]\n [ 9 10 11]]\n.. row means\n[ 1\\.  4\\.  7\\. 10.]\ndemeaned array\n[[-1\\.  0\\.  1.]\n [-1\\.  0\\.  1.]\n [-1\\.  0\\.  1.]\n [-1\\.  0\\.  1.]]\n.. row means\n[0\\. 0\\. 0\\. 0.]\n```", "```py\na = np.arange(4)\nb = np.arange(3)\nres = a[:, np.newaxis] + b[np.newaxis, :]\nprint('result array', res, sep='\\n')\n```", "```py\nresult array\n[[0 1 2]\n [1 2 3]\n [2 3 4]\n [3 4 5]]\n```", "```py\nnp.array_equal(np.add.outer(a, b), a[:, np.newaxis] + b)\n```", "```py\ndef demean_axis(arr, axis=1):\n    means = arr.mean(axis)\n    indexer = [slice(None)]*arr.ndim\n    indexer[axis] = np.newaxis\n    return arr - means[tuple(indexer)]\n\narr = np.linspace(1, 12, 24*3).reshape(6,4,3)\nres = demean_axis(arr, axis=1)\n```", "```py\nimport matplotlib\nmatplotlib.use(\"TkAgg\")\nimport matplotlib.pyplot as plt\nimport io\nimport numpy as np\nfrom PIL import Image\n# read in the original image (png)\nwith open('landscape_water_lake_nature_trees.png', mode='rb') as f:\n    image_orig = f.read()\nf = io.BytesIO(image_orig)\nim = Image.open(f)\nimage_orig = np.array(im)/255.\nprint('shape of original image', image_orig.shape, sep='\\n')\n\n# convert RGBA to RGB (pillow could be used for this)\nbackground = (1., 1., 1.)\nrow = image_orig.shape[0]\ncol = image_orig.shape[1]\nimage_color = np.zeros( (row, col, 3), dtype='float32' )\nr, g, b, a = image_orig[:,:,0], image_orig[:,:,1], image_orig[:,:,2], image_orig[:,:,3]\na = np.asarray( a, dtype='float32' )\nR, G, B = background\nimage_color[:,:,0] = r * a + (1.0 - a) * R\nimage_color[:,:,1] = g * a + (1.0 - a) * G\nimage_color[:,:,2] = b * a + (1.0 - a) * B\nprint('shape of image after RGBA to RGB conversion', image_color.shape, sep='\\n')\n\n# convert to greyscale\nconv = np.array([0.2126, 0.7152, 0.0722])\n# --- broadcasting !!! ---\nimage_grey = (image_color[:,:,:3]*conv).sum(axis=2)\n# --- broadcasting !!! ---\nprint('shape of image after conversion to greyscale', image_grey.shape, sep='\\n')\n\n# plot the image\nfig = plt.figure(figsize=(8, 4))\naxs = fig.subplots(1, 2)\naxs[0].axis('off')\naxs[0].set_title('RGB image')\naxs[0].imshow(image_color)\naxs[1].axis('off')\naxs[1].set_title('greyscale image')\naxs[1].imshow(image_grey, cmap='gray')\naxs[0].annotate('',xy=(0.52,0.5),xytext=(0.50,0.5),arrowprops=dict(facecolor='black'),\n             xycoords='figure fraction', textcoords='figure fraction')\nfig.savefig('RGBA_to_greyscale.png')\n```", "```py\n# set one row, same value to all columns\na = np.ones((4,3))\na[0] = -1\n# array([[-1., -1., -1.],\n#        [ 1.,  1.,  1.],\n#        [ 1.,  1.,  1.],\n#        [ 1.,  1.,  1.]])\n\n# set one column, same value to all rows\na = np.ones((4,3))\na[:, 0] = -1\n# array([[-1.,  1.,  1.],\n#        [-1.,  1.,  1.],\n#        [-1.,  1.,  1.],\n#        [-1.,  1.,  1.]])\n\n# set all rows, same value to all elements\na = np.ones((4,3))\na[:] = -1\n# array([[-1., -1., -1.],\n#        [-1., -1., -1.],\n#        [-1., -1., -1.],\n#        [-1., -1., -1.]])\n\n# set all rows, different value to each column\na = np.ones((4,3))\nb = np.array([-1, -2, -3])\na[:] = b\n# array([[-1., -2., -3.],\n#        [-1., -2., -3.],\n#        [-1., -2., -3.],\n#        [-1., -2., -3.]])\n\n# set all rows, different value to each row\na = np.ones((4,3))\nb = np.array([-1, -2, -3, -4])\nb = b[:, np.newaxis]\na[:] = b\n# array([[-1., -1., -1.],\n#        [-2., -2., -2.],\n#        [-3., -3., -3.],\n#        [-4., -4., -4.]])\n\n# set some rows, different value to each column\na = np.ones((4,3))\nb = np.array([-1, -2, -3])\na[:3] = b\n# array([[-1., -2., -3.],\n#        [-1., -2., -3.],\n#        [-1., -2., -3.],\n#        [ 1.,  1.,  1.]])\n\n# set some rows, different value to each row\na = np.ones((4,3))\nb = np.array([-1, -2, -3])\na[:3] = b[:, np.newaxis]\n# array([[-1., -1., -1.],\n#        [-2., -2., -2.],\n#        [-3., -3., -3.],\n#        [ 1.,  1.,  1.]])\n\n# set some columns, different value to each column\na = np.ones((4,3))\nb = np.array([-1, -2])\na[:,:2] = b\n# array([[-1., -2.,  1.],\n#        [-1., -2.,  1.],\n#        [-1., -2.,  1.],\n#        [-1., -2.,  1.]])\n\n# set some columns, different value to each row\na = np.ones((4,3))\nb = np.array([-1, -2, -3, -4])\na[:,:2] = b[:, np.newaxis]\n# array([[-1., -1.,  1.],\n#        [-2., -2.,  1.],\n#        [-3., -3.,  1.],\n#        [-4., -4.,  1.]])\n```"]