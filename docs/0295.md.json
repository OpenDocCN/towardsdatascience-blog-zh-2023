["```py\ndef run_campaign(biased=False):\n    true_mu1treated , true_mu2treated = 20 , 40\n    n, p , obs = 1, .5 , 2000 # number of trials, probability of each trial, \n                              # number of observations\n    store = np.random.binomial(n, p, obs)+1\n    df = pd.DataFrame({'store':store})\n    probtreat1 = .5\n\n    if biased:\n        probtreat2 = .9\n    else:\n        probtreat2 = .5\n\n    treat = lambda x: int(np.random.binomial(1, probtreat1, 1))\\\n                   if x==1 else int(np.random.binomial(1, probtreat2, 1)) \n\n    spend = lambda x: float(np.random.normal(true_mu1treated, 3,1))\\\n                   if (x[0]==1 and x[1]==1)\\\n                   else ( float(np.random.normal(true_mu2treated, 3,1) ) )\n\n    df['treated'] = df['store'].apply(treat)\n    df['spend'] = df[['store','treated']].apply(tuple,1).apply(spend)\n\n    simple_value_treated = np.mean(df.query('treated==1')['spend'])\n\n    return [simple_value_treated]\n```", "```py\nsim = 1000\nvalues = Parallel(n_jobs=4)(delayed(run_campaign)() for _ in tqdm(range(sim)))\nresults_df = pd.DataFrame(values, columns=['simple_treat'])\n```", "```py\nsim = 1000\nvalues = Parallel(n_jobs=4)(delayed(run_campaign)(biased=True) for _ in tqdm(range(sim)) )\nresults_df = pd.DataFrame(values, columns=['simple_treat'])\n```", "```py\ndef run_campaign2():\n    true_mu1treated , true_mu2treated = 20, 40\n    n, p , obs = 1, .5 , 2000 # number of trials, probability of each trial, \n                              # number of observations\n    store = np.random.binomial(n, p, obs)+1\n    df = pd.DataFrame({'store':store})\n\n    probtreat1 = .5\n    probtreat2 = .9\n\n    treat = lambda x: int(np.random.binomial(1, probtreat1, 1)) \n                   if x==1 else int(np.random.binomial(1, probtreat2, 1)) \n\n    spend = lambda x: float(np.random.normal(true_mu1treated, 3, 1)) \n                   if (x[0]==1 and x[1]==1) \n                   else ( float(np.random.normal(true_mu2treated, 3, 1) ) )\n\n    df['treated'] = df['store'].apply(treat)\n    df['spend'] = df[['store','treated']].apply(tuple,1).apply(spend)\n\n    simple_value_treated = np.mean(df.query('treated==1')['spend'])\n\n    prob1 = df.query('store==1').shape[0]/df.shape[0]\n    prob2 = df.query('store==2').shape[0]/df.shape[0]\n\n    est_mu1treated = np.mean(df.query('treated==1 & store==1')['spend'])\n    est_mu2treated = np.mean(df.query('treated==1 & store==2')['spend'])\n\n    weighted_value_treated = prob1*est_mu1treated + prob2*est_mu2treated\n\n    return [simple_value_treated, weighted_value_treated]\n```", "```py\nsim = 1000\nvalues = Parallel(n_jobs=4)(delayed(run_campaign2)() for _ in tqdm(range(sim)) )\nresults_df = pd.DataFrame(values, columns=['simple_treat','weighted_treat'])\n```", "```py\ndef run_campaign3():\n    true_mu1treated , true_mu2treated = 20, 40\n    n, p , obs = 1, .5 , 2000 # number of trials, probability of each trial, \n                              # number of observations\n    store = np.random.binomial(n, p, obs)+1\n    df = pd.DataFrame({'store':store})\n\n    probtreat1 = .5\n    probtreat2 = .9\n\n    treat = lambda x: int(np.random.binomial(1, probtreat1, 1)) \n                   if x==1 else int(np.random.binomial(1, probtreat2, 1)) \n\n    spend = lambda x: float(np.random.normal(true_mu1treated, 3, 1)) \n                   if (x[0]==1 and x[1]==1) \n                   else ( float(np.random.normal(true_mu2treated, 3, 1) ) )\n\n    df['treated'] = df['store'].apply(treat)\n    df['spend'] = df[['store','treated']].apply(tuple,1).apply(spend)\n\n    prob1 = df.query('store==1').shape[0]/df.shape[0]\n    prob2 = df.query('store==2').shape[0]/df.shape[0]\n\n    simple_value_treated = np.mean(df.query('treated==1')['spend'])\n\n    #estimate propensity score:\n    ps1 = df.query('treated==1 & store==1').shape[0]/df.query('store==1').shape[0]\n    ps2 = df.query('treated==1 & store==2').shape[0]/df.query('store==2').shape[0]\n    df['ps'] = pd.Series(np.where(df['store']==1, ps1, ps2))\n    ipw_value_treated = np.mean( (df['spend']*df['treated'])/df['ps'])\n\n    return [simple_value_treated, ipw_value_treated]\n```", "```py\nsim=1000\nvalues = Parallel(n_jobs=4)(delayed(run_campaign3)() for _ in tqdm(range(sim)) )\nresults_df = pd.DataFrame(values, columns=['simple_treat','ipw_treat'])\n```", "```py\ndef run_campaign4():\n    true_mu1treated , true_mu2treated = 20, 40\n    true_mu1control , true_mu2control = 10, 10\n    n, p , obs = 1, .5 , 2000 # number of trials, probability of each trial, number of observations\n    store = np.random.binomial(n, p, obs)+1\n    df = pd.DataFrame({'store':store})\n\n    probtreat1 = .5\n    probtreat2 = .9\n\n    treat = lambda x: int(np.random.binomial(1, probtreat1, 1)) \n                   if x==1 else int(np.random.binomial(1, probtreat2, 1)) \n\n    spend = lambda x: float(np.random.normal(true_mu1treated, 3, 1)) \n                   if (x[0]==1 and x[1]==1) \n                   else ( float(np.random.normal(true_mu2treated, 3, 1) ) \n                   if  (x[0]==2 and x[1]==1)   \n                                                                                              else (float(np.random.normal(true_mu1control, 2, 1) ) if  (x[0]==1 and x[1]==0)  \n                                                                                    else  float(np.random.normal(true_mu2control, 2, 1))     )\n    df['treated'] = df['store'].apply(treat)\n    df['spend'] = df[['store','treated']].apply(tuple,1).apply(spend)\n\n    prob1 = df.query('store==1').shape[0]/df.shape[0]\n    prob2 = df.query('store==2').shape[0]/df.shape[0]\n\n    simple_value_treated = np.mean(df.query('treated==1')['spend'])\n    simple_value_control = np.mean(df.query('treated==0')['spend'])\n\n    simple_tau = simple_value_treated - simple_value_control\n\n    est_mu1treated = np.mean(df.query('treated==1 & store==1')['spend'])\n    est_mu2treated = np.mean(df.query('treated==1 & store==2')['spend'])\n\n    weighted_value_treated = prob1*est_mu1treated + prob2*est_mu2treated\n\n    est_mu1control = np.mean(df.query('treated==0 & store==1')['spend'])\n    est_mu2control = np.mean(df.query('treated==0 & store==2')['spend'])\n\n    weighted_value_control = prob1*est_mu1control + prob2*est_mu2control\n    weighted_tau = weighted_value_treated - weighted_value_control\n\n    #estimate propensity score:\n    ps1 = df.query('treated==1 & store==1').shape[0]/df.query('store==1').shape[0]\n    ps2 = df.query('treated==1 & store==2').shape[0]/df.query('store==2').shape[0]\n\n    df['ps'] = pd.Series(np.where(df['store']==1, ps1, ps2))\n\n    ipw_value_treated = np.mean( (df['spend']*df['treated'])/df['ps'])\n    ipw_value_control = np.mean( (df['spend']*(1-df['treated']) )/(1-df['ps'] ))\n    ipw_tau = ipw_value_treated - ipw_value_control\n\n    return [simple_tau, weighted_tau, ipw_tau]\n```", "```py\nsim=1000\nvalues = Parallel(n_jobs=4)(delayed(run_campaign4)() for _ in tqdm(range(sim)) )\nresults_df = pd.DataFrame(values, columns=['simple_tau','weighted_tau','ipw_tau'])\n```"]