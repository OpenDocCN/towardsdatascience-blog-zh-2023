["```py\nprint( clip.available_models() )\nmodel, preprocess = clip.load(\"RN50\")\n```", "```py\npreprocessed_text = clip.tokenize(['no glasses','glasses'])\ntext_embedding = model.encode_text(preprocessed_text)\n```", "```py\npreprocessed_image = preprocess(Image.open(image_path)).unsqueeze(0)\nimage_embedding = model.encode_image(preprocessed_image)\n```", "```py\nwith torch.no_grad():\n    image_logits, _ = model(preprocessed_image, preprocessed_text)\nproba_list = image_logits.softmax(dim=-1).cpu().numpy()[0]\n```", "```py\ny_pred = np.argmax(proba_list)\ny_pred_proba = np.max(proba_list)\ny_pred_token = ['no glasses','glasses'][y_pred_idx]\n```", "```py\nclass CustomClassifier:\n\n    def __init__(self, prompts):\n\n        self.class_prompts = prompts\n        self.device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        self.model, self.preprocess = clip.load(\"RN50\", device=self.device) # \"ViT-B/32\"\n        self.preprocessed_text = clip.tokenize(self.class_prompts).to(self.device)\n        print(f'Classes Prompts: {self.class_prompts}')\n\n    def classify(self, image_path, y_true = None):\n\n        preprocessed_image = self.preprocess(Image.open(image_path)).unsqueeze(0).to(self.device)\n\n        with torch.no_grad():\n            image_logits, _ = self.model(preprocessed_image, self.preprocessed_text)\n            proba_list = image_logits.softmax(dim=-1).cpu().numpy()[0]\n\n        y_pred = np.argmax(proba_list)\n        y_pred_proba = np.max(proba_list)\n        y_pred_token = self.class_prompts[y_pred]\n        results = pd.DataFrame([{'image': image_path, 'y_true': y_true, 'y_pred': y_pred, 'y_pred_token': y_pred_token, 'proba': y_pred_proba}])\n        return results\n\n    def validate (self, dataset, max_images):\n\n        df_results = pd.DataFrame()\n        for sample in tqdm(range(max_images)):\n            image_path, class_idx = dataset[sample]\n            image_results = self.classify(image_path, class_idx)\n            df_results = pd.concat([df_results, image_results])\n\n        accuracy = accuracy_score(df_results.y_true, df_results.y_pred)\n        print(f'Accuracy - {round(accuracy,2)}')\n        return accuracy, df_results\n```", "```py\nprompts = ['no glasses','glasses']\nimage_results = CustomClassifier(prompts).classify(image_path)\n```", "```py\naccuracy, df_results = CustomClassifier(prompts).validate(glasses_dataset, max_images =100)\n```", "```py\nprompts = ['photo of a man with no glasses', 'photo of a man with glasses']\naccuracy, df_results = CustomClassifier(prompts).validate(glasses_dataset, max_images =100)\n```"]