- en: How to Keep Track of Data Versions Using Versatile Data Kit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-keep-track-of-data-versions-using-versatile-data-kit-f1916f18737e?source=collection_archive---------9-----------------------#2023-05-03](https://towardsdatascience.com/how-to-keep-track-of-data-versions-using-versatile-data-kit-f1916f18737e?source=collection_archive---------9-----------------------#2023-05-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Engineering
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn about slow change dimensions (SCD) and how to implement SCD Type 2 in
    VDK
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://alod83.medium.com/?source=post_page-----f1916f18737e--------------------------------)[![Angelica
    Lo Duca](../Images/45aa2e2e504bb3af6d3b8009dc6f030e.png)](https://alod83.medium.com/?source=post_page-----f1916f18737e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f1916f18737e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f1916f18737e--------------------------------)
    [Angelica Lo Duca](https://alod83.medium.com/?source=post_page-----f1916f18737e--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8bc34d63aee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-keep-track-of-data-versions-using-versatile-data-kit-f1916f18737e&user=Angelica+Lo+Duca&userId=f8bc34d63aee&source=post_page-f8bc34d63aee----f1916f18737e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f1916f18737e--------------------------------)
    ·7 min read·May 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff1916f18737e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-keep-track-of-data-versions-using-versatile-data-kit-f1916f18737e&user=Angelica+Lo+Duca&userId=f8bc34d63aee&source=-----f1916f18737e---------------------clap_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff1916f18737e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-keep-track-of-data-versions-using-versatile-data-kit-f1916f18737e&source=-----f1916f18737e---------------------bookmark_footer-----------)![](../Images/1bc2772471e53b03eea61d2d5f4cbff2.png)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Joshua Sortino](https://unsplash.com/@sortino?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Data is the backbone of any organization, and in today’s fast-paced world, it
    is crucial to keep track of its versions. As businesses grow and evolve, data
    undergoes numerous changes that can quickly become overwhelming without a streamlined
    system. Technology has come to our rescue with various tools that help us manage
    data efficiently.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: One such tool is the [Versatile Data Kit](https://github.com/vmware/versatile-data-kit)
    (VDK), which offers a comprehensive solution for controlling your data versioning
    needs. **VDK helps you easily perform complex operations, such as data ingestion
    and processing from different sources, using SQL or Python**. You can use VDK
    to build **data lakes** and ingest raw data extracted from different sources,
    including structured, semi-structured, and unstructured data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will explore how VDK can make your life easier by providing
    an intuitive interface and robust features to keep track of all changes made to
    your critical business information.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: What are Slowly Changing Dimensions (SCD)?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SCD Types
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement SCD Type 2 in VDK.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Note for images****: all the images are by the author, except where explicitly
    stated.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: What are Slowly Changing Dimensions (SCD)?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a data warehouse, a *dimension* is a structure that categorizes facts and
    measures to enable users to answer business questions. Commonly used dimensions
    are people, products, place, and time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Slowly changing dimensions** (SCD) help you track changes in dimension data
    over time. They store and manage current and historical data in a data warehouse.
    The word *slowly* means that they change slowly over time rather than regularly.
    Examples of SCD are address, email, salary, etc.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: SCDs are important for tracking how data changes over time. We can use them
    to track customers, products, or other information that might change over time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Using SCD makes it easier to track changes in data and keep historical records
    of how the data has changed. This can be valuable for analyzing trends or answering
    questions about how specific data has evolved.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: SCD Types
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three types of SCD: type 1, type 2, and type 3\. To illustrate how
    each SCD type works, we use the following example. Consider the following customer
    dimension table:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c91932ad2ac4e033722a1cde2b8686dc.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — The customer dimension table of the example
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: What happens if John Smith changes his phone number to **555-5668**?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: SCD Type 1
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This SCD type does not track changes in data; new data overwrites the old data.
    This type is appropriate when the data history is unimportant, and you need to
    know the current state of the data. Type 1 is the simplest and most common type
    of SCD.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Consider the example in Figure 1\. In SCD Type 1, the new phone number replaces
    the old one, and there is no record of the previous one, as shown in the table
    below.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f97ac854a4c7965ac6e5b4211415e0f1.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — The customer dimension table after applying SCD Type 1
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: SCD Type 2
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This type tracks historical changes by adding new records to the dimension table.
    The old data is still available but marked as superseded by the new. Each record
    contains a unique identifier, a start date, and an end date.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Consider the example in Figure 1 again. In SCD Type 2, a new record is created
    with the new telephone number, unique identifier, and start date, while the previous
    record has an end date. The start date represents the date the new record takes
    effect, and the end date represents the date the old record becomes obsolete.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9c34df9f1448f4ff8bd41d14c19da0e.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: Figure 3— The customer dimension table after applying SCD Type 2
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: SCD Type 3
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This type tracks only the most recent change by adding a column to the dimension
    table to hold the new value. Use this type when tracking the complete history
    of changes is not necessary.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the example in Figure 1 again. In SCD Type 3, the record is updated
    with two new columns: `new_phone_number`, to hold the new value, and `effective_date`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3d7ef32a0a38af3e7bc48ac4edd9ba1.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Figure 4— The customer dimension table after applying SCD Type 3
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: How to implement SCD Type 2 in VDK
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VDK is a very powerful framework released by VMware as open source. Use VDK
    to build a data lake and merge multiple sources. If you are new to VDK, read its
    [official documentation](https://github.com/vmware/versatile-data-kit) or this
    [introductory article](/an-overview-of-versatile-data-kit-a812cfb26de7).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: VDK supports SCD Type 1 and Type 2\. To implement an SCD in VDK, use the [SQL
    processing template](https://github.com/vmware/versatile-data-kit/wiki/SQL-Data-Processing-templates-examples#sql-processing-templates).
    An SQL processing template is a data loading template, a conceptual structure
    provided by VDK. According to the VDK official documentation,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: a data loading template consumes a source_view located in a source_schema and
    load the source data in a target_table located in a target_schema (extracted from
    VDK official documentation).
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In practice, the template simplifies how data is extracted from a source and
    loaded into a target table. VDK provides the SQL data processing templates for
    Impala and Trino databases.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate how VDK manages SCD Type 2, consider the following scenario.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa97ba7f239a36475234878d917e9520.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — How to use VDK to manage SCD Type 2
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Starting from the left, there is the *Data Source* (e.g. the customer dimension
    table of Figure 1), which must define a source schema and a source view. *VDK*
    ingests data from the *Data Source.* To manage SCD Type 2, VDK uses the *SCD2
    Template*, an SQL processing template. Through the *vdk-trino plugin*, VDK stores
    data using a *Trino DB* into a *Data Lake*. The *Data Lake* must contain the *Target
    Schema*, which is the schema that will store SCD Type 2.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'VDK implements the *SCD2 Template* as an additional method of the Input Job.
    The following code shows how to use the *SCD2 Template*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code is extracted directly from the [VDK documentation](https://github.com/vmware/versatile-data-kit/tree/main/projects/vdk-plugins/vdk-trino/src/vdk/plugin/trino/templates/load/dimension/scd2)
    and adapted to the example in Figure 3, so refer to it for further details. In
    practice, the template receives the source and target schemas as input and other
    parameters, such as the column ID and the columns to track.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to VDK, you can easily manage SCD in your database! Refer to the [VDK
    documentation](https://github.com/vmware/versatile-data-kit/wiki/SQL-Data-Processing-templates-examples#versioned-strategy--slowly-changing-dimension-type-2)
    for a complete and detailed example.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'To explain how the SCD2 template works, consider the customer dimension table
    again. The previous code tracked only the `phone_number` column, so if there is
    a change in that column, the system stores the change in a new row, as shown in
    the following figure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4cf276dd035a2886cc1dece36e90f1b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — If a tracked column changes, the system stores it as a new row.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if an untracked column changes, the system overwrites it, as shown
    in the figure below:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4187434ed068f17fe006a078ba9a71a3.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Figure 7— If an untracked column changes, the system overwrites it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned what SCD is and how to implement it in
    VDK.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: SCD is important for organizations that want to manage and analyze their data
    efficiently. By identifying which attributes of a dataset change rarely or infrequently,
    you can streamline your data processing and storage and reduce the likelihood
    of errors or inconsistencies in their analytics.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: To easily identify and manage SCD, you can use VDK, which helps you automate
    the changes to slow-changing attributes over time.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Overall, SCD may seem like a minor detail in the grand scheme of big data management.
    Still, it can significantly impact the accuracy and efficiency of analytics processes.
    By leveraging tools like VDK, you can stay ahead of the curve and maximize the
    value of your data assets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: You may also be interested in…
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many related topics you might be interested in:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: How to configure VDK to work with Trino DB
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A c[omplete example](/from-raw-data-to-a-cleaned-database-a-deep-dive-into-versatile-data-kit-ab5fd992a02e)
    using the Versatile Data Kit and Trino DB.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: How to build a web app using VDK
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [step-by-step tutorial](/how-to-build-a-web-app-with-data-ingested-through-versatile-data-kit-ddae43b5f62d)
    on how to build a web application, combining the Streamlit Python library and
    Versatile Data Kit.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: How to use VDK plugins
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [step-by-step tutorial](/how-to-create-a-data-formatting-plugin-in-vdk-dc5f1c7d206d)
    on manipulating a table in your data lake by writing a VDK custom plugin.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: How to handle missing values using
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [tutorial](/handling-missing-values-in-versatile-data-kit-bb4f2a907b9c) on
    how to build data pipelines using VDK to handle missing values
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Just one more word…
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Don’t forget to join the VDK Slack channel to stay updated about VDK!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记加入 VDK Slack 频道，以获取关于 VDK 的最新信息！
- en: Join the [CNCF Slack workspace](https://communityinviter.com/apps/cloud-native/cncf).
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入 [CNCF Slack 工作空间](https://communityinviter.com/apps/cloud-native/cncf)。
- en: Join the [#versatile-data-kit](https://cloud-native.slack.com/archives/C033PSLKCPR)
    channel.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入 [#versatile-data-kit](https://cloud-native.slack.com/archives/C033PSLKCPR)
    频道。
