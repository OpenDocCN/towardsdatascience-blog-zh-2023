- en: A complete word processing with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-complete-word-processing-with-python-ac4e66963f40?source=collection_archive---------3-----------------------#2023-01-25](https://towardsdatascience.com/a-complete-word-processing-with-python-ac4e66963f40?source=collection_archive---------3-----------------------#2023-01-25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reading pdf file, utilizing regular expressions, exporting to Excel and Word
    document, and converting it back to pdf format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----ac4e66963f40---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)
    ·10 min read·Jan 25, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fac4e66963f40&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----ac4e66963f40---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fac4e66963f40&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&source=-----ac4e66963f40---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Recently for a self-study project, I had to go through an 800-page pdf file.
    Each chapter of the file contained a common set of questions. And I needed the
    answers to specific questions in each chapter. Now it’d take me forever to go
    through each page of the document and assess the answers to those questions. I
    was wondering if there was a quick way to scan through each page and extract only
    the relevant information for me from the file. I figured out a Pythonic way to
    do the same. In this post, I am going to share how I was able to read the pdf
    file, extract only relevant information from each chapter of the file, export
    the data into Excel and editable word document, and convert it back to pdf format
    using different packages in Python. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3bf54b24b975348fe2d8e7e5323a019e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Dariusz Sankowski](https://unsplash.com/@dariuszsankowski) on [Unsplash](https://unsplash.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than an 800-page document, I am going to use a [4-page pdf file](https://github.com/hbshrestha/Data_Analytics/blob/main/data/autobook.pdf)
    as an example. During the final days of high school, my classmates passed around
    a diary called “Auto book” as a memory to collect the interests, preferences,
    and contact information of each other. The pdf file I am using contains dummy
    information about four imaginary friends named Ram, Shyam, Hari, and Shiva. The
    file contains information such as their nationality, date of birth, preferences
    (food, fruit, sports, player, movie, actor), favorite quotes, aim, views on politics,
    and message to the world.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e027625bd6d4b8bdcf07485c7c51df36.png)'
  prefs: []
  type: TYPE_IMG
- en: Pdf file called autobook.pdf containing information and messages from four friends.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: It’d be easy to extract information for few friends directly by copy pasting
    from the pdf file. However, if the pdf file is large, it’d be much more efficient
    and precise to do it using Python. Following sections show how it is done step
    by step in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Reading pdf document using PyPDF2 or PyMuPDF packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**a. Read the first page using PyPDF2**'
  prefs: []
  type: TYPE_NORMAL
- en: To read the text in the pdf file using Python, I use a package called [PyPDF2](https://pypi.org/project/PyPDF2/),
    and its PdfReader module. In the code snippet below, I read just the first page
    of the pdf file and extract the text from it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/03238604047dac96808ec557bbdd0fa3.png)'
  prefs: []
  type: TYPE_IMG
- en: Script to read the first page of the pdf file. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**b. Read the entire text of the file using PyPDF2**'
  prefs: []
  type: TYPE_NORMAL
- en: To read the entire text from the pdf file, I use a function called `extract_text_from_pdf`
    as shown below. First, the function opens the pdf file for reading in binary format
    and initializes the reading object. An empty list called `pdf_text` is initialized.
    Next, while looping through each page of the pdf file, the content of each page
    is extracted and appended to the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When the file is passed as an argument in the function above, it returns a
    list containing elements- each element referring to the text on each page. The
    given file `autobook.pdf` is read as 4 elements using the `extract_text_from_pdf()`
    function as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/560fa1df5fc2e20f25a6e12e52f7bf32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The elements inside the `extracted_text` can also be joined as a single element
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`all_text` returns a list containing only one element for the entire text in
    all the pages of the pdf file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**c. Alternative way to read the entire text of the pdf file using PyMUPDF
    package.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, I came across a package called [PyMUPDF](https://pymupdf.readthedocs.io/en/latest/tutorial.html)
    to read the entire text in the pdf as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First, the pdf file is opened as a doc. `text` is initialized as an empty string.
    By looping through each page in the doc, the character on each page is appended
    to the `text`. Hence, the length of `text` here is 1786 elements, which includes
    each character including spaces, new lines, and punctuation marks.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. RegEx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RegEx, or Regular Expression, is a sequence of characters that forms a search
    pattern. Python has an in-built package called `re` for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: From all the text in the given pdf file, I wanted to extract only the specific
    information. Below I describe the functions I used for this purpose, although
    there could be much wider use cases of RegEx.
  prefs: []
  type: TYPE_NORMAL
- en: '**a. findall**'
  prefs: []
  type: TYPE_NORMAL
- en: When the given pattern matches in the string/text, the findall function returns
    the list of all the matches.
  prefs: []
  type: TYPE_NORMAL
- en: In the code snippet below, `x`, `y` and `z` return all the matches for `Name`,
    `Nationality`, and `Country` in the text. There are four occurrences of `Name`,
    three occurrences of `Nationality`, and a single occurrence of `Country` in the
    text in the pdf.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e23a523e20ba025bd23a33c608474f00.png)'
  prefs: []
  type: TYPE_IMG
- en: Findall function is used to return the list of all matches. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**b. sub**'
  prefs: []
  type: TYPE_NORMAL
- en: The sub function is used to substitute/replace one or more matches with a string.
  prefs: []
  type: TYPE_NORMAL
- en: In the given text, the `Nationality` is referred to as `Country` in the case
    of a friend named Hari. To replace the `Country` with `Nationality`, first I compiled
    a regular expression pattern for `Country`. Next, I used the sub method to replace
    the pattern with the new word and created a new string called `new_text`. In `new_text`,
    I find four occurrences of `Nationality` unlike three in the previous case.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53a4c6249490b311a50e8ab3dbb48b55.png)'
  prefs: []
  type: TYPE_IMG
- en: Sub function used to substitute/find and replace in the string. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**c. finditer**'
  prefs: []
  type: TYPE_NORMAL
- en: The finditer method can be used to find the matches of the pattern in a string.
  prefs: []
  type: TYPE_NORMAL
- en: In the given text, the text between the `Name` and `Nationality` fields contains
    the actual names of the friends, and the text between the `Nationality` and `Date
    of Birth` fields contains the actual nationalities. I created the following function
    called `find_between()` to find the text between any two words present in consecutive
    order in the given text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: One of the main parameters in the above function is the `pattern`. The `pattern`
    is set up to extract the characters between the `first_word` and the `last_word`
    in the given text. The finditer function returns an iterator over all non-overlapping
    matches in the string. For each match, the iterator returns a Match object. An
    empty list called `new_list` is initialized. By looping through the `matches`,
    the exact `match` in each iteration is appended to the `new_list`, and is returned
    by the fuction.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this way, I was able to create the lists for each field such as names, nationalities,
    date of birth, preferences, and so on from the pdf file as shown in the code snippet
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/52a05b7752ffb1146a68fa054761c13e.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the find_between function to extract relevant profile information of each
    friend from the pdf. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:**'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘.’ special character in Python matches with any character in the text/string
    excluding the new line. However, the **re.DOTALL** flag the ‘.’ character can
    match any character including the new line.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Exporting data to Excel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**a. Pandas dataframe from lists**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the step above, I got the lists for each profile field for each friend.
    In this step, I convert these lists into a pandas dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataframe `df` looks as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5764e49ef8471b0c784759fb10d1d626.png)'
  prefs: []
  type: TYPE_IMG
- en: Deriving pandas dataframe from the lists of each profile field for each friend.
    Imagy by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**b. Conditional formatting using pandas dataframe**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pandas datafame allows conditional formatting feature similar to Excel. Suppose
    I want to highlight the cells containing the name of my favorite player `Lionel
    Messi` in `df`. This can be done using `df.style.applymap()` function as shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/349ff025afadbd337429cd5a04c28e3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Applying background color in selected cells using df.style.applymap function.
  prefs: []
  type: TYPE_NORMAL
- en: When the file is exported as *.xlsx format in line [28], the exported file also
    contains yellow highlight for the cell containing `Lionel Messi`.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. **Exporting from Python to word format**
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**a. Creating word document using Python-docx**'
  prefs: []
  type: TYPE_NORMAL
- en: To export data from Python to a Word format, I use a package called [python-docx](https://python-docx.readthedocs.io/en/latest/).
    The `Document` module inside the docx package allows the creation of different
    aspects of a word document such as headings and paragraphs.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, I add the heading Name for each friend at first followed
    by a paragraph containing the actual name of the friend. This is followed by the
    headings and the corresponding texts for each profile field. I add a page break
    at the end of the profile of each friend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The code above helps to yield a word document of the following format after
    saving it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9e54a162f0cf049cc569af93f6c9f1d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Word document that is to be generated by the code above. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**b. Highlight paragraph using Python-docx**'
  prefs: []
  type: TYPE_NORMAL
- en: The Python-docx package helps to generate a word document with most of the features
    available in a Microsoft Word application. For example, the font can be added
    in different font styles, font colors, and sizes, along with features such as
    bold, italic, and underline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say I want to create a section called Favorites at the end of the document
    and highlight the text in the document. It can be done with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**c. Create a table using Python-docx**'
  prefs: []
  type: TYPE_NORMAL
- en: The Python-docx also allows the creation of tables in the word document directly
    from Python. Suppose I want to add a table consisting of the favorite item of
    each friend in the Favorites section at the end of the document. A table can be
    created using `document.add_tables(rows = nrows, cols = ncols)`. Furthermore,
    the text needs to be defined for each row/column or cell of the table.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, I define a table object with 8 rows and 5 columns. Next,
    I define the table header and first column. By looping through the dataframe `df`,
    I define the text for each cell inside the table based on the favorite item of
    each friend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**d. Save the document.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The document is saved as a *.docx format file using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The final page of the document comprising favorites section and the table looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d61e0bbe1b3015dd8da9ca699859e20.png)'
  prefs: []
  type: TYPE_IMG
- en: Favorites section and table created by following steps b and c above. File is
    saved as *.docx format using code in step d. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Converting word document to pdf format.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To convert a document from word *.docx format to *.pdf format using Python,
    I came across a package called [docx2pdf](https://pypi.org/project/docx2pdf/).
    The word document can be converted to pdf format using the convert module of the
    package as `convert(input_path, output_path)`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e4c6071c36fa31f11746c2ed6a4a5c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Converting word document from *.docx to *.pdf format. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output folder looks as follows for me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6727c0f8794bf0ec06588d28e4365699.png)'
  prefs: []
  type: TYPE_IMG
- en: Output folder comprising of Excel file, Word document, and pdf file all exported
    using Python. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scanning through a pdf file and extracting only the necessary information can
    be very time-consuming and stressful. There are different packages available in
    Python that help to automate this process, alleviate cumbersomeness, and make
    the process more efficient to extract precise information.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I use a dummy example of a pdf file containing common fields/sections/headings
    in the profile of four friends and extract the relevant information for each field
    for each friend. First, I used the PyPDF2 or PyMuPDF package to read the pdf file
    and print out the entire text. Second, I used Regular Expressions (RegEx) to detect
    patterns and find the matches for each pattern in the text to extract only relevant
    information. Third, I converted the lists of information for each profile field
    for each friend as pandas dataframe and exported it to an Excel file. Next, I
    created a word file using the Python-docx package. And finally, I converted the
    word file into a pdf format again using the docx2pdf file.
  prefs: []
  type: TYPE_NORMAL
- en: The notebook and the input pdf file for this post are available in this GitHub
    [repository](https://github.com/hbshrestha/Data_Analytics). Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
