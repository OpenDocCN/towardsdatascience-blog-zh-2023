["```py\nimport numpy as np\nimport pandas as pd\nimport pyomo.environ as pyo\nimport matplotlib.pyplot as plt\n```", "```py\nmonths = np.arange(12, dtype=int) + 1\nsetup_cost = np.array([85, 102, 102, 101, 98, 114, 105, 86, 119, 110, 98, 114])\ndemand = np.array([69, 29, 36, 61, 61, 26, 34, 67, 45, 67, 79, 56])\ninventory = np.ones(12)\n\ndataset = pd.DataFrame(\n    {\"setup_cost\": setup_cost, \"inventory_cost\": inventory, \"demand\": demand},\n    index=months,\n)\n```", "```py\nmodel = pyo.ConcreteModel()\n```", "```py\nmodel.T = pyo.Set(initialize=list(dataset.index))\n```", "```py\nmodel.d = pyo.Param(model.T, initialize=dataset.demand)\nmodel.s = pyo.Param(model.T, initialize=dataset.setup_cost)\nmodel.h = pyo.Param(model.T, initialize=dataset.inventory_cost)\n```", "```py\nmodel.x = pyo.Var(model.T, within=pyo.NonNegativeReals)\nmodel.y = pyo.Var(model.T, within=pyo.Binary)\nmodel.I = pyo.Var(model.T, within=pyo.NonNegativeReals)\n```", "```py\ndef inventory_rule(model, t):\n    if t == model.T.first():\n        return model.I[t] == model.x[t] - model.d[t]\n    else:\n        return model.I[t] == model.I[model.T.prev(t)] + model.x[t] - model.d[t]\n\nmodel.inventory_rule = pyo.Constraint(model.T, rule=inventory_rule)\n```", "```py\ndef get_max_antecip(t, dataset=dataset):\n    \"\"\"\n    Returns the first instant in which it might be\n    intelligent to produce a certain demand\n    \"\"\"\n\n    total_inv = 0\n    d = dataset.demand[t]\n    s = dataset.setup_cost[t]\n    out = t\n\n    for i in range(1, t - dataset.index[0] + 1):\n        h = dataset.inventory_cost[t - i]\n        if total_inv + h * d <= s:\n            total_inv = total_inv + h * d\n            out = t - i\n        else:\n            break\n\n    return out\n\ndef get_max_prod(t, dataset=dataset):\n    df = dataset.query(f\"max_antecip <= {t} & index >= {t}\")\n    return df.demand.sum()\n\ndataset[\"max_antecip\"] = [get_max_antecip(t, dataset=dataset) for t in dataset.index]\ndataset[\"max_prod\"] = [get_max_prod(t, dataset=dataset) for t in dataset.index]\n```", "```py\nmodel.M = pyo.Param(model.T, initialize=dataset.max_prod)\n\ndef active_prod(model, t):\n    return model.x[t] <= model.M[t] * model.y[t]\n\nmodel.active_prod = pyo.Constraint(model.T, rule=active_prod)\n```", "```py\ndef total_cost(model):\n    holding = sum(model.h[t] * model.I[t] for t in model.T)\n    setup = sum(model.s[t] * model.y[t] for t in model.T)\n    return setup + holding\n\nmodel.obj = pyo.Objective(rule=total_cost, sense=pyo.minimize)\n```", "```py\n# executable=YOUR_PATH\nsolver = pyo.SolverFactory(\"cbc\")\n```", "```py\nsolver.solve(model, tee=True)\n```", "```py\n# Obtain the maximum cost for comparison\nmax_cost = dataset.setup_cost.sum()\nprint(f\"Maximum cost: {max_cost:.1f}\")\n```", "```py\nopt_value = model.obj()\nprint(f\"Best cost {opt_value}\")\nprint(f\"% savings {100 * (1 - opt_value / max_cost) :.2f}\")\n```", "```py\n# Include production as a column\ndataset[\"production\"] = [model.x[t].value for t in dataset.index]\n\n# Plot figure\nfig, ax = plt.subplots(figsize=[6, 3], dpi=100)\nx = dataset.index\nwidth = 0.35\nax.bar(x - width/2, dataset.production, width, color=\"darkgreen\", label=\"production\")\nax.bar(x + width/2, dataset.demand, width, color=\"navy\", label=\"demand\")\nax.set_xticks(x)\nax.set_ylabel(\"Qtd\")\nax.set_xlabel(\"t\")\nax.legend()\nfig.tight_layout()\nplt.show()\n```"]