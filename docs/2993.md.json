["```py\n # Lexical Search\n    text_scores = []\n    for query in queries:\n        response = client.search(\n            index=INDEX_NAME,\n            body={\n                \"query\": {\n                    \"match\": {\n                        \"caption\": query\n                    }\n                },\n                \"size\": 1000\n            }\n        )\n        scores = [hit['_score'] for hit in response['hits']['hits']]\n        text_scores.append(scores)\n\n    # Vector search\n    vector_scores = []\n    # Vectorize queries using SentenceTransformer\n    query_embeddings = model.encode(queries)\n    # Perform vector search\n    for query_embedding in query_embeddings:\n        request_body = {\n            \"size\": 1000,\n            \"query\": {\n                \"script_score\": {\n                    \"query\": {\n                        \"match_all\": {}\n                    },\n                    \"script\": {\n                        \"source\": \"knn_score\",\n                        \"lang\": \"knn\",\n                        \"params\": {\n                            \"field\": \"caption_embedding\",\n                            \"query_value\": query_embedding.tolist(),\n                            \"space_type\": \"cosinesimil\"\n                        }\n                    }\n                }\n            }\n        }\n        response = client.search(\n            index=INDEX_NAME,\n            body=request_body\n        )\n        scores = [hit['_score'] for hit in response['hits']['hits']]\n        vector_scores.append(scores)    \n\n    vector_score_mean = np.mean(vector_scores) # Calculate the mean\n    vector_score_std = np.std(vector_scores, ddof=1)  # Calculate standard deviation\n    vector_score_min = np.min(vector_scores)  # Calculate minimum score\n    vector_score_max = np.max(vector_scores)  # Calculate maximum score\n\n    text_score_mean = np.mean(text_scores) # Calculate the mean\n    text_score_std = np.std(text_scores, ddof=1)  # Calculate standard deviation\n    text_score_min = np.min(text_scores)  # Calculate minimum score\n    text_score_max = np.max(text_scores)  # Calculate maximum score\n```", "```py\ndef find_doc_id_rank(doc_id, document_ids):\n    if doc_id in document_ids:\n        position = document_ids.index(doc_id) + 1\n        return 1 / position\n    else:\n        return 0\n```"]