["```py\nWITH top_customers as (\n    --- select the customter ids you want to track\n),\n\ntransactions as (\n    SELECT \n      cust_id, \n      dt, \n      date_trunc('hour', cast(event_time as timestamp)) as event_hour, \n      count(*) as transactions\n    FROM ourTable\n    WHERE\n        dt between cast(date_add('day', -7, current_date) as varchar) \n        and cast(current_date as varchar)\n    GROUP BY 1,2,3 Order By event_hour asc\n)\n\nSELECT transactions.cust_id,\n       transactions.event_hour,\n       day_of_week(transactions.event_hour) day_of_week,\n        hour(transactions.event_hour) hour_of_day,\n        transactions.transactions as transactions,\n        LAG(transactions,1) OVER \n          (PARTITION BY transactions.cust_id ORDER BY event_hour) AS lag1,\n        LAG(transactions,2) OVER \n          (PARTITION BY transactions.cust_id ORDER BY event_hour) AS lag2,\n        LAG(transactions,3) OVER \n          (PARTITION BY transactions.cust_id ORDER BY event_hour) AS lag3,\n        LAG(transactions,4) OVER \n          (PARTITION BY transactions.cust_id ORDER BY event_hour) AS lag4\nFROM transactions \n    join top_customers \n      on transactions.cust_id = top_customers.cust_id\n```", "```py\n\"cust_id\", \"event_hour\", \"day_of_week\", \"hour_of_day\", \"transactions\", \"lag1\", \"lag2\", \"lag3\", \"lag4\"\n\"Customer-123\",\"2023-01-14 00:00:00.000\",\"6\",\"0\",\"4093\",,,,,,\n\"Customer-123\",\"2023-01-14 01:00:00.000\",\"6\",\"1\",\"4628\",\"4093\",,,,,\n\"Customer-123\",\"2023-01-14 02:00:00.000\",\"6\",\"2\",\"5138\",\"4628\",\"4093\",,,,\n\"Customer-123\",\"2023-01-14 03:00:00.000\",\"6\",\"3\",\"5412\",\"5138\",\"4628\",\"4093\",,,\n\"Customer-123\",\"2023-01-14 04:00:00.000\",\"6\",\"4\",\"5645\",\"5412\",\"5138\",\"4628\",\"4093\",\n\"Customer-123\",\"2023-01-14 05:00:00.000\",\"6\",\"5\",\"5676\",\"5645\",\"5412\",\"5138\",\"4628\",\n\"Customer-123\",\"2023-01-14 06:00:00.000\",\"6\",\"6\",\"6045\",\"5676\",\"5645\",\"5412\",\"5138\",\n\"Customer-123\",\"2023-01-14 07:00:00.000\",\"6\",\"7\",\"6558\",\"6045\",\"5676\",\"5645\",\"5412\",\n```", "```py\ndef predict(customerID:String, records:Iterator[FeaturesRecord]) = ???\n\nfeaturesDS.groupByKey(_.key).flatMapGroups(predict)\n```"]