- en: Using MLflow with ATOM to track all your machine learning experiments without
    additional code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-mlflow-with-atom-to-track-all-your-machine-learning-experiments-without-additional-code-583128687d45?source=collection_archive---------19-----------------------#2023-03-13](https://towardsdatascience.com/using-mlflow-with-atom-to-track-all-your-machine-learning-experiments-without-additional-code-583128687d45?source=collection_archive---------19-----------------------#2023-03-13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Start storing models, parameters, pipelines, data and plots changing only one
    parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://tvdboom.medium.com/?source=post_page-----583128687d45--------------------------------)[![Marco
    vd Boom](../Images/3fc053efda1c23dd84a6418ded2603ca.png)](https://tvdboom.medium.com/?source=post_page-----583128687d45--------------------------------)[](https://towardsdatascience.com/?source=post_page-----583128687d45--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----583128687d45--------------------------------)
    [Marco vd Boom](https://tvdboom.medium.com/?source=post_page-----583128687d45--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe2091b627921&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-mlflow-with-atom-to-track-all-your-machine-learning-experiments-without-additional-code-583128687d45&user=Marco+vd+Boom&userId=e2091b627921&source=post_page-e2091b627921----583128687d45---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----583128687d45--------------------------------)
    ·6 min read·Mar 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F583128687d45&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-mlflow-with-atom-to-track-all-your-machine-learning-experiments-without-additional-code-583128687d45&user=Marco+vd+Boom&userId=e2091b627921&source=-----583128687d45---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F583128687d45&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-mlflow-with-atom-to-track-all-your-machine-learning-experiments-without-additional-code-583128687d45&source=-----583128687d45---------------------bookmark_footer-----------)![](../Images/aaa875d90610d0e1ab84b89fd7d9e8ba.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Hans Reniers](https://unsplash.com/@hansreniers?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Introduction**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [MLflow Tracking component](https://mlflow.org/docs/latest/tracking.html)
    is an API and UI for logging parameters, code versions, metrics, and output files
    when running your machine learning experiments and for later visualizing the results.
  prefs: []
  type: TYPE_NORMAL
- en: In this story, we’ll explain how to use the [ATOM](https://github.com/tvdboom/ATOM)
    library to easily track your models, parameters, pipelines, data and plots. ATOM
    is an open-source Python package designed to help data scientists with the exploration
    of machine learning pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: This story focuses on using the experiment tracking feature of ATOM.
    Teaching the basics of the library lies outside the scope of this story. Read
    [this other story](/atom-a-python-package-for-fast-exploration-of-machine-learning-pipelines-653956a16e7b)
    if you want a gentle introduction to the library.'
  prefs: []
  type: TYPE_NORMAL
- en: Feature overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start tracking your experiments assigning a name to the `[experiment](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-experiment)`
    parameter in *atom’s* constructor. Every model is tracked using a separate run.
    When no backend is configured, the data is stored locally at `./mlruns`. To configure
    the backend, use [mlflow.set_tracking_uri](https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.set_tracking_uri)
    in your notebook or IDE before initializing *atom*. This does not affect the currently
    active run (if one exists), but takes effect for successive runs. Run `mlflow
    ui` on your terminal to open MLflow’s Tracking UI and view it at [http://localhost:5000](http://localhost:5000).
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** When using ATOM on [Databricks](https://databricks.com/), the experiment’s
    name should include the complete path to the storage, e.g. `/Users/username@domain.com/experiment_name`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following elements are tracked:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tags**'
  prefs: []
  type: TYPE_NORMAL
- en: The runs are automatically tagged with the model’s full name, the [branch](https://tvdboom.github.io/ATOM/latest/user_guide/data_management/#branches)
  prefs: []
  type: TYPE_NORMAL
- en: from which the model was trained, and the time it took to fit the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add additional custom tags through the `ht_params` parameter, e.g. `atom.run(["LR",
    "RF"], ht_params={"tags": {"tag1": 1}})`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameters**'
  prefs: []
  type: TYPE_NORMAL
- en: All parameters used by the estimator at initialization are tracked. Additional
    parameters passed to the fit method are **not** tracked.
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**'
  prefs: []
  type: TYPE_NORMAL
- en: The model’s estimator is stored as artifact. This option can be switched off
    using *atom’s* `[log_model](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-log_model)`
    attribute, e.g. `atom.log_model = False`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hyperparameter tuning**'
  prefs: []
  type: TYPE_NORMAL
- en: If [hyperparameter tuning](https://tvdboom.github.io/ATOM/latest/user_guide/training/)
    is performed, every trial is tracked as a nested run in the model’s main run.
    This option can be switched off using *atom’s* `[log_ht](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-log_ht)`
    attribute, e.g. `atom.log_ht = False`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Metrics**'
  prefs: []
  type: TYPE_NORMAL
- en: All metric results are tracked, not only during training, but also when the
    [evaluate](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-evaluate)
    method is called at a later point. Metrics calculated during in-training validation
    are also stored.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dataset**'
  prefs: []
  type: TYPE_NORMAL
- en: The train and test sets used to fit and evaluate the model can be stored as
    `.csv` files to the run’s artifacts. This option can be switched on using *atom’s*
    `[log_data](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-log_data)`
    attribute, e.g. `atom.log_data = True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pipeline**'
  prefs: []
  type: TYPE_NORMAL
- en: The model’s pipeline (returned from the [export_pipeline](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-export_pipeline)
    method) can be stored as an artifact. This option can be switched on using *atom’s*
    `[log_pipeline](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-log_pipeline)`
    attribute, e.g. `atom.log_pipeline = True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Plots**'
  prefs: []
  type: TYPE_NORMAL
- en: By default, plots are stored as `.html` artifacts in all runs corresponding
    to the models that are showed in the plot. If the `filename` parameter is specified,
    they are stored under that name, else the method’s name is used. This option can
    be switched off using *atom's* `[log_plots](https://tvdboom.github.io/ATOM/v5.1/API/ATOM/atomclassifier/#atomclassifier-log_plots)`
    attribute, e.g. `atom.log_plots = False`.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to fully understand the capabilities is through an example.
    We initialize *atom* the usual way, and specify the `experiment` parameter. The
    name provided here is the name of the mlflow experiment used. If there is no experiment
    with that name, a new one is created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let’s specify that we want to log the data and pipeline as well. These two options
    are turned off by default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Train the models the usual way. All selected metrics are logged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now open the UI running `mlflow ui` in the terminal. Every model has its separate
    run.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9861571805f468190d944e2bdaba2087.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Per run, *atom* stores:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The model’s parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/d2e45e6ed3344e261b9795c46a8d14b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The metric scores on train and test set:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/727d0a5c7955b48be86d6a39128f5ff5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Predefined tags and custom tags (if specified):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/da649ccd7e27ec06d2d0b99f96534659.png)'
  prefs: []
  type: TYPE_IMG
- en: Artifacts, which include the estimator and pipeline as pickle files, and the
    train and test sets as csv files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/da44d4ceaf8af7a6a1648a99cb53dd30.png)'
  prefs: []
  type: TYPE_IMG
- en: Additional metrics (calculated with the [evaluate](https://tvdboom.github.io/ATOM/latest/API/ATOM/atomclassifier/#atomclassifier-evaluate)
    method) and plots where the model is displayed are also added to the run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/72bf68d5eb28078ac84a62ee1fb20853.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7cda8e9b74f1ea288bc74e33dec4f670.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Hyperparameter tuning**'
  prefs: []
  type: TYPE_NORMAL
- en: When running [hyperparameter tuning](https://tvdboom.github.io/ATOM/latest/user_guide/training/#hyperparameter-tuning),
    every trial of the study is added as nested run to the main run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/acfc4b3b3d853c01a15eb617a03e9864.png)'
  prefs: []
  type: TYPE_IMG
- en: The nested runs are named `<model_name> — <trial_number>`. Their metric score
    is not on train nor test, but on the validation set instead, which is the subset
    of the training set used to validate this specific trial (the rest of the set
    was used to fit the estimator). The test set is not used during hyperparameter
    tuning to avoid data leakage.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** The data and pipeline are never stored within nested runs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**In-training validation**'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the [models](https://tvdboom.github.io/ATOM/v5.1/user_guide/models/#predefined-models)
    allow [in-training validation](https://tvdboom.github.io/ATOM/latest/user_guide/training/#in-training-validation).
    This means that the estimator is evaluated (using only the **first metric**) on
    the train and test set after every round of the training (a round can be an iteration
    for linear models or an added tree for boosted tree models). The validation scores
    are stored in the `evals` metric, which is also tracked in mlflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/91ea4276c31bf5987c0891a3b8bf64a8.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note:** The `evals` metric is not calculated in nested runs.'
  prefs: []
  type: TYPE_NORMAL
- en: DAGsHub integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ATOM has a build-in integration with [DAGsHub](https://dagshub.com/), a web
    platform based on open source tools, optimized for data science and oriented towards
    the open source community. To store your mlflow experiments in a DAGsHub repo,
    type `dagshub:<experiment_name>` in the `experiment` parameter (instead of just
    the experiment's name). If the repo does not already exist, a new public repo
    is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'A minimalistic example could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d607afd0750dc1ea4684d207cb4423ba.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note:** If you are logged into your DAGsHub account when running atom’s constructor,
    a page on your web browser is automatically opened to give access permissions.
    If not, read [here](https://dagshub.com/docs/integration_guide/mlflow_tracking/#3-set-up-your-credentials)
    how to set up your DAGsHub credentials.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have shown how easy it is to track your machine learning experiments using
    the ATOM library. With minimal code changes, it’s now possible to store the estimator,
    parameters, pipelines, data and plots for every model trained.
  prefs: []
  type: TYPE_NORMAL
- en: For further information about ATOM, have a look at the package’s [documentation](https://tvdboom.github.io/ATOM/).
    For bugs or feature requests, don’t hesitate to open an issue on [GitHub](https://github.com/tvdboom/ATOM)
    or send me an email.
  prefs: []
  type: TYPE_NORMAL
- en: 'Related stories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/atom-a-python-package-for-fast-exploration-of-machine-learning-pipelines-653956a16e7b](/atom-a-python-package-for-fast-exploration-of-machine-learning-pipelines-653956a16e7b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/how-to-test-multiple-machine-learning-pipelines-with-just-a-few-lines-of-python-1a16cb4686d](/how-to-test-multiple-machine-learning-pipelines-with-just-a-few-lines-of-python-1a16cb4686d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/from-raw-data-to-web-app-deployment-with-atom-and-streamlit-d8df381aa19f](/from-raw-data-to-web-app-deployment-with-atom-and-streamlit-d8df381aa19f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/exploration-of-deep-learning-pipelines-made-easy-e1cf649892bc](/exploration-of-deep-learning-pipelines-made-easy-e1cf649892bc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/deep-feature-synthesis-vs-genetic-feature-generation-6ba4d05a6ca5](/deep-feature-synthesis-vs-genetic-feature-generation-6ba4d05a6ca5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/from-raw-text-to-model-prediction-in-under-30-lines-of-python-32133d853407](/from-raw-text-to-model-prediction-in-under-30-lines-of-python-32133d853407)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/how-to-make-40-interactive-plots-to-analyze-your-machine-learning-pipeline-ee718afd7bc2](/how-to-make-40-interactive-plots-to-analyze-your-machine-learning-pipeline-ee718afd7bc2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/machine-learning-on-multioutput-datasets-a-quick-guide-ebeba81b97d1](/machine-learning-on-multioutput-datasets-a-quick-guide-ebeba81b97d1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: All plots and images (except the featured image) are created by the author.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
