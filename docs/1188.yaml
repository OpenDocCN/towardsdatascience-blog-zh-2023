- en: 'What happened with APOC in Neo4j v5: Core and Extended edition'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/what-happened-with-apoc-in-neo4j-v5-core-and-extended-edition-23994cdf0a2c?source=collection_archive---------9-----------------------#2023-04-04](https://towardsdatascience.com/what-happened-with-apoc-in-neo4j-v5-core-and-extended-edition-23994cdf0a2c?source=collection_archive---------9-----------------------#2023-04-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Neo4j’s APOC plugin was split into two editions in the v5 version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bratanic-tomaz.medium.com/?source=post_page-----23994cdf0a2c--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page-----23994cdf0a2c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----23994cdf0a2c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----23994cdf0a2c--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page-----23994cdf0a2c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F57f13c0ea39a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhat-happened-with-apoc-in-neo4j-v5-core-and-extended-edition-23994cdf0a2c&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=post_page-57f13c0ea39a----23994cdf0a2c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----23994cdf0a2c--------------------------------)
    ·5 min read·Apr 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F23994cdf0a2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhat-happened-with-apoc-in-neo4j-v5-core-and-extended-edition-23994cdf0a2c&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=-----23994cdf0a2c---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F23994cdf0a2c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhat-happened-with-apoc-in-neo4j-v5-core-and-extended-edition-23994cdf0a2c&source=-----23994cdf0a2c---------------------bookmark_footer-----------)![](../Images/7dd50831ee195dfdd4ad1943452dea29.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Have you upgraded to or downloaded Neo4j v5, and now some of your favorite APOC
    procedures are not working anymore? You are not alone.
  prefs: []
  type: TYPE_NORMAL
- en: As of Neo4j v5, APOC has been split into two editions. The key difference is
    that some of the procedures are officially supported and available in the Core
    edition. APOC Core contains battle-hardened procedures and functions with no external
    dependencies. On the other hand, the extended edition contains additional procedures
    that might require external dependencies and are not officially supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have written this blog post to help you with the new distinction between
    the two editions. First, of all, there are now two separate documentation sites
    for the two editions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[APOC Core documentation](https://neo4j.com/docs/apoc/current/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[APOC Extended documentation](https://neo4j.com/labs/apoc/5/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, every procedure is tagged with an Extended tag in the documentation
    if it is not part of the Core edition.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7cf6be0bdb6895f87a1f62e99351fac.png)'
  prefs: []
  type: TYPE_IMG
- en: APOC Extended tag. Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `apoc.load.json` procedure is part of the Core edition as it
    doesn’t have the Extended tag. On the other hand, the `apoc.load.csv` procedure
    is part of the Extended edition, as indicated by the Extended tag.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now take a look at the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I like to use [Neo4j Desktop](https://neo4j.com/download/) for any prototyping
    in a local environment. It’s a nice application that allows you to setup and install
    the APOC plugin with a couple of mouse clicks.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7c76765e785545920aeda1af1aee4588.png)'
  prefs: []
  type: TYPE_IMG
- en: APOC instalation in Neo4j Desktop. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: However, at the moment, it is not explicitly mentioned that the single-click
    installation installs only the Core edition. If we want to add the extended edition,
    we need to manually download and copy it into the plugin folder.
  prefs: []
  type: TYPE_NORMAL
- en: The releases of the Extended edition can be found on [GitHub](https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases).
    We need to ensure the APOC version is compatible with the Neo4j version. APOC
    versioning follows the Neo4j one, where for example, APOC v5.5.0 is compatible
    with Neo4j v5.5.0\. Make sure that the first two version numbers match between
    Neo4j and APOC.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3660f4328bdc0af7b7e2c91ce603385.png)'
  prefs: []
  type: TYPE_IMG
- en: APOC Extended v5.5.0\. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We need to download the Extended jar of the appropriate version. Some procedures
    require additional dependencies that can also be downloaded. However, downloading
    only the Extended jar will be enough in most cases. After the download is complete,
    copy the jar file into the plugins folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50108a3aa9dc3380c249d5f4d5174f68.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the plugins folder. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: You can open the `plugins` folder by clicking on the **three dots** option,
    selecting the **Open folder**, and finally clicking on the **Plugins**.
  prefs: []
  type: TYPE_NORMAL
- en: The folder should already include the core edition of the APOC plugin you installed
    within the Desktop application. Therefore, there should be two APOC Jar files
    at the end, one for the Core and the other for the Extended edition Docker version.
  prefs: []
  type: TYPE_NORMAL
- en: '*Make sure to first install the core edition as it always sets the appropriate
    configuration values that allow us to execute APOC procedures!*'
  prefs: []
  type: TYPE_NORMAL
- en: Another thing that has changed is that we cannot add APOC configuration setting
    to the `neo4j.conf`file. Instead, we need to create an `apoc.conf` file and set
    any APOC configuration values there. For example, we need to set the following
    setting to allow APOC procedures to read files from a local disk.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set this configuration in Neo4j Desktop using the following flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4c6de07c7b56b0703d6662504a94b51.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting APOC configuration values. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions to open the **Configuration** folder. Next, create a
    new `apoc.conf` file, and then set appropriate configuration values in the newly-created
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a more production environment, I like to run the Neo4j in a docker container.
    The docker container of Neo4j provides a convenient environment variable that
    helps us to install the appropriate version of the APOC plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: However, using the environment variable to install the APOC plugin in Neo4j
    v5 will only install the Core edition. Unfortunately, if we want to use the Extended
    edition, we need to manually download and copy it into the plugins folder.
  prefs: []
  type: TYPE_NORMAL
- en: I prefer using `docker-compose` when interacting with docker containers. Therefore,
    I would use the following `docker-compose` setting to run Neo4j with both APOC
    Core and Extended editions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are using Neo4j v5.5.0\. We have also used the environment
    variable to install the APOC core library and allow APOC procedures to read files
    from the disk. However, we need to download the [APOC Extended v.5.5.0](https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/5.5.0/apoc-5.5.0-extended.jar)
    and copy it into the **neo4j/plugins** folder. So, we only need to manually copy
    the Extended edition, while the Core edition is installed using the **NEO4J_PLUGINS**
    variable. Additionally, in most cases you want to persist your database files.
    Therefore, we also mount the **data** folder.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Neo4j v5, APOC has been split into Core and Extended editions. If you are
    using procedures from the Core edition, nothing has changed in the installation
    process. However, if you are using any procedures from the Extended edition, you
    need to manually download and copy the Extended edition from the GitHub release
    page. Hopefully, this blog post will help solve any problems you might have encountered
    with APOC in the Neo4j v5.
  prefs: []
  type: TYPE_NORMAL
