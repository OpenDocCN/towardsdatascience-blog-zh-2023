- en: What’s New in Pandas 2.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/whats-new-in-pandas-2-1-d26c0b8314a?source=collection_archive---------2-----------------------#2023-09-07](https://towardsdatascience.com/whats-new-in-pandas-2-1-d26c0b8314a?source=collection_archive---------2-----------------------#2023-09-07)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The most interesting things about the new release*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@patrick_hoefler?source=post_page-----d26c0b8314a--------------------------------)[![Patrick
    Hoefler](../Images/35ca9ef1100d8c93dbadd374f0569fe1.png)](https://medium.com/@patrick_hoefler?source=post_page-----d26c0b8314a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d26c0b8314a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d26c0b8314a--------------------------------)
    [Patrick Hoefler](https://medium.com/@patrick_hoefler?source=post_page-----d26c0b8314a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F103b3417e0f5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhats-new-in-pandas-2-1-d26c0b8314a&user=Patrick+Hoefler&userId=103b3417e0f5&source=post_page-103b3417e0f5----d26c0b8314a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d26c0b8314a--------------------------------)
    ·5 min read·Sep 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd26c0b8314a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhats-new-in-pandas-2-1-d26c0b8314a&user=Patrick+Hoefler&userId=103b3417e0f5&source=-----d26c0b8314a---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd26c0b8314a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhats-new-in-pandas-2-1-d26c0b8314a&source=-----d26c0b8314a---------------------bookmark_footer-----------)![](../Images/8e89647d8a4a3d7cd6168954effc8280.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Lukas W.](https://unsplash.com/@theluki?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/e3mu-MTj7Xk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: pandas 2.1 was released on August 30th 2023\. Let’s take a look at the things
    this release introduces and how it will help us improving our pandas workloads.
    It includes a bunch of improvements and also a set of new deprecations.
  prefs: []
  type: TYPE_NORMAL
- en: pandas 2.1 builds heavily on the PyArrow integration that became available with
    pandas 2.0\. We focused a lot on building out the support for new features that
    are expected to become the default with pandas 3.0\. Let’s dig into what this
    means for you. We will look at the most important improvements in detail.
  prefs: []
  type: TYPE_NORMAL
- en: I am part of the pandas core team. I am an open source engineer for [Coiled](https://www.coiled.io)
    where I work on Dask, including improving the pandas integration.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding NumPy object-dtype for string columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One major pain point in pandas is the inefficient string representation. This
    is a topic that we worked on for quite some time. The first PyArrow backed string
    dtype became available in pandas 1.3\. It has the potential to reduce memory usage
    by around 70% and improve the performance. I’ve explored this topic in more depth
    in [one of my previous posts](/utilizing-pyarrow-to-improve-pandas-and-dask-workflows-2891d3d96d2b),
    which includes memory comparisons and performance measurements (tldr: it’s impressive).'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve decided to introduce a new configuration option that will store all string
    columns in a PyArrow array. You don’t have to worry about casting string columns
    anymore, this will just work.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can turn this option on with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This behavior will become the default in pandas 3.0, which means that string-columns
    would always be backed by PyArrow. You have to install PyArrow to use this option.
  prefs: []
  type: TYPE_NORMAL
- en: PyArrow has different behavior than NumPy object dtype, which can make a pain
    to figure out in detail. We implemented the string dtype that is used for this
    option to be compatible with NumPy sematics. It will behave exactly the same as
    NumPy object columns would. I encourage everyone to try this out!
  prefs: []
  type: TYPE_NORMAL
- en: Improved PyArrow support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have introduced PyArrow backed DataFrame in pandas 2.0\. One major goal for
    us was to improve the integration within pandas over the last few months. We were
    aiming to make the switch from NumPy backed DataFrames as easy as possible. One
    area that we focused on was fixing performance bottlenecks, since this caused
    unexpected slowdowns before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Our DataFrame has 1 million rows and 10 groups. Let’s look at the performance
    on pandas 2.0.3 compared to pandas 2.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This particular example is 5 times faster on the new version. `merge` is another
    commonly used function that will be faster now. We are hopeful that the experience
    with PyArrow backed DataFrames is much better now.
  prefs: []
  type: TYPE_NORMAL
- en: Copy-on-Write
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy-on-Write was initially introduced in pandas 1.5.0 and is expected to become
    the default behavior in pandas 3.0\. Copy-on-Write provides a good experience
    on pandas 2.0.x already. We were mostly focused on fixing known bugs and make
    it run faster. I would recommend to use this mode in production now. I wrote a
    series of blog posts explaining [what Copy-on-Write is](/a-solution-for-inconsistencies-in-indexing-operations-in-pandas-b76e10719744)
    and [how it works](/deep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6).
    These blog posts go into great detail and explain how Copy-on-Write works internally
    and what you can expect from it. This includes performance and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve seen that Copy-on-Write can improve the performance of real-world workflows
    by over 50%.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecating silent upcasting in setitem-like operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Historically, pandas would silently change the dtype of one of your columns
    if you set an incompatible value into it. Let’s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a Series with integers, which will result in integer dtype. Let’s set
    the letter `"a"` into the second row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This changes the dtype of your Series to object. Object is the only dtype that
    can hold integers and strings. This is a major pain for a lot of user. Object
    columns take up a lot of memory, calculations won’t work anymore, performance
    degrades and many other things. It also added a lot of special casing internally
    to accomodate these things. Silent dtype changes in my DataFrame were a major
    annoyance for me in the past. This behavior is now deprecated and will raise a
    FutureWarning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Operations like our example will raise an error in pandas 3.0\. The dtypes of
    a DataFrames columns will stay consistent across different operations. You will
    have to be explicit when you want to change your dtype, which adds a bit of code
    but makes it easier to follow for future developers.
  prefs: []
  type: TYPE_NORMAL
- en: This change affects all dtypes, e.g. setting a float value into an integer column
    will also raise.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading to the new version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can install the new pandas version with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will give you the new release in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve looked at a couple of improvements that will help you write more efficient
    code. This includes performance improvements, easier opt-in into PyArrow backed
    string columns and further improvements for Copy-on-Write. We’ve also seen a deprecation
    that will make the behavior of pandas easier to predict in the next major release.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Feel free to reach out to share your thoughts and feedback.
  prefs: []
  type: TYPE_NORMAL
