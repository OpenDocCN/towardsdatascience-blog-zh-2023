- en: Use Classes for Generating Signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/use-classes-for-generating-signals-6694d22e9a80?source=collection_archive---------14-----------------------#2023-02-01](https://towardsdatascience.com/use-classes-for-generating-signals-6694d22e9a80?source=collection_archive---------14-----------------------#2023-02-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Classes == More Code Readability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----6694d22e9a80---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)
    ·7 min read·Feb 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6694d22e9a80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&user=Omar+Alkousa&userId=f8302b9534b5&source=-----6694d22e9a80---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6694d22e9a80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&source=-----6694d22e9a80---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: During your work with signal data, you might end up programming multiple functions
    and methods that can implement the process you want to use on the signal data.
    However, at some point, it might be hard to keep tracking the quality of your
    methods applied to signals without prior knowledge of this data. Therefore, generating
    signal data with prior known parameters helps you better understand your program
    and method. Generating signals, especially sinusoidal signals, is very common
    in signal processing studies. And it is usually done for testing or to represent
    the use of different signal processing techniques, such as Discrete Fourier Transform,
    Wavelet analysis, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d173ffc350260a75e671a5154b44a7d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will learn how to use classes to build a signal generator that
    you can use to generate sinusoidal signals for further understanding signal processing
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start our coding journey with a simple code that generate a sinusoidal
    signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/40d60949f424653fc269ad3cc6031114.png)'
  prefs: []
  type: TYPE_IMG
- en: Generate a signal using Numpy package. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: Why classes?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the code above, it seems we can generate signals without using classes.
    So, why the classes are a good choice? [[1]](https://docs.python.org/3/tutorial/classes.html)
  prefs: []
  type: TYPE_NORMAL
- en: The data is more controllable when using classes as you can build your object
    and methods that can be applied to control and get the signals without repeat
    coding like the above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using classes brings you more functionality. Classes allow you to define variables
    and functions as attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More readability and flexibility of your code. With classes, your code becomes
    easier to be understood and used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes play a major role in building packages. If you work a lot with signal
    data, you might consider building a special package that helps you with better
    and faster signal data analysis work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**“Think DSP”**](https://github.com/AllenDowney/ThinkDSP.git) is a great example
    of building a package specifically for Digital Signal Processing. [Allen Downey](https://medium.com/u/564e295fb7cf?source=post_page-----6694d22e9a80--------------------------------)
    has his thoughts and experience in signal processing implemented into this package,
    from generating signals to analyzing spectrums and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Classes, a Simple Start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Defining a class is similar to defining functions. First, you need a proper
    name for your class. There are no such rules for naming a class but it’s preferred
    to be short and related to its functionality. Also, it’s common. Let’s define
    a class for our signal generator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Different objects can be defined inside the class. These objects can be variables
    or functions and can be passed as methods or attributes of the class. Variables
    in our signal generator class might be the frequency and amplitude of the signal.
    Let’s also define a function that prints these variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, **“self”** represents the instance of the class and it’s
    used to access the attributes of the class and to bind the attributes with the
    given arguments [[2]](https://www.geeksforgeeks.org/self-in-python-class/). You
    can use any word other than “self” as the name has absolutely no special meaning
    to Python. Note, however, that by not following the convention your code may be
    less readable to other Python programmers [[1]](https://docs.python.org/3/tutorial/classes.html).
    One last thing about the code above is the statement directly after defining the
    class. This is the documentation that describes the functionality of the class.
    It’s important to be implemented in your class as it makes your code more readable.
    The user of the class can access the documentation using the help function in
    python.
  prefs: []
  type: TYPE_NORMAL
- en: The code below represents how to access the variables or the functions of a
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A Special Method for Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, not much flexibility has been presented by the classes above. But,
    fortunately, Python provides special methods that can be used to make the class
    more controllable. The most important method that we will discuss is the **__init__()**
    method. It is used to instantiate the class and its parameters customized to a
    specific initial state.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, calling a class object will automatically invoke the init
    method and instantiate all the variables and functions implemented into the init
    method [[1]](https://docs.python.org/3/tutorial/classes.html). The code below
    is a modification done on the previous code by defining the init method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now if we try to define a Signal object, we need to pass the frequency and the
    amplitude of the signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we understand how to define classes and their objects along with the
    special initializing method. It’s time to build the signal generator class that
    we want from the beginning. First, we need to point out the parameters we will
    implement in the init() method. The general form of a sinusoidal wave can be given
    following the equation [[3]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.01-The-Basics-of-waves.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '*y*(*t*)=*A*.*sin*(2*πf*+*ϕ*)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '***A*:** The amplitude of the signal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***f* :** The frequency of the signal [Hz]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***ϕ*:** The phase of the signal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two additional parameters should be added to our variables:'
  prefs: []
  type: TYPE_NORMAL
- en: The **duration** of the signal, in seconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **sampling rate**, samples per second
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let’s Use our Signal Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose we want to generate a signal that is the sum of three sinusoidal signals.
    The frequencies of these three signals are (20, 2, 7)Hz, respectively. The amplitudes
    of these three signals are (2, 6, 1), respectively. The sampling rate of the signals
    is 1000\. And lastly, the duration of the signals is 3 seconds. Let’s leave the
    phase of the signals as it is, 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/23df058e93925562b52b36ec09c9fc44.png)'
  prefs: []
  type: TYPE_IMG
- en: Example generating signal using our Signal class. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve pointed out some of the useful properties of the code when using classes,
    e.g., more control of the data, more functionality of the code, and more readability
    and flexibility of your code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve learned how to build a class in python step-by-step. We started by defining
    the class and how to define a variable or a function as an object and pass it
    with the class as methods or attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve learned about the special method __init__() and how it is used to instantiate
    the class and its parameters customized to a specific initial state, which gives
    the user more control of the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve built our final class as a signal generator that you can use to get sinusoidal
    signals with a specific frequency, sampling rate, amplitude, and duration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[[1]](https://docs.python.org/3/tutorial/classes.html) Python Documentation,
    Classes, A First Look at Classes. [Accessed at 28/1/2023]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2]](https://www.geeksforgeeks.org/self-in-python-class/) GeeksforGeeks, Classes,
    Self in Classes. [Accessed at 28/1/2023]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[3]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.01-The-Basics-of-waves.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020). Python programming and numerical methods:
    A guide for engineers and scientists, Fourier Transform, The Basics of waves.
    Academic Press.'
  prefs: []
  type: TYPE_NORMAL
