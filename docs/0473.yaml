- en: Use Classes for Generating Signals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类来生成信号
- en: 原文：[https://towardsdatascience.com/use-classes-for-generating-signals-6694d22e9a80?source=collection_archive---------14-----------------------#2023-02-01](https://towardsdatascience.com/use-classes-for-generating-signals-6694d22e9a80?source=collection_archive---------14-----------------------#2023-02-01)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/use-classes-for-generating-signals-6694d22e9a80?source=collection_archive---------14-----------------------#2023-02-01](https://towardsdatascience.com/use-classes-for-generating-signals-6694d22e9a80?source=collection_archive---------14-----------------------#2023-02-01)
- en: Classes == More Code Readability
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类 == 更好的代码可读性
- en: '[](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----6694d22e9a80--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----6694d22e9a80---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)
    ·7 min read·Feb 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6694d22e9a80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&user=Omar+Alkousa&userId=f8302b9534b5&source=-----6694d22e9a80---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----6694d22e9a80---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6694d22e9a80--------------------------------)
    ·7分钟阅读·2023年2月1日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6694d22e9a80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&user=Omar+Alkousa&userId=f8302b9534b5&source=-----6694d22e9a80---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6694d22e9a80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&source=-----6694d22e9a80---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6694d22e9a80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-classes-for-generating-signals-6694d22e9a80&source=-----6694d22e9a80---------------------bookmark_footer-----------)'
- en: During your work with signal data, you might end up programming multiple functions
    and methods that can implement the process you want to use on the signal data.
    However, at some point, it might be hard to keep tracking the quality of your
    methods applied to signals without prior knowledge of this data. Therefore, generating
    signal data with prior known parameters helps you better understand your program
    and method. Generating signals, especially sinusoidal signals, is very common
    in signal processing studies. And it is usually done for testing or to represent
    the use of different signal processing techniques, such as Discrete Fourier Transform,
    Wavelet analysis, etc.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理信号数据时，你可能需要编写多个函数和方法来实现你想要应用于信号数据的处理过程。然而，有时在没有先前了解这些数据的情况下，跟踪你对信号应用的方法的质量可能会很困难。因此，生成具有已知参数的信号数据可以帮助你更好地理解你的程序和方法。生成信号，特别是正弦信号，在信号处理研究中非常常见。通常，它用于测试或展示不同的信号处理技术，如离散傅里叶变换、小波分析等。
- en: '![](../Images/d173ffc350260a75e671a5154b44a7d4.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d173ffc350260a75e671a5154b44a7d4.png)'
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In this post, we will learn how to use classes to build a signal generator that
    you can use to generate sinusoidal signals for further understanding signal processing
    methods.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将学习如何使用类构建一个信号生成器，以便生成正弦信号以进一步理解信号处理方法。
- en: Let’s start our coding journey with a simple code that generate a sinusoidal
    signal.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的代码开始，它生成一个正弦信号。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/40d60949f424653fc269ad3cc6031114.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/40d60949f424653fc269ad3cc6031114.png)'
- en: Generate a signal using Numpy package. [Image by the Author]
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Numpy 包生成信号。[作者提供的图片]
- en: Why classes?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择类？
- en: From the code above, it seems we can generate signals without using classes.
    So, why the classes are a good choice? [[1]](https://docs.python.org/3/tutorial/classes.html)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码来看，我们似乎可以在不使用类的情况下生成信号。那么，为什么类是一个好的选择呢？[[1]](https://docs.python.org/3/tutorial/classes.html)
- en: The data is more controllable when using classes as you can build your object
    and methods that can be applied to control and get the signals without repeat
    coding like the above.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类时数据更可控，因为你可以构建你的对象和方法，这些方法可以用于控制和获取信号，而不需要像上述那样重复编码。
- en: Using classes brings you more functionality. Classes allow you to define variables
    and functions as attributes.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类可以带来更多功能。类允许你将变量和函数定义为属性。
- en: More readability and flexibility of your code. With classes, your code becomes
    easier to be understood and used.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高代码的可读性和灵活性。使用类后，你的代码更容易理解和使用。
- en: Classes play a major role in building packages. If you work a lot with signal
    data, you might consider building a special package that helps you with better
    and faster signal data analysis work.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类在构建包中起着重要作用。如果你经常处理信号数据，你可能会考虑构建一个专门的包，帮助你更好、更快地进行信号数据分析工作。
- en: '[**“Think DSP”**](https://github.com/AllenDowney/ThinkDSP.git) is a great example
    of building a package specifically for Digital Signal Processing. [Allen Downey](https://medium.com/u/564e295fb7cf?source=post_page-----6694d22e9a80--------------------------------)
    has his thoughts and experience in signal processing implemented into this package,
    from generating signals to analyzing spectrums and more.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[**“Think DSP”**](https://github.com/AllenDowney/ThinkDSP.git) 是一个专门为数字信号处理构建的优秀示例。[艾伦·道尼](https://medium.com/u/564e295fb7cf?source=post_page-----6694d22e9a80--------------------------------)将他在信号处理方面的思考和经验融入了这个包，从生成信号到分析谱图等。'
- en: Classes, a Simple Start
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类，简单的开始
- en: Defining a class is similar to defining functions. First, you need a proper
    name for your class. There are no such rules for naming a class but it’s preferred
    to be short and related to its functionality. Also, it’s common. Let’s define
    a class for our signal generator.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个类类似于定义函数。首先，你需要为你的类取一个适当的名字。虽然没有命名类的硬性规定，但最好简短且与其功能相关。同时，这也是一种常见的做法。让我们为我们的信号生成器定义一个类。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Different objects can be defined inside the class. These objects can be variables
    or functions and can be passed as methods or attributes of the class. Variables
    in our signal generator class might be the frequency and amplitude of the signal.
    Let’s also define a function that prints these variables.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在类内部可以定义不同的对象。这些对象可以是变量或函数，可以作为类的方法或属性传递。我们信号生成器类中的变量可能是信号的频率和幅度。让我们还定义一个打印这些变量的函数。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the code above, **“self”** represents the instance of the class and it’s
    used to access the attributes of the class and to bind the attributes with the
    given arguments [[2]](https://www.geeksforgeeks.org/self-in-python-class/). You
    can use any word other than “self” as the name has absolutely no special meaning
    to Python. Note, however, that by not following the convention your code may be
    less readable to other Python programmers [[1]](https://docs.python.org/3/tutorial/classes.html).
    One last thing about the code above is the statement directly after defining the
    class. This is the documentation that describes the functionality of the class.
    It’s important to be implemented in your class as it makes your code more readable.
    The user of the class can access the documentation using the help function in
    python.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，**“self”** 代表类的实例，它用于访问类的属性，并将属性与给定的参数绑定 [[2]](https://www.geeksforgeeks.org/self-in-python-class/)。你可以使用除了
    “self” 之外的任何词作为名称，因为该名称对 Python 没有特殊含义。然而，请注意，如果不遵循这一惯例，你的代码可能会对其他 Python 程序员的可读性降低
    [[1]](https://docs.python.org/3/tutorial/classes.html)。关于上面的代码，还有一点是定义类之后的语句。这是描述类功能的文档。将其实现到你的类中很重要，因为它使你的代码更具可读性。类的用户可以使用
    Python 中的 help 函数访问文档。
- en: The code below represents how to access the variables or the functions of a
    class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码表示如何访问类的变量或函数。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A Special Method for Classes
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类的特殊方法
- en: Until now, not much flexibility has been presented by the classes above. But,
    fortunately, Python provides special methods that can be used to make the class
    more controllable. The most important method that we will discuss is the **__init__()**
    method. It is used to instantiate the class and its parameters customized to a
    specific initial state.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，上述类并没有展示太多灵活性。但幸运的是，Python 提供了可以用来使类更具可控性的特殊方法。我们将讨论的最重要的方法是 **__init__()**
    方法。它用于实例化类并将其参数自定义为特定的初始状态。
- en: With that in mind, calling a class object will automatically invoke the init
    method and instantiate all the variables and functions implemented into the init
    method [[1]](https://docs.python.org/3/tutorial/classes.html). The code below
    is a modification done on the previous code by defining the init method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这一点，调用类对象将自动调用 init 方法并实例化所有在 init 方法中实现的变量和函数 [[1]](https://docs.python.org/3/tutorial/classes.html)。下面的代码是在之前的代码基础上修改的，通过定义
    init 方法来完成。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now if we try to define a Signal object, we need to pass the frequency and the
    amplitude of the signal.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试定义一个 Signal 对象，我们需要传递信号的频率和幅度。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that we understand how to define classes and their objects along with the
    special initializing method. It’s time to build the signal generator class that
    we want from the beginning. First, we need to point out the parameters we will
    implement in the init() method. The general form of a sinusoidal wave can be given
    following the equation [[3]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.01-The-Basics-of-waves.html):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们理解了如何定义类及其对象以及特殊的初始化方法。是时候构建我们从一开始就想要的信号生成器类了。首先，我们需要指出在 init() 方法中实现的参数。正弦波的一般形式可以用以下方程表示
    [[3]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.01-The-Basics-of-waves.html):'
- en: '*y*(*t*)=*A*.*sin*(2*πf*+*ϕ*)'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*y*(*t*)=*A*.*sin*(2*πf*+*ϕ*)'
- en: 'Where:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '***A*:** The amplitude of the signal'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***A*:** 信号的幅度'
- en: '***f* :** The frequency of the signal [Hz]'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***f* :** 信号的频率 [Hz]'
- en: '***ϕ*:** The phase of the signal'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***ϕ*:** 信号的相位'
- en: 'Two additional parameters should be added to our variables:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 应该将两个额外的参数添加到我们的变量中：
- en: The **duration** of the signal, in seconds
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号的 **duration**，以秒为单位
- en: The **sampling rate**, samples per second
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采样率**，每秒样本数'
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s Use our Signal Class
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们使用我们的 Signal 类
- en: Suppose we want to generate a signal that is the sum of three sinusoidal signals.
    The frequencies of these three signals are (20, 2, 7)Hz, respectively. The amplitudes
    of these three signals are (2, 6, 1), respectively. The sampling rate of the signals
    is 1000\. And lastly, the duration of the signals is 3 seconds. Let’s leave the
    phase of the signals as it is, 0.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要生成一个由三个正弦信号之和组成的信号。这三个信号的频率分别是 (20, 2, 7)Hz。这三个信号的幅度分别是 (2, 6, 1)。信号的采样率是
    1000。最后，信号的持续时间是 3 秒。我们保持信号的相位为 0。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/23df058e93925562b52b36ec09c9fc44.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/23df058e93925562b52b36ec09c9fc44.png)'
- en: Example generating signal using our Signal class. [Image by the Author]
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的 Signal 类生成信号的示例。[作者提供的图片]
- en: Conclusion
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We’ve pointed out some of the useful properties of the code when using classes,
    e.g., more control of the data, more functionality of the code, and more readability
    and flexibility of your code.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指出了一些使用类时代码的有用属性，例如，更好的数据控制、更强的代码功能，以及更好的代码可读性和灵活性。
- en: We’ve learned how to build a class in python step-by-step. We started by defining
    the class and how to define a variable or a function as an object and pass it
    with the class as methods or attributes.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经逐步学习了如何在 Python 中构建一个类。我们从定义类及如何将变量或函数定义为对象开始，然后将其作为方法或属性与类一起传递。
- en: We’ve learned about the special method __init__() and how it is used to instantiate
    the class and its parameters customized to a specific initial state, which gives
    the user more control of the data.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学习了特殊方法__init__()及其如何用于实例化类，并将参数定制为特定的初始状态，这使得用户能够更好地控制数据。
- en: We’ve built our final class as a signal generator that you can use to get sinusoidal
    signals with a specific frequency, sampling rate, amplitude, and duration.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们构建了最终的类作为一个信号生成器，您可以用它来获取具有特定频率、采样率、振幅和持续时间的正弦信号。
- en: References
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1]](https://docs.python.org/3/tutorial/classes.html) Python Documentation,
    Classes, A First Look at Classes. [Accessed at 28/1/2023]'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1]](https://docs.python.org/3/tutorial/classes.html) Python 文档，类，类的初步介绍。
    [访问时间：2023年1月28日]'
- en: '[[2]](https://www.geeksforgeeks.org/self-in-python-class/) GeeksforGeeks, Classes,
    Self in Classes. [Accessed at 28/1/2023]'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2]](https://www.geeksforgeeks.org/self-in-python-class/) GeeksforGeeks，类，类中的
    self。 [访问时间：2023年1月28日]'
- en: '[[3]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.01-The-Basics-of-waves.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020). Python programming and numerical methods:
    A guide for engineers and scientists, Fourier Transform, The Basics of waves.
    Academic Press.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[[3]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.01-The-Basics-of-waves.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020). 《Python 编程与数值方法：工程师和科学家的指南》，傅里叶变换，波的基础。学术出版社。'
