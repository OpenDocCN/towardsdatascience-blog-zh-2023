["```py\nPlace Name,Latitude,Longitude\nAberdeen,57.149651,-2.099075\nAyr,55.458565,-4.629179\nBasildon,51.572376,0.470009\nBath,51.380001,-2.36\nBedford,52.136436,-0.460739\n...\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('gb_cities.csv')\ncoordinates = df[['Longitude', 'Latitude']].values\nnames = df['Place Name'].values\n```", "```py\nimport routingpy as rp\nimport numpy as np\n\napi_key = # get a free key at https://www.graphhopper.com/\napi = rp.Graphhopper(api_key=api_key)\nmatrix = api.matrix(locations=coordinates, profile='car')\ndurations = np.matrix(matrix.durations)\nprint(durations)\n```", "```py\nmatrix([[    0, 10902, 30375, ..., 23380, 25233, 19845],\n        [10901,     0, 23625, ..., 16458, 18312, 13095],\n        [30329, 23543,     0, ...,  8835,  9441, 12260],\n        ...,\n        [23397, 16446,  9007, ...,     0,  2789,  7924],\n        [25275, 18324,  9654, ...,  2857,     0,  9625],\n        [19857, 13071, 12340, ...,  8002,  9632,     0]])\n```", "```py\nmatrix([[0, 5, 2],\n        [7, 0, 4],\n        [3, 4, 0]])\n```", "```py\nmatrix([[ 0, 99, 99,  0,  7,  3],\n        [99,  0, 99,  5,  0,  4],\n        [99, 99,  0,  2,  4,  0],\n        [ 0,  5,  2,  0, 99, 99],\n        [ 7,  0,  4, 99,  0, 99],\n        [ 3,  4,  0, 99, 99,  0]])\n```", "```py\ndef symmetricize(m, high_int=None):\n\n    # if high_int not provided, make it equal to 10 times the max value:\n    if high_int is None:\n        high_int = round(10*m.max())\n\n    m_bar = m.copy()\n    np.fill_diagonal(m_bar, 0)\n    u = np.matrix(np.ones(m.shape) * high_int)\n    np.fill_diagonal(u, 0)\n    m_symm_top = np.concatenate((u, np.transpose(m_bar)), axis=1)\n    m_symm_bottom = np.concatenate((m_bar, u), axis=1)\n    m_symm = np.concatenate((m_symm_top, m_symm_bottom), axis=0)\n\n    return m_symm.astype(int) # Concorde requires integer weights\n```", "```py\nmatrix([[     0, 461120, 461120, ...,  23397,  25275,  19857],\n        [461120,      0, 461120, ...,  16446,  18324,  13071],\n        [461120, 461120,      0, ...,   9007,   9654,  12340],\n        ...,\n        [ 23397,  16446,   9007, ...,      0, 461120, 461120],\n        [ 25275,  18324,   9654, ..., 461120,      0, 461120],\n        [ 19857,  13071,  12340, ..., 461120, 461120,      0]])\n```", "```py\nvirtualenv venv                                  # create virtual environment\nsource venv/bin/activate                         # activate it\ngit clone https://github.com/jvkersch/pyconcorde # clone git repo\ncd pyconcorde                                    # change directory\npip install -e .                                 # install pyconcorde\n```", "```py\nfrom concorde.problem import Problem\nfrom concorde.concorde import Concorde\n\ndef solve_concorde(matrix):\n    problem = Problem.from_matrix(matrix)\n    solver = Concorde()\n    solution = solver.solve(problem)\n    print(f'Optimal tour: {solution.tour}')\n    return solution\n```", "```py\ndurations_symm = symmetricize(durations)\nsolution = solve_concorde(durations_symm)\n```", "```py\nOptimal tour: [0, 79, 22, 101, 25, 104, 48, 127, 68, 147, 23, 102, 58, 137, 7, 86, 39, 118, 73, 152, 78, 157, 36, 115, 42, 121, 62, 141, 16, 95, 20, 99, 51, 130, 40, 119, 19, 98, 59, 138, 50, 129, 54, 133, 27, 106, 10, 89, 4, 83, 66, 145, 33, 112, 14, 93, 2, 81, 45, 124, 32, 111, 11, 90, 29, 108, 34, 113, 24, 103, 8, 87, 17, 96, 56, 135, 64, 143, 61, 140, 75, 154, 52, 131, 71, 150, 18, 97, 3, 82, 9, 88, 74, 153, 55, 134, 72, 151, 28, 107, 12, 91, 70, 149, 65, 144, 35, 114, 31, 110, 77, 156, 63, 142, 41, 120, 69, 148, 6, 85, 76, 155, 67, 146, 15, 94, 44, 123, 47, 126, 60, 139, 57, 136, 38, 117, 13, 92, 5, 84, 43, 122, 49, 128, 46, 125, 21, 100, 1, 80, 30, 109, 53, 132, 37, 116, 26, 105]\n```", "```py\n# pick alternate elements: these correspond to the originals\ntour = solution.tour[::2]\n\n# order the original coordinates and names\ncoords_ordered = [coordinates[i].tolist() for i in tour]\nnames_ordered = [names[i] for i in tour]\n```", "```py\n['Aberdeen',\n 'Dundee',\n 'Edinburgh',\n 'Newcastle Upon Tyne',\n 'Sunderland',\n 'Durham',\n ...]\n```", "```py\n# add back in the first for a complete loop\ncoords_ordered_return = coords_ordered + [coords_ordered[0]]\n\n# obtain complete driving directions for the ordered loop\ndirections = api.directions(locations=coords_ordered_return, profile='car')\n```", "```py\nimport folium\ndef generate_map(coordinates, names, directions):\n\n    # folium needs lat, long\n    coordinates = [(y, x) for (x, y) in coordinates]\n    route_points = [(y, x) for (x, y) in directions.geometry]\n    lat_centre = np.mean([x for (x, y) in coordinates])\n    lon_centre = np.mean([y for (x, y) in coordinates])\n    centre = lat_centre, lon_centre\n\n    m = folium.Map(location=centre, zoom_start=1, zoom_control=False)\n\n    # plot the route line\n    folium.PolyLine(route_points, color='red', weight=2).add_to(m)\n\n    # plot each point with a hover tooltip  \n    for i, (point, name) in enumerate(zip(coordinates, names)):\n        folium.CircleMarker(location=point,\n                      tooltip=f'{i}: {name}',\n                      radius=2).add_to(m)\n\n    custom_tile_layer = folium.TileLayer(\n        tiles='http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n        attr='CartoDB Positron',\n        name='Positron',\n        overlay=True,\n        control=True,\n        opacity=0.7  # Adjust opacity to control the level of greying out\n    )\n\n    custom_tile_layer.add_to(m)\n    folium.LayerControl().add_to(m)\n\n    sw = (np.min([x for (x, y) in coordinates]), np.min([y for (x, y) in coordinates]))\n    ne = (np.max([x for (x, y) in coordinates]), np.max([y for (x, y) in coordinates]))\n    m.fit_bounds([sw, ne])\n\n    return m\n\ngenerate_map(coords_ordered, names_ordered, directions).save('gb_cities.html')\n```", "```py\ndef generate_gpx_file(directions, filename):\n    gpx_template = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <gpx version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1\n        http://www.topografix.com/GPX/1/1/gpx.xsd\">\n        <trk>\n            <name>Track</name>\n            <trkseg>{}</trkseg>\n        </trk>\n    </gpx>\n    \"\"\"\n\n    trkseg_template = \"\"\"\n        <trkpt lat=\"{}\" lon=\"{}\"/>\n    \"\"\"\n\n    trkseg_elements = \"\"\n    for point in directions.geometry:\n        trkseg_elements += trkseg_template.format(point[1], point[0])\n\n    gpx_data = gpx_template.format(trkseg_elements)\n\n    with open(filename, 'w') as file:\n        file.write(gpx_data)\n\ngenerate_gpx_file(directions, 'gb_cities.gpx')\n```"]