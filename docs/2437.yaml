- en: FitBot — A Fitness Chatbot Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/fitbot-a-fitness-chatbot-agent-dca471710775?source=collection_archive---------3-----------------------#2023-07-28](https://towardsdatascience.com/fitbot-a-fitness-chatbot-agent-dca471710775?source=collection_archive---------3-----------------------#2023-07-28)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to Create a Chatbot Agent Leveraged by OpenAI Function Calling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://solano-todeschini.medium.com/?source=post_page-----dca471710775--------------------------------)[![Solano
    Todeschini](../Images/75e871340659c8df37f558b74c9d73c5.png)](https://solano-todeschini.medium.com/?source=post_page-----dca471710775--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dca471710775--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dca471710775--------------------------------)
    [Solano Todeschini](https://solano-todeschini.medium.com/?source=post_page-----dca471710775--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F618a52c38c0c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffitbot-a-fitness-chatbot-agent-dca471710775&user=Solano+Todeschini&userId=618a52c38c0c&source=post_page-618a52c38c0c----dca471710775---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dca471710775--------------------------------)
    ·13 min read·Jul 28, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdca471710775&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffitbot-a-fitness-chatbot-agent-dca471710775&user=Solano+Todeschini&userId=618a52c38c0c&source=-----dca471710775---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdca471710775&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffitbot-a-fitness-chatbot-agent-dca471710775&source=-----dca471710775---------------------bookmark_footer-----------)![](../Images/13dcc8b397df4ee5a33d4e658c7210ab.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Gary Butterfield](https://unsplash.com/@garybpt?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an era where health consciousness is at the forefront and the pursuit of
    a balanced lifestyle has become a universal aspiration, nutrition undeniably stands
    as a central pillar.
  prefs: []
  type: TYPE_NORMAL
- en: However, the intricate nature of dietary plans and the overwhelming wealth of
    nutritional data often serve as obstacles in our path to achieving this balance.
    A common instance of such a scenario is faced by individuals with diabetes, who
    require consistent and accurate nutritional guidance to manage their blood sugar
    levels effectively. Wouldn’t it be transformative to have access to a personalized
    nutritional assistant at our digital disposal?
  prefs: []
  type: TYPE_NORMAL
- en: In this context, leveraging technology to assist in nutritional guidance becomes
    not just beneficial but essential. By integrating cutting-edge Artificial Intelligence
    (AI) with a comprehensive nutritional database, it’s possible to create a powerful
    tool that can assist individuals in their health journey.
  prefs: []
  type: TYPE_NORMAL
- en: '***The code for this project is on this GitHub repository:* [*link*](https://github.com/solanovisitor/FitBot)****'
  prefs: []
  type: TYPE_NORMAL
- en: The Project Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core of the project involves building a chatbot, named FitBot, which is
    powered by OpenAI’s functions and is based on the ReAct (Reasoning and Acting)
    framework (Figure 1).
  prefs: []
  type: TYPE_NORMAL
- en: It is designed to deliver nutritional information and advice, achieving this
    by interpreting user’s dietary habits and integrating an API of nutritional data.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By leveraging the ReAct framework, FitBot maintains the interactive nature of
    a conversation and can provide a detailed explanation for each piece of advice
    it gives. It also connects with an external nutritional database, ensuring accurate
    and up-to-date dietary advice.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb41e77201a3657f4dc62c043cc52c2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: ReAct combines reasoning (e.g. chain-of-thought prompting) and acting.
    Image Source: [link](https://react-lm.github.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: Behind the Scenes with FitBot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FitBot combines OpenAI’s GPT-4 capabilities with ReAct’s dynamic processing
    to understand dietary queries, suggest suitable alternatives, and deliver personalized
    advice. It does this while maintaining a conversational tone, making nutritional
    advice accessible and engaging.
  prefs: []
  type: TYPE_NORMAL
- en: What sets FitBot apart is its capability to interface with an external nutritional
    database. This allows FitBot to provide precise and updated information to the
    users, ensuring the advice given is reliable and based on accurate data.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, we’ll delve into the code and see how FitBot’s components
    are developed and interact with each other, providing a comprehensive look at
    the inner workings of this innovative project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building FitBot: The Code Explained'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This project has four main scripts used for processing data and displaying
    it in a UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fitness_agent.py**: This file contains the `FitnessAgent` class, which leverages
    OpenAI functions to enable the functionalities required by FitBot.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**chatbot.py**: This file contains the code for the user interface of FitBot,
    which is implemented using the Gradio library.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**agents.py**: This file contains the `Agent` class, which is used to handle
    conversations with the OpenAI API. This code is based on [this script](https://github.com/aurelio-labs/funkagent/blob/main/funkagent/agents.py)
    developed by [James Briggs](https://github.com/jamescalam) in the funkagent library.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**parser.py**: This file contains the code for parsing functions docstrings
    into OpenAI''s functions descriptions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining our functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a chatbot that can provide accurate and useful nutritional and fitness
    advice, we needed to consider what information would be most valuable to the end
    user. This is the reason behind the implementation of the functions explained
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '1.`**get_nutritional_info**`: This function is crucial for any fitness-oriented
    chatbot. People often lack clear information about the nutritional content of
    the foods they eat. By using the [Nutrition endpoint from API Ninjas](https://api-ninjas.com/api/nutrition)
    to fetch real-time nutritional data for various food items, we can help users
    make informed dietary decisions. The data returned can include details like calories,
    protein, carbs, fats, and more, offering a comprehensive look at the nutritional
    profile of a food item.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '2.`**calculate_bmr**`: The Basal Metabolic Rate (BMR) is a key figure in understanding
    an individual’s metabolism. It is the amount of energy expended while at rest
    and is closely related to one’s age, weight, height, and sex. The ability to calculate
    BMR gives the chatbot a baseline to help users understand how many calories their
    bodies need to function, even without any physical activity.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '3.`**calculate_tdee**`: Understanding one’s Total Daily Energy Expenditure
    (TDEE) is vital for creating a personalized diet or exercise plan. TDEE takes
    into account not only BMR but also the calories burned during daily activities
    and exercise. Knowing their TDEE can help users plan their diet and exercise routines
    more effectively, to either maintain, lose or gain weight.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '4.`**calculate_ibw**`: Knowing the Ideal Body Weight (IBW) can provide users
    with a target weight that is considered healthy for their height and gender. While
    IBW is not a perfect measure (it doesn’t consider factors like muscle mass), it
    does give users a general idea of where their weight should be for optimal health.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '4\. `**calculate_bmi**`: Body Mass Index (BMI) is a simple calculation using
    a person''s height and weight. The formula is BMI = kg/m^2 where kg is a person''s
    weight in kilograms and m^2 is their height in meters squared. BMI does not measure
    body fat directly, but research has shown that BMI is moderately correlated with
    more direct measures of body fat. It provides a helpful gauge to understand if
    a person is underweight, at a healthy weight, overweight, or obese.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Building the Agent: Wrapping the Functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the essential functions established, our next step is to integrate these
    into our chatbot agent. This encapsulation enables the bot to leverage the functions
    and provide relevant, accurate responses based on user queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can create the agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the functions it is enriched with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Engaging with the Agent: User Conversations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having encapsulated our defined functions within the FitnessAgent, we can now
    simulate a conversation with our bot. Using the `ask()` method of the FitnessAgent
    class, we can easily feed user queries into our bot and print out the responses
    it generates.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s ask the bot for some nutritional information about a common
    food item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, FitBot effectively uses the `get_nutritional_info()` function
    to fetch and display the nutritional value of a banana.
  prefs: []
  type: TYPE_NORMAL
- en: 'The FitBot can handle more complex requests as well. For instance, it can calculate
    a person’s Total Daily Energy Expenditure (TDEE) if provided with the required
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s compare this output with vanilla ChatGPT based on GPT-4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Integrating Chatbot with User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have built our fitness agent and equipped it with useful features,
    we want to present it in an easy-to-use interface.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we use Gradio, a Python library that allows us to create shareable
    web-based user interfaces swiftly and conveniently. In this section, we’ll walk
    you through integrating our chatbot with a Gradio user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the overall structure of our interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is our `main` function, the entry point of our script. We start by creating
    text boxes for the user to input their OpenAI API key and Nutrition API key. The
    keys are set to the type `password` to hide the input. Next, we provide a text
    box for the user to ask their question. The response from the bot will be displayed
    as HTML in an area labelled "Updated Conversation".
  prefs: []
  type: TYPE_NORMAL
- en: The inputs and output are then passed to the Gradio interface, which is launched
    when the script is run.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `get_response` function interacts with the fitness agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In `get_response`, we set the OpenAI and Nutrition API keys using the functions
    `set_openai_api_key` and `set_nut_api_key`, and then initialize our fitness agent.
    We then call the agent's `ask` method with the user's question and store the conversation
    history. Each message in the conversation history is then formatted as an HTML
    string and added to `updated_conversation`. This HTML string is returned and displayed
    in the Gradio interface.
  prefs: []
  type: TYPE_NORMAL
- en: A Glimpse of the Resulting Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After integrating the essential calculations and the conversation logic, and
    encapsulating all of this into a visually pleasing user interface with Gradio,
    we have our FitBot ready to interact with!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how the final interface looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f666ec6f71c1c6b0b4568e8ac7d5446f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Gradio UI for the chatbot. Image by Author.'
  prefs: []
  type: TYPE_NORMAL
- en: On the interface, you’ll notice three input boxes where you can enter the necessary
    keys for OpenAI and the API Ninjas Nutrition endpoint, as well as the user message
    to the Fitness Agent.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article detailed the creation of FitBot, a comprehensive Fitness Agent
    using OpenAI’s GPT-4, a powerful AI model capable of understanding and responding
    to complex user queries.
  prefs: []
  type: TYPE_NORMAL
- en: We started by building functions to calculate key health metrics like the Basal
    Metabolic Rate (BMR), Total Daily Energy Expenditure (TDEE), and Body Mass Index
    (BMI). These calculations form the base for the Fitness Agent’s ability to provide
    accurate and tailored fitness and nutritional advice.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we incorporated an integration with a Nutrition endpoint from API Ninjas.
    This allowed the Fitness Agent to access and provide accurate nutritional information,
    a crucial component for any comprehensive fitness and diet plan.
  prefs: []
  type: TYPE_NORMAL
- en: We then showcased how to construct a conversation logic to make the Fitness
    Agent more interactive. It’s capable of handling a conversational flow, enabling
    it to answer varied user queries and guide users on their fitness journey effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we encapsulated all these functionalities into a visually appealing
    user interface using Gradio. The result is a Fitness Agent that is not only intelligent
    but also user-friendly, offering clear and comprehensive advice in an easily digestible
    format.
  prefs: []
  type: TYPE_NORMAL
- en: '***TL;DR****: In this article, we built FitBot, a Fitness Agent using OpenAI’s
    GPT-4, capable of providing personalized fitness and nutrition advice. We implemented
    functions for calculating key health metrics (BMR, TDEE, BMI), integrated with
    a Nutrition API for accurate dietary information, and wrapped it all in a user-friendly
    interface using Gradio. This project showcases the power of AI in health and fitness,
    simplifying complex calculations, offering personalized advice, and delivering
    it all through an appealing user interface.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow me on [Linkedin](https://www.linkedin.com/in/solano-todeschini/)!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
