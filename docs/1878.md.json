["```py\nAnthropology \nChem E \nComputer Science\nBusiness and Law\nDrama\ncs\nIMB\n```", "```py\n1\\. Arts and Humanities: Literature and arts.\n2\\. Social Sciences: psychology, sociology, and political science\n3\\. Business and Management: marketing, finance, economics, MBA\n4\\. Life Sciences: Biology, environmental,agriculture-related\n5\\. Engineering and Technology: Electrical, mechanical, etc.\n6\\. Medicine Health and Allied Sciences: Nursing, medical school\n7\\. All Other Programs: Everything else.\n\nThe above information pertains to categories of undergraduate programs. \nCategorize the below data into one of the program categories above.\n\nDesired Format: CSV of data row, program name\n\nData\n###\nDrama\nLiterature\nPhysics\nHealth sciences\nMechanical Engineering\n###\n```", "```py\nDrama, Arts and Humanities: Literature and arts\nIMB, All Other Programs: Everything else\nHealth sciences, Medicine Health and Allied Sciences: Nursing, medical school\nMBA, Business and Management: marketing, finance, economics, MBA\nMechanical Engineering, Engineering and Technology: Electrical, mechanical, etc.\n```", "```py\n1\\. Arts and Humanities: Literature and arts.\n2\\. Social Sciences: psychology, sociology, and political science\n3\\. Business and Management: marketing, finance, economics, MBA\n4\\. Life Sciences: Biology, environmental,agriculture-related\n5\\. Engineering and Technology: Electrical, mechanical, etc.\n6\\. Medicine Health and Allied Sciences: Nursing, medical school\n7\\. All Other Programs: Everything else.\n\nThe above information pertains to categories of undergraduate programs. \nCategorize the below data into one of the program categories above.\n\nDesired Format: JSON format of an array with response number, program number\n\nExample Example output:  [[1,7],[2,1],[3,5],[4,8],[5,7]]\n\nData\n###\n1\\. Drama\n2\\. IMB\n3\\. Health sciences\n4\\. MBA\n5\\. Mechanical Engineering\n###\n```", "```py\n[\n  [1, 1]\n  [2, 3]\n  [3, 6]\n  [4, 3]\n  [5, 5]\n]\n```", "```py\n{ \n  “model”: “gpt-3.5-turbo”, \n  “temperature”: 0,\n  \"n\": 1,\n  “messages”: [\n     {“role”: “user”, “content”: “Hello, I'm a nail.”}\n  ]\n}\n```", "```py\nfs.createReadStream(fileName)\n  .pipe(csv())\n  .on('data', (data) => rows.push(data))\n  .on('end', async () => {\n   // Reading is done. Call classifier here\n     . . .      \n}\n```", "```py\nfor(index = 0; index < totalDataPoints; ++index) {\n        dataText += (index+1).toString() + \". \" \n                        + uniqueData[index] + \"\\n\";\n        requestCount++;\n        if (requestCount>batchSize||index==totalDataPoints-1){\n           dataText += \"###\\n\";\n           // We have loaded batchSize(50) response. \n           // Now construct the prompt \n           ...\n      }\n}\n```", "```py\nlet prompt = categoriesText + mainPrompt + dataText;\nlet payload = {\n    model: \"gpt-3.5-turbo\",\n    temperature: 0,\n    messages: [ \n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\",\"content\": prompt }\n    ]\n};\n\ntry {\n   const response = await openai.createChatCompletion(payload);\n   let mapping = JSON.parse(response.data.choices[0].message.content); \n   // Here save the mappings\n   ...\n\n} catch (error) {\n   console.error('API Error:',error);\n}\n```", "```py\nfor (let row of rows) {\n    srcVal = row[srcCol].trim();\n    if (!row[targetCol] && dataMapping[srcVal])\n        row[targetCol] = dataMapping[srcVal];\n}\n\nstringify(rows, {\n    header: true\n}, function (err, output) {\n   fs.writeFile(__dirname+'/'+destFileName, output,\n       function(err, result) {\n          if(err) console.log('error', err);\n       });\n});\n```"]