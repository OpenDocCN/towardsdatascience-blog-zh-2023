- en: 7 Lessons Learned on Creating a Complete Product Using ChatGPT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ChatGPT 创建完整产品的7个经验教训
- en: 原文：[https://towardsdatascience.com/7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85?source=collection_archive---------2-----------------------#2023-08-05](https://towardsdatascience.com/7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85?source=collection_archive---------2-----------------------#2023-08-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85?source=collection_archive---------2-----------------------#2023-08-05](https://towardsdatascience.com/7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85?source=collection_archive---------2-----------------------#2023-08-05)
- en: ChatGPT’s coding abilities make it super easy to code entire products in no-time
    — if you know how to use it the right way
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChatGPT 的编码能力使得在短时间内完成整个产品变得非常简单——前提是你知道如何正确使用它
- en: '[](https://shakedzy.medium.com/?source=post_page-----462038856c85--------------------------------)[![Shaked
    Zychlinski 🎗️](../Images/4d050b916bccab64df3c02236b3129eb.png)](https://shakedzy.medium.com/?source=post_page-----462038856c85--------------------------------)[](https://towardsdatascience.com/?source=post_page-----462038856c85--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----462038856c85--------------------------------)
    [Shaked Zychlinski 🎗️](https://shakedzy.medium.com/?source=post_page-----462038856c85--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://shakedzy.medium.com/?source=post_page-----462038856c85--------------------------------)[![Shaked
    Zychlinski 🎗️](../Images/4d050b916bccab64df3c02236b3129eb.png)](https://shakedzy.medium.com/?source=post_page-----462038856c85--------------------------------)[](https://towardsdatascience.com/?source=post_page-----462038856c85--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----462038856c85--------------------------------)
    [Shaked Zychlinski 🎗️](https://shakedzy.medium.com/?source=post_page-----462038856c85--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F43218078e688&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85&user=Shaked+Zychlinski+%F0%9F%8E%97%EF%B8%8F&userId=43218078e688&source=post_page-43218078e688----462038856c85---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----462038856c85--------------------------------)
    ·9 min read·Aug 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F462038856c85&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85&user=Shaked+Zychlinski+%F0%9F%8E%97%EF%B8%8F&userId=43218078e688&source=-----462038856c85---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F43218078e688&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85&user=Shaked+Zychlinski+%F0%9F%8E%97%EF%B8%8F&userId=43218078e688&source=post_page-43218078e688----462038856c85---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----462038856c85--------------------------------)
    ·9分钟阅读·2023年8月5日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F462038856c85&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85&user=Shaked+Zychlinski+%F0%9F%8E%97%EF%B8%8F&userId=43218078e688&source=-----462038856c85---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F462038856c85&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85&source=-----462038856c85---------------------bookmark_footer-----------)![](../Images/d5f9f954d8d215c025a78ee8ac90a7f1.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F462038856c85&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85&source=-----462038856c85---------------------bookmark_footer-----------)![](../Images/d5f9f954d8d215c025a78ee8ac90a7f1.png)'
- en: Generated using StableDiffusion
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 StableDiffusion 生成
- en: Not long ago I shared with you how I [created my own French tutor out of ChatGPT](/how-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb)
    (it’s [open-sourced](https://github.com/shakedzy/companion), by the way). I described
    how I designed the app (and specifically it’s backend) and how I connected and
    configured the different AI-based services. But there was one thing I pretty much
    skipped, which is how I created the frontend of the app. You see, I’m not a frontend
    programmer, and my knowledge of JavaScript sums up to the fact I know I need to
    place it within *<script></script>* tags.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，我与您分享了如何[从 ChatGPT 创建我自己的法语导师](/how-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb)（顺便说一下，它是[开源的](https://github.com/shakedzy/companion)）。我描述了如何设计应用（尤其是它的后端）以及如何连接和配置不同的基于
    AI 的服务。但有一件事我基本上跳过了，那就是如何创建应用的前端。你看，我不是前端程序员，我对 JavaScript 的了解仅限于知道需要将其放在*<script></script>*
    标签内。
- en: But the app I had in mind required a UI, and a quite dynamic one. That means
    HTML, JavaScript and CSS — but I had no idea how to even begin coding these.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但我心中设想的应用需要一个动态的用户界面。这意味着 HTML、JavaScript 和 CSS——但我完全不知道如何开始编写这些代码。
- en: What I did know is what I *wanted* it to look like. I had the design in my mind,
    and I knew how *I* would do it if I would’ve known how to code these. And so I
    decided to go for a new and quite radical approach — I’ll ask ChatGPT to write
    the code for me. At that point I already had experience with asking ChatGPT for
    code-related requests, but never have I tried something so complex.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道的是我*想要*它看起来的样子。我心中有设计构想，我知道如果我知道如何编码的话，我会怎么做。因此，我决定采用一种新的和相当激进的方法——我会让 ChatGPT
    为我编写代码。在那时，我已经有了向 ChatGPT 请求代码相关请求的经验，但从未尝试过如此复杂的任务。
- en: 'Well, as you’re reading these lines, you know it worked — I’ve created an entire
    app by simply instructing an LLM (Large Language Model) what I’d like to see.
    I really want to write this one more time, just to make sure we all understand
    what just happened: *an algorithm coded an entire app just by me explaining it
    in plain English.* 😲'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，当你读到这些文字时，你知道它成功了——我仅仅通过指示一个 LLM（大型语言模型）我想看到什么，就创建了一个完整的应用。我真的想再写一遍，只是为了确保我们都明白发生了什么：*一个算法仅仅通过我用简单英语解释，就编写了整个应用*。😲
- en: Still, as astonishing as it was, this process wasn’t as trivial as it might
    sound — and therefore I’d like to take the opportunity and share some tips I learned
    on how to generate complex code using ChatGPT.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这个过程并不像听起来那么简单——因此我想借此机会分享一些我在使用 ChatGPT 生成复杂代码时学到的技巧。
- en: 1\. Design it yourself
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 亲自设计
- en: LLMs are powerful tools for creating code and content, but they don’t *think*
    — the can only fulfill requests (or at least they try). That means it’s up to
    you to do the thinking, and specifically the design. Make sure you know how the
    final product should look like before you begin sending requests to generative
    model.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: LLMs 是创建代码和内容的强大工具，但它们不*思考*——它们只能执行请求（或者至少它们会尝试）。这意味着需要你来进行思考，特别是设计。在开始向生成模型发送请求之前，确保你知道最终产品应该是什么样子的。
- en: 'More on this — it’s up to you to do the research on what’s the best tech-stack
    for you. As you’ll need to break your complex app to steps (see #2 below), the
    LLM can’t foresee what the final product will look like, and might use sub-optimal
    libraries or services.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这点——你需要自行研究什么技术栈最适合你。由于你需要将复杂的应用拆分为步骤（参见下方第2点），LLM 无法预见最终产品的样子，可能会使用次优的库或服务。
- en: 'For example, the first UI ChatGPT generated for me was based on *tkinter*,
    which creates an actual application and not a web UI. This makes dynamic UI something
    much more complicated to create (and less standard these days). Another attempt
    was based on *steamlit*, which makes non-complex UIs super-easy to create, but
    again wasn’t designed for complex requests (for example: *“add a play-recording
    button only next to the user messages but only if the user recorded an audio”*).
    In my case, it was up to me to understand that using *Flask* will be the optimal
    way to go.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ChatGPT 为我生成的第一个 UI 基于*tkinter*，它创建的是一个实际应用而不是网页 UI。这使得创建动态 UI 变得更加复杂（而且现在不太标准）。另一个尝试是基于*steamlit*，它使得创建非复杂
    UI 非常简单，但同样没有设计用于复杂请求（例如：*“仅在用户消息旁边添加播放录音按钮，但仅在用户录制了音频时”*）。在我的情况下，最终决定使用*Flask*
    是最优的选择。
- en: 2\. Break it down to tasks & start simple
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 将其拆分为任务并从简单的开始
- en: If you ask ChatGPT to code the entire product all at once, good chance you’ll
    get a broken code. As “smart” as it is, don’t expect it to be able to pay attention
    to all given details all at once. Break your design to tasks and phases, starting
    with something rather simple, and adding on top of it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要求 ChatGPT 一次性编写整个产品的代码，很有可能会得到一段有问题的代码。尽管它“聪明”，但不要期望它能够一次性关注所有细节。将你的设计拆分成任务和阶段，从比较简单的开始，然后逐步增加。
- en: 'For example, here’s my final chat UI, the one I initially designed and planned:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，这里是我最终设计的聊天界面，即我最初设计和计划的界面：
- en: '![](../Images/bb4cf3a47f2797d501e732b465059387.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bb4cf3a47f2797d501e732b465059387.png)'
- en: The chatbot UI
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人界面
- en: 'You can see there are all sort of buttons and functionalities on the UI, and
    yet, my very first prompt to ChatGPT was:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到界面上有各种按钮和功能，而我最初对 ChatGPT 的提示是：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'No special buttons, no profile images next to the messages, nothing special.
    Just a simple chat UI, which is will be the core I’ll build upon. This prompt
    yielded 4 files:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 没有特别的按钮，没有消息旁的个人头像，没有其他特别之处。只是一个简单的聊天界面，这将是我构建的核心。这个提示生成了 4 个文件：
- en: A Python file functioning as the backend (using Flask)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个作为后端的 Python 文件（使用 Flask）
- en: An HTML file
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 HTML 文件
- en: A JavaScript file (using jQuery)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 JavaScript 文件（使用 jQuery）
- en: A CSS file
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 CSS 文件
- en: Once I had this, I could start making the product more complex.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我有了这些，我就可以开始使产品变得更复杂。
- en: You might think I just contradicted myself — telling you to break you app to
    small steps, yet confessing my first prompt generated four files. Per each request
    from ChatGPT, there’s a trade-off between how much code is required to complete
    the task versus how non-standard and specific it is. Asking for an entire chat
    UI will generate something quite general, yet requires a lot of code. Asking to
    “*add a translation button next to the tutor messages”*, and to also make sure
    it’s located on the right side of the message-bubble, always on the vertical-center
    and above the *play-sound* button is something very specific, and so it’ll be
    a request by itself.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得我自相矛盾 —— 说要将应用拆分成小步骤，但又承认我的第一次提示生成了四个文件。每个对 ChatGPT 的请求之间，在完成任务所需的代码量与其非标准和特定性的权衡。要求生成整个聊天界面会得到比较通用的东西，但需要大量代码。要求“*在导师消息旁边添加一个翻译按钮*”，并且确保它位于消息气泡的右侧，始终在垂直中心，并且在
    *播放声音* 按钮上方，这样的请求非常具体，因此它将是一个单独的请求。
- en: 3\. Explain carefully what you really want
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 仔细解释你真正想要的
- en: Each request and addition you’ll make to your product can potentially involve
    changes to more than one file (and to more than a single change per each file).
    That means new variables, functions and endpoints will be created at each such
    request, and will be referenced from different locations. The names provided to
    those will be given by ChatGPT, and it will do its best to provide them with meaningful
    names — but it can only do so it you’ll explain the context well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对你产品的请求和添加都可能涉及到多个文件的更改（每个文件可能有不止一个更改）。这意味着每次请求时都会创建新的变量、函数和端点，并且会从不同的位置引用它们。
    ChatGPT 会为这些提供名称，并尽力提供有意义的名称 —— 但前提是你要解释清楚上下文。
- en: 'For example, if you’d like to add a “Save” button to your product, prefer asking
    it like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，如果你想在你的产品中添加一个“保存”按钮，最好像这样提问：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'instead of a context-lacking prompt as so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是这样的缺乏上下文的提示：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Preferring context-rich prompts will yield better naming conventions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 倾向于丰富上下文的提示会产生更好的命名约定。
- en: 4\. Be very aware of exactly what you ask
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 非常清楚地知道你要问什么
- en: 'Here’s a true issue I has to solve and didn’t see coming: I wanted the UI to
    display the generated text from my French tutor as it is being streamed, similarly
    to the effect in ChatGPT. The Python API I was using to create the tutor’s response
    (OpenAI *ChatCompletion* API) returns a Python *Generator*, which was then needed
    to be consumed and printed on the screen. And so I asked ChatGPT:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我遇到的一个真正的问题，之前没预见到：我希望 UI 显示来自我的法语导师的生成文本，并且是实时流式显示，类似于 ChatGPT 的效果。我使用的 Python
    API（OpenAI *ChatCompletion* API）返回了一个 Python *Generator*，这需要被消费并打印到屏幕上。因此，我问 ChatGPT：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What I didn’t know — as I’ve never written any serious JavaScript in my life
    — was that I asked for something impossible; JavaScript has no way of handling
    a Python Generator. What happened was that ChatGPT gave me all sort of weird and
    completely useless solutions, as it tried to do exactly what I asked — alter the
    JavaScript code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道的是——因为我从未写过任何严肃的 JavaScript 代码——我要求的东西是不可能的；JavaScript 无法处理 Python 生成器。结果是
    ChatGPT 给了我各种奇怪且完全无用的解决方案，因为它试图完全按照我的要求——修改 JavaScript 代码。
- en: You have to remember that ChatGPT tries to fulfill your requests exactly as
    you asked, as long as they don’t violate its guidelines. What I truly needed at
    that point was for it to *tell me* I’m asking for something dumb, but that’s just
    not how it works.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须记住，ChatGPT 尝试完全按照你的要求来满足你的请求，只要这些请求不违反其指导方针。在那时我真正需要的是它*告诉我*我要求的东西很愚蠢，但这并不是它的工作方式。
- en: 'This issue was only fixed once *I figured out* I’m asking for the impossible
    (the old way — Google and StackOverflow), and altered my prompt to something like
    this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题只有在*我发现*自己在要求不可能的东西（老办法——Google 和 StackOverflow）之后才得到解决，并将我的提示更改为类似以下内容：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: which resulted in modifications to both the JavaScript *and* the Python file,
    which allowed the desired result.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致对 JavaScript *和* Python 文件进行了修改，从而实现了预期的结果。
- en: '![](../Images/38122452e132858f6d754376a14f10a9.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38122452e132858f6d754376a14f10a9.png)'
- en: Generated using StableDiffusion
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 StableDiffusion 生成
- en: 5\. LLMs cannot revert their code (and how to revert)
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. LLM 无法还原其代码（以及如何还原）
- en: While ChatGPT is exceptional at writing code, it’s still just a language model,
    and it doesn’t do well on reverting its own changes — especially if you ask it
    to revert and go back two or three prompts back. When working with LLMs to generate
    code in phases, I highly recommend always keeping a copy of the last working version
    of the code you’re happy with; so if some new code ChatGPT added is broken and
    cannot be repaired, you can easily revert your code to when it worked last.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ChatGPT 在编写代码方面表现出色，但它仍然只是一个语言模型，它在还原自己修改的内容方面做得不好——尤其是当你要求它还原并回到两三次之前的提示时。与
    LLMs 进行分阶段生成代码时，我强烈建议始终保留你满意的最后一个工作版本的代码副本；这样，如果 ChatGPT 添加的新代码出现问题且无法修复，你可以轻松将代码还原到最后一个正常工作的版本。
- en: 'But there’s a catch — because if you do revert your code, you’ll *need* to
    revert ChatGPT too, to make sure it knows exactly how your code looks now. The
    best way to the that it by starting a new session, and kicking it off with a prompt
    like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一个问题——因为如果你恢复了你的代码，你还*需要*恢复 ChatGPT，以确保它确切知道你代码现在的样子。最好的方法是启动一个新会话，并用类似下面的提示开始：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: your HTML code
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 HTML 代码
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: your JavaScript code
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 JavaScript 代码
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: your CSS code
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 CSS 代码
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: your Python code
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Python 代码
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: (You can also upload the files to ChatGPT’s Code Interpreter, which was not
    available at that time). If the prompt is too long to be sent as a single message,
    split it to two. Click *“Stop Generating”* when in between these messages, to
    prevent the bot from inserting unnecessary text in between.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: （你也可以将文件上传到 ChatGPT 的代码解释器，那时还不可用）。如果提示过长无法作为单条消息发送，将其拆分为两部分。在这两条消息之间，点击*“停止生成”*，以防止机器人插入不必要的文本。
- en: 6\. Don’t fight it for too long
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 不要太长时间地与之对抗
- en: One of the cool things about coding with ChatGPT is that if it writes broken
    code, or the code doesn’t perform as intended, you can just send it the error
    message, and it will fix the code accordingly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ChatGPT 编码的一个酷炫之处是，如果它写出的代码有问题，或者代码没有按预期执行，你可以直接发送错误信息，它会相应地修复代码。
- en: But that doesn’t always happen. Sometimes ChatGPT doesn’t manage to fix the
    bug, or created another bug instead. We then send it the new error, and ask it
    again to fix it. If that happens more than two or three times, there’s a descent
    chance the code will be so broken or overly-modified, it will simply not work.
    If you’ve reached that point, stop, revert (see above) and rephrase your request.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不总是发生。有时 ChatGPT 无法修复错误，或者反而引入了另一个错误。我们会将新的错误信息发送给它，并再次要求它修复。如果这种情况发生超过两三次，代码有可能会变得非常破碎或过度修改，从而完全无法工作。如果你达到了这一点，请停止，恢复（见上文），并重新表述你的请求。
- en: 7\. Learn how to prompt
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 学习如何编写提示
- en: While the whole point of ChatGPT is the fact you can interact with it using
    everyday language, knowing how write your prompts correctly can have an immense
    effect on the result. I truly recommend taking the time to learn how to do that.
    For example, this [free course by OpenAI and DeepLearning.AI](https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/)
    on prompt engineering is a must, and specifically the lesson how to combine instructions,
    code and examples in a single prompt.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 ChatGPT 的核心在于你可以使用日常语言与其互动，但正确编写提示可以对结果产生巨大影响。我真的推荐花时间学习如何做到这一点。例如，这个由 OpenAI
    和 DeepLearning.AI 提供的[免费课程](https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/)是必修的，特别是关于如何将指令、代码和示例结合在一个提示中的课程。
- en: 'One of the most important things you can learn about prompting is to first
    to make sure there’s a distinguishable difference between the free-text and the
    code in your prompt. So instead of this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以学到的最重要的事情之一是确保在提示中自由文本和代码之间有明显的区别。因此，避免这样做：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'write it like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这样写：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'def func(x):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'def func(x):'
- en: return x*2
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: return x*2
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Also, if possible, provide it with input-output examples. That the best method
    to explain an LLM what it should do, as it removes any ambiguities in your request
    (*what should the model return id the input is positive? keep it x*2 or maybe
    nothing?*):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果可能的话，提供输入输出示例。这是向 LLM 解释它应该做什么的最佳方法，因为它消除了你请求中的任何模糊性（*如果输入是正数，模型应该返回什么？保持
    x*2 还是什么都不做？*）：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'def func(x):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'def func(x):'
- en: return x*2
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: return x*2
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Bonus: Choose the right LLM'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外提示：选择合适的 LLM
- en: Remember that “ChatGPT” is a name of the web product, not the model itself.
    The free version gives you access to GPT-3.5, while the paid version includes
    GPT-4, which performs dramatically better in coding tasks The new Code Interpreter
    makes it also far better, as it can actually *run and test* its code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，“ChatGPT”是一个网络产品的名称，而不是模型本身。免费版让你使用 GPT-3.5，而付费版则包括 GPT-4，它在编码任务中表现显著更好。新的代码解释器也使其表现更好，因为它可以*运行和测试*其代码。
- en: Even if you decide to chose another LLM to work with, make sure the one you
    choose performs well on coding tasks. Otherwise, none of these tips will be of
    any assistance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你决定选择另一个 LLM 来合作，确保你选择的那个在编码任务中表现良好。否则，这些提示将毫无帮助。
- en: As I’m wrapping this all up, I guess the most important thing to realize when
    communicating with LLMs is that *every word matters*. LLMs don’t think and they
    can’t truly understand what we want without explicitly explaining it to them the
    way *they need*, because — thank God — they’re not human (yet?), they’re only
    a tool. And just like every tool — if you don’t know how to work with it, you
    won’t get any job done. I do hope you’ll find these tips useful on your next project!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在总结这一切时，我想最重要的是认识到与 LLMs 沟通时*每个词都很重要*。LLMs 不会思考，也不能真正理解我们想要什么，除非明确以*它们需要的方式*向它们解释，因为——谢天谢地——它们还不是人类（还没？），它们只是工具。就像每一个工具一样——如果你不知道怎么使用它，你就无法完成任何工作。我确实希望你能在下一个项目中找到这些提示的用处！
- en: '![](../Images/72db9dae8fd870a11c548f15b52a7292.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72db9dae8fd870a11c548f15b52a7292.png)'
- en: Generated using StableDiffusion
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 StableDiffusion 生成
