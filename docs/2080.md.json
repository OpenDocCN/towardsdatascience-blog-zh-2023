["```py\nimport numpy as np\nimport pandas as pd\nimport plotnine as p9\n\nfrom cox.plots import (\n    plot_subject_event_times,\n    animate_subject_event_times_and_mark_at_risk,\n    plot_cost_vs_beta,\n)\n\nperfect_df =  pd.DataFrame({\n    'subject': ['A', 'B', 'C', 'D', 'E'],\n    'time': [1, 3, 4, 5, 6],\n    'event': [1, 1, 1, 1, 0],\n    'x': [-1.7, -0.4, 0.0, 0.9, 1.2],\n})\n\nplot_subject_event_times(perfect_df, color_map='x')\n```", "```py\nnegloglik_sweep_betas_perfect_df = neg_log_likelihood_all_subjects_sweep_betas(\n    perfect_df,\n    betas=np.arange(-5, 5, 0.1)\n)\nplot_cost_vs_beta(negloglik_sweep_betas_perfect_df, width=0.1)\n```", "```py\ndef plot_likelihoods(df, ylim=[-20, 20]):\n    betas = np.arange(ylim[0], ylim[1], 0.5)\n    subjects = df.query(\"event == 1\")['subject'].tolist()\n    likelihoods_per_subject = []\n    for subject in subjects:\n        likelihoods = [\n            np.exp(log_likelihood(df, subject, beta))\n            for beta in betas\n        ]\n        likelihoods_per_subject.append(\n            pd.DataFrame({\n                'beta': betas,\n                'likelihood': likelihoods,\n                'subject': [subject] * len(betas),\n            })        \n        )\n    lik_df = pd.concat(likelihoods_per_subject)\n    return (\n        p9.ggplot(lik_df, p9.aes('beta', 'likelihood', color='subject'))\n        + p9.geom_line(size=2)\n        + p9.theme_classic()\n    )    \n\nplot_likelihoods(perfect_df)\n```", "```py\nsample_df = pd.DataFrame({\n    'subject': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n    'x': [-1.7, -0.4, 0.0, 0.5, 0.9, 1.2, 1.3, 1.45],\n    'time': [1, 2, 4, 3, 5, 7, 6, 8],\n    'rank_x': [1, 2, 3, 4, 5, 6, 7, 8],\n    'event': [1, 1, 1, 1, 1, 1, 1, 0],\n})\n\nsample_df\n```", "```py\nplot_likelihoods(sample_df)\n```", "```py\nfrom lifelines import CoxPHFitter\n\nperfect_cox_model = CoxPHFitter()\nperfect_cox_model.fit(\n  perfect_df,\n  duration_col='time',\n  event_col='event',\n  formula='x'\n)\nperfect_cox_model.print_summary()\n```", "```py\n#> /.../coxph_fitter.py:1586: ConvergenceWarning:\n#> The log-likelihood is getting suspiciously close to 0 and the delta is still large.\n#> There may be complete separation in the dataset.\n#> This may result in incorrect inference of coefficients.\n#> See https://stats.stackexchange.com/q/11109/11867 for more.\n\n#> /.../__init__.py:1165: ConvergenceWarning:\n#> Column x has high sample correlation with the duration column.\n#> This may harm convergence.\n#> This could be a form of 'complete separation'.\n#> See https://stats.stackexchange.com/questions/11109/how-to-deal-with-perfect-separation-in-logistic-regression\n\n#> /.../coxph_fitter.py:1611:\n#> ConvergenceWarning: Newton-Rhaphson failed to converge sufficiently.\n#> Please see the following tips in the lifelines documentation:\n#> https://lifelines.readthedocs.io/en/latest/Examples.html#problems-with-convergence-in-the-cox-proportional-hazard-model\n```", "```py\nperfect_pen_cox_model = CoxPHFitter(penalizer=0.01, l1_ratio=0)\nperfect_pen_cox_model.fit(perfect_df, duration_col='time', event_col='event', formula='x')\nperfect_pen_cox_model.print_summary()\n```", "```py\nsample_df = pd.DataFrame({\n    'subject': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n    'x': [-1.7, -0.4, 0.0, 0.5, 0.9, 1.2, 1.3, 1.45],\n    'time': [1, 2, 4, 3, 5, 7, 6, 8],\n    'rank_x': [1, 2, 3, 4, 5, 6, 7, 8],\n    'event': [1, 1, 1, 1, 1, 1, 1, 0],\n}).sort_values('time')\n\nnp.random.seed(42)\nsample_df['time2'] = sorted(np.random.randint(low=-42, high=888, size=8))\nsample_df\n```", "```py\nsample_cox_model = CoxPHFitter()\nsample_cox_model.fit(\n  sample_df,\n  duration_col='time',\n  event_col='event',\n  formula='x'\n)\nsample_cox_model.print_summary()\n```", "```py\nsample_cox_model = CoxPHFitter()\nsample_cox_model.fit(\n  sample_df,\n  duration_col='time2',\n  event_col='event',\n  formula='x'\n)\nsample_cox_model.print_summary()\n```"]