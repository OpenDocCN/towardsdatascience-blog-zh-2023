- en: Recursive Chemical Reactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归化学反应
- en: 原文：[https://towardsdatascience.com/recursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0?source=collection_archive---------11-----------------------#2023-03-07](https://towardsdatascience.com/recursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0?source=collection_archive---------11-----------------------#2023-03-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/recursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0?source=collection_archive---------11-----------------------#2023-03-07](https://towardsdatascience.com/recursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0?source=collection_archive---------11-----------------------#2023-03-07)
- en: Algorithmic analysis of chemical structures using RDKit
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RDKit对化学结构进行算法分析
- en: '[](https://medium.com/@cretanpan?source=post_page-----c6a0fab95fa0--------------------------------)[![Pan
    Cretan](../Images/8b3fbab70c0e61f7ca516d2f54b646e5.png)](https://medium.com/@cretanpan?source=post_page-----c6a0fab95fa0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c6a0fab95fa0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c6a0fab95fa0--------------------------------)
    [Pan Cretan](https://medium.com/@cretanpan?source=post_page-----c6a0fab95fa0--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@cretanpan?source=post_page-----c6a0fab95fa0--------------------------------)[![Pan
    Cretan](../Images/8b3fbab70c0e61f7ca516d2f54b646e5.png)](https://medium.com/@cretanpan?source=post_page-----c6a0fab95fa0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c6a0fab95fa0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c6a0fab95fa0--------------------------------)
    [Pan Cretan](https://medium.com/@cretanpan?source=post_page-----c6a0fab95fa0--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff990ba57425&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0&user=Pan+Cretan&userId=ff990ba57425&source=post_page-ff990ba57425----c6a0fab95fa0---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c6a0fab95fa0--------------------------------)
    ·8 min read·Mar 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc6a0fab95fa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0&user=Pan+Cretan&userId=ff990ba57425&source=-----c6a0fab95fa0---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff990ba57425&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0&user=Pan+Cretan&userId=ff990ba57425&source=post_page-ff990ba57425----c6a0fab95fa0---------------------post_header-----------)
    发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----c6a0fab95fa0--------------------------------)
    ·8分钟阅读·2023年3月7日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc6a0fab95fa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0&user=Pan+Cretan&userId=ff990ba57425&source=-----c6a0fab95fa0---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc6a0fab95fa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0&source=-----c6a0fab95fa0---------------------bookmark_footer-----------)![](../Images/951ad44edad54a113202aefa02971f67.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc6a0fab95fa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecursive-chemical-reactions-how-to-algorithmicallyanalyze-chemical-structures-c6a0fab95fa0&source=-----c6a0fab95fa0---------------------bookmark_footer-----------)![](../Images/951ad44edad54a113202aefa02971f67.png)'
- en: Image by [Manuel Darío Fuentes Hernández](https://pixabay.com/users/drfuenteshernandez-7757554/?utm_source=link-attribution&amp%3Butm_medium=referral&amp%3Butm_campaign=image&amp%3Butm_content=4897327)
    from [Pixabay](https://pixabay.com)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于[Manuel Darío Fuentes Hernández](https://pixabay.com/users/drfuenteshernandez-7757554/?utm_source=link-attribution&amp%3Butm_medium=referral&amp%3Butm_campaign=image&amp%3Butm_content=4897327)来自[Pixabay](https://pixabay.com)
- en: '[RDKit](https://www.rdkit.org/docs/Overview.html) is an open-source cheminformatics
    toolkit written in C++ that can also be used in Java, Python, and [KNIME](https://www.knime.com/rdkit).
    It provides a wide collection of cheminformatics functionality, such as reading
    and writing molecules, working with atoms, bonds and rings, generating 2D or 3D
    coordinates, searching for substructures, applying chemical transformations, and
    computing fingerprints and descriptors. RDKit also offers a high-performance database
    [cartridge](https://www.rdkit.org/docs/Cartridge.html) for PostgreSQL. RDKit understands
    [SMARTS](https://www.daylight.com/dayhtml/doc/theory/theory.smarts.html), the
    language for describing molecular patterns, and SMIRKS, the language for applying
    reaction transformations, both of which use as a basis SMILES, the famous line
    notation for entering and representing molecules and reactions.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[RDKit](https://www.rdkit.org/docs/Overview.html) 是一个用 C++ 编写的开源化学信息学工具包，也可以在
    Java、Python 和 [KNIME](https://www.knime.com/rdkit) 中使用。它提供了广泛的化学信息学功能，例如读取和写入分子、处理原子、键和环、生成
    2D 或 3D 坐标、搜索子结构、应用化学转换以及计算指纹和描述符。RDKit 还为 PostgreSQL 提供了高性能的 [cartridge](https://www.rdkit.org/docs/Cartridge.html)
    数据库。RDKit 理解 [SMARTS](https://www.daylight.com/dayhtml/doc/theory/theory.smarts.html)
    语言（用于描述分子模式），以及 SMIRKS 语言（用于应用反应转换），这两者都以 SMILES 为基础，SMILES 是用于输入和表示分子及反应的著名线性符号。'
- en: RDKit can apply reaction transformations and combined with the recursion possibilities
    of Python it can support niche use cases such as the one described in this article.
    In particular, we will apply chemical reactions recursively to examine if an input
    molecular structure is a peptide, i.e. a linear sequence of amino acids. I have
    found that applying reactions recursively is a good way to algorithmically analyse
    chemical structures, e.g. by iteratively fragmenting the structure, cleaving off
    well defined fragments and categorising left-over moieties when no more transformations
    can be applied.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: RDKit 可以应用反应转换，并结合 Python 的递归功能，支持如本文所述的特殊用例。特别是，我们将递归地应用化学反应，以检查输入的分子结构是否为肽，即氨基酸的线性序列。我发现递归应用反应是算法分析化学结构的一个好方法，例如，通过反复分割结构、去除定义明确的片段并分类剩余基团，当不再能应用更多的转换时。
- en: · [Introduction](#ec4e)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: · [介绍](#ec4e)
- en: '· [The building blocks: amino acids](#21e4)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: · [构建模块：氨基酸](#21e4)
- en: · [Identifying the peptide bonds](#4c4d)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: · [识别肽键](#4c4d)
- en: · [Breaking the peptide bonds](#af75)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: · [打破肽键](#af75)
- en: · [Conclusions](#391a)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: · [结论](#391a)
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The image below is a linear oligopeptide with four amino acids, namely arginine,
    alanine, threonine and methionine and it was found in a recent dataset I was analysing.
    I work with industrial chemicals and I was surprised to see such structures in
    our database as we have nothing to do with biomolecules and peptides are not so
    commonly encountered. Digging further I discovered that we have erroneously generated
    a number of such structures by interpreting chemical names with chemical name
    to structure algorithms. In addition to their full name, amino acids can also
    be represented with one or three characters that sometimes occur in text and are
    wrongly interpreted as chemical structures. This data quality issue may affect
    publicly available datasets too and hence I thought that it may be useful to find
    a way to detect them and eliminate them if they occurred unintentionally.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是一个由四个氨基酸组成的线性寡肽，即精氨酸、丙氨酸、苏氨酸和蛋氨酸，最近在我分析的数据集中发现。我从事工业化学工作，看到我们的数据库中有这样的结构感到惊讶，因为我们与生物分子无关，肽也不常见。进一步挖掘发现，我们通过将化学名称解释为化学名称到结构的算法错误地生成了这些结构。除了全名，氨基酸还可以用一个或三个字符表示，这些字符有时出现在文本中，并被错误地解释为化学结构。这种数据质量问题可能会影响公开可用的数据集，因此我认为找到检测这些情况并在其意外出现时加以消除的方法可能会很有用。
- en: '![](../Images/6fbc4e6171d073c2ba83cfe24c0d64c0.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fbc4e6171d073c2ba83cfe24c0d64c0.png)'
- en: A small peptide with four amino acids. Image by the Author.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一小段含有四个氨基酸的肽。图像来源：作者。
- en: There are many ways to do this and I imagine that all linear peptide sequences
    could be matched by a complex SMARTS query. Developing this seemed intimidating
    to me and hence I thought that it may be more viable to solve this problem by
    breaking it up in smaller ones. In chemistry terms, this means that we have to
    break the initial molecule in smaller fragments by hydrolysing the peptide bonds
    one by one until there are no more bonds to break. If all fragments obtained are
    amino acids then the starting structure must be a peptide. Doing so also allows
    determining the exact amino acid sequence. What we need is a way to apply a chemical
    reaction recursively. If you are interested in learning how this can be done with
    RDKit and discovering some of the functionality of this rich cheminformatics library
    along the way, please keep reading.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题有很多方法，我认为所有线性肽序列都可以通过复杂的 SMARTS 查询来匹配。开发这个方法对我来说似乎很具有挑战性，因此我认为通过将问题拆分成更小的问题来解决可能更为可行。在化学术语中，这意味着我们需要通过逐一水解肽键，将初始分子分解成更小的片段，直到没有更多的键可以断裂。如果所有获得的片段都是氨基酸，那么起始结构必须是肽。这样做还可以确定精确的氨基酸序列。我们需要的是一种递归应用化学反应的方法。如果你有兴趣了解如何使用
    RDKit 实现这一点，并在过程中发现这个丰富的化学信息学库的一些功能，请继续阅读。
- en: The code for this article can be found in my GitHub blog [repository](https://github.com/karpanGit/myBlogs/tree/master/RecursiveChemicalReactions).
    We will be using RDKit version 2022.9.4 with Python 3.9.13\. The repository also
    includes all dependencies in the provided requirements [file](https://github.com/karpanGit/myBlogs/blob/4dcc6f3b3a983b9be4b75fd97737ba44f2a42b5a/RecursiveChemicalReactions/requirements.txt).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的代码可以在我的 GitHub 博客 [仓库](https://github.com/karpanGit/myBlogs/tree/master/RecursiveChemicalReactions)
    中找到。我们将使用 RDKit 版本 2022.9.4 和 Python 3.9.13。该仓库还包括了提供的要求 [文件](https://github.com/karpanGit/myBlogs/blob/4dcc6f3b3a983b9be4b75fd97737ba44f2a42b5a/RecursiveChemicalReactions/requirements.txt)
    中的所有依赖项。
- en: 'The building blocks: amino acids'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础单元：氨基酸
- en: There are 20 common amino acids that make up proteins. There are also two more
    additional amino acids that are in some species coded for codons that are usually
    interpreted as stop codons. All these are alpha-amino acids, i.e. the amino group
    is directly bonded to the α-carbon, i.e. the carbon atom next to the carboxyl
    group. For convenience I have created the SMILES for these 22 amino acids that
    can be found in the [repository](https://github.com/karpanGit/myBlogs/blob/4dcc6f3b3a983b9be4b75fd97737ba44f2a42b5a/RecursiveChemicalReactions/input/amino_acids.smiles).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 组成蛋白质的氨基酸共有 20 种。此外，还有两种额外的氨基酸，这些氨基酸在某些物种中由通常解释为终止密码子的密码子编码。所有这些都是α-氨基酸，即氨基直接连接到α-碳上，即连接到羧基的碳原子。为了方便起见，我为这
    22 种氨基酸创建了 SMILES，这些 SMILES 可以在 [仓库](https://github.com/karpanGit/myBlogs/blob/4dcc6f3b3a983b9be4b75fd97737ba44f2a42b5a/RecursiveChemicalReactions/input/amino_acids.smiles)
    中找到。
- en: The first step is to read in the 22 amino acids, and at the same time import
    all necessary RDKit modules.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是读取 22 种氨基酸，并同时导入所有必要的 RDKit 模块。
- en: The smiles are converted to native RDKit Mol [objects](https://www.rdkit.org/docs/source/rdkit.Chem.rdchem.html#rdkit.Chem.rdchem.Mol)
    in the penultimate line. The last line may seem a bit cryptic, but all it does
    is to include the amino acid name within the molecule as can be verified with
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在倒数第二行中，微笑表情被转换为本地的 RDKit Mol [对象](https://www.rdkit.org/docs/source/rdkit.Chem.rdchem.html#rdkit.Chem.rdchem.Mol)。最后一行可能看起来有些神秘，但它的作用只是将氨基酸名称包含在分子中，具体可以通过
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: that prints
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出来
- en: '![](../Images/560281a1121086646ae141019a20361d.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/560281a1121086646ae141019a20361d.png)'
- en: L-Alanine [Mol](https://docs.chemaxon.com/display/docs/mdl-molfiles-rgfiles-sdfiles-rxnfiles-rdfiles-formats.md#src-1806565-safe-id-turmtu9mzmlszxmsukdmawxlcyxtrgzpbgvzlfj4bmzpbgvzlfjezmlszxnmb3jtyxrzlw1vbe1ptfyymdawzmlszxm)
    block with chemical name included. Image by the Author.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: L-丙氨酸 [Mol](https://docs.chemaxon.com/display/docs/mdl-molfiles-rgfiles-sdfiles-rxnfiles-rdfiles-formats.md#src-1806565-safe-id-turmtu9mzmlszxmsukdmawxlcyxtrgzpbgvzlfj4bmzpbgvzlfjezmlszxnmb3jtyxrzlw1vbe1ptfyymdawzmlszxm)
    块，其中包含了化学名称。图片由作者提供。
- en: The amino acids can be visualised in a tailor made grid using [matplotlib](https://matplotlib.org/stable)
    as shown below.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 氨基酸可以使用 [matplotlib](https://matplotlib.org/stable) 在定制的网格中进行可视化，如下所示。
- en: The last line saves the image below as a PNG file, that you can find in the
    repository together with all other [images](https://github.com/karpanGit/myBlogs/tree/master/RecursiveChemicalReactions/images)
    in this article.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行将下方的图像保存为 PNG 文件，你可以在仓库中找到这个文件以及本文中所有其他 [图像](https://github.com/karpanGit/myBlogs/tree/master/RecursiveChemicalReactions/images)。
- en: '![](../Images/355a5a5455085fe091df86896064e40a.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/355a5a5455085fe091df86896064e40a.png)'
- en: The 22 amino acids that appear in the genetic code. Image by the Author.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在遗传密码中的22种氨基酸。图片来源于作者。
- en: RDKit can be seamlessly used within jupyter notebooks, where the Draw module
    allows the effortless visualisation of molecular structures in a grid using the
    `Draw.MolsToGridImage()` [function](https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html).
    Nevertheless, I find that using matplotlib allows more flexibility, especially
    if one follows these excellent [suggestions](https://medium.com/towards-data-science/advanced-tutorial-how-to-master-matplotlib-like-an-absolute-boss-aae2d4936734)
    on how to tweak the plot components. All of the amino acids share the following
    enantiomeric backbone.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: RDKit可以无缝地在jupyter notebooks中使用，其中Draw模块允许通过`Draw.MolsToGridImage()` [函数](https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html)轻松可视化分子结构。但我发现使用matplotlib可以提供更多灵活性，特别是如果遵循这些出色的
    [建议](https://medium.com/towards-data-science/advanced-tutorial-how-to-master-matplotlib-like-an-absolute-boss-aae2d4936734)
    来调整图表组件。所有氨基酸共享以下对映体骨架。
- en: '![](../Images/f5bdda861783ccccdd395fc911ac256d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f5bdda861783ccccdd395fc911ac256d.png)'
- en: Alpha amino acid backbone. Image by the Author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: α氨基酸骨架。图片来源于作者。
- en: A first useful RDKit functionality that we can introduce at this stage is the
    so-called [R-group decomposition](https://greglandrum.github.io/rdkit-blog/posts/2023-01-09-rgd-tutorial.html).
    In the code below we define the amino acid backbone core with the smiles [*:1][C@H](N[*:2])C(O)=O
    that has two explicit R group labels. The reason for using two R group labels
    is the presence of the pyrrolidine ring in L-Proline. By explicitly providing
    the settings of the R-group decomposition, we constrained it to match only the
    explicitly specified R groups.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段，我们可以引入一个有用的RDKit功能，即所谓的 [R基团分解](https://greglandrum.github.io/rdkit-blog/posts/2023-01-09-rgd-tutorial.html)。在下面的代码中，我们定义了氨基酸骨架核心，其smiles为
    [*:1][C@H](N[*:2])C(O)=O，具有两个明确的R基团标签。使用两个R基团标签的原因是L-脯氨酸中的呋喃环。通过明确设置R基团分解，我们将其约束为仅匹配明确指定的R基团。
- en: The rest of the code creates the necessary input arrays with molecules and legends
    to generate the image using the same utility function as earlier. If you look
    carefully you will notice that glycine failed to be decomposed into R-groups.
    The reason is that it is not chiral, whilst the core structure used for the decomposition
    is. The decomposition of glycine would have succeeded if we had removed the chiral
    centre from the core, but then the R-group decomposition would have been less
    specific that may be undesired.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码创建了必要的输入数组，包含分子和图例，用于生成图像，使用的是与之前相同的实用函数。如果你仔细观察，你会注意到甘氨酸未能被分解为R基团。原因是它不是手性分子，而用于分解的核心结构是手性的。如果我们从核心中移除手性中心，甘氨酸的分解会成功，但R基团分解会失去一些特异性，这可能是不希望的。
- en: '![](../Images/d41e8c7140d58eeeff466049e98aac47.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d41e8c7140d58eeeff466049e98aac47.png)'
- en: Amino acid R-group decomposition. Image by the Author.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 氨基酸R基团分解。图片来源于作者。
- en: R-group decomposition is useful in case the amino acid backbones were needed
    for further processing. We will not pursue this further in this article.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: R基团分解在氨基酸骨架需要进一步处理的情况下很有用。本文不再对此深入探讨。
- en: Identifying the peptide bonds
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别肽键
- en: Before we attempt to break the peptide bonds we can check whether we can identify
    them. We use an example linear tri-peptide formed by threonine, methionine and
    arginine. The peptide bond is defined as a structural pattern that is then used
    to locate the matching atoms and bonds in the original molecule.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们尝试断裂肽键之前，我们可以检查是否能够识别这些肽键。我们使用一个由苏氨酸、蛋氨酸和精氨酸形成的线性三肽作为例子。肽键被定义为一种结构模式，用来定位原始分子中的匹配原子和键。
- en: that produces the image below.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了下面的图像。
- en: '![](../Images/90e85a8b1b46b85a6410be26f9df649d.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/90e85a8b1b46b85a6410be26f9df649d.png)'
- en: Threonine, arginine, methionine tri-peptide with the two peptide bonds highlighted.
    Image by the Author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 苏氨酸、精氨酸、蛋氨酸三肽，突出显示了两个肽键。图片来源于作者。
- en: Using the `rdkit.Chem.Draw.rdMolDraw2D` the peptide bonds were nicely orientated.
    The substructure search returned a tuple of tuples with atomic indices that was
    flattened and used to find all bond indices between all atom pairs in the flattened
    list. The indices of the atoms and bonds in the peptide chain were highlighted
    using a light grey color, before the molecular structure was saved as the PNG
    image. The key message here is that by using RDKit one can have control down to
    the level of atoms and bonds that essentially form a graph amenable to any imaginable
    algorithm.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `rdkit.Chem.Draw.rdMolDraw2D`，肽键被很好地定向。子结构搜索返回了一个原子索引的元组，其中的元组被展平，并用于在展平列表中找到所有原子对之间的键索引。在分子结构被保存为
    PNG 图像之前，使用浅灰色突出显示了肽链中原子和键的索引。这里的关键消息是，通过使用 RDKit，可以控制到原子和键的级别，这些原子和键实质上形成了适合任何想象中的算法的图形。
- en: Breaking the peptide bonds
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打破肽键
- en: Breaking the peptide bond requires the definition of a reaction using SMIRKS.
    The previously defined peptide pattern used in the substructure matching becomes
    the reactants part of the SMIRKS reaction. The products are nothing more than
    the hydrolysed product with the two amino acids separated using the dot notation.
    The threonine, arginine, methionine tri-peptide has two peptide bonds and hence
    the reaction can be applied twice leading to two reaction outcomes, both of which
    comprise an amino acid and a di-peptide.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 打破肽键需要使用 SMIRKS 定义一个反应。之前定义的肽模式用于子结构匹配，成为 SMIRKS 反应的反应物部分。产品只是水解产物，其中两个氨基酸使用点符号分隔。苏氨酸、精氨酸、蛋氨酸三肽有两个肽键，因此可以应用两次反应，导致两个反应结果，这两个结果都包括一个氨基酸和一个二肽。
- en: The code above produces the following PNG image with the two reaction possibilities
    in the two rows.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了一个 PNG 图像，其中包含两行的两个反应可能性。
- en: '![](../Images/bfb7a940699838858362f2fce95ee56b.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bfb7a940699838858362f2fce95ee56b.png)'
- en: Hydrolysis of the threonine, arginine, methionine tri-peptide. Image by the
    Author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 苏氨酸、精氨酸、蛋氨酸三肽的水解。图片由作者提供。
- en: If we want to break down fully a peptide into its constituent amino acids we
    will need to apply the reaction repeatedly, until no more peptide bonds can be
    broken. It is not necessary to enumerate all possible reactions at each stage.
    We can simply apply the reaction once, take the two reactants and hydrolyse them
    separately. RDKit allows controlling the number of products by setting the `maxProducts`
    [argument](https://www.rdkit.org/docs/source/rdkit.Chem.rdChemReactions.html#rdkit.Chem.rdChemReactions.ChemicalReaction.RunReactants)
    to one. What makes the starting structure a peptide? If after applying all possible
    peptide hydrolysis reactions we have only produced one or more of the known amino
    acids then the starting structure is a peptide. Conversely, if at some point no
    peptide hydrolysis reaction can be applied and the structure is not one of the
    known amino acids, then the starting structure is not a peptide.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将一个肽完全分解成其组成的氨基酸，我们需要反复应用反应，直到不能再打破更多肽键。在每个阶段不必列举所有可能的反应。我们可以简单地应用一次反应，然后分别对两个反应物进行水解。RDKit
    允许通过将 `maxProducts` [参数](https://www.rdkit.org/docs/source/rdkit.Chem.rdChemReactions.html#rdkit.Chem.rdChemReactions.ChemicalReaction.RunReactants)
    设置为 1 来控制产品数量。什么使得起始结构成为肽？如果在应用所有可能的肽水解反应后我们只产生了一种或多种已知的氨基酸，那么起始结构就是一个肽。相反，如果在某个时点无法应用任何肽水解反应，并且结构不是已知氨基酸之一，那么起始结构就不是肽。
- en: The code above uses two utility functions, one to examine if two structures
    are chemically equivalent by being a substructure of each other, and another to
    examine if a structure can be found in a list of structures. The [recursive](https://realpython.com/python-recursion/)
    hydrolysis of peptide bonds is implemented in the third and last function.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用了两个实用函数，一个用于检查两个结构是否通过彼此为子结构的方式在化学上等效，另一个用于检查结构是否可以在结构列表中找到。[递归](https://realpython.com/python-recursion/)肽键水解在第三个也是最后一个函数中实现。
- en: Using this recursive function we examine if a set of nine example molecules
    are peptides.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个递归函数，我们检查一组九个示例分子是否是肽。
- en: The algorithm correctly classifies the first 8 structures as peptides and the
    last two as non-peptides. Notably, we used the convention that the amino acids
    themselves are a peptide, that strictly speaking may not be true, but this was
    convenient for applying the recursion.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法正确地将前8个结构分类为肽，将最后两个分类为非肽。值得注意的是，我们使用了氨基酸本身就是一个肽的约定，这严格来说可能并不准确，但这对于应用递归来说是方便的。
- en: '![](../Images/11a0e42b9ff86840c1aec7c6a9e0dc31.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11a0e42b9ff86840c1aec7c6a9e0dc31.png)'
- en: Examining if structure is a peptide through recursive hydrolysis. Image by the
    Author.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过递归水解检查结构是否为肽。图像由作者提供。
- en: The algorithm could be enhanced by adding the reactant results to a graph, using
    for example [NetworkX](https://networkx.org/) and visualising the reaction progress
    by drawing the structure at each node. The leaves would then be the amino acids
    that can be analysed further to obtain the exact sequence of amino acids in the
    peptide. The possibilities are endless; RDKit has done its part and one can then
    rely on the expressiveness of Python for the rest.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将反应物结果添加到图中，可以增强算法，例如使用[NetworkX](https://networkx.org/)并通过在每个节点上绘制结构来可视化反应进程。叶子节点将是可以进一步分析的氨基酸，以获取肽中氨基酸的确切序列。可能性无穷无尽；RDKit已经完成了它的部分工作，然后可以依赖Python的表现力完成其余部分。
- en: Conclusions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: RDKit is a rich cheminformatics library. It can nowadays be easily deployed
    using pip and opens up the possibility of using Python and its data analysis and
    data science ecosystem in chemistry applications. RDKit’s [documentation](https://www.rdkit.org/docs/GettingStartedInPython.html)
    is admittedly not the best, but there are now many tutorials and [blogs](https://greglandrum.github.io/rdkit-blog/)
    available. The library keeps evolving and new functionality is being added. I
    hope this article is useful for illustrating some of RDKit’s functionality and
    demonstrating its potential.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: RDKit是一个丰富的化学信息学库。现在可以通过pip轻松部署，并打开了在化学应用中使用Python及其数据分析和数据科学生态系统的可能性。RDKit的[文档](https://www.rdkit.org/docs/GettingStartedInPython.html)虽说并非最好，但现在有很多教程和[博客](https://greglandrum.github.io/rdkit-blog/)可以参考。该库不断发展，新增了许多功能。希望这篇文章对展示RDKit的一些功能和潜力有所帮助。
