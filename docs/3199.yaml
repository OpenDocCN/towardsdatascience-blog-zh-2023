- en: A Complete Guide to Effectively Scale your Data Pipelines and Data Products
    with Contract Testing and dbt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整指南：如何通过合同测试和 dbt 有效地扩展你的数据管道和数据产品
- en: 原文：[https://towardsdatascience.com/how-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443?source=collection_archive---------2-----------------------#2023-10-25](https://towardsdatascience.com/how-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443?source=collection_archive---------2-----------------------#2023-10-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443?source=collection_archive---------2-----------------------#2023-10-25](https://towardsdatascience.com/how-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443?source=collection_archive---------2-----------------------#2023-10-25)
- en: All you need to know to start implementing contract tests with dbt
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用 dbt 实施合同测试所需了解的一切
- en: '[](https://medium.com/@pablo.porto?source=post_page-----10c92ea9a443--------------------------------)[![Pablo
    Porto](../Images/acfca713c40ae7f2b86756fb39402c60.png)](https://medium.com/@pablo.porto?source=post_page-----10c92ea9a443--------------------------------)[](https://towardsdatascience.com/?source=post_page-----10c92ea9a443--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----10c92ea9a443--------------------------------)
    [Pablo Porto](https://medium.com/@pablo.porto?source=post_page-----10c92ea9a443--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@pablo.porto?source=post_page-----10c92ea9a443--------------------------------)[![Pablo
    Porto](../Images/acfca713c40ae7f2b86756fb39402c60.png)](https://medium.com/@pablo.porto?source=post_page-----10c92ea9a443--------------------------------)[](https://towardsdatascience.com/?source=post_page-----10c92ea9a443--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----10c92ea9a443--------------------------------)
    [Pablo Porto](https://medium.com/@pablo.porto?source=post_page-----10c92ea9a443--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f9bc7e34a6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443&user=Pablo+Porto&userId=a6f9bc7e34a6&source=post_page-a6f9bc7e34a6----10c92ea9a443---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----10c92ea9a443--------------------------------)
    ·11 min read·Oct 25, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F10c92ea9a443&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443&user=Pablo+Porto&userId=a6f9bc7e34a6&source=-----10c92ea9a443---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f9bc7e34a6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443&user=Pablo+Porto&userId=a6f9bc7e34a6&source=post_page-a6f9bc7e34a6----10c92ea9a443---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----10c92ea9a443--------------------------------)
    ·11 min read·2023年10月25日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F10c92ea9a443&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443&source=-----10c92ea9a443---------------------bookmark_footer-----------)![](../Images/7762e018a2f9b67dff6d9432dcb7e350.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F10c92ea9a443&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-scale-your-data-pipelines-and-data-products-with-dbt-and-contract-testing-10c92ea9a443&source=-----10c92ea9a443---------------------bookmark_footer-----------)![](../Images/7762e018a2f9b67dff6d9432dcb7e350.png)'
- en: Photo by [Jonas Gerg](https://unsplash.com/@walamana?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jonas Gerg](https://unsplash.com/@walamana?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Let me tell you a story about data management systems and scale that will probably
    resonate with you if you are a data or analytics engineer trying to do your best
    work in 2023.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我讲一个关于数据管理系统和规模的故事，这个故事如果你是一名数据或分析工程师，可能会引起你的共鸣，尤其是在2023年尽力做到最好时。
- en: Not too long ago, almost all data architectures and data team structures followed
    [a centralized approach](https://www.getdbt.com/data-teams/centralized-vs-decentralized#the-centralized-model).
    As a data or analytics engineer, you knew where to find all the transformation
    logic and models because they were all in the same codebase. You probably work
    closely with the colleague who builds the data pipeline that you were consuming.
    There was only one data team, two at most.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之前，几乎所有的数据架构和数据团队结构都遵循了[集中式方法](https://www.getdbt.com/data-teams/centralized-vs-decentralized#the-centralized-model)。作为数据或分析工程师，你知道在哪里找到所有的转换逻辑和模型，因为它们都在同一个代码库中。你可能与你的同事紧密合作，那个同事负责构建你所使用的数据管道。数据团队只有一个，最多两个。
- en: This approach was effective for small organizations and startups with limited
    data sources and use cases. It also worked for large enterprises not fully focused
    on extracting value from data at scale. However, as organizations prioritized
    being data-driven, there was an increased need for more machine learning, analytics,
    and business intelligence data use cases.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '这种方法对于数据源和用例有限的小型组织和初创公司是有效的。它也适用于那些没有完全专注于从数据中提取价值的大型企业。然而，随着组织优先考虑数据驱动，有了更多的机器学习、分析和商业智能数据用例的需求。 '
- en: '![](../Images/aaa21e48e65eaf597be05bb80aa6c87a.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aaa21e48e65eaf597be05bb80aa6c87a.png)'
- en: Centralized data architecture developed and maintained by one team
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由一个团队开发和维护的集中式数据架构
- en: The proliferation of use cases and data sources increased the complexity of
    managing data and the amount of people needed to create and maintain data systems.
    To meet these needs, the latest version of your company data strategy may have
    moved towards decentralization. This includes forming decentralized data teams
    and the adoption of decentralized data architectures like [Data Mesh](https://martinfowler.com/articles/data-mesh-principles.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用例和数据源的激增增加了管理数据的复杂性和创建与维护数据系统所需的人数。为了满足这些需求，你公司最新版本的数据策略可能已经转向去中心化。这包括组建去中心化的数据团队和采用像[数据网格](https://martinfowler.com/articles/data-mesh-principles.html)这样的去中心化数据架构。
- en: Decentralization allows organizations to scale data management but brings new
    challenges in ensuring the coordination of different components, such as data
    products and pipelines developed and managed by various teams.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化允许组织扩展数据管理，但带来了确保不同组件协调的新挑战，例如由各个团队开发和管理的数据产品和管道。
- en: In this type of architecture and organisation structures, it often becomes unclear
    who is accountable for each component resulting in issues and blame shifting.
    The number of integration points between teams also increases and maintaining
    working interfaces between the different components becomes harder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种架构和组织结构中，往往不清楚每个组件的负责人，导致问题和责任推诿。团队之间的集成点数量也增加，维护不同组件之间的工作接口变得更加困难。
- en: '![](../Images/8f43f4b098d08d37d8223b1a4c3947ca.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f43f4b098d08d37d8223b1a4c3947ca.png)'
- en: Decentralized data architecture with multiple teams and multiple components
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 多团队和多个组件的去中心化数据架构
- en: '**If you can relate to this situation, you are not alone. Your organization
    may be undergoing the decentralization of data.** To navigate this transition,
    we can learn from successful implementations of decentralization and distributed
    architectures like microservices in the operational world. How did they do it?
    How did they manage to provide reliable systems at that scale? Well, they **leveraged
    modern testing techniques.**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你能认同这种情况，你并不孤单。你的组织可能正在经历数据去中心化的过程。** 为了应对这一过渡，我们可以借鉴在运营世界中成功实施去中心化和分布式架构（如微服务）的经验。他们是如何做到的？他们如何在那个规模下提供可靠的系统？好吧，他们**利用了现代测试技术**。'
- en: “For years, software engineering has successfully embraced the concept of small
    units of work performed by ‘two-pizza teams’. Each team owns its own component
    of a larger system. Teams integrate with one another through well-defined, versioned
    interfaces. Sadly, data has yet to catch up with software. Monolithic data architecture
    is still the norm — even though there are clear drawbacks.” — [dbt labs](https://www.getdbt.com/blog/what-is-data-mesh-the-definition-and-importance-of-data-mesh)
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “多年来，软件工程成功地采纳了由‘两块披萨团队’完成的小工作单元的概念。每个团队负责自己在较大系统中的组件。团队通过明确、版本化的接口进行集成。遗憾的是，数据还未跟上软件的步伐。单体数据架构仍然是常态——尽管存在明显的缺陷。”
    — [dbt labs](https://www.getdbt.com/blog/what-is-data-mesh-the-definition-and-importance-of-data-mesh)
- en: 'In this article, I will introduce one of those techniques: contract testing.
    I will show **how you can use** [**dbt**](https://www.getdbt.com/product/what-is-dbt)
    **to create simple contract tests for your upstream sources and your dbt models’
    public interfaces**. This type of test will keep you sane as your dbt apps become
    more complex and decentralized.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将介绍其中的一种技术：合同测试。我将展示 **如何使用** [**dbt**](https://www.getdbt.com/product/what-is-dbt)
    **来为你的上游源和 dbt 模型的公开接口创建简单的合同测试**。这种类型的测试将帮助你保持理智，因为你的 dbt 应用程序变得越来越复杂和分散。
- en: But… what is a contract test?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但是……什么是合同测试？
- en: When a distributed system starts growing into multiple components developed
    by several teams, the first approach teams may try to follow to verify that the
    system is behaving as expected is **implementing end-to-end tests that exercise
    the system as a whole**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个分布式系统开始成长为由多个团队开发的多个组件时，团队可能首先尝试的验证系统行为是否符合预期的方法是 **实施端到端测试来测试整个系统**。
- en: '![](../Images/670bc60845697f0967a6cf9b588cd5ba.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/670bc60845697f0967a6cf9b588cd5ba.png)'
- en: End to end test scope focused on verifying the system as a whole
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试范围侧重于验证系统整体
- en: End-to-end tests often become very hard to work with due to their complexity,
    slow feedback, and how hard they are to maintain and orchestrate.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试由于其复杂性、反馈缓慢以及维护和协调的难度，往往变得非常难以使用。
- en: That was the case in the operational world when implementing microservices at
    scale. When testing the system as a whole is not an option, engineering teams
    started implementing different approaches, like contract testing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这在大规模实施微服务的操作世界中也是如此。当作为整体测试系统不是一个选项时，工程团队开始实施不同的方法，例如合同测试。
- en: '***“An integration contract test is a test at the boundary of an external service
    verifying that it meets the contract expected by a consuming service.”* —** [Toby
    Clemson](https://martinfowler.com/articles/microservice-testing/#testing-contract-introduction)'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***“集成合同测试是在外部服务的边界进行的测试，以验证其是否符合消费者服务所期望的合同。”* —** [托比·克莱姆森](https://martinfowler.com/articles/microservice-testing/#testing-contract-introduction)'
- en: Teams can still keep a small set of end-to-end tests, but they move down the
    testing pyramid by verifying the system with faster and more reliable tests like
    contract, component, and unit tests.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 团队仍然可以保留一小部分端到端测试，但他们通过使用更快速、更可靠的测试如合同测试、组件测试和单元测试来向下移动测试金字塔。
- en: The trade-offs of different test types are often visualized with a testing pyramid.
    I mentioned this concept in my previous article about [implementing unit testing
    for dbt models](/improving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不同测试类型的权衡通常通过测试金字塔可视化。我在之前的文章中提到过这个概念，关于 [为 dbt 模型实施单元测试](/improving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e)。
- en: '![](../Images/e35ca1e5c8d8700590bc1bb6c3370145.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e35ca1e5c8d8700590bc1bb6c3370145.png)'
- en: '[Typical test pyramid](https://martinfowler.com/articles/practical-test-pyramid.html)
    for operational systems'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[操作系统的典型测试金字塔](https://martinfowler.com/articles/practical-test-pyramid.html)'
- en: 'If we apply the same concept to data management systems, contract tests for
    dbt apps can be implemented to verify the behavior of two types of interfaces:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将相同的概念应用于数据管理系统，可以为 dbt 应用程序实施合同测试，以验证两种类型接口的行为：
- en: The upstream sources.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上游源。
- en: The public interfaces, like marts and output ports.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公开接口，例如 marts 和输出端口。
- en: '![](../Images/9473d0a15f28704bca895b443739e3e9.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9473d0a15f28704bca895b443739e3e9.png)'
- en: Contract tests scope
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 合同测试范围
- en: Benefits of contract testing for data systems
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据系统的合同测试的好处
- en: As we have seen, data architectures are becoming more complex and decentralised
    as it once happened with operational services. As this type of system continues
    to scale, the ability to run maintainable and effective end-to-end test suites
    diminishes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，数据架构变得越来越复杂和分散，就像之前的操作服务一样。随着这种类型的系统不断扩展，运行可维护和有效的端到端测试套件的能力逐渐减弱。
- en: 'Contract testing becomes a powerful ally in managing different situations by
    providing several advantages:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 合同测试通过提供多个优势，成为管理不同情况的强大盟友：
- en: Reducing the number of end to end tests needed to verify the system’s behavior.
    Leading to faster feedback and lower maintainability costs.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少验证系统行为所需的端到端测试数量。这将导致更快的反馈和更低的维护成本。
- en: Manage the complexity of having separate data teams working in the same code
    base by providing clear expectations between team public interfaces.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过为团队公共接口提供明确的期望，管理在同一代码库中工作的不同数据团队的复杂性。
- en: Surface integration issues between components in lower environments before they
    reach production.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在低环境中发现组件之间的集成问题，确保它们在生产环境中出现之前得到解决。
- en: Better defined and documented interfaces between the different data pipelines
    or data products.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同的数据管道或数据产品之间定义和记录更明确的接口。
- en: Contract tests vs data quality test
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合同测试与数据质量测试
- en: You may be thinking, but… the contract test concept sounds like the quality
    test we are already running in our data pipelines.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在想，但……合同测试的概念听起来像我们已经在数据管道中运行的质量测试。
- en: That is a fair observation as there is a blurred line between the contract tests
    and data quality tests scopes. I like to think of contract tests as a subset of
    quality tests as part of a modern data testing strategy.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个合理的观察，因为合同测试与数据质量测试之间的界限模糊。我喜欢将合同测试视为现代数据测试策略中的质量测试的一个子集。
- en: '![](../Images/b2eea1a8d22d90b40c4bc9a962306481.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2eea1a8d22d90b40c4bc9a962306481.png)'
- en: Contract tests can be considered a subset of quality tests
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 合同测试可以视为质量测试的一个子集
- en: The difference is that **a contract test looks at the schema and constraints
    whereas the data quality test looks at the actual data and its characteristics**.
    Let’s look at some examples.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于**合同测试关注于模式和约束，而数据质量测试关注于实际数据及其特征**。让我们看一些例子。
- en: '**Contract tests scope:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**合同测试范围：**'
- en: Checking column types.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查列类型。
- en: Checking expected constraints at the schema level like primary and foreign keys,
    not null columns.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查模式级别的预期约束，如主键和外键、非空列。
- en: Checking accepted values for a given column.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查给定列的接受值。
- en: Checking valid ranges for a given column.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查给定列的有效范围。
- en: '**Quality tests scope:**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**质量测试范围：**'
- en: Assessing completeness, e.g. percentage of not nulls in a column.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估完整性，例如列中非空值的百分比。
- en: Assessing uniqueness, e.g. number of rows that are not unique.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估唯一性，例如非唯一行的数量。
- en: Assessing consistency, e.g. all user identifiers in the source are included
    in the output.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估一致性，例如源中的所有用户标识符是否都包含在输出中。
- en: Implementing our first contract test
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施我们的第一个合同测试
- en: Okay, enough theory, let’s get into action with a simple example. We have a
    dbt app called **health-insights** that takes weight and height data from upstream
    data sources and calculates the body mass index metric.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，理论够多了，让我们通过一个简单的示例开始实际操作。我们有一个叫做**health-insights**的dbt应用程序，它从上游数据源获取体重和身高数据，并计算体质指数指标。
- en: Our colleagues from the amazing backend team are in charge of producing the
    weight and height data we need to build our health-insights app. They work in
    a different team which is a bit busy and stressed. Sometimes they fail to notify
    us of schema changes. To test against these changes in upstream interfaces, we
    decided to create our first source contract test.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来自出色的后台团队的同事负责生成我们需要的体重和身高数据，以构建我们的health-insights应用程序。他们在一个有点忙碌和压力的不同团队工作。有时他们未能通知我们模式的更改。为了测试这些上游接口中的变化，我们决定创建第一个源合同测试。
- en: '![](../Images/9ec94b8abce79c7e5d79a3c97fc152e0.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ec94b8abce79c7e5d79a3c97fc152e0.png)'
- en: The system architecture of our example
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例的系统架构
- en: First, we need to add two new dbt packages, [dbt-expectations](https://github.com/calogica/dbt-expectations)
    and dbt-utils, that will allow us to make assertions on the schema of our sources
    and the accepted values.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加两个新的dbt包，[dbt-expectations](https://github.com/calogica/dbt-expectations)和dbt-utils，这将允许我们对源的模式和接受的值进行断言。
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Testing the data sources
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试数据源
- en: Let’s start by defining a contract test for our first source. We pull data from
    **raw_height**, a table that contains height information from the users of the
    gym app.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为我们的第一个源定义合同测试。我们从**raw_height**表中提取数据，该表包含来自健身应用程序用户的身高信息。
- en: We agree with our data producers that we will receive the height measurement,
    the units for the measurements, and the user ID. We agree on the data types and
    that only ‘cm’ and ‘inches’ are supported as units. With all this, we can define
    our first contract in the dbt source YAML file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与数据生产者达成一致，我们将接收身高测量值、测量单位和用户ID。我们同意数据类型，并且仅支持‘cm’和‘inches’作为单位。基于这些信息，我们可以在dbt源YAML文件中定义我们的第一个合同。
- en: The building blocks
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础构件
- en: 'Looking at the previous test, we can see several of the dbt-unit-testing macros
    in use:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看前面的测试，我们可以看到几个正在使用的 dbt-unit-testing 宏：
- en: '**dbt_expectations.expect_column_values_to_be_of_type:**This assertion allows
    us to define the expected column data type.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dbt_expectations.expect_column_values_to_be_of_type：** 这个断言允许我们定义预期的列数据类型。'
- en: '**accepted_values:**This assertion allows us to define a list of the accepeted
    values for a specific column.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**accepted_values：** 这个断言允许我们定义特定列的接受值列表。'
- en: '**dbt_utils.accepted_range:** This assertion allows us to define a numerical
    range for a given column. In the example, we expected the column’s value not to
    be less than 0.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dbt_utils.accepted_range：** 这个断言允许我们为给定列定义一个数值范围。在示例中，我们期望该列的值不小于 0。'
- en: '**not null:** Finally, built-in assertions like ‘not null’ allow us to define
    column constraints.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**not null：** 最后，像‘not null’这样的内置断言允许我们定义列约束。'
- en: 'Using these building blocks, we added several tests to define the contract
    expectations described above. Notice also how we have tagged the tests as “contract-test-source”.
    This tag allows us to run all contract tests in isolation, both locally, and as
    we will see later, in the CI/CD pipeline:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些构建块，我们添加了几个测试来定义上述合同期望。注意我们如何将测试标记为“contract-test-source”。这个标签允许我们在本地和之后在CI/CD管道中隔离地运行所有合同测试：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Implementing contract tests for marts and output ports
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 marts 和输出端口实现合同测试
- en: We have seen how quickly we can create contract tests for the sources of our
    dbt app, but what about the public interfaces of our data pipeline or data product?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何快速创建 dbt 应用的源的合同测试，但我们的数据管道或数据产品的公共接口呢？
- en: As data producers, we want to make sure we are producing data according to the
    expectations of our data consumers so we can satisfy the contract we have with
    them and [make our data pipeline or data product trustworthy and reliable](https://www.thoughtworks.com/en-es/insights/blog/data-strategy/building-an-amazon-com-for-your-data-products).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据生产者，我们希望确保我们按照数据消费者的期望生产数据，以便满足我们与他们的合同，并且[使我们的数据管道或数据产品可信赖和可靠](https://www.thoughtworks.com/en-es/insights/blog/data-strategy/building-an-amazon-com-for-your-data-products)。
- en: A simple way to ensure that we are meeting our obligations to our data consumers
    is to add contract testing for our public interfaces.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们履行对数据消费者义务的简单方法是为我们的公共接口添加合同测试。
- en: Dbt [recently released a new feature](https://docs.getdbt.com/docs/collaborate/govern/model-contracts)
    for SQL models, **model contracts**, that allows to define the contract for a
    dbt model. While building your model, **dbt will verify that your model’s transformation
    will produce a dataset matching up with its contract, or it will fail to build.**
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Dbt [最近发布了一个新特性](https://docs.getdbt.com/docs/collaborate/govern/model-contracts)，**model
    contracts**，它允许为 dbt 模型定义合同。在构建模型时，**dbt 将验证模型的转换是否生成与其合同匹配的数据集，否则将构建失败。**
- en: 'Let’s see it in action. Our mart, **body_mass_indexes**, produces a BMI metric
    from the weight and height measure data we get from our sources. The contract
    with our provider establishes the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看实际操作。我们的 mart，**body_mass_indexes**，从我们从源头获取的体重和身高数据中生成一个 BMI 指标。我们与供应商的合同规定了以下内容：
- en: Data types for each column.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每列的数据类型。
- en: User IDs cannot be null
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户 ID 不能为 null
- en: User IDs are always greater than 0
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户 ID 总是大于 0
- en: 'Let’s define the contract of the body_mass_indexes model using dbt model contracts:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 dbt 模型合同定义 body_mass_indexes 模型的合同：
- en: The building blocks
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建块
- en: Looking at the previous model specification file, we can see several metadata
    that allow us to define the contract.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 查看前面的模型规范文件，我们可以看到几个允许我们定义合同的元数据。
- en: '**contract.enforced:**This configuration tells dbt that we want to enforce
    the contract every time the model is run.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**contract.enforced：** 这个配置告诉 dbt 我们希望在每次运行模型时强制执行合同。'
- en: '**data_type:**This assertion allows us to define the column type we are expecting
    to produce once the model runs.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data_type：** 这个断言允许我们定义模型运行后预期生成的列类型。'
- en: '**constraints:** Finally, the constraints block gives us the chance to define
    useful constraints like that a column cannot be null, set primary keys, and custom
    expressions. In the example above we defined a constraint to tell dbt that the
    user_id must always be greater than 0\. You can see all the available constraints
    [here](https://docs.getdbt.com/reference/resource-properties/constraints).'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束：** 最后，约束块给了我们定义有用约束的机会，比如某列不能为 null，设置主键和自定义表达式。在上面的示例中，我们定义了一个约束，告诉 dbt
    用户 ID 必须始终大于 0。你可以在[这里](https://docs.getdbt.com/reference/resource-properties/constraints)查看所有可用的约束。'
- en: Source contract tests vs dbt model contracts
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源合同测试与 dbt 模型合同
- en: A difference between the contract tests we defined for our sources and the ones
    defined for our marts or output ports is **when the contracts are verified and
    enforced.**
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为源定义的合同测试与为 marts 或输出端口定义的合同测试之间的区别在于**合同何时被验证和强制执行。**
- en: Dbt enforces [model contracts](https://docs.getdbt.com/docs/collaborate/govern/model-contracts)
    when the model is being generated by ‘dbt run’, whereas contracts based on [dbt
    tests](https://docs.getdbt.com/docs/build/tests) are enforced when the dbt tests
    run.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Dbt 在‘dbt run’生成模型时强制执行[模型合同](https://docs.getdbt.com/docs/collaborate/govern/model-contracts)，而基于[dbt
    测试](https://docs.getdbt.com/docs/build/tests)的合同在 dbt 测试运行时被强制执行。
- en: If one of the model contracts is not satisfied, you will see an error when you
    execute ‘dbt run’ with specific details on the failure. You can see an example
    in the following dbt run console output.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个模型合同没有得到满足，当你执行‘dbt run’时会看到一个错误，并且会提供失败的具体细节。你可以在以下 dbt 运行控制台输出中查看一个示例。
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running the contract tests in the pipeline
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在管道中运行合同测试
- en: Until now we have a test suite of powerful contract tests, but how and when
    do we run them?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了一套强大的合同测试套件，但我们如何以及何时运行它们？
- en: We can run contract tests in two types of pipelines.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在两种类型的管道中运行合同测试。
- en: '**CI/CD pipelines**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD 管道**'
- en: '**Data pipelines**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据管道**'
- en: For example, you can execute the source contract tests on a schedule in a **CI/CD
    pipeline** targeting the data sources available in lower environments like test
    or staging. You can set the pipeline to fail every time the contract is not met.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在**CI/CD 管道**中按照计划执行源合同测试，目标是像测试或预生产这样的低环境中的数据源。你可以设置管道，以便每次合同不符合时管道会失败。
- en: These failures provides valuable information about contract-breaking changes
    introduced by other teams before these changes reach production.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些失败提供了关于其他团队在这些变化到达生产环境之前引入的违反合同的变化的宝贵信息。
- en: '![](../Images/e8652099a68c59a64267a0a9cf807fa2.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8652099a68c59a64267a0a9cf807fa2.png)'
- en: '[Example of a dbt CI/CD pipeline in Github Actions](https://github.com/portovep/dbt-unit-testing-examples/actions/workflows/cd-pipeline.yml)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[Github Actions 中的 dbt CI/CD 管道示例](https://github.com/portovep/dbt-unit-testing-examples/actions/workflows/cd-pipeline.yml)'
- en: You can also run your output port/mart contract tests each time you deploy a
    new change via the CI/CD pipeline. As dbt model contracts are checked every time
    the model is built, you tell dbt to enforce the contract so that if the new model
    changes introduce a breaking change in the contract, your team will get notified
    before your data consumers get impacted.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每次通过 CI/CD 管道部署新变化时，你也可以运行你的输出端口/mart 合同测试。由于 dbt 模型合同在每次模型构建时都会被检查，因此你可以告诉
    dbt 强制执行合同，以便如果新模型变化引入了合同中的破坏性变化，你的团队会在数据消费者受到影响之前得到通知。
- en: Finally, you can also run your source and output port/mart contract tests in
    **your data pipelines in production**. Running contract tests in production can
    help your team understand if a data pipeline failed because one of the upstream
    dependencies broke the contract or because the data you are producing is not meeting
    the contract with your downstream consumers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你还可以在**生产环境中的数据管道**中运行源和输出端口/mart 合同测试。在生产环境中运行合同测试可以帮助你的团队了解数据管道是否因上游依赖项破坏了合同而失败，或是因为你生产的数据没有满足与下游消费者的合同。
- en: Additional tips to get started
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始的附加提示
- en: Start small, testing the integration points that are more brittle and prone
    to failure.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从小开始，测试那些更脆弱、更容易失败的集成点。
- en: Apply [the tolerant reader pattern](https://martinfowler.com/bliki/TolerantReader.html)
    when implementing contract tests. Only assert on the data you need.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实施合同测试时应用[宽容读者模式](https://martinfowler.com/bliki/TolerantReader.html)。仅对你需要的数据进行断言。
- en: Tweak the behavior of the contract test based on your needs, you can configure
    [**the severity attribute**](https://docs.getdbt.com/reference/resource-configs/severity)to
    make them fail loudly or just throw a warning.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据你的需求调整合同测试的行为，你可以配置[**严重性属性**](https://docs.getdbt.com/reference/resource-configs/severity)以使其产生响亮的失败或仅发出警告。
- en: Integrate these types of tests [with modern data observability tools like Montecarlo](https://docs.getmontecarlo.com/docs/dbt-failures-are-monte-carlo-incidents)
    so they are part of your incident management process.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这些类型的测试[与现代数据可观测性工具如 Montecarlo](https://docs.getmontecarlo.com/docs/dbt-failures-are-monte-carlo-incidents)集成，使其成为你事件管理过程的一部分。
- en: '**Leverage dbt contract tests even if your data systems are not developed using
    dbt**. You can still define source contract tests in dbt and execute them against
    tables or files created with other frameworks or plain SQL.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**即使你的数据系统不是使用 dbt 开发的，也要利用 dbt 合同测试**。你仍然可以在 dbt 中定义源合同测试，并在使用其他框架或纯 SQL 创建的表或文件上执行这些测试。'
- en: Considering more advanced contract testing techniques like [consumer-driven
    contracts](https://www.martinfowler.com/articles/consumerDrivenContracts.html)
    could make it easier to implement contract testing in specific contexts.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑更高级的合同测试技术如[消费者驱动的合同](https://www.martinfowler.com/articles/consumerDrivenContracts.html)可能会让在特定背景下实施合同测试变得更容易。
- en: Conclusion
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have seen how testing strategies for data systems can also benefit from testing
    techniques like contract testing as these systems become more decentralized and
    grow in complexity.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到数据系统的测试策略如何通过合同测试等测试技术受益，随着这些系统变得更加去中心化和复杂。
- en: 'We also saw how to start implementing contract tests leveraging dbt built-in
    features and additional dbt packages. We apply these type of test to two integration
    points: upstream data sources and data marts/output ports.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了如何利用 dbt 内置功能和额外的 dbt 包开始实施合同测试。我们将这种测试应用于两个集成点：上游数据源和数据集市/输出端口。
- en: I hope this article gives you and your team all the tools and tips to **start
    implementing contract tests as your data systems scale to fulfill new data use
    cases**. If you are curious, you can check the source code of the example dbt
    application in [this Github repo](https://github.com/portovep/dbt-testing-examples).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能为你和你的团队提供所有工具和技巧，以**在数据系统扩展以满足新的数据用例时开始实施合同测试**。如果你感兴趣，可以查看[这个 Github
    仓库](https://github.com/portovep/dbt-testing-examples)中的示例 dbt 应用程序的源代码。
- en: Are you ready to give it a go and start your contract testing journey? I would
    love to hear your thoughts and experience in the comments.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好开始你的合同测试之旅了吗？我很想听听你的想法和经验。
- en: '*This article is part of series of articles I am writing on* [*testing data
    pipelines and data products.*](https://medium.com/@pablo.porto/list/testing-data-products-and-data-pipelines-with-dbt-52eaff0e92dd)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇文章是我在写的一系列关于* [*测试数据管道和数据产品*](https://medium.com/@pablo.porto/list/testing-data-products-and-data-pipelines-with-dbt-52eaff0e92dd)
    *的文章中的一部分。*'
- en: '*I am always looking forward to meeting new people. If you want to connect,
    you can find me on* [*Linkedin*](https://www.linkedin.com/in/pabloportoveloso/)*,*
    [*Github*](https://github.com/portovep)*,* [*Instagram*](https://www.instagram.com/porto.vga/),
    [*Substack*](https://pabsgarage.substack.com/), *or on* [*my personal website.*](https://pabloporto.me)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*我总是期待认识新的人。如果你想联系我，你可以在* [*Linkedin*](https://www.linkedin.com/in/pabloportoveloso/)*、*
    [*Github*](https://github.com/portovep)*、* [*Instagram*](https://www.instagram.com/porto.vga/)、[*Substack*](https://pabsgarage.substack.com/)*或*
    [*我的个人网站*](https://pabloporto.me)上找到我。'
- en: '*Thanks to my Thoughtworks colleagues Arne, Manisha and David for taking the
    time to review early versions of this article. Thanks to the maintainers of the*
    [*dbt-expectations package*](https://github.com/calogica/dbt-expectations) *for
    their great work.*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢我的 Thoughtworks 同事 Arne、Manisha 和 David 抽时间审阅这篇文章的早期版本。感谢* [*dbt-expectations
    包*](https://github.com/calogica/dbt-expectations) *的维护者们的伟大工作。*'
- en: '*All images unless otherwise noted are by the author.*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，否则所有图片均由作者提供。*'
