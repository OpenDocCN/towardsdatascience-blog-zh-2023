- en: 'False Prophet: Comparing a Regression Model to Meta’s Prophet'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/false-prophet-comparing-a-regression-model-to-metas-prophet-bfac00823425?source=collection_archive---------4-----------------------#2023-11-25](https://towardsdatascience.com/false-prophet-comparing-a-regression-model-to-metas-prophet-bfac00823425?source=collection_archive---------4-----------------------#2023-11-25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Can my Frankenstein of a time series regression model — inspired by Prophet
    — compete with the real deal?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bradley-stephen-shaw.medium.com/?source=post_page-----bfac00823425--------------------------------)[![Bradley
    Stephen Shaw](../Images/b3ef5e6e292083ff0f8523ec5ffe89f0.png)](https://bradley-stephen-shaw.medium.com/?source=post_page-----bfac00823425--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bfac00823425--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bfac00823425--------------------------------)
    [Bradley Stephen Shaw](https://bradley-stephen-shaw.medium.com/?source=post_page-----bfac00823425--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc5cd0a58b5ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffalse-prophet-comparing-a-regression-model-to-metas-prophet-bfac00823425&user=Bradley+Stephen+Shaw&userId=c5cd0a58b5ae&source=post_page-c5cd0a58b5ae----bfac00823425---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bfac00823425--------------------------------)
    ·7 min read·Nov 25, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbfac00823425&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffalse-prophet-comparing-a-regression-model-to-metas-prophet-bfac00823425&user=Bradley+Stephen+Shaw&userId=c5cd0a58b5ae&source=-----bfac00823425---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbfac00823425&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffalse-prophet-comparing-a-regression-model-to-metas-prophet-bfac00823425&source=-----bfac00823425---------------------bookmark_footer-----------)![](../Images/0cee6d014812f7f0aec8ea5101f8be71.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Piret Ilver](https://unsplash.com/@saltsup?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In what’s likely to be the last installment in my journey to build on Meta’s
    great forecasting package Prophet, I’ll be taking a look at how my homemade version
    stacks up against the original.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s going to be a quick one: we’ll first take a look at the data before visualising
    how the two approaches forecast on out-of-time data. We’ll then more formally
    determine which is the better forecaster using some metrics before discussing
    whether or not it was a fair comparison at all.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get cracking.
  prefs: []
  type: TYPE_NORMAL
- en: '*Aside: I mention other installments — two other articles, to be precise. The
    first covered a feature engineering for time series, based on Prophet’s approach
    and can be found here:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/false-prophet-feature-engineering-for-a-homemade-time-series-regression-part-1-of-2-52d9df3d930d?source=post_page-----bfac00823425--------------------------------)
    [## False Prophet: Feature Engineering for a Homemade Time Series Regression'
  prefs: []
  type: TYPE_NORMAL
- en: Building on ideas from Meta’s Prophet package to create powerful features for
    time series machine learning models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/false-prophet-feature-engineering-for-a-homemade-time-series-regression-part-1-of-2-52d9df3d930d?source=post_page-----bfac00823425--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*In a sequel, I tackle the model build using our shiny new features. That lives
    here:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/false-prophet-a-homemade-time-series-regression-model-54e296b99438?source=post_page-----bfac00823425--------------------------------)
    [## False Prophet: a Homemade Time Series Regression Model'
  prefs: []
  type: TYPE_NORMAL
- en: Borrowing ideas from Meta’s Prophet to build a powerful time series regression
    model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/false-prophet-a-homemade-time-series-regression-model-54e296b99438?source=post_page-----bfac00823425--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Many of the topics discussed here today are covered in more detail in the
    linked articles — worth a read if you’re one for the fine print.*'
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re using UK road traffic accident data¹, summarised to a monthly count.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2fd5691e8f47f45e0c7f03119d4f778d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'We see a few features in the time series:'
  prefs: []
  type: TYPE_NORMAL
- en: A strong downward trend throughout the series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A change in the rate of decrease somewhere between 2012 and 2014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fairly strong seasonality in the early part of the series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potentially variable seasonal effects, particularly toward the end of the series.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The aim of the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have two models — we’ll refer to our homemade Frankenstein model as the LASSO
    model, and Meta’s Prophet as, well… Prophet.
  prefs: []
  type: TYPE_NORMAL
- en: For each of the models, we’re going to produce out-of-time forecasts. This essentially
    means fitting to a subset of our monthly count data and then forecasting 12 months
    into the future.
  prefs: []
  type: TYPE_NORMAL
- en: Each forecast will be compared to actual observed data; whichever model gets
    closest — on average — wins.
  prefs: []
  type: TYPE_NORMAL
- en: '*Aside: this is essentially a cross-validation test. If you’re familiar with
    standard cross-validation approaches but haven’t used them in a time series analysis,
    you might find (2) below quite useful.*'
  prefs: []
  type: TYPE_NORMAL
- en: In pictures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can visualise the out-of-time forecasts from each of the models — LASSO in
    red, Prophet in blue — and compare them against the realised actuals.
  prefs: []
  type: TYPE_NORMAL
- en: We should remember that each of the forecasts were built using all of the data
    prior to the forecast period. As an example, the forecast for 2010 was built using
    using data up to and including 2009.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7fa0f27ffe2ed18cc2ab355971c56bc9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s a pretty clear picture: with the exception of one year (2013), Prophet
    looks to be a bit off the mark.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is interesting to note is the similarity in the forecast patterns created
    by the two approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: Both models produce *lower* forecasts — i.e. they reflect the overall generally
    downward trend.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both models have intra-annual increases and mid-year spikes — i.e. the forecasts
    produce a similar seasonality pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How far — exactly — are the two models from reality? We’ll need to look at some
    performance metrics to find out.
  prefs: []
  type: TYPE_NORMAL
- en: In numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll measure performance using the usual suspects — mean absolute error (MAE),
    mean absolute percentage error (MAPE), and root mean squared error (RMSE) — as
    well as a newcomer (to me at least): MASE.'
  prefs: []
  type: TYPE_NORMAL
- en: The Mean Absolute Scaled Error
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mean absolute scaled error (MASE) is a “generally applicable measurement
    of forecast accuracy without the problems seen in the other measurements”³ and
    “can be used to compare forecast methods on a single series and also to compare
    forecast accuracy between series”³.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematically, the MASE is the ratio of out-of-time forecast error to the in-sample
    forecast error produced by a naive forecasting approach. Since we’re using monthly
    data, I’ve taken the naive forecast prediction to be the value at the same point
    in time in the previous year — e.g. the forecast for May 2012 is simply the value
    for May 2011\. Very naive.
  prefs: []
  type: TYPE_NORMAL
- en: When comparing forecasting methods, the method with the lowest MASE is the preferred
    method³.
  prefs: []
  type: TYPE_NORMAL
- en: Important to note is that MASE > 1 implies that the forecast method performs
    poorly relative to a naive forecast.
  prefs: []
  type: TYPE_NORMAL
- en: '*Aside: I’ve used the implementation described in the linked article — i.e.
    the “error” is the mean absolute error. I believe that we can use other measures
    of performance in place of the MAE — e.g. MAPE — as long as the error measure
    is used consistently in the scaled error calculation.*'
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s summarise out-of-fold and overall average model performance using the
    metrics we’ve described:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f0d72a67d03c1f9b88d00bc3b9723e00.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: That’s a fairly comprehensive win for the LASSO model, with Prophet only out-performing
    in small pockets.
  prefs: []
  type: TYPE_NORMAL
- en: Knives and gun fights?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we’ve seen, it’s not pretty reading if you’re a Prophet fan: Meta’s tool
    manages to snatch a few folds (metric dependent) to avoid a complete whitewash.
    Impartial commentators might suggest a return to the clubhouse to re-evaluate
    tactics.'
  prefs: []
  type: TYPE_NORMAL
- en: While the result isn’t great for Prophet, there are a few reasons why performance
    like this can be expected.
  prefs: []
  type: TYPE_NORMAL
- en: The features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The LASSO model uses features that have been specifically engineered for this
    particular time series. The set of input features available to it is essentially
    a superset of what’s available to Prophet with a little extra on the side.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, some of the features are subtly different in the LASSO model.
    For instance, features describing potential change points are not as constrained
    in the LASSO as they are in the Prophet model.
  prefs: []
  type: TYPE_NORMAL
- en: Think of it as trying to out-guess someone else, knowing less than — or slightly
    different — to them. Not so easy.
  prefs: []
  type: TYPE_NORMAL
- en: The modelling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The out-of-fold data is not as “unseen” as I’ve made it out to be.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a previous article we covered the parameterisation of the LASSO model: how
    we use out-of-fold data to select the strength of regularisation which optimised
    the model’s ability to forecast. In that sense the LASSO model has been tuned
    to forecast well over each cut of the data while the Prophet model has been thrown
    straight out of the box and into the deep end.'
  prefs: []
  type: TYPE_NORMAL
- en: In “normal” hyperparameter optimisation exercises, we can usually expect to
    see performance increases by about 1% — 2%; the performance increase in a time
    series context is likely much greater as “out-of-fold” really is “out-of-time”.
  prefs: []
  type: TYPE_NORMAL
- en: Time to call it a day with Prophet then?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not so fast… this series of articles has certainly highlighted a few things
    — let’s talk through a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, Prophet works *incredibly* well. Although it can indeed be beaten,
    it takes a bit of work to do so — much more than the 10 lines of code you need
    to get Prophet up and forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: The interpretability of the LASSO model is far superior to what’s available
    from Prophet. Yes, Prophet gives us estimates of uncertainty for forecasts but
    we can’t tell what’s actually driving the predictions. I’m not even sure we can
    put Prophet through SHAP.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve also found that Prophet isn’t so straightforward to tune. Maybe it’s because
    I’m not an advanced user of the package, or maybe it’s because of the roundabout
    way in which you have to tune parameters. This is certainly not the case with
    the LASSO model.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the LASSO approach arguably represents an improvement in performance
    and interpretability, perhaps what we really need is to use both approaches: one
    as a litmus test for the other. For example, if a “naive” Prophet model produces
    sensible forecasts, it might be reasonable to replicate the LASSO approach (the
    “False Prophet”) to maximise performance.'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it from me. I hope you’ve enjoyed reading this series of articles as
    much as I’ve enjoyed writing them.
  prefs: []
  type: TYPE_NORMAL
- en: As always, please let me know what you think — I’m really interested to hear
    about your experiences with Prophet or with modelling time series in different
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: Until next time.
  prefs: []
  type: TYPE_NORMAL
- en: References and and useful resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://roadtraffic.dft.gov.uk/downloads](https://roadtraffic.dft.gov.uk/downloads)
    used under the [Open Government Licence (nationalarchives.gov.uk)](https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Let’s Do: Time Series Cross-Validation | Python in Plain English](https://python.plainenglish.io/on-times-series-cross-validation-6d685eaf335b)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Mean absolute scaled error — Wikipedia](https://en.wikipedia.org/wiki/Mean_absolute_scaled_error)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
