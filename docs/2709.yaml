- en: How I Built A Cascading Data Pipeline Based on AWS (Part 2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-i-built-a-cascading-data-pipeline-based-on-aws-part-2-217622c65ee4?source=collection_archive---------12-----------------------#2023-08-25](https://towardsdatascience.com/how-i-built-a-cascading-data-pipeline-based-on-aws-part-2-217622c65ee4?source=collection_archive---------12-----------------------#2023-08-25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Automatic, scalable, and powerful
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://anzhemeng.medium.com/?source=post_page-----217622c65ee4--------------------------------)[![Memphis
    Meng](../Images/5a2b214eb5d5ab884b18224c471662c0.png)](https://anzhemeng.medium.com/?source=post_page-----217622c65ee4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----217622c65ee4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----217622c65ee4--------------------------------)
    [Memphis Meng](https://anzhemeng.medium.com/?source=post_page-----217622c65ee4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F85370dce2b14&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-cascading-data-pipeline-based-on-aws-part-2-217622c65ee4&user=Memphis+Meng&userId=85370dce2b14&source=post_page-85370dce2b14----217622c65ee4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----217622c65ee4--------------------------------)
    ·10 min read·Aug 25, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F217622c65ee4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-cascading-data-pipeline-based-on-aws-part-2-217622c65ee4&user=Memphis+Meng&userId=85370dce2b14&source=-----217622c65ee4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F217622c65ee4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-cascading-data-pipeline-based-on-aws-part-2-217622c65ee4&source=-----217622c65ee4---------------------bookmark_footer-----------)![](../Images/527158d227cde2bf33b0286a233784ff.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Mehmet Ali Peker](https://unsplash.com/@mrpeker?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/hfiym43qBpk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '[Previously](https://medium.com/p/997b212a84d2), I shared my experience in
    developing a data pipeline using AWS CloudFormation technology. It is not an optimal
    approach, though, because it leaves behind 3 more issues awaiting resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: The deployment has to be imposed manually which could increase the chances of
    errors;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All resources are created in one single stack, without proper boundaries and
    layers; as the development cycle goes on, the resource stack will be heavier,
    and managing it will be a disaster;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many resources are supposed to be sustained and reused in other projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In short, we are going to increase the manageability and reusability of this
    project, in an agile manner.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS enables users to implement 2 types of CloudFormation structural patterns:
    cross-stack reference and nested stacking. Cross-stack reference stands for a
    designing style of developing cloud stacks separately, and usually independently,
    while the resources among all stacks can be interrelated based on the reference
    relationship. [Nested stacking](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html)
    means a CloudFormation stack composed of other stacks. It is achieved by using
    the `[AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stack.html)`
    resource.'
  prefs: []
  type: TYPE_NORMAL
