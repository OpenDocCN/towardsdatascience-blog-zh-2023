- en: Introducing PeekingDuck for Computer Vision
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-peekingduck-for-computer-vision-8b0105591559?source=collection_archive---------17-----------------------#2023-01-03](https://towardsdatascience.com/introducing-peekingduck-for-computer-vision-8b0105591559?source=collection_archive---------17-----------------------#2023-01-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Open-source state-of-the-art computer vision models with minimal lines of code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@natsunoyuki?source=post_page-----8b0105591559--------------------------------)[![Y.
    Natsume](../Images/a39993351a920c3a9f5bd27b6b3306aa.png)](https://medium.com/@natsunoyuki?source=post_page-----8b0105591559--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8b0105591559--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8b0105591559--------------------------------)
    [Y. Natsume](https://medium.com/@natsunoyuki?source=post_page-----8b0105591559--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdab037034ffe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-peekingduck-for-computer-vision-8b0105591559&user=Y.+Natsume&userId=dab037034ffe&source=post_page-dab037034ffe----8b0105591559---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8b0105591559--------------------------------)
    ·4 min read·Jan 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8b0105591559&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-peekingduck-for-computer-vision-8b0105591559&user=Y.+Natsume&userId=dab037034ffe&source=-----8b0105591559---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8b0105591559&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-peekingduck-for-computer-vision-8b0105591559&source=-----8b0105591559---------------------bookmark_footer-----------)![](../Images/a5aec3707685a05c0409e2d70cd8f6a9.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Vlad Tchompalov](https://unsplash.com/@tchompalov?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/wt5Y8VY_0bA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer vision projects can be a very daunting, involving a wide variety of
    tools and packages such as [OpenCV](https://opencv.org), [TensorFlow](https://www.tensorflow.org)
    and [PyTorch](https://pytorch.org/vision/stable/index.html) just to name a few.
    Not only does one have to be familiar with the tools and APIs involved, one also
    needs to combine the various packages correctly in order for the entire computer
    vision pipeline to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: For example, OpenCV handles images in the `[H, W, C]` format with BGR channels,
    while TensorFlow does so in the same format but with RGB channels, and PyTorch
    does so in the `[C, H, W]` format with RGB channels. Due to this inconsistency
    the image format must be constantly modified as the image is passed amongst the
    various libraries. Issues like this (in addition to others!) results in plenty
    of boilerplate code which we want to avoid in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if we could streamline computer vision pipelines with a single unified
    pipeline which is:'
  prefs: []
  type: TYPE_NORMAL
- en: Open source without restrictions such as GPL-3.0 in order to cut costs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modular for applicability to various use cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: State-of-the-art for maximum performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minimal to minimize pipline complexity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It turns out that all of these issues are resolved to some extent with [PeekingDuck](https://github.com/aisingapore/PeekingDuck)
    — a computer vision package released recently by [AI Singapore](https://github.com/aisingapore)!
  prefs: []
  type: TYPE_NORMAL
- en: PeekingDuck
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PeekingDuck is a computer vision framework which is:'
  prefs: []
  type: TYPE_NORMAL
- en: Open source (Apache 2.0) — no costs or restrictions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modular — mix and match various modules to solve different use cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: State-of-the-art computer vision inference —powerful deep learning models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minimal — literally no Python code needed!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installing PeekingDuck as a Python package through a package manager such
    as pip, the package can be used directly from the command line/terminal, allowing
    for easy and direct integration with other applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PeekingDuck
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PeekingDuck is installed as a Python package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Nodes — PeekingDuck’s Basic Building Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With PeekingDuck, computer vision pipelines are built using basic building
    blocks called nodes. Each node handles a different set of operations, and by mixing
    various nodes different pipelines can be created. As of writing PeekingDuck has
    6 different types of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: Input —feed image data into the pipeline from live camera feeds or video/image
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Augment —preprocess image data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model —perform computer vision tasks such as object detection or pose estimation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dabble — post process model outputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw — visualize model outputs such as bounding boxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output — save model outputs to disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Person Tracking Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using PeekingDuck is easy! In this section we will demonstrate how to use PeekingDuck
    to create a person tracking pipeline using PeekingDuck!
  prefs: []
  type: TYPE_NORMAL
- en: Initialize PeekingDuck
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to initialize PeekingDuck within a specified directory (`person_tracking/`
    in this case).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will create a configuration file named `pipeline_config.yml` under `person_tracking/`
    together with some other source code files. In order to get PeekingDuck to do
    what we want it to do, we have to modify `pipeline_config.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, `pipeline_config.yml` should contain the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the following `nodes` for this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input.visual` — specifies the file to load the image data from. We use a video
    stitched from the [Venice-2 images from the MOT15 dataset](https://motchallenge.net/data/MOT15/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`model.jde` — specifies the model to use. For person tracking we use the [Joint
    Detection and Embedding (JDE)](https://github.com/Zhongdao/Towards-Realtime-MOT)
    model.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dabble.statistics` —Performs statistical calculations based on the model’s
    output. In this case we calculate the maximum number of detected IDs for each
    frame.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`draw.bbox` — draws the detected bounding boxes on each frame.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`draw.tag` — draws the corresponding tag for each bounding box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`draw.legend` — draws the cumulative maximum number of detections.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`output.media_writer` — outputs the model’s predictions to disk.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By mixing and matching different nodes, we can build different pipelines to
    solve different computer vision use cases. A detailed list of available nodes
    are available on [PeekingDuck’s website](https://peekingduck.readthedocs.io/en/stable/nodes/input.html).
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to prepare the data. In our case we use OpenCV to stitch together
    the [Venice-2 images from the MOT15 dataset](https://motchallenge.net/data/MOT15/)
    into a video file named `venice-2-train.mp4` with a frame rate of `30` and a resolution
    of `[1920, 1080]`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Run PeekingDuck
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After initializing both PeekingDuck as well as the data, all that is left is
    to simply run the pipeline from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The pipeline’s output will be saved under `output/` as specified in `pipeline_config.yml`
    which can be visualized either as a video or as a `.gif` image as shown below.
    The detected bounding boxes have been overlaid onto each tracked person together
    with each corresponding tracking ID. The cumulative maximum number of tracked
    IDs is also displayed on the lower left part of each frame.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe5f0fe49c6bcc446bfb2fe238236788.png)'
  prefs: []
  type: TYPE_IMG
- en: PeekingDuck person tracking output. Figure created by the author. Original images
    are the [Venice-2 images from the MOT15 dataset](https://motchallenge.net/data/MOT15/).
  prefs: []
  type: TYPE_NORMAL
- en: Note that aside from preparing the data, we have not written a single line of
    Python code while using PeekingDuck to do person tracking!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer vision has come a long way, and we now have access to many fantastic
    packages such as PeekingDuck. PeekingDuck offers open-source, modular state-of-the-art
    computer vision models with minimal amounts of Python code, allowing for anyone
    to pursue computer vision projects with relative ease and simplicity!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://peekingduck.readthedocs.io/en/stable/master.html](https://peekingduck.readthedocs.io/en/stable/master.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://motchallenge.net/data/MOT15/](https://motchallenge.net/data/MOT15/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/Zhongdao/Towards-Realtime-MOT](https://github.com/Zhongdao/Towards-Realtime-MOT)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
