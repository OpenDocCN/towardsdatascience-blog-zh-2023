- en: Creating Fractals in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中创建分形
- en: 原文：[https://towardsdatascience.com/creating-fractals-in-python-a502e5fc2094?source=collection_archive---------3-----------------------#2023-03-24](https://towardsdatascience.com/creating-fractals-in-python-a502e5fc2094?source=collection_archive---------3-----------------------#2023-03-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/creating-fractals-in-python-a502e5fc2094?source=collection_archive---------3-----------------------#2023-03-24](https://towardsdatascience.com/creating-fractals-in-python-a502e5fc2094?source=collection_archive---------3-----------------------#2023-03-24)
- en: '**A dive into geometry, recurring algorithms and triangles… lots of them!**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**深入几何学、递归算法和三角形……很多很多的！**'
- en: '[](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)[![Robert
    Elmes](../Images/a18f0f3f6edfdb7e4ec23712f3620ab7.png)](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)
    [Robert Elmes](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)[![Robert
    Elmes](../Images/a18f0f3f6edfdb7e4ec23712f3620ab7.png)](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)
    [Robert Elmes](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F60c271ca8c1f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&user=Robert+Elmes&userId=60c271ca8c1f&source=post_page-60c271ca8c1f----a502e5fc2094---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)
    ·8 min read·Mar 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa502e5fc2094&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&user=Robert+Elmes&userId=60c271ca8c1f&source=-----a502e5fc2094---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F60c271ca8c1f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&user=Robert+Elmes&userId=60c271ca8c1f&source=post_page-60c271ca8c1f----a502e5fc2094---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)
    ·8 分钟阅读·2023年3月24日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa502e5fc2094&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&user=Robert+Elmes&userId=60c271ca8c1f&source=-----a502e5fc2094---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa502e5fc2094&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&source=-----a502e5fc2094---------------------bookmark_footer-----------)![](../Images/2559843ce7d15598d62ec3de02d518d7.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa502e5fc2094&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&source=-----a502e5fc2094---------------------bookmark_footer-----------)![](../Images/2559843ce7d15598d62ec3de02d518d7.png)'
- en: A picture I took earlier this year on a particularly bleak day, even for England.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在今年早些时候拍的一张照片，那天特别阴沉，即使在英格兰也是如此。
- en: '**Fractals** are infinitely complex patterns that are self-similar across different
    scales. For example, a tree trunk splits into smaller branches. These in turn
    split into even smaller branches, and so on.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**分形** 是在不同尺度上自相似的无限复杂的图案。例如，树干分裂成更小的枝条。这些枝条进一步分裂成更小的枝条，依此类推。'
- en: By generating fractals programmatically, we can turn simple shapes into complicated
    repeating patterns.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过程序生成分形，我们可以将简单的形状转化为复杂的重复图案。
- en: In this article I will be exploring how we can build impressive fractals in
    Python using some basic A-Level geometry and a little programming know-how.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将探讨如何使用一些基本的A-Level几何知识和一点编程技巧，在Python中构建令人印象深刻的分形。
- en: Fractals play an important role in data science. For example, in fractal analysis
    the fractal characteristics of datasets are evaluated to help understand the structure
    of underlying processes. In addition, the recurring algorithm at the centre of
    fractal generation can be applied to a wide range of data problems, from the binary
    search algorithm to recurrent neural networks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 分形在数据科学中扮演着重要角色。例如，在分形分析中，会评估数据集的分形特征，以帮助理解潜在过程的结构。此外，分形生成中心的递归算法可以应用于广泛的数据问题，从二分查找算法到递归神经网络。
- en: '**The idea**'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**想法**'
- en: I want to write a program that can draw an equilateral triangle. On each side
    of the triangle it must then be able to draw a slightly smaller outward facing
    triangle. It should be able to repeat this process as many times as I would like,
    hopefully creating some interesting patterns.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我想写一个可以绘制等边三角形的程序。在三角形的每一边上，它还必须能够绘制一个稍小的外向三角形。它应该能够根据我的需要重复这个过程，希望能创造出一些有趣的图案。
- en: '![](../Images/b85843885804ec5f00e910a76c929f64.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b85843885804ec5f00e910a76c929f64.png)'
- en: This rough sketch illustrates the type of pattern I want to generate.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个粗略的草图展示了我想生成的图案类型。
- en: Represent an image
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表示图像
- en: I will be representing an image as a two dimensional array of pixels. Each cell
    in the pixel array will represent the colour (RGB) of that pixel.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把图像表示为一个二维像素数组。像素数组中的每个单元格将表示该像素的颜色（RGB）。
- en: To achieve this, we can use the libraries [**NumPy**](https://numpy.org/install/)
    to generate the pixel array and [**Pillow**](https://pillow.readthedocs.io/en/latest/installation.html)
    to turn it into an image that we can save.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们可以使用库[**NumPy**](https://numpy.org/install/)生成像素数组，并使用[**Pillow**](https://pillow.readthedocs.io/en/latest/installation.html)将其转换为可以保存的图像。
- en: '![](../Images/eee75796763fdfb6ff12d0994022901b.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eee75796763fdfb6ff12d0994022901b.png)'
- en: The blue pixel has an x value of 3 and y value of 4 and could be accessed from
    a 2d array like **pixels[4][3]**
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色像素的 x 值为 3，y 值为 4，可以通过二维数组 **pixels[4][3]** 进行访问
- en: Draw a line
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制直线
- en: Now it’s time to get coding!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始编码了！
- en: Firstly, I need a function that can take two sets of coordinates and draw a
    line between them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要一个函数，可以接受两个坐标集并在它们之间绘制一条直线。
- en: The code below works by interpolating between two points, adding new pixels
    to the pixel array with each step. You can think of this process like colouring
    in a line pixel by pixel.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码通过在两个点之间进行插值，每一步都向像素数组中添加新的像素。你可以把这个过程想象成逐像素地为一条线着色。
- en: '*I have used the continuation character ‘\’ in each code snippet to help fit
    some longer lines of code in.*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*我在每个代码片段中使用了续行符 ‘\’，以便将一些较长的代码行适配进来。*'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/447cf94ec4ce65aaaba8829fe64a9545.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/447cf94ec4ce65aaaba8829fe64a9545.png)'
- en: The result when I ask this function to draw a yellow line between each corner
    of the pixel array
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我让这个函数在像素数组的每个角落之间绘制一条黄色直线时的结果
- en: Draw a triangle
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制三角形
- en: Now I have a function which can draw a line between two points, it’s time to
    draw the first equilateral triangle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有了一个可以在两个点之间绘制直线的函数，是时候绘制第一个等边三角形了。
- en: 'Given the centre point and side length of a triangle, we can work out the height
    using the handy formula: **h = ½(√3a)**.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 给定三角形的中心点和边长，我们可以使用方便的公式计算高度：**h = ½(√3a)**。
- en: Now using that height, centre point and side length, I can figure out where
    each corner of the triangle should be. Using the *plot_line* function I made earlier,
    I can draw a line between each corner.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，利用这个高度、中心点和边长，我可以确定三角形的每个角落应该在哪里。使用我之前制作的*plot_line*函数，我可以在每个角落之间绘制一条直线。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/bd2db1465beb955f579cce25c68219ac.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd2db1465beb955f579cce25c68219ac.png)'
- en: The result when we draw a triangle in the centre of a 500x500 pixel PNG
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 500x500 像素的 PNG 图像中心绘制一个三角形的结果
- en: Generating the fractal
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成分形
- en: The stage is set. Almost everything I need is ready to create my first fractal
    in Python. How exciting!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪。几乎所有需要的条件都已经准备好，可以在 Python 中创建我的第一个分形了。真令人兴奋！
- en: However, this final step is arguably the trickiest. I want our triangle function
    to call itself for each side it has. For this to work, I need to be able to calculate
    the centre point of each of the new smaller triangles, and to rotate them correctly
    so they are pointing perpendicular to the side they are attached to.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这最后一步可以说是最棘手的。我希望我们的三角形函数能够对每条边调用自身。为了使其有效，我需要能够计算每个新小三角形的中心点，并正确地旋转它们，使其与附加的边垂直。
- en: By subtracting the offset of our centre point from the coordinates I wish to
    rotate, and then applying the formula to rotate a pair of coordinates, we can
    use this function to rotate each corner of the triangle.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从我希望旋转的坐标中减去中心点的偏移量，然后应用旋转坐标对的公式，我们可以使用此函数旋转三角形的每个角。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/ba950b6f2ac329e4149fd6af97c8e53e.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba950b6f2ac329e4149fd6af97c8e53e.png)'
- en: A triangle where we have rotated each coordinate by 35 degrees
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个我们将每个坐标旋转了35度的三角形
- en: Now I can rotate a triangle, I must switch my focus to drawing a new smaller
    triangle on each side of the first triangle.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以旋转三角形，我必须将注意力转向在第一个三角形的每一边上绘制一个新的、更小的三角形。
- en: To achieve this, I extended the *draw_triangle* function to calculate, for each
    edge, the rotation and centre point of a new triangle with a side length reduced
    by the parameter *shrink_side_by*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我扩展了*draw_triangle*函数，以计算每条边的新三角形的旋转和中心点，新三角形的边长由参数*shrink_side_by*减少。
- en: Once it has calculated the centre point and rotation of the new triangle it
    calls *draw_triangle* (itself) to draw the new, smaller triangle out from the
    centre of the current line. This will then in turn hit the same block of code
    that calculates another set of centre points and rotations for an even smaller
    triangle.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦计算出新三角形的中心点和旋转角度，它会调用*draw_triangle*（它自身）来从当前线的中心绘制新的、更小的三角形。这将再次触发相同的代码块，计算另一个更小三角形的中心点和旋转角度。
- en: This is called a recurring algorithm, as our *draw_triangle* function will now
    call itself until it reaches the *max_depth* of triangles we wish to draw. It’s
    important to have this escape clause, because otherwise the function would theoretically
    continue recurring forever (but in practice the call stack will get too large,
    resulting in a stack overflow error)!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这称为递归算法，因为我们的*draw_triangle*函数现在会调用自身，直到达到我们希望绘制的三角形的*max_depth*。重要的是要有这个逃逸条件，否则函数理论上会无限递归（但实际上调用堆栈会变得过大，导致栈溢出错误）！
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/6f19399b68b1763a7be024446e414a19.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f19399b68b1763a7be024446e414a19.png)'
- en: Triangular fractal with shrink_side_by = 1/2 and max_depth = 2
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 三角形分形，*shrink_side_by* = 1/2 和 *max_depth* = 2
- en: Results
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: Below are some examples of different images we can generate by modifying the
    *shrink_side_by* and *max_depth* values input to our *draw_triangle* function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些通过修改*shrink_side_by*和*max_depth*值输入到我们的*draw_triangle*函数中可以生成的不同图像示例。
- en: It’s interesting how these large repeating patterns often create more complex
    shapes, such as hexagons, but with a mesmerising symmetry.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，这些大型重复模式通常会创造出更复杂的形状，如六边形，但具有迷人的对称性。
- en: '![](../Images/59173552d3ab9bd0be4790d692fce68b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59173552d3ab9bd0be4790d692fce68b.png)'
- en: Increasingly complex shapes begin to emerge in the symmetry of the repeating
    triangles.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在重复三角形的对称性中，开始出现越来越复杂的形状。
- en: '![](../Images/33ccff8b7816f00bb7c42646b9fb0dd3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33ccff8b7816f00bb7c42646b9fb0dd3.png)'
- en: A snowflake like fractal, using a modified version of the draw_triangle function
    that also drew a triangle facing inwards.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一种类似雪花的分形，使用了修改版的`draw_triangle`函数，该函数还绘制了一个朝内的三角形。
- en: '![](../Images/24051971e50a4ea2ca719724ece759f6.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24051971e50a4ea2ca719724ece759f6.png)'
- en: Another creation, using a smaller decrease in size with each iteration
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种创作，使用每次迭代减少的更小的尺寸
- en: '*All images unless otherwise noted are by the author.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，否则所有图片均由作者提供。*'
- en: Conclusion
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Fractals are great fun to play around with and can create beautiful patterns.
    Using a few simple concepts and a splash of creativity, we can generate very impressive
    structures.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 分形非常有趣，可以创造出美丽的图案。使用一些简单的概念和一丝创造力，我们可以生成非常令人印象深刻的结构。
- en: In understanding the core properties of our fractals, and applying the recurring
    algorithm, we’ve created a solid foundation which can help us understand more
    complex fractal problems in data science.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解分形的核心属性并应用递归算法时，我们创建了一个坚实的基础，这有助于我们理解数据科学中更复杂的分形问题。
- en: Feel free to read and download the full code [**here**](https://github.com/BobbyElmes/Triangular-Fractal-Generator---Python-).
    Let me know if you find ways to improve or extend it!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 随时阅读和下载完整代码[**这里**](https://github.com/BobbyElmes/Triangular-Fractal-Generator---Python-)。如果你发现改进或扩展的方法，请告诉我！
- en: '*I wonder what you could create with a different shape?*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*我很好奇你能用不同的形状创造出什么？*'
