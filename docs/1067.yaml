- en: Creating Fractals in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-fractals-in-python-a502e5fc2094?source=collection_archive---------3-----------------------#2023-03-24](https://towardsdatascience.com/creating-fractals-in-python-a502e5fc2094?source=collection_archive---------3-----------------------#2023-03-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**A dive into geometry, recurring algorithms and triangles… lots of them!**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)[![Robert
    Elmes](../Images/a18f0f3f6edfdb7e4ec23712f3620ab7.png)](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)
    [Robert Elmes](https://medium.com/@bobby.elmes?source=post_page-----a502e5fc2094--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F60c271ca8c1f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&user=Robert+Elmes&userId=60c271ca8c1f&source=post_page-60c271ca8c1f----a502e5fc2094---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a502e5fc2094--------------------------------)
    ·8 min read·Mar 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa502e5fc2094&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&user=Robert+Elmes&userId=60c271ca8c1f&source=-----a502e5fc2094---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa502e5fc2094&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreating-fractals-in-python-a502e5fc2094&source=-----a502e5fc2094---------------------bookmark_footer-----------)![](../Images/2559843ce7d15598d62ec3de02d518d7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: A picture I took earlier this year on a particularly bleak day, even for England.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fractals** are infinitely complex patterns that are self-similar across different
    scales. For example, a tree trunk splits into smaller branches. These in turn
    split into even smaller branches, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: By generating fractals programmatically, we can turn simple shapes into complicated
    repeating patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In this article I will be exploring how we can build impressive fractals in
    Python using some basic A-Level geometry and a little programming know-how.
  prefs: []
  type: TYPE_NORMAL
- en: Fractals play an important role in data science. For example, in fractal analysis
    the fractal characteristics of datasets are evaluated to help understand the structure
    of underlying processes. In addition, the recurring algorithm at the centre of
    fractal generation can be applied to a wide range of data problems, from the binary
    search algorithm to recurrent neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: '**The idea**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I want to write a program that can draw an equilateral triangle. On each side
    of the triangle it must then be able to draw a slightly smaller outward facing
    triangle. It should be able to repeat this process as many times as I would like,
    hopefully creating some interesting patterns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b85843885804ec5f00e910a76c929f64.png)'
  prefs: []
  type: TYPE_IMG
- en: This rough sketch illustrates the type of pattern I want to generate.
  prefs: []
  type: TYPE_NORMAL
- en: Represent an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will be representing an image as a two dimensional array of pixels. Each cell
    in the pixel array will represent the colour (RGB) of that pixel.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we can use the libraries [**NumPy**](https://numpy.org/install/)
    to generate the pixel array and [**Pillow**](https://pillow.readthedocs.io/en/latest/installation.html)
    to turn it into an image that we can save.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eee75796763fdfb6ff12d0994022901b.png)'
  prefs: []
  type: TYPE_IMG
- en: The blue pixel has an x value of 3 and y value of 4 and could be accessed from
    a 2d array like **pixels[4][3]**
  prefs: []
  type: TYPE_NORMAL
- en: Draw a line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it’s time to get coding!
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, I need a function that can take two sets of coordinates and draw a
    line between them.
  prefs: []
  type: TYPE_NORMAL
- en: The code below works by interpolating between two points, adding new pixels
    to the pixel array with each step. You can think of this process like colouring
    in a line pixel by pixel.
  prefs: []
  type: TYPE_NORMAL
- en: '*I have used the continuation character ‘\’ in each code snippet to help fit
    some longer lines of code in.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/447cf94ec4ce65aaaba8829fe64a9545.png)'
  prefs: []
  type: TYPE_IMG
- en: The result when I ask this function to draw a yellow line between each corner
    of the pixel array
  prefs: []
  type: TYPE_NORMAL
- en: Draw a triangle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now I have a function which can draw a line between two points, it’s time to
    draw the first equilateral triangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the centre point and side length of a triangle, we can work out the height
    using the handy formula: **h = ½(√3a)**.'
  prefs: []
  type: TYPE_NORMAL
- en: Now using that height, centre point and side length, I can figure out where
    each corner of the triangle should be. Using the *plot_line* function I made earlier,
    I can draw a line between each corner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bd2db1465beb955f579cce25c68219ac.png)'
  prefs: []
  type: TYPE_IMG
- en: The result when we draw a triangle in the centre of a 500x500 pixel PNG
  prefs: []
  type: TYPE_NORMAL
- en: Generating the fractal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The stage is set. Almost everything I need is ready to create my first fractal
    in Python. How exciting!
  prefs: []
  type: TYPE_NORMAL
- en: However, this final step is arguably the trickiest. I want our triangle function
    to call itself for each side it has. For this to work, I need to be able to calculate
    the centre point of each of the new smaller triangles, and to rotate them correctly
    so they are pointing perpendicular to the side they are attached to.
  prefs: []
  type: TYPE_NORMAL
- en: By subtracting the offset of our centre point from the coordinates I wish to
    rotate, and then applying the formula to rotate a pair of coordinates, we can
    use this function to rotate each corner of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ba950b6f2ac329e4149fd6af97c8e53e.png)'
  prefs: []
  type: TYPE_IMG
- en: A triangle where we have rotated each coordinate by 35 degrees
  prefs: []
  type: TYPE_NORMAL
- en: Now I can rotate a triangle, I must switch my focus to drawing a new smaller
    triangle on each side of the first triangle.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, I extended the *draw_triangle* function to calculate, for each
    edge, the rotation and centre point of a new triangle with a side length reduced
    by the parameter *shrink_side_by*.
  prefs: []
  type: TYPE_NORMAL
- en: Once it has calculated the centre point and rotation of the new triangle it
    calls *draw_triangle* (itself) to draw the new, smaller triangle out from the
    centre of the current line. This will then in turn hit the same block of code
    that calculates another set of centre points and rotations for an even smaller
    triangle.
  prefs: []
  type: TYPE_NORMAL
- en: This is called a recurring algorithm, as our *draw_triangle* function will now
    call itself until it reaches the *max_depth* of triangles we wish to draw. It’s
    important to have this escape clause, because otherwise the function would theoretically
    continue recurring forever (but in practice the call stack will get too large,
    resulting in a stack overflow error)!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6f19399b68b1763a7be024446e414a19.png)'
  prefs: []
  type: TYPE_IMG
- en: Triangular fractal with shrink_side_by = 1/2 and max_depth = 2
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below are some examples of different images we can generate by modifying the
    *shrink_side_by* and *max_depth* values input to our *draw_triangle* function.
  prefs: []
  type: TYPE_NORMAL
- en: It’s interesting how these large repeating patterns often create more complex
    shapes, such as hexagons, but with a mesmerising symmetry.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59173552d3ab9bd0be4790d692fce68b.png)'
  prefs: []
  type: TYPE_IMG
- en: Increasingly complex shapes begin to emerge in the symmetry of the repeating
    triangles.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33ccff8b7816f00bb7c42646b9fb0dd3.png)'
  prefs: []
  type: TYPE_IMG
- en: A snowflake like fractal, using a modified version of the draw_triangle function
    that also drew a triangle facing inwards.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24051971e50a4ea2ca719724ece759f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Another creation, using a smaller decrease in size with each iteration
  prefs: []
  type: TYPE_NORMAL
- en: '*All images unless otherwise noted are by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fractals are great fun to play around with and can create beautiful patterns.
    Using a few simple concepts and a splash of creativity, we can generate very impressive
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: In understanding the core properties of our fractals, and applying the recurring
    algorithm, we’ve created a solid foundation which can help us understand more
    complex fractal problems in data science.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to read and download the full code [**here**](https://github.com/BobbyElmes/Triangular-Fractal-Generator---Python-).
    Let me know if you find ways to improve or extend it!
  prefs: []
  type: TYPE_NORMAL
- en: '*I wonder what you could create with a different shape?*'
  prefs: []
  type: TYPE_NORMAL
