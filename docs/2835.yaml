- en: 'The Facility Dispersion Problem: Mixed-Integer Programming Models'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设施分布问题：混合整数规划模型
- en: 原文：[https://towardsdatascience.com/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26?source=collection_archive---------2-----------------------#2023-09-09](https://towardsdatascience.com/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26?source=collection_archive---------2-----------------------#2023-09-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26?source=collection_archive---------2-----------------------#2023-09-09](https://towardsdatascience.com/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26?source=collection_archive---------2-----------------------#2023-09-09)
- en: A comprehensive Python tutorial on the p-dispersion and maxisum models
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 p-dispersion 和 maxisum 模型的全面 Python 教程
- en: '[](https://medium.com/@bruscalia12?source=post_page-----98ffdb56cd26--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----98ffdb56cd26--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98ffdb56cd26--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98ffdb56cd26--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----98ffdb56cd26--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page-----98ffdb56cd26--------------------------------)[![布鲁诺·斯卡利亚
    C. F. 莱特](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----98ffdb56cd26--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98ffdb56cd26--------------------------------)[![数据科学之道](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98ffdb56cd26--------------------------------)
    [布鲁诺·斯卡利亚 C. F. 莱特](https://medium.com/@bruscalia12?source=post_page-----98ffdb56cd26--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----98ffdb56cd26---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----98ffdb56cd26--------------------------------)
    ·10 min read·Sep 9, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F98ffdb56cd26&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----98ffdb56cd26---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----98ffdb56cd26---------------------post_header-----------)
    发表在 [数据科学之道](https://towardsdatascience.com/?source=post_page-----98ffdb56cd26--------------------------------)
    ·10分钟阅读·2023年9月9日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F98ffdb56cd26&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----98ffdb56cd26---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F98ffdb56cd26&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26&source=-----98ffdb56cd26---------------------bookmark_footer-----------)![](../Images/bdc6d779cd05ff45c825c69eb52247bd.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F98ffdb56cd26&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26&source=-----98ffdb56cd26---------------------bookmark_footer-----------)![](../Images/bdc6d779cd05ff45c825c69eb52247bd.png)'
- en: Photo by [Z](https://unsplash.com/@dead____artist?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Z](https://unsplash.com/@dead____artist?utm_source=medium&utm_medium=referral)
    提供的照片，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
- en: In some facility location problems, facilities need to be positioned so that
    the influence of one doesn’t overshadow or adversely affect the others. Whether
    driven by motives of risk mitigation, avoidance of competition, or other considerations,
    mastering the solutions to these challenges is a crucial skill in the operations
    research toolkit.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些设施选址问题中，需要将设施布置得使得一个设施的影响力不会盖过或对其他设施产生不利影响。无论是出于风险缓解、避免竞争还是其他考虑，掌握这些挑战的解决方案是运筹学工具箱中的一个关键技能。
- en: 'Kuby (1987) proposed two distinct mixed-integer programming (MIP) formulations
    for these problems: the *p*-*dispersion* problem and the *maxisum* problem. In
    this article, both will be implemented using the Python library Pyomo and the
    HiGHS solver.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kuby（1987）提出了两种不同的混合整数规划（MIP）公式：*p*-*分散*问题和 *maxisum* 问题。在这篇文章中，将使用 Python 库
    Pyomo 和 HiGHS 求解器实现这两种问题。
- en: Besides the two models, some useful modeling resources will be presented. First,
    a strategy for linearizing the product of binary variables in the context of MIP,
    although considering the maximization objectives, doesn’t need to be explicit
    in this problem. Second, a max-min MIP formulation, which intends to maximize
    something smaller than any parameter of a set of items if the item is selected.
    Finally, a strategy for solving multiple objectives with a well-defined hierarchy
    of priorities that combines elements of the two models.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个模型之外，还将介绍一些有用的建模资源。首先，在线性规划（MIP）背景下线性化二进制变量乘积的策略，尽管考虑到最大化目标，这在本问题中不需要显式说明。其次，一种最大-最小
    MIP 公式，旨在最大化比一组项目的任何参数都小的某些东西，如果该项目被选中。最后，一种解决多目标的策略，具有明确的优先级层次结构，结合了这两个模型的元素。
- en: Those interested not yet familiar with numerical optimization might find it
    helpful to take a look at my previous stories about[*Linear Programming*](https://medium.com/towards-data-science/linear-programming-theory-and-applications-c67600591612)and
    the [*Branch & Bound*](/a-gentle-introduction-to-branch-bound-d00a4ee1cad) method
    before proceeding with this one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于尚未熟悉数值优化的人，可以参考我之前关于[*线性规划*](https://medium.com/towards-data-science/linear-programming-theory-and-applications-c67600591612)和
    [*分支限界*](/a-gentle-introduction-to-branch-bound-d00a4ee1cad) 方法的故事，以帮助理解。
- en: As usual, you can find the complete code in this [git repository](https://github.com/bruscalia/optimization-demo-files/tree/28266b5e2cc90b9e39f6f72322d3008fd211f1d8/mip/dispersion).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，你可以在这个 [git 仓库](https://github.com/bruscalia/optimization-demo-files/tree/28266b5e2cc90b9e39f6f72322d3008fd211f1d8/mip/dispersion)
    找到完整的代码。
- en: Which of these locations would you choose to place 5 facilities?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你会选择哪些位置来放置 5 个设施？
- en: '![](../Images/87fd3855217c72e990af4bcd0823c7b4.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87fd3855217c72e990af4bcd0823c7b4.png)'
- en: Possible locations in facility dispersion problem. (Image by the author).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 设施分散问题中的可能位置。（图片来自作者）。
- en: The product of binary variables
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制变量的乘积
- en: When defining the basic elements of this problem, one can use binary variables
    that assume the value of 1 if a location is selected and 0 otherwise. Let us denote
    these variables *xᵢ*. Suppose the distances (or some other dispersion metric)
    between two locations are computed in advance and let us denote these as *dᵢⱼ*.
    How could we calculate the dispersion of any pair of facilities selected?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义此问题的基本元素时，可以使用二进制变量，如果选择了某个位置，则该变量为 1，否则为 0。我们用 *xᵢ* 来表示这些变量。假设两个位置之间的距离（或其他分散度量）已经计算出来，记作
    *dᵢⱼ*。我们如何计算所选设施对的分散度？
- en: It is somehow intuitive in such a situation to formulate it using the product
    of the binary variables *xᵢ* and *xⱼ* to compute the dissimilarity obtained when
    they are both included in the solution. This approach is equivalent to a logical
    AND statement. However, this would lead to a quadratic formulation, therefore
    one wouldn’t be able to apply linear solvers. Fortunately, there is a way to formulate
    the product of binary variables in MIP using a few constraints.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用二进制变量 *xᵢ* 和 *xⱼ* 的乘积来计算它们都包含在解决方案中时的异质性是直观的。这种方法等同于逻辑与（AND）语句。然而，这将导致二次公式，因此无法使用线性求解器。幸运的是，有一种方法可以通过几个约束在
    MIP 中公式化二进制变量的乘积。
- en: 'Consider a directed graph *G*(*V*, *A*) and *zᵢⱼ* a new binary variable that
    indicates both nodes *i* and *j* are selected. If either *i* or *j* is not selected,
    *zᵢⱼ* must be 0\. This leads to the first group of constraints:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个有向图 *G*(*V*, *A*) 和一个新的二进制变量 *zᵢⱼ*，它指示节点 *i* 和 *j* 都被选择。如果 *i* 或 *j* 其中之一未被选择，则
    *zᵢⱼ* 必须为 0。这就产生了第一组约束：
- en: '![](../Images/95020fb434def6a19defe6d774334276.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95020fb434def6a19defe6d774334276.png)'
- en: First group of constraints in linearized form of the product of binary variables.
    (Image by the author).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制变量乘积的线性化约束的第一组。（图片来自作者）。
- en: So far, even if both *i* and *j* are selected, *zᵢⱼ* can assume the value of
    0\. Therefore we must include an additional constraint such that when *i* and
    *j* are selected *zᵢⱼ* becomes 1.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，即使选择了 *i* 和 *j*，*zᵢⱼ* 仍可以为 0。因此，我们必须包括一个额外的约束，使得当 *i* 和 *j* 被选择时，*zᵢⱼ* 变为
    1。
- en: '![](../Images/035c954cc0b3690494b37a9d141cfd4a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/035c954cc0b3690494b37a9d141cfd4a.png)'
- en: Second group of constraints in linearized form of the product of binary variables.
    (Image by the author).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 线性化形式的二进制变量乘积的第二组约束。（图片由作者提供）。
- en: When maximizing something proportional to *zᵢⱼ*, as in the *maxisum* problem,
    the second constraint group presented is unnecessary, as it would make no sense
    not to compute a gain proportional to *zᵢⱼ* if it is feasible. However, this can
    be useful when formulating other MIP models.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当最大化与*zᵢⱼ*成比例的某物时，如*maxisum*问题，第二组约束是不必要的，因为如果可行的话，不计算与*zᵢⱼ*成比例的收益是没有意义的。然而，在制定其他MIP模型时，这可能是有用的。
- en: In the following section, let us apply these concepts to the *maxisum* problem.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，让我们将这些概念应用于*maxisum*问题。
- en: The maxisum model
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*maxisum*模型'
- en: The discrete *maxisum* problem must define the location of *p* facilities among
    *N* discrete nodes to maximize the sum of distances (or the average of distances)
    computed between all pairs of selected facilities. Therefore, consider the facilities
    are nodes displaced in a directed graph *G*(*V*, *A*). The weight of each arc
    from *i* to *j* is the distance (dispersion) metric *dᵢⱼ* known in advance. Also,
    consider binary variables *xᵢ* to indicate if a location *i* is selected and *zᵢⱼ*
    to indicate if both *i* and *j* are selected.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 离散*maxisum*问题必须定义在*N*个离散节点中*p*个设施的位置，以最大化计算在所有选定设施对之间的距离（或距离的平均值）的总和。因此，考虑设施是分布在有向图*G*(*V*,
    *A*)中的节点。每条从*i*到*j*的弧的权重是已知的距离（离散）度量*dᵢⱼ*。同时，考虑二进制变量*xᵢ*表示位置*i*是否被选择，以及*zᵢⱼ*表示*i*和*j*是否都被选择。
- en: 'The objective can be stated as the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目标可以陈述如下：
- en: '![](../Images/aea7aaef5823c8b3c1c208438670c977.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aea7aaef5823c8b3c1c208438670c977.png)'
- en: Besides the constraints to linearize the product of binary variables presented
    in the previous section, it is necessary to include a constraint to guarantee
    that *p* locations are selected.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前一节中提出的将二进制变量的乘积线性化的约束外，还需要加入一个约束以保证选择了*p*个位置。
- en: 'Thus, we can state the constraints of the problem as:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将问题的约束陈述为：
- en: '![](../Images/5085eb75d16c6f01f378c013bc40cd4f.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5085eb75d16c6f01f378c013bc40cd4f.png)'
- en: Let us put that into code using Python. To do so, we must start by importing
    the libraries which will be used. The library *numpy* will be used for linear
    algebra calculations and to create random coordinate points; the functions *squareform*
    and *pdist* from scipy will be used to compute distances given a matrix of coordinates;
    *matplotlib* will be our visualization tool; and *pyomo* the algebraic modeling
    language (AML) (with solver HiGHS).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Python将其转化为代码。为此，我们必须首先导入将要使用的库。*numpy*库将用于线性代数计算和创建随机坐标点；scipy中的*squareform*和*pdist*函数将用于根据坐标矩阵计算距离；*matplotlib*将作为我们的可视化工具；*pyomo*则是代数建模语言（AML）（与求解器HiGHS）。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We must create *N* points and define how many of those must be selected as facility
    locations. By fixing the random seed (12) in every code execution the points represented
    in the introduction should be obtained.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须创建*N*个点，并定义其中多少个必须被选为设施位置。通过在每次代码执行时固定随机种子（12），应能获得引言中所示的点。
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We now have the necessary elements to start our *pyomo* model.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在具备了开始我们的*pyomo*模型所需的必要元素。
- en: 'There are two approaches for modeling a problem in *pyomo*: *Abstract* and
    *Concrete* models. In the first approach, the algebraic expressions of the problem
    are defined before some data values are supplied, whereas, in the second, the
    model instance is created immediately as its elements are defined. You can find
    more about these approaches in the [library documentation](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)
    or in the book by Bynum et al. (2021). Throughout this article, we will adopt
    the *Concrete* model formulation.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在*pyomo*中建模问题有两种方法：*Abstract*模型和*Concrete*模型。在第一种方法中，问题的代数表达式在提供一些数据值之前定义，而在第二种方法中，模型实例在定义其元素时立即创建。你可以在[库文档](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)或Bynum等（2021年）的书中找到有关这些方法的更多信息。在本文中，我们将采用*Concrete*模型形式。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this model, we have two *sets*: nodes and arcs. As we are considering a
    complete directed graph, there exist arcs between every pair of two nodes except
    from the node to itself.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中，我们有两个*集合*：节点和弧。由于我们考虑的是一个完整的有向图，因此每对两个节点之间存在弧，除了从节点到自身的弧。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The parameters provided beforehand are the number of nodes that must be selected
    and the distances between pairs of nodes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 预先提供的参数是必须选择的节点数量以及节点对之间的距离。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, let us include the decision variables.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们引入决策变量。
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And the constraints…
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以及约束条件……
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, we must create the objective function.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须创建目标函数。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now the *maxisum* model is ready to be solved. We must then instantiate a solver
    compatible with *pyomo* to handle it. The *Highs* solver is available in *Pyomo*
    (check the imports) since version 6.4.3 if the *highspy* package is installed.
    So make sure to run a `pip install highspy` .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在*maxisum*模型已经准备好解决了。我们需要实例化一个与*pyomo*兼容的求解器来处理它。*Highs*求解器在*Pyomo*中可用（请查看导入），自6.4.3版本起，如果安装了*highspy*包。所以请确保运行`pip
    install highspy`。
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And, after approximately 120s of computing time, we have the following results:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在大约120秒的计算时间后，我们得到了以下结果：
- en: '![](../Images/6098128728c99bfb5ea47c4f4464594a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6098128728c99bfb5ea47c4f4464594a.png)'
- en: Maxisum model results. (Image by the author).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最大和模型结果。（作者提供的图像）。
- en: Notice that, even though the total dispersion is maximized, two facilities in
    the upper left corner are still quite close to each other, which can be undesirable.
    Thus, alternatively to the *maxisum* formulation we have the *p*-*dispersion*
    model in which we maximize the minimum distance between any pair of selected nodes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使总离散度被最大化，左上角的两个设施仍然彼此非常接近，这可能是不希望的。因此，除了*maxisum*公式之外，我们还有*p*-*离散*模型，其中我们最大化任何选定节点对之间的最小距离。
- en: The p-dispersion model
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: p-离散模型
- en: In the *p*-*dispersion* model, we need an additional decision variable to compute
    the minimum distance between all pairs of selected nodes, which is our goal to
    maximize. Let us denote this variable *D*. We must create a big M constraint that
    ensures that if both *i* and *j* are selected, *D* is lesser than or equal to
    *dᵢⱼ*; otherwise, we must ensure that *D* is unlimited. If we keep the formulation
    with *zᵢⱼ* as the product of binary variables, we can formulate this additional
    constraint as the following.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在*p*-*离散*模型中，我们需要一个额外的决策变量来计算所有选定节点对之间的最小距离，这也是我们的最大化目标。我们将这个变量称为*D*。我们必须创建一个大M约束，确保如果*i*和*j*都被选择，*D*小于或等于*dᵢⱼ*；否则，我们必须确保*D*是无限的。如果我们保持*zᵢⱼ*作为二进制变量的乘积的公式，我们可以将这个额外的约束公式化如下。
- en: '![](../Images/658a74a84500ca65fcf09d3239d6b32a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/658a74a84500ca65fcf09d3239d6b32a.png)'
- en: Max-min constraint with product of binary variables. (Image by the author).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制变量乘积的最大-最小约束。（作者提供的图像）。
- en: In this formulation, *M* is a fixed parameter arbitrarily large used to formulate
    a disjunctive rule. A good choice of *M* should be large enough to guarantee the
    feasibility of the constraint (*i*, *j*) for any value of *D* when *zᵢⱼ* is zero,
    but as small as possible so that the linear relaxation of the model is similar
    to the integer version, which makes convergence easier. In this problem, the largest
    value of *dᵢⱼ* can be an interesting alternative.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种公式中，*M*是一个任意大的固定参数，用于制定一个析取规则。*M*的选择应该足够大，以保证在*zᵢⱼ*为零时，约束(*i*, *j*)对任何*D*值都是可行的，但又尽可能小，以使模型的线性松弛版本与整数版本相似，从而使收敛更容易。在这个问题中，*dᵢⱼ*的最大值可能是一个有趣的替代选择。
- en: Although this formulation would work well for this model, a more concise approach
    can be used, in which variables *zᵢⱼ* are not even included in the model.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种公式对于这个模型效果很好，但可以使用更简洁的方法，其中变量*zᵢⱼ*甚至不包含在模型中。
- en: '![](../Images/7adbefd60f390dd42a01011d095c54f3.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7adbefd60f390dd42a01011d095c54f3.png)'
- en: Max-min constraint with node variables. (Image by the author).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 节点变量的最大-最小约束。（作者提供的图像）。
- en: In this formulation, either *xᵢ* or *xⱼ* equal to zero is a sufficient condition
    to guarantee that the inequality is valid for any value of *D*. And the objective
    becomes simply maximizing *D.*
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种公式中，*xᵢ*或*xⱼ*等于零是保证不等式对任何*D*值有效的充分条件。目标变为简单地最大化*D*。
- en: In Python code next, consider we have a new model with the same sets and parameters
    of the previous one as well as the group of decisionvariables *x*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的Python代码中，考虑到我们有一个新模型，其集合和参数与之前的相同，以及决策变量组*x*。
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And after calling the solver it took less than 1.2s to obtain the following
    results.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 调用求解器后，花费了不到1.2秒获得以下结果。
- en: '![](../Images/92419e3d732d5483c4196eb3a44ef178.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92419e3d732d5483c4196eb3a44ef178.png)'
- en: p-dispersion model results. (Image by the author).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: p-离散模型结果。（作者提供的图像）。
- en: Which seems great as the locations are well distributed in space.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很好，因为位置在空间中分布均匀。
- en: Is there a way to improve this distribution?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有没有办法改善这种分布？
- en: A multicriteria approach
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一种多标准方法
- en: Remember the objective function of the *p*-*dispersion* model depends only on
    the minimum distance between any pair of nodes selected. Therefore several solutions
    can be obtained using combinations of the two points defining this distance and
    others with distances to each other greater than or equal to the objective itself.
    Can we refine our solution by selecting the best of these alternatives? That leads
    to the *two-step* “multicriteria approach” proposed by Kuby (1987).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 *p*-*离散* 模型的目标函数仅依赖于选定节点对之间的最小距离。因此，可以通过定义该距离的两点的组合以及其他距离大于或等于目标本身的点来获得多个解。我们能否通过选择这些替代方案中的最佳来优化我们的解？这导致了
    Kuby（1987）提出的 *两步* “多标准方法”。
- en: In the first step, the *p*-*dispersion* model is solved to optimality, and the
    current objective is stored in a parameter *d_opt*. Then, a *maxisum* model with
    an additional constraint ensuring that *D* ≥ *d_opt* is solved to obtain, among
    the optimal solutions to the *p*-*dispersion* model, the one with the maximum
    total dispersion.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，*p*-*离散*模型被求解到最优解，当前目标值被存储在参数*d_opt*中。接着，解决一个带有附加约束的 *maxisum* 模型，确保 *D*
    ≥ *d_opt*，以获得在 *p*-*离散*模型的最优解中，具有最大总离散度的解。
- en: To do that in Python, consider you have a *p*-*dispersion* model instantiated
    with also decision variables and constraints of the *maxisum* model.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中进行此操作时，考虑到你已经实例化了 *p*-*离散* 模型，同时也包含 *maxisum* 模型的决策变量和约束。
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And this is surprisingly fast because when the solver enters the second objective
    the space of feasible alternatives is substantially small. In less than one (additional)
    second, it leads to the following results.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这出乎意料地很快，因为当求解器进入第二个目标时，可行替代方案的空间显著缩小。在不到一（额外）秒的时间内，得到了以下结果。
- en: '![](../Images/f520995b99e6f26fba8e053f009c44c4.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f520995b99e6f26fba8e053f009c44c4.png)'
- en: 'Multicriteria problem: p-dispersion model followed by maxisum objective. (Image
    by the author).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 多标准问题：p-离散模型后跟 *maxisum* 目标。（图像来源于作者）。
- en: Further reading
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: When customers aren’t uniformly distributed, facilities have a limited capacity,
    or perhaps the adequate number of facilities is unknown beforehand, probably you
    are facing a different *Facility Location Problem*. You can find the formulation
    of Balinski (1965) implemented in Python using PuLP in this amazing story by [Nicolo
    Cosimo Albanese](https://medium.com/u/7430df412ec?source=post_page-----98ffdb56cd26--------------------------------).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户不均匀分布、设施有有限容量，或者适当的设施数量事先未知时，你可能面临的是不同的 *设施位置问题*。你可以在 [Nicolo Cosimo Albanese](https://medium.com/u/7430df412ec?source=post_page-----98ffdb56cd26--------------------------------)
    的精彩故事中找到使用 PuLP 在 Python 中实现的 Balinski（1965）公式。
- en: '[](/optimization-capacitated-facility-location-problem-in-python-57c08f259fe0?source=post_page-----98ffdb56cd26--------------------------------)
    [## Optimization: Capacitated Facility Location Problem in Python'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/optimization-capacitated-facility-location-problem-in-python-57c08f259fe0?source=post_page-----98ffdb56cd26--------------------------------)
    [## 优化：Python中的容量设施位置问题'
- en: Find the optimal number and location of warehouses to reduce costs and meet
    demand
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 找出最佳的仓库数量和位置，以降低成本并满足需求。
- en: towardsdatascience.com](/optimization-capacitated-facility-location-problem-in-python-57c08f259fe0?source=post_page-----98ffdb56cd26--------------------------------)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/optimization-capacitated-facility-location-problem-in-python-57c08f259fe0?source=post_page-----98ffdb56cd26--------------------------------)
- en: Conclusions
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, two mixed-integer programming models for the facility dispersion
    problem were implemented in Python using Pyomo. As previously verified in the
    literature, the *maxisum* model can lead to an uneven distribution of elements
    in space whereas the *p*-*dispersion* model produced solutions with locations
    well spread in space and evenly distributed. A *maxisum* objective can be used
    to refine solutions of the *p*-*dispersion* model by selecting the one with the
    greatest total dispersion from the set of optimal solutions. The [complete code](https://github.com/bruscalia/optimization-demo-files/tree/28266b5e2cc90b9e39f6f72322d3008fd211f1d8/mip/dispersion)
    used in these examples is available for further use.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，两个混合整数编程模型用于设施分散问题，它们使用 Pyomo 在 Python 中实现。如文献中先前验证的那样，*最大和*模型可能导致空间中元素的不均匀分布，而*p*-*分散*模型则产生了空间中位置分布良好且均匀的解决方案。*最大和*目标可以用来通过从最优解决方案集中选择具有最大总分散度的一个，来优化*p*-*分散*模型的解决方案。用于这些示例的[完整代码](https://github.com/bruscalia/optimization-demo-files/tree/28266b5e2cc90b9e39f6f72322d3008fd211f1d8/mip/dispersion)可供进一步使用。
- en: References
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Balinski, M. L. 1965\. Integer programming: methods, uses, computations. *Management
    science*, *12*(3), 253–313.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Balinski, M. L. 1965\. 整数编程：方法、用途、计算。*管理科学*, *12*(3), 253–313。
- en: 'Bynum, M. L., Hackebeil, G. A., Hart, W. E., Laird, C. D., Nicholson, B. L.,
    Siirola, J. D., … & Woodruff, D. L. 2021\. *Pyomo-optimization modeling in python*
    (Vol. 67). Berlin/Heidelberg, Germany: Springer.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Bynum, M. L., Hackebeil, G. A., Hart, W. E., Laird, C. D., Nicholson, B. L.,
    Siirola, J. D., … & Woodruff, D. L. 2021\. *Pyomo-optimization modeling in python*
    (第67卷)。德国柏林/海德堡：Springer。
- en: 'Kuby, M. J. 1987\. Programming models for facility dispersion: The p‐dispersion
    and maxisum dispersion problems. *Geographical Analysis*, *19*(4), 315–329.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Kuby, M. J. 1987\. 设施分散的编程模型：p‐分散和最大和分散问题。*地理分析*, *19*(4), 315–329。
