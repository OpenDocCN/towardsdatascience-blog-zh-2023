- en: 'Time Travel Made Easy: A Comprehensive Guide to Python Datetime'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/time-travel-made-easy-a-comprehensive-guide-to-python-datetime-326dd1c57391?source=collection_archive---------2-----------------------#2023-05-04](https://towardsdatascience.com/time-travel-made-easy-a-comprehensive-guide-to-python-datetime-326dd1c57391?source=collection_archive---------2-----------------------#2023-05-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Probably all you ever need for Python Datetime [⌛](https://emojiterra.com/time/)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@andreas030503?source=post_page-----326dd1c57391--------------------------------)[![Andreas
    Lukita](../Images/8660ca1fea5da34ce3475281c1f52152.png)](https://medium.com/@andreas030503?source=post_page-----326dd1c57391--------------------------------)[](https://towardsdatascience.com/?source=post_page-----326dd1c57391--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----326dd1c57391--------------------------------)
    [Andreas Lukita](https://medium.com/@andreas030503?source=post_page-----326dd1c57391--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F955ef38ea7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftime-travel-made-easy-a-comprehensive-guide-to-python-datetime-326dd1c57391&user=Andreas+Lukita&userId=955ef38ea7b&source=post_page-955ef38ea7b----326dd1c57391---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----326dd1c57391--------------------------------)
    ·11 min read·May 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F326dd1c57391&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftime-travel-made-easy-a-comprehensive-guide-to-python-datetime-326dd1c57391&user=Andreas+Lukita&userId=955ef38ea7b&source=-----326dd1c57391---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F326dd1c57391&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftime-travel-made-easy-a-comprehensive-guide-to-python-datetime-326dd1c57391&source=-----326dd1c57391---------------------bookmark_footer-----------)![](../Images/6ee934bfa819f8d3081f3b0aa36d2e4d.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Zulfa Nazer](https://unsplash.com/@zul_naz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Working with data that has dates and times can be easily overwhelming, especially
    if you are not quite familiar with the ins and outs of `datetime` manipulation.
    Many terms such as `DatetimeIndex`, `Timestamp`, `Timedelta`, `Timezone`, and
    `Offset`, might be confusing to grasp and remember, even for intermediate-level
    analysts. This guide will help you master `datetime` manipulation and unlock powerful
    insights from your data. Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: The `**datetime**` module in Python’s standard library provides classes that
    can work with dates, times, and time intervals[¹](#ac6d). This module is particularly
    important in data analysis because dates and times are often key components of
    data, and manipulating them accurately is essential for projects such as time
    series analysis and financial modeling. With the use of `datetime`, analysts can
    gain a better understanding of time-based trends and patterns in data, which can
    lead to more accurate insights and predictions from the dataset. The 6 classes
    under the `**datetime**` module include `**date**`, `**time**`, `**datetime**`,
    `**timedelta**`, `**tzinfo**`, and `**timezone**`
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of Content**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Aware vs Naive](#9ae9) `[**datetime**](#9ae9)` [objects](#9ae9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Coordinated Universal Time (UTC), Time, Timezone, Offset](#3387)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Attributes and methods to](#15c7) `[**datetime**](#15c7)` [objects, ISO 8601
    Standard](#15c7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Formatting](#b3e8) `[**datetime**](#b3e8)` [objects using](#b3e8) `[**strftime**(format)](#b3e8)`
    [and Parsing strings to](#b3e8) `[datetime](#b3e8)` [objects using](#b3e8) `[**strptime**(format)](#b3e8)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[**timedelta**](#18df)` [objects](#18df)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[POSIX Timestamp](#0d93)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pandas,](#18ee) `[**.dt**](#18ee)` [accessor and](#18ee) `[**datetime64[ns]**](#18ee)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Date as Index, the](#e9d4) `[**.resample(), .agg(), .transform()**](#e9d4)`[method](#e9d4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aware vs Naive `datetime` objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In simple terms, an **aware datetime object** contains timezone information,
    making it unambiguous about the timezone for a specific date and time[¹](#ac6d).
    To create an aware datetime object, a timezone object needs to be attached to
    the datetime object with the help of `**pytz**` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This creates an aware `datetime` object representing May 4, 2023, at 10:30 AM
    Singapore Time. The `tzinfo` argument specifies the timezone for the `datetime`
    object. Printing `dt` out will give us the following information `datetime.datetime(2023,
    5, 4, 10, 30, **tzinfo**=<DstTzInfo ‘Asia/Singapore’ LMT+6:55:00 STD>)`.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a **naïve datetime object** does not contain timezone information.
    It does represents date and time, but it is not clear what timezone that date
    and time refer to[¹](#ac6d).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Calling the attribute `dt.tzinfo` and `dt.utcoffset`produces `**None**`.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that aware `**datetime**` objects are always in UTC time
    internally, and they are adjusted to the specified timezone when displayed or
    used in calculations. This implies that you can compare aware `**datetime**` objects
    from different timezones directly since they are both internally represented in
    UTC time. More often than not, it is better to use aware `**datetime**` objects
    wherever possible, especially in applications that deal with data from various
    timezones.
  prefs: []
  type: TYPE_NORMAL
- en: Coordinated Universal Time (UTC), Time, Timezone, and Offset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**UTC, or Universal Coordinated Time**, is the main time standard used worldwide
    to regulate clocks and time. Prior to 1972, it is known as Greenwich Mean Time
    (GMT)[²](#7fc1). UTC is a time standard that is globally recognized and coordinated,
    making it essential for international communication, navigation, and scientific
    research. It is worth noting that UTC is not affected by daylight saving time,
    making it a stable reference point for time-related activities. Instead, it is
    based on atomic clocks and is adjusted as needed to stay synchronized with the
    Earth’s rotation by adding or subtracting leap seconds[³](#cd28). As a result,
    UTC time is consistent worldwide, regardless of the local time in different time
    zones.'
  prefs: []
  type: TYPE_NORMAL
- en: '**UTC Time is unambiguous, it does not repeat.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Timezone:** A timezone refers to a region on the globe where all clocks have
    the same offset from Coordinated Universal Time (UTC). It is significant because
    it impacts the local time in various parts of the world.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Offset:** An offset refers to a certain duration of time that is either added
    or subtracted from Coordinated Universal Time (UTC) to obtain the local time in
    a specific timezone. This is important because it affects the local time in different
    parts of the world. We can create an offset using the `**timedelta**` class from
    the `**datetime**` module'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Printing `dt2` out will give the following information `datetime.datetime(2023,
    5, 4, **11**, 30, **tzinfo**=<DstTzInfo ‘Asia/Singapore’ LMT+6:55:00 STD>)`. Notice
    that the hour attribute changes from 10 to 1 after the addition of the offset.
  prefs: []
  type: TYPE_NORMAL
- en: The interplay of time, timezone, and offset are crucial in manipulating `datetime`
    in Python as they determine the true time in a specific timezone, including any
    adjustments for daylight saving time.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes and methods to datetime objects, ISO 8601 Standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `datetime` class has several essential **attributes** that are commonly
    used in `datetime` manipulation. They are `year` , `month` , `day` , `hour` ,
    `minute` , `second` , `microsecond` `tzinfo`. From our example above,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Some of the essential methods include `date()` , `time()` , `replace()` , `isoformat()`
    , `isocalendar()` , `strftime(format)`. Hold, what is ISO format anyway?
  prefs: []
  type: TYPE_NORMAL
- en: The **ISO calendar format** is a standard used globally to represent dates and
    times in a format that is easy to read by computer programs[⁴](#055e). The format
    consists of a specific syntax, where dates are represented using four digits for
    the year, two digits for the month, and two digits for the day (YYYY-MM-DD). For
    example, January 1st, 2023 would be represented as “2023–01–01”. Moreover, it
    can also take on more complicated information such as time, and timezone as illustrated
    in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let’s delve into the last line of code further.
  prefs: []
  type: TYPE_NORMAL
- en: '`2011-11-04`: The date component, represents November 4th, 2011.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`T`: A separator character indicating the start of the time component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`00:05:23`: The time component, representing 12:05:23am.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+04:00`: The timezone offset component, indicating a 4-hour time difference
    from Coordinated Universal Time (UTC) in the positive direction (ahead of UTC).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting datetime objects using `strftime(format) and` Parsing strings to
    datetime objects using `**strptime**(format)`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, you can use the `**strftime(format)**` method to turn ***datetime
    objects into strings***. You just need to give it a string that tells it how you
    want the string to look. Conversely, you can also parse ***strings into a datetime
    object*** using the `**strptime(input_string, input_format)**` method.
  prefs: []
  type: TYPE_NORMAL
- en: The format string can contain a combination of **format codes** and **literal
    characters**. Format codes are special character sequences (denoted by the symbol
    **%**) that are replaced with corresponding values from the `datetime` object.
    Literal characters are included in the resulting string as-is. Here is a list
    of common format codes from the Python User Guide[¹](#ac6d).
  prefs: []
  type: TYPE_NORMAL
- en: '`%Y`: The year as a four-digit number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%m`: The month as a zero-padded decimal number (01-12).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%d`: The day of the month as a zero-padded decimal number (01-31).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%H`: The hour as a zero-padded decimal number (00-23).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%M`: The minute as a zero-padded decimal number (00-59).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%S`: The second as a zero-padded decimal number (00-59).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%a`: The abbreviated weekday name (Sun, Mon, Tue, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%A`: The full weekday name (Sunday, Monday, Tuesday, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%b`: The abbreviated month name (Jan, Feb, Mar, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%B`: The full month name (January, February, March, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%p`: The AM/PM designation (AM or PM).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`timedelta` objects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `**timedelta**` object in Python represents the **duration or difference**
    between two dates or times. It can be used to perform arithmetic with `datetime`
    objects, such as adding or subtracting time intervals, or calculating the difference
    between two `datetime` objects[¹](#ac6d).
  prefs: []
  type: TYPE_NORMAL
- en: To create a `**timedelta**` object, you can use the `**datetime.timedelta()**`
    constructor, which takes one or more arguments to specify the duration. The arguments
    can be integers or floats, representing the **number of days, seconds, microseconds**,
    or a combination thereof. For example, `**timedelta(days=1, hours=3)**` creates
    a `**timedelta**` object that represents one day and three hours. You can perform
    arithmetic operations such as addition, subtraction, multiplication, and division
    with `**timedelta**` objects, and they can also be compared using comparison operators.
    For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: POSIX Timestamp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A POSIX timestamp, also called a Unix timestamp or Epoch timestamp, is a way
    of representing time as a single integer value that can be easily compared and
    manipulated[⁵](#8ebd). It is widely used in computer systems and programming languages
    like Python. It represents ***a point in time as the number of seconds*** since
    January 1, 1970, 00:00:00 UTC, which is known as the Unix epoch time. It is useful
    for storing and manipulating dates and times in computer systems because it is
    not affected by time zones and daylight saving time (DST).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that the difference between the timestamp is 3600 seconds, which is equal
    to a one-hour interval.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can also convert POSIX Timestamp to a `datetime` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Pandas, .dt accessor and `datetime64[ns]`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `**datetime64[ns]**` data type is a type of data that represents date and
    time with precision up to nanoseconds. It is part of the NumPy library in Python
    and is similar to the `datetime` module, but works better with large sets of date
    and time data. This makes it more efficient when working with large datasets,
    especially when combined with other NumPy functions for handling arrays and matrices.
  prefs: []
  type: TYPE_NORMAL
- en: When working with the Pandas Library, `datetime64[ns]` is such a great data
    type to work with as it allows us to access the powerful `dt` attribute for working
    with the `datetime` object. Note that this attribute is not available to the `pd.Timestamp`
    object, thus it is recommended to convert your data type to `datetime64[ns]` for
    ease of manipulating the `datetime` object. Let’s get started. We will import
    a random timestamp with 2 cities (Bangkok / Singapore) of 500 records from a CSV
    file. By default, the data type would be `**str**`. This section and coding style
    here is inspired by the book Effective Pandas[⁶](#bb43).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ed6fa968f921e7af508fabff8fe6e09a.png)'
  prefs: []
  type: TYPE_IMG
- en: FYI, the offset time for Bangkok is GMT+7 whereas the offset time for Singapore
    is GMT+8\. Our aim is to convert all the time into Singapore time. Working with
    `datetime` object in Pandas…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are confused with the last method operation, here’s the breakdown: First,
    the `datetime` series or index is assumed to be timezone-naive, i.e., it does
    not have any timezone information attached to it.'
  prefs: []
  type: TYPE_NORMAL
- en: The `.dt.tz_localize()` method is used to attach a timezone to the `datetime`
    series or index, which effectively makes it timezone-aware.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The method takes a single argument, which is the timezone to which the `datetime`
    series or index should be localized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the timezone is attached to the `datetime` series or index, you can perform
    `datetime` operations that require timezone information such as converting the
    column to a specific timezone (i.e. Singapore).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/6b0a3733c97f2a400a4011e22c7a8533.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left vs Right Output: Without vs With converting to a specific Timezone'
  prefs: []
  type: TYPE_NORMAL
- en: '`.dt` accessor allows us to retrieve `datetime` information just like the following'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cf6c396319e7c7199587226da31cb290.png)'
  prefs: []
  type: TYPE_IMG
- en: Date as Index, the `.resample(), .agg(), .transform()` method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section and coding style here is inspired by the book Effective Pandas[⁶](#bb43).
    Imagine we have a dataset of temperature at several points in time of the day
    such as the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87b070d842b5d13e3f6a4d64bcde01bb.png)'
  prefs: []
  type: TYPE_IMG
- en: We would want to perform aggregation of the data to find out the minimum, maximum
    and mean temperature of the day. We can achieve this by setting the index of the
    DataFrame to the column containing the `**datetime**` object, then using the `**resample**`
    method and specifying the frequency of aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ad82f8f9a3efdc0f24e9fa4082847d96.png)'
  prefs: []
  type: TYPE_IMG
- en: .agg() summarises and shrinks the records of the DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: If we would like to retain the number of rows instead of shrinking it into 7
    days, we can use the method `transform()` instead of `agg()`. However, note that
    `transform()` cannot take in a list of aggregation methods but is limited to only
    one aggregation method at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/92117da88e31189289a06fb0b4e3538c.png)'
  prefs: []
  type: TYPE_IMG
- en: .transform() retains all the records of the DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Afterword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding and manipulating `datetime` objects is a crucial skill for any
    data analyst or scientist. By mastering the various classes and methods available,
    you can unlock powerful insights from your data and make informed decisions. Promise
    me, next time when you encounter a dataset with dates and times, don’t shy away
    from it — embrace it and let the `**datetime**` magic begins!
  prefs: []
  type: TYPE_NORMAL
- en: If you pick up something useful from this article, do consider giving me a [***Follow***](https://medium.com/@andreas030503)
    on Medium. Easy, 1 article a week to keep yourself updated and stay ahead of the
    curve!
  prefs: []
  type: TYPE_NORMAL
- en: '***You can connect with me on LinkedIn:*** [***https://www.linkedin.com/in/andreaslukita7/***](https://www.linkedin.com/in/andreaslukita7/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***References:***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Docs: [https://docs.python.org/3/library/datetime.html#timezone-objects](https://docs.python.org/3/library/datetime.html#timezone-objects)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: National Hurricane Center and Central Pacific Hurricane Center. *What is UTC
    or GMT Time?* [https://www.nhc.noaa.gov/aboututc.shtml#:~:text=Prior%20to%201972%2C%20this%20time,%22%20or%20%22Zulu%20Time%22](https://www.nhc.noaa.gov/aboututc.shtml#:~:text=Prior%20to%201972%2C%20this%20time,%22%20or%20%22Zulu%20Time%22).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: National Institute of Standards and Technology. *What is USNO time or UTC(USNO)?*
    [https://www.nist.gov/pml/time-and-frequency-division/nist-time-frequently-asked-questions-faq#:~:text=USNO%20has%20an%20ensemble%20of,scale%20called%20UTC(USNO).](https://www.nist.gov/pml/time-and-frequency-division/nist-time-frequently-asked-questions-faq#:~:text=USNO%20has%20an%20ensemble%20of,scale%20called%20UTC(USNO).)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: International Organization for Standardization. *ISO 8601 Date and Time Format.*
    [https://www.iso.org/iso-8601-date-and-time-format.html](https://www.iso.org/iso-8601-date-and-time-format.html)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: UNIX Time. [https://unixtime.org/](https://unixtime.org/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Effective Pandas by Matt Harrison: [https://store.metasnake.com/effective-pandas-book](https://store.metasnake.com/effective-pandas-book)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
