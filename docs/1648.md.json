["```py\nselect\n    *\nfrom\n    tbl\nqualify\n    row_number() over (partition by id order by timestamp desc) = 1\n```", "```py\nwith\nprune_condition as (\n    select id, max(timestamp) as prune_column from tbl group by id\n),\npruned_data as (\n    select * from tbl left join prune_condition using (id)\n)\nselect\n    * exclude prune_column\nfrom\n    pruned_data\nwhere\n    timestamp >= prune_column\nqualify\n    row_number() over (partition by id order by timestamp desc) = 1\n```", "```py\nselect * from (\n    select id, id as users, data from tbl\n) pivot(\n    count(users)\n    for data in (‘d1’, ‘d2’, ‘d3’)\n)\n```", "```py\nselect \n    id,\n    sum(iff(data = ‘d1’, 1, 0)) as “‘d1’”,\n    sum(iff(data = ‘d2’, 1, 0)) as “‘d2’”,\n    sum(iff(data = ‘d3’, 1, 0)) as “‘d3’”\nfrom\n    tbl\ngroup by id\n```", "```py\ncreate temporary batch_1 as (\n    select\n        id,\n        sum(iff(data = ‘d1’, 1, 0)) as “‘d1’”\n    from\n        tbl\n    group by id\n);\n\ncreate temporary batch_2 as (\n    select\n        id,\n        sum(iff(data = 'd2', 1, 0)) as \"'d2'\",\n        sum(iff(data = 'd3', 1, 0)) as \"'d3'\"\n    from\n        tbl\n    group by id\n);\n\ncreate final_table as (\n    select * from batch_1 full outer join batch_2 using(id)\n);\n```", "```py\n-- Q1)\n\nselect\n    data\nfrom\n    tbl_2\ngroup by data\nhaving median(sec_diff) = 0;\n\n-- Q2)\n\nselect\n    data\nfrom\n    tbl_2\nwhere\n    data <> lag_data\ngroup by data\nhaving median(hour_diff) > 0;\n```", "```py\n-- Q1) after optimisation\n\nselect\n    data,\n    count(iff(sec_diff = 0, 1, null)) / count(*) as seccount\nfrom\n    tbl_2\ngroup by data\nhaving seccount >= 0.5\n\n-- Q2) after optimisation\n\nselect\n    data,\n    count(iff(hour_diff > 0, 1, null)) / count(*) as hourcount\nfrom\n    tbl_2\ngroup by data\nhaving hourcount >= 0.5\n```"]