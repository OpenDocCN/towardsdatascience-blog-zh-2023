- en: Comparing Outlier Detection Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较异常值检测方法
- en: 原文：[https://towardsdatascience.com/comparing-outlier-detection-methods-956f4b097061?source=collection_archive---------1-----------------------#2023-12-16](https://towardsdatascience.com/comparing-outlier-detection-methods-956f4b097061?source=collection_archive---------1-----------------------#2023-12-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/comparing-outlier-detection-methods-956f4b097061?source=collection_archive---------1-----------------------#2023-12-16](https://towardsdatascience.com/comparing-outlier-detection-methods-956f4b097061?source=collection_archive---------1-----------------------#2023-12-16)
- en: Using batting stats from Major League Baseball’s 2023 season
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用2023年大联盟棒球的击球统计数据
- en: '[](https://medium.com/@andrews_or?source=post_page-----956f4b097061--------------------------------)[![John
    Andrews](../Images/f8022a4e19de5e10e563a31e9b79befc.png)](https://medium.com/@andrews_or?source=post_page-----956f4b097061--------------------------------)[](https://towardsdatascience.com/?source=post_page-----956f4b097061--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----956f4b097061--------------------------------)
    [John Andrews](https://medium.com/@andrews_or?source=post_page-----956f4b097061--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@andrews_or?source=post_page-----956f4b097061--------------------------------)[![约翰·安德鲁斯](../Images/f8022a4e19de5e10e563a31e9b79befc.png)](https://medium.com/@andrews_or?source=post_page-----956f4b097061--------------------------------)[](https://towardsdatascience.com/?source=post_page-----956f4b097061--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----956f4b097061--------------------------------)
    [约翰·安德鲁斯](https://medium.com/@andrews_or?source=post_page-----956f4b097061--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58a322305d14&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-outlier-detection-methods-956f4b097061&user=John+Andrews&userId=58a322305d14&source=post_page-58a322305d14----956f4b097061---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----956f4b097061--------------------------------)
    ·12 min read·Dec 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F956f4b097061&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-outlier-detection-methods-956f4b097061&user=John+Andrews&userId=58a322305d14&source=-----956f4b097061---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F58a322305d14&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-outlier-detection-methods-956f4b097061&user=John+Andrews&userId=58a322305d14&source=post_page-58a322305d14----956f4b097061---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----956f4b097061--------------------------------)
    ·12分钟阅读·2023年12月16日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F956f4b097061&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-outlier-detection-methods-956f4b097061&user=John+Andrews&userId=58a322305d14&source=-----956f4b097061---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F956f4b097061&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-outlier-detection-methods-956f4b097061&source=-----956f4b097061---------------------bookmark_footer-----------)![](../Images/a98521c8a1b53bffd94feb52c42911b8.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F956f4b097061&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-outlier-detection-methods-956f4b097061&source=-----956f4b097061---------------------bookmark_footer-----------)![](../Images/a98521c8a1b53bffd94feb52c42911b8.png)'
- en: Shohei Ohtani, photo by [Erik Drost](https://www.flickr.com/photos/edrost88/)
    on [Flikr](https://www.flickr.com/photos/edrost88/48484060286/in/album-72157629239820345/),
    [CC BY 2.0](https://commons.wikimedia.org/w/index.php?curid=88998688)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Shohei Ohtani，照片由 [Erik Drost](https://www.flickr.com/photos/edrost88/) 拍摄，发布在
    [Flikr](https://www.flickr.com/photos/edrost88/48484060286/in/album-72157629239820345/)，[CC
    BY 2.0](https://commons.wikimedia.org/w/index.php?curid=88998688)
- en: '*Outlier detection* is an unsupervised machine learning task to identify anomalies
    (unusual observations) within a given data set. This task is helpful in many real-world
    cases where our available dataset is already “contaminated” by anomalies. Scikit-learn
    [implements several outlier detection algorithms](https://scikit-learn.org/stable/modules/outlier_detection.html),
    and in cases where we have an *uncontaminated* baseline, we can also use these
    algorithms for *novelty detection*, a semi-supervised task that predicts whether
    new observations are outliers.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*异常检测*是一种无监督机器学习任务，用于识别给定数据集中异常值（不寻常的观测值）。这个任务在许多实际场景中非常有用，因为我们可用的数据集已经被异常值“污染”。Scikit-learn
    [实现了几种异常检测算法](https://scikit-learn.org/stable/modules/outlier_detection.html)，在我们拥有*未污染*的基线时，我们也可以使用这些算法进行*新颖性检测*，这是一种半监督任务，预测新观测值是否为异常值。'
- en: Overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'The four outlier detection algorithms we’ll compare are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将比较的四种异常检测算法是：
- en: '[Elliptic Envelope](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EllipticEnvelope.html)
    is suitable for normally-distributed data with low dimensionality. As its name
    implies, it uses the multivariate normal distribution to create a distance measure
    to separate outliers from inliers.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[椭圆包络](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EllipticEnvelope.html)适用于低维度的正态分布数据。顾名思义，它使用多变量正态分布来创建一种距离度量，以将异常值与正常值分离。'
- en: '[Local Outlier Factor](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LocalOutlierFactor.html)
    is a comparison of the local density of an observation with that of its neighbors.
    Observations with much lower density than their neighbors are considered outliers.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[局部异常因子](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LocalOutlierFactor.html)是通过将观测值的局部密度与其邻居的密度进行比较来判断异常值。密度远低于邻居的观测值被视为异常值。'
- en: '[One-Class Support Vector Machine (SVM) with Stochastic Gradient Descent (SGD)](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDOneClassSVM.html)
    is an O(n) approximate solution of the One-Class SVM. Note that the O(n²) [One-Class
    SVM](https://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html#sklearn.svm.OneClassSVM)
    works well on our small example dataset but may be impractical for your actual
    use case.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一类支持向量机（SVM）与随机梯度下降（SGD）](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDOneClassSVM.html)是一个O(n)的近似解法。请注意，O(n²)的[一类SVM](https://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html#sklearn.svm.OneClassSVM)在我们的小示例数据集上效果很好，但可能对你的实际用例不够实用。'
- en: '[Isolation Forest](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html)
    is a tree-based approach where outliers are more quickly isolated by random splits
    than inliers.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[隔离森林](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html)是一种基于树的方法，其中异常值通过随机分割比正常值更快地被隔离。'
- en: Since our task is unsupervised, we don’t have ground truth to compare accuracies
    of these algorithms. Instead, we want to see how their results (player rankings
    in particular) differ from one another and gain some intuition into their behavior
    and limitations, so that we might know when to prefer one over another.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的任务是无监督的，我们没有基准真值来比较这些算法的准确性。相反，我们希望了解它们的结果（特别是球员排名）之间的差异，并对它们的行为和局限性有一些直觉，以便知道何时优先选择某一算法。
- en: 'Let’s compare a few of these techniques using two metrics of batter performance
    from 2023’s Major Leage Baseball (MLB) season:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用2023年大联盟棒球（MLB）赛季的两个击球手表现指标来比较这些技术：
- en: On-base percentage (OBP), the rate at which a batter reaches base (by hitting,
    walking, or getting hit by pitch) per plate appearance
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上垒率（OBP），指击球手在每次打击机会中通过击球、走步或被投球击中到达垒位的比率
- en: Slugging (SLG), the average number of total bases per at bat
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 击球率（SLG），每次击球的平均总垒数
- en: There are [many more sophisticated metrics of batter performance](https://library.fangraphs.com/offense/offensive-statistics-list/),
    including OBP plus SLG (OPS), weighted on-base average (wOBA), and adjusted weighted
    runs created (WRC+). However, we’ll see that in addition to being [commonly used](https://www.mlb.com/glossary/miscellaneous/slash-line)
    and easy to understand, OBP and SLG are moderately correlated and approximately
    normally distributed, making them well suited for this comparison.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[还有许多更复杂的击球表现指标](https://library.fangraphs.com/offense/offensive-statistics-list/)，包括
    OBP 加 SLG（OPS）、加权上垒率（wOBA）和调整后的加权创造分（WRC+）。然而，我们会看到，除了 [常用](https://www.mlb.com/glossary/miscellaneous/slash-line)
    且易于理解之外，OBP 和 SLG 有中等相关性且近似正态分布，使它们非常适合用于这次比较。'
- en: Dataset preparation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集准备
- en: We use the `pybaseball` package to obtain hitting data. This Python package
    is under MIT [license](https://github.com/jldbc/pybaseball/blob/master/LICENSE)
    and returns data from [Fangraphs.com](https://www.fangraphs.com/leaders/major-league?pos=all&stats=bat&lg=all&qual=y&type=8&season=2023&month=0&season1=2023&ind=0),
    [Baseball-Reference.com](https://www.baseball-reference.com/leagues/majors/2023-standard-batting.shtml),
    and other sources which have in turn obtained offical records from Major League
    Baseball.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `pybaseball` 包来获取击球数据。这个 Python 包在 MIT [许可证](https://github.com/jldbc/pybaseball/blob/master/LICENSE)下发布，并从
    [Fangraphs.com](https://www.fangraphs.com/leaders/major-league?pos=all&stats=bat&lg=all&qual=y&type=8&season=2023&month=0&season1=2023&ind=0)、[Baseball-Reference.com](https://www.baseball-reference.com/leagues/majors/2023-standard-batting.shtml)
    及其他来源获取数据，这些来源又从大联盟棒球正式记录中获得数据。
- en: 'We use pybaseball’s 2023 batting statistics, which can be obtained either by
    `batting_stats` (FanGraphs) or `batting_stats_bref` (Baseball Reference). It turns
    out that the player names [are more correctly formatted](https://github.com/jldbc/pybaseball/issues/393)
    from Fangraphs, but player teams and leagues from Baseball Reference are better
    formatted in the case of traded players. For a dataset with improved readability,
    we actually need to merge three tables: FanGraphs, Baseball Reference, and a key
    lookup.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 pybaseball 的 2023 年击球统计数据，这些数据可以通过 `batting_stats`（FanGraphs）或 `batting_stats_bref`（Baseball
    Reference）获得。结果是，从 Fangraphs 获得的球员名字 [格式更为正确](https://github.com/jldbc/pybaseball/issues/393)，但
    Baseball Reference 中的球员团队和联赛在交易球员的情况下格式更佳。为了获得可读性更高的数据集，我们实际上需要合并三个表：FanGraphs、Baseball
    Reference 和一个键查找表。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Data Exploration
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据探索
- en: First, we note that these metrics differ in mean and variance and are moderately
    correlated. We also note that each metric is fairly symmetric, with median value
    close to mean.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们注意到这些指标在均值和方差上有所不同，并且有中等程度的相关性。我们还注意到，每个指标相当对称，具有接近均值的中位数值。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s visualize this joint distribution, using:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下内容来可视化这个联合分布：
- en: Scatterplot of the players, colored by National League (NL) vs American League
    (AL)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 球员的散点图，以国家联盟（NL）与美国联盟（AL）为颜色区分
- en: Bivariate kernel density estimator (KDE) plot of the players, which smoothes
    the scatterplot with a Gaussian kernel to estimate density
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 球员的双变量核密度估计（KDE）图，使用高斯核平滑散点图以估计密度
- en: Marginal KDE plots of each metric
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个指标的边际 KDE 图
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/0b7360e584c3624d2b341bc40a88616a.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b7360e584c3624d2b341bc40a88616a.png)'
- en: The top-right corner of the scatterplot shows a cluster of excellence in hitting
    corresponding to the heavy upper tails of the SLG and OBP distributions. This
    small group excels at getting on base *and* hitting for extra bases. How much
    we consider them to be outliers (because of their distance from the majority of
    the player population) versus inliers (because of their proximity to one another)
    depends on the definition used by our selected algorithm.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图的右上角显示了一个击球优秀的聚集群，与 SLG 和 OBP 分布的上尾部重合。这一小群球员在上垒 *和* 击出额外垒数方面表现优异。我们将他们视为异常值（因为他们与大多数球员群体的距离）还是内群体（因为他们彼此靠近）的判断取决于我们选择的算法定义。
- en: Apply outlier detection algorithms
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用异常值检测算法
- en: Scikit-learn’s outlier detection algorithms typically have `fit()` and `predict()`
    methods, but there are exceptions and also differences between algorithms in their
    arguments. We’ll consider each algorithm individually, but we’ll fit each to a
    matrix of attributes (n=2) per player (m=453). We’ll then score not only each
    player but a grid of values spanning the range of each attribute, to help us visualize
    the prediction function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'To visualize decision boundaries, we need to take the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Create a 2D `meshgrid` of input feature values.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the `decision_function` to each point on the `meshgrid`, which requires
    unstacking the grid.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Re-shape the predictions back into a grid.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the predictions.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll use a 200x200 grid to cover the existing observations plus some padding,
    but you could adjust the grid to your desired speed and resolution.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Elliptic Envelope
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The shape of the elliptic envelope is determined by the data’s covariance matrix,
    which gives the variance of feature `i` on the main diagonal `[i,i]` and the covariance
    of features `i` and `j` in the `[i,j]` positions. Because the covariance matrix
    is sensitive to outliers, this algorithm uses the Minimum Covariance Determinant
    (MCD) Estimator, which is [recommended](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.MinCovDet.html#sklearn.covariance.MinCovDet)
    for unimodal and symmetric distributions, with shuffling determined by the `random_state`
    input for reproducibility. This robust covariance matrix will come in handy again
    later.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Because we want to compare the outlier scores in their ranking rather than a
    binary outlier/inlier classification, we use the `decision_function` to score
    players.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Local Outlier Factor
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach to measuring isolation is based on k-nearest neighbors (KNN).
    We calculate the total distance from each observation to its nearest neighbors
    to define local density, and then we compare each observation’s local density
    with that of its neighbors. Observations with local density much less than their
    neighbors are considered outliers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**Choosing the number of neighbors to include:** In KNN, a rule of thumb is
    to let K = sqrt(N), where N is your observation count. From this rule, we obtain
    a K close to 20 (which happens to be the default K for LOF). You can increase
    or decrease K to reduce overfitting or underfitting, respectively.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Choosing a distance measure:** Note that our features are correlated and
    have different variances, so Euclidean distance is not very meaningful. We will
    use Mahalanobis distance, which accounts for feature scale and correlation.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: In calculating the Mahalanobis distance, we’ll use the robust covariance matrix.
    If we had not already calculated it via Ellliptic Envelope, we could calculate
    it [directly](https://scikit-learn.org/stable/modules/generated/sklearn.covariance.MinCovDet.html).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Fitting the Local Outlier Factor:** Note that using a custom distance matrix
    requires us to pass `metric="precomputed"` to the constructor and then the distance
    matrix itself to the `fit` method. (See [documentation](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LocalOutlierFactor.html#sklearn.neighbors.LocalOutlierFactor.fit)
    for more details.)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Also note that unlike other algorithms, with LOF we are [instructed](https://scikit-learn.org/stable/auto_examples/neighbors/plot_lof_novelty_detection.html)
    not to use the `score_samples` method for scoring existing observations; this
    method should only be used for novelty detection.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Create the decision boundary:** Because we used a custom distance metric,
    we must also compute that custom distance between each point in the grid to the
    original observations. Before we used the spatial measure `pdist` for pairwise
    distances between each member of a single set, but now we use `cdist` to return
    the distances from each member of the first set of inputs to each member of the
    second set.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Support Vector Machine (SGD-One-Class SVM)
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVMs use the kernel trick to transform features into a higher dimensionality
    where a separating hyperplane can be identified. The radial basis function (RBF)
    kernel requires the inputs to be standardized, but as the [documentation](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)
    for `StandardScaler` notes, that scaler is sensitive to outliers, so we'll use
    `RobustScaler`. We'll pipe the scaled inputs into Nyström kernel approximation,
    as suggested by the [documentation](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDOneClassSVM.html)
    for `SGDOneClassSVM`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Isolation Forest
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tree-based approach to measuring isolation performs random recursive partitioning.
    If the average number of splits required to isolate a given observation is *low*,
    that observation is considered a *stronger* candidate outlier. Like Random Forests
    and other tree-based models, Isolation Forest does not assume that the features
    are normally distributed or require them to be scaled. By default, it builds 100
    trees. Our example only uses two features, so we do not enable feature sampling.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Results: inspecting decision boundaries'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note that the predictions from these models have different distributions. We
    apply `QuantileTransformer` to make them more visually comparable on a given grid.
    From the [documentation](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.QuantileTransformer.html),
    please note:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '*Note that this transform is non-linear. It may distort linear correlations
    between variables measured at the same scale but renders variables measured at
    different scales more directly comparable.*'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/d1bd465c1408e983e2d1f49ea206f488.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Analysis and Conclusions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It looks like the four implementations mostly agree on how to define outliers,
    but with some noticeable differences in scores and also in ease of use.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这四种实现大致一致于离群值的定义，但在评分和易用性上有一些明显的差异。
- en: '**Elliptic Envelope** has narrower contours around the ellipse’s minor axis,
    so it tends to highlight those interesting players who run contrary to the overall
    correlation between features. For example, Rays outfielder José Siri ranks as
    more of an outlier under this algorithm due to his high SLG (88th percentile)
    versus low OBP (5th percentile), which is consistent with an aggressive hitter
    who swings hard at borderline pitches and either crushes them or gets weak-to-no
    contact.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**椭圆包络**在椭圆的短轴周围有更窄的轮廓，因此它倾向于突出那些与特征之间的整体相关性相悖的有趣球员。例如，光芒队外场手何塞·西里在该算法下被认为是一个更大的离群值，因为他的
    SLG（88th 百分位）高而 OBP（5th 百分位）低，这与一个在边界球上挥杆用力的激进打击手一致，要么击球力大，要么击球弱或没有击中。'
- en: Elliptic Envelope is also easy to use without configuration, and it provides
    the robust covariance matrix. If you have low-dimensional data and a reasonable
    expectation for it to be normally distributed (which is often not the case), you
    might want to try this simple approach first.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆包络也很容易使用而无需配置，并且提供了稳健的协方差矩阵。如果你有低维数据并且合理地期望其呈正态分布（尽管这种情况通常不成立），你可以先尝试这种简单的方法。
- en: '**One-class SVM** has more uniformly spaced contours, so it tends to emphasize
    observations along the overall direction of correlation more than the Elliptic
    Envelope. All-Star first basemen Freddie Freeman (Dodgers) and Yandy Diaz (Rays)
    rank more strongly under this algorithm than under others, since their SLG and
    OBP are both excellent (99th and 97th percentile for Freeman, 99th and 95th for
    Diaz).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**单类 SVM** 具有更均匀的轮廓分布，因此它倾向于比椭圆包络更强调与整体相关方向一致的观察值。全明星一垒手弗雷迪·弗里曼（道奇队）和杨迪·迪亚斯（光芒队）在该算法下的排名明显高于其他算法，因为他们的
    SLG 和 OBP 都非常出色（弗里曼分别为99th 和97th 百分位，迪亚斯分别为99th 和95th 百分位）。'
- en: The RBF kernel required an extra step for standardization, but it also seemed
    to work well on this simple example without fine-tuning.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: RBF 核函数需要额外的标准化步骤，但在这个简单的示例中，它似乎也能很好地工作而无需微调。
- en: '**Local Outlier Factor** picked up on the “cluster of excellence” mentioned
    earlier with a small bimodal contour (barely visible in the chart). Since the
    Dodgers’ outfielder/second-baseman Mookie Betts is surrounded by other excellent
    hitters including Freeman, Yordan Alvarez, and Ronald Acuña Jr., he ranks as only
    the 20th-strongest outlier under LOF, versus 10th or stronger under the other
    algorithms. Conversely, Braves outfielder Marcell Ozuna had slightly lower SLG
    and considerably lower OBP than Betts, but he is more of an outlier under LOF
    because his neighborhood is less dense.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**局部离群因子** 识别了之前提到的“小簇优秀”特征，轮廓呈双峰状（在图表中几乎不可见）。由于道奇队外场手/二垒手穆基·贝茨被其他优秀击球手如弗里曼、尤尔丹·阿尔瓦雷斯和罗纳德·阿库尼亚
    Jr. 环绕，他在 LOF 下的离群值排名仅为第20位，而在其他算法下排名第10位或更高。相反，勇士队外场手马塞尔·奥祖纳的 SLG 稍低且 OBP 明显低于贝茨，但在
    LOF 下他是更大的离群值，因为他的邻域较少。'
- en: LOF was the most time-consuming to implement since we created robust distance
    matrices for fitting and scoring. We could have spent some time tuning K as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: LOF 是实现过程中最耗时的，因为我们创建了稳健的距离矩阵用于拟合和评分。我们也可能需要花一些时间调整 K。
- en: '**Isolation Forest** tends to emphasize observations at the corners of the
    feature space, because splits are distributed across features. Backup catcher
    Austin Hedges, who played for the Pirates and Rangers in 2023 and signed with
    Guardians for 2024, is strong defensively but the worst batter (with at least
    200 plate appearances) in both SLG and OBP. Hedges can be isolated in a single
    split on either OBP or OPS, making him the strongest outlier. Isolation Forest
    is the *only* algorithm that didn’t rank Shohei Ohtani as the strongest outlier:
    since Ohtani was edged out in OBP by Ronald Acuña Jr., both Ohtani and Acuña can
    be isolated in a single split on only *one* feature.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**孤立森林** 倾向于强调特征空间角落的观察值，因为分割分布在各个特征上。替补捕手奥斯丁·赫奇斯在 2023 年为海盗队和游骑兵队效力，并于 2024
    年签约守护者队，他在防守方面表现出色，但在 SLG 和 OBP 上是最差的击球手（至少有 200 次打击机会）。赫奇斯可以通过 OBP 或 OPS 的单次分割被孤立，使他成为最强的离群值。孤立森林是唯一一个没有将大谷翔平排名为最强离群值的算法：由于大谷在
    OBP 上被罗纳德·阿库尼亚 Jr. 超越，大谷和阿库尼亚只能通过 *一个* 特征进行单次分割。'
- en: As with common *supervised* tree-based learners, Isolation Forest does not extrapolate,
    making it better suited for fitting to a contaminated dataset for outlier detection
    than for fitting to an anomaly-free dataset for novelty detection (where it wouldn’t
    score new outliers more strongly than the existing observations).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Although Isolation Forest worked well out of the box, its failure to rank **Shohei
    Ohtani** as the *greatest outlier in baseball (and probably all professional sports)*
    illustrates the primary limitation of any outlier detector: the data you use to
    fit it.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Not only did we omit defensive stats (sorry, Austin Hedges), we didn’t bother
    to include *pitching* stats. Because pitchers don’t even try to hit anymore… except
    for Ohtani, whose season included the second-best batting average against (BAA)
    and 11th-best earned run average (ERA) in baseball (minimum 100 innings), a complete-game
    shutout, and a game in which he struck out ten batters and hit two home runs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: It has been suggested that Shohei Ohtani is an advanced extraterrestrial impersonating
    a human, but it seems more likely that there are **two** advanced extraterrestrials
    impersonating the same human. Unfortunately, one of them just had elbow surgery
    and won’t pitch in 2024… but the other just signed a record 10-year, $700 million
    contract. And thanks to outlier detection, now we can see why!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
