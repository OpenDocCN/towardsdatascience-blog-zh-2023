- en: A Quick and Clear Look at Grid-Based Visibility
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-quick-and-clear-look-at-grid-based-visibility-bf63769fbc78?source=collection_archive---------6-----------------------#2023-05-12](https://towardsdatascience.com/a-quick-and-clear-look-at-grid-based-visibility-bf63769fbc78?source=collection_archive---------6-----------------------#2023-05-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How a 3-line algorithm provides a decent alternative to ray casting
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rhys.goldstein?source=post_page-----bf63769fbc78--------------------------------)[![Rhys
    Goldstein](../Images/75dafe578e93f357d5cfd6822b274373.png)](https://medium.com/@rhys.goldstein?source=post_page-----bf63769fbc78--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bf63769fbc78--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bf63769fbc78--------------------------------)
    [Rhys Goldstein](https://medium.com/@rhys.goldstein?source=post_page-----bf63769fbc78--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F46425896049b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-quick-and-clear-look-at-grid-based-visibility-bf63769fbc78&user=Rhys+Goldstein&userId=46425896049b&source=post_page-46425896049b----bf63769fbc78---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bf63769fbc78--------------------------------)
    ·14 min read·May 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbf63769fbc78&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-quick-and-clear-look-at-grid-based-visibility-bf63769fbc78&user=Rhys+Goldstein&userId=46425896049b&source=-----bf63769fbc78---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbf63769fbc78&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-quick-and-clear-look-at-grid-based-visibility-bf63769fbc78&source=-----bf63769fbc78---------------------bookmark_footer-----------)![](../Images/be92bfafa0f3fc55ebdab80c56d88ebd.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Image by [Autodesk Research](https://www.research.autodesk.com/) [1]. (Used
    with permission)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: In my previous article, [A Short and Direct Walk with Pascal’s Triangle](/a-short-and-direct-walk-with-pascals-triangle-26a86d76f75f),
    I explain how grid-based pathfinding can be improved to yield highly direct walking
    paths without using line-of-sight tests. This follow-up article will show you
    a related technique called **grid-based visibility**, which computes visible regions
    without line-of-sight tests. Grid-based visibility is virtually unheard of in
    the computer science community, but it’s a practical method that makes sense for
    a variety of artificial intelligence applications. It’s also extremely easy to
    implement, requiring as few as 3 lines of code. Read on to discover your simplest
    option for solving visibility problems in video games, mobile robotics, or architectural
    design.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前的文章[《与 Pascal’s Triangle 的简短直接漫步》](/a-short-and-direct-walk-with-pascals-triangle-26a86d76f75f)中，我解释了如何改进基于网格的路径查找，以便在不使用视线测试的情况下获得高度直接的步行路径。本文将展示一种相关的技术，称为**基于网格的可见性**，该技术在不使用视线测试的情况下计算可见区域。基于网格的可见性在计算机科学界几乎没有听说过，但它是一种在各种人工智能应用中都很有意义的实用方法。它也非常容易实现，所需的代码仅有
    3 行。继续阅读，发现解决视频游戏、移动机器人或建筑设计中的可见性问题的最简单选项。
- en: The Visible Region Problem
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可见区域问题
- en: Similar to pathfinding, visibility analysis arises in a number of fields involving
    artificial intelligence and spatial environments. A video game developer may want
    to compute the region of a game map that is visible from an enemy watch tower.
    A mobile robotics engineer may need to compute a robot’s field of view in a simulation
    that tests the robot’s control system. An architect may want to analyze people’s
    views at various locations in a building or along a street. Visibility analysis
    can also be used to approximate the area illuminated by a source of light.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于路径查找，可见性分析出现在涉及人工智能和空间环境的多个领域中。视频游戏开发者可能希望计算从敌人瞭望塔可见的游戏地图区域。移动机器人工程师可能需要计算在测试机器人控制系统的模拟中，机器人视野的范围。建筑师可能希望分析建筑物内或街道上不同位置的人们的视野。可见性分析还可以用于估算光源照射的区域。
- en: 'The basic problem is this: Given a 2D top-down map, compute the region of space
    that is visible from a point.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基本问题是这样的：给定一个 2D 顶视图地图，计算从一个点可见的空间区域。
- en: 'If you ask a computer scientist how to solve this problem, it is extremely
    unlikely that they will even consider what I call a **grid-based algorithm**:
    a method where numbers in every grid cell are computed based on numbers in neighboring
    grid cells. The visible region problem is almost always tackled using a **vector-based
    visibility** algorithm involving line-of-sight tests. One of the most popular
    vector-based visibility techniques is **ray casting**, where numerous rays are
    cast in different directions from a viewpoint. If you’re unfamiliar with ray casting
    and other vector-based solutions to the visible region problem, the [Red Blob
    Games](https://www.redblobgames.com/) tutorial on [2D Visibility](https://www.redblobgames.com/articles/visibility/)
    provides an excellent backgrounder.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你问计算机科学家如何解决这个问题，他们极有可能不会考虑我所称的**基于网格的算法**：一种通过计算邻近网格单元中的数字来得出每个网格单元中的数字的方法。可见区域问题几乎总是使用**基于向量的可见性**算法来解决，该算法涉及视线测试。最受欢迎的基于向量的可见性技术之一是**射线投射**，在这种技术中，从一个视点向不同方向投射许多射线。如果你对射线投射和其他基于向量的解决方案不熟悉，[Red
    Blob Games](https://www.redblobgames.com/)网站上的[2D 可见性](https://www.redblobgames.com/articles/visibility/)教程提供了一个很好的背景介绍。
- en: Both grid-based and vector-based approaches are popular for other spatial applications like pathfinding and 2D
    graphics. We are all familiar with raster (grid-based) and vector images, for
    example, and we recognize that both types of images have advantages and disadvantages.
    So why is it that only vector-based approaches are widely used for visibility?
    I’ve come to believe that while both grid-based and vector-based methods have
    advantages and disadvantages for visibility problems, grid-based visibility has
    been curiously overlooked and deserves to be better known.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 基于网格和基于向量的方法在路径查找和 2D 图形等其他空间应用中都很受欢迎。例如，我们都熟悉光栅（基于网格）和向量图像，并且认识到这两种类型的图像都有其优缺点。那么，为什么只有基于向量的方法在可见性问题中被广泛使用呢？我开始相信，虽然基于网格和基于向量的方法在可见性问题中都有优缺点，但基于网格的可见性被奇怪地忽视了，应该得到更多的关注。
- en: Grid-Based Visibility
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于网格的可见性
- en: Here is grid-based visibility written in 3 lines of Python code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是用 3 行 Python 代码编写的基于网格的可见性。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The algorithm takes a grid representing a map and modifies it to produce visibility
    results. As we can see, the transformation consists of looping over every grid
    cell and applying a linear interpolation. Let’s test these 3 lines of code by
    placing them in a short program. Feel free to copy and run the Python script below.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The program first creates and displays the map, a 25x25 grid where cells filled
    with an obstacle have a value of 0 and empty cells have a value of 1\. As shown
    below, the map has three square obstacles.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2dd82c737491c5a85f22c5a058c58cd6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: The 25x25 input map. (Image by author)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The program then transforms the map into a visibility grid and displays it.
    The visibility grid is filled with **visibility scores**, which approximate the
    degree to which each grid cell is visible from a viewpoint in the top left corner.
    Visibility scores range from 0 (completely blocked) to 1 (completely visible).
    Here’s the visibility grid.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a792d3c86d5c730b8fb3edec04e7752d.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: The resulting 25x25 visibility grid. (Image by author)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Each obstacle casts a shadow away from the top left corner, though you’ll notice
    that the edges of the shadows are blurry. One way to sharpen those edges is to
    increase the resolution of the map. If we change the grid size from 25 to 225
    cells in both dimensions…
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: …we get the following results.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a550e2da18bec36567856c0b2efac242.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: The visibility grid with resolution increased to 225x225\. (Image by author)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Here we see sharper and more accurate shadows. If we continue to increase the
    resolution, the visibility scores will get more and more accurate. In fact, the
    results will converge on the exact solution as the grid spacing approaches zero.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the application, we may wish to classify every grid cell as either
    visible (1) or not visible (0). We can do this by applying a threshold of 0.5
    after the loop.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Inserting that 4th line into the script gives us the result below.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ddc6b3057f66d531f39d3d2c750ecf77.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: The 225x225 visibility grid after applying a threshold. (Image by author)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to remember that grid-based visibility is an approximate method.
    Some of the grid cells may be classified as visible even if they should be just
    within a shadow, and some may be classified as blocked even if they should be
    just within the visible region. But generally speaking, the results should have
    decent accuracy if the grid spacing is small compared with the obstacles and the
    gaps between them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, I should confess that I used a few tricks to get the algorithm
    down to 3 lines:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The expression `int(x==0)` in the 2nd `for` loop is a clever trick that skips
    over the grid cell [0, 0] where the interpolation formula would produce a divide-by-zero
    error.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I’m relying on the fact that the NumPy library allows arrays to be accessed
    using negative indices. Other programming languages might require a few more lines
    of code to check for this condition.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the code above assumes the viewpoint is in the corner of the map. Moving
    the viewpoint to an arbitrary cell with coordinates `x0` and `y0` requires the
    calculation to be repeated four times, once in each of four quadrants.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述所有代码假设视点位于地图的角落。将视点移动到具有坐标`x0`和`y0`的任意单元格需要在四个象限中各重复计算一次。
- en: To place the viewpoint in the center of the map, replace the code in the `Compute
    visibility` section of the script with the following.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要将视点置于地图中心，请用以下代码替换脚本中`计算可见性`部分的代码。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here are the results with the viewpoint in the center.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是视点在中心时的结果。
- en: '![](../Images/ab0822417f99a001c21fb0d5587511e6.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ab0822417f99a001c21fb0d5587511e6.png)'
- en: The 225x225 visibility grid with the viewpoint in the center. (Image by author)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 225x225的可见性网格，视点在中心。（作者图片）
- en: A Neat Trick with Excel
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Excel 的一个巧妙技巧
- en: 'Here’s a little trick I can’t resist showing: Grid-based visibility implemented
    in Excel. The following screen recording is roughly 1 minute.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我忍不住想展示的小技巧：在Excel中实现的网格可见性。以下的屏幕录制大约1分钟。
- en: '![](../Images/ba9b51b1b68bbfb16846d14626eabf61.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba9b51b1b68bbfb16846d14626eabf61.png)'
- en: Grid-based visibility in Excel. (Recording by author)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Excel中的网格可见性。（作者录制）
- en: Want to try it yourself? Follow the instructions below. It should take only
    1 or 2 minutes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 想自己试试吗？按照下面的步骤操作即可。只需1到2分钟。
- en: Open MS Excel and create a **Blank workbook**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 MS Excel 并创建一个**空白工作簿**。
- en: 'Select cell **B2**, click on the **Formula Bar** (or press `F2`), paste in
    the following text, and press `Enter`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择单元格**B2**，点击**公式栏**（或按`F2`），粘贴以下文本，然后按`Enter`：
- en: '`=((COLUMN(B2)-2)*A2+(ROW(B2)-2)*B1)/((COLUMN(B2)-2)+(ROW(B2)-2))`'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`=((COLUMN(B2)-2)*A2+(ROW(B2)-2)*B1)/((COLUMN(B2)-2)+(ROW(B2)-2))`'
- en: Reselect cell **B2**, press `Ctrl-C` to copy, select a range of cells from **B2**
    to **Z26**, press `Ctrl-V` to paste.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新选择单元格**B2**，按`Ctrl-C`进行复制，选择从**B2**到**Z26**的单元格范围，按`Ctrl-V`进行粘贴。
- en: In the **Home** tab, select **Conditional Formatting**, **Highlight Cells Rules**,
    **Less Than**. Type `0.5` into the first box (“Format cells that are LESS THAN”),
    then select any “Fill” option from the drop-down menu on the right (e.g. “Light
    Red Fill with Dark Red Text”). Click **OK**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**主页**选项卡中，选择**条件格式**，**突出显示单元格规则**，**小于**。在第一个框（“格式小于”）中输入`0.5`，然后从右侧的下拉菜单中选择任意“填充”选项（例如，“浅红色填充，深红色文本”）。点击**确定**。
- en: Select cell **B2** and press `1`, then `Enter`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择单元格**B2**，按`1`，然后按`Enter`。
- en: Select all cells by clicking the green triangle above and to the left of cell
    **A1**, then click and drag the vertical line between **A** and **B** to shrink
    the cell width so that all cells end up approximately square.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击单元格**A1**上方和左侧的绿色三角形选择所有单元格，然后点击并拖动**A**和**B**之间的垂直线，以缩小单元格宽度，使所有单元格最终大致为正方形。
- en: Create obstacles by clicking on cells and pressing `Backspace`. Shadows extending
    away from the top left corner should automatically appear.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击单元格并按`Backspace`创建障碍物。自动生成的阴影应从左上角扩展开来。
- en: Observe that the obstacles need to be multiple cells wide to produce reasonable
    looking shadows.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到，障碍物需要多单元格宽才能产生合理的阴影效果。
- en: A Brief History of Grid-Based Visibility
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格可见性的简要历史
- en: The history of grid-based visibility explains why the method never gained widespread
    recognition. First of all, despite its simplicity, grid-based visibility wasn’t
    invented until 2004 [2], and its convergence properties weren’t established until
    2008 [3]. By that time, vector-based approaches like ray casting had become ubiquitous.
    Computer scientists were no longer searching for competing approaches. Secondly,
    the first papers on grid-based visibility came from a branch of mathematics called
    level set theory, where geometry is represented in an implicit manner unfamiliar
    to most computer scientists. While the level set visibility method works in 2D
    or 3D and uses linear interpolation, a strictly 3D alternative using bi-linear
    interpolation was developed by architectural and urban informatics researchers
    in 2013 [4].
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 网格可见性的历史解释了为何这一方法从未广泛被认可。首先，尽管其简单，但网格可见性直到2004年[2]才被发明，且其收敛性质直到2008年[3]才得到确立。到那时，基于向量的方法如光线投射已经变得普遍。计算机科学家们不再寻找替代的方法。其次，关于网格可见性的首篇论文来自一种称为水平集理论的数学分支，该领域以计算机科学家不熟悉的隐式方式表示几何图形。虽然水平集可见性方法适用于2D或3D，并使用线性插值，但严格的3D替代方法，采用双线性插值，由建筑和城市信息学研究人员于2013年[4]开发。
- en: 'Around 2019, my colleagues and I became interested in grid-based visibility
    as means of analyzing large numbers of computer-generated building designs. In
    our open access journal paper “[Path Counting for Grid-Based Navigation](https://www.jair.org/index.php/jair/article/view/13544)”
    [1], we made the following observations:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在2019年，我和我的同事们对网格可视性产生了兴趣，作为分析大量计算机生成建筑设计的一种手段。在我们的开放获取期刊论文“[基于网格的导航路径计数](https://www.jair.org/index.php/jair/article/view/13544)”
    [1]中，我们做出了以下观察：
- en: '**The original level set visibility method is easily adapted to work with explicit
    geometry familiar to computer scientists.** The Python code near the top of this
    article is an example of an implementation that combines the original interpolation
    formula with explicit grid-based geometry.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**原始的水平集可视性方法可以轻松地适应于计算机科学家熟悉的显式几何形状。** 本文开头的Python代码是将原始插值公式与显式网格几何相结合的实现示例。'
- en: '**The size of the grid neighborhood can be increased to produce more accurate
    results.** The examples in this article have so far used the 4-neighborhood, where
    information flows to the north, south, east, and/or west. My colleagues and I
    used the 8-neighborhood, which allows information to flow diagonally, in both
    the paper and an architectural design tool called [SpaceAnalysis](https://www.youtube.com/watch?v=MK5GivotqLM).'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**网格邻域的大小可以增加以产生更准确的结果。** 本文中的示例迄今为止使用了4-邻域，其中信息流向北、南、东和/或西。我的同事们和我在论文和一个名为[SpaceAnalysis](https://www.youtube.com/watch?v=MK5GivotqLM)的建筑设计工具中使用了8-邻域，这允许信息沿对角线流动。'
- en: '**Grid-based visibility results can be shown to converge on the exact solution
    using probability theory, specifically the central limit theorem.** The original
    proof from the level set community used numerical analysis [3].'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**基于网格的可视性结果可以通过概率理论特别是中心极限定理被证明收敛于精确解。** 原始的证明来自水平集社区，使用了数值分析[3]。'
- en: '**Visibility scores produced by linear interpolation can be reinterpreted as
    the fraction of shortest grid paths heading away from the viewpoint that are not
    blocked by obstacles.**'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**线性插值产生的可视性评分可以被重新解释为从视点出发的最短网格路径中未被障碍物阻挡的部分。**'
- en: That last observation revealed that **central grid-based pathfinding**, the
    main subject of the paper and [my previous Medium article](/a-short-and-direct-walk-with-pascals-triangle-26a86d76f75f),
    is based on the same underlying mathematics as grid-based visibility. In fact,
    it is possible to compute visible regions by simply counting paths.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的观察结果揭示了**基于网格的中心路径寻路**，这是本文的主要内容和[我之前的Medium文章](/a-short-and-direct-walk-with-pascals-triangle-26a86d76f75f)的主题，基于与网格可视性相同的基础数学。实际上，可以通过简单地计数路径来计算可见区域。
- en: To demonstrate **visibility by counting**, we’ll assume as before that the viewpoint
    is in the top left corner. We begin by placing a 1 in that corner, then we repeatedly
    copy numbers downward and to the right. When two numbers converge on the same
    grid cell, we add them together. The result is that every grid cell contains the
    number of grid paths heading away from the viewpoint and ending up at that cell.
    For example, there are 742 such paths from the viewpoint to the bottom right corner.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示**通过计数实现可视性**，我们将假设视点位于左上角。我们从那个角落开始放置一个1，然后重复地将数字向下和向右复制。当两个数字汇聚在同一个网格单元时，我们将它们加在一起。结果是每个网格单元包含从视点出发并最终到达该单元的网格路径的数量。例如，从视点到右下角有742条这样的路径。
- en: '![](../Images/0b05b1208f3671f22e6212df2012180f.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b05b1208f3671f22e6212df2012180f.png)'
- en: Counting grid paths from the viewpoint in the top left corner. (Animation by
    author)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从左上角的视点计数网格路径。（动画由作者提供）
- en: Next, we repeat the process ignoring all obstacles. Every grid cell ends up
    with the maximum possible number of grid paths from the viewpoint to that cell.
    This is actually just Pascal’s Triangle, a well-known number pattern that the
    previous article discusses at length. Observe that there are a maximum of 2002
    grid paths from the viewpoint to the bottom right corner.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们重复这个过程，忽略所有障碍物。每个网格单元最终都拥有从视点到该单元的最大可能网格路径数量。这实际上只是帕斯卡三角形，一个在之前的文章中详细讨论的著名数字模式。观察到，从视点到右下角有最多2002条网格路径。
- en: '![](../Images/ce94774789665a621e84e1466c568476.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce94774789665a621e84e1466c568476.png)'
- en: Counting grid paths from the viewpoint while ignoring obstacles. (Animation
    by author)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略障碍物时从视点计数网格路径。（动画由作者提供）
- en: In our [pathfinding by counting](/a-short-and-direct-walk-with-pascals-triangle-26a86d76f75f)
    approach, we took two sets of path counts and multiplied them together. In visibility
    by counting, we take the two sets of path counts and divide. Taking the actual
    number of paths to each grid cell (the first animation above), and then dividing
    by the maximum possible number of paths to that cell (the second animation), we
    end up with the visibility score for each grid cell. We then classify each cell
    as visible if its score is at least 0.5\. For example, the cell in the bottom
    right corner is reached by 742 out of a possible 2002 grid paths. Its visibility
    score is 472/2002, or approximately 0.37, and it is classified as not visible.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的[计数路径查找方法](/a-short-and-direct-walk-with-pascals-triangle-26a86d76f75f)中，我们取了两组路径计数并将它们相乘。在计数可见性中，我们将两组路径计数相除。我们首先获取到达每个网格单元的实际路径数量（见上图），然后除以到该单元的最大可能路径数量（见第二动画），最终得到每个网格单元的可见性分数。我们将每个单元的可见性分数不低于0.5的单元标记为可见。例如，右下角的单元格由742条可能的2002条网格路径到达。它的可见性分数是472/2002，即约为0.37，因此被分类为不可见。
- en: '![](../Images/3d6d9f5d59581105c7ee7d14b0e778f0.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d6d9f5d59581105c7ee7d14b0e778f0.png)'
- en: Dividing path counts to obtain visibility scores. (Animation by author)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过路径计数获得可见性分数。（作者提供的动画）
- en: Again, we demonstrated in the paper that visibility scores computed by counting
    are mathematically equivalent to those produced by the original interpolation
    formula. In other words, both methods are viable ways of solving the visible region
    problem. If we choose to implement visibility by counting, however, we must remember
    that path counts increase exponentially with distance. If we represent these counts
    using 64-bit floating-point numbers, the path counts will overflow after reaching
    1030 grid moves from the viewpoint. For that reason, I believe it makes sense
    to default to the linear interpolation method when implementing grid-based visibility.
    At the same time, I feel that the connection to path counting is interesting and
    deserves to be shared.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们在论文中证明了通过计数计算的可见性分数在数学上等同于原始插值公式所产生的分数。换句话说，两种方法都是解决可见区域问题的可行方法。然而，如果我们选择实现计数可见性，我们必须记住路径计数会随着距离指数级增加。如果我们用64位浮点数表示这些计数，路径计数将在达到视点1030网格移动后溢出。因此，我认为在实现基于网格的可见性时，默认使用线性插值方法是有意义的。同时，我认为路径计数的联系很有趣，值得分享。
- en: Larger Neighborhoods
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更大的邻域
- en: 'One concern you may have about grid-based visibility is its accuracy, especially
    since certain vector-based visibility methods are considered to produce exact
    solutions to the visible region problem. Here’s the reality about exact solutions:
    They’re only exact if the input geometry is exact, which is rarely the case in
    practice. When performing a visibility analysis, a pathfinding analysis, or any
    kind of spatial analysis on a model of a real-world environment, the model is
    almost always an approximation due to discretization errors, measurement errors,
    and in some cases construction errors. The fact that grid-based visibility introduces
    some additional error may or may not be a serious drawback, depending on the application.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于网格的可见性，你可能会担心其准确性，尤其是因为某些基于矢量的方法被认为能提供可见区域问题的精确解。关于精确解的现实是：它们只有在输入几何体精确的情况下才是精确的，但在实际中这种情况很少见。在对真实世界环境模型进行可见性分析、路径查找分析或任何空间分析时，由于离散化误差、测量误差以及在某些情况下的构建误差，模型几乎总是一个近似值。网格基可见性引入一些额外误差，是否会成为严重的缺陷，取决于具体应用。
- en: Having said that, there is a way to improve the accuracy of grid-based visibility
    results without increasing the resolution of the grid. Our examples so far have
    used only the 4-neighborhood, which is the simplest but least accurate 2D grid
    neighborhood. As previously mentioned, we have the option of choosing a larger
    grid neighborhood for more accurate results. The diagram below depicts the 4-,
    8-, and 16-neighborhoods for rectangular grids, as well as the 6- and 12-neighborhoods
    for triangular grids.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，仍有一种方法可以在不增加网格分辨率的情况下提高基于网格的可见性结果的准确性。到目前为止，我们的示例仅使用了4-邻域，这是最简单但最不准确的二维网格邻域。如前所述，我们可以选择更大的网格邻域以获得更准确的结果。下图描绘了矩形网格的4、8和16邻域，以及三角网格的6和12邻域。
- en: '![](../Images/2eb92480d8f720af9a57326b84011511.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2eb92480d8f720af9a57326b84011511.png)'
- en: Rectangular and triangular grid neighborhoods. (Image by [Autodesk Research](https://www.research.autodesk.com/)
    [1], used with permission)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: To see the effect of larger neighborhoods, we’ll rewrite the Python script from
    the top of the article. In this new version of the program, the `visibility_within_cone`
    function computes visibility scores within a cone bracketed by two vectors. This
    may not be the most efficient implementation, but it will help us understand that
    transitioning to larger grid neighborhoods means applying the same algorithm within
    a greater number of thinner cones.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since we are calling the function with the vectors `[1,0]` and `[0,1]`, we are
    still using the 4-neighborhood. The results are the same as those produced by
    our first script.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4e80398af1bd05ef170b5c06e4bdc92.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: The 25x25 visibility grid for the 4-neighborhood. (Image by author)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: But now we can easily modify the code to use the 8-neighborhood. To do this,
    replace the code in the `Compute visibility` section with the code below. The
    visibility function is now applied twice, first within the cone between the diagonal
    `[1,1]` and the grid axis `[1,0]`, and then between `[1,1]` and `[0,1]`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here are the results for the 8-neighborhood. The shadow edges have sharpened.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3bcce0a1aa3da3767769ba6cb7c5b3c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: The 25x25 visibility grid for the 8-neighborhood. (Image by author)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can transition to the 16-neighborhood by applying the visibility
    function within 4 cones.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here are the 16-neighborhood results.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad1d8b28906b6035795414c3076a9ebc.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: The 25x25 visibility grid for the 16-neighborhood. (Image by author)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The 16-neighborhood seems like it would offer more than enough accuracy for
    most applications. However, it is possible to continue upgrading to the 32-neighborhood,
    the 64-neighborhood, etc., if higher quality results are needed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: That takes care of the rectangular grids. Triangular grids, also known as hexagonal
    grids, are trickier to implement because there’s no ideal way to index the grid
    cells. Various indexing strategies are described in the [Red Blog Games](https://www.redblobgames.com/)
    tutorial on [Hexagonal Grids](https://www.redblobgames.com/grids/hexagons/), which
    includes a section on visibility using line-of-sight tests. I leave it as a challenge
    to you to implement grid-based visibility on a triangular grid.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grid-based visibility is a simple and practical alternative to ray casting and
    other vector-based visibility methods. Due to the timing and context of its discovery,
    the approach remains largely unknown to computer scientists. But I hope you’ll
    agree that it’s time for grid-based visibility to become visible, and I hope you’ll
    find an opportunity to use it in one of your own artificial intelligence projects.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '*Update: If you want to see how grid-based visibility can be implemented with
    high accuracy in 3D, check out the third and final article in this series:* [*A
    Sharp and Solid Outline of 3D Grid Neighborhoods*](/a-sharp-and-solid-outline-of-3d-grid-neighborhoods-1b0f264e7c11)*.*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*更新：如果你想了解如何在3D中高精度地实现基于网格的可见性，请查看本系列的第三篇也是最后一篇文章：* [*3D网格邻域的清晰而坚实的轮廓*](/a-sharp-and-solid-outline-of-3d-grid-neighborhoods-1b0f264e7c11)*。*'
- en: References
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] R. Goldstein, K. Walmsley, J. Bibliowicz, A. Tessier, S. Breslav, A. Khan,
    [Path Counting for Grid-Based Navigation](https://www.jair.org/index.php/jair/article/view/13544)
    (2022), Journal of Artificial Intelligence Research, vol. 74, pp. 917–955'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] R. Goldstein, K. Walmsley, J. Bibliowicz, A. Tessier, S. Breslav, A. Khan,
    [基于网格的导航路径计数](https://www.jair.org/index.php/jair/article/view/13544) (2022),
    Journal of Artificial Intelligence Research, vol. 74, pp. 917–955'
- en: '[2] Y.-H. R. Tsai, L.-T. Cheng, H. Osher, P. Burchard, G. Sapiro, [Visibility
    and its Dynamics in a PDE Based Implicit Framework](https://www.sciencedirect.com/science/article/abs/pii/S0021999104000841)
    (2004) [[PDF](https://mathweb.ucsd.edu/~lcheng/TCBOS04-Rver.pdf)]. Journal of
    Computational Physics, vol. 199, no. 1, pp. 260–290'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Y.-H. R. Tsai, L.-T. Cheng, H. Osher, P. Burchard, G. Sapiro, [基于PDE的隐式框架中的可见性及其动态](https://www.sciencedirect.com/science/article/abs/pii/S0021999104000841)
    (2004) [[PDF](https://mathweb.ucsd.edu/~lcheng/TCBOS04-Rver.pdf)]. Journal of
    Computational Physics, vol. 199, no. 1, pp. 260–290'
- en: '[3] C.-Y. Kao, R. Tsai, [Properties of a Level Set Algorithm for the Visibility
    Problems](https://link.springer.com/article/10.1007/s10915-008-9197-5) (2008)
    [[PDF](https://www.researchgate.net/publication/220396093_Properties_of_a_Level_Set_Algorithm_for_the_Visibility_Problems)],
    Journal of Scientific Computing, vol. 35, pp. 170–191'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] C.-Y. Kao, R. Tsai, [用于可见性问题的水平集算法的性质](https://link.springer.com/article/10.1007/s10915-008-9197-5)
    (2008) [[PDF](https://www.researchgate.net/publication/220396093_Properties_of_a_Level_Set_Algorithm_for_the_Visibility_Problems)],
    Journal of Scientific Computing, vol. 35, pp. 170–191'
- en: '[4] D. Fisher-Gewirtzman, A. Shashkov, Y. Doytsher, [Voxel Based Volumetric
    Visibility Analysis of Urban Environments](https://www.tandfonline.com/doi/abs/10.1179/1752270613Y.0000000059)
    (2013), Survey Review, vol. 45, no. 333, pp. 451–461'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] D. Fisher-Gewirtzman, A. Shashkov, Y. Doytsher, [基于体素的城市环境可见性分析](https://www.tandfonline.com/doi/abs/10.1179/1752270613Y.0000000059)
    (2013), Survey Review, vol. 45, no. 333, pp. 451–461'
