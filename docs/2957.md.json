["```py\n# CSV Data loader class\nclass CSVDataLoader:\n  def __init__(self, file_path):\n    self.file_path = file_path\n\n  def get_data(self):\n    return pd.read_csv(self.file_path)\n\n  def save_data(self, df):\n    df.to_csv(f'data/transformed_{self.file_path}', index=False)\n\n# Interface\nclass DataProcessor:\n  def __init__(self, train_data_loader, test_data_loader):\n    self.train_data_loader = train_data_loader\n    self.test_data_loader = test_data_loader\n\n  def run(self):\n    # Load training and test data using data loaders\n    train_df = self.train_data_loader.get_data()\n    test_df = self.test_data_loader.get_data()\n\n# Create a data processor instance\nprocess = DataProcessor(\n train_data_loader=CSVDataLoader(file_path='train.csv'),\n test_data_loader=CSVDataLoader(file_path='test.csv')\n)\n\n# Run the data processing pipeline\nprocess.run()\n```", "```py\nclass DataTransformer:\n  def transform_data(self, train_df, test_df):\n    for idx, df in enumerate([train_df, test_df]):\n      df[‘DateTime’] = pd.to_datetime(df['DateTime'])\n\n      # Build ‘Time’ column\n      df['Time'] = [date.hour * 3600 + date.minute * 60 + date.second for date in df['DateTime']]\n\n      # Convert DateTime to Unix timestamp\n      unixtime = [time.mktime(date.timetuple()) for date in df['DateTime']]\n      df['DateTime'] = unixtime\n\n      # Perform one-hot encoding on the DataFrame\n      df = pd.get_dummies(df)\n\n      if idx == 0:\n        # Split training DataFrame into features (X_train) and target (y_train)\n        X_train = df.drop(['Vehicles'], axis=1)\n        y_train = df[['Vehicles']]\n      elif idx == 1:\n        # Store test DataFrame\n        X_test = df\n\n    return X_train, y_train, X_test\n```", "```py\nclass LGBMModel:\n  def __init__(self, num_leaves, n_estimators):\n    self.model = lgb.LGBMRegressor(\n      num_leaves=num_leaves,\n      n_estimators=n_estimators\n    )\n\n  def fit(self, X, y):\n    self.model.fit(X, y)\n    self.model.booster_.save_model('model/lgbm_model.txt')\n    return self\n\n  def predict(self, X):\n    predictions = self.model.predict(X)\n    return predictions\n```", "```py\n# Interface\nclass DataProcessor:\n  def __init__(self, train_data_loader, test_data_loader, data_transformer, model):\n    self.train_data_loader = train_data_loader\n    self.test_data_loader = test_data_loader\n    self.data_transformer = data_transformer\n    self.model = model\n\n  def run(self):\n    # Load train and test data using data loaders\n    train_df = self.train_data_loader.get_data()\n    test_df = self.test_data_loader.get_data()\n\n    # Transform the data using the data transformer\n    X_train, y_train, X_test = self.data_transformer.transform_data(train_df, test_df)\n\n    # Fit the model and make prediction\n    self.model.fit(X_train, y_train)\n    test_df['Vehicles'] = self.model.predict(X_test)\n\n    # Save the transformed training data and test data\n    self.train_data_loader.save_data(pd.concat([X_train, y_train], axis=1))\n    self.test_data_loader.save_data(test_df)\n\n# Create a data processor instance\nprocess = DataProcessor(\n    train_data_loader=CSVDataLoader(file_path='train.csv'),\n    test_data_loader=CSVDataLoader(file_path='test.csv'),\n    data_transformer=DataTransformer(),\n    model=LGBMModel(num_leaves=16, n_estimators=80)\n)\n\n# Run the data processing pipeline\nprocess.run()\n```", "```py\n# Initialise a Git and DVC project in the current working directory\ngit init\ndvc init\n\n# Capture the current state of transformed data in folder 'data' and latest LGBM model in folder 'model'\ndvc add data model\n\n# Commit the current state of 1st version\ngit add data.dvc model.dvc .gitignore\ngit commit -m “First LGBM model, with Time feature”\ngit tag -a “v1.0” -m “model v1.0, Time feature”\n```", "```py\ndf[‘Weekday’] = [datetime.weekday(date) for date in df.DateTime]\n```", "```py\nmodel=LGBMModel(num_leaves=20, n_estimators=90)\n```", "```py\ngit add data.dvc model.dvc\ngit commit -m “Second LGBM model, with Time and Weekday features”\ngit tag -a “v2.0” -m “model v2.0, Time and Weakday features”\n```", "```py\ngit checkout v1.0\ndvc checkout\n```"]