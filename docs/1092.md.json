["```py\nCALL db.schema.visualization()\n```", "```py\ngds.alpha.graph.project(\n    graphName: String,\n    sourceNode: Node or Integer,\n    targetNode: Node or Integer,\n    nodesConfig: Map,\n    relationshipConfig: Map,\n    configuration: Map\n)\n```", "```py\nMATCH (source:Airport)-[:HAS_ROUTE]->(target:Airport)\nWITH gds.alpha.graph.project('airports', source, target) AS graph\nRETURN graph.nodeCount AS nodeCount, \n       graph.relationshipCount AS relationshipCount\n```", "```py\nMATCH (source:Airport)-[:HAS_ROUTE]->(target:Airport)\nWHERE EXISTS {(source)-[:ON_CONTINENT]->(:Continent {name:\"OC\"})}\n  AND EXISTS {(target)-[:ON_CONTINENT]->(:Continent {name:\"OC\"})}\nWITH gds.alpha.graph.project('airports-oceania', source, target) AS graph\nRETURN graph.nodeCount AS nodeCount, \n       graph.relationshipCount AS relationshipCount\n```", "```py\nMATCH (source:Airport)\nWHERE EXISTS {(source)-[:ON_CONTINENT]->(:Continent {name:\"OC\"})}\nOPTIONAL MATCH (source)-[:HAS_ROUTE]->(target:Airport)\nWHERE EXISTS {(target)-[:ON_CONTINENT]->(:Continent {name:\"OC\"})}\nWITH gds.alpha.graph.project('airports-isolated', source, target) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nCALL {\n    MATCH (source:Airport)-[r:HAS_ROUTE]->(target:Airport)\n    RETURN source, target, r\n    UNION\n    MATCH (source:Airport)-[r:IN_CITY]->(target:City)\n    RETURN source, target, r\n}\nWITH gds.alpha.graph.project('airports-labels', source, target,\n  {sourceNodeLabels: labels(source),\n   targetNodeLabels: labels(target)},\n  {relationshipType:type(r)}) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nCALL {\n    MATCH (source:Airport)-[r:HAS_ROUTE]->(target:Airport)\n    RETURN source, target, r\n    UNION\n    MATCH (source:Airport)-[r:IN_CITY]->(target:City)\n    RETURN source, target, r\n}\nWITH gds.alpha.graph.project('airports-labels-custom', source, target,\n{sourceNodeLabels: CASE WHEN source.city = 'Miami' \n                       THEN 'Miami' ELSE 'NotMiami' END,\n targetNodeLabels: ['CustomLabel']},\n{relationshipType: CASE WHEN type(r) = 'HAS_ROUTE' \n                        THEN 'FLIGHT' ELSE 'NOT_FLIGHT' END}) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nCALL {\n    MATCH (source:Airport)-[r:HAS_ROUTE]->(target:Airport)\n    RETURN source, target, r,\n         CASE WHEN source.city = target.city \n              THEN 'INTRACITY' ELSE 'INTERCITY' END as rel_type\n    UNION\n    MATCH (source:Airport)-[r:IN_CITY]->(target:City)\n    RETURN source, target, r, type(r) as rel_type\n}\nWITH gds.alpha.graph.project('airports-labels-precalculated', source, target,\n  {sourceNodeLabels: labels(source),\n   targetNodeLabels: labels(target)},\n  {relationshipType: rel_type}) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nMATCH (source:Airport)-[r:HAS_ROUTE]->(target:Airport)\nWITH gds.alpha.graph.project('airports-properties', source, target,\n  {sourceNodeLabels: labels(source),\n   targetNodeLabels: labels(target),\n   sourceNodeProperties: {runways: source.runways},\n   targetNodeProperties: {runways: target.runways}},\n  {relationshipType: type(r), properties: {distance: r.distance}}) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nMATCH (source:Airport)-[r:HAS_ROUTE]->(target:Airport)\nWITH gds.alpha.graph.project('airports-properties-custom', source, target,\n  {sourceNodeLabels: labels(source),\n   targetNodeLabels: labels(target),\n   sourceNodeProperties: {runways10: source.runways * 10},\n   targetNodeProperties: {runways10: target.runways * 10}},\n  {relationshipType: type(r),\n  properties: {inverseDistance: 1 / r.distance}}) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nMATCH (source:Airport)-[r:HAS_ROUTE]->(target:Airport)\nWITH gds.alpha.graph.project('airports-undirected', source, target,\n  {}, // nodeConfiguration\n  {}, // relationshipConfiguration\n  {undirectedRelationshipTypes: ['*']}\n) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nCALL {\n    MATCH (source:Airport)-[r:HAS_ROUTE]->(target:Airport)\n    RETURN source, target, r\n    UNION ALL\n    MATCH (source:Airport)-[r:IN_CITY]->(target:City)\n    RETURN source, target, r\n}\nWITH gds.alpha.graph.project('airports-undirected-specific', source, target,\n  {},\n  {relationshipType:type(r)},\n  {undirectedRelationshipTypes: ['IN_CITY']}) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nMATCH (sourceCity)<-[:IN_CITY]-(:Airport)-[:HAS_ROUTE]->(:Airport)-[:IN_CITY]->(targetCity)\nWITH sourceCity, targetCity, count(*) AS countOfRoutes\nWITH gds.alpha.graph.project('airports-virtual', sourceCity, targetCity,\n  {},\n  {relationshipType:'VIRTUAL_ROUTE'},\n  {}) AS graph\nRETURN graph.nodeCount AS nodeCount, graph.relationshipCount AS relationshipCount\n```", "```py\nCALL gds.pageRank.stream('airports-virtual')\nYIELD nodeId, score\nRETURN gds.util.asNode(nodeId).name AS city, score\nORDER BY score DESC\nLIMIT 5\n```"]