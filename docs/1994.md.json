["```py\nquery =  \"Please list all feedback regarding sentence structures in a table \\\nin markdown and get a single insight for each one, and give a general summary for all.\"\n```", "```py\nimport os\nimport openai\nimport pinecone\nimport certifi\nimport nltk\nfrom tqdm.autonotebook import tqdm\nfrom langchain.document_loaders import DirectoryLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import Pinecone\nfrom langchain.llms import OpenAI\nfrom langchain.chains.question_answering import load_qa_chain\n\ndirectory = 'path to your directory with text files, containing feedback'\nOPENAI_API_KEY = \"your key\"\n```", "```py\ndef load_docs(directory):\n  loader = DirectoryLoader(directory)\n  documents = loader.load()\n  return documents\n\ndocuments = load_docs(directory)\nlen(documents)\n```", "```py\ndef split_docs(documents, chunk_size=500, chunk_overlap=20):\n  text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)\n  docs = text_splitter.split_documents(documents)\n  return docs\n\ndocs = split_docs(documents)\nprint(len(docs))\n```", "```py\n# Assuming OpenAIEmbeddings class is imported above\nembeddings = OpenAIEmbeddings()\n\n# Let's define a function to generate an embedding for a given query\ndef generate_embedding(query):\n    query_result = embeddings.embed_query(query)\n    print(f\"Embedding length for the query is: {len(query_result)}\")\n    return query_result\n```", "```py\nMY_API_KEY_p= \"the_key\"\nMY_ENV_p= \"the_environment\"\n\npinecone.init(\n    api_key=MY_API_KEY_p,\n    environment=MY_ENV_p\n)\n\nindex_name = \"your_index_name\"\n\nindex = Pinecone.from_documents(docs, embeddings, index_name=index_name)\n```", "```py\ndef get_similiar_docs(query, k=40, score=False):\n  if score:\n    similar_docs = index.similarity_search_with_score(query, k=k)\n  else:\n    similar_docs = index.similarity_search(query, k=k)\n  return similar_docs\n```", "```py\nfrom langchain.chat_models import ChatOpenAI\nmodel_name = \"gpt-4\"\n\nllm = OpenAI(model_name=model_name, temperature =0)\n\nchain = load_qa_chain(llm, chain_type=\"stuff\")\n\ndef get_answer(query):\n  similar_docs = get_similiar_docs(query)\n  answer = chain.run(input_documents=similar_docs, question=query)\n  return answer\n```", "```py\nquery =  \"Please list all feedback regarding sentence structures in a table \\\nin markdown and get a single insight for each one, and give a general summary for all.\"\n\nanswer = get_answer(query)\nprint(answer) \n```", "```py\nfrom langchain.chains import RetrievalQA\nretriever = index.as_retriever()\n\nqa_stuff = RetrievalQA.from_chain_type(\n    llm=llm, \n    chain_type=\"stuff\", \n    retriever=retriever, \n    verbose=True\n)\n\nresponse = qa_stuff.run(query)\n```", "```py\nfrom IPython.display import display, Markdown\n\ndisplay(Markdown(response))\n```"]