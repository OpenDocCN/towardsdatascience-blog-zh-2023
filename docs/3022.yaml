- en: Kernel Density Estimator for Multidimensional Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/kernel-density-estimator-for-multidimensional-data-3e78c9779ed8?source=collection_archive---------1-----------------------#2023-10-04](https://towardsdatascience.com/kernel-density-estimator-for-multidimensional-data-3e78c9779ed8?source=collection_archive---------1-----------------------#2023-10-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Demonstration of KDE using real-world datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jaroslaw.drapala?source=post_page-----3e78c9779ed8--------------------------------)[![Jaroslaw
    Drapala](../Images/34de3c52fc32005e36930135254ae45e.png)](https://medium.com/@jaroslaw.drapala?source=post_page-----3e78c9779ed8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3e78c9779ed8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3e78c9779ed8--------------------------------)
    [Jaroslaw Drapala](https://medium.com/@jaroslaw.drapala?source=post_page-----3e78c9779ed8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fce6da4a69810&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fkernel-density-estimator-for-multidimensional-data-3e78c9779ed8&user=Jaroslaw+Drapala&userId=ce6da4a69810&source=post_page-ce6da4a69810----3e78c9779ed8---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3e78c9779ed8--------------------------------)
    ·11 min read·Oct 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3e78c9779ed8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fkernel-density-estimator-for-multidimensional-data-3e78c9779ed8&user=Jaroslaw+Drapala&userId=ce6da4a69810&source=-----3e78c9779ed8---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3e78c9779ed8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fkernel-density-estimator-for-multidimensional-data-3e78c9779ed8&source=-----3e78c9779ed8---------------------bookmark_footer-----------)![](../Images/d0bff3735f3ef37d3f870c1c5ffd8fab.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Marco Bianchetti](https://unsplash.com/@marcobian?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: I would like to extend [my previous story](https://medium.com/towards-data-science/kernel-density-estimation-explained-step-by-step-7cc5b5bc4517)
    about Kernel Density Estimator (KDE) by considering multidimensional data.
  prefs: []
  type: TYPE_NORMAL
- en: I will start by giving you a mathematical overview of the topic, after which
    you will receive Python code to experiment with bivariate KDE. I will then go
    through some of the properties of the Gaussian kernel. Last but not least, using
    *heights and weights* and *exoplanets* datasets, I will demonstrate how KDE may
    be applied to real-world data.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Mathematical introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: KDE is a composite function made up of several similar kernel functions. I chose
    the Gaussian kernel, since it is simple to analyze. This function is the prototype
    of a multidimensional Gaussian
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e20771a70291a41c80118b70d397b2e.png)'
  prefs: []
  type: TYPE_IMG
- en: which is itself an extension of
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f5814cfde0b6b60d5ae7436eb0a7408.png)'
  prefs: []
  type: TYPE_IMG
- en: to many dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The vector **x** has a total of *d* dimensions (features), with the superscript
    representing the index of the features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb3c9787ea5bb097bf6706256173d9cd.png)'
  prefs: []
  type: TYPE_IMG
- en: '**H** is a *d* by *d* matrix of coefficients that govern the form of the function.
    Here is a two-dimensional (*d =* 2) example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbce5370a462ce0479e6c992abff661c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Perhaps you recall that only a function with unit area under the curve can
    join the PDF club. Therefore, to obtain the multivariate Gaussian kernel function,
    we must add a few normalizing terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f609b9ba6669c68a81089822a94972e5.png)'
  prefs: []
  type: TYPE_IMG
- en: You may verify for yourself that inserting *d =* 1 yields a standard unidimensional
    Gaussian function.
  prefs: []
  type: TYPE_NORMAL
- en: The matrix **H** serves as a covariance matrix. In the bivariate case (*d =*
    2) shown above, *h*₁₁ and *h*₂₂ correspond to the variances of *x*⁽¹⁾ and *x*⁽²⁾,
    respectively, and *h*₁₂ = *h*₂₁ represent the covariance of *x*⁽¹⁾ with *x*⁽²⁾.
    That is why the matrix **H** is considered to be symmetric. As a consequence,
    in the bivariate case, the user has three parameters to alter the kernel function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kernel function is a customized template function that is applied to each
    data point in order to build the PDF of the entire dataset using a simple summation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6282de19b1b713749cc8b3b97acaec9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where **x***ᵢ* is the *i*-th data point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81050e75748e124d4c7b938038913b49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Don’t worry if all of this maths makes you uneasy. I will offer you Python
    code to create visualizations that will demonstrate how it works. The main point
    to remember is this:'
  prefs: []
  type: TYPE_NORMAL
- en: The Kernel Density Estimator is a composite function made up of kernel function
    instances allocated one-to-one to each data point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2\. Python code to bring bivariate KDE to life
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here you have the code that may be used as an experimental platform for bivariate
    Gaussian kernel and KDE experiments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imports come first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The bivariate Gaussian kernel function `K` requires a 2 by 2 numpy array `H`.
    The function `K` accepts a grid-like array as an argument `x`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `KDE` calls the kernel function `K` for every data point and accumulates
    all its outcomes, as stated in *f*(**x**). If you don’t intend to call `K` directly
    in your application, you can nest its definition within the `KDE`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice that for a single data point, *f*(**x**) equals just *K*(**x**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The last function `show_pdf` displays two-dimensional function `func` and adds
    data points `data` to it, but the `data` does not have to be related to the function
    `func`. There are two perspectives on PDF: contour and surface plots.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Properties of the Gaussian kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us begin with the simplest case, represented by the identity matrix **H**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88337531474446b59f65f118c985f6c1.png)'
  prefs: []
  type: TYPE_IMG
- en: The origin of the coordinate axes serves as a single data point.
  prefs: []
  type: TYPE_NORMAL
- en: To make use of the provided code, you first have to define the array `H` and
    at least one data point (the `data` array has to be two-dimensional). Then you
    can call `KDE` for these data. Take note of the fact that `show_pdf` accepts a
    function `func` as an input and calls it with a grid-like array `x` as the first
    parameter. As a result, we invoke the `partial` method from the `functools` library,
    which generates the `KDE_partial` function that performs the same job as `KDE`,
    except that the second parameter `H` is fixed. This is how I am going to use the
    code throughout this story.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Gaussian kernel is centred around the datapoint.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bbb91bfdbf5e2609fc73a3e4a2e7db4.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gaussian kernel with 0 covariance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us introduce some correlation by fixing off-diagonal elements to 0.5:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d816f50bc890e382b464db1ab1ecb0f3.png)'
  prefs: []
  type: TYPE_IMG
- en: The KDE’s shape becomes slanted and thinner. The semi-major axis runs parallel
    to the *x*⁽¹⁾ = *x*⁽²⁾ line.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64966317c7fbbf2dda3e4283a240925a.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gaussian kernel with 0.5 covariance.
  prefs: []
  type: TYPE_NORMAL
- en: The KDE becomes more narrower as the covariance coefficient increases. Because
    the function’s values change more quickly, I increased the figure’s resolution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/863acbf8dfe28de0447d40598522095c.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gaussian kernel with 0.9 covariance.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily predict what would happen when covariance becomes negative.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bd75856a6906b7bc097c5a59d184d34.png)![](../Images/d9cb85c2a2ba083d96878163e492a73e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gaussian kernel with -0.5 covariance.
  prefs: []
  type: TYPE_NORMAL
- en: These examples clearly demonstrate how the Gaussian PDF may follow the correlation
    structure of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may be wondering how to rotate the Gaussian PDF. To do this, take a [rotation
    matrix](https://en.wikipedia.org/wiki/Rotation_matrix) **R** (I prefer the clockwise
    version):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3802a41300a12c961403a1e532af83e1.png)'
  prefs: []
  type: TYPE_IMG
- en: and replace **H** with **RHR**ᵀ. Below is a convienience function that returns
    the array representing the matrix that performs rotation by α degrees (in radians).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Since rotating a symmetric Gaussian makes no sense, I stretch it by changing
    the diagonal components of the matrix **H**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the first-axis scale is extended twice, while the second scale is
    shrunk five times, as a result of applying different values to the diagonal elements
    of matrix **H**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e113438e7222e716c1f9e3ab7b46b126.png)'
  prefs: []
  type: TYPE_IMG
- en: Stretched and rotated Gaussian kernel.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Heights and Weights dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ready-to-use datasets accessible in machine learning repositories.
    That is why I was astonished to discover that nearly every commonly available
    dataset containing height and weight columns was synthetically generated. In order
    to get some real-world data, I requested my students to submit their heights and
    weights and this dataset is now available in my [Github repository](https://raw.githubusercontent.com/jdrapala/datasets/main/HeightsWeightsGender_dataset.xlsx).
  prefs: []
  type: TYPE_NORMAL
- en: Let us take a look at these data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7ff9db24d12858a41c7a6fdbe8b562e4.png)'
  prefs: []
  type: TYPE_IMG
- en: A sample of height and weight data collected from my students.
  prefs: []
  type: TYPE_NORMAL
- en: Let *x*⁽¹⁾ denote height and *x*⁽²⁾ denote weight.
  prefs: []
  type: TYPE_NORMAL
- en: Take the identity matrix **H** as a first attempt to visualize the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/752275bfb233e340711646a47176ac38.png)'
  prefs: []
  type: TYPE_IMG
- en: Too tiny kernel was used.
  prefs: []
  type: TYPE_NORMAL
- en: The outcome is terrible; the PDF is peaked over a narrow region surrounding
    data points and falls to near zero everywhere else.
  prefs: []
  type: TYPE_NORMAL
- en: We make the kernel bigger by multiplying the entire matrix **H** by a constant
    *s* (for size). Take *s* = 10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/745f23b3646767636ddfd979f6ea455c.png)'
  prefs: []
  type: TYPE_IMG
- en: The kernel size should be raised even further.
  prefs: []
  type: TYPE_NORMAL
- en: Individual peaks combine into a lovely PDF, yet it still appears overly detailed.
    So, increase *s* to 64 to obtain the following result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8f2bb3d94109172ef9f6a50746d8243.png)'
  prefs: []
  type: TYPE_IMG
- en: The kernel seems to be of the right size.
  prefs: []
  type: TYPE_NORMAL
- en: This kernel function size appears to be a suitable match for this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Compare our handmade PDF output with seaborn KDE.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3d43103059eb959061d632c6c2ba086d.png)'
  prefs: []
  type: TYPE_IMG
- en: What effect would non-zero covariance elements in the matrix **H** have on PDF?
    For covariance entries with a value of 0.8, the following PDF is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/153164c3772bb1beb7bee3ae9b3dae78.png)'
  prefs: []
  type: TYPE_IMG
- en: This appears to be a windy-day variation of the preceding figure.
  prefs: []
  type: TYPE_NORMAL
- en: PDF quality has clearly degraded.
  prefs: []
  type: TYPE_NORMAL
- en: Similar experiments show that the Gaussian kernel with the identity matrix **H**
    is sufficient in real-world situations. As a result, everything may come down
    to selecting the appropriate value for parameter *s*, which determines the region
    spanned by the kernel function, exactly as bandwidth *h* in [the univariate case](https://medium.com/towards-data-science/kernel-density-estimation-explained-step-by-step-7cc5b5bc4517).
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, consider creating a PDF representation for a larger set of [height
    and weight data](https://raw.githubusercontent.com/jdrapala/datasets/main/cardiac_patients.xlsx)
    that I gathered during my many medical data analysis research projects. However,
    bear in mind that these are data from people with heart disease, diabetes, and
    other conditions, so proceed with caution when drawing conclusions for the general
    population. I also have some concerns about the quality of the data because it
    was collected from many hospitals.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/790f91ac223496f9a8b25a3d31ef8764.png)'
  prefs: []
  type: TYPE_IMG
- en: Heights and weights data collected from various hospitals.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Exoplanets dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: KDE is especially useful with multimodally scattered data. Therefore, may I
    present you another dataset. And I am sure that we are all bored with the Iris
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: This dataset was downloaded directly from the [Exoplanet Orbit Database webpage](http://exoplanets.org/).
    Because [the file](http://exoplanets.org/csv-files/exoplanets.csv) is large and
    contains mixed data types, I had to set `low_memory=False` in the `read_csv` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'I picked two columns: the exoplanet’s mass (measured in Jupyter masses) and
    its distance from the parent star (semi-major axis in astronomical units).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/24703ed607177b6b8940eafa5d7771f1.png)'
  prefs: []
  type: TYPE_IMG
- en: A sample of exoplanets dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Let us take a quick look at how the data are distributed on the logarithmic
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/54cbc0c0a97e65d8fe4de21cadc8ed79.png)'
  prefs: []
  type: TYPE_IMG
- en: Exoplanets data on the logarithmic scale.
  prefs: []
  type: TYPE_NORMAL
- en: KDE produces a visually appealing PDF for *s* = 0.7, using these data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8af68eaa3539d512596a6e60e84ba521.png)'
  prefs: []
  type: TYPE_IMG
- en: The exoplanets data is divided into three clusters, although the one on the
    left is noticeably sparser.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend that you try the `[KernelDensity](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KernelDensity.html)`
    method in the Scikit-learn library, which allows you to easily generate synthetic
    data after the KDE has been fitted to the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7ab44485c6550063eeac3a1e414b342f.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetically generated exoplanets data using Scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: Final Words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nice visualizations help to learn from data and to draw appropriate conclusions.
    KDE enables the presentation of data distribution in a visually pleasing manner.
    As a result, most of its applications in data exploration boil down to a bivariate
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that calculating the value of KDE at a single point requires processing
    of all data points, which can be time-consuming in massive calculations. In such
    a case, you should consider using Gaussian mixture models instead. But that’s
    another story …
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This research has made use of the Exoplanet Orbit Database and the Exoplanet
    Data Explorer at [exoplanets.org](http://exoplanets.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '***Unless otherwise noted, all images are by the author.***'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Kristan, M., Leonardis, A., Skočaj, D. [Multivariate online kernel density
    estimation with Gaussian kernels](https://pdf.sciencedirectassets.com/272206/1-s2.0-S0031320311X00067/1-s2.0-S0031320311001233/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIESmajJC%2FTm04hxqPfbYr6kAhdZvgQiBEGFYdOdtqHEQAiBC8RMFSczi8WU3KfQojbtqCm6nvFR%2BqZ%2BQRgt4W3IQGiqzBQh8EAUaDDA1OTAwMzU0Njg2NSIMN7fEICU7zOOWmDNzKpAFyvinHQU2qBx0wD7jtsxjm2ztwinuBy0qGzKyJagx2anwYwb3iKdgYT6m8g3f9slQ87NNdId1xPrNml89D68ejO1oA2dwP5p7c07A9ZwnM3Tcn9uHwOJNcXe0QqQlc6qDhYZH0cgUd3j%2F2jsK1MJCqNyjOIvJA1%2FWSA5bE9nrPOhdysbc%2FU7OULr5ppX1Z14LuuSUCPY2zFJwXAQc7q%2FuE1KJ7uEQg%2BkA6i65Xt5PUrjqxyodqqiYx16lkUEM9hhLvkoInD9n6hVXfk6xBillcv%2FlT9QqSNmNIteuxoUONPZkR29CRXL74%2F4gysMWXjvsOgIR3qaKOWtG5Xh34gNW6VxKfoSfSiz8FLxSBFqJoSvED9LiVL4Bwsk9rsUJTesz8rrGPYco%2F%2Bjy%2FXgYNDFRtLbHrjo%2F%2B6Jy5KTPU7MY7AmiikVG1kXm09Mu6nCzJNOzumo%2Ffo802dWf8e0xXhNpJt%2Bkr9GG2uQvvBBU9GG%2BmMywhb8w2ykMzYShJ%2FLpzTiHawBKgtqtx0BHdiankCPae%2F5mvYv%2BDUBea%2F2piAWSfQXqARy1fQP4jafReC6iL5e4UaWeJO6H%2BdsJjZefyLzteBkpumQ%2Blp%2FjnbzmqhqP8n3oCLsJwtLXMV%2BSwdjlchcLeAeq34kU6NrqWtIHbgnfIkrXeGo3p7UdQZL9Ongwv%2FWPjFXaFWZTlthtbf9HL6epGxuDrj0uL75TtDdsPsWBBZMiBwZTI0BqAoCbN3VS0O9h1jQ4AqTl4z73xAhqAjP%2FGNQSBcyqtLVklT0amW08bmOH5Ut1PdwgbLPBpyZsUPOucRO3IjIVNOxWjQMuKWc4HNLmL9UCIUZd2ksfis3hWSzw8Hf2NtpWIfc7qaFwNTgw5tTMqAY6sgFepI5a7IP8yRlOwSQS4LNRJJ87QB%2B%2BFxD1eTkpNi4%2BQRHNVeJkk5XgdXNbQxXr4GFEOtw14qwYaku453DXyttvQ8weJag0tFd5UUEkx0xrpcfBmwTT2BF3mlu8DlGZhT0DeYz4hhK292mz4qefanyJMhsrOQS0p0P9td0Y9KCKZnLnP4kbi77js8VYa%2Bl3zgkd8tmQPB%2BnCCwl4rmPQy%2BuVf%2F6To0AIgf0H5ebX0%2Bt1DhK&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230926T192304Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYYCHLCD4W%2F20230926%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=f86b983326f340f62ce4a5455f34ccc230581a7a8f44d266a74152bf8854d4f5&hash=1a47a3164b9811107af215d158b808ea0561ba9a833e4658ad1ee510610ccf9e&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0031320311001233&tid=spdf-73b3669b-7711-4ae2-8024-1a98651656df&sid=30bec3965af1f544e80850e6c3dac8580543gxrqb&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=160f5750000300525556&rr=80cde11778e3bfd0&cc=pl)
    (2011). *Pattern recognition*, 44(10–11), pp. 2630–2642.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] S. Węglarczyk*,* [Kernel density estimation and its application](https://www.itm-conferences.org/articles/itmconf/pdf/2018/08/itmconf_sam2018_00037.pdf)
    (2018), ITM web of conferences, vol. 23, EDP Sciences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Han, E., Wang, S. X., Wright, J. T., Feng, Y. K., Zhao, M., Fakhouri, O.,
    Brown, J. I., Hancock, C. [Exoplanet orbit database. II. Updates to exoplanets.org](https://ui.adsabs.harvard.edu/abs/2014PASP..126..827H/abstract)
    (2014). *Publications of the Astronomical Society of the Pacific*, 126(943), 827.'
  prefs: []
  type: TYPE_NORMAL
