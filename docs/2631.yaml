- en: 'Balancing Act: Addressing Popularity Bias in Recommendation Systems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/balancing-act-addressing-popularity-bias-in-recommendation-systems-db5448c6a2a4?source=collection_archive---------3-----------------------#2023-08-18](https://towardsdatascience.com/balancing-act-addressing-popularity-bias-in-recommendation-systems-db5448c6a2a4?source=collection_archive---------3-----------------------#2023-08-18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@pratikaher?source=post_page-----db5448c6a2a4--------------------------------)[![Pratik
    Aher](../Images/5648c040ff967717c94657ebfff11e2b.png)](https://medium.com/@pratikaher?source=post_page-----db5448c6a2a4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----db5448c6a2a4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----db5448c6a2a4--------------------------------)
    [Pratik Aher](https://medium.com/@pratikaher?source=post_page-----db5448c6a2a4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc2e5b1d7be67&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbalancing-act-addressing-popularity-bias-in-recommendation-systems-db5448c6a2a4&user=Pratik+Aher&userId=c2e5b1d7be67&source=post_page-c2e5b1d7be67----db5448c6a2a4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----db5448c6a2a4--------------------------------)
    ·7 min read·Aug 18, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdb5448c6a2a4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbalancing-act-addressing-popularity-bias-in-recommendation-systems-db5448c6a2a4&user=Pratik+Aher&userId=c2e5b1d7be67&source=-----db5448c6a2a4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdb5448c6a2a4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbalancing-act-addressing-popularity-bias-in-recommendation-systems-db5448c6a2a4&source=-----db5448c6a2a4---------------------bookmark_footer-----------)![](../Images/e24e03cb4bd4c3ed79aa9a0afd068cd0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Melanie Pongratz](https://unsplash.com/@melanie_sophie?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: You woke up one morning and decided to treat yourself by buying a new pair of
    shoes. You went on your favorite sneaker website and browsed the recommendations
    given to you. One pair in particular caught your eye — you loved the style and
    design. You bought them without hesitation, excited to wear your new kicks.
  prefs: []
  type: TYPE_NORMAL
- en: When the shoes arrived, you couldn’t wait to show them off. You decided to break
    them in at an upcoming concert you were going to. However, when you got to the
    venue you noticed at least 10 other people wearing the exact same shoes! What
    were the odds?
  prefs: []
  type: TYPE_NORMAL
- en: Suddenly you felt disappointed. Even though you initially loved the shoes, seeing
    so many others with the same pair made you feel like your purchase wasn’t so special
    after all. The shoes you thought would make you stand out ended up making you
    blend in.
  prefs: []
  type: TYPE_NORMAL
- en: In that moment you vowed to never buy from that sneaker website again. Even
    though their recommendation algorithm suggested an item you liked, it ultimately
    didn’t bring you the satisfaction and uniqueness you desired. So while you initially
    appreciated the recommended item, the overall experience left you unhappy.
  prefs: []
  type: TYPE_NORMAL
- en: This highlights how recommendation systems have limitations — suggesting a “good”
    product doesn’t guarantee it will lead to a positive and fulfilling experience
    for the customer. So was it a good recommendation after all ?
  prefs: []
  type: TYPE_NORMAL
- en: Why is it crucial to measure popularity bias in recommendation systems ?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Popularity bias occurs when recommendation systems suggest a lot of items items
    that are globally popular rather than personalized picks. This happens because
    the algorithms are often trained to maximize engagement by recommending content
    that is liked by many users.
  prefs: []
  type: TYPE_NORMAL
- en: While popular items can still be relevant, relying too heavily on popularity
    leads to a lack of personalization. The recommendations become generic and fail
    to account for individual interests. Many recommendation algorithms are optimized
    using metrics that reward overall popularity. This systematic bias towards what
    is already well-liked can be problematic over time. It leads to excessive promotion
    of items that are trending or viral rather than unique suggestions. On the business
    side, popularity bias can also lead to a situation where a company has a huge
    inventory of niche, lesser-known items that go undiscovered by users, making them
    difficult to sell.
  prefs: []
  type: TYPE_NORMAL
- en: Personalized recommendations that take a specific user’s preferences into account
    can bring tremendous value, especially for niche interests that differ from the
    mainstream. They help users discover new and unexpected items tailored just for
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, a balance should be struck between popularity and personalization in
    recommendation systems. The goal should be to surface hidden gems that resonate
    with each user while also sprinkling in universally appealing content now and
    then.
  prefs: []
  type: TYPE_NORMAL
- en: How to measure popularity bias ?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Average Recommendation Popularity**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Average Recommendation Popularity (ARP) is a metric used to evaluate the popularity
    of recommended items in a list. It calculates the average popularity of the items
    based on the number of ratings they have received in the training set. Mathematically,
    ARP is calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b9e9cc7ff8d8e84706afa6016492f4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '|U_t| is the number of users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|L_u| is the number of items in the recommended list L_u for user u .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ϕ(i) is the number of times “item i” has been rated in the training set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In simple terms, ARP measures the average popularity of items in the recommended
    lists by summing up the popularity (number of ratings) of all items in those lists
    and then averaging this popularity across all users in the test set.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/afe59f7e167d45d3ba7fedb7d6ae6051.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Example: Let’s say we have a test set with 100 users |U_t| = 100\. For each
    user, we provide a recommended list of 10 items |L_u| = 10\. If item A has been
    rated 500 times in the training set (ϕ(A) =. 500), and item B has been rated 300
    times (ϕ(B) =. 300), the ARP for these recommendations can be calculated as:'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the ARP value is 8, indicating that the average popularity
    of the recommended items across all users is 8, based on the number of ratings
    they received in the training set.
  prefs: []
  type: TYPE_NORMAL
- en: The Average Percentage of Long Tail Items (APLT)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Average Percentage of Long Tail Items (APLT) metric, calculates the average
    proportion of long tail items present in recommended lists. It’s expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6ecb9e2ba22abfd3920829db88fa842.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '|Ut| represents the total number of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: u ∈ Ut signifies each user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lu represents the recommended list for user u.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Γ represents the set of long tail items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In simpler terms, APLT quantifies the average percentage of less popular or
    niche items in the recommendations provided to users. A higher APLT indicates
    that recommendations contain a larger portion of such long tail items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Let’s say there are 100 users (|Ut| = 100). For each user’s recommendation
    list, on average, 20 out of 50 items (|Lu| = 50) belong to the long tail set (Γ).
    Using the formula, the APLT would be:'
  prefs: []
  type: TYPE_NORMAL
- en: APLT = Σ (20 / 50) / 100 = 0.4
  prefs: []
  type: TYPE_NORMAL
- en: So, the APLT in this scenario is 0.4 or 40%, implying that, on average, 40%
    of items in the recommended lists are from the long tail set.
  prefs: []
  type: TYPE_NORMAL
- en: The Average Coverage of Long Tail items (ACLT)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Average Coverage of Long Tail items (ACLT) metric evaluates the proportion
    of long-tail items that are included in the overall recommendations. Unlike APLT,
    ACLT considers the coverage of long-tail items across all users and assesses whether
    these items are effectively represented in the recommendations. It’s defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: ACLT = Σ Σ 1(i ∈ Γ) / |Ut| / |Lu|
  prefs: []
  type: TYPE_NORMAL
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '|Ut| represents the total number of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: u ∈ Ut signifies each user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lu represents the recommended list for user u.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Γ represents the set of long-tail items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1(i ∈ Γ) is an indicator function equal to 1 if item i is in the long tail set
    Γ, and 0 otherwise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In simpler terms, ACLT calculates the average proportion of long-tail items
    that are covered in the recommendations for each user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Let’s say there are 100 users (|Ut| = 100) and a total of 500 long-tail
    items (|Γ| = 500). Across all users’ recommendation lists, there are 150 instances
    of long-tail items being recommended (Σ Σ 1(i ∈ Γ) = 150). The total number of
    items across all recommendation lists is 3000 (Σ |Lu| = 3000). Using the formula,
    the ACLT would be:'
  prefs: []
  type: TYPE_NORMAL
- en: ACLT = 150 / 100 / 3000 = 0.0005
  prefs: []
  type: TYPE_NORMAL
- en: So, the ACLT in this scenario is 0.0005 or 0.05%, indicating that, on average,
    0.05% of long-tail items are covered in the overall recommendations. This metric
    helps assess the coverage of niche items in the recommender system.
  prefs: []
  type: TYPE_NORMAL
- en: How to fix reduce popularity bias in a recommendation system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Popularity Aware Learning**'
  prefs: []
  type: TYPE_NORMAL
- en: This idea takes inspiration from [Position Aware Learning](https://www.researchgate.net/publication/335771749_PAL_a_position-bias_aware_learning_framework_for_CTR_prediction_in_live_recommender_systems)
    (PAL) where the approach is to rank suggests asking your ML model to optimize
    both ranking relevancy and position impact at the same time. We can use the same
    approach with popularity score, this score can any of the above mentioned scores
    like Average Recommendation Popularity.
  prefs: []
  type: TYPE_NORMAL
- en: On training time, you use item popularity as one of the input features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the prediction stage, you replace it with a constant value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/0f733eace60b4349fe82def52c50931b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: xQUAD Framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One interesting method to fix popularity bias is to use something called at
    xQUAD Framework. It takes a long list of recommendations (R) along with probability/likelihood
    scores from your current model, and builds a new list (S) which is a lot more
    diverse, where |S| < |R|. The diversity of this new list is controlled by a hyper-parameter
    λ.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have tried to wrap the logic of the framework :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f558fbdac473f2e7e97fc8b3be1bde60.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We calculate a score for all documents in set R. We take the document with the
    maximum score and add it to set S and at the same time we remove it from set R.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d176c4039609b8a638cf987cd188765.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd8c15c849f96f23af3e0c9b0573acc9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: To select next item to add to ‘S’, we compute the store for each item in R\S
    (R excluding S). For every item selected for adding to “S”, P(v/u) goes up so
    the chance of a non-popular item getting picked up again also goes up.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this content, find me on [linkedin](https://www.linkedin.com/in/pratikdaher/)
    :).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://arxiv.org/pdf/1901.07555.pdf](https://arxiv.org/pdf/1901.07555.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.ra.ethz.ch/cdstore/www2010/www/p881.pdf](https://www.ra.ethz.ch/cdstore/www2010/www/p881.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.analyticsvidhya.com/blog/2023/03/how-to-overcome-position-bias-in-recommendation-and-search/?source=post_page-----db5448c6a2a4--------------------------------)
    [## How to Overcome Position Bias in Recommendation and Search?'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will talk about overcoming position bias with Inverse Propensity
    Weighting and downsides of such…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.analyticsvidhya.com](https://www.analyticsvidhya.com/blog/2023/03/how-to-overcome-position-bias-in-recommendation-and-search/?source=post_page-----db5448c6a2a4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
