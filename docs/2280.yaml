- en: 'The Underrated Gems Pt.1: 8 Pandas Methods That Will Make You a Pro'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/the-underrated-gems-pt-1-8-pandas-methods-that-will-make-you-a-pro-b1437a19ca3c?source=collection_archive---------0-----------------------#2023-07-17](https://towardsdatascience.com/the-underrated-gems-pt-1-8-pandas-methods-that-will-make-you-a-pro-b1437a19ca3c?source=collection_archive---------0-----------------------#2023-07-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Underrated, underappreciated, and underexplored
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@andreas030503?source=post_page-----b1437a19ca3c--------------------------------)[![Andreas
    Lukita](../Images/8660ca1fea5da34ce3475281c1f52152.png)](https://medium.com/@andreas030503?source=post_page-----b1437a19ca3c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b1437a19ca3c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b1437a19ca3c--------------------------------)
    [Andreas Lukita](https://medium.com/@andreas030503?source=post_page-----b1437a19ca3c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F955ef38ea7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-underrated-gems-pt-1-8-pandas-methods-that-will-make-you-a-pro-b1437a19ca3c&user=Andreas+Lukita&userId=955ef38ea7b&source=post_page-955ef38ea7b----b1437a19ca3c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b1437a19ca3c--------------------------------)
    ¬∑10 min read¬∑Jul 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb1437a19ca3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-underrated-gems-pt-1-8-pandas-methods-that-will-make-you-a-pro-b1437a19ca3c&user=Andreas+Lukita&userId=955ef38ea7b&source=-----b1437a19ca3c---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb1437a19ca3c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-underrated-gems-pt-1-8-pandas-methods-that-will-make-you-a-pro-b1437a19ca3c&source=-----b1437a19ca3c---------------------bookmark_footer-----------)![](../Images/dfa5d2a3776475bd5e3957104b82b7ae.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Roman Kraft](https://unsplash.com/@iamromankraft?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúAmidst the noise of the crowd, it‚Äôs the softly spoken words that hold the hidden
    wisdom üíé‚Äù
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Forget ChatGPT for a while. For some of us, we get tired by constantly googling
    for solution every time we want to perform a simple Pandas operation. There seems
    to be numerous ways of doing the same thing, which is which? Having lots of possible
    solution to choose from is of course great, but with it also comes inconsistency
    and confusion in understanding what the line of code is supposed to do.
  prefs: []
  type: TYPE_NORMAL
- en: There‚Äôs 1000 possible routes to reach Rome, maybe even more. The question is,
    do you travel the hidden shortcut or do you take the complicated route?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fae6c5a44fa88fad591aaa9d53e554e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Here is the takeaway of this post. I‚Äôll walk you through how to put these methods
    to practical use by working through the [bike sharing dataset from UCI Machine
    Learning](https://doi.org/10.24432/C5W894)[¬π](#aba8). By adopting these methods,
    you‚Äôll not only streamline your data manipulation code, but also gain a deeper
    understanding of the code you write. Let‚Äôs get started by importing the dataset
    and can a quick view on the DataFrame!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eb8d9b78b58f0bee83d63227051d66d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of Contents**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Method #1:](#b318) `[**.assign()**](#b318)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method #2:](#987c) `[**.groupby()**](#987c)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method #3:](#e599) `[**.agg()**](#e599)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method #4:](#399c) `[**.transform()**](#399c)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method #5:](#5c03) `[**.pivot_table()**](#5c03)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method #6:](#0c9c) `[**.resample()**](#0c9c)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method #7:](#8974) `[**.unstack()**](#8974)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method #8:](#6079) `[**.pipe()**](#6079)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #1: .assign()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forget about using operations such as `**df["new_col"] =**` and `**df.new_col
    =**` to create new columns. Here is why you should be using the `**.assign()**`
    method ‚Äî it returns you a DataFrame object, which allows you to continue your
    chaining operation to further manipulate your DataFrame. Unlike the `**.assign()**`
    method, the two infamous operation above return you a `None` which means you cannot
    possibly chain your operation further.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not convinced, then let me bring back the old nemesis ‚Äî `**SettingWithCopyWarning**`.
    Pretty sure each of us has bumped into this one at some point in time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f972812fa73304ae581315e1660cd13a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Enough of the warning, I want to unsee ugly red boxes in my notebook!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using `**.assign()**`, let us add a few new columns such as `**ratio_casual_registered**`,
    `**avg_temp**`, and `**ratio_squared**`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In short, here‚Äôs what the method above does:'
  prefs: []
  type: TYPE_NORMAL
- en: We can create as many new columns as we want using the `**.assign()**` method,
    separated by the delimiter comma.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The lambda function when creating the column `**ratio_squared**` serves to get
    access to the most recent DataFrame after we added the column `**ratio_casual_registered**`.
    Say, we do not use a lambda function to get access to the most recent DataFrame
    `**df_**`, but instead continue with `**bike.ratio_casual_registered.pow(2)**`,
    we would get an error as the original DataFrame does not have the column `**ratio_casual_registered**`,
    even after adding it in the `**.assign()**` method before creating `**ratio_squared**`.
    If you can‚Äôt wrap your head around this concept to decide whether or not to use
    lambda function, my suggestion is just use one!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bonus! I leave some not-so-common way to perform arithmetic operations using
    methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #2: .groupby()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, the `**.groupby()**` method is not uncommonly used, but they are necessary
    to get us started before we delve deeper into the next methods. One thing that
    often goes unnoticed and left unspoken of is that the the `**.groupby()**` method
    has a lazy nature. By that, it means that the method is lazily evaluated. In other
    words, it does not evaluate right away, that is why you often see `**<pandas.core.groupby.generic.DataFrameGroupBy
    object at 0x14fdc3610>**` right after calling the method `**.groupby()**`
  prefs: []
  type: TYPE_NORMAL
- en: From Pandas DataFrame [documentation](https://pandas.pydata.org/docs/reference/frame.html)[¬≤](#f249),
    the value to feed in the parameter `**by**` could be a ***mapping, function, label,
    pd.Grouper or list of such.*** Nonetheless, the most common one you probably encounter
    is to group by columns names (list of Series name separated by comma). After the
    `**.groupby()**` operation, we could perform operation such as `**.mean()**`,
    `**.median()**`, or applying custom function using `**.apply()**`.
  prefs: []
  type: TYPE_NORMAL
- en: The value of the specified columns that we feed into the `**by**` parameters
    in the `**.groupby()**` method would become the index of the result. If we specify
    grouping more than 1 column, then we will obtain a MultiIndex.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we grouped our DataFrame by the column `**season**`, and `**weathersit**`.
    Then, we calculate the mean value and subset only the column `**atemp**`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b9321d008606497cf39b9bdcda719e00.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #3: .agg()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are meticulous enough to dig the Pandas [documentation](https://pandas.pydata.org/docs/reference/frame.html)[¬≤](#f249),
    you might encounter both methods `**.agg()**` and `**.aggregate()**`. You might
    be wondering what is the difference and when to use which? Save your time! They
    are the same, `**.agg()**` is merely an alias for `**.aggregate()**`.
  prefs: []
  type: TYPE_NORMAL
- en: '`**.agg()**` has a parameter `**func**`, which literally takes in a function,
    string function name, or list of functions. By the way, you can aggregate different
    functions over the columns as well! Let‚Äôs continue our example above!'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3a7641b468ffb53f978a9bd105544194.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #4: .transform()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With `**.agg()**`, the result we obtain is of reduced dimensionality as compared
    to the initial dataset. In simple terms, your data dimension shrinks with lesser
    number of rows and columns, containing the aggregate information. If what you
    want is to summarize the grouped data and obtain aggregated values, then `**.groupby()**`
    is the solution.
  prefs: []
  type: TYPE_NORMAL
- en: With `**.transform()**`, we also start with the intention of doing aggregation
    of information. However, instead of creating a summary of information, we want
    the output to have the same shape as the original DataFrame, without shrinking
    the size of the original DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Those of you who have exposure to database systems like SQL may find the idea
    behind `**.transform()**` similar to that of Window Function. Let‚Äôs see how `**.transform()**`
    works on the above example!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/57cfdf8e60580a2e42ea2ac46196f4d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: As seen above, we created a new column with column name‚Äî`**mean_atemp_season**`
    where we fill in the column with the aggregate (mean) of the `**atemp**` column.
    Thus, whenever `**season**` is 1, then we have the same value for `**mean_atemp_season**`.
    Notice the important observation here is that we retain the original dimension
    of the dataset plus one additional column!
  prefs: []
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #5: .pivot_table()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here‚Äôs a bonus for those obsessed with Microsoft Excel. You might be tempted
    to use `**.pivot_table()**` to create summary table. Well of course, this method
    works too! But here‚Äôs a two cent, `**.groupby()**` is more versatile and used
    for a broader range of operations beyond just reshaping, such as filtering, transformation,
    or applying group-specific calculations.
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs how to use `**.pivot_table()**` in short. You specify the column(s) you
    want to aggregate in the argument `**values**`. Next, specify the **index** of
    the summary table you want to create using a subset of the original DataFrame.
    This can be more than one column and the summary table will be DataFrame of MultiIndex.
    Next, specify the **columns** of the summary table you want to create using a
    subset of the original DataFrame that has not been selected as the index. Last
    but not least, don‚Äôt forget to specify the `**aggfunc**`! Let‚Äôs take a quick look!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b2cc556fc524085340ac327e66b94545.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #6: .resample()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Roughly speaking, the method `**.resample()**` can be viewed as grouping and
    aggregation specifically for time-series data, where
  prefs: []
  type: TYPE_NORMAL
- en: The index of the DataFrame or Series is a datetime-like object.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This allows you to group and aggregate data based on different time frequencies,
    such as hourly, daily, weekly, monthly, etc. More generally, `**.resample()**`
    can take in **DateOffset, Timedelta or str**as the rule to perform resampling.
    Let‚Äôs apply this to our previous example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In short, what we do above is drop the column `**instant**`, overwrite the `**dteday**`
    column with the `**dteday**` column being converted from `object` type to `**datetime64[ns]**`
    type, and finally setting this `**datetime64[ns]**` column as the index of the
    DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a33370ebfd03d27d90be81dedbadff8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1a857d820fb1f9834a0da75717f63f95.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Here, we obtain a descriptive statistics summary (mean) of the feature `**temp**`
    with monthy frequency. Try and play with the `**.resample()**` method using differency
    frequency such as `**Q**`, `**2M**`, `**A**` and so on,
  prefs: []
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #7: .unstack()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are nearing the end! Let me show you why `**.unstack()**` is both powerful
    and useful. But before that, let‚Äôs get back to one of the example above where
    we want to find the mean temperature across different season and weather situation
    by using `**.groupby()**` and `**.agg()**`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6be4039549c302e00b1da416acef33cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, let‚Äôs visualise this using a line chart produced minimally by chaining
    the methods `**.plot**` and `**.line()**` to the code above. Behind the scene,
    Pandas leverages on Matplotlib plotting backend to do the plotting task. This
    gives the following result, which none of us wanted since the x-axis of the plot
    is grouped by the MultiIndex, making it more difficult to interpret and less meaningful.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3654c1d2def7e557a794dec007f3016b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Compared the plot above and below after we introduce the `**.unstack()**` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/de2067fddba9d0e6526b58bb11ac7515.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In short, what the method `**.unstack()**` does is to unstack the inner most
    index of the MultiIndex DataFrame, which in this case, is `**weathersit**`. This
    so-called un-stacked index becomes the columns of the new DataFrame, which allows
    our plotting of line plot to give more meaningful outcome for comparison purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6892843a34315addb39ca843d2dbd08c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: You can also unstack the outer-most index instead of the inner-most index of
    the DataFrame, by specifying the argument `**level=0**` as part of the `**.unstack()**`
    method. Let‚Äôs see how we can achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fcaeb87f0b7cd880bda70f0a457b75a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c938f38c42c3371f16f5bb6040b6f3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '‚òïÔ∏è Method #8: .pipe()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From my observation, you almost never see common folks implement this method
    in their Pandas code when you search online. For one reason, `**.pipe()**` somehow
    has its own mysterious unexplainable aura that makes it not friendly to beginners
    and intermediates-alike. When you go to Pandas [documentation](https://pandas.pydata.org/docs/reference/frame.html)[¬≤](#f249),
    the short explanation you will find is ***‚ÄúApply chainable functions that expect
    Series or DataFrames‚Äù***. I think this explanation is a little confusing and not
    really helpful, provided if you have never work with chaining before.
  prefs: []
  type: TYPE_NORMAL
- en: In short, what `**.pipe()**` offers you is the ability to continue your method
    chaining technique using a function, in the event where you can‚Äôt manage to find
    a straightforward solution to perform an operation to return a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: The method `**.pipe()**` takes in a function, by that, you can define a method
    outside the chain and then refer to the method as an argument to the `**.pipe()**`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: With `.pipe()`, you can pass a DataFrame or Series as the first argument to
    a custom function, and the function will be applied to the object being passed,
    followed by any additional arguments specified afterwards.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most of the time, you will see a one-liner lambda function inside the `**.pipe()**`
    method for the purpose of convenience (i.e. get access to the most recent DataFrame
    after some modification steps in the chaining process).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me illustrate using a simplified example. Let‚Äôs say we want to get insights
    on the following question: ***‚ÄúFor the year 2012, what is the proportion of working
    day per season, relative to the total working day of that year?‚Äù***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use `**.pipe()**` to inject function into our chaining method. Since
    after performing `**.agg(sum)**`, we cannot just continue chaining with `**.div()**`,
    the following code will not work since we lost access to the latest state of the
    DataFrame after some modification through the chaining process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Tips: If you can‚Äôt find a way to continue chaining your methods, try think
    of how `.pipe()` can help! Most of the time, it will!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Afterword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That wraps up the first part of The Underrated Gems üíé! They are all methods
    that I didn‚Äôt use as much before, perhaps due to my bad habit of brute-forcing
    my code with the thinking that ‚ÄúAs long as it works, it‚Äôs good enough!‚Äù Unfortunately,
    it‚Äôs not!
  prefs: []
  type: TYPE_NORMAL
- en: Only after I spend time to learn how to use them properly, they prove to be
    lifesaving, to say the least! I also want to thank Matt Harrison and his book
    [Effective Pandas](https://store.metasnake.com/effective-pandas-book)[¬≥](#deae)
    which completely changes the way I write my Pandas code. Now, I can say my code
    is more concise, readable, and just makes more sense.
  prefs: []
  type: TYPE_NORMAL
- en: In Part 2 of The Underrated Gems, we are going to touch on another eight lesser-known
    Pandas methods such as `**.explode()**`, `**.melt()**`, and `**.expanding()**`!
    You probably won‚Äôt use them as much but they certainly come in handy at the moment
    you need them.
  prefs: []
  type: TYPE_NORMAL
- en: If you pick up something useful from this article, do consider giving me a [***Follow***](https://medium.com/@andreas030503)
    on Medium. Easy, 1 article a week to keep yourself updated and stay ahead of the
    curve!
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*LinkedIn*](https://www.linkedin.com/in/andreaslukita7/)üëî'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Twitter*](https://twitter.com/andreaslukita7)üñä'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fanaee-T, Hadi. (2013). Bike Sharing Dataset. UCI Machine Learning Repository.
    [https://doi.org/10.24432/C5W894](https://doi.org/10.24432/C5W894).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pandas Documentation: [https://pandas.pydata.org/docs/reference/frame.html](https://pandas.pydata.org/docs/reference/frame.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Effective Pandas by Matt Harrison: [https://store.metasnake.com/effective-pandas-book](https://store.metasnake.com/effective-pandas-book)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
