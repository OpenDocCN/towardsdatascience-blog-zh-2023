["```py\n#generic data analysis \nimport os\nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport missingno as msno\n```", "```py\n#Preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\n# Models\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Reporting\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n```", "```py\n#joining collision data to beat data - inner join\ncollisions = collision_raw.merge(beat_data, how='inner',\n                                 left_on='beat_of_occurrence',\n                                 right_on='BEAT_NUM'\n                                 )\n```", "```py\n#visualising missing data\n#sorting values by report received date\n\ncollisions = collisions.sort_values(by='crash_date', ascending=True)\n\n#plotting matrix of missing data\nmsno.matrix(collisions)\nplt.show()\n\n#info of sorted data\nprint(collisions.info())\n```", "```py\n#defining unnecessary columns\ndrop_cols = ['location', 'crash_date_est_i','report_type', 'intersection_related_i',\n       'hit_and_run_i', 'photos_taken_i', 'crash_date_est_i', 'injuries_unknown',\n       'private_property_i', 'statements_taken_i', 'dooring_i', 'work_zone_i',\n       'work_zone_type', 'workers_present_i','lane_cnt','the_geom','rd_no',\n            'SECTOR','BEAT','BEAT_NUM']\n\n#dropping columns\ncollisions=collisions.drop(columns=drop_cols)\n\n#plotting matrix of missing data\nmsno.matrix(collisions)\nplt.show()\n\n#info of sorted data\nprint(collisions.info())\n```", "```py\n#Some incorrect lat/long data - need to remove these rows\ncollisions = collisions[collisions['longitude']<-80]\ncollisions = collisions[collisions['latitude']>40]\n```", "```py\n#plotting histograms of numerical values\ncollisions.hist(bins=50,figsize=(16,12))\nplt.show()\n```", "```py\n#scaling latitude and longitude data\nscaler = StandardScaler()\n\n# Logarithmic transformation on longitude\ncollisions_ml['neg_log_longitude'] = scaler.fit_transform(np.log1p(-collisions_ml['longitude']).\n                                                          values.reshape(-1,1))\n\n# Normalisation on latitude\ncollisions_ml['norm_latitude'] = scaler.fit_transform(np.log1p(collisions['latitude']).\n                                                      values.reshape(-1, 1))\n```", "```py\n#transforming crash_hour \n#data is cyclic, can be encoded using trig transforms\n\n#trig transformation - sin(crash_hr)\ncollisions_ml['sin_hr'] = np.sin(2*np.pi*collisions_ml['crash_hour']/24)\n```", "```py\n#drop previous latitude/longitude columns\nlat_long_drop_cols = ['longitude','latitude']\ncollisions_ml.drop(lat_long_drop_cols,axis=1,inplace=True)\n\n#drop crash_hour column\ncollisions_ml.drop('crash_hour',axis=1,inplace=True)\n```", "```py\n#segmenting columns into lists\nml_cols = ['posted_speed_limit','traffic_control_device', 'device_condition', 'weather_condition',\n          'lighting_condition', 'first_crash_type', 'trafficway_type','alignment', \n           'roadway_surface_cond', 'road_defect', 'crash_type','damage','prim_contributory_cause',\n          'sec_contributory_cause','street_direction','num_units', 'DISTRICT',\n          'crash_hour','crash_day_of_week','latitude', 'longitude']\ncat_cols = ['traffic_control_device', 'device_condition', 'weather_condition', 'DISTRICT',\n           'lighting_condition', 'first_crash_type', 'trafficway_type','alignment',\n           'roadway_surface_cond', 'road_defect', 'crash_type','damage','prim_contributory_cause',\n           'sec_contributory_cause','street_direction','num_units']\n\n#making a copy of the dataset\ncollisions_ml = collisions[ml_cols].copy()\n\n#encoding categorical values\nlabel_encoder = LabelEncoder()\nfor col in collisions_ml[cat_cols].columns:\n    collisions_ml[col] = label_encoder.fit_transform(collisions_ml[col])\n```", "```py\n#Create test set\n#setting X and y values\n\nX = collisions_ml.drop('crash_type', axis=1)\ny = collisions_ml['crash_type']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```", "```py\n#Classifier - K Nearest Neighbours\n#instantiate KNN Classifier\nKNNClassifier = KNeighborsClassifier(n_neighbors=3, metric = 'euclidean')\n\nKNNClassifier.fit(X_train,y_train)\n```", "```py\n#Predictions\n#predict on training set\ny_train_pred = KNNClassifier.predict(X_train)\n\n#predict on test data\ny_test_pred = KNNClassifier.predict(X_test)\n```", "```py\n#Evaluate model\n# Calculate the accuracy of the model\n\n#calculating accuracy of model on training data\ntrain_accuracy = accuracy_score(y_train, y_train_pred)\n\n#calculating accuracy of model on test data\ntest_accuracy = accuracy_score(y_test, y_test_pred)\n\n#computing f1 score,precision,recall\nf1 = f1_score(y_test, y_test_pred)\nprecision = precision_score(y_test,y_test_pred)\nrecall = recall_score(y_test,y_test_pred)\n\n#comparing performances\nprint(\"Training Accuracy:\", train_accuracy)\nprint(\"Test Accuracy:\", test_accuracy)\nprint(\"Train-Test Accuracy Difference:\", train_accuracy-test_accuracy)\n\n#print precision score\nprint(\"Precision Score:\", precision)\n\n#print recall score\nprint(\"Recall Score:\", recall)\n\n#print f1 score\nprint(\"F1 Score:\", f1)\n```", "```py\n#Fine tuning (RandomisedSearchCV)\n# Define parameter grid\nparam_grid = {\n    'n_neighbors': [3, 7, 10],\n    'metric': ['euclidean','manhattan']\n}\n\n# instantiate RandomizedSearchCV\nrandom_search = RandomizedSearchCV(estimator=KNeighborsClassifier(), param_distributions=param_grid, cv=5)\n\n# fit to training data\nrandom_search.fit(X_train, y_train)\n\n# Retrieve best model and performance\nbest_classifier = random_search.best_estimator_\nbest_accuracy = random_search.best_score_\n\nprint(\"Best Accuracy:\", best_accuracy)\nprint(\"Best Model:\", best_classifier)\n```", "```py\n#Classifier - K Nearest Neighbours\n#instantiate KNN Classifier\nKNNClassifier = KNeighborsClassifier(n_neighbors=10, metric = 'manhattan')\n\nKNNClassifier.fit(X_train,y_train)\n```"]