- en: How to Build a Custom Labeler in Python with IPyWidgets and Plotly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用IPyWidgets和Plotly在Python中构建自定义标注工具
- en: 原文：[https://towardsdatascience.com/how-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc?source=collection_archive---------21-----------------------#2023-01-10](https://towardsdatascience.com/how-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc?source=collection_archive---------21-----------------------#2023-01-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc?source=collection_archive---------21-----------------------#2023-01-10](https://towardsdatascience.com/how-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc?source=collection_archive---------21-----------------------#2023-01-10)
- en: Create a segmentation tool in a Jupyter environment
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Jupyter环境中创建一个分割工具
- en: '[](https://medium.com/@jacky.kaub?source=post_page-----f6cc1fd7e3cc--------------------------------)[![Jacky
    Kaub](../Images/e66c699ee5a9d5bbd58a1a72d688234a.png)](https://medium.com/@jacky.kaub?source=post_page-----f6cc1fd7e3cc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f6cc1fd7e3cc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f6cc1fd7e3cc--------------------------------)
    [Jacky Kaub](https://medium.com/@jacky.kaub?source=post_page-----f6cc1fd7e3cc--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jacky.kaub?source=post_page-----f6cc1fd7e3cc--------------------------------)[![Jacky
    Kaub](../Images/e66c699ee5a9d5bbd58a1a72d688234a.png)](https://medium.com/@jacky.kaub?source=post_page-----f6cc1fd7e3cc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f6cc1fd7e3cc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f6cc1fd7e3cc--------------------------------)
    [Jacky Kaub](https://medium.com/@jacky.kaub?source=post_page-----f6cc1fd7e3cc--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7ccb7065ef90&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc&user=Jacky+Kaub&userId=7ccb7065ef90&source=post_page-7ccb7065ef90----f6cc1fd7e3cc---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f6cc1fd7e3cc--------------------------------)
    ·11 min read·Jan 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff6cc1fd7e3cc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc&user=Jacky+Kaub&userId=7ccb7065ef90&source=-----f6cc1fd7e3cc---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7ccb7065ef90&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc&user=Jacky+Kaub&userId=7ccb7065ef90&source=post_page-7ccb7065ef90----f6cc1fd7e3cc---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f6cc1fd7e3cc--------------------------------)
    ·11分钟阅读·2023年1月10日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff6cc1fd7e3cc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc&user=Jacky+Kaub&userId=7ccb7065ef90&source=-----f6cc1fd7e3cc---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6cc1fd7e3cc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc&source=-----f6cc1fd7e3cc---------------------bookmark_footer-----------)![](../Images/a47b2b2f32879bd5ccc1adbd9766dfb0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff6cc1fd7e3cc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-a-custom-labeler-in-python-with-ipywidgets-and-plotly-f6cc1fd7e3cc&source=-----f6cc1fd7e3cc---------------------bookmark_footer-----------)![](../Images/a47b2b2f32879bd5ccc1adbd9766dfb0.png)'
- en: Glomerulli segmented from kidney. Original images provided by the [HuBMAP’s
    tissue mapping center](https://medschool.vanderbilt.edu/biomic/) at Vanderbilt
    University
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从肾脏中分割出的肾小球。原始图像由[HuBMAP组织映射中心](https://medschool.vanderbilt.edu/biomic/) 提供，来自范德堡大学
- en: Did you know that you can turn a simple **Jupyter Notebook** into **a** powerful
    labeler in a few line of codes ?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？你可以在几行代码内将一个简单的**Jupyter Notebook** 转变成**一个**强大的标注工具。
- en: Turning a simple notebook to a labeling tool can be really time saving at the
    beginning of a project when you are still trying to assess the potential of an
    idea and you don’t want to spend much in building a robust web app.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个简单的笔记本转变为标注工具在项目开始时可以节省大量时间，尤其是在你还在评估一个想法的潜力，并且不想在构建一个稳定的网页应用上花费太多时。
- en: In this article I will show you how to build a segmentation tool with **plotly**
    and **ipywidget** to generate binary masks out of images in python. In image segmentation,
    binary masks can be used to train deep learning models to efficiently recognize
    and isolate area of interest automatically.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将向你展示如何使用**plotly**和**ipywidget**构建一个分割工具，以生成python中图像的二进制掩模。在图像分割中，二进制掩模可以用于训练深度学习模型，以高效地自动识别和隔离感兴趣区域。
- en: I assume that you are already familiar with the basis of combining ipywidgets
    and plotly. If this is not the case, I strongly recommend having a look first
    at [this article](https://medium.com/@jacky.kaub/build-custom-widgets-with-ipywidgets-and-plotly-a454cb3b2b4f)
    where we go through the basics.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经熟悉ipywidgets和plotly的基础知识。如果不是，我强烈建议你先查看[这篇文章](https://medium.com/@jacky.kaub/build-custom-widgets-with-ipywidgets-and-plotly-a454cb3b2b4f)，我们将介绍基础知识。
- en: A word about the usecase
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于用例的一句话
- en: I am using the [HuBMAP dataset](https://www.kaggle.com/competitions/hubmap-kidney-segmentation/data)
    from a Kaggle competition hosted in 2021.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用[HuBMAP数据集](https://www.kaggle.com/competitions/hubmap-kidney-segmentation/data)，这是一个2021年在Kaggle上举办的竞赛中的数据集。
- en: 'I chose this dataset as it illustrates perfectly real life applications: a
    client reach out to you with a bunch of images and asks if you could find a way
    to automatically isolate within those images specific areas of interests. Those
    areas(in this example) are called glomeruli, tiny parts of the kidney that helps
    to filter out waste and extra water from the blood, see the illustration below.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择这个数据集，因为它完美地展示了现实生活中的应用：一个客户联系你，提供一堆图像，并询问你是否可以找到一种方法来自动隔离这些图像中的特定感兴趣区域。这些区域（在这个例子中）被称为肾小体，是肾脏中帮助过滤血液中废物和多余水分的小部分，见下图。
- en: 'The illustration below shows what your customer is expected here: a model to
    quickly identify those areas of interest.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了你的客户在这里的期望：一个能够快速识别那些感兴趣区域的模型。
- en: '![](../Images/075e02aa0858e1ed84f463e96c2de637.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/075e02aa0858e1ed84f463e96c2de637.png)'
- en: 'Project objective: providing segmented area of the kidney images. Original
    images provided by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 项目目标：提供肾脏图像的分割区域。原始图像由[HuBMAP组织映射中心](https://medschool.vanderbilt.edu/biomic/)提供，位于范德比尔特大学。
- en: In exploration phases, time is of the essence. Often, we only have access to
    raw data and need to quickly generate labels to train and evaluate a model and
    assess the feasibility of the project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索阶段，时间至关重要。通常，我们只有原始数据，并需要快速生成标签来训练和评估模型，并评估项目的可行性。
- en: Instead of spending hours searching for an open-source tool that may still require
    customization, I will guide you through building your own custom tool. You’ll
    see that with a bit of effort, you can easily create any type of widget to aid
    in your daily tasks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与其花费数小时寻找可能仍需定制的开源工具，不如跟随我一步步构建你自己的自定义工具。你会发现，只需一点努力，你就可以轻松创建任何类型的部件来帮助你的日常任务。
- en: Building the widget technical specifications
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建部件的技术规格
- en: 'Before jumping directly to the coding part, we need to take a step back and
    think about what we want exactly from our widget. Among the questions we need
    to answer:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在直接进入编码部分之前，我们需要退一步，考虑一下我们到底希望从我们的部件中得到什么。我们需要回答的问题包括：
- en: What is the format of the inputs ? Are they jpeg images ? Numpy array ? rasters
    ? etc..
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入的格式是什么？是jpeg图像吗？Numpy数组？栅格？等等。
- en: Where are they stored ? Locally ? In multiple area ? Or even in the cloud ?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们存储在哪里？本地？多个区域？还是在云端？
- en: What are you expecting as an output ? Another jpeg images or numpy array ? Maybe
    annotations stored in a json ?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你期望的输出是什么？另一个jpeg图像还是numpy数组？也许是存储在json中的注释？
- en: What are the interactions you are expecting ? Clicking in a button do to something,
    having some UI elements to navigate efficiently from data to data, interacting
    directly with a figure, etc…
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你期望的交互是什么？点击按钮做某事，具有一些UI元素以有效地从数据到数据导航，直接与图形交互，等等。
- en: For each interaction, how, practically will you manage it ? How this will affect
    the inner state of the widget ?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每次交互，实际操作中你将如何管理？这将如何影响部件的内部状态？
- en: Try to draw somewhere, even on paper, the way you want your widget to looks
    like. This will help you structure your widget’s layout.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在某处（即使是在纸上）绘制你希望你的部件看起来的样子。这将帮助你结构化部件的布局。
- en: 'In our case:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中：
- en: I assume that the main images are already divided into 256x256 pixels sub-images
    and stored as .npy files in an imgs/ folder locally.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设主要图像已经被分割成 256x256 像素的子图像，并存储为 .npy 文件在本地的 imgs/ 文件夹中。
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The generated masks will be stored in the masks/ folder, also as .npy, with
    the same name as the original image.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的掩膜将存储在 masks/ 文件夹中，格式为 .npy，文件名与原始图像相同。
- en: 'Among the functionalities desired by our tool:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工具所需的功能包括：
- en: 'The widget will display two figures: the raw image with a transparent overlay
    of the mask (work ongoing), and the currently saved mask, that will allow a user
    to visualize the current work done and complete it if required.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件将显示两个图像：一个是带有掩膜透明覆盖的原始图像（正在进行中），另一个是当前保存的掩膜，这将允许用户可视化当前完成的工作，并在需要时完成它。
- en: A user can click multiple times on the image to generate a polygon defining
    an area. This will be used inside the widget to generate a mask with 0 for pixels
    outside of the area, and 1 for pixels inside.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以多次点击图像以生成定义区域的多边形。这将在小部件内用于生成一个掩膜，其中区域外的像素为0，区域内的像素为1。
- en: A button should be used to save the mask when the user is happy with its label,
    so that the result is stored and can be retrieved by him or another service (like
    a deep learning modele)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用一个按钮来保存掩膜，当用户对其标签感到满意时，这样结果就会被存储并可以由他或其他服务（如深度学习模型）检索。
- en: A button should be used to delete the current polygon, which will be convenient
    to fix drawing mistakes.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用一个按钮来删除当前的多边形，这将方便修复绘图错误。
- en: A button should be used to reset the locally saved mask, allowing to revert
    to the original state if needed without having to delete the mask manually.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用一个按钮来重置本地保存的掩膜，允许在需要时恢复到原始状态，而不必手动删除掩膜。
- en: The user can navigate from image to image via a dropdown menu
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以通过下拉菜单在图像之间导航
- en: '![](../Images/b7679ccbba9d3ebc483e098f4ebca07b.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b7679ccbba9d3ebc483e098f4ebca07b.png)'
- en: A rough view of the widget layout that we want to achieve. Original images provided
    by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望实现的小部件布局的粗略视图。原始图像由 [HuBMAP组织组织](https://medschool.vanderbilt.edu/biomic/)
    提供，来自范德比尔特大学
- en: Building the widget
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建小部件
- en: Some good practices before starting
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始之前的一些良好实践
- en: I recommend you to build your widget within a custom Class. That will facilitate
    your life in term of state management as everything will be held internally, and
    be way easier to package.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你在自定义类中构建你的小部件。这将方便你在状态管理方面，因为所有内容都将保留在内部，并且更容易打包。
- en: Also, as a general advice,you should build the main layout first, and build
    the interactions only in a second phase.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，作为一般建议，你应该先构建主要布局，然后在第二阶段再构建交互功能。
- en: Finally, keep things as much separated as possible ! It does not cost more to
    create a dedicated function for creating each button, or a function to handle
    separately each callback, but it might save you a precious time for testing and
    debugging.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尽量将各部分分开！创建每个按钮的专用函数或单独处理每个回调的函数不会增加额外的成本，但可能会为测试和调试节省宝贵的时间。
- en: 'To summarize, for building efficiently all kind of widgets:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，为了高效构建各种小部件：
- en: Create a class to hold all the internal states used in the widget
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类来保存小部件中使用的所有内部状态
- en: Build functions to initialize the figures and the components, without interactions
    in a first phase
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建初始化图像和组件的函数，在第一阶段没有交互
- en: Add the interactions and test them step by step
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加交互并逐步测试
- en: Keep your code clean and organized
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持代码整洁有序
- en: Widget internal state logic
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小部件内部状态逻辑
- en: 'Our widget needs to keeps in memory and modify several information:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小部件需要保持并修改多个信息：
- en: The _current_id is used to store the current name of the image and is also use
    to access and save the binary mask.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: _current_id 用于存储当前图像的名称，同时也用于访问和保存二进制掩膜。
- en: The _polygon_coordinates list will contain the coordinates of the points clicked
    by the user and will be used to generate the binary mask (using a **skimage**
    function)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: _polygon_coordinates 列表将包含用户点击的点的坐标，并将用于生成二进制掩膜（使用 **skimage** 函数）
- en: the _initialize_widget function will generate all the other states used to build
    the layout such as the buttons, figures and intermediate masks.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: _initialize_widget 函数将生成构建布局所需的所有其他状态，如按钮、图像和中间掩膜。
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Note: Python does not manage public and private variables, but as a good pep8
    practice, non-public variable and function can be prefixed with “_”.*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：Python 不管理公共和私有变量，但作为良好的 pep8 实践，非公共变量和函数可以用“_”作为前缀。*'
- en: Read the images
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取图像
- en: We need to develop a function for reading both the image and its associated
    mask, when it exists.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要开发一个函数，用于读取图像及其相关的掩码（如果存在）。
- en: This function will be called during the initialization of the widget, but also
    every time the user navigate to a new image.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将在小部件初始化期间调用，但每当用户切换到新图像时也会调用。
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Note: I prefer to package a dedicated function here. I could have put everything
    directly in my __init__, but it would have been much less digest. If you identify
    a task that make sense as a whole, use a function.*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：我更倾向于在这里打包一个专用函数。我本可以把所有东西直接放在 __init__ 中，但那样会更难消化。如果你发现一个整体上合理的任务，使用一个函数。*'
- en: Initialize the graphs
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化图形
- en: The next step is to initialize our FigureWidgets.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是初始化我们的 FigureWidgets。
- en: We are going to display the RGB image using the plotly.express.imshow method
    while we are using plotly.graph_objects.Heatmap for the binary mask.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 plotly.express.imshow 方法显示 RGB 图像，同时对二进制掩码使用 plotly.graph_objects.Heatmap。
- en: We are currently giving a focus to the general layout of our widget so we are
    leaving the definitions of the callback for later.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前专注于小部件的总体布局，因此将回调函数的定义留到以后。
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Don’t hesitate to spend a bit of time on the formatting, it might looks annoying
    to do, but having a tool of the good size with just the good level of information
    will save you some time when you manipulate it*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要犹豫花一点时间来格式化，可能看起来很烦人，但拥有一个合适大小、信息量刚好的工具会在你操作时节省时间*'
- en: Buttons, Dropdown, and final layout
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮、下拉菜单和最终布局
- en: We will now add functions to integrate the interface components to the widget.
    As precised in the specs, we want 3 buttons (displayed horizontally), a dropdown
    menu, and the two figures next to each other.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将添加函数以将界面组件集成到小部件中。正如规格中所述，我们需要 3 个按钮（水平显示）、一个下拉菜单和两个并排的图形。
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I add a “public” display() method (the only “public” of the widget). It will
    result in showing the initial state of your widget.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了一个“公共” display() 方法（小部件中唯一的“公共”）。它将显示小部件的初始状态。
- en: Having such a method allow users to directly display the widget without having
    to look for your widget name inside its internal state…
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这样的方法允许用户直接显示小部件，而无需在其内部状态中查找你的部件名称……
- en: '![](../Images/ad364ac049395129d9098cf7d48bd310.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ad364ac049395129d9098cf7d48bd310.png)'
- en: Original images provided by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由[HuBMAP 组织的组织映射中心](https://medschool.vanderbilt.edu/biomic/)在范德堡大学提供的原始图像
- en: Taking care of the interactions
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理交互
- en: Now that we have our widget fully initialized, we can start to work on the different
    interactions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的小部件已完全初始化，我们可以开始处理不同的交互。
- en: The dropdown interaction
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下拉菜单交互
- en: 'The dropdown allows the user to navigate through the different images of the
    dataset. In order to work correctly, the dropdown callback should:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉菜单允许用户浏览数据集中的不同图像。为了正常工作，下拉菜单的回调函数应：
- en: Read the new image and the new mask
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取新图像和新掩码
- en: Update both figures
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新两个图形
- en: Clear the list of points in _polygon_coordinates to start a new polygon
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清空 _polygon_coordinates 中的点列表以开始一个新的多边形
- en: To update the px.imshow() trace, we need to modify its “source” parameter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新 px.imshow() 轨迹，我们需要修改其“source”参数。
- en: To update the go.Heatmap() trace, we modify the “z” parameter of the trace.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新 go.Heatmap() 轨迹，我们修改轨迹的“z”参数。
- en: '*Note that each trace is usually displaying as an object containing all the
    information of the chart. Don’t hesitate to display it to see what you can modify
    more easily.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，每个轨迹通常显示为一个包含图表所有信息的对象。不要犹豫，展示它以查看你可以更轻松地修改什么。*'
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can now navigate through the different images.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以浏览不同的图像。
- en: '![](../Images/f0471ed71b38d443101d39db3807bfee.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0471ed71b38d443101d39db3807bfee.png)'
- en: Original images provided by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由[HuBMAP 组织的组织映射中心](https://medschool.vanderbilt.edu/biomic/)在范德堡大学提供的原始图像
- en: The FigureWidget on_click interaction
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FigureWidget 的 on_click 交互
- en: Clicking on a pixel in the image will store its coordinate in the widget state.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 点击图像中的一个像素将把它的坐标存储在小部件状态中。
- en: 'Having 3 or more pixels stored should trigger a function that will:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 存储 3 个或更多像素应触发一个函数，该函数将：
- en: Generate a new mask array with a value of 0 or 2 if the pixel is located within
    or outside the polygon defined by the list of coordinates
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果像素位于由坐标列表定义的多边形内或外，则生成值为 0 或 2 的新掩模数组。
- en: Create an intermediate mask containing both information of the previous mask
    and the mask newly generated
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个中间掩模，其中包含前一个掩模的信息和新生成的掩模信息。
- en: Display on the left figure that newly generated mask
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在左侧图形上显示新生成的掩模。
- en: We are using skimage.draw to generate efficiently the polygon mask from the
    list of coordinates.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 skimage.draw 从坐标列表中高效生成多边形掩模。
- en: '*Scikit-image is a powerful tool for handling all type of image processing.
    Check* [*their documentation*](https://scikit-image.org/) *to get a grab on the
    possibilities!*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*Scikit-image 是处理各种图像处理任务的强大工具。查看* [*他们的文档*](https://scikit-image.org/) *以了解更多可能性！*'
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can then update our _initialize_figures method to attach the callback.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以更新 _initialize_figures 方法以附加回调函数。
- en: '*Note: As the figure is made of several image layers, we attach the callback
    to the top layer.*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：由于图形由多个图像层组成，我们将回调函数附加到顶层。*'
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And this is it ! We can now visualize the effect of our chart interaction:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们现在可以可视化我们图表交互的效果：
- en: '![](../Images/54b58906563ba78c3c1e3c671f2c326c.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/54b58906563ba78c3c1e3c671f2c326c.png)'
- en: Original images provided by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 原始图像由[HuBMAP组织的组织映射中心](https://medschool.vanderbilt.edu/biomic/)提供，位于范德比尔特大学。
- en: The buttons interactions
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮交互
- en: To finish our app, let’s code the button interactions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为完成我们的应用程序，让我们编写按钮交互的代码。
- en: 'The “Save Configuration” button. This button save the mask by:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “保存配置”按钮。这个按钮通过以下方式保存掩模：
- en: Copying 0 and 2 pixels from the _intermediate_mask to the _current_mask
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 0 和 2 像素从 _intermediate_mask 复制到 _current_mask。
- en: Save the _current_mask in the /masks folder
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 _current_mask 保存到 /masks 文件夹。
- en: Refresh the figures
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新图形。
- en: Reset the _polygon_coordinates list.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重置 _polygon_coordinates 列表。
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/6a8c1ae8d5c1c0148806595935b6d4a8.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a8c1ae8d5c1c0148806595935b6d4a8.png)'
- en: Original images provided by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 原始图像由[HuBMAP组织的组织映射中心](https://medschool.vanderbilt.edu/biomic/)提供，位于范德比尔特大学。
- en: The “Delete Current Mask” button. This button simply reset the _intermediate_mask
    to the _current_mask value and refresh the figures and the _polygon_coordinates
    list.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: “删除当前掩模”按钮。这个按钮只是将 _intermediate_mask 重置为 _current_mask 的值，并刷新图形和 _polygon_coordinates
    列表。
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/f5b07125ecbd2e53123b2cb61545af7c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f5b07125ecbd2e53123b2cb61545af7c.png)'
- en: Original images provided by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 原始图像由[HuBMAP组织的组织映射中心](https://medschool.vanderbilt.edu/biomic/)提供，位于范德比尔特大学。
- en: The “Delete All Mask” button. This button simply reset the _intermediate_mask
    to 0 and the _polygon_coordinates to an empty list.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: “删除所有掩模”按钮。这个按钮只是将 _intermediate_mask 重置为 0，并将 _polygon_coordinates 重置为空列表。
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/e2d73c91b19af88ef415856921842b00.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e2d73c91b19af88ef415856921842b00.png)'
- en: Original images provided by the [HuBMAP’s tissue mapping center](https://medschool.vanderbilt.edu/biomic/)
    at Vanderbilt University
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 原始图像由[HuBMAP组织的组织映射中心](https://medschool.vanderbilt.edu/biomic/)提供，位于范德比尔特大学。
- en: You want to try it out yourself ? The full code is available [here](https://github.com/jkaub/segmentation-widget)!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 想自己试试吗？完整代码请见[这里](https://github.com/jkaub/segmentation-widget)！
- en: Conclusion
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In a few hours of work we have been able to setup our tool and have now the
    capability to quickly label our images, which will help us answering the original
    request of our client. After preparing the masks of few hundreds of images, we
    could train a preliminary model, and assess if we are willing to mobilize more
    resources to push the project further.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 几小时的工作后，我们已经能够设置我们的工具，并现在具备快速标记图像的能力，这将帮助我们满足客户的原始请求。在准备了几百张图像的掩模后，我们可以训练一个初步模型，并评估是否需要动用更多资源来推动项目进一步发展。
- en: Be creative
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发挥创造力
- en: If you arrived here, congratulation ! You are now able to generate yourself
    a custom labeling tool directly in your Jupyter Notebook. We explored only one
    of the many use-cases that can be leveraged quickly with plotly and ipywidgets,
    and you have now all the keys to develop your own applications.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你到这里来了，恭喜你！你现在可以直接在你的 Jupyter Notebook 中生成一个自定义标签工具了。我们仅仅探讨了使用 plotly 和 ipywidgets
    可以快速利用的众多用例中的一个，你现在拥有了开发自己应用程序的所有关键。
