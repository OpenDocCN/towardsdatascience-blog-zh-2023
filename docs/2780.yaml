- en: 'New ChatGPT Prompt Engineering Technique: Program Simulation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/new-chatgpt-prompt-engineering-technique-program-simulation-56f49746aa7b?source=collection_archive---------0-----------------------#2023-09-03](https://towardsdatascience.com/new-chatgpt-prompt-engineering-technique-program-simulation-56f49746aa7b?source=collection_archive---------0-----------------------#2023-09-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@hominum_universalis?source=post_page-----56f49746aa7b--------------------------------)[![Giuseppe
    Scalamogna](../Images/ff7b3bec7c26e5684fba26211b6f027a.png)](https://medium.com/@hominum_universalis?source=post_page-----56f49746aa7b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----56f49746aa7b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----56f49746aa7b--------------------------------)
    [Giuseppe Scalamogna](https://medium.com/@hominum_universalis?source=post_page-----56f49746aa7b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe039aa8b7221&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnew-chatgpt-prompt-engineering-technique-program-simulation-56f49746aa7b&user=Giuseppe+Scalamogna&userId=e039aa8b7221&source=post_page-e039aa8b7221----56f49746aa7b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----56f49746aa7b--------------------------------)
    ·9 min read·Sep 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F56f49746aa7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnew-chatgpt-prompt-engineering-technique-program-simulation-56f49746aa7b&user=Giuseppe+Scalamogna&userId=e039aa8b7221&source=-----56f49746aa7b---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F56f49746aa7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnew-chatgpt-prompt-engineering-technique-program-simulation-56f49746aa7b&source=-----56f49746aa7b---------------------bookmark_footer-----------)![](../Images/5639210e80645d1130cefa920300f7d3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: Image by Author and generated with MidJourney'
  prefs: []
  type: TYPE_NORMAL
- en: The world of prompt engineering is fascinating on various levels and there’s
    no shortage of clever ways to nudge agents like ChatGPT into generating specific
    kinds of responses. Techniques like Chain-of-Thought (CoT), Instruction-Based,
    N-shot, Few-shot, and even tricks like Flattery/Role Assignment are the inspiration
    behind libraries full of prompts aiming to meet every need.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will delve into a technique that, as far as my research shows,
    is potentially less explored. While I’ll tentatively label it as “new,” I’ll refrain
    from calling it “novel.” Given the blistering rate of innovation in prompt engineering
    and the ease with which new methods can be developed, it’s entirely possible that
    this technique might already exist in some form.
  prefs: []
  type: TYPE_NORMAL
- en: The essence of the technique aims to make ChatGPT operate in a way that simulates
    a program. A program, as we know, comprises a sequence of instructions typically
    bundled into functions to perform specific tasks. In some ways, this technique
    is an amalgam of Instruction-Based and Role-Based prompting techniques. But unlike
    those approaches, it seeks to utilize a repeatable and static framework of instructions,
    allowing the output from one function to inform another and the entirety of the
    interaction to stay within the boundaries of the program. This modality should
    align well with the prompt-completion mechanics in agents like ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f76c7112e2bff921353f1bf273237d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the technique, let’s specify the parameters for a mini-app within
    ChatGPT4 designed to function as an Interactive Innovator’s Workshop. Our mini-app
    will incorporate the following functions and features:'
  prefs: []
  type: TYPE_NORMAL
- en: Work on New Idea
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand on Idea
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summarize Idea
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieve Ideas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue Working on Previous Idea
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Token/”Memory” Usage Statistics
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To be clear we will not be asking ChatGPT to code the mini-app in any specific
    programming language and we will reflect this in our program parameters.
  prefs: []
  type: TYPE_NORMAL
- en: With this program outline let’s go about writing the priming prompt to instantiate
    our Interactive Innovator’s Workshop mini-app in ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: '**Program Simulation Priming Prompt**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to load the prompt into ChatGPT4 if you want to follow along in a
    more interactive manner and test it for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the completion from ChatGPT to the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5de6729285841a681d7a75ca867063e4.png)'
  prefs: []
  type: TYPE_IMG
- en: So far so good. We have launched our “mini-app”, received an uplifting welcome
    message and been presented with what appears to be a functional menu that is consistent
    with our program parameters. Let’s test our mini-app’s functionality by submitting
    “1” to launch the “Work on New Idea” function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e02140ce29b9e81907b1c205b38dda3.png)'
  prefs: []
  type: TYPE_IMG
- en: The conversation continues to adhere well to the “program” structure we’ve laid
    out, appropriately providing completions that are within the parameters outlined.
    Let’s continue to crafting an idea from scratch and have the program work with
    us on a technology to grow buildings instead of constructing them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23b11d7363e1dd550a47c899f18286ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Interestingly, we notice that the “program” autonomously calls on the “Expand
    on Idea” function without explicit directions in the program to do so. Given the
    program’s objectives, this behavior is not inappropriate, and may well be influenced
    by our initial context-setting that guided the chat agent to behave like a program.
    Let’s proceed to expanding on our idea a bit by diving into the technology required
    to grow buildings.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14ac811a46722df7e87c7d1fe755efa9.png)'
  prefs: []
  type: TYPE_IMG
- en: And now let’s examine materials for growing buildings.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/afb9aecb941a3ab9cac99119d9a3e64a.png)'
  prefs: []
  type: TYPE_IMG
- en: I continue along these lines for a bit and now, let’s see if we can get back
    to the Menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e8d0947adcb59c8b6219c8ae42d3f61.png)'
  prefs: []
  type: TYPE_IMG
- en: The Menu is still intact. Let’s try to have our program execute the Summarize
    Idea function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffbf12cc3f76670330d78b717f0dfe8f.png)'
  prefs: []
  type: TYPE_IMG
- en: I am satisfied with that title and summary for now so let’s “save” it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70b2a80f80d2ef35c3743629b5a760ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Shortly, we’ll test the retrieval of our “saved” idea to examine whether our
    efforts at implementing data persistence are successful. On another note, it might
    be beneficial to tweak our “mini-app” to omit the repeated summary after saving.
  prefs: []
  type: TYPE_NORMAL
- en: The role priming as a program results in the inclusion of the Main Menu in the
    output — behavior that again makes sense in the context of the program, even though
    it wasn’t explicitly configured in our program definition.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s test our token count function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e85a97dcba2b2f53328f565c6637fff5.png)'
  prefs: []
  type: TYPE_IMG
- en: To cross-check the accuracy, I turn to OpenAI’s tokenizer tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/791e2c68c44d9212d6cdd62a8a556272.png)'
  prefs: []
  type: TYPE_IMG
- en: The token count is inaccurate, as evidenced by the significant discrepancy —
    our program reported roughly 1,200 tokens while the tokenizer tool indicated 2,730\.
    Given this mismatch, it is prudent to remove this function from our program. I
    won’t get into why this type of task is generally a problem for a language model
    and the loss in functionality is relatively minor. Eventually, I’d anticipate
    such a feature to be natively integrated into ChatGPT, especially since token
    count information is being constantly passed back and forth in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s dive into the “Get Inspired” function to generate a novel idea.
    In the interest of conciseness, I’ll display the dialogue further along. As you
    can see, I opted to delve deeper into a Waste-to-Energy Drone concept that our
    program suggested as an option, summarized the idea and had our program “save”
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d4d55b455483b8b8849fe8f907bfd91.png)'
  prefs: []
  type: TYPE_IMG
- en: All looks good, and the system even took the liberty of naming our idea “SolarSky”.
    To make this work in a more effective manner, we might incorporate a standalone
    function in the program definition for this task or provide more specific instructions
    in the “Work on New Idea” or “Expand on New Idea” functions. Again we are presented
    with Menu in the completion which makes logical sense from a program flow perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see if we can “Retrieve Ideas.”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4ae29e9fe3471683a32b828973c3140.png)'
  prefs: []
  type: TYPE_IMG
- en: That appears to be in line with our original instructions, offering only the
    title as requested. It also prompts us to continue working on an idea, even though
    this wasn’t explicitly programmed into the mini-app. Next, let’s assess if it
    maintains the root menu indexing. To do that, I’ll input “5,” corresponding to
    the “Continue Working on a Previous Idea” function, and see if that works.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98ccf59448e8d89deac0c79c93041c8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Apparently the indexing is being maintained in the context of the conversation
    and it calls the function accordingly. This observation is noteworthy, especially
    when considering scenarios where multiple indexes could be active. It raises interesting
    questions about how the “program” would behave under such conditions. You may
    have missed it, but earlier in our interaction, the program actually employed
    the indexing technique when soliciting user input for idea expansion choices.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue working on our growing buildings idea.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ce770c0fc332866d358c3eb565bbbe9.png)'
  prefs: []
  type: TYPE_IMG
- en: Looks good again. The “program” behaves as anticipated and also kept track of
    the exact point where we paused in the idea expansion process.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s stop testing our prompt here and see what we have learned using this technique.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusions and Observations**'
  prefs: []
  type: TYPE_NORMAL
- en: Frankly, this exercise, though limited in both scope and functionality, has
    surpassed my expectations. We could have asked ChatGPT to code the mini-app in
    a language like Python and then leveraged Code Interpreter (now known as Advanced
    Data Analysis) to run it in a persistent Python session. That approach would however
    have introduced a level of rigidity that would have made it difficult to enable
    the conversational functionality that was natively present in our mini-app. Not
    to mention, we immediately run the risk of non-functioning code especially in
    a program with multiple overlapping functions.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT’s performance was particularly impressive in that it simulated program
    behavior with high fidelity. The prompt completions stayed within the boundary
    of the program definition and even in cases where function behavior was not defined
    explicitly, the completions made logical sense within the context of what the
    mini-app’s purpose was.
  prefs: []
  type: TYPE_NORMAL
- en: This Program Simulation technique might work well with ChatGPT’s “Custom Instructions”
    feature, although it’s worth mentioning that doing so would apply the program’s
    behavior to all subsequent interactions.
  prefs: []
  type: TYPE_NORMAL
- en: My next steps include conducting a deeper examination of this technique to assess
    if a comprehensive testing framework might shed light on how this approach stacks
    up against other prompt engineering techniques. That type of exercise might also
    help pinpoint what specific tasks (or class of tasks) this technique is best suited
    for. Stay tuned for more to come.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime hopefully you find this technique and prompt helpful in your
    interactions. If you would like to discuss the technique further, do not hesitate
    to connect with me on [LinkedIn](https://www.linkedin.com/in/giuseppe-scalamogna-8b389145/).
  prefs: []
  type: TYPE_NORMAL
- en: Unless otherwise noted, all images in this article are by the author.
  prefs: []
  type: TYPE_NORMAL
