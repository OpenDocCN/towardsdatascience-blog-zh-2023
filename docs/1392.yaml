- en: TorchServe & Flask for Image Style Transfer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TorchServe & Flask用于图像风格迁移
- en: 原文：[https://towardsdatascience.com/torchserve-flask-for-image-style-transfer-113f73bd1d70?source=collection_archive---------7-----------------------#2023-04-20](https://towardsdatascience.com/torchserve-flask-for-image-style-transfer-113f73bd1d70?source=collection_archive---------7-----------------------#2023-04-20)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/torchserve-flask-for-image-style-transfer-113f73bd1d70?source=collection_archive---------7-----------------------#2023-04-20](https://towardsdatascience.com/torchserve-flask-for-image-style-transfer-113f73bd1d70?source=collection_archive---------7-----------------------#2023-04-20)
- en: An example of web app backed by TorchServe model server
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个由TorchServe模型服务器支持的Web应用示例
- en: '[](https://medium.com/@summit.mnr?source=post_page-----113f73bd1d70--------------------------------)[![Andrey
    Golovin](../Images/3afbee89a80374b346e57c8f317c9b3a.png)](https://medium.com/@summit.mnr?source=post_page-----113f73bd1d70--------------------------------)[](https://towardsdatascience.com/?source=post_page-----113f73bd1d70--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----113f73bd1d70--------------------------------)
    [Andrey Golovin](https://medium.com/@summit.mnr?source=post_page-----113f73bd1d70--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@summit.mnr?source=post_page-----113f73bd1d70--------------------------------)[![Andrey
    Golovin](../Images/3afbee89a80374b346e57c8f317c9b3a.png)](https://medium.com/@summit.mnr?source=post_page-----113f73bd1d70--------------------------------)[](https://towardsdatascience.com/?source=post_page-----113f73bd1d70--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----113f73bd1d70--------------------------------)
    [Andrey Golovin](https://medium.com/@summit.mnr?source=post_page-----113f73bd1d70--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc18c39659707&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftorchserve-flask-for-image-style-transfer-113f73bd1d70&user=Andrey+Golovin&userId=c18c39659707&source=post_page-c18c39659707----113f73bd1d70---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----113f73bd1d70--------------------------------)
    ·6 min read·Apr 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F113f73bd1d70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftorchserve-flask-for-image-style-transfer-113f73bd1d70&user=Andrey+Golovin&userId=c18c39659707&source=-----113f73bd1d70---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc18c39659707&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftorchserve-flask-for-image-style-transfer-113f73bd1d70&user=Andrey+Golovin&userId=c18c39659707&source=post_page-c18c39659707----113f73bd1d70---------------------post_header-----------)
    发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----113f73bd1d70--------------------------------)
    · 6分钟阅读 · 2023年4月20日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F113f73bd1d70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftorchserve-flask-for-image-style-transfer-113f73bd1d70&user=Andrey+Golovin&userId=c18c39659707&source=-----113f73bd1d70---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F113f73bd1d70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftorchserve-flask-for-image-style-transfer-113f73bd1d70&source=-----113f73bd1d70---------------------bookmark_footer-----------)![](../Images/31d5f10b49cf379849d5f0002f5cd65d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F113f73bd1d70&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftorchserve-flask-for-image-style-transfer-113f73bd1d70&source=-----113f73bd1d70---------------------bookmark_footer-----------)![](../Images/31d5f10b49cf379849d5f0002f5cd65d.png)'
- en: Image by author*. Exposing an ML model as decoupled model server is way more
    scalable, extensible and maintainable pattern.*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像*。将ML模型作为解耦的模型服务器暴露是一种更具可扩展性、可扩展性和可维护性的模式。*
- en: In the [previous post](https://medium.com/p/1578eca5aa20) I showed an example
    of serving an image classification model with the TorchServe framework. Now let’s
    extend the example and make it a bit closer to the real world scenarios.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[上一篇文章](https://medium.com/p/1578eca5aa20)中，我展示了如何使用TorchServe框架提供图像分类模型的示例。现在，让我们扩展这个示例，使其更贴近现实世界的场景。
- en: Let’s say I want to develop a web app to let users apply the filters to their
    images. As you know there’s a lot of such applications. One of the feature could
    be neural style transfer — users can upload an image with content and an image
    with style (or select a filter in the app) and get the new image of the content
    in desired style. Let’s build this example from end to end.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想开发一个 web 应用，让用户将滤镜应用到他们的图像上。如你所知，有很多这样的应用程序。一个功能可以是神经风格迁移——用户可以上传一张内容图像和一张风格图像（或在应用中选择一个滤镜），然后获得一张以所需风格呈现的内容的新图像。让我们从头到尾构建这个示例。
- en: The focus of the post will be, of course, not how to send a request from Flask
    app to another url 😁 I’ll try to make it a bit more useful. First of all, I’ll
    show an **example of a complex handler** with additional dependencies. Then the
    **model server will return an image** instead of simply the labels or probabilities.
    Finally the code could be helpful as a **working example of how to pass images
    in appropriate format between the browser, Flask app and model server.** And just
    for fun let’s deploy the whole solution in Kubernetes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的重点当然不是如何从 Flask 应用程序向另一个 URL 发送请求 😁 我会尽量让它更有用。首先，我会展示一个 **复杂处理程序的示例**，它具有额外的依赖项。然后，**模型服务器将返回图像**，而不仅仅是标签或概率。最后，这段代码可以作为
    **在浏览器、Flask 应用和模型服务器之间以适当格式传递图像的工作示例**。最后，纯粹为了好玩，让我们在 Kubernetes 中部署整个解决方案。
- en: GitHub repo with code is [here](https://github.com/quasi-researcher/style_transfer).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 代码库在[这里](https://github.com/quasi-researcher/style_transfer)。
- en: '*(btw, if you want to see a very simple example of web app + TorchServe for
    image classification then checkout to the feature/classify branch in git)*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*(顺便说一下，如果你想看到一个非常简单的 web 应用 + TorchServe 用于图像分类的示例，请查看 git 中的 feature/classify
    分支)*'
- en: In this post I assume you’re already familiar with basics of TorchServe (handler,
    model files etc.). If not refer to the previous post.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我假设你已经对 TorchServe 的基础知识（处理程序、模型文件等）有所了解。如果没有，请参考之前的文章。
- en: Neural style transfer
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经风格迁移
- en: In case you don’t remember how the style transfer works here is a short description.
    It’s important to get the high-level overview in order to understand what will
    be going on in the handler for TorchServe.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不记得风格迁移是如何工作的，这里有一个简短的描述。理解高层次的概述是很重要的，以便了解在 TorchServe 处理程序中会发生什么。
- en: “Inference” in style transfer is not just one pass of the input tensor through
    the net. Instead a tensor (which is going to be the output picture at the end)
    is passed many times and the tensor itself is modified so that to minimize the
    content and style loss functions. At each iteration the image is changed. And
    the “inference” is a sequence of the iterations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在风格迁移中的“推断”不仅仅是将输入张量通过网络的一次传递。相反，一个张量（最终将成为输出图像）会被传递多次，并且张量本身会被修改，以最小化内容和风格损失函数。在每次迭代中，图像都会发生变化。而“推断”是这些迭代的序列。
- en: 'For the solution it means the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于解决方案来说，这意味着以下内容：
- en: the inference function in handler will be pretty complex. It’d be messy to put
    everything in *handler.py*. So, I’ll put it in additional module and show how
    to include it into TorchServe artifacts
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序中的推断函数会相当复杂。将所有内容放在 *handler.py* 中会很混乱。因此，我会把它放在一个额外的模块中，并展示如何将其包含到 TorchServe
    的工件中。
- en: 'a side effect: “inference” will take some time. To not ask a user for waiting
    a minute while Flask will reload the entire page I’ll use ajax request from browser
    to the app. So, the page in browser won’t be frozen'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个副作用是：“推断”将需要一些时间。为了不让用户在 Flask 重新加载整个页面时等待一会儿，我将使用从浏览器到应用程序的 ajax 请求。因此，浏览器中的页面不会冻结。
- en: Model file
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型文件
- en: 'The VGG19 pretrained model is used in the solution. Generally speaking I just
    followed the style transfer official example from PyTorch: [https://pytorch.org/tutorials/advanced/neural_style_tutorial.html](https://pytorch.org/tutorials/advanced/neural_style_tutorial.html)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案中使用了预训练的 VGG19 模型。一般来说，我只是按照 PyTorch 的风格迁移官方示例进行了操作：[https://pytorch.org/tutorials/advanced/neural_style_tutorial.html](https://pytorch.org/tutorials/advanced/neural_style_tutorial.html)
- en: I had to slightly modify the state dict of the model to get rid of classifier
    layers (80M vs. 500M of full vgg19 model). You can check how the .pth file was
    produced in the notebook *model_saving.ipynb* in the repo. It generates the *vgg19.pth*
    artifact. The *model_nst.py* contains the definition of the model architecture.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要稍微修改模型的状态字典，以去除分类器层（80M vs. 500M 的完整 vgg19 模型）。你可以在仓库中的 *model_saving.ipynb*
    笔记本里查看 .pth 文件是如何生成的。它生成了 *vgg19.pth* 文件。*model_nst.py* 包含了模型架构的定义。
- en: Handler
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理程序
- en: '**Preprocess function**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**预处理函数**'
- en: It is almost the same as you saw in the first post. The difference is that there
    are two images as input and the function must return only one tensor. So, the
    two will be just stacked in one to be split back later.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎和你在第一篇文章中看到的相同。不同之处在于输入是两张图像，而函数必须只返回一个张量。因此，这两张图像会堆叠在一起，稍后会被拆分回来。
- en: '**Postprocess function**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**后处理函数**'
- en: The function is pretty straightforward. The only thing here is how to pass the
    image to the Flask app so that it can be correctly read from json. Passing it
    as bytes buffer worked for me.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数相当简单。唯一的问题是如何将图像传递给 Flask 应用，以便它可以正确地从 JSON 中读取。将其作为字节缓冲区传递对我有效。
- en: '**Inference function**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**推理函数**'
- en: The code for “inference” is noticeable long. So, I didn’t place it directly
    in the handler module. Instead, it’s located in the *utils.py*. As I mentioned
    the code is from the official PyTorch example of style transfer, I won’t go into
    details.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “推理”代码相当长。因此，我没有直接放在处理程序模块中。它位于 *utils.py* 文件中。正如我提到的，这段代码来自 PyTorch 官方的风格迁移示例，我不会详细介绍。
- en: 'Let’s see how to include additional modules into TorchServe artifacts. For
    model archiver you need to specify the extra files you want to include:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何将额外模块包含到 TorchServe 的工件中。对于模型归档器，你需要指定要包含的额外文件：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we’re good to go from the TorchServe side. Let me briefly walk you through
    the web app.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从 TorchServe 端开始了。让我简要介绍一下 web 应用。
- en: Flask app
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask 应用
- en: The app has only two endpoints — to check the status of the model server and
    to generate the image with desired style. When the generation endpoint is called
    the app just forwards the content and style images to the TorchServe model server.
    Then it decodes the received generated image and return it back as json object.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用只有两个端点——一个是检查模型服务器的状态，另一个是生成带有所需风格的图像。当生成端点被调用时，应用会将内容和风格图像转发到 TorchServe
    模型服务器。然后，它会解码接收到的生成图像并将其作为 JSON 对象返回。
- en: 'As I mentioned to not waiting long time for reloading the whole page the generation
    request is sent as ajax. So, there is also a simple JQuery script for that:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我提到的，为了避免长时间等待整个页面重新加载，生成请求是通过 Ajax 发送的。因此，还有一个简单的 JQuery 脚本：
- en: Run the application
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'If you don’t want to run the whole solution in Kubernetes you can stop here
    and just start the model server from its directory as:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想在 Kubernetes 中运行整个解决方案，你可以在此停止，然后从其目录启动模型服务器：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And application server:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以及应用服务器：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now everything shall be functional. Go to localhost:5000 in browser, upload
    the content and style images, click “*transfer style*” and in a while you will
    get the generated image with desired style in your browser.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切应该都能正常工作。打开浏览器中的 localhost:5000，上传内容和风格图像，点击“*transfer style*”，稍等片刻，你将会在浏览器中获得带有所需风格的生成图像。
- en: Run with Kubernetes in a single-node cluster
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在单节点集群中使用 Kubernetes 运行
- en: 'For the Kubernetes run on your local machine create two Docker images with
    the names *flask_server* and *model_server* from the Dockerfiles in the repo.
    There is also yaml file for Kubernetes. So, just apply it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在本地机器上运行 Kubernetes，请根据仓库中的 Dockerfile 创建名为 *flask_server* 和 *model_server*
    的两个 Docker 镜像。还有一个 Kubernetes 的 yaml 文件。只需应用它即可：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Don’t forget about port forwarding (e.g. bind 8700 port of your machine to
    the pod’s 5000 port):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了端口转发（例如，将你的机器的 8700 端口绑定到 pod 的 5000 端口）：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And here we are. Go to your browser and open *localhost:8700*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到了。打开浏览器并访问 *localhost:8700*。
- en: '![](../Images/fce46f319881ff3988c067a71dd4a120.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fce46f319881ff3988c067a71dd4a120.png)'
- en: Image by author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Forgive me the design and UI, I’m just a DS/ML engineer. I know it’s ugly. 😅
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于设计和 UI 请原谅，我只是个数据科学/机器学习工程师。我知道它很丑。😅
- en: Live demo
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现场演示
- en: 'For the screen recording below I’ll use my own pictures I have at my fingertips
    to avoid any author rights violation. Let me check if I can do a crazy thing:
    draw my cat with the symbols of International Specification for Orienteering Maps
    ([ISOM](https://orienteering.sport/iof/mapping/)). They are the symbols that are
    used to draw maps for sport orienteering competitions.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下面的屏幕录制，我将使用我手头的个人照片，以避免任何版权问题。让我检查一下是否可以做个疯狂的事情：用国际定向地图规范的符号（[ISOM](https://orienteering.sport/iof/mapping/)）画我的猫。这些符号用于绘制运动定向比赛的地图。
- en: '![](../Images/5d7d7ddf62446fd5808ff4b858d9e390.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d7d7ddf62446fd5808ff4b858d9e390.png)'
- en: Images by author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: '![](../Images/489f717964f935a6a13a73f9ce1d0fb6.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/489f717964f935a6a13a73f9ce1d0fb6.png)'
- en: Image by author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Well, looks interesting 🤪
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，看起来很有趣 🤪
- en: '![](../Images/072ad99dc33defcc757c92c26ed33b61.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/072ad99dc33defcc757c92c26ed33b61.png)'
- en: Image by author
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Conclusion
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This post together with the previous one shows how to serve your ML models with
    a dedicated serving framework and how to use an approach of model server detached
    from application server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本文与前一篇文章一起展示了如何使用专用服务框架来服务你的 ML 模型，以及如何使用与应用服务器分离的模型服务器方法。
- en: It’s shown that TorchServe allows flexible customisation of pre-, postprocessing
    and inference functions. Thus , you can incorporate any complex logic of your
    models.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 研究表明，TorchServe 允许灵活定制前处理、后处理和推理功能。因此，你可以融入模型中的任何复杂逻辑。
- en: Also the GitHub repo with the end-to-end example can be used as a starting point
    for your own experiments.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，带有端到端示例的 GitHub 仓库可以作为你自己实验的起点。
- en: 'As a conclusion let me mention just few benefits that an approach with a model
    server offers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为总结，让我提到一些模型服务器方法所提供的好处：
- en: more efficient use of hardware (e.g. model server can be deployed on a machine
    with GPUs while the application server may not need it)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更高效地利用硬件（例如，模型服务器可以部署在配有GPU的机器上，而应用服务器可能不需要GPU）
- en: dedicated serving frameworks offer features to serve models at scale (e.g. threads
    and workers in TorchServe)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用服务框架提供了大规模服务模型的功能（例如，TorchServe中的线程和工作进程）
- en: 'serving frameworks also provide the features to speed up the development (and
    to not reinvent the wheel): model versioning, logs, metrics etc.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务框架还提供了加速开发的功能（而且避免重复发明轮子）：模型版本控制、日志、指标等。
- en: message queuing service can be easily added to scale the solution
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息队列服务可以轻松添加以扩展解决方案
- en: dev and ML/DS teams can work more independently
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发和 ML/DS 团队可以更独立地工作
- en: It’s not the complete list but just few reasons to think about serving ML models
    with dedicated frameworks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是完整的列表，只是一些考虑使用专用框架来服务 ML 模型的理由。
- en: Hope you could find some helpful and practical stuff in this post.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能在这篇文章中找到一些有用和实用的内容。
