- en: Anomaly Detection using Sigma Rules (Part 3) Temporal Correlation Using Bloom
    Filters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sigma 规则进行异常检测（第 3 部分）基于布隆过滤器的时间相关性
- en: 原文：[https://towardsdatascience.com/anomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069?source=collection_archive---------9-----------------------#2023-02-14](https://towardsdatascience.com/anomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069?source=collection_archive---------9-----------------------#2023-02-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/anomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069?source=collection_archive---------9-----------------------#2023-02-14](https://towardsdatascience.com/anomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069?source=collection_archive---------9-----------------------#2023-02-14)
- en: Can a custom tailor made stateful mapping function based on bloom filters outperform
    the generic Spark stream-stream join?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个基于布隆过滤器的定制状态映射函数能否超越通用的 Spark 流-流连接？
- en: '[](https://medium.com/@jean-claude.cote?source=post_page-----a45ffd5e9069--------------------------------)[![Jean-Claude
    Cote](../Images/aea2df9c7b95fc85cc336f64d64b0a76.png)](https://medium.com/@jean-claude.cote?source=post_page-----a45ffd5e9069--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a45ffd5e9069--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a45ffd5e9069--------------------------------)
    [Jean-Claude Cote](https://medium.com/@jean-claude.cote?source=post_page-----a45ffd5e9069--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jean-claude.cote?source=post_page-----a45ffd5e9069--------------------------------)[![Jean-Claude
    Cote](../Images/aea2df9c7b95fc85cc336f64d64b0a76.png)](https://medium.com/@jean-claude.cote?source=post_page-----a45ffd5e9069--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a45ffd5e9069--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a45ffd5e9069--------------------------------)
    [Jean-Claude Cote](https://medium.com/@jean-claude.cote?source=post_page-----a45ffd5e9069--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F444ed0089012&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069&user=Jean-Claude+Cote&userId=444ed0089012&source=post_page-444ed0089012----a45ffd5e9069---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a45ffd5e9069--------------------------------)
    ·6 min read·Feb 14, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa45ffd5e9069&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069&user=Jean-Claude+Cote&userId=444ed0089012&source=-----a45ffd5e9069---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F444ed0089012&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069&user=Jean-Claude+Cote&userId=444ed0089012&source=post_page-444ed0089012----a45ffd5e9069---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a45ffd5e9069--------------------------------)
    ·6 分钟阅读·2023年2月14日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa45ffd5e9069&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069&user=Jean-Claude+Cote&userId=444ed0089012&source=-----a45ffd5e9069---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa45ffd5e9069&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069&source=-----a45ffd5e9069---------------------bookmark_footer-----------)![](../Images/bc0e841a4dc0881a79ccc892ce39e189.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa45ffd5e9069&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanomaly-detection-using-sigma-rules-part-3-temporal-correlation-using-bloom-filters-a45ffd5e9069&source=-----a45ffd5e9069---------------------bookmark_footer-----------)![](../Images/bc0e841a4dc0881a79ccc892ce39e189.png)'
- en: Photo by Kalpaj on Unsplash, Peggys Cove, NS, Canada
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Kalpaj 拍摄于 Unsplash，Peggys Cove，加拿大新斯科舍省
- en: This is the 3rd article of our series. Refer to [part 1](/anomaly-detection-using-sigma-rules-part-1-leveraging-spark-sql-streaming-246900e95457)
    and [part 2](/anomaly-detection-using-sigma-rules-part-2-spark-stream-stream-join-6bb4734e912f)
    for some context.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们系列文章的第 3 篇。请参考[第 1 部分](/anomaly-detection-using-sigma-rules-part-1-leveraging-spark-sql-streaming-246900e95457)和[第
    2 部分](/anomaly-detection-using-sigma-rules-part-2-spark-stream-stream-join-6bb4734e912f)以获得一些背景信息。
- en: Spark’s [flatMapGroupsWithState](https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#arbitrary-stateful-operations)
    function allows users to apply custom code on grouped data and provides support
    to persist user defined states.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Spark 的 [flatMapGroupsWithState](https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#arbitrary-stateful-operations)
    函数允许用户在分组数据上应用自定义代码，并提供支持来持久化用户定义的状态。
- en: In this article, we will implement a stateful function that retrieves the tags
    (features) of a parent process. The crux of the the solution is to create a composite
    key made of the process ID (`e_key` in the diagram below) and the tag (feature)
    name we want to remember. For example, on row 1, we make a bloom key `300.pr1_filter_msiexec_syswow64`.
    We store this key in the bloom filter. Note that because of the nature of bloom
    filters, the key is not actually stored in the bloom. Instead, the key is hashed
    and this hash is used to turn on some bits in the bloom’s bit array. Thus, if
    the tag is false, we don’t store it in the bloom. Only flags that are true are
    stored.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将实现一个有状态的函数，该函数检索父进程的标签（特征）。解决方案的关键是创建一个由进程ID（下图中的 `e_key`）和我们想要记住的标签（特征）名称组成的复合键。例如，在第
    1 行中，我们创建一个布隆键 `300.pr1_filter_msiexec_syswow64`。我们将此键存储在布隆过滤器中。请注意，由于布隆过滤器的特性，键实际上并不存储在布隆中。相反，键被哈希，并且该哈希用于在布隆的位数组中打开一些位。因此，如果标签为
    false，我们不将其存储在布隆中。只有标记为 true 的才会存储。
- en: '![](../Images/9a2dcef85ccb29c2bd73d422d87fce79.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9a2dcef85ccb29c2bd73d422d87fce79.png)'
- en: In the second row, we show how we create a retrieval bloom key using the parent’s
    process ID (`pe_key` rather than `e_key`). Thus, the lookup key is `300.pr1_filter_msiexec_syswow64`
    . If querying the bloom for this key returns false, we know for sure it was never
    stored in the bloom. However, if the query returns true, we know the key was stored
    in the bloom (with some chance of false positive).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行中，我们展示了如何使用父进程的进程ID (`pe_key` 而非 `e_key`) 创建一个检索布隆键。因此，查找键为 `300.pr1_filter_msiexec_syswow64`。如果查询布隆键返回
    false，我们可以确定它从未存储在布隆中。然而，如果查询返回 true，我们知道该键确实存储在布隆中（但存在假阳性的可能性）。
- en: We use the result returned by the bloom to update the current row's `pr1_filter_msiexec_syswow64`.
    This effectively performs the equivalent of the join in our previous article.
    Using the tags from the current row and the flags retrieved for the current row’s
    parent process, we can finally evaluate the complete Sigma rule condition.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用布隆返回的结果来更新当前行的 `pr1_filter_msiexec_syswow64`。这有效地执行了我们上一篇文章中的连接操作。使用当前行的标签和检索到的当前行父进程的标志，我们最终可以评估完整的
    Sigma 规则条件。
- en: Test Harness
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试工具
- en: In order to evaluate the performance of this approach, we built a rudimentary
    flatMapGroupsWithState prototype in Scala, and we used the Guava Bloom filter
    library.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估这种方法的性能，我们在 Scala 中构建了一个初步的 flatMapGroupsWithState 原型，并使用了 Guava 布隆过滤器库。
- en: To estimate the size of bloom filters, we use this [handy online calculator](https://hur.st/bloomfilter/).
    The larger the capacity (number of tags it can store), the larger the bloom filter
    needs to be. For example, a bloom with a capacity of 200,000 results has a size
    of about 234KiB, with a false positive rate of 1%.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了估算布隆过滤器的大小，我们使用了这个 [实用的在线计算器](https://hur.st/bloomfilter/)。容量越大（可以存储的标签数量），布隆过滤器的大小就越大。例如，容量为
    200,000 的布隆过滤器的大小约为 234KiB，假阳性率为 1%。
- en: We used one bloom per host. Continuing with our simulation of 50,000 hosts,
    this gives us about 12GiB of state.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个主机使用一个布隆过滤器。继续模拟 50,000 个主机，这大约给我们提供了 12GiB 的状态。
- en: 'We initially performed all our experiments using the RocksDB state store since
    it performed so well when we were doing stream-stream joins. However, as often
    happens, we made a serendipitous discovery. The older HDFS state store actually
    performed better than RocksDB in this use case. Here’s a brief summary of the
    results:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初使用 RocksDB 状态存储进行所有实验，因为在进行流流连接时表现非常好。然而，正如经常发生的那样，我们进行了一个意外的发现。旧版 HDFS
    状态存储在这种用例中实际上比 RocksDB 表现更好。以下是结果的简要总结：
- en: '![](../Images/eade784f9fd91657cfc357d3185cac19.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eade784f9fd91657cfc357d3185cac19.png)'
- en: Execution time using RocksDB keeps increasing while the HDFS is stable at about
    200 seconds per micro-batch.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 RocksDB 的执行时间不断增加，而 HDFS 在每个微批次约 200 秒时保持稳定。
- en: '![](../Images/06f9c72010fa9b4218c1cb42dbf8219f.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/06f9c72010fa9b4218c1cb42dbf8219f.png)'
- en: The reason why RocksDB’s performance is less then stellar is due to it’s reorganization
    of local state files. At every trigger, we load and modify every bloom which are
    200KiB each. RocksDB then needs to compact and reorganize it’s SST files. RocksDB
    seems more suited for large amount of smaller values. HDFS, on the other hand,
    seems better at handling bigger values but not so good when there are a very large
    amount of them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: RocksDB 性能不佳的原因是它重新组织本地状态文件。在每次触发时，我们加载和修改每个 bloom，每个 bloom 的大小为200KiB。然后，RocksDB
    需要对其 SST 文件进行压缩和重组。RocksDB 似乎更适合处理大量较小的值。而HDFS则更适合处理较大的值，但在处理非常大量的数据时表现不佳。
- en: Comparing Results With Stream-Stream Join
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与流-流连接的结果比较
- en: Let’s now compare these results with the results from the stream-stream join.
    In the stream-stream join, we used a rate of 2,500 events per seconds compared
    to a rate of 5,000 with bloom.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将这些结果与流-流连接的结果进行比较。在流-流连接中，我们使用了每秒2,500个事件的速率，而使用 bloom 时的速率为5,000。
- en: Also, in the stream-stream join, we could keep an average 3,200 “parents of
    interests”. That is the tags associated with 3,200 events. If we suppose that
    each event only has one true tag this yields 3,200 tags per host.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在流-流连接中，我们可以保持平均3,200个“兴趣的父标签”。即与3,200个事件相关联的标签。如果我们假设每个事件只有一个真实标签，这将产生每个主机3,200个标签。
- en: Using a bloom, we can keep about 100,000 tags per host. This is about 30x more!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 bloom，我们可以每台主机保持约100,000个标签。这大约是原来的30倍！
- en: Using a custom flatMapGroupsWithState, we read the input stream (for example
    from Kafka or from an Iceberg table) only once. When using a join, we have to
    read the stream twice, once per side of the join.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义的 flatMapGroupsWithState，我们仅读取一次输入流（例如来自 Kafka 或 Iceberg 表）。而使用连接时，我们必须读取两次流，一次用于连接的每一侧。
- en: A Custom flatMapGroupsWithState is More Flexible
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义的 flatMapGroupsWithState 更加灵活
- en: Furthermore, the bloom approach lends itself to more interesting use cases.
    For example, say you want to remember the tags of not only your parent, but also
    of your parent’s parent. This would be rather difficult to do using stream-stream
    join. How many times do you join?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，bloom 方法适用于更有趣的用例。例如，假设你不仅想记住你父级的标签，还想记住你父级的父级的标签。这使用流-流连接可能会相当困难。你要连接多少次？
- en: With a simple tweak, we can support propagating ancestor tags. In the illustration
    above, at row 2, we pulled bloom key `300.pr1_filter_msiexec_syswow64` and the
    value in the column `pr1_filter_msiexec_syswow64`. To support ancestors, we put
    that tag back into the bloom, but using our `e_key` value from row 2\. Thus, we
    store the bloom key `600.pr1_filter_msiexec_syswow64` .
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单的调整，我们可以支持传播祖先标签。在上面的示例中，在第2行，我们提取了 bloom 键 `300.pr1_filter_msiexec_syswow64`
    和列中的值 `pr1_filter_msiexec_syswow64`。为了支持祖先标签，我们将该标签重新放入 bloom 中，但使用第2行的 `e_key`
    值。因此，我们存储了 bloom 键 `600.pr1_filter_msiexec_syswow64`。
- en: '![](../Images/7b07afcf627266436211cf8aa81cfdf7.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b07afcf627266436211cf8aa81cfdf7.png)'
- en: Now, suppose we get a child process 900 (a grand-child of process 300). As before,
    we pull using our parent key `pe_key` (600), forming the bloom key `600.pr1_filter_msiexec_syswow64`
    and thus effectively pulling our grand-parent’s tag.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们得到一个子进程900（进程300的孙子）。如前所述，我们使用我们的父键 `pe_key`（600）进行提取，形成 bloom 键 `600.pr1_filter_msiexec_syswow64`，从而有效地提取我们祖父的标签。
- en: Beyond Parent-Child Relationships
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超越父子关系
- en: 'So far we have concentrated on parent-child relationships. However, by storing
    and retrieving tags, we can also support [temporal proximity correlation](https://github.com/SigmaHQ/sigma-specification/blob/version_2/Sigma_meta_rules.md#temporal-proximity-temporal).
    Temporal proximity correlation is an new feature of the upcoming Sigma specification.
    The example given in the specification is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们集中于父子关系。然而，通过存储和检索标签，我们还可以支持 [时间邻近关联](https://github.com/SigmaHQ/sigma-specification/blob/version_2/Sigma_meta_rules.md#temporal-proximity-temporal)。时间邻近关联是即将发布的Sigma规范中的一项新功能。规范中给出的示例如下：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This rule states that 3 events (recon_cmd_a/b/c) must occur inside a window
    of time. These events don’t have to be in any specific order.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该规则规定，3个事件（recon_cmd_a/b/c）必须发生在一个时间窗口内。这些事件不必按任何特定顺序出现。
- en: As we did before, we can represent these events as tags and use a bloom per
    host (per ComputerName). Rather then using the columns `e_key`/`pe_key` (parent/chil),
    we use the column `User`. The column `User` gives context to the composite keys
    that we store and retrieve from the bloom filter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所做的，我们可以将这些事件表示为标签，并对每个主机（每个ComputerName）使用一个布隆过滤器。我们使用列`User`，而不是使用列`e_key`/`pe_key`（父/子）。列`User`为我们存储和从布隆过滤器中检索的复合键提供了上下文。
- en: '![](../Images/8bbcf57bced8bb0fa2e8054ef2041428.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8bbcf57bced8bb0fa2e8054ef2041428.png)'
- en: On the first row, we see `recon_cmd_b` is true so we store it in the bloom using
    `User` as the context, thus we store it under `Alice.recon_cmd_b`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们看到`recon_cmd_b`为真，因此我们使用`User`作为上下文将其存储在布隆过滤器中，从而将其存储在`Alice.recon_cmd_b`下。
- en: 'On the second row, we see `recon_cmd_a` is true so we store it under `Alice.recon_cmd_a`.
    At every row we always attempt to pull keys: `Alice.recon_cmd_a`, `Alice.recon_cmd_b`
    and `Alice.recond_cmd_c`. Thus `recom_cmd_b` is updated to true.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，我们看到`recon_cmd_a`为真，因此我们将其存储在`Alice.recon_cmd_a`下。在每一行中，我们总是尝试提取键：`Alice.recon_cmd_a`、`Alice.recon_cmd_b`和`Alice.recond_cmd_c`。因此，`recom_cmd_b`被更新为真。
- en: For the third row, we push `Alice.recond_cmd_c` and pull the other two.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第三行，我们推送`Alice.recond_cmd_c`并提取其他两个。
- en: The Sigma specification supports an `ordered` version of this correlation. Supporting
    ordered temporal proximity is also possible. To support ordered events, we **conditionally**
    pull the tags instead of **always** pulling.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Sigma规范支持这种关联的`ordered`版本。支持有序时间接近性也是可能的。为了支持有序事件，我们**有条件**地提取标签，而不是**始终**提取。
- en: If we suppose the rule above was ordered, we would change our procedure from
    always storing and pulling all keys to conditionally storing `recon_cmd_b` only
    when `recon_cmd_a` has already been seen and never storing `recon_cmd_c` .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设上述规则是有序的，我们将把程序从始终存储和提取所有键改为有条件地存储`recon_cmd_b`，仅当`recon_cmd_a`已经被看到时，并且永远不存储`recon_cmd_c`。
- en: In our next article, we will improve on our proof of concept. We will make it
    more flexible and able to support the additional use cases described above.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一篇文章中，我们将改进我们的概念验证。我们将使其更加灵活，并能够支持上述描述的附加用例。
- en: '*All images unless otherwise noted are by the author*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，否则所有图片均由作者提供*'
