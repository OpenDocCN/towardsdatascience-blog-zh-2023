["```py\nimport leafmap.foliumap as leafmap\nimport folium\nimport gradio as gr\n\ndef generate_map(center_coordinates, zoom_level):\n\n    coords = center_coordinates.split(\",\")\n    lat, lon = float(coords[0]), float(coords[1])\n    map = leafmap.Map(location=(lat,lon), tiles=\"Stamen Terrain\", zoom_start=zoom_level)\n\n    return map.to_gradio()\n```", "```py\ndemo = gr.Blocks()\n\nwith demo:\n    gr.Markdown(\"## Generate a map\")\n    with gr.Row():\n      with gr.Column():\n        # first col is for buttons\n        coordinates_input = gr.Textbox(value=\"\",label=\"Your center coordines\",lines=1)\n        zoom_level_input = gr.Dropdown(choices=[1,2,3,4,5,6,7,8,9],label=\"choose zoom level\")\n        map_button = gr.Button(\"Generate map\")\n      with gr.Column():\n        # second col is for the map\n        map_output = gr.HTML(label=\"Travel map\")\n\n    map_button.click(generate_map, inputs=[coordinates_input,zoom_level_input], outputs=[map_output])\n\n# run this in a notebook to display the UI\ndemo.queue().launch(debug=True)\n```", "```py\nimport gradio as gr\nfrom travel_mapper.TravelMapper import TravelMapperForUI, load_secrets, assert_secrets\nfrom travel_mapper.user_interface.utils import generate_generic_leafmap\nfrom travel_mapper.user_interface.constants import EXAMPLE_QUERY\n\ndef main():\n\n    # load the AP keys\n    secrets = load_secrets()\n    assert_secrets(secrets)\n\n    # set up travel mapper (see part 2)\n    travel_mapper = TravelMapperForUI(\n        openai_api_key=secrets[\"OPENAI_API_KEY\"],\n        google_maps_key=secrets[\"GOOGLE_MAPS_API_KEY\"],\n        google_palm_api_key=secrets[\"GOOGLE_PALM_API_KEY\"],\n    )\n\n    # build the UI in gradio\n    app = gr.Blocks()\n\n    # make a generic map to display when the app first loads \n    generic_map = generate_generic_leafmap()\n\n    with app:\n        gr.Markdown(\"## Generate travel suggestions\")\n\n        # make multple tabs\n        with gr.Tabs():\n            # make the first tab\n            with gr.TabItem(\"Generate with map\"):\n                # make rows 1 within tab 1\n                with gr.Row():\n                    # make column 1 within row 1\n                    with gr.Column():\n                        text_input_map = gr.Textbox(\n                            EXAMPLE_QUERY, label=\"Travel query\", lines=4\n                        )\n\n                        radio_map = gr.Radio(\n                            value=\"gpt-3.5-turbo\",\n                            choices=[\"gpt-3.5-turbo\", \"gpt-4\", \"models/text-bison-001\"],\n                            label=\"models\",\n                        )\n\n                        query_validation_text = gr.Textbox(\n                            label=\"Query validation information\", lines=2\n                        )\n\n                    # make column 2 within row 1\n                    with gr.Column():\n                        # place where the map will appear\n                        map_output = gr.HTML(generic_map, label=\"Travel map\")\n                        # place where the suggested trip will appear\n                        itinerary_output = gr.Textbox(\n                            value=\"Your itinerary will appear here\",\n                            label=\"Itinerary suggestion\",\n                            lines=3,\n                        )\n                # generate button\n                map_button = gr.Button(\"Generate\")\n\n            # make the second tab\n            with gr.TabItem(\"Generate without map\"):\n                # make the first row within the second tab\n                with gr.Row():\n                    # make the first column within the first row\n                    with gr.Column():\n                        text_input_no_map = gr.Textbox(\n                            value=EXAMPLE_QUERY, label=\"Travel query\", lines=3\n                        )\n\n                        radio_no_map = gr.Radio(\n                            value=\"gpt-3.5-turbo\",\n                            choices=[\"gpt-3.5-turbo\", \"gpt-4\", \"models/text-bison-001\"],\n                            label=\"Model choices\",\n                        )\n\n                        query_validation_no_map = gr.Textbox(\n                            label=\"Query validation information\", lines=2\n                        )\n                    # make the second column within the first row\n                    with gr.Column():\n                        text_output_no_map = gr.Textbox(\n                            value=\"Your itinerary will appear here\",\n                            label=\"Itinerary suggestion\",\n                            lines=3,\n                        )\n                # generate button\n                text_button = gr.Button(\"Generate\")\n\n        # instructions for what happens whrn the buttons are clicked \n        # note use of the \"generate_with_leafmap\" method here. \n        map_button.click(\n            travel_mapper.generate_with_leafmap,\n            inputs=[text_input_map, radio_map],\n            outputs=[map_output, itinerary_output, query_validation_text],\n        )\n        text_button.click(\n            travel_mapper.generate_without_leafmap,\n            inputs=[text_input_no_map, radio_no_map],\n            outputs=[text_output_no_map, query_validation_no_map],\n        )\n\n    # run the app\n    app.launch()\n```", "```py\nRunning on local URL:  http://127.0.0.1:7860\n```", "```py\n# Run the UI\n# run this from the top level directory of the travel mapper project\nexport PYTHONPATH=$PYTHONPATH:$(pwd)\necho \"Starting travel mapper UI\"\n$(pwd)/travel_mapper/user_interface/driver.py\n```"]