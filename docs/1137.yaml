- en: Maintaining the Quality of Your Feature Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/maintaining-the-quality-of-your-feature-store-5713236b9370?source=collection_archive---------6-----------------------#2023-03-30](https://towardsdatascience.com/maintaining-the-quality-of-your-feature-store-5713236b9370?source=collection_archive---------6-----------------------#2023-03-30)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/67d8972239569d1a0dd66035686ebc83.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals of feature stores and a few tips on how and why you should
    monitor them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://statistician-in-stilettos.medium.com/?source=post_page-----5713236b9370--------------------------------)[![Claire
    Longo](../Images/5a04940feeba1412688b4f38ec1fe974.png)](https://statistician-in-stilettos.medium.com/?source=post_page-----5713236b9370--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5713236b9370--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5713236b9370--------------------------------)
    [Claire Longo](https://statistician-in-stilettos.medium.com/?source=post_page-----5713236b9370--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1f6936fe85bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaintaining-the-quality-of-your-feature-store-5713236b9370&user=Claire+Longo&userId=1f6936fe85bb&source=post_page-1f6936fe85bb----5713236b9370---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5713236b9370--------------------------------)
    ·5 min read·Mar 30, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5713236b9370&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaintaining-the-quality-of-your-feature-store-5713236b9370&user=Claire+Longo&userId=1f6936fe85bb&source=-----5713236b9370---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5713236b9370&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmaintaining-the-quality-of-your-feature-store-5713236b9370&source=-----5713236b9370---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Since Uber [first introduced](https://www.uber.com/blog/michelangelo-machine-learning-platform/)
    the concept in 2017, the feature store has been steadily gaining popularity as
    a tool to support data scientists and machine learning engineers with the ability
    to define, discover, and access high-quality data for their machine learning projects.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82245873c37b04b7f2df588511403cb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author
  prefs: []
  type: TYPE_NORMAL
- en: From Feature Engineering To a Feature Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In machine learning projects, raw data is collected, cleaned, formatted and
    mathematically transformed into data called a “feature.” Features are required
    in many different phases of the model lifecycle including experimentation, model
    training, and model serving to get predictions from the model deployed in production
    pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Once the features are calculated, we can begin to develop our model by experimenting
    with different modeling techniques and feature sets.
  prefs: []
  type: TYPE_NORMAL
- en: When models are trained, they automatically discover patterns in the feature
    data, encode these patterns mathematically, and then use this information to make
    informed predictions.
  prefs: []
  type: TYPE_NORMAL
- en: When the model is finalized, it is deployed into production where it consumes
    feature data to both retrain and produce predictions. Model predictions are often
    either produced in batch, or in some cases in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Feature Store Fundamentals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feature stores can be thought of as a central store of precomputed features.
    This data store serves features for every step in a machine learning project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c23719f8256ade4a275e0e34550094f.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/331cec4c32708c49955bf297db8c690b.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author
  prefs: []
  type: TYPE_NORMAL
- en: Organizations utilize feature stores to streamline a few things across the data
    and ML lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: '**Centralize data**'
  prefs: []
  type: TYPE_NORMAL
- en: Feature stores provide a one-stop-shop for data that has already been collected
    from different sources and stored in a central location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a feature store, the raw data for a ML project often needs to be collected
    from multiple different data sources across the company, or even from a vendor
    or third party. This means data scientists have to identify and access multiple
    data sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clean data**'
  prefs: []
  type: TYPE_NORMAL
- en: Personally identifiable information (PII) or sensitive data that is not required
    for the ML workflow can be removed before storing it in the feature store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a feature store, data scientists would have to access sensitive data
    or create their own method to remove the sensitive data on their own when it is
    not required for their use case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Share features across models**'
  prefs: []
  type: TYPE_NORMAL
- en: The same features can often be used in multiple models across different use
    cases. The feature store calculates these features once and makes them available
    for all ML projects. data scientists can add to this feature bank over time to
    build up a store of features for other teams to reuse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a feature store, many of the same feature computations will be rewritten
    into indifferent models and pipelines. This forces data scientists to perform
    wasteful rework to recalculate features that may already exist in similar pipelines,
    and it makes it difficult to maintain consistency of the feature calculations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provide a common interface to the features**'
  prefs: []
  type: TYPE_NORMAL
- en: Part of the feature store is a standardized inference to the data itself and
    shared feature encoders for ML pipelines to help enforce consistent results across
    online and offline applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a feature store, different code or transformations could result in slightly
    unexpected or erroneous results in the model. This often manifests in online and
    offline feature skew.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduce feature latency**'
  prefs: []
  type: TYPE_NORMAL
- en: An online feature store provides precomputed features to support serving real-time
    predictions with with low latency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a feature store, features will need to be calculated at the time of
    the inference request, resulting in additional calculations needed at the time
    of the request — ultimately impacting application latency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigate feature versioning**'
  prefs: []
  type: TYPE_NORMAL
- en: Feature stores apply versioning to the data. Time traveling data snapshotting
    allows for point-in-time analysis for backtesting a model, or root causing a data
    bug.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a feature store, it can be difficult to trace back the exact state or
    value of a feature for a given point in time. This can make debugging and experimentation
    challenging if not impossible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of Feature Stores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generally, feature stores are either offered as standalone, third-party tools
    or as part of broader cloud offerings. Most Arize customers with feature stores
    in place use a purpose-built tool like Tecton, however teams wanting to build
    on top of open-source solutions have several options (i.e. Feast, Feathr). Additionally,
    cloud offerings are also available as easy add-ons to existing stacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of third-party tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Feast (Open Source)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feathr (Open Source)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tecton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hopsworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of Cloud Tools
  prefs: []
  type: TYPE_NORMAL
- en: Databricks Feature Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SageMaker Feature Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining the Quality of Your Feature Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feature stores can fail silently. When a model breaks or produces poor results,
    the root cause is often traced back to the data itself. Many common machine learning
    issues can be solved by applying the right monitoring and quality checks to the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: If that data is centralized in a single [feature store](https://arize.com/blog/feature-store/),
    it can be easier to maintain it. By applying data quality monitoring to the feature
    store, practitioners can automatically catch data issues before they impact model
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several common data issues where monitoring can make a big difference
    (full disclosure: I work for Arize, which offers monitoring tools, but these best
    practices draw from my real-world experience and apply equally to a monitoring
    platform built in-house or elsewhere).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data quality** monitors can catch issues such as missing values, change in
    data format or unexpected values (change in data cardinality). An ML observability
    platform can be used to automatically detect and alert on these types of data
    quality issues, which are common with feature data.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe4b0b8826799fa3ba38353ecd9f07be.png)'
  prefs: []
  type: TYPE_IMG
- en: '*This example shows a triggered data quality monitor for the %-empty metric
    on a model feature (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data drift** monitors can catch statistical distribution shifts due to natural
    changes over time. Drift can be measured using metrics such as PSI, [KL divergence](https://arize.com/blog-course/kl-divergence/),
    and more. An ML observability platform can be used to automatically detect and
    alert on the kind of statistical drift that is common in feature data.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3757a98e70b83064d6cd076871b969f.png)'
  prefs: []
  type: TYPE_IMG
- en: '*This example shows prediction drift between production and training data distributions
    (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, **training-serving skew** can also be identified by troubleshooting
    for data consistency between offline and online feature calculations and code.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As feature stores begin to enter the mainstream, teams are creating best practices
    to enhance their integration into ML workflows. One key area of focus is managing
    upstream data quality issues. By implementing data quality monitoring and data
    drift detection, teams can efficiently maintain their feature store while proactively
    straying ahead of model performance degradation.
  prefs: []
  type: TYPE_NORMAL
