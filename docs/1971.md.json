["```py\nfrom sklearn import datasets\n\ndigits = datasets.load_digits()\nis_zero = digits.target == 0\nX_train = digits.images[is_zero]\n\n# Flatten image grid to a vector.\nn_pixels = 64  # 8-by-8.\nX_train = X_train.reshape((-1, n_pixels))\n```", "```py\nimport jax.numpy as jnp\nimport jax.scipy as jsp\n\n# Hyperparameters of the model.\na = 2\\. * x_domain_knowledge\nb = 2.\n\ndef log_joint(θ):\n  log_likelihood = jnp.sum(jsp.stats.gamma.logpdf(θ, a, scale=1./b))\n  log_likelihood += jnp.sum(jsp.stats.poisson.logpmf(X_train, θ))\n  return log_likelihood\n```", "```py\n@partial(vmap, in_axes=(0, None, None))\ndef evidence_lower_bound(θ_i, alpha, inv_beta):\n  elbo = log_joint(θ_i) - jnp.sum(jsp.stats.gamma.logpdf(θ_i, alpha, scale=inv_beta))\n  return elbo\n```", "```py\ndef loss(Φ: dict, key):\n  \"\"\"Stochastic estimate of evidence lower bound.\"\"\"\n  alpha = jnp.exp(Φ['log_alpha'])\n  inv_beta = jnp.exp(-Φ['log_beta'])\n\n  # Sample a batch from variational distribution q.\n  batch_size = 128\n  batch_shape = [batch_size, n_pixels]\n  θ_samples = random.gamma(key, alpha , shape=batch_shape) * inv_beta\n\n  # Compute Monte Carlo estimate of evidence lower bound.\n  elbo_loss = jnp.mean(evidence_lower_bound(θ_samples, alpha, inv_beta))\n\n  # Turn elbo into a loss.\n  return -elbo_loss\n```", "```py\n# Initialise parameters using prior.\nΦ = {\n    'log_alpha': jnp.log(a),\n    'log_beta': jnp.full(fill_value=jnp.log(b), shape=[n_pixels]),\n}\n\nloss_val_grad = jit(jax.value_and_grad(loss))\noptimiser = optax.adam(learning_rate=0.2)\nopt_state = optimiser.init(Φ)\n```", "```py\nn_iter = 5_000\nkeys = random.split(random.PRNGKey(42), num=n_iter)\n\nfor i, key in enumerate(keys):\n  elbo, grads = loss_val_grad(Φ, key)\n  updates, opt_state = optimiser.update(grads, opt_state)\n  Φ = optax.apply_updates(Φ, updates)\n```", "```py\n# Extract parameters of q.\nalpha = jnp.exp(Φ['log_alpha'])\ninv_beta = jnp.exp(-Φ['log_beta'])\n\n# 1) Generate pixel-level intensities for 10 images.\nkey_θ, key_x = random.split(key)\nm_new_images = 10\nnew_batch_shape = [m_new_images, n_pixels]\nθ_samples = random.gamma(key_θ, alpha , shape=new_batch_shape) * inv_beta\n```", "```py\n# 2) Sample image from intensities.\nX_synthetic = random.poisson(key_x, θ_samples)\n```"]