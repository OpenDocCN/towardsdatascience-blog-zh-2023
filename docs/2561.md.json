["```py\nfrom rain_helpers import ALL_STATION_FILES\nSTATION_LIST_INPUT = \"/Users/chuck/Desktop/Articles/hpd_stations_used_list_1940-1950.txt\"\nALL_STATIONS = True  # use every station, or a specific list ?\n\n# Choose either all stations we know about, or a specific list of stations (usually from a previous run of this program)\n\nif (ALL_STATIONS):\n    station_files = ALL_STATION_FILES\nelse:\n    with open(STATION_LIST_INPUT, 'r') as fp:  \n        data = fp.read()\n        station_files = data.split(\"\\n\")\n        fp.close()\n```", "```py\nSKIP_COUNT = 3 # 1 = don't skip any.\n\nfor i in range (0, len(station_files), SKIP_COUNT):    \n    station_url = HPD_LOCAL_DIR + station_files[i] \n    stationDF = pd.read_csv(station_url, sep=',', header='infer', dtype=str)\n```", "```py\nHPD_CLOUD_DIR = \"https://www.ncei.noaa.gov/data/coop-hourly-precipitation/v2/access/\"  # Hourly Precipitation Data (HPD)\nHPD_LOCAL_DIR = \"/Users/chuck/Desktop/Articles/NOAA/HPD/\"\n\nstation_url = HPD_LOCAL_DIR + station_files[i]  # toggle between local and cloud\n```", "```py\n # Grab a snapshot for a self-join later. Adjust fields names to avoid confusion after the join.\n\n    stationCopyDF = stationDF\n    stationCopyDF = stationCopyDF[[\"STATION\",\"DATE\",\"DlySumToday\"]]  # keep just what we need\n    stationCopyDF = stationCopyDF.rename({\"DlySumToday\":\"DlySumOther\", \"DATE\":\"DATEother\"}, axis='columns')  \n\n    # Add in some other dates, for which we will pull in rainfall.\n\n    stationDF[\"DATE_minus9\"] = stationDF[\"DATE\"] - pd.offsets.Day(9)\n    stationDF[\"DATE_minus8\"] = stationDF[\"DATE\"] - pd.offsets.Day(8)\n    ...\n    stationDF[\"DATE_minus1\"] = stationDF[\"DATE\"] - pd.offsets.Day(1)\n    stationDF[\"DATE_plus1\"] = stationDF[\"DATE\"] + pd.offsets.Day(1)\n\n    # Join other rainfall onto base record. Adjust column names to make clear what we did.\n\n    stationDF = stationDF.merge(stationCopyDF, how='inner', left_on=[\"STATION\",\"DATE_minus9\"], right_on = [\"STATION\",\"DATEother\"])\n    stationDF = stationDF.rename({\"DlySumOther\":\"DlySum9DaysAgo\"}, axis='columns')  \n    stationDF = stationDF.drop(columns=[\"DATEother\"])\n\n    stationDF = stationDF.merge(stationCopyDF, how='inner', left_on=[\"STATION\",\"DATE_minus8\"], right_on = [\"STATION\",\"DATEother\"])\n    stationDF = stationDF.rename({\"DlySumOther\":\"DlySum8DaysAgo\"}, axis='columns')  \n    stationDF = stationDF.drop(columns=[\"DATEother\"])\n\n    ....\n\n    stationDF = stationDF.merge(stationCopyDF, how='inner', left_on=[\"STATION\",\"DATE_minus1\"], right_on = [\"STATION\",\"DATEother\"])\n    stationDF = stationDF.rename({\"DlySumOther\":\"DlySum1DayAgo\"}, axis='columns')  \n    stationDF = stationDF.drop(columns=[\"DATEother\"])\n\n    stationDF = stationDF.merge(stationCopyDF, how='inner', left_on=[\"STATION\",\"DATE_plus1\"], right_on = [\"STATION\",\"DATEother\"])\n    stationDF = stationDF.rename({\"DlySumOther\":\"DlySumTomorrow\"}, axis='columns')  \n    stationDF = stationDF.drop(columns=[\"DATEother\"])\n```", "```py\n stationDF[\"DaysOfRain\"] = 0   \n    stationDF.loc[(stationDF[\"DlySumToday\"] >= RAINY), \"DaysOfRain\"] = 1\n    stationDF.loc[(stationDF['DlySumToday'] >= RAINY) & (stationDF['DlySum1DayAgo'] >= RAINY), 'DaysOfRain'] = 2\n    stationDF.loc[(stationDF['DlySumToday'] >= RAINY) & (stationDF['DlySum1DayAgo'] >= RAINY) & (stationDF['DlySum2DaysAgo'] >= RAINY), 'DaysOfRain'] = 3\n    ... etc\n```"]