["```py\natom = ATOMClassifier(X, y=y, verbose=2, random_state=1)\n```", "```py\natom = ATOMClassifier(X, y=(-3, -2, -1), verbose=2, random_state=1)\n```", "```py\n0                        [politics]\n1               [religion, finance]\n2    [politics, finance, education]\n3                                []\n4                         [finance]\n5               [finance, religion]\n6                         [finance]\n7               [religion, finance]\n8                       [education]\n9     [finance, religion, politics]\n\nName: target, dtype: object\n```", "```py\natom.clean()\n```", "```py\n education  finance  politics  religion\n0          0        0         1         0\n1          0        1         0         1\n2          1        1         1         0\n3          0        0         0         0\n4          0        1         0         0\n5          0        1         0         1\n6          0        1         0         0\n7          0        1         0         1\n8          1        0         0         0\n9          0        1         1         1\n```", "```py\nfrom sklearn.multioutput import RegressorChain\n\natom.multioutput = RegressorChain\n```", "```py\natom.available_model()[[\"acronym\", \"model\", \"native_multioutput\"]]\n```", "```py\natom.run(models=[\"LDA\", \"RF\"], metric=\"f1\")\n```", "```py\natom.multioutput = None\n\n# MLP won't use a meta-estimator wrapper now\natom.run(models=[\"MLP\"])\n```", "```py\natom.plot_roc(target=2)\n```", "```py\natom.plot_probabilities(models=\"MLP\", target=(2, 1))\n```", "```py\nwith atom.canvas(figsize=(900, 600)):\n    atom.plot_calibration(target=0)\n    atom.plot_calibration(target=1)\n```"]