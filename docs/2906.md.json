["```py\nimport spacy\n\nnlp = spacy.load(\"en_core_web_lg\")\ntext = \"Applicant's name is John Doe and he lives in Silver St. \\\n        and his phone number is 555-123-1290\"\ndoc = nlp(text)\n\ndisplacy.render(doc, style=\"ent\", jupyter=True)\n```", "```py\nent_positions = [(ent.start_char, ent.end_char) for ent in doc.ents]\n\nfor start, end in reversed(ent_positions):\n    text = text[:start] + '#' * (end - start) + text[end:]\n\nprint(text)\n```", "```py\nApplicant's name is ######## and his he lives in ###################and his phone number is ###-123-1290\n```", "```py\nfrom presidio_analyzer import AnalyzerEngine\n\ntext=\"\"\"\nApplicant's name is John Doe and his he lives in Silver St.\nand his phone number is 555-123-1290.\n\"\"\"\n\nanalyzer = AnalyzerEngine()\nresults = analyzer.analyze(text=text,\n                           language='en')\nfor result in results:\n  print(f\"PII Type={result.entity_type},\",\n        f\"Start offset={result.start},\",\n        f\"End offset={result.end},\",\n        f\"Score={result.score}\")\n```", "```py\nPII Type=PERSON, Start=21, End=29, Score=0.85\nPII Type=LOCATION, Start=50, End=60, Score=0.85\nPII Type=PHONE_NUMBER, Start=85, End=97, Score=0.75\n```", "```py\nfrom presidio_anonymizer import AnonymizerEngine\n\nanonymizer = AnonymizerEngine()\nanonymized_text = anonymizer.anonymize(text=text,analyzer_results=results)\nprint(anonymized_text.text)\n```", "```py\nApplicant's name is <PERSON> and his he lives in <LOCATION>\nand his phone number is <PHONE_NUMBER>.\n```", "```py\nfrom presidio_anonymizer import AnonymizerEngine\nfrom presidio_anonymizer.entities import OperatorConfig\n\noperators = dict()\n\n# assuming `results` is the output of PII entity detection by `AnalyzerEngine`\nfor result in results:\n  operators[result.entity_type] = OperatorConfig(\"mask\", \n                                 {\"chars_to_mask\": result.end - result.start, \n                                  \"masking_char\": \"*\", \n                                  \"from_end\": False})\n\nanonymizer = AnonymizerEngine()\nanonymized_results = anonymizer.anonymize(\n    text=text, analyzer_results=results, operators=operators\n)\n\nprint(anonymized_results.text)\n```", "```py\nApplicant's name is ******** and he lives in ********** and his phone number is ************.\n```", "```py\nfrom transformers import pipeline\n\ntext = [\"This was a masterpiece. Not completely faithful to the books, but enthralling from beginning to end. Might be my favorite of the three.\", \n        \"I wish i could kill that bird, I hate it.\"]\n\nclassifier = pipeline(\"text-classification\", model=\"tensor-trek/distilbert-toxicity-classifier\")\nclassifier(text)\n```", "```py\n[\n  {'label': 'NEUTRAL', 'score': 0.9995143413543701},\n  {'label': 'TOXIC', 'score': 0.9622979164123535}\n]\n```", "```py\nfrom langchain import HuggingFaceHub\nfrom langchain import PromptTemplate, LLMChain\nfrom PrivacyAndSafety import PrivacyAndSafetyChain\n\nsafety_privacy = PrivacyAndSafetyChain(verbose=True,\n                                       pii_labels = [\"PHONE_NUMBER\", \"US_SSN\"])\n\ntemplate = \"\"\"{question}\"\"\"\n\nprompt = PromptTemplate(template=template, input_variables=[\"question\"])\nllm = HuggingFaceHub(\n    repo_id=repo_id, model_kwargs={\"temperature\": 0.5, \"max_length\": 256}\n)\n\nchain = (\n    prompt \n    | safety_privacy \n    | {\"input\": (lambda x: x['output'] ) | llm}\n    | safety_privacy \n)\n\ntry:\n    response = chain.invoke({\"question\": \"\"\"What is John Doe's address, phone number and SSN from the following text?\n\nJohn Doe, a resident of 1234 Elm Street in Springfield, recently celebrated his birthday on January 1st. Turning 43 this year, John reflected on the years gone by. He often shares memories of his younger days with his close friends through calls on his phone, (555) 123-4567\\. Meanwhile, during a casual evening, he received an email at johndoe@example.com reminding him of an old acquaintance's reunion. As he navigated through some old documents, he stumbled upon a paper that listed his SSN as 338-12-6789, reminding him to store it in a safer place.\n\"\"\"})\nexcept Exception as e:\n    print(str(e))\nelse:\n    print(response['output'])\n```", "```py\n> Entering new PrivacyAndSafetyChain chain...\nRunning PrivacyAndSafetyChain...\nChecking for Toxic content...\nChecking for PII...\n\n> Finished chain.\n\n> Entering new PrivacyAndSafetyChain chain...\nRunning PrivacyAndSafetyChain...\nChecking for Toxic content...\nChecking for PII...\n\n> Finished chain.\n1234 Elm Street, **************, ***********\n```"]