- en: How to Read and Write Data from/to the Quip Spreadsheet using Quip Python APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-read-and-write-data-from-to-the-same-quip-spreadsheet-using-quip-apis-in-python-48f4db96bf72?source=collection_archive---------8-----------------------#2023-11-17](https://towardsdatascience.com/how-to-read-and-write-data-from-to-the-same-quip-spreadsheet-using-quip-apis-in-python-48f4db96bf72?source=collection_archive---------8-----------------------#2023-11-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We analysts are often asked to provide a solution that can enable the end-user
    to provide their inputs that can then be used as overrides/additional context
    in the final analytical solution.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ishagarg2010.medium.com/?source=post_page-----48f4db96bf72--------------------------------)[![Isha
    Garg](../Images/bb9632981e38c7bb4f3df7f812e548e4.png)](https://ishagarg2010.medium.com/?source=post_page-----48f4db96bf72--------------------------------)[](https://towardsdatascience.com/?source=post_page-----48f4db96bf72--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----48f4db96bf72--------------------------------)
    [Isha Garg](https://ishagarg2010.medium.com/?source=post_page-----48f4db96bf72--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F48cdabd739e9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-read-and-write-data-from-to-the-same-quip-spreadsheet-using-quip-apis-in-python-48f4db96bf72&user=Isha+Garg&userId=48cdabd739e9&source=post_page-48cdabd739e9----48f4db96bf72---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----48f4db96bf72--------------------------------)
    ·7 min read·Nov 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F48f4db96bf72&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-read-and-write-data-from-to-the-same-quip-spreadsheet-using-quip-apis-in-python-48f4db96bf72&user=Isha+Garg&userId=48cdabd739e9&source=-----48f4db96bf72---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F48f4db96bf72&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-read-and-write-data-from-to-the-same-quip-spreadsheet-using-quip-apis-in-python-48f4db96bf72&source=-----48f4db96bf72---------------------bookmark_footer-----------)![](../Images/3a4b61ac25e63da7826df3dcacd6f1dc.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Chris Ried](https://unsplash.com/@cdr6934?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take an example of an e-commerce shopping app. They have a logic in the
    system that will blacklist a supplier once they get 100 negative customer ratings.
    Now, there may be scenarios when the negative rating was due to the in-app experience
    or delivery/return experience. So, to maintain fairness, the supplier is given
    the option to contest the blacklisting once in six months. For the sake of this
    article, let’s assume the approval/rejection is recorded in an offline spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: All new appeals to retract black listings created in a week are exported to
    a spreadsheet and sent out to the team for review. The team reviews the data and
    approves or rejects it. They then send the data back to be updated in the system.
    This is a weekly exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this manual intervention data needs to be added to the system. There are
    various ways to do it. The individual users can upload their data to an s3 bucket
    which can then be scheduled to be read into the database. Or we can use quip so
    that all individuals can update the same spreadsheet run-time and this can be
    uploaded in the database on a fixed cadence.
  prefs: []
  type: TYPE_NORMAL
- en: Quip is a collaborative software that lets multiple people edit documents, spreadsheets
    on-the go allowing them freedom to use any end client — desktop/mobile.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article, I am going to show you how I automated a quip spreadsheet to
    read the user-entered data, upload it to a database table, and then write back
    to the same spreadsheet with new data. I am going to use Redshift as the database
    for this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: There are two separate parts this task can be split into. First, read the data
    from the Quip spreadsheet and store it in a table in the database. Second, we
    would be doing some data manipulation or checks on this and joining with pre-existing
    data in the database and then writing that manipulated data to an already existing
    quip spreadsheet. We will look at these two cases individually so that in case
    you only want to read or only write then this article will help you in doing that
    as well. Let’s look at the first part.
  prefs: []
  type: TYPE_NORMAL
- en: Part 1 — Reading the data from Quip Spreadsheet and writing to a table in the
    database.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Step 1: Getting access token to connect to Quip using Quip APIs.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to generate an access token that provides API access to our personal
    Quip account. To generate a personal access token, visit this page: https://quip.com/dev/token.
    If you have a corporate SSO-enabled quip account, then the URL will slightly differ
    like — https://quip-corporate.com/dev/token'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/278d8b150a4f1c90012c4fd343cc5082.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on the Get Personal Access Token button above, you will get a
    token which we will use in later sections to access the quip spreadsheet using
    the APIs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: Import the libraries**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s import the required libraries first. For this part, we are primarily going
    to be using *quipclient* and *pandas_redshift* libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 3: Connecting to Quip using the token ID**'
  prefs: []
  type: TYPE_NORMAL
- en: The QuipClient API needs the base URL, thread ID, and access token to access
    any file. The base URL is the URL of the quip server you are trying to read from
    (or write to). In the case of corporate accounts, this will generally have the
    name of corporate in the URL. A thread ID is a unique identifier for all files
    on the Quip server. It is the alphanumeric value after the base URL of the target
    file, in this case, a spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: If the URL for a file looks like — https://platform.quip-XXXXXXXXX.com/abcdefgh1234/,
    then the base URL will be — https://platform.quip-XXXXXXXXX.com and the thread_id
    will be — abcdefgh1234.
  prefs: []
  type: TYPE_NORMAL
- en: The access token is the one we just generated in Step 1.
  prefs: []
  type: TYPE_NORMAL
- en: Now, using the QuipClient API, we connect to the URL using the access token
    and thread_id.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 4: Reading the data from quip in a dataframe**'
  prefs: []
  type: TYPE_NORMAL
- en: The *rawdictionary* output from Step 3 above returns a list of HTML’s. Pandas
    function *read_html* will help read the HTML portion to the dataframe dfs. So,
    dfs is a list of dataframes. Each dataframe in this list contains the data from
    each tab in the quip spreadsheet. In this example, we are considering data from
    the last tab only. Hence, the index -1 is used to fetch the last dataframe in
    *raw_df*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 5: Connecting to database to write the data to a table**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access a Redshift instance, we need the [Redshift Endpoint URL](http://docs.aws.amazon.com/redshift/latest/gsg/rs-gsg-connect-to-cluster.html).
    For example, instances will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We connect to the database and write the dataframe (created in step 4) to a
    new or an existing table. The *pandas_to_redshift* function allows you to append
    the data to an existing table or overwrite it altogether. Please note that if
    you select *append = False*, then the table will be dropped and re-created every
    time this operation is performed. In case you want to maintain the data types
    or char length of certain columns or user permissions while overwriting the data,
    it is better to truncate the table before running this operation. You can truncate
    by issuing a direct Truncate command. *SQLAlchemy* and *psycopg2* are easier options
    to do this. After truncating the table, you can run the operation with *append
    = True.* I generally use *append=True* for type 2 tableswhere I need to maintain
    historical data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This completes the first part where you read the data from a quip spreadsheet
    and write to a redshift table. Now, let’s look at the second part.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2 : Writing data to an existing Quip Spreadsheet.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this part, the first three steps remain the same as Part 1\. So, please
    follow steps 1, 2, and 3 from above. We will start from STEP 4 here.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 4: Connecting to the database to read data**'
  prefs: []
  type: TYPE_NORMAL
- en: We will use *psycopg2* here to connect to the Redshift instance and read the
    data from the Redshift table which needs to be written to Quip Spreadsheet. Here,
    I am converting the dataframe to markdown to get a clean table which is also a
    pre-requisite of QuipClient library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 5: Writing the data to Quip File**'
  prefs: []
  type: TYPE_NORMAL
- en: To write the data to Quip Spreadsheet, you can use the *edit_document* function
    from the *QuipClient* library. This function has multiple parameters. Format can
    be either HTML or markdown. The default is HTML and that is why we converted the
    dataframe to markdown in Step 4\. You need to specify the *section_id* and *location*
    to specify where you want to add data — append, pre-pend, after/before a particular
    section, etc. For this particular scenario, I wanted to just append the data to
    a new tab in the existing spreadsheet. You can read more about it [here](https://quip.com/dev/automation/documentation/current#tag/Use-cases).
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the operation is performed but the script still fails due to a delay
    in the API response. The try-except error block is to catch any timeout errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And we are done!
  prefs: []
  type: TYPE_NORMAL
- en: I hope you find this article helpful. Please don’t hesitate to reach out in
    case you have any additional questions.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '*Until next time…*'
  prefs: []
  type: TYPE_NORMAL
