- en: The Hidden World of (Vector) Indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/the-hidden-world-of-vector-indexes-f320a626c3dd?source=collection_archive---------2-----------------------#2023-11-15](https://towardsdatascience.com/the-hidden-world-of-vector-indexes-f320a626c3dd?source=collection_archive---------2-----------------------#2023-11-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Everything you always wanted to know about (vector) indexes but were afraid
    to ask.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)[![Olivier
    Ruas](../Images/84f565f256321de6ddc6e32b86eb2f42.png)](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)
    [Olivier Ruas](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffac3becb3fd6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&user=Olivier+Ruas&userId=fac3becb3fd6&source=post_page-fac3becb3fd6----f320a626c3dd---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)
    ¬∑11 min read¬∑Nov 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff320a626c3dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&user=Olivier+Ruas&userId=fac3becb3fd6&source=-----f320a626c3dd---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff320a626c3dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&source=-----f320a626c3dd---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the public release of ChatGPT, hardly one day has passed without new
    content discussing LLMs, RAGs, and vector databases. The technology world buzzes
    with the possibilities of LLMs, seen as the latest technology that will change
    our lives: for the best for some, for the worst for others. Alongside them, Retrieval
    Augmented Generation (RAG) has emerged as a dynamic solution to adapt to the ever-changing
    landscape of knowledge. But there‚Äôs a crucial player behind the scenes: vector
    indexes and databases.'
  prefs: []
  type: TYPE_NORMAL
- en: While LLMs, RAGs, and vector databases are intensively discussed, the (vector)
    indexes that empower these innovations are less known. In this article, we‚Äôll
    demystify the concept of indexes to help you understand how an index makes finding
    information in vast collections a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. What is an index?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We all have encountered such a situation. You are meeting with your friend
    at her place. The only information she gave you is ‚ÄúI live in Metro Town district‚Äù.
    When you arrive at the said Metro Town district:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/caaa02848c67c82b34c512540097a3c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Manson Yim](https://unsplash.com/@mansonyms?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Well, without any help, finding her place will take a while! If only there were
    a map at the entrance‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: '**This is precisely what indexes are about: how to quickly find where people
    (or data) are.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Yellow Pages](https://www.yellowpages.com/) are an index that allows you to
    find people‚Äôs home based on their names.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An index is a data structure made to improve the speed of data retrieval operations
    over data. In other words, it is how you organize information so that you can
    quickly find what you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: The data is indexed using **keys**. The order is based on the keys, and multiple
    keys can be used. In Yellow Pages, the first key is the family name, and the second
    is the first name.
  prefs: []
  type: TYPE_NORMAL
- en: The index does not necessarily store the whole data. It only focuses on the
    critical parts used to quickly locate and access specific pieces of data within
    the entire data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The index at the end of the book is a good example: it shows you where to find
    pages using the word, so it maps each word to page numbers and not to the sentences
    themselves.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Indexes are behind search engines and databases: they play a crucial role
    in improving the efficiency and speed of data retrieval operations.**'
  prefs: []
  type: TYPE_NORMAL
- en: The choice of how to organize your data is critical and depends on the context.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the example of Yellow Pages, if the indexes were organized by
    phone numbers instead, and you only knew the names, finding their addresses would
    be quite challenging!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/61615a1e35328f4e00f6e1967da73029.png)'
  prefs: []
  type: TYPE_IMG
- en: The information is there; you will find it eventually, but the required time
    will prevent you from even trying. On the other hand, using Yellow Pages, one
    glance at the page lets you know precisely if you need to look backward or forward!
    The lexicographic order allows you to make a roughly logarithmic search. That‚Äôs
    why the choice of the index is essential.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, an index has a very precise purpose: it can be designed to perform
    quick insertions or retrievals of the data or a more exotic query such as a range
    query (‚Äúretrieve all the data dated between the 1st of May and the 15th of August
    of this year‚Äù). The choice of the operation to optimize will determine what the
    index will look like.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main difference between online transactional processing (OLTP) and online
    analytical processing (OLAP) databases is the choice of the operations they want
    to optimize: OLTP focuses on operations over rows (like updating an entry), while
    the other is aimed at operations over columns (computing an average for example).
    Both databases will not use the same indexes as they do not aim at the same operations.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 What is the difference between indexes and data structures?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: üí°A [data structure](https://w.wiki/7ma9) is a way of organizing and storing
    data in a computer so that it can be efficiently accessed and manipulated. Explained
    like this, the difference between indexes and data structures is sometimes hard
    to see, so what are the differences? Indexes focus on inserting, searching, sorting,
    or filtering data. Data structures are more generic.
  prefs: []
  type: TYPE_NORMAL
- en: '**Indexes are built using data structures but typically do not store the data
    itself.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you consider a database of movies, you don‚Äôt want to move around large files
    whenever the index is updated: you store *a pointer* to the file, not the file
    itself. A pointer can be seen as the address of the file on the disk.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have a general idea about what an index is, let‚Äôs focus on numeric
    examples. Here are some common (numeric) indexes:'
  prefs: []
  type: TYPE_NORMAL
- en: Inverted index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash indexes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B-trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locality-sensitive-Hashing (LSH).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To better understand how indexes work, let‚Äôs explore one of the most basic
    indexes: the inverted index.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Inverted index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The inverted index is a standard index used in search engines.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is designed to find where the information is quickly: it aims at optimizing
    the retrieval time.'
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, an inverted index maps contents to their locations, a bit like
    the index of a book.
  prefs: []
  type: TYPE_NORMAL
- en: It is often used to map a characteristic to the data that have it.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you want to know who lives in the same building.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you should have a table where, for each name, you have the building
    (the table that would have helped you to find Alice):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2db595269580a005da33dc5a44cde5e0.png)'
  prefs: []
  type: TYPE_IMG
- en: This table is updated whenever a person arrives or leaves the district.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find who lives in building B in this table, you have to iterate
    through the whole table.
  prefs: []
  type: TYPE_NORMAL
- en: While it is technically possible, it won‚Äôt scale as the computation time will
    linearly increase with the size of the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think about the number of apartments in the district: if you want to find all
    the persons who live in building B by checking all the profiles one by one, it
    will take a while!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another solution is to use an inverted index: you maintain a table where the
    buildings are used as keys and connected to the people living in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/085db2298e6a0b7260a2bdff98138368.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This table is maintained simultaneously as the previous one: the cost to add
    or remove a new person is slightly higher than before, but the retrieval time
    has shrunk to nearly nothing!'
  prefs: []
  type: TYPE_NORMAL
- en: To find who lives in building B, you simply need to access this table‚Äôs line
    ‚ÄúBuilding B‚Äù and have your result!
  prefs: []
  type: TYPE_NORMAL
- en: A reverse phone Lookup is a reverse index of phone numbers!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In practice, inverted indexes are a bit more complicated as they manipulate
    more complex data than pair (user, interest). The indexes are typically stored
    as [hash tables](https://w.wiki/7mdQ).
  prefs: []
  type: TYPE_NORMAL
- en: Despite their relative simplicity, inverted indexes are among the most common
    indexes used in search engines.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Indexes and Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Databases are built over indexes. The indexes enhance data retrieval in the
    database by storing pointers or references to the database‚Äôs data. It does not
    store the actual data but acts as a means to quickly access it, significantly
    improving query performance.
  prefs: []
  type: TYPE_NORMAL
- en: The database is more than the index as it is a comprehensive system for data
    management. It stores, organizes, and manages the actual data, enforces data integrity,
    handles transactions, and provides a range of features beyond indexing, making
    it a central hub for data storage and manipulation. While indexes speed up data
    retrieval within databases, databases serve as the complete ecosystem for data
    storage, management, and retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d4764aecef1840c6f559651c7169d74.png)'
  prefs: []
  type: TYPE_IMG
- en: In summary, indexes are like signposts in a database, pointing the way to the
    data you seek. In contrast, databases are the repositories where the actual data
    resides and are equipped with various tools and features to manage and manipulate
    that data.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your use case, you may not need an entire database but only the
    indexes, as the overlay managing the data may be costly.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Vector indexes and vector databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1 What is a vector index?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a nutshell, **a vector index is an index where the keys are vectors**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our reversed index example, the keys were words (hobbies and names). In
    vector indexes, we manipulate vectors: fixed-size sequences of numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/35ff2ef33bf4f915ac11e3a045afe67e.png)'
  prefs: []
  type: TYPE_IMG
- en: Two vectors of size 4.
  prefs: []
  type: TYPE_NORMAL
- en: I know, I know, I can hear you say, ‚ÄúI‚Äôm bad at math, I don‚Äôt want to use vectors‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: Don‚Äôt worry, you don‚Äôt need to be good at math to understand vector indexes.
  prefs: []
  type: TYPE_NORMAL
- en: All you need to know is that using vectors enables you to rely on powerful and
    optimized operations.
  prefs: []
  type: TYPE_NORMAL
- en: The first question you might ask yourself is, ‚ÄúWhat is so interesting about
    your vectors‚Äù?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs say that you finally found Alice at her place, and now you want to find
    something to eat. You may want to find the nearest restaurant. You look for a
    list of restaurants and end up with a table of restaurants, specialties, and addresses.
    Let‚Äôs take a look at the information you can find:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7c07b731c47ce75030b0be8b72f98315.png)'
  prefs: []
  type: TYPE_IMG
- en: This doesn‚Äôt look helpful right? Your only option is to scan through the list,
    reading addresses one by one and manually assessing how close it is to you. We
    could try to automate the ranking of the nearest place, but computing distances
    based on raw addresses is difficult (two streets may be nearby but have different
    names).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, imagine now that you have a table with GPS positions representing
    each restaurant‚Äôs exact latitude and longitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57e546e41d73fe4d44dc837f97fed7bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Each position is a vector of size 2\. With those vectors, you can easily compute
    the distance to your own position with a simple *-and fast-* mathematical operation.
    Then you can quickly retrieve the closest ones, in other words, the one with the
    smallest distance to you!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/13067bc197132defec5969f7a2b30174.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can easily find the closest restaurant to you!
  prefs: []
  type: TYPE_NORMAL
- en: The interesting point is that by indexing the table directly by the vector (the
    GPS Position in this example), we can optimize the index so that finding the entries
    with the lowest distance is extremely fast.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vector indexes are specialized indexes designed to efficiently retrieve vectors
    that are closest, or the most similar, to a given vector. These indexes rely on
    optimized mathematical operations to efficiently identify the most similar vectors.**'
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the distance used was the classical distance, but there are
    indexes for all the existing distances or similarities, such as the cosine similarity
    metric.
  prefs: []
  type: TYPE_NORMAL
- en: '[Locality Sensitive Hashing (LSH)](https://pathway.com/developers/showcases/lsh/lsh_chapter2)
    is one of the most widely used indexes to find the k most similar data points
    in a dataset, and it works with different distances or similarities.'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúThat‚Äôs nice, but I‚Äôm not using vectors in my database‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: 'That‚Äôs the exciting part: you can transform anything into a vector.'
  prefs: []
  type: TYPE_NORMAL
- en: Simply taking the binary representation would be inefficient since it may contain
    noise, so it‚Äôs essential to find a representation that preserves the characteristics
    of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Representing different information as a vector to use vector indexes has become
    a standard way to improve the efficiency of a system. Vectorization has become
    an art.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you have an image dataset and you want a database where you
    can find the images the most similar to a given one, you can use the SIFT descriptor
    of the images.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 What is the difference between Vector Indexes and Vector databases?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The difference between vector indexes and vector databases is the same as the
    difference between indexes and databases: indexes are meant to simply quickly
    find where the data is, while vector databases use vector indexes to perform the
    retrieval queries fast, but they also store and maintain the data while providing
    additional operations and properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. What is the link between LLMs and RAGs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you‚Äôve learned about vector indexes, you might wonder why so many discussions
    about LLMs and RAGs also discussed vector indexes. To understand why, let‚Äôs first
    quickly explain what Retrieval Augmented Generation, or RAG, is. AG serves as
    a clever workaround for one of the inherent limitations of LLMs, namely, their
    limited knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'LLMs are only aware of the data they were trained on. One technique to increase
    their knowledge is *prompt engineering,* where additional data is integrated into
    the query prompt: ‚ÄúGiven this data {data}, answer this question: {question}‚Äù.'
  prefs: []
  type: TYPE_NORMAL
- en: 'While effective, this approach faces a new challenge: scalability. Not only
    the size of the prompt is limited, but the more data you include, the more costly
    the query becomes.'
  prefs: []
  type: TYPE_NORMAL
- en: To overcome this, Retrieval Augmented Generation limits the quantity of data
    by only inserting the most similar data, which is where vector indexes come into
    play!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs how it works: All the documents are initially transformed into vectors
    using LLMs (1). To be more specific, the encoder part of the LLM is used.'
  prefs: []
  type: TYPE_NORMAL
- en: These vectors are used as keys for indexing the documents in a vector index
    (2).
  prefs: []
  type: TYPE_NORMAL
- en: When doing a query, the query is vectorized using the LLM (3). The resulting
    vector is then queried in the vector index to retrieve the most similar documents
    (4). These documents are then used to answer the query using prompt engineering
    (5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e1970f264443b02529b03fdd905421d.png)'
  prefs: []
  type: TYPE_IMG
- en: Retrieval-Augmented Generation (RAG) relies on both LLMs and vector indexes.
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs it!
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, similarly to LLM, the vector index holds a central position
    in RAGs.
  prefs: []
  type: TYPE_NORMAL
- en: Some people prefer to use a vector database instead of a vector index. That‚Äôs
    okay whenever you want to reuse the same data in multiple applications. However,
    if your primary concern is retrieval efficiency or flexibility in defining the
    index for each application, a single vector index is often simpler and faster
    to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations to the courageous who have read until there! I believe you now
    have all the background knowledge to engage in those passionate discussions about
    LLMs and RAGs.
  prefs: []
  type: TYPE_NORMAL
- en: Indexes hold a central role in data retrieval. As data retrieval is likely to
    remain a key component of data technologies, it is primordial to understand what
    indexes, including vector indexes, are about.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn about more advanced indexes, I‚Äôd suggest you read [my article
    about LSH](https://pathway.com/developers/showcases/lsh/lsh_chapter2). If you
    want to learn something more practical and are curious to experience real-time
    Retrieval Augmented Generation (RAG) in action, consider exploring the [LLM-app](https://github.com/pathwaycom/llm-app),
    where you can experience firsthand the power of these technologies.
  prefs: []
  type: TYPE_NORMAL
