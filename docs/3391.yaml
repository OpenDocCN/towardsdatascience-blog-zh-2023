- en: The Hidden World of (Vector) Indexes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: （向量）索引的隐藏世界
- en: 原文：[https://towardsdatascience.com/the-hidden-world-of-vector-indexes-f320a626c3dd?source=collection_archive---------2-----------------------#2023-11-15](https://towardsdatascience.com/the-hidden-world-of-vector-indexes-f320a626c3dd?source=collection_archive---------2-----------------------#2023-11-15)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-hidden-world-of-vector-indexes-f320a626c3dd?source=collection_archive---------2-----------------------#2023-11-15](https://towardsdatascience.com/the-hidden-world-of-vector-indexes-f320a626c3dd?source=collection_archive---------2-----------------------#2023-11-15)
- en: Everything you always wanted to know about (vector) indexes but were afraid
    to ask.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你总是想了解关于（向量）索引的所有信息，但又害怕询问。
- en: '[](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)[![Olivier
    Ruas](../Images/84f565f256321de6ddc6e32b86eb2f42.png)](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)
    [Olivier Ruas](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)[![Olivier
    Ruas](../Images/84f565f256321de6ddc6e32b86eb2f42.png)](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)
    [Olivier Ruas](https://medium.com/@oruas?source=post_page-----f320a626c3dd--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffac3becb3fd6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&user=Olivier+Ruas&userId=fac3becb3fd6&source=post_page-fac3becb3fd6----f320a626c3dd---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)
    ·11 min read·Nov 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff320a626c3dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&user=Olivier+Ruas&userId=fac3becb3fd6&source=-----f320a626c3dd---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffac3becb3fd6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&user=Olivier+Ruas&userId=fac3becb3fd6&source=post_page-fac3becb3fd6----f320a626c3dd---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f320a626c3dd--------------------------------)
    · 11分钟阅读 · 2023年11月15日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff320a626c3dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&user=Olivier+Ruas&userId=fac3becb3fd6&source=-----f320a626c3dd---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff320a626c3dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&source=-----f320a626c3dd---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff320a626c3dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-hidden-world-of-vector-indexes-f320a626c3dd&source=-----f320a626c3dd---------------------bookmark_footer-----------)'
- en: 'Since the public release of ChatGPT, hardly one day has passed without new
    content discussing LLMs, RAGs, and vector databases. The technology world buzzes
    with the possibilities of LLMs, seen as the latest technology that will change
    our lives: for the best for some, for the worst for others. Alongside them, Retrieval
    Augmented Generation (RAG) has emerged as a dynamic solution to adapt to the ever-changing
    landscape of knowledge. But there’s a crucial player behind the scenes: vector
    indexes and databases.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 自从ChatGPT公开发布以来，几乎没有一天不讨论LLM、RAG和向量数据库。技术界对LLM的可能性感到兴奋，这被视为改变我们生活的最新技术：对一些人来说是最好的，对另一些人来说是最坏的。与此同时，检索增强生成（RAG）作为一种动态解决方案应对不断变化的知识领域。但在幕后有一个关键的角色：向量索引和数据库。
- en: While LLMs, RAGs, and vector databases are intensively discussed, the (vector)
    indexes that empower these innovations are less known. In this article, we’ll
    demystify the concept of indexes to help you understand how an index makes finding
    information in vast collections a breeze.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管LLM、RAG和向量数据库被广泛讨论，但支持这些创新的（向量）索引却鲜为人知。在这篇文章中，我们将揭示索引的概念，帮助你理解索引如何让在浩瀚的数据集中查找信息变得轻松自如。
- en: 1\. What is an index?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 什么是索引？
- en: 'We all have encountered such a situation. You are meeting with your friend
    at her place. The only information she gave you is “I live in Metro Town district”.
    When you arrive at the said Metro Town district:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都遇到过这种情况。你正在你朋友家见面。她给你的唯一信息是“我住在地铁镇区”。当你到达所说的地铁镇区时：
- en: '![](../Images/caaa02848c67c82b34c512540097a3c2.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/caaa02848c67c82b34c512540097a3c2.png)'
- en: Photo by [Manson Yim](https://unsplash.com/@mansonyms?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 摄影师 [Manson Yim](https://unsplash.com/@mansonyms?utm_source=medium&utm_medium=referral)
    作品，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Well, without any help, finding her place will take a while! If only there were
    a map at the entrance…
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，没有任何帮助的话，找到她的地方会花费一段时间！如果入口处有一张地图就好了……
- en: '**This is precisely what indexes are about: how to quickly find where people
    (or data) are.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**这正是索引的目的：如何快速找到人们（或数据）的位置。**'
- en: '[Yellow Pages](https://www.yellowpages.com/) are an index that allows you to
    find people’s home based on their names.'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[黄页](https://www.yellowpages.com/) 是一个索引，允许你根据人们的名字查找他们的住址。'
- en: An index is a data structure made to improve the speed of data retrieval operations
    over data. In other words, it is how you organize information so that you can
    quickly find what you are looking for.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是一种数据结构，用于提高数据检索操作的速度。换句话说，它是你组织信息的方式，以便你能够快速找到你所寻找的内容。
- en: The data is indexed using **keys**. The order is based on the keys, and multiple
    keys can be used. In Yellow Pages, the first key is the family name, and the second
    is the first name.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是使用**键**进行索引的。排序基于键，且可以使用多个键。在黄页中，第一个键是姓氏，第二个键是名字。
- en: The index does not necessarily store the whole data. It only focuses on the
    critical parts used to quickly locate and access specific pieces of data within
    the entire data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 索引不一定存储所有数据。它只关注于关键部分，以便快速定位和访问整个数据中的特定数据片段。
- en: 'The index at the end of the book is a good example: it shows you where to find
    pages using the word, so it maps each word to page numbers and not to the sentences
    themselves.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍末尾的索引是一个很好的例子：它向你展示了如何通过单词找到页码，因此它将每个单词映射到页码，而不是句子本身。
- en: '**Indexes are behind search engines and databases: they play a crucial role
    in improving the efficiency and speed of data retrieval operations.**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**索引是搜索引擎和数据库的背后：它们在提高数据检索操作的效率和速度方面发挥了关键作用。**'
- en: The choice of how to organize your data is critical and depends on the context.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数据组织的选择至关重要，且取决于具体的上下文。
- en: For example, in the example of Yellow Pages, if the indexes were organized by
    phone numbers instead, and you only knew the names, finding their addresses would
    be quite challenging!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在黄页的例子中，如果索引是按电话号码组织的，而你只知道名字，那么找到他们的地址将会相当具有挑战性！
- en: '![](../Images/61615a1e35328f4e00f6e1967da73029.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61615a1e35328f4e00f6e1967da73029.png)'
- en: The information is there; you will find it eventually, but the required time
    will prevent you from even trying. On the other hand, using Yellow Pages, one
    glance at the page lets you know precisely if you need to look backward or forward!
    The lexicographic order allows you to make a roughly logarithmic search. That’s
    why the choice of the index is essential.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 信息在那里；你最终会找到它，但所需的时间会让你甚至不愿尝试。另一方面，使用黄页，只需一眼查看页面，你就可以准确知道是否需要往前或往后查找！字典顺序允许你进行大致对数级的搜索。这就是为什么索引的选择至关重要。
- en: 'In general, an index has a very precise purpose: it can be designed to perform
    quick insertions or retrievals of the data or a more exotic query such as a range
    query (“retrieve all the data dated between the 1st of May and the 15th of August
    of this year”). The choice of the operation to optimize will determine what the
    index will look like.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，索引有一个非常明确的目的：它可以被设计用于快速插入或检索数据，或者进行更复杂的查询，比如范围查询（“检索从今年5月1日到8月15日之间的所有数据”）。优化操作的选择将决定索引的样子。
- en: 'The main difference between online transactional processing (OLTP) and online
    analytical processing (OLAP) databases is the choice of the operations they want
    to optimize: OLTP focuses on operations over rows (like updating an entry), while
    the other is aimed at operations over columns (computing an average for example).
    Both databases will not use the same indexes as they do not aim at the same operations.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在线事务处理（OLTP）数据库与在线分析处理（OLAP）数据库之间的主要区别在于它们想要优化的操作：OLTP侧重于对行的操作（例如更新条目），而OLAP则侧重于对列的操作（例如计算平均值）。这两种数据库不会使用相同的索引，因为它们的操作目标不同。
- en: 1.1 What is the difference between indexes and data structures?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 索引和数据结构之间有什么区别？
- en: 💡A [data structure](https://w.wiki/7ma9) is a way of organizing and storing
    data in a computer so that it can be efficiently accessed and manipulated. Explained
    like this, the difference between indexes and data structures is sometimes hard
    to see, so what are the differences? Indexes focus on inserting, searching, sorting,
    or filtering data. Data structures are more generic.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 💡[数据结构](https://w.wiki/7ma9)是组织和存储计算机数据的一种方式，以便可以高效地访问和操作数据。这样解释，索引和数据结构之间的区别有时很难看出，那么它们的区别是什么？索引专注于插入、搜索、排序或过滤数据。数据结构则更为通用。
- en: '**Indexes are built using data structures but typically do not store the data
    itself.**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**索引是使用数据结构构建的，但通常不存储数据本身。**'
- en: 'If you consider a database of movies, you don’t want to move around large files
    whenever the index is updated: you store *a pointer* to the file, not the file
    itself. A pointer can be seen as the address of the file on the disk.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑一个电影数据库，你不想在每次索引更新时移动大型文件：你存储的是*指针*，而不是文件本身。指针可以被看作是文件在磁盘上的地址。
- en: 'Now that you have a general idea about what an index is, let’s focus on numeric
    examples. Here are some common (numeric) indexes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对什么是索引有了一个大概念，让我们专注于数字示例。以下是一些常见的（数字）索引：
- en: Inverted index
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 倒排索引
- en: Hash indexes
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希索引
- en: B-trees
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: B树
- en: Locality-sensitive-Hashing (LSH).
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 局部敏感哈希（Locality-sensitive-Hashing, LSH）。
- en: 'To better understand how indexes work, let’s explore one of the most basic
    indexes: the inverted index.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解索引如何工作，让我们探讨一种最基本的索引：倒排索引。
- en: 1.2 Inverted index
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 倒排索引
- en: The inverted index is a standard index used in search engines.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 倒排索引是一种在搜索引擎中使用的标准索引。
- en: 'It is designed to find where the information is quickly: it aims at optimizing
    the retrieval time.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它旨在快速找到信息：其目标是优化检索时间。
- en: In a nutshell, an inverted index maps contents to their locations, a bit like
    the index of a book.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，倒排索引将内容映射到它们的位置，有点像书籍的索引。
- en: It is often used to map a characteristic to the data that have it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常用于将特征映射到具有该特征的数据。
- en: For example, suppose you want to know who lives in the same building.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想知道谁住在同一栋楼里。
- en: 'First, you should have a table where, for each name, you have the building
    (the table that would have helped you to find Alice):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你应该有一个表，其中对于每个名字，你都有建筑物（这个表会帮助你找到爱丽丝）：
- en: '![](../Images/2db595269580a005da33dc5a44cde5e0.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2db595269580a005da33dc5a44cde5e0.png)'
- en: This table is updated whenever a person arrives or leaves the district.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表在每次有人到达或离开地区时都会更新。
- en: If you want to find who lives in building B in this table, you have to iterate
    through the whole table.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想找到谁住在这个表中的B栋楼，你必须遍历整个表。
- en: While it is technically possible, it won’t scale as the computation time will
    linearly increase with the size of the table.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在技术上是可能的，但由于计算时间会随着表的大小线性增加，因此它不会扩展。
- en: 'Think about the number of apartments in the district: if you want to find all
    the persons who live in building B by checking all the profiles one by one, it
    will take a while!'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 想想这个地区的公寓数量：如果你想通过一个个检查所有的档案来找到所有住在B栋楼的人，这会花费很长时间！
- en: 'Another solution is to use an inverted index: you maintain a table where the
    buildings are used as keys and connected to the people living in it:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是使用倒排索引：你维护一个表，其中建筑物作为键并与住在其中的人连接：
- en: '![](../Images/085db2298e6a0b7260a2bdff98138368.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/085db2298e6a0b7260a2bdff98138368.png)'
- en: 'This table is maintained simultaneously as the previous one: the cost to add
    or remove a new person is slightly higher than before, but the retrieval time
    has shrunk to nearly nothing!'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表与前一个表同时维护：添加或删除新人的成本比以前稍高，但检索时间几乎缩短为零！
- en: To find who lives in building B, you simply need to access this table’s line
    “Building B” and have your result!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找谁住在B楼，你只需要访问该表的“Building B”这一行，就能得到结果！
- en: A reverse phone Lookup is a reverse index of phone numbers!
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 反向电话查询是电话号码的倒排索引！
- en: In practice, inverted indexes are a bit more complicated as they manipulate
    more complex data than pair (user, interest). The indexes are typically stored
    as [hash tables](https://w.wiki/7mdQ).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，倒排索引要复杂一些，因为它们处理的数据比（用户，兴趣）对要复杂得多。索引通常存储为[哈希表](https://w.wiki/7mdQ)。
- en: Despite their relative simplicity, inverted indexes are among the most common
    indexes used in search engines.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管倒排索引相对简单，但它们是搜索引擎中最常用的索引之一。
- en: 1.3 Indexes and Databases
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 索引和数据库
- en: Databases are built over indexes. The indexes enhance data retrieval in the
    database by storing pointers or references to the database’s data. It does not
    store the actual data but acts as a means to quickly access it, significantly
    improving query performance.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是建立在索引之上的。索引通过存储指针或引用来增强数据库的数据检索。它不存储实际数据，而是作为一种快速访问数据的手段，大大提高了查询性能。
- en: The database is more than the index as it is a comprehensive system for data
    management. It stores, organizes, and manages the actual data, enforces data integrity,
    handles transactions, and provides a range of features beyond indexing, making
    it a central hub for data storage and manipulation. While indexes speed up data
    retrieval within databases, databases serve as the complete ecosystem for data
    storage, management, and retrieval.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库不仅仅是索引，它是一个全面的数据管理系统。它存储、组织和管理实际数据，维护数据完整性，处理事务，并提供超越索引的各种功能，使其成为数据存储和操作的核心枢纽。虽然索引加快了数据库中的数据检索，但数据库作为数据存储、管理和检索的完整生态系统存在。
- en: '![](../Images/3d4764aecef1840c6f559651c7169d74.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d4764aecef1840c6f559651c7169d74.png)'
- en: In summary, indexes are like signposts in a database, pointing the way to the
    data you seek. In contrast, databases are the repositories where the actual data
    resides and are equipped with various tools and features to manage and manipulate
    that data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，索引就像数据库中的指示牌，指引你找到所需的数据。相反，数据库是实际数据所在的存储库，并配备了各种工具和功能来管理和操作这些数据。
- en: Depending on your use case, you may not need an entire database but only the
    indexes, as the overlay managing the data may be costly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的使用场景，你可能不需要整个数据库，只需要索引，因为管理数据的覆盖层可能会很昂贵。
- en: 2\. Vector indexes and vector databases
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 向量索引和向量数据库
- en: 2.1 What is a vector index?
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.1 什么是向量索引？
- en: In a nutshell, **a vector index is an index where the keys are vectors**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，**向量索引就是键是向量的索引**。
- en: 'In our reversed index example, the keys were words (hobbies and names). In
    vector indexes, we manipulate vectors: fixed-size sequences of numbers.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的倒排索引示例中，键是单词（爱好和名字）。在向量索引中，我们处理的是向量：固定大小的数字序列。
- en: '![](../Images/35ff2ef33bf4f915ac11e3a045afe67e.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/35ff2ef33bf4f915ac11e3a045afe67e.png)'
- en: Two vectors of size 4.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 两个大小为4的向量。
- en: I know, I know, I can hear you say, “I’m bad at math, I don’t want to use vectors”.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，我知道，我能听到你说，“我数学不好，我不想使用向量”。
- en: Don’t worry, you don’t need to be good at math to understand vector indexes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心，你不需要擅长数学就能理解向量索引。
- en: All you need to know is that using vectors enables you to rely on powerful and
    optimized operations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要知道的是，使用向量可以依靠强大且优化的操作。
- en: The first question you might ask yourself is, “What is so interesting about
    your vectors”?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问自己第一个问题是，“你的向量有什么有趣之处”？
- en: 'Let’s say that you finally found Alice at her place, and now you want to find
    something to eat. You may want to find the nearest restaurant. You look for a
    list of restaurants and end up with a table of restaurants, specialties, and addresses.
    Let’s take a look at the information you can find:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你终于找到了Alice的住处，现在你想找点东西吃。你可能会想找最近的餐馆。你会找一份餐馆列表，结果得到一张包含餐馆、特色菜和地址的表格。让我们来看看你可以找到的信息：
- en: '![](../Images/7c07b731c47ce75030b0be8b72f98315.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c07b731c47ce75030b0be8b72f98315.png)'
- en: This doesn’t look helpful right? Your only option is to scan through the list,
    reading addresses one by one and manually assessing how close it is to you. We
    could try to automate the ranking of the nearest place, but computing distances
    based on raw addresses is difficult (two streets may be nearby but have different
    names).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来没什么帮助，对吧？你唯一的选择是逐一扫描列表，阅读地址，并手动评估它与你的距离有多近。我们可以尝试自动化最近地点的排名，但基于原始地址计算距离是困难的（两条街道可能相近但名称不同）。
- en: 'However, imagine now that you have a table with GPS positions representing
    each restaurant’s exact latitude and longitude:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，假设你现在有一个表，其中 GPS 位置表示每个餐馆的精确纬度和经度：
- en: '![](../Images/57e546e41d73fe4d44dc837f97fed7bc.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57e546e41d73fe4d44dc837f97fed7bc.png)'
- en: Each position is a vector of size 2\. With those vectors, you can easily compute
    the distance to your own position with a simple *-and fast-* mathematical operation.
    Then you can quickly retrieve the closest ones, in other words, the one with the
    smallest distance to you!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每个位置是一个大小为 2 的向量。利用这些向量，你可以通过一个简单的 *-而且快速-* 数学操作轻松计算到自己位置的距离。然后你可以迅速检索到最近的那些，也就是说，离你最近的那个！
- en: '![](../Images/13067bc197132defec5969f7a2b30174.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/13067bc197132defec5969f7a2b30174.png)'
- en: Now you can easily find the closest restaurant to you!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以轻松找到离你最近的餐馆了！
- en: The interesting point is that by indexing the table directly by the vector (the
    GPS Position in this example), we can optimize the index so that finding the entries
    with the lowest distance is extremely fast.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，通过直接按向量（在这个例子中是 GPS 位置）索引表，我们可以优化索引，使得查找距离最小的条目变得极其快速。
- en: '**Vector indexes are specialized indexes designed to efficiently retrieve vectors
    that are closest, or the most similar, to a given vector. These indexes rely on
    optimized mathematical operations to efficiently identify the most similar vectors.**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**向量索引是专门设计用于高效检索最接近或最相似于给定向量的向量的索引。这些索引依赖于优化的数学操作来高效地识别最相似的向量。**'
- en: In our example, the distance used was the classical distance, but there are
    indexes for all the existing distances or similarities, such as the cosine similarity
    metric.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，使用的距离是经典距离，但对于所有现有的距离或相似性指标都有索引，例如余弦相似性度量。
- en: '[Locality Sensitive Hashing (LSH)](https://pathway.com/developers/showcases/lsh/lsh_chapter2)
    is one of the most widely used indexes to find the k most similar data points
    in a dataset, and it works with different distances or similarities.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[局部敏感哈希（LSH）](https://pathway.com/developers/showcases/lsh/lsh_chapter2) 是最广泛使用的索引之一，用于在数据集中找到
    k 个最相似的数据点，并且它可以与不同的距离或相似性度量一起使用。'
- en: “That’s nice, but I’m not using vectors in my database”.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “这很好，但我在数据库中没有使用向量”。
- en: 'That’s the exciting part: you can transform anything into a vector.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是激动人心的部分：你可以将任何东西转换成一个向量。
- en: Simply taking the binary representation would be inefficient since it may contain
    noise, so it’s essential to find a representation that preserves the characteristics
    of the data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅使用二进制表示会很低效，因为它可能包含噪声，因此找到能够保留数据特征的表示是至关重要的。
- en: Representing different information as a vector to use vector indexes has become
    a standard way to improve the efficiency of a system. Vectorization has become
    an art.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将不同的信息表示为向量以使用向量索引已经成为提高系统效率的标准方法。向量化已经成为一门艺术。
- en: For example, if you have an image dataset and you want a database where you
    can find the images the most similar to a given one, you can use the SIFT descriptor
    of the images.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有一个图像数据集，并且想要一个可以找到与给定图像最相似的图像的数据库，你可以使用图像的 SIFT 描述符。
- en: 2.2 What is the difference between Vector Indexes and Vector databases?
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2 向量索引和向量数据库之间有什么区别？
- en: 'The difference between vector indexes and vector databases is the same as the
    difference between indexes and databases: indexes are meant to simply quickly
    find where the data is, while vector databases use vector indexes to perform the
    retrieval queries fast, but they also store and maintain the data while providing
    additional operations and properties.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 向量索引和向量数据库之间的区别就像索引和数据库之间的区别一样：索引旨在快速找到数据的位置，而向量数据库使用向量索引快速执行检索查询，但它们还存储和维护数据，同时提供附加操作和属性。
- en: 3\. What is the link between LLMs and RAGs?
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. LLMs 和 RAGs 之间的联系是什么？
- en: Now that you’ve learned about vector indexes, you might wonder why so many discussions
    about LLMs and RAGs also discussed vector indexes. To understand why, let’s first
    quickly explain what Retrieval Augmented Generation, or RAG, is. AG serves as
    a clever workaround for one of the inherent limitations of LLMs, namely, their
    limited knowledge.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了向量索引，你可能会想为什么关于LLMs和RAGs的讨论也涉及到向量索引。要理解原因，我们首先快速解释一下什么是检索增强生成，或者说RAG。RAG作为LLMs固有局限性——即知识有限性——的巧妙解决方案。
- en: 'LLMs are only aware of the data they were trained on. One technique to increase
    their knowledge is *prompt engineering,* where additional data is integrated into
    the query prompt: “Given this data {data}, answer this question: {question}”.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: LLMs只知道它们接受训练的数据。提高它们知识的一种技术是*提示工程*，即将额外的数据整合到查询提示中：“给定这些数据{data}，回答这个问题：{question}”。
- en: 'While effective, this approach faces a new challenge: scalability. Not only
    the size of the prompt is limited, but the more data you include, the more costly
    the query becomes.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有效，但这种方法面临一个新挑战：可扩展性。不仅提示的大小有限，包含的数据越多，查询的成本也就越高。
- en: To overcome this, Retrieval Augmented Generation limits the quantity of data
    by only inserting the most similar data, which is where vector indexes come into
    play!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这个问题，检索增强生成通过只插入最相似的数据来限制数据的数量，这就是向量索引发挥作用的地方！
- en: 'Here’s how it works: All the documents are initially transformed into vectors
    using LLMs (1). To be more specific, the encoder part of the LLM is used.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是：所有文档最初都通过LLMs（1）转换为向量。具体来说，是LLM的编码器部分被使用。
- en: These vectors are used as keys for indexing the documents in a vector index
    (2).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些向量被用作在向量索引中索引文档的键（2）。
- en: When doing a query, the query is vectorized using the LLM (3). The resulting
    vector is then queried in the vector index to retrieve the most similar documents
    (4). These documents are then used to answer the query using prompt engineering
    (5).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行查询时，查询会使用LLM进行向量化（3）。然后，将结果向量在向量索引中查询，以检索最相似的文档（4）。这些文档随后会通过提示工程（5）来回答查询。
- en: '![](../Images/3e1970f264443b02529b03fdd905421d.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e1970f264443b02529b03fdd905421d.png)'
- en: Retrieval-Augmented Generation (RAG) relies on both LLMs and vector indexes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 检索增强生成（RAG）依赖于LLMs和向量索引。
- en: That’s it!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些！
- en: As you can see, similarly to LLM, the vector index holds a central position
    in RAGs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，类似于LLM，向量索引在RAGs中也占据着核心位置。
- en: Some people prefer to use a vector database instead of a vector index. That’s
    okay whenever you want to reuse the same data in multiple applications. However,
    if your primary concern is retrieval efficiency or flexibility in defining the
    index for each application, a single vector index is often simpler and faster
    to deploy.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人更喜欢使用向量数据库而不是向量索引。这在你想在多个应用中重用相同数据时没问题。然而，如果你主要关注的是检索效率或在每个应用中定义索引的灵活性，那么单个向量索引通常更简单、更快速。
- en: Conclusion
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations to the courageous who have read until there! I believe you now
    have all the background knowledge to engage in those passionate discussions about
    LLMs and RAGs.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜那些勇敢地读到这里的人！我相信你现在已经具备了参与关于LLMs和RAGs的热情讨论所需的所有背景知识。
- en: Indexes hold a central role in data retrieval. As data retrieval is likely to
    remain a key component of data technologies, it is primordial to understand what
    indexes, including vector indexes, are about.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 索引在数据检索中扮演着核心角色。由于数据检索可能仍将是数据技术中的关键组成部分，因此理解包括向量索引在内的索引是至关重要的。
- en: If you want to learn about more advanced indexes, I’d suggest you read [my article
    about LSH](https://pathway.com/developers/showcases/lsh/lsh_chapter2). If you
    want to learn something more practical and are curious to experience real-time
    Retrieval Augmented Generation (RAG) in action, consider exploring the [LLM-app](https://github.com/pathwaycom/llm-app),
    where you can experience firsthand the power of these technologies.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多高级索引，我建议你阅读[我关于LSH的文章](https://pathway.com/developers/showcases/lsh/lsh_chapter2)。如果你想了解一些更实用的内容，并且对实时检索增强生成（RAG）的实际应用感兴趣，可以考虑探索[LLM-app](https://github.com/pathwaycom/llm-app)，在这里你可以亲身体验这些技术的力量。
