- en: Simplify File Sharing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/simplify-file-sharing-44bde79a8a18?source=collection_archive---------4-----------------------#2023-09-12](https://towardsdatascience.com/simplify-file-sharing-44bde79a8a18?source=collection_archive---------4-----------------------#2023-09-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Coding Example for working with Google Drive’s Shared Folders in Collaboration
    Projects
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@gijs.vandendool?source=post_page-----44bde79a8a18--------------------------------)[![Gijs
    van den Dool](../Images/46ba2e4b72ad691404e95c1995966332.png)](https://medium.com/@gijs.vandendool?source=post_page-----44bde79a8a18--------------------------------)[](https://towardsdatascience.com/?source=post_page-----44bde79a8a18--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----44bde79a8a18--------------------------------)
    [Gijs van den Dool](https://medium.com/@gijs.vandendool?source=post_page-----44bde79a8a18--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fea289793d3d7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimplify-file-sharing-44bde79a8a18&user=Gijs+van+den+Dool&userId=ea289793d3d7&source=post_page-ea289793d3d7----44bde79a8a18---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----44bde79a8a18--------------------------------)
    ·13 min read·Sep 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F44bde79a8a18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimplify-file-sharing-44bde79a8a18&user=Gijs+van+den+Dool&userId=ea289793d3d7&source=-----44bde79a8a18---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F44bde79a8a18&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimplify-file-sharing-44bde79a8a18&source=-----44bde79a8a18---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Recently, a data-sharing problem came up again, and I thought this would be
    a good time to design a method to work with shared folders. I work as an independent
    GIScience professional and frequently engage with various organizations concurrently.
    In my projects, I have noticed that each organization has its unique approach
    to working with data, shaped by its distinct culture and work ethics, resulting
    in a diverse range of methodologies. Luckily, there are some practices they have
    in common, and one of them is working with a cloud-based data management system,
    often Google, but this could also be One-Drive (from Microsoft) of Dropbox.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I will explain how to use Python with Shared Folders in the Google
    Ecosystem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7709cf663ef03f42fbb954c19ab639cc.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: Photo by [Annie Spratt](https://unsplash.com/@anniespratt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/QckxruozjRg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Annie Spratt](https://unsplash.com/@anniespratt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供的照片，来源于 [Unsplash](https://unsplash.com/photos/QckxruozjRg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)'
- en: Use Case
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例
- en: How to manage files on a local machine is very individual, and (hopefully) standardised,
    or at least has some standardisation, when working in an organisation. Sharing
    files between systems can be complicated, but working with shared folders is an
    option when you don’t have direct access to a production folder, and the organisation
    can share a specifically designated working folder with you to exchange files.
    In this example, an organisation has granted access to a folder called DATA on
    their Google Drive repository, and it’s agreed that we can use this folder to
    exchange files.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地计算机上管理文件是非常个性化的，在组织中工作时（希望）能够标准化，或者至少有一些标准化。系统间共享文件可能会很复杂，但当你没有直接访问生产文件夹的权限时，使用共享文件夹是一个选项，组织可以与你共享一个专门指定的工作文件夹来交换文件。在这个例子中，组织已经授权访问他们
    Google Drive 仓库中的一个名为 DATA 的文件夹，并且已经同意我们可以使用这个文件夹来交换文件。
- en: Local file management
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地文件管理
- en: To explain quickly, for people unfamiliar with Google Drive file sharing, the
    process starts with receiving an email inviting you to contribute to a specific
    folder; see the invitation (left) below. In the invitation is a button which will
    open a web browser with the Google Drive interface (right) associated with the
    Google email of the receiver of the invitation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单解释一下，对于不熟悉 Google Drive 文件共享的人，这个过程从收到一封邀请你贡献特定文件夹的电子邮件开始；请参见下面的邀请（左侧）。在邀请中有一个按钮，点击后会打开一个带有
    Google Drive 界面的网页浏览器（右侧），该界面与接收邀请的 Google 邮箱相关联。
- en: '![](../Images/e3ed8ab09ea49d94e82a80b19068a5b0.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e3ed8ab09ea49d94e82a80b19068a5b0.png)'
- en: 'Figure 1: Creating a Shared Folder (image by author)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：创建共享文件夹（作者提供的图片）
- en: There are a few important pieces of information hidden in the interface, and
    understanding them early will help with the rest of the process.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 界面中隐藏了一些重要信息，尽早了解这些信息将有助于完成后续过程。
- en: In the URL (top of the screen), there is a masked ID, this is the ID Google
    is using to track all the operations on this folder, and this is the ID we will
    fetch in the Python code later in this post.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 URL（屏幕顶部）中，有一个隐藏的 ID，这就是 Google 用来跟踪对该文件夹的所有操作的 ID，这也是我们稍后在 Python 代码中获取的
    ID。
- en: 'Then it says: “Shared with me” and the name of the shared folder; also, this
    is important because when we mount the Google Drive to the CoLab notebook, we
    will see that this category is not available.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后它会显示：“与我共享”以及共享文件夹的名称；这点很重要，因为当我们将 Google Drive 挂载到 CoLab 笔记本时，我们会发现这个类别不可用。
- en: And finally, we see the files and folders under Data; this means we can access
    the information we need, and add new files to the folder. Still, there could be
    a problem with the folder’s security settings, so a good test at this stage is
    to create a small text file, and drag-and-drop in the folder “ExternalData”, to
    verify that you have full access.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们看到 Data 下的文件和文件夹；这意味着我们可以访问所需的信息，并向文件夹中添加新文件。不过，文件夹的安全设置可能存在问题，因此在此阶段的一个好测试是创建一个小文本文件，并拖放到“ExternalData”文件夹中，以验证你是否拥有完全访问权限。
- en: 'To make the “Shared with me” folder accessible, we need to link this folder
    to the local/personal drive. We can do this by creating a Shortcut, but this is
    a manual step, and will be different for everyone. To access a shared with you
    folder or file in Google Colab, you have to:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使“与我共享”的文件夹可访问，我们需要将该文件夹链接到本地/个人驱动器。我们可以通过创建快捷方式来实现，但这是一个手动步骤，每个人都会有所不同。要在
    Google Colab 中访问与你共享的文件夹或文件，你需要：
- en: Go to Shared with me in Google Drive.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 Google Drive 中的“与我共享”。
- en: Select the folder or file you want to access.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想访问的文件夹或文件。
- en: Right-click on it and choose “Add shortcut to drive”, and a pop-up window will
    appear, “Select MyDrive”, then click on “Add Shortcut”.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击它并选择“将快捷方式添加到驱动器”，会出现一个弹出窗口，选择“MyDrive”，然后点击“添加快捷方式”。
- en: Place the shortcut in a location on your drive that you can find back easily;
    in the setup I use, the location for Shortcuts is “__Shared”, ensuring that the
    folder with the shortcuts is at the top of the folder list under “MyDrive”, and
    then a subdirectory for the organisation.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将快捷方式放在驱动器上一个容易找到的位置；在我使用的设置中，快捷方式的位置是“__Shared”，确保包含快捷方式的文件夹在“MyDrive”下的文件夹列表顶部，然后是组织的子目录。
- en: Rename the shortcut to a meaningful name; I use “DataDevelopement” in this example.
    The file location and name conventions are very personal, and it doesn’t matter
    for the program where the files are stored or how they are called, but having
    some structure can save some headaches later.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将快捷方式重命名为有意义的名称；在此示例中，我使用了“DataDevelopement”。文件位置和名称约定非常个人化，程序不关心文件存储的位置或名称，但有一定结构可以避免以后的一些麻烦。
- en: '![](../Images/04d6af0a2a958a7f88b78e4a81e9b795.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04d6af0a2a958a7f88b78e4a81e9b795.png)'
- en: 'Figure 2: Creating a shortcut (image by author)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：创建快捷方式（图片由作者提供）
- en: With the local file system organised, and the personal Google Drive configured,
    we can try to work with this shared folder in a Python notebook and automate the
    file sharing in the project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地文件系统组织好，并配置好个人 Google Drive 后，我们可以尝试在 Python 笔记本中使用这个共享文件夹，并自动化项目中的文件共享。
- en: '**Installation**'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**安装**'
- en: This project is based on a Google Colab, or “Collaboratory” notebook, which
    I will share at the bottom of this article. The advantage of using this environment
    is that it allows you to write and execute Python in your browser, with
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目基于 Google Colab 或“Collaboratory”笔记本，我将在本文底部分享。使用这个环境的优点是它允许你在浏览器中编写和执行 Python，且
- en: Zero configuration required
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要配置
- en: Access to GPUs free of charge
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费访问 GPU
- en: Easy sharing
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单共享
- en: These are very important points when working with organisations which have their
    internal procedures because, as an external collaborator, you are not often getting
    direct access to the code base (and this can have many different reasons, from
    security concerns to project management constraints). The Colab notebook is part
    of the Google ecosystem, and (as an added advantage) creates a run-time environment
    with the option to mount personal Google drives (for file sharing).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在与拥有内部程序的组织合作时，这些是非常重要的点，因为作为外部协作者，你通常无法直接访问代码库（这可能有许多不同的原因，从安全问题到项目管理限制）。Colab
    笔记本是 Google 生态系统的一部分，并且（作为附加优势）创建了一个运行时环境，提供了挂载个人 Google 驱动器（用于文件共享）的选项。
- en: Importing modules and packages
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入模块和包
- en: For this example, only the necessary packages are loaded to the notebook’s runtime,
    and we need a few specific libraries to work with the shared drive.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，只加载了运行时所需的必要包，我们需要一些特定的库来处理共享驱动器。
- en: Google autotorisation
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google 授权
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using oauth2client and the Google Credentials will make working with the files
    easier. There are alternatives, like downloading a JSON file with the credentials,
    and there will be situations where working with the JSON file will be preferred
    over using Google Credentials, but as this is a project with no sensitive data
    using the oauth2client library is giving enough protection.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 oauth2client 和 Google Credentials 会使文件操作更加轻松。有其他替代方案，如下载带有凭据的 JSON 文件，在某些情况下，使用
    JSON 文件可能会优于使用 Google Credentials，但由于这是一个不涉及敏感数据的项目，使用 oauth2client 库已经提供了足够的保护。
- en: pydrive
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pydrive
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**pydrive** is a wrapper library of google-api-python-client that simplifies
    many common Google Drive API tasks, and one of these functionalities is handling
    get responses when querying the Google Drive File system. Google Drive stores
    all objects by ID, and the IDs are linked by relational information in the objects.
    It is possible to access this information by the API (see the next code block),
    but the wrapper is doing all the heavy lifting for us when we create a GoogleDriveFileList
    instance with the parameters of Files.list() as dict. Calling GetList() will get
    all files that match your query as a list of GoogleDriveFile.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**pydrive** 是 google-api-python-client 的一个封装库，它简化了许多常见的 Google Drive API 任务，其中之一是处理查询
    Google Drive 文件系统时的响应。Google Drive 通过 ID 存储所有对象，这些 ID 通过对象中的关系信息进行链接。通过 API 可以访问这些信息（见下一个代码块），但封装库在我们使用
    Files.list() 的参数作为 dict 创建 GoogleDriveFileList 实例时，处理了所有繁重的工作。调用 GetList() 会以
    GoogleDriveFile 的列表形式获取所有匹配查询的文件。'
- en: Google API Client
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google API 客户端
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The Google API Client is a large library, and it has many functionalities,
    but for this project, we only need one module: build. The [build module](https://googleapis.github.io/google-api-python-client/docs/epy/googleapiclient.discovery-module.html)
    constructs a Resource Object for interacting with an API and returns the methods
    for interacting with the service. The pydrive library will handle the basic functions
    very well, like creating, updating, and deleting files, but there are a few moments
    (in this project) when we need more advanced functionality, and having access
    to the “service” allows us to extract information not captured by the pydrive
    methods.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Google API 客户端是一个大型库，功能众多，但在这个项目中，我们只需要一个模块：build。[build 模块](https://googleapis.github.io/google-api-python-client/docs/epy/googleapiclient.discovery-module.html)构造一个资源对象用于与
    API 交互，并返回与服务交互的方法。pydrive 库能够很好地处理基本功能，如创建、更新和删除文件，但在这个项目中，有些时候我们需要更高级的功能，访问“服务”使我们能够提取
    pydrive 方法未捕获的信息。
- en: This concludes the configuration of the notebook. In this example, we don’t
    need more libaries than the loaded libaries for file management, and with the
    libraries loaded, we can have a look at what they are doing.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这就完成了笔记本的配置。在这个例子中，我们不需要比加载的库更多的库进行文件管理，加载库后，我们可以查看它们的作用。
- en: File Management in the Notebook
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 笔记本中的文件管理
- en: 'Up to this point, a few things have happened:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，发生了一些事情：
- en: Google authorisation is set up,
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 授权已设置，
- en: We created access to the drive (for read/write access), and
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了对驱动器的访问（用于读/写访问），并且
- en: The Pydrive package is available to navigate on the drive
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pydrive 包可用于在驱动器上进行导航
- en: Hopefully, when you are following along and running the code, you will see the
    image on the right, after having refreshed the panel. You can see the Shortcut
    in the image as a folder under “__Shared”, and we don’t see the “Shared with me”
    section, but because we have the Shortcut, we don’t need to see the “Shared with
    me” files.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 希望在你跟随并运行代码时，你会在刷新面板后看到右侧的图片。你可以在图像中看到“__Shared”下的快捷方式作为一个文件夹，我们没有看到“Shared
    with me”部分，但由于我们有快捷方式，所以不需要查看“Shared with me”文件。
- en: '![](../Images/1a40ae1b66dd690fa6dfe16d7caa1597.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a40ae1b66dd690fa6dfe16d7caa1597.png)'
- en: 'Figure 3: Unmounted vs. Mounted States of the Run Time environment in the Google
    Colab web interface (image by author)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：Google Colab 网络界面中运行时环境的未挂载状态与挂载状态（图片由作者提供）
- en: Google Drive works differently than the file management in the local Operating
    Systems, the physical location of the files is not important because the objects
    are managed by ID in an unstructured DataLake, and we can access the files and
    folders by the ID.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Google Drive 的工作方式与本地操作系统中的文件管理不同，文件的物理位置不重要，因为这些对象由 ID 管理，存储在非结构化的数据湖中，我们可以通过
    ID 访问文件和文件夹。
- en: Unfortunately, while `os.path` (in Python) has walk functions to go over the
    file system, a similar method doesn’t exist for Google Drive (or I am not aware
    of this method). However, we can use the pydrive library, and walk manually through
    the folders in the directory tree, and luckily, we know where we want to go from
    the path of the folder. So, we don’t need to walk through the whole structure,
    but we can use the folder names of the data path to go deeper into the folder
    tree.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，虽然 `os.path`（在 Python 中）有用于遍历文件系统的 walk 函数，但 Google Drive 中没有类似的方法（或者我对此方法不知情）。不过，我们可以使用
    pydrive 库，手动遍历目录树中的文件夹，幸运的是，我们知道从文件夹的路径要去哪里。因此，我们不需要遍历整个结构，而是可以使用数据路径中的文件夹名称深入文件夹树。
- en: So, we loop over the small list (in this example, three items) to find the ID
    and use this ID to go to the next level. Note that the fourth level is commented
    out; we will get to this level in the second part of the file handling section
    of this notebook.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们遍历小列表（在这个例子中，有三个项目）来找到 ID 并使用这个 ID 进入下一个级别。请注意第四级被注释掉了；我们将在笔记本的文件处理部分的第二部分中到达这个级别。
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The loop, in the code block below, starts in the root, and when it finds an
    item in the list, the loop will use the ID of the object to go to the next level
    on the list, and if an item is not found, the code will prompt that the folder
    is not found and will not look for any folder deeper in the structure. The loop
    concludes with either the ID of the Shortcut folder or prompts that the folder
    is not found.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块中的循环从根目录开始，当它在列表中找到一个项目时，循环将使用对象的 ID 进入列表的下一个级别，如果没有找到项目，代码将提示找不到文件夹，并且不会在结构中更深的地方查找任何文件夹。循环以快捷方式文件夹的
    ID 或提示找不到文件夹结束。
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At this moment, we have the local file ID for the working folder, but before
    we can look for files in this location we need to match this local ID with the
    target ID of the shared folder. To find this information, we have to look deeper
    into the Google infrastructure, and to do this, we need a helper: the drive_service.
    We activated the helper while we were loading the project, and we didn’t get a
    warning, which means we have access to the service by using the API, and requesting
    information by ID.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经获得了工作文件夹的本地文件 ID，但在我们能够在这个位置查找文件之前，我们需要将这个本地 ID 与共享文件夹的目标 ID 匹配。为了找到这些信息，我们必须深入
    Google 基础设施，为此我们需要一个助手：`drive_service`。我们在加载项目时激活了这个助手，并且没有收到警告，这意味着我们可以通过 API
    访问服务，并通过 ID 请求信息。
- en: The details we need are best collected through a simple function, like the `findTargetID`
    function in the next code block. In this function, the `fileID` is the Shortcut
    ID we found by looping over the names in the folders, and by calling `drive_service.files().get`
    and specifying the fields, we get the target ID of the folder (this will be the
    same ID as in the URL of the web interface of Google Drive (see Figure 1).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的详细信息最好通过一个简单的函数来收集，例如下一段代码块中的 `findTargetID` 函数。在这个函数中，`fileID` 是我们通过遍历文件夹中的名称找到的快捷方式
    ID，通过调用 `drive_service.files().get` 并指定字段，我们可以获得文件夹的目标 ID（这将与 Google Drive Web
    界面 URL 中的 ID 相同（见图 1））。
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this target ID, we have access to the actual shared folder on the Google
    Data Server, and we are not working on the shortcut folder anymore.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个目标 ID，我们可以访问 Google 数据服务器上的实际共享文件夹，我们不再在快捷方式文件夹中工作。
- en: To recap, the reason we created the shortcut folder was to be able to see the
    folder in our mounted list of folders. The category “Shared with me” is not mounted,
    but the shortcuts are. So with this new ID we can look for files.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 总结一下，我们创建快捷方式文件夹的原因是为了能够在挂载的文件夹列表中查看文件夹。类别“与我共享”没有挂载，但快捷方式有。因此，我们可以使用这个新的 ID
    查找文件。
- en: Looking for files
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找文件
- en: We have now what we need, the Target ID of the folder shared with us at the
    beginning of the process, and with that ID, all normal file operations are available
    to us.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在得到了所需的目标 ID，即在流程开始时与我们共享的文件夹的目标 ID，凭借这个 ID，所有正常的文件操作对我们都是可用的。
- en: We can verify that we have enough permissions on the shared folder by first
    creating a small text file in the Run Time environment; creating this file also
    confirms that we have access to the Run Time environment because it will appear
    in the left panel of the web interface of the CoLab notebook when the file is
    correctly created.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在运行时环境中首先创建一个小的文本文件来验证我们是否对共享文件夹拥有足够的权限；创建这个文件也确认了我们可以访问运行时环境，因为当文件正确创建时，它将出现在
    CoLab 笔记本的 Web 界面的左侧面板中。
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now the idea is to move this file to the “Shared with me” folder “Data”, which
    we renamed “DataDevelopment” in the Shortcut, but the function in the previous
    section provided the <target ID>, and we can use now this ID to check if the file
    we just created in the Run Time Environment is available on the shared drive.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的想法是将这个文件移动到“与我共享”的文件夹“Data”，我们在快捷方式中将其重命名为“DataDevelopment”，但前面的函数提供了 <target
    ID>，我们现在可以使用这个 ID 来检查我们刚刚在运行时环境中创建的文件是否在共享驱动器上可用。
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running the code above will either create a new file in the shared folder or
    update (overwrite) the file when the file is found.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码将创建一个新的共享文件夹中的文件，或者在找到文件时更新（覆盖）文件。
- en: Creating a workspace
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建工作区
- en: There is a second reason to use the Shortcut ID to find the Target ID and that
    is to find items under the shared folder. As mentioned before, Google Drive manages
    everything by ID, and the Shortcut ID doesn’t have any children, so using this
    ID to find new items will result in an empty list. This can be tested by including
    the “ExternalData” folder name in the first list of folders; the first list will
    not find this folder. However, restarting the loop with the Target ID will find
    this folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用快捷方式 ID 查找目标 ID 的第二个原因是查找共享文件夹下的项目。如前所述，Google Drive 通过 ID 管理一切，快捷方式 ID 没有任何子项，因此使用此
    ID 查找新项目将导致空列表。这可以通过在第一个文件夹列表中包含“ExternalData”文件夹名称来测试；第一个列表将找不到此文件夹。但是，重新启动以目标
    ID 为起点的循环将找到此文件夹。
- en: In the code snippet below, a new folder list is created, using the folder names
    below the “Shared with me” folder name. The “ExternalData” folder is available
    (see Figure 1), but “NewDataFolder” is not yet created.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，创建了一个新文件夹列表，使用“共享给我”文件夹名称下方的文件夹名称。虽然“ExternalData”文件夹已存在（见图 1），但“NewDataFolder”尚未创建。
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can use the same loop structure as before, but now instead of starting in
    the ROOT, we are starting with the Target ID, and the loop will find the “ExternalData”
    folder, but not the new data folder. In the notebook, shared as gist, the code
    for this test starts with:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与之前相同的循环结构，但现在不是从 ROOT 开始，而是从目标 ID 开始，循环将找到“ExternalData”文件夹，但找不到新数据文件夹。在共享为
    gist 的笔记本中，此测试的代码以以下内容开始：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the second folder list and the targetID to start the check, the loop will
    report that there is no “NewDataFolder”.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第二个文件夹列表和 targetID 开始检查时，循环将报告没有“NewDataFolder”。
- en: As the working folder doesn’t exist yet, we can use `drive_service.files` to
    create this new folder, and with the same method, all files that need to be transferred
    from the Run Time Environment to the “Shared with me” folder.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于工作文件夹尚不存在，我们可以使用`drive_service.files`来创建这个新文件夹，并用同样的方法将所有需要从运行时环境转移到“共享给我”文件夹的文件也转移过去。
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Main takeaways:** Google Drive File System is ID-driven, and all objects
    have IDs. The “Shared with me” objects are not available in Google Colab, but
    through a “Shortcut”, we can access them, and by finding the associated Target
    ID, we can work directly on the “Shared with me” folder, including the objects
    under the folder initially shared with us.'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**主要收获：** Google Drive 文件系统是基于 ID 的，所有对象都有 ID。“共享给我”的对象在 Google Colab 中不可用，但通过“快捷方式”可以访问它们，通过查找相关的目标
    ID，我们可以直接在“共享给我”文件夹中工作，包括最初与我们共享的文件夹下的对象。'
- en: Conclusions
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this article, we have covered some of the essential aspects of working with
    shared folders, including:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们涵盖了与共享文件夹相关的一些基本方面，包括：
- en: '**Setting Up Local File Management:** We started the process with the reception
    of an invitation to contribute to a designated Google Drive directory and showed
    how to structure your local file system to enhance collaborative efficiency.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置本地文件管理：** 我们从接收贡献指定 Google Drive 目录的邀请开始，展示了如何构建本地文件系统以提高协作效率。'
- en: '**Configuring Google Colab for Collaboration:** We discussed the advantages
    of using Google Colab, a collaborative Python environment, and how to set it up
    for project collaboration.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置 Google Colab 以进行协作：** 我们讨论了使用 Google Colab（一个协作 Python 环境）的优势，以及如何为项目协作进行设置。'
- en: '**Importing Necessary Modules and Packages:** We provided code examples for
    importing essential modules and packages, including Google authorization, pydrive
    for simplifying Google Drive API tasks, and the Google API client for advanced
    functionality.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入必要的模块和包：** 我们提供了导入基本模块和包的代码示例，包括 Google 授权、简化 Google Drive API 任务的 pydrive
    和用于高级功能的 Google API 客户端。'
- en: '**File Management in the Notebook:** You saw how to manage files within the
    Google Colab environment, including creating and moving files between your local
    environment and shared folders using the Shared ID and Target ID.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**笔记本中的文件管理：** 你看到如何在 Google Colab 环境中管理文件，包括创建和移动文件，在本地环境和共享文件夹之间使用共享 ID 和目标
    ID。'
- en: '**Finding Files and Creating Workspaces:** We delved into the process of finding
    files within shared folders using target IDs and creating new folders and workspaces
    for your projects.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**查找文件和创建工作区：** 我们深入探讨了使用目标 ID 在共享文件夹中查找文件的过程，以及为你的项目创建新文件夹和工作区的方法。'
- en: I hope this walkthrough on working with shared folders and files between organizations
    was helpful and that it gave some insights into how to work with files and folders
    in a shared folder.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇关于组织间共享文件夹和文件的操作指南对你有所帮助，并且提供了一些关于如何在共享文件夹中操作文件和文件夹的见解。
- en: '*Thank you for reading, and I hope this post has helped you to solve a problem
    or gave you an idea for the next project.*'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*感谢阅读，我希望这篇文章能帮助你解决问题或给你下一项目的灵感。*'
- en: '*Google CoLab NoteBook link:* [*gist*](https://gist.github.com/GvdDool/3840487dbe658c42f2d5128000bbed9f)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*Google CoLab NoteBook 链接:* [*gist*](https://gist.github.com/GvdDool/3840487dbe658c42f2d5128000bbed9f)'
- en: '*Disclaimer:* The code used in this example is not optimised, but written to
    illustrate the process (any suggestions on how to improve the code are welcome
    on the gitHub pages which host this notebook).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明:* 这个示例中使用的代码并未优化，而是为了说明过程（对改进代码的任何建议欢迎在托管此笔记本的 gitHub 页面提出）。'
