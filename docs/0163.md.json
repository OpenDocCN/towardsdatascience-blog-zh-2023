["```py\nmain/\n  |-- imgs/\n  |     |-- 1.npy\n  |     |-- 2.npy\n  |     |-- etc..\n  |-- masks/\n  |-- widget_notebook.ipynb\n```", "```py\nclass SegmentWidget:\n\n    def __init__(self, path_imgs, path_masks):\n\n        self._path_imgs = path_imgs\n        self._path_masks = path_masks\n        self._ids = sorted([os.path.splitext(e)[0] for e in  os.listdir(path_imgs)], key=int)\n        self._current_id = self.ids[0]\n        #This list will be used later to save in memory the coordinates \n        #of the clicks by the user\n        self._polygon_coordinates = []\n        #TODO: Initiation of all the layout components\n        self._initialize_widget()\n```", "```py\n def _load_images(self):\n        '''This method will be used to load image and mask when we select another image'''\n        img_path = os.path.join(self._path_imgs,f\"{self._current_id}.npy\")\n        self._current_img = np.load(img_path)\n        h,w, _ = self._current_img.shape\n\n        #There is not always a mask saved. When no mask is saved, we create an empty one.\n        mask_path = os.path.join(self._path_masks,f\"{self._current_id}.npy\")\n        if os.path.exists(mask_path):\n            self._current_mask = np.load(mask_path)\n        else:\n            self._current_mask = np.zeros((h,w))\n        #initiate an intermediate mask which will be used to store ongoing work\n        self._intermediate_mask = self._current_mask.copy()\n```", "```py\ndef _initialize_figures(self):\n    '''This function is called to initialize the figure and its callback'''\n    self._image_fig = go.FigureWidget()\n    self._mask_fig = go.FigureWidget()\n\n    self._load_images() #Update the state loading the images\n\n    #We use plotly express to generate the RGB image from the 3D array loaded\n    img_trace = px.imshow(self._current_img).data[0]\n    #We use plotly HeatMap for the 2D mask array\n    mask_trace = go.Heatmap(z=self._current_mask, showscale=False, zmin=0, zmax=1)\n\n    #Add the traces\n    self._image_fig.add_trace(img_trace)\n    self._image_fig.add_trace(mask_trace)\n    self._mask_fig.add_trace(mask_trace)\n\n    #A bit of chart formating\n    self._image_fig.data[1].opacity = 0.3 #make the mask transparent on image 1\n    self._image_fig.data[1].zmax = 2 #the overlayed mask above the image can have values in range 0..2\n    self._image_fig.update_xaxes(visible=False)\n    self._image_fig.update_yaxes(visible=False)\n    self._image_fig.update_layout(margin={\"l\": 10, \"r\": 10, \"b\": 10, \"t\": 50}, \n                                  title = \"Define your Polygon Here\",\n                                  title_x = 0.5, title_y = 0.95)\n    self._mask_fig.update_layout(yaxis=dict(autorange='reversed'), margin={\"l\": 0, \"r\": 10, \"b\": 10, \"t\": 50},)\n    self._mask_fig.update_xaxes(visible=False)\n    self._mask_fig.update_yaxes(visible=False)\n\n    #Todo: add the callbacks to the two charts\n```", "```py\ndef _build_save_button(self):\n    self._save_button = Button(description=\"Save Configuration\")\n    #Todo: add the callback\n\ndef _build_delete_current_config_button(self):\n    self._delete_current_config_button = Button(description=\"Delete Current Mask\")\n    #Todo: add the callback\n\ndef _build_delete_all_button(self):\n    self._delete_all_button = Button(description=\"Delete All Mask\")\n    #Todo: add the callback\n\ndef _build_dropdown(self):\n    #The ids are passed as option for the dropdown\n    self._dropdown = Dropdown(options = self._ids)\n    #Todo: add the callback\n\ndef _initialize_widget(self):\n    '''Function called during the init phase to initialize all the components\n       and build the widget layout\n    '''\n\n    #Initialize the components\n    self._initialize_figures()\n    self._build_save_button()\n    self._build_delete_current_config_button()\n    self._build_delete_all_button()\n    self._build_dropdown()\n\n    #Build the layout\n    buttons_widgets = HBox([self._save_button,\n                            self._delete_current_config_button,\n                            self._delete_all_button])\n\n    figure_widgets = HBox([self._image_fig, self._mask_fig])\n\n    self.widget = VBox([self._dropdown, buttons_widgets, figure_widgets])\n\ndef display(self):\n    display(self.widget)\n```", "```py\ndef _callback_dropdown(self, change):\n\n    #Set the new id to the new dropdown value\n    self._current_id = change['new']\n\n    #Load the new image and the new mask, we already have a method to do this\n    self._load_images()\n\n    img_trace = px.imshow(self._current_img).data[0]\n\n    #Update both figure\n    with self._image_fig.batch_update():\n        #Update the trace 0 and the trace 1 containing respectively\n        #the image and the mask\n        self._image_fig.data[0].source = img_trace.source\n        self._image_fig.data[1].z = self._current_mask\n\n    with self._mask_fig.batch_update():\n        self._mask_fig.data[0].z = self._current_mask\n\n    #Reset the list of coordinates used to store current work in progress\n    self._polygon_coordinates = []\n\ndef _build_dropdown(self):\n    #The ids are passed as option for the dropdown\n    self._dropdown = Dropdown(options = self._ids)\n    self._dropdown.observe(self._callback_dropdown, names=\"value\") \n```", "```py\ndef _gen_mask_from_polygon(self):\n    '''This function set to 2 the values inside the polygon defined by the list of points provided'''\n    h,w = self._current_mask.shape\n    new_mask = np.zeros((h,w), dtype=int)\n    #Get coordinates inside the polygon using skimage.draw.polygon function\n    rr, cc = polygon([e[0] for e in self._polygon_coordinates], \n                     [e[1] for e in self._polygon_coordinates], shape=new_mask.shape)\n\n    #Recreate the intermediate_mask and set values inside ongoing polygon\n    #to 2\n    self._intermediate_mask = self._current_mask.copy()\n    self._intermediate_mask[rr,cc]=2\n\ndef _on_click_figure(self, trace, points, state):\n    #Retrieve coordinates of the clicked point\n    i,j = points.point_inds[0]\n    #Add the point to the list of points\n    self._polygon_coordinates.append((i,j))\n\n    #If more than 2 click have been done, create the new intermediate polygon\n    #and update the mask on the image\n    if len(self._polygon_coordinates)>2:\n        self._gen_mask_from_polygon()\n        with self._image_fig.batch_update():\n            self._image_fig.data[1].z = self._intermediate_mask\n```", "```py\ndef _initialize_figures(self):\n\n    #[...Rest of the function...]\n\n    self._image_fig.data[-1].on_click(self._on_click_figure)\n```", "```py\ndef _callback_save_button(self, button):\n    self._current_mask[self._intermediate_mask==2]=1\n    self._current_mask[self._intermediate_mask==0]=0\n    mask_path = os.path.join(self._path_masks,f\"{self._current_id}.npy\")\n    np.save(mask_path,self._current_mask)\n    self._intermediate_mask = self._current_mask.copy()\n    with self._image_fig.batch_update():\n        self._image_fig.data[1].z = self._current_mask     \n    with self._mask_fig.batch_update():\n        self._mask_fig.data[0].z = self._current_mask\n    self._polygon_coordinates = []\n\ndef _build_save_button(self):\n    self._save_button = Button(description=\"Save Configuration\")\n    self._save_button.on_click(self._callback_save_button)\n```", "```py\ndef _callback_delete_current_config_button(self, button):\n    self._intermediate_mask = self._current_mask.copy()\n    with self._image_fig.batch_update():\n        self._image_fig.data[1].z = self._intermediate_mask\n    self._polygon_coordinates = []\n\ndef _build_delete_current_config_button(self):\n    self._delete_current_config_button = Button(description=\"Delete Current Mask\")\n    self._delete_current_config_button.on_click(self._callback_delete_current_config_button)\n```", "```py\ndef _callback_delete_all_button(self, button):\n    self._intermediate_mask[:] = 0\n    with self._image_fig.batch_update():\n        self._image_fig.data[1].z = self._intermediate_mask\n    self._polygon_coordinates = []\n\ndef _build_delete_all_button(self):\n    self._delete_all_button = Button(description=\"Delete All Mask\")\n    self._delete_all_button.on_click(self._callback_delete_all_button)\n```"]