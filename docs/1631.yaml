- en: Combining Traditional Thread-Based Code and Asyncio in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/combining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c?source=collection_archive---------12-----------------------#2023-05-15](https://towardsdatascience.com/combining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c?source=collection_archive---------12-----------------------#2023-05-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A comprehensive guide to integrating synchronous and asynchronous programming
    in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8e2fe735546d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c&user=Peng+Qian&userId=8e2fe735546d&source=post_page-8e2fe735546d----dc162084756c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)
    ·6 min read·May 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdc162084756c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c&user=Peng+Qian&userId=8e2fe735546d&source=-----dc162084756c---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdc162084756c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcombining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c&source=-----dc162084756c---------------------bookmark_footer-----------)![](../Images/2d6b4ed69c2a46871c9ec4c44fa56d21.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Photo Credit: Created by Author, [Canva](https://www.canva.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I’ll explain how to call existing IO-blocking code in asyncio
    programs that don’t implement asyncio and how to call asyncio code in existing
    programs based on the threaded model.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous articles, I introduced you to asyncio, a Python feature. The
    performance of asyncio is very high, and using asyncio in modern, highly concurrent
    code will improve IO performance by several orders of magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: But in the real world, we have not seen asyncio code used as much as expected.
    Why is that?
  prefs: []
  type: TYPE_NORMAL
- en: 'Challenge 1: How to call old IO-blocking code in asyncio code'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One scenario is that while we implement the new code with asyncio, there are
    still a lot of IO-blocking programs left in the system that was implemented traditionally.
    For example, microservice, file operation, etc. Even if you use asyncio and call
    these blocking APIs directly, you still can’t achieve the high concurrency effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Challenge 2: How to call…'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
