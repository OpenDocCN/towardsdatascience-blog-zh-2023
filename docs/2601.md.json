["```py\n# dataset\nx = [1.33, 0.3, 0.97, 1.1, 0.1, 1.4, 0.4]\n\n# bandwidth\nh = 0.3\n```", "```py\nimport numpy as np\nimport matplotlib as plt\n\n# the Kernel function\ndef K(x):\n    return np.exp(-x**2/2)/np.sqrt(2*np.pi)\n\n# dummy dataset\ndataset = np.array([1.33, 0.3, 0.97, 1.1, 0.1, 1.4, 0.4])\n\n# x-value range for plotting KDEs\nx_range = np.linspace(dataset.min()-0.3, dataset.max()+0.3, num=600)\n\n# bandwith values for experimentation\nH = [0.3, 0.1, 0.03]\nn_samples = dataset.size\n\n# line properties for different bandwith values\ncolor_list = ['goldenrod', 'black', 'maroon']\nalpha_list = [0.8, 1, 0.8]\nwidth_list = [1.7,2.5,1.7]\n\nplt.figure(figsize=(10,4))\n# iterate over bandwith values\nfor h, color, alpha, width in zip(H, color_list, alpha_list, width_list):\n    total_sum = 0\n    # iterate over datapoints\n    for i, xi in enumerate(dataset):\n        total_sum += K((x_range - xi) / h)\n        plt.annotate(r'$x_{}$'.format(i+1),\n                     xy=[xi, 0.13],\n                     horizontalalignment='center',\n                     fontsize=18,\n                    )\n    y_range = total_sum/(h*n_samples)\n    plt.plot(x_range, y_range, \n             color=color, alpha=alpha, linewidth=width, \n             label=f'{h}')\n\n    plt.plot(dataset, np.zeros_like(dataset) , 's', \n             markersize=8, color='black')\n\nplt.xlabel('$x$', fontsize=22)\nplt.ylabel('$f(x)$', fontsize=22, rotation='horizontal', labelpad=20)\nplt.legend(fontsize=14, shadow=True, title='$h$', title_fontsize=16)\nplt.show()\n```", "```py\nimport seaborn as sns\nsns.set()\n\nfig, ax = plt.subplots(figsize=(10,4))\n\nsns.kdeplot(ax=ax, data=dataset, \n            bw_adjust=0.3,\n            linewidth=2.5, fill=True)\n\n# plot datapoints\nax.plot(dataset, np.zeros_like(dataset) + 0.05, 's', \n        markersize=8, color='black')\nfor i, xi in enumerate(dataset):\n    plt.annotate(r'$x_{}$'.format(i+1),\n                 xy=[xi, 0.1],\n                 horizontalalignment='center',\n                 fontsize=18,\n                )\nplt.show()\n```", "```py\nfrom sklearn.neighbors import KernelDensity\n\ndataset = np.array([1.33, 0.3, 0.97, 1.1, 0.1, 1.4, 0.4])\n\n# KernelDensity requires 2D array\ndataset = dataset[:, np.newaxis]\n\n# fit KDE to the dataset\nkde = KernelDensity(kernel='gaussian', bandwidth=0.1).fit(dataset)\n\n# x-value range for plotting KDE\nx_range = np.linspace(dataset.min()-0.3, dataset.max()+0.3, num=600)\n\n# compute the log-likelihood of each sample\nlog_density = kde.score_samples(x_range[:, np.newaxis])\n\nplt.figure(figsize=(10,4))\n# put labels over datapoints\nfor i, xi in enumerate(dataset):\n    plt.annotate(r'$x_{}$'.format(i+1),\n                 xy=[xi, 0.07],\n                 horizontalalignment='center',\n                 fontsize=18)\n\n# draw KDE curve\nplt.plot(x_range, np.exp(log_density), \n         color='gray', linewidth=2.5)\n\n# draw boxes representing datapoints\nplt.plot(dataset, np.zeros_like(dataset) , 's', \n         markersize=8, color='black')\n\nplt.xlabel('$x$', fontsize=22)\nplt.ylabel('$f(x)$', fontsize=22, rotation='horizontal', labelpad=24)\nplt.show()\n```", "```py\n# Generate random samples from the model\nsynthetic_data = kde.sample(100)\n\nplt.figure(figsize=(10,4))\n\n# draw KDE curve\nplt.plot(x_range, np.exp(log_density), \n         color='gray', linewidth=2.5)\n\n# draw boxes representing datapoints\nplt.plot(synthetic_data, np.zeros_like(synthetic_data) , 's', \n         markersize=6, color='black', alpha=0.5)\n\nplt.xlabel('$x$', fontsize=22)\nplt.ylabel('$f(x)$', fontsize=22, rotation='horizontal', labelpad=24)\nplt.show()\n```"]