- en: Using Binomial Distribution in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-binomial-distribution-in-python-c9002ac2a424?source=collection_archive---------6-----------------------#2023-05-03](https://towardsdatascience.com/using-binomial-distribution-in-python-c9002ac2a424?source=collection_archive---------6-----------------------#2023-05-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Exploring the binomial distribution in Python: understanding probability calculations
    for coin flips with different methods*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://nathanrosidi.medium.com/?source=post_page-----c9002ac2a424--------------------------------)[![Nathan
    Rosidi](../Images/f500246a4d2fb080a73f6ef740c226d2.png)](https://nathanrosidi.medium.com/?source=post_page-----c9002ac2a424--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c9002ac2a424--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c9002ac2a424--------------------------------)
    [Nathan Rosidi](https://nathanrosidi.medium.com/?source=post_page-----c9002ac2a424--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fab636cbf3611&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-binomial-distribution-in-python-c9002ac2a424&user=Nathan+Rosidi&userId=ab636cbf3611&source=post_page-ab636cbf3611----c9002ac2a424---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c9002ac2a424--------------------------------)
    ·9 min read·May 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc9002ac2a424&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-binomial-distribution-in-python-c9002ac2a424&user=Nathan+Rosidi&userId=ab636cbf3611&source=-----c9002ac2a424---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc9002ac2a424&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-binomial-distribution-in-python-c9002ac2a424&source=-----c9002ac2a424---------------------bookmark_footer-----------)![](../Images/08226f00764e48335b339b2e6877e61f.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Joshua Hoehne](https://unsplash.com/@mrthetrain?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In today’s article, I’ll show you how to apply statistics concepts, such as
    probability, in Python code. As a showcase, I’ll use the statistic interview question
    from Goldman Sachs and show you different ways to calculate the binomial distribution
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: I also made a video tutorial on the same topic (and the same question), so feel
    free to use it to make your life easier.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will examine and solve the probability question asked by
    Goldman Sachs in an interview by using different approaches in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Why Are Probability and Statistics Important in Data Science?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/4fe9dd85392dcb85d852d1f2681cc99e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Probability and statistics are two branches of mathematics used extensively
    in data science.
  prefs: []
  type: TYPE_NORMAL
- en: '**Probability** is the study of random events and the likelihood of them happening.
    It is used to model uncertainty in many real-world situations and is fundamental
    to statistical inference.'
  prefs: []
  type: TYPE_NORMAL
- en: The study of data collection, analysis, and evaluation is called **statistics**.
    It includes using mathematical methods to summarize and draw conclusions from
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Probability and statistics are used in data science to **analyze data, make
    predictions, and inform decision-making**. They are essential for **understanding
    complex systems’ behavior and identifying patterns and trends in data**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Probability Interview Question: Coin Flip Prediction'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***21 Unbiased Coins***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***There are 21 unbiased coins. Each of them flipped. What is the probability
    of getting even number of heads?***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Goldman Sachs is a global investment bank and provider of financial services,
    established in 1869\. The company offers various financial services to corporations,
    governments, and individuals. It is one of the largest investment banks in the
    world and is headquartered in New York City.
  prefs: []
  type: TYPE_NORMAL
- en: This interview question asks you to determine the probability of getting an
    even number of heads when 21 unbiased coins are flipped.
  prefs: []
  type: TYPE_NORMAL
- en: An unbiased coin has a 50/50 chance of landing on either heads or tails.
  prefs: []
  type: TYPE_NORMAL
- en: When flipping multiple coins, possible outcomes can quickly become very large.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this question, we need to use the concept of binomial distribution.
    Let’s see what it is.
  prefs: []
  type: TYPE_NORMAL
- en: Binomial Distribution in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/a720939121810ecef3a1fdb542b2dfdb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The binomial distribution is a probability distribution that can be used to
    describe **the number of successful or unsuccessful outcomes in a series of events,
    which must be independent of each other**.
  prefs: []
  type: TYPE_NORMAL
- en: It is used when there are only two possible outcomes, like heads or tails, and
    the probability of success is the same for each trial.
  prefs: []
  type: TYPE_NORMAL
- en: 'The trials must meet **two conditions**:'
  prefs: []
  type: TYPE_NORMAL
- en: They must have only two possible outcomes (heads or tails/success or failure),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The probability of success must be the same for each trial.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When flipping coins, **success** can be defined as **getting heads**, and **failure**
    can be defined as **getting tails**.
  prefs: []
  type: TYPE_NORMAL
- en: To find the probability of getting an even number of heads when flipping 21
    coins, we need to calculate the probability of getting 0, 2, 4, 6, 8, 10, 12,
    14, 16, 18, or 20 heads.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will do this by using the binomial distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b58c0ab735d93d43421545044c54b33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It means the following:'
  prefs: []
  type: TYPE_NORMAL
- en: P(X = k) — The probability of obtaining **k** successful outcomes in a total
    of **n** independent trials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: n — The number of trials. (In this case, 21.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: k — The number of successes. (In this case, heads.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: p — The chance that a trial is successful. (In this case, 0.5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $\binom{n}{k} $ — The number of ways **k** successes can be chosen from a total
    of **n** independent trials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Manual Calculation: Coin Flip Prediction'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can plug in the values and calculate the probability for each possible even
    number of heads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first do it manually with the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: n = 21 (number of trials)
  prefs: []
  type: TYPE_NORMAL
- en: p = 0.5 (probability of success)
  prefs: []
  type: TYPE_NORMAL
- en: q = 1 — p = 0.5 (probability of failure)
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the calculation
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/445ebe76be13caab8804101121d87a3f.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the meaning of these calculations? For instance, let’s look at P(18).
  prefs: []
  type: TYPE_NORMAL
- en: The formula means the probability of getting 18 heads when flipping a coin 21
    times, which is 0,06341934204101562%. This is a little above 6 out of 10.000.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of the interview question, when you flip 21 coins 10.000 times,
    you’ll probably get 18 heads six times. It is a slim probability, as you see.
  prefs: []
  type: TYPE_NORMAL
- en: Here you can see the probability distribution of flipping 21 coins with an even
    number of heads based on our calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/27e31f51de24e30504b3920a1b558184.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the answer to the interview question, we need to add up all the probabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/228c29ca62304eb4a6f71422fe96b245.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plug in all the individual probabilities we calculated and you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90e7652bb6c3a3c49664f982a63d8e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let’s implement this calculation by using the **math library** in Python
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Calculation: Coin Flip Prediction'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the math Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can implement the binomial distribution of getting an even number of heads
    in 21 flips of unbiased coins using the math library in Python.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we can use a **for loop** to iterate over every even number of heads
    that can be obtained in 21 flips of an unbiased coin.
  prefs: []
  type: TYPE_NORMAL
- en: For each value of **i** in the range 0 to 22 (exclusive), with a step of 2,
    we can calculate the corresponding probability of getting **i heads** using the
    binomial distribution formula.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the loop, we can first calculate the number of ways to choose **i heads**
    out of 21 flips using the **math.comb()** function.
  prefs: []
  type: TYPE_NORMAL
- en: We can then calculate the probability of getting exactly **i heads** in 21 flips
    of an unbiased coin, which is **(1/2)**21**. Finally, we can multiply the two
    values to obtain the probability of getting exactly **i heads** in 21 flips and
    store it in a list called probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: We can use another **for loop** to print the probability of getting each even
    number of heads in the list probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: After the loop finishes, we can compute the sum of all the probabilities stored
    in the list probabilities using the **sum()** function and print the total probability
    of getting an even number of heads in 21 flips.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s see the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aeb0125d10fed67b485e4512cb23e11c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the earlier calculation, we manually calculated the probability of getting
    an even number of heads in 21 flips using the binomial distribution formula.
  prefs: []
  type: TYPE_NORMAL
- en: This involved calculating the probability of getting 0, 2, 4, 6, 8, 10, 12,
    14, 16, 18, and 20 heads separately, which can be time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the code we just wrote using the math library allowed us
    to calculate all these probabilities in just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: This approach saves us a lot of time and effort, especially if we need to calculate
    the probabilities of getting more outcomes or if we need to repeat the calculation
    for a larger number of trials.
  prefs: []
  type: TYPE_NORMAL
- en: But we have one more way to implement this, and it’s even faster.
  prefs: []
  type: TYPE_NORMAL
- en: Using the SciPy Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This time, we will use the pre-built function to calculate the probability.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, we first import the **binom()** function from the **scipy.stats
    module**.
  prefs: []
  type: TYPE_NORMAL
- en: We then define the binomial distribution with **n trials** and **probability**
    p of success using the **binom()** function.
  prefs: []
  type: TYPE_NORMAL
- en: We calculate the probability of getting an even number of heads (0, 2, 4, …,
    20) using the **pmf()** method of the binom distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The **pmf() method** returns the probability mass function (PMF) of the distribution
    for each value in the given range.
  prefs: []
  type: TYPE_NORMAL
- en: We then use another **for loop** to print the probability of getting each even
    number of heads in the list even_probs.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we calculate the total probability of getting an even number of heads
    in 21 flips by summing up the probabilities in the list **even_probs**.
  prefs: []
  type: TYPE_NORMAL
- en: Using the scipy library to calculate the binomial distribution provides a more
    efficient and convenient calculation method. It allows us to define and calculate
    the distribution in just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/588f1a02cbf709b7062ef2141d8084e9.png)'
  prefs: []
  type: TYPE_IMG
- en: If you compare the results obtained from the two Python methods, you may notice
    that they are not exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: Why are the Results (Slightly) Different?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The difference between the SciPy and math calculations is due to floating-point
    precision errors.
  prefs: []
  type: TYPE_NORMAL
- en: In computer programming, floating-point numbers are represented in a limited
    number of bits, which can cause a loss of precision when performing calculations.
  prefs: []
  type: TYPE_NORMAL
- en: This is why we are getting slightly different values for the probabilities of
    getting an even number of heads when comparing the results of the two methods.
  prefs: []
  type: TYPE_NORMAL
- en: Both methods provide a good approximation of the true probability, and the difference
    between the two is negligible for most practical purposes.
  prefs: []
  type: TYPE_NORMAL
- en: If you work on longer scripts and plan to make longer calculations, plus you
    have limited computational power, working with SciPy is more efficient and faster.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, if you have enough resources, we would recommend the first calculation
    where we used math. This is if you want to be sure about the results, even if
    these slight differences made little difference.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to minimize the impact of floating-point errors, you can round the
    results of the calculations to the desired precision.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e420d3c22c1a0e1478351c8479570347.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we explored a statistic question from Goldman Sachs and answered
    it by using Python.
  prefs: []
  type: TYPE_NORMAL
- en: We went through different approaches and explained each step in detail. Also,
    we did implement it by using a pre-built function.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, this article is an excellent example of how binomial distribution can
    be solved manually or using Python.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to master the random variables and probability distributions and
    crack your next Data Science Interview, check out this post “[Random Variables
    and Probability Distributions](https://www.stratascratch.com/blog/random-variables-and-probability-distributions/?utm_source=blog&utm_medium=click&utm_campaign=tds+binomial+distribution)”.
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://www.stratascratch.com*](https://www.stratascratch.com/blog/binomial-distribution-in-python-for-coin-flip-prediction/?utm_source=blog&utm_medium=click&utm_campaign=tds+binomial+distribution)*.*'
  prefs: []
  type: TYPE_NORMAL
