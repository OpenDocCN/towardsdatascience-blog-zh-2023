["```py\ndef get_nutritional_info(self, query: str) -> dict:\n    \"\"\"Fetches the nutritional information for a specific food item\n\n    :param query: The food item to get nutritional info for\n    :return: The nutritional information of the food item\n    \"\"\"\n    api_url = 'https://api.api-ninjas.com/v1/nutrition?query={}'.format(query)\n    response = requests.get(api_url, headers={'X-Api-Key': self.nut_api_key})\n\n    if response.status_code == requests.codes.ok:\n        return response.json()  # Use json instead of text for a more structured data\n    else:\n        return {\"Error\": response.status_code, \"Message\": response.text}\n```", "```py\ndef calculate_bmr(weight: float, height: float, age: int, gender: str, equation: str = 'mifflin_st_jeor') -> float:\n    \"\"\"Calculates the Basal Metabolic Rate (BMR) for a person\n\n    :param weight: The weight of the person in kg\n    :param height: The height of the person in cm\n    :param age: The age of the person in years\n    :param gender: The gender of the person ('male' or 'female')\n    :param equation: The equation to use for BMR calculation ('harris_benedict' or 'mifflin_st_jeor')\n    :return: The BMR of the person\n    \"\"\"\n    if equation.lower() == 'mifflin_st_jeor':\n        if gender.lower() == 'male':\n            return (10 * weight) + (6.25 * height) - (5 * age) + 5\n        else:  # 'female'\n            return (10 * weight) + (6.25 * height) - (5 * age) - 161\n    else:  # 'harris_benedict'\n        if gender.lower() == 'male':\n            return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\n        else:  # 'female'\n            return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\n```", "```py\ndef calculate_tdee(bmr: float, activity_level: str) -> float:\n    \"\"\"Calculates the Total Daily Energy Expenditure (TDEE) for a person\n\n    :param bmr: The BMR of the person\n    :param activity_level: The activity level of the person\n    ('sedentary', 'lightly_active', 'moderately_active', 'very_active', 'super_active')\n    :return: The TDEE of the person\n    \"\"\"\n    activity_factors = {\n        'sedentary': 1.2,\n        'lightly_active': 1.375,\n        'moderately_active': 1.55,\n        'very_active': 1.725,\n        'super_active': 1.9,\n    }\n    return bmr * activity_factors.get(activity_level, 1)\n```", "```py\ndef calculate_ibw(height: float, gender: str) -> float:\n    \"\"\"Calculates the Ideal Body Weight (IBW)\n\n    :param height: The height of the person in inches\n    :param gender: The gender of the person (\"male\" or \"female\")\n    :return: The Ideal Body Weight in kg\n    \"\"\"\n    if gender.lower() == 'male':\n        if height <= 60:  # 5 feet = 60 inches\n            return 50\n        else:\n            return 50 + 2.3 * (height - 60)\n    elif gender.lower() == 'female':\n        if height <= 60:\n            return 45.5\n        else:\n            return 45.5 + 2.3 * (height - 60)\n    else:\n        raise ValueError(\"Invalid gender. Expected 'male' or 'female'.\")\n```", "```py\ndef calculate_bmi(weight: float, height: float) -> float:\n    \"\"\"Calculates the Body Mass Index (BMI) for a person\n\n    :param weight: The weight of the person in kg\n    :param height: The height of the person in cm\n    :return: The BMI of the person\n    \"\"\"\n    height_meters = height / 100  # convert cm to meters\n    bmi = weight / (height_meters ** 2)\n    return round(bmi, 2)  # round to 2 decimal places for readability\n```", "```py\n# Instantiate the agent\nfitness_agent = FitnessAgent(openai_api_key, nut_api_key)\n```", "```py\n# You can view the processed function instructions\nprint(fitness_agent.functions)\n```", "```py\n[\n   {\n      \"name\":\"get_nutritional_info\",\n      \"description\":\"Fetches the nutritional information for a specific food item\",\n      \"parameters\":{\n         \"type\":\"object\",\n         \"properties\":{\n            \"query\":{\n               \"description\":\"The food item to get nutritional info for\",\n               \"type\":\"string\"\n            }\n         }\n      },\n      \"required\":[\n         \"query\"\n      ]\n   },\n   {\n      \"name\":\"calculate_bmr\",\n      \"description\":\"Calculates the Basal Metabolic Rate (BMR) for a person\",\n      \"parameters\":{\n         \"type\":\"object\",\n         \"properties\":{\n            \"weight\":{\n               \"description\":\"The weight of the person in kg\",\n               \"type\":\"number\"\n            },\n            \"height\":{\n               \"description\":\"The height of the person in cm\",\n               \"type\":\"number\"\n            },\n            \"age\":{\n               \"description\":\"The age of the person in years\",\n               \"type\":\"integer\"\n            },\n            \"gender\":{\n               \"description\":\"The gender of the person ('male' or 'female')\",\n               \"type\":\"string\"\n            },\n            \"equation\":{\n               \"description\":\"The equation to use for BMR calculation ('harris_benedict' or 'mifflin_st_jeor')\",\n               \"type\":\"string\"\n            }\n         }\n      },\n      \"required\":[\n         \"weight\",\n         \"height\",\n         \"age\",\n         \"gender\",\n         \"equation\"\n      ]\n   },\n   {\n      \"name\":\"calculate_tdee\",\n      \"description\":\"Calculates the Total Daily Energy Expenditure (TDEE) for a person\",\n      \"parameters\":{\n         \"type\":\"object\",\n         \"properties\":{\n            \"bmr\":{\n               \"description\":\"The BMR of the person\",\n               \"type\":\"number\"\n            },\n            \"activity_level\":{\n               \"description\":\"The activity level of the person\",\n               \"type\":\"string\"\n            }\n         }\n      },\n      \"required\":[\n         \"bmr\",\n         \"activity_level\"\n      ]\n   }\n]\n```", "```py\n# Define a question\nuser_input = \"What is the nutritional value of a banana?\"\n\n# Get raw chat response\nresponse = fitness_agent.ask(user_input)\n\n# Print final response\nprint(response['choices'][0]['message']['content'])\n```", "```py\nA 100-gram serving of banana typically contains:\n\n- Calories: 89.4\n- Total Fat: 0.3 grams, of which Saturated Fat is 0.1 grams\n- Protein: 1.1 grams\n- Sodium: 1 milligram\n- Potassium: 22 milligrams\n- Cholesterol: 0 milligram\n- Total Carbohydrates: 23.2 grams, of which Dietary Fiber is 2.6 grams and Sugars are 12.3 grams\n\nThese values may vary based on the exact size and ripeness of the banana. Also note, bananas are a good source of dietary potassium and vitamin C.\n```", "```py\n# Define a question\nuser_input = \"What is the TDEE of a 30-year-old man, who is 180 cm tall, weighs 80 kg, and exercises 3 times a week?\"\n\n# Get raw chat response\nresponse = fitness_agent.ask(user_input)\n\n# Print final response\nprint(response['choices'][0]['message']['content'])\n```", "```py\nThe Total Daily Energy Expenditure (TDEE) of a 30-year-old man who is 180 cm tall, weighs 80 kg, and exercises 3 times a week with \"moderate\" exercise according to the Harris-Benedict equation would be approximately 2574 calories a day. This is a rough estimate and individual results could vary based on multiple factors like metabolism speed, specific physical activity, and more. \n\nHere's a simple breakdown of the process:\n\n1\\. Calculating Basal Metabolic Rate (BMR) - This is the number of calories a person would burn just by existing, without any activity. \n\nFor men, the Harris-Benedict equation to calculate BMR is \nBMR = 88.362 + (13.397 * weight in kg) + (4.799 * height in cm) - (5.677 * age in years)\nFor the given values, the BMR comes to around 1783 calories.\n\n2\\. Adjusting for Activity - The BMR can thus be adjusted for physical activity level using the following multipliers:\n\n- Sedentary (little or no exercise): BMR * 1.2\n- Lightly active (light exercise/sports 1-3 days/week): BMR * 1.375\n- Moderately active (moderate exercise/sports 3-5 days/week): BMR * 1.55\n- Very active (hard exercise/sports 6-7 days a week): BMR * 1.725\n- Super active (very hard exercise/physical job & exercise 2x/day): BMR * 1.9\n\nFor someone who exercises 3 times a week, we could take the multiplier to be at 1.55 (Moderately active). \n\nHence, TDEE = BMR * Activity Multiplier = 1783 * 1.55 = approximately 2764 calories.\n\nNote: The actual total caloric needs may be slightly higher or lower as this calculation doesn't take into account muscle to fat ratio, specific types of activities, etc.\n```", "```py\nTDEE, or Total Daily Energy Expenditure, represents the total number of calories a person needs to consume in a day to maintain their current weight, considering their physical activity level.\n\nWe first need to calculate the Basal Metabolic Rate (BMR), which is the amount of energy expended while at rest. There are several equations to calculate BMR, one of the commonly used ones is the Mifflin-St. Jeor equation:\n\nFor men: BMR = 10 * weight(kg) + 6.25 * height(cm) - 5 * age(y) + 5\n\nSo, for your case:\n\nBMR = 10 * 80kg + 6.25 * 180cm - 5 * 30y + 5\nBMR = 800 + 1125 - 150 + 5 = 1780 kcal/day\n\nThis is the amount of calories needed to keep the body functioning while at rest.\n\nTo include physical activity in the equation, we multiply the BMR by the Physical Activity Level (PAL). For someone who exercises 3 times a week, a common PAL is 1.375 (moderate exercise).\n\nSo, TDEE = BMR * PAL\n\nTDEE = 1780 kcal/day * 1.375 = 2447.5 kcal/day\n\nSo, a 30-year-old man who is 180 cm tall, weighs 80 kg, and exercises 3 times a week would need approximately 2448 calories per day to maintain his current weight. Please note this is just an estimate; actual caloric needs can vary based on many factors, including genetics and body composition. Always consult a healthcare provider or a registered dietitian for personalized advice.\n```", "```py\ndef main():\n\n    openai_api_key = gr.components.Textbox(\n        lines=1,\n        label=\"Enter OpenAI API Key\",\n        type=\"password\",\n    )\n\n    nut_api_key = gr.components.Textbox(\n        lines=1,\n        label=\"Enter Nutrition API Key\",\n        type=\"password\",\n    )\n\n    question = gr.components.Textbox(\n        lines=3,\n        label=\"Enter your message\",\n    )\n\n    output_history = gr.outputs.HTML(\n        label=\"Updated Conversation\",\n    )\n\n    inputs = [\n        openai_api_key,\n        nut_api_key,\n        question,\n    ]\n\n    iface = gr.Interface(\n        fn=partial(get_response),\n        inputs=inputs,\n        outputs=[output_history],\n        title=\"Fitness Agent\",\n        description=\"A simple chatbot using a Fitness Agent and Gradio with conversation history\",\n        allow_flagging=False,\n    )\n\n    iface.launch()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\ndef get_response(openai_api_key, nut_api_key, user_input, action=None):\n    set_openai_api_key(openai_api_key)\n    set_nut_api_key(nut_api_key)\n\n    fitness_agent = FitnessAgent(openai_api_key, nut_api_key)\n\n    # Get raw chat response\n    fitness_agent.ask(user_input)\n\n    memory = fitness_agent.agent.chat_history\n\n    # Iterate through messages in ChatMessageHistory and format the output\n    updated_conversation = '<div style=\"background-color: hsl(30, 100%, 30%); color: white; padding: 5px; margin-bottom: 10px; text-align: center; font-size: 1.5em;\">Chat History</div>'\n    logger.info(memory)\n    for i, message in enumerate(memory):\n        if i != 0:\n            if message['role'] == 'user':\n                prefix = \"User: \"\n                background_color = \"hsl(0, 0%, 40%)\"  # Dark grey background\n                text_color = \"hsl(0, 0%, 100%)\"  # White text\n            else:\n                prefix = \"Chatbot: \"\n                background_color = \"hsl(0, 0%, 95%)\"  # White background\n                text_color = \"hsl(0, 0%, 0%)\"  # Black text\n            updated_conversation += f'<div style=\"color: {text_color}; background-color: {background_color}; margin: 5px; padding: 5px;\">{prefix}{message[\"content\"]}</div>'\n    return updated_conversation\n```"]