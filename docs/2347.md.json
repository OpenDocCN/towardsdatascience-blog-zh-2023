["```py\nfrom fastcore.all import *\nfrom fastai.vision.all import *\nfrom fastai.vision.widgets import *\nfrom fastdownload import download_url\n```", "```py\nfrom duckduckgo_search import DDGS\nimport itertools\nwith DDGS() as ddgs:\n    res = list(itertools.islice(ddgs.images('photo samoyed happy', \n                                license_image = 'any'), 1))\n```", "```py\n{\n   \"title\": \"Happy Samoyed dog photo and wallpaper. Beautiful Happy Samoyed dog picture\", \n   \"image\": \"http://www.dogwallpapers.net/wallpapers/happy-samoyed-dog-wallpaper.jpg\", \n   \"thumbnail\": \"https://tse2.mm.bing.net/th?id=OIP.BqTE8dYqO-W9qcCXdGcF6QHaFL&pid=Api\", \n   \"url\": \"http://www.dogwallpapers.net/samoyed-dog/happy-samoyed-dog-wallpaper.html\", \n   \"height\": 834, \"width\": 1193, \"source\": \"Bing\"\n}\n```", "```py\nbreeds = ['siberian husky', 'corgi', 'pomeranian', 'retriever', 'samoyed']\npath = Path('dogs_breeds') # defining path\n\nfor b in tqdm.tqdm(breeds):\n    dest = (path/b)\n    dest.mkdir(exist_ok=True, parents=True) \n\n    download_images(dest, urls=search_images(f'photo {b}'))\n    sleep(10) \n    download_images(dest, urls=search_images(f'photo {b} puppy'))\n    sleep(10) \n    download_images(dest, urls=search_images(f'photo {b} sleep'))\n    sleep(10) \n    resize_images(path/b, max_size=400, dest=path/b)\n```", "```py\ncleaner = ImageClassifierCleaner(learn)\ncleaner\n```", "```py\nfor idx in cleaner.delete(): cleaner.fns[idx].unlink()\nfor idx,breed in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/breed)\n```", "```py\nlearn.export('cuttest_dogs_model.pkl')\n```", "```py\n-- cloning repo\ngit clone https://huggingface.co/spaces/<your_login>/<your_app_name>\ncd <your_app_name>\n\n-- setting up git-lfs\ngit lfs install\ngit lfs track \"*.pkl\"\ngit add .gitattributes\ngit commit -m \"update gitattributes to use lfs for pkl files\"\n```", "```py\nimport gradio as gr\nfrom fastai.vision.all import *\n\nlearn = load_learner('cuttest_dogs_model.pkl')\n\nlabels = learn.dls.vocab # list of model classes\ndef predict(img):\n    img = PILImage.create(img)\n    pred,pred_idx,probs = learn.predict(img)\n    return {labels[i]: float(probs[i]) for i in range(len(labels))}\n\ngr.Interface(\n    fn=predict,\n    inputs=gr.inputs.Image(shape=(512, 512)),\n    outputs=gr.outputs.Label(num_top_classes=5),\n    title=\"The Cuttest Dogs Classifier üê∂üêïü¶Æüêï‚Äçü¶∫\",\n    description=\"Classifier trainded on images of huskies, retrievers, pomeranians, corgis and samoyeds. Created as a demo for Deep Learning app using HuggingFace Spaces & Gradio.\",\n    examples=['husky.jpg', 'retriever.jpg', 'corgi.jpg', 'pomeranian.jpg', 'samoyed.jpg'],\n    enable_queue=True).launch()\n```", "```py\ngit add * \ngit commit -am 'First version of Cuttest Dogs app'\ngit push\n```"]