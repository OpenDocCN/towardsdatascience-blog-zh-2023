- en: Improving Retrieval Performance in RAG Pipelines with Hybrid Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/improving-retrieval-performance-in-rag-pipelines-with-hybrid-search-c75203c2f2f5?source=collection_archive---------1-----------------------#2023-11-28](https://towardsdatascience.com/improving-retrieval-performance-in-rag-pipelines-with-hybrid-search-c75203c2f2f5?source=collection_archive---------1-----------------------#2023-11-28)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to find more relevant search results by combining traditional keyword-based
    search with modern vector search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie?source=post_page-----c75203c2f2f5--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----c75203c2f2f5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c75203c2f2f5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c75203c2f2f5--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----c75203c2f2f5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-retrieval-performance-in-rag-pipelines-with-hybrid-search-c75203c2f2f5&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----c75203c2f2f5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c75203c2f2f5--------------------------------)
    ·8 min read·Nov 28, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc75203c2f2f5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-retrieval-performance-in-rag-pipelines-with-hybrid-search-c75203c2f2f5&user=Leonie+Monigatti&userId=3a38da70d8dc&source=-----c75203c2f2f5---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc75203c2f2f5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-retrieval-performance-in-rag-pipelines-with-hybrid-search-c75203c2f2f5&source=-----c75203c2f2f5---------------------bookmark_footer-----------)![](../Images/3e36eecd3bc19f0e4e6666378bfedc71.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Search bar with hybrid search capabilities
  prefs: []
  type: TYPE_NORMAL
- en: With the recent interest in [Retrieval-Augmented Generation](https://medium.com/p/4e9bd5f6a4f2)
    (RAG) pipelines, developers have started discussing challenges in building RAG
    pipelines with production-ready performance. Just like in many aspects of life,
    the Pareto Principle also comes into play with RAG pipelines, where achieving
    the initial 80% is relatively straightforward, but attaining the remaining 20%
    for production readiness proves challenging.
  prefs: []
  type: TYPE_NORMAL
- en: One commonly repeated theme is to improve the retrieval component of a RAG pipeline
    with hybrid search.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Developers who have already gained experience building RAG pipelines have [started
    sharing their insights](https://medium.com/towards-data-science/the-untold-side-of-rag-addressing-its-challenges-in-domain-specific-searches-808956e3ecc8).
    One commonly repeated theme is to improve the retrieval component of a RAG pipeline
    with hybrid search.
  prefs: []
  type: TYPE_NORMAL
- en: This article introduces you to the concept of hybrid search, how it can help
    you improve your RAG pipeline performance by retrieving more relevant results,
    and when to use it.
  prefs: []
  type: TYPE_NORMAL
- en: '[What is Hybrid Search](#f7da)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Does Hybrid Search Work?](#fd67)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Can Hybrid Search Improve the Performance of Your RAG Pipeline?](#6b8c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[When Would You Use Hybrid Search?](#6244)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summary](#dec5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Hybrid Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hybrid search is a search technique that combines two or more search algorithms
    to improve the relevance of search results. Although it is not defined which algorithms
    are combined, hybrid search most commonly refers to the combination of traditional
    keyword-based search and modern vector search.
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, keyword-based search was the obvious choice for search engines.
    But with the advent of Machine Learning (ML) algorithms, vector embeddings enabled
    a new search technique — called vector or semantic search — that allowed us to
    search across data semantically. However, both search techniques have essential
    tradeoffs to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Keyword-based search:** While its exact keyword-matching capabilities are
    beneficial for specific terms, such as product names or industry jargon, it is
    sensitive to typos and synonyms, which lead it to miss important context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vector or semantic search:** While its semantic search capabilities allow
    multi-lingual and multi-modal search based on the data’s semantic meaning and
    make it robust to typos, it can miss essential keywords. Additionally, it depends
    on the quality of the generated vector embeddings and is sensitive to out-of-domain
    terms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining keyword-based and vector searches into a hybrid search allows you
    to leverage the advantages of both search techniques to improve search results'
    relevance, especially for text-search use cases.
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider the search query “How to merge two Pandas DataFrames with
    `.concat()`?”. The keyword search would help find relevant results for the method
    `.concat()`. However, since the word “merge” has synonyms such as “combine”, “join”,
    and “concatenate”, it would be helpful if we could leverage the context awareness
    of semantic search (see more details in [When Would You Use Hybrid Search](#6244)).
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested, you can play around with the different keyword-based,
    semantic, and hybrid search queries to search for movies in this live [demo](https://awesome-moviate.weaviate.io/)
    (its implementation is detailed in [this article](/recreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4)).
  prefs: []
  type: TYPE_NORMAL
- en: How Does Hybrid Search Work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hybrid search combines keyword-based and vector search techniques by fusing
    their search results and reranking them.
  prefs: []
  type: TYPE_NORMAL
- en: Keyword-based search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keyword-based search in the context of hybrid search often uses a representation
    called sparse embeddings, which is why it is also referred to as sparse vector
    search. Sparse embeddings are vectors with mostly zero values with only a few
    non-zero values, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Sparse embeddings can be generated with different algorithms. The most commonly
    used algorithm for sparse embeddings is [BM25](https://en.wikipedia.org/wiki/Okapi_BM25)
    (Best match 25), which builds upon the TF-IDF (Term Frequency-Inverse Document
    Frequency) approach and refines it. In simple terms, BM25 emphasizes the importance
    of terms based on their frequency in a document relative to their frequency across
    all documents.
  prefs: []
  type: TYPE_NORMAL
- en: Vector search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vector search is a modern search technique that has emerged with the advances
    in ML. Modern ML algorithms, such as [Transformers](https://huggingface.co/docs/transformers/index),
    can generate a numerical representation of data objects in various modalities
    (text, images, etc.) called vector embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: These vector embeddings are usually densely packed with information and mostly
    comprised of non-zero values (dense vectors), as shown below. This is why vector
    search is also known as dense vector search.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A search query is embedded into the same vector space as the data objects. Then,
    its vector embedding is used to calculate the closest data objects based on a
    specified similarity metric, such as cosine distance. The returned search results
    list the closest data objects ranked by their similarity to the search query.
  prefs: []
  type: TYPE_NORMAL
- en: Fusion of keyword-based and vector search results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both the keyword-based search and the vector search return a separate set of
    results, usually a list of search results sorted by their calculated relevance.
    These separate sets of search results must be combined.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different strategies to combine the ranked results of two lists
    into one single ranking, as outlined in a paper by [Benham and Culpepper](https://rodgerbenham.github.io/bc17-adcs.pdf)
    [1].
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, the search results are usually first **scored**. These scores
    can be calculated based on a specified metric, such as cosine distance, or simply
    just the rank in the search results list.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the calculated scores are weighted with a parameter `alpha`, which dictates
    each algorithm's weighting and impacts the results' re-ranking.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Usually, `alpha` takes a value between 0 and 1, with
  prefs: []
  type: TYPE_NORMAL
- en: '`alpha = 1`: Pure vector search'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alpha = 0`: Pure keyword search'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below, you can see a minimal example of the fusion between keyword and vector
    search with scoring based on the rank and an `alpha = 0.5`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb4ab0d1d032859830964568f7f2fa1d.png)'
  prefs: []
  type: TYPE_IMG
- en: Minimal example of how keyword and vector search results can be fused in hybrid
    search with scoring based on ranking and an alpha of 0.5 (Image by the author,
    inspired by [Hybrid search explained](https://weaviate.io/blog/hybrid-search-explained))
  prefs: []
  type: TYPE_NORMAL
- en: How Can Hybrid Search Improve the Performance of Your RAG Pipeline?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A [RAG pipeline](https://medium.com/p/4e9bd5f6a4f2) has many knobs you can tune
    to improve its performance. One of these knobs is to improve the relevance of
    the retrieved context that is then fed into the LLM because if the retrieved context
    is not relevant for answering a given question, the LLM won’t be able to generate
    a relevant answer either.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your context type and query, you have to determine which of the
    three search techniques is most beneficial for your RAG application. Thus, **the
    parameter** `**alpha**`**, which controls the weighting between keyword-based
    and semantic search, can be viewed as a hyperparameter that needs to be tuned.**
  prefs: []
  type: TYPE_NORMAL
- en: 'In a common [RAG pipeline using LangChain](https://medium.com/p/4e9bd5f6a4f2),
    you would define the retriever component by setting the used `vectorstore` component
    as the retriever with the `.as_retriever()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this method only enables semantic search. If you want to enable hybrid
    search in LangChain, you will need to define a specific `[retriever](https://python.langchain.com/docs/integrations/retrievers)`
    [component](https://python.langchain.com/docs/integrations/retrievers) with hybrid
    search capabilities, such as the `[WeaviateHybridSearchRetriever](https://python.langchain.com/docs/integrations/retrievers)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the vanilla [RAG pipeline](https://medium.com/p/4e9bd5f6a4f2) will
    stay the same.
  prefs: []
  type: TYPE_NORMAL
- en: This small code change allows you to experiment with different weighting between
    keyword-based and vector searches. Note that setting `alpha = 1` equals a fully
    semantic search as is the equivalent of defining the retriever from the `vectorstore`
    component directly (`retriever = vectorstore.as_retriever()`).
  prefs: []
  type: TYPE_NORMAL
- en: When Would You Use Hybrid Search (Hybrid Search Use Cases)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hybrid search is ideal for use cases where you want to enable semantic search
    capabilities for a more human-like search experience but also require exact phrase
    matching for specific terms, such as product names or serial numbers.
  prefs: []
  type: TYPE_NORMAL
- en: An excellent example is the platform Stack Overflow, which has recently extended
    its search capabilities with semantic search by using hybrid search.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://stackoverflow.blog/2023/07/31/ask-like-a-human-implementing-semantic-search-on-stack-overflow/?source=post_page-----c75203c2f2f5--------------------------------)
    [## Ask like a human: Implementing semantic search on Stack Overflow'
  prefs: []
  type: TYPE_NORMAL
- en: Semantic search allows users to search using natural language instead of a rigid
    syntax of keyword manipulation. Search…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: stackoverflow.blog](https://stackoverflow.blog/2023/07/31/ask-like-a-human-implementing-semantic-search-on-stack-overflow/?source=post_page-----c75203c2f2f5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Initially, Stack Overflow used TF-IDF to match keywords to documents [2]. However,
    describing the coding problem you are trying to solve can be difficult. It may
    lead to different results based on the words you use to describe your problem
    (e.g., combining two Pandas DataFrames can be done in different methods such as
    merging, joining, and concatenating). Thus, a more context-aware search method,
    such as semantic search, would be more beneficial for these cases.
  prefs: []
  type: TYPE_NORMAL
- en: However, on the other hand, a common use case of Stack Overflow is to copy-paste
    error messages. For this case, exact keyword matching is the preferred search
    method. Also, you will want exact keyword-matching capabilities for method and
    argument names (e.g., `.read_csv()` in Pandas).
  prefs: []
  type: TYPE_NORMAL
- en: As you can guess, many similar real-world use cases benefit from context-aware
    semantic searches but still rely on exact keyword matching. These use cases can
    strongly benefit from implementing a hybrid search retriever component.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article introduced the context of hybrid search as a combination of keyword-based
    and vector searches. Hybrid search merges the search results of the separate search
    algorithms and re-ranks the search results accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In hybrid search, the parameter `alpha` controls the weighting between keyword-based
    and semantic searches. This parameter `alpha` can be viewed as a hyperparameter
    to tune in RAG pipelines to improve the accuracy of search results.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Stack Overflow [2] case study, we showcased how hybrid search can
    be useful for use cases where semantic search can improve the search experience.
    However, exact keyword matching is still important when specific terms are frequent.
  prefs: []
  type: TYPE_NORMAL
- en: Enjoyed This Story?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----c75203c2f2f5--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----c75203c2f2f5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  prefs: []
  type: TYPE_NORMAL
- en: Disclaimer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am a Developer Advocate at Weaviate, an open source vector database, at the
    time of this writing.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Literature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Benham, R., & Culpepper, J. S. (2017). [Risk-reward trade-offs in rank
    fusion](https://rodgerbenham.github.io/bc17-adcs.pdf). In *Proceedings of the
    22nd Australasian Document Computing Symposium* (pp. 1–8).'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Haney, D. & Gibson, D. in Stack Overflow Blog. [Ask like a human: Implementing
    semantic search on Stack Overflow](https://stackoverflow.blog/2023/07/31/ask-like-a-human-implementing-semantic-search-on-stack-overflow/)
    (accessed Nov 24, 2023).'
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If not otherwise stated, all images are created by the author.
  prefs: []
  type: TYPE_NORMAL
