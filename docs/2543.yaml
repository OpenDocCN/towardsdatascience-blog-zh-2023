- en: Why You Need a Knowledge Graph, And How to Build It
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/why-you-need-a-knowledgegraph-and-how-to-build-it-ac4f35cb75b7?source=collection_archive---------0-----------------------#2023-08-09](https://towardsdatascience.com/why-you-need-a-knowledgegraph-and-how-to-build-it-ac4f35cb75b7?source=collection_archive---------0-----------------------#2023-08-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Guide to Migrating from a Relational Database to a Graph Database
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://swpugsley.medium.com/?source=post_page-----ac4f35cb75b7--------------------------------)[![Stan
    Pugsley](../Images/3b9894cdd03406db213c017a7d77b113.png)](https://swpugsley.medium.com/?source=post_page-----ac4f35cb75b7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ac4f35cb75b7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ac4f35cb75b7--------------------------------)
    [Stan Pugsley](https://swpugsley.medium.com/?source=post_page-----ac4f35cb75b7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc3a1e6da7396&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhy-you-need-a-knowledgegraph-and-how-to-build-it-ac4f35cb75b7&user=Stan+Pugsley&userId=c3a1e6da7396&source=post_page-c3a1e6da7396----ac4f35cb75b7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ac4f35cb75b7--------------------------------)
    ·7 min read·Aug 9, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fac4f35cb75b7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhy-you-need-a-knowledgegraph-and-how-to-build-it-ac4f35cb75b7&user=Stan+Pugsley&userId=c3a1e6da7396&source=-----ac4f35cb75b7---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fac4f35cb75b7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhy-you-need-a-knowledgegraph-and-how-to-build-it-ac4f35cb75b7&source=-----ac4f35cb75b7---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**TLDR: A knowledge graph organizes events, people, resources, and documents
    in a graph database for advanced analysis. This article will explain the purpose
    of a knowledge graph and show you the basics of how to translate a relational
    data model into a graph model, load the data into a graph database, and write
    some sample graph queries.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Why a Knowledge Graph?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relational databases are great for creating lists, but terrible for managing
    networks of diverse entities. Have you ever tried to do any of these tasks with
    a relational database?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: analyze a **healthcare episode of care** when a patient interacted with dozens
    of people, places and procedures
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: find patterns in **financial fraud** with a web of vendors, customers and transaction
    types involved
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在涉及到**金融欺诈**时，通过供应商、客户和交易类型的网络找到模式
- en: optimize the dependencies and interconnected elements of a **supply chain**
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化**供应链**的依赖关系和互联元素
- en: These are all examples of networks of events, people and resources that create
    huge headaches for SQL analysts using relational databases. Relational databases
    become exponentially slower as the network size increases, while graph databases
    have a relatively linear relationship. If you are managing a network, or web,
    of activities and things, a graph database is the right choice. In the future,
    we should expect to see enterprise data groups adopting a combination of **relational
    databases for isolated analysis** on one business function, and **knowledge graphs
    for complex, networked processes** that span functions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是事件、人员和资源网络的示例，这些网络给使用关系数据库的SQL分析师带来了巨大的头痛。随着网络规模的增加，关系数据库的速度会呈指数级下降，而图数据库则具有相对线性的关系。如果你在管理一个活动和事物的网络或网络，一个图数据库是正确的选择。未来，我们应该期待看到企业数据组采用**关系数据库进行孤立分析**，以及**知识图谱处理跨功能的复杂网络过程**的组合。
- en: A knowledge graph, based in graph database technology, is built to handle a
    diverse network of processes and entities. In a knowledge graph, you have nodes
    that represent people, events, places, resources, documents, etc. And you have
    relationships (edges) that represent links between the nodes. The relationships
    are physically stored in the database with a name and direction. Not every graph
    database is a knowledge graph. To be considered a knowledge graph, the design
    must **embed the business** [**semantic model**](https://medium.com/@nripapathak/semantic-data-modelling-92aa64582dc7),
    reflected in clear business names for nodes and relationships, in a diverse set
    of nodes that span multiple business functions. You are in essence creating a
    **seamless web** out of all parts of the business that interact, and using the
    business semantics to closely tie data to the processes they represent. This can
    serve as the **foundation for future generative LLM model** use.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图数据库技术的知识图谱，是为了处理多样的过程和实体网络而构建的。在知识图谱中，你会有代表人员、事件、地点、资源、文档等的节点。你还有表示节点之间链接的关系（边）。这些关系在数据库中物理存储，并具有名称和方向。并非所有的图数据库都是知识图谱。要被视为知识图谱，设计必须**嵌入业务**
    [**语义模型**](https://medium.com/@nripapathak/semantic-data-modelling-92aa64582dc7)，通过清晰的业务名称反映在多个业务功能跨越的节点集合中。你实际上是在创建一个**无缝的网络**，连接所有交互的业务部分，并使用业务语义将数据紧密地与其代表的过程联系起来。这可以作为**未来生成型LLM模型**使用的**基础**。
- en: 'To illustrate a diverse set of data in a knowledge graph, let’s look at a simple
    example for supply chain logistics. The business process might be modeled like
    this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在知识图谱中展示多样的数据集，我们来看一个关于供应链物流的简单示例。业务流程可能被建模为如下：
- en: '![](../Images/157b14bda8e08226239735ed7c22e643.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/157b14bda8e08226239735ed7c22e643.png)'
- en: Supply chain graph database model. Image by the author.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 供应链图数据库模型。图像由作者提供。
- en: 'This model could be extended to include any related part of the business processes:
    customer returns, invoices, raw materials, manufacturing processes, employees,
    and even customer reviews. There is no pre-defined schema, so the model can expand
    in any direction or depth.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型可以扩展到包括业务流程的任何相关部分：客户退货、发票、原材料、制造过程、员工，甚至客户评论。没有预定义的模式，因此模型可以在任何方向或深度上扩展。
- en: From Relational Model to Dimensional Model to Graph Model
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从关系模型到维度模型再到图模型
- en: 'Now let’s go through the process of translating a typical relational database
    model into a graph model using the scenario of an ecommerce vendor. Let’s assume
    that this vendor is running a series of digital marketing campaigns, receiving
    orders on their website, and shipping product to customers. The relational model
    could look like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过将一个典型的关系数据库模型转换为图模型的过程，使用电子商务供应商的场景。假设该供应商正在进行一系列数字营销活动，在其网站上接收订单，并向客户发货。关系模型可能如下所示：
- en: '![](../Images/6c7d862fcce9e6eb6d2b748783c195e3.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c7d862fcce9e6eb6d2b748783c195e3.png)'
- en: Ecommerce relational database model. Image by the author.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 电子商务关系数据库模型。图像由作者提供。
- en: 'If we were to convert this to a dimensional model for use in a data warehouse,
    the model could look like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其转换为数据仓库中的维度模型，该模型可能如下所示：
- en: '![](../Images/8ec4f138c2ec97e3157f82e4c312601c.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ec4f138c2ec97e3157f82e4c312601c.png)'
- en: Ecommerce dimensional model (data warehouse). Image by the author.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 电子商务维度模型（数据仓库）。图片由作者提供。
- en: Note that the fact tables are focused on events, and the dimension tables represent
    all of the attributes of a business entity combined into one table. This event-centered
    design gives faster query time, but creates other problems. Each event is a distinct
    fact table, and it is difficult to see the connection from one event to a related
    event. There is no easy way to understand all the relationships between a dimension
    entity, like a product, and all of the events that it shares with an entity in
    another dimension, like a carrier, when those relationships are split between
    multiple fact tables. The Dimensional Model focuses on one event at a time, but
    obscures the connections between the different events.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，事实表集中于事件，而维度表表示将业务实体的所有属性组合成一个表。这种以事件为中心的设计提供了更快的查询时间，但也带来了其他问题。每个事件都是一个独立的事实表，从一个事件到相关事件的连接很难看出。当这些关系被分割在多个事实表之间时，没有简单的方法来理解维度实体（如产品）与另一个维度中的实体（如承运人）之间共享的所有事件的关系。维度模型专注于一次一个事件，但掩盖了不同事件之间的连接。
- en: 'The graph model solves the problem of showing interrelatedness between entities
    by modeling the process like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图形模型通过将过程建模为如下方式，解决了显示实体间相互关系的问题：
- en: '![](../Images/b95db77f848760ca2063af1978deaf7d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b95db77f848760ca2063af1978deaf7d.png)'
- en: Ecommerce graph database model. Image by the author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 电子商务图形数据库模型。图片由作者提供。
- en: On first look, this graph model has more similarities to the relational model
    than to the dimensional model, but it can be used for the same analytical purposes
    as the data warehouse. Note that each relationship is named and has a direction.
    And relationships can be created between any nodes — event to event, person to
    person, document to event, etc. **The graph queries also allow you to traverse
    the graph in ways not possible with SQL.**
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首次查看，这个图形模型与关系模型的相似性多于与维度模型的相似性，但它可以用于与数据仓库相同的分析目的。注意每个关系都有名称和方向。而且，可以在任何节点之间创建关系——事件与事件、人际与人际、文档与事件等。**图形查询还允许你以SQL无法实现的方式遍历图形。**
- en: For example you can gather any nodes related to a key event and study the pattern
    of occurrence. Hierarchies are preserved and each level can be referenced individually,
    unlike a denormalized dimension table. Most importantly, graphs are much more
    flexible in modeling any event or entity in the business without following a strict
    set of schema constraints. The graph is designed to match the semantic model of
    the business.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以收集与关键事件相关的任何节点，并研究其出现模式。层次结构得到保留，每个层级可以单独引用，这不同于非规范化的维度表。最重要的是，图形在建模业务中的任何事件或实体时更具灵活性，不需要遵循严格的模式约束。图形设计旨在匹配业务的语义模型。
- en: Extract, Transform and Load (ETL)
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取、转换和加载（ETL）
- en: 'Now let’s look at a sample relational database table, and create some sample
    scripts to extract, transform and load the data into a graph database. For this
    article, I’m going to use Cypher language, which is used by [Neo4j](https://neo4j.com/),
    the most popular commercial graph database. But the concepts would apply to other
    variations of [graph query languages (GQL)](https://www.gqlstandards.org/). We
    will use the following sample Product table:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个示例关系数据库表，并创建一些示例脚本以提取、转换和加载数据到图形数据库中。在这篇文章中，我将使用由[Neo4j](https://neo4j.com/)提供的Cypher语言，Neo4j是最受欢迎的商业图形数据库。但这些概念也适用于其他变体的[图形查询语言（GQL）](https://www.gqlstandards.org/)。我们将使用以下示例产品表：
- en: '![](../Images/974529f665138bed48974a12b4720e57.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/974529f665138bed48974a12b4720e57.png)'
- en: Product table. Image by the author
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 产品表。图片由作者提供。
- en: 'Using this query we could pull the new products updated in the last 24 hours:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个查询，我们可以提取过去24小时内更新的新产品：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We could pull those results into a [Python Pandas](https://pandas.pydata.org/)
    dataframe named “df”, open a graph database connection, and then merge the dataframe
    into the graph using this script
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些结果提取到一个名为“df”的[Python Pandas](https://pandas.pydata.org/)数据框中，打开图形数据库连接，然后使用此脚本将数据框合并到图形中。
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first line references a parameter “df”, which is the dataframe from Pandas.
    We will merge into the node type “Product”, which is referenced by an alias “P”.
    Then the “product_id” section is used to bind to a unique identifier in the node.
    After that, the Merge statement looks similar to a merge in SQL.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行引用了一个参数“df”，这是来自 Pandas 的数据框。我们将合并到节点类型“Product”中，该节点通过别名“P”进行引用。然后，“product_id”部分用于绑定到节点中的唯一标识符。之后，Merge
    语句看起来类似于 SQL 中的合并。
- en: 'After we have created each of the nodes using merge statements like the one
    above, we create relationships. Relationships may be created either in the same
    script, or in a post-processing script using a merge command like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用如上所述的合并语句创建每个节点后，我们创建关系。关系可以在同一脚本中创建，也可以在后处理脚本中使用像这样的合并命令创建：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Match statement looks like the legacy join usage in Oracle, with two node
    types declared after the Match and then the join happening in the Where clause.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Match 语句看起来像 Oracle 中的传统连接用法，在 Match 之后声明两个节点类型，然后在 Where 子句中进行连接。
- en: Queries on the Graph Model
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图模型上的查询
- en: Let’s assume that we have built the graph, and now want to query it. We can
    use a query like this to see the Ad Groups that have driven orders from Arizona.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经构建了图，现在想要查询它。我们可以使用类似这样的查询来查看来自亚利桑那州的广告组推动的订单。
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This query would return the ad group name and count of orders, filtered on
    the state of Arizona. Note that no Group By clause is required in Cypher, unlike
    SQL. From that query, we would receive the following sample output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询将返回广告组名称和订单数量，筛选自亚利桑那州。请注意，Cypher 中不需要 Group By 子句，与 SQL 不同。从该查询中，我们将收到以下示例输出：
- en: '![](../Images/b05c0476daa8caf01376779c1ee5a8e1.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b05c0476daa8caf01376779c1ee5a8e1.png)'
- en: Sample results from a graph query. Image by the author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图查询的示例结果。图片由作者提供。
- en: 'This example might seem trivial because you could easily create a similar query
    in a relational database or data warehouse using the order fact table. But let’s
    consider a more complicated query. Suppose that you want to see the time it takes
    from the launch of a campaign until the attributable deliveries have been received.
    In a data warehouse, this query would cross fact tables (not a simple task) and
    take considerable resources. In a relational database, this query would involve
    a long series of joins. In a graph database, the query would look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可能看起来微不足道，因为你可以很容易地在关系数据库或数据仓库中使用订单事实表创建类似的查询。但让我们考虑一个更复杂的查询。假设你想查看从广告活动启动到可归因的交付被接收所需的时间。在数据仓库中，这个查询将跨越事实表（不是一项简单的任务）并且需要大量资源。在关系数据库中，这个查询将涉及一系列长连接。在图数据库中，这个查询看起来如下：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I used one sample query path, but there are a variety of paths that a user
    could take to answer different business questions. In the query, note that the
    path from Campaign to Delivery goes through a relationship between the Order and
    Delivery. Also note that for readability, I split the path into two parts, starting
    with the alias for Ad in the second line. The output of the query would look like
    this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一个示例查询路径，但用户可以采取多种路径来回答不同的业务问题。在查询中，请注意从 Campaign 到 Delivery 的路径通过 Order
    和 Delivery 之间的关系。此外，为了提高可读性，我将路径拆分为两部分，第二行以 Ad 的别名开始。查询的输出结果如下所示：
- en: '![](../Images/2f735ace47c047c8fb2c2caf55a7fc29.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2f735ace47c047c8fb2c2caf55a7fc29.png)'
- en: Sample results from a graph query. Image by the author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图查询的示例结果。图片由作者提供。
- en: Conclusion
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have looked at some sample steps to translate an e-commerce business process
    from a relational model to a graph model, but we can’t cover all of the design
    principles in this one article. Hopefully you have seen that graph databases require
    about the **same level of technical skill** as relational databases, and that
    the migration isn’t a huge hurdle.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经查看了一些将电子商务业务流程从关系模型转换为图模型的示例步骤，但在这篇文章中无法涵盖所有设计原则。希望你已经看到，图数据库要求的**技术水平**与关系数据库大致相同，并且迁移并不是一个巨大障碍。
- en: The biggest challenge is to retrain your brain away from traditional relational
    modeling techniques and think in terms of semantic or business modeling. If you
    see a potential application for graph technology, give it a try with a proof-of-concept
    project. The possibilities for analysis with a knowledge graph reach far beyond
    what you can do with two dimensional tables!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的挑战是让你的大脑摆脱传统的关系建模技术，转而以语义或业务建模的方式进行思考。如果你发现图形技术有潜在应用，试着通过一个概念验证项目进行尝试。知识图谱的分析可能性远远超出了你在二维表格中能做到的！
- en: '*All images are by the author*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图片均由作者提供*'
