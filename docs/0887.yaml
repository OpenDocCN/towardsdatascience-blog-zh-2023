- en: Optimizing Vacation Cabin Rental Revenues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/optimizing-vacation-cabin-rental-revenues-730d2847a2ed?source=collection_archive---------13-----------------------#2023-03-08](https://towardsdatascience.com/optimizing-vacation-cabin-rental-revenues-730d2847a2ed?source=collection_archive---------13-----------------------#2023-03-08)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A brief look at the science of revenue management with a Python demonstration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@cgarcia_80823?source=post_page-----730d2847a2ed--------------------------------)[![Chris
    Garcia](../Images/24fb0975ec922ec62469735d48c8a48f.png)](https://medium.com/@cgarcia_80823?source=post_page-----730d2847a2ed--------------------------------)[](https://towardsdatascience.com/?source=post_page-----730d2847a2ed--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----730d2847a2ed--------------------------------)
    [Chris Garcia](https://medium.com/@cgarcia_80823?source=post_page-----730d2847a2ed--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8a75b360a94b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vacation-cabin-rental-revenues-730d2847a2ed&user=Chris+Garcia&userId=8a75b360a94b&source=post_page-8a75b360a94b----730d2847a2ed---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----730d2847a2ed--------------------------------)
    ·9 min read·Mar 8, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F730d2847a2ed&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vacation-cabin-rental-revenues-730d2847a2ed&user=Chris+Garcia&userId=8a75b360a94b&source=-----730d2847a2ed---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F730d2847a2ed&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vacation-cabin-rental-revenues-730d2847a2ed&source=-----730d2847a2ed---------------------bookmark_footer-----------)![](../Images/2b3ab9a41515df69fa4f478a1f1124fd.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Evelyn Paris](https://unsplash.com/de/@evelynparis?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve ever bought plane tickets, you are certainly aware of the impact timing
    has on the price. A leisure flyer who buys their ticket six months in advance
    may only pay $200 for their seat, while the businessman who buys the day before
    pays $3,300 for the seat right next to them. We encounter similar situations whenever
    we book a hotel room, rent a car, or schedule tee time at a golf course. If you
    have ever wondered what is behind this and how it works, the answer is Revenue
    Management.
  prefs: []
  type: TYPE_NORMAL
- en: Revenue Management is a data science-driven enterprise that brings together
    customer segmentation, predictive analytics & machine learning, design of experiments,
    and mathematical optimization in an orchestrated manner to maximize revenues attained
    with existing capacity. By understanding the principles of Revenue Management,
    data scientists can apply their skills to help their firms and clients see substantial
    increases in revenue.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Science of Revenue Management**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Revenue Management (RM) is the science of predicting real-time customer demand
    at the micro-market level and optimizing the price and availability of products
    or services [1]. RM was pioneered by American Airlines in the 1980’s in response
    to a threat posed by a new low-fare competitor, People Express. American’s RM
    system differentiated prices between leisure and business flyers. It also used
    optimization algorithms to determine how many seats to open to early-booking,
    low-fare flyers and how many to protect for later-booking, high-fare business
    flyers. This approach proved highly successful, restoring American’s profitability
    while ultimately leading to the closure of People Express. As a result, many other
    industries have likewise begun employing RM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of RM is to offer the right product or service to the right customer
    at the right time through the right channel at the right price. Traditionally,
    RM was developed for businesses operating under a few conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Fixed Capacity:* Airlines have a fixed fleet size, and hotels have a fixed
    number of rooms, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Perishable Products or Services:* Unsold seats on a flight or hotel rooms
    on a given date cannot be sold later, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customers Reserve Resources Ahead of Time* (e.g., booking a flight or hotel
    room)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Today, RM techniques are being adapted beyond these assumptions for new industries
    such as E-commerce. In general, however, RM involves four interrelated activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb8afa0aeaafec2c1fc89d298c2d1b47.png)'
  prefs: []
  type: TYPE_IMG
- en: Key Revenue Management Activities
  prefs: []
  type: TYPE_NORMAL
- en: '*1\. Segment the Market*'
  prefs: []
  type: TYPE_NORMAL
- en: The first activity involves identifying different customer segments based on
    usage patterns or desires. For example, airlines segment customers into leisure
    flyers who book early and business flyers who book later, while car rental companies
    segment customers based on whether they want compact, mid-sized, or deluxe vehicles.
  prefs: []
  type: TYPE_NORMAL
- en: '*2\. Determine the Price Response*'
  prefs: []
  type: TYPE_NORMAL
- en: After segmenting, we must determine the price response and choose the best prices
    accordingly. If we price a segment’s offering too low, we may have no trouble
    selling, but we will also leave revenue on the table. By contrast, if we price
    too high we risk losing revenue through customers balking at our offers. We must
    therefore determine the best price each segment is willing to pay and the impact
    price increases will have on demand. This is often done through pricing experiments
    and can also incorporate competitor and industry data. Experiments should be conducted
    in real market conditions and repeated periodically, as factors including inflation,
    wage growth, holidays, and new competitors can all impact the price response.
  prefs: []
  type: TYPE_NORMAL
- en: '*3\. Forecast Demand*'
  prefs: []
  type: TYPE_NORMAL
- en: To begin applying RM, we need to specify a time horizon and then forecast demand
    for each segment in each usage slot within the horizon. As RM works at the micro-economic
    level, the time horizon is typically near-term and short in duration. A usage
    slot might be a flight leg in the airline industry, or a Friday-Sunday stay in
    the hospitality industry. So, for example, we forecast the demand for leisure
    and business flyers on each flight leg, or the demand for small and large hotel
    rooms for each bookable time interval.
  prefs: []
  type: TYPE_NORMAL
- en: '*4\. Optimize Capacity Allocation*'
  prefs: []
  type: TYPE_NORMAL
- en: Once we estimate the demands for each segment, we need to determine how to allocate
    our capacity to maximize revenue over the horizon. This tells us, for example,
    how many seats to sell to leisure flyers and how many to hold for business flyers,
    or how many cars to use to meet compact demand and how many to use for deluxe
    demand in each time slot. This can be mind-bogglingly difficult to do by hand
    because usage slots can overlap and prevent the same resources from being used
    for both. Substitutions can also be done when advantageous (for example, offering
    a large hotel room to someone who requests a small room), further increasing the
    complexity. For this reason, capacity allocation is typically accomplished via
    [integer programming](https://medium.com/hackernoon/mixed-integer-programming-a-straight-forward-tutorial-41cc50fb9c23).
  prefs: []
  type: TYPE_NORMAL
- en: These four activities should be thought of as key ingredients rather than strict
    steps in a process. Some RM systems focus primarily on capacity allocation, fixing
    prices ahead of the sale period, while others update prices frequently in response
    to ever-changing market conditions. These activities need to be coordinated in
    a tailored way for each individual application to achieve the best return on investment.
  prefs: []
  type: TYPE_NORMAL
- en: '**An Example Scenario: Optimizing Vacation Cabin Rental Revenue**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will illustrate one RM activity, capacity allocation, and demonstrate the
    impact it can have on revenues. This example can be viewed in a Jupyter notebook
    [**here**](https://nbviewer.org/github/chrisgarcia001/Notebooks/blob/master/cabin_rental_revenue_management/Cabin%20Rental%20Revenue%20Management.ipynb).
    Source code and data files for this example can be found [**here**](https://github.com/chrisgarcia001/Notebooks/tree/master/cabin_rental_revenue_management)**.**
  prefs: []
  type: TYPE_NORMAL
- en: 'A vacation cabin rental company owns the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 3 small cabins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5 medium cabins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3 large cabins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will assume that we have already determined the best prices and an accurate
    demand forecast for an upcoming long weekend as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34d0162be0c37a675017dea40cc27397.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The goal is to determine how many of each cabin type to allocate to the different
    demand slots to maximize revenues. We begin by importing the key libraries and
    reading in our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modeling the Problem**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will formulate and solve an integer programming (IP) model to allocate capacity
    to the demand forecast in a way that maximizes the revenue attained. This model
    assigns cabins to demand slots in the form of (*time interval, cabin size*) pairs
    and employs binary indicators to enable specification of allowable substitutions.
    We begin by defining the model inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f6d9df6e71228436fc891827954c33a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we define our decision variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07eec88b6ab374f8f313ea3e9549140c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The optimization model can now be formulated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd5479610f8b4d676ac252f3b9836caf.png)'
  prefs: []
  type: TYPE_IMG
- en: In the model above, the objective function (1) is simply the sum of all revenue
    attained over the period. Constraints in (2) ensure that we never overbook the
    available capacity for any cabin type. We do this by ensuring that for any cabin
    type *i* and slot *j* , the total number of type *i* cabins assigned either to
    slot *j* or any other slot that overlaps *j’*s start timedoes not exceed the number
    of type *i* cabins available. Constraints in (3) ensure we don’t allocate more
    cabins than demand for any slot. Constraints in (4) ensure that we never make
    invalid substitutions by assigning cabins to slots they cannot satisfy. Finally,
    constraints in (5) ensure non-negative integer domains for the decision variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below we define a Python function to construct an instance of this IP model
    from the input data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Obtaining an Optimal Capacity Allocation Plan**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will create an optimize function to solve the model, which will determine
    our optimal sales plan and revenue attained. To accomplish this, we first need
    to create a few helper functions to transform our raw data into the format needed
    by the model.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can optimize and view the revenues with the resulting sales plan. In
    this example, we will allow larger cabins to substitute for smaller ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the code above gives the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4107f994daf1d51cc26caba75d5f467.png)'
  prefs: []
  type: TYPE_IMG
- en: Interestingly, as we look at this optimal allocation plan, we note the many
    instances of substituting larger cabins for smaller ones that occur. As we will
    see, allowing these kinds of substitutions can have a big impact on revenues.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solving the Human Way: First Come, First Served**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is instructive to compare the optimal policy to one a human might implement
    without RM. Under such circumstances, rather than allocating to a demand forecast,
    an agent would simply sell cabin bookings as the requests come in a first-come-first-served
    (FCFS) order. It would not make a lot of sense to use substitutions in this case
    either, since we never know if the next request will be for a larger cabin which
    brings in more revenue.
  prefs: []
  type: TYPE_NORMAL
- en: The revenue generated by FCFS is very sensitive to the order in which requests
    come; these may come in an order that happens to tie up our cabins in a very sub-optimal
    way, or we may get lucky and get an ordering that generates near-maximal revenues.
    The code below implements the FCFS policy along with a pre-processing function
    to transform the raw data into the form needed by the algorithm. In the pre-processing
    function, we randomly order the booking requests to simulate the way they would
    come in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: '**Comparing Policies**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below we will compare two variations of optimization (one with no substitutions,
    and one that allows larger cabins to sub for smaller ones) against FCFS to see
    the impact on revenues. We will run FCFS 100 times, randomly ordering the booking
    requests each time, and compare the worst, median (i.e. typical), and best cases
    to the two optimization results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this gives the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e66a87c35a4e44f790f922c68b31c9be.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparing policies, we see that FCFS will typically leave revenue on the table
    — and if we get unlucky, this can be a significant amount. Only in the best case
    will FCFS reach the maximum revenue possible under the assumption of no substitutions
    allowed (which is always reached by the Optimization B policy). By allowing substitutions
    and optimizing, however, we attain a big boost in revenues — amounting to an increase
    of more than 22% over the worst-case (or well over $4,000) for the weekend. Moreover,
    this extra revenue is earned using existing capacity without incurring any additional
    costs, so it is entirely profit. This comparison demonstrates the impact RM can
    make.
  prefs: []
  type: TYPE_NORMAL
- en: As a final caveat, we point out that effective capacity allocation relies on
    good demand forecasts to use as optimization inputs. Some weeks our forecast will
    miss the mark. However, assuming forecasts can be typically made with reasonable
    accuracy, systems that use RM will in the aggregate outperform those that don’t.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Revenue Management is a science that can significantly increase revenues attained
    with existing capacity. By incorporating the elements of RM into the sales process,
    companies can begin to increase revenues without incurring additional operational
    costs.
  prefs: []
  type: TYPE_NORMAL
- en: '*All data and images, unless otherwise noted, are by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Cross, R.B. (1997). *Revenue management: hard-core tactics for market domination*.
    New York: Broadway Books, p. 276.'
  prefs: []
  type: TYPE_NORMAL
