["```py\n sin(1,freq=A-DEC)  cos(1,freq=A-DEC)  sin(2,freq=A-DEC)  cos(2,freq=A-DEC)\ntime                                                                              \n1956Q1           0.000000           1.000000           0.000000           1.000000\n1956Q2           0.999963           0.008583           0.017166          -0.999853\n1956Q3           0.017166          -0.999853          -0.034328           0.999411\n1956Q4          -0.999963          -0.008583           0.017166          -0.999853\n1957Q1           0.000000           1.000000           0.000000           1.000000\n...                   ...                ...                ...                ...\n2013Q1           0.000000           1.000000           0.000000           1.000000\n2013Q2           0.999769           0.021516           0.043022          -0.999074\n2013Q3           0.025818          -0.999667          -0.051620           0.998667\n2013Q4          -0.999917          -0.012910           0.025818          -0.999667\n2014Q1           0.000000           1.000000           0.000000           1.000000\n\n[233 rows x 4 columns]\n```", "```py\n s(1,4)  s(2,4)  s(3,4)  s(4,4)\ntime                                  \n1956Q1     1.0     0.0     0.0     0.0\n1956Q2     0.0     1.0     0.0     0.0\n1956Q3     0.0     0.0     1.0     0.0\n1956Q4     0.0     0.0     0.0     1.0\n1957Q1     1.0     0.0     0.0     0.0\n...        ...     ...     ...     ...\n2013Q1     1.0     0.0     0.0     0.0\n2013Q2     0.0     1.0     0.0     0.0\n2013Q3     0.0     0.0     1.0     0.0\n2013Q4     0.0     0.0     0.0     1.0\n2014Q1     1.0     0.0     0.0     0.0\n\n[233 rows x 4 columns]\n```", "```py\ndf = pd.read_csv('Quarterly_Australian_Portland_Cement_production_776_10.csv', usecols=['time', 'value'])\n# convert time from year float to a proper datetime format\ndf['time'] = df['time'].apply(lambda x: str(int(x)) + '-' + str(int(1 + 12 * (x % 1))).rjust(2, '0'))\ndf['time'] = pd.to_datetime(df['time'])\ndf = df.set_index('time').to_period()\ndf.rename(columns={'value': 'production'}, inplace=True)\n```", "```py\n production\ntime              \n1956Q1       0.465\n1956Q2       0.532\n1956Q3       0.561\n1956Q4       0.570\n1957Q1       0.529\n...            ...\n2013Q1       2.049\n2013Q2       2.528\n2013Q3       2.637\n2013Q4       2.565\n2014Q1       2.229\n\n[233 rows x 1 columns]\n```", "```py\nspectrum = compute_spectrum(df['production'], 4, 0.1)\nplot_spectrogram(spectrum, figsize_x=10)\n```", "```py\nseasonal_year = DeterministicProcess(index=df.index, constant=False, seasonal=True).in_sample()\nprint(seasonal_year)\n```", "```py\n s(1,4)  s(2,4)  s(3,4)  s(4,4)\ntime                                  \n1956Q1     1.0     0.0     0.0     0.0\n1956Q2     0.0     1.0     0.0     0.0\n1956Q3     0.0     0.0     1.0     0.0\n1956Q4     0.0     0.0     0.0     1.0\n1957Q1     1.0     0.0     0.0     0.0\n...        ...     ...     ...     ...\n2013Q1     1.0     0.0     0.0     0.0\n2013Q2     0.0     1.0     0.0     0.0\n2013Q3     0.0     0.0     1.0     0.0\n2013Q4     0.0     0.0     0.0     1.0\n2014Q1     1.0     0.0     0.0     0.0\n\n[233 rows x 4 columns]\n```", "```py\ncfr = CalendarFourier(freq='Y', order=2)\nseasonal_year_trig = DeterministicProcess(index=df.index, seasonal=False, additional_terms=[cfr]).in_sample()\nwith pd.option_context('display.max_columns', None, 'display.expand_frame_repr', False):\n    print(seasonal_year_trig)\n```", "```py\n sin(1,freq=A-DEC)  cos(1,freq=A-DEC)  sin(2,freq=A-DEC)  cos(2,freq=A-DEC)\ntime                                                                              \n1956Q1           0.000000           1.000000           0.000000           1.000000\n1956Q2           0.999963           0.008583           0.017166          -0.999853\n1956Q3           0.017166          -0.999853          -0.034328           0.999411\n1956Q4          -0.999963          -0.008583           0.017166          -0.999853\n1957Q1           0.000000           1.000000           0.000000           1.000000\n...                   ...                ...                ...                ...\n2013Q1           0.000000           1.000000           0.000000           1.000000\n2013Q2           0.999769           0.021516           0.043022          -0.999074\n2013Q3           0.025818          -0.999667          -0.051620           0.998667\n2013Q4          -0.999917          -0.012910           0.025818          -0.999667\n2014Q1           0.000000           1.000000           0.000000           1.000000\n\n[233 rows x 4 columns]\n```", "```py\ntrend_order = 2\ntrend_year = DeterministicProcess(index=df.index, constant=True, order=trend_order).in_sample()\nX = trend_year.copy()\nX = X.join(seasonal_year)\n```", "```py\n const  trend  trend_squared  s(1,4)  s(2,4)  s(3,4)  s(4,4)\ntime                                                               \n1956Q1    1.0    1.0            1.0     1.0     0.0     0.0     0.0\n1956Q2    1.0    2.0            4.0     0.0     1.0     0.0     0.0\n1956Q3    1.0    3.0            9.0     0.0     0.0     1.0     0.0\n1956Q4    1.0    4.0           16.0     0.0     0.0     0.0     1.0\n1957Q1    1.0    5.0           25.0     1.0     0.0     0.0     0.0\n...       ...    ...            ...     ...     ...     ...     ...\n2013Q1    1.0  229.0        52441.0     1.0     0.0     0.0     0.0\n2013Q2    1.0  230.0        52900.0     0.0     1.0     0.0     0.0\n2013Q3    1.0  231.0        53361.0     0.0     0.0     1.0     0.0\n2013Q4    1.0  232.0        53824.0     0.0     0.0     0.0     1.0\n2014Q1    1.0  233.0        54289.0     1.0     0.0     0.0     0.0\n\n[233 rows x 7 columns]\n```", "```py\ndef do_forecast(X, index_train, index_test, trend_order):\n    X_train = X.loc[index_train]\n    X_test = X.loc[index_test]\n\n    y_train = df['production'].loc[index_train]\n    y_test = df['production'].loc[index_test]\n\n    model = LinearRegression(fit_intercept=False)\n    _ = model.fit(X_train, y_train)\n    y_fore = pd.Series(model.predict(X_test), index=index_test)\n    y_past = pd.Series(model.predict(X_train), index=index_train)\n\n    trend_columns = X_train.columns.to_list()[0 : trend_order + 1]\n    model_trend = LinearRegression(fit_intercept=False)\n    _ = model_trend.fit(X_train[trend_columns], y_train)\n    y_trend_fore = pd.Series(model_trend.predict(X_test[trend_columns]), index=index_test)\n    y_trend_past = pd.Series(model_trend.predict(X_train[trend_columns]), index=index_train)\n\n    RMSLE = mean_squared_log_error(y_test, y_fore, squared=False)\n    print(f'RMSLE: {RMSLE}')\n\n    ax = df.plot(**plot_params, title='AUS Cement Production - Forecast')\n    ax = y_past.plot(color='C0', label='Backcast')\n    ax = y_fore.plot(color='C3', label='Forecast')\n    ax = y_trend_past.plot(ax=ax, color='C0', linewidth=3, alpha=0.333, label='Trend Past')\n    ax = y_trend_fore.plot(ax=ax, color='C3', linewidth=3, alpha=0.333, label='Trend Future')\n    _ = ax.legend()\n\ndo_forecast(X, index_train, index_test, trend_order)\n```", "```py\nRMSLE: 0.03846449744356434\n```", "```py\nenvelope_features = DeterministicProcess(index=X.index, constant=True, order=2).in_sample()\n\nspec4_train = compute_spectrum(df['production'].loc[index_train], max_period=4)\nspec4_train\n\nspec4_model = LinearRegression()\nspec4_model.fit(envelope_features.loc[spec4_train.index], spec4_train['4.0'])\nspec4_regress = pd.Series(spec4_model.predict(envelope_features), index=X.index)\n\nax = spec4_train['4.0'].plot(label='component envelope', color='gray')\nspec4_regress.loc[spec4_train.index].plot(ax=ax, color='C0', label='envelope regression: past')\nspec4_regress.loc[index_test].plot(ax=ax, color='C3', label='envelope regression: future')\n_ = ax.legend()\n```", "```py\nspec4_regress = spec4_regress / spec4_regress.mean()\n\nseason_columns = ['s(1,4)', 's(2,4)', 's(3,4)', 's(4,4)']\nfor c in season_columns:\n    X[c] = X[c] * spec4_regress\nprint(X)\n```", "```py\n const  trend  trend_squared    s(1,4)    s(2,4)    s(3,4)    s(4,4)\ntime                                                                       \n1956Q1    1.0    1.0            1.0  0.179989  0.000000  0.000000  0.000000\n1956Q2    1.0    2.0            4.0  0.000000  0.181109  0.000000  0.000000\n1956Q3    1.0    3.0            9.0  0.000000  0.000000  0.182306  0.000000\n1956Q4    1.0    4.0           16.0  0.000000  0.000000  0.000000  0.183581\n1957Q1    1.0    5.0           25.0  0.184932  0.000000  0.000000  0.000000\n...       ...    ...            ...       ...       ...       ...       ...\n2013Q1    1.0  229.0        52441.0  2.434701  0.000000  0.000000  0.000000\n2013Q2    1.0  230.0        52900.0  0.000000  2.453436  0.000000  0.000000\n2013Q3    1.0  231.0        53361.0  0.000000  0.000000  2.472249  0.000000\n2013Q4    1.0  232.0        53824.0  0.000000  0.000000  0.000000  2.491139\n2014Q1    1.0  233.0        54289.0  2.510106  0.000000  0.000000  0.000000\n\n[233 rows x 7 columns]\n```", "```py\ndo_forecast(X, index_train, index_test, trend_order)\n```", "```py\nRMSLE: 0.02546321729737165\n```"]