- en: Wordle Word Length and Letter Frequency Analysis Using Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/wordle-word-length-and-letter-frequency-analysis-using-julia-3fc5c63fedba?source=collection_archive---------12-----------------------#2023-02-10](https://towardsdatascience.com/wordle-word-length-and-letter-frequency-analysis-using-julia-3fc5c63fedba?source=collection_archive---------12-----------------------#2023-02-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exploring English word datasets to improve our game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@naresh-ram?source=post_page-----3fc5c63fedba--------------------------------)[![Naresh
    Ram](../Images/4a20b5646f75fb6cc2a5684fd3daf6db.png)](https://medium.com/@naresh-ram?source=post_page-----3fc5c63fedba--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3fc5c63fedba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3fc5c63fedba--------------------------------)
    [Naresh Ram](https://medium.com/@naresh-ram?source=post_page-----3fc5c63fedba--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa5665b0dac5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwordle-word-length-and-letter-frequency-analysis-using-julia-3fc5c63fedba&user=Naresh+Ram&userId=a5665b0dac5f&source=post_page-a5665b0dac5f----3fc5c63fedba---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3fc5c63fedba--------------------------------)
    ·19 min read·Feb 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3fc5c63fedba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwordle-word-length-and-letter-frequency-analysis-using-julia-3fc5c63fedba&user=Naresh+Ram&userId=a5665b0dac5f&source=-----3fc5c63fedba---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3fc5c63fedba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwordle-word-length-and-letter-frequency-analysis-using-julia-3fc5c63fedba&source=-----3fc5c63fedba---------------------bookmark_footer-----------)![](../Images/626ad3edde1f12cd388d3eeb5dc4f5e5.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Inspired by [Wordle](https://www.nytimes.com/games/wordle/index.html). Image
    by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: '[Wordle](https://www.nytimes.com/games/wordle/index.html)™ is a great game
    that needs no introduction. But keeping a streak alive is no easy task. So, to
    better understand how the gameplay works, let’s load up the English words in Julia
    and perform a little analysis on them. We’ll look at letter frequencies in general
    and the 5-letter words specifically to help make better-informed guesses in the
    game. Along the way, let’s also look at why five was chosen as the word length
    for the game.'
  prefs: []
  type: TYPE_NORMAL
- en: While I cannot guarantee it will reduce the number of guesses you make, I can
    guarantee a fun session of data analysis using [Julia](https://julialang.org/)
    and [Julia Plots](https://docs.juliaplots.org/).
  prefs: []
  type: TYPE_NORMAL
- en: At [AAXIS](https://www.aaxisdigital.com/), where I work, we implement business-to-business
    as well as business-to-consumer digital commerce solutions. Doing so includes
    migrating large amounts of data from an existing older system to a newer system
    with different data structures. We use a variety of data tools to analyze source
    data to ensure consistency. I routinely use techniques outlined in this article
    for that purpose. A good way to become familiar with these techniques is to use
    them often and the Wordle word list sounds like a fun way to practice.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/d988ce41b881f02bb5d44abf69e1cb32.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Linus Mimietz](https://unsplash.com/@linusmimietz?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/gvptKmonylk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: If you are planning to work alongside me to learn Julia, I strongly recommend
    you go through this section. If not, you can safely skip it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Julia
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please install Julia from the [Julia Language](https://julialang.org/downloads/)
    site. Installers are available for Windows, Mac, and Linux operating systems.
    I also installed the *Julia Language Support* extension for [VSCode](https://code.visualstudio.com/download)
    and am executing these commands in the [Julia REPL](https://docs.julialang.org/en/v1/stdlib/REPL/)
    in VSCode. That way, my graphs show up in the window, making it mightily convenient
    to analyze datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db73c709c922b58b1a4b2a0c04b99df5.png)'
  prefs: []
  type: TYPE_IMG
- en: Julia REPL in Visual Studio Code. Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s go ahead and load up the graphics and other required libraries.
    You’ll want to pull up a Julia REPL Window by typing CNTRL-SHIFT-P and selecting
    *Julia: Start REPL* after installation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type these in the Julia REPL to check to see if everything is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In VSCode, pressing SHIFT-ENTER while the code is selected, executes it and
    outputs the result in the Julia REPL underneath. You can just cut the code from
    this article, paste it into VSCode, select it, and press SHIFT-ENTER to execute
    it. To facilitate this method, I am going to be skipping the `julia>` prompt in
    the code. Note that you can type all these commands into the REPL, even the long
    ones with for-loops or functions in them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s load Plots. Your UI may be a little different as Julia might download
    and install some of the packages. We will also need DelimitedFiles and Statistics
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That last line should generate a graph as seen in the screenshot above.
  prefs: []
  type: TYPE_NORMAL
- en: Word Datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several word datasets are available online with varying degrees of cleanliness.
    Unfortunately, I don’t have permission to use most of them in this article. I
    have chosen SCOWL (Spell Checker Oriented Word Lists) and Friends, a database
    of information on English words useful for creating high-quality word lists suitable
    for use in spell checkers of most dialects of English, and is available for our
    [use](http://wordlist.aspell.net/scowl-readme/). Other word lists available to
    the public for educational purposes should you decide to explore them are listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Infochimp''s simple English word list](https://github.com/dwyl/english-words)
    is a list of English words by Infochimp. The GitHub site provides the list but
    specifies that the copyright lies with Infochimp. The link to Infochimp goes to
    a non-existent page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Collins Official Scrabble™ Words](https://www.collinsdictionary.com/games/scrabble/tools)
    list is endorsed by [WESPA](https://www.wespa.org/) for use in Tournament & Club
    play worldwide, excluding USA and Canada. The software is made [available](https://github.com/scrabblewords?tab=repositories)
    for private, non-commercial use only. It is an excellently curated list of English
    words.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Wordle Guess List](https://gist.github.com/dracos/dd0668f281e685bad51479e5acaadb93)
    is the complete list of 13K allowed words in the game and is copyrighted by Josh
    Wardle and now probably by the NY Times. This list closely matches the subset
    of 5-letter words from the Scrabble list above. The answer list, which is the
    2.5K possible answers for Wordle can be found [here](https://www.wordunscrambler.net/word-list/wordle-word-list).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's go ahead and grab the SCOWL word list and get it prepared for analysis.
    Head over to [http://app.aspell.net/create](http://app.aspell.net/create) and
    download the word list. The options I selected are shown here. I used the 80-size
    list for the next part and named the file scowl_american_words_80.txt.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/163d525c2cfb7657b8aec3078969dc06.png)'
  prefs: []
  type: TYPE_IMG
- en: Image of options chosen for generating the word list. Screenshot by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: I also downloaded the 35-size option and named it scowl_american_ words_35.txt.
    I use this for analyzing more common words later in the article.
  prefs: []
  type: TYPE_NORMAL
- en: For word usage, I use the presidential speeches available at [Miller Center](https://millercenter.org/the-presidency/presidential-speeches)¹.
    The speeches are in the public domain, so there are no restrictions on their use.
    Simply select the name of the president, click on the speech, and then click on
    the transcript. I copied the text and pasted it into a text editor (VSCode) for
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why 5-letter words?**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/95acbaadb23fee399a80f37672431646.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Glen Carrie](https://unsplash.com/@glencarrie?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/oHoBIbDj7lo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: My good friend and neighbor, Milan, brought up this question. He thought perhaps
    5-letter words might be the most common in the English language. It’s certainly
    worth checking by loading the SCOWL word list dataset we discussed in setup and
    computing the frequency of word lengths.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The aspell wordlist contains possessives like `zymurgy's` and proper nouns like
    `Albert.` Let’s get rid of them
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we should build a histogram for word lengths. We can do this in three
    ways that I know of; list comprehension, map function, and for-loop. They should
    all be approximately the same in Julia with regard to performance. Let’s take
    a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Generally speaking, while the list comprehension is slightly better in performance,
    they are all pretty close and I would pick the for-loop as it makes the logic
    clear and easy to follow. Now, the *word lengths* array should contain the length
    of each word. The min and max are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The min is 1 and the max is 45, but for the purpose of the histogram, I decided
    to put all the words greater than 20 in the “20” bin ( `len>20 ? 20 : len)`. Now
    let’s look at the distribution of each word length. Julia Plots make it easy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6a27f2e0991e8315cf4f2a3d5792c67e.png)'
  prefs: []
  type: TYPE_IMG
- en: Word Lengths in the English words dataset. Image by the Author
  prefs: []
  type: TYPE_NORMAL
- en: I actually ran the command above with some options to make the graph look a
    little more informative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And surprise, 5-letter words aren’t even in the 5 most frequent word lengths!
    They make up just 4.6% of our word dataset. Ravi Parikh² and Reginald Smith³ also
    report similar findings (5.2%). The difference may be because I chose a word dataset
    which probably does not have slang, hyphenated words, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, the graph looks like a classic bell curve distribution. This bell-shaped
    curve is a common feature of nature and psychology⁴ such as birthweights of babies,
    the heights of males, blood pressure measurements, etc. I am no linguist, but
    in my opinion, this reveals to me that the English language seemed to have evolved
    as if it were nature-based and random.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The most common word lengths are 8 and 9, but I can’t seem to readily think
    of any. So, let’s list a few to make sure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: AASVOGELS? Apparently, it’s a South African vulture. SASSAFRAS? No wonder I
    am no good at Scrabble.
  prefs: []
  type: TYPE_NORMAL
- en: So, how many 5-letter words are there?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As opposed to 36K 9-letter words, there are only 11K 5-letter words. Hmm …
  prefs: []
  type: TYPE_NORMAL
- en: '**Then why 5-letter words for Wordle?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps we use them more.
  prefs: []
  type: TYPE_NORMAL
- en: My editor Megan, the good lady who helps me with these articles, was of the
    opinion that an average person is most comfortable with 5-letter words. This would
    mean that 5-letter words should make up most of our communication and appear at
    a higher frequency. To validate this theory, I turned to presidential speeches.
  prefs: []
  type: TYPE_NORMAL
- en: Presidential speeches are often written professionally for a wide audience that
    includes people from different backgrounds and perspectives, so it’s important
    for the writing to be inclusive, culturally sensitive, and accessible. The speechwriter
    must also have a deep understanding of current events and political issues to
    effectively communicate the president’s stance and goals. There is a lot riding
    on a presidential speech, as it can impact public opinion and shape the political
    discourse. And hence, they make excellent representative texts of the language
    of that time.
  prefs: []
  type: TYPE_NORMAL
- en: And these speeches are in the public domain and easily [accessible](https://millercenter.org/the-presidency/presidential-speeches)
    for us to analyze¹.
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, I grabbed speeches from the last four presidents of the United
    States of America. I then analyzed the word lengths and graphed them.
  prefs: []
  type: TYPE_NORMAL
- en: To make the graphing easy, I wrote a function to return the histogram data.
    Words that are longer than 18 letters, get bucketed under 18 letters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: I am using the Poor man’s tokenizer. A tokenizer, essentially, splits a text
    into words or sub-words so we can process them individually. Poor man’s tokenizer
    deletes all punctuation and splits into spaces, which isn’t all that sophisticated
    but is enough for our purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Julia’s tokenizer interface takes a `text` as input and returns an array of
    individual words. Then, we simply loop through all the words in the array, compute
    the length and increment the bucket that represents that length.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the function is ready, we can process the speech files in text format.
    First, let’s take a look at the inaugural speeches found [here](https://millercenter.org/the-presidency/presidential-speeches).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So, we process each inaugural speech and create an array of buckets. We horizontally
    concatenate ( `hcat`) them to get a single 18x5 array that we can plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first line above does the plot and then I save the graph as an image file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ef5fa66d7a0e7996f0fd73b9c2228df.png)'
  prefs: []
  type: TYPE_IMG
- en: Word length in presidential speeches. Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: The graph here shows the distribution for each of the speeches. For example,
    under 3% of all unique words that made up President Obama’s inaugural speech consisted
    of 2-letter words
  prefs: []
  type: TYPE_NORMAL
- en: 5-letter words seem to be popular along with 4, 6-letter words. Note that while
    9-letter words make up 15% of the dictionary, they only constitute less than 8%
    of all unique words used in the speech.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at a more unscripted setting. This should give us an idea of
    daily diction instead of well-thought-through scripted work. I pick one press
    conference for each of the last four presidents and analyze them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And plot the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/68650cd1995cfa74a7f9fb1fdeaf8117.png)'
  prefs: []
  type: TYPE_IMG
- en: Word length of presidential press conferences. Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Here the pattern is clearer. Except for President Biden (who seems to favor
    4-letter words), 5-letter words are a clear winner.
  prefs: []
  type: TYPE_NORMAL
- en: In literature and online, we can find further evidence of this fact. The average
    word length of articles in the New York Times apparently is 4.9⁵. According to
    [WolframAlpha](https://www.wolframalpha.com/input?i=average+english+word+length),
    the average word length in the English language works is 5.1 characters. The same
    site also claims that the average word length for Encyclopaedia Britannica Online
    is 5.3 and for Wikipedia, it is 5.2\. This article has an average of 4.75 letters
    per word, computed [here](https://countwordsworth.com/). That doesn’t seem like
    too bad of a company.
  prefs: []
  type: TYPE_NORMAL
- en: So, why 5 letters? In English, our diction appears to make up of 5-letter words
    even though there is a larger variety of words that are longer to choose from.
    Perhaps Josh Wardle tried four, five, and six and decided five makes the most
    sense for the target audience and the target time to solve it. The game should
    be a little challenging so you feel like you accomplished something but not too
    hard. Or, though less likely, he went through this kind of analysis and decided
    on five letters. Guess we will never know.
  prefs: []
  type: TYPE_NORMAL
- en: Letter Frequency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/057867e72a40485bfab375742041096e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Isaac Smith](https://unsplash.com/es/@isaacmsmith?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/6EnTPvPPL6I?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have put the question of why five letters to bed, let’s focus on
    improving our game.
  prefs: []
  type: TYPE_NORMAL
- en: One strategy for playing Wordle is to maximize hits (yellows or greens) so as
    to reduce the number of total guesses. An obvious approach is to choose words
    with the most common letters in them⁶. Simulations at the University College Dublin
    found that the mean number of guesses could go from 5 to 4, based on a good first-word
    choice⁷. This is where letter frequency analysis can help.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s do some work on the entire word dataset we downloaded earlier.
    These will include words of all lengths. Once we have figured out the frequency
    in all English words, we can compare that with letter frequency in 5-letter words
    to see if there are any significant differences.
  prefs: []
  type: TYPE_NORMAL
- en: I can’t readily think of a way to do this using list comprehension. However,
    “map” and “for-loop” are quite easy. Since the map was a little faster, let’s
    do that first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'I don’t know about you, but if that wasn’t my code, I’d be a little lost as
    to what it is doing. Let’s see if for-loop is any better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This one I can read: a for-loop for the words and then a for-loop for the characters.
    After that, I simply tally the letters. The performance isn’t that bad either,
    a ten percent drop with increased readability seems worth it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s graph this array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: And here it is.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7a86e3c0827cb89d4ef8a8bb21573d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Percent of appearance of letters in the entire word dataset. Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: The way the code works, we ended up counting 2 for an ‘E’ in ‘SLEEP’. That is
    why we are seeing over 100% for the appearance of E in the dataset. We should
    only count 1, even if the letter appears more than once in the word. We can fix
    this by simply removing duplicate characters in the word, before doing the tally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'I changed the `collect`in the second for-loop to `unique`. Now, let’s graph
    both and see if things change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8a15e3bb31ef34fd45d8ad903d33058.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison of the count of appearances with and without unique letters. Image
    by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: I can’t see anything majorly different in the patterns. The most frequent letters
    are the most repeating. We can use the unique letters to drive our word choice
    decision in Wordle from this point forward.
  prefs: []
  type: TYPE_NORMAL
- en: The guess and answer word sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The above analysis is for the entire English word dataset, however, would it
    be different with just the 5-letter words? Let’s find out. Let's make a new array
    with just the 5-letter words using the `filter` Julia keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The official Wordle [guess word list](https://github.com/tabatkins/wordle-list/blob/main/words)
    contains slightly under 13K words. So, we are close enough. These are words that
    you are allowed to enter in the game box. The [Wordle answer word](https://www.wordunscrambler.net/word-list/wordle-word-list)
    list is a subset that contains 2.3K words and constitutes only words that could
    possibly come as the hidden answer. So, why the difference?
  prefs: []
  type: TYPE_NORMAL
- en: Josh Wardle and his partner, Palak Shah, created a curated list of [answer words](https://www.wordunscrambler.net/word-list/wordle-word-list)
    avoiding obscure and cryptic words to make the game fun for everyone⁸. While you’ll
    find ZOPPA is a valid guess word that you can use, don’t hold your breath for
    it to appear as the answer any time soon.
  prefs: []
  type: TYPE_NORMAL
- en: To see if there is a difference in letter frequency patterns between the two,
    let’s generate that list as well. I use the size-35 [aspell](http://app.aspell.net/create)
    word list as a starting point as it is supposed to have more common English words
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This list contains 39K words as compared to 343K words in the 85-size word list.
    Let’s filter for just the 5-letter words.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Wardle and Shah also removed all the plural words from their answer word list.
    Plurals such as CROPS, ROCKS, DROPS, etc have been removed from the answer list
    where as they are still present in the guess list. Let’s see how many plurals
    we have roughly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 35% or 1185 of the 3467 words in the guess word list are plurals! CROSS, CLASS,
    etc. are some representative words in the answer list and they do not have a 3
    or 4-letter singular variant (all of these words have already appeared in Wordle,
    so no spoilers here).
  prefs: []
  type: TYPE_NORMAL
- en: This explains why recently, my good friend, Sirisha, uncharacteristically struggled
    with that day’s word, finally solving it in 6 tries. She is an active member of
    my middle school group which solves Wordle on a daily basis and is usually very
    good at it. However, she felt that she had too many choices not knowing that 30%
    of the plurals forms were removed from the answer list⁸. Now armed with this information,
    she is unlikely to get stumped next time an S is flagged green in 5th slot. And
    so are we.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start analyzing the answer list for patterns, let's take a look at
    the letter frequency in the three sets we have so far; the entire 85-word list,
    5-letter guess word list, and the 5-letter answer word list.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s write a helper function to load the word lists,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: With the function ready, let’s load it up.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: And now the comparison plot,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: I concatenated the frequencies and then, plotted them on the line plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89699e816906cd739c58fc68d0d27b41.png)'
  prefs: []
  type: TYPE_IMG
- en: Letter frequencies for words from the entire dataset, guess, and answer lists.
    Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: In the graph above, each data point indicates the percentage of words that contain
    that specific letter. As an example, for A, 47% of all words in the English word
    list have at least one A in them. Comparatively, only 37% of the words in the
    guess, and answer word list contain an A. The difference between the frequency
    percent is due probably to the longer words in the English word list as some of
    the letters like A, E, I, R etc. appear with higher frequency in longer words.
    We already know that S is so much lower in the answer word list because of the
    removal of plurals.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the guess list may give incorrect patterns for S. So, let’s focus
    on the answer list and analyze it for trends in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Frequency of letters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now plot the letter frequency in sequential order so that the letters
    with the highest frequency of appearance are shown on top of the graph.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Julia’s sortperm return a permutation vector `I` that puts `cfAnswerlist[I]`
    in sorted order. The bar chart gets `cfAnswerlist[listOrder]` which is a sorted
    list of frequency values. The yticks parameter of the `bar` function is assigned`('A':'Z')[listOrder]`
    , which sorts the array from A to Z in order of decreasing frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1dbb827ad99c82791bc0c8112ee1fca.png)'
  prefs: []
  type: TYPE_IMG
- en: Frequency of appearance of letters in the answer list. Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: E is the most frequent with it appearing at least once in 52% of the answer
    words. A, R, O, I, and T are the next five. ORATE appears to be a good starting
    word.
  prefs: []
  type: TYPE_NORMAL
- en: V, X, Z, Q, and J are the least common, with J appearing in slightly over 1%
    of the answer list. I haven't verified this, but the analysis stating that XYLYL
    was the worst starting word⁹ seems to be right.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The distribution of letters in the answer list can be quite useful to study
    and remember. Let’s say you went with your first guess of ‘ORATE’ or (my other
    favorite) ‘AROSE’. For ORATE, You received 3 yellows R, A, and E. The next choice
    could be LASER, WAVER to name a few. I am assuming you are playing using the “Hard
    Mode”. The graph above tells us that, L and S are more likely to be in the answer
    word than the letters W and V. In fact, roughly 3 times as likely. So, my guess
    would be LASER.
  prefs: []
  type: TYPE_NORMAL
- en: As another example, if you received no hits on AROSE, I usually try ‘UNWIT’
    followed by GLYPH. For a no-hit on ORATE, SULCI can be a good second guess followed
    by NYMPH.
  prefs: []
  type: TYPE_NORMAL
- en: As a strategy, you can either remember the fill sequence of frequencies;
  prefs: []
  type: TYPE_NORMAL
- en: EAROI TLSDN CUHYP GMBKW FVXZQ J
  prefs: []
  type: TYPE_NORMAL
- en: Or, remember the three words ORATE, SULCI, and NYMPH (and D). When you get a
    hit on ORATE, say E, you can start picking letters from SULCI and NYMPH for your
    next word (CLUES comes to mind here).
  prefs: []
  type: TYPE_NORMAL
- en: Other researchers have recommended a similar strategy of picking three words
    with mutually exclusive letters. Nisansa de Silva¹⁰ recommends RAISE, CLOUT, and
    NYMPH. I personally have also used AROSE, UNWIT, and GLYPH in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/0d7486ff6e274a639a5c0715c07b8a6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/By-tZImt0Ms?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: We’ve looked at two aspects of the game Wordle, using Julia to analyze the words.
    First, I tried to justify the choice of the number of letters (five) in the game
    and, it turns out, our speech and written works tend to use 5-letter words with
    higher frequency than words of other lengths. So, the choice of 5-letters for
    the game makes a lot of sense.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, we looked at the entire English word list first and then the frequency
    of letters in the five-letter guess and the condensed answer lists. The distribution
    graph for the letters can be used to guess words more effectively. I noted that
    remembering ORATE, SULCI, and NYMPH can help us to guess words that are likely
    to return more hits. Using these letters as a guide will help improve your game.
  prefs: []
  type: TYPE_NORMAL
- en: With these tips in mind, all the best with your next Wordle game tomorrow!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Miller Center of Public Affairs, University of Virginia. “Presidential Speeches:
    Downloadable Data.” Accessed March 17, 2022\. [https://millercenter.org/presidential-speeches-downloadable-data](https://millercenter.org/presidential-speeches-downloadable-data).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ravi Parikh, “Distribution of Word Lengths in Various Languages”, Website [http://www.ravi.io/language-word-lengths](http://www.ravi.io/language-word-lengths)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reginald Smith, “Distinct word length frequencies: distributions and symbol
    entropies”, [https://arxiv.org/ftp/arxiv/papers/1207/1207.2334.pdf](https://arxiv.org/ftp/arxiv/papers/1207/1207.2334.pdf)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Liston Tellis, “Normal Distribution — The Bell Curve”, Medium, July 5, 2020\.
    [https://medium.com/analytics-vidhya/normal-distribution-the-bell-curve-4f4a5fc2caaa](https://medium.com/analytics-vidhya/normal-distribution-the-bell-curve-4f4a5fc2caaa)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ann Wylie, “What’s the best length of a word online?”, Ann Wylie’s blog of writing
    tips, [https://www.wyliecomm.com/2021/11/whats-the-best-length-of-a-word-online/](https://www.wyliecomm.com/2021/11/whats-the-best-length-of-a-word-online/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ste Knight, “12 Wordle Tips and Tricks to Improve Your Score”, Make Use Of,
    Sept 2022, [https://www.makeuseof.com/wordle-tips-hints-tricks/](https://www.makeuseof.com/wordle-tips-hints-tricks/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Barry Smyth, “Big Data in Little Wordle”, Jun 2022, Towards Data Science, [https://towardsdatascience.com/big-data-in-little-wordle-306d5502c4d9](/big-data-in-little-wordle-306d5502c4d9)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jonathan Lee, “The New York Times is finally making changes to Wordle”, The
    Washington Post, Nov 2022, [https://www.washingtonpost.com/video-games/2022/11/07/wordle-new-answers-new-york-times-update/](https://www.washingtonpost.com/video-games/2022/11/07/wordle-new-answers-new-york-times-update/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Brittany Alva, “The Worst Starting Word in Wordle, According to Science”, SVG,
    Mar 2022, [https://www.svg.com/751712/the-worst-starting-word-in-wordle-according-to-science/](https://www.svg.com/751712/the-worst-starting-word-in-wordle-according-to-science/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nisansa de Silva, “Selecting Seed Words for Wordle using Character Statistics”,
    Feb 2022, *arXiv:2202.03457,* [https://arxiv.org/pdf/2202.03457.pdf](https://arxiv.org/pdf/2202.03457.pdf)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
