["```py\n##########################################\n# Load Libraries\n##########################################\nlibrary(\"ggplot2\")\nlibrary(\"dplyr\")\nlibrary(\"scales\")\nlibrary(\"patchwork\")\n\n#############\n# ARPV\n#############\n# Plot\nrevenue_plot <- \n  dataset %>%\n  ggplot(aes(revenue)) +                          \n  geom_histogram(fill =\"turquoise3\", colour = \"white\", binwidth = 2, boundary = 0) +\n  scale_x_continuous(breaks = seq(0, max(dataset$revenue), 14) ) +\n  ylab(\"No of Visitors\") +\n  xlab(\"28-day Revenue (each bar is Â£2)\") +\n  ggtitle(\"Histogram of 28-day Revenue\") +\n  theme_classic()\n\n# Statistics\ndataset %>% select(revenue) %>% summary()\ndataset %>% summarise(sqr_rt = sd(revenue))\n\n#############\n# ATPV\n#############\n# Plot\ntransactions_plot <- \n  dataset %>%\n  ggplot(aes(x = transactions)) +                          \n  geom_bar(fill =\"turquoise3\", colour = \"white\") +\n  scale_x_continuous(breaks = seq(0, max(dataset$transactions), 1) ) +\n  ylab(\"No of Visitors\") +\n  xlab(\"28-day Transactions\") +\n  ggtitle(\"Histogram of 28-day Transactions\") +\n  theme_classic()\n\n# Statistics\ndataset %>% select(transactions) %>% summary()\ndataset %>% summarise(sqr_rt = sd(transactions))\n\n#################\n# Output plot\n#################\nrevenue_plot + transactions_plot\n```", "```py\n##########################################\n# Load Libraries\n##########################################\nlibrary(\"pwr\")\n\n##########################################\n# Cohen's power for ARPV\n##########################################\nstd_arpv <- dataset %>% summarise(std = sd(revenue))\narpv_current_vers <- dataset %>% summarise(avg = mean(revenue))\narpv_new_vers <- arpv_current_vers * 1.05\neffect_size_arpv <- as.numeric(abs(arpv_current_vers - arpv_new_vers)/std_arpv)\n\npwr_results_arpv <- pwr.t.test(\n  d = effect_size_arpv, \n  sig.level = 0.05, \n  power = 0.8, \n  type = c(\"two.sample\")\n  )\nplot(pwr_results_arpv)\npwr_results_arpv\n\n##########################################\n#Cohen's power for ATPV\n##########################################\nstd_atpv <- dataset %>% summarise(std = sd(transactions))\natpv_current_vers <- dataset %>% summarise(avg = mean(transactions))\natpv_new_vers <- atpv_current_vers * 1.05\neffect_size_atpv <- as.numeric(abs(atpv_current_vers - atpv_new_vers)/std_atpv)\n\npwr_results_atpv <- pwr.t.test(\n  d = effect_size_atpv, \n  sig.level = 0.05, \n  power = 0.8, \n  type = c(\"two.sample\")\n  )\nplot(pwr_results_atpv)\npwr_results_atpv\n```", "```py\n##########################################\n# Load Libraries\n##########################################\nlibrary(\"caret\")\n\n##########################################\n# Function for Simulation\n##########################################\nsimulating_sample_size <-\n  function(dataset, iterations, sample_sizes_vector, kpi) {\n\n    n <- iterations\n    output_df <- data.frame(NULL)\n\n    for (j in sample_sizes_vector) {\n      # create 2,000 samples for sample size j\n      sampling_df <- data.frame(NULL)\n      for (i in 1:n) {\n        sampling_temporary <-\n          data.frame(kpi = sample(dataset[[kpi]], j, replace = TRUE))\n        trainIndex <-\n          createDataPartition(\n            sampling_temporary$kpi,\n            p = 0.5,\n            list = FALSE,\n            times = 1\n          )\n        ## split into control and treatment\n        sampling_df[i, 1] <- mean(sampling_temporary[trainIndex,])\n        sampling_df[i, 2] <- mean(sampling_temporary[-trainIndex,])\n        }\n\n      # compute aggregates for sample size j\n      # and union with old entries\n      output_df <- output_df %>%\n        union_all(\n          .,\n          sampling_df %>%\n            mutate(diff = round((V2 - V1) / V1, 2)) %>%\n            summarize(\n              trim_0.05_diff = round(quantile(diff, c(0.025)),2),\n              trim_0.95_diff = round(quantile(diff, c(0.975)),2),\n              mean_0.05_abs = round(mean(V1),2),\n              mean_0.95_abs = round(mean(V2),2)\n            ) %>%\n            mutate(iter = j)\n        )\n    }\n\n    return(output_df)\n}\n```", "```py\n##########################################\n# ARPV simulation\n##########################################\nsimulation_arpv <- \n  simulating_sample_size (\n    dataset = dataset,\n    iterations = 2000,\n    sample_sizes_vector = c(500,1000,2000,3000,4000, 10000, 15000, 20000),\n    kpi = \"revenue\"\n)\n\n##########################################\n# ATPV simulation\n##########################################\nsimulation_atpv <- \n  simulating_sample_size (\n    dataset = dataset,\n    iterations = 2000,\n    sample_sizes_vector = c(500,1000,2000,3000,4000, 10000, 15000, 20000),\n    kpi = \"transactions\"\n)\n```", "```py\n##########################################\n# Plot ARPV from simulations\n##########################################\narpv_sim_plot <- simulation_arpv %>%  \n  ggplot(aes(x = as.factor(iter), y = trim_0.05_diff )) +                          \n  geom_col(aes(y = trim_0.05_diff ), fill=\"turquoise3\", alpha=0.9,width = 0.5) +\n  geom_text(aes(label = scales::percent(trim_0.05_diff)), vjust = -0.5, size = 5) +\n  geom_col(aes(y = trim_0.95_diff ), fill=\"turquoise3\", alpha=0.9,width = 0.5) +\n  geom_text(\n    aes(x = as.factor(iter), y = trim_0.95_diff,  label = scales::percent(trim_0.95_diff)),\n    vjust = -0.5, size = 5\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab(\"% Difference in ARPV\") +\n  xlab(\"Sample size\") +\n  theme_classic() +\n  geom_hline(yintercept= 0, linetype=\"dashed\", color = \"red\")\n\n##########################################\n# Plot ATPV from simulations\n##########################################\natpv_sim_plot <- simulation_atpv %>%  \n  ggplot(aes(x = as.factor(iter), y = trim_0.05_diff )) +                          \n  geom_col(aes(y = trim_0.05_diff ), fill=\"turquoise3\", alpha=0.9,width = 0.5) +\n  geom_text(aes(label = scales::percent(trim_0.05_diff)), vjust = -0.5, size = 5) +\n  geom_col(aes(y = trim_0.95_diff ), fill=\"turquoise3\", alpha=0.9,width = 0.5) +\n  geom_text(\n    aes(x = as.factor(iter), y = trim_0.95_diff,  label = scales::percent(trim_0.95_diff)),\n    vjust = -0.5, size = 5\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab(\"% Difference in ATPV\") +\n  xlab(\"Sample size\") +\n  theme_classic() +\n  geom_hline(yintercept= 0, linetype=\"dashed\", color = \"red\")\n\n#################\n# Output plot\n#################\n (arpv_sim_plot + coord_flip()) + (atpv_sim_plot + coord_flip())\n```", "```py\nset.seed(15)\n\n##########################################\n# Create normal skewed ARPV attribute\n##########################################\nsigma = 0.6\nmu = 2\ndelta = 1\nsamples = 10000\nrevenue <- rnorm(samples, rlnorm(samples, mu, sigma) , delta)\nrevenue <- revenue + 40\n\n##########################################\n# Create normal symmetric ATPV attribute\n##########################################\ntransactions <- round(rnorm(10000, 2, 0.5),0)\n\n##########################################\n# Create data set with both attributes\n##########################################\ndataset <- \n  data.frame(revenue, transactions) %>%\n  # fixing records with 0 or negative atpv but positive arpv\n  mutate(transactions = case_when(transactions <= 0 & revenue > 0 ~ 1 , TRUE ~ transactions)) %>%\n  # adding non purchasing visitors\n  union_all(., data.frame(revenue = rep(0,10000), transactions = rep(0,10000)))\n\nsummary(dataset)\n```"]