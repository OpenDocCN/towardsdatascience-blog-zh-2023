- en: Running a Stable Diffusion Cluster on GCP with tensorflow-serving (Part 1)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/running-a-stable-diffusion-cluster-on-gcp-with-tensorflow-serving-part-1-4f7a8e2f66df?source=collection_archive---------10-----------------------#2023-03-07](https://towardsdatascience.com/running-a-stable-diffusion-cluster-on-gcp-with-tensorflow-serving-part-1-4f7a8e2f66df?source=collection_archive---------10-----------------------#2023-03-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Part 1: Setting up the infrastructure using Terraform'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thushv89.medium.com/?source=post_page-----4f7a8e2f66df--------------------------------)[![Thushan
    Ganegedara](../Images/3fabfa37132f7d3a9e7679c3b8d7e061.png)](https://thushv89.medium.com/?source=post_page-----4f7a8e2f66df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4f7a8e2f66df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4f7a8e2f66df--------------------------------)
    [Thushan Ganegedara](https://thushv89.medium.com/?source=post_page-----4f7a8e2f66df--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6f0b045d5681&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frunning-a-stable-diffusion-cluster-on-gcp-with-tensorflow-serving-part-1-4f7a8e2f66df&user=Thushan+Ganegedara&userId=6f0b045d5681&source=post_page-6f0b045d5681----4f7a8e2f66df---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4f7a8e2f66df--------------------------------)
    ·11 min read·Mar 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4f7a8e2f66df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frunning-a-stable-diffusion-cluster-on-gcp-with-tensorflow-serving-part-1-4f7a8e2f66df&user=Thushan+Ganegedara&userId=6f0b045d5681&source=-----4f7a8e2f66df---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4f7a8e2f66df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frunning-a-stable-diffusion-cluster-on-gcp-with-tensorflow-serving-part-1-4f7a8e2f66df&source=-----4f7a8e2f66df---------------------bookmark_footer-----------)![](../Images/113074e89bc6c210b08c2df7f0659860.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Kier in Sight](https://unsplash.com/@kierinsight?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: In the first part of this two-part tutorial, we will learn to create a Kubernetes
    cluster that deploys a Stable Diffusion model on GCP. [Stable Diffusion](https://stability.ai/blog/stable-diffusion-public-release)
    (a form of generative AI) is the new cool kid on the block. Stable Diffusion allows
    us to generate realistic images from a given text prompt. Due to the novelty and
    computational load posed by the Stable Diffusion model, it provides invaluable
    opportunities to address some unique challenges.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: You can follow this tutorial end-to-end even if you’re a free user
    (as long as you have some of free tier credit left).'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Github: [https://github.com/thushv89/tf-serving-gke/tree/master/infrastrcture](https://github.com/thushv89/tf-serving-gke/tree/master/infrastrcture)'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But to create the perfect storm (or the perfect product), having access to the
    latest version of the model weights won’t cut it. It takes effort to create a
    reliable production system around your model to support the user requests and
    serve them reliably, with a reasonable latency.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/029cc38eb4a6dca452cd71a4f95ebe6a.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: Few examples of images I obtained from the deployed model. Can you guess the
    prompts? (Image by author)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we will learn how to run a stable diffusion model on a GKE cluster.
    This 2-part tutorial will consist of 4 parts:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the accounts & roles (Part 1)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the cluster (Part 1)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a prediction service in the provisioned cluster (Part 2)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating new images with the deployed endpoint (Part 2)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before you get started, make sure you have created a GCP project and logged
    in to your user account via `gcloud auth login` . You can use `gcloud config set
    project <project_id>` and `gcloud config set region <region>` to make sure you
    are in the correct project and the region.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: Most of the IAM (Identity & Access Management) I’m talking through
    here is based on my (limited) personal experience on the subject. If you see anything
    that could be improved let me know!'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'terraform: Manage infrastructure in style'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re already familiar with `terraform` , go ahead and jump to the section
    “Defining the accounts & roles (IAM)”.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Overview
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For all of the infrastructure setup on GCP, we’ll be using `terraform`; an
    IaaS (Infrastructure as a Service) tool, allowing us to codify all of our infrastructure
    requirements. Why manage cloud resources through code, rather than error-prone
    laborious manual operations, you may ask? There are many (other) reasons:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Code (written in a human readable fashion) makes it easier to understand the
    architecture, improves reusability, etc.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`terraform` automatically manages dependencies and perform operations in the
    correct order'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version controlled code provides you the ability to get a snapshot of the state
    of your system at a given point in time (for troubleshooting)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`terraform` provides a comprehensive out of the box API to build infrastructure
    quickly for all of the common provides such as GCP, AWS, Azure, etc.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform` 提供了一个全面的开箱即用 API，可以快速构建所有常见提供者的基础设施，如 GCP、AWS、Azure 等。'
- en: terraform concepts
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: terraform 概念
- en: '`terraform` parlance organizes code into configurations. A `terraform` configuration
    operates on a working directory, where it will have the configuration files ending
    with the extension `.tf` or `.tf.json`;'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform` 术语将代码组织成配置。`terraform` 配置在一个工作目录中操作，该目录下的配置文件以 `.tf` 或 `.tf.json`
    扩展名结尾；'
- en: '`variables.tf` — Contains all the variable definitions that are used by the
    configuration'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variables.tf` — 包含配置使用的所有变量定义'
- en: '`outputs.tf` — Any outputs that needs to be written out'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs.tf` — 任何需要写出的输出'
- en: Apart from these, you can include any number of `.tf` files containing resource
    definitions, providers, etc. In our simple scenario, we only need a single file,
    which we’ll call `main.tf` .
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除此之外，你可以包含任意数量的 `.tf` 文件，包含资源定义、提供者等。在我们简单的场景中，我们只需要一个文件，称之为 `main.tf`。
- en: Next, let’s look at how `terraform` enables compartmentalizing of code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `terraform` 如何实现代码的模块化。
- en: '`terraform` is a declarative language, meaning you tell `terraform` what to
    do (like SQL), not how to do it (like Python). It’s up to `terraform` to build
    a plan (e.g. in the form of a graph) and execute it.'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`terraform` 是一种声明性语言，这意味着你告诉 `terraform` 要做什么（像 SQL），而不是怎么做（像 Python）。由 `terraform`
    来构建计划（例如图形形式）并执行。'
- en: We can then compose our `terraform` configuration using [modules](https://developer.hashicorp.com/terraform/language/modules).
    Modularizing is optional, however, it breaks complex infrastructure to logical
    components/sub-systems and greatly enhances reusability. In our case, we’ll be
    defining three modules ;
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用 [模块](https://developer.hashicorp.com/terraform/language/modules) 来组成我们的
    `terraform` 配置。模块化是可选的，但它将复杂的基础设施拆分为逻辑组件/子系统，并大大增强了可重用性。在我们的案例中，我们将定义三个模块；
- en: Manages accounts and roles (`modules/iam`)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理账户和角色 (`modules/iam`)
- en: Manages the GKE cluster (`modules/gke_cluster`)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理 GKE 集群 (`modules/gke_cluster`)
- en: Manages storage — setting up the GCS bucket (`modules/storage`)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理存储 — 设置 GCS 存储桶 (`modules/storage`)
- en: When you go into these modules in the code, you’ll see the following basic building
    blocks used in harmony to reach the desired state of infrastructure we need (see
    the Appendix for specific examples).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入代码中的这些模块时，你会看到以下基本构建块和谐地用于达到所需的基础设施状态（有关具体示例，请参见附录）。
- en: Resource blocks — Describes infrastructure objects (e.g. VMs, a cluster, VPCs)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源块 — 描述基础设施对象（例如 VM、集群、VPC）
- en: Data source / data block — represents a source of data (e.g. a file) and the
    data associated with it
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源 / 数据块 — 代表数据源（例如文件）及其相关数据
- en: Provider plugin — Provides access to resource types and data sources associated
    with a certain provider.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者插件 — 提供对某个提供者相关的资源类型和数据源的访问。
- en: Input & output variables of the modules
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的输入和输出变量
- en: Once you define your configuration, you can run `terraform plan` to see what
    `terraform` will be executing. Next `terraform apply` can be used to apply those
    changes. Once applied, `terraform` will record the changes made in a `terraform.tfstate`
    file. So if you want to make a change (or destroy), `terraform` is aware of the
    current state of your infrastructure, so it can create a plan for the required
    changes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了配置，你可以运行 `terraform plan` 来查看 `terraform` 将执行什么。接下来可以使用 `terraform apply`
    来应用这些更改。应用后，`terraform` 会在 `terraform.tfstate` 文件中记录所做的更改。因此，如果你想进行更改（或销毁），`terraform`
    会了解基础设施的当前状态，从而为所需的更改创建计划。
- en: If you need further reinforcing of `terraform` concepts, you can read the documentation
    [here](https://developer.hashicorp.com/terraform/language) or go through this
    [GCP tutorial](https://developer.hashicorp.com/terraform/tutorials/gcp-get-started/google-cloud-platform-build).
    Now that we understand the basics of `terraform`, let’s move on to understanding
    the logic.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要进一步巩固 `terraform` 概念，你可以阅读文档 [这里](https://developer.hashicorp.com/terraform/language)
    或查看这个 [GCP 教程](https://developer.hashicorp.com/terraform/tutorials/gcp-get-started/google-cloud-platform-build)。现在我们了解了
    `terraform` 的基础知识，接下来让我们理解逻辑。
- en: Defining the accounts & roles (IAM)
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义账户和角色（IAM）
- en: For our operations relating to setting up the GKE cluster, we’ll be creating
    a service account. As the name suggests, a service account is typically used by
    applications and workloads, and not an actual person. For example, GKE nodes can
    use a service account to execute an application as. A service account can be assigned
    permissions and roles (i.e. a collection of permission collated in a meaningful
    way) just like a user account. Few advantages of service accounts are,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们设置 GKE 集群的操作，我们将创建一个服务账号。顾名思义，服务账号通常由应用程序和工作负载使用，而不是实际的人。例如，GKE 节点可以使用服务账号来执行应用程序。服务账号可以被分配权限和角色（即以有意义的方式汇总的权限集合），就像用户账号一样。服务账号的几个优势包括，
- en: We can quickly bind/remove bindings of a user to a service account, allowing
    us to provide necessary permission to a user with assigning roles/permissions
    to individual users repetitively.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以快速绑定/移除用户与服务账号的绑定，允许我们为用户提供必要的权限，而无需重复分配角色/权限给各个用户。
- en: Service accounts can be [setup with short lived credentials](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct)
    making it more secure.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务账号可以通过 [设置短期凭据](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct)
    来提高安全性。
- en: 'We’ll be setting up two service accounts with the following IDs:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置两个具有以下 ID 的服务账号：
- en: '`gke-admin` — Has the required permission to create a GKE cluster and provision
    nodes'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gke-admin` — 具有创建 GKE 集群和配置节点所需的权限'
- en: '`gke-node` — Has the necessary permission to execute a workload successfully
    (e.g. read from a GCS bucket)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gke-node` — 具有成功执行工作负载所需的权限（例如，从 GCS 存储桶中读取）'
- en: Though a service account is not directly used by or attached to a person, one
    can [impersonate a service account](https://cloud.google.com/iam/docs/impersonating-service-accounts),
    allowing the user to execute commands just as it’s the service account. This is
    the method we’ll be using to setup the cluster.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然服务账号不直接由人使用或附加，但可以 [模拟服务账号](https://cloud.google.com/iam/docs/impersonating-service-accounts)，允许用户像服务账号一样执行命令。这是我们将用于设置集群的方法。
- en: '![](../Images/58ae52b348f33fcf618f46e76bfb5c81.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58ae52b348f33fcf618f46e76bfb5c81.png)'
- en: High-level view of what the identities & resources look like (Image by author)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 身份和资源的高层次视图（图像由作者提供）
- en: Here’s the process will be outlining in our `terraform` code,
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在 `terraform` 代码中概述的过程，
- en: 'Create service accounts: `gke-admin` and `gke-node`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务账号：`gke-admin` 和 `gke-node`
- en: Assign the required roles for the created accounts
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为创建的账号分配所需的角色
- en: '— `gke-admin`: `container.admin`(e.g. create cluster), `compute.viewer` (e.g.
    creating the node pool), `iam.serviceAccountUser`'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: — `gke-admin`：`container.admin`（例如创建集群）、`compute.viewer`（例如创建节点池）、`iam.serviceAccountUser`
- en: '— `gke-node`: `container.nodeServiceAccount` (permission for a typical Kubernetes
    workload)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: — `gke-node`：`container.nodeServiceAccount`（适用于典型的 Kubernetes 工作负载的权限）
- en: — You can have a look in **GCP console → IAM → Roles** to learn what permission
    are provided by each role.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: — 你可以在 **GCP 控制台 → IAM → 角色** 中查看每个角色提供了哪些权限。
- en: Assign required roles to the user account to create a short-lived access token
    (`iam.serviceAccountTokenCreator`)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配所需的角色给用户账号以创建短期访问令牌（`iam.serviceAccountTokenCreator`）
- en: Create a binding from the user account to the service account so that the user
    can impersonate the service account
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户账号创建一个绑定到服务账号，以便用户可以模拟服务账号
- en: Finally, we will declare the names of the two service accounts we created as
    outputs (in `outputs.tf`), so they can be referenced by the configuration and
    other child modules.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在 `outputs.tf` 中声明我们创建的两个服务账号的名称作为输出，以便配置和其他子模块可以引用。
- en: To provision the infrastructure, we’ll be using two forms of authentication,
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供基础设施，我们将使用两种形式的身份验证，
- en: Typical authentication you obtain by running `gcloud auth login` which will
    be used to create the service accounts and the bindings.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行 `gcloud auth login` 获取的典型身份验证将用于创建服务账号和绑定。
- en: After that, we’ll use impersonate the service account set up the cluster
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，我们将使用模拟服务账号来设置集群
- en: '**Note 1**: I have the `owner` role (i.e. project owner) attached to my user
    account, if you don’t, you’d need the permission required to create a service
    account, etc.'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意 1**：我在用户账号上附加了 `owner` 角色（即项目所有者），如果你没有，你需要获得创建服务账号等所需的权限。'
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Note 2**: It might seem redundant to do all of these service account creation
    and bindings when you have the owner role, however, when working on a project,
    where you’re collaborating with a team (or in an organization), you’ll need to
    think and set up permission with a least-privileged user mindset, to avoid security
    exploitation.'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意 2**：即使你拥有所有者角色，进行所有这些服务账户创建和绑定可能看起来有些冗余，但是在一个项目中，与团队协作（或在组织中）时，你需要以最小权限用户的心态来思考和设置权限，以避免安全漏洞。'
- en: We won’t run `terraform apply` yet, as we’ll be creating the service accounts
    and the GKE cluster all at once.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时不会运行`terraform apply`，因为我们将一次性创建服务账户和GKE集群。
- en: Defining the GKE cluster
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义GKE集群
- en: We’ll be creating a GKE cluster that can be setup by even a free-tier user.
    A cluster consists of a control plane and one or more worker nodes. The control
    plane provides access to the cluster, so that you can inspect nodes, pods, services,
    etc. Each node can run one or more pods (with a specific resource requirement
    — e.g. CPU/memory). A pod (which may run one or more containers) will be running
    a specified workload (e.g. `tensorlfow-serving` image to serve a model). You can
    refer [here](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture)
    to learn about the GKE architecture.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个即使是免费用户也可以设置的GKE集群。一个集群由一个控制平面和一个或多个工作节点组成。控制平面提供对集群的访问，使你能够检查节点、Pods、服务等。每个节点可以运行一个或多个Pods（具有特定资源要求——例如CPU/内存）。一个Pod（可能运行一个或多个容器）将运行指定的工作负载（例如`tensorflow-serving`镜像以提供模型）。你可以参考[这里](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture)了解GKE架构。
- en: '![](../Images/6d5016c1dd6ddb36ae71acc4e3c27009.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d5016c1dd6ddb36ae71acc4e3c27009.png)'
- en: High-level architecture of a GKE cluster (Image by author)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: GKE集群的高级架构（作者提供的图片）
- en: 'We’ll be creating a cluster in the standard mode with:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以标准模式创建一个集群，配置如下：
- en: '`machine_type`: n2-standard-4'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`machine_type`：n2-standard-4'
- en: '`max_node_count`(number of max nodes to provision): 2'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_node_count`（最大节点数）：2'
- en: '`preemptible` : true (You could also use `spot` instances which are cheaper
    than `preemptible` instances. Learn the differences [here](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms#how-it-works).)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preemptible`：true（你也可以使用比`preemptible`实例更便宜的`spot`实例。了解这些差异请点击[这里](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms#how-it-works)）'
- en: Note that we’re not using GPUs, since as a free-user, you may not have the eligibility
    for a GPU quota. But if you do, feel free to follow the process [here](https://cloud.google.com/kubernetes-engine/docs/how-to/gpus)
    for setting up a node pool with GPUs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有使用GPU，因为作为免费用户，你可能没有GPU配额的资格。但是如果有，请随意按照[这里](https://cloud.google.com/kubernetes-engine/docs/how-to/gpus)的过程设置带有GPU的节点池。
- en: '**Note 1**: If you’re a free-tier user, you will be restricted by two important
    quotas:'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意 1**：如果你是免费用户，你将受到两个重要配额的限制：'
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`all_regions_cpus`: defaults to `12`'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`all_regions_cpus`：默认为`12`'
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`all_n2_cpus`: defaults to `8`'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`all_n2_cpus`：默认为`8`'
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`all_regions_gpus`: defaults to `0`'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`all_regions_gpus`：默认为`0`'
- en: ''
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since we’re using the N2 type instances, each with 4 vCPUs, we can only spin
    up 2 of these instances withing the quota. You can experiment with other instances
    such as `n2-standard-2` or `n1` instances if you’d like to have more nodes in
    the cluster.
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于我们使用的是N2类型实例，每个实例具有4个vCPUs，因此在配额范围内我们只能启动2个这样的实例。如果你想要在集群中拥有更多节点，可以尝试其他实例类型，如`n2-standard-2`或`n1`实例。
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Note 2**: These a global quotas, meaning, if you, for example, have a Vertext
    AI notebook with another `n2` type instance started, it will count towards this
    quota as well.'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意 2**：这些是全球配额，这意味着，例如，如果你有一个启动了其他`n2`类型实例的Vertex AI笔记本，它也会计入该配额。'
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you don’t respect these you’ll run into `Quota exceeded` type of errors,
    when you apply these infrastructure on terraform.
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果不遵守这些，你在应用这些基础设施时可能会遇到`Quota exceeded`类型的错误。
- en: You can read the full configuration in [here](https://github.com/thushv89/tf-serving-gke/tree/master/infrastrcture/modules/gke_cluster).
    I won’t go into the details here as it’s straightforward. However, one caveat
    I’d like to raise here is that, the notion of regional and zonal clusters. Ignoring
    this distinction can lead to somewhat mysterious errors such as [this Stackoverflow
    question](https://stackoverflow.com/questions/74836213/error-403-insufficient-regional-quota-to-satisfy-request-resource-ssd-total/75378781#75378781).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://github.com/thushv89/tf-serving-gke/tree/master/infrastrcture/modules/gke_cluster)查看完整的配置。我在这里不会详细说明，因为它很简单。然而，我想提出一个警告，即区域集群和区域集群的概念。忽略这种区别可能会导致一些神秘的错误，比如[这个
    Stackoverflow 问题](https://stackoverflow.com/questions/74836213/error-403-insufficient-regional-quota-to-satisfy-request-resource-ssd-total/75378781#75378781)。
- en: Creating the infrastructure & resources on GCP
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GCP 上创建基础设施和资源
- en: We have some housekeeping to do before we apply the discussed `terraform` changes.
    First, run
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用讨论过的`terraform`更改之前，我们需要进行一些整理。首先，运行
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will create a config file that has the defined arguments so they can be
    imported into `terraform` code. Next, run,
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个配置文件，其中包含定义的参数，以便将它们导入到`terraform`代码中。接下来，运行，
- en: '[PRE1]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will install the provide plugin as well as the local modules we have defined.
    Following this, we can run the following command to learn what `terraform` would
    be doing.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装提供的插件以及我们定义的本地模块。接下来，我们可以运行以下命令来了解`terraform`将要执行的操作。
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The plan would look like this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 计划将是这样的。
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we’re happy with the plan, we can run the command below to apply the changes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对计划满意，我们可以运行以下命令来应用更改。
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If everything is successful, you should see a `terraform.tfstate` file appearing
    in your working directory, delineating all the changes that were applied. Visit
    the [README](https://github.com/thushv89/tf-serving-gke/blob/master/infrastrcture/README.md)
    here for detailed instructions. You can go to the **GCP console → IAM → Service
    accounts** and make sure the service accounts are created properly.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切成功，你应该会在工作目录中看到一个`terraform.tfstate`文件，列出所有应用的更改。访问[README](https://github.com/thushv89/tf-serving-gke/blob/master/infrastrcture/README.md)以获取详细说明。你可以前往**GCP
    控制台 → IAM → 服务帐户**，确保服务帐户已正确创建。
- en: '![](../Images/48e969bb6de810d564a888ac282bf95e.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48e969bb6de810d564a888ac282bf95e.png)'
- en: The created service accounts after applying the terraform transformation (Image
    by author)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 terraform 转换后创建的服务帐户（图像由作者提供）
- en: You’ll also see a cluster named `sd-cluster` in the **GCP console → Kubernetes
    Engine → Clusters**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会在**GCP 控制台 → Kubernetes 引擎 → 集群**中看到一个名为`sd-cluster`的集群。
- en: '![](../Images/909cd447982e445a069657a3dd89a95d.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/909cd447982e445a069657a3dd89a95d.png)'
- en: The cluster has been initialized with a single node (Image by author)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 集群已经用单个节点初始化（图像由作者提供）
- en: '![](../Images/6026e8bb8d28c36040071647c3fb5ece.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6026e8bb8d28c36040071647c3fb5ece.png)'
- en: Once you go inside the cluster you can see more information about the node pool
    and nodes (Image by author)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入集群，你可以看到有关节点池和节点的更多信息（图像由作者提供）
- en: Great, now we have everything we need to deploy our ML model as a service. We’ll
    look at how we can do this in the [next part of the tutorial](/running-a-stable-diffusion-cluster-on-gcp-with-tensorflow-serving-part-2-c421ecb7472a).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们拥有了部署 ML 模型作为服务所需的一切。我们将在[教程的下一部分](/running-a-stable-diffusion-cluster-on-gcp-with-tensorflow-serving-part-2-c421ecb7472a)中查看如何完成这项工作。
- en: So far you,
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你，
- en: Learned what `terraform` is and how it can make infrastructure management easy
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了什么是`terraform`以及它如何简化基础设施管理
- en: Created the identities (service accounts) and setting them up with correct roles
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了身份（服务帐户）并将其设置为正确的角色
- en: Understood what a GKE cluster is and created one by impersonating the required
    service account
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解了什么是 GKE 集群并通过模拟所需的服务帐户创建了一个
- en: Troubleshooting & Caveats
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除与注意事项
- en: '**Error**: `Unable to connect to the server: x509: certificate has expired
    or is not yet valid`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：`无法连接到服务器：x509: 证书已过期或尚未生效`'
- en: '**Solution 1**: This can be due to `gcloud` session expiring. Simply run `gcloud
    auth login` and complete the login process.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案 1**：这可能是由于`gcloud`会话过期。只需运行`gcloud auth login`并完成登录过程。'
- en: '**Solution 2**: There is a [bug in WSL](https://stackoverflow.com/questions/65086856/wsl2-clock-is-out-of-sync-with-windows)
    where the clock within WSL is out of sync with the Windows clock. You can run
    `sudo hwclock -s` to trigger the sync'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案 2**：WSL中存在[一个 bug](https://stackoverflow.com/questions/65086856/wsl2-clock-is-out-of-sync-with-windows)，其中
    WSL 内的时钟与 Windows 时钟不同步。你可以运行`sudo hwclock -s`来触发同步。'
- en: '**Caveat**: If you’re using bash within Powershell (powered by [WSL](https://learn.microsoft.com/en-us/windows/wsl/install)),
    you may not be able to export environment variables (to be used by `terraform`).
    So I’d recommend not using environment variables if you rely on that.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**：如果你在Powershell中使用bash（由[WSL](https://learn.microsoft.com/en-us/windows/wsl/install)支持），可能无法导出环境变量（供`terraform`使用）。因此，如果你依赖环境变量，建议不要使用它们。'
- en: Appendix
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: Resource blocks
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源块
- en: Describes one or more infrastructure objects (e.g. VMs, a cluster, VPCs). Each
    resource is identified by a *resource type* and a *unique name*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 描述一个或多个基础设施对象（例如，虚拟机、集群、VPC）。每个资源通过*资源类型*和*唯一名称*来标识。
- en: '[PRE5]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Data source / data block
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据源 / 数据块
- en: Represents a source of data and the data associated with it
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数据源及其关联的数据
- en: '[PRE6]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Provider plugin
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供者插件
- en: Provides access to resource types and data sources associated with a certain
    provider.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 提供对某个提供者关联的资源类型和数据源的访问。
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Input & output variables
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入和输出变量
- en: Act as arguments and return types for modules.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 作为模块的参数和返回类型。
- en: '[PRE8]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Acknowledgement
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: I’d like to acknowledge the [ML Developer Programs](https://developers.google.com/community/experts)
    and the team for the GCP credits provided to make this tutorial a success.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我想感谢[ML开发者计划](https://developers.google.com/community/experts)以及团队提供的GCP积分，使这个教程取得了成功。
