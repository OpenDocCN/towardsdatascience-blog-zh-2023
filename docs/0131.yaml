- en: How to bring custom ML Models into OpenMetadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-bring-custom-ml-models-into-openmetadata-969311a16d91?source=collection_archive---------10-----------------------#2023-01-09](https://towardsdatascience.com/how-to-bring-custom-ml-models-into-openmetadata-969311a16d91?source=collection_archive---------10-----------------------#2023-01-09)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Build custom CICD pipelines to put your ML assets on the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://blog.metadata.coffee/?source=post_page-----969311a16d91--------------------------------)[![Pere
    Miquel Brull](../Images/2641b6f44310747aa3150fb720d8ff3f.png)](https://blog.metadata.coffee/?source=post_page-----969311a16d91--------------------------------)[](https://towardsdatascience.com/?source=post_page-----969311a16d91--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----969311a16d91--------------------------------)
    [Pere Miquel Brull](https://blog.metadata.coffee/?source=post_page-----969311a16d91--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d3218cd196e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-bring-custom-ml-models-into-openmetadata-969311a16d91&user=Pere+Miquel+Brull&userId=5d3218cd196e&source=post_page-5d3218cd196e----969311a16d91---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----969311a16d91--------------------------------)
    ·5 min read·Jan 9, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F969311a16d91&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-bring-custom-ml-models-into-openmetadata-969311a16d91&user=Pere+Miquel+Brull&userId=5d3218cd196e&source=-----969311a16d91---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F969311a16d91&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-bring-custom-ml-models-into-openmetadata-969311a16d91&source=-----969311a16d91---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: '[OpenMetadata](https://open-metadata.org/) is more than a data catalog. Built
    on standard definitions and APIs, the catalog is just one of many applications
    exploiting the **metadata** of your platform. Since the beginning, the goal of
    OpenMetadata has been to solve the metadata problem in the industry. Not having
    to figure out essential components such as metadata ingestion or how to bring
    back **collaboration** into data, teams can focus on improving their processes
    and automations.'
  prefs: []
  type: TYPE_NORMAL
- en: This post aims to showcase how we can integrate multiple metadata sources, both
    from existing services and **in-house solutions**. With every action being powered
    by APIs, there is no difference between metadata coming from featured connectors
    such as Postgres or being sent via the **Python SDK**. This high degree of flexibility
    allows us to explore the metadata from custom-built ML Models and the tables feeding
    their features.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45ff0ea15bc22feba2315fb7d8d374e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Postgres and Custom ML Model ingestion schema. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: If this sounds interesting, follow the steps with the material in this [repository](https://github.com/open-metadata/openmetadata-demo/tree/main/mlmodel-cicd).
  prefs: []
  type: TYPE_NORMAL
- en: OpenMetadata and ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main **challenges** of ML models’ lifecycle is closing the gap between
    the ML model and the Data Platform. We have tools that help us train, test, tune
    and deploy ML, but those tools rarely put ML Models in the context of the platform
    they live in.
  prefs: []
  type: TYPE_NORMAL
- en: 'How all the pieces fit together is information that is usually held by Data
    Scientists or ML Engineers but hardly ever shared. Typical causes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No generic approach** to how to define and maintain the metadata.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**No central place** to publish the results for users to explore.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This lack of clarity and the work involved in the previous two tasks makes it
    hard to justify the **benefits** and measure the **impact**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this demo, we’ll follow a use case where:'
  prefs: []
  type: TYPE_NORMAL
- en: We have an ML model using features from Postgres,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The model is regularly updated and deployed,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The documentation of the model is hosted as code,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll use OpenMetadata’s Python SDK to create the ML Model assets and push them
    to OpenMetadata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Getting our models in OpenMetadata helps us share the documentation, keep track
    of metadata changes and versioning, discover lineage with the sources, drive discussions
    and collaboration… A few quick wins from bringing this holistic view on ML and
    AI assets are:'
  prefs: []
  type: TYPE_NORMAL
- en: Teams can quickly start to **collaborate** instead of trying to reach similar
    outcomes in different ways,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge gathering of the most used features to start building a **Feature
    Store** with the highest possible value for the whole organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ML teams can start building **Data Quality tests and alerts** directly in OpenMetadata
    to prevent feature drifts and performance decreases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ingesting Postgres metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step will be ingesting Postgres metadata, as there, we have the sources
    for the ML features. You can follow these [steps](https://docs.open-metadata.org/connectors/database/postgres)
    to configure and deploy the Postgres metadata ingestion.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bd02ac8c663e3676c6a36e1d986362b.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Postgres service in OpenMetadata. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenMetadata UI will guide us through the two main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating the **Database Service**: A service represents the source system we
    want to ingest. Here is where we will define the connection to Postgres, and this
    service will hold the assets that will be sent to OpenMetadata: databases, schemas,
    and tables.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Creating and deploying the **Ingestion Pipelines**: which are internally handled
    by OpenMetadata using the [Ingestion Framework](https://pypi.org/project/openmetadata-ingestion/),
    a Python library holding the logic to connect to multiple sources, translate their
    original metadata into the OpenMetadata standard, and send it to the server using
    the [APIs](https://docs.open-metadata.org/swagger.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/2cad6199c7f4f7cae309642254fd4e06.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing the ingestion pipeline in OpenMetadata. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: What’s interesting here is that the Ingestion Framework package can be directly
    used to configure and host the ingestion processes. Moreover, any operation in
    the UI or in the Ingestion Framework is entirely open and supported by the server
    APIs. This means full automation possibilities for any metadata-related activity,
    which can be achieved directly via REST or the [OpenMetadata SDKs](https://docs.open-metadata.org/sdk).
  prefs: []
  type: TYPE_NORMAL
- en: These are the capabilities we will exploit next when creating the CICD process.
  prefs: []
  type: TYPE_NORMAL
- en: Building a CICD pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the discussion above, we highlighted two pains that usually become blockers
    to maintaining updated ML models’ metadata: No generic metadata definition and
    no single place to publish it. Thankfully, OpenMetadata takes care of both of
    these aspects.'
  prefs: []
  type: TYPE_NORMAL
- en: The missing piece for building a successful process? It should be **simple**
    to maintain and evolve. That’s why we base our example on a [YAML file](https://github.com/open-metadata/openmetadata-demo/blob/main/mlmodel-cicd/ml_model.yaml)
    checked out in the code repository. Therefore, Data Scientists and ML Engineers
    can rely on their deployment pipelines to update as well the metadata of their
    fresh production model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66394af9fb03e282e9097154839540fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Example YAML file with the ML model metadata. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CICD process will then have a specific step that will:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the YAML file with the metadata,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Translate the structure of the YAML to the [ML Model](https://docs.open-metadata.org/main-concepts/metadata-standard/schemas/entity/data/mlmodel)
    Entity definition from the OpenMetadata standard,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the ML Model asset into OpenMetadata using the Python SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Here](https://github.com/open-metadata/openmetadata-demo/blob/main/mlmodel-cicd/mlmodel_cicd.py)
    you will find an example of such a pipeline. Hopefully, that will help you start
    putting your ML assets on the map!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86bbd7a379354568c95892e335d83fc7.png)'
  prefs: []
  type: TYPE_IMG
- en: Example CICD pipelines. GIF by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the script has finished running, we’ll see our Revenue Predictions model
    in OpenMetadata as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/769179cb8842d8f0b811ddd353399505.png)'
  prefs: []
  type: TYPE_IMG
- en: Revenue Predictions model in OpenMetadata. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: One key benefit of having the metadata available in the platform is being able
    to see the lineage information between our models and the sources containing the
    features. In our example, we already ingested the Postgres metadata. Then, if
    we check the Lineage tab, we’ll be able to see all of our models’ dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb56bb06bf9d02cb3e9bfcab601a0982.png)'
  prefs: []
  type: TYPE_IMG
- en: Revenue Predictions lineage with Postgres tables. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this post, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: Discussed the industry needs for a common approach to define, ingest and exploit
    metadata and how OpenMetadata covers those.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ingested Postgres metadata directly from the ≈ UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built a CICD process that pushes custom-built ML Models metadata during the
    release process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting ML Models into the [context](https://medium.com/openmetadata/ml-is-not-just-about-ml-c08eab242e84)
    of the Data Platform has essential benefits, such as exploring dependencies and
    fueling collaboration. If you need a simple approach to putting your ML assets
    on the map, OpenMetadata has you covered.
  prefs: []
  type: TYPE_NORMAL
