- en: Build a Locally Running Voice Assistant
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个本地运行的语音助手
- en: 原文：[https://towardsdatascience.com/build-a-locally-running-voice-assistant-2f2ead904fe9?source=collection_archive---------1-----------------------#2023-12-29](https://towardsdatascience.com/build-a-locally-running-voice-assistant-2f2ead904fe9?source=collection_archive---------1-----------------------#2023-12-29)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-a-locally-running-voice-assistant-2f2ead904fe9?source=collection_archive---------1-----------------------#2023-12-29](https://towardsdatascience.com/build-a-locally-running-voice-assistant-2f2ead904fe9?source=collection_archive---------1-----------------------#2023-12-29)
- en: Ask an LLM a question without leaking private information
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向LLM提问而不泄露私人信息
- en: '[](https://sebastiengilbert.medium.com/?source=post_page-----2f2ead904fe9--------------------------------)[![Sébastien
    Gilbert](../Images/380f6588c3ef718947bcf82061f190eb.png)](https://sebastiengilbert.medium.com/?source=post_page-----2f2ead904fe9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2f2ead904fe9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2f2ead904fe9--------------------------------)
    [Sébastien Gilbert](https://sebastiengilbert.medium.com/?source=post_page-----2f2ead904fe9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://sebastiengilbert.medium.com/?source=post_page-----2f2ead904fe9--------------------------------)[![Sébastien
    Gilbert](../Images/380f6588c3ef718947bcf82061f190eb.png)](https://sebastiengilbert.medium.com/?source=post_page-----2f2ead904fe9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2f2ead904fe9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2f2ead904fe9--------------------------------)
    [Sébastien Gilbert](https://sebastiengilbert.medium.com/?source=post_page-----2f2ead904fe9--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F975aef8c496a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-locally-running-voice-assistant-2f2ead904fe9&user=S%C3%A9bastien+Gilbert&userId=975aef8c496a&source=post_page-975aef8c496a----2f2ead904fe9---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2f2ead904fe9--------------------------------)
    ·7 min read·Dec 29, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2f2ead904fe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-locally-running-voice-assistant-2f2ead904fe9&user=S%C3%A9bastien+Gilbert&userId=975aef8c496a&source=-----2f2ead904fe9---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F975aef8c496a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-locally-running-voice-assistant-2f2ead904fe9&user=S%C3%A9bastien+Gilbert&userId=975aef8c496a&source=post_page-975aef8c496a----2f2ead904fe9---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2f2ead904fe9--------------------------------)
    ·7分钟阅读·2023年12月29日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2f2ead904fe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-locally-running-voice-assistant-2f2ead904fe9&user=S%C3%A9bastien+Gilbert&userId=975aef8c496a&source=-----2f2ead904fe9---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2f2ead904fe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-locally-running-voice-assistant-2f2ead904fe9&source=-----2f2ead904fe9---------------------bookmark_footer-----------)![](../Images/431d431bc36ee8d489e091189e0b7371.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2f2ead904fe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-locally-running-voice-assistant-2f2ead904fe9&source=-----2f2ead904fe9---------------------bookmark_footer-----------)![](../Images/431d431bc36ee8d489e091189e0b7371.png)'
- en: Image generated by the author, with help from openart.ai
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者生成，并由openart.ai协助
- en: I have to admit that I was initially skeptical about the ability of Large Language
    Models (LLM) to generate code snippets that actually worked. I tried it expecting
    the worst, and I was pleasantly surprised. Like any interaction with a chatbot,
    the way the question is formatted matters, but with time, you get to know how
    to specify the boundaries of the problem you need help with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我不得不承认，我最初对大型语言模型（LLM）生成实际有效的代码片段的能力持怀疑态度。我带着最坏的预期尝试了，结果却感到惊喜。像与任何聊天机器人互动一样，问题的格式很重要，但随着时间的推移，你会学会如何明确你需要帮助的问题的边界。
- en: I was getting used to having an online chatbot service always available while
    writing code when my employer issued a company-wide policy prohibiting employees
    from using it. I could go back to my old googling habits, but I decided to build
    a locally running LLM service that I could question without leaking information
    outside the company walls. Thanks to the open-source LLM offering on [HuggingFace](https://huggingface.co),
    and the [chainlit project](https://docs.chainlit.io/get-started/overview), I could
    put together a service that satisfies the need for coding assistance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我习惯了在编写代码时有一个始终可用的在线聊天机器人服务，但当我的雇主发布了禁止员工使用它的公司政策时，我不得不寻找其他方案。我可以回到以前的谷歌习惯，但我决定构建一个本地运行的LLM服务，这样我可以在不泄露公司外部信息的情况下提问。感谢[HuggingFace](https://huggingface.co)上的开源LLM提供以及[chainlit项目](https://docs.chainlit.io/get-started/overview)，我能够组建一个满足编码辅助需求的服务。
- en: The next logical step was to add some voice interaction. Although voice is not
    well-suited for coding assistance (you want to see the generated code snippets,
    not hear them), there are situations where you need help with inspiration on a
    creative project. The feeling of being told a story adds value to the experience.
    On the other hand, you may be reluctant to use an online service because you want
    to keep your work private.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加一些语音交互。尽管语音不适合编码辅助（你希望看到生成的代码片段，而不是听到它们），但在某些情况下，你需要在创意项目上获得灵感。讲故事的感觉为体验增添了价值。另一方面，你可能不愿意使用在线服务，因为你希望保持工作的隐私。
- en: In this project, I’ll take you through the steps to build an assistant that
    allows you to interact vocally with an open-source LLM. All the components are
    running locally on your computer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我将带你了解构建一个允许你通过语音与开源LLM交互的助手的步骤。所有组件都在你的计算机上本地运行。
- en: Architecture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: 'The architecture involves three separate components:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 架构包括三个独立的组件：
- en: A wake-word detection service
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个唤醒词检测服务
- en: A voice assistant service
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个语音助手服务
- en: A chat service
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个聊天服务
- en: '![](../Images/b645360bc06d8cab1f0dd141376d991e.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b645360bc06d8cab1f0dd141376d991e.png)'
- en: Flowchart of the three components. Image by the author.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 三个组件的流程图。图片由作者提供。
- en: The three components are standalone projects, each having its own github repository.
    Let’s walk through each component and see how they interact.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个组件是独立的项目，每个项目都有自己的github仓库。让我们逐一了解每个组件及其如何交互。
- en: Chat service
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聊天服务
- en: The chat service runs the open-source LLM called [*HuggingFaceH4/zephyr-7b-alpha*](https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha).
    The service receives a prompt through a POST call, passes the prompt through the
    LLM, and returns the output as the call response.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天服务运行开源LLM，名为[*HuggingFaceH4/zephyr-7b-alpha*](https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha)。该服务通过POST调用接收提示，将提示传递给LLM，并将输出作为调用响应返回。
- en: You can find the code [here](https://github.com/sebastiengilbert73/chat_service).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://github.com/sebastiengilbert73/chat_service)找到代码。
- en: In …/chat_service/server/, rename **chat_server_config.xml.example** to **chat_server_config.xml**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在…/chat_service/server/中，将**chat_server_config.xml.example**重命名为**chat_server_config.xml**。
- en: 'You can then start the chat server with the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用以下命令启动聊天服务器：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When the service runs for the first time, it takes several minutes to start
    because large files get downloaded from the [HuggingFace](https://huggingface.co/)
    website and stored in a local cache directory.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当服务第一次运行时，由于从[HuggingFace](https://huggingface.co/)网站下载大型文件并存储在本地缓存目录中，启动需要几分钟时间。
- en: 'You get a confirmation from the terminal that the service is running:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你会从终端收到服务正在运行的确认：
- en: '![](../Images/3a9c8aab18256f8324d1b98a08cb387d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a9c8aab18256f8324d1b98a08cb387d.png)'
- en: Confirmation that the chat service is running. Image by the author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天服务运行的确认。图片由作者提供。
- en: If you want to test the interaction with the LLM, go to …/chat_service/chainlit_interface/.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想测试与LLM的交互，请前往…/chat_service/chainlit_interface/。
- en: Rename **app_config.xml.example** to **app_config.xml**. Launch the web chat
    service with
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将**app_config.xml.example**重命名为**app_config.xml**。使用以下命令启动网络聊天服务：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Browse to the local address **localhost:8000**
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到本地地址**localhost:8000**
- en: 'You should be able to interact with your locally running LLM through a text
    interface:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够通过文本接口与本地运行的LLM进行交互：
- en: '![](../Images/33d813385a193a71ec43e16e4b7694b0.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33d813385a193a71ec43e16e4b7694b0.png)'
- en: Text interaction with the locally running LLM. Image by the author.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与本地运行的LLM的文本交互。图片由作者提供。
- en: Voice assistant service
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语音助手服务
- en: The voice assistant service is where the speech-to-text and text-to-speech conversions
    happen. You can find the code [here](https://github.com/sebastiengilbert73/voice_assistant).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 语音助手服务是进行语音转文本和文本转语音转换的地方。你可以在[这里](https://github.com/sebastiengilbert73/voice_assistant)找到代码。
- en: Go to …/voice_assistant/server/.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 转到…/voice_assistant/server/。
- en: Rename **voice_assistant_service_config.xml.example** to **voice_assistant_service_config.xml**.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将**voice_assistant_service_config.xml.example**重命名为**voice_assistant_service_config.xml**。
- en: 'The assistant starts by playing the greeting to indicate that it is listening
    to the user. The greeting text is configured in **voice_assistant_config.xml**,
    under the element *<welcome_message>*:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 助理通过播放问候语开始，以表明它正在监听用户。问候语的文本在**voice_assistant_config.xml**中配置，位于*<welcome_message>*元素下：
- en: '![](../Images/89c8cc195d28f9f5a7a83ae94e2f9e42.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89c8cc195d28f9f5a7a83ae94e2f9e42.png)'
- en: The voice_assistant_config.xml file. Image by the author.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: voice_assistant_config.xml文件。图片由作者提供。
- en: The text-to-speech engine that allows the program to convert text into spoken
    audio that you can hear through your audio output device is [pyttsx3](https://pypi.org/project/pyttsx3/).
    From my experience, this engine speaks with a reasonably natural tone, both in
    English and in French. Unlike other packages that rely on an API call, it runs
    locally.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 允许程序将文本转换为你可以通过音频输出设备听到的语音的文本转语音引擎是[pyttsx3](https://pypi.org/project/pyttsx3/)。根据我的经验，这个引擎用英语和法语说话都非常自然。与其他依赖API调用的软件包不同，它是在本地运行的。
- en: A model called [*facebook/seamless-m4t-v2-large*](https://huggingface.co/facebook/seamless-m4t-v2-large)performs
    the speech-to-text inference*.* Model weights get downloaded when **voice_assistant_service.py**
    is first run.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为[*facebook/seamless-m4t-v2-large*](https://huggingface.co/facebook/seamless-m4t-v2-large)的模型执行语音转文本推断。**voice_assistant_service.py**首次运行时会下载模型权重。
- en: 'The principal loop in **voice_assistant_service.main()** performs the following
    tasks:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**voice_assistant_service.main()**中的主要循环执行以下任务：'
- en: Get a sentence from the microphone. Convert it to text using the speech-to-text
    model.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从麦克风获取句子。使用语音转文本模型将其转换为文本。
- en: Check if the user spoke the message defined in the *<end_of_conversation_text>*
    element from the configuration file. In this case, the conversation ends, and
    the program terminates after playing the goodbye message.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查用户是否说出了配置文件中的*<end_of_conversation_text>*元素定义的消息。在这种情况下，谈话结束，程序在播放再见消息后终止。
- en: Check if the sentence is gibberish. The speech-to-text engine often outputs
    a valid English sentence, even if I didn’t say anything. By chance, these undesirable
    outputs tend to repeat themselves. For example, gibberish sentences will sometimes
    start with “[” or “i’m going to”. I collected a list of prefixes often associated
    with a gibberish sentence in the *<gibberish_prefix_list>* element of the configuration
    file (this list would likely change for another speech-to-text model). Whenever
    an audio input starts with one of the prefixes in the list, then the sentence
    is ignored.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查句子是否是胡言乱语。语音转文本引擎即使我什么也没说，通常也会输出有效的英语句子。偶尔，这些不必要的输出会重复出现。例如，胡言乱语的句子有时会以“[”或“i’m
    going to”开头。我在配置文件的*<gibberish_prefix_list>*元素中收集了通常与胡言乱语句子相关的前缀列表（这个列表可能会根据其他语音转文本模型而有所变化）。每当音频输入以列表中的一个前缀开头时，句子就会被忽略。
- en: If the sentence doesn’t appear to be gibberish, send a request to the chat service.
    Play the response.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果句子看起来不是胡言乱语，请向聊天服务发送请求。播放响应。
- en: The principal loop in **voice_assistant_service.main()**. Code by the author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**voice_assistant_service.main()**中的主要循环。代码由作者提供。'
- en: Wake-word service
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 唤醒词服务
- en: The last component is a service that continually listens to the user’s microphone.
    When the user speaks the wake-word, a system call starts the voice assistant service.
    The wake-word service runs a smaller model than the voice assistant service models.
    For this reason, it makes sense to have the wake-word service running continuously
    while the voice assistant service only launches when we need it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个组件是一个持续监听用户麦克风的服务。当用户说出唤醒词时，系统调用会启动语音助手服务。唤醒词服务运行的模型比语音助手服务模型要小。因此，持续运行唤醒词服务是有意义的，而语音助手服务则只有在需要时才会启动。
- en: You can find the wake-word service code [here](https://github.com/sebastiengilbert73/wakeword_service).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://github.com/sebastiengilbert73/wakeword_service)找到唤醒词服务的代码。
- en: After cloning the project, move to …/wakeword_service/server.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆项目后，转到…/wakeword_service/server。
- en: Rename **wakeword_service_gui_config.xml.example** to **wakeword_service_gui_config.xml**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将**wakeword_service_gui_config.xml.example**重命名为**wakeword_service_gui_config.xml**。
- en: Rename **command.bat.example** to **command.bat**. You’ll need to edit **command.bat**
    so the virtual environment activation and the call to **voice_assistant_service.py**
    correspond to your directory structure.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将**command.bat.example**重命名为**command.bat**。你需要编辑**command.bat**，使虚拟环境激活和对**voice_assistant_service.py**的调用与您的目录结构相匹配。
- en: 'You can start the service by the following call:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下调用来启动服务：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The core of the wake-word detection service is the [openwakeword](https://github.com/dscripka/openWakeWord)
    project. Out of a few wake-word models, I picked the “hey jarvis” model. I found
    that simply saying “Jarvis?” will trigger the detection.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 唤醒词检测服务的核心是[openwakeword](https://github.com/dscripka/openWakeWord)项目。在几个唤醒词模型中，我选择了“hey
    jarvis”模型。我发现简单地说“Jarvis?”就会触发检测。
- en: Whenever the wake-word is detected, a command file gets called, as specified
    in the *<command_on_wakeword>* element of the configuration file. In our case,
    the **command.bat** file activates the virtual environment and starts the voice
    assistant service.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每当检测到唤醒词时，都会调用一个命令文件，正如配置文件的*<command_on_wakeword>*元素中所指定的。在我们的情况下，**command.bat**文件激活虚拟环境并启动语音助手服务。
- en: '![](../Images/a10b684d726fc922f4169fcf2d404486.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a10b684d726fc922f4169fcf2d404486.png)'
- en: The configuration file of the wake-word detection service GUI. Image by the
    author.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 唤醒词检测服务GUI的配置文件。图片来源于作者。
- en: If you want to use the wake-word detection service for something else, you can
    edit the **command.bat** file to make it start whatever program you want.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将唤醒词检测服务用于其他用途，你可以编辑**command.bat**文件，以启动你想要的任何程序。
- en: When the wake-word is detected, the wake-word detection service emits a two-beep
    audio signal to indicate it was triggered. This quick feedback tells the user
    that they must wait as the text-to-speech and the speech-to-text models load in
    the computer’s GPU, which can take several seconds. When both models are loaded,
    the voice assistant service plays the greeting, and the conversation can begin.
    After the conversation ends, the voice assistant service terminates, and the wake-word
    detection service emits another two-beep signal.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到唤醒词时，唤醒词检测服务会发出两声哔声以指示已触发。这一快速反馈告诉用户，他们必须等待，因为文本到语音和语音到文本模型正在加载到计算机的GPU中，这可能需要几秒钟。当两个模型都加载完毕后，语音助手服务会播放问候语，交谈可以开始。对话结束后，语音助手服务终止，唤醒词检测服务会发出另一声两声哔声信号。
- en: When the three components are installed and tested, we can start the chat and
    the wake-word detection services. The wake-word detection service will constantly
    listen to the microphone. When the wake-word gets detected (“Jarvis?”), it will
    start the voice assistant service. You can then ask questions out loud and receive
    a spoken answer. When the end-of-conversation phrase (“Thank you and goodbye”)
    is detected, the voice assistant service ends.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当三个组件安装并测试完成后，我们可以启动聊天和唤醒词检测服务。唤醒词检测服务将不断监听麦克风。当检测到唤醒词（“Jarvis?”）时，它将启动语音助手服务。然后你可以大声提问并收到语音回答。当检测到对话结束短语（“谢谢，再见”）时，语音助手服务结束。
- en: Example of an interaction with the assistant
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与助手的交互示例
- en: 'Here is an example of an interaction with the voice assistant:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与语音助手交互的一个示例：
- en: “Jarvis?” [beep-beep]
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “Jarvis?” [哔—哔]
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Several seconds of silence as the voice assistant models load]'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[在语音助手模型加载期间的几秒钟沉默]'
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Hello! How can I help you?”
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “你好！我能帮你什么？”
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “What are Saturn’s rings made of?”
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “土星的环由什么组成？”
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Saturn’s rings are primarily composed of ice particles, with the majority being
    made up of water ice. However, there are also smaller amounts of other ices, such
    as ammonia ice and rocky debris, in the rings. The exact composition of the rings
    varies depending on the distance from Saturn, with the inner rings being denser
    and made up of smaller particles, while the outer rings are more spread out and
    contain larger ice particles.”
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “土星的环主要由冰粒组成，其中大部分是水冰。然而，环中也有少量其他冰类，例如氨冰和岩石碎片。环的确切成分因距离土星的远近而异，内圈的密度较高，颗粒较小，而外圈则分布较广，含有较大的冰粒。”
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Tell me the plot of the movie ‘Back to the Future’.”
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “告诉我电影‘回到未来’的情节。”
- en: ''
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “The movie ‘Back to the Future’ follows the story of Marty McFly, a high school
    student who is accidentally transported back to 1955 in a time-traveling DeLorean
    car created by his eccentric scientist friend, Doc Brown. Marty must navigate
    the challenges of the past while trying to repair the damage to the present and
    prevent his teenage mother from falling in love with his teenage father. Along
    the way, Marty befriends a younger version of Doc Brown and helps him overcome
    a personal tragedy. The movie explores themes of fate, family, and the consequences
    of altering the past.”
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “电影《回到未来》讲述了高中生马蒂·麦克弗莱的故事，他意外地被传送回1955年，乘坐由他那古怪的科学家朋友布朗博士创造的时光旅行德洛林车。马蒂必须在修复对现在造成的损害的同时应对过去的挑战，并防止他的青少年母亲爱上他的青少年父亲。在这个过程中，马蒂结识了年轻版的布朗博士，并帮助他克服个人悲剧。这部电影探讨了命运、家庭和改变过去的后果等主题。”
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Thank you and goodbye”
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “谢谢，再见”
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Goodbye” [beep-beep]
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “再见” [嘟嘟声]
- en: Conclusion
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this project, we implemented a voice assistant system composed of a wake-word
    detection service, a voice assistant service, and a chat service. Each one of
    these components is a standalone building block reusable for other projects.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们实现了一个由唤醒词检测服务、语音助手服务和聊天服务组成的语音助手系统。这些组件都是独立的模块，可以在其他项目中重复使用。
- en: Among the many surprises I had while working on this voice assistant, what struck
    me the most was the quality of the speech-to-text conversion. If you’re like me,
    you have probably struggled with automated voice recognition systems that fail
    to transcribe simple commands such as *“Turn down the volume”*! I expected speech-to-text
    conversion to be the main stumbling block of the pipeline. After experimenting
    with a few unsatisfying models, I landed on [*facebook/seamless-m4t-v2-large*](https://huggingface.co/facebook/seamless-m4t-v2-large)
    and was impressed with the quality of the results. I can even speak a sentence
    in French, and the neural network will automatically translate it into English.
    Nothing less than amazing!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开发这个语音助手的过程中，有许多惊喜，其中最让我印象深刻的是语音转文本的质量。如果你像我一样，可能会遇到过无法准确转录简单命令的自动语音识别系统，比如*“调低音量”*！我原本以为语音转文本会是整个流程的主要障碍。在尝试了几个不令人满意的模型后，我最终选择了[*facebook/seamless-m4t-v2-large*](https://huggingface.co/facebook/seamless-m4t-v2-large)，对其结果的质量印象深刻。我甚至可以用法语说一句话，神经网络会自动将其翻译成英语。这简直令人惊叹！
- en: I hope you’ll try this fun project, and let me know what you use it for!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你能尝试这个有趣的项目，并告诉我你是如何使用它的！
