- en: 'Learning from Machine Learning | Vincent Warmerdam: Calmcode, Explosion, Data
    Science'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/learning-from-machine-learning-vincent-warmerdam-calmcode-explosion-data-science-e07951a07cf4?source=collection_archive---------7-----------------------#2023-06-14](https://towardsdatascience.com/learning-from-machine-learning-vincent-warmerdam-calmcode-explosion-data-science-e07951a07cf4?source=collection_archive---------7-----------------------#2023-06-14)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The Past, Present, and Future of Data Science: An Interview with Vincent Warmerdam,
    Explosion ML Engineer and creator of calmcode'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@levine.seth.p?source=post_page-----e07951a07cf4--------------------------------)[![Seth
    Levine](../Images/a660734f5feac433e2d930116ab70986.png)](https://medium.com/@levine.seth.p?source=post_page-----e07951a07cf4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e07951a07cf4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e07951a07cf4--------------------------------)
    [Seth Levine](https://medium.com/@levine.seth.p?source=post_page-----e07951a07cf4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F70f6655bd458&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-from-machine-learning-vincent-warmerdam-calmcode-explosion-data-science-e07951a07cf4&user=Seth+Levine&userId=70f6655bd458&source=post_page-70f6655bd458----e07951a07cf4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e07951a07cf4--------------------------------)
    ¬∑53 min read¬∑Jun 14, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe07951a07cf4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-from-machine-learning-vincent-warmerdam-calmcode-explosion-data-science-e07951a07cf4&user=Seth+Levine&userId=70f6655bd458&source=-----e07951a07cf4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe07951a07cf4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearning-from-machine-learning-vincent-warmerdam-calmcode-explosion-data-science-e07951a07cf4&source=-----e07951a07cf4---------------------bookmark_footer-----------)![](../Images/53efad9e9b9d78339cdcdc8a901f3f82.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Welcome back to ‚Äú[Learning from Machine Learning](https://www.youtube.com/@learningfrommachinelearning),‚Äù
    a series of [interviews](https://rss.com/podcasts/learning-from-machine-learning/)
    that delves into the fascinating world of machine learning. As AI revolutionizes
    our world, each episode offers technical insights along with career advice and
    life lessons from leading practitioners in the field.
  prefs: []
  type: TYPE_NORMAL
- en: In this [episode](https://youtu.be/yvgxRzqx1Jg), Vincent Warmerdam, creator
    of calmcode and [koaning.io](https://koaning.io/), ML Engineer at Explosion, and
    former Research Advocate at Rasa, shares his experiences and advice. He has held
    numerous roles in the data science world including consultant, advocate, trainer,
    lead, educator and recruiter. His work has focused on simplifying processes, utilizing
    models effectively and educating others.
  prefs: []
  type: TYPE_NORMAL
- en: His site [calmcode](http://calmcode.io) provides high-quality, easily consumable
    educational data science content and has gained popularity and garnered positive
    feedback. It currently attracts thousands of users monthly and has become a valuable
    resource for data scientists. Vincent helped organize PyData Amsterdam and he
    has consistently been a speaker at PyData and NormConf. His talks are enjoyable
    and engaging (check them out on YouTube).
  prefs: []
  type: TYPE_NORMAL
- en: Vincent has created dozens of tools to help in machine learning development,
    data processing, testing, and natural language processing.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/koaning?source=post_page-----e07951a07cf4--------------------------------)
    [## koaning - Overview'
  prefs: []
  type: TYPE_NORMAL
- en: üôÇVincent D.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/koaning?source=post_page-----e07951a07cf4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Vincent‚Äôs passion for building practical tools, sharing his work openly and
    addressing real-world problems with simplicity and calmness has influenced the
    way that I do my work.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vincent has had an unconventional career journey and entered data science while
    it was still emerging. He attributes his success to a combination of luck, the
    popularity of his blog, organizing meetups, and his open-source contributions,
    which resulted in job offers directly from CEOs and CTOs instead of going through
    the traditional recruitment processes. His academic background includes studying
    operations research and design which gave him a unique perspective on algorithms
    and constraints. He also mentioned that his gig as a bartender at a Comedy Club
    helped sharpen his presentation skills.
  prefs: []
  type: TYPE_NORMAL
- en: Inspired by a family member‚Äôs wrong medical diagnosis, Vincent was attracted
    to machine learning to use algorithms to make better decisions and predictions.
    During his Masters thesis he took the opportunity to focus on machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: His open source work has been driven by his desire to solve specific problems
    and sometimes to scratch his own itches. He started with his first PyPI project,
    evol, and developed libraries like scikit-lego, human-learn, whatlies, and doubtlab
    based on his needs and experiences at different companies.
  prefs: []
  type: TYPE_NORMAL
- en: The bulk library emerged as a result of his work on human-learn and whatlies.
    It leverages embeddings, dimensionality reduction and clustering to facilitate
    bulk labeling and data exploration. While the tool does not provide perfect labels,
    it helps lower the barrier to entry and build intuition when working on new datasets.
  prefs: []
  type: TYPE_NORMAL
- en: He started calmcode as a response to the lack of quality educational content
    in data science, aiming to provide concise and opinionated tutorials that focus
    on getting the idea across effectively. His lessons consist of a series of short,
    easily digestible videos. He focuses on teaching tools and approaches to improve
    day-to-day data science work.
  prefs: []
  type: TYPE_NORMAL
- en: Vincent‚Äôs experience in the field provided great perspective on the current
    state of machine learning. We were able to discuss the limitations of generative
    models, the role of rule-based systems to complement ML models and the complexities
    of ground truth labeling.
  prefs: []
  type: TYPE_NORMAL
- en: Vincent‚Äôs advice was real and poignant. He cautions against placing too much
    emphasis on monetary gains early in your career and to prioritize discovery of
    your passion and true motivations. He grapples with the contrasting feelings of
    the usefulness of the ML field and the need for skilled professionals in it while
    also recognizing the abundance of hype. Most importantly, Vincent emphasizes gaining
    a clear understanding of what you can and cannot influence and to focus your energy
    on areas where you can make a difference.
  prefs: []
  type: TYPE_NORMAL
- en: Advice & Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understanding the problem correctly is most important ‚Äî a better algorithm may
    not always yield better outcomes if applied to the wrong problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rephrasing problems can be beneficial ‚Äî think holistically about system optimization
    rather than focusing solely on improving individual components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ‚ÄúPeople often forget that the algorithm is usually just a cog in the system.
    And we‚Äôre interested in building a better system, not a better cog. So, if you‚Äôre
    building a better cog but it doesn‚Äôt fit the rest, it‚Äôs not a better cog because
    you don‚Äôt get a better system.‚Äù
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider starting a blog where you share what you learn. Writing short ‚Äútoday
    I learned‚Äù snippets can be an easy way to build an online presence and demonstrate
    your continuous learning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don‚Äôt feel the pressure to know everything when starting out. Consider related
    roles like being an analyst, which can provide valuable skills and knowledge that
    will benefit your data science journey.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ‚ÄúYou can make python packages more often than you might think, so just build
    one.‚Äù More people should create their own Python packages, even for internal tools
    or small helper functions. Not enough people take advantage of the benefits of
    packaging and reusing their own code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stepping outside the machine learning bubble can be refreshing and provide inspiration.
    Interacting with people who are not in the field and understanding their perspectives
    can help you create better applications and focus on the human aspect of your
    work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be careful of getting too focused on money early in your career. It‚Äôs important
    to figure out what you enjoy and what makes you tick rather than just chasing
    a higher salary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ‚ÄúI‚Äôm kind of a mixed bag when it comes to the whole machine learning thing.
    Part of my opinion is it‚Äôs a super useful tool and we need more good people doing
    machine learning. But at the same time, it‚Äôs like a gross bucket of hype that
    we really want to have less of. And my day to day is to sort of deal with both
    of these feelings.‚Äù
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ‚ÄúCalling *.fit* and *.predict* are the easy bits. It‚Äôs all the stuff around
    that. It‚Äôs way trickier. Especially when you consider themes of fairness, all
    the things that can go wrong, can we really know that upfront? I don‚Äôt know if
    you always can.‚Äù
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ‚ÄúThere‚Äôs some stuff that you can control, some stuff that you can‚Äôt. Just make
    sure that you understand what you can and can not control and then move on from
    there.‚Äù
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](#26e3)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Summary](#89a2)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Advice & Takeaways](#a5c2) [Full Interview](#c58f)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Welcome](#78d6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Background](#eccb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Academic Background](#fb97)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Machine Learning Attraction](#8fa8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Calmcode](#e684)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Open Source](#b85e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Bulk](#7396)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Understanding the Problem](#4198)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Unanswered Questions in Machine Learning](#ef45)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Generative and Predictive Machine Learning](#5bf3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Influences](#7a2a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Career Advice](#f1fc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Advice for New Data Scientists](#ad30)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚Äî [Learning from Machine Learning](#5b18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Video Interview](#3b15)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Spotify Audio](#05de)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Previous Episode featuring Maarten Grootendorst](#9210)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[References](#a6b6)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Full Interview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '(Note: This interview was lightly edited for clarity)'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Welcome to Learning from Machine Learning. On this episode, I have
    the pleasure of having Vincent Warmerdam. He‚Äôs currently a machine learning engineer
    at Explosion, the company behind SpaCy and Prodigy. Vincent is an educator, a
    blogger, consistent PyData speaker.'
  prefs: []
  type: TYPE_NORMAL
- en: He‚Äôs created many valuable open source tools. He‚Äôs endorsed for awesomeness
    on LinkedIn over a hundred times. And truly an inspiring force in the data science
    community. Welcome to the podcast.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Hi. That comment. It‚Äôs making me check. Do I have a hundred endorsements?
    I didn‚Äôt know.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Over.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Oh, okay, cool.'
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs an inside joke I have with a former colleague whoever can get the most.
    I‚Äôve got more than ninety nine endorsements for awesomeness on LinkedIn now, Nice!
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Why don‚Äôt you give us some background on your career journey? How
    did you get to where you are today?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: It‚Äôs a little bit hard to give proper career advice because I
    want to just recognize I‚Äôm a little bit privileged and I got lucky a whole bunch
    because when I started this whole data science thing, this was the era when random
    forests were kind of new. And if you could just use a random forest, you‚Äôre already
    way better than all the economic traditions with linear vols. So can you run fit
    and predict ‚Äî bang. You‚Äôve got a job. And, I was kind of in that era at the right
    time.'
  prefs: []
  type: TYPE_NORMAL
- en: After that though, I started blogging. I started helping out by arranging some
    meetups. There‚Äôs a machine learning meetup in Amsterdam ‚Äî I helped organize PyData
    Amsterdam.
  prefs: []
  type: TYPE_NORMAL
- en: And I had a pretty popular blog as well, so people started recognizing me for
    that. And, at some point, that recognition gets you places, you get invited to
    speak, and then people sort of see you as an authority figure. I‚Äôm not, I like
    to think I have sensible ideas, but I try to be modest about that. But that has
    kind of been the story of my career though because people knew my blog, which
    would usually include a CTO of a company. And then a CTO would say, ‚ÄúHey, I like
    your blog. Can we just have a beer?‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: And then usually, that led to the job offer. I have yet to talk to a recruiter.
    Honestly. I‚Äôve never been hired through the recruitment pipeline so far in my
    career.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs always been via the CEO or CTO because they knew of my work beforehand.
    And this is very weird, this is a very bad story because this is very hard to
    replicate for others because I just got very lucky when it comes to this. I do
    think having a blog and being able to get recognized is very useful, just very
    hard to replicate. But I also like to think that some of the side projects that
    I did for open source definitely helped out. Calmcode is something that people
    know me of these days. There‚Äôs a saying, plant a thousand flowers and one of them
    will be a lotus.
  prefs: []
  type: TYPE_NORMAL
- en: ‚Ä¶plant a thousand flowers and one of them will be a lotus
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3a4a7bf604fda0b50f5ff6a56b66a46a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated using [https://huggingface.co/CompVis/stable-diffusion-v1-4](https://huggingface.co/CompVis/stable-diffusion-v1-4)
    with prompt ‚ÄúPlant a thousand flowers and one of them will be a lotus‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: I subscribe to that idea, but a lot of it comes down to luck and a bit of privilege
    as well. I just want to be honest about that. Being able to be recognizable has
    proven to be useful to me.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. Definitely. I mean, everyone‚Äôs journey is unique. What are
    the roles that you‚Äôve played at different companies?'
  prefs: []
  type: TYPE_NORMAL
- en: I know you‚Äôve been a consultant at one point, an advocator. You‚Äôve had some
    interesting titles. Right?
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: There was a phase at a previous company where they would really
    let you pick any name you could and me and a couple of colleagues would think
    it‚Äôs funny to really see how far we could stretch it. So I called myself a Pokemon
    master because I thought that it was kind of funny. My favorite title was senior
    person because at some point, I‚Äôm just one of the old guys at the company. So
    I just called myself that.'
  prefs: []
  type: TYPE_NORMAL
- en: As far as roles goes, I‚Äôve been doing lots of training, so at some point you
    call yourself a trainer. Because you‚Äôre doing consultancy, you have different
    roles within different teams. So I was a lead at some point as well.
  prefs: []
  type: TYPE_NORMAL
- en: I was also helping a recruiting company recruit people at companies for specific
    data team. Sometimes my role would be super temporary. Sometimes it‚Äôd be for two
    years. But usually, it‚Äôs been I was a person on a data team trying to get the
    team to become productive, doing whatever. Usually, the things I like to think
    I‚Äôm pretty good at is keeping things very simple.
  prefs: []
  type: TYPE_NORMAL
- en: I can get a lot of mileage from linear models, which tends to work quite nicely.
    And before that, I also had lots of different jobs in college, and I do like to
    think that that kind of helped as well. My background is in operations research,
    but before that, I actually studied design. And my evening job, I was a bartender
    at a comedy theater in the Netherlands, which I do like to think that might have
    helped my presentation skills in a way. Having studied design for a while also
    makes me think differently about algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: And how operations research makes me think about constraints a lot when I‚Äôm
    doing data science things. I like to think that I have a somewhat diverse background,
    and it‚Äôs that somewhat diverse background that makes it easy for me to do stuff
    that I‚Äôm doing now. That‚Äôs a summary.
  prefs: []
  type: TYPE_NORMAL
- en: Academic Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: That makes sense. So diving into your academic background, what was
    it? So, it was some operations research and some design? That sounds pretty unique
    there.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Yeah, I studied industrial design engineering for a year, and
    then I found out it wasn‚Äôt for me. So I had to switch majors. And then the bachelor‚Äôs
    was econometrics and operations research, and the masters was operations research.
    And I thought that it was the most interesting of the two. But also because that
    had a little gateway to computer science.'
  prefs: []
  type: TYPE_NORMAL
- en: So if I wanted to do the computer science courses, that‚Äôd be kind of an easy
    way for me to get courses I wanted to take. But, I was also rowing when I was
    in college and did a bit of partying, so I wasn‚Äôt allowed to start my masters
    just yet. So I had this one year where I just took whatever course interested
    me. I did a couple of courses in neuroscience, which was pretty interesting, some
    psychology and biology and what not.
  prefs: []
  type: TYPE_NORMAL
- en: Again, I like to think that the diversification of knowledge has proven to be
    quite useful, but the official title for my academic background, Operations Research.
    So that‚Äôs the mathematics behind optimizing systems. That‚Äôs kind of the thing
    that you‚Äôre taught there.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Very cool. What‚Äôs the quintessential or canonical problem in operations
    research that that people try to solve?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: So, a very textbook example in machine learning, you usually try
    to optimize towards something. You want to get the loss as low as possible or
    the accuracy as high as possible. And you‚Äôve got algorithms for that. You typically
    take your data and the label you want to predict and you come up with some sort
    of loss function, you try to get those as small as possible. And in operation
    research, you kind of do a very similar thing.'
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs just that in operation research, you typically aren‚Äôt dealing with a machine
    learning algorithm, but you‚Äôre dealing with, let‚Äôs say, ‚ÄúHey, we have stocks that
    we would like to invest in and Oh, by the way, that also introduces constraints.
    Because, yes, we want to get the highest return, but of course, we don‚Äôt want
    to overshoot the budget, and we also have a risk preference.‚Äù And those are defined
    as hard mathematical constraints. Then if you want to optimize, it‚Äôs kind of a
    different ball game because if your algorithm ever exceeds the bounds of the constraint,
    then you‚Äôre in sort of bad territory. So I would argue that‚Äôs he main thing.
  prefs: []
  type: TYPE_NORMAL
- en: If you‚Äôre doing operations research then you‚Äôre taught constraints really matter
    and you want to deal with those in mathematically proper ways. And that‚Äôs a different
    ballgame. But that‚Äôs the main thing that they‚Äôre dealing with, this constrained
    optimization. That‚Äôs what they do.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Very cool. Yeah. Sounds like you need a very strong math background.
    Some linear algebra in there too?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Lots of calculus and linear algebra. Although, I will say it depends
    a bit on what you do. When you do the master‚Äôs degree, of course, you do theoretical
    courses and you got to do the proofs. But the moment that you start doing your
    thesis [things change]. I had a professor who basically said, ‚ÄúI know nothing
    about machine learning Vincent, but you seem so eager. You do machine learning
    and you just teach me how it works because I‚Äôve got no idea.‚Äù'
  prefs: []
  type: TYPE_NORMAL
- en: And that was great. The professors just let me do what I wanted to do, and I
    was also able to teach myself that way. But if you really want to do the proper
    operations research and especially if you want to do a PhD, It is super math heavy.
    That‚Äôs true.
  prefs: []
  type: TYPE_NORMAL
- en: A little bit too heavy for my comfort to be honest. I‚Äôm a little bit more on
    the applied side of things, but still know people who end up doing a PhD, and
    they are definitely the math proof kind of people. They‚Äôre the kind of this cookbook
    of linear algebra kind of a person. That‚Äôs definitely in the field.
  prefs: []
  type: TYPE_NORMAL
- en: Machine Learning Attraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: What was it that attracted you to machine learning? What initially
    got you interested in it?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: There‚Äôs always something cool about making predictions. Right?
    So there‚Äôs something about that I thought was pretty interesting. I think the
    longer story, though, I do remember a very close family member of mine got a wrong
    medical diagnosis.'
  prefs: []
  type: TYPE_NORMAL
- en: The wrong diagnosis was they told the person you have a very bad disease and
    the person didn‚Äôt. And we found out just in time, thank God. But, they might have
    made some really weird life decisions like sell the house immediately because
    of that decision. So that made me think, okay, there‚Äôs a definite consequence
    to making the wrong decisions. Anything that we can do to make better decisions
    is interesting.
  prefs: []
  type: TYPE_NORMAL
- en: And maybe there‚Äôs something about this machine learning. The whole idea that
    you try to learn more from data by using a machine, there‚Äôs something plausible
    about that. It seems very interesting. So that was kind of around the time that
    I did think, Hey, yeah, Let‚Äôs see if these algorithms might be able to do something.
  prefs: []
  type: TYPE_NORMAL
- en: And then the career prospects turned out to be amazing. So that‚Äôs another motivation
    to go into that realm. But the initial spark was a wrong decision got made. That‚Äôs
    how I started thinking, hey, maybe there are systems that we can improve here.
  prefs: []
  type: TYPE_NORMAL
- en: Calmcode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Very interesting, and we‚Äôre going to dive into machine learning in
    a bit. But having the creator and maintainer of calmcode which is such an unbelievable
    resource.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Vincent Laughs]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth:** No, nothing nothing to laugh about. Calmcode is incredible.'
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs in the top two or three things that I recommend to every new data scientist.
    The way that you break down really complex things into a nice calm and logical
    and rational way is extremely valuable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent:** Glad to hear.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth:** So can you talk a little bit about calmcode and why‚Äôd you start it?
    And well, what is it? Give everyone a breakdown'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: So first of all, happy to hear it ‚Äî that you like calmcode. I‚Äôm
    happy to hear that it helps. So, basically, the story behind calmcode was, at
    some point, I was looking at educational content around data science. And, as
    an educator, I just started noticing there‚Äôs just so much gunk.'
  prefs: []
  type: TYPE_NORMAL
- en: So to give an example, the number one tutorial, maybe four or five years ago,
    on how scikit-learn works, what happened with this data set called Load Boston,
    which is about Boston House prices. There‚Äôs so many tutorials that use that data
    set from all your O‚ÄôReily books to a lot of open source packages. But then you
    look at the data and it turns out that one of the variables that they‚Äôre using
    to predict the house price is skin color.
  prefs: []
  type: TYPE_NORMAL
- en: I forgot the exact name, but it was something like percentage of blacks in the
    town. You don‚Äôt want to put that in the predictive model. It‚Äôs a really, really
    bad idea. Also, why is this dataset on scikit-learn? Why are so many people using
    it?
  prefs: []
  type: TYPE_NORMAL
- en: So that led to a lot of frustration on my end. And then I also noticed that
    there are these enterprise courses that use Load Boston that charge a thousand
    dollars a day. And you look at it, you kind of go, this is a mess. And then I
    figured if I‚Äôm this frustrated, maybe I can get energy out by putting this stuff
    out there for free.
  prefs: []
  type: TYPE_NORMAL
- en: I knew that I was knowledgeable enough to be able to teach these kinds of topics
    because I‚Äôve taught them before. But I‚Äôve also noticed that a lot of this educational
    content seems to focus more on the creator and less about just getting the idea
    across. So I figured it would be kind of like a fun little experiment. If I were
    to make a learning platform, how would I do it? And that‚Äôs how CalmCode got created.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is you just have a maximum of five one minute videos to explain a single
    topic and the sequence of those can be a little course on pandas or can be a little
    course on whatever.
  prefs: []
  type: TYPE_NORMAL
- en: ‚Ä¶for every single topic I can say, Is this a calm tool? Is it something that
    makes your day to day nicer? And if the answer is maybe not, then I just don‚Äôt
    teach it.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What I like about doing the calmcode thing is for every single topic I can say,
    Is this a calm tool? Is it something that makes your day to day nicer? And if
    the answer is maybe not, then I just don‚Äôt teach it, which is also one of the
    reasons why I don‚Äôt teach Spark, to be honest. Because installing it is just such
    a pain. And sometimes there‚Äôs easier ways of analyzing the data than resorting
    to a very big data tool.
  prefs: []
  type: TYPE_NORMAL
- en: So it‚Äôs just a very opinionated learning environment that people seem to have
    really liked. I‚Äôve gotten lots of very nice responses. Ever since the baby showed
    up, I have been doing way less.
  prefs: []
  type: TYPE_NORMAL
- en: But it has been very cool to see just this little hobby project of mine without
    distractions that‚Äôs very calm. Seems to be getting between ten and twenty thousand
    people a month. And I get lots of people buying me beers at conferences out of
    the blue. That kind of stuff is pretty cool.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. It‚Äôs a great resource. Definitely paying it forward, creating
    a place for data scientists to go to learn anything. Have you ever found yourself
    going back to an old calmcode to refresh your self on some of these skills?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Yeah. That‚Äôs another reason. So one thing that calmcode has proven
    to be quite nicely for me is it‚Äôs kind of like a snippets library. Because I knew
    the course that I made and I knew that I definitely mentioned this in that course
    and I kind of need a config file, where is it?'
  prefs: []
  type: TYPE_NORMAL
- en: Just today, I was looking at my typer course because I needed ‚Äúoh, how do options
    work again? Copy paste.‚Äù So it‚Äôs also almost a snippet tool from myself at this
    point as well. Not the original intent, but it is something that seems to be happening.
  prefs: []
  type: TYPE_NORMAL
- en: And also, I‚Äôm building search for calmcode now as well. It‚Äôs kind of as a hobby
    project. I‚Äôm contemplating, hey, maybe the main thing the search feature should
    do is just find the right snippets, which is kind of like an interesting search
    problem on its own.
  prefs: []
  type: TYPE_NORMAL
- en: But, yeah, totally, I need a reminder too. There‚Äôs many courses. I don‚Äôt have
    all of them in my head, all of the time. I still watch my own stuff in that sense.
    Yeah.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. It‚Äôs a good resource for you that you can consume which also
    became something so many other people can use. I‚Äôm trying to think of my first
    usage of it. I think it was, like, args kwargs, which is one of the first ones
    on there. Yeah. I revisit it every so often.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Nice. Yeah. Nice.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth:** Thank you.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent:** Well, so then I would love to do more.'
  prefs: []
  type: TYPE_NORMAL
- en: But the simple fact of the matter is my life is a little bit different now because
    of the baby. So, there‚Äôs so many ideas I have that I could do with calmcode. The
    one thing I also kind of like about the project is I cannot spend any effort on
    it and the site will just still run. Right. So that‚Äôs also kind of the calm design
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: I really like having a hobby project where it‚Äôs impossible to break. And if
    any of it breaks, it‚Äôs super easy to fix because it‚Äôs just a static website. So
    that makes it super easy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: If there were no time constraints or any resource constraints, what
    would you do to improve calmcode?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: There‚Äôs a couple of courses particularly that I would love to
    do. One of them is just embeddings I think that there seems to be a bit of hype
    around it, but also just you can make embeddings do different things and there‚Äôs
    reasons why they work. But they don‚Äôt solve every problem and I can do a fun course
    where you start with letter embeddings and you move on to other embeddings and
    images, and then you also show how they can fail. I think that that could be super
    cool.'
  prefs: []
  type: TYPE_NORMAL
- en: Bayesian MCMC [Markov Chain Monte Carlo] stuff, would be nice to have as well
    because you can make very articulate models, which is a trick not enough people
    are appreciative enough of.
  prefs: []
  type: TYPE_NORMAL
- en: And then I would love to have a new section on the site, which is all about
    demos and benchmarks. And that‚Äôs because I think it‚Äôs very hard to do a benchmark
    wrong. All benchmarks are wrong, but some of them can be very insightful. And
    I think just celebrating that a bit more would also just be fun. I‚Äôve got a couple
    of examples lined up, but I have no time to actually produce it.
  prefs: []
  type: TYPE_NORMAL
- en: But things like, hey, what can you do to actually make numeric algorithms converge
    a bit quicker. Does standardization really help or not? And, just exploring that
    a little bit could be just super fun.
  prefs: []
  type: TYPE_NORMAL
- en: Stuff like that‚Äôs in my mind. There‚Äôs always stuff to make. And, like, another
    thing I‚Äôm playing with is, like, would it be fun to collaborate on that project?
    Maybe. I don‚Äôt know. But of course, There‚Äôs no rush. So it‚Äôs also kind of fine
    if I don‚Äôt spend time on it right now. That‚Äôs also cool.
  prefs: []
  type: TYPE_NORMAL
- en: Open Source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. Awesome. Switching gears a little bit into some of your open
    source work. I think the first library of yours that I was exposed to was bulk.
    Maybe something else before that but that was the first one I was really using.
    And then you also have embetter, human-learn, whatlies, doubtlab, cluestar. Those
    are the ones that I‚Äôm most familiar with. I know there‚Äôs about another two or
    three dozen'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Yeah. Small dozen at this point.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: When do you decide like ‚Äî this project deserves an open source library?
    When you think it‚Äôs a tool?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: It helps a bit to maybe explain how the open source thing kind
    of got started. So my first open source project that I put on PyPI was called
    evol, which is basically a DSL for evolutionary programming. I made it with a
    colleague of mine. It was a very cute idea. And I wanted to have my own little
    library.'
  prefs: []
  type: TYPE_NORMAL
- en: So I was looking for a problem. And then I just find out that, if I have a population
    object and evolution object, and those two can interact in nice ways and super
    easy to make genetic algorithms. Alright. Cool library, I did a bunch of talks
    on that.
  prefs: []
  type: TYPE_NORMAL
- en: But then at some point, I taught myself how to make Python packages. And then
    I was a consultant, and I started noticing that at different clients that I would
    be writing the same, scikit-learn components. So I figured, I have to have a library
    with these components that I keep reusing. And that‚Äôs how scikit-lego came to
    be, and that‚Äôs how I familiarized myself with the scikit-learn ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: And then, I started working at Rasa. And there, we do lots of benchmarks on
    sentence classification because Rasa builds chatbots. And when you‚Äôre building
    chatbots, sentence comes in and we need to figure out the intent. Okay. So I wrote
    a bunch of benchmarking tools because that‚Äôs what I needed and some of those can
    be open sourced.
  prefs: []
  type: TYPE_NORMAL
- en: Whatlies was an example of that because I wanted to have a library where very
    quickly I could have many non-English embeddings and see if they were better.
    And then it turned out that there‚Äôs a whole non-English community around Rasa
    who was super interested in that.
  prefs: []
  type: TYPE_NORMAL
- en: So I was able to build some Rasa plugins to support all these non-English tools.
    And, then at some point, I started maintaining my own libraries, and then I noticed
    that I need some unit tests for my docs because I don‚Äôt want my docs to break.
    So I made a couple of tools to help me do that. [Mktestdocs](https://github.com/koaning/mktestdocs)
    ‚Äî That‚Äôs one of these tools.
  prefs: []
  type: TYPE_NORMAL
- en: I noticed the tests at Rasa were running super slow so I made [pytest duration
    insights](https://github.com/koaning/pytest-duration-insights) so I could figure
    out which tests were slowest. And you can see how all these things accumulate,
    but it‚Äôs always because I‚Äôm scratching another itch. And my preferred way of operating
    is to do that in public.
  prefs: []
  type: TYPE_NORMAL
- en: And of course, there are tools that I can‚Äôt do in public. I work at a company.
    Some tools are private. That‚Äôs fine. But most of the time, I‚Äôve encountered a
    problem, and I just want to be able to solve it again later with very low effort.
    And because I‚Äôve made packages before, it‚Äôs just super easy to repeat.
  prefs: []
  type: TYPE_NORMAL
- en: And that‚Äôs also how [doubtlab](https://koaning.github.io/doubtlab/) happened,
    and it‚Äôs also how [embetter](https://github.com/koaning/embetter) happened, and
    honestly, also how bulk happened. It‚Äôs just that at some point, I figured I need
    this for my work. It‚Äôs nice to have around, so let‚Äôs just package it and go build
    in public, and that works very well for me. That‚Äôs the main story there.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. Very cool. And that‚Äôs a great story. It seems like building
    one tool, you build up certain skills, and then one thing kind of leads to another,
    and then it‚Äôs not such a big deal.'
  prefs: []
  type: TYPE_NORMAL
- en: Once, I guess, you have around three dozen amazing tools to add that thirty
    seventh tool.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: So, yes, but I do want to make one comment because I do think
    that in general, if I look at the companies that I visited, with my background
    as a consultant, I do think not enough people make their own Python packages.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine that you have a pandas query that has to deal with time
    series or something that is working on this very specific database. Okay. Then
    the function that reads out the data from the database probably can be a function
    that needs to be reused. And maybe you have to add sessions or maybe you have
    a very specific machine learning model that you want to reuse.
  prefs: []
  type: TYPE_NORMAL
- en: And for all of these utilities, you don‚Äôt want them to live in a notebook. You
    want them to live in a Python package. And I have seen that not enough people
    make their own internal tools which I do think is a shame. I was around a couple
    of mature colleagues at the time and we would write our own Python tools internally.
  prefs: []
  type: TYPE_NORMAL
- en: ‚Ä¶you can make Python packages more often than you might think. So, just build
    one even if it‚Äôs for your own little helper functions in pandas that you like
    to use.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And because we had that habit, it was also quite easy for me to make one that
    was just public. So, this is advice I might have for a more general crowd, you
    can make Python packages more often than you might think. So, just build one even
    if it‚Äôs for your own little helper functions in pandas that you like to use. That‚Äôs
    a totally legitimate use case.
  prefs: []
  type: TYPE_NORMAL
- en: Bulk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. To dive into the one that I‚Äôve used the most, bulk. Can you
    talk about bulk? What is the pipeline and the requirements for it? What are the
    mechanisms at play?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Yeah. So it might be fun to also explain how that library accidentally
    happened. So I had a library called human-learn. There‚Äôs a couple of really cool
    features, but the whole thing with human-learn is that as a human, you can now
    make scikit-learn models without knowing anything about machine learning. One
    thing you can do is turn a Python function into a scikit-learn compatible component
    which is useful. So you can grid search over the kwargs and all that.'
  prefs: []
  type: TYPE_NORMAL
- en: However, one thing I thought was kind of cool too is, usually you see a plot,
    of some blue dots there, some yellow dots there, some red ones there. And people
    say, this is what we need machine learning for and then an algorithm dissects
    them. But then I figured, you know, you can just draw a circle around the green
    dots and a circle around the blue ones and just translate that circle into a scikit-learn
    model. So that‚Äôs a feature of human-learn. In human-learn, we have bokeh components
    that can do that from a notebook.
  prefs: []
  type: TYPE_NORMAL
- en: And while I was working on that, I was also working on [whatlies](https://koaning.github.io/whatlies/)
    over at Rasa for all of these word embeddings. Then at some point, it started
    dawning on me that when you take these word embeddings and when you pass them
    through [UMAP](https://umap-learn.readthedocs.io/en/latest/), you kind of get
    these clusters. And then I figured, oh, I just want to select them. Oh, hang on.
    I‚Äôve got this tool called human-learn that just does that.
  prefs: []
  type: TYPE_NORMAL
- en: And within, like an hour, I had that working in a notebook. Then, I showed it
    to a bunch of colleagues and they all kind of went, ‚ÄúThis is super useful, Vinny.
    Well done.‚Äù So that was a notebook that got shared around a lot.
  prefs: []
  type: TYPE_NORMAL
- en: And now, I no longer work at Rasa, and I started working at this company called
    Explosion. We have an annotation tool. And I felt like doing the bulk trick again,
    but I didn‚Äôt feel like using that in a notebook. So I just turned that into a
    little web app that you can run locally and it‚Äôs one of the pre-processing steps
    I like to use as the thing you do before you start annotating in Prodigy. You
    just take your data, you embed it into a 2-D plot using UMAP and then you typically
    see clusters and you try to explore that space, make a selection, and that‚Äôs it.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs a very nice way to do bulk labeling because clusters tend to appear from
    these embeddings. And that‚Äôs basically the whole trick. These bulk labeling techniques,
    they kind of work, but they‚Äôre not perfect. They seem pragmatic enough for me
    to go ahead and get started within an hour. And that‚Äôs kind of the power of it.
    Stuff that used to take me six hours and now it takes me only one hour.
  prefs: []
  type: TYPE_NORMAL
- en: And it‚Äôs a trick that only works for getting started, but I get started a lot
    on a lot of new data sets. So for me, it totally solves a problem. Bulk is also
    one of these projects where I would love to have more time to fix some of the
    rough edges, but it is a little hack that totally works and I love using it. And
    there seems to be a little crowd of people who seem very appreciative of that
    tool as well, especially because it does text but also images. Out of the box,
    it just does that.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Very cool. Yeah. I used bulk when it was in a notebook. I know I
    reached out to you. You were very generous with your time trying to help me getting
    running in different environments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Yeah, the first notebook was definitely buggy. That‚Äôs definitely
    true. Yeah. I definitely remember that.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Still did the trick.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Yeah. Well, the thing also back at Rasa, I would make a habit
    of making these videos. So, bulk that had a YouTube video attached as well, which
    is how a lot of people found out about it. And I think there‚Äôs this one repository
    that happens to have that notebook, which is still getting stars these days.'
  prefs: []
  type: TYPE_NORMAL
- en: But I recommend people just use the command line thing now because less distraction
    and a bit more stable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. And then interestingly for me, as I was moving a lot of my
    work outside of notebooks and into scripts. I came across bulk again and now I‚Äôm
    using more of the web app. I love both of them. They‚Äôre great tools and you make
    a good point.'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes lowering the barrier to get started on a problem is just so important
    because then you start to get the ball rolling, you start to get some thoughts
    going, and you can make some meaningful progress. What I like about it is you
    start building some intuition, by exploring the data and you start to think, ‚ÄúOh,
    okay. These could be some potential categories.‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: There‚Äôs definitely a human in the loop who is learning aspect
    of it that I also think is really useful. Especially when they dump a new dataset
    on you. Yeah, you can start throwing it into an algorithm and that‚Äôs [fine]. But
    genuinely, understanding what‚Äôs in the dataset typically is the thing that takes
    the most time. And it‚Äôs nice that as a side effect of bulk, you are at least exposing
    yourself to these clusters. And that on its own seems quite useful.'
  prefs: []
  type: TYPE_NORMAL
- en: Right now, you can do bulk labeling on sentences and images. One of the things
    I am working on is doing that for phrases as well, for substrings in text. So
    right now I can embed the entire sentence, but what I want to move towards is
    that I‚Äôm also able to say, take every noun phrase in that sentence and make a
    small little point for that. Because that way, if you‚Äôre interested in doing named
    entity recognition or something like that, we can also do bulk labeling for you.
  prefs: []
  type: TYPE_NORMAL
- en: And, especially things like video games that might be abbreviations ‚Äî Star Wars
    are two tokens. It‚Äôd be nice if we can turn it into a single phrase. And over
    at our company Explosion, we have lots of tricks that totally solve all of this.
    It‚Äôs just that I need to have an afternoon to make that work inside of bulk.
  prefs: []
  type: TYPE_NORMAL
- en: But it‚Äôs stuff that is on the road map that I am definitely interested in solving
    some of those problems as well.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. So I‚Äôve noticed going through some of your work. A lot of it
    is focused on creating high quality datasets. But something before that is actually
    understanding the problem. And I watched one of your PyData talks basically about
    rephrasing the problem.'
  prefs: []
  type: TYPE_NORMAL
- en: And you gave an incredible example about a problem where someone is looking
    for beans, beef, and bread.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Oh, yeah.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Can you can you talk about that one?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: So this was not my tale. I actually met the person who works at
    the World Food Program doing Operations Research. And one of the problems that
    they had was [dealing with] hunger in the world. And, sometimes a village with
    hunger says, we need more beans or we need more chicken or there‚Äôs demand for
    certain products. And then part of what the World Food Organization tries to do
    is to source those foodstuffs cheaply.'
  prefs: []
  type: TYPE_NORMAL
- en: And then part of the cost picture here is the logistics of it. So, can we get
    the food on the truck? And how expensive is it to get the truck? And all the logistics.
    And as this person was saying, they defined the problem the wrong way originally
    because when a person says, I need beans, yes, they can say that, but it‚Äôs not
    beans that they need, it‚Äôs nutrients. And beans, they‚Äôre high in fiber and high
    in protein.
  prefs: []
  type: TYPE_NORMAL
- en: Okay. There‚Äôs other food like lentils that is also high in fiber and high in
    protein. And if we‚Äôre fighting hunger, then we‚Äôre not going to be very picky about
    whether or not we get beans or lentils. And maybe if we do that, we can get the
    foodstuff without needing a shipyard. We can just send the truck.
  prefs: []
  type: TYPE_NORMAL
- en: And just by redefining that problem, I believe they got like a five percent
    cost reduction, which is a crazy high number for an operation ‚Äî for a problem
    that people have already spent years on trying to optimize. Getting a five percent
    cost reduction is almost unheard of, but it was basically because they were solving
    the wrong problem. And my theory is at least that, like, this is an anecdote of
    a thing that happened to this one person for the World Food program. Quite typically,
    this whole act of rephrasing is a very useful exercise and maybe not enough of
    us do.
  prefs: []
  type: TYPE_NORMAL
- en: An example in NLP, one of the problems we‚Äôll sometimes see on our support forum
    is, let‚Äôs say, they have a resume that they want to parse. And then they say,
    well, I want to have the start date and the end date per job. So I want to have
    an algorithm that can detect the start date. And, you know, you can build an algorithm
    that can detect the start date, that‚Äôs fine. But if you rephrase the problem into,
    let‚Äôs first find all the dates, and then afterwards figure out which one‚Äôs a start
    date and the end date, then the second problem becomes, well, the start date is
    probably first and the end date is probably after that. Oh, the whole problem
    just becomes a whole lot simpler if you just rephrase the problem into a two step
    approach instead of considering it end to end.
  prefs: []
  type: TYPE_NORMAL
- en: And there‚Äôs lots of these opportunities that people forget about. And I, again,
    to come back to calmcode, I fear that partially some of the machine learning textbooks
    are to blame because very few machine learning books actually tell you that you
    can choose to ignore half the data if it makes more sense. You can choose to just
    solve a different problem if that‚Äôs easier to solve. But that‚Äôs not the mode of
    thinking I seem to see, especially with new graduates. Which is bit of a shame.
  prefs: []
  type: TYPE_NORMAL
- en: But with that World Food Program story, I have to trust the person on stage
    who told it to me, but that definitely happens. Like, the World Food Program found
    a way to reduce the cost of transportation by five percent just by rephrasing
    a mathematical problem. And definitely something that happens in real life.
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúIt wasn‚Äôt the algorithm that saved the day, rather the understanding of the
    world. A better algorithm would yield a worse outcome if it is used on the wrong
    problem.‚Äù
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Seth**: Right, yeah. And doing something at that scale any sort of reduction,
    a five percent reduction is massive. My favorite quote from that presentation
    you said, ‚ÄúIt wasn‚Äôt the algorithm that saved the day, rather an understanding
    of the world. A better algorithm would yield a worse outcome if it is used on
    the wrong problem.‚Äù I really liked that one.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Oh, happy to hear it. So, there‚Äôs more anecdotes in that story.
    But if people are interested in this, there is an operations researcher, [Russell]
    Akhoff.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And he wrote this one paper about, the title was [The Future of Operations
    Research is Past,](https://www.tandfonline.com/doi/abs/10.1057/jors.1979.22) which
    he wrote in like the eighties. It basically outlines why operations research algorithms
    can fail. And it‚Äôs reasons related to this anecdote. The reason why I want to
    bring this up is because some of those arguments work for data science too. It‚Äôs
    an article from the eighties, but everyone should read it: The Future of Operations
    Research is Past.'
  prefs: []
  type: TYPE_NORMAL
- en: And I wrote a similar article called [The Future of Data Sciences is Past](https://koaning.io/posts/the-future-is-past/)
    just by repeating a couple of those arguments. But people often forget that the
    algorithm ‚Äî It‚Äôs usually just a cog in the system, and we‚Äôre interested in building
    a better system, not a better cog. So if you‚Äôre building a better cog but doesn‚Äôt
    fit the rest. It‚Äôs not a better cog because you don‚Äôt get a better system.
  prefs: []
  type: TYPE_NORMAL
- en: But people often forget that the algorithm ‚Äî It‚Äôs usually just a cog in the
    system, and we‚Äôre interested in building a better system, not a better cog. So
    if you‚Äôre building a better cog but doesn‚Äôt fit the rest. It‚Äôs not a better cog
    because you don‚Äôt get a better system.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Another thing that Akhoff does very well in his books, he basically explains
    a lot of these systems theories. And one one quote there that I can recommend
    people think more about is maybe instead of making, let‚Äôs say, a better cog. Instead
    of thinking, ‚ÄúHey, maybe there‚Äôs like one part of the system that we can optimize.‚Äù
    Maybe instead try to see if you can make communication between two parts better.
    Because if you think about it from a systems perspective, by doing that, you‚Äôre
    optimizing two things.
  prefs: []
  type: TYPE_NORMAL
- en: And also, you‚Äôre gaining clarity, so that‚Äôs always good. And it‚Äôs definitely
    this sort of let‚Äôs think about a problem by reducing it down to a single number
    and not consider anything else. That‚Äôs usually like a rabbit hole where people
    lose themselves in as well in data science, I think.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. It‚Äôs super interesting because I think that there are are a
    lot of times when people approach problems sometimes they focus on sort of the
    different modules and they have this modular way of thinking about things and
    they go, oh, if I make this one thing the best that it could be, then the whole
    system will be better. And in some cases, it will make a great improvement. But
    other times, it‚Äôs very important to understand the supporting system and how it
    integrates. Reminds me that you have to have good integration tests and you need
    to make sure that everything fits into the system properly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: To give an anecdote here, the former CEO of bol.com wrote this
    in his autobiography. So, bol.com is like the Dutch Amazon. Amazon‚Äôs not that
    big here. Bol.com is basically Amazon, but blue, and Dutch ‚Äî It‚Äôs kind of a thing
    we have here.'
  prefs: []
  type: TYPE_NORMAL
- en: But they hired their first data scientist at some point. And this book has a
    chapter on that ‚Äî What happened when we got our first data scientist? And in the
    book, the first data scientist is portrayed as kind of an arrogant kind of a person.
    Who‚Äôs always complaining that all these humans are not as good as my algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: And then one of the things that he does is he figures out that there‚Äôs an optimal
    time to tweet about new video games that come out on their social channels and
    etcetera. So that‚Äôs like a thing he did. In Holland, we have this thing called
    Remembrance Day. And I believe it‚Äôs seven o‚Äôclock could be eight, but during Remembrance
    Day, we remember the Second World War. And basically, the entire country goes
    for two minutes of silence.
  prefs: []
  type: TYPE_NORMAL
- en: You might have seen some of the photos where people on their bikes delivering
    pizzas would step off the bike, just stand still for two minutes. It‚Äôs a thing
    that people take quite serious. So seven o‚Äôclock on Remembrance Day will be a
    very bad time to tweet about the new Call of Duty shooting game where you can
    shoot a bunch of people. And it will be especially bad if you would tweet that
    you‚Äôre super excited about the prospect of shooting people during Remembrance
    Day. But that‚Äôs exactly what happened because his algorithm determined that seven
    o‚Äôclock was the optimal time to start tweeting about this sort of thing.
  prefs: []
  type: TYPE_NORMAL
- en: And there‚Äôs so many of these stories. Right? And, on their own, on paper, I
    cannot necessarily blame the data scientist for doing his or her work. But this
    is the systems thing. Group one has concern that something might go wrong, group
    two does not.
  prefs: []
  type: TYPE_NORMAL
- en: If you just get them talking to each other, then usually the world‚Äôs a better
    place. That‚Äôs the theme, I would say.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth:** When you get the answer to your problem and you have to ask yourself,
    does this make sense? That‚Äôs sometimes a little step that a lot of people skip
    over, and it‚Äôs extremely important.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: I do want to acknowledge that it‚Äôs also hard, right? I think calling
    .fit and .predict are the easy bits.'
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs all the stuff around that. It‚Äôs way trickier. Especially when you consider
    themes of fairness, all the things that can go wrong, can we really know that
    upfront? I don‚Äôt know if you always can.
  prefs: []
  type: TYPE_NORMAL
- en: To give one shout out though? There is this project. It‚Äôs called [deon](https://deon.drivendata.org/),
    the [Deon checklist](https://deon.drivendata.org/). There is a [calmcode course](https://calmcode.io/deon/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: Deon is a data science checklist. So just a bunch of stuff that has gone wrong
    at different companies where there‚Äôs newspaper articles, like explaining how bad
    the situation became. They just have a checklist of stuff that‚Äôs like ‚Äúhey, check
    for this before you push live because stuff might go wrong.‚Äù And for every item
    on that checklist, they also have two newspaper articles of stuff that happened
    in the past. So you as the data scientists can go up to your boss and say, ‚ÄúI
    want to [minimize] risk because this actually went wrong.‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: And it‚Äôs a really cool project just because they actually did the proper collecting
    of anecdotes, which is a powerful act in this day and age.
  prefs: []
  type: TYPE_NORMAL
- en: Unanswered Questions in Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. A hundred percent. Having a story connected to anything in
    data science is always valuable.'
  prefs: []
  type: TYPE_NORMAL
- en: To zoom out and talk about machine learning in general, what‚Äôs an important
    question that you believe remains unanswered in machine learning?
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Okay. So I was drinking at a PyData Afterparty. And a couple of
    people came up to me, and these were people I would consider relatively senior.
    They knew their stuff and they asked me to predict the future of machine learning.'
  prefs: []
  type: TYPE_NORMAL
- en: And I kind of felt like making a joke because, you know, you‚Äôre at the bar.
    I wasn‚Äôt really inclined to go super into that. As a joke, I figured I would say,
    ‚Äúyou know what I think of the future of data science, people are going to really
    realize just the sheer amount of nonsense that‚Äôs in our field. And we should maybe
    just stop altogether.‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: But I decided to think about it more and I will say, there is some truth in
    that actually. I do kind of worry that maybe a lot of the stuff that we‚Äôre doing
    is more the hype thing instead of, are we sure that we understand the problem?
  prefs: []
  type: TYPE_NORMAL
- en: So what‚Äôs missing in machine learning? Well, maybe we‚Äôre doing too much of it.
    This is kind of a feeling that I have.
  prefs: []
  type: TYPE_NORMAL
- en: And of course, there‚Äôs a place in machine learning in the future. It‚Äôs definitely
    going to happen, but it doesn‚Äôt have to be everything. That‚Äôs kind of more the
    thing that I‚Äôm afraid of.
  prefs: []
  type: TYPE_NORMAL
- en: There‚Äôs an author who writes a book about artificial weirdness. Just like all
    the weird gunk that artificial intelligence can produce.
  prefs: []
  type: TYPE_NORMAL
- en: And the book is called, [You Look Like a Thing and I Love You](https://amzn.to/3pd3t3w)
    by Janelle Shane. Have a read. The book starts by saying I have all of these Tinder
    texts, and I want to have an algorithm figure out the best Tinder text to send.
    And the algorithm came with, ‚Äúyou look like a thing and I love you.‚Äù Which is
    kind of a hilariously brilliant thing, but it‚Äôs not the thing you should send,
    I think, on Tinder.
  prefs: []
  type: TYPE_NORMAL
- en: But the book is full of these examples where you kind of have to be careful
    that artificial stupidity is not happening at the same time as well. Right? There‚Äôs
    plenty of examples where that happens. Like, the Call of Duty thing is just one
    example.
  prefs: []
  type: TYPE_NORMAL
- en: I find myself to be kind of the grumpy old guy who sort of yells at clouds.
    Kind of a, ‚Äúsure, machine learning has a place, but can we do without it first?‚Äù
    First try the simple thing because that‚Äôs something that people seem to forget
    to do. And that‚Äôs a more pressing concern, personally.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: In a similar vein with everything that‚Äôs going on in natural language
    processing right now with generative models and ChatGPT. How do you view the gap
    between the hype and the reality? I‚Äôm excited to get the old grumpy guys perspective
    on this.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: So I am actually professionally toying with this stuff. If you
    have a look, the Explosion repository now [openai/prodigy recipes](https://github.com/explosion/prodigy-openai-recipes).
    That‚Äôs the name of the repository. So we are experimenting a little bit with,
    like, hey, can ChatGPT just say, here‚Äôs a sentence, detect all the dates.'
  prefs: []
  type: TYPE_NORMAL
- en: Just so we can pre-highlight that in our prodigy interface. It‚Äôs something we
    are exploring right now. And it turns out it‚Äôs actually really good at some of
    these examples. And it‚Äôs really bad at others. We don‚Äôt fully understand why yet.
  prefs: []
  type: TYPE_NORMAL
- en: But I will acknowledge that can be quite useful. If that‚Äôs something that you
    can use to get better training data quicker because the annotation is just a lot
    easier just saying yes or no is quicker than sort of highlighting every single
    item in the user interface. That seems totally fine.
  prefs: []
  type: TYPE_NORMAL
- en: What I think is a bit more of a concern though, is that people sort of say,
    ‚Äúoh, it‚Äôs magic. That‚Äôs how this works. It‚Äôs magic.‚Äù It‚Äôs not magic. This is to
    some extent kind of like the [Markov Chain](https://en.wikipedia.org/wiki/Markov_chain#:~:text=A%20Markov%20chain%20or%20Markov,the%20state%20of%20affairs%20now.%22)
    thing where it just predicts the next word. And you can imagine that if you just
    give that enough text and enough compute power, you might be able to have it generate
    very plausible text that you might find on the Internet. Then you can ask questions,
    like, is it generalizing? Or is it just remembering?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ad22c0824cd7a1ec3144f1c402ae257.png)'
  prefs: []
  type: TYPE_IMG
- en: Magic Floating through the air generated by [Stable Diffusion v1‚Äì4](https://huggingface.co/CompVis/stable-diffusion-v1-4?text=magic+floating+through+the+air)
  prefs: []
  type: TYPE_NORMAL
- en: And, those are all fair questions. But it‚Äôs not intelligence just yet. It‚Äôs
    not real reasoning. And I have plenty of silly examples that demonstrate that
    it‚Äôs not actual intelligence that is happening under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: That said again, as long as there‚Äôs a human in the loop and it proves to be
    useful and productive, then I think it‚Äôs fine. But again, that‚Äôs when I‚Äôm wearing
    the lens of, hey, there are professional interests. There are, of course, harmful
    factors that I do think need to be taken into consideration as well. You can definitely
    send more mass emails in bulk and maybe have more Twitter bots and all those things
    that I‚Äôm not particularly fond of.
  prefs: []
  type: TYPE_NORMAL
- en: 'So anyway, that‚Äôs one aspect. Another thing I do also maybe want to highlight
    because I also tried the Midjourney thing. I‚Äôve tried to generate Magic: The Gathering
    cards.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Okay. I‚Äôve seen them and they‚Äôre pretty funny.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: I thought at some point it would be kind of funny to say, hey,
    let‚Äôs make Magic: The Gathering cards of orcs in the office. You would have an
    orc warlord product manager and an orc venture capitalist and an orc TED keynote
    speaker. And immediately, this idea is pretty funny because if you think about
    the office, you kind of think of like a dull gray suit. And if you think of an
    orc, you think of World of Warcraft and like a warmonger, etcetera. So, that was
    pretty funny.'
  prefs: []
  type: TYPE_NORMAL
- en: But then the next question is, can we actually generate the really funny pictures?
    And that turned out to be somewhat hard. So I have this one picture of an orc
    paladin, like, totally covered in iron basically, mesh like, behind the computer.
    And you kind of go, okay, data engineer, kind of okay. That‚Äôs kind of funny already.
  prefs: []
  type: TYPE_NORMAL
- en: But I wanted this orc to be a data analytics engineer because they are talking
    about data lakes. And then I thought the funny thing would be heavy ironclad orc
    but with a little yellow snorkel comes out of the helmet. That would just be the
    funniest thing. And I for the life of me, I could not get it to generate a yellow
    snorkel.
  prefs: []
  type: TYPE_NORMAL
- en: And you start thinking about, why might that be? And then you also think, like,
    well, Vincent, you‚Äôre already kind of stretching it to have these World of Warcraft
    Dungeon and Dragon styles in an office. The fact that those two styles are even
    compatible is already kind of a stretch. Let alone that you also generate some
    sort of weird snorkel from it. Right?
  prefs: []
  type: TYPE_NORMAL
- en: So if people consider these tools like magic, the best advice that I do have
    is try to come up with a kind of an awkward weird task that tries to touch where
    the edges are of where such algorithms are comfortable, and that‚Äôs usually going
    to give you examples that can maybe help you consider that it‚Äôs not really magic
    what‚Äôs happening. There‚Äôs just this; It‚Äôs trying to remember. It‚Äôs trying to sort
    of generate stuff that it‚Äôs seen before. And there‚Äôs plenty of edge case examples
    where this sort of stuff is just ‚Äú[You look like a thing and I love you](https://amzn.to/3WT5wGC).‚Äù
    Read that book. It has really compelling examples and the style of the book is
    lovely too. I highly recommend it.
  prefs: []
  type: TYPE_NORMAL
- en: Generative and Predictive Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Thank you. Yeah. I will check it out. I think generative models are
    super interesting because unlike predictive models where for example you‚Äôre doing
    text categorization, where you can sort of know if it‚Äôs correct or not? There
    usually is a ground truth. With generative models where you‚Äôre doing something
    like you want to create an orc that‚Äôs wearing a snorkel, you know, how do you
    know that it‚Äôs correct?'
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs not so clear cut.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: How many labels of unrelated photos do you need to actually generate
    that? Right? Oh, but also here is why also part of the solution here is obviously,
    user interface as well. There are amazing things you can do having text as an
    input. But in this case, you are also okay. We‚Äôre almost there. I just want to
    select the region around the helmet where a yellow snorkel needs to appear.'
  prefs: []
  type: TYPE_NORMAL
- en: Something like that is going to happen at some point, and that‚Äôs going to make
    these systems better. And then I can move on to enterprise elves and figure out
    some other edge case. Right? And that will kind of be a continuous thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, yeah, in general, because you mentioned ground truth ‚Äî ground truth is
    tricky too. And this is also where a lot of artificial stupidity kind of comes
    from. And my personal gripe with that ‚Äî so consider, image classification, the
    famous cat dog thing: Is this a picture of a dog or is this a picture of a cat?'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b65a7e37412c950d7f64cacd80cca28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Catdog Logo [Wikipedia](https://en.wikipedia.org/wiki/File:CatDog.jpeg)'
  prefs: []
  type: TYPE_NORMAL
- en: Standard classification would say, okay, this is a binary task. But then you
    kind of go, well, we can have photos of no cats or dogs. So, we need three classes?
    Okay. What do you do with photos that have both a cat and a dog? Oh, yeah. Okay.
    That can happen too, right.
  prefs: []
  type: TYPE_NORMAL
- en: Okay. Reality is more complex. And what do we do then?
  prefs: []
  type: TYPE_NORMAL
- en: Well, maybe we have to say, is there a dog in the photo? Yes or no. And is there
    a cat in the photo? Yes or no. Maybe those should just be two binary classifiers.
    Maybe that‚Äôd be more sensible. Okay. What do you do when there‚Äôs four dogs in
    the photo?
  prefs: []
  type: TYPE_NORMAL
- en: Again, the more and more you start thinking about it, you also kind of realize,
    even the well defined text classification doesn‚Äôt always mix well with reality
    either. And even if you have ground truth labels, you kind of have to wonder,
    well, the ground truth labels maybe don‚Äôt mix with reality either it it‚Äôs defined
    as a classification task because a sentence can be about more than one topic and
    the photo can be about more than one thing as well.
  prefs: []
  type: TYPE_NORMAL
- en: So taking a step back and just really wondering, well, some of these things
    can be details as long as we really understand the problem, but maybe we should
    focus on that then. Maybe we should skip hyperparameter tuning and only worry
    about ‚Äî Do we really understand the problem?
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. That‚Äôs a really good point. I think that when you‚Äôre approaching
    a problem, people tend to jump to a solution. If you‚Äôre doing something like text
    classification ‚Äî oh, okay. I‚Äôm going to create a multi-class text classifier.
    Well, it turns out that it is never really quite that simple. Right?'
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs really multi-label. Should I use a hierarchy? Should I do this? Should
    I do that? And, you know, getting a better understanding of the problem always
    helps you figure out more. It‚Äôs so much more valuable than doing hyper parameter
    tuning on that original multi-class text classifier.
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúThe model can do one step, but your system can do two or three if need be.
    So definitely feel free to consider the two-step system where we have a couple
    of classifiers that detect a couple of properties, and then we have a rule-based
    system after that‚Äôs going to say, ‚ÄòOkay, this combination of things that seems
    interesting. Let‚Äôs go for that.‚Äô People forget about the rule-based system that
    can be built on top of. And that‚Äôs, you know, a bit of a miss. But it‚Äôs also,
    like 80% of the time, that‚Äôs also the fix.‚Äù
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Vincent**: Well, so the main thing, I do have a little bit of advice in general.
    I‚Äôm on the Prodigy forum and I help some SpaCy users with their problems. The
    most general advice that I do give people in this domain is to consider that maybe
    the model can do one step, but your system can do two or three if need be. So
    definitely feel free to consider the two step system where you have a couple of
    classifiers that detect a couple of properties, and then we have a rule based
    system after that‚Äôs going to say, ‚Äúoh, okay. This combination of things seems
    interesting. Let‚Äôs go for that.‚Äù'
  prefs: []
  type: TYPE_NORMAL
- en: People forget about the rule-based system that can be built on top of. And that‚Äôs
    a bit of a miss. But it‚Äôs also, like eighty percent of the time, that‚Äôs also the
    fix. So do with this information, what you will, dear audience, but I do think
    that there‚Äôs a two step approach that definitely does work in general.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: I think that‚Äôs really good advice especially right now with all of
    the hype with deep learning. I think we‚Äôre still in a world where finding the
    right combination between machine learning models and heuristics, sometimes pretty
    basic heuristics, often yields the best results.'
  prefs: []
  type: TYPE_NORMAL
- en: Influences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth:** To move into the learning from machine learning portion of our talk.
    We‚Äôll start with this. Who are some people in the machine learning fields that
    influence you?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: I‚Äôve had some really lovely direct colleagues that I still hang
    out with. So, those obviously. Back when I started, I was learning R, so [Hadley
    Wickham](https://hadley.nz/) was a person that I definitely looked up to a lot.
    And I also met him on a couple of occasions, which is super cool. He did an advanced
    course, like, five years ago, and I was a TA. Great great experience, I got to
    meet the guy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Katharine Jarmul](https://www.linkedin.com/in/katharinejarmul/?originalSubdomain=de)
    is a person who also comes to mind. She was one of the kickstarters behind [PyLadies](https://pyladies.com/),
    but she also has been a great advocate for privacy and fairness in machine learning.
    And she has reviewed my slides in the past for a couple of talks and she‚Äôs just
    great. She comes to mind.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Vicki Boykis](https://vickiboykis.com/), I think, is one of the funniest people
    ‚Äî she deserves way more credit for shit posting, she‚Äôs great. The NormConf thing
    was also an amazing thing that she helped kick start there, it was great.'
  prefs: []
  type: TYPE_NORMAL
- en: And then [Bret Victor](http://worrydream.com/), I think, has the best talk I‚Äôve
    ever seen, that I will ever see. [The future of programming](https://www.youtube.com/watch?v=8pTEmbeENF4&ab_channel=JoeyReid)
    by Brett Victor. That‚Äôs a thing I watch every year, basically. That‚Äôs the most
    gobsmack, most inspirational thing I‚Äôve ever seen. I won‚Äôt tell you what the thing
    is about. Just watch it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: I‚Äôm looking forward to it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: And then, I guess, [Russel] Ackoff, but the main thing with Ackoff
    was I did this whole master‚Äôs degree in Operations research and then a professor
    was going to retire and I was one of the speakers at his party. And then at some
    point, he said the reason I wanted you here is because you really remind me of
    Ackoff. I was like ‚Äúwho is he?‚Äù'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúHe‚Äôs this amazing guy. Just buy his book.‚Äù And then you read this stuff. He‚Äôs
    like me in the 80s. So that was definitely also a good source of inspiration.
  prefs: []
  type: TYPE_NORMAL
- en: ‚Ä¶the average Joe is pretty inspirational, but the average Joe doesn‚Äôt think
    that he or she should be on stage.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One thing I do want to mention about this is back when I was organizing a PyData.
    You kind of think, ‚Äúokay, who are good keynote speakers and who are good, invited
    speakers, etcetera.‚Äù And my impression is that the average Joe is pretty inspirational,
    but the average Joe doesn‚Äôt think that he or she should be on stage.
  prefs: []
  type: TYPE_NORMAL
- en: And the best example of this is, at PyData London, there was a normal talk by
    a guy who was building drones to find endangered species of orangutan in the rainforest
    of Borneo.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Wow!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: And he had the small room, but his talk was amazing. So I figured,
    screw this. You‚Äôre the keynote at Amsterdam. This is the most amazing thing I‚Äôve
    ever heard. This is your hobby.'
  prefs: []
  type: TYPE_NORMAL
- en: So he was the keynote speaker the next year. And he was grateful and very good
    fun. But, he didn‚Äôt realize that that was definite keynote material. And similarly,
    I‚Äôve read this blog post once where this guy was trying to figure out which words
    are the most metal.
  prefs: []
  type: TYPE_NORMAL
- en: And the way he did that was by training a huge Markov Chain on metal lyrics
    and non-metal lyrics. And the conclusion of the blog post was that the least metal
    word is cooperation because it only appears in the corpus once. And you read this,
    this is amazing. Because you‚Äôre basically applying the theory correctly on a pretty
    humorously silly problem, maybe.
  prefs: []
  type: TYPE_NORMAL
- en: But there‚Äôs passion here. And the guy, when I did approach him, [I said] you
    really need to apply for PyData. I don‚Äôt have to review your thing, I think you‚Äôre
    going to be in.
  prefs: []
  type: TYPE_NORMAL
- en: And it just hadn‚Äôt occurred to him that this was something he could do. And
    I like to think that there are so many more people who suffer from this, that
    they might have a really grand amazing inspirational moment, but don‚Äôt consider
    that they‚Äôre able to share that. And of course, some people are, properly introverts,
    which is also just fine. But one lesson I have learned at PyData is that the inspiration
    can really come from surprising angles that you don‚Äôt expect. So don‚Äôt focus too
    much on the big names.
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs also the thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. One of the best types of people are very humble and they do
    such a good job with their work and you can tell how much they care about what
    they do and how much, I don‚Äôt know if pride‚Äôs the right word, but they take their
    work very seriously. They care..'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: They care, Yeah. You can be the smartest person, but if you don‚Äôt
    care about your topic it‚Äôs not going to be a great talk.'
  prefs: []
  type: TYPE_NORMAL
- en: And let‚Äôs say that maybe you‚Äôve cut a few corners, but you calculated the optimal
    Pokemon. I don‚Äôt know, something like that. It can still be a great talk.
  prefs: []
  type: TYPE_NORMAL
- en: And again, more people should do it. If people are interested in doing more
    blogs and talks by the way, consider Lightning Talks and very short blog posts
    are called ‚ÄúToday I Learned‚Äù. The world definitely needs more of that. And I‚Äôm
    happy to see PyAmsterdam, the meetup, once a year, they do the lightning talk
    meetup, where ten people give five minute presentations.
  prefs: []
  type: TYPE_NORMAL
- en: Those meetups tend to be amazing. Any PyData organizers listening, feel free
    to steal this idea. Those meetups are always fun.
  prefs: []
  type: TYPE_NORMAL
- en: Career Advice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Very cool. So you‚Äôve you‚Äôve given a lot of advice so far, but I want
    to ask, what‚Äôs one piece of advice or something that‚Äôs stuck out that you‚Äôve received
    that‚Äôs helped you in your machine learning or career journey.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: I got this very early on in my career. My former CTO that I still
    hang out with gave me pretty good career advice when I was twenty three. And he
    said, ‚ÄúBe careful of getting a raise. Because if your job starts earning a lot
    of money, but it‚Äôs kind of getting boring, then the money might be a reason that
    you‚Äôre going to stick around.‚Äù'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://youtube.com/shorts/i1QEuc8ioDs?si=BWrpO4FVfYUI_r6q&source=post_page-----e07951a07cf4--------------------------------)
    [## Be careful of getting a raise early in your career'
  prefs: []
  type: TYPE_NORMAL
- en: Because if your job starts earning a lot of money, but it‚Äôs kind of getting
    boring, then the money might be a reason that you‚Äôre going to stick around.‚Äù](https://youtube.com/shorts/i1QEuc8ioDs?si=BWrpO4FVfYUI_r6q&source=post_page-----e07951a07cf4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: And that‚Äôs a dangerous thing early in your career because maybe you have to
    figure out what you like in life. And maybe you have to figure out what makes
    you tick. And if you‚Äôre going to hyper focus on the money, it‚Äôs kind of like hyper
    focusing on the metric. You‚Äôre going to over optimize for something that might
    not matter as much. So that was pretty cool advice, kind of on the meta side.
    But I do think in general, I have been able to apply that quite well.
  prefs: []
  type: TYPE_NORMAL
- en: Again, privileged speaking here. Right? But, I have been able to apply that.
    So that‚Äôs been cool.
  prefs: []
  type: TYPE_NORMAL
- en: Kind of a weird anecdote, but it‚Äôs surprisingly inspirational as well. So I
    have a lot of friends who do nothing in data science. And I love that. I‚Äôm nerdy
    Vincent, and when I drink beer with them, they say, stop being nerdy Vincent,
    you‚Äôre amongst normal people, you can just talk about life now.
  prefs: []
  type: TYPE_NORMAL
- en: And I live in a neighborhood where you know all of your neighbors, basically.
    And it‚Äôs sort of still kind of a middle class neighborhood ‚Äî it‚Äôs changing because
    of gentrification, but, we all know each other. So there‚Äôs a guy on my street.
    And he‚Äôs a painter. And when it‚Äôs nice weather, he puts a crate of beer on his
    bench outside of his house.
  prefs: []
  type: TYPE_NORMAL
- en: And the whole street just goes for a pint, basically. It‚Äôs the cutest thing.
    Cutest neighborhood ever. But the thing with him is he recently became an independent
    contractor as a painter, which also meant that he bought his first laptop ever.
    And he‚Äôs forty two.
  prefs: []
  type: TYPE_NORMAL
- en: And, he needs help, not just with his website, but, like, getting word started.
    His entire life, the main computer that he had was his phone, and he has been
    fine, but he finds a computer terribly, terribly complex. And to be honest, I
    find that just such a refreshing thing. And to also be reminded of the fact that
    the way that I experience computers doesn‚Äôt necessarily have to be normal. That‚Äôs
    a very useful reminder. So, it‚Äôs the best inspiration in a sense.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe don‚Äôt be in machine learning all the time. It is my advice. Especially
    if you‚Äôre making machine learning for apps that the average person uses. It really
    helps to remember that they really don‚Äôt care about your algorithm. They just
    don‚Äôt. They really, really don‚Äôt.
  prefs: []
  type: TYPE_NORMAL
- en: I have found myself to be stuck in a machine learning bubble at times. And I
    just find it very refreshing to [step outside].
  prefs: []
  type: TYPE_NORMAL
- en: I used to do this at consultancy gigs as well. I was making an app that the
    truckers would have to use for logistics and stuff. And at some point, I would
    just hang out at the smoker‚Äôs corner where all the truckers would hang to sort
    of understand what kind of people they were. And also just to understand what
    they found frustrating about the app and doing more of that really. Being more
    of a human in the loop.
  prefs: []
  type: TYPE_NORMAL
- en: Focus on the human thing is what I‚Äôm trying to do more of and what I find very
    inspirational.
  prefs: []
  type: TYPE_NORMAL
- en: Advice for New Data Scientists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. I really like that. For somebody who is just starting out in
    the field, let‚Äôs say, that they just got hired as a junior data scientist, or
    they‚Äôre thinking about starting in data science, what would your advice be to
    them?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Okay. So step one, I gave a talk on this topic at NormConf. So
    there‚Äôs a talk titled [Group-by statements that save the day](https://www.youtube.com/watch?v=S7vhi6RjBZA&ab_channel=NormConf).
    This talk is precisely designed for you.'
  prefs: []
  type: TYPE_NORMAL
- en: Having said that I‚Äôm a really bad person to give career advice because I looking
    back, I just thought that a large chunk of where I am today is due to luck and
    that‚Äôs something that‚Äôs kind of hard to optimize for.
  prefs: []
  type: TYPE_NORMAL
- en: What I do think is useful, in general is maybe to have your own blog where you
    just share things that you learned today. So just like calmcode is still kind
    of my snippets library in a way. Your blog can be the same for you. And in general,
    I have found that for these ‚Äútoday I learned‚Äù snippets ‚Äî If you‚Äôre able to write
    two a month, and it take maybe half an hour per post instead of a big blog post
    that takes hours, this thing shouldn‚Äôt take more than like tens of minutes, let‚Äôs
    say. But you did it for a year and you‚Äôve got a blog with 24 posts.
  prefs: []
  type: TYPE_NORMAL
- en: If you‚Äôre learning and you‚Äôre able to share knowledge then people are going
    to acknowledge that you do have a bit of a resume there that demonstrates that
    you‚Äôre learning stuff. So that seems like a pretty easy thing to do if you want
    to get something of an online presence with low effort. That‚Äôs something I recommend.
  prefs: []
  type: TYPE_NORMAL
- en: I do think if you are a super junior just getting started, I do want to acknowledge
    it‚Äôs kind of hard. It‚Äôs a bit of a shame now the [state of the] hiring market
    and all that. But one thing that you can do to make it maybe slightly easier for
    yourself is to consider that you don‚Äôt have to know everything in order to get
    the job.
  prefs: []
  type: TYPE_NORMAL
- en: You might also be able to get a related job. Some advice that I have given to
    friends of mine who wanted to get into this data science field is it‚Äôs a little
    bit easier maybe to learn R than it is to learn Python, and it‚Äôs maybe a little
    bit easier to just be an analyst for a year or two.
  prefs: []
  type: TYPE_NORMAL
- en: And all the skills you learn while being an analyst are going to be super useful
    if you want to become a data science person later. So if it‚Äôs easier and you get
    paid to learn, **don‚Äôt optimize for a title**. Just optimize for the stuff that
    you learn while on the job. That seems easier. And there‚Äôs nothing wrong with
    being a good analyst.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe we need more good analysts than we do good data scientists as well. Right?
    Maybe we need more group by statements that saved the day. Hint, watch the talk.
  prefs: []
  type: TYPE_NORMAL
- en: But I do think there‚Äôs a little bit of snobbery when it comes to job titles.
    ‚ÄúLike, oh, I‚Äôm the super senior staff, mega engineer. Like, sure.‚Äù But if you‚Äôre
    just a really decent analyst, we need more very decent analysts. That‚Äôs also fine.
    Go for that.
  prefs: []
  type: TYPE_NORMAL
- en: Learning from Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seth**: Yeah. That‚Äôs definitely good advice. And now the question that we‚Äôve
    all been waiting for, what has a career in machine learning taught you about life?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Some problems solve themselves when you ignore them. Seriously,
    I‚Äôve been in so many of these situations where the problem got solved by just
    ignoring the machine learning bit, that you kind of start to wonder, well, maybe
    some problems do solve themselves if you ignore them.'
  prefs: []
  type: TYPE_NORMAL
- en: And I have noticed in a few instances, this is just kind of the case. Especially
    when you have a child, you do kind of learn that there‚Äôs some stuff that you can
    over optimize for as well. And, like, oh, the baby‚Äôs not sleeping well. Well,
    that problem will sort itself out at some point. It‚Äôs not like influence from
    my end is going to make a very significant impact there.
  prefs: []
  type: TYPE_NORMAL
- en: And I guess the same thing with machine learning. **There‚Äôs some stuff that
    you can control, some stuff that you can‚Äôt. Just make sure that you understand
    what you can and can not control and then move on from there.**
  prefs: []
  type: TYPE_NORMAL
- en: And again, I‚Äôm kind of a mixed bag when it comes to the whole machine learning
    thing. Part of my opinion is it‚Äôs a super useful tool and we need more good people
    doing machine learning. But at the same time, it‚Äôs like a gross bucket of hype
    that we really want to have less of. And my day to day is to sort of deal with
    both of these feelings.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this answered the question in some way, but that that‚Äôs kind of where
    I‚Äôm at. Try to do it calmly, that‚Äôs my final pun. That‚Äôs also something I might
    recommend.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: There you go. Yeah. I think that some problems over time do resolve
    themselves. And also I like the first rule of machine learning is do you really
    need to use machine learning?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Yeah. I agree. And one thing I really do maybe to brag about the
    employer a bit.'
  prefs: []
  type: TYPE_NORMAL
- en: One thing I really like about SpaCy is you don‚Äôt have to use the machine learning
    bits. You can also just use the non-machine learning bits in SpaCy. And they are
    also performant, fast and super useful. There are also machine learning packages
    that allow you to do some rule-based stuff. And if you‚Äôre doing NLP, this is really
    why I love using SpaCy.
  prefs: []
  type: TYPE_NORMAL
- en: You don‚Äôt have to use statistical stuff all the time. The rule based engines
    are great too. End of pitch.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: I‚Äôve been a huge fan of SpaCy for a while now ‚Äî at least four years,
    probably more. It‚Äôs helped me solve lots of problems from named entity recognition,
    text classification, cool ways of doing matching, all of that.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: Well, so if I can give one final pitch. So there‚Äôs a lot of talk
    about data-centric AI these days. But the reason why I started getting interested
    in what these Explosion people were doing back in the day is there‚Äôs a blog post
    from 2017 called [Supervised Learning is great ‚Äî It‚Äôs data collection that‚Äôs broken](https://explosion.ai/blog/supervised-learning-data-collection).
    They were doing data-centric stuff in 2017, but that‚Äôs one of the best blog posts
    I‚Äôve ever read.'
  prefs: []
  type: TYPE_NORMAL
- en: So they talk about data quality and one of the best quotes ever is don‚Äôt expect
    great data if you‚Äôre boring the shit out of underpaid people because mechanical
    turk is still like the way people go sometimes, read that blog post. I will give
    you a link for the show notes. That‚Äôs also like a highly inspirational thing people
    should read.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Awesome. Thank you so much. It has been such a pleasure to talk with
    you. You‚Äôve given me tons of great resources. Putting together the show notes
    for this one is definitely going to be a good time. If there are some places that
    you would want listeners to learn more about you, what would those places be?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent**: So I‚Äôm on [Twitter](https://twitter.com/fishnets88?s=20) and Fosstodon
    these days. But the main thing is I can‚Äôt announce anything just yet. It‚Äôs that
    I work at Explosion and I can see the stuff that‚Äôs in the pipeline. So I‚Äôm working
    on very cool stuff and there‚Äôs definitely going to be announcements of super cool
    stuff all my other colleagues are working on ‚Äî just follow Explosion.'
  prefs: []
  type: TYPE_NORMAL
- en: There‚Äôs a bunch of really cool stuff in the pipeline. And if you do that, then
    you also at some point, will hear about some of the stuff that I‚Äôm working on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seth**: Awesome. Thank you so much, Vincent. It has truly been a pleasure.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vincent:** Likewise.'
  prefs: []
  type: TYPE_NORMAL
- en: Listen Now
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [video](https://youtu.be/yvgxRzqx1Jg) of the full interview can be seen
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Vincent Warmerdam | Learning from Machine Learning Episode 2
  prefs: []
  type: TYPE_NORMAL
- en: 'The podcast is now available on all [podcast platforms](https://rss.com/podcasts/learning-from-machine-learning/804379/):'
  prefs: []
  type: TYPE_NORMAL
- en: Our previous episode featured [Maarten Grootendorst](https://www.maartengrootendorst.com/),
    the creator of [BERTopic](https://maartengr.github.io/BERTopic/) and [KeyBERT](https://maartengr.github.io/KeyBERT/),
    and a [prolific author here on Towards Data Science](https://medium.com/@maartengrootendorst).
    He discussed Open Source projects, the intersection of psychology with machine
    learning and software development, and the future of Natural Language Processing.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/learning-from-machine-learning-maarten-grootendorst-bertopic-data-science-psychology-9ed9b9b2921?source=post_page-----e07951a07cf4--------------------------------)
    [## Learning from Machine Learning | Maarten Grootendorst: BERTopic, Data Science,
    Psychology'
  prefs: []
  type: TYPE_NORMAL
- en: The first installment of Learning from Machine Learning features the creator
    of BERTopic Maarten Grootendorst.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/learning-from-machine-learning-maarten-grootendorst-bertopic-data-science-psychology-9ed9b9b2921?source=post_page-----e07951a07cf4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Resources to learn more about Vincent Warmerdam:'
  prefs: []
  type: TYPE_NORMAL
- en: '[calmcode](https://calmcode.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://koaning.io/](https://koaning.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vincent Warmerdam: The profession of solving (the wrong problem) | PyData
    Amsterdam 2019](https://www.youtube.com/watch?v=kYMfE9u-lMo&ab_channel=PyData)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Group-by statements that save the day ‚Äî Vincent D Warmerdam](https://www.youtube.com/watch?v=S7vhi6RjBZA&t=0s&ab_channel=NormConf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/koaning](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbThEWVk0N1AzQ1diZm1QVjAyRllGbTVfRUZFd3xBQ3Jtc0tsbE1scFl4QUg2MVgwNE1PMlBXMVZObmxlcUlBN0psSWNaQkd0TUZrZ280b3JEQzhneExRMlFwOE5QSDYxZ3M3R0JhVUQxdGRTRFZGNy1US1g2X1J0RTJKdjNwT3R3V0YzU3RUVmJ1aFdBV1RBLWJUNA&q=https%3A%2F%2Fgithub.com%2Fkoaning&v=yvgxRzqx1Jg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References from the Episode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[You Look Like a Thing and I Love You: How Artificial Intelligence Works and
    Why It‚Äôs Making the World a Weirder Place](https://amzn.to/3HPXHLH)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Future of Operational Research is Past](https://ackoffcenter.blogs.com/files/the-future-of-operational-research-is-past.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Supervised Learning is great ‚Äî it‚Äôs data collection that‚Äôs broken](https://explosion.ai/blog/supervised-learning-data-collection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deon ‚Äî An ethics checklist for data scientists](https://deon.drivendata.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hadley Wickham](https://hadley.nz/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Katharine Jarmul](https://www.linkedin.com/in/katharinejarmul/?originalSubdomain=de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vicki Boykis](https://vickiboykis.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Brett Victor](https://www.youtube.com/watch?v=8pTEmbeENF4&t=0s&ab_channel=JoeyReid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resources to learn more about Learning from Machine Learning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Subscribe on Youtube](https://www.youtube.com/channel/UCGwSWuvSRzop4ZVG2z9NmnQ)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning from Machine Learning on LinkedIn](https://www.linkedin.com/company/learning-from-machine-learning/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reach out to [me on LinkedIn](https://www.linkedin.com/in/sethplevine/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Follow me on Medium](https://medium.com/@levine.seth.p)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
