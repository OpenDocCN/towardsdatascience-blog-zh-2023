["```py\n>>> import sympy\n>>> sympy.factorint(10)\n{2: 1, 5: 1}\n>>> 2**1 * 5**1\n10\n>>> sympy.factorint(1000)\n{2: 3, 5: 3}\n>>> 2**3 * 5**3\n1000\n>>> sympy.factorint(55557)\n{3: 2, 6173: 1}\n>>> 3**2 * 6173**1\n55557\n>>>\n```", "```py\n#!/usr/bin/env python\nimport sympy\n\nrsa_260 = 22112825529529666435281085255026230927612089502470015394413748319128822941402001986512729726569746599085900330031400051170742204560859276357953757185954298838958709229238491006703034124620545784566413664540684214361293017694020846391065875914794251435144458199\n\nprint(\"Start factoring...\")\nfactors = sympy.factorint(rsa_260)\n\n# Will probably not be reached\nprint(factors)\n```", "```py\n# Encrypt\ngpg --output encrypted.gpg --symmetric --cipher-algo AES256 plain.txt\n\n# Decrypt\ngpg --output decrypted.txt --decrypt encrypted.gpg\n```", "```py\ngpg-connect-agent reloadagent /bye\n```", "```py\n#!/usr/bin/env python\nimport subprocess\nimport getpass\n\n# Read passphrase\npassphrase = getpass.getpass(\"Passphrase:\")\npassphrase2 = getpass.getpass(\"Passphrase:\")\n\nif passphrase != passphrase2:\n  raise ValueError(\"Passphrases not identical!\")\n\n# Perform encryption\nprint(\"Encrypting...\")\n\nargs = [\n  \"gpg\",\n  \"--batch\",\n  \"--passphrase-fd\", \"0\",\n  \"--output\", \"encrypted.gpg\",\n  \"--symmetric\",\n  \"--yes\",\n  \"--cipher-algo\", \"AES256\",\n  \"plain.txt\",\n]\n\nresult = subprocess.run(\n  args, input=passphrase.encode(),\n  capture_output=True)\n\nif result.returncode != 0:\n  raise ValueError(result.stderr)\n```", "```py\ngit clone https://github.com/pq-crystals/kyber.git\ncd kyber/ref && make\n```", "```py\n#include <stddef.h>\n#include <stdio.h>\n#include <string.h>\n#include \"kem.h\"\n#include \"randombytes.h\"\n\nvoid round_trip(void) {\n    uint8_t pk[CRYPTO_PUBLICKEYBYTES];\n    uint8_t sk[CRYPTO_SECRETKEYBYTES];\n    uint8_t ct[CRYPTO_CIPHERTEXTBYTES];\n    uint8_t key_a[CRYPTO_BYTES];\n    uint8_t key_b[CRYPTO_BYTES];\n\n    //Alice generates a public key\n    crypto_kem_keypair(pk, sk);\n    print_key(\"Alice' public key\", pk);\n\n    //Bob derives a secret key and creates a response\n    crypto_kem_enc(ct, key_b, pk);\n    print_key(\"Bob's shared key\", key_b);\n    print_key(\"Bob's response key\", ct);\n\n    //Alice uses Bobs response to get her shared key\n    crypto_kem_dec(key_a, ct, sk);\n    print_key(\"Alice' shared key\", key_a);\n}\n```", "```py\nAlice' public key: F0476B9B5867DD226588..\nBob's shared key: ADC41F30B665B1487A51..\nBob's response key: 9329C7951AF80028F42E..\nAlice' shared key: ADC41F30B665B1487A51..\n```", "```py\n#!/usr/bin/env python\nimport os\nimport ctypes\n\n# Load shared library\nlibname = f\"{os.getcwd()}/execute_round_trip1024.so\"\nclib = ctypes.CDLL(libname, mode=1)\nprint(\"Shared lib loaded successfully:\")\nprint(clib)\n\n# Call round trip function\nprint(\"Executing round trip:\")\nclib.round_trip()\n```"]