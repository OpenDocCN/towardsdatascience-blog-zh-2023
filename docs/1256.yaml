- en: How to Write a Custom Function to Generate Multiple Plots in R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd?source=collection_archive---------2-----------------------#2023-04-11](https://towardsdatascience.com/how-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd?source=collection_archive---------2-----------------------#2023-04-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An easy introduction to writing custom functions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)[![Vivian
    Peng](../Images/867b8bbfe22ae0881776fef31108fe89.png)](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)
    [Vivian Peng](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffd5a22d4fcc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&user=Vivian+Peng&userId=fd5a22d4fcc&source=post_page-fd5a22d4fcc----7ad24637e0dd---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)
    ·9 min read·Apr 11, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7ad24637e0dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&user=Vivian+Peng&userId=fd5a22d4fcc&source=-----7ad24637e0dd---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7ad24637e0dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&source=-----7ad24637e0dd---------------------bookmark_footer-----------)![](../Images/a796c3be75f979deddaa04aa1bd47593.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: A visual of a pair of hands typing on a laptop with code on the screen. Image
    by Author
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: I always felt intimidated to write functions in R, since I was so comfortable
    using out-of-the box solutions that come with [tidyverse](https://www.tidyverse.org/).
    When I started coding in Python, I found myself writing more and more custom functions
    to replicate my favorite `dplyr` functions from R into Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to write functions in Python has made me a better programmer in
    R, too. It’s helped me automate my work and ensure reproducibility. The most common
    use case I have for custom functions is to generate multiple plots in R.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Reasons to write custom functions to generate plots in R:'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**1\. Automate reporting:** Sometimes you have to build a report with the same
    type of visual (like a bar chart) for different variables. For example, I formerly
    worked for the Mayor of Los Angeles, Eric Garcetti, during the height of the pandemic.
    Our data team was tasked with producing reports for his daily Covid press briefings
    that covered daily case, death, hospitalization, testing, and vaccination rates.
    We had the same chart format–bar chart– for each of these variables. Instead of
    repeating the graph code each time for a different variable, we automated the
    reporting process by writing a custom function to loop through the variables and
    produce the charts. This way, we just had to pull in the data each day and run
    the script of code to generate new graphs.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Stepping stone to building a dashboard:** Once you have automated the
    reporting process, it’s a natural progression to turn your report into a dashboard
    for an interactive experience. R has a great dashboard library, [Shiny](https://shiny.rstudio.com/),
    that makes it easy to build a web application directly in R language. When you
    already have a custom function for generating plots, you can easily use the same
    function in your dashboard code to allow for users to select the variable of interest.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Create a DIY facet wrap for** [**Plotly**](https://plotly.com/)**:**
    One of my favorite features of `[ggplot2](https://ggplot2.tidyverse.org/)` is
    using `facet_wrap,` where you can generate multiple subplots in one view. It’s
    a simple line of code in `ggplot2`. Unfortunately, there’s nothing like this for
    Plotly yet so I had to recreate it with a custom function.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: I acknowledge that we can now use `ggplotly()`to create an interactive version
    of `ggplot2` graph with `facet_wrap`. But I personally have found poor performance
    issues using `ggplotly()`, and choose to custom build everything directly in Plotly
    instead.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a breakdown of the logic for creating a custom function:'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Start with creating one visual first
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Understand which variable you want to use to create multiple plots
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the graphing code into a function
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Loop through your unique values to generate multiple plots
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s work with the adorable [Palmer Penguins dataset from Allison Horst](https://allisonhorst.github.io/palmerpenguins/).
    This dataset has three unique species of penguins — Chinstrap, Gentoo, Adelie:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab73693b37cdb30493b10c814d498777.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Artwork by [@allison_horst](https://allisonhorst.github.io/palmerpenguins/articles/art.html)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how to load the data
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 1\. Start with creating one visual first
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s create a bar plot for the Adelie species to see their median body mass
    for each year.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/be94cb0811c8e75e96430be2d33d5646.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: A bar chart of the median body mass for Adelie Penguins for the years 2007,
    2008, and 2009.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Understand which variable you want to use to create multiple plots
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*aka: what’s your `facet_wrap` variable?*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the view of our `summary` table. We want to create the same bar graph
    for each species. In this example, our variable of interest is the `species` variable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d0722fb6735d2e9cc53b58f415bed6f.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: A view of our summary table that displays the median body mass for each penguin
    species — Adelie, Chinstrap, and Gentoo — for the years 2007, 2008, and 2009.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Change the graphing code into a function
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identify the components in your graphing code that need to be generalized.
    Now, we will swap out any instance of the species name `Adelie` with a generalized
    variable:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f07fe4415ff8e1689c36a3362720ef3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Description of our Plotly code that shows which variables we will want to generalize.
    In this example, we want to swap out any instance of the species name “Adelie”
    with a generalized variable so we can create the plot for each new species.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Transform the graphing code into a function. This function takes in one variable
    `species_name` which will be entered as string text. See how instead of the name
    `Adelie` here, we have replaced with the variable `species_name`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s an example of how to run the function to generate your new plot. Let’s
    make the same bar chart for the species `Chinstrap`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/a77fbd98eab37699a6d2126f4892d8f8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: A bar chart of the median body mass for Chinstrap Penguins for the years 2007,
    2008, and 2009\. This was generated by the custom function we created in the post.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Loop through your unique values to generate multiple plots
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From here, you need a list of all the unique species to loop through for your
    function. We get that with `unique(summary$species)`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Start with creating an empty list to store all your plots
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Loop through the unique species variable to generate a plot for each species.
    Then, add it to the `plot_list`
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now visualize all the plots in one grid with the `subplot` function in Plotly:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/8fb15638ec571d9b222deeb7b7724304.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Three bar charts of the median body mass for Adelie, Chinstrap, and Gentoo Penguins
    for the years 2007, 2008, and 2009\. This was generated by looping through each
    unique species in our dataset for our custom graphing function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: We did it!
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I know that’s a lot more work than using the `facet_wrap` function in `ggplot2`,
    but understanding how to create functions helps with automating reports and creating
    more dynamic dashboards and visuals!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Bonus Step! Adding Annotations to Get a Title for Each Plot
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get the titles on each of the subplot in the last visual, you have to use
    [annotations in Plotly](https://plotly.com/r/text-and-annotations/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is kind of a messy, trial-and-error process, because you have to hard
    code in the positions. Here’s a breakdown for how to do so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a list of annotations for each subplot title:** The annotations will
    be a list of lists. Each element is a list that includes all the information for
    each subplot. In our example, I want one title that displays the species name
    for each subplot, so I will have a list with 3 elements. Here’s what goes into
    each element:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/4a63ee02469225780840568581b40823.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Description of our annotations code that shows what the ‘x’ , ‘y’, and ‘text’
    variables correspond to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '`x`: This is a value between 0 and 1 and corresponds to the position for the
    entire graphic, with 0 at the left end and 1 at the right end.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: This is a value between 0 and 1 and corresponds to the position for the
    entire graphic, with 0 at the bottom and 1 at the top.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text:` This is the text you want to display for each of the subplot titles.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xref` and `yref`: You have options to select ‘paper’ which means the position
    refers to the distance from the left of the plotting area in normalized coordinates
    where “0” (“1”) corresponds to the left (right). Alternatively, you can select
    ‘domain’ that will correspond to the domain for each individual subplot.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xanchor`: Sets the text box’s horizontal position anchor. This anchor binds
    the `x` position to the “left”, “center” or “right” side of the annotation. Imagine
    where your point is based on your x and y coordinates, and how you want the text
    to align relative to the position.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/6ec807a1709f8cad8959de33c0c0eff8.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: Description on xanchor alignment for Plotly layout.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`yanchor`: Sets the text box’s vertical position anchor. This anchor binds
    the `y` position to the “top”, “middle” or “bottom” of the annotation. Imagine
    where your point is based on your x and y coordinates, and how you want the text
    to align relative to the position.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/eb8af2b52172494cf5d321c3ecd22e1c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Description on yanchor alignment for Plotly layout.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '`showarrow`: Plotly can draw an arrow that points to the location of your annotation
    using TRUE or FALSE options . This is helpful if you want to label a specific
    point on a scatter plot. Since we are just adding text labels onto each subplot,
    the arrow is unnecessary in this example.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2\. Add the layout option to your subplot code:** You can add layout options
    with the `layout()` function.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here are some options you can specify:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`annotations`: The list of annotations you created that include all the information
    for the text and position of each label'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This is the text for the title of the entire grid'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xaxis`, `xaxis2`, `xaxis3`: In Plotly, each subplot has its own x axis properties.
    `xaxis` refers to the first subplot. In this example, the one for the Adelie penguin
    species. The remaining x axes can be referenced by numbering each one. Here I
    am specifying the label for the tick values so that we have standardized years.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While this is a simple example, I hope this helps open up more possibilities
    for improving your data science workflow by using custom functions! You can take
    the steps we took here and generalize it to writing custom functions overall by:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个简单的例子，但我希望这能帮助你通过使用自定义函数来开启更多改进数据科学工作流的可能性！你可以将我们在这里所采取的步骤推广到总体编写自定义函数的方法中：
- en: Starting with a simplified example
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从简化的示例开始
- en: Swapping out your variable into a generalized variable
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的变量替换为一个通用变量
- en: Applying the function to the rest of your data
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该函数应用到其余的数据上
- en: Once you have the basics down, you can expand on this to ensure reproducibility
    of your work through automated reports, dashboards, and interactive visuals. Having
    this foundation also helps you become more proficient in both languages — R and
    Python — because you can reconstruct what works in one language into the other.
    In a world where R and Python are becoming increasingly more interchangeable,
    this offers possibilities that are not limited to a specific language!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦掌握了基础，你可以扩展这一点，通过自动报告、仪表板和交互式可视化来确保工作的可重复性。拥有这个基础也有助于你在两种语言——R 和 Python——中变得更加熟练，因为你可以将某一语言中的有效方法转化到另一种语言中。在
    R 和 Python 越来越可互换的世界里，这提供了不局限于特定语言的可能性！
- en: All images unless otherwise noted are by the author.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则所有图片均由作者提供。
