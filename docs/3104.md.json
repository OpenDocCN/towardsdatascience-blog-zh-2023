["```py\n# prior prob. estimates sampling from uniform\nsample_size = 10000\np_a = np.random.dirichlet(np.ones(5), size=sample_size)\np_b = np.random.dirichlet(np.ones(5), size=sample_size)\n\n# prior ratings' means based on sampled probs\nratings_support = np.array([1, 2, 3, 4, 5])\nprior_reviews_mean_a = np.dot(p_a, ratings_support)\nprior_reviews_mean_b = np.dot(p_b, ratings_support)\n```", "```py\n# observed data\nreviews_a = np.array([0, 0, 0, 0, 10])\nreviews_b= np.array([21, 5, 10, 79, 85])\n\n# posterior estimates of ratings probabilities based on observed\nsample_size = 10000\np_a = np.random.dirichlet(reviews_a+1, size=sample_size)\np_b = np.random.dirichlet(reviews_b+1, size=sample_size)\n\n# calculate posterior ratings' means\nposterior_reviews_mean_a = np.dot(p_a, ratings_support)\nposterior_reviews_mean_b = np.dot(p_b, ratings_support)\n```", "```py\n# P(E(A)-E(B)>0)\nposterior_rating_diff = posterior_reviews_mean_a-posterior_reviews_mean_b\np_posterior_better = sum(posterior_rating_diff>0)/len(posterior_rating_diff)\n```"]