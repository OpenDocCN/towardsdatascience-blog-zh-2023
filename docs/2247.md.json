["```py\n###############################################\n# Interview WITHOUT technical problem framing #\n# as part of the assessment.                  #\n###############################################\n\n# We have provided you with a dataset\n# consisting of patient health information\n# related to cardiac arrest (heart-attacks).\n# Each record represents a patient that\n# visited the Emergency Room (ER) because they\n# were experiencing chest pains. Each column\n# corresponds to a measurement that was taken\n# at the time they arrived at the ER, including\n# the type of chest pain they were\n# experiencing. The dataset also contains a\n# binary column that indicates whether or not\n# the patient ended up having a heart-attack\n# within 48 hours of their ER visit.\n\nimport pandas as pd\n\ndf = pd.read_csv(f\"{filepath}/heart.csv\")\ndisplay(df.head(5)\n\n# Your task is to construct a model that\n# predicts whether a candidate will have a\n# heart-attack based on the provided inputs.\n\ndef predict_heart_attack(row):\n  \"\"\"\n  Accepts one row of heart-attack dataset.\n  Returns 0 or 1 as the prediction.\n  \"\"\"\n  # TODO\n  pass\n```", "```py\n###############################################\n# Interview WITH technical problem framing as #\n# part of the assessment.                     #\n###############################################\n\n# An Emergency Room (ER) is receiving an\n# overwhelming number of patients experiencing\n# chest pains, which are a symptom of heart\n# attacks. Patients who are showing other\n# symptoms of heart attacks should be\n# prioritized (fast-tracked) upon entering the\n# ER waiting room in order to mitigate the\n# effects of the heart-attack, or avoid it\n# altogether.\n#\n# On average, the ER is equipped to fast-track\n# 20% of patients who are experiencing chest\n# pain, allowing them to skip the patient\n# queue. Currently, the ER's policy is to\n# fast-track any patients who are\n# experiencing Type 2 chest pain (atypical\n# angina). This corresponds to a value of\n# `df['cp'] == 1` in the dataset. The ER staff\n# thinks that their existing policy is\n# suboptimal, and is requesting that you\n# perform an analysis on this patient data in\n# order to develop a policy that better\n# prioritizes high-risk patients.\n# \n# We have provided you with a dataset\n# consisting of patient health information\n# related to heart-attacks. Each record\n# represents a patient that visited the ER\n# because they were experiencing chest pains.\n# Each column corresponds to a measurement that\n# was taken at the time they arrived at the ER,\n# including the type of chest pain they were\n# experiencing. The dataset also contains a\n# binary column that indicates whether or not\n# the patient ended up having a heart-attack\n# within 48 hours of their ER visit.\n\nimport pandas as pd\n\ndf = pd.read_csv(f\"{filepath}/heart.csv\")\ndisplay(df.head(5)\n\n# Your task is to use the dataset to construct\n# a fast-track policy that is better than the\n# ER's current policy.\n\ndef fast_track(row):\n  \"\"\"\n  Accepts one row of heart-attack dataset.\n  Returns 0 or 1 as the decision to\n  fast-track.\n  \"\"\"\n  # TODO\n  pass\n```", "```py\n.20 * len(df)  # Outputs 60.6\n```", "```py\n# The ER baseline policiy is to fast-track\n# any patient with Type 2 chest pain,\n# which corresponds to\n# `df['cp'] == 1`. So the ER baseline\n# strategy is to return 1 when\n# df['cp'] == 1, and 0 otherwise.\n(\n  df.groupby(['cp'])[['had_heart_attack']]\n  .agg(['mean', 'count'])\n)\n```", "```py\n.82 * 50  # outputs 41\n```", "```py\ndef fast_track(row):\n  \"\"\"\n  A very simple solution that still beats the\n  baseline.\n  \"\"\"\n  # \"cp\" is the column for chest pain.\n  if row['cp'] == 2 and row['sex'] == 0:\n    return 1\n  elif row['cp'] == 1 and row['sex'] == 0:\n    return 1\n  else:\n    return 0\n\n# Check the performance\ndf['pred'] = df.apply(\n  lambda row: fast_track(row),\n  axis=1)\ntop_k_preds = df.sort_values('pred').tail(61)\nrecall_at_k = len(\n  top_k_preds\n  .query('had_heart_attack == 1')\n  .query(pred == 1))\nprint(f\"Recall@61 = {recall_at_k}\")\n# Outputs Recall@61 = 50\n```"]