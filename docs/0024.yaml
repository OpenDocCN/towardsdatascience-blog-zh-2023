- en: 'Moto, Pytest, and AWS Databases: A Quality and Data Engineering Crossroads'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Moto、Pytest 和 AWS 数据库：质量与数据工程的交汇点
- en: 原文：[https://towardsdatascience.com/moto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265?source=collection_archive---------3-----------------------#2023-01-03](https://towardsdatascience.com/moto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265?source=collection_archive---------3-----------------------#2023-01-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/moto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265?source=collection_archive---------3-----------------------#2023-01-03](https://towardsdatascience.com/moto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265?source=collection_archive---------3-----------------------#2023-01-03)
- en: The hows and whys of Moto and Pytest with AWS databases
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Moto 和 Pytest 如何与 AWS 数据库协同工作
- en: '[](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)[![Taylor
    Wagner](../Images/5bb000c13c40b17049632a10982ee32b.png)](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)
    [Taylor Wagner](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)[![Taylor
    Wagner](../Images/5bb000c13c40b17049632a10982ee32b.png)](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)
    [Taylor Wagner](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd40c65f02fb7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&user=Taylor+Wagner&userId=d40c65f02fb7&source=post_page-d40c65f02fb7----ae58f9e7b265---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)
    ·9 min read·Jan 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fae58f9e7b265&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&user=Taylor+Wagner&userId=d40c65f02fb7&source=-----ae58f9e7b265---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd40c65f02fb7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&user=Taylor+Wagner&userId=d40c65f02fb7&source=post_page-d40c65f02fb7----ae58f9e7b265---------------------post_header-----------)
    发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)
    ·9分钟阅读·2023年1月3日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fae58f9e7b265&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&user=Taylor+Wagner&userId=d40c65f02fb7&source=-----ae58f9e7b265---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fae58f9e7b265&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&source=-----ae58f9e7b265---------------------bookmark_footer-----------)![](../Images/f2014e6ddd769007fc5d5973991a3b7b.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fae58f9e7b265&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&source=-----ae58f9e7b265---------------------bookmark_footer-----------)![](../Images/f2014e6ddd769007fc5d5973991a3b7b.png)'
- en: Photo by [Christina @ wocintechchat.com](https://unsplash.com/@wocintechchat?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Christina @ wocintechchat.com](https://unsplash.com/@wocintechchat?utm_source=medium&utm_medium=referral)提供，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Overview
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: I’ve recently worked a lot with Pytest to test AWS services using Boto3\. Boto3
    is a very powerful AWS SDK for working with AWS services. My research and hands-on
    experience with Boto3 lead me to discover a complimentary tool called Moto! Moto,
    in partnership with Boto3, became my go-to for test strategy planning as well
    as maintaining clean production data in my recent project. In this article, I
    will share the hows and whys for mock testing AWS databases using Moto (a faker
    Boto3) with Pytest. I’ll even take you step-by-step through the process of testing
    an AWS NoSQL database service — Amazon DynamoDB — with Moto and Pytest.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近花了很多时间使用Pytest来测试AWS服务，通过Boto3。Boto3是一个非常强大的AWS SDK，用于处理AWS服务。我的研究和实践经验让我发现了一个叫做Moto的补充工具！Moto与Boto3配合使用，成为我在最近项目中的测试策略规划以及维护干净生产数据的首选工具。在本文中，我将分享如何以及为何使用Moto（一个虚假的Boto3）和Pytest来模拟测试AWS数据库。我甚至会一步步带你通过使用Moto和Pytest测试AWS
    NoSQL数据库服务——Amazon DynamoDB的过程。
- en: '*Please note: All images unless otherwise noted are by the author.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意：除非另有说明，所有图像均由作者提供。*'
- en: Moto
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Moto
- en: '[Moto](https://docs.getmoto.org/en/latest/docs/getting_started.html#recommended-usage)
    is a Python library that has the ability to mock programmatic usage of AWS services.
    To lay it out very simply — [Boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)
    is an object-oriented API for creating, configuring, and managing *real* AWS services
    and accounts, and **Moto is a mock version of Boto3**. While Moto doesn’t include
    every method Boto3 offers, [Moto does provide a good percentage](https://docs.getmoto.org/en/latest/docs/services/index.html)
    of Boto3 methods in order to run tests locally. When working with Moto, I highly
    recommend using Boto3 documentation in conjunction with the Moto docs for more
    detailed explanations of methods.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Moto](https://docs.getmoto.org/en/latest/docs/getting_started.html#recommended-usage)是一个能够模拟AWS服务编程使用的Python库。简单来说
    — [Boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)是一个面向对象的API，用于创建、配置和管理*真实*的AWS服务和账户，而**Moto是Boto3的模拟版本**。虽然Moto没有包括Boto3提供的每一个方法，[Moto确实提供了相当一部分](https://docs.getmoto.org/en/latest/docs/services/index.html)的Boto3方法，以便在本地运行测试。在使用Moto时，我强烈建议结合使用Boto3文档和Moto文档，以获得更详细的方法解释。'
- en: '**The advantages of Moto:**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Moto的优点：**'
- en: AWS account not required
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要AWS账户
- en: Avoid the risk of changing actual data or resources in an AWS production account
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在AWS生产账户中更改实际数据或资源的风险
- en: Easily convert Moto mock set ups into Boto3 for real world use-cases
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可轻松将Moto模拟设置转换为Boto3以用于实际应用场景
- en: Fast running tests — no latency concerns
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试运行迅速 — 无延迟问题
- en: Easy to learn and get started with
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于学习和上手
- en: Free! — will not incur any costs from AWS
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费！— 不会产生AWS费用
- en: '**A disadvantage of Moto:**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Moto的一个缺点：**'
- en: Doesn’t include *all* of Boto3 methods — Boto3 offers more extensive coverage
    of AWS services
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不包括Boto3的*所有*方法 — Boto3提供了对AWS服务的更广泛覆盖
- en: '![](../Images/326ba1e89583c009255200fef02f8ee3.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/326ba1e89583c009255200fef02f8ee3.png)'
- en: 'Moto Documentation Screenshot: The full list of Boto3 methods that are available
    with Amazon DynamoDB with the methods available for Moto “X” marked. For a full
    view, click [here](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Moto文档截图：可用于Amazon DynamoDB的Boto3方法的完整列表，并标记了Moto “X”可用的方法。欲查看完整列表，请点击[这里](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html)。
- en: The Moto documentation provides insight into which Boto3 methods that are available
    for use. For example, a little over half of the [DynamoDB methods](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html)
    from Boto3 are available to mock out using Moto.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Moto文档提供了哪些Boto3方法可以使用的洞察。例如，Boto3中略多于一半的[DynamoDB方法](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html)可用于Moto进行模拟。
- en: Pytest
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pytest
- en: '[Pytest](https://docs.pytest.org/en/7.2.x/contents.html) is a Python framework
    used for writing small and readable tests. This framework uses detailed assertion
    introspection, making plain `assert` statements very user-friendly. Pytest has
    the powerful capability to be scaled to support complex, functional testing of
    applications and libraries.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pytest](https://docs.pytest.org/en/7.2.x/contents.html)是一个用于编写简洁易读测试的Python框架。此框架使用详细的断言检查，使得普通的`assert`语句非常用户友好。Pytest具有强大的功能，可以扩展以支持应用程序和库的复杂功能测试。'
- en: '![](../Images/76a8a7a85fe9a725d92f962ddf344e89.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76a8a7a85fe9a725d92f962ddf344e89.png)'
- en: 'Terminal Screenshot 1: Execute `pytest` command'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 终端截图1：执行`pytest`命令
- en: 'Tests can be executed with a simple `pytest` command. The `pytest` command
    runs all tests but individual test files can be run with the filepath after `pytest`,
    like so: `pytest tests/test_dynamodb.py`. Running `pytest` will give you accurate
    results whereas each test will yield either a green-colored “.” for pass, a red-colored
    “F” for fail, or a yellow-colored “S” for skip (if applicable). There are two
    super helpful flags that I’m going to share and highly recommend putting to use
    when executing tests with Pytest. *Please note: The code does not change at all
    between the times these different commands were run across the screenshots in
    this section. The only difference is the flags.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 测试可以通过一个简单的`pytest`命令来执行。`pytest`命令会运行所有测试，但可以通过在`pytest`后面添加文件路径来运行单个测试文件，如：`pytest
    tests/test_dynamodb.py`。运行`pytest`会给出准确的结果，每个测试会显示绿色的“.”表示通过，红色的“F”表示失败，或黄色的“S”表示跳过（如适用）。有两个非常有用的标志我将分享并强烈建议在使用Pytest执行测试时使用。*请注意：在本节的屏幕截图中，这些不同命令运行之间的代码没有任何变化。唯一的区别是标志。*
- en: '![](../Images/9f4a50e278f9cd902aa7758b132757c7.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f4a50e278f9cd902aa7758b132757c7.png)'
- en: 'Terminal Screenshot 2: Execute `pytest` command with -s flag'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 终端截图2：使用-s标志执行`pytest`命令
- en: First is the `-s` (stdout/stderr output) flag. Running `pytest -s` will display
    all print statements in the terminal when tests are run. Without the addition
    of the `-s` flag, even if there are print statements in the code, no print statements
    will appear in the terminal. This is very useful for debugging purposes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是`-s`（stdout/stderr输出）标志。运行`pytest -s`会在测试运行时在终端显示所有打印语句。如果没有添加`-s`标志，即使代码中有打印语句，终端中也不会出现打印语句。这对于调试非常有用。
- en: '![](../Images/74dec82722eb3bd6e0bd02a48720287b.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74dec82722eb3bd6e0bd02a48720287b.png)'
- en: 'Terminal Screenshot 3: Execute `pytest` command with -v flag'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 终端截图3：使用-v标志执行`pytest`命令
- en: Another useful flag is the `-v` (verbose) flag. Using `pytest -v` will provide
    many more granular details in the terminal when tests are run. This flag will
    provide the class and method names of each test, an accumulated percentage of
    each test’s completion in the scheme of all tests to be ran, as well as a green
    “PASSED”, red “FAILED”, or yellow “SKIPPED” indicator with each individual test.
    *Notice that this flag does not show print statements.*
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的标志是`-v`（详细）标志。使用`pytest -v`会在测试运行时在终端提供更多详细信息。这个标志将提供每个测试的类和方法名称，以及所有待运行测试的每个测试完成的累积百分比，以及每个测试的绿色“通过”、红色“失败”或黄色“跳过”指示器。*注意，这个标志不会显示打印语句。*
- en: '![](../Images/8d2243add06f462049efde4e40efbf1f.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d2243add06f462049efde4e40efbf1f.png)'
- en: 'Terminal Screenshot 4: Execute `pytest` command with combined -sv flags'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 终端截图4：使用组合的-sv标志执行`pytest`命令
- en: '**Pro-tip**: It is possible to combine flags when running the test execution
    command! When working with Pytest, I typically run `pytest -sv`. The combination
    of the `-s` and `-v` flags together provide the details that I’m looking for with
    greater readability as well as insight into print statements.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**专业提示**：在运行测试执行命令时，可以组合标志！在使用Pytest时，我通常运行`pytest -sv`。`-s`和`-v`标志的组合提供了更具可读性的细节，并且对打印语句有更多的洞察力。'
- en: Getting Started
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用
- en: 'Pytest requires the use of Python3.7+. You can download the latest version
    of Python [here](https://www.python.org/downloads/). Then, it will take three
    libraries to get started. Open your IDE of choice and in a brand new directory,
    run the following terminal command to download the needed dependencies:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest要求使用Python3.7或更高版本。您可以[在这里](https://www.python.org/downloads/)下载最新版本的Python。然后，需要三个库才能开始。打开您选择的IDE，在一个全新的目录中，运行以下终端命令以下载所需的依赖项：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we set up our “client connection”. The process for setting up a Moto connection
    is very similar to Boto3\. For Boto3, AWS credentials are required. In order to
    mock this process using Moto, we will just use fake credentials. Feel free to
    set the values to whatever you like as long as the type is a string.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置“客户端连接”。设置Moto连接的过程与Boto3非常相似。对于Boto3，要求提供AWS凭证。为了使用Moto模拟这个过程，我们将使用虚假的凭证。可以随意设置值，只要类型是字符串即可。
- en: '*Please note: In a real use-case, it would be important to keep confidential
    credential values protected and not hard-code them into an application. Variables
    can be exported via the command line or saved in an environment file to limit
    accessibility.* *Also, Any region can be used for the connection, but “us-east-1”
    is typically used as that region includes all AWS services and offerings.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意：在实际使用中，保护机密凭证值非常重要，不应将其硬编码到应用程序中。可以通过命令行导出变量或将其保存在环境文件中以限制访问性。* *此外，任何区域都可以用于连接，但“us-east-1”通常用于此区域，因为该区域包括所有
    AWS 服务和产品。*'
- en: 'Pytest utilizes [fixtures](https://docs.pytest.org/en/6.2.x/fixture.html) in
    a file named `conftest.py` to share across modules. In the root of your application,
    create the file by running this command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest 在名为 `conftest.py` 的文件中利用[夹具](https://docs.pytest.org/en/6.2.x/fixture.html)在模块之间共享。在你的应用程序根目录中，通过运行以下命令创建该文件：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'and add in the following content to configure the client connection:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 并添加以下内容以配置客户端连接：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Both the AWS credentials function and the mock DynamoDB client function are
    implementing the Pytest fixture decorator so that they may be leveraged in other
    files of the application. The mock DynamoDB client function uses Moto to create
    a fake client connection to AWS, similarly to how it is done in Boto3\. For the
    purpose of this article, we will try out Moto with DynamoDB as an example AWS
    service. Look into the Moto docs if you have interest in using Moto for other
    AWS services.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 凭证函数和模拟 DynamoDB 客户端函数都实现了 Pytest 夹具装饰器，以便可以在应用程序的其他文件中使用。模拟 DynamoDB 客户端函数使用
    Moto 创建与 AWS 的虚假客户端连接，类似于在 Boto3 中的操作。为了本文的目的，我们将以 DynamoDB 为示例 AWS 服务尝试 Moto。如果你有兴趣将
    Moto 用于其他 AWS 服务，请查看 Moto 文档。
- en: Testing DynamoDB with Moto
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Moto 测试 DynamoDB
- en: 'Go ahead and create another file called `test_dynamodb.py` in the root directory
    of your project with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在项目根目录中创建另一个名为 `test_dynamodb.py` 的文件：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first step in the test file is to create a DynamoDB table. Since many methods
    in Moto require a table already created, we will create a very basic test table
    that will be leverage when using various methods to avoid the need of creating
    a table in every single test case. There are a few strategies for creating this
    test table, but I’m going to show you how to create the table by implementing
    a [context manager](https://docs.python.org/3/library/contextlib.html). The great
    news is that context managers come from Python’s native library, requiring no
    additional package downloads. The test table can be created like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 测试文件的第一步是创建一个 DynamoDB 表。由于 Moto 中的许多方法需要已经创建的表，我们将创建一个非常基础的测试表，在使用各种方法时会用到，以避免在每个测试用例中都需要创建一个表。创建此测试表有几种策略，但我将向你展示如何通过实现一个[上下文管理器](https://docs.python.org/3/library/contextlib.html)来创建该表。好消息是，上下文管理器来自
    Python 的本地库，无需额外下载软件包。测试表可以这样创建：
- en: After creating the test table in a single function with a context manager, we
    can go ahead and test that *this* test table was indeed created. The *table name*
    of the test table will be a required parameter for many Moto DynamoDB methods,
    so I’ll create this as a variable for the entire test class to avoid repetition
    and for better readability. This step isn’t necessary, but it helps save time
    and lowers the chance of syntax errors from having to continuously re-write value
    of the table name when calling different methods.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个函数中使用上下文管理器创建测试表后，我们可以继续测试*这个*测试表是否确实已创建。测试表的*表名*将是许多 Moto DynamoDB 方法所需的参数，因此我会将其创建为整个测试类的变量，以避免重复并提高可读性。此步骤不是必需的，但有助于节省时间，并减少因在调用不同方法时需要不断重新编写表名值而产生的语法错误的机会。
- en: In the same `test_dynamodb.py` file, below the the context manager, create a
    test class so that all related tests (tests for the *“my-test-table”*) can be
    grouped together.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的 `test_dynamodb.py` 文件中，在上下文管理器下方创建一个测试类，以便将所有相关测试（*“my-test-table”*的测试）分组在一起。
- en: As you can see above, the `dynamodb_client` argument is passed through the test
    method as an argument. This comes from the `conftest.py` file, where we already
    established the mock connection to Amazon DynamoDB. Line 4 displays the optional
    declaration of the table name variable. Then on line 9, we call the context manager
    into the `test_create_table` method in order to access the “*my-test-table*”.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，`dynamodb_client` 参数作为参数传递给测试方法。这来自于 `conftest.py` 文件，在该文件中我们已经建立了与 Amazon
    DynamoDB 的模拟连接。第 4 行显示了表名变量的可选声明。然后在第 9 行，我们调用上下文管理器进入 `test_create_table` 方法，以便访问“*my-test-table*”。
- en: 'From there, we can write a test to validate that the table was successfully
    created by calling the *.describe_table()* and *.list_tables()* methods from Moto
    and asserting that the table name exists in the response output. To run the test
    simply execute the following command (you may include additional flags if you
    so wish):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，我们可以编写一个测试来验证表是否成功创建，通过调用 Moto 的 *.describe_table()* 和 *.list_tables()*
    方法，并断言表名是否存在于响应输出中。要运行测试，只需执行以下命令（如果需要，您可以添加额外的标志）：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command should yield the result of a passing test:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令应该会返回测试通过的结果：
- en: '![](../Images/209a361b6ec8d0bf561bad0b9117c1d9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/209a361b6ec8d0bf561bad0b9117c1d9.png)'
- en: 'Terminal Screenshot 5: Execute `pytest` command for testing the creation of
    the table'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 终端截图 5：执行 `pytest` 命令以测试表的创建
- en: Further DynamoDB Testing with Moto
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Moto 进一步测试 DynamoDB
- en: 'Your test file is now ready for any additional DynamoDB test methods that you
    want to explore using Moto, such as adding an item to the “*my-test-table*”:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的测试文件已准备好进行任何额外的 DynamoDB 测试方法，您可以使用 Moto 探索，例如向“*my-test-table*”添加项：
- en: 'The test you see above can be placed inside the TestDynamoDB class directly
    under the `test_create_table` method. The `test_put_item` method also utilizes
    the context manager to use the same test table that was originally created at
    the top of the file. At the start of each method and with the call of the context
    manager within each test suite, the “*my-test-table*” is in it’s original status
    upon first creation. *Please note: state does not persist between test methods.*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的测试可以直接放在 TestDynamoDB 类中 `test_create_table` 方法下。`test_put_item` 方法也使用了上下文管理器，以使用最初在文件顶部创建的相同测试表。在每个方法开始时，以及在每个测试套件中调用上下文管理器时，“*my-test-table*”
    都处于初次创建时的原始状态。*请注意：状态在测试方法之间不会持久化。*
- en: 'I have created a GitHub repository that encompasses the sample tests included
    in the article with the addition of much more! My example code expands on the
    testing in the article to include the following DynamoDB tests:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个 GitHub 存储库，其中包含了本文中的示例测试，并且还增加了更多内容！我的示例代码扩展了文章中的测试，包括以下 DynamoDB 测试：
- en: Creating a table
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建表
- en: Putting an item into the table
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项添加到表中
- en: Deleting an item from the table
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从表中删除项
- en: Deleting a table
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除表
- en: Adding table tags
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加表标签
- en: Removing table tags
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除表标签
- en: '[](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - taylorwagner/moto-aws-data'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - taylorwagner/moto-aws-data'
- en: Contribute to taylorwagner/moto-aws-data development by creating an account
    on GitHub.
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过在 GitHub 上创建帐户来贡献 taylorwagner/moto-aws-data 的开发。
- en: github.com](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
- en: This repository also includes some testing for AWS RDS. In my example code,
    I organized test files into its own directory and grouped tests for consistencies
    in testing purposes. I cherry-picked different methods for each service to showcase
    the range of what Moto offers. There are many more methods that Moto has available
    that are not included in my example code. Be sure to check Moto’s documentation!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个存储库还包括一些 AWS RDS 的测试。在我的示例代码中，我将测试文件组织到自己的目录中，并对测试进行了分组以确保测试的一致性。我挑选了每个服务的不同方法来展示
    Moto 提供的范围。Moto 还有许多其他方法未包含在我的示例代码中。请务必查看 Moto 的文档！
- en: Final Thoughts
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终想法
- en: Plugging in Pytest fixtures and Python context managers, Pytest’s ease of use
    and read-to-scale framework coupled with Moto is a great combination for validating
    the usage of AWS’s database services. While the Moto/Pytest cocktail may not be
    a sufficient drink of choice for testing real AWS services and accounts, it’s
    a sufficient option for practicing and gaining a better understanding of how you
    might test your real AWS account without the threat of security breaches, tampering
    important data, or running up an expensive, unnecessary bill. Just keep in mind
    that Moto has a limited range of methods as compared to Boto3\. It has been my
    experience that working with Moto’s mocked responses will provide you the understanding
    needed to utilize Boto3 for real AWS use-cases. It is my hope that my article
    and example code can help you with your AWS database needs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Pytest 固件和 Python 上下文管理器结合使用，Pytest 的易用性和可扩展性框架与 Moto 的结合是验证 AWS 数据库服务使用情况的绝佳组合。尽管
    Moto/Pytest 的组合可能不适合测试真实的 AWS 服务和账户，但它是练习和更好地理解如何测试真实 AWS 账户的足够选项，且不会带来安全漏洞、篡改重要数据或产生昂贵的、不必要的账单。只需记住，与
    Boto3 相比，Moto 的方法范围有限。我发现，与 Moto 的模拟响应一起工作会为你提供利用 Boto3 处理真实 AWS 用例所需的理解。我希望我的文章和示例代码能帮助你满足
    AWS 数据库的需求。
- en: Resources
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: 'Moto’s GitHub Repository:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Moto 的 GitHub 仓库：
- en: '[](https://github.com/spulec/moto?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - spulec/moto: A library that allows you to easily mock out tests based
    on AWS…'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/spulec/moto?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - spulec/moto: 一个允许你轻松模拟基于 AWS 的测试的库…]'
- en: Moto is a library that allows your tests to easily mock out AWS Services. Imagine
    you have the following python code…
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Moto 是一个库，使你的测试可以轻松模拟 AWS 服务。假设你有以下的 Python 代码…
- en: github.com](https://github.com/spulec/moto?source=post_page-----ae58f9e7b265--------------------------------)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub 页面](https://github.com/spulec/moto?source=post_page-----ae58f9e7b265--------------------------------)'
- en: 'My example code is hosted on GitHub. You can view the tests and run on your
    machine. I also include AWS RDS tests as well:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的示例代码托管在 GitHub 上。你可以查看测试并在你的机器上运行。我还包括了 AWS RDS 测试：
- en: '[](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - taylorwagner/moto-aws-data'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - taylorwagner/moto-aws-data]'
- en: Contribute to taylorwagner/moto-aws-data development by creating an account
    on GitHub.
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过在 GitHub 上创建账户来为 taylorwagner/moto-aws-data 的开发做出贡献。
- en: github.com](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub 页面](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)'
- en: '[Moto Documentation Homepage](https://docs.getmoto.org/en/latest/docs/getting_started.html#recommended-usage)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Moto 文档主页](https://docs.getmoto.org/en/latest/docs/getting_started.html#recommended-usage)'
- en: '[Boto3 Homepage](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Boto3 主页](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)'
- en: '[List of Moto’s Implemented Services](https://docs.getmoto.org/en/latest/docs/services/index.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Moto 实现的服务列表](https://docs.getmoto.org/en/latest/docs/services/index.html)'
- en: '[List of DynamoDB Boto3 methods available in Moto](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Moto 中可用的 DynamoDB Boto3 方法列表](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html)'
- en: '[Pytest Homepage](https://docs.pytest.org/en/7.2.x/contents.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pytest 主页](https://docs.pytest.org/en/7.2.x/contents.html)'
- en: '[Python Download Page](https://www.python.org/downloads/)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 下载页面](https://www.python.org/downloads/)'
- en: '[Pytest Fixtures](https://docs.pytest.org/en/6.2.x/fixture.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pytest 固件](https://docs.pytest.org/en/6.2.x/fixture.html)'
- en: '[Python’s Context Manager](https://docs.python.org/3/library/contextlib.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 的上下文管理器](https://docs.python.org/3/library/contextlib.html)'
