- en: 'Moto, Pytest, and AWS Databases: A Quality and Data Engineering Crossroads'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/moto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265?source=collection_archive---------3-----------------------#2023-01-03](https://towardsdatascience.com/moto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265?source=collection_archive---------3-----------------------#2023-01-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The hows and whys of Moto and Pytest with AWS databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)[![Taylor
    Wagner](../Images/5bb000c13c40b17049632a10982ee32b.png)](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)
    [Taylor Wagner](https://medium.com/@taywag?source=post_page-----ae58f9e7b265--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd40c65f02fb7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&user=Taylor+Wagner&userId=d40c65f02fb7&source=post_page-d40c65f02fb7----ae58f9e7b265---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ae58f9e7b265--------------------------------)
    ·9 min read·Jan 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fae58f9e7b265&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&user=Taylor+Wagner&userId=d40c65f02fb7&source=-----ae58f9e7b265---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fae58f9e7b265&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmoto-pytest-and-aws-databases-a-quality-and-data-engineering-crossroads-ae58f9e7b265&source=-----ae58f9e7b265---------------------bookmark_footer-----------)![](../Images/f2014e6ddd769007fc5d5973991a3b7b.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Christina @ wocintechchat.com](https://unsplash.com/@wocintechchat?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve recently worked a lot with Pytest to test AWS services using Boto3\. Boto3
    is a very powerful AWS SDK for working with AWS services. My research and hands-on
    experience with Boto3 lead me to discover a complimentary tool called Moto! Moto,
    in partnership with Boto3, became my go-to for test strategy planning as well
    as maintaining clean production data in my recent project. In this article, I
    will share the hows and whys for mock testing AWS databases using Moto (a faker
    Boto3) with Pytest. I’ll even take you step-by-step through the process of testing
    an AWS NoSQL database service — Amazon DynamoDB — with Moto and Pytest.
  prefs: []
  type: TYPE_NORMAL
- en: '*Please note: All images unless otherwise noted are by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: Moto
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Moto](https://docs.getmoto.org/en/latest/docs/getting_started.html#recommended-usage)
    is a Python library that has the ability to mock programmatic usage of AWS services.
    To lay it out very simply — [Boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)
    is an object-oriented API for creating, configuring, and managing *real* AWS services
    and accounts, and **Moto is a mock version of Boto3**. While Moto doesn’t include
    every method Boto3 offers, [Moto does provide a good percentage](https://docs.getmoto.org/en/latest/docs/services/index.html)
    of Boto3 methods in order to run tests locally. When working with Moto, I highly
    recommend using Boto3 documentation in conjunction with the Moto docs for more
    detailed explanations of methods.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The advantages of Moto:**'
  prefs: []
  type: TYPE_NORMAL
- en: AWS account not required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid the risk of changing actual data or resources in an AWS production account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easily convert Moto mock set ups into Boto3 for real world use-cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast running tests — no latency concerns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to learn and get started with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free! — will not incur any costs from AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A disadvantage of Moto:**'
  prefs: []
  type: TYPE_NORMAL
- en: Doesn’t include *all* of Boto3 methods — Boto3 offers more extensive coverage
    of AWS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/326ba1e89583c009255200fef02f8ee3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Moto Documentation Screenshot: The full list of Boto3 methods that are available
    with Amazon DynamoDB with the methods available for Moto “X” marked. For a full
    view, click [here](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The Moto documentation provides insight into which Boto3 methods that are available
    for use. For example, a little over half of the [DynamoDB methods](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html)
    from Boto3 are available to mock out using Moto.
  prefs: []
  type: TYPE_NORMAL
- en: Pytest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Pytest](https://docs.pytest.org/en/7.2.x/contents.html) is a Python framework
    used for writing small and readable tests. This framework uses detailed assertion
    introspection, making plain `assert` statements very user-friendly. Pytest has
    the powerful capability to be scaled to support complex, functional testing of
    applications and libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76a8a7a85fe9a725d92f962ddf344e89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Terminal Screenshot 1: Execute `pytest` command'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tests can be executed with a simple `pytest` command. The `pytest` command
    runs all tests but individual test files can be run with the filepath after `pytest`,
    like so: `pytest tests/test_dynamodb.py`. Running `pytest` will give you accurate
    results whereas each test will yield either a green-colored “.” for pass, a red-colored
    “F” for fail, or a yellow-colored “S” for skip (if applicable). There are two
    super helpful flags that I’m going to share and highly recommend putting to use
    when executing tests with Pytest. *Please note: The code does not change at all
    between the times these different commands were run across the screenshots in
    this section. The only difference is the flags.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f4a50e278f9cd902aa7758b132757c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Terminal Screenshot 2: Execute `pytest` command with -s flag'
  prefs: []
  type: TYPE_NORMAL
- en: First is the `-s` (stdout/stderr output) flag. Running `pytest -s` will display
    all print statements in the terminal when tests are run. Without the addition
    of the `-s` flag, even if there are print statements in the code, no print statements
    will appear in the terminal. This is very useful for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74dec82722eb3bd6e0bd02a48720287b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Terminal Screenshot 3: Execute `pytest` command with -v flag'
  prefs: []
  type: TYPE_NORMAL
- en: Another useful flag is the `-v` (verbose) flag. Using `pytest -v` will provide
    many more granular details in the terminal when tests are run. This flag will
    provide the class and method names of each test, an accumulated percentage of
    each test’s completion in the scheme of all tests to be ran, as well as a green
    “PASSED”, red “FAILED”, or yellow “SKIPPED” indicator with each individual test.
    *Notice that this flag does not show print statements.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d2243add06f462049efde4e40efbf1f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Terminal Screenshot 4: Execute `pytest` command with combined -sv flags'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pro-tip**: It is possible to combine flags when running the test execution
    command! When working with Pytest, I typically run `pytest -sv`. The combination
    of the `-s` and `-v` flags together provide the details that I’m looking for with
    greater readability as well as insight into print statements.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pytest requires the use of Python3.7+. You can download the latest version
    of Python [here](https://www.python.org/downloads/). Then, it will take three
    libraries to get started. Open your IDE of choice and in a brand new directory,
    run the following terminal command to download the needed dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we set up our “client connection”. The process for setting up a Moto connection
    is very similar to Boto3\. For Boto3, AWS credentials are required. In order to
    mock this process using Moto, we will just use fake credentials. Feel free to
    set the values to whatever you like as long as the type is a string.
  prefs: []
  type: TYPE_NORMAL
- en: '*Please note: In a real use-case, it would be important to keep confidential
    credential values protected and not hard-code them into an application. Variables
    can be exported via the command line or saved in an environment file to limit
    accessibility.* *Also, Any region can be used for the connection, but “us-east-1”
    is typically used as that region includes all AWS services and offerings.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pytest utilizes [fixtures](https://docs.pytest.org/en/6.2.x/fixture.html) in
    a file named `conftest.py` to share across modules. In the root of your application,
    create the file by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'and add in the following content to configure the client connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Both the AWS credentials function and the mock DynamoDB client function are
    implementing the Pytest fixture decorator so that they may be leveraged in other
    files of the application. The mock DynamoDB client function uses Moto to create
    a fake client connection to AWS, similarly to how it is done in Boto3\. For the
    purpose of this article, we will try out Moto with DynamoDB as an example AWS
    service. Look into the Moto docs if you have interest in using Moto for other
    AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Testing DynamoDB with Moto
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go ahead and create another file called `test_dynamodb.py` in the root directory
    of your project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The first step in the test file is to create a DynamoDB table. Since many methods
    in Moto require a table already created, we will create a very basic test table
    that will be leverage when using various methods to avoid the need of creating
    a table in every single test case. There are a few strategies for creating this
    test table, but I’m going to show you how to create the table by implementing
    a [context manager](https://docs.python.org/3/library/contextlib.html). The great
    news is that context managers come from Python’s native library, requiring no
    additional package downloads. The test table can be created like this:'
  prefs: []
  type: TYPE_NORMAL
- en: After creating the test table in a single function with a context manager, we
    can go ahead and test that *this* test table was indeed created. The *table name*
    of the test table will be a required parameter for many Moto DynamoDB methods,
    so I’ll create this as a variable for the entire test class to avoid repetition
    and for better readability. This step isn’t necessary, but it helps save time
    and lowers the chance of syntax errors from having to continuously re-write value
    of the table name when calling different methods.
  prefs: []
  type: TYPE_NORMAL
- en: In the same `test_dynamodb.py` file, below the the context manager, create a
    test class so that all related tests (tests for the *“my-test-table”*) can be
    grouped together.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see above, the `dynamodb_client` argument is passed through the test
    method as an argument. This comes from the `conftest.py` file, where we already
    established the mock connection to Amazon DynamoDB. Line 4 displays the optional
    declaration of the table name variable. Then on line 9, we call the context manager
    into the `test_create_table` method in order to access the “*my-test-table*”.
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, we can write a test to validate that the table was successfully
    created by calling the *.describe_table()* and *.list_tables()* methods from Moto
    and asserting that the table name exists in the response output. To run the test
    simply execute the following command (you may include additional flags if you
    so wish):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should yield the result of a passing test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/209a361b6ec8d0bf561bad0b9117c1d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Terminal Screenshot 5: Execute `pytest` command for testing the creation of
    the table'
  prefs: []
  type: TYPE_NORMAL
- en: Further DynamoDB Testing with Moto
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your test file is now ready for any additional DynamoDB test methods that you
    want to explore using Moto, such as adding an item to the “*my-test-table*”:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The test you see above can be placed inside the TestDynamoDB class directly
    under the `test_create_table` method. The `test_put_item` method also utilizes
    the context manager to use the same test table that was originally created at
    the top of the file. At the start of each method and with the call of the context
    manager within each test suite, the “*my-test-table*” is in it’s original status
    upon first creation. *Please note: state does not persist between test methods.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'I have created a GitHub repository that encompasses the sample tests included
    in the article with the addition of much more! My example code expands on the
    testing in the article to include the following DynamoDB tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting an item into the table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an item from the table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding table tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing table tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - taylorwagner/moto-aws-data'
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to taylorwagner/moto-aws-data development by creating an account
    on GitHub.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: This repository also includes some testing for AWS RDS. In my example code,
    I organized test files into its own directory and grouped tests for consistencies
    in testing purposes. I cherry-picked different methods for each service to showcase
    the range of what Moto offers. There are many more methods that Moto has available
    that are not included in my example code. Be sure to check Moto’s documentation!
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plugging in Pytest fixtures and Python context managers, Pytest’s ease of use
    and read-to-scale framework coupled with Moto is a great combination for validating
    the usage of AWS’s database services. While the Moto/Pytest cocktail may not be
    a sufficient drink of choice for testing real AWS services and accounts, it’s
    a sufficient option for practicing and gaining a better understanding of how you
    might test your real AWS account without the threat of security breaches, tampering
    important data, or running up an expensive, unnecessary bill. Just keep in mind
    that Moto has a limited range of methods as compared to Boto3\. It has been my
    experience that working with Moto’s mocked responses will provide you the understanding
    needed to utilize Boto3 for real AWS use-cases. It is my hope that my article
    and example code can help you with your AWS database needs.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moto’s GitHub Repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://github.com/spulec/moto?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - spulec/moto: A library that allows you to easily mock out tests based
    on AWS…'
  prefs: []
  type: TYPE_NORMAL
- en: Moto is a library that allows your tests to easily mock out AWS Services. Imagine
    you have the following python code…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/spulec/moto?source=post_page-----ae58f9e7b265--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'My example code is hosted on GitHub. You can view the tests and run on your
    machine. I also include AWS RDS tests as well:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
    [## GitHub - taylorwagner/moto-aws-data'
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to taylorwagner/moto-aws-data development by creating an account
    on GitHub.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/taylorwagner/moto-aws-data?source=post_page-----ae58f9e7b265--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[Moto Documentation Homepage](https://docs.getmoto.org/en/latest/docs/getting_started.html#recommended-usage)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Boto3 Homepage](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[List of Moto’s Implemented Services](https://docs.getmoto.org/en/latest/docs/services/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[List of DynamoDB Boto3 methods available in Moto](https://docs.getmoto.org/en/latest/docs/services/dynamodb.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pytest Homepage](https://docs.pytest.org/en/7.2.x/contents.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Download Page](https://www.python.org/downloads/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pytest Fixtures](https://docs.pytest.org/en/6.2.x/fixture.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python’s Context Manager](https://docs.python.org/3/library/contextlib.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
