- en: Using Tqdm with Asyncio in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-tqdm-with-asyncio-in-python-5c0f6e747d55?source=collection_archive---------12-----------------------#2023-05-02](https://towardsdatascience.com/using-tqdm-with-asyncio-in-python-5c0f6e747d55?source=collection_archive---------12-----------------------#2023-05-02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An efficient way to monitor concurrent tasks’ progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page-----5c0f6e747d55--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----5c0f6e747d55--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5c0f6e747d55--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5c0f6e747d55--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----5c0f6e747d55--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8e2fe735546d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-tqdm-with-asyncio-in-python-5c0f6e747d55&user=Peng+Qian&userId=8e2fe735546d&source=post_page-8e2fe735546d----5c0f6e747d55---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5c0f6e747d55--------------------------------)
    ·6 min read·May 2, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5c0f6e747d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-tqdm-with-asyncio-in-python-5c0f6e747d55&user=Peng+Qian&userId=8e2fe735546d&source=-----5c0f6e747d55---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5c0f6e747d55&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fusing-tqdm-with-asyncio-in-python-5c0f6e747d55&source=-----5c0f6e747d55---------------------bookmark_footer-----------)![](../Images/93400ad3e3d4ab25829de2c79ad64482.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Jungwoo Hong](https://unsplash.com/@hjwinunsplsh?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What’s bothering me
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using concurrent programming in Python for efficiency is not unusual for a data
    scientist. Watching various sub-processes or concurrent threads in the background
    to keep my computation or IO-bound tasks in order is always satisfying.
  prefs: []
  type: TYPE_NORMAL
- en: But one thing that still bothers me is that when I’m concurrently processing
    hundreds or thousands of files or executing hundreds of processes in the background,
    I’m always worried about whether a few tasks will hang secretly and the whole
    code will never finish. I also have difficulty knowing where the code is now in
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: The worst part is that when I’m looking at a blank screen, it’s hard to tell
    how much longer my code will take to execute or what the ETA is. This is very
    detrimental to my ability to organize my work schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I wanted a way to let me know where the code execution had gotten
    to.
  prefs: []
  type: TYPE_NORMAL
- en: How it was done in the past
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A more traditional approach is to share a memory area between tasks, put a counter
    in this memory area, let this counter+1…
  prefs: []
  type: TYPE_NORMAL
