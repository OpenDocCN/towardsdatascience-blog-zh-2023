["```py\nfrom hamilton import base, driver\nimport summarization_shortend\n\n# create driver\ndr = (\n    driver.Builder()\n    .with_modules(summarization_sortened)\n    .build()\n)\n\n# pull prompts from somewhere\nsummarize_chunk_of_text_prompt = \"\"\"SOME PROMPT FOR {chunked_text}\"\"\"\nsummarize_text_from_summaries_prompt = \"\"\"SOME PROMPT {summarized_chunks} ... {user_query}\"\"\"\n\n# execute, and pass in the prompt \nresult = dr.execute(\n   [\"summarized_text\"],\n   inputs={\n      \"summarize_chunk_of_text_prompt\": summarize_chunk_of_text_prompt,\n      ...\n   }\n)\n```", "```py\n# prompt_template_loaders.py\n\ndef summarize_chunk_of_text_prompt(\n  db_client: Client, other_args: str) -> str:\n    # pseudo code here, but you get the idea:\n    _prompt = db_client.query( \n         \"get latest prompt X from DB\", other_args)\n    return _prompt\n\ndef summarize_text_from_summaries_prompt(\n   db_client: Client, another_arg: str) -> str:\n    # pseudo code here, but you get the idea:\n    _prompt = db_client.query(\n         \"get latest prompt Y from DB\", another_arg)\n    return _prompt\n```", "```py\nfrom hamilton import base, driver\nimport prompt_template_loaders # <-- load this to provide prompt input\nimport summarization_shortend\n\n# create driver\ndr = (\n    driver.Builder()\n    .with_modules(\n        prompt_template_loaders,# <-- Hamilton will call above functions\n        summarization_sortened, \n    )\n    .build()\n)\n\n# execute, and pass in the prompt \nresult = dr.execute(\n   [\"summarized_text\"],\n   inputs={\n      # don't need to pass prompts in this version\n   }\n)\n```", "```py\nresult = dr.execute(\n   [\"summarized_text\", \n    \"summarize_chunk_of_text_prompt\",   \n    ... # and anything else you want to pull out\n    \"summarize_text_from_summaries_prompt\"],\n   inputs={\n      # don't need to pass prompts in this version\n   }\n)\n\nmy_log_system(result) # send what you want for safe keeping to some\n                      # system that you own.\n```", "```py\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef summarize_text_from_summaries_prompt(\n    db_client: Client, another_arg: str) -> str:\n    # pseudo code here, but you get the idea:\n    _prompt = db_client.query(\n         \"get latest prompt Y from DB\", another_arg)\n    logger.info(f\"Prompt used is [{_prompt}]\")\n    return _prompt\n```", "```py\nfrom hamilton.function_modifiers import config\n\n@config.when(version=\"v1\")\ndef summarize_chunk_of_text_prompt__v1() -> str:\n    \"\"\"V1 prompt for summarizing chunks of text.\"\"\"\n    return f\"Summarize this text. Extract any key points with reasoning.\\n\\nContent:\"\n\n@config.when(version=\"v2\")\ndef summarize_chunk_of_text_prompt__v2(content_type: str = \"an academic paper\") -> str:\n    \"\"\"V2 prompt for summarizing chunks of text.\"\"\"\n    return f\"Summarize this text from {content_type}. Extract the key points with reasoning. \\n\\nContent:\"\n```", "```py\nfrom hamilton import base, driver\nimport summarization\n# create driver\ndr = (\n    driver.Builder()\n    .with_modules(summarization)\n    .with_config({\"version\": \"v1\"}) # V1 is chosen. Use \"v2' for V2.\n    .build()\n)\n```", "```py\n# prompts_v1.py\ndef summarize_chunk_of_text_prompt() -> str:\n    \"\"\"V1 prompt for summarizing chunks of text.\"\"\"\n    return f\"Summarize this text. Extract any key points with reasoning.\\n\\nContent:\"\n```", "```py\n# prompts_v2.py\ndef summarize_chunk_of_text_prompt(content_type: str = \"an academic paper\") -> str:\n    \"\"\"V2 prompt for summarizing chunks of text.\"\"\"\n    return f\"Summarize this text from {content_type}. Extract the key points with reasoning. \\n\\nContent:\"\n```", "```py\n# run.py\nfrom hamilton import driver\nimport summarization\nimport prompts_v1\nimport prompts_v2\n\n# create driver -- passing in the right module we want\ndr = (\n    driver.Builder()\n    .with_modules(\n        prompts_v1,  # or prompts_v2\n        summarization,\n    )\n    .build()\n)\n```"]