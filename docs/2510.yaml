- en: Initialize Rust Constants at Runtime with lazy_static
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/initialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79?source=collection_archive---------6-----------------------#2023-08-05](https://towardsdatascience.com/initialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79?source=collection_archive---------6-----------------------#2023-08-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Define non-constant static variables with lazy initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)[![Nicholas
    Obert](../Images/d70330063c9edc2f63e53f62a78f82ec.png)](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)
    [Nicholas Obert](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Feeb884cbf705&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finitialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79&user=Nicholas+Obert&userId=eeb884cbf705&source=post_page-eeb884cbf705----e05b1df46c79---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)
    ·4 min read·Aug 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe05b1df46c79&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finitialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79&user=Nicholas+Obert&userId=eeb884cbf705&source=-----e05b1df46c79---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe05b1df46c79&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finitialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79&source=-----e05b1df46c79---------------------bookmark_footer-----------)![](../Images/d3a48ff6643b48687887a2af35a5c63e.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Christian Lue](https://unsplash.com/@christianlue?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: It’s no secret that initializing constants at compile time is a good practice
    in programming. Not only do you reduce the initialization overhead, but you also
    make it easier for the compiler to cleverly optimize your code by knowing the
    value of the constant in advance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, however, it’s impossible to initialize every constant at compile
    time since it requires performing non-constant operations or fetching data available
    only at runtime. For instance, say we make repetitive use of the number `√7` in
    our program. Instead of calculating it every time, it would be better to define
    a constant for it like follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code, however, is invalid. The Rust compiler returns the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The same happens if we try to initialize a constant with an environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'From the Rust compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
