- en: Constraint Programming Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/constraint-programming-explained-2882dc3ad9df?source=collection_archive---------5-----------------------#2023-01-12](https://towardsdatascience.com/constraint-programming-explained-2882dc3ad9df?source=collection_archive---------5-----------------------#2023-01-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/6cf518b9ff47ceb0982a963d081b8582.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph coloring problem interpretation, painted by Dall-E 2.
  prefs: []
  type: TYPE_NORMAL
- en: The core of a constraint programming solver and the relationship with mixed
    integer programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffb96be98b7b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconstraint-programming-explained-2882dc3ad9df&user=Hennie+de+Harder&userId=fb96be98b7b9&source=post_page-fb96be98b7b9----2882dc3ad9df---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)
    ·9 min read·Jan 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2882dc3ad9df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconstraint-programming-explained-2882dc3ad9df&user=Hennie+de+Harder&userId=fb96be98b7b9&source=-----2882dc3ad9df---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2882dc3ad9df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fconstraint-programming-explained-2882dc3ad9df&source=-----2882dc3ad9df---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: '**There are many different ways to define and solve optimization problems.
    You can e.g. use greedy algorithms, constraint programming, mixed integer programming,
    genetic algorithms or local search. In this post, we are diving in to constraint
    programming. As example, the graph coloring problem is used to illustrate how
    constraint programming works.**'
  prefs: []
  type: TYPE_NORMAL
- en: If you need an introduction to optimization problems and search heuristics,
    you can read the post below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----2882dc3ad9df--------------------------------)
    [## Mathematical Optimization Heuristics Every Data Scientist Should Know'
  prefs: []
  type: TYPE_NORMAL
- en: Local search, genetic algorithms and more.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----2882dc3ad9df--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Graph Coloring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with the graph coloring problem. This problem is used throughout
    the post to illustrate concepts of constraint programming.
  prefs: []
  type: TYPE_NORMAL
- en: For a given map, you want to color every country. You have an unlimited amount
    of colors. It is not allowed to give adjacent countries the same color. What’s
    the lowest amount of colors you need to fill the map?
  prefs: []
  type: TYPE_NORMAL
