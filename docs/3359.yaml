- en: 'The Data Scientist’s Toolbox: Parsing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-data-scientists-toolbox-parsing-86ae196a9db5?source=collection_archive---------7-----------------------#2023-11-11](https://towardsdatascience.com/the-data-scientists-toolbox-parsing-86ae196a9db5?source=collection_archive---------7-----------------------#2023-11-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Parsing complex documents can be easy if you have the rights tools
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@doug.blank?source=post_page-----86ae196a9db5--------------------------------)[![Douglas
    Blank, PhD](../Images/b2fa86b9fe63a8bcb4f218ef5a6791e9.png)](https://medium.com/@doug.blank?source=post_page-----86ae196a9db5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----86ae196a9db5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----86ae196a9db5--------------------------------)
    [Douglas Blank, PhD](https://medium.com/@doug.blank?source=post_page-----86ae196a9db5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F66e2bac7e7d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-data-scientists-toolbox-parsing-86ae196a9db5&user=Douglas+Blank%2C+PhD&userId=66e2bac7e7d8&source=post_page-66e2bac7e7d8----86ae196a9db5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----86ae196a9db5--------------------------------)
    ·9 min read·Nov 11, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F86ae196a9db5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-data-scientists-toolbox-parsing-86ae196a9db5&user=Douglas+Blank%2C+PhD&userId=66e2bac7e7d8&source=-----86ae196a9db5---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F86ae196a9db5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-data-scientists-toolbox-parsing-86ae196a9db5&source=-----86ae196a9db5---------------------bookmark_footer-----------)![](../Images/38272ce6f7419e699fcc02d3a16f4b5c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Source code of the new Python-based rd2md parser and transformer discussed in
    this article. Image by the author.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: For many Data Scientists, converting complex documents into usable data is a
    common problem. Let’s look at a complex document, and explore different methods
    of transforming the data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**TLDR;**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll explore these rules as we develop a complex parser:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Rule 1: Be lazy; don’t do any more than is what is needed'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Rule 2: Start with the easy parts of the problem.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Rule 3: Don’t be afraid to throw away code and start over!'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Rule 4: Use the simplest method possible to get the job done.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**The Problem**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'As the Head of Research at an ML company, I am often faced with a variety of
    problems that need to be explored and solutions designed. Last week an interesting
    little problem arose: we needed a way to generate markdown documentation for our
    [open source R SDK](https://github.com/comet-ml/cometr) that allows ML experiments
    to log important details. And we needed a solution quickly without spending a
    lot of time on it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一家机器学习公司的研究主管，我经常面临各种问题，需要进行探索和解决方案设计。上周出现了一个有趣的小问题：我们需要一种方法来为我们的[开源 R SDK](https://github.com/comet-ml/cometr)生成
    markdown 文档，以便机器学习实验记录重要细节。我们需要一个快速的解决方案，而不花费太多时间。
- en: This problem may be a little more complex than what a Data Scientist would encounter
    on a daily basis, but it will serve as a nice example of how to use different
    methods of parsing. And as a bonus, we’ll end up with a [new open source project](https://github.com/comet-ml/rd2md/)
    that fills a particular niche. Let’s dive in!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题可能比数据科学家每天遇到的稍微复杂一些，但它将作为一个很好的示例，展示如何使用不同的解析方法。而且作为额外奖励，我们将得到一个填补特定领域的[开源项目](https://github.com/comet-ml/rd2md/)。让我们深入了解一下吧！
- en: 'On hearing of the problem, my first rule of Research and Design (R&D) kicked
    in:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在听到这个问题后，我的第一个研发规则开始起作用：
- en: '**Rule 1: Be lazy; don’t do any more than is what is needed** (Laziness was
    identified by Larry Wall as one of the [Three Great Virtues of a Programmer](https://thethreevirtues.com/)).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则 1：要懒惰；只做必要的事情**（懒惰被拉里·沃尔认为是[程序员的三大美德](https://thethreevirtues.com/)之一）。'
- en: So I started looking to see if converting R code to markdown was a solved problem.
    It appear that it was! However, after trying all of the available programs I could
    find (such as R’s old [Rd2md](https://cran.r-project.org/web/packages/Rd2md/index.html))
    they just didn’t work and the git repositories were no longer active. Okay, so
    I was on my own. If I were a better R programmer, I probably would have tried
    to fix the existing solutions. But I enjoy Python more, and thought it would make
    an nice parsing example. So, yes, we’ll be parsing R documentation in Python.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我开始查看将 R 代码转换为 markdown 是否已经解决了。看来确实解决了！然而，在尝试了我能找到的所有可用程序（如 R 的旧版[ Rd2md](https://cran.r-project.org/web/packages/Rd2md/index.html)）之后，它们都无法工作，且
    git 仓库也不再活跃。好吧，我只能靠自己了。如果我是一名更好的 R 程序员，我可能会尝试修复现有的解决方案。但我更喜欢 Python，认为它是一个很好的解析示例。所以，是的，我们将用
    Python 解析 R 文档。
- en: 'So, I started to write some code. And that reminded me of my next R&D rule:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我开始编写一些代码。这让我想起了我的下一个研发规则：
- en: '**Rule 2: Start with the easy parts of the problem.**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则 2：从问题的简单部分开始。**'
- en: 'Rule 2 is probably just my way of satisfying my need to have some instantaneous
    feedback. But it does also solve a more important role: if you start with the
    easy parts, maybe the hard parts won’t turn out to be so hard. It also serves
    as a warm-up to start working on a problem. I typically have one or two false
    starts in coding a solution. Which leads to my next rule:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 2 可能只是我满足需要一些即时反馈的方式。但它也解决了一个更重要的问题：如果你从简单的部分开始，也许困难的部分就不会那么难。它还作为一个热身，开始解决一个问题。我通常在编码解决方案时有一两个错误的开始。这导致了我的下一个规则：
- en: '**Rule 3: Don’t be afraid to throw away code and start over!**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则 3：不要害怕丢弃代码并重新开始！**'
- en: 'Finally, when you are on the right track, the last rule is:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当你走在正确的道路上时，最后一个规则是：
- en: '**Rule 4: Use the simplest method possible to get the job done.**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则 4：使用最简单的方法完成工作。**'
- en: 'Ok, so what is the easiest method to convert R documentation files into markdown?
    First, what is an R documentation file? R documentation is converted directly
    from the R code into something that looks a lot like [LaTeX](https://en.wikipedia.org/wiki/LaTeX).
    Here is an example (files end in .Rd):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么将 R 文档文件转换为 markdown 的最简单方法是什么？首先，什么是 R 文档文件？R 文档直接从 R 代码转换为类似于[LaTeX](https://en.wikipedia.org/wiki/LaTeX)的东西。这是一个示例（文件以
    .Rd 结尾）：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The goal is to convert the LaTeX into markdown that looks something like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是将 LaTeX 转换为看起来像这样的 markdown：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'which renders like:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染效果如下：
- en: '![](../Images/97565b6721fff6562a8d318ea6f63f61.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/97565b6721fff6562a8d318ea6f63f61.png)'
- en: Example markdown output. Image by the author.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的 markdown 输出。图片由作者提供。
- en: 'Ok, let’s start with something very simple. We’ll go through line-by-line of
    the Rd file with something like:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们从一个非常简单的开始。我们将逐行分析 Rd 文件，像这样：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code, we look to see if a line starts with “%” and if it does, we skip
    it (it is just a comment in the Rd file). Likewise, if it starts with “\name”
    then we set the current doc name. Note that we need to escape the backslash if
    we don’t use “raw” Python strings. The code **re.search(“{(.*)}”, line)** assumes
    that the line will contain the ending curly brace. This assumption holds true
    in all of the examples in our SDK, so I won’t make this code any more complicated
    than it needs to be, as per Rule 3.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们查看一行是否以“%”开头，如果是，我们就跳过它（它只是 Rd 文件中的注释）。同样，如果它以“\name”开头，那么我们就设置当前文档名称。请注意，如果我们不使用“raw”
    Python 字符串，则需要转义反斜杠。代码**re.search(“{(.*)}”, line)**假设这一行会包含结束的大括号。在我们的 SDK 中所有示例中，这一假设都是成立的，所以按照规则
    3，我不会让这段代码变得更复杂。
- en: Note that we construct a **Documentation()** instance before processing the
    lines in the file. We do this to collect all of the parts, and then call **doc.generate()**
    at the end. We do that (rather than generating the markdown on the fly) because
    some of the items that we parse will be in a different order in the markdown.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在处理文件中的行之前构造了一个**Documentation()** 实例。我们这样做是为了收集所有部分，然后在最后调用**doc.generate()**。我们这样做（而不是实时生成
    markdown）是因为我们解析的一些项在 markdown 中的顺序可能会不同。
- en: 'We can handle some of the R code in exactly this fashion: look for a pattern
    on a line from the Rd file, and immediately process it. However, let’s look at
    the next easiest part that can’t be handled this way:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以完全相同的方式处理一些 R 代码：在 Rd 文件中查找模式，并立即处理它。然而，让我们来看一下下一个无法以这种方式处理的部分：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The usage section always starts with a line that is **\usage{**, and ends with
    a line that is a single **}**. As this is the case, we can use these facts to
    create a slightly more complicated parser:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用部分总是以**\usage{** 开头，并以单个 **}** 结束。由于是这样，我们可以利用这些事实创建一个稍微复杂一点的解析器：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will read line-by-line, gathering up all of the text in the **\usage{}**
    section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将逐行读取，收集**\usage{}**部分中的所有文本。
- en: As we move on to the next most-complicated part, we have to start being a bit
    clever, and, for the first time, use the idea of “state.”
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们转到下一个最复杂的部分时，我们必须开始变得有点聪明，并且首次使用“状态”这一概念。
- en: 'Consider this LaTeX code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这段 LaTeX 代码：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is tricky. The top-level format is:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棘手。顶层格式是：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, DESCRIPTION can itself have curly braced items inside it. If you had
    this section of code as a string (even with newlines), you could use Python’s
    re (Regular Expression) module, like so:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，DESCRIPTION 本身可以包含大括号项。如果你有这一段代码作为字符串（即使包含换行），你可以使用 Python 的 re（正则表达式）模块，如下所示：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can get NAME and DESCRIPTION as **matches.groups()**. The parentheses in
    the re pattern **“{(.*)}{(.*)}”** indicate to match two groups: the first group
    between the first set of curly braces, and the second group between the next set.
    This works great, assuming that **text** is only that section. To be able to parse
    this without first breaking out this section we’ll actually have to parse the
    text, character by character. But this isn’t hard.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过**matches.groups()** 获取 NAME 和 DESCRIPTION。正则表达式模式**“{(.*)}{(.*)}”**中的括号表示匹配两个组：第一个组位于第一个大括号集之间，第二个组位于下一个大括号集之间。这很好用，前提是**text**
    只是那个部分。为了能够在不先拆分该部分的情况下进行解析，我们实际上必须逐个字符地解析文本。但这并不难。
- en: 'Here is a little function that will get a number of curly-brace sections given
    a file pointer (also known as a “file-like” in modern Python parlance):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小函数，它将在给定文件指针的情况下获取多个大括号部分（在现代 Python 行话中也称为“类文件”）：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the function **get_curly_contents()** you would pass in the number of curly-braced
    sections, and a file pointer. So, to get 2 curly braced sections from a file,
    you can do:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数**get_curly_contents()**中，你需要传入大括号部分的数量和一个文件指针。因此，要从文件中获取 2 个大括号部分，你可以这样做：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**get_curly_contents()** is almost as complicated as it gets in this project.
    It has three state variables: **retval**, **count**, and **current**. **retval**
    is a list of parsed sections. **count** is the depth of the current curly-braced
    items. **current** is what is currently being processed. This function is actually
    useful in a few places, as we will see.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**get_curly_contents()** 是这个项目中几乎最复杂的部分。它有三个状态变量：**retval**、**count** 和 **current**。**retval**
    是已解析部分的列表。**count** 是当前大括号项的深度。**current** 是当前正在处理的内容。这个函数实际上在一些地方非常有用，正如我们将看到的那样。'
- en: 'Finally, there is one more level of complexity. The problem area is the **Method**
    subsection of a R class definition. Here is a stripped-down example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is complicated because we have nested sections: **Usage** and **Arguments**
    are inside **Method**. We’re going to bring out the full parsing arsenal for this
    one.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this somewhat easier on ourselves, the first thing we’ll do is “tokenize”
    the **Method** subsection. That is a fancy word for breaking text into relevant
    strings. For example, consider this LaTeX text:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It could be tokenized into a list of strings, like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A list of tokenized string gives you the ability to easily process it into
    its sub-parts. In addition, you can easily “look-ahead” one or more tokens to
    see what is coming. This can be hard to do with Regular Expressions, or if you
    are dealing with individual characters rather than tokens. Here is an example
    of parsing a tokenized section:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'That’s it! To see the finished project, checkout the new Python-based [rd2md](https://github.com/comet-ml/rd2md/).
    It is a [pip-installable](https://pypi.org/project/rd2md/), open source Python
    library for generating markdown from R’s Rd files. We’ve used it on our own R
    documentation here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.comet.com/docs/v2/api-and-sdk/r-sdk/overview/](https://www.comet.com/docs/v2/api-and-sdk/r-sdk/overview/)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Is this a bit of an afternoon hack? Yes. It is composed of no less than 4 different
    methods of parsing. But it gets the job done, and is the only working Rd to markdown
    converter that works that I know of. If I were to refactor it, I’d probably tokenize
    the entire file first, and then process it using the last method shown above.
    Remember Rule 3: **Don’t be afraid to throw away code and start over!**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to contribute to the github repo, please do. If you have questions,
    please let us know in the [Issues](https://github.com/comet-ml/rd2md/issues).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '***Interested in Artificial Intelligence, Machine Learning, and Data Science?
    Consider a clap and a follow. Doug is Head of Research at*** [***comet.com***](https://www.comet.com/)***,
    an ML experiment-tracking and model-monitoring company.***'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
