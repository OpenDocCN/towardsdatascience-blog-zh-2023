- en: Test and Cover Your Code Today!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/test-and-cover-your-code-today-e80c27d08dab?source=collection_archive---------9-----------------------#2023-12-21](https://towardsdatascience.com/test-and-cover-your-code-today-e80c27d08dab?source=collection_archive---------9-----------------------#2023-12-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/af5766108dd178f5b281077655b09ca8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Yancy Min](https://unsplash.com/@yancymin?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A hands-on guide for adding a motivational GitHub action to your repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://itay-bittan.medium.com/?source=post_page-----e80c27d08dab--------------------------------)[![Itay
    Bittan](../Images/328e4d9b0b98b65e59e42983e9d1afaa.png)](https://itay-bittan.medium.com/?source=post_page-----e80c27d08dab--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e80c27d08dab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e80c27d08dab--------------------------------)
    [Itay Bittan](https://itay-bittan.medium.com/?source=post_page-----e80c27d08dab--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F43233e94ad28&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftest-and-cover-your-code-today-e80c27d08dab&user=Itay+Bittan&userId=43233e94ad28&source=post_page-43233e94ad28----e80c27d08dab---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e80c27d08dab--------------------------------)
    ·5 min read·Dec 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe80c27d08dab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftest-and-cover-your-code-today-e80c27d08dab&user=Itay+Bittan&userId=43233e94ad28&source=-----e80c27d08dab---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe80c27d08dab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftest-and-cover-your-code-today-e80c27d08dab&source=-----e80c27d08dab---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll start with a confession: as a software engineer, I hated and avoided writing
    tests for years. I came across so many dusty projects — some with no tests at
    all, others that had tests but those had never run as part of the CI/CD pipelines,
    and the last ones included really poor test coverage.'
  prefs: []
  type: TYPE_NORMAL
- en: On one hand, there are plenty of reasons why we should write tests but on the
    other, there are more excuses (or “justifications”) why we skip those.
  prefs: []
  type: TYPE_NORMAL
- en: 'While aiming to be a professional, I was always jealous of those shiny 100%
    test coverage open-source repositories and dreamed about that in my day-to-day
    repositories out there. Four years ago, while grappling with myself about that
    matter, I found [diff-cover](https://github.com/Bachmann1234/diff_cover), a great
    open-source project with a simple mission — cover your **own** changes with tests.
    Here is how the authors describe it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Diff coverage is the percentage of new or modified lines that are covered by
    tests. This provides a clear and achievable standard for code review: If you touch
    a line of code, that line should be covered. Code coverage is every developer’s
    responsibility!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In a nutshell, diff-cover assumes that you are using [Git](https://git-scm.com/)
    and running a coverage tool. Using git it’s easy to get **your** modified line
    numbers and compare them with the uncovered line numbers of your favorite coverage
    tool. Almost all of the coverage tools can yield a unified and generic XML format,
    no matter what your code language is (Python, JavaScript, etc.)
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, the process I have been doing until now as part of the CI was:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run all tests with a coverage tool, using the [pytest](https://pypi.org/project/pytest/)
    and [pytest-cov](https://pypi.org/project/pytest-cov/) packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: (note that it will create *coverage.xml* and *result.xml* report files).
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Run diff-cover tool, using the [diff-cover](https://pypi.org/project/diff-cover/)
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'which will print something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the output above, I’ve made changes in 3 different files,
    and each of them is fully covered (I had to add some new tests and other existing
    tests already covered some of my changes).
  prefs: []
  type: TYPE_NORMAL
- en: Seeing that Diff Coverage report on each PR (Pull Request) has made everyone
    addicted to achieving that 100%. We want to prove that we are responsible for
    our changes and can cover them, instead of being perceived as losers and getting
    a low percentage. Moreover, as a side effect, we have experienced smaller, incremental
    changes in PRs, which is another [best practice](https://www.awesomecodereviews.com/best-practices/code-review-best-practices/#small).
    That’s because everyone thinks twice before adding redundant lines of code now.
  prefs: []
  type: TYPE_NORMAL
- en: After using this methodology for a few years now, we see a constant increase
    in the overall coverage percentages of our repositories. As a result, there has
    been an increase in our production stability as well.
  prefs: []
  type: TYPE_NORMAL
- en: New GitHub Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A few months ago, my talented colleague [Asaf Gallea](https://medium.com/@asafgallea)
    decided to leverage this success into a simpler yet more powerful [new GitHub
    Action](https://github.com/aGallea/tests-coverage-report). This Action applies
    the same idea as diff-cover and also generates a friendly report as a comment
    in your Pull Request, providing links to uncovered lines in case you missed something.
    The new action also allows you to set a minimal coverage threshold (default to
    80%) — otherwise, the [status check](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks)
    will fail and you won’t be able to merge your changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0c7cc29e6f003b70fffc03d54fed10f.png)'
  prefs: []
  type: TYPE_IMG
- en: Test coverage action report (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In the image above we see the GitHub Action report example. There is a minimal
    threshold of 95%, there were 20 lines changed in this Pull Request, with 18 lines
    covered by tests, and two lines, 505–506 are not covered. Since we achieved only
    90% coverage for the changed files, the status check failed and it’s impossible
    to merge this into the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this report says nothing about the total coverage of the repository.
    It might be low (60%), and yet, any new change has to pass 95% so eventually,
    the total coverage will increase.
  prefs: []
  type: TYPE_NORMAL
- en: Setup tests-coverage-report action in your repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That’s it! Now let’s add this Action to **your** repository within a few steps.
    I will assume that it’s a Python project but you can add it to projects in different
    programming languages as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the repository’s root folder, create the `.github/workflows` folders if
    it does not yet exist. Now, within the `workflows` folder let’s create a new file
    called *test.yml* with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: make sure to replace the *<my_package>* and *<my_tests>* above with your package
    name and the tests folder accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s it! if you open a new Pull Request to add this file, the action should
    be fired automatically and you’ll see the report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/46a951d7e303527895870e26d9c1364e.png)'
  prefs: []
  type: TYPE_IMG
- en: Empty test coverage action report (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Note that since there are no changes in the package files (source files), there
    are no coverage details to present. The image above was taken from [my Pull Request](https://github.com/itayB/serversion/pull/14)
    while adding the test coverage action into one of my public repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have just completed the first action (double meaning) that will change your
    life and make you a better developer. Our generation is addicted to likes, claps,
    upvotes, and geeks like us to show off our professionalism with a 100% coverage
    report as well. We would love to get feedback, suggestions, and feature requests
    for this action that can enhance your testing experience and motivation.
  prefs: []
  type: TYPE_NORMAL
