["```py\nimport numpy as np\nimport pandas as pd\n\n# Sample Size\nN = 100_000\n\n# Confounders (X)\nage = np.random.randint(low=18,high=75,size=N)\nnum_social_media_profiles = np.random.choice([0,1,2,3,4,5,6,7,8,9,10], size = N)\nyr_membership = np.random.choice([0,1,2,3,4,5,6,7,8,9,10], size = N)\n\n# Arbitrary Covariates (Z)\nZ = np.random.normal(loc=50, scale = 25, size = N)\n\n# Error Terms\nε1 = np.random.normal(loc=20,scale=5,size=N)\nε2 = np.random.normal(loc=40,scale=15,size=N)\n\n# Treatment (T = g(X) + ε1)\ntime_on_website = np.maximum(10\n                             - 0.01*age \n                             - 0.001*age**2 \n                             + num_social_media_profiles \n                             - 0.01 * num_social_media_profiles**2\n                             - 0.01*(age * num_social_media_profiles)\n                             + 0.2 * yr_membership\n                             + 0.001 * yr_membership**2\n                             - 0.01 * (age * yr_membership)\n                             + 0.2 * (num_social_media_profiles * yr_membership)\n                             + 0.01 * (num_social_media_profiles * np.log(age) * age * yr_membership**(1/2))\n                             + ε1\n                               ,0)\n\n# Outcome (y = f(T,X,Z) + ε2)\nsales = np.maximum(25\n                   +  5 * time_on_website # Baseline Treatment Effect\n                   -  0.2 * time_on_website * age # Heterogeneity\n                   + 2 * time_on_website * num_social_media_profiles # Heterogeneity\n                   + 2 * time_on_website * yr_membership # Heterogeneity\n                   - 0.1*age \n                   - 0.001*age**2 \n                   + 8 * num_social_media_profiles \n                   - 0.1 * num_social_media_profiles**2\n                   - 0.01*(age * num_social_media_profiles)\n                   + 2 * yr_membership\n                   + 0.1 * yr_membership**2\n                   - 0.01 * (age * yr_membership)\n                   + 3 * (num_social_media_profiles * yr_membership)\n                   + 0.1 * (num_social_media_profiles * np.log(age) * age * yr_membership**(1/2))\n                   + 0.5 * Z\n                   + ε2\n                     ,0)\n\ndf = pd.DataFrame(np.array([sales,time_on_website,age,num_social_media_profiles,yr_membership,Z]).T\n                  ,columns=[\"sales\",\"time_on_website\",\"age\",\"num_social_media_profiles\",\"yr_membership\",\"Z\"])\n```", "```py\nimport statsmodels.formula.api as smf\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_predict\n\n# DML Procedure for Estimating the CATE\nM_sales = GradientBoostingRegressor()\nM_time_on_website = GradientBoostingRegressor()\n\ndf[‘residualized_sales’] = df[\"sales\"] - cross_val_predict(M_sales, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]], df[‘sales’], cv=3)\ndf[‘residualized_time_on_website’] = df[‘time_on_website’] - cross_val_predict(M_time_on_website, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]], df[‘time_on_website’], cv=3)\n\nDML_model = smf.ols(formula='residualized_sales ~ 1 + residualized_time_on_website + residualized_time_on_website:age + residualized_time_on_website:num_social_media_profiles + residualized_time_on_website:yr_membership', data = df).fit()\nprint(DML_model.summary())\n```", "```py\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n\n# Predict CATE of 1 hour increase \ndf_predictions = df[['residualized_time_on_website','age','num_social_media_profiles','yr_membership']].copy()\ndf_predictions['linear_DML_CATE']= (DML_model.predict(df_predictions.assign(residualized_time_on_website= lambda x : x.residualized_time_on_website + 1)) \n                                    - DML_model.predict(df_predictions))\n\n# True CATE of 1 hour increase\ndf_predictions['true_CATE'] = 5 - 0.2 * df_predictions['age'] + 2 * df_predictions['num_social_media_profiles'] + 2 * df_predictions['yr_membership']\n\n# Performance Metrics\nmean_squared_error(df_predictions['true_CATE'], df_predictions['linear_DML_CATE'])\nmean_absolute_error(df_predictions['true_CATE'], df_predictions['linear_DML_CATE'])\nr2_score(df_predictions['true_CATE'], df_predictions['linear_DML_CATE'])\n```", "```py\n# Outcome (y = f(T,X,Z) + ε2)\nsales = np.maximum( 25\n                   +  5 * time_on_website # Baseline Treatment Effect\n                   -  0.2 * time_on_website * age # Heterogeneity\n                   - 0.0005 * time_on_website * age**2 # Heterogeneity\n                   + 0.8 * time_on_website * num_social_media_profiles # Heterogeneity\n                   + 0.001 * time_on_website * num_social_media_profiles**2 # Heterogeneity\n                   + 0.8 * time_on_website * yr_membership # Heterogeneity\n                   + 0.001 * time_on_website * yr_membership**2 # Heterogeneity\n                   + 0.005 * time_on_website * yr_membership * num_social_media_profiles * age # Heterogeneity\n                   + 0.005 * time_on_website * (yr_membership**3 / (1 + num_social_media_profiles**2)) * np.log(age) ** 2 # Heterogeneity\n                   - 0.1*age \n                   - 0.001*age**2 \n                   + 8 * num_social_media_profiles \n                   - 0.1 * num_social_media_profiles**2\n                   - 0.01*(age * num_social_media_profiles)\n                   + 2 * yr_membership\n                   + 0.1 * yr_membership**2\n                   - 0.01 * (age * yr_membership)\n                   + 3 * (num_social_media_profiles * yr_membership)\n                   + 0.1 * (num_social_media_profiles * np.log(age) * age * yr_membership**(1/2))\n                   + 0.5 * Z\n                   + ε2\n                     ,0)\n\ndf = pd.DataFrame(np.array([sales,time_on_website,age,num_social_media_profiles,yr_membership,Z]).T\n                  ,columns=[\"sales\",\"time_on_website\",\"age\",\"num_social_media_profiles\",\"yr_membership\",\"Z\"])\n\n# DML Procedure\nM_sales = GradientBoostingRegressor()\nM_time_on_website = GradientBoostingRegressor()\n\ndf[‘residualized_sales’] = df[\"sales\"] - cross_val_predict(M_sales, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]], df[‘sales’], cv=3)\ndf['residualized_time_on_website'] = df[‘time_on_website’] - cross_val_predict(M_time_on_website, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]], df[‘time_on_website’], cv=3)\n\nDML_model = smf.ols(formula='residualized_sales ~ 1 + residualized_time_on_website + residualized_time_on_website:age + residualized_time_on_website:num_social_media_profiles + residualized_time_on_website:yr_membership', data = df).fit()\n\n# Predict CATE of 1 hour increase\ndf_predictions = df[['residualized_time_on_website','age','num_social_media_profiles','yr_membership']].copy()\ndf_predictions['linear_DML_CATE']= (DML_model.predict(df_predictions.assign(residualized_time_on_website= lambda x : x.residualized_time_on_website + 1)) \n                                    - DML_model.predict(df_predictions))\n\n# True CATE of 1 hour increase\ndf_predictions['true_CATE'] = (5 - 0.2*df_predictions['age'] - 0.0005*df_predictions['age']**2 + 0.8*df_predictions['num_social_media_profiles'] + 0.001*df_predictions['num_social_media_profiles']**2 \n                   + 0.8*df_predictions['yr_membership'] + 0.001*df_predictions['yr_membership']**2 + 0.005*df_predictions['yr_membership']*df_predictions['num_social_media_profiles']*df_predictions['age']\n                   + 0.005 * (df_predictions['yr_membership']**3 / (1 + df_predictions['num_social_media_profiles']**2)) * np.log(df_predictions['age'])**2)\n\n# Performance Metrics\nmean_squared_error(df_predictions['true_CATE'], df_predictions['linear_DML_CATE'])\nmean_absolute_error(df_predictions['true_CATE'], df_predictions['linear_DML_CATE'])\nr2_score(df_predictions['true_CATE'], df_predictions['linear_DML_CATE'])\n```", "```py\n# Define Target & Weights\ndf['target'] = df['residualized_sales'] / df['residualized_time_on_website']\ndf['weights'] = df['residualized_time_on_website']**2\n\n# Non-Parametric CATE Model\nCATE_model = GradientBoostingRegressor()\nCATE_model.fit(df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]], df['target'], sample_weight=df['weights'])\n```", "```py\n# CATE Predictions\ndf_predictions['Non_Parametric_DML_CATE'] = CATE_model.predict(df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]])\n\n# Performance Metrics\nmean_squared_error(df_predictions['true_CATE'], df_predictions['Non_Parametric_DML_CATE'])\nmean_absolute_error(df_predictions['true_CATE'], df_predictions['Non_Parametric_DML_CATE'])\nr2_score(df_predictions['true_CATE'], df_predictions['Non_Parametric_DML_CATE'])\n```"]