["```py\nimport numpy as np\nv = [10, 40, 30, 50]\nw = [5, 4, 6, 3]\nc = 10\ndp = np.zeros((5,11))\nfor i in range(1,5):\n    for j in range(1,11):\n        if j < w[i-1]:\n            dp[i,j] = dp[i-1,j]\n        else:\n            dp[i,j] = max(dp[i-1,j],dp[i-1,j-w[i-1]]+v[i-1]) \ndp[1:,1:]\n```", "```py\ndef knapsack(values, weights, capacity):\n    n = len(values)\n    # Initialize a table to store the maximum values for different capacities\n    dp = [[0] * (capacity + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for w in range(capacity + 1):\n            # If the current item's weight is more than the current capacity, skip it\n            if weights[i - 1] > w:\n                dp[i][w] = dp[i - 1][w]\n            else:\n                # Choose the maximum between including and excluding the current item\n                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])\n\n    # Backtrack to find the selected items\n    selected_items = []\n    i, w = n, capacity\n    while i > 0 and w > 0:\n        if dp[i][w] != dp[i - 1][w]:\n            selected_items.append(i - 1)\n            w -= weights[i - 1]\n        i -= 1\n\n    return dp[n][capacity], selected_items\n\n# Item values and weights\nvalues = [10, 40, 30, 50]\nweights = [5, 4, 6, 3]\nknapsack_capacity = 10\n\nmax_value, selected_items = knapsack(values, weights, knapsack_capacity)\n\nprint(f\"Maximum value: ${max_value}\")\nprint(\"Selected items:\")\nfor i in selected_items:\n    print(f\"Item {i + 1} (Value: ${values[i]}, Weight: {weights[i]} lbs)\")\n```", "```py\nimport numpy as np\nnp.random.seed(0)\nw = np.random.normal(10, 3, 100)\nw = [int(x) if x>= 1 else 1 for x in w]\nv = np.random.normal(100, 30, 100)\nv = [int(x) if x>= 10 else 10 for x in v]\n\ndp = np.zeros((101,501))\nfor i in range(1,101):\n    for j in range(1,501):\n        if j < w[i-1]:\n            dp[i,j] = dp[i-1,j]\n        else:\n            dp[i,j] = max(dp[i-1,j],dp[i-1,j-w[i-1]]+v[i-1]) \ndp[1:,1:]\n```", "```py\ndef knapsack(values, weights, capacity):\n    n = len(values)\n    dp = [[0] * (capacity + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for w in range(capacity + 1):\n            if weights[i - 1] > w:\n                dp[i][w] = dp[i - 1][w]\n            else:\n                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])\n\n    selected_items = []\n    i, w = n, capacity\n    while i > 0 and w > 0:\n        if dp[i][w] != dp[i - 1][w]:\n            selected_items.append(i - 1)\n            w -= weights[i - 1]\n        i -= 1\n\n    return dp[n][capacity], selected_items\n\n# Item values and weights\nvalues = [\n    156, 59, 61, 129, 64, 158, 87, 77, 157, 144, 156, 127, 74, 157, 91, 124,\n    128, 95, 118, 127, 111, 67, 108, 139, 79, 95, 86, 155, 120, 112, 76, 116,\n    79, 100, 80, 120, 117, 93, 111, 67, 55, 113, 105, 119, 171, 128, 72, 133,\n    60, 86, 97, 151, 77, 75, 97, 80, 133, 67, 65, 86, 85, 157, 128, 102, 63,\n    125, 69, 53, 135, 109, 127, 109, 125, 80, 68, 120, 75, 79, 86, 100, 89, 58,\n    80, 33, 118, 51, 66, 101, 77, 146, 61, 108, 98, 64, 115, 94, 123, 124, 164,\n    140\n]\n\nweights = [\n    15, 11, 12, 16, 15, 7, 12, 9, 9, 11, 10, 14, 12, 10, 11, 11, 14, 9, 10, 7,\n    2, 11, 12, 7, 16, 5, 10, 9, 14, 14, 10, 11, 7, 4, 8, 10, 13, 13, 8, 9, 6, 5,\n    4, 15, 8, 8, 6, 12, 5, 9, 7, 11, 8, 6, 9, 11, 10, 10, 8, 8, 7, 8, 7, 4, 10,\n    8, 5, 11, 7, 10, 12, 10, 13, 6, 11, 7, 7, 8, 9, 10, 6, 12, 11, 5, 14, 15, 13,\n    9, 6, 13, 8, 13, 10, 12, 11, 12, 10, 15, 10, 11\n]\n\nknapsack_capacity = 500\n\nmax_value, selected_items = knapsack(values, weights, knapsack_capacity)\n\nprint(f\"Maximum value: {max_value}\")\nprint(\"Selected items:\")\nfor i in selected_items:\n    print(f\"Item {i + 1} (Value: {values[i]}, Weight: {weights[i]})\")\n```"]