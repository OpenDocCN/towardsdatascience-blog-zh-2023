- en: Developing Interactive and Insightful Dashboards with Spark and Plotly Dash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/developing-interactive-and-insightful-dashboards-with-spark-and-plotly-dash-5c0805341922?source=collection_archive---------1-----------------------#2023-06-21](https://towardsdatascience.com/developing-interactive-and-insightful-dashboards-with-spark-and-plotly-dash-5c0805341922?source=collection_archive---------1-----------------------#2023-06-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Interactive Large-Scale Data Visualization for Web applications in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jadezhang244?source=post_page-----5c0805341922--------------------------------)[![Yu
    Huang, M.D., M.S. in CS](../Images/081af4b9fb5d1062b3e41b4cf54b2211.png)](https://medium.com/@jadezhang244?source=post_page-----5c0805341922--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5c0805341922--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5c0805341922--------------------------------)
    [Yu Huang, M.D., M.S. in CS](https://medium.com/@jadezhang244?source=post_page-----5c0805341922--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F759013c23ad5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-interactive-and-insightful-dashboards-with-spark-and-plotly-dash-5c0805341922&user=Yu+Huang%2C+M.D.%2C+M.S.+in+CS&userId=759013c23ad5&source=post_page-759013c23ad5----5c0805341922---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5c0805341922--------------------------------)
    ·11 min read·Jun 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5c0805341922&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-interactive-and-insightful-dashboards-with-spark-and-plotly-dash-5c0805341922&user=Yu+Huang%2C+M.D.%2C+M.S.+in+CS&userId=759013c23ad5&source=-----5c0805341922---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5c0805341922&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-interactive-and-insightful-dashboards-with-spark-and-plotly-dash-5c0805341922&source=-----5c0805341922---------------------bookmark_footer-----------)![](../Images/a84741208d0c9d75f3aebf2c0c5744d0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by Author
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud data lake is widely adopted by enterprise organizations as a scalable
    and low cost repository of all types (structured and unstructured) of data. There
    are many challenges in analyzing a large-scale dataset from data lake efficiently
    to gain meaningful insights for data-driven decision-making. One challenge is
    that the dataset size tends to be too big to fit in one single machine. A cluster
    of servers are typically required for handling a big dataset. Another challenge
    is how to share the results of data analysis on servers with related customers/share
    holders anywhere easily and cost effectively.
  prefs: []
  type: TYPE_NORMAL
- en: This paper uses the same open source dataset as used in [1] to present an open-source
    based Web application framework for the development of interactive and insightful
    dashboards using Spark [2][3] and Plotly Dash[4]. This framework allows us to
    analyze and visualize large-scale dataset on servers and share the results of
    data analysis and visualization as dashboards anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the Figure 1, the new Web application framework consists of three
    major components:'
  prefs: []
  type: TYPE_NORMAL
- en: Spark SQL service (e.g., DataFrame) for distributed data processing (see Section
    2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotly graphing service for creating data visualization graphs as dashboards
    (see Section 3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dash Web service for interaction between server-side Plotly graphing service
    and the dashboard clients (see Section 4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5ccf6f48b19b6c81bf5967746c48a31d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 1:** High-level application framework architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Spark SQL Service for Distributed Data Processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described in [2], PySpark (Python API for Spark) can be easily used to read
    *csv* files from Cloud data lake such as AWS S3\. For simplicity, it’s assumed
    in this paper that a dataset *csv* file *train_data.csv* [1] is available on local
    machine without loss of generality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is to load the *csv* file into memory as a Spark SQL DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After loading data, a global temporary view can be created as follows for the
    convenience of dynamic data query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once the dataset view is created, we can use Spark SQL to query data like common
    data query from a database. As an example, the following code queries all of the
    rows from *dataset_view* where the age of people falls into the range of [21,
    30].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In order to use Plotly to create data visualization graphs from a Spark DataFrame
    *sdf*, we must convert it into a Pandas DataFrame *pdf* because Plotly does not
    support Spark DataFrame directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Plotly for Creating Data Visualization Graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plotly supports generation of many different types of graphs. Some of them are
    suitable for creating graphs from continuous numeric features, while others are
    suitable for creating graphs from discrete categorical features.
  prefs: []
  type: TYPE_NORMAL
- en: This paper uses Plotly Express library to create the following common diagrams
    for demonstration purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '**Graphs for numeric features:** scatter plot, histogram chart, and line chart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graphs for categorical features:** bar chart, histogram chart, line chart,
    and pie chart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3.1 Graphs for Numeric Features**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As described before, three of common graphs for numeric features are:'
  prefs: []
  type: TYPE_NORMAL
- en: scatter plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: histogram chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given a pair of numeric features, scatter plot uses each pair of feature values
    as coordinates to draw a point on a 2D plane. As example, the following figure
    shows a scatter plot of two numeric features *Patient ID* and *Admission Deposit*
    for people from 21 to 30 years old. The feature *Type of Admission* is used for
    color coding.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b63e887e909c2f054cd2bac453813e63.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 2:** Sample scatter plot for a pair of numeric features.'
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that a dashboard user has selected age range [21, 30], a pair of numeric
    features *x* = *patientid* and *y* = *Admission_Deposit*, and *color* coding feature
    = *Type of Admission*, the following statement creates the above scatter plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the following statement is to create a histogram of the same data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/289d029f2adbe6cd802f307ab96fcf91.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 3:** Sample histogram for a pair of numeric features.'
  prefs: []
  type: TYPE_NORMAL
- en: To be complete, the following statement is used to create a line chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c2345109444641bd822b1efb276cdef2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4:** Sample line chart for a pair of numeric features.'
  prefs: []
  type: TYPE_NORMAL
- en: Even though we can easily create a line chart, but a line chart like the one
    above does not reveal useful insights. A good use of line chart is to apply it
    to a dataset that is sorted in a meaningful way such as a time-ordered sequence
    of data or a list of feature values sorted by counts as shown in Section 3.2.
  prefs: []
  type: TYPE_NORMAL
- en: '**3.2 Graphs for Categorical Features**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This subsection shows four of the common graphs for categorical features:'
  prefs: []
  type: TYPE_NORMAL
- en: bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: histogram chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assuming that a dashboard user has selected *age* = [*21–30*], categorical *feature*
    = *Stay*, *color* = *purple*, *graph style* = *bar*, the following code can be
    used to generate the bar chart below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I noticed that a histogram chart has the same result as a bar chart for categorical
    feature value counts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b3fbc600a2ac8c2e18d2e98ec56c4e3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 5:** Sample bar chart for value counts of a categorical feature.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create a line chart as follows by selecting *graph style* = *line*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/af328602ed38d039677b2fdfe01445b3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6:** Sample line chart for value counts of a categorical feature.'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, line chart is suitable for visualizing value counts of
    a categorical feature.
  prefs: []
  type: TYPE_NORMAL
- en: The code below is to create a pie chart for the value counts of the same categorical
    feature of *Stay*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This pie chart uses automatic color coding rather than the selected color *purple*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aaf6658b472f925ccc723375a2561dd5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 7:** Sample pie chart for value counts of a categorical feature.'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Dash for Interactive Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous section describes how to create dashboards with different types
    of graphs using Plotly Express library on a cluster of Spark servers. This section
    shows how to use Dash to share dashboards with Web application clients and allow
    clients to use the dashboards to visualize data in various ways interactively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following procedure can be followed to develop a one page dashboard of
    a Web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: import Dash library modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 2: create a Dash application object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: define a dashboard layout of HTML page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 4: define callback functions (Web service end points)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 5: start server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.1 Import Dash Library Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the first step, the Plotly Dash library modules are imported as follows for
    the purpose of demonstration in this paper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 4.2 Create Dash Application Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After importing library modules, the next step is to create a Dash application
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 4.3 Define Dashboard Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once a Dash application object is created, we need to define a dashboard layout
    as a HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dashboard HTML page is divided into two parts in this paper:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 1: visualization of numeric features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 2: visualization of categorical features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 1 of the dashboard layout is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Figures 2, 3, and 4 are created by using Part 1 of the dashboard layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2 of the dashboard layout is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Figures 5, 6, and 7 are created by using Part 2 of the dashboard layout.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Define Callback Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dashboard layout only creates a static HTML page of a dashboard. Callback
    functions (i.e., Web service end points) must be defined so that a dashboard user’s
    action can be sent to a server-side callback function as a Web service request.
    In other words, callback functions enable interaction between dashboard users
    and server-side dashboard Web services such as creating a new graph upon user
    request (e.g., select a dropdown choice).
  prefs: []
  type: TYPE_NORMAL
- en: There are two callback functions defined in this paper for the two parts of
    the dashboard layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback function for Part 1 of the dashboard layout is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The callback function for Part 2 of the dashboard layout is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Each callback function is associated with an annotation @*callback*. The annotation
    associated with a callback function controls which HTML components (e.g., dropdown)
    provide inputs to the callback function upon users’ request, and which HTML component
    (e.g., a graph within a *div* tag) receives the output of the callback function.
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 Start Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final step of a Dash Web application is to start a Web service server as
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following diagram shows one scenario of the dashboard when a dashboard
    user has selected the following choices in the dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '*age* from 21 to 30'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pair of numeric features *patientid* and *Admission_Deposit*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: categorical feature *Type of Admission* for color coding of numeric features
    visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*scatter* plot for numeric features visualization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical feature *Stay* for calculating featue value counts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color *blue* for bar, histogram, and line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*pie* graph with automatic color coding for visualization of categorical feature
    value counts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/1efd5dc30411f2bb345f600955dd786a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8:** One view of overall dashboard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example of gaining possible useful insights, the above dashboard scenario
    reveals the following insights:'
  prefs: []
  type: TYPE_NORMAL
- en: the majority of patients between 21–30 years old had a deposit between $3,000
    and $6,000 no matter how long they stayed in hospital
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the majority of patients between 21–30 years old stayed in hospital for 11–30
    days (27.6%) or 21–30 days (27.9%)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The figure below shows another scenario of the dashboard when a dashboard user
    has selected the following choices in the dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: age from 21 to 30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pair of numeric features *patientid* and *Admission_Deposit*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: categorical feature *Type of Admission* for color coding of numeric features
    visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: histogram for numeric features visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical feature *Type of Admission*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color *green* for bar, histogram, and line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bar chart for visualization of categorical feature value counts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/cce81db3eb4bc5e9c8a3b42564d3fa03.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9:** Another view of the overall dashboard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As another example of gaining possible useful insights, the above dashboard
    scenario reveals the following insights:'
  prefs: []
  type: TYPE_NORMAL
- en: the patients in urgent care had a higher total deposit than patients in other
    types of admission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the majority of patients were admitted as trauma
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In summary, the dashboard allows a user to visualize data in flexible ways
    to gain various useful insights interactively, including:'
  prefs: []
  type: TYPE_NORMAL
- en: visualizing both numeric and categorical features in a given range of age such
    as 0–10, 11–20, …, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: visualizing any pair of numeric features in scatter plots, histogram, and/or
    line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using any categorical feature values for color coding for numeric features visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: visualizing value counts of any categorical features as bar/histogram chart,
    line plot, and/or pie chart with different color coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This paper presented an open-source based Web application framework in Python
    for the development of interactive and insightful dashboards using Spark [3] and
    Plotly Dash[4]. This framework allows us to analyze large-scale dataset from Cloud
    data lake, create interactive dashboards on Spark servers, and allow users to
    interact with the dashboards anywhere to visualize data in flexible ways to gain
    various useful insights.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Yu Huang, [Predicting Hospitalized Time of Covid-19 Patients](/predicting-hospitalized-time-of-covid-19-patients-f4e70456db9b)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [PySpark AWS S3 Read Write Operations](https://towardsai.net/p/programming/pyspark-aws-s3-read-write-operations)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [Apache Spark examples](https://spark.apache.org/examples.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [Dash Python User Guide](https://dash.plotly.com/?_gl=1*1wl0w5v*_ga*MTQ5MTkwNjIwMi4xNjg3MTkzNTM0*_ga_6G7EE0JNSC*MTY4NzIxNTgwOC4yLjAuMTY4NzIxNTgwOC4wLjAuMA..)'
  prefs: []
  type: TYPE_NORMAL
