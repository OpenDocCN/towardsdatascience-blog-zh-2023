- en: Mixed Effects Machine Learning with GPBoost for Grouped and Areal Spatial Econometric
    Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/mixed-effects-machine-learning-with-gpboost-for-grouped-and-areal-spatial-econometric-data-b26f8bddd385?source=collection_archive---------3-----------------------#2023-06-21](https://towardsdatascience.com/mixed-effects-machine-learning-with-gpboost-for-grouped-and-areal-spatial-econometric-data-b26f8bddd385?source=collection_archive---------3-----------------------#2023-06-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A demo using European GDP data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@fabsig?source=post_page-----b26f8bddd385--------------------------------)[![Fabio
    Sigrist](../Images/f7bc2adc17255ae1efd0886a19ec202c.png)](https://medium.com/@fabsig?source=post_page-----b26f8bddd385--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b26f8bddd385--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b26f8bddd385--------------------------------)
    [Fabio Sigrist](https://medium.com/@fabsig?source=post_page-----b26f8bddd385--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb5b503a0c329&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-effects-machine-learning-with-gpboost-for-grouped-and-areal-spatial-econometric-data-b26f8bddd385&user=Fabio+Sigrist&userId=b5b503a0c329&source=post_page-b5b503a0c329----b26f8bddd385---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b26f8bddd385--------------------------------)
    ·14 min read·Jun 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb26f8bddd385&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-effects-machine-learning-with-gpboost-for-grouped-and-areal-spatial-econometric-data-b26f8bddd385&user=Fabio+Sigrist&userId=b5b503a0c329&source=-----b26f8bddd385---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb26f8bddd385&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-effects-machine-learning-with-gpboost-for-grouped-and-areal-spatial-econometric-data-b26f8bddd385&source=-----b26f8bddd385---------------------bookmark_footer-----------)![](../Images/062de699818ab3d483814ea714b96cbb.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'European GDP data: spatial effect and SHAP dependence plot for predictor variable
    ‘edu’ — Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: The [GPBoost algorithm](https://www.jmlr.org/papers/v23/20-322.html) extends
    linear mixed effects and Gaussian process models by replacing the linear fixed
    effects function with a non-parametric non-linear function modeled using tree-boosting.
    This article shows how the GPBoost algorithm implemented in the `[GPBoost](https://github.com/fabsig/GPBoost)`
    [library](https://github.com/fabsig/GPBoost) can be used for modeling data with
    a spatial and grouped structure. We demonstrate the functionality of the `GPBoost`
    library using European GDP data which is an example of areal spatial econometric
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ∘ [Introduction](#2d36)
  prefs: []
  type: TYPE_NORMAL
- en: · · [Basic workflow of GPBoost](#7b6e)
  prefs: []
  type: TYPE_NORMAL
- en: · · [Data description](#d3b9)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Data loading and short visualization](#be54)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Training a GPBoost model](#ef69)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Choosing tuning parameters](#e5e7)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Model interpretation](#b7b0)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Estimated random effects model](#54e9)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Spatial effect map](#c547)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Understanding the fixed effects function](#0ff8)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Extensions](#af79)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Separate random effects for different time periods](#756a)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Interaction between space and fixed effects predictor variables](#7121)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Large data](#c6c4)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[Other spatial random effects models](#24bc)
  prefs: []
  type: TYPE_NORMAL
- en: · ·[(Generalized) linear mixed effects and Gaussian process models](#4342)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [References](#376a)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basic workflow of GPBoost
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Applying a GPBoost model (= combined tree-boosting and random effects / GP
    models) involves the following main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a `GPModel` in which you specify the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '- A random effects model (e.g., spatial random effects, grouped random effects,
    combined spatial and grouped, etc.)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- The likelihood (= distribution of the response variable conditional on fixed
    and random effects)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a `gpb.Dataset` with the response variable and fixed effects predictor
    variables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose tuning parameters, e.g., using the function `gpb.grid.search.tune.parameters`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train the model with the `gpboost / gpb.train` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interpret the trained model an/or make predictions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this article, we demonstrate these steps using a real world data set. Besides,
    we also show how to interpret fitted models, and we look at several extensions
    and additional features of the `GPBoost` library. All results are obtained using
    `GPBoost` version 1.2.1\. This demo uses the R package, but the corresponding
    Python package provides the same functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Data description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data used in this demo is European gross domestic product (GDP) data. It
    can downloaded from [https://raw.githubusercontent.com/fabsig/GPBoost/master/data/gdp_european_regions.csv](https://raw.githubusercontent.com/fabsig/GPBoost/master/data/gdp_european_regions.csv).
    The data was collected by Massimo Giannini, University of Rome Tor Vergata, from
    Eurostat and kindly provided to Fabio Sigrist for a talk at the University of
    Rome Tor Vergata on June 16, 2023.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data was collected for 242 European regions for the two years 2000 and 2021\.
    I.e., the total number of data points is 484\. The response variable is (log)
    GDP / capita. There are four predictor variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'L: (log) share of employment (empl/pop)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'K: (log) fixed capital/population'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pop: log(population)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edu: share of tertiary education'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further, there are centroid spatial coordinates of every region (longitude and
    latitude), a spatial region ID for the 242 different European regions, and an
    additional spatial cluster ID which identifies the cluster the region belongs
    (there are two clusters).
  prefs: []
  type: TYPE_NORMAL
- en: Data loading and short visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first load the data and create a map illustrating the (log) GDP / capita
    over space. We create two maps: one with all data and another one when excluding
    some remote islands. In the commented code below, we also show how to create a
    spatial plot when no shape file for spatial polygons is available.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a9d02a89d33ceec0b1f6cc8e5f25df23.png)'
  prefs: []
  type: TYPE_IMG
- en: log GDP / capita for 242 European regions — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Training a GPBoost model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following, we use a Gaussian process model with an exponential covariance
    function to model spatial random effects. Additionally, we include grouped random
    effects for the cluster variable cl. In the `GPBoost` library, Gaussian process
    random effects are defined by the `gp_coords` argument and grouped random effects
    via the `group_data` argument of the `GPModel` constructor. The above-mentioned
    predictor variables are used in the fixed effects tree-ensemble function. We fit
    the model using the `gpboost`, or equivalently the `gpb.train`, function. Note
    that we use tuning parameters that are selected below using cross-validation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Choosing tuning parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important that tuning parameters are appropriately chosen for boosting.
    There are no universal default values and every data set will likely need different
    tuning parameters. Below we show how tuning parameters can be chosen using the
    `gpb.grid.search.tune.parameters` function. We use the mean square error (`mse`)
    as prediction accuracy measure on the validation data. Alternatively, one can
    also use, e.g., the test negative log-likelihood (`test_neg_log_likelihood` =
    default value if nothing is specified) which also takes prediction uncertainty
    into account. *Depending on the data set and the grid size, this can take some
    time. Instead of a deterministic grid search as below, one can also do a random
    grid search to speed things up (see* `*num_try_random*`*).*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Model interpretation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Estimated random effects model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Information on the estimated random effects model can be obtained by calling
    the `summary` function on the `gp_model`. For Gaussian processes, `GP_var` is
    the marginal variance, i.e., the amount of spatial correlation or structure spatial
    variation, and `GP_range` is the range, or scale, parameter that measures how
    fast correlation decays over space. For an exponential covariance function, three
    times this value (approx. 17 here) is the distance where the (residual) spatial
    correlation is essentially zero (below 5%). As the results below show, the amount
    of spatial correlation is relatively small since the marginal variance of 0.0089
    is small compared to the total variance of the response variable which is approx.
    0.29\. Additionally the error term and the cl grouped random effects also have
    small variances (0.013 and 0.022). We thus conclude that most of the variance
    in the response variable is explained by the fixed effects predictor variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Spatial effect map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can plot the estimated (“predicted”) spatial random effects at the training
    data locations by calling the `predict` function on the training data; see the
    code below. Such a plot shows the spatial effect when factoring out the effect
    of the fixed effects predictor variables. Note that these spatial effects take
    into account both the spatial Gaussian process and the grouped region cluster
    random effects. If one wants to obtain only spatial random effects from the Gaussian
    process part, one can use the `predict_training_data_random_effects` function
    (see the commented code below). Alternatively, one can also do spatial extrapolation
    (=“Kriging”), but this makes not a lot of sense for areal data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eec9eefd13bc12eb6b1d990b57abf579.png)'
  prefs: []
  type: TYPE_IMG
- en: Spatial effect (after factoring out the predictor variables) — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the fixed effects function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several tools for understanding the form of the fixed effects function.
    Below we consider variable importance measures, interaction measures, and dependence
    plots. Specifically, we look at
  prefs: []
  type: TYPE_NORMAL
- en: SHAP values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHAP dependence plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split-based variable importance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Friedman’s H-statistic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partial dependence plots (one and two-dimensional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHAP force plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the results below show, the information obtained from SHAP values and SHAP
    dependence plots is the same as when looking at traditional variable importance
    measures and partial dependence plots. The most important variables are ‘K’ and
    ‘edu’. From the dependence plots, we conclude that there are non-linearities.
    For instance, the effect of K is almost flat for large and small values of K and
    increasing in-between. Further, the effect of edu is steeper for small values
    of edu and flattens for larger values of edu. Friedman’s H-statistic indicates
    that there are some interactions. For the two variables with the largest amount
    of interaction, L and pop, we create a two-dimensional partial dependence plot
    below. Further, the SHAP force plot shows that the effect of the predictor variables
    is different for the year 2000 compared to the year 2021.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f27d1ca8969afa1d0b3a58297a1bd031.png)'
  prefs: []
  type: TYPE_IMG
- en: SHAP values — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6e0fac74d9d2505850ce6b95fa2fd422.png)![](../Images/0784fee59410db145bdd0cc7cc305343.png)'
  prefs: []
  type: TYPE_IMG
- en: SHAP dependence plots for K and edu— Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0e321d9eeb6a5fbb05aab9dc23ac2352.png)'
  prefs: []
  type: TYPE_IMG
- en: SHAP force plot — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0d4f954fa575c4dc0464cb08c414494b.png)'
  prefs: []
  type: TYPE_IMG
- en: Variable importances — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/69443fe3fb62bf9412af097b9fa98373.png)'
  prefs: []
  type: TYPE_IMG
- en: H interaction statistic — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/54e13345a6c9d75571cebbdfc6150a27.png)![](../Images/ea282da3803707bb230d8ee1538975da.png)'
  prefs: []
  type: TYPE_IMG
- en: Partial dependence plots for K and edu — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/796902abd05b6916537a9a57081eb09e.png)'
  prefs: []
  type: TYPE_IMG
- en: Two-dimensional partial dependence plot for pop and L — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Separate random effects for different time periods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the above model, we have used the same random effects for both years 2000
    and 2021\. Alternatively, one can also use independent spatial and grouped random
    effects for different time periods (*independent under the prior, conditional
    on the data, there is dependence …*). In the `GPBoost` library, this can be done
    via the `cluster_ids` argument. `cluster_ids` needs to be a vector of length the
    sample size, and every entry indicates the “cluster” to which an observation belongs
    to. Different clusters then have independent spatial and grouped random effects,
    but the hyperparameters (e.g., marginal variance, variance components, etc.) and
    the fixed effects function are the same across clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Below we show how we can fit such a model and create two separate spatial maps.
    As the results below show, the spatial effects are quite different for the two
    years 2000 and 2021\. In particular, there is less (residual) spatial variation
    (or heterogeneity) for the year 2021 compared to 2000\. This is confirmed by looking
    at standard deviations of the predicted spatial random effects which is almost
    twice as large for 2000 compared to the year 2021 (see below). A further conclusion
    is that in 2000, there were more regions with “low” GDP numbers (spatial effects
    below 0), and this is no longer the case for 2021.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6dab4d5f4eeff34fcfd44e99bc23831b.png)'
  prefs: []
  type: TYPE_IMG
- en: Separate spatial effects for the years 2000 and 2021 — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Interaction between space and fixed effects predictor variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the above model, there is no interaction between the random effects and the
    fixed effects predictor variables. I.e., there is no interaction between the spatial
    coordinates and the fixed effects predictor variables. Such interaction can be
    modeled by additionally including the random effects input variables (= the spatial
    coordinates or the categorical grouping variable) in the fixed effects function.
    The code below shows how this can be done. As the variable importance plot below
    shows, the coordinates are not used in the tree-ensemble, and there is thus no
    such interaction detectable for this data set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/771ff055b304b447e95a45ce89ba7cd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Variable importances when including coordinates in the tree-ensemble — Image
    by author
  prefs: []
  type: TYPE_NORMAL
- en: Large data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For large data sets, calculations with Gaussian processes are slow, and one
    has to use an approximation. The `GPBoost` library implements several ones. For
    instance, setting `gp_approx="vecchia"` in the `GPModel` constructor will use
    a Vecchia approximation. The data set used in this article is relatively small,
    and we can do all calculations exactly.
  prefs: []
  type: TYPE_NORMAL
- en: Other spatial random effects models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Above, we have used a Gaussian process to model spatial random effects. Since
    the data is areal data, another option is to use models that rely on neighborhood
    information such as CAR and SAR models. These models are currently not yet implemented
    in the `GPBoost` library (*might be added in the future -> contact the author*).
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to use a grouped random effects model defined by the categorical
    region ID variable for modeling spatial effects. The code below shows how this
    can be done in `GPBoost`. However, this model essentially ignores the spatial
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: (Generalized) linear mixed effects and Gaussian process models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (Generalized) linear mixed effects and Gaussian process models can also be run
    in the `GPBoost` library. The code below shows how this can be done with the `fitGPModel`
    function. Note that one needs to manually add a column of 1’s to include an intercept.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sigrist Fabio. “[Gaussian Process Boosting](https://www.jmlr.org/papers/v23/20-322.html)”.
    *Journal of Machine Learning Research* (2022).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sigrist Fabio. “[Latent Gaussian Model Boosting](https://ieeexplore.ieee.org/document/9759834)”.
    *IEEE Transactions on Pattern Analysis and Machine Intelligence* (2023).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/fabsig/GPBoost](https://github.com/fabsig/GPBoost)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The source of the dataset is Eurostat; see* [*https://ec.europa.eu/eurostat/about-us/policies/copyright*](https://ec.europa.eu/eurostat/about-us/policies/copyright)
    *for more information on the rights (“Eurostat has a policy of encouraging free
    re-use of its data, both for non-commercial and commercial purposes.”)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
