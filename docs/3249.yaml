- en: 'CI/CD Pipelines for Data Processing Applications on Azure Part 1: Container
    Instances'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据处理应用程序的 CI/CD 管道在 Azure 上 第 1 部分：容器实例
- en: 原文：[https://towardsdatascience.com/ci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280?source=collection_archive---------4-----------------------#2023-10-31](https://towardsdatascience.com/ci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280?source=collection_archive---------4-----------------------#2023-10-31)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/ci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280?source=collection_archive---------4-----------------------#2023-10-31](https://towardsdatascience.com/ci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280?source=collection_archive---------4-----------------------#2023-10-31)
- en: '![](../Images/0c7b6799dc1fa6706ea8e778ef1387dc.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c7b6799dc1fa6706ea8e778ef1387dc.png)'
- en: 'Image generated with The AI Comic Factory: [https://huggingface.co/spaces/jbilcke-hf/ai-comic-factory](https://huggingface.co/spaces/jbilcke-hf/ai-comic-factory)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由 AI Comic Factory 生成：[https://huggingface.co/spaces/jbilcke-hf/ai-comic-factory](https://huggingface.co/spaces/jbilcke-hf/ai-comic-factory)
- en: A Step-by Step Guide to Deploying Docker Containers with GitHub Actions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 部署 Docker 容器的逐步指南
- en: '[](https://peerchristensen.medium.com/?source=post_page-----6c8ec9578280--------------------------------)[![Peer
    Christensen](../Images/270e760cccbfed0bf15cb60f968d1377.png)](https://peerchristensen.medium.com/?source=post_page-----6c8ec9578280--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6c8ec9578280--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6c8ec9578280--------------------------------)
    [Peer Christensen](https://peerchristensen.medium.com/?source=post_page-----6c8ec9578280--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://peerchristensen.medium.com/?source=post_page-----6c8ec9578280--------------------------------)[![Peer
    Christensen](../Images/270e760cccbfed0bf15cb60f968d1377.png)](https://peerchristensen.medium.com/?source=post_page-----6c8ec9578280--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6c8ec9578280--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6c8ec9578280--------------------------------)
    [Peer Christensen](https://peerchristensen.medium.com/?source=post_page-----6c8ec9578280--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbcb4f0f95775&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280&user=Peer+Christensen&userId=bcb4f0f95775&source=post_page-bcb4f0f95775----6c8ec9578280---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6c8ec9578280--------------------------------)
    ·7 min read·Oct 31, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6c8ec9578280&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280&user=Peer+Christensen&userId=bcb4f0f95775&source=-----6c8ec9578280---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbcb4f0f95775&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280&user=Peer+Christensen&userId=bcb4f0f95775&source=post_page-bcb4f0f95775----6c8ec9578280---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6c8ec9578280--------------------------------)
    ·7 分钟阅读·2023 年 10 月 31 日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6c8ec9578280&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280&user=Peer+Christensen&userId=bcb4f0f95775&source=-----6c8ec9578280---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6c8ec9578280&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280&source=-----6c8ec9578280---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6c8ec9578280&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fci-cd-pipelines-for-data-processing-applications-on-azure-part-1-container-instances-6c8ec9578280&source=-----6c8ec9578280---------------------bookmark_footer-----------)'
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Manually creating and deploying resources to Azure and other cloud providers
    is relatively easy and may, in some case, be enough. However, more often than
    not, deployed resources will need to change over time, which in turn requires
    a lot of extra work maintaining and redeploying resources. In order to automate
    these tasks, developers and data professionals can instead use an infrastructure-as-code
    (IaC) approach and create pipelines for continuous integration and deployment
    (CI/CD). This approach enables developers to write code that automatically defines
    and redeploys resources whenever changes are made.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 手动创建和部署 Azure 及其他云提供商的资源相对简单，在某些情况下可能足够。然而，更多时候，已部署的资源需要随着时间的推移而更改，这反过来需要大量额外的工作来维护和重新部署资源。为了自动化这些任务，开发人员和数据专业人员可以使用基础设施即代码（IaC）方法，并创建用于持续集成和部署（CI/CD）的管道。这种方法使开发人员能够编写代码，自动定义和重新部署资源。
- en: 'In this step-by-step guide, we will build pipelines for a data processing application
    to perform the following tasks:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这份逐步指南中，我们将构建用于数据处理应用程序的管道，以执行以下任务：
- en: Provision a Container registry
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置一个容器注册表
- en: build and push a Docker Image to the registry
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建并推送 Docker 镜像到注册表
- en: create a Container Instance that runs the data processing workload
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个运行数据处理工作负载的容器实例
- en: enable ‘managed identity’ access to Azure Key Vault, which allows our application
    to retrieve access keys to other resources such as storage accounts
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用“托管身份”访问 Azure Key Vault，这样我们的应用程序可以检索到其他资源的访问密钥，例如存储帐户
- en: deploy the above resources to a test and a production environment using different
    triggers for running the pipelines
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将上述资源部署到测试环境和生产环境中，并使用不同的触发器来运行管道
- en: Getting started
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: For the purpose of demonstration, the application itself consists of a very
    simple R-script that loads a dataset, prints the first few rows and returns the
    dataset to a storage account. Keep in mind, that the application code is not important
    to the rest of the pipeline and can easily be substituted by your own code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，应用程序本身包括一个非常简单的 R 脚本，该脚本加载一个数据集，打印前几行，并将数据集返回到存储帐户。请记住，应用程序代码对其余的管道并不重要，可以轻松地用你自己的代码替代。
- en: To get started you will need an Azure account. You may also want to [install
    the Azure CLI](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli)
    on your local system. However, you can also choose to run Azure CLI commands through
    the Cloud Shell found in the Azure portal.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，你需要一个 Azure 帐户。你也可能想要在本地系统上[安装 Azure CLI](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli)。不过，你也可以选择通过
    Azure 门户中的 Cloud Shell 运行 Azure CLI 命令。
- en: As our application transfers data to and from Azure Blob Storage and returns,
    you may find it useful to install Azure Storage Explorer, which makes it a little
    easier to upload files and verify that the application runs correctly and returns
    the processed data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序将数据传输到 Azure Blob 存储并返回，你可能会发现安装 Azure Storage Explorer 很有用，它可以稍微简化文件上传和验证应用程序是否正确运行及返回处理过的数据的过程。
- en: 'Step 1: Cloning the repo and setting up static resources.'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：克隆仓库并设置静态资源。
- en: First you will need to clone [this repo](https://github.com/PeerChristensen/AzureDocker-CICD-Template).
    The README-file details how to do this using RStudio, but you’re free to use your
    preferred IDE.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要克隆[这个仓库](https://github.com/PeerChristensen/AzureDocker-CICD-Template)。README
    文件详细说明了如何使用 RStudio 执行此操作，但你可以自由选择你喜欢的 IDE。
- en: 'Next, using the Azure Portal, create the following resources:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 Azure 门户创建以下资源：
- en: a resource group that will contain all other resources.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个资源组，将包含所有其他资源。
- en: 'a storage account with a blob container with two folders: one for input files
    and another for output files. In our case, these should be named ‘input’ and ‘output’,
    respectively. Store a small dataset as a csv-file named ‘input_data.csv’ inside
    the input container.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有两个文件夹的存储帐户 Blob 容器：一个用于输入文件，另一个用于输出文件。在我们的案例中，这两个文件夹应分别命名为“input”和“output”。在输入容器中存储一个名为“input_data.csv”的小数据集。
- en: a key vault in which you will need to store the primary access key to your storage
    account as a secret.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个密钥库，你需要将存储帐户的主要访问密钥作为机密存储在其中。
- en: In step 3, you will need the name of your key vault as well as the name of your
    secret containing the primary access key.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 步中，你需要密钥库的名称以及包含主要访问密钥的机密名称。
- en: 'Step 2: linking GitHub to Azure'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2：将 GitHub 链接到 Azure
- en: In order to update Azure resources, we need to grant GitHub permission to do
    so.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新 Azure 资源，我们需要授予 GitHub 权限。
- en: First, login to your Azure account using the Azure CLI.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 Azure CLI 登录到你的 Azure 账户。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then copy the `id` value from the JSON output, which is the subscription id.
    Paste the subscription id into the command below and run it. This creates a ‘service
    principal’ with role-based access control, which may be thought of as a user acting
    on your behalf when deploying or updating resources with a GitHub Actions workflow.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从 JSON 输出中复制 `id` 值，这是订阅 id。将订阅 id 粘贴到下面的命令中并运行。这会创建一个具有基于角色的访问控制的“服务主体”，可以视作在使用
    GitHub Actions 工作流部署或更新资源时代表你的用户。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Copy the entire JSON output and go to your GitHub repo and click settings >
    Secrets and variables > Actions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 复制整个 JSON 输出，前往你的 GitHub 仓库，点击“设置” > “秘密和变量” > “操作”。
- en: Create a new repository secret and name it AZURE_CREDENTIALS. Paste in the JSON
    output from the above command and save.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的仓库秘密并将其命名为 AZURE_CREDENTIALS。将上述命令的 JSON 输出粘贴进去并保存。
- en: 'Step 3: modifying scripts'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步：修改脚本
- en: In this scenario, we are deploying a simple R-script that doesn’t do much. As
    such, the Dockerfile is also kept very simple. Both these files will obviously
    need to be modified according to your requirements and preferred programming language.
    However, if you’re new to this, it might be useful to get your pipeline up and
    running with the code as is before applying your own code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在部署一个简单的 R 脚本，它的功能不多。因此，Dockerfile 也保持非常简单。这两个文件显然需要根据你的要求和首选编程语言进行修改。然而，如果你对这方面不太熟悉，最好先使用现有代码将你的流水线启动运行，然后再应用自己的代码。
- en: If you choose to proceed with the current R-script (*script.R*), you will only
    need to modify the values `{keyvault-name}` , `{access-key-name}` and `{storage-account-name}`
    (omitting the brackets).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择继续使用当前的 R 脚本 (*script.R*)，你只需修改 `{keyvault-name}`、`{access-key-name}` 和
    `{storage-account-name}` 的值（省略括号）。
- en: 'Next, modify the following values under `env:` in the two workflow files called
    *workflow.yml* and *workflow_release_prod.yml* in the *.github/workflows/* directory:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，修改 *.github/workflows/* 目录下两个工作流文件 *workflow.yml* 和 *workflow_release_prod.yml*
    中 `env:` 下的以下值：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Step 4: running the pipeline and container instance'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步：运行流水线和容器实例
- en: When all relevant changes have been made and pushed to the ‘main’ branch, you
    should see your pipeline running under the Actions pane. This is because the workflow
    is set up with a branch trigger so that it runs when the main branch is updated.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有相关更改都已提交到“main”分支时，你应该可以在“操作”窗格下看到你的流水线运行。这是因为工作流设置了分支触发器，使其在主分支更新时运行。
- en: If you don’t encounter any errors, your container instance should be ready to
    run in ten minutes or so. Go to the Azure portal, find your new container instance
    and click Start. In the Logs pane, you may see your script running in the console.
    After completion, verify that a new cv-file called *output_data.csv* has landed
    in your blob container’s ‘output’ folder.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有遇到任何错误，你的容器实例应该在大约十分钟内准备好运行。前往 Azure 门户，找到你的新容器实例并点击“启动”。在日志窗格中，你可能会看到你的脚本在控制台中运行。完成后，验证是否在你的
    blob 容器的“output”文件夹中出现了一个名为*output_data.csv*的新 cv 文件。
- en: And that’s it! If you wish, you can now manually trigger the second workflow
    that creates an identical container instance intended for production workloads.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！如果愿意，你现在可以手动触发第二个工作流，以创建一个用于生产工作负载的相同容器实例。
- en: To get an understanding of what goes on in the CI/CD pipeline, please read the
    section below.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 CI/CD 流水线中发生了什么，请阅读以下部分。
- en: Understanding the workflow logic
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解工作流逻辑
- en: The workflow.yml file defines five steps, or jobs, in our pipeline that deploys
    resources to a test environment.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: workflow.yml 文件定义了我们流水线中的五个步骤或作业，这些步骤将资源部署到测试环境。
- en: '![](../Images/6fe04f92a99215b196b3deae95054bb8.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fe04f92a99215b196b3deae95054bb8.png)'
- en: Image by author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: First we pass the previously set environment variables required for the remaining
    steps as `outputs`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将之前设置的环境变量传递为 `outputs`，这些变量是后续步骤所需的。
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In step two, we create or update an existing container registry. Note that the
    `needs` key indicates that this step must wait for the previous step to complete.
    The `uses` key tells us that another file is used for this step while the `with`
    key is used to pass required values. We also need to pass or repository secret.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，我们创建或更新现有的容器注册表。请注意，`needs` 键指示此步骤必须等待前一步完成。`uses` 键告诉我们此步骤使用了另一个文件，而
    `with` 键用于传递所需的值。我们还需要传递或设置存储库的密钥。
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the top of the *deploy_acr.yml file* used in this step, we see thatthe script
    runs whenever called upon in the workflow as well as the required inputs that
    we provided in the *workflow.yml* file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在用于此步骤的 *deploy_acr.yml* 文件顶部，我们看到脚本在工作流中每次调用时运行，以及我们在 *workflow.yml* 文件中提供的所需输入。
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the bottom part of *deploy_acr.yml,* we have a multistep process running
    three predefined actions. The first action checks out the repo, then we login
    to Azure using the service principal credentials that we created and stored. Finally,
    we use the action called *azure/arm-deploy@v1* to deploy the container registry.
    Note that this step uses Bicep, which is a popular language for configuring and
    deploying Azure resources. AT the bottom of this article, you can find some excellent
    ressources to learn more about Bicep.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *deploy_acr.yml* 的底部，我们有一个多步骤过程运行三个预定义的操作。第一个操作检出代码库，然后我们使用我们创建并存储的服务主体凭据登录
    Azure。最后，我们使用名为 *azure/arm-deploy@v1* 的操作来部署容器注册表。请注意，此步骤使用了 Bicep，这是一个用于配置和部署
    Azure 资源的流行语言。在本文底部，你可以找到一些极好的资源来进一步了解 Bicep。
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, a Docker Image is built and pushed to the registry in step three using
    the file called *build_push_container.yml,* which runs Azure CLI commands to retrieve
    crendetials for the Container registry, as well as Docker commands to build and
    push the Docker Image.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第三步中使用名为 *build_push_container.yml* 的文件构建并推送 Docker 镜像到注册表，该文件运行 Azure CLI
    命令以检索容器注册表的凭据，以及 Docker 命令以构建和推送 Docker 镜像。
- en: In step four, the container instance is provisioned based on our Docker image.
    This step is carried out by means of the file called *deploy_aci.yml,* which,
    in turn, used the predefined action called‘azure/aci-deploy@v1’.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四步中，容器实例根据我们的 Docker 镜像进行配置。此步骤通过名为 *deploy_aci.yml* 的文件进行，该文件使用了名为 ‘azure/aci-deploy@v1’
    的预定义操作。
- en: 'In the final step using the file *kv_access.yml*, we grant the container instance
    permission to access the key vault through a ‘managed identity’, which means that
    the container can retrieve secrets from the key vault directly without using an
    access key. In order to achieve this, we need to update the deployed container
    instance using the Azure CLI command `az container create` and provide the various
    parameters that we used earlier. In addition, we provide the following setting:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步中使用 *kv_access.yml* 文件，我们授权容器实例通过“受管身份”访问密钥库，这意味着容器可以直接从密钥库中检索密钥，而无需使用访问密钥。为实现这一点，我们需要使用
    Azure CLI 命令 `az container create` 更新已部署的容器实例，并提供我们之前使用的各种参数。此外，我们提供了以下设置：
- en: '`— assign-identity — scope ${{ steps.rg_id_step.outputs.rg_id }}`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`— assign-identity — scope ${{ steps.rg_id_step.outputs.rg_id }}`'
- en: 'As a final note, you may have noticed the following lines in *workflow.yml*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能已经注意到 *workflow.yml* 中的以下行：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These lines indicate when and under what conditions our pipeline should run.
    In our scenario, we want the pipeline to run when changes are pushed to the ‘main’
    branch. In addition, we want to be able to run it manually. This is enabled by
    adding `workflow_dispatch:` . In the production pipeline defined in *workflow_prod_release.yml,*
    you’ll notice that releasing to production only has a manual trigger. There are
    many other ways to configure how pipeline runs are triggered. For instance, you
    may ignore changes in specific files or folders, such that only changes to the
    application code will trigger new deployments.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行指示了我们的管道应在何时以及在什么条件下运行。在我们的场景中，我们希望当更改推送到‘main’分支时管道运行。此外，我们还希望能够手动运行它。这通过添加
    `workflow_dispatch:` 实现。在 *workflow_prod_release.yml* 文件中定义的生产管道中，你会注意到生产发布只有一个手动触发。还有许多其他方法可以配置管道运行的触发方式。例如，你可以忽略特定文件或文件夹中的更改，以便只有对应用程序代码的更改会触发新的部署。
- en: Further reading
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you want to learn more about GitHub Actions an bicep, I highly recommend
    the following resources from the MS Learn platform:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 GitHub Actions 和 Bicep 的内容，我强烈推荐 MS Learn 平台上的以下资源：
- en: '**GitHub Actions**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Actions**'
- en: '[https://learn.microsoft.com/en-us/training/modules/introduction-to-github-actions/](https://learn.microsoft.com/en-us/training/modules/introduction-to-github-actions/)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/zh-cn/training/modules/introduction-to-github-actions/](https://learn.microsoft.com/zh-cn/training/modules/introduction-to-github-actions/)'
- en: '[https://learn.microsoft.com/en-us/training/modules/learn-continuous-integration-github-actions/](https://learn.microsoft.com/en-us/training/modules/learn-continuous-integration-github-actions/)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/zh-cn/training/modules/learn-continuous-integration-github-actions/](https://learn.microsoft.com/zh-cn/training/modules/learn-continuous-integration-github-actions/)'
- en: '[https://learn.microsoft.com/en-us/training/modules/github-actions-automate-tasks/](https://learn.microsoft.com/en-us/training/modules/github-actions-automate-tasks/)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/zh-cn/training/modules/github-actions-automate-tasks/](https://learn.microsoft.com/zh-cn/training/modules/github-actions-automate-tasks/)'
- en: '[https://learn.microsoft.com/en-us/training/modules/github-actions-ci/](https://learn.microsoft.com/en-us/training/modules/github-actions-ci/)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/zh-cn/training/modules/github-actions-ci/](https://learn.microsoft.com/zh-cn/training/modules/github-actions-ci/)'
- en: '[https://learn.microsoft.com/en-us/training/modules/github-actions-cd/](https://learn.microsoft.com/en-us/training/modules/github-actions-cd/)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/zh-cn/training/modules/github-actions-cd/](https://learn.microsoft.com/zh-cn/training/modules/github-actions-cd/)'
- en: '**Bicep:**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bicep：**'
- en: '[https://learn.microsoft.com/en-us/training/paths/fundamentals-bicep/](https://learn.microsoft.com/en-us/training/paths/fundamentals-bicep/)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/zh-cn/training/paths/fundamentals-bicep/](https://learn.microsoft.com/zh-cn/training/paths/fundamentals-bicep/)'
- en: '[https://learn.microsoft.com/en-us/training/paths/bicep-github-actions/](https://learn.microsoft.com/en-us/training/paths/bicep-github-actions/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/zh-cn/training/paths/bicep-github-actions/](https://learn.microsoft.com/zh-cn/training/paths/bicep-github-actions/)'
