- en: Super Charge Your ML Systems In 4 Simple Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4个简单步骤让你的机器学习系统超充电
- en: 原文：[https://towardsdatascience.com/super-charge-your-ml-systems-in-4-simple-steps-4485f0208440?source=collection_archive---------6-----------------------#2023-10-27](https://towardsdatascience.com/super-charge-your-ml-systems-in-4-simple-steps-4485f0208440?source=collection_archive---------6-----------------------#2023-10-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/super-charge-your-ml-systems-in-4-simple-steps-4485f0208440?source=collection_archive---------6-----------------------#2023-10-27](https://towardsdatascience.com/super-charge-your-ml-systems-in-4-simple-steps-4485f0208440?source=collection_archive---------6-----------------------#2023-10-27)
- en: '![](../Images/f57a9771668a09508fbbd608c1e742be.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f57a9771668a09508fbbd608c1e742be.png)'
- en: Image generated with DALL.E-3
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DALL.E-3 生成的图像
- en: '[](https://medium.com/@donaljbyrne?source=post_page-----4485f0208440--------------------------------)[![Donal
    Byrne](../Images/4695fec999da472bbd5116de6ed7cc5d.png)](https://medium.com/@donaljbyrne?source=post_page-----4485f0208440--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4485f0208440--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4485f0208440--------------------------------)
    [Donal Byrne](https://medium.com/@donaljbyrne?source=post_page-----4485f0208440--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@donaljbyrne?source=post_page-----4485f0208440--------------------------------)[![Donal
    Byrne](../Images/4695fec999da472bbd5116de6ed7cc5d.png)](https://medium.com/@donaljbyrne?source=post_page-----4485f0208440--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4485f0208440--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4485f0208440--------------------------------)
    [Donal Byrne](https://medium.com/@donaljbyrne?source=post_page-----4485f0208440--------------------------------)'
- en: ·
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdbf9e722f39d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsuper-charge-your-ml-systems-in-4-simple-steps-4485f0208440&user=Donal+Byrne&userId=dbf9e722f39d&source=post_page-dbf9e722f39d----4485f0208440---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4485f0208440--------------------------------)
    ·8 min read·Oct 27, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4485f0208440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsuper-charge-your-ml-systems-in-4-simple-steps-4485f0208440&user=Donal+Byrne&userId=dbf9e722f39d&source=-----4485f0208440---------------------clap_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdbf9e722f39d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsuper-charge-your-ml-systems-in-4-simple-steps-4485f0208440&user=Donal+Byrne&userId=dbf9e722f39d&source=post_page-dbf9e722f39d----4485f0208440---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4485f0208440--------------------------------)
    · 8 分钟阅读 · 2023年10月27日 [](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4485f0208440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsuper-charge-your-ml-systems-in-4-simple-steps-4485f0208440&user=Donal+Byrne&userId=dbf9e722f39d&source=-----4485f0208440---------------------clap_footer-----------)'
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4485f0208440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsuper-charge-your-ml-systems-in-4-simple-steps-4485f0208440&source=-----4485f0208440---------------------bookmark_footer-----------)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4485f0208440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsuper-charge-your-ml-systems-in-4-simple-steps-4485f0208440&source=-----4485f0208440---------------------bookmark_footer-----------)'
- en: Welcome to the rollercoaster of ML optimization! This post will take you through
    my process for optimizing any ML system for lightning-fast training and inference
    in 4 simple steps.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到机器学习优化的过山车之旅！这篇文章将带你了解我的优化任何机器学习系统以实现闪电般快速训练和推理的4个简单步骤。
- en: 'Imagine this: You finally get put on a cool new ML project where you are training
    your agent to count how many hot dogs are in a photo, the success of which could
    possibly make your company tens of dollars!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下：你终于被分配到一个酷炫的新机器学习项目中，你正在训练你的智能体来统计照片中的热狗数量，其成功可能为你的公司带来数十美元的收入！
- en: You get the latest hotshot object detection model implemented in your favourite
    framework that has lots of GitHub stars, run some toy examples and after an hour
    or so it’s picking out hotdogs like a broke student in their 3rd repeat year of
    college, life is good.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你在你最喜欢的框架中实现了最新的炙手可热的物体检测模型，该模型有很多 GitHub 星标，运行一些玩具示例，经过一个小时左右，它就像一个在大学第3年重修的穷学生一样准确地识别热狗，生活美好。
- en: The next steps are obvious, we want to scale it up to some harder problems,
    this means more data, a larger model and of course, longer training time. Now
    you are looking at days of training instead of hours. That’s fine though, you
    have been ignoring the rest of your team for 3 weeks now and should probably spend
    a day getting through the backlog of code reviews and passive-aggressive emails
    that have built up.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步显而易见，我们想将其扩展到更困难的问题，这意味着更多的数据、更大的模型，当然，还有更长的训练时间。现在你需要面对几天的训练时间，而不是几个小时。不过没关系，你已经忽视你的团队3周了，可能应该花一天时间处理积压的代码审查和被动攻击的电子邮件。
- en: You come back a day later after feeling good about the insightful and absolutely
    necessary nitpicks you left on your colleagues MR’s, only to find your performance
    tanked and crashed post a 15-hour training stint (karma works fast).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你在为你在同事的MR上留下的有见地且绝对必要的细节而感到满意的一天后回来，结果发现你的性能崩溃了，在经历了15小时的训练后（因果报应来得很快）。
- en: 'The ensuing days morph into a whirlwind of trials, tests and experiments, with
    each potential idea taking more than a day to run. These quickly start racking
    up hundreds of dollars in compute costs, all leading to the big question: How
    can we make this faster and cheaper?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几天变成了试验、测试和实验的旋风，每个潜在的想法都需要超过一天的运行时间。这些迅速开始积累数百美元的计算成本，所有这些都导致了一个大问题：我们如何才能让这一切变得更快、更便宜？
- en: 'Welcome to the emotional rollercoaster of ML optimization! Here’s a straightforward
    4-step process to turn the tides in your favour:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到机器学习优化的情感过山车！这里有一个简单的4步流程，可以使局势对你有利：
- en: Benchmark
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基准测试
- en: Simplify
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简化
- en: Optimize
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优化
- en: Repeat
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复
- en: This is an iterative process, and there will be many times when you repeat some
    steps before moving on to the next, so it’s less of a 4 step system and more of
    a toolbox, but 4 steps sounds better.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代过程，很多时候你会在进行下一步之前重复某些步骤，所以这不只是一个4步系统，更像是一个工具箱，但4步听起来更好。
- en: 1 — Benchmark
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 — 基准测试
- en: “Measure twice, cut once” *— Someone wise*.
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “测量两次，切割一次”*—某位智者*。
- en: 'The first (and probably second) thing you should always do, is profile your
    system. This can be something as simple as just timing how long it takes to run
    a specific block of code, or as complex as doing a full profile trace. What matters
    is you have enough information to identify the bottlenecks in your system. I carry
    out multiple benchmarks depending on where we are in the process and typically
    break it down into 2 types: high-level and low-level benchmarking.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终做的第一件（可能也是第二件）事是对系统进行性能分析。这可以是简单地计时特定代码块运行所需的时间，也可以是复杂的全程性能跟踪。重要的是你有足够的信息来识别系统中的瓶颈。我根据我们在过程中所处的阶段进行多次基准测试，并通常将其分为两种类型：高层次和低层次基准测试。
- en: High Level
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高层次
- en: This is the sort of stuff you will be showing your boss at the weekly “How f**cked
    are we?” meeting and would want these metrics as part of every run. These will
    give you a high-level sense of how performant your system is running.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你会在每周“我们到底有多糟糕？”会议上向老板展示的内容，并希望这些指标成为每次运行的一部分。这些将给你一个关于系统性能的高层次感受。
- en: '**Batches Per Second** — how quickly are we getting through each of our batches?
    this should be as high as possible'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Batches Per Second**——我们每秒处理多少批次？这应该尽可能高。'
- en: '**Steps Per Second** — (RL specific) how quickly are we stepping through our
    environment to generate our data, should be as high as possible. There are some
    complicated interplays between step time and train batches that I won’t get into
    here.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Steps Per Second**——（特指强化学习）我们在环境中生成数据的速度是多少，应该尽可能高。这里有一些复杂的步伐时间与训练批次之间的相互作用，我在这里不详细讨论。'
- en: '**GPU Util** — how much of your GPU is being utilised during training? This
    should be consistently as close to 100%, if not then you have idle time that can
    be optimized.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**GPU Util**——在训练过程中你的GPU使用了多少？这应该始终接近100%，如果不是，那么你有可以优化的空闲时间。'
- en: '**CPU Util** — how much of your CPUs are being utilised during training? Again,
    this should be as close to 100% as possible.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**CPU Util**——在训练过程中你的CPU使用了多少？同样，这应该尽可能接近100%。'
- en: '**FLOPS** — floating point operations per second, this gives you a view of
    how effectively are you using your total hardware.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**FLOPS**——每秒浮点运算次数，这能让你了解你是如何有效利用总硬件的。'
- en: Low Level
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低层次
- en: Using the metrics above you can then start to look deeper as to where your bottleneck
    might be. Once you have these, you want to start looking at more fine-grained
    metrics and profiling.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述指标后，你可以进一步深入查看瓶颈可能出现在何处。一旦有了这些信息，你需要开始查看更细粒度的指标和分析。
- en: '**Time Profiling** — This is the simplest, and often most useful, experiment
    to run. Profiling tools like [cprofiler](https://docs.python.org/3/library/profile.html)
    can be used to get a bird’s eye view of the timing of each of your components
    as a whole or can look at the timing of specific components.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间分析** — 这是最简单且通常最有用的实验。像[cprofiler](https://docs.python.org/3/library/profile.html)这样的分析工具可以帮助你从整体上了解每个组件的时间消耗，或者查看特定组件的时间。'
- en: '**Memory Profiling** — Another staple of the optimization toolbox. Big systems
    require a lot of memory, so we have to make sure we are not wasting any of it!
    tools like [memory-profiler](https://pypi.org/project/memory-profiler/) will help
    you narrow down where your system is eating up your RAM.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存分析** — 另一个优化工具箱中的常见工具。大型系统需要大量内存，所以我们必须确保没有浪费内存！像[memory-profiler](https://pypi.org/project/memory-profiler/)这样的工具将帮助你缩小系统消耗RAM的范围。'
- en: '**Model Profiling** — Tools like [Tensorboard](https://www.tensorflow.org/tensorboard/get_started#:~:text=TensorBoard%20is%20a%20tool%20for,dimensional%20space%2C%20and%20much%20more.)
    come with excellent profiling tools for looking at what is eating up your performance
    within your model.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型分析** — 像[Tensorboard](https://www.tensorflow.org/tensorboard/get_started#:~:text=TensorBoard%20is%20a%20tool%20for,dimensional%20space%2C%20and%20much%20more.)这样的工具提供了优秀的分析工具，用于查看你的模型中哪些部分正在消耗性能。'
- en: '**Network Profiling** — Network load is a common culprit for bottlenecking
    your system. There are tools like [wireshark](https://www.wireshark.org/) to help
    you profile this, but to be honest I never use it. Instead, I prefer to do time
    profiling on my components and measure the total time it is taking within my component
    and then isolate how much time is coming from the network I/O itself.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络分析** — 网络负载是导致系统瓶颈的常见原因。像[wireshark](https://www.wireshark.org/)这样的工具可以帮助你进行网络分析，但说实话，我从未使用过。相反，我更倾向于对我的组件进行时间分析，测量组件内部所需的总时间，然后隔离网络I/O本身所花费的时间。'
- en: Make sure to check out this great article on profiling in Python from [RealPython](https://realpython.com/python-profiling/)
    for more info!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 确保查看这篇关于Python性能分析的优秀文章，[RealPython](https://realpython.com/python-profiling/)，以获取更多信息！
- en: 2 — Simplify
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 — 简化
- en: Once you have identified an area in your profiling that needs to be optimized,
    simplify it. Cut out everything else except that part. Keep reducing the system
    down to smaller parts until you reach the bottleneck. Don’t be afraid to profile
    as you simplify, this will ensure that you are going in the right direction as
    you iterate. Keep repeating this until you find your bottleneck.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在性能分析中确定了需要优化的区域，就要进行简化。去除除该部分之外的所有内容。继续将系统简化为更小的部分，直到找到瓶颈。不要害怕在简化过程中进行性能分析，这将确保你在迭代过程中走在正确的方向上。继续重复这个过程，直到找到你的瓶颈。
- en: Tips
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示
- en: Replace other components with stubs and mock functions that just provide expected
    data.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用存根和模拟函数替换其他组件，这些存根和模拟函数仅提供预期的数据。
- en: Simulate heavy functions with `sleep` functions or dummy calculations.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sleep`函数或虚拟计算来模拟重负载函数。
- en: Use dummy data to remove the overhead of the data generation and processing.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟数据以去除数据生成和处理的开销。
- en: Start with local, single-process versions of your system before moving to distributed.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从本地、单进程版本的系统开始，然后再转到分布式系统。
- en: Simulate multiple nodes and actors on a single machine to remove the network
    overhead.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单台机器上模拟多个节点和演员，以去除网络开销。
- en: Find the theoretical max performance for each part of the system. If all of
    the other bottlenecks in the system were gone except for this component, what
    is our expected performance?
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找出系统每个部分的理论最大性能。如果系统中所有其他瓶颈都消除了，除了这个组件，我们的预期性能是什么？
- en: Profile again! Each time you simplify the system, re-run your profiling.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次进行性能分析！每次简化系统时，重新运行你的性能分析。
- en: Questions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Once we have zoned in on the bottleneck there are some key questions we want
    to answer
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们锁定了瓶颈，就有一些关键问题需要回答。
- en: '**What is the theoretical max performance of this component?**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**这个组件的理论最大性能是多少？**'
- en: If we have sufficiently isolated the bottlenecked component then we should be
    able to answer this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经充分隔离了瓶颈组件，那么应该能够回答这些问题。
- en: '**How far away are we from the max?**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们距离最大性能还有多远？**'
- en: This optimality gap will inform us on how optimized our system is. Now, it could
    be the case that there are other hard constraints once we introduce the component
    back into the system and that’s fine, but it is crucial to at least be aware of
    what the gap is.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最优性差距将告诉我们系统的优化程度。现在，可能会出现其他硬性约束，一旦我们将组件重新引入系统中，这也是可以接受的，但至少要意识到这个差距。
- en: '**Is there a deeper bottleneck?**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**是否存在更深层的瓶颈？**'
- en: Always ask yourself this, maybe the problem is deeper than you initially thought,
    in which case, we repeat the process of benchmarking and simplifying.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 总是问自己这个问题，也许问题比你最初想到的更深层次，在这种情况下，我们需要重复基准测试和简化的过程。
- en: 3 — Optimize
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 — 优化
- en: Okay, so let’s say we have identified the biggest bottleneck, now we get to
    the fun part, how do we improve things? There are usually 3 areas that we should
    be looking at for possible improvements
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经识别出了最大的瓶颈，现在进入有趣的部分，我们怎么改进？通常我们应该关注 3 个可能的改进领域。
- en: '**Compute**'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计算**'
- en: '**Communication**'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通信**'
- en: '**Memory**'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**内存**'
- en: Compute
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算
- en: In order to reduce computation bottlenecks we need to look at being as efficient
    as possible with the data and algorithms we are working with. This is obviously
    project-specific and there is a huge amount of things that can be done, but let’s
    look at some good rules of thumb.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少计算瓶颈，我们需要尽可能高效地使用数据和算法。这显然是项目特定的，有很多可以做的事情，但让我们来看一些好的经验法则。
- en: '**Parallelising** — make sure that you carry out as much work as possible in
    parallel. This is the first big win in designing your system that can massively
    impact performance. Look at methods like vectorisation, batching, multi-threading
    and multi-processing.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**并行化** — 确保尽可能多地进行并行工作。这是设计系统时第一个显著的胜利，可以大幅度提升性能。考虑使用向量化、批处理、多线程和多进程等方法。'
- en: '**Caching** — pre-compute and reuse calculations where you can. Many algorithms
    can take advantage of reusing pre-computed values and save critical compute for
    each of your training steps.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓存** — 尽可能地预计算和重用计算结果。许多算法可以利用预计算的值，从而节省每一步训练中的关键计算。'
- en: '**Offloading** — we all know that Python is not known for its speed. Luckily
    we can offload critical computations to lower level languages like C/C++.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**卸载** — 我们都知道 Python 速度不快。幸运的是，我们可以将关键计算卸载到低级语言如 C/C++。'
- en: '**Hardware Scaling** — This is kind of a cop-out, but when all else fails,
    we can always just throw more computers at the problem!'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**硬件扩展** — 这有点偷懒，但当一切都失败时，我们总可以增加更多的计算机来解决问题！'
- en: Communication
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通信
- en: 'Any seasoned engineer will tell you that communication is key to delivering
    a successful project, and by that, we of course mean communication within our
    system (God forbid we ever have to talk to our colleagues). Some good rules of
    thumb are:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 任何经验丰富的工程师都会告诉你，沟通是成功交付项目的关键，我们当然是指系统内部的沟通（天哪，我们希望不要跟同事交流）。一些好的经验法则包括：
- en: '**No Idle Time** — All of your available hardware must be utilised at all times,
    otherwise you are leaving performance gains on the table. This is usually due
    to complications and overhead of communication across your system.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**无闲置时间** — 你所有可用的硬件必须始终被利用，否则你将错失性能提升。这通常是由于系统间通信的复杂性和开销所致。'
- en: '**Stay Local** — Keep everything on a single machine for as long as possible
    before moving to a distributed system. This keeps your system simple as well as
    avoids the communication overhead of a distributed system.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**保持本地化** — 在迁移到分布式系统之前，尽可能长时间地将所有内容保留在单台机器上。这使你的系统保持简单，同时避免了分布式系统的通信开销。'
- en: '**Async > Sync** — Identify anything that can be done asynchronously, this
    will help offload the cost of communication by keeping work moving while data
    is being moved.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步 > 同步** — 识别任何可以异步完成的任务，这将有助于通过在数据移动的同时保持工作进行，从而减轻通信的成本。'
- en: '**Avoid Moving Data** — moving data from CPU to GPU or from one process to
    another is expensive! Do as little of this as possible or reduce the impact of
    this by carrying it out asynchronously.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**避免数据移动** — 将数据从 CPU 移动到 GPU 或从一个进程移动到另一个进程是昂贵的！尽量减少这种操作，或者通过异步方式减少其影响。'
- en: Memory
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存
- en: Last but not least is memory. Many of the areas mentioned above can be helpful
    in relieving your bottleneck, but it might not be possible if you have no memory
    available! Let’s look at some things to consider.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是内存。上述许多领域可以帮助缓解瓶颈，但如果没有足够的内存，这可能是不可能的！让我们来看一些需要考虑的事项。
- en: '**Data Types** — keep these as small as possible helping to reduce the cost
    of communication, and memory and with modern accelerators, it will also reduce
    computation.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据类型** — 保持这些尽可能小，有助于减少通信和内存成本，并且与现代加速器一起，它还会减少计算。'
- en: '**Caching** — similar to reducing computation, smart caching can help save
    you memory. However, make sure your cached data is being used frequently enough
    to justify the caching.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓存** — 类似于减少计算，聪明的缓存可以帮助节省内存。然而，确保你的缓存数据使用频率足够高，以证明缓存的合理性。'
- en: '**Pre-Allocate** — not something we are used to in Python, but being strict
    with pre-allocating memory can mean you know exactly how much memory you need,
    reduces the risk of fragmentation and if you are able to write to shared memory,
    you will reduce communication between your processes!'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**预分配** — 在 Python 中我们不太习惯这样做，但严格进行内存预分配可以让你准确知道所需内存量，减少碎片化的风险，并且如果你能够写入共享内存，你将减少进程之间的通信！'
- en: '**Garbage Collection** — luckily python handles most of this for us, but it
    is important to make sure you are not keeping large values in scope without needing
    them or worse, having a circular dependency that can cause a memory leak.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**垃圾回收** — 幸运的是，Python 处理了大部分这方面的工作，但重要的是确保你没有在作用域中保留不必要的大值，或者更糟的是，存在可能导致内存泄漏的循环依赖。'
- en: '**Be Lazy** — Evaluate expressions only when necessary. In Python, you can
    use generator expressions instead of list comprehensions for operations that can
    be lazily evaluated.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**懒惰** — 仅在必要时评估表达式。在 Python 中，你可以使用生成器表达式代替列表推导式，以便进行惰性计算的操作。'
- en: 4 — Repeat
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4 — 重复
- en: So, when are we finished? Well, that really depends on your project, what the
    requirements are and how long it takes before your dwindling sanity finally breaks!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们什么时候才算完成呢？这真的取决于你的项目、需求是什么，以及在你渐渐崩溃之前需要多久！
- en: As you remove bottlenecks, you will get diminishing returns on the time and
    effort you are putting in to optimize your system. As you go through the process
    you need to decide when good is good enough. Remember, speed is a means to an
    end, don’t get caught in the trap of optimizing for the sake of it. If it is not
    going to have an impact on users, then it is probably time to move on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你消除瓶颈，你在优化系统时投入的时间和精力将会得到递减的回报。在这个过程中，你需要决定何时“足够好”。记住，速度是实现目标的一种手段，不要陷入为优化而优化的陷阱。如果对用户没有影响，那么可能是时候继续前进了。
- en: Conclusion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Building large-scale ML systems is HARD. It’s like playing a twisted game of
    “Where's Waldo” crossed with Dark Souls. If you do manage to find the problem
    you have to take multiple attempts to beat it and you end up spending most of
    your time getting your ass kicked, asking yourself “Why am I spending my Friday
    night doing this?”. Having a simple and principled approach can help you get past
    that final boss battle and taste those sweet, sweet theoretical max FLOPs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 构建大规模 ML 系统是困难的。这就像玩一个扭曲的“沃尔多在哪里”游戏，混合了《黑暗之魂》的元素。如果你真的找到问题，你必须进行多次尝试才能解决，而且你会花费大部分时间被虐待，问自己“我为什么要在周五晚上做这些？”。有一个简单且有原则的方法可以帮助你通过最终
    boss 战，并品尝到那些甜美的理论最大 FLOPs。
- en: '[](https://donalbyrne.substack.com/?utm_source=navbar&utm_medium=web&r=hk3pr&source=post_page-----4485f0208440--------------------------------)
    [## ML in Action | Donal Byrne | Substack'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[## ML in Action | Donal Byrne | Substack](https://donalbyrne.substack.com/?utm_source=navbar&utm_medium=web&r=hk3pr&source=post_page-----4485f0208440--------------------------------)'
- en: The Machine Learning newsletter that provides unsolicited advice, practical
    insights and lessons learned in the rapidly…
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供未经请求的建议、实用见解和在快速发展的领域中学到的经验的机器学习通讯…
- en: donalbyrne.substack.com](https://donalbyrne.substack.com/?utm_source=navbar&utm_medium=web&r=hk3pr&source=post_page-----4485f0208440--------------------------------)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[donalbyrne.substack.com](https://donalbyrne.substack.com/?utm_source=navbar&utm_medium=web&r=hk3pr&source=post_page-----4485f0208440--------------------------------)'
