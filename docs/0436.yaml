- en: Use ChatGPT to Query Your Neo4j Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/use-chatgpt-to-query-your-neo4j-database-78680a05ec2?source=collection_archive---------4-----------------------#2023-01-31](https://towardsdatascience.com/use-chatgpt-to-query-your-neo4j-database-78680a05ec2?source=collection_archive---------4-----------------------#2023-01-31)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An easy approach to let ChatGPT to learn your graph schema and help you construct
    Cypher queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bratanic-tomaz.medium.com/?source=post_page-----78680a05ec2--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page-----78680a05ec2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----78680a05ec2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----78680a05ec2--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page-----78680a05ec2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F57f13c0ea39a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-chatgpt-to-query-your-neo4j-database-78680a05ec2&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=post_page-57f13c0ea39a----78680a05ec2---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----78680a05ec2--------------------------------)
    ·8 min read·Jan 31, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F78680a05ec2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-chatgpt-to-query-your-neo4j-database-78680a05ec2&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=-----78680a05ec2---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F78680a05ec2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-chatgpt-to-query-your-neo4j-database-78680a05ec2&source=-----78680a05ec2---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT has taken the world by storm. It is virtually impossible to not be bombarded
    with various information about it. I guess it is only a matter of time before
    a plethora of AI-generated content hits the internet.
  prefs: []
  type: TYPE_NORMAL
- en: I have been playing around with ChatGPT and trying to produce Cypher queries
    in my free time. I came across a [blog post using ChatGPT to help model a graph
    and create some basic queries in Neo4j](https://neo4j.com/developer-blog/create-neo4j-database-model-with-chatgpt/).
    Consequently, I decided to write up my experience using ChatGPT as a question2cypher
    or english2cypher engine.
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j Aura setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use [Neo4j Aura](https://neo4j.com/cloud/platform/aura-graph-database/),
    which offers a free cloud instance of the Neo4j database with pre-populated data,
    for this experiment. Once you have logged in, click on the **New Instance** and
    select the **Graph based Recommendations** dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fb9bf2f8cf4daee749ee178e646c67c.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Graph Based Recommendations dataset. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: After the database instance has been started, click on the **Query** button
    to open Neo4j Browser.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, you will need to set up ChatGPT if you haven’t already done so. Open the
    [ChatGPT website](https://chat.openai.com/) and follow the registration instructions.
    After completion, you should have the ChatGPT user interface in front of you.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fc679acec161f85fc0ded96db527814.png)'
  prefs: []
  type: TYPE_IMG
- en: ChatGPT user interface. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Define graph schema
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ChatGPT has some experience with using Cypher and the property graph model.
    It does, however, doesn’t know the schema of your graph. Therefore, to avoid ChatGPT
    from guessing and hallucinating node labels and properties of your graph, it is
    essential to feed it with the information.
  prefs: []
  type: TYPE_NORMAL
- en: I think that the best way to inform the ChatGPT about the node labels and relationship
    types is to use the following APOC procedure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Results*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ddd3138090361a8ec2bb7c4fcf24ec84.png)'
  prefs: []
  type: TYPE_IMG
- en: Apoc schema results. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you run the above APOC schema procedure in Neo4j Browser. In that case,
    you can simply copy the text version of the response and paste it into ChatGPT
    with additional information that this is the schema definition for a Neo4j database.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have a Neo4j database with the following schema:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Results of APOC schema procedure—
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0eacebf8d0df07d380d3adfbfcde0c7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: I got the following response, but the reactions may vary significantly between
    different executions. Next, you need to give it information about node and relationship
    properties since that is not available in the APOC schema procedure. We can use
    the following Cypher query to extract all property keys by their node and relationship
    type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can feed this information into ChatGPT by informing it that you are providing
    information about node and relationship types.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/61d309b0a38de35839533a17b988abe5.png)'
  prefs: []
  type: TYPE_IMG
- en: Providing node and relationship property keys. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Cypher queries with ChatGPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we can go ahead and test how well does ChatGPT generate Cypher queries based
    on various prompts. We need to inform ChatGPT that it will be producing Cypher
    queries. What I found is needed to provide in the initial prompt is that it should
    not make any assumptions about queries from previous prompts as otherwise it tries
    to combine information from previous unrelated prompts into newly generated Cypher
    queries. You can also omit query explanations if you so wish.
  prefs: []
  type: TYPE_NORMAL
- en: Now you will generate Cypher queries based on prompts. Do not post any explanations
    unless explicitly specified. Also do not make any assumptions about the context.
    Only look at the context of the given prompt and do not assume anything else from
    previous prompts.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*I’ve asked it explicitly to not assume anything on previous prompts as, at
    first, it assumed my movie preferences as I was asking about Keanu Reeves and
    comedies a lot. The generated queries seem mostly the same if you ask it to forget
    or not. The only difference is when I asked for recommendations, it assumed I
    liked Keanu Reeves and comedies, so it went with that. Additionally, graph schema
    forgetting also happens in both cases, whether you ask it to forget previous prompts
    or not.*'
  prefs: []
  type: TYPE_NORMAL
- en: We can start with something simple.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3b2c085318b53739526525f4704b463.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The provided query works as intended. We can try something more complex now.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e16155430620246afd8e37539eed3ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the query works as it should. ChatGPT is quite good at basic graph-pattern
    matching and aggregations. It also picks the correct node properties most of the
    time. However, it has problems with so-called existential queries that could return
    either true if the pattern exists or false if the pattern is not matched.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07415f4c4742b8c91d593c8125ef44cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It seems that it prefers the `MATCH` clause and has not mastered `OPTIONAL MATCH`
    or other approaches that allow null values. However with some help, it manages
    to get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17371062b3a516b7350d065ba51aa46d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The only problem is that it forgot about Keanu Reeves.
  prefs: []
  type: TYPE_NORMAL
- en: So it is only checking if an actor appeared in the Matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8cc0b156c1645c385903b4d11fc6cfa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Feels like rubber duck programming with someone with a lot of creativity but
    little to no attention since the query again forgot about `OPTIONAL MATCH`. Maybe
    ChatGPT just has incurable ADHD. It definitely needs some fine-tuning if you want
    it to generate queries that allow null or 0 values.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can check how creative ChatGPT is. We can ask it to find the most popular
    comedies without specifying what popular means.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e5524c2624de3d878d315af14b9dfc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The generated query is outstanding. There are probably a lot of movie recommendation
    tutorials that ChatGPT can learn from. Additionally, it correctly assumed that
    **the imdbRating** property holds some sort of popularity rating value.
  prefs: []
  type: TYPE_NORMAL
- en: We can ask it to include ratings from users in the database.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ad08fcb4dfa2e33fa5db016d3799c1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: At first, I was impressed. Even though it did not combine IMDB ratings and user
    ratings, it provided a good start for user ratings. However, it forgot that genres
    are a separate node, not a node property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4199ecf0521084e0945c685cb2d07d04.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: While the corrected Cypher query now correctly identifies genres as separate
    nodes, for some reason, it decided that the popularity should now be defined as
    the number of IMDB votes. Therefore, even if you get a generated Cypher query
    that works well, there is no guarantee that you will get the same Cypher statement
    next time, even though it claims that consistency is important.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try another prompt where some Cypher creativity is appreciated.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/22c24e1b4ac210d542bdc766ef0028b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Even though it complains that it cannot provide good recommendations, it still
    offers a good starting point. Let’s see if we can try to improve the recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c383d321c37895f512f2b3b10e700dff.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It seems that ChatGPT has some ideas about using average movie ratings of co-actors
    and then providing actors that co-starred with Keanu Reeves in movies with the
    highest rating as recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: The only problem is that the above query doesn’t work. Again, the ChatGPT hallucinated
    node property **imdb_rating** instead of **imdbRating**. Additionally, it collects
    movie ratings in the fourth row and then tries to average them. Unfortunately,
    Cypher does not allow averaging arrays with `avg()` operator. So we would either
    need to remove `collect` or use APOC.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/77c8711ddc988f785953517382e6facd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the ADHD in ChatGPT decided we should go with the same basic recommendation
    as it started. However, if you are using Neo4j v5, there is another problem. [Several
    Cypher syntaxes have been deprecated in v5](/how-cypher-changed-in-neo4j-v5-d0f10cbb60bf),
    and Chat GPT is unaware of that and needs to be trained with the latest Cypher
    syntax. In the above example, the `size()` operator can no longer be used count
    graph patterns in Neo4j v5.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I wanted to try if ChatGPT is a graph data scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae603eff693eb719afffa381282a9019.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: By default, ChatGPT wants to use the deprecated Graph Algorithms library. Correcting
    it to use the Graph Data Science library improves the query a bit, but not entirely.
    The GDS library does not support anonymous graphs since the 2.0 version. Therefore,
    you need to project an in-memory graph separately and then run PageRank on top
    of that.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a94c35c5eabd22eed6267355a88a377.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It’s good some good ideas, but again the syntax will not work. However, it can
    be used as a good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ChatGPT shows great potential to be used as an interface to query Neo4j database.
    It works well with basic graph matching and aggregations. Unfortunately, it sometimes
    forget exact property names or graph schema, but with a little help it remembers
    them.
  prefs: []
  type: TYPE_NORMAL
- en: However, when you want to generate complex queries, it is as likely that the
    query will be valid or invalid. Debugging complex queries feels like rubber duck
    programming with an ADHD person with a short attention span. While it might solve
    bugs you explicitly mention, it might change other variables or introduce new
    bugs. Consistency is not the best part of ChatGPT. Additionally, it wasn’t trained
    on the newer Cypher syntax used in Neo4j v5 or the Graph Data Science library.
    Therefore, it would require additional fine-tuning to get it right.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, I feel like ChatGPT, in its current state, can be used to generate
    simple queries and schema. For more complex tasks like providing recommendations,
    it can be used to hint at Cypher syntax or how to approach solving the problem,
    but it definitely shouldn’t be relied on to offer valid queries. I am excited
    to see how newer versions of ChatGPT trained on more recent data will perform.
    I might also try to fine-tune ChatGPT or GPT-3 and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '*p.s. Article by* [*Sixing Huang*](https://medium.com/u/ff9d63e09a67?source=post_page-----78680a05ec2--------------------------------)
    *about* [*using GPT-3 to generate Cypher query*](/gpt-3-for-doctor-ai-1396d1cd6fa5)*.*'
  prefs: []
  type: TYPE_NORMAL
