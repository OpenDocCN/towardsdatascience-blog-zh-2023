["```py\n shift_matrix_array = np.array(\n    # Shift 1\n    [[1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0],\n     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1],\n    ])\n\nnum_csrs=10\nnum_days=1\nnum_shifts=16\nnum_times=24\nshift_matrix_array.shape\nshift_matrix_dict=dict()\n\nfor row in range(shift_matrix_array.shape[0]):\n    #print(row)\n    for column in range(shift_matrix_array.shape[1]):\n        shift_matrix_dict[row,column]=shift_matrix_array[row,column]\n\nmodel = ConcreteModel()\n\n# Define the sets\nmodel.I = Set(initialize=range(num_csrs))\nmodel.J = Set(initialize=range(num_days))\nmodel.K = Set(initialize=range(num_shifts))\nmodel.T = Set(initialize=range(num_times))\n\nmodel.shift_matrix = Param(model.K, model.T, initialize=lambda model, k, t: shift_matrix_array[k][t])\n\ndemand = {(j, t): 3 for j in range(num_days) for t in range(num_times)}\n\nmodel.shift_demand = Param(model.J, model.T, initialize=demand)\n\n# decision variables\nmodel.x = Var(model.I, model.J, model.K, domain=Binary)\nmodel.y = Var(model.J, model.T, within=NonNegativeReals)\n\nmodel.demand_constraint = ConstraintList()\nfor j in model.J:\n    for t in model.T:\n        model.demand_constraint.add(\n            model.y[j, t] >= model.shift_demand[j, t] - sum(model.x[i, j, k] * model.shift_matrix[k,t] for k in model.K for i in model.I)\n        )\n\nmodel.one_shift_per_day = ConstraintList()\nfor i in model.I:\n    for j in model.J:\n        model.one_shift_per_day.add(sum(model.x[i,j,k] for k in model.K) <= 1)\n\nmodel.obj = Objective(\n    expr=sum(model.y[j, t] for j in model.J for t in model.T) ,\n    sense=minimize\n)\n\nsolver = SolverFactory('glpk')\nsolver.solve(model)\n```", "```py\nprint(\"Day | Hour | Assigned CSRs\")\nfor j in model.J:\n    for t in model.T:\n        assigned_csrs = []\n        for i in model.I:\n            for k in model.K:\n                if model.x[i, j, k].value == 1 and model.shift_matrix[k, t] == 1:\n                    assigned_csrs.append(i)\n        print(f\"{j}   | {t:02}  | {assigned_csrs}\")\n```", "```py\nprint(\"CSR | Assigned Shift\")\nfor i in model.I:\n    assigned_shift = []\n    for j in model.J:\n        for k in model.K:\n            if model.x[i, j, k].value == 1:\n                assigned_shift.append(k)\n                #break\n        if assigned_shift is not None:\n            break\n    print(f\"{i}   | {assigned_shift}\")\n```", "```py\ntotal_shortage = sum(max(model.shift_demand[j, t] - sum(model.x[i, j, k].value * model.shift_matrix[k, t] for i in range(num_csrs) for k in range(num_shifts)), 0) for j in range(num_days) for t in range(num_times))\n\nprint(\"Total shortage:\", total_shortage)\n```"]