- en: 'Rustic Data: Data Visualization with Plotters — Part 1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/rustic-data-data-visualization-with-plotters-part-1-7a34b6f4a603?source=collection_archive---------8-----------------------#2023-07-25](https://towardsdatascience.com/rustic-data-data-visualization-with-plotters-part-1-7a34b6f4a603?source=collection_archive---------8-----------------------#2023-07-25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A detailed guide on how to transform raw numbers into stunning graphs in Rust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://wiseai.medium.com/?source=post_page-----7a34b6f4a603--------------------------------)[![Mahmoud
    Harmouch](../Images/d61617549d25565399975debaad5908f.png)](https://wiseai.medium.com/?source=post_page-----7a34b6f4a603--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7a34b6f4a603--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7a34b6f4a603--------------------------------)
    [Mahmoud Harmouch](https://wiseai.medium.com/?source=post_page-----7a34b6f4a603--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb15db3da5667&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frustic-data-data-visualization-with-plotters-part-1-7a34b6f4a603&user=Mahmoud+Harmouch&userId=b15db3da5667&source=post_page-b15db3da5667----7a34b6f4a603---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7a34b6f4a603--------------------------------)
    ·20 min read·Jul 25, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7a34b6f4a603&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frustic-data-data-visualization-with-plotters-part-1-7a34b6f4a603&user=Mahmoud+Harmouch&userId=b15db3da5667&source=-----7a34b6f4a603---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7a34b6f4a603&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frustic-data-data-visualization-with-plotters-part-1-7a34b6f4a603&source=-----7a34b6f4a603---------------------bookmark_footer-----------)![](../Images/6c279295bbbd6ed539f618c1b02257b4.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Various Plotters Features (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: TL;DR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Plotters** is a popular Rust library for creating **data visualizations**.
    It provides a wide range of tools and functions to help you create high-quality
    **graphs**, **charts**, and other **visualizations**. This article is **part 1**
    of a series of articles that focuses on the aesthetic aspects of visualizations
    prepared with **Plotters**. From changing the **color** **scheme** to adding **annotations**,
    you will learn how to customize the cosmetic aspects of the Plotter’s visualizations.'
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this article, you will have a **rock-solid** understanding of
    how to use the Plotters library to create **professional-looking visualizations**
    that will **captivate** your audience. The [**Ndarray** **library**](https://wiseai.medium.com/the-ultimate-ndarray-handbook-mastering-the-art-of-scientific-computing-with-rust-ef5ab767212a)
    will also come in handy throughout this article as we explore the use of various
    tools and methods for data manipulation. So, whether you’re an **amateur** or
    **seasoned** **Rust** **programmer**, reading through this article is imperative
    if creating **informative** yet **aesthetically** **pleasing** visualizations
    with Plotters piques your interest.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** This article assumes that you have a fairly basic understanding of
    the Rust programming language.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The notebook named [**6-plotters-tutorial-part-1.ipynb**](https://github.com/wiseaidev/rust-data-analysis/blob/main/6-plotters-tutorial-part-1.ipynb)
    wasdeveloped for this article which can be found in the following repository:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://github.com/wiseaidev/rust-data-analysis?source=post_page-----7a34b6f4a603--------------------------------)
    [## GitHub - wiseaidev/rust-data-analysis: The ultimate data analysis with Rust
    course.'
  prefs: []
  type: TYPE_NORMAL
- en: The ultimate data analysis with Rust course. Contribute to wiseaidev/rust-data-analysis
    development by creating an…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/wiseaidev/rust-data-analysis?source=post_page-----7a34b6f4a603--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents(TOC)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ∘ [Who Is This Article For?](#a151)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [What is Plotters?](#cb15)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Plotters Advantages](#511c)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Setting up Plotters](#2e03)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Single-Line Plots](#b479)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Multiline Plots](#4913)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Grid, Axes, and Labels](#3f49)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Colors and Markers](#09f8)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Subplots](#7c65)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Error Bars](#0cfb)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Scatter Plot](#afac)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Histogram](#081e)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Conclusion](#2750)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Closing Note](#6809)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Resources](#a427)
  prefs: []
  type: TYPE_NORMAL
- en: Who Is This Article For?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/1352b8468e4262db34c2b9c4705347da.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Myriam Jessier](https://unsplash.com/@mjessier?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: For those interested in crafting **intuitive** data visualizations in Rust,
    this article is a **must-read.** Whether you’re an **experienced** **data scientist**
    or just **starting out,** the Plotters crate in Rust can help you create captivating
    and eye-catching visuals that are sure to impress your audience. With basic knowledge
    of Rust programming under your belt, getting started has never been easier.
  prefs: []
  type: TYPE_NORMAL
- en: The **Plotters** crate packs immense power when it comes to creating **stunning**
    and **effective** **visualizations** **quickly** and **effortlessly** — perfect
    for **personal** projects as well as **professional** ones. It’s a tool that will
    enable you to generate high-quality graphics capable of communicating complex
    information effectively.
  prefs: []
  type: TYPE_NORMAL
- en: If taking your visualization skills up another notch sounds appealing, then
    look no further than this piece! The **clear explanations** coupled with helpful
    graphs make following along simple while step-by-step instructions ensure quick
    progress towards producing breathtaking visuals using the **Plotters** crate.
  prefs: []
  type: TYPE_NORMAL
- en: What is Plotters?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/6bd8000763d8f503f731b649165ff1c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Stephen Phillips - Hostreviews.co.uk](https://unsplash.com/es/@hostreviews?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '[**Plotters**](https://plotters-rs.github.io/home/#!/) is a robust and adaptable
    Rust crate that empowers developers, like you, to create stunning visualizations
    with ease. Its versatility allows for the creation of various plots, including
    line, scatter, and histograms while offering high flexibility in styling options
    and customized annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: This **all-in-one** tool enables developers to define any type of visualization
    needed — making it an indispensable asset for data analysis tasks. One notable
    feature is its support for interactive interfaces which makes generating static
    graphics possible as well as creating web-based applications effortlessly. This
    capability facilitates easy exploration of datasets leading to diverse plot types
    suitable for machine learning or data science projects.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, **Plotters** integrates seamlessly into popular development environments
    like [**Jupyter Notebook**](https://plotters-rs.github.io/plotters-doc-data/evcxr-jupyter-integration.html)
    while supporting advanced packages dedicated solely towards enhancing your data
    visualization experience- providing more reasons why this package should be part
    of every developer’s toolkit!
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are just starting out on your journey or have been analyzing complex
    data sets already — **Plotters** offers unparalleled adaptability coupled with
    user-friendliness; truly deserving recognition among top-tier tools available
    today!
  prefs: []
  type: TYPE_NORMAL
- en: Plotters Advantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/868a2774a38dd62577280809a615e4f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [UX Indonesia](https://unsplash.com/es/@uxindo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization is a crucial aspect of data analysis, and the **Plotters**
    library provides several benefits to simplify the process. One significant advantage
    that sets it apart from other options is its user-friendly nature. The integration
    with common data analytics crates like **Ndarray** makes it effortless to use
    alongside familiar structures.
  prefs: []
  type: TYPE_NORMAL
- en: Another noteworthy benefit of using this open-source tool lies in its cost-effectiveness;
    developers and analysts can utilize the library without any charges or limitations
    on usage rights. Additionally, anyone interested in contributing towards improving
    the software may do so as part of [**a community effort**](https://github.com/plotters-rs/plotters/issues/345).
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, being open source means quick online support from fellow members
    worldwide via various platforms such as forums (e.g. [**stackoverflow**](https://stackoverflow.com/search?q=Rust+plotters&s=844d1eef-6919-410a-b7b7-04df4914cd61))
    — making problem-solving efficient!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Plotters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To fully utilize the capabilities of **Plotters**, it’s crucial to ensure that
    we have set up our environment correctly. The library offers a broad range of
    plot types such as line charts, scatter plots, histograms, and pie plots; however,
    without proper setup, these features remain inaccessible. Fortunately for us all,
    setting up **Plotters** is an effortless process — simply run a command in your
    Jupyter Notebook and you’re good to go!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once imported into your project workspace or notebook session, **Plotters**
    allows you to explore its vast array of customization options tailored specifically
    to your needs- whether simple or complex plots are required.
  prefs: []
  type: TYPE_NORMAL
- en: Single-Line Plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/8b470d9bd060172b0acedcfd5520547d.png)'
  prefs: []
  type: TYPE_IMG
- en: A linear single-line plot (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Line plots are a fundamental visualization tool in the **Plotters** library
    that allows us to represent data points connected by straight lines. Throughout
    this section, we will explore the concept of single-line plots, which involve
    using the `[**LineSeries**](https://docs.rs/plotters/0.3.5/plotters/series/struct.LineSeries.html)`
    struct to create visualizations with a single line.
  prefs: []
  type: TYPE_NORMAL
- en: The `**LineSeries**` struct in **Plotters** is highly utilized for visualizing
    data, especially in the creation of single-line plots. Such graphs are perfect
    for illustrating correlations between two variables or highlighting patterns within
    time series data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a one-dimensional plot through **Plotters**, start by importing the
    library and utilizing its `[**draw_series**](https://docs.rs/plotters/latest/plotters/chart/struct.ChartContext.html#method.draw_series)`
    function along with the `**LineSeries**` struct to sketch your line chart with
    an assigned dataset. For instance, if we aim to plot one dimensional data via
    a straightforward graph, here’s how you can use the `**draw_series**` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code above, we have an array x representing both coordinates, x, and
    y. Moving on, let us examine a different instance where we utilize an **Ndarray**
    array to represent the data for the single-line plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving on, let’s visualize a quadratic graph represented by the equation `**y
    = f(x) = x³**`. Here’s the corresponding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to plot this vector like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e012a31467481feb058ad9aac21299b2.png)'
  prefs: []
  type: TYPE_IMG
- en: A cubic function plot (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In summary, **line plots** in **Plotters** offer a commanding approach to illustrating
    **correlations** and **tendencies** within datasets. We can craft informative
    yet captivating representations of our information by utilizing the `**LineSeries**`
    struct while manipulating **x-values** and **y-values** arrays/vectors. Whether
    you’re delving into scientific research findings or analyzing business metrics,
    these line plots are indispensable tools for exploring your dataset further while
    effectively communicating its insights with others.
  prefs: []
  type: TYPE_NORMAL
- en: Multiline Plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0257e49c83a8b1c0553ddb881e1ba692.png)'
  prefs: []
  type: TYPE_IMG
- en: A Multiline plot (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Plotters** provides an exceptional capability to display **multiple plots**
    in a single output, which empowers us to present numerous curves concurrently
    on **the same visualization**. This remarkable attribute facilitates effortless
    comparison and analysis of data sets. To delve deeper into this notion, let’s
    examine an illustrative example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By utilizing the code snippet provided, we can generate numerous curves with
    ease. This is achieved by invoking the `**draw_series**` function multiple times
    and defining x-values from an array coupled with corresponding y-values derived
    from different mathematical expressions. Upon executing this code, a comprehensive
    graph showcasing all of these plotted curves will be displayed for observation
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us delve into yet another example that demonstrates the adaptability of
    multi-line graphs. Observe the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The code snippet at hand involves an `**Ndarray**` array x with two dimensions,
    holding distinct data sets. Each row denotes unique values. When the `**draw_series**`
    function is called on the entire array, **Plotters** perceives it as multiple
    curves to be plotted concurrently. The outcome exhibits both datasets side by
    side for easy comparison and analysis of their patterns, trends, or any other
    noteworthy features in an intuitive manner that enables us to draw meaningful
    conclusions from them visually without much effort involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'To showcase the adaptability of multiline graphs, we can create a visual representation
    using arbitrary data. Observe this code snippet as an illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this code snippet, we employed the `**Ndarray**` function `**Array::random**`
    to create a 2D array of data that is populated with arbitrary values. Every time
    you use this method, it generates an exclusive set of data points. By printing
    out the resulting array, one can examine these random numbers closely. The `**draw_series**`
    call exhibits both rows from our dataset as individual curves on a single graph.
    Since each execution results in different randomized outputs, every generated
    chart will be unique and introduce some unpredictability and diversity into your
    visualization experience.
  prefs: []
  type: TYPE_NORMAL
- en: To summarise, the ability to visualize multiple plots in a single output with
    **Plotters** is a powerful feature for data exploration and analysis. Whether
    plotting distinct curves, comparing datasets, or leveraging random data, multiline
    graphs offer a comprehensive view of the information at hand. By utilizing **Plotters**’s
    functionality and experimenting with different data sources, you can create impactful
    visualizations that facilitate better understanding and decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: Grid, Axes, and Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/6e14df1e3815ce24013c12f54cd4a727.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotters Grid (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In the world of data visualization, it’s crucial to have the flexibility to
    present a grid in a plot. The **Plotters** library empowers us to achieve this
    by enabling [**the mesh feature**](https://docs.rs/plotters/latest/plotters/chart/struct.ChartContext.html#method.configure_mesh).
    By simply incorporating the statement `**chart.configure_mesh().draw()?;**` into
    our code, we can enhance the visual appeal and clarity of our plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The line `**ChartBuilder::on(&root).build_cartesian_2d(0f32..1f32, 0f32..1f32)?;**`
    allows us to manually set the limits of the x-axis from 0 to 1 and the y-axis
    from 0 to 1\. By specifying these ranges, we have precise control over the displayed
    region of our plot, ensuring that the most relevant data points are emphasized.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enhance the clarity and understanding of our plots, it is essential to provide
    proper labels for the axes and a **descriptive title**. Let’s consider the following
    code snippet as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fa6261cf2f5bf1df9b918a92c091331d.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotters labels (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In this code, we have added the `**chart.configure_mesh().x_desc(“x = Array::range(1.,
    7., 1.);”).y_desc(“y = f(x)”).draw()?;**` statement to enrich our plot with meaningful
    annotations. By including `**x_desc(“x = Array::range(1., 7., 1.);”)**`, we label
    the x-axis with a concise description of the data being plotted. Similarly, `**y_desc(“y
    = f(x)”)**` assigns a label to the y-axis, indicating the functional relationship.
    Furthermore, `**Caption(“Plot Demo”, (“Arial”, 20).into_font())**` provides an
    informative title to give context to the plot. These elements collectively improve
    the interpretability of the visualization, ensuring that viewers can easily comprehend
    the purpose and content of the plots.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to labels and titles, **Plotters** allows us to create a **legend**
    to distinguish between multiple curves within a plot. By passing an argument for
    the label parameter in the `**label**` function and subsequently calling the `**legend**`
    function, we can generate a legend. Consider the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/65686740564575447aea21db3a1231cf.png)'
  prefs: []
  type: TYPE_IMG
- en: A multiline plot with labels, legend, and grid (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: By executing this code, we create a legend that corresponds to the various curves
    in our plot. The `**legend()**` function automatically generates a legend based
    on the labels provided after calling the `**draw_series()**` function. It helps
    viewers identify and differentiate between the different functions being plotted.
    In conjunction with the grid, axis labels, and title, the legend enhances the
    overall readability and comprehension of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the legend box is positioned at the **middle right** of the plot.
    However, if we prefer to change the location of the legend box, we can do so by
    specifying a `[**SeriesLabelPosition**](https://docs.rs/plotters/latest/plotters/chart/enum.SeriesLabelPosition.html)`
    position parameter within the `**position**` function. Let’s modify our code snippet
    accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ef3755caf9986f48ed232365550f0ab4.png)'
  prefs: []
  type: TYPE_IMG
- en: A multiline plot with a legend positioned in the upper middle of the graph (Image
    by author)
  prefs: []
  type: TYPE_NORMAL
- en: By including the parameter `**position(SeriesLabelPosition::UpperMiddle)**`
    on the `**configure_series_labels**` function, we reposition the legend box to
    the upper middle of the plot. This allows us to fine-tune the placement of the
    legend, ensuring it does not interfere with the plotted curves or other annotations.
    The ability to customize the legend location adds to the versatility and aesthetics
    of our plot.
  prefs: []
  type: TYPE_NORMAL
- en: By understanding and utilizing these features in **Plotters**, we can create
    visually appealing and informative plots, customize axis limits, add labels and
    titles, incorporate legends, and save our visualizations as image files. These
    capabilities empower us to effectively communicate and present our data in a compelling
    and meaningful way.
  prefs: []
  type: TYPE_NORMAL
- en: Colors and Markers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Plotters** offers a wide range of styles and markers to design visually captivating
    plots that are comprehensible. Styles enable you to modify the look of your lines,
    while markers assist in emphasizing particular data points on your plot. By combining
    diverse colors, styles, and markers with **Plotters**’s features, you can craft
    distinctive plots tailored explicitly to your requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plotters** offers advanced color maps that enable the visualization of intricate
    data with a spectrum of colors. With **Plotters**’s `**style**` parameter, you
    can select from an array of [**predefined color maps**](https://docs.rs/plotters/latest/plotters/prelude/index.html#reexports)
    or design your own personalized one using a built-in struct like `[**RGBColor**](https://docs.rs/plotters/latest/plotters/prelude/struct.RGBColor.html)`.
    This parameter proves to be particularly beneficial when representing data encompassing
    extensive value ranges or emphasizing specific plot lines or any other shape.
    You can refer to [**the full palette**](https://docs.rs/plotters/latest/plotters/style/colors/full_palette/index.html#constants)
    for different RGB color values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/89c7912084ba59cb1b66c4eb740afd50.png)'
  prefs: []
  type: TYPE_IMG
- en: A single line plot with color blue (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we have changed the color of the line to blue. You can also
    use other color formats, such as [**HSLColor**](https://docs.rs/plotters/latest/plotters/prelude/struct.HSLColor.html),
    to specify custom colors using the [**HSL spectrum values**](https://en.wikipedia.org/wiki/HSL_and_HSV).
  prefs: []
  type: TYPE_NORMAL
- en: To elevate the visual appeal of your line plots in **Plotters**, consider incorporating
    **markers** to represent distinct symbols for each plot. If you desire a personalized
    touch, there are several ways to customize these markers. First, we can utilize
    the `**draw_series**` method by plotting your data twice with a marker style such
    as size and color based on personal preferences or specific dataset characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/750624e1ee63dc252a4e9164a7d22648.png)'
  prefs: []
  type: TYPE_IMG
- en: A linear single line plot with markers (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can set the marker size using the `**point_size**` method
    which allows for creating a filled or open circle marker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b1254062497b0e9e0d75f7b0b37ab080.png)'
  prefs: []
  type: TYPE_IMG
- en: A line plot with markers (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can combine all these techniques (e.g. colors, markers, legend) to customize
    the visualization as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/98db912c47c46aef82a8a3d921f5c028.png)'
  prefs: []
  type: TYPE_IMG
- en: A multiline plot with different lines colors, markers, labels, title and legend
    (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Overall, **Plotters** offers a simple and effortless way to personalize colors
    and markers, enabling you to craft exceptional visualizations. By selecting the
    appropriate color palettes, your plots can effectively communicate valuable information
    with ease. Choosing the right color and marker t could make all the difference
    in conveying your message successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Subplots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/d66468518f3fa1322a615e4bd2aa7cfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotters subplots (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The technique of sub-plotting is a powerful way to display multiple graphs in
    the same output. This method proves particularly useful when you want to compare
    different data sets or showcase various aspects of one dataset. With **Plotters**,
    creating subplots becomes an effortless task as it allows you to create a grid
    layout where each subsequent plot’s position can be specified relative to its
    predecessor.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, every subplot has customizable specifications like titles and labels
    that make it easy for users to tailor their outputs according to specific needs.
    Sub-plotting comes especially handy while dealing with complex information in
    scientific and data analysis contexts since it helps convey crucial findings concisely
    yet effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate subplots in **Plotters**, you can use the `[**split_evenly**](https://docs.rs/plotters/0.3.5/plotters/drawing/struct.DrawingArea.html#method.split_evenly)`
    method that requires one parameter: a tuple that consists of row count and column
    count. For instance, if you want to craft a **1x2 layout** for your subplots while
    plotting data on the first one; then utilize this code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will create a **1x2 grid** of subplots and plot the data in both subplots,
    with a title and axis labels specified. The tuple argument passed to `**split_evenly**`
    represent the grid (1 row and 2 columns). There are many ways to do sub-plotting
    in **Plotters**, using `[**split_vertically**](https://docs.rs/plotters/0.3.5/plotters/drawing/struct.DrawingArea.html#method.split_vertically)`,
    `[**split_horizontally**](https://docs.rs/plotters/0.3.5/plotters/drawing/struct.DrawingArea.html#method.split_horizontally)`,
    `[**split_evenly**](https://docs.rs/plotters/0.3.5/plotters/drawing/struct.DrawingArea.html#method.split_evenly)`,
    and `[**split_by_breakpoints**](https://docs.rs/plotters/0.3.5/plotters/drawing/struct.DrawingArea.html#method.split_by_breakpoints)`
  prefs: []
  type: TYPE_NORMAL
- en: By utilizing **Plotters**’s capabilities for sub-plotting, stunning visualizations
    become achievable which aid communication by presenting insights clearly and accurately.
  prefs: []
  type: TYPE_NORMAL
- en: Error Bars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/c23da05dc971b684437f26d98a84ae3d.png)'
  prefs: []
  type: TYPE_IMG
- en: A single plot with vertical error bars (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to accurately represent data, it is crucial that the potential for
    error is acknowledged and made transparent. This can be achieved through the use
    of error bars — graphical representations which display variability in measurements
    and indicate uncertainty levels. **Plotters** offers an easy solution with its
    `[**ErrorBar**](https://docs.rs/plotters/latest/plotters/element/struct.ErrorBar.html)`
    function, allowing users to add these essential visual aids to any plot by specifying
    **x/y** coordinates, **color/style** preferences as well as providing relevant
    error values. Let’s consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have chosen to display the **error** on the **y-axis** as
    it is typically more prevalent. The previous image is a visual representation
    of our data and exhibits distinct error bars surrounding each data point. These
    bars indicate the range of values that are likely within a certain **confidence
    level**; longer bars signify greater **uncertainty** in measurement.
  prefs: []
  type: TYPE_NORMAL
- en: However, there may be occasions where displaying error data on both axes would
    prove beneficial — particularly when dealing with **time series** or experimental
    data containing multiple independent variables. In such cases, using the `[**ErrorBar::new_horizontal**](https://docs.rs/plotters/latest/plotters/element/struct.ErrorBar.html#method.new_horizontal)`
    method and passing an array of x-axis errors (similarly done for y-axis errors)
    will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/420483b00ec113ddc45b596128d955eb.png)'
  prefs: []
  type: TYPE_IMG
- en: A single plot with `horizontal` error bars (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: By incorporating such elements into your visualizations — whether as a scientist
    sharing research findings or a business analyst displaying sales figures — audiences
    can better understand any uncertainty associated with the presented information.
    Therefore, utilizing this essential feature will ensure that precise details are
    accurately conveyed while maintaining clarity throughout presentations without
    confusion caused due to errors within datasets represented graphically using **Plotters**’s
    features like Error Bars!
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter Plot**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scatter plots serve as a crucial tool for visualizing data and gaining insights
    into the **relationship** between **two variables**. **Plotters** makes it effortless
    to create scatter plots in Rust by assigning one variable to the **x-axis**, and
    another to the **y-axis**, and plotting each point on their corresponding coordinates.
    By manipulating the colors and sizes of points, you can represent additional dimensions
    within your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The primary **advantage** of using scatter plots is that they **reveal patterns**
    or **clusters** in data that may not be apparent from tables or charts alone.
    Outliers are also easily identifiable through this method.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, these graphs have an intuitive nature that enables anyone — regardless
    of statistical expertise -to quickly comprehend relationships between different
    aspects, hence making them useful communication tools when presenting findings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet will generate a scatter plot of a data samples with
    uniform distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The scatter plot produced is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d9ec6f2a8642b56effb42befa7c926e0.png)'
  prefs: []
  type: TYPE_IMG
- en: A scatter plot of uniform distribution data samples (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In summary, scatter plots offer powerful visualization capabilities allowing
    us better understand our datasets while providing straightforward ways for sharing
    information with others, thanks mainly due its ease-of-use features provided by
    **Plotters’**s library functions available within the Rust programming language
    environment!
  prefs: []
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Histograms are an invaluable asset when it comes to analyzing data distribution.
    They offer a visual representation of how the information is spread across different
    categories or bins, making it easier for us to comprehend and interpret complex
    sets of data. **Plotters** simplify this process by utilizing `[**Histogram::vertical**](https://docs.rs/plotters/latest/plotters/series/struct.Histogram.html)`
    function with linear arrays that group together data points into bars representing
    frequency per bin size.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if we need to plot a randomly generated uniform distribution,
    creating histograms would display each possible outcome’s frequency in detail
    while revealing any patterns or trends present within the dataset. Analyzing these
    graphs can help uncover valuable insights about underlying distributions such
    as age groups’ demographics in populations, light exposure levels captured on
    photographs, or monthly precipitation rates observed throughout cities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is an example of plotting a randomly generated Uniform
    distribution data samples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The histogram produced is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e5b4560272b046f71425ef818e349140.png)'
  prefs: []
  type: TYPE_IMG
- en: A histogram plot of uniform distribution data samples (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In summary, Histograms provide powerful tools for gaining insight into various
    datasets and identifying critical factors affecting them over time accurately.
    By using **Plotters**’ features like customizable bin sizes tailored explicitly
    towards our needs allows us greater flexibility when interpreting large amounts
    of information quickly without sacrificing accuracy!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/dc87b3ebdb61e103107c1dbeb1a47a03.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Aaron Burden](https://unsplash.com/fr/@aaronburden?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: This article has emphasized the significance of visualizations and how **Plotters**
    can be customized to suit various needs. **Plotters** proved invaluable in creating
    diverse types of plots, such as single-line or multiline graphs, scatter plots,
    and histograms. Moreover, we have learned about customizing features like layout
    design choices for color lines, markers, legends, etc.
  prefs: []
  type: TYPE_NORMAL
- en: With newfound knowledge at hand, you can confidently navigate through **Plotters**’s
    various features with ease. Leveraging these methods effectively will enhance
    your understanding of the data and enable better communication of findings.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming series of articles, particularly in part 2, we’ll explore captivating
    data visualizations, including but not limited to pie charts, and 3D visualizations.
    The goal is to empower you to become a skilled visual storyteller with your data,
    revealing hidden insights like never before!
  prefs: []
  type: TYPE_NORMAL
- en: Closing Note
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/6a141938f63ccfae36a81b9fa4d23b19.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nick Morrison](https://unsplash.com/@nickmorrison?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: As we conclude this tutorial, I would like to express my sincere appreciation
    to all those who have dedicated their time and energy to completing it. It has
    been an absolute pleasure to demonstrate the extraordinary capabilities of Rust
    programming language with you.
  prefs: []
  type: TYPE_NORMAL
- en: Being passionate about data science, I promise you that I am going to write
    at least one comprehensive article every week or so on related topics from now
    on. If staying updated with my work interests you, consider connecting with me
    on various social media platforms or reach out directly if anything else needs
    assistance.
  prefs: []
  type: TYPE_NORMAL
- en: Thank You!
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://github.com/wiseaidev/rust-data-analysis?source=post_page-----7a34b6f4a603--------------------------------)
    [## GitHub - wiseaidev/rust-data-analysis: The ultimate data analysis with Rust
    course.'
  prefs: []
  type: TYPE_NORMAL
- en: The ultimate data analysis with Rust course. Contribute to wiseaidev/rust-data-analysis
    development by creating an…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/wiseaidev/rust-data-analysis?source=post_page-----7a34b6f4a603--------------------------------)
    [](https://docs.rs/plotters/latest/plotters/?source=post_page-----7a34b6f4a603--------------------------------)
    [## plotters - Rust
  prefs: []
  type: TYPE_NORMAL
- en: Plotters - A Rust drawing library focusing on data plotting for both WASM and
    native applications 🦀📈🚀
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.rs](https://docs.rs/plotters/latest/plotters/?source=post_page-----7a34b6f4a603--------------------------------)  [##
    evcxr-jupyter-integration
  prefs: []
  type: TYPE_NORMAL
- en: Because evcxr uses only SVG images and all types of series, so we don't need
    other types of backend. So we should put…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: plotters-rs.github.io](https://plotters-rs.github.io/plotters-doc-data/evcxr-jupyter-integration.html?source=post_page-----7a34b6f4a603--------------------------------)
  prefs: []
  type: TYPE_NORMAL
