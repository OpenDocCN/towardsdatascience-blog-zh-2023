- en: 'The Graph Coloring Problem: Exact and Heuristic Solutions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图着色问题：精确解和启发式解
- en: 原文：[https://towardsdatascience.com/the-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab?source=collection_archive---------3-----------------------#2023-11-13](https://towardsdatascience.com/the-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab?source=collection_archive---------3-----------------------#2023-11-13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab?source=collection_archive---------3-----------------------#2023-11-13](https://towardsdatascience.com/the-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab?source=collection_archive---------3-----------------------#2023-11-13)
- en: Exploring the classical discrete optimization problem through custom constructive
    heuristics and integer programming in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过自定义构造启发式方法和整数规划在 Python 中探索经典的离散优化问题
- en: '[](https://medium.com/@bruscalia12?source=post_page-----169dce4d88ab--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----169dce4d88ab--------------------------------)[](https://towardsdatascience.com/?source=post_page-----169dce4d88ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----169dce4d88ab--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----169dce4d88ab--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page-----169dce4d88ab--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----169dce4d88ab--------------------------------)[](https://towardsdatascience.com/?source=post_page-----169dce4d88ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----169dce4d88ab--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----169dce4d88ab--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----169dce4d88ab---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----169dce4d88ab--------------------------------)
    ·10 min read·Nov 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F169dce4d88ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----169dce4d88ab---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----169dce4d88ab---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----169dce4d88ab--------------------------------)
    ·10分钟阅读·2023年11月13日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F169dce4d88ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----169dce4d88ab---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F169dce4d88ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab&source=-----169dce4d88ab---------------------bookmark_footer-----------)![](../Images/4509b47d7da81cc86ecf9f75d39735f1.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F169dce4d88ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-graph-coloring-problem-exact-and-heuristic-solutions-169dce4d88ab&source=-----169dce4d88ab---------------------bookmark_footer-----------)![](../Images/4509b47d7da81cc86ecf9f75d39735f1.png)'
- en: Graph coloring heuristic solution for 32 nodes instance. (Image by the author).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 32 节点实例的图着色启发式解。（图片由作者提供）。
- en: Graph coloring theory has a central position in discrete mathematics. It appears
    in many places with seemingly no or little connection to coloring. It deals with
    the fundamental problem of partitioning a set of objects into classes, according
    to certain rules (Jensen & Toft, 1995).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图着色理论在离散数学中占据核心地位。它出现在许多看似与着色无关的地方。它处理的是将一组对象根据某些规则划分为类别的基本问题（Jensen & Toft,
    1995）。
- en: 'We can summarize the problem as follows: given an undirected graph *G*(*V*,
    *E*), assign colors to each node (vertex) such that no two adjacent nodes share
    the same color and the number of colors used is minimized. Despite the concise
    and clear statement, this problem is notorious for its computational complexity,
    falling into the category of NP-hard problems.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将问题总结如下：给定一个无向图*G*(*V*, *E*)，为每个节点（顶点）分配颜色，使得相邻节点不共享相同颜色，并且使用的颜色数量最小化。尽管问题陈述简洁明了，但这个问题以其计算复杂性而臭名昭著，属于NP难类问题。
- en: Due to its combinatorial complexity, the exact approach of Integer Linear Programming
    (ILP), might be unable to solve large instances, even when using the best available
    solvers. In such situations, heuristics and metaheuristics can be interesting
    alternatives. Although not able to prove optimality, these methods can provide
    fast and good-quality solutions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其组合复杂性，即使使用最佳可用求解器，整数线性规划（ILP）的精确方法可能无法解决大型实例。在这种情况下，启发式算法和元启发式算法可以是有趣的替代方法。虽然无法证明最优性，但这些方法可以提供快速和高质量的解决方案。
- en: In this article, we will solve the Graph Coloring Problem using the constructive
    heuristic *DSatur* (Brélaz, 1979) and an integer linear programming model using
    *pyomo* (Bynum et al., 2021) with the solver HiGHS. As for other stories, you
    can find the complete code in my [code repository](https://github.com/bruscalia/optimization-demo-files/tree/1fa7a3825421d0b166195d890f2629c576cfbfda/graph-coloring).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将使用构造启发式算法*DSatur*（Brélaz, 1979）和整数线性规划模型使用*pyomo*（Bynum等，2021），使用HiGHS求解器解决图着色问题。至于其他故事，你可以在我的[code
    repository](https://github.com/bruscalia/optimization-demo-files/tree/1fa7a3825421d0b166195d890f2629c576cfbfda/graph-coloring)中找到完整的代码。
- en: In case you are not yet familiar with *Linear Programming*, I recommend reading
    my previous article for foundational knowledge before proceeding.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还不熟悉*线性规划*，我建议您在继续之前阅读我以前的文章以获得基础知识。
- en: '[](/linear-programming-theory-and-applications-c67600591612?source=post_page-----169dce4d88ab--------------------------------)
    [## Linear programming: Theory and applications'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/linear-programming-theory-and-applications-c67600591612?source=post_page-----169dce4d88ab--------------------------------)
    [## 线性规划：理论与应用'
- en: Linear optimization main concepts and implementation in Python
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python中的线性优化的主要概念和实现
- en: towardsdatascience.com](/linear-programming-theory-and-applications-c67600591612?source=post_page-----169dce4d88ab--------------------------------)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/linear-programming-theory-and-applications-c67600591612?source=post_page-----169dce4d88ab--------------------------------)
- en: Now let us put some hands-on to creating amazing solutions such as this.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们动手创建像这样的令人惊叹的解决方案。
- en: '![](../Images/e6311f0269b445fe63d866bd5e512c61.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e6311f0269b445fe63d866bd5e512c61.png)'
- en: Graph coloring heuristic solution for 32 nodes instance. (Animation by the author).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 32个节点实例的图着色启发式解决方案。（作者动画）
- en: Constructive heuristic — DSatur
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构造启发式算法 — DSatur
- en: 'Let us recall our problem definition:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的问题定义：
- en: Consider an undirected graph *G*(*V*, *E*).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑一个无向图*G*(*V*, *E*)。
- en: Assign colors to each node such that no two adjacent nodes share the same color.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个节点分配颜色，使得相邻节点不共享相同的颜色。
- en: Minimize the number of colors used.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化使用的颜色数量。
- en: A naive constructive solution can be successively choosing an empty node and
    assigning a color to it ensuring that this color was not yet used in its neighbors.
    That might not be the best strategy possible, but surely can provide an upper
    bound for the necessary number of colors. However, the *DSatur* (Brélaz, 1979)
    algorithm includes new elements to choose the next node and improve this heuristic.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个朴素的构造性解决方案可以是依次选择一个空节点，并为其分配一个颜色，确保其邻居中尚未使用该颜色。这可能不是可能的最佳策略，但肯定可以为所需颜色数量提供一个上界。然而，*DSatur*（Brélaz,
    1979）算法包括选择下一个节点和改进该启发式的新元素。
- en: '*Degree*: Number of edges connected to a given node.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*度数*：连接到给定节点的边的数量。'
- en: '*Saturation*: Number of different colors used in neighbors.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*饱和度*：在邻居中使用的不同颜色数量。'
- en: The algorithm for *DSatur* starts from a queue of uncolored nodes and iteratively
    chooses a node with a maximal saturation degree, removes it from the queue, and
    assigns a color to it. If there is an equality in saturation, Brélaz (1979) suggests
    choosing any of maximal saturation. We will choose a slightly different approach
    by breaking ties by choosing the node with the maximal overall degree. The color
    assigned to a given node should be the one with the lowest index available. A
    pseudocode is presented below. Consider *N* the set of nodes, *Q* the queue of
    uncolored nodes referencing the same memory locations of *N* itself, and *C* the
    set of used colors.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*DSatur*的算法从一个未着色节点的队列开始，迭代选择一个饱和度度数最大的节点，将其从队列中移除，并为其分配颜色。如果饱和度相等，Brélaz（1979）建议选择任何一个饱和度最大的节点。我们将采用稍微不同的方法，通过选择具有最大整体度数的节点来打破平局。分配给给定节点的颜色应为可用的最低索引颜色。下面给出了伪代码。设*N*为节点集合，*Q*为未着色节点队列，引用*N*本身的相同内存位置，*C*为已使用颜色集合。'
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The function `assign_color` should verify the lowest index available color and,
    if none from the current set is feasible, include a new alternative and increment
    the set.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`assign_color`应该验证最低索引可用的颜色，如果当前集合中的颜色不可行，则包含一个新的备选颜色并增加集合。
- en: Let us then put that into Python code. Starting with package imports. Our heuristic
    will be written in pure Python with some type-hint imports only.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这部分代码写成Python代码。首先是包的导入。我们的启发式算法将用纯Python编写，只需导入一些类型提示。
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let us define our basic modeling elements: *Colors* and *Nodes*. The class
    *Color* is defined to be a mutable placeholder for the corresponding indexes of
    their instances. That can be memory efficient in Python as multiple variables
    can reference the same memory location. The method `add_node` should be called
    every time a new node is colored with a given color.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义我们的基本建模元素：*Colors*和*Nodes*。类*Color*定义为一个可变的占位符，用于相应实例的索引。在Python中，这可能是内存高效的，因为多个变量可以引用相同的内存位置。每次用给定颜色给新节点上色时，都应该调用`add_node`方法。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now the class *Node*. Each instance of *Node* has an attribute `neighbors` which
    is a list of nodes (pointers). So, every time a node is modified, we do not need
    to change any information in its neighbors. We can add a neighbor using the method
    `add_neighbor`, set its color using the method `set_color`, and access properties
    that depend on their neighbors' current states `neighbor_colors`, `saturation`,
    and `degree`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在谈谈*Node*类。每个*Node*实例都有一个属性`neighbors`，这是一个节点（指针）的列表。因此，每次修改节点时，我们无需更改其邻居的任何信息。我们可以使用`add_neighbor`方法添加一个邻居，使用`set_color`方法设置其颜色，并访问依赖于其邻居当前状态的属性`neighbor_colors`、`saturation`和`degree`。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now into the *DSatur* algorithm. To implement it, a class of the same name will
    be created. The creation of a new *DSatur* instance takes as arguments the number
    of nodes `n_nodes`and `edges` of the graph. It then instantiates nodes and sets
    their neighbors based on edges.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进入*DSatur*算法。为了实现它，将创建一个同名的类。新创建的*DSatur*实例需要图的节点数`n_nodes`和`edges`作为参数。然后，它会实例化节点并根据边设置它们的邻居。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now let us use it to solve some challenging problems! You can find several instances
    in the [OR Library](http://people.brunel.ac.uk/~mastjjb/jeb/orlib/files/). They
    are denoted as “gcolX” in there. We can extract the number of nodes and edges
    from one of those files using the following code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用它来解决一些具有挑战性的问题！你可以在[OR Library](http://people.brunel.ac.uk/~mastjjb/jeb/orlib/files/)中找到几个实例。在那里，它们被标记为“gcolX”。我们可以使用以下代码从这些文件中的一个提取节点和边的数量。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then we just parse these to a new *DSatur* instance and solve the problem (or
    at least get a good-quality approximation).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将这些颜色解析到一个新的*DSatur*实例中，解决问题（或者至少得到一个高质量的近似解）。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The code to create that interesting visualization of results from the introduction
    might be too verbose to include here, but you can find it in my [code repository](https://github.com/bruscalia/optimization-demo-files/tree/1fa7a3825421d0b166195d890f2629c576cfbfda/graph-coloring).
    It can convey a general idea of how hard it gets when handling several nodes…
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建介绍中结果的有趣可视化的代码可能过于冗长，不便在这里包含，但你可以在我的[代码库](https://github.com/bruscalia/optimization-demo-files/tree/1fa7a3825421d0b166195d890f2629c576cfbfda/graph-coloring)中找到。它可以传达处理多个节点时难度的总体概念…
- en: '![](../Images/e51268bd9c6951ed7eb7116e12f481c0.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e51268bd9c6951ed7eb7116e12f481c0.png)'
- en: Graph coloring heuristic solution for 100 nodes instance. (Animation by the
    author).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图着色启发式解决方案针对100个节点实例。（作者动画）。
- en: Now let us see how we could handle it by an exact approach.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何通过精确方法处理它。
- en: Integer Linear Programming
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整数线性规划
- en: To refine our solutions obtained using heuristics and try to prove the optimality
    of solutions, let us formulate the Graph Coloring Problem as an ILP model. Remember
    it might be unable to handle large instances though. The model presented in this
    section and other exact algorithms are presented in *Chapter 3* of Lewis (2021).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化我们使用启发式方法得到的解决方案，并尝试证明解决方案的最优性，让我们将图着色问题表述为一个整数线性规划模型。请记住，尽管如此，它可能无法处理大型实例。本节介绍的模型以及其他确切算法均在Lewis（2021）的*第三章*中介绍。
- en: 'Let us define the *Sets* considered in this approach:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义在这种方法中考虑的*Sets*：
- en: '*C*: Colors'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C*：颜色'
- en: '*N*: Nodes (or vertices)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*N*：节点（或顶点）'
- en: '*E*: Edges'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*E*：边'
- en: A first question already comes up “How many colors should we consider?”. In
    the worst-case scenario, all nodes are connected, so one should consider *C* of
    the same size as *N*. However, this approach could make our solutions even harder
    by unnecessarily increasing the number of decision variables and worsening the
    linear relaxation of the model. A good alternative is to use a heuristic method
    (such as *DSatur*) to obtain an upper bound for the number of colors.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题已经出现：“我们应该考虑多少种颜色？”在最坏的情况下，所有节点都连接在一起，因此应该考虑与*N*相同大小的*C*。然而，这种方法可能通过不必要增加决策变量的数量并恶化模型的线性放松，使我们的解决方案变得更加困难。一个好的替代方法是使用启发式方法（如*DSatur*）来获取颜色数量的上限。
- en: 'In this problem, we have two groups of decision variables:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题中，我们有两组决策变量：
- en: '*x_*{*i*, *c*}: Are binary variables indicating that node *i* is colored in
    *c*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x_*{*i*, *c*}：是二进制变量，指示节点*i*使用颜色*c*着色。'
- en: '*y_*{*c*}: Are binary variables indicating that color *c* is used'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y_*{*c*}：是二进制变量，指示使用颜色*c*。'
- en: 'We must also create constraints to ensure that:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须创建约束条件以确保：
- en: Every node must be colored
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点必须着色。
- en: If any node from one edge has a color, ensure that the color is being used
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何一条边上的节点有颜色，请确保使用该颜色。
- en: At most 1 node of each edge can be colored with a given color
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每条边上最多只能用一个颜色着色。
- en: Break symmetry (this is not required, but might help)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打破对称（这不是必须的，但可能有帮助）
- en: Finally, our objective should minimize the total number of colors used, which
    is the sum of *y*. Summarizing we have the following equations.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们的目标是最小化使用的总颜色数，这是*y*的总和。总结我们有以下方程。
- en: '![](../Images/3a8f414140d6685082f65ad6ca27e856.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a8f414140d6685082f65ad6ca27e856.png)'
- en: Graph coloring integer programming model. (Image by the author).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图着色整数规划模型。（作者提供的图片）。
- en: Without further ado, let us import *pyomo* for the Integer Programming model.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不拖延，让我们为整数编程模型导入*pyomo*。
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are two approaches for modeling a problem in *pyomo*: *Abstract* and
    *Concrete* models. In the first approach, the algebraic expressions of the problem
    are defined before some data values are supplied, whereas, in the second, the
    model instance is created immediately as its elements are defined. You can find
    more about these approaches in the [library documentation](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)
    or in the book by Bynum et al. (2021). Throughout this article, we will adopt
    the *Concrete* model formulation.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*pyomo*中建模问题有两种方法：*抽象*和*具体*模型。在第一种方法中，问题的代数表达式在提供某些数据值之前定义，而在第二种方法中，模型实例在其元素定义后立即创建。您可以在[库文档](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)或Bynum等人（2021）的书中了解更多关于这些方法的信息。在本文中，我们将采用*具体*模型的形式。'
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, let us instantiate our *Sets*. Parsing the iterables directly from `dsatur`
    attributes `N` and `C` is valid, so one could use them in the `initialize` keyword
    arguments. Alternatively, I will pass the original *nodes* and *edges* from our
    input data and create a range from the *DSatur* as our initialization for colors.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实例化我们的*Sets*。直接从`dsatur`属性`N`和`C`中解析可迭代对象是有效的，因此可以在`initialize`关键字参数中使用它们。或者，我将从输入数据中传递原始*nodes*和*edges*，并从*DSatur*创建一个范围作为我们颜色的初始化。
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next, we instantiate our decision variables.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实例化我们的决策变量。
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And then our constraints.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是我们的约束条件。
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can try and include other symmetry-breaking constraints and see what works
    better with your available solver. In some experiments I performed, including
    a preference order using total nodes assigned to a given color has been worse
    than ignoring it. Possibly due to the solver’s native symmetry-breaking strategies.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: At last, the objective…
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And our model is ready to be solved! To do that I’m using the HiGHS persistent
    solver, which is available in *pyomo* in case *highspy* is also installed in your
    Python environment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For large instances, our solver might have a hard time trying to improve heuristic
    solutions. However, for a 32-node instance available in the [code repository](https://github.com/bruscalia/optimization-demo-files/tree/1fa7a3825421d0b166195d890f2629c576cfbfda/graph-coloring),
    the solver was able to reduce the number of used colors from 9 to 8\. Worth mentioning
    that it took 24 seconds to complete execution whereas the *DSatur* algorithm for
    the same instance took only 6 milliseconds (using pure Python, which is an interpreted
    language).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/262d463424737ab0f54c1ddb5159a143.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: Graph coloring integer programming solution for 32 nodes instance. (Image by
    the author).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although *DSatur* is an intuitive heuristic that provides fast good quality
    solutions, others might lead to better results, especially on complex instances.
    One of the most famous metaheuristics for the Graph Coloring Problem is *Tabucol*
    (Hertz & Werra, 1987). The authors propose a method that starts from an initial
    solution with *k* colors and possibly edges connecting nodes of the same color.
    Then, local moves changing the color of a given node are performed in a sense
    that minimizes violations, using a Tabu List to escape local optima.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: More efficient exact methods for the Graph Coloring Problem than the one herein
    presented rely on *Column Generation*, using an algorithm denoted as *Branch &
    Price*. The reader interested in an introduction to the subject might find a concise
    overview in my other Medium story.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[](/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=post_page-----169dce4d88ab--------------------------------)
    [## Column Generation in Linear Programming and the Cutting Stock Problem'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: How to solve linear problems with a large number of decision variables illustrated
    with a Python example
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=post_page-----169dce4d88ab--------------------------------)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this article, two approaches for solving the Graph Coloring Problem were
    presented: The constructive heuristic *DSatur* (Brélaz, 1979) and an Integer Linear
    Programming (ILP) model. The heuristic was able to provide fast good quality solutions
    for a moderate size instance, of which the solution was further improved using
    the ILP model. The code implemented is available for further use in a public repository.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Brélaz, D., 1979\. New methods to color the vertices of a graph. *Communications
    of the ACM*, *22*(4), 251–256.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Brélaz, D., 1979\. 图的顶点着色的新方法。*ACM通讯*，*22*(4)，251–256。
- en: Bynum, M. L. et al., 2021\. *Pyomo-optimization modeling in Python.* Springer.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Bynum, M. L. et al., 2021\. *Pyomo-优化建模在Python中*。Springer。
- en: Hertz, A., & Werra, D. D., 1987\. Using tabu search techniques for graph coloring.
    *Computing*, *39*(4), 345–351.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Hertz, A., & Werra, D. D., 1987\. 使用禁忌搜索技术进行图着色。*计算*，*39*(4)，345–351。
- en: Jensen, T. R., & Toft, B., 1995\. *Graph coloring problems*. John Wiley & Sons.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Jensen, T. R., & Toft, B., 1995\. *图着色问题*。John Wiley & Sons。
- en: 'Lewis, R.M.R., 2021\. Advanced Techniques for Graph Colouring. In: *Guide to
    Graph Colouring*. Texts in Computer Science. Springer, Cham. [https://doi.org/10.1007/978-3-030-81054-2_4](https://doi.org/10.1007/978-3-030-81054-2_4)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Lewis, R.M.R., 2021\. 图着色的高级技术。在：*图着色指南*。计算机科学文本。Springer，Cham。[https://doi.org/10.1007/978-3-030-81054-2_4](https://doi.org/10.1007/978-3-030-81054-2_4)
