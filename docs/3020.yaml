- en: What to Bring? — Item Suggestions with Collaborative Filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/what-to-bring-item-suggestions-with-collaborative-filtering-6cd260984330?source=collection_archive---------11-----------------------#2023-10-03](https://towardsdatascience.com/what-to-bring-item-suggestions-with-collaborative-filtering-6cd260984330?source=collection_archive---------11-----------------------#2023-10-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Personalized item suggestions with actual data for a real case
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@malte.?source=post_page-----6cd260984330--------------------------------)[![Malte
    Bleeker](../Images/50489a35621cf1fac7a9876c3241c028.png)](https://medium.com/@malte.?source=post_page-----6cd260984330--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6cd260984330--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6cd260984330--------------------------------)
    [Malte Bleeker](https://medium.com/@malte.?source=post_page-----6cd260984330--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb3f789fe994b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhat-to-bring-item-suggestions-with-collaborative-filtering-6cd260984330&user=Malte+Bleeker&userId=b3f789fe994b&source=post_page-b3f789fe994b----6cd260984330---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6cd260984330--------------------------------)
    ·7 min read·Oct 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6cd260984330&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhat-to-bring-item-suggestions-with-collaborative-filtering-6cd260984330&user=Malte+Bleeker&userId=b3f789fe994b&source=-----6cd260984330---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6cd260984330&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhat-to-bring-item-suggestions-with-collaborative-filtering-6cd260984330&source=-----6cd260984330---------------------bookmark_footer-----------)![](../Images/7d455fc9e6391b6223cad05d9e566cba.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Item Suggestions (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'A birthday party, a trip together, or the summer gathering with one’s local
    sports club - events like these are great until one''s own contribution to the
    preparation is required. It often starts with a highly devoted person who takes
    the initiative and gets things started, but sooner or later, and with the number
    of items that have already been committed continuously increasing, one also has
    to ask the question: What will I bring to the table?'
  prefs: []
  type: TYPE_NORMAL
- en: Lists of items that are commonly brought to any type of such events have been
    created in abundance and still, it is always a struggle to come up with a suitable
    idea that relieves yourself at least of the social obligation (most commonly by
    defaulting on the silver bullet, a bottle of wine). Thanks to the availability
    of hundreds of thousands of such lists due to a web application of ours, we were
    able to tackle this challenge by turning it into the quest of suggesting promising
    items to users, based on the already existing items in a list.
  prefs: []
  type: TYPE_NORMAL
- en: We approached the challenge by utilizing similarities between the ~100k lists
    in our database and the current list of interest to a user. The utilization of
    such list-to-list similarities and the subsequent recommendation/suggestion of
    suitable items is also called collaborative filtering, given that the goal is
    to filter the list of a gazillion different items in the database that could be
    suggested, to just a few most suitable (okay, actually its just about 100k different
    items in our case). The analogous case that can be often found for e.g. book or
    movie recommendation systems is pursuing a similar goal by utilizing the similarity
    between what users have watched (in our case, which items have been added to a
    list) to suggest movies a user might have missed out on so far and that have been
    watched by similar users (in our case items that have commonly been added to similar
    lists).
  prefs: []
  type: TYPE_NORMAL
- en: '**How does it work? — A simple explanation**'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create a table with the lists (IDs) as the rows and all
    item names as columns. When all our lists would contain only 20 unique words,
    we would therefore only need 20 columns and the number of rows would equal the
    number of lists. Whenever a word is contained in a list, we add the value “1”
    in the corresponding column and row, and if a word is not contained in a list
    a “0” (in text analysis this is also known as Bag of Words). We do the same for
    the list we would like to make suggestions for.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d441ee6f4c06e5a33309828270691aea.png)'
  prefs: []
  type: TYPE_IMG
- en: A simple illustration of the list-item matrix (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '*For movie or book recommendations, the same procedure would be applied, but
    the columns would contain the different movies or books in the database, the rows
    would contain the different users (IDs), and the values could indicate whether
    a book has been read or if and how it has been rated.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional: Corresponding Python Code (Step 1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This brings our data in a suitable format, ready for the second step — the calculation
    of the similarity between the lists in our database and the list we would like
    to suggest some items for. One of the most commonly applied methods to measure
    the similarity between two rows (vectors) is the “Cosine Distance” or “Cosine
    Similarity”. It’s calculated with the dot product of both rows, divided by the
    regular product of the magnitude of both vectors. The graphic below should make
    this calculation more understandable, but the focus here is on an intuitive understanding
    of the cosine distance and I refer you to [this article](https://cmry.github.io/notes/euclidean-v-cosine)
    for any mathematical subtleties. Please also consider the code chunks below as
    an optional, but supplementary side dish.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70f70af134873cccb4714241bb4566c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Calculation of the cosine similarity between two lists/vectors (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'If for example, two lists would be exactly similar, they would have a cosine
    similarity of 1, lists that have no words in common a similarity of 0, and with
    at least some words in common a similarity of 0 < x < 1. **The higher the cosine
    similarity value, the more similar the list in the database to our list of interest.**
    With this in mind, we can calculate the similarity of our list with all other
    lists in the table, getting a similarity score for each row. Next, we sort these
    rows and extract the most similar rows, either based on a predefined number (e.g.
    most similar 50 lists) or on a similarity threshold (e.g. > 0.6). In our case,
    the similarity scores varied a lot depending on the number of items in the list
    of interest and its specific use case, so we resorted to the utilization of the
    hundred most similar lists for simplicity (A rule of thumb: The more lists we
    select here, the more stable, but also generic will our suggestions be). We can
    now create a copy of our original list-word table, containing only the 100 most
    similar lists inside.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional: Corresponding Python Code (Step 2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once this is done, it’s time to identify the most promising items in these similar
    lists. First, we check the already existing items in our list of interest and
    delete the corresponding items (columns) from the table (we assume in this case
    that the user wouldn’t like to get an already included item suggested). Next,
    the simplest approach would have been to check which words occur the most in these
    similar lists and suggest those in decreasing order. This however would have given
    the same weight to a word in the 99th most similar list as is given to the most
    similar list. To adjust for this the rows are multiplied with the corresponding
    similarity score that was calculated before. As a result, the values in the rows
    (now between 0 and 1) are significantly smaller for the 99th most similar row
    compared to the most similar row. Based upon this, the weighted sum of each column
    (item) can be calculated and the item with the highest score can be suggested.
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional: Corresponding Python Code (Step 3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That’s already it – enough data in combination with just a simple, but powerful
    calculation like the Cosine Similarity can enable us to generate suitable personalized
    suggestions and recommendations. In the following, I´d like to show you the results
    of three suggestion simulations, with only a few items in the lists yet (items
    and lists are mostly translated from German … so please apologize if some item
    picks might feel weird to you).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f3fb56fcb0bda9e91018b62211b0e9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulation of personalized item suggestions for three lists (author by image)
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen, just a few items are enough to generate personalized item suggestions
    that reflect the underlying theme of the list — suggestions that get even more
    specific once the most common items for a specific type of event are taken care
    of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some additional notes: To prevent the recommendation of item names that are
    very specific or possibly even contain any personal information we only included
    items (columns) that occurred at least across 20 different lists. We also excluded
    lists that contained less than 3 items. The list suggestion feature is not deployed
    in a production environment but has so far only been simulated and tested with
    the actual data in a Jupyter Notebook as described and tested within this article.'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for your interest in this article and I highly appreciate all types
    of feedback — I wish you all the best and stay curious.
  prefs: []
  type: TYPE_NORMAL
