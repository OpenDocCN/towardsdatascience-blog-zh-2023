- en: Mini Neural Nets for Guitar Effects with Microcontrollers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微型神经网络用于吉他效果与微控制器
- en: 原文：[https://towardsdatascience.com/mini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c?source=collection_archive---------1-----------------------#2023-04-07](https://towardsdatascience.com/mini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c?source=collection_archive---------1-----------------------#2023-04-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/mini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c?source=collection_archive---------1-----------------------#2023-04-07](https://towardsdatascience.com/mini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c?source=collection_archive---------1-----------------------#2023-04-07)
- en: '![](../Images/277de6904d28ad22861606c6e0892e3a.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/277de6904d28ad22861606c6e0892e3a.png)'
- en: My homebuilt digital guitar pedal using Neural Nets (Image by Author)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我的自制数字吉他效果器使用神经网络（图片由作者提供）
- en: '*Less is more*'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*少即是多*'
- en: '[](https://keyth72.medium.com/?source=post_page-----ea9cdad2a29c--------------------------------)[![Keith
    Bloemer](../Images/3e8d884c0f32430286599b8ffb7b249c.png)](https://keyth72.medium.com/?source=post_page-----ea9cdad2a29c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea9cdad2a29c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea9cdad2a29c--------------------------------)
    [Keith Bloemer](https://keyth72.medium.com/?source=post_page-----ea9cdad2a29c--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://keyth72.medium.com/?source=post_page-----ea9cdad2a29c--------------------------------)[![Keith
    Bloemer](../Images/3e8d884c0f32430286599b8ffb7b249c.png)](https://keyth72.medium.com/?source=post_page-----ea9cdad2a29c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea9cdad2a29c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea9cdad2a29c--------------------------------)
    [Keith Bloemer](https://keyth72.medium.com/?source=post_page-----ea9cdad2a29c--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F744166a323a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c&user=Keith+Bloemer&userId=744166a323a0&source=post_page-744166a323a0----ea9cdad2a29c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea9cdad2a29c--------------------------------)
    ·7 min read·Apr 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fea9cdad2a29c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c&user=Keith+Bloemer&userId=744166a323a0&source=-----ea9cdad2a29c---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F744166a323a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c&user=Keith+Bloemer&userId=744166a323a0&source=post_page-744166a323a0----ea9cdad2a29c---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea9cdad2a29c--------------------------------)
    ·7 min read·Apr 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fea9cdad2a29c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c&user=Keith+Bloemer&userId=744166a323a0&source=-----ea9cdad2a29c---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fea9cdad2a29c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c&source=-----ea9cdad2a29c---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fea9cdad2a29c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmini-neural-nets-for-guitar-effects-with-microcontrollers-ea9cdad2a29c&source=-----ea9cdad2a29c---------------------bookmark_footer-----------)'
- en: I’ve come to realize that constraint drives creativity and innovation. The more
    options an artist has, the more difficult it can be to think of a solid idea.
    Without rules in music, the possibilities are so overwhelming that it would be
    near impossible to write something listenable. It’s the rules and restrictions
    that give structure to an idea. Of course knowing when to break those rules is
    just as important as knowing what they are.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我逐渐意识到，限制可以驱动创造力和创新。艺术家拥有的选择越多，想出一个可靠的想法可能就越困难。如果没有音乐的规则，可能性会如此庞大，以至于几乎不可能写出可听的作品。正是这些规则和限制为一个想法提供了结构。当然，知道什么时候打破这些规则与知道它们是什么一样重要。
- en: Over the past three years I’ve been fascinated with using deep neural networks
    for emulating analog guitar amps and effects. I’ve written a handful of [audio
    plugins](https://github.com/GuitarML) and tested countless variations of neural
    networks for emulating guitar gear. Neural networks are CPU intensive, but with
    PCs you can often throw more computer power at it to achieve a more accurate sound.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的三年里，我一直对使用深度神经网络模拟模拟吉他放大器和效果器着迷。我编写了一些 [音频插件](https://github.com/GuitarML)，并测试了无数种神经网络变体用于模拟吉他设备。神经网络对
    CPU 的需求很高，但使用 PC 时，你通常可以增加计算机的处理能力以实现更准确的声音。
- en: '*For more info on how this works see my articles on* [*neural networks for
    real-time audio*](https://medium.com/nerd-for-tech/neural-networks-for-real-time-audio-introduction-ed5d575dc341)*.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关更多信息，请参见我的文章* [*实时音频的神经网络*](https://medium.com/nerd-for-tech/neural-networks-for-real-time-audio-introduction-ed5d575dc341)*.*'
- en: But what if you wanted to run a neural net on a cheap microcontroller, with
    a small (guitar pedal size) device, dedicated to just running an audio effect
    and nothing else? Small project computers like the [Raspberry Pi](https://www.raspberrypi.org/)
    are powerful enough to run an operating system, supporting applications, and a
    guitar effect, and have room to spare, which means wasted resources at higher
    cost. These types of computers use microprocessors, as opposed to microcontrollers.
    A micro-*processor* has external memory and I/O, and a micro-*controller* is a
    self contained computing system that can run programs on it’s own. Microcontrollers
    generally don’t need to be as powerful as a PC or smartphone, because it’s fully
    dedicated to doing one specific thing. Microcontrollers are ideal for a digital
    guitar pedal, but writing software for them is different from a smartphone or
    PC, and something I had never done before.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想在一个便宜的微控制器上运行神经网络，使用一个小型（吉他效果踏板大小）的设备，专门用于运行音频效果而不做其他事情呢？像 [Raspberry Pi](https://www.raspberrypi.org/)
    这样的微型计算机足够强大，可以运行操作系统，支持应用程序和吉他效果，还有多余的空间，这意味着更高成本下的资源浪费。这些计算机使用微处理器，而不是微控制器。微-*处理器*
    具有外部内存和 I/O，而微-*控制器* 是一个自包含的计算系统，可以独立运行程序。微控制器通常不需要像 PC 或智能手机那样强大，因为它专门用于做一件事。微控制器非常适合数字吉他踏板，但为它们编写软件与智能手机或
    PC 是不同的，这是我以前从未做过的。
- en: '![](../Images/719b95227fbe9fe0b9ec78ee62895c3f.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/719b95227fbe9fe0b9ec78ee62895c3f.png)'
- en: Partially built Terrarium PCB (Left) and Daisy Seed (Right) (Image by Author)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 部分构建的 Terrarium PCB（左）和 Daisy Seed（右）（图片作者提供）
- en: Enter, the [Daisy Seed](https://www.electro-smith.com/daisy/daisy)! The Daisy
    Seed is a $30 embedded platform for music, utilizing the Cortex-M7 ARM microcontroller.
    It has its own software library ([libDaisy](https://github.com/electro-smith/libDaisy))
    and a DSP library for audio ([DaisySP](https://github.com/electro-smith/DaisySP)),
    all open source. For a guitar pedal, you want an input audio buffer for connecting
    your analog guitar signal to the digital hardware, and an output buffer for matching
    impedance with your amplifier. This ensures that your tone is preserved going
    through the effect. PedalPCB sells an interface board called [Terrarium](https://www.pedalpcb.com/product/pcb351/)
    ($12) specifically for the Daisy Seed, and it even provides connections for up
    to 6 knobs, 4 switches, 2 footswitches, input/output mono audio jacks, and 9 volt
    power (common to guitar effects).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 于是，[Daisy Seed](https://www.electro-smith.com/daisy/daisy) 登场了！Daisy Seed 是一个
    $30 的音乐嵌入式平台，利用 Cortex-M7 ARM 微控制器。它有自己的软件库 ([libDaisy](https://github.com/electro-smith/libDaisy))
    和音频 DSP 库 ([DaisySP](https://github.com/electro-smith/DaisySP))，都是开源的。对于吉他踏板，你需要一个输入音频缓冲区，用于将模拟吉他信号连接到数字硬件，还有一个输出缓冲区，用于与放大器匹配阻抗。这确保了你的音色在经过效果器时得以保留。PedalPCB
    销售一种名为 [Terrarium](https://www.pedalpcb.com/product/pcb351/) ($12) 的接口板，专门为 Daisy
    Seed 设计，甚至提供了最多 6 个旋钮、4 个开关、2 个脚踏开关、输入/输出单声道音频插孔和 9 伏电源（吉他效果器常用）的连接。
- en: At $42 for the audio hardware, I’m already well below the cost of the Raspberry
    Pi4 used in my previous [NeuralPi guitar pedal](https://medium.com/towards-data-science/neural-networks-for-real-time-audio-raspberry-pi-guitar-pedal-bded4b6b7f31).
    I bought the boards, and thanks to my previous obsession with analog effects,
    had the remaining hardware on hand to build the Terrarium pedal. Total cost was
    around $100 (with enclosure, electrical components, knobs/switches), and required
    basic soldering skills to put together. The [existing projects](https://github.com/tnatoli/Sonic_Daisy/tree/main/rhythm_delay)
    other people had developed for guitar effects worked and sounded great on the
    completed Terrarium pedal.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以 42 美元的音频硬件成本，我的成本已经远低于我之前使用的 [NeuralPi 吉他踏板](https://medium.com/towards-data-science/neural-networks-for-real-time-audio-raspberry-pi-guitar-pedal-bded4b6b7f31)
    的 Raspberry Pi4。我购买了电路板，得益于我之前对模拟效果的痴迷，手头有足够的硬件来构建 Terrarium 踏板。总成本约为 100 美元（包括外壳、电气组件、旋钮/开关），需要基本的焊接技能来组装。[其他现有项目](https://github.com/tnatoli/Sonic_Daisy/tree/main/rhythm_delay)
    在完成的 Terrarium 踏板上运行良好，声音也很棒。
- en: '![](../Images/fb0cbf0832b865b93fa315e6a6d0c7ee.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb0cbf0832b865b93fa315e6a6d0c7ee.png)'
- en: My completed Terrarium pedal. (Image by Author)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我完成的 Terrarium 踏板。（图片作者提供）
- en: BUT, my [NeuralPi](https://github.com/GuitarML/NeuralPi) plugin can’t run on
    a microcontroller, so I needed to get creative. I decided to use the [RTNeural](https://github.com/jatinchowdhury18/RTNeural)
    engine to run the neural models and develop minimal c++ code around it using libDaisy
    and DaisySP. There are several codebases out there for developing on the M-series
    microcontrollers, but I had no experience with these, so if at all possible I
    wanted to stick with what I already knew.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我的 [NeuralPi](https://github.com/GuitarML/NeuralPi) 插件无法在微控制器上运行，所以我需要发挥创造力。我决定使用
    [RTNeural](https://github.com/jatinchowdhury18/RTNeural) 引擎来运行神经模型，并使用 libDaisy
    和 DaisySP 开发最小的 c++ 代码。虽然有几个代码库可以用于 M 系列微控制器的开发，但我没有这些的经验，所以如果可能的话，我希望坚持使用我已经熟悉的。
- en: 'Now for those constraints I mentioned: processing power, and memory. The M7
    chip operates at a max of 480MHz, and at that speed can only utilize Flash memory,
    a tiny 128KB! (But to be fair, [landing on the moon only took 74KB](https://www.independent.co.uk/news/science/apollo-11-moon-landing-mobile-phones-smartphone-iphone-a8988351.html).)
    There are other memory areas you can access on the Daisy Seed, but I wanted to
    maximize my processing speed to run the biggest neural networks possible, to produce
    the best sound.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在谈谈我提到的那些限制：处理能力和内存。M7 芯片的最大运行频率为 480MHz，在这个速度下只能使用 Flash 内存，一个只有 128KB 的小内存！（但公平地说，[登月只用了
    74KB](https://www.independent.co.uk/news/science/apollo-11-moon-landing-mobile-phones-smartphone-iphone-a8988351.html)）。Daisy
    Seed 上还有其他可以访问的内存区域，但我希望最大化我的处理速度，以运行尽可能大的神经网络，产生最佳的声音。
- en: When I initially compiled my minimal c++ program with RTNeural, I blew past
    the 128KB limit. So then I reached out to the creator of RTNeural for help (as
    I have many times before!). He was able to reduce the compiled footprint by a
    significant amount, allowing for plenty of space for the required code and model
    files.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我最初编译我的最小 c++ 程序与 RTNeural 时，我超出了 128KB 的限制。因此，我向 RTNeural 的创建者寻求帮助（正如我以前多次做的那样！）。他成功地将编译后的占用量减少了大量，为所需的代码和模型文件腾出了足够的空间。
- en: '![](../Images/1e283ece1894dd7e9cc6518249b2e90f.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e283ece1894dd7e9cc6518249b2e90f.png)'
- en: Daisy Seed connected by USB for uploading the c++ program (Image by Author)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Daisy Seed 通过 USB 连接以上传 c++ 程序（图片作者提供）
- en: Once my program would load onto the Daisy Seed, I was really curious what size
    model it could handle. I started with the NeuralPi models (LSTM size 20), but
    it was too much. It caused the pedal to be unresponsive. Then I figured I’d start
    low and work my way up to the limit, so I used a LSTM size 4, and success! It
    would run the effect (a capture of my TS-9 overdrive pedal) but I wasn’t happy
    with the accuracy. I determined that the most it could handle was an LSTM size
    7, which is decent enough for most pedals, and might get some OK sounds on capturing
    lower gain amps. Keep in mind that the Daisy Seed runs at 48kHz audio, which means
    48,000 passes through the neural net each second!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我的程序可以加载到 Daisy Seed 上，我非常好奇它能处理多大尺寸的模型。我从 NeuralPi 模型（LSTM 尺寸 20）开始，但这太过庞大了，导致踏板没有响应。然后我决定从小开始，一步步达到极限，因此我使用了
    LSTM 尺寸 4，成功了！它可以运行效果（捕获了我的 TS-9 过载踏板），但我对准确性不满意。我确定它能处理的最大尺寸是 LSTM 尺寸 7，这对大多数踏板来说足够好，可能在捕获低增益放大器时能获得一些不错的声音。请记住，Daisy
    Seed 运行在 48kHz 的音频下，这意味着每秒通过神经网络 48,000 次！
- en: This kind of neural net sampling rate is impressive on any system, but I wanted
    it to sound even *better*. Guitarists of recent years are accustomed to digital
    modelling that is indiscernible from the real thing. Products like NeuralDSP’s
    Quad Cortex, IK Multimedia’s ToneX, and the more recent Headrush Prime have given
    guitarists options to do what was previously only possible using a Kemper. Just
    because my work is tailored to the DIY community doesn’t mean it has to be any
    less capable! (As the recent open source [Neural Amp Modeler](https://github.com/sdatkinson/NeuralAmpModelerPlugin)
    has proven.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种神经网络采样率在任何系统上都令人印象深刻，但我希望它能听起来更*好*。近年来的吉他手已经习惯于与真实效果难以区分的数字建模。像 NeuralDSP
    的 Quad Cortex、IK Multimedia 的 ToneX 和最近的 Headrush Prime 等产品给吉他手提供了以前只有使用 Kemper
    才能实现的选项。尽管我的工作专门针对 DIY 社区，但这并不意味着它的能力要逊色！ （正如最近开源的 [Neural Amp Modeler](https://github.com/sdatkinson/NeuralAmpModelerPlugin)
    所证明的那样。）
- en: There is another form of Recurrent Neural Network (RNN) besides LSTM that I
    had not tested, the GRU (Gated Recurrent Unit). This network uses approximately
    33% less processing power than LSTM for the same internal size. I never did much
    testing with it because on a PC, the extra processing wasn’t as much of a concern.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 LSTM 外，还有一种我尚未测试的递归神经网络（RNN），即 GRU（门控递归单元）。该网络在相同内部大小的情况下使用的处理能力约少 33%。我并没有进行过多测试，因为在
    PC 上，额外的处理能力并不是一个大问题。
- en: The initial test with GRU was promising, I was getting even lower loss values
    on GRU’s than the same size LSTM. In addition to running faster, the GRU models
    used up less memory. I determined through trial and error that a GRU of size 10
    was about the max I could run through RTNeural on the Daisy seed (vs. 8 with LSTM),
    and that difference improved loss values by half in some cases. I was getting
    loss values of less than 0.01 for distortion pedals, and less than 0.02 for low
    gain amplifiers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 初步测试 GRU 是令人鼓舞的，我在 GRU 上得到的损失值甚至比相同大小的 LSTM 还要低。除了运行速度更快外，GRU 模型还消耗了更少的内存。我通过反复试验确定，大小为
    10 的 GRU 大约是我在 Daisy seed 上可以通过 RTNeural 运行的最大值（相比之下，LSTM 为 8），这种差异在某些情况下将损失值降低了一半。我在失真效果器上的损失值低于
    0.01，在低增益放大器上的损失值低于 0.02。
- en: With the current release, NeuralSeed (as I named it) can accurately capture
    most distortion/overdrive pedals (up to 3 parameterized knobs) and low gain amps.
    Using no parameterized knobs remains the most accurate, but the flexibility of
    controls for gain and tone is a cool option in my opinion. Techniques I previously
    learned have benefitted the overall sound quality. These include improvements
    in my recording equipment, such as using load boxes to record amps and re-amp
    boxes for pedals. Starting from a pre-trained model ([transfer learning](https://medium.com/towards-data-science/transfer-learning-for-guitar-effects-4af50609dce1))
    and using specialized input signals have helped improve accuracy in the model
    training. By using a technique called “[distillation](https://en.wikipedia.org/wiki/Knowledge_distillation)”
    (training a small model from a larger model), I was able to capture the complex
    distortion of tube amplifiers at low to medium gain.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本中，我命名的 NeuralSeed 能够准确捕捉大多数失真/过驱动效果器（最多支持 3 个参数化旋钮）和低增益放大器。使用无参数化旋钮仍然是最准确的，但在我看来，增益和音调的控制灵活性是一个很酷的选项。我之前学习的技巧有助于提高整体音质。这些技巧包括对录音设备的改进，例如使用负载箱录音和使用重新放大箱对效果器进行录音。从一个预训练模型（[迁移学习](https://medium.com/towards-data-science/transfer-learning-for-guitar-effects-4af50609dce1)）开始，并使用专门的输入信号，有助于提高模型训练的准确性。通过使用一种叫做“[蒸馏](https://en.wikipedia.org/wiki/Knowledge_distillation)”（从大模型训练小模型）的方法，我能够捕捉到低到中等增益下管式放大器的复杂失真。
- en: Here is the open source code on Github. When loaded on the Terrarium pedal,
    it has input/output level knobs, wet/dry mixer, 4 EQ boost switches, and up to
    3 knobs for controlling a parameterized neural model (gain, bass, and treble,
    for example). The left footswitch either bypasses or engages the effect. The right
    footswitch cycles through the available neural amp/pedal models.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 GitHub 上的开源代码。当加载到 Terrarium 效果器上时，它具有输入/输出电平旋钮、湿/干混音器、4 个 EQ 增益开关，以及最多
    3 个旋钮用于控制一个参数化神经模型（例如增益、低音和高音）。左脚踏开关可以旁路或激活效果。右脚踏开关在可用的神经放大器/效果器模型之间循环切换。
- en: '[](https://github.com/GuitarML/NeuralSeed?source=post_page-----ea9cdad2a29c--------------------------------)
    [## GitHub - GuitarML/NeuralSeed: Neural networks for guitar amp/pedal emulation
    on Daisy Seed'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/GuitarML/NeuralSeed?source=post_page-----ea9cdad2a29c--------------------------------)
    [## GitHub - GuitarML/NeuralSeed: 神经网络用于 Daisy Seed 上的吉他放大器/效果器模拟'
- en: Neural Seed uses neural networks to emulate amps/pedals on the Daisy Seed hardware
    by Electro-Smith, and the Terrarium…
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Neural Seed 利用神经网络在 Electro-Smith 的 Daisy Seed 硬件上模拟放大器/踏板，以及 Terrarium……
- en: github.com](https://github.com/GuitarML/NeuralSeed?source=post_page-----ea9cdad2a29c--------------------------------)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/GuitarML/NeuralSeed?source=post_page-----ea9cdad2a29c--------------------------------)'
- en: Developing for the Daisy Seed has made me appreciate the power of modern day
    computers. The constraints of the M7 processor (which is a very capable microcontroller!)
    made me think outside the box to achieve more using less. The NeuralSeed code
    is open source for anyone to try out on the Daisy Seed / Terrarium pedal, as well
    as mod and make their own tweaks and improvements. There is also a [Colab script](https://colab.research.google.com/github/GuitarML/Automated-GuitarAmpModelling/blob/ns-capture/ProteusCapture.ipynb)
    for training your own models to run with the NeuralSeed software. Here is a video
    demo of the finished Neural Seed pedal running several neural network models of
    actual guitar amps and pedals.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Daisy Seed 开发让我更加欣赏现代计算机的强大。M7 处理器（一个非常强大的微控制器！）的限制让我突破思维定式，用更少的资源实现更多的功能。NeuralSeed
    代码是开源的，任何人都可以在 Daisy Seed / Terrarium 踏板上尝试、修改和进行自己的调整和改进。此外，还有一个 [Colab 脚本](https://colab.research.google.com/github/GuitarML/Automated-GuitarAmpModelling/blob/ns-capture/ProteusCapture.ipynb)
    用于训练自己的模型以与 NeuralSeed 软件配合运行。这里有一个视频演示，展示了完成的 Neural Seed 踏板运行多个实际吉他放大器和踏板的神经网络模型。
- en: Neural Seed Demo (Video by Author)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Neural Seed 演示（作者视频）
- en: '*Special thanks to Jatin of* [*ChowDSP*](https://chowdsp.com/) *for minimizing
    the RTNeural footprint and helping me solve the GRU implementation! Also thanks
    to the folks on the Daisy Discord for helping me understand the Daisy Seed and
    related software, and the Neural Amp Modeler Facebook group for providing training
    data.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*特别感谢* [*ChowDSP*](https://chowdsp.com/) *的 Jatin，他帮助我减少了 RTNeural 的足迹，并解决了
    GRU 实现问题！也感谢 Daisy Discord 社区的朋友们，他们帮助我了解 Daisy Seed 和相关软件，以及 Neural Amp Modeler
    Facebook 群组提供的训练数据。*'
