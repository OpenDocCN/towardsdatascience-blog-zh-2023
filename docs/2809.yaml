- en: How to Create a Data-Driven Elo Rating System for 2v2 Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/developing-an-elo-based-data-driven-ranking-system-for-2v2-multiplayer-games-7689f7d42a53?source=collection_archive---------0-----------------------#2023-09-06](https://towardsdatascience.com/developing-an-elo-based-data-driven-ranking-system-for-2v2-multiplayer-games-7689f7d42a53?source=collection_archive---------0-----------------------#2023-09-06)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Putting the math on the table: from algorithms to foosball madness, the quest
    for the ultimate office champion.'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lazarekolebka?source=post_page-----7689f7d42a53--------------------------------)[![Lazare
    Kolebka](../Images/c3697b77f6275d40d65e488faf9c01dd.png)](https://medium.com/@lazarekolebka?source=post_page-----7689f7d42a53--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7689f7d42a53--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7689f7d42a53--------------------------------)
    [Lazare Kolebka](https://medium.com/@lazarekolebka?source=post_page-----7689f7d42a53--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff1c1df53dff1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-an-elo-based-data-driven-ranking-system-for-2v2-multiplayer-games-7689f7d42a53&user=Lazare+Kolebka&userId=f1c1df53dff1&source=post_page-f1c1df53dff1----7689f7d42a53---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7689f7d42a53--------------------------------)
    ¬∑19 min read¬∑Sep 6, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7689f7d42a53&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-an-elo-based-data-driven-ranking-system-for-2v2-multiplayer-games-7689f7d42a53&user=Lazare+Kolebka&userId=f1c1df53dff1&source=-----7689f7d42a53---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7689f7d42a53&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-an-elo-based-data-driven-ranking-system-for-2v2-multiplayer-games-7689f7d42a53&source=-----7689f7d42a53---------------------bookmark_footer-----------)![](../Images/2300eec4a055e10f90e34464ff111ace.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Pascal Swier](https://unsplash.com/@pascalswier?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '*Hi and welcome!*'
  prefs: []
  type: TYPE_NORMAL
- en: '*My name is Lazare and I just finished my second bachelor degree in Business
    Data Analysis. This article is based on the work I did for my bachelor thesis.*'
  prefs: []
  type: TYPE_NORMAL
- en: From friendly matches to intense competition, foosball has found its niche in
    corporate culture, providing a unique way for teams to connect and compete.
  prefs: []
  type: TYPE_NORMAL
- en: This article explores the math behind a 2v2 Elo-based scoring system that can
    be applied to foosball or any other 2v2 game. It also examines the architecture
    that supports data processing, and presents the creation of a web application
    that provides real-time ranking and data analysis using Python.
  prefs: []
  type: TYPE_NORMAL
- en: The Elo Ranking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Elo rating system is a method used to determine the relative skill level
    of a player in a [zero-sum games](https://en.wikipedia.org/wiki/Zero-sum_game).
    It was first developed for chess but is now being applied as a rating system in
    a variety of other sports such as baseball, basketball, various board games and
    e-sports.
  prefs: []
  type: TYPE_NORMAL
- en: '*One well-known example of this system is in chess, where the Elo rating system
    is employed to rank players worldwide. Magnus Carlsen, also known as the ‚ÄúMozart
    of Chess‚Äù, holds the highest Elo rating in the world with a rating of 2,853 in
    2023, demonstrating his extraordinary skills in the game.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Elo rating formula is a two-part formula: first, it calculates the **expected
    outcome** for a given group of players, and then it determines the **rating adjustment**
    based on the outcome of the match and the expected outcome.'
  prefs: []
  type: TYPE_NORMAL
- en: Expected Outcome Calculation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following example in chess with Player A and Player B with ratings
    Rùñ† and *R*ùñ° respectively. The equation for the expected score of Player A against
    Player B is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2395428427ef51203c05b739866b740.png)'
  prefs: []
  type: TYPE_IMG
- en: The Elo algorithm uses a variable that can be adjusted to control how the winning
    probability is influenced by the players‚Äô ratings. In this example, it is set
    to 400, which is typical for most sports, including chess.
  prefs: []
  type: TYPE_NORMAL
- en: Now let‚Äôs take a look at a more realistic example, where player A has a rating
    of 1,500 and Player B, 1,200.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same equation seen above can calculate Player A‚Äôs expected score against
    Player B:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b09dece89f1cc0c9afca9bf759b0bacc.png)'
  prefs: []
  type: TYPE_IMG
- en: With this calculation, we know that Player A has a 84.9% chance of winning against
    Player B.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find the estimated probability of Player B winning against Player A, the
    same formula is used, but the order of ratings is reversed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1513d50bc356fa331e79e359b7746508.png)'
  prefs: []
  type: TYPE_IMG
- en: The sum of the probabilities of Player A winning and Player B winning equals
    1 (0.849 + 0.151 = 1). In this scenario, Player A therefore has an 84.9% chance
    of winning, leaving Player B with only a 15.1% chance.
  prefs: []
  type: TYPE_NORMAL
- en: '*Rating Calculation*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The difference in rating between the winner and the loser determines the total
    number of points won or lost after each game.
  prefs: []
  type: TYPE_NORMAL
- en: If a player with a much higher Elo rating wins, they will receive fewer points
    for their victory, and their opponent will lose only a few points for their defeat.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By contrast, if the lower-ranked player wins, this achievement is considered
    much more significant, thus the reward is greater and the higher-ranked opponent
    is penalized accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The formula to calculate the new rating of Player A playing against Player
    B is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/854d6ef9f2d62f5f132505e09fab6bc8.png)'
  prefs: []
  type: TYPE_IMG
- en: In this formula, ( *S*ùñ† ‚Äî *E*ùñ† ) represents the difference between Player A‚Äôs
    actual score and the expected score. The additional variable *K* determines approximately
    how much a player‚Äôs rating can change after a single match. In chess, this variable
    is set to 32.
  prefs: []
  type: TYPE_NORMAL
- en: If Player A wins, the actual score, which is 1 in this case, will be greater
    than the expected score of 0.849, creating a positive variance.
  prefs: []
  type: TYPE_NORMAL
- en: 'This indicates that Player A performed better than initially expected. As a
    result, the Elo rating system recalibrates the ratings for both players:'
  prefs: []
  type: TYPE_NORMAL
- en: Player A‚Äôs rating will increase because of the win
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Player B‚Äôs rating will decrease because of the loss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once again, this same equation can calculate the new rating of Player A and
    Player B:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45beac5691a17bfb831c6fbb863b675c.png)'
  prefs: []
  type: TYPE_IMG
- en: In summary, the Elo rating system offers a robust and efficient method for evaluating
    and comparing players‚Äô skills dynamically and fairly. It continually updates a
    player‚Äôs rating after each match, considering the skill difference between the
    two opponents.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach rewards risk-taking, as winning against a higher-rated player
    results in a more significant increase in a player‚Äôs rating, as shown in the table
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07f27d4e9eee766fe835c73a1b7f71bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE I : Example of the Elo System in Chess | Table by the author'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, if a higher-rated player goes against their winning probability
    and loses against a lower-rated player, their rating will be significantly impacted:
    they will lose more points, and their opponent will gain more points.'
  prefs: []
  type: TYPE_NORMAL
- en: '*In summary, when a player wins a match, the lower their winning probability
    is, the higher the amount of points they can win.*'
  prefs: []
  type: TYPE_NORMAL
- en: In its current state, this rating formula, originally designed for chess, is
    not fully adapted to foosball.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, foosball does have more variables than chess such as:'
  prefs: []
  type: TYPE_NORMAL
- en: It is a **four-player game** with teams of two (2v2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each team member **can positively or negatively influence their teammate**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike the binary outcome in chess, the scale of victory or defeat in foosball
    can vary considerably depending on the teams‚Äô scores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rating Algorithm Exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The focus here is on adapting the Elo rating system to the unique requirements
    of foosball games, involving four players divided into two teams.*'
  prefs: []
  type: TYPE_NORMAL
- en: Winning Probability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin calculating new player ratings, a refined formula needs to be established
    to determine the expected outcome of a game involving four players in two teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, consider a hypothetical four-player foosball game scenario:
    Player 1, Player 2, Player 3, and Player 4, each with a different rating that
    represents their skill level.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6ad3b7d6fe009230c610207152d47238.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE II: Scenario with 4 Players Playing Foosball | Table by the author'
  prefs: []
  type: TYPE_NORMAL
- en: To calculate the expected score of Team 1 against Team 2 in the revised Elo
    rating system, the expected score of each player involved in the game needs to
    be determined.
  prefs: []
  type: TYPE_NORMAL
- en: 'Player 1‚Äôs expected rating, denoted by *E*ùñØùü£, can be calculated by averaging
    the sum of each opponent‚Äôs rating using the Elo rating formula as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b831135973e20979eff19759b3216ad.png)'
  prefs: []
  type: TYPE_IMG
- en: After extensive testing, it was decided that it would be appropriate for the
    expected score formula to set the variable used to divide the rating difference
    to 500, rather than the traditional value of 400 used in chess. This increased
    value means that a player‚Äôs rating will have a smaller impact on their expected
    score.
  prefs: []
  type: TYPE_NORMAL
- en: '*A primary reason for this adjustment is that, unlike chess, there is a slight
    element of chance in foosball. By using a value of 500, the game outcomes can
    be more accurately predicted, and a reliable rating system can be developed.*'
  prefs: []
  type: TYPE_NORMAL
- en: To calculate the expected score of Player 2 denoted by *E*ùñØùü§, against Player
    3 and Player 4, the same method as utilized for Player 1 can be employed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected score of the Team denoted *E*ùñ≥ùü£ can then be calculated by taking
    the average of *E*ùñØùü£ and *E*ùñØùü§ :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55147bbaa288a35cbf6ef7a946e7fa49.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the expected scores for each player are computed, they can then be used
    to calculate the outcome of the match. The team with the highest expected score
    is more likely to win. By averaging the expected scores for each team member,
    **the issue of skill differences within the team can then be solved !**
  prefs: []
  type: TYPE_NORMAL
- en: The table below shows the expected scores of Player 1 and 2 against Players
    3 and 4.
  prefs: []
  type: TYPE_NORMAL
- en: P1‚Äôs expected scores against P3 and P4 are 0.091 and 0.201, corresponding to
    a 14.6% chance of winning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: P2‚Äôs expected scores against P3 and P4 are 0.201 and 0.387, giving a combined
    winning probability of 29.4%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For P1, partnering with a stronger player like P2 can increase their overall
    chances of winning, as demonstrated by the 22%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/6637be8017385f184d1e7f091834010e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE III : Expected Score Based on the Scenario Shown in Figure II | Table
    by the author'
  prefs: []
  type: TYPE_NORMAL
- en: If the team of P1 and P2 wins, P1 gains fewer points than their individual expected
    score would suggest, as P2, who is higher ranked, also contributes to the win
    and lowers their overall winning probability.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, P2 gains more points due to having a lower- ranked teammate.
    In case of a win, P2 is rewarded for taking a risk, while P1 earns fewer points,
    as it is assumed P2 contributed more significantly to the victory, and vice versa
    if they lose.
  prefs: []
  type: TYPE_NORMAL
- en: Rating Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the expected outcome of a four-player match has been determined, this
    information can be incorporated into a new formula that considers multiple variables
    that affect the match and player ratings.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed earlier, the K-value can be modified to better fit the needs of
    the rating system. This new formula considers the number of games played by each
    player, reflecting their seniority as well as the result of the game.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the 2014 World Cup semi-final, Germany defeated Brazil by a
    score of 7‚Äì1\. This was one of the most shocking and humiliating results in World
    Cup history, as Brazil was the host nation and had never lost a competitive match
    at home since 1975.
  prefs: []
  type: TYPE_NORMAL
- en: If we were to apply the rating system to this match, we would expect Germany
    to gain a significant amount of points, while Brazil would lose a large amount
    of points, reflecting the difference in their performance and skill level.
  prefs: []
  type: TYPE_NORMAL
- en: '***K-Value*** The K-rating, denoted as *K*ùü£ for Player 1 in this case, determines
    how much a player‚Äôs rating will change after one game. This revised K-value takes
    into account the number of games the player has played to balance the effect of
    each game on their rating. After conducting numerous tests, a formula was developed
    for calculating the K-value for each player.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Player 1, this is expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2962b144443f39fc46e071a01f749d90.png)'
  prefs: []
  type: TYPE_IMG
- en: This formula for the K-value is designed to have a greater impact on the rating
    for new players while providing stability and less rating fluctuation for experienced
    players. Specifically, after playing 300 games, a player‚Äôs rating becomes more
    representative of their skill level.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/54909432ac4c61ad2a7b03f04e055d04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE IV: K-value Over Time | Chart by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Figure IV shows the effect of the number of games played on the K-value. Starting
    at 50, this graph shows that the K-value decreases as the number of games played
    increases, reaching a halved value of 25 after 300 games. This ensures that the
    impact of each game on a player‚Äôs rating decreases as experience increases.
  prefs: []
  type: TYPE_NORMAL
- en: '***Point Factor*** To consider the points scored by each team, a new variable,
    called the ‚Äúpoint factor‚Äù, was introduced into the equation. This factor multiplies
    the *K* parameter of each player and is based on the absolute difference in points
    between the two teams. The impact of a match must be greater when a team wins
    by a large margin, i.e., an overwhelming victory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To calculate the point factor, the following formula was used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bc213518762f7252f5c8accaf5a272a7.png)'
  prefs: []
  type: TYPE_IMG
- en: This formula takes the absolute difference between the scores of the two teams,
    adds 1, and computes the base-10 logarithm of the result. This value is then cubed
    and 2 is added to the result to obtain the final value of the point factor.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b85648906b08641f9541561cf6cfc549.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE V: Point Factor | Chart by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Final Rating Calculation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After adjusting all the necessary variables, an improved formula was developed
    to calculate the new ranking of each player involved in a game.
  prefs: []
  type: TYPE_NORMAL
- en: Each player‚Äôs rating now takes into account their previous rating, the rating
    of their opponents, the impact of their teammates, their playing history, and
    the score of the game. This formula ensures that each player is rewarded according
    to their true performance, taking into account the fairness of each match.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going off of the previous example, the new formula for player A‚Äôs ranking is
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49486b022ecd37996347ca9c017b86e9.png)'
  prefs: []
  type: TYPE_IMG
- en: This improved formula rewards players based on their actual performance, encourages
    risk taking and provides a more balanced rating system for both new and experienced
    players.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an Elo algorithm, we can move on to database modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Database Design and Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [proposed database](https://github.com/lkolebka/baby-foot-python/blob/7aab1661e9f84e24746c26302fa03818b4834712/create_uppload%20_match/createDB.sql)
    model adopts a relational approach, organizing data into interconnected tables
    through the use of Primary Keys (PKs) and Foreign Keys (FKs). This structured
    organization facilitates data management and analysis, making PostgreSQL an appropriate
    choice as the database management system. PKs and FKs help maintain data consistency
    and minimize redundancy within the database.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a0200e85067fd74458d2a6ee309ffd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE VI: Diagram Model of the Database | Image by the author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two types of relationships exist between tables in this database model: *one-to-many*
    and *many-to-many*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The relationship between the ‚Äò**Player**‚Äô table and the ‚Äò**Match**‚Äô table is
    many-to-many since a player can participate in numerous matches, and multiple
    players can be involved in a single match. A junction table called ‚Äò**PlayerMatch**‚Äô
    bridges this relationship, containing two foreign keys: ‚Äò**player_id**‚Äô (referencing
    the participating player) and ‚Äò**match_id**‚Äô (referencing the corresponding match).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This structure ensures the accurate association of players and matches as demonstrated
    in the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A similar logic applies to the ‚Äò**TeamMatch**‚Äô table, which serves as a junction
    between the ‚Äò**Match**‚Äô and ‚Äò**Team**‚Äô tables, allowing multiple teams to play
    one match and one match to involve multiple teams.
  prefs: []
  type: TYPE_NORMAL
- en: Separate tables for ‚Äò**PlayerRating**‚Äô and ‚Äò**TeamRating**‚Äô have been designed
    to streamline ranking analysis over time. These tables connect to the ‚Äò**PlayerMatch**‚Äô
    and ‚Äô**TeamMatch**‚Äô tables respectively through ‚Äò**player_match_id**‚Äô and ‚Äò**team_match_id**‚Äô.
  prefs: []
  type: TYPE_NORMAL
- en: '***Data Integrity***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the use of PKs and FKs, this database model also uses appropriate
    data types and CHECK constraints for data integrity:'
  prefs: []
  type: TYPE_NORMAL
- en: The ‚Äò**winning_team_score**‚Äô and ‚Äò**losing_team_score**‚Äô columns in the ‚Äò**Match**‚Äô
    table are integers, preventing non-numeric entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CHECK constraints enforce that the ‚Äò**winning_team_score**‚Äô is exactly 11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CHECK constraints enforce that the ‚Äò**losing_team_score**‚Äô is between 0 and
    10, adhering to the game rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As seen in the code chunk below, the use of sequences for each primary key has
    been implemented in the database creation to facilitate data entry. This automation
    simplifies the overall procedure when later using the Python loop for the data
    entry process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Data Processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The main challenge was to find a way to process the match data in a sequence
    that would allow for the retrieval of the IDs from the initial data that was being
    processed and inserted into the database.*'
  prefs: []
  type: TYPE_NORMAL
- en: These particular IDs could then serve as foreign keys to manage the remaining
    data, creating the necessary relationships in the process. In other words, the
    first step was to identify and store specific data (IDs) from the raw data, and
    then use these IDs as a bridge to link and process the rest of the data.
  prefs: []
  type: TYPE_NORMAL
- en: The data was processed step by step, using increasingly complex Python loops.
    Each new entry was assigned a unique primary key generated from the table‚Äôs sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The first step was to handle the individual players and obtain their IDs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, teams were processed using the player IDs. For each unique pair of players
    in a match, an entry was created in the ‚Äò**Team**‚Äô table (FK players)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following this, matches were handled using the winning and losing team IDs.
    After processing the matches, the ‚Äò**PlayerMatch**‚Äô and ‚Äò**TeamMatch**‚Äô tables
    were addressed by retrieving the corresponding match, player, and team IDs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all the necessary data had been processed, the ‚Äò**PlayerMatch**‚Äô and ‚Äò**TeamMatch**‚Äô
    IDs, along with the ‚Äò**match**‚Äô timestamps, were used in the ‚Äò**PlayerRating**‚Äô
    and ‚Äô**TeamRating**‚Äô tables to track the evolution of ratings over time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Application Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The objective of the web application is to allow users to enter game results,
    verify data, and interact directly with the database. This ensures that the data
    is **up-to-date and offered in real time** so that users are always able to access
    ranking or visualize their metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, I wanted to make the web app mobile-friendly, because who would
    want to drag a laptop around to play foosball? That would not be very practical
    or fun.
  prefs: []
  type: TYPE_NORMAL
- en: Technology Stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Backend***After comparing [Django and Flask](https://testdriven.io/blog/django-vs-flask/),
    two popular web frameworks for building web applications in Python, Flask was
    chosen for its beginner-friendly approach. The Flask web framework is used to
    handle user requests, process data, and interact with the PostgreSQL database.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Frontend*** The frontend consists of static HTML and CSS files, which define
    the structure and styling of the web application. JavaScript is used for form
    validation and handling user interactions. This ensures that the data submitted
    by users is consistent and accurate before being sent to the backend.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Data Visualization*** When it comes to data visualization, the biggest challenge
    is having up-to-date data. To overcome this limitation, the data visualization
    layer uses [Plotly](https://plotly.com), a Python library, to generate interactive
    charts and graphs that visualize player ratings over time. This component receives
    data from the backend, processes it, and presents it to users in a user-friendly
    format.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Database*** PostgreSQL was used for both the local development environment
    as well as the production environment on AWS, via Heroku. Automatic database backups
    are facilitated by Heroku, ensuring that data is protected and can be easily restored
    if necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: UI/UX Research
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the UI/UX design, inspiration was drawn from the modern web designs of Spotify
    and the new Bing search engine. The goal was to create a familiar and intuitive
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6c22777108a8f96b727afe4612f297d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE VII: Mockup of the Application | Image by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Application Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let‚Äôs dive into the features of the application with a concrete scenario. Team
    1 (Matthieu and Gabriel) wants to play against Team 2 (Wissam and Malik). All
    players have a different rating that is representative of their skill level, shown
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/718fe6e281fd8428954e40a344e564c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Calculate Odds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing players want to do before any match is to calculate their winning
    probability.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, the ‚ÄúCalculate Odds‚Äù view allows users to select four players using
    the drop-down menu and generate the winning probability for the selected teams.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c411eec63a24dfd4a73462a2d982d4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE VIII: Calculate Odds | Image by the author'
  prefs: []
  type: TYPE_NORMAL
- en: This feature is primarily used before a game to verify that a match is balanced
    and to inform players about their winning probability. For example, Team 1 has
    a higher chance of winning (64.19%) than Team 2 who has a 35.81% chance of winning.
    This view informs each player of the stakes and the risk taken.
  prefs: []
  type: TYPE_NORMAL
- en: Once the form is submitted, the application computes only the first part of
    the algorithm, which consists of calculating the expected outcome of a game given
    the four selected players.
  prefs: []
  type: TYPE_NORMAL
- en: Upload a game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ‚ÄúUpload a Game‚Äù view serves the home page of the application. It is designed
    for user convenience, allowing them to upload a game immediately upon opening
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/512127c1d46a84ea9eb0d7bca7392acf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE IX: Upload a Game & Match Uploaded | Image by the author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before the form is submitted, the application performs data validation using
    JavaScript to ensure:'
  prefs: []
  type: TYPE_NORMAL
- en: Four different players are selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scores are non-negative integers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is only one winning team with a score of exactly 11, with no draws allowed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the validation is successful, the application processes the data using
    the full algorithm, updates the corresponding tables in the database, and gives
    users a confirmation of their upload.
  prefs: []
  type: TYPE_NORMAL
- en: The ‚ÄúMatch Uploaded‚Äù view is designed to show users the effect of each match
    on their individual ratings. It calculates the difference between the players‚Äô
    ratings before and after the match was uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: '*As shown above, the game does not have the same effect on each player‚Äôs rating.
    This is because of the individual parameters of the algorithm on each player:
    their expected score, their number of games, their teammate and the opposing team.*'
  prefs: []
  type: TYPE_NORMAL
- en: Elo Ranking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ‚ÄúPlayer Ranking‚Äù view allows users to access the real-time monthly ranking
    and compare themselves with other players. Users can see their rating, the number
    of games they played throughout the month, and the last game they played showcasing
    their latest rating.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d36343a515eb0a860855f525ecd53483.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE X: Player Ranking | Image by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Once the ‚ÄúPlayer Ranking‚Äù view is accessed or a new period is submitted, the
    application queries the database using a CTE approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'This involves joining all necessary tables and displaying the most recent ranking
    update, using the period selector to filter the query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary goal in developing this comprehensive solution was to provide users
    with a real-time ranking system that serves as a visual representation of each
    player‚Äôs performance.
  prefs: []
  type: TYPE_NORMAL
- en: Although powerful tools like PowerBI and Qlik are available for data visualization,
    a fully mobile-compatible solution was chosen, allowing users to gain real-time
    insights on their devices without incurring licensing fees.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two methods were utilized to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: First, Dash Plotly, a Python framework that enables developers to build interactive,
    data- driven applications on top of Flask applications, was used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, various SQL queries and static HTML pages were employed to pull information
    from the database and display it, ensuring that users always have access to real-time
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rating Evolution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This visualization allows players to observe the impact of each game on their
    ranking and to identify broader trends. For example, they can see exactly when
    someone overtakes them or see the impact of consecutive wins or losses.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dcd44b67119ab453525c58d4122c9543.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE XI: Rating Evolution | Image by the author'
  prefs: []
  type: TYPE_NORMAL
- en: 'When accessing the ‚ÄúRating Evolution‚Äù view, the application performs a query
    on the database for each selected player, retrieving the most recent ranking update
    for each day a game was played:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The retrieved data table is then transformed into a line chart, with the columns
    converted into axes using Dash.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the database load and simplify the data presentation in the chart,
    only the latest rating update is displayed for each day.
  prefs: []
  type: TYPE_NORMAL
- en: Player Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inspired by Spotify Wrapped, the idea is to provide insights derived from constant
    data collection. While there is immense potential to visualize player insights,
    the focus is on metrics that highlight individual performance and connections
    between players.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b6886075a078b6595eaaf377ace3928a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'FIGURE XII: Player Metrics | Image by the author'
  prefs: []
  type: TYPE_NORMAL
- en: 'These metrics are organized into three color-coded categories: partner, games,
    and rivals, with each metric accompanied by a title, a value, and a sub-measure
    for more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Game Metrics*** These metrics are centered on the screen and displayed in
    blue for neutrality. They include the total number of games played since data
    collection began.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Partner Metrics*** The partner metrics appear on the left side of the screen.
    They are displayed in green because of their positive connotation.'
  prefs: []
  type: TYPE_NORMAL
- en: The top box highlights the primary partner with whom the selected player has
    played the most games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second metric identifies the player‚Äôs best partner. This is defined by the
    highest winning percentage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third metric in this category is the selected player‚Äôs worst partner This
    is calculated based on the lowest win percentage (or highest loss percentage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Rival Metrics*** Rival metrics are displayed in red to indicate opposition.
    Rival metrics represent the competitive relationship between players.'
  prefs: []
  type: TYPE_NORMAL
- en: The top box shows the most common opponent, with a sub-metric indicating the
    number of games played together, similar to the partner metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second metric, ‚ÄúEasiest Rival‚Äù, represents the opponent against whom the
    player has the highest win rate. This indicates a weaker opponent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final metric is the player against whom the selected player has the lowest
    win rate. This metric indicates the most difficult opponent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I write this, it‚Äôs been 6 months that the application has been in use, and
    these are the results so far:'
  prefs: []
  type: TYPE_NORMAL
- en: This ranking system based on the Elo system predicts match results and accurately
    ranks players based on their actual performance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Players have become more competitive, as they are now increasingly aware of
    their performance due to data visualization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Players have become more inclusive thanks to an improved formula that rewards
    players who take risks. Players who wouldn‚Äôt normally play together now have the
    incentive to pair up
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By adopting a data-driven strategy, this project has highlighted the profound
    influence and importance of data.
  prefs: []
  type: TYPE_NORMAL
- en: Going beyond simple analysis of player performance, this project has initiated
    a transformation in the way players approach foosball games and interact with
    other players as well as newcomers. The power of data has truly cultivated a more
    inclusive and competitive environment.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading this far! I hope you found this article useful. If you
    are interested in reading the full paper, it is available [here](https://www.academia.edu/104818976/CREATING_CONNECTION_THROUGH_COMPETITION_THE_DEVELOPMENT_OF_AN_ELO_BASED_DATA_DRIVEN_RANKING_SYSTEM_FOR_BABY_FOOT).
  prefs: []
  type: TYPE_NORMAL
- en: Also, all the code is available on [Github](https://github.com/lkolebka/baby-foot-python.git).
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to share your thoughts in the comments :)
  prefs: []
  type: TYPE_NORMAL
