["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nbike = (pd\n        .read_csv(\"../../dataset/bike_sharing/day.csv\")\n       )\nbike\n```", "```py\n(bike\n .assign(ratio_casual_registered = bike.casual.div(bike.registered),\n         avg_temp = bike.temp.add(bike.atemp).div(2),\n         ratio_squared = lambda df_: df_.ratio_casual_registered.pow(2))\n)\n```", "```py\n(bike\n .groupby(['season', 'weathersit'])\n .mean(numeric_only=True) #alternative version: apply(lambda df_: df_.mean(numeric_only=True)) \n .atemp\n)\n```", "```py\n#Example 1: Aggregating using more than 1 function\n(bike\n .groupby(['season'])\n .agg(['mean', 'median'])\n .atemp\n)\n\n#Example 2: Aggregating using different function for different columns\n(bike\n .groupby(['season'])\n .agg(Meann=('temp', 'mean'), Mediann=('atemp', np.median))\n)\n```", "```py\n(bike\n .assign(mean_atemp_season = lambda df_: df_\n                                          .groupby(['season'])\n                                          .atemp\n                                          .transform(np.mean, numeric_only=True))\n)\n```", "```py\n(bike\n .pivot_table(values=['temp', 'atemp'],\n              index=['season'],\n              columns=['workingday'],\n              aggfunc=np.mean)\n)\n```", "```py\ndef tweak_bike(bike: pd.DataFrame) -> pd.DataFrame:\n    return (bike\n            .drop(columns=['instant'])\n            .assign(dteday=lambda df_: pd.to_datetime(df_.dteday))\n            .set_index('dteday')\n           )\nbike = tweak_bike(bike)\n(bike\n .resample('M')\n .temp\n .mean()\n)\n```", "```py\n(bike\n .resample('M')\n .temp\n .mean()\n)\n```", "```py\n(bike\n .groupby(['season', 'weathersit'])\n .agg('mean')\n .temp\n)\n```", "```py\n(bike\n .groupby(['season', 'weathersit'])\n .agg('mean')\n .temp\n .unstack()\n .plot\n .line()\n)\n```", "```py\n(bike\n .groupby(['season', 'weathersit'])\n .agg('mean')\n .temp\n .unstack(level=0)\n .plot\n .line()\n)\n```", "```py\n(bike\n .loc[bike.index.year == 2012]\n .groupby(['season'])\n .workingday\n .agg(sum)\n .pipe(lambda x: x.div(x.sum()))\n)\n```", "```py\n#Doesn't work out well!\n(bike\n .loc[bike.index.year == 2012]\n .groupby(['season'])\n .workingday\n .agg(sum)\n .div(...)\n)\n```"]