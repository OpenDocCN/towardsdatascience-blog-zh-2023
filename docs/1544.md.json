["```py\n# Importing open3d and all other necessary libraries.\n\nimport open3d as o3d\nimport os\nimport copy\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\n\nnp.random.seed(42)\n```", "```py\n# Checking the installed version on open3d.\n\no3d.__version__\n# Open3D version used in this exercise: 0.16.0\n```", "```py\n# Defining the path to the 3D model file.\nmesh_path = \"data/3d_model.obj\"\n\n# Reading the 3D model file as a 3D mesh using open3d.\nmesh = o3d.io.read_triangle_mesh(mesh_path)\n```", "```py\n# Visualizing the mesh.\ndraw_geoms_list = [mesh]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Computing the normals for the mesh.\nmesh.compute_vertex_normals()\n\n# Visualizing the mesh.\ndraw_geoms_list = [mesh]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Creating a mesh of the XYZ axes Cartesian coordinates frame.\n# This mesh will show the directions in which the X, Y & Z-axes point,\n# and can be overlaid on the 3D mesh to visualize its orientation in\n# the Euclidean space.\n# X-axis : Red arrow\n# Y-axis : Green arrow\n# Z-axis : Blue arrow\nmesh_coord_frame = o3d.geometry.TriangleMesh.create_coordinate_frame(size=5, origin=[0, 0, 0])\n\n# Visualizing the mesh with the coordinate frame to understand the orientation.\ndraw_geoms_list = [mesh_coord_frame, mesh]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Cropping the car mesh using its bouding box to remove its right half (positive Z-axis).\nbbox = mesh.get_axis_aligned_bounding_box()\nbbox_points = np.asarray(bbox.get_box_points())\nbbox_points[:, 2] = np.clip(bbox_points[:, 2], a_min=None, a_max=0)\nbbox_cropped = o3d.geometry.AxisAlignedBoundingBox.create_from_points(o3d.utility.Vector3dVector(bbox_points))\nmesh_cropped = mesh.crop(bbox_cropped)\n\n# Visualizing the cropped mesh.\ndraw_geoms_list = [mesh_coord_frame, mesh_cropped]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Uniformly sampling 100,000 points from the mesh to convert it to a point cloud.\nn_pts = 100_000\npcd = mesh.sample_points_uniformly(n_pts)\n\n# Visualizing the point cloud.\ndraw_geoms_list = [mesh_coord_frame, pcd]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Cropping the car point cloud using bounding box to remove its right half (positive Z-axis).\npcd_cropped = pcd.crop(bbox_cropped)\n\n# Visualizing the cropped point cloud.\ndraw_geoms_list = [mesh_coord_frame, pcd_cropped]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Defining the camera and radius parameters for the hidden point removal operation.\ndiameter = np.linalg.norm(np.asarray(pcd.get_min_bound()) - np.asarray(pcd.get_max_bound()))\ncamera = [0, 0, diameter]\nradius = diameter * 100\n\n# Performing the hidden point removal operation on the point cloud using the\n# camera and radius parameters defined above.\n# The output is a list of indexes of points that are visible.\n_, pt_map = pcd.hidden_point_removal(camera, radius)\n```", "```py\n# Painting all the visible points in the point cloud in blue, and all the hidden points in red.\n\npcd_visible = pcd.select_by_index(pt_map)\npcd_visible.paint_uniform_color([0, 0, 1])    # Blue points are visible points (to be kept).\nprint(\"No. of visible points : \", pcd_visible)\n\npcd_hidden = pcd.select_by_index(pt_map, invert=True)\npcd_hidden.paint_uniform_color([1, 0, 0])    # Red points are hidden points (to be removed).\nprint(\"No. of hidden points : \", pcd_hidden)\n\n# Visualizing the visible (blue) and hidden (red) points in the point cloud.\ndraw_geoms_list = [mesh_coord_frame, pcd_visible, pcd_hidden]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Defining a function to convert degrees to radians.\ndef deg2rad(deg):\n    return deg * np.pi/180\n\n# Rotating the point cloud about the X-axis by 90 degrees.\nx_theta = deg2rad(90)\ny_theta = deg2rad(0)\nz_theta = deg2rad(0)\ntmp_pcd_r = copy.deepcopy(pcd)\nR = tmp_pcd_r.get_rotation_matrix_from_axis_angle([x_theta, y_theta, z_theta])\ntmp_pcd_r.rotate(R, center=(0, 0, 0))\n\n# Visualizing the rotated point cloud.\ndraw_geoms_list = [mesh_coord_frame, tmp_pcd_r]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Performing the hidden point removal operation on the rotated point cloud\n# using the same camera and radius parameters defined above.\n# The output is a list of indexes of points that are visible.\n_, pt_map = tmp_pcd_r.hidden_point_removal(camera, radius)\n\n# Painting all the visible points in the rotated point cloud in blue,\n# and all the hidden points in red.\n\npcd_visible = tmp_pcd_r.select_by_index(pt_map)\npcd_visible.paint_uniform_color([0, 0, 1])    # Blue points are visible points (to be kept).\nprint(\"No. of visible points : \", pcd_visible)\n\npcd_hidden = tmp_pcd_r.select_by_index(pt_map, invert=True)\npcd_hidden.paint_uniform_color([1, 0, 0])    # Red points are hidden points (to be removed).\nprint(\"No. of hidden points : \", pcd_hidden)\n\n# Visualizing the visible (blue) and hidden (red) points in the rotated point cloud.\ndraw_geoms_list = [mesh_coord_frame, pcd_visible, pcd_hidden]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Defining a function to rotate a point cloud in X, Y and Z-axis.\ndef get_rotated_pcd(pcd, x_theta, y_theta, z_theta):\n    pcd_rotated = copy.deepcopy(pcd)\n    R = pcd_rotated.get_rotation_matrix_from_axis_angle([x_theta, y_theta, z_theta])\n    pcd_rotated.rotate(R, center=(0, 0, 0))\n    return pcd_rotated\n\n# Defining a function to get the camera and radius parameters for the point cloud\n# for the hidden point removal operation.\ndef get_hpr_camera_radius(pcd):\n    diameter = np.linalg.norm(np.asarray(pcd.get_min_bound()) - np.asarray(pcd.get_max_bound()))\n    camera = [0, 0, diameter]\n    radius = diameter * 100\n    return camera, radius\n\n# Defining a function to perform the hidden point removal operation on the\n# point cloud using the camera and radius parameters defined earlier.\n# The output is a list of indexes of points that are not hidden.\ndef get_hpr_pt_map(pcd, camera, radius):\n    _, pt_map = pcd.hidden_point_removal(camera, radius)    \n    return pt_map\n```", "```py\n# Performing the hidden point removal operation sequentially by rotating the\n# point cloud slightly in each of the three axes from -90 to +90 degrees,\n# and aggregating the list of indexes of points that are not hidden after\n# each operation.\n\n# Defining a list to store the aggregated output lists from each hidden\n# point removal operation.\npt_map_aggregated = []\n\n# Defining the steps and range of angle values by which to rotate the point cloud.\ntheta_range = np.linspace(-90, 90, 7)\n\n# Counting the number of sequential operations.\nview_counter = 1\ntotal_views = theta_range.shape[0] ** 3\n\n# Obtaining the camera and radius parameters for the hidden point removal operation.\ncamera, radius = get_hpr_camera_radius(pcd)\n\n# Looping through the angle values defined above for each axis.\nfor x_theta_deg in theta_range:\n    for y_theta_deg in theta_range:\n        for z_theta_deg in theta_range:\n\n            print(f\"Removing hidden points - processing view {view_counter} of {total_views}.\")\n\n            # Rotating the point cloud by the given angle values.\n            x_theta = deg2rad(x_theta_deg)\n            y_theta = deg2rad(y_theta_deg)\n            z_theta = deg2rad(z_theta_deg)\n            pcd_rotated = get_rotated_pcd(pcd, x_theta, y_theta, z_theta)\n\n            # Performing the hidden point removal operation on the rotated\n            # point cloud using the camera and radius parameters defined above.\n            pt_map = get_hpr_pt_map(pcd_rotated, camera, radius)\n\n            # Aggregating the output list of indexes of points that are not hidden.\n            pt_map_aggregated += pt_map\n\n            view_counter += 1\n\n# Removing all the duplicated points from the aggregated list by converting it to a set.\npt_map_aggregated = list(set(pt_map_aggregated))\n```", "```py\n# Painting all the visible points in the point cloud in blue, and all the hidden points in red.\n\npcd_visible = pcd.select_by_index(pt_map_aggregated)\npcd_visible.paint_uniform_color([0, 0, 1])    # Blue points are visible points (to be kept).\nprint(\"No. of visible points : \", pcd_visible)\n\npcd_hidden = pcd.select_by_index(pt_map_aggregated, invert=True)\npcd_hidden.paint_uniform_color([1, 0, 0])    # Red points are hidden points (to be removed).\nprint(\"No. of hidden points : \", pcd_hidden)\n\n# Visualizing the visible (blue) and hidden (red) points in the point cloud.\ndraw_geoms_list = [mesh_coord_frame, pcd_visible, pcd_hidden]\n# draw_geoms_list = [mesh_coord_frame, pcd_visible]\n# draw_geoms_list = [mesh_coord_frame, pcd_hidden]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Cropping the point cloud of visible points using bounding box defined\n# earlier to remove its right half (positive Z-axis).\npcd_visible_cropped = pcd_visible.crop(bbox_cropped)\n\n# Cropping the point cloud of hidden points using bounding box defined\n# earlier to remove its right half (positive Z-axis).\npcd_hidden_cropped = pcd_hidden.crop(bbox_cropped)\n\n# Visualizing the cropped point clouds.\ndraw_geoms_list = [mesh_coord_frame, pcd_visible_cropped, pcd_hidden_cropped]\no3d.visualization.draw_geometries(draw_geoms_list)\n```", "```py\n# Creating a dataframe for the point cloud with the X, Y & Z positional coordinates\n# and the normal unit vector coordinates in the X, Y & Z directions of all points.\npcd_df = pd.DataFrame(np.concatenate((np.asarray(pcd.points), np.asarray(pcd.normals)), axis=1),\n                      columns=[\"x\", \"y\", \"z\", \"norm-x\", \"norm-y\", \"norm-z\"]\n                     )\n\n# Adding a column to indicate whether the point is visible or not using the aggregated\n# list of indexes of points from the hidden point removal operation above.\npcd_df[\"point_visible\"] = False\npcd_df.loc[pt_map_aggregated, \"point_visible\"] = True\n```", "```py\n# Saving the entire point cloud as a .pcd file.\npcd_save_path = \"data/3d_model.pcd\"\no3d.io.write_point_cloud(pcd_save_path, pcd)\n\n# Saving the point cloud with the hidden points removed as a .pcd file.\npcd_visible_save_path = \"data/3d_model_hpr.pcd\"\no3d.io.write_point_cloud(pcd_visible_save_path, pcd_visible)\n\n# Saving the point cloud dataframe as a .csv file.\npcd_df_save_path = \"data/3d_model.csv\"\npcd_df.to_csv(pcd_df_save_path, index=False)\n```"]