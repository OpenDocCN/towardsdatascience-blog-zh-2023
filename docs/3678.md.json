["```py\ncargo add criterion --dev --features html_reports\nmkdir benches\n```", "```py\n[[bench]]\nname = \"bench\"\nharness = false\n```", "```py\n#![feature(portable_simd)]\n#![feature(array_chunks)]\nuse criterion::{black_box, criterion_group, criterion_main, Criterion};\nuse is_consecutive1::*;\n\n// create a string from the SIMD extension used\nconst SIMD_SUFFIX: &str = if cfg!(target_feature = \"avx512f\") {\n    \"avx512f,512\"\n} else if cfg!(target_feature = \"avx2\") {\n    \"avx2,256\"\n} else if cfg!(target_feature = \"sse2\") {\n    \"sse2,128\"\n} else {\n    \"error\"\n};\ntype Integer = i32;\nconst LANES: usize = 64;\n// compare against this\n#[inline]\npub fn is_consecutive_regular(chunk: &[Integer; LANES]) -> bool {\n    for i in 1..LANES {\n        if chunk[i - 1].checked_add(1) != Some(chunk[i]) {\n            return false;\n        }\n    }\n    true\n}\n// define a benchmark called \"simple\"\nfn simple(c: &mut Criterion) {\n    let mut group = c.benchmark_group(\"simple\");\n    group.sample_size(1000);\n    // generate about 1 million aligned elements\n    let parameter: Integer = 1_024_000;\n    let v = (100..parameter + 100).collect::<Vec<_>>();\n    let (prefix, simd_chunks, reminder) = v.as_simd::<LANES>(); // keep aligned part\n    let v = &v[prefix.len()..v.len() - reminder.len()]; // keep aligned part\n    group.bench_function(format!(\"regular,{}\", SIMD_SUFFIX), |b| {\n        b.iter(|| {\n            let _: usize = black_box(\n                v.array_chunks::<LANES>()\n                    .map(|chunk| is_consecutive_regular(chunk) as usize)\n                    .sum(),\n            );\n        });\n    });\n    group.bench_function(format!(\"splat1,{}\", SIMD_SUFFIX), |b| {\n        b.iter(|| {\n            let _: usize = black_box(\n                simd_chunks\n                    .iter()\n                    .map(|chunk| IsConsecutive::is_consecutive(*chunk) as usize)\n                    .sum(),\n            );\n        });\n    });\n    group.finish();\n}\ncriterion_group!(benches, simple);\ncriterion_main!(benches);\n```", "```py\n#!/bin/bash\nSIMD_INTEGER_VALUES=(\"i64\" \"i32\" \"i16\" \"i8\" \"isize\" \"u64\" \"u32\" \"u16\" \"u8\" \"usize\")\nSIMD_LANES_VALUES=(64 32 16 8 4)\nRUSTFLAGS_VALUES=(\"-C target-feature=+avx512f\" \"-C target-feature=+avx2\" \"\")\n\nfor simdLanes in \"${SIMD_LANES_VALUES[@]}\"; do\n    for simdInteger in \"${SIMD_INTEGER_VALUES[@]}\"; do\n        for rustFlags in \"${RUSTFLAGS_VALUES[@]}\"; do\n            echo \"Running with SIMD_INTEGER=$simdInteger, SIMD_LANES=$simdLanes, RUSTFLAGS=$rustFlags\"\n            SIMD_LANES=$simdLanes SIMD_INTEGER=$simdInteger RUSTFLAGS=\"$rustFlags\" cargo bench\n        done\n    done\ndone\n```", "```py\nuse std::env;\n\nfn main() {\n    if let Ok(simd_lanes) = env::var(\"SIMD_LANES\") {\n        println!(\"cargo:rustc-cfg=simd_lanes=\\\"{}\\\"\", simd_lanes);\n        println!(\"cargo:rerun-if-env-changed=SIMD_LANES\");\n    }\n    if let Ok(simd_integer) = env::var(\"SIMD_INTEGER\") {\n        println!(\"cargo:rustc-cfg=simd_integer=\\\"{}\\\"\", simd_integer);\n        println!(\"cargo:rerun-if-env-changed=SIMD_INTEGER\");\n    }\n}\n```", "```py\nconst SIMD_SUFFIX: &str = if cfg!(target_feature = \"avx512f\") {\n    \"avx512f,512\"\n} else if cfg!(target_feature = \"avx2\") {\n    \"avx2,256\"\n} else if cfg!(target_feature = \"sse2\") {\n    \"sse2,128\"\n} else {\n    \"error\"\n};\n\n#[cfg(simd_integer = \"i8\")]\ntype Integer = i8;\n#[cfg(simd_integer = \"i16\")]\ntype Integer = i16;\n#[cfg(simd_integer = \"i32\")]\ntype Integer = i32;\n#[cfg(simd_integer = \"i64\")]\ntype Integer = i64;\n#[cfg(simd_integer = \"isize\")]\ntype Integer = isize;\n#[cfg(simd_integer = \"u8\")]\ntype Integer = u8;\n#[cfg(simd_integer = \"u16\")]\ntype Integer = u16;\n#[cfg(simd_integer = \"u32\")]\ntype Integer = u32;\n#[cfg(simd_integer = \"u64\")]\ntype Integer = u64;\n#[cfg(simd_integer = \"usize\")]\ntype Integer = usize;\n#[cfg(not(any(\n    simd_integer = \"i8\",\n    simd_integer = \"i16\",\n    simd_integer = \"i32\",\n    simd_integer = \"i64\",\n    simd_integer = \"isize\",\n    simd_integer = \"u8\",\n    simd_integer = \"u16\",\n    simd_integer = \"u32\",\n    simd_integer = \"u64\",\n    simd_integer = \"usize\"\n)))]\ntype Integer = i32;\nconst LANES: usize = if cfg!(simd_lanes = \"2\") {\n    2\n} else if cfg!(simd_lanes = \"4\") {\n    4\n} else if cfg!(simd_lanes = \"8\") {\n    8\n} else if cfg!(simd_lanes = \"16\") {\n    16\n} else if cfg!(simd_lanes = \"32\") {\n    32\n} else {\n    64\n};\n```", "```py\nfn create_benchmark_id<T>(name: &str, lanes: usize, parameter: usize) -> BenchmarkId\nwhere\n    T: SimdElement,\n{\n    BenchmarkId::new(\n        format!(\n            \"{},{},{},{},{}\",\n            name,\n            SIMD_SUFFIX,\n            type_name::<T>(),\n            mem::size_of::<T>() * 8,\n            lanes,\n        ),\n        parameter,\n    )\n}\n```", "```py\ncargo install cargo-criterion-means\n```", "```py\ncargo criterion-means > results.csv\n```", "```py\nGroup,Id,Parameter,Mean(ns),StdErr(ns)\nvector,regular,avx2,256,i16,16,16,1024,291.47,0.080141\nvector,regular,avx2,256,i16,16,16,10240,2821.6,3.3949\nvector,regular,avx2,256,i16,16,16,102400,28224,7.8341\nvector,regular,avx2,256,i16,16,16,1024000,287220,67.067\n# ...\n```"]