- en: Building A Cross-Platform TFIDF Text Summarizer In Rust
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Rust 中构建跨平台 TFIDF 文本摘要器
- en: 原文：[https://towardsdatascience.com/building-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507?source=collection_archive---------4-----------------------#2023-12-14](https://towardsdatascience.com/building-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507?source=collection_archive---------4-----------------------#2023-12-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507?source=collection_archive---------4-----------------------#2023-12-14](https://towardsdatascience.com/building-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507?source=collection_archive---------4-----------------------#2023-12-14)
- en: Cross Platform NLP in Rust
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台的 Rust NLP
- en: Optimization with Rayon and support for C/C++, Android, Python
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Rayon 进行优化，并支持 C/C++、Android、Python
- en: '[](https://equipintelligence.medium.com/?source=post_page-----7b05938f4507--------------------------------)[![Shubham
    Panchal](../Images/d48aecd8b1ed27ab68fc2e7ff6716606.png)](https://equipintelligence.medium.com/?source=post_page-----7b05938f4507--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7b05938f4507--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7b05938f4507--------------------------------)
    [Shubham Panchal](https://equipintelligence.medium.com/?source=post_page-----7b05938f4507--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://equipintelligence.medium.com/?source=post_page-----7b05938f4507--------------------------------)[![Shubham
    Panchal](../Images/d48aecd8b1ed27ab68fc2e7ff6716606.png)](https://equipintelligence.medium.com/?source=post_page-----7b05938f4507--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7b05938f4507--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7b05938f4507--------------------------------)
    [Shubham Panchal](https://equipintelligence.medium.com/?source=post_page-----7b05938f4507--------------------------------)'
- en: ·
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd45a9465f044&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507&user=Shubham+Panchal&userId=d45a9465f044&source=post_page-d45a9465f044----7b05938f4507---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7b05938f4507--------------------------------)
    ·12 min read·Dec 14, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7b05938f4507&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507&user=Shubham+Panchal&userId=d45a9465f044&source=-----7b05938f4507---------------------clap_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd45a9465f044&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507&user=Shubham+Panchal&userId=d45a9465f044&source=post_page-d45a9465f044----7b05938f4507---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7b05938f4507--------------------------------)
    · 12 分钟阅读 · 2023 年 12 月 14 日 [](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7b05938f4507&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507&user=Shubham+Panchal&userId=d45a9465f044&source=-----7b05938f4507---------------------clap_footer-----------)'
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7b05938f4507&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507&source=-----7b05938f4507---------------------bookmark_footer-----------)![](../Images/365e0c70171e5e7e57f27dd3eba968f8.png)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7b05938f4507&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-cross-platform-tfidf-text-summarizer-in-rust-7b05938f4507&source=-----7b05938f4507---------------------bookmark_footer-----------)![](../Images/365e0c70171e5e7e57f27dd3eba968f8.png)'
- en: Photo by [Patrick Tomasso](https://unsplash.com/@impatrickt?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Patrick Tomasso](https://unsplash.com/@impatrickt?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: NLP tools and utilities have grown largely in the Python ecosystem, enabling
    developers from all levels to build high-quality language apps at scale. Rust
    is a newer introduction to NLP, with organizations like [HuggingFace](https://huggingface.co/)
    adopting it to build packages for machine learning.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: NLP 工具和实用程序在 Python 生态系统中得到了广泛发展，使得各级开发者能够大规模地构建高质量的语言应用。Rust 是 NLP 的新兴领域，像
    [HuggingFace](https://huggingface.co/) 这样的组织正在采用它来构建机器学习包。
- en: '[](https://medium.com/@Aaron0928/hugging-face-has-written-a-new-ml-framework-in-rust-now-open-sourced-1afea2113410?source=post_page-----7b05938f4507--------------------------------)
    [## Hugging Face has written a new ML framework in Rust, now open-sourced!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@Aaron0928/hugging-face-has-written-a-new-ml-framework-in-rust-now-open-sourced-1afea2113410?source=post_page-----7b05938f4507--------------------------------)
    [## Hugging Face 已经用 Rust 编写了一个新的机器学习框架，现在已开源！'
- en: Recently, Hugging Face open sourced a heavyweight ML framework, Candle, which
    is a departure from the usual Python…
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最近，Hugging Face 开源了一个重量级的机器学习框架 Candle，这与通常的 Python 有所不同…
- en: medium.com](https://medium.com/@Aaron0928/hugging-face-has-written-a-new-ml-framework-in-rust-now-open-sourced-1afea2113410?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@Aaron0928/hugging-face-has-written-a-new-ml-framework-in-rust-now-open-sourced-1afea2113410?source=post_page-----7b05938f4507--------------------------------)
- en: In this blog, we’ll explore how we can build a text summarizer using the concept
    of TFIDF. We’ll first have an intuition on how TFIDF summarization works, and
    why Rust could be a good language to implement NLP pipelines and how we can use
    our Rust code on other platforms like C/C++, Android and Python. Moreover, we
    discuss how we can optimize the summarization task with parallel computing with
    [Rayon](https://github.com/rayon-rs/rayon).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客中，我们将探讨如何利用 TFIDF 的概念构建一个文本总结器。我们首先将了解 TFIDF 总结的工作原理，以及为什么 Rust 可能是实现 NLP
    管道的好语言，以及如何在其他平台如 C/C++、Android 和 Python 上使用我们的 Rust 代码。此外，我们将讨论如何利用 [Rayon](https://github.com/rayon-rs/rayon)
    进行并行计算来优化总结任务。
- en: 'Here’s the GitHub project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 GitHub 项目：
- en: '[](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)
    [## GitHub - shubham0204/tfidf-summarizer.rs: Simple, efficient and cross-platform
    TFIDF-based text…'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)
    [## GitHub - shubham0204/tfidf-summarizer.rs: 简单、高效且跨平台的基于 TFIDF 的文本…'
- en: Simple, efficient and cross-platform TFIDF-based text summarizer in Rust - GitHub
    - shubham0204/tfidf-summarizer.rs…
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单、高效且跨平台的基于 TFIDF 的 Rust 文本总结器 - GitHub - shubham0204/tfidf-summarizer.rs…
- en: github.com](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)
- en: Let’s get started ➡️
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧 ➡️
- en: Contents
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: Motivation
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动机
- en: Extractive and Abstractive Text Summarization
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取式和抽象式文本总结
- en: Understanding Text Summarization with TFIDF
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 TFIDF 理解文本总结
- en: Rust Implementation
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Rust 实现
- en: Usage with C
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与 C 的使用
- en: Future Scope
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 未来展望
- en: Conclusion
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结论
- en: Motivation
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动机
- en: I had built a text summarizer using the same technique, back in 2019, with Kotlin
    and called in [Text2Summary](https://github.com/shubham0204/Text2Summary-Android).
    It was primarily designed for Android apps, as a side project and used Kotlin
    for all computations. Fast-forward to 2023, I am now working with C, C++ and Rust
    codebases and have used modules built in these *native* languages in Android and
    Python.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 2019 年使用相同的技术构建了一个文本总结器，使用 Kotlin 并称之为 [Text2Summary](https://github.com/shubham0204/Text2Summary-Android)。它主要为
    Android 应用程序设计，作为一个副项目，使用 Kotlin 进行所有计算。快进到 2023 年，我现在正在处理 C、C++ 和 Rust 代码库，并且在
    Android 和 Python 中使用了这些 *本地* 语言构建的模块。
- en: I chose to re-implement `Text2Summary` in Rust, as it would serve as a great
    learning experience and also as a small, efficient, handy text summarization which
    can handle large texts easily. Rust is a compiled language with intelligent borrow
    and reference checkers that helps developers write bug-free code. Code written
    in Rust can be integrated with Java codebases through `jni` and converted to C
    headers/libraries for use in C/C++ and Python.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择用 Rust 重新实现 `Text2Summary`，因为这将是一个很好的学习经验，同时也是一个小巧高效的文本总结工具，可以轻松处理大文本。Rust
    是一种编译语言，具有智能的借用和引用检查器，帮助开发者编写无 bug 的代码。用 Rust 编写的代码可以通过 `jni` 与 Java 代码库集成，并转换为
    C 头文件/库，用于 C/C++ 和 Python。
- en: Extractive and Abstractive Text Summarization
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取式和抽象式文本总结
- en: Text summarization has been a long-studied problem in natural language processing
    (NLP). Extracting important information from the text and generating a summary
    of the given text is the core problem that text summarizers need to solve. The
    solutions belong to two categories, namely, extractive summarization and abstractive
    summarization.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 文本总结一直是自然语言处理（NLP）中长期研究的问题。从文本中提取重要信息并生成文本摘要是文本总结器需要解决的核心问题。解决方案分为两类，即提取式总结和抽象式总结。
- en: '[](/understanding-automatic-text-summarization-1-extractive-methods-8eb512b21ecc?source=post_page-----7b05938f4507--------------------------------)
    [## Understanding Automatic Text Summarization-1: Extractive Methods'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/understanding-automatic-text-summarization-1-extractive-methods-8eb512b21ecc?source=post_page-----7b05938f4507--------------------------------)
    [## 理解自动文本摘要-1: 抽取方法'
- en: How can we summarize our documents automatically?
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何自动总结文档？
- en: towardsdatascience.com](/understanding-automatic-text-summarization-1-extractive-methods-8eb512b21ecc?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/understanding-automatic-text-summarization-1-extractive-methods-8eb512b21ecc?source=post_page-----7b05938f4507--------------------------------)'
- en: In extractive text summarization, phrases or sentences are derived from the
    sentence directly. We can rank sentences using a scoring function and pick the
    most suitable sentences from the text considering their scores. Instead of generating
    new text, as in abstractive summarization, the summary is a collection of selected
    sentences from the text, hence avoiding problems which generative models exhibit.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在抽取式文本总结中，短语或句子直接从句子中提取。我们可以使用评分函数对句子进行排名，并根据它们的分数从文本中选择最合适的句子。与抽象总结中生成新文本不同，摘要是从文本中选择的句子的集合，从而避免了生成模型所展示的问题。
- en: Precision of the text is maintained in extractive summarization, but there is
    a high chance that some information is lost as the granularity of the selecting
    text is only limited to sentences. If a piece of information is spread across
    multiple sentences, the scoring function must take care of the relation which
    contains those sentences.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在抽取式总结中，文本的精确度得以保持，但由于选择的文本粒度仅限于句子，信息丢失的可能性较高。如果一条信息分散在多个句子中，评分函数必须考虑包含这些句子的关系。
- en: Abstractive text summarization requires larger deep learning model to capture
    the semantics of the language and to build an appropriate document-to-summary
    mapping. Training such models requires huge datasets and a longer training time
    which in-turn overloads computing resources heavily. Pretrained models might solve
    the problem of longer training times and data demands, but are still inherently
    biased towards the domain of the text on which they trained.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象式文本总结需要更大的深度学习模型来捕捉语言的语义，并建立适当的文档到摘要的映射。训练此类模型需要大量数据集和较长的训练时间，这会重负计算资源。预训练模型可能解决了更长训练时间和数据需求的问题，但仍然固有地偏向于其训练的文本领域。
- en: Extractive methods may have scoring functions which are free of parameters and
    do not require any learning. They fall in the unsupervised learning regime of
    ML, and are useful as they require lesser computation and are not biased towards
    the domain of the text. Summarization may be equally efficient on news articles
    as well as novel excerpts.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽取式方法可能有不带参数的评分函数，无需任何学习。它们属于无监督学习的 ML 领域，有用的是它们需要的计算较少且不偏向于文本领域。总结在新闻文章和小说摘录中可能同样有效。
- en: With our TFIDF-based technique, we do not require any training dataset or deep
    learning models. Our scoring function is based on the relative frequencies of
    words across different sentences.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的基于 TFIDF 的技术，我们不需要任何训练数据集或深度学习模型。我们的评分函数基于不同句子中词汇的相对频率。
- en: Understanding Text Summarization with TFIDF
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TFIDF 理解文本总结
- en: In order to rank each sentence, we need to calculate a score that would quantify
    the amount of information present within the sentence. TF-IDF comprises of two
    terms — TF, which stands for *Term Frequency* and IDF which denotes *Inverse Document
    Frequency*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对每个句子进行排序，我们需要计算一个分数来量化句子中信息的量。TF-IDF 包含两个术语——TF，表示*词频*，以及 IDF，表示*逆文档频率*。
- en: '[](/tf-term-frequency-idf-inverse-document-frequency-from-scratch-in-python-6c2b61b78558?source=post_page-----7b05938f4507--------------------------------)
    [## TF(Term Frequency)-IDF(Inverse Document Frequency) from scratch in python
    .'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/tf-term-frequency-idf-inverse-document-frequency-from-scratch-in-python-6c2b61b78558?source=post_page-----7b05938f4507--------------------------------)
    [## 从头开始使用 python 创建 TF（词频）-IDF（逆文档频率）。'
- en: Creating TF-IDF Model from Scratch
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从头开始创建 TF-IDF 模型
- en: towardsdatascience.com](/tf-term-frequency-idf-inverse-document-frequency-from-scratch-in-python-6c2b61b78558?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/tf-term-frequency-idf-inverse-document-frequency-from-scratch-in-python-6c2b61b78558?source=post_page-----7b05938f4507--------------------------------)'
- en: We consider that each sentence is made of tokens (words),
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为每个句子由词汇（单词）组成，
- en: '![](../Images/77cc36115e5ea49e623258f47ef15379.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/77cc36115e5ea49e623258f47ef15379.png)'
- en: 'Expr 1: Sentence S represented as tuple of words'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 1：句子 S 表示为单词元组
- en: The term-frequency of each word, in the sentence ***S***, is defined as,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单词在句子 ***S*** 中的词频定义为，
- en: '![](../Images/deb6a9d8f062561288e5162ea31ed4a8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/deb6a9d8f062561288e5162ea31ed4a8.png)'
- en: 'Expr 2: **k** represents the total number of words in the sentence.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 2：**k** 代表句子中的总词数。
- en: The inverse-document frequency of each word, in the sentence S, is defined as,
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单词在句子 S 中的逆文档频率定义为，
- en: '![](../Images/7832e14d2e755df5096faa8f03b12204.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7832e14d2e755df5096faa8f03b12204.png)'
- en: 'Expr 3: The inverse-document frequency quantifies the occurrence of the word
    in other sentences.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 3：逆文档频率量化了该词在其他句子中的出现情况。
- en: The score of each sentence is the sum of TFIDF scores of all words in that sentence,
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个句子的分数是该句子中所有单词的 TFIDF 分数之和，
- en: '![](../Images/5b1505063fcac53c1960f43e34c209b2.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b1505063fcac53c1960f43e34c209b2.png)'
- en: 'Expr 4: The score of each sentence **S** which determines its inclusion in
    the final summary.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 4：每个句子的分数 **S** 决定了它是否包含在最终总结中。
- en: Significance and Intuition
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要性与直觉
- en: The term frequency, as you may have observed, would be lesser for words which
    are rarer in the sentence. If the same word has less presence in other sentences,
    then the IDF score is also higher. Hence, a sentence which contains repeated words
    (higher TF) which are more exclusive only to that sentence (higher IDF) will have
    a higher TFIDF score.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经观察到的，词频对于句子中较少出现的单词来说会更低。如果同一个词在其他句子中的出现也较少，那么 IDF 分数也会更高。因此，一个包含重复单词（较高
    TF）且这些单词仅在该句子中较为独特（较高 IDF）的句子将具有更高的 TFIDF 分数。
- en: Rust Implementation
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rust 实现
- en: We start implementing our technique by creating functions which convert a given
    text into a `Vec` of sentences. This problem is referred as sentence tokenization
    which identifies sentence boundaries within a text. With Python packages like
    `nltk` , the `punkt` sentence tokenizer is available for this task, and there
    exists a Rust port of [Punkt](https://www.askpython.com/python-modules/nltk-punkt)
    as well. `[rust-punkt](https://github.com/ferristseng/rust-punkt)` is no longer
    being maintained, but we still use it here. Another function which splits the
    sentence into words is also written,
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建将给定文本转换为 `Vec` 句子的函数来开始实现我们的技术。这个问题被称为句子分词，它在文本中识别句子边界。使用像 `nltk` 这样的
    Python 包，`punkt` 句子分词器可用于此任务，并且也存在 [Punkt](https://www.askpython.com/python-modules/nltk-punkt)
    的 Rust 移植版。`[rust-punkt](https://github.com/ferristseng/rust-punkt)` 不再维护，但我们在这里仍然使用它。还编写了另一个将句子拆分为单词的函数，
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above snippet, we remove stop-words, which are commonly occurring words
    in a language and have no significant contribution to the text’s information content.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们删除停用词，即在语言中常见且对文本信息内容没有重要贡献的词汇。
- en: '[](/text-pre-processing-stop-words-removal-using-different-libraries-f20bac19929a?source=post_page-----7b05938f4507--------------------------------)
    [## Text pre-processing: Stop words removal using different libraries'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/text-pre-processing-stop-words-removal-using-different-libraries-f20bac19929a?source=post_page-----7b05938f4507--------------------------------)
    [## 文本预处理：使用不同库删除停用词'
- en: A handy guide about English stop words removal in Python!
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于在 Python 中删除英文停用词的实用指南！
- en: towardsdatascience.com](/text-pre-processing-stop-words-removal-using-different-libraries-f20bac19929a?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/text-pre-processing-stop-words-removal-using-different-libraries-f20bac19929a?source=post_page-----7b05938f4507--------------------------------)
- en: Next, we create a function which computes the frequency of each word present
    in the corpus. This method will be used to compute the term frequency of each
    word present in a sentence. The `(word, freq)` pair is stored in a `[Hashmap](https://doc.rust-lang.org/std/collections/struct.HashMap.html)`
    for faster retrieval in later stages
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个计算语料库中每个单词频率的函数。此方法将用于计算句子中每个单词的词频。`(word, freq)` 对存储在 `[Hashmap](https://doc.rust-lang.org/std/collections/struct.HashMap.html)`
    中，以便在后续阶段快速检索。
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, we write the function which computes the term frequency of words present
    in a sentence,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们编写了一个计算句子中单词词频的函数，
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another function which computes the IDF, inverse document frequency, for words
    in a tokenized sentence,
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个函数计算了分词句子中单词的 IDF（逆文档频率），
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We’ve now added functions to compute TF and IDF scores of each word present
    in a sentence. In order to compute a final score for each sentence, which would
    also determine its rank, we have to compute the sum of TFIDF-scores of all words
    present in a sentence.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经添加了计算句子中每个单词的 TF 和 IDF 分数的函数。为了计算每个句子的最终分数，也就是决定其排名的分数，我们必须计算句子中所有单词的
    TFIDF 分数总和。
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using Rayon
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Rayon
- en: For larger texts, we can perform some operations in parallel i.e. on multiple
    CPU threads using a popular Rust crate `[rayon-rs](https://github.com/rayon-rs/rayon)`
    . In the `compute` function above, we can perform the following tasks parallelly,
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的文本，我们可以在多个 CPU 线程上并行执行一些操作，即使用流行的 Rust crate `[rayon-rs](https://github.com/rayon-rs/rayon)`。在上面的
    `compute` 函数中，我们可以并行执行以下任务，
- en: Converting each sentence to tokens and removing stop-words
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个句子转换为 tokens 并移除停用词
- en: Computing the sum of TFIDF scores for each sentence
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算每个句子的 TFIDF 分数总和
- en: These tasks can be performed independently on each sentence, and have no dependence
    on other sentences, hence, they can be parallelized. To ensure mutual exclusion
    while different threads access a shared container, we use `[Arc](https://doc.rust-lang.org/rust-by-example/std/arc.html)`
    [(Atomic reference counted pointer)](https://doc.rust-lang.org/rust-by-example/std/arc.html)
    and `[Mutex](https://fongyoong.github.io/easy_rust/Chapter_43.html)` which is
    basic synchronization primitive for ensuring atomic access.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务可以独立地在每个句子上执行，并且互相之间没有依赖，因此它们可以被并行化。为了确保不同线程访问共享容器时的互斥性，我们使用 `[Arc](https://doc.rust-lang.org/rust-by-example/std/arc.html)`
    [(原子引用计数指针)](https://doc.rust-lang.org/rust-by-example/std/arc.html) 和 `[Mutex](https://fongyoong.github.io/easy_rust/Chapter_43.html)`，这是确保原子访问的基本同步原语。
- en: '`Arc` ensures that the referred `Mutex` is accessible to all threads, and the
    `Mutex` itself allows only a single thread to access the object wrapped in it.
    Here’s another function `par_compute` , which uses Rayon and performs the above-mentioned
    tasks in-parallel,'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Arc` 确保被引用的 `Mutex` 对所有线程都是可访问的，而 `Mutex` 本身只允许单线程访问它所包装的对象。这里有另一个函数 `par_compute`，它使用
    Rayon 并行执行上述任务，'
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Cross-Platform Usage
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台使用
- en: C and C++
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C 和 C++
- en: To use Rust structs and functions in C, we can use `cbindgen` to generate C-style
    headers containing the struct/function prototypes. On generating the headers,
    we can compile the Rust code to C-based [dynamic or static libraries](https://domiyanyue.medium.com/c-development-tutorial-4-static-and-dynamic-libraries-7b537656163e#:~:text=At%20runtime%2C%20the%20dynamic%20library,library%20code%20to%20the%20memory.)
    which contain the implementation of the functions declared in the header files.
    To generate C-based static library, we need to set the `[crate_type](https://doc.rust-lang.org/cargo/reference/cargo-targets.html)`
    parameter in `Cargo.toml` to `staticlib`,
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 C 中使用 Rust 结构体和函数，我们可以使用 `cbindgen` 生成包含结构体/函数原型的 C 风格头文件。生成头文件后，我们可以将 Rust
    代码编译成基于 C 的 [动态或静态库](https://domiyanyue.medium.com/c-development-tutorial-4-static-and-dynamic-libraries-7b537656163e#:~:text=At%20runtime%2C%20the%20dynamic%20library,library%20code%20to%20the%20memory.)，这些库包含头文件中声明的函数的实现。为了生成基于
    C 的静态库，我们需要在 `Cargo.toml` 中将 `[crate_type](https://doc.rust-lang.org/cargo/reference/cargo-targets.html)`
    参数设置为 `staticlib`，
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we add FFIs to expose the summarizer’s functions in the ABI ([application
    binary interface](https://en.wikipedia.org/wiki/Application_binary_interface))
    in `src/lib.rs` ,
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加 FFIs 以在 `src/lib.rs` 的 ABI ([应用程序二进制接口](https://en.wikipedia.org/wiki/Application_binary_interface))
    中暴露总结器的功能，
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can build the static library with `cargo build` and `libsummarizer.a` will
    be generated in the `target` directory.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `cargo build` 构建静态库，`libsummarizer.a` 将在 `target` 目录中生成。
- en: Android
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安卓
- en: With [Android’s Native Development Kit (NDK)](https://developer.android.com/ndk),
    we can compile the Rust program for `armeabi-v7a` and `arm64-v8a` targets. We
    need to write special interface functions with Java Native Interface (JNI), which
    can be found in the `android` module in `src/lib.rs` .
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Android 的本地开发工具包 (NDK)](https://developer.android.com/ndk)，我们可以为 `armeabi-v7a`
    和 `arm64-v8a` 目标编译 Rust 程序。我们需要使用 Java Native Interface (JNI) 编写特殊的接口函数，这些函数可以在
    `src/lib.rs` 的 `android` 模块中找到。
- en: '[](https://matt-moore.medium.com/kotlin-jni-for-native-code-835e93af7ddf?source=post_page-----7b05938f4507--------------------------------)
    [## Kotlin JNI for Native Code'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://matt-moore.medium.com/kotlin-jni-for-native-code-835e93af7ddf?source=post_page-----7b05938f4507--------------------------------)
    [## Kotlin JNI for Native Code'
- en: How to call native code from Kotlin.
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何从 Kotlin 调用本地代码。
- en: matt-moore.medium.com](https://matt-moore.medium.com/kotlin-jni-for-native-code-835e93af7ddf?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[matt-moore.medium.com](https://matt-moore.medium.com/kotlin-jni-for-native-code-835e93af7ddf?source=post_page-----7b05938f4507--------------------------------)'
- en: Python
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: With Python’s `ctypes` module, we can load a shared library ( `.so` or `.dll`
    ) and use the C-compatible datatypes to execute the functions defined in the library.
    The code isn’t available on the GitHub project, but will be soon available.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 的 `ctypes` 模块，我们可以加载共享库（`.so` 或 `.dll`）并使用与 C 兼容的数据类型来执行库中定义的函数。代码尚未在
    GitHub 项目上提供，但很快会提供。
- en: '[](https://realpython.com/python-bindings-overview/?source=post_page-----7b05938f4507--------------------------------)
    [## Python Bindings: Calling C or C++ From Python - Real Python'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://realpython.com/python-bindings-overview/?source=post_page-----7b05938f4507--------------------------------)
    [## Python 绑定：从 Python 调用 C 或 C++ - Real Python'
- en: What are Python bindings? Should you use ctypes, CFFI, or a different tool?
    In this step-by-step tutorial, you'll get…
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是 Python 绑定？你应该使用 ctypes、CFFI 还是其他工具？在这篇逐步教程中，你将获得…
- en: realpython.com](https://realpython.com/python-bindings-overview/?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[realpython.com](https://realpython.com/python-bindings-overview/?source=post_page-----7b05938f4507--------------------------------)'
- en: Future Scope
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来展望
- en: 'The project can be extended and improved in many ways, which we’ll discuss
    below:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目可以以多种方式扩展和改进，我们将在下面讨论：
- en: The current implementation requires the `[nightly](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html)`
    [build of Rust](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html),
    only because of a single dependency `punkt` . `punkt` is a sentence tokenizer
    which is required to determine sentence boundaries in the text, following which
    other computations are made. If `punkt` can be built with stable Rust, the current
    implementation will no more require `nightly` Rust.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前的实现要求使用 `[nightly](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html)`
    [Rust 构建](https://doc.rust-lang.org/book/appendix-07-nightly-rust.html)，仅仅是因为一个依赖项
    `punkt`。`punkt` 是一个句子分词器，用于确定文本中的句子边界，之后进行其他计算。如果 `punkt` 可以使用稳定版 Rust 构建，那么当前实现将不再需要
    `nightly` Rust。
- en: Adding newer metrics to rank sentences, especially which capture inter-sentence
    dependencies. TFIDF is not the most accurate scoring function and has its own
    limitations. Building sentence graphs and using them for scoring sentences has
    greatly enhance the overall quality of the extracted summary.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加新的度量标准来排名句子，特别是那些捕捉句子间依赖关系的度量。TFIDF 不是最准确的评分函数，并且有其自身的局限性。构建句子图并利用它们对句子进行评分，大大提高了提取摘要的整体质量。
- en: The summarizer has not been benchmarked against a known dataset. [Rouge scores](https://en.wikipedia.org/wiki/ROUGE_(metric))
    `[R1](https://en.wikipedia.org/wiki/ROUGE_(metric))` [,](https://en.wikipedia.org/wiki/ROUGE_(metric))
    `[R2](https://en.wikipedia.org/wiki/ROUGE_(metric))` [and](https://en.wikipedia.org/wiki/ROUGE_(metric))
    `[RL](https://en.wikipedia.org/wiki/ROUGE_(metric))` are frequently used to assess
    the quality of the generated summary against standard datasets like the [New York
    Times dataset](https://paperswithcode.com/dataset/new-york-times-annotated-corpus)
    or the [CNN Daily mail dataset](https://paperswithcode.com/dataset/cnn-daily-mail-1).
    Measuring performance against standard benchmarks will provide developers more
    clarity and reliability towards the implementation.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 摘要生成器尚未在已知数据集上进行基准测试。[Rouge 分数](https://en.wikipedia.org/wiki/ROUGE_(metric))
    `[R1](https://en.wikipedia.org/wiki/ROUGE_(metric))` [,](https://en.wikipedia.org/wiki/ROUGE_(metric))
    `[R2](https://en.wikipedia.org/wiki/ROUGE_(metric))` [和](https://en.wikipedia.org/wiki/ROUGE_(metric))
    `[RL](https://en.wikipedia.org/wiki/ROUGE_(metric))` 常用于评估生成的摘要与标准数据集如 [纽约时报数据集](https://paperswithcode.com/dataset/new-york-times-annotated-corpus)
    或 [CNN 日报数据集](https://paperswithcode.com/dataset/cnn-daily-mail-1)的质量。与标准基准进行性能测量将为开发者提供更清晰、更可靠的实现参考。
- en: Conclusion
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'Building NLP utilities with Rust has significant advantages, considering the
    increasing popularity of the language amongst developers due to its performance
    and future promises. I hope the article was knowledgeable. Do have a look at the
    GitHub project:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Rust 构建 NLP 工具具有显著优势，考虑到由于性能和未来前景，语言在开发者中的受欢迎程度不断上升。我希望这篇文章对你有所帮助。请查看 GitHub
    项目：
- en: '[](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)
    [## GitHub - shubham0204/tfidf-summarizer.rs: Simple, efficient and cross-platform
    TFIDF-based text…'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[## GitHub - shubham0204/tfidf-summarizer.rs: 简单、高效且跨平台的基于 TFIDF 的文本摘要工具](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)'
- en: Simple, efficient and cross-platform TFIDF-based text summarizer in Rust - GitHub
    - shubham0204/tfidf-summarizer.rs…
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单、高效且跨平台的基于 TFIDF 的文本摘要工具，使用 Rust 编写 - GitHub - [shubham0204/tfidf-summarizer.rs](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)
- en: github.com](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/shubham0204/tfidf-summarizer.rs?source=post_page-----7b05938f4507--------------------------------)'
- en: You may consider opening an issue or a pull request if you feel something can
    be improved! Keep learning and have a nice day ahead.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得有改进的空间，可以考虑提出问题或提交拉取请求！继续学习，祝你有美好的一天。
