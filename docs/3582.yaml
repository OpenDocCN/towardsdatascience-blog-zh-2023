- en: Quantifying Transportation Patterns Using GTFS Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/quantifying-transportation-patterns-using-gtfs-data-16ac3146678b?source=collection_archive---------3-----------------------#2023-12-04](https://towardsdatascience.com/quantifying-transportation-patterns-using-gtfs-data-16ac3146678b?source=collection_archive---------3-----------------------#2023-12-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3e31e03dfd6c7f5378c6c47506ddbf85.png)'
  prefs: []
  type: TYPE_IMG
- en: In this article, I explore the public transport systems of four selected cities
    relying on General Transit Feed Specification and various tools of spatial data
    science.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@janosovm?source=post_page-----16ac3146678b--------------------------------)[![Milan
    Janosov](../Images/77b62460041f66ec4585a81baef81a03.png)](https://medium.com/@janosovm?source=post_page-----16ac3146678b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----16ac3146678b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----16ac3146678b--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page-----16ac3146678b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F838408aa2ad4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantifying-transportation-patterns-using-gtfs-data-16ac3146678b&user=Milan+Janosov&userId=838408aa2ad4&source=post_page-838408aa2ad4----16ac3146678b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----16ac3146678b--------------------------------)
    ·12 min read·Dec 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F16ac3146678b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantifying-transportation-patterns-using-gtfs-data-16ac3146678b&user=Milan+Janosov&userId=838408aa2ad4&source=-----16ac3146678b---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F16ac3146678b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantifying-transportation-patterns-using-gtfs-data-16ac3146678b&source=-----16ac3146678b---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: I picked four cities in this notebook, Budapest, Berlin, Stockholm, and Toronto,
    to overview their public transport system using publicly available GTFS (General
    Transit Feed Specification) data. This notebook aims to serve as an introductory
    tutorial on accessing, manipulating, aggregating, and visualising public transport
    data using Pandas, GeoPandas, and other standard data science tools to derive
    insights about public transport. Later on, such understanding can be helpful in
    various use cases, such as transport, urban planning, and location intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, while the GTFS format is supposed to be general and universal,
    I will also point out situations that still require one-by-one, city-level insights
    and manual validations throughout the following analytical steps.
  prefs: []
  type: TYPE_NORMAL
- en: '*In this article, all images were created by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Collect and parse GTFS data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this article, I downloaded public transport data from Transitfeeds.com,
    an online aggregator website for public transport data. In particular, I downloaded
    data with the following latest update times for the following cities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Budapest](https://transitfeeds.com/p/bkk/42) (September 2023)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Berlin](https://transitfeeds.com/p/verkehrsverbund-berlin-brandenburg/213)
    (May 2021)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stockholm](https://transitfeeds.com/p/storstockholms-lokaltrafik/1086) (February
    2020)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Toronto](https://transitfeeds.com/p/ttc/33) (October 2020)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following code blocks, I will explore each of these cities multiple
    times, create comparative plots, and stress out the universality of the GTFS format.
    Also, to ensure that my analytics are easy to update with newer data dumps, I
    store each city’s GTFS data in a folder corresponding to the update date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85025766848359c06e5112cf1da76e92.png)'
  prefs: []
  type: TYPE_IMG
- en: The exact recording time of my GTFS data dumps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s take a closer look at the different files stored in these folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/06449b79f2383f9ca78850a749ad3c4b.png)'
  prefs: []
  type: TYPE_IMG
- en: The lists of files in the different cities GTFS dumps.
  prefs: []
  type: TYPE_NORMAL
- en: It looks like eight files are present in all of them, resembling to the core
    of the GTFS structure.
  prefs: []
  type: TYPE_NORMAL
- en: While you can read more about the GTFS structure [here](/where-is-the-bus-gtfs-will-tell-us-f8adc18a2f8e),
    now I will go on with probably the most basic geospatial feature — the location
    of the public transport stops.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Public transport stop locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, I created a sample visual where I parse the stops.txt for Budapest. Then,
    I use [Shapely](https://shapely.readthedocs.io) and GeoPandas to create a geometric
    data structure, a GeoDataFrame, by creating Point geometries using the long and
    lat coordinates of each stop location. Then, using the built-in Matplotlib-based
    plotter of [GeoPandas](http://geopandas.org), I create a simple map. Additionally,
    I use [OSMNx](http://osmnx.readthedocs.io) to add the boundaries of the city as
    an enclosing polygon.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2de2f7a180101354a1ae3af0f7ff9aa0.png)'
  prefs: []
  type: TYPE_IMG
- en: The location of public transport stops in Budapest.
  prefs: []
  type: TYPE_NORMAL
- en: Looks good at first! The vast majority of stop locations are within the city;
    there are just a few commuter lines that fall outside of it. Also, in the centre
    of the plot, we can clearly see the lack of stop locations where the river Danube
    flows. Now, let’s see this plot for all the cities!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/747570e008067e45a9da15d10f803037.png)'
  prefs: []
  type: TYPE_IMG
- en: The public transport stop locations for all four target cities — unfiltered.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen five cities, we can add a few more shades to our conclusion
    about the generality of GTFS and public transport data. On the one hand, from
    the tech perspective, they indeed look very similar across cities and local transport
    agencies. On the other hand, one certainly has to inspect each city separately
    when added to a pipeline because, as both the cases of Stockholm and Toronto show,
    the data associated with the city actually belongs to a larger, e.g. municipality-level
    territory. The good news is that adding the admin boundary, for instance, from
    OpenStreetMap, makes it easy to filter the data down to the actual city!
  prefs: []
  type: TYPE_NORMAL
- en: In fact, I just did this last filtering step in the lat-but-one row of the previous
    code block and stored the city-level stop locations in the *stops* dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2b4e48221c33319cc3884f945a974aef.png)'
  prefs: []
  type: TYPE_IMG
- en: The public transport stop locations for all four target cities — filtered.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Departure times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we explored where the stops are; now, let’s take a look at when one should
    approach them. Also, assuming that the public transport services have significant
    insights into the demand and inhabitants’ schedules and habits, we may also learn
    some insights from these schedules’ temporal patterns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c0ee44bb53b1bae98a031b8dc131c4a.png)'
  prefs: []
  type: TYPE_IMG
- en: The number of stop locations in each city and a sample on their schedule tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading, parsing, and transforming the departure time information, let’s
    create a series of visuals about each city’s city-level departure time distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output image of this code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58b4c40d879891704e5c36e6a22a8d33.png)'
  prefs: []
  type: TYPE_IMG
- en: The daily trip departure frequency in each target city.
  prefs: []
  type: TYPE_NORMAL
- en: While giving a proper, detaild interpretation of these graphs probably requires
    some serious local urban planning knowledge, one can also speculate a bit based
    on personal experience and common sense.
  prefs: []
  type: TYPE_NORMAL
- en: First, given these cities’ quite different climate, cultural background, and
    day-night rhythms, I was surprised to see how well-aligned each of them are to
    the 8 am start-of-the-day. Budapest, Berlin, and Stockholm all have nearly the
    same wake-up pattern, while interestingly, Toronto takes a little longer to get
    up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Second, there seems to be a clear order of when the afternoon ends — finishing
    the earliest in Berlin, Budapest, Toronto, and Stockholm. A curious question is
    whether these times do mark the end of the working shifts or the time people go
    home.
  prefs: []
  type: TYPE_NORMAL
- en: Third, the morning and afternoon peaks are clearly distinguishable for Budapest
    and Stockholm, while not so much for Berlin and Toronto, which may relate to how
    heavily centralised these cities are.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Spatial distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computing general trends are possible for tabular data, float/integer variables,
    and spatial information. The process behind it is called spatial indexing. [Spatial
    indexing](https://postgis.net/workshops/postgis-intro/indexing.html), in practice,
    means that we split the area, such as the admin boundaries of a city, into a regular
    grid. My personal favourite is Uber’s [H3 hexagon](https://www.uber.com/en-HU/blog/h3/)
    grid — you will find more about it here. Using this grid, we can efficiently conduct
    spatial aggregation by counting the number of stops in each grid cell! Let’s try
    it at different hexagon resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a6412debbedd0822a3bda735ff15fba2.png)'
  prefs: []
  type: TYPE_IMG
- en: Budapest — hexagon grids.
  prefs: []
  type: TYPE_NORMAL
- en: '*Technical note:* When I was working on the next cell, I ran into an error
    — namely, it turned out that the admin boundaries of Berlin were a MultiPolygon,
    while all the other city admin areas are simple Polygons, and that is also what
    my *split_admin_boundary_to_hexagons* function is expecting as an input. So I
    checked, and it turned out that, for some reason, there was an extra tiny polygon
    within, with near-zero area, so I had to clean it up by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have a working pilot for the H3 grid construction, let’s count the
    number of stops and number of stoppings in each hexagon in the four example cities.
    While to compute the number of stop locations, we only need to do a spatial join;
    we also need to incorporate the departure times to compute the number of stoppings.
    This way, we also make the spatial and temporal dimensions meet!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see how this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/274d57daa309d65807db12bcfc34a4f0.png)![](../Images/d1c325125551bf7d5f64c552479301a0.png)![](../Images/0414bdca9f90d60f2e4ad55f10a31b51.png)'
  prefs: []
  type: TYPE_IMG
- en: 5\. Different modes of transport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we have seen aggregated trends in time and space. Now, let’s zoom in and
    extract the different means of transportation corresponding to the data records.
    This information is usually stored in the *routes.txt*, under the column *route_type*.
    [This](https://developers.google.com/transit/gtfs/reference/extended-route-types),
    [this](https://developers.google.com/transit/gtfs/reference), and [this](https://www.transit.land/routes/r-u0wj-717)
    mapping can encode transportation mode codes to their English names.
  prefs: []
  type: TYPE_NORMAL
- en: Based on these, I created the official map and then a simplified version of
    it, which I will use later. In the simplified version, I renamed, for instance,
    both the category ‘Tram, Streetcar, Light rail’ (code 0) and the category ‘Tram
    Service’ (code 900) to just ‘Tram’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, visualise the frequency of each transportation mean, measured by the number
    of possible routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This codeblock outputs the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc520c787039984f4f7e3b03e199a53a.png)'
  prefs: []
  type: TYPE_IMG
- en: Transportation mode distribution across the studied cities.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Route shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the spatio-temporal aggregations and transport-mean zoom-in, last but
    not least, I would like to highlight my most favourite part — the GPS point sequences
    logging the shape of each route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6f099dff9979c770c822ef0d59c404d.png)'
  prefs: []
  type: TYPE_IMG
- en: The route shape table of Budapest.
  prefs: []
  type: TYPE_NORMAL
- en: Now convert this route table, for the case of Budapest, into a GeoDataFrame
    consisting of LineStrings, add the route type mapping from the previous section,
    and use the tripst.txt GTFS file, which connects routes (and means of transports)
    to shapes.
  prefs: []
  type: TYPE_NORMAL
- en: The result will be a geographical map of the public transport road network,
    which we can colour, for instance, based on the means of transport following the
    previous section’s colour coding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting figures for each city:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/859a53b44d159e6af702bc4be5595ce1.png)'
  prefs: []
  type: TYPE_IMG
- en: Budapest — with just a few lines venturing out ot the agglomeration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fed29400890a94ec8af880e4c494f0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Toronto — with its highly contained public transport network.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e688045f1afc5924e863bc587b71493c.png)'
  prefs: []
  type: TYPE_IMG
- en: Berlin — showing how its train lines start from the city and intertwine the
    country.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e31e03dfd6c7f5378c6c47506ddbf85.png)'
  prefs: []
  type: TYPE_IMG
- en: Stockholm — with its public transport network starting from the city but reaching
    the countryside.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I briefly overview the technicalities needed to explore GTFS
    data and explore different cities’ public transport systems in a streamlined way.
    While the general format used in all these cities makes it very handy and easy
    to adopt analytical tasks from one town to another, my findings and results also
    outline the importance of one-by-one city-level validation and sanity checks due
    to some minor flexibility in definitions and terminologies in different cities.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you would like to travel back in time and see a similar, transport-related
    analysis going back to ancient Rome, check my previous TDS article, “[Do All the
    Roads Lead to Rome?](/do-all-the-roads-lead-to-rome-5b6756ce7d52)”.
  prefs: []
  type: TYPE_NORMAL
