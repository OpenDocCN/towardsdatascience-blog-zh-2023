- en: From DICOM Header to CSV File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/from-dicom-header-to-csv-file-e2e442505651?source=collection_archive---------11-----------------------#2023-01-17](https://towardsdatascience.com/from-dicom-header-to-csv-file-e2e442505651?source=collection_archive---------11-----------------------#2023-01-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: DICOM Metadata → CSV Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@omar.ok1998?source=post_page-----e2e442505651--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----e2e442505651--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e2e442505651--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e2e442505651--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----e2e442505651--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-dicom-header-to-csv-file-e2e442505651&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----e2e442505651---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e2e442505651--------------------------------)
    ·7 min read·Jan 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe2e442505651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-dicom-header-to-csv-file-e2e442505651&user=Omar+Alkousa&userId=f8302b9534b5&source=-----e2e442505651---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe2e442505651&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffrom-dicom-header-to-csv-file-e2e442505651&source=-----e2e442505651---------------------bookmark_footer-----------)![](../Images/e44354405a55381d661a9faab86935fa.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Convert DICOM Metadata into CSV files. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: DICOM, Digital Imaging and Communications in Medicine, is the native format
    of medical images. DICOM files consider data beyond pixel data and store it as
    a DICOM header. Such data are the Patient’s age and weight, Modality, Image Dimension,
    and so on. In this post, we will use the PyDicom package to build a Python function
    that can extract specific metadata to use in further data analysis work.
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned above, DICOM files have metadata. This data is useful for any DICOM
    user, from the patient to the doctors and the modalities of the imaging systems.
    Furthermore, it’s treasury data that Data Scientists /Analysts can use to do very
    helpful insights.
  prefs: []
  type: TYPE_NORMAL
- en: A good thing about this metadata is that it’s represented in a standardized
    method where each DICOM attribute has a unique tag and keyword to give the user
    the information in a specific value representation.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get to code and see an example of DICOM headers…
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with a simple example of reading a DICOM file to see the metadata
    representation. Then we’ll build a function to extract the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a lot of DICOM samples on the internet. And you can use your own
    DICOM files. For this post, I chose a [dataset](https://www.kaggle.com/datasets/dmisky/dlwptvolumetricdicomlung)
    of 99 slices of chest-CT scans for one patient. You can find it on Kaggle (Credit
    for [Kosarevsky Dmitry](https://www.kaggle.com/dmisky). License: “Database: Open
    Database, Contents: Database Contents”, DbCL v1.0). I saved the dataset on my
    [Drive](https://drive.google.com/drive/folders/1dbJpXVUBn0mSUxgJIqKZj4d_0thSeTW3?usp=sharing)
    so I can easily have access through GoogleColab.'
  prefs: []
  type: TYPE_NORMAL
- en: Reading DICOM using PyDicom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we read the first slice and present only a part of the DICOM
    attributes because the whole output is so long. You can refer to this [GitHub
    Gist](https://gist.github.com/OmarAlkousa/53b35934cd3fac3d381f0448b8e27073) to
    see the complete output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: PyDicom wraps a DataSet class and for each DICOM attribute, it starts with the
    tag as a key of the DataSet and the data element as a value. The image below describes
    the contents of the DataSet and DataElement classes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2016e7b381897a52834c7e5ae6223d2d.png)'
  prefs: []
  type: TYPE_IMG
- en: The contents of PyDicom DataSet class. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: PyDicom package provides many methods and attributes to use with DataSet and
    DataElement classes. We won’t dive into details about it. If you want to learn
    about it, refer to this previous post.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/introducing-pydicom-its-classes-methods-and-attributes-518c1d71162?source=post_page-----e2e442505651--------------------------------)
    [## Introducing PyDicom, its Classes, Methods, and Attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: PyDicom… Beyond Pixel Data!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introducing-pydicom-its-classes-methods-and-attributes-518c1d71162?source=post_page-----e2e442505651--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Extract the metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main idea we will depend on is that we can iterate over the DICOM files
    in a specific folder. Then we will iterate over the whole attributes in each file
    and extract only the attributes specified in advance. We will use the keywords
    of DICOM attributes as it’s the best choice because:'
  prefs: []
  type: TYPE_NORMAL
- en: Each DICOM attribute has its unique keyword.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The keywords are better than tags as they are human-readable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are dozens of attributes that can characterize DICOM files. So, you cannot
    just read all of them. You need to focus only on the attributes that you might
    counter during your work. For this purpose, I highly recommend this great [DICOM
    Standard Browser](https://dicom.innolitics.com/ciods) which was built by [Innolitics](https://innolitics.com/),
    you just need to search for the attribute you want to learn about. Make sure you
    type the keywords you want correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Now that we understand what we will do, let’s extract some DICOM metadata:)**'
  prefs: []
  type: TYPE_NORMAL
- en: We will need **glob** package to manipulate the paths of DICOM files. Also,
    the **Pandas** package is required to write the CSV file from a pandas data frame.
    The glob module finds all the path names matching a specified pattern according
    to the rules used by the Unix shell, although results are returned in arbitrary
    order.
  prefs: []
  type: TYPE_NORMAL
- en: All that’s left to set our python environment ready is to import the packages
    and build our function. Documentation of the function will be added to explain
    the parameters and the output of the function.
  prefs: []
  type: TYPE_NORMAL
- en: '**dicom2csv() function. Follow the link of** [**GitHub gist**](https://gist.github.com/OmarAlkousa/8d62a6751eaf860a37c4ba2e437512c8)**.**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try the above function. First, we decide what DICOM attributes we are
    interested in. For example, I want to calculate the DLP index from a series of
    Chest CT scans. **DLP index, Dose-Length Product**, is a commonly used index that
    factors in the length of the scan to show overall dose output. It’s commonly used
    and represented at the consoles of modern modalities because it gives a rough
    estimation of the effective dose (ED) in advance.
  prefs: []
  type: TYPE_NORMAL
- en: 'DLP can be calculated from CTDIvol, another CT index that describes the average
    dose for a single image for the selected CT conditions of operation represented
    in mGy. Dose–length product (DLP) is used to calculate the dose for a series of
    scans or a complete examination and is defined by the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dfb0ab1b1de6239670a3851e47726f2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Where i is for the ith CTDIvol for each image that covers a length of Li. For
    Li, we will use the reconstruction interval between every two sequenced images
    because it is what actually determines the number of images that correspond to
    a given scan length. **Slice Location** will help us calculate the reconstruction
    intervals in millimeters.
  prefs: []
  type: TYPE_NORMAL
- en: So, the metadata we need to calculate DLP are **CTDIvol** represented in mGy
    (milli-Gray) and the **SliceLocation** of each axial slice expresses in mm. Let’s
    use the function we’ve built above to extract them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Note** that reading DICOM files is done arbitrarily. So, we need to sort
    the data based on the slice location.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Vividly, the reconstruction interval is 3.0 mm from the look at the “SliceLocation”
    column, which is the same as the slice thickness. You can try the following line
    code to ensure that the reconstruction interval is the same for all slices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Back to the DLP equation, Li is the same for all slices and it’s 0.3 cm. Our
    final touch is to multiply each CTDIvol by 0.3 and sum the variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is important to remember that the CTDIvol or its derivative the DLP, as seen
    on consoles and outputted on the DICOM images, does not represent the actual absorbed
    or effective dose for the patient. They should be taken as an index of radiation
    output by the system for comparison purposes. And the calculation of Effective
    Dose based on DLP is just a rough estimation.
  prefs: []
  type: TYPE_NORMAL
- en: DLP calculation was just one single example of how useful extracting data from
    DICOM headers is. And the python function we’ve built makes it easy to deal with
    the specified metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve seen how to use the PyDicom package to read DICOM files. And the power
    of using DICOM metadata in our analyzing work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve built a function that converts the specific data from DICOM headers into
    a CSV file to use in further insights.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve used the function to calculate the Dose Length Product, which is a common
    used parameter in dose estimation for CT modalities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Thanks For Reading…***'
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***DICOM Metadata — A Useful Resource for Big Data Analytics:***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This [article](https://healthmanagement.org/c/healthmanagement/issuearticle/dicom-metadata-a-useful-resource-for-big-data-analytics)
    provides an overview of new ways to represent data by combining patient access
    and DICOM information, advanced use of medical imaging metadata, analysis of radiation
    dose and image segmentation, and deep learning for feature engineering to enrich
    data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For more details about DICOM: refer to the previous blog, [***What is DICOM?***](https://medium.com/@omar.ok1998/what-is-dicom-a28c5fe24c9d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Caculating DLP** from Computed Tomography Dose Index, CTDIvol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://howradiologyworks.com/dlp-calculator/?source=post_page-----e2e442505651--------------------------------)
    [## Simple Calculator For Effective Dose In CT (DLP -> Eff Dose): Radiologic Technologist''s
    Guide To…'
  prefs: []
  type: TYPE_NORMAL
- en: Here is a simple calculator to compute the Effective Dose (mSv) from the Dose
    Length Product (mGy cm) for a CT exam of…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: howradiologyworks.com](https://howradiologyworks.com/dlp-calculator/?source=post_page-----e2e442505651--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Dataset of 99 CT slices, [dlwpt-volumetric-dicom-lung](https://www.kaggle.com/datasets/dmisky/dlwptvolumetricdicomlung),
    Kaggle, [Kosarevsky Dmitry](https://www.kaggle.com/dmisky), License: “Database:
    Open Database, Contents: Database Contents”, DbCL v1.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] PyDicom Documentation, [**User Guide**](https://pydicom.github.io/pydicom/stable/old/pydicom_user_guide.html),
    [Accessed at 25/12/2022]'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] PyDicom Documentation, [**Element VRs and Python types**](https://pydicom.github.io/pydicom/stable/guides/element_value_types.html),
    [Accessed at 25/12/2022]'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] PyDicom Documentation,[**API Reference**](https://pydicom.github.io/pydicom/stable/reference/index.html),
    [Accessed at 25/12/2022]'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Innolitics, DICOM Standard Browser, (2022), [**CTDIvol Attribute**](https://dicom.innolitics.com/ciods/ct-image/ct-image/00189345),
    [Accessed at 10/1/2023]'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] I. A. Tsalafoutas and S. I. Metallidis, “A method for calculating the dose
    length product from CT DICOM images,” *BJR*, vol. 84, no. 999, pp. 236–243, Mar.
    2011, doi: [10.1259/bjr/37630380](https://doi.org/10.1259/bjr/37630380).'
  prefs: []
  type: TYPE_NORMAL
