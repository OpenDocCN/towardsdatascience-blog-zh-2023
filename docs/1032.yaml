- en: 'Comparing List Comprehensions vs. Built-In Functions in Python: Which Is Better?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/comparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe?source=collection_archive---------2-----------------------#2023-03-21](https://towardsdatascience.com/comparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe?source=collection_archive---------2-----------------------#2023-03-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An in-depth analysis of syntax, readability, and performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)[![Thomas
    A Dorfer](../Images/9258a1735cee805f1d9b02e2adf01096.png)](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)
    [Thomas A Dorfer](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F7c54f9b62b90&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe&user=Thomas+A+Dorfer&userId=7c54f9b62b90&source=post_page-7c54f9b62b90----1e2c9646fafe---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)
    ·9 min read·Mar 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1e2c9646fafe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe&user=Thomas+A+Dorfer&userId=7c54f9b62b90&source=-----1e2c9646fafe---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1e2c9646fafe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe&source=-----1e2c9646fafe---------------------bookmark_footer-----------)![](../Images/24a86e8397f03f62c53d4cf68e844fb2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever found yourself scrolling through Netflix on a rainy day, feeling
    overwhelmed by the endless choices of movies and shows to watch?
  prefs: []
  type: TYPE_NORMAL
- en: In programming, the paradox of choice can be just as overwhelming. With so many
    libraries and frameworks available, providing countless different ways of achieving
    the same goal, it’s easy to get lost in a sea of options.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, this situation often arises when a programmer needs to choose between
    a **functional programming** approach, such as the built-in functions `map()`,
    `filter()`, and `reduce()`, and the more Pythonic **list comprehensions**.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll explore the pros and cons of these distinct approaches
    through the lens of syntax, readability, and performance.
  prefs: []
  type: TYPE_NORMAL
- en: List Comprehensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Python, a list comprehension is a concise method that produces a list based
    on an already existing list. In simple terms, it’s essentially a one-liner of
    a **for loop** with the option to include an **if condition** at the end. The
    syntax can be broken down as follows:'
  prefs: []
  type: TYPE_NORMAL
