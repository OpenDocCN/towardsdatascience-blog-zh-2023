["```py\nimport os\nimport pandas as pd\nimport numpy as np\nimport pickle\n\n# Import toy dataset\ntoy_df = pd.read_pickle('data/toy_df_full.pkl')\n\ntrain_df = toy_df[toy_df['split'] == 'train']\nval_df = toy_df[toy_df['split'] == 'valid']\ntest_df = toy_df[toy_df['split'] == 'test']\n\ny_train = train_df['label']\ny_val = val_df['label']\ny_test = test_df['label']\n\nprint(train_df.shape, val_df.shape, test_df.shape)\nprint(y_train.shape, y_val.shape, y_test.shape)\n\n### Output:\n# (1028, 14) (146, 14) (295, 14)\n# (1028,) (146,) (295,)\n```", "```py\ndef embed_all(df):\n    print('input shape: ', df.shape)\n    ### EMBEDDING MOLECULES ###\n    print('embedding drug molecules..')\n    nctid2molecule_embedding_dict = load_nctid2molecule_embedding_dict()\n    h_m = np.stack(df['nctid'].map(nctid2molecule_embedding_dict)) \n    print(f\"drug molecules successfully embedded into {h_m.shape} dimensions\")\n    ### EMBEDDING PROTOCOLS ###\n    print('embedding protocols..')\n    nctid2protocol_embedding_dict = load_nctid2protocol_embedding_dict()\n    h_p = np.stack(df['nctid'].map(nctid2protocol_embedding_dict))\n    print(f\"protocols successfully embedded into {h_p.shape} dimensions\")\n    ### EMBEDDING DISEASE INDICATIONS ###\n    print('embedding disease indications..')\n    nctid2disease_embedding_dict = load_nctid2disease_embedding_dict()\n    h_d = np.stack(df['nctid'].map(nctid2disease_embedding_dict))\n    print(f\"disease indications successfully embedded into {h_d.shape} dimensions\")\n    ### EMBEDDING TRIAL SPONSORS ###\n    print('embedding sponsors..')\n    sponsor2embedding_dict = load_sponsor2embedding_dict()\n    h_s = np.stack(df['lead_sponsor'].map(sponsor2embedding_dict))\n    print(f\"sponsors successfully embedded into {h_s.shape} dimensions\")\n    ### EMBEDDING ENROLLMENT ###\n    print('normalizing enrollment numbers..')\n    enrollment = pd.to_numeric(df['enrollment'] , errors='coerce')\n    if enrollment.isna().sum() != 0:\n        print(f\"filling {enrollment.isna().sum()} NaNs with median value\")\n        enrollment.fillna(int(enrollment.median()), inplace=True)\n        print(f\"succesfully filled NaNs with median value: {enrollment.isna().sum()} NaNs left\")\n    enrollment = enrollment.astype(int)\n    h_e = np.array((enrollment - enrollment.mean())/enrollment.std()).reshape(len(df),-1)\n    print(f\"enrollment successfully embedded into {h_e.shape} dimensions\")\n    ### COMBINE ALL EMBEDDINGS ###\n    embedded_df = pd.DataFrame(data=np.column_stack((h_m, h_p, h_d, h_s, h_e)))\n    print('output shape: ', embedded_df.shape)\n    return embedded_df\n\n# Embed data\nX_train = embed_all(train_df)\nX_val = embed_all(val_df)\nX_test = embed_all(test_df)\n```", "```py\nimport xgboost as xgb\n# Create an XGBoost classifier with specified hyperparameters\nxgb_classifier = xgb.XGBClassifier(\n    learning_rate=0.1,\n    max_depth=3,\n    n_estimators=200,\n    objective='binary:logistic',  # for binary classification\n    random_state=42\n)\n\n# Train the XGBoost model\nxgb_classifier.fit(X_train, y_train)\n# Make predictions\ny_train_pred = xgb_classifier.predict(X_train)\ny_val_pred = xgb_classifier.predict(X_val)\ny_test_pred = xgb_classifier.predict(X_test)\nprint('-----------Results on training data:-----------')\nprint_results(y_train_pred, y_train)\nprint('-----------Results on validation data:-----------')\nprint_results(y_val_pred, y_val)\nprint('-----------Results on test data:-----------')\nprint_results(y_test_pred, y_test)\n\n### Output:\n#-----------Results on training data:-----------\n# ROC AUC: 1.0\n# F1: 1.0\n# PR-AUC: 1.0\n# Precision: 1.0\n# recall: 1.0\n# accuracy: 1.0\n# predict 1 ratio: 0.661\n# label 1 ratio: 0.661\n# -----------Results on validation data:-----------\n# ROC AUC: 0.765\n# F1: 0.817\n# PR-AUC: 0.799\n# Precision: 0.840\n# recall: 0.795\n# accuracy: 0.773\n# predict 1 ratio: 0.602\n# label 1 ratio: 0.636\n# -----------Results on test data:-----------\n# ROC AUC: 0.742\n# F1: 0.805\n# PR-AUC: 0.757\n# Precision: 0.790\n# recall: 0.821\n# accuracy: 0.759\n# predict 1 ratio: 0.630\n# label 1 ratio: 0.606\n```"]