- en: How to Improve The Code Quality of your Dbt Models with Unit Tests and TDD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何通过单元测试和TDD提高您 dbt 模型的代码质量
- en: 原文：[https://towardsdatascience.com/improving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e?source=collection_archive---------4-----------------------#2023-05-31](https://towardsdatascience.com/improving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e?source=collection_archive---------4-----------------------#2023-05-31)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/improving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e?source=collection_archive---------4-----------------------#2023-05-31](https://towardsdatascience.com/improving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e?source=collection_archive---------4-----------------------#2023-05-31)
- en: All you need to know to start unit testing your dbt SQL models
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始对您的 dbt SQL 模型进行单元测试所需了解的一切
- en: '[](https://medium.com/@pablo.porto?source=post_page-----203ed0be791e--------------------------------)[![Pablo
    Porto](../Images/acfca713c40ae7f2b86756fb39402c60.png)](https://medium.com/@pablo.porto?source=post_page-----203ed0be791e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----203ed0be791e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----203ed0be791e--------------------------------)
    [Pablo Porto](https://medium.com/@pablo.porto?source=post_page-----203ed0be791e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@pablo.porto?source=post_page-----203ed0be791e--------------------------------)[![Pablo
    Porto](../Images/acfca713c40ae7f2b86756fb39402c60.png)](https://medium.com/@pablo.porto?source=post_page-----203ed0be791e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----203ed0be791e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----203ed0be791e--------------------------------)
    [Pablo Porto](https://medium.com/@pablo.porto?source=post_page-----203ed0be791e--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f9bc7e34a6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e&user=Pablo+Porto&userId=a6f9bc7e34a6&source=post_page-a6f9bc7e34a6----203ed0be791e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----203ed0be791e--------------------------------)
    ·7 min read·May 31, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F203ed0be791e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e&user=Pablo+Porto&userId=a6f9bc7e34a6&source=-----203ed0be791e---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f9bc7e34a6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e&user=Pablo+Porto&userId=a6f9bc7e34a6&source=post_page-a6f9bc7e34a6----203ed0be791e---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----203ed0be791e--------------------------------)
    ·7分钟阅读·2023年5月31日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F203ed0be791e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e&user=Pablo+Porto&userId=a6f9bc7e34a6&source=-----203ed0be791e---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F203ed0be791e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e&source=-----203ed0be791e---------------------bookmark_footer-----------)![](../Images/58bc10ba96ec1c58648c3caeba83b27c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F203ed0be791e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fimproving-the-code-quality-of-your-dbt-models-with-unit-tests-and-tdd-203ed0be791e&source=-----203ed0be791e---------------------bookmark_footer-----------)![](../Images/58bc10ba96ec1c58648c3caeba83b27c.png)'
- en: Photo by [Christin Hume](https://unsplash.com/@christinhumephoto?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/Hcfwew744z4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Christin Hume](https://unsplash.com/@christinhumephoto?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/Hcfwew744z4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: If you are a data or analytics engineer, you are probably comfortable writing
    SQL models and testing for data quality with dbt tests. You are proud of the modularisation
    and the neat SQL models you have created. Everything is fine for a while. But
    at some point, the transformation logic in your models starts growing and becoming
    more complex. You start looking at it and wondering, wouldn’t be great if I could
    isolate my models and create unit tests to verify and document this logic? This
    will definitely increase the code quality of your dbt code base, right?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是数据或分析工程师，你可能已经习惯了编写SQL模型并使用dbt测试数据质量。你为自己创建的模块化和整洁的SQL模型感到自豪。一切都还不错。但某个时候，你模型中的转换逻辑开始增长并变得更加复杂。你开始考虑，是否能够将模型隔离并创建单元测试来验证和记录这些逻辑会更好呢？这肯定会提高你dbt代码库的代码质量，对吧？
- en: Your first thought is to look at how you could do this type of test with the
    built-in dbt data tests functionality. After a few searches on Google, you realize
    that one of the ways is to [create a custom-built unit testing framework leveraging
    the dbt seed functionality](https://medium.com/@TianchenW/unit-test-sql-using-dbt-1b8aa214365e).
    Or you need to [introduce Python into your codebase to create unit tests with
    Pytest](https://godatadriven.com/blog/dbts-missing-software-engineering-piece-unit-tests/).
    That looks quite tedious, so you start wondering, wouldn’t be great to be able
    to mock the model inputs and make assertions on the transformed data using SQL?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个想法是查看如何使用内置的dbt数据测试功能来进行这种类型的测试。经过几次谷歌搜索，你意识到其中一种方法是 [创建一个自定义单元测试框架，利用dbt种子功能](https://medium.com/@TianchenW/unit-test-sql-using-dbt-1b8aa214365e)。或者你需要
    [将Python引入你的代码库，以便使用Pytest创建单元测试](https://godatadriven.com/blog/dbts-missing-software-engineering-piece-unit-tests/)。这看起来相当繁琐，因此你开始考虑，是否能够模拟模型输入并使用SQL对转换后的数据进行断言会更好呢？
- en: If this resonates with you, you are not alone. This is the journey the data
    engineering team I am part of went through until we found the dbt-unit-testing
    library.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此有共鸣，你并不孤单。这是我所在的数据工程团队经历的过程，直到我们找到dbt-unit-testing库。
- en: Mocking dbt sources and refs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟dbt源和引用
- en: 'With [dbt-unit-testing](https://github.com/EqualExperts/dbt-unit-testing) you
    can test dbt models independently by mocking their dependencies. As per their
    documentation, it gives you:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [dbt-unit-testing](https://github.com/EqualExperts/dbt-unit-testing) 你可以通过模拟其依赖关系来独立测试dbt模型。根据他们的文档，它为你提供了：
- en: '**Ability to mock dependencies**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能够模拟依赖关系**'
- en: '**Ability to run each test independently**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能够独立运行每个测试**'
- en: '**A fast feedback loop**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速反馈循环**'
- en: '**Good test feedback** (well, there are some gotchas as we will see)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**良好的测试反馈**（好吧，如我们将看到的，有一些陷阱）'
- en: This dbt library allowed us to mock our model dependencies and start implementing
    unit tests straight away. As I will share with you at the end, it even allowed
    us to start practicing test-driven development to develop our models.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个dbt库使我们能够模拟模型依赖关系，并立即开始实施单元测试。正如我将在最后与您分享的，它甚至使我们能够开始实践测试驱动开发来开发我们的模型。
- en: Now that we introduced the library, let’s look at the bare minimum you need
    to know to start implementing real unit tests for your dbt SQL models.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们介绍了这个库，让我们看看开始实施真实的dbt SQL模型单元测试所需了解的基本知识。
- en: Why should you unit test your models?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该对模型进行单元测试？
- en: Some data teams focus on increasing the data quality of the data processed by
    their data applications but they often forget about the code quality of the software
    they are building.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据团队专注于提高其数据应用处理的数据质量，但他们常常忽视了所构建软件的代码质量。
- en: Unit tests can help with this by providing a way to isolate the SQL models and
    verify complex business logic in isolation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试可以通过提供一种隔离SQL模型并验证复杂业务逻辑的方式来帮助实现这一点。
- en: '*“A unit test exercises the smallest piece of testable software in the application
    to determine whether it behaves as expected” —* [*Toby Clemson*](https://martinfowler.com/articles/microservice-testing/#testing-unit-introduction)'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“单元测试测试应用程序中最小的可测试软件部分，以确定它是否按预期行为” —* [*Toby Clemson*](https://martinfowler.com/articles/microservice-testing/#testing-unit-introduction)'
- en: In our case, the smallest piece of testable software is a dbt model. Being able
    to test a model in isolation ensures new changes don’t break the existing business
    logic and helps us document the expected behavior of the model.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，最小的可测试软件是一个dbt模型。能够隔离测试模型可以确保新的更改不会破坏现有的业务逻辑，并帮助我们记录模型的预期行为。
- en: 'A typical dbt application follows [a layered architecture style](https://docs.getdbt.com/guides/best-practices/how-we-structure/1-guide-overview)
    with at least three layers: staging, intermediate mart. Each layer will contain
    one or more models. These are the models we can test in isolation.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first unit test
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s look at a simple example. We have a dbt app called health-insights that
    takes weight and height data from upstream sources and calculates the metric body
    mass index.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0edbb85d35fe210159bef95ffdd277e.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: The layered architecture of a typical dbt data app
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The following model enriches a weight measurement with the latest height measurement
    recorded prior to the weight one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Example of a dbt intermediate model
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now create a dbt unit test to prove the transformation logic is correct.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Example of a dbt unit test for the an intermediate model
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The building blocks
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at the previous test, we can see several of the dbt-unit-testing macros
    in use:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**dbt_unit_testing.test:**This macro allows us define the model under test
    and the name of the test. In our example we reference to *int_weight_measurements_with_latest_height*.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dbt_unit_testing.mock_ref:**This macro allows us to mock references to other
    dbt models. In our example, we are mocking the weight (stg_gym_app__weight) and
    the height (stg_gym_app__height) staging data.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dbt_unit_testing.expect:** And this macro allows us to assert on the result
    of the transformation. In the example, we assert that the weight measurement gets
    enriched with the latest height.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the tests
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now run our model’s unit test. We can call the usual dbt test command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Opps, that commands runs the whole test suite including other dbt data quality
    checks. But we want to only run our unit tests. No problem, we can leverage dbt
    tags functionality to isolate our unit tests. In the example, we tagged our test
    with two tags:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first one is a boilerplate tag required by the dbt-unit-testing library.
    The second one is the one we will use to execute our unit test.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Exploring other types of tests
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen how we can write a unit test to verify the logic of a single
    model. After creating a few of these, our team started discussing the possibility
    of implementing new types of tests like we usually do for operational software
    like microservices.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '*“A component test limits the scope of the exercised software to a portion
    of the system under test, manipulating the system through internal code interfaces
    and using test doubles to isolate the code under test from other components.”
    —* [*Toby Clemson*](https://martinfowler.com/articles/microservice-testing/#testing-component-introduction)'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In a microservices context, a component is a service that exposes certain functionalities.
    If we apply the same concept to the data context, component tests for dbt apps
    can be implemented as tests that validate whether the dbt app provides the functionality
    that it promises to by mocking the data sources.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务上下文中，组件是一个暴露特定功能的服务。如果我们将相同的概念应用到数据上下文中，那么 dbt 应用的组件测试可以实现为测试 dbt 应用是否通过模拟数据源提供了其承诺的功能。
- en: '![](../Images/4ab15cf4b82289f9688db950dbc43d88.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ab15cf4b82289f9688db950dbc43d88.png)'
- en: The usual test pyramid for an operational app
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运营应用程序的常见测试金字塔
- en: When implementing the component test, the scope of the test increases. We test
    our dbt app as a whole mocking only its sources.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现组件测试时，测试的范围会增加。我们测试整个 dbt 应用程序，仅模拟其源。
- en: '![](../Images/14753c64f03937d7493898c66d960153.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14753c64f03937d7493898c66d960153.png)'
- en: The component test scope
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 组件测试范围
- en: 'This type of test ensures that the different models integrate correctly and
    the expected data transformation outcome is created. Let’s look at an example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的测试确保不同模型正确集成，并生成预期的数据转换结果。让我们来看一个例子：
- en: In the component test above, we are testing our output model *body_mass_indexes*.
    The model uses the enriched weight measurements to calculate the body mass of
    the user. We mock the sources directly (raw_weight and raw_height) with the dbt_unit_testing.mock_source
    macro. Finally, we assert the final transformation of the output model verifying
    that the body mass index (BMI) is calculated correctly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的组件测试中，我们正在测试我们的输出模型*body_mass_indexes*。该模型使用丰富的体重测量数据来计算用户的体重。我们直接使用 dbt_unit_testing.mock_source
    宏模拟源（raw_weight 和 raw_height）。最后，我们断言输出模型的最终转换，验证体重指数（BMI）是否计算正确。
- en: We can also run this type of tests in isolation using the tag name we specified
    in the test configuration.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用我们在测试配置中指定的标签名称在隔离环境中运行这种类型的测试。
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Test-driven development (TDD) in SQL, why not?
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不在 SQL 中应用测试驱动开发（TDD）呢？
- en: Now that we have the ability to test our models in isolation, what if we start
    by writing the tests before we write any transformation logic?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有能力在隔离环境中测试模型，如果我们从编写测试开始，而不是先编写任何转换逻辑，会怎样呢？
- en: Test-driven development or TDD is a software engineering practice that helps
    improve the design of the code by forcing the developers to write a test first
    and then write the minimum amount of code to make that test pass.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）是一种软件工程实践，通过迫使开发人员首先编写测试，然后编写最少量的代码来使测试通过，从而帮助改进代码的设计。
- en: Our data team had experience in applying TDD in operational systems so we decided
    to give it a try.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据团队在运营系统中应用 TDD 方面有经验，因此我们决定尝试一下。
- en: Starting by defining the outcomes of a given transformation in a test felt quite
    natural. Oh, what is the BMI I would expect if I have this weight and this height
    as an input? Let’s write a test for that. After practicing TDD for a while, the
    team still continue to use this technique when adding new business logic into
    the transformations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从在测试中定义给定转换的结果开始感觉非常自然。哦，如果我有这个体重和这个身高作为输入，我期望的 BMI 会是多少？我们来为此编写一个测试。在实践了一段时间的
    TDD 之后，团队在将新的业务逻辑添加到转换中时仍然继续使用这一技术。
- en: Gotchas
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'I just pictured a perfect scenario where you can just add the unit testing
    dbt package and start creating tests straight away. The truth is that the library
    is still under development and we found some gotchas that you should also probably
    be aware of:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾设想过一个完美的场景，你可以直接添加单元测试 dbt 包并开始立即创建测试。事实是该库仍在开发中，我们发现了一些你可能也需要注意的问题：
- en: The dbt-unit-testing macros break the principle of not allowing testing code
    to pollute production code. There is an easy hack to fix this. You can create
    a macro to patch the original ref() and source() and call the testing macros.
    You can see an [example here](https://github.com/portovep/dbt-unit-testing-examples/blob/main/macros/testing_macros.sql).
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dbt-unit-testing 宏打破了不允许测试代码污染生产代码的原则。解决这个问题的一个简单方法是创建一个宏来修补原始的 ref() 和 source()
    并调用测试宏。你可以在[这里](https://github.com/portovep/dbt-unit-testing-examples/blob/main/macros/testing_macros.sql)查看一个示例。
- en: We found that sometimes seems like changes in a test are not picked up. There
    is an option to disable caching but we haven’t try it.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们发现有时测试中的更改似乎没有被识别。虽然有禁用缓存的选项，但我们还没有尝试过。
- en: When mocking sources you need to define the source in the dbt .yml file if not
    it doesn’t compile.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模拟源时，如果在 dbt 的 .yml 文件中未定义源，它将无法编译。
- en: Sometimes the test error messages are quite cryptic. In this situation, we found
    ourselves looking at the compiled SQL code in the build folder.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时候测试错误消息非常晦涩。在这种情况下，我们发现自己需要查看构建文件夹中的编译SQL代码。
- en: Be also aware of other limitations [listed in the library docs](https://github.com/EqualExperts/dbt-unit-testing#known-limitations).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要注意库文档中[列出的其他限制](https://github.com/EqualExperts/dbt-unit-testing#known-limitations)。
- en: Conclusions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have seen how we can add unit and component tests to our dbt projects to
    increase the code quality and therefore the maintainability of our transformation
    logic. We also saw how we can tag the different types of tests so that we can
    run them in isolation both locally and in the CI/CD pipeline. Finally, we also
    look at how we could also practice TDD
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何向我们的dbt项目添加单元测试和组件测试，以提高代码质量，从而提高转换逻辑的可维护性。我们还看到如何标记不同类型的测试，以便可以在本地和CI/CD管道中分别运行它们。最后，我们还查看了如何实践TDD。
- en: Hope this article helps you and your team start adopting unit tests and creating
    more maintainable and scalable dbt apps as your codebase scale to fulfill new
    data use cases.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章能帮助你和你的团队开始采用单元测试，并在你的代码库扩展以满足新的数据使用案例时，创建更易维护和可扩展的dbt应用程序。
- en: If you are curious, you can check a fully functional example in [this Github
    repo](https://github.com/portovep/dbt-testing-examples). I also prepared [some
    katas](https://github.com/portovep/dbt-unit-testing-examples/tree/main/exercises)
    in case you want to practice TDD and unit testing with a simple example.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，可以在[这个Github仓库](https://github.com/portovep/dbt-testing-examples)中查看一个完整功能的示例。我还准备了[一些练习题](https://github.com/portovep/dbt-unit-testing-examples/tree/main/exercises)，如果你想用简单的示例练习TDD和单元测试的话。
- en: Are you ready to give it a try?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好尝试一下了吗？
- en: '*This article is part of series of articles I am writing on* [*testing data
    pipelines and data products.*](https://medium.com/@pablo.porto/list/testing-data-products-and-data-pipelines-with-dbt-52eaff0e92dd)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇文章是我正在撰写的一系列关于* [*测试数据管道和数据产品*](https://medium.com/@pablo.porto/list/testing-data-products-and-data-pipelines-with-dbt-52eaff0e92dd)
    *的文章中的一部分。*'
- en: '*I am always looking forward to meeting new people. If you want to connect,
    you can find me on* [*Linkedin*](https://www.linkedin.com/in/pabloportoveloso/)*,*
    [*Github*](https://github.com/portovep)*,* [*Instagram*](https://www.instagram.com/porto.vga/),
    [*Substack*](https://pabsgarage.substack.com/), *or on* [*my personal website.*](https://pabloporto.me)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*我一直期待认识新朋友。如果你想联系我，可以在* [*Linkedin*](https://www.linkedin.com/in/pabloportoveloso/)
    *、* [*Github*](https://github.com/portovep) *、* [*Instagram*](https://www.instagram.com/porto.vga/)、[*Substack*](https://pabsgarage.substack.com/)
    *或者* [*我的个人网站*](https://pabloporto.me) *上找到我。*'
- en: '*Thanks to my Thoughtworks colleagues Manisha and David for taking the time
    to review early versions of this article. Thanks to the maintainers of the* [*dbt-unit-testing
    package*](https://github.com/EqualExperts/dbt-unit-testing) *for their great work.*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢我的Thoughtworks同事Manisha和David花时间审阅这篇文章的早期版本。感谢* [*dbt-unit-testing包*](https://github.com/EqualExperts/dbt-unit-testing)
    *的维护者们的出色工作。*'
- en: '*All images unless otherwise noted are by the author.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
