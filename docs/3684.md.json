["```py\nimport cartopy.crs as ccrs\nimport cartopy.io.shapereader as shpreader\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nfrom matplotlib import colormaps\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\nimport numpy as np\nimport pandas as pd\nimport os\n```", "```py\n# get the country border file (10m resolution) and extract\nshpfilename = shpreader.natural_earth(\n                           resolution=”10m”,\n                           category=”cultural”,\n                           name=”admin_0_countries”,\n                          )\nreader = shpreader.Reader(shpfilename)\ncountries = reader.records()\n```", "```py\n# required countries\nrequired = [“Nepal”, “India”, “Bangladesh”,”China”,”Pakistan”,”Sri Lanka”]\n\n# extract the specific country information\nc = {\n     co.attributes[\"ADMIN\"]: co\n     for co in countries if co.attributes[\"ADMIN\"] in required\n    }\n```", "```py\n# get overall boundary box from country bounds\nextents = np.array([c[cn].bounds for cn in c])\nlon = [extents.min(0)[0], extents.max(0)[2]]\nlat = [extents.min(0)[1], extents.max(0)[3]]\n\nax = plt.axes(projection=ccrs.PlateCarree())\n\n# get country centroids\nax.set_extent([lon[0] - 1, lon[1] + 1, lat[0] - 1, lat[1] + 1])\n\nfor key, cn in zip(c.keys(),c.values()):\n    ax.add_geometries(cn.geometry,\n                      crs=ccrs.PlateCarree(),\n                      edgecolor=\"gray\",\n                      facecolor=\"whitesmoke\",\n                     zorder = 1)\n\n    # Add country names\n    centroid = cn.geometry.centroid\n\n    ax.text(\n        centroid.x,\n        centroid.y,\n        key,  # Assuming 'name' is the attribute containing the country names\n        horizontalalignment='center',\n        verticalalignment='center',\n        transform=ccrs.PlateCarree(),\n        fontsize=8,  # Adjust the font size as needed\n        color='black',  # Set the color of the text\n        zorder = 2\n        )\n\nplt.axis(\"off\")\nplt.show()\n```", "```py\nax = plt.axes(projection=ccrs.PlateCarree())\n\n# get country centroids\nax.set_extent([lon[0] - 1, lon[1] + 1, lat[0] - 1, lat[1] + 1])\n\nfor key, cn in zip(c.keys(),c.values()):\n    ax.add_geometries(cn.geometry,\n                      crs=ccrs.PlateCarree(),\n                      edgecolor=\"grey\",\n                      facecolor=\"whitesmoke\",\n                     zorder = 1)\n\n    # Add country names\n    centroid = cn.geometry.centroid\n\n    ax.text(\n        centroid.x,\n        centroid.y,\n        key,  # Assuming 'name' is the attribute containing the country names\n        horizontalalignment='center',\n        verticalalignment='center',\n        transform=ccrs.PlateCarree(),\n        fontsize=8,  # Adjust the font size as needed\n        color='black',  # Set the color of the text\n        zorder = 2\n       )\n\n# set up a colormap\ncmap = colormaps.get(\"viridis_r\")\ntmin = np.array([v for v in transfers.values()]).min()\ntmax = np.array([v for v in transfers.values()]).max()\nnorm = Normalize(tmin, tmax)\n\nfor tr in transfers:\n    c1, c2 = tr.split(\",\")\n    startarrow1 = startarrow1_dict[tr]\n    endarrow1 = endarrow1_dict[tr]\n\n    startarrow2 = startarrow2_dict[tr]\n    endarrow2 = endarrow2_dict[tr]\n\n    t1 = transfers[tr][0]\n    col = cmap(norm(t1))\n\n    # Use the arrow function to draw arrows\n    arrow = mpatches.FancyArrowPatch(\n        (startarrow1[0], startarrow1[1]),\n        (endarrow1[0], endarrow1[1]),\n        mutation_scale=20,    #control the length of head of arrow \n        color=col,\n        arrowstyle='-|>',\n        linewidth=2,  # You can adjust the linewidth to control the arrow body width\n        zorder = 3\n    )\n    ax.add_patch(arrow)\n\n    #OTHER WAY\n    offset = 1\n    t2 = transfers[tr][1]\n    col = cmap(norm(t2))\n    arrow = mpatches.FancyArrowPatch(\n        (startarrow2[0], startarrow2[1]),\n        (endarrow2[0], endarrow2[1]),\n        mutation_scale=20,\n        color=col,\n        arrowstyle='-|>',\n        linewidth=2,  # You can adjust the linewidth to control the arrow body width\n        zorder = 4\n    )\n    ax.add_patch(arrow)\n\nsm = ScalarMappable(norm, cmap)\nfig = plt.gcf()\ncbar = fig.colorbar(sm, ax=ax,\n            orientation = \"horizontal\",\n            pad = 0.05,  #distance between main plot and colorbar\n            shrink = 0.8, #control length\n            aspect = 20  #control width\n            )\ncbar.set_label(\"Trade flow\")\n\nplt.title(\"Trade flow in South Asia\")\nplt.axis(\"off\")\n\nplt.savefig(\"trade_flow2_with_labels.jpeg\",\n           dpi = 300)\nplt.show()\n```"]