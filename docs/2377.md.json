["```py\ndef divide(num_1: float, num_2: float) -> float:\n    if not isinstance(num_1, (int, float)) \\\n            or not isinstance(num_2, (int, float)):\n        raise TypeError(\"at least one of the inputs \"\n                        f\"is not a number: {num_1}, {num_2}\")\n\n    return num_1 / num_2\n```", "```py\nfrom contextlib import nullcontext as does_not_raise\n\nimport pytest\n\nfrom operations import divide\n\ndef test_happy_flow():\n    with does_not_raise():\n        assert divide(30, 2.5) is not None\n    assert divide(30, 2.5) == 12.0\n\ndef test_division_by_zero():\n    with pytest.raises(ZeroDivisionError) as exc_info:\n        divide(10.5, 0)\n    assert exc_info.value.args[0] == \"float division by zero\"\n\ndef test_not_a_digit():\n    with pytest.raises(TypeError) as exc_info:\n        divide(\"a\", 10.5)\n    assert exc_info.value.args[0] == \\\n           \"at least one of the inputs is not a number: a, 10.5\"\n```", "```py\n# Both tests below should fail\n\ndef test_wrong_exception():\n    with pytest.raises(TypeError) as exc_info:\n        divide(10.5, 0)\n    assert exc_info.value.args[0] == \"float division by zero\"\n\ndef test_unexpected_exception_in_happy_flow():\n    with pytest.raises(Exception):\n        assert divide(30, 2.5) is not None\n```", "```py\nfrom contextlib import nullcontext as does_not_raise\n\nimport pytest\n\nfrom operations import divide\n\n@pytest.mark.parametrize(\n    \"num_1, num_2, expected_result, exception, message\",\n    [\n        (30, 2.5, 12.0, does_not_raise(), None),\n\n        (10.5, 0, None, pytest.raises(ZeroDivisionError),\n         \"float division by zero\"),\n\n        (\"a\", 10.5, None, pytest.raises(TypeError),\n         \"at least one of the inputs is not a number: a, 10.5\")\n\n    ],\n    ids=[\"valid inputs\",\n         \"divide by zero\",\n         \"not a number input\"]\n)\ndef test_division(num_1, num_2, expected_result, exception, message):\n    with exception as e:\n        result = divide(num_1, num_2)\n    assert message is None or message in str(e)\n    if expected_result is not None:\n        assert result == expected_result\n```", "```py\nfrom unittest import TestCase\n\nfrom operations import divide\n\nclass TestDivide(TestCase):\n    def test_happy_flow(self):\n        result = divide(0, 10.5)\n        self.assertEqual(result, 0)\n\n    def test_division_by_zero(self):\n        with self.assertRaises(ZeroDivisionError) as context:\n            divide(10, 0)\n        self.assertEqual(context.exception.args[0], \"division by zero\")\n\n    def test_not_a_digit(self):\n        with self.assertRaises(TypeError) as context:\n            divide(10, \"c\")\n        self.assertEqual(context.exception.args[0],\n                         \"at least one of the inputs \"\n                         \"is not a number: 10, c\")\n```", "```py\nimport unittest\n\nfrom parameterized import parameterized  # requires installation\n\nfrom operations import divide\n\ndef get_test_case_name(testcase_func, _, param):\n    test_name = param.args[-1]\n    return f\"{testcase_func.__name__}_{test_name}\"\n\nclass TestDivision(unittest.TestCase):\n\n    @parameterized.expand([\n        (30, 2.5, 12.0, None, None, \"valid inputs\"),\n        (10.5, 0, None, ZeroDivisionError,\n         \"float division by zero\", \"divide by zero\"),\n        (\"a\", 10.5, None, TypeError,\n         \"at least one of the inputs is not a number: a, 10.5\",\n         \"not a number input\")\n    ], name_func=get_test_case_name)\n    def test_division(self, num_1, num_2, expected_result, exception_type,\n                      exception_message, test_name):\n        with self.subTest(num_1=num_1, num_2=num_2):\n            if exception_type is not None:\n                with self.assertRaises(exception_type) as e:\n                    divide(num_1, num_2)\n                self.assertEqual(str(e.exception), exception_message)\n            else:\n                result = divide(num_1, num_2)\n                self.assertIsNotNone(result)\n                self.assertEqual(result, expected_result)\n```"]