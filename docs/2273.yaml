- en: 'Python Lists Vs. NumPy Arrays: A Deep Dive into Memory Layout and Performance
    Benefits'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e?source=collection_archive---------11-----------------------#2023-07-14](https://towardsdatascience.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e?source=collection_archive---------11-----------------------#2023-07-14)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[FAST COMPUTING](https://medium.com/@qtalen/list/fast-computing-2a37a7e82be5)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exploring allocation differences and efficiency gains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8e2fe735546d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e&user=Peng+Qian&userId=8e2fe735546d&source=post_page-8e2fe735546d----a74ce774bc1e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)
    ·9 min read·Jul 14, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa74ce774bc1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e&user=Peng+Qian&userId=8e2fe735546d&source=-----a74ce774bc1e---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa74ce774bc1e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e&source=-----a74ce774bc1e---------------------bookmark_footer-----------)![](../Images/9c59152b04be4c0785841172da617a50.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Data in NumPy arrays are arranged as compactly as books on a shelf. Photo by
    [Eliabe Costa](https://unsplash.com/@eliabevces?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will delve into the memory design differences between native
    Python lists and NumPy arrays, revealing why NumPy can provide better performance
    in many cases.
  prefs: []
  type: TYPE_NORMAL
- en: We will compare data structures, memory allocation, and access methods, showcasing
    the power of NumPy arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine you are preparing to go to the library to find a book. Now, you discover
    that the library has two shelves:'
  prefs: []
  type: TYPE_NORMAL
- en: The first shelf is filled with various exquisite boxes, some containing CDs,
    some containing pictures, and others containing books. Only the name of the item
    is attached to the box.
  prefs: []
  type: TYPE_NORMAL
- en: This represents native Python lists, where each element has its memory space
    and type information.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this approach has a problem: many empty spaces in the boxes, wasting
    shelf space. Moreover, when you want to find a specific book, you must look inside
    each box, which takes extra time.'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at the second shelf. This time there are no boxes; books, CDs,
    and pictures are all…
  prefs: []
  type: TYPE_NORMAL
