- en: NP-What? Complexity Types of Optimization Problems Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/np-what-complexity-types-of-optimization-problems-explained-558d43276044?source=collection_archive---------2-----------------------#2023-08-17](https://towardsdatascience.com/np-what-complexity-types-of-optimization-problems-explained-558d43276044?source=collection_archive---------2-----------------------#2023-08-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/d71f4632f6eb7e92629cf29ff7352ffd.png)'
  prefs: []
  type: TYPE_IMG
- en: Complex building. Image created with [Midjourney](https://www.midjourney.com/)
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to one of the central questions in computer science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)[](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffb96be98b7b9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnp-what-complexity-types-of-optimization-problems-explained-558d43276044&user=Hennie+de+Harder&userId=fb96be98b7b9&source=post_page-fb96be98b7b9----558d43276044---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)
    ·11 min read·Aug 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F558d43276044&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnp-what-complexity-types-of-optimization-problems-explained-558d43276044&user=Hennie+de+Harder&userId=fb96be98b7b9&source=-----558d43276044---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F558d43276044&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnp-what-complexity-types-of-optimization-problems-explained-558d43276044&source=-----558d43276044---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: '**How come the** [**shortest path problem**](/optimizing-connections-mathematical-optimization-within-graphs-7364e082a984)
    **is easy to solve, but the** [**traveling salesman problem**](https://medium.com/towards-data-science/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06)
    **is not? What are the mathematical ideas on this? How to determine if a problem
    will take an unmanageable number of steps if its size increases? In this post
    you will learn the basics on this topic. And if you want to get serious with this,
    I’ve included a short note on one of the millennium prize problems related to
    this topic at the end of the post.**'
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started with NP hardness, you should know the basics of time complexity.
    If you are familiar with time complexity, Big O notation, and worst case analysis,
    you can skip the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Time Complexity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we work with computers and write programs, we often deal with problems
    that can be solved in different ways. One important thing we need to consider
    is how efficient these solutions are. Time complexity helps us understand how
    fast an algorithm runs as the size of the problem it’s solving gets bigger.
  prefs: []
  type: TYPE_NORMAL
- en: '*Big O notation* can be compared with labeling the algorithm with a simple
    sticker that tells us how long the algorithm takes to finish based on how many
    things we’re…'
  prefs: []
  type: TYPE_NORMAL
