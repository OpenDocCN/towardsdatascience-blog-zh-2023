- en: Building a Smart Travel Itinerary Suggester with LangChain, Google Maps API,
    and Gradio (Part 3)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LangChain、Google Maps API 和 Gradio 构建智能旅行行程建议器（第 3 部分）
- en: 原文：[https://towardsdatascience.com/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb?source=collection_archive---------5-----------------------#2023-09-26](https://towardsdatascience.com/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb?source=collection_archive---------5-----------------------#2023-09-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb?source=collection_archive---------5-----------------------#2023-09-26](https://towardsdatascience.com/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb?source=collection_archive---------5-----------------------#2023-09-26)
- en: Learn how to build an application that might inspire your next road trip
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何构建一个可能激发你下一次公路旅行灵感的应用
- en: '[](https://medium.com/@rmartinshort?source=post_page-----90dc7be627fb--------------------------------)[![Robert
    Martin-Short](../Images/e3910071b72a914255b185b850579a5a.png)](https://medium.com/@rmartinshort?source=post_page-----90dc7be627fb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----90dc7be627fb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----90dc7be627fb--------------------------------)
    [Robert Martin-Short](https://medium.com/@rmartinshort?source=post_page-----90dc7be627fb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@rmartinshort?source=post_page-----90dc7be627fb--------------------------------)[![Robert
    Martin-Short](../Images/e3910071b72a914255b185b850579a5a.png)](https://medium.com/@rmartinshort?source=post_page-----90dc7be627fb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----90dc7be627fb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----90dc7be627fb--------------------------------)
    [Robert Martin-Short](https://medium.com/@rmartinshort?source=post_page-----90dc7be627fb--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F83d38eb39498&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb&user=Robert+Martin-Short&userId=83d38eb39498&source=post_page-83d38eb39498----90dc7be627fb---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----90dc7be627fb--------------------------------)
    ·6 min read·Sep 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F90dc7be627fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb&user=Robert+Martin-Short&userId=83d38eb39498&source=-----90dc7be627fb---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F83d38eb39498&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb&user=Robert+Martin-Short&userId=83d38eb39498&source=post_page-83d38eb39498----90dc7be627fb---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----90dc7be627fb--------------------------------)
    ·6 分钟阅读·2023年9月26日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F90dc7be627fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb&user=Robert+Martin-Short&userId=83d38eb39498&source=-----90dc7be627fb---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F90dc7be627fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb&source=-----90dc7be627fb---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F90dc7be627fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb&source=-----90dc7be627fb---------------------bookmark_footer-----------)'
- en: '**This article is the final one in a three part series where we build a travel
    itinerary suggester application using OpenAI and Google APIs and display it in
    a simple UI generated with gradio. In this part, we discuss how to build that
    UI, putting together the Agent and RouteFinder modules that we built in parts
    1 and 2\. Just want see the code? Find it** [**here**](https://github.com/rmartinshort/travel_mapper)**.**'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**本文是一个三部分系列中的最后一篇，我们使用OpenAI和Google API构建了一个旅行行程建议应用，并通过Gradio生成的简单UI展示它。在这一部分，我们讨论如何构建该UI，将我们在第1部分和第2部分中构建的Agent和RouteFinder模块组合在一起。只想查看代码？请在**[**这里**](https://github.com/rmartinshort/travel_mapper)**找到**。'
- en: 1\. Recap of part 2
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 第二部分回顾
- en: In the [second part](/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-2-86e9d2bcae5)
    of this three part series, we built a system that takes a parsed list of waypoints
    from a set of LLM calls (part 1) and uses the Google Maps API and Folium to generate
    a route between them and plot it on an interactive map. Recall that our goal in
    this project is to build an application that allows someone to easily enter a
    travel request like “*A four day trip from Berlin to Zurich where I try lots of
    local beer and food*” and returns a detailed itinerary along with a map for them
    to explore. Thanks to parts 1 and 2 we have all the components assembled, we now
    just need to put them together in a UI that makes using them easy.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个三部分系列的[第二部分](/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-2-86e9d2bcae5)，我们构建了一个系统，该系统从一系列LLM调用中获取解析后的路标列表（第1部分），并使用Google
    Maps API和Folium生成它们之间的路线，并将其绘制在交互式地图上。回顾一下，我们在这个项目中的目标是构建一个应用程序，允许用户轻松输入旅行请求，例如*“从柏林到苏黎世的四天行程，我想尝试大量当地啤酒和食物”*，并返回详细的行程安排和地图供他们探索。感谢第1部分和第2部分，我们已经组装了所有组件，现在只需将它们组合在一个使使用变得简单的UI中即可。
- en: '**2\. Connecting maps to gradio**'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**2\. 将地图连接到Gradio**'
- en: '[gradio](https://www.gradio.app/) is an excellent library for quickly building
    interactive apps that can showcase machine learning models. It has a `gradio.Plot`
    component that is designed to work with Matplotlib, Bohkeh and Plotly (details
    [here](https://www.gradio.app/guides/plot-component-for-maps)). However, the maps
    we were generating in Part 2 are made with folium. It would certainly be possilbe
    to re-make them using one of these other libraries, but thankfully we don’t need
    to. Instead, we can use the [leafmap](https://leafmap.org/) package, which allows
    us to reuse the folium code we already have and force it to output a html that
    can be understood by `gradio` . Details can be found [here](https://leafmap.org/notebooks/66_gradio/).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[gradio](https://www.gradio.app/)是一个出色的库，用于快速构建能够展示机器学习模型的交互式应用程序。它有一个`gradio.Plot`组件，旨在与Matplotlib、Bokeh和Plotly配合使用（详细信息[这里](https://www.gradio.app/guides/plot-component-for-maps)）。然而，我们在第二部分生成的地图是使用Folium制作的。虽然可以使用这些其他库重新制作这些地图，但幸运的是，我们不需要这么做。相反，我们可以使用[leafmap](https://leafmap.org/)包，它允许我们重用已有的Folium代码，并强制输出Gradio可以理解的HTML。详细信息可以在[这里](https://leafmap.org/notebooks/66_gradio/)找到。'
- en: Let’s look at a simple example to see how this works. First we will make a function
    that outputs a html from in the desired format
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的例子，了解它是如何工作的。首先，我们将创建一个函数，从中输出所需格式的HTML。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, the function `generate_map` takes in a string of coordinates in the format
    *“lat,lon”* and a zoom level for the folium map. It generates the map and converts
    it to a format that can be readable by gradio.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，函数`generate_map`接收一个格式为*“lat,lon”*的坐标字符串和一个Folium地图的缩放级别。它生成地图并将其转换为Gradio可以读取的格式。
- en: Next, lets build a really simple gradio interface to display our map
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们构建一个非常简单的Gradio界面来展示我们的地图。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here we are making use of the `Blocks` API, which gives us flexibility over
    how our app’s UI will be set up. We make one row pf components with two columns.
    The first column contains three elements: A text box for the user to enter the
    desired center coordinates, a dropdown to select the zoom level and a button called
    *“generate map”*, which they need to click on.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们利用`Blocks` API，它为我们提供了设置应用程序UI的灵活性。我们创建了一行组件，分为两列。第一列包含三个元素：一个文本框供用户输入所需的中心坐标，一个下拉菜单选择缩放级别，以及一个名为*“生成地图”*的按钮，用户需要点击这个按钮。
- en: In the second column, we have `map_output` which is a`gradio.HTML()` component,
    which is going to display the map html.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二列，我们有`map_output`，这是一个`gradio.HTML()`组件，用于显示地图的HTML。
- en: Then, all we need to do is define what happens when `map_button` is clicked.
    When this happens, we will run the `generate_map` function, passing in the selected
    values from `coordinates_input` and `zoom_input` . The result will be send to
    the `map_output` variable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要做的就是定义点击 `map_button` 时发生的事情。当发生这种情况时，我们将运行 `generate_map` 函数，传入从 `coordinates_input`
    和 `zoom_input` 中选择的值。结果将被发送到 `map_output` 变量。
- en: Running this produces the following UI
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码会产生以下用户界面
- en: '![](../Images/20d1d726bf80511528ef8b0c48695346.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/20d1d726bf80511528ef8b0c48695346.png)'
- en: Basic mapping UI generated with leafmap and gradio
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 leafmap 和 gradio 生成的基本映射用户界面
- en: It’s certainly not sophisticated or well laid out, but it contains the essential
    element for building a mapping tool with gradio.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实不复杂也不精美，但它包含了使用 gradio 构建映射工具的基本元素。
- en: '**3\. A simple UI for our travel agent**'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**3\. 为我们的旅行代理商创建一个简单的用户界面**'
- en: Let’s first look at some of the features of the gradio app for our travel mapper
    before we examine the code. Bear in mind though that gradio has a large variety
    of components available to make sophisticated and good-looking UIs, and this travel
    mapper UI is still very much at the POC stage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看 gradio 应用程序在我们检查代码之前的一些功能。不过要注意，gradio 提供了大量组件来创建复杂且美观的用户界面，而这个旅行地图用户界面仍然处于
    POC 阶段。
- en: '![](../Images/7e9da427e20d22d644547d8d2282cff7.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e9da427e20d22d644547d8d2282cff7.png)'
- en: Description of all the components in the final gradio app for the travel mapper
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 旅行地图应用最终版本中所有组件的描述
- en: Essentially our app has two columns. The first contains a text box for the user
    to enter their query, a set of radio buttons that allows us to switch between
    models and a text box that displays the output of the validation check.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序本质上有两列。第一列包含一个文本框，供用户输入查询，一个单选按钮组，允许我们在模型之间切换，以及一个显示验证检查输出的文本框。
- en: The second column contains the map, generated with `leafmap.folium` and a text
    box that displays the full text itinerary output from the LLM call. The *“generate
    map”* button is at the bottom, off screen in the screenshot above.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二列包含由 `leafmap.folium` 生成的地图和一个显示 LLM 调用完整文本行程输出的文本框。*“生成地图”* 按钮在底部，截图中不可见。
- en: The code for all this is remarkably concise, thanks to all the work being done
    in the background by gradio.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 gradio 在后台完成的所有工作，所有这些代码都非常简洁。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 4\. Creating the package
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 创建包
- en: As can be seen from looking at the repository on github, the travel mapper code
    is structured with the help of a standard template from [cookiecutter](https://github.com/cookiecutter/cookiecutter),
    but some important parts of the template are not yet filled in. Ideally we would
    include unit and integration tests, and complete the repository set up so that
    continuous integration/continuous delivery (CI/CD) concepts are used. If the project
    develops further beyond this POC stage, these aspects will be added in future.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从 github 上查看存储库可以看出，旅行地图代码是通过 [cookiecutter](https://github.com/cookiecutter/cookiecutter)
    的标准模板构建的，但模板中的一些重要部分尚未填充。理想情况下，我们会包括单元测试和集成测试，并完成存储库设置，以便使用持续集成/持续交付（CI/CD）概念。如果项目在这个
    POC 阶段之后进一步发展，这些方面将在未来添加。
- en: There are a few ways that the code can be run locally. If we put the `main`
    function in the block above into a script called `driver.py` , we should be able
    to run it from the top level of the `travel_mapper`project from the terminal.
    If the package successfully runs, a message like this should appear in the terminal
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以通过几种方式在本地运行。如果我们将上述 `main` 函数放入一个名为 `driver.py` 的脚本中，我们应该能够从 `travel_mapper`
    项目的顶层从终端运行它。如果包成功运行，终端中应出现类似以下的消息
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Copy-pasting this url into a web browser should display the gradio app, running
    locally on your machine. Of course, more steps would be needed if we actually
    wanted to deploy this on the web (which I do not recommend because of the costs
    incurred from the API calls), but this is beyond the scope of these articles.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将此网址复制粘贴到网络浏览器中应该会显示出在本地运行的 gradio 应用。当然，如果我们真的想将其部署到网络上（我不推荐，因为 API 调用的费用），需要更多的步骤，但这超出了这些文章的范围。
- en: The driver can also be run from a bash script called `run.sh` , which can be
    found in the `user_interface` module of the codebase.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序也可以从名为 `run.sh` 的 bash 脚本中运行，该脚本可以在代码库的 `user_interface` 模块中找到。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When run from the top level of the project, this also sets the `PYTHONPATH`
    correctly so that the project-specific import statements are always recognized.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目的顶层运行时，这也会正确设置`PYTHONPATH`，确保项目特定的导入语句始终被识别。
- en: Thats it for the series and thanks for making it to the end! Please feel free
    to explore the full codebase here [https://github.com/rmartinshort/travel_mapper](https://github.com/rmartinshort/travel_mapper).
    Any suggestions for improvement or extensions to the functionality would be much
    appreciated!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本系列的全部内容，感谢你一直看到最后！请随时在这里探索完整的代码库 [https://github.com/rmartinshort/travel_mapper](https://github.com/rmartinshort/travel_mapper)。任何改进建议或功能扩展的意见都非常受欢迎！
