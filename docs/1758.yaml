- en: Lineage + Hamilton in 10 minutes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**10分钟理解Lineage和Hamilton**'
- en: 原文：[https://towardsdatascience.com/lineage-hamilton-in-10-minutes-c2b8a944e2e6?source=collection_archive---------8-----------------------#2023-05-26](https://towardsdatascience.com/lineage-hamilton-in-10-minutes-c2b8a944e2e6?source=collection_archive---------8-----------------------#2023-05-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/lineage-hamilton-in-10-minutes-c2b8a944e2e6?source=collection_archive---------8-----------------------#2023-05-26](https://towardsdatascience.com/lineage-hamilton-in-10-minutes-c2b8a944e2e6?source=collection_archive---------8-----------------------#2023-05-26)
- en: Spend less time debugging your pipelines by using [Hamilton](https://github.com/dagworks-inc/hamilton)’s
    out of the box lineage capabilities.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过使用 [Hamilton](https://github.com/dagworks-inc/hamilton) 的开箱即用的Lineage功能，减少调试管道的时间。
- en: '[](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)[![Stefan
    Krawczyk](../Images/150405abaad9590e1dc2589168ed2fa3.png)](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)
    [Stefan Krawczyk](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)[![Stefan
    Krawczyk](../Images/150405abaad9590e1dc2589168ed2fa3.png)](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)
    [Stefan Krawczyk](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F193628e26f00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&user=Stefan+Krawczyk&userId=193628e26f00&source=post_page-193628e26f00----c2b8a944e2e6---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)
    ·11 min read·May 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc2b8a944e2e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&user=Stefan+Krawczyk&userId=193628e26f00&source=-----c2b8a944e2e6---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F193628e26f00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&user=Stefan+Krawczyk&userId=193628e26f00&source=post_page-193628e26f00----c2b8a944e2e6---------------------post_header-----------)
    发表在 [数据科学前沿](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)
    · 11 分钟阅读 · 2023年5月26日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc2b8a944e2e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&user=Stefan+Krawczyk&userId=193628e26f00&source=-----c2b8a944e2e6---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc2b8a944e2e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&source=-----c2b8a944e2e6---------------------bookmark_footer-----------)![](../Images/18b9188673f75ef0764b9b84979467c2.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc2b8a944e2e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&source=-----c2b8a944e2e6---------------------bookmark_footer-----------)![](../Images/18b9188673f75ef0764b9b84979467c2.png)'
- en: 'Hamilton + Lineage: Enabling you to visualize and understand how things connect.
    This was created using driver.visualize_path_between(). Image by author.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Hamilton + Lineage：使您能够可视化和理解事物之间的联系。这是通过driver.visualize_path_between()创建的。图像由作者提供。
- en: '[Hamilton](https://github.com/dagworks-inc/hamilton) is a general purpose open-source
    micro-framework for describing dataflows. It is great for data & Machine Learning
    (ML) work. In this post, we’re going to walk you through [Hamilton’s](https://github.com/dagworks-inc/hamilton)
    lineage capabilities that can help you quickly answer common questions that arise
    while working with data & ML, so that you can work more efficiently and collaborate
    more effectively with colleagues. If you’re not familiar with Hamilton we invite
    you to browse the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hamilton](https://github.com/dagworks-inc/hamilton) 是一个通用的开源微框架，用于描述数据流。它非常适用于数据和机器学习（ML）工作。在这篇文章中，我们将引导你了解
    [Hamilton](https://github.com/dagworks-inc/hamilton) 的血缘关系功能，这些功能可以帮助你快速回答在数据和机器学习工作中常见的问题，从而提高工作效率，更有效地与同事合作。如果你不熟悉
    Hamilton，我们邀请你浏览以下内容：'
- en: '[www.tryhamilton.dev](http://www.tryhamilton.dev) (interactive in the browser
    overview)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[www.tryhamilton.dev](http://www.tryhamilton.dev) （浏览器中的互动概述）'
- en: '[Introducing Hamilton](/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d)
    (backstory and introduction)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Introducing Hamilton](/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d)
    （背景故事和介绍）'
- en: '[Hamilton + Pandas in 5 minutes](/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Hamilton + Pandas in 5 minutes](/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5)'
- en: Github — [https://github.com/dagworks-inc/hamilton](https://github.com/dagworks-inc/hamilton)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Github — [https://github.com/dagworks-inc/hamilton](https://github.com/dagworks-inc/hamilton)
- en: Lineage
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 血缘关系
- en: What do I mean by lineage you may ask? In the context of machine learning and
    data work, “lineage” refers to the historical record or traceability of data as
    it is transformed and manipulated into things like tables, statistical models,
    etc. Lineage helps one to determine the provenance, quality, and reliability of
    “data”, as it aids in understanding how data has been transformed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，我所说的血缘关系是什么意思？在机器学习和数据工作中，“血缘关系”指的是数据在转化和处理成表格、统计模型等形式时的历史记录或可追溯性。血缘关系帮助确定“数据”的来源、质量和可靠性，因为它有助于理解数据如何被转化。
- en: Why you should care about lineage?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你为什么应该关注血缘关系？
- en: 'If you’re the author of what you have to manage, you probably have a fair idea
    how everything that you’ve written connects. **But**, for someone to inherit your
    work, or to bring on a collaborator, or having to debug something you wrote six
    months ago, **getting up to speed can be a challenge**! I’ve heard of teams taking
    over a quarter to understand work a colleague left behind (they’re obviously not
    using Hamilton)! In situations such as these, is where *lineage* can be a great
    help. To provide some more context, here are some common situations that result
    in lost productivity, general unhappiness, and even outages:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是你必须管理的内容的作者，你可能对你写的所有内容如何连接有一个大致的了解。**但**，对于继承你工作的其他人，或引入一个合作者，或者调试你六个月前写的东西，**迅速了解情况可能会是一个挑战**！我听说过有团队花费超过四分之一的时间来理解同事留下的工作（他们显然没有使用Hamilton）！在这种情况下，*血缘关系*可以提供很大的帮助。为了提供更多背景，以下是一些导致生产力损失、普遍不满甚至中断的常见情况：
- en: (a) debugging a data problem with your training set/model (that turned out to
    be an upstream data issue).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: (a) 调试你的训练集/模型中的数据问题（结果发现是上游数据问题）。
- en: (b) trying to determine how someone else’s pipeline works (because you inherited
    it, or have to collaborate with them).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: (b) 尝试确定他人的管道如何工作（因为你继承了它，或必须与他们合作）。
- en: (c) having to fulfill an auditing requirement on how some data got somewhere
    (e.g. GDPR, data usage policies, etc.).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: (c) 需要满足某些数据如何到达某处的审计要求（例如 GDPR、数据使用政策等）。
- en: (d) wanting to make a change to a feature/column, but not having a good way
    to assess potential impacts (e.g. the business changed and so did data collected).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: (d) 想要对一个功能/列进行更改，但没有好的方法来评估潜在影响（例如，业务发生了变化，收集的数据也发生了变化）。
- en: Practically speaking, most people working in data and machine learning don’t
    encounter or understand the value of having “lineage” because more often than
    not, it’s a headache to do well. Usually an external system is needed (e.g. [open
    lineage](https://openlineage.io/), [Amundsen](https://www.amundsen.io/), [Datahub](https://datahub.io/),
    etc), which then needs users to do extra work to populate it with information.
    The good news is, if you use Hamilton, there isn’t the need for another system
    to get lineage; making use of lineage is straightforward too!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际角度来看，大多数从事数据和机器学习的人不会遇到或理解“血统”的价值，因为往往做到这一点很麻烦。通常需要一个外部系统（如 [open lineage](https://openlineage.io/)、[Amundsen](https://www.amundsen.io/)、[Datahub](https://datahub.io/)
    等），然后用户需要额外工作以填充信息。好消息是，如果你使用 Hamilton，不需要另一个系统来获取血统；使用血统也很直接！
- en: '**Lineage as Code**'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**血统即代码**'
- en: W*ith Hamilton, you do not need to add anything else, and you get lineage.*
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*使用 Hamilton，你不需要添加任何其他内容，你就可以获得血统。*'
- en: '![](../Images/7f3aaa34a9ff82b39fc82fd81e3932a9.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f3aaa34a9ff82b39fc82fd81e3932a9.png)'
- en: Write code. Get lineage like this. This was created using the Hamilton Driver’s
    visualize_execution() function. Image by author.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码。获取类似这样的血统。这是使用 Hamilton Driver 的 visualize_execution() 函数创建的。图片由作者提供。
- en: By virtue of writing code in the Hamiltonian way, you are defining computation
    within functions, and then specifying via function input arguments, how things
    connect, encoding lineage. Taking this code and connecting with e.g. a version
    control system (e.g. [git](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)),
    then also provides you with the means to snapshot lineage at points in time! Because
    you have to update code to change how computation operates, you, by definition,
    then update lineage without you having to do anything 😎.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以 Hamilton 方式编写代码，你在函数中定义了计算，然后通过函数输入参数指定事物如何连接，编码血统。将此代码与例如版本控制系统（如 [git](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)）连接起来，也为你提供了在时间点快照血统的手段！因为你必须更新代码以更改计算操作方式，因此，按定义，你也更新了血统，而无需做任何额外的操作
    😎。
- en: '![](../Images/067e1140bf8a39c935158394428e1116.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/067e1140bf8a39c935158394428e1116.png)'
- en: Overview of the Hamilton paradigm. Instead of procedural code you write functions,
    that define how computation should proceed. Defining functions in this way maps
    exactly to lineage!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Hamilton 范式概述。你编写的函数定义了计算应如何进行，而不是编写过程性代码。以这种方式定义函数完全映射到血统！
- en: 'At a high level the recipe for ‘Lineage as Code’ and then subsequently accessing
    it is:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 高层次的“血统即代码”及其后续访问的步骤是：
- en: Write Hamilton code & version it.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 Hamilton 代码并进行版本控制。
- en: Instantiate a Hamilton Driver, it’ll then have a representation of how data
    and compute flow as defined by your Hamilton code. The Driver object can then
    emit/provide information on lineage!
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个 Hamilton Driver，它将会有一个表示数据和计算流动的方式，正如你的 Hamilton 代码所定义的。Driver 对象可以发出/提供关于血统的信息！
- en: Using your version control system, you can then go back in time to understand
    how lineage changes over time, since it’s encoded in code!
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的版本控制系统，你可以回溯到过去，以理解血统如何随着时间的推移而变化，因为它被编码在代码中！
- en: Adding metadata to make lineage more useful!
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加元数据以使血统更加有用！
- en: Lineage gets more useful, when you can also attach metadata to it. Hamilton
    by default enables you to express how things connect, but by attaching extra metadata,
    we can now connect business and company concepts via the lineage you have encoded
    with Hamilton.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你还可以将元数据附加到血统上时，血统会变得更加有用。Hamilton 默认使你能够表达事物如何连接，但通过附加额外的元数据，我们现在可以通过 Hamilton
    编码的血统连接业务和公司概念。
- en: For example, you can annotate functions that pull data with concerns such as
    [PII](https://en.wikipedia.org/wiki/Personal_data), ownership, importance, etc.,
    and annotate functions that create important artifacts, e.g. models, data sets,
    with similar information. With these functions now annotated, the set of questions
    lineage can answer is now much greater! Other systems, in contrast, require you
    to put this metadata somewhere else; a YAML file, a different part of the code
    base, or separately curate this information in some other place. Philosophically
    with Hamilton, *we believe it makes the most sense* to annotate the actual code
    directly, since that ensures that the source of truth of code & metadata is always
    up to date. With Hamilton, it’s easier to maintain both since there’s only a single
    place needed to make a change.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以为提取数据的函数添加关切点，如[PII](https://en.wikipedia.org/wiki/Personal_data)、所有权、重要性等，并为创建重要文物的函数（如模型、数据集）添加类似信息。现在这些函数已被注解，能够回答的问题集就大大增加了！相比之下，其他系统要求你将这些元数据放在其他地方；例如一个
    YAML 文件、代码库的不同部分，或在其他地方单独整理这些信息。在 Hamilton 的哲学中，*我们认为直接注解实际代码最为合理*，因为这样可以确保代码和元数据的真实来源始终保持最新。使用
    Hamilton 更容易维护，因为只需在一个地方进行更改。
- en: In Hamilton, the way to add extra metadata is through the use of the `[@tag](https://hamilton.dagworks.io/en/latest/reference/decorators/tag/#hamilton.function_modifiers.tag)`
    and `[@tag_outputs](https://hamilton.dagworks.io/en/latest/reference/decorators/tag/#hamilton.function_modifiers.tag)`
    decorators. They allow one to specify arbitrary string key-value pairs. This provides
    flexibility and the ability for you and your organization to define tags and values
    that make sense for your context.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hamilton 中，添加额外元数据的方法是通过使用 `[@tag](https://hamilton.dagworks.io/en/latest/reference/decorators/tag/#hamilton.function_modifiers.tag)`
    和 `[@tag_outputs](https://hamilton.dagworks.io/en/latest/reference/decorators/tag/#hamilton.function_modifiers.tag)`
    装饰器。它们允许指定任意的字符串键值对。这提供了灵活性，使你和你的组织能够定义适合你们上下文的标签和值。
- en: 'For example, the following code adds a bunch of metadata to:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码为：
- en: The `titanic_data` function specifying its `source`, an `owner`, `importance`,
    contains PII, and links to some internal wiki.
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`titanic_data` 函数指定了其 `source`、`owner`、`importance`，包含 PII，并链接到一些内部维基。'
- en: The `age` and `sex` columns, specifying that they are PII.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`age` 和 `sex` 列添加了大量元数据，指定它们是 PII。'
- en: 'Note: I’m showing a slightly more complex example with multiple decorators
    just to show that things don’t get more complex than this — the code is still
    quite readable!'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我展示了一个稍微复杂的示例，使用了多个装饰器，只是为了说明情况不会比这更复杂——代码仍然相当易读！
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'While the following code helps provide more context from a business perspective
    on the model being created:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码从业务角度提供有关正在创建的模型的更多上下文：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this extra metadata now attached to functions and therefore lineage, we
    can use that as context to ask more useful questions. More on that below.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些额外的元数据附加到函数和血缘上，我们可以将其作为上下文来提出更有用的问题。更多内容见下文。
- en: How to answer lineage questions with Hamilton
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Hamilton 回答血缘问题
- en: The basic mechanics of answering lineage questions relies on instantiating a
    [Hamilton Driver](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#driver),
    which under the hood creates a directed acyclic graph (DAG) to represent its view
    of the world, and then using the functions the Driver has. Let’s list the relevant
    Driver functions and what they do.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回答血缘问题的基本机制依赖于实例化一个 [Hamilton Driver](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#driver)，该
    Driver 在底层创建一个有向无环图 (DAG) 来表示其世界观，然后使用 Driver 拥有的函数。让我们列出相关的 Driver 函数及其功能。
- en: '**Visualizing lineage** (i.e. displaying the DAG):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**可视化血缘**（即显示 DAG）：'
- en: '[display_*()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.display_all_functions)
    there are three **display_*** functions. One that helps you display how everything
    defined connects. Then a function to only visualize what’s upstream, and then
    one to visualize what is downstream of a given function/node.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[display_*()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.display_all_functions)
    有三个 **display_*** 函数。一个帮助你显示定义的所有连接关系。然后一个函数用于仅可视化上游内容，最后一个函数可视化给定函数/节点的下游内容。'
- en: '[visualize_execution()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.visualize_execution)
    which helps visualize everything that is required to produce some outputs. Useful
    for displaying what `.execute()` does.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[visualize_execution()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.visualize_execution)
    帮助可视化生成某些输出所需的一切。用于展示 `.execute()` 的作用。'
- en: '[visualize_path_between()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.visualize_path_between)
    which helps visualize a path between two nodes.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[visualize_path_between()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.visualize_path_between)
    帮助可视化两个节点之间的路径。'
- en: '**Getting access to metadata for lineage needs:**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取谱系需求的元数据访问权限：**'
- en: '[list_available_variables()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.list_available_variables)
    Enables one to get all the “functions/nodes” and access to their tags.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[list_available_variables()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.list_available_variables)
    使用户能够获取所有“函数/节点”及其标签。'
- en: '[what_is_downstream_of()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_downstream_of)
    Enables one to get all the “functions/nodes” that are downstream of the one specified.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[what_is_downstream_of()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_downstream_of)
    使用户能够获取指定节点下游的所有“函数/节点”。'
- en: '[what_is_upstream_of()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_upstream_of)
    Enables one to get all the “functions/nodes” that are upstream of the one specified.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[what_is_upstream_of()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_upstream_of)
    使用户能够获取指定节点上游的所有“函数/节点”。'
- en: '[what_is_the_path_between()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_the_path_between)
    Enables one to get all the “functions/nodes” that comprise the path between two
    specified “functions/nodes”.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[what_is_the_path_between()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_the_path_between)
    使用户能够获取两个指定“函数/节点”之间路径的所有“函数/节点”。'
- en: With Hamilton, using the functions above, you get programmatic access to lineage
    as well as visualizing it, which means that you can ask these questions in your
    CI systems, or in a notebook that uses the code that’s running in production,
    or anywhere that python runs!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Hamilton 和上述函数，你可以对谱系进行编程访问以及可视化，这意味着你可以在 CI 系统中、在运行生产代码的笔记本中，或在任何 Python
    运行的地方提出这些问题！
- en: 'To recap what we’ve talked about thus far, the general recipe to answer lineage
    questions is therefore as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下到目前为止讨论的内容，回答谱系问题的一般方法如下：
- en: Write Hamilton code.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 Hamilton 代码。
- en: Use `@tag` to annotate functions.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `@tag` 来注释函数。
- en: Instantiate a Driver that creates your DAG.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个 Driver 来创建你的 DAG。
- en: Use the Driver functions to ask/answer questions.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Driver 函数来提问/回答问题。
- en: 'To keep this post short, we won’t do an extensive deep dive into their use,
    we’ll just surface some general questions that you can answer in a straightforward
    manner with Hamilton, with some examples using the functions above. The toy problem
    we’ll be using is an end-to-end model pipeline in Hamilton that builds a model
    to predict Titanic survival; the code and more information can be found in the
    [Hamilton repository’s Lineage example](https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/lineage).
    Terminology side note: we use `function` and `node` interchangeably, since in
    Hamilton a `function` becomes a `node` in our visualizations.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简短起见，我们不会深入探讨它们的使用，我们将简单展示一些你可以用 Hamilton 直接回答的一般问题，并结合上面提到的函数举例。我们将使用的示例问题是一个
    Hamilton 中的端到端模型管道，用于预测泰坦尼克号的生存率；代码和更多信息可以在 [Hamilton 仓库的谱系示例](https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/lineage)
    中找到。术语说明：我们将 `function` 和 `node` 互换使用，因为在 Hamilton 中，`function` 在我们的可视化中会变成 `node`。
- en: (1) What sequence of operations produced this data/model?
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (1) 生成这个数据/模型的操作序列是什么？
- en: This is a common question to ask, how do we get from **A->B**, where **A** can
    be some data, `**->**` is opaque to us, and **B** can be some artifact (either
    more data or a model/object).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个常见的问题，如何从**A->B**，其中**A**可以是某些数据，`**->**` 对我们来说是不透明的，**B** 可以是某个工件（可以是更多数据或模型/对象）。
- en: 'With Hamilton, by virtue of writing code in the style prescribed by Hamilton,
    you clearly and easily define the sequence of operations of what should happen
    and how it relates! So if you can’t answer the question by looking at the code
    itself, you can ask Hamilton for help. In the context of our example, to understand
    how say the `feature_encoders` are created, without knowing much about them at
    all, we can ask the Hamilton Driver to visualize how they’re created for us:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 借助Hamilton，通过以Hamilton规定的风格编写代码，您可以清晰而轻松地定义操作的顺序以及它们之间的关系！所以如果您不能通过查看代码本身来回答这个问题，可以请Hamilton提供帮助。在我们的示例中，为了了解`feature_encoders`是如何创建的，即使对它们知之甚少，我们也可以请求Hamilton
    Driver为我们可视化它们的创建过程：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Which outputs:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果：
- en: '![](../Images/0e15e0f01d25dfbcbef5c52f3568aef0.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e15e0f01d25dfbcbef5c52f3568aef0.png)'
- en: Example lineage visualization. Image by author.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例血缘可视化。图像由作者提供。
- en: You can then pair this with walking through your code base to more easily navigate
    and understand what is going on.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将其与浏览代码库相结合，以更轻松地导航和理解发生了什么。
- en: '**(2) Whose/What data sources led to this artifact/model?**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**(2) 谁/哪些数据源导致了这个工件/模型？**'
- en: 'This is useful for debugging data issues, as well as understanding what teams
    and data sources an artifact/model depends on. For our Titanic example, say there
    is something funky with our Random Forest model and we want to double check, for
    the current production model, what the data sources are and who owns them so we
    can go ping them. To determine this, we can write the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于调试数据问题以及理解一个工件/模型依赖于哪些团队和数据源非常有用。以我们的泰坦尼克号示例为例，假设我们的随机森林模型出现了一些异常，我们想要重新检查当前生产模型的数据源是什么以及它们的所有者，以便我们可以联系他们。为此，我们可以编写以下代码：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The above two lines create a Driver, and then pull all upstream nodes of `fit_random_forest`
    . Then we can iterate through the nodes and pull the information we want:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两行创建了一个Driver，然后提取`fit_random_forest`的所有上游节点。然后我们可以遍历这些节点并提取我们想要的信息：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (3) Who/What is downstream of this transform?
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (3) 谁/什么在这个变换的下游？
- en: Answering this question is effectively the complement of (2). You commonly encounter
    it when someone wants to make a change to a feature, or a data source. Using our
    Titanic example, say we’re on data engineering and want to change the source data.
    How could we determine what the artifacts that use this data are and who owns
    them?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 回答这个问题实际上是(2)的补充。当有人想要更改特征或数据源时，您通常会遇到这个问题。以我们的泰坦尼克号示例为例，假设我们在数据工程部门，想要更改源数据。我们如何确定使用这些数据的工件是什么以及谁拥有它们？
- en: 'We use the `what_is_downstream_of()` Driver function to get nodes that are
    downstream:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`what_is_downstream_of()` Driver函数来获取下游的节点：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then analogously like in (2), we just loop through and pull out the information
    we want:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后类似于(2)，我们只需遍历并提取我们想要的信息：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: (4) What is defined as PII data, and what does it end up in?
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (4) 什么被定义为PII数据，它最终会出现在哪些内容中？
- en: With regulations these days, this is becoming a more common question that needs
    to be answered. Building off of the above, we can combine a few Driver functions
    to answer this type of question.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 随着目前的法规，这成为了一个越来越常见的问题。基于上述内容，我们可以结合几个Driver函数来回答这类问题。
- en: 'In the context of our Titanic example, let’s say our compliance team has come
    to us to understand how we’re using PII data, i.e. what artifacts does it end
    up in? They want this report every month. Well, with Hamilton we can write a script
    to programmatically get lineage information related to PII data. To start we need
    to get everything marked PII:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的泰坦尼克号示例中，假设我们的合规团队来找我们了解我们如何使用PII数据，即它最终会出现在哪些工件中？他们希望每个月都能收到这份报告。好吧，借助Hamilton，我们可以编写脚本以程序化地获取与PII数据相关的血缘信息。首先，我们需要获取所有标记为PII的内容：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then to get all artifacts that are downstream, we just need to ask for all
    nodes that are downstream, and then filter to ones with the “artifact” tag:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要获取所有下游的工件，我们只需请求所有下游的节点，然后筛选出带有“artifact”标签的节点：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Can I get this in my notebook/IDE?
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我可以在我的笔记本/IDE中获得这个吗？
- en: Some of you might be thinking why not have this type of lineage view as you
    develop? Great idea! Since we’re an open source project we’d love some help here;
    if you’re interested in testing/contributing, we have an *alpha* version of a
    [VSCode extension](https://marketplace.visualstudio.com/items?itemName=ThierryJean.hamilton&ssr=false#overview),
    started by Thierry Jean, that can help you visualize lineage as you type. We’d
    love contributions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbb5be1f6fb6e320fed0d33a917f4e74.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: Alpha Hamilton VSCode extension started by Thierry Jean. Image by author.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: To finish
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Hamilton, **your code defines lineage**. This means you get lineage out
    of the box without the need for another system, and when coupled with a version
    control system and extra metadata, a very straightforward and lightweight means
    to understand how data & code connect.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Hamilton enables programmatic access to the lineage and metadata you encode,
    which enables you to place this in CI jobs, scripts, or anywhere that python runs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope you enjoyed this quick overview, and if you’re excited by any of this
    or want more resources, here are some links:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 📣 [join our community on slack](https://join.slack.com/t/hamilton-opensource/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg)
    — we’re more than happy to help answer questions you might have or get you started.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ⭐️ us [on github](https://github.com/DAGWorks-Inc/hamilton/).
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 📝 leave us [an issue](https://github.com/DAGWorks-Inc/hamilton/issues) if you
    find something.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 📚 browse our [documentation](https://hamilton.dagworks.io/). E.g. see [lineage
    section](https://hamilton.dagworks.io/en/latest/how-tos/use-hamilton-for-lineage/).
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ▶️ [learn Hamilton](http://www.tryhamilton.dev) with a tutorial directly in
    your browser .
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other Hamilton posts you might be interested in:'
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[How to use Hamilton with Pandas in 5 Minutes](/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to use Hamilton with Ray in 5 minutes](/scaling-hamilton-with-ray-in-5-minutes-3beb1755fc09)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to use Hamilton in a Notebook environment](/how-to-iterate-with-hamilton-in-a-notebook-8ec0f85851ed)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[General backstory & introduction on Hamilton](/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Developing scalable feature engineering DAGs](https://outerbounds.com/blog/developing-scalable-feature-engineering-dags)
    (Hamilton with Metaflow)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The perks of creating dataflows with Hamilton](https://medium.com/@thijean/the-perks-of-creating-dataflows-with-hamilton-36e8c56dd2a)
    (Organic user post on Hamilton!)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
