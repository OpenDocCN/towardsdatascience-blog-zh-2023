- en: Lineage + Hamilton in 10 minutes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/lineage-hamilton-in-10-minutes-c2b8a944e2e6?source=collection_archive---------8-----------------------#2023-05-26](https://towardsdatascience.com/lineage-hamilton-in-10-minutes-c2b8a944e2e6?source=collection_archive---------8-----------------------#2023-05-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spend less time debugging your pipelines by using [Hamilton](https://github.com/dagworks-inc/hamilton)‚Äôs
    out of the box lineage capabilities.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)[![Stefan
    Krawczyk](../Images/150405abaad9590e1dc2589168ed2fa3.png)](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)
    [Stefan Krawczyk](https://medium.com/@stefan.krawczyk?source=post_page-----c2b8a944e2e6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F193628e26f00&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&user=Stefan+Krawczyk&userId=193628e26f00&source=post_page-193628e26f00----c2b8a944e2e6---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c2b8a944e2e6--------------------------------)
    ¬∑11 min read¬∑May 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc2b8a944e2e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&user=Stefan+Krawczyk&userId=193628e26f00&source=-----c2b8a944e2e6---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc2b8a944e2e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flineage-hamilton-in-10-minutes-c2b8a944e2e6&source=-----c2b8a944e2e6---------------------bookmark_footer-----------)![](../Images/18b9188673f75ef0764b9b84979467c2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hamilton + Lineage: Enabling you to visualize and understand how things connect.
    This was created using driver.visualize_path_between(). Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Hamilton](https://github.com/dagworks-inc/hamilton) is a general purpose open-source
    micro-framework for describing dataflows. It is great for data & Machine Learning
    (ML) work. In this post, we‚Äôre going to walk you through [Hamilton‚Äôs](https://github.com/dagworks-inc/hamilton)
    lineage capabilities that can help you quickly answer common questions that arise
    while working with data & ML, so that you can work more efficiently and collaborate
    more effectively with colleagues. If you‚Äôre not familiar with Hamilton we invite
    you to browse the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.tryhamilton.dev](http://www.tryhamilton.dev) (interactive in the browser
    overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introducing Hamilton](/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d)
    (backstory and introduction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hamilton + Pandas in 5 minutes](/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Github ‚Äî [https://github.com/dagworks-inc/hamilton](https://github.com/dagworks-inc/hamilton)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lineage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What do I mean by lineage you may ask? In the context of machine learning and
    data work, ‚Äúlineage‚Äù refers to the historical record or traceability of data as
    it is transformed and manipulated into things like tables, statistical models,
    etc. Lineage helps one to determine the provenance, quality, and reliability of
    ‚Äúdata‚Äù, as it aids in understanding how data has been transformed.
  prefs: []
  type: TYPE_NORMAL
- en: Why you should care about lineage?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you‚Äôre the author of what you have to manage, you probably have a fair idea
    how everything that you‚Äôve written connects. **But**, for someone to inherit your
    work, or to bring on a collaborator, or having to debug something you wrote six
    months ago, **getting up to speed can be a challenge**! I‚Äôve heard of teams taking
    over a quarter to understand work a colleague left behind (they‚Äôre obviously not
    using Hamilton)! In situations such as these, is where *lineage* can be a great
    help. To provide some more context, here are some common situations that result
    in lost productivity, general unhappiness, and even outages:'
  prefs: []
  type: TYPE_NORMAL
- en: (a) debugging a data problem with your training set/model (that turned out to
    be an upstream data issue).
  prefs: []
  type: TYPE_NORMAL
- en: (b) trying to determine how someone else‚Äôs pipeline works (because you inherited
    it, or have to collaborate with them).
  prefs: []
  type: TYPE_NORMAL
- en: (c) having to fulfill an auditing requirement on how some data got somewhere
    (e.g. GDPR, data usage policies, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: (d) wanting to make a change to a feature/column, but not having a good way
    to assess potential impacts (e.g. the business changed and so did data collected).
  prefs: []
  type: TYPE_NORMAL
- en: Practically speaking, most people working in data and machine learning don‚Äôt
    encounter or understand the value of having ‚Äúlineage‚Äù because more often than
    not, it‚Äôs a headache to do well. Usually an external system is needed (e.g. [open
    lineage](https://openlineage.io/), [Amundsen](https://www.amundsen.io/), [Datahub](https://datahub.io/),
    etc), which then needs users to do extra work to populate it with information.
    The good news is, if you use Hamilton, there isn‚Äôt the need for another system
    to get lineage; making use of lineage is straightforward too!
  prefs: []
  type: TYPE_NORMAL
- en: '**Lineage as Code**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: W*ith Hamilton, you do not need to add anything else, and you get lineage.*
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/7f3aaa34a9ff82b39fc82fd81e3932a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Write code. Get lineage like this. This was created using the Hamilton Driver‚Äôs
    visualize_execution() function. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: By virtue of writing code in the Hamiltonian way, you are defining computation
    within functions, and then specifying via function input arguments, how things
    connect, encoding lineage. Taking this code and connecting with e.g. a version
    control system (e.g. [git](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)),
    then also provides you with the means to snapshot lineage at points in time! Because
    you have to update code to change how computation operates, you, by definition,
    then update lineage without you having to do anything üòé.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/067e1140bf8a39c935158394428e1116.png)'
  prefs: []
  type: TYPE_IMG
- en: Overview of the Hamilton paradigm. Instead of procedural code you write functions,
    that define how computation should proceed. Defining functions in this way maps
    exactly to lineage!
  prefs: []
  type: TYPE_NORMAL
- en: 'At a high level the recipe for ‚ÄòLineage as Code‚Äô and then subsequently accessing
    it is:'
  prefs: []
  type: TYPE_NORMAL
- en: Write Hamilton code & version it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate a Hamilton Driver, it‚Äôll then have a representation of how data
    and compute flow as defined by your Hamilton code. The Driver object can then
    emit/provide information on lineage!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using your version control system, you can then go back in time to understand
    how lineage changes over time, since it‚Äôs encoded in code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding metadata to make lineage more useful!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lineage gets more useful, when you can also attach metadata to it. Hamilton
    by default enables you to express how things connect, but by attaching extra metadata,
    we can now connect business and company concepts via the lineage you have encoded
    with Hamilton.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can annotate functions that pull data with concerns such as
    [PII](https://en.wikipedia.org/wiki/Personal_data), ownership, importance, etc.,
    and annotate functions that create important artifacts, e.g. models, data sets,
    with similar information. With these functions now annotated, the set of questions
    lineage can answer is now much greater! Other systems, in contrast, require you
    to put this metadata somewhere else; a YAML file, a different part of the code
    base, or separately curate this information in some other place. Philosophically
    with Hamilton, *we believe it makes the most sense* to annotate the actual code
    directly, since that ensures that the source of truth of code & metadata is always
    up to date. With Hamilton, it‚Äôs easier to maintain both since there‚Äôs only a single
    place needed to make a change.
  prefs: []
  type: TYPE_NORMAL
- en: In Hamilton, the way to add extra metadata is through the use of the `[@tag](https://hamilton.dagworks.io/en/latest/reference/decorators/tag/#hamilton.function_modifiers.tag)`
    and `[@tag_outputs](https://hamilton.dagworks.io/en/latest/reference/decorators/tag/#hamilton.function_modifiers.tag)`
    decorators. They allow one to specify arbitrary string key-value pairs. This provides
    flexibility and the ability for you and your organization to define tags and values
    that make sense for your context.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code adds a bunch of metadata to:'
  prefs: []
  type: TYPE_NORMAL
- en: The `titanic_data` function specifying its `source`, an `owner`, `importance`,
    contains PII, and links to some internal wiki.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `age` and `sex` columns, specifying that they are PII.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note: I‚Äôm showing a slightly more complex example with multiple decorators
    just to show that things don‚Äôt get more complex than this ‚Äî the code is still
    quite readable!'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'While the following code helps provide more context from a business perspective
    on the model being created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With this extra metadata now attached to functions and therefore lineage, we
    can use that as context to ask more useful questions. More on that below.
  prefs: []
  type: TYPE_NORMAL
- en: How to answer lineage questions with Hamilton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic mechanics of answering lineage questions relies on instantiating a
    [Hamilton Driver](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#driver),
    which under the hood creates a directed acyclic graph (DAG) to represent its view
    of the world, and then using the functions the Driver has. Let‚Äôs list the relevant
    Driver functions and what they do.
  prefs: []
  type: TYPE_NORMAL
- en: '**Visualizing lineage** (i.e. displaying the DAG):'
  prefs: []
  type: TYPE_NORMAL
- en: '[display_*()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.display_all_functions)
    there are three **display_*** functions. One that helps you display how everything
    defined connects. Then a function to only visualize what‚Äôs upstream, and then
    one to visualize what is downstream of a given function/node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[visualize_execution()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.visualize_execution)
    which helps visualize everything that is required to produce some outputs. Useful
    for displaying what `.execute()` does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[visualize_path_between()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.visualize_path_between)
    which helps visualize a path between two nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Getting access to metadata for lineage needs:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[list_available_variables()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.list_available_variables)
    Enables one to get all the ‚Äúfunctions/nodes‚Äù and access to their tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[what_is_downstream_of()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_downstream_of)
    Enables one to get all the ‚Äúfunctions/nodes‚Äù that are downstream of the one specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[what_is_upstream_of()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_upstream_of)
    Enables one to get all the ‚Äúfunctions/nodes‚Äù that are upstream of the one specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[what_is_the_path_between()](https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.what_is_the_path_between)
    Enables one to get all the ‚Äúfunctions/nodes‚Äù that comprise the path between two
    specified ‚Äúfunctions/nodes‚Äù.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Hamilton, using the functions above, you get programmatic access to lineage
    as well as visualizing it, which means that you can ask these questions in your
    CI systems, or in a notebook that uses the code that‚Äôs running in production,
    or anywhere that python runs!
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap what we‚Äôve talked about thus far, the general recipe to answer lineage
    questions is therefore as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Write Hamilton code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `@tag` to annotate functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate a Driver that creates your DAG.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Driver functions to ask/answer questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To keep this post short, we won‚Äôt do an extensive deep dive into their use,
    we‚Äôll just surface some general questions that you can answer in a straightforward
    manner with Hamilton, with some examples using the functions above. The toy problem
    we‚Äôll be using is an end-to-end model pipeline in Hamilton that builds a model
    to predict Titanic survival; the code and more information can be found in the
    [Hamilton repository‚Äôs Lineage example](https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/lineage).
    Terminology side note: we use `function` and `node` interchangeably, since in
    Hamilton a `function` becomes a `node` in our visualizations.'
  prefs: []
  type: TYPE_NORMAL
- en: (1) What sequence of operations produced this data/model?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a common question to ask, how do we get from **A->B**, where **A** can
    be some data, `**->**` is opaque to us, and **B** can be some artifact (either
    more data or a model/object).
  prefs: []
  type: TYPE_NORMAL
- en: 'With Hamilton, by virtue of writing code in the style prescribed by Hamilton,
    you clearly and easily define the sequence of operations of what should happen
    and how it relates! So if you can‚Äôt answer the question by looking at the code
    itself, you can ask Hamilton for help. In the context of our example, to understand
    how say the `feature_encoders` are created, without knowing much about them at
    all, we can ask the Hamilton Driver to visualize how they‚Äôre created for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Which outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e15e0f01d25dfbcbef5c52f3568aef0.png)'
  prefs: []
  type: TYPE_IMG
- en: Example lineage visualization. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: You can then pair this with walking through your code base to more easily navigate
    and understand what is going on.
  prefs: []
  type: TYPE_NORMAL
- en: '**(2) Whose/What data sources led to this artifact/model?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is useful for debugging data issues, as well as understanding what teams
    and data sources an artifact/model depends on. For our Titanic example, say there
    is something funky with our Random Forest model and we want to double check, for
    the current production model, what the data sources are and who owns them so we
    can go ping them. To determine this, we can write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The above two lines create a Driver, and then pull all upstream nodes of `fit_random_forest`
    . Then we can iterate through the nodes and pull the information we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: (3) Who/What is downstream of this transform?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Answering this question is effectively the complement of (2). You commonly encounter
    it when someone wants to make a change to a feature, or a data source. Using our
    Titanic example, say we‚Äôre on data engineering and want to change the source data.
    How could we determine what the artifacts that use this data are and who owns
    them?
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the `what_is_downstream_of()` Driver function to get nodes that are
    downstream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then analogously like in (2), we just loop through and pull out the information
    we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: (4) What is defined as PII data, and what does it end up in?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With regulations these days, this is becoming a more common question that needs
    to be answered. Building off of the above, we can combine a few Driver functions
    to answer this type of question.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the context of our Titanic example, let‚Äôs say our compliance team has come
    to us to understand how we‚Äôre using PII data, i.e. what artifacts does it end
    up in? They want this report every month. Well, with Hamilton we can write a script
    to programmatically get lineage information related to PII data. To start we need
    to get everything marked PII:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then to get all artifacts that are downstream, we just need to ask for all
    nodes that are downstream, and then filter to ones with the ‚Äúartifact‚Äù tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Can I get this in my notebook/IDE?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of you might be thinking why not have this type of lineage view as you
    develop? Great idea! Since we‚Äôre an open source project we‚Äôd love some help here;
    if you‚Äôre interested in testing/contributing, we have an *alpha* version of a
    [VSCode extension](https://marketplace.visualstudio.com/items?itemName=ThierryJean.hamilton&ssr=false#overview),
    started by Thierry Jean, that can help you visualize lineage as you type. We‚Äôd
    love contributions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbb5be1f6fb6e320fed0d33a917f4e74.png)'
  prefs: []
  type: TYPE_IMG
- en: Alpha Hamilton VSCode extension started by Thierry Jean. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: To finish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Hamilton, **your code defines lineage**. This means you get lineage out
    of the box without the need for another system, and when coupled with a version
    control system and extra metadata, a very straightforward and lightweight means
    to understand how data & code connect.
  prefs: []
  type: TYPE_NORMAL
- en: Hamilton enables programmatic access to the lineage and metadata you encode,
    which enables you to place this in CI jobs, scripts, or anywhere that python runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope you enjoyed this quick overview, and if you‚Äôre excited by any of this
    or want more resources, here are some links:'
  prefs: []
  type: TYPE_NORMAL
- en: üì£ [join our community on slack](https://join.slack.com/t/hamilton-opensource/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg)
    ‚Äî we‚Äôre more than happy to help answer questions you might have or get you started.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‚≠êÔ∏è us [on github](https://github.com/DAGWorks-Inc/hamilton/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: üìù leave us [an issue](https://github.com/DAGWorks-Inc/hamilton/issues) if you
    find something.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: üìö browse our [documentation](https://hamilton.dagworks.io/). E.g. see [lineage
    section](https://hamilton.dagworks.io/en/latest/how-tos/use-hamilton-for-lineage/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‚ñ∂Ô∏è [learn Hamilton](http://www.tryhamilton.dev) with a tutorial directly in
    your browser .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other Hamilton posts you might be interested in:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[How to use Hamilton with Pandas in 5 Minutes](/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to use Hamilton with Ray in 5 minutes](/scaling-hamilton-with-ray-in-5-minutes-3beb1755fc09)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to use Hamilton in a Notebook environment](/how-to-iterate-with-hamilton-in-a-notebook-8ec0f85851ed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[General backstory & introduction on Hamilton](/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Developing scalable feature engineering DAGs](https://outerbounds.com/blog/developing-scalable-feature-engineering-dags)
    (Hamilton with Metaflow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The perks of creating dataflows with Hamilton](https://medium.com/@thijean/the-perks-of-creating-dataflows-with-hamilton-36e8c56dd2a)
    (Organic user post on Hamilton!)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
