- en: Multi-Stage Approach to Building Recommender Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/multi-stage-approach-to-building-recommender-systems-71a31e58ecb4?source=collection_archive---------4-----------------------#2023-01-01](https://towardsdatascience.com/multi-stage-approach-to-building-recommender-systems-71a31e58ecb4?source=collection_archive---------4-----------------------#2023-01-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Discover state-of-the-art approaches to building RecSys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://natworkeffects.medium.com/?source=post_page-----71a31e58ecb4--------------------------------)[![Nathan
    Cheng](../Images/d7477ae4d208a039ab75e402e1abe3ce.png)](https://natworkeffects.medium.com/?source=post_page-----71a31e58ecb4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----71a31e58ecb4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----71a31e58ecb4--------------------------------)
    [Nathan Cheng](https://natworkeffects.medium.com/?source=post_page-----71a31e58ecb4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9dbd159f0e0a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmulti-stage-approach-to-building-recommender-systems-71a31e58ecb4&user=Nathan+Cheng&userId=9dbd159f0e0a&source=post_page-9dbd159f0e0a----71a31e58ecb4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----71a31e58ecb4--------------------------------)
    ·9 min read·Jan 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F71a31e58ecb4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmulti-stage-approach-to-building-recommender-systems-71a31e58ecb4&user=Nathan+Cheng&userId=9dbd159f0e0a&source=-----71a31e58ecb4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F71a31e58ecb4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmulti-stage-approach-to-building-recommender-systems-71a31e58ecb4&source=-----71a31e58ecb4---------------------bookmark_footer-----------)![](../Images/156c54eb9b049f036faff64f3704ec2a.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Multi-stage Recommender System. Image by [author](https://natworkeffects.medium.com).
  prefs: []
  type: TYPE_NORMAL
- en: 1 Problem of Information Overload
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: All of us are no stranger to search engines and recommender systems. Without
    them, we would get overwhelmed with the sheer amount of information being created
    every second. This information could take different data formats —***text***,
    ***images***, ***audio***, ***video*** etc.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentally, these systems can, given a large catalog of information, surface,
    filter and rank the relevant items based on the user’s query or profile, enabling
    us to navigate a sea of items, where otherwise users would struggle with information
    overload.
  prefs: []
  type: TYPE_NORMAL
- en: As the title of this post has already mentioned, we will focus on recommender
    systems in this article. I might cover system design for search in a separate
    article in the future, stay tuned.
  prefs: []
  type: TYPE_NORMAL
- en: 2 Industry Use Cases for RecSys
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you need a recommender?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be fair, 80% of companies will not have the requirement to build a sophisticated
    recommender system. For small catalogs with a small number of product categories,
    you can get by just fine using dynamic SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: If you wanted to build for example, a **“Similar Items to…”** or **“You might
    also like…”** panel on the item description page, you would write a SQL query
    that retrieved the `top xx items` for the current `category` of item.
  prefs: []
  type: TYPE_NORMAL
- en: The same applies if you wanted to build a **“Recommended for you…”** panel on
    the home page of your website or list of recommended items to be sent in a marketing
    email. Simply retrieve the top item category the user has viewed over a historical
    time period, and write the same dynamic SQL query to retrieve the recommended
    items based on the user’s historical interaction data.
  prefs: []
  type: TYPE_NORMAL
- en: Users who are exploring your site would also be able to scan through your entire
    catalog to find what they are looking for without feeling overwhelmed.
  prefs: []
  type: TYPE_NORMAL
- en: Factors that influence whether you need a recommender system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Item catalog size:**'
  prefs: []
  type: TYPE_NORMAL
- en: As catalog size increases, it becomes more tedious and expensive to label each
    item’s metadata through a manual process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In business models such as marketplaces, where item listings are completely
    crowdsourced to users, it is impossible to ensure high quality item metadata labels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have to look at alternative methods of generating recommendations outside
    of simple SQL queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of structured data:**'
  prefs: []
  type: TYPE_NORMAL
- en: For certain companies, structured data in a tabular format may not even be collected.
    Instead, they might have a repository of videos, images, free text, articles that
    could be mined for generating recommendations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using unstructured data as the basis of that idea requires use of deep neural
    network approaches that encode unstructured data into structured numerical data
    to learn meaningful representations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**structured** — data in tabular format with well-defined schema.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**unstructured — *text***, ***images***, ***audio***, ***video***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repeatable process for improving business metrics:**'
  prefs: []
  type: TYPE_NORMAL
- en: Without a repeatable experimentation process, there is no way to test new techniques
    to improve your recommendations for your users. In addition, there is no way to
    monitor whether the changes to the system has a tangible impact on key business
    metrics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommender systems have been shown to improve business metrics e.g. click-through
    rates, conversion rates, add-to-cart purchase, new item add-to-cart, listen /
    watch time, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting in place your first recommender system does not necessarily guarantee
    you a repeatable experimentation process to start, but rather is the first step
    to moving towards that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RecSys Case Studies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Below are some example use cases of recommender systems that are prevalent
    in society, broken down by industry:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example RecSys Use Cases in Industry:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Online Commerce: [eBay — Building a Deep Learning Based Retrieval System for
    Personalized Recommendations](https://tech.ebayinc.com/engineering/building-a-deep-learning-based-retrieval-system-for-personalized-recommendations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fashion: [ASOS — Fashion Recommendations at ASOS](https://www.youtube.com/watch?v=kGuaEqEsxKM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Music: [Spotify — Automatic Music Playlist Continuation](https://research.atspotify.com/publications/recsys-challenge-2018-automatic-music-playlist-continuation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Videos: [YouTube — Deep Neural Networks for Recommendations](https://research.google/pubs/pub45530/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Images: [Pinterest — Unifying Visual Embeddings for Visual Search](https://medium.com/pinterest-engineering/unifying-visual-embeddings-for-visual-search-at-pinterest-74ea7ea103f0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Written Content: [New York Times — Building the Next Recommendation Engine](https://archive.nytimes.com/open.blogs.nytimes.com/2015/08/11/building-the-next-new-york-times-recommendation-engine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Online Dating: [Tinder — Personlized Recommendations using TinVec](https://www.youtube.com/watch?v=j2rfLFYYdfM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Online Gaming: [Steam — Recommender Systems for Online Video Game Platforms](https://www.researchgate.net/publication/333072035_Recommender_Systems_for_Online_Video_Game_Platforms_the_Case_of_STEAM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Travel Accommodation: [Expedia — Recommendations using Hotel2Vec](https://medium.com/expedia-group-tech/expedia-group-recsys-2021-ff791f42ba07)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Healthcare Procurement: [Novartis AG — Powering Search and Recommendation with
    Amazon OpenSearch KNN and SageMaker](https://aws.amazon.com/blogs/industries/novartis-ag-uses-amazon-elasticsearch-k-nearest-neighbor-knn-and-amazon-sagemaker-to-power-search-and-recommendation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Food Delivery: [Instacart — Personalizing Recommendations of a Learning User](https://www.instacart.com/company/how-its-made/personalizing-recommendations-for-a-learning-user)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Housing and Apartments: [Zillow — Home Embeddings for Similar Home Recommendations](https://www.zillow.com/tech/embedding-similar-home-recommendation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leasing and Office Rental: [WeWork — Recommendation Systems](https://www.youtube.com/watch?v=-R1loUK_EdA)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recruitment and Candidate Search: [LinkedIn — Quality Matches via Personalized
    AI for hirer and seeker preferences](https://engineering.linkedin.com/blog/2020/quality-matches-via-personalized-ai)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Online Education, Online Banking, Insurance were also the industries where
    I expected to find examples of successful case studies, however information was
    scarce.**'
  prefs: []
  type: TYPE_NORMAL
- en: Architecting and Building a RecSys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often in the real world, IT systems are a collection of services working together.
    Architecting and building a recommender system is a layered, multi-stage process
    that uses the right type of model for each stage in the layer.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the stages a machine learning engineer goes through when
    building a recommender system.
  prefs: []
  type: TYPE_NORMAL
- en: 3 Recommender System Design
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/fdd8d505e7545bf896a2bf91e60c32e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-stage Recommender System. Image by [author](https://natworkeffects.medium.com).
  prefs: []
  type: TYPE_NORMAL
- en: The above diagram shows the de-facto standard for building recommender systems.
    State-of-the-art (SOTA) recommender systems separate the engineering of such a
    system into this 3-stage process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note on Model Serving:** At each stage of the process, we also need to think
    about how to expose or serve the ML model that has been built for downstream consumers
    to utilize.'
  prefs: []
  type: TYPE_NORMAL
- en: We will explore this in the subsequent sections as we explain each of the stages.
  prefs: []
  type: TYPE_NORMAL
- en: Candidate Generation; Retrieval
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Candidate generation is also known as the **Retrieval** stage in some recommender
    system literature. Item catalogs can potentially grow into the hundred thousands,
    millions or billions of items.
  prefs: []
  type: TYPE_NORMAL
- en: Candidate generation methods are able to select the top hundred most relevant
    items through efficiently comparing the similarity between items using a distance
    metric.
  prefs: []
  type: TYPE_NORMAL
- en: The first big idea here is to learn a numerical vector representation of users
    and item, the input data. These vectors, called embeddings can be written to a
    database or a nearest neighbors index where they are later retrieved by downstream
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the user and item embeddings, we can calculate their similarity
    in the embedding space using distance metrics such as euclidean distance, dot
    product, cosine similarity etc.
  prefs: []
  type: TYPE_NORMAL
- en: Candidate Generation aims to whittle down the number of potential candidates
    using an efficient approach that returns hundreds of candidate results that are
    ranked in the next stage. Usually, multiple candidate generators are built, that
    are trained using different approaches, each utilizing its own specific set of
    training data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why not just go straight to the Scoring stage?**'
  prefs: []
  type: TYPE_NORMAL
- en: A common and valid question to ask here is why not just go straight to the scoring
    stage? Why go through the process of generating embeddings for candidate generation?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several points to consider here:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating embeddings are a key feature engineering step. The vector values
    can be re-used downstream as input feature values to further increase the accuracy
    of the downstream scoring model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Candidate generation models can train on unstructured data, and represent unstructured
    data attributes of the item or user using a multi-dimensional vector. This useful
    information, such as ***text***, ***images***, ***audio***, ***video***, would
    otherwise remain untapped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Semantic visual understanding of each item or user in the embedding space. You
    can visualize high-dimensional vectors in a 2-D space using tools such as [TensorBoard
    Embedding Projector](https://www.tensorflow.org/tensorboard/tensorboard_projector_plugin).
    By doing so, you also gain the ability to observe, and apply clustering algorithms
    to discover clusters of similar objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output of a candidate generation model aims to establish similarity between
    items or users. This idea is fundamental in most recommender system products.
    Examples such as **“Similar Items to…”** or **“Users similar to you also liked…”**
    spring to mind.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Serve model results efficiently. Serving a candidate generation model is also
    efficient using an Approximate Nearest Neighbors (ANN) engine. For more information
    about the ANN algorithm, please refer to the video: [Approximate Nearest Neighbors:
    Data Science Concepts](https://www.youtube.com/watch?v=DRbjpuqOsjk). **Contrast
    this with the Scoring stage — where you have the added overhead of computing all
    the engineered features that went into training the Scoring model, before the
    API is able to return you the model results.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As mentioned earlier, serving these embeddings is done via exposing an ANN
    engine. There are a lot of choices on the market for this, both open source and
    on public clouds, below are just some of your options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open-Source: [Facebook faiss library](https://github.com/facebookresearch/faiss)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS: [Amazon OpenSearch](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/knn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GCP: [Vertex AI Matching Engine](https://cloud.google.com/vertex-ai/docs/matching-engine/ann-service-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simply use one of these services, select your distance similarity metric, and
    downstream consumers can call the API to retrieve object embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative approach is to write the object embeddings to a database, and
    downstream systems query the database to retrieve them. This is essentially what
    [Spotify does using Cloud Bigtable](https://www.youtube.com/watch?v=807uHC0Ia10).
  prefs: []
  type: TYPE_NORMAL
- en: Scoring; Ranking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scoring is also known as the **Ranking** stage in some recommender system literature.
    It is stage that happens after candidate generation. A visual representation of
    this is shown in the diagram below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea2a35637c320970aa3aaed4e8199976.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple Candidate Generation Models. Image by [author](https://natworkeffects.medium.com).
  prefs: []
  type: TYPE_NORMAL
- en: After retrieving top hundred candidates from multiple candidate generator models,
    each candidate’s embeddings can be organized into a structured tabular format
    along with other input data about the item and user such as datetime, category,
    device type etc. Scoring is a supervised learning problem, so we have to ensure
    that we pass it labeled training data relevant to the business metric we are optimizing
    for.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scoring is an optional stage**'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on whether you have labeled training data or not, your company may
    not have a Scoring stage. This is perfectly fine, and some companies get by with
    just Candidate Generation stage powering their recommender system products. **It
    may take more time and effort for your internal data engineering process to put
    in place the right telemetry to produce labeled training datasets.**
  prefs: []
  type: TYPE_NORMAL
- en: Scoring is a classification problem. The output of the classification model
    is a probability score that enables you to rank the candidates from most likely
    to increase the business metric to least likely to do so. Examples of such business
    metrics include click-through rate, video watch time, item add-to-cart etc.
  prefs: []
  type: TYPE_NORMAL
- en: To serve the output of a Scoring model, you can publish an API endpoint with
    the model version you would like to deploy. The downstream system would have to
    call the API with the base input features (we must be careful here to not introduce
    data leakage), and the Scoring model would calculate the engineered features,
    before returning a ranked list of items, each with their own probability score.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are easy options for deploying such an endpoint on all 3 public cloud
    providers:'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the ranked list of results, if retrieved via a batch endpoint can
    be cached into a database, for retrieval later by the downstream application.
  prefs: []
  type: TYPE_NORMAL
- en: Re-Ranking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After ranking your items by assigning them probability scores, systems can
    also re-rank the ordered list of items. There are several benefits to re-ranking,
    namely:'
  prefs: []
  type: TYPE_NORMAL
- en: Item quality — removal of malicious items such as fake / pirated / scam products,
    poor quality item listings, clickbait etc that could negatively affect user confidence
    and discourage them from using the platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Item diversity — Instead of recommending items that users have seen before,
    we can recommend lesser known item listings, or different categories of items
    that a user usually looks at to encourage discovery and exploration on the platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you optimize for a business metric, you are prone to [metric corruption](https://www.nngroup.com/articles/campbells-law/)
    — you encourage certain malicious behaviours from bad actors. The re-ranking stage
    serves to mitigate that, by considering other metrics that are complimentary to
    the primary one that was optimized for during the Scoring stage.
  prefs: []
  type: TYPE_NORMAL
- en: The process of Re-Ranking could be simple business rules to ensure mandatory
    fields for an item is filled in, or you could train a separate model that learns
    characteristics of the bad actors or items with malicious intent. Serving these
    models would be similar to the approach described in the Scoring stage.
  prefs: []
  type: TYPE_NORMAL
- en: To promote new item discovery on your platform, and encourage diversity, companies
    also utilize variants of multi-armed bandit algorithms when serving the ranked
    item list to end users, to strike a balance between exploration vs. exploitation
    of items, but that’s a topic that warrants a dedicated blog post for another time.
  prefs: []
  type: TYPE_NORMAL
- en: 4 Special Thanks / References
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: '*A special mention and thanks to the authors and creators of the following
    resources, that helped me to write this post:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 📚 [Google Developers Recommendation Systems Course](https://developers.google.com/machine-learning/recommendation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '🎦 [Approximate Nearest Neighbors: Data Science Concepts](https://www.youtube.com/watch?v=DRbjpuqOsjk)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 🎦 [Spotify Music Recommendations at Scale with Cloud Bigtable](https://www.youtube.com/watch?v=807uHC0Ia10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://natworkeffects.com*](https://natworkeffects.com/posts/multi-stage-approach-to-building-recommender-systems)
    *on February 10, 2023.*'
  prefs: []
  type: TYPE_NORMAL
