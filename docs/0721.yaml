- en: Boost Machine Learning Model Performance through Effective Feature Engineering
    Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/boost-machine-learning-model-performance-through-effective-feature-engineering-techniques-3f176605ec78?source=collection_archive---------11-----------------------#2023-02-22](https://towardsdatascience.com/boost-machine-learning-model-performance-through-effective-feature-engineering-techniques-3f176605ec78?source=collection_archive---------11-----------------------#2023-02-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn the right feature engineering techniques when applied to credit card fraud
    detection problem that improves the overall accuracy of machine learning models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://suhas-maddali007.medium.com/?source=post_page-----3f176605ec78--------------------------------)[![Suhas
    Maddali](../Images/933f27eab8ba9ee1f06ed2f24746d788.png)](https://suhas-maddali007.medium.com/?source=post_page-----3f176605ec78--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3f176605ec78--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3f176605ec78--------------------------------)
    [Suhas Maddali](https://suhas-maddali007.medium.com/?source=post_page-----3f176605ec78--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2a74f90399ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fboost-machine-learning-model-performance-through-effective-feature-engineering-techniques-3f176605ec78&user=Suhas+Maddali&userId=2a74f90399ae&source=post_page-2a74f90399ae----3f176605ec78---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3f176605ec78--------------------------------)
    ·10 min read·Feb 22, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3f176605ec78&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fboost-machine-learning-model-performance-through-effective-feature-engineering-techniques-3f176605ec78&user=Suhas+Maddali&userId=2a74f90399ae&source=-----3f176605ec78---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3f176605ec78&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fboost-machine-learning-model-performance-through-effective-feature-engineering-techniques-3f176605ec78&source=-----3f176605ec78---------------------bookmark_footer-----------)![](../Images/ea5f15acd7d7ddeded42cce568269002.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Tierra Mallorca](https://unsplash.com/ja/@tierramallorca?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Machine learning** and data science are used in a large number of industries.
    One of the most popular applications of data science is in the field of finance.
    A lot of companies are trying to automate tasks such as whether to give loans
    to lenders or not to whether a transaction is fraudulent or non-fraudulent. In
    addition to this, there are other areas such as customer segmentation and credit
    scoring that are used in finance to learn various behavioral traits of customers
    and determine their overall credit score.'
  prefs: []
  type: TYPE_NORMAL
- en: While the technology is impressive in **automating** a wide variety of tasks,
    failing to perform the right feature engineering with the dataset used to train
    ML models could oftentimes lead to poor performance on the test set (data not
    seen by models). Therefore, effective and efficient strategies in the space of
    feature engineering must be performed so as to ensure that the models perform
    well during the testing and production phases respectively.
  prefs: []
  type: TYPE_NORMAL
- en: This article mainly focuses on implementing machine learning models **(xgboost)**
    on credit card fraud detection dataset and aims to determine the difference in
    model performance before and after performing feature engineering. In this way,
    we get to understand the importance of feature engineering to get the best predictions
    from the models. We will follow a list of iterative steps such as reading the
    data, performing exploratory data analysis (EDA), training an ML model without
    feature engineering and finally, perform feature engineering to see an improvement
    in the performance of ML models as a result of this transformation. Let us now
    go over each of these steps and highlight some of the key insights during each
    of these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step would be to read the dataset for your fraud analysis. Most of
    the time, data is recorded in **‘csv’** format. Therefore, there is a library
    in python called ‘pandas’ that is used to read ‘csv’ files. We will use this library
    to read the data as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** The dataset was downloaded from [https://www.kaggle.com/datasets/kartik2112/fraud-detection](https://www.kaggle.com/datasets/kartik2112/fraud-detection)
    under [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)
    license'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/79325da158d4c37a5cd5bb863fffd354.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the data is read, we are taking a look at a list of **columns** and
    their **non-null** values. There are columns such as **‘Unnamed: 0’** and **‘trans_num’**
    that do not add a lot of meaning for our machine learning models to determine
    whether a transaction is fraudulent or non-fraudulent. In the subsequent sections,
    we take steps to remove features that are not important.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b1a26217a01bd6dd0408088f913f6514.png)'
  prefs: []
  type: TYPE_IMG
- en: Data Information (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: As shown from the data, there are no missing values and each of the features
    have different set of datatypes which must be kept in mind when performing feature
    engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Performing Exploratory Data Analysis (EDA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This step is followed to understand and analyze the data more thoroughly. As
    a result, we are able to find **missing values** and **outliers** in the data.
    Failure to remove them would lead to results having a lot of skew and a significant
    drop in ML model performance. In addition to this, there are issues such as **bias**
    that impact the model as it would be trying to learn too much from these data
    points without having generalization capabilities. As shown in the below code
    cells, we look at each of the steps and the output generated as a result of performing
    exploratory data analysis (EDA).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d29ed7a9bd36b7564df9be1478c48f9e.png)![](../Images/58b75a445b8e18f4e5529413fcd9f00c.png)'
  prefs: []
  type: TYPE_IMG
- en: Countplot of Fraud Vs. Non-Fraud (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: It can be seen from the above that there are a large number of cases of non-fraudulent
    transaction as compared to fraudulent transaction. This is because in real-life,
    we tend to rarely see credit card frauds when compared to the non-fraudulent ones
    that are often done.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/99bda53c79724bc5e19420ff8b2f8f52.png)![](../Images/a9788c0bab91aa67b2ccb7e181fa2baa.png)'
  prefs: []
  type: TYPE_IMG
- en: State Countplot (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: We see that large number of transaction data is taken from the state of **Texas
    (TX)**, followed by **Newyork (NY)** and other states. When doing feature engineering,
    we can find the average transaction for each state to determine whether a transaction
    is fraudulent. In addition, other features such as the minimum and maximum transaction
    amounts could be added in feature engineering to improve ML model performance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5231c9c5cb710109191b0f547733a45b.png)![](../Images/73bb26eeccb95456502d29aedd555461.png)'
  prefs: []
  type: TYPE_IMG
- en: Average transaction amount per state plot (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: After grouping the data on the basis of state and finding the average transaction
    amount and arranging them, the state of **Delaware** tends to have significantly
    higher transaction amount. This clearly shows that there is an anomaly in our
    data for the state of Delaware. Therefore, steps must be taken to remove those
    categories that contain significantly higher or lower values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe79025032166614e72773e380179bc8.png)![](../Images/cc21d07769a13da9aa993843b40376ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Categories for fraudulent transaction plot (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: From the plot, it is evident that in fraudulent cases, there is a higher occurrence
    of categories in the name of groceries. In other words, fraudulent transactions
    can mostly occur by simply organizing it as grocery purchase. This would be useful
    in our feature engineering as it helps the ML model in determining the chances
    of fraud based on the type of purchase.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fcfc06bbd74106816e49983137e0bf4.png)![](../Images/aff028a5f7c29502ad2b988d8884188f.png)'
  prefs: []
  type: TYPE_IMG
- en: Categories for non-fraudulent transaction plot (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Non-fraudulent cases, on the other hand, tend to take place mostly if the category
    is ‘gas_transport’. This is followed by ‘home’ along with other categories. By
    looking at the above 2 plots, we can maintain a count of total fraudulent and
    non-fraudulent transactions for each of the categories listed as it would give
    our ML model a good understanding of various categories through which frauds are
    organized.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/27f5de60fa4784c14ee475dcff739dab.png)![](../Images/249efd728af4ec66b657806d538ed5ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Heatmap of correlation (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: It is shown in the correlation plot that most of the transactions that are fraudulent
    also have high correlation with the total amount drawn. Thus, this feature could
    be quite useful in our model predictions of occurrence of fraudulent transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Encoding Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have explored the data and understood it thoroughly, it is time
    to move ahead with essential feature engineering strategies. Since some of the
    data present in columns have string values, we cannot directly feed them to our
    models. Therefore, we follow a few sets of feature engineering strategies such
    as **one-hot encoding** to convert these categories into features.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e925fe46ec3961ca8d93850c1ea4455a.png)'
  prefs: []
  type: TYPE_IMG
- en: After the categorical features are converted to numerical values, it is time
    to remove the previous categorical features that contain string values as done
    in the above code cell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d5056535a2675e9937761aa8fce57c26.png)'
  prefs: []
  type: TYPE_IMG
- en: We **stack** each of the values for training and test set with the encoded values
    as shown. It is to be noted that there are other encoding strategies such as TFIDF,
    Word2Vec, etc. but for now, we focus on bag of words representation for encoding
    categories of features.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7d35151b8914c10e1d35ad3b8bafeeea.png)'
  prefs: []
  type: TYPE_IMG
- en: Examining the shape of the data, we get the additional columns added as a result
    of performing one-hot encoding for the categorical features.
  prefs: []
  type: TYPE_NORMAL
- en: Training an ML Model without Feature Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the categorical features are converted to numerical features and appended
    to the original dataset, it is time to apply machine learning models (xgboost)
    for our problem of predicting the likelihood of a transaction being fraudulent.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec3314971708392f6e0438cbb48d6c8b.png)'
  prefs: []
  type: TYPE_IMG
- en: When training a model, we first initialize it and use the **‘.fit’** attribute
    to train the model by giving the input and the output data to it. We tend to get
    different set of default hyperparameters that were set to train the model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b0a36172604652f3c97991fd328cd3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Predictions generated from the **test set** are compared to that of the actual
    output that were set aside for testing the performance of the model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a913a8cbd61794dc123103b138082b7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Classification Report (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: It is seen that there is a high accuracy on the non-fraudulent cases whereas
    in fraudulent cases, we tend to see an overall f1-score to be 0.75 respectively.
    Therefore, we can take the right steps to either improve the **number of samples**
    of fraudulent cases by using various methods. But for now, the algorithm does
    a decent job in making its predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Training an ML Model with Feature Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a list of feature engineering strategies that we can explore that
    improves model performance. The most common approaches we use are standardization
    and normalization. This ensures that features are created with a similar scale
    with respect to the remaining features so that the ML algorithm doesn’t prioritize
    features that have high standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, more features can be generated based on the existing set
    of features that can improve model performance. In this way, the model learns
    important representations that help it to determine whether a transaction is fraudulent
    or non-fraud. Let us go over each of these steps in great details in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scaling**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is an operation where the input features that are of different scales are
    converted to a form all features are weighed equally. In the dataset, it can be
    seen that the feature ‘city_pop’ and ‘amt’ have different scales as city_pop is
    just a count while ‘amt’ is measured in dollars ($). Scaling operation ensures
    that each of the features having different scales are distributed such that there
    is no difference in their scale after conversion.
  prefs: []
  type: TYPE_NORMAL
- en: There are two popular methods of scaling which are standardization and normalization.
    Let us apply each of the methods and tabular the performance of the ML model in
    each of these cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**Standardization**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It scales the values of a feature such that the resulting **mean** has a value
    of 0 and a **standard deviation** of 1\. This conversion is performed by subtracting
    the mean of a feature from data points and dividing the result with the standard
    deviation of the feature.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebff431b27506e3ecf0d5cd82db769fd.png)'
  prefs: []
  type: TYPE_IMG
- en: '**StandardScaler** is a popular library that is used to perform the standardization
    operation. After importing the library, steps are taken to transform both the
    training and the test set.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normalization**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normalization is also a popular option for feature engineering. In this method,
    the maximum and minimum values in a dataframe are taken into consideration before
    implementing the operation. After identifying this information, the values for
    individual features are transformed such that each of the value has have a possible
    set of minimum values of 0 and a maximum value of 1 respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/15cbfde7cfba9a5e161196334052a2b7.png)'
  prefs: []
  type: TYPE_IMG
- en: We use ‘normalize’ that is used to ensure that values lie in the range of 0
    and 1\. The same operation is performed on the test set. It is to be noted that
    the minimum and maximum values are taken from the training set and not the test
    set as doing so would lead to data leakage, giving rise to inflated performance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating New Features**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to add new features that could improve the model performance.
    In order to increase the performance, adding the most relevant features for the
    model would be useful. Having **domain expertise** can help to a large extent
    in adding those features based on the existing ones. Based on our knowledge, let
    us add a few features that can improve performance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbe984cbb58b1946370db3acd60dd651.png)'
  prefs: []
  type: TYPE_IMG
- en: We have added **‘euclidean_distance’** feature as this would give a good understanding
    for the algorithm rather than it only taking the longitude and latitude information
    between the merchant and the buyer.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we are also converting data on the basis of transaction amount
    and determining whether it is a large transaction or not.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e16b18189b8fb32148169c20070294df.png)'
  prefs: []
  type: TYPE_IMG
- en: Classification Report (Image from Author)
  prefs: []
  type: TYPE_NORMAL
- en: By adding features such as euclidean distance and flagging whether a transaction
    amount was high or low, we tend to see an improvement in the overall **F1-score**
    of the model for the positive class (fraud transactions).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After going through this article, you should have a firm understanding of the
    importance of feature engineering in improving model performance. While feature
    engineering had a good impact in this problem, there might be other problems that
    might not require a lot of feature engineering but instead can require more data
    or better ML models to predict the target variable. Therefore, the type of feature
    engineering to select depends to a large extent on the dataset used and the relationship
    between the features and the target variable.
  prefs: []
  type: TYPE_NORMAL
- en: '*Below are the ways where you could contact me or take a look at my work.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***GitHub:***[*suhasmaddali (Suhas Maddali ) (github.com)*](https://github.com/suhasmaddali)'
  prefs: []
  type: TYPE_NORMAL
- en: '***YouTube:***[*https://www.youtube.com/channel/UCymdyoyJBC_i7QVfbrIs-4Q*](https://www.youtube.com/channel/UCymdyoyJBC_i7QVfbrIs-4Q)'
  prefs: []
  type: TYPE_NORMAL
- en: '***LinkedIn:***[*(1) Suhas Maddali, Northeastern University, Data Science |
    LinkedIn*](https://www.linkedin.com/in/suhas-maddali/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Medium:*** [*Suhas Maddali — Medium*](https://suhas-maddali007.medium.com/)'
  prefs: []
  type: TYPE_NORMAL
