["```py\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import GraphCypherQAChain\nfrom langchain.graphs import Neo4jGraph\n\ngraph = Neo4jGraph(\n    url=\"bolt://54.172.172.36:7687\", \n    username=\"neo4j\", \n    password=\"steel-foreheads-examples\"\n)\n\nchain = GraphCypherQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True,\n)\n```", "```py\nchain.run(\"\"\"\nWhich intermediary is connected to most entites?\n\"\"\")\n```", "```py\nchain.run(\"\"\"\nWho are the officers of ZZZ-MILI COMPANY LTD.?\n\"\"\")\n```", "```py\nchain.run(\"\"\"\nHow are entities SOUTHWEST LAND DEVELOPMENT LTD. and \nDragon Capital Markets Limited related?\n\"\"\")\n# Generated Cypher statement\n# MATCH (e1:Entity {name: 'SOUTHWEST LAND DEVELOPMENT LTD.'})-\n# [:CONNECTED_TO|OFFICER_OF|INTERMEDIARY_OF|SAME_NAME_AS*]-(e2:Entity {name: 'Dragon Capital Markets Limited'})\n```", "```py\nchain.run(\"\"\"\nHow are entities SOUTHWEST LAND DEVELOPMENT LTD. and \nDragon Capital Markets Limited connected?\nFind a shortest path.\n\"\"\")\n```", "```py\nchain.run(\"\"\"\nHow are entities SOUTHWEST LAND DEVELOPMENT LTD. and Dragon Capital Markets Limited connected?\nFind a shortest path.\nReturn only name properties of nodes and relationship types\n\"\"\")\n```", "```py\nchain.run(\"\"\"\nHow are entities SOUTHWEST LAND DEVELOPMENT LTD. and Dragon Capital Markets Limited connected?\nFind a shortest path and use only officer, intermediary, and connected relationships.\nReturn only name properties of nodes and relationship types\n\"\"\")\n```"]