["```py\ngdallocationinfo -valonly -wgs84 <geotiff filename> <longitude> <latitude>\n```", "```py\n// assume the variable gtiff is the geotiff object\n// that was created by loading data with geotiff.js\nconst image = await gtiff.getImage();\nconst geoKeys = image.getGeoKeys();\n```", "```py\n/**\n * Geokeys. If you're working with `geotiff` library, this is result of `image.getGeoKeys()`.\n * @typedef {Object} module:geokeysToProj4.GeoKeys\n * @property {number} GeographicTypeGeoKey See GeoTIFF docs for more information\n * @property {number} GeogGeodeticDatumGeoKey See GeoTIFF docs for more information\n * @property {number} GeogPrimeMeridianGeoKey See GeoTIFF docs for more information\n * @property {number} GeogLinearUnitsGeoKey See GeoTIFF docs for more information\n * @property {number} GeogLinearUnitSizeGeoKey See GeoTIFF docs for more information\n * @property {number} GeogAngularUnitsGeoKey See GeoTIFF docs for more information\n * @property {number} GeogAngularUnitSizeGeoKey See GeoTIFF docs for more information\n * @property {number} GeogEllipsoidGeoKey See GeoTIFF docs for more information\n * @property {number} GeogSemiMajorAxisGeoKey See GeoTIFF docs for more information\n * @property {number} GeogSemiMinorAxisGeoKey See GeoTIFF docs for more information\n * @property {number} GeogInvFlatteningGeoKey See GeoTIFF docs for more information\n * @property {number} GeogPrimeMeridianLongGeoKey See GeoTIFF docs for more information\n * @property {number} ProjectedCSTypeGeoKey See GeoTIFF docs for more information\n * @property {number} ProjectionGeoKey See GeoTIFF docs for more information\n * @property {number} ProjCoordTransGeoKey See GeoTIFF docs for more information\n * @property {number} ProjLinearUnitsGeoKey See GeoTIFF docs for more information\n * @property {number} ProjLinearUnitSizeGeoKey See GeoTIFF docs for more information\n * @property {number} ProjStdParallel1GeoKey See GeoTIFF docs for more information\n * @property {number} ProjStdParallel2GeoKey See GeoTIFF docs for more information\n * @property {number} ProjNatOriginLongGeoKey See GeoTIFF docs for more information\n * @property {number} ProjNatOriginLatGeoKey See GeoTIFF docs for more information\n * @property {number} ProjFalseEastingGeoKey See GeoTIFF docs for more information\n * @property {number} ProjFalseNorthingGeoKey See GeoTIFF docs for more information\n * @property {number} ProjFalseOriginLongGeoKey See GeoTIFF docs for more information\n * @property {number} ProjFalseOriginLatGeoKey See GeoTIFF docs for more information\n * @property {number} ProjFalseOriginEastingGeoKey See GeoTIFF docs for more information\n * @property {number} ProjFalseOriginNorthingGeoKey See GeoTIFF docs for more information\n * @property {number} ProjCenterLongGeoKey See GeoTIFF docs for more information\n * @property {number} ProjCenterLatGeoKey See GeoTIFF docs for more information\n * @property {number} ProjCenterEastingGeoKey See GeoTIFF docs for more information\n * @property {number} ProjCenterNorthingGeoKey See GeoTIFF docs for more information\n * @property {number} ProjScaleAtNatOriginGeoKey See GeoTIFF docs for more information\n * @property {number} ProjScaleAtCenterGeoKey See GeoTIFF docs for more information\n * @property {number} ProjAzimuthAngleGeoKey See GeoTIFF docs for more information\n * @property {number} ProjStraightVertPoleLongGeoKey See GeoTIFF docs for more information\n * @property {number[]} GeogTOWGS84GeoKey Datum to WGS transformation parameters, unofficial key\n */\n```", "```py\nimport proj4 from 'proj4';\nimport * as geokeysToProj4 from 'geotiff-geokeys-to-proj4';\n\n... // Not shown: importing geotiff.js and loading a geotiff file.\n    // for this example, the variable `gtiff` references the file.\n\nconst image = await gtiff.getImage();\nconst geoKeys = image.getGeoKeys();\nconst projObj = geokeysToProj4.toProj4( geoKeys );\nconst projection = proj4( `WGS84`, projObj.proj4 );\n```", "```py\nconst { x, y } = projection.forward( {\n    x: -105,   // the longitude\n    y: 40      // the latitude\n} );\n```", "```py\nconst width = image.getWidth();\nconst height = image.getHeight();\nconst [ originX, originY ] = image.getOrigin();\nconst [ xSize, ySize ] = image.getResolution();\nconst uWidth = xSize * width;\nconst uHeight = ySize * height;\n```", "```py\n// x and y come from the projection.forward example earlier\nconst percentX = ( x - originX ) / uWidth;\nconst percentY = ( y - originY ) / uHeight;\n\nconst pixelX = Math.floor( width * percentX );\nconst pixelY = Math.floor( height * percentY );\n```", "```py\nconst [ value ] = await image.readRasters( {\n    interleave: true,\n    window: [ pixelX, pixelY, pixelX + 1, pixelY + 1],\n    samples: [ 0 ]\n} );\n```", "```py\nconst data = await image.readRasters( {\n    interleave: true,\n    samples: [ 0 ]\n} );\n```", "```py\nconst value = data[ width * pixelY + pixelX ];\n```"]