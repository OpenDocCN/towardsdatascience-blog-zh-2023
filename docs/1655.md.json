["```py\nlet df = DataFrame::default();\n```", "```py\nlet s1 = Series::new(\"Name\", &[\"Mahmoud\", \"Ali\"]);\nlet s2 = Series::new(\"Age\", &[23, 27]);\nlet s3 = Series::new(\"Height\", &[1.84, 1.78]);\nlet df: PolarsResult<DataFrame> = DataFrame::new(vec![s1, s2, s3])?;\nprintln!(\"{:?}\", df.unwrap());\n\n// Output:\n\n// shape: (2, 3)\n// ┌─────────┬─────┬────────┐\n// │ Name    ┆ Age ┆ Height │\n// │ ---     ┆ --- ┆ ---    │\n// │ str     ┆ i32 ┆ f64    │\n// ╞═════════╪═════╪════════╡\n// │ Mahmoud ┆ 23  ┆ 1.84   │\n// │ Ali     ┆ 27  ┆ 1.78   │\n// └─────────┴─────┴────────┘\n```", "```py\nlet df: PolarsResult<DataFrame> = df!(\"Name\" => &[\"Mahmoud\", \"Ali\"],\n                                      \"Age\" => &[23, 27],\n                                      \"Height\" => &[1.84, 1.78]);\n```", "```py\nlet df1: DataFrame = df!(\"categorical\" => &[\"d\",\"e\",\"f\"],\n                         \"numeric\" => &[1, 2, 3],\n                         \"object\" => &[\"a\", \"b\", \"c\"]).unwrap();\nprintln!(\"{}\", df1);\n\n// Output:\n\n// shape: (3, 3)\n// ┌─────────────┬─────────┬────────┐\n// │ categorical ┆ numeric ┆ object │\n// │ ---         ┆ ---     ┆ ---    │\n// │ str         ┆ i32     ┆ str    │\n// ╞═════════════╪═════════╪════════╡\n// │ d           ┆ 1       ┆ a      │\n// │ e           ┆ 2       ┆ b      │\n// │ f           ┆ 3       ┆ c      │\n// └─────────────┴─────────┴────────┘\n\nlet df2: DataFrame = df1.describe(None).unwrap();\nprintln!(\"{}\", df2);\n\n// Output:\n\n// shape: (9, 4)\n// ┌────────────┬─────────────┬─────────┬────────┐\n// │ describe   ┆ categorical ┆ numeric ┆ object │\n// │ ---        ┆ ---         ┆ ---     ┆ ---    │\n// │ str        ┆ str         ┆ f64     ┆ str    │\n// ╞════════════╪═════════════╪═════════╪════════╡\n// │ count      ┆ 3           ┆ 3.0     ┆ 3      │\n// │ null_count ┆ 0           ┆ 0.0     ┆ 0      │\n// │ mean       ┆ null        ┆ 2.0     ┆ null   │\n// │ std        ┆ null        ┆ 1.0     ┆ null   │\n// │ …          ┆ …           ┆ …       ┆ …      │\n// │ 25%        ┆ null        ┆ 1.5     ┆ null   │\n// │ 50%        ┆ null        ┆ 2.0     ┆ null   │\n// │ 75%        ┆ null        ┆ 2.5     ┆ null   │\n// │ max        ┆ f           ┆ 3.0     ┆ c      │\n// └────────────┴─────────────┴─────────┴────────┘\n```", "```py\nlet df: DataFrame = df!(\"Name\" => &[\"Mahmoud\", \"Bob\"],\n                        \"Age\" => &[23, 27],\n                        \"Height\" => &[1.84, 1.78]).unwrap();\nprintln!(\"{}\", df.head(None));\n\n// Output:\n\n// shape: (2, 3)\n// ┌─────────┬─────┬────────┐\n// │ Name    ┆ Age ┆ Height │\n// │ ---     ┆ --- ┆ ---    │\n// │ str     ┆ i32 ┆ f64    │\n// ╞═════════╪═════╪════════╡\n// │ Mahmoud ┆ 23  ┆ 1.84   │\n// │ Bob     ┆ 27  ┆ 1.78   │\n// └─────────┴─────┴────────┘\n```", "```py\nlet df: DataFrame = df!(\"Name\" => &[\"Mahmoud\", \"Bob\"],\n                        \"Age\" => &[23, 27],\n                        \"Height\" => &[1.84, 1.78]).unwrap();\nprintln!(\"{}\", df.tail(None));\n\n// Output:\n\n// shape: (2, 3)\n// ┌─────────┬─────┬────────┐\n// │ Name    ┆ Age ┆ Height │\n// │ ---     ┆ --- ┆ ---    │\n// │ str     ┆ i32 ┆ f64    │\n// ╞═════════╪═════╪════════╡\n// │ Mahmoud ┆ 23  ┆ 1.84   │\n// │ Bob     ┆ 27  ┆ 1.78   │\n// └─────────┴─────┴────────┘\n```", "```py\n// Create a sample DataFrame\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 29],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[50000, 60000, 250000]).unwrap();\n\n// Indexing using brackets\n// Select a single column by name\n\nlet name_col = &df[\"Name\"];\n// Or\nlet name_col1 = &df[0];\nprintln!(\"{:?}\", name_col);\nprintln!(\"{:?}\", name_col1);\n\n// Select a single column by name\n\n// Output:\n\n// shape: (3,)\n// Series: 'Name' [str]\n// [\n//     \"Mahmoud\"\n//     \"Ali\"\n//     \"ThePrimeagen\"\n// ]\n\n// Select multiple columns by slicing\n\nsubset = &df[..2];\nprintln!(\"{:?}\", subset);\n\n// Output:\n\n// [shape: (3,)\n// Series: 'Name' [str]\n// [\n//     \"Mahmoud\"\n//     \"Ali\"\n//     \"ThePrimeagen\"\n// ],shape: (3,)\n// Series: 'Age' [i32]\n// [\n//     22\n//     30\n//     29\n// ]]\n```", "```py\nlet name_age_cols = df.select([\"Name\", \"Age\"]).unwrap();\nprintln!(\"{:?}\", name_age_cols);\n\n// Output:\n\n// shape: (3, 2)\n// ┌──────────────┬─────┐\n// │ Name         ┆ Age │\n// │ ---          ┆ --- │\n// │ str          ┆ i32 │\n// ╞══════════════╪═════╡\n// │ Mahmoud      ┆ 22  │\n// │ Ali          ┆ 25  │\n// │ ThePrimeagen ┆ 29  │\n// └──────────────┴─────┘\n```", "```py\nlet name_col = df.column(\"Name\");\nprintln!(\"{:?}\", name_col);\n\n// Output:\n\n// shape: (3,)\n// Series: 'Name' [str]\n// [\n//     \"Mahmoud\"\n//     \"Ali\"\n//     \"ThePrimeagen\"\n// ]\n```", "```py\n// Create a sample DataFrame\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[50000, 60000, 250000]).unwrap();\n\nlet mask = df.column(\"Age\").expect(\"Age must exist!\").gt(25).unwrap();\nlet filtered_data = df.filter(&mask).unwrap();\n\nprintln!(\"{:?}\", filtered_data);\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────────────┬─────┬────────┬────────┐\n// │ Name         ┆ Age ┆ Gender ┆ Salary │\n// │ ---          ┆ --- ┆ ---    ┆ ---    │\n// │ str          ┆ i32 ┆ str    ┆ i32    │\n// ╞══════════════╪═════╪════════╪════════╡\n// │ ThePrimeagen ┆ 36  ┆ M      ┆ 250000 │\n// └──────────────┴─────┴────────┴────────┘\n```", "```py\nprintln!(\"{:?}\", df.slice(2, 3));\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────────────┬─────┬────────┬────────┐\n// │ Name         ┆ Age ┆ Gender ┆ Salary │\n// │ ---          ┆ --- ┆ ---    ┆ ---    │\n// │ str          ┆ i32 ┆ str    ┆ i32    │\n// ╞══════════════╪═════╪════════╪════════╡\n// │ ThePrimeagen ┆ 36  ┆ M      ┆ 250000 │\n// └──────────────┴─────┴────────┴────────┘\n```", "```py\n// Create a sample DataFrame\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[50000, 60000, 250000]).unwrap();\n\nprintln!(\"{:?}\", df.transpose().unwrap()[0]);\n\n// Output:\n\n// shape: (4,)\n// Series: 'column_0' [str]\n// [\n//     \"Mahmoud\"\n//     \"22\"\n//     \"M\"\n//     \"50000\"\n// ]\n```", "```py\n// Create a sample DataFrame\nlet df = df!(\"Name\" => &[Some(\"Mahmoud\"),  None, None],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[50000, 60000, 250000]).unwrap();\n\nprintln!(\"{:?}\", df.null_count());\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────┬─────┬────────┬────────┐\n// │ Name ┆ Age ┆ Gender ┆ Salary │\n// │ ---  ┆ --- ┆ ---    ┆ ---    │\n// │ u32  ┆ u32 ┆ u32    ┆ u32    │\n// ╞══════╪═════╪════════╪════════╡\n// │ 2    ┆ 0   ┆ 0      ┆ 0      │\n// └──────┴─────┴────────┴────────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\",  \"Mahmoud\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 22, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[50000, 50000, 250000]).unwrap();\nlet mask = df.is_duplicated().unwrap();\nlet filtered_data = df.filter(&mask).unwrap();\nprintln!(\"{:?}\", filtered_data);\n\n// Output:\n\n// shape: (2, 4)\n// ┌─────────┬─────┬────────┬────────┐\n// │ Name    ┆ Age ┆ Gender ┆ Salary │\n// │ ---     ┆ --- ┆ ---    ┆ ---    │\n// │ str     ┆ i32 ┆ str    ┆ i32    │\n// ╞═════════╪═════╪════════╪════════╡\n// │ Mahmoud ┆ 22  ┆ M      ┆ 50000  │\n// │ Mahmoud ┆ 22  ┆ M      ┆ 50000  │\n// └─────────┴─────┴────────┴────────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\",  \"Mahmoud\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 22, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[50000, 50000, 250000]).unwrap();\nlet mask = df.is_unique().unwrap();\nlet filtered_data = df.filter(&mask).unwrap();\nprintln!(\"{:?}\", filtered_data);\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────────────┬─────┬────────┬────────┐\n// │ Name         ┆ Age ┆ Gender ┆ Salary │\n// │ ---          ┆ --- ┆ ---    ┆ ---    │\n// │ str          ┆ i32 ┆ str    ┆ i32    │\n// ╞══════════════╪═════╪════════╪════════╡\n// │ ThePrimeagen ┆ 36  ┆ M      ┆ 250000 │\n// └──────────────┴─────┴────────┴────────┘\n```", "```py\nlet df: DataFrame = df!(\"Fruit\" => &[\"Apple\", \"Apple\", \"Pear\"],\n                        \"Color\" => &[\"Red\", \"Yellow\", \"Green\"]).unwrap();\n```", "```py\nlet df_remain = df.drop(\"Color\").unwrap(); \nprintln!(\"{}\", df_remain);\n\n// Output:\n\n// shape: (3, 1)\n// ┌───────┐\n// │ Fruit │\n// │ ---   │\n// │ str   │\n// ╞═══════╡\n// │ Apple │\n// │ Apple │\n// │ Pear  │\n// └───────┘\n```", "```py\nprintln!(\"{}\", df); // the original DataFrame\n\n// Output:\n\n// shape: (3, 2)\n// ┌───────┬────────┐\n// │ Fruit ┆ Color  │\n// │ ---   ┆ ---    │\n// │ str   ┆ str    │\n// ╞═══════╪════════╡\n// │ Apple ┆ Red    │\n// │ Apple ┆ Yellow │\n// │ Pear  ┆ Green  │\n// └───────┴────────┘\n```", "```py\nlet mut df: DataFrame = df!(\"Fruit\" => &[\"Apple\", \"Apple\", \"Pear\"],\n                            \"Color\" => &[\"Red\", \"Yellow\", \"Green\"]).unwrap();\ndf.drop_in_place(\"Color\"); // remove the row with index 1 (\"Color\") from df\nprintln!(\"{:?}\", df);\n\n// Output:\n\n// shape: (3, 1)\n// ┌───────┐\n// │ Fruit │\n// │ ---   │\n// │ str   │\n// ╞═══════╡\n// │ Apple │\n// │ Apple │\n// │ Pear  │\n// └───────┘\n```", "```py\nlet df_dropped_col = df.drop_many(&[\"Color\", \"\"]);\nprintln!(\"{:?}\", df_dropped_col);\n\n// Output:\n\n// shape: (3, 1)\n// ┌───────┐\n// │ Fruit │\n// │ ---   │\n// │ str   │\n// ╞═══════╡\n// │ Apple │\n// │ Apple │\n// │ Pear  │\n// └───────┘\n```", "```py\nlet df: DataFrame = df!(\"Fruit\" => &[\"Apple\", \"Apple\", \"Pear\"],\n                        \"Color\" => &[Some(\"Red\"), None, None]).unwrap();\nlet df_clean = df.drop_nulls::<String>(None).unwrap();\nprintln!(\"{:?}\", df_clean);\n\n// Output:\n\n// shape: (1, 2)\n// ┌───────┬───────┐\n// │ Fruit ┆ Color │\n// │ ---   ┆ ---   │\n// │ str   ┆ str   │\n// ╞═══════╪═══════╡\n// │ Apple ┆ Red   │\n// └───────┴───────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[Some(50000), Some(60000), None]).unwrap();\nlet mask = df.column(\"Salary\").expect(\"Salary must exist!\").is_not_null();\nprintln!(\"{:?}\", mask.head(None));\n\n// Output:\n\n// shape: (3,)\n// ChunkedArray: 'Age' [bool]\n// [\n//     true\n//     true\n//     false\n// ]\n```", "```py\nlet filtered_data = df.filter(&mask).unwrap();\nprintln!(\"{:?}\", filtered_data);\n\n// Output:\n\n// shape: (2, 4)\n// ┌─────────┬─────┬────────┬────────┐\n// │ Name    ┆ Age ┆ Gender ┆ Salary │\n// │ ---     ┆ --- ┆ ---    ┆ ---    │\n// │ str     ┆ i32 ┆ str    ┆ i32    │\n// ╞═════════╪═════╪════════╪════════╡\n// │ Mahmoud ┆ 22  ┆ M      ┆ 50000  │\n// │ Ali     ┆ 25  ┆ M      ┆ 60000  │\n// └─────────┴─────┴────────┴────────┘\n```", "```py\nlet mut df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[Some(50000), Some(60000), None]).unwrap();\n\nlet filtered_nulls = df.fill_null(FillNullStrategy::Forward(None)).unwrap();\n\nprintln!(\"{:?}\", filtered_nulls);\n\n// Output:\n\n// shape: (3, 4)\n// ┌──────────────┬─────┬────────┬────────┐\n// │ Name         ┆ Age ┆ Gender ┆ Salary │\n// │ ---          ┆ --- ┆ ---    ┆ ---    │\n// │ str          ┆ i32 ┆ str    ┆ i32    │\n// ╞══════════════╪═════╪════════╪════════╡\n// │ Mahmoud      ┆ 22  ┆ M      ┆ 50000  │\n// │ Ali          ┆ 25  ┆ M      ┆ 60000  │\n// │ ThePrimeagen ┆ 36  ┆ M      ┆ 60000  │\n// └──────────────┴─────┴────────┴────────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[Some(50000), Some(60000), None]).unwrap();\n\nprintln!(\"{:?}\", df.mean());\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────┬───────────┬────────┬─────────┐\n// │ Name ┆ Age       ┆ Gender ┆ Salary  │\n// │ ---  ┆ ---       ┆ ---    ┆ ---     │\n// │ str  ┆ f64       ┆ str    ┆ f64     │\n// ╞══════╪═══════════╪════════╪═════════╡\n// │ null ┆ 27.666667 ┆ null   ┆ 55000.0 │\n// └──────┴───────────┴────────┴─────────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[Some(50000), Some(60000), None]).unwrap();\n\nprintln!(\"{:?}\", df.median());\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────┬──────┬────────┬─────────┐\n// │ Name ┆ Age  ┆ Gender ┆ Salary  │\n// │ ---  ┆ ---  ┆ ---    ┆ ---     │\n// │ str  ┆ f64  ┆ str    ┆ f64     │\n// ╞══════╪══════╪════════╪═════════╡\n// │ null ┆ 25.0 ┆ null   ┆ 55000.0 │\n// └──────┴──────┴────────┴─────────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[Some(50000), Some(60000), None]).unwrap();\n\nprintln!(\"{:?}\", df.std(1));\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────┬──────────┬────────┬─────────────┐\n// │ Name ┆ Age      ┆ Gender ┆ Salary      │\n// │ ---  ┆ ---      ┆ ---    ┆ ---         │\n// │ str  ┆ f64      ┆ str    ┆ f64         │\n// ╞══════╪══════════╪════════╪═════════════╡\n// │ null ┆ 7.371115 ┆ null   ┆ 7071.067812 │\n// └──────┴──────────┴────────┴─────────────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[Some(50000), Some(60000), None]).unwrap();\n\nprintln!(\"{:?}\", df.var(1));\n\n// Output:\n\n// shape: (1, 4)\n// ┌──────┬───────────┬────────┬────────┐\n// │ Name ┆ Age       ┆ Gender ┆ Salary │\n// │ ---  ┆ ---       ┆ ---    ┆ ---    │\n// │ str  ┆ f64       ┆ str    ┆ f64    │\n// ╞══════╪═══════════╪════════╪════════╡\n// │ null ┆ 54.333333 ┆ null   ┆ 5e7    │\n// └──────┴───────────┴────────┴────────┘\n```", "```py\nlet df = df!(\"Name\" => &[\"Mahmoud\", \"Ali\", \"ThePrimeagen\"],\n             \"Age\" => &[22, 25, 36],\n             \"Gender\" => &[\"M\", \"M\", \"M\"],\n             \"Salary\" => &[Some(50000), Some(60000), None]).unwrap();\n\nprintln!(\"{:?}\", df.to_ndarray::<Float64Type>().unwrap());\n\n// Output:\n\n// [[NaN, 22.0, NaN, 50000.0],\n//  [NaN, 25.0, NaN, 60000.0],\n//  [NaN, 36.0, NaN, NaN]], shape=[3, 4], strides=[1, 3], layout=Ff (0xa), const ndim=2\n```", "```py\nlet sales_revenue_df: DataFrame = sales_df.groupby([\"Region\", \"Product_Category\"]).expect(\"Columns must exist!\").select([\"Sales Revenue\"]).sum().unwrap();\n```", "```py\nlet patient_by_age_condition_df: DataFrame = patients_data.groupby([\"Age_Group\", \"Condition\"]).expect(\"Columns must exist!\").select([\"Patient ID\", \"Length of Stay\"]).count().unwrap();\n```", "```py\nlet average_fuel_consumption_df: DataFrame = fuel_data.groupby([\"Vehicle_Type\", \"Driver\"]).expect(\"Columns must exist!\").select([\"Fuel Consumption\"]).mean().unwrap();\n```", "```py\nlet claims_amount_df: DataFrame = claims_data.groupby([\"Policy_Type\", \"Customer_Demographics\"]).expect(\"Columns must exist!\").select([\"Claims Amount\"]).sum().unwrap();\n```", "```py\nuse std::path::Path;\nuse polars::prelude::*;\n\nfn read_data_frame_from_csv(\n    csv_file_path: &Path,\n) -> DataFrame {\n    CsvReader::from_path(csv_file_path)\n        .expect(\"Cannot open file.\")\n        .has_header(true)\n        .finish()\n        .unwrap()\n}\n\nlet flights_file_path: &Path = Path::new(\"/path/to/Flight_on_time_HIX.csv\");\nlet columns = [\"Airline\", \"Origin_Airport\", \"Destination_Airport\", \"Departure_Delay_Minutes\", \"Arrival_Delay_Minutes\"];\nlet flights_df: DataFrame = read_data_frame_from_csv(flights_file_path).select(columns).unwrap();\nprintln!(\"{:?}\", flights_df.head(Some(5)));\n\n// Output:\n\n// shape: (5, 5)\n// ┌─────────┬────────────────┬─────────────────────┬─────────────────────────┬───────────────────────┐\n// │ Airline ┆ Origin_Airport ┆ Destination_Airport ┆ Departure_Delay_Minutes ┆ Arrival_Delay_Minutes │\n// │ ---     ┆ ---            ┆ ---                 ┆ ---                     ┆ ---                   │\n// │ str     ┆ str            ┆ str                 ┆ i64                     ┆ i64                   │\n// ╞═════════╪════════════════╪═════════════════════╪═════════════════════════╪═══════════════════════╡\n// │ TR      ┆ IYF            ┆ HIX                 ┆ 62                      ┆ 52                    │\n// │ TR      ┆ HEN            ┆ HIX                 ┆ 15                      ┆ 8                     │\n// │ RO      ┆ HIX            ┆ IZN                 ┆ 0                       ┆ 0                     │\n// │ XM      ┆ HIX            ┆ IZU                 ┆ 34                      ┆ 44                    │\n// │ XM      ┆ HIX            ┆ LKF                 ┆ 144                     ┆ 146                   │\n// └─────────┴────────────────┴─────────────────────┴─────────────────────────┴───────────────────────┘\n```", "```py\nlet arr_delay_mean_df: DataFrame = flights_df.groupby([\"Airline\"]).expect(\"Airline Column must exist!\").select([\"Arrival_Delay_Minutes\"]).mean().unwrap();\nprintln!(\"{:?}\", arr_delay_mean_df.head(Some(5)));\n// Output:\n\n// shape: (5, 2)\n// ┌─────────┬────────────────────────────┐\n// │ Airline ┆ Arrival_Delay_Minutes_mean │\n// │ ---     ┆ ---                        │\n// │ str     ┆ f64                        │\n// ╞═════════╪════════════════════════════╡\n// │ UG      ┆ 34.374332                  │\n// │ WC      ┆ 158.221406                 │\n// │ TR      ┆ 281.309919                 │\n// │ TO      ┆ 24.833333                  │\n// │ YJ      ┆ 11.839243                  │\n// └─────────┴────────────────────────────┘\n```", "```py\nlet dep_delay_mean_def: DataFrame = flights_df.groupby([\"Airline\", \"Origin_Airport\"]).expect(\"Airline and Origin_Airport Columns must exist!\").select([\"Departure_Delay_Minutes\"]).mean().unwrap();\nprintln!(\"{:?}\", dep_delay_mean_def.head(Some(5)));\n// Output:\n\n// shape: (5, 3)\n// ┌─────────┬────────────────┬──────────────────────────────┐\n// │ Airline ┆ Origin_Airport ┆ Departure_Delay_Minutes_mean │\n// │ ---     ┆ ---            ┆ ---                          │\n// │ str     ┆ str            ┆ f64                          │\n// ╞═════════╪════════════════╪══════════════════════════════╡\n// │ TR      ┆ ERM            ┆ 9.7890625                    │\n// │ NR      ┆ ULZ            ┆ 29.857143                    │\n// │ RO      ┆ VYM            ┆ 10.722222                    │\n// │ TJ      ┆ ERR            ┆ 20.290323                    │\n// │ NR      ┆ XNL            ┆ 16.351064                    │\n// └─────────┴────────────────┴──────────────────────────────┘\n```", "```py\nlet df3: DataFrame = df1.join(other=&df2, left_on=[\"variable1\"], right_on=[\"variable2\"], how=JoinType::Inner, suffix=None).unwrap();\n```", "```py\nlet df1: DataFrame = df!(\"Carrier\" => &[\"HA\", \"EV\", \"VX\", \"DL\"],\n                         \"ArrDelay\" => &[-3, 28, 0, 1]).unwrap();\nlet df2: DataFrame = df!(\"Airline\" => &[\"HA\", \"EV\", \"OO\", \"VX\"],\n                         \"DepDelay\" => &[21, -8, 11, -4]).unwrap();\n\nlet df3: DataFrame = df1.join(&df2, [\"Carrier\"], [\"Airline\"], JoinType::Inner, None).unwrap();\n// or: let df3: DataFrame = df1.inner_join(&df2, [\"Carrier\"], [\"Airline\"]).unwrap();\nprintln!(\"{:?}\", df3.head(Some(5)));\n\n// Output:\n\n// shape: (3, 3)\n// ┌─────────┬──────────┬──────────┐\n// │ Carrier ┆ ArrDelay ┆ DepDelay │\n// │ ---     ┆ ---      ┆ ---      │\n// │ str     ┆ i32      ┆ i32      │\n// ╞═════════╪══════════╪══════════╡\n// │ HA      ┆ -3       ┆ 21       │\n// │ EV      ┆ 28       ┆ -8       │\n// │ VX      ┆ 0        ┆ -4       │\n// └─────────┴──────────┴──────────┘\n```", "```py\nlet df1: DataFrame = df!(\"Carrier\" => &[\"HA\", \"EV\", \"VX\", \"DL\"],\n                         \"ArrDelay\" => &[-3, 28, 0, 1]).unwrap();\nlet df2: DataFrame = df!(\"Airline\" => &[\"HA\", \"EV\", \"OO\", \"VX\"],\n                         \"DepDelay\" => &[21, -8, 11, -4]).unwrap();\n\n// left join\nlet df3: DataFrame = df1.left_join(&df2, [\"Carrier\"], [\"Airline\"]).unwrap();\nprintln!(\"{:?}\", df3.head(Some(5)));\n\n// Right join\nlet df4: DataFrame = df2.left_join(&df1, [\"Airline\"], [\"Carrier\"]).unwrap();\nprintln!(\"{:?}\", df4.head(Some(5)));\n\nlet df5: DataFrame = df1.outer_join(&df2, [\"Carrier\"], [\"Airline\"]).unwrap();\nprintln!(\"{:?}\", df5.head(Some(5)));\n\n// Output:\n\n// Left Join\n// shape: (4, 3)\n// ┌─────────┬──────────┬──────────┐\n// │ Carrier ┆ ArrDelay ┆ DepDelay │\n// │ ---     ┆ ---      ┆ ---      │\n// │ str     ┆ i32      ┆ i32      │\n// ╞═════════╪══════════╪══════════╡\n// │ HA      ┆ -3       ┆ 21       │\n// │ EV      ┆ 28       ┆ -8       │\n// │ VX      ┆ 0        ┆ -4       │\n// │ DL      ┆ 1        ┆ null     │\n// └─────────┴──────────┴──────────┘\n\n// Right Join\n// shape: (4, 3)\n// ┌─────────┬──────────┬──────────┐\n// │ Airline ┆ DepDelay ┆ ArrDelay │\n// │ ---     ┆ ---      ┆ ---      │\n// │ str     ┆ i32      ┆ i32      │\n// ╞═════════╪══════════╪══════════╡\n// │ HA      ┆ 21       ┆ -3       │\n// │ EV      ┆ -8       ┆ 28       │\n// │ OO      ┆ 11       ┆ null     │\n// │ VX      ┆ -4       ┆ 0        │\n// └─────────┴──────────┴──────────┘\n\n// Outer Join\n// shape: (5, 3)\n// ┌─────────┬──────────┬──────────┐\n// │ Carrier ┆ ArrDelay ┆ DepDelay │\n// │ ---     ┆ ---      ┆ ---      │\n// │ str     ┆ i32      ┆ i32      │\n// ╞═════════╪══════════╪══════════╡\n// │ HA      ┆ -3       ┆ 21       │\n// │ EV      ┆ 28       ┆ -8       │\n// │ OO      ┆ null     ┆ 11       │\n// │ VX      ┆ 0        ┆ -4       │\n// │ DL      ┆ 1        ┆ null     │\n// └─────────┴──────────┴──────────┘\n```"]