["```py\ncv2.dilate(img, kernel,iterations=random.randint(1, 3))\n```", "```py\nimport random\nimport cv2\nimport numpy as np\nimport albumentations as A\n\n#gets PIL image and returns augmented PIL image\ndef augment_img(img):\n  #only augment 3/4th the images\n  if random.randint(1, 4) > 3:\n      return img\n\n  img = np.asarray(img)     #convert to numpy for opencv\n\n  # morphological alterations\n  kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(3,3))\n  if random.randint(1, 5) == 1:\n    # dilation because the image is not inverted\n    img = cv2.erode(img, kernel, iterations=random.randint(1, 2))\n  if random.randint(1, 6) == 1:\n    # erosion because the image is not inverted\n    img = cv2.dilate(img, kernel,iterations=random.randint(1, 1))\n\n  transform = A.Compose([\n\n    A.OneOf([\n      #add black pixels noise\n      A.OneOf([\n             A.RandomRain(brightness_coefficient=1.0, drop_length=2, drop_width=2, drop_color = (0, 0, 0), blur_value=1, rain_type = 'drizzle', p=0.05), \n              A.RandomShadow(p=1),\n              A.PixelDropout(p=1),\n         ], p=0.9),\n\n      #add white pixels noise\n      A.OneOf([\n              A.PixelDropout(dropout_prob=0.5,drop_value=255,p=1),\n             A.RandomRain(brightness_coefficient=1.0, drop_length=2, drop_width=2, drop_color = (255, 255, 255), blur_value=1, rain_type = None, p=1), \n        ], p=0.9),\n    ], p=1),\n\n    #transformations\n    A.OneOf([\n            A.ShiftScaleRotate(shift_limit=0, scale_limit=0.25, rotate_limit=2, border_mode=cv2.BORDER_CONSTANT, value=(255,255,255),p=1),\n            A.ShiftScaleRotate(shift_limit=0.1, scale_limit=0, rotate_limit=8, border_mode=cv2.BORDER_CONSTANT, value=(255,255,255),p=1),\n            A.ShiftScaleRotate(shift_limit=0.02, scale_limit=0.15, rotate_limit=11, border_mode=cv2.BORDER_CONSTANT, value=(255,255,255),p=1),  \n            A.Affine(shear=random.randint(-5, 5),mode=cv2.BORDER_CONSTANT, cval=(255,255,255), p=1)          \n       ], p=0.5),\n    A.Blur(blur_limit=5,p=0.25),\n  ])\n  img = transform(image=img)['image']  \n  image = Image.fromarray(img)   \n  return image\n```"]