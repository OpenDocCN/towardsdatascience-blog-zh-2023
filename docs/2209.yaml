- en: 'Plotly and Pandas: Combining Forces for Effective Data Visualization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/plotly-and-pandas-combining-forces-for-effective-data-visualization-2e2caad52de9?source=collection_archive---------1-----------------------#2023-07-10](https://towardsdatascience.com/plotly-and-pandas-combining-forces-for-effective-data-visualization-2e2caad52de9?source=collection_archive---------1-----------------------#2023-07-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A quick guide inspired by Storytelling with Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@andreas030503?source=post_page-----2e2caad52de9--------------------------------)[![Andreas
    Lukita](../Images/8660ca1fea5da34ce3475281c1f52152.png)](https://medium.com/@andreas030503?source=post_page-----2e2caad52de9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2e2caad52de9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2e2caad52de9--------------------------------)
    [Andreas Lukita](https://medium.com/@andreas030503?source=post_page-----2e2caad52de9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F955ef38ea7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotly-and-pandas-combining-forces-for-effective-data-visualization-2e2caad52de9&user=Andreas+Lukita&userId=955ef38ea7b&source=post_page-955ef38ea7b----2e2caad52de9---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2e2caad52de9--------------------------------)
    ·13 min read·Jul 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2e2caad52de9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotly-and-pandas-combining-forces-for-effective-data-visualization-2e2caad52de9&user=Andreas+Lukita&userId=955ef38ea7b&source=-----2e2caad52de9---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e2caad52de9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fplotly-and-pandas-combining-forces-for-effective-data-visualization-2e2caad52de9&source=-----2e2caad52de9---------------------bookmark_footer-----------)![](../Images/ebf4113c2f0c2035c54b29e283f48bba.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Luke Chesser](https://unsplash.com/@lukechesser?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: “My data visualization skill sucks. My audiences seemed unimpressed with my
    work, and worse, they are not convinced.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There was once upon a time many of us bumped into this issue. Unless you are
    gifted or happened to take up a design course before, it could be quite challenging
    and time-consuming to produce visually aesthetic charts that are intuitive to
    the audiences at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what crosses my mind back then: I want to be more intentional in crafting
    my charts such that it conveys information to my audience intuitively. By that,
    I mean not expending their brainpower and consuming their time excessively just
    to make sense of what is happening.'
  prefs: []
  type: TYPE_NORMAL
- en: I used to think that switching from Matplotlib to Seaborn and finally to Plotly
    solve the aesthetics concern. Indeed, I was wrong. Visualization is not simply
    about aesthetics. Below are two visualizations I attempted to replicate from [**Storytelling
    with Data**](https://www.storytellingwithdata.com/books)[¹](#c0da) by Cole Nussbaumer
    Knaflic that really inspire me to change my approach to visualization. They look
    clean, elegant, and purposeful. We are going to attempt to replicate these charts
    in this article!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e0c7078ff69b9e985ca570ea007dd7fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Here is the takeaway of this post. If you are looking for an in-depth explanation
    of the concepts behind great visualization, check out [**Storytelling with Data**](https://www.storytellingwithdata.com/books)[¹](#c0da),
    every page is a gem worth your time. If you are looking for tool-specific and
    practical advice, you are at the right place. Cole mentioned at the start of her
    book that the advice she presented is universal and tool-agnostic, although she
    admitted that she created the examples in the book using Excel. Some people, myself
    included, are not fans of Excel and drag-and-drop tools for many reasons. Some
    prefer creating visualizations using Python, R, and some other programming languages.
    If you are part of this segment and use Python as your primary tool, then this
    article is for you.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of Contents**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chaining—Pandas Plot](#1692)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Horizontal Bar Chart](#3a5b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Line Chart](#c7c0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bonus: Number Chart](#f9bd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaining—Pandas Plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are somewhat of an expert or a seasoned player in using Pandas for data
    wrangling, you might encounter or even adopt the idea of “Chaining” yourself.
    In short, chaining allows your code to be a lot more readable, easier to debug,
    and production ready. Here is a simple example of what I am referring to. You
    don’t have to read line by line, just take a quick look to get the idea behind
    “Chaining”. Every step is clear and easy to explain, and the code is well organized
    with no unnecessary intermediary variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is great, but did you know that you can continue the chaining process to
    create basic visualization charts as well? Pandas Plot, by default, uses Matplotlib
    backend for this purpose. Let’s see how it works and reproduce some of the examples
    Cole created in her book.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have a DataFrame that looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84a2c24ea3bb89a4b19802d54d897513.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the fastest way to generate a basic visualization chart. By chaining
    the `**.plot**` attribute and `**.line**` method directly from a DataFrame, we
    obtain the plot below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81d8240aa16cfed92f5331d1a743cfb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Hold your reaction and judgment if you think the plot above does not pass the
    aesthetic check. Indeed, it looks ugly, to say the least. Let’s spice this up
    and do better. Here’s the trick, switch your Pandas plotting backend from Matplotlib
    to Plotly for the magic that is about to unravel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You might be questioning, “Why do I change it to Plotly? Isn’t Matplotlib capable
    of doing the same thing?” Well, here’s the difference.
  prefs: []
  type: TYPE_NORMAL
- en: If we use the Matplotlib backend in Pandas, it returns an Axes object, try verifying
    yourself using the built-in `**type()**` method. This is great because the axes
    object allows us to access methods to further modify our chart. Check out [**this
    documentation**](https://matplotlib.org/stable/api/axes_api.html)[²](#6c79) for
    the possible methods to perform on Axes object. Let’s pick one to illustrate quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b2a6718bfd604c840e5a68ec55bb6f37.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We successfully set the x-axis label to “concerns per 1,000”, but in doing so,
    we return a **Text object** and lost our precious Axis object that allows us access
    to precious methods to further modify our chart. Too bad!
  prefs: []
  type: TYPE_NORMAL
- en: Here is an alternative to get around the limitation above,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5475ec8625e7a2707f686231452167a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: However, we are still unable to do extensive modification as the integration
    is quite limited by the Pandas' implementation [here](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.line.html).
  prefs: []
  type: TYPE_NORMAL
- en: Plotly, on the other hand, does not return an Axes object. It returns a `**go.Figure**`
    object. The difference here is that the methods responsible for updating the charts
    also return you a `**go.Figure**` object, which allows you to continue chaining
    your method to further update your chart. Let’s try that out!
  prefs: []
  type: TYPE_NORMAL
- en: By the way, in case you are wondering how I get the combinations of methods
    and arguments below, they are all available on the official documentation [**here**](https://plotly.com/python/reference/)[³](#d230).
  prefs: []
  type: TYPE_NORMAL
- en: Here are some important methods to get you started — `**.update_traces**`, `**.add_traces**`,
    `**.update_layout**`, `**.update_xaxes**`, `**.update_yaxes**`, `**.add_annotation**`,
    `**.update_annotations**`.
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal Bar Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s define a set of color palettes for our visualization below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/db264fa9ec19163a32fc86bbe4ce0dab.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Here, we want to highlight the concerns that are equal to and above 10 percent
    by defining a separate color.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We then **create the plot** right from the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3fe7427a696bcc9dd0e45f64757d7497.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating the layout** yields the following. Here, we specify the template,
    add a title and margin to our plot, and specify the size of our figure object.
    Let’s comment on the annotations for the moment.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9f9e680c298b446f2bd4438dba507fd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating the x and y-axis** properties yields the following.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1992c43a88c549ad73cf1f20a019f1cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, we will **add some annotations** to our chart. Here, we
    have a few annotations — adding data labels to the horizontal bar chart and footnote.
    Let’s do this together. First, we define the annotations on a separate cell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a14eac1ad8462b42654b67619b3bcab2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Isn’t this a much better chart relative to the initial default version? Let’s
    continue to explore another popular chart — The Line Chart.
  prefs: []
  type: TYPE_NORMAL
- en: Just a heads up that the example below is more complicated than the one above.
    Nevertheless, the idea remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: Line Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take a quick look at the default Matplotlib plotting backend for Line
    Chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0a0535be21136b6eb98f29a3ac248407.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s switch our plotting backend to Plotly!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After switching the Pandas plotting backend to Plotly, the code above gives
    us the following. Here, we start by plotting only the **Received** Series.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2b3d92eac1425f37494883be862ff3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s **update the line property** by further chaining the method above. Here,
    we modify the color, width and placing markers at the data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/48c6617d8704caf6700058f913a29429.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add the **Processed** Series to the chart!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/220c575f88cc0b5d4184fa3c871352cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s **add a vertical line** at index May in order to show the point at which
    the two lines start to diverge.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e0323738cfa1025cc3dc542a4d29a2ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s **update the overall layout** by changing the background to white,
    and adding the title, margin, and some other elements. For annotations, we will
    comment out at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/14a916f53e579673243c1abd15721a3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will perform an **update to both the x and y-axes**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7888dc10f6998595f2f293c84187902c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, we will **add some annotations** to our chart. Here, we
    have a few annotations—adding labels to the line chart (Received, Processed),
    as well as adding labels to scatter points, which could be a little complicated.
    Let’s do this together. First, we define the annotations on a separate cell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: After we define the annotations, we just need to **put the annotation variable
    inside the chaining method** like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/78e372fbe94aef457708aac29d14b017.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Number Chart'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations on getting to this part of the article! Here is an additional
    plot for you to take away! Here we are creating a chart to aesthetically present
    a number by itself. In short, this is what I am referring to.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e565f6866894e1b6380310ee9f3bafd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Since this is not a result of a DataFrame, we can start off by creating an empty
    `**go.Figure**` object from scratch, then gradually add on the annotations. We
    then end off by updating the layout accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Afterword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There you have it! The key is to update and refine your plot step by step until
    you achieve a desirable result. Of course, every technique comes with its own
    limitations. If your chart is getting way too complicated to produce, it might
    be beneficial to refer to Plotly Express or even build everything from scratch
    using Plotly Graph Objects. It may seem difficult and unfamiliar to adopt this
    technique at first, but keep practicing and soon you will create beautiful visualization
    that makes sense!
  prefs: []
  type: TYPE_NORMAL
- en: If you pick up something useful from this article, do consider giving me a [***Follow***](https://medium.com/@andreas030503)
    on Medium. Easy, 1 article a week to keep yourself updated and stay ahead of the
    curve!
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*LinkedIn*](https://www.linkedin.com/in/andreaslukita7/)👔'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Twitter*](https://twitter.com/andreaslukita7)🖊'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storytelling with Data by Cole Nussbaumer Knaflic. [https://www.storytellingwithdata.com/books](https://www.storytellingwithdata.com/books)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Matplotlib Axes API. [https://matplotlib.org/stable/api/axes_api.html](https://matplotlib.org/stable/api/axes_api.html)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plotly Graphing Libraries. [https://plotly.com/python/reference/](https://plotly.com/python/reference/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
