["```py\n# install the packages\nimport pandas as pd # for data manipulation \nimport networkx as nx # for drawing graphs\nimport matplotlib.pyplot as plt # for drawing graphs\n\n!pip install pybbn\n# for creating Bayesian Belief Networks (BBN)\nfrom pybbn.graph.dag import Bbn\nfrom pybbn.graph.edge import Edge, EdgeType\nfrom pybbn.graph.jointree import EvidenceBuilder\nfrom pybbn.graph.node import BbnNode\nfrom pybbn.graph.variable import Variable\nfrom pybbn.pptc.inferencecontroller import InferenceController\n\n# Create nodes by manually typing in probabilities\nSymptom = BbnNode(Variable(0, 'Symptom', ['Non-Malignant', 'Malignant']), [0.30658, 0.69342])\nStage = BbnNode(Variable(1, 'Stage', ['Stage_III_IV', 'Stage_I_II']), [0.92827, 0.07173, \n                                                      0.55760, 0.44240])\nTreatmentTypeCat = BbnNode(Variable(2, 'TreatmentTypeCat', ['Adjuvant/Neoadjuvant', 'Treatment', 'Therapy']), [0.58660, 0.24040, 0.17300])\nAppointment_2weeks = BbnNode(Variable(3, 'Appointment_2weeks', ['No', 'Yes']), [0.92314, 0.07686, \n                                                0.89072, 0.10928, \n                                                0.76008, 0.23992, \n                                                0.64250, 0.35750, \n                                                0.49168, 0.50832, \n                                                0.32182, 0.67818])\n```", "```py\n# This function helps to calculate probability distribution, which goes into BBN (note, can handle up to 2 parents)\ndef probs(data, child, parent1=None, parent2=None):\n    if parent1==None:\n        # Calculate probabilities\n        prob=pd.crosstab(data[child], 'Empty', margins=False, normalize='columns').sort_index().to_numpy().reshape(-1).tolist()\n    elif parent1!=None:\n            # Check if child node has 1 parent or 2 parents\n            if parent2==None:\n                # Caclucate probabilities\n                prob=pd.crosstab(data[parent1],data[child], margins=False, normalize='index').sort_index().to_numpy().reshape(-1).tolist()\n            else:    \n                # Caclucate probabilities\n                prob=pd.crosstab([data[parent1],data[parent2]],data[child], margins=False, normalize='index').sort_index().to_numpy().reshape(-1).tolist()\n    else: print(\"Error in Probability Frequency Calculations\")\n    return prob \n```", "```py\n# Create nodes by using our earlier function to automatically calculate probabilities\nSymptom = BbnNode(Variable(0, 'Symptom', ['Non-Malignant', 'Malignant']), probs(df, child='SymptomCat'))\nStage = BbnNode(Variable(1, 'Stage', ['Stage_I_II', 'Stage_III_IV']), probs(df, child='StagingCat', parent1='SymptomCat'))\nTreatmentTypeCat = BbnNode(Variable(2, 'TreatmentTypeCat', ['Adjuvant/Neoadjuvant', 'Treatment', 'Therapy']), probs(df, child='TreatmentTypeCat'))\nAppointment_2months = BbnNode(Variable(3, 'Appointment_2months', ['No', 'Yes']), probs(df, child='Appointment_2months', parent1='StagingCat', parent2='TreatmentTypeCat'))\n\n# Create Network\nbbn = Bbn() \\\n    .add_node(Symptom) \\\n    .add_node(Stage) \\\n    .add_node(TreatmentTypeCat) \\\n    .add_node(Appointment_2months) \\\n    .add_edge(Edge(Symptom, Stage, EdgeType.DIRECTED)) \\\n    .add_edge(Edge(Stage, Appointment_2months, EdgeType.DIRECTED)) \\\n    .add_edge(Edge(TreatmentTypeCat, Appointment_2months, EdgeType.DIRECTED))\n\n# Convert the BBN to a join tree\njoin_tree = InferenceController.apply(bbn)\n```", "```py\n# Define a function for printing marginal probabilities\n# Probabilities for each node\ndef print_probs():\n    for node in join_tree.get_bbn_nodes():\n        potential = join_tree.get_bbn_potential(node)\n        print(\"Node:\", node)\n        print(\"Values:\")\n        print(potential)\n        print('----------------')\n\n# Use the above function to print marginal probabilities\nprint_probs()\n```", "```py\nNode: 1|Stage|Stage_I_II,Stage_III_IV\nValues:\n1=Stage_I_II|0.67124\n1=Stage_III_IV|0.32876\n----------------\nNode: 0|Symptom|Non-Malignant,Malignant\nValues:\n0=Non-Malignant|0.69342\n0=Malignant|0.30658\n----------------\nNode: 2|TreatmentTypeCat|Adjuvant/Neoadjuvant,Treatment,Therapy\nValues:\n2=Adjuvant/Neoadjuvant|0.58660\n2=Treatment|0.17300\n2=Therapy|0.24040\n----------------\nNode: 3|Appointment_2weeks|No,Yes\nValues:\n3=No|0.77655\n3=Yes|0.22345\n----------------\n```", "```py\n# To add evidence of events that happened so probability distribution can be recalculated\ndef evidence(ev, nod, cat, val):\n    ev = EvidenceBuilder() \\\n    .with_node(join_tree.get_bbn_node_by_name(nod)) \\\n    .with_evidence(cat, val) \\\n    .build()\n    join_tree.set_observation(ev)\n\n# Add more evidence\nevidence('ev1', 'Stage', 'Stage_I_II', 1.0)\nevidence('ev2', 'TreatmentTypeCat', 'Therapy', 1.0)\n# Print marginal probabilities\nprint_probs()\n```", "```py\nNode: 1|Stage|Stage_I_II,Stage_III_IV\nValues:\n1=Stage_I_II|1.00000\n1=Stage_III_IV|0.00000\n----------------\nNode: 0|Symptom|Non-Malignant,Malignant\nValues:\n0=Non-Malignant|0.57602\n0=Malignant|0.42398\n----------------\nNode: 2|TreatmentTypeCat|Adjuvant/Neoadjuvant,Treatment,Therapy\nValues:\n2=Adjuvant/Neoadjuvant|0.00000\n2=Treatment|0.00000\n2=Therapy|1.00000\n----------------\nNode: 3|Appointment_2months|No,Yes\nValues:\n3=No|0.89072\n3=Yes|0.10928\n----------------\n```"]