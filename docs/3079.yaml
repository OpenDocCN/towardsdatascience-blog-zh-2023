- en: Modeling Games with Markov Chains
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用马尔可夫链建模游戏
- en: 原文：[https://towardsdatascience.com/modeling-games-with-markov-chains-c7b614731a7f?source=collection_archive---------5-----------------------#2023-10-09](https://towardsdatascience.com/modeling-games-with-markov-chains-c7b614731a7f?source=collection_archive---------5-----------------------#2023-10-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/modeling-games-with-markov-chains-c7b614731a7f?source=collection_archive---------5-----------------------#2023-10-09](https://towardsdatascience.com/modeling-games-with-markov-chains-c7b614731a7f?source=collection_archive---------5-----------------------#2023-10-09)
- en: Exploring Probabilistic Modeling using “Shut the Box”
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索使用“封箱游戏”的概率建模
- en: '[](https://medium.com/@ktmorton17?source=post_page-----c7b614731a7f--------------------------------)[![Kairo
    Morton](../Images/5d4e978e42280add588fd77a05fc44af.png)](https://medium.com/@ktmorton17?source=post_page-----c7b614731a7f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7b614731a7f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7b614731a7f--------------------------------)
    [Kairo Morton](https://medium.com/@ktmorton17?source=post_page-----c7b614731a7f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ktmorton17?source=post_page-----c7b614731a7f--------------------------------)[![Kairo
    Morton](../Images/5d4e978e42280add588fd77a05fc44af.png)](https://medium.com/@ktmorton17?source=post_page-----c7b614731a7f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7b614731a7f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7b614731a7f--------------------------------)
    [Kairo Morton](https://medium.com/@ktmorton17?source=post_page-----c7b614731a7f--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F475e9134255d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-games-with-markov-chains-c7b614731a7f&user=Kairo+Morton&userId=475e9134255d&source=post_page-475e9134255d----c7b614731a7f---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7b614731a7f--------------------------------)
    ·14 min read·Oct 9, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc7b614731a7f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-games-with-markov-chains-c7b614731a7f&user=Kairo+Morton&userId=475e9134255d&source=-----c7b614731a7f---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F475e9134255d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-games-with-markov-chains-c7b614731a7f&user=Kairo+Morton&userId=475e9134255d&source=post_page-475e9134255d----c7b614731a7f---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7b614731a7f--------------------------------)
    ·14分钟阅读·2023年10月9日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc7b614731a7f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-games-with-markov-chains-c7b614731a7f&user=Kairo+Morton&userId=475e9134255d&source=-----c7b614731a7f---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc7b614731a7f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-games-with-markov-chains-c7b614731a7f&source=-----c7b614731a7f---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc7b614731a7f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmodeling-games-with-markov-chains-c7b614731a7f&source=-----c7b614731a7f---------------------bookmark_footer-----------)'
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: From playing cards with friends to winning money at the roulette table, the
    joy of a great game is irresistible to most. But no matter how fun, after a few
    losses even the most optimistic of players can’t help but ask “Is the game rigged?”
    For those of us with some knowledge of probability leaving this question unanswered
    can feel unsatisfying to say the least. In this post we will explore a type of
    probabilistic model for answering questions of this kind. Specifically, I will
    show how Markov Chains can be applied to the game “Shut the Box,” in hopes of
    inspiring you to use probability to answer your own game related questions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从和朋友玩牌到在轮盘桌上赢取钱财，精彩游戏的乐趣对大多数人来说是不可抗拒的。但无论多么有趣，即使是最乐观的玩家在经历几次失败后也会不禁问道：“这个游戏是否被操控了？”对于我们这些对概率有一定了解的人来说，不解答这个问题可能会感到不满足。在这篇文章中，我们将探讨一种用于回答此类问题的概率模型。具体来说，我将展示如何将马尔可夫链应用于“封箱游戏”，希望能激励你用概率来回答自己关于游戏的问题。
- en: What is a Markov Chain and How do they Relate to Games?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是马尔可夫链，它们与游戏有什么关系？
- en: 'Markov Chains are a kind of probabilistic model that are simple, well-studied
    and enable the modeling of many real world stochastic processes. Specifically,
    the goal of a Markov Chain is to model a probabilistic sequence of events where
    the events are taken from a set known as the states. In order to achieve this
    goal, the Markov Chain stores the probability of transitioning between any two
    states in a matrix known as the transition matrix. In addition to the states and
    the transition matrix, that specify the behavior of the stochastic process, the
    defining characteristic of a Markov Chain is the Markov property. Intuitively,
    this property asserts that the current state must hold the necessary information
    to determine the probability of transitioning to any next state irrespective of
    which states have previously occurred in the sequence. As such, any stochastic
    process where this property holds can be modeled using a Markov Chain, making
    it a very powerful tool. To get a better sense for these concepts, and Markov
    chains in general, let’s look at an example of a simple game:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 马尔可夫链是一种简单、研究充分的概率模型，能够建模许多现实世界的随机过程。具体来说，马尔可夫链的目标是建模一个概率事件序列，其中事件来自一个称为状态的集合。为了实现这个目标，马尔可夫链将任何两个状态之间的转换概率存储在一个称为转换矩阵的矩阵中。除了状态和转换矩阵，这些定义了随机过程的行为，马尔可夫链的一个定义特征是马尔可夫性质。直观地说，这个性质声明当前状态必须持有必要的信息，以确定转移到任何下一个状态的概率，而不管序列中之前发生了哪些状态。因此，任何满足这个性质的随机过程都可以使用马尔可夫链进行建模，这使得它成为一个非常强大的工具。为了更好地理解这些概念以及马尔可夫链的一般性质，我们来看一个简单游戏的例子：
- en: Let’s say you were going to gamble on a sequence of fair coin flips. At the
    beginning of the game you start with $5 and before each coin flip you predict
    the outcome (heads or tails). For each coin flip if you guess correctly you gain
    a dollar and if you guess incorrectly you lose a dollar. The game ends when either
    you reach $0 or $10.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你要在一系列公平的抛硬币中进行赌博。在游戏开始时，你有 $5，每次抛硬币前你预测结果（正面或反面）。每次抛硬币如果你猜对了，你会赢得一美元，如果猜错了，你会输掉一美元。当你达到
    $0 或 $10 时，游戏结束。
- en: 'If we let the states of the game be defined by the player’s cash balance after
    each coin flip, the Markov property holds and luckily we can model this game using
    a Markov chain! Graphically, we can represent the states and transition probabilities
    of this Markov Chain as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将游戏的状态定义为每次抛硬币后的玩家现金余额，马尔可夫性质成立，并且幸运的是我们可以使用马尔可夫链建模这个游戏！在图形上，我们可以如下表示马尔可夫链的状态和转换概率：
- en: '![](../Images/e09c74b97381a79b6927b984c049adb2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e09c74b97381a79b6927b984c049adb2.png)'
- en: In the diagram above the orange circles represent the game states and the arrows
    represent the probability of transitioning between states. Note that all transition
    probabilities are 0.5 as changing states requires correctly guessing the outcome
    of a fair coin flip. Additionally, states 0 and 10 have an arrow pointing to themselves
    labeled with a probability 1 as they are the end states of the game.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，橙色圆圈代表游戏状态，箭头表示状态之间的转换概率。注意所有的转换概率都是 0.5，因为改变状态需要正确猜测公平抛硬币的结果。此外，状态 0 和
    10 有一个指向自己的箭头，标记为概率 1，因为它们是游戏的结束状态。
- en: As you will see later in this article by modeling a game in this fashion we
    can answer many interesting questions. For instance,
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将在本文后面看到的，通过这种方式建模一个游戏，我们可以回答许多有趣的问题。例如，
- en: What is the expected win/loss probability?
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 期望的胜率/失败概率是多少？
- en: How many steps (coin flips) will it take to win/lose the game on average?
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平均需要多少步（抛硬币）才能赢得或输掉游戏？
- en: After t steps (coin flips) what is the probability distribution over the game
    states?
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 t 步（抛硬币）之后，游戏状态的概率分布是什么？
- en: After reading the rest of this post, I urge you to return to this section, and
    consider how to answer these questions for the simple game presented above.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这篇文章的其余部分后，我建议你回到这一部分，考虑如何回答上述简单游戏的问题。
- en: “Shut the Box” Game Explained
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “掩盖盒子”游戏解释
- en: To truly explore some of the complexities related to probabilistic modeling
    with Markov Chains, we will focus our efforts on the game “Shut the Box.” I stumbled
    upon this game while scrolling Instagram Reels and with a vague understanding
    of the rules, I set out to determine how hard it was to win.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了真正深入探讨与马尔可夫链相关的概率建模复杂性，我们将把重点放在游戏“掩盖盒子”上。我在浏览 Instagram Reels 时偶然发现了这个游戏，对规则有模糊的理解，我开始试图确定获胜的难度。
- en: '![](../Images/b2da70dc5417aef72248984cc104c795.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2da70dc5417aef72248984cc104c795.png)'
- en: Roland Scheicher / Roland Scheicher at German Wikipedia, Public domain, via
    Wikimedia Commons
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Roland Scheicher / Roland Scheicher 于德国维基百科，公共领域，通过维基共享资源
- en: 'Shut the Box is a multiplayer game played using a board (shown above) consisting
    of nine tiles (labeled 1 through 9) and two six-sided dice. On each player’s turn,
    all of the tiles start in the upright position. Then, the two dice are rolled,
    and the player is allowed to flip down any tiles whose sum equals the combined
    value of the two dice. The player then repeats this process of rolling the dice
    and flipping down tiles until there exists no subset of upright tiles that sum
    to the combined value of the two dice. At this point, the player’s turn is over,
    and their score is the sum of tiles that are still upright on the board. In this
    version of the game, after all player’s have finished their turns, the player
    with the lowest score is deemed the winner. However, if a player’s turn ends because
    they were able to flip down all of the tiles (i.e. “shut the box”), they automatically
    win the game. It was this rule in particular that caught my attention, and thus
    will be the focus of this exploration. Specifically, I wanted to answer the question:
    how hard is it to “shut the box?”'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “关闭箱子”是一个多人游戏，使用一个包含九个瓷砖（标记为 1 到 9）和两个六面骰子的棋盘（如上图所示）进行。每个玩家的回合开始时，所有瓷砖都处于竖立位置。然后，掷两个骰子，玩家可以翻下任何总和等于两个骰子总值的瓷砖。接着，玩家重复掷骰子和翻下瓷砖的过程，直到没有任何一个竖立的瓷砖子集的总和等于两个骰子的总值为止。这时，玩家的回合结束，得分为棋盘上仍竖立的瓷砖的总和。在这个版本的游戏中，在所有玩家完成回合后，得分最低的玩家被认为是赢家。然而，如果玩家的回合因为能够翻下所有瓷砖（即“关闭箱子”）而结束，则他们自动赢得游戏。正是这个规则引起了我的注意，因此将成为本次探讨的重点。具体来说，我想回答的问题是：关闭箱子有多难？
- en: Modeling “Shut the Box” using a Markov Chain
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用马尔可夫链建模“关闭箱子”
- en: From the previous sections it may be clear that we now should model “Shut the
    Box” as a Markov Chain. While this may seem like an intuitive next step, let’s
    ensure this is possible by checking whether the Markov property holds. To do this
    we will define the unique states of this game as all subsets of the set {1, 2,
    3, 4, 5, 6, 7, 8, 9}. This is because any moment during a player’s turn can be
    uniquely characterized by which tiles are flipped up and down. Numerically, we
    can think of these states as being 9 digit binary numbers (an upright tile is
    a 1) of which there are 2⁹ giving 512 unique states. Under this definition of
    states, the Markov property holds as only the probabilistic characteristics of
    the dice, the current state and the game rules determine the probability of transitioning
    between states. Most importantly, given that we know the current state, the previous
    states reached during a player’s turn have no effect on the probability of reaching
    other states in the future.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的章节来看，现在应该将“关闭箱子”建模为一个马尔可夫链。虽然这看起来是一个直观的下一步，但让我们通过检查马尔可夫性质是否成立来确保这一点。为此，我们将游戏的唯一状态定义为集合
    {1, 2, 3, 4, 5, 6, 7, 8, 9} 的所有子集。这是因为玩家回合中的任何时刻都可以通过哪些瓷砖是翻转的来唯一表征。从数值上讲，我们可以将这些状态视为
    9 位二进制数字（竖立的瓷砖为 1），共有 2⁹ 种，给出 512 种唯一状态。在这种状态定义下，马尔可夫性质成立，因为只有骰子的概率特征、当前状态和游戏规则决定了状态之间转移的概率。最重要的是，鉴于我们知道当前状态，玩家回合中达到的前一个状态对未来达到其他状态的概率没有影响。
- en: Now that the states are well defined and we have confirmed that “Shut the Box”
    can indeed be modeled as a Markov Chain, the only element left to define is the
    transition matrix T. Specifically, Tᵢₖ (entry at ith row and kth column) represents
    the probability of transitioning from state i to state k. It is in determining
    these probabilities that the interesting complexities of modeling this game emerge.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在状态已经明确，我们也确认了“关闭箱子”确实可以被建模为一个马尔可夫链，剩下要定义的唯一元素是转移矩阵 T。具体来说，Tᵢₖ（第 i 行第 k 列的条目）表示从状态
    i 转移到状态 k 的概率。确定这些概率时，建模这个游戏的有趣复杂性就会显现出来。
- en: 'To figure out the probability of transitioning from one state to another we
    must answer the question “what actions must occur in the game to cause the state
    to change?” For our game of interest, “Shut the Box,” there are two probabilistic
    actions that take place to determine the next state: a dice roll and a selection
    of tiles to flip down. Let’s start by examining the role of the dice in transitioning
    between two states, i and k. We will first let Sᵢ and Sₖ be the sets containing
    the upright numbers in states i and k respectively. For the transition from state
    i to state k to have a non-zero probability it is clear that Sₖ must be a proper
    subset of Sᵢ. This is because the number of upright tiles must decrease when transitioning
    between states, and tiles cannot be flipped up once they are down. Under this
    state representation and the assumption that Sₖ ⊂ Sᵢ , the numbers flipped down
    in the process of transitioning between states i and k make up the set D = Sᵢ
    - Sₖ (elements in Sᵢ that are not in Sₖ).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算从一个状态转换到另一个状态的概率，我们必须回答这个问题：“在游戏中发生什么动作会导致状态发生变化？”对于我们感兴趣的游戏“关掉盒子”，有两个概率性动作决定下一个状态：掷骰子和选择翻下的瓷砖。让我们从检查骰子在状态
    i 和 k 之间转换的作用开始。我们首先让 Sᵢ 和 Sₖ 分别表示状态 i 和 k 中的竖立数字的集合。为了使从状态 i 到状态 k 的转换具有非零概率，很明显
    Sₖ 必须是 Sᵢ 的一个真子集。这是因为在状态之间转换时，竖立的瓷砖数量必须减少，而瓷砖一旦翻下就不能再翻回去。根据这种状态表示以及假设 Sₖ ⊂ Sᵢ，在状态
    i 和 k 之间转换过程中翻下的数字构成集合 D = Sᵢ - Sₖ（Sᵢ 中但不在 Sₖ 中的元素）。
- en: '![](../Images/caa293c2d4620ac3397b20d32de44706.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/caa293c2d4620ac3397b20d32de44706.png)'
- en: As such, one necessary condition for this transition to occur is the sum of
    the rolled dice must be equal to the sum of the elements in D. Formally the following
    equation must hold,
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这一转换发生的一个必要条件是掷出的骰子总和必须等于集合 D 中元素的总和。形式上，必须满足以下方程：
- en: '![](../Images/f99a44e7ef9664888115972320231132.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f99a44e7ef9664888115972320231132.png)'
- en: 'where X₁ and X₂ are discrete random variables representing the values of the
    two dice. If we let z be the sum of elements in D, the probability that the above
    equation holds with two six-sided dice can be derived as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 X₁ 和 X₂ 是表示两个骰子值的离散随机变量。如果我们让 z 是集合 D 中元素的总和，那么两个六面骰子的情况可以通过以下方法推导出上述方程成立的概率：
- en: '![](../Images/64fde9228eb62e89b8d86a4a010cdf2c.png)![](../Images/de6f430db029253a6cae621a5e9f940f.png)![](../Images/f2fccb5352f966e16ef1aa97b11fda6a.png)![](../Images/5c81934c6f2e40b46218b3ea0579c22d.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/64fde9228eb62e89b8d86a4a010cdf2c.png)![](../Images/de6f430db029253a6cae621a5e9f940f.png)![](../Images/f2fccb5352f966e16ef1aa97b11fda6a.png)![](../Images/5c81934c6f2e40b46218b3ea0579c22d.png)'
- en: In the case that z < 2 or z > 12, the probability of transitioning from state
    i to state k is zero as there does not exist a roll of two regular dice that sums
    to z.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 z < 2 或 z > 12，那么从状态 i 转移到状态 k 的概率为零，因为不存在两个普通骰子掷出的和为 z 的情况。
- en: While it may seem as if this is the only probabilistic computation needed to
    fill in the entries of the transition matrix, a state transition also requires
    the player to choose from a set of valid moves after the dice roll. Thus, to transition
    from state i to state k not only does the combined value of the dice need to be
    equal to z, but the player must also choose to flip down the tiles in set D instead
    of the possibly many other options consistent with the dice roll.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这看起来是填充转移矩阵条目所需的唯一概率计算，但状态转换还要求玩家在掷骰子后从一组有效的移动中进行选择。因此，从状态 i 转移到状态 k 不仅需要骰子的总和等于
    z，玩家还必须选择翻下集合 D 中的瓷砖，而不是根据骰子点数可能有的其他许多选项。
- en: To model this element of human strategy, we will assume the player chooses from
    the possible sets of tiles to flip down uniformly at random. Under this assumption,
    the probability that the player chooses state k is 1/Nᵢₖ, where Nᵢₖ is the number
    of non-empty subsets of Sᵢ that sum to z.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟这一人类策略元素，我们假设玩家从可能的瓷砖翻下集合中均匀随机选择。根据这一假设，玩家选择状态 k 的概率是 1/Nᵢₖ，其中 Nᵢₖ 是 Sᵢ
    中和为 z 的非空子集的数量。
- en: 'With the information above we can now formally define the entries of the transition
    matrix. Each entry in the transition matrix represents the probability of two
    events occurring:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上述信息，我们现在可以正式定义转移矩阵的条目。转移矩阵中的每个条目表示两个事件发生的概率：
- en: The sum of the dice two being equal to z (event 1)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 骰子总和等于 z（事件 1）
- en: The player randomly choosing to flip down the specific set of tiles that change
    the state from state i to state k (event 2)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家随机选择翻下特定的瓷砖组，从状态 i 变换到状态 k（事件 2）
- en: 'Thus, the entries of the transition matrix can be defined as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，转移矩阵的条目可以定义如下：
- en: '![](../Images/d529f5c6b030afbb4146e3743ffd9e84.png)![](../Images/614ca3e5a749498d811930b9b309c397.png)![](../Images/ea7c7d4d4eab7ac3cfe73ed8fa801206.png)![](../Images/2a71675f825f7ccd2c7f250b861318c7.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d529f5c6b030afbb4146e3743ffd9e84.png)![](../Images/614ca3e5a749498d811930b9b309c397.png)![](../Images/ea7c7d4d4eab7ac3cfe73ed8fa801206.png)![](../Images/2a71675f825f7ccd2c7f250b861318c7.png)'
- en: It is important to note that the above definition of the transition matrix does
    not consider the probability of a player’s turn ending. This can happen when either
    the player “shuts the box,” or no tiles can be flipped down after observing the
    dice roll value. In both of these cases, 1/Nᵢₖ is undefined and as such they must
    be handled independently.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，上述转移矩阵的定义没有考虑玩家回合结束的概率。这种情况可能发生在玩家“关闭盒子”时，或者在观察骰子掷出值后没有瓷砖可以翻下。在这两种情况下，1/Nᵢₖ
    是未定义的，因此必须单独处理。
- en: Under the aforementioned binary representation of states, state i = 0 suffices
    to represent “shutting the box” as all tiles are flipped down. Since this is the
    “win” state of the game, we can modify the transition matrix so the probability
    of staying in state 0 is 1 (i.e. T₀₀ = 1).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述状态的二进制表示，状态 i = 0 足以表示“关闭盒子”，因为所有瓷砖都被翻下。由于这是游戏的“胜利”状态，我们可以修改转移矩阵，使得在状态 0
    中停留的概率为 1（即 T₀₀ = 1）。
- en: 'Finally, we will add a “loss” state (L) to represent a player’s turn finishing
    due to an “unlucky” dice roll. Specifically, to incorporate this state into the
    transition matrix we need to know the probability that none of the subsets of
    Sᵢ sum to X₁ + X₂ (the sum of the two dice). While computing this quantity explicitly
    may be possible, we can define it relative to other transition matrix values as
    follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个“失败”状态（L），以表示由于“不幸”的掷骰结果玩家的回合结束。具体来说，要将此状态纳入转移矩阵，我们需要知道没有任何子集 Sᵢ 的和等于
    X₁ + X₂（两个骰子的和）的概率。虽然显式计算此量可能是可行的，但我们可以相对于其他转移矩阵值进行定义，如下所示：
- en: '![](../Images/dff385bf616368065164b5ad3fea5e4c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dff385bf616368065164b5ad3fea5e4c.png)'
- en: because each row in the transition matrix represents a probability distribution
    over states which must sum to one. Furthermore, since it is a final state of the
    game the probability of leaving the state is 0.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为转移矩阵中的每一行表示状态的概率分布，且这些概率必须加起来等于一。此外，由于这是游戏的最终状态，因此离开该状态的概率为 0。
- en: '![](../Images/ba8b343aeafec7a840a2d0415aeb35f3.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba8b343aeafec7a840a2d0415aeb35f3.png)'
- en: 'With the above results for the exact transition probabilities we are now able
    to utilize some of the great properties of Markov Chains to answer the question,
    how hard is it to “shut the box?” Specifically, we can answer the question: what
    is the probability that a player “shuts the box” using a completely random strategy?'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 利用上述确切的转移概率结果，我们现在可以利用马尔可夫链的一些重要属性来回答一个问题，那就是“关闭盒子”有多困难？具体来说，我们可以回答以下问题：玩家使用完全随机策略“关闭盒子”的概率是多少？
- en: Computing the Win Probability of “Shut the Box” using Python
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 计算“关闭盒子”的获胜概率
- en: 'In trying to compute the “win/loss” probability of this game, understanding
    the utility of the transition matrix is important. For a Markov chain the transition
    matrix enables us to explore how a probability distribution over the states evolves
    after a single transition using only one matrix-vector multiplication. Mathematically,
    we can write this simply as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试计算该游戏的“胜/负”概率时，了解转移矩阵的作用非常重要。对于马尔可夫链，转移矩阵使我们能够探讨状态上的概率分布如何在单次转移后演变，只需一个矩阵-向量乘法即可。数学上，我们可以简单地写成如下形式：
- en: '![](../Images/7a4bc65aba54aefb9b0fa433bd263acc.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7a4bc65aba54aefb9b0fa433bd263acc.png)'
- en: 'where T is the transition matrix and πₜ is a row vector representing the probability
    distribution over all the states after t transitions. Thus, given that we know
    the probability of being in any state currently we can answer the question, “what
    is the probability of being in any state after one dice roll given we choose tiles
    to flip down at random?” Furthermore, using our knowledge of the deterministic
    initial state of the game (all tiles flipped up) we can easily define π₀ and recursively
    multiply it by T to determine the distribution over the states after any arbitrary
    number of transitions (dice roll + tile flips). This recursion can be rewritten
    as the following closed form expression for πₜ:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 T 是转移矩阵，πₜ 是表示经过 t 次转移后所有状态的概率分布的行向量。因此，给定我们知道当前处于任何状态的概率，我们可以回答这样的问题：“如果我们随机选择要翻下的瓷砖，那么在一次骰子掷出后处于任何状态的概率是多少？”此外，利用我们对游戏初始状态（所有瓷砖都翻起）的确定性知识，我们可以很容易地定义
    π₀ 并递归地将其乘以 T，以确定经过任意数量的转移（掷骰子 + 翻瓷砖）后的状态分布。这个递归可以被重写为 πₜ 的以下封闭形式表达式：
- en: '![](../Images/b9a055ad971f390133acf7da4bcb012e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9a055ad971f390133acf7da4bcb012e.png)'
- en: The Markov chain that models “Shut the Box” has two final states, win and loss,
    that once entered cannot be left (a.k.a absorbing states). Thus, we can be sure
    that the distribution over all states will converge to a distribution over these
    two states after some finite number of transitions. Intuitively, for “Shut the
    Box”, this statement highlights the fact that a player’s turn must end with them
    either “shutting the box” or failing to do so and as such there is a finite limit
    on the number of moves a player can make in one turn.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟“关箱子”的马尔可夫链有两个最终状态：胜利和失败，一旦进入就不能离开（即吸收状态）。因此，我们可以确定，在经过一些有限数量的转移后，所有状态的分布将收敛到这两个状态的分布。直观地说，对于“关箱子”来说，这个声明突出了一个事实，即玩家的回合必须以“关箱子”或未能做到这一点而结束，因此在一轮回合中玩家可以进行的移动次数是有限的。
- en: 'To find this upper limit note that the longest turn occurs when the player
    flips down one tile after every dice roll until the tile labeled “1” is solely
    upright and thus they cannot “shut the box” on the following dice roll. This sequence
    of actions constitutes 9 moves in total to reach the final state as there are
    9 total tiles. As such, solving for the win/loss probability is as simple as setting
    t ≥ 9 and computing πₜ. After computing πₜ, the probability of a player “shutting
    the box” using a random strategy is the first entry in πₜ as it corresponds to
    the state with all tiles flipped down (S₀).Alternatively, the recursive process
    of evolving the state distribution can be repeated starting at 0 until the distribution
    converges. Additionally, there are faster methods for computing πₜ in this case
    that I will not cover in this post. They leverage the existence of absorbing states
    and a special definition of the transition matrix. Learn more here: [https://en.wikipedia.org/wiki/Absorbing_Markov_chain](https://en.wikipedia.org/wiki/Absorbing_Markov_chain)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到这个上限，注意到最长的回合发生在玩家每次掷骰子后翻下一块瓷砖，直到标记为“1”的瓷砖仅有竖立状态，因此在接下来的骰子掷出时他们无法“关箱子”。这个动作序列总共构成了
    9 次移动以达到最终状态，因为总共有 9 块瓷砖。因此，求解胜率/败率就像设置 t ≥ 9 并计算 πₜ 一样简单。计算 πₜ 后，玩家使用随机策略“关箱子”的概率是
    πₜ 中的第一个条目，因为它对应于所有瓷砖都翻倒的状态（S₀）。另外，递归过程可以从 0 开始重复，直到分布收敛。此外，对于这种情况，还有更快的方法来计算
    πₜ，我在此帖中不予讨论。它们利用了吸收状态的存在和转移矩阵的特殊定义。了解更多信息请访问：[https://en.wikipedia.org/wiki/Absorbing_Markov_chain](https://en.wikipedia.org/wiki/Absorbing_Markov_chain)
- en: To compute the win/loss probability in Python we will rely solely on the scientific
    computing library Numpy. First, we define the number of tiles, number of dice
    and the number states in the game as 9, 2 and 513 respectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Python 中计算胜率/败率，我们将完全依赖科学计算库 Numpy。首先，我们将瓷砖的数量、骰子的数量和游戏中的状态数量分别定义为 9、2 和
    513。
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using these simple parameters we can generate the set representation, Sᵢ, for
    every state using its binary string representation as shown below.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些简单的参数，我们可以生成每个状态的集合表示，Sᵢ，如下所示。
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here the Numpy binary_repr function is very helpful as it generates the binary
    representation of the state using the integer i. As such, by finding the positions
    of the ones in this string we can determine which tiles are upright in state i.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Numpy 的 `binary_repr` 函数非常有用，因为它使用整数 i 生成状态的二进制表示。因此，通过找到这个字符串中“1”的位置，我们可以确定在状态
    i 中哪些瓷砖是竖立的。
- en: 'After handling with the state representations, we then generate the transition
    matrix using the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理状态表示之后，我们使用以下代码生成转移矩阵：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, using the transition matrix we answer the core question of this exploration,
    what is the probability that a player “shuts the box” using a completely random
    strategy? To do this we must define the initial distribution, π₀, over all states
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用转移矩阵，我们回答了本次探索的核心问题：玩家使用完全随机策略“关闭盒子”的概率是多少？为此，我们必须定义初始分布 π₀，在所有状态上如下：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since the game always starts with all of the tiles upright, the distribution
    over states is a row vector of length 513 with zeros at all entries except for
    the 511th entry (zero-based indexing) where a one is placed. This is because the
    binary representation of 511 is the string ‘111111111’ which corresponds to the
    state with all tiles upright.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于游戏总是从所有瓷砖都竖立的状态开始，状态分布是一个长度为 513 的行向量，除了第 511 项（以零为基础的索引）外，所有条目都是零，其中放置了一个一。这是因为
    511 的二进制表示为字符串 '111111111'，这对应于所有瓷砖都竖立的状态。
- en: 'Once the initial distribution is defined the probability of “shutting the box”
    can be determined using the formula πₜ = π₀Tᵗ with t = 9 in order to find the
    converged distribution over states. Again, we can set t = 9 because π₉T = π₉ and
    as such using a value greater than nine for t leads to unnecessary computation.
    The code that accomplishes this is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了初始分布，就可以使用公式 πₜ = π₀Tᵗ 来确定“关闭盒子”的概率，其中 t = 9 以找到在状态上收敛的分布。再次强调，我们可以设定 t
    = 9，因为 π₉T = π₉，因此使用大于九的 t 值会导致不必要的计算。完成这一任务的代码如下：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this code snippet we make use of the Numpy functions matrix_power and matmul
    (matrix multiplication) to compute T₉ and π₉ respectively. Using these results
    the probability of “shutting the box” is simply stored as the first element of
    π₉ which corresponds to the state with no upright tiles (‘000000000’ in binary).
    Using this insight, we finally know that it is very hard to “shut the box” (~2%
    chance) when using a completely random strategy! (exact probability values are
    reported below).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，我们使用了 Numpy 的 matrix_power 和 matmul（矩阵乘法）函数来分别计算 T₉ 和 π₉。使用这些结果，“关闭盒子”的概率简单地存储为
    π₉ 的第一个元素，这对应于没有竖立瓷砖的状态（在二进制中为 '000000000'）。根据这一见解，我们最终知道，当使用完全随机策略时，“关闭盒子”是非常困难的（约
    2% 的机会）！ （精确概率值如下所示）。
- en: '![](../Images/58e8667b72046b2fa0064939ebccbe05.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58e8667b72046b2fa0064939ebccbe05.png)'
- en: 'The code and model formulation above with some modifications can be extended
    to support variants of shut the box with any number of tiles and any number of
    dice. As such, I have visualized a graph of the win probability as the number
    of dice and number of tiles change below:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码和模型公式经过一些修改后，可以扩展以支持任何数量的瓷砖和任何数量的骰子的“关闭盒子”变体。因此，我在下方可视化了随着骰子数量和瓷砖数量变化的获胜概率图：
- en: '![](../Images/4ab2b580093b226eaf40429bb0f91997.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ab2b580093b226eaf40429bb0f91997.png)'
- en: Conclusion
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Through this post we have explored Markov Chains and their specific application
    for answering questions about the game “Shut the Box.” Nonetheless, the techniques
    I have highlighted, with some critical thought and modifications, can be used
    to model a multitude of games. As such, while your chances of “shutting the box”
    may be 2 in 100, I am certain you will find more success using probabilistic modeling
    to answer your favorite game-related questions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这篇文章，我们探讨了马尔可夫链及其在回答“关闭盒子”游戏相关问题上的具体应用。然而，我所强调的技巧，通过一些关键思考和修改，可以用于建模多种游戏。因此，虽然你“关闭盒子”的机会可能是
    2/100，但我相信你会发现使用概率建模来回答你最喜欢的游戏相关问题会更成功。
- en: '*Unless otherwise noted, all images are by the author*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供*'
