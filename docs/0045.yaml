- en: Introducing PyDicom, Its Classes, Methods, and Attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-pydicom-its-classes-methods-and-attributes-518c1d71162?source=collection_archive---------4-----------------------#2023-01-04](https://towardsdatascience.com/introducing-pydicom-its-classes-methods-and-attributes-518c1d71162?source=collection_archive---------4-----------------------#2023-01-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PyDicom…Beyond Pixel Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@omar.ok1998?source=post_page-----518c1d71162--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----518c1d71162--------------------------------)[](https://towardsdatascience.com/?source=post_page-----518c1d71162--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----518c1d71162--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----518c1d71162--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-pydicom-its-classes-methods-and-attributes-518c1d71162&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----518c1d71162---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----518c1d71162--------------------------------)
    ·12 min read·Jan 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F518c1d71162&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-pydicom-its-classes-methods-and-attributes-518c1d71162&user=Omar+Alkousa&userId=f8302b9534b5&source=-----518c1d71162---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F518c1d71162&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-pydicom-its-classes-methods-and-attributes-518c1d71162&source=-----518c1d71162---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Pythonista and you’re working with Medical Data, especially DICOM
    data, you’ve probably heard of the great python package PyDicom. In this post,
    you’ll learn the basics of this package. We’ll discuss PyDicom classes (DataSet,
    DataElement, Sequence) and some useful methods and attributes that you can apply
    to PyDicom classes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/39096cddc78e4a0000426966966e024c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Owen Beard](https://unsplash.com/@owenbeard?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: PyDicom is a pure Python package for working with DICOM files such as medical
    images, reports, and radiotherapy objects. PyDicom makes it easy to read and write
    these complex files into natural pythonic structures for easy manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: DICOM, Digital Imaging and Communications in Medicine, is the standard language
    of Medical Imaging Systems. When you hear the word “DICOM”, you probably think
    of it as just medical images. But **Healthcare Data Scientists/Analysts** may
    consider it as treasury as any other **medical Dataset**. Because it goes beyond
    just data of pixels. A DICOM file contains many useful data related to the patient,
    the imaging modality, and others.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dealing with DICOM metadata and accessing specific attributes is beneficial
    for anyone, including data scientists/analysts, working with DICOM files. Luckily,
    PyDicom provides many useful functions, methods, and attributes on DICOM files.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the creators and contributors of PyDicom
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s Begin Coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I want to discover a new Python package, I usually begin with general examples
    using this package and then dive into it more and more gradually. My main purpose
    is to learn how to extract the metadata of many DICOM files and convert it to
    a Dataset that I can use for analysis and exploration.
  prefs: []
  type: TYPE_NORMAL
- en: So… let’s begin our journey with a common example of PyDicom.
  prefs: []
  type: TYPE_NORMAL
- en: '**We will discuss the following:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Example of reading a DICOM File***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Core Elements in PyDicom***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***PyDICOM DataSet***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Methods for PyDicom DataSet* .keys()** Method'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**.values()** Method'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**.elements()** Method'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**.group_dataset()** Method'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**.dir() Method**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Attributes for PyDicom DataSet* pixel_array** Attribute'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***PyDicom DataElement***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***PyDicom Sequence***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***PyDicom vs. ImageIO***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example of reading a DICOM File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To read a DICOM file using pydicom, you can use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install pydicom: To use pydicom, you will need to install it using pip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the pydicom library: In your Python script, you will need to import
    the pydicom library in order to use it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are a lot of DICOM samples on the internet. And you can use your own DICOM
    files. For this post, I chose a [dataset](https://www.kaggle.com/datasets/dmisky/dlwptvolumetricdicomlung)
    of 99 slices of chest-CT scans for one patient. You can find it on Kaggle. I saved
    the dataset on my [Drive](https://drive.google.com/drive/folders/1dbJpXVUBn0mSUxgJIqKZj4d_0thSeTW3?usp=sharing)
    so I can easily have access through GoogleColab.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Sometimes, the output of some code lines will be too long and bulky.
    Sorry in advance about that!!! But this a great chance for you to get a taste
    of how DICOM files look like in real life.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Read the DICOM file: To read a DICOM file, you can use the **dcmread** function,
    which returns a Dataset object containing the data from the DICOM file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5fca1aaf7829e8715b8e483b1fc05ac2.png)'
  prefs: []
  type: TYPE_IMG
- en: The full output is added as a GitHub gist following this [link](https://gist.github.com/OmarAlkousa/53b35934cd3fac3d381f0448b8e27073).
    [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, there are a lot of DICOM metadata other than pixel data. But we can
    see a pattern of the output, whereas the DICOM attributes are written row by row.
    Each row has a unique tag and other core elements of the DICOM attribute. Let’s
    discuss them in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Core Elements in PyDicom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Applying **.dcmread()** wraps a DataSet, a dictionary data structure {}. This
    DataSet contains keys and values represented like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Keys:*** contains the DICOM Tags of the attributes specified in the DICOM
    file you are reading. Examples of the keys like:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- (0x0010, 0x0010) PatientName attribute.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- (0x0028, 0x0010) Rows attribute.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- (0x7fe0, 0x0010) PixelData attribute.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The tags’ numbers consist of two **hexadecimal**, the first refers to the group,
    and the second refers to a specific element. So, you might find many attributes
    that have the same first number of tags.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***Values:*** the values of this dictionary generally contain the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- **Tag:** the element’s tag like (0028, 0030), for example.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- **Keyword:** describes what the attribute refers to. The keyword of the tag
    (0028, 0030) is “Pixel Spacing”.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- **VR:** it’s only two characters that refer to the Value Representation of
    the element, which describes the data type and format of the attribute value.
    The VR of the tag (0028, 0030) is “DS”, Decimal String. You can see the VR of
    any tag and how it is represented using Python structures following the[**link**](https://pydicom.github.io/pydicom/stable/guides/element_value_types.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- **Value:** the actual value of the element. It could be an integer, a string,
    a list, or even a **Sequence**, which is a dataset of attributes. The value of
    the tag (0028, 0030) is a list of two floats that represent the physical distance
    along the rows and columns, respectively, in mm. An example of this list is [0.564453125,
    0.564453125].'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/41f59fac44ad6f2697b5e2d3f1cc08c0.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of dcmread() function. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand reading a DICOM file using PyDicom requires working directly
    with the main class, which is DataSet. Let’s Discuss it in more depth and see
    what are the contents of a DataSet.
  prefs: []
  type: TYPE_NORMAL
- en: PyDicom DataSet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A DICOM DataSet is a mutable mapping of DICOM DataElements. Each DataElement,
    a value of the dictionary, in the DICOM DataSet has a unique tag, a key of the
    dictionary, that identifies it. For example, the “PatientName” attribute corresponds
    to the tag (0x0010, 0x0010) in the DICOM standard, which identifies the patient’s
    name data element.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c21fe16c903cf2c27bcb7290e756f9d.png)'
  prefs: []
  type: TYPE_IMG
- en: The contents of PyDicom DataSet class. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access specific DICOM attributes in many different ways like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Or you can access the same attribute, PatientName, using its unique tag. For
    example, the tag of the PatientName attribute is (0010, 0010). ***Note***that
    the numbers are in Hexadecimals as it is in the DICOM Standard.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice that using the tag, which is the key of the dataset dictionary, yields
    the whole value of the dictionary and not only the actual value of the attribute.
    To get only the actual value, you should use the .value attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It’s up to you to decide whether you extract the specific attribute using its
    unique tag or using its keyword. Now let’s see some of the useful methods and
    attributes we can use with the DataSet class.
  prefs: []
  type: TYPE_NORMAL
- en: Methods for PyDicom DataSet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .keys() Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using **.keys()** returns the list of the keys of the DataSet dictionary. This
    method could be helpful when joining metadata from multiple sources of DICOM files
    that have common DICOM attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/197965ae4908172a1f1753d8c336fe58.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of .keys() method. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: .values() Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method returns a list of the values of the DataSet dictionary. It’s kinda
    bulky and not preferred to read in this form. But this method could be useful
    for iterating over a list of values in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/61db2db06e426699fb231266ab458956.png)'
  prefs: []
  type: TYPE_IMG
- en: Part of the output of .values() method. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: .elements() Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using .elements() yields the top-level elements of the Dataset. This method
    will be useful when you don’t need the DICOM attributes in any of the Sequences
    that you might find in the DICOM files you’re working with. Notice how the Sequences
    are represented when using the .elements() method in the output figure below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c2462f1ef7a0b36c722a3b8ea72bcc43.png)'
  prefs: []
  type: TYPE_IMG
- en: The full output of the .elements() method is added as a GitHub gist following
    the [link](https://gist.github.com/OmarAlkousa/03ce85834bdfbb0e65bda9a7989f5e3d).
    [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: .group_dataset() Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we’ve mentioned above, you might find many attributes that have the same
    first number. These tags, the ones with a common first tag, usually describe a
    common parameter. For example, the attributes with the common first tag (0x0010)
    usually refer to Patient-related attributes. Attributes with the first tag (0x0028)
    describe **Image Pixel** attributes. Sometimes it’s helpful to see all the attributes
    that are related to a specific parameter. Using the method (.group_dataset) returns
    a Dataset containing only elements of a certain group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: .dir() Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Return an alphabetical list of element keywords in the Dataset. This is a great
    choice to give the first insight into the metadata you’re dealing with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: A filter of a specific set of attributes can be implemented as an argument to
    the .dir() method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Attributes for PyDicom DataSet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some attributes that you can use with the DataSet class. But I will
    point out only one, the most important and commonly used attribute, **pixel_array**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1886795a09e9629668c4dd2a8619d51f.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Image by the Author]'
  prefs: []
  type: TYPE_NORMAL
- en: PyDicom DataElement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we’ve mentioned above, a DataSet is a PyDicom class that contains a set of
    DICOM tags as keys and values as DICOM DataElements. DataElements are the values
    of the attributes or the metadata that you might find during reading DICOM files.
    It’s useful to be able to access specific information that might interest you
    in your work or research without searching about it in such pretty large text-like
    data like above. You can access specific info inside a specific DataElement using
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1dd34ec7ed665a00eec7beec6805585b.png)'
  prefs: []
  type: TYPE_IMG
- en: The contents of a PyDicom DataElement class and the way to access specific info.
    [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: PyDicom Sequence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DataElement inside a PyDicom DataSet could contain values that are strings,
    integers, lists, or even a Sequence of data. The sequence is derived from Python’s
    list. But it can even be a DataSet. Let’s see how to access specific parameters
    within a particular Sequence. Since there’s bulky information in the file we’re
    working with, let’s use the method .dir(*filter). With a proper filter implemented
    as an argument, we can extract the names of the “Sequence”s.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let’s try to work with De-identification Method Code Sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: To print out all the elements in the Sequence, we can use the indices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: To access specific info inside the Sequence, we can use its index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '***PyDicom vs. ImageIO***'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Personal opinion, I found PyDicom the best package to deal with DICOM files.
    It’s kinda obvious because it’s specifically designed for DICOM. It provides more
    flexible options for the programmer, especially when the user wants to deal with
    DICOM metadata and not just pixel data. But on the other side, if I want only
    the pixel data, I would prefer using ImageIO as it provides only the basic metadata
    that I need to deal with pixel data. To see more about using ImageIO with DICOM
    files, check this post.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/dealing-with-dicom-using-imageio-python-package-117f1212ab82?source=post_page-----518c1d71162--------------------------------)
    [## Dealing with DICOM Using ImageIO Python Package'
  prefs: []
  type: TYPE_NORMAL
- en: Medical Images == DICOM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/dealing-with-dicom-using-imageio-python-package-117f1212ab82?source=post_page-----518c1d71162--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyDicom DataSet is the main class of the package. And the user will directly
    deal with it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DataSet is a Python dictionary structure that contains DICOM tags as keys
    and DICOM attributes as values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We introduced how to use some of the important methods and attributes that PyDicom
    provides to deal with the DataSet class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The values of a DataSet are basically a DataElement, another PyDicom class,
    that contains the DICOM tag, keyword, VR, and the value for each DICOM attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Thanks For Reading…***'
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more details about ***DICOM***, refer to this post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://medium.com/@omar.ok1998/what-is-dicom-a28c5fe24c9d?source=post_page-----518c1d71162--------------------------------)
    [## What is DICOM?'
  prefs: []
  type: TYPE_NORMAL
- en: There are literally billions of DICOM Images currently in use for clinical care!!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@omar.ok1998/what-is-dicom-a28c5fe24c9d?source=post_page-----518c1d71162--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '***DICOM Metadata — A Useful Resource for Big Data Analytics:***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This [article](https://healthmanagement.org/c/healthmanagement/issuearticle/dicom-metadata-a-useful-resource-for-big-data-analytics)
    provides an overview of new ways to represent data by combining patient access
    and DICOM information, advanced use of medical imaging metadata, analysis of radiation
    dose and image segmentation, and deep learning for feature engineering to enrich
    data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***PyDicom Documentation:*** We only scratched the surface of this great package
    and it’s really well documented. If you want to learn more about PyDicom, refer
    to this [link](https://pydicom.github.io/pydicom/stable/index.html) and try coding
    what you read there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] PyDicom Documentation, [**User Guide**](https://pydicom.github.io/pydicom/stable/old/pydicom_user_guide.html),
    [Accessed at 25/12/2022]'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] PyDicom Documentation, [**Element VRs and Python types**](https://pydicom.github.io/pydicom/stable/guides/element_value_types.html),
    [Accessed at 25/12/2022]'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] PyDicom Documentation,[**API Reference**](https://pydicom.github.io/pydicom/stable/reference/index.html),
    [Accessed at 25/12/2022]'
  prefs: []
  type: TYPE_NORMAL
