["```py\nSELECT \n  user_id,\n  COUNT(*) as nr_likes\nFROM twitter_likes\n```", "```py\n{% set partitions_to_replace = [\n    'current_date',\n    'date_sub(current_date, interval 1 day)'\n] %}\n\n{{\n    config(\n        materialized='incremental',\n        partition_by = { 'field': 'date', 'data_type': 'date' },\n        cluster_by = [\"user_id\"],\n        incremental_strategy = 'insert_overwrite'\n        partitions = partitions_to_replace\n    )\n}}\n\nSELECT \n    user_id,\n    DATE(timestamp) as date, \n    COUNT(*) as nr_likes \nFROM {{ source ('twitter', 'twitter_likes')}}\n-- I have a fake condition here because \n-- my raw table does not let me query without a partition filter\nWHERE DATE(timestamp) >= \"1990-01-01\"\n\n{% if is_incremental() %}\n  -- this filter will only be applied on an incremental run\n   AND DATE(timestamp) in ({{ partitions_to_replace | join(',') }})\n{% endif %}\nGROUP BY 1, 2\n```", "```py\n{% set partitions_to_replace = [\n    'date_trunc(current_date, month)',\n    'date_trunc(date_sub(current_date, interval 1 month), month)'\n] %}\n\n{{\n    config(\n        materialized='incremental',\n        partition_by = { 'field': 'month_year', 'data_type': 'date', \"granularity\": \"month\" },\n        cluster_by = [\"user_id\"],\n        incremental_strategy = 'insert_overwrite'\n        partitions = partitions_to_replace\n    )\n}}\n\nSELECT \n    user_id,\n    DATE_TRUNC(date, MONTH) as month_year, \n    SUM(nr_likes) as nr_likes \nFROM {{ref('twitter_likes_daily')}}\n\n{% if is_incremental() %}\n  -- this filter will only be applied on an incremental run\n   AND DATE_TRUNC(date, MONTH) in ({{ partitions_to_replace | join(',') }})\n{% endif %}\nGROUP BY 1, 2\n```", "```py\n{{\n    config(\n        materialized='incremental',\n        unique_key = 'user_id',\n        cluster_by = [\"user_id\"],\n        incremental_strategy = 'merge'\n    )\n}}\n\n{% if is_incremental() %}\nWITH users_changed as (\n    SELECT DISTINCT user_id\n    FROM {{ref('twitter_likes_daily')}}\n    WHERE date = current_date()\n)\n\n{% endif %}\nSELECT \n    user_id,\n    sum(nr_likes) as total_likes\nFROM {{ref('twitter_likes_monthly')}}\n\n{% if is_incremental() %}\n  AND user_id in (select user_id from users_changed)\n{% endif %}\ngroup by  1 \n```", "```py\n{{\n    config(\n        materialized='table',\n        cluster_by = [\"user_id\"]\n    )\n}}\n\nSELECT \n    user_id,\n    sum(nr_likes) as total_likes\nFROM {{ref('twitter_likes_monthly')}} \n```"]