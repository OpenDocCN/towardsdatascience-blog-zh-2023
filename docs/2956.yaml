- en: Building a Smart Travel Itinerary Suggester with LangChain, Google Maps API,
    and Gradio (Part 2)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-2-86e9d2bcae5?source=collection_archive---------3-----------------------#2023-09-26](https://towardsdatascience.com/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-2-86e9d2bcae5?source=collection_archive---------3-----------------------#2023-09-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to build an application that might inspire your next road trip
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rmartinshort?source=post_page-----86e9d2bcae5--------------------------------)[![Robert
    Martin-Short](../Images/e3910071b72a914255b185b850579a5a.png)](https://medium.com/@rmartinshort?source=post_page-----86e9d2bcae5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----86e9d2bcae5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----86e9d2bcae5--------------------------------)
    [Robert Martin-Short](https://medium.com/@rmartinshort?source=post_page-----86e9d2bcae5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F83d38eb39498&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-2-86e9d2bcae5&user=Robert+Martin-Short&userId=83d38eb39498&source=post_page-83d38eb39498----86e9d2bcae5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----86e9d2bcae5--------------------------------)
    ·11 min read·Sep 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F86e9d2bcae5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-2-86e9d2bcae5&user=Robert+Martin-Short&userId=83d38eb39498&source=-----86e9d2bcae5---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F86e9d2bcae5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-2-86e9d2bcae5&source=-----86e9d2bcae5---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**This article is part 2 of a three part series where we build a travel itinerary
    suggester application using OpenAI and Google APIs and display it in a simple
    UI generated with gradio. In this part, we discuss how to use the Google Maps
    API and folium to generate an interactive route map from a list of waypoints.
    Just want see the code? Find it** [**here**](https://github.com/rmartinshort/travel_mapper)**.**'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**1\. Recap of part 1**'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**1\. 第一部分回顾**'
- en: In the [first](/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-1-4175ff480b74)
    of this three part series, we used LangChain and prompt engineering to build a
    system that makes sequential calls to an LLM API — either Google’s PaLM or OpenAI’s
    ChatGPT that convert a user’s query into a travel itinerary and a nicely parsed
    list of addresses. Now it’s time to see how we can take that list of addresses
    and convert it into a travel route with directions plotted on a map. To do this,
    we will primarily be making use of the Google Maps API via the [googlemaps](https://pypi.org/project/googlemaps/)
    package. We’ll also use [folium](https://pypi.org/project/folium/) for plotting.
    Let’s get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第一部分](/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-1-4175ff480b74)的三部分系列中，我们使用
    LangChain 和提示工程构建了一个系统，该系统顺序调用 LLM API——无论是谷歌的 PaLM 还是 OpenAI 的 ChatGPT——将用户的查询转换为旅行行程和格式化良好的地址列表。现在是时候看看如何将这些地址列表转换为带有路线标记的旅行路线了。为此，我们主要将使用通过[googlemaps](https://pypi.org/project/googlemaps/)包提供的
    Google Maps API。我们还将使用[folium](https://pypi.org/project/folium/)进行绘图。让我们开始吧！
- en: 2\. Getting ready to make API calls
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 准备进行 API 调用
- en: In order to make an API key for Google Maps, you’ll first need to make an account
    with Google Cloud. They have a [90-day free trial period](https://cloud.google.com/free/docs/free-cloud-features?_ga=2.153672123.-2071471501.1688189408),
    after which you’ll pay for API services you use in a similar way to what you’d
    do with OpenAI. Once that’s complete, you can make a project (mine is called LLMMapper)
    and navigate the Google Maps Platform section of the Google Cloud site. From there,
    you should be able to access the “Keys & Credentials” menu to generate an API
    key. You should also check out the “APIs & Services” menu to explore the many
    services that the Google Maps Platform provides. For this project we’ll just be
    using the Directions and Geocoding services. We’ll be geocoding each of our waypoints
    and then finding directions between them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成 Google Maps 的 API 密钥，你首先需要在 Google Cloud 上创建一个账户。他们提供[90 天免费试用期](https://cloud.google.com/free/docs/free-cloud-features?_ga=2.153672123.-2071471501.1688189408)，之后你将按使用的
    API 服务支付费用，类似于你在 OpenAI 上的操作。完成后，你可以创建一个项目（我的项目叫 LLMMapper），并导航到 Google Cloud
    网站上的 Google Maps Platform 部分。从那里，你应该能访问“密钥与凭据”菜单以生成 API 密钥。你还应该查看“API 和服务”菜单，探索
    Google Maps Platform 提供的众多服务。在这个项目中，我们只会使用方向和地理编码服务。我们将对每个途经点进行地理编码，然后查找它们之间的路线。
- en: '![](../Images/2592a69158a712deddee1ca9d26f5921.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2592a69158a712deddee1ca9d26f5921.png)'
- en: Screenshot showing navitation to the Keys & Credentials menu of the Google Maps
    Platform site. This is where you will make an API key.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 截图显示了如何导航到 Google Maps Platform 网站的密钥和凭据菜单。在这里你将生成一个 API 密钥。
- en: Now, the Google Maps API key can be added to the `.env` file that we set up
    earlier
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以将 Google Maps API 密钥添加到我们之前设置的 `.env` 文件中
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To test if this works, load the secrets from the`.env` using the method described
    in part 1\. We can then attempt a geocoding call as follows
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这是否有效，请使用第一部分中描述的方法从 `.env` 文件加载机密。然后我们可以尝试如下进行地理编码调用
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Google Maps is able to match the supplied string with the address and details
    of an actual place, and should return a list like this
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌地图能够将提供的字符串与实际地点的地址和详细信息匹配，并应返回如下列表
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is very powerful! Although the request is somewhat vague, the Google Maps
    service has correctly matched it to an exact address with coordinates and various
    other locale information that might be useful to a developer depending on the
    application. We will only need to make use of the `formatted_address` and `place_id`fields
    here.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常强大！虽然请求有些模糊，但谷歌地图服务准确地匹配到了一个精确的地址，并提供了坐标以及其他可能对开发者有用的本地信息。我们只需要使用`formatted_address`和`place_id`字段即可。
- en: '**3\. Building the route**'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**3\. 构建路线**'
- en: Geocoding is important for our travel mapping application because the geocoding
    API appears more adept at handling vague or partially compete addresses than the
    directions API. There is no guarantee that the addresses coming from the LLM calls
    will be contain enough information for the directions API to give a good response,
    so doing this geocoding step first decreases the likelihood of errors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 地理编码对于我们的旅行地图应用程序很重要，因为地理编码 API 似乎在处理模糊或部分完成的地址时比方向 API 更加熟练。无法保证来自 LLM 调用的地址包含足够的信息，以便方向
    API 能提供良好的响应，因此首先进行地理编码步骤可以减少错误的可能性。
- en: Lets first call the geocoder on the start point, end point and intermadiate
    waypoints list and store the results in a dictionary
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先对起点、终点和中间途经点列表调用地理编码器，并将结果存储在字典中
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we can make use of the directions API to get the route from start to end
    that includes the waypoints
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以利用方向 API 获取包含途经点的从起点到终点的路线
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Full documentation for the directions api is [here](https://googlemaps.github.io/google-maps-services-python/docs/index.html),
    and there are many different options that can be specified. Notice that we specific
    the start and end of route along with the list of waypoints, and choose `optimize_waypoints=True`
    so that Google Maps knows that the order of the waypoints can be changed in order
    to reduce the total travel time. We can also specify transit type too, which defaults
    to `driving` unless otherwise set. Recall that in part 1 we asked the LLM to return
    transit type along with its itinerary suggestion, so in theory we could make use
    of that here too.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 指南 API 的完整文档在[这里](https://googlemaps.github.io/google-maps-services-python/docs/index.html)，并且可以指定许多不同的选项。注意我们指定了路线的起点和终点，以及途经点的列表，并选择了`optimize_waypoints=True`，这样
    Google Maps 就知道可以调整途经点的顺序以减少总旅行时间。我们还可以指定交通类型，默认为`driving`，除非另有设置。请回忆一下在第 1 部分中我们让
    LLM 返回交通类型及其行程建议，因此理论上我们也可以在这里利用这一点。
- en: The dictionary returned from the directions API call has the following keys
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从方向 API 调用返回的字典具有以下键
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of this information, `legs` and `overview_polyline` will be the most useful
    to us. `legs` is a list of route segments, each element of which looks like this
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些信息中，`legs` 和 `overview_polyline` 对我们最有用。`legs` 是一个路线段的列表，每个元素看起来像这样
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each `leg` is further segmented into `steps`, which is the collection of turn-by-turn
    instructions and their associated route segments. This a list of dictionaries
    with the following keys
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `leg` 进一步细分为 `steps`，这是逐步指示和其关联的路线段的集合。这是一个包含以下键的字典列表
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `polyline`keys are where the actual route information is stored. Each polyline
    is an encoded representation of a list of coordinates, which Google Maps generates
    as a means of compressing a long list of latitude and longitude values into a
    string. They are encoded strings that look like
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`polyline` 键是存储实际路线信息的地方。每个 polyline 是一系列坐标的编码表示，Google Maps 生成这些编码作为将长列表的经纬度值压缩成一个字符串的方法。它们是编码字符串，看起来像'
- en: “e|peFt_ejVjwHalBzaHqrAxeE~oBplBdyCzpDif@njJwaJvcHijJ~cIabHfiFyqMvkFooHhtE}mMxwJgqK”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “e|peFt_ejVjwHalBzaHqrAxeE~oBplBdyCzpDif@njJwaJvcHijJ~cIabHfiFyqMvkFooHhtE}mMxwJgqK”
- en: You can read more about this [here](https://developers.google.com/maps/documentation/utilities/polylinealgorithm),
    but thankfully we can use the `decode_polyline` utility to convert them back into
    coordinates. For example
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)阅读更多内容，但幸运的是，我们可以使用`decode_polyline`工具将它们转换回坐标。例如
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will give a list of latitude and longitude points along the route.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供沿路线的经纬度点列表。
- en: This is all we need to know to plot a simple map showing the waypoints on a
    route and the correct driving paths connecting them. We can use the `overview_polyline`
    as a start, although we will see later on that this can cause resolution issues
    at high zoom levels of the map.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们绘制一个简单地图的所有信息，显示途经点及其连接的正确驾驶路径。我们可以使用 `overview_polyline` 作为起点，尽管我们稍后会看到，这可能会在高缩放级别的地图上导致分辨率问题。
- en: 'Lets assume we started with the following query:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们从以下查询开始：
- en: “I want to do 5 day road trip from San Francisco to Las Vegas. I want to visit
    pretty coastal towns along HW1 and then mountain views in southern California”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “我想从旧金山到拉斯维加斯进行为期 5 天的公路旅行。我想沿着 HW1 参观漂亮的沿海城镇，然后在南加州欣赏山景”
- en: Our LLM calls extracted a dictionary of waypoints and we ran `build_mapping_dict`
    and `build_directions_and_route` to get our directions result from Google Maps
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 LLM 调用提取了一个途经点字典，我们运行了`build_mapping_dict`和`build_directions_and_route`以从
    Google Maps 获得我们的方向结果
- en: We can first extract the waypoints like this
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样提取途经点
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, using folium and branca, we can plot a nice interactive map which should
    appear in Colab or Jupyter Notebook
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 folium 和 branca，我们可以绘制一个漂亮的交互式地图，这个地图应该会出现在 Colab 或 Jupyter Notebook 中
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When this code is run, Folium will generate an interactive map that we can explore
    and click into each of the waypoints.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行此代码时，Folium 将生成一个交互式地图，我们可以探索并点击每一个途经点。
- en: '![](../Images/0bef881abf974f02c318d7a36bf5c8f7.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0bef881abf974f02c318d7a36bf5c8f7.png)'
- en: Interactive map generated from the result of a Google Maps API call
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Google Maps API 调用结果生成的交互式地图
- en: '**4\. Refining the route**'
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**4. 优化路线**'
- en: 'The approach described above where we make a single call to the Google Maps
    directions API with a list of waypoints and then plot the `overview_polyline`
    works great as a POC, but there a few issues:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法中，我们通过一个包含航点列表的单次调用来获取 Google Maps 方向 API，然后绘制 `overview_polyline`，作为概念验证效果很好，但仍存在一些问题：
- en: Instead of `formatted_address` , it is more efficient to use `place_id` when
    specifying the start, end and waypoint names in the call to Google Maps. Fortunately
    we get `place_id` in the result of our geocoding calls, so we should use it.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用 Google Maps 时，使用 `place_id` 来指定起点、终点和航点名称比使用 `formatted_address` 更有效。幸运的是，我们在地理编码调用的结果中获得了
    `place_id`，因此我们应该使用它。
- en: The number of waypoints that can be requested in a single API call is limited
    to 25 (see [https://developers.google.com/maps/documentation/directions/get-directions](https://developers.google.com/maps/documentation/directions/get-directions)
    for details). If we have have more than 25 stops in our itinerary from the LLM,
    we need to make more calls to Google Maps and then merge the responses
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单次 API 调用中可以请求的航点数量限制为 25（有关详细信息，请参见 [https://developers.google.com/maps/documentation/directions/get-directions](https://developers.google.com/maps/documentation/directions/get-directions)）。如果我们从
    LLM 获得的行程中有超过 25 个停靠点，我们需要向 Google Maps 发出更多调用，然后合并响应。
- en: '`overview_polyline` has limited resolution when we zoom in, likely since the
    number of points along it are optimized for a large-scale map view. This is not
    a major issue for a POC, but it would be nice to have some more control over the
    route resolution so that it looks good even at high zoom levels. The directions
    API is giving us much more granular polylines in the route segments that it provides,
    so we can make use of these.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`overview_polyline` 在放大时分辨率有限，可能是因为它沿线的点数经过了大规模地图视图的优化。这对于一个概念验证来说不是主要问题，但如果能对路线分辨率进行更多控制，使其在高缩放级别下也能保持良好外观，那就更好了。方向
    API 为我们提供了更细致的路段折线，我们可以利用这些信息。'
- en: On the map, it would be nice to split the route into separate legs and allow
    the user to see the distance and travel times associated with each one. Again,
    Google Maps is providing us with that information so we should make use of it.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地图上，将路线拆分为单独的路段并允许用户查看与每个路段相关的距离和旅行时间是很好的功能。同样，Google Maps 提供了这些信息，因此我们应该加以利用。
- en: '![](../Images/7ba947b395671f85e82c5cf9793fd9ce.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ba947b395671f85e82c5cf9793fd9ce.png)'
- en: The resolution of the overview_polyline is limited. Here we’ve zoomed into Santa
    Barbara and its not obvious which roads we should be taking.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`overview_polyline` 的分辨率有限。在这里，我们已经缩放到圣巴巴拉，但尚不清楚我们应该走哪些道路。'
- en: Issue 1 can easily be solved just by modifying `build_directions_and_route`
    to make use of `place_id` from the `mapping_dict` rather than `formatted_address`
    . Issue 2 is a little more involved and requires breaking our initial waypoints
    down into chunks of some maximum length, creating a start, end and sub-list of
    waypoints from each and then running `build_mapping_dict` followed by `build_directions_and_route`
    on those. The results can then be concatenated at the end.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 问题 1 可以通过修改 `build_directions_and_route` 来使用 `mapping_dict` 中的 `place_id` 而不是
    `formatted_address` 来轻松解决。问题 2 稍微复杂一些，需要将初始航点拆分成一些最大长度的块，从每个块中创建起点、终点和子列表，然后在这些块上运行
    `build_mapping_dict` 和 `build_directions_and_route`。最终结果可以在最后合并。
- en: Issues 3 and 4 can be solved by using the individual step polylines for each
    leg of the route returned by Google Maps. We just need to loop though these two
    levels, decode the relevant polylines and then construct a new dictionary. This
    also enables us to extract the distance and duration values, which get assigned
    to each decoded leg and then used for plotting.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 问题 3 和 4 可以通过使用 Google Maps 返回的每段路程的单独步骤折线来解决。我们只需遍历这两个级别，解码相关的折线，然后构建一个新的字典。这也使我们能够提取距离和持续时间值，这些值被分配给每个解码的路段，然后用于绘图。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The trouble now is that the `leg_route_points`list can become very long, and
    when we come to plot this on the map it can cause folium to crash or run very
    slowly. The solution is to sample the points along the route so that there are
    enough to allow a good visualization but not too many that the map has trouble
    loading.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是 `leg_route_points` 列表可能会变得非常长，当我们在地图上绘制这些点时，可能会导致 folium 崩溃或运行非常缓慢。解决方案是沿路线采样这些点，以确保有足够的点以便进行良好的可视化，但又不至于让地图加载困难。
- en: A simple and safe way to do this is calculate the number of points that the
    total route should contain (say 5000 points) then determine what fraction should
    belong to each leg of the route and then evenly sample the corresponding number
    of points from each leg. Note that we need to make sure that each leg contains
    at least one point for it to get included on the map.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单且安全的方法是计算总路线应包含的点数（例如5000个点），然后确定每段路线应包含的点的比例，并均匀地从每段中采样相应数量的点。请注意，我们需要确保每段至少包含一个点，以便它能够显示在地图上。
- en: The following function will do this sampling, taking in a dictionary of `waypoints`
    output from the `get_route` function above.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将执行此采样，输入一个来自上面`get_route`函数的`waypoints`字典。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here we specify the spacing of points that we want — one per 250m — and then
    choose the number of points accordingly. We might also consider implementing a
    way to estimate the desired point spacing from the length of the route, but this
    method appears to work reasonably well for a first pass, giving acceptable resolution
    at moderately high levels of zoom on the map.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们指定了我们想要的点间距——每250米一个点——然后相应地选择点的数量。我们还可以考虑从路线长度估算所需的点间距，但这种方法在第一次尝试中似乎效果相当好，在地图上的中等高的缩放级别下提供了可接受的分辨率。
- en: Now that we’ve split the route up into legs with a reasonable number of sample
    points, we can proceed to plot them on the map and label each leg with the following
    code
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将路线拆分为具有合理样本点数量的段落，我们可以继续将它们绘制在地图上，并使用以下代码对每一段进行标注。
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/eb81e046ba3eae34d2a5cdc93a96294b.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb81e046ba3eae34d2a5cdc93a96294b.png)'
- en: Example of one leg of a route that has been labelled and annotated so that it
    appears on the map
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标注并注释过的路线段示例，以便它能够出现在地图上。
- en: '**5\. Putting it all together**'
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**5\. 整合所有内容**'
- en: In the codebase, all the methodology mentioned above is packaged in two classes.
    The first is `RouteFinder` , which takes in the stuctured output of `Agent` (see
    part 1) and generates the sampled route. The second is `RouteMapper` , which takes
    the sampled route and plots a folium map, which can be saved as html.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码库中，以上提到的所有方法都被打包在两个类中。第一个是`RouteFinder`，它接受`Agent`的结构化输出（见第1部分），并生成采样路线。第二个是`RouteMapper`，它接收采样路线并绘制一个folium地图，可以保存为html文件。
- en: Since we almost always want to generate a map when we ask for a route, the `RouteFinder's`
    `generate_route` method handles both of these tasks
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们几乎总是希望在请求路线时生成地图，`RouteFinder`的`generate_route`方法处理这两个任务。
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Recall that in part 1 we constructed a class called `Agent` , which handled
    the LLM calls. Now that we also have `RouteFinder` , we can put them together
    in a base class for the entire travel mapper project
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下在第1部分中我们构建了一个名为`Agent`的类，该类处理LLM调用。现在我们还有了`RouteFinder`，我们可以将它们组合到整个旅行映射器项目的基础类中。
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This can be run on a query as follows, which is the example given in the `test_without_gradio`
    script
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下查询运行，这也是在`test_without_gradio`脚本中给出的示例。
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In terms of the route and map generation we’re now done! But how can we package
    all this code into a nice UI thats easy to experiment with? That will be covered
    in the [third and final part](/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb)
    of this series.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就路线和地图生成而言，我们现在已经完成了！但是我们如何将所有这些代码打包成一个易于实验的漂亮UI呢？这将会在本系列的[第三部分](https://example.org/building-a-smart-travel-itinerary-suggester-with-langchain-google-maps-api-and-gradio-part-3-90dc7be627fb)中讲解。
- en: Thanks for reading! Please feel free to explore the full codebase here [https://github.com/rmartinshort/travel_mapper](https://github.com/rmartinshort/travel_mapper).
    Any suggestions for improvement or extensions to the functionality would be much
    appreciated!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！请随时在这里探索完整的代码库[https://github.com/rmartinshort/travel_mapper](https://github.com/rmartinshort/travel_mapper)。任何改进建议或功能扩展都会非常感谢！
