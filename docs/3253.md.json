["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define number of simulations\nn_simulations = 10000\n\n# Assumptions with [mean, std deviation]\nwheat_seed_cost = [20, 2]  # Cost per acre\nsoybean_seed_cost = [50, 5]\nfertilizer_wheat_cost = [50, 5]\nfertilizer_soybean_cost = [40, 4]\nlabor_cost = [25, 3]\npesticide_cost = [30, 3]\nfuel_maintenance_cost = [15, 2]\nmiscellaneous_cost = [10, 1]\n\ndef simulate_farm_costs():\n    wheat_seed = np.random.normal(wheat_seed_cost[0], wheat_seed_cost[1])\n    soybean_seed = np.random.normal(soybean_seed_cost[0], soybean_seed_cost[1])\n    fertilizer_wheat = np.random.normal(fertilizer_wheat_cost[0], fertilizer_wheat_cost[1])\n    fertilizer_soybean = np.random.normal(fertilizer_soybean_cost[0], fertilizer_soybean_cost[1])\n    labor = np.random.normal(labor_cost[0], labor_cost[1])\n    pesticide = np.random.normal(pesticide_cost[0], pesticide_cost[1])\n    fuel_maintenance = np.random.normal(fuel_maintenance_cost[0], fuel_maintenance_cost[1])\n    miscellaneous = np.random.normal(miscellaneous_cost[0], miscellaneous_cost[1])\n\n    total_cost = (wheat_seed + soybean_seed + fertilizer_wheat + fertilizer_soybean + \n                  labor + pesticide + fuel_maintenance + miscellaneous) * 1000  # for 1000 acres\n\n    return total_cost\n\nresults = [simulate_farm_costs() for _ in range(n_simulations)]\n\n# Visualization\nplt.hist(results, bins=50, edgecolor='black', alpha=0.7)\nplt.title('Distribution of Total Farm Costs')\nplt.xlabel('Total Cost')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.2)\nplt.show()\n```", "```py\n# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: \n\n# dataset = pandas.DataFrame(fertilizer_soybean_cost_avg Value, fertilizer_soybean_cost_std Value, fertilizer_wheat_cost_avg Value, fertilizer_wheat_cost_std Value, fuel_maintenance_cost_avg Value, fuel_maintenance_cost_std Value, labor_cost_avg Value, labor_cost_std Value, miscellaneous_cost_avg Value, miscellaneous_cost_std Value, pesticide_cost_avg Value, pesticide_cost_std Value, soybean_seed_cost_avg Value, wheat_seed_cost_avg Value, wheat_seed_cost_std Value)\n# dataset = dataset.drop_duplicates()\n\n# Paste or type your script code here:\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Assuming the data from Power BI is passed as 'dataset'\ndf = dataset\n\n# Fetch values from the dataset\nwheat_seed_cost_avg = df['wheat_seed_cost_avg Value'].iloc[0]\nwheat_seed_cost_std = df['wheat_seed_cost_std Value'].iloc[0]\nsoybean_seed_cost_avg = df['soybean_seed_cost_avg Value'].iloc[0]\nsoybean_seed_cost_std = df['soybean_seed_cost_std Value'].iloc[0]\nfertilizer_wheat_cost_avg = df['fertilizer_wheat_cost_avg Value'].iloc[0]\nfertilizer_wheat_cost_std = df['fertilizer_wheat_cost_std Value'].iloc[0]\nfertilizer_soybean_cost_avg = df['fertilizer_soybean_cost_avg Value'].iloc[0]\nfertilizer_soybean_cost_std = df['fertilizer_soybean_cost_std Value'].iloc[0]\nlabor_cost_avg = df['labor_cost_avg Value'].iloc[0]\nlabor_cost_std = df['labor_cost_std Value'].iloc[0]\npesticide_cost_avg = df['pesticide_cost_avg Value'].iloc[0]\npesticide_cost_std = df['pesticide_cost_std Value'].iloc[0]\nfuel_maintenance_cost_avg = df['fuel_maintenance_cost_avg Value'].iloc[0]\nfuel_maintenance_cost_std = df['fuel_maintenance_cost_std Value'].iloc[0]\nmiscellaneous_cost_avg = df['miscellaneous_cost_avg Value'].iloc[0]\nmiscellaneous_cost_std = df['miscellaneous_cost_std Value'].iloc[0]\n\n# Define number of simulations\nn_simulations = 10000\n\n# Assumptions with [mean, std deviation]\nwheat_seed_cost = [wheat_seed_cost_avg, wheat_seed_cost_std]\nsoybean_seed_cost = [soybean_seed_cost_avg, soybean_seed_cost_std]\nfertilizer_wheat_cost = [fertilizer_wheat_cost_avg, fertilizer_wheat_cost_std]\nfertilizer_soybean_cost = [fertilizer_soybean_cost_avg, fertilizer_soybean_cost_std]\nlabor_cost = [labor_cost_avg, labor_cost_std]\npesticide_cost = [pesticide_cost_avg, pesticide_cost_std]\nfuel_maintenance_cost = [fuel_maintenance_cost_avg, fuel_maintenance_cost_std]\nmiscellaneous_cost = [miscellaneous_cost_avg, miscellaneous_cost_std]\n\ndef simulate_farm_costs():\n    wheat_seed = np.random.normal(wheat_seed_cost[0], wheat_seed_cost[1])\n    soybean_seed = np.random.normal(soybean_seed_cost[0], soybean_seed_cost[1])\n    fertilizer_wheat = np.random.normal(fertilizer_wheat_cost[0], fertilizer_wheat_cost[1])\n    fertilizer_soybean = np.random.normal(fertilizer_soybean_cost[0], fertilizer_soybean_cost[1])\n    labor = np.random.normal(labor_cost[0], labor_cost[1])\n    pesticide = np.random.normal(pesticide_cost[0], pesticide_cost[1])\n    fuel_maintenance = np.random.normal(fuel_maintenance_cost[0], fuel_maintenance_cost[1])\n    miscellaneous = np.random.normal(miscellaneous_cost[0], miscellaneous_cost[1])\n\n    total_cost = (wheat_seed + soybean_seed + fertilizer_wheat + fertilizer_soybean +\n                  labor + pesticide + fuel_maintenance + miscellaneous) * 1000  # for 1000 acres\n\n    return total_cost\n\nresults = [simulate_farm_costs() for _ in range(n_simulations)]\n\n# Convert results into a dataframe\ndf_simulated_results = pd.DataFrame(results, columns=['Total Cost'])\n\n# Calculate the Interquartile Range (IQR)\nQ1 = df_simulated_results['Total Cost'].quantile(0.25)\nQ3 = df_simulated_results['Total Cost'].quantile(0.75)\n\n# Plotting the histogram\nplt.figure(figsize=(10, 6))\nn, bins, patches = plt.hist(df_simulated_results['Total Cost'], bins=50, color='blue', edgecolor='black', alpha=0.7)\nplt.title('Distribution of Year 1 Variable Farm Costs from Simulation')\nplt.xlabel('Year 1 Variable Cost')\nplt.ylabel('Frequency')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Shade the IQR\nfor i in range(len(bins)):\n    if bins[i] > Q1 and bins[i] < Q3:\n        patches[i].set_facecolor('green')\n\nplt.axvline(Q1, color='red', linestyle='dashed', linewidth=1)\nplt.axvline(Q3, color='red', linestyle='dashed', linewidth=1)\nplt.tight_layout()\nplt.savefig('simulated_costs_histogram.png')  # This will save the figure as an image file\nplt.show()\n```"]