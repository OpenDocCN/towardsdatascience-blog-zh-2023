- en: The Chaos Data-Engineering Manifesto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-chaos-data-engineering-manifesto-5dc09a182e85?source=collection_archive---------3-----------------------#2023-02-24](https://towardsdatascience.com/the-chaos-data-engineering-manifesto-5dc09a182e85?source=collection_archive---------3-----------------------#2023-02-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Another lesson we can learn from software engineers: break stuff to make it
    more reliable.'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@shane.murray5?source=post_page-----5dc09a182e85--------------------------------)[![shane
    murray](../Images/8bb1f3acf15dc26273097e12d03dd616.png)](https://medium.com/@shane.murray5?source=post_page-----5dc09a182e85--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5dc09a182e85--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5dc09a182e85--------------------------------)
    [shane murray](https://medium.com/@shane.murray5?source=post_page-----5dc09a182e85--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8aa0d9ae3ebd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-chaos-data-engineering-manifesto-5dc09a182e85&user=shane+murray&userId=8aa0d9ae3ebd&source=post_page-8aa0d9ae3ebd----5dc09a182e85---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5dc09a182e85--------------------------------)
    ·12 min read·Feb 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5dc09a182e85&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-chaos-data-engineering-manifesto-5dc09a182e85&user=shane+murray&userId=8aa0d9ae3ebd&source=-----5dc09a182e85---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5dc09a182e85&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-chaos-data-engineering-manifesto-5dc09a182e85&source=-----5dc09a182e85---------------------bookmark_footer-----------)![](../Images/a73fda73f6bec9620f90b89108400b0f.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Photo by* [*Soheb Zaidi*](https://unsplash.com/@msohebzaidi?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    *on* [*Unsplash*](https://unsplash.com/s/photos/chaos?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)'
  prefs: []
  type: TYPE_NORMAL
- en: It’s midnight in the dim and cluttered office of *The* *New York Times* currently
    serving as the “situation room.”
  prefs: []
  type: TYPE_NORMAL
- en: A powerful surge of traffic is inevitable. During every major election, the
    wave would crest and crash against our overwhelmed systems before receding, allowing
    us to assess the damage.
  prefs: []
  type: TYPE_NORMAL
- en: We had been in the cloud for years, which helped some. Our main systems would
    scale—our articles were always served—but integration points across backend services
    would eventually buckle and burst under the sustained pressure of insane traffic
    levels.
  prefs: []
  type: TYPE_NORMAL
- en: However, this night in 2020 was different from similar election nights in 2014,
    2016, and 2018\. That’s because this traffic surge was simulated and an election
    wasn’t taking place.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing to the point of failure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simulation or not, this *was* prod so the stakes were high. There was suppressed
    horror as J-Kidd–our system that brought ad targeting parameters to the front
    end–went down hard. It was as if all the ligaments had been ripped from the knees
    of the pass-first point guard for which it had been named. Ouch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/83a91cb62d835846ae9285688a44eac9.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Via* [*Wikimedia Commons*](https://www.google.com/url?sa=i&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3AJason_Kidd_Mike_Woodson.jpg&psig=AOvVaw2eZ0VfIHJlUc8ya-YFm_Rg&ust=1677332195040000&cd=vfe&ved=0CA8QjRxqFwoTCMDoy9Gjrv0CFQAAAAAdAAAAABAD)*.
    Credit: KeithAllisonPhoto.com.* This file is licensed under the [Creative Commons](https://en.wikipedia.org/wiki/en:Creative_Commons)
    [Attribution-Share Alike 2.0 Generic](https://creativecommons.org/licenses/by-sa/2.0/deed.en)
    license.'
  prefs: []
  type: TYPE_NORMAL
- en: J-Kidd wasn’t the only system that found its way to the disabled list. That
    was the point of the whole exercise, to push our systems until they failed. We
    succeeded. Or failed depending on your point of view.
  prefs: []
  type: TYPE_NORMAL
- en: The next day the team made adjustments. We decoupled systems, implemented failsafes,
    and returned to the court for game 2\. As a result, the 2020 election was the
    first I can remember where the on-call engineers weren’t on the edge of their
    seats, white-knuckling their keyboards…At least not for system reliability reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-Mortems and Chaos Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We referred to that exercise as a “pre-mortem.” Its conceptual roots can be
    traced back to the idea of [chaos engineering](https://principlesofchaos.org/)
    introduced by site reliability engineers.
  prefs: []
  type: TYPE_NORMAL
- en: For those unfamiliar, chaos engineering is a disciplined methodology for intentionally
    introducing points of failure within systems to better understand their thresholds
    and improve resilience.
  prefs: []
  type: TYPE_NORMAL
- en: It was popularized in large part by the success of [Netflix’s Simian Army](https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116),
    a suite of programs that would automatically introduce chaos by removing servers,
    regions, and introduce other points of failure into production. All in the name
    of reliability and resiliency.
  prefs: []
  type: TYPE_NORMAL
- en: While this idea isn’t [completely](https://lakefs.io/blog/chaos-data-engineering/)
    [foreign](https://www.linkedin.com/posts/eczachly_dataengineering-activity-7033975323838877696-s4Qj?utm_source=share&utm_medium=member_desktop)
    [to](https://medium.com/geekculture/why-you-should-occasionally-kill-your-data-stack-613143c986ea)
    data engineering, it can certainly be described as an extremely uncommon practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'No data engineer in their right mind has looked at their to-do list, the unfilled
    roles on their team, the complexity of their pipelines, and then said: “This needs
    to be harder. Let’s introduce some chaos.” That may be part of the problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Data teams need to think beyond providing snapshots of data quality to the business
    and start thinking about how to build and maintain reliable data systems at scale.
  prefs: []
  type: TYPE_NORMAL
- en: We cannot afford to overlook data’s increasingly large role in critical operations.
    Just this year, we witnessed how the deletion of one file and an out-of-sync legacy
    database [could ground more than 4,000 flights](https://www.nbcnews.com/news/us-news/us-flights-grounded-faa-outage-rcna65243).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can’t just copy and paste software engineering concepts straight
    into data engineering playbooks. Data is different. DataOps tweaks DevOps methodology
    as [data observability](https://www.montecarlodata.com/blog-what-is-data-observability/)
    does to observability.
  prefs: []
  type: TYPE_NORMAL
- en: Consider this manifesto then a proposal for how to take the proven concepts
    of chaos engineering and apply them to the eccentric world of data.
  prefs: []
  type: TYPE_NORMAL
- en: The 5 Laws Of Data Chaos Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The principles and lessons of chaos engineering are a good place to start defining
    the contours of a data chaos engineering discipline. Our first law combines two
    of the most important.
  prefs: []
  type: TYPE_NORMAL
- en: 'First Law: Have a bias for production, but minimize the blast radius'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a maxim among site reliability engineers that will ring true for every
    data engineer who has had the pleasure of the same SQL query return two different
    results across staging and production environments. That is, “Nothing acts like
    prod except for prod.”
  prefs: []
  type: TYPE_NORMAL
- en: To that I would add, “production data too.” Data is just too creative and fluid
    for humans to anticipate. [Synthetic data](https://medium.com/cord-tech/the-advantages-and-disadvantages-of-synthetic-training-data-b3acbb68e116)
    has come a long way, and don’t get me wrong, it can be a piece of the puzzle,
    but it’s unlikely to simulate key edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: Like me, the mere thought of introducing points of failure into production systems
    probably makes your stomach churn. It’s terrifying. Some data engineers justifiably
    wonder, “Is this even necessary within a modern data stack where so many tools
    abstract the underlying infrastructure?”
  prefs: []
  type: TYPE_NORMAL
- en: I’m afraid so. Remember, as the opening anecdote and J-Kidd’s snapped ligaments
    illustrated, the elasticity of the cloud is not a cure-all.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it’s that abstraction and opacity–along with the multiple integration
    points–that make it so important to stress test a modern data stack. An on-premise
    database may be more limiting, but data teams tend to understand its thresholds
    as they hit them more regularly during day to day operations.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move past the philosophical objections for the moment, and dive into the
    practical. Data is different. Introducing fake data into a system won’t be helpful
    because the input changes the output. It’s going to get really messy too.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s where the second part of the law comes into play: minimize the blast
    radius. There is a spectrum of chaos and tools that can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: In words only, “let’s say this failed, what would we do?”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synthetic data in production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Techniques like data diff that allow you to test snippets of SQL code on production
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solutions like LakeFS allow you to do this on a bigger scale by creating “chaos
    branches” or complete snapshots of your production environment where you can use
    production data but with complete isolation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do it in prod, and practice your backfilling skills. After all, nothing acts
    like prod, but prod.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting with lesser chaotic scenarios is probably a good idea and will help
    you understand how to minimize the blast radius in production.
  prefs: []
  type: TYPE_NORMAL
- en: Deep-diving into real production incidents is also a great place to start. Does
    everyone really understand what exactly happened? Production incidents are chaos
    experiments that you’ve already paid for, so make sure that you are getting the
    most out of them.
  prefs: []
  type: TYPE_NORMAL
- en: Mitigating the blast radius may also include strategies like backing up applicable
    systems or having data observability or data quality monitoring solution in place
    to assist with the detection and resolution of data incidents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second Law: Understand it’s never a perfect time (within reason)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another chaos engineering principle holds to observe and understand “steady
    state behavior.”
  prefs: []
  type: TYPE_NORMAL
- en: There is wisdom in this principle, but it is also important to understand the
    field of data engineering isn’t quite ready to measure by the standard of “5 9s”
    or 99.999% uptime.
  prefs: []
  type: TYPE_NORMAL
- en: Data systems are constantly in flux and there is a wider range of “steady state
    behavior.” There will be the temptation to delay the introduction of chaos until
    you’ve reached the mythical point of “readiness.” Well, you [can’t out-architect
    bad data](https://www.montecarlodata.com/blog-you-cant-out-architect-bad-data/)
    and no one is ever ready for chaos.
  prefs: []
  type: TYPE_NORMAL
- en: The Silicon Valley cliche of fail fast is applicable here. Or [to paraphrase
    Reid Hoffman](https://twitter.com/reidhoffman/status/847142924240379904?lang=en),
    if you aren’t embarrassed by the results of your first pre-mortem/fire drill/chaos
    introducing event, you introduced it too late.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing fake data incidents while you are dealing with real ones may seem
    silly, but ultimately this can help you get ahead by better understanding where
    you have been putting bandaids on larger issues that may need to be refactored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Third Law: Formulate hypotheses and identify variables at the system, code,
    and data levels'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chaos engineering encourages forming hypotheses of how systems will react to
    understand what thresholds to monitor. It also encourages leveraging or mimicing
    past real-world incidents or likely incidents.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll dive deeper into the details of this in the next section, but the important
    modification here is to ensure these span the system, code, and data levels. Variables
    at each level can create data incidents, some quick examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System**: You didn’t have the right permissions set in your data warehouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**: A bad left JOIN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data**: A third-party sent you garbage columns with a bunch of NULLS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating increased traffic levels and shutting down servers impact data systems,
    and those are important tests, but don’t neglect some of the more unique and fun
    ways data systems can break bad.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fourth Law: Everyone in one room (or at least Zoom call)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This law is based on the experience of my colleague, site reliability engineer,
    and chaos practitioner [Tim Tischler](https://www.linkedin.com/in/timtischler).
  prefs: []
  type: TYPE_NORMAL
- en: “Chaos engineering is just as much about people as it is systems. They evolve
    together and they can’t be separated. Half of the value from these exercises come
    from putting all the engineers in a room and asking, ‘what happens if we do X
    or if we do Y?’ You are guaranteed to get different answers. Once you simulate
    the event and see the result, now everyone’s mental maps are aligned. That is
    incredibly valuable,” he said.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the interdependence of data systems and responsibilities creates blurry
    lines of ownership even on the most well-run teams. Breaks often happen, and are
    overlooked, in those overlaps and gaps in responsibility where the data engineer,
    analytical engineer, and data analyst are pointing at the other.
  prefs: []
  type: TYPE_NORMAL
- en: In many organizations, the product engineers creating the data and the data
    engineers managing it are separated and siloed by team structures. They also often
    have different tools and models of the same system and data. Feel free to pull
    these product engineers in as well, especially when the data has been generated
    from internally built systems.
  prefs: []
  type: TYPE_NORMAL
- en: Good incident management and triage can often involve multiple teams and having
    everyone in one room can make the exercise more productive.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll also add from personal experience that these exercises can be fun (in the
    same weird way putting all your chips on red is fun). I’d encourage data teams
    to consider a chaos data engineering fire drill or pre-mortem event at the next
    offsite. It makes for a much more practical team bonding exercise than getting
    out of an escape room.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fifth Law: Hold off on the automation for now'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Truly mature chaos engineering programs like Netflix’s Simian Army are automated
    and even unscheduled. While this may create a more accurate simulation, the reality
    is that the automated tools don’t currently exist for data engineering. If they
    did, I’m unsure if I would be brave enough to use them.
  prefs: []
  type: TYPE_NORMAL
- en: To this point, one of the original Netflix chaos engineers [has described](https://medium.com/@njones_18523/chaos-engineering-traps-e3486c526059)
    how they didn’t always use automation as the chaos could create more problems
    than they could fix (especially in collaboration with those running the system)
    in a reasonable period of time.
  prefs: []
  type: TYPE_NORMAL
- en: Given data engineering’s current reliability evolution and the greater potential
    for an unintentionally large blast radius, I would recommend data teams lean more
    towards scheduled, carefully managed events.
  prefs: []
  type: TYPE_NORMAL
- en: Data Chaos Engineering Variables, AKA What To Break
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It would be a bit of a cop out to suggest data engineers overhaul their processes
    and introduce greater levels of risk without providing more concrete examples
    of tests or the value that can be derived from them.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: Systems Level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this level you should be testing the integration points across your IT and
    data systems. This includes your data pipelines from ingestion and storage to
    orchestration and visualization. You could create some chaos by:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating problems in Postgres**- You may discover you need to decouple operational
    systems from your analytical systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Killing Airflow jobs or Spark clusters-** You may discover you need alerts
    to notify the team when these failures occur and [self-healing pipeline design](https://www.startdataengineering.com/post/design-patterns/#32-behavioral).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changing up your number of Spark core executors**- [Zach Wilson has pointed
    out](https://www.linkedin.com/posts/eczachly_dataengineering-activity-7023802704107888640-kAtW?utm_source=share&utm_medium=member_desktop)
    how adding more Spark executor cores can negatively impact reliability without
    boosting performance. Experiment with that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adjust the auto-suspend policy in Snowflake**- A lot of teams are working
    to optimize their data cloud costs and it’s easy to cut a bit too deep and cause
    reliability issues. For example, if you set the auto-suspend more tightly than
    any gaps in your query workload, the warehouse could end up in a continual state
    of auto-suspend and auto-resume. This might help you discover you need to re-organize
    and categorize your data workloads by data warehouse size. Or, maybe be a bit
    more judicious on who has permission and authority to make these types of changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unpublish a dashboard**- I call this the scream test. If no one says anything
    weeks after unpublishing a dashboard, chances are you can retire it. This can
    also help test your detection and communication skills across data engineering
    and analyst teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simulate a connection failure with your streaming pipelines**- The Mercari
    data team [deftly fixed this issue quickly](https://www.montecarlodata.com/blog-mercari-data-reliability-engineering/)
    thanks to data monitoring alerts. They are tentatively planning to simulate similar
    issues to drill their detection, triage, and resolution processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “The idea is we’ll roleplay an alert from a particular dataset and walk through
    the steps for triage, root cause analysis, and communicating with the business,”
    said Daniel, member of the Mercari data reliability engineering team. “By seeing
    them in action, we can better understand the recovery plans, how we prioritize
    to ensure the most essential tables are recovered first, and how we communicate
    this with a team that spans across four time zones.”
  prefs: []
  type: TYPE_NORMAL
- en: Code Level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/2b7956036c7bc4e6b3db04b443f0fa7a.png)'
  prefs: []
  type: TYPE_IMG
- en: '*What happens when you remove that block (of code) does it all come crashing
    down? Photo by* [*Michał Parzuchowski*](https://unsplash.com/@mparzuchowski?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    *on* [*Unsplash*](https://unsplash.com/s/photos/jenga?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)'
  prefs: []
  type: TYPE_NORMAL
- en: This level is the T (transformation) in the ETL or ELT process. What happens
    when something goes wrong in your dbt models or SQL queries? Time to find out!
  prefs: []
  type: TYPE_NORMAL
- en: '**Archive a dbt model-** Similar to the dashboard scream test or Jenga. Is
    that model really needed or does the structure hold just fine when you remove
    a block? This can help evaluate your testing and monitoring; whether there are
    unknown dependencies; and lines of ownership.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adjust how a key metric is calculated-**When there are multiple versions
    of truth within an organization, trust in data is inevitably undermined by conflicting
    trends. Do changes to a key metric flow to all your downstream reports? Are there
    rogue definitions floating around? This can help evaluate the organizational process
    for defining key metrics and whether you might need to invest in a [sema](https://www.getdbt.com/product/semantic-layer/)n[tic
    layer](https://www.getdbt.com/product/semantic-layer/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Have other domains interpret your models or SQL code**- Sure, one engineer
    or team might understand the models in a particular domain, but what happens when
    others need to understand? Is it well documented? Can others help triage incidents?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where software engineers also deal with reliability issues at the code and system
    level, only data engineers must address potential issues at the data level. Have
    I mentioned that data is different?
  prefs: []
  type: TYPE_NORMAL
- en: This level can’t be neglected because your Airflow jobs may be running fine,
    your data diff may check out, but the data running across them might just be complete
    garbage. Garbage in, garbage out (and maybe systems down)
  prefs: []
  type: TYPE_NORMAL
- en: '**Change the schema-** Software engineers regularly and unintentionally commit
    code that changes how the data is output in a service, breaking downstream data
    pipelines. You may need to decouple systems and, for some operational pipelines,
    require a [data contract](https://www.montecarlodata.com/blog-data-contracts/)
    architecture in place (or some other process for better engineering coordination).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create bad data-** This may reveal your models aren’t robust against spikes
    of volume, NULLs, etc in their source tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duplicate the data**- Does a spike in data reveal bottlenecks causing jobs
    to fail? Do you need to microbatch certain pipelines? Are your pipelines idempotent
    where they need to be?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re Talking About Practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We started this manifesto with a point guard, perhaps it’s fitting we conclude
    with [this infamous 2002 quote](https://www.facebook.com/SportsCenter/videos/allen-iversons-practice-rant/470685314188618/)
    from shooting guard Allen Iverson as a warning for those who don’t buy into the
    “practice like you play” concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“We’re in here talking about practice. I mean, listen, we’re talking about
    practice. Not a game! Not a game! Not a game! We’re talking about practice. Not
    a game; not the game that I go out there and die for and play every game like
    it’s my last, not the game, we’re talking about practice, man. I mean, how silly
    is that? We’re talking about practice.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*I know I’m supposed to be there, I know I’m supposed to lead by example, I
    know that. And I’m not shoving it aside like it don’t mean anything. I know it’s
    important. I do. I honestly do. But we’re talking about practice, man. What are
    we talking about? Practice? We’re talking about practice, man!*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*We’re talking about practice! We’re talking about practice… We ain’t talking
    about the game! We’re talking about practice, man!”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That year the 76ers lost in the Eastern Conference First Round of the playoffs
    to the Boston Celtics in five games. Iveson’s field goal percentage for the series
    was a tepid 38.1%.
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow me](/@shane.murray5) on Medium for more stories on data leadership,
    applications of data science, and related topics. [Subscribe](/subscribe/@shane.murray5)
    to get my stories delivered to your inbox.'
  prefs: []
  type: TYPE_NORMAL
