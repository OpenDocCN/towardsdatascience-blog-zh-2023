- en: Program-Aided Language Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/program-aided-language-models-93d226c7d9a0?source=collection_archive---------2-----------------------#2023-08-22](https://towardsdatascience.com/program-aided-language-models-93d226c7d9a0?source=collection_archive---------2-----------------------#2023-08-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: LLMs can write code, but what if they can execute programs?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://wolfecameron.medium.com/?source=post_page-----93d226c7d9a0--------------------------------)[![Cameron
    R. Wolfe, Ph.D.](../Images/52bb88d7cf1105501be2fae5ccbe7a03.png)](https://wolfecameron.medium.com/?source=post_page-----93d226c7d9a0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----93d226c7d9a0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----93d226c7d9a0--------------------------------)
    [Cameron R. Wolfe, Ph.D.](https://wolfecameron.medium.com/?source=post_page-----93d226c7d9a0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F28aa6026c553&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprogram-aided-language-models-93d226c7d9a0&user=Cameron+R.+Wolfe%2C+Ph.D.&userId=28aa6026c553&source=post_page-28aa6026c553----93d226c7d9a0---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----93d226c7d9a0--------------------------------)
    ·18 min read·Aug 22, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F93d226c7d9a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprogram-aided-language-models-93d226c7d9a0&user=Cameron+R.+Wolfe%2C+Ph.D.&userId=28aa6026c553&source=-----93d226c7d9a0---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F93d226c7d9a0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprogram-aided-language-models-93d226c7d9a0&source=-----93d226c7d9a0---------------------bookmark_footer-----------)![](../Images/3947104a20288bfb49a2b532e471fde9.png)'
  prefs: []
  type: TYPE_NORMAL
- en: (Photo by [Florian Olivo](https://unsplash.com/@florianolv?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/4hbJ-eymZ1o?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText))
  prefs: []
  type: TYPE_NORMAL
- en: Although Large Language Models (LLMs) are used for a variety of applications,
    they have typically struggled to solve reasoning-based tasks. This issue was significantly
    diminished with the advent of prompting techniques like [Chain of Thought](https://cameronrwolfe.substack.com/p/chain-of-thought-prompting-for-llms)
    and [Least-to-Most prompting](https://cameronrwolfe.substack.com/i/116166267/variants-of-cot-prompting).
    At a high level, these techniques encourage reasoning behavior in LLMs by providing
    examples of problem-solving rationales within the model’s prompt. Then, the model
    can learn to output such rationales and produce a step-by-step solution to the
    underlying problem. Notably, this is a prompting-only approach that requires no
    fine-tuning, revealing that LLMs are capable of reasoning given a prompt with
    sufficient context.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the effectiveness of techniques like chain of thought prompting, the
    LLM is expected to produce both a problem-solving chain of thought and a final
    answer. Interestingly, such an approach leads to peculiar failure cases in which
    the LLM may produce an accurate rationale for solving a problem but still generate
    an answer that is incorrect. Usually, such errors are due to simple mistakes (e.g.,
    poor arithmetic). To solve this problem, recent research has explored a programatic
    approach that encourages the LLM to generate chains of thought with both natural
    language and code…
  prefs: []
  type: TYPE_NORMAL
