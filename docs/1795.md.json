["```py\nrmm.reinitialize(managed_memory=True)\ncluster = LocalCUDACluster()\nclient = Client(cluster)\n\npolygon_wkt = \"POLYGON((-115.074444 36.289153, -115.208314 36.325569, -115.208688 36.325646, -115.259397 36.335589, -115.260628 36.335652, -115.260845 36.335658, -115.276407 36.335967, -115.320842 36.33641, -115.333587 36.30627, -115.368573 36.170149, -115.3682 36.168344, -115.36794 36.16714, -115.353159 36.109493, -115.315922 36.023474, -115.298126 35.998029, -115.102856 35.918199, -115.100108 35.918038, -115.095546 35.917781, -115.084946 35.918409, -115.072079 35.923316, -114.918841 35.983522, -114.919047 36.0226, -114.919067 36.022821, -114.919108 36.022997, -114.93976 36.080677, -115.006009 36.219129, -115.007607 36.222047, -115.008162 36.222806, -115.010791 36.225883, -115.06011 36.27717, -115.068572 36.285772, -115.069297 36.286474, -115.069637 36.286803, -115.070046 36.287197, -115.071477 36.288191, -115.071736 36.288332, -115.074214 36.289087, -115.074444 36.289153))\"\n\n#build polygon geoseries\npolygon_shapely = wkt.loads(polygon_wkt)\npolygon = geopandas.GeoSeries.from_wkt([polygon_wkt])\npolygon[0]\n\ndef spatial_join(df_partition, polygon):\n\n    #build points geoseries\n    i_ddf = df_partition[['lon', 'lat']].interleave_columns(\n    points_gseries = cuspatial.GeoSeries.from_points_xy(i_ddf)\n\n    #do spatial join\n    result = cuspatial.point_in_polygon(\n        points_gseries, polygon\n    )\n\n    #needed for large datasets as wont fit into size_type (https://github.com/rapidsai/cudf/issues/3958)\n    true_count = np.sum(result)\n    false_count = len(result) - true_count\n\n    return (true_count, false_count)\n\ndef wrapped_spatial_join(df_partition):\n    gpolygon = cuspatial.from_geopandas(polygon)\n    return spatial_join(df_partition, gpolygon)\n\nsums = ddf.map_partitions(wrapped_spatial_join).compute()\n\ntotal_true_count = sum(t[0] for t in sums)\ntotal_false_count = sum(t[1] for t in sums)\n\nresult = {'True': total_true_count, 'False': total_false_count}\nresult\n```", "```py\nsums = ddf.map_partitions(wrapped_spatial_join).compute()\n\nCPU times: user 8.81 s, sys: 2.01 s, total: 10.8 s\nWall time: 3min 9s\n\ntotal_true_count = sum(t[0] for t in sums)\ntotal_false_count = sum(t[1] for t in sums)\nâ€‹\nresult = {'True': total_true_count, 'False': total_false_count}\nresult\n\nCPU times: user 1.3 s, sys: 79.2 ms, total: 1.38 s\nWall time: 1.34 s\n{'True': 0    2179985812\n dtype: int64,\n 'False': 0    66374320\n dtype: int64}\n\nTotal: 2,246,360,132 Rows\n```", "```py\nsums = ddf.map_partitions(wrapped_spatial_join).compute()\n\nCPU times: user 23.8 s, sys: 4.37 s, total: 28.1 s\nWall time: 6min 18s\n\ntotal_true_count = sum(t[0] for t in sums)\ntotal_false_count = sum(t[1] for t in sums)\n\nresult = {'True': total_true_count, 'False': total_false_count}\nresult\n\nCPU times: user 4.29 s, sys: 301 ms, total: 4.59 s\nWall time: 4.45 s\n{'True': 0    2179985812\n dtype: int64,\n 'False': 0    66374320\n dtype: int64}\n\nTotal: 2,246,360,132 Rows\n```", "```py\n#interleaved\n\n[\nlon,\nlat,\nlon,\nlat,\nlon,\nlat,\nlon,\n...\n]\n\n#instead of\n\n[[lon,lat],[lon,lat],[lon,lat],[lon,lat],[lon,lat],...] \n```"]