- en: Clear, Visual Explanation of K-Means for Image Compression with GIFs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K-Means 图像压缩的清晰、直观解释
- en: 原文：[https://towardsdatascience.com/clear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410?source=collection_archive---------8-----------------------#2023-01-16](https://towardsdatascience.com/clear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410?source=collection_archive---------8-----------------------#2023-01-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/clear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410?source=collection_archive---------8-----------------------#2023-01-16](https://towardsdatascience.com/clear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410?source=collection_archive---------8-----------------------#2023-01-16)
- en: '[](https://medium.com/@sebastian.charmot?source=post_page-----b7fdc547e410--------------------------------)[![Sebastian
    Charmot](../Images/c848c48d186b536c83e34e3a06332e8c.png)](https://medium.com/@sebastian.charmot?source=post_page-----b7fdc547e410--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b7fdc547e410--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b7fdc547e410--------------------------------)
    [Sebastian Charmot](https://medium.com/@sebastian.charmot?source=post_page-----b7fdc547e410--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@sebastian.charmot?source=post_page-----b7fdc547e410--------------------------------)[![Sebastian
    Charmot](../Images/c848c48d186b536c83e34e3a06332e8c.png)](https://medium.com/@sebastian.charmot?source=post_page-----b7fdc547e410--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b7fdc547e410--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b7fdc547e410--------------------------------)
    [Sebastian Charmot](https://medium.com/@sebastian.charmot?source=post_page-----b7fdc547e410--------------------------------)'
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8d18b9c9ebb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410&user=Sebastian+Charmot&userId=8d18b9c9ebb&source=post_page-8d18b9c9ebb----b7fdc547e410---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b7fdc547e410--------------------------------)
    ·11 min read·Jan 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb7fdc547e410&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410&user=Sebastian+Charmot&userId=8d18b9c9ebb&source=-----b7fdc547e410---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8d18b9c9ebb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410&user=Sebastian+Charmot&userId=8d18b9c9ebb&source=post_page-8d18b9c9ebb----b7fdc547e410---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b7fdc547e410--------------------------------)
    ·11分钟阅读·2023年1月16日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb7fdc547e410&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410&user=Sebastian+Charmot&userId=8d18b9c9ebb&source=-----b7fdc547e410---------------------clap_footer-----------)'
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb7fdc547e410&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410&source=-----b7fdc547e410---------------------bookmark_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb7fdc547e410&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fclear-and-visual-explanation-of-the-k-means-algorithm-applied-to-image-compression-b7fdc547e410&source=-----b7fdc547e410---------------------bookmark_footer-----------)'
- en: How K-Means can be used to significantly reduce the file size of an image.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: K-Means 如何显著减少图像文件大小。
- en: In this guide, I describe and implement the k-means algorithm from scratch and
    apply it to image compression. I use different visualizations to help the reader
    develop a stronger understanding of the k-means algorithm and how it can be used
    for image compression. I also discuss various advantages and limitations of this
    approach towards the end.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我从零开始描述并实现了 k-means 算法，并将其应用于图像压缩。我使用不同的可视化方法帮助读者深入理解 k-means 算法及其在图像压缩中的应用。我还在最后讨论了这种方法的各种优点和局限性。
- en: All images unless otherwise noted are by the author, available [here](https://www.sebastiancharmot.com/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则所有图片均由作者提供，可在[此处](https://www.sebastiancharmot.com/)查看。
- en: '![](../Images/eb4a8971c44c824c68e531b2b3d3a2f1.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb4a8971c44c824c68e531b2b3d3a2f1.png)'
- en: Using K-means to compress the original image on the left by a factor of 6
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用K-means将左侧的原始图像压缩了6倍
- en: '![](../Images/4a8d4863efed1d27cfda9ddad80ef5b7.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a8d4863efed1d27cfda9ddad80ef5b7.png)'
- en: How the k-means algorithm iteratively creates the compressed image
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: K-means算法如何迭代地创建压缩图像
- en: What is the K-Means Algorithm?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是K-Means算法？
- en: The k-means algorithm is an *unsupervised* algorithm that *partitions* a dataset
    into *k* distinct clusters. It is unsupervised, meaning there are no labels for
    the data points. In other words, we don’t have prior knowledge of how the dataset
    should be clustered. We simply provide the dataset as is, and use k-means to partition
    it into *k* clusters.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: K-means算法是一种*无监督*算法，它将数据集划分为*k*个不同的簇。它是无监督的，意味着数据点没有标签。换句话说，我们不知道数据集应该如何被聚类。我们只需提供数据集本身，使用k-means将其划分为*k*个簇。
- en: Big Picture Idea
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大概念
- en: K-means seeks to divide a dataset into k clusters where members of each cluster
    share characteristics and are different from other clusters. Therefore, the goal
    is for k-means to divide the dataset *meaningfully* into k different clusters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: K-means旨在将数据集划分为k个簇，其中每个簇的成员共享特征，并且与其他簇不同。因此，K-means的目标是将数据集*有意义*地划分为k个不同的簇。
- en: Applications
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用
- en: Cluster analysis groups similar data together by abstracting the underlying
    structure of a dataset, which can provide meaningful insight. “Clustering has
    been effectively applied in a variety of engineering and scientific disciplines
    such as psychology, biology, medicine, computer vision, communications, and remote
    sensing” [[1](https://www.researchgate.net/profile/M-Murty-3/publication/5600582_Genetic_K-Means_Algorithm/links/541aaa280cf25ebee988b52d/Genetic-K-Means-Algorithm.pdf)].
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类分析通过抽象数据集的底层结构，将相似的数据分组在一起，从而提供有意义的见解。“聚类已经在心理学、生物学、医学、计算机视觉、通信和遥感等各种工程和科学领域得到了有效应用”[[1](https://www.researchgate.net/profile/M-Murty-3/publication/5600582_Genetic_K-Means_Algorithm/links/541aaa280cf25ebee988b52d/Genetic-K-Means-Algorithm.pdf)]。
- en: How the K-Means Algorithm Works
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K-Means算法如何工作
- en: 'The K-means algorithm is broken into several steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: K-means算法分为几个步骤：
- en: Initializing a set of cluster centroids
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一组簇心
- en: Assigning observations to clusters
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将观测值分配到簇中
- en: Updating the clusters
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新簇
- en: Steps 2 and 3 are repeated for either a set number of iterations or until convergence,
    which occurs when the cluster centroids no longer change.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第2步和第3步会重复执行，直到达到设定的迭代次数或直到收敛，即当簇心不再变化时。
- en: Let us dive deeper into each of these steps.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解这些步骤。
- en: 1\. Initializing the set of cluster centroids
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 初始化簇心集合
- en: The first step to initializing the set of cluster centroids is choosing how
    many centroids we want to use, which we refer to as *k*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化簇心集合的第一步是选择我们想要使用多少个簇心，我们将其称为*k*。
- en: Once, we have chosen the number of clusters, we choose *k* samples randomly
    from the training examples, and set the cluster centroids to be equal to the values
    of the selected *k* examples. Alternatively, we can randomly sample *k* different
    points in the solution space to initialize the cluster centroids.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了簇的数量，我们从训练样本中随机选择*k*个样本，将簇心设置为所选*k*个样本的值。或者，我们可以在解空间中随机抽取*k*个不同的点来初始化簇心。
- en: We refer to the *j*-th centroid as μⱼ, because it represents the mean of the
    values assigned to cluster *j*. This is where the name k-means arises from. In
    the figure below, we set *k*=3 and randomly sample 3 points in the sample space
    (represented by green, blue, and red ‘x’) to initialize the cluster centroids.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将*j*-th簇心称为μⱼ，因为它代表分配给簇*j*的值的均值。这就是k-means名称的由来。在下图中，我们设置*k*=3，并在样本空间中随机抽取3个点（用绿色、蓝色和红色的‘x’表示）来初始化簇心。
- en: '![](../Images/8e3b17968729d91228e949780d813930.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e3b17968729d91228e949780d813930.png)'
- en: On the left, the data is shown on a scatter-plot. On the right, we add the 3
    initial cluster centroids denoted in green, blue, and red ‘x’
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，数据以散点图的形式展示。在右侧，我们添加了三个初始的簇心，用绿色、蓝色和红色的‘x’表示。
- en: 2\. Assigning Observations to Clusters
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 将观测值分配到簇中
- en: Now that we have our *k* centroids, we assign each observation (data point)
    to the centroid closest to it. Typically, we calculate “closeness” using the euclidean
    distance. In the figure below, we illustrate the process of assigning the observations
    to the 3 centroids above.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的*k*质心，我们将每个观察值（数据点）分配给离它最近的质心。通常，我们使用欧几里得距离计算“接近度”。在下图中，我们展示了将观察值分配给上面3个质心的过程。
- en: '![](../Images/72fb7317b23deed421ebf31cee0adbe4.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72fb7317b23deed421ebf31cee0adbe4.png)'
- en: On the left, we show the 3 initial centroids. On the right, we see assign observations
    to the nearest centroid.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧显示了3个初始质心。右侧则显示了将观察值分配给最近的质心。
- en: 3\. Updating the Centroids
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 更新质心
- en: Once all of the observations have been assigned to a cluster, we shift the centroid
    of each cluster to the mean of its assigned observations. We illustrate this process
    below.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有观察值都被分配到一个簇中，我们会将每个簇的质心移动到其分配观察值的均值。我们在下面展示了这一过程。
- en: '![](../Images/0bdbb48c250b2b9218762b42f1fa7d16.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0bdbb48c250b2b9218762b42f1fa7d16.png)'
- en: On the left, we assign observations to clusters. On the right, we update the
    cluster centroids to the mean of the assigned observations. Notice how the centroids
    shift.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧是将观察值分配到簇中。右侧则是将簇的质心更新为分配的观察值的均值。注意质心如何移动。
- en: Repeat till convergence or for a certain number of iterations
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重复直到收敛或进行一定次数的迭代
- en: 'Each iteration of the k-means algorithm consists of two parts: Step 2 (Assigning
    Observations to Clusters) and Step 3 (Updating the Clusters). This process is
    repeated for either a set number of iterations or until convergence. Convergence
    occurs when the cluster centroids no longer change. This is equivalent to saying
    that the assignments of the observations do not change anymore.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: k-means算法的每次迭代包括两个部分：步骤2（将观察值分配给簇）和步骤3（更新簇）。这个过程会重复进行，直到达到设定的迭代次数或收敛。当簇的质心不再变化时，就发生了收敛。这等同于说观察值的分配不再变化。
- en: The *k* means algorithm will always converge within a finite number of iterations
    [[2](https://stats.stackexchange.com/questions/188087/proof-of-convergence-of-k-means)]
    but it is susceptible to local minima [[3](https://cs229.stanford.edu/notes2022fall/main_notes.pdf)].
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*k*均值算法将在有限次数的迭代内收敛[[2](https://stats.stackexchange.com/questions/188087/proof-of-convergence-of-k-means)]，但它容易受到局部极小值的影响[[3](https://cs229.stanford.edu/notes2022fall/main_notes.pdf)]。'
- en: In the example below, the *k* means algorithm converges at iteration 4\. This
    is because the cluster centroids no longer change after iteration 4.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下例中，*k*均值算法在第4次迭代时收敛。这是因为在第4次迭代之后，簇的质心不再变化。
- en: '![](../Images/c0ff935f399427c39ccf6b402a3fa913.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c0ff935f399427c39ccf6b402a3fa913.png)'
- en: K-means iterating until convergence
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: K-means迭代直到收敛
- en: K-Means for Image Compression
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K-means用于图像压缩
- en: The goal of image compression is to reduce the file size of an image. We can
    use K-means to select *k* colors to represent an entire image. This allows us
    to represent an image using only *k* colors, instead of the entire RGB space.
    This process is also referred to as *image quantization*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图像压缩的目标是减少图像的文件大小。我们可以使用K-means选择*k*种颜色来表示整个图像。这使我们可以仅用*k*种颜色来表示图像，而不是整个RGB空间。这一过程也称为*图像量化*。
- en: Why K-means is useful for image compression
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么K-means对图像压缩有用
- en: The purpose of using k-means for image compression is to select *k* colors to
    represent a target image with the least approximation error. In other words, we
    will be using k-means to find the **best** *k* colors to represent a target image
    with.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用k-means进行图像压缩的目的是选择*k*种颜色来表示目标图像，从而使逼近误差最小。换句话说，我们将使用k-means找到表示目标图像的**最佳**
    *k*种颜色。
- en: How K-means provides compression
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: K-means如何提供压缩
- en: The color pixels in an image are represented by their RGB values, which each
    range from 0 to 255\. Since each color band has 256=2⁸ settings, there are a total
    of 256 **⋅** 256 **⋅** 256 = 256³ = 2²⁴ ~ 17 million colors. To represent each
    of these colors for any pixel, computers need log₂(2²⁴) = 24 bits of storage space.
    If we use K-means to select 16 colors that we represent an entire image with,
    we only need log₂(16) = 4 bits. Therefore, by using K-means with *k*=16, we can
    compress the image size by a factor of 6!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图像中的颜色像素由其RGB值表示，每个值的范围从0到255。由于每个颜色通道有256=2⁸种设置，总共有256 **⋅** 256 **⋅** 256
    = 256³ = 2²⁴ ~ 1700万种颜色。为了表示这些颜色中的每一种，计算机需要log₂(2²⁴) = 24位的存储空间。如果我们使用K-means选择16种颜色来表示整个图像，我们只需要log₂(16)
    = 4位。因此，通过使用*k*=16的K-means，我们可以将图像大小压缩6倍！
- en: Now that we understand the theory, let us dive into some code and visualizations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了理论，让我们深入一些代码和可视化。
- en: '![](../Images/4a8d4863efed1d27cfda9ddad80ef5b7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a8d4863efed1d27cfda9ddad80ef5b7.png)'
- en: How the centroids and resultant compressed image change as the number of iterations
    increases
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随着迭代次数增加，质心和压缩图像的变化情况
- en: Reading in the Image and Initializing the Centroids
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取图像并初始化质心
- en: In the context of image compression, the centroids are the colors we are using
    to represent the compressed image. Therefore, our first step is to read in the
    image and select *k* random colors from the image to initialize our centroids.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像压缩的背景下，质心是我们用来表示压缩图像的颜色。因此，我们的第一步是读取图像并从图像中选择 *k* 种随机颜色来初始化我们的质心。
- en: In line 7, we read in the image using numpy. This produces a 2 dimensional array
    where each element is a list of length 3 that represents the RGB values of that
    pixel. Remember to modify `image_path` to your own.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7行，我们使用 numpy 读取图像。这会生成一个二维数组，其中每个元素是一个长度为3的列表，表示该像素的RGB值。记得将 `image_path`
    修改为你自己的路径。
- en: Starting on line 9, we define the function to initialize our centroids. We select
    a random pixel from the image and add its corresponding RGB value to the `centroids_init`
    array. We do this *k =* `num_clusters` times. Thus, `centroids_init` is an array
    of *k* colors sampled randomly from our image.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从第9行开始，我们定义函数以初始化我们的质心。我们从图像中选择一个随机像素，并将其对应的RGB值添加到 `centroids_init` 数组中。我们这样做
    *k =* `num_clusters` 次。因此，`centroids_init` 是一个从图像中随机采样的 *k* 种颜色的数组。
- en: Assigning and Updating Centroids
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配和更新质心
- en: To iteratively update our centroids, we repeat the process of assigning observations
    to cluster centroids and updating the centroids to be the mean of the assigned
    observations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了迭代更新质心，我们重复分配观测值到簇质心的过程，并将质心更新为分配观测值的均值。
- en: In the context of image compression, this means assigning each pixel of the
    target image to the centroid color that is nearest to it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像压缩的背景下，这意味着将目标图像的每个像素分配给最近的质心颜色。
- en: In lines 11–17, we are creating the dictionary `centroid_rgbs` . Each key corresponds
    to an index of the centroids and the values are a single numpy array that contain
    all of the colors assigned to the corresponding centroid.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在第11到17行，我们创建了字典 `centroid_rgbs`。每个键对应质心的一个索引，值是一个包含所有分配给相应质心的颜色的 numpy 数组。
- en: The assignment of each pixel to a centroid is done on line 13 using `linalg.norm`to
    calculate the euclidean distance to each centroid and then using `argmin`to find
    the index of the nearest centroid.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个像素的质心分配在第13行完成，使用 `linalg.norm` 计算到每个质心的欧几里得距离，然后使用 `argmin` 找到最近质心的索引。
- en: Creating the Compressed Image
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建压缩图像
- en: Now that we have the finalized centroids, we can create the compressed image.
    We simply iterate through each pixel and change its color to the nearest centroid.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了最终的质心，可以创建压缩图像。我们只需遍历每个像素，并将其颜色更改为最近的质心。
- en: Putting Everything Together
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 综合所有内容
- en: With the following snippet and the function definitions above, all the pieces
    to running k-means for image compression are complete.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码片段和上述函数定义，运行 k-means 进行图像压缩的所有步骤已经完成。
- en: To generate the GIF’s, I used `plt.savefig` at various stages of the algorithm.
    My github repository contains the code for that process, and how to convert those
    frames to a GIF [[4](https://github.com/SebastianCharmot/kmeans_image_compression)].
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为生成 GIF，我在算法的各个阶段使用了 `plt.savefig`。我的 GitHub 仓库包含了该过程的代码，以及如何将这些帧转换为 GIF [[4](https://github.com/SebastianCharmot/kmeans_image_compression)]。
- en: '![](../Images/0eda8ce59d0ce400d13f7813feba0ac3.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0eda8ce59d0ce400d13f7813feba0ac3.png)'
- en: Progression of k=64 on an image of a cuttelfish.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: k=64 在一只墨鱼图像上的进展。
- en: In the GIF above, we see how the centroids, which are the colors we choose to
    represent the image, change over time as the k-means algorithm iterates.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的 GIF 中，我们可以看到质心（即我们选择用来表示图像的颜色）如何随着 k-means 算法的迭代而变化。
- en: Analysis of K-Means for Image Compression
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K-Means 在图像压缩中的分析
- en: Now, we analyze some details regarding the use of k-means for image compression.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们分析一些关于使用 k-means 进行图像压缩的细节。
- en: Outliers
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常值
- en: Often, images will contain outlier colors relative to the main color palette
    of the image. For example, the target image below contains two small clown-fish
    that are bright orange. Their color contrasts strongly from the dark background
    and sea anemone, which draws the viewers attention to them (hopefully in an aesthetically
    pleasing way).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，图像会包含相对于图像主要色彩调色板的异常颜色。例如，下面的目标图像包含两只亮橙色的小丑鱼。它们的颜色与黑暗的背景和海葵形成强烈对比，这引起了观众的注意（希望以美观的方式）。
- en: '![](../Images/e81c4a1c2e10e75d58418ac0149e9ca7.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e81c4a1c2e10e75d58418ac0149e9ca7.png)'
- en: My original image is on the left. The image on the right is compressed using
    k-means where *k*=16
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我的原始图像在左侧。右侧的图像是使用 k-means 压缩的，*k*=16
- en: The GIF below illustrates what happens when we apply k-means to this image for
    *k*=16\. Although the clown-fish’s bright orange is selected as an initial cluster,
    it is eventually ‘washed out’ by the darker colors as the algorithm iterates.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 GIF 展示了当我们对图像应用 k-means 时发生的情况，*k*=16。虽然小丑鱼的亮橙色被选为初始集群，但随着算法迭代，它最终被较暗的颜色“冲淡”。
- en: '![](../Images/6a188e4b1d530eca5ef332d709d9a4e3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a188e4b1d530eca5ef332d709d9a4e3.png)'
- en: K-means iterating over the picture of the sea anemone. Notice how the bright
    orange is lost over time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: K-means 在海葵的图像上进行迭代。注意亮橙色如何随着时间的推移而消失。
- en: Although the overall quality of the compressed image increases as the number
    of iterations increases, the accuracy of the outlier color decreases.
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管压缩图像的总体质量随着迭代次数的增加而提高，但异常颜色的准确性会下降。
- en: Some literature suggests creating clusters specifically for outliers (calculated
    using a distance metric) to improve overall clustering accuracy [[5](https://www2.math.uconn.edu/~gan/ggpaper/gan2017kmor.pdf)].
    The authors’ use of numerical experiments on both synthetic data and real data
    are provided to demonstrate the effectiveness and efficiency of their proposed
    algorithm. I suspect that implementing this algorithm could help with image compression
    using k-means, especially with images that contain outlier colors.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文献建议专门为异常值创建集群（使用距离度量计算）以提高整体聚类准确性 [[5](https://www2.math.uconn.edu/~gan/ggpaper/gan2017kmor.pdf)]。作者通过对合成数据和真实数据的数值实验来演示他们提出的算法的有效性和效率。我怀疑实现这个算法可能有助于使用
    k-means 进行图像压缩，尤其是对于包含异常颜色的图像。
- en: Selecting “*k”*
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择“*k*”
- en: The choice of *k* determines the amount of compression, and is up to the user
    to set. A higher value of *k* will provide for a more faithful representation
    of the target image, but comes at the cost of lower compression. In the graphic
    below, we illustrate compressed images with increasing values of *k*. The compression
    factors for *k*=16, *k*=32, *k*=64, and *k*=128 are **6**, **4.8**, **4**, and
    **3.4** respectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*k* 的选择决定了压缩量，并由用户设置。较高的*k*值将提供对目标图像的更忠实的表示，但代价是压缩率较低。在下面的图形中，我们展示了随着 *k* 值增加的压缩图像。*k*=16、*k*=32、*k*=64
    和 *k*=128 的压缩因子分别为 **6**、**4.8**、**4** 和 **3.4**。'
- en: '![](../Images/6564a7b2dd9de3b720be80bd9827265d.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6564a7b2dd9de3b720be80bd9827265d.png)'
- en: Compressed images for k=16, 32, 64, and 128
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: k=16、32、64 和 128 的压缩图像
- en: In the example above, we see that choosing a *k* value greater than 32 is critical
    in mitigating the outlier issue mentioned in the previous section. Since k is
    large enough, at least one centroid is able to be assigned to the bright orange
    color. In the figure below, we plot the centroid colors after 30 iterations for
    both k=64 and k=256.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们可以看到选择一个大于 32 的*k*值对于缓解前面提到的异常值问题至关重要。由于 k 足够大，至少一个中心点能够分配给亮橙色。在下图中，我们绘制了
    k=64 和 k=256 在 30 次迭代后的中心点颜色。
- en: '![](../Images/12b366855481307378f49784f06dd806.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/12b366855481307378f49784f06dd806.png)'
- en: Centroids for k=64 and k=256 after 30 iterations
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: k=64 和 k=256 在 30 次迭代后的中心点
- en: After 30 iterations, *k*=64 has one centroid that is assigned to orange. For
    *k*=256, there are approximately 4 shades of orange.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 30 次迭代后，*k*=64 具有一个分配给橙色的中心点。对于 *k*=256，大约有 4 种橙色。
- en: This visualization also portrays the compression amount vs. detail trade-off
    for different k-values. Clearly for larger values of k, we have more colors and
    retention of detail, however we require more data to represent those colors.
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个可视化还描绘了不同*k*值下的压缩量与细节保留之间的权衡。显然，对于较大的*k*值，我们有更多的颜色和细节保留，但我们需要更多的数据来表示这些颜色。
- en: It is likely worth experimenting with different values of *k* depending on the
    target image and use case.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 根据目标图像和使用案例，尝试不同的*k*值可能是值得的。
- en: Lossy Compression
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有损压缩
- en: Using the k-means algorithm to compress an image is a form of *lossy compresion*.
    Lossy compression is a class of data compression that uses approximations and
    partial data loss of a target image [[6](https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:data-compression/a/lossy-compression)].
    When we use k-means for image compression, we are approximating each pixel’s color
    using the nearest centroid. Since we are losing information in this process, we
    cannot revert the compressed image back to the original. This is why lossy compression
    is also refered to as *irreversible compression*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用k-means算法压缩图像是一种*有损压缩*。有损压缩是一类数据压缩方法，它通过对目标图像进行近似和部分数据丢失来实现[[6](https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:data-compression/a/lossy-compression)]。当我们使用k-means进行图像压缩时，我们是通过最近的中心点来近似每个像素的颜色。由于在这个过程中丢失了信息，我们无法将压缩后的图像恢复为原始图像。这就是为什么有损压缩也被称为*不可逆压缩*。
- en: On the other hand, lossless data compression does not lose information. Instead,
    it uses techniques to represent the original information using less data [[7](https://ieeexplore.ieee.org/abstract/document/1594297)].
    However, the amount of compression that is possible using lossless data compression
    is much lower than that of lossy compression.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，无损数据压缩不会丢失信息。相反，它使用技术来用更少的数据表示原始信息[[7](https://ieeexplore.ieee.org/abstract/document/1594297)]。然而，无损数据压缩能够实现的压缩量远低于有损压缩。
- en: Although k-means is a form of lossy compression, the loss of detail can be almost
    in-perceivable to the human eye for certain values of *k*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管k-means是一种有损压缩形式，但对于某些*k*值，细节的丧失对人眼几乎是不可察觉的。
- en: '![](../Images/a1747ee458e6e2d72db6f8b3d0a402f4.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1747ee458e6e2d72db6f8b3d0a402f4.png)'
- en: Target image on left and compressed image on right using k=256
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧为目标图像，右侧为使用k=256压缩后的图像
- en: Can you notice many differences between the two images above? Using *k*=256,
    the compressed image on the right requires only 1/3 the amount of data compared
    to the full image on the right!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你能注意到上面两幅图像之间的许多差异吗？使用*k*=256，右侧的压缩图像只需要右侧完整图像的1/3的数据量！
- en: Randomness in Centroid Initialization
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中心点初始化中的随机性
- en: Holding everything in regards to k-means constant, each run will differ slightly
    as a result of the randomness inherent in the centroid initialization process.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在k-means算法的所有条件保持不变的情况下，由于中心点初始化过程中的随机性，每次运行的结果会略有不同。
- en: '![](../Images/e414737c395a110e1f65221ad82c8551.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e414737c395a110e1f65221ad82c8551.png)'
- en: Notice the slight variations in the compressed images for 3 separate runs of
    k=16
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意k=16时3次独立运行的压缩图像中的细微变化
- en: This means that the compressed images given the same parameters will output
    slightly different variations. However, for larger values of k, this effect is
    not as apparent to the human eye.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在相同参数下，压缩图像会输出略微不同的变体。然而，对于较大的k值，这种效果对人眼不那么明显。
- en: '![](../Images/9ec819a4610d939fa74cb6866e1348bb.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ec819a4610d939fa74cb6866e1348bb.png)'
- en: The differences in the compressed images for 3 separate runs of k=1256 are almost
    indistribguishable
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: k=1256时3次独立运行的压缩图像差异几乎不可区分
- en: Advantages and Disadvantages
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优势与劣势
- en: Now that we have completed a thorough analysis of the k-means algorithm in regards
    to image compression, we will explicitly discuss its advantages and disadvantages.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对k-means算法在图像压缩方面的全面分析，我们将明确讨论其优缺点。
- en: Advantages
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优势
- en: 'Efficiency: The k-means algorithm is computationally efficient (linear time
    complexity), making it suitable for real-time image compression applications [[8](https://ieeexplore.ieee.org/document/8101601)].
    This also means it can handle large images.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 效率：k-means算法在计算上高效（线性时间复杂度），使其适用于实时图像压缩应用[[8](https://ieeexplore.ieee.org/document/8101601)]。这也意味着它可以处理大图像。
- en: 'Simplicity: The k-means algorithm is relatively simple and easy to understand.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单性：k-means算法相对简单，易于理解。
- en: 'Great for certain types of images: k-means performs well on images with distinct
    clusters of similar colors.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于某些类型的图像很有用：k-means在具有明显颜色簇的图像上表现良好。
- en: Disadvantages
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: 'Lossy Compression Algorithm: K-means is a form of lossy compression that represents
    an entire image based on clusters of pixels, therefore it loses some color information
    and may not preserve fine details in an image.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有损压缩算法：k-means是一种有损压缩形式，它基于像素簇表示整个图像，因此会丢失一些颜色信息，可能无法保留图像中的细节。
- en: 'Sensitivity to initialization: The performance of the k-means algorithm can
    be sensitive to the initial positions of the centroids, which can lead to sub-optimal
    or inconsistent results. This is less of a problem with larger values of *k*.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对初始化的敏感性：k-means算法的性能可能对质心的初始位置敏感，这可能导致次优或不一致的结果。对于较大的*k*值，这个问题会有所减轻。
- en: 'Not suitable for certain types of images: k-means algorithm perform poorly
    on images with smooth color gradients and images with high noise.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不适用于某些类型的图像：k-means算法在颜色渐变平滑的图像和噪声较高的图像上表现较差。
- en: Conclusion
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Overall, k-means can be a good choice for lossy image compression, especially
    for images with distinct clusters of similar colors. However, it may not be the
    best choice for all types of images and other techniques such as vector quantization
    or fractal compression may produce better results.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，k-means对于有明显颜色簇的图像来说是一个不错的有损图像压缩选择。然而，它可能不是所有类型图像的最佳选择，其他技术如向量量化或分形压缩可能会产生更好的结果。
- en: The user has a critical decision to make when selecting the value of *k*, and
    must keep in mind the ‘compression amount vs. detail trade-off’ discussed in the
    “Selecting ‘k’” section. The optimal k value will likely vary according to the
    user’s needs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在选择*k*的值时面临关键决策，并且必须牢记在“选择‘k’”部分讨论的“压缩量与细节权衡”。最佳的k值可能会根据用户的需求而有所不同。
- en: Hopefully the different visualizations were able to help develop a stronger
    understanding of the k-means algorithm, and how it can perform image compression.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 希望不同的可视化能够帮助加深对k-means算法及其如何进行图像压缩的理解。
- en: References
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Krishna, K., and M. Narasimha Murty. “Genetic K-Means Algorithm.” *IEEE
    Transactions on Systems, Man and Cybernetics, Part B (Cybernetics)*, vol. 29,
    no. 3, 1999, pp. 433–439., [https://doi.org/10.1109/3477.764879.](https://doi.org/10.1109/3477.764879.)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Krishna, K., 和 M. Narasimha Murty. “遗传k-means算法。” *IEEE系统、男人与控制学报B部分（控制学）*，第29卷，第3期，1999年，页码433–439。
    [https://doi.org/10.1109/3477.764879](https://doi.org/10.1109/3477.764879)'
- en: '[2] [https://stats.stackexchange.com/questions/188087/proof-of-convergence-of-k-means](https://stats.stackexchange.com/questions/188087/proof-of-convergence-of-k-means)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [https://stats.stackexchange.com/questions/188087/proof-of-convergence-of-k-means](https://stats.stackexchange.com/questions/188087/proof-of-convergence-of-k-means)'
- en: '[3] Ng, Andrew. “CS229 Lecture Notes.” [https://cs229.stanford.edu/notes2022fall/main_notes.pdf](https://cs229.stanford.edu/notes2022fall/main_notes.pdf)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] Ng, Andrew. “CS229讲义。” [https://cs229.stanford.edu/notes2022fall/main_notes.pdf](https://cs229.stanford.edu/notes2022fall/main_notes.pdf)'
- en: '[4] My Github Repository with the code for this project. [https://github.com/SebastianCharmot/kmeans_image_compression](https://github.com/SebastianCharmot/kmeans_image_compression)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 我的Github代码库。 [https://github.com/SebastianCharmot/kmeans_image_compression](https://github.com/SebastianCharmot/kmeans_image_compression)'
- en: '[5] Gan, Guojun, and Michael Kwok-Po Ng. “K -Means Clustering with Outlier
    Removal.” *Pattern Recognition Letters*, vol. 90, 2017, pp. 8–14., [https://doi.org/10.1016/j.patrec.2017.03.008.](https://doi.org/10.1016/j.patrec.2017.03.008.)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] Gan, Guojun, 和 Michael Kwok-Po Ng. “去除异常值的k-means聚类。” *模式识别快报*，第90卷，2017年，页码8–14。
    [https://doi.org/10.1016/j.patrec.2017.03.008](https://doi.org/10.1016/j.patrec.2017.03.008)'
- en: '[6] “Lossy Compression (Article).” *Khan Academy*, Khan Academy, [https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:data-compression/a/lossy-compression.](https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:data-compression/a/lossy-compression.)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] “有损压缩（文章）。” *可汗学院*，可汗学院， [https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:data-compression/a/lossy-compression](https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:digital-information/xcae6f4a7ff015e7d:data-compression/a/lossy-compression)'
- en: '[7] Ming Yang, and N. Bourbakis. “An Overview of Lossless Digital Image Compression
    Techniques.” *48th Midwest Symposium on Circuits and Systems, 2005.*, 2005, [https://doi.org/10.1109/mwscas.2005.1594297.](https://doi.org/10.1109/mwscas.2005.1594297.)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[7] Ming Yang 和 N. Bourbakis. “无损数字图像压缩技术概述。” *第48届中西部电路与系统研讨会，2005年*，2005年，
    [https://doi.org/10.1109/mwscas.2005.1594297](https://doi.org/10.1109/mwscas.2005.1594297)'
- en: '[8] Chiou, Paul T., et al. “A Complexity Analysis of the JPEG Image Compression
    Algorithm.” *2017 9th Computer Science and Electronic Engineering (CEEC)*, 2017,
    [https://doi.org/10.1109/ceec.2017.8101601.](https://doi.org/10.1109/ceec.2017.8101601.)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[8] Chiou, Paul T., 等. “JPEG图像压缩算法的复杂性分析。” *2017年第九届计算机科学与电子工程会议 (CEEC)*, 2017,
    [https://doi.org/10.1109/ceec.2017.8101601.](https://doi.org/10.1109/ceec.2017.8101601.)'
