["```py\npip install pandas==0.25.2\n```", "```py\nimport pandas as pd\n\n# Define helper functions\ndef get_transition_tuples(ls):\n    ''' Converts a time series into a list of transition tuples\n    '''\n    return [(ls[i-1], ls[i]) for i in range(1, len(ls))]\n\ndef get_transition_event(tup):\n    ''' Converts a tuple into a discrete transition event\n    '''\n    transition_event = 'flat'\n    if tup[0] < tup[1]:\n        transition_event = 'up'\n    if tup[0] > tup[1]:\n        transition_event = 'down'\n    return transition_event\n\n# Generate raw time series data\nls_raw_time_series = [1, 2, -2, -1, 0, 0, 2, 2, 1, 2, 3]\n\n# Derive single-step state transition tuples\nls_transitions = get_transition_tuples(ls_raw_time_series)\n\n# Convert raw time series data into discrete events\nls_events = [get_transition_event(tup) for tup in ls_transitions]\nls_event_transitions = get_transition_tuples(ls_events)\n\n# Create an index (list) of unique event types\nls_index = ['up', 'flat', 'down']\n\n# Initialize Markov transition matrix with zeros\ndf = pd.DataFrame(0, index=ls_index, columns=ls_index)\n\n# Derive transition matrix (or co-occurrence matrix)\nfor i, j in ls_event_transitions:\n    df[j][i] += 1  # Update j-th column and i-th row\n\n''' Derive row-normalized transition matrix:\n- Elements are normalized by row sum (fill NAs/NaNs with 0s)\n- df.sum(axis=1) sums up each row, df.div(..., axis=0) then divides each column element\n'''\ndf_rnorm = df.div(df.sum(axis=1), axis=0).fillna(0.00)\n\n''' Derive column-normalized transition matrix:\n- Elements are normalized by column sum (fill NAs/NaNs with 0s)\n- df.sum(axis=0) sums up each col, df.div(..., axis=1) then divides each row element\n'''\ndf_cnorm = df.div(df.sum(axis=0), axis=1).fillna(0.00)\n```", "```py\n>>> df  # Transition matrix with raw event co-occurrences up    flat  down\nup    2     2     1\nflat  1     0     1\ndown  2     0     0 >>> df_rnorm  # Row-normalized transition matrix up    flat  down\nup    0.4   0.4   0.2\nflat  0.5   0.0   0.5\ndown  1.0   0.0   0.0 >>> df_cnorm  # Column-normalized transition matrix up    flat  down\nup    0.4   1.0   0.5\nflat  0.2   0.0   0.5\ndown  0.4   0.0   0.0\n```", "```py\npip install graphviz==0.13.2\n```", "```py\nfrom graphviz import Digraph\n\n# Define functions to visualize transition matrices as graphs\n\ndef get_df_edgelist(df, ls_index):\n    ''' Derive an edge list with weight values\n    '''\n    edgelist = []\n    for i in ls_index:\n        for j in ls_index:\n            edgelist.append([i, j, df[j][i]])\n    return pd.DataFrame(edgelist, columns=['src', 'dst', 'weight'])\n\ndef edgelist_to_digraph(df_edgelist):\n    ''' Convert an edge list into a weighted directed graph\n    '''\n    g = Digraph(format='jpeg')\n    g.attr(rankdir='LR', size='30')\n    g.attr('node', shape='circle')\n    nodelist = []\n    for _, row in df_edgelist.iterrows():\n        node1, node2, weight = [str(item) for item in row]\n        if node1 not in nodelist:\n            g.node(node1, **{'width': '1', 'height': '1'})\n            nodelist.append(node1)\n        if node2 not in nodelist:\n            g.node(node2, **{'width': '1', 'height': '1'})\n            nodelist.append(node2)\n        g.edge(node1, node2, label=weight)\n    return g\n\ndef render_graph(fname, df, ls_index):\n    ''' Render a visual graph and saves it to disk\n    '''\n    df_edgelist = get_df_edgelist(df, ls_index)\n    g = edgelist_to_digraph(df_edgelist)\n    g.render(fname, view=True)\n```", "```py\n# Generate graph of transition matrix (raw co-occurrences)\nrender_graph('adjmat', df, ls_index)\n\n# Generate graph of row-normalized transition matrix\nrender_graph('transmat_rnorm', df_rnorm, ls_index)\n\n# Generate graph of column-normalized transition matrix\nrender_graph('transmat_cnorm', df_cnorm, ls_index)\n```"]