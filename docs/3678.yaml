- en: Benchmarking Rust Compiler Settings with Criterion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Criterion 基准测试 Rust 编译器设置
- en: 原文：[https://towardsdatascience.com/benchmarking-rust-compiler-settings-with-criterion-62db50cd62fb?source=collection_archive---------12-----------------------#2023-12-15](https://towardsdatascience.com/benchmarking-rust-compiler-settings-with-criterion-62db50cd62fb?source=collection_archive---------12-----------------------#2023-12-15)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/benchmarking-rust-compiler-settings-with-criterion-62db50cd62fb?source=collection_archive---------12-----------------------#2023-12-15](https://towardsdatascience.com/benchmarking-rust-compiler-settings-with-criterion-62db50cd62fb?source=collection_archive---------12-----------------------#2023-12-15)
- en: Controlling Criterion with Scripts and Environment Variables
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脚本和环境变量控制 Criterion
- en: '[](https://medium.com/@carlmkadie?source=post_page-----62db50cd62fb--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page-----62db50cd62fb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----62db50cd62fb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----62db50cd62fb--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page-----62db50cd62fb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@carlmkadie?source=post_page-----62db50cd62fb--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page-----62db50cd62fb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----62db50cd62fb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----62db50cd62fb--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page-----62db50cd62fb--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa5e87027005f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbenchmarking-rust-compiler-settings-with-criterion-62db50cd62fb&user=Carl+M.+Kadie&userId=a5e87027005f&source=post_page-a5e87027005f----62db50cd62fb---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----62db50cd62fb--------------------------------)
    ·6 min read·Dec 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F62db50cd62fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbenchmarking-rust-compiler-settings-with-criterion-62db50cd62fb&user=Carl+M.+Kadie&userId=a5e87027005f&source=-----62db50cd62fb---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa5e87027005f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbenchmarking-rust-compiler-settings-with-criterion-62db50cd62fb&user=Carl+M.+Kadie&userId=a5e87027005f&source=post_page-a5e87027005f----62db50cd62fb---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----62db50cd62fb--------------------------------)
    ·6分钟阅读·2023年12月15日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F62db50cd62fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbenchmarking-rust-compiler-settings-with-criterion-62db50cd62fb&user=Carl+M.+Kadie&userId=a5e87027005f&source=-----62db50cd62fb---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F62db50cd62fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbenchmarking-rust-compiler-settings-with-criterion-62db50cd62fb&source=-----62db50cd62fb---------------------bookmark_footer-----------)![](../Images/d23babfcffe8bcef29dff4ca4666ab4c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F62db50cd62fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbenchmarking-rust-compiler-settings-with-criterion-62db50cd62fb&source=-----62db50cd62fb---------------------bookmark_footer-----------)![](../Images/d23babfcffe8bcef29dff4ca4666ab4c.png)'
- en: 'Timing a crab race — Source: [https://openai.com/dall-e-2/](https://openai.com/dall-e-2/).
    All other figures from the author.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 蟹赛时间 — 来源：[https://openai.com/dall-e-2/](https://openai.com/dall-e-2/)。所有其他图像来自作者。
- en: This article explains, first, how to benchmark using the popular [criterion](https://docs.rs/criterion/latest/criterion/)
    crate. It, then, gives additional information showing how to benchmark across
    compiler settings. Although each combination of compiler settings requires re-compilation
    and a separate run, we can still tabulate and analyze results. The article is
    a companion to the article [Nine Rules for SIMD Acceleration of Your Rust Code](https://medium.com/towards-data-science/nine-rules-for-simd-acceleration-of-your-rust-code-part-1-c16fe639ce21)
    in *Towards Data Science.*
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文首先解释了如何使用流行的 [criterion](https://docs.rs/criterion/latest/criterion/) crate
    进行基准测试。然后，提供了额外的信息，展示了如何在不同编译器设置下进行基准测试。虽然每种编译器设置的组合都需要重新编译和单独运行，但我们仍然可以汇总和分析结果。本文是
    *Towards Data Science* 中的文章 [Nine Rules for SIMD Acceleration of Your Rust Code](https://medium.com/towards-data-science/nine-rules-for-simd-acceleration-of-your-rust-code-part-1-c16fe639ce21)
    的配套文章。
- en: We’ll applied this technique to the `[range-set-blaze](https://github.com/CarlKCarlK/range-set-blaze)`
    crate. Our goal is to measure the performance effects of various SIMD (Single
    Instruction, Multiple Data) settings. We also want to compare performance across
    different CPUs. This approach is also useful for understanding the benefit of
    different optimization levels.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这项技术应用到 `[range-set-blaze](https://github.com/CarlKCarlK/range-set-blaze)`
    crate。我们的目标是测量不同 SIMD（单指令、多数据）设置的性能效果。我们还希望比较不同 CPU 之间的性能。这个方法也有助于理解不同优化级别的好处。
- en: 'In the context of `range-set-blaze`, we evaluate:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `range-set-blaze` 的背景下，我们评估：
- en: 3 SIMD extension levels — `sse2` (128 bit), `avx2` (256 bit), `avx512f` (512
    bit)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3 种 SIMD 扩展级别 — `sse2`（128 位），`avx2`（256 位），`avx512f`（512 位）
- en: 10 element types — `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `isize`,
    `usize`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 种元素类型 — `i8`，`u8`，`i16`，`u16`，`i32`，`u32`，`i64`，`u64`，`isize`，`usize`
- en: 5 lane numbers — 4, 8, 16, 32, 64
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5 个 lane 数量 — 4，8，16，32，64
- en: 2 CPUs — AMD 7950X with `avx512f`, Intel i5–8250U with `avx2`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 种 CPU — AMD 7950X（带 `avx512f`），Intel i5–8250U（带 `avx2`）
- en: 5 algorithms — Regular, Splat0, Splat1, Splat2, Rotate
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5 种算法 — Regular，Splat0，Splat1，Splat2，Rotate
- en: 4 input lengths — 1024; 10,240; 102,400; 1,024,000
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 个输入长度 — 1024；10,240；102,400；1,024,000
- en: Of these, we externally adjust the first four variables (SIMD extension level,
    element type, lane number, CPU). We controlled the final two variables (algorithm
    and input length) with loops inside regular Rust benchmark code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些变量中，我们外部调整前四个变量（SIMD 扩展级别、元素类型、lane 数量、CPU）。我们通过在常规 Rust 基准测试代码内部的循环控制最后两个变量（算法和输入长度）。
- en: Getting Started with Criterion
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Criterion 入门
- en: 'To add benchmarking to your project, add this dev dependency and create a subfolder:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要将基准测试添加到你的项目中，添加这个开发依赖并创建一个子文件夹：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In `Cargo.toml` add:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Cargo.toml` 中添加：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `benches/bench.rs`. Here is sample one:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `benches/bench.rs`。这里是一个示例：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you want to run this example, the [code is on GitHub](https://github.com/CarlKCarlK/range-set-blaze/tree/nov23/examples/simd/is_consecutive1).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想运行这个示例，[代码在 GitHub 上](https://github.com/CarlKCarlK/range-set-blaze/tree/nov23/examples/simd/is_consecutive1)。
- en: Run the benchmark with the command `cargo bench`. A report will appear in `target/criterion/simple/report/index.html`
    and includes plots like this one showing Splat1 running many times faster than
    Regular.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令 `cargo bench` 运行基准测试。报告将出现在 `target/criterion/simple/report/index.html`
    中，并包括像这样的图表，显示 Splat1 的运行速度比 Regular 快很多。
- en: '![](../Images/0baad5a4a40ae23d4c2e6973b4acc72f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0baad5a4a40ae23d4c2e6973b4acc72f.png)'
- en: Thinking Outside the Criterion Box
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跳出 Criterion 的思维框架
- en: We have a problem. We want to benchmark `sse2` vs. `avx2` vs. `avx512f` which
    requires ([generally](https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute))
    multiple compilations and `criterion` runs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们面临一个问题。我们希望基准测试 `sse2` 与 `avx2` 与 `avx512f` 的性能，这需要（[一般来说](https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute)）多次编译和
    `criterion` 运行。
- en: 'Here’s our approach:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的方法：
- en: Use a Bash script to set environment variables and call benchmarking.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bash 脚本设置环境变量并调用基准测试。
- en: 'For example, `bench.sh`:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`bench.sh`：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Aside: You can [easily use Bash on Windows](https://code.visualstudio.com/docs/sourcecontrol/intro-to-git#_git-bash-on-windows)
    if you have Git and/or VS Code.'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 附注：如果你有 Git 和/或 VS Code，你可以 [轻松地在 Windows 上使用 Bash](https://code.visualstudio.com/docs/sourcecontrol/intro-to-git#_git-bash-on-windows)。
- en: 'Use a `[build.rs](https://doc.rust-lang.org/cargo/reference/build-scripts.html)`
    to turn these environment variables into Rust configurations:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `[build.rs](https://doc.rust-lang.org/cargo/reference/build-scripts.html)`
    将这些环境变量转化为 Rust 配置：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In `[benches/build.rs](https://github.com/CarlKCarlK/range-set-blaze/blob/nov23/examples/simd/is_consecutive2/benches/bench.rs)`
    turn these configurations into Rust constants and types:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `[benches/build.rs](https://github.com/CarlKCarlK/range-set-blaze/blob/nov23/examples/simd/is_consecutive2/benches/bench.rs)`
    中将这些配置转换为 Rust 常量和类型：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In `benches.rs`, create a benchmark id that records the combination of variables
    you are testing, separated by commas. This can either be a string or a criterion
    `BenchmarkId`. I created a `BenchmarkId` with this call: `create_benchmark_id::<Integer>("regular",
    LANES, *parameter)` to this function:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `benches.rs` 中，创建一个基准 id，用来记录你正在测试的变量组合，变量之间用逗号分隔。这可以是一个字符串，也可以是一个 criterion
    `BenchmarkId`。我使用了以下调用创建了一个 `BenchmarkId`：`create_benchmark_id::<Integer>("regular",
    LANES, *parameter)`。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For tabulation and analysis, I like benchmark results as comma-separated values
    (CSVs). [Criterion has moved away from](https://bheisler.github.io/criterion.rs/book/user_guide/csv_output.html)
    `[*.csv](https://bheisler.github.io/criterion.rs/book/user_guide/csv_output.html)`
    [files](https://bheisler.github.io/criterion.rs/book/user_guide/csv_output.html)
    and toward `*.json` files. To extract `*.csv` from `*.json`, I created a new a
    cargo command that you can use: `[criterion-means](https://github.com/CarlKCarlK/cargo-criterion-means)`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于制表和分析，我喜欢将基准测试结果以逗号分隔值（CSVs）的形式保存。[Criterion 已经转向](https://bheisler.github.io/criterion.rs/book/user_guide/csv_output.html)
    `[*.csv](https://bheisler.github.io/criterion.rs/book/user_guide/csv_output.html)`
    [文件](https://bheisler.github.io/criterion.rs/book/user_guide/csv_output.html)，而转向
    `*.json` 文件。为了从 `*.json` 中提取 `*.csv`，我创建了一个新的 cargo 命令供你使用：`[criterion-means](https://github.com/CarlKCarlK/cargo-criterion-means)`。
- en: 'Install:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output Example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出示例：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Analysis
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: A CSV file is suitable for analysis via [spreadsheet pivot tables](https://support.microsoft.com/en-us/office/create-a-pivotchart-c1b1e057-6990-4c38-b52b-8255538e7b1c)
    or data frame tools such as [Polars](https://pola-rs.github.io/polars/user-guide/transformations/pivot/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 文件适合通过 [电子表格数据透视表](https://support.microsoft.com/en-us/office/create-a-pivotchart-c1b1e057-6990-4c38-b52b-8255538e7b1c)
    或数据框工具，如 [Polars](https://pola-rs.github.io/polars/user-guide/transformations/pivot/)
    进行分析。
- en: 'For example, here is the top of my 5000-line long Excel data file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是我 5000 行长的 Excel 数据文件的顶部：
- en: '![](../Images/95f1e30fa085dc0341b141331e6b2999.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95f1e30fa085dc0341b141331e6b2999.png)'
- en: Columns A to J came from the benchmark. Columns K to N are calculated by Excel.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: A 到 J 列来自基准测试。K 到 N 列由 Excel 计算得出。
- en: Here is a pivot table (and chart) based on the data. It shows the effect of
    varying the number of SIMD lanes on throughput. The chart averages across element
    type and input length. The chart suggests that for the best algorithms, either
    32 or 64 lanes is best.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基于数据的透视表（及图表）。它显示了 SIMD lanes 数量变化对吞吐量的影响。图表平均了元素类型和输入长度。图表表明，对于最佳算法，32 或
    64 个 lanes 是最好的。
- en: '![](../Images/d01656abaf5c1374a97aa21d3cfee7c0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d01656abaf5c1374a97aa21d3cfee7c0.png)'
- en: With this analysis, we can now choose our algorithm and decide how we want to
    set the LANES parameter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这次分析，我们现在可以选择我们的算法并决定如何设置 LANES 参数。
- en: Conclusion
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Thank you for joining me for this journey into Criterion benchmarking.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你与我一起踏上 Criterion 基准测试的旅程。
- en: If you’ve not used Criterion before, I hope this encourages you to try it. If
    you’ve used Criterion but couldn’t get it to measure everything you cared about,
    I hope this gives you a path forward. Embracing Criterion in this expanded manner
    can unlock deeper insights into the performance characteristics of your Rust projects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前没有使用过 Criterion，希望这能鼓励你尝试一下。如果你已经使用过 Criterion 但未能测量你关心的所有内容，希望这能为你提供一个前进的方向。以这种扩展的方式使用
    Criterion 可以解锁对你 Rust 项目性能特征的更深刻洞察。
- en: '*Please* [*follow Carl on Medium*](https://medium.com/@carlmkadie)*. I write
    on scientific programming in Rust and Python, machine learning, and statistics.
    I tend to write about one article per month.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*请* [*关注 Carl 的 Medium 博客*](https://medium.com/@carlmkadie)*。我在 Rust 和 Python
    的科学编程、机器学习和统计学方面写作。我每个月写一篇文章。*'
