["```py\n[training]\npatience = 10\ndropout = 0.2\nuse_vectors = false\n\n[training.logging]\nlevel = \"INFO\"\n\n[nlp]\n# This uses the value of training.use_vectors\nuse_vectors = ${training.use_vectors}\nlang = \"en\"\n```", "```py\n{\n  \"training\": {\n    \"patience\": 10,\n    \"dropout\": 0.2,\n    \"use_vectors\": false,\n    \"logging\": {\n      \"level\": \"INFO\"\n    }\n  },\n  \"nlp\": {\n    \"use_vectors\": false,\n    \"lang\": \"en\"\n  }\n}\n```", "```py\nYou are an expert at extracting context from text. \nYour tasks is to accept a quote as input and provide the context of the quote.\nThis context will be used to group the quotes together. \nDo not put any other text in your answer and provide the context in 3 words max.\n{# whitespace #}\n{# whitespace #}\nHere is the quote that needs classification\n{# whitespace #}\n{# whitespace #}\nQuote:\n'''\n{{ text }}\n'''\nContext\n```", "```py\nfrom pathlib import Path\nfrom spacy_llm.registry import registry\nimport jinja2\nfrom typing import Iterable\nfrom spacy.tokens import Doc\n\nTEMPLATE_DIR = Path(\"templates\")\n\ndef read_template(name: str) -> str:\n    \"\"\"Read a template\"\"\"\n\n    path = TEMPLATE_DIR / f\"{name}.jinja\"\n\n    if not path.exists():\n        raise ValueError(f\"{name} is not a valid template.\")\n\n    return path.read_text()\n\nclass QuoteContextExtractTask:\n  def __init__(self, template: str = \"quotecontextextract.jinja\", field: str = \"context\"):\n    self._template = read_template(template)\n    self._field = field\n\n  def _check_doc_extension(self):\n     \"\"\"Add extension if need be.\"\"\"\n     if not Doc.has_extension(self._field):\n         Doc.set_extension(self._field, default=None)\n\n  def generate_prompts(self, docs: Iterable[Doc]) -> Iterable[str]:\n    environment = jinja2.Environment()\n    _template = environment.from_string(self._template)\n    for doc in docs:\n        prompt = _template.render(\n            text=doc.text,\n        )\n        yield prompt  \n\n  def parse_responses(\n      self, docs: Iterable[Doc], responses: Iterable[str]\n  ) -> Iterable[Doc]:\n    self._check_doc_extension()\n    for doc, prompt_response in zip(docs, responses):      \n      try:\n        setattr(\n            doc._,\n            self._field,\n            prompt_response.replace(\"Context:\", \"\").strip(),\n        ),\n      except ValueError:\n        setattr(doc._, self._field, None)\n\n    yield doc\n```", "```py\n@registry.llm_tasks(\"my_namespace.QuoteContextExtractTask.v1\")\ndef make_quote_extraction() -> \"QuoteContextExtractTask\":\n    return QuoteContextExtractTask()\n```", "```py\nexport OPENAI_API_KEY=\"sk-...\"\nexport OPENAI_API_ORG=\"org-...\"\n```", "```py\n[nlp]\nlang = \"en\"\npipeline = [\"llm\"]\nbatch_size = 128\n\n[components]\n\n[components.llm]\nfactory = \"llm\"\n\n[components.llm.model]\n@llm_models = \"spacy.GPT-3-5.v1\"\nconfig = {\"temperature\": 0.1}\n\n[components.llm.task]\n@llm_tasks = \"my_namespace.QuoteContextExtractTask.v1\"\n```", "```py\nimport os\nfrom pathlib import Path\n\nimport typer\nfrom wasabi import msg\n\nfrom spacy_llm.util import assemble\nfrom quotecontextextract import QuoteContextExtractTask\n\nArg = typer.Argument\nOpt = typer.Option\n\ndef run_pipeline(\n    # fmt: off\n    text: str = Arg(\"\", help=\"Text to perform text categorization on.\"),\n    config_path: Path = Arg(..., help=\"Path to the configuration file to use.\"),\n    verbose: bool = Opt(False, \"--verbose\", \"-v\", help=\"Show extra information.\"),\n    # fmt: on\n):\n    if not os.getenv(\"OPENAI_API_KEY\", None):\n        msg.fail(\n            \"OPENAI_API_KEY env variable was not found. \"\n            \"Set it by running 'export OPENAI_API_KEY=...' and try again.\",\n            exits=1,\n        )\n\n    msg.text(f\"Loading config from {config_path}\", show=verbose)\n    nlp = assemble(\n        config_path\n    )\n    doc = nlp(text)\n\n    msg.text(f\"Quote: {doc.text}\")\n    msg.text(f\"Context: {doc._.context}\")\n\nif __name__ == \"__main__\":\n    typer.run(run_pipeline)\n```", "```py\npython3 run_pipeline.py \"We must balance conspicuous consumption with conscious capitalism.\" ./config.cfg\n>>> \nQuote: We must balance conspicuous consumption with conscious capitalism.\nContext: Business ethics.\n```"]