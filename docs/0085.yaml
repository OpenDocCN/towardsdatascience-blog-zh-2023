- en: Minimum Meeting Rooms Problem in SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/minimum-meeting-rooms-problem-in-sql-4d3a92365bdf?source=collection_archive---------18-----------------------#2023-01-05](https://towardsdatascience.com/minimum-meeting-rooms-problem-in-sql-4d3a92365bdf?source=collection_archive---------18-----------------------#2023-01-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compute (in SQL) the minimum number of meeting rooms needed to schedule a set
    of meetings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@dhruvbird?source=post_page-----4d3a92365bdf--------------------------------)[![Dhruv
    Matani](../Images/d63bf7776c28a29c02b985b1f64abdd3.png)](https://medium.com/@dhruvbird?source=post_page-----4d3a92365bdf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4d3a92365bdf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4d3a92365bdf--------------------------------)
    [Dhruv Matani](https://medium.com/@dhruvbird?source=post_page-----4d3a92365bdf--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F63f5d5495279&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fminimum-meeting-rooms-problem-in-sql-4d3a92365bdf&user=Dhruv+Matani&userId=63f5d5495279&source=post_page-63f5d5495279----4d3a92365bdf---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4d3a92365bdf--------------------------------)
    ·5 min read·Jan 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4d3a92365bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fminimum-meeting-rooms-problem-in-sql-4d3a92365bdf&user=Dhruv+Matani&userId=63f5d5495279&source=-----4d3a92365bdf---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4d3a92365bdf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fminimum-meeting-rooms-problem-in-sql-4d3a92365bdf&source=-----4d3a92365bdf---------------------bookmark_footer-----------)![](../Images/ad9a445ea3172218a25498bf61789fa8.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Dane Deaner](https://unsplash.com/@danedeaner?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The meeting room problem asks you to determine the least number of meeting rooms
    needed to be able to schedule all the meetings from a given set such that there
    are no conflicts. We shall see how to solve this in declarative SQL alone.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous Article**: [Validate Balanced Parenthesis using SQL](/validate-balanced-parenthesis-using-sql-5bb79732d772)'
  prefs: []
  type: TYPE_NORMAL
- en: Problem Statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given a set of meeting start and end times (both inclusive), determine the least
    number of meeting rooms needed to schedule all the meetings without any conflicts
    (i.e. there should be no situation where a meeting room is not available for a
    meeting, and neither should 2 meetings be scheduled at overlapping times in a
    give meeting room).
  prefs: []
  type: TYPE_NORMAL
- en: Online Coverage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This problem is pretty popular in programming circles, and you can find coverage
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Geeksforgeeks](https://www.geeksforgeeks.org/minimum-halls-required-for-class-scheduling/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[InterviewBit](https://www.interviewbit.com/problems/meeting-rooms/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Javapoint](https://www.javatpoint.com/minimum-number-of-meeting-room-required-problem-in-java)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In fact, there are discussions about solving this problem in SQL too (this is
    generally rare for the types of problems I’ve been covering in my articles).
  prefs: []
  type: TYPE_NORMAL
- en: '[A Cool SQL Problem (And Why It Is Also a Bullshit SQL Problem)](https://ryxcommar.com/2019/06/24/a-cool-sql-problem-and-why-it-is-also-a-bullshit-sql-problem/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[(Stack Overflow) Minimum number of Meeting Rooms required to Accommodate all
    Meetings in MySQL](https://stackoverflow.com/questions/48356312/minimum-number-of-meeting-rooms-required-to-accomodate-all-meetings-in-mysql)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input Table Schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The input table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The columns have the following meaning:'
  prefs: []
  type: TYPE_NORMAL
- en: '**idx**: The index (unique ID) of this meeting'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**start_at**: The timestamp at which this meeting starts'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**end_at**: The timestamp at which this meeting ends (the meeting is considered
    to include this timestamp, so a meeting that begins at this timestamp can not
    be scheduled in the same room as this meeting).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/554a853f525a59f71856dfbad81fba5c.png)'
  prefs: []
  type: TYPE_IMG
- en: The input table for the provided data (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'First solution: O(n²)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This solution is discussed in both the online articles (links above) that talk
    about solving this problem using SQL.
  prefs: []
  type: TYPE_NORMAL
- en: The main idea is that one should look at every point in time (every second for
    example) between the first and last timestamp at which meetings are scheduled
    and check how many meetings overlap with that timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: An optimization that can be performed is that instead of checking every point
    in time, we only check the “interesting” points in time — i.e. the ones where
    a meeting either begins or ends. This is because between any 2 such “interesting”
    points, there will be no change in the number of scheduled meetings.
  prefs: []
  type: TYPE_NORMAL
- en: This solution has a runtime complexity of **O(n²)** since we need to join every
    meeting **O(n)** and match it up with every unique time point **O(n)** that corresponds
    to the start or end time point of a meeting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/48ff0fa86f9797e784b0c652bc06c363.png)'
  prefs: []
  type: TYPE_IMG
- en: The output from the first solution (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the minimum number of meeting rooms we need to schedule
    all the meetings is 4\. This happens between time points 2022–01–05 and 2022–01–11.
  prefs: []
  type: TYPE_NORMAL
- en: This is what the above output looks like graphically.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd6c637fd63a4d5dbcbf05b438f99861.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphical view of the output from the first solution (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Estimated Cost:** The estimated cost for this query on a table of 6 rows
    is [104k](https://explain.depesz.com/s/veps).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Second solution: O(n log n)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main idea behind this solution is that once you have all the unique time
    points at which meetings start and end, one can simply track how many “running”
    meetings are present at those time points.
  prefs: []
  type: TYPE_NORMAL
- en: '**Counter**: When a start time point is encountered, we need to increment a
    single counter (running_sum), and when a meeting end time point is encountered,
    we need to decrement this same counter.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Counting overlaps**: In case of meetings both starting and ending at a specific
    time point, we need to be careful to first increment the counter and then decrement
    it since the meeting is considered to be fully occupying its end time point. Hence,
    we have code that says: *ORDER BY ts ASC,* ***delta DESC*** — i.e. if we don’t
    order by delta descending, then we could process the end time point before the
    start time point, and that would undercount the number of overlapping meetings.'
  prefs: []
  type: TYPE_NORMAL
- en: The runtime complexity of this solution is **O(n log n)** since it’s dominated
    by the cost of ordering all the unique time points in non-decreasing order of
    timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3fb7fb79a427360d93bb18b1362b7903.png)'
  prefs: []
  type: TYPE_IMG
- en: The output from the second solution (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the minimum number of meeting rooms (4) needed to schedule all
    meetings without conflict is between 2022–01–05 and 2022–01–11 (same as the solution
    above).
  prefs: []
  type: TYPE_NORMAL
- en: This is what the output above looks like graphically.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d9b355f59a87227f86ad607c7e4493f.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphical view of the output from the second solution (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Estimated Cost:** The estimated cost for this query on a table of 6 rows
    is [474](https://explain.depesz.com/s/2OVR).'
  prefs: []
  type: TYPE_NORMAL
- en: SQL Fiddle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SQL Fiddle link to all the solutions in this post can be found [here](http://sqlfiddle.com/#!17/75a65/7).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This problem has some similarities with the previous problem we saw ([Validate
    Balanced Parenthesis using SQL](/validate-balanced-parenthesis-using-sql-5bb79732d772))
    in so far as the use of the running sum using SQL window functions is concerned.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how we can use SQL window functions (yet again) to see how one can leverage
    a simple concept such as a running sum to solve seemingly complex problems.
  prefs: []
  type: TYPE_NORMAL
