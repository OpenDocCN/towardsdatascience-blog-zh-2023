["```py\nfrom sagemaker.pytorch import PyTorch\n\ntags = [{'Key': 'username', 'Value': 'johndoe'}, \n        {'Key': 'model_name', 'Value': 'mnist'},\n        {'Key': 'training_phase', 'Value': 'finetune'},\n        {'Key': 'description', 'Value': 'fine tune final linear layer'}]\n\n# define the training job with tags\nestimator = PyTorch(\n    entry_point='train.py',\n    framework_version='2.1.0',\n    role='<arn role>',\n    py_version='py310',\n    job_name='demo',\n    instance_type='ml.g5.xlarge',\n    instance_count=1,\n    tags=tags\n)\n\n# deploy the job to the cloud\nestimator.fit()\n```", "```py\nimport boto3\ndef stop_training_job(training_job_name):\n    sm_client = boto3.client(\"sagemaker\")\n    response = sm_client.stop_training_job(TrainingJobName=training_job_name)\n    assert response['ResponseMetadata']['HTTPStatusCode'] == 200\n    # TODO - optionally send an email notification\n\ndef enforce_required_tags(training_job_name, event):\n    event_tags = event['detail']['Tags']\n    if 'model_name' not in event_tags:\n        stop_training_job(training_job_name)\n\n# define lambda handler\ndef sagemaker_event_handler(event, _):\n    job_name = event['detail']['TrainingJobName']\n    job_secondary_status = event['detail']['SecondaryStatus']\n    if job_secondary_status == 'Starting':\n        enforce_required_tags(job_name, event)\n```", "```py\nimport boto3\n\nsns_client = boto3.client('sns')\n# Create a SNS notification topic.\ntopic = sns_client.create_topic(Name=\"SageMakerTrainingJobIdleTopic\")\ntopic_arn = topic.arn\nprint(f\"Created SNS topic arn: {topic_arn}\")\n```", "```py\ndef create_training_alarm(job_name):\n    topic_arn = '<sns topic arn>'\n\n    SAMPLE_PERIOD_SECONDS = 60 * 5 # 5 minutes\n    SAMPLE_POINTS_LIMIT = 3\n    GPU_UTIL_THRESHOLD_PERCENTAGE = 1\n\n    cloudwatch_client = boto3.client('cloudwatch')\n\n    # A new sample is generated each SAMPLE_PERIOD_SECONDS seconds.\n    # The alarm will set off it there will be more than SAMPLE_POINTS_LIMIT\n    # below the limit.\n    response = cloudwatch_client.put_metric_alarm(\n        AlarmName=job_name + 'GPUUtil',\n        AlarmActions=topic_arn,\n        MetricName='GPUUtilization',\n        Namespace='/aws/sagemaker/TrainingJobs',\n        Statistic='Average',\n        Dimensions=[{\n            \"Name\": \"Host\",\n            \"Value\": job_name+\"/algo-1\"\n        }],\n        Period=SAMPLE_PERIOD_SECONDS,\n        EvaluationPeriods=SAMPLE_POINTS_LIMIT,\n        DatapointsToAlarm=SAMPLE_POINTS_LIMIT,\n        Threshold=GPU_UTIL_THRESHOLD_PERCENTAGE,\n        ComparisonOperator='LessThanOrEqualToThreshold',\n        TreatMissingData='notBreaching'\n    )\n    assert response['ResponseMetadata']['HTTPStatusCode'] == 200\n\ndef delete_training_alarm(job_name):\n    cloudwatch_client = boto3.client('cloudwatch')\n    response = cloudwatch_client.delete_alarms(\n                                   AlarmNames=[job_name+'GPUUtil'])\n\ndef sagemaker_event_handler(event, _):\n    job_name = event['detail']['TrainingJobName']\n    job_secondary_status = event['detail']['SecondaryStatus']\n    if job_secondary_status == 'Starting':\n        enforce_required_tags(job_name, event)\n    elif job_secondary_status == 'Training':\n        create_training_alarm(job_name)\n    elif job_secondary_status in ['Completed', 'Failed', 'Stopped']:\n        delete_training_alarm(job_name) \n```", "```py\nimport boto3, json\n\ndef lambda_sns_handler(event, context):\n    data = json.loads(event['Records'][0]['Sns']['Message'])\n    alarm_name = data['AlarmName']\n    training_job_name = alarm_name.replace('GPUUtil', '')\n    stop_training_job(training_job_name)\n```", "```py\nimport boto3, datetime\n\ndef clone_job(training_name, disable_spot=False):\n    # get description\n    client = boto3.client('sagemaker')\n    desc = client.describe_training_job(TrainingJobName=training_name)\n\n    # update the training name\n    new_training_name = training_name + 'clone'\n\n    use_spots = (not disable_spot) and desc[\"EnableManagedSpotTraining\"]\n\n    if disable_spot:\n        desc[\"StoppingCondition\"].pop(\"MaxWaitTimeInSeconds\", None)\n\n    client.create_training_job(\n        TrainingJobName=new_training_name,\n        HyperParameters=desc[\"HyperParameters\"],\n        AlgorithmSpecification=desc[\"AlgorithmSpecification\"],\n        RoleArn=desc[\"RoleArn\"],\n        OutputDataConfig=desc[\"OutputDataConfig\"],\n        ResourceConfig=desc[\"ResourceConfig\"],\n        StoppingCondition=desc[\"StoppingCondition\"],\n        EnableNetworkIsolation=desc[\"EnableNetworkIsolation\"],\n        EnableInterContainerTrafficEncryption=desc[\n            \"EnableInterContainerTrafficEncryption\"\n        ],\n        EnableManagedSpotTraining=use_spots,\n        Tags=client.list_tags(ResourceArn=desc['TrainingJobArn'])\n     )\n\ndef sagemaker_event_handler(event, _):\n    TRAIN_TIME_THRESHOLD = 2 * 60 * 60: # 2 hours\n    job_name = event['detail']['TrainingJobName']\n    job_secondary_status = event['detail']['SecondaryStatus']\n    if job_secondary_status == 'Starting':\n        enforce_required_tags(job_name, event)\n    elif job_secondary_status == 'Training':\n        create_training_alarm(job_name)\n    elif job_secondary_status in ['Completed', 'Failed', 'Stopped']:\n        delete_training_alarm(job_name)\n\n    if job_secondary_status == 'Failed':\n        start_time = datetime.datetime.utcfromtimestamp(\n                                     event['detail']['CreationTime']/1000)\n        end_time = datetime.datetime.utcfromtimestamp(\n                                     event['detail']['TrainingEndTime']/1000)\n        training_time_seconds = (end_time - start_time).seconds\n        if training_time_seconds >= TRAIN_TIME_THRESHOLD:\n            clone_job(job_name)\n```", "```py\ndef sagemaker_event_handler(event, _):\n    TRAIN_TIME_THRESHOLD = 2 * 60 * 60: # 2 hours\n    MIN_ITERRUPTS = 3\n    job_name = event['detail']['TrainingJobName']\n    job_secondary_status = event['detail']['SecondaryStatus']\n    if job_secondary_status == 'Starting':\n        enforce_required_tags(job_name, event)\n    elif job_secondary_status == 'Training':\n        create_training_alarm(job_name)\n    elif job_secondary_status in ['Completed', 'Failed', 'Stopped']:\n        delete_training_alarm(job_name)\n\n    if job_secondary_status == 'Failed':\n        start_time = datetime.datetime.utcfromtimestamp(\n                                     event['detail']['CreationTime']/1000)\n        end_time = datetime.datetime.utcfromtimestamp(\n                                     event['detail']['TrainingEndTime']/1000)\n        training_time_seconds = (end_time - start_time).seconds\n        if training_time_seconds >= TRAIN_TIME_THRESHOLD:\n            clone_job(job_name)\n\n    if job_secondary_status == 'Interrupted':\n        transitions = event['detail'][\"SecondaryStatusTransitions\"]\n        interrupts = [e for e in transitions if e[\"Status\"] == \"Interrupted\"]\n        num_interrupts = len(interrupts)\n        if num_interrupts > MIN_ITERRUPTS:\n            stop_training_job(job_name)\n            clone_job(job_name, disable_spot=True)\n```"]