["```py\nbuffer.packet_size = 100\nbuffer.time_span_in_milliseconds = 100\n```", "```py\npython3 -m pip install quixstreams\n```", "```py\n<kafka_dir>/bin/zookeeper-server-start.sh config/zookeeper.properties \n<kafka_dir>/bin/zookeeper-server-start.sh config/server.properties\n```", "```py\n<kafka_dir>\\bin\\windows\\zookeeper-server-start.bat.\\config\\zookeeper.properties \n<kafka_dir>\\bin\\windows\\kafka-server-start.bat .\\config\\server.properties\n```", "```py\nimport quixstreams as qx\nimport time\nimport datetime\nimport math\n\n# Connect to your kafka client\nclient = qx.KafkaStreamingClient('127.0.0.1:9092')\n\n# Open the output topic which is where data will be streamed out to\n# If the topic does not exist, it will be created\ntopic_producer = client.get_topic_producer(topic_id_or_name = \"mytesttopic\")\n\n# Set stream ID or leave parameters empty to get stream ID generated.\nstream = topic_producer.create_stream()\nstream.properties.name = \"Hello World Python stream\"\n\n# Add metadata about time series data you are about to send. \nstream.timeseries.add_definition(\"ParameterA\").set_range(-1.2, 1.2)\nstream.timeseries.buffer.time_span_in_milliseconds = 100\n\nprint(\"Sending values for 30 seconds.\")\n\nfor index in range(0, 3000):\n    stream.timeseries \\\n        .buffer \\\n        .add_timestamp(datetime.datetime.utcnow()) \\\n        .add_value(\"ParameterA\", math.sin(index / 200.0) + math.sin(index) / 5.0) \\\n        .publish()\n    time.sleep(0.01)\n\nprint(\"Closing stream\")\nstream.close()\n```", "```py\nimport quixstreams as qx\nimport pandas as pd\n\n# Connect to your kafka client\nclient = qx.KafkaStreamingClient('127.0.0.1:9092')\n\n# get the topic consumer for a specific consumer group\ntopic_consumer = client.get_topic_consumer(topic_id_or_name = \"mytesttopic\",\n                                           consumer_group = \"empty-destination\")\n\ndef on_dataframe_received_handler(stream_consumer: qx.StreamConsumer, df: pd.DataFrame):\n    # do something with the data here\n    print(df)\n\ndef on_stream_received_handler(stream_consumer: qx.StreamConsumer):\n    # subscribe to new DataFrames being received\n    # if you aren't familiar with DataFrames there are other callbacks available\n    # refer to the docs here: https://docs.quix.io/sdk/subscribe.html\n    stream_consumer.timeseries.on_dataframe_received = on_dataframe_received_handler\n\n# subscribe to new streams being received\ntopic_consumer.on_stream_received = on_stream_received_handler\nprint(\"Listening to streams. Press CTRL-C to exit.\")\n# Handle termination signals and provide a graceful exit\nqx.App.run()\n```"]