["```py\nn = 10000\n\ntarget = [randint(0, 1) for _ in range(n)]\nmetadata = {\"categories\": [choice([\"red\", \"blue\", \"yellow\"]) \n                          for _ in range(n)]}\n```", "```py\n>>> target\n\n[0, 1, 0, 1, 1, 0]\n\n>>> metadata\n\n{\"categories\" : [\"red\", \"blue\", \"yellow\", \"blue\", \"yellow\", \"yellow\"]}\n```", "```py\nclass DummyModel:\n  def __init__(self, n):\n          self.n = n\n\n      def predict(self):\n          from random import randint\n          return [randint(0, 1) for _ in range(self.n)]\n\nsimple_model = DummyModel(n)\n\n# let's run some predictions\npredictions = simple_model.predict()\n```", "```py\n@rec_test(test_type=\"Accuracy\", display_type=CHART_TYPE.SCALAR)\ndef accuracy(self):\n    \"\"\"\n    Compute the accuracy\n    \"\"\"\n    from sklearn.metrics import accuracy_score\n\n    return accuracy_score(self.target, self.predictions)\n```", "```py\n@rec_test(test_type=\"SlicedAccuracy\", display_type=CHART_TYPE.SCALAR)\ndef sliced_accuracy_deviation(self):\n    \"\"\"\n    Compute the accuracy by slice\n    \"\"\"\n    from reclist.metrics.standard_metrics import accuracy_per_slice\n\n    return accuracy_per_slice(\n        self.target, self.predictions, self.metadata[\"categories\"])\n```", "```py\nclass BasicRecList(RecList):\n\n    def __init__(self, target, metadata, predictions, model_name, **kwargs):\n        super().__init__(model_name, **kwargs)\n        self.target = target\n        self.metadata = metadata\n        self.predictions = predictions\n\n    @rec_test(test_type=\"SlicedAccuracy\", display_type=CHART_TYPE.SCALAR)\n    def sliced_accuracy_deviation(self):\n        \"\"\"\n        Compute the accuracy by slice\n        \"\"\"\n        from reclist.metrics.standard_metrics import accuracy_per_slice\n\n        return accuracy_per_slice(\n            self.target, self.predictions, self.metadata[\"categories\"]\n        )\n\n    @rec_test(test_type=\"Accuracy\", display_type=CHART_TYPE.SCALAR)\n    def accuracy(self):\n        \"\"\"\n        Compute the accuracy\n        \"\"\"\n        from sklearn.metrics import accuracy_score\n\n        return accuracy_score(self.target, self.predictions)\n\n    @rec_test(test_type=\"AccuracyByCountry\", display_type=CHART_TYPE.BARS)\n    def accuracy_by_country(self):\n        \"\"\"\n        Compute the accuracy by country\n        \"\"\"\n        # TODO: note that is a static test, \n        # used to showcase the bin display\n\n        from random import randint\n        return {\"US\": randint(0, 100), \n                \"CA\": randint(0, 100), \n                \"FR\": randint(0, 100)}\n```", "```py\nrlist = BasicRecList(\n    target=target,\n    metadata=metadata,\n    predictions=predictions,\n    model_name=\"myRandomModel\",\n)\n\n# run reclist\nrlist(verbose=True)\n```", "```py\n{\n  \"metadata\": {\n    \"model_name\": \"myRandomModel\",\n    \"reclist\": \"BasicRecList\",\n    \"tests\": [\n      \"sliced_accuracy\",\n      \"accuracy\",\n      \"accuracy_by_country\"\n    ]\n  },\n  \"data\": [\n    {\n      \"name\": \"SlicedAccuracy\",\n      \"description\": \"Compute the accuracy by slice\",\n      \"result\": 0.00107123176804103,\n      \"display_type\": \"CHART_TYPE.SCALAR\"\n    },\n...\n}\n```", "```py\nlogger=LOGGER.LOCAL,\nmetadata_store= METADATA_STORE.LOCAL,\n```", "```py\nrlist = BasicRecList(\n    target=target,\n    model_name=\"myRandomModel\",\n    predictions=predictions,\n    metadata=metadata,\n    logger=LOGGER.NEPTUNE,\n    metadata_store= METADATA_STORE.LOCAL,\n    NEPTUNE_KEY=os.environ[\"NEPTUNE_KEY\"],\n    NEPTUNE_PROJECT_NAME=os.environ[\"NEPTUNE_PROJECT_NAME\"],\n)\n\n# run reclist\nrlist(verbose=True)\n```", "```py\nbucket=os.environ[\"S3_BUCKET\"]\n```"]