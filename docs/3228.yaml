- en: 'Python Callables: The Basics and the Secrets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-callables-the-basics-and-the-secrets-ba88bf0729aa?source=collection_archive---------5-----------------------#2023-10-27](https://towardsdatascience.com/python-callables-the-basics-and-the-secrets-ba88bf0729aa?source=collection_archive---------5-----------------------#2023-10-27)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn how powerful Python callables can be.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4762f0cff9b2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-callables-the-basics-and-the-secrets-ba88bf0729aa&user=Marcin+Kozak&userId=4762f0cff9b2&source=post_page-4762f0cff9b2----ba88bf0729aa---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)
    ·10 min read·Oct 27, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fba88bf0729aa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-callables-the-basics-and-the-secrets-ba88bf0729aa&user=Marcin+Kozak&userId=4762f0cff9b2&source=-----ba88bf0729aa---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fba88bf0729aa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpython-callables-the-basics-and-the-secrets-ba88bf0729aa&source=-----ba88bf0729aa---------------------bookmark_footer-----------)![](../Images/16289801bda2c8ec8dfa0b3a3bba76f4.png)'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, there are many callables to choose from. Photo by [Pavan Trikutam](https://unsplash.com/@ptrikutam?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In programming languages, callable objects are typically associated with functions,
    and for good reason. Functions are perhaps the best examples of callable objects,
    but they are not the only ones. In Python, there are many other callable types,
    which can be incredibly useful and powerful. You can also create your own callable
    objects. This article is about both.
  prefs: []
  type: TYPE_NORMAL
- en: '*A callable* is an object that can be called using a pair of parentheses, like
    for example below, where we use the built-in function `sum()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A call to a callable, depending on its definition, can be
  prefs: []
  type: TYPE_NORMAL
- en: without any arguments, as in `no_args_callable()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: or a series of positional and/or keyword arguments, as in `args_callable(arg1,
    arg2)`, `args_callable(arg1, arg2=value2)` or `args_callable(arg1=value1, arg2=value2)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Above, I described a callable as a noun. The word *callable*, however, is also
    used as an adjective, meaning *being a callable*. Therefore, a callable is the
    same as a callable object.
  prefs: []
  type: TYPE_NORMAL
- en: Python has a built-in function , `callable()`, that checks if an object is callable,
    or — in other words — if…
  prefs: []
  type: TYPE_NORMAL
