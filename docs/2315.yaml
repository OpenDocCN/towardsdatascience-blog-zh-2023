- en: How I Created Generative Art with Python That 10000 DALL-E Credits Could Not
    Buy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-i-created-generative-art-with-python-that-10000-dall-e-credits-could-not-buy-fcf804b61437?source=collection_archive---------1-----------------------#2023-07-19](https://towardsdatascience.com/how-i-created-generative-art-with-python-that-10000-dall-e-credits-could-not-buy-fcf804b61437?source=collection_archive---------1-----------------------#2023-07-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://borach.medium.com/?source=post_page-----fcf804b61437--------------------------------)[![Borach
    Jansema](../Images/02280890ed87239c75cbcbfa7c5d686c.png)](https://borach.medium.com/?source=post_page-----fcf804b61437--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fcf804b61437--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fcf804b61437--------------------------------)
    [Borach Jansema](https://borach.medium.com/?source=post_page-----fcf804b61437--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F26c634bbd08&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-created-generative-art-with-python-that-10000-dall-e-credits-could-not-buy-fcf804b61437&user=Borach+Jansema&userId=26c634bbd08&source=post_page-26c634bbd08----fcf804b61437---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fcf804b61437--------------------------------)
    ·11 min read·Jul 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffcf804b61437&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-created-generative-art-with-python-that-10000-dall-e-credits-could-not-buy-fcf804b61437&user=Borach+Jansema&userId=26c634bbd08&source=-----fcf804b61437---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffcf804b61437&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-created-generative-art-with-python-that-10000-dall-e-credits-could-not-buy-fcf804b61437&source=-----fcf804b61437---------------------bookmark_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Python and Pillow: How to Code Something DALL-E Cannot Do'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, I will showcase some of the generative art I created using
    the Python programming language, specifically utilizing the Pillow and Torch libraries.
    The inspiration for my artwork came from the visual compositions of Roman Haubenstock-Ramati,
    an Austrian music composer and visual artist.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: In early 2021 I was frequently browsing Catawiki because I wanted to buy some
    art to decorate my home office. When I came across Haubenstock-Ramati’s creations
    on Catawiki in early 2021, I was immediately captivated by the intricate and beautiful
    nature of his parametric art. I had been wanting to do something creative with
    my coding skills for a while, I was inspired to develop code that could produce
    similar output. The image below is an example of one of the images that inspired
    me, created by Roman Haubenstock-Ramati.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2021 年初，我经常浏览 Catawiki，因为我想购买一些艺术品来装饰我的家庭办公室。当我在 2021 年初在 Catawiki 上发现 Haubenstock-Ramati
    的作品时，我立刻被他复杂而美丽的参数艺术所吸引。我一直想用我的编程技能做一些创意性的工作，因此受到启发开发了可以生成类似输出的代码。下面的图像是激发我灵感的其中一幅图像，由
    Roman Haubenstock-Ramati 创作。
- en: '![](../Images/f0d763fe94d9d99a05ffa139f53c29b8.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0d763fe94d9d99a05ffa139f53c29b8.png)'
- en: '[Konstellationen](https://www.mutualart.com/Artwork/-Konstellationen-/9D3C9F0000BAC080),
    1970/1971 by Roman Haubenstock-Ramati'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Konstellationen](https://www.mutualart.com/Artwork/-Konstellationen-/9D3C9F0000BAC080)，1970/1971年，由
    Roman Haubenstock-Ramati 创作'
- en: After the release of Dall-E 2 in April 2022, I explored using the model to generate
    artwork that should resemble Haubenstock-Ramati’s work. Asking the model to do
    this is a controversial topic as there are valid concerns about the capacity of
    AI models being able to produce output that is so similar to the work of an artist
    that the output can be considered as a copyright infringement on the original
    work. This discussion is beyond the scope of this blogpost but I want to make
    clear that the prompts I fed into Dall-E were not intended to produce exact copies
    of Haubenstock-Ramati’s work or to devalue his works. The same goes for the code
    I have written they are not intended to distribute copies of his work but merely
    a demonstration of how you can use Python to create visual geometric compositions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2022 年 4 月 Dall-E 2 发布后，我尝试使用该模型生成应该类似于 Haubenstock-Ramati 作品的艺术作品。要求模型这样做是一个有争议的话题，因为关于
    AI 模型能否生成如此类似于艺术家作品的输出，以至于这些输出可能被视为对原作的版权侵权，存在有效的担忧。这一讨论超出了这篇博客的范围，但我想澄清的是，我输入到
    Dall-E 的提示并不是为了生成 Haubenstock-Ramati 作品的精确复制品或贬低他的作品。我编写的代码也是如此，它们并不是为了分发他的作品的副本，而仅仅是演示如何使用
    Python 创建视觉几何构图。
- en: The output of DALL-E was interesting, but it did not quite capture the essence
    of his original pieces. The output lacked the precise constraints and intricacies
    present in Haubenstock-Ramati’s art. I tried many variations of prompts but could
    never get close to what I wanted.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DALL-E 的输出很有趣，但并没有完全捕捉到他原作的精髓。输出缺乏 Haubenstock-Ramati 艺术作品中存在的精确约束和复杂性。我尝试了许多不同的提示，但始终无法接近我想要的效果。
- en: '![](../Images/cf1d05296b01dbbdc4e8e52b47dad8a3.png)![](../Images/db2e5d309d0197d7951a6b0786d86f2a.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf1d05296b01dbbdc4e8e52b47dad8a3.png)![](../Images/db2e5d309d0197d7951a6b0786d86f2a.png)'
- en: 'Some of the outputs generated by Dall-E given my prompt: “Create a painting
    composition in the style of Roman Haubenstock-Ramati that incorporates elements
    of graphic notation and experimental musical composition. The painting should
    be predominantly black and white with bold lines and geometric shapes, and should
    include a central motif that represents the theme of the piece.”'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Dall-E 根据我的提示生成的一些输出：“创建一幅罗曼·豪本斯托克-拉马蒂风格的绘画作品，融入图形符号和实验音乐构图的元素。画作应以黑白色为主，具有大胆的线条和几何形状，并应包含一个中心主题，代表作品的主题。”
- en: 'In an attempt to simplify the process, I posed a simpler request to Dall-E:
    “Draw a vertical line connected to a rectangle, connect a square to the line,
    and connect the square with another vertical line to another rectangle, and finally
    connect the rectangle to a circle with another vertical line.” Surprisingly, the
    results were unexpected. Despite the simplicity of the prompt, Dall-E struggled
    to understand the intended relationships between the shapes, yielding unexpected
    outcomes.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化过程，我向 Dall-E 提出了一个更简单的请求：“画一条垂直线连接到一个矩形，再连接一个正方形到这条线，然后用另一条垂直线将正方形连接到另一个矩形，最后用另一条垂直线将矩形连接到一个圆。”出乎意料的是，结果并不如我所愿。尽管提示很简单，Dall-E
    仍然难以理解形状之间的预期关系，产生了意外的结果。
- en: '![](../Images/5dd1084d4055b0477b078be052210bf0.png)![](../Images/1823a60e74cfde60397f932c321880ce.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5dd1084d4055b0477b078be052210bf0.png)![](../Images/1823a60e74cfde60397f932c321880ce.png)'
- en: 'Images generated by Dall-E given the prompt: “Draw a vertical line connected
    to a rectangle, connect a square to the line, and connect the square with another
    vertical line to another rectangle, and finally connect the rectangle to a circle
    with another vertical line.”'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Dall-E 根据提示生成的图像：“绘制一个垂直线连接一个矩形，将一个方块连接到这条线，再用另一条垂直线连接方块到另一个矩形，最后用另一条垂直线将矩形连接到一个圆形。”
- en: 'It became clear to me Dall-E does not have the capacity to process geometrically
    constrained prompts, I tried an even simpler prompt: “Create a drawing that only
    shows two orthogonal lines”. This also proved to be too difficult.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我清楚地意识到 Dall-E 无法处理几何约束的提示，我尝试了一个更简单的提示：“创建一个仅显示两条正交线的图”。这也被证明过于困难。
- en: '![](../Images/e15c859898a59c0013db60450f0a5031.png)![](../Images/7df3731a890e4d049fb72a539fa977b7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e15c859898a59c0013db60450f0a5031.png)![](../Images/7df3731a890e4d049fb72a539fa977b7.png)'
- en: 'Images generated by Dall-E give the prompt: “Create a drawing that only shows
    two orthogonal lines”'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Dall-E 生成的图像根据提示：“创建一个仅显示两条正交线的图”
- en: This inability of Dall-E surprised me, but when thinking about how a model like
    Dall-E works, this is not surprising. It is based on latent diffusion which is
    inherently a noisy process and not optimised for constraint-based exact prompts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Dall-E 不能完成这一任务让我感到惊讶，但考虑到像 Dall-E 这样的模型如何工作，这并不令人意外。它基于潜在扩散，这本质上是一个噪声过程，不适合基于约束的精确提示。
- en: Next, I will show the images I generated and talk in more detail about how to
    code something like this.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将展示我生成的图像，并详细讨论如何编写类似的代码。
- en: '![](../Images/51e8c59fd457abd3d68e79bd9add5169.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51e8c59fd457abd3d68e79bd9add5169.png)'
- en: Single example of an image generated by my code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我的代码生成的图像的单一示例。
- en: '![](../Images/58e5a69a4e133c2e19b5e292681dd20c.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58e5a69a4e133c2e19b5e292681dd20c.png)'
- en: A gif showing different images created by my code, showing the diversity of
    images created by the same parameters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个展示我代码生成不同图像的 gif，显示了相同参数下图像的多样性。
- en: I made these images using Python and Pillow, devoid of any machine learning.
    The images produced by my code have elements of randomness introduced via Torch,
    a versatile package that I utilized for its familiarity and convenience. It is
    normally a package used in Machine Learning (ML). But again these images are not
    made using Machine Learning (ML).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 Python 和 Pillow 制作了这些图像，不涉及任何机器学习。我的代码生成的图像通过 Torch 引入了随机性，Torch 是一个多功能的软件包，我因为其熟悉和方便而使用。它通常用于机器学习（ML）。但这些图像并不是通过机器学习（ML）生成的。
- en: You might wonder where the diversity of the images comes from, I personally
    love how my code is able to generate images that give a similar vibe but are all
    so different if you look closely. The diversity in outputs was an essential characteristic
    to achieve. The variance of the images my code produces stems from an intricate
    use of random variables. A random variable, in the realm of probability theory
    and statistics, is a variable whose possible values are outcomes of a random phenomenon.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道图像的多样性来源于哪里，我个人喜欢我的代码能够生成给人类似感觉但仔细看又各不相同的图像。输出的多样性是一个至关重要的特性。我的代码生成的图像的变化源自于对随机变量的复杂使用。在概率论和统计学中，随机变量是其可能值是随机现象的结果的变量。
- en: Now I will describe the generation process of the images made by my code and
    show some examples in Python of how this generation process looks like from a
    high level perspective.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将描述我代码生成图像的过程，并展示一些 Python 示例，展示这个生成过程从高层次的视角看起来是怎样的。
- en: We can divide the generation process into 3 steps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将生成过程分为 3 步。
- en: 'Step 1: The centerpiece is generated. This is done by sampling a rectangle,
    a line, a rectangle, a square, a line, and a circle. These are placed in a fixed
    position and the size of the shapes are determined by random variables.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤 1：生成中心图形。这是通过采样一个矩形、一条线、一种矩形、一个方块、一条线和一个圆形来完成的。这些图形被放置在固定的位置，形状的大小由随机变量确定。
- en: 'Step 2: Three clusters with lines and adjacent are sampled from three different
    distributions. In each cluster a number of vertical lines with various starting
    and ending points are placed.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤 2：从三个不同的分布中采样三个具有线条和相邻的簇。在每个簇中，放置了若干条具有不同起始和结束点的垂直线。
- en: 'Step 3: Circles and rectangles are sampled and drawn within the clusters of
    lines.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤 3：在线条的簇中采样并绘制圆形和矩形。
- en: '![](../Images/8ca93965e4c1b962b68be02f9a5e2595.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ca93965e4c1b962b68be02f9a5e2595.png)'
- en: Gif showing the step-by-step generation process of a single image.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 动图显示了单个图像的逐步生成过程。
- en: '**Step 1**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1**'
- en: 'To understand the role of random variables in my code, consider the first step
    in our image creation process: forming a portrait-style rectangle, characterized
    by its greater height than its width. This rectangle, although seemingly simple,
    is an embodiment of random variables in action.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解随机变量在我的代码中的作用，请考虑我们图像创建过程中的第一步：形成一个纵向矩形，其特点是高度大于宽度。这个矩形，虽然看似简单，却体现了随机变量的作用。
- en: 'A rectangle can be dissected into four principal elements: a starting x and
    y coordinate, and an ending x and y coordinate. Now, these points, when chosen
    from a specific distribution, transform into random variables. But how do we decide
    the range of these points, or more specifically, the distribution they come from?
    The answer lies in one of the most common and crucial distributions in statistics:
    The Normal Distribution.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形可以分解为四个主要元素：起始的 x 和 y 坐标，以及结束的 x 和 y 坐标。现在，这些点在从特定分布中选择时，转变为随机变量。但我们如何决定这些点的范围，或更具体地说，它们来自的分布呢？答案在于统计学中最常见且关键的分布之一：正态分布。
- en: Defined by two parameters — the mean (μ) and standard deviation (σ), the Normal
    Distribution plays a pivotal role in our image generation process. The mean, μ,
    signifies the center of the distribution, thus acting as the point around which
    the values of our random variables gravitate. The standard deviation, σ, quantifies
    the degree of dispersion in the distribution. It decides the range of values the
    random variables could potentially take. In essence, a larger standard deviation
    would result in greater diversity in the images created.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正态分布由两个参数定义——均值 (μ) 和标准差 (σ)，在我们的图像生成过程中发挥着关键作用。均值 μ 表示分布的中心，因此充当随机变量值围绕的点。标准差
    σ 量化了分布中的离散程度。它决定了随机变量可能取的值范围。本质上，较大的标准差会导致生成图像的多样性更大。
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Sampling a square looks very similar we only have to sample the height or the
    width as they are the same. Sampling a circle is even easier as we only have to
    sample the radius.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 采样一个正方形看起来非常相似，我们只需采样高度或宽度，因为它们是一样的。采样一个圆形则更简单，因为我们只需采样半径。
- en: 'Drawing a rectangle in Python is a straightforward process, especially when
    utilizing the Pillow library. Here’s how you can do it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中绘制矩形是一个简单的过程，特别是当使用 Pillow 库时。以下是如何做到这一点：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Step 2**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2**'
- en: 'In the context of the vertical lines in these images, we consider three random
    variables, namely:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些图像中的垂直线的背景下，我们考虑了三个随机变量，即：
- en: The beginning y-coordinate of the line (y_start)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线的起始 y 坐标（y_start）
- en: The ending y-coordinate of the line (y_end)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线的结束 y 坐标（y_end）
- en: The x-coordinate of the line (x)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线的 x 坐标（x）
- en: Since we are dealing with vertical lines, only one x-coordinate needs to be
    sampled for each line. The width of the line is constant, controlled by the size
    of the canvas.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们处理的是垂直线，每条线只需要采样一个 x 坐标。线的宽度是恒定的，由画布的大小控制。
- en: Some additional logic was needed to ensure the lines didn’t intersect. To do
    this basically, we need to keep account of the image as a grid and keep track
    of the occupied positions. Let's disregard that for the sake of simplicity.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一些额外的逻辑来确保线条不交叉。为此，我们基本上需要将图像视为一个网格，并跟踪被占用的位置。为了简化问题，我们暂时忽略这一点。
- en: Here’s an example of how this looks like in Python.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在 Python 中的示例。
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This however only gives you lines. Another part of the cluster is the circles
    at the end of the lines, I called these adjacent circles. Random variables also
    determine their process. First, the fact that there will be an adjacent circle
    is sampled from a Bernoulli distribution, and the position (left, middle, right)
    of the shape is sampled from a uniform distribution.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这样做只会得到直线。另一部分是线末端的圆形，我称这些为相邻圆。随机变量也决定它们的过程。首先，是否会有一个相邻圆是从伯努利分布中采样的，而形状的位置（左、中、右）是从均匀分布中采样的。
- en: 'A circle can be defined entirely by a single parameter: its radius. We can
    consider the length of a line as a condition that influences the radius of the
    circle. This forms a conditional probability model where the radius (R) of the
    circle is dependent on the length of the line (L). We use a conditional Gaussian
    distribution. The mean (μ) of this distribution is a function of the square root
    of the line length, while the standard deviation (σ) is a constant.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形可以完全由一个参数定义：它的半径。我们可以将线段长度视为影响圆形半径的条件。这形成了一个条件概率模型，其中圆形的半径（R）依赖于线段长度（L）。我们使用条件高斯分布。该分布的均值（μ）是线段长度平方根的函数，而标准差（σ）是一个常数。
- en: We initially suggest that the radius R, given the line length L, follows a normal
    distribution. This is denoted as R | L ~ N(μ(L), σ²), where N is the normal (Gaussian)
    distribution and σ is the standard deviation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初建议给定线段长度 L 的半径 R 服从正态分布。这被表示为 R | L ~ N(μ(L), σ²)，其中 N 是正态（高斯）分布，σ 是标准差。
- en: 'However, this has a small problem: the normal distribution includes the possibility
    of sampling a negative value. This outcome is not physically possible in our scenario,
    as a radius cannot be negative.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这存在一个小问题：正态分布包括了采样负值的可能性。在我们的场景中，这个结果是不可能的，因为半径不能为负。
- en: 'To circumvent this issue, we can use the half-normal distribution. This distribution,
    much like the normal distribution, is defined by a scale parameter σ, but crucially,
    it is constrained to non-negative values. The radius given the line length follows
    a half-normal distribution: R | L ~ HN(σ), where HN denotes the half-normal distribution.
    This way, σ is determined by the desired mean as σ = √(2L) / √(2/π), ensuring
    that all sampled radii are non-negative and that the mean of the distribution
    is √(2L)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了规避这个问题，我们可以使用半正态分布。这个分布与正态分布类似，由一个尺度参数 σ 定义，但关键的是，它被限制为非负值。给定线段长度的半径服从半正态分布：R
    | L ~ HN(σ)，其中 HN 表示半正态分布。这样，σ 由所需均值确定，即 σ = √(2L) / √(2/π)，确保所有采样的半径都是非负的，并且分布的均值是
    √(2L)。
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Step 3**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**第3步**'
- en: Step 3 in our process is a combination of elements from Steps 1 and 2\. In Step
    1, we tackled the task of sampling and drawing rectangles in set positions. In
    Step 2, we learned how to use the normal distribution to draw lines on a portion
    of your canvas. Additionally, we acquired knowledge on how to sample and draw
    circles.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们过程中的第3步是第1步和第2步元素的结合。在第1步中，我们处理了在设定位置采样和绘制矩形的任务。在第2步中，我们学会了如何使用正态分布在画布的一部分上绘制线条。此外，我们还掌握了如何采样和绘制圆形的知识。
- en: As we transition to Step 3, we are going to repurpose the techniques from the
    previous steps. Our aim is to distribute squares and circles harmoniously around
    the lines that we sampled earlier. The normal distribution, will once again come
    in handy for this task.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们过渡到第3步时，我们将重新利用前面步骤中的技巧。我们的目标是将方形和圆形和谐地分布在我们之前采样的线条周围。正态分布将在这个任务中再次派上用场。
- en: We will re-use the parameters used to create clusters of lines. However, to
    enhance the visual appeal and avoid overlaps, we introduce some noise to the mean
    (mu) and standard deviation values.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用用于创建线条集群的参数。然而，为了增强视觉效果并避免重叠，我们对均值（μ）和标准差值引入了一些噪声。
- en: In this step, instead of positioning lines, our task is to place sampled rectangles
    and circles. I encourage you to play around with these techniques and try if you
    can add circles and rectangles to your cluster of lines.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们的任务不是定位线条，而是放置采样的矩形和圆形。我鼓励你尝试这些技巧，并看看是否能将圆形和矩形添加到你的线条集群中。
- en: In this blog post, I’ve dissected and simplified the processes underpinning
    my code to enable a deeper understanding of how it operates. I’ve shown the difficulty
    for generative AI models like Dall-E to follow precise constraints.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我已经解剖并简化了支撑我的代码的过程，以便更深入地理解其操作方式。我展示了像 Dall-E 这样的生成性 AI 模型在遵循精确约束方面的困难。
- en: Writing the code that produced these images was a great experience for me. Seeing
    the image progress with each line of code I wrote was so cool to witness. I hope
    that this blog post has piqued your interest in the intersection of art and coding.
    I encourage you to use your coding skills and bring your imagination alive using
    code. There’s no need to exhaust your Dall-E credits; the power to create is right
    at your fingertips.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 编写产生这些图像的代码对我来说是一次极好的体验。看到每写一行代码，图像逐渐变化，真的很酷。我希望这篇博客文章激发了你对艺术与编程交汇点的兴趣。我鼓励你利用你的编程技能，通过代码让你的想象力变为现实。无需耗尽你的
    Dall-E 额度，创造的力量就在你的指尖。
