- en: 'Large Language Models: RoBERTa — A Robustly Optimized BERT Approach'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/roberta-1ef07226c8d8?source=collection_archive---------1-----------------------#2023-09-24](https://towardsdatascience.com/roberta-1ef07226c8d8?source=collection_archive---------1-----------------------#2023-09-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn about key techniques used for BERT optimisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@slavahead?source=post_page-----1ef07226c8d8--------------------------------)[![Vyacheslav
    Efimov](../Images/db4b02e75d257063e8e9d3f1f75d9d6d.png)](https://medium.com/@slavahead?source=post_page-----1ef07226c8d8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1ef07226c8d8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1ef07226c8d8--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page-----1ef07226c8d8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc8a0ca9d85d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Froberta-1ef07226c8d8&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=post_page-c8a0ca9d85d8----1ef07226c8d8---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1ef07226c8d8--------------------------------)
    ·5 min read·Sep 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1ef07226c8d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Froberta-1ef07226c8d8&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=-----1ef07226c8d8---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1ef07226c8d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Froberta-1ef07226c8d8&source=-----1ef07226c8d8---------------------bookmark_footer-----------)![](../Images/0fcff885fed32012c5a3ec2976d5f60c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The appearance of the **BERT** model led to significant progress in NLP. Deriving
    its architecture from **Transformer**, BERT achieves state-of-the-art results
    on various downstream tasks: language modeling, next sentence prediction, question
    answering, NER tagging, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/bert-3d1bf880386a?source=post_page-----1ef07226c8d8--------------------------------)
    [## Large Language Models: BERT — Bidirectional Encoder Representations from Transformer'
  prefs: []
  type: TYPE_NORMAL
- en: Understand how BERT constructs state-of-the-art embeddings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/bert-3d1bf880386a?source=post_page-----1ef07226c8d8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Despite the excellent performance of BERT, researchers still continued experimenting
    with its configuration in hopes of achieving even better metrics. Fortunately,
    they succeeded with it and presented a new model called **RoBERTa** — Robustly
    Optimised BERT Approach.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this article, we will be referring to the official [RoBERTa paper](https://arxiv.org/pdf/1907.11692.pdf)
    which contains in-depth information about the model. In simple words, RoBERTa
    consists of several independent improvements over the original BERT model — all
    of the other principles including the architecture stay the same. All of the advancements
    will be covered and explained in this article.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Dynamic masking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the BERT’s architecture we remember that during pretraining BERT performs
    language modeling by trying to predict a certain percentage of masked tokens.
    The problem with the original implementation is the fact that chosen tokens for
    masking for a given text sequence across different batches are sometimes the same.
  prefs: []
  type: TYPE_NORMAL
- en: More precisely, the training dataset is duplicated 10 times, thus each sequence
    is masked only in 10 different ways. Keeping in mind that BERT runs 40 training
    epochs, each sequence with the same masking is passed to BERT four times. As researchers
    found, it is slightly better to use dynamic masking meaning that masking is generated
    uniquely every time a sequence is passed to BERT. Overall, this results in less
    duplicated data during the training giving an opportunity for a model to work
    with more various data and masking patterns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5f0d5098a4da926aa2d2e4e5d5b760a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Static masking vs Dynamic masking
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Next sentence prediction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The authors of the paper conducted research for finding an optimal way to model
    the next sentence prediction task. As a consequence, they found several valuable
    insights:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Removing the next sentence prediction loss results in a slightly better performance.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passing single natural sentences into BERT input hurts the performance, compared
    to passing sequences consisting of several sentences**. One of the most likely
    hypothesises explaining this phenomenon is the difficulty for a model to learn
    long-range dependencies only relying on single sentences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It more beneficial to construct input sequences by sampling contiguous**
    **sentences from a single document rather than from multiple documents.** Normally,
    sequences are always constructed from contiguous full sentences of a single document
    so that the total length is at most 512 tokens. The problem arises when we reach
    the end of a document. In this aspect, researchers compared whether it was worth
    stopping sampling sentences for such sequences or additionally sampling the first
    several sentences of the next document (and adding a corresponding separator token
    between documents). The results showed that the first option is better.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately, for the final RoBERTa implementation, the authors chose to keep
    the first two aspects and omit the third one. Despite the observed improvement
    behind the third insight, researchers did not not proceed with it because otherwise,
    it would have made the comparison between previous implementations more problematic.
    It happens due to the fact that reaching the document boundary and stopping there
    means that an input sequence will contain less than 512 tokens. For having a similar
    number of tokens across all batches, the batch size in such cases needs to be
    augmented. This leads to variable batch size and more complex comparisons which
    researchers wanted to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49279eaf526bc460b7f3d52923f394a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 3\. Increasing batch size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recent advancements in NLP showed that increase of the batch size with the appropriate
    decrease of the learning rate and the number of training steps usually tends to
    improve the model’s performance.
  prefs: []
  type: TYPE_NORMAL
- en: As a reminder, the BERT base model was trained on a batch size of 256 sequences
    for a million steps. The authors tried training BERT on batch sizes of 2K and
    8K and the latter value was chosen for training RoBERTa. The corresponding number
    of training steps and the learning rate value became respectively 31K and 1e-3.
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to keep in mind that batch size increase results in easier
    parallelization through a special technique called “***gradient accumulation***”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Byte text encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In NLP there exist three main types of text tokenization:'
  prefs: []
  type: TYPE_NORMAL
- en: Character-level tokenization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subword-level tokenization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Word-level tokenization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The original BERT uses a subword-level tokenization with the vocabulary size
    of 30K which is learned after input preprocessing and using several heuristics.
    RoBERTa uses bytes instead of unicode characters as the base for subwords and
    expands the vocabulary size up to 50K without any preprocessing or input tokenization.
    This results in 15M and 20M additional parameters for BERT base and BERT large
    models respectively. The introduced encoding version in RoBERTa demonstrates slightly
    worse results than before.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, in the vocabulary size growth in RoBERTa allows to encode almost
    any word or subword without using the unknown token, compared to BERT. This gives
    a considerable advantage to RoBERTa as the model can now more fully understand
    complex texts containing rare words.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cdee0913cccc1b2bf6291958373ee900.png)'
  prefs: []
  type: TYPE_IMG
- en: Pretraining
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from it, RoBERTa applies all four described aspects above with the same
    architecture parameters as BERT large. The total number of parameters of RoBERTa
    is 355M.
  prefs: []
  type: TYPE_NORMAL
- en: RoBERTa is pretrained on a combination of five massive datasets resulting in
    a total of 160 GB of text data. In comparison, BERT large is pretrained only on
    13 GB of data. Finally, the authors increase the number of training steps from
    100K to 500K.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, RoBERTa outperforms BERT large on XLNet large on the most popular
    benchmarks.
  prefs: []
  type: TYPE_NORMAL
- en: RoBERTa versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Analogously to BERT, the researchers developed two versions of RoBERTa. Most
    of the hyperparameters in the base and large versions are the same. The figure
    below demonstrates the principle differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a46e3fd0b0d36e07965b858682fb8e91.png)'
  prefs: []
  type: TYPE_IMG
- en: The fine-tuning process in RoBERTa is similar to the BERT’s.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this article, we have examined an improved version of BERT which modifies
    the original training procedure by introducing the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: dynamic masking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: omitting the next sentence prediction objective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: training on longer sentences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: increasing vocabulary size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: training for longer with larger batches over data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resulting RoBERTa model appears to be superior to its ancestors on top benchmarks.
    Despite a more complex configuration, RoBERTa adds only 15M additional parameters
    maintaining comparable inference speed with BERT.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[RoBERTa: A Robustly Optimized BERT Pretraining Approach](https://arxiv.org/pdf/1907.11692.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All images unless otherwise noted are by the author*'
  prefs: []
  type: TYPE_NORMAL
