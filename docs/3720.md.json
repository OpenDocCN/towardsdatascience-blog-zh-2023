["```py\npub struct BertInferenceModel {\n    model: BertModel,\n    tokenizer: Tokenizer,\n    device: Device,\n    embeddings: Tensor,\n}\n```", "```py\n pub fn load(\n        model_name: &str,\n        revision: &str,\n        embeddings_filename: &str,\n        embeddings_key: &str,\n    ) -> anyhow::Result<Self> {}\n```", "```py\n let shared_state = \n      Arc::new((bert_model, text_map));\n\n   let app = Router::new()\n        .route(\"/similar\", post(find_similar))\n        .with_state(shared_state);\n```", "```py\n{\n    \"text\": \"europe climate change storm\",\n    \"num_results\":5\n}\n```", "```py\n#[derive(Deserialize)]\nstruct ReqPayload {\n    keywords: String,\n    num_results: u32,\n}\n\n#[derive(Serialize)]\nstruct ResPayload {\n    text: Vec<String>,\n}\n```", "```py\ncurl -s -w \"\\\\nTotal time: %{time_total}s\\\\n\" \\ \n -X POST http://localhost:3000/similar \\\n -H \"Content-Type: application/json\" \\\n -d '{\"text\": \"self driving cars navigation\", \"num_results\": 3}' | jq\n{\n  \"text\": [\n    \"Item:Stereo Acoustic Perception ... (index: 8441 score:0.8516491)\",\n    \"Item:Vision-based Navigation of ... (index: 7253 score:0.85097575)\",\n    \"Item:Learning On-Road Visual .....  (index: 30670 score:0.8500275)\"\n  ]\n}\n\nTotal time: 0.091665s\n```"]