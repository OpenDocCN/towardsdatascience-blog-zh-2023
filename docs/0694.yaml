- en: 'Sensitivity in Predictive Modeling: A Guide to Buying Paying Customers with
    Less Traffic'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/sensitivity-in-predictive-modeling-a-guide-to-buying-paying-customers-with-less-traffic-c2ab97f6d629?source=collection_archive---------14-----------------------#2023-02-20](https://towardsdatascience.com/sensitivity-in-predictive-modeling-a-guide-to-buying-paying-customers-with-less-traffic-c2ab97f6d629?source=collection_archive---------14-----------------------#2023-02-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Discover a cost-effective ad campaign strategy by defining and evaluating model
    sensitivity, with step-by-step guidance and Python implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@dinabavli?source=post_page-----c2ab97f6d629--------------------------------)[![Dina
    Bavli](../Images/c2d94092377d3489dcbca14363ff9a4e.png)](https://medium.com/@dinabavli?source=post_page-----c2ab97f6d629--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c2ab97f6d629--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c2ab97f6d629--------------------------------)
    [Dina Bavli](https://medium.com/@dinabavli?source=post_page-----c2ab97f6d629--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fae5cca1dfa71&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsensitivity-in-predictive-modeling-a-guide-to-buying-paying-customers-with-less-traffic-c2ab97f6d629&user=Dina+Bavli&userId=ae5cca1dfa71&source=post_page-ae5cca1dfa71----c2ab97f6d629---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c2ab97f6d629--------------------------------)
    ·7 min read·Feb 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc2ab97f6d629&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsensitivity-in-predictive-modeling-a-guide-to-buying-paying-customers-with-less-traffic-c2ab97f6d629&user=Dina+Bavli&userId=ae5cca1dfa71&source=-----c2ab97f6d629---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc2ab97f6d629&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsensitivity-in-predictive-modeling-a-guide-to-buying-paying-customers-with-less-traffic-c2ab97f6d629&source=-----c2ab97f6d629---------------------bookmark_footer-----------)![](../Images/d1c6920100b29902c0c64f1f6fb53c5c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Joey Kyber](https://unsplash.com/@jtkyber1?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: This blog post outlines a tactic for businesses that utilize paid traffic in
    their advertising. The objective is to acquire paying customers with minimal traffic
    while maximizing efficiency. Predictive modeling is utilized to assess and enhance
    the model’s effectiveness in achieving this goal. By defining and analyzing model
    sensitivity, companies can attain their desired outcomes while saving money. This
    article offers a Python implementation and a detailed, step-by-step guide to the
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: · [Introduction](#8a94)
  prefs: []
  type: TYPE_NORMAL
- en: · [Understanding Confusion Matrix for Predictive Modeling in Business](#20fc)
  prefs: []
  type: TYPE_NORMAL
- en: · [Talk Python To Me](#cb63)
  prefs: []
  type: TYPE_NORMAL
- en: · [Here is the full code](#d065)
  prefs: []
  type: TYPE_NORMAL
- en: · [Summary](#4946)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buying paying customers with less traffic is a common challenge for companies
    that advertise using paid traffic. The goal is to make these purchases as efficient
    as possible by buying less traffic and yet getting as many buying customers as
    possible. One way to achieve this is by using predictive modeling to evaluate
    and optimize the model's performance.
  prefs: []
  type: TYPE_NORMAL
- en: Predictive modeling involves using statistical techniques to make predictions
    about future events or outcomes based on historical data. In this context, the
    goal is to predict which customers are likely to make a purchase so that the company
    can target its advertising efforts toward those customers.
  prefs: []
  type: TYPE_NORMAL
- en: To evaluate the performance of a predictive model, we can use a confusion matrix.
    A confusion matrix is a table that is used to define the performance of a classification
    algorithm, and it is especially useful in evaluating binary classification models,
    like the one we are discussing. The matrix compares the predicted outcome of the
    model to the actual outcome.
  prefs: []
  type: TYPE_NORMAL
- en: One of the metrics that is commonly used to evaluate the performance of a binary
    classification model is recall. Recall is the number of times the model predicted
    it’s a buying customer, and it was, divided by the number of actual buying customers.
    In other words, it measures how well the model is able to identify positive cases,
    in our case, buying customers.
  prefs: []
  type: TYPE_NORMAL
- en: Another important metric to consider is the threshold. The threshold is the
    point at which a predicted outcome is considered positive. Increasing the threshold
    will increase the number of false positives, decreasing precision. While decreasing
    the threshold will increase the number of false negatives, decreasing recall.
  prefs: []
  type: TYPE_NORMAL
- en: The balance between precision and recall is known as the trade-off. It’s important
    to find the best threshold that maximizes the recall while minimizing the precision
    to get as many paying customers as possible with less traffic.
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, we will discuss a strategy for buying paying customers with
    less traffic. By evaluating models by defining the model sensitivity, companies
    can save money while still achieving their desired results.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Confusion Matrix for Predictive Modeling in Business
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to predictive modeling in business, it’s essential to have a model
    that can accurately identify buying customers, as they are often a rare and valuable
    segment. One way to measure the accuracy of a classification algorithm is by using
    a confusion matrix.
  prefs: []
  type: TYPE_NORMAL
- en: A confusion matrix is a table that summarizes the performance of a classification
    model by comparing the predicted and actual values of a binary classification
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'he four categories in a binary classification confusion matrix are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'True Positives (TP): The number of positive instances that were correctly predicted
    as positive by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False Positives (FP): The number of negative instances that were incorrectly
    predicted as positive by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'True Negatives (TN): The number of negative instances that were correctly predicted
    as negative by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False Negatives (FN): The number of positive instances that were incorrectly
    predicted as negative by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/8d301d1ca7c97e10f1f583de09d753a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Created by Author using [https://excalidraw.com/](https://excalidraw.com/)
  prefs: []
  type: TYPE_NORMAL
- en: True Positive (TP), False Positive (FP), False Negative (FN), and True Negative
    (TN). TP represents the number of times the model predicted a buying customer,
    and it was accurate, while FN represents the number of times the model missed
    a buying customer. FP represents the number of times the model predicted a non-buying
    customer, but it was wrong, while TN represents the number of times the model
    predicted a non-buying customer, and it was correct.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db34a2fba29b19a39dc1ddd0ed85d92a.png)'
  prefs: []
  type: TYPE_IMG
- en: Created by Author using [https://editor.codecogs.com/](https://editor.codecogs.com/)
  prefs: []
  type: TYPE_NORMAL
- en: The recall metric, also known as sensitivity or true positive rate, measures
    the proportion of actual buying customers that the model correctly identifies.
    It is calculated as TP/(TP+FN), which represents the number of times the model
    predicted a buying customer and was correct, divided by the total number of actual
    buying customers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6079d452ca27bb3985e3d209403a9fd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Created by Author using [https://editor.codecogs.com/](https://editor.codecogs.com/)
  prefs: []
  type: TYPE_NORMAL
- en: In addition to measuring the model’s sensitivity to buying customers, the confusion
    matrix can also provide insights into the amount of traffic and buying customers
    that can be expected from a specific threshold. By calculating (FN + TP)/(TN +
    FP + FN + TP), one can determine the percentage of buying customers out of all
    customers that the model will correctly identify at a particular threshold.
  prefs: []
  type: TYPE_NORMAL
- en: However, it’s important to note that increasing the threshold will increase
    false positives, decreasing precision. One approach to balancing the sensitivity
    and precision of a model is by setting a desired percentage of paying customers
    and calculating the threshold that will achieve that percentage according to the
    specific model.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the confusion matrix and its metrics can provide valuable insights
    into the performance of predictive models in business, especially when identifying
    rare and valuable segments such as buying customers. By analyzing the confusion
    matrix, businesses can optimize their models and make data-driven decisions that
    lead to better outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Talk Python To Me
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Machine learning models are evaluated using various metrics such as accuracy,
    precision, and recall. In some cases, achieving a certain level of recall is more
    important than maximizing accuracy. In this post, we’ll walk through how to evaluate
    a model based on a desired recall level using Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Problem: Suppose we have a binary classification problem, where we want
    to predict whether a user will buy a product or not. The data set contains 200,000
    records, with 30,630 positives and 169,070 negatives. Our goal is to train a model
    that can predict with high recall which users will buy a product.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Solution: We can use the following Python functions to evaluate the performance
    of our model with the desired recall:'
  prefs: []
  type: TYPE_NORMAL
- en: 'extract_threshold_given_recall(y_test, probabilities, given_recall) This function
    takes three inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'y_test: the target values of the test set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'probabilities: the predicted probabilities of the test set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'given_recall: the desired level of recall'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function calculates the precision-recall curve using the y_test and probabilities,
    and returns the threshold value for the given recall.
  prefs: []
  type: TYPE_NORMAL
- en: 'get_model_results_for_recall(model, X_test, y_test, X_train, y_train, given_recall,
    with_plots=True) This function takes six inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'model: the trained machine learning model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'X_test: the feature matrix of the test set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'y_test: the target values of the test set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'X_train: the feature matrix of the training set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'y_train: the target values of the training set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'given_recall: the desired level of recall'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function first calculates the predicted probabilities of the test set using
    the model. It then calculates the ROC curve and the best threshold value for the
    desired recall using the extract_threshold_given_recall function. Finally, it
    calculates the confusion matrix, classification report, FPR, AUC, Accuracy Score,
    Best Threshold, and Traffic to buy. Optionally, the function can also plot the
    ROC curve.
  prefs: []
  type: TYPE_NORMAL
- en: The output will look like this 👇
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/adcf1d730dcdf2ffbfa7b6caebca4d4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the full code:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we’ve seen how to evaluate the performance of a machine-learning
    model using the desired recall level. By evaluating models by defining the model
    sensitivity, companies can save money while still achieving their desired results
    of buying paying customers with less traffic. We have provided a python implementation
    that can help with this process by finding the best threshold that maximizes the
    recall. Maximizing the recall can reduce buying unpaying customers because recall
    is a metric that measures the proportion of actual positives (i.e., paying customers)
    that are correctly identified as such by the predictive model. By optimizing the
    model to maximize recall, the model is better at identifying paying customers,
    which means that the company can avoid buying traffic that is unlikely to result
    in paying customers. This can reduce the cost of acquiring customers and increase
    the efficiency of the company’s advertising budget.
  prefs: []
  type: TYPE_NORMAL
