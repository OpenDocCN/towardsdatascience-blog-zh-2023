- en: Developing Scientific Software
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发科学软件
- en: 原文：[https://towardsdatascience.com/developing-scientific-software-c8e89f6ade7?source=collection_archive---------8-----------------------#2023-07-01](https://towardsdatascience.com/developing-scientific-software-c8e89f6ade7?source=collection_archive---------8-----------------------#2023-07-01)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/developing-scientific-software-c8e89f6ade7?source=collection_archive---------8-----------------------#2023-07-01](https://towardsdatascience.com/developing-scientific-software-c8e89f6ade7?source=collection_archive---------8-----------------------#2023-07-01)
- en: 'Part 1: Principles from Test-Driven Development'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1部分：测试驱动开发的原则
- en: '[](https://medium.com/@cdacostaf?source=post_page-----c8e89f6ade7--------------------------------)[![Carlos
    Costa, Ph.D.](../Images/fc5e03e455f11b963086355fe0ccc077.png)](https://medium.com/@cdacostaf?source=post_page-----c8e89f6ade7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c8e89f6ade7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c8e89f6ade7--------------------------------)
    [Carlos Costa, Ph.D.](https://medium.com/@cdacostaf?source=post_page-----c8e89f6ade7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@cdacostaf?source=post_page-----c8e89f6ade7--------------------------------)[![Carlos
    Costa, Ph.D.](../Images/fc5e03e455f11b963086355fe0ccc077.png)](https://medium.com/@cdacostaf?source=post_page-----c8e89f6ade7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c8e89f6ade7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c8e89f6ade7--------------------------------)
    [Carlos Costa, Ph.D.](https://medium.com/@cdacostaf?source=post_page-----c8e89f6ade7--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc1d045b63ee9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-scientific-software-c8e89f6ade7&user=Carlos+Costa%2C+Ph.D.&userId=c1d045b63ee9&source=post_page-c1d045b63ee9----c8e89f6ade7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c8e89f6ade7--------------------------------)
    ·10 min read·Jul 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc8e89f6ade7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-scientific-software-c8e89f6ade7&user=Carlos+Costa%2C+Ph.D.&userId=c1d045b63ee9&source=-----c8e89f6ade7---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[跟随](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc1d045b63ee9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-scientific-software-c8e89f6ade7&user=Carlos+Costa%2C+Ph.D.&userId=c1d045b63ee9&source=post_page-c1d045b63ee9----c8e89f6ade7---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c8e89f6ade7--------------------------------)
    · 10分钟阅读 · 2023年7月1日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc8e89f6ade7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-scientific-software-c8e89f6ade7&user=Carlos+Costa%2C+Ph.D.&userId=c1d045b63ee9&source=-----c8e89f6ade7---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc8e89f6ade7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-scientific-software-c8e89f6ade7&source=-----c8e89f6ade7---------------------bookmark_footer-----------)![](../Images/72729e33f225858ae5308356bbeb08f7.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc8e89f6ade7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-scientific-software-c8e89f6ade7&source=-----c8e89f6ade7---------------------bookmark_footer-----------)![](../Images/72729e33f225858ae5308356bbeb08f7.png)'
- en: Photo by [Noah Windler](https://unsplash.com/@noahwindler?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[照片由Noah Windler](https://unsplash.com/@noahwindler?utm_source=medium&utm_medium=referral)提供，拍摄于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
- en: We live in an age of rapidly expanding possibilities in the world of computing.
    AI continues to make strides in solving old and new problems alike, often in completely
    unexpected ways. Huge datasets have now become ubiquitous in almost any area,
    and not just something that scientists in white lab coats at expensive facilities
    can obtain.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活在一个计算世界快速扩展可能性的时代。人工智能在解决旧问题和新问题方面不断取得进展，常常以完全意想不到的方式进行。庞大的数据集现在几乎在任何领域都变得普遍，而不仅仅是科学家们在昂贵设施中才能获得的东西。
- en: And yet many of the challenges that have been encountered in the last decades
    when developing software to process data remain — or are even exacerbated when
    handling these new, vast swathes of data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在过去几十年中，处理数据的软件开发面临的许多挑战依然存在——或者在处理这些新的、大量的数据时问题更加严重。
- en: The area of scientific computing, traditionally focused in developing fast and
    accurate methods to solve scientific problems has recently become relevant much
    beyond its original, narrow scope. In this article, I will expose some of the
    challenges that arise when developing high-quality scientific software, as well
    as some tactics on how to overcome them. Our end goal put together a step-by-step
    guide for creating scientific software that ensures an accurate and efficient
    development process. In a follow-up article, I will follow this step-by-step guide
    to solve a dummy problem in Python. [Check it out](/developing-scientific-software-d023a96188a3)
    after reading this article!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 科学计算领域，传统上专注于开发快速而准确的方法来解决科学问题，近年来已超越其原始的狭窄范围变得相关。在本文中，我将揭示在开发高质量科学软件时出现的一些挑战，以及一些克服这些挑战的策略。我们的最终目标是制定一个逐步指南，以确保准确和高效的开发过程。在后续文章中，我将跟随这个逐步指南解决一个
    Python 示例问题。[阅读后查看](/developing-scientific-software-d023a96188a3)！
- en: 'TDD and Scientific Computing: a match **not** made in heaven?'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD 和科学计算：**不是**天作之合？
- en: '[Test-driven development (TDD)](https://en.wikipedia.org/wiki/Test-driven_development)
    redefined software engineering, enabling developers to write more durable, bug-free
    code. If you have ever used TDD, you are probably familiar with its power in writing
    quality software. If you have not, hopefully by the end of this article you will
    understand its importance. Regardless of your experience with TDD, anyone who
    is familiar with scientific computing knows that using automated testing of the
    software can be tricky to implement reliably.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[测试驱动开发 (TDD)](https://en.wikipedia.org/wiki/Test-driven_development)重新定义了软件工程，使开发人员能够编写更耐用、无漏洞的代码。如果你曾经使用过
    TDD，你可能对它在编写高质量软件方面的力量非常熟悉。如果没有，希望通过阅读本文你会理解它的重要性。无论你对 TDD 的经验如何，任何熟悉科学计算的人都知道，自动化测试软件的实施往往很棘手。'
- en: The [TDD development cycle](https://en.wikipedia.org/wiki/Test-driven_development),
    which I recommend everyone to read at least once, lays out some sensible instructions
    on how to develop software in a way that every piece of code written is checked
    to be right by a test. Periodic testing then guarantees that bugs are often caught
    before they are introduced.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐大家至少读一次的 [TDD 开发周期](https://en.wikipedia.org/wiki/Test-driven_development)
    提供了一些明智的指示，说明如何以一种每一段代码都通过测试验证的方式开发软件。定期测试可以确保错误常常在被引入之前就被发现。
- en: But some of the tenets of TDD may seem completely at odds with the scientific
    software development process. In TDD, for example, tests are written *before*
    the code; the code is written to accommodate the tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但 TDD 的一些原则可能与科学软件开发过程完全相悖。例如，在 TDD 中，测试是在代码*之前*编写的；代码是为了适应测试而编写的。
- en: 'But imagine you are implementing a completely new data processing method. How
    would you write a test before you even have the code? TDD relies on **expected
    behavior**: if there is no way to quantify behavior prior to implementing the
    new method, it is logically impossible to write the test first! I will argue that
    this case is rare, but even when it does happen, TDD can still help us. How?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但设想你正在实现一种全新的数据处理方法。你如何在甚至没有代码的情况下编写测试？TDD 依赖于**预期行为**：如果在实施新方法之前没有办法量化行为，那么首先编写测试在逻辑上是不可能的！我会认为这种情况很少见，但即使发生了，TDD
    仍然可以帮助我们。怎么做呢？
- en: Validation and Verification
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证与确认
- en: '[Rilee and Clune](https://ieeexplore.ieee.org/document/7017328) observe (emphasis
    mine):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[Rilee 和 Clune](https://ieeexplore.ieee.org/document/7017328) 观察到（强调部分为我所加）：'
- en: '*Effective testing of numerical software requires a comprehensive suite of
    oracles […] as well as robust estimates for the unavoidable numerical errors […]
    At first glance these concerns often seem exceedingly challenging or even insurmountable
    for real-world scientific applications. However, we argue that this common perception
    is incorrect and driven by* ***(1) a conflation between model validation and software
    verification*** *and (2) the general tendency in the scientific community to develop
    relatively coarse-grained, large procedures that compound numerous algorithmic
    steps.*'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*有效的数值软件测试需要一套全面的预言器 […] 以及对不可避免的数值误差的稳健估计 […] 初看这些问题常常显得极具挑战性甚至难以克服。然而，我们认为这种普遍看法是不正确的，并由*
    ***(1) 模型验证与软件确认的混淆*** *以及 (2) 科学界倾向于开发相对粗糙的大型程序，聚合了许多算法步骤* 驱动。'
- en: '**Oracles** are known input/output pairs that may or may not involve complex
    computations. Oracles are used for traditional TDD, but they are often very simple.
    They play a larger role in scientific software, and not just as a part of unit
    testing!'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Oracle** 是已知的输入/输出对，这些对可能涉及或不涉及复杂的计算。Oracle 用于传统的 TDD，但它们通常非常简单。它们在科学软件中扮演着更重要的角色，而不仅仅是作为单元测试的一部分！'
- en: When we talk about using oracles to check for some expected behavior, we are
    talking about software **verification**. For the software, it doesn’t really matter
    what it is verifying, only that input X leads to output Y. **Validation**, on
    the other hand, is the process of ensuring the code’s output Y accurately matches
    what is expected by the scientist. This process *must obligatorily leverage* the
    scientist’s domain knowledge in the form of experiments, simulations, observations,
    literature survey, mathematical models, etc.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论使用 oracles 检查某些预期行为时，我们谈论的是软件的 **验证**。对于软件来说，它不关心验证什么，只要输入 X 导致输出 Y。另一方面，**确认**
    是确保代码的输出 Y 准确匹配科学家期望的过程。这个过程 *必须必然利用* 科学家的领域知识，以实验、模拟、观察、文献调查、数学模型等形式呈现。
- en: This important distinction is not exclusive to the domain of scientific computing.
    Any practitioner of TDD either implicitly or explicitly develops tests which encompass
    both verification and validation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个重要的区别并非科学计算领域所独有。任何 TDD 实践者无论是隐性还是显性地开发了包含验证和确认两个方面的测试。
- en: Suppose you are writing code to seat a list of people to a given list of labeled
    chairs. A verification test may check if a list of N persons and M chairs outputs
    a list of N 2-tuples. Or that if any of the lists are empty, the output must also
    be an empty list. Meanwhile, a validation test may check that if an input list
    contains duplicates, the function throws an error. Or that for any output, no
    two persons are assigned to the same chair. These tests require domain knowledge
    of our problem.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在编写代码以将一组人分配到一组标记的椅子上。一个验证测试可以检查 N 个人和 M 把椅子的列表是否输出了 N 个 2 元组。或者检查如果任何列表为空，输出也必须是空列表。与此同时，一个确认测试可以检查如果输入列表包含重复项，函数是否抛出错误。或者检查在任何输出中，没有两个人被分配到同一把椅子上。这些测试需要对我们的问题有领域知识。
- en: While TDD operates on both verification and validation, it is important to not
    conflate the two and use them at the appropriate stage of software development.
    If you are engaged in writing scientific software — i.e., any non-trivial pieces
    of numerical code, especially performance-critical ones—read on to understand
    how to appropriately leverage TDD for these purposes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 TDD 涉及验证和确认两个方面，但重要的是不要混淆这两者，并在软件开发的适当阶段使用它们。如果你正在编写科学软件——即任何复杂的数值代码，尤其是性能关键的代码——请继续阅读，以了解如何恰当地利用
    TDD 达成这些目的。
- en: Caveats of Testing in Scientific Software
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科学软件中的测试警告
- en: 'One important difference between standard software and scientific software
    is that in standard software, equality is something generally uncontroversial.
    When testing if two people are assigned the same chair, checking if labels (modeled
    as, say, integers) are the same for persons (or chairs) is straightforward. In
    scientific software, the ubiquitous use of floating point numbers complicates
    matters considerably. Equality cannot be generally checked via `==`, and commonly
    requires a choice of numerical precision. In fact, the definition of precision
    can vary depending on the application (e.g., see [relative vs. absolute tolerance](http://web.mit.edu/10.001/Web/Tips/Converge.htm)).
    Here are some recommended practices for numerical accuracy testing:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 标准软件和科学软件之间的一个重要区别是，在标准软件中，相等性通常是不具争议的。当测试是否有两个人被分配到同一把椅子时，检查标签（可以建模为整数）是否相同是直接的。在科学软件中，浮点数的普遍使用使问题复杂化。相等性不能一般通过
    `==` 检查，通常需要选择数值精度。实际上，精度的定义可能会根据应用而有所不同（例如，见 [相对与绝对容差](http://web.mit.edu/10.001/Web/Tips/Converge.htm)）。这里是一些推荐的数值准确性测试实践：
- en: Start by testing tolerance as precise as allowed by the least precise floating
    point type used in the computations. Your tests may fail. If they do, loosen the
    precision one decimal at a time until they pass. If you can’t get a good precision
    (e.g. you need a tolerance of 10^-2 for a test using float64 operations to pass),
    you might have a bug.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从测试容差开始，精度要尽可能接近所使用的最不精确的浮点类型。你的测试可能会失败。如果失败，请逐位松弛精度，直到测试通过。如果你无法获得良好的精度（例如，你需要`10^-2`的容差来使使用
    float64 操作的测试通过），可能存在 bug。
- en: Numerical error generally [grows with the number of operations](https://floating-point-gui.de/errors/propagation/).
    When possible, *validate* the precisionfrom domain-specific knowledge (e.g., Taylor
    methods have explicit remainder terms that can be leveraged in tests, but these
    situations are rare).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值误差通常[随着操作次数的增加而增长](https://floating-point-gui.de/errors/propagation/)。在可能的情况下，*通过领域特定知识*验证精度（例如，泰勒方法具有可以在测试中利用的显式余项，但这种情况很少见）。
- en: Favor absolute tolerances when possible, and avoid relative tolerances (“accuracy”)
    when comparing values near zero.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能偏好绝对容差，避免在比较接近零的值时使用相对容差（“准确性”）。
- en: It is not uncommon to have precision unit test fails when running tests thousands
    of times in different machines. If this happens consistently, either the precision
    is too stringent or a bug has been introduced. The latter has been much more common
    in my experience.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同机器上运行测试数千次时，精度单元测试失败并不罕见。如果这种情况持续发生，则要么精度要求过于严格，要么引入了错误。在我的经验中，后一种情况更为常见。
- en: '![](../Images/096a69dff1d4b0e2260f948b18bda23a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/096a69dff1d4b0e2260f948b18bda23a.png)'
- en: Floating number :P (Photo by [Johannes W](https://unsplash.com/@johanneswre?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral))
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数 :P（照片由 [Johannes W](https://unsplash.com/@johanneswre?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)）
- en: Testing new methods
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试新方法
- en: When developing scientific software, one cannot rely on numerical accuracy alone.
    Often new methods can improve accuracy or change the solution altogether, providing
    a “better” solution from the scientist’s point of view. In the former case, the
    scientist may get away with using a previous oracle with decreased tolerance to
    ensure correctness. In the latter case, the scientist may need to create a new
    oracle entirely. It is paramount to create a **curated suite of oracle examples**,
    which may or may not be checked for numerical precision, but which the scientist
    can inspect.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发科学软件时，不能仅仅依赖数值准确性。通常，新方法可以提高准确性或完全改变解决方案，从而从科学家的角度提供“更好的”解决方案。在前一种情况下，科学家可能会使用具有降低容差的先前神谕来确保正确性。在后一种情况下，科学家可能需要创建一个全新的神谕。创建一个**精心挑选的神谕示例套件**至关重要，这些示例可能会或可能不会被检查数值精度，但科学家可以检查这些示例。
- en: Curate a set of representative examples that you can automatically or manually
    inspect.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精心挑选一组具有代表性的示例，以便可以自动或手动检查。
- en: Examples should be representative. This may involve running computationally
    intensive tasks. Therefore, it is important to decouple from the unit testing
    suite.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例应该具有代表性。这可能涉及运行计算密集型任务。因此，重要的是要与单元测试套件解耦。
- en: Run these examples as periodically as possible.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能定期运行这些示例。
- en: Random testing
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机测试
- en: Scientific software may have to deal with nondeterministic behavior. There are
    many philosophies on how to handle this. My personal approach is to control randomness
    as much as possible via seed values. This has become the standard in machine learning
    experiments, which I believe is also “the right way” to do it for generic scientific
    computing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 科学软件可能需要处理非确定性行为。关于如何处理这一点有许多不同的哲学。我个人的方法是通过种子值尽可能控制随机性。这已经成为机器学习实验中的标准，我相信这也是进行通用科学计算的“正确方式”。
- en: 'I also believe that [monkey testing](https://en.wikipedia.org/wiki/Monkey_testing)
    (aka, fuzzing) — the practice of testing random values at each run — has an extremely
    valuable role in developing scientific software. Monkey testing, when used judiciously,
    can find obscure bugs and enhance your unit testing library. Done wrong, it can
    create a completely unpredictable testing suite. Good monkey tests have the following
    properties:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我还相信，[猴子测试](https://en.wikipedia.org/wiki/Monkey_testing)（即模糊测试）——在每次运行时测试随机值的做法——在开发科学软件中扮演着极其宝贵的角色。适当使用猴子测试可以发现隐蔽的错误并增强你的单元测试库。如果使用不当，它可能会创建一个完全不可预测的测试套件。好的猴子测试具有以下特点：
- en: Tests *must be reproducible*. Log all seeds required to rerun the test.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试*必须可重现*。记录所有重新运行测试所需的种子。
- en: Random inputs must range over *all* possible inputs, and *only* over these possible
    inputs.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机输入必须覆盖*所有*可能的输入，并且*仅*覆盖这些可能的输入。
- en: Treat edge cases separately if you can predict them.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可以预测边界情况，则单独处理这些情况。
- en: Tests should be able to catch errors and other bad behavior, in addition to
    testing accuracy. A test is useless if it cannot flag bad behavior.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该能够捕捉错误和其他不良行为，除了测试准确性外。如果测试不能标记不良行为，则毫无意义。
- en: Bad behavior should be studied and isolated as separate tests which test for
    a entirely class of situations which generate these error (e.g., if an input of
    -1 fails and upon investigation, all negative numbers fail, therefore create a
    test for all negative numbers).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该将不良行为作为单独的测试进行研究和隔离，这些测试检查会生成这些错误的整个情况类别（例如，如果输入 -1 失败，并且经过调查发现所有负数都失败，则创建一个针对所有负数的测试）。
- en: Profiling
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: Apart from verification and validation, developers working on high-performance
    scientific software must be mindful about performance regressions. Profiling is
    therefore an integral part of the development process, ensuring that you get the
    best performance out of your code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了验证和确认外，开发高性能科学软件的开发人员必须注意性能回归。因此，分析是开发过程的一个重要部分，确保你能从代码中获得最佳性能。
- en: But profiling can be tricky. Here are some of the guiding principles I use to
    profile scientific software.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但分析可能很棘手。以下是我在分析科学软件时使用的一些指导原则。
- en: Profile units. Similarly to testing units, you should be profiling performance-critical
    units of code. NVIDIA’s CUDA best practice model is [Assess, Parallelize, Optimize,
    Deploy (APOD)](https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#assess-parallelize-optimize-deploy).
    Profiling units puts you in a great position to Assess if you want to port your
    code to GPU.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析单元。类似于测试单元，你应该分析性能关键的代码单元。NVIDIA 的 CUDA 最佳实践模型是 [评估、并行化、优化、部署 (APOD)](https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#assess-parallelize-optimize-deploy)。分析单元让你能够评估是否要将代码移植到
    GPU 上。
- en: Profile what matters first. Err on the side of caution, but do not profile pieces
    of code which won’t be run repeatedly, or whose optimization will not result in
    large gains.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先分析重要的部分。尽量小心，但不要分析不会反复运行的代码片段，或者优化这些片段不会带来显著的收益。
- en: Profile diversely. Profile CPU time, memory, and any other useful metrics for
    the application.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多样化分析。分析 CPU 时间、内存和应用程序的任何其他有用指标。
- en: Ensure reproducible environments for profiling. Library versions, CPU workloads,
    etc.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保用于分析的环境是可重复的。包括库版本、CPU 负载等。
- en: Try to profile inside of your unit testing. You need not fail tests that regress,
    but you should at least flag them.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在单元测试中进行分析。你不需要让回归测试失败，但至少应该标记它们。
- en: 'Putting Everything Together: A Step-by-Step Model'
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一切整合起来：逐步模型
- en: In this section we are going to briefly describe the main stages of the development
    methodology that I apply for scientific software. These steps have been informed
    by writing scientific software in academia, industry, and open-source projects,
    following the best practices described above. And while I can’t say I have always
    applied them, I can honestly say that I always regretted not doing it!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将简要描述我为科学软件应用的开发方法学的主要阶段。这些步骤得到了在学术界、工业界和开源项目中编写科学软件的经验的启发，遵循了上述最佳实践。虽然我不能说我总是应用了这些方法，但我可以诚实地说，我总是后悔没有这样做！
- en: Implementation cycle
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施周期
- en: '**Gather requirements**. What is the context in which you will use your method?
    Think about what functionality it must provide, how flexible it must be, inputs
    and outputs, standalone or part of some larger codebase. Consider what it must
    do now and what you may want it to do in the future. It is easy to prematurely
    optimize in this stage, so remember: “[keep it simple, stupid](https://en.wikipedia.org/wiki/KISS_principle)”
    and “[you aren’t gonna need it](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)”.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**收集需求**。你将如何使用你的方法？考虑它必须提供什么功能、灵活性、输入和输出、是否独立或作为某个更大代码库的一部分。考虑它现在必须做什么以及你将来可能希望它做什么。在这个阶段很容易过早优化，所以记住：“[保持简单，傻瓜](https://en.wikipedia.org/wiki/KISS_principle)”
    和 “[你不会需要它](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)”。'
- en: '**Sketch the design**. Create a template, either code or diagrams establishing
    a design which satisfies the above requirements.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**勾画设计**。创建一个模板，无论是代码还是图示，以建立满足上述要求的设计。'
- en: '**Implement initial tests**. You’re in step 3 and itching to start coding.
    Take a deep breath! You will start coding but not your method/feature. At this
    step you write super simple tests. Like, really small. Start with simple verification
    tests and move on to basic validation tests. For the validation tests, my suggestion
    is to leverage analytical oracles as much as possible in the beginning. If it
    is not possible, skip them.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实现初始测试**。你在第3步，迫不及待想开始编码。深呼吸！你会开始编码，但不是你的方法/功能。在这个步骤你编写超简单的测试。真的很小。从简单的验证测试开始，然后转到基本的验证测试。对于验证测试，我建议在开始时尽可能利用分析预设。如果无法做到，请跳过它们。'
- en: '**Implement your alpha version**. You have your tests (verification), you can
    start actually implementing the code to start satisfying them without fearing
    being (very) wrong. This first implementation does not have to be the fastest,
    but *it needs to be right* (validation)! My advice: start with a simple implementation,
    leveraging standard libraries. Relying on standard libraries considerably reduces
    the risk of incorrect implementations because it leverages their test suite.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实现你的 alpha 版本**。你已经有了测试（验证），可以开始实际实现代码来满足这些测试，而不必担心（很）错误。这个初始实现不必是最快的，但*需要是正确的*（验证）！我的建议是：从一个简单的实现开始，利用标准库。依赖标准库可以大大降低不正确实现的风险，因为它们利用了自己的测试套件。'
- en: '**Build an oracle library**. I cannot stress how important this is! At this
    point you want to establish *trustworthy* oracles that you can always rely on
    for future implementations and/or changes to your methods. This part is usually
    missing from traditional TDD, but it is paramount in scientific software. It ensures
    that your results are not just numerically correct, but future-proofs new and
    possibly different implementations from being *scientifically inaccurate*. It
    is normal to go back and forth between implementation and exploratory scripts
    to build your validation oracles, but avoid writing tests at the same time.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**建立预设库**。我不能过分强调这一点！在这一点上，你需要建立*可靠的*预设，以便你在未来的实现和/或方法变更中始终可以依赖它们。这部分通常在传统的测试驱动开发（TDD）中缺失，但在科学软件中至关重要。它确保你的结果不仅在数值上是正确的，而且可以防止新的或可能不同的实现*科学上不准确*。在构建验证预设时来回折腾实现和探索脚本是正常的，但避免同时编写测试。'
- en: '**Revisit tests**. Armed with your oracles which you have diligently stored,
    write some more validation unit tests. Again, avoid going back and forth between
    implementation and tests.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重新审视测试**。利用你辛勤保存的预设，编写更多的验证单元测试。同样，避免在实现和测试之间来回折腾。'
- en: '**Implement profiling**. Set up profiling within and outside of your unit tests.
    You will come back to this once you have your first iteration going.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实现性能分析**。在你的单元测试内部和外部设置性能分析。一旦你完成了第一次迭代，你会回来处理这个问题。'
- en: Optimization cycle
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化周期
- en: '**Optimize**. You now want to make this function as fast as necessary for your
    application. Armed with your tests and your profilers, you can unleash your scientific
    computing knowledge to make it fast.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**优化**。你现在要使这个函数在你的应用中尽可能快速。利用你的测试和性能分析工具，你可以发挥你的科学计算知识来加速它。'
- en: '**Reimplement**. Here you consider new implementations, for example using hardware
    acceleration libraries like GPUs, distributed computing, etc. I suggest NVIDIA’s
    APOD ([Assess, Parallelize, Optimize, Deploy](https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#assess-parallelize-optimize-deploy))
    as a good optimization methodology. You can go back to the implementation cycle,
    but now you always have a bunch of oracles and tests. If you expect the functionality
    to change, see below.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重新实现**。在这里你可以考虑新的实现方式，例如使用硬件加速库如GPU、分布式计算等。我建议使用 NVIDIA 的 APOD（[评估、并行化、优化、部署](https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#assess-parallelize-optimize-deploy)）作为一种良好的优化方法论。你可以返回实现周期，但现在你总是拥有一堆预设和测试。如果你预期功能会改变，请参见下面。'
- en: New method cycle
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新方法周期
- en: '**Implement new method**. Follow an implementation cycle as if you did not
    have any oracles up to and including step 6.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实现新方法**。按照实现周期进行操作，直到第6步，包括第6步，就像你没有任何预设一样。'
- en: '**Validate against previous curated oracles**. After the oracle-building step,
    you can leverage your previous oracle examples from your previous implementation
    to ensure that the new one is somehow “better” than it. This step is key in developing
    algorithms and methods which are robust for a variety of data. It is used frequently
    in industry to ensure that new algorithms perform in a variety of relevant cases.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证与之前策划的神谕的对比**。在神谕构建步骤之后，你可以利用之前实施中的神谕示例，以确保新的神谕在某种程度上“更好”。这一步骤在开发对各种数据都具有鲁棒性的算法和方法中至关重要。在工业界，这一过程被频繁使用，以确保新算法在各种相关情况下表现良好。'
- en: Next Steps
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: Many of these principles may only really make sense afterwards, when looking
    at specific examples. Scientific computing spans a myriad of different types of
    software for many purposes, so one approach rarely fits all.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些原则可能只有在查看具体示例时才真正有意义。科学计算涉及多种不同类型的软件，服务于许多目的，因此一种方法很少适用于所有情况。
- en: I encourage you to follow [the next part of this series](https://medium.com/@cdacostaf/developing-scientific-software-d023a96188a3)
    to see how to implement many of these steps in practice.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你查看[本系列的下一部分](https://medium.com/@cdacostaf/developing-scientific-software-d023a96188a3)，了解如何在实践中实施这些步骤。
