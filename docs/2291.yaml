- en: Working with MS SQL Server in Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/working-with-ms-sql-server-in-julia-fc6fcd55d69a?source=collection_archive---------11-----------------------#2023-07-17](https://towardsdatascience.com/working-with-ms-sql-server-in-julia-fc6fcd55d69a?source=collection_archive---------11-----------------------#2023-07-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Time to supercharge your data analysis workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@vikas.negi10?source=post_page-----fc6fcd55d69a--------------------------------)[![Vikas
    Negi](../Images/3f5974d44cfdbdecb77e3b4cb3098af0.png)](https://medium.com/@vikas.negi10?source=post_page-----fc6fcd55d69a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fc6fcd55d69a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fc6fcd55d69a--------------------------------)
    [Vikas Negi](https://medium.com/@vikas.negi10?source=post_page-----fc6fcd55d69a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbad3267739cc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fworking-with-ms-sql-server-in-julia-fc6fcd55d69a&user=Vikas+Negi&userId=bad3267739cc&source=post_page-bad3267739cc----fc6fcd55d69a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fc6fcd55d69a--------------------------------)
    ·6 min read·Jul 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffc6fcd55d69a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fworking-with-ms-sql-server-in-julia-fc6fcd55d69a&user=Vikas+Negi&userId=bad3267739cc&source=-----fc6fcd55d69a---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffc6fcd55d69a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fworking-with-ms-sql-server-in-julia-fc6fcd55d69a&source=-----fc6fcd55d69a---------------------bookmark_footer-----------)![](../Images/9f7f39a686701078d2e8dfa7ef35f988.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Venti Views](https://unsplash.com/@ventiviews?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: SQL databases are one of the most widely deployed software around the world.
    They form the backbone of numerous applications ranging from business data analytics
    to weather forecasting. A number of client-server implementations currently exist,
    and [Microsoft’s SQL Server](https://cloudblogs.microsoft.com/sqlserver/2022/11/16/sql-server-2022-is-now-generally-available/)
    happens to be one of them. The fully-featured [developer edition](https://www.microsoft.com/en-in/sql-server/sql-server-downloads)
    is available for free. It runs on Windows, Linux and via Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists often need to interact with data stored in SQL databases. While
    it’s easy to find guides on how to do this with languages such as Python, tutorials
    for Julia are quite scarce. Therefore, in this article, I will focus on how to
    work with SQL Server using Julia. Example code is generated using a [Pluto notebook](https://github.com/vnegi10/MS_SQL_analysis)
    with Julia 1.9.1 running on Linux (Elementary OS).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Server 2022
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to have a SQL server running locally. Easiest way to set it up is
    via Docker. Instructions for SQL Server 2022 are given [here.](https://learn.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-linux-ver16&preserve-view=true&pivots=cs1-bash#pullandrun2022)
    To verify if the docker container is running, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will update every 2 s, and the STATUS column should show something like
    ‘Up X minutes’ where X is the time elapsed from when the container was started.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Microsoft ODBC driver 17 for Linux
  prefs: []
  type: TYPE_NORMAL
- en: Instructions are given [here.](https://learn.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver16&tabs=alpine18-install%2Cubuntu17-install%2Cdebian8-install%2Credhat7-13-install%2Crhel7-offline#17)
    I was unable to connect to the database using the newer driver 18, hence cannot
    recommend to use that one.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. sqlcmd utility (optional)
  prefs: []
  type: TYPE_NORMAL
- en: The sqlcmd utility lets you enter Transact-SQL statements, and is great to test
    if everything is working as expected. Follow instructions [here.](https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-linux-ver16&tabs=redhat-install%2Credhat-offline#install-tools-on-linux)
  prefs: []
  type: TYPE_NORMAL
- en: Loading packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following Julia packages will be needed. When using a Pluto notebook, it’s
    built-in package manager will automatically download and install them for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Check drivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Database Connectivity (ODBC) drivers allow us to make connections to the
    SQL server. Using the ODBC.jl package, we can check the currently available drivers
    on our system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/79ba7bdc20c596bace680f1525107983.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to install a driver once it’s location is known.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ec2324a8c4b1418f1604dfae6fe2805.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove a driver, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8e50a0b01d995734149f6c1d75b3a08.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Add connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a full [connection string](https://www.connectionstrings.com/microsoft-odbc-driver-17-for-sql-server/),
    we can now connect to the locally running SQL server, which was set up previously.
    The IP address, port, existing database name, user ID and password are needed.
    Note that in case the database name is unknown, we can connect to ‘master’ as
    this name always exists by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43d6843518f72b91eb4966564224e341.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: List all existing databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the **conn_master** object, we can now execute queries on the server.
    Let’s list all the databases.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b12897aec1ebe7ca3728c20742c3752.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Create a new database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create a new database, we should first check if the name already
    exists using the **list_db** function. If not, then we create it as shown below
    with ‘FruitsDB’ as an example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38c9b85cef2e6759f7497a9ed0cc6d5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Listing all the databases again, we can verify that ‘FruitsDB’ has now been
    created.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/783a8be5329eeaac3bb7cd78e9e7bfb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Create a new table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Server databases can contain a number of tables, which are simply an ordered
    collection of data. A table itself is a collection of rows, also known as records.
    Before we can start populating a table, we first need to create it within an existing
    database. As an example, let’s create a table called ‘Price_and_Origin’ within
    ‘FruitsDB’. This table will contain three columns — Name (String), Price (Float)
    and Origin (String). Note that VARCHAR(50) is used to denote [variable-size string](https://learn.microsoft.com/en-us/sql/t-sql/data-types/char-and-varchar-transact-sql?view=sql-server-ver16)
    data. 50 is the size in bytes, and for single-byte encoding it also represents
    the length of the string.
  prefs: []
  type: TYPE_NORMAL
- en: Add to new table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once a table exists, we can add data to it. Easiest way is to use DataFrame
    as the source. Remember that our table ‘Price_and_Origin’ expects three columns
    with name, price and origin. Therefore, we can use some dummy data as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f84705a5850c26c52191bde741cee681.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: To insert values, we can make use of **DBInterface.executemany** function**,**
    which allows passing multiple values in sequence. This can be done as shown in
    the function below. The finally clause ensures that database connection is closed
    using the **DBInterface.close!** function. This is generally a good practice,
    which helps avoid accidentally reusing the same connection for something else.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf068002c3482b0f0b3698eefddd53c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s verify if the database got populated as we had expected. We first set
    up a connection ‘conn_fruit’ to connect to ‘FruitsDB’ on the SQL Server. Then
    we can select all entries from the table ‘Price_and_Origin’ and pass it to a DataFrame
    sink.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e532b908cf421dfecc5680b4da0eb55.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Updating a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the same sequence as shown in the previous section, the database can
    now be updated with new data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1b92cfc1f67c25e134bb1f04d2d7e03.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding new fruits (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s verify if the new data is indeed present within the database.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0317a5287971204b0cdb3200a9d86b93.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the number of rows is now 7 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Removing duplicates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Re-executing the **add_to_fruit_table** function above again would add duplicate
    rows to the table.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/583d0dd94f71ffe004afbd3bd9dadc79.png)'
  prefs: []
  type: TYPE_IMG
- en: “Lichi” and “Pear” appear twice (Image from author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a [common table expression](https://learn.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?view=sql-server-ver16)
    (CTE), we can delete duplicate rows from a given table. The following function
    helps us achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cdc9edc978c6035ba5d1ad5e67d6e498.png)'
  prefs: []
  type: TYPE_IMG
- en: Remove duplicate entries (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Check if the rows are unique.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab3fa7b3fc090cdf11b356889be4eb90.png)'
  prefs: []
  type: TYPE_IMG
- en: Duplicate entries have been removed (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Delete records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is often needed to remove entries (matching a certain condition) from the
    table within a database. For example, we can remove all fruits whose price is
    > 95 as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/26b3a444264a35295e03a871ca471e44.png)'
  prefs: []
  type: TYPE_IMG
- en: Fruits with price > 95 have been removed (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Delete table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the DROP statement within **DBInterface.execute** function, a table can
    be deleted. Rest of the function will remain the same as **delete_rows.**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **DBInterface.execute** function accepts valid SQL statements as an input.
    It is therefore possible to execute all kinds of queries as outlined [here](https://www.w3schools.com/sql/sql_select.asp)
    in addition to what has already been presented. As shown earlier, the results
    of a query can be easily passed to a Julia DataFrame sink, which can then be used
    to perform additional operations.
  prefs: []
  type: TYPE_NORMAL
- en: The packages [ODBC.jl](https://github.com/JuliaDatabases/ODBC.jl/tree/main)
    and [DBInterface.jl](https://github.com/JuliaDatabases/DBInterface.jl) are being
    actively maintained and seem to integrate well with existing workflows especially
    if they involve the use of DataFrames. This opens up exciting new possibilities
    for performing data analysis and visualization using Julia. I hope you found this
    exercise useful. Thank you for your time! Connect with me on [LinkedIn](https://www.linkedin.com/in/negivikas/)
    or visit my [Web 3.0 powered website](https://vikasnegi.eth.limo/).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://odbc.juliadatabases.org/stable/#Getting-Started](https://odbc.juliadatabases.org/stable/#Getting-Started)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://juliadatabases.org/DBInterface.jl/dev/](https://juliadatabases.org/DBInterface.jl/dev/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.w3schools.com/sql/default.asp](https://www.w3schools.com/sql/default.asp)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/sql/?view=sql-server-linux-ver16](https://learn.microsoft.com/en-us/sql/?view=sql-server-linux-ver16)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
