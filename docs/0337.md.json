["```py\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\nfrom sklearn.datasets import make_blobs\n```", "```py\n# Generate sample data:\nX, y = make_blobs(n_samples=150, \n                  centers=3, \n                  cluster_std=.45, \n                  random_state = 0)\n```", "```py\n# Import required libraries:\nimport plotly.express as px\nimport pandas as pd\n\n# Convert to dataframe:\ndfBlobs = pd.DataFrame(X, columns = ['X','Y'])\n\n# Plot data:\nplot = px.scatter(dfBlobs, x=\"X\", y=\"Y\")\nplot.update_layout(   \n    title={'text':\"Randomly Generated Data\",\n           'xanchor':'center',\n           'yanchor':'top',\n           'x':0.5})\nplot.show()\n```", "```py\n# Determine optimal number of clusters:\nwcss = []\n\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, max_iter=5000, random_state=42)\n    kmeans.fit(dfBlobs)\n    wcss.append(kmeans.inertia_)\n\n# Prepare data for visualization:\nwcss = pd.DataFrame(wcss, columns = ['Value'])\nwcss.index += 1\n```", "```py\n# Plot the elbow curve:\nplot = px.line(wcss, y = \"Value\")\nplot.update_layout(   \n    title={'text':\"Within Cluster Sum of Squares or 'Elbow Chart'\",\n           'xanchor':'center',\n           'yanchor':'top',\n           'x':0.5},\n    xaxis_title = 'Clusters',\n    yaxis_title = 'WCSS')\nplot.show()\n```", "```py\n# Cluster the data:\nkmeans = KMeans(3)\nclusters = kmeans.fit_predict(dfBlobs)\n\n# Add the cluster labels to the dataframe:\nlabels = pd.DataFrame({'Cluster':clusters})\nlabeledDF = pd.concat((dfBlobs, labels), axis = 1)\n```", "```py\n# Generate plot:\n\n# Change Cluster column to strings for cluster visualization:\nlabeledDF[\"Cluster\"] = labeledDF[\"Cluster\"].astype(str)\n\n# Generate plot:\nplot = px.scatter(labeledDF, x=\"X\", y=\"Y\", color=\"Cluster\")\nplot.update_layout(\n    title={'text': \"Clustered Data\",\n           'xanchor': 'center',\n           'yanchor': 'top',\n           'x': 0.5})\nplot.show()\n```", "```py\nimport seaborn as sns\n\n# Load in the data - Seaborn's mpg data:\ndf = sns.load_dataset('mpg')\n\n# Filter for 4 and 8 cylinder cars:\ndf = df[(df['cylinders'] == 4) | (df['cylinders'] == 8)]\ndf = df.reset_index(drop=True)\n\n# Display dataframe head:\ndf.head(3)\n```", "```py\n# Plot the mpg and weight data:\n\nplot = px.scatter(df, x='weight', y='mpg',\n                  hover_data=['name', 'model_year'])\nplot.update_layout(\n    title={'text': \"Vehicle Fuel Efficiency\",\n           'xanchor': 'center',\n           'yanchor': 'top',\n           'x': 0.5})\nplot.show()\n```", "```py\n# Create DF copy for standardizing:\ndfCluster = df.copy()\n\n# Set the scaler:\nscaler = preprocessing.StandardScaler()\n\n# Normalize the two variables of interest:\ndfCluster[['weight', 'mpg']] = scaler.fit_transform(dfCluster[['weight', 'mpg']])\n\n# Create dataframe for clustering:\ndfCluster = dfCluster[['weight', 'mpg']]\n\n# View dataframe head:\ndfCluster.head(3)\n```", "```py\n# Determine optimal number of clusters:\n\nwcss = []\n\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, max_iter=5000, random_state=42)\n    kmeans.fit(dfCluster)\n    wcss.append(kmeans.inertia_)\n\n# Prepare data for visualization:\nwcss = pd.DataFrame(wcss, columns=['Value'])\nwcss.index += 1\n\n# Plot the elbow curve:\nplot = px.line(wcss)\nplot.update_layout(\n    title={'text': \"Within Cluster Sum of Squares or 'Elbow Chart'\",\n           'xanchor': 'center',\n           'yanchor': 'top',\n           'x': 0.5},\n    xaxis_title='Clusters',\n    yaxis_title='WCSS')\nplot.update_layout(showlegend=False)\nplot.show()\n```", "```py\n# Cluster the data:\nkmeans = KMeans(2)\nclusters = kmeans.fit_predict(dfCluster)\n\n# Add the cluster labels to the dataframe:\nlabels = pd.DataFrame({'Cluster': clusters})\nlabeledDF = pd.concat((df, labels), axis=1)\nlabeledDF['Cluster'] = labeledDF['Cluster'].astype(str)\n```", "```py\n# Generate plot:\n\nplot = px.scatter(labeledDF, x=\"weight\", y=\"mpg\", color=\"Cluster\",\n                  hover_data=['name', 'model_year', 'cylinders'])\nplot.update_yaxes(categoryorder='category ascending')\nplot.update_layout(\n    title={'text': \"Clustered Data\",\n           'xanchor': 'center',\n           'yanchor': 'top',\n           'x': 0.5})\nplot.show()\n```"]