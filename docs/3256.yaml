- en: Grouped Barplot With Error Bars in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/grouped-barplot-with-error-bars-in-r-ee87b112204d?source=collection_archive---------4-----------------------#2023-11-01](https://towardsdatascience.com/grouped-barplot-with-error-bars-in-r-ee87b112204d?source=collection_archive---------4-----------------------#2023-11-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A comprehensive guide to data preparation and visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@bhaskartigp?source=post_page-----ee87b112204d--------------------------------)[![Bhaskara
    Govinal Badiger](../Images/7c14288687e96546a7a5a3974c110dc8.png)](https://medium.com/@bhaskartigp?source=post_page-----ee87b112204d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ee87b112204d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ee87b112204d--------------------------------)
    [Bhaskara Govinal Badiger](https://medium.com/@bhaskartigp?source=post_page-----ee87b112204d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc2084c3fd87&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrouped-barplot-with-error-bars-in-r-ee87b112204d&user=Bhaskara+Govinal+Badiger&userId=c2084c3fd87&source=post_page-c2084c3fd87----ee87b112204d---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ee87b112204d--------------------------------)
    ¬∑10 min read¬∑Nov 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fee87b112204d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrouped-barplot-with-error-bars-in-r-ee87b112204d&user=Bhaskara+Govinal+Badiger&userId=c2084c3fd87&source=-----ee87b112204d---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fee87b112204d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrouped-barplot-with-error-bars-in-r-ee87b112204d&source=-----ee87b112204d---------------------bookmark_footer-----------)![](../Images/79cc7d6144d1b3e1aba099cd52a6b3ce.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Paulius Dragunas](https://unsplash.com/@paulius005?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Barplots are an essential and widely used visualization tool for several reasons.
    They are excellent choices for visualizing the relationship between *numeric*
    and *categorical* variables, making it easy to understand the differences between
    categories or groups. They can represent counts, frequencies, proportions, and
    percentages, making them versatile for various data types.
  prefs: []
  type: TYPE_NORMAL
- en: In R, we have the ability to analyze categorical data and represent it through
    barplots. Nevertheless, beginners venturing into R programming often encounter
    challenges when it comes to estimating means, standard errors, and creating grouped
    barplots with error bars. To counter these challenges one must have a basic understanding
    of data types, data structures, and the operations required for data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we start by creating a simple dataset to understand different
    kinds of data types and how to convert them into suitable formats for data analysis.
    Then, we will delve into the process of estimating means and standard errors.
    Subsequently, we will proceed to create a grouped barplot with error bars. To
    assist beginners, I will meticulously dissect the code, step by step, to ensure
    a thorough understanding of the programming process.
  prefs: []
  type: TYPE_NORMAL
- en: I assume our readers are familiar with the process of installing and loading
    R packages. If not, please refer to [**STHDA**](http://www.sthda.com/english/wiki/installing-and-using-r-packages)for
    guidance.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs jump right into creating the dataset, modifying it, and visualizing it.
    Begin by loading the necessary libraries as demonstrated below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The [**tidyverse**](https://brianward1428.medium.com/introduction-to-tidyverse-7b3dbf2337d5)
    is a core collection of R packages, which includes `[**dplyr**](https://r4ds.hadley.nz/data-transform.html)`
    for data manipulation and analysis, and`[**ggplot2**](https://r4ds.hadley.nz/data-visualize)`
    for data visualization. The [**ggthemes**](https://ggplot2.tidyverse.org/reference/ggtheme.html)provides
    alternative themes and theme components to style ggplot2 plots. The [**ggpubr**](https://rpkgs.datanovia.com/ggpubr/)
    offers `**ggsave()**` to save plots with customizable dimensions, resolution,
    and file formats. To explore these packages further, simply click on the hyperlinks
    provided.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a D**ataframe:**
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the code below `**data.frame()**` function initiates a dataframe named `**df**`
    with three columns: `**Animals**`, `**Category**`, and `**Counts**`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: üí° *Alternatively create the dataframe in Excel and import the file to R.*
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs view the dataframe `**df**` using `**view(**`) function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/91bfb3b436eacb1b445e852b6dbe356b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `**Animals**` column contains names of different kinds of animals. There
    are three unique animals in this column: ‚Äúcats‚Äù, ‚Äúdogs‚Äù, and ‚Äúcows‚Äù. We sampled
    each kind of animal four times, resulting in a total of 12 rows. The `**Category**`
    column classifies the animals as either ‚ÄúDomestic‚Äù or ‚ÄúStray‚Äù. There are six ‚ÄúDomestic‚Äù
    and six ‚ÄúStrays‚Äù. The `**Counts**`column represents the counts of each animal
    in the given ‚ÄòCategory‚Äô and ‚ÄòAnimals‚Äô columns.'
  prefs: []
  type: TYPE_NORMAL
- en: Data types and data manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In R, it‚Äôs crucial to understand the [**data type**](https://rpubs.com/STEMResearch/data-types-in-r)of
    the columns (variables) in the dataframe, because different operations and functions
    may be applied to different kinds of data types. In the `**df**` dataframe, `**Animals**`
    and`**Category**` columns have a **Character** data type and the `**Counts**`column
    has a **numeric** data type. Character data types are essential for working with
    text data, such as names, labels, descriptions, and textual information. Numeric
    data types represent numeric values, including integers and real numbers (floating-point
    values).
  prefs: []
  type: TYPE_NORMAL
- en: Let's get the summary of the dataframe using `**glimpse()**` function to know
    the data type of the variables in the dataframe `**df**`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can observe that the `**df**` dataframe consists of 12 rows (observations),
    and 3 columns (variables). Notably, the `**Animals**` and `**Category**` variables
    are identified as character data type, denoted as `**<chr>**.` The values within
    these variables are enclosed in double quotes, rendering them as character strings.
    However, it is interesting to note that the `**Counts**` variable is also identified
    as a character data type. This is unexpected since the values within this variable
    are, in fact, numerical, not character strings. This misclassification of data
    types could potentially lead to complications when conducting numerical operations.
    To address this issue and facilitate numerical operations, we must take the necessary
    step of converting the `**Counts**` variable into a numeric data type.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that when I initially created the dataframe `**df**`, I
    intentionally enclosed the numeric values in double quotes, rendering the `**Counts**`
    variable as a character data type. Now that we have a clear understanding of the
    dataframe‚Äôs structure, let‚Äôs move forward and resolve this issue. We will do so
    by converting the `**Counts**` variable within the `**df**` dataframe from its
    current character data type to a numeric data type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`**df$Counts**` selects the `**Counts**`column in the `**df**` data frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**as.numeric()**` converts the input to a numeric data type.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now the `**Counts**` variable is identified as numeric data type, denoted by
    `**<dbl>**` , often referred to simply as a ‚Äúdouble‚Äù. The values within this variable
    are not enclosed in quotes indicating they are numerical, not character strings.
  prefs: []
  type: TYPE_NORMAL
- en: '`**<dbl>**` *stands for a "double-precision floating-point number. It is a
    numerical data type used to store real numbers and perform arithmetic operations
    on real numbers, including decimals.*'
  prefs: []
  type: TYPE_NORMAL
- en: Estimating mean and standard error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code below creates a new dataframe named `**mean_df**` by performing data
    summarization and aggregation on an existing dataframe `**df**`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let‚Äôs break down the code step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: The pipe (`**%>%**`) operator takes the existing dataframe `**df**` and passes
    it to the next part of the code. It sets `**df**` as the input for subsequent
    operations. *In R, the* `**%>%**` *operator takes the result of one function on
    the left and passes it as the first argument to the next function on the right,
    allowing us to chain together a series of operations in a clear and sequential
    manner.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**group_by()**` function groups the dataframe by the `**Animals**` and
    `**Category**` columns, creating subgroups within the dataframe based on the unique
    combinations of these two variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**summarise()**` function estimates the mean and standard error and assigns
    them to new variables :`**mean**` and `**se**` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**mean()**` function computes the mean (average) of the `**Counts**` column
    for each subgroup created by the `**group_by()**` operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `**sd()**` function calculates the standard error (se) of the `**Counts**`
    column for each subgroup. The standard error is calculated by dividing the standard
    deviation (`**sd()**`) of the `Counts` column by the square root of the sample
    size (`**sqrt(n())**`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let‚Äôs take a look at the summary of the data frame `**mean_df**`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: All set! we now have four columns or variables, including two new variables,
    `**mean**` and `**se**` calculated for the `**Counts**` column based on our grouping
    criteria. Let‚Äôs proceed with data visualization using this new dataframe `**mean_df**`.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code below takes the data frame `**mean_df**` and passes it to `**ggplot2**`
    using `**%>%**` operator to create a grouped barplot assigned to the object ‚Äú**barplot**‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: üí°*Note that while the pipe operator (****%>%****) is useful for chaining together
    multiple operations in data manipulation and analysis, it cannot be used for adding
    layers within the ggplot2 function during the data visualization process. Instead,
    we use the* ***‚Äò+‚Äô*** *symbol as demonstrated above.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs break down the code step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: The `**aes()**` function, short for *‚Äòaesthetic‚Äô* is to specify how the variables
    in the dataset are mapped to visual aesthetics in the plot. In this case, it specifies
    that the x-axis should represent the `**Animals**` variable, the y-axis should
    represent the `**mean**` variable, and fill bar colors based on the `**Category**`
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**geom_col()**`calculates the height of each bar based on the values in
    the `**mean**` column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the breakdown of the parameters used in the `**geom_col()**` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**position = "dodge"**`: It specifies that the bars should be grouped side
    by side (dodged) based on the `**Category**` variable. This is what creates a
    grouped barplot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**width = 0.5**`: It determines the width of the bars. In this case, the bars
    have a width of 0.5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**alpha = 0.5**`: It controls the transparency of the bars. An alpha value
    of 0.5 makes the bars somewhat transparent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**color = "black"**`: It sets the border color of the bars to black.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**size = 0.1**`: It specifies the size of the border around the bars. In this
    case, the borders will be relatively thin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The combination of these parameters customizes the appearance of the bars in
    the barplot, making them thinner, somewhat transparent, with black borders, and
    arranged side by side for different categories, which can enhance the visual representation
    of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs look at the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1b2f9e27c78e668980507a77b0e47f06.png)'
  prefs: []
  type: TYPE_IMG
- en: Great! We‚Äôve successfully created a barplot, but the bars currently lack standard
    errors. Let‚Äôs incorporate standard errors into the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding standard errors to the bars and customizing bar colors**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First copy and paste the above code and then add `**geom_errorbar()**` function
    to it using ‚Äò**+**‚Äô symbol as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let‚Äôs break down the components used in the `**geom_errorbar()**` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**ymin**` and `**ymax**` defines the lower and upper values of the error bars
    based on the calculated mean and standard error.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`**position**` argument is set to `**position_dodge()**` for placing error
    bars side by side (dodged) and `**width = 0.5**` to set the dodge width. Play
    around with the width parameter to notice the changes in the bar position.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`**width = 0.2**` sets the width of the error bars. In this case, the error
    bars will have a width of 0.2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s look at the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2a40329b930210349e1dfdcc06e3e564.png)'
  prefs: []
  type: TYPE_IMG
- en: Great! We now created a grouped barplot with errorbars. This graph is nearly
    publication-ready, but a few minor adjustments can greatly enhance its appearance.
    For instance, you may have noticed a gap between the bars and the x-axis labels.
    Let‚Äôs remove it. Additionally, changing the bar colors, placing the figure legend
    inside the graph, and providing a predefined theme for clean and simple visuals
    will improve its overall presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating publication-quality graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let‚Äôs start by copying the above code and then adding additional layers to it
    using ‚Äò**+**‚Äô as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here we incorporated `**scale_y_continuous()**` **,** `**scale_fill_manual()**`
    **,** `**theme_par()**` **,** `**theme()**`functions that are part of the `**ggplot2**`
    package to the existing code.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the breakdown of the parameters used within these functions.
  prefs: []
  type: TYPE_NORMAL
- en: The `scale_y_continuous` allows us to modify various aspects of the y-axis,
    such as the range, breaks, labels, and more. In the above code the `**expand**`
    argument of `**scale_y_continuous()**` is set to expansion(0) to remove any padding
    around the y-axis limits, and the `**limits**` argument is set to `**c(0,100)**`
    to set the y-axis limits from 0 to 100.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**scale_fill_manual()**` allows us to manually specify the colors we want
    to use for filling different categories or levels of variables. Note that the
    fill aesthetic in the 2nd line of the code was set to `**fill = Category**`**.**
    Therefore, in this case, the argument`**values = c("blue", "gray")**`fills the
    colors of the bars based on the values within the `**Category**` **:** blue for
    `**"Domestic"**` and gray for `**"Stray‚Äù**`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**theme_par()**` allows us to customize the theme for the plot, which provides
    a clean white background and compact graphics. It has its own pros and cons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**legend.position**` argument `**theme()**` was set to `**c(0.2, 0.80)**`
    to specify the position of the legend within the plot. Play with these values
    to understand this argument better.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: üí° *The predefined themes such as* `**theme_par()**` *will override theme components
    applied afterward. We have added* `**theme(legend.position)**` *after the* `**theme_par()**`
    *function to address this issue.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bf6f3406a8e29a9853798f51fc52f15f.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is a visually appealing and publication-ready barplot with error bars.
    The graph effectively illustrates the variations in animal populations. In the
    ‚ÄòStray‚Äô category, dogs outnumber cats and cows, while in the ‚ÄòDomestic‚Äô category,
    cows clearly outnumber cats and dogs.
  prefs: []
  type: TYPE_NORMAL
- en: Saving plot for publication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code below utilizes the `**ggsave()**` function from the `**ggpubr**` library.
    To save a plot as an image, we need to specify the object to be saved (in this
    case, ‚Äú**barplot**‚Äù) and define the desired filename with the chosen graphic format.
    In this case, we have selected the filename ‚Äú**barplot_animals.tiff‚Äù,** which
    will save the plot as a TIFF image. Additionally, we have set the dimensions for
    `**width**` and `**height**` in inches, along with the resolution specified as
    `**dpi**` (dots per inch).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now you are all set to create publication-ready barplots with standard error
    bars. Enjoy the creative process and have a blast plotting your data! üéâ‚ú®
  prefs: []
  type: TYPE_NORMAL
