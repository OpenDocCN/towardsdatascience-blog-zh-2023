- en: How to get started with TensorFlow using Keras API and Google Colab
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-set-started-with-tensorflow-using-keras-api-and-google-colab-5421e5e4ef56?source=collection_archive---------0-----------------------#2023-01-19](https://towardsdatascience.com/how-to-set-started-with-tensorflow-using-keras-api-and-google-colab-5421e5e4ef56?source=collection_archive---------0-----------------------#2023-01-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Step-by-step tutorial to analyze human activity with neuronal networks
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jonas_dieckmann?source=post_page-----5421e5e4ef56--------------------------------)[![Jonas
    Dieckmann](../Images/e1f2d236e6bda6ec1e14fd5eaa9d205e.png)](https://medium.com/@jonas_dieckmann?source=post_page-----5421e5e4ef56--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5421e5e4ef56--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5421e5e4ef56--------------------------------)
    [Jonas Dieckmann](https://medium.com/@jonas_dieckmann?source=post_page-----5421e5e4ef56--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F1c8d1cf684f2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-set-started-with-tensorflow-using-keras-api-and-google-colab-5421e5e4ef56&user=Jonas+Dieckmann&userId=1c8d1cf684f2&source=post_page-1c8d1cf684f2----5421e5e4ef56---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5421e5e4ef56--------------------------------)
    ·11 min read·Jan 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5421e5e4ef56&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-set-started-with-tensorflow-using-keras-api-and-google-colab-5421e5e4ef56&user=Jonas+Dieckmann&userId=1c8d1cf684f2&source=-----5421e5e4ef56---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5421e5e4ef56&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-set-started-with-tensorflow-using-keras-api-and-google-colab-5421e5e4ef56&source=-----5421e5e4ef56---------------------bookmark_footer-----------)![](../Images/353e84cb61462300012ad7c85781491c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Image by [Serghei Trofimov](https://unsplash.com/@sergeytrofimov) on [Unsplash](https://unsplash.com/)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'This beginner tutorial aims to give a brief overview of the fundamentals of
    TensorFlow and to guide you through a hands-on project. The tutorial might be
    of value to you, if:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: you have built your first traditional machine learning models and now you are
    curious about how to get started with your first TensorFlow model.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: you have explored the basic concepts of TensorFlow already but you are looking
    for a practical challenge to improve your skills.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case you are completely new to data science or machine learning models, I
    recommend focusing on other tutorials first as it will be crucial to have a basic
    understanding first.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'This article is structured into three main sections:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '#1 Brief introduction to TensorFlow and Keras API'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Tutorial on how to set up TensorFlow using Google Colab (for free)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Hands-on project: Human activity classification'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '#1 Brief introduction to TensorFlow and Keras API'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are completely new to TensorFlow, I recommend the following video, where
    the main concepts and different layer structures are explained in a short but
    good way. This is not a comprehensive lecture, but it gives a good introduction
    to the topic itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: While TensorFlow is the underlying Machine Learning platform, Keras on the other
    side is an API that will help you to set up your models in a fast way and reduces
    the manual coding effort.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Keras is a deep learning API written in Python, running on top of the machine
    learning platform TensorFlow. It was developed with a focus on enabling **fast
    experimentation**. Being able to go from idea to result as fast as possible is
    key to doing good research. [[https://keras.io/about](https://keras.io/about/)]
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The development team states that Keras is:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple** — but not simplistic. Keras reduces developer *cognitive load* to
    free you to focus on the parts of the problem that matter.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexible** — Keras adopts the principle of *progressive disclosure of complexity*:
    simple workflows should be quick and easy, while arbitrarily advanced workflows
    should be *possible* via a clear path that builds upon what you’ve already learned.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Powerful** — Keras provides industry-strength performance and scalability:
    it is used by organizations and companies including NASA, YouTube, and Waymo.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*[again sourced from* [*https://keras.io/about*](https://keras.io/about/)*]*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Tutorial on how to set up TensorFlow using Google Colab (for free)'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good piece of advice to use TensorFlow is to run it on a Graphics Processing
    Unit (GPU) or Tensor Processing Unit (TPU) instead of a normal Central Processing
    Unit (CPU) accelerator. While simple models and calculations might still work
    using a CPU, you might notice that the full capability of TensorFlow can only
    be appreciated on graphical hardware.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The easiest and most straightforward way to make use of a GPU is the usage of
    [Google Colaboratory (“Colab”)](https://colab.research.google.com/) which is somewhat
    like “*a* *free Jupyter notebook environment that requires no setup and runs entirely
    in the cloud*.” While this tutorial claims more about the simplicity and advantages
    of Colab, there are drawbacks as limited GPU hours and reduced computing power
    compared to proper cloud environments. However, I believe Colab might not be a
    bad service to make the first steps with TensorFlow.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up a basic environment for TensorFlow within Colab you can follow the
    next few steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Colab中为TensorFlow设置基本环境，你可以按照以下几个步骤进行：
- en: Open [https://colab.research.google.com/](https://colab.research.google.com/)
    and register for a free account
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[https://colab.research.google.com/](https://colab.research.google.com/)并注册一个免费账户
- en: Create a new *notebook* within Colab
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Colab中创建一个新的*notebook*
- en: Select *Runtime* from the menu and *Change the runtime type*
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择*Runtime*并*更改运行时类型*
- en: Choose *GPU* from the *Hardware accelerator* options - click *save*
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*硬件加速器*选项中选择*GPU* - 点击*保存*
- en: '![](../Images/9b681b429296fef2ef10424b207c5d52.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b681b429296fef2ef10424b207c5d52.png)'
- en: The screenshot was taken by the author from [Google Colab](https://colab.research.google.com/)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这张截图由作者从[Google Colab](https://colab.research.google.com/)拍摄
- en: 'Now you can import TensorFlow and check that everything is set with the following
    few lines of code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以导入TensorFlow，并使用以下几行代码检查一切是否设置妥当：
- en: You should see as output now a version displayed (e.g. “2.5.0”) as well as a
    physical device message that indicates GPU usage. Your Notebook is now ready to
    use TensorFlow in practice!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能看到输出中显示一个版本（例如“2.5.0”）以及一个指示GPU使用的物理设备消息。你的Notebook现在可以实际使用TensorFlow了！
- en: '#3 Hands-on project: Human activity classification'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#3 实践项目：人类活动分类'
- en: The following tutorial aims to analyze a dataset on human activity classification.
    The dataset consists of time series recordings from the inertial sensors of smartphones
    that are carried by people performing different activities.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下教程旨在分析一个关于人类活动分类的数据集。该数据集由携带不同活动的人的智能手机惯性传感器记录的时间序列组成。
- en: Background & dataset information
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景与数据集信息
- en: 'It is interesting to understand if simple smartphone measurements could be
    used to classify the physical activity a human is doing. The six activity classes
    are the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 了解简单的智能手机测量是否可以用来分类人类正在进行的身体活动是很有趣的。六种活动类别如下：
- en: Walking
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 走路
- en: Walking upstairs
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上楼
- en: Walking downstairs
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下楼
- en: Sitting
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 坐着
- en: Standing
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 站立
- en: Laying
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 躺着
- en: 'A short video describing the measurement and the different activities can be
    found here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 描述测量和不同活动的短视频可以在这里找到：
- en: The outcome of such sensor-based classification models could be used by health
    applications or other smartphone apps to improve the user experience, to suggest
    activities based on the current recordings, or to track physical activities during
    the day.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基于传感器的分类模型的结果可以被健康应用程序或其他智能手机应用程序使用，以改善用户体验、根据当前记录建议活动或跟踪一天中的身体活动。
- en: 'The given dataset consists of measurements from the inertial sensors of smartphones
    that are carried by people performing different activities. In total, the dataset
    contains 10,299 entries and is split into 70% training data (7,352 entries) and
    30% test data (2,947 entries). The sensor signals (accelerometer and gyroscope)
    were pre-processed by applying noise filters and then sampled in fixed-width sliding
    windows. Each signal was recorded for the three coordinates (x, y, z) and can
    be seen as time series recording having 128 timestamps with their corresponding
    value. The target column contains the activity labels: WALKING, WALKING_UPSTAIRS,
    WALKING_DOWNSTAIRS, SITTING, STANDING, LAYING.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的数据集包含来自智能手机惯性传感器的测量，这些智能手机由执行不同活动的人携带。数据集总共有10,299条记录，分为70%训练数据（7,352条记录）和30%测试数据（2,947条记录）。传感器信号（加速度计和陀螺仪）经过噪声过滤器预处理，然后在固定宽度滑动窗口中采样。每个信号记录了三个坐标（x，y，z），可以视为具有128个时间戳及其对应值的时间序列记录。目标列包含活动标签：WALKING,
    WALKING_UPSTAIRS, WALKING_DOWNSTAIRS, SITTING, STANDING, LAYING。
- en: All features of the training and test dataset are numeric (float), normalized,
    and bounded within -1 and 1\. Two example measurements along the 128 timestamps
    are present in Figure 1\. It is shown that each human activity has its characteristics
    across the three coordinates and over time. Hence, there is a chance to identify
    patterns and trends within the time series that indicates the activity class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 训练和测试数据集的所有特征都是数字（浮点数），经过归一化处理，并限制在-1和1之间。图1中展示了沿128个时间戳的两个示例测量。显示出每个人类活动在三个坐标和时间上具有其特征。因此，有可能识别时间序列中的模式和趋势，这些模式和趋势指示活动类别。
- en: More information about the dataset and the background can be found in the readme
    file or [on this website](https://archive.ics.uci.edu/ml/datasets/human+activity+recognition+using+smartphones).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据集和背景的更多信息可以在readme文件中找到，或[在此网站上](https://archive.ics.uci.edu/ml/datasets/human+activity+recognition+using+smartphones)。
- en: 'Step 01: Initial load of data & required libraries'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with the project, it is required to load the dataset into the
    Colab environment. Don’t worry too much about the code below, it just moves all
    the required files into your workspace:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Not surprisingly, we need to import some required libraries to make our life
    easier. A vital library here is *of course* TensorFlow itself:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify our tutorial, we will use only the available body data from the
    inertial signals. The dataset is already split into training (7352 entries) and
    test (2947 entries) datasets along 128-time series measurements and across 3 coordinates.
    To get proper datasets in the format of (n, 128,3), we can use the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'One last important step for preparation is the transformation of our target
    variables into a *one-hot-encoded* measurement. Instead of having a numerical
    value that indicates the categories (e.g. 0 = WALKING), we end up with having
    arrays, that contain the probability for each of the available categories (e.g.
    [1, 0, 0, 0, 0, 0] = WALKING or [0, 0, 0, 1, 0, 0] = SITTING) where there is a
    100% probability for the corresponding category in this case. This is important
    as TensorFlow will calculate the probability for each of the possible categories
    for us. Hence, we need to prepare the training data accordingly. The Keras API
    has a simple built-in function designed for that requirement. You will notice,
    that the shape of the target variable has changed from (n,) to (n, 6):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 02: Plot some example time series'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we will ignore a proper exploratory analysis section as we
    want to focus more on the usage of TensorFlow. However, it might make sense to
    plot some example time series at this stage, as it will give us a better understanding
    of the data that we would like to analyze for classification.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use the following code to plot some random measurements from the
    dataset. I have selected measurements 992 (walking) and 2481 (laying) to demonstrate
    the differences in the data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The output can be seen below. You might identify already some differences in
    the human body measurements, depending on the underlying activity. Finally, it
    is our hope and chance to run a neuronal network model on the data that might
    predict our activity classes well. Let’s see!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9804705a088a2015ab802c038476e947.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: The screenshot was taken by the author from [Google Colab](https://colab.research.google.com/)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a39669469c55a96d9a290ec1f892ecf.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: The screenshot was taken by the author from [Google Colab](https://colab.research.google.com/)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 03: Build and train a neuronal network using Keras API'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build and train neuronal networks in TensorFlow you need to split your available
    *training* data into *training and validation* subsets. TensorFlow will then use
    both to train the model and assess the progress using the validation loss and
    validation accuracy. You can vary the size of the accuracy data set but I used
    20% of the original training data in this case. The random state can be set to
    reproduce recognizable data splits at different times.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'A best practice to monitor your model development through the training process
    is to set up *TensorBoard.* You can prepare your notebook with the following code,
    where you load the extension and create a *log writer*:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the neuronal network, you first need to decide what type of network
    you want to build. The simplest architecture is a linear stack of layers called
    a sequential model. You can create a sequential model by passing a list of layer
    instances to the constructor. To get started, you initiate your model:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From this point, it is up to you to add any layers you would like to use. There
    exist good tutorials on the web that describe the different functionality of the
    layers. For this tutorial, we will only guide you through a simple working setup
    to let you run your first model successfully. Feel free to add and modify the
    architecture to beat my accuracy!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we add the **input layer** having the dimensions of our data set (128,3):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Secondly, we add a **one-dimensional convolutional layer** where we can set
    parameters for the number of filters and the kernel size. This layer will be followed
    by a **Batch Normalization layer** that will transform inputs so that they are
    standardized, meaning that they will have a mean of zero and a standard deviation
    of one
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Thirdly, we add a **ReLu layer** and a **Global Average Pooling layer**. Finally,
    we need a **Dense layer** that activates our network into a six-class category
    output. Since we have a classification problem, we use the **softmax activation**
    function with six units (as we have six categories).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To train the model, we need to compile the model first with an appropriate optimizer.
    For our tutorial, I have selected the Adam optimizer where you can vary the learning
    rate.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To fit the model, we need to decide on how many epochs and on what batch size
    we want to run it. An epoch is the time step that is incremented every time it
    has gone through all the samples in the training set. The batch size is the number
    of data entries for every batch. To link our model to the TensorBoard monitoring,
    we add a callback and set the log directory.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you run the code, you will see some output below your cell that gives
    you an indication of every training epoch. In TensorBoard you will be able to
    see the increasing accuracy as well as the decreasing loss for both, the training
    and the validation data. Once the training has run through all epochs it will
    stop automatically. The whole code for the model fitting is stated below:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Let us now try to understand what we have built and how the model developed
    over time during the training process. As you can see in the below screenshots,
    there is a significant improvement along the first 20 to 30 epochs and a moderate
    improvement afterward. The blue line indicates the accuracy and the loss for the
    training data set. The red line represents the validation data.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fb8b6fdab2383445ab9fde605df3eb1.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: The screenshot was taken by the author from [Google Colab](https://colab.research.google.com/)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/540c177f0a4ab914878eb15fc248191b.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: The screenshot was taken by the author from [Google Colab](https://colab.research.google.com/)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, we did not do too badly and achieved a validation accuracy of 85.38%.
    A comparable development between training and validation loss indicates a non-overfitted
    training procedure. However, there is a chance to improve our model further. Feel
    free to explore this on your own. Some ideas are the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: play with the number of epochs, the batch size, and the learning rate
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modify the amount of filter and kernel size in the Conv1D layer
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add more layers and play around with different architectures
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add the other data set to the model (besides the body data only)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, it is always the last step to assess the accuracy of the model on the
    test data set. So far, we trained the model using only the training and validation
    data. To apply our final model to the test data set you can use the code below.
    We calculate the probabilities for each of the six classes using our model. Afterward,
    we take the maximum probability per row and identify therefore the discrete class
    for that row.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: The test accuracy in my approach showed 84.42% and is therefore a bit lower
    than the validation accuracy, but on a similar level to the training accuracy.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations: you applied your first neuronal network using TensorFlow!'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '*Please note that you will achieve different accuracy and loss values as TensorFlow
    cannot be reproduced in the same way. However, I expect your values to be around
    a range between 75% and 90%.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea of the above tutorial was to give you a practical hands-on idea to
    get started with TensorFlow and the Keras API. I am aware that it is not even
    close to a proper explanation or detailed description of the features. However,
    I hope this might *help some beginners to run their first model on their own*
    and to understand the basic pieces of the puzzle around TensorFlow.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there is so much more to explore. Try to beat our initial accuracy
    achievements and drop a comment with your achievement!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jonas_dieckmann?source=post_page-----5421e5e4ef56--------------------------------)
    [## Jonas Dieckmann - Medium'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Jonas Dieckmann on Medium. analytics manager & product owner
    @ philips | passionate and writing about…
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@jonas_dieckmann?source=post_page-----5421e5e4ef56--------------------------------)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: I hope you find it useful. Let me know your thoughts! And feel free to connect
    on LinkedIn [https://www.linkedin.com/in/jonas-dieckmann/](https://www.linkedin.com/in/jonas-dieckmann/)
    and/or to follow me here on medium.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得有用。告诉我你的想法！也欢迎在 LinkedIn 上与我联系 [https://www.linkedin.com/in/jonas-dieckmann/](https://www.linkedin.com/in/jonas-dieckmann/)
    或在 Medium 上关注我。
- en: 'See also some of my other articles:'
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见我其他的一些文章：
- en: '[](/case-study-applying-a-data-science-process-model-to-a-real-world-scenario-93ae57b682bf?source=post_page-----5421e5e4ef56--------------------------------)
    [## Case Study: Applying a Data Science Process Model to a Real-World Scenario'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/case-study-applying-a-data-science-process-model-to-a-real-world-scenario-93ae57b682bf?source=post_page-----5421e5e4ef56--------------------------------)
    [## 案例研究：将数据科学过程模型应用于现实世界场景'
- en: Development of a machine learning model for materials planning in the supply
    chain
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 供应链材料规划中的机器学习模型开发
- en: 'towardsdatascience.com](/case-study-applying-a-data-science-process-model-to-a-real-world-scenario-93ae57b682bf?source=post_page-----5421e5e4ef56--------------------------------)
    [](/introduction-to-ica-independent-component-analysis-b2c3c4720cd9?source=post_page-----5421e5e4ef56--------------------------------)
    [## Introduction to ICA: Independent Component Analysis'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/case-study-applying-a-data-science-process-model-to-a-real-world-scenario-93ae57b682bf?source=post_page-----5421e5e4ef56--------------------------------)
    [](/introduction-to-ica-independent-component-analysis-b2c3c4720cd9?source=post_page-----5421e5e4ef56--------------------------------)
    [## ICA简介：独立成分分析
- en: Have you ever found yourself in a situation where you were trying to analyze
    a complex and highly correlated data set…
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你是否曾经遇到过需要分析一个复杂且高度相关的数据集的情况……
- en: towardsdatascience.com](/introduction-to-ica-independent-component-analysis-b2c3c4720cd9?source=post_page-----5421e5e4ef56--------------------------------)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/introduction-to-ica-independent-component-analysis-b2c3c4720cd9?source=post_page-----5421e5e4ef56--------------------------------)
- en: References
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Reyes-Ortiz,Jorge, Anguita,Davide, Ghio,Alessandro, Oneto,Luca & Parra,Xavier.
    (2012). Human Activity Recognition Using Smartphones. UCI Machine Learning Repository
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Reyes-Ortiz, Jorge, Anguita, Davide, Ghio, Alessandro, Oneto, Luca & Parra,
    Xavier. (2012). 使用智能手机进行人类活动识别。UCI 机器学习库
- en: This used dataset is licensed under a [Creative Commons Attribution 4.0 International](https://creativecommons.org/licenses/by/4.0/legalcode)
    (CC BY 4.0) license. This allows for the sharing and adaptation of the datasets
    for any purpose, provided that the appropriate credit is given.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本数据集使用了[知识共享署名 4.0 国际](https://creativecommons.org/licenses/by/4.0/legalcode)（CC
    BY 4.0）许可证。这允许出于任何目的共享和改编数据集，前提是给予适当的署名。
- en: For further information please visit [this site](https://archive-beta.ics.uci.edu/dataset/240/human+activity+recognition+using+smartphones).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请访问[这个网站](https://archive-beta.ics.uci.edu/dataset/240/human+activity+recognition+using+smartphones)。
