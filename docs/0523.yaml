- en: Equal-size spectral clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/equal-size-spectral-clustering-cce65c6f9ba3?source=collection_archive---------2-----------------------#2023-02-06](https://towardsdatascience.com/equal-size-spectral-clustering-cce65c6f9ba3?source=collection_archive---------2-----------------------#2023-02-06)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A modification of this popular algorithm that builds clusters balanced in the
    number of points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://anamabo3.medium.com/?source=post_page-----cce65c6f9ba3--------------------------------)[![Carmen
    Adriana Martínez Barbosa, PhD.](../Images/caad66f044af1131e17dc28ea2f48863.png)](https://anamabo3.medium.com/?source=post_page-----cce65c6f9ba3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cce65c6f9ba3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cce65c6f9ba3--------------------------------)
    [Carmen Adriana Martínez Barbosa, PhD.](https://anamabo3.medium.com/?source=post_page-----cce65c6f9ba3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa0526bfe8d0e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fequal-size-spectral-clustering-cce65c6f9ba3&user=Carmen+Adriana+Mart%C3%ADnez+Barbosa%2C+PhD.&userId=a0526bfe8d0e&source=post_page-a0526bfe8d0e----cce65c6f9ba3---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cce65c6f9ba3--------------------------------)
    ·7 min read·Feb 6, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcce65c6f9ba3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fequal-size-spectral-clustering-cce65c6f9ba3&user=Carmen+Adriana+Mart%C3%ADnez+Barbosa%2C+PhD.&userId=a0526bfe8d0e&source=-----cce65c6f9ba3---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcce65c6f9ba3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fequal-size-spectral-clustering-cce65c6f9ba3&source=-----cce65c6f9ba3---------------------bookmark_footer-----------)![](../Images/df096faa71e7869134449b85e5f2fd07.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Equal-size clustering of restaurants in Amsterdam. All Images were created by
    the author.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering is a methodology used to group data points containing similar features
    among them. It is broadly used in exploratory data analysis and it has proven
    to be very important in many applications such as pattern recognition, market
    and customer segmentation, recommendation systems, data compression, and biological
    data analysis, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the extensive number of clustering algorithms, none of them generate
    clusters balanced in the number of points. Such equal-size clusters are very important
    in some fields, for instance, in the last-mile delivery sector where a large number
    of orders can be aggregated into equal-size groups with the aim to improve the
    delivery routes and to maximize vehicle capacity utilization.
  prefs: []
  type: TYPE_NORMAL
- en: Given the need to have an equal-size clustering, a few colleagues and I expanded
    the so-called [spectral clustering](https://en.wikipedia.org/wiki/Spectral_clustering)
    to generate clusters balanced in the number of points. This new algorithm constructs
    clusters — with a similar number of points — based on the geographical information
    of the data points.
  prefs: []
  type: TYPE_NORMAL
- en: The full code can be found in this [GitHub repository](https://github.com/anamabo/Equal-Size-Spectral-Clustering).
    It is meant to contribute to the data science community. Give it a try if you
    need to create equal clusters of points on a map!
  prefs: []
  type: TYPE_NORMAL
- en: 'Equal-size spectral clustering: The algorithm'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The equal-size clustering is composed of three steps: Cluster initialization,
    computation of each cluster’s neighbors, and balancing the points in each cluster.
    Let’s review each of them in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Clustering initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first step, we create clusters by using [Scikit-learn’s implementation
    of the spectral clustering algorithm](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralClustering.html#sklearn.cluster.SpectralClustering).
    Spectral clustering is very powerful at aggregating spatial data because it identifies
    communities of nodes in a graph based on the edges connecting them. The spectral
    clustering algorithm is particularly useful at clustering points that follow a
    circular symmetry. If you are interested in knowing more about this method, you
    can read this awesome post written by William Fleshman:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/spectral-clustering-aba2640c0d5b?source=post_page-----cce65c6f9ba3--------------------------------)
    [## Spectral Clustering'
  prefs: []
  type: TYPE_NORMAL
- en: Foundation and Application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/spectral-clustering-aba2640c0d5b?source=post_page-----cce65c6f9ba3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two hyperparameters needed to do the cluster initialization: `nclusters`*,*
    which isthe number of desired clusters, and `nneighbors`*,* which is the number
    of neighbors per data point. This last parameter is used by spectral clustering
    to construct the affinity matrix. Good values of `nneighbors`are between 7% and
    15% of the data points.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e6f34b8d39502322e755e6c5b352a7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 1: Create clusters by means of the spectral clustering algorithm. These
    clusters are not equal in the number of points.'
  prefs: []
  type: TYPE_NORMAL
- en: Computation of each cluster’s neighbors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the clusters are created, the second step of the algorithm is computing
    each cluster’s neighbors. How is this calculation made? By estimating the mode
    of the cluster labels of every data point’s nearest neighbors. For example, if
    point *x* belongs to cluster *A* and the majority of its nearest neighbors belong
    to cluster *B* means that cluster *B* is a neighbor of cluster *A.*
  prefs: []
  type: TYPE_NORMAL
- en: The computation of each cluster’s neighbors is extremely important because the
    balancing of clusters is made by exchanging points among neighboring clusters.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f193ec0ad84298e84cac32883213929.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 2: Left panel: Estimating the neighbors of each cluster. In this example,
    we can see that clusters A and B are neighbors of cluster C. Right panel: The
    balancing of clusters is made by exchanging points among neighboring clusters.'
  prefs: []
  type: TYPE_NORMAL
- en: Balancing the points on each cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last step of the algorithm is balancing the points on each cluster. As explained
    above, we do that by exchanging points among neighboring clusters. Big clusters
    transfer points to smaller neighboring clusters. In the balancing, we aim at making
    the cluster sizes roughly equal to *N /* `ncluster`, where *N* is the total number
    of data points.
  prefs: []
  type: TYPE_NORMAL
- en: To balance the clusters in size, we define the hyperparameter `equity_fraction`.
    The `equity_fraction` is a number defined in the interval (0,1] and it constrains
    how equal the resulting clusters must be. If `equity_fraction` is zero, the clusters
    will keep the same initial size. If`equity_fraction` is one, the resulting clusters
    will have sizes roughly equal to *N /* `ncluster`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1062512ad4d5b3f02ba13e02d345b4e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: The final cluster size depends on the equity_fraction. Left: The clusters
    keep their initial size if equity_fraction is zero. Right: The clusters have roughly
    the same number of points if equity_fraction is one.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make a small parenthesis to define a quantity called *cluster dispersion*.
    Cluster dispersion is defined as the standard deviation of the points’ distances
    within a cluster. You can think of it as a slightly modified version of the within-cluster
    distance.
  prefs: []
  type: TYPE_NORMAL
- en: The `equity_fraction` affects the initial cluster dispersion because the exchange
    of points increases the distances among the points within a cluster. In this case,
    I advise you to use an optimization algorithm to find the optimal cluster hyperparameters
    that minimize cluster dispersion. In the next section, I mention how you can get
    the cluster dispersion out of the Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Other functionalities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**It is important to remember that equal-size spectral clustering can be used
    to create aggregations of spatial points**. [The repository](https://github.com/anamabo/Equal-Size-Spectral-Clustering)
    comes with a plotting functionality that can be used in cases where you have the
    coordinates of the data points. In the next section, we’ll see this functionality
    in action.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use case: Clustering of restaurants in Amsterdam'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that you are the owner of a farm in The Netherlands and you want to
    deliver your fresh high-quality food to a large fraction of restaurants located
    in Amsterdam. You have 6 vehicles with the same capacity, which means that they
    are able to deliver roughly to the same amount of restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: In order to fully utilize the capacity of the vehicles, you can use equal-size
    clustering to group the restaurants such that every vehicle does not travel too
    much from one restaurant to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first read the location of the restaurants:'
  prefs: []
  type: TYPE_NORMAL
- en: The file *restaurants_in_amsterdam.csv* contains a list of restaurant locations
    within a distance of 8 km around Amsterdam’s central station. You can find this
    file in the folder *datasets* in the [GitHub repository](https://github.com/anamabo/Equal-Size-Spectral-Clustering).
  prefs: []
  type: TYPE_NORMAL
- en: From the locations listed in the `coords` data frame, it’s possible to estimate
    a matrix that contains the travel distance between each pair of points. The shape
    of this matrix is (n_samples, n_samples), and it must be symmetric. **This matrix
    is the input received by the equal-size clustering.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run the equal-size spectral clustering. It’s as easy as calling
    the class `SpectralEqualSizeClustering`:'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we create 6 clusters. We select the number of neighbors `nneighbors`
    to be 10% of the number of points in the input dataset. As we want clusters as
    equal as possible, we set the `equity_fraction` to 1.
  prefs: []
  type: TYPE_NORMAL
- en: You can see how the cluster label of each data point is obtained by calling
    the `fit` method. **Important note:** A function to predict the cluster labels
    for points that weren’t in the original data is not implemented yet. I encourage
    you to develop this functionality if you find this code useful for your work!
  prefs: []
  type: TYPE_NORMAL
- en: 'The cluster labels obtained above can be added to the data frame `coords` to
    plot the resulting clusters on a map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By running the code above, we obtain an interactive plot containing all the
    clusters, as shown in the figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/572519a10fafc61245b48c27cad8d5d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Clusters created with the equal-size spectral clustering code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In that plot, you can select each cluster to visualize it separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d4c30467f2d84701c5e34a40ece74a9.png)'
  prefs: []
  type: TYPE_IMG
- en: The optimization of hyperparameters was not needed in the use case explained
    above. However, as I mentioned before, it is possible to use an optimization method
    if required. In this case, you can use as an optimization metric the attribute
    `clustering.total_cluster_dispersion`, which is the sum of all cluster dispersions.
    By minimizing this quantity,the resulting clusters will be more compact.
  prefs: []
  type: TYPE_NORMAL
- en: Take home messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this blog, I presented a modification of the spectral clustering code that
    generates clusters balanced in the number of points. This algorithm can be used
    to generate equal aggregations of spatial points, and it might also be useful
    in improving some processes in the last-mile delivery sector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important considerations of equal-size spectral clustering are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The input data must be a symmetric distance matrix associated with the coordinates
    of the data points.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hyperparameters of the clustering code are the number of desired clusters
    (`nclusters`); the number of neighbors per data point (`nneighbors`), and a fraction
    that determines how equal in size the clusters must be (`equity_fraction`). You
    can use any optimization algorithm to find the best parameters that minimize the
    total cluster dispersion (`total_cluster_dispersion`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The equal-size clustering might be used for non-spatial data as well, however,
    it has not been tested for this purpose. If you want to experiment with it, define
    a metric to create the symmetric distance matrix that is needed by the code as
    input. Be sure to normalize or standardize your variables first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code doesn’t have a `prediction` method yet, but you are welcome to contribute
    if you find this code useful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I hope you enjoyed this post. Once more, thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '*Credits: The equal-size spectral clustering was developed in collaboration
    with Mor Verbin, Lilia Angelova, and Ula Grzywna. Such an amazing data team!*'
  prefs: []
  type: TYPE_NORMAL
