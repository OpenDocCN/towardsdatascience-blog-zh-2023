- en: Kernel Density Estimator explained step by step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/kernel-density-estimation-explained-step-by-step-7cc5b5bc4517?source=collection_archive---------0-----------------------#2023-08-15](https://towardsdatascience.com/kernel-density-estimation-explained-step-by-step-7cc5b5bc4517?source=collection_archive---------0-----------------------#2023-08-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Intuitive derivation of the KDE formula
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jaroslaw.drapala?source=post_page-----7cc5b5bc4517--------------------------------)[![Jaroslaw
    Drapala](../Images/34de3c52fc32005e36930135254ae45e.png)](https://medium.com/@jaroslaw.drapala?source=post_page-----7cc5b5bc4517--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7cc5b5bc4517--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7cc5b5bc4517--------------------------------)
    [Jaroslaw Drapala](https://medium.com/@jaroslaw.drapala?source=post_page-----7cc5b5bc4517--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fce6da4a69810&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fkernel-density-estimation-explained-step-by-step-7cc5b5bc4517&user=Jaroslaw+Drapala&userId=ce6da4a69810&source=post_page-ce6da4a69810----7cc5b5bc4517---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7cc5b5bc4517--------------------------------)
    ·7 min read·Aug 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7cc5b5bc4517&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fkernel-density-estimation-explained-step-by-step-7cc5b5bc4517&user=Jaroslaw+Drapala&userId=ce6da4a69810&source=-----7cc5b5bc4517---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7cc5b5bc4517&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fkernel-density-estimation-explained-step-by-step-7cc5b5bc4517&source=-----7cc5b5bc4517---------------------bookmark_footer-----------)![](../Images/9ce555ee5b172c4a6056c86b1a8bf238.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Marcus Urbenz](https://unsplash.com/@marcusurbenz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get a sense of the data distribution, we draw probability density functions
    (PDF). We are pleased when data fit well to a common density function, such as
    normal, Poisson, geometrical, etc. Then, [the maximum likelihood approach](https://medium.com/@roiyeho/maximum-likelihood-855b6df92c43)
    can be used to fit the density function to the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9727efdceadb3d0de6c12f85536d769b.png)'
  prefs: []
  type: TYPE_IMG
- en: Unfortunately, the data distribution is sometimes too irregular and does not
    resemble any of the usual PDFs. In such cases, the Kernel Density Estimator (KDE)
    provides a rational and visually pleasant representation of the data distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55ed5a8ef76964057befeb52ed54b4f9.png)'
  prefs: []
  type: TYPE_IMG
- en: I’ll walk you through the steps of building the KDE, relying on your intuition
    rather than on a rigorous mathematical derivation.
  prefs: []
  type: TYPE_NORMAL
- en: The Kernel Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key to understanding KDE is to think of it as **a function made up of building
    blocks**, similar to how different objects are made up of Lego bricks. The distinctive
    feature of KDE is that it employs only **one type of brick, known as the kernel**
    (‘*one brick to rule them all*’). The key property of this brick is the ability
    to shift and stretch/shrink. **Each datapoint is given a brick, and KDE is the
    sum of all bricks**.
  prefs: []
  type: TYPE_NORMAL
- en: KDE is a composite function made up of one kind of building block referred to
    as a kernel function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The kernel function is evaluated for each datapoint separately, and these partial
    results are summed to form the KDE.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first step toward KDE is to focus on just one data point. What would you
    do if asked to create a PDF for a single data point? To begin, take *x =* 0\.
    The most logical approach is to use a PDF that is peaking precisely over that
    point and decaying with distance from it. The function
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b95a4d8925dcd7f3001de8c9df49d10d.png)'
  prefs: []
  type: TYPE_IMG
- en: would do the trick.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e4297c5a5082fbdcf511acc4f602c40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, because PDF is supposed to have a unit area under the curve, we must
    rescale the result. Therefore, the function has to be divided by the square root
    of 2*π* and stretched by a factor of √2 ([3Blue1Brown](https://www.youtube.com/watch?v=cy8r7WSuT1I)
    provides an excellent derivation of these factors):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a0f3910b897a87fdeacee38ab71e7c0f.png)![](../Images/94b03a28acaf0fae5514df9fad8818ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ultimately, we arrive at our Lego brick, known as *the Kernel function*, which
    is a valid PDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fcb62813a68d1265cb616518c6b566a1.png)'
  prefs: []
  type: TYPE_IMG
- en: This Kernel is equivalent to a Gaussian distribution with zero mean and unit
    variance.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s play with it for a while. We’ll start by learning to shift it along the
    *x* axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a single data point *xᵢ -* the *i*-th point belonging to our dataset *X*.
    The shift can be accomplished by subtracting the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a9cf982c49985749ea96856cbc1c72d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To make the curve wider or narrower we can just throw a constant *h* (the so
    called kernel bandwidth) in the argument. It is usually introduced as a denominator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16837ece9123c927a9595b6952a4864a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, the area under the kernel function is multiplied by *h* as a result.
    Therefore, we have to restore it back to the unit area by dividing by *h*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5976c28b7ccd354332bd8c2b3d77f101.png)'
  prefs: []
  type: TYPE_IMG
- en: You can choose whatever *h* value you want. Here’s an example of how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2db21e60e2c4ef18a41ee329b56d1810.png)'
  prefs: []
  type: TYPE_IMG
- en: The higher the *h*, the wider the PDF. The smaller the *h*, the narrower the
    PDF.
  prefs: []
  type: TYPE_NORMAL
- en: Kernel Density Estimator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consider some dummy data to see how we can expand the method to multiple points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the first data point, we simply use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76ade26c8f4451c5675e9a8ab1e9d04c.png)![](../Images/c529122fb2bdaf106efe93f4749748df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can do the same with the second datapoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5418cbd3a68ec9ff3b506041af67df1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get a single PDF for the first two points, we must combine these two separate
    PDFs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c38e6eb0d1eedbd4f3575f4db11b3fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Because we added two PDFs with unit area, the area under the curve becomes
    2\. To get it back to one, we divide it by two:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/222b4b85cbd46389deb671f696c56a5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Although the complete signature of function *f* could be used for precision:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/411e11fdcd8dfbad6b7496173c48f737.png)'
  prefs: []
  type: TYPE_IMG
- en: we’ll just use *f*(*x*) to make the notation unclutter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how it works for two datapoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdc6e06fe8d2ca7d60ad82e6b7fc96c8.png)![](../Images/99ac4a4c5b28f2804f35712a5637c1bc.png)'
  prefs: []
  type: TYPE_IMG
- en: And the final step toward KDE is to take into account *n* datapoints
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/253f1f689d5b715cba63a422678651e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Kernel Density Estimator is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/906d76e6d734246ec1dd0af1be58f730.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s have some fun with our rediscovered KDE.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4b18ce69d8f4b3dfd36358ff651caf2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we use the gaussian kernel, but I encourage you to try another kernels.
    For a review of common families of kernel functions, see [this paper](https://www.scirp.org/pdf/ojapps_2013012216494836.pdf).
    However, when the dataset is large enough, the type of kernel has no significant
    effect on the final output.
  prefs: []
  type: TYPE_NORMAL
- en: KDE with Python libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [seaborn library](https://seaborn.pydata.org/generated/seaborn.kdeplot.html)
    employs KDE to offer nice visualizations of data distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2faef6edc5dc3c7e206e31a0429e0b3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Scikit learn offers the [KernelDensity](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KernelDensity.html)
    function to do a similar job.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1ec9dc4ab13b081286e2d6cffcb707ac.png)'
  prefs: []
  type: TYPE_IMG
- en: The Scikit learn solution has the advantage of being able to be used as a generative
    model to generate synthetic data samples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/698cfcd9af429e797c8446bb76e7f33d.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize, KDE enables us to create a visually appealing PDF from any data
    without making any assumptions about the underlying process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The distinguishing features of KDE’s:'
  prefs: []
  type: TYPE_NORMAL
- en: this is a function made up of a single type of building blocks termed **kernel
    function**;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: this is **a nonparametric estimator**, which means that its functional form
    is determined by the datapoints;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the shape of the generated PDF is heavily influenced by the value of the **kernel
    bandwidth** *h*;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to fit to the dataset, **no optimization technique is required**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application of KDE to multidimensional data is simple. But this is a topic
    for another story.
  prefs: []
  type: TYPE_NORMAL
- en: '***Unless otherwise noted, all images are by the author.***'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] S. Węglarczyk*,* [Kernel density estimation and its application](https://www.itm-conferences.org/articles/itmconf/pdf/2018/08/itmconf_sam2018_00037.pdf)
    (2018), ITM web of conferences, vol. 23, EDP Sciences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Y. Soh, Y. Hae, A. Mehmood, R. H. Ashraf, I. Kim: Performance [Evaluation
    of Various Functions for Kernel Density Estimation](https://www.scirp.org/pdf/ojapps_2013012216494836.pdf)
    (2013), Open Journal of Applied Sciences, vol. 3, pp. 58–64.'
  prefs: []
  type: TYPE_NORMAL
