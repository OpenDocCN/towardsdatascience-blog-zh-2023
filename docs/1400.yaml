- en: Handling Time Zones with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/handling-time-zones-with-python-a100bfc7f6df?source=collection_archive---------3-----------------------#2023-04-21](https://towardsdatascience.com/handling-time-zones-with-python-a100bfc7f6df?source=collection_archive---------3-----------------------#2023-04-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----a100bfc7f6df---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)
    ·10 min read·Apr 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa100bfc7f6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----a100bfc7f6df---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa100bfc7f6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&source=-----a100bfc7f6df---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: This post demonstrates the functionalities to deal with time zones in Python
    by means of comparative assessment of hourly solar irradiance data for four cities
    in 2020 based on different time zones.
  prefs: []
  type: TYPE_NORMAL
- en: Time zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I start my work in Bonn, Germany on the first day of October at 9 am, it
    is already afternoon at 12:45 pm in my hometown in Chitwan, Nepal. My friend in
    Sydney, Australia has already finished his work schedule at 6 pm on the same day.
    Another friend in New York, the USA is still sleeping as it is 3 am in morning
    there. This implies that these four places have different **time zones**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce3d3f4bf5443fbffb7130a92a3cdca9.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration of different time zones in the world. Map © [OpenStreetMap contributors](https://www.openstreetmap.org/copyright)
    licensed under [Open Data Commons Open Database License (ODbl)](https://opendatacommons.org/licenses/odbl/)
    by the [OpenStreetMap foundation](https://opendatacommons.org/licenses/odbl/)
    (OpenStreetMap, 2023). Labels added by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The [time zone](https://en.wikipedia.org/wiki/Time_zone) is an area, which observes
    uniform standard time for legal, social, or commercial purposes. The world is
    not uniformly divided into different time zones based on longitudes. Time zones
    tend to rather follow boundaries between and within countries for differentiation.
  prefs: []
  type: TYPE_NORMAL
- en: All time zones are defined as an offset from **Coordinated Universal Time (UTC)**.
    And these values can range from UTC-12:00 to UTC+14:00\. While the offsets are
    usually a whole number of hours, a few zones are also offset by an additional
    30 or 45 minutes. For example, the time zone of Nepal has a time offset of UTC+05:45\.
    In total, there are [38 time zones](https://www.timeanddate.com/time/current-number-time-zones.html)
    in the world.
  prefs: []
  type: TYPE_NORMAL
- en: If I have data on solar irradiance for the four cities in Nepal, Germany, Australia,
    and the USA in the UTC time zone, it doesn’t reflect the data for the same hour
    of the day in each of these countries. In this post, I am going to discuss how
    the time zones of the data can be handled for datetime objects including pandas
    dataframe in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, I am going to download solar irradiance data for 2020 of
    these four cities/countries, compare and analyze the data when:'
  prefs: []
  type: TYPE_NORMAL
- en: The data of each country is in the UTC time zone and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data refers to the respective time zone of the country.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14899f4278a4b23df27b09f700ea3625.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Luis Cortes](https://unsplash.com/@luiscortestamez) in [Unsplash](https://unsplash.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding to retrieve the coordinates of four cities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first step, I retrieve the coordinates of the four cities in four countries
    because I need them to extract the solar irradiance data. The process of extracting
    the geographical coordinates by providing the name of the place is called geocoding.
  prefs: []
  type: TYPE_NORMAL
- en: As shown below, I wrote a function for geocoding using the [geopy](https://geopy.readthedocs.io/en/stable/)
    package. The function utilizes [Nominatim](https://nominatim.org/), which is an
    open-source service for geocoding that uses [OpenStreetMap](https://www.openstreetmap.org/#map=6/26.037/85.024)
    data to find locations on the earth by name and address.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I used the function to extract the coordinates of individual cities and create
    a pandas dataframe out of it as depicted in the screenshot below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1f9dc30095792c3d4f219b4aeba921a.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe is created containing latitude and longitude values of the four cities.
    Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing data using NASA Power API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Applications Programming Interface (API) [service](https://power.larc.nasa.gov/docs/services/api/)
    of NASA Power allows to retrieve Analysis Ready Data (NASA Power, 2023a). For
    this post, I download the solar irradiance data for **four** cities in **hourly**
    resolution fom NASA Power Data(NASA Power, 2023b). The parameter I use is All
    Sky Surface Shortwave Downward Irradiance (`ALLSKY_SFC_SW_DWN`) for **2020**,
    which is described in more detail in the section below.
  prefs: []
  type: TYPE_NORMAL
- en: The data is called in **UTC time zone** format, although the [hourly API](https://power.larc.nasa.gov/docs/services/api/temporal/hourly/#:~:text=POWER%20provides%20two%20different%20time,middle%20longitude%20of%20the%20swath.)
    also allows calling the data in Local Solar Time (LST) format by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `base_url` configuration looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, I loop through the longitude and latitude of each place defined by geocoding
    in a list called `places` and request the hourly solar irradiance data for 2020\.
    The full code for this step is given in the GitHub gist below:'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solar irradiance data refers to the total power (direct + diffused) obtained
    from the sun per unit area per hour (Wh/m²) on a horizontal plane at the surface
    of the earth under all sky conditions (NASA Power, 2023c).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This parameter, also referred to as **Global Horizontal Irradiance (GHI),**
    is relevant to calculate the size of solar PV module needed to meet the given
    electricity demand as given in the formula below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/62ee11b171e8c008cfeb7e88a4d03de9.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation 1 and 2 refer to formula for calculating the sizes of solar PV module
    and battery to meet given electricity demand based on solar irradiance and other
    technical parameters. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Basic statistics of given data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/6e82674f2440988e76c199631675aeed.png)'
  prefs: []
  type: TYPE_IMG
- en: Global Horizontal Irradiance data downloaded for four cities. Illustration by
    Author.
  prefs: []
  type: TYPE_NORMAL
- en: The downloaded data is depicted in the plot above. The data shows higher solar
    irradiance in Sydney towards the beginning and end of the year, and lower towards
    the middle of the year. This pattern is opposite in the other three cities, which
    can be explained by the location of Sydney in the Southern hemisphere and other
    cities in the Northern hemisphere of the globe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b9f6ea0789a97fb60e138c29d5f0d4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Statistics from the downloaded data. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: It is observed that Chitwan, Nepal received the highest annual solar irradiance
    (1669 kWh/m²) in 2020 followed by Sydney, Australia (1631 kWh/m²), New York, the
    USA (1462 kWh/m²), and Bonn, Germany received the least (1193 kWh/m²).
  prefs: []
  type: TYPE_NORMAL
- en: However, the maximum solar irradiance received at a particular hour is highest
    for Sydney (1061.3 W/m²) followed by Chitwan (997 W/m²).
  prefs: []
  type: TYPE_NORMAL
- en: The minimum solar irradiance and the 25th percentile values for each city is
    zero because there is no solar irradiance during night hours.
  prefs: []
  type: TYPE_NORMAL
- en: Time zone Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Default pandas dataframe without “datetime” format index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As 2020 was a leap year, there were 366 days and as a result, the data was obtained
    for 8784 hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the data is first downloaded, its index is of integer (**int64**) type
    as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5016c70d79cb024bb34b2788f791948f.png)'
  prefs: []
  type: TYPE_IMG
- en: Data when first downloaded from NASA Power website. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Converting integer type index to “naive” datetime index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dataframe index can be converted into datetime type using `pd.to_datetime()`
    and specifying the format `%Y%m%d%H` for year, month, day and hours respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1700b29877372e16c876b3d69c5c5d7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Converting integer index to datetime index. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'This change is also reflected when the dataframe is plotted as the months Jan
    to Dec of 2020 are visible in xticks as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6baed8f5afb2ea1e536d502583365529.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting pandas dataframe with “naive” datetime index shows months from Jan
    to Dec 2020 in the xaxis. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Although this dataframe has a datetime index, it does not have any information
    about time zones and daylight saving. Hence, the dataframe index is a **naive**
    datetime object. This is evident by checking the time zone info of one of the
    index of the pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d707297e7213db5e69a2088d3c4622e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Checking the time zone info of the first datetime index of dataframe. Illustration
    by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Localizing “naive” datetime object to “time zone aware” datetime object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The datetime [module](https://docs.python.org/3/library/datetime.html#module-datetime)
    of Python can be used to access, retrieve and manipulate the date and time information.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `datetime.now()` function returns the current “local” date and
    time information. However, it doesn’t have any time zone and daylight saving information
    as `time_now.tzinfo` returns None in the code snippet below, implying it is a
    **naive** datetime object.
  prefs: []
  type: TYPE_NORMAL
- en: As of now (21 April 2023), I am in Nepal. Therefore, I localize the current
    time to “Asia/Kathmandu” time zone using the `timezone.localize()` module of [**pytz**](https://pypi.org/project/pytz/)
    package. Now, the `time_in_nepal` is a **time zone aware** datetime object.
  prefs: []
  type: TYPE_NORMAL
- en: To get the current local time in Germany, I can use `time_in_nepal.astimezone(timezone("Europe/Berlin"))`,
    which is also a **time zone aware** datetime object.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88b8510061b58accbf280a4e23d73f6a.png)'
  prefs: []
  type: TYPE_IMG
- en: First cell shows the current local time time_now as a naive datetime object
    without time zone information. Second cell shows localizing time_now to Nepali
    time zone. Third cell shows converting Nepali local time to German local time.
    Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Localizing timezone of pandas dataframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, I localize the naive index of pandas dataframe to UTC time zone using
    `df.tz_localize(tz = "UTC")` as shown in the code screenshot below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb3ccc8ce573230876db8191a8563516.png)'
  prefs: []
  type: TYPE_IMG
- en: Localizing naive dataframe index to UTC time zone. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: It is observed that the index of `df` is converted from naive index to time
    zone aware index of UTC time zone as shown above.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. List of all possible time zone addresses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The list of all possible time zone addresses that can be referred are available
    using `all_timezones` module of pytz package. There are 594 such addresses. Some
    addresses can refer to same time zone. For example, Europe/Berlin, Europe/Amsterdam,
    Europe/Copenhagen all refer to same time zone.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1881391e01ea40d62f18e496aac758a3.png)'
  prefs: []
  type: TYPE_IMG
- en: List of possible addresses that can be referred to for time zones using pytz
    module. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Create new dataframe for each city and convert UTC time zone to corresponding
    local time zone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`df` contains the solar irradiance data of the four cities in UTC time zone.
    In this step, I create four dataframes out of each column of `df`. And then I
    convert the time zone of new dataframe from UTC to the local time zone of each
    city or country it belongs to. For example, the time zone of `df_chitwan` is converted
    using'
  prefs: []
  type: TYPE_NORMAL
- en: '`df_chitwan.tz_convert(tz = "Asia/Kathmandu")`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7c94baf018453d963ec02b19868c0280.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating different dataframes out of each column of df. The time zones of new
    dataframes are converted from UTC to respective time zone of the country/city.
  prefs: []
  type: TYPE_NORMAL
- en: It is to be noted that for countries which have daylight savings, this is automatically
    accounted for in the time zone conversion. For example, Nepal time is consistent
    with UTC + 05:45 throughout the year. However, for Sydney, Python automatically
    deals with daylight saving as the offset with UTC time zone can be 10 or 11 hours
    depending on time of year.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7\. Comparing the plots of solar irradiance data in different time zones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this final step, I wanted to compare how the solar irradiance looked like
    in the four cities when the data corresponded to:'
  prefs: []
  type: TYPE_NORMAL
- en: a. The UTC time zone and
  prefs: []
  type: TYPE_NORMAL
- en: b. The local time zone of each city.
  prefs: []
  type: TYPE_NORMAL
- en: In the code snippet below, I create two sub-plots to plot the solar irradiance
    in four cities. In the left subplot, the solar irradiance data for October 1,
    2020 based on UTC time zone is plotted. And in the right subplot, the solar irradiance
    data for October 1, 2020 based on the local time of each city is plotted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The plot looks as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4180ee10616600f18af02a6a8b5c669d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Solar irradiance on October 1, 2020\. Left: Based on UTC time zone. Right:
    Based on local time zone of each city/country. Illustration by Author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As of October 1, 2020, the time zones of four cities as compared to UTC time
    zone are: Chitwan (UTC+05:45), New York (UTC- 04:00), Bonn (UTC + 02:00), and
    Sydney (UTC+10:00). Thus, we see the solar irradiance peak around 4 am, 3 pm,
    10 am and 3 am of UTC time zone for Chitwan, New York, Bonn, and Sydney respectively
    on the plot on the left.'
  prefs: []
  type: TYPE_NORMAL
- en: The plot on the right shows that solar irradiance has a similar shape based
    on local hours throughout the day in each city. The solar irradiance starts to
    increase from zero at around 5 or 6 am in each city, it peaks around noon and
    continues to decline before reaching zero again at 5 or 6 pm. On this day of the
    year, Sydney received the highest solar irradiance, followed by Chitwan, New York,
    and Bonn.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this post, I demonstrated the methods to deal with time zones while working
    with datetime objects including dataframe in Python. I used the example of working
    with solar irradiance data for four cities across the world. These methodologies
    could be very handy while working with time series data, where time zones matter
    such as meteorological data. I have summarized the key techniques learnt from
    this post to deal with time zones in Python in the following numbered bullets:'
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to check the time zone of a datetime object using **tzinfo**
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. When the datetime object does not contain any information about time zones
    and daylight saving, it is called **naive** datetime object.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Using the **timezone** module of **pytz** package, it is possible to convert
    **naive time** to **local time**. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 4\. The new object is now **time zone aware**. It is possible to get the time
    in a different time zone using `astimezone` module of datetime object. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 5\. To work with time series data, it makes sense to convert the index of pandas
    dataframe to datetime index.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. The naive dataframe index can be localized using `tz_localize` module in
    `df` and specifying the time zone. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 7\. The dataframe object can also be converted to different time zone using
    `tz_convert` module of `df`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The data, code and output plots for this post are available in `notebooks/Timezone_handling`
    folder in this GitHub [repository](https://github.com/hbshrestha/Data_Analytics).
    Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: OpenStreetMap, 2023\. [Copyright and license](https://www.openstreetmap.org/copyright).
  prefs: []
  type: TYPE_NORMAL
- en: NASA Power, 2023a. [NASA Power APIs](https://power.larc.nasa.gov/docs/services/api/).
  prefs: []
  type: TYPE_NORMAL
- en: NASA Power, 2023b. [POWER|Data Access Viewer](https://power.larc.nasa.gov/data-access-viewer/).
  prefs: []
  type: TYPE_NORMAL
- en: NASA Power, 2023c. [Parameters definitions](https://power.larc.nasa.gov/docs/tutorials/parameters/).
  prefs: []
  type: TYPE_NORMAL
