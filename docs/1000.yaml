- en: How to Build ML Applications on the AWS Cloud with Kubernetes and oneAPI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 AWS 云上使用 Kubernetes 和 oneAPI 构建 ML 应用
- en: 原文：[https://towardsdatascience.com/how-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136?source=collection_archive---------9-----------------------#2023-03-17](https://towardsdatascience.com/how-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136?source=collection_archive---------9-----------------------#2023-03-17)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136?source=collection_archive---------9-----------------------#2023-03-17](https://towardsdatascience.com/how-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136?source=collection_archive---------9-----------------------#2023-03-17)
- en: '![](../Images/57caeb13d291c9b760f62f46ef459972.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57caeb13d291c9b760f62f46ef459972.png)'
- en: '[Image Source](https://www.freepik.com/free-photo/business-network-background-connecting-dots-technology-design_21629783.htm#query=distributed&position=1&from_view=search&track=sph)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[图片来源](https://www.freepik.com/free-photo/business-network-background-connecting-dots-technology-design_21629783.htm#query=distributed&position=1&from_view=search&track=sph)'
- en: Learn the basics of Kubernetes and Intel AI Analytics Toolkit for building distributed
    ML Apps
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习 Kubernetes 和 Intel AI Analytics Toolkit 的基础知识，以构建分布式 ML 应用
- en: '[](https://eduand-alvarez.medium.com/?source=post_page-----81535012d136--------------------------------)[![Eduardo
    Alvarez](../Images/afa0ad855c8ec2e977ebbe60dc3e77a4.png)](https://eduand-alvarez.medium.com/?source=post_page-----81535012d136--------------------------------)[](https://towardsdatascience.com/?source=post_page-----81535012d136--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----81535012d136--------------------------------)
    [Eduardo Alvarez](https://eduand-alvarez.medium.com/?source=post_page-----81535012d136--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://eduand-alvarez.medium.com/?source=post_page-----81535012d136--------------------------------)[![Eduardo
    Alvarez](../Images/afa0ad855c8ec2e977ebbe60dc3e77a4.png)](https://eduand-alvarez.medium.com/?source=post_page-----81535012d136--------------------------------)[](https://towardsdatascience.com/?source=post_page-----81535012d136--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----81535012d136--------------------------------)
    [Eduardo Alvarez](https://eduand-alvarez.medium.com/?source=post_page-----81535012d136--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe49cc416a8ef&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136&user=Eduardo+Alvarez&userId=e49cc416a8ef&source=post_page-e49cc416a8ef----81535012d136---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----81535012d136--------------------------------)
    ·12 min read·Mar 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F81535012d136&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136&user=Eduardo+Alvarez&userId=e49cc416a8ef&source=-----81535012d136---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe49cc416a8ef&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136&user=Eduardo+Alvarez&userId=e49cc416a8ef&source=post_page-e49cc416a8ef----81535012d136---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----81535012d136--------------------------------)
    ·12 min 阅读·2023年3月17日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F81535012d136&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136&user=Eduardo+Alvarez&userId=e49cc416a8ef&source=-----81535012d136---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F81535012d136&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136&source=-----81535012d136---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F81535012d136&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-build-distributed-ml-applications-on-the-aws-cloud-with-kubernetes-and-oneapi-81535012d136&source=-----81535012d136---------------------bookmark_footer-----------)'
- en: Building and deploying high-performance AI applications can be a challenging
    task that requires a significant amount of computing resources and expertise.
    Fortunately, modern technologies such as Kubernetes, Docker, and the Intel AI
    Analytics Toolkit ([AI Kit](https://www.intel.com/content/www/us/en/developer/tools/oneapi/ai-analytics-toolkit.html))
    make it easier to develop and deploy AI applications optimized for performance
    and scalability. Moreover, by using cloud services like Amazon Web Services (AWS),
    developers can further streamline the process and take advantage of the flexible
    and scalable infrastructure provided by the cloud.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和部署高性能 AI 应用程序可能是一项具有挑战性的任务，需要大量的计算资源和专业知识。幸运的是，现代技术如 Kubernetes、Docker 和
    Intel AI Analytics Toolkit ([AI Kit](https://www.intel.com/content/www/us/en/developer/tools/oneapi/ai-analytics-toolkit.html))
    使得开发和部署优化性能和可扩展性的 AI 应用程序变得更加容易。此外，通过使用像 Amazon Web Services (AWS) 这样的云服务，开发人员可以进一步简化流程，利用云提供的灵活和可扩展的基础设施。
- en: In this article, we will explore how to use Kubernetes, Docker, and the Intel
    AI Analytics Toolkit to build and deploy AI applications on the AWS cloud. Specifically,
    we will focus on one of the first Intel Cloud Optimization Modules, which serves
    as a template with codified Intel accelerations covering various AI workloads.
    We will also introduce the AWS services that we will use in the process, including
    Amazon Elastic Kubernetes Service (EKS), Amazon Elastic Container Registry (ECR),
    Amazon Elastic Compute Cloud (EC2), and Elastic Load Balancer (ELB).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨如何使用 Kubernetes、Docker 和 Intel AI Analytics Toolkit 在 AWS 云上构建和部署
    AI 应用程序。具体而言，我们将重点关注第一个 Intel 云优化模块，它作为一个模板，包含各种 AI 工作负载的 Intel 加速方案。我们还将介绍在过程中使用的
    AWS 服务，包括 Amazon Elastic Kubernetes Service (EKS)、Amazon Elastic Container Registry
    (ECR)、Amazon Elastic Compute Cloud (EC2) 和 Elastic Load Balancer (ELB)。
- en: '![](../Images/313ad6f84a198846fa6e738f16598c53.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/313ad6f84a198846fa6e738f16598c53.png)'
- en: Figure 1\. This architecture is designed for AI production scenarios where many
    discrete models must be trained with low-moderate compute requirements. — Image
    by Author
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1\. 该架构设计用于 AI 生产场景，其中需要训练许多离散模型，并且计算需求较低至中等。 — 作者提供的图片
- en: The sample application that we will deploy focuses on Loan Default prediction,
    a common problem in the finance industry. We will use the daal4Py library to accelerate
    the inference of an XGBoost Classifier, enabling us to achieve high performance
    while reducing the time required to train and deploy the model.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将部署的示例应用程序聚焦于贷款违约预测，这是金融行业中的一个常见问题。我们将使用 daal4Py 库来加速 XGBoost 分类器的推理，使我们能够在减少训练和部署模型所需时间的同时实现高性能。
- en: '![](../Images/3fe30f2483e071b9ca73b42b2cc0e884.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3fe30f2483e071b9ca73b42b2cc0e884.png)'
- en: Figure 2\. A simplified API to Intel(R) oneAPI Data Analytics Library that allows
    for fast usage of the framework suited for Data Scientists or Machine Learning
    users. Built to help provide an abstraction to Intel(R) oneAPI Data Analytics
    Library for either direct usage or integration into one’s framework. — [Image
    Source](https://pypi.org/project/daal4py/)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2\. 一个简化的 Intel(R) oneAPI 数据分析库 API，允许数据科学家或机器学习用户快速使用该框架。旨在帮助提供对 Intel(R)
    oneAPI 数据分析库的抽象，以便直接使用或集成到自己的框架中。 — [图片来源](https://pypi.org/project/daal4py/)
- en: By the end of this article, readers will have a basic understanding of how to
    build and deploy performant AI applications on the AWS cloud using Kubernetes,
    Docker, and the Intel AI Analytics Toolkit. Additionally, they will have a practical
    example of how to leverage these technologies to accelerate the inference of a
    loan default prediction model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文结束时，读者将对如何使用 Kubernetes、Docker 和 Intel AI Analytics Toolkit 在 AWS 云上构建和部署高性能
    AI 应用程序有基本的了解。此外，他们还将获得一个实际示例，展示如何利用这些技术加速贷款违约预测模型的推理。
- en: '*You can find all of the source code for this tutorial in our public* [*GitHub
    Repository*](https://github.com/intel/kubernetes-intel-aws-high-availability-training)*.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以在我们的公共* [*GitHub 仓库*](https://github.com/intel/kubernetes-intel-aws-high-availability-training)*中找到本教程的所有源代码。*'
- en: Get your Development Environment Ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备你的开发环境
- en: '**Install the AWS CLI —** The AWS CLI (Command Line Interface) tool is a command-line
    tool for managing various Amazon Web Services (AWS) resources and services.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 AWS CLI —** AWS CLI（命令行界面）工具是一个用于管理各种 Amazon Web Services (AWS) 资源和服务的命令行工具。'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Configure AWS Credentials using `aws configure` — learn more about setting credentials
    with aws cli [here](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`aws configure`配置AWS凭证 — 了解更多有关使用aws cli设置凭证的信息，请点击[这里](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html)。
- en: '**Install eksctl** — eksctl is a command-line tool for creating, managing,
    and operating Kubernetes clusters on EKS.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 eksctl** — eksctl是一个用于在EKS上创建、管理和操作Kubernetes集群的命令行工具。'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Install aws-iam-configurator** — AWS IAM Authenticator is a command-line
    tool that enables users to authenticate with their Kubernetes clusters on EKS
    using their AWS IAM credentials.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 aws-iam-configurator** — AWS IAM Authenticator是一个命令行工具，使用户能够使用其AWS IAM凭证与EKS上的Kubernetes集群进行身份验证。'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Install kubectl** — Kubectl is a command-line tool for interacting with Kubernetes
    clusters. It allows users to deploy, inspect, and manage applications and services
    running on a Kubernetes cluster and perform various administrative tasks such
    as scaling, updating, and deleting resources.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 kubectl** — Kubectl是一个命令行工具，用于与Kubernetes集群进行交互。它允许用户部署、检查和管理Kubernetes集群上运行的应用程序和服务，并执行各种管理任务，如扩展、更新和删除资源。'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Our Loan Default Prediction Application**'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**我们的贷款违约预测应用程序**'
- en: The application we will be deploying is based on the [Loan Default Risk Prediction
    AI Reference Kit](https://www.intel.com/content/www/us/en/developer/articles/reference-kit/loan-default-risk-prediction.html).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要部署的应用程序基于[贷款违约风险预测AI参考套件](https://www.intel.com/content/www/us/en/developer/articles/reference-kit/loan-default-risk-prediction.html)。
- en: '![](../Images/26dd148be5e5ce8c62896e13d43767b4.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26dd148be5e5ce8c62896e13d43767b4.png)'
- en: '[Image Source](https://www.freepik.com/free-photo/loan-buy-house-pressure-buy-house_28492444.htm#query=loan&position=32&from_view=search&track=sph)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[图片来源](https://www.freepik.com/free-photo/loan-buy-house-pressure-buy-house_28492444.htm#query=loan&position=32&from_view=search&track=sph)'
- en: 'We refactored the code from this reference solution to be more modular in support
    of our three main APIs:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将参考解决方案中的代码进行了重构，使其更加模块化，以支持我们的三个主要API：
- en: '**Data processing** — This endpoint preprocess data and stores it in a data
    lake or another structured format. This codebase also handles the expansion of
    the dataset for benchmarking purposes.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据处理** — 该端点预处理数据并将其存储在数据湖或其他结构化格式中。此代码库还处理用于基准测试的数据集扩展。'
- en: '**Model Trainin**g — This endpoint trains an XGBoost Classifier and converts
    it to an inference-optimized daal4py format.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型训练** — 该端点训练一个XGBoost分类器，并将其转换为推理优化的daal4py格式。'
- en: '**Inference** — This endpoint receives a payload with raw data and returns
    the loan default classification of each sample.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推理** — 该端点接收一个包含原始数据的负载，并返回每个样本的贷款违约分类。'
- en: The directory tree below outlines the codebase’s various scripts, assets, and
    configuration files. The majority of the ML application code is in the [app/ folder](https://github.com/intel/kubernetes-intel-aws-high-availability-training/tree/main/app).
    This folder contains [loan_default](https://github.com/intel/kubernetes-intel-aws-high-availability-training/tree/main/app/loan_default)
    and [utils](https://github.com/intel/kubernetes-intel-aws-high-availability-training/tree/main/app/utils)
    packages — the loan_default package contains the server-side python modules that
    support our three main APIs. The [server.py](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/app/server.py)
    script contains the FastAPI endpoint configurations, payload data models, and
    commands to start a uvicorn server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的目录树概述了代码库的各种脚本、资产和配置文件。大多数ML应用程序代码位于[app/文件夹](https://github.com/intel/kubernetes-intel-aws-high-availability-training/tree/main/app)。该文件夹包含[loan_default](https://github.com/intel/kubernetes-intel-aws-high-availability-training/tree/main/app/loan_default)和[utils](https://github.com/intel/kubernetes-intel-aws-high-availability-training/tree/main/app/utils)包
    — loan_default包包含支持我们三个主要API的服务器端Python模块。[server.py](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/app/server.py)脚本包含FastAPI端点配置、负载数据模型和启动uvicorn服务器的命令。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A deep dive into the code base is beyond the scope of this tutorial. However,
    it is worth pointing out where we leverage the daal4py to improve our inference
    performance. Inside [model.py](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/app/loan_default/model.py),
    you’ll find the “train” method, which handles model training and conversion to
    daal4py format using the `d4p.get_gbt_model_from_xgboost()` function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 深入代码库超出了本教程的范围。然而，值得指出的是，我们在哪里利用 daal4py 来提高推理性能。在 [model.py](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/app/loan_default/model.py)
    文件中，你会找到“train”方法，该方法处理模型训练并使用 `d4p.get_gbt_model_from_xgboost()` 函数将模型转换为 daal4py
    格式。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the original reference kit’s performance testing, this simple conversion
    resulted in an ~4.44x boost in performance (Figure 3).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始参考工具包的性能测试中，这一简单转换导致了大约 4.44 倍的性能提升（图 3）。
- en: '![](../Images/23ea5fadc048d805783e044d341349a6.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/23ea5fadc048d805783e044d341349a6.png)'
- en: Figure 3\. For batch inference of size 1M, Intel® v1.4.2 offers up to a 1.34x
    speedup over stock XGBoost v0.81 and with Intel® oneDAL, up to a 4.44x speedup.
    — Image by Author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3\. 对于大小为 1M 的批量推理，Intel® v1.4.2 提供了比标准 XGBoost v0.81 高达 1.34 倍的加速，使用 Intel®
    oneDAL 时，高达 4.44 倍的加速。— 图片由作者提供
- en: Configuring and Launching Elastic Kubernetes Service Clusters
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置和启动 Elastic Kubernetes Service 集群
- en: Elastic Kubernetes Service is a fully managed service that makes it easy to
    deploy, manage, and scale containerized applications using Kubernetes on Amazon
    Web Services (AWS). It eliminates the need to install, operate, and scale Kubernetes
    clusters on your own infrastructure.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Kubernetes Service 是一种完全托管的服务，它使得在 Amazon Web Services (AWS) 上使用 Kubernetes
    部署、管理和扩展容器化应用变得容易。它消除了在自己的基础设施上安装、操作和扩展 Kubernetes 集群的需要。
- en: To launch our EKS cluster, we must first create our [cluster configuration file](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/kubernetes/cluster.yaml).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动我们的 EKS 集群，我们必须首先创建我们的 [集群配置文件](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/kubernetes/cluster.yaml)。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can configure the name and region of our cluster deployment, as well as
    the version of EKS that we want to run, in our “metadata” section. Most importantly,
    we can configure basic requirements for we compute resources in the “managedNodeGroups”
    section:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在“metadata”部分配置集群部署的名称和区域，以及我们希望运行的 EKS 版本。最重要的是，我们可以在“managedNodeGroups”部分配置计算资源的基本需求：
- en: desiredCapacity — the number of nodes to scale to when your stack is created.
    In this tutorial, we will set this to 3.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: desiredCapacity — 创建堆栈时要扩展到的节点数量。在本教程中，我们将其设置为 3。
- en: instanceType — the instance type for your nodes. This tutorial uses an **m6i.large**
    instance, a 3rd Generation Xeon (2vCPU and 8GiB). Once openly available, we recommend
    trying out the [**r7iz** instance family](https://aws.amazon.com/ec2/instance-types/r7iz/)
    to take advantage of the [Intel Advanced Matrix Extension (AMX)](https://www.intel.com/content/www/us/en/products/docs/accelerator-engines/advanced-matrix-extensions/overview.html)
    — a dedicated accelerator for deep learning workloads inside of [Intel 4th Generation
    Xeon CPUs](https://www.intel.com/content/www/us/en/newsroom/news/4th-gen-xeon-scalable-processors-max-series-cpus-gpus.html).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: instanceType — 节点的实例类型。本教程使用 **m6i.large** 实例，即第三代 Xeon（2vCPU 和 8GiB）。一旦开放使用，我们建议尝试
    [**r7iz** 实例系列](https://aws.amazon.com/ec2/instance-types/r7iz/) 以利用 [Intel 高级矩阵扩展
    (AMX)](https://www.intel.com/content/www/us/en/products/docs/accelerator-engines/advanced-matrix-extensions/overview.html)
    —— 这是专为深度学习工作负载设计的加速器，内置于 [Intel 第四代 Xeon CPUs](https://www.intel.com/content/www/us/en/newsroom/news/4th-gen-xeon-scalable-processors-max-series-cpus-gpus.html)
    中。
- en: We execute `eksctl create cluster -f cluster.yaml` to create the Cloud Formation
    stack and provision all relevant resources. With the current configurations, this
    process should take 10 to 15 minutes. You should see a log similar to Figure 4.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行 `eksctl create cluster -f cluster.yaml` 以创建 Cloud Formation 堆栈并配置所有相关资源。根据当前配置，此过程应需要
    10 到 15 分钟。你应该会看到类似图 4 的日志。
- en: '![](../Images/ef8f259c476450da8e86b3cafdef8a77.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef8f259c476450da8e86b3cafdef8a77.png)'
- en: Figure 4\. Cloud formation log for EKS cluster provision workflow — Image by
    Author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4\. EKS 集群配置工作流的 Cloud Formation 日志 — 图片由作者提供
- en: You should run a quick test to ensure your cluster has been provisioned properly.
    Run `eksctl get cluster` to get the name of your available cluster(s), and `eksctl
    get nodegroup --cluster <cluster name>` to check on your cluster’s node group.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该运行一个快速测试以确保你的集群已正确配置。运行 `eksctl get cluster` 以获取可用集群的名称，运行 `eksctl get nodegroup
    --cluster <cluster name>` 以检查集群的节点组。
- en: Setting up all of the Kubernetes Application Resources
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置所有 Kubernetes 应用程序资源
- en: Let’s dig into launching your Kubernetes application. This process entails creating
    a namespace, a deployment manifest, and a Kubernetes service. All of these files
    are available in the [tutorial’s codebase](https://github.com/intel/kubernetes-intel-aws-high-availability-training).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解如何启动您的 Kubernetes 应用程序。此过程包括创建命名空间、部署清单和 Kubernetes 服务。所有这些文件都可以在 [教程的代码库](https://github.com/intel/kubernetes-intel-aws-high-availability-training)
    中找到。
- en: '**Before moving on to this part of the tutorial, please:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**在继续本部分教程之前，请：**'
- en: '[Create a docker image using the Dockerfile in the application codebase and
    push it to the Elastic Container Registry on AWS.](https://medium.com/@eduand-alvarez/creating-an-ecr-registry-and-pushing-a-docker-image-93e372e74ff7)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用应用程序代码库中的 Dockerfile 创建 docker 镜像，并将其推送到 AWS 的 Elastic Container Registry。](https://medium.com/@eduand-alvarez/creating-an-ecr-registry-and-pushing-a-docker-image-93e372e74ff7)'
- en: '[Create and configure your kubernetes service account to grant your application
    proper access to S3 resources.](https://eduand-alvarez.medium.com/how-to-assign-aws-service-permissions-to-kubernetes-resources-cb1e0257ca22?sk=6a2c485933741deacd4f39a46e90bf22)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建并配置您的 Kubernetes 服务账户，以授予应用程序对 S3 资源的适当访问权限。](https://eduand-alvarez.medium.com/how-to-assign-aws-service-permissions-to-kubernetes-resources-cb1e0257ca22?sk=6a2c485933741deacd4f39a46e90bf22)'
- en: '![](../Images/dfc1669dbd2ec96a24847ac7ca712465.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dfc1669dbd2ec96a24847ac7ca712465.png)'
- en: Image by Author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: A Kubernetes namespace is a virtual cluster that divides and isolates resources
    within a physical cluster. Let’s create a namespace called “loan-default-app”
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 命名空间是一个虚拟集群，将物理集群中的资源划分和隔离。我们来创建一个名为“loan-default-app”的命名空间。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, let’s configure our Kubernetes [deployment manifest](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/kubernetes/deployment.yaml).
    A Kubernetes deployment is a Kubernetes resource that allows you to declaratively
    manage a set of replica pods for a given application, ensuring that the desired
    number of replicas are running and available at all times while enabling features
    such as scaling, rolling updates, and rollbacks. It also provides an abstraction
    layer over the pods, allowing you to define your application’s desired state without
    worrying about the underlying infrastructure.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们配置我们的 Kubernetes [部署清单](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/kubernetes/deployment.yaml)。Kubernetes
    部署是一种 Kubernetes 资源，允许您声明性地管理给定应用程序的一组副本 pod，确保所需数量的副本始终运行并可用，同时启用如扩展、滚动更新和回滚等功能。它还提供了对
    pod 的抽象层，允许您定义应用程序的期望状态，而无需担心底层基础设施。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The Kubernetes deployment manifest (deployment.yaml) above defines the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 Kubernetes 部署清单（deployment.yaml）定义了以下内容：
- en: 'kind: Deployment — The type of Kubernetes resource'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'kind: Deployment — Kubernetes 资源的类型'
- en: 'name: “eks-loan-default-app” — The name of our deployment'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'name: “eks-loan-default-app” — 我们的部署名称'
- en: 'namespace: “loan-default-app” — The namespace that this deployment should be
    assigned to'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'namespace: “loan-default-app” — 此部署应分配的命名空间'
- en: 'app: “loan-default” — The name we assign our application'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'app: “loan-default” — 我们为应用程序分配的名称'
- en: 'replicas: 3 — the number of desired copies of a pod that should be created
    and maintained at all times.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'replicas: 3 — 要创建并始终维持的 pod 复制品数量。'
- en: 'serviceAccountName: “loan-default-service-account” — make sure this matches
    the service account you created earlier.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'serviceAccountName: “loan-default-service-account” — 确保这与您之前创建的服务账户匹配。'
- en: 'topologySpreadConstraints: — helps define how pods should be distributed across
    your cluster. The current configuration will maintain an equal distribution of
    pods across available nodes.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'topologySpreadConstraints: — 帮助定义 pod 应如何在集群中分布。当前配置将保持 pod 在可用节点上的均匀分布。'
- en: 'containers: name/image — where you provide the URI for your application container
    image and assign the image a name.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'containers: name/image — 在这里提供应用程序容器镜像的 URI，并为镜像分配一个名称。'
- en: Run `kubectl apply -f deployment.yaml` to create your Kubernetes deployment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `kubectl apply -f deployment.yaml` 以创建您的 Kubernetes 部署。
- en: Now let’s configure our Kubernetes [service](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/kubernetes/service.yaml).
    A Kubernetes service is an abstraction layer that provides a stable IP address
    and DNS name for a set of pods running the same application, enabling clients
    to access the application without needing to know the specific IP addresses of
    individual pods. It also provides a way to load-balance traffic between multiple
    replicas of the application and can be used to define ingress rules for external
    access.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们配置我们的 Kubernetes [服务](https://github.com/intel/kubernetes-intel-aws-high-availability-training/blob/main/kubernetes/service.yaml)。Kubernetes
    服务是一个抽象层，为运行相同应用程序的一组 pods 提供稳定的 IP 地址和 DNS 名称，使客户端可以访问该应用程序，而无需知道单个 pods 的具体
    IP 地址。它还提供了一种在多个应用程序副本之间负载均衡流量的方法，并可用于定义外部访问的入口规则。
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The Kubernetes service manifest (service.yaml) above defines the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 Kubernetes 服务清单（service.yaml）定义了以下内容：
- en: 'kind: Service — the type of Kubernetes resource.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'kind: Service — Kubernetes 资源的类型。'
- en: 'name: “loan-default-service” — The name of our deployment.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'name: “loan-default-service” — 我们部署的名称。'
- en: 'namespace: “loan-default-app” — The namespace that this Service should be assigned
    to.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'namespace: “loan-default-app” — 该服务应分配到的命名空间。'
- en: 'port: 8080 — The port where the service will listen to.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'port: 8080 — 服务将监听的端口。'
- en: 'targetPort: 5000 — The port the service will communicate with on the pods.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'targetPort: 5000 — 服务与 pod 之间通信的端口。'
- en: 'app: “loan-default” — The name we assigned to our application'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'app: “loan-default” — 我们为应用程序指定的名称。'
- en: 'type: “LoadBalancer” — The type of service we selected.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'type: “LoadBalancer” — 我们选择的服务类型。'
- en: Run `kubectl apply -f service.yaml` to create your Kubernetes service.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`kubectl apply -f service.yaml`以创建你的 Kubernetes 服务。
- en: This will automatically launch an Elastic Load Balancer — a cloud service that
    distributes incoming network traffic across multiple targets, such as EC2 instances,
    containers, and IP addresses, to improve application availability and fault tolerance.
    We can use the ELB’s public DNS to make requests to our API endpoints from anywhere
    in the world.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动启动一个 Elastic Load Balancer — 一项云服务，它将传入的网络流量分配到多个目标，如 EC2 实例、容器和 IP 地址，以提高应用程序的可用性和容错性。我们可以使用
    ELB 的公共 DNS 从全球任何地方向我们的 API 端点发起请求。
- en: 'Here are a few tips before moving on:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，这里有一些提示：
- en: Run `kubectl get all -n loan-default-app` to get a full overview of the Kubernetes
    resources you have provisioned. You should see your pods, services, and replica
    groups.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`kubectl get all -n loan-default-app`以获取你所配置的 Kubernetes 资源的全面概述。你应该能看到你的
    pods、服务和副本组。
- en: Run `kubectl -n loan-default-app describe pod <pod-id>` to get a detailed description
    of your pod.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`kubectl -n loan-default-app describe pod <pod-id>`以获取有关你的 pod 的详细描述。
- en: If you need to diagnose a specific pod’s behavior, you can start a bash shell
    inside your pod by running `kubectl exec -it <pod-id> -n loan-default-app -- bash`
    — type exit and hit enter to exit the shell.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要诊断特定 pod 的行为，可以通过运行`kubectl exec -it <pod-id> -n loan-default-app -- bash`在
    pod 内启动一个 bash shell — 输入 exit 并按回车键退出 shell。
- en: Testing our Loan Default Prediction Kubernetes Application
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的贷款违约预测 Kubernetes 应用程序
- en: Now that all of our infrastructure is in place, we can set up the data component
    of our application and test our endpoints.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的基础设施已经到位，我们可以设置应用程序的数据组件并测试我们的端点。
- en: We will begin by [downloading the dataset from Kaggle](https://www.kaggle.com/datasets/laotse/credit-risk-dataset).
    The dataset used for this demo is a set of 32581 simulated loans. It has 11 features,
    including customer and loan characteristics and one label, which is the outcome
    of the loan. Once we have the .csv file in our working directory, we can create
    an S3 bucket and upload are Kaggle dataset.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始 [从 Kaggle 下载数据集](https://www.kaggle.com/datasets/laotse/credit-risk-dataset)。用于本演示的数据集是一个包含
    32581 个模拟贷款的数据集。它有 11 个特征，包括客户和贷款特征，以及一个标签，即贷款的结果。一旦我们在工作目录中获得了 .csv 文件，我们可以创建一个
    S3 桶并上传我们的 Kaggle 数据集。
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Making HTTP Requests to our API Endpoints**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**向我们的 API 端点发起 HTTP 请求**'
- en: We will be using Curl to make HTTP requests to our server. Curl allows you to
    send HTTP requests by providing a command-line interface where you can specify
    the URL, request method, headers, and data. It then handles the low-level details
    of establishing a connection, sending the request, and receiving the response,
    making it easy to automate HTTP interactions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Curl 来向我们的服务器发送 HTTP 请求。Curl 允许你通过提供一个命令行接口来发送 HTTP 请求，在这个接口中，你可以指定 URL、请求方法、头部信息和数据。然后，它处理建立连接、发送请求和接收响应的底层细节，使得自动化
    HTTP 交互变得容易。
- en: 'We will start by sending a request to our data processing endpoint. This will
    create test/train files and save our preprocessing pipeline as a .sav file to
    S3\. The body of the requests requires the following parameters:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从向我们的数据处理端点发送请求开始。这将创建测试/训练文件，并将我们的预处理管道保存为 .sav 文件到 S3。请求的主体需要以下参数：
- en: 'bucket: name of S3 bucket'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bucket: S3 桶的名称'
- en: 'key: path where your raw data is saved in S3'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'key: 你的原始数据在 S3 中保存的路径'
- en: 'size: total samples you want to process'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'size: 你想处理的样本总数'
- en: 'backend: options include “local” or “s3” — the codebase supports running the
    entire app locally for debugging purposes. When using the “s3” backend, the “local_path”
    and “target_path” parameters can be set to “None”.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'backend: 选项包括“local”或“s3” — 代码库支持在本地运行整个应用程序以进行调试。当使用“s3”后端时，“local_path”和“target_path”参数可以设置为“None”。'
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can navigate to your S3 bucket in the AWS console to verify that all files
    have been properly generated (Figure 5).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 AWS 控制台中导航到你的 S3 桶，以验证所有文件是否已正确生成（图 5）。
- en: '![](../Images/647e97e4bee81c8ff3fa920c62c4d823.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/647e97e4bee81c8ff3fa920c62c4d823.png)'
- en: Figure 5\. S3 bucket with the outputs generated by our /data endpoint — Image
    by Author
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5\. S3 桶包含由我们 /data 端点生成的输出 — 图片由作者提供
- en: 'Now we are ready to train our XGBoost Classifier model. We will make a request
    to our /train endpoint, which trains our model, converts it to daal4py format,
    and saves it to S3\. The body of the requests requires the following parameters:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备训练我们的 XGBoost 分类器模型。我们将向我们的 /train 端点发出请求，这将训练我们的模型，将其转换为 daal4py 格式，并保存到
    S3。请求的主体需要以下参数：
- en: 'bucket: name of S3 bucket'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bucket: S3 桶的名称'
- en: 'data_key: folder path that contains processed data created by our data processing
    API'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'data_key: 包含由我们数据处理 API 创建的处理数据的文件夹路径'
- en: 'model_key: folder where we want to store our trained model'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'model_key: 我们希望存储训练模型的文件夹'
- en: 'model_name: the name that we want to give our trained model'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'model_name: 我们希望给训练模型起的名字'
- en: 'backend: options include “local” or “s3” — the codebase supports running the
    entire app locally for debugging purposes. When using the “s3” backend, the “local_model_path”
    and “local_data_path” parameters can be set to “None.”'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'backend: 选项包括“local”或“s3” — 代码库支持在本地运行整个应用程序以进行调试。当使用“s3”后端时，“local_model_path”和“local_data_path”参数可以设置为“None”。'
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can navigate to your S3 bucket in the AWS console to verify that your model
    file has been created (Figure 6).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 AWS 控制台中导航到你的 S3 桶，以验证你的模型文件是否已创建（图 6）。
- en: '![](../Images/9b48629d4ddaa730c5736dfabcf9c4c8.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b48629d4ddaa730c5736dfabcf9c4c8.png)'
- en: Figure 6\. S3 bucket with the outputs generated by our /train endpoint — Image
    by Author
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6\. S3 桶包含由我们 /train 端点生成的输出 — 图片由作者提供
- en: 'Now that we have a trained daal4py optimized XGBoost Classifier, we can make
    inference requests to our API. The /predict endpoint will return a binary classification
    of True for high default likelihood and False for low default likelihood. The
    response also includes the probability generated by the classifier. In the codebase,
    we have set anything above a 50% probability to be labeled as a high default likelihood.
    This can be adjusted to return more discretized labels like low, medium, and high
    default likelihood. The body of the requests requires the following parameters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个训练过的 daal4py 优化的 XGBoost 分类器，我们可以向我们的 API 发出推断请求。/predict 端点将返回一个二元分类，True
    表示高违约可能性，False 表示低违约可能性。响应还包括分类器生成的概率。在代码库中，我们将任何超过 50% 的概率标记为高违约可能性。这可以调整为返回更离散的标签，如低、中和高违约可能性。请求的主体需要以下参数：
- en: 'bucket: name of S3 bucket'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bucket: S3 桶的名称'
- en: 'model_name: the name of the trained model is S3'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'model_name: 训练模型的名称是 S3'
- en: 'data_key: folder path that contains .sav processing pipeline file (should be
    the same as your processed data folder)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'data_key: 包含 .sav 处理管道文件的文件夹路径（应与处理数据的文件夹相同）'
- en: 'model_key: folder where your trained model was saved in S3'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'model_key: 你训练的模型在 S3 中保存的文件夹'
- en: 'sample: your model inputs as a list of dictionaries'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例：将你的模型输入作为字典列表
- en: 'backend: options include “local” or “s3” — the codebase supports running the
    entire app locally for debugging purposes. When using the “s3” backend, the “local_model_path”
    and “preprocessor_path” parameters can be set to “None”.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端：选项包括“local”或“s3” — 代码库支持在本地运行整个应用程序以进行调试。当使用“s3”后端时，可以将“local_model_path”和“preprocessor_path”参数设置为“None”。
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can expect a response from the server fairly quickly (Figure 7).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以很快收到服务器的响应（见图 7）。
- en: '![](../Images/110911bd912e88f92de812e1a5e3c18f.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/110911bd912e88f92de812e1a5e3c18f.png)'
- en: Figure 7\. Payload and response from the /predict endpoint — Image by Author
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7\. /predict 端点的有效载荷和响应 — 作者提供的图像
- en: You can find all of the source code for this tutorial in our public [GitHub
    Repository](https://github.com/intel/kubernetes-intel-aws-high-availability-training).
    Feel free to leave a comment or [message me on LinkedIn](https://www.linkedin.com/in/eduandalv/)
    if you have any questions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我们的公共 [GitHub 仓库](https://github.com/intel/kubernetes-intel-aws-high-availability-training)
    找到本教程的所有源代码。如果你有任何问题，欢迎留言或 [在 LinkedIn 上联系我](https://www.linkedin.com/in/eduandalv/)。
- en: Summary and Discussion
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与讨论
- en: In this tutorial, we have demonstrated how to build a Kubernetes application
    on the AWS cloud based on a high-availability solution architecture. We have highlighted
    the use of Intel Xeon processors and AI Kit components to improve performance
    while enabling scale with Kubernetes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们展示了如何在 AWS 云上基于高可用性解决方案架构构建 Kubernetes 应用程序。我们重点介绍了使用英特尔 Xeon 处理器和 AI
    Kit 组件来提高性能，同时实现与 Kubernetes 的扩展。
- en: We encourage readers to watch for upcoming workshops and future Intel Cloud
    Optimization Modules (ICOMs), as leveraging the Intel optimizations in these modules
    can qualify their applications for an “Accelerated by Intel” badge.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励读者关注即将举办的研讨会和未来的英特尔云优化模块（ICOMs），因为利用这些模块中的英特尔优化可以使他们的应用程序获得“由英特尔加速”徽章。
- en: Our goal with ICOMs is to help developers enhance the performance and scalability
    of their applications with intel software and hardware. With the increasing demand
    for high-performance cloud applications, it is crucial for developers to stay
    informed and utilize the latest technologies and tools available to them.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 ICOMs 目标是帮助开发人员通过英特尔的软件和硬件提升应用程序的性能和可扩展性。随着对高性能云应用程序的需求增加，开发人员需要保持信息更新，利用最新的技术和工具。
- en: '***Don’t forget to follow*** [***my profile for more articles***](https://eduand-alvarez.medium.com/)
    ***like this!***'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '***别忘了关注*** [***我的个人资料以获取更多类似文章***](https://eduand-alvarez.medium.com/) ***！***'
