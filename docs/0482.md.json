["```py\ndef dgp(n=2000, p=10):\n\n    Xmat = np.random.multivariate_normal(np.zeros(p), np.eye(p), size=n).astype('float32')\n\n    T = np.random.binomial(1, 0.5, n).astype('int8')\n\n    col_list = ['X' + str(x) for x in range(1,(p+1))]\n\n    df = pd.DataFrame(Xmat, columns = col_list)\n\n    # functional form of the covariates\n    B = 225 + 50*df['X1'] + 5*df['X2'] + 20*(df['X3']-0.5) + 10*df['X4'] + 5*df['X5']\n\n    # constant ate\n    tau = 5 \n\n    Y = (B + tau*T + np.random.normal(0,25,n)).astype('float32')\n\n    df['T'] = T\n    df['Y'] = Y\n\n    return df\n```", "```py\ndata = dgp()\nols = smf.ols('Y ~ T', data = data).fit(cov_type='HC1',use_t=True)\nols.summary().tables[1]\n```", "```py\ndef experiment(**kwargs):\n    dct = {}\n\n    n = kwargs['n']\n    p = kwargs['p']\n\n    df = dgp(n,p)\n\n    #Difference-in-means\n    mu_treated = np.mean(df.query('T==1')['Y'])\n    mu_control = np.mean(df.query('T==0')['Y'])\n\n    dct['DIM'] = mu_treated - mu_control\n\n    return dct\n```", "```py\ndef plot_experiment(results):\n    results_long = pd.melt(results, value_vars=results.columns.tolist() )  \n    mu = 5\n    p = (ggplot(results_long, aes(x='value') ) + \n     geom_density(size=1, color='salmon')+\n     geom_vline(xintercept=mu, colour='black', linetype='dashed' ) + \n     annotate(\"text\", x=mu, y=.1, label=\"True Mean\", size=15)+\n     labs(color='Method')  +\n     xlab('Estimate') +\n     theme(figure_size=(10, 8))\n    )\n    return p\n```", "```py\n%%time\ntqdm._instances.clear() \nsim = 10000\nresults = Parallel(n_jobs=8)(delayed(experiment)(n=2000, p=10)\\\n                                    for _ in tqdm(range(sim)) )\n\nresults_df = pd.DataFrame(results)\nplot = plot_experiment(results_df) \n```", "```py\ndata = dgp(n=10000, p=10)\nols = smf.ols('Y ~ T', data = data).fit(cov_type='HC1',use_t=True)\nols.summary().tables[1]\n```", "```py\ndata = dgp(n=2000, p=10)\nols = smf.ols('Y ~ T+' + ('+').join(data.columns.tolist()[0:10]),\n                 data = data).fit(cov_type='HC1',use_t=True)\n\nols.summary().tables[1]\n```", "```py\nmodel_t = smf.ols('T ~ ' + ('+').join(data.columns.tolist()[0:10]), data=data).fit(cov_type='HC1',use_t=True)\nmodel_y = smf.ols('Y ~ ' + ('+').join(data.columns.tolist()[0:10]), data=data).fit(cov_type='HC1',use_t=True)\n\nresiduals = pd.DataFrame(dict(res_y=model_y.resid, res_t=model_t.resid))\n\np1=(ggplot(residuals, aes(x='res_t', y='res_y'))+\n geom_point(color='c') + \n ylab(\"Spending Amount ($) Residual\") +\n xlab(\"Received Coupon Residual\") +\n  geom_smooth(method='lm',se=False, color=\"salmon\")+\n theme(figure_size=(10, 8)) +\n  theme(axis_text_x = element_text(angle = 0, hjust = 1))\n)\n\np1 \n```", "```py\nprint(\"Spending Amount Variance:\", round(np.var(data[\"Y\"]),2))\nprint(\"Spending Amount Residual Variance:\", round(np.var(residuals[\"res_y\"]),2))\n```", "```py\nmodel_res = smf.ols('res_y ~ res_t', data=residuals).fit()\nmodel_res.summary().tables[1]\n```"]