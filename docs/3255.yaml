- en: A Guide to Matplotlib Subfigures for Creating Complex Multi-Panel Figures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-guide-to-matplotlib-subfigures-for-creating-complex-multi-panel-figures-70fa8f6c38a4?source=collection_archive---------3-----------------------#2023-11-01](https://towardsdatascience.com/a-guide-to-matplotlib-subfigures-for-creating-complex-multi-panel-figures-70fa8f6c38a4?source=collection_archive---------3-----------------------#2023-11-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Subfigures — a powerful tool for beautiful multi-panel figures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://tdrose1.medium.com/?source=post_page-----70fa8f6c38a4--------------------------------)[![Tim
    Rose](../Images/12bcd585b5dad388dad140b4ca049392.png)](https://tdrose1.medium.com/?source=post_page-----70fa8f6c38a4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----70fa8f6c38a4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----70fa8f6c38a4--------------------------------)
    [Tim Rose](https://tdrose1.medium.com/?source=post_page-----70fa8f6c38a4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb2b238bba8ac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-guide-to-matplotlib-subfigures-for-creating-complex-multi-panel-figures-70fa8f6c38a4&user=Tim+Rose&userId=b2b238bba8ac&source=post_page-b2b238bba8ac----70fa8f6c38a4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----70fa8f6c38a4--------------------------------)
    ·8 min read·Nov 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F70fa8f6c38a4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-guide-to-matplotlib-subfigures-for-creating-complex-multi-panel-figures-70fa8f6c38a4&user=Tim+Rose&userId=b2b238bba8ac&source=-----70fa8f6c38a4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F70fa8f6c38a4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-guide-to-matplotlib-subfigures-for-creating-complex-multi-panel-figures-70fa8f6c38a4&source=-----70fa8f6c38a4---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Complex (scientific) figures often consist of multiple plots with different
    sizes or annotations. If you work with the matplotlib/seaborn ecosystem, there
    are many ways to create complex figures, e.g. using [gridspec](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/gridspec_multicolumn.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this can get challenging very fast, especially if you want to integrate
    multi-axes plots from seaborn such as [jointplot](https://seaborn.pydata.org/generated/seaborn.jointplot.html)
    or [pairgrid](https://seaborn.pydata.org/generated/seaborn.PairGrid.html#seaborn.PairGrid)
    into your figure because they don’t have the option to provide axes as input parameters.
    But there is another way to assemble figures in matplotlib instead of just working
    with subplots: [**Subfigures**](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subfigures.html).
    A powerful framework to create multi-panel figures like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d51973be73c935f8aa76c990a9f91967.png)'
  prefs: []
  type: TYPE_IMG
- en: The goal of the article is to show you how to make this figure.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will give an introduction to subfigures and their capabilities.
    We will combine subfigures with subplots and gridspecs to recreate this figure.
  prefs: []
  type: TYPE_NORMAL
- en: To follow this article, you should have a basic understanding of matplotlib
    [subplots](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplot.html)
    and [gridspec](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/gridspec_multicolumn.html)
    (if not, you can check out the linked tutorials).
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib subfigures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we import matplotlib, seaborn and load some example data, which we will
    use to fill the plots with content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s start with the concept of subfigures in matplotlib. To create subfigures,
    we first need to create a figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'From this point, we can define subfigures similarly to subplots. It is possible
    to create a grid of subfigures by providing the number of rows (*2*) and columns
    (*1*). We additionally color the figure backgrounds to highlight them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Just figures without any plots (axes) will not be shown, therefore we need
    to define subplots for each subfigure. Here we can already see one great feature
    of subfigures, for each subfigure we can define different layouts of subplots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4f54a35709dd40f98ad718729e154456.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have two separate figures that we can set up differently but place together
    in one final figure. Of course, we can also play with the size ratios of subfigures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7d814070c4d843fbf4b69749262e512b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, there is one drawback of subfigures. To eliminate overlapping labels
    or elements outside the figure, `plt.tight_layout()` is a good way of squeezing
    everything nicely into the figure. However, this is not supported for subfigures.
    Here you can see what happens if you try to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b0e637eec7c27b22e48476cb9a6f08d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Not really what we intended… To insert spacing between plots and remove any
    overlaps, we need to use the `subplots_adjust` function, which allows us to insert
    (or remove) more space between subplots and the borders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2e48ccfb91bc205dce89c6fb650be26c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another great aspect of subfigures is that they can be nested, meaning we can
    divide every subfigure into more subfigures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8683969839caafef791e8bd49c4bf8ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s insert a [jointplot](https://seaborn.pydata.org/generated/seaborn.jointplot.html)
    into this figure. Unfortunately, this is not straightforward, since the seaborn
    function does not have the possibility to provide a figure object as an input.
    But if we look into the [source code of the function](https://github.com/seaborn/seaborn/blob/d1c04f2c2c4dbd11ede016405b5ea51380e37f51/seaborn/axisgrid.py#L1640),
    we can see that this plot consists of three subplots with shared x and y axis
    that are defined through a gridspec.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means we can easily plot it inside a subfigure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f95a47ad62448090ef88650407028719.png)'
  prefs: []
  type: TYPE_IMG
- en: You can play with the ratio parameter and see how the plot is changing.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have all the tools we need to create complex figures, by using subfigure,
    subplots and grids. For such figures, it is often crucial to annotate each plot
    with letters to explain them in the caption or reference them in a text. This
    is often done with other software such as Adobe Illustrator or Inkscape after
    the figure is created. But we can also do it directly in python, which will save
    us additional effort later.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we will define a function to make such annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The function takes an axes as an input, together with x and y coordinates,
    which will transformed into relative axes coordinates. We can use this to annotate
    some plots in our previously created figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/36c2342c620bdafac1e5ed2f1bc31e94.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now create the plot shown at the beginning of the article. It consists
    of three subfigures. One top subfigure, spanning the first row, and two bottom
    subfigures. The left bottom subfigure will be used for the jointplot (as shown
    before) and for the right bottom subfigure we will define a gridspec for place
    4 subplots of different sizes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d51973be73c935f8aa76c990a9f91967.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subfigures are a relatively new concept in matplotlib. They make it easy to
    assemble large figures with many plots. All the things shown in this article can
    also be achieved entirely using gridspec. However, this requires a large grid
    with many considerations for the sizes of each subplot. Subfigures are more plug-and-play
    and the same result can be achieved with less work.
  prefs: []
  type: TYPE_NORMAL
- en: For me, subfigures are a very convenient tool for creating scientific figures
    and I hope they can be helpful for you, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also find all the code from this article on GitHub: [https://github.com/tdrose/medium-articles-code](https://github.com/tdrose/medium-articles-code)'
  prefs: []
  type: TYPE_NORMAL
- en: Unless otherwise noted, all images were created by the author.
  prefs: []
  type: TYPE_NORMAL
