["```py\ndef standardize_location(df, description_series):\n    df[\"ai_location_description\"] = df[description_series].apply(_gpt_chat)\n\n    return df\n\ndef _gpt_chat(input_text):\n    prompt = \"\"\"Standardize the following location description into text\n             that could be fed into a Geocoding API. When responding, only\n             return the output text.\"\"\"\n\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\"role\": \"system\", \"content\": prompt},\n            {\"role\": \"user\", \"content\": input_text},\n        ],\n        temperature=0.7,\n        n=1,\n        max_tokens=150,\n        stop=None,\n    )\n\n    return response.choices[0].message.content.strip().split(\"\\n\")[-1]\n```", "```py\n# Esri Geocoder\ndef geocode_esri(df, description_series):\n    df[\"xy\"] = df[description_series].apply(\n        _single_esri_geocode\n    )\n\n    df[\"x\"] = df[\"xy\"].apply(\n        lambda row: row.split(\",\")[0].strip()\n    )\n    df[\"y\"] = df[\"xy\"].apply(\n        lambda row: row.split(\",\")[1].strip()\n    )\n\n    df[\"x\"] = pd.to_numeric(df[\"x\"], errors=\"coerce\")\n    df[\"y\"] = pd.to_numeric(df[\"y\"], errors=\"coerce\")\n\n    df = df[df[\"x\"].notna()]\n    df = df[df[\"y\"].notna()]\n\n    return df\n\ndef _single_esri_geocode(input_text):\n    base_url = \"https://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates\"\n    params = {\n        \"f\": \"json\",\n        \"singleLine\": input_text,\n        \"maxLocations\": \"1\",\n        \"token\": os.environ[\"GEOCODE_TOKEN\"],\n    }\n\n    response = requests.get(base_url, params=params)\n\n    data = response.json()\n\n    try:\n        x = data[\"candidates\"][0][\"location\"][\"x\"]\n        y = data[\"candidates\"][0][\"location\"][\"y\"]\n\n    except:\n        x = None\n        y = None\n\n    return f\"{x}, {y}\"\n```", "```py\n# Google Geocoder\ndef geocode_google(df, description_series):\n    df[\"xy\"] = df[description_series].apply(\n        _single_google_geocode\n    )\n\n    df[\"x\"] = df[\"xy\"].apply(\n        lambda row: row.split(\",\")[0].strip()\n    )\n    df[\"y\"] = df[\"xy\"].apply(\n        lambda row: row.split(\",\")[1].strip()\n    )\n\n    df[\"x\"] = pd.to_numeric(df[\"x\"], errors=\"coerce\")\n    df[\"y\"] = pd.to_numeric(df[\"y\"], errors=\"coerce\")\n\n    df = df[df[\"x\"].notna()]\n    df = df[df[\"y\"].notna()]\n\n    return df\n\ndef _single_google_geocode(input_text):\n    base_url = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    params = {\n        \"address\": input_text,\n        \"key\": os.environ[\"GOOGLE_MAPS_KEY\"],\n        \"bounds\": \"43.00,-97.50 49.5,-89.00\",\n    }    \n\n    response = requests.get(base_url, params=params)\n\n    data = response.json()\n\n    try:\n        x = data[\"results\"][0][\"geometry\"][\"location\"][\"lng\"]\n        y = data[\"results\"][0][\"geometry\"][\"location\"][\"lat\"]\n\n    except:\n        x = None\n        y = None\n\n    return f\"{x}, {y}\"\n```", "```py\n |  Geocoding Process  |  Mean  | StdDev |  MAE   |  RMSE  |\n        | ------------------- | ------ | ------ | ------ | ------ |\n        | Google with GPT 3.5 | 0.1012 | 1.8537 | 0.3698 | 1.8565 |\n        | Google with Raw     | 0.1047 | 1.1383 | 0.2643 | 1.1431 |\n        | Esri with GPT 3.5   | 0.0116 | 0.5748 | 0.0736 | 0.5749 |\n        | Esri with Raw       | 0.0001 | 0.0396 | 0.0174 | 0.0396 |\n        | GPT 3.5 Geocoding   | 2.1261 | 80.022 | 45.416 | 80.050 |\n```", "```py\n |  Geocoding Process  | 75% ET | 90% ET | 95% ET | Run Time |\n       | ------------------- | ------ | ------ | ------ | -------- |\n       | Google with GPT 3.5 | 0.0683 | 0.3593 | 3.3496 | 1m 59.9s |\n       | Google with Raw     | 0.0849 | 0.4171 | 3.3496 | 0m 23.2s |\n       | Esri with GPT 3.5   | 0.0364 | 0.0641 | 0.1171 | 2m 22.7s |\n       | Esri with Raw       | 0.0362 | 0.0586 | 0.1171 | 0m 51.0s |\n       | GPT 3.5 Geocoding   | 195.54 | 197.86 | 199.13 | 1m 11.9s |\n```"]