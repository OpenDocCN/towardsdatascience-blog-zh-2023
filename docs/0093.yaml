- en: 'The Kinetic Theory of Gases: Modeling the Dynamics of Ideal Gas Molecules'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-kinetic-theory-of-gases-modeling-the-dynamics-of-ideal-gas-molecules-bba2be4e22a?source=collection_archive---------5-----------------------#2023-01-06](https://towardsdatascience.com/the-kinetic-theory-of-gases-modeling-the-dynamics-of-ideal-gas-molecules-bba2be4e22a?source=collection_archive---------5-----------------------#2023-01-06)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Statistical mechanics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Develop a framework to simulate and visualize molecular collisions, and extract
    thermodynamic insights using Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@ChemAndCode?source=post_page-----bba2be4e22a--------------------------------)[![Gaurav
    Deshmukh](../Images/98433b1a256f160792a7b2b0874a2081.png)](https://medium.com/@ChemAndCode?source=post_page-----bba2be4e22a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bba2be4e22a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bba2be4e22a--------------------------------)
    [Gaurav Deshmukh](https://medium.com/@ChemAndCode?source=post_page-----bba2be4e22a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5a75283b2c71&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-kinetic-theory-of-gases-modeling-the-dynamics-of-ideal-gas-molecules-bba2be4e22a&user=Gaurav+Deshmukh&userId=5a75283b2c71&source=post_page-5a75283b2c71----bba2be4e22a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bba2be4e22a--------------------------------)
    ·14 min read·Jan 6, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbba2be4e22a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-kinetic-theory-of-gases-modeling-the-dynamics-of-ideal-gas-molecules-bba2be4e22a&user=Gaurav+Deshmukh&userId=5a75283b2c71&source=-----bba2be4e22a---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbba2be4e22a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-kinetic-theory-of-gases-modeling-the-dynamics-of-ideal-gas-molecules-bba2be4e22a&source=-----bba2be4e22a---------------------bookmark_footer-----------)![](../Images/3920606289c067f4ef4a33c03e3bb261.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Terry Vlisidis](https://unsplash.com/@vlisidis?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine someone constantly throwing a ball at your head. Depending upon the
    size and mass of the ball, you may feel anything between mild annoyance and unbearable
    agony. And yet, there are countless such “balls” colliding with, not only your
    head, but your whole body every instant and you do not feel a thing. Nitrogen,
    oxygen, and water molecules in the air are in constant random motion around you,
    even when the air appears to be stationary. The result of the collisions of these
    molecules with you is that air exerts a certain pressure on you (termed atmospheric
    pressure). Since we are “used to” the atmospheric pressure, it does not feel like
    anything out of the ordinary, but if you are ever in an airplane or a hyperbaric
    chamber, where the pressure deviates from the atmospheric pressure, you may notice
    different sensations, like ear-popping, that are your body’s responses to changes
    in pressure.
  prefs: []
  type: TYPE_NORMAL
- en: A macroscopic understanding of pressure, and how it varies with the volume that
    a gas occupies was given by Robert Boyle in the 17th century, that is commonly
    termed as Boyle’s law. However, it was only a century later that a qualitative
    molecular picture was provided by Daniel Bernoulli to explain pressure, and also
    relate it to the temperature and kinetic energy of molecules. This “kinetic theory,”
    however, did not find much acceptance until, in the 19th century, James Clerk
    Maxwell, building on the work of Rudolf Clausius, formalized it in terms of a
    statistical law and Ludwig Boltzmann illuminated its relationship with entropy,
    leading to the formulation of the Maxwell-Boltzmann distribution of velocities
    of molecules in a gas. This eventually led to the development of a detailed theoretical
    treatment of gases from the molecular point of view, which was consistent with
    the well-understood macroscopic view.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will try to link the molecular picture of gases with its
    macroscopic properties — that is, pressure, volume, and temperature — by performing
    a series of numerical simulations using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Theoretical background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kinetic theory of gases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The kinetic theory of gases is a model that describes a gas in terms of molecules
    that are in constant, random motion.
  prefs: []
  type: TYPE_NORMAL
- en: Molecules travel in straight lines until they are interrupted by elastic collisions
    with other molecules or the walls of the container. Elasticity implies that no
    kinetic energy is lost in collisions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Molecules do not “interact” with each other, that is, they do not exert any
    attractive or repulsive intermolecular forces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The volume occupied by the molecules themselves is considered to be negligible
    compared to the volume occupied by the gas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If molecules following these rules are sampled and their velocities measured,
    they will conform to the Maxwell-Boltzmann distribution. The temperature of the
    gas is actually a property that we define based on the shape of the distribution.
    The higher the average kinetic energy is (or the flatter the distribution is),
    the higher the temperature of the gas is, and vice versa. It does not make sense
    to define a temperature of an individual molecule; rather, it is an averaged property
    of a collection of molecules.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the kinetic theory of gases is a model, it is not necessarily a true
    reflection of reality (as is the case with all scientific models). Molecular collisions
    are not strictly elastic, and molecules do have short-range interactions. However,
    a model with these relatively simple assumptions is able to replicate the properties
    of an ideal gas very well, which is a very useful macroscopic model to predict
    the behavior of gases under various conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Ideal gas law
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ideal gas is a hypothetical gas whose properties are related to each other
    through a simple equation-of-state, called the ideal gas law.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0de1f0da1be9799239ba418fa11d2e37.png)'
  prefs: []
  type: TYPE_IMG
- en: Here *P* refers to the pressure of the gas, *V* refers to the volume of the
    container, *T* is the temperature, and *n* is the number of moles of the gas.
    If any of these three quantities are held constant, the fourth does not change
    as well, and this is reflected through *R*, which is the universal gas constant.
    The ideal gas law is an accurate model for a gas that is at a high temperature
    or low pressure, since most of the assumptions of the kinetic theory of gases
    are true in these regimes.
  prefs: []
  type: TYPE_NORMAL
- en: We will test two relationships based on the ideal gas law with our model.
  prefs: []
  type: TYPE_NORMAL
- en: At a constant temperature and number of moles, the pressure is inversely proportional
    to the volume.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At a constant volume and number of moles, the pressure is directly proportional
    to the temperature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The former is referred to as Boyle’s law and the latter is referred to as Gay-Lussac’s
    law, both named after researchers that first discovered the relationships between
    these variables through experiments.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the computational model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To simulate the motion of molecules according to the kinetic theory of gases,
    we need to set up a dynamic n-body simulation with collisions. Note that the objective
    of this article is to produce a simulation for pedagogical purposes. Therefore,
    the code is set up to maximize understanding, not execution speed.
  prefs: []
  type: TYPE_NORMAL
- en: Defining molecular properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by importing all the required modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, we will define a class called *Molecule.* Objects of this class will
    store properties such as the masses, positions and velocities of molecules in
    the simulation. We also define an attribute called color, that may be used to
    distinguish between different gases and set the color of the points in the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding molecules to a box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we create a *Simulation* class and define key input parameters, such as
    the dimensions of the simulation box, that ultimately control the volume of the
    gas. We also initialize variables for bookkeeping, such as for the wall momentum,
    that will allow us to calculate pressure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To add molecules, we first need to initialize their positions and velocities.
    For both, we can define functions that create arrays of values based on a distribution
    input by the user. Note that it does not matter what distributions the initialized
    positions and velocities follow (as long as there is nothing unphysical, like
    a molecule outside the box). We shall see that the velocities eventually follow
    the same distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It is time to add the molecules to the box. We call the two previously defined
    functions to generate arrays of initial positions and velocities, create objects
    of the *Molecule* class, and assign them to the objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we write a function for general bookkeeping, that is, to make matrices
    to store the position and velocity vectors as well as their magnitudes. We also
    make a distance matrix, that stores the distance between every two molecules.
    This will come in handy to detect collisions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Detecting and handling collisions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we come to the meat of the simulation, that is, modeling the dynamics
    of the molecules. Collision physics are defined for a 2D plane, but extension
    to a 3D box is possible with minor changes. We define a function that goes through
    a three-item checklist:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if there are molecule-molecule collisions and if yes, update velocities
    accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update positions of the molecules based on their velocities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if there are molecule-wall collisions and if yes, update velocities and
    wall momentum accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To filter molecules that are close enough to collide, we scour the distance
    matrix and return the pairs of indices of molecules that have distances less than
    the sum of their radii. It is possible for molecules to be within this cutoff,
    and yet be departing away from each other. So, we apply another criterion (see
    **Figure 1**) to investigate whether molecules are approaching each other. If
    they are, we update their velocities based on the equations given in **Figure
    1**. We arrive at these equations by conserving the kinetic energies and the linear
    momenta (along the collision axis) of the molecules.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b9879f3e304aa2046ca35f955680f30e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 1**: Schematic showing collision of two spheres in a 2D plane. Variables
    and equations in blue represent tangential and normal components of velocities
    (to the collision axis). Variables in bold are vectors, the rest are scalars.
    Angular brackets indicate dot (inner) product.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the positions of the molecules is quite simple. We add the product
    of the velocity vector and the timestep to the previous position to get the new
    position. To identify collisions with the walls, we simply check if the new position
    of a molecule exceeds either the lower or upper bounds of the dimensions of the
    box. If it does, we change the sign of the velocity normal to the wall, and set
    the new position based on this velocity. Further, we add twice the magnitude of
    this velocity to the variable tracking the momentum exchanged with the wall.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That’s it, the hard part is done! Finally, we need to write a function to run
    the simulation. This involves calling the functions that we have defined previously
    in a loop that runs for a specified number of iterations, calculated based on
    the specified simulation time and time step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That concludes the code involving the physics of the simulation. Running a simulation
    is no fun, however, if you cannot visualize it. Let’s utilize matplotlib to create
    an animation of the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: Animating the simulation box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by writing a function to create a figure with an aspect ratio that
    is consistent with the provided dimensions of the box.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will use the Animation module in matplotlib to make the animation. To utilize
    that, we need to define a function that takes the iteration number (frame) as
    input and creates a plot. This function is then provided as an argument to the
    FuncAnimation function in the Animation module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There is another animation that we can make, showing histograms of velocities
    every iteration. This will allow us to observe the convergence of the velocity
    distribution to a Maxwell-Boltzmann distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Running the simulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s time to reap the rewards of our hard work. The effort spent in writing
    the code in an object-oriented fashion will pay off now, since we now have a generalized
    solver and can run simulations with different input parameters with just a few
    lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Animations of the simulation box and velocity histogram corresponding to the
    above simulation are shown below. In the first graphic, the movements of the molecules
    in the box, along with collisions, are shown, and the trajectory of one selected
    molecule is highlighted in red, for illustrative purposes. In the second graphic,
    the histogram of velocities of all the molecules in the box is shown at each iteration,
    and it is clear from the animation that the initial distribution, which is Gaussian
    (as specified), changes to a distribution that has a narrower left tail and broader
    right tail, mimicking the characteristics of a Maxwell-Boltzmann distribution.
    More rigorous statistical tests can be used to support this quantitatively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Graphic 1:** Animation of simulaton box'
  prefs: []
  type: TYPE_NORMAL
- en: '**Graphic 2:** Animation of histogram of velocities'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting thermodynamic insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We return to the ideal gas law that relates various thermodynamic variables
    to each other. As mentioned previously, we test two relationships — pressure against
    volume and pressure against temperature. We keep the number of molecules in the
    box constant for all the subsequent simulations. The three variables — pressure,
    volume, and temperature — are calculated as follows: the pressure is the net momentum
    exchanged with the walls during the entire simulation divided by the product of
    the total simulation time and perimeter of the box. The volume is defined as the
    product of the length and breadth of the box (technically it is the area, since
    we are working in two dimensions, but the insights can be generalized easily to
    three dimensions).'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the temperature is trickier — since the temperature is proportional
    to the average kinetic energy of the molecules in the box, we consider the square
    of the mean velocity of the initial distribution to be a proxy for temperature.
    To remove any stochasticity from this estimate, the initial velocities assigned
    to the molecules in these simulations are set to a single specified value. For
    instance, if the specified value is 1 m/s, the initial velocities of all molecules
    are either +1 m/s or -1 m/s. This ensures that the initial total kinetic energy
    has a well-defined value that remains the same across all simulations that have
    the same temperature. Essentially, when the temperatures in two simulations are
    same, their initial total kinetic energies are same, which should ensure that
    the average kinetic energy during the simulation is also the same.
  prefs: []
  type: TYPE_NORMAL
- en: The results of the simulations are given in **Figure 2**. The average pressure
    on the walls of the box increases linearly with an increase in the inverse of
    the volume at a constant temperature (see **Figure 2a**). The slope of each isotherm
    is proportional to the temperature, consistent with the ideal gas law. In a second
    set of simulations, it is observed that the pressure increases linearly with an
    increase in the temperature at a constant volume (see **Figure 2b**). In this
    case, the slope of each isochore is inversely proportional to the volume, also
    consistent with the ideal gas law. Therefore, these microscopic simulations are
    able to reproduce trends in thermodynamic variables that are consistent with macroscopic
    theories like the ideal gas law.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f499719677894ae4a715dee84bb0b12.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 2:** **(a)** Variation of average pressure on the wall with inverse
    volume for different temperatures, **(b)** variation of average pressure on the
    wall with temperature for different volumes'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The n-body simulation presented in this article is an example of a simple molecular
    dynamics simulation without any interactive forces. This is, of course, a gross
    oversimplification of how molecules behave and interact with each other but, as
    we have seen, it is sufficient to predict properties of an ideal gas. However,
    the ideal gas assumption is rarely used for calculating properties of gases for
    engineering applications, like the expansion of steam in a steam turbine. More
    complex equation-of-state models that include interactions between molecules are
    required to accurately model such processes. Adding short-range interactions between
    molecules in this code can lead to better reproduction of trends predicted by
    such models for real gases. Further, the usage of potentials like Lennard-Jones
    and addition of thermostats can allow prediction of properties for liquids as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: The complete code for this simulation is available on [GitHub](https://github.com/gauravsdeshmukh/ktg-python).
    If you have any questions, suggestions, or comments, please feel free to reach
    out to be on [email](mailto:gauravsdeshmukh@outlook.com) or [Twitter](https://twitter.com/intent/follow?screen_name=ChemAndCode).
    All images unless otherwise noted are by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read more about the history of the kinetic theory of gases, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: S. Brush, [History of the Kinetic Theory of Gases](https://www.terpconnect.umd.edu/~brush/pdf/ITALENC.pdf)
    (2004)
  prefs: []
  type: TYPE_NORMAL
