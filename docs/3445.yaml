- en: Creating a Climate GPT Using NASA’s Power API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/developing-a-climate-gpt-using-nasas-power-api-37b3d9e2a664?source=collection_archive---------4-----------------------#2023-11-20](https://towardsdatascience.com/developing-a-climate-gpt-using-nasas-power-api-37b3d9e2a664?source=collection_archive---------4-----------------------#2023-11-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@astrobagel?source=post_page-----37b3d9e2a664--------------------------------)[![Matthew
    Harris](../Images/4fa3264bb8a028633cd8d37093c16214.png)](https://medium.com/@astrobagel?source=post_page-----37b3d9e2a664--------------------------------)[](https://towardsdatascience.com/?source=post_page-----37b3d9e2a664--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----37b3d9e2a664--------------------------------)
    [Matthew Harris](https://medium.com/@astrobagel?source=post_page-----37b3d9e2a664--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4a2cd25b8ff9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-a-climate-gpt-using-nasas-power-api-37b3d9e2a664&user=Matthew+Harris&userId=4a2cd25b8ff9&source=post_page-4a2cd25b8ff9----37b3d9e2a664---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----37b3d9e2a664--------------------------------)
    ·10 min read·Nov 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F37b3d9e2a664&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-a-climate-gpt-using-nasas-power-api-37b3d9e2a664&user=Matthew+Harris&userId=4a2cd25b8ff9&source=-----37b3d9e2a664---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F37b3d9e2a664&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeveloping-a-climate-gpt-using-nasas-power-api-37b3d9e2a664&source=-----37b3d9e2a664---------------------bookmark_footer-----------)![](../Images/997c4c83d6acb83a9aec8acb7a4b5a44.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image created in ChatGPT
  prefs: []
  type: TYPE_NORMAL
- en: TL;DR
  prefs: []
  type: TYPE_NORMAL
- en: '*In this article we explore OpenAI’s new GPTs feature, which offers a no-code
    way to quickly create AI agents that can automatically call external APIs to get
    data as well as generate code to answer data analysis questions. In just a few
    hours we built a chatbot that can answer questions about climate based on data
    from the NASA Power API as well as carry out data analysis tasks. The GPT user
    experience OpenAI has created is excellent, significantly lowering the barrier
    to creating state-of-the-art AI agents. That said, the external API calling configuration
    can be a bit technically challenging and requires that the API has an openapi.json
    file available. Also, cost is still an unknown, and while in preview it would
    seem that GPTs have some caps on the number of interactions allowed per day. However,
    with the imminent launch of OpenAI’s GPT store, we may see an explosion in these
    GPT AI agents and even now they offer some amazing capabilities.*'
  prefs: []
  type: TYPE_NORMAL
- en: What Are GPT’s?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[GPTs were recently launched](https://openai.com/blog/introducing-gpts) by
    OpenAI and offer a way for non-technical users to create AI chat agents powered
    by the powerful [GPT-4](https://openai.com/research/gpt-4) Large Language Model
    (LLM). Though it’s been possible to do most of what GPTs offer for some time through
    3rd party libraries like [LangChain](https://www.langchain.com/) and [autogen](https://github.com/microsoft/autogen),
    GPTs offer a native solution. With that comes a slick easy-to-use interface and
    tight integration with the OpenAI ecosystem. Importantly, they will soon also
    be available in a new GPT store, raising the possibility that we could be seeing
    an App store situation and the explosion of AI agents. Or not, it’s difficult
    to tell, but the potential is definitely there.'
  prefs: []
  type: TYPE_NORMAL
- en: GPTs come with some very powerful features, notably the ability to surf the
    web, generate and run code, and the killer feature, the ability to communicate
    with APIs to get external data. The last one is very powerful as it means it should
    be easy to create an AI agent on top of any data store that presents data using
    an API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GPTs are currently only available to ChatGPT plus subscribers. To create one,
    you will need to visit [chat.openai.com/create](https://chat.openai.com/create)
    which will prompt you for some details about what your GPT will do and the thumbnail
    image you’d like to use (it can be generated automatically using DALL-E-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a583d645f08f12e9d8a2e6a96186de0.png)'
  prefs: []
  type: TYPE_IMG
- en: For this analysis I used the prompt “**Create a climate indicators chatbot that
    uses the NASA Power API to get data**”. This created a GPT with the following
    system prompt (in the ‘instructions’ field under ‘Configure’) …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Which seems very reasonable based on the single sentence I provided. This can
    of course be adjusted to taste, and as we shall see below is also a good place
    to guide the chatbot regarding API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GPT can be configured with various capabilities. For our analysis, we will
    deactivate the ability to generate images and keep the ability to browse the web
    and generate and run code with Code Interpreter. For a production GPT I would
    probably deactivate web access and ensure all required data is provided by specified
    APIs, but for our analysis we’ll leave it on as it’s handy for getting latitude
    and longitude for places, required for calling the NASA Power API.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71b9c21d3b68bcaa940c9605c6bd633a.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring API Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the real heart of data-driven GPTs, configuring the API integration.
    To do this you will need to click ‘Configure’ at the top of your GPT, and scroll
    down, and click ‘Create Action’ …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5f93df3c0b03277dca02b4879d05f24.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring a GPT to communicate with NASA’s Power API for climate data
  prefs: []
  type: TYPE_NORMAL
- en: This opens a section where you can provide details of your API, either by providing
    a link to or pasting an [openapi.json](https://swagger.io/specification/) (previously
    swagger) API definition.
  prefs: []
  type: TYPE_NORMAL
- en: This of course raises a constraint that the external API needs to have an available
    openapi.json file. Though very common it isn’t true for many important APIs. Also,
    the default openapi.json often needs a little adjustment for the GPT to work.
  prefs: []
  type: TYPE_NORMAL
- en: The NASA Power API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this analysis, we will use [NASA’s Prediction of Worldwide Energy Resources
    (POWER)](https://power.larc.nasa.gov/docs/) API to get climate indicators. This
    amazing project combines a wide range of [data and model simulations](https://power.larc.nasa.gov/docs/methodology/)
    to provide a set of APIs for climate indicators at point locations. There are
    a few API endpoints, for this analysis we will use the [Indicators API](https://power.larc.nasa.gov/docs/services/api/application/indicators/)
    which includes an [openapi.json specification](https://power.larc.nasa.gov/api/pages/?urls.primaryName=Indicators)
    that was pasted in the GPT’s action configuration pane. It needed a little manipulation
    to (i) Ensure any parameter descriptions were under a 300-character limit; (ii)
    Add a ‘servers’ section …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When all exceptions in the GPT user interface were resolved, the end-point specified
    in the openapi.json appeared …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e4b938c33c6bd242f5eea7ca85cf337.png)'
  prefs: []
  type: TYPE_IMG
- en: NASA Power API indicators endpoints which the GPT user interface displays for
    a slightly adjusted openapi.json specification
  prefs: []
  type: TYPE_NORMAL
- en: I would have added other APIs, such as [climatology](https://power.larc.nasa.gov/api/pages/?urls.primaryName=Climatology),
    but OpenAI does not support multiple actions with the same end-point domain, ie
    I couldn’t create an action for each openapi.json NASA provides. I would have
    to merge them into one larger openapi.json file, not terribly difficult, but I
    opted to keep things simple for this analysis and use only the indicators end-point.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the System Prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From some experimentation with the API directly, I found that the field ‘user’
    was not provided in each call which resulted in an API exception. To get around
    this I added this to the system prompt …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Where I created an alphanumeric user ID for the API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Our GPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the GPT Edit screen, the left pane is for adjusting configuration, the right
    is for preview. I found the preview provides some extra debugging information
    available in the published GPT, especially useful for investigating API issues.
  prefs: []
  type: TYPE_NORMAL
- en: On asking “**What is the mean average rainfall in Tokyo**”, I was presented
    with a confirmation to use the API …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc7a9b0a2b50bb601cb4b0a65e2e6ab3.png)'
  prefs: []
  type: TYPE_IMG
- en: On the first use of an API action, the GPT owner is prompted for confirmation
  prefs: []
  type: TYPE_NORMAL
- en: I selected “Always” and the GPT called the API. However, it got a response stating
    that a year range was required …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cd05c3c1bf4888fe78ac8bacc7530955.png)'
  prefs: []
  type: TYPE_IMG
- en: This is rather cool, it already suggests a solution to use years 2018–2022,
    which I accept by responding “Yes” …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e02760c98a2f82c6a33e88b2495e6e2.png)'
  prefs: []
  type: TYPE_IMG
- en: GPT was able to retrieve and present Tokyo’s average rainfall using NASA’s Power
    API
  prefs: []
  type: TYPE_NORMAL
- en: Using the ‘Try it out’ button on the [API page](https://power.larc.nasa.gov/api/pages/?urls.primaryName=Indicators),
    entering the above year range and the latitude/longitude of Tokyo as 35.6895/139.6917
    I get a response. Since I wasn’t familiar with variable names, I asked the GPT
    …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1e20b4aa1bc22a5b3f308068710c1bb.png)'
  prefs: []
  type: TYPE_IMG
- en: The GPT is helpful in presenting API variable names
  prefs: []
  type: TYPE_NORMAL
- en: Going back to the API response we see that …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Hmm, so the underlying API data is actually providing data for each of the 12
    months, but the GPT response took the first 5 and presented them as yearly averages.
  prefs: []
  type: TYPE_NORMAL
- en: So things *looked* great, but as we often find, we need some taming of the LLM
    to avoid hallucination. Let’s provide a bit more context about the API in the
    ‘Instructions’ section of the GPT configuration …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Trying again “**What is the mean average rainfall in Tokyo**” …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a40b3bb8fd75f74ef3f91536237434cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Which is now correct. A good example of improving performance through a little
    prompting.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s ask it to do some analysis by asking “**Please plot monthly averages**”
    …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87100d827e14c1fb9f2e5e7345138fb1.png)'
  prefs: []
  type: TYPE_IMG
- en: GPTs can run code using data they retrieved from APIs to provide basic data
    analysis
  prefs: []
  type: TYPE_NORMAL
- en: This is very nifty! The values in the above plot align with those retrieved
    directly in the API. At the end of its response, there is a link where you can
    review the code it generated and ran …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c96642524dbd9450c84b0ea2f49e1e6.png)'
  prefs: []
  type: TYPE_IMG
- en: OK, now let’s try something more involved. First I asked what variables are
    available …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/143b7c6d3a59c7abb02a4b57f71f28fb.png)'
  prefs: []
  type: TYPE_IMG
- en: GPTs can interrogate documentation API endpoints
  prefs: []
  type: TYPE_NORMAL
- en: It automatically accessed the configuration endpoint to get metadata. Using
    this, let’s ask “**Is relative humidity correlated with solar radiation in Neath,
    South Wales in the last 5 years**” …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53117c61c65ffed1dfe7fb39ff62c195.png)'
  prefs: []
  type: TYPE_IMG
- en: It queried the API to get data, and then generated code to create a plot. Pretty
    amazing, but didn’t answer the full question, so let’s insist by asking “**Please
    calculate the correlation coefficient**” …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60aee58173c646fd101ad11f9cc0a17b.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking the link to see the code …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Which is reasonable.
  prefs: []
  type: TYPE_NORMAL
- en: OK, what about multiple location comparisons? First, I added this to the Instructions
    (system prompt) just to be clear …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, Let’s ask “**Was Svalbard more humid than Bargoed Wales in the last 5 years?**”
    …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea2b25f246d6e9ff5c1ec9d88a02bc80.png)'
  prefs: []
  type: TYPE_IMG
- en: Since the API needs latitude and longitude, the GPT confirms the approach. If
    we had configured a geocoding API as an action, this wouldn’t be required, but
    for now using central coordinates will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: The GPT called the API for both locations, extracted data, and compared …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c70e6e7abd1c2d80c463037aa1cb468e.png)'
  prefs: []
  type: TYPE_IMG
- en: I grew up in Bargoed, and can honestly say it’s a VERY rainy place. Calling
    the API directly, the above values are correct.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During this analysis a few challenges presented themselves.
  prefs: []
  type: TYPE_NORMAL
- en: First, there seems to be a limit on how many GPT-4 interactions are allowed
    per day. This was reached after an hour or two of testing, which seemed to be
    lower than published [GPT-4 limits](https://platform.openai.com/account/limits),
    so it might be related to the preview nature of GPTs. This would prevent any production
    rollout, but one hopes it will be resolved as part of the GPT store launch.
  prefs: []
  type: TYPE_NORMAL
- en: Performance can also be a bit slow at times, but given the GPT was calling an
    external API and running code, not unreasonably so. The UX is very good, indicating
    clearly to the user that things are in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Cost is an unknown, or at least, we couldn’t see any significant impact on costs
    but will continue to track this. GPTs generate code and analyze lengthy responses
    from APIs, so token costs may well be the blocker for many organizations in using
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions and Future Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this analysis, we only used the ‘indicators’ NASA Power API endpoints. It
    wouldn’t be much work to use all of NASA’s Power endpoints and incorporate geocoding
    to create a really comprehensive climate chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: GPTs offer a low-code way to develop state-of-the-art AI agents that are able
    to interface automatically with APIs and generate code to perform data analysis.
    They are potentially game-changing, we were able to create a fairly advanced climate
    chatbot in just a few hours without writing a line of code!
  prefs: []
  type: TYPE_NORMAL
- en: They are by no means perfect yet, the configuration UX is very, very good, but
    there are some areas such as API error reporting where the user is left guessing.
    External API setup requires technical knowledge, and some APIs might be missing
    the required openapi.json, making them harder to implement. Cost may also be prohibitive,
    but it’s difficult to say yet as GPTs are in preview. As always with *any* LLM
    application, much of the work will be to ensure factual correctness and the typical
    design and engineering workflows needed for any software project still of course
    apply.
  prefs: []
  type: TYPE_NORMAL
- en: GPTs are amazing, but aren’t magic … yet.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*For* [NASA’s Prediction of Worldwide Energy Resources (POWER)](https://power.larc.nasa.gov/docs/):
    *“These data were obtained from the NASA Langley Research Center (LaRC) POWER
    Project funded through the NASA Earth Science/Applied Science Program.”*'
  prefs: []
  type: TYPE_NORMAL
