- en: Finding Order in Chaos with Polynomial Chaos Expansion, using uncertainpy and
    chaospy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/finding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7?source=collection_archive---------6-----------------------#2023-10-12](https://towardsdatascience.com/finding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7?source=collection_archive---------6-----------------------#2023-10-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here’s how to tackle chaotic problems using math, physics, Python and data science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)[![Piero
    Paialunga](../Images/de2185596a49484698733e85114dd1ff.png)](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)
    [Piero Paialunga](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F254e653181d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&user=Piero+Paialunga&userId=254e653181d2&source=post_page-254e653181d2----a66487f330c7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)
    ·9 min read·Oct 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa66487f330c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&user=Piero+Paialunga&userId=254e653181d2&source=-----a66487f330c7---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa66487f330c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&source=-----a66487f330c7---------------------bookmark_footer-----------)![](../Images/d4bb664d6374834cbeda94edc5ee2d95.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image by author generated using Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: 'Three years ago I moved from Rome, Italy and I started living in Cincinnati,
    Ohio, USA, after a PhD offer from University of Cincinnati. There were (and there
    are) a lot of things that I miss about my city: the food, the weather, the beauty
    of the eternal city. One thing that I absolutely don’t miss about my city is **the
    insane traffic**.'
  prefs: []
  type: TYPE_NORMAL
- en: A good friend of mine texted me the other day and said
  prefs: []
  type: TYPE_NORMAL
- en: “Piero, today the traffic is so bad and the city is a total **chaos**”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, obviously, I didn’t correct him (especially knowing how the traffic is
    in Rome), but the term ***chaos***has a totally different meaning in math and
    physics with respect to how we use “chaos” in our everyday lives.
  prefs: []
  type: TYPE_NORMAL
- en: 'A popular definition of chaos, when we refer to chaos in math, is the one of
    a problem that is regulated by **deterministic equations,** *but* **the evolution
    of the system is extremely dependent on the original conditions**. This means
    that even with an extremely small change in the original conditions, the evolution
    of the system can be incredibly different. To say it in the words of Lorentz¹
    this means that:'
  prefs: []
  type: TYPE_NORMAL
- en: “The present determines the future, but the approximate present does not approximately
    determine the future.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ¹ [http://mpe.dimacs.rutgers.edu/2013/03/17/chaos-in-an-atmosphere-hanging-on-a-wall/](http://mpe.dimacs.rutgers.edu/2013/03/17/chaos-in-an-atmosphere-hanging-on-a-wall/)
  prefs: []
  type: TYPE_NORMAL
- en: This means that the only way that we are able to predict the evolution of a
    state is by considering it from a **probabilistic point of view.** Given the starting
    point of a process, we won’t be able to predict exactly the arrival point of the
    system, as it’s chaotic, but we will be able to predict it **probabilistically**,
    in the sense that we will be able to get, for example, the mean and start deviation.
  prefs: []
  type: TYPE_NORMAL
- en: This kind of chaos can be treated numerically, for example using **Python.**
    In this blog post, we will describe the Polynomial Chaos Expansion (PCE) starting
    from the abstract Random Walk to the application on a real case with our coffee
    temperature ☕️
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Random Walk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The random walk is something that is well known to all the mathematicians and
    the physicists who are reading. This model has been used pretty much everywhere,
    from finance to physics, and it is very simple. It is also known in the literature
    as **Brownian motion** and it works like this:'
  prefs: []
  type: TYPE_NORMAL
- en: We start from a point x = 0
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the same probability we can go from x=0 to x=1 or from x=0 to x=-1\. We
    define this point as x_1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, we can increase the value of x_1 by +1 or -1\. We will define this point
    x_2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We repeat point 3 with x_2 for N-2 more times
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For once, I think that the pseudocode is even more easy to understand than explaining
    it in words
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s explore this, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this part of the post, we will describe the Random Walk using the Python
    language code. You will need to import very basic libraries like **numpy** and
    **matplotlib.pyplot**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the Random Walk code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run this, let’s say 100 times we get the following paths:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What’s very interesting is that you can find the **gaussian distribution**
    if you consider the last step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1c14e422519e82b378758908effb147.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s leave it here for now. I promise, we will use this.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Differential Equations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, all we know about life, wait, **literally**, all we know about life we
    know it because of the **differential equation.**
  prefs: []
  type: TYPE_NORMAL
- en: 'The differential equations are the tools that physics use to describe the evolution
    of a system. My high school teacher explained it by saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '“To describe the world you need two things: to differentiate and to integrate.
    It’s very easy to differentiate, it’s very hard to integrate.”'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For example, let’s consider the location **y** of a squirrel climbing on the
    tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6b50398778a8997ac8e748de167d6c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author generated using Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that the **speed** of the squirrel is v(t) = (t/60)**2, where t =
    seconds. So our superhero start with a v(t=0) = 0 and after two minutes he gets
    to the speed v(120) = 2**2 = 4 m/s .
  prefs: []
  type: TYPE_NORMAL
- en: Given this information, what is the location of the super-squirrel?
  prefs: []
  type: TYPE_NORMAL
- en: 'What we need to do is to integrate the velocity equation and we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/272245bcb161b5f3172af92f70f346b7.png)'
  prefs: []
  type: TYPE_IMG
- en: How do we get that c constant? We just set what happens at t = 0\. We assume
    that our squirrel starts at height = 0 so c = 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'So the location of our super squirrel that climbs the tree is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d5eed2ee3be59a387830ec33e4c50c98.png)'
  prefs: []
  type: TYPE_IMG
- en: In general, a certain solution **y** can be seen as an integration of another
    quantity, say xand a starting condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this scheme we talked about:'
  prefs: []
  type: TYPE_NORMAL
- en: The time (**t**) that is the time variable (that goes from the start to the
    end of the experiment)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x**, that is the object that we are integrating (in the example above **x**
    is the velocity)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution (**y**) that is the solution that we obtain integrating **x (**in
    the example above **y** is the location of the super squirrel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So in this case we can say that x (t) = integration of y(t).
  prefs: []
  type: TYPE_NORMAL
- en: '**There is more**. You can have some parameters in your system that are fixed
    but that can **change the evolution of your system.** So:'
  prefs: []
  type: TYPE_NORMAL
- en: x(t, list of parameters) = integration of y(t, list of parameters)
  prefs: []
  type: TYPE_NORMAL
- en: For example. Let’s talk about coffee. Coffee? Yes, coffee.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Newton’s law of cooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A guy that was pretty decent in Physics (lol) named Isaac Netwon, among the
    many gifts he left us, explained how to describe the heat transfer of a hot body.
    In other words, he told us how things cool down
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04ef256a9a8643a6b3f82259f96b230b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author generated using Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: The law of cooling proposed by Newton states that the rate of heat from the
    body to the outside is proportional to a constant **k** that is dependent on the
    surface area and its **heat transfer coefficient** and the difference between
    the temperature T at time t and the temperature of the environment T_env.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to get the **temperature (T)**, we need to integrate the **rate of
    heat (dT/dt)**. **This is the equation:**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e0f6d8b7d153483627f834b21a08185.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: To get the temperature T, **given T_env and k (remember this!!!)**, we need
    to integrate dT/dt.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Wiener’s Chaos!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rarely, **very rarely**, we are able to define an analytical solution for the
    differential equation. *That is why my high school professor said that it’s very
    hard to integrate*. We are more likely in need of doing a **numerical integration**,
    which means solving the differential equation in a numerical way (a.k.a. with
    an algorithm).
  prefs: []
  type: TYPE_NORMAL
- en: There are super well-known methods (algorithms) for integrations, like the [trapezoidal](https://en.wikipedia.org/wiki/Trapezoidal_rule)
    or the [Riemann](https://en.wikipedia.org/wiki/Riemann_sum) sum. They work, with
    their pros and cons, and they work efficiently. They are not the problem.
  prefs: []
  type: TYPE_NORMAL
- en: The **real** problem is in the **parameters (e.g. T_env and kappa) of the differential
    equation.** Let me elaborate.
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember **T_env** and **k** from the equation above? We have no idea
    of what they might actually be, and it can completely change the evolution of
    our system.
  prefs: []
  type: TYPE_NORMAL
- en: The beautiful mind of [**Norbert Wiener**](https://en.wikipedia.org/wiki/Norbert_Wiener)
    made a very elegant formulation of the differential equations with **additional
    random parameters.** In particular, ***and now all our talk makes sense***, the
    differential equations with random parameters are defined as **chaotic** and can
    be described using **random walks (ah-ha!) as a polynomial.** By doing this, we
    are able to understand the solution T(t) in a **probabilistic way!**
  prefs: []
  type: TYPE_NORMAL
- en: 'I understand it can be confusing: let’s do it step by step :)'
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 The setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing that we need, in Python, is to define our differential equation:'
  prefs: []
  type: TYPE_NORMAL
- en: As we see, it’s not only a matter of **T (**our variable) but a matter of **kappa
    and T_env** too.
  prefs: []
  type: TYPE_NORMAL
- en: This is the function that we need to integrate. **Before doing that**, let’s
    import some friends 🦸‍♂️
  prefs: []
  type: TYPE_NORMAL
- en: 'You will probably have an error cause you don’t have **chaospy and uncertainpy**.
    Those are our magic wizards: they implement the polynomial chaos expansion method.
    It’s super easy to install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 3.2 Integrating the function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s set up the function to **integrate** using the trapezoidal rule:'
  prefs: []
  type: TYPE_NORMAL
- en: 'So:'
  prefs: []
  type: TYPE_NORMAL
- en: We set the starting temperature of our coffee, let’s say T_0 = 95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We set the time step of our problem, let’s say 500 time steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We integrate it using the trapezoidal rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We return the time and temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.3 About uncertainpy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, I have to say this: [**uncertainpy**](https://uncertainpy.readthedocs.io/en/latest/index.html)
    **is awesome**. There are so many things you can do with it and I really recommend
    you to spend some time on it [here](https://uncertainpy.readthedocs.io/en/latest/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'What we are going to do is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We set a distribution of possible **kappa**s. For example, kappa is sampled
    from a normal distribution with a given mu and variance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We do the same with **T_env**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We apply uncertainpy **and extract a distribution of possible values of Temperature
    given the input distributions**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The game is easy: if we know the possible distribution of the parameters **thanks
    to the Wiener’s chaos** we are able to know the distribution of the output.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It might sound confusing but I swear it’s going to be more clear after showing
    you the code:'
  prefs: []
  type: TYPE_NORMAL
- en: The model is defined with the **coffee_cup**, which is our differential equation.
    We then define the parameter distributions (using **chaospy**) and define the
    corresponding parameters dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Now. For each value of kappa and T_env we have a differential equation with
    different parameters and different Temperatures T(t), that are the result of **integration**.
    Thanks to the use of the magic **chaospy** the solutions become a **distribution**
    with mean and std.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how:'
  prefs: []
  type: TYPE_NORMAL
- en: '**That’s that!** (like Biggie)**. So easy.**'
  prefs: []
  type: TYPE_NORMAL
- en: 3.4 The whole thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The whole thing can be put in this single block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96b4cb1096b1d0fa4b11ebe07a963aed.png)'
  prefs: []
  type: TYPE_IMG
- en: Isn’t this beautiful? We are able to convert the **distribution of the parameters
    in the input** in the **distribution of the result of the output.** At time t=0,
    the temperature is the T= T_0 = 95\. When the time increases, the **uncertainty
    in the parameters** become more and more present. We have a big uncertainty (let’s
    say from 5 to 30) at Time = 200 minutes, it could be cold or a little bit hot
    depending on k and T_env.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this blog post, we described the beautiful **chaospy and uncertainpy libraries**.
    These libraries allowed us to treat the **Wiener Chaos** problem, which uses the
    **Random Walk** to define a form of **polynomial chaos**.This polynomial chaos
    is used to treat **differential equations** with distributions instead of **parameters**.
    We did this in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: We described the **random walk** in Chapter 1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We described **differential equations** in Chapter 2\. In particular we described
    the Netwon Cooling Law.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We described **chaos** according to **Wiener** and applied the **polynomial
    chaos in** Chapter 3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you liked the article and you want to know more about machine learning,
    or you just want to ask me something, you can:'
  prefs: []
  type: TYPE_NORMAL
- en: A. Follow me on [**Linkedin**](https://www.linkedin.com/in/pieropaialunga/),
    where I publish all my stories
  prefs: []
  type: TYPE_NORMAL
- en: B. Subscribe to my [**newsletter**](https://piero-paialunga.medium.com/subscribe).
    It will keep you updated about new stories and give you the chance to text me
    to receive all the corrections or doubts you may have.
  prefs: []
  type: TYPE_NORMAL
- en: C. Become a [**referred member**](https://piero-paialunga.medium.com/membership),
    so you won’t have any “maximum number of stories for the month” and you can read
    whatever I (and thousands of other Machine Learning and Data Science top writers)
    write about the newest technology available.
  prefs: []
  type: TYPE_NORMAL
