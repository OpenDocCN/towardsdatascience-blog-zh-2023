- en: Optimizing VS Code for dbt on Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/optimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5?source=collection_archive---------7-----------------------#2023-04-05](https://towardsdatascience.com/optimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5?source=collection_archive---------7-----------------------#2023-04-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Guide to Maximize Your dbt Productivity in Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)[![Bas
    Nederkoorn](../Images/457bf4c58451ad98d1a389ed5c9ea5a3.png)](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)
    [Bas Nederkoorn](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F37a0396260cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&user=Bas+Nederkoorn&userId=37a0396260cd&source=post_page-37a0396260cd----a56dd27ba8d5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)
    ·9 min read·Apr 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa56dd27ba8d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&user=Bas+Nederkoorn&userId=37a0396260cd&source=-----a56dd27ba8d5---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa56dd27ba8d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&source=-----a56dd27ba8d5---------------------bookmark_footer-----------)![](../Images/3a045c30c5c89f8576cbca8a2d7a003f.png)'
  prefs: []
  type: TYPE_NORMAL
- en: (Image from [Unsplash](https://unsplash.com/photos/PqRvLsjD_TU))
  prefs: []
  type: TYPE_NORMAL
- en: If you are struggling to get VS Code and dbt to work well together, you are
    not alone. Integrating them can be challenging, but it will improve your modeling
    efficiency. That is why I am sharing the setup that has worked for me.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll cover topics like upgrading your terminal so you can quickly
    recall commands, making use of extensions that allow you to build models faster,
    and setting up formatting and linting to clean up your code and spot bugs in SQL.
  prefs: []
  type: TYPE_NORMAL
- en: If you implement the tips in this article, you will reduce the time you lose
    on typing code, running models, cleaning code, and searching for bugs. This gained
    time you can spend on creating data models that add value. While I’m writing with
    Mac users in mind, many of these tips will also be relevant to Windows users.
  prefs: []
  type: TYPE_NORMAL
- en: '**What you need to get started:**'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `homebrew` package manager. Installation instructions [here](https://docs.brew.sh/Installation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.7 or higher and a virtual environment with `dbt` installed. Refer to
    the [official documentation](https://docs.getdbt.com/docs/core/pip-install) for
    this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dbt project. This article does not go into detail on how to set up a dbt project.
    If you do not have experience with this, I recommend you first complete the official
    dbt [jaffle shop tutorial](https://docs.getdbt.com/docs/quickstarts/dbt-core/quickstart).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s dive in!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Optimizing your Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can improve your internal VS Code terminal to look and behave more like
    [iTerm](https://iterm2.com/). Installing [Oh-My-Zsh](https://ohmyz.sh/) and some
    additional packages can unlock the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auto-completion,** valuable when you want to quickly call `dbt run -m {specific_model_you_ran_a_while_ago}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git branch visualization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Syntax highlighting**, e.g. checking if commands you type exist in `$PATH`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you don’t have `zsh` (newer Macs have it pre-installed) run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to install Oh-My-Zsh:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can select a theme. My favorite is *Agnoster* because it has a good
    git branch visualization. Selecting a theme can be done from the zsh configuration
    file in your home folder. Open this file by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Modify `ZSH_THEME` to set your preferred theme. Save and close. Changes in `.zshrc`
    will show up when you reboot your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '***Note*** *To refresh the settings of your current terminal window, you can
    run:* `*source ~/.zshrc*`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The Git branch visualization uses some particular icons, which you can display
    in the terminal using a so-called “Nerd Font”. I like the Dejavu Sans Mono Nerd
    Font, you can install it using `homebrew` [[1]](#ce33):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make sure your VS Code terminal uses the new font. Go to the command
    palette (**Cmd + Shift + P**) and open `settings.json` by typing *open settings*.
    Add the following line to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '***Note:*** *Make sure to select the general* User Setting *file and not the
    project specific* Workspace Setting *file. Later on, when configuring settings
    specific to dbt, we will use the Workspace settings.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Your VS Code terminal should now look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e03e7ef5b2ddfbd0c051f7db0851418.png)'
  prefs: []
  type: TYPE_IMG
- en: (Screenshot by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to install the `zsh-autocompletion` and `zsh-syntax-highlighting`
    packages [[2](#ce33)], [[3](#ce33)]. Install them by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add them to the `plugins` variable in the `~/.zshrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '***Final Note on Terminal:*** *I briefly mentioned* [*iTerm*](https://iterm2.com/)*,
    this is an alternative for the default macOS terminal . If you don’t have it installed
    yet, I recommend trying it out.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2\. Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have covered some optimizations for a general VS Code setup. Now it’s
    time to discuss some more dbt-specific configurations, starting with a very powerful
    VS Code extension called dbt Power User.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://marketplace.visualstudio.com/items?itemName=innoverio.vscode-dbt-power-user&source=post_page-----a56dd27ba8d5--------------------------------)
    [## dbt Power User - Visual Studio Marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: This extension makes vscode seamlessly work with dbt.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: marketplace.visualstudio.com](https://marketplace.visualstudio.com/items?itemName=innoverio.vscode-dbt-power-user&source=post_page-----a56dd27ba8d5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of this extension that I regularly use are:'
  prefs: []
  type: TYPE_NORMAL
- en: Previewing compiled SQL (**Cmd + ‘**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating base models from a source `yml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autocompletion of model references
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing model-specific tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL & Jijnja Templating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/3899c34e79d5558e2c228da19808d56d.png)'
  prefs: []
  type: TYPE_IMG
- en: The concept of templating SQL (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the reasons why dbt is such a strong data modeling tool is that it supports
    *templating* for SQL code using [Jijna](https://jinja.palletsprojects.com/en/3.1.x/).
    It allows you to use Python-like logic (e.g. if statements or for loops) to create
    your SQL queries. In practice a *templated* SQL file might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiler returns the following *compiled* SQL file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The resulting compiled query might look different depending on the database
    you are using. Templating allows you to build complex SQL models with just a few
    lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Templating in dbt is a whole topic in itself, to learn more about how you can
    use templating in your models refer to the [official documentation](https://docs.getdbt.com/docs/build/jinja-macros).
  prefs: []
  type: TYPE_NORMAL
- en: vscode-dbt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A tool that will help you speed up writing Jijna templated SQL code is `vscode-dbt`.
    This extension adds a couple of useful Jinja snippets to your toolset. For example:
    `for`,`ref` and `source`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://marketplace.visualstudio.com/items?itemName=bastienboutonnet.vscode-dbt&source=post_page-----a56dd27ba8d5--------------------------------)
    [## vscode-dbt — Visual Studio Marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: 'Provides snippets for dbt and Jinja functions in SQL, YAML, and Markdown. Cool
    Tip: For a richer integration between…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: marketplace.visualstudio.com](https://marketplace.visualstudio.com/items?itemName=bastienboutonnet.vscode-dbt&source=post_page-----a56dd27ba8d5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'For the snippets to be recognized, you have to add the following line to your
    workspace `settings.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Adding custom snippets**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/932beab829985311ada2c32022e94433.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating custom code snippets (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: If you find yourself typing the same thing again and again, it will be faster
    to create your own custom snippets. For example; At the top of each model, I like
    to *import* all the *dependencies* as a CTE, similar to what you would do in Python
    code.
  prefs: []
  type: TYPE_NORMAL
- en: You can add snippets by opening the command palette (**Cmd + Shift + P**) and
    navigating to *Configure User Snippets*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fd306c9f53b82e4d620fb37b4e644b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to configure user snippets (Screenshot by Author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4a4bfcc150f662c14923e30ed9fa5ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Open the jinja-sql snippet file (Screenshot by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding the snippet, the file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple example for illustration purposes, I encourage you to create
    your own snippets wherever you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Jinja-SQL formatting: sqlfmt'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To format Jinja-SQL, I use `sqlfmt`, a formatter specifically designed for dbt
    logic that is integrated with dbt Power User. `sqlfmt` is an *opinionated formatter*,
    you can adjust the maximum line length but there is not much room for customizing
    the formatting behavior. This is a good thing, as it leaves less room for discussion
    about code aesthetics. This simplicity also positively affects the reliability
    and speed of the formatting.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to install `sqlfmt`(as recommended in [[4](#ce33)]) is by using
    `pipx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t have `pipx` , install it by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `ensurepath` command adds the `pipx` bin to your `PATH`, so that you can
    call `sqlfmt` from anywhere → In our case from dbt Power User.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To install `sqlfmt` run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Resulting in `sqlfmt` being installed and exposed on your `$PATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d9d07a46c96effe15b92bd74bea060f.png)'
  prefs: []
  type: TYPE_IMG
- en: (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to configure the default formatter for Jinja SQL in VS Code.
    Add these lines to the workspace `settings.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '***Note:*** *If you read the manual of sqlfmt, you will find the option to
    exclude certain parts of the code by using* `*# fmt: off / on*` *or define folders
    in the to exclude.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Linting with SQLFluff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/4588c9fdd0797bbc62df410734dc07b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Linting with SQLFluff (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: What is Linting?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linting is the process of analyzing code to find errors, bugs, and style mistakes.
    You could consider a linter a grammar checker for code.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting and linting are two different techniques that can be used together
    to improve your code. Formatting will improve code appearance while linting will
    help you catch more complex errors and mistakes in your code.
  prefs: []
  type: TYPE_NORMAL
- en: The linter I use is [SQLFluff](https://sqlfluff.com/). It works for most SQL
    dialects and most importantly; it is compatible with Jinja templated SQL. At the
    time of writing, I found this to be the most advanced SQL linter out there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To integrate SQLFluff with VS Code you can download the [sqlfluff extension](https://marketplace.visualstudio.com/items?itemName=dorzey.vscode-sqlfluff).
    To avoid conflicts between `sqlfluff`, `sqlfmt`, and dbt Jinja logic, add the
    following lines to your workspace `settings.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'On top of that, create a `.sqlfuff` file in your workspace folder. Add the
    following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '***Note :*** *The above-mentioned* `*.sqlfluff*` *is based on [*[*5*](#ce33)*]
    but slightly extended. How you set up the linting rules is up to your personal
    (and your team’s) preference.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You won’t need to lint from the command line once you have installed the `vscode-sqlfluff`
    extension. However, I still prefer calling `sqlfluff lint {path_to_model_sub_folder}`
    from the terminal, as it provides a clear overview of any issues in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ff3b14031a71ef49a0818a28889bfd1.png)'
  prefs: []
  type: TYPE_IMG
- en: (Screenshot by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Besides the `lint` command, SQLFluff has a formatter-like`fix` command. You
    can use this to fix some of the issues in your code raised by SQLFluff. However,
    I recommend using this feature with some caution, as it can also break your code.
    As mentioned before, I prefer using less the complex `sqlfmt` for formatting.
  prefs: []
  type: TYPE_NORMAL
- en: To ignore linting errors due to templated dbt functions, such as the one below,
    you can add `ignore = templating` to your `.sqlfluff` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: To further customize the linting behavior, refer to the official documentation
    [[6](#ce33)].
  prefs: []
  type: TYPE_NORMAL
- en: Done!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have followed the outlined steps and made it this far, you should now
    have an optimal workspace to work with dbt! We’ve covered topics like upgrading
    your VS Code terminal, which extensions to use, and how to format and lint Jinja
    templated SQL. These tips will save you time and effort, allowing you to focus
    on building better data models.
  prefs: []
  type: TYPE_NORMAL
- en: The goal is to continuously increase efficiency. If you’re looking for the next,
    more advanced step, I recommend exploring [macros for dbt](https://docs.getdbt.com/docs/build/jinja-macros).
    If you have any questions or ideas for future articles, feel free to reach out
    to me.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading, and happy modeling!
  prefs: []
  type: TYPE_NORMAL
- en: Enjoyed this Article?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*If you found this article helpful, be sure to* [*follow me*](https://medium.com/@sebasn)
    *to stay up-to-date with my latest articles on data modeling, coding, and more.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Installing Fonts through homebrew **| |** [*link*](https://gist.github.com/davidteren/898f2dcccd42d9f8680ec69a3a5d350e)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Installing zsh-syntax-higlighting | | [*link*](https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Installing zsh-autocomplete **| |** [*link*](https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Installing sqlfmt ***| |*** [*link*](https://docs.sqlfmt.com/getting-started/installation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Integrating `sqlfmt` and `sqlfluff` | | [*link*](https://docs.sqlfmt.com/integrations/sqlfluff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6]Default Config SQLFluff | | [*link*](https://docs.sqlfluff.com/en/stable/configuration.html#default-configuration)'
  prefs: []
  type: TYPE_NORMAL
