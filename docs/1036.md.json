["```py\n# Specify SegResNet for 3D segmentation\nsegresnet = SegResNet(\n    blocks_down=[1, 2, 2, 4],\n    blocks_up=[1, 1, 1],\n    init_filters=16,\n    in_channels=4,\n    out_channels=3,\n    dropout_prob=0.2,\n).to(device)\n\n# Wrap network for DDP\nmodel = torch.nn.parallel.DistributedDataParallel(module=segresnet, device_ids=[local_rank])\n\n# Specify Dice loss, optimizer and LR scheduler\nloss_function = DiceLoss(smooth_nr=0, smooth_dr=1e-5, squared_pred=True, to_onehot_y=False, sigmoid=True)\noptimizer = torch.optim.Adam(model.parameters(), initial_lr, weight_decay=1e-5)\nlr_scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=max_epochs)\n```", "```py\njob= command(\n    inputs= {\"input_data\": Input(type=AssetTypes.URI_FOLDER, path= dataset_asset.path)},\n    code= 'src/',\n    command= \"python train-brats21.py --epochs 50 --initial_lr 0.00025 --train_batch_size 1 --val_batch_size 1 --input_data ${{inputs.input_data}} --best_model_name BRATS21\",\n    environment= \"monai-multigpu-azureml@latest\", \n    compute= train_target,\n    experiment_name= experiment,\n    display_name= f\"3d brain tumor segmentation based on BRATS21\",\n    description= \"## Brain tumor segmentation on 3D MRI brain scans\",\n    shm_size= '300g',\n    resources= dict(instance_count= 1), # cluster nodes \n    distribution= dict(type=\"PyTorch\", process_count_per_instance= 4), # GPUs per node\n    environment_variables= dict(AZUREML_ARTIFACTS_DEFAULT_TIMEOUT = 1000),\n    services= {\n    \"My_jupyterlab\": JobService(job_service_type=\"jupyter_lab\"),\n    \"My_vscode\": JobService(job_service_type=\"vs_code\",),\n    \"My_tensorboard\": JobService(job_service_type=\"tensor_board\",),\n        })\n\nreturned_job= ml_client.create_or_update(job)\n```"]