- en: Build your first Deep Learning app within an hour
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/build-your-first-deep-learning-app-within-an-hour-4e80c120e99f?source=collection_archive---------6-----------------------#2023-07-21](https://towardsdatascience.com/build-your-first-deep-learning-app-within-an-hour-4e80c120e99f?source=collection_archive---------6-----------------------#2023-07-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deploying Image Classification Model using HuggingFace Spaces and Gradio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://miptgirl.medium.com/?source=post_page-----4e80c120e99f--------------------------------)[![Mariya
    Mansurova](../Images/b1dd377b0a1887db900cc5108bca8ea8.png)](https://miptgirl.medium.com/?source=post_page-----4e80c120e99f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4e80c120e99f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4e80c120e99f--------------------------------)
    [Mariya Mansurova](https://miptgirl.medium.com/?source=post_page-----4e80c120e99f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F15a29a4fc6ad&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-your-first-deep-learning-app-within-an-hour-4e80c120e99f&user=Mariya+Mansurova&userId=15a29a4fc6ad&source=post_page-15a29a4fc6ad----4e80c120e99f---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4e80c120e99f--------------------------------)
    ·11 min read·Jul 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4e80c120e99f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-your-first-deep-learning-app-within-an-hour-4e80c120e99f&user=Mariya+Mansurova&userId=15a29a4fc6ad&source=-----4e80c120e99f---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4e80c120e99f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-your-first-deep-learning-app-within-an-hour-4e80c120e99f&source=-----4e80c120e99f---------------------bookmark_footer-----------)![](../Images/853574e57387bbbe2b3eab5395f1a971.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Thought Catalog](https://unsplash.com/@thoughtcatalog?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: I’ve been doing data analytics for almost ten years now. From time to time,
    I use machine learning techniques to get insights from data, and I’m comfortable
    using classic ML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although I’ve passed a few MOOCs on Neural Networks and Deep Learning, I have
    never used them in my work, and this domain seemed quite challenging for me. I
    had all these prejudices:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to learn a lot to start using Deep Learning: maths, different frameworks
    (I’ve heard at least about three of them: `PyTorch`, `TensorFlow` and `Keras`)
    and networks’ architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Huge datasets are required to fit a model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s impossible to achieve decent results without powerful computers (*they
    also must have Nvidia GPU*), so it’s pretty hard to get a setup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is much boilerplate to have an ML-powered service up and running: you
    need to handle front-end and back-end sides.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I believe the primary goal of analytics is to help the product team make the
    right decisions based on data. Nowadays, Neural Networks can definitely improve
    our analysis, i.e. NLP helps to get much more insights from texts. So I’ve decided
    that it would be helpful for me to make another attempt to leverage power of Deep
    Learning.
  prefs: []
  type: TYPE_NORMAL
- en: That’s how I started [the Fast.AI course](https://course.fast.ai/) (*it was
    updated at the beginning of 2022, so I suppose content has changed since previous
    reviews on TDS*). I’ve realised that solving your tasks using Deep Learning is
    not so difficult.
  prefs: []
  type: TYPE_NORMAL
- en: This course follows the top-down approach. So you’re starting with building
    a working system, and only afterwards will you dive deeper to understand all the
    needed basics and nuances.
  prefs: []
  type: TYPE_NORMAL
- en: I made my first ML-powered app in the second week (*you can try it* [*here*](https://huggingface.co/spaces/miptgirl/cuttest_dogs)).
    It’s an image classification model that can identify my favourite dog breeds.
    Surprisingly, it works well even though only a couple of thousand images were
    in my dataset. It’s inspiring for me how easily we can now build a service that
    was complete magic just ten years ago.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/107bf8a2134762ddc8bf8b330dab6452.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Shakti Rajpurohit](https://unsplash.com/ko/@shaktirajpurohit?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: So in this article, you will find a beginner-level tutorial on building and
    deploying your first service powered by Machine Learning.
  prefs: []
  type: TYPE_NORMAL
- en: What is Deep Learning?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deep Learning is a specific use case of Machine Learning when we use multi-layered
    Neural Networks as a model.
  prefs: []
  type: TYPE_NORMAL
- en: Neural Networks are extremely powerful. According to [Universal Approximation
    Theorem](https://en.wikipedia.org/wiki/Universal_approximation_theorem), Neural
    Networks can approximate any function, which means they are capable of solving
    any task.
  prefs: []
  type: TYPE_NORMAL
- en: For now, you can just treat this model as a black box that takes input (*in
    our case — a dog image*) and returns output (*in our case —a label*).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/880015ebf56f0625e2895e729379b3c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by author
  prefs: []
  type: TYPE_NORMAL
- en: Building a model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the complete code for this stage on [Kaggle](https://www.kaggle.com/code/miptgirl/fastai-week-2-dogs-breeds-classification-mo/edit/run/136880445).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We will be using [Kaggle Notebooks](https://www.kaggle.com/docs/notebooks) to
    build our Deep Learning model. If you don’t have an account on Kaggle yet, it’s
    worth going through the registration process. Kaggle is a popular platform for
    data scientists where you can find datasets, participate in competitions and run
    and share your code.
  prefs: []
  type: TYPE_NORMAL
- en: You can create a Notebook at Kaggle and execute code here as in your local Jupyter
    Notebook. Kaggle even provides GPU, so we will be able to train NN models pretty
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7242d7e606433d6e106281b1ac150d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with importing all packages because we will use many Fast.AI tools.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Loading data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It goes without saying we need a dataset to train our model. The easiest way
    to get a set of images is by using a search engine.
  prefs: []
  type: TYPE_NORMAL
- en: '[DuckDuckGo](https://duckduckgo.com/) search engine has an easy-to-use API
    and handy Python package `duckduckgo_search` ([*more info*](https://pypi.org/project/duckduckgo-search/)),
    so we will use it.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to search for a dog image. We’ve specified `license_image = any` to
    use only images with Creative Commons license.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, we got all the information about the image: name, URLs and sizes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we can use Fast.AI tools to download the image and show a thumbnail.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a5ec7ba9995d3de121a3479f3c8a373.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Barcs Tamás](https://unsplash.com/@barcstamaas?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: We see a happy samoyed, which means it’s working. So let’s load more photos.
  prefs: []
  type: TYPE_NORMAL
- en: I aim to identify five different dog breeds (my favourite ones). I will load
    pictures for each breed and store them in separate directories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After running this code, you will see all loaded photos on the right panel of
    Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18b15558c734df1045934f6d688c728f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to convert data to a format suitable for the Fast.AI model
    — `DataBlock`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few arguments you need to specify for this object, but I will highlight
    only the most important ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`splitter=RandomSplitter(valid_pct=0.2, seed=18)`: Fast.AI requires you to
    select a validation set. The validation set is a hold-out data that will be used
    to estimate model quality. The validation data isn’t used during training to prevent
    overfitting. In our case validation set is a random 20% of our dataset. We specified
    the `seed` parameter to be able to reproduce exactly the same split next time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_tfms=[Resize(256, method=’squish’)]`: Neural Networks process images
    in batches. That’s why we must have pictures of the same size. There are different
    methods for image resizing, we used squish for now, but we’ll discuss it in more
    detail later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve defined a data block. The function `show_batch` can show us a random set
    of images with labels.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/80089b7b745e7af415ea8bbebbf52b48.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Angel Luciano](https://unsplash.com/@roaming_angel?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) | Photo
    by [Brigitta Botrágyi](https://unsplash.com/@bbrigike?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) | Photo
    by [Charlotte Freeman](https://unsplash.com/fr/@happyfeijoa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Data looks ok, so let’s proceed to training.
  prefs: []
  type: TYPE_NORMAL
- en: Training the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be surprised, but the two lines of code below will do all the work.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9be3eae20456aaa76396a015f1993f5b.png)'
  prefs: []
  type: TYPE_IMG
- en: We used a pre-trained model (Convolutional Neural Network with 18 deep layers
    — `Resnet18`). That’s why we called the function `fine_tune`.
  prefs: []
  type: TYPE_NORMAL
- en: We trained the model for three epochs, which means the model saw the whole dataset
    3 times.
  prefs: []
  type: TYPE_NORMAL
- en: We also specified the metric — `accuracy` (*the share of correctly labelled
    pictures*). You can see this metric in the results after each epoch (it’s calculated
    only using the validation set not to skew results). However, it’s not used in
    the optimization process and is shown only for your information.
  prefs: []
  type: TYPE_NORMAL
- en: The whole process took around 30 minutes, and now our model can predict dogs’
    breeds with 94.45% of accuracy. Good job! But could we improve this result?
  prefs: []
  type: TYPE_NORMAL
- en: 'Improving the model: data cleaning and augmentations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feel free to leave this section for later and move on to the model’s deployment
    if you want to see your first model working as soon as possible.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'First, let’s see the model’s errors: whether it can’t distinguish corgi from
    husky or pomeranian from retriever. We can use `confusion_matrix` for it. Note
    that the confusion matrix is also calculated only using the validation set.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/73499dd9ee674e7da264c85725aaad4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The other life hack shared in the Fast.AI course is that a model can be used
    to clean our data. For it, we can see the images with the highest loss: it could
    be cases where the model was wrong with high confidence or correct but with low
    confidence.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1938f6835432a722044da06b35441f10.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Benjamin Vang](https://unsplash.com/ko/@bivphoto?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) | Photo
    by [Xennie Moore](https://unsplash.com/@shadowseas?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) | Photo
    by [Alvan Nee](https://unsplash.com/@alvannee?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Apparently, the first image has an incorrect label while the second one includes
    both husky and corgi. So there’s some room for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, Fast.AI provides a handy `ImageClassifierCleaner` widget that could
    help us quickly fix data issues. You can initialise it in your notebook, then
    you will be able to change labels in your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After each category, you can run the following code to fix issues: delete the
    image or move it to the correct folder.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can train our model again and see that accuracy improved: 95.4% vs 94.5%.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ff1da7784808a454859c7849aa42bb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Share of correctly identified corgis has increased from 88% to 96%. Brilliant!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2ec6baebf1f5947d151aa76cbce0ede.png)'
  prefs: []
  type: TYPE_IMG
- en: The other way to improve our model is to change our approach to resizing. We
    used the squish method, but as you may see, it can change the proportions of natural
    objects. Let’s try to be more imaginative and use augmentations.
  prefs: []
  type: TYPE_NORMAL
- en: Augmentations are changes to the images (for example, contrast improvements,
    rotations, or crops). It will give our model more variable data and hopefully
    improve its quality.
  prefs: []
  type: TYPE_NORMAL
- en: As usual with Fast.AI, you need to change just a couple of parameters to add
    augmentations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/643a79780ab0d8ed7f173a63fefa03c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [FLOUFFY](https://unsplash.com/@theflouffy?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Also, since with augmentations model will see a slightly different picture at
    each epoch, we can increase the number of epochs. After six epochs, we’ve achieved
    95.65% accuracy — a bit better result. The whole process took around an hour.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last step is to download our model. It’s pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then you will have a standard `pickle` file (*common Python format to store
    objects*) saved. Just choose `More actions` next to the file in the right panel
    of the Kaggle Notebook, and you will get the model on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c984ea0fa54731a25fe28f2ad7c9a6f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have our trained model, let’s deploy it so you can share the results
    with the world.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use [HuggingFace](https://huggingface.co) Spaces and [Gradio](https://www.gradio.app)
    to build our web app.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up HuggingFace Space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HuggingFace is a company providing handy tools for Machine Learning, for example,
    a popular transformers library or tool to share models and datasets. Today we
    will be using their Spaces to host our application.
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to create an account if you haven’t registered yet. It will
    take just a couple of minutes. Follow this [link](https://huggingface.co/join).
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to create a new Space. Head to the Spaces tab and push the “create”
    button. You can find instructions with more details in [the documentation](https://huggingface.co/docs/hub/spaces-overview).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you need to specify the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** (it will be used for your app URL, so choose wisely),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**license** (I’ve selected open-source Apache 2.0 license)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SDK** (I will be using Gradio in this example).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/d1a51c71256deaace6d3996204d69ca0.png)'
  prefs: []
  type: TYPE_IMG
- en: Then user-friendly HuggingFace shows you instructions. **TL;DR** now you have
    a Git repository, and you need to commit your code there.
  prefs: []
  type: TYPE_NORMAL
- en: There’s one nuance with Git. Since your model is likely pretty big, it’s better
    to set up Git LFS (Large File Storage), then Git won’t keep track of all the changes
    for this file. For installation, follow instructions from [the site](https://git-lfs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Gradio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradio is a framework that allows you to build pleasant and friendly web apps
    just using Python. That’s why it’s an invaluable tool for prototyping (especially,
    for people without deep javascript knowledge like me).
  prefs: []
  type: TYPE_NORMAL
- en: 'In Gradio, we will define our interface, specifying the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input** — an image,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output** — labels with five possible classes,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**title**, **description** and a **set of example** images (*we will have to
    commit them to the repo as well*),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable_queue=True` would help app to process huge amount of traffic, if it
    becomes extremely popular,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function** to be executed for input images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get a label for an input image, we need to define the prediction function
    that loads our model and returns a dictionary with probabilities for each class.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we will have the following code for `app.py`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you would like to learn more about Gradio, read the [docs](https://www.gradio.app/guides/quickstart).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s also create `requirements.txt` file with `fastai` then this library will
    be installed on our server.
  prefs: []
  type: TYPE_NORMAL
- en: So the only bit left is to push everything to HuggingFace Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can find the full code on [GitHub](https://github.com/miptgirl/miptgirl_medium/tree/main/cuttest_dogs).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After pushing files, return to the HuggingFace Space, and you will see a similar
    picture showing the building process. If everything is okay, your app will be
    running in a couple of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/869d2e210d267ff37854208abacef644.png)'
  prefs: []
  type: TYPE_IMG
- en: In case there are any problems, you will see a stack trace. Then you will have
    to return to your code, fix bugs, push a new version, and wait a few more minutes.
  prefs: []
  type: TYPE_NORMAL
- en: It’s working
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can use this model with real photos, for example, to verify that my family’s
    dog is actually a corgi.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ba48ead8cc93a7aae036bc596f42069.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Today we’ve gone through the whole process of building a Deep Learning application:
    from getting the dataset and fitting a model to writing and deploying a web app.
    Hopefully, you were able to finish this tutorial, and now you’re testing your
    fantastic model in production.'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you a lot for reading this article. I hope it was insightful to you. If
    you have any follow-up questions or comments, please leave them in the comments
    section. Also, don’t hesitate to share link to your app.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
