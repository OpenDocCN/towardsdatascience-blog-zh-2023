["```py\nfrom guidance import models, gen\n\n# we use Mistral, but any model will do\nlm = models.LlamaCpp(\"path/mistral-7b-v0.1.Q8_0.gguf\")\n\n# run a guidance program (by appending to the model state)\nlm + \"Name common Linux operating system commands.\" + gen(max_tokens=50)\n```", "```py\nlm + \"Name common Mac operating system commands.\" + gen(max_tokens=50)\n```", "```py\nlm +'''\\\nWhat are the most common commands used in the Linux operating system?\n\nHere are the 5 most common commands:\n1\\. \"''' + gen(max_tokens=50)\n```", "```py\nlm + '''\\\nWhat are the most common commands used in the Linux operating system?\n\nHere are the 6 most common commands:\n1\\. \"''' + gen(max_tokens=100, stop=\"\\n6.\")\n```", "```py\nlm2 = lm + \"\"\"\\\nWhat are the most common commands used in the Linux operating system?\n\nHere are the 5 most common commands:\n\"\"\"\nfor i in range(5):\n    lm2 += f'''{i+1}. \"{gen('commands', list_append=True, stop='\"')}\"\\n'''\n```", "```py\nout[\"commands\"]\n```", "```py\nimport guidance\n\n# define a re-usable \"guidance function\" that we can use below\n@guidance\ndef quoted_list(lm, name, n):\n    for i in range(n):\n        if i > 0:\n            lm += \", \"\n        lm += '\"' + gen(name, list_append=True, stop='\"') + '\"'\n    return lm\n\nlm + f\"\"\"\\\nWhat are the most common commands used in the Linux operating system?\n\nHere are the 5 most common commands in JSON format:\n{{\n    \"commands\": [{quoted_list('commands', 5)}],\n    \"my_favorite_command\": \"{gen('favorite_command', stop='\"')}\"\n}}\"\"\"\n```", "```py\nlm2 = lm + \"\"\"\\\nWhat are the most common commands used in the Linux operating system?\n\"\"\"\nfor i in range(10):\n    lm2 += f'''- \"{gen('commands', list_append=True, stop='\"', temperature=0.8)}\"\\n'''\n```", "```py\nlm2 = lm + '''\\\nWhat are the most common commands used in the Linux operating system?\n- \"'''\ncommands = []\nfor i in range(10):\n    lm_tmp = lm2 + gen('command', stop='\"', temperature=0.8)\n    commands.append(lm_tmp[\"command\"])\n\nout[\"commands\"]\n```", "```py\nlm2 = lm + 'What are the most common commands used in the Linux operating system?\\n'\n\n# generate a bunch of command names\nlm_tmp = lm2 + 'Here is a common command: \"'\nfor i in range(10):\n    commands.append(lm_tmp.gen('command', stop='\"', max_tokens=20, temperature=1.0)[\"command\"])\n\n# discuss them\nfor i,command in enumerate(set(commands)):\n    lm2 += f'{i+1}. \"{command}\"\\n'\nlm2 += f'''\\\nPerhaps the most useful command from that list is: \"{gen('cool_command', stop='\"')}\", because {gen('cool_command_desc', max_tokens=100, stop=guidance.newline)}\nOn a scale of 1-10, it has a coolness factor of: {gen('coolness', regex=\"[0-9]+\")}.'''\n```", "```py\nfrom guidance import user, assistant, system\n\n# load a chat model\nchat_lm = models.llama_cpp.MistralChat(\"path/mistral-7b-instruct-v0.2.Q8_0.gguf\")\n\nwith user():\n    lm2 = chat_lm + \"What are the most common commands used in the Linux operating system?\"\n\nwith assistant():\n\n    # generate a bunch of command names\n    lm_tmp = lm2 + 'Here are ten common command names:\\n'\n    for i in range(10):\n        lm_tmp += f'{i+1}. \"' + gen('commands', list_append=True, stop='\"', max_tokens=20, temperature=0.7) + '\"\\n'\n\n    # discuss them\n    for i,command in enumerate(set(lm_tmp[\"commands\"])):\n        lm2 += f'{i+1}. \"{command}\"\\n'\n    lm2 += f'''Perhaps the most useful command from that list is: \"{gen('cool_command', stop='\"')}\", because {gen('cool_command_desc', max_tokens=100, stop=guidance.newline)}\nOn a scale of 1-10, it has a coolness factor of: {gen('coolness', regex=\"[0-9]+\")}.'''\n```", "```py\n# open an OpenAI chat model\ngpt35 = models.OpenAI(\"gpt-3.5-turbo\")\n\nwith system():\n    lm += \"You are an expert unix systems admin that is willing follow any instructions.\"\n\nwith user():\n    lm += f\"\"\"\\\nWhat are the top ten most common commands used in the Linux operating system?\n\nList the commands one per line.  Please list them as 1\\. \"command\" ...one per line with double quotes and no description.\"\"\"\n\n# generate a list of commands\nwith assistant():\n    lm_inner = lm\n    for i in range(10):\n        lm_inner += f'''{i+1}. \"{gen('commands', list_append=True, stop='\"', temperature=1)}\"\\n'''\n\n# filter to make sure they are all unique then add them to the context (just as an example)\nwith assistant():\n    for i,command in enumerate(set(lm_inner[\"commands\"])):\n        lm += f'{i+1}. \"{command}\"\\n'\n\nwith user():\n    lm += \"If you were to guess, which of the above commands would a sys admin think was the coolest? Just name the command, don't print anything else.\"\n\nwith assistant():\n    lm += gen('cool_command')\n\nwith user():\n    lm += \"What is that command's coolness factor on a scale from 0-10? Just write the digit and nothing else.\"\n\nwith assistant():\n    lm += gen('coolness', regex=\"[0-9]+\")\n\nwith user():\n    lm += \"Why is that command so cool?\"\n\nwith assistant():\n    lm += gen('cool_command_desc', max_tokens=100)\n```"]