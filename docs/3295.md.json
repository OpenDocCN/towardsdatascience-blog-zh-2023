["```py\nfrom hmmlearn import hmm\nimport numpy as np\n\n## Part 1\\. Generating a HMM with specific parameters and simulating the exam\nprint(\"Setup HMM model with parameters\")\n# init_params are the parameters used to initialize the model for training\n# s -> start probability\n# t -> transition probabilities\n# e -> emission probabilities\nmodel = hmm.CategoricalHMM(n_components=2, random_state=425, init_params='ste')\n\n# initial probabilities\n# probability of starting in the Tired state = 0\n# probability of starting in the Happy state = 1\ninitial_distribution = np.array([0.1, 0.9])\nmodel.startprob_ = initial_distribution\n\nprint(\"Step 1\\. Complete - Defined Initial Distribution\")\n\n# transition probabilities\n#        tired    happy\n# tired   0.4      0.6\n# happy   0.2      0.8\n\ntransition_distribution = np.array([[0.4, 0.6], [0.2, 0.8]])\nmodel.transmat_ = transition_distribution\nprint(\"Step 2\\. Complete - Defined Transition Matrix\")\n\n# observation probabilities\n#        Fail    OK      Perfect\n# tired   0.3    0.5       0.2\n# happy   0.1    0.5       0.4\n\nobservation_probability_matrix = np.array([[0.3, 0.5, 0.2], [0.1, 0.5, 0.4]])\nmodel.emissionprob_ = observation_probability_matrix\nprint(\"Step 3\\. Complete - Defined Observation Probability Matrix\")\n\n# simulate performing 100,000 trials, i.e., aptitude tests\ntrials, simulated_states = model.sample(100000)\n\n# Output a sample of the simulated trials\n# 0 -> Fail\n# 1 -> OK\n# 2 -> Perfect\nprint(\"\\nSample of Simulated Trials - Based on Model Parameters\")\nprint(trials[:10])\n\n## Part 2 - Decoding the hidden state sequence that leads\n## to an observation sequence of OK - Fail - Perfect\n\n# split our data into training and test sets (50/50 split)\nX_train = trials[:trials.shape[0] // 2]\nX_test = trials[trials.shape[0] // 2:]\n\nmodel.fit(X_train)\n\n# the exam had 3 trials and your dog had the following score: OK, Fail, Perfect (1, 0 , 2)\nexam_observations = [[1, 0, 2]]\npredicted_states = model.predict(X=[[1, 0, 2]])\nprint(\"Predict the Hidden State Transitions that were being the exam scores OK, Fail, Perfect: \\n 0 -> Tired , \"\n      \"1 -> Happy\")\nprint(predicted_states)\n```"]