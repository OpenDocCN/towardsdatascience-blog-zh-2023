- en: 'Linear Algebra 2: Echelon Matrix Forms'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/linear-algebra-2-echelon-matrix-forms-ce8a19c71a7d?source=collection_archive---------3-----------------------#2023-09-29](https://towardsdatascience.com/linear-algebra-2-echelon-matrix-forms-ce8a19c71a7d?source=collection_archive---------3-----------------------#2023-09-29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/1f8e321d874aa684e75a2b911f1e67eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [Europeana](https://unsplash.com/@europeana) on [Unsplash](https://unsplash.com/photos/QaUm-ISDXVw)
  prefs: []
  type: TYPE_NORMAL
- en: Row echelon form and reduced row echelon form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@t9nz?source=post_page-----ce8a19c71a7d--------------------------------)[![tenzin
    migmar (t9nz)](../Images/d9a3e1fe10afba1f1dc0fc7e4d241d73.png)](https://medium.com/@t9nz?source=post_page-----ce8a19c71a7d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ce8a19c71a7d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ce8a19c71a7d--------------------------------)
    [tenzin migmar (t9nz)](https://medium.com/@t9nz?source=post_page-----ce8a19c71a7d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd6ff685c466&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-algebra-2-echelon-matrix-forms-ce8a19c71a7d&user=tenzin+migmar+%28t9nz%29&userId=d6ff685c466&source=post_page-d6ff685c466----ce8a19c71a7d---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ce8a19c71a7d--------------------------------)
    ·8 min read·Sep 29, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fce8a19c71a7d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-algebra-2-echelon-matrix-forms-ce8a19c71a7d&user=tenzin+migmar+%28t9nz%29&userId=d6ff685c466&source=-----ce8a19c71a7d---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fce8a19c71a7d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-algebra-2-echelon-matrix-forms-ce8a19c71a7d&source=-----ce8a19c71a7d---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Preface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Welcome back to the second essay of my ongoing series on the basics of Linear
    Algebra, the foundational math behind machine learning. In my previous [article](https://medium.com/@t9nz/linear-algebra-1-1-15b70e48bab9),
    I introduced linear equations and systems, matrix notation, and row reduction
    operations. This article will walk through the echelon matrix forms: row echelon
    form and row reduced echelon form and how both can be used to solve linear systems.
    This article would best serve readers if read in accompaniment with Linear Algebra
    and Its Applications by David C. Lay, Steven R. Lay, and Judi J. McDonald. Consider
    this series as an external companion resource.'
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to share thoughts, questions, and critique.
  prefs: []
  type: TYPE_NORMAL
- en: Row Echelon Form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Gauss Elimination** method is a procedure to transform a matrix using
    row operations into a form in which solutions can become retrievable after some
    back-substitution.
  prefs: []
  type: TYPE_NORMAL
- en: 'As review, the row reduction operations are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Replacement**: “replace a row by the sum of itself and another row.”*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Interchange:** “swap two rows.”*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scaling**: “multiply all entries in a row by a non-zero constant.”*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The above operations can be applied to a matrix to transform that matrix into
    its row echelon form. A given *m* x *n* matrix, where *m* is the number of rows
    and *n* is the number of columns is said to be in row echelon form when:'
  prefs: []
  type: TYPE_NORMAL
- en: Any rows where all entries are zero are below rows where at least one entry
    is non-zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All leading entries of a row (first entry from the left that is non-zero) are
    in a column to the right of the row above it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All entries in a column below a leading entry are zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following are examples of matrices in row echelon form (REF).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec2c60041a8d0cb8f9cd445e8a64c163.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Take a moment to appreciate how while there are variations in the size and
    entries of the matrices, all are considered to be in row echelon form as per the
    criteria outlined above. Notice the staircase-like pattern underneath the highlighted
    leading entries? That is what naturally emerges from performing Gaussian elimination
    to transform a matrix to row echelon form. The form is aptly named: the word echelon
    was derived from the French *eschelon* meaning the rung of a ladder and later
    on came to mean “step”.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic idea behind Gaussian elimination to transform a matrix into a row
    reduced form is to pick a pivot (the word pivot is used to refer to the leading
    entry: an entry that will be the first non-zero entry in its row) and then eliminate
    all entries below, zeroing out everything in the column underneath the pivot.
    To understand why this step makes progress in transforming a matrix into reduced
    echelon form, revisit the definition of the reduced echelon form: In row echelon
    form, *all entries in a column below a leading entry are zero*. This step is then
    iterated through again for each row, but with caution! We must make sure that
    with each pivot selection, we are not violating one of the core characteristics
    of the row echelon form; *all leading entries of a row are in a column to the
    right of the row above it.* With this rule in mind, it is generally a good idea
    to begin pivoting around the first entry in the first row and then work your way
    down the rows from right to left.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s once again contemplate the purpose of the row echelon form that was mentioned
    earlier: *to transform a given matrix representing a linear system into a form
    in which solutions can become easily legible*. To better understand the underlying
    utility of row echelon form, consider example 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/582a0e87b392e958c6eb74090382c36d.png)'
  prefs: []
  type: TYPE_IMG
- en: When we perform the Gaussian elimination, we’re manipulating the matrix to take
    on a symmetric yet more decipherable form. With the row echelon form obtained
    from example 1, we can now use back-substitution to work our way up in obtaining
    each of the solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/709b5e4f808de3ba47b6ad451d41d3af.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from above, this isn’t ideal. It takes additional untidy work.
    Reduced row echelon also takes additional work, but the notation is cleaner leaving
    less room for error. Once we’ve reduced a matrix to reduced row echelon form,
    we can easily read off our solutions and we’ll have resolved the linear system.
  prefs: []
  type: TYPE_NORMAL
- en: Reduced Row Echelon Form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When reducing a matrix to the *reduced* row echelon form, the **Gauss-Jordan
    Elimination** is used. This algorithm transforms a given matrix representing a
    linear system into the reduced echelon form in which solutions can become easily
    legible through applying a series of row reduction operations. No additional back-substitution
    required.
  prefs: []
  type: TYPE_NORMAL
- en: 'A given *m* x *n* matrix is said to be in reduced row echelon form if it satisfies
    the prerequisites of row echelon form, and in addition, also meets the following
    criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: The leading entries in each row are one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All entries in a column below *and above* a leading entry are zero. (The leading
    entry is the only non-zero entry in the column)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s work through an example of row reducing a matrix to the reduced row echelon
    form.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ad91773415d7929028f39ac4920f006.png)'
  prefs: []
  type: TYPE_IMG
- en: Reading our reduced row echelon form matrix, it is now immediately obvious that
    our solutions are *x₁* = -3, *x₂* = -12, *x₃* = -3.
  prefs: []
  type: TYPE_NORMAL
- en: Uniqueness of Echelon Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Up until now, we’ve computed one example each for the row echelon form and
    the reduced row echelon form. It is possible that you wanted to attempt the row
    reduction of the row echelon form independently as an exercise, only to end up
    with a different row echelon form matrix. Not to worry, this is very much possible
    and both versions are equally correct as long as the computations were performed
    correctly and all three rules were covered. This is a fantastic situation! It
    ushers us forward towards to an important theorem:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Theorem (1)**'
  prefs: []
  type: TYPE_NORMAL
- en: Matrices may have more than one row echelon form; the row echelon form is not
    unique. Different but equally valid echelon forms may be arrived at through variations
    in the sequences of how row operations are applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is not the case for the reduced row echelon form, it is the converse for
    the reduced row echelon form.
  prefs: []
  type: TYPE_NORMAL
- en: '**Theorem (2)**'
  prefs: []
  type: TYPE_NORMAL
- en: Matrices must only have one reduced row echelon form; the reduced row echelon
    form is unique.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The root of why we see this difference in uniqueness between the two forms is
    due to the additional restrictions we enforce on the reduced row echelon form.
    Namely, the requirement around the leading entries being equal to one. As soon
    as we’ve reduced a matrix to the row echelon form, we could multiply each row
    by any non-zero constant and it would still be in row echelon form because scaling
    the matrix didn’t break any rules for the row echelon form. The same is not possible
    with the reduced echelon form as the leading entries must be one. I illustrate
    this point further below with a concrete example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58e0655358209fca7d71a78b5e2822a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of Solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A fundamental question that naturally arises from solving a linear system is
    how many solutions exist? For any linear system, the resolution will always be
    one of three cases. The linear system will either have one unique solution, infinite
    solutions, or no solutions. If you’re interested in mulling over why it must be
    one of these three, (re)visit my [previous](https://medium.com/towards-data-science/linear-algebra-1-1-15b70e48bab9)
    article.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at each case in greater detail to see how we can recognize
    the solution case of a given matrix, and gently poke around at and explore the
    intuition behind exactly why and how each case scenario manifests itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**Unique Solution:** a linear system has a unique solution when the reduced
    row echelon form of its matrix has a pivot for every column.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4fb5f2896012071e606957a212827abb.png)'
  prefs: []
  type: TYPE_IMG
- en: It becomes more obvious why this is the case when we rewrite the matrix form
    as a series of linear equations. We see that because each column has a pivot (with
    no entries above or below), so there is a clear-cut solution for each variable
    you can read off equation by equation.
  prefs: []
  type: TYPE_NORMAL
- en: '**No Solutions:** a linear system has no solutions when the reduced row echelon
    form of its matrix has an algebraic inconsistency.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6d3b02bc948d6a62f3e5a7bfff9eb5a.png)'
  prefs: []
  type: TYPE_IMG
- en: As seen above, there are no values of *x₁*, *x₂*, *x₃*, and *x₄* that will allow
    equation four to be true. The left hand side will always be 0 which does not equal
    nine, therefore no solutions exist for this system. In general, any augmented
    matrix with a row [0, 0, … 0 | *b*] where *b* is non-zero will have no solutions
    because 0 ≠ b.
  prefs: []
  type: TYPE_NORMAL
- en: '**Infinite Solutions:** a linear system has infinite solutions when it has
    at least one **free variable.** A free variable occurs when the corresponding
    column does not have a pivot. On the other hand, a **basic variable** is a variable
    where the corresponding column has a pivot. Let’s examine why the presence of
    free variables hints at infinite solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0767e4b4574ba93ef2cb39d46c028282.png)'
  prefs: []
  type: TYPE_IMG
- en: True to its name, free variables mean that you are free to assign any value
    to them. All basic variables are defined relative to free variables, so the values
    of basic variables will be dependent on what value the free variables were assigned.
    This is the essence of the existence of infinite solutions; infinitely many solutions
    are valid as long as the basic variables are consistent with the values selected
    for the free variables.
  prefs: []
  type: TYPE_NORMAL
- en: After transforming a matrix to the reduced row echelon form, it will become
    immediately apparent whether a system has a one, none or infinitely many solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, we learned:'
  prefs: []
  type: TYPE_NORMAL
- en: The Gauss Elimination method for reducing a matrix to the row echelon form to
    solve a linear system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Gauss-Jordan Elimination method for reducing a matrix to the reduced row
    echelon form to solve a linear system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Uniqueness of the echelon forms: the row echelon form is not unique while the
    reduced row echelon form is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The number of solutions a linear system may have: unique, infinite or none
    and when and why they occur.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Unless otherwise noted, all images by author of the article.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Citation for row operations [[src]](https://math.berkeley.edu/~arash/54/notes/01_01.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '*The etymology behind the world echelon [[src](https://medium.com/towards-data-science/linear-algebra-1-1-15b70e48bab9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a95d39351501e346cecd94f4eb8b651.png)'
  prefs: []
  type: TYPE_IMG
