- en: Build a ChatGPT-esque Web App in Pure Python using Reflex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/build-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110?source=collection_archive---------6-----------------------#2023-11-07](https://towardsdatascience.com/build-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110?source=collection_archive---------6-----------------------#2023-11-07)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use OpenAI’s API to build a chat web app in pure Python with one line deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@tgotsman12?source=post_page-----bdc585038110--------------------------------)[![Tom
    Gotsman](../Images/c19e7853986a9b242c91b7479765fddf.png)](https://medium.com/@tgotsman12?source=post_page-----bdc585038110--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bdc585038110--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bdc585038110--------------------------------)
    [Tom Gotsman](https://medium.com/@tgotsman12?source=post_page-----bdc585038110--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9e381e082139&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110&user=Tom+Gotsman&userId=9e381e082139&source=post_page-9e381e082139----bdc585038110---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bdc585038110--------------------------------)
    ·8 min read·Nov 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbdc585038110&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110&user=Tom+Gotsman&userId=9e381e082139&source=-----bdc585038110---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbdc585038110&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110&source=-----bdc585038110---------------------bookmark_footer-----------)![](../Images/f42717bf89bc9ec158c770603a3fb388.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Chat app GIF by Author
  prefs: []
  type: TYPE_NORMAL
- en: These past few months I have been playing around with all the incredible new
    LLM chatbots, including Llama 2, GPT-4, Falcon 40B and Claude 2\. One question
    that consistently bothers me is how can I build my own chatbot UI that calls all
    these great LLMs as APIs?
  prefs: []
  type: TYPE_NORMAL
- en: There are countless options out there to build beautiful user interfaces, but
    as an ML engineer I have no experience with Javascript or any front-end language
    for that matter. I was looking for a way to build my web app using only the language
    that I currently know, Python!
  prefs: []
  type: TYPE_NORMAL
- en: I decided to use a fairly new open-source framework called Reflex, that let
    me build both my back-end and front-end purely in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '***Disclaimer:*** *I work as a Founding Engineer at Reflex where I contribute
    to the open-source framework.*'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will cover how to build a full AI chat app from scratch
    in pure Python — you can also find all the code at this [Github repo](https://github.com/reflex-dev/reflex-chat).
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Install `reflex` and set up your development environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create components to define and style your UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use state to add interactivity to your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy your app with a one line command to share with others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Setting up Your Project**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by creating a new project and setting up our development environment.
    First, create a new directory for your project and navigate to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will create a virtual environment for our project. In this example,
    we will use [venv](https://docs.python.org/3/library/venv.html) to create our
    virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will install Reflex and create a new project. This will create a new
    directory structure in our project directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can run the template app to make sure everything is working.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You should see your app running at [http://localhost:3000](http://localhost:3000/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Reflex also starts the backend server which handles all the state management
    and communication with the frontend. You can test the backend server is running
    by navigating to [http://localhost:8000/ping](http://localhost:8000/ping) .
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our project set up, let’s build our app!
  prefs: []
  type: TYPE_NORMAL
- en: Basic Frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with defining the frontend for our chat app. In Reflex, the frontend
    can be broken down into independent, reusable components. See the [components
    docs](https://reflex.dev/docs/components/overview) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Display A Question And Answer**'
  prefs: []
  type: TYPE_NORMAL
- en: We will modify the `index` function in `chatapp/chatapp.py` file to return a
    component that displays a single question and answer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/041549be349a849571c46d0ea096bc6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author (code below)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Components can be nested inside each other to create complex layouts. Here we
    create a parent container that contains two boxes for the question and answer.
  prefs: []
  type: TYPE_NORMAL
- en: We also add some basic styling to the components. Components take in keyword
    arguments, called [props](https://reflex.dev/docs/components/props), that modify
    the appearance and functionality of the component. We use the `text_align` prop
    to align the text to the left and right.
  prefs: []
  type: TYPE_NORMAL
- en: '**Reusing Components**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a component that displays a single question and answer, we
    can reuse it to display multiple questions and answers. We will move the component
    to a separate function `question_answer` and call it from the `index` function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9cf61a98fd6edb5698e80d5f1c630ba3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author (code below)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Chat Input**'
  prefs: []
  type: TYPE_NORMAL
- en: Now we want a way for the user to input a question. For this, we will use the
    [input](https://reflex.dev/docs/library/forms/input) component to have the user
    add text and a [button](https://reflex.dev/docs/library/forms/button) component
    to submit the question.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/144b4dc95f7d6ee0316b7ce1f6aecfa1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author (code below)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Styling**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add some styling to the app. More information on styling can be found
    in the [styling docs](https://reflex.dev/docs/styling/overview). To keep our code
    clean, we will move the styling to a separate file `chatapp/style.py`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will import the styles in `chatapp.py` and use them in the components. At
    this point, the app should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a48239ff82f9a54c2c04675d426f23e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The app is looking good, but it’s not very useful yet! Now let’s add some functionality.
  prefs: []
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s make the chat app interactive by adding state. The state is where
    we define all the variables that can change in the app and all the functions that
    can modify them. You can learn more about state in the [state docs](https://reflex.dev/docs/state/overview).
  prefs: []
  type: TYPE_NORMAL
- en: '**Defining State**'
  prefs: []
  type: TYPE_NORMAL
- en: We will create a new file called `state.py` in the `chatapp` directory. Our
    state will keep track of the current question being asked and the chat history.
    We will also define an event handler `answer`which will process the current question
    and add the answer to the chat history.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Binding State to Components**'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can import the state in `chatapp.py` and reference it in our frontend
    components. We will modify the `chat` component to use the state instead of the
    current fixed questions and answers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b26582a1c8163c09beca3a8e91972f1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Normal Python `for` loops don't work for iterating over state vars because these
    values can change and aren't known at compile time. Instead, we use the [foreach](https://reflex.dev/docs/library/layout/foreach)
    component to iterate over the chat history.
  prefs: []
  type: TYPE_NORMAL
- en: We also bind the input’s `on_change` event to the `set_question` event handler,
    which will update the `question` state var while the user types in the input.
    We bind the button's `on_click` event to the `answer` event handler, which will
    process the question and add the answer to the chat history. The `set_question`
    event handler is a built-in implicitly defined event handler. Every base var has
    one. Learn more in the [events docs](https://reflex.dev/docs/state/events) under
    the Setters section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Clearing the Input**'
  prefs: []
  type: TYPE_NORMAL
- en: Currently the input doesn’t clear after the user clicks the button. We can fix
    this by binding the value of the input to `question`, with `value=State.question`,
    and clear it when we run the event handler for `answer`, with `self.question =
    ''`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Streaming Text**'
  prefs: []
  type: TYPE_NORMAL
- en: Normally state updates are sent to the frontend when an event handler returns.
    However, we want to stream the text from the chatbot as it is generated. We can
    do this by yielding from the event handler. See the [event yield docs](https://reflex.dev/docs/state/events#yielding-multiple-updates)
    for more info.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Using the API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use OpenAI’s API to give our chatbot some intelligence. We need to modify
    our event handler to send a request to the API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we have our AI chatbot!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following this tutorial we have successfully created our Chat App using OpenAI’s
    API key, purely in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this app now we can run the simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy it, so that we can share it with other users, we can run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: I hope this tutorial inspires you to build your own LLM based apps. I’m eager
    to see what you all end up building, so please reach out on social media or in
    the comments.
  prefs: []
  type: TYPE_NORMAL
- en: If you have questions, please comment them below or message me on Twitter at
    [@tgotsman12](https://twitter.com/tgotsman12) or on [LinkedIn](https://www.linkedin.com/in/tom-gotsman/).
    Share your app creations on social media and tag me, and I’ll be happy to provide
    feedback or help retweet!
  prefs: []
  type: TYPE_NORMAL
