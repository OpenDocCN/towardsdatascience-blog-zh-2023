- en: Build a ChatGPT-esque Web App in Pure Python using Reflex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/build-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110?source=collection_archive---------6-----------------------#2023-11-07](https://towardsdatascience.com/build-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110?source=collection_archive---------6-----------------------#2023-11-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use OpenAI’s API to build a chat web app in pure Python with one line deployment
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@tgotsman12?source=post_page-----bdc585038110--------------------------------)[![Tom
    Gotsman](../Images/c19e7853986a9b242c91b7479765fddf.png)](https://medium.com/@tgotsman12?source=post_page-----bdc585038110--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bdc585038110--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bdc585038110--------------------------------)
    [Tom Gotsman](https://medium.com/@tgotsman12?source=post_page-----bdc585038110--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9e381e082139&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110&user=Tom+Gotsman&userId=9e381e082139&source=post_page-9e381e082139----bdc585038110---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bdc585038110--------------------------------)
    ·8 min read·Nov 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbdc585038110&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110&user=Tom+Gotsman&userId=9e381e082139&source=-----bdc585038110---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbdc585038110&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-a-chatgpt-esque-web-app-in-pure-python-using-reflex-bdc585038110&source=-----bdc585038110---------------------bookmark_footer-----------)![](../Images/f42717bf89bc9ec158c770603a3fb388.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Chat app GIF by Author
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: These past few months I have been playing around with all the incredible new
    LLM chatbots, including Llama 2, GPT-4, Falcon 40B and Claude 2\. One question
    that consistently bothers me is how can I build my own chatbot UI that calls all
    these great LLMs as APIs?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: There are countless options out there to build beautiful user interfaces, but
    as an ML engineer I have no experience with Javascript or any front-end language
    for that matter. I was looking for a way to build my web app using only the language
    that I currently know, Python!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: I decided to use a fairly new open-source framework called Reflex, that let
    me build both my back-end and front-end purely in Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定使用一个相对较新的开源框架 Reflex，它允许我完全用 Python 构建后端和前端。
- en: '***Disclaimer:*** *I work as a Founding Engineer at Reflex where I contribute
    to the open-source framework.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '***免责声明：*** *我在 Reflex 担任创始工程师，负责对开源框架做出贡献。*'
- en: In this tutorial we will cover how to build a full AI chat app from scratch
    in pure Python — you can also find all the code at this [Github repo](https://github.com/reflex-dev/reflex-chat).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将讲解如何从头开始使用纯 Python 构建一个完整的 AI 聊天应用——你还可以在这个 [Github 仓库](https://github.com/reflex-dev/reflex-chat)
    找到所有代码。
- en: 'You’ll learn how to:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学到如何：
- en: Install `reflex` and set up your development environment.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `reflex` 并设置你的开发环境。
- en: Create components to define and style your UI.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建组件来定义和设计你的 UI。
- en: Use state to add interactivity to your app.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用状态为你的应用添加交互性。
- en: Deploy your app with a one line command to share with others.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一行命令部署你的应用，与你人分享。
- en: '**Setting up Your Project**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**设置你的项目**'
- en: We will start by creating a new project and setting up our development environment.
    First, create a new directory for your project and navigate to it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个新项目和设置开发环境开始。首先，为你的项目创建一个新目录并进入该目录。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we will create a virtual environment for our project. In this example,
    we will use [venv](https://docs.python.org/3/library/venv.html) to create our
    virtual environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的项目创建一个虚拟环境。在这个示例中，我们将使用 [venv](https://docs.python.org/3/library/venv.html)
    来创建虚拟环境。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, we will install Reflex and create a new project. This will create a new
    directory structure in our project directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安装 Reflex 并创建一个新项目。这将创建项目目录中的新目录结构。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can run the template app to make sure everything is working.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行模板应用来确保一切正常。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see your app running at [http://localhost:3000](http://localhost:3000/)
    .
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在 [http://localhost:3000](http://localhost:3000/) 看到你的应用运行。
- en: Reflex also starts the backend server which handles all the state management
    and communication with the frontend. You can test the backend server is running
    by navigating to [http://localhost:8000/ping](http://localhost:8000/ping) .
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Reflex 还会启动后台服务器，处理所有状态管理和与前端的通信。你可以通过访问 [http://localhost:8000/ping](http://localhost:8000/ping)
    来测试后台服务器是否正在运行。
- en: Now that we have our project set up, let’s build our app!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了项目，开始构建我们的应用吧！
- en: Basic Frontend
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本前端
- en: Let’s start with defining the frontend for our chat app. In Reflex, the frontend
    can be broken down into independent, reusable components. See the [components
    docs](https://reflex.dev/docs/components/overview) for more information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从定义聊天应用的前端开始。在 Reflex 中，前端可以拆分为独立的、可重用的组件。有关更多信息，请查看 [组件文档](https://reflex.dev/docs/components/overview)。
- en: '**Display A Question And Answer**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示问题和答案**'
- en: We will modify the `index` function in `chatapp/chatapp.py` file to return a
    component that displays a single question and answer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改 `chatapp/chatapp.py` 文件中的 `index` 函数，以返回一个显示单个问题和答案的组件。
- en: '![](../Images/041549be349a849571c46d0ea096bc6b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/041549be349a849571c46d0ea096bc6b.png)'
- en: Image by Author (code below)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片（代码如下）
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Components can be nested inside each other to create complex layouts. Here we
    create a parent container that contains two boxes for the question and answer.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以相互嵌套以创建复杂的布局。在这里，我们创建了一个父容器，其中包含两个框，用于显示问题和答案。
- en: We also add some basic styling to the components. Components take in keyword
    arguments, called [props](https://reflex.dev/docs/components/props), that modify
    the appearance and functionality of the component. We use the `text_align` prop
    to align the text to the left and right.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为组件添加了一些基本的样式。组件接受关键字参数，称为 [props](https://reflex.dev/docs/components/props)，这些参数可以修改组件的外观和功能。我们使用
    `text_align` 属性将文本对齐到左侧和右侧。
- en: '**Reusing Components**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**重用组件**'
- en: Now that we have a component that displays a single question and answer, we
    can reuse it to display multiple questions and answers. We will move the component
    to a separate function `question_answer` and call it from the `index` function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个显示单个问题和答案的组件，我们可以重用它来显示多个问题和答案。我们将把该组件移动到一个单独的函数 `question_answer` 中，并从
    `index` 函数中调用它。
- en: '![](../Images/9cf61a98fd6edb5698e80d5f1c630ba3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9cf61a98fd6edb5698e80d5f1c630ba3.png)'
- en: Image by Author (code below)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片（代码如下）
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Chat Input**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**聊天输入**'
- en: Now we want a way for the user to input a question. For this, we will use the
    [input](https://reflex.dev/docs/library/forms/input) component to have the user
    add text and a [button](https://reflex.dev/docs/library/forms/button) component
    to submit the question.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们希望用户能够输入一个问题。为此，我们将使用[input](https://reflex.dev/docs/library/forms/input)组件让用户添加文本，并使用[button](https://reflex.dev/docs/library/forms/button)组件来提交问题。
- en: '![](../Images/144b4dc95f7d6ee0316b7ce1f6aecfa1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/144b4dc95f7d6ee0316b7ce1f6aecfa1.png)'
- en: Image by Author (code below)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片（下面的代码）
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Styling**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**样式**'
- en: Let’s add some styling to the app. More information on styling can be found
    in the [styling docs](https://reflex.dev/docs/styling/overview). To keep our code
    clean, we will move the styling to a separate file `chatapp/style.py`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给应用添加一些样式。有关样式的更多信息可以在[styling docs](https://reflex.dev/docs/styling/overview)中找到。为了保持代码的整洁，我们将样式移动到一个单独的文件`chatapp/style.py`中。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will import the styles in `chatapp.py` and use them in the components. At
    this point, the app should look like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入`chatapp.py`中的样式并在组件中使用它们。此时，应用应该如下所示：
- en: '![](../Images/5a48239ff82f9a54c2c04675d426f23e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a48239ff82f9a54c2c04675d426f23e.png)'
- en: Image by Author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The app is looking good, but it’s not very useful yet! Now let’s add some functionality.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 应用看起来不错，但还不是很有用！现在让我们添加一些功能。
- en: State
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态
- en: Now let’s make the chat app interactive by adding state. The state is where
    we define all the variables that can change in the app and all the functions that
    can modify them. You can learn more about state in the [state docs](https://reflex.dev/docs/state/overview).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过添加状态来使聊天应用变得互动。状态是我们定义应用中所有可以变化的变量以及所有可以修改这些变量的函数的地方。你可以在[state docs](https://reflex.dev/docs/state/overview)中了解更多关于状态的信息。
- en: '**Defining State**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义状态**'
- en: We will create a new file called `state.py` in the `chatapp` directory. Our
    state will keep track of the current question being asked and the chat history.
    We will also define an event handler `answer`which will process the current question
    and add the answer to the chat history.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`chatapp`目录中创建一个名为`state.py`的新文件。我们的状态将跟踪当前提出的问题和聊天记录。我们还将定义一个事件处理程序`answer`，它将处理当前的问题并将答案添加到聊天记录中。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Binding State to Components**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**将状态绑定到组件**'
- en: Now we can import the state in `chatapp.py` and reference it in our frontend
    components. We will modify the `chat` component to use the state instead of the
    current fixed questions and answers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在`chatapp.py`中导入状态，并在前端组件中引用它。我们将修改`chat`组件，以使用状态代替当前固定的问题和答案。
- en: '![](../Images/b26582a1c8163c09beca3a8e91972f1c.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b26582a1c8163c09beca3a8e91972f1c.png)'
- en: Image by Author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Normal Python `for` loops don't work for iterating over state vars because these
    values can change and aren't known at compile time. Instead, we use the [foreach](https://reflex.dev/docs/library/layout/foreach)
    component to iterate over the chat history.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 普通的 Python `for` 循环无法用于遍历状态变量，因为这些值可能会变化且在编译时未知。相反，我们使用[foreach](https://reflex.dev/docs/library/layout/foreach)组件来遍历聊天记录。
- en: We also bind the input’s `on_change` event to the `set_question` event handler,
    which will update the `question` state var while the user types in the input.
    We bind the button's `on_click` event to the `answer` event handler, which will
    process the question and add the answer to the chat history. The `set_question`
    event handler is a built-in implicitly defined event handler. Every base var has
    one. Learn more in the [events docs](https://reflex.dev/docs/state/events) under
    the Setters section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将输入框的`on_change`事件绑定到`set_question`事件处理程序，这将更新`question`状态变量，而用户在输入框中输入时。我们将按钮的`on_click`事件绑定到`answer`事件处理程序，这将处理问题并将答案添加到聊天记录中。`set_question`事件处理程序是一个内置的隐式定义事件处理程序。每个基础变量都有一个。更多信息请查看[events
    docs](https://reflex.dev/docs/state/events)中的Setters部分。
- en: '**Clearing the Input**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**清空输入框**'
- en: Currently the input doesn’t clear after the user clicks the button. We can fix
    this by binding the value of the input to `question`, with `value=State.question`,
    and clear it when we run the event handler for `answer`, with `self.question =
    ''`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，用户点击按钮后输入框不会清空。我们可以通过将输入框的值绑定到`question`，设置为`value=State.question`，并在运行`answer`事件处理程序时将其清空，使用`self.question
    = ''`来解决这个问题。
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Streaming Text**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**流式文本**'
- en: Normally state updates are sent to the frontend when an event handler returns.
    However, we want to stream the text from the chatbot as it is generated. We can
    do this by yielding from the event handler. See the [event yield docs](https://reflex.dev/docs/state/events#yielding-multiple-updates)
    for more info.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，状态更新会在事件处理程序返回时发送到前端。然而，我们希望在生成的过程中流式传输来自聊天机器人的文本。我们可以通过从事件处理程序中生成来实现。有关更多信息，请参见[事件生成文档](https://reflex.dev/docs/state/events#yielding-multiple-updates)。
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using the API
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用API
- en: We will use OpenAI’s API to give our chatbot some intelligence. We need to modify
    our event handler to send a request to the API.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用OpenAI的API为我们的聊天机器人提供一些智能。我们需要修改事件处理程序以向API发送请求。
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, we have our AI chatbot!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了我们的AI聊天机器人！
- en: Conclusion
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Following this tutorial we have successfully created our Chat App using OpenAI’s
    API key, purely in Python.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这个教程，我们已经成功创建了使用OpenAI API密钥的聊天应用，完全用Python编写。
- en: 'To run this app now we can run the simple command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要现在运行这个应用，我们可以运行简单的命令：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To deploy it, so that we can share it with other users, we can run the command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署它，以便我们可以与其他用户分享，我们可以运行以下命令：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: I hope this tutorial inspires you to build your own LLM based apps. I’m eager
    to see what you all end up building, so please reach out on social media or in
    the comments.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个教程能激发你们构建自己的LLM基础应用。我迫不及待想看到你们最终开发出什么，所以请在社交媒体或评论中与我联系。
- en: If you have questions, please comment them below or message me on Twitter at
    [@tgotsman12](https://twitter.com/tgotsman12) or on [LinkedIn](https://www.linkedin.com/in/tom-gotsman/).
    Share your app creations on social media and tag me, and I’ll be happy to provide
    feedback or help retweet!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有问题，请在下方评论或者通过Twitter上的[@tgotsman12](https://twitter.com/tgotsman12)或[LinkedIn](https://www.linkedin.com/in/tom-gotsman/)给我发消息。分享你的应用创作到社交媒体并标记我，我很乐意提供反馈或帮助转发！
