["```py\n$ pip install weaviate-client\n```", "```py\nimport weaviate\n```", "```py\nauth_config = weaviate.AuthApiKey(api_key=\"YOUR-WEAVIATE-API-KEY\")  # Replace w/ your Weaviate instance API key\n\n# Instantiate the client\nclient = weaviate.Client(\n    url=\"https://<your-sandbox-name>.weaviate.network\", # Replace w/ your Weaviate cluster URL\n    auth_client_secret=auth_config,\n    additional_headers={\n        \"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\", # Replace with your OpenAI key\n        }\n)\n```", "```py\nclient.is_ready()\n```", "```py\nimport pandas as pd\n\ndf = pd.read_csv(\"your_file_path.csv\", nrows = 100)\n```", "```py\nclass_obj = {\n    # Class definition\n    \"class\": \"JeopardyQuestion\",\n\n    # Property definitions\n    \"properties\": [\n        {\n            \"name\": \"category\",\n            \"dataType\": [\"text\"],\n        },\n        {\n            \"name\": \"question\",\n            \"dataType\": [\"text\"],\n        },\n        {\n            \"name\": \"answer\",\n            \"dataType\": [\"text\"],\n        },\n    ],\n\n    # Specify a vectorizer\n    \"vectorizer\": \"text2vec-openai\",\n\n    # Module settings\n    \"moduleConfig\": {\n        \"text2vec-openai\": {\n            \"vectorizeClassName\": False,\n            \"model\": \"ada\",\n            \"modelVersion\": \"002\",\n            \"type\": \"text\"\n        },\n    },\n}\n```", "```py\nclient.schema.create_class(class_obj)\n```", "```py\nclient.schema.get(\"JeopardyQuestion\")\n```", "```py\n{\n  \"class\": \"JeopardyQuestion\",\n  \"invertedIndexConfig\": {\n    \"bm25\": {\n      \"b\": 0.75,\n      \"k1\": 1.2\n    },\n    \"cleanupIntervalSeconds\": 60,\n    \"stopwords\": {\n      \"additions\": null,\n      \"preset\": \"en\",\n      \"removals\": null\n    }\n  },\n  \"moduleConfig\": {\n    \"text2vec-openai\": {\n      \"model\": \"ada\",\n      \"modelVersion\": \"002\",\n      \"type\": \"text\",\n      \"vectorizeClassName\": false\n    }\n  },\n  \"properties\": [\n    {\n      \"dataType\": [\n        \"text\"\n      ],\n      \"indexFilterable\": true,\n      \"indexSearchable\": true,\n      \"moduleConfig\": {\n        \"text2vec-openai\": {\n          \"skip\": false,\n          \"vectorizePropertyName\": false\n        }\n      },\n      \"name\": \"category\",\n      \"tokenization\": \"word\"\n    },\n    {\n      \"dataType\": [\n        \"text\"\n      ],\n      \"indexFilterable\": true,\n      \"indexSearchable\": true,\n      \"moduleConfig\": {\n        \"text2vec-openai\": {\n          \"skip\": false,\n          \"vectorizePropertyName\": false\n        }\n      },\n      \"name\": \"question\",\n      \"tokenization\": \"word\"\n    },\n    {\n      \"dataType\": [\n        \"text\"\n      ],\n      \"indexFilterable\": true,\n      \"indexSearchable\": true,\n      \"moduleConfig\": {\n        \"text2vec-openai\": {\n          \"skip\": false,\n          \"vectorizePropertyName\": false\n        }\n      },\n      \"name\": \"answer\",\n      \"tokenization\": \"word\"\n    }\n  ],\n  \"replicationConfig\": {\n    \"factor\": 1\n  },\n  \"shardingConfig\": {\n    \"virtualPerPhysical\": 128,\n    \"desiredCount\": 1,\n    \"actualCount\": 1,\n    \"desiredVirtualCount\": 128,\n    \"actualVirtualCount\": 128,\n    \"key\": \"_id\",\n    \"strategy\": \"hash\",\n    \"function\": \"murmur3\"\n  },\n  \"vectorIndexConfig\": {\n    \"skip\": false,\n    \"cleanupIntervalSeconds\": 300,\n    \"maxConnections\": 64,\n    \"efConstruction\": 128,\n    \"ef\": -1,\n    \"dynamicEfMin\": 100,\n    \"dynamicEfMax\": 500,\n    \"dynamicEfFactor\": 8,\n    \"vectorCacheMaxObjects\": 1000000000000,\n    \"flatSearchCutoff\": 40000,\n    \"distance\": \"cosine\",\n    \"pq\": {\n      \"enabled\": false,\n      \"bitCompression\": false,\n      \"segments\": 0,\n      \"centroids\": 256,\n      \"encoder\": {\n        \"type\": \"kmeans\",\n        \"distribution\": \"log-normal\"\n      }\n    }\n  },\n  \"vectorIndexType\": \"hnsw\",\n  \"vectorizer\": \"text2vec-openai\"\n}\n```", "```py\nfrom weaviate.util import generate_uuid5\n\nwith client.batch(\n    batch_size=200,  # Specify batch size\n    num_workers=2,   # Parallelize the process\n) as batch:\n    for _, row in df.iterrows():\n        question_object = {\n            \"category\": row.category,\n            \"question\": row.question,\n            \"answer\": row.answer,\n        }\n        batch.add_data_object(\n            question_object,\n            class_name=\"JeopardyQuestion\",\n            uuid=generate_uuid5(question_object)\n        )\n```", "```py\nclient.query.aggregate(\"JeopardyQuestion\").with_meta_count().do()\n```", "```py\n{'data': {'Aggregate': {'JeopardyQuestion': [{'meta': {'count': 100}}]}}}\n```", "```py\nclient.query.get(\n    <Class>,\n    [<properties>]\n).<arguments>.do()\n```", "```py\nimport json\n\nres = client.query.get(\"JeopardyQuestion\", \n                      [\"question\", \"answer\", \"category\"])\n                  .with_additional([\"id\", \"vector\"])\n                  .with_limit(2)\n                  .do()\n\nprint(json.dumps(res, indent=4))\n```", "```py\n{\n    \"data\": {\n        \"Get\": {\n            \"JeopardyQuestion\": [\n                {\n                    \"_additional\": {\n                        \"id\": \"064fee53-f8fd-4513-9294-432170cc9f77\",\n                        \"vector\": [ -0.02465364, ...] # Vector is trunkated for better readability \n                    },\n                    \"answer\": \"(Lou) Gehrig\",\n                    \"category\": \"ESPN's TOP 10 ALL-TIME ATHLETES\",\n                    \"question\": \"No. 10: FB/LB for Columbia U. in the 1920s; MVP for the Yankees in '27 & '36; \\\"Gibraltar in Cleats\\\"\"\n                },\n                {\n                    \"_additional\": {\n                        \"id\": \"1041117a-34af-40a4-ad05-3dae840ad6b9\",\n                        \"vector\": [ -0.031970825, ...] # Vector is trunkated for better readability\n                    },\n                    \"answer\": \"Jim Thorpe\",\n                    \"category\": \"ESPN's TOP 10 ALL-TIME ATHLETES\",\n                    \"question\": \"No. 2: 1912 Olympian; football star at Carlisle Indian School; 6 MLB seasons with the Reds, Giants & Braves\"\n                },\n            ]\n        }\n    }\n}\n```", "```py\nres = client.query.get(\n    \"JeopardyQuestion\",\n    [\"question\", \"answer\", \"category\"])\\\n    .with_near_text({\"concepts\": \"animals\"})\\\n    .with_limit(2)\\\n    .do()\n```", "```py\n{\n    \"data\": {\n        \"Get\": {\n            \"JeopardyQuestion\": [\n                {\n                    \"answer\": \"an octopus\",\n                    \"category\": \"SEE & SAY\",\n                    \"question\": \"Say the name of <a href=\\\"http://www.j-archive.com/media/2010-07-06_DJ_26.jpg\\\" target=\\\"_blank\\\">this</a> type of mollusk you see\"\n                },\n                {\n                    \"answer\": \"the ant\",\n                    \"category\": \"3-LETTER WORDS\",\n                    \"question\": \"In the title of an Aesop fable, this insect shared billing with a grasshopper\"\n                }\n            ]\n        }\n    }\n}\n```", "```py\n# Module settings\n    \"moduleConfig\": {\n        \"text2vec-openai\": {\n          ...\n        },\n        \"qna-openai\": {\n          \"model\": \"text-davinci-002\"\n        }\n    },\n```", "```py\nask = {\n  \"question\": \"Which animal was mentioned in the title of the Aesop fable?\",\n  \"properties\": [\"answer\"]\n}\n\nres = (\n  client.query\n  .get(\"JeopardyQuestion\", [\n      \"question\",\n      \"_additional {answer {hasAnswer property result} }\"\n  ])\n  .with_ask(ask)\n  .with_limit(1)\n  .do()\n)\n```", "```py\n{\n    \"JeopardyQuestion\": [\n        {\n            \"_additional\": {\n                \"answer\": {\n                    \"hasAnswer\": true,\n                    \"property\": \"\",\n                    \"result\": \" The ant\"\n                }\n            },\n            \"question\": \"In the title of an Aesop fable, this insect shared billing with a grasshopper\"\n        }\n    ]\n}\n```", "```py\n# Module settings\n    \"moduleConfig\": {\n        \"text2vec-openai\": {\n          ...\n        },\n        \"generative-openai\": {\n          \"model\": \"gpt-3.5-turbo\"\n        }\n    },\n```", "```py\nres = client.query.get(\n    \"JeopardyQuestion\", \n    [\"question\", \"answer\"])\\\n  .with_near_text({\"concepts\": [\"animals\"]})\\\n  .with_limit(1)\\\n  .with_generate(single_prompt= \"Generate a question to which the answer is {answer}\")\\\n  .do()\n```", "```py\n{\n    \"generate\": {\n        \"error\": null,\n        \"singleResult\": \"What sea creature has eight arms and is known for its intelligence and camouflage abilities?\"\n    }\n}\n```"]