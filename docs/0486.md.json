["```py\ndf['rating'] = 1\n```", "```py\nfrom sklearn.preprocessing import LabelEncoder\nu_transf = LabelEncoder()\nitem_transf = LabelEncoder()\n# encoding\ndf['user'] = u_transf.fit_transform(df['user'])\ndf['item'] = item_transf.fit_transform(df['item'])\n# decoding\ndf['item'] = item_transf.inverse_transform(df['item'])\ndf['user'] = u_transf.inverse_transform(df['user'])\n```", "```py\ndef reduce_sparsity(df, min_items_per_user, min_user_per_item, user_col=USER_COL, item_col=ITEM_COL):\n    good_users = df[user_col].value_counts()[df[user_col].value_counts() > min_items_per_user].index\n    df = df[df[user_col].isin(good_users)]\n\n    good_items = df[item_col].value_counts()[df[item_col].value_counts() > min_user_per_item].index\n    df = df[df[item_col].isin(good_items)].reset_index(drop=1)\n\n    return df\n```", "```py\ndf[item_col].value_counts()[:top_n]\n```", "```py\nimport json\nfrom pathlib import Path\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\nfrom models import RandomModel, MostPopular, ModelALS, BIVAE, evaluate\nfrom setup import ITEM_COL, TOP_K_METRICS, TOP_K_PRED\n\ndef main(out_folder='outputs'):\n    df = pd.read_csv('personalize.csv.zip', compression='zip').iloc[:, :3]\n\n    genres = pd.read_csv('movies.csv').rename({\"movieId\": ITEM_COL}, axis=1).dropna()\n\n    train, test = train_test_split(df, test_size=None, train_size=0.75, random_state=42)\n\n    metrics = {}\n    for model_cls in [BIVAE, ModelALS, RandomModel, MostPopular]:\n        model = model_cls()\n        model.fit(train)\n\n        preds = model.transform(TOP_K_PRED)\n\n        preds.to_csv(Path(out_folder) / f\"{model_cls.__name__}_preds.csv\", index=False)\n        metrics[model_cls.__name__] = evaluate(train, test, preds, genres, TOP_K_METRICS)\n\n    with open('outputs/metrics.json', 'w') as fp:\n        json.dump(metrics, fp)\n\nif __name__ == \"__main__\":\n    main()\n```"]