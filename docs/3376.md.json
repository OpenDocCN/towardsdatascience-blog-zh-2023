["```py\nimport statsmodels.formula.api as smf\n\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing'))\", data=df_a)\n\nresults = model.fit(method='bfgs')\nprint(results.summary())\n```", "```py\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing'))\", data=df_a)\n\nresults = model.fit(method='bfgs',maxiter=30000)\nprint(results.summary())\n```", "```py\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing')) + \\\n    C(type,Treatment('Missing'))\", data=df_a) \n\nresults = model.fit(method='bfgs', maxiter=300000)\nprint(results.summary())\n```", "```py\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing')) + \\\n    C(type,Treatment('Missing')) + \\\n    C(VA,Treatment('Missing')) + \\\n    C(VB,Treatment('Missing')) + \\\n    C(VC,Treatment('Missing')) + \\\n    C(VI,Treatment('Missing'))\", data=df_a) \n\nresults = model.fit(method='bfgs', maxiter=300000)\nprint(results.summary())\n```", "```py\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing')) + \\\n    C(type,Treatment('Missing')) + \\\n    C(VA,Treatment('Missing')) + \\\n    C(VB,Treatment('Missing')) + \\\n    C(VC,Treatment('Missing')) + \\\n    C(VI_alt,Treatment(0))\", data=df_a) \n\nresults = model.fit(method='bfgs', maxiter=300000)\nprint(results.summary())\n```", "```py\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvariables = results.model.exog\nvif = [variance_inflation_factor(variables, i) for i in range(variables.shape[1])]\n\nvifs = pd.DataFrame({'variables':results.model.exog_names,'vif':[ '%.2f' % elem for elem in vif ]})\nvifs.sort_index(ascending=False).head(14)\n```", "```py\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing')) + \\\n    C(type,Treatment('Missing')) + \\\n    C(VA,Treatment('Missing')) + \\\n    C(VC,Treatment('Missing')) + \\\n    C(VI_alt,Treatment(0))\", data=df_a) \n\nresults = model.fit(method='bfgs', maxiter=300000)\nprint(results.summary())\n```", "```py\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing')) + \\\n    C(type,Treatment('Missing')) + \\\n    C(VA,Treatment('Missing')) + \\\n    C(VI_alt,Treatment(0))\", data=df_a) \n\nresults = model.fit(method='bfgs', maxiter=300000)\nprint(results.summary())\n```", "```py\ndf_a['new_target_satisfaction'] = \npd.concat([pd.DataFrame(np.where(df_a.target_satisfaction.iloc[:1000]==1,0,df_a.target_satisfaction[:1000]),columns=[\"target_satisfaction\"]),\npd.DataFrame(df_a.target_satisfaction.iloc[1000:],columns=['target_satisfaction'])],axis=0)\n```", "```py\nmodel = smf.logit(\"target_satisfaction ~ C(age,Treatment('0-13')) + \\\n    C(educ,Treatment('Some High School')) + \\\n    C(emp,Treatment('Not Employed')) + \\\n    C(gender,Treatment('Male')) + \\\n    C(hispanic,Treatment('N')) + \\\n    C(dept,Treatment('Medical Oncology')) + \\\n    C(sign_status,Treatment('Activated')) + \\\n    C(mode,Treatment('Internet')) + \\\n    C(inf,Treatment('Missing')) + \\\n    C(type,Treatment('Missing')) + \\\n    C(VA,Treatment('Missing')) + \\\n    C(VI_alt,Treatment(0)) + \\\n    C(new_target_satisfaction,Treatment(0))\", data=df_a) \n\nresults = model.fit(method='lbfgs',  maxiter=1000000)\nprint(results.summary())\n```", "```py\n categorical_features = ['educ','emp','gender','hispanic','dept','sign_status','mode','inf','type',\n'VA','VI_alt','new_target_satisfaction']\n\ndf1_y = df_a['target_satisfaction']\ndf1_x = df_a[['educ','emp','gender','hispanic','dept','sign_status','mode','inf','type',\n'VA','VI_alt','new_target_satisfaction']]\n\n# create a pipeline for all categorical features\ncategorical_transformer = Pipeline(steps=[\n    ('ohe', OneHotEncoder(handle_unknown='ignore'))])\n\n# create the overall column transformer\ncol_transformer = ColumnTransformer(transformers=[\n    ('ohe', OneHotEncoder(handle_unknown='ignore'), categorical_features)],\n   # ('num', numeric_transformer, numeric_features)],\n                                    remainder='passthrough')\n\nlr = Pipeline(steps = [('preprocessor', col_transformer),\n                            ('classifier', LogisticRegression(solver='lbfgs',max_iter=200000))])\n#['liblinear', 'newton-cg', 'lbfgs', 'sag', 'saga']\n\nX_train, X_test, y_train, y_test = train_test_split(df1_x, df1_y, test_size=0.2, random_state=101)\n\nlr_model = lr.fit(X_train, y_train)\ny_pred = lr_model.predict(X_test)\n\n# to leverage threshold resetting\n# THRESHOLD = 0.5\n# y_pred = np.where(lr_model.predict_proba(X_test)[:,1] > THRESHOLD, 1, 0)\n\nprint(classification_report(y_test, y_pred)) \n```"]