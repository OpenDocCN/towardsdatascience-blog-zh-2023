- en: Easily Validate User-Generated Data Using Pydantic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/easily-validate-user-generated-data-using-pydantic-5ace695cc3c8?source=collection_archive---------0-----------------------#2023-02-05](https://towardsdatascience.com/easily-validate-user-generated-data-using-pydantic-5ace695cc3c8?source=collection_archive---------0-----------------------#2023-02-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to us Pydantic to validate Excel data
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@Carobert?source=post_page-----5ace695cc3c8--------------------------------)[![Charles
    Mendelson](../Images/0a8dea9bab2a49da65687095d31065e9.png)](https://medium.com/@Carobert?source=post_page-----5ace695cc3c8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5ace695cc3c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5ace695cc3c8--------------------------------)
    [Charles Mendelson](https://medium.com/@Carobert?source=post_page-----5ace695cc3c8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f4d278f87e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasily-validate-user-generated-data-using-pydantic-5ace695cc3c8&user=Charles+Mendelson&userId=a6f4d278f87e&source=post_page-a6f4d278f87e----5ace695cc3c8---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5ace695cc3c8--------------------------------)
    ·6 min read·Feb 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5ace695cc3c8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasily-validate-user-generated-data-using-pydantic-5ace695cc3c8&user=Charles+Mendelson&userId=a6f4d278f87e&source=-----5ace695cc3c8---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5ace695cc3c8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasily-validate-user-generated-data-using-pydantic-5ace695cc3c8&source=-----5ace695cc3c8---------------------bookmark_footer-----------)![](../Images/96cde2e366e02c4c391f8c67f7152853.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [DeepMind](https://unsplash.com/@deepmind?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/oVm12cylnBw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Using Pydantic to validate Excel data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a data engineer, I frequently encounter situations where I have built pipelines
    and other automations based on user-generated data from Excel. Excel’s flexibility
    allows it to be used by a wide variety of users, but unfortunately, that flexibility
    leads to invalid data entering the pipeline. Before I discovered Pydantic, I wrote
    incredibly complex Pandas functions to check and filter data to make sure it was
    valid.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: What is Pydantic?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pydantic is a Python library that lets you define a data model in a Pythonic
    way, and use that model to validate data inputs, mainly through using type hints.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample data:'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get going, let’s examine our sample data; a spreadsheet of RPG characters
    I created using random name generators:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5825d98934e0724e818ffd407f4dc8f1.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Column headers in bold indicate required fields, and we can see that some of
    the required fields are missing. Also, some of our text fields, like `Race`, `Class`
    and `Gender` should be restricted to specific words instead of being free-text
    fields.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Starting our data model
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pydantic has a number of starting points for a data model, but ours is pretty
    simple so we are going to use `pydantic.BaseMode` l:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The syntax is pretty simple. After defining the class and inheriting from our
    base model, we enter each of our field names and provide a type hint.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: While this is a good start, this model has some severe limitations. Right now
    it will accept any string for a number of fields that we would prefer to be restricted
    to certain values.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Enums to control string fields
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Type hints in Pydantic are more powerful when working with other class types
    in Python. One of these powerful features is being able to limit string entries
    by defining Enums and passing the Enum as a type hint.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we define those choices as Enums:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can use these enums to be much more specific with our data model:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our data model is looking better, but there are two more things we need to do
    to really tighten it up.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Specify required fields
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify a range for pay. Numbers are a common place for data entry mistakes
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pydantic offers an optional function that lets us define even more specificity
    in our data model.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Field() for even greater specificity.
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When defining a field in our data model, we can call the function Field() to
    specify additional options, including whether or not a field is required, and
    setting up limitations on numeric inputs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Passing `...` as the first argument to Field indicates that it is required.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: the `ge` keyword means `Greater than or equal to`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `le` keyword means `Less than or equal to`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the model
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we’ve done all the work to define the model, we need to use it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Pydantic models expect to receive JSON-like data, so any data we pass to our
    model for validation must be a dictionary.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'For our data validation, we need to do the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Receive a DataFrame as an input
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert it to a list of dictionaries (one dictionary per row)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run each row through data validation
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Append successfully validated rows to one list
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将成功验证的行追加到一个列表中
- en: Append failed rows to another list, with the row number and the error message
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将失败的行追加到另一个列表中，包含行号和错误信息
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using this function, we can process the good rows of data, and return the bad
    rows of data for QA, modification, and resubmission.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个功能，我们可以处理好的数据行，并将不良的数据行返回以进行 QA、修改和重新提交。
- en: Full code
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整代码
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All code plus sample data can be found in my [GitHub repo](https://github.com/Carobert85/pydantic_data_validation)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码和示例数据可以在我的 [GitHub 仓库](https://github.com/Carobert85/pydantic_data_validation)
    中找到
- en: Conclusion and next steps
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论及下一步
- en: Pydantic is exceptionally powerful, and while this was a simple example, it
    can handle complex nested models. This really allows a lot of granularity with
    data validation without writing a ton of code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 非常强大，虽然这是一个简单的示例，但它可以处理复杂的嵌套模型。这确实提供了许多数据验证的细粒度，而无需编写大量代码。
- en: As an additional benefit, modeling the data really helps you understand it,
    rather than just taking whatever is thrown at you.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的好处，对数据进行建模确实有助于你理解数据，而不是仅仅接受你所得到的内容。
- en: While this tutorial focused on Pandas, you can use Pydantic to validate most
    forms of data inputs with Python.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本教程专注于 Pandas，但你可以使用 Pydantic 来验证 Python 中的大多数数据输入形式。
- en: About
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于
- en: Charles Mendelson is a Seattle-based Data Engineer, with delusions of software
    engineering. In addition to working as a DE, he also assists teaching Python at
    the University of Washington’s School of Professional and Continuing Education.
    [The best way to get in touch with him is via LinkedIn](https://www.linkedin.com/in/charles-mendelson-carobert/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 查尔斯·门德尔森是一位驻西雅图的数据工程师，怀有软件工程的幻想。除了作为数据工程师工作外，他还协助华盛顿大学继续教育学院教授 Python。 [与他联系的最佳方式是通过
    LinkedIn](https://www.linkedin.com/in/charles-mendelson-carobert/)。
- en: '*Originally published at* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/pydantic-data-validation/)
    *on February 5, 2023.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发表于* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/pydantic-data-validation/)
    *2023年2月5日。*'
