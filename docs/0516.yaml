- en: Easily Validate User-Generated Data Using Pydantic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/easily-validate-user-generated-data-using-pydantic-5ace695cc3c8?source=collection_archive---------0-----------------------#2023-02-05](https://towardsdatascience.com/easily-validate-user-generated-data-using-pydantic-5ace695cc3c8?source=collection_archive---------0-----------------------#2023-02-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to us Pydantic to validate Excel data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@Carobert?source=post_page-----5ace695cc3c8--------------------------------)[![Charles
    Mendelson](../Images/0a8dea9bab2a49da65687095d31065e9.png)](https://medium.com/@Carobert?source=post_page-----5ace695cc3c8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5ace695cc3c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5ace695cc3c8--------------------------------)
    [Charles Mendelson](https://medium.com/@Carobert?source=post_page-----5ace695cc3c8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f4d278f87e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasily-validate-user-generated-data-using-pydantic-5ace695cc3c8&user=Charles+Mendelson&userId=a6f4d278f87e&source=post_page-a6f4d278f87e----5ace695cc3c8---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5ace695cc3c8--------------------------------)
    ·6 min read·Feb 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5ace695cc3c8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasily-validate-user-generated-data-using-pydantic-5ace695cc3c8&user=Charles+Mendelson&userId=a6f4d278f87e&source=-----5ace695cc3c8---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5ace695cc3c8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feasily-validate-user-generated-data-using-pydantic-5ace695cc3c8&source=-----5ace695cc3c8---------------------bookmark_footer-----------)![](../Images/96cde2e366e02c4c391f8c67f7152853.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [DeepMind](https://unsplash.com/@deepmind?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/oVm12cylnBw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Using Pydantic to validate Excel data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a data engineer, I frequently encounter situations where I have built pipelines
    and other automations based on user-generated data from Excel. Excel’s flexibility
    allows it to be used by a wide variety of users, but unfortunately, that flexibility
    leads to invalid data entering the pipeline. Before I discovered Pydantic, I wrote
    incredibly complex Pandas functions to check and filter data to make sure it was
    valid.
  prefs: []
  type: TYPE_NORMAL
- en: What is Pydantic?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pydantic is a Python library that lets you define a data model in a Pythonic
    way, and use that model to validate data inputs, mainly through using type hints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample data:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get going, let’s examine our sample data; a spreadsheet of RPG characters
    I created using random name generators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5825d98934e0724e818ffd407f4dc8f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Column headers in bold indicate required fields, and we can see that some of
    the required fields are missing. Also, some of our text fields, like `Race`, `Class`
    and `Gender` should be restricted to specific words instead of being free-text
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: Starting our data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pydantic has a number of starting points for a data model, but ours is pretty
    simple so we are going to use `pydantic.BaseMode` l:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The syntax is pretty simple. After defining the class and inheriting from our
    base model, we enter each of our field names and provide a type hint.
  prefs: []
  type: TYPE_NORMAL
- en: While this is a good start, this model has some severe limitations. Right now
    it will accept any string for a number of fields that we would prefer to be restricted
    to certain values.
  prefs: []
  type: TYPE_NORMAL
- en: Enums to control string fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Type hints in Pydantic are more powerful when working with other class types
    in Python. One of these powerful features is being able to limit string entries
    by defining Enums and passing the Enum as a type hint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we define those choices as Enums:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can use these enums to be much more specific with our data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Our data model is looking better, but there are two more things we need to do
    to really tighten it up.
  prefs: []
  type: TYPE_NORMAL
- en: Specify required fields
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify a range for pay. Numbers are a common place for data entry mistakes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pydantic offers an optional function that lets us define even more specificity
    in our data model.
  prefs: []
  type: TYPE_NORMAL
- en: Field() for even greater specificity.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When defining a field in our data model, we can call the function Field() to
    specify additional options, including whether or not a field is required, and
    setting up limitations on numeric inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Passing `...` as the first argument to Field indicates that it is required.
  prefs: []
  type: TYPE_NORMAL
- en: the `ge` keyword means `Greater than or equal to`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `le` keyword means `Less than or equal to`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we’ve done all the work to define the model, we need to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Pydantic models expect to receive JSON-like data, so any data we pass to our
    model for validation must be a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our data validation, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Receive a DataFrame as an input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert it to a list of dictionaries (one dictionary per row)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run each row through data validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Append successfully validated rows to one list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Append failed rows to another list, with the row number and the error message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using this function, we can process the good rows of data, and return the bad
    rows of data for QA, modification, and resubmission.
  prefs: []
  type: TYPE_NORMAL
- en: Full code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All code plus sample data can be found in my [GitHub repo](https://github.com/Carobert85/pydantic_data_validation)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion and next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pydantic is exceptionally powerful, and while this was a simple example, it
    can handle complex nested models. This really allows a lot of granularity with
    data validation without writing a ton of code.
  prefs: []
  type: TYPE_NORMAL
- en: As an additional benefit, modeling the data really helps you understand it,
    rather than just taking whatever is thrown at you.
  prefs: []
  type: TYPE_NORMAL
- en: While this tutorial focused on Pandas, you can use Pydantic to validate most
    forms of data inputs with Python.
  prefs: []
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Charles Mendelson is a Seattle-based Data Engineer, with delusions of software
    engineering. In addition to working as a DE, he also assists teaching Python at
    the University of Washington’s School of Professional and Continuing Education.
    [The best way to get in touch with him is via LinkedIn](https://www.linkedin.com/in/charles-mendelson-carobert/).
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/pydantic-data-validation/)
    *on February 5, 2023.*'
  prefs: []
  type: TYPE_NORMAL
