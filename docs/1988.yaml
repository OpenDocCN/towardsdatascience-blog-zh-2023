- en: Data Modeling Techniques For Data Warehouse
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据建模技术用于数据仓库
- en: 原文：[https://towardsdatascience.com/data-modeling-techniques-for-data-warehouse-3edcb541e34e?source=collection_archive---------0-----------------------#2023-06-19](https://towardsdatascience.com/data-modeling-techniques-for-data-warehouse-3edcb541e34e?source=collection_archive---------0-----------------------#2023-06-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/data-modeling-techniques-for-data-warehouse-3edcb541e34e?source=collection_archive---------0-----------------------#2023-06-19](https://towardsdatascience.com/data-modeling-techniques-for-data-warehouse-3edcb541e34e?source=collection_archive---------0-----------------------#2023-06-19)
- en: '[](https://medium.com/@mariusz_kujawski?source=post_page-----3edcb541e34e--------------------------------)[![Mariusz
    Kujawski](../Images/72a2dafb84cabfd54b0ef54a6689a001.png)](https://medium.com/@mariusz_kujawski?source=post_page-----3edcb541e34e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3edcb541e34e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3edcb541e34e--------------------------------)
    [Mariusz Kujawski](https://medium.com/@mariusz_kujawski?source=post_page-----3edcb541e34e--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mariusz_kujawski?source=post_page-----3edcb541e34e--------------------------------)[![Mariusz
    Kujawski](../Images/72a2dafb84cabfd54b0ef54a6689a001.png)](https://medium.com/@mariusz_kujawski?source=post_page-----3edcb541e34e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3edcb541e34e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3edcb541e34e--------------------------------)
    [Mariusz Kujawski](https://medium.com/@mariusz_kujawski?source=post_page-----3edcb541e34e--------------------------------)'
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa60a4246b015&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-modeling-techniques-for-data-warehouse-3edcb541e34e&user=Mariusz+Kujawski&userId=a60a4246b015&source=post_page-a60a4246b015----3edcb541e34e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3edcb541e34e--------------------------------)
    ·11 min read·Jun 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3edcb541e34e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-modeling-techniques-for-data-warehouse-3edcb541e34e&user=Mariusz+Kujawski&userId=a60a4246b015&source=-----3edcb541e34e---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa60a4246b015&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-modeling-techniques-for-data-warehouse-3edcb541e34e&user=Mariusz+Kujawski&userId=a60a4246b015&source=post_page-a60a4246b015----3edcb541e34e---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3edcb541e34e--------------------------------)
    ·11分钟阅读·2023年6月19日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3edcb541e34e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-modeling-techniques-for-data-warehouse-3edcb541e34e&user=Mariusz+Kujawski&userId=a60a4246b015&source=-----3edcb541e34e---------------------clap_footer-----------)'
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3edcb541e34e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-modeling-techniques-for-data-warehouse-3edcb541e34e&source=-----3edcb541e34e---------------------bookmark_footer-----------)![](../Images/bcd0e966ffefd7625453d48e696cd863.png)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3edcb541e34e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-modeling-techniques-for-data-warehouse-3edcb541e34e&source=-----3edcb541e34e---------------------bookmark_footer-----------)![](../Images/bcd0e966ffefd7625453d48e696cd863.png)'
- en: Photo by [Zdeněk Macháček](https://unsplash.com/@zmachacek?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/silver-and-diamond-studded-cross-pendant-rGzUMs-QsCM?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Zdeněk Macháček](https://unsplash.com/@zmachacek?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    在 [Unsplash](https://unsplash.com/photos/silver-and-diamond-studded-cross-pendant-rGzUMs-QsCM?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: Data modeling is a process of creating a conceptual representation of the data
    and its relationships within an organization or system. Dimensional modeling is
    an advanced technique that attempts to present data in a way that is intuitive
    and understandable for any user. It also allows for high-performance access, flexibility,
    and scalability to accommodate changes in business needs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据建模是创建数据及其在组织或系统中关系的概念表示的过程。维度建模是一种先进的技术，旨在以任何用户都能直观理解的方式呈现数据。它还允许高性能的访问、灵活性和可扩展性，以适应业务需求的变化。
- en: In this article, I will provide an in-depth overview of data modeling, with
    a specific focus on Kimball’s methodology. Additionally, I will introduce other
    techniques used to present data in a user-friendly and intuitive manner. One particularly
    interesting technique for modern data warehouses is storing data in one wide table,
    although this approach may not be suitable for all query engines. I will present
    techniques that can be used in Data Warehouses, Data Lakes, Data Lakehouses, etc.
    However, it is important to choose the appropriate methodology for your specific
    use case and query engine.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将深入概述数据建模，特别关注Kimball的方法。此外，我还将介绍其他用于以用户友好和直观的方式呈现数据的技术。一个特别有趣的技术是将数据存储在一个宽表中，尽管这种方法可能不适用于所有查询引擎。我将介绍在数据仓库、数据湖、数据湖屋等中使用的技术。然而，选择适合特定用例和查询引擎的方法论非常重要。
- en: What is dimensional modeling?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是维度建模？
- en: Every dimensional model consists of one or more tables with a multipart key,
    referred to as the fact table, along with a set of tables known as dimension tables.
    Each dimension table has a primary key that precisely corresponds to one of the
    components of the multipart key in the fact table. This distinct structure is
    commonly referred to as a star schema. In some cases, a more intricate structure
    called a snowflake schema can be used, where dimension tables are connected to
    smaller dimension tables
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个维度模型由一个或多个具有多部分键的表组成，称为事实表，以及一组称为维度表的表。每个维度表都有一个主键，与事实表中多部分键的一个组件精确对应。这种独特的结构通常被称为星型模式。在某些情况下，可以使用一种更复杂的结构称为雪花模式，其中维度表与更小的维度表相连接。
- en: 'Benefits of dimensional modeling:'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维度建模的好处：
- en: 'Dimensional modeling provides a practical and efficient approach to organizing
    and analyzing data, resulting in the following benefits:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 维度建模提供了一种实用而高效的数据组织和分析方法，带来了以下好处：
- en: Simplicity and understandability for business users.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为业务用户提供简单易懂的体验。
- en: Improved query performance for faster data retrieval.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进查询性能以加快数据检索速度。
- en: Flexibility and scalability to adapt to changing business needs.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活性和可扩展性以适应不断变化的业务需求。
- en: Ensured data consistency and integration across multiple sources.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保多个来源的数据一致性和集成。
- en: Enhanced user adoption and self-service analytics.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强用户采用和自助分析。
- en: Now that we have discussed what dimensional modeling is and the value it brings
    to organizations, let’s explore how to effectively leverage it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了什么是维度建模及其为组织带来的价值，让我们探讨如何有效利用它。
- en: Data and dimensional modeling methodologies
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据和维度建模方法
- en: While I intend to primarily focus on Kimball’s methodology, let’s briefly touch
    upon a few other popular techniques before diving into it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我打算主要关注Kimball的方法，但在深入研究之前，让我们简要了解几种其他流行的技术。
- en: Inmon methodology
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Inmon方法
- en: Inmon suggests utilizing a normalized data model within the data warehouse.
    This methodology supports the creation of data marts. These data marts are smaller,
    specialized subsets of the data warehouse that cater to specific business areas
    or user groups. These are designed to provide a more tailored and efficient data
    access experience for particular business functions or departments.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Inmon建议在数据仓库中使用规范化的数据模型。这种方法支持数据集市的创建。这些数据集市是数据仓库的较小、专门的子集，服务于特定的业务领域或用户组。它们旨在为特定的业务功能或部门提供更量身定制和高效的数据访问体验。
- en: Data vault
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据保险库
- en: 'Data Vault is a modeling methodology that focuses on scalability, flexibility,
    and traceability. It consists of three core components: the Hub, the Link, and
    the Satellite.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据保险库是一种建模方法，重点关注可扩展性、灵活性和可追溯性。它由三个核心组件组成：中心、链接和卫星。
- en: '**Hubs**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**中心**'
- en: Hubs are collections of all distinct entities. For example, an account hub would
    include account, account_ID, load_date, and src_name. This allows us to track
    where the record originally came from when it was loaded, and if we need a surrogate
    key generated from the business key.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 中心是所有独特实体的集合。例如，一个账户中心将包括账户、account_ID、load_date和src_name。这使我们能够追踪记录最初的来源，并确定是否需要从业务键生成替代键。
- en: '**Links**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**链接**'
- en: Links establish relationships between hubs and capture the associations between
    different entities. They contain the foreign keys of the related hubs, enabling
    the creation of many-to-many relationships.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 链接建立中心之间的关系，并捕获不同实体之间的关联。它们包含相关中心的外键，支持多对多关系的创建。
- en: '**Satellites**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**卫星表**'
- en: Satellites store the descriptive information about the hubs, providing additional
    context and attributes. They include historical data, audit information, and other
    relevant attributes associated with a specific point in time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 卫星表存储关于中心的描述性信息，提供额外的上下文和属性。它们包括历史数据、审计信息以及与特定时间点相关的其他属性。
- en: Data Vault’s design allows for a flexible and scalable data warehouse architecture.
    It promotes data traceability, auditability, and historical tracking. This makes
    it suitable for scenarios where data integration and agility are critical, such
    as in highly regulated industries or rapidly changing business environments.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Data Vault 的设计允许灵活且可扩展的数据仓库架构。它促进数据的可追溯性、可审计性和历史跟踪。这使得它适用于数据集成和敏捷性至关重要的场景，如高度受监管的行业或快速变化的商业环境。
- en: One big table (OBT)
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一大表（OBT）
- en: OBT stores data in one wide table. Using one big table, or a denormalized table,
    can simplify queries, improve performance, and streamline data analysis. It eliminates
    the need for complex joins, eases data integration, and can be beneficial in certain
    scenarios. However, it may lead to redundancy, data integrity challenges, and
    increased maintenance complexity. Consider the specific requirements before opting
    for a single large table.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: OBT 将数据存储在一个宽表中。使用一个大表或非规范化表可以简化查询、提高性能，并简化数据分析。这消除了复杂连接的需求，简化了数据集成，在某些场景中可能有益。然而，它可能导致冗余、数据完整性挑战和维护复杂性增加。在选择单个大表之前，请考虑具体要求。
- en: '![](../Images/2b36ef7f7f59f4d90d6c5509f236dba9.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b36ef7f7f59f4d90d6c5509f236dba9.png)'
- en: '*Image by author*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图片*'
- en: '![](../Images/fd80be2f450e6d9bb262696929318624.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd80be2f450e6d9bb262696929318624.png)'
- en: '*Image by author*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图片*'
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the case of one wide table we don’t need to join tables. We can use only
    one table to aggregate data and make analyzes. This method improves performance
    in BigQuery.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个宽表，我们不需要连接多个表。我们可以使用一个表来聚合数据和进行分析。这种方法提高了 BigQuery 的性能。
- en: '![](../Images/38ee5df5fb0b2e9441c4bac0d842af0a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38ee5df5fb0b2e9441c4bac0d842af0a.png)'
- en: '*Image by author*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图片*'
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Kimball methodology
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kimball 方法论
- en: The Kimball methodology places significant emphasis on the creation of a centralized
    data repository known as the data warehouse. This data warehouse serves as a singular
    source of truth, integrating and storing data from various operational systems
    in a consistent and structured manner.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kimball 方法论强调创建一个称为数据仓库的集中数据存储库。这个数据仓库作为唯一的真实数据源，以一致且结构化的方式整合和存储来自各种操作系统的数据。
- en: This approach offers a comprehensive set of guidelines and best practices for
    designing, developing, and implementing data warehouse systems. It places a strong
    emphasis on creating dimensional data models and prioritizes simplicity, flexibility,
    and ease of use. Now, let’s delve into the key principles and components of the
    Kimball methodology.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法提供了一套全面的指导方针和最佳实践，用于设计、开发和实施数据仓库系统。它强调创建维度数据模型，并优先考虑简洁性、灵活性和易用性。现在，让我们*深入探讨*
    Kimball 方法论的关键原则和组件。
- en: Entity model to dimensional model
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体模型到维度模型
- en: In our data warehouses, the sources of data are often found in entity models
    that are normalized into multiple tables, which contain the business logic for
    applications. In such a scenario, it can be challenging as one needs to understand
    the dependencies between tables and the underlying business logic. Creating an
    analytical report or generating statistics often requires joining multiple tables.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据仓库中，数据源通常存在于实体模型中，这些模型被规范化为多个表，包含应用程序的业务逻辑。在这种情况下，理解表之间的依赖关系和基础业务逻辑可能很具挑战性。创建分析报告或生成统计数据通常需要连接多个表。
- en: '![](../Images/1a947ad8d14ba9efcdc4eddd888dc990.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a947ad8d14ba9efcdc4eddd888dc990.png)'
- en: '*Image by author*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图片*'
- en: To create a dimensional model, the data needs to undergo an Extract, Transform,
    and Load (ETL) process to denormalize it into a star schema or snowflake schema.
    The key activity in this process involves identifying the fact and dimension tables
    and defining the granularity. The granularity determines the level of detail stored
    in the fact table. For example, transactions can be aggregated per hour or day.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建维度模型，数据需要经过提取、转换和加载（ETL）过程，将其反规范化为星型模式或雪花模式。这个过程的关键活动包括识别事实表和维度表，并定义粒度。粒度决定了事实表中存储的详细程度。例如，交易可以按小时或按天汇总。
- en: '![](../Images/03b560d9831197a64117c53619483fdb.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03b560d9831197a64117c53619483fdb.png)'
- en: '*Image by author*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: 'Let’s assume we have a company that sells bikes and bike accessories. In this
    case, we have information about:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一家销售自行车和自行车配件的公司。在这种情况下，我们有以下信息：
- en: Transactions
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易
- en: Stores
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商店
- en: Clients
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户
- en: Products
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品
- en: Based on our business knowledge, we know that we need to collect information
    about sales volume, quantity over time, and segmented by regions, customers, and
    products. With this information, we can design our data model. The transactions’
    table will serve as our fact table, and the stores, clients, and products tables
    will act as dimensional tables.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的业务知识，我们知道需要收集关于销售量、随时间变化的数量，以及按地区、客户和产品细分的信息。根据这些信息，我们可以设计我们的数据模型。交易表将作为我们的事实表，而商店、客户和产品表将作为维度表。
- en: Fact table
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事实表
- en: A fact table typically represents a business event or transaction and includes
    the metrics or measures associated with that event. These metrics can encompass
    various data points such as sales amounts, quantities sold, customer interactions,
    website clicks, or any other measurable data that offers insights into business
    performance. The fact table also includes foreign key columns that establish relationships
    with dimension tables.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 事实表通常代表一个业务事件或交易，并包括与该事件相关的指标或度量。这些指标可以包含各种数据点，如销售金额、销售数量、客户互动、网站点击或任何其他提供业务绩效见解的可衡量数据。事实表还包括建立与维度表关系的外键列。
- en: '![](../Images/5ae5b71eda11bbbfcdf349d3e6bf204e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5ae5b71eda11bbbfcdf349d3e6bf204e.png)'
- en: '*Image by author*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: The best practice in the fact table design is to put all foreign keys on the
    top of the table and then measure.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 事实表设计的最佳实践是将所有外键放在表的顶部，然后再进行度量。
- en: '**Fact Tables Types**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**事实表类型**'
- en: '**Transaction Fact Tables** gives a grain at its lowest level as one row represents
    a record from the transaction system. Data is refreshed on a daily basis or in
    real time.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**交易事实表**提供的粒度在其最低级别为一行代表来自交易系统的一条记录。数据会每日或实时刷新。'
- en: '**Periodic Snapshot Fact Tables** capture a snapshot of a fact table at a point
    in time, like for instance the end of month.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定期快照事实表**捕捉某一时间点的事实表快照，例如月末。'
- en: '**Accumulating Snapshot Fact Table** summarizes the measurement events occurring
    at predictable steps between the beginning and the end of a process.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**累积快照事实表**总结了在过程开始和结束之间的可预测步骤中发生的测量事件。'
- en: '**Factless Fact Table** keeps information about events occurring without any
    masseurs or metrics.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无事实表**记录没有任何度量或指标的事件信息。'
- en: Dimension table
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 维度表
- en: A dimension table is a type of table in dimensional modeling that contains descriptive
    attributes like for instance information about products, its category, and type.
    Dimension tables provide the context and perspective to the quantitative data
    stored in the fact table.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 维度表是维度建模中的一种表，包含描述性属性，例如关于产品、其类别和类型的信息。维度表为存储在事实表中的定量数据提供了背景和视角。
- en: Dimension tables contain a unique key that identifies each record in the table,
    named the surrogate key. The table can contain a business key that is a key from
    a source system. A good practice is to generate a surrogate key instead of using
    a business key.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 维度表包含一个唯一键，用于识别表中的每条记录，称为代理键。表中可以包含一个来自源系统的业务键。一个好的做法是生成代理键，而不是使用业务键。
- en: 'There are several approaches to creating a [surrogate key](https://docs.getdbt.com/terms/surrogate-key):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建[代理键](https://docs.getdbt.com/terms/surrogate-key)有几种方法：
- en: '-Hashing: a surrogate key can be generated using a hash function like MD5,
    SHA256(e.g. md5(key_1, key_2, key_3) ).'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 哈希：可以使用类似MD5、SHA256的哈希函数生成代理键（例如 md5(key_1, key_2, key_3)）。'
- en: '-Incrementing: a surrogate key that is generated by using a number that is
    always incrementing (e.g. row_number(), identity).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 增量生成：通过使用总是递增的数字（例如 row_number()、identity）生成的替代键'
- en: '-Concatenating: a surrogate key that is generated by concatenating the unique
    key columns (e.g. concat(key_1, key_2, key_3) ).'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 连接生成：通过连接唯一键列（例如 concat(key_1, key_2, key_3)）生成的替代键'
- en: '-Unique generated: a surrogate key that is generated by using a function that
    generates a unique identifier (e.g. GENERATE_UUID())'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 唯一生成的：通过使用生成唯一标识符的函数（例如 GENERATE_UUID()）生成的替代键'
- en: The method that you will choose depends on the engine that you use to process
    and store data. It can impact performance of querying data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的方法取决于你用于处理和存储数据的引擎。这可能会影响数据查询的性能。
- en: Dimensional tables often contain hierarchies.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 维度表通常包含层级结构。
- en: a) For example, the parent-child hierarchy can be used to represent the relationship
    between an employee and their manager.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: a) 例如，父子层级可以用来表示员工与其经理之间的关系。
- en: '![](../Images/7400319e972334b96a44a27bbf50af4c.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7400319e972334b96a44a27bbf50af4c.png)'
- en: '*Image by author*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图像*'
- en: b) Hierarchical relationships between attributes. For example, a time dimension
    might have attributes like year, quarter, month, and day, forming a hierarchical
    structure.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 属性之间的层级关系。例如，一个时间维度可能具有如年份、季度、月份和日期等属性，形成一个层级结构。
- en: '![](../Images/b3514eac53f64cdef2228faa0da08fa1.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3514eac53f64cdef2228faa0da08fa1.png)'
- en: '*Image by author*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图像*'
- en: Types of dimension tables
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 维度表的类型
- en: '**Conformed Dimension:**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**一致维度：**'
- en: A conformed dimension is a dimension that can be used by multiple fact tables.
    For example, a region table can be utilized by different fact tables.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一致维度是可以被多个事实表使用的维度。例如，一个区域表可以被不同的事实表利用。
- en: '**Degenerate Dimension:**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**退化维度：**'
- en: A degenerate dimension occurs when an attribute is stored in the fact table
    instead of a dimension table. For instance, the transaction number can be found
    in a fact table.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当属性存储在事实表中而不是维度表中时，就会发生退化维度。例如，交易编号可以在事实表中找到。
- en: '**Junk Dimension:**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**垃圾维度：**'
- en: This one contains non-meaningful attributes that do not fit well in existing
    dimension tables, or are combinations of flags and binary values representing
    various combinations of states.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含在现有维度表中不适合的无意义属性，或表示各种状态组合的标志和二进制值的组合。
- en: '**Role-Playing Dimension:**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色扮演维度：**'
- en: The same dimension key includes more than one foreign key in the fact table.
    For example, a date dimension can refer to different dates in a fact table, such
    as creation date, order date, and delivery date.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的维度键在事实表中包含多个外键。例如，日期维度可以在事实表中引用不同的日期，如创建日期、订单日期和交货日期。
- en: '**Static Dimension:**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态维度：**'
- en: A static dimension is a dimension that typically never changes. It can be loaded
    from reference data without requiring updates. An example could be a list of branches
    in a company.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 静态维度是一个通常不会变化的维度。它可以从参考数据中加载而无需更新。一个例子可能是公司的分支机构列表。
- en: '**Bridge Table:**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**桥表：**'
- en: Bridge tables are used when there are one-to-many relationships between a fact
    table and a dimension table.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当事实表与维度表之间存在一对多关系时，使用桥表。
- en: Slowly changing dimension
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓慢变化维度
- en: 'A Slowly Changing Dimension (SCD) is a concept in dimensional modeling. It
    handles changes to dimension attributes over time in dimension tables. SCD provides
    a mechanism for maintaining historical and current data within a dimension table
    as business entities evolve and their attributes change. There are six types of
    SCD, but the three most popular ones are:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 缓慢变化维度（SCD）是维度建模中的一个概念。它处理维度表中维度属性随时间的变化。SCD 提供了一种机制，用于在业务实体发展及其属性变化时维护维度表中的历史数据和当前数据。SCD
    有六种类型，但最受欢迎的三种是：
- en: '**SCD Type 0**: In this type, only new records are imported into dimension
    tables without any updates.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCD 类型 0**：在这种类型中，仅导入新记录到维度表中，不进行任何更新。'
- en: '**SCD Type 1**: In this type, new records are imported into dimension tables,
    and existing records are updated.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCD 类型 1**：在这种类型中，新记录被导入到维度表中，现有记录被更新。'
- en: '**SCD Type 2**: In this type, new records are imported, and new records with
    new values are created for changed attributes.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCD 类型 2**：在这种类型中，新记录被导入，并为更改的属性创建新记录和新值。'
- en: For example, when John Smith moves to another city, we use SCD Type 2 to keep
    information about transactions related to London. In this case, we create a new
    record and update the previous one. As a result, historical reports will retain
    information that his purchases were made in London.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当John Smith搬到另一个城市时，我们使用SCD类型2来保留与伦敦相关的事务信息。在这种情况下，我们创建一个新记录并更新之前的记录。结果是，历史报告将保留他在伦敦进行购买的信息。
- en: '![](../Images/c306976ff4f127eca061b72ecd2e909b.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c306976ff4f127eca061b72ecd2e909b.png)'
- en: '*Image by author*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: '![](../Images/b4cdc58db4d5b1c5cdd84a8c9438c7c9.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4cdc58db4d5b1c5cdd84a8c9438c7c9.png)'
- en: '*Image by author*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is how SCD 3 looks when we keep new and previous values in separate columns.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是SCD 3的样子，当我们将新值和旧值保存在不同列时。
- en: '![](../Images/d2a51a21a63e1326f5dc2f9ecb214dc4.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2a51a21a63e1326f5dc2f9ecb214dc4.png)'
- en: Star schema vs. snowflake schema
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 星型模式与雪花模式
- en: The most popular approach to designing a data warehouse is to utilize either
    a star schema or a snowflake schema. The star schema has fact tables and dimensional
    tables that are in relation to the fact table. In a star schema, there are fact
    tables and dimensional tables that are directly related to the fact table. On
    the other hand, a snowflake schema consists of a fact table, dimension tables
    related to the fact table, and additional dimensions related to those dimension
    tables.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 设计数据仓库时最流行的方法是使用星型模式或雪花模式。星型模式包含与事实表相关的事实表和维度表。在星型模式中，事实表和维度表直接与事实表相关。另一方面，雪花模式由一个事实表、与事实表相关的维度表以及与这些维度表相关的附加维度组成。
- en: '![](../Images/d41c14bae29ccbc8c586f723e2194ea7.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d41c14bae29ccbc8c586f723e2194ea7.png)'
- en: '*Image by author*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: The main differences between these two designs lie in their normalization approach.
    The star schema keeps data denormalized, while the snowflake schema ensures normalization.
    The star schema is designed for better query performance. The snowflake schema
    is specifically tailored to handle updates on large dimensions. If you encounter
    challenges with updates to extensive dimension tables, consider transitioning
    to a snowflake schema.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种设计之间的主要区别在于它们的规范化方法。星型模式保持数据非规范化，而雪花模式确保规范化。星型模式旨在提供更好的查询性能。雪花模式专门设计用来处理大型维度的更新。如果你在更新大规模维度表时遇到挑战，可以考虑转换为雪花模式。
- en: Data loading strategies
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据加载策略
- en: 'In our data warehouse, data lake, and data lake house we can have various load
    strategies like:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据仓库、数据湖和数据湖屋中，我们可以有各种加载策略，例如：
- en: '**Full Load:** The full load strategy involves loading all data from source
    systems into the data warehouse. This strategy is typically used in the case of
    performance issues or lack of columns that could inform about row modification.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**全量加载（Full Load）：** 全量加载策略涉及从源系统中加载所有数据到数据仓库中。当出现性能问题或缺乏可以指示行修改的列时，通常会使用这种策略。'
- en: '**Incremental Load:** The incremental load strategy involves loading only new
    data since the last data load. If rows in the source system can’t be changed,
    we can load only new records based on a unique identifier or creation date. We
    need to define a “watermark” that we will use to select new rows.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**增量加载（Incremental Load）：** 增量加载策略涉及仅加载自上次数据加载以来的新数据。如果源系统中的行不能更改，我们可以基于唯一标识符或创建日期仅加载新记录。我们需要定义一个“水印”，以便用于选择新行。'
- en: '**Delta Load:** The delta load strategy focuses on loading only the changed
    and new records since the last load. It differs from incremental load in that
    it specifically targets the delta changes rather than all records. Delta load
    strategies can be efficient when dealing with high volumes of data changes and
    significantly reduce the processing time and resources required.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**增量加载（Delta Load）：** 增量加载策略专注于加载自上次加载以来发生变化或新增的记录。它与增量加载的不同之处在于，它专门针对增量变化，而不是所有记录。当处理大量数据变化时，增量加载策略可以提高效率，并显著减少处理时间和所需资源。'
- en: The most common strategy to load data is to populate dimension tables and then
    fact tables. The order here is important because we need to use primary keys from
    dimension tables in fact tables to create relationships between tables. There
    is an exception. When we need to load a fact table before a dimension table, this
    technique name is late arriving dimensions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 加载数据的最常见策略是首先填充维度表，然后填充事实表。这里的顺序很重要，因为我们需要在事实表中使用维度表的主键来创建表之间的关系。有一个例外情况。当我们需要在维度表之前加载事实表时，这种技术被称为“迟到维度”（late
    arriving dimensions）。
- en: In this technique, we can create surrogate keys in a dimension table, and update
    it by ETL process after populating the fact table.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种技术中，我们可以在维度表中创建代理键，并在填充事实表后通过ETL过程更新它。
- en: '**Summary**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结**'
- en: After a thorough reading of the article, if you have any questions or would
    like to further discuss data modeling and effective dimensional models, feel free
    to reach out to me on [LinkedIn](https://www.linkedin.com/in/mariusz-kujawski-812bb1103/).
    Implementing data modeling can unlock the potential of your data, providing valuable
    insights for informed decision-making while gaining knowledge in methods and best
    practices.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细阅读本文后，如果你有任何问题或想进一步讨论数据建模和有效的维度模型，请随时通过[LinkedIn](https://www.linkedin.com/in/mariusz-kujawski-812bb1103/)与我联系。实施数据建模可以释放数据的潜力，为明智决策提供有价值的见解，同时获得方法和最佳实践的知识。
