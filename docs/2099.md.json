["```py\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n# force CPU\n# device = 'cpu'\n\n# reduce d_max if too many ratio values are 0.0\nd_max = 22\n# reduce n if you run out of memory\nn = 10**8\n\nratio = np.zeros(d_max)\n\nfor d in tqdm(range(d_max, 0, -1)):\n    torch.manual_seed(0)\n    # combine large tensor statements for better memory allocation\n    ratio[d - 1] = (\n        torch.sum(\n            torch.sqrt(\n                torch.sum(torch.pow(torch.rand((n, d), device=device) - 0.5, 2), dim=1)\n            )\n            <= 0.5\n        ).item()\n        / n\n    )\n\n# clean up memory\ntorch.cuda.empty_cache()\n```", "```py\n>>> print(list(ratio))\n[1.0, 0.78548005, 0.52364381, 0.30841056, 0.16450286, 0.08075666, 0.03688062, 0.015852, 0.00645304, 0.00249584, 0.00092725, 0.00032921, 0.00011305, 3.766e-05, 1.14e-05, 3.29e-06, 9.9e-07, 2.8e-07, 8e-08, 3e-08, 2e-08, 0.0]\n```", "```py\nn_points_d = 10**3\n# how many pairs of points are there\ndist_count = n_points_d * (n_points_d - 1) / 2\n# we use the full pair-wise matrix of distances,\n# so each distance will be counted twice\ndist_count = 2 * dist_count\nd_max = d_max_diag\n\navg_dist = np.zeros(d_max)\navg_dist_nn = np.zeros(d_max)\n\nfor d in tqdm(range(d_max, 0, -1)):\n    torch.manual_seed(0)\n    # generate random points\n    point_coordinates = torch.rand((n_points_d, d), device=device)\n    # compute differences of point coordinates on all axes\n    coord_diffs = point_coordinates.unsqueeze(1) - point_coordinates\n    del point_coordinates\n    # square the coordinate differences\n    diffs_squared = torch.pow(coord_diffs, 2)\n    del coord_diffs\n    # compute distances between any 2 points\n    distances_full = torch.sqrt(torch.sum(diffs_squared, dim=2))\n    del diffs_squared\n    # compute average distance between points\n    avg_dist[d - 1] = torch.sum(distances_full).item() / dist_count\n    # compute distances to nearest neighbors\n    distances_full[distances_full == 0.0] = np.sqrt(d) + 1\n    distances_nn, _ = torch.min(distances_full, dim=0)\n    del distances_full\n    # compute average distance to nearest neighbors\n    avg_dist_nn[d - 1] = torch.mean(distances_nn).item()\n    del distances_nn\n\ntorch.cuda.empty_cache()\n```"]