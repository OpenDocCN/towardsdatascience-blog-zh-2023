["```py\nuse polars::prelude::*;\n\nlet series: Series = [1, 2, 3].iter().collect();\n\n// or\n\nlet series: Series = Series::new(\"\", &[1, 2, 3]);\n\nprintln!(\"{:?}\", series);\n```", "```py\nshape: (3,)\nSeries: ‘’ [i32]\n[\n 1\n 2\n 3\n]\n```", "```py\nlet seasons_ser: Series = Series::new(\"seasons\", &[\"Winter\", \"Spring\", \"Summer\", \"Fall\"]);\nprintln!(\"{:?}\", seasons_ser);\n```", "```py\nshape: (4,)\nSeries: 'seasons' [str]\n[\n    \"Winter\"\n    \"Spring\"\n    \"Summer\"\n    \"Fall\"\n]\n```", "```py\n>>> import pandas as pd\n>>> seasons = [\"Winter\", \"Spring\", \"Summer\", None]\n>>> pd.Series(seasons)\n\n0    Winter\n1    Spring\n2    Summer\n3      None\ndtype: object\n```", "```py\n>>> numbers = [1, 2, None]\n>>> pd.Series(numbers)\n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n```", "```py\nlet s: Series = Series::new(\"seasons\", &[None, Some(1), Some(2)]);\n\n// Output:\n\n// shape: (3,)\n// Series: 'seasons' [i32]\n// [\n//  null\n//  1\n//  2\n// ] \n```", "```py\nSome(f64::NAN)==None\n// false\nf64::NAN==f64::NAN\n// false\n```", "```py\nlet s: Series = Series::new(\"numbers\", &[Some(f64::NAN), Some(1.), Some(2.)]);\n\nprintln!(\"{:?}\", s.null_count());\n\n// Output:\n\n// 0\n\ns.drop_nulls()\n\n// Output:\n\n// shape: (3,)\n// Series: 'numbers' [f64]\n// [\n//     NaN\n//     1.0\n//     2.0\n// ]\n```", "```py\nlet s: Series = Series::new(\"numbers\", &[Some(f64::NAN), Some(1.), Some(2.)]);\nprintln!(\"{:?}\", s.cast(&DataType::Int64).unwrap());\n\n// Output:\n\n// shape: (3,)\n// Series: 'numbers' [i64]\n// [\n//     null\n//     1\n//     2\n// ]\n```", "```py\nlet s = Series::new_empty(\"Height\", &DataType::Float32);\nprintln!(\"{:?}\", s);\n\n// Output:\n\n// shape: (0,)\n// Series: 'Height' [f32]\n// [\n// ]\n```", "```py\nlet s: Series = Series::new(\"employees\", &[\"Mahmoud\", \"Ferris\"]);\nprintln!(\"{:?}\", s);\n\n// Output:\n\n// shape: (2,)\n// Series: 'employees' [str]\n// [\n//     \"Mahmoud\"\n//     \"Ferris\"\n// ]\n```", "```py\ns.name()\n\n// Output\n\n// \"employees\"\n```", "```py\nlet s: Series = Series::new(\"employees\", &vec![\"Mahmoud\", \"Ferris\"]);\nprintln!(\"{:?}\", s);\n\n// Output:\n\n// shape: (2,)\n// Series: 'employees' [str]\n// [\n//     \"Mahmoud\"\n//     \"Ferris\"\n// ]\n```", "```py\nlet s = Float64Chunked::new(\"b\", &[1., 2., 3.]).into_series();\nprintln!(\"{:?}\", s);\n\n// Output:\n\n// shape: (3,)\n// Series: 'b' [f64]\n// [\n//     1.0\n//     2.0\n//     3.0\n// ]\n```", "```py\nlet date: DateTime<Utc> = Utc.with_ymd_and_hms(2020, 1, 1, 0, 0, 0).unwrap();\nlet s = Series::new(\"b\", &[date.date_naive()]);\nprintln!(\"{:?}\", s);\n\n// shape: (1,)\n// Series: 'b' [date]\n// [\n//     2020-01-01\n// ]\n```", "```py\nlet s: Series = Series::new(\"employees\", &vec![\"Ferris\", \"Mahmoud\"]);\nprintln!(\"{:?}\", s.get(0).unwrap());\n\n// Output:\n\n// Utf8(\"Ferris\")\n```", "```py\nlet s: Series = Series::new(\"employees\", &vec![\"Mahmoud\", \"Ferris\"]);\nprintln!(\"{:?}\", s.slice(0, 1));\n\n// Output:\n\n// shape: (1,)\n// Series: 'employees' [str]\n// [\n//     \"Mahmoud\"\n// ]\n```", "```py\nlet s: Series = Series::new(\"employees\", &vec![\"Mahmoud\", \"Ferris\"]);\nprintln!(\"{:?}\", s.len());\n\n// Output:\n\n// 2\n```", "```py\nlet s: Series = Series::new(\"employees\", &vec![\"Mahmoud\", \"Ferris\"]);\nprintln!(\"{:?}\", s.reverse());\n\n// Output:\n\n// shape: (2,)\n// Series: 'employees' [str]\n// [\n//     \"Ferris\"\n//     \"Mahmoud\"\n// ]\n```", "```py\nlet s: Series = Series::new(\"employees\", &vec![\"Mahmoud\", \"Ferris\"]);\nprintln!(\"{:?}\", s.is_empty());\n\n// Output:\n\n// false\n```", "```py\nlet s: Series = Series::new(\"employees\", &vec![Some(\"Ferris\"), None]);\nprintln!(\"{:?}\", s.drop_nulls());\n\n// Output:\n\n// shape: (1,)\n// Series: 'employees' [str]\n// [\n//     \"Ferris\"\n// ]\n```", "```py\nlet s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04, 0.86, 0.16, 0.26, 0.81]);\nprintln!(\"{:?}\", s.head(None));\n\n// Output:\n\n// shape: (10,)\n// Series: 'Measurements' [f64]\n// [\n//     -1.01\n//     0.86\n//     -4.6\n//     3.98\n//     0.53\n//     -7.04\n//     3.98\n//     0.53\n//     -7.04\n//     0.86\n// ]\n```", "```py\nlet s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04, 0.86, 0.16, 0.26, 0.81]);\nprintln!(\"{:?}\", s.tail(None));\n\n// Output:\n\n// shape: (10,)\n// Series: 'Measurements' [f64]\n// [\n//     3.98\n//     0.53\n//     -7.04\n//     3.98\n//     0.53\n//     -7.04\n//     0.86\n//     0.16\n//     0.26\n//     0.81\n// ]\n```", "```py\nlet mut s1 = Series::new(\"Age\", &[23., 27.]);\nlet s2 = Series::new(\"Height\", &[1.84, 1.78]);\nprintln!(\"{:?}\", s1.append(&s2));\n\n// Output;\n\n// shape: (4,)\n// Series: 'Age' [f64]\n// [\n//     23.0\n//     27.0\n//     1.84\n//     1.78\n// ]\n```", "```py\nlet mut s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04]);\nprintln!(\"{:?}\", s.cast(&DataType::Int32).unwrap());\n\n// Output:\n\n// shape: (9,)\n// Series: 'Measurements' [f32]\n// [\n//     -1\n//     0\n//     -4\n//     3\n//     0\n//     -7\n//     3\n//     0\n//     -7\n// ]\n```", "```py\nlet s = Series::new(\"some_missing\", &[Some(1), None, Some(3), Some(4), None, Some(6)]);\nlet filled = s.fill_null(FillNullStrategy::Forward(None))?;\nprintln!(\"{:?}\", filled);\n\n// Output\n\n// Ok(shape: (6,)\n// Series: 'some_missing' [i32]\n// [\n//     1\n//     1\n//     3\n//     4\n//     4\n//     6\n// ])\n```", "```py\nlet s = Series::new(\"some_missing\", &[Some(1), None, Some(3), Some(4), None, Some(6)]);\nlet filled = s.fill_null(FillNullStrategy::Backward(None))?;\nprintln!(\"{:?}\", filled);\n\n// Output\n\n// Ok(shape: (6,)\n// Series: 'some_missing' [i32]\n// [\n//     1\n//     3\n//     3\n//     4\n//     6\n//     6\n// ])\n```", "```py\nlet s = Series::new(\"some_missing\", &[Some(1), None, Some(3), Some(4), None, Some(6)]);\nlet filled = s.fill_null(FillNullStrategy::Mean)?;\nprintln!(\"{:?}\", filled);\n\n// Output\n\n// Ok(shape: (6,)\n// Series: 'some_missing' [i32]\n// [\n//     1\n//     3\n//     3\n//     4\n//     3\n//     6\n// ])\n```", "```py\nlet s = Series::new(\"some_missing\", &[Some(1), None, Some(3), Some(4), None, Some(6)]);\nlet filled = s.fill_null(FillNullStrategy::Min)?;\nprintln!(\"{:?}\", filled);\n\n// Output\n\n// Ok(shape: (6,)\n// Series: 'some_missing' [i32]\n// [\n//     1\n//     1\n//     3\n//     4\n//     1\n//     6\n// ])\n```", "```py\nlet s = Series::new(\"some_missing\", &[Some(1), None, Some(3), Some(4), None, Some(6)]);\nlet filled = s.fill_null(FillNullStrategy::Max)?;\nprintln!(\"{:?}\", filled);\n\n// Output\n\n// Ok(shape: (6,)\n// Series: 'some_missing' [i32]\n// [\n//     1\n//     6\n//     3\n//     4\n//     6\n//     6\n// ])\n```", "```py\nlet s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04]);\n// Take 4 samples with replacement and shuffle (Terms used in probability).\nprintln!(\"{:?}\", s.sample_n(4, true, true, Some(9999)));\n\n// Output:\n\n// shape: (4,)\n// Series: 'Numbers' [f64]\n// [\n//     0.53\n//     -1.01\n//     3.98\n//     0.53\n// ])\n```", "```py\nlet s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04]);\n\nprintln!(\"{:?}\", s.mean().unwrap());\n\n// Output:\n\n// -1.09\n```", "```py\nlet s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04]);\n\nprintln!(\"{:?}\", s.median().unwrap());\n\n// Output:\n\n// 0.53\n```", "```py\nlet s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04]);\n\nprintln!(\"{:?}\", s.mode().unwrap());\n\n// Output:\n\n// shape: (3,)\n// Series: 'Measurements' [f64]\n// [\n//     -7.04\n//     0.53\n//     3.98\n// ]\n```", "```py\nuse polars::chunked_array::object::QuantileInterpolOptions;\n\nlet s = Series::new(\"Measurements\", &[-1.01,  0.86, -4.60, 3.98,  0.53, -7.04, 3.98,  0.53, -7.04]);\nprintln!(\"{:?}\", s.quantile_as_series(0.75, QuantileInterpolOptions::Nearest).unwrap());\n\n// Output:\n\n// shape: (1,)\n// Series: 'Measurements' [f64]\n// [\n//     0.86\n// ]\n```"]