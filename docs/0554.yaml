- en: Learn Discrete Fourier Transform (DFT)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习离散傅里叶变换（DFT）
- en: 原文：[https://towardsdatascience.com/learn-discrete-fourier-transform-dft-9f7a2df4bfe9?source=collection_archive---------1-----------------------#2023-02-08](https://towardsdatascience.com/learn-discrete-fourier-transform-dft-9f7a2df4bfe9?source=collection_archive---------1-----------------------#2023-02-08)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/learn-discrete-fourier-transform-dft-9f7a2df4bfe9?source=collection_archive---------1-----------------------#2023-02-08](https://towardsdatascience.com/learn-discrete-fourier-transform-dft-9f7a2df4bfe9?source=collection_archive---------1-----------------------#2023-02-08)
- en: Mathematical and Coding Perspective
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学与编码视角
- en: '[](https://medium.com/@omar.ok1998?source=post_page-----9f7a2df4bfe9--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----9f7a2df4bfe9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f7a2df4bfe9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f7a2df4bfe9--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----9f7a2df4bfe9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@omar.ok1998?source=post_page-----9f7a2df4bfe9--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----9f7a2df4bfe9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f7a2df4bfe9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f7a2df4bfe9--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----9f7a2df4bfe9--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearn-discrete-fourier-transform-dft-9f7a2df4bfe9&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----9f7a2df4bfe9---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f7a2df4bfe9--------------------------------)
    ·9 min read·Feb 8, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9f7a2df4bfe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearn-discrete-fourier-transform-dft-9f7a2df4bfe9&user=Omar+Alkousa&userId=f8302b9534b5&source=-----9f7a2df4bfe9---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearn-discrete-fourier-transform-dft-9f7a2df4bfe9&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----9f7a2df4bfe9---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f7a2df4bfe9--------------------------------)
    · 9分钟阅读 · 2023年2月8日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9f7a2df4bfe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearn-discrete-fourier-transform-dft-9f7a2df4bfe9&user=Omar+Alkousa&userId=f8302b9534b5&source=-----9f7a2df4bfe9---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9f7a2df4bfe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearn-discrete-fourier-transform-dft-9f7a2df4bfe9&source=-----9f7a2df4bfe9---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9f7a2df4bfe9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flearn-discrete-fourier-transform-dft-9f7a2df4bfe9&source=-----9f7a2df4bfe9---------------------bookmark_footer-----------)'
- en: Digital signal processing (DSP) is the computation of mathematical methods used
    to manipulate signal data [**[1]**](https://doi.org/10.1016/B978-0-08-097768-3.00011-8).
    One of the most important tools in digital signal processing is the Discrete Fourier
    Transform (DFT). It is usually used to produce a signal’s frequency-domain (spectral)
    representation [**[2]**](https://doi.org/10.1016/B978-0-08-099388-1.00003-0).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数字信号处理（DSP）是用于操控信号数据的数学方法的计算[**[1]**](https://doi.org/10.1016/B978-0-08-097768-3.00011-8)。在数字信号处理中，最重要的工具之一就是离散傅里叶变换（DFT）。它通常用于生成信号的频域（谱）表示[**[2]**](https://doi.org/10.1016/B978-0-08-099388-1.00003-0)。
- en: In this post, we will discuss how DFT works and how to implement it to output
    the spectrum of the signals.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论离散傅里叶变换（DFT）的工作原理以及如何实现它以输出信号的频谱。
- en: '![](../Images/594f2523a70041ea1a41998107c6a17a.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/594f2523a70041ea1a41998107c6a17a.png)'
- en: Photo by [Pawel Czerwinski](https://unsplash.com/@pawel_czerwinski?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Pawel Czerwinski](https://unsplash.com/@pawel_czerwinski?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Discrete Fourier Transform (DFT)
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离散傅里叶变换（DFT）
- en: The Fourier Transform is the mathematical backbone of the DFT and the main idea
    behind Spectral Decomposition which concludes that a signal is nothing but a sum
    of sinusoids of different frequency components [**[3]**](https://biblioteca.unisced.edu.mz/bitstream/123456789/1667/1/thinkdsp.pdf).
    Since all of the signal data we are working with are in digital form, a signal
    is a set of samples in the time domain. The Fourier transform on such discrete
    signals can be done using DFT, which can be used to switch back and forth between
    the time and the frequency domains. The time domain contains the samples of the
    signal, whereas the frequency domain represents the spectrum of the sinusoids
    that construct the signal [**[4]**](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=da18cc0dc47a2e9f829bf752e86a985d0dcc22f3).
    The image below describes the relationship between time and frequency domains
    using DFT and IDFT.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dea29cd62c42af7c9637c5322ea1417a.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: '**The relationship between time and frequency domains** [**[4]**](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=da18cc0dc47a2e9f829bf752e86a985d0dcc22f3)**.**
    [Image by the Author]'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Mathematically speaking, if we have a signal (xn) with N samples, the DFT of
    this signal is defined as [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/214d156d3d5f2f9ed97a0a8cb7ba0ebf.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: '**The DFT equation** [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Where:**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '***N***: Number of samples'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***n***: Current sample'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***k***: Current frequency where *k* ∈ [0, *N*−1]'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***xn***: The sine value at sample n'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Xk***: The DFT which includes information on both amplitude and phase'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of the DFT (Xk) is an array of complex numbers that hold the information
    on the frequencies, amplitudes, and phases of sinusoids that construct the input
    signal. The first half of the DFT array (Xk) contains the positive frequency terms,
    while the second half contains the negative frequency terms. Also, when the input
    signal is only a real-valued signal, the first half is the conjugate of the second
    half of frequency terms and the spectrum is symmetric. So, we focus only on the
    first half (the positive frequency terms) in the case of real-valued signals [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
    The figure below represents each of the positive and the negative frequency terms
    in case the number of the input samples (N) is odd or even.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00a15330ac0e57233632f31c7d9c8d4a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: '**Positive and negative frequency terms** [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)**.**
    [Image by the Author]'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'The amplitude and the phase of each sinusoid that adds up to construct the
    signal can be calculated from the complex array (Xk) as follows (Im, and Re, are
    for Imagery and Real parts of a complex number, respectively) [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个正弦波的振幅和相位，构成信号时加起来的这些值，可以从复数数组（Xk）中计算得到（Im和Re分别代表复数的虚部和实部）[**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)：
- en: '![](../Images/236880cbf4eb467a4567a0a237e268b1.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/236880cbf4eb467a4567a0a237e268b1.png)'
- en: '**The amplitude and the phase information can be calculated from these equations**
    [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**振幅和相位信息可以从这些方程中计算得到** [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)'
- en: 'Let’s Code:'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始编码：
- en: We will build a function that calculates DFT based on the first equation above.
    But first, we should generate the signal that we want to use as an input for DFT.
    We will generate a signal that is a sum of 3 sine waves with frequencies (1,20,10)Hz
    and amplitudes (3,1,0.5). The sampling rate will be 200 samples per second. For
    generating the signal, I used a class, Signal, that you can use as well following
    [**this GitHub gist**](https://gist.github.com/OmarAlkousa/4bd0bacb0ff976be4105777965854e06).
    You can easily generate any signal but I used this Signal class for more controllability.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将建立一个基于上述第一个方程计算DFT的函数。但首先，我们需要生成一个作为DFT输入的信号。我们将生成一个由3个正弦波组成的信号，其频率分别为（1,20,10）Hz，振幅分别为（3,1,0.5）。采样率将为每秒200个样本。为了生成信号，我使用了一个类Signal，你可以参考[**这个GitHub
    gist**](https://gist.github.com/OmarAlkousa/4bd0bacb0ff976be4105777965854e06)使用此类。你可以轻松生成任何信号，但我使用了这个Signal类以获得更多的控制。
- en: '**Note**:'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**注意**：'
- en: The DFT and IDFT functions we will write below are released under the MIT license
    and all credits go to the authors of [**this book**](https://pythonnumericalmethods.berkeley.edu/notebooks/Index.html).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在下面编写的DFT和IDFT函数是根据MIT许可证发布的，所有荣誉归[**这本书**](https://pythonnumericalmethods.berkeley.edu/notebooks/Index.html)的作者。
- en: Both of the functions we will discuss are just to understand what is the mathematics
    behind DFT and what is the output of such transform. In practical use, there are
    faster and more efficient algorithms that can calculate the Fourier Transform,
    Fast Fourier Transform (FFT), and its inverse.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将讨论的这两个函数只是为了理解DFT的数学原理以及这种变换的输出。在实际应用中，有更快更高效的算法可以计算傅里叶变换，即快速傅里叶变换（FFT）及其逆变换。
- en: '**Let’s get started…**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们开始吧…**'
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/5f8605af3acfa389493fe5d21456cf2b.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5f8605af3acfa389493fe5d21456cf2b.png)'
- en: '**The signal we generated using our class Signal.** [Image by the Author]'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们使用Signal类生成的信号。** [作者提供的图片]'
- en: Now we will build the DFT function to give us the sinusoids that construct the
    signal we generated above. Make sure to carefully read the comments on the code
    below as it helps you conduct the output of each line.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将建立DFT函数，以提供构成我们上面生成的信号的正弦波。请确保仔细阅读下面代码的注释，因为它们有助于你了解每一行的输出。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/f63aa5d153d6a553676fab0bafb1a03d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f63aa5d153d6a553676fab0bafb1a03d.png)'
- en: '**The output of the DFT function is the spectrum of the signal.** [Image by
    the Author]'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**DFT函数的输出是信号的频谱。** [作者提供的图片]'
- en: The x-axis contains the frequency components that construct the signal. The
    y-axis represents the strength of each frequency component. The lowest frequency
    component in the spectrum is usually called the **Fundamental Frequency** and
    the frequency component with the largest amplitude is called the **Dominant Frequency**
    [**[3]**](https://biblioteca.unisced.edu.mz/bitstream/123456789/1667/1/thinkdsp.pdf).
    In our example above, the 1Hz frequency component is the fundamental and the dominant
    frequency.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: x轴包含构成信号的频率成分。y轴表示每个频率成分的强度。频谱中最低的频率成分通常称为**基频**，而振幅最大的频率成分称为**主频** [**[3]**](https://biblioteca.unisced.edu.mz/bitstream/123456789/1667/1/thinkdsp.pdf)。在我们上面的例子中，1Hz的频率成分是基频和主频。
- en: We can notice the symmetry of the spectrum at half of the sampling rate (try
    different rates); this is usually called the **Folding Frequency**. When recording
    a real-world signal (f(t)) with FN as the highest frequency component, the folding
    frequency should never go below FN to retrieve all of the signal’s information.
    And that’s according to **Nyquist-Shannon Theorem** [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: We can get the actual amplitude of the spectrum by normalizing it to the number
    of input samples (N). But when we focus only on the first half of the spectrum,
    in case the input is a real-valued signal, we normalize the spectrum by N/2 [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
    The code below is to normalize the first half of the spectrum [0, N/2] and to
    plot the spectrum.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/3091c9f902374cc409ec68260f254e1c.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: '**The spectrum of the signal after the normalization.** [Image by the Author]'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Discrete Fourier Transform (IDFT)
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, as you can go from the time domain to the frequency domain, you
    can get back from the frequency domain to the time domain using the Inverse Discrete
    Fourier Transform. This process is very useful in signal processing when you want
    to filter specific frequency components from the signal using DFT and then retrieve
    the signal back to its time domain using IDFT. The IDFT can be calculated from
    the Xk sequence following the equation [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/faab5118486d3213448af511311db326.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: '**IDFT equation** [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build a function that can calculate the IDFT using the equation above.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/f04ce306a6163dae28c2edd44d88be8a.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: '**The signal retrieved by the IDFT function and the original signal are the
    same.** [Image by the Author]'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The limit of DFT
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case of a signal with a big number of samples, the execution time of
    the DFT function will be long to apply the Fourier Transform on all of the data
    points of the signal. Fortunately, an efficient algorithm to calculate the DFT
    of the signal has been developed, the Fast Fourier Transform (FFT). This algorithm
    reduces the execution complexity from O(N²) to only O(NlogN), where N is the size
    of the data. The significant reduction of computation complexity by using FFT
    allows the wide use of Fourier Transform in engineering, science, and mathematics
    fields [**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Python provides multiple functionalities that the user can use to apply Fourier
    Transform using Numpy or Scipy python packages. The code below represents the
    comparison of time execution using the DFT function we built above, the FFT using
    the Numpy package [**[6]**](https://numpy.org/doc/stable/reference/generated/numpy.fft.fft.html),
    and the FFT Scipy package [**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.fft.html).
    Using FFT from the Scipy package was the fastest.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了多个功能，用户可以使用 Numpy 或 Scipy Python 包来应用傅里叶变换。下面的代码表示了使用我们之前构建的 DFT 函数、使用
    Numpy 包的 FFT [**[6]**](https://numpy.org/doc/stable/reference/generated/numpy.fft.fft.html)
    和使用 Scipy 包的 FFT [**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.fft.html)
    进行时间执行的比较。使用 Scipy 包中的 FFT 是最快的。
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Conclusion
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We’ve learned how useful the Fourier Transform is in the signal processing field.
    And we’ve understood the main idea behind it.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经了解了傅里叶变换在信号处理领域的有用性，并且理解了其主要思想。
- en: We’ve pointed out the mathematical perspective of the Discrete Fourier Transform
    and how it can be calculated for a discrete signal.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经指出了离散傅里叶变换的数学视角以及如何对离散信号进行计算。
- en: We’ve built a function that calculates the DFT using the mathematical equation
    and we applied the function to a signal we generated using a class Signal we’ve
    built in this previous post.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们构建了一个使用数学方程计算 DFT 的函数，并将该函数应用于我们使用在上一篇文章中构建的 Signal 类生成的信号。
- en: We’ve learned that the output of the DFT is an array of complex numbers with
    N number of elements, the same as the number of samples of the input signal. These
    complex numbers hold information on the amplitude and the phase of the spectrum.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经了解到 DFT 的输出是一个包含 N 个元素的复数数组，元素数量与输入信号的样本数量相同。这些复数包含了频谱的幅度和相位信息。
- en: We’ve seen that the output of the DFT will be symmetrical to half of the sampling
    rate if the input signal is a real-value signal. And this is why we focus only
    on the positive frequency components.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经看到，如果输入信号是实值信号，DFT 的输出将对半个采样率对称。这就是我们只关注正频率分量的原因。
- en: An equation to calculate the Inverse Discrete Fourier Transform, IDFT, has been
    pointed out. And we’ve built a function to calculate the IDFT to retrieve the
    original signal from the spectrum.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已经指出了计算离散傅里叶变换的逆变换（IDFT）的方程。我们也构建了一个函数来计算 IDFT，以从频谱中恢复原始信号。
- en: We’ve discussed the limitation of the functions we’ve built and there is an
    efficient algorithm to calculate the Fourier transforms, Fast Fourier Transform.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们讨论了我们构建的函数的局限性，并且有一个高效的算法可以计算傅里叶变换，即快速傅里叶变换。
- en: References
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[**[1]**](https://doi.org/10.1016/B978-0-08-097768-3.00011-8) R. Toulson, R.,
    & Wilmshurst, T. (2012). An Introduction to Digital Signal Processing. *Fast and
    Effective Embedded Systems Design* (pp. 219–242). Elsevier. [https://doi.org/10.1016/B978-0-08-097768-3.00011-8](https://doi.org/10.1016/B978-0-08-097768-3.00011-8)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[1]**](https://doi.org/10.1016/B978-0-08-097768-3.00011-8) R. Toulson, R.,
    & Wilmshurst, T. (2012). 数字信号处理入门。*快速有效的嵌入式系统设计*（第219–242页）。Elsevier。 [https://doi.org/10.1016/B978-0-08-097768-3.00011-8](https://doi.org/10.1016/B978-0-08-097768-3.00011-8)'
- en: '[**[2]**](https://doi.org/10.1016/B978-0-08-099388-1.00003-0) T. Giannakopoulos,
    T., & Pikrakis, A. (2014). Signal Transforms and Filtering Essentials. *Introduction
    to Audio Analysis* (pp. 33–57). Elsevier. [https://doi.org/10.1016/B978-0-08-099388-1.00003-0](https://doi.org/10.1016/B978-0-08-099388-1.00003-0)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[2]**](https://doi.org/10.1016/B978-0-08-099388-1.00003-0) T. Giannakopoulos,
    T., & Pikrakis, A. (2014). 信号变换与滤波基础。*音频分析简介*（第33–57页）。Elsevier。 [https://doi.org/10.1016/B978-0-08-099388-1.00003-0](https://doi.org/10.1016/B978-0-08-099388-1.00003-0)'
- en: '[**[3]**](https://biblioteca.unisced.edu.mz/bitstream/123456789/1667/1/thinkdsp.pdf)
    Downey, A. (2016). Sounds and Signals. *Think DSP: Digital signal processing in
    Python* (pp. 1–11). (First edition). O’Reilly Media, Inc.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[3]**](https://biblioteca.unisced.edu.mz/bitstream/123456789/1667/1/thinkdsp.pdf)
    Downey, A. (2016). 声音与信号。*Think DSP: Python中的数字信号处理*（第1–11页）。(第一版)。O’Reilly Media,
    Inc.'
- en: '[**[4]**](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=da18cc0dc47a2e9f829bf752e86a985d0dcc22f3)
    Thakur, B., & Mehra, R. (2016). Discrete Fourier Transform Analysis with Different
    Window Techniques Algorithm. *International Journal of Computer Applications*,
    975, 8887.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[4]**](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=da18cc0dc47a2e9f829bf752e86a985d0dcc22f3)
    Thakur, B., & Mehra, R. (2016). 使用不同窗口技术算法的离散傅里叶变换分析。*国际计算机应用期刊*, 975, 8887。'
- en: '[**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020). Fourier Transform. *Python programming
    and numerical methods: A guide for engineers and scientists* (pp. 415–444). Academic
    Press.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[5]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020)。傅里叶变换。*Python编程与数值方法：工程师和科学家的指南*（第415–444页）。学术出版社。'
- en: '[**[6]**](https://numpy.org/doc/stable/reference/generated/numpy.fft.fft.html)
    Numpy Documentation, API Reference, Discrete Fourier Transform (numpy.fft). [Accessed
    on 2/2/2023]'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[6]**](https://numpy.org/doc/stable/reference/generated/numpy.fft.fft.html)
    Numpy 文档，API 参考，离散傅里叶变换 (numpy.fft)。[访问日期：2023年2月2日]'
- en: '[**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.fft.html)
    Scipy Documentation, API Reference, Legacy discrete Fourier transform (scipy.fftpack).
    [Accessed on 2/2/2023]'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.fft.html)
    Scipy 文档，API 参考，遗留的离散傅里叶变换 (scipy.fftpack)。[访问日期：2023年2月2日]'
