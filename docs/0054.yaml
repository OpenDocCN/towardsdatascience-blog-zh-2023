- en: Build Trail Recommender for TrailForks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/build-trail-recommender-for-trailforks-8ea64b1a2fe4?source=collection_archive---------13-----------------------#2023-01-04](https://towardsdatascience.com/build-trail-recommender-for-trailforks-8ea64b1a2fe4?source=collection_archive---------13-----------------------#2023-01-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How I won the Outside 2022 Innovation Days Award
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@wen_yang?source=post_page-----8ea64b1a2fe4--------------------------------)[![Wen
    Yang](../Images/5eac438762d015a0ab128757cc951967.png)](https://medium.com/@wen_yang?source=post_page-----8ea64b1a2fe4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8ea64b1a2fe4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8ea64b1a2fe4--------------------------------)
    [Wen Yang](https://medium.com/@wen_yang?source=post_page-----8ea64b1a2fe4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fcbb5383bd438&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-trail-recommender-for-trailforks-8ea64b1a2fe4&user=Wen+Yang&userId=cbb5383bd438&source=post_page-cbb5383bd438----8ea64b1a2fe4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8ea64b1a2fe4--------------------------------)
    ¬∑11 min read¬∑Jan 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8ea64b1a2fe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-trail-recommender-for-trailforks-8ea64b1a2fe4&user=Wen+Yang&userId=cbb5383bd438&source=-----8ea64b1a2fe4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8ea64b1a2fe4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-trail-recommender-for-trailforks-8ea64b1a2fe4&source=-----8ea64b1a2fe4---------------------bookmark_footer-----------)![](../Images/8c1b04655799b55dc2ea6e187f82f7a4.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Kristin Snippe](https://unsplash.com/@frausnippe?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Long Background Story
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I first joined [Outside Inc](https://www.outsideinc.com/) in May 2021,
    my job was about building a personalized recommender system to power Outside Feed,
    which comprises a wide range of outdoor and active lifestyle content in a mixed
    medium format such as articles, videos, Outside films, and podcasts. Our goal
    is to inspire people to go outside.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fast-forward to 17 months later, we have made two major transformations for
    Outside Feed‚Äôs recommender system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From reverse chronological feed to a hybrid-recommender powered feed, which
    includes three classic recsys functionalities: Collaborative Filtering, Content-based
    Filtering, and Hot & Trending. Model training and inference are batch-based. To
    use the 80‚Äì20 rule, this kind of system can get you from 0 to 80% in terms of
    providing personalized recommendations with relatively low effort. ‚ÄúLow‚Äù effort
    here is mainly meant in the sense of algorithm complexity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a batch-based hybrid recommendation system to a real-time recommender system.
    We started to integrate [Miso.ai](https://miso.ai/) ‚Äî a third-party tool to make
    the best use of clickstream events data collected by MetaRouter, and generate
    real-time recommendations. Since we use GraphQL, there are many lessons learned
    about wrapping rest API in Apollo as well as monitoring in DataDog, which deserves
    its own post for another day.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this post, I documented my experience participating in Outside Innovation
    Day, in which I built a prototype trail recommender using trailforks data within
    one day. (PS: yes trailforks is part of the Outside family now!) Perhaps it is
    because a lot of my coworkers are avid hikers, mountain bikers, and outdoor enthusiasts,
    and they know firsthand the joy and relaxation of having a trail recommender to
    help discover trails to explore. They all kindly voted for my project and I won
    the Outside Innovation Day Award for Best embodying our mission to get people
    outside! ( Very fortunate and happy üòÅ ~~~).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Below I will share three things:'
  prefs: []
  type: TYPE_NORMAL
- en: üèîÔ∏è 1\. How to build an 80% personalized recommender system with 20% effort (with
    Trailforks data)?
  prefs: []
  type: TYPE_NORMAL
- en: üèîÔ∏è 2\. Things to consider for preparing hackathon type of projects
  prefs: []
  type: TYPE_NORMAL
- en: üèîÔ∏è 3\. Further considerations for productionize recommender system
  prefs: []
  type: TYPE_NORMAL
- en: üèîÔ∏è 1\. The 80‚Äì20 Rule of Trail Recommender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are so many advanced recommender systems, but a hybrid of Collaborative
    filtering + Content-based recommenders is really the sweet spot of personalized
    recsys. It can cover 80% of the ground with about 20% of engineering effort.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative filtering involves analyzing the preferences of other users who
    have similar tastes to the current user and recommending trails based on those
    users‚Äô preferences.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/886a3fc481dc5d4448af5d0f4e0240f7.png)'
  prefs: []
  type: TYPE_IMG
- en: image created by Wen Yang
  prefs: []
  type: TYPE_NORMAL
- en: Content-based filtering, on the other hand, involves analyzing the characteristics
    of the trails themselves and recommending trails with similar characteristics
    to the user‚Äôs preferences.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04c0fdaa440136b442203dbff7fe2393.png)'
  prefs: []
  type: TYPE_IMG
- en: image by Wen Yang
  prefs: []
  type: TYPE_NORMAL
- en: Building an 80‚Äì20 trail recommender involves three steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: First, you need to gather data.**'
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of data most useful for building recommender systems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Interaction dataset**: includes `userid` , `trailid` , and `activitytype`
    . The first two are most essential, and the third feature `activitytype` is not
    used in my project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/53860b726aa3889cc1812f4f65fa82dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Preview Trailforks Interaction dataset
  prefs: []
  type: TYPE_NORMAL
- en: '**Catalog dataset**: includes selected trail information such as the trail‚Äôs
    location, length, difficulty level, global rank score and etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/8fbb63a0c303d99b4264c46df888e589.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 2: Data Visualization with Altair**'
  prefs: []
  type: TYPE_NORMAL
- en: From the interaction dataset, there are only 10 users, and one user alone (userid
    = 454369) explored 2524 unique trails. (PS. His name is Trevor and he is our founding
    engineer at TrailForks ‚Äî totally makes sense!)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cf1c1f11f32a3e3927c4e614e18975a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The below code can make a bar chart per variable name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, let‚Äôs look at trail direction, physical rating difficulty title,
    and country name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce682760565f644e135762906c6d43b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Initially, I was trying to use `global_rank_score` as the ‚Äúpopularity‚Äù feature,
    but there are too many records missing this feature. Fortunately, `rating` is
    positively correlated to `global_rank_score` . Below is one of my favorite types
    of visualizations, which can be done with `altair` fairly easily.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ba5b73d62b18134ec20350beb2406f28.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, we can use `difficulty_title` instead of `physical_rating` to represent
    the difficulty level, since the former has fewer missing values than the latter.
  prefs: []
  type: TYPE_NORMAL
- en: Moderate ‚Üí Blue, Black Diamond
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard ‚Üí Black Diamond, Blue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extreme ‚Üí Double Black Diamond
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy ‚Üí Green
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0ead52bffcd14b16db778c925d14fdfa.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 3a: Build a collaborative filtering model using** `**implicit**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For collaborative filtering, the only dataset you need is the interaction dataset.
    Here I calculated three other features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n_times_interacted` : how many times has this user interacted with this trail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n_trails_interacted` : how many trails were explored by this user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n_users_interacted` : how many unique users explored this trail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The idea is the use `n_times_interacted` as an implicit feedback feature: the
    more times a user explored a certain trail, the more confidence that the user
    likes this trail.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c773975dfc96646a4944a445c1ff8d27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Model Training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Useful functions for inference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'üåÑ DEMO: recommend trails for Trevor using Collaborative Filtering'
  prefs: []
  type: TYPE_NORMAL
- en: 'I used `pandas-profiling` to find out Trevor‚Äôs preference on trails, and here‚Äôs
    the observation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'physical_rating: moderate, hard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'difficulty_title: Blue, Black Diamond'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'trailtype: Singletrack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'direction: Downhill Only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'most explored trail: Fitzsimmons Connector (319 times!)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/076484d011994423377d05dba4643b31.png)![](../Images/f47ad8752446f8cdccdf56e5a08092f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Let‚Äôs get recommendations from the Collaborative Filtering Model ‚Üí
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e67b2d492610b6b63dcbb6ea3f458ee1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the photo and map for the first recommended trail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b06915379122cf1299c6aece3e2436b9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 3b: Content-based Filtering**'
  prefs: []
  type: TYPE_NORMAL
- en: Since Collaborative filtering is based on the interaction dataset, this means
    that it won‚Äôt work for the cold-user scenario. If a new user hasn‚Äôt explored any
    trails, we won‚Äôt be able to find similar users to this new user. That‚Äôs why we
    need Content-based filtering to fill the gap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-based filtering is all about finding ‚Äúsimilar trails‚Äù, therefore we
    need to decide two things:'
  prefs: []
  type: TYPE_NORMAL
- en: similar in what characteristics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to measure similarity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first question is a feature engineering question. The below features are
    selected as trail characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Numerical features: `stat_climb` , `stat_descent` , `stat_distance` , `rating`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Text features: `title`, `difficulty_title` , `trailtype` , `direction` and
    `country_title`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As for the second question, we use cosine similarity which is a commonly used
    measure in terms of RecSys practice.
  prefs: []
  type: TYPE_NORMAL
- en: üíª Code example for feature engineering and similarity calculation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'üåÑ DEMO: recommend trails for Trevor using Content-based Filtering'
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs find trails similar to Trevor‚Äôs second most explored trail (‚ÄòA-Line ‚Äî
    Lower‚Äô)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6828e474a35e00a6a97a82eff7f6e82d.png)![](../Images/0986a632ebcd8e64f77ca19a62f4c360.png)'
  prefs: []
  type: TYPE_IMG
- en: Wow! The content-based recommender is pretty impressive, which recommended most
    medium to hard difficulty levels, and downhill direction trails. My coworker Trevor
    is a serious mountain biker, and he‚Äôs quite pleased about such recommendations!
  prefs: []
  type: TYPE_NORMAL
- en: OK, now the hard work is done. I‚Äôd like to share a few reflections.
  prefs: []
  type: TYPE_NORMAL
- en: üèîÔ∏è 2\. Things to consider for preparing hackathon type of projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The biggest lesson I learned from participating in hackathon type of projects
    is that ‚Äúless is more‚Äù. It‚Äôs very tempting to build a recommender system including
    both the data science component, the backend database component, and the frontend
    or just streamlit component for a nicer demo. But hackathons are typical with
    time limitations, you need to be aware of which parts you are willing to sacrifice
    a bit to give time for other things. For me, such parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'EDA and data visualization: exploratory data analysis is like a black hole,
    it can suck you in and it feels no obvious ending point. The same goes for data
    visualization, you could spend endless time to make one chart pretty and prettier,
    but that would only benefit your project from 80 to 82, which is the opposite
    of the 80‚Äì20 rule. My solutions are `pandas-profiling` and `altair` . Before performing
    any data analysis, I would use `pandas-profiling` to check the missing values,
    the general distribution, and correlations, this will help me narrow down the
    data I can keep and prepare for feature engineering. `altair` is really simple
    to use and with a few compacted lines, you can easily make nice-looking bar charts
    and scatter+distribution charts. One of my tips is that I would just copy a few
    code snippets on the notebook beforehand, and only use those already in my notebook
    to remove any further temptations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The demo is about storytelling. You can spend all-nighters to have the fanciest
    and most complex hackathon project, but you need to reserve enough time to prepare
    how you want to tell the story. A story can start with a Why (the motivation and
    background of why you want to do this project), a What (what happened, what‚Äôs
    surprising, what works), a little bit of How (keep it at a high level, equations
    and code are impressive in itself but it creates unnecessary intimidation and
    fatigue for people who only have 5 mins to understand your project). For example,
    this post is definitely too long and has too many details to demo standard. Lastly,
    adding a bit of drama and humor is always an advantage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: üèîÔ∏è 3\. Further considerations for productionize recommender system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lastly, if you made it this far, and you really want to productionize the prototype
    recommender system, there are three pieces of ghost knowledge* I‚Äôd like to share:'
  prefs: []
  type: TYPE_NORMAL
- en: '*ghost knowledge (*[*source*](https://vickiboykis.com/2021/03/26/the-ghosts-in-the-data/)*)
    :*'
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge that is present somewhere in the epistemic community, and is perhaps
    readily accessible to some central member of that community, but it is not really
    written down anywhere and it‚Äôs not clear how to access it.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Batch vs real-time recommender system: batch system sounds simple and straightforward,
    but it has its own complications. If you use `implicit` for collaborative filtering
    and using `cosine similarity` to retrieve similar content, it is very likely the
    latency will not satisfy your frontend API requirement. You can try to improve
    it using indexing like FAISS, but it might still be higher than 500ms. That‚Äôs
    why you might consider doing batch computations for each user and each item. Depending
    on the size of users and items, the batch recommendations might take more than
    4hours and it will not refresh until you retrain the model. A quick tip is that
    only using users have any interactions in the past 90 days, or only do batch updates
    for items published in the past 90 days.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '‚ÄúCold-Start‚Äù might not be as severe as you think: I remember when I first learned
    the recommender system, books and talks made sure to emphasize the ‚Äúcold-start‚Äù
    problem as if it is the most difficult scenario to solve. But for Outside Feed,
    this problem is not even top-3\. The reason is that a lot of people are used to
    reading the freshest and most recent content on their Outside Feed, and it is
    fairly easy to rank content by publish date to surface the new items (cold items),
    thus it is easy to guarantee new items get pageview (interactions) data. For us,
    the much harder problem is actually ‚Äúhow to recommend ever-green content‚Äù? If
    we recommend an all-time popular article first written in 2016, even though this
    piece of content might be relevant to users'' tastes, users might get the impression
    that we didn‚Äôt have fresh content to recommend.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The third piece of knowledge is an anecdote I heard from another recommender
    system practitioner (Andy - the CTO from [miso.ai](https://miso.ai/)): he once
    built a homepage recommender for a clothing website. Even though the learn-to-rank
    ranking system learned that the ‚ÄúBlack‚Äù color is likely to be the most popular
    one, thus it recommended the first page with all clothing in different styles
    but all in black color. Well, the model isn‚Äôt wrong, but it looks terrible at
    first glance and it performed poorly in terms of enticing people to buy clothes.
    He joked that he‚Äôs been studying recommender systems for years and years, but
    nobody mentioned that a good color complementary design might have a huge effect.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That‚Äôs it for my last medium post in the year 2022\. Thank you tremendously
    for the support. If you have any thoughts or reflections or better yet ‚Äî more
    recsys anecdotes, please send them my way! Love to compile them into the fascinating
    book I dream to write < The Pleasure and Sorrow of Building RecSys> üê≥~~~
  prefs: []
  type: TYPE_NORMAL
