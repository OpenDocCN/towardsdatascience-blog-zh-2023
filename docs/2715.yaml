- en: Effective coding with dates and times in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行有效的日期和时间编码
- en: 原文：[https://towardsdatascience.com/effective-coding-with-dates-and-times-in-python-3be13a77b45b?source=collection_archive---------5-----------------------#2023-08-26](https://towardsdatascience.com/effective-coding-with-dates-and-times-in-python-3be13a77b45b?source=collection_archive---------5-----------------------#2023-08-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/effective-coding-with-dates-and-times-in-python-3be13a77b45b?source=collection_archive---------5-----------------------#2023-08-26](https://towardsdatascience.com/effective-coding-with-dates-and-times-in-python-3be13a77b45b?source=collection_archive---------5-----------------------#2023-08-26)
- en: Making use of datetime, zoneinfo, dateutil and pandas
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用datetime、zoneinfo、dateutil 和 pandas
- en: '[](https://aliciahorsch.medium.com/?source=post_page-----3be13a77b45b--------------------------------)[![Alicia
    Horsch](../Images/1e3c5dcafb062d0aa710934c6382cb32.png)](https://aliciahorsch.medium.com/?source=post_page-----3be13a77b45b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3be13a77b45b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3be13a77b45b--------------------------------)
    [Alicia Horsch](https://aliciahorsch.medium.com/?source=post_page-----3be13a77b45b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://aliciahorsch.medium.com/?source=post_page-----3be13a77b45b--------------------------------)[![Alicia
    Horsch](../Images/1e3c5dcafb062d0aa710934c6382cb32.png)](https://aliciahorsch.medium.com/?source=post_page-----3be13a77b45b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3be13a77b45b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3be13a77b45b--------------------------------)
    [Alicia Horsch](https://aliciahorsch.medium.com/?source=post_page-----3be13a77b45b--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba4ebbd0afd2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feffective-coding-with-dates-and-times-in-python-3be13a77b45b&user=Alicia+Horsch&userId=ba4ebbd0afd2&source=post_page-ba4ebbd0afd2----3be13a77b45b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3be13a77b45b--------------------------------)
    ·5 min read·Aug 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3be13a77b45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feffective-coding-with-dates-and-times-in-python-3be13a77b45b&user=Alicia+Horsch&userId=ba4ebbd0afd2&source=-----3be13a77b45b---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba4ebbd0afd2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feffective-coding-with-dates-and-times-in-python-3be13a77b45b&user=Alicia+Horsch&userId=ba4ebbd0afd2&source=post_page-ba4ebbd0afd2----3be13a77b45b---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3be13a77b45b--------------------------------)
    ·5分钟阅读·2023年8月26日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3be13a77b45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feffective-coding-with-dates-and-times-in-python-3be13a77b45b&user=Alicia+Horsch&userId=ba4ebbd0afd2&source=-----3be13a77b45b---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3be13a77b45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feffective-coding-with-dates-and-times-in-python-3be13a77b45b&source=-----3be13a77b45b---------------------bookmark_footer-----------)![](../Images/43a2f0db3816eb12fffff9e553ce47db.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3be13a77b45b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Feffective-coding-with-dates-and-times-in-python-3be13a77b45b&source=-----3be13a77b45b---------------------bookmark_footer-----------)![](../Images/43a2f0db3816eb12fffff9e553ce47db.png)'
- en: Photo by [Jordan Benton](https://www.pexels.com/@bentonphotocinema/) from [Pexels](https://www.pexels.com/photo/shallow-focus-of-clear-hourglass-1095601/)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jordan Benton](https://www.pexels.com/@bentonphotocinema/) 提供，来源于 [Pexels](https://www.pexels.com/photo/shallow-focus-of-clear-hourglass-1095601/)
- en: I have been working extensively with time series data lately and have dealt
    with date and time objects in Python. For this, I have learned some useful tricks
    for working with *datetime* objects in Python that removed complexity from my
    code. In this article, I would like to share and summarise the most valuable tips
    and tricks I learned.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我一直在广泛处理时间序列数据，并且处理了Python中的日期和时间对象。为此，我学到了一些关于在Python中处理*datetime*对象的有用技巧，这些技巧简化了我的代码。在本文中，我将分享并总结我学到的最有价值的提示和技巧。
- en: For demonstration, I will use two Kaggle datasets, which I will link when I
    use them. If you want to follow along, you can import the following libraries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我将使用两个Kaggle数据集，当我使用它们时会提供链接。如果你想跟着操作，可以导入以下库。
- en: Datetime, zoneinfo, dateutil and pytz
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期时间、zoneinfo、dateutil 和 pytz
- en: Commonly used packages that deal with dates and times in Python are *datetime,
    dateutil, pytz* and the [recent *zoneinfo*](https://docs.python.org/3/library/zoneinfo.html).
    *Datetime* is the built-in module for working with times and dates in Python and
    lets you do most of the basics. *Dateutil* and *pytz* are third-party modules
    and powerful extensions to *datetime* when dealing with more complex manipulations
    like relative time deltas, time zones, and parsing of strings.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 Python 中日期和时间的常用包包括 *datetime*、*dateutil*、*pytz* 和 [最近的 *zoneinfo*](https://docs.python.org/3/library/zoneinfo.html)。*Datetime*
    是用于处理 Python 中时间和日期的内置模块，能够处理大多数基本操作。*Dateutil* 和 *pytz* 是第三方模块，是 *datetime* 在处理更复杂的操作（如相对时间差、时区和字符串解析）时的强大扩展。
- en: However, since Python version 3.9, [*zoneinfo*](https://docs.python.org/3/library/zoneinfo.html),
    is incorporated in the Python Standard Library and, therefore, is considered “more
    convenient” for **timezone support** compared to other third-party modules like
    *dateutil* or [*pytz*](https://docs.python.org/3/library/zoneinfo.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自 Python 3.9 版本以来，[*zoneinfo*](https://docs.python.org/3/library/zoneinfo.html)
    被纳入 Python 标准库，因此，被认为在**时区支持**方面比 *dateutil* 或 [*pytz*](https://docs.python.org/3/library/zoneinfo.html)
    更“方便”。
- en: '*So, depending on the Python version you are working with, the Python built-in
    modules might be already sufficient and no third-party modules (*dateutil *and*
    pytz*) are needed when dealing with* ***different timezones****!*'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*因此，根据你使用的 Python 版本，Python 内置模块可能已经足够处理不同的时区，而无需第三方模块（*dateutil* 和 *pytz*）！*'
- en: 'In the remainder of the article, I will focus mostly on handling dates and
    times with *datetime* but will also mention potential options for *zoneinfo* or
    *dateutil*. The article will first focus on single *datetime* objects, followed
    by dealing with dates in arrays and data frames using *numpy* and *pandas*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章的其余部分，我将主要集中于使用 *datetime* 处理日期和时间，但也会提及 *zoneinfo* 或 *dateutil* 的潜在选项。文章将首先关注单个
    *datetime* 对象，然后处理数组和数据框中的日期，使用 *numpy* 和 *pandas*：
- en: Creating a date or datetime from scratch
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从头创建日期或日期时间
- en: 'Converting to and parsing strings: strftime(), strptime() and dateutil'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换和解析字符串：strftime()、strptime() 和 dateutil
- en: Dates and times in *numpy* — numPy’s datetime64
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*numpy* 中的日期和时间 — numPy 的 datetime64'
- en: Dates and times in *pandas*
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*pandas* 中的日期和时间'
- en: Creating features from dates and times
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从日期和时间创建特征
- en: 1\. Creating a date or datetime from scratch
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 从头创建日期或日期时间
- en: The *datetime* package lets you create date and datetime objects easily from
    scratch that can be used, for example, as thresholds for filtering (try printing
    the created objects below and their types to better understand their format).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*datetime* 包允许你轻松从头创建日期和日期时间对象，例如，可以将其用作筛选的阈值（尝试打印下面创建的对象及其类型，以更好地理解它们的格式）。'
- en: Also, *datetime* lets you create date and time objects that refer to today or
    now.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，*datetime* 让你创建指向今天或现在的日期和时间对象。
- en: '*Be careful here, as* datetime *objects are usually “timezone naive” and do
    not refer to a specific time zone, which may get you into trouble when working
    with international colleagues!*'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*请小心，因为* datetime *对象通常是“时区无关”的，并不指向特定时区，这在与国际同事合作时可能会给你带来麻烦！*'
- en: With the help of the *zoneinfo* module (built-in since Python version 3.9),
    you can set the timezone with the *tz* parameter of *astimezone().*
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 借助 *zoneinfo* 模块（自 Python 3.9 版本起内置），你可以使用 *astimezone()* 的 *tz* 参数设置时区。
- en: '2\. Converting to and parsing strings: strftime(), strptime() and dateutil'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 转换和解析字符串：strftime()、strptime() 和 dateutil
- en: You might find yourself in a situation where you want to display your *datetime*
    object as a string or convert a string into a *datetime* object. Here, the functions
    *strftime()* and *strptime()* are helpful.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现自己希望将 *datetime* 对象显示为字符串，或者将字符串转换为 *datetime* 对象。在这种情况下，函数 *strftime()*
    和 *strptime()* 会很有帮助。
- en: Converting a datetime object (or parts of it) to a string
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将日期时间对象（或其部分）转换为字符串
- en: Commonly used format codes for describing datetime objects can be found [here](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 描述日期时间对象的常用格式代码可以在 [这里](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes)
    找到。
- en: Converting a string into a datetime object
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将字符串转换为日期时间对象
- en: Parsing complex strings using dateutil
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 dateutil 解析复杂字符串
- en: 3\. Dates and times in numpy - numPy's datetime64
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. *numpy* 中的日期和时间 - numPy 的 datetime64
- en: If you are handling large datasets, *numpy’s* datetime64 may come in handy as,
    due to its design, it can be much faster than working with *datetime* and *dateutil*
    objects. The datetime64 data type in *numpy* encodes dates and times as 64-bit
    integers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处理的是大数据集，*numpy* 的 datetime64 可能会很有帮助，因为由于其设计，它比处理 *datetime* 和 *dateutil*
    对象更快。*numpy* 中的 datetime64 数据类型将日期和时间编码为 64 位整数。
- en: This stores dates and times compactly and allows vectorized operations (repeated
    operations applied to each element of a numpy array).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这紧凑地存储日期和时间，并允许矢量化操作（对 numpy 数组的每个元素应用的重复操作）。
- en: As you can see when running the code above, with a *datetime* or *dateutil*
    object, vectorized operations will give you an error.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如运行上述代码时所见，使用 *datetime* 或 *dateutil* 对象时，矢量化操作会出现错误。
- en: 4\. Dates and times in pandas
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. pandas 中的日期和时间
- en: '*Pandas* can be a good choice when working on a time series data project.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*Pandas* 在处理时间序列数据项目时可能是一个不错的选择。'
- en: '*The famous data-wrangling library* pandas *combines the convenience of* datetime
    *and* dateutil *with the effective storing and manipulation possibility from*
    numpy*.*'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*著名的数据处理库* pandas *结合了* datetime *和* dateutil *的便利性以及* numpy* 的有效存储和操作功能。*'
- en: Create a pandas dataframe (from CSV) parsing a date column
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 pandas 数据框（从 CSV）并解析日期列
- en: Now, we have a basic understanding of handling dates and times in Python using
    *numpy* and *pandas*. However, often, we do not create dates and times ourselves,
    but they are already part of the dataset we are dealing with. Let’s create a *pandas*
    data frame with a date column ([Kaggle dataset NFL](https://www.kaggle.com/c/nfl-big-data-bowl-2022/data?select=games.csv)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对使用 *numpy* 和 *pandas* 处理日期和时间有了基本了解。然而，我们往往不会自己创建日期和时间，而是它们已经是我们处理的数据集的一部分。让我们创建一个带有日期列的
    *pandas* 数据框（[Kaggle 数据集 NFL](https://www.kaggle.com/c/nfl-big-data-bowl-2022/data?select=games.csv)）。
- en: As you can see, when loading from a CSV, the column that holds a date is turned
    into a string format if not specified anywhere precisely. To receive the date
    format, you could create an extra column called “gameDate_dateformat” or directly
    pass the date column through the parameter *parse_dates* in pd.read_csv().
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，从 CSV 加载时，如果没有在任何地方明确指定，存储日期的列会转换为字符串格式。要获得日期格式，你可以创建一个额外的列“gameDate_dateformat”或直接通过
    *parse_dates* 参数传递日期列到 pd.read_csv() 中。
- en: 'Another handy manipulation when working with time series data is to be able
    to filter by date/time or subsetting a data frame using date/time. There are two
    methods to do this: filtering/subsetting or indexing.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 处理时间序列数据时，另一个有用的操作是能够按日期/时间进行过滤或使用日期/时间对子集数据框。有两种方法来做到这一点：过滤/子集或索引。
- en: Filtering pandas data frames by time
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按时间过滤 pandas 数据框
- en: '*Make sure that the threshold date you use for subsetting has the same format
    as the column!*'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*确保用于子集的阈值日期与列的格式相同！*'
- en: If the column you want to filter by has the format datetime (like in the example),
    the comparison date cannot be a date but needs to have a datetime format!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想过滤的列的格式是 datetime（如示例中），比较日期不能是日期，而需要具有 datetime 格式！
- en: Indexing pandas data frames by time
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按时间索引 pandas 数据框
- en: Even more powerful is indexing a *pandas* data frame by date or time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更强大的操作是按日期或时间索引 *pandas* 数据框。
- en: Indexing can be especially useful when working with time series, as there are
    methods like rolling windows and time-shifting.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理时间序列时，索引特别有用，因为有如滚动窗口和时间移位等方法。
- en: 5\. Creating features from dates and times
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 从日期和时间创建特征
- en: Often, we are not interested in the date itself but maybe the duration, the
    weekday, or just a part of the datetime, e.g. the year. For this, *datetime* but
    also *pandas* provide some useful manipulations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们对日期本身并不感兴趣，而可能对持续时间、星期几或仅仅是日期时间的一部分（例如年份）感兴趣。为此，*datetime* 以及 *pandas*
    提供了一些有用的操作。
- en: Timedelta
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Timedelta
- en: With *pandas*, you can calculate, for example, the difference between two datetimes.
    For this, we will look at a different dataset of Uber trips ([Kaggle dataset Uber](https://www.kaggle.com/datasets/zusmani/uberdrives/code?resource=download))
    with a start and an end timestamp. Some preprocessing is needed (delete the Total
    Row) to start looking into timedelta.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *pandas*，你可以计算例如两个 datetime 之间的差异。为此，我们将查看一个不同的 Uber 行程数据集（[Kaggle 数据集 Uber](https://www.kaggle.com/datasets/zusmani/uberdrives/code?resource=download)），其中包含开始和结束时间戳。一些预处理是必需的（删除
    Total Row），以便开始查看 timedelta。
- en: Extract the weekday or the month
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取星期几或月份
- en: This works slightly differently for the single *datetime* versus the *pandas*
    Series. While the weekday or the month of the single *datetime* object can be
    directly accessed by adding an attribute (e.g., *.month*) or method (e.g., *weekday()*),
    the *pandas* Series always needs the *.dt* accessor.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单一的 *datetime* 和 *pandas* Series，它们的工作方式稍有不同。虽然可以通过添加属性（例如，*.month*）或方法（例如，*weekday()*）直接访问单一
    *datetime* 对象的星期几或月份，但 *pandas* Series 总是需要 *.dt* 访问器。
- en: '*The* dt. accessor *allows you to access datetime-specific attributes and methods
    from a* datetime *Series.*'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dt. 访问器* *允许你从一个* datetime *Series中访问特定于日期时间的属性和方法。*'
- en: Create a date/time lag
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建日期/时间滞后
- en: Another helpful manipulation for time series data could be to add an extra column
    that adds a lag of a date or datetime.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列数据，另一个有用的操作是添加一个额外的列，用于增加日期或日期时间的滞后。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To work with date or time objects in Python, knowing the basics of the built-in
    package *datetime* (e.g. *date()* or *strftime()* and *strptime()*) are beneficial.
    *Zoneinfo* is a new built-in package (since version 3.9) which is more convenient
    than third-party modules when working with different time zones. *Dateutil* is
    a valuable library for more advanced date and time manipulations when working
    with single date objects, e.g., parsing complex strings. When working with dates
    and times in data frames, Series, or arrays, *pandas* combines the benefits of
    *datetime*, *dateutil*, and *numpy* and serves as a convenient library.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中处理日期或时间对象时，了解内置包 *datetime*（例如 *date()* 或 *strftime()* 和 *strptime()*）的基础知识是有益的。*Zoneinfo*
    是一个新的内置包（自 3.9 版本起），在处理不同的时区时比第三方模块更方便。*Dateutil* 是一个有价值的库，用于处理单个日期对象时的高级日期和时间操作，例如解析复杂字符串。在数据框、Series
    或数组中处理日期和时间时，*pandas* 结合了 *datetime*、*dateutil* 和 *numpy* 的优点，是一个方便的库。
- en: Sources
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来源
- en: Modern Python Standard Library — Cookbook by Alessandro Molina (2018)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alessandro Molina 的《现代 Python 标准库——食谱》（2018）
- en: Python Data Science Handbook by Jake VanderPlas (2017)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jake VanderPlas 的《Python 数据科学手册》（2017）
- en: 'Datacamp course: Working with Dates and Times in Python (2022)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Datacamp 课程：Python 中的日期和时间处理（2022）
- en: '[https://dateutil.readthedocs.io/en/stable/](https://dateutil.readthedocs.io/en/stable/)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://dateutil.readthedocs.io/en/stable/](https://dateutil.readthedocs.io/en/stable/)'
- en: '[https://docs.python.org/3/library/datetime.html](https://docs.python.org/3/library/datetime.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/library/datetime.html](https://docs.python.org/3/library/datetime.html)'
- en: '[https://docs.python.org/3/library/zoneinfo.html](https://docs.python.org/3/library/zoneinfo.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/library/zoneinfo.html](https://docs.python.org/3/library/zoneinfo.html)'
- en: '[https://peps.python.org/pep-0615/](https://peps.python.org/pep-0615/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://peps.python.org/pep-0615/](https://peps.python.org/pep-0615/)'
- en: '[https://github.com/stub42/pytz/blob/master/src/README.rst#issues--limitations](https://github.com/stub42/pytz/blob/master/src/README.rst#issues--limitations)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/stub42/pytz/blob/master/src/README.rst#issues--limitations](https://github.com/stub42/pytz/blob/master/src/README.rst#issues--limitations)'
