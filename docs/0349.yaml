- en: 'Introducing PyCircular: A Python Library for Circular Data Analysis'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-pycircular-a-python-library-for-circular-data-analysis-bfd696a6a42b?source=collection_archive---------1-----------------------#2023-01-24](https://towardsdatascience.com/introducing-pycircular-a-python-library-for-circular-data-analysis-bfd696a6a42b?source=collection_archive---------1-----------------------#2023-01-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Circular data can present unique challenges when it comes to analysis and modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@albahnsen?source=post_page-----bfd696a6a42b--------------------------------)[![Alejandro
    Correa Bahnsen](../Images/7e8d6aa827c235962133b4f27e424db8.png)](https://medium.com/@albahnsen?source=post_page-----bfd696a6a42b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bfd696a6a42b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bfd696a6a42b--------------------------------)
    [Alejandro Correa Bahnsen](https://medium.com/@albahnsen?source=post_page-----bfd696a6a42b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F90c9efb3cf7e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-pycircular-a-python-library-for-circular-data-analysis-bfd696a6a42b&user=Alejandro+Correa+Bahnsen&userId=90c9efb3cf7e&source=post_page-90c9efb3cf7e----bfd696a6a42b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bfd696a6a42b--------------------------------)
    ·8 min read·Jan 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbfd696a6a42b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-pycircular-a-python-library-for-circular-data-analysis-bfd696a6a42b&user=Alejandro+Correa+Bahnsen&userId=90c9efb3cf7e&source=-----bfd696a6a42b---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbfd696a6a42b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroducing-pycircular-a-python-library-for-circular-data-analysis-bfd696a6a42b&source=-----bfd696a6a42b---------------------bookmark_footer-----------)![](../Images/d663862ab7b6ebf098386fc5f0383cca.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Patrick McManaman](https://unsplash.com/@patmcmanaman?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I’m introducing **PyCircular**, a specialized data analysis python
    library designed specifically for working with circular data. As one of the authors,
    I am excited to share this powerful tool with the community to help address the
    challenges of working with circular data.
  prefs: []
  type: TYPE_NORMAL
- en: Circular data, such as data that represents angles, directions or timestamps,
    can present unique challenges when it comes to analysis and modeling. The nature
    of the circular data can cause difficulties when trying to apply traditional linear
    and kernel-based methods, as these methods are not well suited to handle the periodic
    nature of circular data. Additionally, circular data can also raise issues when
    trying to compute mean and standard deviation, as these measures are not well-defined
    for circular data.
  prefs: []
  type: TYPE_NORMAL
- en: '**PyCircular** addresses these challenges by providing a set of tools and functionality
    specifically tailored for working with circular data. The library includes a variety
    of circular statistical methods, including distributions, kernels, and confidence
    intervals. Additionally, it also includes visualization tools such as circular
    histograms and distribution plots, to help you better understand your data.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/825315eae8e0cf3d1df770add6015336.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**https://github.com/albahnsen/pycircular**](https://github.com/albahnsen/pycircular)'
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of this post will dive deeper into the unique challenges of working
    with circular data, and demonstrate how **PyCircular** can be used to address
    these challenges through a series of examples. You will see how **PyCircular**
    be used to effectively handle the periodic nature of circular data and compute
    meaningful measures of central tendency and dispersion. You will also learn how
    the library's visualization tools can help to better understand and interpret
    circular data. By the end of this post, you will have a solid understanding of
    how **PyCircular** can be used to effectively analyze and model circular data.
  prefs: []
  type: TYPE_NORMAL
- en: When training a machine learning model, we must have a dataset that includes
    input variables (features) and corresponding output variables (labels). The model
    learns to map the features to the labels, and the goal of training is to find
    the best set of parameters for this mapping.
  prefs: []
  type: TYPE_NORMAL
- en: In several applications, the features of the model consist in descriptive information
    of a user, a transaction, a login, among others. In most of these scenarios, there
    is information about the timestamp, might be time of the event, day of the week,
    or day of the month. If the goal is to predict an event based on past events,
    you can use timestamps as features. For example, you could use the time of day,
    day of the week, or month of the year as features to a model that predicts traffic
    volume or energy consumption.
  prefs: []
  type: TYPE_NORMAL
- en: However, the best approach for dealing with time in a machine learning problem
    will depend on the specific problem you’re trying to solve and the structure of
    your data.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can use **PyCircular** to analyze this complex behavior.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's install the library and load some sample synthetic data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/91dbcdddd041c6e0dcd9cc9213039071.png)![](../Images/b9da1724fffc0c2b8e0a5e9072dc1e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the dataset from load_transactions, we can see that we have 349 observations
    (transactions) starting January 1st, 2020 to July 29th 2020.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/969ea77f417981ce7c4f60fcc9d82157.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by autho
  prefs: []
  type: TYPE_NORMAL
- en: Then, plotting a histogram of the time of each observation, we see that most
    examples happened between 5pm and 7am, with few happening at noon. Moreover, when
    dealing with hour of the day as a scalar variable, there are a few issues that
    can arise.
  prefs: []
  type: TYPE_NORMAL
- en: One issue is that hour of the day is cyclical in nature, meaning that the value
    at the end of the day (24:00) is related to the value at the beginning of the
    day (00:00). However, when hour of the day is treated as a scalar variable, this
    cyclical relationship is not considered, which can lead to inaccurate or misleading
    results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another issue is that hour of the day is often correlated with other variables,
    such as day of the week or season. For example, there may be more traffic during
    rush hour on a weekday than on a weekend. However, when hour of the day is treated
    as a scalar variable, these correlations are not considered and can lead to biased
    or misleading results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A third issue is that hour of the day can be affected by different factors such
    as season, day of the week, or even holidays. These factors can greatly impact
    the behavior and patterns of hour of the day. So, if this information is not taken
    into account when using hour of the day as a scalar variable, it can lead to inaccurate
    conclusions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To overcome these issues, one solution is to use a cyclical encoding technique,
    such as sine and cosine encoding, to incorporate the cyclical nature of the data.
    Another solution is to include other relevant variables, such as day of the week
    or season, in the model to account for potential correlations. Additionally, it’s
    important to consider the impact of different factors on the hour of the day when
    analyzing data.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, let's begging by using a circular histogram plot to better
    understand our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1552a9332c83369874b304505cf2ebdd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Then, calculate the scalar or arithmetic mean
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a22edf6ff7e57ff3592ee47c90dbfb64.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The issue when dealing with the time of the example, specifically, when analyzing
    a feature such as the mean of time, is that it is easy to make the mistake of
    using the arithmetic mean. Indeed, the arithmetic mean is not a correct way to
    average time because, as shown in the above figure, it does not consider the periodic
    behavior of the time feature. For example, the arithmetic mean of time of four
    transactions made at 2:00, 3:00, 22:00 and 23:00 is 12:30, which is counter-intuitive
    since no were made close to that time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can overcome this limitation by modeling the time of the transaction as
    a periodic variable, in particular using the von Mises distribution (Fisher, 1996).
    The von Mises distribution, also known as the periodic normal distribution, is
    a distribution of a wrapped normal distributed variable across a circle. The von
    Mises distribution of a set of examples (D) is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d04f50272b7cad264c3a641ec5688d51.png)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b71506f390d7066734d52beb74f57959.png)'
  prefs: []
  type: TYPE_IMG
- en: are the periodic mean and periodic standard deviation, respectively. In this
    [paper](https://albahnsen.github.io/files/Feature%20Engineering%20Strategies%20for%20Credit%20Card%20Fraud%20Detection_published.pdf)
    we present the calculation of them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89fe78b67307785fd1f89d147bc37af9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Now, having calculated the periodic mean and standard deviation, we can estimate
    the von Mises distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/715d9afcb259c0f06bb92504538dd2fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This method gives us a good approximation of the distribution of the time of
    the events. However, when using a statistical distribution with only one mode,
    it may be difficult to accurately model the data if the distribution is not a
    good fit for the data set. Additionally, if the data set is multi-modal (i.e.
    has multiple peaks), a single mode distribution will not be able to capture all
    the variations in the data. This could lead to poor predictions or inferences
    based on the model.
  prefs: []
  type: TYPE_NORMAL
- en: This can be overcome by modeling the data with a von Mises kernel distribution.
  prefs: []
  type: TYPE_NORMAL
- en: One way to overcome the issues of using a statistical distribution with only
    one mode is to use a kernel-based method, such as kernel density estimation (KDE).
  prefs: []
  type: TYPE_NORMAL
- en: KDE is a non-parametric method for estimating the probability density function
    of a random variable. It works by replacing the point-mass at each data point
    with a smooth and symmetric kernel function, such as a von Mises. The resulting
    estimate of the PDF is a sum of the kernel functions centered at each data point.
  prefs: []
  type: TYPE_NORMAL
- en: By using a kernel function, KDE can smooth out any single-modal distributions,
    and can capture multiple modes in the data, making it a more flexible method for
    modeling multi-modal data sets. Additionally, kernel density estimation is non-parametric,
    which means it does not make any assumptions about the underlying distribution
    of the data.
  prefs: []
  type: TYPE_NORMAL
- en: However, it’s worth noting that choosing the right kernel is important, and
    there are some challenges when working with KDE such as the choice of bandwidth
    and the curse of dimensionality.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6ce7f93aa204a526ee4a9008ad3e79bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In summary, using a kernel-based method such as KDE with von Mises can help
    overcome the issues of using a statistical distribution with only one mode by
    allowing for a more flexible and robust modeling of multi-modal data sets.
  prefs: []
  type: TYPE_NORMAL
- en: Using the kernel to create a new feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we can apply the kernel to new observations and create a new feature
    that can be used as an input for a machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c4a8dc2920ea6fa1fa0812ade992da1.png)![](../Images/f1506aa53be033e99ff96e47c9195ca1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can see that an observation at noon, have a very low probability (0.017)
    because when training the kernel, there wasn’t any observations at that time.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, this methodology allows us to effectively deal with timestamps
    by creating more robust representations of the temporal information in the data.
    By using the kernel of von Mises during feature engineering, we can generate new
    features that accurately capture the nuances of temporal patterns in the data.
    This approach can overcome the limitations of treating dates as a scalar variable
    and lead to improved performance in machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: Next Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The selection of the bandwidth parameter (bw) is crucial for the performance
    of the model, pycircular library offers a range of optimization methods to select
    the best bw for a given dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To evaluate the effectiveness of the kernel, it is important to perform accuracy
    tests and compare the results with other methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the time of the day is a significant temporal feature to consider, it’s
    also critical to investigate how other temporal variables like day of the week
    and day of month may impact the model’s performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kernel can be used in a machine learning model, it can be integrated as
    part of the feature engineering process, where it can be applied to the input
    data to create new features that better capture the temporal patterns in the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will be showing how to deal with these issues in a following post.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about **PyCircular** at [https://github.com/albahnsen/pycircular](https://github.com/albahnsen/pycircular)
  prefs: []
  type: TYPE_NORMAL
- en: Documentation is available at [http://albahnsen.github.io/pycircular](http://albahnsen.github.io/pycircular)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tutorials are available at [http://albahnsen.github.io/pycircular/Tutorials.html](http://albahnsen.github.io/pycircular/Tutorials.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
