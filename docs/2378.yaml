- en: 'Similarity Search, Part 7: LSH Compositions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/similarity-search-part-7-lsh-compositions-1b2ae8239aca?source=collection_archive---------6-----------------------#2023-07-24](https://towardsdatascience.com/similarity-search-part-7-lsh-compositions-1b2ae8239aca?source=collection_archive---------6-----------------------#2023-07-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dive into combinations of LSH functions to guarantee a more reliable search
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@slavahead?source=post_page-----1b2ae8239aca--------------------------------)[![Vyacheslav
    Efimov](../Images/db4b02e75d257063e8e9d3f1f75d9d6d.png)](https://medium.com/@slavahead?source=post_page-----1b2ae8239aca--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1b2ae8239aca--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1b2ae8239aca--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page-----1b2ae8239aca--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc8a0ca9d85d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-7-lsh-compositions-1b2ae8239aca&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=post_page-c8a0ca9d85d8----1b2ae8239aca---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1b2ae8239aca--------------------------------)
    ·11 min read·Jul 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1b2ae8239aca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-7-lsh-compositions-1b2ae8239aca&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=-----1b2ae8239aca---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1b2ae8239aca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-7-lsh-compositions-1b2ae8239aca&source=-----1b2ae8239aca---------------------bookmark_footer-----------)![](../Images/0f691f4da9f0e51df324f06b23ba96d4.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: S**imilarity search** is a problem where given a query the goal is to find the
    most similar documents to it among all the database documents.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In data science, similarity search often appears in the NLP domain, search engines
    or recommender systems where the most relevant documents or items need to be retrieved
    for a query. There exists a large variety of different ways to improve search
    performance in massive volumes of data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last two parts of this article series, we digged into LSH — an algorithm
    *transforming input vectors to lower-dimensional hash values while preserving
    information about their similarity*. In particular, we have already looked at
    two algorithms that were suitable for different distance metrics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本系列文章的最后两部分，我们深入探讨了LSH——一种*将输入向量转换为低维哈希值的算法，同时保持其相似性信息*。特别是，我们已经研究了两种适用于不同距离度量的算法：
- en: '[](/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=post_page-----1b2ae8239aca--------------------------------)
    [## Similarity Search, Part 5: Locality Sensitive Hashing (LSH)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 相似性搜索，第5部分：局部敏感哈希（LSH）](/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=post_page-----1b2ae8239aca--------------------------------)'
- en: Explore how similarity information can be incorporated into hash function
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索如何将相似性信息纳入哈希函数
- en: towardsdatascience.com](/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=post_page-----1b2ae8239aca--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=post_page-----1b2ae8239aca--------------------------------)
- en: Classic LSH algorithm constructs signatures that reflect the information about
    **Jaccard index** of vectors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的LSH算法构建的签名反映了**Jaccard指数**的信息。
- en: '[](/similarity-search-part-6-random-projections-with-lsh-forest-f2e9b31dcc47?source=post_page-----1b2ae8239aca--------------------------------)
    [## Similarity Search, Part 6: Random Projections with LSH Forest'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 相似性搜索，第6部分：使用LSH森林的随机投影](/similarity-search-part-6-random-projections-with-lsh-forest-f2e9b31dcc47?source=post_page-----1b2ae8239aca--------------------------------)'
- en: Understand how to hash data and reflect its similarity by constructing random
    hyperplanes
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解如何通过构建随机超平面对数据进行哈希并反映其相似性
- en: towardsdatascience.com](/similarity-search-part-6-random-projections-with-lsh-forest-f2e9b31dcc47?source=post_page-----1b2ae8239aca--------------------------------)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/similarity-search-part-6-random-projections-with-lsh-forest-f2e9b31dcc47?source=post_page-----1b2ae8239aca--------------------------------)
- en: The method of random projections builds a forest of hyperplanes preserving **cosine
    similarity** of vectors.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随机投影方法构建了一个保持**余弦相似性**的超平面森林。
- en: In fact, LSH algorithms exist for other distance metrics as well. Though every
    method has its own unique parts, there are a lot of common concepts and formulas
    which appear in each of them. To facilitate the learning process of new methods
    in the future, we are going to focus more on the theory and provide several essential
    definitions and theorems which often appear in advanced LSH literature. By the
    end of the article, we will be able to construct more complex LSH schemes by simply
    combining the basic ones as LEGO building blocks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，LSH算法也存在于其他距离度量中。虽然每种方法都有其独特之处，但它们之间有许多共同的概念和公式。为了方便将来学习新方法，我们将更多地关注理论，并提供一些在高级LSH文献中经常出现的基本定义和定理。到文章末尾，我们将能够通过简单地将基本方法结合起来，像搭积木一样构建更复杂的LSH方案。
- en: As a bonus, at the end, we will have a look at how **Euclidean distance** can
    be incorporated into LSH.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们将在最后了解如何将**欧几里得距离**纳入局部敏感哈希（LSH）中。
- en: '*Note*. As the main prerequisite, it is expected that you are already familiar
    with parts 5 and 6 of this article series. If not, it is highly recommended to
    read them first.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意*。作为主要前提，预计你已经熟悉本系列文章的第5和第6部分。如果没有，强烈建议你先阅读它们。'
- en: '*Note*. [Cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity)
    is formally defined in the range [0, 2]. For simplicity, we will map it to the
    interval [0, 1] where 0 and 1 indicate the lowest and the highest possible similarity
    respectively.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意*。[余弦距离](https://en.wikipedia.org/wiki/Cosine_similarity) 在 [0, 2] 范围内正式定义。为了简化起见，我们将其映射到
    [0, 1] 区间，其中 0 和 1 分别表示最低和最高可能的相似性。'
- en: Formal LSH definition
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正式LSH定义
- en: 'Given a distance metric d, H is called a (d₁, d₂, p₁, p₂)-sensitive LSH function
    if for randomly chosen objects x and y, the following conditions are satisfied:'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定距离度量 d，H 被称为 (d₁, d₂, p₁, p₂)-敏感的LSH函数，如果对于随机选择的对象 x 和 y，满足以下条件：
- en: '*If d(x, y) ≤ d₁, then p(H(x) = H(y)) ≥ p₁, i.e. H(x) = H(y) with probability
    at least p₁.*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果 d(x, y) ≤ d₁，则 p(H(x) = H(y)) ≥ p₁，即 H(x) = H(y) 的概率至少为 p₁。*'
- en: '*If d(x, y) ≥ d₂, then p(H(x) = H(y)) ≤ p₂, i.e. H(x) = H(y) with probability
    at most p₂.*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果 d(x, y) ≥ d₂，则 p(H(x) = H(y)) ≤ p₂，即 H(x) = H(y) 的概率至多为 p₂。*'
- en: 'Let us understand what these statements mean. When two vectors are similar,
    they have a low distance between them. Basically, the first statement makes sure
    the probability of hashing them to the same bucket is above a certain threshold.
    This way, some *false negatives* are eliminated: if the distance between two vectors
    is larger than *d₁*, then the probability of them hashing to the same bucket is
    always less than *p₁*. Inversely, the second statement controls *false positives*:
    if two vectors are not similar and the distance between them is larger than *d₂*,
    then they have an upper probability *p₂* threshold of appearing in the same bucket.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这些陈述的含义。当两个向量相似时，它们之间的距离很小。基本上，第一个陈述确保将它们哈希到同一个桶中的概率高于某个阈值。这样，一些 *假阴性*
    被消除：如果两个向量之间的距离大于 *d₁*，那么它们被哈希到同一个桶中的概率总是小于 *p₁*。相反，第二个陈述控制 *假阳性*：如果两个向量不相似且它们之间的距离大于
    *d₂*，则它们出现在同一个桶中的上限概率为 *p₂*。
- en: 'Given the statement above, we normally want the following statements in the
    system to be satisfied:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述陈述，我们通常希望系统中的以下陈述得到满足：
- en: '*p₁* should be as close to 1 as possible to reduce the number of *false negatives*.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*p₁* 应尽可能接近 1，以减少 *假阴性* 的数量。'
- en: '*p₂* should be as close to 0 as possible to reduce the number of *false positives*.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*p₂* 应尽可能接近 0，以减少 *假阳性* 的数量。'
- en: The gap between *d₁* and *d₂* should be as low as possible to reduce the interval
    where probabilistic estimations on data cannot be made.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*d₁* 和 *d₂* 之间的间隙应尽可能小，以减少无法对数据进行概率估计的区间。'
- en: '![](../Images/ec88a6b38658c10a66d7281cb27f5dca.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec88a6b38658c10a66d7281cb27f5dca.png)'
- en: The diagram on the left shows a typical curve demonstrating relationships between
    LSH parameters for (d₁, d₂, p₁, p₂) notation. A curve on the right demonstrates
    an ideal scenario where there is not gap between thresholds *d₁* and *d₂*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的图示展示了 LSH 参数（d₁, d₂, p₁, p₂）记号的典型曲线。右侧的曲线展示了一个理想的情况，其中阈值 *d₁* 和 *d₂* 之间没有间隙。
- en: Sometimes the statement above is introduced by using the term of similarity
    *s* instead of distance *d:*
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，上述陈述使用相似度 *s* 而不是距离 *d* 来引入：
- en: 'Given a similarity metric s, H is called a (s₁, s₂, p₁, p₂)-sensitive LSH function
    if for randomly chosen objects x and y, the following conditions are satisfied:'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定一个相似度度量 s，H 被称为 (s₁, s₂, p₁, p₂)-敏感 LSH 函数，如果对于随机选择的对象 x 和 y，满足以下条件：
- en: '*If s(x, y) ≥ s₁, then p(H(x) = H(y)) ≥ p₁, i.e. H(x) = H(y) with probability
    at least p₁.*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果 s(x, y) ≥ s₁，则 p(H(x) = H(y)) ≥ p₁，即 H(x) = H(y) 的概率至少为 p₁。*'
- en: '*If s(x, y) ≤ s₂, then p(H(x) = H(y)) ≤ p₂, i.e. H(x) = H(y) with probability
    at most p₂.*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果 s(x, y) ≤ s₂，则 p(H(x) = H(y)) ≤ p₂，即 H(x) = H(y) 的概率至多为 p₂。*'
- en: '![](../Images/4a2926a1c78be5ec5d31262022adf59d.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a2926a1c78be5ec5d31262022adf59d.png)'
- en: The diagram on the left shows a typical curve demonstrating relationships between
    LSH parameters for (*s₁, s₂, p₁, p₂*) notation. A curve on the right demonstrates
    an ideal scenario where there is not gap between thresholds *s₁* and *s₂*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的图示展示了 LSH 参数（*s₁, s₂, p₁, p₂*）的关系的典型曲线。右侧的曲线展示了一个理想的情况，其中阈值 *s₁* 和 *s₂* 之间没有间隙。
- en: '*Note*. In this article, both notations *(d₁, d₂, p₁, p₂)* and *(s₁, s₂, p₁,
    p₂)* will be used. Based on the letters used in notations in the text, it should
    be clear whether distance *d* or similarity *s* is implied. By default, the notation
    *(d₁, d₂, p₁, p₂)* is used.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意*：在本文中，将使用两种记号（*(d₁, d₂, p₁, p₂)* 和 *(s₁, s₂, p₁, p₂)*）。根据文本中使用的记号字母，应该可以清楚地知道是隐含距离
    *d* 还是相似度 *s*。默认情况下，使用记号 *(d₁, d₂, p₁, p₂)*。'
- en: LSH example
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LSH 示例
- en: 'To make things more clear, let us prove the following statement:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使问题更清楚，我们证明以下陈述：
- en: 'If the distance metric *s* is Jaccard index, then *H* is a *(0.6, 0.6, 0.4,
    0.4)-*sensitive LSH function. Basically, the equivalent statements have to be
    proved:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果距离度量 *s* 是 Jaccard 指数，那么 *H* 是一个 *(0.6, 0.6, 0.4, 0.4)-*敏感 LSH 函数。基本上，需要证明等效陈述：
- en: '*If d(x, y) ≤ 0.6, then p(H(x) = H(y)) ≥ 0.4*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果 d(x, y) ≤ 0.6，则 p(H(x) = H(y)) ≥ 0.4*'
- en: '*If d(x, y) ≥ 0.6, then p(H(x) = H(y)) ≤ 0.4*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果 d(x, y) ≥ 0.6，则 p(H(x) = H(y)) ≤ 0.4*'
- en: From the 5-th part of this article series, we know that *the probability of
    getting equal hash values for two binary vectors equals the Jaccard similarity*.
    Therefore, if two vectors are similar by at least 40%, then it is guaranteed that
    the probability of getting equal hash values is also at least 40%. In the meantime,
    a Jaccard similarity of at least 40% is equivalent to a Jaccard index at most
    of 60%. As a result, the first statement is proved. The analogous reflections
    can be done for the second statement.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从这篇文章系列的第5部分我们知道，*两个二进制向量获得相等哈希值的概率等于Jaccard相似度*。因此，如果两个向量至少相似40%，那么获得相等哈希值的概率也至少为40%。与此同时，至少40%的Jaccard相似度等同于最多60%的Jaccard指数。因此，第一个陈述得到了证明。第二个陈述可以做类似的推理。
- en: 'This example can be generalised into the theorem:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可以概括为定理：
- en: '**Theorem**. If d is Jaccard index, then H is a (d₁, d₂, 1 — d₁, 1 — d₂)-family
    of LSH functions.'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**定理**。如果d是Jaccard指数，则H是一个(d₁, d₂, 1 — d₁, 1 — d₂)的LSH函数族。'
- en: 'Similarly, based on the results obtained from part 6, it is possible to prove
    another theorem:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，基于第6部分获得的结果，可以证明另一个定理：
- en: '**Theorem**. If s is cosine similarity (between -1 and 1), then H is a (s₁,
    s₂, 1 — arccos(s₁) / 180, 1 — arccos(d₂) / 180)-family of LSH functions.'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**定理**。如果s是余弦相似度（介于-1和1之间），则H是一个(s₁, s₂, 1 — arccos(s₁) / 180, 1 — arccos(d₂)
    / 180)的LSH函数族。'
- en: Combining LSH functions
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合LSH函数
- en: 'Let us refer to useful concepts we learned in previous parts on LSH:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们参考在之前的LSH部分中学到的有用概念：
- en: Getting back to part 5 on minhashing, every vector was split into several bands
    each containing a set of rows. In order for a pair of vectors to be considered
    candidates, there had to exist **at least one** band where **all** of the vector
    rows were equal.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回到第5部分的minhashing，每个向量被分成若干个带，每个带包含一组行。为了将一对向量视为候选对，必须存在**至少一个**带，其中**所有**的向量行都是相等的。
- en: Regarding to part 6 on random projections, two vectors were considered candidates
    only if there existed **at least one** tree where **all** of the random projections
    did not separate the initial vectors.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于第6部分的随机投影，只有在存在**至少一个**树，其中**所有**的随机投影未能分开初始向量时，两个向量才被视为候选。
- en: 'As we can notice, these two approaches have a similar paradigm under the hood.
    Both of them consider a pair of vectors as candidates only if at **least one time**
    out of *n* configurations vectors have the same hash values **all** *k* times.
    With the boolean algebra notation, it can be written like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到，这两种方法在底层有相似的范式。只有当**至少有一次**在*n*配置中向量的哈希值**全部**相同*k*次时，它们才会被视为候选对。用布尔代数表示，可以写成这样：
- en: '![](../Images/d40f11e2ede06bf7da03a7e5fee71439.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d40f11e2ede06bf7da03a7e5fee71439.png)'
- en: Based on this example, let us introduce logical operators *OR* and *AND* which
    allow aggregating a set of hash functions. Then we will estimate how they affect
    the output probability of two vectors being candidates and the rate of *false
    negative* and *false positive* errors.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个例子，我们引入逻辑运算符*OR*和*AND*，它们允许聚合一组哈希函数。然后我们将估计它们如何影响两个向量成为候选的输出概率以及*假阴性*和*假阳性*错误的率。
- en: AND operator
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AND运算符
- en: Given n independent LSH functions H₁, H₂, … Hₙ, the **AND** operator considers
    two vectors as a candidate pair only if **all** of n corresponding hash values
    of both vectors are equal. Otherwise, the vectors are not considered as candidates.
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定n个独立的LSH函数H₁, H₂, … Hₙ，**AND**运算符仅当两个向量的所有n个对应哈希值相等时，才会将它们视为候选对。否则，向量不会被视为候选。
- en: If hash values of two highly different vectors are aggregated by the *AND* operator,
    then the probability of them being candidates decreases with the increase of the
    number of used hash functions. Therefore, the number of *false positive* decreases.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个高度不同的向量的哈希值通过*AND*运算符进行聚合，那么它们成为候选的概率会随着使用的哈希函数数量的增加而减少。因此，*假阳性*的数量也会减少。
- en: At the same time, two similar vectors can by chance result in a pair of different
    hash values. Because of this, such vectors will not be considered similar by the
    algorithm. This aspect results in a higher rate of *false negatives*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，两类似的向量可能由于偶然原因而产生一对不同的哈希值。因此，算法不会将这些向量视为相似。这个方面导致了较高的*假阴性*率。
- en: '**Theorem**. Consider r independent (s₁, s₂, p₁, p₂)-sensitive LSH functions.
    Combining these r LSH functions with the AND operator results in a new LSH function
    with parameters as'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**定理**。考虑r个独立的(s₁, s₂, p₁, p₂)-敏感LSH函数。将这些r个LSH函数与AND操作符结合会得到一个具有以下参数的新LSH函数'
- en: '![](../Images/df8a221eb298604e45bafb780e33e5bc.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df8a221eb298604e45bafb780e33e5bc.png)'
- en: It is easy to prove this statement by using the probability formula of several
    independent events which multiplies the probabilities of all events to estimate
    the probability that all events will occur.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用多个独立事件的概率公式来证明这一点是容易的，该公式将所有事件的概率相乘以估计所有事件发生的概率。
- en: OR operator
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OR操作符
- en: Given n independent LSH functions H₁, H₂, … Hₙ, the **OR** operator considers
    two vectors as a candidate pair only if **at least one** of n corresponding hash
    values of both vectors are equal. Otherwise, the vectors are not considered as
    candidates.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定n个独立的LSH函数H₁、H₂、… Hₙ，**OR**操作符仅在**至少一个**对应哈希值相等时将两个向量视为候选对。否则，这些向量不被视为候选。
- en: Inversely to the *AND* operator, the *OR* operator increases the probability
    of any two vectors of being candidates. For any pair of vectors, it is sufficient
    at least a single equality of corresponding hash values. For that reason, the
    OR aggregation decreases the number of *false negatives* and increases *false
    positives*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与*AND*操作符相反，*OR*操作符增加了任何两个向量成为候选的概率。对于任何向量对，只需对应哈希值中的一个相等即可。因此，OR聚合减少了*假阴性*的数量，增加了*假阳性*。
- en: '**Theorem**. Consider *b* independent (d₁, d₂, p₁, p₂)-family LSH functions.
    Combining these *b* LSH functions with the AND operator results in a new LSH function
    with parameters as'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**定理**。考虑*b*个独立的(d₁, d₂, p₁, p₂)-族LSH函数。将这些*b*个LSH函数与AND操作符结合会得到一个具有以下参数的新LSH函数'
- en: '![](../Images/1ce7752b4e0f6fc439ab573ee37d82ee.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ce7752b4e0f6fc439ab573ee37d82ee.png)'
- en: We will not prove this theorem because the resulting analogous probability formula
    was obtained and explained in part 5 of this article series.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会证明这个定理，因为类似的概率公式已经在本文系列的第5部分中获得和解释。
- en: Composition
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合
- en: 'Having *AND* and *OR* operations, it is possible to combine them together in
    various manners to better control the *false positive* and *false negative* rates.
    Let us imagine having *r* LSH functions used by the *AND* combinator and *b* LSH
    functions used by the *OR* combinator. Two different compositions can be constructed
    by using these basic combinators:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过*AND*和*OR*操作，可以以各种方式将它们结合在一起，以更好地控制*假阳性*和*假阴性*率。假设有*r*个LSH函数由*AND*组合器使用，*b*个LSH函数由*OR*组合器使用。可以使用这些基本组合器构建两种不同的组合：
- en: '![](../Images/566766fb92be31d3a6da63a1ca54065c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/566766fb92be31d3a6da63a1ca54065c.png)'
- en: AND-OR and OR-AND are two types of compositions that can be built by using AND
    and OR operators.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: AND-OR和OR-AND是可以通过使用AND和OR操作符构建的两种类型的组合。
- en: Algorithms described in two previous articles used the *AND-OR* composition.
    In fact, nothing prevents us from building more complex compositions based on
    *AND* and *OR* operations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前两篇文章中描述的算法使用了*AND-OR*组合。实际上，构建基于*AND*和*OR*操作的更复杂的组合并没有什么阻碍。
- en: Composition example
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合示例
- en: 'Let us study an example to figure out how combinations of *AND* and *OR* can
    significantly improve performance. Assume an *OR-AND* combination with parameters
    *b = 4* and *r = 8*. Based on the corresponding formula above, we can estimate
    how the initial probability of two vectors being candidates transforms after the
    composition:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究一个示例，以了解*AND*和*OR*的组合如何显著提高性能。假设一个*OR-AND*组合，其参数为*b = 4*和*r = 8*。根据上述公式，我们可以估计两个向量成为候选的初始概率在组合后的变化：
- en: '![](../Images/6ac71b2ad637b0298c2af56db0b16615.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6ac71b2ad637b0298c2af56db0b16615.png)'
- en: Probability changes by applying an OR-AND composition with parameters b = 4
    and r = 8\. The first row shows initial probabilities while the second row shows
    the transformed ones.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 应用参数为b = 4和r = 8的OR-AND组合后的概率变化。第一行显示初始概率，第二行显示转换后的概率。
- en: For instance, if for a certain value of similarity between two vectors, a single
    LSH function hashes them to the same bucket in 40% of cases, then after the *OR-AND*
    composition they will be hashed in 32.9% of cases.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果对于两个向量之间的某个相似度值，单个LSH函数在40%的情况下将它们哈希到相同的桶中，那么在*OR-AND*组合后，它们将在32.9%的情况下被哈希。
- en: To understand what is so special about compositions, consider a *(0.4, 1.7,
    0.8, 0.2)*-sensitive LSH function. After the *OR-AND* transformation, the LSH
    function transforms into *(0.4, 1.7, 0.0148, 0.987)*-sensitive format.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解组合的特殊性，考虑一个*(0.4, 1.7, 0.8, 0.2)*敏感的LSH函数。经过*OR-AND*变换后，LSH函数转变为*(0.4, 1.7,
    0.0148, 0.987)*敏感格式。
- en: In essence, if initially two vectors were very similar and had a distance of
    less than 0.4, then they would be considered candidates in 80% of cases. However,
    with the composition applied, they are now candidates in 98.7% of scenarios resulting
    in much fewer *false negative* errors!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，如果最初两个向量非常相似且距离小于0.4，那么它们将被认为是80%情况下的候选。然而，应用组合后，它们现在在98.7%的情况下被认为是候选，从而大大减少了*假阴性*错误！
- en: Analogously, if two vectors are very different from each other and have a distance
    greater than 1.7, then they are now considered candidates only in 1.48% of cases
    (compared to 20% before). This way, the frequency of *false positive* errors is
    reduced by 13.5 times! This is a massive improvement!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果两个向量彼此差异很大且距离大于1.7，那么它们现在只会在1.48%的情况下被认为是候选（相较于之前的20%）。这样，*假阳性*错误的频率降低了13.5倍！这是一项巨大的改进！
- en: '![](../Images/f501c884ce08598c3bb4a6d0817888f2.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f501c884ce08598c3bb4a6d0817888f2.png)'
- en: Curves showing how initial probabilities are transformed after different compositions
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线显示了在不同组合后初始概率的转变
- en: In general, by having a *(d₁, d₂, p₁, p₂)*-sensitive LSH function, it is possible
    to transform it to a *(d₁, d₂, p’₁, p’₂)* format where *p’₁* is close to 1 and
    *p’₂* is close to 0\. Getting more closer to 1 and 0 usually requires more compositions
    to be used.
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通常，通过具有*(d₁, d₂, p₁, p₂)*敏感性的LSH函数，可以将其转换为*(d₁, d₂, p’₁, p’₂)*格式，其中*p’₁*接近1，而*p’₂*接近0。要使*p’₁*和*p’₂*更接近1和0，通常需要使用更多的组合。
- en: LSH for other distance metrics
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于其他距离度量的LSH
- en: We have already studied in-depth LSH schemes which are used to preserve information
    about Jaccard index and cosine distance. The natural question which arises is
    whether it is possible to use LSH for other distance metrics. Unfortunately, for
    most of the metrics, there is no corresponding LSH algorithm.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经深入研究了用于保留Jaccard指数和余弦距离信息的LSH方案。自然会产生一个问题，那就是是否可以使用LSH来处理其他距离度量。不幸的是，对于大多数度量，没有相应的LSH算法。
- en: Nevertheless, LSH schema exists for Euclidean distance — one of the most commonly
    used metrics in machine learning. As it is used frequently, we are going to study
    how to get hash values for Euclidean distance. With the theoretical notations
    introduced above, we will prove an important LSH property for this metric.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，欧几里得距离的LSH方案确实存在——这是机器学习中最常用的度量之一。由于它被广泛使用，我们将研究如何获取欧几里得距离的哈希值。通过上述引入的理论符号，我们将证明这一度量的一个重要LSH属性。
- en: LSH for Euclidean distance
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于欧几里得距离的局部敏感哈希（LSH）
- en: The mechanism of hashing of points in Euclidean space includes projecting them
    on a random line. Algorithm assumes that
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 欧几里得空间中点的哈希机制包括将它们投影到随机线上。算法假设
- en: If two points are relatively close to each other, then their projections should
    also be close.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个点相对接近，那么它们的投影也应该相对接近。
- en: If two points are far from each other, then their projections should be also
    far.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个点彼此相距较远，那么它们的投影也应该相距较远。
- en: To measure how close two projections are, a line can be divided into several
    equal segments (buckets) of size *a* each. Each line segment corresponds to a
    certain hash value. If two points project to the same line segment, then they
    have the same hash value. Otherwise, hash values are different.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测量两个投影的接近程度，可以将一条线分成若干个大小为*a*的相等段（桶）。每个线段对应一个特定的哈希值。如果两个点投影到相同的线段上，那么它们具有相同的哈希值。否则，哈希值不同。
- en: '![](../Images/1925eca7139b0afb0a6aa0b098f84d98.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1925eca7139b0afb0a6aa0b098f84d98.png)'
- en: Projecting points on a random line
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在随机线上投影点
- en: Though the method might seem robust at first, it can still project points which
    are far from each other to the same segment. This happens especially when a line
    connecting two points is almost perpendicular to the initial projection line.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法起初可能看起来很可靠，但它仍然可能将相隔较远的点投影到相同的段中。特别是在连接两个点的线几乎与初始投影线垂直时，这种情况尤其明显。
- en: '![](../Images/46de10be3c85955f16d8f6593be25466.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/46de10be3c85955f16d8f6593be25466.png)'
- en: Despite both points being relatively far from each other, there is still chance
    that they will be hashed into the same bucket.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管两个点相对较远，但它们仍有可能被哈希到同一个桶中。
- en: In order to decrease the error rate, it is highly recommended to use compositions
    of random projection lines, as discussed above.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了降低错误率，强烈建议使用随机投影线的组合，如上所述。
- en: It is geometrically possible to prove that if *a* is a length of a single line
    segment in Euclidean space, then *H* is *(a / 2, 2a, ½, ⅓)*-sensitive LSH function.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从几何上讲，可以证明如果 *a* 是欧几里得空间中单个线段的长度，则 *H* 是 *(a / 2, 2a, ½, ⅓)*-敏感 LSH 函数。
- en: Conclusion
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we accumulated knowledge on general LSH notation which helped
    us to formally introduce composition operations allowing us significantly reduce
    error rates. It is worth noting that LSH exists only for a small part of machine
    learning metrics but at least for the most popular ones which are Euclidean distance,
    cosine distance and Jaccard index. When dealing with another metric measuring
    similarity between vectors, it is recommended to choose another similarity search
    approach.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们积累了关于一般 LSH 符号的知识，这帮助我们正式引入了组合操作，使我们显著降低了错误率。值得注意的是，LSH 只存在于机器学习指标的少数部分，但至少对于最流行的指标，如欧几里得距离、余弦距离和
    Jaccard 指数，LSH 是存在的。在处理其他度量向量相似性时，建议选择另一种相似性搜索方法。
- en: For reference, formal proofs of the statements introduced in this article can
    be found in [these notes](https://web.lums.edu.pk/~imdad/pdfs/CS5312_Notes/CS5312_Notes-14-LSH.pdf).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，本文中介绍的陈述的正式证明可以在[这些讲义](https://web.lums.edu.pk/~imdad/pdfs/CS5312_Notes/CS5312_Notes-14-LSH.pdf)中找到。
- en: Resources
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '[Locality Sensitive Hashing | Lecture Notes for Big Data Analytics | Nimrah
    Mustafa](https://web.lums.edu.pk/~imdad/pdfs/CS5312_Notes/CS5312_Notes-14-LSH.pdf)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[局部敏感哈希 | 大数据分析讲义 | Nimrah Mustafa](https://web.lums.edu.pk/~imdad/pdfs/CS5312_Notes/CS5312_Notes-14-LSH.pdf)'
- en: '[Cosine distance | Wikipedia](https://en.wikipedia.org/wiki/Cosine_similarity)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[余弦距离 | 维基百科](https://en.wikipedia.org/wiki/Cosine_similarity)'
- en: '*All images unless otherwise noted are by the author.*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图像均由作者提供。*'
