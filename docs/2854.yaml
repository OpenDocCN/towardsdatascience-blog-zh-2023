- en: The Reingold Tilford Algorithm Explained, with Walkthrough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/reingold-tilford-algorithm-explained-with-walkthrough-be5810e8ed93?source=collection_archive---------6-----------------------#2023-09-12](https://towardsdatascience.com/reingold-tilford-algorithm-explained-with-walkthrough-be5810e8ed93?source=collection_archive---------6-----------------------#2023-09-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Algorithm to Plot Tree Nodes with Numerical Examples and Python Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://kayjanwong.medium.com/?source=post_page-----be5810e8ed93--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----be5810e8ed93--------------------------------)[](https://towardsdatascience.com/?source=post_page-----be5810e8ed93--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----be5810e8ed93--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----be5810e8ed93--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffee8693930fb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freingold-tilford-algorithm-explained-with-walkthrough-be5810e8ed93&user=Kay+Jan+Wong&userId=fee8693930fb&source=post_page-fee8693930fb----be5810e8ed93---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----be5810e8ed93--------------------------------)
    ·9 min read·Sep 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fbe5810e8ed93&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freingold-tilford-algorithm-explained-with-walkthrough-be5810e8ed93&user=Kay+Jan+Wong&userId=fee8693930fb&source=-----be5810e8ed93---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fbe5810e8ed93&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Freingold-tilford-algorithm-explained-with-walkthrough-be5810e8ed93&source=-----be5810e8ed93---------------------bookmark_footer-----------)![](../Images/4962af380309f59d5a1af978e2bb8265.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Sergiu Vălenaș](https://unsplash.com/@svalenas?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The 1981 Reingold-Tilford algorithm creates a visually pleasing representation
    of hierarchical data by arranging nodes in a tree structure to maximize readability.
    In other words, it is an algorithm for retrieving the `(x, y)` coordinates of
    every node in a tree.
  prefs: []
  type: TYPE_NORMAL
- en: According to the [paper](https://reingold.co/tidier-drawings.pdf), there are
    a few aesthetic rules that a good tree diagram should follow,
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Nodes at the same depth should lie along a straight line, and the straight
    lines defining the depths should be parallel
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2\. A left child should be positioned to the left of its parent node and a right
    child to the right (only applicable to binary trees)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. A parent should be centered over their children
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. A tree and its mirror image should produce drawings that are a reflection
    of one another, and a subtree should be drawn the same way regardless of where
    it occurs in the tree
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Determining the `y` coordinates of the nodes is straightforward, whereas the
    `x` coordinates are slightly more tricky. This article will attempt to explain
    the algorithm with numerical examples on a slightly more…
  prefs: []
  type: TYPE_NORMAL
