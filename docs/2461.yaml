- en: 'Advanced Python: Functions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/advanced-python-functions-3be6810f92d1?source=collection_archive---------1-----------------------#2023-08-01](https://towardsdatascience.com/advanced-python-functions-3be6810f92d1?source=collection_archive---------1-----------------------#2023-08-01)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@ilija.lazarevic?source=post_page-----3be6810f92d1--------------------------------)[![Ilija
    Lazarevic](../Images/4a0d84af6d8fa97705ee35444d319b07.png)](https://medium.com/@ilija.lazarevic?source=post_page-----3be6810f92d1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3be6810f92d1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3be6810f92d1--------------------------------)
    [Ilija Lazarevic](https://medium.com/@ilija.lazarevic?source=post_page-----3be6810f92d1--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe73ea2eae8e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-functions-3be6810f92d1&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=post_page-e73ea2eae8e6----3be6810f92d1---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3be6810f92d1--------------------------------)
    ·11 min read·Aug 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3be6810f92d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-functions-3be6810f92d1&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=-----3be6810f92d1---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3be6810f92d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-functions-3be6810f92d1&source=-----3be6810f92d1---------------------bookmark_footer-----------)![](../Images/c4534173429b47e995ec7ff47f4c6c95.png)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: How you will entangle yourself with Python. Photo by [iam_os](https://unsplash.com/@iam_os?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/jst9zmbCD58?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: After reading the title, you probably ask yourself something along the lines
    of, “Functions in Python are an advanced concept? How? All courses introduce functions
    as the basic block in language.” And you are right and wrong at the same time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Most courses on Python introduce functions as a basic concept and building block
    because, without them, you would not be able to write functional code at all.
    This is totally different from the functional programming paradigm, which is a
    separate concept, but I shall touch upon this one too.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Before we delve into the advanced intricacies of Python functions, let’s briefly
    go over some basic concepts and things you probably already know.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究Python函数的复杂细节之前，让我们简要回顾一些基本概念和你可能已经知道的内容。
- en: Brief basics
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础概念
- en: 'So you start writing your program, and at some point you end up writing the
    same sequence of code. You start repeating yourself and the code blocks. This
    proves to be a good time and place to introduce functions. At least, that is.
    In Python, you define a function as:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你开始编写程序，在某个时刻你发现自己重复编写相同的代码序列。你开始重复自己和代码块。这证明这是引入函数的好时机和地方。至少，在Python中定义函数的方法是：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the world of software engineering, we make a distinction between parts of
    function definition:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程领域，我们对函数定义的各个部分进行区分：
- en: '`def` - Python keyword used to define a function.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`def` - 用于定义函数的Python关键字。'
- en: '`shout` - function name.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shout` - 函数名。'
- en: '`shout(name)`- function declaration.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shout(name)` - 函数声明。'
- en: '`name` - function argument.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 函数参数。'
- en: '`print(...)`is a part of a function body or how we call it function definition.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print(...)` 是函数体的一部分，或者我们称之为函数定义。'
- en: 'A function can return a value or have no return value at all, like the one
    we previously defined. When function returns value it can return one or more of
    them:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以返回一个值或根本没有返回值，就像我们之前定义的那样。当函数返回值时，它可以返回一个或多个值：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What you get as a result is a tuple that you can unpack or pick any of the tuple
    elements to proceed with.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到的结果是一个元组，你可以解包或者选择其中的任何一个元组元素继续操作。
- en: 'For those of you who are not informed, functions in Python are **first-class
    citizens**. What does this mean? It means you can work with functions as you would
    with any other variable. You can pass them as arguments to other functions, return
    them from functions, and even store them in variables. Here is one of the examples:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不知情的人，Python中的函数是**一等公民**。这意味着什么？这意味着你可以像操作其他变量一样操作函数。你可以将它们作为参数传递给其他函数，从函数中返回它们，甚至将它们存储在变量中。这是一个例子：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Wait, what was this `lambda` ? This is another way you can define functions
    in Python. This is the so-called unnamed or anonymous function. Well, in this
    example, we are assigning it to a variable named `name_decorator` but you can
    pass the `lambda` expression as an argument of another function without the need
    to name it. I will cover this shortly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，这个`lambda`是什么？这是一种你可以在Python中定义函数的方式。它被称为无名函数或匿名函数。在这个例子中，我们将其赋值给一个名为`name_decorator`的变量，但你也可以将`lambda`表达式作为另一个函数的参数传递而无需给它命名。我会稍后详细讲解。
- en: What is left is to give an example of how functions can be passed as arguments
    or returned as values from another function. This is the part where we are moving
    toward advanced concepts, so bear with me.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是给出如何将函数作为参数传递或作为另一个函数的返回值的例子。这是我们迈向高级概念的部分，所以请耐心等待。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So this is how it looks to pass functions as arguments to another function.
    What about the `lambda` function? Well, take a look at the next example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是将函数作为参数传递给另一个函数的样子。那么`lambda`函数呢？请看下一个例子：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now the default decorating function is `lambda` and returns the argument's value
    as it is (idempotent). Here, it is anonymous because there is no name attached
    to it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在默认的装饰函数是`lambda`，它返回参数的值（幂等）。在这里，它是匿名的，因为没有附加名称。
- en: Notice that `print` is also a function, and we are passing a function `shout`
    inside of it as an argument. In essence, we are chaining functions. And this can
    lead us to a functional programming paradigm, which is a path that you can choose
    in Python. I will try to write another blog post specifically on this subject
    because it is very interesting to me. For now, we will keep to the procedural
    programming paradigm; that is, we will continue with what we have been doing so
    far.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`print`也是一个函数，我们将函数`shout`作为参数传递给它。从本质上讲，我们是在链接函数。这可以引导我们进入函数式编程范式，这是一种你可以在Python中选择的路径。我会尝试写另一篇专门讨论这个主题的博客文章，因为它对我非常有趣。现在，我们将继续使用过程式编程范式，也就是我们将继续我们目前的做法。
- en: As stated previously, a function can be assigned to a variable, passed as an
    argument to another function, and returned from that function. I have shown you
    some simple examples for the first two cases, but what about returning a function
    from a function? At first I wanted to keep it really simple, but then again, this
    is an advanced Python!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，函数可以赋值给变量，可以作为另一个函数的参数，也可以从该函数返回。我给你展示了一些前两种情况的简单示例，但函数从函数中返回呢？起初我想保持简单，但毕竟这是高级Python！
- en: Intermediate or advanced parts
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中级或高级部分
- en: This will by no means be **THE** guide to functions and advanced concepts around
    functions in Python. There are a lot of great materials, which I will leave at
    the end of this post. However, I want to talk about a couple of interesting aspects
    that I have found to be very intriguing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝不会是**终极**的Python函数和函数相关高级概念指南。有很多很棒的材料，我会在这篇文章的最后留给你。然而，我想讨论几个我发现非常有趣的方面。
- en: 'Functions in Python are **objects**. How can we figure this out? Well, each
    object in Python is an instance of a class that eventually inherits from one specific
    class called `type`. The details of this are convoluted, but to be able to see
    what this has to do with functions, here is an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的函数是**对象**。我们怎么知道这一点呢？每个Python中的对象都是一个类的实例，最终继承自一个特定的类叫做`type`。这其中的细节很复杂，但为了能够理解这与函数的关系，这里有一个例子：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you define a class in Python, it automatically inherits the `object` class.
    And which class does `object` inherit?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Python中定义一个类时，它会自动继承`object`类。而`object`类继承自哪个类呢？
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And should I tell you that classes in Python are objects too? Indeed, this is
    mind-boggling for beginners. But as Andrew Ng would say, this is not that important;
    don’t worry about it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该告诉你Python中的类也是对象吗？确实，这对初学者来说令人震惊。但正如Andrew Ng所说，这并不是那么重要，不用太担心。
- en: Okay, so functions are objects. Certainly functions should have some magic methods,
    then, right?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以函数是对象。函数应该有一些魔法方法，对吧？
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The magic method `__call__` is defined for objects that are callable. So our
    `shout` object (function) is callable. We can *call* it with or without arguments.
    But this is interesting. What we did previously was define a `shout` function
    and get an object that is callable with the `__call__` magic method that is a
    function. Have you ever watched the Inception movie?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法方法`__call__`定义在可调用的对象上。所以我们的`shout`对象（函数）是可调用的。我们可以*调用*它，带有或不带有参数。但这很有趣。我们之前所做的是定义一个`shout`函数，并得到一个可调用的对象，其`__call__`魔法方法是一个函数。你看过《盗梦空间》电影吗？
- en: 'So, our *function* is not really a function but an object. Objects are instances
    of classes and contain methods and attributes, right? This is something you should
    know from OOP. How can we find out what the attributes of our object are? There
    is this Python function called `vars` that returns a dictionary of object attributes
    with their values. Let''s see what happens in the next example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们的*函数*实际上不是一个函数，而是一个对象。对象是类的实例，包含方法和属性，对吧？这是你从面向对象编程（OOP）中应该知道的。我们如何找出对象的属性是什么？有一个叫做`vars`的Python函数，它返回一个包含对象属性及其值的字典。让我们看看下一个例子会发生什么：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is interesting. Not that you could figure out the use case for this straight
    away. And even if you could find it, I would highly discourage you from doing
    this black magic. It’s just not easy to follow, even though it is an interesting
    flex. The reason I have shown you this is because we wanted proof that functions
    are indeed objects. Remember, everything in Python is an object. That is how we
    roll in Python.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣。你可能一时无法直接找到这种用例。即便你找到了，我也强烈不建议你使用这种黑魔法。尽管这很有趣，但不易理解。我向你展示这一点是因为我们想证明函数确实是对象。记住，Python中的一切都是对象。这就是Python的方式。
- en: Now, long-awaited functions are returning. This concept is also very interesting
    since it gives you a lot of utility. With a little bit of syntactic sugar, you
    get very expressive. Let’s dive in.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，期待已久的函数正在返回。这个概念也很有趣，因为它提供了很多实用性。稍微加点语法糖，你会变得非常表达丰富。让我们深入了解。
- en: 'First, a function’s definition can contain another function’s definition. Even
    more than one. Here is a perfectly fine example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，函数的定义可以包含另一个函数的定义，甚至不止一个。这是一个完全有效的例子：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you are thinking that this is just a convoluted version of `name.upper()`
    you are right. But wait, we are getting there.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为这只是`name.upper()`的复杂版，你是对的。但等等，我们快到了。
- en: So, given the previous example, which is fully functional Python code, you can
    experiment with multiple functions defined inside your function. What is the value
    of this neat trick? Well, you could be in a situation where your function is huge
    with repeating blocks of code. This way, defining a *subfunction* would increase
    readability. In practice, huge functions are a sign of code smell, and it is highly
    encouraged to break them into a few smaller ones. So, following this advice, you
    will rarely have the need to define multiple functions inside each other. One
    thing to notice is that the `_upper_case` function is hidden and out of reach
    in the scope where the `shout` function ends up being defined and available to
    call. This way, you can't test it easily, which is yet another issue with this
    approach.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据前面的例子，这是完全可用的Python代码，你可以尝试在函数内部定义多个函数。这种巧妙的技巧有什么价值？嗯，你可能会遇到你的函数非常庞大且有重复的代码块。这样，定义一个*子函数*可以增加可读性。在实际应用中，巨大的函数是代码异味的迹象，强烈建议将其拆分成几个较小的函数。因此，遵循这个建议，你很少需要在函数内部定义多个函数。需要注意的一点是，`_upper_case`函数是隐藏的，无法在`shout`函数定义和调用的范围内访问。这种方法的另一个问题是，你无法轻易测试它。
- en: However, there is one specific case where defining a function inside another
    is a way to go. This is when you implement the decorator of a function. This has
    nothing to do with the function we used to decorate the `name` string in one of
    previous examples.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一种特定情况，在另一个函数内部定义函数是一个可行的方法。这就是当你实现函数的装饰器时。这与我们之前例子中用于装饰`name`字符串的函数无关。
- en: Decorator functions in Python
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的装饰器函数
- en: 'What is a *decorator function*? Think of it as a function that wraps your function.
    The goal of doing this is to introduce additional functionality to an already
    existing function. For example, say you want to log every time your function is
    called:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是*装饰器函数*？可以把它看作是一个包装你函数的函数。这样做的目标是给一个已经存在的函数添加额外的功能。例如，假设你想记录每次调用你的函数时：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Pay attention to how we decorate our function; we pass it as an argument to
    the decorating one. But this is not enough! Remember, decorator returns function,
    and this function needs to be invoked (called). This is what the last call does.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何装饰我们的函数；我们将它作为参数传递给装饰函数。但这还不够！记住，装饰器返回函数，这个函数需要被调用（执行）。这就是最后一次调用的作用。
- en: 'Now, in practice, what you really want is for decoration to persist under the
    original function’s name. In our case, we would like that after the interpreter
    parses our code, `my_function` is the name of the decorated function. This way,
    we keep things simple to follow, and we are making sure that any part of our code
    won''t be able to call an undecorated version of our function. Example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在实际操作中，你真正想要的是装饰保持在原函数的名称下。在我们的例子中，我们希望在解释器解析我们的代码后，`my_function`是装饰后的函数的名称。这样，我们保持简单易懂，同时确保代码的任何部分都无法调用未装饰版本的函数。示例：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will admit that the part where we reassign the function’s name to a decorated
    one is troublesome. You have to keep this in mind. If there are many function
    calls you want to log, there will be a lot of repeating code. Here is where the
    syntactic sugar comes in. After the decorator function is defined, you can use
    it to decorate the another function by prefixing the function definition with
    an `@` and the name of the decorator function. Example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你会承认，将函数名称重新分配为装饰后的名称这一部分确实很麻烦。你必须记住这一点。如果有很多函数调用需要记录，那么会有大量重复的代码。这就是语法糖派上用场的时候。装饰器函数定义之后，你可以通过在函数定义前加上`@`和装饰器函数的名称来装饰另一个函数。示例：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is Python’s Zen. Look at the expressiveness of the code and its simplicity.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python的禅宗。看看代码的表达力和简洁性。
- en: 'One important thing to note here! Even though the output makes sense, it is
    not what you would expect! At the time of loading your Python code, the interpreter
    will call the `my_logger` function and effectively run it! You will get the log
    output, yet this will not be what we wanted in the first place. Look at the code
    now:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一点重要的事情需要注意！尽管输出是合理的，但这不是你所期望的！在加载你的Python代码时，解释器将调用`my_logger`函数并有效地运行它！你会得到日志输出，但这将不是我们最初想要的结果。现在看看代码：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To be able to run decorator code once the original function is called, we have
    to wrap it around another function. This is where things can get messy. Here is
    an example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在调用原始函数时能够运行装饰器代码，我们必须将其包裹在另一个函数中。这是事情可能变得混乱的地方。这是一个示例：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this example, there are some updates as well, so let’s go over them:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，还有一些更新，我们来逐一查看：
- en: We want to be able to pass the argument to `my_function`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望能够将参数传递给`my_function`。
- en: We want to be able to decorate any function, not just `my_function`. Because
    we don't know the exact number of arguments for future functions, we have to keep
    things as general as we can, which is why we use `*args` and `**kwargs`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望能够装饰任何函数，而不仅仅是`my_function`。因为我们不知道未来函数的确切参数数量，我们必须尽可能保持通用，这就是为什么我们使用`*args`和`**kwargs`。
- en: Most importantly, we defined `_inner_decorator` that is going to be called each
    time we call `my_function` in the code. It accepts positional and keyword arguments
    and passes them as arguments to the decorated function.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最重要的是，我们定义了`_inner_decorator`，它将在我们在代码中调用`my_function`时被调用。它接受位置参数和关键字参数，并将它们作为参数传递给装饰的函数。
- en: Always keep in mind that the decorator function has to return a function that
    accepts the same arguments (number and their respective types) and returns the
    same output (again, number and their respective types). That is, if you want to
    make the function user not confused and the code reader not trying to figure out
    what the hell is happening.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 始终记住，装饰器函数必须返回一个接受相同参数（数量及其类型）并返回相同输出（数量及其类型）的函数。也就是说，如果你想让函数用户不感到困惑，代码阅读者也不需要搞清楚发生了什么。
- en: 'For example, say you have two functions that are different in results but also
    require arguments:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，你有两个结果不同但也需要参数的函数：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In our example, the decorator function accepts just the function it decorates.
    But what if you wanted to pass additional parameters and dynamically change decorator
    behavior? Say you want to tune the logger decorator’s verbosity. So far, our decorator
    function has accepted one argument: the function it decorates. However, when the
    decorator function has its own arguments, these are passed to it first. Then,
    the decorator function has to return a function that accepts the decorated one.
    Essentially, things are getting more convoluted. Remember the movie Inception
    reference?'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，装饰器函数只接受它装饰的函数。但是，如果你想传递额外的参数并动态改变装饰器行为呢？比如说，你想调整日志记录器装饰器的详细程度。到目前为止，我们的装饰器函数接受了一个参数：它装饰的函数。然而，当装饰器函数有自己的参数时，这些参数会首先传递给它。然后，装饰器函数必须返回一个接受被装饰函数的函数。基本上，事情变得更加复杂了。还记得电影《盗梦空间》的引用吗？
- en: 'Here is an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: I won’t go into describing code unrelated to decorator, but I encourage you
    to look it up and learn. Here we have a decorator that logs function calls with
    different verbosity. As already described, `my_logger` decorator now accepts arguments
    that dynamically change its behavior. After arguments are passed to it, the resulting
    function that it returns should accept a function to decorate. This is the `_inner_logger`
    function. By now, you should understand what the rest of the decorator code is
    doing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细描述与装饰器无关的代码，但我鼓励你查阅相关资料进行学习。在这里，我们有一个装饰器，它以不同的详细程度记录函数调用。如前所述，`my_logger`
    装饰器现在接受动态改变其行为的参数。参数传递后，它返回的结果函数应该接受一个需要装饰的函数。这就是`_inner_logger`函数。到现在为止，你应该了解装饰器代码的其他部分在做什么。
- en: Conclusion
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: My first idea for this post was to write about advanced topics like decorators
    in Python. However, as you probably know by now, I have mentioned and used a lot
    of other advanced topics as well. In future posts, I’ll tackle some of these to
    a certain extent. Nevertheless, my advice for you is to go and learn about the
    things mentioned here from other sources as well. Grasping the functions is a
    must if you are developing in any programming language, but grasping all of the
    aspects of your programming language of choice can give you great leverage in
    how you write your code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初的想法是写一些像Python中的装饰器这样的高级主题。然而，正如你现在可能已经知道的，我还提到和使用了许多其他高级主题。在未来的帖子中，我会在一定程度上讨论其中一些。然而，我的建议是去其他来源学习这里提到的内容。如果你在任何编程语言中开发，理解这些函数是必须的，但掌握你所选择的编程语言的所有方面可以极大地提高你编写代码的能力。
- en: I hope I have introduced something new for you and that you are now confident
    about writing functions as an advanced Python programmer.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我为你介绍了一些新内容，并且你现在对作为高级 Python 程序员编写函数感到自信。
- en: References
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[Primer on Python decorators](https://realpython.com/primer-on-python-decorators/)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 装饰器入门](https://realpython.com/primer-on-python-decorators/)'
- en: '[Python Inner Functions: What Are They Good For?](https://realpython.com/inner-functions-what-are-they-good-for/)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 内部函数：它们有什么用？](https://realpython.com/inner-functions-what-are-they-good-for/)'
- en: '[Enum HOWTO](https://docs.python.org/3/howto/enum.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[枚举 HOWTO](https://docs.python.org/3/howto/enum.html)'
