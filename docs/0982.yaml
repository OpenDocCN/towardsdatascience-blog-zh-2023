- en: Are Expert Systems Dead?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/are-expert-systems-dead-87c8d6c26474?source=collection_archive---------4-----------------------#2023-03-16](https://towardsdatascience.com/are-expert-systems-dead-87c8d6c26474?source=collection_archive---------4-----------------------#2023-03-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A review of recent trends, use cases and technologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://simon-j-preis.medium.com/?source=post_page-----87c8d6c26474--------------------------------)[![Professor
    Simon J. Preis, Ph.D.](../Images/ea0586e8d1fd6ba434fa2cfb9a71e4a5.png)](https://simon-j-preis.medium.com/?source=post_page-----87c8d6c26474--------------------------------)[](https://towardsdatascience.com/?source=post_page-----87c8d6c26474--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----87c8d6c26474--------------------------------)
    [Professor Simon J. Preis, Ph.D.](https://simon-j-preis.medium.com/?source=post_page-----87c8d6c26474--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8c9dbf8eb438&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fare-expert-systems-dead-87c8d6c26474&user=Professor+Simon+J.+Preis%2C+Ph.D.&userId=8c9dbf8eb438&source=post_page-8c9dbf8eb438----87c8d6c26474---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----87c8d6c26474--------------------------------)
    ·12 min read·Mar 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F87c8d6c26474&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fare-expert-systems-dead-87c8d6c26474&user=Professor+Simon+J.+Preis%2C+Ph.D.&userId=8c9dbf8eb438&source=-----87c8d6c26474---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F87c8d6c26474&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fare-expert-systems-dead-87c8d6c26474&source=-----87c8d6c26474---------------------bookmark_footer-----------)![](../Images/91a28d8351f021ca364795f72731892c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Nghia Le](https://unsplash.com/@lephunghia?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Everyone is talking about machine learning. And this is not just a feeling:
    if you search Google for “machine learning”, you will receive almost 700 million
    results. But what about expert systems? Traditionally, it is the other side of
    the AI coin. Well, Google returns at least around 7 million results, but there
    is a clear gap between those two concepts. This mismatch fits also to the Google
    search trends: while interest in machine learning (orange line) has increased
    significantly in recent years, one can get the impression that expert systems
    (blue line) have somehow fallen into oblivion.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86912c0000ffc0c2fe1391b698bfbc0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Google Search Trends in % (Author, Data from Google)
  prefs: []
  type: TYPE_NORMAL
- en: So is this just a result of the AI evolution (survival of the fittest and hopefully
    not the “overfittest” … sorry for that AI joke ;-)? Are expert systems really
    outdated? Or is there still room for expert systems in the one or the other research
    area? I thought it would be good to collect and share some findings and experiences
    in order to take a stand for expert systems!
  prefs: []
  type: TYPE_NORMAL
- en: 'Contents:'
  prefs: []
  type: TYPE_NORMAL
- en: what are expert systems?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: are expert systems relevant in topical research?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: what are use cases for expert systems?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: what are modern technologies for developing expert systems?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are expert systems?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An expert system (ES) is a piece of software that consists at least of a knowledge
    (data-)base, a domain-related set of rules and an inference engine that is able
    to infer new axioms. It is called ES since it acts like a human expert in a particular
    domain, e.g. who is able to answer tricky questions related to his/her field of
    expertise. From application point of view, ES have two main types of users: a)
    the human experts who continuously review and modify the knowledge base and b)
    the end users who seek for answers to domain-related questions. Compared to often
    called “black-box AI” approaches from deep learning, the result of an ES is always
    transparent: the inference engine typically provides step-wise explanations for
    its results and the users are able to comprehend their logical construction.'
  prefs: []
  type: TYPE_NORMAL
- en: Are expert systems relevant in topical research?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to clarify the question, if ES are really dead, it is worth to look
    at the number of publications that are employed with ES or at least reference
    that term. For that purpose, I did a simple search on Google Scholar and checked
    the number of publications from 2005 to 2022 that contain the term ES. Let’s formulate
    the following working hypothesis: the publication trend for ES over the selected
    years is negative (to confirm that “ES are dead”).'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s check what the data shows. I have created a diagram that shows the
    absolute numbers of publications per time frame and a trend line. The diagram
    clearly shows that the publication trend is still positive. Though the literature
    search is very high-level and noisy, my expectation is that ES would not be named
    in topical articles if the term would be outdated; so we can reject the hypothesis
    stated above. We can imply that ES are still vital and play a crucial role in
    research.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7ccebfabdeb34e77993eba4aadf249a.png)'
  prefs: []
  type: TYPE_IMG
- en: Research Trend for Expert Systems (Author)
  prefs: []
  type: TYPE_NORMAL
- en: What are use cases for expert systems?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So what are these topical research disciplines that develop and propose ES?
    Which domains do they serve, which requirements do they fulfill, what is the main
    value of ES in those projects? Of course, these are great questions to be answered
    via systematic literature review — but for now, I will only present three selected
    projects that should demonstrate the bandwidth of ES.
  prefs: []
  type: TYPE_NORMAL
- en: Cyber Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ES can be used to for automated security assessment of IoT ecosystems. Rak et
    al. (2022) proposed an ES that produces a threat model and a list of attack plans
    for each identified threat for a IoT system. The results provided by the ES can
    be used by penetration testers to perform a systematic security test of the target
    IoT infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Project Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bhattacharya et al. (2022) proposed an ES for decision making in complex regulatory
    and technology implementation projects. For instance, the ES validates if the
    project start conditions are met and allows tailoring the project plan based on
    project type and complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Clinical Decision Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chrimes (2023) proposed an ES to support clinical decisions for COVID-19\. The
    ES interacts with users via a chatbot to determine the potential severity of a
    COVID-19 infection or the possible biological system responses and comorbidities
    that can contribute to the development of severe cases of COVID-19.
  prefs: []
  type: TYPE_NORMAL
- en: Modern Technologies for ES
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Especially in pure research projects, we often see Protégé as ES development
    tool, also in topical projects. The tool combines storage of knowledge (entities
    and object properties), rules (SWRL), facts (individuals) and provides an inference
    engine as pre-installed plugin (HermiT). I still believe that Protégé is important
    in education and research, especially since it is free of charge and easy to start.
    But I would not recommend to use it in industry projects due to its limitations
    regarding system integration and user interface design. In my opinion, it is a
    tool for universities, not for companies.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are modern tools that share some of the features of Protégé and
    that are industry-proven. Most important to name are graph databases which allow
    semantic storage and semantic analysis of information. So up to a certain degree,
    we can represent ontologies as knowledge graphs. For that purpose, neo4j provides
    a plugin called “neosemantics” for RDF, which is the data model standard for ontologies
    also in Protégé. So we can, for instance, create ontologies in Protégé and export
    them to neo4j for further software integration. The plugin neosemantics also provides
    an inference engine, however, we can do reasoning also “by foot”via Cypher, which
    is the standard query language for neo4j.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But what is inferencing or reasoning? Let’s have a look at following database
    that consists of persons and genders. We see that there is a number of relationships
    that indicate the gender of a person (in a simplified binary world) with “IS_A”
    and also family relationship between person nodes with “IS_Parent”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b95fd7eeac570d340712acbb4b12b7be.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial Database (Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can distinguish between explicitly stored knowledge and transitive knowledge.
    The explicit knowledge is what we see in the graph and what I have described in
    the paragraph above. However, from our everyday experience we know that there
    are more relationships between those persons based on this available information:
    siblings, grandparents, uncles etc. And instead of searching and/or entering all
    these relationships for all facts in the database manually, we can use the reasoning
    technique to create this knowledge automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: Grandparents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start with an easy one: grandparents are the parents of the parents of
    a person. So looking on our graph database, we are looking for multilevel “IS_Parent”
    relationships like PersonA →PersonB →PersonC. In this case, we would state that
    PersonC is a grandchild to PersonA and PersonA is a grandparent to PersonC. We
    can infer that information via following generic statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The result of this statement is shown in following screenshot. We see that Max
    and Anna are both grandchildren of Betty. Why? Because Betty is a parent to Franz
    who is a parent to Max and Anna.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4428ddc7ea5047888693595028bf0fe4.png)'
  prefs: []
  type: TYPE_IMG
- en: Grandparent Result (Author)
  prefs: []
  type: TYPE_NORMAL
- en: Siblings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another type of transitive knowledge is the sibling relationship. We are searching
    for persons who have the same parents, this means we are looking for common “IS_Parent”
    relationships for PersonA ←PersonB and PersonC ←PersonB. We can query that information
    via following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The result of this statement is shown in the following screenshot. We see that
    Max and Anna are siblings. Since the matching query fits for both perspectives,
    we get two result records. This is also technically valid, because neo4j does
    not support bidirectional or non-directed relationships. If Anna is a sibling
    to Max and Max is a sibling to Anna, then we have two separate relationships.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86e5b140c8e59d8aba6374ca84b9143a.png)'
  prefs: []
  type: TYPE_IMG
- en: Sibling Result (Author)
  prefs: []
  type: TYPE_NORMAL
- en: Persisting Transitive Knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are use cases for such on-demand queries, but there are other use cases
    where we wish to store the new transitive knowledge to the database as well. This
    is especially useful, if multiple users work with the database — here it does
    not make sense to “hide” any transitive knowledge that is potentially business-relevant.
    In that case, we can use the merge clause to create new (unique) relationships
    between nodes as shown in the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Note: besides new relationships, we could also infer and persist new nodes,
    labels and properties.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are then querying the full database, we see the additional “IS_SIBLING”
    relationships between Anna and Max:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5fce84203c94a303ffa2da1f34caebb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Modified database (Author)
  prefs: []
  type: TYPE_NORMAL
- en: It should be highlighted that this type of manual reasoning does not consider
    forward/backward chaining which are usually required features of inference engines,
    e.g. to support complex theorem proofs. So if you are interested in these features,
    you can start reading [here](https://www.geeksforgeeks.org/difference-between-backward-and-forward-chaining/)
    (general introduction) and [here](https://neo4j.com/labs/neosemantics/4.0/inference/)
    (inferencing with neo4j).
  prefs: []
  type: TYPE_NORMAL
- en: Self-Learning Expert Systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now the question is if we as humans always need to know these rules upfront
    or have to prepare manually the rules we want to query in order to extract transitive
    knowledge. The short answer is: no! And this leads us to an interesting link between
    the two often separated worlds of data-based machine learning and rule-based expert
    systems: we can apply decision trees to build rules from empirical data that are
    still “white-box” since they are transparent to the user. Decision trees are not
    limited to graph databases and the scikit-learn library in Python requires a data
    structure transformation from graph to a flat structure, e.g. pandas dataframe
    — so let’s ignore the graph model for now and jump directly to the point where
    we have a flat dataframe with selected numeric features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume we are working for a car seller and we want to build an expert
    system that tells the salesperson if a certain visitor is likely to purchase a
    car or not. Instead of developing rules from our own experience, we can use the
    historical sales data to derive the rules from previous purchase decisions. And
    this is something we should note when we are talking about decision trees: we
    are dealing with probabilities. Even though the tree would predict that a person
    is likely to buy a car, it does not mean that this person will really buy the
    car. We see a possible result of a decision tree classification for our car seller
    in the following figure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55c2f205d8462460b6b69cdfa2e45a55.png)'
  prefs: []
  type: TYPE_IMG
- en: Decision Tree Classification for Car Seller (Author)
  prefs: []
  type: TYPE_NORMAL
- en: Besides the graphical representation, we can also extract the new decision rules
    in a logical “if-then” format as described in [this article](https://mljar.com/blog/extract-rules-decision-tree/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So let’s assume we have validated this decision tree model and integrated it
    with a user interface, then the car salesperson could enter some personal visitor
    information to get a response which tells if this visitor is likely to buy a car
    or not. Let’s view following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a) if a potential customer enters the shop with following attributes: female,
    age=28 and annual salary=78.000 — is this person likely to buy a car? → our decision
    tree says: no (classified with label “0”).'
  prefs: []
  type: TYPE_NORMAL
- en: 'b) if a potential customer enters the shop with following attributes: male,
    age=28 and annual salary=118.000 — is this person likely to buy a car? → our decision
    tree says: yes(classified with label “1”).'
  prefs: []
  type: TYPE_NORMAL
- en: We see that such a system would provide similar functionality like a traditional
    expert system for this car seller domain. The benefit is that this decision-tree-based
    expert system is able to learn from new data in order to improve the rules continuously.
    However, we need to keep in mind that this type of expert system works with probabilities,
    hence, the responses are typically not 100% accurate. With traditional expert
    systems, due to the application of logical inference, the responses are logically
    accurate (at least if the basic axioms are correct). But we need to consider the
    high manual efforts to build and maintain the knowledge base and rules, and we
    need also to consider that even experts can be wrong, which requires extra validation
    efforts. So in the end it’s a trade-off between maintenance efficiency and prediction
    quality.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After defining what ES are at all, we have seen that ES are still used, developed
    or at least referenced in research publications and the publication trend is even
    positive. From that perspective, we can clearly answer the initial question: are
    ES dead? No! We have discussed a few topical projects and their domains to see
    the bandwidth of ES. Finally, we have discussed some features of graph databases,
    represented by neo4j, to perform tasks that are typically associated with ES.
    These essential tasks are on the one hand the semantic storage of explicit knowledge
    and on the other hand the rule-based reasoning of new transitive knowledge. Of
    course, neo4j provides much more features in terms of data storage and analysis,
    but I think that the easy examples from above are comprehensible to understand
    the capabilities of neo4j as a knowledge base as part of an ES. In addition, we
    have briefly discussed how we can build rules from data via decision trees, which
    allows the development of self-learning expert systems.'
  prefs: []
  type: TYPE_NORMAL
- en: So, when should we think about applying ES?
  prefs: []
  type: TYPE_NORMAL
- en: 'in cases where we simply **do not have data** (yet) to employ machine learning
    models. Example: to develop and justify qualification plans for new product releases
    without reliable reference products.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'in cases where we are **rule-driven** and we know the rules already and the
    rules are static and not directed by data. Example: to infer business-defined
    categorical master data based on other detailed information, e.g. the particular
    structure and setup of a production machine.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'in cases where we **have data and we want to use and understand decision rules**
    and we are aware that **rules may change** over time. Instead of developing and
    maintaining rules manually, we can employ decision trees. Example: to understand
    and infer customer behaviors based on empirical data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And to close this article with a fun fact: I asked ChatGPT and it does *not*
    consider itself as an expert system, because it is not trained for a certain domain
    in order to provide expert-level advise.'
  prefs: []
  type: TYPE_NORMAL
- en: Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bhattacharya, K., Gangopadhyay, S., DeBrule, C. (2021). Design of an Expert
    System for Decision Making in Complex Regulatory and Technology Implementation
    Projects. In: Chakrabarti, A., Poovaiah, R., Bokil, P., Kant, V. (eds) Design
    for Tomorrow — Volume 3\. Smart Innovation, Systems and Technologies, vol 223\.
    Springer, Singapore. [https://doi.org/10.1007/978-981-16-0084-5_50](https://doi.org/10.1007/978-981-16-0084-5_50)'
  prefs: []
  type: TYPE_NORMAL
- en: Chrimes, D. (2023). Using Decision Trees as an Expert System for Clinical Decision
    Support for COVID-19\. Interact J Med Res 2023; 12:e42540
  prefs: []
  type: TYPE_NORMAL
- en: 'URL: [https://www.i-jmr.org/2023/1/e42540](https://www.i-jmr.org/2023/1/e42540).
    DOI: 10.2196/42540'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rak, Massimiliano & Salzillo, Giovanni & Granata,Daniele. (2022). ESSecA: An
    automated expert system for threat modelling and penetration testing for IoT ecosystems,
    Computers and Electrical Engineering, Volume 99,2022, 107721, ISSN 0045–7906,
    [https://doi.org/10.1016/j.compeleceng.2022.107721](https://doi.org/10.1016/j.compeleceng.2022.107721)
    .'
  prefs: []
  type: TYPE_NORMAL
