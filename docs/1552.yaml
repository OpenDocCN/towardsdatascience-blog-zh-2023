- en: 'Catch Me If You Can: A Guide to Exception Handling in Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《抓住我，如果你能：Python 异常处理指南》
- en: 原文：[https://towardsdatascience.com/catch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9?source=collection_archive---------9-----------------------#2023-05-08](https://towardsdatascience.com/catch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9?source=collection_archive---------9-----------------------#2023-05-08)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/catch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9?source=collection_archive---------9-----------------------#2023-05-08](https://towardsdatascience.com/catch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9?source=collection_archive---------9-----------------------#2023-05-08)
- en: Unlock Python’s full potential through smart exception management
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过智能异常管理，释放 Python 的全部潜力
- en: '[](https://medium.com/@orjwan.zaafarani?source=post_page-----3efc7b2477f9--------------------------------)[![Orjuwan
    Zaafarani](../Images/3400a2bf9d5f7a11aabcaa8ca9ad1823.png)](https://medium.com/@orjwan.zaafarani?source=post_page-----3efc7b2477f9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3efc7b2477f9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3efc7b2477f9--------------------------------)
    [Orjuwan Zaafarani](https://medium.com/@orjwan.zaafarani?source=post_page-----3efc7b2477f9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@orjwan.zaafarani?source=post_page-----3efc7b2477f9--------------------------------)[![Orjuwan
    Zaafarani](../Images/3400a2bf9d5f7a11aabcaa8ca9ad1823.png)](https://medium.com/@orjwan.zaafarani?source=post_page-----3efc7b2477f9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3efc7b2477f9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3efc7b2477f9--------------------------------)
    [Orjuwan Zaafarani](https://medium.com/@orjwan.zaafarani?source=post_page-----3efc7b2477f9--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F155bd470ac4c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcatch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9&user=Orjuwan+Zaafarani&userId=155bd470ac4c&source=post_page-155bd470ac4c----3efc7b2477f9---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3efc7b2477f9--------------------------------)
    ·6 min read·May 8, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3efc7b2477f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcatch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9&user=Orjuwan+Zaafarani&userId=155bd470ac4c&source=-----3efc7b2477f9---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F155bd470ac4c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcatch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9&user=Orjuwan+Zaafarani&userId=155bd470ac4c&source=post_page-155bd470ac4c----3efc7b2477f9---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3efc7b2477f9--------------------------------)
    ·6 分钟阅读·2023年5月8日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3efc7b2477f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcatch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9&user=Orjuwan+Zaafarani&userId=155bd470ac4c&source=-----3efc7b2477f9---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3efc7b2477f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcatch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9&source=-----3efc7b2477f9---------------------bookmark_footer-----------)![](../Images/bf4a79f5d2abc3d82f44902159d3cfd3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3efc7b2477f9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcatch-me-if-you-can-a-guide-to-exception-handling-in-python-3efc7b2477f9&source=-----3efc7b2477f9---------------------bookmark_footer-----------)![](../Images/bf4a79f5d2abc3d82f44902159d3cfd3.png)'
- en: Photo by [Cookie the Pom](https://unsplash.com/@cookiethepom?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Cookie the Pom](https://unsplash.com/@cookiethepom?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: As a software developer, dealing with exceptions is often seen as a necessary
    evil. Yet, mastery of Python’s exception handling system can make you a more efficient
    and effective programmer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件开发者，处理异常通常被视为一种必要的恶行。然而，掌握 Python 的异常处理系统可以让你成为更高效、更有效的程序员。
- en: 'In this blog post, I will provide an in-depth explanation of the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我将对以下内容进行深入解释：
- en: What is Exception Handling?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是异常处理？
- en: The Difference Between `if` Statements and Exception Handling
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if` 语句与异常处理的区别'
- en: Using `else` and `finally` Clauses for Proper Error Management
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `else` 和 `finally` 子句进行正确的错误管理
- en: Defining Custom Exceptions
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义异常的定义
- en: Best Practices for Exception Handling
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常处理的最佳实践
- en: What is Exception Handling?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是异常处理？
- en: exception handling is a process of writing code to catch and handle errors or
    exceptions that may occur during program execution. This enables developers to
    write robust code that continues to run even in the face of unexpected events
    or errors, rather than crashing completely.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 异常处理是编写代码以捕获和处理可能在程序执行期间发生的错误或异常的过程。这使得开发者能够编写即使在面对意外事件或错误时也能继续运行的健壮代码，而不是完全崩溃。
- en: When an exception occurs, Python searches for a matching exception handler.
    The handler code will execute and take appropriate actions, such as logging the
    error, displaying an error message, or attempting to recover from the error. Overall,
    exception handling helps make Python applications more reliable, maintainable,
    and easier to debug.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生异常时，Python 会搜索匹配的异常处理程序。处理程序代码将执行并采取适当的行动，如记录错误、显示错误信息或尝试从错误中恢复。总体而言，异常处理有助于使
    Python 应用程序更加可靠、可维护，并且更易于调试。
- en: The Difference Between `if` Statements and Exception Handling
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`if` 语句和异常处理之间的区别'
- en: The primary differences between `if` statements and exception handling in Python
    lie in their respective goals and usage scenarios.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句和 Python 中异常处理的主要区别在于它们各自的目标和使用场景。'
- en: 'The `if` statement serves as a basic building block for structured programming.
    It evaluates a condition and executes different blocks of code based on whether
    the condition is true or false. Here''s an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句作为结构化编程的基本构建块。它评估一个条件，并根据条件是否为真执行不同的代码块。以下是一个示例：'
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Exception handling, on the other hand, plays an important role in writing robust
    and resilient programs by dealing with unexpected events and errors that may arise
    during runtime.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 异常处理在编写健壮且有弹性的程序中扮演着重要角色，它通过处理在运行时可能出现的意外事件和错误来实现这一点。
- en: Exceptions are used to signal problems and indicate areas in the code that need
    improvement, debugging, or additional error-checking measures. They allow Python
    to gracefully handle erroneous situations and continue executing the script rather
    than terminating abruptly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 异常用于信号问题，并指出代码中需要改进、调试或额外错误检查措施的区域。它们允许 Python 优雅地处理错误情况，并继续执行脚本，而不是突然终止。
- en: 'Consider the following example of how you might implement exception handling
    to better manage potential failures related to dividing by zero:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何实现异常处理以更好地管理与除零相关的潜在失败的示例：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since an exception was raised, the program stops executing immediately before
    reaching the print statement.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于引发了异常，程序在到达 print 语句之前立即停止执行。
- en: 'We can handle the above exception by wrapping the call to the “divide” function
    inside a `try-except` block like so:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将对“divide”函数的调用放入 `try-except` 块中来处理上述异常，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By doing this, we have handled the `ZeroDivisionError` exception gracefully
    without allowing the rest of the script to fail due to an unhandled exception.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们优雅地处理了 `ZeroDivisionError` 异常，而不会因为未处理的异常使脚本的其余部分失败。
- en: For more information about the built-in Exceptions in Python, you can refer
    to [[2]](https://www.geeksforgeeks.org/python-exception-handling/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Python 内置异常的更多信息，请参见 [[2]](https://www.geeksforgeeks.org/python-exception-handling/)。
- en: Using Else and Finally Clauses for Proper Error Management
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Else 和 Finally 子句进行正确的错误管理
- en: When working with exceptions in Python, it’s advised to include both `else`
    and `finally` clauses in your `try-except` blocks. The `else` clause allows you
    to specify what should happen if no exception is raised, while the `finally` clause
    ensures that certain cleanup operations are always performed regardless of whether
    an exception occurred [[1]](https://docs.python.org/3/tutorial/errors.html)[[2]](https://www.geeksforgeeks.org/python-exception-handling/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 Python 中的异常时，建议在 `try-except` 块中同时包含 `else` 和 `finally` 子句。`else` 子句允许你指定如果没有引发异常时应该发生的情况，而
    `finally` 子句确保无论是否发生异常，某些清理操作总是会执行 [[1]](https://docs.python.org/3/tutorial/errors.html)[[2]](https://www.geeksforgeeks.org/python-exception-handling/)。
- en: For example, consider a scenario where you want to read data from a file and
    perform some operations on that data. If an exception occurs while reading the
    file, you might want to log the error and stop processing further, but you still
    want to close the file properly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个场景，你想从文件中读取数据并对数据进行一些操作。如果在读取文件时发生异常，你可能想记录错误并停止进一步处理，但仍然想正确关闭文件。
- en: Using the `else` and `finally` clauses would allow you to do just that - process
    the data normally if no exception occurs, or handle any exceptions appropriately
    while still closing the file in the end. Without these clauses, your code would
    be vulnerable to resource leaks or incomplete error handling. Thus, they play
    essential roles in creating robust and reliable programs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `else` 和 `finally` 子句可以让你做到这一点——如果没有发生异常，则正常处理数据；或者在处理任何异常时仍能适当地关闭文件。如果没有这些子句，你的代码可能会遭遇资源泄漏或不完整的错误处理。因此，它们在创建健壮和可靠的程序中扮演着至关重要的角色。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we first attempt to open the file “file.txt” for reading using
    the `with` statement, which guarantees proper closing of the file object automatically
    upon execution completion. If either `FileNotFoundError` or `PermissionError`
    occurs during file I/O operations, the respective except statements get executed.
    **For simplicity**, we simply print error messages and exit the program if the
    file is not found.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们首先尝试使用 `with` 语句打开“file.txt”文件进行读取，这保证了文件对象在执行完成后自动正确关闭。如果在文件 I/O 操作期间发生
    `FileNotFoundError` 或 `PermissionError`，相应的 except 语句将被执行。**为了简单起见**，如果找不到文件，我们只是打印错误信息并退出程序。
- en: Otherwise, when no exceptions occur within the `try` block, we proceed with
    processing the file contents in the `else` branch. Finally, the cleanup operation
    ensured by the `finally` block closes the file regardless of whether an exception
    was raised earlier or not [[1]](https://docs.python.org/3/tutorial/errors.html).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，当 `try` 块中没有异常发生时，我们在 `else` 分支中继续处理文件内容。最后，`finally` 块保证了文件的关闭，无论之前是否抛出了异常
    [[1]](https://docs.python.org/3/tutorial/errors.html)。
- en: By adopting a structured approach like this, your code stays organized and easy
    to follow while accounting for potential errors that may arise from interacting
    with external systems or inputs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用这样的结构化方法，你的代码保持组织良好，易于跟随，同时考虑到可能由于与外部系统或输入交互而出现的潜在错误。
- en: Defining Custom Exceptions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义异常定义
- en: In Python, you can define custom exceptions by subclassing built-in exceptions
    such as `Exception` or any other class that inherits directly from `Exception`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以通过从内置异常如 `Exception` 或任何直接继承自 `Exception` 的类创建子类来定义自定义异常。
- en: To do this, you need to create a new class that inherits from one of these base
    exceptions and add attributes specific to your needs. You can then use your newly
    defined exception class throughout your code, just like you would use any other
    built-in exception class.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你需要创建一个继承自这些基本异常之一的新类，并添加特定于你需求的属性。然后，你可以在代码中像使用其他内置异常类一样使用你新定义的异常类。
- en: 'Here’s an example of defining a custom exception called `InvalidEmailAddress`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是定义一个名为 `InvalidEmailAddress` 的自定义异常的示例：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This custom exception is derived from `ValueError`, and its constructor takes
    an optional message argument (which defaults to `"invalid email address"`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义异常是从 `ValueError` 派生的，它的构造函数接受一个可选的消息参数（默认为“invalid email address”）。
- en: 'You can raise this exception whenever you encounter an invalid email address
    format:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到无效的电子邮件地址格式时，可以抛出这个异常：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, if you pass an invalid string to the `send_email()` function, instead
    of a plain `TypeError`, you''ll see a customized error message that clearly indicates
    the issue at hand. For instance, raising the exception might look like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你将一个无效的字符串传递给 `send_email()` 函数，你将看到一个自定义的错误消息，而不是普通的 `TypeError`，它清楚地指示了问题所在。例如，抛出异常的代码可能如下所示：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Best Practices for Exception Handling
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常处理的最佳实践
- en: 'Here are some best practices related to error handling in Python:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些与 Python 中错误处理相关的最佳实践：
- en: '**Design for failure**: Plan ahead by considering possible failures and designing
    your program to handle them gracefully. This means anticipating edge cases and
    implementing appropriate error handlers.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计以应对失败**：提前规划，考虑可能的失败情况并设计你的程序以优雅地处理这些失败。这意味着要预见边界情况并实施适当的错误处理程序。'
- en: '**Use descriptive error messages**: Provide detailed error messages or logs
    that help users understand what went wrong and why. Avoid generic error messages
    like “Error occurred” or “Something bad happened”. Instead, display a friendly
    message that suggests solutions or gives links to documentation. Be sure to strike
    a balance between providing detailed instructions and avoiding cluttering the
    UI with extraneous content.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用描述性的错误信息**：提供详细的错误信息或日志，帮助用户理解出了什么问题以及为什么。避免使用诸如“发生错误”或“发生了不好的事情”的通用错误信息。相反，显示一个友好的消息，建议解决方案或提供文档链接。务必在提供详细说明和避免UI过于繁杂之间取得平衡。'
- en: '**Minimize side effects**: Minimize the consequences of failed actions by isolating
    problematic code sections through try-finally or try-with-resources blocks. Ensure
    cleanup tasks always execute regardless of success or failure outcomes.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小化副作用**：通过使用 try-finally 或 try-with-resources 块隔离问题代码段，最小化失败操作的后果。确保清理任务在成功或失败的结果下都能始终执行。'
- en: '**Test thoroughly**: Test thoroughly: Ensure that your exception handlers behave
    correctly under various scenarios by running comprehensive tests.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**彻底测试**：确保你的异常处理程序在各种情况下表现正确，通过运行全面的测试来实现。'
- en: '**Refactor regularly**: Refactor error-prone code segments to improve their
    reliability and performance. Keep your codebase modular and loosely coupled, allowing
    independent parts to evolve independently without affecting others negatively.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定期重构**：重构易出错的代码段，以提高其可靠性和性能。保持代码库的模块化和松散耦合，使独立部分可以独立演进而不会对其他部分产生负面影响。'
- en: '**Log important events:** Keep track of interesting occurrences in your application
    by logging them to a file or console output. This helps you diagnose issues quickly
    without having to sift through large amounts of unstructured logs.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**记录重要事件**：通过将有趣的事件记录到文件或控制台输出中，跟踪应用程序中的发生情况。这有助于你快速诊断问题，而无需在大量未结构化的日志中筛选。'
- en: Conclusion
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Writing error-handling code is an integral part of software development, particularly
    when working with Python, as it enables developers to build more reliable and
    robust applications. By following industry standards and best practices, developers
    can reduce debugging time, ensure code quality, and provide better user experiences.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编写错误处理代码是软件开发中不可或缺的一部分，特别是在使用 Python 时，它使开发者能够构建更可靠和健壮的应用程序。通过遵循行业标准和最佳实践，开发者可以减少调试时间，确保代码质量，并提供更好的用户体验。
- en: Resources
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '[1] [https://docs.python.org/3/tutorial/errors.html](https://docs.python.org/3/tutorial/errors.html)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://docs.python.org/3/tutorial/errors.html](https://docs.python.org/3/tutorial/errors.html)'
- en: '[2] [https://www.geeksforgeeks.org/python-exception-handling/](https://www.geeksforgeeks.org/python-exception-handling/)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [https://www.geeksforgeeks.org/python-exception-handling/](https://www.geeksforgeeks.org/python-exception-handling/)'
