["```py\nimport pennylane as qml\nfrom pennylane import numpy as np\n\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score, precision_score, recall_score\n\nfrom sklearn.svm import SVC\n\nnum_qubits = 4\n\ndef layer(x):\n\n    qml.BasisEmbedding(x, wires=range(num_qubits))\n\n    for j, wire in enumerate(wires):\n        qml.Hadamard(wires=[wire])\n        if j != num_qubits-1:\n            qml.CNOT(wires=[j, j+1])\n        else:\n            qml.CNOT(wires=[j, 0])\n\ndef ansatz(x, wires):\n    layer(x)\n\nadjoint_ansatz = qml.adjoint(ansatz)\n\ndev = qml.device(\"default.qubit\", wires=num_qubits, shots=None)\nwires = dev.wires.tolist()\n\n@qml.qnode(dev, interface=\"autograd\")\ndef kernel_circuit(x1, x2):\n    ansatz(x1, wires=wires)\n    adjoint_ansatz(x2, wires=wires)\n    return qml.probs(wires=wires)\n\ndef kernel(x1, x2):\n    return kernel_circuit(x1, x2)[0]\n\ndf_train = pd.read_csv('train.csv')\n\ndf_train['Pclass'] = df_train['Pclass'].astype(str)\n\ndf_train = pd.concat([df_train, pd.get_dummies(df_train[['Pclass', 'Sex', 'Embarked']])], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(df_train.drop(columns=['Survived']), df_train['Survived'], test_size=0.10, random_state=42, stratify=df_train['Survived'])\n\nX_train['Age'] = X_train['Age'].fillna(X_train['Age'].median())\nX_test['Age'] = X_test['Age'].fillna(X_test['Age'].median())\n\nX_train['is_child'] = X_train['Age'].map(lambda x: 1 if x < 12 else 0)\nX_test['is_child'] = X_test['Age'].map(lambda x: 1 if x < 12 else 0)\n\ncols_model = ['is_child', 'Pclass_1', 'Pclass_2', 'Sex_female']\n\nX_train = X_train[cols_model]\nX_test = X_test[cols_model]\n\nX_train = np.array(X_train.values, requires_grad=False)\n\ninit_kernel = lambda x1, x2: kernel(x1, x2)\nK = qml.kernels.square_kernel_matrix(X_train, init_kernel, assume_normalized_kernel=True)\n\nsvm = SVC(kernel=lambda X1, X2: qml.kernels.kernel_matrix(X1, X2, init_kernel)).fit(X_train, y_train)\n\nX_test = np.array(X_test.values, requires_grad=False)\n\npredictions = svm.predict(X_test)\n\naccuracy_score(y_test, predictions)\nprecision_score(y_test, predictions)\nrecall_score(y_test, predictions)\nf1_score(y_test, predictions, average='macro')\n\nsvm1 = SVC(gamma='auto', kernel='rbf')\nsvm1.fit(X_train, y_train)\n\ny_pred = svm1.predict(X_test)\n\naccuracy_score(y_test, y_pred)\nprecision_score(y_test, y_pred)\nrecall_score(y_test, y_pred)\nf1_score(y_test, y_pred, average='macro')\n```"]