- en: 'How I built a programming language: The (difficult) Path to Success'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-i-built-a-programming-language-the-difficult-path-to-success-38aefa2bb69e?source=collection_archive---------14-----------------------#2023-07-20](https://towardsdatascience.com/how-i-built-a-programming-language-the-difficult-path-to-success-38aefa2bb69e?source=collection_archive---------14-----------------------#2023-07-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Frankly, difficult is an understatement.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@yashrajvishwakarma.31?source=post_page-----38aefa2bb69e--------------------------------)[![Yashrajvishwakarma](../Images/c07b1c3dd52ee792139cb517e8b25661.png)](https://medium.com/@yashrajvishwakarma.31?source=post_page-----38aefa2bb69e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----38aefa2bb69e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----38aefa2bb69e--------------------------------)
    [Yashrajvishwakarma](https://medium.com/@yashrajvishwakarma.31?source=post_page-----38aefa2bb69e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa7fae3e99bf7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-programming-language-the-difficult-path-to-success-38aefa2bb69e&user=Yashrajvishwakarma&userId=a7fae3e99bf7&source=post_page-a7fae3e99bf7----38aefa2bb69e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----38aefa2bb69e--------------------------------)
    ·6 min read·Jul 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F38aefa2bb69e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-programming-language-the-difficult-path-to-success-38aefa2bb69e&user=Yashrajvishwakarma&userId=a7fae3e99bf7&source=-----38aefa2bb69e---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F38aefa2bb69e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-built-a-programming-language-the-difficult-path-to-success-38aefa2bb69e&source=-----38aefa2bb69e---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: My [previous article](https://medium.com/@yashrajvishwakarma.31/how-i-built-a-programming-language-acd144f3867f)
    about my programming language outlined its syntax and provided a general idea
    of how I built it.
  prefs: []
  type: TYPE_NORMAL
- en: But I decided to write another one devoted to my journey towards the final outcome,
    because if I’m being honest, the journey certainly had a lot more downs than ups,
    and the challenges I had to overcome were really intimidating. Hopefully, this
    article also serves as motivation for anyone undertaking a similar project and
    facing similar difficulties, to not give up and instead know that someone else
    was once in the same position as them, and ended up fulfilling their goal.
  prefs: []
  type: TYPE_NORMAL
- en: But why should you care?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After all, all of you are from varied backgrounds, whether it be data science,
    or just good old Python & Java.
  prefs: []
  type: TYPE_NORMAL
- en: Well, even if you aren’t interested in building your own programming language,
    many of the soft skills I improved on during this experience will certainly be
    relatable (and hopefully motivational) to all of you, especially if you’re interested
    in programming.
  prefs: []
  type: TYPE_NORMAL
- en: How many times do you write a program, where every line looks correct, and you’re
    instead given a cryptic error that seems near-impossible to debug, at which point
    you begin losing your motivation and think of giving up.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a949b920ff2b7ef1f7b26a0886feab0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Tim Gouw](https://unsplash.com/@punttim?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Well, I faced those all-too-common issues way too many times while building
    the language, and the manner in which I eventually overcame them and persevered
    hopefully communicates a memorable message as you progress through the article!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The original idea for this came when I was in Grade 8 (or Grade 9, can’t quite
    remember), but back then I barely understood conditionals and iterative loops,
    so I forgot about it.
  prefs: []
  type: TYPE_NORMAL
- en: But years later, the same idea reignited itself in my mind, except I had no
    clue how to even start with it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/264518413c257ec524d35235e18b251d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Towfiqu barbhuiya](https://unsplash.com/@towfiqu999999?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: So like all other things I didn’t know how to do, I Googled
  prefs: []
  type: TYPE_NORMAL
- en: “How to make your own programming language”.
  prefs: []
  type: TYPE_NORMAL
- en: 'And well, the results were quite promising. I spent a long time going through
    each of them line-by-line, and picked up on the gist of it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s two types of languages: interpreted and compiled. Interpreted languages
    tend to be more simple to build, but are slower. On the other hand, compiled languages
    convert your code to machine code, and then execute it (compiled languages are
    generally faster).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The general process to building a language is:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Define the purpose and syntax of the language:** This was quite easy for
    me (I knew I wanted to build a math-related language), and to save myself some
    work and also make the language as high-level as possible, I decided to only keep
    a few (essential & useful) functions and just two variables, a function and a
    floating-point number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build a lexer & parser:** A lexer is the first component of any language,
    and places every word/phrase of your code into different categories (such as keywords,
    operators, comments etc.). But by itself, these **lexemes** are meaningless, and
    to make sense of them, one needs to build a parser. The parser ensures that the
    lexemes follow the language’s syntax, and places them into an AST (abstract syntax
    tree).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Executing code:** Each node in the AST represents one of the tokens collected
    by our original lexer, and this includes function names as well. Thus, running
    our AST allows us to execute the written code line-by-line; this is the general
    basis for an interpreted programming language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But a compiler requires a few extra steps; you need to use popular libraries
    such as [LLVM](https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html)
    and [libgccjit](https://gcc.gnu.org/onlinedocs/jit/), which convert the code to
    a compiled executable file.
  prefs: []
  type: TYPE_NORMAL
- en: Compiled or interpreted?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the one hand, I could create an interpreted language, which is quite challenging
    and requires me to devote a large amount of time and effort. On the other hand,
    I could create a compiled language, which is **even more challenging,** and requires
    me to devote even more time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: But the idea of building my own compiled language just seemed far too appealing,
    and I fell into the trap.
  prefs: []
  type: TYPE_NORMAL
- en: '***Advice: don’t do it.***'
  prefs: []
  type: TYPE_NORMAL
- en: While there are resources available on building a compiler using LLVM (definitely
    recommend watching the 100-second video on LLVM, both entertaining and somewhat
    educational), I quickly got lost in their documentation because of how complex
    it was.
  prefs: []
  type: TYPE_NORMAL
- en: I’d hedge a guess and say that you could probably learn the basics of Java faster
    than learning the basics of building a compiler with LLVM.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1775d933031de14e3c2886999ed3573a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Emile Perron](https://unsplash.com/@emilep?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A colossal waste of time (or was it)?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unfortunately for me, I spent over two months trying to hustle my way through
    first LLVM, and then libgccjit. The latter proved more promising and I even wrote
    code for the compiler, however I then faced a plethora of issues relating to setting
    up the libgccjit package; I went as far as to downloading the entire source code
    for it from GitHub and placing it in the same directory as my compiler code. But
    still, nothing seemed to work. I scrolled through countless Reddit and StackOverflow
    threads on it, but to no avail.
  prefs: []
  type: TYPE_NORMAL
- en: When StackOverflow can’t help you, you know something’s very wrong.
  prefs: []
  type: TYPE_NORMAL
- en: On the verge of giving up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, I had really hit a new low, because I hadn’t made an iota of
    progress in so long, I began devaluing all the work I’d done, such as building
    a lexer & parser from scratch, without the popular lex/yacc & flex/Bison tools.
    At this point, I asked myself “Should I throw it all in the (virtual) garbage
    can?”. I was tempted to say yes, but I don’t quit that easily, especially when
    it comes to coding-related projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'And so I went for a walk, cleared my head, and went back to the drawing board,
    this time with a different aim: Building an interpreted language.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally completing it.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once I decided that I would build an interpreter, I also made the difficult
    decision of ditching C and returning to Python. Under normal circumstances, it’s
    best to use lower-level languages to build interpreted languages, as their speed
    compensates for the slow interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: But I was in a desperate time, and those call for desperate measures.
  prefs: []
  type: TYPE_NORMAL
- en: After returning to India, I spent the next week in a state of sleeplessness,
    and quite literally worked 24 hours a day (around 21 if you don’t count breakfast,
    lunch and dinner — I’m a slow eater).
  prefs: []
  type: TYPE_NORMAL
- en: And what happened next is something that happened to me for the first time,
    and will likely never happen again — my code worked on the first attempt! No debugging,
    no more confusion.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I ran my source code, every single component: from the lexer, to the parser
    & the AST worked properly, and correctly executed each line of the code as it
    should have.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/283fa4577fcbe40820ca52b484957066.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [the blowup](https://unsplash.com/@theblowup?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Reflection & a final note
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The quote above may sound cliche, but that doesn’t detract from its validity;
    I faced far more failures than successes while building AdvAnalysis, but yet,
    I ended up on top.
  prefs: []
  type: TYPE_NORMAL
- en: While you could learn about things to be cognizant of when building your own
    programming language (such as compiled vs interpreted, the process to follow),
    the main takeaway I had (and hope you had as well), is that no matter how discouraging
    it may be to constantly encounter a cryptic error in your program, in the end,
    it always works as you expect it to, if only you have the ability to be patient
    & return to square one and follow a different approach.
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, as a fellow programming enthusiast, you probably already knew
    that. :)
  prefs: []
  type: TYPE_NORMAL
