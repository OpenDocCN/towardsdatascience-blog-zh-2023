["```py\npip install pandera \n```", "```py\nimport pandas as pd\nfrom pandas import Timestamp\nimport pandera as pa\nfrom pandera import Column, DataFrameSchema, Check, Index\n\nschema = DataFrameSchema({\n    \"name\": Column(str),\n    \"age\": Column(int, checks=pa.Check.ge(0)),  # age should be non-negative\n    \"email\": Column(str, checks=pa.Check.str_matches(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'))  # email format\n})\n```", "```py\n# Sample DataFrame\ndf = pd.DataFrame({\n    \"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"age\": [25, -5, 30],\n    \"email\": [\"alice@example.com\", \"bob@example\", \"charlie@example.com\"]\n})\n\n# Validate\nvalidated_df = schema(df)\n```", "```py\nSchemaError: <Schema Column(name=age, type=DataType(int64))> failed element-wise validator 0:\n<Check greater_than_or_equal_to: greater_than_or_equal_to(0)>\nfailure cases:\n   index  failure_case\n0      1            -5\n```", "```py\n@pa.check_input(schema)\ndef process_data(df: pd.DataFrame) -> pd.DataFrame:\n    # Some code to process the DataFrame\n    return df\n\nprocessed_df = process_data(df)\n```", "```py\n# Define the enhanced schema\nenhanced_schema = DataFrameSchema(\n    columns={\n        \"name\": Column(str),\n        \"age\": Column(int, checks=[Check.ge(0), Check.lt(100)]),\n        \"email\": Column(str, checks=[Check.str_matches(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$')]),\n        \"salary\": Column(float, checks=Check.in_range(30000, 150000)),\n        \"department\": Column(str, checks=Check.isin([\"HR\", \"Tech\", \"Marketing\", \"Sales\"])),\n        \"start_date\": Column(pd.Timestamp, checks=Check(lambda x: x < pd.Timestamp(\"today\"))),\n        \"performance_score\": Column(float, nullable=True)\n    },\n    index=Index(int, name=\"employee_id\")\n)\n\n# Custom check function\ndef salary_age_relation_check(df: pd.DataFrame) -> pd.DataFrame:\n    if not all(df[\"salary\"] / df[\"age\"] < 3000):\n        raise ValueError(\"Salary to age ratio check failed\")\n    return df\n\n# Function to process and validate data\ndef process_data(df: pd.DataFrame) -> pd.DataFrame:\n    # Apply custom check\n    df = salary_age_relation_check(df)\n\n    # Validate DataFrame with Pandera schema\n    return enhanced_schema.validate(df)\n```", "```py\ndf_example = pd.DataFrame({\n    \"employee_id\": [1, 2, 3],  \n    \"name\": [\"Alice\", \"Bob\", \"Charlie\"],  \n    \"age\": [25, 35, 45],  \n    \"email\": [\"alice@example.com\", \"bob@example.com\", \"charlie@example.com\"],  \n    \"salary\": [50000, 80000, 120000], \n    \"department\": [\"HR\", \"Tech\", \"Sales\"], \n    \"start_date\": [Timestamp(\"2022-01-01\"), Timestamp(\"2021-06-15\"), Timestamp(\"2020-12-20\")], \n    \"performance_score\": [4.5, 3.8, 4.2]  \n})\n\n# Make sure the employee_id column is the index\ndf_example.set_index(\"employee_id\", inplace=True)\n\n# Process and validate data\nprocessed_df = process_data(df_example)\n```", "```py\nSchemaError: expected series 'salary' to have type float64, got int64\n```", "```py\nfrom scipy.stats import ttest_1samp\n\n# Define the custom check for the salary column\ndef mean_salary_check(series: pd.Series, expected_mean: float = 75000, alpha: float = 0.05) -> bool:\n    stat, p_value = ttest_1samp(series.dropna(), expected_mean)\n    return p_value > alpha\n\nsalary_check = Check(mean_salary_check, element_wise=False, error=\"Mean salary check failed\")\n\n# Correctly update the checks for the salary column by specifying the column name\nenhanced_schema.columns[\"salary\"] = Column(float, checks=[Check.in_range(30000, 150000), salary_check], name=\"salary\")\n```", "```py\n# Change the salaries to exceede the expected mean of Â£75,000\ndf_example[\"salary\"] = df_example[\"salary\"] = [100000.0, 105000.0, 110000.0]\nvalidated_df = enhanced_schema(df_example)\n```", "```py\nSchemaError: <Schema Column(name=salary, type=DataType(float64))> failed series or dataframe validator 1:\n<Check mean_salary_check: Mean salary check failed>\n```"]