["```py\nfor x in range(grid.shape[0]):\n    for y in range(int(x==0), grid.shape[1]):\n        grid[x,y] *= (x*grid[x-1,y] + y*grid[x,y-1]) / (x + y)\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Set dimensions\nnx = 25\nny = 25\n\n# Create map\ngrid = np.ones((nx,ny))\nwx = nx//10 + 1\nwy = ny//10 + 1\ngrid[int(.3*nx):int(.3*nx)+wx,int(.1*ny):int(.1*ny)+wy] = 0\ngrid[int(.1*nx):int(.1*nx)+wx,int(.5*ny):int(.5*ny)+wy] = 0\ngrid[int(.6*nx):int(.6*nx)+wx,int(.6*ny):int(.6*ny)+wy] = 0\n\n# Display map\nplt.figure(\"Map\")\nplt.imshow(np.transpose(grid))\n\n# Compute visibility\nfor x in range(grid.shape[0]):\n    for y in range(int(x==0), grid.shape[1]):\n        grid[x,y] *= (x*grid[x-1,y] + y*grid[x,y-1]) / (x + y)\n\n# Display visibility\nplt.figure(\"Visibility\")\nplt.imshow(np.transpose(grid))\nplt.show()\n```", "```py\nnx = 225\nny = 225\n```", "```py\nfor x in range(grid.shape[0]):\n    for y in range(int(x==0), grid.shape[1]):\n        grid[x,y] *= (x*grid[x-1,y] + y*grid[x,y-1]) / (x + y)\ngrid[:] = (grid >= 0.5)\n```", "```py\n# Set viewpoint\nx0 = nx//2\ny0 = ny//2\n\n# Define visibility function\ndef visibility_from_corner(grid):\n    for x in range(grid.shape[0]):\n        for y in range(int(x==0), grid.shape[1]):\n            grid[x,y] *= (x*grid[x-1,y] + y*grid[x,y-1]) / (x + y)\n\n# Compute visibility\nvisibility_from_corner(grid[x0:,y0:])\nvisibility_from_corner(grid[x0::-1,y0:])\nvisibility_from_corner(grid[x0::-1,y0::-1])\nvisibility_from_corner(grid[x0:,y0::-1])\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Set dimensions\nnx = 25\nny = 25\n\n# Create map\ngrid = np.ones((nx,ny))\nwx = nx//10 + 1\nwy = ny//10 + 1\ngrid[int(.3*nx):int(.3*nx)+wx,int(.1*ny):int(.1*ny)+wy] = 0\ngrid[int(.1*nx):int(.1*nx)+wx,int(.5*ny):int(.5*ny)+wy] = 0\ngrid[int(.6*nx):int(.6*nx)+wx,int(.6*ny):int(.6*ny)+wy] = 0\n\n# Display map\nplt.figure(\"Map\")\nplt.imshow(np.transpose(grid))\n\n# Define visibility function\ndef visibility_within_cone(grid, u_direction, v_direction):\n    u = np.asarray(u_direction, dtype=int)\n    v = np.asarray(v_direction, dtype=int)\n    origin = np.array([0,0], dtype=int)\n    dims = np.asarray(grid.shape, dtype=int)\n    m = 0\n    k = 0\n    position = np.array([0,0], dtype=int)\n    while np.all(position < dims):\n        while np.all(position < dims):\n            if not np.all(position == 0):\n                pos = tuple(position)\n                pos_minus_u = tuple(np.maximum(origin, position - u))\n                pos_minus_v = tuple(np.maximum(origin, position - v))\n                grid[pos] *= (m*grid[pos_minus_u] + \n                              k*grid[pos_minus_v]) / (m + k)\n            k += 1\n            position += v\n        m += 1\n        k = 0\n        position = m*u\n\n# Compute visibility\nvisibility_within_cone(grid, [1,0], [0,1])\n\n# Display visibility\nplt.figure(\"Visibility\")\nplt.imshow(np.transpose(grid))\nplt.show()\n```", "```py\n# Compute visibility\nvisibility_within_cone(grid, [1,1], [1,0])\nvisibility_within_cone(grid, [1,1], [0,1])\n```", "```py\n# Compute visibility\nvisibility_within_cone(grid, [2,1], [1,0])\nvisibility_within_cone(grid, [2,1], [1,1])\nvisibility_within_cone(grid, [1,2], [1,1])\nvisibility_within_cone(grid, [1,2], [0,1])\n```"]