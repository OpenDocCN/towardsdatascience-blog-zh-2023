["```py\n# create the report\nfrom pandas_profiling import ProfileReport\nprofile = ProfileReport(df)\nprofile.to_file(os.path.join(folder,'bfro_reports_eda.html'))\n```", "```py\nimport folium\nfrom folium.plugins import HeatMap,MiniMap\n\n# data for plotting\nfilter_map = (df['latitude'].notna()) & (df['longitude'].notna())\ndf_map = df.loc[filter_map,['latitude','longitude','observed']].copy()\n\n# create the map\nheat_map = folium.Map(\n    location = [42,-97.37],\n    tiles = 'OpenStreetMap',\n    zoom_start = 4,\n    control_scale = True\n)\n\n# add the heat to the map\nHeatMap(\n    data = df_map[['latitude','longitude','observed']],\n    min_opacity = 0.1\n).add_to(heat_map)\n\n# add mini map\nheat_map.add_child(MiniMap(position = 'bottomleft',toggle_display = True)) \n```", "```py\n# function to do clustering\ndef get_cluster(data,cluster_size = 20,season = None):\n\n    # get data\n    if season is not None:\n        d = data.loc[data['season'] == season,:].copy()\n    else:\n        d = data.copy()\n\n    # cluster\n    cluster = OPTICS(\n        min_cluster_size = cluster_size,\n        metric = 'haversine',\n        algorithm = 'ball_tree',\n        n_jobs = -1\n    )\n\n    cluster.fit(\n        np.radians([x for x in zip(d['latitude'],d['longitude'])])\n    )\n\n    # get cluster centroids\n    d['cluster'] = pd.Series(cluster.labels_)\n    fields = ['latitude','longitude']\n    d_agg = d.loc[d['cluster'] >= 0,:].groupby('cluster')[fields].mean()\n\n    return d_agg\n```", "```py\nfrom wordcloud import WordCloud\n\n# get text\ntext = df.loc[:,'location_details'].str.cat(sep = ' ').lower()\n\n# cloud\nwordcloud = WordCloud(scale = 5,background_color = 'white').generate(text)\n\n# show\nplt.figure(figsize = (20,7.5))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.show()\n```"]