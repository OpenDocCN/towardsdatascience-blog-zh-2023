- en: Getting started with JAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/getting-started-with-jax-a6f8d8d0e20?source=collection_archive---------15-----------------------#2023-07-07](https://towardsdatascience.com/getting-started-with-jax-a6f8d8d0e20?source=collection_archive---------15-----------------------#2023-07-07)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Powering the future of high-performance numerical computing and ML research
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pierpaoloippolito28.medium.com/?source=post_page-----a6f8d8d0e20--------------------------------)[![Pier
    Paolo Ippolito](../Images/981abb84149adab275473b76bdbde66f.png)](https://pierpaoloippolito28.medium.com/?source=post_page-----a6f8d8d0e20--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a6f8d8d0e20--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a6f8d8d0e20--------------------------------)
    [Pier Paolo Ippolito](https://pierpaoloippolito28.medium.com/?source=post_page-----a6f8d8d0e20--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb8391a6a5f1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-jax-a6f8d8d0e20&user=Pier+Paolo+Ippolito&userId=b8391a6a5f1a&source=post_page-b8391a6a5f1a----a6f8d8d0e20---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a6f8d8d0e20--------------------------------)
    ·5 min read·Jul 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa6f8d8d0e20&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-jax-a6f8d8d0e20&user=Pier+Paolo+Ippolito&userId=b8391a6a5f1a&source=-----a6f8d8d0e20---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa6f8d8d0e20&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-jax-a6f8d8d0e20&source=-----a6f8d8d0e20---------------------bookmark_footer-----------)![](../Images/17e806ec59ab7110eb1eb8acbdca9117.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Lance Asper](https://unsplash.com/@lance_asper?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JAX is a Python library developed by Google to perform high-performance numerical
    computing on any type of device (CPU, GPU, TPU, etc…). One of the main applications
    of JAX is Machine Learning and Deep Learning research development, although the
    library is mainly designed to provide all the necessary capabilities to perform
    general-purpose scientific computing tasks (highly dimensional matrices operations,
    etc…).
  prefs: []
  type: TYPE_NORMAL
- en: Considering the focus specifically on high-performance computing, JAX has been
    designed to be extremely fast being built on top of XLA (Accelerated Linear Algebra).
    XLA is in fact a compiler designed to speed up linear algebra operations and can
    be used to work behind also other frameworks such as TensorFlow and Pytorch. Additionally,
    JAX arrays have been designed to follow the same principles as Numpy, making it
    really easy to migrate old Numpy code to JAX and take advantage of performance
    speed-ups through GPUs and TPUs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main characteristics of JAX are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Just in Time (JIT) compilation**: JIT and accelerated hardware are what can
    enable JAX to be much faster than plain Numpy. Using the *jit()* function can
    be possible to compile and cache…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
