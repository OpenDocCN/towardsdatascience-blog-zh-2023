- en: 'Supercharged pandas: Encrypting Excel Files Written from DataFrames'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/supercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b?source=collection_archive---------7-----------------------#2023-06-12](https://towardsdatascience.com/supercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b?source=collection_archive---------7-----------------------#2023-06-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introducing an ExcelHelper class which allows you to encrypt Excel files with
    a strong password or a password of your choice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)[![Ji
    Wei Liew](../Images/f1b7267530b9a97106e6464b7b45ed85.png)](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)
    [Ji Wei Liew](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbf5390a70cc8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&user=Ji+Wei+Liew&userId=bf5390a70cc8&source=post_page-bf5390a70cc8----1251b585145b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)
    ·6 min read·Jun 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1251b585145b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&user=Ji+Wei+Liew&userId=bf5390a70cc8&source=-----1251b585145b---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1251b585145b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&source=-----1251b585145b---------------------bookmark_footer-----------)![](../Images/48f2ccc861b8edbdc2f949971790e150.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Writing to Excel and Encrypting it (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I will be sharing how to incorporate an `ExcelHelper` class
    to open and encrypt the Excel file after writing dataframes to Excel. I’ve included
    this encryption capability in the `to_excelp` function in my previous [article](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3).
  prefs: []
  type: TYPE_NORMAL
- en: '[](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3?source=post_page-----1251b585145b--------------------------------)
    [## Supercharged pandas: Reading from and Writing to Excel'
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing .read_excel & .to_excel methods to allow you to focus on data exploration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3?source=post_page-----1251b585145b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: For data scientists and machine learning enthusiasts who are reading this, you
    are likely to find it helpful as it will speed up your work when exporting dataframes
    to Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a recent project, I had to analyze data and prepare statistics for a few
    people. As the data contained sensitive information, there was a need to password-protect
    the files. This is very much aligned with my skill set and if you have read my
    previous article, within `pypo.py`, I already have a `to_excelp` function which
    opens the Excel file after it has been created by the `df.to_excel()` method.
    While this is worked well for me, it seems like a good time to relook at how it
    was implemented and also add the capability to password-protect the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Opening and Encrypting the Excel file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating a strong password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Full code [here](https://gist.github.com/jiweiliew/f07e24861ea42fd17caebf8566d8c2ac).
  prefs: []
  type: TYPE_NORMAL
- en: Part 1 — Opening and Encrypting the Excel File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with python and pandas, there are good reasons to open the Excel
    file, for example, visually inspecting it during testing, or formatting it before
    sending to stakeholders. If there is an additional need to encrypt the Excel file,
    then there would be 3 scenarios to handle: *open-only*, *encrypt-only*, *open
    & encrypt*. If we are neither opening nor encrypting the Excel file, then nothing
    needs to be done since `df.to_excel()` would suffice.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ExcelHelper` is a class written to launch Excel (the application) and then
    open the workbook based on the `path` provided. Programmatically, this is a 2-step
    process. Most people never realize it because the Excel application and workbook
    launches together when you double-click an Excel file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initialize the ExcelHelper class**'
  prefs: []
  type: TYPE_NORMAL
- en: '`__init__(self, launch=True, encrypt=False, password=None, length=20, quit_=True)`
    This is the initialization call for the `ExcelHelper`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `launch` equals to `True`, the workbook is displayed after encryption is
    done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `encrypt` equals to `True`, the `self._encrypt()` method, which will be explained
    later, is called.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password` allows the user to input a preferred password, otherwise it will
    automatically suggest a strong password with `length` number of characters, where
    the maximum length is 255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open workbook**'
  prefs: []
  type: TYPE_NORMAL
- en: '`_open_wb(self, path, visible=False)` converts the given path to an absolute
    path and then opens it. Converting a path to an absolute path is necessary otherwise
    applications dispatched by `win32com.client` cannot find the file. (Previously,
    I used a `try-except` block to prepend the path with the current working directory
    but that is unnecessarily verbose and takes a bit of time to really understand
    what one is trying to do.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visible` controls whether the application is visible to the user. Generally,
    it makes sense to show the application only after the encryption is completed.
    So if we are launching and encrypting, we should set `visible=True` only after
    `self._encrypt()` is done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encrypt Excel**'
  prefs: []
  type: TYPE_NORMAL
- en: '`_encrypt(self, visible=False)` encrypts the Excel workbook and then displays
    the application by setting the `self.xl.Visible` attribute after the encryption
    is completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting `self.xl.DisplayAlerts` to `True` is important otherwise the launched
    Excel file will not give any alerts (case in point, if you press Ctrl+F and try
    to find some gibberish and there would be no prompt 😱; it happened for me and
    I was really confused!).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute method**'
  prefs: []
  type: TYPE_NORMAL
- en: '`execute(self, path, launch, encrypt, quit_)` handles the 3 scenarios described
    above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quit_` argument closes the Excel application (trailing underscore is a convention
    to denote that `quit` is a reserved keyword in python). When `ExcelHelper` is
    initiated, if `launch=False`, the Excel application runs in the background and
    the Excel file is `opened`. If the user now double-clicks on the Excel file, he
    will be prompted that it can only be open in read-only mode. It is quite difficult
    for non-technical user to close the file; the workaround would be to open Task
    manager, select the Excel program and then End Task. Therefore, there is a need
    to call `.Quit()` to terminate the Excel application. We could have just closed
    the workbook, but perhaps there is no need to handle this so finely for now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 2 — Generating a strong password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initially, I was using `from cryptography.fernet import Fernet; Fernet.generate_key()`
    to generate random passwords. While several users were pleasantly surprised by
    the length and randomness of the password, I did not like it very much because
    it is a bit too long and does not contain a variety of punctuation. I googled
    and found a better [approach](https://stackoverflow.com/a/39596292/8350440) on
    StackOverflow. (I am always very impressed by how easily one can get very high
    quality answers on StackOverflow. All the tough work has already been done by
    all the giants, all we need to do is to search for it, copy, paste, and make small
    tweaks (e.g. change variable names).) The function is quite straightforward and
    rather self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Just as everything was going a bit too smoothly, while testing my code, I noticed
    that occasionally the passwords cannot be used to open the file! I was really
    puzzled. It took a bit of trial-and-error and I began to suspect that there could
    be some characters which are not *suitable* as passwords because this phenomenon
    only occurred when passwords contain 2 backslashes `\\`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a bit of background to allow you to appreciate the situation: I use
    Powershell and Notepad++, and my code prints the passwords to `stdout`. Next,
    I highlight the password printed on Powershell and then paste it when Excel prompts
    me to enter the password. So the issue is that `\` is an escape character, hence
    the first `\` should be ignored when I enter this as the password. It is troublesome
    to handle and for the purpose of passwords, I can do with one less character.
    Hence, all I did was slice out backslash in `string.punctuation`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Part 3 — Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since there is almost no value-add to instantiate an `ExcelHelper` object if
    you are not launching or encrypting the Excel file, one should start with `if
    launch or encrypt:`. Next, is merely passing the keyword arguments from `to_excelp`
    to `ExcelHelper` and returning the object and `password`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you are writing dataframes to several different Excel files by calling this
    function, I would recommend to store the results in a list of tuples. You can
    subsequently iterate over this list of tuples to get the path to the Excel files
    and their passwords. Storing the object might be useful in future, especially
    if you intend to add more functionalities to `ExcelHelper`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`ExcelHelper` can also be added to other your existing scripts too.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Revisiting old code written by myself is like a walk down memory lane which
    reveals how little I knew back then. Although I am very much embarrassed by it,
    I am glad to know that I have progressed since then.
  prefs: []
  type: TYPE_NORMAL
- en: “If you’re not embarrassed by your old code then you aren’t progressing as a
    programmer.” [Anonymous]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Writing these little classes, functions takes time but there are immense benefits
    for having them as it automates the mechanical and not-so-fun parts of work and
    allows one to focus on the important tasks. (Imagine having to think about passwords
    with uppercase, lowercase, numbers and punctuation and storing them in a file
    all the time.)
  prefs: []
  type: TYPE_NORMAL
