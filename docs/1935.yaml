- en: 'How to Write Conditional Statements in R: Four Methods'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 R 中编写条件语句：四种方法
- en: 原文：[https://towardsdatascience.com/how-to-write-conditional-statements-in-r-four-methods-f9bedbae0683?source=collection_archive---------10-----------------------#2023-06-13](https://towardsdatascience.com/how-to-write-conditional-statements-in-r-four-methods-f9bedbae0683?source=collection_archive---------10-----------------------#2023-06-13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-write-conditional-statements-in-r-four-methods-f9bedbae0683?source=collection_archive---------10-----------------------#2023-06-13](https://towardsdatascience.com/how-to-write-conditional-statements-in-r-four-methods-f9bedbae0683?source=collection_archive---------10-----------------------#2023-06-13)
- en: Learn powerful ways to go beyond if-else statements and level up your R code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解超越 if-else 语句的强大方法，提高你的 R 代码水平
- en: '[](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F39501aa8ce39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&user=Rory+Spanton&userId=39501aa8ce39&source=post_page-39501aa8ce39----f9bedbae0683---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)
    ·8 min read·Jun 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff9bedbae0683&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&user=Rory+Spanton&userId=39501aa8ce39&source=-----f9bedbae0683---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F39501aa8ce39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&user=Rory+Spanton&userId=39501aa8ce39&source=post_page-39501aa8ce39----f9bedbae0683---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)
    ·8分钟阅读·2023年6月13日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff9bedbae0683&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&user=Rory+Spanton&userId=39501aa8ce39&source=-----f9bedbae0683---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff9bedbae0683&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&source=-----f9bedbae0683---------------------bookmark_footer-----------)![](../Images/b283762681b9c2ea398ae7af7ec6bf40.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff9bedbae0683&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&source=-----f9bedbae0683---------------------bookmark_footer-----------)![](../Images/b283762681b9c2ea398ae7af7ec6bf40.png)'
- en: Photo by [Caleb Jones](https://unsplash.com/@gcalebjones?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Caleb Jones](https://unsplash.com/@gcalebjones?utm_source=medium&utm_medium=referral)
    提供，刊登于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: You won’t get far in programming without conditional statements.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编程中离不开条件语句。
- en: Conditional statements execute code based on the result of a true-or-false condition.
    They’re an essential part of coding, and this is especially true in R. Whether
    you’re using R for data analysis, machine learning, software development, or something
    else, conditional statements have infinite uses.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句根据真假条件的结果执行代码。它们是编码的基本部分，这在 R 中尤为重要。无论你是使用 R 进行数据分析、机器学习、软件开发还是其他用途，条件语句都有无限的应用。
- en: But, most beginners in R don’t realize that there are many ways to write them.
    Many people learn basic if-else statements and stop there. But, there are often
    neater, more efficient ways to write conditional statements. Advanced R programmers
    know each of these techniques and when to use them. So, how can you learn to do
    the same?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，大多数 R 的初学者并没有意识到有很多种方式来编写这些语句。许多人学习基本的 if-else 语句后就停下了。但通常有更简洁、更高效的方式来编写条件语句。高级
    R 程序员知道这些技巧的每一种及其使用时机。那么，你如何能学会这样做呢？
- en: In this article, we’ll take a look at four different ways to write conditional
    statements in R. We’ll also cover the strengths and limitations of each technique,
    and when to use each one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨四种不同的方式来编写 R 中的条件语句。我们还将介绍每种技术的优缺点，以及何时使用每种技术。
- en: How to write an if-else statement in R
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 R 中编写 if-else 语句
- en: The most straightforward way of writing conditional statements in R is by using
    the `if` and `else` keywords. This will be most familiar if you already know another
    programming language, and it’s often the technique that new R users learn first.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中编写条件语句最直接的方法是使用 `if` 和 `else` 关键字。如果你已经了解另一种编程语言，这将是最熟悉的方式，而且通常是新 R 用户最先学习的技术。
- en: 'A standard if statement in R looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 if 语句在 R 中如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `condition` is a logical expression that returns either `TRUE` or `FALSE`.
    If the condition returns `TRUE`, any code inside the curly braces is executed.
    If it returns `FALSE`, the code inside the brackets is not executed, and R moves
    on to the next line of code in the script.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`condition` 是一个逻辑表达式，它返回 `TRUE` 或 `FALSE`。如果条件返回 `TRUE`，大括号内的任何代码都会被执行。如果返回
    `FALSE`，大括号内的代码不会被执行，R 将继续执行脚本中的下一行代码。
- en: To see how this works in practice, we can take the following example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解实际操作，我们可以考虑以下示例。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we have a variable that contains an age. The if statement then evaluates
    whether the value of `age` is greater than or equal to 18\. This is true in this
    case, so the variable `age_group` takes a value of `“adult”`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个包含年龄的变量。if 语句接着评估 `age` 的值是否大于或等于 18。由于在这种情况下成立，因此变量 `age_group` 的值为
    `“adult”`。
- en: This is an easy way of checking a simple condition and doing something if it’s
    true. But what if we want our statement to run some code if the condition is false?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种检查简单条件并在条件为真时执行某些操作的简单方法。但是如果我们希望语句在条件为假时运行一些代码呢？
- en: If else statements are an extension of the basic if statement. To understand
    them, we can add to our previous example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: If else 语句是基本 if 语句的扩展。要理解它们，我们可以在之前的例子基础上进行扩展。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code works just like the last example, with one exception. Instead of moving
    on when the condition is `FALSE`, the code inside the curly brackets after `else`
    gets executed. This means that if `age` is greater than or equal to 18, `age_group`is
    assigned a value of `“adult”`. If not, `age_group` is set to `“child”`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的工作原理与上一个示例类似，有一个例外。与条件为 `FALSE` 时继续执行不同，`else` 后面的大括号内的代码会被执行。这意味着如果 `age`
    大于或等于 18，`age_group` 被赋值为 `“adult”`。否则，`age_group` 被设置为 `“child”`。
- en: If-else statements are a straightforward way of controlling the code in an R
    script. They’re easily understood, can be extended to take many conditions, and
    can execute complex code that’s many lines long.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: If-else 语句是控制 R 脚本中代码的直接方式。它们易于理解，可以扩展到处理多个条件，并且能够执行许多行的复杂代码。
- en: But, if-else statements can take up a lot of space. For simple expressions like
    the one above, there are other ways of doing exactly the same operation without
    using five lines of code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，if-else 语句可能占用很多空间。对于像上面那样的简单表达式，还有其他方式可以完成完全相同的操作，而不需要五行代码。
- en: In fact, it’s possible to write if-else statements using one line of code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，可以使用一行代码编写 if-else 语句。
- en: Inline conditional statements in R
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 中的内联条件语句
- en: Inline conditional statements are a neat way of expressing “if-else” logic in
    a single line of code. There are a couple of ways to write them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 内联条件语句是一种在单行代码中表达“if-else”逻辑的简洁方式。有几种方法可以编写它们。
- en: Inline if else statement
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联 if else 语句
- en: 'First, it’s possible to write a simple inline statement using the `if` and
    `else` keywords. This takes the form below:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，可以使用 `if` 和 `else` 关键字编写一个简单的内联语句。其形式如下：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This statement works the same way as the previous example. The only difference
    is that now, we’ve condensed the phrasing to fit on one line. If the condition
    is `TRUE`, the value of `age_group` gets updated to whatever is before the `else`
    keyword — in this case, `“adult”`. If it were `FALSE`, `age_group` would be assigned
    whatever comes after `else`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句的工作方式与之前的示例相同。唯一的不同是现在我们将短语浓缩到一行。如果条件为 `TRUE`，`age_group` 的值会更新为 `else`
    关键字之前的值——在这种情况下是 `“adult”`。如果条件为 `FALSE`，`age_group` 将被分配 `else` 之后的值。
- en: The big difference here is that we now assign the result of the whole conditional
    statement to the variable `age_group`. This improves on the repetitive phrasing
    in the standard if-else example, where we had to write this assignment twice.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的最大区别在于我们现在将整个条件语句的结果分配给变量 `age_group`。这改进了标准 if-else 示例中的重复短语，在那里我们需要写两次这种分配。
- en: Base-R ifelse function
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Base-R ifelse 函数
- en: If you prefer, you can use the `ifelse` function instead. The code below uses
    this function to execute the same logic as the previous examples.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以使用 `ifelse` 函数。下面的代码使用该函数执行与之前示例相同的逻辑。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `ifelse` function takes three arguments. First, comes the condition, then
    a value to return if the condition is true, and a value to return if the condition
    is false.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ifelse` 函数接受三个参数。首先是条件，然后是条件为真时返回的值，以及条件为假时返回的值。'
- en: This is a clean, straightforward way of writing a short conditional statement.
    It also has another advantage; it’s vectorized.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简洁、直接的编写简短条件语句的方法。它还有另一个优点；它是矢量化的。
- en: '[](/make-your-r-code-10x-faster-vectorization-explained-in-3-minutes-9eb4cdd7a49e?source=post_page-----f9bedbae0683--------------------------------)
    [## Make Your R Code 10x Faster: Vectorization Explained in 3 Minutes'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/make-your-r-code-10x-faster-vectorization-explained-in-3-minutes-9eb4cdd7a49e?source=post_page-----f9bedbae0683--------------------------------)
    [## 让你的 R 代码快10倍：3分钟解释矢量化'
- en: Say goodbye to slow, messy loops
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向慢速、杂乱的循环说再见
- en: towardsdatascience.com](/make-your-r-code-10x-faster-vectorization-explained-in-3-minutes-9eb4cdd7a49e?source=post_page-----f9bedbae0683--------------------------------)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/make-your-r-code-10x-faster-vectorization-explained-in-3-minutes-9eb4cdd7a49e?source=post_page-----f9bedbae0683--------------------------------)'
- en: Vectorization is an important concept in R. If a function is vectorized, it
    automatically applies to multiple values instead of just one. To see an example
    with the `ifelse` function, let’s assign more values to our variable `age`, and
    run the code again.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量化是 R 中一个重要的概念。如果一个函数是矢量化的，它会自动应用于多个值，而不仅仅是一个。要查看 `ifelse` 函数的示例，我们可以给变量 `age`
    分配更多的值，然后再次运行代码。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `ifelse` function automatically evaluates all the values in `age`, returning
    a sequence of corresponding outputs. This makes `ifelse` a clean way of evaluating
    lots of simple conditions without needing slow, messy loops.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`ifelse` 函数会自动评估 `age` 中的所有值，返回一系列相应的输出。这使得 `ifelse` 成为评估大量简单条件的一种简洁方式，而不需要慢速、杂乱的循环。'
- en: Conditional indexing in R
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R中的条件索引
- en: Although `ifelse` can evaluate many inputs easily, there are other ways to do
    this.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 `ifelse` 可以轻松地评估许多输入，但还有其他方法可以实现这一点。
- en: '[Indexing](https://rspatial.org/intr/4-indexing.html) allows R programmers
    to access specific parts of a data structure that contains many values. For example,
    if we wanted to get the third element in the vector `age` from the last example,
    we could index `age` with 3 inside square brackets:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[索引](https://rspatial.org/intr/4-indexing.html) 允许 R 程序员访问包含多个值的数据结构的特定部分。例如，如果我们想获取上一个示例中向量
    `age` 的第三个元素，我们可以在方括号内用 3 对 `age` 进行索引：'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It’s most common to use numbers to index values with certain positions, like
    in the code above. But, many beginner R programmers don’t know that you can also
    use logical conditions when indexing. This opens up all sorts of possibilities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数字来索引具有特定位置的值是最常见的，如上面的代码所示。但是，许多初学者 R 程序员不知道你也可以在索引时使用逻辑条件。这开启了各种可能性。
- en: Let’s create some example data to illustrate some of these options. This includes
    some information about users, such as age, as in the previous examples. But, rather
    than being stored in a vector, each user’s information is stored row-wise in a
    tibble. This is the kind of data structure you’d be likely to see if dealing with
    user data in a professional setting, so it’s useful to know how to apply conditional
    logic to it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些示例数据来说明这些选项。这些数据包含关于用户的信息，如年龄，与之前的示例类似。但是，与存储在向量中的不同，每个用户的信息是按行存储在 tibble
    中的。这是一种你在处理专业环境中的用户数据时可能会遇到的数据结构，因此了解如何应用条件逻辑是有用的。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/bd51b1e44f5ba2880f7b1ad829f00196.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd51b1e44f5ba2880f7b1ad829f00196.png)'
- en: The data created by the code above.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建的数据。
- en: Tibbles and data frames are made up of vectors, which means we can index them
    in the same way. This allows us to do all sorts of things.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Tibbles 和数据框是由向量组成的，这意味着我们可以用相同的方式对其进行索引。这使我们能够做各种事情。
- en: Extracting values in a column based on a condition
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据条件提取列中的值
- en: Here’s some code that extracts any values of the `user_id` column where the
    user’s age is under 18.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有段代码提取了 `user_id` 列中用户年龄低于 18 岁的所有值。
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Replacing values in a column based on a condition
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据条件替换列中的值
- en: Here’s how to recode all the “UK” rows in the region column as “EU”.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何将区域列中的所有“UK”行重新编码为“EU”。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/1ecdbc0b2b4b08bc9d5faf1985d41d51.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ecdbc0b2b4b08bc9d5faf1985d41d51.png)'
- en: The result of the code above, where the “UK” region values have been replaced
    with “EU”.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的结果是，“UK”区域值已被替换为“EU”。
- en: Filtering a dataset with conditional indexing
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用条件索引过滤数据集
- en: We can even use conditional subsetting to filter the whole dataset. Here’s a
    method of filtering all the rows where the region is “USA”. Note that after the
    logical condition here, we include a comma to tell R that we’re indexing by row.
    If we wanted to filter by column, we could add a condition after the comma.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用条件子集来过滤整个数据集。这是一种过滤所有“USA”区域行的方法。请注意，在这里的逻辑条件后，我们添加了一个逗号，以告诉 R 我们按行索引。如果我们想按列过滤，可以在逗号后添加一个条件。
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/bc64f468b7e9d5ce61cf06e353f98cb0.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc64f468b7e9d5ce61cf06e353f98cb0.png)'
- en: The result of the code above.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的结果。
- en: These are just a few applications of conditional indexing in R. If you need
    to do a quick conditional operation on data, chances are there’s a one-line solution
    for it using this method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是 R 中条件索引的一些应用。如果你需要对数据进行快速的条件操作，这种方法很可能有一个一行解决方案。
- en: Tidyverse case_when function
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tidyverse case_when 函数
- en: The `case_when` function is from the tidyverse family of packages. It’s another
    way of applying conditional statements across a set of many values and is once
    again useful when working with datasets.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`case_when` 函数来自 tidyverse 包家族。这是另一种在多个值集上应用条件语句的方法，在处理数据集时再次显示出其重要性。'
- en: We can use the data from the last example to show how to create a new column
    based on conditional statements with `case_when`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用最后一个示例中的数据来展示如何使用 `case_when` 根据条件语句创建新列。
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/84c693816e721ec506de46e82034c750.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84c693816e721ec506de46e82034c750.png)'
- en: The result of the code above, with the new column “drinking_age”.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的结果是，包含新列“drinking_age”。
- en: This code determines whether our site users are legally allowed to drink alcohol
    based on their age and location. Here, each condition is on a different line in
    the `case_when` statement. If the condition is true, we can return a value after
    the tilde (~) symbol — in this case, `TRUE`. If neither of the conditions are
    satisfied, the value returned is specified by the `.default` setting. All the
    values are stored in a new column, `drinking_age`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码根据用户的年龄和地点确定我们网站用户是否被法律允许饮酒。这里，每个条件都在 `case_when` 语句中的不同一行。如果条件为真，我们可以在波浪符号
    (~) 后返回一个值——在这个例子中是 `TRUE`。如果没有满足任何条件，返回的值由 `.default` 设置指定。所有值都存储在一个新的列 `drinking_age`
    中。
- en: 'If this seems a bit unfamiliar, here’s the equivalent if else statement:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这看起来有点陌生，这里是等效的 if else 语句：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Compared with the code above, it’s easy to see that `case_when` provides yet
    another way of implementing conditional statements that is more concise than the
    if-else statement, while being just as powerful. It’s now my go-to for creating
    new columns based on complex logic or multiple conditions. For tidyverse users,
    it’s a must-adopt feature.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述代码相比，很容易看出 `case_when` 提供了另一种实现条件语句的方式，这种方式比 if-else 语句更简洁，同时同样强大。它现在是我在基于复杂逻辑或多个条件创建新列时的首选。对于
    tidyverse 用户来说，这是一个必须采用的功能。
- en: When to use different kinds of conditional statements
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用不同类型的条件语句
- en: The methods I’ve covered only truly start to shine when you put them to work
    in your own code. Only by playing around with new approaches and getting comfortable
    with them will you reap their full benefits and achieve R programming fluency.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我所介绍的方法只有在你将它们应用到自己的代码中时才会真正展现出光彩。只有通过尝试新的方法并使之变得熟练，你才能充分发挥它们的好处，并实现 R 编程的流畅性。
- en: So, when should you use each type of conditional statement?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么时候应该使用每种类型的条件语句呢？
- en: As with any choice between approaches in programming, there isn’t a straight
    answer. That said, here are some rough guidelines I use to help me choose between
    different ways of writing conditional statements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与编程中的任何方法选择一样，没有绝对的答案。不过，这里有一些我用来帮助我选择不同写法的粗略指南。
- en: If I’m working on a problem that requires lots of complex, multi-line code to
    get executed upon certain conditions, I often prefer if-else statements. Using
    other methods often gets messy and hard to maintain in these situations.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我在解决一个需要在特定条件下执行大量复杂的多行代码的问题时，我通常会选择 if-else 语句。在这些情况下，使用其他方法往往会变得混乱且难以维护。
- en: For problems with simpler conditions and shorter code chunks to return, I like
    inline if-else statements. There’s no point in making a straightforward solution
    longer than it needs to be!
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于条件更简单且返回的代码块较短的问题，我喜欢使用内联的 if-else 语句。没有必要让一个简单的解决方案变得比需要的更长！
- en: If working with datasets or creating columns based on conditions, I use `case_when`.
    It works well with the other tidyverse functions I use and is easy to debug and
    maintain.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在处理数据集或基于条件创建列时，我使用 `case_when`。它与我使用的其他 tidyverse 函数配合良好，且易于调试和维护。
- en: If I’m working with datasets and don’t want to load extra packages, I’ll use
    conditional indexing. It doesn’t need any extra dependencies and often runs fast
    too.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我在处理数据集并且不想加载额外的包，我会使用条件索引。这不需要任何额外的依赖项，且通常运行得很快。
- en: My advice? Have a play around with each technique and see what sticks for you.
    At the very least, you might pick up one new way of making your code better.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议？尝试一下每种技术，看看哪种适合你。至少，你可能会学到一种新的改进代码的方法。
- en: So, **if** you liked this article, why not share your favourite conditional
    statement? **Else…** thanks for staying until the end anyway!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，**如果**你喜欢这篇文章，为什么不分享一下你最喜欢的条件语句呢？**否则……** 无论如何，感谢你看到最后！
