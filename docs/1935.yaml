- en: 'How to Write Conditional Statements in R: Four Methods'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-write-conditional-statements-in-r-four-methods-f9bedbae0683?source=collection_archive---------10-----------------------#2023-06-13](https://towardsdatascience.com/how-to-write-conditional-statements-in-r-four-methods-f9bedbae0683?source=collection_archive---------10-----------------------#2023-06-13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn powerful ways to go beyond if-else statements and level up your R code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----f9bedbae0683--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F39501aa8ce39&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&user=Rory+Spanton&userId=39501aa8ce39&source=post_page-39501aa8ce39----f9bedbae0683---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f9bedbae0683--------------------------------)
    ·8 min read·Jun 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff9bedbae0683&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&user=Rory+Spanton&userId=39501aa8ce39&source=-----f9bedbae0683---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff9bedbae0683&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-conditional-statements-in-r-four-methods-f9bedbae0683&source=-----f9bedbae0683---------------------bookmark_footer-----------)![](../Images/b283762681b9c2ea398ae7af7ec6bf40.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Caleb Jones](https://unsplash.com/@gcalebjones?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: You won’t get far in programming without conditional statements.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional statements execute code based on the result of a true-or-false condition.
    They’re an essential part of coding, and this is especially true in R. Whether
    you’re using R for data analysis, machine learning, software development, or something
    else, conditional statements have infinite uses.
  prefs: []
  type: TYPE_NORMAL
- en: But, most beginners in R don’t realize that there are many ways to write them.
    Many people learn basic if-else statements and stop there. But, there are often
    neater, more efficient ways to write conditional statements. Advanced R programmers
    know each of these techniques and when to use them. So, how can you learn to do
    the same?
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll take a look at four different ways to write conditional
    statements in R. We’ll also cover the strengths and limitations of each technique,
    and when to use each one.
  prefs: []
  type: TYPE_NORMAL
- en: How to write an if-else statement in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most straightforward way of writing conditional statements in R is by using
    the `if` and `else` keywords. This will be most familiar if you already know another
    programming language, and it’s often the technique that new R users learn first.
  prefs: []
  type: TYPE_NORMAL
- en: 'A standard if statement in R looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `condition` is a logical expression that returns either `TRUE` or `FALSE`.
    If the condition returns `TRUE`, any code inside the curly braces is executed.
    If it returns `FALSE`, the code inside the brackets is not executed, and R moves
    on to the next line of code in the script.
  prefs: []
  type: TYPE_NORMAL
- en: To see how this works in practice, we can take the following example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a variable that contains an age. The if statement then evaluates
    whether the value of `age` is greater than or equal to 18\. This is true in this
    case, so the variable `age_group` takes a value of `“adult”`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an easy way of checking a simple condition and doing something if it’s
    true. But what if we want our statement to run some code if the condition is false?
  prefs: []
  type: TYPE_NORMAL
- en: If else statements are an extension of the basic if statement. To understand
    them, we can add to our previous example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code works just like the last example, with one exception. Instead of moving
    on when the condition is `FALSE`, the code inside the curly brackets after `else`
    gets executed. This means that if `age` is greater than or equal to 18, `age_group`is
    assigned a value of `“adult”`. If not, `age_group` is set to `“child”`.
  prefs: []
  type: TYPE_NORMAL
- en: If-else statements are a straightforward way of controlling the code in an R
    script. They’re easily understood, can be extended to take many conditions, and
    can execute complex code that’s many lines long.
  prefs: []
  type: TYPE_NORMAL
- en: But, if-else statements can take up a lot of space. For simple expressions like
    the one above, there are other ways of doing exactly the same operation without
    using five lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it’s possible to write if-else statements using one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Inline conditional statements in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inline conditional statements are a neat way of expressing “if-else” logic in
    a single line of code. There are a couple of ways to write them.
  prefs: []
  type: TYPE_NORMAL
- en: Inline if else statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, it’s possible to write a simple inline statement using the `if` and
    `else` keywords. This takes the form below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This statement works the same way as the previous example. The only difference
    is that now, we’ve condensed the phrasing to fit on one line. If the condition
    is `TRUE`, the value of `age_group` gets updated to whatever is before the `else`
    keyword — in this case, `“adult”`. If it were `FALSE`, `age_group` would be assigned
    whatever comes after `else`.
  prefs: []
  type: TYPE_NORMAL
- en: The big difference here is that we now assign the result of the whole conditional
    statement to the variable `age_group`. This improves on the repetitive phrasing
    in the standard if-else example, where we had to write this assignment twice.
  prefs: []
  type: TYPE_NORMAL
- en: Base-R ifelse function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you prefer, you can use the `ifelse` function instead. The code below uses
    this function to execute the same logic as the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `ifelse` function takes three arguments. First, comes the condition, then
    a value to return if the condition is true, and a value to return if the condition
    is false.
  prefs: []
  type: TYPE_NORMAL
- en: This is a clean, straightforward way of writing a short conditional statement.
    It also has another advantage; it’s vectorized.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/make-your-r-code-10x-faster-vectorization-explained-in-3-minutes-9eb4cdd7a49e?source=post_page-----f9bedbae0683--------------------------------)
    [## Make Your R Code 10x Faster: Vectorization Explained in 3 Minutes'
  prefs: []
  type: TYPE_NORMAL
- en: Say goodbye to slow, messy loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/make-your-r-code-10x-faster-vectorization-explained-in-3-minutes-9eb4cdd7a49e?source=post_page-----f9bedbae0683--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Vectorization is an important concept in R. If a function is vectorized, it
    automatically applies to multiple values instead of just one. To see an example
    with the `ifelse` function, let’s assign more values to our variable `age`, and
    run the code again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `ifelse` function automatically evaluates all the values in `age`, returning
    a sequence of corresponding outputs. This makes `ifelse` a clean way of evaluating
    lots of simple conditions without needing slow, messy loops.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional indexing in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although `ifelse` can evaluate many inputs easily, there are other ways to do
    this.
  prefs: []
  type: TYPE_NORMAL
- en: '[Indexing](https://rspatial.org/intr/4-indexing.html) allows R programmers
    to access specific parts of a data structure that contains many values. For example,
    if we wanted to get the third element in the vector `age` from the last example,
    we could index `age` with 3 inside square brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It’s most common to use numbers to index values with certain positions, like
    in the code above. But, many beginner R programmers don’t know that you can also
    use logical conditions when indexing. This opens up all sorts of possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create some example data to illustrate some of these options. This includes
    some information about users, such as age, as in the previous examples. But, rather
    than being stored in a vector, each user’s information is stored row-wise in a
    tibble. This is the kind of data structure you’d be likely to see if dealing with
    user data in a professional setting, so it’s useful to know how to apply conditional
    logic to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bd51b1e44f5ba2880f7b1ad829f00196.png)'
  prefs: []
  type: TYPE_IMG
- en: The data created by the code above.
  prefs: []
  type: TYPE_NORMAL
- en: Tibbles and data frames are made up of vectors, which means we can index them
    in the same way. This allows us to do all sorts of things.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting values in a column based on a condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s some code that extracts any values of the `user_id` column where the
    user’s age is under 18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Replacing values in a column based on a condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s how to recode all the “UK” rows in the region column as “EU”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1ecdbc0b2b4b08bc9d5faf1985d41d51.png)'
  prefs: []
  type: TYPE_IMG
- en: The result of the code above, where the “UK” region values have been replaced
    with “EU”.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering a dataset with conditional indexing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can even use conditional subsetting to filter the whole dataset. Here’s a
    method of filtering all the rows where the region is “USA”. Note that after the
    logical condition here, we include a comma to tell R that we’re indexing by row.
    If we wanted to filter by column, we could add a condition after the comma.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bc64f468b7e9d5ce61cf06e353f98cb0.png)'
  prefs: []
  type: TYPE_IMG
- en: The result of the code above.
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few applications of conditional indexing in R. If you need
    to do a quick conditional operation on data, chances are there’s a one-line solution
    for it using this method.
  prefs: []
  type: TYPE_NORMAL
- en: Tidyverse case_when function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `case_when` function is from the tidyverse family of packages. It’s another
    way of applying conditional statements across a set of many values and is once
    again useful when working with datasets.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the data from the last example to show how to create a new column
    based on conditional statements with `case_when`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/84c693816e721ec506de46e82034c750.png)'
  prefs: []
  type: TYPE_IMG
- en: The result of the code above, with the new column “drinking_age”.
  prefs: []
  type: TYPE_NORMAL
- en: This code determines whether our site users are legally allowed to drink alcohol
    based on their age and location. Here, each condition is on a different line in
    the `case_when` statement. If the condition is true, we can return a value after
    the tilde (~) symbol — in this case, `TRUE`. If neither of the conditions are
    satisfied, the value returned is specified by the `.default` setting. All the
    values are stored in a new column, `drinking_age`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this seems a bit unfamiliar, here’s the equivalent if else statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Compared with the code above, it’s easy to see that `case_when` provides yet
    another way of implementing conditional statements that is more concise than the
    if-else statement, while being just as powerful. It’s now my go-to for creating
    new columns based on complex logic or multiple conditions. For tidyverse users,
    it’s a must-adopt feature.
  prefs: []
  type: TYPE_NORMAL
- en: When to use different kinds of conditional statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The methods I’ve covered only truly start to shine when you put them to work
    in your own code. Only by playing around with new approaches and getting comfortable
    with them will you reap their full benefits and achieve R programming fluency.
  prefs: []
  type: TYPE_NORMAL
- en: So, when should you use each type of conditional statement?
  prefs: []
  type: TYPE_NORMAL
- en: As with any choice between approaches in programming, there isn’t a straight
    answer. That said, here are some rough guidelines I use to help me choose between
    different ways of writing conditional statements.
  prefs: []
  type: TYPE_NORMAL
- en: If I’m working on a problem that requires lots of complex, multi-line code to
    get executed upon certain conditions, I often prefer if-else statements. Using
    other methods often gets messy and hard to maintain in these situations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For problems with simpler conditions and shorter code chunks to return, I like
    inline if-else statements. There’s no point in making a straightforward solution
    longer than it needs to be!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If working with datasets or creating columns based on conditions, I use `case_when`.
    It works well with the other tidyverse functions I use and is easy to debug and
    maintain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If I’m working with datasets and don’t want to load extra packages, I’ll use
    conditional indexing. It doesn’t need any extra dependencies and often runs fast
    too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My advice? Have a play around with each technique and see what sticks for you.
    At the very least, you might pick up one new way of making your code better.
  prefs: []
  type: TYPE_NORMAL
- en: So, **if** you liked this article, why not share your favourite conditional
    statement? **Else…** thanks for staying until the end anyway!
  prefs: []
  type: TYPE_NORMAL
