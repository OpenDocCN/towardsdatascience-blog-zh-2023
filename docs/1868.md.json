["```py\nimport pandas as pd\nimport numpy as np\n\nsample_df = pd.DataFrame({\n    'subject': ['A', 'B', 'C', 'D', 'E'],\n    'time': [1, 3, 5, 4, 6],\n    'event': [1, 1, 1, 1, 0],\n    'x': [-1.7, -0.4, 0.0, 0.9, 1.2],\n})\n\nsample_df\n```", "```py\nfrom cox.plots import plot_subject_event_times\nplot_subject_event_times(sample_df)\n```", "```py\nfrom cox.plots import animate_subject_event_times_and_mark_at_risk\nanimate_subject_event_times_and_mark_at_risk(sample_df).save(\n    '../images/cox_likelihood_fitting_sample.gif'\n)\n```", "```py\ndef event_time_and_x_from_subject(df, subject):\n    subject_with_event_df = df.query(f\"subject == '{subject}' & event == 1\")\n    if subject_with_event_df.empty: # Censored subjects\n        return (np.inf, 0)\n    return subject_with_event_df.iloc[0][['time', 'x']]\n\ndef subjects_at_risk_data(df, subject):\n    time = event_time_and_x_from_subject(df, subject)[0]\n    return df.query(f'time >= {time}')\n\ndef log_likelihood(df, subject, beta):\n    x_subjects_at_risk = subjects_at_risk_data(df, subject)['x']\n    x_subject = event_time_and_x_from_subject(df, subject)[1]\n    at_risk_hazards = np.exp(beta * x_subjects_at_risk)\n    return beta * x_subject - np.log(np.sum(at_risk_hazards))\n```", "```py\ndef neg_log_likelihood_for_all_subjects(df, beta):\n    subjects = df.query(\"event == 1\")['subject'].tolist()\n    neg_log_likelihoods = [\n        -log_likelihood(df, subject, beta)\n        for subject in subjects\n    ]\n    return pd.DataFrame({\n        'subject': subjects,\n        'neg_log_likelihood': neg_log_likelihoods\n    })\n```", "```py\ndef neg_log_likelihood_all_subjects_sweep_betas(df, betas=np.arange(-5, 5, 0.1)):\n    loglikelihoods_per_beta = []\n    for beta in betas:\n        beta_df = neg_log_likelihood_for_all_subjects(df, beta)\n        beta_df.insert(0, 'beta', beta) # Add beta column\n        loglikelihoods_per_beta.append(beta_df)\n    return pd.concat(loglikelihoods_per_beta)\n\nnegloglik_sweep_betas_df = neg_log_likelihood_all_subjects_sweep_betas(sample_df)\nnegloglik_sweep_betas_df\n```", "```py\nfrom cox.plots import plot_cost_vs_beta\nplot_cost_vs_beta(negloglik_sweep_betas_df, width=0.1)\n```", "```py\nnegloglik_sweep_betas_df \\\n    .groupby(\"beta\") \\\n    .agg(sum_neg_log_likelihood=('neg_log_likelihood', 'sum')) \\\n    .reset_index() \\\n    .sort_values('sum_neg_log_likelihood') \\\n    .head(1)\n```", "```py\nfrom lifelines import CoxPHFitter\n\nsample_cox_model = CoxPHFitter()\nsample_cox_model.fit(sample_df, duration_col='time', event_col='event', formula='x')\nsample_cox_model.print_summary()\n```"]