["```py\nimport numpy as np\nfrom PIL import Image\nfrom skimage import draw\nimport random\nfrom pathlib import Path\n\ndef create_image(path, img_size, min_radius):\n    path.parent.mkdir( parents=True, exist_ok=True )\n\n    arr = np.zeros((img_size, img_size)).astype(np.uint8)\n    center_x = random.randint(min_radius, (img_size-min_radius))\n    center_y = random.randint(min_radius, (img_size-min_radius))\n    max_radius = min(center_x, center_y, img_size - center_x, img_size - center_y)\n    radius = random.randint(min_radius, max_radius)\n\n    row_indxs, column_idxs = draw.ellipse(center_x, center_y, radius, radius, shape=arr.shape)\n\n    arr[row_indxs, column_idxs] = 255\n\n    im = Image.fromarray(arr)\n    im.save(path)\n\ndef create_images(data_root_path, train_num, val_num, test_num, img_size=640, min_radius=10):\n    data_root_path = Path(data_root_path)\n\n    for i in range(train_num):\n        create_image(data_root_path / 'train' / 'images' / f'img_{i}.png', img_size, min_radius)\n\n    for i in range(val_num):\n        create_image(data_root_path / 'val' / 'images' / f'img_{i}.png', img_size, min_radius)\n\n    for i in range(test_num):\n        create_image(data_root_path / 'test' / 'images' / f'img_{i}.png', img_size, min_radius)\n\ncreate_images('datasets', train_num=120, val_num=40, test_num=40, img_size=120, min_radius=10)\n```", "```py\nfrom rasterio import features\n\ndef create_label(image_path, label_path):\n    arr = np.asarray(Image.open(image_path))\n\n    # There may be a better way to do it, but this is what I have found so far\n    cords = list(features.shapes(arr, mask=(arr >0)))[0][0]['coordinates'][0]\n    label_line = '0 ' + ' '.join([f'{int(cord[0])/arr.shape[0]} {int(cord[1])/arr.shape[1]}' for cord in cords])\n\n    label_path.parent.mkdir( parents=True, exist_ok=True )\n    with label_path.open('w') as f:\n        f.write(label_line)\n\nfor images_dir_path in [Path(f'datasets/{x}/images') for x in ['train', 'val', 'test']]:\n    for img_path in images_dir_path.iterdir():\n        label_path = img_path.parent.parent / 'labels' / f'{img_path.stem}.txt'\n        label_line = create_label(img_path, label_path)\n```", "```py\n0 0.0767 0.08433 0.1417 0.08433 0.1417 0.0917 0.15843 0.0917 0.15843 0.1 0.1766 0.1 0.1766 0.10844 0.175 0.10844 0.175 0.1177 0.18432 0.1177 0.18432 0.14333 0.1918 0.14333 0.1918 0.20844 0.18432 0.20844 0.18432 0.225 0.175 0.225 0.175 0.24334 0.1766 0.24334 0.1766 0.2417 0.15843 0.2417 0.15843 0.25 0.1417 0.25 0.1417 0.25846 0.0767 0.25846 0.0767 0.25 0.05 0.25 0.05 0.2417 0.04174 0.2417 0.04174 0.24334 0.04333 0.24334 0.04333 0.225 0.025 0.225 0.025 0.20844 0.01766 0.20844 0.01766 0.14333 0.025 0.14333 0.025 0.1177 0.04333 0.1177 0.04333 0.10844 0.04174 0.10844 0.04174 0.1 0.05 0.1 0.05 0.0917 0.0767 0.0917 0.0767 0.08433\n```", "```py\nyaml_content = f'''\ntrain: train/images\nval: val/images\ntest: test/images\n\nnames: ['circle']\n    '''\n\nwith Path('data.yaml').open('w') as f:\n    f.write(yaml_content)\n```", "```py\ntree .\n```", "```py\ndata.yaml\ndatasets/\n├── test\n│   ├── images\n│   │   ├── img_0.png\n│   │   ├── img_1.png\n│   │   ├── img_2.png\n│   │   ├── ...\n│   └── labels\n│       ├── img_0.txt\n│       ├── img_1.txt\n│       ├── img_2.txt\n│       ├── ...\n├── train\n│   ├── images\n│   │   ├── img_0.png\n│   │   ├── img_1.png\n│   │   ├── img_2.png\n│   │   ├── ...\n│   └── labels\n│       ├── img_0.txt\n│       ├── img_1.txt\n│       ├── img_2.txt\n│       ├── ...\n|── val\n|   ├── images\n│   │   ├── img_0.png\n│   │   ├── img_1.png\n│   │   ├── img_2.png\n│   │   ├── ...\n|   └── labels\n│       ├── img_0.txt\n│       ├── img_1.txt\n│       ├── img_2.txt\n│       ├── ...\n```", "```py\npip install ultralytics==8.0.38\n```", "```py\nfrom ultralytics import YOLO\n\nmodel = YOLO(\"yolov8n-seg.pt\")\n\nresults = model.train(\n        batch=8,\n        device=\"cpu\",\n        data=\"data.yaml\",\n        epochs=7,\n        imgsz=120,\n    )\n```", "```py\nResults saved to runs/segment/train60\n```", "```py\nfrom IPython.display import Image as show_image\nshow_image(filename=\"runs/segment/train60/val_batch0_labels.jpg\")\n```", "```py\nshow_image(filename=\"runs/segment/train60/val_batch0_pred.jpg\")\n```", "```py\nshow_image(filename=\"runs/segment/train60/MaskP_curve.png\")\n```", "```py\nshow_image(filename=\"runs/segment/train60/MaskR_curve.png\")\n```", "```py\nshow_image(filename=\"runs/segment/train60/MaskPR_curve.png\")\n```", "```py\nshow_image(filename=\"runs/segment/train60/results.png\")\n```", "```py\nmy_model = YOLO('runs/segment/train60/weights/best.pt')\nresults = list(my_model('datasets/test/images/img_5.png', conf=0.128))\nresult = results[0]\n```", "```py\nresult.masks.segments\n```", "```py\n[array([[    0.10156,     0.34375],\n        [    0.09375,     0.35156],\n        [    0.09375,     0.35937],\n        [   0.078125,       0.375],\n        [   0.070312,       0.375],\n        [     0.0625,     0.38281],\n        [    0.38281,     0.71094],\n        [    0.39062,     0.71094],\n        [    0.39844,     0.70312],\n        [    0.39844,     0.69531],\n        [    0.41406,     0.67969],\n        [    0.42187,     0.67969],\n        [    0.44531,     0.46875],\n        [    0.42969,     0.45312],\n        [    0.42969,     0.41406],\n        [    0.42187,     0.40625],\n        [    0.41406,     0.40625],\n        [    0.39844,     0.39062],\n        [    0.39844,     0.38281],\n        [    0.39062,       0.375],\n        [    0.38281,       0.375],\n        [    0.35156,     0.34375]], dtype=float32)]\n```", "```py\nresult.masks.masks\n```", "```py\ntensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.],\n         ...,\n         [0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]])\n```", "```py\nimport torchvision.transforms as T\nT.ToPILImage()(result.masks.masks).show()\n```"]