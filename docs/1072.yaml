- en: Introduction to asyncio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introduction-to-asyncio-57a5a1290ce0?source=collection_archive---------8-----------------------#2023-03-24](https://towardsdatascience.com/introduction-to-asyncio-57a5a1290ce0?source=collection_archive---------8-----------------------#2023-03-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Managing I/O bound concurrency with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff2daf6260cca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-asyncio-57a5a1290ce0&user=Oliver+S&userId=f2daf6260cca&source=post_page-f2daf6260cca----57a5a1290ce0---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)
    ·6 min read·Mar 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F57a5a1290ce0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-asyncio-57a5a1290ce0&user=Oliver+S&userId=f2daf6260cca&source=-----57a5a1290ce0---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F57a5a1290ce0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintroduction-to-asyncio-57a5a1290ce0&source=-----57a5a1290ce0---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Concurrency and parallelism denote a program’s or computer’s capability to run
    multiple operations in parallel. One commonly distinguishes multi-processing (parallelism)
    and multi-threading (concurrency)— with the former describing running multiple
    processes, whereas the second denotes spawning multiple threads within the same
    process. In Python, due to the [Global Interpreter Lock](https://realpython.com/python-gil/)
    (GIL), only one thread can be executed at once, causing any multi-threaded application
    to be single core effectively. Still, e.g. for I/O bound programs (programs, in
    which more time is spent waiting for inputs — i.e. this is the bottleneck and
    not compute), also in Python multi-threading makes sense. In this post we will
    introduce [asyncio](https://docs.python.org/3/library/asyncio.html), which is
    an elegant and easy way of doing so.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/56706dacea79f62fb82537889418d6a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Gabriel Gusmao](https://unsplash.com/@gcsgpp?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/pMmw3ynuXHw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Why asyncio?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will designate a future post for the differences between multi-processing
    and multi-threading, and how asyncio plays into this. Still we want to motivate
    its usage here. As hinted above, multi-threading is particularly useful for I/O
    bound, i.e. non-CPU bound, applications. And asyncio is one way of doing so, which
    is preferred for some use cases by many developers.
  prefs: []
  type: TYPE_NORMAL
- en: asyncio excels for I/O bound programs, for which we want to write easy, clearly
    structured, and…
  prefs: []
  type: TYPE_NORMAL
