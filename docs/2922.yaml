- en: Can ChatGPT solve knapsack problems?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/can-chatgpt-solve-knapsack-problems-1a9a388c4caf?source=collection_archive---------10-----------------------#2023-09-21](https://towardsdatascience.com/can-chatgpt-solve-knapsack-problems-1a9a388c4caf?source=collection_archive---------10-----------------------#2023-09-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solving operations research (OR) problems with ChatGPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@guanx92?source=post_page-----1a9a388c4caf--------------------------------)[![Guangrui
    Xie](../Images/def9aa637424a88d75a6a3bb103350bc.png)](https://medium.com/@guanx92?source=post_page-----1a9a388c4caf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1a9a388c4caf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1a9a388c4caf--------------------------------)
    [Guangrui Xie](https://medium.com/@guanx92?source=post_page-----1a9a388c4caf--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F495b92f0c66d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcan-chatgpt-solve-knapsack-problems-1a9a388c4caf&user=Guangrui+Xie&userId=495b92f0c66d&source=post_page-495b92f0c66d----1a9a388c4caf---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1a9a388c4caf--------------------------------)
    ·10 min read·Sep 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1a9a388c4caf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcan-chatgpt-solve-knapsack-problems-1a9a388c4caf&user=Guangrui+Xie&userId=495b92f0c66d&source=-----1a9a388c4caf---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1a9a388c4caf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcan-chatgpt-solve-knapsack-problems-1a9a388c4caf&source=-----1a9a388c4caf---------------------bookmark_footer-----------)![](../Images/3272c86ba9ff1223c86d7d1d8650584d.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Jakob Owens](https://unsplash.com/@jakobowens1?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Ever since the emergence of ChatGPT, I’ve been thinking about how ChatGPT would
    influence the world of optimization and Operations Research (OR). There has been
    news about ChatGPT passing high school and undergraduate level math exams, which
    piques my interest in exploring how well it can do on solving OR problems. In
    this article, I will use a classic OR problem — 0/1 knapsack problem to run some
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: '**Knapsack problem**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the realm of optimization and decision-making conundrums, the knapsack problem
    has long been a classic benchmark. It challenges us to select a combination of
    items, each with its own weight and value, in such a way that we maximize the
    total value while staying within a given weight constraint. Dynamic programming
    is an efficient algorithm we genrally use to solve 0/1 knapsack problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conversation with ChatGPT**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I started with a very small example, and asked ChatGPT to solve it.
  prefs: []
  type: TYPE_NORMAL
- en: '*Me: Consider a knapsack problem, where the capacity of the knapsack is 10lbs.
    I have 4 items to choose from, whose values are $10, $40, $30, $50 and weights
    are 5lbs, 4lbs, 6lbs, 3lbs respectively. Could you solve this problem for me?*'
  prefs: []
  type: TYPE_NORMAL
- en: '*ChatGPT: Certainly! The knapsack problem is a classic optimization problem
    where the goal is to maximize the total value of items selected for a knapsack,
    subject to the constraint that the total weight of the selected items does not
    exceed the knapsack’s capacity.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In your case, you have 4 items with their respective values and weights:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Item 1: Value = $10, Weight = 5lbs Item 2: Value = $40, Weight = 4lbs Item
    3: Value = $30, Weight = 6lbs Item 4: Value = $50, Weight = 3lbs*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Knapsack Capacity = 10lbs*'
  prefs: []
  type: TYPE_NORMAL
- en: '*To solve this problem, you can use a dynamic programming approach. Create
    a 2D table where rows represent items and columns represent the remaining knapsack
    capacities (from 0lbs to 10lbs). Fill in the table iteratively to find the maximum
    value that can be obtained for each combination of items and remaining capacities.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Here’s the table filling process:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Capacity (lbs) 0 1 2 3 4 5 6 7 8 9 10'
  prefs: []
  type: TYPE_NORMAL
- en: — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —
  prefs: []
  type: TYPE_NORMAL
- en: Item 1 (5lbs) 0 0 0 0 0 10 10 10 10 10 10
  prefs: []
  type: TYPE_NORMAL
- en: Item 2 (4lbs) 0 0 0 0 40 40 40 40 50 50 50
  prefs: []
  type: TYPE_NORMAL
- en: Item 3 (6lbs) 0 0 0 0 40 40 30 70 70 70 70
  prefs: []
  type: TYPE_NORMAL
- en: Item 4 (3lbs) 0 0 0 50 50 50 50 70 70 70 80*
  prefs: []
  type: TYPE_NORMAL
- en: '*The table shows the maximum value that can be obtained for each combination
    of items and remaining capacities. The final cell (bottom-right) has a value of
    $80, which is the maximum value that can be obtained with a knapsack capacity
    of 10lbs.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*To find the items that should be selected, you can backtrack from the last
    cell to the first cell while considering the decisions that led to the maximum
    value. In this case, you would select Item 2 and Item 4, which have a total value
    of $40 + $50 = $90 and a total weight of 4lbs + 3lbs = 7lbs, which is within the
    knapsack’s capacity of 10lbs.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*So, the optimal solution is to select Item 2 and Item 4, which gives you a
    total value of $90.*'
  prefs: []
  type: TYPE_NORMAL
- en: Apparently, we notice that ChatGPT is able to pick the right approach to solve
    this problem, but the final solution given by ChatGPT is not aligned with its
    reasoning process. Specifically, the dynamic programming (DP) table shows $80
    (bottom right cell) as the optimal objective value, but ChatGPT concluded $90
    is the final answer.
  prefs: []
  type: TYPE_NORMAL
- en: To check which is the correct solution, I wrote up a piece of Python script
    as below to carry out the DP algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The DP table printed out is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0622c030306b1f62b6374d6d6db77199.png)'
  prefs: []
  type: TYPE_IMG
- en: This confirms that the conclusion ChatGPT arrived at is correct, but the the
    DP table given by ChatGPT is wrong. Then I continued to ask it to correct the
    DP table.
  prefs: []
  type: TYPE_NORMAL
- en: '*Me: I think your solution is correct, but the table has some errors.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*ChatGPT: I apologize for any confusion. Let me correct the table for you.
    Here’s the corrected dynamic programming table for the knapsack problem:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Capacity (lbs) 0 1 2 3 4 5 6 7 8 9 10'
  prefs: []
  type: TYPE_NORMAL
- en: — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —
  prefs: []
  type: TYPE_NORMAL
- en: Item 1 (5lbs) 0 0 0 0 0 10 10 10 10 10 10
  prefs: []
  type: TYPE_NORMAL
- en: Item 2 (4lbs) 0 0 0 0 40 40 40 40 40 50 50
  prefs: []
  type: TYPE_NORMAL
- en: Item 3 (6lbs) 0 0 0 0 40 40 40 40 40 50 70
  prefs: []
  type: TYPE_NORMAL
- en: Item 4 (3lbs) 0 0 0 50 50 50 90 90 90 90 90*
  prefs: []
  type: TYPE_NORMAL
- en: '*Now, the table is correct. The value in the bottom-right cell is $90, which
    represents the maximum value that can be obtained with a knapsack capacity of
    10lbs. As mentioned before, the optimal solution is to select Item 2 and Item
    4, which gives you a total value of $90.*'
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, ChatGPT is able to do some corrections to the table, so that
    the bottom right cell is aligned with $90\. However, if we look at the table more
    closely, the last row of the table is still not correct. The cell in 4th row and
    7th column (corresponding to a knapsack capacity of 6lbs) should be $50 instead
    of $90\. A knapsack of 6lbs capacity wouldn’t allow us to choose item 2 and 4
    to reach $90, since the total weight of item 2 and 4 is 7lbs which exceeds the
    capacity of the knapsack.
  prefs: []
  type: TYPE_NORMAL
- en: I then asked it to write some code to solve this problem.
  prefs: []
  type: TYPE_NORMAL
- en: '*Me: Could you write Python code to solve this problem?*'
  prefs: []
  type: TYPE_NORMAL
- en: '*ChatGPT: Certainly! You can solve the 0/1 knapsack problem using dynamic programming
    in Python. Here’s a Python code snippet to solve the problem for the specific
    instance you provided:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*When you run this code, it will output the maximum value and the selected
    items that should be placed in the knapsack. In your specific case, it will correctly
    select Item 2 and Item 4, which have a total value of $90 and a total weight of
    7 lbs, within the knapsack’s capacity of 10 lbs.*'
  prefs: []
  type: TYPE_NORMAL
- en: This code printed out the optimal solution clearly and correctly. The DP table
    calculated by this code is also correct.
  prefs: []
  type: TYPE_NORMAL
- en: I then went further to test an instance of a larger scale, a knapsack problem
    with the capacity of the knapsack being 500lbs and 10 items to choose from. The
    value and weight of each item are randomly generated using the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I copied and pasted the generated values and weights, and asked ChatGPT to solve
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '*Me: Consider a knapsack problem, where the capacity of the knapsack is 500lbs.
    I have 100 items to choose from, whose values are given by the list [156, 59,
    61, 129, 64, 158, 87, 77, 157, 144, 156, 127, 74, 157, 91, 124, 128, 95, 118,
    127, 111, 67, 108, 139, 79, 95, 86, 155, 120, 112, 76, 116, 79, 100, 80, 120,
    117, 93, 111, 67, 55, 113, 105, 119, 171, 128, 72, 133, 60, 86, 97, 151, 77, 75,
    97, 80, 133, 67, 65, 86, 85, 157, 128, 102, 63, 125, 69, 53, 135, 109, 127, 109,
    125, 80, 68, 120, 75, 79, 86, 100, 89, 58, 80, 33, 118, 51, 66, 101, 77, 146,
    61, 108, 98, 64, 115, 94, 123, 124, 164, 140] and weights are given by the list
    [15, 11, 12, 16, 15, 7, 12, 9, 9, 11, 10, 14, 12, 10, 11, 11, 14, 9, 10, 7, 2,
    11, 12, 7, 16, 5, 10, 9, 14, 14, 10, 11, 7, 4, 8, 10, 13, 13, 8, 9, 6, 5, 4, 15,
    8, 8, 6, 12, 5, 9, 7, 11, 8, 6, 9, 11, 10, 10, 8, 8, 7, 8, 7, 4, 10, 8, 5, 11,
    7, 10, 12, 10, 13, 6, 11, 7, 7, 8, 9, 10, 6, 12, 11, 5, 14, 15, 13, 9, 6, 13,
    8, 13, 10, 12, 11, 12, 10, 15, 10, 11] respectively. Could you solve this problem
    for me?*'
  prefs: []
  type: TYPE_NORMAL
- en: '*ChatGPT: Solving the knapsack problem for 100 items with a capacity of 500
    lbs is a computationally intensive task. However, I can provide you with the Python
    code to solve this problem using dynamic programming, but please be aware that
    it may take some time to run.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Here’s the Python code to solve the knapsack problem with the provided values
    and weights:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Running this code will provide you with the maximum value that can be obtained
    and the list of selected items. Please be patient, as it may take some time to
    execute.*'
  prefs: []
  type: TYPE_NORMAL
- en: This time, instead of directly solving the problem and giving me the answer,
    it gave me some Python code to run. The code works well in solving this problem.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is my first attempt to understand ChatGPT’s ability to solve complex math
    problems such as a classic OR problem — knapsack problem. It seems that for small
    instances of knapsack problems, it’s able to give an answer of the optimal solution.
    However, the quality of the answer is not always guaranteed. There may be errors
    during the reasoning process or in the final answer. For large instances, ChatGPT
    tends to avoid giving a direct answer of the optimal solution, but instead gives
    a piece of code to run. The code is usually nicely written and gets us the correct
    solution. So when solving knapsack problems with ChatGPT, never rely too much
    on the direct answer of optimal solution given by it, but run the code given by
    it instead to double check.
  prefs: []
  type: TYPE_NORMAL
