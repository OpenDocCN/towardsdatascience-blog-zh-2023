- en: 5 Quick Tips to Improve Your MLflow Model Experimentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-quick-tips-to-improve-your-mlflow-model-experimentation-dae346db825?source=collection_archive---------11-----------------------#2023-03-13](https://towardsdatascience.com/5-quick-tips-to-improve-your-mlflow-model-experimentation-dae346db825?source=collection_archive---------11-----------------------#2023-03-13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use the MLflow python API to drive better model development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mc12338?source=post_page-----dae346db825--------------------------------)[![Matt
    Collins](../Images/b28ac8100d6fb287e3fa6926eec7939a.png)](https://medium.com/@mc12338?source=post_page-----dae346db825--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dae346db825--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dae346db825--------------------------------)
    [Matt Collins](https://medium.com/@mc12338?source=post_page-----dae346db825--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd1970f1605f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F5-quick-tips-to-improve-your-mlflow-model-experimentation-dae346db825&user=Matt+Collins&userId=d1970f1605f1&source=post_page-d1970f1605f1----dae346db825---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dae346db825--------------------------------)
    ·7 min read·Mar 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdae346db825&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F5-quick-tips-to-improve-your-mlflow-model-experimentation-dae346db825&user=Matt+Collins&userId=d1970f1605f1&source=-----dae346db825---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdae346db825&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F5-quick-tips-to-improve-your-mlflow-model-experimentation-dae346db825&source=-----dae346db825---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: MLflow is a fantastic way to speed up your machine learning model development
    process through its powerful experimentation component. This enables Data Scientists
    to log the best algorithms and parameter combinations and rapidly iterate model
    development.
  prefs: []
  type: TYPE_NORMAL
- en: This blog aims to show users how to get the most out of MLflow experiments.
    We will focus on the `start_run()` and its parameters, which can enhance your
    experimentation process. Additionally, we will cover the `search_runs()` function,
    which provides an expansive view of your experimentation history and enables greater
    flexibility in analysis.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to MLflow, I suggest taking a look at the MLflow [site](https://mlflow.org/),
    [documentation](https://mlflow.org/docs/latest/quickstart.html), some blog posts
    or tutorial videos before jumping into this blog.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/442306b0e9734d0b0e6634b25f2ea0aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Adrien Converse](https://unsplash.com/@adrienconverse?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**mlflow.start_run()**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of these tricks are parameters of the `start_run()` function. We call this
    function to initiate our experiment run, and it becomes the active run where we
    can log parameters, metrics, and other information.
  prefs: []
  type: TYPE_NORMAL
- en: This is the function I use most in MLflow and the one which offers the most
    instantaneous value to users.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. run_id
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `run_id` is a UUID which is specific to each experiment run. Once a run
    has been initiated, it is not possible to overwrite properties such as the model
    type or parameter values. However, you can use the `run_id` to log additional
    values retrospectively, such as metrics, tags, or a description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we may also want to log our coefficient of determination (r²)
    value for this run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `run_id` can either be extracted by `print(run.info.run_id)` from the previous
    run, or by querying `mlflow.search_runs()`, but more on that later.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. experiment_id
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can set the experiment you want a run to log to in a few different ways
    in MLflow. The first command sets the experiment for all subsequent runs to “mlflow_sdk_test”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This can also be configured on a run-by-run basis through the `experiment_id`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This value can then be reused when passed to `start_run()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 3\. run_name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you specify the name of your run, you have greater control over the naming
    process than relying on the default names generated by MLflow. This enables you
    to establish a consistent naming convention for experiment runs, similar to how
    you might manage other resources in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: However, please be aware that `run_name` is not a unique constraint in MLflow.
    This means that you could have multiple experiments (with unique run IDs) sharing
    the same name.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d277256abc60b26566e6cb00d36afc1f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'MLflow experiment table view — Duplicate run names: Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: This means that every time you execute a new run in a *with* statement, it will
    create a new experiment of the same name, rather than append details to this run.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us nicely to the next parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. nested
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be familiar with nested experiment runs if you’ve run the scikit-learn
    function`GridSearchCV` to perform hyperparameter optimisation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nested experiments look something like the following in MLflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49ae15fc83fb1d28da5a7e6789aec16f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'MLflow experiment table view — nested experiments: Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the metrics here are saved against the parent run, which returns the
    best values recorded by the child runs. The child run values themselves are blank.
  prefs: []
  type: TYPE_NORMAL
- en: While nested experiments are excellent for evaluating and logging parameter
    combinations to determine the best model, they also serve as a great logical container
    for organizing your work. With the ability to group experiments, you can compartmentalize
    individual data science investigations and keep your experiments page organized
    and tidy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Should you need to add to this nested run, then specify the parent run’s `run_id`
    in subsequent executions as a parameter, appending further child runs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: One thing to note about this approach is that your metrics will now be logged
    against each **child** run.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. mlflow.search_runs()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This trick is using the `search_runs()`function.
  prefs: []
  type: TYPE_NORMAL
- en: This function allows us to programmatically query the experimentation GUI, and
    the results are returned in a tabular format that is easy to understand and manipulate.
  prefs: []
  type: TYPE_NORMAL
- en: In the below example, we can select specific fields from the runs in our experiment
    and load them into a Pandas DataFrame. Notice that the available columns greatly
    exceed those available in the experiments GUI!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As this is a Pandas DataFrame, we can add columns that may be useful for analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to aggregate the result set to provide information of runs over
    time, we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1909bb8381a5429b15c509d2488abeb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Output of the above query: Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: The automatic tags.estimator_name field allows us to review how many runs have
    been tested for each algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6d75e04dc94ff05a7245682a7d9565b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Output of the above query: Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: Given this is a DataFrame, we can export the data for any reporting requirements
    to give the required visibility to users who may not have access to the workspace,
    and compare across workspaces.
  prefs: []
  type: TYPE_NORMAL
- en: Closing thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are just a few examples of how to extend your use of MLflow’s functions
    and parameters in your experimentation process, but there are many more available
    in the python API.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this post has inspired you to explore some of the available functions
    and parameters and see if they can benefit your model development process. For
    additional information, refer to the API [documentation](https://mlflow.org/docs/latest/python_api/index.html)
    and experiment with different configurations to find the best fit for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re currently using any functions or parameters that I’ve not mentioned
    in this post, please let me know in the comments!
  prefs: []
  type: TYPE_NORMAL
- en: All code can be found in my [GitHub Repo](https://github.com/MattPCollins/MLflowExperimentation).
  prefs: []
  type: TYPE_NORMAL
