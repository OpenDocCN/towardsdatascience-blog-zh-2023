- en: 'The Job-Shop Scheduling Problem: Mixed-Integer Programming Models'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作车间调度问题：混合整数规划模型
- en: 原文：[https://towardsdatascience.com/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab?source=collection_archive---------0-----------------------#2023-03-07](https://towardsdatascience.com/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab?source=collection_archive---------0-----------------------#2023-03-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab?source=collection_archive---------0-----------------------#2023-03-07](https://towardsdatascience.com/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab?source=collection_archive---------0-----------------------#2023-03-07)
- en: Mathematical modeling and Python implementation of the classical sequencing
    problem using Pyomo
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经典排序问题的数学建模与 Pyomo 实现
- en: '[](https://medium.com/@bruscalia12?source=post_page-----4bbee83d16ab--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----4bbee83d16ab--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4bbee83d16ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4bbee83d16ab--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----4bbee83d16ab--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page-----4bbee83d16ab--------------------------------)[![布鲁诺·斯卡利亚·C·F·莱特](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----4bbee83d16ab--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4bbee83d16ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4bbee83d16ab--------------------------------)
    [布鲁诺·斯卡利亚·C·F·莱特](https://medium.com/@bruscalia12?source=post_page-----4bbee83d16ab--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----4bbee83d16ab---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4bbee83d16ab--------------------------------)
    ·11 min read·Mar 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4bbee83d16ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----4bbee83d16ab---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----4bbee83d16ab---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4bbee83d16ab--------------------------------)
    ·11分钟阅读·2023年3月7日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4bbee83d16ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----4bbee83d16ab---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4bbee83d16ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab&source=-----4bbee83d16ab---------------------bookmark_footer-----------)![](../Images/0bfff84b7a0c840b74a82e372bac38ae.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4bbee83d16ab&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab&source=-----4bbee83d16ab---------------------bookmark_footer-----------)![](../Images/0bfff84b7a0c840b74a82e372bac38ae.png)'
- en: Photo by [Guillaume Bolduc](https://unsplash.com/fr/@guibolduc?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [吉约姆·博尔杜克](https://unsplash.com/fr/@guibolduc?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供
- en: The job-shop scheduling problem (JSSP) is a widely studied optimization problem
    with several industrial applications. The goal is to define how to minimize the
    makespan required to allocate shared resources (machines) over time to complete
    competing activities (jobs). As for other optimization problems, mixed-integer
    programming can be an effective tool to provide good solutions, although for large
    instances one should probably resort to heuristics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作业车间调度问题（JSSP）是一个广泛研究的优化问题，具有多种工业应用。目标是定义如何最小化分配共享资源（机器）所需的工期，以完成竞争活动（作业）。与其他优化问题一样，混合整数规划可以成为提供良好解决方案的有效工具，尽管对于大规模实例，可能需要使用启发式方法。
- en: Throughout this article, one may find two of the most usual mixed-integer programming
    formulations for the JSSP with implementation in Python, using the *pyomo* library
    (Bynum et al., 2021). Those interested in details can follow along with the complete
    code available in this [git repository](https://github.com/bruscalia/jobshop).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，你会发现两种最常见的混合整数规划JSSP表述，并用*pyomo*库（Bynum等，2021）在Python中实现。对详细信息感兴趣的读者可以访问本[git仓库](https://github.com/bruscalia/jobshop)获取完整代码。
- en: If you are unfamiliar with mixed-integer programming or optimization in general,
    you might have a better experience after reading this introduction on the subject.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对混合整数规划或优化不熟悉，阅读这篇介绍后，你可能会有更好的理解。
- en: '[](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4bbee83d16ab--------------------------------)
    [## An introduction to mixed-integer linear programming: The knapsack problem'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4bbee83d16ab--------------------------------)
    [## 混合整数线性规划简介：背包问题'
- en: Learn how to solve optimization problems in Python using scipy and pyomo
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何使用scipy和pyomo在Python中解决优化问题
- en: towardsdatascience.com](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4bbee83d16ab--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4bbee83d16ab--------------------------------)
- en: Now let us dive in!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们深入探讨一下！
- en: Problem statement
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题陈述
- en: Suppose a set of jobs *J* needs to be processed in a set of machines *M*, each
    in a given order. For instance, job number 1 might need to be processed in machines
    (1, 4, 3, 2), whereas job number 2 in (2, 3, 4, 1). In this case, before going
    to machine 4, job 1 must have gone to machine 1\. Analogously, before going to
    machine 1, job 2 must have been processed in machine 4.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一组作业*J*需要在一组机器*M*中按给定顺序处理。例如，作业编号1可能需要在机器（1, 4, 3, 2）中处理，而作业编号2则在（2, 3, 4,
    1）中处理。在这种情况下，作业1在前往机器4之前必须先经过机器1。类似地，作业2在前往机器1之前必须已经在机器4中处理过。
- en: Each machine can process only one job at a time. Operations are defined by pairs
    (machine, job) and each has a specific processing time *p*. Therefore, the total
    makespan depends on how one allocates resources to perform tasks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每台机器一次只能处理一个作业。操作由（机器，作业）对定义，每对有一个特定的处理时间*p*。因此，总的工期取决于如何分配资源来执行任务。
- en: The figure below illustrates an optimal sequence of operations for a simple
    instance with 5 machines and 4 jobs. Notice that each machine processes just one
    job at a time and each job is processed by only one machine at a time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了一个简单实例的最佳操作顺序，该实例有5台机器和4个作业。注意每台机器一次只处理一个作业，每个作业一次只由一台机器处理。
- en: '![](../Images/0829a2614d0656d70bfbd213a4cbe3bd.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0829a2614d0656d70bfbd213a4cbe3bd.png)'
- en: Example of problem with three machines and four jobs. (Image by the author).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 三台机器和四个作业的问题示例。（图片由作者提供）。
- en: As for other optimization problems, we must convert these rules into mathematical
    equations to obtain smart allocations of resources. Therefore, in the following
    section, let us see two usual formulations for the JSSP.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他优化问题一样，我们必须将这些规则转换为数学方程式，以获得智能的资源分配。因此，在接下来的部分中，让我们看看JSSP的两种常见表述。
- en: Mixed-integer models
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合整数模型
- en: 'Following the study of Ku & Beck (2016), two formulations for the JSSP will
    be presented: the disjunctive model (Manne, 1960) and the time-index model (Bowman,
    1959; Kondili, 1993). Those interested might refer to Wagner (1959) for a third
    formulation (rank-based). The disjunctive model is surely the most efficient of
    the three for the original problem. However, others might be easier to handle
    when incorporating new constraints that might occur in real-world problems.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Ku & Beck (2016)的研究，将介绍两种JSSP模型：选择模型（Manne, 1960）和时间索引模型（Bowman, 1959; Kondili,
    1993）。有兴趣的读者可以参考Wagner (1959)的第三种模型（基于排名）。选择模型无疑是三者中最有效的。然而，其他模型在处理实际问题中可能更容易应对新出现的约束条件。
- en: In the disjunctive model, let us consider a set *J* of jobs and a set *M* of
    machines. Each job *j* must follow a processing order (***σ****ʲ*₁, ***σ****ʲ*₂,
    …, ***σ****ʲₖ*) and each operation (*m*, *j*) has a processing time *p*. The decision
    variables considered are the time that job *j* starts on machine *m*, *xₘⱼ*; a
    binary that marks precedence of job *i* before *j* on machine *m*, *zₘᵢⱼ*; and
    the total makespan of operation, *C*, which is itself the minimization objective.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择模型中，假设我们有一个作业集*J*和一个机器集*M*。每个作业*j*必须遵循一个处理顺序（***σ****ʲ*₁, ***σ****ʲ*₂, …,
    ***σ****ʲₖ*），每个操作（*m*，*j*）有一个处理时间*p*。考虑的决策变量包括作业*j*在机器*m*上的开始时间*xₘⱼ*；一个二元变量标记作业*i*在机器*m*上优先于*j*的情况*zₘᵢⱼ*；以及操作的总完工时间*C*，这是最小化的目标。
- en: 'We need to create constraints to ensure that:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建约束条件来确保：
- en: The starting time of job *j* in machine *m* must be greater than the starting
    time of the previous operation of job *j* plus its processing time.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机器*m*中作业*j*的开始时间必须大于作业*j*的上一个操作的开始时间加上其处理时间。
- en: Each machine processes just one job at a time. To do this, we state that if
    *i* precedes *j* in machine *m*, the starting time of job *j* in machine *m* must
    be greater than or equal to the starting time of job *i* plus its processing time.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每台机器一次只处理一个作业。为此，我们声明，如果*i*在机器*m*中优先于*j*，那么机器*m*中作业*j*的开始时间必须大于或等于作业*i*的开始时间加上其处理时间。
- en: Of every pair of jobs *i*, *j* one element must precede the other for each machine
    *m* in *M*.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每对作业*i*、*j*中必须有一个在每台机器*m*中优先于另一个。
- en: The total makespan is greater than the starting time of every operation plus
    its processing time.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总完工时间大于每个操作的开始时间加上其处理时间。
- en: 'And we get the following formulation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们得到以下模型：
- en: '![](../Images/3c91d9c86058566a90ccdc27498b20f2.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c91d9c86058566a90ccdc27498b20f2.png)'
- en: Job-shop disjunctive model. (Image by the author).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 作业车间选择模型。（图片由作者提供）。
- en: In which, *V* is an arbitrarily large value (big M) of the “either-or” constraint.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，*V*是“非此即彼”约束条件的一个任意大值（大M）。
- en: The next formulation explored will be the time-indexed model. It is limited
    in the sense that only integer processing times can be considered and one can
    notice that it produces a constraint matrix with several *nonzero* elements, which
    makes it computationally more expensive than the disjunctive model. Furthermore,
    as processing times increase, the number of decision variables increases as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一种探讨的模型将是时间索引模型。它的限制在于只能考虑整数处理时间，并且可以注意到它生成了一个具有多个*非零*元素的约束矩阵，这使得它在计算上比选择模型更昂贵。此外，随着处理时间的增加，决策变量的数量也会增加。
- en: 'In the time-indexed model, we will consider the same sets of jobs *J* and machines
    *M*, besides a set of discrete intervals *T*. The choice of the size of *T* might
    be oriented in the same way as the definition of *V*: the sum of all processing
    times. The same parameters of the order of jobs and processing times will be used
    too. However, in this approach, we only consider binary variables that mark it
    job *j* starts at machine *m* at instant *t*, *xₘⱼₜ*, besides the real-valued
    (or integer) makespan *C*.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间索引模型中，我们将考虑相同的作业集*J*和机器集*M*，以及一个离散时间区间集*T*。*T*的大小选择可以参考*V*的定义：所有处理时间的总和。还将使用相同的作业顺序和处理时间参数。然而，在这种方法中，我们只考虑标记作业*j*在机器*m*的时间点*t*开始的二元变量*xₘⱼₜ*，以及实际值（或整数）总完工时间*C*。
- en: 'Let us formulate the constraints:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制定约束条件：
- en: Each job *j* at machine *m* starts only once.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个作业*j*在机器*m*上只能开始一次。
- en: Ensure that each machine processes just one job at a time. And this is the hard
    one in the time-indexed approach. To do this, we state that at most one job *j*
    can start at machine *m* during the time span between the current time *t* and
    *pₘⱼ* previous times. For each machine and time instant.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保每台机器一次只处理一个作业。这在时间索引方法中是一个难点。为此，我们声明在当前时间 *t* 和 *pₘⱼ* 之前的时间段内，每台机器 *m* 上最多只能有一个作业
    *j* 开始。对于每台机器和每个时间点。
- en: The starting time of job *j* in machine *m* must be greater than the starting
    time of the previous operation of job *j* plus its processing time.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业 *j* 在机器 *m* 上的开始时间必须大于作业 *j* 上一个操作的开始时间加上其处理时间。
- en: The total makespan is greater than the starting time of every operation plus
    its processing time.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总完成时间必须大于每个操作的开始时间加上其处理时间。
- en: '![](../Images/1fc2dd7af812196db516efdb1922c496.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fc2dd7af812196db516efdb1922c496.png)'
- en: Job-shop time-indexed model. (Image by the author).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作业车间时间索引模型。（作者提供的图片）。
- en: Implementation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: Before diving into the models, let us create a few utility classes to handle
    the parameters of this problem. The first will be *JobSequence* a Python *list*
    child class with methods to find previous and following elements in a sequence.
    This will be useful when referring to the sequence of machines for each job.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入模型之前，让我们创建一些工具类来处理这个问题的参数。第一个将是 *JobSequence*，一个 Python *list* 的子类，具有查找序列中前后元素的方法。这在引用每个作业的机器序列时将非常有用。
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now let us create a white-label class for parameters. It must store the set
    of jobs *J*, the set of machines *M*, the sequence of operations of each job *j*
    in a dict of *JobSequences*, and the processing time of each pair *m*, *j* in
    a tuple-index dictionary *p_times*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个白标类来处理参数。它必须存储作业集合 *J*、机器集合 *M*、每个作业 *j* 的操作顺序，保存在 *JobSequences* 的字典中，以及每对
    *m* 和 *j* 的处理时间，保存在元组索引字典 *p_times* 中。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And at last, a class to generate random problem instances from a given number
    of machines, jobs, and interval of processing times.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个从给定的机器数量、作业数量和处理时间区间生成随机问题实例的类。
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we can instantiate random problems at ease to validate our models.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以轻松地实例化随机问题来验证我们的模型。
- en: In the following steps, we will create three classes that inherit from *pyomo’s
    ConcreteModel*. The first will be a white-label class for the MIP models. The
    second and the third will be the disjunctive and time-indexed model classes respectively.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将创建三个继承自 *pyomo’s ConcreteModel* 的类。第一个将是 MIP 模型的白标类。第二个和第三个将分别是分别是非线性模型和时间索引模型类。
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One can notice the sets of jobs *J* and machines *M* are stored in the instance
    attributes of the same name. The attribute *p* holds processing times, and *V*
    is the reasonable upper limit for makespan.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以注意到，作业集合 *J* 和机器集合 *M* 存储在同名的实例属性中。属性 *p* 保存处理时间，*V* 是合理的完成时间上限。
- en: Let us now create the disjunctive model, the *DisjModel* class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来创建不等式模型，即 *DisjModel* 类。
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Instances of *DisjModel* carry attributes *x*, *z*, and *C* — of the variables
    previously described. The objective is quite simple: minimize one of the decision
    variables: *C*. And notice we still need to define rules for the constraints.
    They are defined in the same order previously listed when introducing the model.
    Let us now write them in *pyomo* style.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*DisjModel* 实例包含了之前描述的变量的属性 *x*、*z* 和 *C*。目标非常简单：最小化其中一个决策变量：*C*。注意，我们仍然需要定义约束的规则。这些规则按引入模型时列出的顺序定义。现在让我们用
    *pyomo* 风格编写它们。'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And we are ready to solve JSSP problems with the disjunctive model approach.
    Let us define the time-indexed model as well.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好用不等式模型方法解决 JSSP 问题。让我们也定义时间索引模型。
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once again, constraints were defined in the same order they were previously
    presented. Let us write them in *pyomo* style too.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，约束是按照之前介绍的顺序定义的。我们也将用 *pyomo* 风格编写这些约束。
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And we are ready to test how these models perform in some randomly generated
    problems!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好测试这些模型在一些随机生成的问题中的表现了！
- en: Results
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: Let us instantiate a random 4x3 (*J*x*M*) problem and see how our models perform.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实例化一个随机的 4x3 (*J*x*M*) 问题，看看我们的模型表现如何。
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To solve these examples, I will use the open-source solver CBC. You can download
    CBC binaries from [AMPL](https://ampl.com/products/solvers/open-source-solvers/#cbc)
    or from [this link](https://www.coin-or.org/download/binary/Cbc/). You can also
    find an installation tutorial [here](https://github.com/coin-or/Cbc). As the CBC
    executable is included in the PATH variable of my system, I can instantiate the
    solver without specifying the path to an executable file. If yours is not, parse
    the keyword argument “executable” with the path to your executable file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些示例，我将使用开源解算器CBC。你可以从[AMPL](https://ampl.com/products/solvers/open-source-solvers/#cbc)或[这个链接](https://www.coin-or.org/download/binary/Cbc/)下载CBC二进制文件。你还可以在[这里](https://github.com/coin-or/Cbc)找到安装教程。由于CBC可执行文件已包含在我的系统的PATH变量中，我可以在不指定可执行文件路径的情况下实例化解算器。如果你的系统中没有设置PATH变量，请使用关键字参数“executable”并提供可执行文件的路径。
- en: Alternatively, one could have used GLPK to solve this problem (or any other
    solver compatible with *pyomo*). The latest available GLPK version can be found
    [here](http://ftp.gnu.org/gnu/glpk/) and the Windows executable files can be found
    [here](https://sourceforge.net/projects/winglpk/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，也可以使用GLPK来解决这个问题（或任何其他兼容*pyomo*的解算器）。最新的GLPK版本可以在[这里](http://ftp.gnu.org/gnu/glpk/)找到，Windows可执行文件可以在[这里](https://sourceforge.net/projects/winglpk/)找到。
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The solver had no trouble finding the optimal solution for the disjunctive model
    and proving optimality in less than one second.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 解算器在不到一秒的时间内顺利找到了判别模型的最优解，并证明了其最优性。
- en: '![](../Images/08547d91baa7f81cae1dc9c94a28697a.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08547d91baa7f81cae1dc9c94a28697a.png)'
- en: Results of disjunctive model. (Image by the author).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 判别模型的结果。（图像由作者提供）。
- en: However, we can see that even for this simple problem, the solver could not
    find the optimal solution for the time-indexed model within the limit of 20 seconds.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以看到，即使对于这个简单的问题，解算器在20秒的限制内也未能找到时间索引模型的最优解。
- en: '![](../Images/c19de4258b494f1a91e1c9365f1f1e92.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c19de4258b494f1a91e1c9365f1f1e92.png)'
- en: Results of time-indexed model. (Image by the author).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 时间索引模型的结果。（图像由作者提供）。
- en: Amazing to see the difference in performance for two models with the same idea
    just by rearranging the mathematical equations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，通过重新排列数学方程式，两个具有相同思想的模型在性能上的差异。
- en: By the way, those interested might find the complete code (plots included) in
    [this repository](https://github.com/bruscalia/jobshop).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，感兴趣的朋友可以在[这个仓库](https://github.com/bruscalia/jobshop)中找到完整的代码（包括图表）。
- en: Further reading
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For larger instances, due to combinatorial aspects of this problem, even high-performance
    commercial solvers, such as Gurobi or Cplex, might face difficulties to provide
    good quality solutions and prove optimality. In this context, metaheuristics can
    be an interesting alternative. I would suggest the interested reader to look for
    the papers “[Parallel GRASP with path-relinking for job shop scheduling](http://doi.org/10.1016/S0167-8191(03)00014-0)”
    (Aiex et al., 2003) and “[An extended Akers graphical method with a biased random-key
    genetic algorithm for job-shop scheduling](https://doi.org/10.1111/itor.12044)”
    (Gonçalves & Resende, 2014). I recently tried to implement simplified versions
    of these algorithms and had some interesting results, although pure Python implementation
    is still time-expensive. You can find them in [this repository](https://github.com/bruscalia/jobshop).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的实例，由于问题的组合性质，即使是高性能的商业解算器，如Gurobi或Cplex，也可能难以提供高质量的解决方案并证明最优性。在这种情况下，元启发式算法可能是一个有趣的替代方案。我建议感兴趣的读者查阅论文“[具有路径重连的并行GRASP用于作业车间调度](http://doi.org/10.1016/S0167-8191(03)00014-0)”（Aiex
    et al., 2003）和“[带有偏随机关键遗传算法的扩展Akers图形方法用于作业车间调度](https://doi.org/10.1111/itor.12044)”（Gonçalves
    & Resende, 2014）。我最近尝试实现了这些算法的简化版本，并获得了一些有趣的结果，尽管纯Python实现仍然耗时。你可以在[这个仓库](https://github.com/bruscalia/jobshop)中找到它们。
- en: Conclusions
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, two different mixed-integer programming approaches for the
    job-shop scheduling problem (JSSP) were implemented and solved using the Python
    library *pyomo* and the open-source solver CBC. The disjunctive model proved to
    be a better alternative for the original JSSP, although more complex real-world
    models might share similarities with the time-indexed formulation for incorporating
    additional rules. The [complete code](https://github.com/bruscalia/jobshop) used
    in these examples is available for further use.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，实施并解决了两种不同的混合整数规划方法用于车间调度问题（JSSP），使用了 Python 库 *pyomo* 和开源求解器 CBC。尽管更复杂的现实世界模型可能与用于整合附加规则的时间索引形式类似，但离散模型被证明是原始
    JSSP 的更好替代方案。用于这些示例的 [完整代码](https://github.com/bruscalia/jobshop) 供进一步使用。
- en: References
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Aiex, R. M., Binato, S., & Resende, M. G. (2003). *Parallel GRASP with path-relinking
    for job shop scheduling*. Parallel Computing, 29(4), 393–430.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Aiex, R. M., Binato, S., & Resende, M. G. (2003). *用于车间调度的并行 GRASP 与路径重联*。并行计算，29(4)，393–430。
- en: Bynum, M. L. et al., 2021\. *Pyomo-optimization modeling in python.* Springer.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Bynum, M. L. 等，2021。*Python 中的 Pyomo 优化建模*。Springer。
- en: Gonçalves, J. F., & Resende, M. G. (2014). *An extended Akers graphical method
    with a biased random‐key genetic algorithm for job‐shop scheduling*. International
    Transactions in Operational Research, 21(2), 215–246.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Gonçalves, J. F., & Resende, M. G. (2014). *一种扩展的 Akers 图形方法与带偏差的随机密钥遗传算法用于车间调度*。国际运筹研究杂志，21(2)，215–246。
- en: Kondili, E., & Sargent, R. W. H. (1988). *A general algorithm for scheduling
    batch operations* (pp. 62–75). Department of Chemical Engineering, Imperial College.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Kondili, E., & Sargent, R. W. H. (1988). *用于批量操作调度的通用算法*（第62–75页）。帝国学院化学工程系。
- en: 'Ku, W. Y., & Beck, J. C. (2016). *Mixed integer programming models for job
    shop scheduling: A computational analysis*. Computers & Operations Research, 73,
    165–173.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Ku, W. Y., & Beck, J. C. (2016). *用于车间调度的混合整数规划模型：计算分析*。计算机与运筹研究，73，165–173。
- en: Manne, A. S. (1960). On the job-shop scheduling problem. *Operations research*,
    *8*(2), 219–223.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Manne, A. S. (1960). 车间调度问题。*运筹研究*，*8*(2)，219–223。
- en: Wagner, H. M. (1959). An integer linear‐programming model for machine scheduling.
    *Naval research logistics quarterly*, *6*(2), 131–140.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Wagner, H. M. (1959). 一个用于机器调度的整数线性规划模型。*海军研究物流季刊*，*6*(2)，131–140。
