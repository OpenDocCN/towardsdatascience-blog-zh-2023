- en: Create Your Own Stable Diffusion UI on AWS in Minutes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/create-your-own-stable-diffusion-ui-on-aws-in-minutes-35480dfcde6a?source=collection_archive---------0-----------------------#2023-01-03](https://towardsdatascience.com/create-your-own-stable-diffusion-ui-on-aws-in-minutes-35480dfcde6a?source=collection_archive---------0-----------------------#2023-01-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deploy a text-to-image web app with just one command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://heiko-hotz.medium.com/?source=post_page-----35480dfcde6a--------------------------------)[![Heiko
    Hotz](../Images/d08394d46d41d5cd9e76557a463be95e.png)](https://heiko-hotz.medium.com/?source=post_page-----35480dfcde6a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----35480dfcde6a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----35480dfcde6a--------------------------------)
    [Heiko Hotz](https://heiko-hotz.medium.com/?source=post_page-----35480dfcde6a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F993c21f1b30f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-your-own-stable-diffusion-ui-on-aws-in-minutes-35480dfcde6a&user=Heiko+Hotz&userId=993c21f1b30f&source=post_page-993c21f1b30f----35480dfcde6a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----35480dfcde6a--------------------------------)
    ¬∑8 min read¬∑Jan 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F35480dfcde6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-your-own-stable-diffusion-ui-on-aws-in-minutes-35480dfcde6a&user=Heiko+Hotz&userId=993c21f1b30f&source=-----35480dfcde6a---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F35480dfcde6a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcreate-your-own-stable-diffusion-ui-on-aws-in-minutes-35480dfcde6a&source=-----35480dfcde6a---------------------bookmark_footer-----------)![](../Images/b851f45536bb5603bc1e28d8969d743e.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image by author ‚Äî created with Stable Diffusion
  prefs: []
  type: TYPE_NORMAL
- en: What is this about?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stable Diffusion (SD) has quickly become one of the most popular text-to-image
    (a.k.a. ‚ÄúAI Art Generation‚Äù) models in 2022\. One key factor contributing to its
    success is that it has been made available as open-source software. This spawned
    a vibrant community that quickly built tools to make SD more accessible to anyone
    interested in it, regardless of their technical knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: One of those tools is the simple yet powerful web interface [stable-diffusion-webui
    by Automatic1111](https://github.com/AUTOMATIC1111/stable-diffusion-webui). It
    allows us to use all the features of SD without any coding and it is also open-source,
    which means anyone can download this Web UI as well as the SD model and deploy
    them anywhere they want. The challenge, however, is that SD still requires GPU
    power to run, lest we want to wait minutes for the generation of one image. And
    many of us don‚Äôt own GPUs powerful enough to run the model.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to Cloud Computing we don‚Äôt have to spend a small fortune on a GPU, we
    can just ‚Äúrent‚Äù one instead. So, in this tutorial we will deploy the Automatic1111
    Web UI on an AWS EC2 instance equipped with a GPU powerful enough to run Stable
    Diffusion. And we will do this with just one command using an [AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)
    template to set up all the infrastructure required.
  prefs: []
  type: TYPE_NORMAL
- en: As always you will find the [code](https://github.com/marshmellow77/stable-diffusion-webui)
    for this tutorial in my GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Why is it important?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having the Stable Diffusion model and even Automatic‚Äôs Web UI available as open-source
    is an important step to democratising access to state-of-the-art AI tools. But
    it‚Äôs not sufficient because the GPU requirements to run these models are still
    prohibitively expensive for most consumers. The GPUs required to run these AI
    models can easily exceed $2,000.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial shows how we can get started with just $0.53 per hour, which is
    the on-demand price for a *g4dn.xlarge* instance on AWS. It lets us use an NVIDIA
    T4 GPU with 16 GB of VRAM. That means we can run the app for a few hours to try
    it out and generate the images we want and then shut down the EC2 instance and
    not pay any more than what we used it for. And all of this with just one click
    of a button, no coding or Linux experience required, thanks to the AWS CloudFormation
    template.
  prefs: []
  type: TYPE_NORMAL
- en: '*One disclaimer before we get started: I‚Äôm obviously biased towards AWS since
    I work there. But the key message I want you to take away from this tutorial is
    that state-of-the-art AI is more accessible and affordable than ever before through
    cloud computing, no matter which provider you end up choosing.*'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow this tutorial we will need an AWS account, and that‚Äôs pretty much
    the only prerequisite. Having the [AWS Command Line Interface (CLI)](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
    installed on your local machine makes things even easier, but I will also demonstrate
    how to follow the tutorial without it and just using the AWS console instead.
  prefs: []
  type: TYPE_NORMAL
- en: Quickstart Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the intro we will be using a CloudFormation (CF) template to
    set everything up with just one comand. After launching the template it will take
    15‚Äì20 minutes until the app is ready, so here is my tip: Launch the template right
    now and then come back to this blog post to dive deeper into what is actually
    happening in the background üòâ'
  prefs: []
  type: TYPE_NORMAL
- en: Launching the app in AWS CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy the [CF template](https://raw.githubusercontent.com/marshmellow77/stable-diffusion-webui/master/sd-web-ui-cf-template.yaml)
    (or, alternatively, clone the entire [repo](https://github.com/marshmellow77/stable-diffusion-webui))
    and run the command below on your local machine. This will create a CF stack called
    ‚Äú*sd-webui-stack*‚Äù in your AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the app in the AWS console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the AWS console, navigate to the CloudFormation section, and choose ‚ÄúCreate
    Stack -> With new resources‚Äù:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33425db65d459db3c5e47739c6078876.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following dialogue, choose ‚ÄúTemplate is ready‚Äù and ‚ÄúUpload a template
    file‚Äù:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1733866e3a8f514d0c34444e97c5ad55.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Choose the CF template file from the repo to upload, name the stack ‚Äú*sd-webui-stack*‚Äù,
    leave the default settings in the following dialogues, and click ‚ÄúSubmit‚Äù in the
    last dialogue. This will create the stack with all the required resources in your
    AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: A peek behind the curtain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have launched the CF template we can pull away the curtain and dive
    deeper into what is actually happening in the background.
  prefs: []
  type: TYPE_NORMAL
- en: The CloudFormation Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let‚Äôs first have a look at the CF Template:'
  prefs: []
  type: TYPE_NORMAL
- en: This template sets up a few resources that are required for the application.
    First we create a ‚ÄúSecurity Group‚Äù to specify which ports will be open on the
    EC2 instance. We choose port 22 because we want to be able to connect to the instance
    via SSH and port 7860 because that‚Äôs where our app will be listening.
  prefs: []
  type: TYPE_NORMAL
- en: Next we set up the EC2 instance that will host the application. In this template
    I chose a Ubuntu Server 22.04 LTS distribution (AMI ID *ami-0574da719dca65348)*,
    simply because that‚Äôs what I‚Äôm most familiar with. You can change this to a different
    distribution if you‚Äôd like, but note that you would have to amend the setup script
    (discussed below) accordingly. We choose a *g4dn.xlarge* instance, as discussed
    above. We also provision 300 GB of disk space to make sure that we have enough
    space to host a number of different models. Finally we run the setup script on
    the EC2 instance, which we will discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Next we create an Elastic IP address and assign it to our EC2 instance. This
    allows us to have a permanent IP address, so even when we shut down the EC2 instance
    and restart it at a later point our app will always be hosted on the same IP address.
  prefs: []
  type: TYPE_NORMAL
- en: The setup script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, we are running a [setup script](https://github.com/marshmellow77/stable-diffusion-webui/blob/master/setup.sh)
    on the EC2 instance which will execute a number of commands to set everything
    up for the Web UI. Let‚Äôs go through it step by step.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first section disables the Ubuntu restart dialogue after installing packages
    and then installs a number of packages that we will need:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This next section downloads and installs the CUDA driver so that we can access
    the GPU of the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that we need to install [Git Large File Storage](https://git-lfs.com/)
    because we will download a Stable Diffusion model which is about 5 GB:'
  prefs: []
  type: TYPE_NORMAL
- en: Now that Git LFS is installed we can download the model from the Hugging Face
    Model Hub. Note that we enabled the option ‚Äúskip-smudge‚Äù which allows us to just
    download the specific files we need. In this tutorial we are downloading SD v2.1
    (512px version) and move it into the directory that the Web UI expects the model
    to be.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can change the script to download a differenct version of Stable
    Diffusion, for example version 1.5\. You can also add as many models you want
    into the UI at a later point by putting them into the odel directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the model we also need a configuration file that is read by
    the WebUI. We download a config file from the [Stable Diffusion Github repo](https://github.com/Stability-AI/StableDiffusion)
    and rename it to match the model name and put it also into the same directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we change the ownership of the WebUI to the user *ubuntu* and kick
    off the the server as that user (because user *root* is not allowed to start the
    application):'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Web UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After 15‚Äì20 minutes the deployment should be completed. We can retrieve the
    IP address of the EC2 instance by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also retrieve it by accessing the EC2 panel in the AWS console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d105eeb215d5d99b126640657cff5f0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Once we have retrieved the IP address we can open the app by navigating in the
    browser to <IP address>:7860 (if the request times out the installation hasn‚Äôt
    finished yet). Once the installation is completed we can see that the app is up
    and running üéâ
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4b94ae55fe28d8f22ef24473673b8d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Shutting down the EC2 instance and restart the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even with only $0.53 per hour we obviously don‚Äôt want to run the instance when
    we don‚Äôt use it. We can stop the instance in the AWS console and restart it when
    we need it again without losing any of the installed apps. Once we restarted the
    EC2 instance we can log into it via SSH and restart the app with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting everything
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to delete all the resources we created (i.e. Security Group, EC2
    instance, Elastic IP), we can just delete the CF stack with the following command
    (or delete it in the AWS console):'
  prefs: []
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would like to stress that this tutorial is a mere starting point for anyone
    who wants to try out using Stable Diffusion via a Web UI. There are several limitations
    in this approach which could be addressed if one wants to use this app in production.
    In particular I did not address any security concerns (note that the app is running
    over http), scaling concerns (if this app is supposed to serve many users at the
    same time), and many other aspects.
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to use this app in production we could use the [AWS Well-Architected
    Framework](https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html)
    as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial we have set up a Web UI for Stable Diffusion with just one
    command thanks to the CF template. This allows us to access state-of-the-art AI
    models without having to commit to buying expensive hardware ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: There are many items in the backlog for this app, I listed them [here](https://github.com/marshmellow77/stable-diffusion-webui#todo-backlog).
    Any contributions to the repo are more than welcome ‚ò∫Ô∏è
  prefs: []
  type: TYPE_NORMAL
- en: Heiko Hotz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: üëã Follow me on [Medium](https://heiko-hotz.medium.com/) and [LinkedIn](https://www.linkedin.com/in/heikohotz/)
    to read more about Generative AI, Machine Learning, and Natural Language Processing.
  prefs: []
  type: TYPE_NORMAL
- en: üë• If you‚Äôre based in Lonon join one of our [NLP London Meetups](https://www.meetup.com/nlp_london/).
  prefs: []
  type: TYPE_NORMAL
- en: ü§ì And if you‚Äôre interested in learning more about how I might potentially help
    with adopting AI & ML in your organisation, reach out on [aiml.consulting](https://www.aiml.consulting/).
  prefs: []
  type: TYPE_NORMAL
