["```py\nimport pyspark\nimport unittest\n\nspark: pyspark.sql.SparkSession | None = None\n\ndef setUpModule():\n    global spark\n    spark = get_spark_session('local')\n\ndef tearDownModule():\n    global spark\n    if spark is None:\n        return\n    try:\n        spark.stop()\n    finally:\n        spark = None \n```", "```py\nimport pyspark\n\ndef get_spark_session(scope='local'):\n    if scope == 'local':\n        return (\n            pyspark.sql.SparkSession.builder\n            .appName('unit-tests')\n            .master('local[4]')\n        ).getOrCreate()\n    else:\n        ...  # TODO\n```", "```py\nclass TestPysparkQueries(unittest.TestCase):\n    def test_session_created(self):\n        self.assertIsNotNone(spark)\n```", "```py\n def test_load_data(self):\n        df = get_family_data()\n        self.assertEqual(25, df.count())\n```", "```py\ndef get_family_data():\n    return (\n        get_spark_session(scope='local')\n        .read.csv(os.path.join(os.path.dirname(__file__), \n                  '../assets/data_sample.csv'))\n    )\n```", "```py\ndef get_family_data():\n    return (\n        get_spark_session(scope='local')\n        .read.csv(os.path.join(os.path.dirname(__file__), \n                  '../assets/data_sample.csv'), header=True)\n    )\n```", "```py\n def test_elder_child_query(self):\n        df = get_elder_child(get_family_data())\n        elders = {_.elder_child for _ in df.toLocalIterator()}\n        self.assertEqual(elders, {'Gus', 'Rita', 'Sam', 'Trent', 'Ursula'})\n```", "```py\ndef get_elder_child(family_df: pyspark.sql.DataFrame):\n    return (\n        family_df\n        .orderBy(f.col('date_born').desc())\n        .groupby('last_name')\n        .agg(f.first('first_name').alias('elder_child'))\n    )\n```", "```py\ndef get_initials_col():\n    return (\n        f.concat(\n            f.substring('first_name', 0, 1),\n            f.lit('. '),\n            f.substring('last_name', 0, 1),\n            f.lit('.'),\n        )\n\n    ).alias('initials')\n```", "```py\n def test_get_initials_col_1_by_1(self):\n        df = (\n            get_family_data()\n            .withColumn('initials', get_initials_col())\n            .orderBy('date_born')\n        )\n        expected_list = ['V. A.', 'W. W.', 'X. M.', 'Y. T.', 'Z. C.', 'I. M.', 'J. T.', 'K. C.', 'L. A.', 'M. W.',\n                         'N. M.', 'O. T.', 'P. C.', 'Q. A.', 'A. A.', 'B. W.', 'C. M.', 'E. T.', 'F. C.', 'G. A.',\n                         'H. W.', 'R. W.', 'S. M.', 'T. T.', 'U. C.']\n        for expected, actual in zip(expected_list, [_.initials for _ in df.toLocalIterator()]):\n            self.assertEqual(expected, actual)\n```", "```py\ndef get_initials(first_name, last_name):\n    return f'{first_name[:1]}. {last_name[:1]}.'\n```", "```py\n def test_get_initials(self):\n        self.assertEqual('B. H.', get_initials('Bob', 'Hope'))\n        self.assertEqual('C. C.', get_initials('Charlie', 'Chaplin'))\n        self.assertEqual('J. L.', get_initials('Jonathan', 'Livingstone'))\n\n    def test_get_initials_col_support_function(self):\n        df = (\n            get_family_data()\n            .withColumn('initials', get_initials_col())\n        )\n        for row in df.toLocalIterator():\n            self.assertEqual(get_initials(row.first_name, row.last_name), row.initials)\n```", "```py\nif __name__ == '__main__':\n    unittest.main()\n```"]