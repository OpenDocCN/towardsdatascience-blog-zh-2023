- en: 'Prompt Engineering Evolution: Defining the New Program Simulation Prompt Framework'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/prompt-engineering-evolution-defining-the-new-program-simulation-prompt-framework-d8a1ee096904?source=collection_archive---------2-----------------------#2023-09-29](https://towardsdatascience.com/prompt-engineering-evolution-defining-the-new-program-simulation-prompt-framework-d8a1ee096904?source=collection_archive---------2-----------------------#2023-09-29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A roadmap for crafting different types of program simulation prompts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@hominum_universalis?source=post_page-----d8a1ee096904--------------------------------)[![Giuseppe
    Scalamogna](../Images/ff7b3bec7c26e5684fba26211b6f027a.png)](https://medium.com/@hominum_universalis?source=post_page-----d8a1ee096904--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d8a1ee096904--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d8a1ee096904--------------------------------)
    [Giuseppe Scalamogna](https://medium.com/@hominum_universalis?source=post_page-----d8a1ee096904--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe039aa8b7221&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprompt-engineering-evolution-defining-the-new-program-simulation-prompt-framework-d8a1ee096904&user=Giuseppe+Scalamogna&userId=e039aa8b7221&source=post_page-e039aa8b7221----d8a1ee096904---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d8a1ee096904--------------------------------)
    ·8 min read·Sep 29, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd8a1ee096904&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprompt-engineering-evolution-defining-the-new-program-simulation-prompt-framework-d8a1ee096904&user=Giuseppe+Scalamogna&userId=e039aa8b7221&source=-----d8a1ee096904---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd8a1ee096904&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprompt-engineering-evolution-defining-the-new-program-simulation-prompt-framework-d8a1ee096904&source=-----d8a1ee096904---------------------bookmark_footer-----------)![](../Images/1d11500b6dcaa48488da1f1520727f47.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: Image by Author and generated with MidJourney'
  prefs: []
  type: TYPE_NORMAL
- en: '**Introduction**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In my recent article, [*New ChatGPT Prompt Engineering Technique: Program Simulation*](https://medium.com/towards-data-science/new-chatgpt-prompt-engineering-technique-program-simulation-56f49746aa7b),
    I explored a new category of prompt engineering techniques that aim to make ChatGPT-4
    behave like a program. While working on it, what struck me in particular was the
    ability of ChatGPT-4 to self-configure functionality within the confines of the
    program specifications. In the original program simulation prompt, we rigidly
    defined a set of functions and expected ChatGPT-4 to maintain the program state
    consistently. The results were impressive and many readers have shared how they
    have successfully adapted this method for a range of use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But what happens if we loosen the reins a bit? What if we give ChatGPT-4 more
    leeway in defining the functions and the program’s behavior? This approach would
    inevitably sacrifice some predictability and consistency. However, the added flexibility
    might give us more options and is likely adaptable across a broader spectrum of
    applications. I have come up with a preliminary framework for this entire category
    of techniques which is shown in the below figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2775575dee28fc7c0c8fa4e69c38bf26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s spend a little of time examining this chart. I have identified two key
    dimensions that are broadly applicable to the way program simulation prompts can
    be crafted:'
  prefs: []
  type: TYPE_NORMAL
- en: Deciding how many and which functions of the program simulation to define.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deciding the degree to which the behavior and configuration of the program is
    autonomous.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first article, we crafted a prompt that would fall into the “Structured
    Pre-Configured” category (purple dot). Today, we are going to explore the “Unstructured
    Self-Configuring” approach (blue dot). What is useful about this diagram is that
    it provides a concise conceptual roadmap for crafting program simulation prompts.
    It also provides easy to apply dimensionality for experimentation, adjustment
    and refinement as you apply the technique.
  prefs: []
  type: TYPE_NORMAL
- en: Unstructured Self-Configuring Program Simulation Prompt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Without further ado, let’s begin our examination of the “Unstructured Self-Configuring
    Program Simulation” approach. I crafted a prompt whose purpose is to create illustrated
    children’s stories as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: “*Behave like a self-assembling program whose purpose is to create illustrated
    children’s stories. You have complete flexibility on determining the program’s
    functions, features, and user interface. For the illustration function, the program
    will generate prompts that can be used with a text-to-image model to generate
    images. Your goal is to run the remainder of the chat as a fully functioning program
    that is ready for user input once this prompt is received.* ”
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the prompt is deceptively very simple. This may be appealing
    in an era where prompts are getting long, confusing and so specific that they
    are difficult to tailor to different situations. We have given GPT-4 full discretion
    over function definition, configuration and program behavior. The only specific
    instructions are aimed at guiding the output for illustrations to be prompts that
    can be used for text-to-image generation. Another important ingredient is that
    I have set a goal that the chat model should strive to accomplish. One final thing
    to note, is that I used the term “self-assembling” as opposed to “self-configuring”.
    You can try both, but “self-configuring” tends to nudge ChatGPT into simulating
    an actual program/user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: '**“Behave like” vs. “Act like”**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s also worth highlighting another distinct word choice in the prompt. You
    have all encountered the guidance to use “Act like an expert of some kind or other”
    in your prompts. In my testing “Act Like” tends to guide chat models toward persona-driven
    responses. “Behave like” offers more flexibility especially when the aim is for
    the model to operate more like a program or a system. And, it can be used in the
    persona-centric contexts as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'If all went as planned, the resulting output should look something like this
    (note: you will all see something a little different.)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4c5441abf5ffc2fdb65aec490affab1.png)'
  prefs: []
  type: TYPE_IMG
- en: That looks and feels like a program. The functions are intuitive and appropriate.
    The menu even goes as far as including “Settings” and “Help & Tutorials”. Let’s
    explore those since I will admit, they were unexpected.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3032a02b8c444a211cde5fffc9b74105.png)'
  prefs: []
  type: TYPE_IMG
- en: The “Settings” presented are very helpful. I’ll make some selections to keep
    the story short, and to set the language and vocabulary level to “Beginner.”
  prefs: []
  type: TYPE_NORMAL
- en: Since we are interested in examining the ability of the model to autonomously
    self-configure the program, I will combine the setting changes into one line of
    text and see if it works.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/197a2b04b02acd7bd62ff8f3f99d8b1f.png)'
  prefs: []
  type: TYPE_IMG
- en: The settings update is confirmed. The menu choices that follow are completely
    free-form but appropriate for the context of where we are in the “program.”
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s check “Help & Tutorials”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5fb637e8fbaa485fbd1a83807e698203.png)'
  prefs: []
  type: TYPE_IMG
- en: And from there let’s take a closer look at “Illustration Prompts & Generation.”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cc099639d6f732a1b02757e3674223c.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, very helpful and nothing short of impressive as we defined none of this
    in our program definition.
  prefs: []
  type: TYPE_NORMAL
- en: I will navigate back to the main menu and launch into creating a new story.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a33046c18e4c460cd49d64edbf856638.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s a nice and simple little story that is 3 pages long and geared at a beginner
    vocabulary level (exactly as we specified in our settings). The functions presented
    again make sense for where we are in the program. We can generate illustrations,
    modify the story or exit to the main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s work on our illustration prompts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c228f73c567fb65e53a1fcd28058a27.png)'
  prefs: []
  type: TYPE_IMG
- en: I have not included the text generated for the other illustration prompts but
    they are similar to the one you see above for page 1\. Let’s provide the illustration
    prompt as-is to MidJourney to produce some images.
  prefs: []
  type: TYPE_NORMAL
- en: '*“A cute brown teddy bear with big, round eyes sitting on a window sill of
    a little blue house in a peaceful town.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c13b87ac79c970f079b815a117d155dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Image by Author and generated with MidJourney'
  prefs: []
  type: TYPE_NORMAL
- en: Very nice. This step was manual and we have the additional challenge of getting
    consistent illustrations across all three pages. It can be done with MidJourney
    but requires uploading one of the images to use as a base to generate the additional
    images. Perhaps DALL·E 3 will include capabilities that will allow this to be
    done seamlessly. At a minimum the functionality announced by OpenAI indicates
    we can generate the images directly in ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s “Save and Exit” and see what happens in our ChatGPT dialogue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b7de9e3d2b1e293e0f63988f1bc88b4d.png)'
  prefs: []
  type: TYPE_IMG
- en: And now, let’s try and “Load Saved Story”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7b04a2e41f9bdd4f621da08122a890d5.png)'
  prefs: []
  type: TYPE_IMG
- en: '“The Lost Teddy” was “saved” and when I instruct it to “Open” it recalls the
    entire story and all the illustration prompts. At the end it provides this self-assembled
    menu of functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3dbed01a0ffcde1150ea4c51bcd711d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Ok. Let’s stop here. You can proceed to generate your own stories if you’d like
    but keep in mind, that due to the prompt’s design, the resultant behavior will
    be different for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to some overarching conclusions and observations.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions and Observations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Unstructured Self-Configuring Program Simulation technique showcases powerful
    capabilities stemming from a simple prompt that provides a clear and concise objective
    but otherwise gives the model broad discretion.
  prefs: []
  type: TYPE_NORMAL
- en: How might it be useful? Well, maybe you don’t know how to define the functions
    that you want your program simulation to perform. Or you have defined some functions
    but are not sure if there are others that might be useful. This approach is great
    for prototyping and experimenting and ultimately devising a “Structured Pre-Configured
    Program Simulation” prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Given that program simulation naturally integrates elements of techniques like
    Chain of Thought, Instruction Based, Step-by-Step, and Role Play, it is a very
    powerful technique category that you should try and keep handy as it aligns with
    a broad cross-section of use cases for chat models.
  prefs: []
  type: TYPE_NORMAL
- en: '**Beyond Generative Chat Models and Towards a Generative Operating System**'
  prefs: []
  type: TYPE_NORMAL
- en: As I continue to dive deeper into the program simulation approach, I definitely
    have a better grasp of why Sam Altman of OpenAI stated that the significance of
    prompt engineering might wane over time. Generative models may evolve to such
    an extent, that they go well beyond generating text and images and instinctively
    know how to perform a given set of tasks to reach a desired outcome. My latest
    exploration makes me think that we are nearer to this reality than we may have
    thought.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider where generative AI may be headed next and to do so, I think
    it is helpful to think of generative models in human terms. Using that mindset
    let’s consider how people attain proficiency in a given area of competence or
    knowledge domain.
  prefs: []
  type: TYPE_NORMAL
- en: The person is trained (either self-trained or externally trained) using domain
    specific knowledge and techniques in both supervised and unsupervised settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The person’s abilities are tested relative to the competence area in question.
    Refinements and additional training are provided as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The person is asked (or asks themselves) to perform a task or accomplish a goal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That sounds a lot like what is done to train generative models. A key distinction
    does however surface in the execution phase or the “ask”. Typically, proficient
    individuals do not need detailed directives.
  prefs: []
  type: TYPE_NORMAL
- en: I believe that in the future, when interacting with generative models, the mechanics
    of the “ask” will more closely resemble our interaction with proficient humans.
    For any given task, models will exhibit a profound ability to understand or infer
    the objective and desired outcome. Given this trajectory, it should be no surprise
    to see the emergence of multi-modal capabilities, such as the integration of DALL·E
    3 with ChatGPT, and ChatGPT’s newly announced abilities to see, think, and hear.
    We might eventually see the emergence of a meta-agent that essentially powers
    the operating systems of our gadgets — be it phones, computers, robots, or any
    other smart device. Some might raise concerns about the inefficiency and environmental
    impact of what would amount to massive amounts of ubiquitous compute. But, if
    history serves as an indicator, and these approaches yield tools and solutions
    that people want, innovation mechanics will kick in and the market will deliver
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading and I hope you find program simulation a useful approach
    in your prompt adventures! I am in the midst of additional explorations so be
    sure to follow me and get notified when new articles are published.
  prefs: []
  type: TYPE_NORMAL
- en: Unless otherwise noted, all images in this article are by the author.
  prefs: []
  type: TYPE_NORMAL
