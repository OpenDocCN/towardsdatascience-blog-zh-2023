- en: Recreating Andrej Karpathy’s Weekend Project — a Movie Search Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/recreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4?source=collection_archive---------3-----------------------#2023-11-07](https://towardsdatascience.com/recreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4?source=collection_archive---------3-----------------------#2023-11-07)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Building a movie recommender system with OpenAI embeddings and a vector database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----9b270d7a92e4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)
    ·9 min read·Nov 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9b270d7a92e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&user=Leonie+Monigatti&userId=3a38da70d8dc&source=-----9b270d7a92e4---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9b270d7a92e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&source=-----9b270d7a92e4---------------------bookmark_footer-----------)![](../Images/e9469f6553eb0ffb4b927e45e7e6705c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Stylized screenshot of the [final movie recommender demo](https://awesome-moviate.weaviate.io/)
    (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'In April 2023, [Andrej Karpathy](https://karpathy.ai/), one of the founding
    members of OpenAI and former Director of AI at Tesla, shared this fun weekend
    hack, a [movie search and recommendation engine](https://awesome-movies.life/):'
  prefs: []
  type: TYPE_NORMAL
- en: The user interface is simple, with two key functionalities. First, you have
    a search bar where you can search for movies by their title. When you then click
    on any movie, you get a list of its 40 most similar movies recommended to you.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6cfd01c37e7c5bf45d28f50e5949f88d.png)'
  prefs: []
  type: TYPE_IMG
- en: Demo live at [https://awesome-movies.life/](https://awesome-movies.life/)
  prefs: []
  type: TYPE_NORMAL
- en: Despite its popularity, Karpathy unfortunately has not publicly shared the project’s
    source code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/211d985776d7aa12c6d29ae98eb6334c.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of [comment](https://twitter.com/karpathy/status/1647644308647071745)
    under original Tweet (Screenshot by author)
  prefs: []
  type: TYPE_NORMAL
- en: So, grab yourself some popcorn, and let’s recreate it ourselves!
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This project is built on four primary components:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenAI embedding model to generate embeddings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weaviate [vector database](https://medium.com/towards-data-science/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78)
    to store the embeddings, which is populated with a Python script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Frontend: HTML, CSS, Js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Backend: NodeJs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thus, to follow along in this tutorial, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python** for data processing and populating the vector database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker and Docker-Compose** for running the vector database locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js and npm** for running the application locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenAI API key** to access the OpenAI embedding model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a Movie Search Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section analyzes Karpathy’s weekend hack and aims to recreate it with
    its own little twists. To build a simple movie search engine, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Preparation: Movie dataset](#f305)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 1: Generate and store embeddings](#553d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 2: Search for movies](#d1dc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 3: Get similar movie recommendations](#5fc7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step 4: Run the demo](#86ba)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full code is open source, and you can find it on [GitHub](https://github.com/weaviate-tutorials/awesome-moviate).
  prefs: []
  type: TYPE_NORMAL
- en: 'Preparation: Movie dataset'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Karpathy’s project indexes all 11,762 movies since 1970, including the plot
    and the summary from Wikipedia.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve something similar without manually scraping Wikipedia, you can use
    the following two datasets from Kaggle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[48,000+ movies dataset](https://www.kaggle.com/datasets/yashgupta24/48000-movies-dataset)
    (License: [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/))
    for the columns `''id''`, `''name''`, `''PosterLink''`, `''Genres''`, `''Actors''`,
    `''Director''`, `''Description''`, `''Keywords''`, and `''DatePublished''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wikipedia Movie Plots](https://www.kaggle.com/datasets/jrobischon/wikipedia-movie-plots)
    (License: [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)), for
    the column `''plot''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The two datasets are merged on the movie title and release year and then filtered
    by movies released after 1970\. You can find the detailed preprocessing steps
    in the `[add_data.py](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/add_data.py)`
    file. The resulting DataFrame contains roughly 35,000 movies of which about 8,500
    movies have a plot in addition to the description and looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a1bcfc5105b915beac48139e6b91844a.png)'
  prefs: []
  type: TYPE_IMG
- en: Preprocessed movies dataframe (Screenshot by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Generate and store embeddings'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The core of this demo project is the embeddings of the movie data objects,
    which are mainly used to recommend movies by plot similarity. In Karpathy’s project,
    vector embeddings are generated for the movie summaries and plots. There are two
    options to generate vector embeddings:'
  prefs: []
  type: TYPE_NORMAL
- en: Term Frequency-Inverse Document Frequency (TF-IDF), which are simple bigrams
    and should be used for the individual word use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    [embedding model from OpenAI](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings),
    which should be used for semantic similarity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, the similarity is calculated based on each movie’s Wikipedia
    summary and plot with two choices for a similarity ranker:'
  prefs: []
  type: TYPE_NORMAL
- en: k-Nearest Neighbor (kNN) using cosine similarity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support Vector Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karpathy suggests a combination of `[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    and kNN for a good and fast default setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'And last but not least, as stated in this infamous response, the vector embeddings
    are stored in `np.array`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2bd195ca70bea5862e395d4a06782b09.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of [comment](https://twitter.com/karpathy/status/1647374645316968449)
    under original Tweet (Screenshot by author)
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we will also use the `[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    embedding model from OpenAI but store the vector embeddings in a vector database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Namely, we will use [Weaviate](https://weaviate.io/)*, an open source vector
    database. Although I could argue that vector databases are much faster than when
    you store your embeddings in `np.array`because they use vector indexing, let’s
    be honest here: At this scale (thousands), you won’t notice any difference in
    speed. My main reason for using a vector database here is that Weaviate has many
    convenient built-in functionalities you can use out of the box, such as automatic
    vectorization using embedding models.'
  prefs: []
  type: TYPE_NORMAL
- en: First, as shown in the `[add_data.py](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/add_data.py)`
    file, you need to set up your Weaviate client, which connects to a local Weaviate
    database instance, as follows. Additionally, you will define your OpenAI API key
    here to enable the usage of the integrated OpenAI modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, you will define a data collection called `Movies` to store the movie data
    objects, which is analogous to creating a table in a relational database. In this
    step, you define the `text2vec-openai` module as a vectorizer, which enables automatic
    data vectorization at import and query time, and in the module settings, you define
    to use the `[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    embedding model. Additionally, you can define the cosine distance as the similarity
    measure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you define the movie data objects’ properties and for which properties
    to generate vector embeddings. In the following shortened code snippet, you can
    see that for the properties `movie_id` and `title` no vector embeddings are generated
    because of the `"skip" : True` setting for the vectorizer module. This is because,
    we only want to generate vector embeddings for the `description` and `plot`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you define a batch process to populate the vector database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Search for movies'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Karpathy’s project, the search bar is a simple keyword-based search that
    tries to match your exact query to movie titles verbatim. When some people stated
    that they expected the search to allow semantic search for movies, Karpathy agreed
    that this could be a good extension of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5c0db08fd09133d39658b214d1ae353d.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of [comment](https://twitter.com/karpathy/status/1647376961902366720)
    under original Tweet (Screenshot by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you will enable three types of searches in the `[queries.js](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/queries.js)`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: keyword-based search ([BM25](https://weaviate.io/developers/weaviate/search/bm25)),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: semantic search, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[hybrid search](https://weaviate.io/developers/weaviate/search/hybrid), which
    is a combination of keyword-based search and semantic search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these searches will return `num_movies = 20` movies with the properties
    `['title', 'poster_link', 'genres', 'year', 'director', 'movie_id']`.
  prefs: []
  type: TYPE_NORMAL
- en: To enable **keyword-based search,** you can use a `.withBm25()` search query
    across the properties `['title', 'director', 'genres', 'actors', 'keywords', 'description',
    'plot']`. You can give the property `'title'` a bigger weight by specifying `'title^3'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To enable **semantic search,** you can use a `.withNearText()` search query.
    This will automatically vectorize the search query and retrieve its closest movies
    in the vector space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable **hybrid search,** you can use a `.withHybrid()` search query. The
    `alpha : 0.5` means that keyword search and semantic search are weighted equally.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 3: Get similar movie recommendations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get similar movie recommendations, you can do a `.withNearObject()` search
    query, as shown in the `[queries.js](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/queries.js)`
    file. By passing the movie’s `id`, the query returns the `num_movies = 20` closest
    movies to the given movie in the vector space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Run the demo'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, wrap everything up nicely in a web application with the iconic 2000s
    [GeoCities](https://en.wikipedia.org/wiki/GeoCities) aesthetic (I’m not going
    to bore you with frontend stuff), and voila! You’re all set!
  prefs: []
  type: TYPE_NORMAL
- en: To run the demo locally, clone the [GitHub repository](https://github.com/weaviate-tutorials/awesome-moviate).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the demo’s directory and set up a virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to [set the environment variables for your $OPENAI_API_KEY in your
    virtual environment.](https://stackoverflow.com/questions/9554087/setting-an-environment-variable-in-virtualenv)
    Additionally, run the following command in the directory to install all required
    dependencies in your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, set your OPENAI_API_KEY in the `docker-compose.yml` file and run the following
    command to run Weaviate locally via Docker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once your Weaviate instance is up and running, run the `add_data.py` file to
    populate your vector database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Before you can run your application, install all required node modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Finally, run the following command to start up your movie search engine application
    locally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, navigate to [http://localhost:3000/](http://localhost:3000/) and start
    playing around with your application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This article has recreated Andrej Karpathy’s fun weekend project of a movie
    search engine/recommender system. Below, you can see a short video of the finished
    [live demo](https://awesome-moviate.weaviate.io/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b3edc4058d918016f21473cf8ff12bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Demo live at [https://awesome-moviate.weaviate.io/](https://awesome-moviate.weaviate.io/)
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to the original project, this project uses a vector database to
    store the embeddings. Also, the search functionality was extended to allow for
    semantic and hybrid searches as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you play around with it, you’ll notice that it is not perfect, but just
    as Karpathy has said:'
  prefs: []
  type: TYPE_NORMAL
- en: “it works ~okay hah, have to tune it a bit more.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can find the project’s open source code on [GitHub](https://github.com/weaviate-tutorials/awesome-moviate)
    and tweak it if you like. Some suggestions for further improvements could be to
    play around with vectorizing different properties, to tweak the weighting between
    keyword search and semantic search or to switch out the embedding model with an
    open source alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Enjoyed This Story?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----9b270d7a92e4--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----9b270d7a92e4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  prefs: []
  type: TYPE_NORMAL
- en: Disclaimer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, I am a developer advocate at [Weaviate](https://weaviate.io/),
    an open-source [vector database](https://weaviate.io/blog/what-is-a-vector-database).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This project is not an original idea: The project is inspired by [Andrej Karpathy’s
    weekend project](https://twitter.com/karpathy/status/1647372603907280896) and
    the implementation is based on an [old demo project of a movie search engine](https://github.com/weaviate/weaviate-examples/tree/main/movies-search-engine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
