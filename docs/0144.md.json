["```py\nimport pandas as pd\nimport numpy as np\n\n# simulated data for widget A\ndf_a = pd.DataFrame(\n    {\n        'Month':pd.date_range(\n            start = '01-01-2012',\n            end = '31-12-2022',\n            freq = 'MS'\n        ),\n        'Quotes':np.random.randint(\n            low = 1_000_000,\n            high = 2_500_000,\n            size = 132\n        ),\n        'Numbers':np.random.randint(\n            low = 300_000,\n            high = 500_000,\n            size = 132\n        ),\n        'Amounts':np.random.randint(\n            low = 750_000,\n            high = 1_250_000,\n            size = 132\n        )\n    }\n)\n\ndf_a['Product'] = 'A'\n\n# simulated data for widget B\ndf_b = pd.DataFrame(\n    {\n        'Month':pd.date_range(\n            start = '01-01-2012',\n            end = '31-12-2022',\n            freq = 'MS'\n        ),\n        'Quotes':np.random.randint(\n            low = 100_000,\n            high = 800_000,\n            size = 132\n        ),\n        'Numbers':np.random.randint(\n            low = 10_000,\n            high = 95_000,\n            size = 132\n        ),\n        'Amounts':np.random.randint(\n            low = 450_000,\n            high = 750_000,\n            size = 132\n        )\n    }\n)\n\ndf_b['Product'] = 'B'\n\n# put it together & sort\ndf = pd.concat([df_a,df_b],axis = 0)\ndf.sort_values(by = 'Month',inplace = True)\ndf.reset_index(drop = True,inplace = True)\n```", "```py\n# average sale\ndf['Average sale'] = df['Amounts'] / df['Numbers']\n\n# conversion\ndf['Product conversion'] = df['Numbers'] / df['Quotes']\n```", "```py\n# remove day of month from month column\ndf.style.format({'Month':'{:%Y-%m}'})\n```", "```py\n# use full name of month\ndf.style.format({'Month':'{:%B %Y}'})\n```", "```py\n# use abbreviated month name\ndf.style.format({'Month':'{:%b %Y}'})\n```", "```py\n# year and month number, separated by letter 'M'\ndf.style.format({'Month':'{:%Y M%m}'})\n```", "```py\n# thousands separator for absolute numbers\ndf.style.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}'\n    }\n)\n```", "```py\n# currency formatting\ndf.style.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}'\n    }\n)\n```", "```py\n# different currency representation\ndf.style.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'{:,.2f} (£)'\n    }\n)\n```", "```py\n# percentage formatting\ndf.style.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}',\n        'Product conversion':'{:.2%}'\n    }\n)\n```", "```py\n# suppress the index\ndf.style.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}',\n        'Product conversion':'{:.2%}'\n    }\n).hide_index()\n```", "```py\n# function to conditionally highlight rows based on product\ndef highlight_product(s,product,colour = 'yellow'):\n    r = pd.Series(data = False,index = s.index)\n    r['Product'] = s.loc['Product'] == product\n\n    return [f'background-color: {colour}' if r.any() else '' for v in r]\n\n# apply the formatting\ndf.style\\\n.apply(highlight_product,product = 'A',colour = '#DDEBF7', axis = 1)\\\n.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}',\n        'Product conversion':'{:.2%}'\n    }\n).hide_index()\n```", "```py\n# function to highlight rows based on average sale\ndef highlight_average_sale(s,sale_threshold = 5):\n    r = pd.Series(data = False,index = s.index)\n    r['Product'] = s.loc['Average sale'] > sale_threshold\n\n    return ['background-color: yellow' if r.any() else '' for v in r]\n\n# apply the formatting\ndf.iloc[:6,:].style\\\n.apply(highlight_average_sale,sale_threshold = 20, axis = 1)\\\n.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}',\n        'Product conversion':'{:.2%}'\n    }\n).hide_index()\n```", "```py\n# functions to change font colour based on a threshold\ndef colour_threshold_lessthan(value,threshold,colour = 'red'):\n    if value < threshold:\n        return f'color: {colour}'\n    else:\n        return ''\n\ndef colour_threshold_morethan(value,threshold,colour = 'green'):\n    if value > threshold:\n        return f'color: {colour}'\n    else:\n        return ''\n\n# functions to change font weight based on a threshold    \ndef weight_threshold_lessthan(value,threshold):\n    if value < threshold:\n        return f'font-weight: bold'\n    else:\n        return ''\n\ndef weight_threshold_morethan(value,threshold):\n    if value > threshold:\n        return f'font-weight: bold'\n    else:\n        return ''\n\n# apply the formatting\ndf.style\\\n.apply(highlight_product,product = 'A',colour = '#DDEBF7', axis = 1)\\\n.applymap(colour_threshold_lessthan,threshold = 0.05,subset = ['Product conversion'])\\\n.applymap(weight_threshold_lessthan,threshold = 0.05,subset = ['Product conversion'])\\\n.applymap(colour_threshold_morethan,threshold = 0.2,subset = ['Product conversion'])\\\n.applymap(weight_threshold_morethan,threshold = 0.2,subset = ['Product conversion'])\\\n.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}',\n        'Product conversion':'{:.2%}'\n    }\n)\\\n.hide_index()\n```", "```py\n# align the text\ndf.style\\\n.set_properties(**{’text-align’:’center’})\\\n.apply(highlight_product,product = 'A’,colour = '#DDEBF7’, axis = 1)\\\n.applymap(lambda u: 'color: red' if u < 0.15 else '’,subset = [’Product conversion’])\\\n.applymap(lambda u: 'font-weight: bold' if u < 0.15 else '’,subset = [’Product conversion’])\\\n.applymap(lambda u: 'color: green' if u > 0.2 else '’,subset = [’Product conversion’])\\\n.applymap(lambda u: 'font-weight: bold' if u > 0.2 else '’,subset = [’Product conversion’])\\\n.format(\n    {\n        'Month’:’{:%b %Y}’,\n        'Quotes’:’{:,.0f}’,\n        'Numbers’:’{:,.0f}’,\n        'Amounts’:’£{:,.0f}’,\n        'Average sale’:’£{:,.2f}’,\n        'Product conversion’:’{:.2%}'\n    }\n)\\\n.set_caption(’Sales data <br> Produced by Team X’)\\\n.hide_index() \n```", "```py\n# create a total \"row\" - i.e. column total\ntotal = df.sum()\ntotal['Month'] = pd.NaT\ntotal['Product'] = ''\ntotal['Average sale'] = total['Amounts'] / total['Numbers']\ntotal['Product conversion'] = total['Numbers'] / total['Quotes']\ntotal = total.to_frame().transpose()\n```", "```py\n# function to highlight the total row\ndef highlight_total(s):\n    r = pd.Series(data = False,index = s.index)\n    r['Month'] = pd.isnull(s.loc['Month'])\n\n    return ['font-weight: bold' if r.any() else '' for v in r]\n```", "```py\n# stack and reset index\nd = pd.concat([df,total],axis = 0)\nd.reset_index(drop = True,inplace = True)\n\n# apply formatting\nd.style\\\n.set_properties(**{'text-align':'center'})\\\n.apply(highlight_product,product = 'A',colour = '#DDEBF7',axis = 1)\\\n.apply(highlight_total,axis = 1)\\\n.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}',\n        'Product conversion':'{:.2%}'\n    },\n    na_rep = 'Total'\n)\\\n.set_caption('Sales data <br> Produced by Team X')\\\n.hide_index()\n```", "```py\nimport dataframe_image as dfi\n\n# style the table\nd_styled = d.style\\\n.set_properties(**{'text-align':'center'})\\\n.apply(highlight_product,product = 'A',colour = '#DDEBF7',axis = 1)\\\n.apply(highlight_total,axis = 1)\\\n.format(\n    {\n        'Month':'{:%b %Y}',\n        'Quotes':'{:,.0f}',\n        'Numbers':'{:,.0f}',\n        'Amounts':'£{:,.0f}',\n        'Average sale':'£{:,.2f}',\n        'Product conversion':'{:.2%}'\n    },\n    na_rep = 'Total'\n)\\\n.set_caption('Sales data <br> Produced by Team X')\\\n.hide_index()\n\n# export the table to PNG\nexport_destination = r'C:\\Users\\...\\Presentations'\ndfi.export(\n    d_styled,\n    os.path.join(\n        export_destination,\n        'styled_dataframe.png'\n    )\n)\n```"]