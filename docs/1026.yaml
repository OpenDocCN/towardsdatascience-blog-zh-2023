- en: Comprehending comprehensions to write cleaner, faster Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/comprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84?source=collection_archive---------19-----------------------#2023-03-20](https://towardsdatascience.com/comprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84?source=collection_archive---------19-----------------------#2023-03-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)[![Charles
    Mendelson](../Images/0a8dea9bab2a49da65687095d31065e9.png)](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)
    [Charles Mendelson](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f4d278f87e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&user=Charles+Mendelson&userId=a6f4d278f87e&source=post_page-a6f4d278f87e----d18908b42c84---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)
    ·5 min read·Mar 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd18908b42c84&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&user=Charles+Mendelson&userId=a6f4d278f87e&source=-----d18908b42c84---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd18908b42c84&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&source=-----d18908b42c84---------------------bookmark_footer-----------)![](../Images/858aa3ba9b38a9ad03cd5fee90cae041.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Jonathan Cooper](https://unsplash.com/@theshuttervision?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/BuPQp8BST4I?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Write better comprehensions using functions and walruses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TLDR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: House transformation logic in functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the function in the list comprehension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the walrus operator to assign variables inside the list comprehension namespace
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The problem:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: List and dictionary comprehensions are cornerstones of intermediate to advanced
    Python. Unfortunately, they are also easily misunderstood as a one-to-one replacement
    for `for loops` when you want to produce an iterable.
  prefs: []
  type: TYPE_NORMAL
- en: The comprehension syntax makes it challenging to write clear code when simply
    transferring the contents of the for loop into a comprehension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting started:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with a problem with a moderate amount of complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a given list of islands produced by a [random name generator](https://www.fantasynamegenerators.com/island-names.php):'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the white space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the word “The”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the first letter of the new word lower case
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A beginner using a for loop might approach the problem like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code works, and is logically laid out, but isn’t particularly performant
    or Pythonic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Incomprehensible comprehension:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Strictly replacing it with a list comprehension will produce this piece of
    garbled nonsense:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To understand how to fix this, we have to understand the origins of comprehensions.
    Python borrowed list and dictionary comprehensions from Haskell, which is a very
    opinionated functional language. To effectively use them, you need to think functionally.
    Pass each item of the iterable to a function to perform the transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Functional comprehension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this code, I encapsulated my transformation logic inside a function and
    call the function in the comprehension, separating the logic from the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have the clarity of our original loop, but get to take advantage of
    the increased performance of the comprehension.
  prefs: []
  type: TYPE_NORMAL
- en: This is also a good practice to use for loops as well. Separating the logic
    from implementation makes the code more modular.
  prefs: []
  type: TYPE_NORMAL
- en: What if we need to use the same function inside the comprehension?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if our problem requires preserving multiple steps of the transformation,
    using the same function multiple times?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s change our prompt a little.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we want to take our list of islands and:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the white space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the word “The”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the cleaned-up string as the key in a dictionary
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the same string with the first character turned to lowercase as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A beginner may approach the problem similarly as before, using a for loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similar to our earlier loop, this is easy to understand, logically laid out,
    and cumbersome.
  prefs: []
  type: TYPE_NORMAL
- en: Using a functional comprehension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll make a couple of changes to our function from before. We’ll break up
    our logic into two functions, one for replacing the unwanted characters, and one
    for converting the first character to lowercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The logic makes sense, but we have to call prep_island_name() twice, which is
    messy and inefficient.
  prefs: []
  type: TYPE_NORMAL
- en: Walrus to the rescue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The walrus operator `:=` (also called the assignment operator), introduced in
    Python 3.8, allows you to define variable names in namespaces you can't traditionally
    use `=` .
  prefs: []
  type: TYPE_NORMAL
- en: 'Now instead of calling the prep_island_name() function twice, we can use the
    assignment operator to define a variable inside the comprehension and pass that
    variable to turn_first_letter_lowercase(). Pay special attention to the parentheses
    that surround the key definition in our comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It took me an embarrassingly long amount of time to figure out how to use list
    comprehensions effectively because I was stuck thinking of them as for loops.
    Thinking functionally helped me break my for loop habit and write cleaner faster
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the walrus operator strips away the final advantage of for loops, easy
    variable assignment.
  prefs: []
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Charles Mendelson is a Seattle-based Data Engineer who is also an instructional
    assistant at the University of Washington’s School of Professional and Continuing
    Education, where he teaches in their Python certificate program.
  prefs: []
  type: TYPE_NORMAL
- en: He is about to graduate with a master’s from the Harvard Extension School where
    he has been studying psychology. If you want to get in touch with him, the best
    way is on [LinkedIn](https://www.linkedin.com/in/charles-mendelson-carobert/),
    where he was named one of the top 25 Data Engineering influencers of 2022 by Databand.ai.
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/effective-comprehensons-in-python/)
    *on March 20, 2023.*'
  prefs: []
  type: TYPE_NORMAL
