- en: Comprehending comprehensions to write cleaner, faster Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解列表推导式以编写更简洁、更快速的Python代码
- en: 原文：[https://towardsdatascience.com/comprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84?source=collection_archive---------19-----------------------#2023-03-20](https://towardsdatascience.com/comprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84?source=collection_archive---------19-----------------------#2023-03-20)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/comprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84?source=collection_archive---------19-----------------------#2023-03-20](https://towardsdatascience.com/comprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84?source=collection_archive---------19-----------------------#2023-03-20)
- en: '[](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)[![Charles
    Mendelson](../Images/0a8dea9bab2a49da65687095d31065e9.png)](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)
    [Charles Mendelson](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)[![Charles
    Mendelson](../Images/0a8dea9bab2a49da65687095d31065e9.png)](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)
    [Charles Mendelson](https://medium.com/@Carobert?source=post_page-----d18908b42c84--------------------------------)'
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f4d278f87e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&user=Charles+Mendelson&userId=a6f4d278f87e&source=post_page-a6f4d278f87e----d18908b42c84---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)
    ·5 min read·Mar 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd18908b42c84&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&user=Charles+Mendelson&userId=a6f4d278f87e&source=-----d18908b42c84---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f4d278f87e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&user=Charles+Mendelson&userId=a6f4d278f87e&source=post_page-a6f4d278f87e----d18908b42c84---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d18908b42c84--------------------------------)
    ·5分钟阅读·2023年3月20日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd18908b42c84&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&user=Charles+Mendelson&userId=a6f4d278f87e&source=-----d18908b42c84---------------------clap_footer-----------)'
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd18908b42c84&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&source=-----d18908b42c84---------------------bookmark_footer-----------)![](../Images/858aa3ba9b38a9ad03cd5fee90cae041.png)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd18908b42c84&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcomprehending-comprehensions-to-write-cleaner-faster-python-d18908b42c84&source=-----d18908b42c84---------------------bookmark_footer-----------)![](../Images/858aa3ba9b38a9ad03cd5fee90cae041.png)'
- en: Photo by [Jonathan Cooper](https://unsplash.com/@theshuttervision?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/BuPQp8BST4I?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jonathan Cooper](https://unsplash.com/@theshuttervision?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/BuPQp8BST4I?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Write better comprehensions using functions and walruses
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数和海象运算符编写更好的推导式
- en: TLDR
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TLDR
- en: House transformation logic in functions.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将转换逻辑封装在函数中。
- en: Call the function in the list comprehension.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表推导式中调用该函数。
- en: Use the walrus operator to assign variables inside the list comprehension namespace
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用海象运算符在列表推导式命名空间内赋值
- en: 'The problem:'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：
- en: List and dictionary comprehensions are cornerstones of intermediate to advanced
    Python. Unfortunately, they are also easily misunderstood as a one-to-one replacement
    for `for loops` when you want to produce an iterable.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和字典推导是中级到高级 Python 的基石。不幸的是，它们也很容易被误解为`for`循环的一对一替代品，当你想要生成一个可迭代对象时。
- en: The comprehension syntax makes it challenging to write clear code when simply
    transferring the contents of the for loop into a comprehension.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 推导式的语法使得将`for`循环的内容直接转移到推导式中时，编写清晰的代码变得具有挑战性。
- en: 'Getting started:'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门：
- en: Let’s start with a problem with a moderate amount of complexity.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个复杂度适中的问题开始。
- en: 'For a given list of islands produced by a [random name generator](https://www.fantasynamegenerators.com/island-names.php):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于由[随机名称生成器](https://www.fantasynamegenerators.com/island-names.php)生成的岛屿列表：
- en: Remove the white space
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除空白
- en: Replace the word “The”
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 替换单词“the”
- en: Make the first letter of the new word lower case
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新单词的首字母变为小写
- en: 'A beginner using a for loop might approach the problem like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个初学者使用`for`循环可能会这样解决问题：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code works, and is logically laid out, but isn’t particularly performant
    or Pythonic.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有效，并且逻辑清晰，但性能和 Pythonic 风格上并不是特别出色。
- en: 'Incomprehensible comprehension:'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 难以理解的推导式：
- en: 'Strictly replacing it with a list comprehension will produce this piece of
    garbled nonsense:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用列表推导来替换它会产生这段难以理解的乱码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To understand how to fix this, we have to understand the origins of comprehensions.
    Python borrowed list and dictionary comprehensions from Haskell, which is a very
    opinionated functional language. To effectively use them, you need to think functionally.
    Pass each item of the iterable to a function to perform the transformation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何修复这个问题，我们必须理解列表推导的起源。Python 从 Haskell 中借鉴了列表和字典推导，Haskell 是一种非常有主张的函数式语言。要有效地使用它们，你需要以函数式思维来考虑。将可迭代对象中的每一项传递给一个函数来执行转换。
- en: Functional comprehension
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式推导
- en: 'In this code, I encapsulated my transformation logic inside a function and
    call the function in the comprehension, separating the logic from the implementation:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我将转换逻辑封装在一个函数中，并在推导式中调用该函数，将逻辑与实现分开：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we have the clarity of our original loop, but get to take advantage of
    the increased performance of the comprehension.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们保留了原始循环的清晰度，但能够利用推导式的性能提升。
- en: This is also a good practice to use for loops as well. Separating the logic
    from implementation makes the code more modular.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`循环也是一种好的实践。将逻辑与实现分开使代码更具模块化。
- en: What if we need to use the same function inside the comprehension?
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果我们需要在推导式中使用相同的函数怎么办？
- en: What if our problem requires preserving multiple steps of the transformation,
    using the same function multiple times?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的问题需要保留多个转换步骤，并多次使用相同的函数怎么办？
- en: Let’s change our prompt a little.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微修改一下提示。
- en: 'Now we want to take our list of islands and:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想对我们的岛屿列表进行操作，并：
- en: Remove the white space
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除空白
- en: Replace the word “The”
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 替换单词“the”
- en: Attach the cleaned-up string as the key in a dictionary
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将清理后的字符串作为字典中的键
- en: Attach the same string with the first character turned to lowercase as the value.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相同的字符串（首字母小写）作为值附加。
- en: 'A beginner may approach the problem similarly as before, using a for loop:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者可能会像以前一样使用`for`循环解决问题：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similar to our earlier loop, this is easy to understand, logically laid out,
    and cumbersome.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前的循环类似，这很容易理解，逻辑清晰，但繁琐。
- en: Using a functional comprehension
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数式推导
- en: 'We’ll make a couple of changes to our function from before. We’ll break up
    our logic into two functions, one for replacing the unwanted characters, and one
    for converting the first character to lowercase:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对之前的函数做几个改动。我们将把逻辑分成两个函数，一个用于替换不需要的字符，另一个用于将首字母转换为小写：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The logic makes sense, but we have to call prep_island_name() twice, which is
    messy and inefficient.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逻辑是合理的，但我们需要调用`prep_island_name()`两次，这样显得繁琐且效率低下。
- en: Walrus to the rescue
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 海象操作符来救援
- en: The walrus operator `:=` (also called the assignment operator), introduced in
    Python 3.8, allows you to define variable names in namespaces you can't traditionally
    use `=` .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 海象操作符`:=`（也称为赋值操作符），在 Python 3.8 中引入，允许你在传统上不能使用`=`的命名空间中定义变量名。
- en: 'Now instead of calling the prep_island_name() function twice, we can use the
    assignment operator to define a variable inside the comprehension and pass that
    variable to turn_first_letter_lowercase(). Pay special attention to the parentheses
    that surround the key definition in our comprehension:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，除了两次调用prep_island_name()函数外，我们可以使用赋值运算符在列表推导内部定义一个变量，并将该变量传递给turn_first_letter_lowercase()。请特别注意我们列表推导中包围关键定义的括号：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Conclusion
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: It took me an embarrassingly long amount of time to figure out how to use list
    comprehensions effectively because I was stuck thinking of them as for loops.
    Thinking functionally helped me break my for loop habit and write cleaner faster
    code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了令人尴尬的长时间才弄明白如何有效地使用列表推导，因为我一直把它们认为是for循环。功能性编程帮助我打破了对for循环的依赖，并编写了更简洁、更快速的代码。
- en: Learning the walrus operator strips away the final advantage of for loops, easy
    variable assignment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 学习海象运算符去除了for循环的最后一个优势——轻松的变量赋值。
- en: About
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于
- en: Charles Mendelson is a Seattle-based Data Engineer who is also an instructional
    assistant at the University of Washington’s School of Professional and Continuing
    Education, where he teaches in their Python certificate program.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 查尔斯·门德尔森是一位总部位于西雅图的数据工程师，同时也是华盛顿大学继续教育学院的教学助理，在那里他教授Python证书课程。
- en: He is about to graduate with a master’s from the Harvard Extension School where
    he has been studying psychology. If you want to get in touch with him, the best
    way is on [LinkedIn](https://www.linkedin.com/in/charles-mendelson-carobert/),
    where he was named one of the top 25 Data Engineering influencers of 2022 by Databand.ai.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 他即将从哈佛延伸学院获得心理学硕士学位。如果你想与他联系，最好的方式是通过[LinkedIn](https://www.linkedin.com/in/charles-mendelson-carobert/)，他曾被Databand.ai评选为2022年25位数据工程影响者之一。
- en: '*Originally published at* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/effective-comprehensons-in-python/)
    *on March 20, 2023.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发表于* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/effective-comprehensons-in-python/)
    *2023年3月20日。*'
