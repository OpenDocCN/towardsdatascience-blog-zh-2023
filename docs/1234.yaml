- en: Building a Question Answering PDF Chatbot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/building-a-question-answering-pdf-chatbot-3e3b6372528c?source=collection_archive---------0-----------------------#2023-04-09](https://towardsdatascience.com/building-a-question-answering-pdf-chatbot-3e3b6372528c?source=collection_archive---------0-----------------------#2023-04-09)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: LangChain + OpenAI + Panel + HuggingFace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sophiamyang.medium.com/?source=post_page-----3e3b6372528c--------------------------------)[![Sophia
    Yang, Ph.D.](../Images/c133f918245ea4857dc46df3a07fc2b1.png)](https://sophiamyang.medium.com/?source=post_page-----3e3b6372528c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3e3b6372528c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3e3b6372528c--------------------------------)
    [Sophia Yang, Ph.D.](https://sophiamyang.medium.com/?source=post_page-----3e3b6372528c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fae9cae9cbcd2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-question-answering-pdf-chatbot-3e3b6372528c&user=Sophia+Yang%2C+Ph.D.&userId=ae9cae9cbcd2&source=post_page-ae9cae9cbcd2----3e3b6372528c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3e3b6372528c--------------------------------)
    ¬∑6 min read¬∑Apr 9, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3e3b6372528c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-question-answering-pdf-chatbot-3e3b6372528c&user=Sophia+Yang%2C+Ph.D.&userId=ae9cae9cbcd2&source=-----3e3b6372528c---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3e3b6372528c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuilding-a-question-answering-pdf-chatbot-3e3b6372528c&source=-----3e3b6372528c---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs build a chatbot to answer questions about external PDF files. With 5
    simple steps, you should be able to build a question-answering PDF chatbot like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04e327db177f82e78b649034568bb913.png)'
  prefs: []
  type: TYPE_IMG
- en: 'üòä Want to try out this app? I hosted this app on Hugging Face: [https://sophiamyang-panel-pdf-qa.hf.space/LangChain_QA_Panel_App](https://sophiamyang-panel-pdf-qa.hf.space/LangChain_QA_Panel_App)'
  prefs: []
  type: TYPE_NORMAL
- en: '[üíª](https://emojipedia.org/laptop/) You can find all my code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/tree/main](https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/tree/main)'
  prefs: []
  type: TYPE_NORMAL
- en: 'üìí You can find my Notebook file here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/blob/main/LangChain_QA_Panel_App.ipynb](https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/blob/main/LangChain_QA_Panel_App.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let‚Äôs get started building this question-answering PDF chatbot!
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 0: Set up'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install needed packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Import needed packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Define OpenAI API key: Create an account at OpenAI and create an API key [https://platform.openai.com/account](https://platform.openai.com/account).
    Note that OpenAI API is not free. You will need to set up billing information
    there to be able to use OpenAI API. Alternatively, you can use models from HuggingFace
    Hub or other places. Check out my previous [blog post](/the-easiest-way-to-interact-with-language-models-4da158cfb5c5?sk=271c9c82a16282f93ef3df37f034babe)
    and [video](https://www.youtube.com/watch?v=kmbS6FDQh7c) on how to use other models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Step 1:Define Panel widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make this app, we will need the following widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_input` to upload files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openaikey` to enter your OpenAI key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`widgets` combines all the other widgets: `prompt` for entering your questions
    as text, `run_button` for clicking and running the model, `select_k` for selecting
    the number of relevant chunks, and `select_chain_type` for selecting which chain
    type to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/13977854847cc63fd72ad272b5161716.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 2:Define question-answering function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using LangChain with OpanAI to do question-answering. There are at
    least four ways to do question-answering in LangChain. Check out my previous blog
    post and video on 4 ways of question-answering in LangChain.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this function, we used RetrievalQA to retrieve relevant text chunks and
    then only pass those to the language model. We defined four parameters: ‚Äî'
  prefs: []
  type: TYPE_NORMAL
- en: '`file` is the input PDF file that you are interested in interacting with'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`query` is your question'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chain_type` lets you define the chain type as one of the four options: ‚Äústuff‚Äù,
    ‚Äúmap reduce‚Äù, ‚Äúrefine‚Äù, ‚Äúmap_rerank‚Äù. Check out my previous blog post to learn
    each chain type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k` defines the number of relevant text chunks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example using this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e81186b8414586a4162c4160fc25212.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: show output as a Panel object'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The function above returns the query, result, and source documents from the
    language model. In order to show the results and source documents in a Panel app,
    we need to turn them into a Panel object. In the function `qa_result`, I appended
    the query (`prompt_text`), result ( `result[‚Äúresult‚Äù]`), and source documents
    (`result["source_documents"]`) in a list called `convos` and then turned it into
    a Panel object `pn.Column(*convos)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Step 4:The run button runs the function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, I‚Äôd like to make the `qa_result` function interactive, meaning that when
    I click the run button, I‚Äôd like to run this function. This is very easy to do
    in Panel. We use `pn.bind` to bind the `qa_result` function with the `run_button`
    widget. Note that in the `qa_result` function, we passed in a parameter `_` ,
    which is actually not used in the function. This is simply a placeholder to let
    `pn.bind` know that we can bind one widget to this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I then want to format my output in a box, so I used `pn.WidgetBox`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/281ed418e8c7bb749853ea3c8785e738.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 5: Define Layout'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can combine all the widgets and output in a column using `pn.Column`.
    You can run `panel serve LangChain_QA_Panel_App.ipynb` to serve this app. Now
    you should have a ready-to-run app!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Final Step: Host on Hugging Face Space'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see from the beginning of my video, I hosted my app on Hugging Face:
    [https://sophiamyang-panel-pdf-qa.hf.space/LangChain_QA_Panel_App](https://sophiamyang-panel-pdf-qa.hf.space/LangChain_QA_Panel_App)'
  prefs: []
  type: TYPE_NORMAL
- en: Check out my previous [blog post](/how-to-deploy-a-panel-app-to-hugging-face-using-docker-6189e3789718?sk=9c2bbd9bdbc3917e39dbd1fc9d1a5771)
    and [video](https://www.youtube.com/watch?v=QQYq5rHgsa4) on how to host a Panel
    app on Hugging Face.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what I did for this app:'
  prefs: []
  type: TYPE_NORMAL
- en: I uploaded my [Jupyter Notebook file](https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/blob/main/LangChain_QA_Panel_App.ipynb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I created a [Dockerfile](https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/blob/main/LangChain_QA_Panel_App.ipynb).
    One thing special about this app is that this app creates a .chroma directory
    for the Chroma vector database. So we need to create this directory and give it
    permissions: `RUN mkdir .chroma` and `RUN chomd 777 .chroma`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I included all the needed packages in a `[requirements.txt](https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/blob/main/requirements.txt)`
    [file](https://huggingface.co/spaces/sophiamyang/Panel_PDF_QA/blob/main/requirements.txt)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, by the end of this article, you know how to build a question-answering
    PDF chatbot using LangChain, OpenAI, and Panel, and know how to deploy your app
    to Hugging Face Space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Acknowledgment:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you Jim Bednar and Philipp Rudiger for the guidance and feedback!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76672d3fd26b280ee1d8afa06e636c92.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Volodymyr Hryshchenko](https://unsplash.com/de/@lunarts?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: . . .
  prefs: []
  type: TYPE_NORMAL
- en: By [Sophia Yang](https://www.linkedin.com/in/sophiamyang/) on April 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: Sophia Yang is a Senior Data Scientist. Connect with me on [LinkedIn](https://www.linkedin.com/in/sophiamyang/),
    [Twitter](https://twitter.com/sophiamyang), and [YouTube](https://www.youtube.com/SophiaYangDS)
    and join the DS/ML [Book Club](https://dsbookclub.github.io/) ‚ù§Ô∏è
  prefs: []
  type: TYPE_NORMAL
