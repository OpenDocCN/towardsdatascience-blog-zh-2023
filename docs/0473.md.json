["```py\n# Import the required package\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate the x-axis (from 0 to 1 with step of 1/200)\nx = np.linspace(0,20,200)\n# Generate a sinusoidal 1D Array\ny = np.sin(x)\n\n# Plot the result\nplt.plot(x, y, 'b')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Sinusoidal Signal')\nplt.show()\n```", "```py\n# Define a class\nclass Signal:\n  # Statement 1\n  # Statement 2\n```", "```py\n# Signal Generator Class\nclass Signal:\n  \"\"\"\n  Signal Generator\n  \"\"\"\n  # Define the frequency\n  f = 10 # in Hz\n  # Define the amplitude\n  a = 2\n\n  # Print the variables\n  def vars(self):\n    print('frequency=', self.f)\n    print('amplitude=', self.a)\n```", "```py\n# Define a signal object\nsignal = Signal()\n# Print the frequency of the signal\nprint(signal.f)\n# Calling vars to print the Signal class variables\nsignal.vars()\n```", "```py\n10\nfrequency= 10\namplitude= 2\n```", "```py\n# Signal Generator class\nclass Signal:\n  \"\"\"\n  Signal Generator\n  \"\"\"\n\n  # Initialize the class object\n  def __init__(self, f, a):\n    self.frequency = f\n    self.amplitude = a\n\n  # Print the varibles\n  def vars(self):\n    print('frequency=', self.frequency)\n    print('amplitude=', self.amplitude)\n```", "```py\n# Define a signal object\nsignal = Signal(f=10, a=2)\n# Print the frequency of the signal\nprint(signal.frequency)\n# Calling vars to print the Signal class variables\nsignal.vars()\n```", "```py\n10\nfrequency= 10\namplitude= 2\n```", "```py\n# Building a class Signal for better use.\nclass Signal:\n  \"\"\"\n  Generate sinusoidal signals with specific ampltiudes, frequencies, duration,\n  sampling rate, and phase.\n\n  Example:\n    signal = Signal(amplitude=10, sampling_rate=2000.0)\n    sine = signal.sine()\n    cosine = signal.cosine()\n  \"\"\"\n\n  def __init__(self, amplitude=1, frequency=10, duration=1, sampling_rate=100.0, phase=0):\n    \"\"\"\n    Initialize the Signal class.\n\n    Args:\n        amplitude (float): The amplitude of the signal\n        frequency (int): The frequency of the signal Hz\n        duration (float): The duration of the signal in second\n        sampling_rate (float): The sampling per second of the signal\n        phase (float): The phase of the signal in radians\n\n    Additional parameters,which are required to generate the signal, are\n    calculated and defined to be initialized here too:\n        time_step (float): 1.0/sampling_rate\n        time_axis (np.array): Generate the time axis from the duration and\n                              the time_step of the signal. The time axis is\n                              for better representation of the signal.\n    \"\"\"\n    self.amplitude = amplitude\n    self.frequency = frequency\n    self.duration = duration\n    self.sampling_rate = sampling_rate\n    self.phase = phase\n    self.time_step = 1.0/self.sampling_rate\n    self.time_axis = np.arange(0, self.duration, self.time_step)\n\n  # Generate sine wave\n  def sine(self):\n    \"\"\"\n    Method of Signal\n\n    Returns:\n        np.array of sine wave using the pre-defined variables (amplitude,\n        frequency, time_axis, and phase)\n    \"\"\"\n    return self.amplitude*np.sin(2*np.pi*self.frequency*self.time_axis+self.phase)\n\n  # Generate cosine wave\n  def cosine(self):\n    \"\"\"\n    Method of Signal\n\n    Returns:\n        np.array of cosine wave using the pre-defined variables (amplitude,\n        frequency, time_axis, and phase)\n    \"\"\"\n    return self.amplitude*np.cos(2*np.pi*self.frequency*self.time_axis+self.phase)\n```", "```py\n# Define the first signal, 20Hz and amplitude of 2\ns1 = Signal(amplitude=2, frequency=20, sampling_rate=1000.0, duration=3)\nsine1 = s1.sine()\n\n# Define the second signal, 2Hz and amplitude of 6\ns2 = Signal(amplitude=6, frequency=2, sampling_rate=1000.0, duration=3)\nsine2 = s2.sine()\n\n# Define the second signal, 7Hz and amplitude of 1\ns3 = Signal(amplitude=1, frequency=7, sampling_rate=1000.0, duration=3)\nsine3 = s2.sine()\n\n# Our signal is the sum of the three signals\nsignal = sine1 + sine2 + sine3\n\n# Plot the signal\nplt.plot(s1.time_axis, signal, 'r')\nplt.xlabel('Time [sec]')\nplt.ylabel('Amplitude')\nplt.title('This signal is generated using Signal class')\nplt.show()\n```"]