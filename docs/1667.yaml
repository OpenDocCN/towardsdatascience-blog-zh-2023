- en: Analyze Scientific Publications with E-utilities and Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/analyze-scientific-publications-with-e-utilities-and-python-56f76de22959?source=collection_archive---------3-----------------------#2023-05-19](https://towardsdatascience.com/analyze-scientific-publications-with-e-utilities-and-python-56f76de22959?source=collection_archive---------3-----------------------#2023-05-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to gather data about scientific literature and discover trends
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://neuraljojo.medium.com/?source=post_page-----56f76de22959--------------------------------)[![Jozsef
    Meszaros](../Images/6a2bd76b1ccc00305c19cb6d41d1771e.png)](https://neuraljojo.medium.com/?source=post_page-----56f76de22959--------------------------------)[](https://towardsdatascience.com/?source=post_page-----56f76de22959--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----56f76de22959--------------------------------)
    [Jozsef Meszaros](https://neuraljojo.medium.com/?source=post_page-----56f76de22959--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F71417ba6ebf5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanalyze-scientific-publications-with-e-utilities-and-python-56f76de22959&user=Jozsef+Meszaros&userId=71417ba6ebf5&source=post_page-71417ba6ebf5----56f76de22959---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----56f76de22959--------------------------------)
    ·15 min read·May 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F56f76de22959&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanalyze-scientific-publications-with-e-utilities-and-python-56f76de22959&user=Jozsef+Meszaros&userId=71417ba6ebf5&source=-----56f76de22959---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F56f76de22959&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanalyze-scientific-publications-with-e-utilities-and-python-56f76de22959&source=-----56f76de22959---------------------bookmark_footer-----------)![](../Images/a7ae68b0dc6ab28cdb570c4867252f35.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Alex Block](https://unsplash.com/@alexblock?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Staying on top of scientific research trends is essential for any scientist,
    science writer, or aspiring start-up founder. When it comes to searching biomedical
    science literature, most people will turn to Google Scholar, PubMed, or their
    favorite reference manager. As you might expect, these public-facing search tools
    offer ease of use but sacrifice efficiency, control, and scalability. Thus, they
    are generally not readily useful when it comes to data science. Instead, you’ll
    want to use the E-utilities offered by the National Center of Biotechnology Information
    (NCBI).[1] The scientific articles available from NCBI are stored within the PubMed
    database, which primarily covers life science research, but also a few journals
    related to chemistry and physics.[2]
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: For data science applications, web-based search engines and popular reference
    managers won’t cut it
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The information on how to efficiently use NCBI for data science is strewn about
    various governmental and academic websites. Many of the resources were uploaded
    in the 1990’s, focused on searching for genetic sequences rather than primary
    literature publications, and accompanied by code examples written only in Perl.
    There was once a course on using NCBI’s E-Utilities that was hosted at NIH during
    the early 2000’s, for which Powerpoint “slidesets” along with obligatory clip-art
    illustrations are available [here](https://ftp.ncbi.nlm.nih.gov/pub/PowerTools/eutils/).
    In this article, I will convey the lessons I have learned compiling information
    from these various sources and regular trial-and-error.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** There are many types of data searchable from within NCBI, including
    genetic sequences, phylogenetic trees, 3-D structures, and other information.
    This article will be focused exclusively on searching **primary** **literature**.'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What kind of data science questions can be answered using NCBI?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many kinds of science questions answerable using NCBI. You could,
    for instance, create a cluster-map of author-provided keywords for articles to
    examine publishing trends over time, as I demonstrate at the end of this article.
    Additionally, you could build LLMs and NLP models using abstracts and text from
    publications to assist with making connections between literature. Here are the
    three steps I will cover in the article:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: (1) querying the databases,
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: (2) returning results for multiple publications, and
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: (3) retrieving similar articles and full text versions of articles.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: At the end, I will provide a full documented code example to see how to carry
    out these three steps for a relatively large corpus (~10,000 articles) and an
    accompanying data visualization.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Querying NCBI databases
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To query an NCBI database effectively, you’ll want to learn about certain E-utilities,
    define your search fields, and choose your search parameters — which control the
    way results are returned to your browser or in our case, we’ll use Python to query
    the databases.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Four most useful E-utilities
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are **nine E-utilities** available from NCBI, and they are all implemented
    as server-side fast CGI programs. This means you will access them by creating
    URLs which end in **.cgi** and specify query parameters after a question-mark,
    with parameters separated by ampersands. All of them, except for **EFetch**, will
    give you **either XML or JSON** outputs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '`**ESearch**`generates a list of ID numbers that meet your search query'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following E-Utilities can be used with one or more ID numbers:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '`**ESummary**`journal, author list, grants, dates, references, publication
    type'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**EFetch**`**XML ONLY** all of what `**ESummary**` provides as well as an
    abstract, list of grants used in the research, institutions of authors, and MeSH
    keywords'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**ELink**`provides a list of links to related citations using computed similarity
    score ***as well as providing a link to the published item*** [your gateway to
    the full-text of the article]'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The NCBI hosts 38 databases across their servers, related to a variety of data
    that goes beyond literature citations. To get a complete list of current databases,
    you can use **EInfo** withoutsearch terms:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '`[https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi](https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi)`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Each database will vary in how it can be accessed and the information it returns.
    For our purposes, we’ll focus on the *pubmed* and *pmc* databases because these
    are where scientific literature are searched and retrieved.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The two most important things to learn about searching NCBI are **search fields**
    and **outputs**. The **search fields are numer**ous and will depend on the database.
    The outputs are more straightforward and learning how to use the outputs is essential,
    especially for doing large searches.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Search fields
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You won’t be able to truly harness the potential of E-utilities without knowing
    about the available search fields. You can find a full list of these search fields
    on the [NLM website](https://www.nlm.nih.gov/bsd/mms/medlineelements.html) along
    with a description of each, but for the ***most accurate list of search terms
    specific to a database***, you’ll want to parse your own XML list using this link:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '`[https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?db=pubmed](https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?db=pubmed)`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: with the **db** flag set to the database (we will use *pubmed* for this article,
    but literature is also available through *pmc*).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f468c29de103dbfc12170620a136f19f.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'A list of search fields for querying PubMed MEDLINE records. (Source: [https://www.nlm.nih.gov/bsd/mms/medlineelements.html](https://www.nlm.nih.gov/bsd/mms/medlineelements.html)`)`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: One especially useful search field is the Medline Subject Headings (**MeSH**).[3]
    Indexers, who are experts in the field, maintain the PubMed database and use MeSH
    terms to reflect the subject matter of journal articles as they are published.
    Each indexed publication is typically described by 10 to 12 carefully selected
    MeSH terms by the indexers. If no search terms are specified, then queries will
    be executed against every search term available in the database queried.[4]
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Query parameters
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each of the E-utilities accepts multiple query parameters through the URL line
    which you can use to control the type and amount of output returned from a query.
    This is where you can set the number of search results retrieved or the dates
    searched. Here are a list of the more important parameters:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**Database parameter:**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '`db` should be set to the database you are interested in searching — *pubmed*
    or *pmc* for scientific literature'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date parameters:** You can get more control over the date by using search
    fields, [pdat] for example for the publication date, but date parameters provide
    a more convenient way to constrain results.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '`reldate` the days to be searched relative to the current date, set reldate=1
    for the most recent day'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mindate` and `maxdate` specify date according to the format YYYY/MM/DD, YYYY,
    or YYYY/MM **(a query must contain both** `mindate` **and** `maxdate` **parameters)**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetype` sets the type of date when you query by date — options are ‘mdat’
    (modification date), ‘pdat’ (publication date) and ‘edat’ (Entrez date)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retrieval parameters:**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '`rettype` the type of information to return (for literature searches, use the
    default setting)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retmode` format of the output (XML is the default, though all E-utilities
    except fetch do support JSON)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retmax` is the maximum number of records to return — ***the default is 20
    and the maximum value is 10,000*** (ten thousand)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retstart` given a list of hits for a query, `retstart` specifies the index
    (useful for when your search exceeds the ten thousand maximum)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmd` this is only relevant to `**ELink**` and is used to specify whether to
    return IDs of similar articles or URLs to full-texts'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Python to execute queries and store results
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we know about the E-Utilities, have chosen our search fields, and decided
    upon query parameters, we’re ready to execute queries and store the results —
    even for multiple pages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: While you don’t specifically need to use Python to use the E-utilities, it does
    make it much easier to parse, store, and analyze the results of your queries.
    Here’s how to get started on your data science project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you want to search MeSH terms for the term “myoglobin” between 2022
    and 2023\. You’ll set your **retmax** to 50 for now, but remember ***the max is
    10,000 and you can query at a rate of 3/s.***
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/fcd81481c9d922509e560a15b150f2a0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: The output of the **esearch** query from above.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The results are returned as a list of IDs, which can be used in a subsequent
    search within the database you queried. Note that **“count”** shows there are
    154 results for this query, which you could use if you wanted to get a total count
    of publications for a certain set of search terms. If you wanted to return IDs
    for all the publication, you’d set the **retmax** parameter to the count, or 154\.
    In general, I set this to a very high number so I can retrieve all of the results
    and store them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**Boolean searching** is easy with PubMed and it only requires adding `+OR+`,
    `+NOT+`, or `+AND+` to the URL between search terms. For example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '`[http://eutils.ncbi.nlm.nih.gov/entrez//eutils/esearch.fcgi/?db=pubmed&term=**CEO[cois]+OR+CTO[cois]+OR+CSO[cois]**&mindate=2022&maxdate=2023&retmax=10000](http://eutils.ncbi.nlm.nih.gov/entrez//eutils/esearch.fcgi/?db=pubmed&term=CEO%5Bcois%5D+OR+CTO%5Bcois%5D+OR+CSO%5Bcois%5D&mindate=2022&maxdate=2023&retmax=10000)`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: These search strings can constructed using Python. In the following steps, we’ll
    parse the results using Python’s *json package* to get the IDs for each of the
    publications returned. The IDs can then be used to create a string — this string
    of IDs can be used by the other E-Utilities to return information about the publications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Use ESummary to return information about publications
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of **ESummary** is to return data that you might expect to see in
    a paper’s citation (date of publication, page numbers, authors, etc). Once you
    have a result in the form of a list of IDs from **ESearch** (in the step above),
    you can join this list into a long URL.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: The limit for a URL is 2048 characters, and each publication’s ID is 8 characters
    long, so to be safe, you should split your list of links up into batches of 250
    if you have a list larger than 250 IDs. See my notebook at the bottom of the article
    for an example.
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The results from an **ESummary** are returned in JSON format and can include
    a link to the paper’s full-text:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can again use json to parse *summary_list*. When using the json package,
    you can browse the fields of each individual article by using summary[‘result’][id
    as string], as in the example below:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can create a dataframe to capture the ID for each article along with the
    name of the journal, the publication date, title of the article, a URL for retrieving
    the full text, as well as the first and last author.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Below is a list of all the different fields that **ESummary** returns so you
    can make your own database:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use EFetch when you want abstracts, keywords, and other details (XML output
    only)
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use **EFetch** to return similar fields as **ESummary**, with the caveat
    that the ***result is returned in XML only***. There are several interesting additional
    fields in **EFetch** which include: the abstract, author-selected keywords, the
    Medline Subheadings (MeSH terms), grants that sponsored the research, conflict
    of interest statements, a list of chemicals used in the research, and a complete
    list of all the references cited by the paper. Here’s how you would use BeautifulSoupto
    obtain some of these items:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can use this table to search abstracts, conflict of interest statements,
    or make visuals that connect different fields of research using MeSH headings
    and reference lists. There are of course many other tags that you could explore,
    returned by **EFetch**, here’s how you can see them all using BeautifulSoup:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Using ELink to retrieve similar publications, and full-text links**'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may want to find articles similar to the ones returned by your search query.
    These articles are grouped according to a similarity score using a probabilistic
    topic-based model.[5] To retrieve the similarity scores for a given ID, you must
    pass **cmd=neighbor_score** in your call to **ELink**. Here’s an example for one
    article:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The other function of **ELink** is to provide full-text links to an article
    based on its ID, which can be returned if you pass **cmd=prlinks** to **ELink**
    instead.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to access only those full-text links that are free to the public,
    you will want to use links that contain “pmc” (PubMed Central). Accessing articles
    behind a paywall may require subscription through a University—**before downloading
    a large corpus of full-text articles through a paywall, you should consult with
    your organization’s librarians.**
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is a code snippet of how you could retrieve the links for a publication:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also retrieve links for multiple publications in one call to **ELink**,
    as I show below:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Example data visualization: Scientific publications from C-suite authors'
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Occasionally, a scientific publication will be authored by someone who is a
    CEO, CSO, or CTO of a company. With PubMed, we have the ability to analyze the
    latest life science industry trends. Conflict of interest statements, which were
    introduced as a search term in PubMed during 2017,[6] give a lens into which author-provided
    keywords are appearing in publications where a C-suite executive is disclosed
    as an author. In other words, the keywords chosen by the authors to describe their
    finding. To carry out this function, simply include **CEO[cois]+OR+CSO[cois]+OR+CTO[cois]**
    assearch term in your URL, retrieve all of the results returned, and extract the
    keywords from the resulting XML output for each publication. Each publication
    contains between 4–8 keywords. Once the corpus is generated, you can quantify
    keyword frequency per year within the corpus as ***the number of publications
    in a year specifying a keyword, divided by the number of publications for that
    year.***
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: For example, if 10 publications list the keyword “cancer” and there are 1000
    publications that year, the keyword frequency would be 0.001\. Using the seaborn
    clustermap module with the keyword frequencies you can generate a visualization
    where darker bands indicate a larger value of keyword frequency/year (I have dropped
    COVID-19 and SARS-COV-2 from the visualization as they were both represented at
    frequencies far greater 0.05, predictably). Each year, approximately 1000–1500
    papers were returned.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果10篇出版物列出了关键词“癌症”，而该年共有1000篇出版物，那么关键词频率将是0.001。使用seaborn clustermap模块和关键词频率，你可以生成一个可视化图，其中较深的色带表示关键词频率/年值较大（我已经从可视化中去掉了COVID-19和SARS-COV-2，因为它们的频率远大于0.05，正如预期的那样）。每年，大约有1000到1500篇论文被检索出来。
- en: '![](../Images/4c46cca20553c590a80efa73168b43ff.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c46cca20553c590a80efa73168b43ff.png)'
- en: Clustermap of author-specified keyword frequencies for publications with a C-suite
    author listed, generated by the author using Seaborn’s clustermap module.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Seaborn的clustermap模块生成的，列出C-suite作者的出版物的作者指定关键词频率的热图。
- en: 'From this visualization, several insights about the corpus of publications
    with C-suite authors listed becomes clear. First, one of the most distinct clusters
    (at the bottom) contains keywords that have been strongly represented in the corpus
    for the past five years: cancer, machine learning, biomarkers, artificial intelligence
    — just to name a few. Clearly, industry is heavily active and publishing in these
    areas. A second cluster, near the middle of the figure, shows keywords that disappeared
    from the corpus after 2018, including physical activity, public health, children,
    mass spectrometry, and mhealth (or mobile health). It’s not to say that these
    areas are not being developed in industry, just that the publication activity
    has slowed. Looking at the bottom right of the figure, you can extract terms which
    have appeared more recently in the corpus, including liquid biopsy and precision
    medicine — which are indeed two very “hot” areas of medicine at the moment. By
    examining the publications further, you could extract the names of the companies
    and other information of interest. Below is the code I wrote to generate this
    visual:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个可视化中，几个关于列出C-suite作者的出版物的数据洞察变得清晰。首先，一个最为明显的簇（位于底部）包含了在过去五年中在数据集中强烈出现的关键词：癌症、机器学习、生物标志物、人工智能——仅举几个例子。显然，行业在这些领域非常活跃并进行大量出版。第二个簇，位于图中部附近，展示了自2018年后从数据集中消失的关键词，包括身体活动、公共卫生、儿童、质谱和mhealth（或移动健康）。这并不是说这些领域在行业中没有发展，只是出版活动有所减缓。查看图的右下角，你可以提取出最近在数据集中出现的术语，包括液体活检和精准医学——这些确实是目前医学领域的两个非常“热门”的领域。通过进一步检查出版物，你可以提取出公司的名称和其他感兴趣的信息。下面是我编写的生成此可视化的代码：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Conclusion
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: After reading this article, you should be ready to go from crafting highly tailored
    search queries of the scientific literature all the way to generating data visualizations
    for closer scrutiny. While there are other more complex ways to access and store
    articles using additional features of the various E-utilities, I have tried to
    present the most straightforward set of operations that should apply to most use
    cases for a data scientist interested in scientific publishing trends. By familiarizing
    yourself with the E-utilities as I have presented here, you will go far toward
    understanding the trends and connections within scientific literature. As mentioned,
    there are many items beyond publications that can be unlocked through mastering
    the E-utilities and how they operate within the larger universe of NCBI databases.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这篇文章后，你应该能够从制定高度定制的科学文献搜索查询，到生成数据可视化以进行更深入的审查。虽然有其他更复杂的方法可以使用各种E-utilities的附加功能来访问和存储文章，但我尝试展示了最简单的一组操作，应该适用于对科学出版趋势感兴趣的数据科学家。通过熟悉我所呈现的E-utilities，你将能更好地理解科学文献中的趋势和联系。如前所述，通过掌握E-utilities及其在NCBI数据库广阔宇宙中的操作，还有许多其他项目可以解锁。
- en: To learn more about accessing NCBI, [you can download course materials for a
    set of NIH courses that were held up until 2008](https://ftp.ncbi.nlm.nih.gov/pub/PowerTools/eutils/)
    or check out the references below. To stay up-to-date about changes to the E-Utilities,
    including a potentially new API, you may want to sign up for the NCBI’s very 1990’s
    looking mailing list, [at this website](https://www.ncbi.nlm.nih.gov/mailman/listinfo/utilities-announce/).
    Lastly, searching arxiv.org for “PubMed” will return a handful of results that
    can motivate research projects using this data.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [https://www.nlm.nih.gov/bsd/difference.html#:~:text=MEDLINE%20is%20the%20largest%20subset,Journal%20Categories%20filter%20called%20MEDLINE](https://www.nlm.nih.gov/bsd/difference.html#:~:text=MEDLINE%20is%20the%20largest%20subset,Journal%20Categories%20filter%20called%20MEDLINE)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Chapman D. Advanced search features of PubMed. J Can Acad Child Adolesc
    Psychiatry. 2009 Feb;18(1):58–9\. PMID: 19270851; PMCID: PMC2651214.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Sayers E. The E-utilities In-Depth: Parameters, Syntax and More. 2009 May
    29 [Updated 2022 Nov 30]. In: Entrez Programming Utilities Help [Internet]. Bethesda
    (MD): National Center for Biotechnology Information (US); 2010-. Available from:
    [https://www.ncbi.nlm.nih.gov/books/NBK25499/](https://www.ncbi.nlm.nih.gov/books/NBK25499/)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [https://ftp.ncbi.nlm.nih.gov/pub/PowerTools/eutils/Oct.2007/slides/Lecture1.pdf](https://ftp.ncbi.nlm.nih.gov/pub/PowerTools/eutils/Oct.2007/slides/Lecture1.pdf)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Lin J, Wilbur WJ. PubMed related articles: a probabilistic topic-based
    model for content similarity. BMC Bioinformatics. 2007 Oct 30;8:423\. doi: 10.1186/1471–2105–8–423\.
    PMID: 17971238; PMCID: PMC2212667\. Available from: [https://pubmed.ncbi.nlm.nih.gov/17971238/](https://pubmed.ncbi.nlm.nih.gov/17971238/)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[6] [https://library.mskcc.org/blog/2019/07/conflict-of-interest-statement-field-in-pubmed/](https://library.mskcc.org/blog/2019/07/conflict-of-interest-statement-field-in-pubmed/)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
