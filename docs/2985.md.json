["```py\nimport gurobipy\nfrom gurobipy import GRB\n\nfrom data_extraction import Data\n\n# Model\nmodel = gurobipy.Model(\"Energy optimisation\")\n\n# Variables\nX = model.addVars(\n    Data.months, \n    Data.energies, \n    name=\"Amount supplied\", \n    ub=Data.production_limit,\n)\nY = model.addVars(Data.months, Data.energies, name=\"Amount remained\")\nZ = model.addVars(Data.months, Data.energies, name=\"Amount used\")\n```", "```py\n# Objective function\nobj = gurobipy.quicksum(\n    (Data.production_cost[energy] * X[month, energy])\n    + (Data.storage_cost[energy] * Y[month, energy])\n    for energy in Data.energies\n    for month in Data.months\n)\nmodel.setObjective(obj, GRB.MINIMIZE)\n```", "```py\n# Mass balance constraints\nmodel.addConstrs(\n    (\n        Y[Data.months[m_ind - 1], energy] + X[month, energy]\n        == Z[month, energy] + Y[month, energy]\n        for energy in Data.energies\n        for m_ind, month in enumerate(Data.months)\n        if month != Data.months[0]\n    ),\n    name=\"Energy balance\",\n)\nmodel.addConstrs(\n    (\n        X[Data.months[0], energy]\n        == Z[Data.months[0], energy] + Y[Data.months[0], energy]\n        for energy in Data.energies\n    ),\n    name=\"Energy balance\",\n)\n```", "```py\n# Demand constraint\nmodel.addConstrs(\n    (\n        gurobipy.quicksum(\n            Y[Data.months[m_ind - 1], energy] + X[month, energy]\n            for energy in Data.energies\n        )\n        >= Data.demand[month]\n        for m_ind, month in enumerate(Data.months)\n        if month != Data.months[0]\n    ),\n    name=\"Demand\",\n)\nmodel.addConstr(\n    (\n        gurobipy.quicksum(\n          X[Data.months[0], energy] for energy in Data.energies\n        ) >= Data.demand[Data.months[0]]\n    ),\n    name=\"Demand\",\n)\n```", "```py\n# Upper limit for Y\nmodel.addConstrs(\n    (\n        Y[month, energy] <= Data.storage_limit[energy]\n        for month in Data.months\n        for energy in Data.energies\n    ),\n    name=\"Storage\",\n)\n```"]