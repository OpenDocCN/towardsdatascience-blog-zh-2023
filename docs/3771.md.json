["```py\nimport numpy as np\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RepeatedKFold, cross_validate\nfrom scipy.stats import wilcoxon\n\nfrom common_datasets.regression import load_cpu_performance\n\ndataset = load_cpu_performance()\nX = dataset['data']\ny = dataset['target']\n\n# a cross-validation wrapper to simplify the code\ndef cv_rf(X, y, regressor=RandomForestRegressor):\n    return cross_validate(\n        estimator=regressor(max_depth=11),\n        X=X, y=y,\n        cv=RepeatedKFold(n_splits=5, n_repeats=400, random_state=5),\n        scoring='r2'\n    )['test_score']\n\nr2_original = cv_rf(X, y)\nr2_mirrored = cv_rf(-X, y)\n```", "```py\nprint(f'original r2: {np.mean(r2_original):.4f}')\nprint(f'mirrored r2: {np.mean(r2_mirrored):.4f}')\nprint(f'p-value: {wilcoxon(r2_original, r2_mirrored, zero_method=\"zsplit\").pvalue:.4e}')\n# original r2: 0.8611\n# mirrored r2: 0.8595\n# p-value: 6.2667e-04\n```", "```py\nfrom sklearn.base import RegressorMixin\n\nclass UnbiasedRandomForestRegressor(RegressorMixin):\n\n    def __init__(self, **kwargs):\n        # determining the number of estimators used in the\n        # two subforests (with the same overall number of trees)\n        self.n_estimators = kwargs.get('n_estimators', 100)\n\n        n_leq = int(self.n_estimators / 2)\n        n_l = self.n_estimators - n_estimators_leq\n\n        # instantiating the subforests\n        self.rf_leq = RandomForestRegressor(**(kwargs | {'n_estimators': n_leq}))\n        self.rf_l = RandomForestRegressor(**(kwargs | {'n_estimators': n_l}))\n\n    def fit(self, X, y, sample_weight=None):\n        # fitting both subforests\n        self.rf_leq.fit(X, y, sample_weight)\n        self.rf_l.fit(-X, y, sample_weight)\n\n        return self\n\n    def predict(self, X):\n        # taking the average of the predictions\n        return np.mean([self.rf_leq.predict(X), self.rf_l.predict(-X)], axis=0)\n\n    def get_params(self, deep=False):\n        # returning the parameters\n        return self.rf_leq.get_params(deep) | {'n_estimators': self.n_estimators}\n```", "```py\nr2_unbiased = cv_rf(X, y, UnbiasedRandomForestRegressor)\n```", "```py\nprint(f'original r2: {np.mean(r2_original):.4f}')\nprint(f'mirrored r2: {np.mean(r2_mirrored):.4f}')\nprint(f'unbiased r2: {np.mean(r2_unbiased):.4f}')\n# original r2: 0.8611\n# mirrored r2: 0.8595\n# unbiased r2: 0.8608\n```"]