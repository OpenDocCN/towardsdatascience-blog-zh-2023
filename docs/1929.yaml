- en: Column Generation in Linear Programming and the Cutting Stock Problem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性规划中的列生成与切割库存问题
- en: 原文：[https://towardsdatascience.com/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=collection_archive---------4-----------------------#2023-06-13](https://towardsdatascience.com/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=collection_archive---------4-----------------------#2023-06-13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=collection_archive---------4-----------------------#2023-06-13](https://towardsdatascience.com/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=collection_archive---------4-----------------------#2023-06-13)
- en: How to solve linear problems with a large number of decision variables illustrated
    with a Python example
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何通过 Python 示例解决具有大量决策变量的线性问题
- en: '[](https://medium.com/@bruscalia12?source=post_page-----3c697caf4e2b--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----3c697caf4e2b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3c697caf4e2b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3c697caf4e2b--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----3c697caf4e2b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page-----3c697caf4e2b--------------------------------)[![布鲁诺·斯卡利亚·C·F·莱特](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----3c697caf4e2b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3c697caf4e2b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3c697caf4e2b--------------------------------)
    [布鲁诺·斯卡利亚·C·F·莱特](https://medium.com/@bruscalia12?source=post_page-----3c697caf4e2b--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcolumn-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----3c697caf4e2b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3c697caf4e2b--------------------------------)
    ·9 min read·Jun 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3c697caf4e2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcolumn-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----3c697caf4e2b---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcolumn-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----3c697caf4e2b---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3c697caf4e2b--------------------------------)
    ·9 分钟阅读·2023年6月13日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3c697caf4e2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcolumn-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----3c697caf4e2b---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3c697caf4e2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcolumn-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b&source=-----3c697caf4e2b---------------------bookmark_footer-----------)![](../Images/c271e798cf42ece6246598a86e5cd1d7.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3c697caf4e2b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcolumn-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b&source=-----3c697caf4e2b---------------------bookmark_footer-----------)![](../Images/c271e798cf42ece6246598a86e5cd1d7.png)'
- en: Photo by [Jean Vella](https://unsplash.com/es/@jean_vella?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Jean Vella](https://unsplash.com/es/@jean_vella?utm_source=medium&utm_medium=referral)
    提供，刊登在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Some Linear Programming (LP) problems arising from combinatorial problems become
    untractable because of the large number of variables involved (Gilmore & Gomory,
    1961). In such problems, *delayed column generation* is a potential solution alternative
    as it does not include all possible decision variables in the problem from the
    start. A classical application is to the cutting stock problem, in which one must
    decide how to cut a roll of a given width into smaller pieces to meet demands
    for determined cut sizes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一些来源于组合问题的线性规划（LP）问题由于涉及的大量变量变得难以处理（Gilmore & Gomory, 1961）。在这种问题中，*延迟列生成*是一个潜在的解决方案，因为它不会从一开始就将所有可能的决策变量包括在问题中。一个经典应用是裁切库存问题，在这个问题中，需要决定如何将给定宽度的卷材裁切成小块，以满足对特定裁切尺寸的需求。
- en: Throughout this article, some of the main theoretical aspects of column generation
    will be presented and illustrated with the one-dimensional cutting stock problem.
    In the solution, the Python library *scipy* will be used. Those interested can
    also find the complete code in this [git repository](https://github.com/bruscalia/optimization-demo-files/blob/c711c97e7bea736c23d0fa39500000fd52366117/mip/cutting_stock/cutting_stock.ipynb).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，将介绍列生成的一些主要理论方面，并通过一维裁切库存问题进行说明。在解决方案中，将使用 Python 库*scipy*。有兴趣的人也可以在这个[git
    仓库](https://github.com/bruscalia/optimization-demo-files/blob/c711c97e7bea736c23d0fa39500000fd52366117/mip/cutting_stock/cutting_stock.ipynb)中找到完整的代码。
- en: In case you are not yet familiar with *Linear Programming*, you might have a
    better understanding of this article after reading my previous introduction on
    the subject.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不熟悉*线性规划*，在阅读我之前关于这一主题的介绍后，你可能会对这篇文章有更好的理解。
- en: '[](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3c697caf4e2b--------------------------------)
    [## Linear programming: Theory and applications'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3c697caf4e2b--------------------------------)
    [## 线性规划：理论与应用'
- en: Linear optimization main concepts and implementation in Python
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性优化的主要概念及其在 Python 中的实现
- en: towardsdatascience.com](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3c697caf4e2b--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3c697caf4e2b--------------------------------)
- en: If you are ready for deeper concepts together with a hands-on example, welcome
    aboard.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备好深入了解更复杂的概念，并且希望通过实际示例来学习，欢迎加入。
- en: 'Column generation: an overview'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列生成：概述
- en: When using *delayed column generation* to solve an LP, at every iteration, a
    problem with only a subset of columns is considered. It is called the *Restricted
    Master Problem* (RMP). In each iteration, the RMP is solved and its corresponding
    vector of optimal dual decision variables ***π*** is obtained. The algorithm then
    uses this result to solve the *subproblem* or *pricing problem*, which aims to
    find new decision variables with negative reduced costs. Let us recall a definition
    of reduced costs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用*延迟列生成*来解决线性规划问题时，每次迭代时只考虑包含部分列的问题。这个问题被称为*限制主问题*（RMP）。在每次迭代中，RMP 会被求解，并得到其对应的最优对偶决策变量***π***。然后，算法使用这个结果来解决*子问题*或*定价问题*，旨在找到具有负的缩减成本的新决策变量。让我们回顾一下缩减成本的定义。
- en: For any nonbasic variable, the reduced cost for the variable is the amount by
    which the nonbasic variable’s objective function coefficient must be improved
    before that variable will become a basic variable in some optimal solution to
    the LP. *Winston & Goldberg (2004)*
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于任何非基本变量，变量的缩减成本是指在该变量成为 LP 中某个最优解的基本变量之前，其目标函数系数必须改善的数量。*Winston & Goldberg
    (2004)*
- en: Therefore, by including variables with negative reduced costs, we might expect
    marginal contributions to improving the objective value. Recall the economic interpretation
    of dual variables as *shadow costs*. A new variable might potentially result in
    savings proportional to its contribution to fulfilling constraints given their
    corresponding duals while increasing the overall cost by its cost coefficient.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过包含具有负缩减成本的变量，我们可能会期待在改善目标值方面的边际贡献。回顾对偶变量的经济解释作为*影子成本*。一个新的变量可能会导致与其在满足约束时所贡献的对偶变量相关的节省，同时其成本系数会增加总体成本。
- en: By solving the *subproblem*, we identify a set *S* of columns with the lowest
    reduced cost given the dual costs. If no column with negative reduced costs is
    identified, we stop since ***π*** is an optimal dual solution to the original
    problem, and together with the optimal primal solution to the RMP, we have an
    optimal primal/dual pair. Otherwise, we append columns in *S* to the RMP and iterate
    (Klabjan, 2005). This process is represented by the figure below.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解决*子问题*，我们识别出一组具有最低减值成本的列集合*S*。如果没有识别出负减值成本的列，我们就停止，因为***π***是原始问题的最优对偶解，与RMP的最优原始解结合，我们得到了最优的原始/对偶解对。否则，我们将*S*中的列附加到RMP中并进行迭代（Klabjan,
    2005）。该过程由下图表示。
- en: '![](../Images/0f446c98abcfd621c6c59de78cdfc6fe.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f446c98abcfd621c6c59de78cdfc6fe.png)'
- en: Column generation scheme. (Image by the author)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 列生成方案。（图片由作者提供）
- en: Notice that the *subproblem* is problem-specific, and in some situations can
    be quite computationally expensive to be formulated as a *mixed-integer-programming*
    problem. It might be useful then to consider heuristics and/or dynamic programming
    approaches that might return, in each iteration, more than one negative reduced-cost
    column. In the case of vehicle routing problems, often the *subproblem* is a constrained
    shortest path problem. Those interested in a deeper dive can refer to Irnich &
    Desaulniers (2005) to gain insight into solution techniques.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，*子问题*是特定于问题的，在某些情况下，可能相当计算上昂贵，难以将其表述为*混合整数规划*问题。因此，考虑启发式方法和/或动态规划方法可能会有用，这些方法在每次迭代中返回多个负减值成本的列。在车辆路径问题的情况下，*子问题*通常是一个约束最短路径问题。那些对深入研究感兴趣的人可以参考Irnich
    & Desaulniers（2005）以获取解决技术的见解。
- en: Now remember the *delayed column generation* approach presented solves a *Linear
    Programming* problem with real-valued decision variables. With the aim of solving
    large *integer* or *mixed-integer* programs, one could resort to either some heuristics
    after solving the relaxation or Branch & Price to impose integrality constraints.
    In the latter approach, one should consider not only those columns that have been
    generated in the solution of the initial LP but also generate new columns during
    the solution of LPs throughout the tree. A deeper discussion about Branch & Price
    is presented by Barnhart et al. (1998). The authors examine common issues, case
    studies, and interesting insights on branching rules.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在记住，所呈现的*延迟列生成*方法解决了具有实值决策变量的*线性规划*问题。为了求解大型*整数*或*混合整数*程序，可以在求解松弛后采用一些启发式方法或使用分支与定价来施加整数约束。在后者方法中，应考虑不仅在初始LP解中生成的列，还应在解决整个树中的LP时生成新列。Barnhart等（1998）对分支与定价进行了更深入的讨论。作者研究了常见问题、案例研究以及有关分支规则的有趣见解。
- en: The Cutting Stock Problem
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切割库存问题
- en: Consider we have a set of demands *I*, each for an amount *d* of pieces of width
    *w*. Also, consider we have a roll of width *W* from which the cuts will be produced.
    The set of known cutting patterns will be denoted *P*. Each piece of a cutting
    pattern *p* consumes one unit of the roll (*c* = 1) and produces *aᵢₚ* units of
    width *wᵢ*. Our goal is to determine the amount of cuts *x* of each pattern *p*
    that should be used to fulfill the demands while minimizing the number of units
    consumed. We can formulate this problem as follows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个需求集*I*，每个需求量为*w*的片段数*d*。同时，假设我们有一个宽度为*W*的卷材，从中将生产切割。已知的切割模式集记作*P*。每个切割模式*p*的片段消耗一个卷材单位（*c*
    = 1），并产生宽度*wᵢ*的*aᵢₚ*单位。我们的目标是确定每个模式*p*的切割量*x*，以满足需求的同时最小化消耗的单位数量。我们可以将这个问题表述如下。
- en: '![](../Images/3af0dd7faeea650353a2239b4d46270d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3af0dd7faeea650353a2239b4d46270d.png)'
- en: Cutting stock problem as a set cover problem. (Image by the author).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 切割库存问题作为一个集合覆盖问题。（图片由作者提供）。
- en: The dual decision variables associated with demand constraints ***π*** are then
    used in the pricing problem (*subproblem*) to find new patterns with negative
    *reduced costs*. In the case of the cutting stock problem, we must find a new
    pattern combining pieces of different widths that fit in the total width *W* and,
    by helping to fulfill material demands, it would lead to more savings than new
    costs. This is a knapsack problem, that can be formulated as the following.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与需求约束***π***相关的对偶决策变量随后在定价问题（*子问题*）中用于寻找具有负*减值成本*的新模式。在切割库存问题的情况下，我们必须找到一个结合了不同宽度的片段的新模式，使其适应总宽度*W*，并且通过帮助满足物料需求，将带来比新成本更多的节省。这是一个背包问题，可以表述为以下形式。
- en: '![](../Images/ce6af7ab79f39bc3d161ea9a9629dc4e.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce6af7ab79f39bc3d161ea9a9629dc4e.png)'
- en: Cutting stock pricing problem. (Image by the author).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 切割库存定价问题。（作者提供的图像）。
- en: In which *yᵢ* corresponds to the number of pieces of width *wᵢ* produced in
    the new cutting pattern.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *yᵢ* 对应于在新切割模式中生产的宽度 *wᵢ* 的片数。
- en: 'As we know each new pattern would have a unitary cost *c* of 1, we can calculate
    the reduced cost of the new pattern by:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道每个新模式的单位成本 *c* 为1，我们可以通过以下方式计算新模式的减少成本：
- en: '![](../Images/8c9a984f0498c83e5087d2e687380da2.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c9a984f0498c83e5087d2e687380da2.png)'
- en: Reduced cost of new cutting pattern. (Image by the author).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 新切割模式的减少成本。（作者提供的图像）。
- en: Which, in the case of non-negative values, should stop the column generation
    algorithm.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在非负值的情况下，这应该会停止列生成算法。
- en: To obtain integer solutions to the cutting stock problem, a simple heuristic
    method is to simply round up fractional values obtained in the linear relaxation.
    Alternatively, one could also solve the linear problem with the set of patterns
    produced in the linear relaxation imposing integrality constraints. We will use
    both strategies in this article. For instances in which the linear relaxation
    is close to the complete integer model, these strategies can be very successful.
    Some differences might arise in other instances in which the number of demands
    for each pattern is relatively small.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得切割库存问题的整数解，一种简单的启发式方法是将线性松弛中获得的分数值四舍五入。或者，也可以用在线性松弛中产生的模式集来解决线性问题，施加整数约束。我们将在本文中使用这两种策略。对于线性松弛接近完整整数模型的实例，这些策略可能会非常成功。在需求数量相对较少的其他实例中，可能会出现一些差异。
- en: If one aims to obtain the exact integer solutions, Branch & Price can be a good
    alternative. In this approach, after branching on some of the initial variables,
    new columns with reduced costs in the current node might be included. Those interested
    in more details can refer to Carvalho (1998) and to Vance (1998).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标是获得精确的整数解，Branch & Price 方法可能是一个好的替代方案。在这种方法中，在对一些初始变量进行分支后，可能会在当前节点中包含具有减少成本的新列。那些对更多细节感兴趣的人可以参考Carvalho
    (1998)和Vance (1998)。
- en: Now let us put some hands-on!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们动手实践一下！
- en: Solution
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: Let us start the Python implementation of the cutting stock problem, in which
    the LP relaxation is solved to optimality, and an integer model with the patterns
    produced so far is solved. We will use *numpy* to do linear algebra operations,
    *pandas* to work with dataframes, *scipy* to the optimization algorithms, and
    *matplotlib* to visualize the cutting patterns in a plot.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始切割库存问题的Python实现，其中LP松弛问题被解决到最优解，并且用迄今为止产生的模式解决整数模型。我们将使用*numpy*进行线性代数运算，*pandas*处理数据框，*scipy*进行优化算法，*matplotlib*可视化切割模式。
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let us import a dataset that is a modified version of the problem proposed in
    the [JuMP documentation](https://jump.dev/JuMP.jl/stable/tutorials/algorithms/cutting_stock_column_generation/).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入一个数据集，该数据集是[JuMP 文档](https://jump.dev/JuMP.jl/stable/tutorials/algorithms/cutting_stock_column_generation/)中提出问题的修改版。
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And let us instantiate the problem parameters
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 并且让我们实例化问题参数。
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that to initialize the *A* matrix, I introduced cutting simple patterns
    that produce the maximum feasible number of rolls for each width from the demands.
    Suppose there is some demand for rolls of width 24\. It would lead to an initial
    cutting pattern with a coefficient of 4 given the total width *W* of 100.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了初始化*A*矩阵，我引入了切割简单模式，这些模式产生了每种宽度需求的最大可行卷数。假设有对宽度24的卷的需求。这将导致初始切割模式的系数为4，考虑到总宽度
    *W* 为100。
- en: Now let us define a function to solve the *subproblem* given the total width
    *W*, a vector of widths associated with each demand *w*, and the current vector
    of dual variables *duals*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义一个函数来解决给定总宽度 *W*、与每个需求 *w* 相关的宽度向量以及当前对偶变量 *duals* 的*子问题*。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the main loop, for each solution to the restricted master problem, we will
    use the *linprog* function from *scipy*. The *A* matrix as well as the demands
    vector are both passed as their negative as by convention *scipy* considers only
    “lesser than or equal to” inequalities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在主循环中，对于每个限制主问题的解，我们将使用来自*scipy*的*linprog*函数。*A*矩阵和需求向量都以其负值传递，因为*scipy*按惯例仅考虑“小于或等于”不等式。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The solution should have the negative of the dual variables associated with
    demands stored in the *ineqlin.marginals* attribute.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案应该具有与需求相关的对偶变量的负值，这些值存储在*ineqlin.marginals*属性中。
- en: Exploring duality concepts, one could also obtain dual variables by solving
    the following *LP*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 探索对偶性概念时，还可以通过解决以下*LP*来获得对偶变量。
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And let us put it all together in the main loop.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把所有内容汇集到主循环中。
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the end, let us try both rounding up the solution of the linear relaxation
    and obtaining the integer solution considering only columns produced in the LP.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们尝试将线性松弛的解四舍五入以及仅考虑在*LP*中生成的列的整数解。
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Which should return:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 应该返回：
- en: Rounding solution 339.0
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四舍五入解：339.0
- en: 'Integer solution: 334.0'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数解：334.0
- en: 'In this case, we could improve the result by almost 2% just by imposing integrality
    constraints to the LP rather than just rounding up the relaxation. Just a spoiler
    for those willing to try Branch & Price: 334 is the exact solution for this instance.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以通过对*LP*施加整数约束，而不仅仅是对松弛结果进行四舍五入，从而将结果提高近2%。给那些愿意尝试Branch & Price的人一个小提示：334是该实例的确切解。
- en: 'At last, let us try and visualize the new cutting patterns:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们尝试可视化新的切割模式：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/50fa613b0812545f63da84c1c033e1f4.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/50fa613b0812545f63da84c1c033e1f4.png)'
- en: Cutting patterns produced in cutting stock problem. (Image by the author).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 切割库存问题中生成的切割模式。（作者提供的图片）。
- en: And we solved the cutting stock problem using column generation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用列生成法解决了切割库存问题。
- en: Further reading
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The capacitated vehicle routing problem (CVRP) was first proposed by Dantzig
    & Ramser (1959) and is particularly challenging due to its combinatorial nature.
    The authors show in their original paper that even for small problems the number
    of possible routes is incredibly large. For instance, a symmetrical problem with
    15 demand points has more than 6 × 10¹¹ possible routes. I find it particularly
    interesting to see how column generation was explored over time in this and related
    problems.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 容量受限的车辆路径问题（CVRP）首次由Dantzig & Ramser（1959）提出，由于其组合性质，特别具有挑战性。作者在他们的原始论文中表明，即使对于小规模问题，可能的路径数量也极其庞大。例如，一个有15个需求点的对称问题有超过6
    × 10¹¹条可能的路径。我发现看到列生成如何在这些及相关问题中随着时间的推移被探索特别有趣。
- en: Although for the vehicle routing problem with tightly constrained time windows,
    column generation had been well established since the work of Desrochers et al.
    (1992), Branch & Price would often fail on less constrained instances. Therefore,
    pure column generation has not been regarded as a promising approach for the CVRP.
    However, Fukasawa et al. (2006) combined column generation into a Branch & Cut
    algorithm, proving the optimality of several instances from the literature. Branch-cut-and-Price
    for the CVRP was further improved by other authors and I believe the work of Pecin
    et al. (2017) can be particularly fascinating for the interested reader.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对于时间窗口约束严格的车辆路径问题，自Desrochers等（1992）的工作以来，列生成方法已经建立得很好，但Branch & Price在约束较少的实例上往往会失败。因此，纯列生成方法并未被认为是CVRP的有前途的方法。然而，Fukasawa等（2006）将列生成方法结合到Branch
    & Cut算法中，证明了文献中若干实例的最优性。其他作者进一步改进了CVRP的Branch-cut-and-Price方法，我相信Pecin等（2017）的工作对于感兴趣的读者尤其吸引人。
- en: Conclusions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, *delayed column generation* was introduced as a strategy for
    solving linear programs with a large number of decision variables without considering
    all the variables explicitly. The classical one-dimensional cutting stock problem
    was presented to illustrate the method and a solution alternative was implemented
    in Python. The complete code is available in this [git repository](https://github.com/bruscalia/optimization-demo-files/blob/c711c97e7bea736c23d0fa39500000fd52366117/mip/cutting_stock/cutting_stock.ipynb).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，*延迟列生成*作为一种解决具有大量决策变量的线性程序的策略被介绍，而无需显式地考虑所有变量。介绍了经典的一维切割库存问题来说明该方法，并在Python中实现了一个解决方案备选方案。完整代码可在此[git库](https://github.com/bruscalia/optimization-demo-files/blob/c711c97e7bea736c23d0fa39500000fd52366117/mip/cutting_stock/cutting_stock.ipynb)中获取。
- en: References
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Barnhart, C., Johnson, E. L., Nemhauser, G. L., Savelsbergh, M. W., & Vance,
    P. H., 1998\. Branch-and-price: Column generation for solving huge integer programs.
    *Operations research*, *46*(3), 316–329.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'Barnhart, C., Johnson, E. L., Nemhauser, G. L., Savelsbergh, M. W., & Vance,
    P. H., 1998\. Branch-and-price: 列生成用于解决大型整数程序。*运筹学*，*46*(3)，316–329。'
- en: de Carvalho, J. V., 1998\. Exact solution of cutting stock problems using column
    generation and branch-and-bound. *International Transactions in Operational Research*,
    *5*(1), 35–44.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: de Carvalho, J. V., 1998\. 使用列生成和分支界限法解决切割库存问题的精确解。*国际运筹学交易*，*5*(1)，35–44。
- en: Dantzig, G. B., & Ramser, J. H., 1959\. The truck dispatching problem. *Management
    science*, *6*(1), 80–91.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Dantzig, G. B., & Ramser, J. H., 1959\. 卡车调度问题. *管理科学*, *6*(1), 80–91.
- en: Desrochers, M., Desrosiers, J., & Solomon, M., 1992\. A new optimization algorithm
    for the vehicle routing problem with time windows. *Operations research*, *40*(2),
    342–354.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Desrochers, M., Desrosiers, J., & Solomon, M., 1992\. 车辆路径问题与时间窗口的优化算法. *运筹学*,
    *40*(2), 342–354.
- en: Fukasawa, R., Longo, H., Lysgaard, J., Aragão, M. P. D., Reis, M., Uchoa, E.,
    & Werneck, R. F., 2006\. Robust branch-and-cut-and-price for the capacitated vehicle
    routing problem. *Mathematical programming*, *106*, 491–511.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Fukasawa, R., Longo, H., Lysgaard, J., Aragão, M. P. D., Reis, M., Uchoa, E.,
    & Werneck, R. F., 2006\. 容量车辆路径问题的鲁棒分支切割价格方法. *数学规划*, *106*, 491–511.
- en: Gilmore, P. C., & Gomory, R. E., 1961\. A linear programming approach to the
    cutting-stock problem. *Operations research*, *9*(6), 849–859.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Gilmore, P. C., & Gomory, R. E., 1961\. 切割存货问题的线性规划方法. *运筹学*, *9*(6), 849–859.
- en: Irnich, S., & Desaulniers, G., 2005\. *Shortest path problems with resource
    constraints* (pp. 33–65). Springer US.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Irnich, S., & Desaulniers, G., 2005\. *资源约束下的最短路径问题* (pp. 33–65). Springer US.
- en: Klabjan, D., 2005\. Large-scale models in the airline industry. *Column generation*,
    163–195.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Klabjan, D., 2005\. 航空业的大规模模型. *列生成*, 163–195.
- en: Pecin, D., Pessoa, A., Poggi, M., & Uchoa, E., 2017\. Improved branch-cut-and-price
    for capacitated vehicle routing. *Mathematical Programming Computation*, *9*,
    61–100.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Pecin, D., Pessoa, A., Poggi, M., & Uchoa, E., 2017\. 容量车辆路径改进的分支切割价格方法. *数学规划计算*,
    *9*, 61–100.
- en: Vance, P. H., 1998\. Branch-and-price algorithms for the one-dimensional cutting
    stock problem. *Computational optimization and applications*, *9*, 211–228.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Vance, P. H., 1998\. 一维切割存货问题的分支价格算法. *计算优化与应用*, *9*, 211–228.
- en: 'Winston, W. L. & Goldberg, J. B., 2004\. *Operations research: applications
    and algorithms.* 4th ed. Belmont, CA: Thomson Brooks/Cole Belmont.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 'Winston, W. L. & Goldberg, J. B., 2004\. *运筹学：应用与算法.* 第四版. Belmont, CA: Thomson
    Brooks/Cole Belmont.'
