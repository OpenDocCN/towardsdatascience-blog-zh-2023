- en: The Proper Way to Make Calls to ChatGPT API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正确调用 ChatGPT API 的方法
- en: 原文：[https://towardsdatascience.com/the-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff?source=collection_archive---------0-----------------------#2023-07-15](https://towardsdatascience.com/the-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff?source=collection_archive---------0-----------------------#2023-07-15)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff?source=collection_archive---------0-----------------------#2023-07-15](https://towardsdatascience.com/the-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff?source=collection_archive---------0-----------------------#2023-07-15)
- en: How to make reliable calls to ChatGPT API to build robust applications
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何可靠地调用 ChatGPT API 以构建稳健的应用程序
- en: '[](https://lucolivi.medium.com/?source=post_page-----52e635bea8ff--------------------------------)[![Lucas
    Oliveira](../Images/e303751fcafde01db6d1182320a50797.png)](https://lucolivi.medium.com/?source=post_page-----52e635bea8ff--------------------------------)[](https://towardsdatascience.com/?source=post_page-----52e635bea8ff--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----52e635bea8ff--------------------------------)
    [Lucas Oliveira](https://lucolivi.medium.com/?source=post_page-----52e635bea8ff--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Lucas Oliveira](../Images/e303751fcafde01db6d1182320a50797.png)](https://lucolivi.medium.com/?source=post_page-----52e635bea8ff--------------------------------)
    [![Towards Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----52e635bea8ff--------------------------------)
    [Lucas Oliveira](https://lucolivi.medium.com/?source=post_page-----52e635bea8ff--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb9eafd3d6f21&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff&user=Lucas+Oliveira&userId=b9eafd3d6f21&source=post_page-b9eafd3d6f21----52e635bea8ff---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----52e635bea8ff--------------------------------)
    ·11 min read·Jul 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F52e635bea8ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff&user=Lucas+Oliveira&userId=b9eafd3d6f21&source=-----52e635bea8ff---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb9eafd3d6f21&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff&user=Lucas+Oliveira&userId=b9eafd3d6f21&source=post_page-b9eafd3d6f21----52e635bea8ff---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----52e635bea8ff--------------------------------)
    · 11 分钟阅读 · 2023年7月15日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F52e635bea8ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff&source=-----52e635bea8ff---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[收藏](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F52e635bea8ff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff&source=-----52e635bea8ff---------------------bookmark_footer-----------)'
- en: LLMs are everywhere now, especially ChatGPT. There are a ton of applications
    being built on top of it and if you are not, you should give it a try.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 LLM 随处可见，尤其是 ChatGPT。正在基于它构建大量应用程序，如果你还没尝试过，应该试试看。
- en: '![](../Images/054928a295cef1538fd969eea16d31b4.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/054928a295cef1538fd969eea16d31b4.png)'
- en: Created with Midjourney.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Midjourney 创建。
- en: Building applications on top of ChatGPT will likely require you to make several
    parallel calls. Unfortunately, you are not the only one. With so many applications
    performing millions of requests per day (KUDOS for their engineering team by the
    way) often the API will return a “too many requests” error. So we need a good
    way to deal with such errors while making several parallel calls.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建基于 ChatGPT 的应用程序时，通常需要进行多个并行调用。不幸的是，你不是唯一一个需要这样做的人。由于许多应用程序每天处理数百万个请求（顺便说一句，给他们的工程团队点赞），API
    经常会返回“请求过多”的错误。因此，我们需要一种有效的方法来处理这种错误，同时进行多个并行调用。
- en: 'In this small Python tutorial, we will cover these two important topics to
    efficiently perform calls to ChatGPT API:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的 Python 教程中，我们将涵盖两个重要主题，以有效地调用 ChatGPT API：
- en: Perform several calls in parallel
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行执行多个调用
- en: Retry calls in case they fail
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用失败时重试调用
- en: 1\. Performing several calls in parallel
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 并行执行多个调用
- en: 'The simplest way to perform a call is to perform it synchronously, that is,
    send the request and wait for the response to arrive to continue the program.
    We can do that simply as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 执行调用的最简单方法是同步执行，也就是发送请求并等待响应到达以继续程序。我们可以简单地这样做：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we are working in a simple system it is fine, however, if we wish to perform
    several calls in parallel to an API or other resources like a database, we can
    do it asynchronously for faster responses.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在一个简单的系统中工作，这样做就可以了，但是，如果我们希望并行地对API或其他资源（如数据库）执行多个调用，我们可以使用异步方式获得更快的响应。
- en: Executing tasks asynchronously will trigger every action and wait for them to
    finish in parallel, which will reduce the wait time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 异步执行任务将触发每个操作并等待它们并行完成，从而减少等待时间。
- en: A basic way to do this is to create different threads to process each request,
    however, there is a better way to do it [using async calls](https://realpython.com/async-io-python/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的基本方法是创建不同的线程来处理每个请求，然而，有一种更好的方法可以做到这一点[使用异步调用](https://realpython.com/async-io-python/)。
- en: Doing an async call is often more efficient since you can specify the exact
    places where your application should wait whereas in traditional threading the
    system will automatically put threads to wait, which may be suboptimal.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用异步调用通常更高效，因为您可以指定应用程序应等待的确切位置，而在传统的线程处理中，系统将自动使线程等待，这可能是次优的。
- en: Below we present an example showing the difference between using sync and async
    calls.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们展示了使用同步和异步调用之间的差异示例。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `asyncio.gather` method will trigger all async calls passed to it and return
    their results once they are ready.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncio.gather`方法将触发所有传递给它的异步调用，并在它们准备就绪后返回它们的结果。'
- en: Unfortunately performing async calls with the `requests` library is not possible.
    To do it you can use the `aiohttp` library. Below there is an example of how to
    perform an async call with `aiohttp`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，使用`requests`库进行异步调用是不可能的。您可以使用`aiohttp`库来实现。下面是使用`aiohttp`进行异步调用的示例。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As said before, to perform async requests we need to make use of the `asyncio.gather`
    method.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，要执行异步请求，我们需要使用`asyncio.gather`方法。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Although this works, performing calls this way is not ideal since we are recreating
    the session object for every call. We can save resources and time by reusing the
    same session object like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法有效，但是这样做调用不理想，因为我们为每次调用重新创建会话对象。我们可以通过以下方式重复使用同一个会话对象来节省资源和时间：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Simple, right? With this, you can easily perform several calls. One problem
    however is that often it is not a good practice to perform unlimited calls this
    way since you can overload a system and be penalized preventing you from performing
    additional requests for some amount of time ([trust me, you will](https://platform.openai.com/docs/guides/rate-limits)).
    So it is a good idea to limit the amount of calls you can perform at the same
    time. You can do this easily with the `asyncio.Semaphore` class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 简单吧？通过这种方式，您可以轻松执行多个调用。然而，一个问题是通常不建议通过这种方式执行无限次调用，因为这样可能会过载系统，并且会受到惩罚，导致在某段时间内无法执行额外的请求（[相信我，您会](https://platform.openai.com/docs/guides/rate-limits)）。因此，建议限制同时执行的调用数量是一个好主意。您可以通过`asyncio.Semaphore`类轻松实现这一点。
- en: The `Semaphore` class creates a context manager that will manage the amount
    of async calls that are currently being performed within its context. If the max
    amount is reached it will block until some of the calls finish.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`Semaphore`类创建了一个上下文管理器，用于管理其上下文中当前正在执行的异步调用的数量。如果达到最大数量，它将阻塞直到某些调用完成。'
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'An optional thing here is to report how the progress of the calls is going.
    You can do it by creating a small class that will hold the progress and be shared
    across all calls. You can do it as the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个可选事项是报告调用进度如何。您可以通过创建一个小类来实现这一点，该类将保存进度并在所有调用之间共享。您可以像下面这样做：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This completes this section on how to perform multiple async requests. With
    this, you can perform several async calls, limit the number of calls per time
    and report the progress. However, there are still some problems to handle.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何执行多个异步请求，这一节就到此为止。通过这种方式，您可以执行多个异步调用，限制每次调用的数量，并报告进度。然而，仍然有一些问题需要处理。
- en: The requests made can fail for several different reasons like server overload,
    connection interruption, bad requests, etc. These may generate exceptions or return
    unpredictable responses so we need to treat these cases and automatically retry
    failed calls.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 发出的请求可能由于服务器过载、连接中断、请求不当等多种原因而失败。这些可能会生成异常或返回不可预测的响应，因此我们需要处理这些情况，并自动重试失败的调用。
- en: 2\. Retry calls in case they fail
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 失败时重试调用
- en: To handle failed calls we will make use of the `tenacity` library. Tenacity
    provides function decorators that will automatically retry our function call in
    case it generates an exception.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理失败的调用，我们将使用`tenacity`库。Tenacity 提供了函数装饰器，可以在函数调用生成异常时自动重试。
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To provide a retry functionality to our calls we will need to place the `@retry`
    decorator. Using it without additional parameters will make the function retry
    immediately and indefinitely once it fails. This is not good for some reasons.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我们的调用提供重试功能，我们需要添加`@retry`装饰器。使用它而不添加额外参数将使函数在失败后立即并无限期地重试。这在某些情况下是不好的。
- en: One is that our function call may fail due to server overload which makes it
    reasonable to wait some time before trying again. To indicate the time to wait
    we will use the approach of the exponential backoff using the parameter `wait=wait_random_exponential(min=min_value,
    max=max_value)`. This will increase the wait time the more the function fails.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个原因是我们的函数调用可能因服务器过载而失败，这使得在重新尝试之前等待一段时间是合理的。为了指示等待时间，我们将使用指数退避的方法，通过参数`wait=wait_random_exponential(min=min_value,
    max=max_value)`。这将使等待时间随着函数失败的次数增加。
- en: One optional thing is to log messages whenever some retry occurs. We can do
    it by providing some function to the parameter `before_sleep`. Here we will use
    the `print` function, however, a better way is to use the `logging` module and
    pass a `logging.error` or `logging.debug` function to this parameter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可选的操作是每次重试时记录消息。我们可以通过提供某个函数给参数`before_sleep`来实现这一点。这里我们将使用`print`函数，但更好的方法是使用`logging`模块，并将`logging.error`或`logging.debug`函数传递给该参数。
- en: To demonstrate we will generate random exceptions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将生成随机异常。
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will make our function wait some time before retrying it. However, the
    reason for failure may be systematical due to a server downtime or a bad payload
    for example. In this case, we want our amount of retries to be limited. We can
    do it with the parameter `stop=stop_after_attempt(n)`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们的函数在重试之前等待一段时间。然而，失败的原因可能是系统性的，例如服务器停机或错误的有效负载。在这种情况下，我们希望将重试次数限制在一个范围内。我们可以通过参数`stop=stop_after_attempt(n)`来实现。
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With this parameter set a `RetryError` will raise once the amount of tries
    reaches the maximum value. However, it may be the case that we want to continue
    our running without generating an exception, just saving a `None` value to the
    call return to handle it later. To do it we can use the callback function `retry_error_callback`
    to just return the `None` value in case a `RetryError` error occurs:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 设置此参数后，一旦尝试次数达到最大值，将引发`RetryError`。然而，可能有时我们希望继续运行而不生成异常，只是将`None`值保存到调用返回中以便稍后处理。为此，我们可以使用回调函数`retry_error_callback`在发生`RetryError`错误时仅返回`None`值：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this, `None` values will be returned instead of generating errors.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`None`值将被返回，而不是生成错误。
- en: One problem not handled yet is the stuck connection problem. This happens when
    we perform a request and for some reason, the host holds the connection but neither
    fails nor returns something. To handle such cases we need to place a timeout to
    return in case the call doesn’t return a value within a given period. To do it
    we can use use the `timeout` parameter from the `aiohttp` library together with
    the `aiohttp.ClientTimeout` class. In case a timeout occurs here, a `TimeoutError`
    will be raised, which will then be handled by the `retry` decorator from `tenacity`
    and automatically run the function again.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个尚未处理的问题是连接挂起问题。当我们执行请求时，由于某种原因，主机保持连接但既没有失败也没有返回任何内容，这种情况会发生。为了处理这种情况，我们需要设置超时，以便在调用在指定时间内未返回值时返回。为此，我们可以使用`aiohttp`库中的`timeout`参数，以及`aiohttp.ClientTimeout`类。如果发生超时，将引发`TimeoutError`，然后由`tenacity`的`retry`装饰器处理，并自动再次运行函数。
- en: '[PRE22]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Great! Now we have a robust way to run multiple parallel requests that will
    automatically retry in case some failure occurs and return `None` values in case
    the failure is systematic. So the final code will be as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们有了一种强大的方法来运行多个并行请求，发生失败时会自动重试，并在失败是系统性时返回 `None` 值。所以最终的代码如下：
- en: '[PRE24]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In summary, we have implemented the following features:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们实现了以下功能：
- en: Asynchronous calls to reduce wait time.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 异步调用以减少等待时间。
- en: Logging async calls progress.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录异步调用的进度。
- en: Automatically trigger retries when a call fails.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调用失败时，自动触发重试。
- en: Return None values in case the fails are systematical.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果失败是系统性的，则返回 None 值。
- en: Retry a call when it timeouts and doesn’t return anything.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调用超时且没有返回任何内容时，重试调用。
- en: If you have any questions, found some error, or have any ideas on how to improve
    this leave a comment below!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题、发现错误或有改进的建议，请在下面留下评论！
