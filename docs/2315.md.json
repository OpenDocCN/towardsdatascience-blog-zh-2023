["```py\nimport torch\ncanvas_height = 1000\ncanvas_width = 1500\n\n#loop to show different values\nfor i in range(5):\n    #create normal distribution to sample from\n    start_y_dist = torch.distributions.Normal(canvas_height * 0.8, canvas_height * 0.05)\n    #sample from distribution\n    start_y = int(start_y_dist.sample())\n\n    #create normal distribution to sample height from\n    height_dist = torch.distributions.Normal(canvas_height * 0.2, canvas_height * 0.05)\n\n    height = int(height_dist.sample())\n    end_y = start_y + height\n\n    #start_x is fixed because of this being centered\n    start_x = canvas_width // 2\n    width_dist = torch.distributions.Normal(height * 0.5, height * 0.1)\n\n    width = int(width_dist.sample())\n    end_x = start_x + width\n\n    print(f\"start_x: {start_x}, end_x: {end_x}, start_y: {start_y}, end_y: {end_y}, width: {width}, height: {height}\")\n```", "```py\nstart_x: 750, end_x: 942, start_y: 795, end_y: 1101, width: 192, height: 306\nstart_x: 750, end_x: 835, start_y: 838, end_y: 1023, width: 85, height: 185\nstart_x: 750, end_x: 871, start_y: 861, end_y: 1061, width: 121, height: 200\nstart_x: 750, end_x: 863, start_y: 728, end_y: 962, width: 113, height: 234\nstart_x: 750, end_x: 853, start_y: 812, end_y: 986, width: 103, height: 174\n```", "```py\nfrom PIL import Image, ImageDraw\n\n# Create a new image with white background\n\n# Loop to draw rectangles\nfor i in range(5):\n    img = Image.new('RGB', (canvas_width, canvas_height), 'white')\n\n    draw = ImageDraw.Draw(img)\n\n    # Creating normal distributions to sample from\n    start_y_dist = torch.distributions.Normal(canvas_height * 0.8, canvas_height * 0.05)\n    start_y = int(start_y_dist.sample())\n\n    height_dist = torch.distributions.Normal(canvas_height * 0.2, canvas_height * 0.05)\n    height = int(height_dist.sample())\n    end_y = start_y + height\n\n    start_x = canvas_width // 2\n    width_dist = torch.distributions.Normal(height * 0.5, height * 0.1)\n    width = int(width_dist.sample())\n    end_x = start_x + width\n\n    # Drawing the rectangle\n    draw.rectangle([(start_x, start_y), (end_x, end_y)], outline='black')\n\n    img.show()\n```", "```py\nimport torch\nfrom PIL import Image, ImageDraw\n\n# Setting the size of the canvas\ncanvas_size = 1000\n# Number of lines\nnum_lines = 10\n# Create distributions for start and end y-coordinates and x-coordinate\ny_start_distribution = torch.distributions.Normal(canvas_size / 2, canvas_size / 4)\ny_end_distribution = torch.distributions.Normal(canvas_size / 2, canvas_size / 4)\nx_distribution = torch.distributions.Normal(canvas_size / 2, canvas_size / 4)\n# Sample from the distributions for each line\ny_start_points = y_start_distribution.sample((num_lines,))\ny_end_points = y_end_distribution.sample((num_lines,))\nx_points = x_distribution.sample((num_lines,))\n# Create a white canvas\nimage = Image.new('RGB', (canvas_size, canvas_size), 'white')\ndraw = ImageDraw.Draw(image)\n# Draw the lines\nfor i in range(num_lines):\n    draw.line([(x_points[i], y_start_points[i]), (x_points[i], y_end_points[i])], fill='black')\n# Display the image\nimage.show()\n```", "```py\nfrom PIL import Image, ImageDraw\nimport numpy as np\nimport torch\n# Define your line length\nL = 3000\n\n# Calculate the desired mean for the half-normal distribution\nmu = np.sqrt(L * 2)\n\n# Calculate the scale parameter that gives the desired mean\nscale = mu / np.sqrt(2 / np.pi)\n\n# Create a half-normal distribution with the calculated scale parameter\ndist = torch.distributions.HalfNormal(scale / 3)\n\n# Sample and draw multiple circles\nfor _ in range(10):\n    # Create a new image with white background\n    img_size = (2000, 2000)\n    img = Image.new('RGB', img_size, (255, 255, 255))\n    draw = ImageDraw.Draw(img)\n\n    # Define the center of the circles\n    start_x = img_size[0] // 2\n    start_y = img_size[1] // 2\n    # Sample a radius from the distribution\n    r = int(dist.sample())\n\n    print(f\"Sampled radius: {r}\")\n\n    # Define the bounding box for the circle\n    bbox = [start_x - r, start_y - r, start_x + r, start_y + r]\n\n    # Draw the circle onto the image\n    draw.ellipse(bbox, outline ='black',fill=(0, 0, 0))\n\n    # Display the image\n    img.show()\n```"]