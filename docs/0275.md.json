["```py\nCREATE CONSTRAINT IF NOT EXISTS FOR (c:Character) REQUIRE c.name IS UNIQUE;\n```", "```py\nLOAD CSV WITH HEADERS FROM \"https://bit.ly/3kbU21V\" AS row\nCALL {\n  WITH row // Explicit import of variables\n  MERGE (c:Character {name:row.Character})\n  SET c += apoc.map.clean(row, \n     [\"name\", \"Detail\", \"to\", \"relationship_type\", \"House_Allegiance\"], [])\n  WITH c, row\n  CALL apoc.create.addLabels(c, [row.House_Allegiance]) YIELD node\n  // nested subquery for conditional execution\n  CALL {\n    WITH row, c // Explicit import of variables\n    WITH row, c\n    WHERE row.to IS NOT NULL\n    MERGE (c1:Character {name: row.to})\n    WITH row, c, c1\n    CALL apoc.merge.relationship(c, toUpper(row.relationship_type), {}, {}, c1)\n    YIELD rel\n    RETURN count(*) AS count\n  }\n  RETURN count(*) AS finalCount\n} IN TRANSACTIONS OF 10 ROWS // Define batched transaction for every 10 rows\nRETURN count(*)\n```", "```py\nMATCH (c:Fremen|Harkonnen)\nRETURN count(*)\n```", "```py\nMATCH (c:Character&Harkonnen)\nRETURN count(*)\n```", "```py\nMATCH (c:Character&!Harkonnen)\nRETURN count(*)\n```", "```py\nMATCH (c:!(Fremen|Harkonnen))\nRETURN count(*)\n```", "```py\nMATCH (c:Character WHERE c.Culture STARTS WITH \"Z\" AND c.Died IS NOT NULL)\nRETURN c.name AS character\n```", "```py\nMATCH p=(c:Character WHERE c.Culture = \"Bene Gesserit\")-[r:ALLIES|FAMILY]-()\nRETURN [n in nodes(p) | n.name] AS pairs, type(r) AS results\n```", "```py\nMATCH p=(c:Character WHERE c.Culture = \"Fremen\")-[r:!ALLIES&!FAMILY]-()\nRETURN [n in nodes(p) | n.name] AS pairs, type(r) AS results\n```", "```py\nMATCH (c:Character)\nWHERE exists { (c)-[:FAMILY]-() }\nRETURN count(*) AS count\n```", "```py\nMATCH (c:Character)\nWHERE exists { (c)-[:FAMILY]-(t)\n               WHERE (t)-[:ALLIES]-() AND (t)-[:MARRIAGE]-() }\nRETURN count(*) AS count\n```", "```py\nMATCH (c:Character)\nWHERE exists { MATCH (c)-[:FAMILY]-(t)\n               WHERE (t)-[:ALLIES]-() AND (t)-[:MARRIAGE]-() }\nRETURN count(*) AS count\n```", "```py\nMATCH (c:Character)\nRETURN c.name AS character,\n       count{ (c)--() } AS degree\nORDER BY degree DESC\nLIMIT 5\n```", "```py\nMATCH (c:Character)\nWHERE count{ (c)--() } > 2\nRETURN count(*) AS count\n```"]