["```py\nimport pandas as pd\n\nfilename = \"Accel_mag_all.csv\"\ndata = pd.read_csv(filename, header = None)\n```", "```py\nfrom sktime.transformations.panel.rocket import Rocket\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeClassifierCV, LogisticRegression, LogisticRegressionCV\nfrom sklearn.model_selection import LeaveOneGroupOut\n```", "```py\nimport numpy as np\n\nX = data.iloc[:,2:].values\n\ny =  data[1].values\nparticipant_no =  data[0].values\n```", "```py\nrocket_pipeline_ridge = make_pipeline(\n    Rocket(random_state=0), \n    StandardScaler(), \n    RidgeClassifierCV(alphas=np.logspace(-3, 3, 10))\n)\n```", "```py\nlogo = LeaveOneGroupOut()\n\nlogo.get_n_splits(X, y, participant_no)\n\nRocket_score_glob = []\nfor i, (train_index, test_index) in enumerate(logo.split(X, y, participant_no)):\n    rocket_pipeline_ridge.fit(X[train_index], y[train_index])\n\n    Rocket_score = rocket_pipeline_ridge.score(X[test_index],y[test_index])\n    Rocket_score_glob = np.append(Rocket_score_glob, Rocket_score)\n```", "```py\nprint(\"Global Model Results\")\nprint(f\"mean accuracy: {np.mean(Rocket_score_glob)}\")\nprint(f\"standard deviation: {np.std(Rocket_score_glob)}\")\nprint(f\"minimum accuracy: {np.min(Rocket_score_glob)}\")\nprint(f\"maximum accuracy: {np.max(Rocket_score_glob)}\")\n```", "```py\nGlobal Model Results\nmean accuracy: 0.5919805636306338\nstandard deviation: 0.10360659996594646\nminimum accuracy: 0.4709480122324159\nmaximum accuracy: 0.8283582089552238\n```", "```py\nRocket_score_pers = []\nfor i, (train_index, test_index) in enumerate(logo.split(X, y, participant_no)):\n\n    #print(f\"Participant: {participant_no[test_index][0]}\")\n    label = y[test_index]\n    X_S = X[test_index]\n\n    # Identify the indices for each class\n    class_0_indices = np.where(label == 'NF')[0]\n    class_1_indices = np.where(label == 'F')[0]\n\n    # Split each class into train and test using indexing\n    class_0_split_index = int(0.66 * len(class_0_indices))\n    class_1_split_index = int(0.66 * len(class_1_indices))\n\n    X_train = np.concatenate((X_S[class_0_indices[:class_0_split_index]], X_S[class_1_indices[:class_1_split_index]]), axis=0)\n    y_train = np.concatenate((label[class_0_indices[:class_0_split_index]], label[class_1_indices[:class_1_split_index]]), axis=0)\n\n    X_test = np.concatenate((X_S[class_0_indices[class_0_split_index:]],X_S[class_1_indices[class_1_split_index:]]), axis=0)\n    y_test = np.concatenate((label[class_0_indices[class_0_split_index:]], label[class_1_indices[class_1_split_index:]]), axis=0)\n\n    rocket_pipeline_ridge.fit(X_train, y_train)\n\n    Rocket_score_pers = np.append(Rocket_score_pers, rocket_pipeline_ridge.score(X_test,y_test))\n```", "```py\nprint(\"Personalised Model Results\")\nprint(f\"mean accuracy: {np.mean(Rocket_score_pers)}\")\nprint(f\"standard deviation: {np.std(Rocket_score_pers)}\")\nprint(f\"minimum accuracy: {np.min(Rocket_score_pers)}\")\nprint(f\"maximum accuracy: {np.max(Rocket_score_pers)}\")\n```", "```py\nPersonalised Model Results\nmean accuracy: 0.9517626092184379\nstandard deviation: 0.07750979452994386\nminimum accuracy: 0.7037037037037037\nmaximum accuracy: 1.0\n```"]