- en: 'System Design Cheatsheets: ElasticSearch'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统设计备忘单：ElasticSearch
- en: 原文：[https://towardsdatascience.com/system-design-cheatsheets-elasticsearch-673b98eebfff?source=collection_archive---------0-----------------------#2023-11-28](https://towardsdatascience.com/system-design-cheatsheets-elasticsearch-673b98eebfff?source=collection_archive---------0-----------------------#2023-11-28)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/system-design-cheatsheets-elasticsearch-673b98eebfff?source=collection_archive---------0-----------------------#2023-11-28](https://towardsdatascience.com/system-design-cheatsheets-elasticsearch-673b98eebfff?source=collection_archive---------0-----------------------#2023-11-28)
- en: Understand how and when to use ElasticSearch in systems, with three practical
    system design examples
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何以及何时在系统中使用 ElasticSearch，并通过三个实际的系统设计示例进行说明
- en: '[](https://medium.com/@sanilkhurana7?source=post_page-----673b98eebfff--------------------------------)[![Sanil
    Khurana](../Images/b6aea8dd0366a0659fcf3828fc745aea.png)](https://medium.com/@sanilkhurana7?source=post_page-----673b98eebfff--------------------------------)[](https://towardsdatascience.com/?source=post_page-----673b98eebfff--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----673b98eebfff--------------------------------)
    [Sanil Khurana](https://medium.com/@sanilkhurana7?source=post_page-----673b98eebfff--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@sanilkhurana7?source=post_page-----673b98eebfff--------------------------------)[![Sanil
    Khurana](../Images/b6aea8dd0366a0659fcf3828fc745aea.png)](https://medium.com/@sanilkhurana7?source=post_page-----673b98eebfff--------------------------------)[](https://towardsdatascience.com/?source=post_page-----673b98eebfff--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----673b98eebfff--------------------------------)
    [Sanil Khurana](https://medium.com/@sanilkhurana7?source=post_page-----673b98eebfff--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2bda56b80bb9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-cheatsheets-elasticsearch-673b98eebfff&user=Sanil+Khurana&userId=2bda56b80bb9&source=post_page-2bda56b80bb9----673b98eebfff---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----673b98eebfff--------------------------------)
    ·13 min read·Nov 28, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F673b98eebfff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-cheatsheets-elasticsearch-673b98eebfff&user=Sanil+Khurana&userId=2bda56b80bb9&source=-----673b98eebfff---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2bda56b80bb9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-cheatsheets-elasticsearch-673b98eebfff&user=Sanil+Khurana&userId=2bda56b80bb9&source=post_page-2bda56b80bb9----673b98eebfff---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----673b98eebfff--------------------------------)
    ·13分钟阅读·2023年11月28日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F673b98eebfff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-cheatsheets-elasticsearch-673b98eebfff&user=Sanil+Khurana&userId=2bda56b80bb9&source=-----673b98eebfff---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F673b98eebfff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-cheatsheets-elasticsearch-673b98eebfff&source=-----673b98eebfff---------------------bookmark_footer-----------)![](../Images/d7e1f0c7bfdf754fff121de143f1dd46.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F673b98eebfff&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-cheatsheets-elasticsearch-673b98eebfff&source=-----673b98eebfff---------------------bookmark_footer-----------)![](../Images/d7e1f0c7bfdf754fff121de143f1dd46.png)'
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: What is Search? And why it is important?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是搜索？它为何重要？
- en: 'If you’ve read my previous articles on search, you’d know how critical search
    is to an application. Think about it: out of all the different web apps and mobile
    apps you use every day, be it Netflix, Amazon, Swiggy, etc., the search bar is
    probably the only common UI element in all of them, and that too is usually at
    the homepage, right at the top. If you are designing a system, ninety-nine times
    out of a hundred, you’ll think of how to power search.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读过我之前关于搜索的文章，你会知道搜索对于应用程序的重要性。想一想：在你每天使用的各种网络应用和移动应用中，无论是 Netflix、Amazon
    还是 Swiggy，搜索框可能是唯一一个在所有这些应用中都存在的通用 UI 元素，而且它通常都位于主页的顶部。如果你在设计一个系统，十有九九，你会考虑如何支持搜索功能。
- en: Building a search system is no small feat, but a great starting point is ElasticSearch.
    If you don’t know anything about how search or recommendation systems work, this
    blog post is a good starting point for you. We will discuss what ElasticSearch
    is, where it works and where it doesn’t, and three common designs in which ElasticSearch
    is used. There are a lot more attributes of a search system, but more on that
    towards the end of the article.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 建立一个搜索系统不是小事，但一个很好的起点是 ElasticSearch。如果你对搜索或推荐系统的工作原理一无所知，这篇博客文章是一个很好的起点。我们将讨论
    ElasticSearch 是什么，它的适用场景和不适用场景，以及 ElasticSearch 常见的三种设计。搜索系统还有很多其他属性，但这些内容将在文章的后面详细讨论。
- en: What is ElasticSearch?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 ElasticSearch？
- en: 'ElasticSearch is a popular database that does something that most databases
    struggle with: Searching. Searching is so core to ElasticSearch, it’s literally
    in its name!'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch 是一个流行的数据库，它处理的是大多数数据库难以应对的任务：搜索。搜索对于 ElasticSearch 来说至关重要，它甚至体现在它的名字里！
- en: 'But if you haven’t heard about ElasticSearch, you’re probably thinking: why
    is searching so difficult? Why can’t a relational database perform a search? Most
    relational databases support various ways to search and filter through data, like
    the `WHERE` query, the `LIKE` keyword, or indexes. Or why can’t a document database
    like MongoDB work? You can write `find` queries in MongoDB as well.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你还没有听说过 ElasticSearch，你可能会想：为什么搜索这么困难？为什么关系型数据库无法进行搜索？大多数关系型数据库支持多种搜索和过滤数据的方法，比如
    `WHERE` 查询、`LIKE` 关键字或索引。或者为什么像 MongoDB 这样的文档数据库无法工作？你也可以在 MongoDB 中编写 `find`
    查询。
- en: To understand the answer, imagine you are building a news website. When the
    user searches for news using your search bar, maybe for “COVID19 infections in
    New Delhi”, the user is interested in all the articles that *talk* about COVID
    infections in New Delhi. In a simple search system, it would mean scanning all
    the articles in the database, and returning those that contain the words “COVID19”,
    “infections” or “New Delhi”. You can’t do that with a relational database. A relational
    database would allow you to search for articles based on specific attributes,
    for example, articles written by a particular author or articles published today,
    etc. but it can’t (at least, not efficiently) perform a search in which it scans
    *every single* news article (usually in tens of millions) and return those that
    contain certain words.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这个答案，想象你正在建立一个新闻网站。当用户使用你的搜索框搜索新闻时，例如“新德里 COVID19 感染”，用户对所有 *讨论* 新德里 COVID
    感染的文章感兴趣。在一个简单的搜索系统中，这意味着扫描数据库中的所有文章，并返回那些包含“COVID19”、“感染”或“新德里”这些词的文章。你不能用关系型数据库做到这一点。关系型数据库允许你基于特定属性搜索文章，比如特定作者撰写的文章或今天发布的文章等，但它不能（至少不能高效地）执行一个扫描
    *每一篇* 新闻文章（通常是数千万篇）并返回那些包含特定单词的搜索。
- en: Moreover, there are a lot more intricacies to consider. How do you score these
    articles? Maybe there is an article that talks about COVID19 infection spread,
    and maybe there is one that talks about new infections, how do you know which
    is more relevant to the user query, or in other words, how do you sort these articles
    based on relevance?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有许多复杂的细节需要考虑。你如何对这些文章进行评分？也许有一篇文章讨论了 COVID19 的传播，也许有一篇讨论了新感染，你如何知道哪一篇与用户查询更相关，换句话说，你如何根据相关性对这些文章进行排序？
- en: 'Answer: ElasticSearch! ElasticSearch can do all this and much much more right
    out of the box.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是：ElasticSearch！ElasticSearch 可以立即提供所有这些功能和更多。
- en: But, like everything else in the world, it comes with its fair share of disadvantages.
    Let’s discuss what ElasticSearch is, when to use it, and most importantly when
    it doesn’t make sense.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，和世界上其他一切事物一样，它也有其自身的缺点。让我们来探讨一下 ElasticSearch 是什么，什么时候使用它，最重要的是，什么时候不适合使用它。
- en: ElasticSearch
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ElasticSearch
- en: Searching Capabilities
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索能力
- en: ElasticSearch provides a way to perform a “full-text search”. Full-text search
    refers to searching for a phrase or a word in a huge corpus of documents. Let’s
    continue with our previous example, imagine you are building a news website that
    contains millions of news articles. Each article contains some data, like a heading,
    subheading, the content of the article, when it was published, etc. In the context
    of ElasticSearch, each article is stored as a JSON document.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch 提供了一种执行“全文搜索”的方法。全文搜索指的是在大量文档中搜索一个短语或单词。继续我们之前的例子，假设你正在构建一个包含数百万篇新闻文章的新闻网站。每篇文章包含一些数据，比如标题、副标题、文章内容、发布时间等。在
    ElasticSearch 的上下文中，每篇文章被存储为一个 JSON 文档。
- en: You can load all these documents into ElasticSearch and then search for specific
    words or phrases within each of these documents in a few milliseconds. So if you
    load up all the news articles, and then perform a search, “COVID19 infections
    in Delhi”, ElasticSearch returns all the articles that have the words “COVID19”,
    “infections”, or “Delhi”.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将所有这些文档加载到 ElasticSearch 中，然后在几毫秒内搜索每个文档中的特定单词或短语。因此，如果你加载所有新闻文章，然后执行一个搜索，比如“COVID19
    感染在德里”，ElasticSearch 会返回所有包含“COVID19”、“感染”或“德里”这些词的文章。
- en: To demonstrate searching in ElasticSearch, let’s set up Elasticsearch and load
    some data in it. For this post, I will use [this News dataset I found on Kaggle](https://www.kaggle.com/datasets/rmisra/news-category-dataset)(Misra,
    Rishabh. “News Category Dataset.” arXiv preprint arXiv:2209.11429 (2022)) ([Source](rishabhmisra.github.io/publications))
    ([License](https://creativecommons.org/licenses/by/4.0/)). The dataset is pretty
    simple, it contains around 210,000 news articles, with their headlines, short
    descriptions, authors, and some other fields we don’t care much about. We don’t
    really need all 210,000 documents, so I will load up around 10,000 documents in
    ES and start searching.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示在 ElasticSearch 中的搜索，我们来设置 Elasticsearch 并加载一些数据。对于本文，我将使用[我在 Kaggle 上找到的这个新闻数据集](https://www.kaggle.com/datasets/rmisra/news-category-dataset)(Misra,
    Rishabh. “News Category Dataset.” arXiv 预印本 arXiv:2209.11429 (2022)) ([来源](rishabhmisra.github.io/publications))
    ([许可证](https://creativecommons.org/licenses/by/4.0/))。该数据集非常简单，包含约 210,000 篇新闻文章，涵盖标题、简短描述、作者以及一些我们不太关注的其他字段。我们并不需要所有
    210,000 篇文档，因此我会加载大约 10,000 篇文档到 ES 中并开始搜索。
- en: These are a few examples of the documents in the dataset —
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是数据集中一些文档的示例——
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each document represents a news article. Each article contains a `link`, `headline`,
    a `short_description`, a `category`, `authors`, `country`(random values, added
    by me), and `timestamp`(again random values, added by me).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文档代表一篇新闻文章。每篇文章包含一个 `link`、`headline`、一个 `short_description`、一个 `category`、`authors`、`country`（随机值，由我添加）和
    `timestamp`（同样是随机值，由我添加）。
- en: Elasticsearch queries are written in JSON. Instead of diving deep into all the
    different syntaxes you can use to create search queries, let’s start simple and
    build from there.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch 查询是用 JSON 编写的。在深入探讨所有不同的语法之前，我们先从简单的开始，逐步构建。
- en: One of the simplest full-text queries is the `multi_match` query(don’t worry
    too much about querying data in ElasticSearch, it's pretty simple and we will
    talk about it towards the end of the article). The idea is simple, you write a
    query and Elasticsearch performs a full-text search, essentially scanning all
    the documents in your database, finding those that contain the words in that query,
    assigning a score to them, and returning them. For example,
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的全文查询之一是 `multi_match` 查询（不用太担心在 ElasticSearch 中查询数据，它非常简单，我们将在文章末尾讨论）。其思想很简单，你编写一个查询，Elasticsearch
    执行全文搜索，实质上扫描你数据库中的所有文档，找到包含查询中单词的文档，给它们分配一个评分，并返回这些文档。例如，
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above query finds relevant articles for the query “COVID19 infections”.
    These are the results I got back -
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询找到了与“COVID19 感染”相关的文章。这些是我得到的结果 -
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, it returns documents that discuss COVID19 infections. It also
    returns them sorted in the order of relevance(The `_score` field indicates how
    relevant a particular document is).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，它返回了讨论 COVID19 感染的文档。它还按相关性顺序对这些文档进行排序（`_score` 字段表示特定文档的相关性）。
- en: ElasticSearch has a rich query language with a lot of features, but for now,
    it is enough to know that building a simple search system is very easy, simply
    load all your data into ElasticSearch and use a simple query that we discussed.
    We have a plethora of options to improve, configure, and tweak search performance
    and relevance (again, more on search queries towards the end of this post).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch 具有丰富的查询语言和大量功能，但目前只需知道构建一个简单的搜索系统非常容易，只需将所有数据加载到 ElasticSearch
    中，并使用我们讨论过的简单查询即可。我们有许多选项可以改进、配置和调整搜索性能和相关性（关于搜索查询的更多内容将在本文末尾讨论）。
- en: Distributed Architecture
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式架构
- en: ElasticSearch works as a distributed database. This means that there are multiple
    nodes in a single ElasticSearch cluster. If a single node becomes unavailable
    or fails, that doesn’t usually mean downtime for our system, and other nodes would
    usually pick up the extra work and continue to serve user requests. So multiple
    nodes facilitate higher availability.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Multiple nodes also help us scale our systems, data and user requests can be
    divided across these nodes which leads to less load per node. For example, if
    you want to store 100 million news articles in ElasticSearch, you can split that
    data into multiple nodes, with each node storing a certain set of articles. And
    it’s pretty easy to do, in fact, ElasticSearch comes with built-in features to
    make this as simple and seamless as possible.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ElasticSearch scales horizontally and is able to partition data across multiple
    nodes. This means that you can always improve query performance by adding more
    nodes to your ElasticSearch cluster.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot more thought process about architecting your ElasticSearch cluster
    than just running more servers though. There are different types of nodes, these
    nodes run processes called “shards”, and each shard, node, can have multiple types
    and configuration options. There is a lot to discuss about the architecture of
    an ElasticSearch cluster and how it works, so I’ve written a complete post on
    the architecture [here](https://betterprogramming.pub/system-design-series-elasticsearch-architecting-for-search-5d5e61360463)
    if you want to dive deeper into it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'TLDR: you can add more machines to scale your cluster and improve performance.
    Data and queries would be divided into multiple machines. This facilitates better
    performance and high scalability.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Document-based data modeling
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ElasticSearch is a document database, that stores data in JSON document format,
    similar to MongoDB. So, in our example, every news article is stored as a JSON
    document in the cluster.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Real-time data analysis
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Real-time data analysis is looking at user actions in real-time and understanding
    user patterns and behavior. We can chart user behavior and better understand our
    users, using which we can improve our product. For example, let’s say we measure
    every single click, scroll event, and reading time per user on our news website.
    We chart these metrics in a dashboard and observe them for a few days. Using this,
    we can collect a lot of actionable insights to improve our news app. We found
    out that users usually use the website at 9–10 AM in the morning, and we found
    out that users generally click on articles that are relevant to their country.
    Using this information, we can overprovision resources during peak times (9–10
    AM) and maybe show articles from the user’s country on their homepage.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch is well-suited for real-time data analysis due to its distributed
    architecture and powerful search capabilities. When dealing with real-time data,
    such as logs, metrics, or social media updates, Elasticsearch efficiently indexes
    and stores this information. Its near real-time indexing allows data to be searchable
    almost instantly after ingestion. ElasticSearch also works well with other tools,
    like Kibana for visualization or Logstash and Beats for collecting metrics.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch 由于其分布式架构和强大的搜索能力，非常适合实时数据分析。当处理实时数据时，如日志、指标或社交媒体更新，Elasticsearch
    能高效地索引和存储这些信息。它的近实时索引使得数据在摄取后几乎可以立即被搜索。Elasticsearch 还可以很好地与其他工具配合使用，如用于可视化的 Kibana
    或用于收集指标的 Logstash 和 Beats。
- en: Towards the end of the article, we will look at an architecture that facilitates
    this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章的末尾，我们将探讨一种有助于实现这一点的架构。
- en: Cost
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成本
- en: ElasticSearch is expensive to run and maintain. As with everything in this world,
    everything good comes at a price. To perform full-text search, ElasticSearch keeps
    a large amount of data in RAM and builds complex indices. This means it requires
    a lot of RAM to run, which is expensive.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch 的运行和维护成本很高。正如世上所有美好事物都需付出代价一样，为了执行全文搜索，ElasticSearch 会在 RAM 中保持大量数据并构建复杂的索引。这意味着它需要大量的
    RAM 来运行，这也是一笔不小的开支。
- en: So, in short, it gives you amazing performance when performing full-text search
    but it ain’t cheap.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，ElasticSearch 在执行全文搜索时提供了惊人的性能，但它并不便宜。
- en: When not to use ElasticSearch
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么时候不该使用 ElasticSearch
- en: ACID compliance
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ACID 合规性
- en: ElasticSearch, like most NoSQL databases, has very limited support for ACID,
    so if you want strong consistency or transactional support, ElasticSearch might
    not be the choice of database for you. Consequences of this are that if you insert
    a document (called “indexing” a document in ElasticSearch) in ElasticSearch, it
    might not be available to other nodes immediately and might take a few milliseconds
    before it is visible to other nodes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch 像大多数 NoSQL 数据库一样，对 ACID 的支持非常有限，因此如果你需要强一致性或事务支持，ElasticSearch
    可能不是适合你的数据库选择。其后果是，如果你在 ElasticSearch 中插入一个文档（称为“索引”一个文档），该文档可能不会立即对其他节点可见，并且可能需要几毫秒才能被其他节点看到。
- en: Let’s say you are building a banking system; if a user deposits money into his/her
    account, you want that data visible instantly to every other transaction that
    the user performs. On the other hand, if you are using ElasticSearch to power
    searches on your news website when a new article gets published, it's probably
    acceptable that the article is not visible to all users for the first few milliseconds.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，你正在构建一个银行系统；如果用户向其账户中存款，你希望这些数据能立即对用户执行的其他交易可见。另一方面，如果你使用 ElasticSearch
    为你的新闻网站提供搜索服务，当一篇新文章发布时，文章在前几毫秒内对所有用户不可见可能是可以接受的。
- en: When you need complex joins
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当你需要复杂的联接时
- en: ElasticSearch does not support JOIN operations or relationships among different
    tables. If you’ve been using relational databases, this might come as a bit of
    a shock to you but most NoSQL databases have limited support for these types of
    operations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch 不支持 JOIN 操作或不同表之间的关系。如果你习惯使用关系型数据库，这可能会让你感到有些震惊，但大多数 NoSQL 数据库对这些类型的操作支持有限。
- en: If you want to perform JOINs or use foreign keys for highly related structured
    data, ElasticSearch may not be the best choice for your use case.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要执行 JOIN 操作或使用外键来处理高度相关的结构化数据，ElasticSearch 可能不是你用例的最佳选择。
- en: Small dataset or simple query needs
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小型数据集或简单查询需求
- en: ElasticSearch is complex and costly. Running and managing a large ElasticSearch
    cluster not only requires the knowledge and skill of software engineers and DevOps
    engineers but might even require specialists who excel at managing and architecting
    ElasticSearch clusters, called “ElasticSearch Architects”. There is a plethora
    of configuration options and architectural choices to play around with and each
    one of them has a significant impact on your queries and ingestion, thus having
    an indirect impact on user experience on core flows in your system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch 复杂且成本高昂。运行和管理大型 ElasticSearch 集群不仅需要软件工程师和 DevOps 工程师的知识和技能，还可能需要擅长管理和架构
    ElasticSearch 集群的专家，称为“ElasticSearch 架构师”。有大量的配置选项和架构选择可以尝试，每一个都对你的查询和摄取产生重要影响，从而间接影响系统核心流程中的用户体验。
- en: If you want to execute simple queries or have relatively low data, then a simple
    database might be better for your application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要执行简单的查询或数据量相对较少，那么简单的数据库可能更适合你的应用程序。
- en: How to use ElasticSearch in your system design
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在系统设计中使用ElasticSearch
- en: A single software system would usually require multiple databases, each powering
    a different set of functionalities. Let’s take an example to understand the design
    choices of using ElasticSearch better.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单一的软件系统通常需要多个数据库，每个数据库支持不同的功能。让我们通过一个例子来更好地理解使用ElasticSearch的设计选择。
- en: Let’s say you want to build a video streaming service, something like Netflix.
    Let’s see where ElasticSearch can fit in in this example.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想构建一个视频流媒体服务，比如Netflix。让我们看看ElasticSearch在这个例子中可以适应的地方。
- en: As a Search system
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为搜索系统
- en: A very common use case of ElasticSearch is as a secondary database powering
    full-text search queries. This is very useful for our video streaming application.
    We can’t store the videos in ElasticSearch, and we probably don’t want to store
    data related to billing or users in ElasticSearch as well.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ElasticSearch的一个非常常见的用例是作为支持全文搜索查询的辅助数据库。这对我们的在线视频应用非常有用。我们不能将视频存储在ElasticSearch中，并且我们可能也不想将与计费或用户相关的数据存储在ElasticSearch中。
- en: For that, we can have other databases, but we can store the titles of movies,
    along with their description, genres, ratings, etc. in ElasticSearch.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以使用其他数据库，但我们可以将电影标题、描述、类型、评分等信息存储在ElasticSearch中。
- en: 'We can have an architecture similar to this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有一个类似这样的架构：
- en: '![](../Images/d9ad7cfe3ed8d6d261a805ffb143f58e.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d9ad7cfe3ed8d6d261a805ffb143f58e.png)'
- en: Image by author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We can ingest data on which we want to power full-text search into ElasticSearch.
    When the user performs a search operation, we can query the ElasticSearch cluster.
    This way we get the full-text search capabilities of ElasticSearch and when we
    want to update user information, we can perform those updates in our primary storage.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们希望支持全文搜索的数据摄取到ElasticSearch中。当用户执行搜索操作时，我们可以查询ElasticSearch集群。这样，我们就可以利用ElasticSearch的全文搜索功能，当我们需要更新用户信息时，可以在我们的主要存储中执行这些更新。
- en: As a real-time data analysis pipeline
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为实时数据分析管道
- en: As we discussed, understanding user behavior and patterns is an essential step
    in deciding how to evolve the product. We can publish events, such as clickstream
    events, and scroll events to better understand how our users use our product.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的，了解用户行为和模式是决定如何发展产品的关键步骤。我们可以发布事件，例如点击流事件和滚动事件，以更好地理解用户如何使用我们的产品。
- en: For example, in our video streaming application, we can publish an event with
    user and movie data whenever a user clicks on a movie or a show. We can then analyze
    and chart aggregations to better understand how users are using our product. For
    example, we might notice that users use our product more in the evening than in
    the afternoon or that users may prefer shows or movies in their local language
    over other languages. Using this, we can develop our product to improve user experience.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的在线视频应用中，我们可以在用户点击电影或节目时发布包含用户和电影数据的事件。然后我们可以分析和绘制汇总图表，以更好地理解用户如何使用我们的产品。例如，我们可能会注意到用户在晚上使用我们的产品的频率比在下午高，或者用户可能更喜欢用本国语言而非其他语言的节目或电影。利用这些信息，我们可以改进我们的产品，提升用户体验。
- en: 'This is how a basic system for real-time data analysis using ElasticSearch
    and Kibana (a dashboarding tool that works well with ElasticSearch) would look
    like:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用ElasticSearch和Kibana（一个与ElasticSearch配合良好的仪表板工具）的实时数据分析基本系统的样子：
- en: '![](../Images/7dca386444fea2acd23ba1c0f0311527.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7dca386444fea2acd23ba1c0f0311527.png)'
- en: Image by author
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: As a recommendations system
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为推荐系统
- en: We can build queries in ElasticSearch that would give more preference(called
    boosting) to certain attributes. For example, instead of a simple query
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在ElasticSearch中构建查询，以对某些属性给予更多优先级（称为提升）。例如，与简单查询相比
- en: We can build basic recommendation systems with ElasticSearch. We can store information
    about the user, such as the user’s country, age, preferences, etc., and generate
    queries to get popular movie shows or series for that user.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用ElasticSearch构建基本的推荐系统。我们可以存储有关用户的信息，例如用户的国家、年龄、偏好等，并生成查询，以获取该用户的热门电影节目或系列。
- en: 'Understanding the query language and how to boost certain fields, and perform
    aggregations is a large topic in itself, but I’ve written a blog post covering
    the basics here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 理解查询语言和如何提升某些字段以及执行汇总是一个较大的主题，但我在这里写了一篇涵盖基础知识的博客文章：
- en: '[](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
    [## Mastering Elasticsearch: A Beginner’s Guide to Powerful Searches and Precision
    — Part 1'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
    [## 掌握 Elasticsearch: 初学者强大的搜索与精准指南 — 第1部分'
- en: 'Unlock the power of Elasticsearch in Part 1: Dive into Elasticsearch, grasp
    basic search queries, and explore lexical…'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在第1部分解锁 Elasticsearch 的力量：深入了解 Elasticsearch，掌握基本的搜索查询，并探索词汇…
- en: towardsdatascience.com](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
- en: Conclusion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: How to Architect ElasticSearch Clusters?
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何构建 ElasticSearch 集群？
- en: 'Architecting an ElasticSearch cluster is no easy feat, it requires knowledge
    of nodes, shards, indexes, and how to orchestrate all of them. There are near-infinite
    architectural choices to make, and the field is constantly evolving(especially
    more with the popularity of AI and AI-powered search). To discuss it more, I’ve
    written a complete blog post that starts from the very basics to everything you’d
    need to know to architect a search cluster:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 ElasticSearch 集群绝非易事，它需要了解节点、分片、索引以及如何协调它们。选择几乎是无限的，且领域不断发展（尤其是随着 AI 和 AI
    驱动搜索的流行）。为了深入探讨，我写了一篇完整的博客文章，从基础知识到构建搜索集群所需了解的一切：
- en: '[](https://betterprogramming.pub/system-design-series-elasticsearch-architecting-for-search-5d5e61360463?source=post_page-----673b98eebfff--------------------------------)
    [## System Design Series: ElasticSearch, Architecting for search'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/system-design-series-elasticsearch-architecting-for-search-5d5e61360463?source=post_page-----673b98eebfff--------------------------------)
    [## 系统设计系列: ElasticSearch, 搜索架构设计'
- en: Understanding Elasticsearch architecture and full-text search
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 Elasticsearch 架构和全文搜索
- en: betterprogramming.pub](https://betterprogramming.pub/system-design-series-elasticsearch-architecting-for-search-5d5e61360463?source=post_page-----673b98eebfff--------------------------------)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: betterprogramming.pub](https://betterprogramming.pub/system-design-series-elasticsearch-architecting-for-search-5d5e61360463?source=post_page-----673b98eebfff--------------------------------)
- en: Understanding Search Queries and Improving Search Systems
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解搜索查询并改进搜索系统
- en: Search is complex, very complex. There are a lot of ways we can improve search
    systems, making them more powerful and understanding of user needs. You have already
    learned about ElasticSearch and what it is. Continue this journey as we start
    from here, build a basic search query, understand the problems in the query and
    our system, and evolve and improve the system, step-by-step with examples.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索是复杂的，非常复杂。有很多方法可以改进搜索系统，使其更强大并更理解用户需求。你已经了解了 ElasticSearch 及其功能。从这里开始，构建一个基本的搜索查询，理解查询和系统中的问题，并通过示例一步一步地演变和改进系统。
- en: '[](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
    [## Mastering Elasticsearch: A Beginner’s Guide to Powerful Searches and Precision
    — Part 1'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
    [## 掌握 Elasticsearch: 初学者强大的搜索与精准指南 — 第1部分'
- en: 'Unlock the power of Elasticsearch in Part 1: Dive into Elasticsearch, grasp
    basic search queries, and explore lexical…'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在第1部分解锁 Elasticsearch 的力量：深入了解 Elasticsearch，掌握基本的搜索查询，并探索词汇…
- en: towardsdatascience.com](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/mastering-elasticsearch-a-beginners-guide-to-powerful-searches-and-precision-part-1-87686fec9808?source=post_page-----673b98eebfff--------------------------------)
- en: Context-aware Searching
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文感知搜索
- en: I recently read a great analogy on search systems. You can think of the search
    system we have discussed so far as a mechanical, rigid search. When a user enters
    a word, we find all the documents where the word appears and return them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近读到一个很好的搜索系统类比。你可以把我们讨论的搜索系统看作是一个机械而僵化的搜索。当用户输入一个词时，我们找到所有包含该词的文档并返回它们。
- en: Or you can think of a search system as a librarian. When the user asks a question,
    let’s say, “What was Winston Churchill’s role in the second world war?”, the librarian
    doesn’t just tell him the books which have the words “Winston”, “Churchill” or
    “Second World War”. Instead, the librarian *evaluates and understands* the customer
    and the context. Maybe it's a school kid, so instead of recommending a huge textbook,
    she finds a book more relevant to a younger kid. Or maybe she doesn’t have any
    book with the title of Winston Churchill, so she finds a book that talks about
    the Second World War or British prime ministers and recommends that instead. The
    librarian may even recommend different books for exams and different for summer
    vacation homework(some of you may not know this, but in some countries, you are
    given a huge amount of homework for summer vacations)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: This is easy to understand for you and me but how would our system know that
    Winston Churchill was a British prime minister and recommend books on Britain
    during the Second World War, or how would our system understand the context of
    the discussion, understand the user, and recommend appropriate books?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: As difficult as it may seem, it's actually not so hard. It's called Semantic
    Search and it is how most big tech companies build their search systems.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Semantic search is a set of search techniques that aims to understand the meaning
    behind user queries and the context of content, enabling more accurate and contextually
    relevant search results by considering the relationships between words and the
    intent behind the search.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: It's a large topic, and I am still reading and understanding more about it,
    but a blog post that starts at the basics is coming soon, so if you want to know
    more about this topic, follow me here on Medium.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Other databases
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I write about system design concepts, like databases, queues, and pub-sub systems,
    so follow me here on Medium for similar articles. I also write a lot of byte-sized
    content on LinkedIn (for example, [this post](https://www.linkedin.com/posts/sanil-khurana-a2503513b_system-design-series-apache-kafka-from-10000-activity-7128222185164341248-D-D9?utm_source=share&utm_medium=member_desktop)
    on the differences between RabbitMQ and Kafka), so follow me on LinkedIn for shorter
    forms of content [here](https://www.linkedin.com/in/sanil-khurana-a2503513b/).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, you can check out my blog posts on other databases and system design
    concepts-
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@sanilkhurana7/lists?source=post_page-----673b98eebfff--------------------------------)
    [## Sanil Khurana on Medium curated some lists'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Start exploring Linux, Cassandra, Interview Questions and more
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@sanilkhurana7/lists?source=post_page-----673b98eebfff--------------------------------)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
