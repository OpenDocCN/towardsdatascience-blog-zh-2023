- en: Analyzing Humanitarian Data Unstructured Excel Tables with ChatGPT Code Interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/analyzing-humanitarian-data-unstructured-excel-tables-with-chatgpt-code-interpreter-ccb8cabfa146?source=collection_archive---------3-----------------------#2023-07-10](https://towardsdatascience.com/analyzing-humanitarian-data-unstructured-excel-tables-with-chatgpt-code-interpreter-ccb8cabfa146?source=collection_archive---------3-----------------------#2023-07-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Some Initial Exploration with Code Interpreter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@astrobagel?source=post_page-----ccb8cabfa146--------------------------------)[![Matthew
    Harris](../Images/4fa3264bb8a028633cd8d37093c16214.png)](https://medium.com/@astrobagel?source=post_page-----ccb8cabfa146--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ccb8cabfa146--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ccb8cabfa146--------------------------------)
    [Matthew Harris](https://medium.com/@astrobagel?source=post_page-----ccb8cabfa146--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4a2cd25b8ff9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanalyzing-humanitarian-data-unstructured-excel-tables-with-chatgpt-code-interpreter-ccb8cabfa146&user=Matthew+Harris&userId=4a2cd25b8ff9&source=post_page-4a2cd25b8ff9----ccb8cabfa146---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ccb8cabfa146--------------------------------)
    ·10 min read·Jul 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fccb8cabfa146&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanalyzing-humanitarian-data-unstructured-excel-tables-with-chatgpt-code-interpreter-ccb8cabfa146&user=Matthew+Harris&userId=4a2cd25b8ff9&source=-----ccb8cabfa146---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fccb8cabfa146&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fanalyzing-humanitarian-data-unstructured-excel-tables-with-chatgpt-code-interpreter-ccb8cabfa146&source=-----ccb8cabfa146---------------------bookmark_footer-----------)![](../Images/9a4db24a0029f8aac36fa5b615500686.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Created by DALL-E2 with prompt “child’s crayon drawing of a happy robot processing
    data, with graphs in the background”
  prefs: []
  type: TYPE_NORMAL
- en: TL;DR
  prefs: []
  type: TYPE_NORMAL
- en: '*The new experimental feature ‘*[*Code Interpreter*](https://openai.com/blog/chatgpt-plugins#code-interpreter)*’
    provides native support for generating and running Python code as part of using
    ChatGPT. It shows great potential for performing data engineering and analysis
    tasks, providing a conversational interface that non-technical users could potentially
    use. This article presents some tests of ChatGPT (GPT-4) Code Interpreter on an
    unstructured Excel table from my* [*previous blog post*](https://medium.com/towards-data-science/parsing-irregular-spreadsheet-tables-in-humanitarian-datasets-with-some-help-from-gpt-3-57efb3d80d45)*,
    to see if it is able to automatically convert this table to a more standard form
    that could be loaded into a database. With limited prompting, it was able to identify
    the hierarchical heading structure but was unable to generate code that would
    parse the table accurately. On adjusting the prompt to suggest using the openpyxl
    Python library to extract information about Excel merged cells, it was able to
    parse the table in one attempt. However, on repeating the task with the exact
    same prompt, it failed. With no control yet over the temperature parameter to
    make results more deterministic, Code Interpreter does not appear able to tackle
    this particular task consistently. It’s early days though and only a beta feature,
    the pattern for automated data processing using Large Language Models is likely
    here to stay and will no doubt improve over time.*'
  prefs: []
  type: TYPE_NORMAL
- en: This week ChatGPT released a new feature called [Code Interpreter](https://openai.com/blog/chatgpt-plugins#code-interpreter),
    which allows ChatGPT to generate and call Python code, as well as upload data
    files to perform tasks such as data analysis. As I’ve explored in [previous blog
    posts](https://medium.com/me/stories/public), Large Language Models have the potential
    for simplifying data engineering and analysis tasks. The [LangChain](https://python.langchain.com/docs/get_started/introduction.html)
    project has [some great patterns](https://python.langchain.com/docs/use_cases/tabular),
    and there is already a lot of commercial activity in this area, so it’s interesting
    to see OpenAI starting to offer native support.
  prefs: []
  type: TYPE_NORMAL
- en: There are many articles already available exploring OpenAI Code Interpreter,
    but I wondered how well it might perform using some of the tabular data I’ve previously
    explored as found on the amazing [Humanitarian Data Exchange](https://data.humdata.org/)
    (HDX). Being able to offer natural language interfaces for platforms such as HDX
    opens the way for less technical users to explore and understand this data, which
    has implications for anticipating and accelerating response times for humanitarian
    disaster events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Access to Open AI’s Code Interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code Interpreter is an ‘Alpha’ feature currently, meaning it’s in an early
    testing phase and not part of standard ChatGPT. To access it you will need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Be a [ChatGPT+](https://openai.com/blog/chatgpt-plus) subscriber, costing $20
    per month
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://chat.openai.com/](https://chat.openai.com/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the “…” next to your name bottom-left, and select “Settings”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on “Beta Features” and activate “Code Interpreter”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the chat window hover over either GPT-3.5 or GPT-4 and select “Code
    Interpreter”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s worth noting that originally you had to be on OpenAI’s plugin waitlist,
    but I’m not sure if that’s still the case. The features appeared for me even though
    I’ve not had confirmation of being given access via the list. If the above doesn’t
    work, you might [need to be added](https://openai.com/waitlist/plugins).
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Unstructured Tables in Excel Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in a [previous blog post](https://medium.com/towards-data-science/parsing-irregular-spreadsheet-tables-in-humanitarian-datasets-with-some-help-from-gpt-3-57efb3d80d45),
    tables in Excel files can come in all sorts of wonderful forms with merged cells,
    blank rows, and other things which can make automated processing a bit of a challenge.
    For this article, I decided to try using [GPT-4](https://openai.com/research/gpt-4)
    with Code Interpreter to analyze a typical example of an Excel table as found
    on the Humanitarian Data Exchange (HDX) …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8a93c73e798926ce23cb65154d977a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of an irregular table in Excel, with blank top rows, labels and merged
    cells. Perfectly readable for humans, but a challenge to parse for data science.
    This file was sourced from the [Humanitarian Data Exchange](https://data.humdata.org/dataset/kenya-number-of-acreage-under-irrigation-in-bomet-county)
  prefs: []
  type: TYPE_NORMAL
- en: Though Code Interpreter has access to open datasets, it doesn’t yet include
    HDX and doesn’t have the ability to access the internet. I expect this will change
    quite soon, but in the meantime, I downloaded the file, started a session on [https://chat.openai.com/](https://chat.openai.com/)
    as described above, then uploaded this file by clicking the ‘+’ in the chat entry
    box …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69cef3f4e5009e57a165eb41561b2d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: After uploading, ChatGPT gets right into things by loading the data into Python
    Pandas and doing some initial analysis …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1126a39f78c6591b5a53c7caf0d2d4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Right away it has spotted that the table in the sheet is somewhat irregular,
    and immediately tries to address this …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4041dba882323f06ada8ac2e75956f90.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s actually spot on. In fact, it goes on to ask …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0cdf2a80d10e5b3e70743683aff7284b.png)'
  prefs: []
  type: TYPE_IMG
- en: I responded …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/511ecc60bd475380521e6a2d567fd9f7.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s also possible to see how exactly it came to this conclusion by selecting
    the ‘Show Work’ dropdown under each response which provides the generated Python
    code and result …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dcb4f53e273987c70f136b4e15d4de03.png)'
  prefs: []
  type: TYPE_IMG
- en: Its approach seems reasonable, but it’s worth noting that it doesn’t use native
    Excel information about merged cells, instead directly loading into Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT gets to work and automatically starts trying to process the data …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e09835b4509398a0717d8548a8c15de.png)'
  prefs: []
  type: TYPE_IMG
- en: But it fails at this right away. On selecting ‘Show Work’ we see that it has
    generated some Python for parsing our table …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: But this leads to a bounds error …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca831e732e225558e82abbe5fcfceb76.png)'
  prefs: []
  type: TYPE_IMG
- en: ChatGPT doesn’t give up and automatically starts debugging …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38a360323a41acd9840296696e05f813.png)'
  prefs: []
  type: TYPE_IMG
- en: Which is pretty impressive in that it seems to have identified the issue correctly.
    However, it’s perhaps less than impressive given it had already identified the
    exact column hierarchy at the very start of the conversation and seems to have
    ‘Lost’ this information.
  prefs: []
  type: TYPE_NORMAL
- en: Again, it gets back into things and automatically proceeds …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5be4ecced6a8e955a775e30d2adb7313.png)'
  prefs: []
  type: TYPE_IMG
- en: Which gives a table with headers like this …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd2cb2b0f5d48f55d41978a7d543ea24.png)'
  prefs: []
  type: TYPE_IMG
- en: Where we see data included in the column heading, suggesting it hasn’t identified
    where the column end and data starts. In fact, it even spots this and bravely
    continues …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ada16a2f8cdc66071e02c24c5560dbb8.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point it gets itself into a bit of a confused state, trying out lots
    of things in cycles not displayed here.
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, I think the token limit was breached and generation stopped, with
    the table looking like this …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b014296ed8f16b4947f4af452e4c5cba.png)'
  prefs: []
  type: TYPE_IMG
- en: Spot-checking the above values in ‘Show Work’ output compared to the original
    table, we see that for the last ‘Total’ row the values look correct, but there
    are two ‘Bomet Central Femail N Bomet’ column headings. It spots this …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/75dc691f421fd241fed49eab3ad61fe7.png)'
  prefs: []
  type: TYPE_IMG
- en: Since it seemed so close, I asked ChatGPT to proceed …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e8746bea8f473453660e9b633e86adf.png)'
  prefs: []
  type: TYPE_IMG
- en: I had left it a little while before asking it to continue which I suspect resulted
    in the code environment job being terminated. It seemed happy to start this back
    up again, but in doing so had lost some variables …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed955be875863af20a00540a879cb82d.png)'
  prefs: []
  type: TYPE_IMG
- en: I did what was prompted and reuploaded the file, and it picked things up again.
    Eventually, this is the table it produced …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a2528d93581eb11be7df04ef69d8449.png)'
  prefs: []
  type: TYPE_IMG
- en: Which is great …. for *just* the Total rows from the original table. ChatGPT
    has lost all other rows where the data was split by acreage, so in fact, the parsing
    has failed.
  prefs: []
  type: TYPE_NORMAL
- en: I pointed out that it was in fact missing a column related to land size, which
    it had in fact identified immediately after the first initial upload …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8692e5eab1494cc53943b27b626eeffb.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point ChatGPT started off on another quest, iterating through multiple
    attempts at parsing the sheet, none of which we ultimately successful. A full
    link to the chat can be found [here](https://chat.openai.com/share/891b77ef-411e-4b7b-85f1-7aa77438696f).
  prefs: []
  type: TYPE_NORMAL
- en: I started a brand new chat session and [tried again](https://chat.openai.com/share/caad774e-c45e-415c-b3a2-1a881057058b),
    which resulted in different results, which has implications for the reproducibility
    of this technique. But no matter how much I tried, the results were never correct.
  prefs: []
  type: TYPE_NORMAL
- en: Giving ChatGPT Some Coding Suggestions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my [previous blog post](https://medium.com/towards-data-science/parsing-irregular-spreadsheet-tables-in-humanitarian-datasets-with-some-help-from-gpt-3-57efb3d80d45),
    I was able to achieve the most success in parsing tables like the example provided
    by using information extracted from Excel to indicate which cells had been merged.
    This is key to understanding the table heading hierarchy and what we humans use
    when looking at Excel tables. If using only Pandas Excel parsing — which is what
    ChatGPT did in our test — rather than interrogating the Excel structure cell-by-cell
    this information is lost, making it a lot harder to successfully parse tables
    with merged heading cells.
  prefs: []
  type: TYPE_NORMAL
- en: So what about if we give ChatGPT a tip to use ‘openpyxl’ directly and to take
    into account merged cells?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/294cc1891d315c91a516321057541a58.png)'
  prefs: []
  type: TYPE_IMG
- en: Just like last time, it gets things right from the start …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/77409e101ae48f86c1ed7d3f701a6a64.png)'
  prefs: []
  type: TYPE_IMG
- en: And again proceeds with its analysis …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a872451a1b1ffe096695de0f1b989ef3.png)'
  prefs: []
  type: TYPE_IMG
- en: However, this time, having been provided some guidance regarding technique ….
    It flattened the table almost perfectly with just the single prompt above and
    no further intervention.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00cf3c49df26271ef69b2a24ab0d9547.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of ChatGPT ‘Code Interpreter’ processing an unstructured Excel table
    into a form that might be loaded into a SQL Database. This was created with a
    prompt that suggested using the ‘openpyxl’ Python library to identify merged cells
    in column headings
  prefs: []
  type: TYPE_NORMAL
- en: The only issue is that last row, but with further prompting we can remove this
    easily. To see the full interaction and generated code for this see [here](https://chat.openai.com/share/0afcb347-1abe-49d4-a015-b4ed80e12a13).
  prefs: []
  type: TYPE_NORMAL
- en: I asked ChatGPT to generate the full code to see what it finally came up with
    …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7182af50e8a2d274d2809eb91b7d718.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Which seems reasonable. It’s not generic and has lines specific to the file
    being processed. I suspect we would need more prompting to (maybe) make ChaGPT
    generate generic code, but for the task in this study it was able to parse the
    unstructured table nicely.
  prefs: []
  type: TYPE_NORMAL
- en: Great result!
  prefs: []
  type: TYPE_NORMAL
- en: Given the fact in the first test that ChatGPT gave different results with the
    same prompt, I decided to repeat the exact same succsessful prompt to see how
    things behaved in the successful test. Sadly, it came up with an entirely different,
    and [incorrect answer](https://chat.openai.com/share/1fe1e956-b814-4210-a034-284fa7bef228)
    using the *exact same prompt.*
  prefs: []
  type: TYPE_NORMAL
- en: NOT a great result!
  prefs: []
  type: TYPE_NORMAL
- en: In the API the model can be made more deterministic and produce repeatable results
    by decreasing the [temperature parameter](https://platform.openai.com/docs/api-reference/chat),
    but as Code Interpreter isn’t available in the API just yet, I was not able to
    experiment with this.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After initially failing, we were able to prompt ChatGPT to correctly parse an
    unstructured table by providing some coding tips about how one might do this in
    Python, which is a pretty amazing result actually. However, results were not reproducible
    with the exact same prompt failing on a second attempt. This is likely because
    we don’t yet have control over the model temperature parameter in this beta feature.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting limitation was noted, for example when token limits are
    breached and completions stop before the task is complete, requiring another prompt
    to carry on. Also, the process is rather slow as ChatGPT goes through iterations
    trying out different chunks of code. It’s not yet a technique which could be applied
    to tasks requiring quick responses.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, Code Interpreter looks really impressive and shows great promise,
    but doesn’t appear ready just yet for the task attempted above.
  prefs: []
  type: TYPE_NORMAL
- en: So for now at least, albeit a very short time … I have one up on ChatGPT. 😊
  prefs: []
  type: TYPE_NORMAL
