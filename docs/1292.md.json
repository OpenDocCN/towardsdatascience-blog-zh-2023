["```py\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=5).fit(u_data)\nplt.plot(pca.explained_variance_ratio_)\n```", "```py\nfactors = dict()\nfor macro_variable in list(macro_variables.values()):\n    factors[macro_variable] = [\"Macro\"]\nfor finance_variable in list(finance_variables.values()):\n    factors[finance_variable] = [\"Finance\"]\n```", "```py\nfactor_model = DynamicFactorMQ(u_data,\n                    factors=factors,\n                    factor_orders = {'Macro': 1, \"Finance\": 1},\n                    idiosyncratic_ar1=True,\n                    standardize=False)\nmodel_results = factor_model.fit(disp=30)\n```", "```py\n#PCA\nscores = pca.transform(u_data)\nreconstruct = u_data + pca.inverse_transform(scores) - u_data\n\n#DFM\nmodel_results.fittedvalues\n```", "```py\nprint(f\"Residuals of DFM on global dataset: {np.round(np.abs(model_results.resid).sum().sum(), 2)}\")\nprint(f\"Residuals of PCA on global dataset: {np.round(np.abs(resid_pca).sum().sum(), 2)}\")\n```"]