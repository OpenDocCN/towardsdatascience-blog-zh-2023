["```py\nOPENAI_API_KEY = {your open ai key}\nGOOGLE_PALM_API_KEY = {your google palm api key}\n```", "```py\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\ndef load_secets():\n    load_dotenv()\n    env_path = Path(\".\") / \".env\"\n    load_dotenv(dotenv_path=env_path)\n\n    open_ai_key = os.getenv(\"OPENAI_API_KEY\")\n    google_palm_key = os.getenv(\"GOOGLE_PALM_API_KEY\")\n\n    return {\n        \"OPENAI_API_KEY\": open_ai_key,\n        \"GOOGLE_PALM_API_KEY\": google_palm_key,\n    }\n```", "```py\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.output_parsers import PydanticOutputParser\nfrom pydantic import BaseModel, Field\n\nclass Validation(BaseModel):\n    plan_is_valid: str = Field(\n        description=\"This field is 'yes' if the plan is feasible, 'no' otherwise\"\n    )\n    updated_request: str = Field(description=\"Your update to the plan\")\n\nclass ValidationTemplate(object):\n    def __init__(self):\n        self.system_template = \"\"\"\n      You are a travel agent who helps users make exciting travel plans.\n\n      The user's request will be denoted by four hashtags. Determine if the user's\n      request is reasonable and achievable within the constraints they set.\n\n      A valid request should contain the following:\n      - A start and end location\n      - A trip duration that is reasonable given the start and end location\n      - Some other details, like the user's interests and/or preferred mode of transport\n\n      Any request that contains potentially harmful activities is not valid, regardless of what\n      other details are provided.\n\n      If the request is not valid, set\n      plan_is_valid = 0 and use your travel expertise to update the request to make it valid,\n      keeping your revised request shorter than 100 words.\n\n      If the request seems reasonable, then set plan_is_valid = 1 and\n      don't revise the request.\n\n      {format_instructions}\n    \"\"\"\n\n        self.human_template = \"\"\"\n      ####{query}####\n    \"\"\"\n\n        self.parser = PydanticOutputParser(pydantic_object=Validation)\n\n        self.system_message_prompt = SystemMessagePromptTemplate.from_template(\n            self.system_template,\n            partial_variables={\n                \"format_instructions\": self.parser.get_format_instructions()\n            },\n        )\n        self.human_message_prompt = HumanMessagePromptTemplate.from_template(\n            self.human_template, input_variables=[\"query\"]\n        )\n\n        self.chat_prompt = ChatPromptTemplate.from_messages(\n            [self.system_message_prompt, self.human_message_prompt]\n        )\n```", "```py\nimport openai\nimport logging\nimport time\n# for Palm\nfrom langchain.llms import GooglePalm\n# for OpenAI\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import LLMChain, SequentialChain\n\nlogging.basicConfig(level=logging.INFO)\n\nclass Agent(object):\n    def __init__(\n        self,\n        open_ai_api_key,\n        model=\"gpt-3.5-turbo\",\n        temperature=0,\n        debug=True,\n    ):\n        self.logger = logging.getLogger(__name__)\n        self.logger.setLevel(logging.INFO)\n        self._openai_key = open_ai_api_key\n\n        self.chat_model = ChatOpenAI(model=model, temperature=temperature, openai_api_key=self._openai_key)\n        self.validation_prompt = ValidationTemplate()\n        self.validation_chain = self._set_up_validation_chain(debug)\n\n    def _set_up_validation_chain(self, debug=True):\n\n        # make validation agent chain\n        validation_agent = LLMChain(\n            llm=self.chat_model,\n            prompt=self.validation_prompt.chat_prompt,\n            output_parser=self.validation_prompt.parser,\n            output_key=\"validation_output\",\n            verbose=debug,\n        )\n\n        # add to sequential chain \n        overall_chain = SequentialChain(\n            chains=[validation_agent],\n            input_variables=[\"query\", \"format_instructions\"],\n            output_variables=[\"validation_output\"],\n            verbose=debug,\n        )\n\n        return overall_chain\n\n    def validate_travel(self, query):\n        self.logger.info(\"Validating query\")\n        t1 = time.time()\n        self.logger.info(\n            \"Calling validation (model is {}) on user input\".format(\n                self.chat_model.model_name\n            )\n        )\n        validation_result = self.validation_chain(\n            {\n                \"query\": query,\n                \"format_instructions\": self.validation_prompt.parser.get_format_instructions(),\n            }\n        )\n\n        validation_test = validation_result[\"validation_output\"].dict()\n        t2 = time.time()\n        self.logger.info(\"Time to validate request: {}\".format(round(t2 - t1, 2)))\n\n        return validation_test\n```", "```py\nsecrets = load_secets()\ntravel_agent = Agent(open_ai_api_key=secrets[OPENAI_API_KEY],debug=True)\n\nquery = \"\"\"\n        I want to do a 5 day roadtrip from Cape Town to Pretoria in South Africa.\n        I want to visit remote locations with mountain views\n        \"\"\"\n\ntravel_agent.validate_travel(query)\n```", "```py\nINFO:__main__:Validating query\nINFO:__main__:Calling validation (model is gpt-3.5-turbo) on user input\nINFO:__main__:Time to validate request: 1.08\n{'plan_is_valid': 'yes', 'updated_request': ''}\n```", "```py\nquery = \"\"\"\n        I want to walk from Cape Town to Pretoria in South Africa.\n        I want to visit remote locations with mountain views\n        \"\"\"\n```", "```py\nINFO:__main__:Validating query\nINFO:__main__:Calling validation (model is gpt-3.5-turbo) on user input\nINFO:__main__:Time to validate request: 4.12\n{'plan_is_valid': 'no',\n 'updated_request': 'Walking from Cape Town to Pretoria in South Africa is not ...' a\n```", "```py\nclass ItineraryTemplate(object):\n    def __init__(self):\n        self.system_template = \"\"\"\n      You are a travel agent who helps users make exciting travel plans.\n\n      The user's request will be denoted by four hashtags. Convert the\n      user's request into a detailed itinerary describing the places\n      they should visit and the things they should do.\n\n      Try to include the specific address of each location.\n\n      Remember to take the user's preferences and timeframe into account,\n      and give them an itinerary that would be fun and doable given their constraints.\n\n      Return the itinerary as a bulleted list with clear start and end locations.\n      Be sure to mention the type of transit for the trip.\n      If specific start and end locations are not given, choose ones that you think are suitable and give specific addresses.\n      Your output must be the list and nothing else.\n    \"\"\"\n\n        self.human_template = \"\"\"\n      ####{query}####\n    \"\"\"\n\n        self.system_message_prompt = SystemMessagePromptTemplate.from_template(\n            self.system_template,\n        )\n        self.human_message_prompt = HumanMessagePromptTemplate.from_template(\n            self.human_template, input_variables=[\"query\"]\n        )\n\n        self.chat_prompt = ChatPromptTemplate.from_messages(\n            [self.system_message_prompt, self.human_message_prompt]\n        )\n```", "```py\n travel_agent = LLMChain(\n            llm=self.chat_model,\n            prompt=self.itinerary_prompt.chat_prompt,\n            verbose=debug,\n            output_key=\"agent_suggestion\",\n        )\n```", "```py\n- Day 1:\n  - Start in Berkeley, CA\n  - Drive to Redwood National and State Parks, CA (1111 Second St, Crescent City, CA 95531)\n  - Explore the beautiful redwood forests and enjoy nature\n  - Drive to Eureka, CA (531 2nd St, Eureka, CA 95501)\n  - Enjoy the local cuisine and explore the charming city\n  - Overnight in Eureka, CA\n\n- Day 2:\n  - Start in Eureka, CA\n  - Drive to Crater Lake National Park, OR (Crater Lake National Park, OR 97604)\n  - Marvel at the stunning blue lake and hike the scenic trails\n  - Drive to Bend, OR (Bend, OR 97701)\n  - Indulge in the local food scene and explore the vibrant city\n  - Overnight in Bend, OR\n\n- Day 3:\n  - Start in Bend, OR\n  - Drive to Mount Rainier National Park, WA (55210 238th Ave E, Ashford, WA 98304)\n  - Enjoy the breathtaking views of the mountain and hike the trails\n  - Drive to Tacoma, WA (Tacoma, WA 98402)\n  - Sample the delicious food options and explore the city's attractions\n  - Overnight in Tacoma, WA\n\n- Day 4:\n  - Start in Tacoma, WA\n  - Drive to Olympic National Park, WA (3002 Mount Angeles Rd, Port Angeles, WA 98362)\n  - Explore the diverse ecosystems of the park and take in the natural beauty\n  - Drive to Seattle, WA (Seattle, WA 98101)\n  - Experience the vibrant food scene and visit popular attractions\n  - Overnight in Seattle, WA\n\n- Day 5:\n  - Start in Seattle, WA\n  - Explore more of the city's attractions and enjoy the local cuisine\n  - End the trip in Seattle, WA\n```", "```py\nimport googlemaps\n\ngmaps = googlemaps.Client(key=google_maps_api_key)\n\ndirections_result = gmaps.directions(\n            start,\n            end,\n            waypoints=waypoints,\n            mode=transit_type,\n            units=\"metric\",\n            optimize_waypoints=True,\n            traffic_model=\"best_guess\",\n            departure_time=start_time,\n)\n```", "```py\nclass Trip(BaseModel):\n    start: str = Field(description=\"start location of trip\")\n    end: str = Field(description=\"end location of trip\")\n    waypoints: List[str] = Field(description=\"list of waypoints\")\n    transit: str = Field(description=\"mode of transportation\")\n```", "```py\nclass MappingTemplate(object):\n    def __init__(self):\n        self.system_template = \"\"\"\n      You an agent who converts detailed travel plans into a simple list of locations.\n\n      The itinerary will be denoted by four hashtags. Convert it into\n      list of places that they should visit. Try to include the specific address of each location.\n\n      Your output should always contain the start and end point of the trip, and may also include a list\n      of waypoints. It should also include a mode of transit. The number of waypoints cannot exceed 20.\n      If you can't infer the mode of transit, make a best guess given the trip location.\n\n      For example:\n\n      ####\n      Itinerary for a 2-day driving trip within London:\n      - Day 1:\n        - Start at Buckingham Palace (The Mall, London SW1A 1AA)\n        - Visit the Tower of London (Tower Hill, London EC3N 4AB)\n        - Explore the British Museum (Great Russell St, Bloomsbury, London WC1B 3DG)\n        - Enjoy shopping at Oxford Street (Oxford St, London W1C 1JN)\n        - End the day at Covent Garden (Covent Garden, London WC2E 8RF)\n      - Day 2:\n        - Start at Westminster Abbey (20 Deans Yd, Westminster, London SW1P 3PA)\n        - Visit the Churchill War Rooms (Clive Steps, King Charles St, London SW1A 2AQ)\n        - Explore the Natural History Museum (Cromwell Rd, Kensington, London SW7 5BD)\n        - End the trip at the Tower Bridge (Tower Bridge Rd, London SE1 2UP)\n      #####\n\n      Output:\n      Start: Buckingham Palace, The Mall, London SW1A 1AA\n      End: Tower Bridge, Tower Bridge Rd, London SE1 2UP\n      Waypoints: [\"Tower of London, Tower Hill, London EC3N 4AB\", \"British Museum, Great Russell St, Bloomsbury, London WC1B 3DG\", \"Oxford St, London W1C 1JN\", \"Covent Garden, London WC2E 8RF\",\"Westminster, London SW1A 0AA\", \"St. James's Park, London\", \"Natural History Museum, Cromwell Rd, Kensington, London SW7 5BD\"]\n      Transit: driving\n\n      Transit can be only one of the following options: \"driving\", \"train\", \"bus\" or \"flight\".\n\n      {format_instructions}\n    \"\"\"\n\n        self.human_template = \"\"\"\n      ####{agent_suggestion}####\n    \"\"\"\n\n        self.parser = PydanticOutputParser(pydantic_object=Trip)\n\n        self.system_message_prompt = SystemMessagePromptTemplate.from_template(\n            self.system_template,\n            partial_variables={\n                \"format_instructions\": self.parser.get_format_instructions()\n            },\n        )\n        self.human_message_prompt = HumanMessagePromptTemplate.from_template(\n            self.human_template, input_variables=[\"agent_suggestion\"]\n        )\n\n        self.chat_prompt = ChatPromptTemplate.from_messages(\n            [self.system_message_prompt, self.human_message_prompt]\n        )\n```", "```py\ndef _set_up_agent_chain(self, debug=True):\n\n    # set up LLMChain to get the itinerary as a string\n    travel_agent = LLMChain(\n            llm=self.chat_model,\n            prompt=self.itinerary_prompt.chat_prompt,\n            verbose=debug,\n            output_key=\"agent_suggestion\",\n        )\n\n    # set up LLMChain to extract the waypoints as a JSON object\n    parser = LLMChain(\n            llm=self.chat_model,\n            prompt=self.mapping_prompt.chat_prompt,\n            output_parser=self.mapping_prompt.parser,\n            verbose=debug,\n            output_key=\"mapping_list\",\n        )\n\n    # overall chain allows us to call the travel_agent and parser in\n    # sequence, with labelled outputs.\n    overall_chain = SequentialChain(\n            chains=[travel_agent, parser],\n            input_variables=[\"query\", \"format_instructions\"],\n            output_variables=[\"agent_suggestion\", \"mapping_list\"],\n            verbose=debug,\n        )\n\n    return overall_chain\n```", "```py\nagent_chain = travel_agent._set_up_agent_chain()\nmapping_prompt = MappingTemplate()\n\nagent_result = agent_chain(\n                {\n                    \"query\": query,\n                    \"format_instructions\": mapping_prompt.parser.get_format_instructions(),\n                }\n            )\n\ntrip_suggestion = agent_result[\"agent_suggestion\"]\nwaypoints_dict = agent_result[\"mapping_list\"].dict()\n```", "```py\n{\n'start': 'Berkeley, CA', \n'end': 'Seattle, WA', \n'waypoints': [\n'Redwood National and State Parks, 1111 Second St, Crescent City, CA 95531', \n'Crater Lake National Park, Crater Lake National Park, OR 97604', \n'Mount Rainier National Park, 55210 238th Ave E, Ashford, WA 98304', \n'Olympic National Park, 3002 Mount Angeles Rd, Port Angeles, WA 98362'\n], \n'transit': 'driving'\n}\n```", "```py\ntravel_agent = Agent(\n   open_ai_api_key=openai_api_key,\n   google_palm_api_key=google_palm_api_key,\n   debug=verbose,\n)\n\nitinerary, list_of_places, validation = travel_agent.suggest_travel(query)\n```", "```py\nfrom langchain.llms import GooglePalm\n\nAgent.chat_model = GooglePalm(\n   model_name=\"models/text-bison-001\",\n   temperature=0,\n   google_api_key=google_palm_api_key,\n)\n```"]