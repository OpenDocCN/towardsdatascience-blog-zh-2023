- en: Pumpkin Spice Time Series Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pumpkin-spice-time-series-analysis-afd8daaedce1?source=collection_archive---------3-----------------------#2023-10-24](https://towardsdatascience.com/pumpkin-spice-time-series-analysis-afd8daaedce1?source=collection_archive---------3-----------------------#2023-10-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Throw on your comfiest lo-fi, grab an oversized sweater, your favorite hot beverage,
    and let’s python.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@ls.casanave?source=post_page-----afd8daaedce1--------------------------------)[![Louis
    Casanave](../Images/ca6ddaa01d86491f05d7e516aeda0baa.png)](https://medium.com/@ls.casanave?source=post_page-----afd8daaedce1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----afd8daaedce1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----afd8daaedce1--------------------------------)
    [Louis Casanave](https://medium.com/@ls.casanave?source=post_page-----afd8daaedce1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa25bdaa6a5ad&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpumpkin-spice-time-series-analysis-afd8daaedce1&user=Louis+Casanave&userId=a25bdaa6a5ad&source=post_page-a25bdaa6a5ad----afd8daaedce1---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----afd8daaedce1--------------------------------)
    ·8 min read·Oct 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fafd8daaedce1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpumpkin-spice-time-series-analysis-afd8daaedce1&user=Louis+Casanave&userId=a25bdaa6a5ad&source=-----afd8daaedce1---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fafd8daaedce1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpumpkin-spice-time-series-analysis-afd8daaedce1&source=-----afd8daaedce1---------------------bookmark_footer-----------)![](../Images/caaeaeed7ab1087b2fd0f9723b4df342.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Nathan Dumlao](https://unsplash.com/@nate_dumlao?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: It’s that time again in the northern hemisphere — a time for apples, pumpkins,
    and various configurations of cinnamon, nutmeg, ginger, allspice, and cloves.
    And as the grocery isles start getting ready for Halloween, Thanksgiving, and
    the winter holidays, it’s a great time to dust off my statistical modeling skills.
    Hold onto your seasoned lattes, and let’s do some function-oriented seasonal modeling.
    [The full code notebook can be found here.](https://github.com/casanave/Pumpkin_Spice/tree/main)
  prefs: []
  type: TYPE_NORMAL
- en: 'Hypothesis:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pumpkin Spice’s popularity as a Google searched term in the USA will have strong
    seasonality since it’s associated with American Fall Holidays and seasonal food
    dishes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Null hypothesis:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using last week’s or last year’s data will be more predictive of this week’s
    level of popularity for the search term “pumpkin spice.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Data:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[The last 5 years of data from Google Trends, pulled on the 7th of October,
    2023\.](https://github.com/casanave/Pumpkin_Spice/blob/main/pumpkin_spice_5_years.csv)
    [1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Iterative Modeling Method:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make a naive model where last week’s/last year’s data is this week’s prediction.
    Specifically, it’s not enough for my final model to be accurate or inaccurate
    in a void. My final model must outperform using historical data as a direct prediction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The train test split will give me two sets of data, one for the algorithm to
    learn from. The other is for me to test how well my algorithm performed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seasonal decomposition will give me a rough idea of how predictable my data
    is by trying to separate the yearly overall trend from the seasonal patterns and
    the noise. A smaller scale of noise will imply that more of the data can be captured
    in an algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A series of statistical tests to determine if the data is stationary. If the
    data is not stationary, I’ll need to take a first difference (run a time-delta
    function where each time interval’s data only shows the difference from the previous
    time interval’s data. This will force the data to become stationary.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make some SARIMA models, using inferences from autocorrelation plots for the
    moving average term, and inferences from partial auto-correlation plots for the
    autoregressive term. SARIMA is a go-to for time series modeling and I’ll be trying
    ACF and PACF inferencing before I try a brute-force approach with Auto Arima.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try using Auto Arima, which will iterate through many terms and select the best
    combination of terms. I want to experiment to learn if the parameters it gives
    me for a SARIMA model yield a better-performing model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try ETS models, using inference from the seasonal decomposition as to whether
    x is additive or multiplicative over time. ETS models focus more heavily on seasonality
    and overall trend than SARIMA family models do, and may give me an edge when capturing
    the relationship pumpkin spice has to time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Performance plotting KPIs:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try using the MAPE score because it's an industry standard in many workplaces,
    and folks may be used to it. It’s easy to understand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Try using the RMSE score because it’s more useful.](/forecast-kpi-rmse-mae-mape-bias-cdc5703d242d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plot predictions against the test data and visually check for performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Eyeballing the data:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/2d10979a1d55d85be291f50863337530.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see from the above plot, this data shows strong potential for seasonal
    modeling. There’s a clear spike in the second half of each year, with a taper
    and another spike before a drop down into our baseline.
  prefs: []
  type: TYPE_NORMAL
- en: However, each year’s primary spike is larger each year besides 2021, which makes
    sense, given the pandemic, when folks may not have had celebrating the season
    on their minds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imports:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note: These imports appear differently in the notebook itself, as in the notebook
    I’m relying on `seasonal_mod.py` which has a lot of my imports baked in.'
  prefs: []
  type: TYPE_NORMAL
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: These are the libraries I used to make the code notebook. I went for statsmodels
    instead of scikit-learn for their time series packages, I like statsmodels better
    for most linear regression problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Function-Based Approach to the Code:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I don’t know about you but I don’t want to write several lines of code each
    time I make a new model and then more code to verify. So instead I made some functions
    to keep my code DRY and prevent myself from making errors.
  prefs: []
  type: TYPE_NORMAL
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: These three little functions work together so I only need to run `metrics_graph()`with
    `y_true` and `y_preds` as the input and it will give me a blue line of true data
    and a red line of predictive data, along with the MAPE and RMSE. That will save
    me time and hassle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Last Year’s Data as a Benchmark for Success:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My experience in retail management informed my decision to try last week’s data
    and last year’s data as a direct prediction for this year’s data. Often in retail,
    we used last season’s (1 unit of time ago’s) data as a direct prediction, to ensure
    inventory during Black Friday for example. Last week’s data didn’t perform as
    well as last year’s data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b7fd5c7e2f44c61a58c1c760c5a356f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Last week’s data to predict this week’s data showed a MAPE score of just over
    18, with a RMSE of about 11\. By comparison, last year’s data as a direct prediction
    to this year’s data showed a MAPE score of just about 12 with a RMSE of about
    7.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55ff4865aa6ae49dcb370932e5fa31df.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore I chose to compare all statistical models I built to a naive model
    using last year’s data. This model got the timing of the spikes and decreases
    more accurately than our naive weekly model, however, I still thought I could
    do better. The next step in modeling was doing a seasonal decomposition.
  prefs: []
  type: TYPE_NORMAL
- en: The following function helped me run my season decomposition and I’ll be keeping
    it as reusable code for all future modeling moving forward.
  prefs: []
  type: TYPE_NORMAL
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The below shows how I used that seasonal decomposition.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0181b2dcfdc242a221a18973b75acd4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The additive model had a reoccurring yearly pattern in the residuals, evidence
    that an additive model wasn’t able to completely decompose all the recurring patterns.
    It was a good reason to try a multiplicative model for the yearly spikes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e300ec40e29fb24857e9c37100d00ae0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now the residuals in the multiplicative decomposition were much more promising.
    They were much more random and on a much smaller scale, proving that a multiplicative
    model would capture the data best. The residuals being so small — on a scale between
    1.5 to -1, meant that there was a lot of promise in modeling.
  prefs: []
  type: TYPE_NORMAL
- en: But now I wanted a function for running SARIMA models specifically, only inputting
    the order. I wanted to experiment running `c`,`t` and `ct` versions of the SARIMA
    model with those orders as well since the seasonal decomposition favored a multiplicative
    type of model over an additive type of model. Using the `c`, `t` and `ct` in the
    `trend =` parameter, I was able to add multipliers to my SARIMA model.
  prefs: []
  type: TYPE_NORMAL
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll skip describing the part where I looked at the AFC and PACF plots and the
    part where I also tried PMD auto arima to find the best terms to use in the SARIMA
    models. [If you’re interested in those details, please see my full code notebook.](https://github.com/casanave/Pumpkin_Spice/blob/main/Pumpkin_Spice.ipynb)
  prefs: []
  type: TYPE_NORMAL
- en: 'My best SARIMA model:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/6077d7a41020e81a621208f399979170.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: So my best SARIMA model had a higher MAPE score than my naive model, nearly
    29 to nearly 12, but a lower RMSE by about a unit, nearly 7 to nearly 6\. My biggest
    problem with using this model is it really underpredicted the 2023 spike, there’s
    a fair amount of area between the red and blue lines from August to September
    of 2023\. There are reasons to like it better than my yearly naive model or worse
    than my yearly naive model, depending on your opinions about RMSE vs MAPE. However,
    I wasn’t done yet. My final model was definitively better than my yearly naive
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Final Model:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I used an ETS (exponential smoothing) model for my final model, which allowed
    me to explicitly use the `seasonal` parameter to make it use a multiplicative
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37f625785b389c03c959354c901ca918.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now you may be thinking “but this model has a higher MAPE score than the yearly
    naive model.” And you’d be correct, by about 0.3%. However, I think that’s a more
    than fair trade considering that I now have an RMSE of about 4 and a half instead
    of 7\. While this model does struggle a bit more in December of 2022 than my best
    SARIMA model, it’s off by less area amount for that spike than the larger spike
    for fall of 2023, which I care more about. [You can find that model here.](https://github.com/casanave/Pumpkin_Spice/blob/main/ps_predictor.sav)
  prefs: []
  type: TYPE_NORMAL
- en: 'Further Validation:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will wait until 10/7/2024 and do another data pull and see how the model did
    against last year’s data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To sum up, I was able to disprove the null hypothesis, my final model outperformed
    a naive yearly model. I’ve proved that pumpkin spice popularity on Google is very
    seasonal and can be predicted. Between naive, SARMA models, and ETS models, ETS
    was better able to capture the relationship between time and pumpkin spice popularity.
    The multiplicative relationship of pumpkin spice to time implies that pumpkin
    spice’s popularity is based on more than one independent variable besides time
    in the expression `time * unknown_independant_var = pumpkin_spice_popularity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'What I Learned and Future Work:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My next step is to use some version of [Meta’s graph API](https://developers.facebook.com/docs/instagram-api/)
    to look for “pumpkin spice” being used in business articles. I wonder how correlated
    that data will be to my Google trends data. I also learned that when the seasonal
    decomposition points towards a multiplicative model, I’ll reach for an ETS much
    sooner in my process.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, I’m interested in automating a lot of this process. Ideally, I’d
    like to build a Python module where the input is a CSV directly from Google Trends
    and the output can be a useable model with good enough documentation that a nontechnical
    user could make and test their own predictive models. On the eventuality that
    a user would pick data that is hard to predict (IE a naive or random walk model
    would suit better), I hope to build the module to explain that to users. I could
    then collect data from an app using that module to showcase findings of seasonality
    across lots of untested data.
  prefs: []
  type: TYPE_NORMAL
- en: Look out for that app by pumpkin spice season of next year!
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Google Trends, N/A ([https://www.google.com/trends](http://www.google.com/trends))'
  prefs: []
  type: TYPE_NORMAL
