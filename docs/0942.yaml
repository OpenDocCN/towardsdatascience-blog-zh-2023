- en: Seasoning your AB testing experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/seasoning-your-ab-testing-experiments-e585ab2ef2d2?source=collection_archive---------18-----------------------#2023-03-13](https://towardsdatascience.com/seasoning-your-ab-testing-experiments-e585ab2ef2d2?source=collection_archive---------18-----------------------#2023-03-13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How can salt help you with experiments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://markeltsefon.medium.com/?source=post_page-----e585ab2ef2d2--------------------------------)[![Mark
    Eltsefon](../Images/5ab4cccd496f73cd155bbb253f85ec4d.png)](https://markeltsefon.medium.com/?source=post_page-----e585ab2ef2d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e585ab2ef2d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e585ab2ef2d2--------------------------------)
    [Mark Eltsefon](https://markeltsefon.medium.com/?source=post_page-----e585ab2ef2d2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F88f461f6049a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseasoning-your-ab-testing-experiments-e585ab2ef2d2&user=Mark+Eltsefon&userId=88f461f6049a&source=post_page-88f461f6049a----e585ab2ef2d2---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e585ab2ef2d2--------------------------------)
    ·5 min read·Mar 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe585ab2ef2d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseasoning-your-ab-testing-experiments-e585ab2ef2d2&user=Mark+Eltsefon&userId=88f461f6049a&source=-----e585ab2ef2d2---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe585ab2ef2d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fseasoning-your-ab-testing-experiments-e585ab2ef2d2&source=-----e585ab2ef2d2---------------------bookmark_footer-----------)![](../Images/c5d127a9d96144e0d73a0d474cca9844.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Manuel Asturias](https://unsplash.com/es/@manuel_asturias?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: AB testing is one of the most well-known methods to measure the effect of new
    features’ implementation. The main idea is to split your traffic ( or just the
    part of it) into two or more groups randomly. However, it’s important to ensure
    that the split is truly random and unbiased in order to be confident about the
    results. This is where salts come into play. The purpose of salts is to eliminate
    sources of bias or predictability that could affect the results of an AB test.
    Without salts, there is a risk that some users may be more likely to be assigned
    to a particular variation of a webpage or application based on their characteristics,
    behavior, or other factors, leading to biased results.
  prefs: []
  type: TYPE_NORMAL
- en: Hash and splitting.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s explore the main question of how to divide our users into different experiments
    and groups. To make it clearer, it’s better to use an example. We can divide our
    entire traffic into 10 buckets.
  prefs: []
  type: TYPE_NORMAL
- en: Before actually assigning users to the buckets , let’s refresh our memory with
    what the hash function is.
  prefs: []
  type: TYPE_NORMAL
- en: Hash functions are used to convert input data into a fixed-size, unique value
    that can represent the original data. How can this be beneficial? It can transform
    a unique aspect of our user…
  prefs: []
  type: TYPE_NORMAL
