["```py\nconda install -c conda-forge scikit-criteria\n```", "```py\nimport pandas as pd\nimport skcriteria as skc\n\nfrom scipy.stats import skew\nfrom scipy.stats import kurtosis\n```", "```py\n# Data file #\n\n# 1) load your own datafile here \n# OR\n# 2) Utilize the practice dataset of the first 1000 responses of IPIP-50 \n# which is available at http://openpsychometrics.org/_rawdata/.\n# For simplicity, we only utilized the 10-conscientious items (CSN)\n\n## The original IPIP-50 survey can be found here: \n## https://ipip.ori.org/New_IPIP-50-item-scale.htm\n\nData = pd.read_csv(r'InsertFilePathHere.csv')\n```", "```py\n#Recoding conscientiousness items\nData['CSN2'] = Data['CSN2'].replace({5:1, 4:2, 3:3, 2:4, 1:5})\nData['CSN4'] = Data['CSN4'].replace({5:1, 4:2, 3:3, 2:4, 1:5})\nData['CSN6'] = Data['CSN6'].replace({5:1, 4:2, 3:3, 2:4, 1:5})\nData['CSN8'] = Data['CSN8'].replace({5:1, 4:2, 3:3, 2:4, 1:5})\n```", "```py\n## Standard Deviation ##\nstd = pd.DataFrame(Data.std())\nstd = std.T\n\n## Skewness ##\nskewdf = pd.DataFrame(skew(Data, axis=0, bias=False, nan_policy='omit'))\nskewdf = skewdf.T\nskewdf = pd.DataFrame(data=skewdf.values, columns=Data.columns)\n\n## Kurtosis ##\nkurtosisdf = pd.DataFrame(kurtosis(Data, axis=0, bias=False, nan_policy='omit'))\nkurtosisdf = kurtosisdf.T\nkurtosisdf = pd.DataFrame(data=kurtosisdf.values, columns=Data.columns)\n```", "```py\n#SME = pd.read_csv(r'C:\\XXX insert own filepath here)\n#SME = SME.T\n#SME.columns = Data.columns\n```", "```py\nmergeddata = pd.concat([std, skewdf, kurtosisdf], axis=0)\nmergeddata.index = ['STD', 'Skew', \"Kurtosis\"]\nmergeddata = mergeddata.T\nmergeddata\n```", "```py\nmergeddata['Skew'] = mergeddata['Skew'].abs()\nmergeddata['Kurtosis'] = mergeddata['Kurtosis'].abs()\n```", "```py\ndmat = skc.mkdm(\n    mergeddata.values, objectives=[max, min, min],\n    weights=[.33, .33, .33],\n    alternatives=[\"it1\", \"it2\", \"it3\", \"it4\", \"it5\", \"it6\", \"it7\", \"it8\", \"it9\", \"it10\"],\n    criteria=[\"SD\", \"Skew\", \"Kurt\"])\n```", "```py\nfrom skcriteria.preprocessing import filters\n\n########################### SD FILTER ###########################\n# For this, we apply a filter: to only view items with SD higher than .50 and lower than 1.50\n# These ranges will shift based upon your likert scale options (e.g., 1-5, 1-7, 1-100)\n\n## SD lower limit filter\nSDLL = filters.FilterGE({\"SD\": 0.50})\nSDLL\n\ndmatSDLL = SDLL.transform(dmat)\ndmatSDLL\n\n## SD upper limit filter\nSDUL = filters.FilterLT({\"SD\": 1.50})\ndmatSDUL = SDUL.transform(dmatSDLL)\ndmatSDUL\n\n## Whenever it is your final filter applied, I suggest changing the name\ndmatfinal = dmatSDUL\ndmatfinal\n\n# Similarly, for SME ratings (if used), we may only want to consider items that have an SME above the median of our scale.\n# For example, we may set the filter to only consider items with SME ratings above 3 on a 5-point likert scale\n\n########################### SME FILTER ###########################\n\n# Values are not set to run because we don't have SME ratings\n# To utilize this: simply remove the # and change the decision matrix input\n# in the below sections\n\n#SMEFILT = filters.FilterGE({\"SME\": 3.00})\n\n#dmatfinal = SME.transform(dmatSDUL)\n#dmatfinal\n```", "```py\n# skcriteria prefers to deal with maxmizing all criteria\n# Here, we invert our skewness and kurtosis. Higher values will then be more desirable\n\nfrom skcriteria.preprocessing import invert_objectives, scalers\n\ninv = invert_objectives.InvertMinimize()\ndmatfinal = inv.transform(dmatfinal)\n\n# Now we scale each criteria into an easy to understand 0 to 1 index\n# The closer to 1, the more desirable the item statistic\n\nscaler = scalers.SumScaler(target=\"both\")\ndmatfinal = scaler.transform(dmatfinal)\ndmatfinal\n```", "```py\n## Now we simply rank these items ##\n\nfrom skcriteria.madm import simple\ndecision = simple.WeightedSumModel()\nranking = decision.evaluate(dmatfinal)\nranking\n```", "```py\n## Save this data for step 2 ##\n\nData.to_csv(r'C:\\InputYourDesiredFilePathandName.csv')\n```", "```py\ninstall.packages(c(\"shiny\",\"shinythemes\",\"dplyr\",\"gtools\",\"Lambda4\",\"DT\",\"psych\", \"GPArotation\", \"mice\"))\nlibrary(shiny)\nrunUrl(\"https://orgscience.uncc.edu/sites/orgscience.uncc.edu/files/media/OASIS.zip\")\n```"]