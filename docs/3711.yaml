- en: Intro to Docker Containers for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/intro-to-docker-containers-for-data-scientists-dda9f2cfe66e?source=collection_archive---------4-----------------------#2023-12-20](https://towardsdatascience.com/intro-to-docker-containers-for-data-scientists-dda9f2cfe66e?source=collection_archive---------4-----------------------#2023-12-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A practical tutorial for setting up a local dev environment using Docker Container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)[![Ido
    Leshem](../Images/914fd1635e4c34876816956422c357e8.png)](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)
    [Ido Leshem](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64b979a03bf7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&user=Ido+Leshem&userId=64b979a03bf7&source=post_page-64b979a03bf7----dda9f2cfe66e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)
    ·7 min read·Dec 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdda9f2cfe66e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&user=Ido+Leshem&userId=64b979a03bf7&source=-----dda9f2cfe66e---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdda9f2cfe66e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&source=-----dda9f2cfe66e---------------------bookmark_footer-----------)![](../Images/3fbf0a765877408a6ff283956455bbdd.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image by Tom Fask from Pexels
  prefs: []
  type: TYPE_NORMAL
- en: '**Motivation**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An essential part of a data scientist’s daily work involves managing and maintaining
    a development environment. Our work goes considerably more smoothly when the development
    environment is kept up-to-date and closely reflects the production environment;
    when it isn’t, things start to get messy. Proficiency with the CI/CD pipeline
    and devops can be quite advantageous in a larger environment. Providing developments
    that are simple to integrate and put into production is a data scientist’s first
    priority.
  prefs: []
  type: TYPE_NORMAL
- en: This is where containers come into play; by encapsulating our development environment,
    they allow us to save time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, I would provide a step-by-step guidance on how to set up
    a docker environment. I’ll be using a Linux environment, with a Python version
    3.8, connected to a Git repo of your choice. To illustrate, I created a repo with
    an algorithm that determines whether a given text is more likely to be AI generated
    or written by a human.
  prefs: []
  type: TYPE_NORMAL
- en: '**Who could benefit from working on a docker container environment?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You probably don’t need to use containers if you’re a developer working on a
    side project and don’t care about deploying it to production. However, this one
    is a necessity if you are part of a team that uses the CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can think of few daily examples why containerization is rather important:'
  prefs: []
  type: TYPE_NORMAL
- en: Assume for the moment that you are working on several projects with varying
    dependencies and environment settings. Without using containers, it can be very
    challenging to switch between them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new developer is joining the team and you want him to easily set up a working
    environment. Without containers, he or she will have to work on their local machine
    which probably doesn’t have the same requirements and properties as the other
    team members have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You had some tests or changes with your dependencies which are now not compatible
    with each other. In this case, rolling back the changes will be a time-consuming
    task. Alternatively, you may just create a new container and resume normal operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What is a container?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept of containers was first introduced in the 1970’s. Imagine a container
    as an isolated working environment — a server that we can define from scratch.
    We can decide what will be the properties of this server such as the operating
    system, python interpreter version and library dependencies. The server is sustained
    by relying on your machine resources. Another property of the container is that
    it doesn’t have access to our storage, unless we explicitly grant it permission.
    A good practice is to mount a folder we want to be included in our container scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, working with containers include the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Define the container environment using Dockerfile
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Creating a docker image based on the Dockerfile
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Creating a container based on docker image
  prefs: []
  type: TYPE_NORMAL
- en: This process can be easily shared among the team members and containers can
    be recreated over and over as needed.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is Dockerfile?**'
  prefs: []
  type: TYPE_NORMAL
- en: As said above, a container is a capsulated environment for running our algorithms.
    This environment is supported by the docker extension responsible for supporting
    containerization.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do so, we first need to define a dockerfile which specifies our
    system requirements. Think of the dockerfile as a document or a ‘recipe’ which
    defines our container template, which is called the docker image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example for a dockerfile we will use as part of this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This dockerfile contains several important steps:'
  prefs: []
  type: TYPE_NORMAL
- en: (1) We import base images for having an Ubuntu environment.
  prefs: []
  type: TYPE_NORMAL
- en: (2) we install pip, python and git. The apt-get is a linux command for package
    handling.
  prefs: []
  type: TYPE_NORMAL
- en: (3) We set our workdir name (in this example it is /app)
  prefs: []
  type: TYPE_NORMAL
- en: (4) We install our requirements detailed in the requirements.txt file
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfile provides us with a lot of flexibility. For instance, my repo relies
    on the transformers library without its dependencies, so I installed it separately
    (the last row in the Dockerfile).
  prefs: []
  type: TYPE_NORMAL
- en: '**Note —** Working with containers offers many benefits in terms of speed and
    agility, yet there are drawbacks as well. Safety is one of them. Container images
    uploaded by untrusted resources might contain malicious content. Make sure you
    are using a trusted source and that your container is configured properly. Another
    option is to employ security tools like snyk, which scan your docker image for
    any potential vulnerabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08efeb6c5032f306d8e21c61f17f2368.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Tom Fask from Pexels
  prefs: []
  type: TYPE_NORMAL
- en: '**Set up a Container**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Preliminary Prerequisites** Before we create a docker container, we first
    need to make sure our local working environment is ready. Let’s make sure we have
    the following checklist:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. VS Code as our code editor : [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Git for version control management: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Github user: [https://github.com/](https://github.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. [https://www.docker.com/](https://www.docker.com/)
  prefs: []
  type: TYPE_NORMAL
- en: After you complete all these prerequisites, make sure to sign in to the docker
    app you have installed. This will enable us to create a docker container and track
    it’s status
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1 — Cloning the Repo**'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, let’s select a repo to work with. Here I provided a repo containing
    an algorithm which estimates whether a text is AI generated by combining both
    the model’s perplexity value given a text and the number of spelling errors. Higher
    perplexity implies that it is more difficult for LLM to predict the next word,
    hence wasn’t generated by a human.
  prefs: []
  type: TYPE_NORMAL
- en: 'The repo’s link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/Idoleshem/setup_a_local_container?source=post_page-----dda9f2cfe66e--------------------------------)
    [## GitHub - Idoleshem/setup_a_local_container'
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to Idoleshem/setup_a_local_container development by creating an account
    on GitHub.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/Idoleshem/setup_a_local_container?source=post_page-----dda9f2cfe66e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'On github, Click **code** and copy the HTTPS address as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84a2b8dac6fab0d65425d44a6b542773.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: After that, open the VS Code, and clone a repo you wish to include in your container.
    make sure VS Code is connected to your github account. Alternatively, you can
    also init a new git repo.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7dea06269b48ae10074c3042cdf05ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2 — Create a docker image**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do this by opening the terminal and copy paste the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This might take a few moments until you see your docker image created. Click
    on the docker icon, the change would be reflected. Once we created the docker
    image we don’t need to run this command anymore. The only command we will use
    is docker run.
  prefs: []
  type: TYPE_NORMAL
- en: The local_container_intro is the name of the docker image, you can change it
    to what ever you want.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/94bafe936090f0cdf43a60b144572b89.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Once the docker image was created, you can see it in the IMAGES window.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3 — create a docker container**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To grant the container access to the repository you cloned, remember to include
    your project path in the docker run command. We will use the following command
    to create the container, giving it the name “local_container_instance”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b4e1edd0deb8c4c43eaf2d9e2975c799.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: You can view the container in the CONTAINERS window after it has been created.
    In order to actually use it, click “attach visual studio code”. This will open
    a new window which reflects your containerized environment. This environment includes
    your code and on the bottom left you can see your container name. Open the terminal
    and run “pip list” and see whether all the dependencies are installed. Make sure
    to install any Python extensions that may be required for your container.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/476e4bf7c70c32225e0204ef2d6bd2c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: That’s it, all that is left to do is start developing :)
  prefs: []
  type: TYPE_NORMAL
- en: To recap, this blog post provided a step-by-step guide on setting up a local
    container. I highly recommend using containers and leverage their high flexibility
    and convenience in development.
  prefs: []
  type: TYPE_NORMAL
