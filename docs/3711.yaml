- en: Intro to Docker Containers for Data Scientists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家的Docker容器简介
- en: 原文：[https://towardsdatascience.com/intro-to-docker-containers-for-data-scientists-dda9f2cfe66e?source=collection_archive---------4-----------------------#2023-12-20](https://towardsdatascience.com/intro-to-docker-containers-for-data-scientists-dda9f2cfe66e?source=collection_archive---------4-----------------------#2023-12-20)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/intro-to-docker-containers-for-data-scientists-dda9f2cfe66e?source=collection_archive---------4-----------------------#2023-12-20](https://towardsdatascience.com/intro-to-docker-containers-for-data-scientists-dda9f2cfe66e?source=collection_archive---------4-----------------------#2023-12-20)
- en: A practical tutorial for setting up a local dev environment using Docker Container
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个实用的教程，教你如何使用Docker容器设置本地开发环境
- en: '[](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)[![Ido
    Leshem](../Images/914fd1635e4c34876816956422c357e8.png)](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)
    [Ido Leshem](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)[![Ido
    Leshem](../Images/914fd1635e4c34876816956422c357e8.png)](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)
    [Ido Leshem](https://leshem-ido.medium.com/?source=post_page-----dda9f2cfe66e--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64b979a03bf7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&user=Ido+Leshem&userId=64b979a03bf7&source=post_page-64b979a03bf7----dda9f2cfe66e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)
    ·7 min read·Dec 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdda9f2cfe66e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&user=Ido+Leshem&userId=64b979a03bf7&source=-----dda9f2cfe66e---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64b979a03bf7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&user=Ido+Leshem&userId=64b979a03bf7&source=post_page-64b979a03bf7----dda9f2cfe66e---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dda9f2cfe66e--------------------------------)
    ·7分钟阅读·2023年12月20日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdda9f2cfe66e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&user=Ido+Leshem&userId=64b979a03bf7&source=-----dda9f2cfe66e---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdda9f2cfe66e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&source=-----dda9f2cfe66e---------------------bookmark_footer-----------)![](../Images/3fbf0a765877408a6ff283956455bbdd.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdda9f2cfe66e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-docker-containers-for-data-scientists-dda9f2cfe66e&source=-----dda9f2cfe66e---------------------bookmark_footer-----------)![](../Images/3fbf0a765877408a6ff283956455bbdd.png)'
- en: Image by Tom Fask from Pexels
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Tom Fask，来自Pexels
- en: '**Motivation**'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**动机**'
- en: An essential part of a data scientist’s daily work involves managing and maintaining
    a development environment. Our work goes considerably more smoothly when the development
    environment is kept up-to-date and closely reflects the production environment;
    when it isn’t, things start to get messy. Proficiency with the CI/CD pipeline
    and devops can be quite advantageous in a larger environment. Providing developments
    that are simple to integrate and put into production is a data scientist’s first
    priority.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家日常工作的重要组成部分是管理和维护开发环境。当开发环境保持更新并且紧密反映生产环境时，我们的工作会顺利很多；否则，事情就会变得混乱。在较大的环境中，对CI/CD管道和DevOps的熟练掌握非常有利。提供易于集成和投入生产的开发成果是数据科学家的首要任务。
- en: This is where containers come into play; by encapsulating our development environment,
    they allow us to save time and effort.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是容器发挥作用的地方；通过封装我们的开发环境，它们可以帮助我们节省时间和精力。
- en: In this blog post, I would provide a step-by-step guidance on how to set up
    a docker environment. I’ll be using a Linux environment, with a Python version
    3.8, connected to a Git repo of your choice. To illustrate, I created a repo with
    an algorithm that determines whether a given text is more likely to be AI generated
    or written by a human.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我将提供逐步指南，说明如何设置 Docker 环境。我将使用一个 Linux 环境，Python 版本为 3.8，并连接到你选择的 Git
    仓库。为了说明，我创建了一个包含一个算法的仓库，该算法可以判断给定的文本是更可能是 AI 生成的还是由人类编写的。
- en: '**Who could benefit from working on a docker container environment?**'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**谁可以从使用 Docker 容器环境中受益？**'
- en: You probably don’t need to use containers if you’re a developer working on a
    side project and don’t care about deploying it to production. However, this one
    is a necessity if you are part of a team that uses the CI/CD pipeline.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个正在进行副项目的开发者，并且不关心将其部署到生产环境中，那么你可能不需要使用容器。然而，如果你是使用 CI/CD 流水线的团队的一部分，那么这就是一种必要性。
- en: 'I can think of few daily examples why containerization is rather important:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我能想到一些日常的例子，说明容器化是多么重要：
- en: Assume for the moment that you are working on several projects with varying
    dependencies and environment settings. Without using containers, it can be very
    challenging to switch between them.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你正在处理多个具有不同依赖项和环境设置的项目。如果不使用容器，在它们之间切换可能会非常具有挑战性。
- en: A new developer is joining the team and you want him to easily set up a working
    environment. Without containers, he or she will have to work on their local machine
    which probably doesn’t have the same requirements and properties as the other
    team members have.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新的开发者加入团队，你希望他能轻松地设置工作环境。如果没有容器，他或她将不得不在本地机器上工作，而本地机器可能与其他团队成员的要求和属性不同。
- en: You had some tests or changes with your dependencies which are now not compatible
    with each other. In this case, rolling back the changes will be a time-consuming
    task. Alternatively, you may just create a new container and resume normal operations.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你对依赖项进行了某些测试或更改，而这些依赖项现在彼此不兼容，在这种情况下，回滚更改将是一个耗时的任务。另一种选择是创建一个新的容器并恢复正常操作。
- en: '**What is a container?**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**什么是容器？**'
- en: The concept of containers was first introduced in the 1970’s. Imagine a container
    as an isolated working environment — a server that we can define from scratch.
    We can decide what will be the properties of this server such as the operating
    system, python interpreter version and library dependencies. The server is sustained
    by relying on your machine resources. Another property of the container is that
    it doesn’t have access to our storage, unless we explicitly grant it permission.
    A good practice is to mount a folder we want to be included in our container scope.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的概念最早在 1970 年代被提出。可以把容器想象成一个隔离的工作环境——一个我们可以从零开始定义的服务器。我们可以决定这个服务器的属性，比如操作系统、Python
    解释器版本和库依赖。服务器依靠你的机器资源来维持。容器的另一个属性是，它没有访问我们的存储，除非我们明确授予权限。一个好的做法是挂载一个我们希望包含在容器范围内的文件夹。
- en: 'In a nutshell, working with containers include the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，使用容器包括以下步骤：
- en: 1\. Define the container environment using Dockerfile
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 使用 Dockerfile 定义容器环境
- en: 2\. Creating a docker image based on the Dockerfile
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 基于 Dockerfile 创建 Docker 镜像
- en: 3\. Creating a container based on docker image
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 基于 Docker 镜像创建容器
- en: This process can be easily shared among the team members and containers can
    be recreated over and over as needed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可以很容易地在团队成员之间共享，容器可以根据需要反复创建。
- en: '**What is Dockerfile?**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是 Dockerfile？**'
- en: As said above, a container is a capsulated environment for running our algorithms.
    This environment is supported by the docker extension responsible for supporting
    containerization.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，容器是运行我们算法的封装环境。这个环境由负责容器化的 Docker 扩展支持。
- en: In order to do so, we first need to define a dockerfile which specifies our
    system requirements. Think of the dockerfile as a document or a ‘recipe’ which
    defines our container template, which is called the docker image.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们首先需要定义一个 Dockerfile，该文件指定我们的系统要求。把 Dockerfile 想象成一个文档或“配方”，它定义了我们的容器模板，也就是
    Docker 镜像。
- en: 'Here is an example for a dockerfile we will use as part of this tutorial:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个我们将在本教程中使用的 Dockerfile 示例：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This dockerfile contains several important steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Dockerfile 包含几个重要步骤：
- en: (1) We import base images for having an Ubuntu environment.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 我们导入用于创建 Ubuntu 环境的基础镜像。
- en: (2) we install pip, python and git. The apt-get is a linux command for package
    handling.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 我们安装 pip、python 和 git。apt-get 是一个用于包管理的 Linux 命令。
- en: (3) We set our workdir name (in this example it is /app)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: (3) 我们设置工作目录名称（在此示例中为 /app）
- en: (4) We install our requirements detailed in the requirements.txt file
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: (4) 我们安装 requirements.txt 文件中详细列出的依赖
- en: Dockerfile provides us with a lot of flexibility. For instance, my repo relies
    on the transformers library without its dependencies, so I installed it separately
    (the last row in the Dockerfile).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 为我们提供了很多灵活性。例如，我的仓库依赖于 transformers 库及其依赖项，因此我单独安装了它（Dockerfile 的最后一行）。
- en: '**Note —** Working with containers offers many benefits in terms of speed and
    agility, yet there are drawbacks as well. Safety is one of them. Container images
    uploaded by untrusted resources might contain malicious content. Make sure you
    are using a trusted source and that your container is configured properly. Another
    option is to employ security tools like snyk, which scan your docker image for
    any potential vulnerabilities.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 —** 使用容器在速度和灵活性方面提供了许多好处，但也有缺点。其中之一就是安全性。由不可信资源上传的容器镜像可能包含恶意内容。确保你使用的是可信来源，并且容器配置正确。另一种选择是使用安全工具如
    snyk，它可以扫描你的 Docker 镜像以查找潜在的漏洞。'
- en: '![](../Images/08efeb6c5032f306d8e21c61f17f2368.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08efeb6c5032f306d8e21c61f17f2368.png)'
- en: Image by Tom Fask from Pexels
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 Tom Fask，来自 Pexels
- en: '**Set up a Container**'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**设置容器**'
- en: '**Preliminary Prerequisites** Before we create a docker container, we first
    need to make sure our local working environment is ready. Let’s make sure we have
    the following checklist:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**初步前提** 在我们创建 Docker 容器之前，首先需要确保我们的本地工作环境已准备好。让我们确保我们拥有以下检查清单：'
- en: '1\. VS Code as our code editor : [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '1\. 使用 VS Code 作为我们的代码编辑器: [https://code.visualstudio.com/](https://code.visualstudio.com/)'
- en: '2\. Git for version control management: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '2\. 版本控制管理的 Git: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
- en: '3\. Github user: [https://github.com/](https://github.com/)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '3\. Github 用户: [https://github.com/](https://github.com/)'
- en: 4\. [https://www.docker.com/](https://www.docker.com/)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. [https://www.docker.com/](https://www.docker.com/)
- en: After you complete all these prerequisites, make sure to sign in to the docker
    app you have installed. This will enable us to create a docker container and track
    it’s status
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些前提条件后，请确保登录你安装的 Docker 应用程序。这将使我们能够创建 Docker 容器并跟踪其状态。
- en: '**Step 1 — Cloning the Repo**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1 — 克隆仓库**'
- en: To begin, let’s select a repo to work with. Here I provided a repo containing
    an algorithm which estimates whether a text is AI generated by combining both
    the model’s perplexity value given a text and the number of spelling errors. Higher
    perplexity implies that it is more difficult for LLM to predict the next word,
    hence wasn’t generated by a human.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们选择一个仓库进行操作。这里我提供了一个包含算法的仓库，该算法通过结合模型在给定文本下的困惑度值和拼写错误数量来估计文本是否由AI生成。较高的困惑度意味着LLM更难预测下一个词，因此不是由人类生成的。
- en: 'The repo’s link:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库链接：
- en: '[](https://github.com/Idoleshem/setup_a_local_container?source=post_page-----dda9f2cfe66e--------------------------------)
    [## GitHub - Idoleshem/setup_a_local_container'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/Idoleshem/setup_a_local_container?source=post_page-----dda9f2cfe66e--------------------------------)
    [## GitHub - Idoleshem/setup_a_local_container'
- en: Contribute to Idoleshem/setup_a_local_container development by creating an account
    on GitHub.
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过在 GitHub 上创建帐户来贡献于 Idoleshem/setup_a_local_container 的开发。
- en: github.com](https://github.com/Idoleshem/setup_a_local_container?source=post_page-----dda9f2cfe66e--------------------------------)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/Idoleshem/setup_a_local_container?source=post_page-----dda9f2cfe66e--------------------------------)'
- en: 'On github, Click **code** and copy the HTTPS address as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上，点击 **code** 并复制 HTTPS 地址，如下所示：
- en: '![](../Images/84a2b8dac6fab0d65425d44a6b542773.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84a2b8dac6fab0d65425d44a6b542773.png)'
- en: Image by author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: After that, open the VS Code, and clone a repo you wish to include in your container.
    make sure VS Code is connected to your github account. Alternatively, you can
    also init a new git repo.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开 VS Code，克隆一个你希望包含在容器中的仓库。确保 VS Code 已连接到你的 GitHub 账户。或者，你也可以初始化一个新的 Git
    仓库。
- en: '![](../Images/f7dea06269b48ae10074c3042cdf05ab.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f7dea06269b48ae10074c3042cdf05ab.png)'
- en: Image by author
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: '**Step 2 — Create a docker image**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2 — 创建 Docker 镜像**'
- en: 'Do this by opening the terminal and copy paste the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开终端并复制粘贴以下命令来完成此操作：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This might take a few moments until you see your docker image created. Click
    on the docker icon, the change would be reflected. Once we created the docker
    image we don’t need to run this command anymore. The only command we will use
    is docker run.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要几分钟时间，直到你看到你的 Docker 镜像被创建。点击 Docker 图标，变更将被反映出来。一旦我们创建了 Docker 镜像，我们就不再需要运行这个命令。我们将使用的唯一命令是
    docker run。
- en: The local_container_intro is the name of the docker image, you can change it
    to what ever you want.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: local_container_intro 是 Docker 镜像的名称，你可以将其更改为你想要的任何名称。
- en: '![](../Images/94bafe936090f0cdf43a60b144572b89.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94bafe936090f0cdf43a60b144572b89.png)'
- en: Image by author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Once the docker image was created, you can see it in the IMAGES window.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了 Docker 镜像，你可以在 IMAGES 窗口中看到它。
- en: '**Step 3 — create a docker container**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3 — 创建一个 Docker 容器**'
- en: 'To grant the container access to the repository you cloned, remember to include
    your project path in the docker run command. We will use the following command
    to create the container, giving it the name “local_container_instance”:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了授予容器访问你克隆的仓库的权限，请记得在 docker run 命令中包括你的项目路径。我们将使用以下命令创建容器，并将其命名为“local_container_instance”：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/b4e1edd0deb8c4c43eaf2d9e2975c799.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4e1edd0deb8c4c43eaf2d9e2975c799.png)'
- en: Image by author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: You can view the container in the CONTAINERS window after it has been created.
    In order to actually use it, click “attach visual studio code”. This will open
    a new window which reflects your containerized environment. This environment includes
    your code and on the bottom left you can see your container name. Open the terminal
    and run “pip list” and see whether all the dependencies are installed. Make sure
    to install any Python extensions that may be required for your container.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建容器后，你可以在 CONTAINERS 窗口中查看它。为了实际使用它，点击“attach visual studio code”。这将打开一个新窗口，反映你的容器化环境。这个环境包括你的代码，你可以在左下角看到你的容器名称。打开终端并运行“pip
    list”，检查所有依赖项是否已安装。确保安装任何可能需要的 Python 扩展。
- en: '![](../Images/476e4bf7c70c32225e0204ef2d6bd2c5.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/476e4bf7c70c32225e0204ef2d6bd2c5.png)'
- en: Image by author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: That’s it, all that is left to do is start developing :)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，剩下的就是开始开发 :)
- en: To recap, this blog post provided a step-by-step guide on setting up a local
    container. I highly recommend using containers and leverage their high flexibility
    and convenience in development.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，这篇博客文章提供了设置本地容器的逐步指南。我强烈推荐使用容器，并利用它们在开发中的高灵活性和便利性。
