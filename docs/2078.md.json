["```py\nimport torch\nfrom torch import nn\ndef num_parameters(m):\nreturn sum([p.numel() for p in m.parameters()])\ndk, m, n = 3, 16, 32\nprint(f\"Expected number of parameters: {m * dk * dk * n}\")\nconv1 = nn.Conv2d(in_channels=m, out_channels=n, kernel_size=dk, bias=False)\nprint(f\"Actual number of parameters: {num_parameters(conv1)}\")\n```", "```py\nExpected number of parameters: 4608\nActual number of parameters: 4608\n```", "```py\nfrom torchinfo import summary\nh, w = 128, 128\nprint(f\"Expected total multiplies: {m * dk * dk * h * w * n}\")\nsummary(conv1, input_size=(1, m, h, w))\n```", "```py\nExpected total multiplies: 75497472\n\n==========================================================================================\nLayer (type:depth-idx)                   Output Shape              Param #\n==========================================================================================\nConv2d                                   [1, 32, 128, 128]         4,608\n==========================================================================================\nTotal params: 4,608\nTrainable params: 4,608\nNon-trainable params: 0\nTotal mult-adds (M): 75.50\n==========================================================================================\nInput size (MB): 1.05\nForward/backward pass size (MB): 4.19\nParams size (MB): 0.02\nEstimated Total Size (MB): 5.26\n==========================================================================================\n```", "```py\nclass DepthwiseSeparableConv(nn.Sequential):\n    def __init__(self, chin, chout, dk):\n        super().__init__(\n            # Depthwise convolution\n            nn.Conv2d(chin, chin, kernel_size=dk, stride=1, padding=dk-2, bias=False, groups=chin),\n            # Pointwise convolution\n            nn.Conv2d(chin, chout, kernel_size=1, bias=False),\n        )\n\nconv2 = DepthwiseSeparableConv(chin=m, chout=n, dk=dk)\nprint(f\"Expected number of parameters: {m * dk * dk + m * 1 * 1 * n}\")\nprint(f\"Actual number of parameters: {num_parameters(conv2)}\")\n```", "```py\nExpected number of parameters: 656\nActual number of parameters: 656\n```", "```py\nprint(f\"Expected total multiplies: {m * dk * dk * h * w + m * 1 * 1 * h * w * n}\")\ns2 = summary(conv2, input_size=(1, m, h, w))\nprint(f\"Actual multiplies: {s2.total_mult_adds}\")\nprint(s2)\n```", "```py\nExpected total multiplies: 10747904\nActual multiplies: 10747904\n==========================================================================================\nLayer (type:depth-idx)                   Output Shape              Param #\n==========================================================================================\nDepthwiseSeparableConv                   [1, 32, 128, 128]         --\n├─Conv2d: 1-1                            [1, 16, 128, 128]         144\n├─Conv2d: 1-2                            [1, 32, 128, 128]         512\n==========================================================================================\nTotal params: 656\nTrainable params: 656\nNon-trainable params: 0\nTotal mult-adds (M): 10.75\n==========================================================================================\nInput size (MB): 1.05\nForward/backward pass size (MB): 6.29\nParams size (MB): 0.00\nEstimated Total Size (MB): 7.34\n==========================================================================================\n```"]