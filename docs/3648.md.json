["```py\npip install -q srai[voronoi,osm,plotting] geodatasets\n```", "```py\nimport geodatasets\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nfrom shapely.geometry import MultiPoint, Point\nfrom shapely.ops import voronoi_diagram\n\nfrom srai.regionalizers import VoronoiRegionalizer, geocode_to_region_gdf\n```", "```py\nearth_points_gdf = gpd.GeoDataFrame(\n    geometry=[\n        Point(0, 0),\n        Point(90, 0),\n        Point(180, 0),\n        Point(-90, 0),\n        Point(0, 90),\n        Point(0, -90),\n    ],\n    index=[1, 2, 3, 4, 5, 6],\n    crs=\"EPSG:4326\",\n)\n```", "```py\ndef generate_flat_voronoi_diagram_regions(\n    seeds_gdf: gpd.GeoDataFrame,\n) -> gpd.GeoDataFrame:\n    points = MultiPoint(seeds_gdf.geometry.values)\n\n    # Generate 2D diagram\n    regions = voronoi_diagram(points)\n\n    # Map geometries to GeoDataFrame\n    flat_voronoi_regions = gpd.GeoDataFrame(\n        geometry=list(regions.geoms),\n        crs=\"EPSG:4326\",\n    )\n    # Apply indexes from the seeds dataframe\n    flat_voronoi_regions.index = gpd.pd.Index(\n        flat_voronoi_regions.sjoin(seeds_gdf)[\"index_right\"],\n        name=\"region_id\",\n    )\n\n    # Clip to Earth boundaries\n    flat_voronoi_regions.geometry = flat_voronoi_regions.geometry.clip_by_rect(\n        xmin=-180, ymin=-90, xmax=180, ymax=90\n    )\n    return flat_voronoi_regions\n```", "```py\nearth_poles_flat_voronoi_regions = generate_flat_voronoi_diagram_regions(\n    earth_points_gdf\n)\n```", "```py\nearth_points_spherical_voronoi_regions = VoronoiRegionalizer(\n    seeds=earth_points_gdf\n).transform()\n```", "```py\ndef calculate_iou(\n    flat_regions: gpd.GeoDataFrame, spherical_regions: gpd.GeoDataFrame\n) -> float:\n    total_intersections_area = 0\n    total_unions_area = 0\n\n    # Iterate all regions\n    for index in spherical_regions.index:\n        # Find matching spherical and flat Voronoi region\n        spherical_region_geometry = spherical_regions.loc[index].geometry\n        flat_region_geometry = flat_regions.loc[index].geometry\n\n        # Calculate their intersection area\n        intersections_area = spherical_region_geometry.intersection(\n            flat_region_geometry\n        ).area\n        # Calculate their union area\n        # Alternative code:\n        # spherical_region_geometry.union(flat_region_geometry).area\n        unions_area = (\n            spherical_region_geometry.area\n            + flat_region_geometry.area\n            - intersections_area\n        )\n\n        # Add to the total sums\n        total_intersections_area += intersections_area\n        total_unions_area += unions_area\n\n    # Divide the intersection area by the union area\n    return round(total_intersections_area / total_unions_area, 3)\n```", "```py\ncalculate_iou(\n    earth_points_flat_voronoi_regions, earth_points_spherical_voronoi_regions\n)\n```", "```py\n# Load AEDs positions to GeoDataFrame\naed_world_gdf = gpd.read_file(\n    \"https://raw.githubusercontent.com/RaczeQ/medium-articles/main/articles/spherical-geovoronoi/aed_world.geojson\"\n)\n```", "```py\naed_flat_voronoi_regions = generate_flat_voronoi_diagram_regions(aed_world_gdf)\n\naed_spherical_voronoi_regions = VoronoiRegionalizer(\n    seeds=aed_world_gdf, max_meters_between_points=1_000\n).transform()\n```", "```py\ncalculate_iou(aed_flat_voronoi_regions, aed_spherical_voronoi_regions)\n```", "```py\ngreater_london_area = geocode_to_region_gdf(\"Greater London\")\naeds_in_london = aed_world_gdf.sjoin(greater_london_area)\n```", "```py\ncalculate_iou(\n    aed_flat_voronoi_regions.loc[aeds_in_london.index],\n    aed_spherical_voronoi_regions.loc[aeds_in_london.index],\n)\n```"]