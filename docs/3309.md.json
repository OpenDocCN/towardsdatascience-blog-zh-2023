["```py\n# pip weaviate-client\nimport weaviate\nimport os\n\nopenai_key = os.environ.get(\"OPENAI_API_KEY\", \"\")\n\n# Setting up client\nclient = weaviate.Client(\n    url = \"http://localhost:8080\",\n    additional_headers={\n         \"X-OpenAI-Api-Key\": openai_key,\n    })\n```", "```py\nmovie_class_schema = {\n    \"class\": \"Movies\",\n    \"description\": \"A collection of movies since 1970.\",\n    \"vectorizer\": \"text2vec-openai\",\n    \"moduleConfig\": {\n        \"text2vec-openai\": {\n            \"vectorizeClassName\": False,\n            \"model\": \"ada\",\n            \"modelVersion\": \"002\",\n            \"type\": \"text\"\n        },\n    },\n    \"vectorIndexConfig\": {\"distance\" : \"cosine\"},\n}\n```", "```py\nmovie_class_schema[\"properties\"] = [\n        {\n            \"name\": \"movie_id\",\n            \"dataType\": [\"number\"],\n            \"description\": \"The id of the movie\", \n            \"moduleConfig\": {\n                \"text2vec-openai\": {  \n                    \"skip\" : True,\n                    \"vectorizePropertyName\" : False\n                }\n            }        \n        },\n        {\n            \"name\": \"title\",\n            \"dataType\": [\"text\"],\n            \"description\": \"The name of the movie\", \n            \"moduleConfig\": {\n                \"text2vec-openai\": {  \n                    \"skip\" : True,\n                    \"vectorizePropertyName\" : False\n                }\n            }   \n        },\n        # shortened for brevity ...\n        {\n            \"name\": \"description\",\n            \"dataType\": [\"text\"],\n            \"description\": \"overview of the movie\", \n        },\n        {\n            \"name\": \"Plot\",\n            \"dataType\": [\"text\"],\n            \"description\": \"Plot of the movie from Wikipedia\", \n        },\n    ]\n\n# Create class\nclient.schema.create_class(movie_class_schema)\n```", "```py\n# Configure batch process - for faster imports \nclient.batch.configure(batch_size=10)\n\n# Importing the data\nfor i in range(len(df)):\n    item = df.iloc[i]\n\n    movie_object = {\n        'movie_id':float(item['id']),\n        'title': str(item['Name']).lower(),\n        # shortened for brevity ...\n        'description':str(item['Description']),\n        'plot': str(item['Plot']),\n    }\n\n    client.batch.add_data_object(movie_object, \"Movies\")\n```", "```py\nasync function get_keyword_results(text) {\n    let data = await client.graphql\n        .get()\n        .withClassName('Movies')\n        .withBm25({query: text,\n            properties: ['title^3', 'director', 'genres', 'actors', 'keywords', 'description', 'plot'],\n        })\n        .withFields(['title', 'poster_link', 'genres', 'year', 'director', 'movie_id'])\n        .withLimit(num_movies)\n        .do()\n        .then(info => {\n            return info\n        })\n        .catch(err => {\n            console.error(err)\n        })\n    return data;\n}\n```", "```py\nasync function get_semantic_results(text) {\n    let data = await client.graphql\n        .get()\n        .withClassName('Movies')\n        .withFields(['title', 'poster_link', 'genres', 'year', 'director', 'movie_id'])\n        .withNearText({concepts: [text]})\n        .withLimit(num_movies)\n        .do()\n        .then(info => {\n            return info\n        })\n        .catch(err => {\n            console.error(err)\n        });\n        return data;\n}\n```", "```py\nasync function get_hybrid_results(text) {\n    let data = await client.graphql\n        .get()\n        .withClassName('Movies')\n        .withFields(['title', 'poster_link', 'genres', 'year', 'director', 'movie_id'])\n        .withHybrid({query: text, alpha: 0.5})\n        .withLimit(num_movies)\n        .do()\n        .then(info => {\n            return info\n        })\n        .catch(err => {\n            console.error(err)\n        });\n    return data;\n}\n```", "```py\nasync function get_recommended_movies(mov_id) {\n    let data = await client.graphql\n        .get()\n        .withClassName('Movies')\n        .withFields(['title', 'genres', 'year', 'poster_link', 'movie_id'])\n        .withNearObject({id: mov_id})\n        .withLimit(20)\n        .do()\n        .then(info => {\n            return info;\n        })\n        .catch(err => {\n            console.error(err)\n        });\n    return data;\n}\n```", "```py\ngit clone git@github.com:weaviate-tutorials/awesome-moviate.git\n```", "```py\npython -m venv .venv             \nsource .venv/bin/activate\n```", "```py\npip install -r requirements.txt\n```", "```py\ndocker compose up -d\n```", "```py\npython add_data.py\n```", "```py\nnpm install\n```", "```py\nnpm run start\n```"]