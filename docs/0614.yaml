- en: Write DRY data models with partials and Pydantic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/write-dry-data-models-with-partials-and-pydantic-b0b13d0eeb3a?source=collection_archive---------4-----------------------#2023-02-14](https://towardsdatascience.com/write-dry-data-models-with-partials-and-pydantic-b0b13d0eeb3a?source=collection_archive---------4-----------------------#2023-02-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Build clean nested data models for use in data engineering pipelines
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@Carobert?source=post_page-----b0b13d0eeb3a--------------------------------)[![Charles
    Mendelson](../Images/0a8dea9bab2a49da65687095d31065e9.png)](https://medium.com/@Carobert?source=post_page-----b0b13d0eeb3a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b0b13d0eeb3a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b0b13d0eeb3a--------------------------------)
    [Charles Mendelson](https://medium.com/@Carobert?source=post_page-----b0b13d0eeb3a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa6f4d278f87e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-dry-data-models-with-partials-and-pydantic-b0b13d0eeb3a&user=Charles+Mendelson&userId=a6f4d278f87e&source=post_page-a6f4d278f87e----b0b13d0eeb3a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b0b13d0eeb3a--------------------------------)
    ·7 min read·Feb 14, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb0b13d0eeb3a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-dry-data-models-with-partials-and-pydantic-b0b13d0eeb3a&user=Charles+Mendelson&userId=a6f4d278f87e&source=-----b0b13d0eeb3a---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb0b13d0eeb3a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwrite-dry-data-models-with-partials-and-pydantic-b0b13d0eeb3a&source=-----b0b13d0eeb3a---------------------bookmark_footer-----------)![](../Images/a5f33117bda3e5651248696317ad5a7a.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Didssph](https://unsplash.com/ko/@didsss?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/PB80D_B4g7c?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pydantic is an incredibly powerful library for data modeling and validation
    that should become a standard part of your data pipelines.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Part of what makes them so powerful is they can easily accommodate nested data
    files like JSON.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: For a quick refresher, Pydantic is a Python library that lets you define a data
    model in a Pythonic way, and use that model to validate data inputs, mainly through
    type hints.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 简单回顾一下，Pydantic 是一个 Python 库，让你以 Pythonic 的方式定义数据模型，并使用该模型验证数据输入，主要通过类型提示。
- en: Pydantic type-hints are much stronger and can be much more customized than standard
    library ones.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 的类型提示比标准库的更强大，更具自定义性。
- en: Partials on the other hand let you preload a function call with specific args
    and kwargs, which is particularly helpful if you’re going to call the same function
    with the same parameters numerous times.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Partial 允许你预加载带有特定参数和关键字参数的函数调用，这在你多次调用相同参数的同一函数时特别有用。
- en: '[In a previous article](https://medium.com/towards-data-science/easily-validate-user-generated-data-using-pydantic-5ace695cc3c8),
    I talked about using Enums to define valid string inputs for validating.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[在之前的文章中](https://medium.com/towards-data-science/easily-validate-user-generated-data-using-pydantic-5ace695cc3c8)，我讨论了使用枚举来定义用于验证的有效字符串输入。'
- en: We can take this further by incepting our Pydantic data model with other Pydantic
    data models.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步通过将 Pydantic 数据模型与其他 Pydantic 数据模型结合来推进。
- en: The Data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: I created our sample data using various random name generators. The dataset
    represents characters in a Dungeons and Dragons-type game.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用各种随机名称生成器创建了我们的示例数据。该数据集表示一个 Dungeons and Dragons 类型游戏中的角色。
- en: 'Let’s start with an inspection of our data:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始检查我们的数据：
- en: '![](../Images/c3bb3d39f2feb2387af43a34175a2db6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3bb3d39f2feb2387af43a34175a2db6.png)'
- en: Image by author, generated with Carbon
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像，由 Carbon 生成
- en: As we can see, rather than a flat data structure, we now have data within data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，与其扁平数据结构，我们现在有了数据中的数据。
- en: 'Inspecting our previous data model we can see that we now have to make some
    changes to accommodate the nested data structures:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 检查我们之前的数据模型，我们可以看到现在必须进行一些更改以适应嵌套的数据结构：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Visualizing the problem
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视觉化问题
- en: 'One tool I find helpful for exploring nested data structures is [JSONCrack](https://jsoncrack.com/),
    which provides a fantastic visualization of JSON data:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现一个有用的工具是 [JSONCrack](https://jsoncrack.com/)，它提供了 JSON 数据的精彩可视化：
- en: '![](../Images/ec7fd0634f18cdb24d4708c2154d393c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec7fd0634f18cdb24d4708c2154d393c.png)'
- en: image downloaded from JSON crack under the [GNU General Public License v3.0](https://github.com/AykutSarac/jsoncrack.com/blob/main/LICENSE)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图像从 JSON Crack 下载，使用 [GNU 通用公共许可证 v3.0](https://github.com/AykutSarac/jsoncrack.com/blob/main/LICENSE)
- en: We can see that 4 other models underneath it support our top-level model.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它下面的 4 个其他模型支持我们的顶级模型。
- en: 'DRY defining our model:'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DRY 定义我们的模型：
- en: Using the fields we can easily see from JSON crack, we can make our first pass
    at the model like this.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们可以从 JSON Crack 轻松查看的字段，我们可以像这样对模型进行第一次处理。
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`pydantic.Field()` lets us specify additional parameters for our model beyond
    type hints.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`pydantic.Field()` 允许我们为模型指定超出类型提示的额外参数。'
- en: '`...` indicates that it is a required field.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`...` 表示这是一个必填字段。'
- en: '`ge` indicates that the field must be greater than or equal to this value.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ge` 表示字段必须大于或等于此值。'
- en: '`le` indicates that the field must be less than or equal to this value.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`le` 表示字段必须小于或等于此值。'
- en: However, there is also a lot of repeated code in the fields defining our attribute
    modifiers. 7 of our modifiers must be between -6 and 6\. Consequently, in future
    changes we’d have to make changes to 7 lines of code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，字段定义我们的属性修饰符中也有很多重复的代码。我们的 7 个修饰符必须在 -6 和 6 之间。 因此，在未来的更改中，我们必须更改 7 行代码。
- en: 'We can simplify our definitions using a `partial` function from the `functools`
    library. What a partial does is allow us to pin parameters in place for a function
    and they''re perfect for a situation like this where we are calling the same function
    with the same arguments over and over again:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用来自 `functools` 库的 `partial` 函数来简化我们的定义。partial 函数允许我们为函数固定参数，非常适合这种多次调用相同参数的情况：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We now have a single place we can make changes to our code if we ever need to
    change the range of the attribute modifiers. This is a much cleaner and DRYer
    way of writing code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个可以在需要更改属性修饰符范围时修改代码的单一位置。这是一种更干净且更 DRY 的编程方式。
- en: Also, notice that we can still pass other parameters to the partial function,
    in this case `description`
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意我们仍然可以将其他参数传递给 partial 函数，在这种情况下是 `description`
- en: Partials are also flexible and let you override keyword arguments you’ve already
    passed to them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 部分函数还很灵活，可以覆盖你已经传递给它们的关键字参数。
- en: 'Finishing out the model:'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完善模型：
- en: 'We now have to define our other three models as well as a couple of enums to
    go with them:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们还需要定义其他三个模型以及几个与之配套的枚举：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Pay particular attention to the `KINGDOM_ID` and `GUILD_ID`. We overrode the
    `ge` and `le` arguments in the partial function which is ok. It still preserves
    the `...` which indicates it’s a required field.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意 `KINGDOM_ID` 和 `GUILD_ID`。我们在部分函数中覆盖了 `ge` 和 `le` 参数，这没有问题。它仍然保留了 `...`，这表明它是一个必填字段。
- en: By calling the partial function on our ID columns we never have to worry about
    forgetting to make them required fields.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对我们的 ID 列调用部分函数，我们不必担心忘记将它们设置为必填字段。
- en: Defining our top-level model
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义我们的顶层模型
- en: 'Now all the supporting models have been built, we can define our top-level
    model which looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有支持模型都已构建完成，我们可以定义顶层模型，其样子如下：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Focus on `HOME_NESTED` and `GUILD_NESTED`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关注 `HOME_NESTED` 和 `GUILD_NESTED`：
- en: Notice how they aren't required in our top-level model but those models have
    fields within them that are required. That means that if you pass data to the
    field, it must conform to the model, but if you don't pass the data to the field,
    it is still considered valid.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这些模型在顶层模型中不是必需的，但这些模型内部包含的字段是必需的。这意味着，如果你向字段传递数据，它必须符合模型要求，但如果你没有向字段传递数据，它仍然被视为有效。
- en: That effectively means you can pass to it a valid model or nothing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上意味着你可以传递一个有效的模型或什么都不传。
- en: Conclusion
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Combining `functools.partial()` with Pydantic data models can do a lot to make
    your code cleaner, easier to understand and ensure that you're properly handling
    invalid data in a scalable way.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `functools.partial()` 与 Pydantic 数据模型结合使用，可以使你的代码更加简洁、易于理解，并确保以可扩展的方式正确处理无效数据。
- en: In our example, we only built a single level of nesting, but you can nest repeatedly
    to manage any gnarly JSON object you encounter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们只构建了一个嵌套层级，但你可以重复嵌套以管理遇到的任何复杂 JSON 对象。
- en: Likewise, a well-built data model gives downstream consumers confidence that
    the data you’re sending to them is exactly what they’re expecting.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，一个构建良好的数据模型可以让下游消费者相信你发送给他们的数据正是他们所期望的。
- en: How do you think you can apply these techniques to your data pipelines?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为可以如何将这些技术应用到你的数据管道中？
- en: About
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于
- en: Charles Mendelson is a Data Engineer working at PitchBook data. [If you would
    like to get in touch with him, the best way is on LinkedIn.](https://www.linkedin.com/in/charles-mendelson-carobert/)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Charles Mendelson 是 PitchBook 数据公司的数据工程师。 [如果你想联系他，最好的方式是在 LinkedIn 上。](https://www.linkedin.com/in/charles-mendelson-carobert/)
- en: 'All the code:'
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有代码：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Originally published at* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/pydantic-and-partials/)
    *on February 23, 2023.*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发布于* [*https://charlesmendelson.com*](https://charlesmendelson.com/tds/pydantic-and-partials/)
    *2023年2月23日。*'
