- en: Managing the Technical Debt of Machine Learning Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/managing-the-technical-debts-of-machine-learning-systems-5b85d420ab9d?source=collection_archive---------4-----------------------#2023-09-26](https://towardsdatascience.com/managing-the-technical-debts-of-machine-learning-systems-5b85d420ab9d?source=collection_archive---------4-----------------------#2023-09-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explore the practices (design patterns, version control, and monitoring systems)
    for sustainably mitigating the cost of speedy delivery—with implementation codes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@johnleungTJ?source=post_page-----5b85d420ab9d--------------------------------)[![John
    Leung](../Images/ef45063e759e3450fa7f3c32b2f292c3.png)](https://medium.com/@johnleungTJ?source=post_page-----5b85d420ab9d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5b85d420ab9d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5b85d420ab9d--------------------------------)
    [John Leung](https://medium.com/@johnleungTJ?source=post_page-----5b85d420ab9d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6125e8835d3b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-the-technical-debts-of-machine-learning-systems-5b85d420ab9d&user=John+Leung&userId=6125e8835d3b&source=post_page-6125e8835d3b----5b85d420ab9d---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5b85d420ab9d--------------------------------)
    ·10 min read·Sep 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5b85d420ab9d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-the-technical-debts-of-machine-learning-systems-5b85d420ab9d&user=John+Leung&userId=6125e8835d3b&source=-----5b85d420ab9d---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5b85d420ab9d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-the-technical-debts-of-machine-learning-systems-5b85d420ab9d&source=-----5b85d420ab9d---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: As the machine learning (ML) community advances over the years, the resources
    available for developing ML projects are plentiful. For example, we can rely on
    the generic Python package [scikit-learn](https://scikit-learn.org/stable/), which
    is built on NumPy, SciPy, and matplotlib, for data preprocessing and basic predictive
    tasks. Or we can leverage the open-source collection of [pre-trained models](https://huggingface.co/models?sort=downloads)
    from Hugging Face for analyzing diverse types of datasets. These empower current
    data scientists to quickly and effortlessly tackle standard ML tasks while achieving
    moderately good model performance.
  prefs: []
  type: TYPE_NORMAL
- en: However, the abundance of ML tools often leads business stakeholders and even
    practitioners to underestimate the effort required to build enterprise-level ML
    systems. Particularly when faced with tight project deadlines, the teams may expedite
    deploying systems to production without giving sufficient technical considerations.
    Consequently, the ML system often does not address the business needs in a technically
    sustainable and maintainable manner.
  prefs: []
  type: TYPE_NORMAL
- en: As the system evolves and deploys over time, technical debts accumulate — The
    longer the implied cost remains unaddressed, the more costly it becomes to rectify
    them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/6afa6cb84b498a0bd7f7dfbbe0e3e9d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Andrea De Santis](https://unsplash.com/@santesson89?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple sources of technical debts in the ML system. Some are included
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '#1 Inflexible code design to cater to unforeseen requirements'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To validate if ML can address the enterprise challenges at hand, many ML projects
    commence with a [proof of concept (PoC)](https://en.wikipedia.org/wiki/Proof_of_concept).
    We initially created a Jupyter Notebook or Google Colab environment to explore
    data, then developed several ad-hoc functions, and created the illusion of nearing
    project completion for stakeholders. **Such systems building directly from PoC
    may end up consisting mostly of** [**glue code**](https://en.wikipedia.org/wiki/Glue_code)
    — the supporting code that connects specific incompatible components but itself
    does not have the functionality of data analysis. They can be spaghetti-like,
    hard to maintain, and prone to errors.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/716da1df4e65571dd6cac1d5c19b74dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jakob Owens](https://unsplash.com/@jakobowens1?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Business stakeholders often present alternate requirements from time to time
    or wish to scale up the project, such as trying out new data sources or new algorithms.
    We thus often find ourselves frequently revisiting the codebase covering the current
    preprocessing pipelines and model development processes. Inflexible code design
    can consequently lead to difficulties in reacting to new changes, or rewrite most
    of the codes for even minor adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Messiness in the configurations of the ML system'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Software engineering programming automates tasks by defining rules for computers
    to follow, ensuring precise output for the same input. Software engineers are
    also concerned with the correctness of every corner case. On the other hand, ML
    systems automate tasks by collecting and feeding feature data into models to achieve
    desired target results. This experimental process embraces uncertainty and variability.
    **As ML systems mature, they often contain multiple versions of configuration
    options**, such as datasets with different feature combinations, and algorithm-specific
    learning settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23231cb5995aa6008d7558cf89247e5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ricardo Viana](https://unsplash.com/@ricardoviana?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Input features in ML systems are inherently interconnected. Consider a scenario
    where feature A is no longer available as an input for your ML systems in production,
    you are required to re-evaluate the weighting of the remaining features for production
    serving. However, after 2 months, feature A becomes available again. If you did
    not systematically save or even mistakenly modify the original configurations,
    rectifying the decrease in performance would require additional computational
    resources and time effort.
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Limited ability to adapt to the evolving external world'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ML systems often have dependencies on the external world, and various hidden
    factors continually evolve but are not being appropriately considered and monitored.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7b1d10792b83f7438ee96a5287fcf3c2.png)'
  prefs: []
  type: TYPE_IMG
- en: External factors leading to potential degradation of model performance (image
    by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Unstable data output from upstream producers**: The input signal of our ML
    system may come from another machine learning model that updates over time. Additionally,
    the system may rely on unstructured data such as signals from Internet of Things
    (IoT) devices, web scraping data, or output data from audio-to-text converter.
    If the maintenance of these tools from upstream producers is not properly declared
    or flawed patching is implemented, it can unexpectedly degrade the performance
    of the ML system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Drift in input data**](/monitoring-machine-learning-models-in-production-why-and-how-13d07a5ff0c6):
    Take demand forecasting in the retail industry as an example. The input data can
    exhibit new distributions periodically (such as the seasonal cycle of purchasing
    behaviors), gradually (like the inflationary cost of goods from suppliers), and
    suddenly (the entry of new competitors).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will delve into some great practices for building
    ML systems and provide illustrative Python code examples to demonstrate their
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you would like to build a robust traffic system for the city prepared
    for traffic peaks, so you collected traffic data from sensors over the past two
    years. Your goal is to predict the traffic patterns (i.e. the no. of vehicles)
    for the upcoming six months.
  prefs: []
  type: TYPE_NORMAL
- en: 'Training dataset: ID, DateTime, and no. of vehicles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test dataset: ID and DateTime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/20275de30cd63401f3cef5a63a684bf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Joey Kyber](https://unsplash.com/@jtkyber1?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '#1 Use design patterns for the ML codebase'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make the code design more flexible and reusable for future requirements,
    we can leverage [design patterns](https://en.wikipedia.org/wiki/Software_design_pattern).
    These patterns serve as the templates for solving common problems in various situations,
    enabling us to decouple different parts of the codebase. As a result, this helps
    to improve the comprehension of the codebase and build a common language to communicate
    quickly about solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The two primary components in ML projects are data and algorithms, which can
    benefit from design patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Factory pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This creational pattern provides a layer of abstraction for generating objects
    at runtime. In ML systems, we can implement this pattern by creating a data loader
    class (`CSVDataLoader` in this example) that handles the loading, saving, and
    returning of training/ test data with a consistent data type. We can then declare
    the `DataProcessor` interface without specifying the concrete implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This approach allows you to extend the code without having to re-implement the
    `DataProcessor`. For example, if you want to load the dataset from a JSON file,
    you can simply create a new class `JSONDataLoader` as an instance of the data
    loader for declaration.
  prefs: []
  type: TYPE_NORMAL
- en: Strategy Pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since there is no one-size-fits-all algorithm for ML problems with varying data
    distribution, we often find ourselves switching and experimenting between algorithms
    during prototyping or project enhancement. We can apply the Strategy Pattern by
    creating a new class `DataTransformer` for feature engineering and another class
    `LGBMModel` for encapsulating the strategy of fitting and predicting using the
    LightGBM model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The implementation and declaration of the interface `DataProcessor` are provided
    below. This is the end-to-end process that includes loading training and test
    data using `train_data_loader` and `test_data_loader`respectively, transforming
    the data using `data_transformer`, and fitting the model to the transformed data
    using `model`. As a result, we can predict the number of vehicles in each record
    of the test dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can easily add new blocks of code to implement other data transformation
    ideas or algorithms. Similar to the Factory Pattern, these changes would not require
    you to modify the interface `DataProcessor`. This design makes it easier to maintain
    the code, even if you have a long list of algorithms. The behavior of the ML system
    can dynamically vary based on the chosen strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the above code implementation is only the preliminary template for
    development. For example, we can further enhance the code by covering data validation,
    implementing a hyperparameter tuning mechanism, and evaluating the model.
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Version control of the ML systems'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Throughout the complex process of model development and management, we require
    proper [version control](https://en.wikipedia.org/wiki/Version_control). This
    enables us to maintain a history of modifications done by ourselves or team members
    and track the version in the local environment relative to the components of the
    ML system, including data, trained models, and hyperparameters. We can thus address
    some common questions, including:'
  prefs: []
  type: TYPE_NORMAL
- en: What was the change that led to the model’s failure?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which modifications resulted in improved model performance?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which version of the model was most recently released?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here we demonstrate how to utilize the versioning features in [DVC](https://dvc.org/doc/use-cases),
    which works best in the [Git](https://git-scm.com/) repository for tracking our
    original traffic data, transformed traffic data, and LGBM models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s consider a scenario where we have made the following changes in the second
    version of data processing:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the Weekday feature in the `DataTransformer` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Set new configuration parameters for the LGBM model in the `DataProcessor` interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With the following commands, we can track the second version of the data and
    model in DVC and commit the .dvc files that point to them with Git.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Though the workspace is currently locating the second version of our data and
    model, we can easily switch back and restore to the first snapshot whenever necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The above commands cover the basic operations. We can further leverage the tool
    for project organization and collaboration. Examples of use cases are to understand
    how the data was built initially and compare model metrics among experiments.
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Test and monitor the ML systems continuously'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the enhanced model can generate predictions, it is essential to perform
    [sanity checks](https://en.wikipedia.org/wiki/Sanity_check) before releasing it
    to production. This is achieved by fitting a random sample set of online data
    into the latest model offline and examining the results from various perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ensuring the right access permission**: The model results can be stored in
    the destination path (such as writing them to a Hive table).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eliminating** [**semantic errors**](https://www.encyclopedia.com/computing/dictionaries-thesauruses-pictures-and-press-releases/semantic-error):
    Visualize the distribution of the transformed features that are fitted to the
    model, to identify any deviant behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assessing model performance**: Rescore with the latest model and compare
    the results to the current online model using appropriate performance metrics
    (e.g., F1-score is a preferable measurement to accuracy for imbalanced class problems).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even after the latest version of the ML system is released, ongoing monitoring
    is necessary to account for evolving external environments.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Monitoring data drift and model drift**](https://medium.com/towards-data-science/monitoring-machine-learning-models-in-production-why-and-how-13d07a5ff0c6):
    Detect drift conditions through model performance metrics, statistical tests,
    and adaptive windowing techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tracking upstream producers**: Stay informed about changes in upstream processes,
    and routinely monitor them to ensure they meet a service level objective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wrapping it up**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have explored several effective practices that can be implemented to tackle
    technical debts in developing and deploying ML systems.
  prefs: []
  type: TYPE_NORMAL
- en: Use design patterns, to create a modular and flexible data processing pipeline
    that can adapt to unforeseen requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize version control, to track and manage the ML artifacts, such as data
    and models, ensuring a workflow with less messiness.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test and monitor the ML system, to promptly and smoothly handle changes in the
    dynamic external world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before you go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you enjoy this reading, I invite you tofollow my [Medium page](https://medium.com/@johnleungTJ)
    and [Linkedin page](https://www.linkedin.com/in/john-leung-639800115/). By doing
    so, you can stay updated with exciting content related to data science side projects,
    Machine Learning Operations (MLOps) demonstrations, and project management methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/monitoring-machine-learning-models-in-production-why-and-how-13d07a5ff0c6?source=post_page-----5b85d420ab9d--------------------------------)
    [## Monitoring Machine Learning Models in Production: Why and How?'
  prefs: []
  type: TYPE_NORMAL
- en: How our model is impacted in the evolving world? An analysis focusing on drift
    examples, and implementing Python-based…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/monitoring-machine-learning-models-in-production-why-and-how-13d07a5ff0c6?source=post_page-----5b85d420ab9d--------------------------------)
    [](/optimizing-your-strategies-with-approaches-beyond-a-b-testing-bf11508f8930?source=post_page-----5b85d420ab9d--------------------------------)
    [## Optimizing Your Strategies with Approaches Beyond A/B Testing
  prefs: []
  type: TYPE_NORMAL
- en: 'An in-depth explanation in layman on optimizing classic A/B testing: Epsilon-greedy,
    Thompson Sampling, Contextual…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/optimizing-your-strategies-with-approaches-beyond-a-b-testing-bf11508f8930?source=post_page-----5b85d420ab9d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
