- en: How to Convert Any Text Into a Graph of Concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将任何文本转换为概念图谱
- en: 原文：[https://towardsdatascience.com/how-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a?source=collection_archive---------0-----------------------#2023-11-10](https://towardsdatascience.com/how-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a?source=collection_archive---------0-----------------------#2023-11-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a?source=collection_archive---------0-----------------------#2023-11-10](https://towardsdatascience.com/how-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a?source=collection_archive---------0-----------------------#2023-11-10)
- en: A method to convert any text corpus into a Knowledge Graph using Mistral 7B
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Mistral 7B 将任何文本语料库转换为知识图谱的方法
- en: '[](https://medium.com/@rahul.nyk?source=post_page-----110844f22a1a--------------------------------)[![Rahul
    Nayak](../Images/9f8aa2f9af4e02b31c114222756489e5.png)](https://medium.com/@rahul.nyk?source=post_page-----110844f22a1a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----110844f22a1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----110844f22a1a--------------------------------)
    [Rahul Nayak](https://medium.com/@rahul.nyk?source=post_page-----110844f22a1a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@rahul.nyk?source=post_page-----110844f22a1a--------------------------------)[![Rahul
    Nayak](../Images/9f8aa2f9af4e02b31c114222756489e5.png)](https://medium.com/@rahul.nyk?source=post_page-----110844f22a1a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----110844f22a1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----110844f22a1a--------------------------------)
    [Rahul Nayak](https://medium.com/@rahul.nyk?source=post_page-----110844f22a1a--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F473e87f4b733&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a&user=Rahul+Nayak&userId=473e87f4b733&source=post_page-473e87f4b733----110844f22a1a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----110844f22a1a--------------------------------)
    ·12 min read·Nov 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F110844f22a1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a&user=Rahul+Nayak&userId=473e87f4b733&source=-----110844f22a1a---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F473e87f4b733&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a&user=Rahul+Nayak&userId=473e87f4b733&source=post_page-473e87f4b733----110844f22a1a---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----110844f22a1a--------------------------------)
    ·12 分钟阅读·2023年11月10日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F110844f22a1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a&user=Rahul+Nayak&userId=473e87f4b733&source=-----110844f22a1a---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F110844f22a1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a&source=-----110844f22a1a---------------------bookmark_footer-----------)![](../Images/fb08cad7edf14d0bbf132f706493fdbf.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F110844f22a1a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-convert-any-text-into-a-graph-of-concepts-110844f22a1a&source=-----110844f22a1a---------------------bookmark_footer-----------)![](../Images/fb08cad7edf14d0bbf132f706493fdbf.png)'
- en: Image generated by the author using the project shared in this article.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者使用本文中分享的项目生成的图像。
- en: A few months ago, knowledge-based QnA (KBQA) was a novelty. Now KBQA with Retrieval
    Augmented Generation (RAG) is a piece of cake for any AI enthusiast. It’s fascinating
    to see how the realm of possibilities in NLP has expanded so rapidly due to LLMs.
    And it's getting better by the day.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月前，基于知识的问答（KBQA）还是一种新颖的技术。现在，带有检索增强生成（RAG）的 KBQA 对任何 AI 爱好者来说都已经易如反掌。看到 NLP
    领域的可能性因 LLMs 而迅速扩展，令人着迷。而且，情况每天都在变得更好。
- en: In my last article, I shared a recursive RAG approach to implement QnA with
    multi-hop reasoning to answer complex queries based on a large corpus of text.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的上一篇文章中，我分享了一种递归 RAG 方法，用于实现带有多跳推理的问答，以基于大量文本语料库回答复杂查询。
- en: '[](/the-research-agent-4ef8e6f1b741?source=post_page-----110844f22a1a--------------------------------)
    [## The Research Agent: Addressing the Challenge of Answering Questions Based
    on a Large Text Corpus'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/the-research-agent-4ef8e6f1b741?source=post_page-----110844f22a1a--------------------------------)
    [## 研究代理：应对基于大文本语料库回答问题的挑战'
- en: I made an Autonomous AI Research Agent that can answer difficult questions with
    deep multi-hop reasoning capabilities
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我制作了一个自主AI研究代理，它可以通过深度多跳推理能力回答困难的问题。
- en: towardsdatascience.com](/the-research-agent-4ef8e6f1b741?source=post_page-----110844f22a1a--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/the-research-agent-4ef8e6f1b741?source=post_page-----110844f22a1a--------------------------------)'
- en: A good number of folks tried it out and sent their feedback. Thanks all for
    your feedback. I have since collated these contributions and made a few improvements
    to the code to address some of the problems with the original implementation.
    I plan to write a separate article about it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人尝试了它并提供了反馈。感谢大家的反馈。我已将这些贡献汇总，并对代码做了一些改进，以解决原始实现中的一些问题。我计划撰写一篇单独的文章。
- en: In this article, I want to share another idea that may help create a super research
    agent when combined with recursive RAG. The idea emerged out of my experiments
    with recursive RAG with smaller LLMs, and a few other ideas that I read on Medium
    — specifically one, the **Knowledge-Graph Augmented Generation.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想分享另一个可能有助于创建超级研究代理的想法，当它与递归RAG结合时。这个想法源于我对递归RAG和较小LLM的实验，以及我在Medium上阅读的一些其他想法——特别是**知识图谱增强生成**。
- en: '**Abstract**'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: A Knowledge Graphs (KG), or any Graph, is made up of Nodes and Edges. Each node
    of the KG represents a concept and each edge is a relationship between a pair
    of such concepts. In this article, I will share a method to convert any text corpus
    into a Graph of Concepts. I am using the term ‘Graph of Concept’ (GC) interchangeably
    with the terms KG to better describe what I am demoing here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱（KG）或任何图形，由节点和边组成。KG的每个节点代表一个概念，每个边表示一对概念之间的关系。在这篇文章中，我将分享一种将任何文本语料库转换为概念图的方法。我将“概念图”（GC）与KG术语交替使用，以更好地描述我在这里展示的内容。
- en: All the components I used in this implementation can be set up locally, so this
    project can be run easily on a personal machine. I have adopted a no-GPT approach
    here because I believe in smaller open source models. I am using the fantastic
    Mistral 7B Openorca instruct and Zephyr models. These models can be set up locally
    with Ollama.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个实现中使用的所有组件都可以在本地设置，因此这个项目可以很容易地在个人计算机上运行。我在这里采用了非GPT的方法，因为我相信较小的开源模型。我正在使用出色的Mistral
    7B Openorca instruct和Zephyr模型。这些模型可以通过Ollama在本地设置。
- en: Databases like Neo4j make it easy to store and retrieve graph data. Here I am
    using in-memory Pandas Dataframes and the NetworkX Python library, to keep things
    simple.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 像Neo4j这样的数据库使得存储和检索图数据变得容易。在这里，我使用内存中的Pandas数据框和NetworkX Python库，以保持简单。
- en: Our goal here is to convert any text corpus into a Graph of Concepts (GC) and
    visualise it like the beautiful banner image of this article. We will even interact
    with the network graph by moving nodes and edges, zooming in and out, and change
    the physics of the graph to our heart’s desire. Here is the Github page link that
    shows the result of what we are building.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是将任何文本语料库转换为概念图（GC），并像这篇文章的美丽横幅图像一样进行可视化。我们甚至可以通过移动节点和边缘、缩放以及根据我们的心愿改变图形的物理属性来与网络图进行交互。这里是展示我们正在构建的结果的Github页面链接。
- en: '[https://rahulnyk.github.io/knowledge_graph/](https://rahulnyk.github.io/knowledge_graph/)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://rahulnyk.github.io/knowledge_graph/](https://rahulnyk.github.io/knowledge_graph/)'
- en: But first, let’s delve into the fundamental idea of KGs and why we need them.
    If you are familiar with this concept already, feel free to skip the next section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们*深入探讨*知识图谱的基本概念以及我们为什么需要它们。如果你已经熟悉这个概念，可以跳过下一部分。
- en: '**Knowledge Graph**'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**知识图谱**'
- en: Consider the following text.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下文本。
- en: '*Mary had a little lamb,'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*玛丽有只小羊，'
- en: You’ve heard this tale before;
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能以前听过这个故事；
- en: But did you know she passed her plate,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但你知道她把盘子递过来了吗，
- en: And had a little more!*
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还多了一点！*
- en: (I hope the kids are not reading this 😝)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: （我希望孩子们没有在读这个 😝）
- en: Here is one possible representation of the text as a KG.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文本作为KG的一种可能表示方式。
- en: '![](../Images/4fd39148664c94a81f884489e8151fa3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4fd39148664c94a81f884489e8151fa3.png)'
- en: Diagram created by the Author using draw.io
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者使用draw.io创建
- en: The following article from IBM aptly explains the fundamental concept of Knowledge
    Graphs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: IBM 的以下文章恰当地解释了知识图谱的基本概念。
- en: '[](https://www.ibm.com/topics/knowledge-graph?source=post_page-----110844f22a1a--------------------------------)
    [## What is a Knowledge Graph? | IBM'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 什么是知识图谱？ | IBM](https://www.ibm.com/topics/knowledge-graph?source=post_page-----110844f22a1a--------------------------------)'
- en: Learn about knowledge graphs, networks of semantic metadata which represent
    a collection of related entities.
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解知识图谱，语义元数据的网络，表示一组相关实体。
- en: www.ibm.com](https://www.ibm.com/topics/knowledge-graph?source=post_page-----110844f22a1a--------------------------------)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.ibm.com](https://www.ibm.com/topics/knowledge-graph?source=post_page-----110844f22a1a--------------------------------)'
- en: 'Quoting an excerpt from the article to summarise the idea:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 引用文章中的摘录来总结这一观点：
- en: A knowledge graph, also known as a semantic network, represents a network of
    real-world entities — i.e. objects, events, situations, or concepts — and illustrates
    the relationship between them. This information is usually stored in a graph database
    and visualised as a graph structure, prompting the term knowledge “graph.”
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 知识图谱，也称为语义网络，表示一个现实世界实体的网络——即对象、事件、情况或概念——并说明它们之间的关系。这些信息通常存储在图数据库中，并以图形结构的形式可视化，因此得名知识“图谱”。
- en: '**Why Knowledge Graph?**'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**为什么选择知识图谱？**'
- en: Knowledge Graphs are useful in a variety of ways. We can run graph algorithms
    and calculate the centralities for any node, to understand how important a concept
    (node) is to the body of work. We can analyse connected and disconnected sets
    of concepts, or calculate communities of concepts for a deep understanding of
    the subject matter. We can understand links between seemingly disconnected concepts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱在多种方面都非常有用。我们可以运行图算法并计算任何节点的中心性，以了解一个概念（节点）在整体工作中的重要性。我们可以分析连接和不连接的概念集，或者计算概念社区，以深入理解主题内容。我们还可以理解看似不相关的概念之间的联系。
- en: We can also use knowledge graphs to implement Graph Retrieval Augmented Generation
    (GRAG or GAG) and chat with our documents. This can give us much better results
    than the plain old version of RAG, which suffers several shortcomings. For example,
    retrieving the context that is the most relevant for the query with a simple semantic
    similarity search is not always effective. Especially, when the query does not
    provide enough context about its true intent, or when the context is fragments
    across a large corpus of text.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用知识图谱来实现图检索增强生成（GRAG 或 GAG），并与我们的文档进行对话。这可以比简单的 RAG 版本获得更好的结果，后者存在若干缺陷。例如，仅通过简单的语义相似性搜索来检索与查询最相关的上下文并不总是有效。尤其是当查询没有提供足够的上下文来表明其真实意图，或者上下文在大量文本中是零散的情况下。
- en: For example, consider this query —
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑这个查询 —
- en: '***Tell me about the family tree of José Arcadio Buendía in the book ‘One Hundred
    years of Solitude’.***'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '***告诉我《百年孤独》中何塞·阿尔卡迪奥·布恩迪亚的家谱。***'
- en: The book documents 7 generations of *José Arcadio Buendía* with half of the
    characters named *José Arcadio Buendía*. It will be quite a challenge, if even
    possible, to answer the query using a simple RAG pipeline.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书记录了*何塞·阿尔卡迪奥·布恩迪亚*的七代人，其中一半的角色都叫做*何塞·阿尔卡迪奥·布恩迪亚*。如果通过一个简单的 RAG 管道来回答这个查询，将会是相当具有挑战性的，甚至可能是不可能的。
- en: Another shortcoming of RAG is that it can’t tell you what to ask. Very often,
    asking the right question is more important that getting the answers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: RAG 的另一个缺陷是它不能告诉你该问什么。通常，提出正确的问题比得到答案更为重要。
- en: Graph Augmented generation (GAG) can address these shortcomings of RAG up to
    some extent. Better still, we can mix and match and build a Graph Augmented Retrieval
    Augmented Generation pipeline to get the best of both worlds.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图增强生成（GAG）在一定程度上可以解决 RAG 的这些缺陷。更好的是，我们可以混合使用，建立一个图增强检索增强生成的管道，从而获得两者的最佳效果。
- en: So now we know that Graphs are interesting, they can be extremely useful, and
    they also look beautiful.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们知道，图谱非常有趣，它们可以极其有用，而且看起来也很美观。
- en: '**Creating the Graph of Concepts**'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**创建概念图谱**'
- en: If you were to ask GPT, how to create a graph of knowledge from a given text?
    it may suggest a process like the following.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你询问 GPT，如何从给定的文本中创建知识图谱？它可能会建议以下过程。
- en: Extract concepts and entities from the body of work. These are the nodes.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文献中提取概念和实体。这些就是节点。
- en: Extract relations between the concepts. These are the edges.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取概念之间的关系。这些就是边。
- en: Populate nodes (concepts) and edges (relations) in a graph data structure or
    a graph database.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图形数据结构或图形数据库中填充节点（概念）和边（关系）。
- en: Visualise, for some artistic gratification if nothing else.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可视化，以获得一些艺术上的满足感，哪怕仅此而已。
- en: Steps 3 and 4 sound understandable. But how do you achieve steps 1 and 2?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第 3 步和第 4 步听起来很容易理解。但你如何实现第 1 步和第 2 步？
- en: Here is a flow diagram of the method I devised to extract a graph of concepts
    from any given text corpus. It is similar to the above method but for a few minor
    differences.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我设计的从任何给定文本语料库中提取概念图的方法的流程图。它类似于上述方法，但有一些细微的差别。
- en: '![](../Images/df5cd67aa84360e05c33020c840d23dc.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df5cd67aa84360e05c33020c840d23dc.png)'
- en: Diagram created by the Author using draw.io
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者使用 draw.io 创建
- en: Split the corpus of text into chunks. Assign a chunk_id to each of these chunks.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本语料库分割成多个块。给每个块分配一个 chunk_id。
- en: For every text chunk extract concepts and their semantic relationships using
    an LLM. Let’s assign this relation a weightage of W1\. There can be multiple relationships
    between the same pair of concepts. Every such relation is an edge between a pair
    of concepts.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个文本块，使用 LLM 提取概念及其语义关系。我们将这种关系的权重定为 W1。相同概念对之间可以有多个关系。每种这样的关系都是概念对之间的一条边。
- en: Consider that the concepts that occur in the same text chunk are also related
    by their contextual proximity. Let’s assign this relation a weightage of W2\.
    Note that the same pair of concepts may occur in multiple chunks.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑到出现在同一文本块中的概念也通过其上下文的接近性相关联。我们将这种关系的权重定为 W2。请注意，同一对概念可能出现在多个块中。
- en: Group similar pairs, sum their weights, and concatenate their relationships.
    So now we have only one edge between any distinct pair of concepts. The edge has
    a certain weight and a list of relations as its name.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对相似的对进行分组，求和它们的权重，并连接它们的关系。现在，我们只有一个边连接任何不同的概念对。该边具有一定的权重和一个作为其名称的关系列表。
- en: You can see the implementation of this method as a Python code, in the GitHub
    repository I share in this article. Let us briefly walk through the key ideas
    of the implementation in the next few sections.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我在本文中分享的 GitHub 仓库中看到该方法的 Python 实现。接下来，我们将简要回顾实现的关键思想。
- en: To demonstrate the method here, I am using the following review article published
    in PubMed/Cureus under the terms of the Creative Commons Attribution License.
    Credit to the authors at the end of this article.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示该方法，我使用了在 PubMed/Cureus 上发布的以下评论文章，该文章遵循知识共享署名许可证。感谢文章末尾的作者。
- en: '[](https://www.cureus.com/articles/158868-indias-opportunity-to-address-human-resource-challenges-in-healthcare?source=post_page-----110844f22a1a--------------------------------#!/)
    [## India''s Opportunity to Address Human Resource Challenges in Healthcare'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.cureus.com/articles/158868-indias-opportunity-to-address-human-resource-challenges-in-healthcare?source=post_page-----110844f22a1a--------------------------------#!/)
    [## 印度解决医疗保健中人力资源挑战的机会'
- en: India's health indicators have improved in recent times but continue to lag
    behind those of its peer nations. The…
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 印度的健康指标最近有所改善，但仍落后于其同行国家。…
- en: www.cureus.com](https://www.cureus.com/articles/158868-indias-opportunity-to-address-human-resource-challenges-in-healthcare?source=post_page-----110844f22a1a--------------------------------#!/)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: www.cureus.com](https://www.cureus.com/articles/158868-indias-opportunity-to-address-human-resource-challenges-in-healthcare?source=post_page-----110844f22a1a--------------------------------#!/)
- en: '**The Mistral and the Prompt**'
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Mistral 和 Prompt**'
- en: Step 1 in the above flow chart is easy. Langchain provides a plethora of text
    splitters we can use to split our text into chunks.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述流程图中的第 1 步很简单。Langchain 提供了大量的文本分割器，我们可以用来将文本分成多个块。
- en: 'Step 2 is where the real fun starts. To extract the concepts and their relationships,
    I am using the Mistral 7B model. Before converging on the variant of the model
    best suited for our purpose, I experimented with the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第 2 步是真正有趣的开始。为了提取概念及其关系，我使用了 Mistral 7B 模型。在确定最适合我们目的的模型变体之前，我尝试了以下几种：
- en: '[Mistral Instruct](https://huggingface.co/mistralai/Mistral-7B-Instruct-v0.1)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mistral Instruct](https://huggingface.co/mistralai/Mistral-7B-Instruct-v0.1)'
- en: '[Mistral OpenOrca](https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca), and'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mistral OpenOrca](https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca)，以及'
- en: '[Zephyr (Hugging Face version derived from Mistral)](https://huggingface.co/HuggingFaceH4/zephyr-7b-beta)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[Zephyr（Hugging Face 版本，源自 Mistral）](https://huggingface.co/HuggingFaceH4/zephyr-7b-beta)'
- en: I used the 4-bit quantised version of these models — So that my Mac doesn’t
    start hating me — hosted locally with Ollama.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ollama.ai/?source=post_page-----110844f22a1a--------------------------------)
    [## Ollama'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Get up and running with large language models, locally.
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ollama.ai](https://ollama.ai/?source=post_page-----110844f22a1a--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: These models are all instruction-tuned models with a system prompt and a user
    prompt. They all do a pretty good job at following the instructions and formatting
    the answer neatly in JSONs if we tell them to.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: After a few rounds of hit and trial, I finally converged on to the **Zephyr
    model** with the following prompts.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]) Your task is to extract the ontology "'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '"of terms mentioned in the given context. These terms should represent the
    key concepts as per the context. \n"'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Thought 1: While traversing through each sentence, Think about the key terms
    mentioned in it.\n"'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"\tTerms may include object, entity, location, organization, person, \n"'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"\tcondition, acronym, documents, service, concept, etc.\n"'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"\tTerms should be as atomistic as possible\n\n"'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Thought 2: Think about how these terms can have one on one relation with other
    terms.\n"'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"\tTerms that are mentioned in the same sentence or the same paragraph are
    typically related to each other.\n"'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"\tTerms can be related to many other terms\n\n"'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Thought 3: Find out the relation between each such related pair of terms.
    \n\n"'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Format your output as a list of json. Each element of the list contains a
    pair of terms"'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"and the relation between them, like the follwing: \n"'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"[\n"'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"   {\n"'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''       "node_1": "A concept from extracted ontology",\n'''
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''       "node_2": "A related concept from extracted ontology",\n'''
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''       "edge": "relationship between the two concepts, node_1 and node_2
    in one or two sentences"\n'''
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"   }, {...}\n"'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"]"'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'USER_PROMPT = f"context: [PRE1] \n\n output: "'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '['
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '"node_1": "Mary",'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"node_2": "lamb",'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"edge": "owned by"'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '"node_1": "plate",'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"node_2": "food",'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"edge": "contained"'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, . . .'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: G = nx.Graph()
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Add nodes to the graph
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'for node in nodes:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: G.add_node(str(node))
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add edges to the graph
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'for index, row in dfg.iterrows():'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: G.add_edge(
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: str(row["node_1"]),
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: str(row["node_2"]),
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: title=row["edge"],
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: weight=row['count']
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '['
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '''digital technology'','
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '''EVIN'','
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '''medical devices'','
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '''online training management information systems'','
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '''wearable, trackable technology'''
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: This immediately gives us an idea about the broad theme of health technologies
    discussed in the review paper and enables us to ask questions that we can then
    answer with our RAG Pipeline. Isn’t that great?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Let us also calculate the degree of each concept in our graph. The degree of
    a node is the total number of edges it is connected with. So in our case, the
    higher the degree of a concept, the more central it is to the subject of our text.
    We will use the degree as the size of the node in our visualisation.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '**Graph Visualisation**'
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualisation is the most fun part of this exercise. It has a certain quality
    to it that gives you an artistic gratification.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化是此练习中最有趣的部分。它具有某种特质，给予你艺术上的满足感。
- en: I am using the PiVis library to create interactive graphs. [Pyvis is a Python
    library for visualizing networks](https://github.com/WestHealth/pyvis/tree/master#pyvis---a-python-library-for-visualizing-networks).
    Here is a medium article that demonstrates the ease and the power of the Library
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 PiVis 库创建交互图表。[Pyvis 是一个用于可视化网络的 Python 库](https://github.com/WestHealth/pyvis/tree/master#pyvis---a-python-library-for-visualizing-networks)。这里有一篇中等文章展示了该库的易用性和强大功能。
- en: '[](/pyvis-visualize-interactive-network-graphs-in-python-77e059791f01?source=post_page-----110844f22a1a--------------------------------)
    [## Pyvis: Visualize Interactive Network Graphs in Python'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/pyvis-visualize-interactive-network-graphs-in-python-77e059791f01?source=post_page-----110844f22a1a--------------------------------)
    [## Pyvis: 用 Python 可视化交互网络图'
- en: All it Takes is a Few Lines of Code
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只需几行代码
- en: towardsdatascience.com](/pyvis-visualize-interactive-network-graphs-in-python-77e059791f01?source=post_page-----110844f22a1a--------------------------------)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/pyvis-visualize-interactive-network-graphs-in-python-77e059791f01?source=post_page-----110844f22a1a--------------------------------)'
- en: Pyvis has a built-in NetworkX Helper to translate our NetworkX graph into PyVis
    Objects. So we need no more coding…. Yay!!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Pyvis 内置了 NetworkX Helper，可以将我们的 NetworkX 图转换为 PyVis 对象。因此，我们不再需要额外编码……耶！！
- en: Remember, we have already calculated the weights of each edge for the thickness
    of the edge, the communities of nodes for their colour, and the degree of each
    node as their size.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们已经计算了每条边的权重以确定边的厚度、节点的社区以确定颜色，以及每个节点的度数以确定大小。
- en: So, with all these bells and whistles, here is our graph.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，带着这些花里胡哨的东西，这是我们的图表。
- en: '![](../Images/fe3e0691e930bea4d3bfe6249c4f9582.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe3e0691e930bea4d3bfe6249c4f9582.png)'
- en: Gif generate by the author using the project discussed in this article.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 动图由作者使用本文讨论的项目生成。
- en: 'Link to the interactive graph: [*https://rahulnyk.github.io/knowledge_graph/*](https://rahulnyk.github.io/knowledge_graph/)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '交互图表链接: [*https://rahulnyk.github.io/knowledge_graph/*](https://rahulnyk.github.io/knowledge_graph/)'
- en: We can zoom in and out and move nodes and edges as we wish. We also have slider
    pannel at the bottom of the page to change the physics of the graph. See how the
    graph can help us ask the right questions and understand the subject matter better!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以随意缩放和移动节点及边缘。页面底部还有滑块面板，可以改变图的物理效果。看看这个图表如何帮助我们提出正确的问题，更好地理解主题！
- en: We can further discuss how our graph can help us build Graph Augmented Retrieval
    and how that can help us build a better RAG pipeline. But I think it’s better
    to leave it for another day. We have achieved our goal for this article already!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步讨论我们的图如何帮助构建图增强检索以及这如何帮助我们构建更好的 RAG 管道。但我认为最好留待另一天。我们已经达成了本文的最终目标！
- en: Github Repo
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub 仓库
- en: '[](https://github.com/rahulnyk/knowledge_graph?source=post_page-----110844f22a1a--------------------------------)
    [## GitHub - rahulnyk/knowledge_graph: Convert any text to a graph of knowledge.
    This can be used for…'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/rahulnyk/knowledge_graph?source=post_page-----110844f22a1a--------------------------------)
    [## GitHub - rahulnyk/knowledge_graph: 将任何文本转换为知识图谱。这可以用于...'
- en: Convert any text to a graph of knowledge. This can be used for Graph Augmented
    Generation or Knowledge Graph based QnA…
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将任何文本转换为知识图谱。这可以用于图增强生成或基于知识图谱的问答...
- en: github.com](https://github.com/rahulnyk/knowledge_graph?source=post_page-----110844f22a1a--------------------------------)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/rahulnyk/knowledge_graph?source=post_page-----110844f22a1a--------------------------------)'
- en: Contributions and suggestions most welcome
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎贡献和建议
- en: I have used the following article for the demonstration of my code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了以下文章来演示我的代码。
- en: '**Saxena S G, Godfrey T (June 11, 2023) India’s Opportunity to Address Human
    Resource Challenges in Healthcare. Cureus 15(6): e40274\. DOI 10.7759/cureus.40274**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**Saxena S G, Godfrey T (2023年6月11日) 印度应对医疗资源挑战的机会。Cureus 15(6): e40274\. DOI
    10.7759/cureus.40274**'
- en: I am grateful to the authors for the wonderful work, and for releasing it under
    the Creative Commons Attribution License.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我对作者们的精彩作品表示感激，并感谢他们在知识共享署名许可下发布这部作品。
- en: '**About me**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于我**'
- en: I am a learner of architecture (not the buildings… the tech kind). In the past,
    I have worked with Semiconductor modelling, Digital circuit design, Electronic
    Interface modelling, and the Internet of Things. Currently, I am working with
    Data Interoperability and data warehouse architectures for Health and Wellness,
    at Walmart Health and Wellness.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一个建筑学的学习者（不是建筑物……而是技术类型的）。过去，我曾涉及半导体建模、数字电路设计、电子接口建模以及物联网。目前，我在沃尔玛健康与保健部门从事数据互操作性和数据仓库架构方面的工作。
