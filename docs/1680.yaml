- en: Speed up your Geospatial Data Analysis with R-Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 R 树加速你的地理空间数据分析
- en: 原文：[https://towardsdatascience.com/speed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025?source=collection_archive---------0-----------------------#2023-05-21](https://towardsdatascience.com/speed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025?source=collection_archive---------0-----------------------#2023-05-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/speed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025?source=collection_archive---------0-----------------------#2023-05-21](https://towardsdatascience.com/speed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025?source=collection_archive---------0-----------------------#2023-05-21)
- en: '![](../Images/0f555f4eabbd4fbea6e260fa5f79554f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f555f4eabbd4fbea6e260fa5f79554f.png)'
- en: Photo by [Mathias Arlund](https://unsplash.com/@arlund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Mathias Arlund](https://unsplash.com/@arlund?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Learn how to drastically boost the performance of spatial searches
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何大幅提升空间搜索的性能
- en: '[](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)[![Markus
    Hubrich](../Images/e741e368812d5926636d7e0934c72103.png)](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)
    [Markus Hubrich](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)[![Markus
    Hubrich](../Images/e741e368812d5926636d7e0934c72103.png)](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)
    [Markus Hubrich](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3b63a2f93113&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&user=Markus+Hubrich&userId=3b63a2f93113&source=post_page-3b63a2f93113----4f75abdc6025---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)
    ·8 min read·May 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4f75abdc6025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&user=Markus+Hubrich&userId=3b63a2f93113&source=-----4f75abdc6025---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3b63a2f93113&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&user=Markus+Hubrich&userId=3b63a2f93113&source=post_page-3b63a2f93113----4f75abdc6025---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)
    · 8分钟阅读 · 2023年5月21日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4f75abdc6025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&user=Markus+Hubrich&userId=3b63a2f93113&source=-----4f75abdc6025---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4f75abdc6025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&source=-----4f75abdc6025---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4f75abdc6025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&source=-----4f75abdc6025---------------------bookmark_footer-----------)'
- en: A couple of years ago, I was working on a side project. I wanted to create a
    web app that recommends local gems, such as cafés, book stores, or hidden bars.
    The idea was to display all such points of interest within the user’s reach on
    a map. With hundreds of thousands of points in my dataset, I had to be clever
    about filtering the data points that are in a given range to the user. The naive
    approach is to calculate the distance between the user and each point of interest,
    and discard all points outside the specified range. Especially for big datasets
    like mine, this approach often leads to long processing times.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我在做一个副项目。我想创建一个推荐本地珍宝的网页应用，例如咖啡馆、书店或隐秘酒吧。这个想法是将所有这些用户可触及的兴趣点显示在地图上。由于数据集中有成千上万的兴趣点，我必须巧妙地过滤出用户指定范围内的数据点。最简单的方法是计算用户与每个兴趣点之间的距离，并丢弃所有超出指定范围的点。特别是对于像我这样的大数据集，这种方法通常会导致较长的处理时间。
- en: Surely, there had to be a better way as response time is important in interactive
    applications. This is when I came across the data structure *R-tree*. These trees
    are used for fast spatial access and search. Using an R-tree, I was able to quickly
    isolate points of interest close to the user’s location and display them on a
    map. This gave my web app a massive boost in response time — with just **four
    additional lines of code!**
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，必须有更好的方法，因为响应时间在互动应用程序中非常重要。这时我遇到了数据结构*R-tree*。这些树用于快速的空间访问和搜索。使用R-tree，我能够快速隔离靠近用户位置的兴趣点，并将其显示在地图上。这大大提升了我的网页应用的响应时间——仅仅**四行额外的代码！**
- en: In this article, I explain what R-trees are and how they work. This is illustrated
    with an example of street trees in New York City in the first two sections. The
    third section demonstrates how this data structure can be used in Python to speed
    up your geospatial data processing routines, too.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我解释了R-trees是什么以及它们是如何工作的。前两部分通过纽约市的街道树示例进行了说明。第三部分展示了如何在Python中使用这种数据结构来加速地理空间数据处理例程。
- en: Learning R-trees by analyzing trees in New York City
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过分析纽约市的树木来学习R-trees
- en: Assume we were asked to analyze if there is a correlation in the neighborhoods
    of New York City and the health of its trees. The [NYC Open Data Portal](https://opendata.cityofnewyork.us/)
    offers a street tree census dataset which includes species, diameter, perception
    of health and the geographic location of each tree.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们被要求分析纽约市的社区与其树木健康之间是否存在相关性。[NYC开放数据门户](https://opendata.cityofnewyork.us/)提供了一个街道树普查数据集，包括每棵树的物种、直径、健康状况的感知和地理位置。
- en: '[](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35?source=post_page-----4f75abdc6025--------------------------------)
    [## 2015 Street Tree Census - Tree Data | NYC Open Data'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35?source=post_page-----4f75abdc6025--------------------------------)
    [## 2015街道树普查 - 树木数据 | NYC开放数据'
- en: Street tree data from the TreesCount! 2015 Street Tree Census, conducted by
    volunteers and staff organized by NYC Parks…
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据来自TreesCount! 2015街道树普查，由志愿者和纽约市公园部组织的工作人员进行…
- en: data.cityofnewyork.us](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35?source=post_page-----4f75abdc6025--------------------------------)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: data.cityofnewyork.us](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35?source=post_page-----4f75abdc6025--------------------------------)
- en: 'To start with, we want to count the number of street trees in the Upper East
    Side. The pseudocode snippet below iterates through the dataset `trees` and checks
    if a tree falls within the `upper_east_side` boundary:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想统计上东区的街道树数量。下面的伪代码片段遍历数据集`trees`，并检查一棵树是否落在`upper_east_side`边界内：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We discovered that there are about 9k trees in the Upper East Side. However,
    we had to test a total of 684k trees to get there. The animation below visualizes
    that we test trees which are miles away from our target neighborhood and hence
    could be easily disregarded. But how can we exclude far away trees from expensive
    computations to achieve a significant performance gain?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现上东区大约有9千棵树。然而，我们必须测试总共68万棵树才能得到这个结果。下方的动画可视化了我们测试那些距离目标社区几英里的树，因此可以很容易地被忽略。但我们如何能排除远离的树木以减少昂贵的计算，从而实现显著的性能提升呢？
- en: 'One piece of information we virtually get for free is the bounding box of a
    polygon (it can be determined by the minimum and maximum values of its nodes).
    In addition, testing if a point falls within a rectangle is trivial and only requires
    four comparison operations (the point has to be greater than or equal to the bottom-left
    corner, and smaller than or equal to the top-right corner). For now, assume `bounding_box`
    is a dataset which contains all trees in a tight rectangle around the Upper East
    Side (in the next section we learn how such a rectangle can be easily obtained).
    Taking this into consideration yields:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎可以免费获得的一项信息是多边形的边界框（可以通过其节点的最小值和最大值来确定）。此外，测试一个点是否落在矩形内非常简单，只需进行四次比较操作（点必须大于或等于左下角，并且小于或等于右上角）。现在，假设
    `bounding_box` 是一个数据集，包含了上东区周围紧密矩形内的所有树木（在下一节中我们将学习如何轻松获得这样的矩形）。考虑到这一点，可以得出：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The right-hand side of the animation demonstrates that we now only test for
    *potential* candidates. Those are trees that are in immediate proximity to the
    polygon, i.e. points which fall within its bounding box. By disregarding far away
    trees we were able to reduce the number of tests from 684k to 11k — **a factor
    of 60!** In the next section we will see that R-trees make use of exactly this
    idea.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的右侧演示了我们现在仅测试*潜在*候选者。这些是位于多边形附近的树，即落在其边界框内的点。通过忽略远离的树木，我们将测试数量从 684k 减少到 11k
    —— **降低了 60 倍！** 在下一节中，我们将看到 R-trees 正是利用了这一点。
- en: '![](../Images/95a1e01599121c92f29cd12289782cdc.png)![](../Images/7c542d74ca72b42dbb5f7cea89850c39.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95a1e01599121c92f29cd12289782cdc.png)![](../Images/7c542d74ca72b42dbb5f7cea89850c39.png)'
- en: (**Left**) All trees in NYC are tested | (**Right**) Only trees within the bounding
    box of the Upper East Side are tested. Images by the author, with map data from
    © [Mapbox](https://www.mapbox.com/about/maps/) and © [OpenStreetMap](https://www.openstreetmap.org/copyright).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: (**左**) 纽约市的所有树木都经过测试 | (**右**) 仅测试位于上东区边界框内的树木。图像由作者提供，地图数据来自 © [Mapbox](https://www.mapbox.com/about/maps/)
    和 © [OpenStreetMap](https://www.openstreetmap.org/copyright)。
- en: 'A data structure for spatial searches: the R-tree'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于空间搜索的数据结构：R-tree
- en: R-trees are tree-based data structures for creating spatial indexes in an efficient
    manner. An R-tree is often used for fast spatial queries or to accelerate nearest
    neighbor searches [1]. A common use case might be to store spatial information
    of points of interest (e.g. restaurants, gas stations, streets, etc.) With the
    help of R-trees one can quickly retrieve all points of interest within a certain
    distance to a location. In return, these results can be displayed on a map or
    in a navigation system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: R-trees 是基于树的数据结构，用于高效地创建空间索引。R-tree 通常用于快速空间查询或加速最近邻搜索 [1]。一个常见的应用场景是存储兴趣点的空间信息（例如餐馆、加油站、街道等）。借助
    R-trees，可以快速检索到某位置一定距离内的所有兴趣点。反过来，这些结果可以在地图上或导航系统中显示。
- en: 'The basic idea of an R-tree is simple: leaf nodes of the tree hold spatial
    data, whereas a branching node corresponds to the minimum bounding box that contains
    all of its children. With this structure the R-tree partitions the space into
    rectangles which become more granular as the tree grows. This is illustrated in
    the example below.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: R-tree 的基本思想很简单：树的叶节点保存空间数据，而分支节点对应于包含所有子节点的最小边界框。通过这种结构，R-tree 将空间划分为矩形，随着树的增长这些矩形变得更为精细。以下示例对此进行了说明。
- en: '![](../Images/c3a566b3eaff867bf933abd8b304d36b.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3a566b3eaff867bf933abd8b304d36b.png)'
- en: (**Left**) The R-tree partitions Manhattan into a number of rectangles | (**Right**)
    The corresponding tree structure. Images by the author, with map data from © [Mapbox](https://www.mapbox.com/about/maps/)
    and © [OpenStreetMap](https://www.openstreetmap.org/copyright).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: (**左**) R-tree 将曼哈顿划分为多个矩形 | (**右**) 对应的树结构。图像由作者提供，地图数据来自 © [Mapbox](https://www.mapbox.com/about/maps/)
    和 © [OpenStreetMap](https://www.openstreetmap.org/copyright)。
- en: An R-tree is queried for a rectangle, i.e. we want to retrieve all data that
    is contained in this search window. Remember that each non-leaf node corresponds
    to a bounding box that contains all of its children. To fulfill a search query
    we simply travel along the branches of the tree and follow the paths that intersect
    with the given rectangle until we reach the leaf nodes. These leaf nodes, and
    hence our data points, are contained in the search rectangle and fulfill the query.
    The animation below demonstrates that we can greatly reduce the number of search
    operations by disregarding entire branches which do not fit the search criteria.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: R树被查询以获取一个矩形，即我们想要检索包含在此搜索窗口内的所有数据。请记住，每个非叶节点对应一个包含其所有子节点的边界框。为了执行搜索查询，我们只需沿着树的分支移动，并且沿着与给定矩形相交的路径直到到达叶节点。这些叶节点，因此我们的数据点，包含在搜索矩形内并完成查询。下面的动画演示了我们可以通过忽略不符合搜索条件的整个分支大大减少搜索操作的数量。
- en: '![](../Images/cc235888cd876baf7d8801926e43450b.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc235888cd876baf7d8801926e43450b.png)'
- en: (**Left**) Bounding boxes (black) which do not intersect with the search rectangle
    (red) are iteratively disregard | (**Right**) A search query is fulfilled by following
    the paths that intersect with the search rectangle. Images by the author.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: (**左侧**) 不与搜索矩形（红色）相交的边界框（黑色）被逐步忽略 | (**右侧**) 搜索查询通过遵循与搜索矩形相交的路径来完成。图片由作者提供。
- en: R-trees in Python
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的R树
- en: The Python package `Rtree` provides an implementation of the R-tree data structure
    and comes with a number of handy features, such as nearest neighbor searches,
    intersection searches or multi-dimensional indexes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Python包`Rtree`提供了R树数据结构的实现，并提供了许多方便的功能，如最近邻搜索、交集搜索或多维索引。
- en: '[## Rtree: Spatial indexing for Python - Rtree 0.9.4 documentation'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Rtree: Spatial indexing for Python - Rtree 0.9.4 documentation'
- en: Rtree is a ctypes Python wrapper of libspatialindex that provides a number of
    advanced spatial indexing features for…
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rtree是libspatialindex的ctypes Python包装器，为Python提供了许多先进的空间索引功能。
- en: rtree.readthedocs.io](https://rtree.readthedocs.io/en/latest/?source=post_page-----4f75abdc6025--------------------------------)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[rtree.readthedocs.io](https://rtree.readthedocs.io/en/latest/?source=post_page-----4f75abdc6025--------------------------------)'
- en: 'We can conveniently install the package with Python’s package manager [pip](https://pip.pypa.io/en/stable/):
    `pip install Rtree`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以方便地使用Python的包管理器[pip](https://pip.pypa.io/en/stable/)安装这个包：`pip install
    Rtree`。
- en: Basics
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: Before we handle geometries like points or polygons, we cover the basic usage
    of the `Rtree` package.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理像点或多边形这样的几何体之前，我们先了解一下`Rtree`包的基本用法。
- en: 'The `index` module helps us to construct a spatial index. This index is built
    up automatically by inserting bounding boxes of our objects. The bounding boxes
    are defined by specifying their left, bottom, right and top coordinates. Note
    that we insert a bounding box together with an *identifier* (in the above example
    `0` and `1`). The ID will help us to identify the bounding box when performing
    queries:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`index`模块帮助我们构建空间索引。这个索引通过插入我们对象的边界框自动构建起来。边界框通过指定它们的左侧、底部、右侧和顶部坐标来定义。请注意，在执行查询时，我们将边界框与一个*标识符*（在上面的示例中为`0`和`1`）一起插入。该ID将帮助我们在执行查询时识别边界框：'
- en: 'The index is queried for a given rectangle, again specified by its left, bottom,
    right and top coordinates. The result of the `intersection` method are the IDs
    of the objects that are contained within the search window (examples 1–3). The
    result is empty in the case that the search window is beyond the bounds of data
    we have in the index (example 4). Similarly, we use the `nearest` method to find
    the *k*-nearest objects to a given search window:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该索引被查询以获取给定矩形内的对象，再次由其左侧、底部、右侧和顶部坐标指定。`intersection`方法的结果是在搜索窗口内包含的对象的ID（示例1-3）。如果搜索窗口超出我们在索引中的数据范围，结果为空（示例4）。类似地，我们使用`nearest`方法来找到离给定搜索窗口最近的*k*个对象：
- en: Working with points, lines and polygons
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理点、线和多边形
- en: 'In the previous section, we saw how an index is constructed by inserting bounding
    boxes of objects. We now want to continue by using points, lines and polygons
    for these objects. The package [Shapely](https://pypi.org/project/Shapely/) provides
    an easy way of working with these kind of geometries in Python:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们看到索引是通过插入对象的边界框来构建的。现在，我们希望继续使用点、线和多边形来处理这些对象。包[Shapely](https://pypi.org/project/Shapely/)提供了一种在Python中处理这些类型几何体的简单方法：
- en: 'Above, we first create a point, a line, and a polygon. Next, the bounding boxes
    of these objects are inserted into an index using IDs `0`, `1`, and `2`. We now
    query the index for different search windows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们首先创建一个点，一个线和一个多边形。接下来，这些对象的边界框被使用ID `0`、`1`和`2`插入索引中。我们现在查询不同的搜索窗口：
- en: 'The illustration below shows the geometries and search windows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的插图显示了几何图形和搜索窗口：
- en: '![](../Images/506e372dc3712acb78d9800292975b2c.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/506e372dc3712acb78d9800292975b2c.png)'
- en: '**Green:** Point, Line and Polygon. **Red:** Search Windows. Image by the author.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**绿色：** 点、线和多边形。**红色：** 搜索窗口。图片由作者提供。'
- en: Searching all trees in the Upper East Side
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索上东区的所有树木
- en: We finally have everything needed to extract all trees within the Upper East
    Side! We will go through a code snippet below, however the full version can be
    found [here](https://gist.github.com/mhubrich/da9b5cf085af7cc207ce101f54fc4b69).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于具备了提取上东区所有树木所需的一切！我们将通过下面的代码片段进行说明，完整版本可以在[这里](https://gist.github.com/mhubrich/da9b5cf085af7cc207ce101f54fc4b69)找到。
- en: '![](../Images/730bfcd12a2d22751b8b9e783c542e4f.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/730bfcd12a2d22751b8b9e783c542e4f.png)'
- en: '**Green:** Trees in New York City. **Blue:** Upper East Side. **Orange:** Bounding
    box of the Upper East Side. Image by the author, with map data from © [Mapbox](https://www.mapbox.com/about/maps/)
    and © [OpenStreetMap](https://www.openstreetmap.org/copyright).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**绿色：** 纽约市的树木。**蓝色：** 上东区。**橙色：** 上东区的边界框。图片由作者提供，地图数据来自© [Mapbox](https://www.mapbox.com/about/maps/)和©
    [OpenStreetMap](https://www.openstreetmap.org/copyright)。'
- en: 'First, we load all required geometries using the [GeoPandas](https://pypi.org/project/geopandas/)
    package:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用[GeoPandas](https://pypi.org/project/geopandas/)包加载所有所需的几何图形：
- en: 'Next, we create an R-tree index containing all trees in New York City:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个包含纽约市所有树木的R树索引：
- en: 'Now, we generate a list of potential candidates, i.e. all trees that are within
    the bounding box of the Upper East Side:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们生成一个潜在候选项的列表，即所有在上东区边界框内的树木：
- en: 'Finally, we iterate through all potential candidates to extract the ones that
    are fully within the Upper East Side:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们遍历所有潜在的候选项，提取完全位于上东区内的那些：
- en: Conclusion
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this article, we learned how R-trees organize geographic information by
    partitioning the underlaying space into rectangles. This structure makes R-trees
    extremely fast for spatial lookups. In our New York City street tree example,
    utilizing an R-tree reduced the number of operations by a factor of 60\. We also
    saw how to work with R-trees in Python. The speed-up in our example was achieved
    with just four lines of code: initializing the index (1 line), constructing the
    index (2 lines), and using the `intersection` function to find nearby candidates
    (1 line).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们了解了R树如何通过将底层空间划分为矩形来组织地理信息。这种结构使R树在空间查找中极其快速。在我们的纽约市街道树木示例中，使用R树将操作次数减少了60倍。我们还看到了如何在Python中使用R树。我们的示例中的加速仅通过四行代码实现：初始化索引（1行），构建索引（2行），以及使用`intersection`函数找到附近的候选项（1行）。
- en: So why are R-trees not used everywhere? While we gain time by reducing the number
    of search operations, we lose time by constructing the index. For the latter we
    literally have to iterate through the entire dataset. This makes R-trees not suitable
    for applications requiring only a small number of searches or applications where
    the index changes often (because of tree rebalancing).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么R树不是无处不在呢？虽然通过减少搜索操作次数节省了时间，但我们在构建索引时却浪费了时间。后者我们必须实际遍历整个数据集。这使得R树不适合只需要少量搜索的应用程序或索引经常变化的应用程序（由于树的重新平衡）。
- en: R-trees have come a long way since their invention by Antonin Guttman in 1984\.
    Nowadays, they are found in all sorts of applications, for example in computer
    graphics [2], video games [3], traffic control systems [4], and most prominently
    in databases for spatial data management [5]. And perhaps in your next geospatial
    data analysis, too!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 自1984年Antonin Guttman发明R树以来，它们已经取得了长足的进步。如今，它们被广泛应用于各种领域，例如计算机图形学[2]、视频游戏[3]、交通控制系统[4]，以及最显著的空间数据管理数据库[5]。也许在你下一次的地理空间数据分析中也会用到！
- en: '**References**'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: '[1] A. Guttman, [R-Trees: A Dynamic Index Structure for Spatial Searching](http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf)
    (1984), Proceedings of the 1984 ACM SIGMOD International Conference on Management
    of Data, p. 47–57'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] A. Guttman，[R-Trees: A Dynamic Index Structure for Spatial Searching](http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf)（1984），1984年ACM
    SIGMOD国际数据管理会议论文集，第47-57页'
- en: '[2] D. Feldmann, [Accelerated Ray Tracing using R-Trees](https://www.scitepress.org/papers/2015/53048/53048.pdf)
    (2015), Proceedings of the 10th International Conference on Computer Graphics
    Theory and Applications, p. 247–257'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] D. Feldmann，[使用R树加速光线追踪](https://www.scitepress.org/papers/2015/53048/53048.pdf)（2015），第十届计算机图形学理论与应用国际会议论文集，第247–257页'
- en: '[3] A. Kinziabulatov, [Optimizing R-tree inserts in Unity: a Bomberman-like
    example](https://medium.com/my-games-company/optimizing-r-tree-inserts-in-unity-a-bomberman-like-example-81d2576efd75)
    (2023), Medium'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] A. Kinziabulatov，[在Unity中优化R树插入：一个类似Bomberman的例子](https://medium.com/my-games-company/optimizing-r-tree-inserts-in-unity-a-bomberman-like-example-81d2576efd75)（2023），Medium'
- en: '[4] Y. Manolopoulos, A. Nanopoulos, A. Papadopoulos and Y. Theodoridis, [R-Trees:
    Theory and Applications](https://link.springer.com/book/10.1007/978-1-84628-293-5)
    (2006), Springer'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] Y. Manolopoulos, A. Nanopoulos, A. Papadopoulos 和 Y. Theodoridis，[R树：理论与应用](https://link.springer.com/book/10.1007/978-1-84628-293-5)（2006），Springer'
- en: '[5] S. Bressan, J. Küng and R. Wagner, [Database and Expert Systems Applications](https://link.springer.com/book/10.1007/11827405)
    (2006), Springer'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] S. Bressan, J. Küng 和 R. Wagner，[数据库与专家系统应用](https://link.springer.com/book/10.1007/11827405)（2006），Springer'
- en: '**Datasets**'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**数据集**'
- en: New York City Department of Parks & Recreation, [2015 Street Tree Census — Tree
    Data](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35)
    (2016), NYC Open Data
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约市公园与娱乐部，[2015年街道树木普查——树木数据](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35)（2016），纽约市开放数据
- en: New York City Department of City Planning, [2010 Neighborhood Tabulation Areas
    (NTAs)](https://data.cityofnewyork.us/City-Government/2010-Neighborhood-Tabulation-Areas-NTAs-/cpf4-rkhq)
    (2013), NYC Open Data
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约市城市规划部，[2010年社区划分区域（NTAs）](https://data.cityofnewyork.us/City-Government/2010-Neighborhood-Tabulation-Areas-NTAs-/cpf4-rkhq)（2013），纽约市开放数据
