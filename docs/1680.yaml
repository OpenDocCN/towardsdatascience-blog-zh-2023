- en: Speed up your Geospatial Data Analysis with R-Trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/speed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025?source=collection_archive---------0-----------------------#2023-05-21](https://towardsdatascience.com/speed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025?source=collection_archive---------0-----------------------#2023-05-21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0f555f4eabbd4fbea6e260fa5f79554f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mathias Arlund](https://unsplash.com/@arlund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to drastically boost the performance of spatial searches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)[![Markus
    Hubrich](../Images/e741e368812d5926636d7e0934c72103.png)](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)
    [Markus Hubrich](https://medium.com/@markushubrich?source=post_page-----4f75abdc6025--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3b63a2f93113&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&user=Markus+Hubrich&userId=3b63a2f93113&source=post_page-3b63a2f93113----4f75abdc6025---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4f75abdc6025--------------------------------)
    ·8 min read·May 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4f75abdc6025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&user=Markus+Hubrich&userId=3b63a2f93113&source=-----4f75abdc6025---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4f75abdc6025&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fspeed-up-your-geospatial-data-analysis-with-r-trees-4f75abdc6025&source=-----4f75abdc6025---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: A couple of years ago, I was working on a side project. I wanted to create a
    web app that recommends local gems, such as cafés, book stores, or hidden bars.
    The idea was to display all such points of interest within the user’s reach on
    a map. With hundreds of thousands of points in my dataset, I had to be clever
    about filtering the data points that are in a given range to the user. The naive
    approach is to calculate the distance between the user and each point of interest,
    and discard all points outside the specified range. Especially for big datasets
    like mine, this approach often leads to long processing times.
  prefs: []
  type: TYPE_NORMAL
- en: Surely, there had to be a better way as response time is important in interactive
    applications. This is when I came across the data structure *R-tree*. These trees
    are used for fast spatial access and search. Using an R-tree, I was able to quickly
    isolate points of interest close to the user’s location and display them on a
    map. This gave my web app a massive boost in response time — with just **four
    additional lines of code!**
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I explain what R-trees are and how they work. This is illustrated
    with an example of street trees in New York City in the first two sections. The
    third section demonstrates how this data structure can be used in Python to speed
    up your geospatial data processing routines, too.
  prefs: []
  type: TYPE_NORMAL
- en: Learning R-trees by analyzing trees in New York City
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assume we were asked to analyze if there is a correlation in the neighborhoods
    of New York City and the health of its trees. The [NYC Open Data Portal](https://opendata.cityofnewyork.us/)
    offers a street tree census dataset which includes species, diameter, perception
    of health and the geographic location of each tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35?source=post_page-----4f75abdc6025--------------------------------)
    [## 2015 Street Tree Census - Tree Data | NYC Open Data'
  prefs: []
  type: TYPE_NORMAL
- en: Street tree data from the TreesCount! 2015 Street Tree Census, conducted by
    volunteers and staff organized by NYC Parks…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: data.cityofnewyork.us](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35?source=post_page-----4f75abdc6025--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, we want to count the number of street trees in the Upper East
    Side. The pseudocode snippet below iterates through the dataset `trees` and checks
    if a tree falls within the `upper_east_side` boundary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We discovered that there are about 9k trees in the Upper East Side. However,
    we had to test a total of 684k trees to get there. The animation below visualizes
    that we test trees which are miles away from our target neighborhood and hence
    could be easily disregarded. But how can we exclude far away trees from expensive
    computations to achieve a significant performance gain?
  prefs: []
  type: TYPE_NORMAL
- en: 'One piece of information we virtually get for free is the bounding box of a
    polygon (it can be determined by the minimum and maximum values of its nodes).
    In addition, testing if a point falls within a rectangle is trivial and only requires
    four comparison operations (the point has to be greater than or equal to the bottom-left
    corner, and smaller than or equal to the top-right corner). For now, assume `bounding_box`
    is a dataset which contains all trees in a tight rectangle around the Upper East
    Side (in the next section we learn how such a rectangle can be easily obtained).
    Taking this into consideration yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The right-hand side of the animation demonstrates that we now only test for
    *potential* candidates. Those are trees that are in immediate proximity to the
    polygon, i.e. points which fall within its bounding box. By disregarding far away
    trees we were able to reduce the number of tests from 684k to 11k — **a factor
    of 60!** In the next section we will see that R-trees make use of exactly this
    idea.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95a1e01599121c92f29cd12289782cdc.png)![](../Images/7c542d74ca72b42dbb5f7cea89850c39.png)'
  prefs: []
  type: TYPE_IMG
- en: (**Left**) All trees in NYC are tested | (**Right**) Only trees within the bounding
    box of the Upper East Side are tested. Images by the author, with map data from
    © [Mapbox](https://www.mapbox.com/about/maps/) and © [OpenStreetMap](https://www.openstreetmap.org/copyright).
  prefs: []
  type: TYPE_NORMAL
- en: 'A data structure for spatial searches: the R-tree'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R-trees are tree-based data structures for creating spatial indexes in an efficient
    manner. An R-tree is often used for fast spatial queries or to accelerate nearest
    neighbor searches [1]. A common use case might be to store spatial information
    of points of interest (e.g. restaurants, gas stations, streets, etc.) With the
    help of R-trees one can quickly retrieve all points of interest within a certain
    distance to a location. In return, these results can be displayed on a map or
    in a navigation system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic idea of an R-tree is simple: leaf nodes of the tree hold spatial
    data, whereas a branching node corresponds to the minimum bounding box that contains
    all of its children. With this structure the R-tree partitions the space into
    rectangles which become more granular as the tree grows. This is illustrated in
    the example below.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3a566b3eaff867bf933abd8b304d36b.png)'
  prefs: []
  type: TYPE_IMG
- en: (**Left**) The R-tree partitions Manhattan into a number of rectangles | (**Right**)
    The corresponding tree structure. Images by the author, with map data from © [Mapbox](https://www.mapbox.com/about/maps/)
    and © [OpenStreetMap](https://www.openstreetmap.org/copyright).
  prefs: []
  type: TYPE_NORMAL
- en: An R-tree is queried for a rectangle, i.e. we want to retrieve all data that
    is contained in this search window. Remember that each non-leaf node corresponds
    to a bounding box that contains all of its children. To fulfill a search query
    we simply travel along the branches of the tree and follow the paths that intersect
    with the given rectangle until we reach the leaf nodes. These leaf nodes, and
    hence our data points, are contained in the search rectangle and fulfill the query.
    The animation below demonstrates that we can greatly reduce the number of search
    operations by disregarding entire branches which do not fit the search criteria.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc235888cd876baf7d8801926e43450b.png)'
  prefs: []
  type: TYPE_IMG
- en: (**Left**) Bounding boxes (black) which do not intersect with the search rectangle
    (red) are iteratively disregard | (**Right**) A search query is fulfilled by following
    the paths that intersect with the search rectangle. Images by the author.
  prefs: []
  type: TYPE_NORMAL
- en: R-trees in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python package `Rtree` provides an implementation of the R-tree data structure
    and comes with a number of handy features, such as nearest neighbor searches,
    intersection searches or multi-dimensional indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[## Rtree: Spatial indexing for Python - Rtree 0.9.4 documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Rtree is a ctypes Python wrapper of libspatialindex that provides a number of
    advanced spatial indexing features for…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: rtree.readthedocs.io](https://rtree.readthedocs.io/en/latest/?source=post_page-----4f75abdc6025--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'We can conveniently install the package with Python’s package manager [pip](https://pip.pypa.io/en/stable/):
    `pip install Rtree`.'
  prefs: []
  type: TYPE_NORMAL
- en: Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we handle geometries like points or polygons, we cover the basic usage
    of the `Rtree` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `index` module helps us to construct a spatial index. This index is built
    up automatically by inserting bounding boxes of our objects. The bounding boxes
    are defined by specifying their left, bottom, right and top coordinates. Note
    that we insert a bounding box together with an *identifier* (in the above example
    `0` and `1`). The ID will help us to identify the bounding box when performing
    queries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The index is queried for a given rectangle, again specified by its left, bottom,
    right and top coordinates. The result of the `intersection` method are the IDs
    of the objects that are contained within the search window (examples 1–3). The
    result is empty in the case that the search window is beyond the bounds of data
    we have in the index (example 4). Similarly, we use the `nearest` method to find
    the *k*-nearest objects to a given search window:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with points, lines and polygons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we saw how an index is constructed by inserting bounding
    boxes of objects. We now want to continue by using points, lines and polygons
    for these objects. The package [Shapely](https://pypi.org/project/Shapely/) provides
    an easy way of working with these kind of geometries in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Above, we first create a point, a line, and a polygon. Next, the bounding boxes
    of these objects are inserted into an index using IDs `0`, `1`, and `2`. We now
    query the index for different search windows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The illustration below shows the geometries and search windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/506e372dc3712acb78d9800292975b2c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Green:** Point, Line and Polygon. **Red:** Search Windows. Image by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Searching all trees in the Upper East Side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We finally have everything needed to extract all trees within the Upper East
    Side! We will go through a code snippet below, however the full version can be
    found [here](https://gist.github.com/mhubrich/da9b5cf085af7cc207ce101f54fc4b69).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/730bfcd12a2d22751b8b9e783c542e4f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Green:** Trees in New York City. **Blue:** Upper East Side. **Orange:** Bounding
    box of the Upper East Side. Image by the author, with map data from © [Mapbox](https://www.mapbox.com/about/maps/)
    and © [OpenStreetMap](https://www.openstreetmap.org/copyright).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we load all required geometries using the [GeoPandas](https://pypi.org/project/geopandas/)
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create an R-tree index containing all trees in New York City:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we generate a list of potential candidates, i.e. all trees that are within
    the bounding box of the Upper East Side:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we iterate through all potential candidates to extract the ones that
    are fully within the Upper East Side:'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this article, we learned how R-trees organize geographic information by
    partitioning the underlaying space into rectangles. This structure makes R-trees
    extremely fast for spatial lookups. In our New York City street tree example,
    utilizing an R-tree reduced the number of operations by a factor of 60\. We also
    saw how to work with R-trees in Python. The speed-up in our example was achieved
    with just four lines of code: initializing the index (1 line), constructing the
    index (2 lines), and using the `intersection` function to find nearby candidates
    (1 line).'
  prefs: []
  type: TYPE_NORMAL
- en: So why are R-trees not used everywhere? While we gain time by reducing the number
    of search operations, we lose time by constructing the index. For the latter we
    literally have to iterate through the entire dataset. This makes R-trees not suitable
    for applications requiring only a small number of searches or applications where
    the index changes often (because of tree rebalancing).
  prefs: []
  type: TYPE_NORMAL
- en: R-trees have come a long way since their invention by Antonin Guttman in 1984\.
    Nowadays, they are found in all sorts of applications, for example in computer
    graphics [2], video games [3], traffic control systems [4], and most prominently
    in databases for spatial data management [5]. And perhaps in your next geospatial
    data analysis, too!
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] A. Guttman, [R-Trees: A Dynamic Index Structure for Spatial Searching](http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf)
    (1984), Proceedings of the 1984 ACM SIGMOD International Conference on Management
    of Data, p. 47–57'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] D. Feldmann, [Accelerated Ray Tracing using R-Trees](https://www.scitepress.org/papers/2015/53048/53048.pdf)
    (2015), Proceedings of the 10th International Conference on Computer Graphics
    Theory and Applications, p. 247–257'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] A. Kinziabulatov, [Optimizing R-tree inserts in Unity: a Bomberman-like
    example](https://medium.com/my-games-company/optimizing-r-tree-inserts-in-unity-a-bomberman-like-example-81d2576efd75)
    (2023), Medium'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Y. Manolopoulos, A. Nanopoulos, A. Papadopoulos and Y. Theodoridis, [R-Trees:
    Theory and Applications](https://link.springer.com/book/10.1007/978-1-84628-293-5)
    (2006), Springer'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] S. Bressan, J. Küng and R. Wagner, [Database and Expert Systems Applications](https://link.springer.com/book/10.1007/11827405)
    (2006), Springer'
  prefs: []
  type: TYPE_NORMAL
- en: '**Datasets**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New York City Department of Parks & Recreation, [2015 Street Tree Census — Tree
    Data](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/pi5s-9p35)
    (2016), NYC Open Data
  prefs: []
  type: TYPE_NORMAL
- en: New York City Department of City Planning, [2010 Neighborhood Tabulation Areas
    (NTAs)](https://data.cityofnewyork.us/City-Government/2010-Neighborhood-Tabulation-Areas-NTAs-/cpf4-rkhq)
    (2013), NYC Open Data
  prefs: []
  type: TYPE_NORMAL
