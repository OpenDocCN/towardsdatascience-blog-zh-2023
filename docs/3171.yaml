- en: Understanding Retention with Gradio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/understanding-retention-with-gradio-c288b48918af?source=collection_archive---------3-----------------------#2023-10-21](https://towardsdatascience.com/understanding-retention-with-gradio-c288b48918af?source=collection_archive---------3-----------------------#2023-10-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to leverage web applications for analytics
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://miptgirl.medium.com/?source=post_page-----c288b48918af--------------------------------)[![Mariya
    Mansurova](../Images/b1dd377b0a1887db900cc5108bca8ea8.png)](https://miptgirl.medium.com/?source=post_page-----c288b48918af--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c288b48918af--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c288b48918af--------------------------------)
    [Mariya Mansurova](https://miptgirl.medium.com/?source=post_page-----c288b48918af--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F15a29a4fc6ad&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-retention-with-gradio-c288b48918af&user=Mariya+Mansurova&userId=15a29a4fc6ad&source=post_page-15a29a4fc6ad----c288b48918af---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c288b48918af--------------------------------)
    ·15 min read·Oct 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc288b48918af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-retention-with-gradio-c288b48918af&user=Mariya+Mansurova&userId=15a29a4fc6ad&source=-----c288b48918af---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc288b48918af&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-retention-with-gradio-c288b48918af&source=-----c288b48918af---------------------bookmark_footer-----------)![](../Images/5b58678467a50c1f821070b4f80c7267.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Image by DALL-E 3
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: I remember a moment when I built my first web application. It was around eight
    years ago, and I was a rather junior analyst and was convinced that BI tools could
    solve all the problems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The engineering team built a prototype of a new SDK and wanted to learn whether
    it gathers data better. They were testing it on a set of devices, looking at the
    data and comparing it to the old version. However, the set of devices was constantly
    changing, so keeping it up-to-date in BI tools would require quite a lot of work.
    So, I decided to build a web application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: I found a set of articles (ten or eleven if I remember correctly), read them
    all and tried to use this knowledge for my task. It took me around a week to finish
    the first prototype. I had to write both the back-end and front-end sides, so
    now I could consider myself at least a junior full-stack developer. For the back-end,
    I used Flask (I was lucky not to bump into Django, or I would have spent the whole
    month), and for front-end — Bootstrap and Leaflet.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我找了一套文章（如果我没记错的话，大约十篇或十一篇），阅读了它们并尝试将这些知识应用于我的任务。我花了大约一周的时间完成了第一个原型。我必须同时编写后端和前端，因此现在我可以认为自己至少是一个初级全栈开发者。后端我使用了
    Flask（我很幸运没有碰到 Django，否则我可能要花整整一个月），前端则使用了 Bootstrap 和 Leaflet。
- en: Overall, it was a challenging task that required much effort to upskill in engineering.
    I believe it’s always worth having a deeper understanding of the other spheres
    next to your primary domain of expertise.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，这是一个具有挑战性的任务，需要付出很多努力来提升工程技能。我相信深入了解与你的主要专业领域相关的其他领域总是值得的。
- en: 'However, I’m delighted that nowadays, there are many tools that allow analysts
    and data scientists to build prototypes in less than an hour. In many cases, such
    prototypes can bring your analytics to the next level. Here are some examples:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我很高兴的是，如今有许多工具允许分析师和数据科学家在不到一个小时的时间内构建原型。在许多情况下，这些原型可以将你的分析提升到一个新的水平。以下是一些例子：
- en: Revenue and audience forecast depending on the input parameters (like marketing
    budget or markets where we will launch a new feature),
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据输入参数（如营销预算或我们将在何处推出新功能）预测收入和受众，
- en: Tools that will speed up your team’s work or reduce ad-hoc workload, like an
    A/B testing calculator or automatic root cause analysis,
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以加快团队工作速度或减少临时工作量的工具，如 A/B 测试计算器或自动根本原因分析，
- en: MVP solutions, for example, if you want to use LLMs to automate some internal
    processes, it’s worth testing a prototype before spending time on a production
    version. I shared such an ML prototype in one of my previous articles, [“Build
    your first Deep Learning app within an hour”](/build-your-first-deep-learning-app-within-an-hour-4e80c120e99f).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVP 解决方案，例如，如果你想使用 LLMs 来自动化一些内部流程，值得在花时间开发生产版本之前先测试一个原型。我在之前的一篇文章中分享了一个这样的
    ML 原型，[“在一个小时内构建你的第一个深度学习应用”](/build-your-first-deep-learning-app-within-an-hour-4e80c120e99f)。
- en: In this article, I would like to tell you about one of such frameworks that
    can help you quickly and almost effortlessly create nice-looking web applications
    without bothering with JavaScript and CSS. We will learn the basics of Gradio,
    develop a couple of web applications, and publish them to HuggingFace Spaces so
    anyone can access them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想介绍一个这样的框架，它可以帮助你快速且几乎不费力地创建外观美观的网页应用程序，而无需烦恼于 JavaScript 和 CSS。我们将学习
    Gradio 的基础知识，开发几个网页应用程序，并将它们发布到 HuggingFace Spaces，以便任何人都可以访问它们。
- en: 'Gradio is not the only framework of that kind. There are a few other open-source
    Python alternatives:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Gradio 并不是唯一一个这样的框架。还有其他一些开源 Python 替代品：
- en: '[Streamlit](https://streamlit.io/) is another popular and powerful library
    for building data apps with little code. It is also supported by HuggingFace Spaces
    so that you can host such apps.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Streamlit](https://streamlit.io/) 是另一个流行且强大的库，用于用少量代码构建数据应用程序。它也得到了 HuggingFace
    Spaces 的支持，以便你可以托管这些应用程序。'
- en: '[Dash](https://dash.plotly.com/) could be convenient if you are already used
    to Plotly, and it provides more capabilities for customization.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Dash](https://dash.plotly.com/) 如果你已经习惯了 Plotly，它可能会很方便，并且提供更多的定制能力。'
- en: However, if you want to build something custom and complex, your last resort
    would be [Flask](https://flask.palletsprojects.com/en/3.0.x/) or even [Django](https://www.djangoproject.com/).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不过，如果你想构建一些自定义且复杂的东西，你最后的选择可能是 [Flask](https://flask.palletsprojects.com/en/3.0.x/)
    或甚至 [Django](https://www.djangoproject.com/)。
- en: You can find more details regarding the main features of the different frameworks
    in [this article](/gradio-vs-streamlit-vs-dash-vs-flask-d3defb1209a2).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [这篇文章](/gradio-vs-streamlit-vs-dash-vs-flask-d3defb1209a2) 中找到有关不同框架主要功能的更多细节。
- en: Gradio basics
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradio 基础知识
- en: '[Gradio](https://www.gradio.app/) is an open-source Python library that is
    used to build interactive applications.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[Gradio](https://www.gradio.app/) 是一个开源的 Python 库，用于构建交互式应用程序。'
- en: 'The main advantages of Gradio are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Gradio 的主要优点是：
- en: you can build applications using only Python, which also means that you can
    use all Python libraries in your app,
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以仅使用 Python 来构建应用程序，这也意味着你可以在应用程序中使用所有 Python 库，
- en: you can run it in Jupyter Notebook or as a separate webpage,
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 Jupyter Notebook 中运行它或作为一个单独的网页，
- en: you can host Gradio apps permanently on HuggingFace spaces.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 HuggingFace spaces 上永久托管 Gradio 应用。
- en: 'There’s no silver bullet, so Gradio has its limitations:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 没有灵丹妙药，所以 Gradio 有其局限性：
- en: It’s explicitly designed for ML applications. So, if you’re using it for other
    use cases, you might have to change defaults (for example, switching off flagging
    with `allow_flagging= "never"`).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是专为机器学习应用设计的。因此，如果你将它用于其他用途，可能需要更改默认设置（例如，使用 `allow_flagging= "never"` 关闭标记功能）。
- en: Customization is limited, especially if we are talking about design.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义有限，尤其是在设计方面。
- en: I would bear in mind that Gradio is a framework primarily for quick prototyping.
    It mostly works well, but from time to time, I face some strange behaviour. For
    example, table editing in Safari works counterintuitively, or sometimes you need
    to restart Jupyter Notebook to make the interface load.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我会记住 Gradio 主要是一个用于快速原型开发的框架。它大多工作良好，但偶尔会遇到一些奇怪的行为。例如，Safari 中的表格编辑行为反直觉，或者有时需要重新启动
    Jupyter Notebook 以加载界面。
- en: To start using Gradio, we need to install the Python package.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Gradio，我们需要安装 Python 包。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Following the old programmers’ tradition, let’s start with “Hello, World!”.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循老程序员的传统，让我们从“Hello, World!”开始。
- en: We can use `gr.Interface` class to define the interface ([documentation](https://www.gradio.app/docs/interface)).
    It’s one of the core Gradio classes that helps you to create a web application
    based on any Python function.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `gr.Interface` 类来定义界面（[文档](https://www.gradio.app/docs/interface)）。这是
    Gradio 的核心类之一，帮助你基于任何 Python 函数创建 Web 应用。
- en: 'We need to specify the following parameters:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要指定以下参数：
- en: '`inputs`**:** input components of the interface (in our case, just a text field),'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inputs`**:** 界面的输入组件（在我们的例子中，只是一个文本框），'
- en: '`outputs`**:** outputcomponents of the interface (in our case, also just a
    text field),'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs`**:** 界面的输出组件（在我们的例子中，也只是一个文本框），'
- en: '`fn`**:** core functionality (a function that gets inputs and returns outputs,
    in our case, gets name from the input and returns “Hello, <name>!”),'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fn`**:** 核心功能（一个获取输入并返回输出的函数，在我们的例子中，从输入中获取名称并返回“Hello, <name>!”），'
- en: '`title` & `description`**:** a bit of markdown to make our app more user-friendly.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title` & `description`**:** 一些 Markdown 让我们的应用更加用户友好。'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can run this code in your Jupyter Notebook and see the results. It’s pretty
    handy for debugging. Later, we will discuss how to make your web application available
    to others.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的 Jupyter Notebook 中运行这段代码，查看结果。这对于调试非常方便。稍后，我们将讨论如何让你的 Web 应用对他人可用。
- en: '![](../Images/ee92257fcd44d42a391b771476a5ca85.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ee92257fcd44d42a391b771476a5ca85.png)'
- en: Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'That’s it: just a few lines of code, and your first Gradio app is running.
    Also, I must note that it looks pretty nice, and we didn’t have to use any front-end
    magic for it.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样：只需几行代码，你的第一个 Gradio 应用就运行了。我还必须指出，它看起来相当不错，我们没有使用任何前端魔法。
- en: Gradio launches a lot of processes in the background when you’re working from
    Jupyter Notebook, so it’s worth from time to time close connections using `*gr.close_all()*`.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你在 Jupyter Notebook 中工作时，Gradio 会在后台启动许多进程，因此不时使用 `*gr.close_all()*` 关闭连接是值得的。
- en: 'We looked at the most basic example and saw the building blocks of Gradio:
    inputs, outputs and functions. Now, we are ready to move on to real-life analytical
    tasks.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了最基本的示例，了解了 Gradio 的构建模块：输入、输出和函数。现在，我们准备开始真实的分析任务。
- en: Growth Simulation
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增长模拟
- en: As the first example, we will look at the impact of retention on the users’
    growth for the product.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一个示例，我们将研究保留对产品用户增长的影响。
- en: Retention as the basis for growth
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保留作为增长的基础
- en: 'Two parameters define the growth of the product:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 两个参数定义了产品的增长：
- en: acquisition (number of new users each period),
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: acquisition（每个周期的新用户数量），
- en: retention (ability to retain customers in the product).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: retention（保留用户的能力）。
- en: Let’s model how the user base will grow depending on the retention curve.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们建模用户基础如何根据保留曲线增长。
- en: 'We can describe any retention curve using the following function with a set
    of parameters (`a`, `b`, `c` and `d`):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下函数和一组参数（`a`、`b`、`c` 和 `d`）来描述任何保留曲线：
- en: '![](../Images/8c2215f81a4369cd092e882007d12b08.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c2215f81a4369cd092e882007d12b08.png)'
- en: 'Let’s talk about the most common case of retention: cohort is defined by the
    first action in the product, and all actions are counted into the retention. In
    that case, retention for `periods = 0` must equal 1 (because the cohort entry
    and retention events are the same). So, we can define one of the parameters automatically:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈留存的最常见情况：队列由产品中的第一次操作定义，所有操作都计入留存。在这种情况下，`periods = 0`的留存必须等于1（因为队列入口和留存事件是相同的）。所以，我们可以自动定义其中一个参数：
- en: '![](../Images/bf09f55e3259530b5301d9ae7bf05777.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf09f55e3259530b5301d9ae7bf05777.png)'
- en: The main factor for growth is long-term retention. It defines whether customers
    stick to the product for a long time and your product grows sustainably or customers
    churn in a month, and you need to acquire more and more new users for growth.
    In our formula, `a` parameter is in charge of long-term retention.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 增长的主要因素是长期留存。它决定了客户是否长期使用产品，以及你的产品是否可持续增长，或者客户在一个月内流失，你是否需要不断获取更多的新用户来实现增长。在我们的公式中，`a`参数负责长期留存。
- en: '![](../Images/be9107e4756eba3f7c634c3dd4e2763c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be9107e4756eba3f7c634c3dd4e2763c.png)'
- en: We can use this formula to define the retention curve. So we have everything
    we need to move on to the development.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个公式来定义留存曲线。所以我们已经拥有了继续开发所需的一切。
- en: Visualising retention graph
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化留存图表
- en: Let’s start simple and make an application that will take the retention curve
    parameters and show the relation as a graph.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的开始，制作一个接受留存曲线参数并以图表形式显示关系的应用程序。
- en: Similarly to our “Hello, World” example, we need to use `gr.Interface` class
    and pass `inputs`, `outputs` and `fn` to map them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们的“Hello, World”示例，我们需要使用`gr.Interface`类并传递`inputs`、`outputs`和`fn`来映射它们。
- en: We now need more input parameters. So, `inputs` will be a list of controls.
    We will use `gr.Slider` and `gr.Dropdown` controls.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们现在需要更多的输入参数。因此，`inputs`将是一个控件列表。我们将使用`gr.Slider`和`gr.Dropdown`控件。
- en: For [gr.Slider](https://www.gradio.app/docs/slider), we need to pass min, max,
    default values and a label that we will use in the function.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[gr.Slider](https://www.gradio.app/docs/slider)，我们需要传递最小值、最大值、默认值和一个标签，我们将在函数中使用。
- en: For [gr.Dropdown](https://www.gradio.app/docs/dropdown), we need to define a
    list of possible values, default value, and a label.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[gr.Dropdown](https://www.gradio.app/docs/dropdown)，我们需要定义一个可能值的列表、默认值和标签。
- en: We will still have only one output — a plot so that `outputs` will be `gr.Plot`
    without any parameters.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们仍然只有一个输出——一个图表，因此`outputs`将是`gr.Plot`，没有任何参数。
- en: Function `fn` will map inputs to outputs, so it will get input arguments and
    return `plotly.Figure` object that will be visualised.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`fn`将把输入映射到输出，因此它将获取输入参数并返回`plotly.Figure`对象进行可视化。
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s try to run this app. It’s working — we can see a graph that changes if
    we submit new parameters.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试运行这个应用程序。它在工作——我们可以看到一个图表，提交新参数时图表会发生变化。
- en: '![](../Images/56dbf537eb5f547cd3183d3f83cc4ff6.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56dbf537eb5f547cd3183d3f83cc4ff6.png)'
- en: Adding more graphs
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加更多图表
- en: Our goal was to look at the impact of retention on growth, so we need to add
    graphs showing not only retention but also audience over time. Let’s change our
    interface.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是查看留存对增长的影响，因此我们需要添加不仅展示留存，还展示随时间推移的观众图表。让我们改变一下界面。
- en: For simplicity, we will consider that in each period, the same number of new
    users start using our product (`cohort_size` parameter).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化起见，我们假设在每个周期内，相同数量的新用户开始使用我们的产品（`cohort_size`参数）。
- en: 'We need to make just a couple of changes to our implementation:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需对实现做几个小改动：
- en: Change `get_retention_plot` function so that it gets one more parameter for
    cohort size, calculates the number of users over time and returns three Figures.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改`get_retention_plot`函数，以便它接受一个关于队列大小的新参数，计算随时间变化的用户数量，并返回三个图形。
- en: Parameter `outputs` is now equal to the list of three `gr.Plot()` objects.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数`outputs`现在等于三个`gr.Plot()`对象的列表。
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Fantastic, now we can see the complete picture and analyse the relationships.
    However, there’s room for improvement — we can add formatting to make our app
    more convenient for users.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，现在我们可以看到完整的画面并分析关系。然而，还有改进的空间——我们可以添加格式以使应用程序对用户更方便。
- en: '![](../Images/744f7a0f14e19151e3c2e24479c65173.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/744f7a0f14e19151e3c2e24479c65173.png)'
- en: Image by author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Adding a bit of style
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些样式
- en: We can tweak our interface a bit to make it more user-friendly and straightforward.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以稍微调整一下界面，使其更加用户友好和直观。
- en: For that, we will be using `gr.Blocks()` as a context. [This functionality](https://www.gradio.app/docs/blocks)
    allows you to create more custom web applications and define layouts and data
    flows (events that trigger functions and consequent execution).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将使用 `gr.Blocks()` 作为上下文。[此功能](https://www.gradio.app/docs/blocks)允许您创建更自定义的网页应用程序，并定义布局和数据流（触发函数的事件及其后续执行）。
- en: 'Blocks will open new opportunities for us:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Blocks 将为我们开启新的机会：
- en: With `gr.Blocks()` we can use `gr.Row()` and `gr.Column()` to organize a layout.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `gr.Blocks()`，我们可以使用 `gr.Row()` 和 `gr.Column()` 来组织布局。
- en: '`gr.Markdown` allows you to add markdown elements, for example, title or even
    LaTeX with formulas (by default, you need to put them inside $).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gr.Markdown` 允许您添加 markdown 元素，例如标题或甚至带有公式的 LaTeX（默认情况下，您需要将其放在 $ 内部）。'
- en: '`gr.Accordion` can help you hide some parameters you don’t want to show the
    user by default.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gr.Accordion` 可以帮助您隐藏一些默认不想显示给用户的参数。'
- en: Also, this approach allows you to define more complex logic of updates. For
    example, update plots not only on the submit button but on the change of any input
    parameter. We will use this functionality in the following example.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，这种方法允许您定义更复杂的更新逻辑。例如，不仅在提交按钮上更新图表，还可以在任何输入参数发生变化时更新图表。我们将在以下示例中使用此功能。
- en: When working with Blocks, we need to define each input and output as variables,
    for example, `a = gr.Slider(0, 1, 0.03, label=”a”)`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Blocks 时，我们需要将每个输入和输出定义为变量，例如，`a = gr.Slider(0, 1, 0.03, label=”a”)`。
- en: Also, there are no default controls, so we have to define buttons ourselves
    — `btn_caption = gr.Button(“Submit”)`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，没有默认控件，所以我们需要自己定义按钮 —— `btn_caption = gr.Button(“Submit”)`。
- en: The action on button click also must be specified, setting the already familiar
    parameters — `inputs`, `outputs` and `fn`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮点击的操作也必须指定，设置已经熟悉的参数 —— `inputs`、`outputs` 和 `fn`。
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here is the full version of code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完整的代码版本。
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Hosting your application
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管您的应用程序
- en: Also, we can use HuggingFace Spaces to host our web applications and share them
    easily with others.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用 HuggingFace Spaces 来托管我们的网页应用程序，并轻松地与他人分享。
- en: To start using Spaces, you need to have an account. Follow this [link](https://huggingface.co/join)
    if you haven’t registered yet. It won’t take more than a couple of minutes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Spaces，您需要有一个账户。如果还没有注册，请访问此[链接](https://huggingface.co/join)。这不会超过几分钟。
- en: The next step is to create a new Space. You can find instructions with more
    details in [the documentation](https://huggingface.co/docs/hub/spaces-overview).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个新的 Space。您可以在[文档](https://huggingface.co/docs/hub/spaces-overview)中找到更详细的说明。
- en: '![](../Images/87bb2d236b2011b8a9d35ccaca4b81ed.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87bb2d236b2011b8a9d35ccaca4b81ed.png)'
- en: Image by author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'For new Space, you must fill in the following parameters: name, license and
    Gradio as your SDK.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新的 Space，您必须填写以下参数：名称、许可证和 Gradio 作为您的 SDK。
- en: '![](../Images/85af66926ab40de2d913bfc33c5a58c9.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85af66926ab40de2d913bfc33c5a58c9.png)'
- en: Image by author
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Then, you need to commit your code to the Git repository from Hugging Spaces.
    First of all, we need to clone the repository.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要将代码提交到 Hugging Spaces 的 Git 仓库。首先，我们需要克隆仓库。
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Recently, HuggingFace has changed the [Git authentication process](https://huggingface.co/blog/password-git-deprecation),
    so we need to create a token first and then set it for the Git repo.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，HuggingFace 更改了[Git 认证过程](https://huggingface.co/blog/password-git-deprecation)，所以我们需要先创建一个令牌，然后将其设置到
    Git 仓库中。
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, it’s time to commit files related to our application. We need to have
    at least the following files:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，到了提交与我们的应用程序相关的文件的时候。我们至少需要以下文件：
- en: '`app.py` with the Python code that launches the Gradio app'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含启动 Gradio 应用程序的 Python 代码的 `app.py`
- en: '`requirements.txt` with the list of Python packages you need for your application.
    In our case, only `pandas` and `plotly`.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含您应用程序所需的 Python 包列表的 `requirements.txt` 文件。在我们的情况下，仅需 `pandas` 和 `plotly`。
- en: 'Then, basic steps with git: add, commit and push to HuggingFaces.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，基本的 git 步骤：添加、提交并推送到 HuggingFaces。
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It took a couple of minutes to build the app, and it’s done. Now our web application
    is up and running on HuggingFaces Spaces. You can try it [here](https://huggingface.co/spaces/miptgirl/retention_simulator).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应用程序花了几分钟，现在完成了。我们的网页应用程序现在已在 HuggingFaces Spaces 上运行。您可以[在这里](https://huggingface.co/spaces/miptgirl/retention_simulator)尝试一下。
- en: '![](../Images/71ebe19bfd00d8a49459e08a65d25cbf.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71ebe19bfd00d8a49459e08a65d25cbf.png)'
- en: Image by author
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: It looks much nicer than our initial version since the layout doesn’t require
    scrolling, and users don’t have to guess what parameters `a`, `c` and `d` mean.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 它比我们最初的版本看起来好很多，因为布局不需要滚动，用户也不需要猜测参数`a`、`c`和`d`的含义。
- en: Predicting retention
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预测保留率
- en: We’ve learned how to generate graphs based on a bunch of parameters in a web
    application. But in real life, we usually have to input quite a lot of data, so
    let’s find out how to use data from `.csv` files in apps.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何在Web应用程序中根据一组参数生成图表。但是在现实生活中，我们通常需要输入大量数据，所以让我们找出如何在应用程序中使用`.csv`文件中的数据。
- en: As an example, we will look at actual retention data for a few first periods
    and try to predict retention for the following periods. It’s quite a common task
    since we usually don’t want to wait three months to compare third-month retention
    for the new cohort. We will upload factual data as a `.csv` file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将查看前几个周期的实际保留数据，并尝试预测后续周期的保留率。这是一个相当常见的任务，因为我们通常不希望等三个月才能比较新队列的第三个月保留率。我们将上传实际数据作为`.csv`文件。
- en: Let’s not waste our time and jump to the implementation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 不要浪费时间，我们直接进入实现部分吧。
- en: Getting data from files
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件中获取数据
- en: Here is the code to generate the whole interface and business logic. It might
    look a bit complex. Don’t worry. We will discuss the core points later.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成整个界面和业务逻辑的代码。它可能看起来有点复杂。不用担心，我们稍后会讨论核心要点。
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s look at it closer. We have the following elements in the interface:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下。我们在界面中有以下元素：
- en: '`periods` — input parameter,'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`periods`——输入参数。'
- en: '`upload_button` — input parameter that allows you to load data from a `.csv`
    file,'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upload_button`——输入参数，允许你从`.csv`文件中加载数据。'
- en: '`default_button` — allows you to update table and graph with pre-defined values
    as an example,'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_button`——允许你用预定义的值更新表格和图表作为示例。'
- en: '`table` shows the data frame from uploaded data (either from `.csv` file or
    example); also, you could change the numbers in the table in place, and the graph
    will be updated — so it’s an input parameter as well,'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`显示上传数据的数据框（无论是来自`.csv`文件还是示例）；此外，你还可以在表格中直接更改数字，图表将会更新——所以它也是一个输入参数。'
- en: '`image` — output parameter, that shows a plot.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`——输出参数，显示一个图表。'
- en: '![](../Images/c066c82f5e969b833220ac558a8de011.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c066c82f5e969b833220ac558a8de011.png)'
- en: Image by author
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Function `parse_file` gets either file from `upload_button` or string from the
    default example and returns a `pandas` data frame we could use further. So, using
    data from files is pretty straightforward.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`parse_file`从`upload_button`获取文件或从默认示例中获取字符串，并返回一个我们可以进一步使用的`pandas`数据框。所以，使用文件中的数据是非常简单的。
- en: 'The crucial business logic is defined in the code snippet below. It defines
    actions for all interface elements:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的业务逻辑在下面的代码片段中定义。它定义了所有界面元素的操作：
- en: for uploading `.csv` file — the table and the plot are updated,
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于上传`.csv`文件——表格和图表都会更新。
- en: for click on the button “Show example” — the table and the plot are updated,
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于点击“显示示例”按钮——表格和图表都会更新。
- en: for changing data in the table — only the plot is updated,
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于更改表格中的数据——仅更新图表。
- en: for changing the number of periods — only the plot is updated.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于更改周期数——仅更新图表。
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Defining the best-fit function
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义最佳拟合函数
- en: The essential part of our solution is finding the best-fit function for our
    factual data. Let’s look at how to do it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决问题的关键部分是为实际数据找到最佳拟合函数。让我们看看如何做到这一点。
- en: First, we define the function `get_mse_for_retention` that returns the error
    for the set of parameters (`a`, `c` and `d`). It also takes the data frame as
    an input.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们定义了一个函数`get_mse_for_retention`，它返回一组参数（`a`、`c`和`d`）的误差。它还接受数据框作为输入。
- en: We use standard Mean Squared Error (MSE) as the error we will minimize.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用标准均方误差（MSE）作为我们将要最小化的误差。
- en: 'Then, we will use `scipy.optimize.minimize` function for optimization. We need
    to pass just two parameters: the function to optimize (we passed the lambda function
    with a hard-coded data frame since we are optimizing only params) and the initial
    values for parameters (just a list of random values).'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将使用`scipy.optimize.minimize`函数进行优化。我们只需要传递两个参数：要优化的函数（我们传递了一个带有硬编码数据框的lambda函数，因为我们只优化参数）和参数的初始值（只是一个随机值的列表）。
- en: After optimisation, we could access optimal params using `result.x` .
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化后，我们可以使用`result.x`访问最优参数。
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That’s it, now we know the theoretical retention curve for our factual data
    and can use it in our app for prediction.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，现在我们知道了我们实际数据的理论保留曲线，并且可以在应用程序中使用它进行预测。
- en: Last step
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后一步
- en: I followed the same instructions and posted this app to HuggingFace Spaces as
    well. So you could try to play with it [here](https://huggingface.co/spaces/miptgirl/retention_prediction).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我也按照相同的指示将这个应用程序发布到了HuggingFace Spaces。所以你可以在[这里](https://huggingface.co/spaces/miptgirl/retention_prediction)尝试使用它。
- en: You can find the whole code for both apps in [GitHub](https://github.com/miptgirl/miptgirl_medium/tree/main/gradio_retention_app).
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以在[GitHub](https://github.com/miptgirl/miptgirl_medium/tree/main/gradio_retention_app)上找到这两个应用程序的完整代码。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we’ve gone through the basics of the Gradio library and learned
    how to build pleasant web applications with only Python.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们已经了解了Gradio库的基础知识，并学习了如何仅使用Python构建愉快的网页应用程序。
- en: 'We’ve learned a couple of approaches:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学到了几种方法：
- en: High-level `gr.Interface` class that allows you to get a working prototype quickly,
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级`gr.Interface`类，允许你快速获得一个可用的原型。
- en: More customizable way of using `gr.Blocks` when you can specify the exact layout
    you need and define complex relations between inputs and outputs.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`gr.Blocks`的更可定制化的方法，你可以指定所需的确切布局，并定义输入和输出之间的复杂关系。
- en: Thank you a lot for reading this article. I hope it was insightful to you. If
    you have any follow-up questions or comments, please leave them in the comments
    section.
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 非常感谢你阅读这篇文章。我希望这对你有所启发。如果你有任何后续问题或评论，请在评论区留言。
- en: Reference
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考
- en: This article is inspired by “Building Generative AI Applications with Gradio”
    [course](https://www.deeplearning.ai/short-courses/building-generative-ai-applications-with-gradio/).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的灵感来源于“使用Gradio构建生成式AI应用程序”[课程](https://www.deeplearning.ai/short-courses/building-generative-ai-applications-with-gradio/)。
