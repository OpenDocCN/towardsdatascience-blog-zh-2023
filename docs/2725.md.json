["```py\n# Defining the inputs\ntimestamp_var = \"week_ending_sunday\"\nbaseline_dep_var = \"ln_sales\"\nchangepoint_prior_scale_value = 0.3\nlist_ind_vars_baseline = ['event_type_1_Cultural','event_type_1_National','event_type_1_Religious','event_type_1_Sporting']\n```", "```py\n# Preparing the datasecloset\ndf_item_store = df_item_store.rename(columns={timestamp_var: 'ds', baseline_dep_var: 'y'})\ndf_item_store['ds'] = pd.to_datetime(df_item_store['ds'])\n\n# Initializing and fitting the model\nmodel = Prophet(changepoint_prior_scale= changepoint_prior_scale_value) #Default changepoint_prior_scale = 0.05\n\n# Add the regressor variables to the model\n\nfor regressor in list_ind_vars_baseline:\n    model.add_regressor(regressor)\nmodel.fit(df_item_store)\n\n# Since we are only decomposing current time series, we will use same data is forecasting that was used for modelling\n# Making predictions and extracting the level component\nforecast = model.predict(df_item_store)\nlevel_component = forecast['trend']\n```", "```py\n# Preparing the matrix to feed into optimization algorithm\nx = df_item_store_model\nx[\"intercept\"] = 1\nx = x[[\"intercept\",\"ln_sell_price\",\"ln_base_sales\"]].values.T\n# x_t = x.T\n\nactuals = x[2]\n```", "```py\nfrom scipy.optimize import minimize\n\n# Define the objective function to be minimized\ndef objective(x0):\n    return sum(((x[0]*x0[0] + x[1]*x0[1]) - actuals)**2) # (intercept*1 + elasticity*(ln_sell_price) -ln_base_sales)^2\n\n# Define the initial guess\nx0 = [1, -1]\n\n# Define the bounds for the variables\nbounds = ((None, None), (-3,-0.5))\n\n# Use the SLSQP optimization algorithm to minimize the objective function\nresult = minimize(objective, x0, bounds=bounds, method='L-BFGS-B')\n\n# Print the optimization result\nprint(result)\n\n# Saving the price elastitcity of an item in the dataframe\nprice_elasticity = result.x[1]\ndf_item_store_model[\"price_elasticity\"] = result.x[1]\n```", "```py\n# Taking latest 6 weeks average of the base sales\n#--------------------------------------------------\n\n# Ranking the date colume\ndf_item_store_optimization[\"rank\"] = df_item_store_optimization[\"ds\"].rank(ascending=False)\n\n# Subset latest 6 weeks of data\nbase_sales_df = df_item_store_optimization.loc[df_item_store_optimization[\"rank\"] <= 6].groupby(\"id\")[\"base_sales\"].mean().reset_index()\n\ndf_item_store_optimization_input.rename(columns = {\"base_sales\":\"base_units\"}, inplace=True)\n\n# Deriving the min and max bound for the sell_price\n#--------------------------------------------------\n\n# Creating UB and LB as with the range of 20%\ndf_item_store_optimization_input[\"LB_price\"] = df_item_store_optimization_input[\"sell_price\"] - (0.2*df_item_store_optimization_input[\"sell_price\"])\ndf_item_store_optimization_input[\"UB_price\"] = df_item_store_optimization_input[\"sell_price\"] + (0.2*df_item_store_optimization_input[\"sell_price\"])\n```", "```py\nfrom scipy.optimize import minimize\n\n# Define the objective function to be minimized\ndef objective(opti_price):\n\n    df_item_store_optimization_input[\"opti_price\"] = opti_price\n    df_item_store_optimization_input[\"optimized_units\"] = df_item_store_optimization_input[\"base_units\"] + (df_item_store_optimization_input[\"base_units\"]*\\\n                                                                                                        ((df_item_store_optimization_input[\"opti_price\"]/df_item_store_optimization_input[\"sell_price\"]) - 1)*\\\n                                                                                                       (df_item_store_optimization_input[\"price_elasticity\"]))\n\n    df_item_store_optimization_input[\"optimized_revenue\"] = df_item_store_optimization_input[\"optimized_units\"]*df_item_store_optimization_input[\"opti_price\"]\n\n    return -sum(df_item_store_optimization_input[\"optimized_revenue\"])\n\n# Define the initial guess\nopti_price = df_item_store_optimization_input[\"sell_price\"][0]\n\n# Define the bounds for the variables\nbounds = ((df_item_store_optimization_input[\"LB_price\"][0], df_item_store_optimization_input[\"UB_price\"][0]),)\n\n# # Use the optimization algorithm to minimize the objective function\nresult = minimize(objective, opti_price, bounds=bounds)\n\n# Print the optimization result\nprint(result)\n```"]