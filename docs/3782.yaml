- en: A Killer Fix for Scrunched Axes, Step-by-step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/unscrunch-your-axes-with-easy-multiscale-data-visualization-in-matplotlib-69a30e96c68f?source=collection_archive---------8-----------------------#2023-12-29](https://towardsdatascience.com/unscrunch-your-axes-with-easy-multiscale-data-visualization-in-matplotlib-69a30e96c68f?source=collection_archive---------8-----------------------#2023-12-29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make beautiful multi-scale plots with matplotlib in 3 easy steps.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mmore500?source=post_page-----69a30e96c68f--------------------------------)[![Matthew
    Andres Moreno](../Images/ca7da9fd9e5c744ee0ebd2aa5d979eb5.png)](https://medium.com/@mmore500?source=post_page-----69a30e96c68f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----69a30e96c68f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----69a30e96c68f--------------------------------)
    [Matthew Andres Moreno](https://medium.com/@mmore500?source=post_page-----69a30e96c68f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff226f1e0484b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funscrunch-your-axes-with-easy-multiscale-data-visualization-in-matplotlib-69a30e96c68f&user=Matthew+Andres+Moreno&userId=f226f1e0484b&source=post_page-f226f1e0484b----69a30e96c68f---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----69a30e96c68f--------------------------------)
    ¬∑8 min read¬∑Dec 29, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F69a30e96c68f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funscrunch-your-axes-with-easy-multiscale-data-visualization-in-matplotlib-69a30e96c68f&user=Matthew+Andres+Moreno&userId=f226f1e0484b&source=-----69a30e96c68f---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F69a30e96c68f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funscrunch-your-axes-with-easy-multiscale-data-visualization-in-matplotlib-69a30e96c68f&source=-----69a30e96c68f---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Large-magnitude outliers, tiny features, and sharp spikes are common frustrations
    to data visualization. All three can make visual details illegible by scrunching
    plot components into too small an area.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes a fix can be had by simply excluding unruly data. When including such
    data is chief to a question at hand, applying a log scale to axes can realign
    spacing for better separation among lower magnitude data. This approach can only
    go so far, however.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we‚Äôll take a look at another option: zoom plots, which augment
    a visualization with panels providing magnified views of areas of interest.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5370b3e871481ed907dae7499479456f.png)'
  prefs: []
  type: TYPE_IMG
- en: The visualizations we‚Äôll be building in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Zoom plots are commonly arranged as inserts into the main plot, but can also
    be combined as a lattice with the original plot. We‚Äôll delve into both.
  prefs: []
  type: TYPE_NORMAL
- en: This article provides a code-oriented tutorial on how to use *matplotlib* with
    specialized tools from the *outset* library to construct zoom plots. We‚Äôll build
    a visualization of rainfall data from Texas made available by [Evett et al. via
    the USDA](https://doi.org/10.15482/USDA.ADC/1528713). This data set comprises
    a full year of rain gauge readings from two nearby sites, taken at 15 minute intervals.
  prefs: []
  type: TYPE_NORMAL
- en: The short duration of rain events and extreme intensity of the heaviest rainfall
    complicates matters. Throwing a month‚Äôs worth of Evett et al.‚Äôs rainfall data
    into a simple line plot of reveals the visualization problem we‚Äôre up against.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/143b9139676aafd9b459dfcbac2eb94c.png)'
  prefs: []
  type: TYPE_IMG
- en: We‚Äôve certainly got some work to do to nice this up! In our visualization, we‚Äôll
    focus on recovering three particular components of the data.
  prefs: []
  type: TYPE_NORMAL
- en: the little shower around day 72,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the big rainstorm around day 82, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: light precipitation events over the course of the entire month.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To better show these details, we‚Äôll create a zoom panel for each.
  prefs: []
  type: TYPE_NORMAL
- en: Our plan is laid out, so let‚Äôs get into the code üëç
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 0: Get Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fetch the rain gauge records via the [Open Science Framework](https://osf.io).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here‚Äôs a peek at the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before moving on, some minor preparatory chores.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, we‚Äôve created more detailed column names and subset the data
    down to a single month
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Axes Grid'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our first plotting step is to initialize an `outset.OutsetG[rid](https://seaborn.pydata.org/generated/seaborn.FacetGrid.html)`
    instance to manage our latice of magnification plots. This class operates analogously
    to [seaborn‚Äôs](https://seaborn.pydata.org/generated/seaborn.FacetGrid.html) `[FacetGrid](https://seaborn.pydata.org/generated/seaborn.FacetGrid.html)`,
    which facilitates construction of standard lattice plots by breaking data across
    axes based on a categorical variable.
  prefs: []
  type: TYPE_NORMAL
- en: '`OutsetGrid` differs from `FacetGrid`, though, in that in addition to axes
    with faceted data it prepares an initial ‚Äúsource‚Äù axes containing all data together.
    Further, `OutsetGrid` includes tools to automatically generate ‚Äúmarquee‚Äù annotations
    that show how magnifications correspond to the original plot. The schematic below
    overviews `OutsetGrid`‚Äôs plotting model.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/56239047a77afcac5bc4370ecafed942.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting back to our example, we‚Äôll construct an `OutsetGrid` by providing a
    list of the main plot regions we want to magnify through the `data`kwarg. Subsequent
    kwargs provide styling and layout information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we‚Äôve specified a wider-than-tall aspect ratio for subplots and how many
    columns we want to have.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a750c4529b72b3719f598328707dbedc.png)'
  prefs: []
  type: TYPE_IMG
- en: Our axes grid is set up, we‚Äôre ready for the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Plot Content'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It‚Äôs time to put some content on our axes.
  prefs: []
  type: TYPE_NORMAL
- en: We can use area plots to co-visualize our rain gauges‚Äô readings. (For those
    unfamiliar, area plots are just line plots with a fill down to the *x* axis.)
    Applying a transparency effect will elegantly show where the gauges agree ‚Äî and
    where they don‚Äôt.
  prefs: []
  type: TYPE_NORMAL
- en: We can harness *matplotlib*‚Äôs `stackplot`to draw our overlapped area plots.
    Although designed to create plots with areas ‚Äústacked‚Äù on top of each other, we
    can get overlapped areas by splitting out two calls to the plotter‚Äî one for each
    gauge.
  prefs: []
  type: TYPE_NORMAL
- en: To draw this same content across all four axes of the grid, we will use `OutsetGrid`‚Äôs
    `broadcast` method. This method takes a plotter function as its first argument
    then calls it on each axis using any subsequent arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For better contrast against background fills, we‚Äôll also use `broadcast` to
    add white underlay around the stackplots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here‚Äôs how our plot looks before we move on to the next stage.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6607b2bd755e7b9e43f483a51cf61a9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Looking good already ‚Äî we can already see magnifications showing up on their
    proper axes at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Zoom Indicators'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it‚Äôs time to add zoom indicator boxes, a.k.a. `outset` ‚Äúmarquees,‚Äù to show
    how the scales of our auxiliary plots relate to the scale of the main plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note the kwarg passed to allow outset plots to take on different aspect ratios
    from the main plot. This way, outset data can fully expanded to take advantage
    of all available axes space.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0391d5d71e232ade77f1bed02bed12dc.png)'
  prefs: []
  type: TYPE_IMG
- en: We‚Äôre most of the way there ‚Äî just a few finishing touches left at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Et Voil√†!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our last business is to add a legend and switch out numeric *x* ticks for proper
    timestamps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With that, the plot is complete.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d66037b0c1430570d042b5fa9bd16d1.png)'
  prefs: []
  type: TYPE_IMG
- en: That‚Äôs all there is to it, a zoom plot in 3 easy steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Want Insets Instead?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can create insets by rearranging the magnification lattice axes into position
    over the main axes. Here‚Äôs how, using the *outset* library‚Äôs `inset_outsets` tool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we‚Äôve also used `outset.util.layout_inset_axes` for fine tuned
    control over inset sizing and positioning.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12894e93a41cc6bcce77d9640afac59e.png)'
  prefs: []
  type: TYPE_IMG
- en: And just like that, we‚Äôve got three zoom inserts arranged in the upper left
    hand corner.
  prefs: []
  type: TYPE_NORMAL
- en: Further Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There‚Äôs a lot more you can do with *outset*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53f3e996096a873d38afdce8cfcf3737.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition to explicit zoom area specification, the *outset* library also provides
    a *seaborn*-like data-oriented API to infer zoom inserts containing categorical
    subsets of a dataframe. Extensive styling and layout customization options are
    also available.
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs a peek at some highlights from the library‚Äôs [gallery](https://mmore500.com/outset/gallery.html)‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58eb3a43b859691b537fcef1bdcec4b8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can learn more about using *outset* in the library‚Äôs documentation at [https://mmore500.com/outset](https://mmore500.com/outset).
    In particular, be sure to check out the [quickstart guide](https://mmore500.com/outset/quickstart.html).
    The project is open source on GitHub at [mmore500/outset](https://github.com/mmore500/outset)
    *‚Äî consider leaving a ‚≠êÔ∏è!*
  prefs: []
  type: TYPE_NORMAL
- en: '*outset* can be installed via pip as `python3 -m pip install outset`.'
  prefs: []
  type: TYPE_NORMAL
- en: Authorship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tutorial is contributed by me, [Matthew Andres Moreno](https://mmore500.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/19f65ec0566492e40378b517ef0dcd91.png)'
  prefs: []
  type: TYPE_IMG
- en: I currently serve as a postdoctoral scholar at the [University of Michigan](https://umich.edu),
    where my work is supported by the Eric and Wendy Schmidt AI in Science Postdoctoral
    Fellowship, a Schmidt Futures program.
  prefs: []
  type: TYPE_NORMAL
- en: My appointment is split between the university‚Äôs Ecology and Evolutionary Biology
    Department, the Center for the Study of Complexity, and the Michigan Institute
    for Data Science.
  prefs: []
  type: TYPE_NORMAL
- en: Find me on Twitter as [@MorenoMatthewA](https://twitter.com/morenomatthewa)
    and on GitHub as [@mmore500](https://github.com/mmore500/).
  prefs: []
  type: TYPE_NORMAL
- en: '*disclosure:* I am the author of the `outset` library.'
  prefs: []
  type: TYPE_NORMAL
- en: Citations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Evett, Steven R.; Marek, Gary W.; Copeland, Karen S.; Howell, Terry A. Sr.;
    Colaizzi, Paul D.; Brauer, David K.; Ruthardt, Brice B. (2023). Evapotranspiration,
    Irrigation, Dew/frost ‚Äî Water Balance Data for The Bushland, Texas Soybean Datasets.
    Ag Data Commons.* [*https://doi.org/10.15482/USDA.ADC/1528713.*](https://doi.org/10.15482/USDA.ADC/1528713.)
    *Accessed 2023‚Äì12‚Äì26.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*J. D. Hunter, ‚ÄúMatplotlib: A 2D Graphics Environment‚Äù, Computing in Science
    & Engineering, vol. 9, no. 3, pp. 90‚Äì95, 2007\.* [*https://doi.org/10.1109/MCSE.2007.55*](https://doi.org/10.1109/MCSE.2007.55)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Marek, G. W., Evett, S. R., Colaizzi, P. D., & Brauer, D. K. (2021). Preliminary
    crop coefficients for late planted short-season soybean: Texas High Plains. Agrosystems,
    Geosciences & Environment, 4(2). [https://doi.org/10.1002/agg2.20177](https://doi.org/10.1002/agg2.20177)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Data structures for statistical computing in python, McKinney, Proceedings
    of the 9th Python in Science Conference, Volume 445, 2010\.* [*https://doi.org/*](https://doi.org/)
    *10.25080/Majora-92bf1922‚Äì00a*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Matthew Andres Moreno. (2023). mmore500/outset. Zenodo.* [*https://doi.org/10.5281/zenodo.10426106*](https://doi.org/10.5281/zenodo.10426106)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Waskom, M. L., (2021). seaborn: statistical data visualization. Journal of
    Open Source Software, 6(60), 3021,* [*https://doi.org/10.21105/joss.03021.*](https://doi.org/10.21105/joss.03021.)'
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the entire code as a gist [here](https://gist.github.com/mmore500/9bdde8fc1a943e72f1659ac795323b06)
    and as a notebook [here](https://github.com/mmore500/outset/blob/d56c3d8f93c613e4f42e4f04aa81f5daaaea1dc1/docs/example-rain.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: To install dependencies for this exercise,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*All images are works of the author.*'
  prefs: []
  type: TYPE_NORMAL
