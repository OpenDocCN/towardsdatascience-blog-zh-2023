- en: Delta Lake — Automatic Schema Evolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/delta-lake-automatic-schema-evolution-11d32bd1aa99?source=collection_archive---------1-----------------------#2023-03-10](https://towardsdatascience.com/delta-lake-automatic-schema-evolution-11d32bd1aa99?source=collection_archive---------1-----------------------#2023-03-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What happens and what you can/can’t do when merging evolutive DataFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)[![Vitor
    Teixeira](../Images/db450ae1e572a49357c02e9ba3eb4f9d.png)](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)[](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)
    [Vitor Teixeira](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6b05068b69d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdelta-lake-automatic-schema-evolution-11d32bd1aa99&user=Vitor+Teixeira&userId=6b05068b69d8&source=post_page-6b05068b69d8----11d32bd1aa99---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)
    ·5 min read·Mar 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F11d32bd1aa99&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdelta-lake-automatic-schema-evolution-11d32bd1aa99&user=Vitor+Teixeira&userId=6b05068b69d8&source=-----11d32bd1aa99---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F11d32bd1aa99&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdelta-lake-automatic-schema-evolution-11d32bd1aa99&source=-----11d32bd1aa99---------------------bookmark_footer-----------)![](../Images/1b8dfc96acde282413eda93c212cb337.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [McDobbie Hu](https://unsplash.com/@hjx518756?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In the last post, we covered the transaction log and [how to keep Delta Tables
    fast and clean](https://medium.com/p/3c9d4f9e2f5e). This time we will be covering
    automatic schema evolution in Delta tables.
  prefs: []
  type: TYPE_NORMAL
- en: Schema evolution is a critical aspect of managing data over time. It is very
    common for data sources to evolve and adapt to new business requirements, which
    might mean adding or removing fields from an existing data schema. As a data consumer,
    it is imperative a quick and agile adaption to the new characteristics of the
    data sources and automatic schema evolution allows us to seamlessly adapt to these
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will cover automatic schema evolution in [Delta](https://delta.io/)
    while using the [people10m public dataset](https://learn.microsoft.com/en-us/azure/databricks/dbfs/databricks-datasets#create-a-table-based-on-a-databricks-dataset)
    that is available on Databricks Community Edition. We’ll test adding and removing
    fields in several scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Automatic schema evolution can be enabled in two ways, depending on our workload.
    If we are doing blind appends, all we need to do is to enable ***mergeSchema***
    option:'
  prefs: []
  type: TYPE_NORMAL
