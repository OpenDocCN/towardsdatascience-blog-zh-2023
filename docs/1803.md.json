["```py\n\"activityName\" : \"Walk\",\n  \"averageHeartRate\" : 79,\n  \"calories\" : 122,\n  \"duration\" : 1280000,\n  \"steps\" : 1548,\n  \"startTime\" : \"01/06/23 01:08:57\",\n  \"elevationGain\" : 67.056,\n  \"hasGps\" : false,\n  : : : :\n  \"activityLevel\" : [\n    { \"minutes\" : 1, \"name\" : \"sedentary\"},\n    { \"minutes\" : 2, \"name\" : \"lightly\"},\n    { \"minutes\" : 6, \"name\" : \"fairly\"},\n    { \"minutes\" : 6, \"name\" : \"very\"\n  }]\n```", "```py\nCREATE OR REPLACE TABLE physical_activity\nas\nSELECT \n  startTime + INTERVAL 11 hours as activityTime\n, activityName\n, activityLevel\n, averageHeartRate\n, calories\n, duration / 60000 as duration_minutes\n, steps\n, distance\n, distanceUnit\n, tcxLink\n, source\nFROM read_json('./Physical Activity/exercise-*.json'\n, format='array'\n, timestampformat='%m/%d/%y %H:%M:%S');\n```", "```py\nactivity_df <<\n  select time_bucket(interval '1 month', activityTime) as activity_day\n  , activityName\n  , sum(duration_minutes) as duration\n  from physical_activity\n  where activityTime between '2022-09-01' and '2023-05-01'\n  group by 1, 2\n  order by 1;\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.dates import DateFormatter\nplt.figure(figsize=(15, 6))\nplt.xticks(rotation=45)\n\nmyplot =sns.barplot(data=activity_df, x=\"activity_day\", y=\"duration\", hue=\"activityName\")\nmyplot.set(xlabel='Month of', ylabel='Duration (min)', title='Monthly Activity Minutes')\nplt.legend(loc=\"upper right\", title='Activity') \nplt.show()\n```", "```py\n\"logId\" : 39958970367,\n  \"startTime\" : \"2023-01-26T22:47:30.000\",\n  \"duration\" : 26040000,\n  :: :: ::\n  \"levels\": \n    \"summary\" : {\n      {\n      \"light\": { \"count\": 30, \"minutes\": 275},\n      \"rem\": { \"count\": 4, \"minutes\": 48 },\n      \"wake\": { \"count\" : 29, \"minutes\" : 42 },\n      \"deep\" : { \"count\" : 12, \"minutes\" : 75}\n      }\n    }\n```", "```py\n\"logId\" : 18841054316,\n  \"startTime\" : \"2018-07-12T22:42:00.000\",\n  \"duration\" : 25440000,\n  :: :: ::\n  \"levels\" : {\n    \"summary\" : {\n      \"restless\" : {\"count\" : 9, \"minutes\" : 20 },\n      \"awake\" : { \"count\" : 2, \"minutes\" : 5 },\n      \"asleep\" : { \"count\" : 0,   \"minutes\" : 399}\n    }\n  }\n```", "```py\nCREATE OR REPLACE TABLE sleep_log\nas\nselect dateOfSleep \n, levels\nfrom read_json('./Sleep/sleep*.json'\n, columns={dateOfSleep: 'DATE', levels: 'JSON'}\n, format='array') ;\n```", "```py\nsleep_log_df <<\n  select dateOfSleep\n  , cast(coalesce(json_extract(levels, '$.summary.awake.minutes'), json_extract(levels, '$.summary.wake.minutes')) as int) as min_wake\n  , cast(coalesce(json_extract(levels, '$.summary.deep.minutes'), json_extract(levels, '$.summary.asleep.minutes')) as int) as min_deep\n  , cast(coalesce(json_extract(levels, '$.summary.light.minutes'), json_extract(levels, '$.summary.restless.minutes')) as int) as min_light\n  , cast(coalesce(json_extract(levels, '$.summary.rem.minutes'), 0) as int) as min_rem\n  from sleep_log\n  where dateOfSleep between '2023-04-01' and '2023-04-30'\n  order by 1;\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.dates as mdates\n\n#create stacked bar chart\nfig, axes = plt.subplots(figsize=(15,6))\nmyplot = sleep_log_df.set_index('dateOfSleep').plot(ax=axes, kind='bar', stacked=True, color=['chocolate', 'palegreen', 'green', 'darkblue'])\nmyplot.set(xlabel='Date', ylabel='Duration (min)', title='Sleep')\naxes.xaxis.set_major_locator(mdates.DayLocator(interval=7))\nplt.legend(loc=\"upper right\", labels = ['Awake', 'Deep', 'Light', 'REM']) \nplt.xticks(rotation=45)\nplt.show()\n```", "```py\n[{{\"dateTime\": \"01/25/25 13:00:07\", \"value\": {\"bpm\": 54, \"confidence\": 2}},\n  {\"dateTime\": \"01/25/25 13:00:22\", \"value\": {\"bpm\": 54, \"confidence\": 2}},\n  {\"dateTime\": \"01/25/25 13:00:37\", \"value\": {\"bpm\": 55, \"confidence\": 2}},\n  : : : : : :\n  {\"dateTime\": \"01/26/26 12:59:57\", \"value\": {\"bpm\": 55, \"confidence\": 3}\n}]\n```", "```py\n{\"dateTime\": \"01/25/23 13:00:07\", \"value\": {\"bpm\": 54, \"confidence\": 2}\n{\"dateTime\": \"01/25/23 13:00:22\", \"value\": {\"bpm\": 54, \"confidence\": 2}\n{\"dateTime\": \"01/25/23 13:00:37\", \"value\": {\"bpm\": 55, \"confidence\": 2}\n  : : : : : :\n{\"dateTime\": \"01/26/23 12:59:57\", \"value\": {\"bpm\": 55, \"confidence\": 3}\n```", "```py\nimport glob\nimport json\nimport ndjson\nimport re\n\nfor json_src_file in sorted(glob.glob('./Physical Activity/steps-*.json')):\n  json_dst_file = re.sub('\\.[a-z]*$', '.ndjson', json_src_file)\n  print(f'{json_src_file} -->  {json_dst_file}')\n  with open(json_src_file) as f_json_src_file:\n    json_dict =json.load(f_json_src_file) \n    with open(json_dst_file, 'w') as outfile:\n      ndjson.dump(json_dict, outfile)\n```", "```py\nCREATE OR REPLACE TABLE heart_rate\nas\nSELECT dateTime + INTERVAL 11 hours as hr_date_time\n, cast(value->'$.bpm' as integer) as bpm\nFROM read_json('./Physical Activity/*.ndjson'\n, columns={dateTime: 'TIMESTAMP', value: 'JSON'}\n, format='newline_delimited'\n, timestampformat='%m/%d/%y %H:%M:%S');\n```", "```py\nhr_df << \n  SELECT time_bucket(interval '1 minutes', hr_date_time) as created_day\n  ,  min(bpm) as bpm_min\n  ,  avg(bpm) as bpm_avg\n  ,  max(bpm) as bpm_max\n  FROM heart_rate\n  where hr_date_time between '2023-05-21 00:00' and '2023-05-21 23:59'\n  group by 1;\n```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nplt.figure(figsize=(15, 6))\nplt.xticks(rotation=45)\n\nmyplot = sns.lineplot(data=hr_df, x=\"created_day\", y=\"bpm_min\")\nmyplot = sns.lineplot(data=hr_df, x=\"created_day\", y=\"bpm_avg\")\nmyplot = sns.lineplot(data=hr_df, x=\"created_day\", y=\"bpm_max\")\nmyFmt = DateFormatter(\"%H:%M\")\nmyplot.xaxis.set_major_formatter(myFmt)\nmyplot.set(xlabel='Time of day', ylabel='Heart BPM', title='Heart rate')\nplt.show()\n```", "```py\n[{\n  \"dateTime\" : \"02/25/23 13:17:00\",\n  \"value\" : \"0\"\n},{\n  \"dateTime\" : \"02/25/23 13:52:00\",\n  \"value\" : \"5\"\n},{\n  \"dateTime\" : \"02/25/23 14:00:00\",\n  \"value\" : \"0\"\n},{\n:: :: ::\n},{\n  \"dateTime\" : \"03/24/23 08:45:00\",\n  \"value\" : \"15\"\n}]\n```", "```py\nsteps_df <<\nselect cast(time_bucket(interval '1 day', dateTime + INTERVAL 11 hours\t) as DATE) as activity_day\n, sum(value) as steps\nfrom read_json('./Physical Activity/steps-2023-04-27.ndjson'\n, auto_detect=True\n, format='newline_delimited'\n, timestampformat='%m/%d/%y %H:%M:%S') \ngroup by 1;\n```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nplt.figure(figsize=(15, 6))\nplt.xticks(rotation=45)\n\nmyplot = sns.barplot(data=steps_df, x=\"activity_day\", y=\"steps\")\nmyplot.set(xlabel='Day', ylabel='Steps', title='Daily steps')\nplt.show()\n```", "```py\nselect tcxLink \nfrom physical_activity\nwhere tcxLink is not null;\n```", "```py\nimport glob\nimport json\nimport ndjson\nimport xmltodict\nimport re\n\nfor xml_src_file in sorted(glob.glob('MyFitbitData/tcx/*.tcx')):\n    json_dst_file = re.sub('\\.[a-z]*$', '.ndjson', xml_src_file)\n    print(f'{xml_src_file} -->  {json_dst_file}')\n    with open(xml_src_file) as f_xml_src_file:\n        # erase file if it exists\n        open(json_dst_file, 'w') \n        data_dict = xmltodict.parse(f_xml_src_file.read())\n        # Loop over the \"laps\" in the file; roughly every 1km\n        for lap in data_dict['TrainingCenterDatabase']['Activities']['Activity']['Lap']:\n            data_dict_inner = lap['Track']['Trackpoint']\n            # append file\n            with open(json_dst_file, 'a') as outfile:\n                ndjson.dump(data_dict_inner, outfile)\n                outfile.write('\\n')\n```", "```py\nroute_df <<\nSELECT time\n, position\n, cast(json_extract_string(position, '$.LatitudeDegrees') as float) as latitude\n, cast(json_extract_string(position, '$.LongitudeDegrees') as float) as longitude\nFROM read_json('MyFitbitData/tcx/54939192717.ndjson'\n, columns={Time: 'TIMESTAMP', Position: 'JSON', AltitudeMeters: 'FLOAT', DistanceMeters: 'FLOAT', HeartRateBpm: 'JSON'}\n, format='newline_delimited'\n, timestampformat='%Y-%m-%dT%H:%M:%S.%f%z');\n```", "```py\nimport folium\n\nroute_map = folium.Map(\n    location=[-35.275, 149.129],\n    zoom_start=13,\n    tiles='openstreetmap',\n    width=1024,\n    height=600\n)\n\ncoordinates = [tuple(x) for x in route_df[['latitude', 'longitude']].to_numpy()]\nfolium.PolyLine(coordinates, weight=8, color='red').add_to(route_map)\ndisplay(route_map)\n```"]