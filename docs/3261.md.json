["```py\ncorpus_of_documents = [\n    \"Take a leisurely walk in the park and enjoy the fresh air.\",\n    \"Visit a local museum and discover something new.\",\n    \"Attend a live music concert and feel the rhythm.\",\n    \"Go for a hike and admire the natural scenery.\",\n    \"Have a picnic with friends and share some laughs.\",\n    \"Explore a new cuisine by dining at an ethnic restaurant.\",\n    \"Take a yoga class and stretch your body and mind.\",\n    \"Join a local sports league and enjoy some friendly competition.\",\n    \"Attend a workshop or lecture on a topic you're interested in.\",\n    \"Visit an amusement park and ride the roller coasters.\"\n]\n```", "```py\ndef jaccard_similarity(query, document):\n    query = query.lower().split(\" \")\n    document = document.lower().split(\" \")\n    intersection = set(query).intersection(set(document))\n    union = set(query).union(set(document))\n    return len(intersection)/len(union)\n```", "```py\ndef return_response(query, corpus):\n    similarities = []\n    for doc in corpus:\n        similarity = jaccard_similarity(query, doc)\n        similarities.append(similarity)\n    return corpus_of_documents[similarities.index(max(similarities))]\n```", "```py\nuser_prompt = \"What is a leisure activity that you like?\"\n```", "```py\nuser_input = \"I like to hike\"\n```", "```py\nreturn_response(user_input, corpus_of_documents)\n```", "```py\n'Go for a hike and admire the natural scenery.'\n```", "```py\nuser_input = \"I don't like to hike\"\n```", "```py\nreturn_response(user_input, corpus_of_documents)\n```", "```py\n'Go for a hike and admire the natural scenery.'\n```", "```py\nimport requests\nimport json\n```", "```py\nuser_input = \"I like to hike\"\nrelevant_document = return_response(user_input, corpus_of_documents)\nfull_response = []\n```", "```py\nprompt = \"\"\"\nYou are a bot that makes recommendations for activities. You answer in very short sentences and do not include extra information.\nThis is the recommended activity: {relevant_document}\nThe user input is: {user_input}\nCompile a recommendation to the user based on the recommended activity and the user input.\n\"\"\"\n```", "```py\nurl = 'http://localhost:11434/api/generate'\ndata = {\n    \"model\": \"llama2\",\n    \"prompt\": prompt.format(user_input=user_input, relevant_document=relevant_document)\n}\n```", "```py\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post(url, data=json.dumps(data), headers=headers, stream=True)\ntry:\n    count = 0\n    for line in response.iter_lines():\n        # filter out keep-alive new lines\n        # count += 1\n        # if count % 5== 0:\n        #     print(decoded_line['response']) # print every fifth token\n        if line:\n            decoded_line = json.loads(line.decode('utf-8'))\n\n            full_response.append(decoded_line['response'])\nfinally:\n    response.close()\nprint(''.join(full_response))\n```", "```py\nGreat! Based on your interest in hiking, I recommend trying out the nearby trails for a challenging and rewarding experience with breathtaking views Great! Based on your interest in hiking, I recommend checking out the nearby trails for a fun and challenging adventure.\n```", "```py\nuser_input = \"I don't like to hike\"\nrelevant_document = return_response(user_input, corpus_of_documents)\n# https://github.com/jmorganca/ollama/blob/main/docs/api.md\nfull_response = []\n```", "```py\nprompt = \"\"\"\nYou are a bot that makes recommendations for activities. You answer in very short sentences and do not include extra information.\nThis is the recommended activity: {relevant_document}\nThe user input is: {user_input}\nCompile a recommendation to the user based on the recommended activity and the user input.\n\"\"\"\nurl = 'http://localhost:11434/api/generate'\ndata = {\n    \"model\": \"llama2\",\n    \"prompt\": prompt.format(user_input=user_input, relevant_document=relevant_document)\n}\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post(url, data=json.dumps(data), headers=headers, stream=True)\ntry:\n    for line in response.iter_lines():\n        # filter out keep-alive new lines\n        if line:\n            decoded_line = json.loads(line.decode('utf-8'))\n            # print(decoded_line['response'])  # uncomment to results, token by token\n            full_response.append(decoded_line['response'])\nfinally:\n    response.close()\nprint(''.join(full_response))\n```", "```py\nSure, here is my response:\n\nTry kayaking instead! It's a great way to enjoy nature without having to hike.\n```"]