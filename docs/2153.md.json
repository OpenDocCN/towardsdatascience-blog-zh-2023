["```py\nextern crate alloc;\n\nuse alloc::boxed::Box;\nuse alloc::collections::btree_map;\nuse alloc::collections::BTreeMap;\nuse alloc::vec::Vec;\nuse alloc::{format, string::String};\nuse alloc::vec;\n```", "```py\ncargo check # check that compiles as no_std\ncargo test # check that tests, using std, still pass\n```", "```py\n[package]\n#...\nresolver = \"2\" # the default for Rust 2021+\n\n[features]\ndefault = [\"std\"]\nstd = []\nalloc = []\n```", "```py\n#![cfg_attr(not(test), no_std)]\n```", "```py\n#![cfg_attr(not(feature = \"std\"), no_std)]\n```", "```py\n#[cfg(feature = \"std\")]\nuse std::{\n    fs::File,\n    io::{self, BufRead, BufReader},\n    path::Path,\n};\n\n#[cfg(feature = \"std\")]\n#[allow(missing_docs)]\npub fn demo_read_ranges_from_file<P, T>(path: P) -> io::Result<RangeSetBlaze<T>>\nwhere\n    P: AsRef<Path>,\n    T: FromStr + Integer,\n{\n //...code not shown\n}\n```", "```py\ncargo check # std\ncargo check --features alloc --no-default-features\n```", "```py\ncargo test\n```", "```py\nrustup target add wasm32-unknown-unknown # only need to do this once\n# may find issues\ncargo check --target wasm32-unknown-unknown --features alloc --no-default-features\n```", "```py\ncargo tree --edges no-dev --format \"{p} {f}\" --features alloc --no-default-features\n```", "```py\nrange-set-blaze v0.1.6 (O:\\Projects\\Science\\wasmetc\\wasm3) alloc\n├── gen_ops v0.4.0\n├── itertools v0.10.5 default,use_alloc,use_std\n│   └── either v1.8.1 use_std\n├── num-integer v0.1.45 default,std\n│   └── num-traits v0.2.15 default,std\n│       [build-dependencies]\n│       └── autocfg v1.1.0\n│   [build-dependencies]\n│   └── autocfg v1.1.0\n├── num-traits v0.2.15 default,std (*)\n├── rand v0.8.5 alloc,default,getrandom,libc,rand_chacha,std,std_rng\n│   ├── rand_chacha v0.3.1 std\n│   │   ├── ppv-lite86 v0.2.17 simd,std\n│   │   └── rand_core v0.6.4 alloc,getrandom,std\n│   │       └── getrandom v0.2.9 std\n│   │           └── cfg-if v1.0.0\n...\n```", "```py\n[features]\ndefault = [\"std\"]\nstd = [\"getrandom/std\"]\nalloc = [\"getrandom/js\"]\n\n[dependencies]\n# ...\ngetrandom = \"0.2.10\"\n```", "```py\ncargo check --target wasm32-unknown-unknown --features alloc --no-default-features\n```", "```py\n[target.'cfg(target_arch = \"wasm32\")'.dev-dependencies]\nwasm-bindgen-test = \"0.3.37\"\n```", "```py\nwasm-pack test --chrome --headless --features alloc --no-default-features\n```", "```py\n[workspace]\nmembers = [\".\", \"tests/wasm-demo\"]\n```", "```py\n[package]\nname = \"wasm-demo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nwasm-bindgen = \"0.2\"\nrange-set-blaze = { path = \"../..\", features = [\"alloc\"], default-features = false}\n```", "```py\n#![no_std]\nextern crate alloc;\nuse alloc::{string::ToString, vec::Vec};\nuse range_set_blaze::RangeSetBlaze;\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn disjoint_intervals(input: Vec<i32>) -> JsValue {\n    let set: RangeSetBlaze<_> = input.into_iter().collect();\n    let s = set.to_string();\n    JsValue::from_str(&s)\n}\n```", "```py\n<!DOCTYPE html>\n<html>\n<body>\n    <h2>Rust WASM RangeSetBlaze Demo</h2>\n    <p>Enter a list of comma-separated integers:</p>\n    <input id=\"inputData\" type=\"text\" value=\"100,103,101,102,-3,-4\" oninput=\"callWasmFunction()\">\n    <br><br>\n    <p id=\"output\"></p>\n    <script type=\"module\">\n        import init, { disjoint_intervals } from './pkg/wasm_demo.js';\n\n        function callWasmFunction() {\n            let inputData = document.getElementById(\"inputData\").value;\n            let data = inputData.split(',').map(x => x.trim() === \"\" ? NaN : Number(x)).filter(n => !isNaN(n));\n            const typedArray = Int32Array.from(data);\n            let result = disjoint_intervals(typedArray);\n            document.getElementById(\"output\").innerHTML = result;\n        }\n        window.callWasmFunction = callWasmFunction;\n        init().then(callWasmFunction);\n    </script>\n</body>\n</html>\n```", "```py\n# from tests/wasm-demo\nwasm-pack build --target web\n```", "```py\n# from project's home directory\nrustup target add thumbv7m-none-eabi # only need to do this once\n# will likely find issues\ncargo check --target thumbv7m-none-eabi --features alloc --no-default-features\n```", "```py\n...\n[features]\ndefault = [\"std\"]\nstd = [\"itertools/use_std\", \"num-traits/std\", \"num-integer/std\"]\nalloc = [\"itertools/use_alloc\", \"num-traits\", \"num-integer\"]\n\n[dependencies]\nitertools = { version = \"0.10.1\", optional = true, default-features = false }\nnum-integer = { version = \"0.1.44\", optional = true, default-features = false }\nnum-traits = { version = \"0.2.15\", optional = true, default-features = false }\ngen_ops = \"0.4.0\"\n\n[target.'cfg(not(target_arch = \"wasm32\"))'.dev-dependencies]\n#...\nrand = \"0.8.4\"\n#...\n```", "```py\ncargo tree --edges no-dev --format \"{p} {f}\"\n```", "```py\nrange-set-blaze v0.1.6 (O:\\Projects\\Science\\wasmetc\\wasm4) default,itertools,num-integer,num-traits,std\n├── gen_ops v0.4.0\n├── itertools v0.10.5 use_alloc,use_std\n│   └── either v1.8.1 use_std\n├── num-integer v0.1.45 std\n│   └── num-traits v0.2.15 std\n│       [build-dependencies]\n│       └── autocfg v1.1.0\n│   [build-dependencies]\n│   └── autocfg v1.1.0\n└── num-traits v0.2.15 std (*)\n```", "```py\ncargo tree --edges no-dev --format \"{p} {f}\" --features alloc --no-default-features\n```", "```py\nrange-set-blaze v0.1.6 (O:\\Projects\\Science\\wasmetc\\wasm4) alloc,itertools,num-integer,num-traits\n├── gen_ops v0.4.0\n├── itertools v0.10.5 use_alloc\n│   └── either v1.8.1\n├── num-integer v0.1.45\n│   └── num-traits v0.2.15\n│       [build-dependencies]\n│       └── autocfg v1.1.0\n│   [build-dependencies]\n│   └── autocfg v1.1.0\n└── num-traits v0.2.15  (*)\n```", "```py\n# test native\ncargo test\ncargo test --features alloc --no-default-features\n# check and test WASM\ncargo check --target wasm32-unknown-unknown --features alloc --no-default-features\nwasm-pack test --chrome --headless --features alloc --no-default-features\n# check embedded\ncargo check --target thumbv7m-none-eabi --features alloc --no-default-features\n```", "```py\ntests/embedded\n├── .cargo\n│   └── config.toml\n├── Cargo.toml\n├── build.rs\n├── memory.x\n└── src\n    └── main.rs\n```", "```py\n[package]\nedition = \"2021\"\nname = \"embedded\"\nversion = \"0.1.0\"\n\n[dependencies]\nalloc-cortex-m = \"0.4.4\"\ncortex-m = \"0.6.0\"\ncortex-m-rt = \"0.6.10\"\ncortex-m-semihosting = \"0.3.3\"\npanic-halt = \"0.2.0\"# reference your local project here\nrange-set-blaze = { path = \"../..\", features = [\"alloc\"], default-features = false }\n\n[[bin]]\nname = \"embedded\"\ntest = false\nbench = false\n```", "```py\n// based on https://github.com/rust-embedded/cortex-m-quickstart/blob/master/examples/allocator.rs\n// and https://github.com/rust-lang/rust/issues/51540\n#![feature(alloc_error_handler)]\n#![no_main]\n#![no_std]\n\nextern crate alloc;\nuse alloc::string::ToString;\nuse alloc_cortex_m::CortexMHeap;\nuse core::{alloc::Layout, iter::FromIterator};\nuse cortex_m::asm;\nuse cortex_m_rt::entry;\nuse cortex_m_semihosting::{debug, hprintln};\nuse panic_halt as _;\nuse range_set_blaze::RangeSetBlaze;\n\n#[global_allocator]\nstatic ALLOCATOR: CortexMHeap = CortexMHeap::empty();\nconst HEAP_SIZE: usize = 1024; // in bytes\n\n#[entry]\nfn main() -> ! {\n    unsafe { ALLOCATOR.init(cortex_m_rt::heap_start() as usize, HEAP_SIZE) }\n\n    // test goes here\n    let range_set_blaze = RangeSetBlaze::from_iter([100, 103, 101, 102, -3, -4]);\n    assert!(range_set_blaze.to_string() == \"-4..=-3, 100..=103\");\n    hprintln!(\"{:?}\", range_set_blaze.to_string()).unwrap();\n\n    // exit QEMU/ NOTE do not run this on hardware; it can corrupt OpenOCD state\n    debug::exit(debug::EXIT_SUCCESS);\n    loop {}\n}\n\n#[alloc_error_handler]\nfn alloc_error(_layout: Layout) -> ! {\n    asm::bkpt();\n    loop {}\n}\n```", "```py\n[target.thumbv7m-none-eabi]\nrunner = \"qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel\"\n\n[build]\ntarget = \"thumbv7m-none-eabi\"\n```", "```py\n[workspace]\nmembers = [\".\", \"tests/wasm-demo\", \"tests/embedded\"]\n```", "```py\n# Be sure qemu is on path, e.g., set PATH=\"C:\\Program Files\\qemu\\\";%PATH%\ncd tests/embedded\nrustup override set nightly # to support #![feature(alloc_error_handler)]\n```", "```py\ncargo run\n```", "```py\n Finished dev [unoptimized + debuginfo] target(s) in 0.03s\n     Running `qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel O:\\Projects\\Science\\wasmetc\\wasm4\\target\\thumbv7m-none-eabi\\debug\\embedded`\nTimer with period zero, disabling\n\"-4..=-3, 100..=103\"\n```", "```py\nrustup override set stable\n```", "```py\nname: test\n\non:\n  push:\n  schedule: # run every month\n    - cron: '0 0 1 * *'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  test_rust:\n    name: Test Rust\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Rust\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: stable\n      - name: Setup WASM\n        uses: jetli/wasm-pack-action@v0.4.0\n      - name: Test Native & WASM\n        run: |\n          cargo clippy --verbose --all-targets --all-features -- -D warnings\n          cargo test --verbose\n          cargo test --features alloc --no-default-features --verbose\n          wasm-pack test --chrome --headless --features alloc --no-default-features --verbose\n      - name: Setup and check Embedded\n        run: |\n          rustup target add thumbv7m-none-eabi\n          cargo check --target thumbv7m-none-eabi --features alloc --no-default-features\n          rustup override set nightly\n          rustup target add thumbv7m-none-eabi\n          cargo check --target thumbv7m-none-eabi --features alloc --no-default-features\n          sudo apt-get update && sudo apt-get install qemu qemu-system-arm\n      - name: Test Embedded (in nightly)\n        timeout-minutes: 3\n        run: |\n          cd tests/embedded\n          cargo run\n```", "```py\n[package]\n#...\nkeywords = [\n#...\n    \"wasm\",\n    \"no_std\",\n]\ncategories = [\n#...\n    \"wasm\",\n    \"no-std\",\n] \n```", "```py\nThe crate supports no_std, WASM, and embedded projects:\n\n```", "```py\n\n *Relace VERSION with the current version.\n```"]