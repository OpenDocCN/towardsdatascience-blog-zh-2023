["```py\n:dep plotters = { version = \"^0.3.5\", default_features = false, features = [\"evcxr\", \"all_series\", \"all_elements\"] }\n```", "```py\nevcxr_figure((640, 240), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .build_cartesian_2d(0f32..5f32, 0f32..5f32)?;\n    let x_axis = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0];\n    chart.draw_series(LineSeries::new(\n        x_axis.map(|x| (x, x)),\n        &RED,\n    ))?;\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nevcxr_figure((640, 240), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .build_cartesian_2d(0f32..7f32, 0f32..7f32)?;\n\n    let x_axis = Array::range(1., 7., 1.);\n\n    chart.draw_series(LineSeries::new(\n        x_axis.into_raw_vec().into_iter().map(|x| (x, x)),\n        &RED,\n    ))?;\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nlet points_coordinates: Vec<(f32, f32)> = {\n    let x_axis = vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0];\n    let quadratic: Vec<f32> = x_axis.iter().map(|x| i32::pow(*x as i32, 3) as f32).collect::<Vec<f32>>();\n    x_axis.into_iter().zip(quadratic).collect()\n};\npoints_coordinates\n\n// Output\n\n// [(1.0, 1.0), (2.0, 8.0), (3.0, 27.0), (4.0, 64.0), (5.0, 125.0), (6.0, 216.0)]\n```", "```py\nevcxr_figure((640, 240), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .build_cartesian_2d(0f32..7f32, 0f32..220f32)?;\n\n    chart.draw_series(LineSeries::new(\n        points_coordinates.iter().map(|(x, y)| (*x, *y)),\n        &RED,\n    ))?;\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nevcxr_figure((640, 240), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .build_cartesian_2d(0f32..7f32, 0f32..220f32)?;\n\n    chart.draw_series(LineSeries::new(\n        linear_coordinates.iter().map(|(x, y)| (*x, *y)),\n        &RED,\n    ))?;\n\n    chart.draw_series(LineSeries::new(\n        quadratic_coordinates.iter().map(|(x, y)| (*x, *y)),\n        &GREEN,\n    ))?;\n\n    chart.draw_series(LineSeries::new(\n        cubic_coordinates.iter().map(|(x, y)| (*x, *y)),\n        &BLUE,\n    ))?;\n\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nlet points_coordinates: Vec<(f32, f32)> = {\n    let x_y_axes = array!([[1., 2., 3., 4.], [1., 2., 3., 4.]]);\n    let x_axis: Vec<f32> = x_y_axes.slice(s![0, 0, ..]).to_vec();\n    let y_axis: Vec<f32> = x_y_axes.slice(s![0, 1, ..]).to_vec();\n    x_axis.into_iter().zip(y_axis).collect()\n};\n\n// [(1.0, 1.0), (2.0, 2.0), (3.0, 3.0), (4.0, 4.0)]\n\nevcxr_figure((640, 240), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .build_cartesian_2d(0f32..5f32, 0f32..5f32)?;\n\n    chart.draw_series(LineSeries::new(\n        points_coordinates.iter().map(|(x, y)| (*x, *y)),\n        &RED,\n    ))?;\n\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nlet random_samples: Vec<(f32, f32)> = {\n    let x_y_axes = Array::random((2, 5), Uniform::new(0., 1.));\n    let x_axis: Vec<f32> = x_y_axes.slice(s![0, ..]).to_vec();\n    let y_axis: Vec<f32> = x_y_axes.slice(s![0, ..]).to_vec();\n    x_axis.into_iter().zip(y_axis).collect()\n};\n\nrandom_samples\n\nevcxr_figure((640, 240), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .build_cartesian_2d(0f32..1f32, 0f32..1f32)?;\n\n    chart.draw_series(LineSeries::new(\n        random_samples.iter().map(|(x, y)| (*x, *y)),\n        &RED,\n    ))?;\n\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nevcxr_figure((640, 240), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .build_cartesian_2d(0f32..1f32, 0f32..1f32)?;\n\n    chart.configure_mesh().draw()?;\n\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Plot Demo\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(0f32..1f32, 0f32..1f32)?;\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    Ok(())\n}).style(\"width: 60%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Plot Demo\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..14f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 1.);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x)),\n        &RED\n    )).unwrap()\n        .label(\"y = x\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &RED));\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x * 2.0)),\n        &GREEN\n    )).unwrap()\n        .label(\"y = 2 * x\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &GREEN));\n\n    chart.configure_series_labels()\n        .background_style(&WHITE)\n        .border_style(&BLACK)\n        .draw()?;\n\n    Ok(())\n}).style(\"width: 60%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Plot Demo\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..14f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x)),\n        &RED\n    )).unwrap()\n        .label(\"y = x\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &RED));\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x * 2.0)),\n        &GREEN\n    )).unwrap()\n        .label(\"y = 2 * x\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &GREEN));\n\n    chart.configure_series_labels()\n        .position(SeriesLabelPosition::UpperMiddle)\n        .background_style(&WHITE)\n        .border_style(&BLACK)\n        .draw()?;\n\n    Ok(())\n}).style(\"width: 60%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Plot Demo\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..14f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x)),\n        &RGBColor(0,0,255) // red: 0, green: 0, blue: 255 -> the color is blue \n    ))?;\n\n    Ok(())\n}).style(\"width: 60%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Plot Demo\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..8f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x)),\n        &RED\n    ))?;\n\n    chart.draw_series(x.map(|x| {\n        EmptyElement::at((*x, *x))\n        + Cross::new((0, 0), 2, GREEN) // coordinates relative to EmptyElement\n    }))?;\n\n    Ok(())\n}).style(\"width: 60%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Plot Demo\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..8f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x)),\n        &RED\n    ).point_size(2))?; // open circle marker\n\n    Ok(())\n}).style(\"width: 60%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Plot Demo\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..342f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, *x)),\n        RED.filled()\n    ).point_size(2)).unwrap()\n        .label(\"y = x\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &RED));\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, (*x).powi(3))),\n        BLUE\n    ).point_size(2)).unwrap()\n        .label(\"y = x ^ 3\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &BLUE));\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, (*x).powi(2))),\n        &GREEN\n    )).unwrap()\n        .label(\"y = x ^ 2\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &GREEN));\n\n    chart.draw_series(x.map(|x| {\n        EmptyElement::at((*x, (*x).powi(2)))\n        + Cross::new((0, 0), 2, WHITE) // coordinates relative to EmptyElement\n    }))?;\n\n    chart.configure_series_labels()\n        .background_style(&WHITE)\n        .border_style(&BLACK)\n        .draw()?;\n\n    Ok(())\n}).style(\"width: 60%\")\n```", "```py\nlet linear_coordinates: Vec<(f32, f32)> = {\n    let x_y_axes = array!([[1., 2., 3., 4.], [1., 2., 3., 4.]]);\n    let x_axis: Vec<f32> = x_y_axes.slice(s![0, 0, ..]).to_vec();\n    let y_axis: Vec<f32> = x_y_axes.slice(s![0, 1, ..]).to_vec();\n    x_axis.into_iter().zip(y_axis).collect()\n};\nlet quadratic_coordinates: Vec<(f32, f32)> = {\n    let x_y_axes = array!([[1., 2., 3., 4.], [1., 4., 9., 16.]]);\n    let x_axis: Vec<f32> = x_y_axes.slice(s![0, 0, ..]).to_vec();\n    let y_axis: Vec<f32> = x_y_axes.slice(s![0, 1, ..]).to_vec();\n    x_axis.into_iter().zip(y_axis).collect()\n};\n\nevcxr_figure((640, 480), |root| {\n    let sub_areas = root.split_evenly((1,2)); // 1x2 grid ( 1 row, 2 columns)\n\n    let graphs = vec![\n        (\"y = x\", linear_coordinates.clone(), &RED),\n        (\"y= x ^ 2\", quadratic_coordinates.clone(), &GREEN),\n    ];\n\n    for ((idx, area), graph) in (1..).zip(sub_areas.iter()).zip(graphs.iter()) {\n        let mut chart = ChartBuilder::on(&area)\n            .caption(graph.0, (\"Arial\", 15).into_font())\n            .x_label_area_size(40)\n            .y_label_area_size(40)\n            .build_cartesian_2d(0f32..5f32, 0f32..17f32)?;\n\n        chart.draw_series(LineSeries::new(\n            graph.1.iter().map(|(x, y)| (*x, *y)),\n            graph.2,\n        )).unwrap()\n            .label(graph.0)\n            .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &GREEN));\n\n        chart.configure_mesh()\n            .y_labels(10)\n            .light_line_style(&TRANSPARENT)\n            .disable_x_mesh()\n            .x_desc(\"x = Array::range(1., 7., 0.1);\")\n            .y_desc(graph.0)\n            .draw()?;\n    }\n\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Vertical Error Bars Plot\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..50f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, (*x as f32).powi(2))),\n        &GREEN\n    )).unwrap()\n        .label(\"y = x ^ 2\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &GREEN));\n\n    chart.draw_series(x.map(|x| {\n        ErrorBar::new_vertical(*x, (*x as f32).powi(2) - 1.5, (*x as f32).powi(2), (*x as f32).powi(2) + 1.4, RED.filled(), 2)\n    })).unwrap();\n\n    chart.configure_series_labels()\n        .background_style(&WHITE)\n        .border_style(&BLACK)\n        .draw()?;\n\n    Ok(())\n}).style(\"width: 100%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Horizontal Error Bars Plot\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(1f32..7f32, 1f32..50f32)?;\n\n    let x = Array::range(1., 7., 0.1);\n\n    chart.configure_mesh()\n        .x_desc(\"x = Array::range(1., 7., 0.1);\")\n        .y_desc(\"y = f(x)\")\n        .draw()?;\n\n    chart.draw_series(LineSeries::new(\n        x.iter().map(|x| (*x, (*x as f32).powi(2))),\n        &GREEN\n    )).unwrap()\n        .label(\"y = x ^ 2\")\n        .legend(|(x,y)| PathElement::new(vec![(x,y), (x + 20,y)], &GREEN));\n\n    chart.draw_series(x.map(|x| {\n        ErrorBar::new_horizontal((*x as f32).powi(2), *x - 0.3, *x, *x + 0.3, RED.filled(), 2)\n    })).unwrap();\n\n    chart.configure_series_labels()\n        .background_style(&WHITE)\n        .border_style(&BLACK)\n        .draw()?;\n\n    Ok(())\n}).style(\"width: 100%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    _ = root.fill(&WHITE);\n\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Uniform Distribution Scatter Plot\", (\"Arial\", 20).into_font())\n        .x_label_area_size(40)\n        .y_label_area_size(40)\n        .build_cartesian_2d(0f32..1f32, 0f32..1f32)?;\n\n    chart.configure_mesh()\n        .disable_x_mesh()\n        .disable_y_mesh()\n        .y_labels(5)\n        .x_label_formatter(&|x| format!(\"{:.1}\", *x as f64 / 100.0))\n        .y_label_formatter(&|y| format!(\"{}%\", (*y * 100.0) as u32))\n        .draw()?;\n\n    let _ = chart.draw_series(random_samples.iter().map(|(x,y)| Circle::new((*x,*y), 3, GREEN.filled())));\n\n    Ok(())\n}).style(\"width:100%\")\n```", "```py\nevcxr_figure((640, 480), |root| {\n    let mut chart = ChartBuilder::on(&root)\n        .caption(\"Histogram\", (\"Arial\", 20).into_font())\n        .x_label_area_size(50)\n        .y_label_area_size(50)\n        .build_cartesian_2d(0u32..100u32, 0f64..0.5f64)?;\n\n    chart.configure_mesh()\n        .disable_x_mesh()\n        .disable_y_mesh()\n        .y_labels(5)\n        .x_label_formatter(&|x| format!(\"{:.1}\", *x as f64 / 100.0))\n        .y_label_formatter(&|y| format!(\"{}%\", (*y * 100.0) as u32))\n        .draw()?;\n\n    let hist = Histogram::vertical(&chart)\n        .style(RED.filled())\n        .margin(0)\n        .data(random_samples.iter().map(|(x,_)| ((x*100.0) as u32, 0.01)));\n\n    let _ = chart.draw_series(hist);\n\n    Ok(())\n}).style(\"width:100%\")\n```"]