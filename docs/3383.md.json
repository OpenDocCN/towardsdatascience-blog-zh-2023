["```py\nimport s3fs\nimport random\n\nfiles = {}\nfs = s3fs.S3FileSystem()\n\ntrain_path = \"s3://bucket/train/*.parquet\"\ns3_files = [\"s3://\" + p for p in fs.glob(train_path)]\nrandom.shuffle(s3_files)\nfiles[\"train\"] = s3_files\n\nvalidation_path = \"s3://bucket/test/*.parquet\"\ns3_files = [\"s3://\" + p for p in fs.glob(validation_path)]\nrandom.shuffle(s3_files)\nfiles[\"validation\"] = s3_files\n\nfrom datasets import load_dataset\nraw_datasets = load_dataset(\"parquet\", data_files=files, streaming=False, use_auth_token = True)\nprint(raw_datasets)\n```", "```py\n!pip install -r requirements.txt \n```", "```py\npytest==7.4.2\npytest-cov==4.1.0\ndatasets==2.13.0\nhuggingface-hub==0.16.4\ntensorboard==2.14.0\nnetworkx==2.6.3\nnumpy==1.22.4\npandas==2.0.3\ns3fs==2023.5.0\ntokenizers==0.13.3\ntqdm==4.66.1\ntransformers==4.31.0\nevaluate==0.4.0\naccelerate==0.23.0\nbitsandbytes==0.41.1\ntrl==0.5.0\npeft==0.4.0\npyarrow==13.0.0\npydantic==1.10.6\ndeepspeed==0.9.0\n```", "```py\n@dataclass\nclass ModelArguments:\n    \"\"\"\n    Arguments pertaining to which model/config/tokenizer we are going to use\n    \"\"\"\n\n    model_name_or_path: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"The model checkpoint for weights initialization. Don't set if you want to train a model from scratch.\"\n            )\n        },\n    )\n    model_type: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"If training from scratch, pass a model type from the list: \" + \", \".join(MODEL_TYPES)},\n    )\n    config_overrides: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"Override some existing default config settings when a model is trained from scratch. Example: \"\n                \"n_embd=10,resid_pdrop=0.2,scale_attn_weights=false,summary_type=cls_index\"\n            )\n        },\n    )\n    config_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n    )\n    tokenizer_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n    )\n    cache_dir: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"Where do you want to store the pretrained models downloaded from huggingface.co\"},\n    )\n    use_fast_tokenizer: bool = field(\n        default=True,\n        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n    )\n    model_revision: str = field(\n        default=\"main\",\n        metadata={\"help\": \"The specific model version to use (can be a branch name, tag name or commit id).\"},\n    )\n    use_auth_token: bool = field(\n        default=None,\n        metadata={\n            \"help\": \"The `use_auth_token` argument is deprecated and will be removed in v4.34\\. Please use `token`.\"\n        },\n    )\n    trust_remote_code: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"Whether or not to allow for custom models defined on the Hub in their own modeling files. This option\"\n                \"should only be set to `True` for repositories you trust and in which you have read the code, as it will \"\n                \"execute code present on the Hub on your local machine.\"\n            )\n        },\n    )\n    low_cpu_mem_usage: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"It is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded. \"\n                \"set True will benefit LLM loading time and RAM consumption.\"\n            )\n        },\n    )\n\n    def __post_init__(self):\n        if self.config_overrides is not None and (self.config_name is not None or self.model_name_or_path is not None):\n            raise ValueError(\n                \"--config_overrides can't be used in combination with --config_name or --model_name_or_path\"\n            )\n```", "```py\n@dataclass\nclass PEFTArguments:\n    \"\"\"\n    Arguments pertaining to what training arguments we pass to trainer.\n    \"\"\"\n    lora_r: Optional[int] = field(\n        default=0, metadata={\"help\": \"LoRA bottleneck dim. This value must be > 0 to utilize LoRA.\"}\n    )\n\n    lora_alpha: Optional[int] = field(\n        default=32, metadata={\"help\": \"LoRA alpha\"}\n    )\n\n    lora_dropout: Optional[float] = field(\n        default=0.1, metadata={\"help\": \"LoRA dropout probability\"}\n    )\n\n    target_modules: Optional[str] = field(\n        default=\"\", metadata={\n            \"help\": \"Target modules to use for LoRA adaptation (must be input as a comma delimited string)\"\n        }\n    )\n```", "```py\n@dataclass\nclass DataTrainingArguments:\n    \"\"\"\n    Arguments pertaining to what data we are going to input our model for training and eval.\n    \"\"\"\n\n    dataset_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"The name of the dataset to use (via the datasets library).\"}\n    )\n    dataset_config_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"The configuration name of the dataset to use (via the datasets library).\"}\n    )\n    train_file: Optional[str] = field(default=None, metadata={\"help\": \"The input training data file (a text file).\"})\n    validation_file: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"An optional input evaluation data file to evaluate the perplexity on (a text file).\"},\n    )\n    overwrite_cache: bool = field(\n        default=False, metadata={\"help\": \"Overwrite the cached training and evaluation sets\"}\n    )\n    validation_split_percentage: Optional[int] = field(\n        default=5,\n        metadata={\n            \"help\": \"The percentage of the train set used as validation set in case there's no validation split\"\n        },\n    )\n    max_seq_length: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"The maximum total input sequence length after tokenization. Sequences longer \"\n                \"than this will be truncated.\"\n            )\n        },\n    )\n    preprocessing_num_workers: Optional[int] = field(\n        default=None,\n        metadata={\"help\": \"The number of processes to use for the preprocessing.\"},\n    )\n    mlm_probability: float = field(\n        default=0.15, metadata={\"help\": \"Ratio of tokens to mask for masked language modeling loss\"}\n    )\n    line_by_line: bool = field(\n        default=False,\n        metadata={\"help\": \"Whether distinct lines of text in the dataset are to be handled as distinct sequences.\"},\n    )\n    pad_to_max_length: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"Whether to pad all samples to `max_seq_length`. \"\n                \"If False, will pad the samples dynamically when batching to the maximum length in the batch.\"\n            )\n        },\n    )\n    max_train_samples: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"For debugging purposes or quicker training, truncate the number of training examples to this \"\n                \"value if set.\"\n            )\n        },\n    )\n    max_eval_samples: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"For debugging purposes or quicker training, truncate the number of evaluation examples to this \"\n                \"value if set.\"\n            )\n        },\n    )\n\n    streaming: bool = field(default=False, metadata={\"help\": \"Enable streaming mode\"})\n    additional_special_tokens: Optional[str] = field(\n        default=\"<datasource>,</datasource>,<prefix>,</prefix>,<username>,</username>,<accountId>,</accountId>,<session>,</session>,<event>,</event>\", \n        metadata={\"help\": \"Comma seperated list of special tokens to add to tokenizer.\"}\n    )\n\n    additional_tokens: Optional[str] = field(\n        default=None, metadata={\"help\": \"Comma seperated list of additional tokens to add to tokenizer.\"}\n    )\n\n    masking_strategy: Optional[str] = field(\n        default=\"word\", metadata={\n            \"help\": (\n                \"Type of masking strategy used for MLM. \"\n                \"Note that white_space strategy only supports BPE tokenizer (e.g., gpt2, roberta).\"\n            ),\n            \"choices\": [\"word\", \"token\", \"span\", \"white_space\", \"token_sep\"]\n        }\n    )\n\n    masking_span_p: Optional[float] = field(\n        default=0.2, metadata={\"help\": \"The masking span length follows a geometric distribution, p is the parameter.\"}\n    )\n\n    masking_sep_token: Optional[str] = field(\n        default=\":\", metadata={\"help\": \"Token used to divide input into different spans for MLM.\"}\n    )\n\n    masking_prefix_flag: Optional[bool] = field(\n        default=False, metadata={\"help\": \"Mask entities in the prefix as whole.\"}\n    )\n\n    entity_sep: Optional[str] = field(\n        default=\"<datasource>,</datasource>,<username>,</username>,<accountId>,</accountId>\", \n        metadata={\n            \"help\": (\n                \"Comma seperated list of separator tokens, used when masking_prefix_flag = True.\"\n                \"The format is: 'start_token_1,end_token_1,start_token_2,end_token_2'\"\n            )\n        }\n    )\n\n    def __post_init__(self):\n        if self.streaming:\n            require_version(\"datasets>=2.0.0\", \"The streaming feature requires `datasets>=2.0.0`\")\n```", "```py\nmodel_args = ModelArguments(model_name_or_path='microsoft/deberta-base')\n\ndata_args = DataTrainingArguments(masking_strategy = 'token_sep', \n                                masking_span_p = 0.2,\n                                masking_sep_token = ',',\n                                masking_prefix_flag= True,\n                                streaming = False,\n                                mlm_probability = 0.15,\n                                pad_to_max_length = False,\n                                line_by_line = True,\n                                additional_tokens = None,\n                                 )\n\ntraining_args = TrainingArguments(output_dir = './output', \n                                  max_steps= 2000,\n                                  eval_steps= 200,\n                                  logging_steps=200,\n                                  do_train= True,\n                                  do_eval= True,\n                                  evaluation_strategy='steps',\n                                  remove_unused_columns = False,\n                                  label_names = [\"labels\"],\n                                  per_device_train_batch_size = 4,\n                                  per_device_eval_batch_size = 4,\n                                  overwrite_output_dir = True \n                                 )\n```", "```py\ntokenizer_kwargs = {\n        \"cache_dir\": model_args.cache_dir,\n        \"use_fast\": model_args.use_fast_tokenizer,\n        \"revision\": model_args.model_revision,\n        \"use_auth_token\": model_args.use_auth_token,\n        \"trust_remote_code\": model_args.trust_remote_code,\n    }\n\ntokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, **tokenizer_kwargs)\n\ntokenizer.add_special_tokens({'additional_special_tokens': data_args.additional_special_tokens.split(\",\")})\n\nif data_args.additional_tokens:\n    tokenizer.add_tokens(data_args.additional_tokens.split(\",\")) \n```", "```py\nconfig_kwargs = {\n        \"cache_dir\": model_args.cache_dir,\n        \"revision\": model_args.model_revision,\n        \"use_auth_token\": model_args.use_auth_token,\n        \"trust_remote_code\": model_args.trust_remote_code,\n    }\n\nconfig = AutoConfig.from_pretrained(model_args.model_name_or_path, **config_kwargs)\n\nmodel = AutoModelForMaskedLM.from_pretrained(\n            model_args.model_name_or_path,\n            from_tf=bool(\".ckpt\" in model_args.model_name_or_path),\n            config=config,\n            cache_dir=model_args.cache_dir,\n            revision=model_args.model_revision,\n            use_auth_token=model_args.use_auth_token,\n            trust_remote_code=model_args.trust_remote_code,\n            low_cpu_mem_usage=model_args.low_cpu_mem_usage,\n        )\n\nembedding_size = model.get_input_embeddings().weight.shape[0]\nif len(tokenizer) > embedding_size:\n    model.resize_token_embeddings(len(tokenizer))\n```", "```py\n# Check if tokenizer.model_max_length is undefined\nif tokenizer.model_max_length > 1e9:\n    tokenizer.model_max_length = model.config.max_position_embeddings\n```", "```py\n tokenized_datasets = raw_datasets.map(\n      lambda example: tokenizer(example['text']),\n      batched=True,\n      remove_columns=[\"text\"],\n  ) \n```", "```py\nl = []\nfor item in tokenized_datasets['train']:\n    l.append(len(item['input_ids']))\nprint(set(l))\n```", "```py\n2243,1204, 2310, 2402, 645, 2319, ....\n```", "```py\n data_args.max_seq_length = tokenizer.model_max_length\nmax_seq_length = data_args.max_seq_length\n\n# Main data processing function that will concatenate all texts from our dataset and generate chunks of\n# max_seq_length.\ndef group_texts(examples):\n    # Concatenate all texts.\n    concatenated_examples = {k: list(chain(*examples[k])) for k in examples.keys()}\n    total_length = len(concatenated_examples[list(examples.keys())[0]])\n    # We drop the small remainder, and if the total_length < max_seq_length  we exclude this batch and return an empty dict.\n    # We could add padding if the model supported it instead of this drop, you can customize this part to your needs.\n    total_length = (total_length // max_seq_length) * max_seq_length\n    # Split by chunks of max_len.\n    result = {\n        k: [t[i : i + max_seq_length] for i in range(0, total_length, max_seq_length)]\n        for k, t in concatenated_examples.items()\n    }\n    return result\n\ntokenized_datasets = tokenized_datasets.map(\n    group_texts,\n    batched=True,\n)\n```", "```py\nl = []\nfor item in tokenized_datasets['train']:\n    l.append(len(item['input_ids']))\nprint(set(l))\n```", "```py\n@dataclass    \nclass MaskingDataCollator:\n    tokenizer: PreTrainedTokenizerBase\n    wwm_probability: Optional[float] = 0.2\n\n    def __call__(self, features: List[Dict[str, Any]]) -> Dict[str, Any]:\n        for i, feature in enumerate(features):\n            mask_ids = feature.pop(\"mask_ids\")\n\n            # word_id to token index mapping\n            mapping = self.word_mapping(mask_ids)\n            # Randomly mask words\n            if \"labels\" not in feature.keys():\n                labels = feature[\"input_ids\"].copy()\n            else:\n                labels = feature[\"labels\"]\n            feature[\"labels\"], _ = self.random_masking_whole_word(mapping, feature[\"input_ids\"], labels, self.tokenizer.mask_token_id)\n\n        batch = default_data_collator(features)\n        return batch\n\n    def word_mapping(self, mask_ids):\n        # Create a map between words and corresponding token start and end inds\n        mapping = defaultdict(list)\n        current_word_index = -1\n        current_word = None\n        for i, word_id in enumerate(mask_ids):\n            if word_id is not None:\n                if word_id != current_word:\n                    current_word = word_id\n                    current_word_index += 1\n                mapping[current_word_index].append(i)\n\n        return mapping\n\n    def random_masking_whole_word(self, mapping, input_ids, labels, mask_token_id):\n\n        mask = np.random.binomial(1, self.wwm_probability, size=len(mapping))\n\n        # masked at least one mask_id\n        if sum(mask) == 0:\n            rn_i = random.choice(range(len(mask)))\n            mask[rn_i] = 1\n\n        new_labels = [-100] * len(labels)\n\n        for word_id in np.where(mask)[0]:\n            word_id = word_id.item()\n            for idx in mapping[word_id]:\n                new_labels[idx] = labels[idx]\n                input_ids[idx] = mask_token_id\n        return new_labels, input_ids\n\ndata_collator = MaskingDataCollator(\n        tokenizer, \n        wwm_probability=data_args.mlm_probability\n    )\n```", "```py\npeft_args = PEFTArguments()\n\npeft_config = None\nif peft_args.lora_r > 0:\n    logger.info(\"Using LoRA for model adaptation...\")\n    peft_config = LoraConfig(\n        r=peft_args.lora_r,\n        lora_alpha=peft_args.lora_alpha,\n        lora_dropout=peft_args.lora_dropout,\n        target_modules=peft_args.target_modules.split(\",\") if peft_args.target_modules \n        else TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING[model.config.model_type]\n    )\n\n    model = get_peft_model(model, peft_config)\n```", "```py\ntrain_dataset = tokenized_datasets[\"train\"]\neval_dataset = tokenized_datasets[\"validation\"]\n\ndef compute_metrics(eval_preds):\n    preds, labels = eval_preds\n    labels = labels.reshape(-1)\n    preds = preds.reshape(-1)\n    # this is to ensure we compute loss on masked entities\n    mask = labels != -100\n    labels = labels[mask]\n    preds = preds[mask]\n    return metric.compute(predictions=preds, references=labels)\n```", "```py\ndef preprocess_logits_for_metrics(logits, labels):\n    if isinstance(logits, tuple):\n        # Depending on the model and config, logits may contain extra tensors,\n        # like past_key_values, but logits always come first\n        logits = logits[0]\n    return logits.argmax(dim=-1)\n```", "```py\n# Initialize our Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n    eval_dataset=eval_dataset,\n    tokenizer=tokenizer,\n    data_collator=data_collator,\n    compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,\n    preprocess_logits_for_metrics=preprocess_logits_for_metrics\n    if training_args.do_eval and not is_torch_tpu_available()\n    else None,\n)\n```", "```py\ntrain_result = trainer.train()\ntrainer.save_model()  # Saves the tokenizer too for easy upload\nmetrics = train_result.metrics\n\nif not data_args.streaming:\n    max_train_samples = (\n        data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)\n    )\n    metrics[\"train_samples\"] = min(max_train_samples, len(train_dataset))\nelse:\n    metrics[\"max_steps\"] = training_args.max_steps\n\ntrainer.log_metrics(\"train\", metrics)\ntrainer.save_metrics(\"train\", metrics)\ntrainer.save_state()\n```", "```py\nTrainOutput(global_step=2000, training_loss=3.754445343017578, metrics={'train_runtime': 794.2916, 'train_samples_per_second': 10.072, 'train_steps_per_second': 2.518, 'total_flos': 2454016352256000.0, 'train_loss': 3.754445343017578, 'epoch': 0.78, 'train_samples': 10261})\n```"]