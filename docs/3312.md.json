["```py\n~ $ mkdir chatapp\n~ $ cd chatapp\n```", "```py\nchatapp $ python3 -m venv .venv\n$ source .venv/bin/activate\n```", "```py\nchatapp $ pip install reflex\nchatapp $ reflex init\n────────────────────────────────── Initializing chatapp ───────────────────────────────────\nSuccess: Initialized chatapp\nchatapp $ ls\nassets          chatapp         rxconfig.py     .venv\n```", "```py\nchatapp $ reflex run\n─────────────────────────────────── Starting Reflex App ───────────────────────────────────\nCompiling:  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00\n─────────────────────────────────────── App Running ───────────────────────────────────────\nApp running at: http://localhost:3000\n```", "```py\n# chatapp.py\n\nimport reflex as rx\n\ndef index() -> rx.Component:\n    return rx.container(\n        rx.box(\n            \"What is Reflex?\",\n            # The user's question is on the right.\n            text_align=\"right\",\n        ),\n        rx.box(\n            \"A way to build web apps in pure Python!\",\n            # The answer is on the left.\n            text_align=\"left\",\n        ),\n    )\n\n# Add state and page to the app.\napp = rx.App()\napp.add_page(index)\napp.compile()\n```", "```py\ndef qa(question: str, answer: str) -> rx.Component:\n    return rx.box(\n        rx.box(question, text_align=\"right\"),\n        rx.box(answer, text_align=\"left\"),\n        margin_y=\"1em\",\n    )\n\ndef chat() -> rx.Component:\n    qa_pairs = [\n        (\n            \"What is Reflex?\",\n            \"A way to build web apps in pure Python!\",\n        ),\n        (\n            \"What can I make with it?\",\n            \"Anything from a simple website to a complex web app!\",\n        ),\n    ]\n    return rx.box(\n        *[\n            qa(question, answer)\n            for question, answer in qa_pairs\n        ]\n    )\n\ndef index() -> rx.Component:\n    return rx.container(chat())\n```", "```py\ndef action_bar() -> rx.Component:\n    return rx.hstack(\n        rx.input(placeholder=\"Ask a question\"),\n        rx.button(\"Ask\"),\n    )\n\ndef index() -> rx.Component:\n    return rx.container(\n        chat(),\n        action_bar(),\n    )\n```", "```py\n# style.py\n\n# Common styles for questions and answers.\nshadow = \"rgba(0, 0, 0, 0.15) 0px 2px 8px\"\nchat_margin = \"20%\"\nmessage_style = dict(\n    padding=\"1em\",\n    border_radius=\"5px\",\n    margin_y=\"0.5em\",\n    box_shadow=shadow,\n    max_width=\"30em\",\n    display=\"inline-block\",\n)\n# Set specific styles for questions and answers.\nquestion_style = message_style | dict(\n    bg=\"#F5EFFE\", margin_left=chat_margin\n)\nanswer_style = message_style | dict(\n    bg=\"#DEEAFD\", margin_right=chat_margin\n)\n# Styles for the action bar.\ninput_style = dict(\n    border_width=\"1px\", padding=\"1em\", box_shadow=shadow\n)\nbutton_style = dict(bg=\"#CEFFEE\", box_shadow=shadow)\n```", "```py\n# chatapp.py\nimport reflex as rx\n\nfrom chatapp import style\n\ndef qa(question: str, answer: str) -> rx.Component:\n    return rx.box(\n        rx.box(\n            rx.text(question, style=style.question_style),\n            text_align=\"right\",\n        ),\n        rx.box(\n            rx.text(answer, style=style.answer_style),\n            text_align=\"left\",\n        ),\n        margin_y=\"1em\",\n    )\n\ndef chat() -> rx.Component:\n    qa_pairs = [\n        (\n            \"What is Reflex?\",\n            \"A way to build web apps in pure Python!\",\n        ),\n        (\n            \"What can I make with it?\",\n            \"Anything from a simple website to a complex web app!\",\n        ),\n    ]\n    return rx.box(\n        *[\n            qa(question, answer)\n            for question, answer in qa_pairs\n        ]\n    )\n\ndef action_bar() -> rx.Component:\n    return rx.hstack(\n        rx.input(\n            placeholder=\"Ask a question\",\n            style=style.input_style,\n        ),\n        rx.button(\"Ask\", style=style.button_style),\n    )\n\ndef index() -> rx.Component:\n    return rx.container(\n        chat(),\n        action_bar(),\n    )\n\napp = rx.App()\napp.add_page(index)\napp.compile()\n```", "```py\n# state.py\n\nimport reflex as rx\n\nclass State(rx.State):\n    # The current question being asked.\n    question: str\n    # Keep track of the chat history as a list of (question, answer) tuples.\n    chat_history: list[tuple[str, str]]\n    def answer(self):\n        # Our chatbot is not very smart right now...\n        answer = \"I don't know!\"\n        self.chat_history.append((self.question, answer))\n```", "```py\n# chatapp.py\n\nfrom chatapp.state import State\n\n...\n\ndef chat() -> rx.Component:\n    return rx.box(\n        rx.foreach(\n            State.chat_history,\n            lambda messages: qa(messages[0], messages[1]),\n        )\n    )\n\n...\n\ndef action_bar() -> rx.Component:\n    return rx.hstack(\n        rx.input(\n            placeholder=\"Ask a question\",\n            on_change=State.set_question,\n            style=style.input_style,\n        ),\n        rx.button(\n            \"Ask\",\n            on_click=State.answer,\n            style=style.button_style,\n        ),\n    )\n```", "```py\n# chatapp.py\n\ndef action_bar() -> rx.Component:\n    return rx.hstack(\n        rx.input(\n            value=State.question,\n            placeholder=\"Ask a question\",\n            on_change=State.set_question,\n            style=style.input_style,\n        ),\n        rx.button(\n            \"Ask\",\n            on_click=State.answer,\n            style=style.button_style,\n        ),\n    )\n```", "```py\n# state.py\n\ndef answer(self):\n    # Our chatbot is not very smart right now...\n    answer = \"I don't know!\"\n    self.chat_history.append((self.question, answer))\n    self.question = \"\"\n```", "```py\n# state.py\nimport asyncio\n\n...\n\nasync def answer(self):\n    # Our chatbot is not very smart right now...\n    answer = \"I don't know!\"\n    self.chat_history.append((self.question, \"\"))\n    # Clear the question input.\n    self.question = \"\"\n    # Yield here to clear the frontend input before continuing.\n    yield\n    for i in range(len(answer)):\n        # Pause to show the streaming effect.\n        await asyncio.sleep(0.1)\n        # Add one letter at a time to the output.\n        self.chat_history[-1] = (\n            self.chat_history[-1][0],\n            answer[: i + 1],\n        )\n        yield\n```", "```py\n# state.py\n\nimport os\nimport openai\n\nopenai.api_key = os.environ[\"OPENAI_API_KEY\"]\n\n...\n\ndef answer(self):\n    # Our chatbot has some brains now!\n    session = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\"role\": \"user\", \"content\": self.question}\n        ],\n        stop=None,\n        temperature=0.7,\n        stream=True,\n    )\n\n    # Add to the answer as the chatbot responds.\n    answer = \"\"\n    self.chat_history.append((self.question, answer))\n\n    # Clear the question input.\n    self.question = \"\"\n    # Yield here to clear the frontend input before continuing.\n    yield\n\n    for item in session:\n        if hasattr(item.choices[0].delta, \"content\"):\n            answer += item.choices[0].delta.content\n            self.chat_history[-1] = (\n                self.chat_history[-1][0],\n                answer,\n            )\n            yield\n```", "```py\n$ reflex run\n```", "```py\n$ reflex deploy\n```"]