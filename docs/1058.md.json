["```py\ndef _objective(t, dtrain, dval, early_stopping):\n    params = {\n        'boosting_type': t.suggest_categorical(['gbdt', 'goss']),\n        'learning_rate': t.suggest_float(0.01, 0.5, log=True),\n        'min_split_gain': t.suggest_float(0.00001, 2, log=True),\n        'num_leaves': t.suggest_int(2, 1024, log=True),\n        'max_depth': t.suggest_int(1, 15),\n        'min_child_samples': t.suggest_int(2, 100, log=True),\n        'bagging_freq': t.suggest_categorical([0, 1]),\n        'pos_bagging_fraction': t.suggest_float(0, 1),\n        'neg_bagging_fraction': t.suggest_float(0, 1),\n        'reg_alpha': t.suggest_float(0.00001, 0.1, log=True),\n        'reg_lambda': t.suggest_float(0.00001, 0.1, log=True),\n    }\n    model = lgb.train(\n        **params, dtrain,\n        num_boost_round=(\n            4000 if early_stopping\n            else trial.suggest_int('num_boost_rounds', 10, 4000)\n        ),\n        valid_sets=dval if early_stopping else None,\n        callbacks=(\n            [lgb.early_stopping(stopping_rounds=100)] if early_stopping\n            else None))\n```"]