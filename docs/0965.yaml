- en: Automate ML model retraining and deployment with MLflow in Databricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/automate-ml-model-retraining-and-deployment-with-mlflow-in-databricks-ad29f6146f80?source=collection_archive---------2-----------------------#2023-03-15](https://towardsdatascience.com/automate-ml-model-retraining-and-deployment-with-mlflow-in-databricks-ad29f6146f80?source=collection_archive---------2-----------------------#2023-03-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Efficiently manage and deploy production models with MLflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mc12338?source=post_page-----ad29f6146f80--------------------------------)[![Matt
    Collins](../Images/b28ac8100d6fb287e3fa6926eec7939a.png)](https://medium.com/@mc12338?source=post_page-----ad29f6146f80--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ad29f6146f80--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ad29f6146f80--------------------------------)
    [Matt Collins](https://medium.com/@mc12338?source=post_page-----ad29f6146f80--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd1970f1605f1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fautomate-ml-model-retraining-and-deployment-with-mlflow-in-databricks-ad29f6146f80&user=Matt+Collins&userId=d1970f1605f1&source=post_page-d1970f1605f1----ad29f6146f80---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ad29f6146f80--------------------------------)
    ·8 min read·Mar 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fad29f6146f80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fautomate-ml-model-retraining-and-deployment-with-mlflow-in-databricks-ad29f6146f80&user=Matt+Collins&userId=d1970f1605f1&source=-----ad29f6146f80---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fad29f6146f80&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fautomate-ml-model-retraining-and-deployment-with-mlflow-in-databricks-ad29f6146f80&source=-----ad29f6146f80---------------------bookmark_footer-----------)![](../Images/f266700c7e3af4a587419263bee77657.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Karsten Winegeart](https://unsplash.com/es/@karsten116?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Getting a working machine learning model deployed for user consumption is a
    great achievement. We see [statistics](https://www.gartner.com/en/newsroom/press-releases/2018-02-13-gartner-says-nearly-half-of-cios-are-planning-to-deploy-artificial-intelligence)
    showing that machine learning models often fail to make it into production, whether
    this is due to insufficient data, lack of direction or other reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Models which do make it into production still face many challenges as they require
    consistent attention in the forms of monitoring and retraining to ensure the insights
    they aim to provide are up-to-date and accurate over time.
  prefs: []
  type: TYPE_NORMAL
- en: This blog aims to help streamline the model retraining process with MLflow while
    providing background on the recommended approach.
  prefs: []
  type: TYPE_NORMAL
- en: Why retrain a production model?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Model retraining is the process of giving our production model access to the
    latest data to run up-to-date predictions. Depending on the sophistication of
    our system, we might perform this retraining under various scenarios, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At regular intervals: Such as on a weekly schedule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upon certain criteria: [Data drift](https://www.databricks.com/blog/2019/09/18/productionizing-machine-learning-from-deployment-to-drift-detection.html)
    hitting a threshold condition may result in us retraining to accommodate a changing
    data landscape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upon registration of a new model: Our Data Scientists have found a more accurate
    model which has been approved to go live.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MLflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Model retraining falls under the Machine Learning Operations (MLOps) process
    and MLflow is a great tool that helps simplify this in an iterative fashion, allowing
    smoother delivery with reproducible executions.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to MLflow there are many detailed resources available online,
    but I recommend starting with their [website](https://mlflow.org/) to see their
    offerings — I’ve included the components offered below as an introduction.
  prefs: []
  type: TYPE_NORMAL
- en: We will be making use of the MLflow [Tracking](https://mlflow.org/docs/latest/tracking.html)
    component to log our retraining experiment runs and the [Model Registry](https://mlflow.org/docs/latest/model-registry.html)
    component to ensure deployment is seamless and mitigates the need for downtime
    in our production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-requisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we’re talking about retraining, we’ve made the assumption that you already
    have a model (and the data you wish to predict against) in production. If you
    do not, and you wish to use MLflow to achieve this, I’ve provided [this notebook](https://github.com/MattPCollins/MLflowRetrainModel/blob/main/MLflowDeployModel.ipynb)
    to get started. We’ll review this process and code shortly in the “Deploy an initial
    model to production” section.
  prefs: []
  type: TYPE_NORMAL
- en: Out of convenience, we’ll be using a Databricks workspace with ML compute cluster
    since this provides us with a managed environment with all of the required packages
    installed, the MLflow interface and embedded and a spark environment to assist
    with any big data queries through parallel processing, if required.
  prefs: []
  type: TYPE_NORMAL
- en: Databricks is available through most cloud providers — I’ll be using Microsoft
    Azure. If running MLflow locally, then ensure all of the relevant packages are
    installed and an MLflow tracking server is set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve broken down these requirements below:'
  prefs: []
  type: TYPE_NORMAL
- en: A Databricks workspace running a ML compute cluster, simulating a production
    environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source data: In production, I would expect this to be tables in our Data Warehouse
    or Lake. We’ll just use the Diabetes dataset in the Scikit-learn package for this
    example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An existing Machine Learning model which we will save as a production model
    in the Model Registry (code sample below).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy an initial model to production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code block shows an experiment run for a Ridge Regression model.
    For the full notebook, see this link in my [GitHub Repo](https://github.com/MattPCollins/MLflowRetrainModel/blob/main/MLflowDeployModel.ipynb).
    This example is designed to provide you with a “production” model which you can
    base the model retraining process against.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use the MLflow API commands to push this to production in your Model Registry.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finding the right approach: Deploy Code vs Deploy Model'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand what our retraining notebook might look like, we need to understand
    the approach taken. Microsoft discusses two deployment patterns which I’ve summarised
    below. More in-depth information can be found [here](https://learn.microsoft.com/en-us/azure/databricks/machine-learning/mlops/deployment-patterns).
  prefs: []
  type: TYPE_NORMAL
- en: Deploy Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ML artifacts are packaged as code from deployment to production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version control and testing can be implemented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The deployment environment is reproduced in production, reducing the risk of
    production issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Production models are trained against the production data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional deployment complexity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Standalone artifacts (Machine Learning model) are deployed to production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexibility to deploy to different types of environments or integrate with different
    services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplicity in the deployment process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast deployment time with easy versioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes and enhancements to Feature engineering, monitoring, etc need to be
    managed separately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We’ll be taking the recommended approach of Deploying Code. This lends itself
    nicely to what we are trying to achieve: we can take our Production-ready, stakeholder-approved
    script and use this for the retraining process.'
  prefs: []
  type: TYPE_NORMAL
- en: '**We’re not changing any parameter values in our model: we are simply retraining
    the model against the latest data.**'
  prefs: []
  type: TYPE_NORMAL
- en: Start by setting the experiment and model that we’re retraining.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Load the dataset. As mentioned, we’re simplifying this requirement by using
    the Diabetes dataset from the scikit-learn package. In reality, this might be
    a select statement against a table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this case we’re simulating this model retraining occurring after some data
    change, possibly a few days later. To simulate this time delta, the current registered
    production model has been trained on a subset of the data (1.) and we’re using
    the full dataset to show further data being added over time (2.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that there might be a use case to remove some historical data from your
    training data set, should data drift be detected.
  prefs: []
  type: TYPE_NORMAL
- en: Once loaded, kick off an MLflow run and start training. This will follow the
    usual process of splitting the data, training, predicting and comparing to the
    test dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Validation Criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is good practice to use validation criteria to determine if our new model
    performs at least as well as the existing one before replacing it in production.
    This process helps to ensure the new model is reliable and minimises the risk
    of performance degradation. In this case, I’m simply using the mse, rmse and r2
    values as my validation metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve logged a new run, we can compare this to the run which is currently
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b63dc08d79e4bdf3e80de59ebdf1b61e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Metrics DataFrame: Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple example where our model uses a Ridge regression algorithm.
    In reality, our model may be composite and use a hyperparameter search space,
    comparing multiple algorithms and automatically deciding the “best” one to use
    under complex validation criteria. The same concept can be applied, and the successful
    model published to the Model Registry for consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Promote in the Model Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can then use the following code to automatically move this run to Production
    in the Model Registry, upon meeting these validation criteria specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In our case, all validation criteria were hit so the model has been pushed to
    production in the model registry. Any utilisation of the model, batch or real-time,
    will now be against this version.
  prefs: []
  type: TYPE_NORMAL
- en: You will hopefully start to notice the benefit of the Deploy Code approach at
    this point, as it gives us complete control over the scripts used to retrain a
    model and also accommodate changing validation criteria for automatic redeployment.
  prefs: []
  type: TYPE_NORMAL
- en: '**The full notebook can be accessed in my** [**GitHub Repository**](https://github.com/MattPCollins/MLflowRetrainModel/blob/main/MLflowRetrainModel.ipynb)
    **if you wish to see the code in full.**'
  prefs: []
  type: TYPE_NORMAL
- en: Utilisation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can continue using inference pipelines & REST API calls to access the model
    as before, being careful to update any changes to schema if this has taken place.
  prefs: []
  type: TYPE_NORMAL
- en: This is something we can factor into our deployment code to the model registry
    as a reminder to prevent this from being a breaking change and any end-user impact.
  prefs: []
  type: TYPE_NORMAL
- en: Notes/Considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of MLflow 2.0, [Recipes](https://www.mlflow.org/docs/latest/recipes.html)
    is an experimental feature (at the time of writing) which provides a streamlined
    approach to some of this functionality, with particular reference to the validation
    criteria. I expect further development of Recipes to give users a well-structured
    and repeatable approach for the model deployment and retraining elements of the
    ML lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth noting that MLOps is still relatively new and we certainly
    see that in the variety of approaches different businesses and users are taking
    in implementing ML solutions. Standardising the approach is still a work in progress,
    with additional components such as explainability and monitoring being more prevalent
    in the lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading and let me know if you have any questions.
  prefs: []
  type: TYPE_NORMAL
