["```py\nimport librosa as lr\nimport IPython\n\nsignal, sr = lr.load('./transformed/common_voice_en_100040.wav', res_type='kaiser_fast') #load signal\n\nIPython.display.Audio(signal, rate=sr)\n```", "```py\nSNRs = (5,10,100,1000) #Signal-to-noise ratio: max amplitude over noise std\n\nnoisy_signal = {}\n\nfor snr in SNRs:\n\n    noise_std = max(abs(signal))/snr #get noise std\n    noise =  noise_std*np.random.randn(len(signal),) #generate noise with given std\n\n    noisy_signal[snr] = signal+noise\n\nIPython.display.display(IPython.display.Audio(noisy_signal[5], rate=sr))\nIPython.display.display(IPython.display.Audio(noisy_signal[1000], rate=sr))\n```", "```py\nIPython.display.Audio(signal, rate=sr*1.5)\n```", "```py\nstretching_factor = 1.3\n\nsignal_stretched = stretch_wo_loop(signal, stretching_factor)\nIPython.display.Audio(signal_stretched, rate=sr)\n```", "```py\nIPython.display.Audio(signal_stretched, rate=sr/stretching_factor)\n```", "```py\nmax_mask_length = 0.3 #maximum mask duration, proportion of signal length\n\nL = len(signal)\n\nmask_length = int(L*np.random.rand()*max_mask_length) #randomly choose mask length\nmask_start = int((L-mask_length)*np.random.rand()) #randomly choose mask position\n\nmasked_signal = signal.copy()\nmasked_signal[mask_start:mask_start+mask_length] = 0\n\nIPython.display.Audio(masked_signal, rate=sr)\n```", "```py\nother_signal, sr = lr.load('./common_voice_en_100038.wav', res_type='kaiser_fast') #load second signal\n\nmax_fragment_length = 0.3 #maximum fragment duration, proportion of signal length\n\nL = min(len(signal), len(other_signal))\n\nmask_length = int(L*np.random.rand()*max_fragment_length) #randomly choose mask length\nmask_start = int((L-mask_length)*np.random.rand()) #randomly choose mask position\n\nsynth_signal = signal.copy()\nsynth_signal[mask_start:mask_start+mask_length] = other_signal[mask_start:mask_start+mask_length]\n\nIPython.display.Audio(synth_signal, rate=sr)\n```"]