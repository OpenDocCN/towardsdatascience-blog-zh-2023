["```py\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/hbollon/go-edlib\"\n)\n\ntype Record struct {\n    ID int\n    Name string\n    City string\n}\n\nfunc matches(a, b Record) bool {\n    distance := edlib.LevenshteinDistance(a.Name, b.Name)\n    return distance <= 3 && a.City == b.City\n}\n\nfunc main() {\n    a := Record{\n        Name: \"Vincent Van Gogh\",\n        City: \"Paris\",\n    }\n    b := Record{\n        Name: \"Vince Van Gough\",\n        City: \"Paris\",\n    }\n    if matches(a, b) {\n        fmt.Printf(\"%s and %s are probably the same person\\n\", a.Name, b.Name)\n    } else {\n        fmt.Printf(\"%s and %s are probably not the same person\\n\", a.Name, b.Name)\n    }\n}\n```", "```py\nvar firstNames = [...]string{\"Wade\", \"Dave\", \"Seth\", \"Ivan\", \"Riley\", \"Gilbert\", \"Jorge\", \"Dan\", \"Brian\", \"Roberto\", \"Daisy\", \"Deborah\", \"Isabel\", \"Stella\", \"Debra\", \"Berverly\", \"Vera\", \"Angela\", \"Lucy\", \"Lauren\"}\nvar lastNames = [...]string{\"Smith\", \"Jones\", \"Williams\", \"Brown\", \"Taylor\"}\n\nfunc randomName() string {\n    fn := firstNames[rand.Intn(len(firstNames))]\n    ln := lastNames[rand.Intn(len(lastNames))]\n    name := []byte(fmt.Sprintf(\"%s %s\", fn, ln))\n    errors := rand.Intn(4)\n    for i := 0; i < errors; i++ {\n        name[rand.Intn(len(name))] = 'x'\n    }\n    return string(name)\n}\n\nvar cities = [...]string{\"Paris\", \"Berlin\", \"New York\", \"Amsterdam\", \"Shanghai\", \"San Francisco\", \"Sydney\", \"Cape Town\", \"Brasilia\", \"Cairo\"}\n\nfunc randomCity() string {\n    return cities[rand.Intn(len(cities))]\n}\n\nfunc loadRecords(n int) []Record {\n    records := make([]Record, n)\n    for i := 0; i < n; i++ {\n        records[i] = Record{\n            ID:   i,\n            Name: randomName(),\n            City: randomCity(),\n        }\n    }\n    return records\n}\n\nfunc compare(records []Record) (comparisons, matchCount int) {\n    for _, a := range records {\n        for _, b := range records {\n            if a == b {\n                continue // don't compare with itself\n            }\n            comparisons++\n            if matches(a, b) {\n                fmt.Printf(\"%s and %s are probably the same person\\n\", a.Name, b.Name)\n                matchCount++\n            }\n        }\n    }\n    return comparisons, matchCount\n}\n\nfunc main() {\n    records := loadRecords(100)\n    comparisons, matchCount := compare(records)\n\n    fmt.Printf(\"made %d comparisons and found %d matches\\n\", comparisons, matchCount)\n}\n```", "```py\nDaisy Williams and Dave Williams are probably the same person\nDeborax Browx and Debra Brown are probably the same person\nRiley Brown and RxxeyxBrown are probably the same person\nDan Willxams and Dave Williams are probably the same person\nmade 9900 comparisons and found 16 matches\n```", "```py\nfunc block(records []Record) map[string][]Record {\n    blocks := map[string][]Record{}\n    for _, record := range records {\n        blocks[record.City] = append(blocks[record.City], record)\n    }\n    return blocks\n}\n\nfunc main() {\n    records := loadRecords(100)\n    blocks := block(records)\n    comparisons := 0\n    matchCount := 0\n    for _, blockRecords := range blocks {\n        c, m := compare(blockRecords)\n        comparisons += c\n        matchCount += m\n    }\n\n    fmt.Printf(\"made %d comparisons and found %d matches\\n\", comparisons, matchCount)\n}\n```", "```py\nfunc compare(records []Record) (comparisons int, edges [][2]int) {\n    for _, a := range records {\n        for _, b := range records {\n            if a == b {\n                continue // don't compare with itself\n            }\n            comparisons++\n            if matches(a, b) {\n                edges = append(edges, [2]int{a.ID, b.ID})\n            }\n        }\n    }\n    return comparisons, edges\n}\n\nfunc connectedComponents(edges [][2]int) [][]int {\n    components := map[int][]int{}\n    nextIdx := 0\n    idx := map[int]int{}\n\n    for _, edge := range edges {\n        a := edge[0]\n        b := edge[1]\n        aIdx, aOk := idx[a]\n        bIdx, bOk := idx[b]\n        switch {\n        case aOk && bOk && aIdx == bIdx: // in same component\n            continue\n        case aOk && bOk && aIdx != bIdx: // merge two components\n            components[nextIdx] = append(components[aIdx], components[bIdx]...)\n            delete(components, aIdx)\n            delete(components, bIdx)\n            for _, x := range components[nextIdx] {\n                idx[x] = nextIdx\n            }\n            nextIdx++\n        case aOk && !bOk: // add b to component of a\n            idx[b] = aIdx\n            components[aIdx] = append(components[aIdx], b)\n        case bOk && !aOk: // add a to component of b\n            idx[a] = bIdx\n            components[bIdx] = append(components[bIdx], a)\n        default: // create new component with a and b\n            idx[a] = nextIdx\n            idx[b] = nextIdx\n            components[nextIdx] = []int{a, b}\n            nextIdx++\n        }\n    }\n\n    cc := make([][]int, len(components))\n    i := 0\n    for k := range components {\n        cc[i] = components[k]\n        i++\n    }\n    return cc\n}\n\nfunc main() {\n    records := loadRecords(100)\n    blocks := block(records)\n    comparisons := 0\n    edges := [][2]int{}\n    for _, blockRecords := range blocks {\n        c, e := compare(blockRecords)\n        comparisons += c\n        edges = append(edges, e...)\n    }\n    cc := connectedComponents(edges)\n\n    fmt.Printf(\"made %d comparisons and found %d matches and %d entities\\n\", comparisons, len(edges), len(cc))\n    for _, component := range cc {\n        names := make([]string, len(component))\n        for i, id := range component {\n            names[i] = records[id].Name\n        }\n        fmt.Printf(\"found the following entity: %s from %s\\n\", strings.Join(names, \", \"), records[component[0]].City)\n    }\n}\n```", "```py\nmade 1052 comparisons and found 6 matches and 2 entities\nfound the following entity: Ivan Smxth, Ixan Smith, Ivax Smitx from Cairo\nfound the following entity: Brxan Williams, Brian Williams from Cape Town\n```"]