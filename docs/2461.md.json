["```py\ndef shout(name):\n    print(f'Hey! My name is {name}.')\n```", "```py\ndef break_sentence(sentence):\n    return sentence.split(' ')\n```", "```py\ndef shout(name):\n    return f'Hey! My name is {name}.'\n\n# we will use break_sentence defined above\n\n# assign function to another variable\nanother_breaker = break_sentence \n\nanother_breaker(shout('John'))\n# ['Hey!', 'My', 'name', 'is', 'John.']\n\n# Woah! Yes, this is a valid way to define function\nname_decorator = lambda x: '-'.join(list(name))\n\nname_decorator('John')\n# 'J-o-h-n'\n```", "```py\ndef dash_decorator(name):\n    return '-'.join(list(name))\n\ndef no_decorator(name):\n    return name\n\ndef shout(name, decorator=no_decorator):\n    decorated_name = decorator(name)\n    return f'Hey! My name is {decorated_name}'\n\nshout('John')\n# 'Hey! My name is John'\n\nshout('John', decorator=dash_decorator)\n# 'Hey! My name is J-o-h-n'\n```", "```py\ndef shout(name, decorator=lambda x: x):\n    decorated_name = decorator(name)\n    return f'Hey! My name is {decorated_name}'\n\nprint(shout('John'))\n# Hey! My name is John\n\nprint(shout('John', decorator=dash_decorator))\n# Hey! My name is J-o-h-n\n```", "```py\ntype(shout)\n# function\n\ntype(type(shout))\n# type\n```", "```py\ntype(object)\n# type\n```", "```py\nshout.__class__\n# function\n\nshout.__name__\n# shout\n\nshout.__call__\n# <method-wrapper '__call__' of function object at 0x10d8b69e0>\n# Oh snap!\n```", "```py\nvars(shout)\n# {}\n\nshout.name = 'Jimmy'\n\nvars(shout)\n# {'name': 'Jimmy'}\n```", "```py\ndef shout(name):\n    def _upper_case(s):\n        return s.upper()\n\n    return _upper_case(name)\n```", "```py\ndef my_function():\n    return sum(range(10))\n\ndef my_logger(fun):\n    print(f'{fun.__name__} is being called!')\n    return fun\n\nmy_function()\n# 45\n\nmy_logger(my_function)\n# my_function is being called!\n# <function my_function at 0x105afbeb0>\n\nmy_logger(my_function)()\n# my_function is being called!\n# 45\n```", "```py\ndef my_function():\n    return sum(range(10))\n\ndef my_logger(fun):\n    print(f'{fun.__name__} is being called!')\n    return fun\n\nmy_function = my_logger(my_function)\n\nmy_function(10)\n# my_function is being called!\n# 45\n```", "```py\ndef my_logger(fun):\n    print(f'{fun.__name__} is being called!')\n    return fun\n\n@my_logger\ndef my_function():\n    return sum(range(10))\n\nmy_function()\n# my_function is being called!\n# 45\n```", "```py\ndef my_logger(fun):\n    print(f'{fun.__name__} is being called!')\n    return fun\n\n@my_logger\ndef my_function():\n    return sum(range(10))\n\nmy_function()\n# my_function is being called!\n# 45\nmy_function()\n# 45\n```", "```py\ndef my_logger(fun):\n    def _inner_decorator(*args, **kwargs):\n        print(f'{fun.__name__} is being called!')\n        return fun(*args, **kwargs)\n\n    return _inner_decorator\n\n@my_logger\ndef my_function(n):\n    return sum(range(n))\n\nprint(my_function(5))\n# my_function is being called!\n# 10\n```", "```py\n@my_logger\ndef my_function(n):\n    return sum(range(n))\n\n@my_logger\ndef my_unordinary_function(n, m):\n    return sum(range(n)) + m\n\nprint(my_function(5))\n# my_function is being called!\n# 10\n\nprint(my_unordinary_function(5, 1))\n# my_unordinary_function is being called!\n# 11\n```", "```py\n from enum import IntEnum, auto\nfrom datetime import datetime\nfrom functools import wraps\n\nclass LogVerbosity(IntEnum):\n    ZERO = auto()\n    LOW = auto()\n    MEDIUM = auto()\n    HIGH = auto()\n\ndef my_logger(verbosity: LogVerbosity):\n\n    def _inner_logger(fun):\n\n        def _inner_decorator(*args, **kwargs):\n            if verbosity >= LogVerbosity.LOW:\n                print(f'LOG: Verbosity level: {verbosity}')\n                print(f'LOG: {fun.__name__} is being called!')\n            if verbosity >= LogVerbosity.MEDIUM:\n                print(f'LOG: Date and time of call is {datetime.utcnow()}.')\n            if verbosity == LogVerbosity.HIGH:\n                print(f'LOG: Scope of the caller is {__name__}.')\n                print(f'LOG: Arguments are {args}, {kwargs}')\n\n            return fun(*args, **kwargs)\n\n        return _inner_decorator\n\n    return _inner_logger\n\n@my_logger(verbosity=LogVerbosity.LOW)\ndef my_function(n):\n    return sum(range(n))\n\n@my_logger(verbosity=LogVerbosity.HIGH)\ndef my_unordinary_function(n, m):\n    return sum(range(n)) + m\n\nprint(my_function(10))\n# LOG: Verbosity level: LOW\n# LOG: my_function is being called!\n# 45\n\nprint(my_unordinary_function(5, 1))\n# LOG: Verbosity level: HIGH\n# LOG: my_unordinary_function is being called!\n# LOG: Date and time of call is 2023-07-25 19:09:15.954603.\n# LOG: Scope of the caller is __main__.\n# LOG: Arguments are (5, 1), {}\n# 11 \n```"]