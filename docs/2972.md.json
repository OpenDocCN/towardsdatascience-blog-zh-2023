["```py\nCREATE TABLE Users AS \nSELECT NAME, LAST_NAME, CAST(AGE as integer)\nFROM read_parquet('s3://somewhere/data/*')\n```", "```py\nscalar Time\n\ntype User {\n  name: String!\n  last_name: String!\n  email: String!\n  age: Int!\n}\n\ntype Query {\n  users: [User!]!\n  getUsersByEmail(email: String!): [User!]!\n}\n```", "```py\ngo run github.com/99designs/gqlgen generate\n```", "```py\n// resolver.go\n\ntype Resolver struct {\n dao *data.DAO // add a ref to our DAO\n}\n\nfunc NewResolver(dao *data.DAO) *Resolver {\n return &Resolver{dao: dao} //initialize our DAO\n}\n```", "```py\n// schema.resolvers.go\n\nfunc (r *queryResolver) GetUsersByEmail(ctx context.Context, email string)\n ([]*model.User, error) {\n\n}\nfunc (s *DAO) GetUsers() ([]*model.User, error) {\n}\n```", "```py\n// schema.resolvers.go\n\nfunc (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {\n res, err := r.dao.GetUsers()\n if err != nil {\n  log.Printf(\"error getting users: %v\", err)\n  return nil, err\n }\n return res, nil\n}\n```", "```py\n//dao.go\n\nfunc (s *DAO) GetUsers() ([]*model.User, error) {\n//QryAllUsers := \"select * from users\"\n rows, err := s.driver.Query(QryAllUsers)\n if err != nil {\n  return nil, err\n }\n defer rows.Close()\n resultset, err := sqlhelper.ResultSetFromRows(rows)\n if err != nil {\n  return nil, err\n }\n users := make([]*model.User, 0)\n for _, row := range resultset {\n  user := newUserFromRow(row) // populate the user struct\n  users = append(users, user)\n }\n return users, nil\n}\n```", "```py\n// server.go\ndataDriver := data.NewDuckDBDriver(awsCred)\ndataStore := data.NewStore(dataDriver) \nresolver := graph.NewResolver(dataStore)\nsrv := handler.NewDefaultServer(graph.NewExecutableSchema(graph.Config{Resolvers: resolver}))\n\nhttp.Handle(\"/query\", srv)\n```"]