- en: 'Mastering Python RegEx: A Deep Dive into Pattern Matching'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握 Python RegEx：深入探讨模式匹配
- en: 原文：[https://towardsdatascience.com/mastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe?source=collection_archive---------2-----------------------#2023-07-24](https://towardsdatascience.com/mastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe?source=collection_archive---------2-----------------------#2023-07-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/mastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe?source=collection_archive---------2-----------------------#2023-07-24](https://towardsdatascience.com/mastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe?source=collection_archive---------2-----------------------#2023-07-24)
- en: '*Python RegEx Demystified: Deciphering the Art of Pattern Matching with Python’s
    re Module*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*Python 正则表达式揭秘：解读使用 Python 的 re 模块进行模式匹配的艺术*'
- en: '[](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)[![Nathan
    Rosidi](../Images/f500246a4d2fb080a73f6ef740c226d2.png)](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)
    [Nathan Rosidi](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)[![Nathan
    Rosidi](../Images/f500246a4d2fb080a73f6ef740c226d2.png)](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)
    [Nathan Rosidi](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fab636cbf3611&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&user=Nathan+Rosidi&userId=ab636cbf3611&source=post_page-ab636cbf3611----2ae4fe6216fe---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)
    ·16 min read·Jul 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2ae4fe6216fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&user=Nathan+Rosidi&userId=ab636cbf3611&source=-----2ae4fe6216fe---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fab636cbf3611&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&user=Nathan+Rosidi&userId=ab636cbf3611&source=post_page-ab636cbf3611----2ae4fe6216fe---------------------post_header-----------)
    发表在 [数据科学前沿](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)
    ·16 min read·2023年7月24日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2ae4fe6216fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&user=Nathan+Rosidi&userId=ab636cbf3611&source=-----2ae4fe6216fe---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2ae4fe6216fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&source=-----2ae4fe6216fe---------------------bookmark_footer-----------)![](../Images/d5211f787d3686937ee70256f8039e72.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2ae4fe6216fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&source=-----2ae4fe6216fe---------------------bookmark_footer-----------)![](../Images/d5211f787d3686937ee70256f8039e72.png)'
- en: Image created by the author on [Canva](https://www.canva.com/)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者在 [Canva](https://www.canva.com/) 上创建
- en: What is Python RegEx or Regular Expression?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python RegEx 或正则表达式？
- en: Regular expressions often shortened to regex, serve as a potent instrument for
    handling text. In essence, they consist of a series of characters that establish
    a pattern for searching. This pattern can be used for a wide range of string manipulations
    including matching patterns, replacing text, and dividing strings.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式，通常缩写为 regex，是处理文本的强大工具。它们本质上是一系列字符，用于建立搜索模式。这个模式可以用于各种字符串操作，包括匹配模式、替换文本和分割字符串。
- en: History of Regular Expressions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式的历史
- en: '![](../Images/355706d0bcfe6d04d89723fe03d035e7.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/355706d0bcfe6d04d89723fe03d035e7.png)'
- en: '*Image Source:* [*http://serge.mehl.free.fr/chrono/Kleene.html*](http://serge.mehl.free.fr/chrono/Kleene.html)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图像来源:* [*http://serge.mehl.free.fr/chrono/Kleene.html*](http://serge.mehl.free.fr/chrono/Kleene.html)'
- en: Mathematician Stephen Cole Kleene first introduces regular expressions in the
    1950s as a notation to describe regular sets or regular languages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数学家斯蒂芬·科尔·克利尼在1950年代首次引入了正则表达式，作为描述正规集合或正规语言的记号。
- en: Today, regular expressions have become an essential skill for programmers, data
    scientists, and IT professionals.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，正则表达式已成为程序员、数据科学家和 IT 专业人员的必备技能。
- en: Importance and Use Cases of Python RegEx or Regular Expressions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 正则表达式或正则表达式的意义及应用
- en: Before delving into how these regular expressions can be used, by using Python,
    let’s see the different range of its applications to motivate ourselves.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解这些正则表达式如何使用 Python 之前，让我们看看它的不同应用范围，以激励自己。
- en: '**Data Validation** : Regular expressions can be very useful to validate different
    types of data. (e-mail addresses, phone numbers)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据验证**：正则表达式在验证不同类型的数据时非常有用。（电子邮件地址、电话号码）'
- en: '**Web Scraping**: When scraping data through web pages, regular expressions
    can be used to parse HTML and isolate the necessary information.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网页抓取**：在通过网页抓取数据时，正则表达式可以用来解析 HTML 并提取必要的信息。'
- en: '**Search and Replace**: Regular expressions are good at identifying strings
    that conform to a specific pattern and substituting them with alternatives. This
    capability is especially valuable in text editors, databases, and coding.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索和替换**：正则表达式擅长识别符合特定模式的字符串并用替代品替换它们。这一能力在文本编辑器、数据库和编程中尤其有价值。'
- en: '**Syntax Highlighting:** A number of text editors use regular expressions to
    do syntax highlighting.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语法高亮**：许多文本编辑器使用正则表达式来进行语法高亮。'
- en: '**Natural Language Processing (NLP)**: Within NLP, regular expressions can
    be used for tasks such as tokenization, stemming, and an array of other text processing
    functions.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言处理 (NLP)**：在 NLP 中，正则表达式可以用于标记化、词干提取以及其他各种文本处理功能。'
- en: '**Log Analysis**: In dealing with log files, regular expressions are effective
    in extracting particular log entries or analyzing patterns over a period of time.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志分析**：在处理日志文件时，正则表达式在提取特定日志条目或分析一段时间内的模式方面非常有效。'
- en: Now I hope, you are motivated enough!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我希望你已经有足够的动力了！
- en: Let’s get started with re module, which is all about Regular expressions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 re 模块，它专注于正则表达式。
- en: Getting Started with Python’s re Module
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的 re 模块入门
- en: Great, let’s get started with Python’s re module fundamentals. In the next sections,
    we will cover more advanced topics.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，让我们从 Python 的 re 模块基础知识开始。在接下来的部分，我们将涵盖更多高级主题。
- en: Introduction to the re Module
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: re 模块简介
- en: Python provides innate support for regular expressions via the re module.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python 通过 re 模块提供了对正则表达式的原生支持。
- en: This module is Python’s standard library, which means you don’t have to install
    it externally, it will come with every Python installation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块是 Python 的标准库，这意味着你不需要外部安装，它会随每个 Python 安装包一起提供。
- en: The re module contains various functions and classes to work with regular expressions.
    Some of the functions are used for matching text, some for splitting text, and
    others for replacing text.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: re 模块包含了用于处理正则表达式的各种函数和类。一些函数用于匹配文本，一些用于拆分文本，还有一些用于替换文本。
- en: It includes a wide range of functions an classes tailored for handling regular
    expressions. Amon these, certain functions are designated for text matching, remaining
    ones for text splitting or text replacements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它包括了广泛的函数和类，专门用于处理正则表达式。其中某些函数用于文本匹配，其余的用于文本拆分或文本替换。
- en: Importing the re Module
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入 re 模块
- en: As we already mentioned, it came with installation, so no need to worry about
    installation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，它与安装一起提供，因此无需担心安装问题。
- en: That’s why, to start using regular expressions in Python, you need to import
    the re library first. You can do this by using the import statements as follows.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么，为了开始在 Python 中使用正则表达式，你需要首先导入 re 库。你可以使用如下的 import 语句来完成这一步。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After the library is imported, you can start its features like functions and
    classes, provided by the re module.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入库之后，你可以开始使用 re 模块提供的功能，如函数和类。
- en: Let’s start with a simple example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的例子开始。
- en: Let’s say you want to find all occurrences of the word “Python” in a string.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在一个字符串中找到所有“Python”一词的出现。
- en: We can use the findall() function from the re module.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用来自 re 模块的 findall() 函数。
- en: Here is the code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码。
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here is the output.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是输出。
- en: '![](../Images/06fbbbbf6dd2e2d0b4bb8738226a45cd.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/06fbbbbf6dd2e2d0b4bb8738226a45cd.png)'
- en: There are many more functions in the re module that we can use to build more
    complex patterns.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `re` 模块中还有许多其他函数，我们可以用它们来构建更复杂的模式。
- en: But first, let’s see the common functions in the re Module.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下 `re` 模块中的常见函数。
- en: Common Functions in the re Module
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`re` 模块中的常见函数'
- en: Before expressing to you the fundamentals of Python RegEx, let’s see the common
    functions first, to grasp the remaining concepts better. The re module includes
    many different functions. By using them, we can perform different operations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在向你介绍 Python RegEx 的基本知识之前，我们先来了解常见的函数，以便更好地掌握剩下的概念。`re` 模块包括许多不同的函数。通过使用它们，我们可以执行不同的操作。
- en: In the following parts, we will discover some of them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将发现其中的一些函数。
- en: '![](../Images/316381be82d9bd520f1841735655d0c0.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/316381be82d9bd520f1841735655d0c0.png)'
- en: Image created by the author on [Canva](https://www.canva.com/)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者在 [Canva](https://www.canva.com/) 创建
- en: a. re.match() Function
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: a. `re.match()` 函数
- en: The re.match() catches whether the regular expression starts with the specific
    string or not.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.match()` 用于捕捉正则表达式是否以特定字符串开始。'
- en: If there is a match, the function returns a match object; if not, it returns
    none.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有匹配，函数返回一个匹配对象；如果没有匹配，则返回 None。
- en: Next, we’ll use the re.match() function. Here we will check whether the string
    text starts with the word “Python” or not. Then we’ll print the result to the
    console.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `re.match()` 函数。在这里，我们将检查字符串文本是否以“Python”这个词开始。然后我们将结果打印到控制台。
- en: Here is the code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码。
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here is the output.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是输出。
- en: '![](../Images/13953395f653add262f3c05dc0f0facc.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/13953395f653add262f3c05dc0f0facc.png)'
- en: The output shows that the pattern “Python” matches the beginning of the text.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示模式“Python”匹配文本的开头。
- en: b. re.search() Function
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: b. `re.search()` 函数
- en: In contrast to re.match(), the re.search() function scans the entirety of the
    string in search of a match and yields a match object if one is discovered.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `re.match()` 相对的是，`re.search()` 函数扫描整个字符串以查找匹配项，如果发现匹配项，则返回一个匹配对象。
- en: In the following code, we use the re.search() function to search for the word
    “amazing” anywhere in the string text. If the word is found, we print it; otherwise,
    we print “No match found”.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们使用 `re.search()` 函数在字符串文本中查找“amazing”这个词。如果找到这个词，我们将其打印出来；否则，打印“未找到匹配项”。
- en: Here is the code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码。
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is the output.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是输出。
- en: '![](../Images/88ce4b491c7aec745a428317c75614f3.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/88ce4b491c7aec745a428317c75614f3.png)'
- en: The output shows that our code catches amazing from the given text.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们的代码从给定文本中捕捉到了“amazing”。
- en: c. re.findall() Function
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: c. `re.findall()` 函数
- en: The re.findall() function is used to collect all the non-overlapping matches
    of a pattern in the string. And it returns these matches as a list of strings.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.findall()` 函数用于收集字符串中所有非重叠的模式匹配项。它将这些匹配项作为字符串列表返回。'
- en: In the following example, we use the re.findall() function to find all “a” in
    the string. The matches are returned as a list, which then we print to the console.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用 `re.findall()` 函数来查找字符串中的所有“a”。匹配项作为列表返回，然后我们将其打印到控制台。
- en: Here is the code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码。
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here is the output.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是输出。
- en: '![](../Images/38797c77d84525c72ee82185f20b457e.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38797c77d84525c72ee82185f20b457e.png)'
- en: The output represented all non-overlapping occurrences of the letter “a” found
    in our text.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输出展示了文本中所有非重叠的字母“a”出现的情况。
- en: d. re.finditer() Function
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: d. `re.finditer()` 函数
- en: The re.finditer() function bears resemblance to re.findall(), however it returns
    an iterator, that yields match objects.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.finditer()` 函数类似于 `re.findall()`，但它返回一个迭代器，迭代器生成匹配对象。'
- en: In the following code, re.finditer() function is used to find all occurrences
    of the letter “a” in the string text. It returns an iterator of match objects
    and we print the index and value of each match.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，使用 `re.finditer()` 函数来查找字符串文本中所有字母“a”的出现情况。它返回一个匹配对象的迭代器，我们打印每个匹配的索引和值。
- en: Here is the code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码。
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here is the output.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是输出。
- en: '![](../Images/3963aa4048a0e9c8b6c9c48e94102261.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3963aa4048a0e9c8b6c9c48e94102261.png)'
- en: The output shows the index of the pattern “a” in the text.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了模式“a”在文本中的索引。
- en: e. re.sub() Function
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: e. `re.sub()` 函数
- en: The re.sub() function is used to do a replacement with one string to another.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.sub()` 函数用于将一个字符串替换为另一个字符串。'
- en: Next, we’ll use the re.sub() function to replace “Python” with “Java”.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `re.sub()` 函数将“Python”替换为“Java”。
- en: We then print the modified string.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们打印修改后的字符串。
- en: Here is the code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码。
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here is the output.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/8486f32dba380145eae49f69b5511d89.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8486f32dba380145eae49f69b5511d89.png)'
- en: The output shows that we can successfully replace “Python” with “Java” from
    our text.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们可以成功将“Python”替换为“Java”。
- en: In the next section, we will discover into the basic patterns that can be used
    in regular expressions to match a variety of text patterns.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨可以在正则表达式中用于匹配各种文本模式的基本模式。
- en: Basic Patterns in Python Regular Expressions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 正则表达式中的基本模式
- en: Let’s start with basic patterns.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基本模式开始。
- en: Regular expressions are constructed through the combination of literal characters,
    meta-characters, and quantifiers. So, grasping these fundamental components is
    important for creating effective regular expressions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式是通过字面字符、元字符和量词的组合构建的。因此，掌握这些基本组件对于创建有效的正则表达式至关重要。
- en: Let’s start with literal characters.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从字面字符开始。
- en: a. Literal Characters
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: a. 字面字符
- en: Literal characters are the simplest form of pattern matching in regular expressions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 字面字符是正则表达式中最简单的模式匹配形式。
- en: They match themselves exactly and do not have a special meaning.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它们本身完全匹配，没有特殊含义。
- en: For example, the regular expression python will match the string python exactly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，正则表达式 python 将精确匹配字符串 python。
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here is the output.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/98d006028b6a64feb2e1ff645130f419.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98d006028b6a64feb2e1ff645130f419.png)'
- en: The output shows that our re.findall() function found all instances of the pattern
    “python”ç
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们的 re.findall() 函数找到了所有“python”模式的实例。
- en: b. Meta-characters
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: b. 元字符
- en: Meta-characters like “.”, “‘^”, “$”. These characters can be very important
    to manipulate strings. Let’s see.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 元字符如“.”、“^”、 “$”。这些字符在处理字符串时可能非常重要。让我们看看。
- en: i. Dot (.)
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: i. 点（.）
- en: The dot . is like a Joker card. It can stand in for any single character except
    a newline.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 点号 . 就像一张万能牌。它可以代替任何单个字符，除了换行符。
- en: In the code below, we’ll use a regular expression pattern “p.t”.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将使用正则表达式模式“p.t”。
- en: Here is the code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here is the output.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/c44c2a62673674d4ba8391eccf7cd5ba.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c44c2a62673674d4ba8391eccf7cd5ba.png)'
- en: The output shows that our code found all three character instances which start
    with “p” and ends with “t”.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们的代码找到了所有以“p”开头并以“t”结尾的三个字符实例。
- en: ii. Caret (^)
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ii. 插入符号 (^)
- en: The caret ^ is used to check if a string starts with a certain character.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 插入符号 ^ 用于检查字符串是否以某个字符开头。
- en: Let’ see an example.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。
- en: 'The following code checks whether the text starts with Hello( Match found :
    “match” ) or not ( No match found )'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码检查文本是否以 Hello 开头（匹配找到：“匹配”）或没有（未找到匹配）。
- en: Here is the code.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here is the output.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/0ea91ccd449a91fec82c5065ed0d4e9a.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ea91ccd449a91fec82c5065ed0d4e9a.png)'
- en: The output shows that our code catches the hello pattern at the beginning of
    the text.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们的代码捕捉到了文本开头的 hello 模式。
- en: iii. Dollar Sign ($)
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iii. 美元符号（$）
- en: The dollar sign $ is used to check if a string ends with a certain character.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 美元符号 $ 用于检查字符串是否以某个字符结尾。
- en: 'The following code checks whether the text ends with the world$ ( if so print
    “ Match found: “match) or not ( if so print “No match found” )'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码检查文本是否以 world$ 结尾（如果是，则打印“匹配找到：‘匹配’”），否则（打印“未找到匹配”）。
- en: Here is the code.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here is the output.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/38c8fc07aee1d66759269dbcc02dd749.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38c8fc07aee1d66759269dbcc02dd749.png)'
- en: The output shows that re.search() function found the text that ends with the
    word “world”.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示 re.search() 函数找到了以“world”结尾的文本。
- en: c. Quantifiers
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: c. 量词
- en: Quantifiers are used to define how many times characters(or character) should
    appear in the pattern you are trying to match.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 量词用于定义在你试图匹配的模式中，字符（或字符）出现的次数。
- en: In this subsection, we will look at examples about the asterisk (*), continue
    with the plus sign (+), and the question mark (?), and finish with curly braces
    ({}).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将查看关于星号（*）、加号（+）和问号（?）的示例，并以大括号（{}）结束。
- en: Let’s start with an asterisk.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从星号开始。
- en: i. Asterisk (*)
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: i. 星号 (*)
- en: The asterisk (*) in a regular expression signifies that the previous character
    can appear zero or more times.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式中的星号（*）表示前一个字符可以出现零次或多次。
- en: Let’s see the code. In the following code, we first define the pattern ( “py”),
    then we will use findall( ) function.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码。在以下代码中，我们首先定义了模式（“py”），然后我们将使用 findall() 函数。
- en: Here is the code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here is the output.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/080282d827bd7bc7b39b86b2566ac7e2.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/080282d827bd7bc7b39b86b2566ac7e2.png)'
- en: The output shows all because asterisks allow for “y” to appear as zero or more
    times.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示所有，因为星号允许“y”出现零次或多次。
- en: ii. Plus (+)
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ii. 加号（+）
- en: The plus + matches 1 or more repetitions of the previous character.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 加号 + 匹配前一个字符的 1 次或更多次重复。
- en: Here we again use findlall() function with the py pattern but this time we will
    use plus(+).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们再次使用 `findall()` 函数配合 py 模式，但这次我们会使用加号（+）。
- en: Here is the code.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here is the output.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![](../Images/cf5c1b1d5cc687bada74b5b0da584ac3.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf5c1b1d5cc687bada74b5b0da584ac3.png)'
- en: As we can see the output, plus requires at least one or more “y” characters
    after “p”.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看到，加号要求“p”之后至少有一个或多个“y”字符。
- en: iii. Question Mark (?)
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iii. 问号（?）
- en: The question mark ? matches 0 or 1 repetition of the previous character. It
    makes the previous character optional.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 问号 ? 匹配前一个字符的 0 次或 1 次重复。它使前一个字符成为可选的。
- en: Here is the code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE13]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here is the output.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![](../Images/e46075bfa16b69f5e0a23ff4a1397bf1.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e46075bfa16b69f5e0a23ff4a1397bf1.png)'
- en: In the output, you can see that it only matches “p” and “py”, since question
    mark allows to appear “y” one time or zero times.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，你可以看到它只匹配了“p”和“py”，因为问号允许“y”出现一次或零次。
- en: iv. Curly Braces ({})
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iv. 花括号（{}）
- en: Curly braces {} allow you to match a specific number of repetitions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号 {} 允许你匹配特定次数的重复。
- en: '[PRE14]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here is the output.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![](../Images/c1e3852f2a26e8e72cdae20e85c39e85.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1e3852f2a26e8e72cdae20e85c39e85.png)'
- en: In this example, the pattern matches “pyy” and “pyyy” but not “py” or “pyyyy”
    because we specified that we want to match exactly 2 or 3 “y” characters after
    “p”.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，模式匹配了“pyy”和“pyyy”，但没有匹配“py”或“pyyyy”，因为我们指定了要匹配“p”之后正好有 2 或 3 个“y”字符。
- en: Special Characters in Python Regular Expressions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 正则表达式中的特殊字符
- en: Special can be used to build more complex patterns.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊字符可以用来构建更复杂的模式。
- en: '![](../Images/dd2fbe5fc6b93a6d4252bbd3800c0e27.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd2fbe5fc6b93a6d4252bbd3800c0e27.png)'
- en: Image created by the author on [Canva](https://www.canva.com/)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者在 [Canva](https://www.canva.com/) 上创建
- en: a. Character Classes
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: a. 字符类
- en: Let’s see character classes first.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看字符类。
- en: In the following examples, we will see 3 of them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的例子中，我们将看到其中的 3 个。
- en: Let’s start with \d, \D.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 \d, \D 开始。
- en: i. \d, \D
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: i. \d, \D
- en: The “\d” is used to find numbers (from 0 to 9), on the contrary, “\D” is used
    to find elements that are not numbers.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: “\d”用于查找数字（从 0 到 9），而“\D”用于查找不是数字的元素。
- en: In the following code, “\d” scans through the text string and retrieve numbers
    from the text.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，“\d”扫描文本字符串并提取文本中的数字。
- en: '[PRE15]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here is the output.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![](../Images/6b85b1d7d069608beabe2c54938e1b56.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b85b1d7d069608beabe2c54938e1b56.png)'
- en: The output shows that we found all digits (0–9) in the text.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们找到了文本中的所有数字（0–9）。
- en: ii. \s, \S
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ii. \s, \S
- en: The “\s” can be used to find whitespace characters, on the opposite “\S can
    be used to find anything that is not whitespace.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: “\s”可以用来查找空白字符，而“\S”可以用来查找不是空白的字符。
- en: In the below, the regular expression “\s” identifies all spaces and tabs in
    the given text.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下方，正则表达式 “\s” 识别了给定文本中的所有空格和制表符。
- en: Here is the code.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here is the output.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![](../Images/e812a7ec8a6577267b96398574bbd7f2.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e812a7ec8a6577267b96398574bbd7f2.png)'
- en: We can see from the outputs that we can identify all the whitespace.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，我们可以识别所有的空白字符。
- en: iii. \w, \W
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iii. \w, \W
- en: The “\w” can be used to find words. (letters, numbers, and underscore characters)”\W”
    is the opposite of that.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: “\w”可以用来查找单词（字母、数字和下划线字符），而“\W”则是其相反的。
- en: In the code below, “\w” retrieves all letters and numbers from the text.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，“\w”从文本中提取所有字母和数字。
- en: Here is the code.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here is the output.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![](../Images/7dc9f617a83454f0068210b047dd7b2b.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7dc9f617a83454f0068210b047dd7b2b.png)'
- en: b. Predefined Character Classes
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: b. 预定义字符类
- en: Predefined character classes offer shortcuts for common classes. For example,
    “\d” is a predefined character class that represents digits.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义字符类提供了常见类的快捷方式。例如，“\d”是一个预定义字符类，表示数字。
- en: In this case, the “\d” pattern extracts all numerical digits from the given
    text.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，“\d”模式提取了给定文本中的所有数字。
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here is the output.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![](../Images/caf0ef71691f62e07213c4de164e3daf.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/caf0ef71691f62e07213c4de164e3daf.png)'
- en: The output shows that our code has found all instances of predefined character
    class “\d” (representing all digits) in the text.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们的代码在文本中找到了所有的预定义字符类“\d”（代表所有数字）实例。
- en: c. Custom Character Classes
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: c. 自定义字符类
- en: Custom character classes allow you to define your own set of characters using
    square brackets [].
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义字符类允许你使用方括号 [] 定义自己的字符集。
- en: In the example below, the custom character class “[aeiou]” is used to find all
    vowel letters in the text.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，自定义字符类 “[aeiou]” 用于查找文本中的所有元音字母。
- en: Here is the code.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE19]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here is the output.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/de8ec38f248f91d0205c26f8d01a120b.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de8ec38f248f91d0205c26f8d01a120b.png)'
- en: The output shows all instances of vowels in the text as we defined it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果显示了文本中所有我们定义的元音字母的实例。
- en: We also can use “-” to define the range of characters.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用“-”来定义字符范围。
- en: Here is the code.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE20]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here is the output.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/d99317e04c37175596423be53e5b9f89.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d99317e04c37175596423be53e5b9f89.png)'
- en: Here we can the output consists of the uppercase letters in the text.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们可以看到输出由文本中的大写字母组成。
- en: Compiling Python Regular Expressions
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译 Python 正则表达式
- en: When you use the same regular expression multiple times in a script, it is time-saving
    to compile it into a pattern object first. This saves a lot of time because the
    regular expression doesn’t need to be parsed again with each use.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在脚本中多次使用相同的正则表达式时，首先将其编译成模式对象可以节省时间。这节省了很多时间，因为正则表达式不需要在每次使用时重新解析。
- en: a. The compile() Method
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: a. compile() 方法
- en: The re.compile() method can be used to compile a regular expression pattern
    into a pattern object.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 re.compile() 方法将正则表达式模式编译成模式对象。
- en: Once we have this pattern object, we can call its methods (matching text, searching,
    and other operations.)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们拥有这个模式对象，我们可以调用它的方法（匹配文本、搜索和其他操作。）
- en: Here is the code.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE21]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here is the output.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/6b9918f5ae19099cb8a82b7bb8732f06.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b9918f5ae19099cb8a82b7bb8732f06.png)'
- en: The output shows digits.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果显示数字。
- en: b. Benefits of Compiling Regular Expressions
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: b. 编译正则表达式的好处
- en: Here are some benefits of using regular expressions;
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正则表达式的一些好处；
- en: '**Performance**: It is faster, especially if the regular expressions will be
    used again and again.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：它更快，特别是当正则表达式需要反复使用时。'
- en: '**Reusability**: Once compiled, the same pattern object can be reused multiple
    times within different parts of the code.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用性**：一旦编译，相同的模式对象可以在代码的不同部分多次重用。'
- en: '**Readability**: Using a pattern object can make your code cleaner, especially
    if you are using complex regular expressions.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性**：使用模式对象可以使你的代码更简洁，特别是当你使用复杂的正则表达式时。'
- en: 'Here is a simple example of compiled regular expressions:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个编译正则表达式的简单示例：
- en: '[PRE22]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here is the output.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/bdc2aab30fcacd6fc1b3734c7138a6d6.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdc2aab30fcacd6fc1b3734c7138a6d6.png)'
- en: Now let’s check the second text.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查第二个文本。
- en: Here is the code.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE23]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here is the output.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/d8c8b8899230ae1a78b6d41a92a162bf.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8c8b8899230ae1a78b6d41a92a162bf.png)'
- en: Our example above is rather a simple one for you to grasp the importance of
    reusability, performance, and readability, especially when our pattern plan to
    use repeatedly.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例相对简单，帮助你理解可重用性、性能和可读性的重要性，尤其是当我们的模式计划重复使用时。
- en: 'Practical Example: Extracting Phone Numbers'
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际示例：提取电话号码
- en: In this section, let’s test what we discover together by writing a Python script
    to extract phone numbers from text.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们通过编写一个 Python 脚本来提取文本中的电话号码，以测试我们所发现的内容。
- en: This one is a common use of regular expressions, especially in the data-cleaning
    process.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正则表达式的一个常见用法，特别是在数据清理过程中。
- en: a. Defining the Regular Expression Pattern
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: a. 定义正则表达式模式
- en: Phone numbers can be in different formats, especially in different countries,
    so you can adjust these numbers according to yours, for this example, let’s consider
    the format XXX-XXX-XXXX, where X is a digit.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 电话号码可以有不同的格式，尤其是在不同的国家，因此你可以根据自己的需要调整这些数字，对于这个示例，让我们考虑格式为 XXX-XXX-XXXX，其中 X
    是数字。
- en: The following code defines a pattern that matches the format above and complies
    with this pattern into a regular expression.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码定义了一个匹配上述格式的模式，并将其编译为正则表达式。
- en: Let’s see the code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码。
- en: '[PRE24]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: b. Using the findall() Method
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: b. 使用 findall() 方法
- en: In this example, we will use findall() method to extract phone numbers that
    matched our pattern.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用 findall() 方法来提取匹配我们模式的电话号码。
- en: The following code uses a regular expression pattern to find and extract all
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用正则表达式模式来查找和提取所有
- en: '[PRE25]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: c. Printing the Results
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: c. 打印结果
- en: Finally, let’s print the extracted phone numbers to the console.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们把提取的电话号码打印到控制台。
- en: Here is the code.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码。
- en: '[PRE26]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here is the output.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/3fa87b85a078a729e0a216f2db40a2e4.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3fa87b85a078a729e0a216f2db40a2e4.png)'
- en: d. Full Example Code
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: d. 完整示例代码
- en: 'Here is the full Python script that combines all the steps above:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是结合上述所有步骤的完整 Python 脚本：
- en: '[PRE27]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here is the output.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![](../Images/611a3a89982a2d5c60f71fd670ace7b7.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/611a3a89982a2d5c60f71fd670ace7b7.png)'
- en: Best Practices
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'As you continue to work with regular expressions, here are a few best practices
    to keep in mind:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续使用正则表达式时，请记住以下几个最佳实践：
- en: '**Keep it Simple**: Simplicity is the key. It is generally advised to use a
    simpler pattern because regular expressions can be complicated instantly.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持简单**：简洁是关键。通常建议使用更简单的模式，因为正则表达式可以瞬间变得复杂。'
- en: '**Comment Your Patterns**: When developing regular expressions for your project,
    don’t forget to include comments inside your notes, as we told it can be complicated,
    but once you did this when you turn back, your code will be reusable.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释你的模式**：在为你的项目开发正则表达式时，不要忘记在注释中包含说明，因为我们提到过它可能会很复杂，但一旦你这样做了，当你回头看时，你的代码将变得可重用。'
- en: '**Test Thoroughly**: Test your code over and over again, because regular expressions
    can sometimes produce unexpected results due to their complex nature, that is
    why testing it rigorously will ensure your work will work as intended.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**彻底测试**：反复测试你的代码，因为正则表达式由于其复杂的性质有时会产生意外的结果，这就是为什么要严格测试，以确保你的工作按预期运行。'
- en: '**Use Raw Strings**: When you’re working with text in Python, sometimes you
    use special characters that have a different meaning than just the character itself
    (like backslash \ is or \n for a new line ). To avoid this confusion, Python allows
    you to use what’s called a “raw string”. You make a string “raw” by putting the
    letter “r” right before the first quote of the string. When you do this, Python
    understands that backslashes in that string should be treated just like normal
    characters and not as special ones.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用原始字符串**：在 Python 中处理文本时，有时你会使用具有不同含义的特殊字符（如反斜杠 \ 或 \n 表示换行）。为了避免这种混淆，Python
    允许你使用所谓的“原始字符串”。你可以通过在字符串的第一个引号前加上字母“r”来使字符串变成“原始”。这样，Python 就会理解该字符串中的反斜杠应被视为普通字符，而不是特殊字符。'
- en: Conclusion
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this guide, we explored the realm of Python RegEx or Regular Expressions.
    We started with common functions and fundamentals and go through more advanced
    concepts and practical examples. But remember doing real-life projects, that will
    count as an example for your career to deepen this understanding of your mind.
    Just by doing so, you’ll develop knowledge and save yourself from googling whenever
    you work on Python regular expressions.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们探讨了 Python 正则表达式的领域。我们从常见函数和基本知识开始，深入了解了更高级的概念和实际示例。但请记住，做实际项目将作为你职业生涯中的一个例子，以加深你对这一领域的理解。通过这样做，你将获得知识，并避免在处理
    Python 正则表达式时进行 Google 搜索。
- en: Check out this [comprehensive guide to advanced Python concepts](https://www.stratascratch.com/blog/a-comprehensive-guide-to-advanced-python-concepts/?utm_source=blog&utm_medium=click&utm_campaign=kdn+python+regex)
    to get an overview of such concepts.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个 [高级 Python 概念综合指南](https://www.stratascratch.com/blog/a-comprehensive-guide-to-advanced-python-concepts/?utm_source=blog&utm_medium=click&utm_campaign=kdn+python+regex)
    来了解这些概念的概述。
- en: I hope you also gained valuable information about Python RegEx by reading this
    article too.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你通过阅读这篇文章也获得了关于 Python 正则表达式的有价值的信息。
- en: Thanks for reading!
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: '*Originally published at* [*https://www.stratascratch.com*](https://www.stratascratch.com/blog/mastering-python-regex-a-deep-dive-into-pattern-matching/?utm_source=blog&utm_medium=click&utm_campaign=kdn+python+regex)*.*'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发布于* [*https://www.stratascratch.com*](https://www.stratascratch.com/blog/mastering-python-regex-a-deep-dive-into-pattern-matching/?utm_source=blog&utm_medium=click&utm_campaign=kdn+python+regex)*。*'
