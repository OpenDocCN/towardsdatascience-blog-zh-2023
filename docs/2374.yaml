- en: 'Mastering Python RegEx: A Deep Dive into Pattern Matching'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/mastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe?source=collection_archive---------2-----------------------#2023-07-24](https://towardsdatascience.com/mastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe?source=collection_archive---------2-----------------------#2023-07-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Python RegEx Demystified: Deciphering the Art of Pattern Matching with Python’s
    re Module*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)[![Nathan
    Rosidi](../Images/f500246a4d2fb080a73f6ef740c226d2.png)](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)
    [Nathan Rosidi](https://nathanrosidi.medium.com/?source=post_page-----2ae4fe6216fe--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fab636cbf3611&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&user=Nathan+Rosidi&userId=ab636cbf3611&source=post_page-ab636cbf3611----2ae4fe6216fe---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2ae4fe6216fe--------------------------------)
    ·16 min read·Jul 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2ae4fe6216fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&user=Nathan+Rosidi&userId=ab636cbf3611&source=-----2ae4fe6216fe---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2ae4fe6216fe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-python-regex-a-deep-dive-into-pattern-matching-2ae4fe6216fe&source=-----2ae4fe6216fe---------------------bookmark_footer-----------)![](../Images/d5211f787d3686937ee70256f8039e72.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image created by the author on [Canva](https://www.canva.com/)
  prefs: []
  type: TYPE_NORMAL
- en: What is Python RegEx or Regular Expression?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regular expressions often shortened to regex, serve as a potent instrument for
    handling text. In essence, they consist of a series of characters that establish
    a pattern for searching. This pattern can be used for a wide range of string manipulations
    including matching patterns, replacing text, and dividing strings.
  prefs: []
  type: TYPE_NORMAL
- en: History of Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/355706d0bcfe6d04d89723fe03d035e7.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image Source:* [*http://serge.mehl.free.fr/chrono/Kleene.html*](http://serge.mehl.free.fr/chrono/Kleene.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Mathematician Stephen Cole Kleene first introduces regular expressions in the
    1950s as a notation to describe regular sets or regular languages.
  prefs: []
  type: TYPE_NORMAL
- en: Today, regular expressions have become an essential skill for programmers, data
    scientists, and IT professionals.
  prefs: []
  type: TYPE_NORMAL
- en: Importance and Use Cases of Python RegEx or Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before delving into how these regular expressions can be used, by using Python,
    let’s see the different range of its applications to motivate ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Validation** : Regular expressions can be very useful to validate different
    types of data. (e-mail addresses, phone numbers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Scraping**: When scraping data through web pages, regular expressions
    can be used to parse HTML and isolate the necessary information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search and Replace**: Regular expressions are good at identifying strings
    that conform to a specific pattern and substituting them with alternatives. This
    capability is especially valuable in text editors, databases, and coding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Syntax Highlighting:** A number of text editors use regular expressions to
    do syntax highlighting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural Language Processing (NLP)**: Within NLP, regular expressions can
    be used for tasks such as tokenization, stemming, and an array of other text processing
    functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log Analysis**: In dealing with log files, regular expressions are effective
    in extracting particular log entries or analyzing patterns over a period of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now I hope, you are motivated enough!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started with re module, which is all about Regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with Python’s re Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Great, let’s get started with Python’s re module fundamentals. In the next sections,
    we will cover more advanced topics.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the re Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python provides innate support for regular expressions via the re module.
  prefs: []
  type: TYPE_NORMAL
- en: This module is Python’s standard library, which means you don’t have to install
    it externally, it will come with every Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: The re module contains various functions and classes to work with regular expressions.
    Some of the functions are used for matching text, some for splitting text, and
    others for replacing text.
  prefs: []
  type: TYPE_NORMAL
- en: It includes a wide range of functions an classes tailored for handling regular
    expressions. Amon these, certain functions are designated for text matching, remaining
    ones for text splitting or text replacements.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the re Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already mentioned, it came with installation, so no need to worry about
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why, to start using regular expressions in Python, you need to import
    the re library first. You can do this by using the import statements as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After the library is imported, you can start its features like functions and
    classes, provided by the re module.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you want to find all occurrences of the word “Python” in a string.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the findall() function from the re module.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/06fbbbbf6dd2e2d0b4bb8738226a45cd.png)'
  prefs: []
  type: TYPE_IMG
- en: There are many more functions in the re module that we can use to build more
    complex patterns.
  prefs: []
  type: TYPE_NORMAL
- en: But first, let’s see the common functions in the re Module.
  prefs: []
  type: TYPE_NORMAL
- en: Common Functions in the re Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before expressing to you the fundamentals of Python RegEx, let’s see the common
    functions first, to grasp the remaining concepts better. The re module includes
    many different functions. By using them, we can perform different operations.
  prefs: []
  type: TYPE_NORMAL
- en: In the following parts, we will discover some of them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/316381be82d9bd520f1841735655d0c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image created by the author on [Canva](https://www.canva.com/)
  prefs: []
  type: TYPE_NORMAL
- en: a. re.match() Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The re.match() catches whether the regular expression starts with the specific
    string or not.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a match, the function returns a match object; if not, it returns
    none.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll use the re.match() function. Here we will check whether the string
    text starts with the word “Python” or not. Then we’ll print the result to the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/13953395f653add262f3c05dc0f0facc.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that the pattern “Python” matches the beginning of the text.
  prefs: []
  type: TYPE_NORMAL
- en: b. re.search() Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In contrast to re.match(), the re.search() function scans the entirety of the
    string in search of a match and yields a match object if one is discovered.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, we use the re.search() function to search for the word
    “amazing” anywhere in the string text. If the word is found, we print it; otherwise,
    we print “No match found”.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88ce4b491c7aec745a428317c75614f3.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that our code catches amazing from the given text.
  prefs: []
  type: TYPE_NORMAL
- en: c. re.findall() Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The re.findall() function is used to collect all the non-overlapping matches
    of a pattern in the string. And it returns these matches as a list of strings.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we use the re.findall() function to find all “a” in
    the string. The matches are returned as a list, which then we print to the console.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38797c77d84525c72ee82185f20b457e.png)'
  prefs: []
  type: TYPE_IMG
- en: The output represented all non-overlapping occurrences of the letter “a” found
    in our text.
  prefs: []
  type: TYPE_NORMAL
- en: d. re.finditer() Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The re.finditer() function bears resemblance to re.findall(), however it returns
    an iterator, that yields match objects.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, re.finditer() function is used to find all occurrences
    of the letter “a” in the string text. It returns an iterator of match objects
    and we print the index and value of each match.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3963aa4048a0e9c8b6c9c48e94102261.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows the index of the pattern “a” in the text.
  prefs: []
  type: TYPE_NORMAL
- en: e. re.sub() Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The re.sub() function is used to do a replacement with one string to another.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll use the re.sub() function to replace “Python” with “Java”.
  prefs: []
  type: TYPE_NORMAL
- en: We then print the modified string.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8486f32dba380145eae49f69b5511d89.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that we can successfully replace “Python” with “Java” from
    our text.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discover into the basic patterns that can be used
    in regular expressions to match a variety of text patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Patterns in Python Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with basic patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions are constructed through the combination of literal characters,
    meta-characters, and quantifiers. So, grasping these fundamental components is
    important for creating effective regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with literal characters.
  prefs: []
  type: TYPE_NORMAL
- en: a. Literal Characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Literal characters are the simplest form of pattern matching in regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: They match themselves exactly and do not have a special meaning.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the regular expression python will match the string python exactly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98d006028b6a64feb2e1ff645130f419.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that our re.findall() function found all instances of the pattern
    “python”ç
  prefs: []
  type: TYPE_NORMAL
- en: b. Meta-characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meta-characters like “.”, “‘^”, “$”. These characters can be very important
    to manipulate strings. Let’s see.
  prefs: []
  type: TYPE_NORMAL
- en: i. Dot (.)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dot . is like a Joker card. It can stand in for any single character except
    a newline.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, we’ll use a regular expression pattern “p.t”.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c44c2a62673674d4ba8391eccf7cd5ba.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that our code found all three character instances which start
    with “p” and ends with “t”.
  prefs: []
  type: TYPE_NORMAL
- en: ii. Caret (^)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The caret ^ is used to check if a string starts with a certain character.
  prefs: []
  type: TYPE_NORMAL
- en: Let’ see an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code checks whether the text starts with Hello( Match found :
    “match” ) or not ( No match found )'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ea91ccd449a91fec82c5065ed0d4e9a.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that our code catches the hello pattern at the beginning of
    the text.
  prefs: []
  type: TYPE_NORMAL
- en: iii. Dollar Sign ($)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dollar sign $ is used to check if a string ends with a certain character.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code checks whether the text ends with the world$ ( if so print
    “ Match found: “match) or not ( if so print “No match found” )'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38c8fc07aee1d66759269dbcc02dd749.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that re.search() function found the text that ends with the
    word “world”.
  prefs: []
  type: TYPE_NORMAL
- en: c. Quantifiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantifiers are used to define how many times characters(or character) should
    appear in the pattern you are trying to match.
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we will look at examples about the asterisk (*), continue
    with the plus sign (+), and the question mark (?), and finish with curly braces
    ({}).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with an asterisk.
  prefs: []
  type: TYPE_NORMAL
- en: i. Asterisk (*)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The asterisk (*) in a regular expression signifies that the previous character
    can appear zero or more times.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see the code. In the following code, we first define the pattern ( “py”),
    then we will use findall( ) function.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/080282d827bd7bc7b39b86b2566ac7e2.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows all because asterisks allow for “y” to appear as zero or more
    times.
  prefs: []
  type: TYPE_NORMAL
- en: ii. Plus (+)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plus + matches 1 or more repetitions of the previous character.
  prefs: []
  type: TYPE_NORMAL
- en: Here we again use findlall() function with the py pattern but this time we will
    use plus(+).
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf5c1b1d5cc687bada74b5b0da584ac3.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see the output, plus requires at least one or more “y” characters
    after “p”.
  prefs: []
  type: TYPE_NORMAL
- en: iii. Question Mark (?)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The question mark ? matches 0 or 1 repetition of the previous character. It
    makes the previous character optional.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e46075bfa16b69f5e0a23ff4a1397bf1.png)'
  prefs: []
  type: TYPE_IMG
- en: In the output, you can see that it only matches “p” and “py”, since question
    mark allows to appear “y” one time or zero times.
  prefs: []
  type: TYPE_NORMAL
- en: iv. Curly Braces ({})
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Curly braces {} allow you to match a specific number of repetitions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1e3852f2a26e8e72cdae20e85c39e85.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, the pattern matches “pyy” and “pyyy” but not “py” or “pyyyy”
    because we specified that we want to match exactly 2 or 3 “y” characters after
    “p”.
  prefs: []
  type: TYPE_NORMAL
- en: Special Characters in Python Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Special can be used to build more complex patterns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd2fbe5fc6b93a6d4252bbd3800c0e27.png)'
  prefs: []
  type: TYPE_IMG
- en: Image created by the author on [Canva](https://www.canva.com/)
  prefs: []
  type: TYPE_NORMAL
- en: a. Character Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see character classes first.
  prefs: []
  type: TYPE_NORMAL
- en: In the following examples, we will see 3 of them.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with \d, \D.
  prefs: []
  type: TYPE_NORMAL
- en: i. \d, \D
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “\d” is used to find numbers (from 0 to 9), on the contrary, “\D” is used
    to find elements that are not numbers.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, “\d” scans through the text string and retrieve numbers
    from the text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b85b1d7d069608beabe2c54938e1b56.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that we found all digits (0–9) in the text.
  prefs: []
  type: TYPE_NORMAL
- en: ii. \s, \S
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “\s” can be used to find whitespace characters, on the opposite “\S can
    be used to find anything that is not whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: In the below, the regular expression “\s” identifies all spaces and tabs in
    the given text.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e812a7ec8a6577267b96398574bbd7f2.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see from the outputs that we can identify all the whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: iii. \w, \W
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “\w” can be used to find words. (letters, numbers, and underscore characters)”\W”
    is the opposite of that.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, “\w” retrieves all letters and numbers from the text.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7dc9f617a83454f0068210b047dd7b2b.png)'
  prefs: []
  type: TYPE_IMG
- en: b. Predefined Character Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Predefined character classes offer shortcuts for common classes. For example,
    “\d” is a predefined character class that represents digits.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the “\d” pattern extracts all numerical digits from the given
    text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/caf0ef71691f62e07213c4de164e3daf.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that our code has found all instances of predefined character
    class “\d” (representing all digits) in the text.
  prefs: []
  type: TYPE_NORMAL
- en: c. Custom Character Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom character classes allow you to define your own set of characters using
    square brackets [].
  prefs: []
  type: TYPE_NORMAL
- en: In the example below, the custom character class “[aeiou]” is used to find all
    vowel letters in the text.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/de8ec38f248f91d0205c26f8d01a120b.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows all instances of vowels in the text as we defined it.
  prefs: []
  type: TYPE_NORMAL
- en: We also can use “-” to define the range of characters.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d99317e04c37175596423be53e5b9f89.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we can the output consists of the uppercase letters in the text.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Python Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you use the same regular expression multiple times in a script, it is time-saving
    to compile it into a pattern object first. This saves a lot of time because the
    regular expression doesn’t need to be parsed again with each use.
  prefs: []
  type: TYPE_NORMAL
- en: a. The compile() Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The re.compile() method can be used to compile a regular expression pattern
    into a pattern object.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have this pattern object, we can call its methods (matching text, searching,
    and other operations.)
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b9918f5ae19099cb8a82b7bb8732f06.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows digits.
  prefs: []
  type: TYPE_NORMAL
- en: b. Benefits of Compiling Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some benefits of using regular expressions;
  prefs: []
  type: TYPE_NORMAL
- en: '**Performance**: It is faster, especially if the regular expressions will be
    used again and again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusability**: Once compiled, the same pattern object can be reused multiple
    times within different parts of the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readability**: Using a pattern object can make your code cleaner, especially
    if you are using complex regular expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a simple example of compiled regular expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdc2aab30fcacd6fc1b3734c7138a6d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let’s check the second text.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d8c8b8899230ae1a78b6d41a92a162bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Our example above is rather a simple one for you to grasp the importance of
    reusability, performance, and readability, especially when our pattern plan to
    use repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Practical Example: Extracting Phone Numbers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let’s test what we discover together by writing a Python script
    to extract phone numbers from text.
  prefs: []
  type: TYPE_NORMAL
- en: This one is a common use of regular expressions, especially in the data-cleaning
    process.
  prefs: []
  type: TYPE_NORMAL
- en: a. Defining the Regular Expression Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phone numbers can be in different formats, especially in different countries,
    so you can adjust these numbers according to yours, for this example, let’s consider
    the format XXX-XXX-XXXX, where X is a digit.
  prefs: []
  type: TYPE_NORMAL
- en: The following code defines a pattern that matches the format above and complies
    with this pattern into a regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: b. Using the findall() Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use findall() method to extract phone numbers that
    matched our pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The following code uses a regular expression pattern to find and extract all
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: c. Printing the Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let’s print the extracted phone numbers to the console.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fa87b85a078a729e0a216f2db40a2e4.png)'
  prefs: []
  type: TYPE_IMG
- en: d. Full Example Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the full Python script that combines all the steps above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/611a3a89982a2d5c60f71fd670ace7b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you continue to work with regular expressions, here are a few best practices
    to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Keep it Simple**: Simplicity is the key. It is generally advised to use a
    simpler pattern because regular expressions can be complicated instantly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comment Your Patterns**: When developing regular expressions for your project,
    don’t forget to include comments inside your notes, as we told it can be complicated,
    but once you did this when you turn back, your code will be reusable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test Thoroughly**: Test your code over and over again, because regular expressions
    can sometimes produce unexpected results due to their complex nature, that is
    why testing it rigorously will ensure your work will work as intended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Raw Strings**: When you’re working with text in Python, sometimes you
    use special characters that have a different meaning than just the character itself
    (like backslash \ is or \n for a new line ). To avoid this confusion, Python allows
    you to use what’s called a “raw string”. You make a string “raw” by putting the
    letter “r” right before the first quote of the string. When you do this, Python
    understands that backslashes in that string should be treated just like normal
    characters and not as special ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this guide, we explored the realm of Python RegEx or Regular Expressions.
    We started with common functions and fundamentals and go through more advanced
    concepts and practical examples. But remember doing real-life projects, that will
    count as an example for your career to deepen this understanding of your mind.
    Just by doing so, you’ll develop knowledge and save yourself from googling whenever
    you work on Python regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Check out this [comprehensive guide to advanced Python concepts](https://www.stratascratch.com/blog/a-comprehensive-guide-to-advanced-python-concepts/?utm_source=blog&utm_medium=click&utm_campaign=kdn+python+regex)
    to get an overview of such concepts.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you also gained valuable information about Python RegEx by reading this
    article too.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://www.stratascratch.com*](https://www.stratascratch.com/blog/mastering-python-regex-a-deep-dive-into-pattern-matching/?utm_source=blog&utm_medium=click&utm_campaign=kdn+python+regex)*.*'
  prefs: []
  type: TYPE_NORMAL
