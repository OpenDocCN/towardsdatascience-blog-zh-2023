["```py\nfrom datetime import datetime\nimport pytz\n\ntz = pytz.timezone('Asia/Singapore')\ndt = datetime(2023, 5, 4, 10, 30, 0, tzinfo=tz)\n```", "```py\nfrom datetime import datetime\n\ndt = datetime(2023, 5, 4, 10, 30, 0)\n```", "```py\nfrom datetime import timedelta\n\noffset = timedelta(hours=1)\ndt2 = dt + offset\n```", "```py\nprint(dt.year) #2023\nprint(dt.month) #5 \nprint(dt.day) #4\nprint(dt.hour) #11\nprint(dt.minute) #30\nprint(dt.second) #0\nprint(dt.microsecond) #0\nprint(dt.tzinfo) #Asia/Singapore\n```", "```py\nprint(dt.isoformat())\n#return '2023-05-04T10:30:00+06:55'\n\nprint(dt.isocalendar()) \n#return tuple of datetime.IsoCalendarDate(year=2023, week=18, weekday=4)\n\ndatetime.fromisoformat(\"2023-01-05\")\n#return datetime.datetime(2023, 1, 5, 0, 0)\n\ndatetime.fromisoformat('2011-11-04T00:05:23')\n#return datetime.datetime(2011, 11, 4, 0, 5, 23)\n\ndatetime.fromisoformat('2011-11-04 00:05:23.283')\n#return datetime.datetime(2011, 11, 4, 0, 5, 23, 283000)\n\ndatetime.fromisoformat('2011-11-04 00:05:23.283+00:00')\n#return datetime.datetime(2011, 11, 4, 0, 5, 23, 283000, tzinfo=datetime.timezone.utc)\n\ndatetime.fromisoformat('2011-11-04T00:05:23+04:00')\n#return datetime.datetime(2011, 11, 4, 0, 5, 23, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))) \n```", "```py\nfrom datetime import datetime\nimport pytz\n\ntz = pytz.timezone('Asia/Singapore')\ndt = datetime(2023, 5, 4, 10, 30, tzinfo=tz)\n\n# Format as YYYY-MM-DD\n# Output: 2023-05-04\nprint(dt.strftime('%Y-%m-%d'))\n\n# Format as MM/DD/YYYY\n# Output: 05/04/2023\nprint(dt.strftime('%m/%d/%Y'))   \n\n# Format as Weekday, Month DD, YYYY HH:MM PM/AM\n# Output: Thursday, May 04, 2023 10:30 AM\nprint(dt.strftime('%A, %B %d, %Y %I:%M %p'))\n\n# .strptime() converts string to datetime object\n# Output: 2023-05-04 20:30:45 with type datetime.datetime\ndt_parsed = datetime.strptime(\"2023-05-04 20:30:45\", '%Y-%m-%d %H:%M:%S')\nprint(dt_parsed)\n\n# Another example of .strptime()\n# Output: 2022-05-05 12:30:00\ninput_str = '5 May 2022 12:30 PM'\ninput_format = '%d %B %Y %I:%M %p'\ndt = datetime.strptime(input_str, input_format)\n```", "```py\nfrom datetime import timedelta\n\ndelta_1 = timedelta(days=5, seconds=55, microseconds=555)\ndelta_2 = timedelta(days=1, seconds=11, microseconds=111)\n\nprint(delta_1.total_seconds()) #return 432055.000555\nprint(delta_1 - delta_2) #return 4 days, 0:00:44.000444\nprint(delta_1 > delta_2) #return True\nprint(delta_1 * 2) #return datetime.timedelta(days=10, seconds=110, microseconds=1110)\nprint(delta_1 / 2) #datetime.timedelta(days=2, seconds=43227, microseconds=500278)\n```", "```py\nfrom datetime import datetime\n\n# create a datetime object for a specific date and time\ndt1 = datetime(2023, 5, 4, 10, 30, 0)\ndt2 = datetime(2023, 5, 4, 11, 30, 0)\n\n# convert the datetime object to a POSIX timestamp\ntimestamp1 = dt1.timestamp()\ntimestamp2 = dt2.timestamp()\n\nprint(timestamp1)  # output: 1683171000.0\nprint(timestamp2)  # output: 1683174600.0\nprint(timestamp2 - timestamp1)  # output: 3600.0\n```", "```py\nfrom datetime import datetime\n\n# create a POSIX timestamp for a specific date and time\ntimestamp = 1680658200.0\n\n# convert the POSIX timestamp to a datetime object\ndt = datetime.fromtimestamp(timestamp)\n\nprint(dt)  # output: 2023-04-05 08:30:00\n```", "```py\nrandom_timestamp = pd.read_csv(\"random_timestamp.csv\")\nrandom_timestamp\n```", "```py\n#Creating the offset\noffset = np.where(random_timestamp.country == \"Bangkok\", \"+07:00\", \"+08:00\")\noffset\n\n#Convert data type using pd.to_datetime, groupby offset, convert to SG time\n(pd\n .to_datetime(random_timestamp.timestamp)\n .groupby(offset)\n .transform(lambda s: s.dt.tz_localize(s.name)\n                       .dt.tz_convert('Asia/Singapore'))\n)\n```", "```py\noffset = np.where(random_timestamp.country == \"Bangkok\", \"+07:00\", \"+08:00\")\noffset\n\n(random_timestamp\n .assign(sg_time = (pd\n                     .to_datetime(random_timestamp.timestamp)\n                     .groupby(offset)\n                     .transform(lambda s: s.dt.tz_localize(s.name)\n                                           .dt.tz_convert('Asia/Singapore'))),\n         sg_hour = lambda df_: df_.sg_time.dt.hour,\n         sg_minute = lambda df_: df_.sg_time.dt.minute,\n         sg_second = lambda df_: df_.sg_time.dt.second,\n         sg_weekday = lambda df_: df_.sg_time.dt.weekday,\n         sg_weekofyear = lambda df_: df_.sg_time.dt.isocalendar().week,\n         sg_strftime = lambda df_: df_.sg_time.dt.strftime('%A, %B %d, %Y %I:%M %p'))\n)\n```", "```py\n(temp_record\n .set_index(\"timestamp\")\n .resample('D')\n .agg(['min', 'max', 'mean'])\n .round(1)\n)\n```", "```py\n(temp_record\n .set_index(\"timestamp\")\n .resample('D')\n .transform('min')\n .round(1)\n)\n```"]