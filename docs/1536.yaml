- en: Time Series Data Analysis with sARIMA and Dash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/time-series-data-analysis-with-sarima-and-dash-f4199c3fc092?source=collection_archive---------3-----------------------#2023-05-06](https://towardsdatascience.com/time-series-data-analysis-with-sarima-and-dash-f4199c3fc092?source=collection_archive---------3-----------------------#2023-05-06)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introducing a Dash web app that guides the analysis of time series datasets,
    using sARIMA models | [Live app](https://gabria1.pythonanywhere.com/) | [Git Hub](https://github.com/gabri-al/sarima_dashboard)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gabri-albini.medium.com/?source=post_page-----f4199c3fc092--------------------------------)[![Gabriele
    Albini](../Images/153b88c71ea4e5e221a90de3caa71cdb.png)](https://gabri-albini.medium.com/?source=post_page-----f4199c3fc092--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f4199c3fc092--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f4199c3fc092--------------------------------)
    [Gabriele Albini](https://gabri-albini.medium.com/?source=post_page-----f4199c3fc092--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F93c18fcb4ee6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftime-series-data-analysis-with-sarima-and-dash-f4199c3fc092&user=Gabriele+Albini&userId=93c18fcb4ee6&source=post_page-93c18fcb4ee6----f4199c3fc092---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f4199c3fc092--------------------------------)
    ·10 min read·May 6, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff4199c3fc092&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftime-series-data-analysis-with-sarima-and-dash-f4199c3fc092&user=Gabriele+Albini&userId=93c18fcb4ee6&source=-----f4199c3fc092---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff4199c3fc092&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftime-series-data-analysis-with-sarima-and-dash-f4199c3fc092&source=-----f4199c3fc092---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with time-series datasets, statistics models such as SARIMA can
    be a powerful tool to understand the data components: trend, seasonality, and
    dependency over time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This article will briefly introduce sARIMA models and then present a web application
    that guides the user through the steps needed to analyze the data and fit the
    optimal model to perform predictions. This application has been built using *Plotly
    Dash* and Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Link](https://gabria1.pythonanywhere.com/) to the live app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Link](https://github.com/gabri-al/sarima_dashboard) to the Git Hub repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Table of contents:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[1\. Theoretical introduction on Sarima Models](#9e39)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.1 The building blocks of the model](#51ab)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.2 How to choose the model hyperparameters: ACF and PACF](#ac04)'
  prefs: []
  type: TYPE_NORMAL
- en: '[1.3 Stationarity](#7ddf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2\. A practical template to work with Sarima models](#39e6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.1 Plot your data](#d71f)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.2 Transform the data to make it stationary](#7fc2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.3 Identify suitable model hyperparameters with the ACF and PACF](#d634)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.4 Perform a model grid search to identify optimal hyperparameters](#6667)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2.5 Final model: fit and predictions](#4f46)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Conclusion](#71aa)'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Theoretical introduction on Sarima Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**1.1 The building blocks of the model**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand what sARIMA models are, let’s first introduce the building blocks
    of these models.
  prefs: []
  type: TYPE_NORMAL
- en: 'sARIMA is a composition of different sub-models (i.e. polynomials that we use
    to represent our time series data) which form the acronym: seasonal (s) autoregressive
    (AR) integrated (I) moving average (MA):'
  prefs: []
  type: TYPE_NORMAL
- en: '**AR**: the autoregressive component, governed by the hyperparameter “p”, assumes
    that the current value at a time “t” can be expressed as a linear combination
    of the previous “p” values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/9f532854121b488433262a2cf04d047f.png)'
  prefs: []
  type: TYPE_IMG
- en: AR | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**I**: the integrated component is represented by the hyperparameter “d”, which
    is the degree of the differencing transformation applied to the data. *Differencing*
    is a technique used to remove trend from the data (i.e. make the data stationary
    with respect to the mean, as we’ll see later), which helps the model fit the data
    as it isolates the trend component (we use d=1 for linear trend, d=2 for quadratic
    trend, …). Differencing the data with d=1 means working with the difference between
    consecutive data points:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/1b0b22f6ae651a2c2e89697f338bbd30.png)'
  prefs: []
  type: TYPE_IMG
- en: I | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**MA**: the moving average component, governed by the hyperparameter “q”, assumes
    that the current value at a time “t” can be expressed as a constant term (usually
    the mean) plus a linear combination of the errors of the previous “q” points:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/cd9dac457d1a30c68d08e038e344d9e9.png)'
  prefs: []
  type: TYPE_IMG
- en: MA | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'If we consider the components so far, we get “ARIMA”, which is the name of
    a model family to work with time series data with no seasonality. sARIMA models
    are a generalization to work with seasonal data with the addition of an **S**-component:
    the seasonal component, which consists of a new set of AR, I, MA components with
    a seasonal lag. In other words, once identified a seasonality and defined its
    lag (represented by the hyperparameter “m” — e.g. m=12 means that every year,
    on a monthly dataset, we see the same behavior), we create a new set of AR (P),
    I (D), MA (Q) components, with respect to the seasonal lag (m) (e.g. if D=1 and
    m=12, this means that we apply a 1-degree differencing to the series, with a lag
    of 12).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To sum up, the sARIMA model is defined by 7 hyperparameters: 3 for the non-seasonal
    part of the model, and 4 for the seasonal part. They are indicated as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sARIMA (p,d,q) (P,D,Q)m**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thanks to the model flexibility, we can “switch off” the components that are
    not embodied in our data (i.e. if the data doesn’t have a trend or doesn’t have
    seasonality, the respective parameters can be set to 0) and still use the same
    model framework to fit the data.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, among sARIMA limitations, we have that these models can capture
    only 1 seasonality. If a daily dataset has a yearly plus a weekly seasonality,
    we’ll need to choose the strongest one.
  prefs: []
  type: TYPE_NORMAL
- en: '1.2 How to choose the model hyperparameters: ACF and PACF'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To identify the model hyperparameters, we normally look at the ***autocorrelation***
    and ***partial-autocorrelation*** of the time series; since all the above components
    use past data to model present and future points, we should investigate how past
    and present data are correlated and define how many past data points we need,
    to model the present.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this reason, autocorrelation and partial-autocorrelation are two widely
    used functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ACF** (autocorrelation): describes the correlation of the time series, with
    its lags. All data points are compared to their previous lag 1, lag 2, lag 3,
    … The resulting correlation is plotted on a histogram. This chart (also called
    “correlogram”) is used to visualize how much information is retained throughout
    the time series. The ACF helps us in choosing the sARIMA model because:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The ACF helps to identify the MA(q) hyperparameter**.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**PACF** (partial autocorrelation): describes the partial correlation of the
    time series, with its lags. Differently from the ACF, the PACF shows the correlation
    between a point X_t and a lag, which is not explained by common correlations with
    other lags at a lower order. In other words, the PACF isolates the direct correlation
    between two terms. The PACF helps us in choosing the sARIMA model because:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The PACF helps to identify the AR(p) hyperparameter**.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before using these tools, however, we need to mention that ACF and PACF can
    only be used on a “**stationary**” time series.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.3 Stationarity**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A (weakly) stationary time series is a time series where:'
  prefs: []
  type: TYPE_NORMAL
- en: The **mean is constant** over time (i.e. the series fluctuates around a horizontal
    line without positive or negative trends)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **variance is constant** over time (i.e. there is no seasonality or change
    in the deviation from the mean)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of course not all time series are natively stationary; however, we can transform
    them to make them stationary. The **most common transformations** used to make
    a time series stationary are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **natural log**: by applying the log to each data point, we usually manage
    to make the time series stationary with respect to the *variance*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Differencing**: by differencing a time series, we usually manage to remove
    the trend and make the time series stationary with respect to the *mean*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After transforming the time series, we can use two tools to confirm that it
    is stationary:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Box-Cox** plot: this is a plot of the rolling mean (on the x-axis) vs
    the rolling standard deviation (on the y-axis) (or the mean vs variance of grouped
    points). Our data is stationary if we don’t observe any particular trends in the
    chart and we see little variation on both axes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Augmented Dickey–Fuller** test (ADF): a statistical test in which we
    try to reject the null hypothesis stating that the time series is non-stationary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once a time series is stationary, we can analyze the ACF and PACF patterns,
    and find the SARIMA model hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. A practical template to work with Sarima models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Identifying the sARIMA model that fits our data consist of a series of steps,
    which we will perform on the AirPassenger dataset (available [here](https://www.kaggle.com/datasets/rakannimer/air-passengers)).
  prefs: []
  type: TYPE_NORMAL
- en: Each step roughly corresponds to a “page” of the Dash web app.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.1 Plot your data**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a line chart of your raw data: some of the features described above
    can be seen by the naked eye, especially stationarity, and seasonality.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81f154da50c8dc0a426ddf85c44d8c65.png)'
  prefs: []
  type: TYPE_IMG
- en: Raw line chart | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In the above chart, we see a positive linear trend and a recurrent seasonality
    pattern; considering that we have monthly data, we can assume the seasonality
    to be yearly (lag 12). The data is not stationary.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.2 Transform the data to make it stationary**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to find the model hyperparameters, we need to work with a stationary
    time series. So, if the data is not stationary, we’ll need to transform it:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with the *log transformation*, to make the data stationary with respect
    to the variance (the log is defined over positive values. So, if the data presents
    negative or 0 values, add a constant to each datapoint).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply *differencing* to make the data stationary with respect to the mean. Usually
    start with differencing of order 1 and lag 1\. Then, if data is still not stationary,
    try differencing with respect to the seasonal lag (e.g. 12 if we have monthly
    data). (Using a reverse order won’t make a difference).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With our dataset, we need to perform the following steps to make it fully stationary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a212350ae3571e23b3cd0da09853ff10.png)'
  prefs: []
  type: TYPE_IMG
- en: Stationary transformations | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'After each step, by looking at the ADF test p-value and Box-Cox plot, we see
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: The Box-Cox plot gets progressively cleaned from any trend and all points get
    closer and closer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The p-value progressively drops. We can finally reject the null hypothesis of
    the test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/70c7986a1c4273183d97a9ba36534ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: Stationary transformations (2) | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Identify suitable model hyperparameters with the ACF and PACF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While transforming the data to stationary, we have already identified 3 parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we applied differencing, the model will include differencing components.
    We applied a differencing of 1 and 12: we can set d=1 and D=1 with m=12 (seasonality
    of 12).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the remaining parameters, we can look at the ACF and PACF after the transformations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, we can apply the following *rules*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have an **AR(p) process if**: the PACF has a significant spike at a certain
    lag “p” (and no significant spikes after) and the ACF decays or shows a sinusoidal
    behavior (alternating positive, negative spikes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have a **MA(q) process if**: the ACF has a significant spike at a certain
    lag “q” (and no significant spikes after) and the PACF decays or shows a sinusoidal
    behavior (alternating positive, negative spikes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of **seasonal AR(P) or MA(Q) processes**, we will see that the significant
    spikes repeat at the seasonal lags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By looking at our example, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6f7395e4f3f961572fd1ae2f62519f7.png)'
  prefs: []
  type: TYPE_IMG
- en: ACF and PACF after transformations | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The closest rule to the above behavior, suggests some MA(q) process with “q”
    between 1 and 3; the fact that we still have a significant spike at 12, may also
    suggest an MA(Q) with Q=1 (since m=12).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the ACF and PACF to get a range of hyperparameter values that will form
    model candidates. We can compare these different model candidates against our
    data, and pick the top-performing one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example, our model candidates seem to be:'
  prefs: []
  type: TYPE_NORMAL
- en: SARIMA (p,d,q) (P,D,Q)m = (0, 1, 1) (0, 1, 1) 12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SARIMA (p,d,q) (P,D,Q)m = (0, 1, 3) (0, 1, 1) 12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.4 Perform a model grid search to identify optimal hyperparameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Grid search can be used to compare several model candidates against each other:
    we fit each model to the data and pick the top-performing one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up a grid search we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: create a list with all possible combinations of model hyperparameters, given
    a range of values for each hyperparameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fit each model and measure its performance using a KPI of choice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: select the hyperparameters looking at the top-performing models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, we will compare model performances using the **AIC (Akaike information
    criterion) score**. This KPI formula consists of a trade-off between the fitting
    error (accuracy) and model complexity. In general, when the complexity is too
    low, the error is high, because we over-simplify the model fitting task; on the
    contrary, when complexity is too high, the error is still high due to overfitting.
    A trade-off between these two will allow us to identify the “top-performing” model.
  prefs: []
  type: TYPE_NORMAL
- en: '***Practical note***: with fitting a sARIMA model, we will need to use the
    original dataset with the log transformation (if we’ve applied it), *but we don’t
    want to use the data with differencing transformations*.'
  prefs: []
  type: TYPE_NORMAL
- en: We can choose to reserve part of the time series (usually the most recent 20%
    observations) as a test set.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, based on the below hyperparameter ranges, the best model is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb5460882ffcffd8fcdb869b52d0fdb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Model grid search | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: SARIMA (p,d,q) (P,D,Q)m = (0, 1, 1) (0, 1, 1) 12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '2.5 Final model: fit and predictions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can finally predict data for train, test, and any future out-of-sample observation.
    The final plot is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dcf73bdafd2c567821d41ea869290f62.png)'
  prefs: []
  type: TYPE_IMG
- en: Final model | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'To confirm that we captured all correlations, we can plot the model residuals
    ACF and PACF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c31bf0dd9b87c082d71983112314076e.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, some signal from the strong seasonality component is still present,
    but most of the remaining lags have a 0 correlation.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps described above should work on any dataset which could be modeled
    through sARIMA. To recap :'
  prefs: []
  type: TYPE_NORMAL
- en: 1-Plot & explore your data
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90bb6db29864cf9fcf331c82231e2d1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Dash live app | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 2-Apply transformations to make the data stationary (focus on the left-end charts
    and the ADF test)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5273f64d529ddd50a83be56bcc775db9.png)'
  prefs: []
  type: TYPE_IMG
- en: Dash live app | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 3-Identify suitable hyperparameters by looking at the ACF and PACF (right-end
    charts)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98eb324d81734caa20675763ee6a9f6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Dash live app | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 4-Perform a grid search to select optimal hyperparameters
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bad19c8ce9dfd23fabf51ce17c6a27d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Dash live app | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 5-Fit and predict using the best model
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/057f60b83a7e93593e8b4bcdff5721c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Dash live app | Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Download the app locally, upload your own datasets (by replacing the .csv file
    in the data folder) and try to fit the best model.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
