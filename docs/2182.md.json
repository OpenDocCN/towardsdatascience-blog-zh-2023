["```py\nCREATE OR REPLACE TABLE `your_project.your_dataset.date_dimension` AS\n\nSELECT\nfull_date\n, EXTRACT(MONTH FROM full_date) AS calendar_month_number\n, EXTRACT(YEAR FROM full_date) AS calendar_year\n, EXTRACT(QUARTER FROM full_date) AS calendar_quarter\n, FORMAT_DATE('%B', full_date) AS calendar_month_name\n, EXTRACT(DAYOFWEEK FROM full_date) AS week_name\n, FORMAT_DATE('%A', full_date) AS day_name\n, CASE\n    WHEN EXTRACT(DAYOFWEEK FROM full_date) BETWEEN 2 AND 6\n      THEN TRUE\n    ELSE FALSE\n  END AS day_is_weekday\n, CASE\n    WHEN EXTRACT(DAYOFWEEK FROM full_date) = 1 THEN DATE_SUB(full_date, INTERVAL 2 DAY) -- Sunday\n    WHEN EXTRACT(DAYOFWEEK FROM full_date) = 2 THEN DATE_SUB(full_date, INTERVAL 3 DAY) -- Monday\n    ELSE DATE_SUB(full_date, INTERVAL 1 DAY)\n  END AS last_weekday\n, EXTRACT(MONTH FROM DATE_ADD(full_date, INTERVAL 6 MONTH)) AS fiscal_month\n, EXTRACT(YEAR FROM DATE_ADD(full_date, INTERVAL 6 MONTH)) AS fiscal_year\n, EXTRACT(QUARTER FROM DATE_ADD(full_date, INTERVAL 6 MONTH)) AS fiscal_quarter\nFROM UNNEST(GENERATE_DATE_ARRAY('2020-01-01', '2050-12-31', INTERVAL 1 DAY)) AS full_date\n```", "```py\nimport requests\nimport pandas as pd\n\nurl = 'https://data.opendatasoft.com/api/records/1.0/search/?dataset=georef-united-states-of-america-zc-point%40public&q=&facet=stusps_code&facet=ste_name&facet=coty_name&facet=cty_code&facet=zip'\nresponse = requests.get(url)\nzips = response.json()\n\npd.json_normalize(zips,record_path='records')\n```", "```py\nimport requests\nimport pandas as pd\nfrom datetime import date\n\n#Retrieve the latest dates from the exchangerate api\nurl = 'https://api.exchangerate.host/latest?base=USD'\nresponse = requests.get(url)\nrates = response.json()\n\n# Convert JSON list to a Pandas Dataframe & preview\nrates_list = list(rates['rates'].items())\ndf_rates = pd.DataFrame(rates_list, columns=['currency', 'value'])\ndf_rates['cycle_date'] = date.today()\ndf_rates.head(10)\n```", "```py\nrates_list = list(rates['rates'].items())\n```", "```py\ndf_rates = pd.DataFrame(rates_list, columns=['currency', 'value'])\n```"]