["```py\nchatgpt = ChatOpenAI(model_name='gpt-3.5-turbo')\ngpt3 = OpenAI(model_name='text-davinci-003')\ncohere = Cohere(model='command-xlarge')\nflan = HuggingFaceHub(repo_id=\"google/flan-t5-xl\")\n```", "```py\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import ConversationChain\nfrom langchain.memory import ConversationBufferWindowMemory, CombinedMemory, ConversationSummaryMemory\n\nconv_memory = ConversationBufferWindowMemory(\n    memory_key=\"chat_history_lines\",\n    input_key=\"input\",\n    k=1\n)\n\nsummary_memory = ConversationSummaryMemory(llm=OpenAI(), input_key=\"input\")\n# Combined\nmemory = CombinedMemory(memories=[conv_memory, summary_memory])\n_DEFAULT_TEMPLATE = \"\"\"The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\nSummary of conversation:\n{history}\nCurrent conversation:\n{chat_history_lines}\nHuman: {input}\nAI:\"\"\"\nPROMPT = PromptTemplate(\n    input_variables=[\"history\", \"input\", \"chat_history_lines\"], template=_DEFAULT_TEMPLATE\n)\nllm = OpenAI(temperature=0)\nconversation = ConversationChain(\n    llm=llm, \n    verbose=True, \n    memory=memory,\n    prompt=PROMPT\n)\n```", "```py\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain import LLMChain\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    HumanMessagePromptTemplate,\n)\nhuman_message_prompt = HumanMessagePromptTemplate(\n        prompt=PromptTemplate(\n            template=\"What is a good name for a company that makes {product}?\",\n            input_variables=[\"product\"],\n        )\n    )\nchat_prompt_template = ChatPromptTemplate.from_messages([human_message_prompt])\nchat = ChatOpenAI(temperature=0.9)\nchain = LLMChain(llm=chat, prompt=chat_prompt_template)\nsecond_prompt = PromptTemplate(\n    input_variables=[\"company_name\"],\n    template=\"Write a catchphrase for the following company: {company_name}\",\n)\nchain_two = LLMChain(llm=llm, prompt=second_prompt)\nfrom langchain.chains import SimpleSequentialChain\noverall_chain = SimpleSequentialChain(chains=[chain, chain_two], verbose=True)\n\n# Run the chain specifying only the input variable for the first chain.\ncatchphrase = overall_chain.run(\"colorful socks\")\nprint(catchphrase)\n```", "```py\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import load_tools, initialize_agent\nfrom langchain.tools import AIPluginTool\ntool = AIPluginTool.from_plugin_url(\"https://www.klarna.com/.well-known/ai-plugin.json\")\nllm = ChatOpenAI(temperature=0)\ntools = load_tools([\"requests\"] )\ntools += [tool]\n\nagent_chain = initialize_agent(tools, llm, agent=\"zero-shot-react-description\", verbose=True)\n\nagent_chain.run(\"what t shirts are available in klarna?\")\n```"]