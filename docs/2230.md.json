["```py\nimport numpy as np\n\n# Binary Classification\nsamples = np.array([[0.78, 0.22],\n                    [0.36, 0.64],\n                    [0.08, 0.92],\n                    [0.58, 0.42],\n                    [0.49, 0.51],\n                    [0.85, 0.15],\n                    [0.30, 0.70],\n                    [0.63, 0.37],\n                    [0.17, 0.83]])\n\ntrue_labels = np.array([0,1,0,0,0,0,1,1,1])\n```", "```py\ndef expected_calibration_error(samples, true_labels, M=5):\n    # uniform binning approach with M number of bins\n    bin_boundaries = np.linspace(0, 1, M + 1)\n    bin_lowers = bin_boundaries[:-1]\n    bin_uppers = bin_boundaries[1:]\n\n    # get max probability per sample i\n    confidences = np.max(samples, axis=1)\n    # get predictions from confidences (positional in this case)\n    predicted_label = np.argmax(samples, axis=1)\n\n    # get a boolean list of correct/false predictions\n    accuracies = predicted_label==true_labels\n\n    ece = np.zeros(1)\n    for bin_lower, bin_upper in zip(bin_lowers, bin_uppers):\n        # determine if sample is in bin m (between bin lower & upper)\n        in_bin = np.logical_and(confidences > bin_lower.item(), confidences <= bin_upper.item())\n        # can calculate the empirical probability of a sample falling into bin m: (|Bm|/n)\n        prob_in_bin = in_bin.mean()\n\n        if prob_in_bin.item() > 0:\n            # get the accuracy of bin m: acc(Bm)\n            accuracy_in_bin = accuracies[in_bin].mean()\n            # get the average confidence of bin m: conf(Bm)\n            avg_confidence_in_bin = confidences[in_bin].mean()\n            # calculate |acc(Bm) - conf(Bm)| * (|Bm|/n) for bin m and add to the total ECE\n            ece += np.abs(avg_confidence_in_bin - accuracy_in_bin) * prob_in_bin\n    return ece\n```", "```py\nexpected_calibration_error(samples, true_labels)\n```", "```py\n# Multi-class Classification\nsamples_multi = np.array([[0.25,0.2,0.22,0.18,0.15],\n                          [0.16,0.06,0.5,0.07,0.21],\n                          [0.06,0.03,0.8,0.07,0.04],\n                          [0.02,0.03,0.01,0.04,0.9],\n                          [0.4,0.15,0.16,0.14,0.15],\n                          [0.15,0.28,0.18,0.17,0.22],\n                          [0.07,0.8,0.03,0.06,0.04],\n                          [0.1,0.05,0.03,0.75,0.07],\n                          [0.25,0.22,0.05,0.3,0.18],\n                          [0.12,0.09,0.02,0.17,0.6]])\n\ntrue_labels_multi = np.array([0,2,3,4,2,0,1,3,3,2])\n```"]