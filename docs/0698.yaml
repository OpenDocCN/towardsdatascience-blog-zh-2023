- en: 'Mixed Integer Linear Programming: Formal definition and solution space'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合整数线性规划：正式定义与解空间
- en: 原文：[https://towardsdatascience.com/mixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892?source=collection_archive---------2-----------------------#2023-02-21](https://towardsdatascience.com/mixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892?source=collection_archive---------2-----------------------#2023-02-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/mixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892?source=collection_archive---------2-----------------------#2023-02-21](https://towardsdatascience.com/mixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892?source=collection_archive---------2-----------------------#2023-02-21)
- en: Theoretical foundations on how MILP is defined and how its solution space looks
    like visually
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MILP 的理论基础以及其解空间的视觉表现
- en: '[](https://medium.com/@modosist?source=post_page-----6b3286d54892--------------------------------)[![István
    Módos](../Images/23a22dc06f5a5ae26a2ce24e6d69ddf4.png)](https://medium.com/@modosist?source=post_page-----6b3286d54892--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6b3286d54892--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6b3286d54892--------------------------------)
    [István Módos](https://medium.com/@modosist?source=post_page-----6b3286d54892--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@modosist?source=post_page-----6b3286d54892--------------------------------)[![István
    Módos](../Images/23a22dc06f5a5ae26a2ce24e6d69ddf4.png)](https://medium.com/@modosist?source=post_page-----6b3286d54892--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6b3286d54892--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6b3286d54892--------------------------------)
    [István Módos](https://medium.com/@modosist?source=post_page-----6b3286d54892--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe14f7a362f6f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892&user=Istv%C3%A1n+M%C3%B3dos&userId=e14f7a362f6f&source=post_page-e14f7a362f6f----6b3286d54892---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6b3286d54892--------------------------------)
    ·10 min read·Feb 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6b3286d54892&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892&user=Istv%C3%A1n+M%C3%B3dos&userId=e14f7a362f6f&source=-----6b3286d54892---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe14f7a362f6f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892&user=Istv%C3%A1n+M%C3%B3dos&userId=e14f7a362f6f&source=post_page-e14f7a362f6f----6b3286d54892---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6b3286d54892--------------------------------)
    · 10 分钟阅读·2023年2月21日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6b3286d54892&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892&user=Istv%C3%A1n+M%C3%B3dos&userId=e14f7a362f6f&source=-----6b3286d54892---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6b3286d54892&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892&source=-----6b3286d54892---------------------bookmark_footer-----------)![](../Images/75859fc54c2dc8f3fe724ae323d022b5.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6b3286d54892&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmixed-integer-linear-programming-formal-definition-and-solution-space-6b3286d54892&source=-----6b3286d54892---------------------bookmark_footer-----------)![](../Images/75859fc54c2dc8f3fe724ae323d022b5.png)'
- en: Photo by [Ivan Bandura](https://unsplash.com/@unstable_affliction?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Ivan Bandura](https://unsplash.com/@unstable_affliction?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: This post is a continuation of the series ([previous post](/mixed-integer-linear-programming-1-bc0ef201ee87))
    on the theory and applications of Mixed Integer Linear Programming (MILP). Today,
    we look at
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是关于混合整数线性规划（MILP）理论和应用系列的延续（[上一篇文章](/mixed-integer-linear-programming-1-bc0ef201ee87)）。今天，我们将探讨
- en: the formal, general definition of MILP,
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MILP 的正式、一般定义，
- en: how its space of feasible solutions looks like.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以及其可行解空间的视觉表现。
- en: The first part describes how MILP models look in general, what are and are not
    valid MILP expressions. The second part shows a little bit of theory behind MILP,
    which will be useful in the future posts when we will be talking about the actual
    algorithm for solving MILP.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分描述了 MILP 模型的一般外观，哪些是有效的 MILP 表达式，哪些不是。第二部分展示了 MILP 背后的理论，这将在未来的帖子中讨论实际的
    MILP 求解算法时非常有用。
- en: This is quite a long post, so grab a coffee and dive in!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章比较长，所以请拿杯咖啡，深入阅读吧！
- en: Formal definition of Mixed Integer Linear Programming
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合整数线性规划的正式定义
- en: In the following text, I will use upper-case bold letters (e.g., ***A***, ***E***)
    for matrices and lower-case bold letters for vectors (e.g., ***x***, ***y***).
    MILP is an *optimisation problem* that can be formulated in matrix notation as
    follows
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的文本中，我将使用大写粗体字母（例如，***A***、***E***）表示矩阵，使用小写粗体字母表示向量（例如，***x***、***y***）。MILP
    是一个*优化问题*，可以用矩阵表示法形式化如下：
- en: '![](../Images/173ffb14d08527cfda0d96a3474f2b34.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/173ffb14d08527cfda0d96a3474f2b34.png)'
- en: Lets break this monster down. We are given a *problem instance* represented
    by matrices and vectors ***A***, ***E***, ***b***, ***f***, ***c***, ***d*** from
    various domains (ℝ stands for a set of real numbers and ℤ for a set of integer
    numbers). For example, if we return to our budget problem from the first post,
    the problem instance represents assets, their costs, estimated profits and also
    the budget. We say that integer vector ***x*** and continuous vector ***y*** are
    a *feasible solution* to the given problem instance, if the following conditions
    holds
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个难题拆解开来。我们得到一个由矩阵和向量***A***、***E***、***b***、***f***、***c***、***d*** 代表的*问题实例*，这些矩阵和向量来自不同领域（ℝ代表实数集合，ℤ代表整数集合）。例如，如果我们回到第一个帖子中的预算问题，这个问题实例表示资产、它们的成本、估计的利润以及预算。我们说整数向量***x***和连续向量***y***是给定问题实例的*可行解*，如果满足以下条件：
- en: '![](../Images/2767e4ea01ff77949febab73a238dbd2.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2767e4ea01ff77949febab73a238dbd2.png)'
- en: By writing these conditions component-wise, we get
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过逐项写出这些条件，我们得到：
- en: '![](../Images/5e4e4824910d02fd570cc0214d88aee7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e4e4824910d02fd570cc0214d88aee7.png)'
- en: where 𝒂ᵢ are the rows of matrix ***A*** and 𝒆ᵢ are the rows of matrix ***E***.
    These inequalities are called *constraints*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 𝒂ᵢ 是矩阵 ***A*** 的行，𝒆ᵢ 是矩阵 ***E*** 的行。这些不等式被称为*约束*。
- en: In MILP, we are looking for a feasible solution ***x***, ***y*** which minimises
    the *objective function*
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MILP 中，我们寻找一个可行解 ***x***、***y***，以最小化*目标函数*。
- en: '![](../Images/2d0f1d6a67fed19d77d334fd9aa5efff.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d0f1d6a67fed19d77d334fd9aa5efff.png)'
- en: If such a solution exists, we call it an *optimal* solution. In case you are
    wondering, it is possible to maximise the objective function instead; just multiply
    it with -1 and minimise the resulting expression. There is no guarantee that a
    feasible solution (let alone optimal) exists, but lets defer the discussion about
    these situations to the later section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在这样的解，我们称之为*最优解*。如果你想知道，实际上也可以最大化目标函数；只需将其乘以 -1 并最小化得到的表达式。没有保证存在可行解（更不用说最优解了），但让我们将关于这些情况的讨论推迟到后面的部分。
- en: 'Although the matrix form is a canonical way how MILP problems are defined,
    model designers usually do not use it as it is very cumbersome. Instead, in practice
    we define constraints and objective functions using simple mathematical expressions,
    which will be converted internally by the solver to the matrix form (which is
    actually very handy for a machine). To get a feel what is correct MILP formulation
    and what is not, here is a list of a few examples:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管矩阵形式是定义 MILP 问题的规范方式，但模型设计者通常不使用它，因为它非常繁琐。相反，在实际应用中，我们使用简单的数学表达式定义约束和目标函数，这些表达式会被求解器内部转换为矩阵形式（这对机器来说非常方便）。为了了解什么是正确的
    MILP 表达形式，什么不是，这里有一些例子：
- en: 𝑎₁𝑥₁ + 𝑎₂ + 𝑥₃ ≥ 𝑏₁ + 𝑎₄𝑥₄ is a correct MILP constraint. Notice that in comparison
    to the canonical form, the inequality is reversed, a constant is included in the
    left hand side and I added a variable to the right hand side. In a canonical form,
    this constraint would be transformed to −𝑎₁𝑥₁ − 𝑥₃ + 𝑎₄𝑥₄ ≤ −𝑏₁ + 𝑎₂ .
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 𝑎₁𝑥₁ + 𝑎₂ + 𝑥₃ ≥ 𝑏₁ + 𝑎₄𝑥₄ 是一个正确的 MILP 约束。注意，与规范形式相比，不等式的方向被反转了，一个常数被包含在左侧，我还在右侧添加了一个变量。在规范形式中，这个约束会被转换为
    −𝑎₁𝑥₁ − 𝑥₃ + 𝑎₄𝑥₄ ≤ −𝑏₁ + 𝑎₂。
- en: 𝑥₁𝑥₂ is not a correct MILP expression as it is a multiplication of two variables,
    which is not a linear expression. The same goes for |𝑥₁|, max(𝑥₁, 𝑥₂), log(𝑥₁),
    etc. All of those expressions are not linear, although some of them can be *linearised*
    through various tricks, but more on that in another post.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 𝑥₁𝑥₂ 不是一个正确的 MILP 表达式，因为它是两个变量的乘积，这不是线性表达式。|𝑥₁|, max(𝑥₁, 𝑥₂), log(𝑥₁) 等也是如此。所有这些表达式都不是线性的，尽管其中一些可以通过各种技巧
    *线性化*，但更多内容将在另一篇文章中讨论。
- en: 𝑎₁𝑎₂ is a correct MILP expression as multiplying two fixed parameters together
    would result in a single fixed parameter in “compile” time, i.e., during building
    the matrix model but before starting the solver. Expressions where fixed parameters
    are transformed by a mathematical functions (such as logarithm) are also correct
    MILP expressions.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 𝑎₁𝑎₂ 是一个正确的 MILP 表达式，因为将两个固定参数相乘会在“编译”时间，即在构建矩阵模型但在启动求解器之前，得到一个单一的固定参数。经过数学函数（如对数）转换的固定参数也都是正确的
    MILP 表达式。
- en: 𝑎ₓ is not a correct MILP expression. We cannot use a variable as an index.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 𝑎ₓ 不是一个正确的 MILP 表达式。我们不能使用变量作为索引。
- en: 𝑎₁𝑥₁ < 𝑏₁ is not a correct MILP constraint, it is not possible to force strict
    inequality.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 𝑎₁𝑥₁ < 𝑏₁ 不是一个正确的 MILP 约束，因为不可能强制严格不等式。
- en: We finish this section by showing a MILP formulation of the budget problem from
    the previous post in a matrix form.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过以矩阵形式展示前一篇文章中的预算问题的 MILP 公式来结束这一部分。
- en: '![](../Images/938e6432d1271aa0fc74dd6e6d388dd2.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/938e6432d1271aa0fc74dd6e6d388dd2.png)'
- en: The objective uses the *multiplication by -1* trick to maximise the expected
    profit. The budget constraint is encoded in the first row of the constraint matrix
    and the remaining rows correspond to constraints 0 ≤ 𝑥ᵢ, 𝑥ᵢ ≤ 1 on each variable
    𝑥ᵢ (i.e., 𝑥ᵢ is required to be binary). Many solvers allow to specify the domain
    of the variables directly, so usually there is no need create such constraints
    by hand. Also, notice that our model includes only integer variables (there is
    no **y** variable), thus it is an *integer linear program*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目标使用了 *乘以 -1* 的技巧来最大化预期利润。预算约束编码在约束矩阵的第一行，剩余的行对应于每个变量 𝑥ᵢ 上的约束 0 ≤ 𝑥ᵢ, 𝑥ᵢ ≤ 1（即
    𝑥ᵢ 被要求为二进制）。许多求解器允许直接指定变量的域，因此通常不需要手动创建这些约束。此外，请注意我们的模型仅包括整数变量（没有 **y** 变量），因此它是一个
    *整数线性规划*。
- en: Solution space
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案空间
- en: When we know how the space of feasible solutions of MILP models looks like,
    we may start to reason about the general algorithm for MILP, its theoretical properties
    and possibly how to make more performant models.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们知道 MILP 模型的可行解空间是什么样子时，我们可以开始推理关于 MILP 的通用算法、理论属性以及如何使模型更高效。
- en: Lets start with the following MILP model. For simplicity, we will consider only
    two integer variables 𝑥₁, 𝑥₂.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下 MILP 模型开始。为了简化，我们将只考虑两个整数变量 𝑥₁ 和 𝑥₂。
- en: '![](../Images/9abbdb5b0074ad32c418ffa2df4fdddd.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9abbdb5b0074ad32c418ffa2df4fdddd.png)'
- en: How can we visualise this model graphically? We start by empty 2D graph representing
    a model with no constraint. Gradually, we add constraint by constraint until we
    have a full model. In the graph, the horizontal and vertical axes correspond to
    values of 𝑥₁ and 𝑥₂, respectively.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何将这个模型图形化？我们从一个空的 2D 图开始，表示没有约束的模型。逐渐地，我们一个个地添加约束，直到我们拥有一个完整的模型。在图中，水平和垂直轴分别对应于
    𝑥₁ 和 𝑥₂ 的值。
- en: '![](../Images/1129d4960fa52909962d650079beba7e.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1129d4960fa52909962d650079beba7e.png)'
- en: As there is currently no constraint in the model, every combination of 𝑥₁, 𝑥₂
    is a feasible solution. Lets add a first constraint 4𝑥₁ ≥ 2𝑥₂ and see what happens.
    First, draw a line 4𝑥₁ = 2𝑥₂ in the solution space.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模型中当前没有约束，𝑥₁ 和 𝑥₂ 的每一种组合都是一个可行解。让我们添加第一个约束 4𝑥₁ ≥ 2𝑥₂ 并查看会发生什么。首先，在解决方案空间中绘制一条直线
    4𝑥₁ = 2𝑥₂。
- en: '![](../Images/acfe2679fc2c9774b422db5e43b02087.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/acfe2679fc2c9774b422db5e43b02087.png)'
- en: 'This line is a boundary between two *half-spaces* defined by the following
    inequalities: 4𝑥₁ > 2𝑥₂ and 4𝑥₁ < 2𝑥₂. All the points on one side of the line
    satisfy inequality 4𝑥₁ > 2𝑥₂ and all the points on the other side of line satisfy
    inequality 4𝑥₁ < 2𝑥₂. When I want to know which half-space represents a specific
    constraint, I will pick some random point 𝑥₁, 𝑥₂ that does not lie on the line,
    substitute it into the constraint, and check whether the constraint is satisfied.
    If yes, then the half-space containing this point is the one that corresponds
    to the constraint. If not, then the other half-space is the correct one.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线是由以下不等式定义的两个*半空间*之间的边界：4𝑥₁ > 2𝑥₂ 和 4𝑥₁ < 2𝑥₂。线的一侧的所有点满足不等式 4𝑥₁ > 2𝑥₂，而另一侧的所有点满足不等式
    4𝑥₁ < 2𝑥₂。当我想知道哪个半空间表示特定约束条件时，我会选择一些不在该线上的随机点 𝑥₁, 𝑥₂，将其代入约束条件，并检查约束条件是否得到满足。如果满足，那么包含此点的半空间就是对应于该约束条件的半空间。如果不满足，那么另一个半空间就是正确的。
- en: So as an example, lets pick point 𝑥₁ = 5, 𝑥₂ = 3\. Substitute the values into
    constraint
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我们选择点 𝑥₁ = 5, 𝑥₂ = 3。将这些值代入约束条件
- en: '![](../Images/0eb690e189fe00b1ffb98698ed39f0c7.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0eb690e189fe00b1ffb98698ed39f0c7.png)'
- en: and we see that the constraint is satisfied. Therefore, the half-space containing
    this point is the one where all the points satisfy this constraint. In the graphs
    I will denote the half-space satisfying a constraint by an arrow. Of course, the
    points on the line also satisfy the constraint so a constraint is represented
    by both a boundary line and a half-space.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到约束条件得到了满足。因此，包含此点的半空间是所有点都满足该约束条件的半空间。在图中，我将用箭头表示满足约束条件的半空间。当然，线上的点也满足约束条件，所以一个约束条件由边界线和半空间共同表示。
- en: '![](../Images/df7bf59eb14f3338298bcab39c566b1a.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df7bf59eb14f3338298bcab39c566b1a.png)'
- en: Lets add another constraint −2𝑥₁ + 30 ≥ 2𝑥₂. Again, we start by drawing a boundary
    line −2𝑥₁ + 30 = 2𝑥₂.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加另一个约束条件 −2𝑥₁ + 30 ≥ 2𝑥₂。我们从绘制边界线 −2𝑥₁ + 30 = 2𝑥₂ 开始。
- en: '![](../Images/296b7291a09da73d404d83e9bf81d263.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/296b7291a09da73d404d83e9bf81d263.png)'
- en: Which half-space satisfies this constraint? For this test, we pick a point 𝑥₁
    = 14, 𝑥₂= 6 and substitute it into the constraint
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个半空间满足这个约束条件？对于这个测试，我们选择点 𝑥₁ = 14, 𝑥₂= 6，并将其代入约束条件
- en: '![](../Images/9533880bffa9546897e306a6308acab6.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9533880bffa9546897e306a6308acab6.png)'
- en: We see that the selected point does not satisfy the constraint −2𝑥₁ + 30 ≥ 2𝑥₂
    so the feasible half-space must be the other one then the one containing point
    𝑥₁ = 14, 𝑥₂= 6 .
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现选定的点不满足约束条件 −2𝑥₁ + 30 ≥ 2𝑥₂，因此可行的半空间必须是另一个，而不是包含点 𝑥₁ = 14, 𝑥₂= 6 的那个。
- en: '![](../Images/462494ac571b28d1925fe680731d0b77.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/462494ac571b28d1925fe680731d0b77.png)'
- en: However, now as we have two constraints in the model, the feasible solution
    space is an *intersection* of the feasible half-spaces of each constraint. The
    reason is that we want all the constraints to be satisfied so only the solutions
    that lie in all feasible half-spaces are also feasible in the whole model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在模型中有两个约束条件， feasible 解决方案空间是每个约束条件的可行半空间的*交集*。原因在于我们希望所有的约束条件都得到满足，因此只有那些位于所有可行半空间中的解决方案才在整个模型中是可行的。
- en: '![](../Images/9798bd7cbba683a5ca64c3be2862e8ff.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9798bd7cbba683a5ca64c3be2862e8ff.png)'
- en: Now it should be clear how to proceed with constraints 𝑥₂ ≥ 0, 0.5𝑥₁ + 3.75
    ≥ 𝑥₂, so I will just draw the new feasible solution space.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该清楚如何处理约束条件 𝑥₂ ≥ 0, 0.5𝑥₁ + 3.75 ≥ 𝑥₂，所以我将直接绘制新的可行解空间。
- en: '![](../Images/a987bfb22e8837cd7ec76e4206d66db1.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a987bfb22e8837cd7ec76e4206d66db1.png)'
- en: There is one thing left and that is the integrality constraint 𝑥₁, 𝑥₂ ∈ ℤ that
    we silently ignored at the beginning. What does this constraint mean? Simply,
    not all points from the coloured region are actually feasible, but only those
    where both 𝑥₁, 𝑥₂ are integers. We can visualise them by a grid, thus, the final
    feasible solution space of the example MILP model looks like this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事就是我们最初默默忽略的整数约束 𝑥₁, 𝑥₂ ∈ ℤ。这条约束意味着什么？简单来说，并不是所有彩色区域中的点都是实际可行的，只有那些 𝑥₁ 和
    𝑥₂ 都是整数的点才是可行的。我们可以通过网格将它们可视化，因此，示例 MILP 模型的最终可行解空间如下。
- en: '![](../Images/b15777d54e00b520383e6d34027d8450.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b15777d54e00b520383e6d34027d8450.png)'
- en: Space of the feasible solutions for the example MILP model. The feasible solutions
    are denoted by red dots, black lines represent boundary of the constraints.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 MILP 模型的可行解空间。可行解用红点表示，黑线表示约束条件的边界。
- en: 'Each of those red points correspond to one feasible integer solution which
    satisfy all the constraints. Now, the last question is: which of those points
    optimise our objective function, i.e., which point gives us the smallest value
    of −2𝑥₁ − 3𝑥₂? This question is little bit more involved. We could extend our
    graph to a third dimension representing the values of the objective function,
    project the feasible solutions to a plane of our objective function and find the
    projected point that is the lowest. However, I think that it is a nice mental
    exercise to stay in 2D space and find the optimum there.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个红点都对应一个满足所有约束的可行整数解。现在，最后一个问题是：这些点中哪个优化了我们的目标函数，即哪个点给出了最小的 -2𝑥₁ − 3𝑥₂ 值？这个问题稍微复杂一点。我们可以将图扩展到第三维，代表目标函数的值，将可行解投影到目标函数的平面上，然后找到投影点中最低的点。然而，我认为在
    2D 空间中找到最优解是一个很好的思维练习。
- en: Many of you are probably familiar with the concept of a *gradient*, as it is
    a backbone of many ML training algorithms. In short, a gradient of a function
    represents a direction of the largest increase of that function at some point.
    That is, if we move along the gradient, we will increase the function. Knowing
    the gradient of the MILP’s objective function tells us where to look for the optimal
    feasible solution. So, lets find the gradient of our objective function, which
    we obtain by taking the partial derivatives by each variable 𝑥₁, 𝑥₂
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的许多人可能对*梯度*这个概念很熟悉，因为它是许多机器学习训练算法的核心。简而言之，函数的梯度表示在某一点函数最大增加的方向。也就是说，如果我们沿梯度方向移动，我们将增加函数值。知道
    MILP 目标函数的梯度可以告诉我们去哪里寻找最优可行解。所以，让我们找到目标函数的梯度，我们通过对每个变量 𝑥₁, 𝑥₂ 进行偏导数来获得。
- en: '![](../Images/71c4de42e15397fbad2a7c85ba73050a.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71c4de42e15397fbad2a7c85ba73050a.png)'
- en: Since our objective function is linear, its gradient is the same for every point
    in the solution space. And since gradient is a direction, we can draw a vector
    into our solution space to show the direction of the increase in the objective
    function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的目标函数是线性的，它在解空间中的每一点梯度都是相同的。由于梯度是一个方向，我们可以在解空间中绘制一个向量，以显示目标函数增加的方向。
- en: '![](../Images/4c8c8828827b42f866d88b2795ea82b9.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c8c8828827b42f866d88b2795ea82b9.png)'
- en: Lets draw a contour lines of the objective (a contour line has the same objective
    value for every point on that line). It can be proven that contour lines are perpendicular
    to a gradient, so once we have the gradient, it is easy to draw the contours.
    As we move in the opposite direction of the gradient, the objective value on the
    contour lines decreases until we cannot move any further as we would be outside
    of the feasible space. You can imagine this process as moving a ruler, which is
    perpendicular to the gradient, along the direction opposite to the gradient until
    you touch the last feasible solution. In our example, the optimal solution is
    at 𝑥₁ = 8, 𝑥₂ = 7 with the objective value of −37\. Phew!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制目标的等高线（等高线上的每一点目标值相同）。可以证明等高线与梯度垂直，因此一旦我们有了梯度，就很容易绘制等高线。随着我们沿梯度的相反方向移动，等高线上的目标值会减少，直到我们无法再移动，因为我们将超出可行空间。你可以把这个过程想象成将一把与梯度垂直的尺子沿梯度的相反方向移动，直到你触及最后一个可行解。在我们的例子中，最优解是
    𝑥₁ = 8, 𝑥₂ = 7，目标值为 -37。呼！
- en: '![](../Images/02b09773755504b4829369004861b919.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02b09773755504b4829369004861b919.png)'
- en: If you are intersted in how to write this MILP model in Python, here is the
    code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对如何在 Python 中编写这个 MILP 模型感兴趣，这里是代码。
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Optimisation outcomes
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化结果
- en: 'In the example above, we found an optimal solution. However, this is not always
    guaranteed. In theory, the optimisation might end up with one of the following
    three outcomes: optimal solution found, infeasible model, or unbounded objective.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们找到了一个最优解。然而，这并不总是有保证的。理论上，优化可能会得出以下三种结果之一：找到最优解、模型不可行或目标无界。
- en: Other outcomes are also possible (e.g., time-limit reached, out-of-memory, etc.)
    but they are related to practise, not theory of integer programming so I will
    not discuss them in this post.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其他结果也是可能的（例如，超时、内存不足等），但这些与整数规划的实践相关，而不是理论，所以我不会在这篇文章中讨论它们。
- en: 'Optimisation outcome: optimal solution found'
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化结果：找到最优解
- en: We already saw a couple of examples where we found an optimal solution (e.g.,
    budget problem). I would like to highlight that there might be multiple optimal
    solutions with the same objective value. For example, if we replace the objective
    in the above defined model by 10𝑥₂, then all the points lying on line x₂ = 0 in
    the feasible solution space are optimal with objective value of 0\. Multiple runs
    of the optimisation solver with various random seeds will probably give different
    optimal solutions, so do not expect an unique solution to be returned all the
    time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些找到最优解的例子（例如，预算问题）。我想强调的是，可能存在多个具有相同目标值的最优解。例如，如果我们将上面定义的模型中的目标替换为 10𝑥₂，那么在可行解空间中所有位于
    x₂ = 0 线上的点都是最优解，目标值为 0。多次运行优化求解器并使用不同的随机种子可能会给出不同的最优解，因此不要期望每次都返回唯一解。
- en: 'Optimisation outcome: infeasible model'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化结果：不可行模型
- en: Infeasible models are the ones for which there is no feasible solution that
    would satisfy all the constraints. An example of an infeasible model is the following.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不可行的模型是指没有满足所有约束条件的可行解的模型。一个不可行模型的例子如下。
- en: '![](../Images/db1aa79553956020c3c06b9c7c22f5f9.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db1aa79553956020c3c06b9c7c22f5f9.png)'
- en: There is no value of 𝑥₁ which would satisfy both 𝑥₁ ≥ 6 and 𝑥₁ ≤ 2, so the intersection
    of the feasible half-spaces of these constraints is an empty set.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何一个 𝑥₁ 的值可以同时满足 𝑥₁ ≥ 6 和 𝑥₁ ≤ 2，因此这些约束的可行半空间的交集是一个空集。
- en: '![](../Images/b49a9ecbd2477c1ba54b3fc5d804dad8.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b49a9ecbd2477c1ba54b3fc5d804dad8.png)'
- en: 'Optimisation outcome: unbounded objective'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化结果：无界目标
- en: This one is a little bit weird, but unfortunately, it may occur. Usually in
    practise, it is a sign of an ill-defined model, e.g., when an essential constraint
    is not included in a model.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点奇怪，但不幸的是，这种情况可能会发生。通常在实践中，这表明模型定义不明确，例如，当一个重要的约束没有包含在模型中时。
- en: Unbounded objective means that for every feasible solution, we can find another
    feasible solution having a smaller objective value. In other words, the optimal
    objective value converges to negative infinity. Here is a model with an unbounded
    objective.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 无界目标意味着对于每个可行解，我们可以找到另一个具有更小目标值的可行解。换句话说，最优目标值趋向于负无穷。以下是一个具有无界目标的模型。
- en: '![](../Images/8313cb3c2128852fba51d71957be5b38.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8313cb3c2128852fba51d71957be5b38.png)'
- en: The feasible solution space is so unconstrained, that we increase 𝑥₂ to any
    value we want and in turn the objective will decrease.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可行解空间没有约束，因此我们可以将 𝑥₂ 增加到我们想要的任何值，从而目标函数值将减小。
- en: Wrap-up
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Right now, you should be able to solve any MILP model with two integer variables
    using just pen, paper and a ruler! Of course, the actual computer algorithms for
    solving MILPs are more complicated, but the visual understanding of the solution
    space will come handy when we study the algorithms in some future post.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够仅使用笔、纸和直尺来解决任何具有两个整数变量的 MILP 模型！当然，解决 MILP 的实际计算机算法要复杂得多，但对解空间的直观理解将在我们未来的文章中学习算法时派上用场。
- en: '*All images unless otherwise noted are by the author.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
