["```py\n* map\n* transform\n* agg\n* apply\n* Unexpected behavior\n```", "```py\ndf_english = pd.DataFrame(\n    {\n        \"student\": [\"John\", \"James\", \"Jennifer\"],\n        \"gender\": [\"male\", \"male\", \"female\"],\n        \"score\": [20, 30, 30],\n        \"subject\": \"english\"\n    }\n)\n\ndf_math = pd.DataFrame(\n    {\n        \"student\": [\"John\", \"James\", \"Jennifer\"],\n        \"gender\": [\"male\", \"male\", \"female\"],\n        \"score\": [90, 100, 95],\n        \"subject\": \"math\"\n    }\n)\n```", "```py\ndf = pd.concat(\n    [df_english, df_math],\n    ignore_index=True\n)\n```", "```py\nSeries.map(arg, na_action=None) -> Series\n```", "```py\nGENDER_ENCODING = {\n    \"male\": 0,\n    \"female\": 1\n}\n```", "```py\ndf[\"gender\"].map(GENDER_ENCODING)\n```", "```py\ndf[\"gender\"].apply(lambda x:\n    GENDER_ENCODING.get(x, np.nan)\n)\n```", "```py\nrandom_gender_series = pd.Series([\n    random.choice([\"male\", \"female\"]) for _ in range(1_000_000)\n])\n\nrandom_gender_series.value_counts()\n\n\"\"\"\n>>>\nfemale    500094\nmale      499906\ndtype: int64\n\"\"\" \n```", "```py\n\"\"\"\nmap performance\n\"\"\"\n%%timeit\nrandom_gender_series.map(GENDER_ENCODING)\n\n# 41.4 ms ± 4.24 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```", "```py\n\"\"\"\napply performance\n\"\"\"\n%%timeit\nrandom_gender_series.apply(lambda x:\n    GENDER_ENCODING.get(x, np.nan)\n)\n\n# 417 ms ± 5.32 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\ndf[\"gender\"] = df[\"gender\"].map(GENDER_ENCODING)\n```", "```py\n**DataFrame.applymap(*func*, *na_action=None*, ***kwargs*) -> DataFrame**\n```", "```py\ntry: \n    df.applymap(dict())\n\nexcept TypeError as e:\n    print(\"Only callables are valid! Error:\", e)\n\n\"\"\"\nOnly callables are valid! Error: the first argument must be callable\n\"\"\"\n```", "```py\nDataFrame.transform(func, axis=0, *args, **kwargs) -> DataFrame\n```", "```py\ndf.groupby(\"subject\")[\"score\"] \\\n    .transform(\n        lambda x: (x - x.mean()) / x.std()\n    )\n\n\"\"\"\n0   -1.154701\n1    0.577350\n2    0.577350\n3   -1.000000\n4    1.000000\n5    0.000000\nName: score, dtype: float64\n\"\"\"\n```", "```py\ndf.groupby(\"subject\")[\"score\"] \\\n    .apply(\n        lambda x: (x - x.mean()) / x.std()\n    )\n\n\"\"\"\n0   -1.154701\n1    0.577350\n2    0.577350\n3   -1.000000\n4    1.000000\n5    0.000000\nName: score, dtype: float64\n\"\"\" \n```", "```py\ndf.groupby(\"subject\")[\"score\"] \\\n    .apply(\n        sum\n    )\n\n\"\"\"\nsubject\nenglish     80\nmath       285\nName: score, dtype: int64\n\"\"\" \n```", "```py\ndf.groupby(\"subject\")[\"score\"] \\\n    .transform(\n        sum\n    )\n\n\"\"\"\n0     80\n1     80\n2     80\n3    285\n4    285\n5    285\nName: score, dtype: int64\n\"\"\"\n```", "```py\ntry:\n    df[\"score\"].transform(\"mean\")\nexcept ValueError as e:\n    print(\"Aggregation doesn't work with transform. Error:\", e)\n\n\"\"\"\nAggregation doesn't work with transform. Error: Function did not transform\n\"\"\"\n```", "```py\ndf[\"score\"].apply(\"mean\")\n\n\"\"\"\n60.833333333333336\n\"\"\"\n```", "```py\nrandom_score_df = pd.DataFrame({\n    \"subject\": random.choices([\"english\", \"math\", \"science\", \"history\"], k=1_000_000),\n    \"score\": random.choices(list(np.arange(1, 100)), k=1_000_000)\n})\n```", "```py\n\"\"\"\nTransform Performance Test\n\"\"\"\n%%timeit\nrandom_score_df.groupby(\"subject\")[\"score\"] \\\n    .transform(\n        lambda x: (x - x.mean()) / x.std()\n    )\n\n\"\"\"\n202 ms ± 5.37 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\"\"\"\n```", "```py\n\"\"\"\nApply Performance Test\n\"\"\"\n%%timeit\nrandom_score_df.groupby(\"subject\")[\"score\"] \\\n    .apply(\n        lambda x: (x - x.mean()) / x.std()\n    )\n\n\"\"\"\n401 ms ± 5.37 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\"\"\"\n```", "```py\nDataFrame.agg(func=None, axis=0, *args, **kwargs) \n    -> scalar | pd.Series | pd.DataFrame\n```", "```py\ndf.groupby(\"subject\")[\"score\"].agg(mean_score=\"mean\").round(2)\n```", "```py\ndf.groupby(\"subject\")[\"score\"].agg(\n    [\"min\", \"mean\", \"max\"]\n).round(2)\n```", "```py\nrandom_score_df = pd.DataFrame({\n    \"subject\": random.choices([\"english\", \"math\", \"science\", \"history\"], k=1_000_000),\n    \"score\": random.choices(list(np.arange(1, 100)), k=1_000_000)\n})\n```", "```py\n\"\"\"\nAgg Performance Test\n\"\"\"\n\n%%timeit\nrandom_score_df.groupby(\"subject\")[\"score\"].agg(\"mean\")\n\n\"\"\"\n74.2 ms ± 5.02 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\"\"\"\n```", "```py\n\"\"\"\nApply Performance Test\n\"\"\"\n\n%%timeit\nrandom_score_df.groupby(\"subject\")[\"score\"].apply(lambda x: x.mean())\n\"\"\"\n102.3 ms ± 1.16 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\"\"\"\n```", "```py\n\"\"\"\nMultiple Aggregators Performance Test with agg\n\"\"\"\n%%timeit\nrandom_score_df.groupby(\"subject\")[\"score\"].agg(\n    [\"min\", \"mean\", \"max\"]\n)\n\n\"\"\"\n90.5 ms ± 16.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\"\"\"\n```", "```py\n\"\"\"\nMultiple Aggregators Performance Test with apply\n\"\"\"\n%%timeit\nrandom_score_df.groupby(\"subject\")[\"score\"].apply(\n    lambda x: pd.Series(\n        {\"min\": x.min(), \"mean\": x.mean(), \"max\": x.max()}\n    )\n).unstack()\n\n\"\"\"\n104 ms ± 5.78 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\"\"\"\n```", "```py\ndf_single_group = df.copy()\ndf_single_group[\"city\"] = \"Boston\"\n```", "```py\ndf_single_group.groupby(\"subject\").apply(lambda x: x[\"score\"])\n```", "```py\ndf_single_group.groupby(\"city\").apply(lambda x: x[\"score\"])\n```", "```py\ndf_single_group.groupby(\"city\").apply(lambda x: x[\"score\"]).stack()\n```"]