["```py\n@tag_outputs(age={\"PII\": \"true\"}, sex={\"PII\": \"true\"})\n@extract_columns(*columns_to_extract)\n@tag(\n   source=\"prod.titantic\",\n   owner=\"data-engineering\",\n   importance=\"production\",\n   info=\"https://internal.wikipage.net/\",\n   contains_PII=\"True\", \n   target_=\"titanic_data\",\n)\ndef titanic_data(index_col: str, location: str) -> pd.DataFrame:\n    \"\"\"Returns a dataframe, that then has its columns extracted.\"\"\"\n    # ... contents of function not important ... code skipped for brevity\n```", "```py\n@tag(owner=\"data-science\", importance=\"production\", artifact=\"model\")\ndef fit_random_forest(\n    prefit_random_forest: base.ClassifierMixin,\n    X_train: pd.DataFrame,\n    y_train: pd.Series,\n) -> base.ClassifierMixin:\n  \"\"\"Returns a fit RF model.\"\"\"\n  # ... contents of function not important ... code skipped for brevity\n```", "```py\n...\n# create the driver\ndr = driver.Driver(config, data_loading, features, sets, model_pipeline, adapter=adapter)\n# visualize how it's created\ndr.visualize_execution(\n    [features.encoders], \"encoder_lineage\", {\"format\": \"png\"}, inputs=inputs\n)\n```", "```py\n# create the driver\ndr = driver.Driver(config, data_loading, features, sets, model_pipeline, adapter=adapter)\n# Gives us all the operations that are upstream of creating the output.\nupstream_nodes = dr.what_is_upstream_of(\"fit_random_forest\")\n```", "```py\nteams = []\n# iterate through \nfor node in upstream_nodes:\n  # filter to nodes that we're interested in getting information about\n  if node.tags.get(\"source\"):\n    # append for output\n    teams.append({\n      \"team\": node.tags.get(\"owner\"),\n      \"function\": node.name,\n      \"source\": node.tags.get(\"source\"),\n    })\nprint(teams)\n# [{'team': 'data-engineering', \n#   'function': 'titanic_data', \n#   'source': 'prod.titanic'}] \n```", "```py\n# create the driver\ndr = driver.Driver(config, data_loading, features, sets, model_pipeline, adapter=adapter)\n# Gives us all the operations that are upstream of creating the output.\ndownstream_nodes = dr.what_is_downstream_of(\"titanic_data\")\n```", "```py\nartifacts = []\nfor node in downstream_nodes:\n  # if it's an artifact function\n  if node.tags.get(\"artifact\"):\n      # pull out the information we want\n      artifacts.append({\n          \"team\": node.tags.get(\"owner\", \"FIX_ME\"),\n          \"function\": node.name,\n          \"artifact\": node.tags.get(\"artifact\"),\n      })\nprint(artifacts)\n# [{'team': 'data-science', 'function': 'training_set_v1', 'artifact': 'training_set'}, \n#  {'team': 'data-science', 'function': 'fit_random_forest', 'artifact': 'model'}, \n#  {'team': 'data-science', 'function': 'encoders', 'artifact': 'encoders'}]\n```", "```py\n# create the driver\ndr = driver.Driver(config, data_loading, features, sets, model_pipeline, adapter=adapter)\n# using a list comprehension to get all things marked PII\npii_nodes = [n for n in dr.list_available_variables() \n             if n.tags.get(\"PII\") == \"true\"]\n```", "```py\npii_to_artifacts = {}\n# loop through each PII node\nfor node in pii_nodes:\n  pii_to_artifacts[node.name] = []\n  # ask what is downstream\n  downstream_nodes = dr.what_is_downstream_of(node.name)\n  for dwn_node in downstream_nodes:\n    # Filter to nodes of interest\n    if dwn_node.tags.get(\"artifact\"):\n      # pull out information\n      pii_to_artifacts[node.name].append({\n          \"team\": dwn_node.tags.get(\"owner\"),\n          \"function\": dwn_node.name,\n          \"artifact\": dwn_node.tags.get(\"artifact\"),\n      })\nprint(pii_to_artifacts)\n# {'age': [{'artifact': 'training_set',\n#         'function': 'training_set_v1',\n#         'team': 'data-science'},\n#        {'artifact': 'model',\n#         'function': 'fit_random_forest',\n#         'team': 'data-science'}],\n# 'sex': [{'artifact': 'training_set',\n#         'function': 'training_set_v1',\n#         'team': 'data-science'},\n#        {'artifact': 'encoders', 'function': 'encoders', 'team': None},\n#        {'artifact': 'model',\n#         'function': 'fit_random_forest',\n#         'team': 'data-science'}]} \n```"]