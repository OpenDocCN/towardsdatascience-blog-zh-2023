- en: 'Condition-based Maintenance: Rainflow Counting'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/condition-based-maintenance-rainflow-counting-f35abaefdc92?source=collection_archive---------7-----------------------#2023-10-02](https://towardsdatascience.com/condition-based-maintenance-rainflow-counting-f35abaefdc92?source=collection_archive---------7-----------------------#2023-10-02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Analyzing thermal cycles for Remaining Useful Lifetime predictions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@aman.steinberg?source=post_page-----f35abaefdc92--------------------------------)[![Aman
    Steinberg](../Images/1b8c752261ba026631706258f2f7f654.png)](https://medium.com/@aman.steinberg?source=post_page-----f35abaefdc92--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f35abaefdc92--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f35abaefdc92--------------------------------)
    [Aman Steinberg](https://medium.com/@aman.steinberg?source=post_page-----f35abaefdc92--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8596694b6819&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcondition-based-maintenance-rainflow-counting-f35abaefdc92&user=Aman+Steinberg&userId=8596694b6819&source=post_page-8596694b6819----f35abaefdc92---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f35abaefdc92--------------------------------)
    ·8 min read·Oct 2, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ff35abaefdc92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcondition-based-maintenance-rainflow-counting-f35abaefdc92&user=Aman+Steinberg&userId=8596694b6819&source=-----f35abaefdc92---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ff35abaefdc92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcondition-based-maintenance-rainflow-counting-f35abaefdc92&source=-----f35abaefdc92---------------------bookmark_footer-----------)![](../Images/2e8aed03ab44e8fb190335d648633979.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Image by [Author](https://www.linkedin.com/in/amansteinberg/) using [this tool](https://huggingface.co/spaces/runwayml/stable-diffusion-v1-5)
    under [CreativeML Open RAIL-M license](https://huggingface.co/spaces/CompVis/stable-diffusion-license).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In today’s data-driven world, businesses are increasingly turning to technology
    to optimize their operations and reduce downtime. Be it power supplies, wind turbines,
    transistors, engines — sensors collect data from various components during all
    stages of a product’s life cycle: from development via manufacturing to operation,
    companies monitor their products digitally.'
  prefs: []
  type: TYPE_NORMAL
- en: Hence, predictive maintenance, condition-based maintenance and condition monitoring
    are techniques that have gained widespread popularity in recent years. By analyzing
    sensor data such as temperature, vibration or pressure, businesses aim at predicting
    likely failures of equipment and machines in order to schedule maintenance accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Condition monitoring is crucial for keeping track of the wear and tear of your
    system’s components, thus enabling you to minimize unplanned downtime, maximize
    availability and operating hours, reduce maintenance costs, plan for better maintenance
    schedules, effectively manage your spare parts, keep your customers satisfied
    and happy — just to name a few of the advantages of condition-based and predictive
    maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'One can differentiate between three general types of maintenance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reactive Maintenance: maintenance happens only when needed after a failure
    meaning it involves unscheduled downtime and repair costs;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Preventive Maintenance: maintenance happens at regular intervals, this comes
    at the risk of performing too many maintenance operations in spite of fully-functioning
    equipment;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Predictive Maintenance: solves these issues because it relies on data and condition-monitoring
    to reliably predict when a failure occurs for a given component. In this way,
    one can effectively schedule downtimes for inspection or maintenance and prepare
    the resources in a smart manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this post, I want to explore techniques for monitoring semiconductor scenarios,
    inspired by Ref. 1¹. As the method of Rainflow counting can be extended beyond
    semiconductor applications, the results presented here can be adapted to a plethora
    of business cases.
  prefs: []
  type: TYPE_NORMAL
- en: So, whether you are a maintenance manager looking to improve your organization’s
    maintenance program or a business owner interested in reducing downtime and increasing
    efficiency, this blog post is for you.
  prefs: []
  type: TYPE_NORMAL
- en: '*Semiconductors at work — stress profiles*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Semiconductors run our modern world — you can find them in power modules for
    wind turbines, photovoltaic systems, electric vehicles and many more. Therefore,
    it is highly critical to have a real-time monitoring of the wear and the general
    condition of the components. In semiconductors, thermomechanical fatigue is one
    of the root causes for transistor failures in power modules.
  prefs: []
  type: TYPE_NORMAL
- en: Since the different materials in a semiconductor have different thermal extension
    coefficients, temperature swings lead to mechanical stress. When transistors undergo
    cyclic loading, the associated thermomechanical stress causes fatigue of the materials
    within the transistor leading to degradation and eventually, failure. This can
    ultimately result in the collapse of the entire system you want to operate. Obviously,
    it is of utmost importance to have a reliable estimate of the Remaining Useful
    Lifetime of the components given the stress loads the systems and parts are enduring
    under operation.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming an ideal cyclic loading, the time series of the semiconductor temperature
    would be sinusoidal, cf. Fig. 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad89c4eb1afcaa4913dcd8302d333f65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 1: Sinusoidal temperature time series. Plot generated by [Pia Baronetzky](https://www.linkedin.com/in/pia-baronetzky/)
    and [the Author](https://www.linkedin.com/in/amansteinberg/).'
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario, all stress cycles would have identical temperature amplitudes
    and identical cycle durations. Counting stress cycles and quantifying the damage
    they cause to the material would be trivial.
  prefs: []
  type: TYPE_NORMAL
- en: 'In reality, a plausible temperature time series looks like the following, cf.
    Fig. 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8da30ce1469ba3401a37ed897027ad30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 2: More realistic temperature time series. Plot generated by [Pia Baronetzky](https://www.linkedin.com/in/pia-baronetzky/)
    and [the Author](https://www.linkedin.com/in/amansteinberg/).'
  prefs: []
  type: TYPE_NORMAL
- en: User behavior can hardly be fully simulated and may deviate from lab settings.
    Furthermore, environmental factors cannot easily be modeled or predicted. Hence,
    individual cycles vary in duration and amplitude with the possibility that a single
    cycle of a certain large amplitude can last for minutes, hours and even days while
    several small-amplitude loading cycles start and stop before the large-amplitude
    cycle ends.
  prefs: []
  type: TYPE_NORMAL
- en: In order to correctly count all cycles and quantify the damage they caused in
    a realistic scenario, one has to use Rainflow counting.
  prefs: []
  type: TYPE_NORMAL
- en: Rainflow counting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rainflow counting is a standard procedure in fatigue analysis and has been added
    among other cycle-counting methods in *Standard Practices for Cycle Counting in
    Fatigue Analysis²* after it was developed by T. Endo and M. Matsuishi in 1968.
  prefs: []
  type: TYPE_NORMAL
- en: When performing a Rainflow analysis, you are not only evaluating the current
    state of the system, you are even taking into account the entire time series history
    of a given observable. This is what makes Rainflow counting for condition-monitoring
    powerful and reliable.
  prefs: []
  type: TYPE_NORMAL
- en: In our scenario, we analyze a temperature time series.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, one extracts the extrema of the time series. Two consecutive extrema
    (minimum following maximum or vice-versa) constitute a half-cycle and the temperature
    difference between the two extrema is called the cycle amplitude or stress range.
  prefs: []
  type: TYPE_NORMAL
- en: Consider an upward half-cycle starting with a minimum and ending with a maximum
    (the opposite case can be treated analogously). The minimum of the half-cycle
    is called the start value and the maximum is called the stop value.
  prefs: []
  type: TYPE_NORMAL
- en: The upward half-cycle is closed to a full cycle the next time a downward half-cycle
    falls to or below the start value of the initial upward cycle. Analogously, a
    downward half-cycle is closed to a full cycle the next time an upward half-cycle
    rises to or above the start value of the initial downward cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Once a cycle is closed, it is removed from the time series and contributes 1
    Rainflow cycle count with the corresponding cycle amplitude. After performing
    a full Rainflow counting on a time series, there might be overhanging half-cycles
    that could not be closed which will contribute 0.5 Rainflow cycle counts with
    their corresponding cycle amplitudes.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, one arrives at a Rainflow cycle distribution (a_i, n_i) with a_i
    the cycle amplitudes and n_i the Rainflow cycle counts.
  prefs: []
  type: TYPE_NORMAL
- en: It is common practice to perform a binning of the cycle amplitudes such that
    one reduces complexity and enables comparison of Rainflow analyses of different
    machines but with the same observables (temperature in our case).
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, we denote the resulting Rainflow cycle distribution as (a_i,
    n_i) with a_i the binned cycle amplitudes and n_i the corresponding Rainflow cycle
    counts.
  prefs: []
  type: TYPE_NORMAL
- en: 'A convenient way of visualizing the Rainflow analysis is by plotting a Rainflow
    matrix of the underlying time series, cf. Fig. 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9525c66f1e1999d9bd85acc7b7f3a48e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 3: Rainflow matrix for temperature time series depicted in Fig. 2\. Rainflow
    cycles on the diagonal are omitted, see text below. Plot generated by [Pia Baronetzky](https://www.linkedin.com/in/pia-baronetzky/)
    and [the Author](https://www.linkedin.com/in/amansteinberg/).'
  prefs: []
  type: TYPE_NORMAL
- en: The vertical axis shows the start value of a Rainflow cycle while one can see
    the stop value on the horizontal axis.
  prefs: []
  type: TYPE_NORMAL
- en: If a Rainflow cycle starts and stops in the same temperature bin or an adjacent
    one, it will end up on the diagonal of the Rainflow matrix or on the first sub-diagonal,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Since Rainflow cycles on the diagonal contribute to the thermomechanical fatigue
    only negligibly, we omit them in Fig. 3.
  prefs: []
  type: TYPE_NORMAL
- en: A full load cycle starting at a low temperature and stopping at a high one results
    in cycles that populate the matrix far from the diagonal as can be seen in the
    upper right corner of the Rainflow matrix.
  prefs: []
  type: TYPE_NORMAL
- en: These full load cycles contribute the most to the deterioration of the material
    and the reduction of the Remaining Useful Lifetime while cycles from (close to)
    the diagonal of the Rainflow matrix only cause minor to no harm to the material.
  prefs: []
  type: TYPE_NORMAL
- en: The color coding tells us that most cycles lie on the first sub-diagonal of
    the Rainflow matrix and only a few corresponding to full load cycles populate
    the corners far from the diagonal which is a common scenario and reflects the
    temperature time series shown in Fig. 2.
  prefs: []
  type: TYPE_NORMAL
- en: Remaining Useful Lifetime
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can correctly quantify and monitor the stress loads seen by the
    components of our system, we want to convert this information into a measure of
    material damage and/or fatigue.
  prefs: []
  type: TYPE_NORMAL
- en: For any given temperature or stress bin, i.e. cycle amplitude a_i, there is
    a maximum fatigue life N_i denoting the maximum number of Rainflow cycles a material
    can endure at the given stress level until failure occurs. This information is
    encoded in the Wöhler curve which needs to be determined either by experiment
    or by simulation. With limited resources, a Wöhler curve is hard to produce. Hence,
    we avail ourselves of Machine Learning approaches such as the [SGDRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDRegressor.html)
    from *scikit-learn* as you will see below.
  prefs: []
  type: TYPE_NORMAL
- en: 'Palmgren-Miner’s rule³ tells us that the total damage a component has suffered
    is given by the sum of relative damages per stress level where relative damage
    is given by n_i, the Rainflow cycles of a certain stress level over N_i, the corresponding
    fatigue life:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5694e61a30a3b6fa5a135353a79620ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Eqn. 1: Total damage D as described by Palmgren-Miner’s rule.'
  prefs: []
  type: TYPE_NORMAL
- en: When D=1, the component has accumulated total damage and breaks. Hence, the
    inverse of the total damage serves as a measure for the Remaining Useful Lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: Condition-based Maintenance is already possible with a reliable real-time monitoring
    of the accumulated stress and a measure for when the next maintenance program
    needs to be scheduled.
  prefs: []
  type: TYPE_NORMAL
- en: For a prediction based on Machine Learning models fed by real-time monitoring
    data, we need to go one step further.
  prefs: []
  type: TYPE_NORMAL
- en: '*Predictive Maintenance — research collaboration*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since Palmgren-Miner’s rule assumes linear damage accumulation, it has shortcomings:
    The model ignores the temporal order and cross-correlations of all occurring stress
    load cycles. It also assumes that cycles of different stress levels contribute
    to the total damage with the same weights.'
  prefs: []
  type: TYPE_NORMAL
- en: In a [research collaboration](https://www.mdsi.tum.de/en/di-lab/vergangene-projekte/ss2023-procon-it-remaining-lifetime-estimation-in-semiconductor-scenarios)⁴
    between [Munich Data Science Institute](https://www.mdsi.tum.de/en/mdsi/home/)
    at [Technische Universität München](https://www.tum.de/en/) and [PROCON IT GmbH](https://www.procon-it.de/),
    we tackle these shortcomings by making use of Machine Learning techniques such
    as *scikit-learn*’s [SGDRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDRegressor.html).
  prefs: []
  type: TYPE_NORMAL
- en: Instead of assuming equal weights for all stress levels, we let the model learn
    the weights of the relative damage contributions to the total damage D (*Eqn.
    1*) to properly predict the probability of failure. The results are promising
    and the procedure can be extended to a plethora of different use cases, systems
    and input observables.
  prefs: []
  type: TYPE_NORMAL
- en: For further information, have a look at [the report](https://www.mdsi.tum.de/fileadmin/w00cet/di-lab/pdf/Final_Report_ProconIT___TUM-DI-LAB_SS2023-1.pdf)⁵.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we extend a Condition-based Maintenance program to a Predictive
    Maintenance one.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Businesses aim at leveraging their data to move their maintenance strategy forward
    from reactive or preventive maintenance towards condition-based or even predictive
    maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Sensor data provide insights about the wear and tear of your system’s components.
    In order to reliably quantify the damage your components have accumulated and
    to perform condition-monitoring, one can use Rainflow counting.
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of the total damage given by Miner’s rule can serve as a Remaining
    Useful Lifetime estimation.
  prefs: []
  type: TYPE_NORMAL
- en: To move from condition-based towards predictive maintenance, one can make use
    of Machine Learning techniques as demonstrated in a research collaboration between
    [Munich Data Science Institute](https://www.mdsi.tum.de/en/mdsi/home/) at [TU
    München](https://www.tum.de/en/) and [PROCON IT GmbH](https://www.procon-it.de/).
  prefs: []
  type: TYPE_NORMAL
- en: The author expresses his sincere gratitude towards all people involved in this
    work.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bibliography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1]M. Andresen, G. Buticchi, M. Liserre, [Study of reliability-efficiency tradeoff
    of active thermal control for power electronic systems](https://doi.org/10.1016/j.microrel.2015.12.017),
    Microelectronics Reliability Volume 58 March 2016 Pages 119–125'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [Standard Practices for Cycle Counting in Fatigue Analysis](https://www.astm.org/e1049-85r17.html),
    ASTM1049–85'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] M. A. Miner, [Cumulative Damage in Fatigue](https://doi.org/10.1115/1.4009458),
    J. Appl. Mech. Sep 1945 12(3) A159-A164'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [*Remaining Lifetime Estimation in Semiconductor Scenarios*](https://www.mdsi.tum.de/en/di-lab/vergangene-projekte/ss2023-procon-it-remaining-lifetime-estimation-in-semiconductor-scenarios/),
    TUM-DI-LAB 2023'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] S. Bayer, O. Neumann, D. Raj, Y. Savva, [Remaining Lifetime Estimation
    in Semiconductor Scenarios](https://www.mdsi.tum.de/fileadmin/w00cet/di-lab/pdf/Final_Report_ProconIT___TUM-DI-LAB_SS2023-1.pdf),
    TUM-DI-LAB 2023'
  prefs: []
  type: TYPE_NORMAL
