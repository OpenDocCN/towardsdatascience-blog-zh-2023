["```py\n[0, 0, 0, 0, 0, 1, 0, 0, 0, 24, 3, 0, 0, 0, 0, ...]\n```", "```py\n[0.634, 0.234, 0.867, 0.042, 0.249, 0.093, 0.029, 0.123, 0.234, ...]\n```", "```py\nhybrid_score = (1 - alpha) * sparse_score + alpha * dense_score\n```", "```py\n# Define and populate vector store\n# See details here https://towardsdatascience.com/retrieval-augmented-generation-rag-from-theory-to-langchain-implementation-4e9bd5f6a4f2\nvectorstore = ...\n\n# Set vectorstore as retriever\nretriever = vectorstore.as_retriever()\n```", "```py\nfrom langchain.retrievers.weaviate_hybrid_search import WeaviateHybridSearchRetriever\n\nretriever = WeaviateHybridSearchRetriever(\n    alpha = 0.5,               # defaults to 0.5, which is equal weighting between keyword and semantic search\n    client = client,           # keyword arguments to pass to the Weaviate client\n    index_name = \"LangChain\",  # The name of the index to use\n    text_key = \"text\",         # The name of the text key to use\n    attributes = [],           # The attributes to return in the results\n)\n```"]