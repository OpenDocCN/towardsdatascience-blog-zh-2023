["```py\ntheta = cov(Y,X)/var(X)\n```", "```py\nY_cuped = Y - theta*(X - mean(X))\n```", "```py\nVar(Y_cuped) = Var(Y)(1-Corr(Y,X))\n```", "```py\nY_res = Y - g(X)\n```", "```py\ndef mlpredict(dfml,p):\n    XGB_reg = XGBRegressor(learning_rate = 0.1, \n                            max_depth = 6, \n                            n_estimators = 500, \n                            reg_lambda = 1)\n\n    X_mat = dfml.columns.tolist()[0:p]\n\n    kfold = StratifiedKFold(n_splits=2, shuffle=True, random_state=1)\n\n    ix = []\n    Yhat = []\n    for train_index, test_index in kfold.split(dfml, dfml[\"T\"]):\n\n        df_train = dfml.iloc[train_index].reset_index()\n        df_test = dfml.iloc[test_index].reset_index()\n\n        X_train = df_train[X_mat].copy()\n        y_train = df_train['Y'].copy()\n        X_test =  df_test[X_mat].copy()\n\n        XGB_reg.fit(X_train, y_train)\n\n        Y_hat = XGB_reg.predict(X_test)\n\n        ix.extend(list(test_index))\n        Yhat.extend(list(Y_hat))\n\n    df_ml = pd.DataFrame({'ix':ix,'Yhat':Yhat}).sort_values(by='ix').reset_index(drop=True)\n    df_ml[['Y','T']] = dfml[['Y','T']]\n    df_ml['Ytilde'] = df_ml['Yhat'] - np.mean(df_ml['Yhat'])\n    df_ml['Yres'] = df_ml['Y'] - df_ml['Yhat']\n    df_ml = df_ml.drop('ix', axis=1)\n\n    return df_ml\n```", "```py\ndef dgp(n=2000, p=10, linear=True, constant=True):\n\n    Xmat = np.random.multivariate_normal(np.zeros(p), np.eye(p), size=n).astype('float32')\n\n    T = np.random.binomial(1, 0.5, n).astype('int8')\n\n    col_list = ['X' + str(x) for x in range(1,(p+1))]\n\n    df = pd.DataFrame(Xmat, columns = col_list)\n\n    # functional form of the covariates\n    if linear:\n        B = 225 + 50*df['X1'] + 5*df['X2'] + 20*(df['X3']-0.5) + 10*df['X4'] + 5*df['X5']\n    else:\n        B = 225 + 50*df['X1'] + 5*np.sin(np.pi*df['X1']*df['X2'] ) + 10*(df['X3']-0.5)**2 + 10*df['X4']**2 + 5*df['X5']**3\n\n    # constant ate or non-constant\n    tau = 5 if constant else 5*df['X1'] + 5*np.log(1 + np.exp(df['X2']))\n\n    Y = (B + tau*T + np.random.normal(0,25,n)).astype('float32')\n\n    df['T'] = T\n    df['Y'] = Y    \n    return df\n```", "```py\ndef experiment(**kwargs):\n\n    dct = {}\n\n    n = kwargs['n']\n    p = kwargs['p']\n    linear = kwargs['linear']\n    constant = kwargs['constant']\n\n    df = dgp(n,p,linear,constant)\n\n    #1\\. Difference-in-means\n    mu_treated = np.mean(df.query('T==1')['Y'])\n    mu_control = np.mean(df.query('T==0')['Y'])\n\n    dct['DIM'] = mu_treated - mu_control\n\n    #2\\. OLS adjusted\n    if kwargs['OLS_adj']:\n\n        ols_adj = smf.ols('Y ~' + ('+').join(df.columns.tolist()[0:(p+1)]),\n                 data = df).fit(cov_type='HC1',use_t=True)\n\n        dct['OLS_adj'] = ols_adj.params['T']\n\n    #3\\. OLS interacted\n    if kwargs['OLS_int']:\n        df = df.assign(**({c+'tilde': (df[c] - df[c].mean()) for c in df.columns.tolist()[0:p]}))\n\n        ols_int = smf.ols('Y ~' + ('+').join(df.columns.tolist()[0:(p+1)]) + '+' + 'T:('+('+').join(df.columns.tolist()[p+2:])+')',\n                 data = df).fit(cov_type='HC1',use_t=True)\n\n        dct['OLS_int'] = ols_int.params['T']\n\n    #4\\. CUPED\n    if kwargs['CUPED']:\n        theta = smf.ols('Y ~ X1',data = df).fit(cov_type='HC1',use_t=True).params['X1']\n\n        df['Y_res'] = df['Y'] - theta*(df['X1'] - np.mean(df['X1']))\n\n        cuped = smf.ols('Y_res ~ T', data=df).fit(cov_type='HC1',use_t=True)\n\n        dct['CUPED'] = cuped.params['T']\n\n    pred_df = mlpredict(df,p)\n\n    #5\\. Difference-in-differences\n    if kwargs['DID']:\n        mu2_treated = np.mean(pred_df.query('T==1')['Yres'])\n        mu2_control = np.mean(pred_df.query('T==0')['Yres'])\n\n        dct['DID'] = mu2_treated - mu2_control\n\n    #6\\. MLRATE\n    if kwargs['MLRATE']:\n        mlrate =  smf.ols('Y ~ T + Yhat + T:Ytilde',\n                     data = pred_df).fit(cov_type='HC1',use_t=True)\n\n        dct['MLRATE'] = mlrate.params['T']\n\n    return dct\n```", "```py\ndef plot_experiment(results, constant = True ):\n\n    results_long = pd.melt(results, value_vars=results.columns.tolist() )\n\n    print(round(results_long.groupby('variable').agg(mean=(\"value\", \"mean\"), std=(\"value\", \"std\"))\n          .reset_index().sort_values(by='std', ascending=False).reset_index(drop=True)\n          .assign(CI_lower= lambda x: x['mean'] - x['std']*1.96,\n                CI_upper= lambda x: x['mean'] + x['std']*1.96,),3)\n         )\n\n    mu = 5 if constant else 4\n\n    p = (ggplot(results_long, aes(x='value',color='variable') ) + \n     geom_density(size=1 )+\n     scale_color_manual(values = ['black', 'blue', 'green', 'c','red', 'salmon', 'magenta' ]) + \n     geom_vline(xintercept=mu, colour='black', linetype='dashed' ) + \n     annotate(\"text\", x=mu, y=.1, label=\"True Mean\", size=15)+\n     labs(color='Method')  +\n     xlab('Estimate') +\n     theme(figure_size=(10, 8))\n    )\n\n    print(p)\n```", "```py\n%%time\ntqdm._instances.clear() \nsim = 1000\n\nresults1 = Parallel(n_jobs=8)(delayed(experiment)(n=2000, p=10, linear=True, constant=True,\n                                    OLS_adj=True, OLS_int=True, CUPED=True, DID=True, MLRATE=True)\\\n                                    for _ in tqdm(range(sim)) )\n\nresults_df1 = pd.DataFrame(results1)\n\nplot_experiment(results_df1)\n```", "```py\nresults2 = Parallel(n_jobs=8)(delayed(experiment)(n=2000, p=10,linear=True, constant=False,\n                                    OLS_adj=True, OLS_int=True, CUPED=True, DID=True, MLRATE=True)\\\n                                    for _ in tqdm(range(sim)) )\n\nresults_df2 = pd.DataFrame(results2)\n\nplot_experiment(results_df2, False)\n```", "```py\nresults3 = Parallel(n_jobs=8)(delayed(experiment)(n=2000, p=10,linear=False, constant=True,\n                                    OLS_adj=True, OLS_int=True, CUPED=True, DID=True, MLRATE=True)\\\n                                    for _ in tqdm(range(sim)) )\n\nresults_df3 = pd.DataFrame(results3)\n\nplot_experiment(results_df3)\n```", "```py\nresults4 = Parallel(n_jobs=8)(delayed(experiment)(n=2000, p=10,linear=False, constant=False,\n                             OLS_adj=True, OLS_int=True, CUPED=True, DID=True, MLRATE=True)\\\n                             for _ in tqdm(range(sim)) )\n\nresults_df4 = pd.DataFrame(results4)\n\nplot_experiment(results_df4, False)\n```"]