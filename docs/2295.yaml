- en: 'Getting Started with Weaviate: A Beginner’s Guide to Search with Vector Databases'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18](https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to use vector databases for semantic search, question answering, and generative
    search in Python with OpenAI and Weaviate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----14bbb9285839---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    ·12 min read·Jul 18, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=-----14bbb9285839---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&source=-----14bbb9285839---------------------bookmark_footer-----------)![](../Images/6485587f0e926a7c26edc3221c1441f3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: If you landed on this article, I assume you have been playing around with building
    an app with a large language model (LLM) and came across the term vector database.
  prefs: []
  type: TYPE_NORMAL
- en: The tool landscape around building apps with LLMs is growing rapidly, with tools
    such as [LangChain](https://python.langchain.com/docs/get_started/introduction.html)
    or [LlamaIndex](https://www.llamaindex.ai/) gaining popularity.
  prefs: []
  type: TYPE_NORMAL
- en: In a [recent article, I described how to get started with LangChain](/getting-started-with-langchain-a-beginners-guide-to-building-llm-powered-applications-95fc8898732c),
    and in this article, I want to continue exploring the LLM tool landscape by playing
    around with [Weaviate](https://weaviate.io/).
  prefs: []
  type: TYPE_NORMAL
- en: What is Weaviate?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Weaviate](https://weaviate.io/) is an open-source vector database. It enables
    you to store data objects and vector embeddings and query them based on similarity
    measures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)
    [## GitHub - weaviate/weaviate: Weaviate is an open source vector database that
    stores both objects and…'
  prefs: []
  type: TYPE_NORMAL
- en: Weaviate is an open source vector database that stores both objects and vectors,
    allowing for combining vector search…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Vector databases have been getting much attention since the rise of media attention
    on LLMs. Probably the most popular use case of vector databases in the context
    of LLMs is to “provide LLMs with long-term memory”.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need a refresher on the concept of vector databases, you might want
    to have a look at my previous article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)
    [## Explaining Vector Databases in 3 Levels of Difficulty'
  prefs: []
  type: TYPE_NORMAL
- en: 'From noob to expert: Demystifying vector databases across different backgrounds'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, we will walk through how to populate a Weaviate vector database
    with embeddings of your dataset. Then we will go over three different ways you
    can retrieve information from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Vector Search](#abaf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Question answering](#cf85)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generative search](#a30a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along in this tutorial, you will need to have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3 environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OpenAI](https://openai.com/) API key (or alternatively, an API key for Hugging
    Face, Cohere, or PaLM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A note on the API key:* In this tutorial, we will generate embeddings from
    text via an inference service (in this case, [OpenAI](https://openai.com/)). Depending
    on which inference service you use, make sure to check the provider''s pricing
    page to avoid unexpected costs. E.g., the used [Ada model (version 2) costs $0.0001
    per 1,000 tokens](https://openai.com/pricing) at the time of writing and resulted
    in less than 1 cent in inference costs for this tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can run Weaviate either on your own instances (using Docker, Kubernetes,
    or Embedded Weaviate) or as a managed service using Weaviate Cloud Services (WCS).
    For this tutorial, we will run a Weaviate instance with WCS, as this is the recommended
    and most straightforward way.
  prefs: []
  type: TYPE_NORMAL
- en: How to Create a Cluster with Weaviate Cloud Services (WCS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be able to use the service, you first need to [register with WCS](https://console.weaviate.cloud/).
  prefs: []
  type: TYPE_NORMAL
- en: Once you are registered, you can create a new Weaviate Cluster by clicking the
    “Create cluster” button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cac79d7af6e30a06e44d88de4ee8bee6.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Weaviate Cloud Services
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, we will be using the free trial plan, which will provide
    you with a sandbox for 14 days. (You won’t have to add any payment information.
    Instead, the sandbox simply expires after the trial period. But you can create
    a new free trial sandbox anytime.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the “Free sandbox” tab, make the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter a cluster name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Authentication (set to “YES”)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/db24341de07f83075b91e11d83f80aef.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Weaviate Cloud Services plans
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click “Create” to create your sandbox instance.
  prefs: []
  type: TYPE_NORMAL
- en: How to Install Weaviate in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Last but not least, add the `weaviate-client` to your Python environment with
    `pip`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'and import the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**How To Access a Weaviate Cluster Through a Client**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the next step, you will need the following two pieces of information to
    access your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: The cluster URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weaviate API key (under “Enabled — Authentication”)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5f272ff38d248ed5e5f866d4e61f3c37.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Weaviate Cloud Services sandbox
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can instantiate a Weaviate client to access your Weaviate cluster as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using the OpenAI API key under `additional_headers`
    to access the embedding model later. If you are using a different provider than
    OpenAI, change the key parameter to one of the following that apply: `X-Cohere-Api-Key`,
    `X-HuggingFace-Api-Key`, or `X-Palm-Api-Key`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To check if everything is set up correctly, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If it returns `True`, you’re all set for the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to Create and Populate a Weaviate Vector Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we’re ready to create a vector database in Weaviate and populate it with
    some data.
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, we will use the first 100 rows of the [200.000+ Jeopardy
    Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    dataset [1] from Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0537b31ea6ffbae1f3adae0b122ec306.png)'
  prefs: []
  type: TYPE_IMG
- en: First few rows of the [200.000+ Jeopardy Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    dataset [1] from Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: '*A note on the number of tokens and related costs: In the following example,
    we will embed the columns “category”, “question”, and “answer” for the first 100
    rows. Based on a calculation with the* `*tiktoken*` *library, this will result
    in roughly 3,000 tokens to embed, which* [*roughly results in $0.0003 inference
    costs with OpenAI’s Ada model (version 2) as of July 2023*](https://openai.com/pricing)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Create a Schema'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to define the underlying data structure and some configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`class`: What will the collection of objects in this vector space be called?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`properties`: The properties of an object, including the property name and
    data type. In the Pandas Dataframe analogy, these would be the columns in the
    DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vectorizer`: The model that generates the embeddings. For text objects, you
    would typically select one of the `[text2vec](https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules)`
    modules (`text2vec-cohere`, `text2vec-huggingface`, `text2vec-openai`, or `text2vec-palm`)
    according to the provider you are using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moduleConfig`: Here, you can define the details of the used modules. E.g.,
    the vectorizer is a module for which you can define which model and version to
    use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above schema, you can see that we will create a class called `"JeopardyQuestion"`,
    with the three text properties `"category"`, `"question"`, and `"answer"`. The
    vectorizer we are using is OpenAI’s Ada model (version 2). All properties will
    be vectorized but not the class name (`"vectorizeClassName" : False`). If you
    have properties you don’t want to embed, you could specify this (see the [docs](https://weaviate.io/developers/academy/zero_to_mvp/schema_and_imports/schema)).'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have defined the schema, you can create the class with the `create_class()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if the class has been created successfully, you can review its schema
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The created schema looks as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Import data into Weaviate'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this stage, the vector database has a schema but is still empty. So, let’s
    populate it with our dataset. This process is also called “upserting”.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will upsert the data in batches of 200\. If you paid attention, you know
    this isn’t necessary here because we only have 100 rows of data. But once you
    are ready to upsert larger amounts of data, you will want to do this in batches.
    That’s why I’ll leave the code for batching here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Although, Weaviate will generate a universally unique identifier (`uuid`) automatically,
    we will manually generate the `uuid` with the `generate_uuid5()` function from
    the `question_object` to avoid importing duplicate items.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a sanity check, you can review the number of imported objects with the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to Query the Weaviate Vector Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most common operation you will do with a vector database is to retrieve
    objects. To retrieve objects, you query the Weaviate vector database with the
    `get()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Class`: specifies the name of the class of objects to be retrieved. Here:
    `"JeopardyQuestion"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`properties`: specifies the properties of the objects to be retrieved. Here:
    one or more of `"category"`, `"question"`, and `"answer"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arguments`: specifies the search criteria to retrieve the objects, such as
    limits or aggregations. We will cover some of these in the following examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s retrieve some entries from the `JeopardyQuestion` class with the `get()`
    function to see what they look like. In the Pandas analogy, you can think of the
    following as `df.head(2)`. Because the `get()` function’s response is in JSON
    format, we will import the related library to display the result in a visually
    appealing format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the above code snippet, you can see that we are retrieving objects from the
    `"JeopardyQuestion"` class. We specified to retrieve the properties `"category"`,
    `"question"`, and `"answer"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We specified two additional `arguments`: First, we specified with the `.with_additional()`
    argument to retrieve additional information about the object''s id and the vector
    embedding. And with the `.with_limit(2)` argument, we specified only to retrieve
    two objects. This limitation is important, and you will see it again in the later
    examples. This is because retrieving objects from a vector database does not return
    the exact matches but returns objects based on similarity, which has to be limited
    by a threshold.'
  prefs: []
  type: TYPE_NORMAL
- en: Vector search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we’re ready to do some vector search! What’s cool about retrieving information
    from a vector database is that you can e.g., tell it to retrieve Jeopardy questions
    related to the `"concepts"` around animals.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we can use the `.with_near_text()` argument and pass it the `"concepts"`
    we are interested in as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The specified `vectorizer` then converts the input text (`"animals”`) to a
    vector embedding and retrieves the two closest results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can already see how cool this is: We can see that the vector search returned
    two questions where the answer is an animal from two completely different categories.
    With a classical keyword search, you would have had first to define a list of
    animals and then retrieve all questions that contain one of the defined animals.'
  prefs: []
  type: TYPE_NORMAL
- en: Question answering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Question answering is one of the most popular examples when it comes to combining
    LLMs with vector databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable question answering, you need to specify a vectorizer (which you should
    already have) and a question-answering module under the module configuration,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For question-answering, you need to add the `with_ask()` argument and also retrieve
    `_additional`properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The above piece of code looks through all questions that may contain the answer
    to the question `"Which animal was mentioned in the title of the Aesop fable?"`
    and returns the answer `"The ant"`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Generative search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By incorporating LLMs, you can also transform the data before returning the
    search result. This concept is called generative search.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable generative search, you need to specify a generative module under
    the module configuration, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For generative search, you only need to add the `with_generate()` argument
    to your previous vector search code as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The above piece of code does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for the question closest to the concept of `"animals"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the question `"Say the name of this type of mollusk you see"` with the
    answer `"an octopus"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Generate a completion for the prompt `"Generate a question to which the answer
    is an octopus”` with the final result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The popularity of the LLM space has not only brought up many interesting new
    developer tools like LangChain or LLaMaIndex. It also has shown us how to use
    already existing tools, such as vector databases, to enhance the potential of
    LLM-powered applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have started playing around with Weaviate to not only use
    vector databases for vector search but also for question-answering and generative
    search in combination with LLMs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in a more in-depth walkthrough, I recommend checking
    out this comprehensive four part course on vector databases and Weaviate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
    [## 1\. Zero to MVP | Weaviate — vector database'
  prefs: []
  type: TYPE_NORMAL
- en: Course overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weaviate.io](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Disclaimer: I am a Developer Advocate at Weaviate at the time of this writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: Enjoyed This Story?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Ulrik Thyge Pedersen(2023). [200.000+ Jeopardy Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    in Kaggle Datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: '**License:** Attribution 4.0 International (CC BY 4.0)'
  prefs: []
  type: TYPE_NORMAL
- en: Image References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If not otherwise stated, all images are created by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Web & Literature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[2] Weaviate (2023). [Weaviate documentation](https://weaviate.io/developers/weaviate)
    (accessed 14\. July 2023)'
  prefs: []
  type: TYPE_NORMAL
