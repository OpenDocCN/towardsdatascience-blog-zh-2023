- en: 'Getting Started with Weaviate: A Beginner’s Guide to Search with Vector Databases'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18](https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to use vector databases for semantic search, question answering, and generative
    search in Python with OpenAI and Weaviate
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----14bbb9285839---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    ·12 min read·Jul 18, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=-----14bbb9285839---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&source=-----14bbb9285839---------------------bookmark_footer-----------)![](../Images/6485587f0e926a7c26edc3221c1441f3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: If you landed on this article, I assume you have been playing around with building
    an app with a large language model (LLM) and came across the term vector database.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The tool landscape around building apps with LLMs is growing rapidly, with tools
    such as [LangChain](https://python.langchain.com/docs/get_started/introduction.html)
    or [LlamaIndex](https://www.llamaindex.ai/) gaining popularity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In a [recent article, I described how to get started with LangChain](/getting-started-with-langchain-a-beginners-guide-to-building-llm-powered-applications-95fc8898732c),
    and in this article, I want to continue exploring the LLM tool landscape by playing
    around with [Weaviate](https://weaviate.io/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[最近的一篇文章中，我描述了如何开始使用 LangChain](/getting-started-with-langchain-a-beginners-guide-to-building-llm-powered-applications-95fc8898732c)，在这篇文章中，我想通过玩弄[Weaviate](https://weaviate.io/)来继续探索
    LLM 工具的景观。
- en: What is Weaviate?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Weaviate？
- en: '[Weaviate](https://weaviate.io/) is an open-source vector database. It enables
    you to store data objects and vector embeddings and query them based on similarity
    measures.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Weaviate](https://weaviate.io/) 是一个开源向量数据库。它使你能够存储数据对象和向量嵌入，并根据相似性度量查询它们。'
- en: '[](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)
    [## GitHub - weaviate/weaviate: Weaviate is an open source vector database that
    stores both objects and…'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[## GitHub - weaviate/weaviate: Weaviate 是一个开源向量数据库，既存储对象也存储向量…](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)'
- en: Weaviate is an open source vector database that stores both objects and vectors,
    allowing for combining vector search…
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Weaviate 是一个开源向量数据库，存储对象和向量，允许进行向量搜索的结合…
- en: github.com](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)'
- en: Vector databases have been getting much attention since the rise of media attention
    on LLMs. Probably the most popular use case of vector databases in the context
    of LLMs is to “provide LLMs with long-term memory”.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 向量数据库自从 LLM 媒体关注度上升以来，受到了大量关注。可能最流行的向量数据库在 LLM 上下文中的应用是“为 LLM 提供长期记忆”。
- en: 'If you need a refresher on the concept of vector databases, you might want
    to have a look at my previous article:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要重新了解向量数据库的概念，你可能想查看我之前的文章：
- en: '[](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)
    [## Explaining Vector Databases in 3 Levels of Difficulty'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 解释向量数据库的三种难度级别](https://explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)'
- en: 'From noob to expert: Demystifying vector databases across different backgrounds'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从新手到专家：解密不同背景下的向量数据库
- en: towardsdatascience.com](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)'
- en: 'In this tutorial, we will walk through how to populate a Weaviate vector database
    with embeddings of your dataset. Then we will go over three different ways you
    can retrieve information from it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将演示如何用数据集的嵌入填充 Weaviate 向量数据库。然后，我们将介绍三种从中检索信息的方法：
- en: '[Vector Search](#abaf)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向量搜索](#abaf)'
- en: '[Question answering](#cf85)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问答系统](#cf85)'
- en: '[Generative search](#a30a)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[生成搜索](#a30a)'
- en: Prerequisites
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'To follow along in this tutorial, you will need to have the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本教程，你需要具备以下条件：
- en: Python 3 environment
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3 环境
- en: '[OpenAI](https://openai.com/) API key (or alternatively, an API key for Hugging
    Face, Cohere, or PaLM)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenAI](https://openai.com/) API 密钥（或选择 Hugging Face、Cohere 或 PaLM 的 API 密钥）'
- en: '*A note on the API key:* In this tutorial, we will generate embeddings from
    text via an inference service (in this case, [OpenAI](https://openai.com/)). Depending
    on which inference service you use, make sure to check the provider''s pricing
    page to avoid unexpected costs. E.g., the used [Ada model (version 2) costs $0.0001
    per 1,000 tokens](https://openai.com/pricing) at the time of writing and resulted
    in less than 1 cent in inference costs for this tutorial.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于 API 密钥的说明：* 在本教程中，我们将通过一个推理服务（在这种情况下是[OpenAI](https://openai.com/)）从文本中生成嵌入。根据你使用的推理服务，请确保检查提供商的定价页面以避免意外费用。例如，使用的[阿达模型（版本
    2）在撰写时的费用为每 1,000 个令牌 $0.0001](https://openai.com/pricing)，在本教程中推理费用不到 1 美分。'
- en: Setup
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: You can run Weaviate either on your own instances (using Docker, Kubernetes,
    or Embedded Weaviate) or as a managed service using Weaviate Cloud Services (WCS).
    For this tutorial, we will run a Weaviate instance with WCS, as this is the recommended
    and most straightforward way.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在自己的实例上运行 Weaviate（使用 Docker、Kubernetes 或嵌入式 Weaviate），也可以通过 Weaviate Cloud
    Services (WCS) 作为托管服务运行。对于本教程，我们将使用 WCS 运行 Weaviate 实例，因为这是推荐的最简单的方法。
- en: How to Create a Cluster with Weaviate Cloud Services (WCS)
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Weaviate Cloud Services (WCS) 创建集群
- en: To be able to use the service, you first need to [register with WCS](https://console.weaviate.cloud/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Once you are registered, you can create a new Weaviate Cluster by clicking the
    “Create cluster” button.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cac79d7af6e30a06e44d88de4ee8bee6.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Weaviate Cloud Services
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, we will be using the free trial plan, which will provide
    you with a sandbox for 14 days. (You won’t have to add any payment information.
    Instead, the sandbox simply expires after the trial period. But you can create
    a new free trial sandbox anytime.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the “Free sandbox” tab, make the following settings:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Enter a cluster name
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Authentication (set to “YES”)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/db24341de07f83075b91e11d83f80aef.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Weaviate Cloud Services plans
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click “Create” to create your sandbox instance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: How to Install Weaviate in Python
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Last but not least, add the `weaviate-client` to your Python environment with
    `pip`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and import the library:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**How To Access a Weaviate Cluster Through a Client**'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the next step, you will need the following two pieces of information to
    access your cluster:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: The cluster URL
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weaviate API key (under “Enabled — Authentication”)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5f272ff38d248ed5e5f866d4e61f3c37.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Weaviate Cloud Services sandbox
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can instantiate a Weaviate client to access your Weaviate cluster as
    follows.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, we are using the OpenAI API key under `additional_headers`
    to access the embedding model later. If you are using a different provider than
    OpenAI, change the key parameter to one of the following that apply: `X-Cohere-Api-Key`,
    `X-HuggingFace-Api-Key`, or `X-Palm-Api-Key`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'To check if everything is set up correctly, run:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If it returns `True`, you’re all set for the next steps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: How to Create and Populate a Weaviate Vector Database
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we’re ready to create a vector database in Weaviate and populate it with
    some data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, we will use the first 100 rows of the [200.000+ Jeopardy
    Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    dataset [1] from Kaggle.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/0537b31ea6ffbae1f3adae0b122ec306.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: First few rows of the [200.000+ Jeopardy Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    dataset [1] from Kaggle.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '*A note on the number of tokens and related costs: In the following example,
    we will embed the columns “category”, “question”, and “answer” for the first 100
    rows. Based on a calculation with the* `*tiktoken*` *library, this will result
    in roughly 3,000 tokens to embed, which* [*roughly results in $0.0003 inference
    costs with OpenAI’s Ada model (version 2) as of July 2023*](https://openai.com/pricing)*.*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Create a Schema'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to define the underlying data structure and some configurations:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '`class`: What will the collection of objects in this vector space be called?'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`properties`: The properties of an object, including the property name and
    data type. In the Pandas Dataframe analogy, these would be the columns in the
    DataFrame.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vectorizer`: The model that generates the embeddings. For text objects, you
    would typically select one of the `[text2vec](https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules)`
    modules (`text2vec-cohere`, `text2vec-huggingface`, `text2vec-openai`, or `text2vec-palm`)
    according to the provider you are using.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moduleConfig`: Here, you can define the details of the used modules. E.g.,
    the vectorizer is a module for which you can define which model and version to
    use.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the above schema, you can see that we will create a class called `"JeopardyQuestion"`,
    with the three text properties `"category"`, `"question"`, and `"answer"`. The
    vectorizer we are using is OpenAI’s Ada model (version 2). All properties will
    be vectorized but not the class name (`"vectorizeClassName" : False`). If you
    have properties you don’t want to embed, you could specify this (see the [docs](https://weaviate.io/developers/academy/zero_to_mvp/schema_and_imports/schema)).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Once you have defined the schema, you can create the class with the `create_class()`
    method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To check if the class has been created successfully, you can review its schema
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The created schema looks as shown below:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Step 2: Import data into Weaviate'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this stage, the vector database has a schema but is still empty. So, let’s
    populate it with our dataset. This process is also called “upserting”.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'We will upsert the data in batches of 200\. If you paid attention, you know
    this isn’t necessary here because we only have 100 rows of data. But once you
    are ready to upsert larger amounts of data, you will want to do this in batches.
    That’s why I’ll leave the code for batching here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Although, Weaviate will generate a universally unique identifier (`uuid`) automatically,
    we will manually generate the `uuid` with the `generate_uuid5()` function from
    the `question_object` to avoid importing duplicate items.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'For a sanity check, you can review the number of imported objects with the
    following code snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to Query the Weaviate Vector Database
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most common operation you will do with a vector database is to retrieve
    objects. To retrieve objects, you query the Weaviate vector database with the
    `get()` function:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Class`: specifies the name of the class of objects to be retrieved. Here:
    `"JeopardyQuestion"`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`properties`: specifies the properties of the objects to be retrieved. Here:
    one or more of `"category"`, `"question"`, and `"answer"`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arguments`: specifies the search criteria to retrieve the objects, such as
    limits or aggregations. We will cover some of these in the following examples.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s retrieve some entries from the `JeopardyQuestion` class with the `get()`
    function to see what they look like. In the Pandas analogy, you can think of the
    following as `df.head(2)`. Because the `get()` function’s response is in JSON
    format, we will import the related library to display the result in a visually
    appealing format.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the above code snippet, you can see that we are retrieving objects from the
    `"JeopardyQuestion"` class. We specified to retrieve the properties `"category"`,
    `"question"`, and `"answer"`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'We specified two additional `arguments`: First, we specified with the `.with_additional()`
    argument to retrieve additional information about the object''s id and the vector
    embedding. And with the `.with_limit(2)` argument, we specified only to retrieve
    two objects. This limitation is important, and you will see it again in the later
    examples. This is because retrieving objects from a vector database does not return
    the exact matches but returns objects based on similarity, which has to be limited
    by a threshold.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Vector search
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we’re ready to do some vector search! What’s cool about retrieving information
    from a vector database is that you can e.g., tell it to retrieve Jeopardy questions
    related to the `"concepts"` around animals.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we can use the `.with_near_text()` argument and pass it the `"concepts"`
    we are interested in as shown below:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The specified `vectorizer` then converts the input text (`"animals”`) to a
    vector embedding and retrieves the two closest results:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can already see how cool this is: We can see that the vector search returned
    two questions where the answer is an animal from two completely different categories.
    With a classical keyword search, you would have had first to define a list of
    animals and then retrieve all questions that contain one of the defined animals.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Question answering
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Question answering is one of the most popular examples when it comes to combining
    LLMs with vector databases.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable question answering, you need to specify a vectorizer (which you should
    already have) and a question-answering module under the module configuration,
    as shown in the following example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For question-answering, you need to add the `with_ask()` argument and also retrieve
    `_additional`properties.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The above piece of code looks through all questions that may contain the answer
    to the question `"Which animal was mentioned in the title of the Aesop fable?"`
    and returns the answer `"The ant"`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Generative search
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By incorporating LLMs, you can also transform the data before returning the
    search result. This concept is called generative search.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable generative search, you need to specify a generative module under
    the module configuration, as shown in the following example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For generative search, you only need to add the `with_generate()` argument
    to your previous vector search code as shown below:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The above piece of code does the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Search for the question closest to the concept of `"animals"`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the question `"Say the name of this type of mollusk you see"` with the
    answer `"an octopus"`
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Generate a completion for the prompt `"Generate a question to which the answer
    is an octopus”` with the final result:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The popularity of the LLM space has not only brought up many interesting new
    developer tools like LangChain or LLaMaIndex. It also has shown us how to use
    already existing tools, such as vector databases, to enhance the potential of
    LLM-powered applications.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have started playing around with Weaviate to not only use
    vector databases for vector search but also for question-answering and generative
    search in combination with LLMs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in a more in-depth walkthrough, I recommend checking
    out this comprehensive four part course on vector databases and Weaviate:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
    [## 1\. Zero to MVP | Weaviate — vector database'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Course overview
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weaviate.io](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '*Disclaimer: I am a Developer Advocate at Weaviate at the time of this writing.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Enjoyed This Story?
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dataset
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Ulrik Thyge Pedersen(2023). [200.000+ Jeopardy Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    in Kaggle Datasets.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '**License:** Attribution 4.0 International (CC BY 4.0)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Image References
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If not otherwise stated, all images are created by the author.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Web & Literature
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[2] Weaviate (2023). [Weaviate documentation](https://weaviate.io/developers/weaviate)
    (accessed 14\. July 2023)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
