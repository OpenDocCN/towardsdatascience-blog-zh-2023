["```py\npip install gradio\n```", "```py\nimport gradio as gr\n\ndemo = gr.Interface(\n    inputs=[gr.Textbox(label=\"Name\", lines=1)],\n    outputs=[gr.Textbox(label=\"Result\", lines=1)],\n    fn=lambda x: 'Hello, %s!' % x,\n    title=\"Hello, World!\",\n    description=\"Your first app using Gradio\",\n    allow_flagging='never')\n\ndemo.launch()\n```", "```py\nimport plotly.express as px\n\n# functions to calculate retention\n\ndef get_retention(a, b, c, d, periods):\n    return  a + 1./(b + c * (periods ** d))\n\ndef get_retention_same_event(a, c, d, periods):\n    b = 1./(1 - a)\n    return get_retention(a, b, c, d, periods)\n\n# define function - return plot depending on input parameters\n\ndef get_retention_plot(a, c, d, num_periods):\n    df = pd.DataFrame({'x': range(num_periods + 1)})\n    df['retention'] = df.x.map(lambda x: get_retention_same_event(a, c, d, x))\n\n    return px.line(df, x = 'x', y = 'retention', \n                  color_discrete_sequence = px.colors.qualitative.Prism, \n                  title = 'Retention curve', labels = {'x': 'period'})\n\n# define inputs\ninputs = [\n    gr.Slider(0, 1, 0.03, label=\"a\"),\n    gr.Slider(0, 5, 0.55, label=\"c\"),\n    gr.Slider(0, 5, 1.5, label=\"d\"),\n    gr.Dropdown([10, 30, 60, 90], value = 30, label=\"Number of Periods\"),\n    gr.Dropdown([10, 100, 1000, 10000], value = 10000, label=\"Number of new users each period\")\n]\n\n# define outputs\noutputs = gr.Plot()\n\n# define interface\ndemo = gr.Interface(\n    fn=get_retention_plot,\n    inputs=inputs,\n    outputs=outputs,\n    cache_examples=True,\n    allow_flagging = 'never' # hiding default flag functionality in the interface\n)\n\n# launch\ndemo.launch(debug = True)\n```", "```py\n def get_retention_plot(a, c, d, num_periods, cohort_size):\n    ret_df = pd.DataFrame({'x': range(num_periods + 1)})\n    ret_df['retention'] = ret_df.x.map(lambda x: get_retention_same_event(a, c, d, x))\n\n    ret_fig = px.line(ret_df.iloc[1:], x = 'x', y = 'retention', \n                      color_discrete_sequence = px.colors.qualitative.Prism, \n                      title = 'Retention curve')\n\n    # simulation\n\n    tmp_data = []\n\n    for cohort in range(num_periods + 1):\n        for cohort_period in range(num_periods + 1):\n            period = cohort_period + cohort\n            if period > num_periods:\n                continue\n            retention = get_retention_same_event(a, c, d, cohort_period)\n            tmp_data.append(\n                {\n                    'cohort': 'cohort %s' % str(cohort).rjust(3, '0'),\n                    'cohort_period': cohort_period,\n                    'period': period,\n                    'retention': retention,\n                    'users': int(round(retention * cohort_size))\n                }\n            )\n    users_df = pd.DataFrame(tmp_data)\n\n    users_fig = px.area(users_df.groupby('period').users.sum(),\n                    color_discrete_sequence = px.colors.qualitative.Prism, \n                      title = 'Active users')\n\n    cohorts_fig = px.area(users_df.pivot_table(index = 'period', columns = 'cohort', values = 'users',\n                    aggfunc = 'sum'),\n                    color_discrete_sequence = px.colors.qualitative.Prism, \n                    title = 'Active users by cohorts')\n\n    return ret_fig, users_fig, cohorts_fig\n\ninputs = [\n    gr.Slider(0, 1, 0.03, label=\"a\"),\n    gr.Slider(0, 5, 0.55, label=\"c\"),\n    gr.Slider(0, 5, 1.5, label=\"d\"),\n    gr.Dropdown([10, 30, 60, 90], value = 30, label=\"Number of Periods\"),\n    gr.Dropdown([10, 100, 1000, 10000], value = 10000, label=\"Number of new users each period\")\n]\n\noutputs = [gr.Plot(), gr.Plot(),  gr.Plot()]\n\ndemo = gr.Interface(\n    fn=get_retention_plot,\n    inputs=inputs,\n    outputs=outputs,\n    allow_flagging = 'never',\n    cache_examples=True,\n)\n\ndemo.launch(debug = True)\n```", "```py\nbtn_caption.click(fn=get_retention_plot, \n        inputs=[a, c, d, num_periods, cohort_size], \n        outputs=[plot1, plot2, plot3])\n```", "```py\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# Understanding Growth ðŸš€\")\n    with gr.Row():\n        with gr.Column():\n            gr.Markdown(\"## Retention curve parameters ðŸ“ˆ\")\n            gr.Markdown(r\"$\\textbf{retention}(\\textsf{x}) = \\textsf{a} + \\frac{\\textsf{1}}{\\textsf{b} + \\textsf{c} * \\textsf{x}^{\\textsf{d}}}\\ where\\ \\textsf{b} = \\frac{\\textsf{1}}{\\textsf{1}-\\textsf{a}}$\")\n            with gr.Row():\n                a = gr.Slider(0, 1, 0.03, label=\"a\")\n                c = gr.Slider(0, 5, 0.55, label=\"c\")\n                d = gr.Slider(0, 5, 1.5, label=\"d\")\n            with gr.Accordion(\"More options\", open=False):\n                with gr.Row():\n                    num_periods = gr.Dropdown([10, 30, 60, 90], value = 30, label=\"Number of Periods\")\n                    cohort_size = gr.Dropdown([10, 100, 1000, 10000], value = 10000, label=\"Number of new users each period\")\n            btn_caption = gr.Button(\"Submit\")\n        with gr.Column():\n            plot1 = gr.Plot()\n    with gr.Row():\n        plot2 = gr.Plot()\n        plot3 = gr.Plot()\n\n    btn_caption.click(fn=get_retention_plot, \n        inputs=[a, c, d, num_periods, cohort_size], \n        outputs=[plot1, plot2, plot3])\n\ndemo.launch()\n```", "```py\n-- cloning repo\ngit clone https://huggingface.co/spaces/<your_login>/<your_app_name>\ncd <your_app_name>\n```", "```py\ngit remote set-url origin https://<your_login>:<token>@huggingface.co/spaces/<your_login>/<your_app_name>\ngit pull origin\n```", "```py\ngit add app.py\ngit add requirements.txt\ngit commit -m 'First version of retention simulator app'\ngit push\n```", "```py\n# parses file or string and returns dataframe\ndef parse_file(input_text_or_file, num_periods):\n    if isinstance(input_text_or_file, str):\n        df = pd.read_csv(StringIO(input_text_or_file), sep = '\\t')\n    else:\n        df = pd.read_csv(input_text_or_file.name, sep = '\\t')\n    return df\n\n# takes dataframe and returns plot\ndef show_graph_for_df(df, num_periods):\n    df['period'] = df.period.map(int)\n    df['retention_fact'] = df.retention_fact.map(float)\n    result = scipy.optimize.minimize(lambda x: get_mse_for_retention(x, df), [random.random(), random.random(), random.random()])\n    a, c, d = result.x\n\n    pred_df = pd.DataFrame({'period': range(num_periods + 1)})\n    pred_df['retention_pred'] = pred_df.period.map(lambda x: get_retention_same_event(a, c, d, x))\n    pred_df = pred_df.merge(df, how = 'left')\n\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=pred_df.period, y=pred_df.retention_fact, name='fact',\n                             line=dict(color=plotly.colors.qualitative.Prism[0], width=3)))\n\n    fig.add_trace(go.Scatter(x=pred_df.period, y=pred_df.retention_pred, name='prediction',\n                             line=dict(color=plotly.colors.qualitative.Prism[0], width=3, dash='dot')))\n\n    fig.update_layout(title='Daily retention model (a = %.2f, c = %.2f, d = %.2f)' % (a, c, d),\n                       yaxis_title='retention',\n                       xaxis_title='period')\n    return fig\n\n# takes file and return plot\ndef show_graph_for_file(temp_file, num_periods):\n    df = parse_file(temp_file, num_periods)\n    return show_graph_for_df(df, num_periods)\n\n# hard-coded example of data\ndefault_csv = 'period\\tretention_fact\\n0\\t1\\n1\\t0.55\\n2\\t0.4\\n3\\t0.35\\n4\\t0.3\\n'\n\n# interface \nwith gr.Blocks() as demo:\n    gr.Markdown('# Predicting retention curve ðŸ“Š')\n    periods = gr.Dropdown([10, 30, 90, 180], label=\"Number of Periods\", value = 30)\n    gr.Markdown('Upload .csv file with data, use default data as an example or put in numbers manually in the Uploaded data section.')\n    gr.Markdown('''__File format:__ 2 columns (`period` and `retention_fact`)''')\n\n    with gr.Row():\n        upload_button = gr.UploadButton(label=\"Upload file\", file_types = ['.csv'], live=True, file_count = \"single\")\n        default_button = gr.Button('Show example')\n\n    with gr.Row():\n        with gr.Accordion(\"Uploaded data\", open=False):\n            gr.Markdown('You can change values in the table')\n            table = gr.Dataframe(type=\"pandas\", col_count=2, interactive = True, headers = ['period', 'retention_fact'])\n\n    with gr.Row():    \n        image = gr.Plot()    \n\n    # business logic of triggers and events\n    upload_button.upload(fn=show_graph_for_file, inputs=[upload_button, periods], outputs=image, api_name=\"upload_graph\")\n    upload_button.upload(fn=parse_file, inputs=[upload_button, periods], outputs=table, api_name=\"upload_csv\")\n    default_button.click(fn=lambda x: show_graph_for_file(default_csv, x), inputs=[periods], outputs=image, api_name=\"upload_example_graph\")\n    default_button.click(fn=lambda x: parse_file(default_csv, x), inputs=[periods], outputs=table, api_name=\"upload_example_csv\")\n    table.change(fn=show_graph_for_df, inputs=[table, periods], outputs=image, api_name=\"upload_table_graph\")\n    periods.change(fn=show_graph_for_df, inputs=[table, periods], outputs=image, api_name=\"upload_periods_graph\")\n\ndemo.launch(debug=True)\n```", "```py\nupload_button.upload(fn=show_graph_for_file, inputs=[upload_button, periods], outputs=image, api_name=\"upload_graph\")\nupload_button.upload(fn=parse_file, inputs=[upload_button, periods], outputs=table, api_name=\"upload_csv\")\n\ndefault_button.click(fn=lambda x: show_graph_for_file(default_csv, x), inputs=[periods], outputs=image, api_name=\"upload_example_graph\")\ndefault_button.click(fn=lambda x: parse_file(default_csv, x), inputs=[periods], outputs=table, api_name=\"upload_example_csv\")\n\ntable.change(fn=show_graph_for_df, inputs=[table, periods], outputs=image, api_name=\"upload_table_graph\")\nperiods.change(fn=show_graph_for_df, inputs=[table, periods], outputs=image, api_name=\"upload_periods_graph\")\n```", "```py\ndef get_mse_for_retention(params, df):\n    tmp_df = df.copy()\n    tmp_df['retention_pred'] = tmp_df.index.map(\n        lambda x: get_retention_same_event(params[0], params[1], params[2], x)\n    )\n\n    tmp_df['se'] = (tmp_df.retention_fact - tmp_df.retention_pred)\n    tmp_df['se'] = tmp_df['se']**2\n\n    return tmp_df.se.mean() ** 0.5\n\nresult = scipy.optimize.minimize(lambda x: get_mse_for_retention(x, df), [random.random(), random.random(), random.random()])\na, c, d = result.x\nprint(a, c, d)\n```"]