- en: 'Grad-CAM in Pytorch: Use of Forward and Backward Hooks'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pytorch中的Grad-CAM：前向和反向钩子的使用
- en: 原文：[https://towardsdatascience.com/grad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569?source=collection_archive---------3-----------------------#2023-04-17](https://towardsdatascience.com/grad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569?source=collection_archive---------3-----------------------#2023-04-17)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/grad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569?source=collection_archive---------3-----------------------#2023-04-17](https://towardsdatascience.com/grad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569?source=collection_archive---------3-----------------------#2023-04-17)
- en: Using gradients to understand how your model predicts
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用梯度了解你的模型如何进行预测
- en: '[](https://medium.com/@almeida.va93?source=post_page-----7eba5e38d569--------------------------------)[![Vinícius
    Almeida](../Images/5b757439dc5a5c2ad1b6ae7c26c1091b.png)](https://medium.com/@almeida.va93?source=post_page-----7eba5e38d569--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7eba5e38d569--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7eba5e38d569--------------------------------)
    [Vinícius Almeida](https://medium.com/@almeida.va93?source=post_page-----7eba5e38d569--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@almeida.va93?source=post_page-----7eba5e38d569--------------------------------)[![Vinícius
    Almeida](../Images/5b757439dc5a5c2ad1b6ae7c26c1091b.png)](https://medium.com/@almeida.va93?source=post_page-----7eba5e38d569--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7eba5e38d569--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7eba5e38d569--------------------------------)
    [Vinícius Almeida](https://medium.com/@almeida.va93?source=post_page-----7eba5e38d569--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa64bbd309&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569&user=Vin%C3%ADcius+Almeida&userId=a64bbd309&source=post_page-a64bbd309----7eba5e38d569---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7eba5e38d569--------------------------------)
    ·10 min read·Apr 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7eba5e38d569&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569&user=Vin%C3%ADcius+Almeida&userId=a64bbd309&source=-----7eba5e38d569---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa64bbd309&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569&user=Vin%C3%ADcius+Almeida&userId=a64bbd309&source=post_page-a64bbd309----7eba5e38d569---------------------post_header-----------)
    发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----7eba5e38d569--------------------------------)
    ·10分钟阅读·2023年4月17日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7eba5e38d569&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569&user=Vin%C3%ADcius+Almeida&userId=a64bbd309&source=-----7eba5e38d569---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7eba5e38d569&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569&source=-----7eba5e38d569---------------------bookmark_footer-----------)![](../Images/da05b94c0bd22bca614f81df9c7e4411.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7eba5e38d569&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgrad-cam-in-pytorch-use-of-forward-and-backward-hooks-7eba5e38d569&source=-----7eba5e38d569---------------------bookmark_footer-----------)![](../Images/da05b94c0bd22bca614f81df9c7e4411.png)'
- en: Image by author. X-ray image from the [kaggle chest X-ray dataset](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者。X射线图像来自[kaggle胸部X射线数据集](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia)。
- en: I took notice of a technique called Grad-CAM that enables the inspection of
    how a convolutional neural network predicts its outputs. For example, in a classifier,
    you can gain insight into how your neural network used the input to make its prediction.
    It all started with the [original paper](https://arxiv.org/pdf/1610.02391.pdf)
    that described it. In this article, we’re going to implement it using the Pytorch
    library in a way that you can apply to any convolutional neural network without
    needing to change anything in the neural network module you already have.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我注意到一种叫做 Grad-CAM 的技术，它可以检查卷积神经网络如何预测其输出。例如，在分类器中，你可以洞察神经网络如何利用输入进行预测。这一切始于
    [原始论文](https://arxiv.org/pdf/1610.02391.pdf)，其中描述了这一技术。在本文中，我们将使用 Pytorch 库实现这一技术，方法是你可以将其应用于任何卷积神经网络，而无需改变你已有的神经网络模块。
- en: I read a paper here on Medium called “[**Implementing Grad-CAM in PyTorch**](https://medium.com/@stepanulyanin/implementing-grad-cam-in-pytorch-ea0937c31e82),”
    by [Stepan Ulyanin](https://medium.com/u/5fb91fc37062?source=post_page-----7eba5e38d569--------------------------------),
    which inspired me to implement the same algorithm in a slightly different way.
    Stepan proposed an approach that requires you to rewrite the forward function
    of your model to compute Grad-CAM. Thanks to Pytorch, we can achieve the same
    result without changing the forward function by registering forward and backward
    hooks. I hope this article contributes a little to the amazing work that Stepan
    wrote.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 Medium 上阅读了一篇文章，标题是 “[**在 PyTorch 中实现 Grad-CAM**](https://medium.com/@stepanulyanin/implementing-grad-cam-in-pytorch-ea0937c31e82)”，作者是
    [Stepan Ulyanin](https://medium.com/u/5fb91fc37062?source=post_page-----7eba5e38d569--------------------------------)，这激发了我以稍微不同的方式实现相同的算法。Stepan
    提出了一个方法，需要你重写模型的前向函数来计算 Grad-CAM。感谢 Pytorch，我们可以通过注册前向和反向钩子来实现相同的结果，而无需改变前向函数。我希望这篇文章对
    Stepan 的精彩工作有所贡献。
- en: Let’s dive into it!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨吧！
- en: 1\. Load and inspect the pre-trained model
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 加载并检查预训练模型
- en: To demonstrate the implementation of Grad-CAM, I’ll use a [chest X-ray dataset
    from Kaggle](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia)
    and a pre-trained classifier I made, capable of classifying an X-ray as having
    pneumonia or not.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 Grad-CAM 的实现，我将使用 [Kaggle 上的胸部 X 光数据集](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia)
    和我制作的一个预训练分类器，该分类器能够将 X 光图像分类为是否有肺炎。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, let’s inspect the model’s architecture. Since we are interested in understanding
    which aspects of our input image contributed to the prediction, we need to identify
    the last convolutional layer, specifically its activation function. This layer
    contains the representation of the most complex features the model learned to
    classify its inputs. Thus, it is the most capable of helping us understand the
    model’s behavior.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们检查模型的架构。由于我们希望了解输入图像的哪些方面对预测有所贡献，我们需要确定最后一个卷积层，特别是它的激活函数。这个层包含了模型学习到的最复杂特征的表示。因此，它最能帮助我们理解模型的行为。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This model was designed to receive 256x256 images with 3 channels. Therefore,
    its input is expected to have a shape of [batch size, 3, 256, 256]. Every ResNet
    block ends with a ReLU activation function. For our objective here, we need to
    select the last ResNet block.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型设计为接收 256x256 的 3 通道图像。因此，它的输入预期具有 [batch size, 3, 256, 256] 的形状。每个 ResNet
    块以 ReLU 激活函数结束。为了我们的目标，我们需要选择最后一个 ResNet 块。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Pytorch, we can make this selection quite easily using the model’s attributes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pytorch 中，我们可以使用模型的属性轻松完成这个选择。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 2\. Pytorch methods for registering hooks
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. Pytorch 方法用于注册钩子
- en: Pytorch has many functions to handle hooks, which are functions that allow you
    to process information that flows through the model during the forward or backward
    pass. You can use it to inspect intermediate gradient values, make changes to
    specific layers’ outputs, and more.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch 有许多函数用于处理钩子，这些函数允许你处理在前向或反向传递过程中流经模型的信息。你可以用它来检查中间梯度值，对特定层的输出进行更改等。
- en: Here, we’ll focus on two methods of the *nn.Module* class. Let’s have a closer
    look at them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将重点关注 *nn.Module* 类的两种方法。让我们仔细看看它们。
- en: '[**2.1\. register_full_backward_hook(*hook*, *prepend=False*)**](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.register_full_backward_hook)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[**2.1\. register_full_backward_hook(*hook*, *prepend=False*)**](https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.register_full_backward_hook)'
- en: This method registers a backward hook on the module, which means that the hook
    function will run when the *backward()* method is called.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法在模块上注册了一个反向钩子，这意味着当调用*backward()*方法时，钩子函数将运行。
- en: The backward hook function receives as inputs the module itself, the gradients
    with respect to the layer’s input, and the gradients with respect to the layer’s
    output.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 反向钩子函数接受模块自身、相对于层输入的梯度和相对于层输出的梯度作为输入。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It returns a *torch.utils.hooks.RemovableHandle,* which allows you to remove
    the hook later. Therefore, it is useful to assign it to a variable. We’ll get
    back to this later.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回一个*torch.utils.hooks.RemovableHandle*，这使得你可以稍后移除钩子。因此，将其分配给变量是有用的。我们稍后会回到这个问题。
- en: '[**2.2\. register_forward_hook(*hook*, ***, *prepend=False*, *with_kwargs=False*)**](https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=register_forward_hook#torch.nn.Module.register_forward_hook)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[**2.2\. register_forward_hook(*hook*, ***, *prepend=False*, *with_kwargs=False*)**](https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=register_forward_hook#torch.nn.Module.register_forward_hook)'
- en: This is quite similar to the previous one, except that the hook function runs
    in the forward pass, i.e., when the layer of interest processes its input and
    returns its outputs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前的钩子函数类似，只是钩子函数在前向传递中运行，即在感兴趣的层处理其输入并返回输出时运行。
- en: 'The hook function has a slightly different signature. It gives you access to
    the layer’s outputs:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 钩子函数的签名稍有不同。它使你能够访问层的输出：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It also returns a *torch.utils.hooks.RemovableHandle.*
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它还返回一个*torch.utils.hooks.RemovableHandle*。
- en: 3\. Adding backward and forward hooks to your model
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 将反向和前向钩子添加到模型中
- en: First, we need to define our backward and forward hook functions. To compute
    Grad-CAM, we need the gradients with respect to the last convolutional layer’s
    outputs, as well as its activations, i.e., the outputs of the layer’s activation
    function. Therefore, our hook functions will only extract those values for us
    during inference and the backward pass.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义我们的反向和前向钩子函数。要计算Grad-CAM，我们需要相对于最后一个卷积层输出的梯度，以及其激活，即该层激活函数的输出。因此，我们的钩子函数将在推理和反向传递过程中仅提取这些值。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After defining our hook functions and the variables that will store the activations
    and the gradients, we need to register the hooks on the layer of interest:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了我们的钩子函数和将存储激活和梯度的变量之后，我们需要在感兴趣的层上注册钩子：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 4\. Retrieving the gradients and activations we need
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 获取我们需要的梯度和激活
- en: Now that we have set up the hooks for our model, let’s load an image for which
    we will compute Grad-CAM.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为模型设置了钩子，让我们加载一张图像，计算Grad-CAM。
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/2798cafb46a9b31ec0019e9919908330.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2798cafb46a9b31ec0019e9919908330.png)'
- en: This is the image we’re going to use. Sample image from the [kaggle chest X-ray
    dataset](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将要使用的图像。图像来源于[kaggle胸部X光数据集](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia)。
- en: We need to preprocess it to prepare it for being fed into the model for inference.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对其进行预处理，以准备好输入模型进行推理。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we need to perform the forward pass using this image tensor as input. And
    we must execute the backward pass for our backward hook to function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用这个图像张量进行前向传递。并且我们必须执行反向传递，以使反向钩子发挥作用。
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our hook functions returned the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的钩子函数返回了以下内容：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, we can use the *gradients* and the *activations* variables to compute
    our heatmap!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们可以使用*梯度*和*激活*变量来计算我们的热图！
- en: 5\. Computing Grad-CAM
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 计算Grad-CAM
- en: To compute Grad-CAM we’ll use the original paper equations and [Stepan Ulyanin](https://medium.com/u/5fb91fc37062?source=post_page-----7eba5e38d569--------------------------------)’s
    implementation of them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算Grad-CAM，我们将使用原始论文的公式和[Stepan Ulyanin](https://medium.com/u/5fb91fc37062?source=post_page-----7eba5e38d569--------------------------------)的实现。
- en: '![](../Images/61da9f300c996d8a4996f12f22305578.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61da9f300c996d8a4996f12f22305578.png)'
- en: Image extracted from the [original article](https://arxiv.org/pdf/1610.02391.pdf)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图像摘自[原始文章](https://arxiv.org/pdf/1610.02391.pdf)
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/8acbcd883249f79bed6f314862bb804f.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8acbcd883249f79bed6f314862bb804f.png)'
- en: Image extracted from the [original article](https://arxiv.org/pdf/1610.02391.pdf)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图像摘自[原始文章](https://arxiv.org/pdf/1610.02391.pdf)
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/b6e8487f800472175117ec71c45d5b9b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b6e8487f800472175117ec71c45d5b9b.png)'
- en: Here is our heatmap. Image by author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的热图。图像由作者提供。
- en: It’s worth noting that the activations we obtained through the forward hook
    contain 1,024 feature maps each capturing different aspects of the input image,
    each with a spatial resolution of 8x8.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们通过前向钩子获得的激活包含1,024个特征图，每个特征图捕捉输入图像的不同方面，每个特征图的空间分辨率为8x8。
- en: On the other hand, the gradients we obtained through the backward hook represent
    the importance of each feature map for the final prediction. By computing the
    element-wise product of the gradients and activations, we obtain a weighted sum
    of the feature maps, which highlights the most relevant parts of the image.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们通过反向钩子获得的梯度代表了每个特征图对最终预测的重要性。通过计算梯度和激活的逐元素乘积，我们得到特征图的加权和，突出显示图像中最相关的部分。
- en: Finally, by computing the global average of the weighted feature maps, we obtain
    a single heatmap that indicates the regions of the image that are most important
    for the model’s prediction. This technique, known as Grad-CAM, provides a visual
    explanation of the model’s decision-making process and can help us interpret and
    debug the model’s behavior.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过计算加权特征图的全局平均值，我们得到一个单一的热图，指示出对模型预测最重要的图像区域。这种技术被称为Grad-CAM，提供了对模型决策过程的视觉解释，有助于我们解读和调试模型的行为。
- en: 6\. Combining the original image and the heatmap
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 结合原始图像和热图
- en: The following code superimposes one image over another.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将一张图像叠加在另一张图像上。
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/30a1d5807bfd211f93d31f3b18fab292.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30a1d5807bfd211f93d31f3b18fab292.png)'
- en: Here’s the result. Since it is a normal X-ray, the model looked most at normal
    structures that are expected in a normal X-ray. Image by author.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果。由于这是正常的X光片，模型主要关注于正常X光片中预期的正常结构。图片由作者提供。
- en: '![](../Images/e04552838aa71c2a5c149ca9153ec221.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e04552838aa71c2a5c149ca9153ec221.png)'
- en: In another example, we have an X-ray with pneumonia. And Grad-CAM correctly
    shows areas of the chest X-ray that a doctor must examine to confirm the presence
    of pneumonia. Image by author. X-ray image from the [kaggle chest X-ray dataset](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个例子中，我们有一张肺炎的X光片。Grad-CAM正确地显示了医生必须检查的胸部X光片区域，以确认肺炎的存在。图片由作者提供。X光图像来自[kaggle胸部X光数据集](https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia)。
- en: Finally, to remove the hooks from your model, you just need to call the *remove*
    method in each of the handles.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要从你的模型中移除钩子，你只需在每个句柄中调用*remove*方法。
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Conclusion
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: I hope this article helped clarify how Grad-CAM works, how to implement it using
    Pytorch, and how one can do it by using forward and backward hooks without changing
    the original model’s forward function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章有助于澄清Grad-CAM的工作原理、如何使用Pytorch实现它，以及如何通过使用前向和反向钩子而不改变原始模型的前向函数来实现它。
- en: I’d like to thank [Stepan Ulyanin](https://medium.com/u/5fb91fc37062?source=post_page-----7eba5e38d569--------------------------------)
    for his article and for helping me better understand Grad-CAM. I hope I could
    contribute something to readers as well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我要感谢[Stepan Ulyanin](https://medium.com/u/5fb91fc37062?source=post_page-----7eba5e38d569--------------------------------)的文章，并感谢他帮助我更好地理解Grad-CAM。我希望我也能为读者贡献一些东西。
- en: I’d also like to leave the Python library torch-cam as a reference. It has other
    implementations of Grad-CAM, so you don’t need to do this from scratch.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想推荐Python库torch-cam作为参考。它有Grad-CAM的其他实现，因此你不需要从头开始做这个。
- en: '[](https://github.com/frgfm/torch-cam?source=post_page-----7eba5e38d569--------------------------------)
    [## GitHub - frgfm/torch-cam: Class activation maps for your PyTorch models (CAM,
    Grad-CAM, Grad-CAM++…'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/frgfm/torch-cam?source=post_page-----7eba5e38d569--------------------------------)
    [## GitHub - frgfm/torch-cam: 用于PyTorch模型的类别激活图（CAM、Grad-CAM、Grad-CAM++…'
- en: 'Simple way to leverage the class-specific activation of convolutional layers
    in PyTorch. Source: image from woopets…'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在PyTorch中利用卷积层的类别特定激活的简单方法。来源：woopets的图片…
- en: github.com](https://github.com/frgfm/torch-cam?source=post_page-----7eba5e38d569--------------------------------)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/frgfm/torch-cam?source=post_page-----7eba5e38d569--------------------------------)
