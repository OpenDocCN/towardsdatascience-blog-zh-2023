- en: Build Elegant Web Apps Right From Jupyter Notebook with Mercury
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/build-elegant-web-apps-right-from-jupyter-notebook-with-mercury-78d9ebcbbcaf?source=collection_archive---------4-----------------------#2023-04-17](https://towardsdatascience.com/build-elegant-web-apps-right-from-jupyter-notebook-with-mercury-78d9ebcbbcaf?source=collection_archive---------4-----------------------#2023-04-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notebooks to beautiful web apps in no time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@avi_chawla?source=post_page-----78d9ebcbbcaf--------------------------------)[![Avi
    Chawla](../Images/c9c3e4fc7549c3e388f8b4a5560c7cc6.png)](https://medium.com/@avi_chawla?source=post_page-----78d9ebcbbcaf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----78d9ebcbbcaf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----78d9ebcbbcaf--------------------------------)
    [Avi Chawla](https://medium.com/@avi_chawla?source=post_page-----78d9ebcbbcaf--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F5d33decdf4c4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-elegant-web-apps-right-from-jupyter-notebook-with-mercury-78d9ebcbbcaf&user=Avi+Chawla&userId=5d33decdf4c4&source=post_page-5d33decdf4c4----78d9ebcbbcaf---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----78d9ebcbbcaf--------------------------------)
    Â·7 min readÂ·Apr 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F78d9ebcbbcaf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-elegant-web-apps-right-from-jupyter-notebook-with-mercury-78d9ebcbbcaf&user=Avi+Chawla&userId=5d33decdf4c4&source=-----78d9ebcbbcaf---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F78d9ebcbbcaf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fbuild-elegant-web-apps-right-from-jupyter-notebook-with-mercury-78d9ebcbbcaf&source=-----78d9ebcbbcaf---------------------bookmark_footer-----------)![](../Images/10f31c89f2d63cf8db67f6539a57cf4d.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Effective communication is pivotal in all data-driven projects. Data professionals
    often need to communicate their findings and insights to stakeholders, including
    business leaders, technical teams, and other data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: While traditional methods of communicating data insights, such as PowerPoint
    presentations and static reports are widely preferred, they are often time-consuming
    to create.
  prefs: []
  type: TYPE_NORMAL
- en: Whatâ€™s more, these services require one to leave the comfort of a Jupyter Notebook
    â€” where data scientists spend most of their time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7fe1049b3a6ac3489243b9ec6c1c784b.png)'
  prefs: []
  type: TYPE_IMG
- en: Separate presentation tools and Jupyter (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Wouldnâ€™t it be nice if we could share our findings with others by creating interactive
    and elegant web apps right from a Jupyter Notebook?
  prefs: []
  type: TYPE_NORMAL
- en: To this end, [Mercury](https://github.com/mljar/mercury) is an open-source tool
    that streamlines the creation of web apps right from the comfort of a Jupyter
    Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, in this article, I will demonstrate how you can use Mercury to create
    stunning web apps and share them with others.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this blog here: [GitHub](https://github.com/ChawlaAvi/Mercury-Web-App).'
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s begin ðŸš€!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Mercury
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web apps created by Mercury are primarily driven by two things:'
  prefs: []
  type: TYPE_NORMAL
- en: '#1) Jupyter Notebook:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is where you develop the web app. We enable interactivity using Mercuryâ€™s
    [input](https://runmercury.com/docs/input-widgets/) and [output](https://runmercury.com/docs/output-widgets/)
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Input widgets allow the user to provide inputs and interact with the app. Some
    of the input widgets supported by Mercury are shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca5e4d01f6024d39ba2821fd81727e95.png)'
  prefs: []
  type: TYPE_IMG
- en: Mercuryâ€™s widgets (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Output widgets are used to present the output. This includes Markdowns (with
    variables), JSONs, etc. Whatâ€™s more, the output of a Jupyter cell is also rendered
    by Mercury.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, if your app creates a plot or prints a DataFrame, etc., they will appear
    in the output panel of the web app.
  prefs: []
  type: TYPE_NORMAL
- en: '#2) Mercury Server'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server renders the Jupyter Notebook as a web application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/54c26d90304b2d5c170905ce81507fe2.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying apps with Mercury (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: As we will see, rendering the notebook is as simple as running a single command.
    All you have to do is create your web app in a notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a web app with Mercury requires a few simple steps.
  prefs: []
  type: TYPE_NORMAL
- en: Install Mercury
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, install the library with pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And done!
  prefs: []
  type: TYPE_NORMAL
- en: Now we can create our web app with input and output widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a web app with Mercury
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned above, a web app created using Mercury is primarily powered by
    its widgets.
  prefs: []
  type: TYPE_NORMAL
- en: '#1) Import libraries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use them, we first import the library. And to reiterate, we will be doing
    everything from a Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you may import any other library as needed. For this blog, I
    will create a web app to analyze a self-created dummy employee dataframe. Thus,
    I will use the following libraries as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '#2) Configure the app'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we instantiate a Mercury app by providing it a `title` and `description`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '#3) Populate the app with widgets'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, letâ€™s add some widgets to allow its user to interact with the following
    dummy data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ee2ba5a1110ce00671b192512668ba2.png)'
  prefs: []
  type: TYPE_IMG
- en: Dummy dataset (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a widget to upload a CSV file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let the user filter the data based on the entries in the `Company_Name` column.
    This will be `MultiSelect` widget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, the user can also filter the data based on `Credits` using a `Slider`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the data has been filtered, we will display the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The dimensions of the filtered DataFrame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scatter plot of `Employee_Salary` and `Employee_Rating`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bar plot showing the distribution of `Employee_Status` column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letâ€™s build it now!
  prefs: []
  type: TYPE_NORMAL
- en: First, we add the file upload widget.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the file is accessible using the `filepath` attribute of the `data_file`
    object. Thus, once the file has been uploaded, we will read it with Pandas as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will add two more widgets â€” a `MultiSelect` widget on `Company_Name`
    and a `Slider` on the `Credits` column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `value` argument refers to the initial value, `choices` is displayed
    as a list of values to choose from and the `label` is a custom text that appears
    besides the widget.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have the Slider widget.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `value` argument defines the initial value, `min` and `max` refer
    to the range of values, `label`, like before, is a custom text. Finally, `step`
    defines the step value of the slider widget.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we are done with the widget addition for interactivity. The final
    step is to create the plots based on the values in the widgets.
  prefs: []
  type: TYPE_NORMAL
- en: '#4) Populate the output panel'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we filter the dataframe based on the values received from the widgets.
    You can access this using the `WidgetObj.value` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, to retrieve the value of `company` widget, we can refer to the
    `company.value` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Next, using the Markdown output widget, we print the dimension of the filtered
    DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: One cool thing about Mercuryâ€™s markdown is that you can also use f-strings,
    as shown above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we create the plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Thatâ€™s it. Now our Mercury application is ready.
  prefs: []
  type: TYPE_NORMAL
- en: '#5) Run the web app'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the application, navigate to the folder of your app in the command line
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Consequently, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/869037d73b9dca979d93e787f8ac38d6.png)'
  prefs: []
  type: TYPE_IMG
- en: First look at web app (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: As expected, we have a widget to upload a file. Letâ€™s upload the dummy dataset
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ac16dcec32e61143f50aa7090923bd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Uploading dataset (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Once we upload a CSV, we instantly see the graphs pop up.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can play around with the input widgets to analyze the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b64a479f9a343d39f75096161870f458.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing Dataset (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: As we update the filter, the plots and the number of rows update. This is achieved
    by the Mercury server, which maintains a continuous interaction between the notebook
    and the app.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, if we update the notebook, the changes are reflected instantly.
  prefs: []
  type: TYPE_NORMAL
- en: Mercury vs. Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pertinent question at this point is how Mercury stands in comparison to Streamlit,
    which I have used in many previous blogs, like [here](/building-an-all-in-one-audio-analysis-toolkit-in-python-e849a0e2129e)
    and [here](/i-used-my-voice-to-interact-with-openai-gpt-3-884b69dd3b0f).
  prefs: []
  type: TYPE_NORMAL
- en: 'Streamlit has indeed emerged as one of the most common choices for creating
    web apps. While the overall experience is incredible, there are, of course, many
    limitations with Streamlit:'
  prefs: []
  type: TYPE_NORMAL
- en: '#1) No Jupyter Support'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit-driven applications are primarily powered by Python scripts, not interactive
    Python kernels. Thus, while developing an application with Streamlit, one has
    to repeatedly run a script to see the progress.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a04b878d3f46a2f7658d49ec34f4248b.png)'
  prefs: []
  type: TYPE_IMG
- en: Mercury vs. Streamlit â€” Jupyter support (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: However, apps created with Mercury are driven by a Jupyter Notebook, and every
    update is instantly reflected in the web app.
  prefs: []
  type: TYPE_NORMAL
- en: '#2) Export as PDF/HTML'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web apps created with Mercury can be easily exported with the click of a button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed39ff48eac564c7404d5f3919149e5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Mercury vs. Streamlit â€” export app (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to easily share your applications with others over email, chat,
    etc., and the recipient does not necessarily need Mercury installed.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is no such support with Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: '#3) Create Presentations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lastly, a web app created with Mercury can run as an [interactive presentation](https://runmercury.com/tutorials/presentation-python-jupyter-notebook/)
    with little effort.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c28cdb700b60b9c92ed4031d01f16a81.png)'
  prefs: []
  type: TYPE_IMG
- en: Mercury vs. Streamlit â€” presentation (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: However, Streamlit apps donâ€™t offer any such support.
  prefs: []
  type: TYPE_NORMAL
- en: '#4) Secure apps with authentication'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At times, ensuring that only authorized users can access your apps might be
    extremely important. This may be due to the presence of sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f4d239b72ced9e1420fa20e6ee859fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Mercury vs. Streamlit â€” Security (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: With Mercury, you can instantly [enable authentication to secure your web apps](https://runmercury.com/docs/authentication/).
    Streamlit, natively, does not support authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, when someone runs your web app, they will be prompted to authenticate
    their details, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69557cb19e337293b4e71b55cb533c1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Mercury authentication window (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, we come to the end of this blog.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we learned how to build a simple web app with Mercury right from
    the comfort of a Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we looked at how Mercury stands compared to Streamlit and how it can
    serve various data communication use cases.
  prefs: []
  type: TYPE_NORMAL
- en: As a departing note, you can also host your notebook on the cloud with [Mercury
    Cloud](https://cloud.runmercury.com/). Just upload the notebook, and you are done.
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you donâ€™t wish to host your web app on Mercury Cloud specifically,
    then you can also deploy it on any server with a Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
