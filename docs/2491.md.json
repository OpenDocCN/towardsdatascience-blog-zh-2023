["```py\npython extract_frames_from_video.py ^\n  -- video_path = 'ENTER YOUR VIDEO PATH HERE' ^\n  -- output_dir = '../../../datafiles/custom/JPEGImages/640p/custom/' ^\n  -- resize_factor = 0.5\n```", "```py\n file_names = next(os.walk(IMAGE_DIR))[2]\n    for index in tqdm(range(0, len(file_names))):\n        image = skimage.io.imread(os.path.join(IMAGE_DIR, file_names[index]))\n        # Run detection\n        results = model.detect([image], verbose=0)\n        r = results[0]\n        # In the next for loop, I check if extracted frame is larger than 16000 pixels, \n        # and if it is located minimum at 250th pixel in horizontal axis.\n        # If not, I checked the next mask with \"person\" mask.\n        current_mask_selection = 0\n        while(True):\n            if current_mask_selection<10:\n                if (np.where(r[\"masks\"][:,:,current_mask_selection]*1 == 1)[1].min()<250 or \n                    np.sum(r[\"masks\"][:,:,current_mask_selection]*1)<16000):\n                    current_mask_selection = current_mask_selection+1\n                    continue\n                elif (np.sum(r[\"masks\"][:,:,current_mask_selection]*1)>16000 and \n                      np.where(r[\"masks\"][:,:,current_mask_selection]*1 == 1)[1].min()>250):\n                    break\n            else:\n                break\n        mask = 255*(r[\"masks\"][:,:,current_mask_selection]*1)\n        mask_img = Image.fromarray(mask)\n        mask_img = mask_img.convert('RGB')\n        mask_img.save(os.path.join(SAVE_DIR, f\"frame{index:03}.png\"))\n```", "```py\npython scripts/preprocess/custom/process_colmap_output.py\n```", "```py\npython scripts/preprocess/custom/generate_frame_midas.py  &\npython scripts/preprocess/custom/generate_flows.py  &\npython scripts/preprocess/custom/generate_sequence_midas.py \n```", "```py\npython train.py --net scene_flow_motion_field ^\n --dataset custom_sequence --track_id custom ^\n --log_time  --epoch_batches 2000 --epoch 10 ^\n --lr 1e-6 --html_logger --vali_batches 150  ^\n --batch_size 1 --optim adam --vis_batches_vali 1 ^\n --vis_every_vali 1 --vis_every_train 1 ^\n --vis_batches_train 1 --vis_at_start --gpu 0 ^\n --save_net 1 --workers 1 --one_way ^\n --loss_type l1 --l1_mul 0 --acc_mul 1 ^\n --disp_mul 1 --warm_sf 5 --scene_lr_mul 1000 ^\n --repeat 1 --flow_mul 1 --sf_mag_div 100 ^\n --time_dependent --gaps 1,2,4,6,8 --midas ^\n --use_disp --logdir 'logdir/' ^\n --suffix 'track_{track_id}' ^\n --force_overwrite\n```", "```py\npython test.py --net scene_flow_motion_field ^\n --dataset custom_sequence --workers 1 ^\n --output_dir .\\test_results\\custom_sequence ^\n --epoch 10 --html_logger --batch_size 1 ^\n --gpu 0 --track_id custom --suffix custom ^\n --checkpoint_path .\\logdir\n```"]