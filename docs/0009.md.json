["```py\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom nltk.corpus import stopwords\n```", "```py\nE(w) = \n[0, if \"the\"\n1, if \"dog\"\n2, if \"is\"\n3, if \"brown\"\n4, if \"black\"]\n```", "```py\nwhere: c is degrees of freedom (i.e. sample size minus one)\nO is the observed value(s)\nE is the expected value(s)\n```", "```py\ndf = pd.read_csv('[KEYWORD_LIST].csv')\ndata = pd.DataFrame(df)\n\nwords = stopwords.words('english_adjusted')\n```", "```py\npipeline = Pipeline([('vect', TfidfVectorizer(ngram_range=(1, 3), stop_words=words)),\n                    ('chi', SelectKBest(chi2, k='all')),\n                    ('clf', LogisticRegression(C=1.0, penalty='l2', max_iter=1000, dual=False))])\n```", "```py\nmodel = pipeline.fit(data.Keyword, data.Type)\nchi = model.named_steps['chi']\nclf = model.named_steps['clf']\n\ndoutput = pd.read_csv('[TEST_KEYWORD_LIST].csv')\n\ndoutput['Type'] = model.predict(doutput['Keyword'])\n\ndoutput.to_csv('[RESULT_LIST].csv')\n##print('Accuracy score ' + str(model.score(x_test, y_test)))\n```", "```py\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\n\ndf = pd.read_csv('[KEYWORD_LIST].csv')\ndata = pd.DataFrame(df)\n\nwords = stopwords.words('english_adjusted')\n\npipeline = Pipeline([('vect', TfidfVectorizer(ngram_range=(1, 3), stop_words=words)),\n                    ('chi', SelectKBest(chi2, k='all')),\n                    ('clf', LogisticRegression(C=1.0, penalty='l2', max_iter=1000))])\n\nmodel = pipeline.fit(data.Keyword, data.Type)\nchi = model.named_steps['chi']\nclf = model.named_steps['clf']\n\ndoutput = pd.read_csv('[TEST_KEYWORD_LIST].csv')\n\ndoutput['Type'] = model.predict(doutput['Keyword'])\n\ndoutput.to_csv('[RESULT_LIST].csv')\n##print('accuracy score ' + str(model.score(x_test, y_test)))\n```", "```py\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom nltk.corpus import stopwords\n```", "```py\nx_train, x_test, y_train, y_test = train_test_split(data.Keyword, data.Type, test_size=0.3)\n\npipeline = Pipeline([('vect', TfidfVectorizer(ngram_range=(1, 3), stop_words=words)),\n                    ('chi', SelectKBest(chi2, k='all')),\n                    ('clf', LogisticRegression(C=1.0, penalty='l2', max_iter=1000, dual=False))])\n```", "```py\nmodel = pipeline.fit(x_train, y_train)\nchi = model.named_steps['chi']\nclf = model.named_steps['clf']\n\ndoutput = pd.DataFrame({'Keyword': x_test, 'Type': model.predict(x_test)})\n\ndoutput.to_csv('[RESULT_LIST].csv')\n##print('Accuracy score ' + str(model.score(x_test, y_test)))\n```"]