- en: Use Python to Download Multiple Files (or URLs) in Parallel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/use-python-to-download-multiple-files-or-urls-in-parallel-1759da9d6535?source=collection_archive---------1-----------------------#2023-09-08](https://towardsdatascience.com/use-python-to-download-multiple-files-or-urls-in-parallel-1759da9d6535?source=collection_archive---------1-----------------------#2023-09-08)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Get more data in less time
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khafen.medium.com/?source=post_page-----1759da9d6535--------------------------------)[![Konrad
    Hafen](../Images/146548d8de62ca1d5d15c3c7c3300940.png)](https://khafen.medium.com/?source=post_page-----1759da9d6535--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1759da9d6535--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1759da9d6535--------------------------------)
    [Konrad Hafen](https://khafen.medium.com/?source=post_page-----1759da9d6535--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F56d662f7324a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-python-to-download-multiple-files-or-urls-in-parallel-1759da9d6535&user=Konrad+Hafen&userId=56d662f7324a&source=post_page-56d662f7324a----1759da9d6535---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1759da9d6535--------------------------------)
    ·5 min read·Sep 8, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1759da9d6535&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-python-to-download-multiple-files-or-urls-in-parallel-1759da9d6535&user=Konrad+Hafen&userId=56d662f7324a&source=-----1759da9d6535---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1759da9d6535&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fuse-python-to-download-multiple-files-or-urls-in-parallel-1759da9d6535&source=-----1759da9d6535---------------------bookmark_footer-----------)![](../Images/0c55252812a33ed88ec684dce29b169d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Wesley Tingey](https://unsplash.com/@wesleyphotography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: We live in a world of big data. Often, big data is organized as a large collection
    of small datasets (i.e., one large dataset comprised of multiple files). Obtaining
    these data is often frustrating because of the download (or acquisition burden).
    Fortunately, with a little code, there are ways to automate and speed-up file
    download and acquisition.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Automating file downloads can save a lot of time. There are several ways to
    automate file downloads with Python. The easiest way to download files is using
    a simple Python loop to iterate through a list of URLs to download. This serial
    approach can work well with a few small files, but if you are downloading many
    files or large files, you’ll want to use a parallel approach to maximize your
    computational resources.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化文件下载可以节省大量时间。有几种方法可以使用 Python 自动化文件下载。下载文件的最简单方法是使用一个简单的 Python 循环来遍历 URL
    列表。这种串行方法适用于少量小文件，但如果你要下载很多文件或大文件，你会希望使用并行方法来最大化计算资源。
- en: With a parallel file download routine, you can better use your computer’s resources
    to download multiple files simultaneously, saving you time. This tutorial demonstrates
    how to develop a generic file download function in Python and apply it to download
    multiple files with serial and parallel approaches. The code in this tutorial
    uses only modules available from the Python standard library, so no installations
    are required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用并行文件下载例程，你可以更好地利用计算机资源来同时下载多个文件，从而节省时间。本教程演示了如何在 Python 中开发通用文件下载函数，并应用于串行和并行方式下载多个文件。本教程中的代码仅使用
    Python 标准库中提供的模块，因此无需安装其他模块。
- en: Import modules
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入模块
- en: For this example, we only need the `requests` and `multiprocessing` Python modules
    to download files in parallel. The `requests` and `multiprocessing` modules are
    both available from the Python standard library, so you won't need to perform
    any installations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们只需要 `requests` 和 `multiprocessing` Python 模块来并行下载文件。`requests` 和 `multiprocessing`
    模块都可以从 Python 标准库中获取，因此你不需要进行任何安装。
- en: We’ll also import the `time` module to keep track of how long it takes to download
    individual files and compare performance between the serial and parallel download
    routines. The `time` module is also part of the Python standard library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将导入 `time` 模块来跟踪下载单个文件所需的时间，并比较串行和并行下载例程之间的性能。`time` 模块也是 Python 标准库的一部分。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Define URLs and filenames
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 URL 和文件名
- en: I’ll demonstrate parallel file downloads in Python using [gridMET](https://www.climatologylab.org/gridmet.html)
    NetCDF files that contain daily precipitation data for the United States.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 [gridMET](https://www.climatologylab.org/gridmet.html) NetCDF 文件来演示如何在
    Python 中并行下载文件，这些文件包含了美国的每日降水数据。
- en: Here, I specify the URLs to four files in a list. In other applications, you
    may programmatically generate a list of files to download.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我在列表中指定了四个文件的 URL。在其他应用中，你可以通过编程方式生成一个要下载的文件列表。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each URL must be associated with its download location. Here, I’m downloading
    the files to the Windows ‘Downloads’ directory. I’ve hardcoded the filenames in
    a list for simplicity and transparency. Given your application, you may want to
    write code that will parse the input URL and download it to a specific directory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 URL 必须与其下载位置相关联。在这里，我将文件下载到 Windows 的‘Downloads’目录。我在列表中硬编码了文件名，以便简化和透明。根据你的应用程序，你可能想编写代码来解析输入的
    URL 并将其下载到特定目录。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Multiprocessing requires parallel functions to have only one argument (there
    are some workarounds, but we won’t get into that here). To download a file we’ll
    need to pass two arguments, a URL and a filename. So we’ll zip the `urls` and
    `fns` lists together to get a list of tuples. Each tuple in the list will contain
    two elements; a URL and the download filename for the URL. This way we can pass
    a single argument (the tuple) that contains two pieces of information.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 多进程要求并行函数只接受一个参数（有一些解决方法，但我们在这里不讨论）。为了下载一个文件，我们需要传递两个参数，一个是 URL，另一个是文件名。因此，我们将
    `urls` 和 `fns` 列表打包成一个元组列表。列表中的每个元组将包含两个元素；一个 URL 和该 URL 的下载文件名。这样我们就可以传递一个包含两个信息的单一参数（元组）。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Function to download a URL
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 URL 的函数
- en: Now that we have specified the URLs to download and their associated filenames,
    we need a function to download the URLs ( `download_url`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经指定了下载的 URL 以及它们关联的文件名，我们需要一个函数来下载这些 URL（`download_url`）。
- en: We’ll pass one argument ( `arg`) to `download_url`. This argument will be an
    iterable (list or tuple) where the first element is the URL to download ( `url`)
    and the second element is the filename ( `fn`). The elements are assigned to variables
    ( `url` and `fn`) for readability.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向 `download_url` 传递一个参数（`arg`）。这个参数将是一个可迭代对象（列表或元组），其中第一个元素是要下载的 URL（`url`），第二个元素是文件名（`fn`）。这些元素被分配给变量（`url`
    和 `fn`）以提高可读性。
- en: Now create a try statement in which the URL is retrieved and written to the
    file after it is created. When the file is written the URL and download time are
    returned. If an exception occurs a message is printed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个 try 语句，其中在文件创建后检索 URL 并将其写入文件。当文件写入时，将返回 URL 和下载时间。如果发生异常，则会打印一条消息。
- en: The `download_url` function is the meat of our code. It does the actual work
    of downloading and file creation. We can now use this function to download files
    in serial (using a loop) and in parallel. Let's go through those examples.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`download_url` 函数是我们代码的核心。它完成实际的下载和文件创建工作。我们现在可以使用这个函数来串行（使用循环）和并行下载文件。让我们看一下这些示例。'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Download multiple files with a Python loop
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 循环下载多个文件
- en: To download the list of URLs to the associated files, loop through the iterable
    ( `inputs`) that we created, passing each element to `download_url`. After each
    download is complete we will print the downloaded URL and the time it took to
    download.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 URL 列表下载到相关文件，请遍历我们创建的可迭代对象（`inputs`），将每个元素传递给 `download_url`。每次下载完成后，我们将打印下载的
    URL 及下载所需的时间。
- en: The total time to download all URLs will print after all downloads have been
    completed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下载所有 URL 的总时间将在所有下载完成后打印。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It took between 11 and 16 seconds to download the individual files. The total
    download time was a little less than one minute. Your download times will vary
    based on your specific network connection.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下载单个文件的时间在 11 到 16 秒之间。总下载时间稍少于一分钟。你的下载时间将根据你特定的网络连接有所不同。
- en: Let’s compare this serial (loop) approach to the parallel approach below.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这种串行（循环）方法与下面的并行方法进行比较。
- en: Download multiple files in parallel with Python
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 并行下载多个文件
- en: To start, create a function ( `download_parallel`) to handle the parallel download.
    The function ( `download_parallel`) will take one argument, an iterable containing
    URLs and associated filenames (the `inputs` variable we created earlier).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个函数（`download_parallel`）来处理并行下载。该函数（`download_parallel`）将接受一个参数，一个包含 URL
    和相关文件名的可迭代对象（我们之前创建的 `inputs` 变量）。
- en: Next, get the number of CPUs available for processing. This will determine the
    number of threads to run in parallel.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，获取可用于处理的 CPU 数量。这将决定并行运行的线程数量。
- en: Now use the `multiprocessing` `ThreadPool` to map the `inputs` to the `download_url`
    function. Here we use the `imap_unordered` method of `ThreadPool` and pass it
    the `download_url` function and input arguments to `download_url` (the `inputs`
    variable). The `imap_unordered` method will run `download_url` simultaneously
    for the number of specified threads (i.e. parallel download).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 `multiprocessing` `ThreadPool` 将 `inputs` 映射到 `download_url` 函数。在这里我们使用
    `ThreadPool` 的 `imap_unordered` 方法，并将 `download_url` 函数及其输入参数（`inputs` 变量）传递给它。`imap_unordered`
    方法将同时运行指定线程数量的 `download_url`（即并行下载）。
- en: Thus, if we have four files and four threads all files can be downloaded at
    the same time instead of waiting for one download to finish before the next starts.
    This can save a considerable amount of processing time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们有四个文件和四个线程，则所有文件可以同时下载，而不是等待一个下载完成后再开始下一个。这可以节省大量处理时间。
- en: In the final part of the `download_parallel` function the downloaded URLs and
    the time required to download each URL are printed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `download_parallel` 函数的最后部分，将打印下载的 URL 及下载每个 URL 所需的时间。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once the `inputs` and `download_parallel` are defined, the files can be downloaded
    in parallel with a single line of code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了 `inputs` 和 `download_parallel`，就可以用一行代码并行下载文件。
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that it took longer to download each individual file with the approach.
    This may be a result of changing network speed, or overhead required to map the
    downloads to their respective threads. Even though the individual files took longer
    to download, the parallel method resulted in a 50% decrease in total download
    time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种方法下载每个单独文件所需的时间更长。这可能是由于网络速度变化，或将下载映射到各自线程所需的开销所致。尽管单独文件下载时间较长，但并行方法使总下载时间减少了50%。
- en: You can see how parallel processing can greatly reduce processing time for multiple
    files. As the number of files increases, you will save much more time by using
    a parallel download approach.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到并行处理如何大大减少多个文件的处理时间。随着文件数量的增加，使用并行下载方法可以节省更多时间。
- en: Conclusion
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Automating file downloads in your development and analysis routines can save
    you a lot of time. As demonstrated by this tutorial implementing a parallel download
    routine can greatly decrease file acquisition time if you require many files or
    large files.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的开发和分析流程中自动化文件下载可以节省大量时间。正如本教程所示，实现并行下载例程可以大大减少文件获取时间，特别是当你需要下载许多文件或大文件时。
- en: '*Originally published at* [*https://opensourceoptions.com*](https://opensourceoptions.com/blog/use-python-to-download-multiple-files-or-urls-in-parallel/)*.*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发布于* [*https://opensourceoptions.com*](https://opensourceoptions.com/blog/use-python-to-download-multiple-files-or-urls-in-parallel/)*.*'
