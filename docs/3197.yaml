- en: The Perfect Way to Smooth Your Noisy Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平滑你的噪声数据的完美方法
- en: 原文：[https://towardsdatascience.com/the-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440?source=collection_archive---------0-----------------------#2023-10-25](https://towardsdatascience.com/the-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440?source=collection_archive---------0-----------------------#2023-10-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440?source=collection_archive---------0-----------------------#2023-10-25](https://towardsdatascience.com/the-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440?source=collection_archive---------0-----------------------#2023-10-25)
- en: Insanely fast and reliable smoothing and interpolation with the Whittaker-Eilers
    method.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Whittaker-Eilers 方法进行极快且可靠的平滑和插值。
- en: '[](https://medium.com/@anbowell?source=post_page-----4f3fe6b44440--------------------------------)[![Andrew
    Bowell](../Images/a23bade2986dd9ce01f9056d0a9b108f.png)](https://medium.com/@anbowell?source=post_page-----4f3fe6b44440--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4f3fe6b44440--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4f3fe6b44440--------------------------------)
    [Andrew Bowell](https://medium.com/@anbowell?source=post_page-----4f3fe6b44440--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@anbowell?source=post_page-----4f3fe6b44440--------------------------------)[![Andrew
    Bowell](../Images/a23bade2986dd9ce01f9056d0a9b108f.png)](https://medium.com/@anbowell?source=post_page-----4f3fe6b44440--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4f3fe6b44440--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4f3fe6b44440--------------------------------)
    [Andrew Bowell](https://medium.com/@anbowell?source=post_page-----4f3fe6b44440--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6096004462d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440&user=Andrew+Bowell&userId=6096004462d1&source=post_page-6096004462d1----4f3fe6b44440---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4f3fe6b44440--------------------------------)
    ·13 min read·Oct 25, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4f3fe6b44440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440&user=Andrew+Bowell&userId=6096004462d1&source=-----4f3fe6b44440---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6096004462d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440&user=Andrew+Bowell&userId=6096004462d1&source=post_page-6096004462d1----4f3fe6b44440---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4f3fe6b44440--------------------------------)
    · 13 min read · 2023年10月25日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4f3fe6b44440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440&user=Andrew+Bowell&userId=6096004462d1&source=-----4f3fe6b44440---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4f3fe6b44440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440&source=-----4f3fe6b44440---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4f3fe6b44440&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-perfect-way-to-smooth-your-noisy-data-4f3fe6b44440&source=-----4f3fe6b44440---------------------bookmark_footer-----------)'
- en: Real-world data is never clean. Whether you’re carrying out a survey, measuring
    rainfall or receiving GPS signals from space, noisy data is ever present. Dealing
    with such data is the main part of a data scientist’s job. It’s not all glamorous
    machine learning models and AI — it’s cleaning data in an attempt to extract as
    much meaningful information as possible. If you’re currently looking at a graph
    that has way too many squiggles to be useful. Well, I have the solution you’re
    looking for.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界的数据从来不会干净。无论你是在进行调查、测量降雨量还是接收来自太空的 GPS 信号，噪声数据总是存在。处理这些数据是数据科学家的主要工作内容。它并非全是光鲜的机器学习模型和人工智能——而是清理数据，以便尽可能提取有意义的信息。如果你当前看到的图表上有太多的曲折线而无法使用，那么，我有你需要的解决方案。
- en: '**Whittaker-Eilers Smoothing**'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Whittaker-Eilers 平滑法**'
- en: The Whittaker-Eilers smoother [1] was introduced to me when I was working in
    Earth Observation. Doing pixel-wise analysis on thousands of high-resolution satellite
    images requires insanely fast algorithms to sanitise the data. On any given day
    it might be cloudy, a few pixels may be obscured by smoke, or the sensor may have
    an artifact. The list can go on and on. What you’re left with is terabytes of
    rather noisy, gappy time-series data that needs to be smoothed and interpolated
    — and this is where the Whittaker smoother thrives.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Whittaker-Eilers 平滑器 [1] 是我在从事地球观测工作时接触到的。对数千张高分辨率卫星图像进行像素级分析需要极其快速的算法来清理数据。某一天可能会有云层覆盖，一些像素可能被烟雾遮挡，或者传感器可能会出现伪影。列举的情况可以一直延续下去。你得到的是数
    TB 的相当嘈杂、存在空缺的时间序列数据，需要进行平滑和插值——这正是 Whittaker 平滑器的强项。
- en: Smoothing
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平滑
- en: Let’s start with a graph showing the [global temperature anomaly](https://climate.nasa.gov/vital-signs/global-temperature/)
    between 1880 and 2022 [2]. In orange is the measured data and in green is the
    same data smoothed using the Whittaker-Eilers method.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个图表开始，展示 1880 到 2022 年的 [全球温度异常](https://climate.nasa.gov/vital-signs/global-temperature/)
    [2]。橙色表示测量数据，绿色表示使用 Whittaker-Eilers 方法平滑的数据。
- en: '![](../Images/d1296ce02811f68f3bd0185873ba9fab.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1296ce02811f68f3bd0185873ba9fab.png)'
- en: Figure 1) Whittaker-Eilers smoothed global temperature anomaly
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1) Whittaker-Eilers 平滑的全球温度异常
- en: As you can see the raw time-series data is rather noisy. The conclusions we
    want to extract are not about year-to-year fluctuations but the general trend
    of the data over the past century. Smoothing the data offers a straight forward
    way to make the trend stand out and even better, it only takes 4 lines of code
    to run.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，原始的时间序列数据相当嘈杂。我们想提取的结论并不是关于逐年的波动，而是过去一个世纪的数据总体趋势。平滑数据提供了一种直接的方法来突出趋势，更好的是，它只需要
    4 行代码就能运行。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you’re not into Python, it’s only 4 lines of Rust code too.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢 Python，这也只需要 4 行 Rust 代码。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Disclaimer, this is a package I’ve written — Python:* `[*pip install whittaker-eilers*](https://pypi.org/project/whittaker-eilers/)`
    *or Rust:* `[*cargo add whittaker-eilers*](https://crates.io/crates/whittaker-eilers)`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明，这个包是我编写的 — Python:* `[*pip install whittaker-eilers*](https://pypi.org/project/whittaker-eilers/)`
    *或 Rust:* `[*cargo add whittaker-eilers*](https://crates.io/crates/whittaker-eilers)`'
- en: Interpolation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值
- en: Now lets introduce some gaps into our data. Instead of having data that’s been
    uniformly collected each year, lets reduce it to every other year and add a couple
    of long gaps.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在数据中引入一些空缺。与其每年均匀收集数据，不如减少为每隔一年一次，并增加几个较长的空缺。
- en: '![](../Images/c38abba605bf5b6f47fc78bb8a6399d4.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c38abba605bf5b6f47fc78bb8a6399d4.png)'
- en: Figure 2) Whittaker-Eilers smoothed and interpolated global temperature anomaly
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2) Whittaker-Eilers 平滑并插值的全球温度异常
- en: The Whittaker handles it effortlessly. All you need to do is assign a weight
    to each measurement. When interpolating, a measurement that exists is given a
    weight of 1 and a measurement you wish to obtain a value for is filled in with
    a dummy value, say -999, and assigned a weight of 0\. The Whittaker handles the
    rest. It can also be used to accordingly weight measurements based on their uncertainty
    and can once again be deployed in a few lines of Python.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Whittaker 方法处理起来非常轻松。你只需要给每个测量值分配一个权重。在插值时，存在的测量值权重为 1，而你希望获取值的测量用一个虚拟值，比如 -999，权重为
    0。Whittaker 方法会处理剩下的部分。它也可以用来根据测量的不确定性进行相应的加权，而且只需几行 Python 代码即可完成。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As well as gaps in the data, the Whittaker smoother can easily deal with unevenly
    spaced measurements. If you’re not bothered about interpolation and just want
    the smoothed values for the measurements you have, just provide an `x_input` containing
    when or where your measurements were taken. For example, `[1880, 1885, 1886, 1900]`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据中的空缺，Whittaker 平滑器还可以轻松处理不均匀间隔的测量。如果你不在意插值，只需提供一个包含测量时间或地点的 `x_input`，例如
    `[1880, 1885, 1886, 1900]`，就可以获得平滑后的值。
- en: Configuration
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: With a single parameter, λ (lambda), you have continuous control over the smoothness
    of the data. The larger the lambda, the smoother the data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个单一的参数 λ（lambda），你可以持续控制数据的平滑度。lambda 越大，数据越平滑。
- en: '![](../Images/d72e117eba62b994bc53354eefbf5c1b.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d72e117eba62b994bc53354eefbf5c1b.png)'
- en: Figure 3) Whittaker-Eilers smoothed data for multiple values of lambda
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3) Whittaker-Eilers 平滑数据，λ 值不同
- en: The order of the smoother, **d,** is also controllable. The higher the order,
    the more adjacent elements the Whittaker will take into account when calculating
    how smooth the time-series should be. The core take away from this is that interpolated
    data will be a polynomial of order 2**d** and extrapolated data will be of order
    **d**; though, we’ll dive into the mathematics of this a little later.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 平滑器的阶数 **d** 也是可以控制的。阶数越高，Whittaker 在计算时间序列的平滑程度时会考虑更多的邻近元素。核心要点是，插值数据将是阶数为
    2**d** 的多项式，而外推数据将是阶数为 **d** 的多项式；不过，我们稍后会详细探讨这些数学原理。
- en: '![](../Images/0d5949c31df6a60e6ab7152ba0f486af.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d5949c31df6a60e6ab7152ba0f486af.png)'
- en: Figure 4) Whittaker-Eilers smoothed data for multiple orders
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4）Whittaker-Eilers 平滑数据的多阶次
- en: Comparison with other methods
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他方法的比较
- en: 'To demonstrate how good the Whittaker-Eilers method is, let’s compare it against
    a few different techniques:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 Whittaker-Eilers 方法的优越性，让我们将其与几种不同的技术进行比较：
- en: Gaussian kernel smoothing (also known as an RBF kernel)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高斯核平滑（也称为 RBF 核）
- en: Savitzky-Golay filter
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Savitzky-Golay 滤波器
- en: Local Regression (LOWESS)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 局部回归 (LOWESS)
- en: The first is a kernel smoother, which essentially amounts to a fancy weighted
    average of neighbouring points. The second, the Savitzky-Golay filter is what
    Eilers’ original 2003 paper was positioning itself against and is very widely
    used. It smooths by carrying out a least squares fit of a [polynomial to successive
    subsets of adjacent data](https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter#/media/File:Lissage_sg3_anim.gif).
    And finally, local regression which was the method of choice by NASA to [smooth
    the temperature anomaly](https://climate.nasa.gov/vital-signs/global-temperature/)
    data seen above. This method performs iterative weighted linear fits on successive
    subsets of data, re-weighting the points based on the residuals as it goes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是核平滑器，本质上是一种对邻近点进行加权平均的复杂方法。第二种是 Savitzky-Golay 滤波器，它与 Eilers 在 2003 年的原始论文相对立，并且使用非常广泛。它通过对[相邻数据子集进行多项式的最小二乘拟合](https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter#/media/File:Lissage_sg3_anim.gif)来平滑数据。最后，局部回归是
    NASA 选择的[平滑温度异常](https://climate.nasa.gov/vital-signs/global-temperature/)数据的方法。这种方法在连续的数据子集上执行迭代加权线性拟合，并根据残差重新加权点。
- en: I’ve opted not to include any methods aimed at real-time smoothing as they necessarily
    introduce a lag into your signal by only assessing past data. If you’re interested
    in such methods be sure to check out moving averages, exponential smoothers, and
    Kalman filters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择不包括任何实时平滑的方法，因为这些方法在仅评估过去数据时会必然引入信号延迟。如果你对这种方法感兴趣，务必查看移动平均、指数平滑和卡尔曼滤波器。
- en: Smoothing
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平滑
- en: So let’s take a look at temperature anomaly time-series again, but this time
    smoothed with the additional methods.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们再看看温度异常时间序列，这一次使用额外的方法进行平滑。
- en: '![](../Images/b4f59976a77fdc629623b6d378c47a9b.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4f59976a77fdc629623b6d378c47a9b.png)'
- en: Figure 5) Comparison of different smoothing techniques
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5）不同平滑技术的比较
- en: As you can see there’s not much variation — at least once you’ve got your parameters
    tuned. Let’s try an example that can tease out some differences as well as be
    benchmarked for performance. We’ll generate 4 basic sine waves between 0 and 2**π**
    and add some Gaussian noise to them. With each signal the sample size will increase,
    starting with 40 and finishing with 10,000\. Already challenges are presented
    for the the Savitzky-Golay, Gaussian Kernel, and LOWESS methods. They expect a
    window length — some length of data that should be included in each successive
    subset to perform the fit/average on. If you’re increasing the number of measurements
    in the same space of time, you’ll need to make sure your window length varies
    with your overall data length to obtain optimal smoothing for each dataset. Below,
    each method roughly takes into account one tenth of the overall data for each
    window.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，变化不大——至少在你调节好参数后如此。让我们尝试一个例子，既可以揭示一些差异，也可以进行性能基准测试。我们将生成 4 个基本的正弦波，范围在
    0 到 2**π** 之间，并添加一些高斯噪声。每个信号的样本大小将增加，从 40 开始，直到 10,000 结束。对于 Savitzky-Golay、高斯核和
    LOWESS 方法来说，已经提出了挑战。它们期望一个窗口长度——每个连续子集中应包含的数据长度，以便进行拟合/平均。如果你在相同的时间段内增加测量数量，你需要确保你的窗口长度随着整体数据长度的变化而变化，以获得每个数据集的最佳平滑效果。下面，每种方法大致考虑了整体数据的十分之一作为每个窗口。
- en: '![](../Images/74094e41628bd15b83776679f907e774.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74094e41628bd15b83776679f907e774.png)'
- en: Figure 6) Smoothed sine waves with different measurement sampling frequencies
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图6) 不同测量采样频率下平滑的正弦波
- en: The Whittaker however does not need such dynamic parameter tuning. You can provide
    it with the measurement position x, set λ once, and you’ll be given smooth data
    every time. This knowledge of measurement position additionally enables it to
    handle unequally spaced data. LOWESS can also run on such data, but the other
    two methods require it to be equally spaced. Overall, I find the Whittaker the
    easiest to use.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Whittaker不需要如此动态的参数调整。你只需提供测量位置x，设置一次λ，它就会每次都给出平滑的数据。这种测量位置的知识使其能够处理不等间距的数据。LOWESS也可以在这种数据上运行，但另外两种方法要求数据间隔相等。总体而言，我发现Whittaker最易于使用。
- en: Another benefit of the Whittaker smoother is its adaptiveness to boundary conditions.
    At the edges of data, the Savitzky-Golay filter changes behavior as it can’t fit
    a polynomial past the end of the dataset without padding or mirroring it. Another
    option is to let it fit a polynomial to the final window and just use those results.
    The Gaussian kernel smoother struggles even more as no future measurements enter
    the average and it starts to exhibit a large bias from previous values, which
    can be clearly seen in the graph below.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Whittaker平滑器的另一个好处是其对边界条件的适应性。在数据边缘，Savitzky-Golay滤波器的行为会发生变化，因为它不能在没有填充或镜像数据的情况下拟合超出数据集末尾的多项式。另一种选择是让它拟合最终窗口中的多项式并使用这些结果。高斯核平滑器的情况更糟，因为没有未来的测量值进入平均值，它开始表现出来自以前值的大偏差，这在下面的图表中可以清楚地看到。
- en: '![](../Images/6db4987af0f2c6b64de8f26d795ca3da.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6db4987af0f2c6b64de8f26d795ca3da.png)'
- en: Figure 7) Boundaries of smoothed sine waves with different measurement sampling
    frequencies
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图7) 不同测量采样频率下平滑正弦波的边界
- en: Interpolation
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值
- en: A key feature of the Whittaker is its in-built ability to interpolate data.
    But how good is it compared to these other methods? The question isn’t clear-cut.
    Savitzky-Golay smoothing can interpolate, but only for gaps in data smaller than
    it’s window size and the same is true for LOWESS smoothing. Gaussian kernel smoothing
    doesn’t even have the ability to interpolate at all. The traditional solution
    to this problem is to apply linear interpolation to your data first and then smooth
    it. So we’ll apply this method to the other three techniques and compare the results
    against the Whittaker.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Whittaker的一个关键特性是其内建的数据插值能力。但与其他方法相比，它的效果如何呢？这个问题并不那么明确。Savitzky-Golay平滑可以进行插值，但仅限于数据间隙小于其窗口大小的情况，LOWESS平滑也是如此。高斯核平滑根本没有插值的能力。解决此问题的传统方法是先对数据应用线性插值，然后再进行平滑。因此，我们将这种方法应用于其他三种技术，并将结果与Whittaker进行比较。
- en: Each method will be compared against it’s own smoothed baseline taken from the
    graph at the start of this section (Figure 5). I removed every other point and
    introduced two large gaps, creating a dataset identical to the one seen in the
    interpolation example at the start of the article (Figure 2). For the baseline
    and interpolation runs the parameters were kept the same.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法将与其自身的平滑基线进行比较，该基线取自本节开始时的图（图5）。我删除了每个其他点并引入了两个大的间隙，创建了一个与文章开始处插值示例（图2）中的数据集完全相同的数据集。基线和插值运行的参数保持不变。
- en: '![](../Images/f5e1e5ef7eb86664ecdf16748a9ec525.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f5e1e5ef7eb86664ecdf16748a9ec525.png)'
- en: Figure 8) Comparison of techniques for used in conjunction with linear interpolation
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图8) 线性插值联合使用技术的比较
- en: With linear interpolation filling in gaps, the methods perform well across the
    board. By calculating the [Root Mean Squared Error (RSME)](https://en.wikipedia.org/wiki/Root-mean-square_deviation)
    between the smoothed data without gaps and the smoothed data with gaps we get
    the following results.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过线性插值填补空白后，各方法的表现总体较好。通过计算[均方根误差（RSME）](https://en.wikipedia.org/wiki/Root-mean-square_deviation)来比较平滑后的数据（没有间隙）和有间隙的平滑数据，我们得到了以下结果。
- en: 'Linear Interpolation + Savitzky-Golay: **0.0245 °C**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '线性插值 + Savitzky-Golay: **0.0245 °C**'
- en: 'Whittaker : **0.0271 °C**'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Whittaker : **0.0271 °C**'
- en: 'Linear Interpolation + Gaussian kernel: **0.0275 °C**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '线性插值 + 高斯核: **0.0275 °C**'
- en: 'Linear Interpolation + LOWESS: **0.0299 °C**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '线性插值 + LOWESS: **0.0299 °C**'
- en: The Savitzky-Golay method with linear interpolation gets the closest to the
    original smoothed data followed by the Whittaker, and there’s not much in it!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 线性插值结合Savitzky-Golay方法最接近原始平滑数据，其次是Whittaker，两者之间差别不大！
- en: I’d just quickly like to mention that I've performed the interpolation benchmark
    this way, against their own smoothed baselines, to avoid tuning parameters. I
    could have used the sine wave with added noise, removed some data and tried to
    smooth it back to the original signal but this would have given me a headache
    trying to find the optimal parameters for each method.
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我想简单提一下，我以这种方式执行了插值基准测试，对比了各自平滑的基线，以避免调整参数。我本可以使用添加噪声的正弦波，删除一些数据并尝试将其平滑回原始信号，但这会让我头疼于为每种方法找到最佳参数。
- en: Benchmarking
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基准测试
- en: So lets revisit the sine wave data to generate some benchmarks of just how fast
    these methods are. I chose the most popular implementations in Python for each
    method. Savitzky-Golay and Gaussian kernel filters were implemented using `SciPy`,
    LOWESS was implemented from `statsmodels`, and the Whittaker from my Rust based
    Python package. The graph below shows how long each method took to smooth the
    sine wave with varying data lengths. The times reported are the sum of how long
    it took to smooth each dataset 50 times.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视正弦波数据，以生成这些方法的速度基准。我选择了每种方法中最流行的 Python 实现。Savitzky-Golay 和高斯核滤波器使用`SciPy`实现，LOWESS
    使用`statsmodels`实现，Whittaker 使用我基于 Rust 的 Python 包实现。下图显示了每种方法平滑正弦波所需的时间以及数据长度的变化。报告的时间是平滑每个数据集
    50 次所需的总时间。
- en: '![](../Images/6daa7c9ce94297cef542bddf851af352.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6daa7c9ce94297cef542bddf851af352.png)'
- en: Figure 9) Time taken to smooth time-series of different lengths 50 times
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9) 平滑不同长度的时间序列所需时间 50 次
- en: The quickest method by far is the Whittaker. It can smooth 50 time-series each
    100,000 data points in length in under a second, 10 times faster than a Gaussian
    filter and 100 times faster than a Savitzky-Golay filter. The slowest was LOWESS
    even though it was configured not to iteratively re-weight each linear regression
    (an expensive operation). It’s worth noting that these methods can be sped up
    by adapting the window lengths, but then you’ll be sacrificing the smoothness
    of your data. This is a really great property of the Whittaker — its computation
    time increases linearly with data length (O(n)) and you never have to worry about
    window size. Furthermore, if you have gaps in your data you’ll be interpolating
    without any cost in speed whereas the other methods require some form of pre-processing!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止最快的方法是 Whittaker。它可以在不到一秒的时间内平滑 50 个每个长度为 100,000 数据点的时间序列，比高斯滤波器快 10 倍，比
    Savitzky-Golay 滤波器快 100 倍。最慢的是 LOWESS，尽管它被配置为不迭代地重新加权每个线性回归（这是一个昂贵的操作）。值得注意的是，通过调整窗口长度可以加快这些方法的速度，但这会牺牲数据的平滑度。这是
    Whittaker 的一个非常好的特点——它的计算时间随着数据长度线性增加（O(n)），而且你无需担心窗口大小。此外，如果你的数据中有间隙，你将以无速度损失的方式进行插值，而其他方法则需要某种形式的预处理！
- en: The Mathematics
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数学原理
- en: Now we’ve covered the top-line stuff, let’s dive into the maths behind the Whittaker-Eilers
    smoother and see why it’s such an elegant solution for noisy data [2] [3].
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经覆盖了主要内容，让我们深入探讨 Whittaker-Eilers 平滑器背后的数学，并了解它为何对噪声数据是如此优雅的解决方案 [2] [3]。
- en: Imagine your noisy data **y.** There exists some series **z** which you believe
    to be of optimal smoothness for your **y**. The smoother **z** becomes, the larger
    the residuals between itself and the original data **y**. The Whittaker-Eilers
    method finds the optimal balance between these residuals and the smoothness of
    the data. The residuals are calculated as the standard sum of squared differences,
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你的噪声数据**y**。存在一些序列**z**，你认为它具有对你的**y**的最佳平滑度。**z**变得越平滑，它与原始数据**y**之间的残差越大。Whittaker-Eilers
    方法在这些残差和数据的平滑度之间找到最佳平衡。残差计算为标准的平方差之和，
- en: '![](../Images/8689699a8486d7d83d8a9eb1a32ddf6a.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8689699a8486d7d83d8a9eb1a32ddf6a.png)'
- en: A metric for how smooth the data is can then be computed using the sum of squared
    differences between adjacent measurements,
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 数据平滑度的度量可以使用相邻测量值之间的平方差之和来计算，
- en: '![](../Images/4577bb5dcf8a66ac33cb31b5b3c27ed9.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4577bb5dcf8a66ac33cb31b5b3c27ed9.png)'
- en: '**S** and **R** are the two properties we need to balance. But we also want
    to give the user control over where the right balance is, and we do this by introducing
    **λ** to scale the smoothness.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**S** 和 **R** 是我们需要平衡的两个属性。但我们还希望让用户控制合适的平衡点，我们通过引入**λ**来调整平滑度。'
- en: '![](../Images/65f970a952bc4a14590b646c90dce207.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65f970a952bc4a14590b646c90dce207.png)'
- en: Now our goal becomes finding the series **z** that minimizes **Q** as this is
    where both the smoothness metric and residuals are at their minimum. Let’s expand
    Equation 3 and attempt to solve for **z.**
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的目标变成了找到能最小化 **Q** 的序列 **z**，因为这是平滑度度量和残差都达到最小的地方。让我们展开方程 3 并尝试解出 **z**。
- en: '![](../Images/5f62ce5b5dac8ddeade69bfea01ca3a7.png)![](../Images/cc189978f50f6cfd752171e2cb54e5d9.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5f62ce5b5dac8ddeade69bfea01ca3a7.png)![](../Images/cc189978f50f6cfd752171e2cb54e5d9.png)'
- en: At this point it’s ideal to replace our summations with vectors,
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，理想的做法是用向量替换我们的求和，
- en: '![](../Images/1fef8446ca8e3971c9412acca041e82c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fef8446ca8e3971c9412acca041e82c.png)'
- en: We can then use a clever trick to represent **Δz** as a matrix and vector,
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用一个巧妙的技巧，将 **Δz** 表示为矩阵和向量，
- en: '![](../Images/70b7496fe87f0c35ea62f140309be3ce.png)![](../Images/cdf8b06f94532c8301a236330f3bfb5f.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70b7496fe87f0c35ea62f140309be3ce.png)![](../Images/cdf8b06f94532c8301a236330f3bfb5f.png)'
- en: where m is the length of the data. If you matrix **D** against a vector, you’ll
    see it gives you the differences between adjacent elements — exactly what we want.
    We’re now left with a [least squares problem](https://en.wikipedia.org/wiki/Least_squares#Solving_the_least_squares_problem).
    To find the minimum of **Q** we set its gradient to 0,
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 m 是数据的长度。如果你将矩阵 **D** 与一个向量进行比较，你会发现它给出了相邻元素之间的差异——这正是我们想要的。现在我们面临一个[最小二乘问题](https://en.wikipedia.org/wiki/Least_squares#Solving_the_least_squares_problem)。为了找到
    **Q** 的最小值，我们将其梯度设为 0，
- en: '![](../Images/11416b50efba7938a53cd66943c5f2a4.png)![](../Images/ff8d5b8019bfd95f995faae1a2f495e6.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11416b50efba7938a53cd66943c5f2a4.png)![](../Images/ff8d5b8019bfd95f995faae1a2f495e6.png)'
- en: where **I** is the identity matrix (from factorizing z, a vector). We know **I**,
    **D**, **λ** and **y**, so we’re left with a simple linear equation,
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 **I** 是单位矩阵（来自分解 z，一个向量）。我们知道 **I**、**D**、**λ** 和 **y**，所以我们剩下一个简单的线性方程，
- en: '![](../Images/e32184910ba27f895efe585fcc7a7533.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e32184910ba27f895efe585fcc7a7533.png)'
- en: which can be solved with any of your favourite matrix decompositions to achieve
    the smoothed data series **z**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过你喜欢的任何矩阵分解方法来解决，从而获得平滑的数据系列 **z**。
- en: Interpolation
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值
- en: The above solution only accounts for evenly spaced data where all measurements
    are available. What about if you want interpolation? Well, you’ll need to apply
    weights to each of your measurements.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述解决方案仅适用于数据均匀分布且所有测量值都可用的情况。如果需要插值怎么办？你需要为每个测量值应用权重。
- en: It’s as simple as revisiting Equation 1 and applying a weight to each residual
    and representing it as a diagonal matrix,
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 就像重新审视方程 1 并为每个残差应用权重，并将其表示为对角矩阵一样简单，
- en: '![](../Images/3d9229e9adbf042f6d22834c82a435e5.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d9229e9adbf042f6d22834c82a435e5.png)'
- en: and then carrying out the same calculations as before,
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进行与之前相同的计算，
- en: '![](../Images/79d94c70d787869001ca6ea1e4c24db5.png)![](../Images/7aa4434ed3c1c72c9b7fb905f892cc0a.png)![](../Images/a48f1b41104fc7ea929b836b0447d8a7.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79d94c70d787869001ca6ea1e4c24db5.png)![](../Images/7aa4434ed3c1c72c9b7fb905f892cc0a.png)![](../Images/a48f1b41104fc7ea929b836b0447d8a7.png)'
- en: Once again, this can be solved with a simple matrix decomposition, returning
    smoothed and interpolated data. All that needs to be done beforehand is to fill
    **y** with dummy values when an interpolated value is needed, such as -999, and
    set the weight of those measurements to 0 and watch the magic happen. Exactly
    how the data is interpolated depends upon the filter’s order.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这可以通过简单的矩阵分解来解决，返回平滑和插值的数据。所有需要做的事是在需要插值的地方将 **y** 填充为虚拟值，例如 -999，并将这些测量的权重设置为
    0，然后观察奇迹发生。数据如何插值取决于滤波器的阶数。
- en: Filter Order
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滤波器阶数
- en: The order of the Whittaker-Eilers smoother is something I touched upon in the
    configuration section. Now we have a mathematical framework for describing the
    smoother, it may make more sense. When creating **R,** our measure of smoothness,
    we first opted for “first-order” differences. We can quite easily take a second
    order difference where instead of penalizing our smoother based on adjacent data
    points, we can penalize it based on the change in first order differences, just
    like calculating a derivative.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Whittaker-Eilers 平滑器的阶数是在配置部分提到的内容。现在我们有了描述平滑器的数学框架，它可能更有意义。在创建 **R**（我们的平滑度度量）时，我们首先选择了“一级”差异。我们可以相当容易地计算二阶差异，这样不仅根据相邻数据点对平滑器进行惩罚，还可以根据一阶差异的变化来惩罚它，就像计算导数一样。
- en: '![](../Images/b2df783e00d7d520509a790a27fd8ae1.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2df783e00d7d520509a790a27fd8ae1.png)'
- en: This can then be expanded to third, forth, and fifth order differences and so
    on. It’s normally denoted as **d** and it’s not too tricky to implement as all
    that changes is the matrix **D** like so,
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以扩展到三阶、四阶、五阶差分，等等。通常表示为**d**，实现起来并不太复杂，因为唯一改变的是矩阵**D**，如下所示：
- en: '![](../Images/f6119d1f5c3ebff5dbf203c64b0617a9.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6119d1f5c3ebff5dbf203c64b0617a9.png)'
- en: such that when it is multiplied with **z**,it expands into Equation 17\. A simple
    function can be implemented to generate this matrix given a generic **d**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使其在与**z**相乘时展开为方程17。可以实现一个简单的函数来生成这个矩阵，给定一个通用的**d**。
- en: Sparse Matrices
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏矩阵
- en: This can and has been implemented with sparse matrices as recommended by Eilers
    [1]. The matrices **I** and **D** are very sparsely populated and hugely benefit
    in terms of memory and computation if stored as sparse matrices. All of the maths
    presented above can be easily handled by sparse matrix packages, including Cholesky
    decompositions (and others). If not implemented with sparse matrices the algorithm
    can be incredibly slow for longer time-series, much slower than the other methods
    I compared it with.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以并且已经按照Eilers的建议使用稀疏矩阵来实现。矩阵**I**和**D**非常稀疏，如果以稀疏矩阵的形式存储，将极大地节省内存和计算资源。上述所有数学计算都可以通过稀疏矩阵包轻松处理，包括Cholesky分解（及其他）。如果不使用稀疏矩阵实现，这个算法在处理较长时间序列时可能会非常缓慢，比我比较的其他方法慢得多。
- en: Wrapping-up & Further Reading
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与进一步阅读
- en: This is an awesome algorithm and I can’t believe it isn’t utilized more. Weighted
    smoothing and interpolation wrapped up into fast, efficient matrix operations.
    What’s not to love?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个了不起的算法，我简直不敢相信它没有被更广泛地应用。加权平滑和插值被封装成快速、高效的矩阵运算。有什么不好的吗？
- en: I’ve included the Python scripts I used to carry out benchmarking and interpolation
    tests in the repo for the [whittaker-eilers](https://github.com/AnBowell/whittaker-eilers/tree/main/whittaker-eilers-py/examples)
    package. There’s also lots of examples showing you how to get started in Python
    or Rust as well as tests against Eilers’ original MATLAB algorithms [1]. But if
    you don’t care for that level of verbosity,
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[whittaker-eilers](https://github.com/AnBowell/whittaker-eilers/tree/main/whittaker-eilers-py/examples)包的repo中包含了我用于进行基准测试和插值测试的Python脚本。还有许多示例展示了如何在Python或Rust中入门，以及与Eilers原始MATLAB算法的测试[1]。但如果你不在意那么详细的信息，
- en: 'Python: `[*pip install whittaker-eilers*](https://pypi.org/project/whittaker-eilers/)`
    *or Rust:* `[*cargo add whittaker-eilers*](https://crates.io/crates/whittaker-eilers)`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'Python: `[*pip install whittaker-eilers*](https://pypi.org/project/whittaker-eilers/)`
    *或 Rust:* `[*cargo add whittaker-eilers*](https://crates.io/crates/whittaker-eilers)`'
- en: Even though this was a long post, I haven’t been able to cover everything here.
    Eilers’ 2003 paper also covers the mathematics behind smoothing unevenly spaced
    data and how cross-validation can be used to find an optimal λ. I’d recommend
    checking it out if you want to learn more about the maths behind the algorithm.
    I’d also suggest “Applied Optimum Signal Processing” by Sophocles J. Orfanidis
    as it offers an in-depth mathematical guide to all things signal processing. Thanks
    for reading! Be sure to check this post and others out on my [personal site](https://www.anbowell.com/blog_home).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一篇长文章，我仍然没有涵盖所有内容。Eilers 2003年的论文还涉及了平滑不均匀间隔数据的数学原理以及如何使用交叉验证来找到最佳λ。如果你想深入了解算法背后的数学，我推荐查看这篇论文。我还建议阅读Sophocles
    J. Orfanidis的《应用最优信号处理》，它提供了关于所有信号处理内容的深入数学指南。感谢阅读！请务必查看我的[个人网站](https://www.anbowell.com/blog_home)上的这篇文章和其他文章。
- en: '*I’ve since written a follow up post explaining how to best tune the Whittaker!*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*我之后写了一篇跟进文章，解释了如何最佳地调整Whittaker！*'
- en: '[](/how-to-tune-the-perfect-smoother-bcc5a67660b1?source=post_page-----4f3fe6b44440--------------------------------)
    [## How to Tune the Perfect Smoother'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-tune-the-perfect-smoother-bcc5a67660b1?source=post_page-----4f3fe6b44440--------------------------------)
    [## 如何调整完美平滑器'
- en: Get the most out of your data with Whittaker-Eilers smoothing and leave-one-out
    cross validation
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用Whittaker-Eilers平滑和留一交叉验证最大化数据价值
- en: towardsdatascience.com](/how-to-tune-the-perfect-smoother-bcc5a67660b1?source=post_page-----4f3fe6b44440--------------------------------)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/how-to-tune-the-perfect-smoother-bcc5a67660b1?source=post_page-----4f3fe6b44440--------------------------------)'
- en: '*All images within this article have been produced by the author.*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文中的所有图像均由作者制作。*'
- en: References
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Paul H. C. Eilers, *A Perfect Smoother*, Analytical Chemistry **2003**
    *75* (14), 3631-3636, DOI: 10.1021/ac034173t'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Paul H. C. Eilers, *完美平滑器*, Analytical Chemistry **2003** *75* (14), 3631-3636,
    DOI: 10.1021/ac034173t'
- en: '[2] NASA/GISS, *Global Temperature,* NASA’s Goddard Institute for Space Studies
    (GISS). URL: [https://climate.nasa.gov/vital-signs/global-temperature/](https://climate.nasa.gov/vital-signs/global-temperature/)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] NASA/GISS，《*全球温度*》，NASA戈达德太空研究所（GISS）。网址：[https://climate.nasa.gov/vital-signs/global-temperature/](https://climate.nasa.gov/vital-signs/global-temperature/)'
- en: '[3] Sophocles J. Orfanidi, *Applied Optimum Signal Processing,* Rutgers University,
    URL: [http://www.ece.rutgers.edu/~orfanidi/aosp](http://www.ece.rutgers.edu/~orfanidi/aosp)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 索福克勒斯·J·奥尔法尼迪，《*应用最优信号处理*》，罗格斯大学，网址：[http://www.ece.rutgers.edu/~orfanidi/aosp](http://www.ece.rutgers.edu/~orfanidi/aosp)'
