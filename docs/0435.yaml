- en: 'Pandas: apply, map or transform?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Pandas: apply、map还是transform？'
- en: 原文：[https://towardsdatascience.com/pandas-apply-map-or-transform-dd931659e9cf?source=collection_archive---------3-----------------------#2023-01-31](https://towardsdatascience.com/pandas-apply-map-or-transform-dd931659e9cf?source=collection_archive---------3-----------------------#2023-01-31)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pandas-apply-map-or-transform-dd931659e9cf?source=collection_archive---------3-----------------------#2023-01-31](https://towardsdatascience.com/pandas-apply-map-or-transform-dd931659e9cf?source=collection_archive---------3-----------------------#2023-01-31)
- en: A guide to Pandas’ most versatile function
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas最通用函数的指南
- en: '[](https://polaris000.medium.com/?source=post_page-----dd931659e9cf--------------------------------)[![Aniruddha
    Karajgi](../Images/c18d7866d393d73faa110f256a31724c.png)](https://polaris000.medium.com/?source=post_page-----dd931659e9cf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dd931659e9cf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dd931659e9cf--------------------------------)
    [Aniruddha Karajgi](https://polaris000.medium.com/?source=post_page-----dd931659e9cf--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://polaris000.medium.com/?source=post_page-----dd931659e9cf--------------------------------)[![Aniruddha
    Karajgi](../Images/c18d7866d393d73faa110f256a31724c.png)](https://polaris000.medium.com/?source=post_page-----dd931659e9cf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dd931659e9cf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dd931659e9cf--------------------------------)
    [Aniruddha Karajgi](https://polaris000.medium.com/?source=post_page-----dd931659e9cf--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdda13b3bf503&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpandas-apply-map-or-transform-dd931659e9cf&user=Aniruddha+Karajgi&userId=dda13b3bf503&source=post_page-dda13b3bf503----dd931659e9cf---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dd931659e9cf--------------------------------)
    ·9 min read·Jan 31, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdd931659e9cf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpandas-apply-map-or-transform-dd931659e9cf&user=Aniruddha+Karajgi&userId=dda13b3bf503&source=-----dd931659e9cf---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdda13b3bf503&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpandas-apply-map-or-transform-dd931659e9cf&user=Aniruddha+Karajgi&userId=dda13b3bf503&source=post_page-dda13b3bf503----dd931659e9cf---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dd931659e9cf--------------------------------)
    ·9分钟阅读·2023年1月31日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdd931659e9cf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpandas-apply-map-or-transform-dd931659e9cf&source=-----dd931659e9cf---------------------bookmark_footer-----------)![](../Images/df9f78e2b1a64fcd26be282f5c67f91a.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdd931659e9cf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fpandas-apply-map-or-transform-dd931659e9cf&source=-----dd931659e9cf---------------------bookmark_footer-----------)![](../Images/df9f78e2b1a64fcd26be282f5c67f91a.png)'
- en: Photo by [Sid Balachandran](https://unsplash.com/@itookthose?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Sid Balachandran](https://unsplash.com/@itookthose?utm_source=medium&utm_medium=referral)提供，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: As someone who’s been using Pandas for a few years now, I’ve noticed how many
    people (myself included) often resort to almost always using the `**apply**`function.
    While this isn’t an issue on smaller datasets, the performance issues caused by
    this become a lot more noticeable when working with larger amounts of data. While
    `**apply**`’s flexibility makes it an easy choice, this article introduces other
    Pandas' functions as potential alternatives.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个使用Pandas多年的用户，我注意到许多人（包括我自己）经常几乎总是使用`**apply**`函数。虽然在较小的数据集上这不是问题，但在处理大量数据时，这种做法引起的性能问题会变得更加明显。虽然`**apply**`的灵活性使其成为一个简单的选择，但这篇文章介绍了其他Pandas函数作为潜在的替代方案。
- en: In this post, we’ll discuss the intended use for `**apply**`, `**agg**`, `**map**`
    and `**transform**`, with a few examples.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨`**apply**`、`**agg**`、`**map**`和`**transform**`的使用方式，并提供一些示例。
- en: Table of contents
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容目录
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An Example
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: Let’s take a data frame comprising the scores of three students in two subjects.
    We’ll work with this example as we go.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个数据框为例，该数据框包含三名学生在两门科目中的分数。我们将在接下来的工作中使用这个示例。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We’ll now concatenate these to create a single dataframe.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将这些数据合并成一个单一的数据框。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our final dataframe looks like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的数据框看起来是这样的：
- en: '![](../Images/b683eae8e31437fe7df7eaa86f47cbd6.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b683eae8e31437fe7df7eaa86f47cbd6.png)'
- en: The example dataframe
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 示例数据框
- en: We’ll explore the use of each function using this dataset.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个数据集来探索每个函数的使用。
- en: map
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: map
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `**map**` method works on a `Series` and maps each value based on what is
    passed as `arg` to the function. `arg` can be a function — just like what `apply`
    could take — but it can also be a dictionary or a series.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`**map**`方法作用于`Series`，并根据传递给函数的`arg`来映射每个值。`arg`可以是一个函数——就像`apply`可以接受的那样——但它也可以是字典或系列。'
- en: The `na_action` essentially lets you decide what happens to `NaN` values if
    they exist in the series. When set to `"ignore”` , `arg` won’t be applied to `NaN`
    values.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`na_action`本质上让你决定如果系列中存在`NaN`值会发生什么。当设置为`"ignore"`时，`arg`不会应用于`NaN`值。'
- en: 'For eg, if you wanted to replace categorical values in your series using a
    mapping, you could do something like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想用映射替换系列中的分类值，你可以这样做：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is as expected: it returns a mapped value corresponding to each
    element in our original series.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 输出符合预期：它返回与我们原始系列中的每个元素对应的映射值。
- en: '![](../Images/992bbf594153524a6605a5c8de908dae.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/992bbf594153524a6605a5c8de908dae.png)'
- en: The output of map
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: map的输出
- en: Though `**apply**` doesn’t accept a dictionary, this can be still be accomplished
    with it, but it's not nearly as efficient or elegant.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`**apply**`不接受字典，但仍然可以实现这种功能，但效率和优雅程度远不如前者。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/992bbf594153524a6605a5c8de908dae.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/992bbf594153524a6605a5c8de908dae.png)'
- en: The output of apply is identical to that of map
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`的输出与`map`的输出相同'
- en: '**Performance**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能**'
- en: On a simple test of encoding a gender series with a million records, `**map**`
    was **10x faster** than `**apply**`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在对包含百万条记录的性别系列进行编码的简单测试中，`**map**`比`**apply**`**快了10倍**。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since `**map**`can take functions as well, any kind of transformation that doesn’t
    depend on other elements — unlike an aggregation like mean, for example — can
    be passed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`**map**`也可以接受函数，因此任何不依赖于其他元素的转换——例如不像均值这样的聚合——都可以传递。
- en: Using things like `map(len)` or `map(upper)` can really make preprocessing much
    easier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`map(len)`或`map(upper)`等方法可以使预处理变得更加容易。
- en: Let’s assign this gender encoding result back to our data frame and move on
    to `**applymap**`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个性别编码结果分配回数据框，并继续探讨`**applymap**`。
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/62dea9888b1557c683cad41b4d1d1e6a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62dea9888b1557c683cad41b4d1d1e6a.png)'
- en: Encoding the gender with map
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用map编码性别
- en: '`applymap`'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`applymap`'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I won’t spend too long on `**applymap**` since it’s very similar to `**map**`
    and is internally implemented using `**apply**`. `**applymap**`works elementwise
    on a dataframe, just like what `**map**` does, but since it’s internally implemented
    with `**apply**` , it can’t take a dictionary or a Series as input — only functions
    are allowed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会花太多时间在`**applymap**`上，因为它与`**map**`非常相似，并且内部实现使用了`**apply**`。`**applymap**`在数据框上按元素级别工作，就像`**map**`一样，但由于它是通过`**apply**`内部实现的，因此不能接受字典或系列作为输入——仅允许使用函数。
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`na_action` works just like it does in `**map**`**.**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`na_action`的工作方式与`**map**`**中的相同**。'
- en: transform
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: transform
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: While the previous two functions worked at the element level, transform works
    at the column level. This means that you can make use of aggregating logic with
    `**transform**` **.**
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前的两个函数在元素级别工作，但`transform`在列级别工作。这意味着你可以在`**transform**`**中使用聚合逻辑**。
- en: Let’s continue working with the same dataframe as before.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用之前的数据框。
- en: '![](../Images/8199ccdd5f21b75b1efb60c2bfadc502.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8199ccdd5f21b75b1efb60c2bfadc502.png)'
- en: Our example, with the encoded gender
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例，带有编码后的性别
- en: 'Let’s say we wanted to standardize our data. We could do something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要标准化数据。我们可以做如下操作：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What we’re essentially doing is taking the score series from each group, and
    replacing each element with its standardized value. This can’t be done with `**map**`,
    since it requires column-wise computation while `map` only works element-wise.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本质上是在从每个组中提取分数系列，并用其标准化值替换每个元素。这是不能通过`**map**`完成的，因为它需要按列计算，而`map`仅在元素级别工作。
- en: If you’re familiar with `**apply**`, you’ll know that this behavior can also
    be implemented with it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉`**apply**`，你会知道这种行为也可以通过它来实现。
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We get essentially the same thing. Then what’s the point of using `**transform**`?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的结果基本相同。那么使用 `**transform**` 的意义何在？
- en: '`**transform**` must return a dataframe with the same length along the axis
    that it’s applied.'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`**transform**` 必须返回一个在应用轴上长度相同的数据框。'
- en: Remember that `**transform**` must return a dataframe with the same length along
    the axis it's applied on. What this means is that even if `**transform**` is used
    with a `groupby` operation that returns aggregate values, it assigns those aggregate
    values to each element.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 `**transform**` 必须返回一个在其应用轴上长度相同的数据框。这意味着即使 `**transform**` 与返回聚合值的 `groupby`
    操作一起使用，它也会将这些聚合值分配给每个元素。
- en: 'For example, let’s say we wanted to know the sum of the scores of all students
    for each subject. We could do this with apply like so:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想知道每个学科所有学生分数的总和。我们可以这样用 apply 来做到这一点：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'But here, we’ve aggregated scores by subject lost information on how individual
    students and their scores relate. If we tried doing the same thing with `**transform**`
    , we’ll get something a lot more interesting:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在这里，我们通过学科聚合了分数，失去了关于各个学生及其分数关系的信息。如果我们尝试用 `**transform**` 做同样的事情，我们会得到更有趣的结果：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So though we worked at a group level, we were still able to keep track of how
    group-level information relates to row-level information.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在组级别工作，但我们仍能跟踪组级信息与行级信息之间的关系。
- en: Because of this behavior, `**transform**`throws a `ValueError` if your logic
    doesn’t return a transformed series. So any kind of aggregation wouldn’t work.
    `**apply**`‘s flexibility, however, ensures that it works just fine even with
    aggregations, as we’ll see in detail in the next section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种行为，`**transform**` 如果你的逻辑没有返回一个变换后的系列，将会抛出 `ValueError`。因此，任何类型的聚合都不会有效。然而，`**apply**`
    的灵活性确保了即使在进行聚合时也能正常工作，正如我们将在下一节中详细探讨的那样。
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Performance**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能**'
- en: In terms of performance, there’s a **2x speedup** on switching from `**apply**`
    to `**transform**`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就性能而言，从 `**apply**` 切换到 `**transform**` 的速度提高了 **2 倍**。
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/4ed25e8f3954e05faa39336e0c3e2fe7.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ed25e8f3954e05faa39336e0c3e2fe7.png)'
- en: A 1M row dataframe for testing transform’s performance
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试 `**transform**` 性能的 1M 行数据框
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: agg
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: agg
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `**agg**` function is a lot easier to understand since it simply returns
    an aggregate over the data that’s passed to it. So regardless of how your custom
    aggregator is implemented, the result will be a single value for each column that’s
    passed to it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`**agg**` 函数更容易理解，因为它只是返回对传递给它的数据进行的聚合。因此，无论你的自定义聚合器是如何实现的，结果将是传递给它的每一列的单个值。'
- en: We’ll now look at a simple aggregation — computing each group's mean over the
    `score` column. Notice how we can pass in a positional argument to `**agg**`todirectly
    name the aggregated result.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在来看一个简单的聚合——计算每个组在 `score` 列上的均值。注意我们可以传递位置参数给 `**agg**` 以直接命名聚合结果。
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/817a2bf9b509f58bba2cfad958108104.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/817a2bf9b509f58bba2cfad958108104.png)'
- en: Mean scores by subject using agg
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 agg 按学科计算的均值
- en: Multiple aggregators can be passed as a list.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将多个聚合器作为列表传递。
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/c5bda0afb3b584ef861e856bf33185c3.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5bda0afb3b584ef861e856bf33185c3.png)'
- en: Mean scores by subject using apply — identical to our previous result.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 apply 按学科计算的均值——与我们之前的结果相同。
- en: '`**agg**`offers a lot more options to perform aggregations. In the previous
    two examples, we saw that it lets you perform multiple aggregations in a list
    and even named aggregations. You can also build custom aggregators as well as
    perform multiple specific aggregations over each column, like calculating the
    mean on one column and median on another.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`**agg**` 提供了更多的聚合选项。在前两个示例中，我们看到它允许你在列表中执行多个聚合，甚至进行命名聚合。你还可以构建自定义聚合器以及对每列进行多个特定聚合，比如对一列计算均值，对另一列计算中位数。'
- en: '**Performance**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能**'
- en: In terms of performance, `**agg**` is moderately faster than `**apply**` , at
    least for simple aggregations. Let’s recreate the same dataframe from the previous
    performance test.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 就性能而言，`**agg**` 比 `**apply**` 稍快，至少在简单聚合的情况下是这样。让我们重新创建之前性能测试中相同的数据框。
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](../Images/4ed25e8f3954e05faa39336e0c3e2fe7.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ed25e8f3954e05faa39336e0c3e2fe7.png)'
- en: The same dataframe as before, for performance testing
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 用于性能测试的相同数据框
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We see an approximately 30% boost in performance when using `**agg**` over `**apply**`.
    When testing over multiple aggregations, we get similar results.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `**agg**` 比 `**apply**` 提高了大约 30% 的性能。在进行多次聚合测试时，我们得到了类似的结果。
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: apply
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: apply
- en: For me, this was the most confusing one out of the ones we’ve discussed, mainly
    due to how flexible it is. Each of the examples above can be replicated with `**apply**`
    as we just saw**.**
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这是我们讨论过的最令人困惑的一个，主要是由于它的灵活性。我们刚才看到的每一个例子都可以用`**apply**` 复制**。**
- en: 'Of course, this flexibility comes at a cost: it''s noticeably slower, as demonstrated
    by our performance tests.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种灵活性是有代价的：正如我们的性能测试所示，它明显较慢。
- en: '![](../Images/a2ef3dd4188a0a81f29b4c08993cde3c.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2ef3dd4188a0a81f29b4c08993cde3c.png)'
- en: 'Performance Tests: the apply function is noticeably slower, and understandably
    so.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试：`apply`函数明显较慢，这是可以理解的。
- en: Unexpected behavior
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 意外的行为
- en: The other issue with `**apply**` ‘s flexibility is that the result is sometimes
    surprising.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`**apply**` 灵活性带来的另一个问题是结果有时会令人惊讶。'
- en: '**Processing the first group twice**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理第一个组两次**'
- en: 'One such issue, which is now resolved, was with regard to certain performance
    optimizations: `**apply**` would process the first group twice. The first time,
    it would look for optimizations, and then it would process each group, thus processing
    the first group twice.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一个已经解决的问题是关于某些性能优化的：`**apply**` 会将第一个组处理两次。第一次，它会查找优化，然后处理每个组，因此会将第一个组处理两次。
- en: 'I first noticed this while debugging a custom apply function I had written:
    when I printed out the group’s information, the first group was displayed twice.
    This behavior would lead to silent errors if there were any side effects since
    any updates would happen twice on the first group.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初在调试我编写的自定义 apply 函数时注意到这一点：当我打印出组的信息时，第一个组被显示了两次。如果存在副作用，这种行为会导致静默错误，因为任何更新都会在第一个组上发生两次。
- en: '**When there’s only a single group**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**当只有一个组时**'
- en: This issue has been plaguing pandas since at least 2014\. It happens when there’s
    only a single group in the entire column. In such a scenario, even though the
    `**apply**` function is expected to return a series, it ends up yielding a dataframe.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题自2014年起就困扰着pandas。当整个列中只有一个组时，即使`**apply**`函数期望返回一个系列，它最终却会产生一个数据框。
- en: The result is similar to an additional unstacking operation. Let’s try and reproduce
    it. We’ll use our original dataframe and add a `city` column. Let’s assume that
    all of our three students, John, James, and Jennifer are from Boston.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 结果类似于额外的堆叠操作。让我们尝试重现它。我们将使用原始数据框，并添加一个`city`列。假设我们所有的三位学生，John、James 和 Jennifer
    都来自波士顿。
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](../Images/22ec8de50f88ccef6ec97f9854c90960.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22ec8de50f88ccef6ec97f9854c90960.png)'
- en: Our dataframe with the additional “city” column added
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据框增加了“city”列
- en: 'Now, let’s calculate the group-wise mean for two sets of groups: one based
    on the `subject` column, and the other on `city`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们计算两组的组均值：一组基于 `subject` 列，另一组基于 `city`。
- en: Grouping on the `subject` column, we get a multi-indexed series as we’d expect.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `subject` 列上分组时，我们得到了一个多索引系列，这是我们预期的。
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](../Images/06750b6e1663ead794976f588a9c2df7.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/06750b6e1663ead794976f588a9c2df7.png)'
- en: apply returns a multi-indexed series when there are multiple groups
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: apply 在有多个组时返回一个多索引系列
- en: 'But when we group by the `city` column, which as we know has only one group
    (corresponding to `“Boston”`), we get this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当我们按`city`列分组时，正如我们所知，这只有一个组（对应于`“Boston”`），我们得到的是：
- en: '[PRE33]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](../Images/f29dba40e086f13774cb83cc9e018d6b.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f29dba40e086f13774cb83cc9e018d6b.png)'
- en: apply returns an unstacked dataframe when there’s only one group
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: apply 在只有一个组时返回一个未堆叠的数据框
- en: Notice how the result is pivoted? If we `**stack**` this, we’ll get back the
    expected result.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意结果如何被透视？如果我们`**stack**` 这个，我们将得到预期的结果。
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![](../Images/467416b6a3ee7c32164ea5bdfc3df1de.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/467416b6a3ee7c32164ea5bdfc3df1de.png)'
- en: Stacking our previous result yields an expected result
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 堆叠我们之前的结果会得到预期的结果
- en: As of this writing, this issue still hasn’t been fixed.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文撰写时，这个问题仍未修复。
- en: Code
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: You can find the entire code along with the performance tests here.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到完整的代码以及性能测试。
- en: '[](https://github.com/Polaris000/BlogCode/tree/main/PandasApply?source=post_page-----dd931659e9cf--------------------------------)
    [## BlogCode/PandasApply at main · Polaris000/BlogCode'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/Polaris000/BlogCode/tree/main/PandasApply?source=post_page-----dd931659e9cf--------------------------------)
    [## BlogCode/PandasApply 在 main · Polaris000/BlogCode]'
- en: 'This is the example code used in my blog post Pandas: apply, map, or transform?
    The blog post discusses Pandas''…'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是我博客文章《Pandas：apply、map 还是 transform？》中使用的示例代码。博客文章讨论了 Pandas 的…
- en: github.com](https://github.com/Polaris000/BlogCode/tree/main/PandasApply?source=post_page-----dd931659e9cf--------------------------------)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/Polaris000/BlogCode/tree/main/PandasApply?source=post_page-----dd931659e9cf--------------------------------)'
- en: Conclusion
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The flexibility that `**apply**`providesmakes it a very convenient choice in
    most scenarios, but as we saw, it's often more efficient to use something that’s
    been designed for what you need to accomplish. This post covers only part of `**apply**`
    ‘s story, and there’s so much more to this function. A future post will continue
    from here.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`**apply**` 提供的灵活性使它在大多数场景中非常方便选择，但正如我们所见，使用专门为实现你的需求设计的工具通常更为高效。本文仅覆盖了 `**apply**`
    部分内容，这个函数还有很多其他功能。未来的文章将从这里继续。'
- en: This post should have given you an idea of what’s possible with Pandas, and
    I hope this encourages you to make full use of its functionality.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章应该给你提供了有关 Pandas 的可能性的一个概念，我希望这能鼓励你充分利用它的功能。
