["```py\nghega-dataset\n    datasheets\n        central-zener-1\n        central-zener-2\n        diodes-zener\n            document-000-123542.blocks.csv\n            document-000-123542.groundtruth.csv\n            document-000-123542.in.000.png\n            document-000-123542.out.000.png\n            document-001-123663.blocks.csv\n            document-001-123663.groundtruth.csv\n            document-001-123663.in.000.png\n            document-001-123663.out.000.png\n            ...\n        mcc-zener\n        ...\n    patents\n        ...\n```", "```py\nCase,-1,0.0,0.0,0.0,0.0,,0,1.28,2.78,0.79,0.10,MELF CASE\nStorageTemperature,0,0.35,3.40,2.03,0.11,Operating and Storage Temperature,0,4.13,3.41,0.63,0.09,-65 to +200\n```", "```py\n 1\\. element type\n 2\\. page of the label block (-1 if absent)\n 3\\. x of the label block\n 4\\. y of the label block\n 5\\. w of the label block\n 6\\. h of the label block\n 7\\. text of the label block\n 8\\. page of the value block (never absent!)\n 9\\. x of the value block\n10\\. y of the value block\n11\\. w of the value block\n12\\. h of the value block\n13\\. text of the label block\n```", "```py\nKEY                   VALUE\nCase                  MELF CASE\nStorageTemperature    -65 to +200\n```", "```py\nelements_to_extract = ['FilingDate', 'RepresentiveFL', 'Classification', 'PublicationDate','ApplicationNumber','Model','Voltage','StorageTemperature']\n```", "```py\ndonut-dataset\n    document-000-123542.in.000.png\n    document-001-123663.in.000.png\n    ...\n    metadata.jsonl\n```", "```py\n{\"file_name\": \"document-010-100333.in.000.png\", \"ground_truth\": \"{\\\"gt_parse\\\": { \\\"DocType\\\": \\\"patent\\\", \\\"FilingDate\\\": \\\"06.12.1999\\\", \\\"RepresentiveFL\\\": \\\"Manresa Val, Manuel\\\", \\\"Classification\\\": \\\"A47l. 5/28\\\", \\\"PublicationDate\\\": \\\"1139845\\\", \\\"ApplicationNumber\\\": \\\"99959528 .3\\\" } }\"}\n```", "```py\njson_lines_train = ''\njson_lines_val = ''\n\nfor dirpath, dirnames, filenames in os.walk('/content/ghega-dataset/'):\n    for filename in filenames:\n        if filename.endswith('in.000.png'):\n          gt_filename = filename.replace('in.000.png','groundtruth.csv')\n          gt_filename_path = os.path.join(dirpath, gt_filename)\n          if not os.path.exists(gt_filename_path):    #ignore files in /ghega-dataset/datasheets/taiwan-switching/ because no groundtruth exists\n            continue\n          if os.path.getsize(gt_filename_path) == 0:  #ignore empty groundtruth files\n            print(f'skipped {gt_filename_path} because no info in metadata')\n            continue\n          doc_df = pd.read_csv(gt_filename_path, header=None)\n          #find the doctype, based on path\n          if 'patent' in dirpath:\n            type = 'patent'\n          else:\n            type = 'datasheet'\n          #create json line\n          #eg:\n          #{\"file_name\": \"document-034-127420.in.000.png\", \"ground_truth\": \"{\\\"gt_parse\\\": { \\\"DocType\\\": \\\"datasheet\\\", \\\"Model\\\": \\\"ZMM5221 B - ZMM5267B\\\", \\\"Voltage\\\": \\\"1.5\\\", \\\"StorageTemperature\\\": \\\"-65 to 175\\\" } }\"}\n          p2 = ''\n          #add always first element: DocType\n          p2 += '\\\\\"' + 'DocType' + '\\\\\": '\n          p2 += '\\\\\"' + type + '\\\\\"'\n          new_row = {'ImagePath': os.path.join(dirpath, filename), 'DocType' :type}\n          ghega_df = pd.concat([ghega_df, pd.DataFrame([new_row])], ignore_index=True)\n          #fill other elements if available\n          for element in elements_to_extract:\n            value = doc_df[doc_df[0] == element][12].tolist()\n            if len(value) > 0:\n              p2 += ', '\n              p2 += '\\\\\"' + element + '\\\\\": '\n              value = re.sub(r'[^A-Za-z0-9 ,.()/-]+', '', value[0])   #get rid of \\ of ” and \" in json\n              p2 += '\\\\\"' + value + '\\\\\"'\n              new_row = {'ImagePath': os.path.join(dirpath, filename), element :value}\n              ghega_df = pd.concat([ghega_df, pd.DataFrame([new_row])], ignore_index=True)\n\n          p3 = ' } }\"}'\n\n          json_line = p1 + p2 + p3\n          print(json_line)\n\n          #take ~20% to validation\n          #copy image file and append json line\n          if random.randint(1, 100) < 20:\n            output_path = '/content/dataset/validation/'\n            json_lines_val += json_line + '\\r\\n'\n            shutil.copy(os.path.join(dirpath, filename), '/content/dataset/validation/')  \n          else:\n            output_path = '/content/dataset/train/'\n            json_lines_train += json_line + '\\r\\n'\n            shutil.copy(os.path.join(dirpath, filename), '/content/dataset/train/')  \n\n#write jsonl files\ntext_file = open('/content/dataset/train/metadata.jsonl', \"w\")\ntext_file.write(json_lines_train)\ntext_file.close()\ntext_file = open('/content/dataset/validation/metadata.jsonl', \"w\")\ntext_file.write(json_lines_val)\ntext_file.close()\n```", "```py\ntrain_dataset = DonutDataset(\"/content/dataset\", max_length=max_length,\n                             split=\"train\", task_start_token=\"<s_cord-v2>\", prompt_end_token=\"<s_cord-v2>\",\n                             sort_json_key=False, # dataset is preprocessed, so no need for this\n                             )\n```", "```py\n---------------------------------------------------------------------------\nArrowInvalid                              Traceback (most recent call last)\n<ipython-input-13-7726ec2b0341> in <cell line: 7>()\n      5 processor.feature_extractor.do_align_long_axis = False\n      6 \n----> 7 train_dataset = DonutDataset(\"/content/dataset\", max_length=max_length,\n      8                              split=\"train\", task_start_token=\"<s_cord-v2>\", prompt_end_token=\"<s_cord-v2>\",\n      9                              sort_json_key=False, # cord dataset is preprocessed, so no need for this\n\nArrowInvalid: JSON parse error: Missing a comma or '}' after an object member. in row 7\n```", "```py\n{\n   \"file_name\":\"document-012-108498.in.000.png\",\n   \"ground_truth\":\"{\\\"gt_parse\\\": {\\\"DocType\\\": \\\"patent\\\"\\\"FilingDate\\\": \\\"15\\. Januar 2004 (15.01.2004)\\\",\\\"Classification\\\": \\\"BOZC 18/08,\\\",\\\"PublicationDate\\\": \\\"5\\. August 2004 (05.08.2004)\\\",\\\"ApplicationNumber\\\": \\\"PCT/AT2004/000006\\\"} }\"\n}\n```", "```py\nArrowInvalid: JSON parse error: Missing a comma or '}' after an object member. in row 17\n```", "```py\n{\"file_name\": \"document-007-103668.in.000.png\", \"ground_truth\": \"{\\\"gt_parse\\\": {\\\"DocType\\\": \\\"patent\\\",\\\"FilingDate\\\": \\\"18.12.2008\\\",\\\"RepresentiveFL\\\": \\\"Schubert, Siegmar\\\",\\\"Classification\\\": \\\"A47J 31/42 (2\"\"6·\"')\\\",\\\"PublicationDate\\\": \\\"12.08.2009\\\",\\\"ApplicationNumber\\\": \\\"08021980.1\\\"} }\"}\n```", "```py\n[^A-Za-z0-9 ,.()/-]+\n```"]