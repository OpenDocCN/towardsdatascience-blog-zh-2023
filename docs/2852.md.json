["```py\nfrom oauth2client.client import GoogleCredentials\n\nfrom google.colab import auth as google_auth\ngoogle_auth.authenticate_user()\n\nfrom google.colab import drive\ndrive.mount('/content/gdrive')\n```", "```py\nfrom pydrive.auth import GoogleAuth\nfrom pydrive.drive import GoogleDrive\n\ngauth = GoogleAuth()\ngauth.credentials = GoogleCredentials.get_application_default()\ndrive = GoogleDrive(gauth)\n```", "```py\n# Google API client:\nfrom googleapiclient.discovery import build\n\n# Initialize the Google Drive API client\ndrive_service = build('drive', 'v3')\n```", "```py\n# File handling testing:\n# There are in this example three folder levels:\n# /content/gdrive/MyDrive/__Shared/<your Project>/DataDevelopment\n\n# Update these to your structure:\nfolderList1 = [\"__Shared\", your_Project ,\"DataDevelopment\"] #, \"ExternalData\"]\n```", "```py\n# Trying to copy the created dummy file:\nboo_foundFolder = False\nfileID = \"root\"\nlevel = 0\n\n# View all folders and file in your Google Drive\n# First loop over the list:\nprint(\"File and Folder structure - check with IDs\")\nfor folderName in folderList1:\n  print(f\"Checking: {folderName}\")\n\n  if boo_foundFolder or fileID == \"root\": #first run\n    boo_foundFolder = False\n\n    fileList = drive.ListFile({'q': f\"'{fileID}' in parents and trashed=false\"}).GetList()\n    for file in fileList:\n      # Testing the name:      \n      if(file['title'] == folderName):\n        fileID = file['id']\n        boo_foundFolder = True\n\n        level += 1 \n      # end if\n    # end for\n\n    if boo_foundFolder == False:\n      print(f\"folder not found\")\n      break\n    # end if    \n  # end if\n# end for\n\nprint(f\"Did we find the folder: {boo_foundFolder}\")\nif boo_foundFolder:\n  print(fileID)\n  ShortCutID = fileID\nelse:\n  ShortCutID = 0\n```", "```py\ndef findTargetID(fileID, drive_service):\n  # The ID of the shared file you want to get ShortcutDetails from\n  file_id = fileID\n\n  try:\n      # Get the file details\n      file = drive_service.files().get(fileId=file_id, \n                                      fields=\"id, shortcutDetails\").execute()\n\n      # Check if the file is a shortcut\n      if 'shortcutDetails' in file:\n          shortcut_details = file['shortcutDetails']\n          print(\"Shortcut Details:\")\n          print(f\"Target ID: {shortcut_details['targetId']}\")\n          print(f\"Target MIME Type: {shortcut_details['targetMimeType']}\")\n      else:\n          print(\"The file is not a shortcut.\")\n      # end if\n\n  except Exception as e:\n      print(f\"An error occurred: {e}\")\n\n  return shortcut_details['targetId']\n\nif boo_foundFolder:\n  targetID = findTargetID(fileID, drive_service)\n  print(targetID)\nelse:\n  print(\"Folder not found\")\n# end if \n```", "```py\n# Create a test file:\nwith open('example.txt', 'w') as f:\n  f.write('This is an example file, to test CoLab file sharing')\n# this file is now sitting in the runtime space of the notebook \n# (see left plane, under files)\n```", "```py\nif boo_foundFolder:\n  print(\"folder found\")\n  folderID = targetID\n\n  file_on_drive = False\n  file_id = 0\n\n  # check if the file is on the drive:\n  fileList = drive.ListFile({'q': f\"'{folderID}' in parents and trashed=false\"}).GetList()\n  for file in fileList:\n    if(file['title'] == \"example.txt\"):\n      file_on_drive = True\n      fileID = file['id']\n    # end if\n  # end for\n\n  if file_on_drive:\n  #Overwrites the existing Google drive file.\"\"\"\n    file1 = drive.CreateFile({'id': fileID})\n    strFileHandling = \"Updated\"\n\n  else:\n    file1 = drive.CreateFile({\"mimeType\": \"text/csv\",\n                             \"parents\": [{\"kind\": \"drive#fileLink\", \n                                        \"id\": folderID}]})\n    strFileHandling = \"Created\"\n  # end if\n\n  # creating the binding to the file in the Run-Time environment:\n  file1.SetContentFile(\"example.txt\")\n\n  # copying the file to the Google Drive:\n  file1.Upload()\n\n  print(f'{strFileHandling} file %s with mimeType %s' % (file1['title'], file1['mimeType']))\n\nelse:\n  print(\"folder not found\")\n# end if\n```", "```py\n# Update these to your structure:\n# ... DataDevelopment/ExternalData/__CoLab_Notebook \n\n# Setting the Working Folder:\nfolderList2 = [\"ExternalData\", \"NewDataFolder\"]\n```", "```py\nprint(\"File and Folder structure - check with TARGET IDs\")\nboo_foundFolder = False\nfileID = targetID\n\nfor folderName in folderList2:\n  print(f\"Checking: {folderName}\")\n```", "```py\ndef create_folder_in_folder(folder_name,parent_folder_id, drive_service):\n\n    file_metadata = {\n    'name' : folder_name,\n    'parents' : [parent_folder_id],\n    'mimeType' : 'application/vnd.google-apps.folder'\n    }\n\n    file = drive_service.files().create(body=file_metadata, supportsAllDrives=True, \n                                  fields='id').execute()\n\n    print ('Folder ID: %s' % file.get('id')) \n```", "```py\nif WorkingFolderID == 0: \n  # fileID is the parent ID from the previous search\n  create_folder_in_folder(\"NewDataFolder\", fileID, drive_service)\n```"]