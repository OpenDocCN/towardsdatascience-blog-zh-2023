- en: 'Similarity Search, Part 5: Locality Sensitive Hashing (LSH)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相似性搜索，第 5 部分：局部敏感哈希（LSH）
- en: 原文：[https://towardsdatascience.com/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=collection_archive---------0-----------------------#2023-06-24](https://towardsdatascience.com/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=collection_archive---------0-----------------------#2023-06-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=collection_archive---------0-----------------------#2023-06-24](https://towardsdatascience.com/similarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203?source=collection_archive---------0-----------------------#2023-06-24)
- en: Explore how similarity information can be incorporated into hash function
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索如何将相似性信息融入哈希函数
- en: '[](https://medium.com/@slavahead?source=post_page-----76ae4b388203--------------------------------)[![Vyacheslav
    Efimov](../Images/db4b02e75d257063e8e9d3f1f75d9d6d.png)](https://medium.com/@slavahead?source=post_page-----76ae4b388203--------------------------------)[](https://towardsdatascience.com/?source=post_page-----76ae4b388203--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----76ae4b388203--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page-----76ae4b388203--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@slavahead?source=post_page-----76ae4b388203--------------------------------)[![Vyacheslav
    Efimov](../Images/db4b02e75d257063e8e9d3f1f75d9d6d.png)](https://medium.com/@slavahead?source=post_page-----76ae4b388203--------------------------------)[](https://towardsdatascience.com/?source=post_page-----76ae4b388203--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----76ae4b388203--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page-----76ae4b388203--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc8a0ca9d85d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=post_page-c8a0ca9d85d8----76ae4b388203---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----76ae4b388203--------------------------------)
    ·10 min read·Jun 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F76ae4b388203&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=-----76ae4b388203---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc8a0ca9d85d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=post_page-c8a0ca9d85d8----76ae4b388203---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----76ae4b388203--------------------------------)
    ·10 分钟阅读·2023年6月24日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F76ae4b388203&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=-----76ae4b388203---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F76ae4b388203&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203&source=-----76ae4b388203---------------------bookmark_footer-----------)![](../Images/289a1eda8d45e7ae91026abd2a352a58.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F76ae4b388203&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsimilarity-search-part-5-locality-sensitive-hashing-lsh-76ae4b388203&source=-----76ae4b388203---------------------bookmark_footer-----------)![](../Images/289a1eda8d45e7ae91026abd2a352a58.png)'
- en: S**imilarity search** is a problem where given a query the goal is to find the
    most similar documents to it among all the database documents.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**相似性搜索** 是一个问题，给定一个查询的目标是在所有数据库文档中找到与其最相似的文档。'
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In data science, similarity search often appears in the NLP domain, search engines
    or recommender systems where the most relevant documents or items need to be retrieved
    for a query. There exists a large variety of different ways to improve search
    performance in massive volumes of data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学中，相似性搜索通常出现在自然语言处理（NLP）领域、搜索引擎或推荐系统中，其中需要为一个查询检索到最相关的文档或项目。存在多种不同的方法来提升在海量数据中的搜索性能。
- en: In previous parts of this article series, we discussed inverted file index,
    product quantization and HNSW and how they can be used together to improve search
    quality. In this chapter, we are going to look at a principally different approach
    that maintains both high search speed and quality.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本系列文章的前几部分中，我们讨论了倒排文件索引、产品量化和 HNSW 以及它们如何结合使用以提高搜索质量。在本章中，我们将探讨一种主要不同的方法，这种方法既能保持高搜索速度，又能保证高质量。
- en: '[](/similarity-search-blending-inverted-file-index-and-product-quantization-a8e508c765fa?source=post_page-----76ae4b388203--------------------------------)
    [## Similarity Search, Part 3: Blending Inverted File Index and Product Quantization'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/similarity-search-blending-inverted-file-index-and-product-quantization-a8e508c765fa?source=post_page-----76ae4b388203--------------------------------)
    [## 相似性搜索，第 3 部分：融合倒排文件索引和产品量化'
- en: 'In the first two parts of this series we have discussed two fundamental algorithms
    in information retrieval: inverted…'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在本系列的前两部分中，我们讨论了信息检索中的两个基本算法：倒排…
- en: 'towardsdatascience.com](/similarity-search-blending-inverted-file-index-and-product-quantization-a8e508c765fa?source=post_page-----76ae4b388203--------------------------------)
    [](/similarity-search-part-4-hierarchical-navigable-small-world-hnsw-2aad4fe87d37?source=post_page-----76ae4b388203--------------------------------)
    [## Similarity Search, Part 4: Hierarchical Navigable Small World (HNSW)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/similarity-search-blending-inverted-file-index-and-product-quantization-a8e508c765fa?source=post_page-----76ae4b388203--------------------------------)
    [](/similarity-search-part-4-hierarchical-navigable-small-world-hnsw-2aad4fe87d37?source=post_page-----76ae4b388203--------------------------------)
    [## 相似性搜索，第 4 部分：分层可导航小世界（HNSW）
- en: Hierarchical Navigable Small World (HNSW) is a state-of-the-art algorithm used
    for an approximate search of nearest…
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分层可导航小世界（HNSW）是一种最先进的算法，用于近似搜索最近的…
- en: towardsdatascience.com](/similarity-search-part-4-hierarchical-navigable-small-world-hnsw-2aad4fe87d37?source=post_page-----76ae4b388203--------------------------------)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/similarity-search-part-4-hierarchical-navigable-small-world-hnsw-2aad4fe87d37?source=post_page-----76ae4b388203--------------------------------)
- en: '**Local Sensitive Hashing** (LSH) is a set of methods that is used to reduce
    the search scope by transforming data vectors into hash values while preserving
    information about their similarity.'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**局部敏感哈希**（LSH）是一组方法，用于通过将数据向量转换为哈希值来缩小搜索范围，同时保留有关其相似性的信息。'
- en: 'We are going to discuss the traditional approach which consists of three steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论传统方法，该方法包括三个步骤：
- en: '**Shingling**: encoding original texts into vectors.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**切片**：将原始文本编码成向量。'
- en: '**MinHashing**: transforming vectors into a special representation called **signature**
    which can be used to compare similarity between them.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MinHashing**：将向量转换为一种称为 **签名** 的特殊表示形式，这种表示形式可以用于比较它们之间的相似性。'
- en: '**LSH function**: hashing signature blocks into different buckets. If the signatures
    of a pair of vectors fall into the same bucket at least once, they are considered
    candidates.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LSH 函数**：将签名块哈希到不同的桶中。如果一对向量的签名至少有一次落入同一个桶中，则它们被视为候选。'
- en: We are going to gradually dive into the details throughout the article of each
    of these steps.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步深入探讨这些步骤的细节。
- en: Shingling
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片
- en: '**Shingling** is the process of collecting *k*-grams on given texts. ***k*-gram**
    is a group of *k* sequential tokens. Depending on the context, tokens can be words
    or symbols. The ultimate goal of shingling is by using collected *k*-grams to
    encode each document. We will be using one-hot encoding for this. Nevertheless,
    other encoding methods can also be applied.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**切片**是从给定文本中收集 *k*-grams 的过程。***k*-gram** 是一组 *k* 个顺序排列的标记。根据上下文，标记可以是单词或符号。切片的最终目标是通过使用收集到的
    *k*-grams 来编码每个文档。我们将使用独热编码来完成这一点。然而，也可以应用其他编码方法。'
- en: '![](../Images/d0990f5343f36b851abde18bcf4e6153.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d0990f5343f36b851abde18bcf4e6153.png)'
- en: Collecting unique shingles of length k = 3 for the sentence “learning data science
    is fascinating”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 收集句子“学习数据科学很有趣”的长度为 k = 3 的唯一切片
- en: 'Firstly, unique *k*-grams for each document are collected. Secondly, to encode
    each document, a vocabulary is needed which represents a set of unique *k*-grams
    in all documents. Then for each document, a vector of zeros with the length equal
    to the size of the vocabulary is created. For every appearing k-gram in the document,
    its position in the vocabulary is identified and a *“1”* is placed at the respective
    position of the document vector. Even if the same *k*-gram appears several times
    in a document, it does not matter: the value in the vector will always be 1.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，收集每个文档的独特*k*-gram。其次，为了对每个文档进行编码，需要一个词汇表，它代表了所有文档中独特*k*-gram的集合。然后，为每个文档创建一个长度等于词汇表大小的零向量。对于文档中出现的每个*k*-gram，确定其在词汇表中的位置，并在文档向量的相应位置放置一个*“1”*。即使相同的*k*-gram在文档中出现多次也没关系：向量中的值始终为1。
- en: '![](../Images/71cf4e0bd2b459e5107114915698f7e2.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71cf4e0bd2b459e5107114915698f7e2.png)'
- en: One-hot encoding
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一热编码
- en: MinHashing
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MinHashing
- en: At this stage, initial texts have been vectorised. The similarity of vectors
    can be compared via **Jaccard index**. Remember that Jaccard index of two sets
    is defined as the number of common elements in both sets divided by the length
    of all the elements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，初始文本已经被向量化。可以通过**Jaccard指数**比较向量的相似性。记住，Jaccard指数定义为两个集合中共同元素的数量除以所有元素的总长度。
- en: '![](../Images/1daabf1176bcb6558c6a0cfec89a0837.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1daabf1176bcb6558c6a0cfec89a0837.png)'
- en: Jaccard Index is defined as the intersection over the union of two sets
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Jaccard指数定义为两个集合的交集与并集之比
- en: If a pair of encoded vectors is taken, the intersection in the formula for Jaccard
    index is the number of rows that both contain 1 (i.e. *k*-gram appears in both
    vectors) and the union is the number of rows with at least one 1 (*k*-gram is
    presented at least in one of the vectors).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果取一对编码向量，则Jaccard指数公式中的交集是两个都包含1的行数（即*k*-gram在两个向量中都出现），并且并集是至少包含一个1的行数（*k*-gram至少在一个向量中出现）。
- en: '![](../Images/b0f5d84aa438349bb1ba843445dac2f1.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0f5d84aa438349bb1ba843445dac2f1.png)'
- en: Formula for Jaccard Index of two vectors
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Jaccard指数公式
- en: '![](../Images/da323105868b199bccef5821f908cebb.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da323105868b199bccef5821f908cebb.png)'
- en: Example of calculating Jaccard Index for two vectors using the formula above
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述公式计算两个向量的Jaccard指数的示例
- en: The current problem right now is the sparsity of encoded vectors. Computing
    a similarity score between two one-hot encoded vectors would take a lot of time.
    Transforming them to a dense format would make it more efficient to operate on
    them later. Ultimately, the goal is to design such a function that will transform
    these vectors to a smaller dimension preserving the information about their similarity.
    The method that constructs such a function is called MinHashing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的问题是编码向量的稀疏性。计算两个一热编码向量之间的相似性得分将耗费大量时间。将它们转换为稠密格式可以使后续操作更高效。最终目标是设计一个将这些向量转换为较小维度的函数，同时保留它们的相似性信息。构建这样的函数的方法称为MinHashing。
- en: '**MinHashing** is a hash function that permutes the components of an input
    vector and then returns the first index where the permutated vector component
    equals 1.'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**MinHashing** 是一种哈希函数，它对输入向量的组件进行排列，然后返回排列向量组件等于1的第一个索引。'
- en: '![](../Images/744e291f536af26caf15a465719aa5db.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/744e291f536af26caf15a465719aa5db.png)'
- en: Example of calculating a minhash value for a given vector and permutation
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 计算给定向量和排列的minhash值的示例
- en: For getting a dense representation of a vector consisting of *n* numbers, *n*
    minhash functions can be used to obtain *n* minhash values which form a **signature**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得由*n*个数字组成的向量的稠密表示，可以使用*n*个minhash函数来获得*n*个minhash值，这些值构成一个**签名**。
- en: It may not sound obvious at first but several minhash values can be used to
    approximate Jaccard similarity between vectors. In fact, the more minhash values
    are used, the more accurate the approximation is.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始可能不太明显，但可以使用多个minhash值来近似向量之间的Jaccard相似性。实际上，使用的minhash值越多，近似值就越准确。
- en: '![](../Images/d860b85779412a1381800621227139b8.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d860b85779412a1381800621227139b8.png)'
- en: Calculation of signature matrix and how it is used to compute similarities between
    vectors. Similarities computed using Jaccard similarity and signatures should
    normally be approximately equal.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 计算签名矩阵及其如何用于计算向量之间的相似性。使用Jaccard相似性和签名计算的相似性应该通常大致相等。
- en: This is just a useful observation. It turns out that there is a whole theorem
    behind the scenes. Let us understand why Jaccard index can be calculated by using
    signatures.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个有用的观察。事实证明，背后有一个完整的定理。让我们来了解为什么Jaccard指数可以通过使用签名来计算。
- en: Statement proof
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陈述证明
- en: Let us assume that a given pair of vectors contains only rows of type *01*,
    *10* and *11*. Then a random permutation on these vectors is performed. Since
    there exists at least one 1 in all the rows, then while computing both hash values,
    at least one of these two hash-value computation processes will stop at the first
    row of a vector with the corresponding hash value equal to 1.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设给定的一对向量仅包含*01*、*10*和*11*类型的行。然后对这些向量进行随机排列。由于所有行中至少存在一个1，因此在计算两个哈希值时，这两个哈希值计算过程中的至少一个会在具有对应哈希值为1的向量的第一行停止。
- en: '![](../Images/abd9dc76476a994d4dbe34ba2e0f4ba6.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/abd9dc76476a994d4dbe34ba2e0f4ba6.png)'
- en: 'What is the probability that the second hash value will be equal to the first
    one? Obviously, this will only happen if the second hash value is also equal to
    1\. This means that the first row has to be of type *11*. Since the permutation
    was taken randomly, the probability of such an event is equal to *P* *=* *count(11)
    / (count(01) + count(10) + count(11)*). This expression is absolutely the same
    as the Jaccard index formula. Therefore:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个哈希值等于第一个的概率是多少？显然，只有当第二个哈希值也等于1时才会发生。这意味着第一行必须是*11*类型。由于排列是随机的，这种事件的概率等于*P*
    *=* *count(11) / (count(01) + count(10) + count(11)*)。这个表达式与Jaccard指数公式完全相同。因此：
- en: '**The probability of getting equal hash values for two binary vectors based
    on a random rows permutation equals the Jaccard index**.'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**基于随机行排列，两个二进制向量获得相同哈希值的概率等于Jaccard指数**。'
- en: However, by proving the statement above, we assumed that initial vectors did
    not contain rows of type *00*. It is clear that rows of type *00* do not change
    the value of Jaccard index. Similarly, the probability of getting the same hash
    values with rows of type *00* included does not affect it. For example, if the
    first permutated row is 00, then minhash algorithm just ignores it and switches
    to the next row until there exists at least one 1 in a row. **Of course, rows
    of type 00 can result in different hash values than without them but the probability
    of getting the same hash values stays the same**.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过证明上述陈述，我们假设初始向量不包含*00*类型的行。显然，*00*类型的行不会改变Jaccard指数的值。同样，包含*00*类型行时获得相同哈希值的概率不会影响它。例如，如果第一个排列行是00，则minhash算法只是忽略它，转到下一行，直到找到至少一个1。**当然，*00*类型的行可能导致不同的哈希值，但获得相同哈希值的概率保持不变**。
- en: '![](../Images/eb569ca7d34d084d62e1cfbb7260c0cc.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb569ca7d34d084d62e1cfbb7260c0cc.png)'
- en: 'We have proven an important statement. But how the probability of getting the
    same minhash values can be estimated? Definitely, it is possible to generate all
    possible permutations for vectors and then calculate all minhash values to find
    the desired probability. For obvious reasons, this is not efficient because the
    number of possible permutations for a vector of size *n* equals *n!*. Nevertheless,
    the probability can be evaluated approximately: let us just use many hash functions
    to generate that many hash values.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经证明了一个重要的陈述。但是，如何估计获得相同的minhash值的概率呢？当然，可以生成所有可能的向量排列，然后计算所有的minhash值以找到所需的概率。出于显而易见的原因，这种方法效率不高，因为一个大小为*n*的向量的可能排列数等于*n!*。不过，概率可以大致评估：我们可以使用很多哈希函数来生成大量的哈希值。
- en: The Jaccard index of two binary vectors approximately equals the number of corresponding
    values in their signatures.
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 两个二进制向量的Jaccard指数大致等于它们签名中对应值的数量。
- en: '![](../Images/94b03e84760881f1b83a2a2cb248d41b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94b03e84760881f1b83a2a2cb248d41b.png)'
- en: Mathematical notation
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数学符号
- en: It is easy to notice that taking longer signatures results in more accurate
    calculations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易注意到，采用更长的签名会导致更准确的计算。
- en: LSH Function
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LSH函数
- en: At the current moment, we can transform raw texts into dense signatures of equal
    length preserving the information about similarity. Nevertheless, in practice,
    such dense signatures still usually have high dimensions and it would be inefficient
    to directly compare them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以将原始文本转换为长度相等的密集签名，从而保留关于相似性的的信息。然而，在实践中，这些密集签名通常仍具有高维度，直接比较它们效率不高。
- en: Consider *n = 10⁶* documents with their signatures of length 100\. Assuming
    that a single number of a signature requires 4 bytes to store, then the whole
    signature would require 400 bytes. For storing *n = 10⁶* documents, 400 MB of
    space is needed which is doable in reality. But comparing each document with each
    other in a brute-force manner would require approximately 5 * 10¹¹ comparisons
    which is too much, especially when *n* is even larger.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到*n = 10⁶* 个文档，每个文档的签名长度为100\. 假设一个签名的单个数字需要4字节来存储，那么整个签名将需要400字节。存储*n = 10⁶*
    个文档需要400 MB的空间，这在现实中是可行的。但以蛮力方式比较每个文档需要大约5 * 10¹¹次比较，这太多了，尤其是当*n* 更大的时候。
- en: '![](../Images/af85fbd51bc48322ff806c2139b5cbc9.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/af85fbd51bc48322ff806c2139b5cbc9.png)'
- en: To avoid the problem, it is possible to build a hash table to accelerate search
    performance but even if two signatures are very similar and differ only in 1 position,
    they are still likely to have a different hash (because vector remainders are
    likely to be different). However, we normally want them to fall into the same
    bucket. This is where LSH comes to the rescue.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，可以建立一个哈希表来加速搜索性能，但即使两个签名非常相似，仅在1个位置上有所不同，它们仍可能具有不同的哈希值（因为向量的余数可能不同）。然而，我们通常希望它们落入同一个桶中。这就是LSH派上用场的地方。
- en: '**LSH** mechanism builds a hash table consisting of several parts which puts
    a pair of signatures into the same bucket if they have at least one corresponding
    part.'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**LSH**机制构建一个哈希表，该表由几个部分组成，如果一对签名有至少一个对应的部分，它们就会被放入同一个桶中。'
- en: LSH takes a signature matrix and horizontally divides it into equal *b* parts
    called **bands** each containing *r* **rows**. Instead of plugging the whole signature
    into a single hash function, the signature is divided by *b* parts and each subsignature
    is processed independently by a hash function. As a consequence, each of the subsignatures
    falls into separate buckets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: LSH将签名矩阵水平分成相等的*b*部分，称为**带**，每部分包含*r* **行**。而不是将整个签名插入到一个哈希函数中，签名被分成*b*部分，每个子签名由一个哈希函数独立处理。因此，每个子签名落入不同的桶中。
- en: '![](../Images/9e9886e53b30a010a0ebc5ce9cca2064.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9e9886e53b30a010a0ebc5ce9cca2064.png)'
- en: Example of using LSH. Two signatures of length 9 are divided into b = 3 bands
    each containing r = 3 rows. Each subvector is hashed into one of k possible buckets.
    Since there is a match in the second band (both subvectors have the same hash
    value), we consider a pair of these signatures as candidates to be the nearest
    neighbours.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: LSH的示例。两个长度为9的签名被分成b = 3个带，每个带包含r = 3行。每个子向量被哈希到k个可能的桶之一。由于第二个带中存在匹配（两个子向量具有相同的哈希值），我们将这两个签名对视为最近邻候选。
- en: 'If there is at least one collision between corresponding subvectors of two
    different signatures, the signatures are considered candidates. As we can see,
    this condition is more flexible since for considering vectors as candidates they
    do not need to be absolutely equal. Nevertheless, this increases the number of
    false positives: a pair of different signatures can have a single corresponding
    part but in overall be completely different. Depending on the problem, it is always
    better to optimize parameters *b*, *r* and *k*.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个不同签名的对应子向量之间至少有一个碰撞，那么这些签名被视为候选。如我们所见，这个条件更灵活，因为考虑向量作为候选者时，它们不需要完全相等。然而，这增加了假阳性的数量：一对不同的签名可能只有一个对应的部分，但总体上完全不同。根据问题的不同，优化参数*b*、*r*
    和 *k* 总是更好的。
- en: Error rate
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误率
- en: With LSH, it is possible to estimate the probability that two signatures with
    similarity *s* will be considered as candidates given a number of bands *b* and
    number of rows *r* in each band. Let us find the formula for it in several steps.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LSH，可以估计两个具有相似度*s*的签名被视为候选的概率，给定带数*b*和每个带中的行数*r*。让我们分几个步骤找到它的公式。
- en: '![](../Images/678d05e38dbf53cb986924f1f52f9421.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/678d05e38dbf53cb986924f1f52f9421.png)'
- en: The probability that one random row of both signatures is equal
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 两个签名的任意一行相等的概率
- en: '![](../Images/fa839556f946d35b8c3b9cbc6b657005.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa839556f946d35b8c3b9cbc6b657005.png)'
- en: The probability that one random band with r rows is equal
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一随机带有r行的概率相等
- en: '![](../Images/c45d5d3f4d51c4dc7b1a3205f3b0f4c5.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c45d5d3f4d51c4dc7b1a3205f3b0f4c5.png)'
- en: The probability that one random band with r rows is different
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一随机带有r行的概率不同
- en: '![](../Images/275071ff06ef57a7ac66c254db85b3b6.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/275071ff06ef57a7ac66c254db85b3b6.png)'
- en: The probability that all b bands in the table are different
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 表中所有 b 个带不同的概率
- en: '![](../Images/4d08da9c4da020b016591cebec1a101f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d08da9c4da020b016591cebec1a101f.png)'
- en: The probability that at least one of b bands is equal, so two signatures are
    candidates
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有一个 b 带相等的概率，即两个签名是候选的
- en: Note that the formula does not take into consideration collisions when different
    subvectors accidentally hash into the same bucket. Because of this, the real probability
    of signatures being the candidates might insignificantly differ.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，公式没有考虑当不同的子向量意外地哈希到同一个桶中时的碰撞。因此，签名成为候选的真实概率可能会略有不同。
- en: Example
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: 'For getting a better sense of the formula we have just obtained, let us consider
    a simple example. Consider two signatures with the length of 35 symbols which
    are equally split into 5 bands with 7 rows each. Here is the table which represents
    the probability of having at least one equal band based on their Jaccard similarity:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解我们刚刚得到的公式，我们考虑一个简单的例子。考虑两个长度为 35 符号的签名，它们被平均分成 5 个带，每个带有 7 行。以下表格表示了基于
    Jaccard 相似度至少有一个相等带的概率：
- en: '![](../Images/d67b087e23e209ebf0e722cad2fb88d9.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d67b087e23e209ebf0e722cad2fb88d9.png)'
- en: Probability P of getting at least one corresponding band of two signatures based
    on their similarity s
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 基于相似度 *s*，至少获得一对签名具有对应带的概率 P
- en: We notice that if two similar signatures have the Jaccard similarity of 80%,
    then they have a corresponding band in 93.8% of cases (*true positives*). In the
    rest 6.2% of scenarios such a pair of signatures is *false negative*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，如果两个相似的签名具有 80% 的 Jaccard 相似度，那么在 93.8% 的情况下它们有一个对应带（*true positives*）。在剩余的
    6.2% 情况下，这样的一对签名是 *false negative*。
- en: Now let us take two different signatures. For instance, they are similar only
    by 20%. Therefore, they are *false positive* candidates in 0.224% of cases. In
    other 99.776% of cases, they do not have a similar band, so they are *true negatives*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑两个不同的签名。例如，它们的相似度只有 20%。因此，在 0.224% 的情况下，它们是 *false positive* 候选。在其他
    99.776% 的情况下，它们没有相似的带，所以它们是 *true negatives*。
- en: Visualisation
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化
- en: 'Let us now visualise the connection between similarity *s* and probability
    *P* of two signatures becoming candidates. Normally with higher signature similarity
    *s,* signatures should have a higher probability of being candidates. Ideally,
    it would look like below:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们可视化相似度 *s* 和两个签名成为候选的概率 *P* 之间的关系。通常，随着签名相似度 *s* 的提高，签名成为候选的概率应当更高。理想情况下，情况如下：
- en: '![](../Images/61d84dbb359897a596bc2e2c151be4a4.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61d84dbb359897a596bc2e2c151be4a4.png)'
- en: Ideal scenario. A pair of signatures is considered candidates only if their
    similarity is greater than a certain threshold t
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的场景。只有当签名的相似度大于某个阈值 t 时，才认为一对签名是候选的
- en: 'Based on the probability formula obtained above, a typical line would look
    like in the figure below:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 基于上述获得的概率公式，典型的线如下图所示：
- en: '![](../Images/f083273e82d9968c58e6e6112c5feaa5.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f083273e82d9968c58e6e6112c5feaa5.png)'
- en: A typical line that slowly increases in the beginning and at the end and has
    a steep slope at a threshold t given by the approximate probability formula in
    the figure
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一条典型的线在开始和结束时缓慢上升，并在图中所示的近似概率公式的阈值 t 处有一个陡峭的斜率
- en: It is possible to vary the number of bands *b* to shift the line in the figure
    to the left or to the right. Increasing *b* moves the line to the left and results
    in more *FP*, decreasing — shifts it to the right and leads to more *FN*. It is
    important to find a good balance, depending on the problem.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过改变带的数量*b*，将图中的线向左或向右移动。增加 *b* 将线向左移动，并导致更多的 *FP*，减少则将其向右移动，导致更多的 *FN*。根据问题找到一个好的平衡点是很重要的。
- en: '![](../Images/26ba308613fe1d7962ff5cf150d720bb.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26ba308613fe1d7962ff5cf150d720bb.png)'
- en: With a higher number of bands the line moves to the left, with lower — to the
    right
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 带的数量增加，线会向左移动；减少则向右移动
- en: '![](../Images/50389f257435649c54cdb03220b3b7e1.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/50389f257435649c54cdb03220b3b7e1.png)'
- en: Moving the threshold to the left increases FP while shifting it to the right
    increases FN
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将阈值向左移动会增加 FP，而向右移动则增加 FN
- en: Experimentations with different numbers of bands and rows
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采用不同数量的带和行进行实验
- en: Several line plots are built below for different values of *b* and *r*. It is
    always better to adjust these parameters based on the specific task to successfully
    retrieve all pairs of similar documents and ignore those with different signatures.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为不同值的*b*和*r*构建的几条线图。根据具体任务调整这些参数通常更为有效，以成功检索所有相似文档对，并忽略那些具有不同签名的文档。
- en: '![](../Images/18cfbe49b97c06a824dc6239275815c1.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18cfbe49b97c06a824dc6239275815c1.png)'
- en: Adjusting number of bands
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 调整带的数量
- en: '![](../Images/6a2758547c42e35d87d9c25a13cc5de3.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a2758547c42e35d87d9c25a13cc5de3.png)'
- en: Adjusting number of rows
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 调整行数
- en: Conclusion
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have walked through a classical implementation of the LSH method. LSH significantly
    optimizes search speed by using lower dimensional signature representations and
    a fast hashing mechanism to reduce the candidates’ search scope. At the same time,
    this comes at the cost of search accuracy but in practice, the difference is usually
    insignificant.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讲解了LSH方法的经典实现。LSH通过使用低维签名表示和快速哈希机制来优化搜索速度，从而减少候选项的搜索范围。同时，这也会影响搜索的准确性，但在实践中，差异通常微不足道。
- en: 'However, LSH is vulnerable to high dimensional data: more dimensions require
    longer signature lengths and more computations to maintain a good search quality.
    In such cases, it is recommended to use another index.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，LSH对高维数据比较敏感：更多维度需要更长的签名长度和更多计算来保持良好的搜索质量。在这种情况下，建议使用其他索引。
- en: In fact, there exist different implementations of LSH, but all of them are based
    on the same paradigm of *transforming input vectors to hash values while preserving
    information about their similarity*. Basically, other algorithms simply define
    other ways of obtaining these hash values.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，存在不同的LSH实现，但所有这些实现都基于*将输入向量转换为哈希值的相同范式，同时保留关于它们相似性的信息*。基本上，其他算法只是定义了获得这些哈希值的不同方式。
- en: '**Random projections** is another LSH method that will be covered in the next
    chapter and which is implemented as an LSH index in the [Faiss](https://github.com/facebookresearch/faiss)
    library for similarity search.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**随机投影**是另一种LSH方法，将在下一章中介绍，并且在[Faiss](https://github.com/facebookresearch/faiss)库中实现为LSH索引，用于相似性搜索。'
- en: Resources
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '[Locality Sensitive Hashing | Andrew Wylie | December 2, 2013](https://cse.iitkgp.ac.in/~animeshm/algoml/lsh.pdf)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[局部敏感哈希 | 安德鲁·怀利 | 2013年12月2日](https://cse.iitkgp.ac.in/~animeshm/algoml/lsh.pdf)'
- en: '[Data Mining | Locality Sensitive Hashing | University of Szeged](https://www.inf.u-szeged.hu/~berendg/docs/dm/DM_lsh_en_pf.pdf)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据挖掘 | 局部敏感哈希 | 塞格德大学](https://www.inf.u-szeged.hu/~berendg/docs/dm/DM_lsh_en_pf.pdf)'
- en: '[Faiss repository](https://github.com/facebookresearch/faiss)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Faiss库](https://github.com/facebookresearch/faiss)'
- en: '*All images unless otherwise noted are by the author.*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图像除非另有说明，均由作者提供。*'
