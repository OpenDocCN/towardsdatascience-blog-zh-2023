["```py\nimport os \nos.environ[\"OPENAI_API_KEY\"] = \"COPY AND PASTE YOUR API KEY HERE\"\n```", "```py\n# load document\nfrom langchain.document_loaders import PyPDFLoader\nloader = PyPDFLoader(\"materials/example.pdf\")\ndocuments = loader.load()\n```", "```py\n### For multiple documents \nloaders = [....]\ndocuments = []\nfor loader in loaders:\n    documents.extend(loader.load())\n```", "```py\nfrom langchain.chains import RetrievalQA\nfrom langchain.indexes import VectorstoreIndexCreator\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores import Chroma\n\n# split the documents into chunks\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_documents(documents)\n# select which embeddings we want to use\nembeddings = OpenAIEmbeddings()\n# create the vectorestore to use as the index\ndb = Chroma.from_documents(texts, embeddings)\n# expose this index in a retriever interface\nretriever = db.as_retriever(search_type=\"similarity\", search_kwargs={\"k\":2})\n# create a chain to answer questions \nqa = RetrievalQA.from_chain_type(\n    llm=OpenAI(), chain_type=\"stuff\", retriever=retriever, return_source_documents=True)\nquery = \"How many AI publications in 2021?\"\nresult = qa({\"query\": query})\n```"]