["```py\ndef temp_anomaly_plot(projection, projection_name):\n\n    fig = plt.figure(figsize = (12, 6))\n\n    #Add an axes to the current figure and make it the current axes.\n    ax = plt.axes(projection = projection)\n\n    #make the map global rather than having it zoom in to extent of the plotted data\n    ax.set_global()\n\n    ax.gridlines(linestyle = \"--\", color = \"black\")\n\n    #Set contour levels, then draw the plot and a colorbar\n    clevs = np.arange(-5, 6)\n    cmap = \"coolwarm\"\n\n    #Plot filled contours\n    plt.contourf(lons, lats, \n                 temp_anomaly,\n                 clevs,\n                 transform = ccrs.PlateCarree(),\n                 cmap = cmap,\n                 extend = \"both\" #To add arrows on both ends of the colorbar\n                )\n\n    #Add coastlines after filling contours\n    ax.coastlines(resolution = \"110m\", lw = 1)\n\n    plt.title(f\"April 2023 L-OTI (°C) vs 1951-1980 mean\\n Projection: {projection_name}\")\n\n    cb = plt.colorbar(ax = ax,\n                      orientation = \"horizontal\",\n                      pad = 0.02,\n                      aspect = 20,  #ratio of long to short dimension\n                      shrink = 0.5, #Fraction by which to multiply the size of the colorbar\n                      ticks = clevs #To get the ticks same as clevs -5 to 5 degree Celsius in colorbar\n                     )\n\n    cb.set_label(\"°C\", size = 12, rotation = 0, labelpad = 15)\n    cb.ax.tick_params(labelsize = 10)\n    plt.savefig(f\"../output/temp_anomaly_{projection_name}.jpeg\",\n               dpi = 300)\n\n    plt.show()\n```", "```py\nclevs = np.arange(-5, 6)\ncmap = “coolwarm”\nprojection = ccrs.PlateCarree()\n\n# Use subplot_kw to declare the projection\nfig, axs = plt.subplots(2, 2, figsize = (24, 7), subplot_kw = {\"projection\": projection},\n #gridspec_kw = {'wspace':0.01, 'hspace':0.3}\n )\nplt.subplots_adjust(left = 0.2, right = 0.8, top = 0.9, bottom = -0.25)\n\nfig.suptitle(title, x = 0.5, y = 1, fontsize = 20, fontweight = \"bold\")\n\ncf1 = axs[0, 0].contourf(winter_lons, winter_lats, \n winter_temp_anomaly,\n clevs,\n #transform = ccrs.PlateCarree(),\n cmap = cmap,\n extend = \"both\"\n )\n\naxs[0, 0].set_title(f'Winter 2022: +{winter_temp_anomaly_mean} °C', fontsize = 20)\naxs[0, 0].coastlines()\naxs[0, 0].gridlines(draw_labels=True)\naxs[0, 0].set_aspect('equal', adjustable=None)\n\ncf2 = axs[0, 1].contourf(spring_lons, spring_lats, \n spring_temp_anomaly,\n clevs,\n #transform = ccrs.PlateCarree(),\n cmap = cmap,\n extend = \"both\"\n )\naxs[0, 1].set_title(f'Spring 2022: +{spring_temp_anomaly_mean} °C', fontsize = 20)\naxs[0, 1].coastlines()\naxs[0, 1].gridlines(draw_labels=True)\naxs[0, 1].set_aspect('equal', adjustable=None)\n\ncf3 = axs[1, 0].contourf(summer_lons, summer_lats, \n summer_temp_anomaly,\n clevs,\n #transform = ccrs.PlateCarree(),\n cmap = cmap,\n extend = \"both\"\n )\naxs[1, 0].set_title(f'Summer 2022: +{summer_temp_anomaly_mean} °C', fontsize = 20)\naxs[1, 0].coastlines()\naxs[1, 0].gridlines(draw_labels=True)\naxs[1, 0].set_aspect('equal', adjustable=None)\n\ncf4 = axs[1, 1].contourf(autumn_lons, autumn_lats, \n autumn_temp_anomaly,\n clevs,\n #transform = ccrs.PlateCarree(),\n cmap = cmap,\n\n #To add arrows in the colorbar\n extend = \"both\"\n )\n\ncax = fig.add_axes([0.25, -0.35, 0.5, 0.025]) #[left, bottom, width, height]\n\nlgd = fig.colorbar(cf4,\n orientation = \"horizontal\",\n ticks = clevs,\n cax = cax,\n label = \"°C\"\n ).set_label(\"°C\", rotation = 0)\n\naxs[1, 1].set_title(f'Autumn 2022: +{autumn_temp_anomaly_mean} °C', fontsize = 20)\naxs[1, 1].coastlines()\naxs[1, 1].gridlines(draw_labels=True)\naxs[1, 1].set_aspect('equal', adjustable=None)\n\nplt.savefig(\"../output/temperature_anomalies_by_seasons.jpeg\",\n bbox_inches = \"tight\",\n dpi = 300)\n\nplt.show() \n```"]