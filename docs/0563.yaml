- en: 'Expose Kubernetes Volumes Securely Over HTTP: How to Serve PVC on the Internet'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/expose-kubernetes-volumes-securely-over-http-how-to-serve-pvc-on-the-internet-67f10f448693?source=collection_archive---------10-----------------------#2023-02-08](https://towardsdatascience.com/expose-kubernetes-volumes-securely-over-http-how-to-serve-pvc-on-the-internet-67f10f448693?source=collection_archive---------10-----------------------#2023-02-08)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create Kubernetes manifests to expose PersistentVolumeClaims
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://meysam.io/?source=post_page-----67f10f448693--------------------------------)[![Meysam](../Images/32fd0f84e6a880a584ee310facb587b9.png)](https://meysam.io/?source=post_page-----67f10f448693--------------------------------)[](https://towardsdatascience.com/?source=post_page-----67f10f448693--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----67f10f448693--------------------------------)
    [Meysam](https://meysam.io/?source=post_page-----67f10f448693--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Feb4a2e2f734a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexpose-kubernetes-volumes-securely-over-http-how-to-serve-pvc-on-the-internet-67f10f448693&user=Meysam&userId=eb4a2e2f734a&source=post_page-eb4a2e2f734a----67f10f448693---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----67f10f448693--------------------------------)
    ¬∑7 min read¬∑Feb 8, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F67f10f448693&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexpose-kubernetes-volumes-securely-over-http-how-to-serve-pvc-on-the-internet-67f10f448693&user=Meysam&userId=eb4a2e2f734a&source=-----67f10f448693---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F67f10f448693&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fexpose-kubernetes-volumes-securely-over-http-how-to-serve-pvc-on-the-internet-67f10f448693&source=-----67f10f448693---------------------bookmark_footer-----------)![](../Images/0699da88213fc3e1b6e62163670dea6f.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Uriel Soberanes](https://unsplash.com/@soberanes?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/deep-ocean?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Intro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have encountered a situation in your daily product development where
    you needed to get your hands on some persisted files residing in the Kubernetes
    cluster. One common & safe approach is to do port-forwarding, whether with the
    help of Kubectl or pure SSH using a bastion host.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, after you're done with the task, you'd terminate the session,
    and for every future interaction, you'd go through the same manual process every
    time.
  prefs: []
  type: TYPE_NORMAL
- en: It might be ideal, security-wise, to keep your environment as sealed as possible,
    not giving the adversaries any chance & it is a valid reason to keep it like that.
  prefs: []
  type: TYPE_NORMAL
- en: But, if you want long-running exposure to the underlying storage out on the
    internet, this article is for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'First Things First: Authentication'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this file server will be exposed publicly to the internet, your first and
    most important line of defense is the authentication layer. To put that into perspective,
    a formal definition of **authentication** is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication is the act of proving an assertion, such as the identity of a
    computer system user. [[source](https://en.wikipedia.org/wiki/Authentication)]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In layperson's terms, authentication happens when a system user proves he is
    who he claims to be!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've cleared that let's dig out some options for integrating authentication
    into our webserver (further below).
  prefs: []
  type: TYPE_NORMAL
- en: Using Nginx or Apache as a **proxy**, with the help of `htpasswd`, an [Apache
    tool](https://httpd.apache.org/docs/2.4/programs/htpasswd.html) that allows storing
    an encrypted username-password pair in a file, which can later be used to verify
    a given password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ory Oathkeeper](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&cd=&cad=rja&uact=8&ved=2ahUKEwjrrMvg_vr8AhVqyXMBHesLD2YQFnoECBYQAQ&url=https%3A%2F%2Fwww.ory.sh%2Fdocs%2Foathkeeper&usg=AOvVaw3lE0kJQsgKh6i4iwjk7_dX)
    as a **proxy**, with the help of [Kratos](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&cd=&cad=rja&uact=8&ved=2ahUKEwiEue_r_vr8AhX2ErcAHeuXAUMQFnoECBUQAQ&url=https%3A%2F%2Fwww.ory.sh%2Fkratos%2F&usg=AOvVaw0nIrUC8QOSo2f1dZW32Yhg),
    another one of Ory''s products, as the **identity provider**. This is somewhat
    more complex than the earlier approach, and it takes some learning curve to master
    the configuration and the provisioning of those two. I will cover another article
    later about this, so stay tuned! üòâ'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, you can add many more to this list, but for the sake of keeping this
    article short, and honestly, because I don't know many other solutions, I'll suffice
    to the two items above for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: Another point I want to mention here is that since this article is about **exposure
    to the internet**, I'm not talking about private network solutions here. Still,
    you can imagine that will also be one **safe** option.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know Ory's products are not the easiest to provision and that the
    author is not an authentication expert üòÅ let's [keep it simple](https://en.wikipedia.org/wiki/KISS_principle)
    and go for the first approach.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `htpasswd` File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`htpasswd` is quite a simple tool to enforce a [**Basic** authentication](https://www.rfc-editor.org/rfc/rfc7617#section-2)
    mechanism into any platform. It works by receiving a username and a password as
    input. The result will be a one-way hashed password in a file or standard output
    that can later be used to **verify** the user credential. Still, it can [not be
    reversed (de-hashed) to the original password](https://www.quora.com/Is-it-possible-to-reverse-a-password-hashed-with-bcrypt)
    in a reasonable amount of time, at least [not in 2023, with our current computing
    capacity](https://www.quora.com/How-would-quantum-computers-render-one-way-hashing-algorithms-like-SHA-256-Bitcoin-useless-Would-they-somehow-be-able-to-reverse-the-hashes-or-would-they-just-be-better-at-finding-collisions)!'
  prefs: []
  type: TYPE_NORMAL
- en: To have a simple demonstration, look at the snippet below.
  prefs: []
  type: TYPE_NORMAL
- en: This will only create a new file for a user and tries to verify it with both
    the correct password and the wrong one.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the same in our "Secure File Server," exposed publicly to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Reverse Proxy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unless you want to handle the authentication on the file server layer (I know
    I won't), you'll use a reverse proxy to sit right in front, receiving every traffic
    and failing all those with the wrong credentials. You may even add another restricting
    measure, including but not limited to rate-limiting, logging, instrumentation,
    reporting, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache & Nginx can both work with a `htpasswd` generated file to verify the
    credential. You can see the links below for more information on each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://httpd.apache.org/docs/2.4/howto/auth.html](https://httpd.apache.org/docs/2.4/howto/auth.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/](https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm sure other web servers are fine, doing the same stuff as the one mentioned
    here.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I'm going to go with Nginx & since this will be hosted in Kubernetes,
    it will be a docker container of Nginx. This allows me to mount any number of
    config files into the `/etc/nginx/conf.d` directory, and the Nginx web server
    process picks it up.
  prefs: []
  type: TYPE_NORMAL
- en: So, if I can mount any config file in the directory, I can write a config file
    in a [Kubernetes ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/),
    and mount that into the container's desired directory. This is both powerful and
    quite flexible.
  prefs: []
  type: TYPE_NORMAL
- en: This is the configuration I'm about to mount into the Nginx container.
  prefs: []
  type: TYPE_NORMAL
- en: The entry named`proxy_pass`you see in the configuration file points to the file
    server that will expose the file system's directory using the HTTP protocol. More
    on this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/441ddc1ea43bca0cf61688ae43b84759.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Carl Barcelo](https://unsplash.com/@barcelocarl?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/gymnastic?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: File Server Over HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are just a few to mention among the many other static web servers.
  prefs: []
  type: TYPE_NORMAL
- en: '[Python module:](https://docs.python.org/3/library/http.server.html) `[http.server](https://docs.python.org/3/library/http.server.html)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Npm:](https://www.npmjs.com/package/serve/v/14.2.0) `[serve](https://www.npmjs.com/package/serve/v/14.2.0)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nginx static serving](https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, this list can grow more, but we're trying to keep it short and informative.
    üòá
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I''ll be using Python''s builtin module: `http.server`. It
    has got a straightforward and intuitive interface and makes usage straightforward.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The way you can serve static content with it is as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This works very well, especially since you don't need to do a lot of magic to
    make it work.
  prefs: []
  type: TYPE_NORMAL
- en: Having this web server running and **accessible** from the Nginx container means
    you can mount your PersistentVolumeClaims in the static web server & place the
    Nginx described above right in front of it to gate for unauthenticated access
    to your precious data in the Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Mount Kubernetes ConfigMap as Volume
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we wrap it all up into one unified manifest, one last critical piece
    of information is used in this approach and needs a little explanation. But if
    you're already a master on how to mount a ConfigMap as a Volume to a container
    in Kubernetes, feel free to skip this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount a Kubernetes ConfigMap as a Volume, you use the projection in the
    volumes'' section of the container definition like below [[source](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#projections)]:'
  prefs: []
  type: TYPE_NORMAL
- en: Right at the same level as `containers` , there is a `volumes` defined, which
    can accept a couple of volume types, one being ConfigMap. This allows for defining
    some script and passing that as volume to the running container.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the manifest above, here's what the logs will show from the container.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping it All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve seen all the information piece by piece, it''s time to put
    them together to serve as a unified manifest, which will be used for one sole
    purpose: **An HTTP serving file server.**'
  prefs: []
  type: TYPE_NORMAL
- en: The second file, an Ingress resource, is optional but still included since this
    article was about publicly exposing an HTTP static webserver. You will only get
    internet exposure if you create the Ingress.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get another safety measure in place, you can assign a UUID-generated value
    to your subdomain to avoid having only the username & password as your ONLY security
    measure. It can be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Otherwise, you're only as safe as your username & password, and if your brand
    gives away the username you have assigned, then you're only as secure as your
    password, and that's different from the position you'd like to put yourself in!
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember that you will need HTTPS. You never want to have some random
    fellow eavesdrop on your connection, watching you transmit precious customer data
    over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c07e959a8e5d41359349f86ddb138797.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Haley Phelps](https://unsplash.com/@haleyephelps?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/swimming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since this is Kubernetes we're talking about, there is no tying to any cloud
    providers, and you simply apply this practice anywhere with a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: This will effectively mean that you can securely expose your dynamic provisioned
    persistent volumes to the internet!
  prefs: []
  type: TYPE_NORMAL
- en: Take the "secure" part with a grain of salt since this is not the safest bet,
    but you can still protect yourself if you assign a random string to the subdomain
    of your Ingress. That way, the attacker will have to find the URL out of many
    combinations on the internet, effectively taking many years. By which time, we
    may have all been gone by then!
  prefs: []
  type: TYPE_NORMAL
- en: Have an excellent rest of the day. [Stay tuned](https://meysam.io/), and take
    care!
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you find this helpful article. Here's a list of some of my previous work
    you might enjoy.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-set-up-ingress-controller-in-aws-eks-d745d9107307?source=post_page-----67f10f448693--------------------------------)
    [## How to Set Up Ingress Controller in AWS EKS'
  prefs: []
  type: TYPE_NORMAL
- en: Deploy Ingress Controller on AWS EKS the right way
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-set-up-ingress-controller-in-aws-eks-d745d9107307?source=post_page-----67f10f448693--------------------------------)
    [](https://meysam.io/what-is-haproxy-how-to-get-the-most-from-of-it-a9009b67f618?source=post_page-----67f10f448693--------------------------------)
    [## What is HAProxy & how to get the most out of it?
  prefs: []
  type: TYPE_NORMAL
- en: Balancing load, SSL/TLS, caching, and many more.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: meysam.io](https://meysam.io/what-is-haproxy-how-to-get-the-most-from-of-it-a9009b67f618?source=post_page-----67f10f448693--------------------------------)
    [](/how-to-write-your-own-github-action-59cc4746a57a?source=post_page-----67f10f448693--------------------------------)
    [## How to Write Your Own GitHub Action
  prefs: []
  type: TYPE_NORMAL
- en: Complete your CI/CD toolbox with GitHub Workflows.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-write-your-own-github-action-59cc4746a57a?source=post_page-----67f10f448693--------------------------------)
    [](https://medium.com/licenseware/12-factor-app-for-dummies-d905d894d9f8?source=post_page-----67f10f448693--------------------------------)
    [## 12-Factor App For Dummies
  prefs: []
  type: TYPE_NORMAL
- en: The 12-Factor App is a set of principles and best practices applied to modern
    web development to make apps more‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/licenseware/12-factor-app-for-dummies-d905d894d9f8?source=post_page-----67f10f448693--------------------------------)
    [](https://medium.com/licenseware/stop-committing-configurations-to-your-source-code-fb37be351492?source=post_page-----67f10f448693--------------------------------)
    [## Stop Committing Configurations to your Source Code
  prefs: []
  type: TYPE_NORMAL
- en: Making apps reproducible across different environments with a change in the
    configuration.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/licenseware/stop-committing-configurations-to-your-source-code-fb37be351492?source=post_page-----67f10f448693--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[http://nginx.org/en/docs/](http://nginx.org/en/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/](https://kubernetes.io/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
