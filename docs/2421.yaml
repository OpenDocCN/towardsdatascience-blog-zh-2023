- en: Optimizing TV Programs Scheduling Using Genetic Algorithms in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/optimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75?source=collection_archive---------6-----------------------#2023-07-26](https://towardsdatascience.com/optimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75?source=collection_archive---------6-----------------------#2023-07-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A hands-on tutorial explaining how to optimize TV program scheduling using Genetic
    Algorithm in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@esersaygin?source=post_page-----361fab402e75--------------------------------)[![Eser
    Saygın](../Images/4ace0a0f71f2887b4cc70f5deab0bc69.png)](https://medium.com/@esersaygin?source=post_page-----361fab402e75--------------------------------)[](https://towardsdatascience.com/?source=post_page-----361fab402e75--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----361fab402e75--------------------------------)
    [Eser Saygın](https://medium.com/@esersaygin?source=post_page-----361fab402e75--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc6c2253ada5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75&user=Eser+Sayg%C4%B1n&userId=c6c2253ada5f&source=post_page-c6c2253ada5f----361fab402e75---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----361fab402e75--------------------------------)
    ·11 min read·Jul 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F361fab402e75&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75&user=Eser+Sayg%C4%B1n&userId=c6c2253ada5f&source=-----361fab402e75---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F361fab402e75&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75&source=-----361fab402e75---------------------bookmark_footer-----------)![](../Images/19841fafc7ef4dd243752825dcddad0e.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Glenn Carstens-Peters](https://unsplash.com/@glenncarstenspeters?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: It’s been a long time since I wrote a new post on Medium. For two years, I have
    been researching what improvements can be made in the traditional media sector
    through machine learning and deep learning. One of these research areas is optimization
    techniques. As in every industry, optimization is essential in media. Thus, in
    this article, I want to share TV program planning by integrating it into an evolution
    algorithm, a Genetic Algorithm. Remember, this is just a straightforward implementation.
    Real life goes far beyond this simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: WHAT IS OPTIMIZATION, AND WHY DO WE NEED THIS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is optimization? I want to start with this question. Optimization is searching
    for values that minimize or maximize a given objective function. What about the
    objective function? The objective function is a mathematical representation of
    the performance measure we are trying to maximize or minimize. If the problem
    is a minimization problem, we can call it a cost function; if it is a maximization
    problem, we can call it a fitness function.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s enrich this explanation with an example. Stop for a minute and imagine
    that you own a restaurant. We aim to maximize its profits by modifying the menu
    (by menu, I mean the dishes on the menu). The first method that comes to mind
    is to use cheaper ingredients. You can make more profit by reducing the quality
    of the ingredients used. But that’s not how things work in real life. When you
    lower product quality, customers reduce their demand for dishes made with lower-quality
    ingredients. Therefore, it is not possible to reach the desired goal.
  prefs: []
  type: TYPE_NORMAL
- en: As you can figure out, it is an optimization problem for the restaurant owner
    to create a menu to maximize their profit. For instance, the restaurant owner
    can analyze which plates are sold at what times and outline a road map. Optimization
    techniques will allow the restaurant owner to make a data-driven decision and
    achieve the best possible outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine that you work as a program planner for a television station. Remember
    that your competitors are strong, but you still have programs that can compete.
    The main problem that needs to be decided is which program should be broadcast
    at what time. It looks easy. A pen and some paper are enough. Is it really so?
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though television program planning seems uncomplicated, it becomes very
    complex with the involvement of various factors. Here are some of these:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viewer preferences:** What TV content genres do viewers prefer?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time slots:** What kind of programs do the viewers prefer in what periods?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lead-in and Lead-out programs:** Some programs transfer the audience they
    collect during the broadcasting period to the next program.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Program preferences of competitor channels:** What program are competing
    channels broadcasting at what time?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Holidays, special occasions, and seasonal trends:** How are viewer preferences
    changing? Are there any existing trends?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fresh and old content:** Are the broadcast programs fresh? Or is it a rerun?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Storylines and Cliffhangers:** Does the program have a storyline? Or cliffhanger?'
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few factors. You may have noticed that dozens of factors affect
    TV program planning. Therefore, optimizing algorithms to solve such problems would
    be suitable.
  prefs: []
  type: TYPE_NORMAL
- en: WHAT ARE THE EVALUATION AND GENETIC ALGORITHMS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I will briefly explain evaluation and genetic algorithms in this part. Evolutionary
    Algorithms (EAs) are optimization techniques that can solve many challenging optimization
    problems without requiring specific knowledge about the problem structure; in
    other words, they are problem-independent. Evolutionary Algorithms (EAs) can handle
    linear and nonlinear objective functions without requiring information about the
    problem’s structure.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the genetic algorithm belongs to the family of search algorithms
    and uses the principles of evolution. By implementing reproduction and natural
    selection processes, it can produce solutions of high quality. The genetic algorithm
    is a highly effective technique for solving optimization problems.
  prefs: []
  type: TYPE_NORMAL
- en: You can see a simple GA flowchart below. Our first step is to create an initial
    population. The initial population contains randomly selected chromosomes (more
    clearly, the initial population is a set of chromosomes). After the population
    is created, a fitness function value is calculated for each individual. Genetic
    algorithms use a chromosome to represent each individual. The fitness value of
    each individual is independent of the others. In this way, multiple calculations
    can be made at the same time. After the fitness values are calculated, three different
    phases of the GA come into play — selection, crossover, and mutation. The selection
    phase is responsible for selecting chromosomes from the population. The aim is
    to create better generations. The crossover process is responsible for developing
    new offspring from selected individuals. This process is usually done by taking
    two selected individuals at a time and interchanging parts of their chromosomes
    to create two new chromosomes representing the offspring. Finally, the operator
    changes one or more genes in the mutation phase. The probability of this change
    is very low. The most important feature of the mutation phase is to prevent the
    system from getting stuck in the local minima.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53d1dc20c4d6497ffabace6a82586816.png)'
  prefs: []
  type: TYPE_IMG
- en: Genetic algorithms flow chart (Eser Saygın)
  prefs: []
  type: TYPE_NORMAL
- en: IMPLEMENTATION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I just gave simple information about the genetic algorithm. Now I will explain
    the genetic algorithm step by step using Python. Our problem, as seen in the title,
    is which program will be broadcast at what time. First of all, there is an important
    point that I should emphasize. The problem we will implement in a moment is a
    simple example. As I mentioned, many factors affect the problem’s implementation
    in real life. For this reason, the problem identification phase is the most time-consuming
    part.
  prefs: []
  type: TYPE_NORMAL
- en: STEPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we start by defining our dataset. As I mentioned earlier, the set below
    is a simple example. The dataset shows the ratings of various programs over 18
    hours (06:00–24:00). In real life, it is necessary to broadcast in each time slot
    to measure the rating score of a program in different time slots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Below, you can see the other variables. These variables are hyperparameters
    to be used in Genetic Algorithms. I’ve also created two different lists to use
    later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As we mentioned in our article, our first job will be to initialize the population.
    You can find the function I created for this purpose below. As you can see, the
    function needs two input lists: a program list and a time slot list. We have already
    defined these lists above. The function generates all the potential schedules.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will define our fitness function. The fitness function is responsible
    for measuring the quality of each schedule. It takes the schedule as input and
    returns the total rating score. (The list we call a schedule is a broadcast schedule
    consisting of TV programs.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After defining the fitness function, we can move on to the selection phase.
    The selection phase aims to find the most optimal schedule. For this, we can use
    the following function that we created. The function checks the fitness value
    of each schedule and chooses the one with the highest value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The selection phase is followed by the crossover phase. In the crossover phase,
    two-parent solutions are combined with the help of GA to form a new offspring.
    In the TV schedule problem, this process changes the programs (genes) found in
    two solutions. This process creates various combinations of TV programs. You can
    see the crossover function below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The final phase is the mutation phase. As we mentioned before, in the mutation
    phase, new offspring are formed by changing the genetic material of the chromosomes.
    In the TV program optimization problem, we can think of it as changing the program
    randomly. Remember, the probability of mutation is very low. Also, you can assign
    this possibility as a hyperparameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have defined all our functions, we can run the fitness function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The data we need for our genetic algorithm is ready. Now we can define the algorithm.
    This algorithm will use the initial_schedule, generations, population_size, crossover_rate,
    mutation_rate, and elitism_size. We have described these before. Since they are
    hyperparameters, we can modify them but don’t need to. The function begins by
    creating the initial population with the provided initial schedule and then adding
    random schedules. After that, it runs a loop for the specified number of generations
    and generates a new population for each generation using selection, crossover,
    and mutation operations. Elitism helps to preserve the most successful individuals
    from the previous generation based on their fitness scores. Once the population
    has been updated, it becomes the current population for the next generation. After
    that, the function returns the best schedule from the previous generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready to get the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After the genetic algorithm has run, we combine the initial best and genetic
    schedules to create the final optimal schedule. Finally, we print the optimal
    schedule with the assigned programs, showing the time slot, the corresponding
    program, and the total ratings achieved in the final optimal schedule.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e213f831e6ba9becc21c0c0b615c7ac8.png)'
  prefs: []
  type: TYPE_IMG
- en: CONCLUSION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Program planning is crucial for television channels in the traditional media
    sector, where competition is high. In this case, we have shown how to improve
    TV program scheduling by utilizing a genetic algorithm, a powerful tool that can
    help maximize viewer ratings. Consider using a genetic algorithm to optimize a
    scheduling problem, such as TV program scheduling. With its powerful capabilities,
    it can help you create a schedule that maximizes viewer engagement and ratings.
  prefs: []
  type: TYPE_NORMAL
- en: In my upcoming articles, I plan to explore various Genetic algorithms like Competitive
    Co-Evolutionary (CCQGA) and Quantum (QGA). I may also include additional content
    in between.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for taking the time to read this article. If you’d like to connect
    with me, feel free to add me on LinkedIn.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/in/esersaygin/](https://www.linkedin.com/in/esersaygin/)'
  prefs: []
  type: TYPE_NORMAL
- en: SOURCES
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hands-On Genetic Algorithms with Python: Applying genetic algorithms to solve
    real-world deep learning and artificial intelligence problems **by Eyal Wirsansky**
    **(Author)**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Applied Evolutionary Algorithms for Engineers Using Python 1st Edition
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**by Leonardo Azevedo Scardua (Author)**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: FULL CODE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
