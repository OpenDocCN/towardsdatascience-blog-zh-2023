- en: Optimizing TV Programs Scheduling Using Genetic Algorithms in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/optimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75?source=collection_archive---------6-----------------------#2023-07-26](https://towardsdatascience.com/optimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75?source=collection_archive---------6-----------------------#2023-07-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A hands-on tutorial explaining how to optimize TV program scheduling using Genetic
    Algorithm in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@esersaygin?source=post_page-----361fab402e75--------------------------------)[![Eser
    Saygın](../Images/4ace0a0f71f2887b4cc70f5deab0bc69.png)](https://medium.com/@esersaygin?source=post_page-----361fab402e75--------------------------------)[](https://towardsdatascience.com/?source=post_page-----361fab402e75--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----361fab402e75--------------------------------)
    [Eser Saygın](https://medium.com/@esersaygin?source=post_page-----361fab402e75--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc6c2253ada5f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75&user=Eser+Sayg%C4%B1n&userId=c6c2253ada5f&source=post_page-c6c2253ada5f----361fab402e75---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----361fab402e75--------------------------------)
    ·11 min read·Jul 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F361fab402e75&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75&user=Eser+Sayg%C4%B1n&userId=c6c2253ada5f&source=-----361fab402e75---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F361fab402e75&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-tv-programs-scheduling-using-genetic-algorithms-in-python-361fab402e75&source=-----361fab402e75---------------------bookmark_footer-----------)![](../Images/19841fafc7ef4dd243752825dcddad0e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Glenn Carstens-Peters](https://unsplash.com/@glenncarstenspeters?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: It’s been a long time since I wrote a new post on Medium. For two years, I have
    been researching what improvements can be made in the traditional media sector
    through machine learning and deep learning. One of these research areas is optimization
    techniques. As in every industry, optimization is essential in media. Thus, in
    this article, I want to share TV program planning by integrating it into an evolution
    algorithm, a Genetic Algorithm. Remember, this is just a straightforward implementation.
    Real life goes far beyond this simplicity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: WHAT IS OPTIMIZATION, AND WHY DO WE NEED THIS?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is optimization? I want to start with this question. Optimization is searching
    for values that minimize or maximize a given objective function. What about the
    objective function? The objective function is a mathematical representation of
    the performance measure we are trying to maximize or minimize. If the problem
    is a minimization problem, we can call it a cost function; if it is a maximization
    problem, we can call it a fitness function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Let’s enrich this explanation with an example. Stop for a minute and imagine
    that you own a restaurant. We aim to maximize its profits by modifying the menu
    (by menu, I mean the dishes on the menu). The first method that comes to mind
    is to use cheaper ingredients. You can make more profit by reducing the quality
    of the ingredients used. But that’s not how things work in real life. When you
    lower product quality, customers reduce their demand for dishes made with lower-quality
    ingredients. Therefore, it is not possible to reach the desired goal.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: As you can figure out, it is an optimization problem for the restaurant owner
    to create a menu to maximize their profit. For instance, the restaurant owner
    can analyze which plates are sold at what times and outline a road map. Optimization
    techniques will allow the restaurant owner to make a data-driven decision and
    achieve the best possible outcomes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine that you work as a program planner for a television station. Remember
    that your competitors are strong, but you still have programs that can compete.
    The main problem that needs to be decided is which program should be broadcast
    at what time. It looks easy. A pen and some paper are enough. Is it really so?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though television program planning seems uncomplicated, it becomes very
    complex with the involvement of various factors. Here are some of these:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**Viewer preferences:** What TV content genres do viewers prefer?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**Time slots:** What kind of programs do the viewers prefer in what periods?'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '**Lead-in and Lead-out programs:** Some programs transfer the audience they
    collect during the broadcasting period to the next program.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Program preferences of competitor channels:** What program are competing
    channels broadcasting at what time?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Holidays, special occasions, and seasonal trends:** How are viewer preferences
    changing? Are there any existing trends?'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Fresh and old content:** Are the broadcast programs fresh? Or is it a rerun?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**新内容与旧内容：** 广播节目是新的吗？还是重播？'
- en: '**Storylines and Cliffhangers:** Does the program have a storyline? Or cliffhanger?'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**故事情节和悬念：** 这个程序有故事情节吗？还是有悬念？'
- en: These are just a few factors. You may have noticed that dozens of factors affect
    TV program planning. Therefore, optimizing algorithms to solve such problems would
    be suitable.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些因素。你可能已经注意到，数十个因素会影响电视节目规划。因此，优化算法来解决这些问题是合适的。
- en: WHAT ARE THE EVALUATION AND GENETIC ALGORITHMS?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是评价和遗传算法？
- en: I will briefly explain evaluation and genetic algorithms in this part. Evolutionary
    Algorithms (EAs) are optimization techniques that can solve many challenging optimization
    problems without requiring specific knowledge about the problem structure; in
    other words, they are problem-independent. Evolutionary Algorithms (EAs) can handle
    linear and nonlinear objective functions without requiring information about the
    problem’s structure.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在这一部分简要介绍评价和遗传算法。进化算法（EAs）是一种优化技术，可以解决许多具有挑战性的优化问题，而无需特定的关于问题结构的知识；换句话说，它们是问题独立的。进化算法（EAs）可以处理线性和非线性目标函数，而无需关于问题结构的信息。
- en: On the other hand, the genetic algorithm belongs to the family of search algorithms
    and uses the principles of evolution. By implementing reproduction and natural
    selection processes, it can produce solutions of high quality. The genetic algorithm
    is a highly effective technique for solving optimization problems.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，遗传算法属于搜索算法家族，使用进化原理。通过实现繁殖和自然选择过程，它可以产生高质量的解决方案。遗传算法是解决优化问题的非常有效的技术。
- en: You can see a simple GA flowchart below. Our first step is to create an initial
    population. The initial population contains randomly selected chromosomes (more
    clearly, the initial population is a set of chromosomes). After the population
    is created, a fitness function value is calculated for each individual. Genetic
    algorithms use a chromosome to represent each individual. The fitness value of
    each individual is independent of the others. In this way, multiple calculations
    can be made at the same time. After the fitness values are calculated, three different
    phases of the GA come into play — selection, crossover, and mutation. The selection
    phase is responsible for selecting chromosomes from the population. The aim is
    to create better generations. The crossover process is responsible for developing
    new offspring from selected individuals. This process is usually done by taking
    two selected individuals at a time and interchanging parts of their chromosomes
    to create two new chromosomes representing the offspring. Finally, the operator
    changes one or more genes in the mutation phase. The probability of this change
    is very low. The most important feature of the mutation phase is to prevent the
    system from getting stuck in the local minima.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到下面的简单遗传算法流程图。我们的第一步是创建初始种群。初始种群包含随机选择的染色体（更准确地说，初始种群是一组染色体）。创建种群后，为每个个体计算一个适应度函数值。遗传算法使用染色体来表示每个个体。每个个体的适应度值是独立的。在这种方式下，可以同时进行多次计算。适应度值计算完毕后，遗传算法的三个不同阶段就会开始发挥作用——选择、交叉和变异。选择阶段负责从种群中选择染色体。目标是创造更好的世代。交叉过程负责从选择的个体中产生新的后代。这个过程通常是通过一次选择两个个体，然后交换它们的染色体部分，来创建两个新的代表后代的染色体。最后，操作员在变异阶段改变一个或多个基因。这种变化的概率非常低。变异阶段最重要的特点是防止系统陷入局部最小值。
- en: '![](../Images/53d1dc20c4d6497ffabace6a82586816.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/53d1dc20c4d6497ffabace6a82586816.png)'
- en: Genetic algorithms flow chart (Eser Saygın)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 遗传算法流程图（Eser Saygın）
- en: IMPLEMENTATION
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: I just gave simple information about the genetic algorithm. Now I will explain
    the genetic algorithm step by step using Python. Our problem, as seen in the title,
    is which program will be broadcast at what time. First of all, there is an important
    point that I should emphasize. The problem we will implement in a moment is a
    simple example. As I mentioned, many factors affect the problem’s implementation
    in real life. For this reason, the problem identification phase is the most time-consuming
    part.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚介绍了关于遗传算法的一些简单信息。现在我将使用 Python 逐步解释遗传算法。正如标题所示，我们的问题是哪个节目将在什么时间播出。首先，我应该强调一个重要的点。我们将要实现的问题是一个简单的示例。正如我提到的，许多因素影响了现实生活中问题的实现。因此，问题识别阶段是最耗时的部分。
- en: STEPS
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤
- en: First, we start by defining our dataset. As I mentioned earlier, the set below
    is a simple example. The dataset shows the ratings of various programs over 18
    hours (06:00–24:00). In real life, it is necessary to broadcast in each time slot
    to measure the rating score of a program in different time slots.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从定义数据集开始。正如我之前提到的，下面的集合是一个简单的示例。数据集显示了各种节目在18小时（06:00–24:00）内的收视率。在现实生活中，有必要在每个时间段内播出节目，以测量节目在不同时间段的收视率。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Below, you can see the other variables. These variables are hyperparameters
    to be used in Genetic Algorithms. I’ve also created two different lists to use
    later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，你可以看到其他变量。这些变量是用于遗传算法的超参数。我还创建了两个不同的列表以供后续使用。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we mentioned in our article, our first job will be to initialize the population.
    You can find the function I created for this purpose below. As you can see, the
    function needs two input lists: a program list and a time slot list. We have already
    defined these lists above. The function generates all the potential schedules.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在文章中提到的，我们的首要任务是初始化种群。你可以在下面找到我为此目的创建的函数。正如你所见，该函数需要两个输入列表：一个节目列表和一个时间段列表。我们已经在上面定义了这些列表。该函数生成所有潜在的日程安排。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, we will define our fitness function. The fitness function is responsible
    for measuring the quality of each schedule. It takes the schedule as input and
    returns the total rating score. (The list we call a schedule is a broadcast schedule
    consisting of TV programs.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义我们的适应度函数。适应度函数负责测量每个日程安排的质量。它以日程安排为输入，并返回总的收视率分数。（我们称之为日程安排的列表是由电视节目组成的播出日程。）
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After defining the fitness function, we can move on to the selection phase.
    The selection phase aims to find the most optimal schedule. For this, we can use
    the following function that we created. The function checks the fitness value
    of each schedule and chooses the one with the highest value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了适应度函数后，我们可以进入选择阶段。选择阶段的目的是找到最优的日程安排。为此，我们可以使用我们创建的以下函数。该函数检查每个日程安排的适应度值，并选择具有最高值的那个。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The selection phase is followed by the crossover phase. In the crossover phase,
    two-parent solutions are combined with the help of GA to form a new offspring.
    In the TV schedule problem, this process changes the programs (genes) found in
    two solutions. This process creates various combinations of TV programs. You can
    see the crossover function below.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 选择阶段之后是交叉阶段。在交叉阶段，两个父代解在遗传算法的帮助下被结合形成新的后代。在电视节目安排问题中，这个过程改变了两个解决方案中找到的节目（基因）。这个过程创造了各种电视节目的组合。你可以在下面看到交叉函数。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The final phase is the mutation phase. As we mentioned before, in the mutation
    phase, new offspring are formed by changing the genetic material of the chromosomes.
    In the TV program optimization problem, we can think of it as changing the program
    randomly. Remember, the probability of mutation is very low. Also, you can assign
    this possibility as a hyperparameter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最终阶段是突变阶段。正如我们之前提到的，在突变阶段，通过改变染色体的遗传物质来形成新的后代。在电视节目优化问题中，我们可以将其视为随机更改节目。记住，突变的概率非常低。此外，你还可以将这个可能性作为一个超参数进行分配。
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we have defined all our functions, we can run the fitness function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了所有函数，可以运行适应度函数了。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The data we need for our genetic algorithm is ready. Now we can define the algorithm.
    This algorithm will use the initial_schedule, generations, population_size, crossover_rate,
    mutation_rate, and elitism_size. We have described these before. Since they are
    hyperparameters, we can modify them but don’t need to. The function begins by
    creating the initial population with the provided initial schedule and then adding
    random schedules. After that, it runs a loop for the specified number of generations
    and generates a new population for each generation using selection, crossover,
    and mutation operations. Elitism helps to preserve the most successful individuals
    from the previous generation based on their fitness scores. Once the population
    has been updated, it becomes the current population for the next generation. After
    that, the function returns the best schedule from the previous generation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we are ready to get the results.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After the genetic algorithm has run, we combine the initial best and genetic
    schedules to create the final optimal schedule. Finally, we print the optimal
    schedule with the assigned programs, showing the time slot, the corresponding
    program, and the total ratings achieved in the final optimal schedule.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e213f831e6ba9becc21c0c0b615c7ac8.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: CONCLUSION
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Program planning is crucial for television channels in the traditional media
    sector, where competition is high. In this case, we have shown how to improve
    TV program scheduling by utilizing a genetic algorithm, a powerful tool that can
    help maximize viewer ratings. Consider using a genetic algorithm to optimize a
    scheduling problem, such as TV program scheduling. With its powerful capabilities,
    it can help you create a schedule that maximizes viewer engagement and ratings.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: In my upcoming articles, I plan to explore various Genetic algorithms like Competitive
    Co-Evolutionary (CCQGA) and Quantum (QGA). I may also include additional content
    in between.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for taking the time to read this article. If you’d like to connect
    with me, feel free to add me on LinkedIn.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/in/esersaygin/](https://www.linkedin.com/in/esersaygin/)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: SOURCES
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hands-On Genetic Algorithms with Python: Applying genetic algorithms to solve
    real-world deep learning and artificial intelligence problems **by Eyal Wirsansky**
    **(Author)**'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Applied Evolutionary Algorithms for Engineers Using Python 1st Edition
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**by Leonardo Azevedo Scardua (Author)**'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: FULL CODE
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
