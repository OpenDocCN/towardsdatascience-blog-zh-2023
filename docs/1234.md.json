["```py\n!pip install langchain openai chromadb pypdf panel notebook\n```", "```py\nimport os \nfrom langchain.chains import RetrievalQA\nfrom langchain.llms import OpenAI\nfrom langchain.document_loaders import TextLoader\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.indexes import VectorstoreIndexCreator\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores import Chroma\nimport panel as pn\n```", "```py\nimport os \nos.environ[\"OPENAI_API_KEY\"] = \"COPY AND PASTE YOUR API KEY HERE\"\n```", "```py\nfile_input = pn.widgets.FileInput(width=300)\n\nopenaikey = pn.widgets.PasswordInput(\n    value=\"\", placeholder=\"Enter your OpenAI API Key here...\", width=300\n)\nprompt = pn.widgets.TextEditor(\n    value=\"\", placeholder=\"Enter your questions here...\", height=160, toolbar=False\n)\nrun_button = pn.widgets.Button(name=\"Run!\")\n\nselect_k = pn.widgets.IntSlider(\n    name=\"Number of relevant chunks\", start=1, end=5, step=1, value=2\n)\nselect_chain_type = pn.widgets.RadioButtonGroup(\n    name='Chain type', \n    options=['stuff', 'map_reduce', \"refine\", \"map_rerank\"]\n)\n\nwidgets = pn.Row(\n    pn.Column(prompt, run_button, margin=5),\n    pn.Card(\n        \"Chain type:\",\n        pn.Column(select_chain_type, select_k),\n        title=\"Advanced settings\", margin=10\n    ), width=600\n)\n```", "```py\ndef qa(file, query, chain_type, k):\n    # load document\n    loader = PyPDFLoader(file)\n    documents = loader.load()\n    # split the documents into chunks\n    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\n    texts = text_splitter.split_documents(documents)\n    # select which embeddings we want to use\n    embeddings = OpenAIEmbeddings()\n    # create the vectorestore to use as the index\n    db = Chroma.from_documents(texts, embeddings)\n    # expose this index in a retriever interface\n    retriever = db.as_retriever(search_type=\"similarity\", search_kwargs={\"k\": k})\n    # create a chain to answer questions \n    qa = RetrievalQA.from_chain_type(\n        llm=OpenAI(), chain_type=chain_type, retriever=retriever, return_source_documents=True)\n    result = qa({\"query\": query})\n    print(result['result'])\n    return result\n```", "```py\nconvos = []  # store all panel objects in a list\n\ndef qa_result(_):\n    os.environ[\"OPENAI_API_KEY\"] = openaikey.value\n\n    # save pdf file to a temp file \n    if file_input.value is not None:\n        file_input.save(\"/.cache/temp.pdf\")\n\n        prompt_text = prompt.value\n        if prompt_text:\n            result = qa(file=\"/.cache/temp.pdf\", query=prompt_text, chain_type=select_chain_type.value, k=select_k.value)\n            convos.extend([\n                pn.Row(\n                    pn.panel(\"\\U0001F60A\", width=10),\n                    prompt_text,\n                    width=600\n                ),\n                pn.Row(\n                    pn.panel(\"\\U0001F916\", width=10),\n                    pn.Column(\n                        result[\"result\"],\n                        \"Relevant source text:\",\n                        pn.pane.Markdown('\\n--------------------------------------------------------------------\\n'.join(doc.page_content for doc in result[\"source_documents\"]))\n                    )\n                )\n            ])\n            #return convos\n    return pn.Column(*convos, margin=15, width=575, min_height=400)\n```", "```py\nqa_interactive = pn.panel(\n    pn.bind(qa_result, run_button),\n    loading_indicator=True,\n)\n```", "```py\noutput = pn.WidgetBox('*Output will show up here:*', qa_interactive, width=630, scroll=True)\n```", "```py\n# layout\npn.Column(\n    pn.pane.Markdown(\"\"\"\n    ## \\U0001F60A! Question Answering with your PDF file\n\n    Step 1: Upload a PDF file \\n\n    Step 2: Enter your OpenAI API key. This costs $$. You will need to set up billing info at [OpenAI](https://platform.openai.com/account). \\n\n    Step 3: Type your question at the bottom and click \"Run\" \\n\n\n    \"\"\"),\n    pn.Row(file_input,openaikey),\n    output,\n    widgets\n\n).servable()\n```"]