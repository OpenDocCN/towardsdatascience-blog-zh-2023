["```py\nimport pyro\nimport pyro.distributions as dist\nfrom pyro.infer import NUTS, MCMC\nimport torch\nfrom torch import tensor\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom functools import partial\nimport pandas as pd\n\npyro.clear_param_store()\n```", "```py\ndef model(beta_alpha, beta_beta):\n    def _model_(traffic: tensor, number_of_conversions: tensor):\n        # Define Stochastic Primatives\n        prior_c = pyro.sample('prior_c', dist.Beta(beta_alpha, beta_beta))\n        prior_t = pyro.sample('prior_t', dist.Beta(beta_alpha, beta_beta))\n        priors = torch.stack([prior_c, prior_t])\n        # Define the Observed Stochastic Primatives\n        with pyro.plate('data'):\n            observations = pyro.sample('obs', dist.Binomial(traffic, priors),\\\n                             obs = number_of_conversions)\n    return partial(_model_)\n```", "```py\ndef run_infernce(model, number_of_samples, traffic, number_of_conversions):\n    kernel = NUTS(model)\n\n    mcmc = MCMC(kernel, num_samples = number_of_samples, warmup_steps = 200)\n\n    mcmc.run(traffic, number_of_conversions)\n\n    return mcmc\n```", "```py\ntraffic = torch.tensor([5523., 1379.])\nconversions =torch.tensor([2926., 759.])\ninference = run_infernce(model(1,1), number_of_samples = 1000, \\\n               traffic = traffic, number_of_conversions = conversions)\n```", "```py\nposterior_samples = inference.get_samples()\nposterior_samples_df = pd.DataFrame(posterior_samples)\n```"]