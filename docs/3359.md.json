["```py\n% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/experiment.R\n\\name{Experiment}\n\\alias{Experiment}\n\\title{A Comet Experiment object}\n\\description{\nA comet experiment object can be used to modify or get information about an active\nexperiment. All methods documented here are the different ways to interact with an\nexperiment. Use \\code{\\link[=create_experiment]{create_experiment()}} to create or \\code{\\link[=get_experiment]{get_experiment()}} to\nretrieve a Comet experiment object.\n}\n```", "```py\n## Description\n\nA comet experiment object can be used to modify or get information about an active\nexperiment. All methods documented here are the different ways to interact with an\nexperiment. Use [`create_experiment()`](../create_experiment) to create or [`get_experiment()`](../get_experiment) to\nretrieve a Comet experiment object.\n```", "```py\ndoc = Documentation()\n...\nfor line in lines:\n    if line.startswith(\"%\"):\n        pass\n    elif line.startswith(\"\\\\name{\"):\n        matches = re.search(\"{(.*)}\", line)\n        groups = groups()\n        name = groups[0]\n        doc.set_name(name)\n    ...\n```", "```py\n\\usage{\ncreate_experiment(\n  experiment_name = NULL,\n  project_name = NULL,\n  workspace_name = NULL,\n  api_key = NULL,\n  keep_active = TRUE,\n  log_output = TRUE,\n  log_error = FALSE,\n  log_code = TRUE,\n  log_system_details = TRUE,\n  log_git_info = FALSE\n)\n}\n```", "```py\n...\nfor line in lines:\n    ....\n    elif line.startswith(\"\\\\usage{\"):\n        usage = \"\"\n        line = fp_in.readline().rstrip()\n        while line != \"}\":\n            usage += line + \"\\n\"\n            line = fp_in.readline().rstrip()\n        doc.set_usage(usage)\n```", "```py\n\\item{log_error}{If \\code{TRUE}, all output from 'stderr' (which includes errors,\nwarnings, and messages) will be redirected to the Comet servers to display as message\nlogs for the experiment. Note that unlike \\code{auto_log_output}, if this option is on then\nthese messages will not be shown in the console and instead they will only be logged\nto the Comet experiment. This option is set to \\code{FALSE} by default because of this\nbehavior.}\n```", "```py\n\\item{NAME}{DESCRIPTION}\n```", "```py\ntext = \"\"\"\\item{log_error}{If \\code{TRUE}, all output from 'stderr' (which includes errors,\nwarnings, and messages) will be redirected to the Comet servers to display as message\nlogs for the experiment. Note that unlike \\code{auto_log_output}, if this option is on then\nthese messages will not be shown in the console and instead they will only be logged\nto the Comet experiment. This option is set to \\code{FALSE} by default because of this\nbehavior.}\"\"\"\n\nmatches = re.search(\"{(.*)}{(.*)}\", text, re.DOTALL)\n```", "```py\ndef get_curly_contents(number, fp):\n    retval = []\n    count = 0\n    current = \"\"\n    while True:\n        char = fp.read(1)\n        if char == \"}\":\n            count -= 1\n            if count == 0:\n                if current.startswith(\"{\"):\n                    retval.append(current[1:])\n                elif current.startswith(\"}{\"):\n                    retval.append(current[2:])\n                else:\n                    raise Exception(\"malformed?\", current)\n                current = \"\"\n        elif char == \"{\":\n            count += 1\n        if len(retval) == number:\n            return retval\n        current += char\n```", "```py\nfp = open(FILENAME)\nname, description = get_curly_contents(2, fp)\n```", "```py\n\\if{html}{\\out{<hr>}}\n\\if{html}{\\out{<a id=\"method-Experiment-new\"></a>}}\n\\if{latex}{\\out{\\hypertarget{method-Experiment-new}{}}}\n\\subsection{Method \\code{new()}}{\nDo not call this function directly. Use \\code{create_experiment()} or \\code{get_experiment()} instead.\n\\subsection{Usage}{\n\\if{html}{\\out{<div class=\"r\">}}\\preformatted{Experiment$new(\n  experiment_key,\n  project_name = NULL\n)}\\if{html}{\\out{</div>}}\n}\n\n\\subsection{Arguments}{\n\\if{html}{\\out{<div class=\"arguments\">}}\n\\describe{\n\\item{\\code{experiment_key}}{The key of the \\code{Experiment}.}\n\n\\item{\\code{project_name}}{The project name (can also be specified using the \\code{COMET_PROJECT_NAME}\nparameter as an environment variable or in a comet config file).}\n}\n\\if{html}{\\out{</div>}}\n}\n}\n```", "```py\n\\subsection{Usage}{\n\\if{html}{\\out{<div class=\"r\">}}\\preformatted{Experiment$new(\n  experiment_key,\n  project_name = NULL\n)}\\if{html}{\\out{</div>}}\n}\n```", "```py\n[\n \"\\\\\", \"subsection\", \"{\", \"Usage\", \"}\", \"\\\\\", \"if\",\n \"{\", \"html\", \"}\", \"{\", \"\\\\\", \"out\", \"{\", \"<\", \"div\", \n \" \",  \"class\", \"=\", \"\\\"r\\\"\", \">\", \"}\", \"}\", \"\\\\\", \n \"preformatted\", \"{\", \"Experiment$new\", \"(\", \"experiment_key\",\n \"project_name\", \"=\", \"NULL\", \")\", \"}\", \"\\\\\", \"if\",\n \"{\", \"html\", \"}\", \"{\", \"\\\\\", \"out\", \"{\", \"<\", \"/\", \"div\",\n \">\", \"}\", \"}\", \"}\"\n]\n```", "```py\ndoc = Documentation()\n...\nmethod = Method()\nposition = 0\npreamble = \"\"\ntokens = tokenize(text)\nwhile position < len(tokens):\n    token = tokens[position]\n    if token == \"\\\\\":\n        if tokens[position + 1] == \"subsection\":\n            in_preamble = False\n            if tokens[position + 3] == \"Usage\":\n                position, usage = get_tokenized_section(\n                    position + 5, tokens\n                ) \n                method.set_usage(usage)\n            elif tokens[position + 3] == \"Arguments\":\n                # skip this, we'll get with describe\n                position += 5\n            elif tokens[position + 3] == \"Examples\":\n                position, examples = get_tokenized_section(\n                    position + 5, tokens\n                )\n                method.set_examples(examples)\n            elif tokens[position + 3] == \"Returns\":\n                position, returns = get_tokenized_section(\n                    position + 5, tokens\n                ) \n                method.set_returns(returns)\n            else:\n                raise Exception(\"unkown subsection:\", tokens[position + 3])\n        elif tokens[position + 1] == \"describe\":\n            position, describe = get_tokenized_section(position + 2, tokens)  # noqa\n            method.set_describe(describe)\n        else:\n            # \\html\n            position += 1\n    else:\n        if in_preamble:\n            preamble += token\n        position += 1\n\nmethod.set_preamble(preamble)\ndoc.add_method(method)\n```"]