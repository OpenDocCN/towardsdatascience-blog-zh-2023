- en: How to use Cypher Aggregations in Neo4j Graph Data Science library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Neo4j 图数据科学库中使用 Cypher 聚合
- en: 原文：[https://towardsdatascience.com/how-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c?source=collection_archive---------11-----------------------#2023-03-27](https://towardsdatascience.com/how-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c?source=collection_archive---------11-----------------------#2023-03-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c?source=collection_archive---------11-----------------------#2023-03-27](https://towardsdatascience.com/how-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c?source=collection_archive---------11-----------------------#2023-03-27)
- en: Leverage Cypher Aggregation feature to project in-memory graphs using all the
    flexibility and expressiveness of Cypher query language
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用 Cypher 聚合功能，在内存图中展示所有 Cypher 查询语言的灵活性和表现力
- en: '[](https://bratanic-tomaz.medium.com/?source=post_page-----5d8c40c2670c--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page-----5d8c40c2670c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5d8c40c2670c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5d8c40c2670c--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page-----5d8c40c2670c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://bratanic-tomaz.medium.com/?source=post_page-----5d8c40c2670c--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page-----5d8c40c2670c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5d8c40c2670c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5d8c40c2670c--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page-----5d8c40c2670c--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F57f13c0ea39a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=post_page-57f13c0ea39a----5d8c40c2670c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5d8c40c2670c--------------------------------)
    ·7 min read·Mar 27, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5d8c40c2670c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=-----5d8c40c2670c---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F57f13c0ea39a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=post_page-57f13c0ea39a----5d8c40c2670c---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5d8c40c2670c--------------------------------)
    ·7 min 阅读·2023年3月27日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5d8c40c2670c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=-----5d8c40c2670c---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d8c40c2670c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c&source=-----5d8c40c2670c---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5d8c40c2670c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-cypher-aggregations-in-neo4j-graph-data-science-library-5d8c40c2670c&source=-----5d8c40c2670c---------------------bookmark_footer-----------)'
- en: Cypher Aggregation is a powerful feature of the Neo4j Graph Data Science library
    that allows users to project an in-memory graph using a flexible and expressive
    approach. While it was possible to use Cypher statements to project an in-memory
    graph for quite some time using Cypher Projection, it lacked some features, most
    notably the ability to project undirected relationships. Therefore, a new approach
    to projecting an in-memory graph in GDS was added called Cypher Aggregation. This
    blog post will explore the syntax and common usage of the Cypher Aggregation projection
    option in the Neo4j Graph Data Science Library.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Cypher 聚合是 Neo4j 图数据科学库的一个强大功能，允许用户使用灵活而表达力强的方法来投影内存中的图。尽管使用 Cypher 投影可以在很长一段时间内投影内存中的图，但它缺乏一些功能，最显著的是无法投影无向关系。因此，GDS
    中添加了一种新的内存图投影方法，称为 Cypher 聚合。这篇博客将探讨 Neo4j 图数据科学库中 Cypher 聚合投影选项的语法和常见用法。
- en: Environment setup
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境设置
- en: If you want to follow along with the examples, you can open a [Graph Data Science
    project in Neo4j Sandbox](https://sandbox.neo4j.com/?usecase=graph-data-science2).
    The project has a small dataset containing information about airports, their locations,
    and flight routes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟随示例，可以打开一个 [Neo4j Sandbox 中的图数据科学项目](https://sandbox.neo4j.com/?usecase=graph-data-science2)。该项目包含有关机场、其位置和航班路线的小数据集。
- en: 'We can visualize the graph schema with the following Cypher statement:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下 Cypher 语句可视化图模式：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/4acad275cd607ceb29bbfb61ae524cd1.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4acad275cd607ceb29bbfb61ae524cd1.png)'
- en: Graph schema. Image by the author.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图模式。图片由作者提供。
- en: Projecting in-memory graphs with Cypher aggregation
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Cypher 聚合投影内存中的图
- en: First, let’s quickly revisit how the Neo4j Graph Data Science library operates.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们快速回顾一下 Neo4j 图数据科学库的操作方式。
- en: '![](../Images/c329d740ce532c99b5eb95d5c9075543.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c329d740ce532c99b5eb95d5c9075543.png)'
- en: Graph Data Science library workflow. Image by the author.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据科学库工作流。图片由作者提供。
- en: Before we can execute any graph algorithms, we first have to project an in-memory
    graph. The in-memory graph does not have to be an exact copy of the stored graph
    in the database. We have the ability to select only a subset of graph, or as you
    will learn later also project virtual relationships that are not stored in the
    database. After the in-memory graph is projected, we have can execute how many
    graph algorithms we want, and then either stream the results directly to the user,
    or write them back to the database.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们执行任何图算法之前，首先必须投影内存中的图。内存图不必是数据库中存储图的精确副本。我们可以选择图的子集，或者如你稍后将学到的，也可以投影未存储在数据库中的虚拟关系。投影内存图后，我们可以执行任意多的图算法，然后直接将结果流式传输给用户，或将其写回数据库。
- en: Projecting an in-memory graph with Cypher Aggregation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Cypher 聚合投影内存中的图
- en: 'Cypher Aggregation feature is part of the first step in Graph Data Science
    workflow, which is projecting an in-memory graph. It offers full flexibility of
    Cypher query language to select, filter, or transform a graph during projection.
    The syntax of the Cypher Aggregation function is the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Cypher 聚合功能是图数据科学工作流的第一步，即在内存中投影图。它提供了 Cypher 查询语言的完全灵活性，可以在投影过程中选择、过滤或转换图。Cypher
    聚合函数的语法如下：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Only the first two parameters (graphName as sourceNode) are mandatory, however,
    you need to specify both the sourceNode and relationshipNode parameters to define
    a single relationship. We will walk through most of the options you might need
    to help you project graphs with Cypher Aggregation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 只有前两个参数（graphName 作为 sourceNode）是必需的，但你需要指定 sourceNode 和 relationshipNode 参数以定义单个关系。我们将详细介绍你可能需要的大部分选项，以帮助你使用
    Cypher 聚合来投影图。
- en: We will start with a simple example. Let’s say we want to project all **Airport**
    nodes and the **HAS_ROUTE** relationship between them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的示例开始。假设我们想要投影所有 **Airport** 节点及其之间的 **HAS_ROUTE** 关系。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Cypher statements starts with a MATCH clause that selects the relevant graph.
    To define a relationship with Cypher Aggregation, we input both the **source**
    and **target** node.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Cypher 语句以 MATCH 子句开始，该子句选择相关的图。要使用 Cypher 聚合定义关系，我们输入 **source** 和 **target**
    节点。
- en: Of course, the Cypher query language offers flexibility to select any subset
    of the graph. So, for example, we could project only airports in the Oceania content
    and their flight routes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Cypher 查询语言提供了选择图的任何子集的灵活性。例如，我们可以只投影大洋洲的机场及其航班路线。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The matching Cypher statement became slightly more complicated in this example,
    but the Cypher Aggregation function stayed the same. The **airports-oceania**
    graph contains 272 nodes and 973 relationships. If you are experienced with Cypher,
    you might notice that the above Cypher statement will not capture any airports
    in Oceania that don’t have flight routes with other airports in Oceania.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，匹配的 Cypher 语句变得稍微复杂了一些，但 Cypher 聚合函数保持不变。**airports-oceania** 图包含 272
    个节点和 973 条关系。如果你对 Cypher 有经验，你可能会注意到上述 Cypher 语句不会捕获任何在大洋洲没有航班路线的机场。
- en: Suppose we want to project isolated airports in the projection as well. In that
    case, we need to modify the Cypher matching statement slightly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们也想在投影中显示孤立机场。在这种情况下，我们需要稍微修改 Cypher 匹配语句。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The relationship count remains identical, while the node count has increased
    to 304\. Therefore, 32 airports in Oceania don’t have any flight routes to other
    airports in Oceania.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数量保持不变，而节点数量增加到 304。因此，32 个大洋洲的机场没有任何航班路线通往其他大洋洲机场。
- en: When dealing with multiple node and relationship types in a graph, we might
    want to retain information about node labels and relationship types during projection.
    Defining the node and relationship types during graph projection allows us to
    filter them at algorithm execution time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理图中的多个节点和关系类型时，我们可能希望在投影过程中保留节点标签和关系类型的信息。在图投影过程中定义节点和关系类型使我们可以在算法执行时对其进行筛选。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I prefer using `UNION` clause when projecting multiple different graph patterns.
    However, what Cypher matching statement is entirely up to you. Since we are projecting
    two types of nodes and relationships, it is probably a good idea to retain the
    information about their labels and types. Therefore, we are using the **sourceNodeLabels**,
    **targetNodeLabels**, and **relationshipType** parameters. In this example, we
    use the existing node labels and relationship types.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当投影多个不同的图模式时，我更倾向于使用`UNION`子句。然而，具体使用什么 Cypher 匹配语句完全取决于你。由于我们投影的是两种类型的节点和关系，保留它们的标签和类型信息可能是个好主意。因此，我们使用了**sourceNodeLabels**、**targetNodeLabels**和**relationshipType**参数。在这个例子中，我们使用了现有的节点标签和关系类型。
- en: However, sometimes we might want to use custom labels or relationship types
    during projection.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时我们可能希望在投影过程中使用自定义标签或关系类型。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, we can use Cypher to dynamically define the node or relationship
    type or simply hardcode it. The custom node label or relationship type can also
    be calculated in the Cypher matching statement if it is more complicated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们可以使用 Cypher 动态定义节点或关系类型，也可以直接硬编码它。如果自定义的节点标签或关系类型比较复杂，也可以在 Cypher 匹配语句中计算。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Sometimes, we also want to project node or relationship properties.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们也希望投影节点或关系属性。
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The node or relationship properties are defined as a map object (dictionary
    or JSON object for Python or JS developers), where the key represents the projected
    property, and the value represents the projected value. This syntax allows us
    to project properties that are calculated during projection.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 节点或关系属性被定义为一个映射对象（对于 Python 或 JS 开发者来说是字典或 JSON 对象），其中键表示投影的属性，值表示投影的值。这种语法允许我们投影在投影过程中计算出的属性。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Again, we can use all the flexibility of Cypher to calculate any node or relationship
    properties. Similary as with node labels, we can also calculate the custom properties
    in the `MATCH` clause.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以利用 Cypher 的所有灵活性来计算任何节点或关系属性。与节点标签类似，我们也可以在`MATCH`子句中计算自定义属性。
- en: An important thing to note is that the current projection behavior is that the
    engine stores the node properties when it first encounters a node. However, on
    subsequent encounters of the same node, it ignores the node properties completely.
    Therefore, you have to be careful to calculate identical node properties for both
    source and target nodes. Otherwise, there may be discrepancies between what is
    projected and what you expect.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的注意事项是当前的投影行为是引擎在第一次遇到节点时存储节点属性。然而，在随后的节点遇到中，它会完全忽略节点属性。因此，你必须小心为源节点和目标节点计算相同的节点属性。否则，投影结果可能与预期存在差异。
- en: Some graph algorithms in the Neo4j Graph Data Science library expect undirected
    relationships. A relationship cannot be stored as undirected in the database and
    must be explicitly defined during graph projection.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Neo4j 图数据科学库中的一些图算法期望无向关系。关系不能以无向方式存储在数据库中，必须在图投影期间明确地定义。
- en: Suppose you want to treat all projected relationships as undirected.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想将所有投影关系视为无向关系。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can use the **undirectedRelationshipType** to specify which relationships
    should be projected as undirected. In practice, you can observe that the relationship
    count doubled when we projected an undirected graph.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 **undirectedRelationshipType** 来指定哪些关系应被投影为无向关系。在实际操作中，你可以观察到，当我们投影无向图时，关系数量翻了一倍。
- en: Sometimes you might want to project a single relationship type as undirected
    while treating the other as directed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能希望将某一类关系投影为无向关系，而将其他关系视为有向关系。
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, the **HAS_ROUTE** relationship is treated as directed, while
    the **IN_CITY** relationship is treated as undirected. When we want to specify
    specific relationship types to be treated as undirected, we must include the **relationshipType**
    parameter in the relationship configuration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，**HAS_ROUTE** 关系被视为有向关系，而 **IN_CITY** 关系被视为无向关系。当我们想要指定特定的关系类型被视为无向关系时，必须在关系配置中包含
    **relationshipType** 参数。
- en: Lastly, we can also project virtual relationships. A virtual relationship is
    a relationship that is not stored in the database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以投影虚拟关系。虚拟关系是一种未存储在数据库中的关系。
- en: '![](../Images/15a13565efa295f5ce25b7d9ed4b6020.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15a13565efa295f5ce25b7d9ed4b6020.png)'
- en: Virtual relationship. Image by the author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟关系。作者提供的图像。
- en: Suppose you want to examine the cities based on their flight connections. The
    database doesn’t have flight relationships between cities. Instead of creating
    the relationships in the database, you can calculate them during graph projection.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想根据城市的航班连接来检查城市。数据库中没有城市之间的航班关系。你可以在图投影期间计算这些关系，而不是在数据库中创建它们。
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can observe, projecting virtual relationships is very easy with Cypher
    Aggregation projection. We have calculated the count of routes between various
    cities and added it as a relationship property in the projected graph.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所观察到的，使用 Cypher 聚合投影投影虚拟关系非常简单。我们计算了各个城市之间的路线数量，并将其添加为投影图中的关系属性。
- en: Let’s calculate the most important cities based on the PageRank algorithm to
    finish off this blog post.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于 PageRank 算法计算最重要的城市，以完成这篇博客文章。
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Results*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*结果*'
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Cypher Aggregation is the newer option to project in-memory graphs in the Neo4j
    Graph Data Science library using Cypher statements. Specifically, it can be used
    to project undirected relationships, which is impossible with the older Cypher
    Projection. However, with the added flexibility of selecting and transforming
    graphs during projection comes a performance cost. Therefore, if you can, you
    should use Native Projection when possible for performance reasons. On the other
    hand, when you have specific use cases to project a particular subset of a graph,
    calculate custom properties or project virtual relationships, Cypher Aggregation
    is your friend.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Cypher 聚合是使用 Cypher 语句在 Neo4j 图数据科学库中投影内存图的新选项。具体来说，它可以用于投影无向关系，这在旧的 Cypher
    投影中是不可能的。然而，随着在投影期间选择和转换图的灵活性增加，性能成本也随之增加。因此，如果可能的话，你应该出于性能考虑使用原生投影。另一方面，当你有特定的用例需要投影图的某一特定子集、计算自定义属性或投影虚拟关系时，Cypher
    聚合是你的好帮手。
