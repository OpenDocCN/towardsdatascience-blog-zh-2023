- en: 'Statistical Plotting with Julia: AlgebraOfGraphics.jl'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/statistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638?source=collection_archive---------8-----------------------#2023-04-19](https://towardsdatascience.com/statistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638?source=collection_archive---------8-----------------------#2023-04-19)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/26ea2729d5703d04b6d7676e1fa51b46.png)'
  prefs: []
  type: TYPE_IMG
- en: Phyto by [Antoine Dautry](https://unsplash.com/@antoine1003?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/de/fotos/05A-kdOH6Hw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: How to create statistical plots using the AlgebraOfGraphics.jl (and Makie.jl)
    package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@schaetzle.ka?source=post_page-----4ead1507c638--------------------------------)[![Roland
    Schätzle](../Images/5d03aad32cda174f2fee595a3fc34a17.png)](https://medium.com/@schaetzle.ka?source=post_page-----4ead1507c638--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4ead1507c638--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4ead1507c638--------------------------------)
    [Roland Schätzle](https://medium.com/@schaetzle.ka?source=post_page-----4ead1507c638--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8ada39358e9d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstatistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638&user=Roland+Sch%C3%A4tzle&userId=8ada39358e9d&source=post_page-8ada39358e9d----4ead1507c638---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4ead1507c638--------------------------------)
    ·9 min read·Apr 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4ead1507c638&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstatistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638&user=Roland+Sch%C3%A4tzle&userId=8ada39358e9d&source=-----4ead1507c638---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4ead1507c638&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstatistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638&source=-----4ead1507c638---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: The Grammar of Graphics (GoG) is a theoretical concept, which is the base of
    many popular graphics packages (like ggplot2 in R or ggplot in Python). Within
    the Julia ecosystem there are even several graphics packages based on the GoG.
    So the user has the choice. Therefore I’ve created this series of articles to
    compare these packages in order to make the choice easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve started the series with an [introduction to the GoG](/the-grammar-of-graphics-or-how-to-do-ggplot-style-plotting-in-julia-1b0ac2162c82)
    and already presented the graphics packages `[Gadfly.jl](http://gadflyjl.org/stable/)`
    ([*Statistical Plotting with Julia: Gadfly.jl*](/statistical-plotting-with-julia-gadfly-jl-39582f91d7cc))
    and `[VegaLite.jl](https://www.queryverse.org/VegaLite.jl/stable/)` ([*Statistical
    Plotting with Julia: VegaLite.jl*](/statistical-plotting-with-julia-vegalite-jl-ad6fda253215)).'
  prefs: []
  type: TYPE_NORMAL
- en: The `[AlgebraOfGraphics.jl](https://aog.makie.org/stable/)`[-package (*AoG*)](https://aog.makie.org/stable/)
    is now the *third* graphics package based on the Grammar of Graphics (GoG) which
    I present in this lineup.
  prefs: []
  type: TYPE_NORMAL
- en: For the examples demonstrating *AoG* in this article, I will use the exact same
    data as in the previous articles (a detailed explanation of the data can be found
    [here](/the-grammar-of-graphics-or-how-to-do-ggplot-style-plotting-in-julia-1b0ac2162c82))
    and I will try to create the exact same visualizations (bar plots, scatter plots,
    histograms, box plots and violin plots) as I did there, in order to make a 1:1
    comparison of all packages possible. I assume that the data for the examples is
    ready in the DataFrames `countries`, `subregions_cum` and `regions_cum` (as before).
  prefs: []
  type: TYPE_NORMAL
- en: AlgebraOfGraphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *AoG*-package is perhaps the purest implementation of the GoG so far, as
    we will see in the following examples. It is founded on sound mathematical concepts
    and its authors describe it as a “*a declarative, question-driven language for
    data visualizations*”. Its main developer is [Pietro Vertechi](https://piever.github.io/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'On a technical level it takes a completely different approach from the packages
    we’ve seen up to now: Whereas `Gadfly.jl` is a standalone graphics package, purely
    written in Julia and `VegaLite.jl` is a Julia-interface for the Vega-Lite graphics
    engine, *AoG* is an add-on package to `[Makie.jl](https://docs.makie.org/stable/)`
    . [*Makie*](https://docs.makie.org/stable/) itself is the youngest graphics package
    within the Julia ecosystem (which is also completely written in Julia).'
  prefs: []
  type: TYPE_NORMAL
- en: The boundaries between *AoG* and *Makie* are fluid. Several elements of *AoG*
    use *Makie*-attributes and *Makie* is always the fallback solution, if some aspects
    cannot be expressed using the concepts of *AoG* itself.
  prefs: []
  type: TYPE_NORMAL
- en: It should also be noted that *AoG* is still a work in progress. Version 0.1
    appeared only in 2020\. Therefore it is not as complete as the other, more mature
    packages and a few aspects simply don’t work yet.
  prefs: []
  type: TYPE_NORMAL
- en: Bar plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So let’s jump into the first visualizations, which depict the population sizes
    of the regions (i.e. continents) and the subregions respectively using bar plots.
  prefs: []
  type: TYPE_NORMAL
- en: Population by region
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we want to show the population size (in 2019) for each region (i.e. continent)
    as a bar within the bar chart. Apart from that, each „region-bar“ should have
    a different color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this simple example, we can see how the basic concepts of *AoG* work:
    In GoG-terms, this visualization is based on data from the `regions_cum` DataFrame
    and it consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: a mapping of the data attribute `Region` to the x-axis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a mapping of the data attribute `Pop2019` to the y-axis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a mapping of the data attribute `Region` to colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use of the “bar” geometry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As I explained in the introduction to the GoG, one of its ideas is, that a
    specification of a visualization can be created from separate building blocks,
    which may be combined to specific needs. *AoG* has fully implemented this idea.
    Therefore we can translate the GoG description directly to *AoG* elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`regionPop2xy = mapping(:Region, :Pop2019)` is the mapping of `Region` to the
    x-axis and `Pop2019` to the y-axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`region2color = mapping(color = :Region)` is the mapping of `Region` to colors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`barplot = visual(BarPlot)` is the “bar” geometry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we can combine these building blocks (using the operator `*`), taking data
    from `regions_cum` and create the plot with a call to `draw`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/54685434d0d2f19a3bb6aa7e0dff3fd9.png)'
  prefs: []
  type: TYPE_IMG
- en: Population by region (1) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: 'As in the previous articles, we create also a beautified version of each visualization
    by adding labels, a title and a nice background color among other things. This
    can be done in *AoG* using the *Makie*-parameters `axis` and `figure` to `draw`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This leads to the following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f431ce22bec088942a09196a40a946d.png)'
  prefs: []
  type: TYPE_IMG
- en: Population by region (2) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: Population by Subregion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s move on to the visualization of the population by *subregions*. This
    is basically the same like the plots above, but we take the data from `subregions_cum`
    instead of `regions_cum`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So our mapping to the axes is now `subregionPop2xy = mapping(:Subregion, :Pop2019)`.
    As we want the bars for the subregions again colored by region, we can reuse the
    mapping from above and the basic plot can be drawn with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9edbde8b361d151832db3e7a464a4334.png)'
  prefs: []
  type: TYPE_IMG
- en: Subregion by population (1) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously the subregion labels would be more readable if we chose a horizontal
    bar plot. This can be achieved by swapping the data attributes in the mapping
    to the axes: `subregionPop2xy_hor = mapping(:Pop2019, :Subregion)` and by adding
    `orientation = :x` to the `visual`. So the code to draw a horizontal version of
    this bar plot is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is unfortunately a specification where it becomes clear that *AoG* is
    still a work in progress. There must be some bug in the rendering process, because
    the result of this `draw` command looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/464e849885db8713005d1a24478dfd17.png)'
  prefs: []
  type: TYPE_IMG
- en: Subregion by population (2) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: The ticks on the y-axis as well as the bars are misplaced and the ticks on the
    x-axis are neither what we want.
  prefs: []
  type: TYPE_NORMAL
- en: Population by Subregion using Makie.jl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So we take this problem as an opportunity to switch to `Makie.jl`. *Makie* is
    a rather low level graphics package. Many things we get automatically in the packages
    we’ve seen so far, have to be specified explicitly in *Makie*. This gives the
    programmer a lot of control but makes the specifications quite verbose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another shortcoming is, that *Makie* cannot handle nominal data. All nominal
    data has to be converted to a numeric form before it can be visualized. In our
    case that means, that we have to convert the nominal data of the attributes `Region`
    and `Subregion` to numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: This is relatively easy for `Subregion`, because this attribute contains unique
    values. So we simply use the index values of that column of the DataFrame and
    store them in the new column `subregion_num`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Region` values are not unique. Therefore we convert them first to a `CategoricalArray`
    which does implicitly a mapping to numeric values. We can obtain then the corresponding
    numbers using the function `levelcode` and store them in another new column `region_num`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from that, we chose an adequate color scheme (`Set2_8`) from `ColorSchemes.jl`
    in order to get nice and distinguishable colors for the regions. This scheme looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/878d4a4f8710656d5f8cf22b75df6970.png)'
  prefs: []
  type: TYPE_IMG
- en: The color scheme Set2_8 [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: 'For all these preparations we need the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then directly create a “beautified” version of the bar plot with labels
    etc. In *Makie* we need a `Figure` as a base element, where the `barplot` can
    be placed. As *Makie* cannot handle nominal data, we also have to specify the
    ticks for the y-axis manually using the `yticks` attribute as we can see in the
    following code, which creates our horizontal bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a lot of code, but the result looks quite pleasing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/744c720764f3ec749a47da81629c1dd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Population by subregion (3) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to get a version of this bar plot where the subregions are sorted
    by population size, we have to sort the data in `subregions_cum` accordingly using
    `sort!(subregions_cum, :Pop2019)` and then execute the code above (including the
    mapping to numeric data) again. This leads to the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aed644a3be9d2dd460fe9528626a53d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Population by subregion (4) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: Scatter Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After this excursion to *Makie*, we return back to *AoG* trying to visualize
    how population change depends on the size of the population. We can do this using
    a scatter plot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The specification contains a mapping of `Pop2019` to the x-axis and `PopChangePct`
    to the y-axis, as well as a mapping of `Region` to a color (we could have reused
    `region2color`at this point, but it is also possible to specify a mapping directly).
    A `visual` can be omitted here, because the point geometry (`Scatter`) is used
    by default by *AoG* in this context. This gives us the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/039ec366b41f0dfbf2b831ca03ab9250.png)'
  prefs: []
  type: TYPE_IMG
- en: Growth rate in relation to population (1) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: 'As in the previous articles, we improve now the visualization by using a logarithmic
    scale on the x-axis as the data is quite skewed. In addition we do our “beautification”
    by adding labels, a title etc. All this can be achieved by reusing the plot specification
    `popChangeVsPop` and adding the aforementioned elements by passing adequate parameters
    to `draw`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This leads to the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/be2f2c105dd2ee9690d37839d95f19d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Growth rate in relation to population (2) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we switch to histograms which we use to depict the distribution of GDP
    per capita among the different countries. As *AoG* offers a so-called `histogram`-*analysis*,
    the specification is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: An *analysis* is in *AoG* a way to process data before visualizing it. And often
    the geometry (`visual`) depends directly on an *analysis,* as in this example,
    where a histogram automatically will be displayed using a bar geometry.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd260534468adcf29abcc9dc8ae05c9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Distribution of GDP per capita (1) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: 'The creation of the histogram can be influenced by changing the number of bins
    (via the parameter `bins`) and by using different `normalization` algorithms.
    So we get an improved version by using the following specification:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This code shows again, how well *AoG* separates the specification of the visualization
    (`histGDPperCapita`) from its “beautification” (in the call to `draw`) leading
    to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b90e35c50278487bc5678ebd49b3b139.png)'
  prefs: []
  type: TYPE_IMG
- en: Distribution of GDP per capita (2) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: Box Plots and Violin Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally we visualize the distribution of GDP per capita in each region using
    box plots and violin plots. This can be achieved with the same simplicity as above,
    since *AoG* offers specific geometries for both plot variants.
  prefs: []
  type: TYPE_NORMAL
- en: In order to maximize the reuse of elements, we first define the data and the
    mappings for the distribution (`distGDPperCapita`) and add then the geometry (using
    `visual`). As in all examples, the additional “beautification” can then be added
    using adequate parameters within the call to `draw`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This code creates the following two diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fb330d6698d9f4894836d607b0fa7ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Distribution of GDP per capita by region (1) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf62a6ab1a3a75af617283f66d50d3de.png)'
  prefs: []
  type: TYPE_IMG
- en: Distribution of GDP per capita by region (2) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: Zooming in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the “most interesting” part in both diagrams lies in the range from 0 to
    100,000 (on the y-axis), we want to restrict the plots to that range (doing sort
    of a zoom-in).
  prefs: []
  type: TYPE_NORMAL
- en: In *AoG* this is possible using the `datalimits` parameter for `visual`. But
    there seems to be another bug in *AoG*, since this parameter has the desired effect
    only when used on the violin plot, but it doesn’t change anything when applied
    to the box plot.
  prefs: []
  type: TYPE_NORMAL
- en: So using the following specification …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '… we get this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69905fb63cb801c8b501ec92e423a4d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Distribution of GDP per capita by region (3) [image by author]
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned above, the *AoG*-package is clearly the purest implementation of
    the Grammar of Graphics we have seen in this series. It really separates mappings,
    geometries etc. into different building-blocks, which can then be combined using
    the `*` operator. It also separates clearly more “decorative” elements (all the
    things we called “beautification” above) from the visualization proper, thus making
    specifications even more modular and giving us more building-blocks which can
    be reused.
  prefs: []
  type: TYPE_NORMAL
- en: I think it is quite normal for such a young package to still have some rough
    edges, but it has really a sound foundation and looks quite promising. Of course
    it was not possible to show all the functionality of *AoG* in this article. So
    please have a look at the [documentation](https://aog.makie.org/stable/), if you
    want to learn more about it. And last but not least it is also worth reading about
    the philosophy underlying this approach, which can be found [here](https://aog.makie.org/stable/philosophy/).
  prefs: []
  type: TYPE_NORMAL
- en: For those who want to dive deeper into the code, there is also a [Pluto notebook](https://github.com/roland-KA/StatisticalPlotsWithJulia/blob/main/notebooks/DV-Basics-AlgebraOfGraphics.jl)
    containing all the examples shown above in my GitHub repository.
  prefs: []
  type: TYPE_NORMAL
