- en: 'Statistical Plotting with Julia: AlgebraOfGraphics.jl'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/statistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638?source=collection_archive---------8-----------------------#2023-04-19](https://towardsdatascience.com/statistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638?source=collection_archive---------8-----------------------#2023-04-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/26ea2729d5703d04b6d7676e1fa51b46.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Phyto by [Antoine Dautry](https://unsplash.com/@antoine1003?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/de/fotos/05A-kdOH6Hw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: How to create statistical plots using the AlgebraOfGraphics.jl (and Makie.jl)
    package
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@schaetzle.ka?source=post_page-----4ead1507c638--------------------------------)[![Roland
    Schätzle](../Images/5d03aad32cda174f2fee595a3fc34a17.png)](https://medium.com/@schaetzle.ka?source=post_page-----4ead1507c638--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4ead1507c638--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4ead1507c638--------------------------------)
    [Roland Schätzle](https://medium.com/@schaetzle.ka?source=post_page-----4ead1507c638--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8ada39358e9d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstatistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638&user=Roland+Sch%C3%A4tzle&userId=8ada39358e9d&source=post_page-8ada39358e9d----4ead1507c638---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4ead1507c638--------------------------------)
    ·9 min read·Apr 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4ead1507c638&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstatistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638&user=Roland+Sch%C3%A4tzle&userId=8ada39358e9d&source=-----4ead1507c638---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4ead1507c638&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fstatistical-plotting-with-julia-algebraofgraphics-jl-4ead1507c638&source=-----4ead1507c638---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The Grammar of Graphics (GoG) is a theoretical concept, which is the base of
    many popular graphics packages (like ggplot2 in R or ggplot in Python). Within
    the Julia ecosystem there are even several graphics packages based on the GoG.
    So the user has the choice. Therefore I’ve created this series of articles to
    compare these packages in order to make the choice easier.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图形语法（GoG）是一个理论概念，是许多流行图形包（如 R 中的 ggplot2 或 Python 中的 ggplot）的基础。在 Julia 生态系统中，甚至有几个基于
    GoG 的图形包。因此，用户有选择的余地。因此，我创建了这一系列文章，以比较这些包，从而使选择变得更容易。
- en: 'I’ve started the series with an [introduction to the GoG](/the-grammar-of-graphics-or-how-to-do-ggplot-style-plotting-in-julia-1b0ac2162c82)
    and already presented the graphics packages `[Gadfly.jl](http://gadflyjl.org/stable/)`
    ([*Statistical Plotting with Julia: Gadfly.jl*](/statistical-plotting-with-julia-gadfly-jl-39582f91d7cc))
    and `[VegaLite.jl](https://www.queryverse.org/VegaLite.jl/stable/)` ([*Statistical
    Plotting with Julia: VegaLite.jl*](/statistical-plotting-with-julia-vegalite-jl-ad6fda253215)).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我以 [GoG 介绍](/the-grammar-of-graphics-or-how-to-do-ggplot-style-plotting-in-julia-1b0ac2162c82)
    开始了这一系列，并已介绍了图形包 `[Gadfly.jl](http://gadflyjl.org/stable/)` ([*使用 Julia 进行统计绘图：Gadfly.jl*](/statistical-plotting-with-julia-gadfly-jl-39582f91d7cc))
    和 `[VegaLite.jl](https://www.queryverse.org/VegaLite.jl/stable/)` ([*使用 Julia
    进行统计绘图：VegaLite.jl*](/statistical-plotting-with-julia-vegalite-jl-ad6fda253215))。
- en: The `[AlgebraOfGraphics.jl](https://aog.makie.org/stable/)`[-package (*AoG*)](https://aog.makie.org/stable/)
    is now the *third* graphics package based on the Grammar of Graphics (GoG) which
    I present in this lineup.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`[AlgebraOfGraphics.jl](https://aog.makie.org/stable/)`[-package (*AoG*)](https://aog.makie.org/stable/)
    现在是我在这一系列中介绍的基于图形语法（GoG）的 *第三* 个图形包。'
- en: For the examples demonstrating *AoG* in this article, I will use the exact same
    data as in the previous articles (a detailed explanation of the data can be found
    [here](/the-grammar-of-graphics-or-how-to-do-ggplot-style-plotting-in-julia-1b0ac2162c82))
    and I will try to create the exact same visualizations (bar plots, scatter plots,
    histograms, box plots and violin plots) as I did there, in order to make a 1:1
    comparison of all packages possible. I assume that the data for the examples is
    ready in the DataFrames `countries`, `subregions_cum` and `regions_cum` (as before).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本文章中演示 *AoG* 的示例，我将使用与之前文章中完全相同的数据（数据的详细说明可以在 [这里](/the-grammar-of-graphics-or-how-to-do-ggplot-style-plotting-in-julia-1b0ac2162c82)
    找到），并尝试创建与之前完全相同的可视化（条形图、散点图、直方图、箱形图和小提琴图），以便对所有包进行 1:1 的比较。我假设用于示例的数据已经准备好，分别为
    DataFrames `countries`、`subregions_cum` 和 `regions_cum`（如前所述）。
- en: AlgebraOfGraphics
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AlgebraOfGraphics
- en: The *AoG*-package is perhaps the purest implementation of the GoG so far, as
    we will see in the following examples. It is founded on sound mathematical concepts
    and its authors describe it as a “*a declarative, question-driven language for
    data visualizations*”. Its main developer is [Pietro Vertechi](https://piever.github.io/index.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*AoG* 包可能是到目前为止对 GoG 的最纯粹的实现，正如我们在接下来的示例中将看到的。它建立在坚实的数学概念之上，作者将其描述为“*一种用于数据可视化的声明式、问题驱动的语言*”。其主要开发者是
    [Pietro Vertechi](https://piever.github.io/index.html)。'
- en: 'On a technical level it takes a completely different approach from the packages
    we’ve seen up to now: Whereas `Gadfly.jl` is a standalone graphics package, purely
    written in Julia and `VegaLite.jl` is a Julia-interface for the Vega-Lite graphics
    engine, *AoG* is an add-on package to `[Makie.jl](https://docs.makie.org/stable/)`
    . [*Makie*](https://docs.makie.org/stable/) itself is the youngest graphics package
    within the Julia ecosystem (which is also completely written in Julia).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术层面上，它采用了与我们到目前为止看到的包完全不同的方法：`Gadfly.jl` 是一个完全用 Julia 编写的独立图形包，而 `VegaLite.jl`
    是一个用于 Vega-Lite 图形引擎的 Julia 接口，*AoG* 则是 `[Makie.jl](https://docs.makie.org/stable/)`
    的附加包。[*Makie*](https://docs.makie.org/stable/) 本身是 Julia 生态系统中最年轻的图形包（也是完全用 Julia
    编写的）。
- en: The boundaries between *AoG* and *Makie* are fluid. Several elements of *AoG*
    use *Makie*-attributes and *Makie* is always the fallback solution, if some aspects
    cannot be expressed using the concepts of *AoG* itself.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*AoG* 和 *Makie* 之间的界限是流动的。*AoG* 的几个元素使用了 *Makie* 的属性，并且如果某些方面无法使用 *AoG* 本身的概念来表达，*Makie*
    总是备用解决方案。'
- en: It should also be noted that *AoG* is still a work in progress. Version 0.1
    appeared only in 2020\. Therefore it is not as complete as the other, more mature
    packages and a few aspects simply don’t work yet.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 还应注意的是，*AoG* 仍然在进行中。0.1 版本仅于 2020 年发布。因此，它不如其他更成熟的包完整，某些方面尚未完全实现。
- en: Bar plots
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条形图
- en: So let’s jump into the first visualizations, which depict the population sizes
    of the regions (i.e. continents) and the subregions respectively using bar plots.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们进入第一个可视化图，它分别使用条形图描绘地区（即大陆）和子区域的人口规模。
- en: Population by region
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按地区划分的人口
- en: First we want to show the population size (in 2019) for each region (i.e. continent)
    as a bar within the bar chart. Apart from that, each „region-bar“ should have
    a different color.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想展示每个地区（即大陆）在 2019 年的人口规模，作为条形图中的一条条形。除此之外，每个“地区条形”应具有不同的颜色。
- en: 'Using this simple example, we can see how the basic concepts of *AoG* work:
    In GoG-terms, this visualization is based on data from the `regions_cum` DataFrame
    and it consists of:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个简单的例子，我们可以深入了解 *AoG* 的基本概念：用 GoG 术语来说，这个可视化基于 `regions_cum` 数据框的数据显示，并包含：
- en: a mapping of the data attribute `Region` to the x-axis
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据属性 `Region` 映射到 x 轴
- en: a mapping of the data attribute `Pop2019` to the y-axis
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据属性 `Pop2019` 映射到 y 轴
- en: a mapping of the data attribute `Region` to colors
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据属性 `Region` 映射到颜色
- en: use of the “bar” geometry
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“条形”几何体
- en: 'As I explained in the introduction to the GoG, one of its ideas is, that a
    specification of a visualization can be created from separate building blocks,
    which may be combined to specific needs. *AoG* has fully implemented this idea.
    Therefore we can translate the GoG description directly to *AoG* elements:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在 GoG 介绍中所解释的，其理念之一是可以从不同的构建块创建可视化规范，这些块可以根据特定需求组合。*AoG* 完全实现了这一理念。因此，我们可以直接将
    GoG 描述转换为 *AoG* 元素：
- en: '`regionPop2xy = mapping(:Region, :Pop2019)` is the mapping of `Region` to the
    x-axis and `Pop2019` to the y-axis'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regionPop2xy = mapping(:Region, :Pop2019)` 是将 `Region` 映射到 x 轴，`Pop2019` 映射到
    y 轴'
- en: '`region2color = mapping(color = :Region)` is the mapping of `Region` to colors'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`region2color = mapping(color = :Region)` 是将 `Region` 映射到颜色的映射'
- en: '`barplot = visual(BarPlot)` is the “bar” geometry'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`barplot = visual(BarPlot)` 是“条形”几何体'
- en: 'Now we can combine these building blocks (using the operator `*`), taking data
    from `regions_cum` and create the plot with a call to `draw`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以组合这些构建块（使用操作符 `*`），从 `regions_cum` 中获取数据，并通过调用 `draw` 创建图表：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This results in the following bar plot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成以下条形图：
- en: '![](../Images/54685434d0d2f19a3bb6aa7e0dff3fd9.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/54685434d0d2f19a3bb6aa7e0dff3fd9.png)'
- en: Population by region (1) [image by author]
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按地区划分的人口（1） [图片由作者提供]
- en: 'As in the previous articles, we create also a beautified version of each visualization
    by adding labels, a title and a nice background color among other things. This
    can be done in *AoG* using the *Makie*-parameters `axis` and `figure` to `draw`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的文章一样，我们还为每个可视化创建了美化版本，添加了标签、标题和漂亮的背景色等。这可以在 *AoG* 中使用 *Makie* 参数 `axis`
    和 `figure` 来 `draw` 实现：
- en: 'This leads to the following chart:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下图表：
- en: '![](../Images/1f431ce22bec088942a09196a40a946d.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f431ce22bec088942a09196a40a946d.png)'
- en: Population by region (2) [image by author]
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 按地区划分的人口（2） [图片由作者提供]
- en: Population by Subregion
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按子区域划分的人口
- en: Now let’s move on to the visualization of the population by *subregions*. This
    is basically the same like the plots above, but we take the data from `subregions_cum`
    instead of `regions_cum`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续可视化按 *子区域* 划分的人口。这基本上与上述图表相同，但我们使用 `subregions_cum` 中的数据，而不是 `regions_cum`。
- en: 'So our mapping to the axes is now `subregionPop2xy = mapping(:Subregion, :Pop2019)`.
    As we want the bars for the subregions again colored by region, we can reuse the
    mapping from above and the basic plot can be drawn with:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在的轴映射是 `subregionPop2xy = mapping(:Subregion, :Pop2019)`。由于我们希望子区域的条形图按地区着色，我们可以重复使用上面的映射，基本图表可以通过以下方式绘制：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This produces the following plot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下图表：
- en: '![](../Images/9edbde8b361d151832db3e7a464a4334.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9edbde8b361d151832db3e7a464a4334.png)'
- en: Subregion by population (1) [image by author]
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按人口划分的子区域（1） [图片由作者提供]
- en: 'Obviously the subregion labels would be more readable if we chose a horizontal
    bar plot. This can be achieved by swapping the data attributes in the mapping
    to the axes: `subregionPop2xy_hor = mapping(:Pop2019, :Subregion)` and by adding
    `orientation = :x` to the `visual`. So the code to draw a horizontal version of
    this bar plot is:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果我们选择水平条形图，子区域标签会更易读。这可以通过交换映射到轴的数据属性实现：`subregionPop2xy_hor = mapping(:Pop2019,
    :Subregion)` 并在 `visual` 中添加 `orientation = :x`。绘制水平版本的条形图的代码是：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is unfortunately a specification where it becomes clear that *AoG* is
    still a work in progress. There must be some bug in the rendering process, because
    the result of this `draw` command looks as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这是一个说明*AoG*仍在进展中的规格。在渲染过程中一定有一些 bug，因为这个`draw`命令的结果如下所示：
- en: '![](../Images/464e849885db8713005d1a24478dfd17.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/464e849885db8713005d1a24478dfd17.png)'
- en: Subregion by population (2) [image by author]
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按人口划分的子区域（2）[图片来源：作者]
- en: The ticks on the y-axis as well as the bars are misplaced and the ticks on the
    x-axis are neither what we want.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: y 轴上的刻度以及条形图的位置不正确，x 轴上的刻度也不是我们想要的。
- en: Population by Subregion using Makie.jl
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Makie.jl按子区域划分的人口
- en: So we take this problem as an opportunity to switch to `Makie.jl`. *Makie* is
    a rather low level graphics package. Many things we get automatically in the packages
    we’ve seen so far, have to be specified explicitly in *Makie*. This gives the
    programmer a lot of control but makes the specifications quite verbose.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们把这个问题作为一个机会来切换到`Makie.jl`。*Makie*是一个相当低级的图形包。在我们之前看到的包中自动获得的许多功能，在*Makie*中需要明确指定。这给程序员提供了很多控制权，但使得规格描述非常冗长。
- en: 'Another shortcoming is, that *Makie* cannot handle nominal data. All nominal
    data has to be converted to a numeric form before it can be visualized. In our
    case that means, that we have to convert the nominal data of the attributes `Region`
    and `Subregion` to numbers:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个缺点是，*Makie*无法处理名义数据。所有名义数据在可视化之前必须转换为数字形式。在我们的例子中，这意味着我们需要将`Region`和`Subregion`属性的名义数据转换为数字：
- en: This is relatively easy for `Subregion`, because this attribute contains unique
    values. So we simply use the index values of that column of the DataFrame and
    store them in the new column `subregion_num`.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`Subregion`来说，这相对简单，因为这个属性包含唯一值。因此，我们只需使用该数据帧列的索引值，并将其存储在新列`subregion_num`中。
- en: The `Region` values are not unique. Therefore we convert them first to a `CategoricalArray`
    which does implicitly a mapping to numeric values. We can obtain then the corresponding
    numbers using the function `levelcode` and store them in another new column `region_num`.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Region`值不是唯一的。因此，我们首先将其转换为`CategoricalArray`，这会隐式地映射到数值。然后，我们可以使用函数`levelcode`获得相应的数字，并将其存储在另一个新列`region_num`中。'
- en: 'Apart from that, we chose an adequate color scheme (`Set2_8`) from `ColorSchemes.jl`
    in order to get nice and distinguishable colors for the regions. This scheme looks
    as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们从`ColorSchemes.jl`中选择了一个合适的颜色方案（`Set2_8`），以获得美观且易于区分的区域颜色。这个方案如下所示：
- en: '![](../Images/878d4a4f8710656d5f8cf22b75df6970.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/878d4a4f8710656d5f8cf22b75df6970.png)'
- en: The color scheme Set2_8 [image by author]
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色方案Set2_8 [图片来源：作者]
- en: 'For all these preparations we need the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行这些准备，我们需要以下代码：
- en: 'We will then directly create a “beautified” version of the bar plot with labels
    etc. In *Makie* we need a `Figure` as a base element, where the `barplot` can
    be placed. As *Makie* cannot handle nominal data, we also have to specify the
    ticks for the y-axis manually using the `yticks` attribute as we can see in the
    following code, which creates our horizontal bar plot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将直接创建一个“美化”版的条形图，带有标签等。在*Makie*中，我们需要一个`Figure`作为基础元素，`barplot`可以放置在其中。由于*Makie*无法处理名义数据，我们还需要使用`yticks`属性手动指定
    y 轴的刻度，如下代码所示，这样可以创建我们的水平条形图：
- en: 'This is a lot of code, but the result looks quite pleasing:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码比较长，但结果看起来相当令人满意：
- en: '![](../Images/744c720764f3ec749a47da81629c1dd4.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/744c720764f3ec749a47da81629c1dd4.png)'
- en: Population by subregion (3) [image by author]
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按子区域划分的人口（3）[图片来源：作者]
- en: 'In order to get a version of this bar plot where the subregions are sorted
    by population size, we have to sort the data in `subregions_cum` accordingly using
    `sort!(subregions_cum, :Pop2019)` and then execute the code above (including the
    mapping to numeric data) again. This leads to the following plot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得一个按人口规模排序的条形图版本，我们需要使用`sort!(subregions_cum, :Pop2019)`相应地对`subregions_cum`中的数据进行排序，然后重新执行上面的代码（包括映射到数字数据）。这将生成如下图表：
- en: '![](../Images/aed644a3be9d2dd460fe9528626a53d8.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aed644a3be9d2dd460fe9528626a53d8.png)'
- en: Population by subregion (4) [image by author]
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按子区域划分的人口（4）[图片来源：作者]
- en: Scatter Plots
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散点图
- en: 'After this excursion to *Makie*, we return back to *AoG* trying to visualize
    how population change depends on the size of the population. We can do this using
    a scatter plot as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次*Makie*的插曲之后，我们回到*AoG*，尝试可视化人口变化如何依赖于人口规模。我们可以使用如下的散点图来实现：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The specification contains a mapping of `Pop2019` to the x-axis and `PopChangePct`
    to the y-axis, as well as a mapping of `Region` to a color (we could have reused
    `region2color`at this point, but it is also possible to specify a mapping directly).
    A `visual` can be omitted here, because the point geometry (`Scatter`) is used
    by default by *AoG* in this context. This gives us the following plot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 规格包括将`Pop2019`映射到x轴，将`PopChangePct`映射到y轴，以及将`Region`映射到颜色（我们本可以在此时重用`region2color`，但也可以直接指定映射）。此处可以省略`visual`，因为在这种情况下，*AoG*默认使用点几何图形（`Scatter`）。这给我们提供了以下图表：
- en: '![](../Images/039ec366b41f0dfbf2b831ca03ab9250.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/039ec366b41f0dfbf2b831ca03ab9250.png)'
- en: Growth rate in relation to population (1) [image by author]
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 人口相关的增长率（1） [作者提供的图片]
- en: 'As in the previous articles, we improve now the visualization by using a logarithmic
    scale on the x-axis as the data is quite skewed. In addition we do our “beautification”
    by adding labels, a title etc. All this can be achieved by reusing the plot specification
    `popChangeVsPop` and adding the aforementioned elements by passing adequate parameters
    to `draw`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的文章一样，我们现在通过在x轴上使用对数刻度来改进可视化，因为数据相当偏斜。此外，我们通过添加标签、标题等来进行“美化”。所有这些可以通过重用图表规格`popChangeVsPop`并通过传递适当的参数给`draw`来实现：
- en: 'This leads to the following plot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下图表：
- en: '![](../Images/be2f2c105dd2ee9690d37839d95f19d4.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be2f2c105dd2ee9690d37839d95f19d4.png)'
- en: Growth rate in relation to population (2) [image by author]
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 人口相关的增长率（2） [作者提供的图片]
- en: Histograms
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直方图
- en: 'Now we switch to histograms which we use to depict the distribution of GDP
    per capita among the different countries. As *AoG* offers a so-called `histogram`-*analysis*,
    the specification is quite simple:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们切换到直方图，用于描述不同国家之间的人均GDP分布。由于*AoG*提供了所谓的`histogram`-*analysis*，规格非常简单：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: An *analysis* is in *AoG* a way to process data before visualizing it. And often
    the geometry (`visual`) depends directly on an *analysis,* as in this example,
    where a histogram automatically will be displayed using a bar geometry.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*分析*在*AoG*中是可视化之前处理数据的一种方式。通常几何图形（`visual`）直接依赖于*分析*，例如在这个例子中，直方图将自动使用条形几何图形进行显示。'
- en: '![](../Images/dd260534468adcf29abcc9dc8ae05c9e.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd260534468adcf29abcc9dc8ae05c9e.png)'
- en: Distribution of GDP per capita (1) [image by author]
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 人均GDP的分布（1） [作者提供的图片]
- en: 'The creation of the histogram can be influenced by changing the number of bins
    (via the parameter `bins`) and by using different `normalization` algorithms.
    So we get an improved version by using the following specification:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图的创建可以通过改变箱数（通过参数`bins`）和使用不同的`normalization`算法来影响。因此，我们通过以下规格得到了改进版本：
- en: 'This code shows again, how well *AoG* separates the specification of the visualization
    (`histGDPperCapita`) from its “beautification” (in the call to `draw`) leading
    to the following diagram:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码再次展示了*AoG*如何将可视化的规格（`histGDPperCapita`）与其“美化”（在调用`draw`时）分离开来，从而生成以下图表：
- en: '![](../Images/b90e35c50278487bc5678ebd49b3b139.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b90e35c50278487bc5678ebd49b3b139.png)'
- en: Distribution of GDP per capita (2) [image by author]
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 人均GDP的分布（2） [作者提供的图片]
- en: Box Plots and Violin Plots
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箱线图和小提琴图
- en: Finally we visualize the distribution of GDP per capita in each region using
    box plots and violin plots. This can be achieved with the same simplicity as above,
    since *AoG* offers specific geometries for both plot variants.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用箱线图和小提琴图可视化每个地区的人均GDP分布。这可以像之前一样简单实现，因为*AoG*为这两种图表变体提供了特定的几何图形。
- en: In order to maximize the reuse of elements, we first define the data and the
    mappings for the distribution (`distGDPperCapita`) and add then the geometry (using
    `visual`). As in all examples, the additional “beautification” can then be added
    using adequate parameters within the call to `draw`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大化元素的重用，我们首先定义数据和分布的映射（`distGDPperCapita`），然后添加几何图形（使用`visual`）。如所有示例中所示，可以通过在调用`draw`时传入适当的参数来添加额外的“美化”。
- en: 'This code creates the following two diagrams:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了以下两个图表：
- en: '![](../Images/3fb330d6698d9f4894836d607b0fa7ef.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3fb330d6698d9f4894836d607b0fa7ef.png)'
- en: Distribution of GDP per capita by region (1) [image by author]
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 按地区划分的人均GDP分布（1） [作者提供的图片]
- en: '![](../Images/cf62a6ab1a3a75af617283f66d50d3de.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf62a6ab1a3a75af617283f66d50d3de.png)'
- en: Distribution of GDP per capita by region (2) [image by author]
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 按地区划分的人均GDP分布（2） [作者提供的图片]
- en: Zooming in
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 放大
- en: As the “most interesting” part in both diagrams lies in the range from 0 to
    100,000 (on the y-axis), we want to restrict the plots to that range (doing sort
    of a zoom-in).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于两个图中“最有趣”的部分都位于0到100,000的范围内（在y轴上），我们希望将图表限制在该范围内（进行某种缩放）。
- en: In *AoG* this is possible using the `datalimits` parameter for `visual`. But
    there seems to be another bug in *AoG*, since this parameter has the desired effect
    only when used on the violin plot, but it doesn’t change anything when applied
    to the box plot.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在*AoG*中，这可以通过`datalimits`参数应用于`visual`来实现。但似乎*AoG*中存在另一个bug，因为这个参数只有在用于小提琴图时才有期望的效果，而在应用于箱线图时则没有任何变化。
- en: So using the following specification …
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用以下规格 …
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '… we get this diagram:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: … 我们得到这个图表：
- en: '![](../Images/69905fb63cb801c8b501ec92e423a4d8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69905fb63cb801c8b501ec92e423a4d8.png)'
- en: Distribution of GDP per capita by region (3) [image by author]
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 各地区人均GDP分布 (3) [图片由作者提供]
- en: Conclusions
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: As mentioned above, the *AoG*-package is clearly the purest implementation of
    the Grammar of Graphics we have seen in this series. It really separates mappings,
    geometries etc. into different building-blocks, which can then be combined using
    the `*` operator. It also separates clearly more “decorative” elements (all the
    things we called “beautification” above) from the visualization proper, thus making
    specifications even more modular and giving us more building-blocks which can
    be reused.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，*AoG*包显然是我们在本系列中看到的最纯粹的图形语法实现。它确实将映射、几何等分离成不同的构建模块，然后可以使用`*`运算符组合起来。它还清晰地将更多“装饰性”元素（所有我们上面称之为“美化”的东西）与实际可视化分开，从而使规格更加模块化，并提供了更多可以重用的构建块。
- en: I think it is quite normal for such a young package to still have some rough
    edges, but it has really a sound foundation and looks quite promising. Of course
    it was not possible to show all the functionality of *AoG* in this article. So
    please have a look at the [documentation](https://aog.makie.org/stable/), if you
    want to learn more about it. And last but not least it is also worth reading about
    the philosophy underlying this approach, which can be found [here](https://aog.makie.org/stable/philosophy/).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，对于这样一个年轻的包来说，仍有一些粗糙之处是很正常的，但它确实有坚实的基础，看起来相当有前景。当然，在这篇文章中无法展示*AoG*的所有功能。因此，如果你想了解更多，请查看[文档](https://aog.makie.org/stable/)。最后但同样重要的是，了解这种方法的基本理念也是值得的，可以在[这里](https://aog.makie.org/stable/philosophy/)找到。
- en: For those who want to dive deeper into the code, there is also a [Pluto notebook](https://github.com/roland-KA/StatisticalPlotsWithJulia/blob/main/notebooks/DV-Basics-AlgebraOfGraphics.jl)
    containing all the examples shown above in my GitHub repository.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些希望深入研究代码的人，还有一个[Pluto notebook](https://github.com/roland-KA/StatisticalPlotsWithJulia/blob/main/notebooks/DV-Basics-AlgebraOfGraphics.jl)，其中包含我在GitHub库中展示的所有示例。
