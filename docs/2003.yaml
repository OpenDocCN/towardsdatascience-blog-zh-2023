- en: 'The Docker Compose of ETL: Meerschaum Compose'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-docker-compose-of-etl-meerschaum-compose-777e0e7304d1?source=collection_archive---------15-----------------------#2023-06-19](https://towardsdatascience.com/the-docker-compose-of-etl-meerschaum-compose-777e0e7304d1?source=collection_archive---------15-----------------------#2023-06-19)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/29603b9f71a9d9ec6dd01e06d9c2f749.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [CHUTTERSNAP](https://unsplash.com/@chuttersnap?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)[![Bennett
    Meares](../Images/3511be817c635cee99b09014f4fc5322.png)](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)
    [Bennett Meares](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff9b22e04ae69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&user=Bennett+Meares&userId=f9b22e04ae69&source=post_page-f9b22e04ae69----777e0e7304d1---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)
    ·6 min read·Jun 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F777e0e7304d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&user=Bennett+Meares&userId=f9b22e04ae69&source=-----777e0e7304d1---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F777e0e7304d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&source=-----777e0e7304d1---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: This article is about [**Meerschaum Compose**](https://meerschaum.io/reference/compose/),
    a tool for defining ETL pipelines in YAML and a plugin for the data engineering
    framework [Meerschaum](https://meerschaum.io/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Docker was a game-changer, revolutionizing the way we design, build, and run
    our cloud applications. Pretty early on, however, developers realized its flexibility
    made collaboration difficult, so `docker-compose` became to the tool of choice
    for managing environments and multi-container projects.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar vein, this issue of consistent environments also emerged for the
    ETL framework [Meerschaum](https://meercshaum.io). As more data engineers built
    their pipelines using the platform, the dynamic nature of pipes meant that a solution
    was needed to provide project-level isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Inspired by Docker Compose, this solution came in the form of a project called
    [Meerschaum Compose](https://meerschaum.io/reference/compose/). I use Compose
    daily at work and for my personal projects to build and manage my data pipelines,
    and today I’d like to show how you can build your ETL projects with Compose.
  prefs: []
  type: TYPE_NORMAL
- en: How Compose Tames the Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With great power comes great responsibility, and in Docker’s case, this responsibility
    is handled by a manifest file called `docker-compose.yml` which describes how
    services within an application should run. This file acts as living documentation
    that facilitates prototyping and describes expected environments to CloudOps.
    Through a simple standard, Docker Compose fills gaps in the development process
    by providing a convenient way to standardize and share environments for multi-service
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Meerschaum Compose** serves a similar purpose: in a `mrsm-compose.yml` file,
    you specify everything you might need for a project: the expected [environment](https://meerschaum.io/reference/environment/),
    [plugins](https://meerschaum.io/reference/plugins/), [pipes](https://meerschaum.io/reference/pipes/),
    and [connectors](https://meerschaum.io/reference/connectors/).'
  prefs: []
  type: TYPE_NORMAL
- en: Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you encounter a new Compose project (using the [Tech Slam ‘N Eggs demo
    project](https://github.com/bmeares/techslamneggs) in the screenshots below),
    try these commands to get your bearings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** see [this repository](https://github.com/bmeares/mrsm-compose-template)
    if you’d like to run Compose in a Docker container.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`**mrsm compose run**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Registers the pipes and syncs them one-by-one. This is great for ensuring execution
    order and updating the pipes’ parameters with the database. One common pattern
    is to chain together various stages in separate compose files as part of a larger
    ETL process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** the command `mrsm compose sync pipes` is parallelized and is best
    used if the pipes within the compose file are independent.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/cd955aae03970a39cc952d87fcb61b12.png)'
  prefs: []
  type: TYPE_IMG
- en: The compose run command syncs pipes one-at-a-time.
  prefs: []
  type: TYPE_NORMAL
- en: '`**mrsm compose explain**`'
  prefs: []
  type: TYPE_NORMAL
- en: Parses the Compose file and prints the current environment and status of defined
    pipes. This is helpful when troubleshooting and understanding the structure of
    a project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/160134a0ed611d60d212a4e13e6ace5d.png)'
  prefs: []
  type: TYPE_IMG
- en: The compose explain command prints the status of defined pipes.
  prefs: []
  type: TYPE_NORMAL
- en: '`**mrsm compose up --dry**`'
  prefs: []
  type: TYPE_NORMAL
- en: Registers and updates the remote pipes’ parameters. This is implicitly run as
    part of `mrsm compose run` and should be run before standard Meerschaum actions
    like `mrsm compose sync pipes`. The `--dry` flag prevents syncing jobs from running.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Compose will [tag pipes](https://meerschaum.io/reference/pipes/tags/)
    with the project name. Set the key `project_name` if using multiple compose files
    within a project.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`**mrsm compose down -v**`'
  prefs: []
  type: TYPE_NORMAL
- en: Stops jobs and deletes pipes. This is analogous to `docker compose down -v`
    (i.e. `-v` for “volumes”).
  prefs: []
  type: TYPE_NORMAL
- en: '`**mrsm compose <action>**`'
  prefs: []
  type: TYPE_NORMAL
- en: Executes standard Meerschaum actions from the project environment (e.g. `sync
    pipes`, `delete pipes`, custom actions). I often run `mrsm compose python` to
    jump into a REPL within the project environment.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you run an action with `mrsm compose`, the flag `--tags {project_name}`
    is appended (unless overridden) to ensure that you only interact with the pipes
    within the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ca148ed2498fd40a4211df8da5c9489.png)'
  prefs: []
  type: TYPE_IMG
- en: An example Meerschaum Compose project for ETL on weather data.
  prefs: []
  type: TYPE_NORMAL
- en: Pipes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The humble [pipe](https://meerschaum.io/reference/pipes/) is Meerschaum’s abstraction
    for incremental ETL. Pipes have input and output [connectors](https://meerschaum.io/reference/connectors/)
    and store [parameters](https://meerschaum.io/reference/pipes/#parameters) to configure
    the behavior of their syncing processes. This may be as simple as a SQL query
    or may include custom keys for use in your plugins.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47b0e7e17488cdfa1760b18a6662361f.png)'
  prefs: []
  type: TYPE_IMG
- en: Pipes from the above Compose project displayed by the web UI
  prefs: []
  type: TYPE_NORMAL
- en: 'Because pipes’ metadata are stored alongside their tables, they’re easily editable
    (whether via `edit pipes` or on the web UI), which facilitates prototyping. But
    this dynamic nature introduces the same problem described at the beginning of
    this article: in order to scale development, a Compose file is needed to define
    a project’s components in a way that can be easily version-controlled.'
  prefs: []
  type: TYPE_NORMAL
- en: According to the [Meerschaum Compose specification](https://meerschaum.io/reference/compose/#-schema),
    pipes are defined in a list under the keys `sync:pipes`. Each item defines the
    keys and parameters needed to construct the pipe, like a blueprint for what you
    expect the pipes in the database to reflect.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following snippet would define a pipe that would sync a table
    `weather` from a remote PostgreSQL database (defined below as `sql:source`) to
    a local SQLite file (`sql:dest` in this project).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This example would incrementally update a table named `weather` using the datetime
    axis `timestamp` for range bounding (1 day backtracking), and this column plus
    the ID column `station` together would make up a composite primary key used for
    de-duplication.
  prefs: []
  type: TYPE_NORMAL
- en: The URI is written literally just as an example; if you are committing a compose
    file, either reference an environment variable (e.g. `$SECRET_URI`) or your host
    Meerschaum configuration (e.g. `MRSM{meerschaum:connectors:sql:source}`).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Connectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, a quick refresher on [Meerschaum connectors](https://meerschaum.io/reference/connectors/):
    you can define connectors through several ways, the most popular of which being
    through [environment variables](https://meerschaum.io/reference/connectors/#-environment-connectors).
    Suppose you define your connection secrets in an environment file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first environment variable `MRSM_SQL_REMOTE` would define the connector
    `sql:remote`. If you sourced this file, you could verify this connector with the
    command `mrsm show connectors sql:remote`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second variable is an example of how to define a custom `FooConnector`,
    which you could create using the `@make_connector` decorator in a plugin. Custom
    connectors are a powerful tool, but for now, here’s the basic structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So we’ve just reviewed how to define connectors in our host environment. Let’s
    see how to make these host connectors available in a Meerschaum project. In the
    compose file, all of the connectors we need for our project are defined under
    `config:meerschaum:connectors`. Use the `MRSM{}` syntax to reference the keys
    from your host environment and pass them into the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meerschaum is easily extendable via [plugins](https://meerschaum.io/reference/plugins/),
    which are Python modules. Plugins may fetch data, implement custom connectors,
    and/or extend Meerschaum (e.g. custom actions, flags, API endpoints, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: Meerschaum supports multiple plugins directories (via `MRSM_PLUGINS_DIR`), which
    may be set under the `plugins_dir` key in `mrsm-compose.yaml` (the default is
    a directory `plugins`).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Storing your plugins within a Compose project makes it clear how you expect
    your plugins to be used. For example, [the Compose file within the MongoDBConnector
    project](https://github.com/bmeares/mongodb-connector/blob/main/mrsm-compose.yaml)
    demonstrates how the custom connector is used as both a connector and as an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Package Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you first start using Meerschaum Compose, the first thing you’ll notice
    is that it will start installing a fair amount of Python packages. Don’t worry
    about your environment ― everything is installed into virtual environments within
    your project’s `root` subdirectory (a bit ironic, right?). You can install your
    plugins’ dependencies with `mrsm compose init`.
  prefs: []
  type: TYPE_NORMAL
- en: To share packages between projects, set the key `root_dir` in `mrsm-compose.yml`
    to a new path. Deleting this `root` directory will effectively uninstall all of
    the packages that Compose downloaded, keeping your host environment intact.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meerschaum Compose has become my go-to tool for building out my medium-scale
    ETL projects. It has a similar workflow to [Meltano](https://meltano.com/) or
    [dbt](https://www.getdbt.com/) but with a lower barrier to entry and more dynamic
    control over the ETL process. It’s a neat workflow to organize plugins, connectors,
    and pipes in a way that works nicely in a team.
  prefs: []
  type: TYPE_NORMAL
- en: You can quickly kickstart a new project with the [Meerschaum Compose template
    repository](https://github.com/bmeares/mrsm-compose-template) ― see the [MongoDBConnector
    plugin](https://github.com/bmeares/mongodb-connector) or [Tech Slam ‘N Eggs demo](https://github.com/bmeares/techslamneggs)
    for practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to add your project to the [Awesome Meerschaum list](https://github.com/bmeares/awesome-meerschaum)!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
