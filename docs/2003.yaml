- en: 'The Docker Compose of ETL: Meerschaum Compose'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ETL 的 Docker Compose：Meerschaum Compose
- en: 原文：[https://towardsdatascience.com/the-docker-compose-of-etl-meerschaum-compose-777e0e7304d1?source=collection_archive---------15-----------------------#2023-06-19](https://towardsdatascience.com/the-docker-compose-of-etl-meerschaum-compose-777e0e7304d1?source=collection_archive---------15-----------------------#2023-06-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-docker-compose-of-etl-meerschaum-compose-777e0e7304d1?source=collection_archive---------15-----------------------#2023-06-19](https://towardsdatascience.com/the-docker-compose-of-etl-meerschaum-compose-777e0e7304d1?source=collection_archive---------15-----------------------#2023-06-19)
- en: '![](../Images/29603b9f71a9d9ec6dd01e06d9c2f749.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/29603b9f71a9d9ec6dd01e06d9c2f749.png)'
- en: Photo by [CHUTTERSNAP](https://unsplash.com/@chuttersnap?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[CHUTTERSNAP](https://unsplash.com/@chuttersnap?utm_source=medium&utm_medium=referral)拍摄，刊登于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '[](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)[![Bennett
    Meares](../Images/3511be817c635cee99b09014f4fc5322.png)](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)
    [Bennett Meares](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)[![本尼特·米尔斯](../Images/3511be817c635cee99b09014f4fc5322.png)](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)
    [本尼特·米尔斯](https://bmeares.medium.com/?source=post_page-----777e0e7304d1--------------------------------)'
- en: ·
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff9b22e04ae69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&user=Bennett+Meares&userId=f9b22e04ae69&source=post_page-f9b22e04ae69----777e0e7304d1---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)
    ·6 min read·Jun 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F777e0e7304d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&user=Bennett+Meares&userId=f9b22e04ae69&source=-----777e0e7304d1---------------------clap_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff9b22e04ae69&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&user=Bennett+Meares&userId=f9b22e04ae69&source=post_page-f9b22e04ae69----777e0e7304d1---------------------post_header-----------)
    发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----777e0e7304d1--------------------------------)
    · 6分钟阅读 · 2023年6月19日 [](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F777e0e7304d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&user=Bennett+Meares&userId=f9b22e04ae69&source=-----777e0e7304d1---------------------clap_footer-----------)'
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F777e0e7304d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&source=-----777e0e7304d1---------------------bookmark_footer-----------)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F777e0e7304d1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-docker-compose-of-etl-meerschaum-compose-777e0e7304d1&source=-----777e0e7304d1---------------------bookmark_footer-----------)'
- en: This article is about [**Meerschaum Compose**](https://meerschaum.io/reference/compose/),
    a tool for defining ETL pipelines in YAML and a plugin for the data engineering
    framework [Meerschaum](https://meerschaum.io/).
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文介绍了[**Meerschaum Compose**](https://meerschaum.io/reference/compose/)，这是一个用于在
    YAML 中定义 ETL 流水线的工具，以及一个数据工程框架[Meerschaum](https://meerschaum.io/)的插件。
- en: Docker was a game-changer, revolutionizing the way we design, build, and run
    our cloud applications. Pretty early on, however, developers realized its flexibility
    made collaboration difficult, so `docker-compose` became to the tool of choice
    for managing environments and multi-container projects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的出现彻底改变了我们设计、构建和运行云应用程序的方式。然而，开发者很快意识到其灵活性使得协作变得困难，因此 `docker-compose`
    成为管理环境和多容器项目的首选工具。
- en: In a similar vein, this issue of consistent environments also emerged for the
    ETL framework [Meerschaum](https://meercshaum.io). As more data engineers built
    their pipelines using the platform, the dynamic nature of pipes meant that a solution
    was needed to provide project-level isolation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，这个一致环境的问题也出现在 ETL 框架 [Meerschaum](https://meercshaum.io) 中。随着越来越多的数据工程师使用该平台构建他们的管道，管道的动态特性意味着需要一个解决方案来提供项目级的隔离。
- en: Inspired by Docker Compose, this solution came in the form of a project called
    [Meerschaum Compose](https://meerschaum.io/reference/compose/). I use Compose
    daily at work and for my personal projects to build and manage my data pipelines,
    and today I’d like to show how you can build your ETL projects with Compose.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 受到 Docker Compose 的启发，这个解决方案以一个名为 [Meerschaum Compose](https://meerschaum.io/reference/compose/)
    的项目形式出现。我每天在工作和个人项目中使用 Compose 来构建和管理数据管道，今天我想展示如何使用 Compose 构建 ETL 项目。
- en: How Compose Tames the Engine
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Compose 如何驯服引擎
- en: With great power comes great responsibility, and in Docker’s case, this responsibility
    is handled by a manifest file called `docker-compose.yml` which describes how
    services within an application should run. This file acts as living documentation
    that facilitates prototyping and describes expected environments to CloudOps.
    Through a simple standard, Docker Compose fills gaps in the development process
    by providing a convenient way to standardize and share environments for multi-service
    projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 权力越大，责任越大。在 Docker 的情况下，这种责任由一个名为`docker-compose.yml`的清单文件处理，该文件描述了应用程序内的服务应该如何运行。该文件充当了活文档，便于原型设计并向
    CloudOps 描述预期环境。通过一个简单的标准，Docker Compose 通过提供一种方便的方式来标准化和共享多服务项目的环境，从而填补了开发过程中的空白。
- en: '**Meerschaum Compose** serves a similar purpose: in a `mrsm-compose.yml` file,
    you specify everything you might need for a project: the expected [environment](https://meerschaum.io/reference/environment/),
    [plugins](https://meerschaum.io/reference/plugins/), [pipes](https://meerschaum.io/reference/pipes/),
    and [connectors](https://meerschaum.io/reference/connectors/).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Meerschaum Compose** 服务于类似的目的：在`mrsm-compose.yml`文件中，你可以指定项目可能需要的一切：预期的 [环境](https://meerschaum.io/reference/environment/)、[插件](https://meerschaum.io/reference/plugins/)、[管道](https://meerschaum.io/reference/pipes/)和
    [连接器](https://meerschaum.io/reference/connectors/)。'
- en: Commands
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令
- en: 'When you encounter a new Compose project (using the [Tech Slam ‘N Eggs demo
    project](https://github.com/bmeares/techslamneggs) in the screenshots below),
    try these commands to get your bearings:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到一个新的 Compose 项目（在下面的屏幕截图中使用 [Tech Slam ‘N Eggs 演示项目](https://github.com/bmeares/techslamneggs)）时，尝试这些命令来熟悉环境：
- en: '**Note:** see [this repository](https://github.com/bmeares/mrsm-compose-template)
    if you’d like to run Compose in a Docker container.'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 如果你想在 Docker 容器中运行 Compose，请参见 [这个仓库](https://github.com/bmeares/mrsm-compose-template)。'
- en: '`**mrsm compose run**`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`**mrsm compose run**`'
- en: 'Registers the pipes and syncs them one-by-one. This is great for ensuring execution
    order and updating the pipes’ parameters with the database. One common pattern
    is to chain together various stages in separate compose files as part of a larger
    ETL process:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注册管道并逐一同步它们。这对于确保执行顺序以及使用数据库更新管道参数非常有用。一个常见的模式是将不同阶段的 Compose 文件链接在一起，作为更大的
    ETL 过程的一部分：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Note:** the command `mrsm compose sync pipes` is parallelized and is best
    used if the pipes within the compose file are independent.'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 命令`mrsm compose sync pipes`是并行执行的，最适用于 Compose 文件中的管道彼此独立的情况。'
- en: '![](../Images/cd955aae03970a39cc952d87fcb61b12.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cd955aae03970a39cc952d87fcb61b12.png)'
- en: The compose run command syncs pipes one-at-a-time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Compose 运行命令一次同步一个管道。
- en: '`**mrsm compose explain**`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`**mrsm compose explain**`'
- en: Parses the Compose file and prints the current environment and status of defined
    pipes. This is helpful when troubleshooting and understanding the structure of
    a project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 解析 Compose 文件并打印定义管道的当前环境和状态。这在故障排除和理解项目结构时非常有用。
- en: '![](../Images/160134a0ed611d60d212a4e13e6ace5d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/160134a0ed611d60d212a4e13e6ace5d.png)'
- en: The compose explain command prints the status of defined pipes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Compose explain 命令打印定义管道的状态。
- en: '`**mrsm compose up --dry**`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`**mrsm compose up --dry**`'
- en: Registers and updates the remote pipes’ parameters. This is implicitly run as
    part of `mrsm compose run` and should be run before standard Meerschaum actions
    like `mrsm compose sync pipes`. The `--dry` flag prevents syncing jobs from running.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注册并更新远程管道的参数。这隐含地作为`mrsm compose run`的一部分运行，并应在标准的 Meerschaum 操作（如`mrsm compose
    sync pipes`）之前运行。`--dry`标志可以防止同步作业运行。
- en: '**Note:** Compose will [tag pipes](https://meerschaum.io/reference/pipes/tags/)
    with the project name. Set the key `project_name` if using multiple compose files
    within a project.'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** Compose 将 [标记管道](https://meerschaum.io/reference/pipes/tags/) 与项目名称。如果在一个项目中使用多个
    compose 文件，请设置键 `project_name`。'
- en: '`**mrsm compose down -v**`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`**mrsm compose down -v**`'
- en: Stops jobs and deletes pipes. This is analogous to `docker compose down -v`
    (i.e. `-v` for “volumes”).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 停止作业并删除管道。这类似于 `docker compose down -v`（即 `-v` 表示“卷”）。
- en: '`**mrsm compose <action>**`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`**mrsm compose <action>**`'
- en: Executes standard Meerschaum actions from the project environment (e.g. `sync
    pipes`, `delete pipes`, custom actions). I often run `mrsm compose python` to
    jump into a REPL within the project environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目环境中执行标准的 Meerschaum 操作（例如 `sync pipes`、`delete pipes`、自定义操作）。我经常运行 `mrsm
    compose python` 以跳入项目环境中的 REPL。
- en: Whenever you run an action with `mrsm compose`, the flag `--tags {project_name}`
    is appended (unless overridden) to ensure that you only interact with the pipes
    within the project.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你运行 `mrsm compose` 命令时，标志 `--tags {project_name}` 会被附加（除非被覆盖），以确保你只与项目中的管道进行交互。
- en: '![](../Images/1ca148ed2498fd40a4211df8da5c9489.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ca148ed2498fd40a4211df8da5c9489.png)'
- en: An example Meerschaum Compose project for ETL on weather data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Meerschaum Compose 项目的示例，用于天气数据的 ETL。
- en: Pipes
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: The humble [pipe](https://meerschaum.io/reference/pipes/) is Meerschaum’s abstraction
    for incremental ETL. Pipes have input and output [connectors](https://meerschaum.io/reference/connectors/)
    and store [parameters](https://meerschaum.io/reference/pipes/#parameters) to configure
    the behavior of their syncing processes. This may be as simple as a SQL query
    or may include custom keys for use in your plugins.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 谦逊的 [管道](https://meerschaum.io/reference/pipes/) 是 Meerschaum 对增量 ETL 的抽象。管道具有输入和输出
    [连接器](https://meerschaum.io/reference/connectors/) 并存储 [参数](https://meerschaum.io/reference/pipes/#parameters)
    来配置其同步过程的行为。这可以是简单的 SQL 查询，也可以包括用于插件的自定义键。
- en: '![](../Images/47b0e7e17488cdfa1760b18a6662361f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47b0e7e17488cdfa1760b18a6662361f.png)'
- en: Pipes from the above Compose project displayed by the web UI
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 Compose 项目的管道通过 web UI 展示
- en: 'Because pipes’ metadata are stored alongside their tables, they’re easily editable
    (whether via `edit pipes` or on the web UI), which facilitates prototyping. But
    this dynamic nature introduces the same problem described at the beginning of
    this article: in order to scale development, a Compose file is needed to define
    a project’s components in a way that can be easily version-controlled.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于管道的元数据与其表一起存储，它们易于编辑（无论是通过 `edit pipes` 还是在 web UI 上），这有助于原型设计。但这种动态特性引入了本文开头描述的同样问题：为了扩展开发，需要一个
    Compose 文件来定义项目组件，以便于版本控制。
- en: According to the [Meerschaum Compose specification](https://meerschaum.io/reference/compose/#-schema),
    pipes are defined in a list under the keys `sync:pipes`. Each item defines the
    keys and parameters needed to construct the pipe, like a blueprint for what you
    expect the pipes in the database to reflect.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [Meerschaum Compose 规范](https://meerschaum.io/reference/compose/#-schema)，管道在
    `sync:pipes` 键下的列表中定义。每个项目定义了构建管道所需的键和参数，就像你期望数据库中的管道所反映的蓝图。
- en: For example, the following snippet would define a pipe that would sync a table
    `weather` from a remote PostgreSQL database (defined below as `sql:source`) to
    a local SQLite file (`sql:dest` in this project).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码片段将定义一个管道，该管道会将一个 `weather` 表从远程 PostgreSQL 数据库（在下面定义为 `sql:source`）同步到本地
    SQLite 文件（在本项目中定义为 `sql:dest`）。
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example would incrementally update a table named `weather` using the datetime
    axis `timestamp` for range bounding (1 day backtracking), and this column plus
    the ID column `station` together would make up a composite primary key used for
    de-duplication.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将使用日期时间轴 `timestamp` 进行范围边界（向回追溯 1 天）逐步更新一个名为 `weather` 的表，这一列加上 ID 列 `station`
    一起构成一个复合主键，用于去重。
- en: The URI is written literally just as an example; if you are committing a compose
    file, either reference an environment variable (e.g. `$SECRET_URI`) or your host
    Meerschaum configuration (e.g. `MRSM{meerschaum:connectors:sql:source}`).
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: URI 是字面上写的示例；如果你正在提交一个 compose 文件，请引用环境变量（例如 `$SECRET_URI`）或你的主 Meerschaum 配置（例如
    `MRSM{meerschaum:connectors:sql:source}`）。
- en: Connectors
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接器
- en: 'First, a quick refresher on [Meerschaum connectors](https://meerschaum.io/reference/connectors/):
    you can define connectors through several ways, the most popular of which being
    through [environment variables](https://meerschaum.io/reference/connectors/#-environment-connectors).
    Suppose you define your connection secrets in an environment file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，简单回顾一下[Meerschaum 连接器](https://meerschaum.io/reference/connectors/)：你可以通过几种方式定义连接器，其中最受欢迎的是通过[环境变量](https://meerschaum.io/reference/connectors/#-environment-connectors)。假设你在环境文件中定义了连接秘密：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first environment variable `MRSM_SQL_REMOTE` would define the connector
    `sql:remote`. If you sourced this file, you could verify this connector with the
    command `mrsm show connectors sql:remote`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个环境变量`MRSM_SQL_REMOTE`定义了连接器`sql:remote`。如果你引入了这个文件，你可以通过命令`mrsm show connectors
    sql:remote`来验证这个连接器。
- en: 'The second variable is an example of how to define a custom `FooConnector`,
    which you could create using the `@make_connector` decorator in a plugin. Custom
    connectors are a powerful tool, but for now, here’s the basic structure:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个变量是如何定义自定义`FooConnector`的示例，你可以通过插件中的`@make_connector`装饰器来创建它。自定义连接器是一个强大的工具，但现在，这里是基本结构：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So we’ve just reviewed how to define connectors in our host environment. Let’s
    see how to make these host connectors available in a Meerschaum project. In the
    compose file, all of the connectors we need for our project are defined under
    `config:meerschaum:connectors`. Use the `MRSM{}` syntax to reference the keys
    from your host environment and pass them into the project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们刚刚回顾了如何在主机环境中定义连接器。让我们看看如何在 Meerschaum 项目中使这些主机连接器可用。在 Compose 文件中，我们项目所需的所有连接器都在`config:meerschaum:connectors`下定义。使用`MRSM{}`语法来引用主机环境中的键，并将它们传递到项目中。
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Plugins
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件
- en: Meerschaum is easily extendable via [plugins](https://meerschaum.io/reference/plugins/),
    which are Python modules. Plugins may fetch data, implement custom connectors,
    and/or extend Meerschaum (e.g. custom actions, flags, API endpoints, etc.).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Meerschaum 可以通过[插件](https://meerschaum.io/reference/plugins/)进行轻松扩展，这些插件是 Python
    模块。插件可以获取数据、实现自定义连接器和/或扩展 Meerschaum（例如，自定义操作、标志、API 端点等）。
- en: Meerschaum supports multiple plugins directories (via `MRSM_PLUGINS_DIR`), which
    may be set under the `plugins_dir` key in `mrsm-compose.yaml` (the default is
    a directory `plugins`).
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Meerschaum 支持多个插件目录（通过`MRSM_PLUGINS_DIR`），可以在`mrsm-compose.yaml`中的`plugins_dir`键下设置（默认是`plugins`目录）。
- en: Storing your plugins within a Compose project makes it clear how you expect
    your plugins to be used. For example, [the Compose file within the MongoDBConnector
    project](https://github.com/bmeares/mongodb-connector/blob/main/mrsm-compose.yaml)
    demonstrates how the custom connector is used as both a connector and as an instance.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的插件存储在 Compose 项目中，可以清楚地说明你期望插件的使用方式。例如，[MongoDBConnector 项目中的 Compose 文件](https://github.com/bmeares/mongodb-connector/blob/main/mrsm-compose.yaml)演示了自定义连接器如何同时作为连接器和实例使用。
- en: Package Management
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包管理
- en: When you first start using Meerschaum Compose, the first thing you’ll notice
    is that it will start installing a fair amount of Python packages. Don’t worry
    about your environment ― everything is installed into virtual environments within
    your project’s `root` subdirectory (a bit ironic, right?). You can install your
    plugins’ dependencies with `mrsm compose init`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次开始使用 Meerschaum Compose 时，首先会注意到它会开始安装大量的 Python 包。不要担心你的环境——所有东西都安装在你项目的`root`子目录中的虚拟环境中（有点讽刺，对吧？）。你可以用`mrsm
    compose init`安装插件的依赖项。
- en: To share packages between projects, set the key `root_dir` in `mrsm-compose.yml`
    to a new path. Deleting this `root` directory will effectively uninstall all of
    the packages that Compose downloaded, keeping your host environment intact.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在项目之间共享包，请在`mrsm-compose.yml`中设置`root_dir`键为新的路径。删除这个`root`目录将有效卸载 Compose
    下载的所有包，同时保持你的主机环境不变。
- en: Conclusion
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Meerschaum Compose has become my go-to tool for building out my medium-scale
    ETL projects. It has a similar workflow to [Meltano](https://meltano.com/) or
    [dbt](https://www.getdbt.com/) but with a lower barrier to entry and more dynamic
    control over the ETL process. It’s a neat workflow to organize plugins, connectors,
    and pipes in a way that works nicely in a team.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Meerschaum Compose 已经成为我构建中型 ETL 项目的首选工具。它的工作流程类似于[Meltano](https://meltano.com/)或[dbt](https://www.getdbt.com/)，但入门门槛更低，对
    ETL 过程的控制更为动态。这是一种组织插件、连接器和管道的整洁工作流程，非常适合团队合作。
- en: You can quickly kickstart a new project with the [Meerschaum Compose template
    repository](https://github.com/bmeares/mrsm-compose-template) ― see the [MongoDBConnector
    plugin](https://github.com/bmeares/mongodb-connector) or [Tech Slam ‘N Eggs demo](https://github.com/bmeares/techslamneggs)
    for practical examples.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过[Meerschaum Compose 模板仓库](https://github.com/bmeares/mrsm-compose-template)快速启动一个新项目——查看[MongoDBConnector
    插件](https://github.com/bmeares/mongodb-connector)或[Tech Slam ‘N Eggs 演示](https://github.com/bmeares/techslamneggs)以获取实际示例。
- en: Feel free to add your project to the [Awesome Meerschaum list](https://github.com/bmeares/awesome-meerschaum)!
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 随意将你的项目添加到[Awesome Meerschaum 列表](https://github.com/bmeares/awesome-meerschaum)！
