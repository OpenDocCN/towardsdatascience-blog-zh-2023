- en: 'API 101: Backdoor to Backend'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 101：后端的秘密通道
- en: 原文：[https://towardsdatascience.com/api-101-backdoor-to-backend-8da989e1551c?source=collection_archive---------10-----------------------#2023-01-23](https://towardsdatascience.com/api-101-backdoor-to-backend-8da989e1551c?source=collection_archive---------10-----------------------#2023-01-23)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/api-101-backdoor-to-backend-8da989e1551c?source=collection_archive---------10-----------------------#2023-01-23](https://towardsdatascience.com/api-101-backdoor-to-backend-8da989e1551c?source=collection_archive---------10-----------------------#2023-01-23)
- en: '![](../Images/40b9a5b9f2c72bd1a2b7365a09ef5842.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/40b9a5b9f2c72bd1a2b7365a09ef5842.png)'
- en: Photo by [Lala Azizli](https://unsplash.com/@lazizli?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Lala Azizli](https://unsplash.com/@lazizli?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: A Quick Dive Into The World of APIs, And How APIs Drive Applications
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速深入 API 的世界，以及 API 如何驱动应用
- en: '[](https://amansharma2910.medium.com/?source=post_page-----8da989e1551c--------------------------------)[![Aman
    Sharma](../Images/337a857ff5e919b61237ce2aeeaded63.png)](https://amansharma2910.medium.com/?source=post_page-----8da989e1551c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8da989e1551c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8da989e1551c--------------------------------)
    [Aman Sharma](https://amansharma2910.medium.com/?source=post_page-----8da989e1551c--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://amansharma2910.medium.com/?source=post_page-----8da989e1551c--------------------------------)[![阿曼·夏尔马](../Images/337a857ff5e919b61237ce2aeeaded63.png)](https://amansharma2910.medium.com/?source=post_page-----8da989e1551c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8da989e1551c--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8da989e1551c--------------------------------)
    [阿曼·夏尔马](https://amansharma2910.medium.com/?source=post_page-----8da989e1551c--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F84e03a4d7261&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fapi-101-backdoor-to-backend-8da989e1551c&user=Aman+Sharma&userId=84e03a4d7261&source=post_page-84e03a4d7261----8da989e1551c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8da989e1551c--------------------------------)
    ·11 min read·Jan 23, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8da989e1551c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fapi-101-backdoor-to-backend-8da989e1551c&user=Aman+Sharma&userId=84e03a4d7261&source=-----8da989e1551c---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F84e03a4d7261&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fapi-101-backdoor-to-backend-8da989e1551c&user=Aman+Sharma&userId=84e03a4d7261&source=post_page-84e03a4d7261----8da989e1551c---------------------post_header-----------)
    发布在 [数据科学前沿](https://towardsdatascience.com/?source=post_page-----8da989e1551c--------------------------------)
    ·11分钟阅读·2023年1月23日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F8da989e1551c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fapi-101-backdoor-to-backend-8da989e1551c&user=Aman+Sharma&userId=84e03a4d7261&source=-----8da989e1551c---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8da989e1551c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fapi-101-backdoor-to-backend-8da989e1551c&source=-----8da989e1551c---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F8da989e1551c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fapi-101-backdoor-to-backend-8da989e1551c&source=-----8da989e1551c---------------------bookmark_footer-----------)'
- en: tl;dr — This is a very detailed introduction to APIs, application development,
    and a theoretical starter for backend development. This can be used as educational
    material on these topics.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: tl;dr — 这是对 API、应用开发以及后端开发理论的非常详细的介绍。可以作为这些主题的教育材料使用。
- en: In this digital age, we are surrounded by applications that we pretty much rely
    on to facilitate almost all our day-to-day needs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个数字时代，我们被各种应用包围，几乎依赖它们来满足我们几乎所有的日常需求。
- en: Is reading the news, and getting yourself updated with the happenings around
    the world the first thing you like to do when you wake up? Well, there are news
    applications like *Google News* and *Inshorts* for that. Running late and wanna
    grab a cab to work? You can quickly get one right at your doorstep with the *Uber*
    app! Hungry but don’t wanna cook? Just grab your phone and order your grocery
    right from the comfort of your home without having to carry those heavy grocery
    bags and roam around stores.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你起床时最喜欢做的第一件事是阅读新闻，了解全球发生的事情吗？好吧，有像 *Google News* 和 *Inshorts* 这样的新闻应用程序。迟到了，想叫辆出租车去工作？你可以通过
    *Uber* 应用程序快速在家门口叫到一辆！饿了但不想做饭？只需拿起手机，舒适地从家里订购食品，无需提着沉重的购物袋和在商店里徘徊。
- en: But why are we discussing this? The point is that today we have these very convenient
    apps that can do almost everything for us. *But that’s from the user's perspective.*
    To a software developer, there’s more to that.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们为什么要讨论这个？关键是今天我们有这些非常方便的应用程序，可以为我们做几乎所有事情。*但这是从用户的角度来看。* 对于软件开发者来说，情况要复杂得多。
- en: While overly simplified for the user, an application like this can be pretty
    complex for the developer to make. So the first question that arises is — **How
    are these applications made?**
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于用户而言过于简化，但这样的应用程序对开发者来说可能相当复杂。因此，第一个出现的问题是—— **这些应用程序是如何制作的？**
- en: To answer this, we can take a look at the **3-Layer Application Architecture**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解答这个问题，我们可以看看 **三层应用架构**。
- en: The 3 Layer Application Architecture
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三层应用架构
- en: The 3-layer application architecture is a well-established software development
    architecture, that breaks down software into 3 logical and physical computation
    layers, viz.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 三层应用架构是一种成熟的软件开发架构，将软件分解为三个逻辑和物理计算层，即：
- en: '**Presentation Layer-***R*efers to the client-side application, i.e., the app
    that the users actually see and interact with.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展示层-***R* 指的是客户端应用程序，即用户实际看到和交互的应用程序。'
- en: '**Application layer-** Refers to the application component that handles all
    the business logic.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用层-** 指的是处理所有业务逻辑的应用组件。'
- en: '**Data layer-**Refers to the component that stores and handles all the data
    within the application.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据层-** 指的是存储和处理应用程序中所有数据的组件。'
- en: Now, these three individual components work together to make a usable application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这三个独立的组件协同工作，构成一个可用的应用程序。
- en: The user interacts with the client-side (also known as the frontend) application,
    *making some sort of request.*
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户与客户端（也称为前端）应用程序进行交互，*发出某种请求*。
- en: The application layer *processes this request.*
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用层 *处理这个请求*。
- en: If any data is *generated or altered while processing this request*, that is
    maintained on the data layer.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在处理此请求时 *生成或更改了任何数据*，这些数据将保存在数据层中。
- en: After the request is processed by the backend, a response is sent to the frontend
    application.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求在后端处理后，会将响应发送到前端应用程序。
- en: '***NOTE:*** *Often, the application and data layer combined together are referred
    to as the server-side (or backend) application.*'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：*** *通常，应用层和数据层结合在一起被称为服务器端（或后端）应用程序。*'
- en: But now, another question arises. The one that we’re going to specifically answer
    in this guide is— **How do the different application layers (frontend and backend,
    to be more specific) communicate back and forth with each other?**
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，另一个问题出现了。我们将在本指南中专门回答的问题是—— **不同应用层（更具体地说，前端和后端）是如何相互通信的？**
- en: Well, here comes into play the concept of **API**s.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这里就涉及到 **API** 的概念。
- en: What is an API?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 API？
- en: API is an acronym for ***Application Programming Interface***. As the name suggests,
    it is an interface of some sorts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: API 是 ***应用程序编程接口*** 的缩写。顾名思义，它是一种接口。
- en: To be more precise, APIs allow cross-platform and inter-device communications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更准确地说，API 允许跨平台和设备间的通信。
- en: '![](../Images/275bc843831971af80adda518226813f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/275bc843831971af80adda518226813f.png)'
- en: Image by author
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**Software-to-software communication:** Earlier, we discussed how an application
    can be broken down into client-side and server-side components. These components
    exchange back and forth a set of requests and data responses. This communication
    interfacing is facilitated behind the scenes by APIs. The client sends an API
    request to the server, the server processes the request, and then returns an API
    response to the client.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件到软件的通信：** 之前我们讨论了应用程序如何被分解为客户端和服务器端组件。这些组件交换请求和数据响应。这种通信接口由 API 在后台提供支持。客户端向服务器发送
    API 请求，服务器处理请求，然后将 API 响应返回给客户端。'
- en: '**Platform-independent communication:** Since APIs act as an effective communication
    mechanism between the client and the server, this means that both the client and
    the server can be based on entirely different tech stacks and yet manage to work
    together. For example, your frontend application can be written in JavaScript,
    and your backend can be written in Python. APIs generally have a standardized
    request and response structure that almost all programming languages support.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台无关的通信：** 由于 API 充当客户端和服务器之间的有效通信机制，这意味着客户端和服务器可以基于完全不同的技术栈，却能够协同工作。例如，你的前端应用程序可以用
    JavaScript 编写，而你的后端可以用 Python 编写。API 通常具有一个标准化的请求和响应结构，几乎所有编程语言都支持。'
- en: '**Reusability of code:** APIs promote code reusability. Let us understand it
    like this. Instagram has both a mobile application, as well as a website. Now,
    we have two types of clients in the case of Instagram, but only one backend that
    handles requests from both the web client as well as the mobile client. Both these
    clients make requests to the same backend server using APIs. Thus, there is no
    need to implement a separate backend for both mobile and web.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码的重用性：** API 促进了代码的重用。我们可以这样理解：Instagram 既有移动应用程序，也有网站。在 Instagram 的情况下，我们有两种客户端，但只有一个处理来自网页客户端和移动客户端请求的后端。这两个客户端都通过
    API 向同一个后端服务器发送请求。因此，不需要为移动端和网页端分别实现后端。'
- en: So now that we have a brief understanding of what APIs are, let us dive deeper
    and take a look at the different kinds of APIs available.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 API 有了初步了解，让我们深入探讨一下不同种类的 API。
- en: Types of APIs
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 的类型
- en: 'There are primarily three kinds of APIs, based on the services they provide.
    These are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基于提供的服务，API 主要有三种类型，分别如下：
- en: '**Local API:** These are Operating System (OS) APIs that provide services to
    the application programs, such as microphone access, camera access, or requesting
    data from DB service, etc.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地 API：** 这些是操作系统（OS）API，提供诸如麦克风访问、相机访问或从数据库服务请求数据等服务。'
- en: '**Program API:** It is based on Remote Procedure Call (RPC) technology that
    allows remote program execution from another server. In simple words, these APIs
    simply allow the execution of scripts or programs on a remote server or device.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**程序 API：** 基于远程过程调用（RPC）技术，允许从另一服务器远程执行程序。简单来说，这些 API 只是允许在远程服务器或设备上执行脚本或程序。'
- en: '**Web API:** Web APIs, also known as web services, allow applications or devices
    to communicate with each other via the World Wide Web, using HTTP architecture.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web API：** Web API，也称为 Web 服务，允许应用程序或设备通过万维网进行通信，使用 HTTP 架构。'
- en: '**When it comes to building applications that involve a client-server architecture,
    we primarily use web APIs.**'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在构建涉及客户端-服务器架构的应用程序时，我们主要使用 Web API。**'
- en: Now, since the focus of this article is to familiarize ourselves with how applications
    are built, we are going to focus specifically on web APIs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 既然本文的重点是熟悉应用程序的构建方式，我们将专注于 Web API。
- en: '**NOTE:** Web APIs can further be broken down into several classifications
    like SOAP (Simple Object Access Protocol), REST (REpresentational State Transfer)
    APIs etc. As of today, a majority of applications around the world predominantly
    use the REST API architecture for client-server interactions, due to the ease
    of implementation. Since REST has become the industry standard, in this article,
    we are going to discuss REST APIs.'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** Web API 还可以进一步细分为几个分类，如 SOAP（简单对象访问协议）、REST（表征状态转移）API 等。目前，世界上大多数应用程序主要使用
    REST API 架构进行客户端-服务器交互，因为其实现简单。由于 REST 已成为行业标准，本文将讨论 REST API。'
- en: What are REST APIs?
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 REST API？
- en: REST stands for REpresentational State Transfer; also known as RESTful web services.
    It is a standardized API architecture that allows cross-platform and inter-device
    communications over the HTTP network protocol.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: REST代表表现层状态转移，也称为RESTful Web服务。它是一种标准化的API架构，允许跨平台和设备间通过HTTP网络协议进行通信。
- en: Again, in simple words, it allows two application components to interact with
    each other.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再简单一点，它允许两个应用程序组件互相交互。
- en: 'A typical client-server interaction involves primarily four kinds of operations,
    namely:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的客户端-服务器交互主要包括四种操作：
- en: 'Create: The create operation via an API request pertains to the creation of
    a resource on the data layer of the backend. *Eg.- In a TODO list app, a create
    API request can be used to create a TODO item in the database.*'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建：通过API请求执行的创建操作涉及在后端数据层上创建资源。*例如，在TODO列表应用中，创建API请求可用于在数据库中创建一个TODO项。*
- en: 'Read: The read operation can be used to fetch data from the database. This
    data can be a single resource of a type, a batch of resources of a single type,
    or a collection of resources of different types based on the client’s request
    and implementation of resource access on the backend. *Taking the example of the
    same TODO application, a read request can be used to fetch all the TODOs created
    by a user.*'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取：读取操作可用于从数据库中获取数据。根据客户端的请求和后端资源访问的实现，这些数据可以是某一类型的单个资源、一批单一类型的资源，或不同类型的资源集合。*以同样的TODO应用为例，读取请求可以用于获取用户创建的所有TODO。*
- en: 'Update: An update operation can be performed to update the data associated
    with a particular resource in the data layer. *In our TODO application, the update
    request can be used to update the TODO task.*'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新：可以执行更新操作以更新数据层中特定资源相关的数据。*在我们的TODO应用中，更新请求可用于更新TODO任务。*
- en: 'Delete: As the name suggests, the delete operation can be used for the deletion
    of resources. *For our TODO app, delete requests can be used to delete a TODO
    object from the TODO list.*'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除：顾名思义，删除操作用于删除资源。*对于我们的TODO应用，删除请求可用于从TODO列表中删除TODO对象。*
- en: These operations are collectively referred to as **CRUD** (**C**reate, **R**ead,
    **U**pdate, **D**elete) **operations**. For any application, these are some of
    the most basic operations a user can perform.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作统称为**CRUD**（**C**reate，**R**ead，**U**pdate，**D**elete）**操作**。对于任何应用程序，这些都是用户可以执行的一些最基本的操作。
- en: To put it in layman’s terms, when a user is interacting with an application,
    they are either accessing some data, or some data is being created or manipulated.
    REST APIs act as the intermediary step between the frontend and backend, allowing
    CRUD operations to be performed within an application.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 简单来说，当用户与应用程序交互时，他们要么在访问数据，要么数据正在被创建或操作。REST API充当前端和后端之间的中介步骤，允许在应用程序中执行CRUD操作。
- en: Now, we read earlier that because of how APIs are implemented as a communication
    channel between the client and the server, both the client and the server can
    be written using entirely different programming tech stacks. However, there has
    to be a standardized, *language agnostic* mechanism so that the client and the
    server can interact via the API. For this, REST APIs use **JSON**-based messaging
    protocol.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到，由于API作为客户端和服务器之间的通信渠道实现，客户端和服务器可以使用完全不同的编程技术栈。然而，必须有一种标准化的，*语言无关*的机制，以便客户端和服务器可以通过API进行交互。为此，REST
    API使用**JSON**基础的消息传递协议。
- en: JSON stands for ***JavaScript Object Notation***. It is an open-standard file
    format and data interchange format which is human-readable in nature. Data is
    transmitted using JSON in a key-value pair and array format.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: JSON代表***JavaScript对象表示法***。它是一种开放标准文件格式和数据交换格式，其具有可读性。数据通过JSON以键值对和数组格式传输。
- en: The following diagram demonstrates a typical client-server interaction.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下图演示了典型的客户端-服务器交互。
- en: '![](../Images/63b393a0897290d8365bcd00f1bade3b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/63b393a0897290d8365bcd00f1bade3b.png)'
- en: Image by author
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The client sends an API request to the server over the HTTP protocol. *This
    request is in the JSON format.*
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端通过HTTP协议向服务器发送API请求。*该请求采用JSON格式。*
- en: The server parses this API request, processes the request, and then sends an
    API response back to the client, *which is again in the JSON format.*
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器解析此API请求，处理请求，然后将API响应发送回客户端，*该响应再次以JSON格式呈现。*
- en: The client can parse the JSON response object to render it.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端可以解析JSON响应对象以进行呈现。
- en: As you can observe, since the intermediary communication channel is standardized,
    hence the client and server can operate independently of each other in terms of
    platform and implementation. *As in, the backend can be written in one programming
    language (say, Python) and the frontend can be written in another (say, JavaScript),
    and the application will still work fine.*
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所观察到的，由于中介通信通道是标准化的，因此客户端和服务器可以在平台和实现方面独立操作。*也就是说，后端可以用一种编程语言（例如 Python）编写，前端可以用另一种（例如
    JavaScript）编写，应用程序仍然可以正常工作。*
- en: Another important characteristic of REST APIs is that they are ***stateless***.
    This means that each request from the client to the server must contain all of
    the information necessary to understand and complete the request. *The subsequent
    requests aren’t dependent on the previous requests.*
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 REST API 的重要特征是它们是***无状态的***。这意味着从客户端到服务器的每个请求必须包含理解和完成请求所需的所有信息。*后续请求不依赖于之前的请求。*
- en: With this, we have completed some of the theoretical concepts regarding APIs
    and what are the characteristics of REST APIs. And all this brings us to the most
    important part of all.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经完成了关于 API 的一些理论概念以及 REST API 的特征。这一切将我们带到了最重要的部分。
- en: What Does an API Request Look Like?
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 请求是什么样的？
- en: As we discussed earlier, *REST API calls are stateless in nature*, which simply
    means that with each API request, we need to send
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，*REST API 调用是无状态的*，这意味着每个 API 请求中，我们需要发送
- en: all the data that is required in order to process the request. This data involves
    the type of operation to be performed,
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理请求所需的所有数据。这些数据涉及要执行的操作类型，
- en: information regarding user authentication,
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关用户认证的信息，
- en: the resource to be accessed via the API,
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 API 访问的资源，
- en: and some additional parameters that might be required to process the request.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及可能需要处理请求的一些额外参数。
- en: 'Based on these requirements, a REST API request can be broken down into 4 components:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些要求，REST API 请求可以分解为 4 个组件：
- en: Resource Path
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源路径
- en: This is the path to the resource that is to be acted upon via the API request.
    A resource can be thought of as an object or entity within the database. The resource
    path is *a mapping to* an entity within the database. Let’s continue with our
    example of a TODO app. One of the API endpoints can be used to fetch the list
    of all the TODOs of a user. The URL of the endpoint looks like this:`https://mytodolist.com/todos/`
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过 API 请求操作的资源路径。资源可以视为数据库中的对象或实体。资源路径是*映射到*数据库中的实体。继续以 TODO 应用为例。一个 API 端点可以用来获取用户所有
    TODO 的列表。该端点的 URL 看起来像这样：`https://mytodolist.com/todos/`
- en: Here, `https://mytodolist.com` is the domain of the website. `/todos/` is the
    resource path to the TODO objects.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`https://mytodolist.com` 是网站的域名。`/todos/` 是 TODO 对象的资源路径。
- en: HTTP Verb
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP 动词
- en: As we discussed earlier, an API request has to specify what kind of CRUD operation
    it is intending to perform. For this, we specify an HTTP verb within our API call.
    The simplest way to understand HTTP verbs is that these are *words* that tell
    the server what action to perform on a particular resource.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，API 请求必须指定打算执行的 CRUD 操作类型。为此，我们在 API 调用中指定一个 HTTP 动词。理解 HTTP 动词的最简单方法是它们是*指示*服务器对特定资源执行什么操作的“词”。
- en: There are a bunch of predefined and standardized HTTP verbs, however, the most
    commonly used ones are as mentioned below.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多预定义和标准化的 HTTP 动词，然而，最常用的如下所述。
- en: '**POST:** Used to create a resource object'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POST：** 用于创建资源对象'
- en: '**GET:** Used to perform the read operation on the resource'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET：** 用于对资源执行读取操作'
- en: '**PUT:** Used to perform the update operation'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PUT：** 用于执行更新操作'
- en: '**DELETE:** Used to perform the delete operation'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DELETE：** 用于执行删除操作'
- en: Request Body
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求体
- en: The request body can be used to specify some of the additional parameters that
    can be required to process a request. For example, in our TODO app, in order to
    create a TODO object, we have to specify the task. Similarly, in order to update
    a TODO object, we need to specify the new task that will be replacing the original
    task in the TODO list, along with the ID for the task that has to be modified.
    In our API request, we will have to send this information via the request body.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请求体可以用来指定处理请求时可能需要的一些额外参数。例如，在我们的 TODO 应用中，为了创建一个 TODO 对象，我们必须指定任务。类似地，为了更新
    TODO 对象，我们需要指定新的任务，这个任务将替换 TODO 列表中的原始任务，并提供要修改任务的 ID。在我们的 API 请求中，我们必须通过请求体发送这些信息。
- en: '*Generally, we need to specify a request body for POST and PUT requests. GET
    requests don’t have a request body.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*一般来说，我们需要为 POST 和 PUT 请求指定请求体。GET 请求没有请求体。*'
- en: '**NOTE:** The request body uses JSON format to send the request data in the
    form of a key-value pair object.'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 请求体使用 JSON 格式将请求数据以键值对对象的形式发送。'
- en: Request Header
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求头
- en: While the above 3 components are generally enough to make a REST API request,
    sometimes we need to specify some additional details along with the API request
    as well. *Take an example of user authentication.*
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述 3 个组件通常足以发出 REST API 请求，但有时我们需要在 API 请求中指定一些额外的细节。*以用户认证为例。*
- en: In our TODO app, we might have a bunch of users, each of them having their own
    TODO lists. We have to ensure that first of all, only the authorized users can
    create, read, update and delete TODOs. Then, we also need to ensure that one user
    can’t access another user’s TODOs. To guarantee these requirements, we need to
    implement some sort of authorization on the API endpoints, that determines whether
    an authorized user is making the API request, and whether the resource actually
    belongs to the user.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 TODO 应用中，我们可能会有一堆用户，每个用户都有自己的 TODO 列表。我们必须确保首先，只有授权用户才能创建、读取、更新和删除 TODO。然后，我们还需要确保一个用户不能访问另一个用户的
    TODO。为了保证这些要求，我们需要在 API 端点上实现某种形式的授权，以确定是否是授权用户在进行 API 请求，以及资源是否真正属于该用户。
- en: While we won’t go deep into the authentication strategies, however, just for
    the sake of information, we send authentication information in the request header,
    generally in the form of a unique token.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不会深入讨论认证策略，但仅为了信息传递，我们在请求头中发送认证信息，通常以唯一令牌的形式。
- en: All these components come together to make an API call.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些组件一起构成了一个 API 调用。
- en: 'Let us look at some example API calls, made using cURL:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些使用 cURL 发出的示例 API 调用：
- en: '[PRE0]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above given is a GET API request. We specify the HTTP verb using the `--request`
    flag. The `--url` flag is used to specify the request path. Then the headers are
    specified using `--header` flag.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是一个 GET API 请求。我们使用 `--request` 标志来指定 HTTP 动词。`--url` 标志用于指定请求路径。然后使用 `--header`
    标志来指定头部信息。
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above given is a POST request where we can see the example of the request
    body being specified, using the `--data` flag.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是一个 POST 请求，我们可以看到使用 `--data` 标志指定请求体的示例。
- en: The implementation of how an API request is made might differ from one programming
    language or utility tool to another. However, the critical components of the API
    request are going to remain the same, i.e., the HTTP verb, request URL or request
    path, a request body, and request headers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: API 请求的实现可能因编程语言或工具而异。然而，API 请求的关键组件将保持不变，即 HTTP 动词、请求 URL 或请求路径、请求体和请求头部。
- en: Now that we know what a API request looks like, there’s just a final component
    remaining in the API request-response cycle that we need to understand — the API
    response.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道 API 请求是什么样的，API 请求-响应周期中仅剩下一个组件需要理解——API 响应。
- en: What Does an API Response Look Like?
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 响应是什么样的？
- en: The API response is the response that the backend returns to the frontend after
    the API request has been processed. A response should tell the client whether
    the request was successful or not, and if successful, it should return the requested
    data, or an appropriate acknowledgement message to the client. In case the request
    was unsuccessful, the client should receive a relevant error message.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: API 响应是后端在处理完 API 请求后返回给前端的响应。响应应告知客户端请求是否成功，如果成功，应返回请求的数据或适当的确认信息。如果请求不成功，客户端应接收到相关的错误信息。
- en: Based on these requirements, an API response can be broken down into two parts,
    as discussed below.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些要求，API响应可以分为两个部分，如下所述。
- en: Response Body
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应体
- en: The response body consists of the requested data (in case of a GET API request),
    or an appropriate acknowledgment message in case of other API request types. In
    case of a failed API request, the response body consists of the appropriate failure
    message that specifies why the API call to the server failed.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 响应体包含请求的数据（在GET API请求的情况下），或者在其他API请求类型中包含适当的确认消息。如果API请求失败，响应体将包含适当的失败消息，说明为什么API调用到服务器失败。
- en: Response Status Code
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应状态码
- en: The API response contains a response status code that helps the client determine
    whether the request was a success or failure. These status codes have been standardized
    for the HTTP protocol, and can be broadly divided into 5 classes — `1xx`→ Informational,
    `2xx` → Success, `3xx` → Redirection, `4xx` → Client Error, `5xx` → Server Error
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: API响应包含一个响应状态码，帮助客户端确定请求是成功还是失败。这些状态码已经为HTTP协议标准化，可以大致分为5类 — `1xx` → 信息性，`2xx`
    → 成功，`3xx` → 重定向，`4xx` → 客户端错误，`5xx` → 服务器错误
- en: Some of the common status codes are as mentioned below.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的状态码如下所示。
- en: 200 — *OK. The request was successful.*
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 200 — *成功。请求成功。*
- en: 204 — *No Content.*
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 204 — *无内容。*
- en: 301 — *Moved Permanently.*
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 301 — *永久移动。*
- en: 400 — *Bad Request.*
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 400 — *错误请求。*
- en: 401 — *Unauthorized.*
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 401 — *未经授权。*
- en: 403 — *Forbidden.*
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 403 — *禁止访问。*
- en: 404 — *Not Found.*
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 404 — *未找到。*
- en: 500 — *Internal Server Error.*
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 500 — *内部服务器错误。*
- en: 'For example, the response to the GET API request we made earlier was as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们之前发出的GET API请求的响应如下：
- en: '[PRE2]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The response status code was 200.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 响应状态码是200。
- en: Conclusion
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: With this, we come to the end of this article. Just to summarize, we understood
    what APIs are, and how they function to allow communication between devices and
    applications. Finally, we studied REST APIs in depth — how an API request-response
    cycle works.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这篇文章的结束，我们来总结一下。我们了解了什么是API，以及它们如何在设备和应用程序之间实现通信。最后，我们深入研究了REST API——API请求响应周期是如何工作的。
- en: Obviously, APIs are just a foundation, or a backdoor, into the immense world
    of software development (backend, to be more precise) as the title suggests.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，API只是一个基础，或者说是进入广阔的软件开发（更准确地说是后端开发）世界的后门，正如标题所暗示的那样。
- en: You can follow me to read more such interesting concepts. In the upcoming blogs
    in this series, we will dive deeper into backend development.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以关注我，以阅读更多有趣的概念。在本系列的后续博客中，我们将更深入地探讨后端开发。
