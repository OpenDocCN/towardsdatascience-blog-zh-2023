["```py\njulia> println(\"Hello world\")\nHello World\n\njulia> f(x) = x^2 + 3x + 2\nf (generic function with 1 method)\n\njulia> f(2)\n12\n```", "```py\nimport Pkg\nPkg.add(\"Plots\")\nusing Plots\nusing DelimitedFiles\nusing Statistics\n\nplot(f,-10,10)\n```", "```py\nrawwords = readdlm(\"data/scowl_american_words_80.txt\", header=false,String)\n343681×1 Matrix{String}:\n \"A\"\n \"A'asia\"\n \"A's\"\n \"AA\"\n \"AA's\"\n \"AAA\"\n \"AAM\"\n ⋮\n \"zymurgies\"\n \"zymurgy\"\n \"zymurgy's\"\n \"zythum\"\n \"zyzzyva\"\n \"zyzzyvas\"\n \"zzz\"\n\ntotalWords = length(rawwords)\n343681\n```", "```py\ndictwords = String[];\nfor word in rawwords\n      # remove words with ', -' space and capital letter start\n      if (length(word)>0 && !(occursin(\"\\'\",word) \n            || occursin(\"-\",word) \n            || occursin(\" \",word)\n            || (word[1]<'a' || word[1]>'z')\n            ))\n          push!(dictwords,word)\n      end\nend\n\n# get count\ntotalWords = length(dictwords)\n244274\n```", "```py\n# use list comprehension\nwordlengths = zeros(Int64,0)\n@time wordlengths = [length(x) for x in dictwords];\n0.021251 seconds (45.30 k allocations: 4.246 MiB, 84.02% compilation time)\n\n# use map\nwordlengths = zeros(Int64,0);\n@time wordlengths = map(word->length(word), dictwords);\n0.024202 seconds (49.09 k allocations: 4.473 MiB, 85.97% compilation time)\n\n# use for loop\nwordlengths = zeros(Int64,0);\n@time for word in dictwords\n  push!(wordlengths, length(word))\nend\n0.027516 seconds (488.05 k allocations: 14.131 MiB) \n```", "```py\nlrange = minimum(wordlengths),maximum(wordlengths)\n(1, 45)\n```", "```py\njulia>  histogram(wordlengths,bins=20)\n```", "```py\nhistogram(wordlengths,\n    bins=20,\n    xaxis=(\"WORD LENGTH\"),\n    yaxis=(\"COUNT\"),\n    xticks=([1:1:20;]),\n    yticks=([0:5e3:4.5e4;],[\"$(x)k\" for x=0:5:45]),\n    label=(\"Word count\"),\n    xguidefontsize=8, yguidefontsize=8,\n    margin=5mm, ylims = (0,4e4),\n    framestyle = :box,\n    fill = (0,0.5,:green),\n    size=(800,420))\n\nsavefig(\"pics/2-english-word-lengths-v2.png\")\n```", "```py\njulia> mean(wordlengths)\n9.250849455938823\n\njulia> median(wordlengths)\n9.0\n```", "```py\njulia> filter(x->(length(x)==9), dictwords)[1:5]\n5-element Vector{String}:\n \"aardvarks\"\n \"aasvogels\"\n \"abactinal\"\n \"abamperes\"\n \"abandoned\"\n\njulia> filter(x->(length(x)==9), dictwords)[27001:27005]\n5-element Vector{Any}:\n \"sassabies\"\n \"sassafras\"\n \"sassarara\"\n \"sassiness\"\n \"sassolite\"\n```", "```py\njulia> length(filter(x->(length(x)==5), dictwords))\n11210\n```", "```py\nfunction wordLengthHistoFromFile(filename, doUnique=true)\n    set_tokenizer(poormans_tokenize)\n\n    # split the words in the file into tokens\n    words = collect(tokenize(read(filename, String)))\n\n    if (doUnique) \n        words = unique(words)\n    end\n    totalWords = length(words)\n\n    # this array holds the count. Index is the word length``\n    local wordLengths = zeros(Int64,18)\n\n    # Now iterate through the words\n    for word in words\n        l = length(word)\n\n        # there should be very few words more than 18\n        l = l<=18 ? l : 18;\n        wordLengths[l] += 1\n    end\n\n    # Return % of total word lengths used\n    return wordLengths./(totalWords/100.0)\nend\n```", "```py\nhBushJrInaugural = wordLengthHistoFromFile(\"data/speech-bushjr-inaugural.txt\")\nhObamaInaugural = wordLengthHistoFromFile(\"data/speech-obama-inaugural.txt\")\nhTrumpInaugural = wordLengthHistoFromFile(\"data/speech-trump-inaugural.txt\")\nhBidenInaugural = wordLengthHistoFromFile(\"data/speech-biden-inaugural.txt\")\n```", "```py\nplot(hcat(hBushJrInaugural,hObamaInaugural,hTrumpInaugural,hBidenInaugural ), \n        xticks=([1:18;]),\n        yticks=([0:2:100;],[\"$(x)%\" for x=0:2:100]),\n        label=[\"Bush\" \"Obama\" \"Trump\" \"Biden\"],\n        yaxis=(\"% OF APPEARANCE\"),\n        xaxis=(\"WORD LENGTH\"),\n        xguidefontsize=8, yguidefontsize=8,\n        margin=5mm,\n        framestyle = :box,\n        lw=2, size=(800,420), marker=(:circle),\n        lc=[:red :blue :lightcoral :dodgerblue],\n        mc=[:white :white :black :black]\n)\n\nsavefig(\"pics/3-presidential-speeches.png\")\n```", "```py\nhBushJrPC = wordLengthHistoFromFile(\"data/pc_bushjr_final.txt\")\nhObamaPC = wordLengthHistoFromFile(\"data/pc_obama_final.txt\")\nhTrumpPC = wordLengthHistoFromFile(\"data/pc_trump_laborday.txt\")\nhBidenPC = wordLengthHistoFromFile(\"data/pc_biden_first.txt\")\n```", "```py\nplot(hcat(hBushJrPC,hObamaPC,hTrumpPC,hBidenPC ), \n        xticks=([1:18;]),\n        yticks=([0:2:20;],[\"$(x)%\" for x=0:2:20]),\n         label=[\"Bush\" \"Obama\" \"Trump\" \"Biden\"],\n         xaxis=(\"WORD LENGTH\"),yaxis=\"% OF APPEARANCE\",\n         lw=2, size=(800,420), marker=(:circle),\n         xguidefontsize=8, yguidefontsize=8,\n         framestyle = :box,\n         margin=5mm, ylims = (0,20),\n         lc=[:red :blue :lightcoral :dodgerblue],\n         mc=[:white :white :black :black]\n       )\nsavefig(\"pics/4-presidential-press-conf.png\")\n```", "```py\ncharfrequency = zeros(Int64,26)\n@time map(word->(\nmap(\n  char-> ((char>='a' && char<='z') ? charfrequency[char-'a'+1]+=1 : 1), collect(word))\n), dictwords);\n\n0.386160 seconds (5.85 M allocations: 142.942 MiB, 7.98% gc time, 26.68% compilation time)\n\n# convert to percentage\ncharfrequency = charfrequency ./ (totalWords/100.0) \n```", "```py\ncharfrequency = zeros(Int64,26)\n@time for word in dictwords\n  for char in collect(word)\n     if (char>='a' && char<='z')\n        charfrequency[char-'a'+1] += 1\n     end\n  end\nend\n0.437091 seconds (7.49 M allocations: 171.794 MiB, 6.45% gc time, 1.16% compilation time)\n\n# convert to percentage\ncharfrequency = charfrequency ./ (totalWords/100.0)\n```", "```py\nbar(charfrequency,\n         orientation=:h,\n         yticks=(1:26, 'A':'Z'),\n         xlabel=(\"% of APPREARANCE\"),\n         ylabel=(\"ALPHABET\"),\n         yflip=true,\n         legend = :none, framestyle = :box,\n         xticks=([0:10:110;],[\"$(x)%\" for x=0:10:110]),\n         xguidefontsize=8, yguidefontsize=8,\n         margin=5mm, xlims = (0,110),\n         ytickfont = font(6,\"Arial\"),\n         fill = (0,0.5,:green),\n         size=(800,420))\n\nsavefig(\"pics/5-dict-char-freq.png\")\n```", "```py\ncharfrequencyu = zeros(Int64,26)\n@time for word in dictwords\n    for char in unique(word)\n        if (char>='a' && char<='z')\n        charfrequencyu[char-'a'+1] += 1\n        end\n    end\nend\n\n 0.491082 seconds (7.41 M allocations: 241.289 MiB, 7.55% gc time)\n```", "```py\nbar(hcat(charfrequency, charfrequencyu),\n         orientation=:h,\n         yticks=(1:26, 'A':'Z'),\n         xlabel=(\"% of APPREARANCE\"),\n         ylabel=(\"ALPHABET\"),\n         yflip=true, framestyle = :box,\n         xticks=([0:10:110;],[\"$(x)%\" for x=0:10:110]),\n         xguidefontsize=8, yguidefontsize=8,\n         margin=5mm, xlims = (0,110),\n         ytickfont = font(6,\"Arial\"),\n         lc=[:black :black], mc=[:black :black],\n         fill=[:green :blue], fillalpha=[0.5 0.5],\n         label=[\"frequency\" \"unique\"],\n         size=(800,420))\nsavefig(\"pics/6-compare-vs-unique.png\")\n```", "```py\njulia> guesswords = filter(x->(length(x)==5), dictwords)\njulia> length(guesswords)\n\n11210\n```", "```py\nrawwords35 = readdlm(\"data/scowl_american_words_35.txt\",header=false,String)\nlength(rawwords35)\n50043\n\ndictwords35 = String[];\nfor word in rawwords35\n    # println(word)\n    if (length(word)>0 && !(occursin(\"\\'\",word) \n          || occursin(\"-\",word) \n          || occursin(\" \",word)\n          || (word[1]<'a' || word[1]>'z')\n          ))\n        push!(dictwords35,word)\n    end\nend\ntotalWords = length(dictwords35)\n39142\n```", "```py\nanswerlist = filter(x->(length(x)==5), dictwords)\nlength(answerlist)\n3467\n```", "```py\nanswerlist = filter(x->(x[5]!='s' ||  x[4]=='s'), answerlist)\n\nlength(answerlist)\n 2282\n\n3467-2282\n 1185\n```", "```py\nfunction letterFrequency(words)\n\n    # count total words in the file\n    totalWords = length(words);\n\n    # initialize freq vector\n    charFreq = zeros(Int64,26)\n    for word in words\n        for char in unique(word)\n            if (char>='a' && char<='z')\n                charFreq[char-'a'+1] += 1\n            end\n        end\n    end\n\n    # element wise devide by totalWords and return\n    return charFreq ./ (totalWords/100.0) ;\nend\n```", "```py\ncfDictwords = letterFrequency(dictwords)\ncfGuesslist  = letterFrequency(guesslist)\ncfAnswerlist = letterFrequency(answerlist)\n```", "```py\nplot((1:26, 'A':'Z'), hcat(cfDictwords, cfGuesslist, cfAnswerlist), \n    label=[\"Dict Words\" \"Guess list\" \"Answer list\"],\n    yticks=([0:5:70;],[\"$(x)%\" for x=0:5:70]),\n    framestyle = :box,\n    xlabel=\"ALPHABET\",ylabel=\"% OF APPEARANCE\",\n    xguidefontsize=8, yguidefontsize=8,\n    margin=5mm, ylims = (0,75),\n    xticks=(1:26, 'A':'Z'),\n    size=(800,420)\n)\n\nsavefig(\"pics/7-compare-guess-answer.png\")\n```", "```py\nlistOrder = sortperm(cfAnswerlist, rev=true)\n\nbar(cfAnswerlist[listOrder],\n      orientation=:h,\n      yticks=(1:26, ('A':'Z')[listOrder]),\n      xlabel=(\"% of APPREARANCE\"),\n      ylabel=(\"ALPHABET\"),\n      yflip=true, framestyle = :box,\n      xticks=([0:5:55;],[\"$(x)%\" for x=0:5:50]),\n      xguidefontsize=8, yguidefontsize=8,\n      margin=5mm, xlims = (0,55),\n      legend=:none,\n      ytickfont = font(6,\"Arial\"),\n      lc=(:black), mc=(:black),\n      fill=(:orange), fillalpha=(0.5),\n      size=(800,420))\n\nsavefig(\"pics/8-letterfrequency.png\")\n```"]