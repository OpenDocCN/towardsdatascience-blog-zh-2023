["```py\nimport statsmodels.formula.api as smf\n\nreg_y = smf.ols(formula='y ~ 1 + X', data = df).fit()\nreg_T = smf.ols(formula='T ~ 1 + X', data = df).fit()\n\ny_residual = reg_y.resid\nT_residual = reg_T.resid\n\nATE_model = smf.ols(formula='y_residual ~ 1 + T_residual', data = df).fit()\n```", "```py\nfrom sklearn.model_selection import cross_val_predict\nimport statsmodels.formula.api as smf\n\nM_y = *some ML model*\nM_T = *some ML model*\n\ny_residual = df[y] - cross_val_predict(M_y, df[X], df[y], cv=3)\nT_residual = df[T] - cross_val_predict(M_T, df[X], df[T], cv=3)\n\nATE_model = smf.ols(formula='y_residual ~ 1 + T_residual', data = df).fit()\n```", "```py\nimport numpy as np\nimport pandas as pd\n\n# Sample Size\nN = 100_000\n\n# Observed Confounders (Age, Number of Social Media Accounts, & Years Member on Website)\nage = np.random.randint(low=18,high=75,size=N)\nnum_social_media_profiles = np.random.choice([0,1,2,3,4,5,6,7,8,9,10], size = N)\nyr_membership = np.random.choice([0,1,2,3,4,5,6,7,8,9,10], size = N)\n\n# Additional Covariates (Arbitrary Z)\nZ = np.random.normal(loc=50, scale = 25, size = N)\n\n# Error Terms\nε_1 = np.random.normal(loc=20,scale=5,size=N)\nε_2 = np.random.normal(loc=40,scale=15,size=N)\n\n# Treatment DGP (T = g(X) + ε) - Hrs spent on website in past month\ntime_on_website = np.maximum(10\n                             - 0.01*age \n                             - 0.001*age**2 \n                             + num_social_media_profiles \n                             - 0.01 * num_social_media_profiles**2\n                             - 0.01*(age * num_social_media_profiles)\n                             + 0.2 * yr_membership\n                             + 0.001 * yr_membership**2\n                             - 0.01 * (age * yr_membership)\n                             + 0.2 * (num_social_media_profiles * yr_membership)\n                             + 0.01 * (num_social_media_profiles * np.log(age) * age * yr_membership**(1/2))\n                             + ε_1\n                               ,0)\n\n# Outcome DGP (y = f(T,X,Z) + ε) - Sales in past month\nsales = np.maximum(25\n                   +  5 * time_on_website # Simulated ATE = $5\n                   - 0.1*age \n                   - 0.001*age**2 \n                   + 8 * num_social_media_profiles \n                   - 0.1 * num_social_media_profiles**2\n                   - 0.01*(age * num_social_media_profiles)\n                   + 2 * yr_membership\n                   + 0.1 * yr_membership**2\n                   - 0.01 * (age * yr_membership)\n                   + 3 * (num_social_media_profiles * yr_membership)\n                   + 0.1 * (num_social_media_profiles * np.log(age) * age * yr_membership**(1/2))\n                   + 0.5 * Z\n                   + ε_2\n                     ,0)\n\ncollider = np.random.normal(loc=100, scale=50, size=N) + 2*sales + 7*time_on_website\n\ndf = pd.DataFrame(np.array([sales,time_on_website,age,num_social_media_profiles,yr_membership,Z]).T\n                  ,columns=[\"sales\",\"time_on_website\",\"age\",\"num_social_media_profiles\",\"yr_membership\",\"Z\"])\n```", "```py\nimport statsmodels.formula.api as smf\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_predict\n\n# 1 - Naive OLS\nnaive_regression = smf.ols(formula=’sales ~ 1 + time_on_website’,data=df).fit()\n\n# 2 - Multiple OLS\nmultiple_regression = smf.ols(formula=’sales ~ 1 + time_on_website + age + num_social_media_profiles + yr_membership’,data=df).fit()\n\n# 3 - DML Procedure\nM_sales = GradientBoostingRegressor()\nM_time_on_website = GradientBoostingRegressor()\n\ndf[‘residualized_sales’] = df[\"sales\"] - cross_val_predict(M_sales, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]], df[‘sales’], cv=3)\ndf[‘residualized_time_on_website’] = df[‘time_on_website’] - cross_val_predict(M_time_on_website, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\"]], df[‘time_on_website’], cv=3)\n\nDML_model = smf.ols(formula=’residualized_sales ~ 1 + residualized_time_on_website’, data = df).fit()\n\n# 4 - DML Procedure w/ Collider\nM_sales = GradientBoostingRegressor()\nM_time_on_website = GradientBoostingRegressor()\n\ndf[‘residualized_sales’] = df[\"sales\"] - cross_val_predict(M_sales, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\",\"collider\"]], df[‘sales’], cv=3)\ndf[‘residualized_time_on_website’] = df['time_on_website'] - cross_val_predict(M_time_on_website, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\", \"collider\"]], df['time_on_website'], cv=3)\n\nDML_model_collider = smf.ols(formula='residualized_sales ~ 1 + residualized_time_on_website', data = df).fit()\n```", "```py\ncollider = 100 + 2*sales + 7*time_on_website\n\n# Note the negative relationship between sales and time_on_website here\nsales = (collider - 100 - 7*time_on_website)/2\n```", "```py\nimport numpy as np\nimport pandas as pd\n\n# Sample Size\nN = 100_000\n\n# Observed Confounders (Age, Number of Social Media Accounts, & Years Member on Website)\nage = np.random.randint(low=18,high=75,size=N)\nnum_social_media_profiles = np.random.choice([0,1,2,3,4,5,6,7,8,9,10], size = N)\nyr_membership = np.random.choice([0,1,2,3,4,5,6,7,8,9,10], size = N)\n\n# Additional Covariates (Arbitrary Z)\nZ = np.random.normal(loc=50, scale = 25, size = N)\n\n# Error Term\nε = np.random.normal(loc=40,scale=15,size=N)\n\n# Randomized Treatment (T) - Advertisement Exposure\nadvertisement_exposure = np.random.choice([0,1],size=N,p=[.5,.5])\n\n# Outcome (y = f(T,X,Z) + ε) - Sales in past month\nsales = np.maximum(500\n                   +  5 * advertisement_exposure # Ground Truth ATE of $5\n                   - 10*age \n                   - 0.05*age**2 \n                   + 15 * num_social_media_profiles \n                   - 0.01 * num_social_media_profiles**2\n                   - 0.5*(age * num_social_media_profiles)\n                   + 20 * yr_membership\n                   + 0.5 * yr_membership**2\n                   - 0.8 * (age * yr_membership)\n                   + 5 * (num_social_media_profiles * yr_membership)\n                   + 0.8 * (num_social_media_profiles * np.log(age) * age * yr_membership**(1/2))\n                   + 15 * Z\n                   + 2 * Z**2\n                   + ε\n                     ,0)\n\ndf = pd.DataFrame(np.array([sales,advertisement_exposure,age,num_social_media_profiles,yr_membership, Z]).T\n                  ,columns=[\"sales\",\"advertisement_exposure\",\"age\",\"num_social_media_profiles\",\"yr_membership\",\"Z\"])\n```", "```py\nimport statsmodels.formula.api as smf\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_predict\n\n# 1 - Naive OLS\nnaive_regression = smf.ols(formula=“sales ~ 1 + advertisement_exposure”,data=df).fit()\n\n# 2 - Multiple OLS\nmultiple_regression = smf.ols(formula=“sales ~ 1 + advertisement_exposure + age + num_social_media_profiles + yr_membership + Z”,data=df).fit()\n\n# 3 - DML Procedure\nM_sales = GradientBoostingRegressor()\nM_advertisement_exposure = GradientBoostingClassifier() # Note binary treatment \n\ndf[‘residualized_sales’] = df[\"sales\"] - cross_val_predict(M_sales, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\",\"Z\"]], df[‘sales’], cv=3)\ndf['residualized_advertisement_exposure'] = df['advertisement_exposure'] - cross_val_predict(M_advertisement_exposure, df[[\"age\",\"num_social_media_profiles\",\"yr_membership\", \"Z\"]], df['advertisement_exposure'], cv=3, method = 'predict_proba')[:,0]\n\nDML_model = smf.ols(formula='residualized_sales ~ 1 + residualized_advertisement_exposure', data = df).fit()\n```", "```py\n# Example 1\nfile = open('Example 1.html','w')\n\norder = ['time_on_website','residualized_time_on_website','age','num_social_media_profiles','yr_membership','Intercept']\nrename = {'time_on_website':'Treatment: Hours on Website','residualized_time_on_website':'Residualized Treatment: Hours on Website','age':'Age',\n          'num_social_media_profiles':\"# of Social Media Profiles\", \"yr_membership\":\"Years of Membership\"}\ncolumns = ['Naive OLS','Multiple OLS','DML','DML w/ Collider']\n\nregtable = Stargazer([naive_regression, multiple_regression, DML_model, DML_model_collider])\nregtable.covariate_order(order)\nregtable.custom_columns(columns,[1,1,1,1])\nregtable.rename_covariates(rename)\nregtable.show_degrees_of_freedom(False)\nregtable.title('Example 1: Obtaining Exogeneity w/ DML')\n\nfile.write(regtable.render_html())\nfile.close()\n\n# Example 2\nfile = open('Example 2.html','w')\n\norder = ['advertisement_exposure','residualized_advertisement_exposure','age','num_social_media_profiles','yr_membership','Intercept']\nrename = {'advertisement_exposure':'Treatment: Exposure to Advertisement','residualized_advertisement_exposure':'Residualized Treatment: Exposure to Advertisement','age':'Age',\n          'num_social_media_profiles':\"# of Social Media Profiles\", \"yr_membership\":\"Years of Membership\"}\ncolumns = ['Naive OLS','Multiple OLS','DML']\n\nregtable = Stargazer([naive_regression, multiple_regression, DML_model])\nregtable.covariate_order(order)\nregtable.custom_columns(columns,[1,1,1])\nregtable.rename_covariates(rename)\nregtable.show_degrees_of_freedom(False)\nregtable.title('Example 2: Improving Statistical Power in RCT')\n\nfile.write(regtable.render_html())\nfile.close()\n```"]