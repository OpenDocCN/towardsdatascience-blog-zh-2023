- en: Earth Isn’t Flat, and Neither Should Your Voronoi Diagrams Be
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/earth-isnt-flat-and-neither-should-your-voronoi-diagrams-be-25137e0a073b?source=collection_archive---------9-----------------------#2023-12-12](https://towardsdatascience.com/earth-isnt-flat-and-neither-should-your-voronoi-diagrams-be-25137e0a073b?source=collection_archive---------9-----------------------#2023-12-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A story about precision, unveiling the power of spherical geospatial Voronoi
    diagrams with Python*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://raczeq.medium.com/?source=post_page-----25137e0a073b--------------------------------)[![Kamil
    Raczycki](../Images/2c45075e217e60660ad3b4475530333d.png)](https://raczeq.medium.com/?source=post_page-----25137e0a073b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----25137e0a073b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----25137e0a073b--------------------------------)
    [Kamil Raczycki](https://raczeq.medium.com/?source=post_page-----25137e0a073b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd6016d9c4a93&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fearth-isnt-flat-and-neither-should-your-voronoi-diagrams-be-25137e0a073b&user=Kamil+Raczycki&userId=d6016d9c4a93&source=post_page-d6016d9c4a93----25137e0a073b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----25137e0a073b--------------------------------)
    ·7 min read·Dec 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F25137e0a073b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fearth-isnt-flat-and-neither-should-your-voronoi-diagrams-be-25137e0a073b&user=Kamil+Raczycki&userId=d6016d9c4a93&source=-----25137e0a073b---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F25137e0a073b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fearth-isnt-flat-and-neither-should-your-voronoi-diagrams-be-25137e0a073b&source=-----25137e0a073b---------------------bookmark_footer-----------)![](../Images/d1135f3a03fdec66395009f24b815529.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Earth with Spherical Voronoi diagram moving between 2 projections: Orthogonal
    and Equirectangular. Generated by the author using the D3.js library.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be familiar with Voronoi diagrams and their uses in the geospatial
    analyses. If not, here is the quick TL;DR: it divides the plane into regions consisting
    of all points of the plane closer to a given seed than to any other. It is named
    after mathematician Georgy Voronoy. You can read more about it on the [Wikipedia](https://en.wikipedia.org/wiki/Voronoi_diagram).'
  prefs: []
  type: TYPE_NORMAL
- en: How does it apply to the geospatial domain? Using Voronoi diagrams you can quickly
    find the closest public transit stop for inhabitants of a given city at a bigger
    scale, faster than calculating it individually for each building separately. Or
    you can also use it for example in the market share analysis between different
    brands.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I want to show the differences between the typical Voronoi diagram
    calculated with projected coordinates on a flat plane and the spherical one, and
    hopefully, show the latter's superiority.
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions & projections — why does it matter?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to see data on the map, we have to work with projections. To show
    something on the 2D plane, we have to project the coordinates from the 3D coordinates
    on the globe.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular projection that we all know and use is the Mercator projection
    ([Web Mercator](https://en.wikipedia.org/wiki/Web_Mercator_projection) or WGS84
    Mercator to be precise, since it’s used by most of the map providers) and the
    most popular coordinate system is World Geodetic System 1984 — WGS84 (or [EPSG:4326](https://epsg.io/4326)).
    This system is based on degrees and it ranges in longitude from -180° to 180°
    (West to East) and in latitude from -90° to 90° (South to North).
  prefs: []
  type: TYPE_NORMAL
- en: Each projection to the 2D plane has some distortions. The Mercator is a *Conformal*
    map projection which means that angles should be preserved between objects on
    the Earth. The higher above 0° (or lower below 0°) the latitude, the bigger the
    distortion in the area and the **distance**. Because the Voronoi diagram heavily
    relies on the distance between the seeds, the same distortion error is forwarded
    when generating the diagram.
  prefs: []
  type: TYPE_NORMAL
- en: The Earth is an irregularly shaped ellipsoid, but for our purposes, it can be
    approximated by the sphere shape. By generating the Voronoi diagram on the sphere,
    we can properly calculate the distance based on the arcs on the surface of a sphere.
    Later, we can map the generated spherical polygons to the projected 2D coordinates
    and we can be sure that the line separating two adjacent Voronoi cells will be
    perpendicular to the line connecting the two seeds defining these cells.
  prefs: []
  type: TYPE_NORMAL
- en: Below you can see the angles and distances problem I’ve described above. Even
    though the lines cross at the same point, Voronoi cells' shapes and angles differ.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6ab5bdcc0fa0f660bc09473de2025ebf.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of angles and distances difference in both versions of Voronoi diagram.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem is that you can’t compare the regions in different parts of
    the world (i.e. not laying on the same latitude) if you use a 2D Voronoi diagram
    since the areas will be heavily distorted.
  prefs: []
  type: TYPE_NORMAL
- en: Full Jupyter notebook with code used in the examples below can be found on [GitHub](https://github.com/RaczeQ/medium-articles/blob/main/articles/spherical-geovoronoi/code.ipynb).
    Here some functions are skipped for brevity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install required libraries
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Import required modules and functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s define six points on the globe: the North and South Poles, and four points
    on the equator.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f802c83d38b5f89fe9a39044101b8ae2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Generate Voronoi diagram using `[voronoi_diagram](https://shapely.readthedocs.io/en/stable/manual.html#voronoi-diagram)`
    from the `Shapely` library
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Generate Voronoi diagrams using `[VoronoiRegionalizer](https://kraina-ai.github.io/srai/latest/examples/regionalizers/voronoi_regionalizer/)`
    from the `srai` library.
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, it uses the `[SphericalVoronoi](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.SphericalVoronoi.html)`
    implementation from the `scipy` library and properly transforms the WGS84 coordinates
    to and from the spherical coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see the difference between the two on the plots.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49c2f70b6a96262d1d8eb8701d1d4b58.png)![](../Images/dfdddcc9e791e782e4c37e62b712c99a.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference between Voronoi diagrams in flat (left) and spherical (right)
    versions in WGS84 coordinates. Generated by the author using GeoPandas library.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7375067b64a932c3330c0a62eeb45bcf.png)![](../Images/700f5ada495ce8561b0a2a77f29a7ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference between Voronoi diagrams in flat (left) and spherical (right)
    versions in Orthogonal projection. Generated by the author using Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that can be seen is that the 2D Voronoi diagram doesn’t loop
    back around the globe, since it works on a flat [Cartesian plane](https://en.wikipedia.org/wiki/Cartesian_coordinate_system).
    The Spherical Voronoi diagram properly covers the Earth and doesn’t break at the
    [*antimeridian*](https://en.wikipedia.org/wiki/180th_meridian)line (where the
    longitude switches from 180° to -180°).
  prefs: []
  type: TYPE_NORMAL
- en: To numerically quantify the difference we can calculate the **IoU** (Intersection
    over Union) metric (or[*Jaccard Index*](https://en.wikipedia.org/wiki/Jaccard_index))
    to measure the difference between the shapes of the polygons. The value of this
    metric falls between 0 and 1, where 0 means no overlap and 1 means full overlap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The calculated value is **0.423**, which is pretty low and on the big scale,
    those polygons are different from each other, which can be easily seen in the
    plots above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Real data example: splitting the globe using AEDs (Automated External Defibrillators)
    positions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data used in this example comes from the [OpenAEDMap](https://openaedmap.org/)
    and is based on [OpenStreetMap](https://www.openstreetmap.org/) data. The prepared
    file has filtered positions (80694 to be exact) without duplicated nodes defined
    on top of each other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Generate Voronoi diagrams for the AEDs
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let’s compare these Voronoi diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/acd16b508266c10a92ff9c802c6000e7.png)![](../Images/bf2610006e25f580b986ae354a6654a8.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference between Voronoi diagrams in flat (left) and spherical (right)
    versions in WGS84 coordinates. Generated by the author using GeoPandas.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43dfa62f99641c36c1220d7614be8501.png)![](../Images/88f4157b34dda78cbe55a599b146aed4.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference between Voronoi diagrams in flat (left) and spherical (right)
    versions in Orthogonal projection. Generated by the author using Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: The difference is quite obvious when looking at the plots. All borders in the
    2D version are straight while spherical ones look quite bendy in the WGS84 coordinates.
    You can also clearly see that on the flat version, a lot of regions converge on
    the poles (orthogonal projection focuses on the south pole), while the spherical
    one doesn’t. Another visible difference is continuity around antimeridian, which
    was mentioned in the first example. The regions emerging from New Zealand are
    abruptly cut on the flat version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see the IoU value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The calculated value is **0.511**, which is slightly better than the first example,
    but still, the polygons match roughly 50%.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming into the city scale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see the difference on a smaller scale. We can select all the AEDs that
    are located in London and plot it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2f66248b127403e09747e29fe573425d.png)'
  prefs: []
  type: TYPE_IMG
- en: 2D and Spherical Voronoi diagrams overlayed on top of each other in red and
    blue colours. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The value is **0.675**. It’s getting better, but it still is a noticeable difference.
    Since the AEDs are placed denser, the shapes and distances are getting smaller,
    so the differences between Voronoi diagrams calculated in the projected 2D plane
    and on a sphere diminish.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some individual examples overlayed on top of each other.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/896c256c3e89b12a2a3731a2347e9802.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The areas of those polygons mostly match, but you can see the differences in
    angles and shapes. Those discrepancies could be important in the spatial analysis
    and might change the results of them. The bigger the area of interest, the bigger
    becomes the difference.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope that now you can see why the spherical Voronoi diagram is better suited
    for use in the geospatial domain than the flat one.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the analyses in the domain are currently made using Voronoi diagrams
    in a projected 2D flat plane, which could lead to wrong results.
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, there was no simple solution for spherical Voronoi diagrams
    available for geospatial data scientists and analysts working in Python. Now it’s
    as easy as installing one library.
  prefs: []
  type: TYPE_NORMAL
- en: Sure, it calculates a little bit longer than the flat solution since it has
    to project points to and from spherical coordinates, while properly clipping polygons
    intersecting antimeridian, but it shouldn’t matter if you want to preserve precision
    in your analyses.
  prefs: []
  type: TYPE_NORMAL
- en: For JavaScript users, there is an already available spherical Voronoi [D3.js
    implementation](https://github.com/Fil/d3-geo-voronoi).
  prefs: []
  type: TYPE_NORMAL
- en: Disclaimer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’m one of the maintainers of the `srai` library.
  prefs: []
  type: TYPE_NORMAL
