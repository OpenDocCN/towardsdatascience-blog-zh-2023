- en: 'Hashing in Modern Recommender Systems: A Primer'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/hashing-in-modern-recommender-systems-a-primer-9c6b2cf4497a?source=collection_archive---------7-----------------------#2023-03-28](https://towardsdatascience.com/hashing-in-modern-recommender-systems-a-primer-9c6b2cf4497a?source=collection_archive---------7-----------------------#2023-03-28)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Understanding the most underrated trick in applied Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@samuel.flender?source=post_page-----9c6b2cf4497a--------------------------------)[![Samuel
    Flender](../Images/390d82a673de8a8bb11cef66978269b5.png)](https://medium.com/@samuel.flender?source=post_page-----9c6b2cf4497a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9c6b2cf4497a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9c6b2cf4497a--------------------------------)
    [Samuel Flender](https://medium.com/@samuel.flender?source=post_page-----9c6b2cf4497a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fce56d9dcd568&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhashing-in-modern-recommender-systems-a-primer-9c6b2cf4497a&user=Samuel+Flender&userId=ce56d9dcd568&source=post_page-ce56d9dcd568----9c6b2cf4497a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9c6b2cf4497a--------------------------------)
    ·6 min read·Mar 28, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9c6b2cf4497a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhashing-in-modern-recommender-systems-a-primer-9c6b2cf4497a&user=Samuel+Flender&userId=ce56d9dcd568&source=-----9c6b2cf4497a---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9c6b2cf4497a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhashing-in-modern-recommender-systems-a-primer-9c6b2cf4497a&source=-----9c6b2cf4497a---------------------bookmark_footer-----------)![](../Images/9c2812cf751beb430b8fbe23eefabfa7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: (Midjourney)
  prefs: []
  type: TYPE_NORMAL
- en: Hashing is one of the most common “tricks” used in industrial Machine Learning
    applications, yet it doesn’t get nearly as much attention as it deserves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The biggest advantage of hashing, especially in modern [recommender systems](https://medium.com/towards-data-science/biases-in-recommender-systems-top-challenges-and-recent-breakthroughs-edcda59d30bf),
    is its finite-memory guarantee: without hashing, it would be highly impractical
    to learn the relevance of billions of videos, news articles, photos, or web pages
    for billions of users without running out of memory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But we’re getting ahead of ourselves here. This post is a primer, so let’s
    go back to where it all started: the famous 2009 “hashing trick” paper.'
  prefs: []
  type: TYPE_NORMAL
- en: The paper that started it all
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea of using hashing as a way to process features, as well as the term
    “hashing trick”, were first introduced in a 2009 [paper](https://arxiv.org/abs/0902.2206)
    by a team of researchers from Yahoo, led by Kilian Weinberger, in the context
    of Email spam detection. An email, after all, is a sequence of words, and each
    word can be thought of as a feature. With hashing, the authors explain, we can
    represent emails as vectors (where each index corresponds to a particular word),
    and use these vectors in a spam collaborative filtering model.
  prefs: []
  type: TYPE_NORMAL
