- en: Quantum Computing for Optimization Problems — Solving the Knapsack Problem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 量子计算在优化问题中的应用——解决背包问题
- en: 原文：[https://towardsdatascience.com/quantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8?source=collection_archive---------7-----------------------#2023-01-16](https://towardsdatascience.com/quantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8?source=collection_archive---------7-----------------------#2023-01-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/quantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8?source=collection_archive---------7-----------------------#2023-01-16](https://towardsdatascience.com/quantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8?source=collection_archive---------7-----------------------#2023-01-16)
- en: How to solve an optimization problem using quantum computing, compared to a
    traditional solution
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用量子计算解决优化问题，与传统解决方案相比
- en: '[](https://florin-andrei.medium.com/?source=post_page-----274f01e78ed8--------------------------------)[![Florin
    Andrei](../Images/372ac3e80dbc03cbd20295ec1df5fa6f.png)](https://florin-andrei.medium.com/?source=post_page-----274f01e78ed8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----274f01e78ed8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----274f01e78ed8--------------------------------)
    [Florin Andrei](https://florin-andrei.medium.com/?source=post_page-----274f01e78ed8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://florin-andrei.medium.com/?source=post_page-----274f01e78ed8--------------------------------)[![Florin
    Andrei](../Images/372ac3e80dbc03cbd20295ec1df5fa6f.png)](https://florin-andrei.medium.com/?source=post_page-----274f01e78ed8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----274f01e78ed8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----274f01e78ed8--------------------------------)
    [Florin Andrei](https://florin-andrei.medium.com/?source=post_page-----274f01e78ed8--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faeaeb9d7d248&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8&user=Florin+Andrei&userId=aeaeb9d7d248&source=post_page-aeaeb9d7d248----274f01e78ed8---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----274f01e78ed8--------------------------------)
    ·12 min read·Jan 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F274f01e78ed8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8&user=Florin+Andrei&userId=aeaeb9d7d248&source=-----274f01e78ed8---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Faeaeb9d7d248&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8&user=Florin+Andrei&userId=aeaeb9d7d248&source=post_page-aeaeb9d7d248----274f01e78ed8---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----274f01e78ed8--------------------------------)
    ·12分钟阅读·2023年1月16日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F274f01e78ed8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8&user=Florin+Andrei&userId=aeaeb9d7d248&source=-----274f01e78ed8---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F274f01e78ed8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8&source=-----274f01e78ed8---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F274f01e78ed8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fquantum-computing-for-optimization-problems-solving-the-knapsack-problem-274f01e78ed8&source=-----274f01e78ed8---------------------bookmark_footer-----------)'
- en: There are many problems that require finding the maximum or minimum of a function,
    called the objective function, that depends on several (or many) variables; certain
    constraints may or may not need to be applied to the variables. The variables
    could be binary, integer, elements in sets, floating point, etc. The constraints
    may apply to variables individually, or could be more complex.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多问题涉及找到一个函数的最大值或最小值，这个函数称为目标函数，依赖于几个（或许多）变量；某些约束可能需要或不需要应用于这些变量。这些变量可以是二进制的、整数的、集合中的元素、浮点数等。约束可能应用于单个变量，也可能更复杂。
- en: Specifically, these problems could offer solutions for optimizing industrial
    processes, or optimizing the flow of goods between factories and warehouses (by
    cost, by time, by throughput), could optimize driving routes, could find all members
    of a social network that satisfy some complex criterion — the examples could go
    on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，这些问题可能提供优化工业过程的解决方案，或优化工厂和仓库之间的货物流动（按成本、时间、吞吐量），还可以优化驾驶路线，找到满足某些复杂标准的社交网络成员——示例可以继续列举下去。
- en: 'The algorithms for solving these problems are numerous: linear programming,
    integer programming, simulated annealing, pure simulation techniques, and many
    more. These tend to be studied in fields you may know as Prescriptive Analytics,
    Operations Research, etc. Generally, these algorithms run on conventional CPUs.
    Where applicable, GPU solvers are also used.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些问题的算法有很多：线性规划、整数规划、模拟退火、纯模拟技术等等。这些算法通常在你可能熟悉的领域如规范分析、运筹学等中进行研究。一般来说，这些算法运行在传统的
    CPU 上，适用时也会使用 GPU 求解器。
- en: Quantum computing is a future-oriented topic that has been gaining popularity
    in recent years. While full general-purpose quantum computing is not generally
    available right now (January 2023), certain specialized machines can be used already
    to solve optimization problems extremely fast. [Here is an article published by
    Ars Technica](https://arstechnica.com/science/2023/01/companies-are-relying-on-quantum-annealers-for-useful-computations/)
    showcasing some applications for these early quantum systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算是一个面向未来的话题，近年来越来越受到关注。虽然目前（2023 年 1 月）全面通用的量子计算机尚未普遍可用，但某些专用机器已经可以用来极其快速地解决优化问题。[这是
    Ars Technica 发布的一篇文章](https://arstechnica.com/science/2023/01/companies-are-relying-on-quantum-annealers-for-useful-computations/)，展示了一些这些早期量子系统的应用。
- en: In this article, we will describe briefly one of these early quantum architectures,
    and we will compare it with a classical approach for solving a typical optimization
    case — the knapsack problem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将简要描述其中一种早期的量子架构，并将其与解决典型优化问题的经典方法——背包问题进行比较。
- en: But first, let’s talk about models.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们讨论一下模型。
- en: Quadratic Models — Binary, Discrete, Constrained
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二次模型——二元、离散、约束
- en: 'There is a class of models called binary quadratic (BQM). Their variables are
    binary (can take one out of two possible values), and they are a combination of
    linear and quadratic terms. The Ising formula provides an example of an objective
    function for a BQM model:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有一类模型称为二次二元模型（BQM）。它们的变量是二元的（可以取两个可能值中的一个），并且它们是线性和二次项的组合。Ising 公式提供了一个 BQM
    模型的目标函数示例：
- en: '![](../Images/0de87df3dedcb658e41b6d9ad831888e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0de87df3dedcb658e41b6d9ad831888e.png)'
- en: Ising model, objective function
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Ising 模型，目标函数
- en: The variables s can take values from {-1, +1}. The h coefficients are the linear
    biases. The J coefficients are the quadratic couplings. The objective function
    can be thought of as the energy of the system — more on that later.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 s 可以取 {-1, +1} 的值。h 系数是线性偏差。J 系数是二次耦合。目标函数可以被看作是系统的能量——稍后会详细讲解。
- en: 'An equivalent way to describe the same BQM models is the QUBO formula:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 描述相同 BQM 模型的等效方式是 QUBO 公式：
- en: '![](../Images/5a4b7ff7b5a562c58748aaff6265f1ff.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a4b7ff7b5a562c58748aaff6265f1ff.png)'
- en: QUBO model, objective function
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: QUBO 模型，目标函数
- en: The model variables are the vector x of binary values — the possible values
    are {0, 1}. The upper-diagonal matrix Q contains the linear coefficients on the
    diagonal, and the quadratic coefficients are off-diagonal.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 模型变量是二元值向量 x——可能的值为 {0, 1}。上对角矩阵 Q 包含对角线上的线性系数，二次系数则在非对角线位置。
- en: Both the Ising and the QUBO equations describe the same models, and converting
    between them should be trivial. Ising may look more familiar from a physics background,
    whereas QUBO is more akin to a computer science model. Solving these models means
    finding the values for variables that minimize the objective function.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ising 和 QUBO 方程描述的是相同的模型，它们之间的转换应该是微不足道的。Ising 从物理背景看可能更为熟悉，而 QUBO 更类似于计算机科学模型。解决这些模型意味着找到使目标函数最小化的变量值。
- en: If the variables can take discrete values from a set larger than just binary,
    the model is called discrete quadratic — DQM. If the variables can have any integer
    or real values, and various constraints may bind these variables, then the model
    is called constrained quadratic — CQM. These are generalizations of the basic
    BQM description.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量可以取自一个比二进制更大的离散值集合，则模型称为离散二次模型——DQM。如果变量可以取任意整数或实数值，并且可能受到各种约束，那么模型称为受约束的二次模型——CQM。这些是基本BQMs描述的推广。
- en: Let’s explore a hardware architecture that can solve such models very efficiently.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨一种能够高效解决此类模型的硬件架构。
- en: D-Wave Quantum Annealers
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D-Wave量子退火机
- en: A general-purpose quantum computer may contain a number of qubits (quantum bits,
    with values of either 0 or 1) connected via quantum logic gates. Such a machine
    could be programmed via an SDK like [Qiskit](https://qiskit.org/), and could solve
    virtually any problem — hence the qualifier “general-purpose”. Right now, no such
    machines can yet solve real-world problems since the hardware is still very limited
    by low qubit counts and high error rates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通用量子计算机可能包含通过量子逻辑门连接的一些量子位（量子比特，值为0或1）。这样的机器可以通过像[Qiskit](https://qiskit.org/)这样的SDK进行编程，并可以解决几乎任何问题——因此被称为“通用”。目前，没有这样的机器能够解决实际问题，因为硬件仍然受到量子位数量有限和高错误率的严重限制。
- en: 'But for specialized applications, quantum computers can already be used. [D-Wave](https://www.dwavesys.com/)
    has built quantum computers that can be used to solve various optimization problems
    today. This is the architecture of a D-Wave QPU:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但对于专业应用，量子计算机已经可以使用。[D-Wave](https://www.dwavesys.com/) 已经建立了可以用于解决各种优化问题的量子计算机。这是D-Wave
    QPU的架构：
- en: '![](../Images/36a4790cdb67e88c640bc342a250b804.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36a4790cdb67e88c640bc342a250b804.png)'
- en: D-Wave Chimera QPU
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: D-Wave Chimera QPU
- en: The thin, elongated black shapes, grouped in 4+4 grids (unit cells), are tiny
    superconductive loops, criss-crossing the surface of the chip. Each loop, being
    superconductive, can hold an electric current. Due to the current, the loop will
    have a small magnetic field. The direction of the magnetic field could be either
    up or down (either +1 or -1). Think of the loops as qubits — quantum bits.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些细长的黑色形状，分布在4+4网格（单元格）中，是微小的超导环路，交错布置在芯片表面。由于每个环路是超导的，它可以承载电流。由于电流的存在，环路会产生一个小的磁场。磁场的方向可以是向上或向下（即+1或-1）。把这些环路看作是量子位——量子比特。
- en: The green dots are called internal couplers — they are internal to each 4x4
    unit cell. They couple the magnetic fields of two intersecting loops by some amount,
    so the values of the fields are partially co-dependent. The loops do not touch,
    they are just coupled magnetically.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色点称为内部耦合器——它们是每个4x4单元格内部的耦合器。它们通过一定程度耦合两个交叉环路的磁场，因此这些磁场的值是部分相互依赖的。环路之间并不接触，它们只是通过磁力耦合。
- en: The blue dots are called external couplers. They couple the magnetic fields
    of loops in different unit cells.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色点称为外部耦合器。它们耦合不同单元格中环路的磁场。
- en: There are many unit cells in a Chimera QPU, with the total number of qubits
    exceeding 2000 per QPU.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chimera QPU中有许多单元格，总的量子位数量超过每个QPU的2000个。
- en: Remember the Ising formula for BQMs? The magnetic fields in the loops are the
    variables s in the model. Each loop can have a hardware bias that strengthens
    or weakens the field — the biases are the linear coefficients h in the Ising formula.
    And the couplers (internal or external) are the quadratic coefficients J in Ising.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得BQMs中的Ising公式吗？环路中的磁场是模型中的变量s。每个环路可以有一个硬件偏置，用来增强或削弱磁场——这些偏置是Ising公式中的线性系数h。而耦合器（内部或外部）是Ising模型中的二次系数J。
- en: 'The total energy of the system, as calculated via the Ising formula, is given
    by:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的总能量，通过Ising公式计算，表示为：
- en: the orientation (up or down) of the magnetic field of each loop (the s variables
    in Ising, which can be either +1 or -1)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个环路磁场的方向（向上或向下）（在Ising模型中的s变量，可以是+1或-1）
- en: the bias of each loop (the h coefficients in Ising)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个环路的偏置（在Ising模型中的h系数）
- en: the couplings (the J coefficients in Ising)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 耦合（在Ising模型中的J系数）
- en: In other words, the total energy of the quantum device is the same as the objective
    function in the Ising model. If the physical system reaches its minimum possible
    energy, that ought to be the same as the smallest possible value for the objective
    function.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，量子设备的总能量与Ising模型中的目标函数是相同的。如果物理系统达到了其可能的最小能量，那么这应该与目标函数的最小值相同。
- en: To solve a BQM, the Ising formula needs to be written according to the specifics
    of the problem. The h and J coefficients from the Ising formula give the biases
    and couplings within the QPU, and are coded into the hardware. Initially, all
    loops are set in a state of quantum superposition, where their magnetic fields
    are pointing both up and down. That corresponds to a high energy state. The whole
    setup process can be done in Python via the D-Wave API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决 BQM，需要根据问题的具体情况编写 Ising 公式。Ising 公式中的 h 和 J 系数提供了 QPU 内部的偏差和耦合，并被编码到硬件中。最初，所有回路都被设置在量子叠加状态，其中它们的磁场指向上下，这对应于高能量状态。整个设置过程可以通过
    D-Wave API 在 Python 中完成。
- en: The total energy of the system is then lowered gradually (a process called annealing),
    until it reaches the minimum possible value given the h and J coefficients (biases
    and couplings). At that point, the quantum superposition of the magnetic fields
    is destroyed; the field of any loop will point either up or down.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的总能量随后会逐渐降低（一个叫做退火的过程），直到达到给定 h 和 J 系数（偏差和耦合）下的最小可能值。此时，磁场的量子叠加状态被破坏；任何回路的磁场将指向上或下。
- en: The minimum value of the total energy is the value of the objective function
    that corresponds to the solution to the BQM. The directions of the magnetic fields
    of the loops are the values of the variables which solve the optimization problem
    (up=+1, down=-1). Simply reading the loops at that point provides the solution
    to the problem.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 总能量的最小值是对应于 BQM 解的目标函数值。回路的磁场方向是解决优化问题的变量值（上=+1，下=-1）。在那个点读取回路即可得到问题的解决方案。
- en: In practice, quantum annealing takes a fraction of a second. Regardless of the
    size of the problem, if the Ising BQM can fit on a QPU chip, the solution (the
    annealed final state) is obtained very quickly. D-Wave exploits the tendency of
    physical systems to reach low energy states, and uses that to solve NP-hard problems
    very quickly. The name Ising may ring a bell — the equations determined by Lenz
    and Ising a century ago are a statistical model for ferromagnetism, and are here
    used to solve a specific type of model via physical processes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，量子退火只需几分之一秒。无论问题的大小如何，只要 Ising BQM 可以适配到 QPU 芯片上，解决方案（退火后的最终状态）都能非常迅速地得到。D-Wave
    利用物理系统趋向低能量状态的倾向，快速解决 NP 难题。Ising 这个名字可能会让你想起——一个世纪前由 Lenz 和 Ising 确定的方程是铁磁性的一种统计模型，在这里用于通过物理过程解决特定类型的模型。
- en: In a sense, the quantum annealer (D-Wave QPU) is like an analog computer that
    simulates numeric problems with physical processes. It could also be thought of
    as related to an FPGA, in the sense that it’s a device that can be configured
    for a specific problem, solves the problem quickly, then can be reconfigured for
    a different problem.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上讲，量子退火机（D-Wave QPU）就像一个模拟计算机，通过物理过程模拟数值问题。它也可以被看作与 FPGA 相关，因为它是一个可以为特定问题配置的设备，快速解决问题后，可以重新配置以处理不同的问题。
- en: Back to the Models
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到模型
- en: As long as your problem can be expressed as a BQM, it can be solved by a D-Wave
    quantum annealer directly and very quickly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你的问题可以表示为 BQM，它就可以通过 D-Wave 量子退火机直接并且非常快速地解决。
- en: What if the problem is not quadratic? It could be linear, or cubic, etc. In
    general, models can be reformulated by introducing dummy variables, and via other
    techniques, until they become quadratic. [The D-Wave Problem-Solving Handbook](https://docs.dwavesys.com/docs/latest/doc_handbook.html)
    describes several such techniques.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题不是二次的呢？它可能是线性的、立方的等等。通常，通过引入虚拟变量及其他技术，模型可以被重新制定，直到它们变为二次模型。[D-Wave 问题解决手册](https://docs.dwavesys.com/docs/latest/doc_handbook.html)描述了几种这样的技术。
- en: 'What if the models, even after reformulation, are quadratic but not purely
    binary? Some could be discrete models (DQM — more than just two values for each
    variable), others may have constraints and the variables could be anything (CQM
    — constrained quadratic models). DQM and CQM cannot run directly on a quantum
    annealer. However, you can still code the problem using the D-Wave API and submit
    it to the solvers in the cloud. D-Wave will decompose the problem into BQM (which
    can be solved by the quantum machine) and the rest (which is then solved by D-Wave
    using regular solvers). Think of it as divide-and-conquer: D-Wave tries to solve
    as much of your model as possible using the quantum annealer, but some problems
    still have parts that do not conform to the BQM equations. The combination of
    quantum and classical solvers that can solve different kinds of quadratic models
    is called a hybrid solver.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模型在重新表述后仍然是二次的但不是纯粹的二进制的怎么办？有些可能是离散模型（DQM——每个变量有多个值），其他的可能有约束且变量可以是任何东西（CQM——受约束的二次模型）。DQM和CQM不能直接在量子退火器上运行。然而，你仍然可以使用D-Wave
    API编码问题，并将其提交到云中的求解器。D-Wave会将问题分解为BQM（可以由量子机器解决）和其余部分（由D-Wave使用常规求解器解决）。可以将其视为分而治之：D-Wave尝试使用量子退火器解决尽可能多的模型，但某些问题仍有不符合BQM方程的部分。可以解决不同类型二次模型的量子和经典求解器的组合称为混合求解器。
- en: In practice, even when a DQM or a CQM is solved with hybrid solvers, the process
    tends to still be very fast. The hard kernel of the problem is solved as BQM (perhaps
    many BQMs are sampled from a large parameter space), and the classical algorithms
    can be thought of as summarizing across large sample sets of BQMs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，即使用混合求解器解决DQM或CQM，过程通常仍然非常迅速。问题的硬核部分被解决为BQM（可能从大参数空间中采样了许多BQM），而经典算法可以被看作是对大量BQM样本集进行总结。
- en: It is worth spending time to formulate the problem as a BQM, as that will be
    solved extremely fast on a quantum annealer. It may still be worth formulating
    the problem as a DQM or CQM, since in many cases the problem will still be solved
    by the D-Wave hybrid solvers in a very short time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 花时间将问题表述为BQM是值得的，因为它将在量子退火器上极其迅速地解决。将问题表述为DQM或CQM仍然是值得的，因为在许多情况下，问题仍将由D-Wave混合求解器在非常短的时间内解决。
- en: If the objective function needs to be maximized instead of minimized, just flip
    the sign on the whole formula. If you need to solve an equality instead of minimizing
    some expression, move all terms to the left side (which then becomes equal to
    zero), then square it — the squared amount, when minimized, will reach zero, which
    is what you want.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标函数需要最大化而不是最小化，只需将整个公式的符号反转。如果你需要解一个等式而不是最小化某些表达式，将所有项移到左侧（这样等式就变为零），然后平方——当平方值最小化时，它将达到零，这就是你所期望的。
- en: Many mathematical tricks like these can be used to formulate the problem in
    terms close to the quadratic models that the D-Wave solvers (quantum and hybrid)
    can solve very efficiently — minimize a function that looks a lot like a quadratic
    model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用许多类似的数学技巧将问题表述为接近于D-Wave求解器（量子和混合型）可以非常高效解决的二次模型——最小化一个看起来很像二次模型的函数。
- en: The Knapsack Problem
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背包问题
- en: The example we will use here to compare quantum technology with traditional
    approaches is called the knapsack problem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里用来比较量子技术和传统方法的例子叫做背包问题。
- en: '![](../Images/8174c1109d708465e32c4f5f34e89cb9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8174c1109d708465e32c4f5f34e89cb9.png)'
- en: knapsack problem
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 背包问题
- en: You have a knapsack with a weight limit — it can only carry a certain maximum
    weight. You have many items, each with a different weight, and a different monetary
    value. You want to choose a number of items to carry in the knapsack, while maximizing
    the monetary value of the whole transport, but without exceeding the maximum allowable
    weight.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个背包，具有重量限制——它只能承载一定的最大重量。你有许多物品，每个物品都有不同的重量和货币价值。你想选择一些物品放入背包中，同时最大化整个运输的货币价值，但又不超过最大允许的重量。
- en: The objective function is obviously the monetary value of all items in the knapsack
    — bigger is better. The constraint is the total weight of the items, which must
    be at or below some value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数显然是背包中所有物品的货币价值——越大越好。约束是物品的总重量，必须在某个值以下或等于该值。
- en: There are many ways to solve this problem. A brute force approach is doable
    if the number of items is small. This becomes very quickly unfeasible even for
    a moderate number of items.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法有很多。如果项的数量较少，蛮力方法是可行的。但即使对于适中的项数，这种方法也很快变得不可行。
- en: The classical approach we will describe below is called integer programming.
    Then we will compare it with the D-Wave hybrid solvers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将下面描述的经典方法称为整数编程。然后我们将其与 D-Wave 混合求解器进行比较。
- en: Integer Programming
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整数编程
- en: Out of the many ways to solve this problem, we will pick [the Pyomo library](http://www.pyomo.org/)
    to construct the integer programming model, and then we will use [the GLPK solver](https://www.gnu.org/software/glpk/)
    to solve it. There are certainly faster methods available, but this code is simple
    and looks rather similar to the quantum code in the next section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决这个问题的众多方法中，我们将选择[Pyomo 库](http://www.pyomo.org/)来构建整数编程模型，然后使用[GLPK 求解器](https://www.gnu.org/software/glpk/)来解决它。当然，存在更快的方法，但这段代码很简单，并且与下一节的量子代码相似。
- en: 'The full Jupyter notebook is linked at the end of the article. This is just
    the integer programming part:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 Jupyter notebook 链接在文章末尾。这只是整数编程部分：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The values and weights lists contain the monetary values and the weights of
    all items. The objective function is created by summing the monetary values of
    all chosen items. The constraint is built by summing all weights of chosen items,
    then capping that sum as equal to or less than max_weight.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 值和权重列表包含所有项的货币价值和重量。目标函数是通过求和所有选定项的货币价值来创建的。约束是通过求和所有选定项的重量来建立的，然后将该总和限制为不超过
    max_weight。
- en: The complete model is sent to the solver, running locally. When the solver is
    done, the results are parsed out of the solver output.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的模型被发送到本地运行的求解器。当求解器完成后，结果从求解器输出中解析出来。
- en: Quantum Programming
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 量子编程
- en: We use the D-Wave SDK, which formulates the model, then submits it to the D-Wave
    solvers running in the cloud.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 D-Wave SDK，它构建模型，然后将其提交给在云端运行的 D-Wave 求解器。
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We start with the same weights and values lists. The model for this problem
    cannot be pure BQM, since we have a constraint. Therefore, we choose a hybrid
    sampler.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从相同的权重和值列表开始。这个问题的模型不能是纯 BQM，因为我们有一个约束。因此，我们选择了一个混合采样器。
- en: An interesting twist is that many sample sets may be returned by D-Wave as part
    of the solution. Some are not feasible (e.g. violate constraints) and we need
    to filter them out of the results. Out of the feasible sample sets, one or several
    will have the lowest Ising energy — those are the best solutions found by the
    quantum computer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的变化是，D-Wave 可能会返回许多样本集作为解决方案的一部分。其中一些不可行（例如，违反约束），我们需要将它们从结果中筛除。在可行的样本集中，一个或多个将具有最低的
    Ising 能量——这些就是量子计算机找到的最佳解决方案。
- en: Assuming there is a “best” solution, the quantum annealer does not always converge
    on it. Details are complex, see the D-Wave handbook, but in essence a heuristic
    search is sometimes employed to find a “good enough” solution. In other cases,
    the solver can be coaxed into converging more strongly toward the absolute best
    solution. Finally, another trick is to repeatedly sample the solutions until the
    absolute best combination is obtained. The D-Wave documentation is very good,
    and it provides many techniques for fine-tuning the solvers for finding the best
    solutions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设存在一个“最佳”解决方案，量子退火机并不总是能收敛到它。具体细节较为复杂，请参见 D-Wave 手册，但本质上有时会使用启发式搜索来找到一个“足够好”的解决方案。在其他情况下，可以引导求解器更强烈地收敛到绝对最佳的解决方案。最后，另一种方法是反复采样解决方案，直到获得绝对最佳的组合。D-Wave
    文档非常优秀，并提供了许多微调求解器以寻找最佳解决方案的技巧。
- en: Results
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: We’ve tested both algorithms with a randomly generated dataset containing 50
    thousand items, with weights and values varying randomly in a discrete uniform
    distribution between 1 and 9999\. The knapsack weight limit was set to 80% of
    the total weight of all items — so some items will always be discarded.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们测试了两种算法，使用了一个包含 50,000 项的随机生成数据集，这些项的权重和值在 1 到 9999 的离散均匀分布中随机变化。背包的重量限制设置为所有项总重量的
    80%——因此一些项总是会被丢弃。
- en: 'This is the output from Pyomo / GLPK:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自 Pyomo / GLPK 的输出：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: GLPK took over 2 minutes to solve the problem. It came up with a combination
    of items that is just under the maximum allowed knapsack weight.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: GLPK 解决问题花费了超过 2 分钟。它得出了一种组合，这种组合的重量略低于允许的最大背包重量。
- en: 'This is the output from D-Wave:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自 D-Wave 的输出：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The total time spent by the D-Wave hybrid solver was 18 seconds. This is not
    quite an order-of-magnitude improvement over integer programming, but it’s getting
    there. Moreover, slight increases in the number of items force the integer programming
    code to spend a much, much longer time solving the problem — the increase is non-linear.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: D-Wave 混合求解器总共花费了 18 秒。这还没有达到比整数编程的数量级改进，但已经在接近了。此外，项目数量的轻微增加会迫使整数编程代码花费更长时间来解决问题——这种增加是非线性的。
- en: Not so with the D-Wave solver. It, too, spends a longer time solving a bigger
    problem, but the time it takes to do that does not increase catastrophically with
    the number of items.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: D-Wave 求解器并非如此。它也需要更长时间来解决更大的问题，但所需时间并不会随着项目数量的增加而急剧增长。
- en: The time spent on the actual QPU (the quantum annealer) is only 16 milliseconds.
    Most of the 18 seconds total is spent decomposing the problem, sampling the solution
    space, then sending the results back to the coder. The larger the fraction of
    the problem that runs on the actual QPU, the bigger the speed gain.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 实际 QPU（量子退火机）上花费的时间仅为 16 毫秒。18 秒的总时间中，大部分时间花费在分解问题、采样解决方案空间，然后将结果返回给编码器上。问题在实际
    QPU 上运行的部分越大，速度提升越显著。
- en: With very large problems, your Internet connection may become a limiting factor.
    In my case, running this problem over a mediocre connection, my code spent a few
    extra seconds pushing and pulling data across the Internet.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常大的问题，你的互联网连接可能会成为限制因素。在我的情况下，使用一个中等质量的连接运行这个问题时，我的代码花了几秒钟的额外时间在互联网上推送和拉取数据。
- en: Finally, please note that the solution found by the hybrid solver is actually
    a tiny bit worse than the solution found by the integer programming solver. The
    hybrid solvers can be optimized to find even better solutions, as mentioned above,
    but that is outside the scope of this article.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，混合求解器找到的解决方案实际上比整数编程求解器找到的解决方案稍差。混合求解器可以优化以找到更好的解决方案，如上所述，但这超出了本文的范围。
- en: Notes
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: 'The complete notebook with the entire code used in this article, along with
    other files and materials, can be found here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章中使用的完整代码的笔记本以及其他文件和材料可以在这里找到：
- en: '[](https://github.com/FlorinAndrei/misc/tree/master/quantum_computing_knapsack_article?source=post_page-----274f01e78ed8--------------------------------)
    [## misc/quantum_computing_knapsack_article at master · FlorinAndrei/misc'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/FlorinAndrei/misc/tree/master/quantum_computing_knapsack_article?source=post_page-----274f01e78ed8--------------------------------)
    [## misc/quantum_computing_knapsack_article at master · FlorinAndrei/misc'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你目前无法执行该操作。你在另一个标签或窗口中登录。你在另一个标签或窗口中注销了…
- en: github.com](https://github.com/FlorinAndrei/misc/tree/master/quantum_computing_knapsack_article?source=post_page-----274f01e78ed8--------------------------------)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/FlorinAndrei/misc/tree/master/quantum_computing_knapsack_article?source=post_page-----274f01e78ed8--------------------------------)
- en: 'The quantum solver code is based on D-Wave’s own examples repository, refactored
    for clarity:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 量子求解器代码基于 D-Wave 自己的示例库，经过了重新整理以便于理解：
- en: '[](https://github.com/dwave-examples?source=post_page-----274f01e78ed8--------------------------------)
    [## D-Wave Systems Examples'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/dwave-examples?source=post_page-----274f01e78ed8--------------------------------)
    [## D-Wave 系统示例'
- en: D-Wave Ocean code examples. D-Wave Systems Examples has 50 repositories available.
    Follow their code on GitHub.
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D-Wave Ocean 代码示例。D-Wave 系统示例有 50 个可用的仓库。关注他们在 GitHub 上的代码。
- en: github.com](https://github.com/dwave-examples?source=post_page-----274f01e78ed8--------------------------------)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/dwave-examples?source=post_page-----274f01e78ed8--------------------------------)
- en: All images shown in this article are created by the author.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中显示的所有图像均由作者创建。
