["```py\n# Start MLflow run for this experiment\n\n# End any existing runs\nmlflow.end_run()\n\nwith mlflow.start_run() as run:\n    # Turn autolog on to save model artifacts, requirements, etc.\n    mlflow.autolog(log_models=True)\n\n    print(run.info.run_id)\n\n    diabetes_X = diabetes.data\n    diabetes_y = diabetes.target\n\n    # Split data into test training sets, 3:1 ratio\n    (\n        diabetes_X_train,\n        diabetes_X_test,\n        diabetes_y_train,\n        diabetes_y_test,\n    ) = train_test_split(diabetes_X, diabetes_y, test_size=0.25, random_state=42)\n\n    alpha = 0.9\n    solver = \"cholesky\"\n    regr = linear_model.Ridge(alpha=alpha, solver=solver)\n\n    regr.fit(diabetes_X_train, diabetes_y_train)\n\n    diabetes_y_pred = regr.predict(diabetes_X_test)\n\n    # Log desired metrics\n    mlflow.log_metric(\"mse\", mean_squared_error(diabetes_y_test, diabetes_y_pred))\n    mlflow.log_metric(\n        \"rmse\", sqrt(mean_squared_error(diabetes_y_test, diabetes_y_pred))\n    )\n```", "```py\nwith mlflow.start_run(run_id=\"3fcf403e1566422493cd6e625693829d\") as run:\n    mlflow.log_metric(\"r2\", r2_score(diabetes_y_test, diabetes_y_pred))\n```", "```py\nmlflow.set_experiment(\"/mlflow_sdk_test\")\n```", "```py\nmy_experiment = mlflow.set_experiment(\"/mlflow_sdk_test\")\nexperiment_id = my_experiment.experiment_id\n```", "```py\n# End any existing runs\nmlflow.end_run()\n\nwith mlflow.start_run(experiment_id=experiment_id):\n    # Turn autolog on to save model artifacts, requirements, etc.\n    mlflow.autolog(log_models=True)\n\n    print(run.info.run_id)\n\n    diabetes_X = diabetes.data\n    diabetes_y = diabetes.target\n\n    # Split data into test training sets, 3:1 ratio\n    (\n        diabetes_X_train,\n        diabetes_X_test,\n        diabetes_y_train,\n        diabetes_y_test,\n    ) = train_test_split(diabetes_X, diabetes_y, test_size=0.25, random_state=42)\n\n    alpha = 0.8\n    solver = \"cholesky\"\n    regr = linear_model.Ridge(alpha=alpha, solver=solver)\n\n    regr.fit(diabetes_X_train, diabetes_y_train)\n\n    diabetes_y_pred = regr.predict(diabetes_X_test)\n\n    # Log desired metrics\n    mlflow.log_metric(\"mse\", mean_squared_error(diabetes_y_test, diabetes_y_pred))\n    mlflow.log_metric(\n        \"rmse\", sqrt(mean_squared_error(diabetes_y_test, diabetes_y_pred))\n    )\n    mlflow.log_metric(\"r2\", r2_score(diabetes_y_test, diabetes_y_pred))\n```", "```py\n# Start MLflow run for this experiment\n\n# End any existing runs\nmlflow.end_run()\n\n# Explicitly name runs\ntoday = dt.today()\n\nrun_name = \"Ridge Regression \" + str(today)\n\nwith mlflow.start_run(run_name=run_name) as run:\n    # Turn autolog on to save model artifacts, requirements, etc.\n    mlflow.autolog(log_models=True)\n\n    print(run.info.run_id)\n\n    diabetes_X = diabetes.data\n    diabetes_y = diabetes.target\n\n    # Split data into test training sets, 3:1 ratio\n    (\n        diabetes_X_train,\n        diabetes_X_test,\n        diabetes_y_train,\n        diabetes_y_test,\n    ) = train_test_split(diabetes_X, diabetes_y, test_size=0.25, random_state=42)\n\n    alpha = 0.5\n    solver = \"cholesky\"\n    regr = linear_model.Ridge(alpha=alpha, solver=solver)\n\n    regr.fit(diabetes_X_train, diabetes_y_train)\n\n    diabetes_y_pred = regr.predict(diabetes_X_test)\n\n    # Log desired metrics\n    mlflow.log_metric(\"mse\", mean_squared_error(diabetes_y_test, diabetes_y_pred))\n    mlflow.log_metric(\n        \"rmse\", sqrt(mean_squared_error(diabetes_y_test, diabetes_y_pred))\n    )\n    mlflow.log_metric(\"r2\", r2_score(diabetes_y_test, diabetes_y_pred))\n```", "```py\n# End any existing runs\nmlflow.end_run()\n\n# Explicitly name runs\nrun_name = \"Ridge Regression Nested\"\n\nwith mlflow.start_run(run_name=run_name) as parent_run:\n    print(parent_run.info.run_id)\n\n    with mlflow.start_run(run_name=\"Child Run: alpha 0.1\", nested=True):\n        # Turn autolog on to save model artifacts, requirements, etc.\n        mlflow.autolog(log_models=True)\n\n        diabetes_X = diabetes.data\n        diabetes_y = diabetes.target\n\n        # Split data into test training sets, 3:1 ratio\n        (\n            diabetes_X_train,\n            diabetes_X_test,\n            diabetes_y_train,\n            diabetes_y_test,\n        ) = train_test_split(diabetes_X, diabetes_y, test_size=0.25, random_state=42)\n\n        alpha = 0.1\n        solver = \"cholesky\"\n        regr = linear_model.Ridge(alpha=alpha, solver=solver)\n\n        regr.fit(diabetes_X_train, diabetes_y_train)\n\n        diabetes_y_pred = regr.predict(diabetes_X_test)\n\n        # Log desired metrics\n        mlflow.log_metric(\"mse\", mean_squared_error(diabetes_y_test, diabetes_y_pred))\n        mlflow.log_metric(\n            \"rmse\", sqrt(mean_squared_error(diabetes_y_test, diabetes_y_pred))\n        )\n        mlflow.log_metric(\"r2\", r2_score(diabetes_y_test, diabetes_y_pred))\n```", "```py\n# End any existing runs\nmlflow.end_run()\n\nwith mlflow.start_run(run_id=\"61d34b13649c45699e7f05290935747c\") as parent_run:\n    print(parent_run.info.run_id)\n    with mlflow.start_run(run_name=\"Child Run: alpha 0.2\", nested=True):\n        # Turn autolog on to save model artifacts, requirements, etc.\n        mlflow.autolog(log_models=True)\n\n        diabetes_X = diabetes.data\n        diabetes_y = diabetes.target\n\n        # Split data into test training sets, 3:1 ratio\n        (\n            diabetes_X_train,\n            diabetes_X_test,\n            diabetes_y_train,\n            diabetes_y_test,\n        ) = train_test_split(diabetes_X, diabetes_y, test_size=0.25, random_state=42)\n\n        alpha = 0.2\n        solver = \"cholesky\"\n        regr = linear_model.Ridge(alpha=alpha, solver=solver)\n\n        regr.fit(diabetes_X_train, diabetes_y_train)\n\n        diabetes_y_pred = regr.predict(diabetes_X_test)\n\n        # Log desired metrics\n        mlflow.log_metric(\"mse\", mean_squared_error(diabetes_y_test, diabetes_y_pred))\n        mlflow.log_metric(\n            \"rmse\", sqrt(mean_squared_error(diabetes_y_test, diabetes_y_pred))\n        )\n        mlflow.log_metric(\"r2\", r2_score(diabetes_y_test, diabetes_y_pred))\n```", "```py\n# Create DataFrame of all runs in *current* experiment\ndf = mlflow.search_runs(order_by=[\"start_time DESC\"])\n\n# Print a list of the columns available\n# print(list(df.columns))\n\n# Create DataFrame with subset of columns\nruns_df = df[\n    [\n        \"run_id\",\n        \"experiment_id\",\n        \"status\",\n        \"start_time\",\n        \"metrics.mse\",\n        \"tags.mlflow.source.type\",\n        \"tags.mlflow.user\",\n        \"tags.estimator_name\",\n        \"tags.mlflow.rootRunId\",\n    ]\n].copy()\nruns_df.head()\n```", "```py\n# Feature engineering to create some additional columns\nruns_df[\"start_date\"] = runs_df[\"start_time\"].dt.date\nruns_df[\"is_nested_parent\"] = runs_df[[\"run_id\",\"tags.mlflow.rootRunId\"]].apply(lambda x: 1 if x[\"run_id\"] == x[\"tags.mlflow.rootRunId\"] else 0, axis=1)\nruns_df[\"is_nested_child\"] = runs_df[[\"run_id\",\"tags.mlflow.rootRunId\"]].apply(lambda x: 1 if x[\"tags.mlflow.rootRunId\"] is not None and x[\"run_id\"] != x[\"tags.mlflow.rootRunId\"]else 0, axis=1)\nruns_df\n```", "```py\npd.DataFrame(runs_df.groupby(\"start_date\")[\"run_id\"].count()).reset_index()\n```", "```py\npd.DataFrame(runs_df.groupby(\"tags.estimator_name\")[\"run_id\"].count()).reset_index()\n```"]