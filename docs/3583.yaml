- en: Metal Programming in Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/metal-programming-in-julia-2db5fe8ee32c?source=collection_archive---------4-----------------------#2023-12-04](https://towardsdatascience.com/metal-programming-in-julia-2db5fe8ee32c?source=collection_archive---------4-----------------------#2023-12-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/1b0fa479f9906bf1570e41eed0082af9.png)'
  prefs: []
  type: TYPE_IMG
- en: Little Heavy | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the power of macOS GPUs with the Metal.jl Framework.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://lausena.medium.com/?source=post_page-----2db5fe8ee32c--------------------------------)[![Gabriel
    Sena](../Images/713235a9a7f276a72862c38293d7ac89.png)](https://lausena.medium.com/?source=post_page-----2db5fe8ee32c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2db5fe8ee32c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2db5fe8ee32c--------------------------------)
    [Gabriel Sena](https://lausena.medium.com/?source=post_page-----2db5fe8ee32c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff2cc6e7e5fc6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetal-programming-in-julia-2db5fe8ee32c&user=Gabriel+Sena&userId=f2cc6e7e5fc6&source=post_page-f2cc6e7e5fc6----2db5fe8ee32c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2db5fe8ee32c--------------------------------)
    ·11 min read·Dec 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2db5fe8ee32c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetal-programming-in-julia-2db5fe8ee32c&user=Gabriel+Sena&userId=f2cc6e7e5fc6&source=-----2db5fe8ee32c---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2db5fe8ee32c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmetal-programming-in-julia-2db5fe8ee32c&source=-----2db5fe8ee32c---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just last year, we were [introduced](https://www.youtube.com/watch?v=IARikXzRU7s&ab_channel=TheJuliaProgrammingLanguage)
    to the [Metal.jl](https://github.com/JuliaGPU/Metal.jl) Framework, a GPU backend
    for Apple Hardware. This is exciting news for [Julia](https://julialang.org/)
    practitioners looking to leverage the full potential of their macOS M-series chips.
    In particular, data scientists and ML engineers can speed up their computational
    workflows by tapping into the parallel processing power of [GPUs](/what-is-a-gpu-and-do-you-need-one-in-deep-learning-718b9597aa0d),
    resulting in faster training and inference times. The integration of Metal.jl
    into the Julia ecosystem signifies an important push towards aligning the language’s
    capabilities with the continually evolving landscape of scientific computing and
    machine learning on Apple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In [2020](https://www.apple.com/newsroom/2020/06/apple-announces-mac-transition-to-apple-silicon/),
    Apple began transitioning its Mac lineup from Intel-based processors to Apple
    Silicon, starting with the M1 chip. While this has been a historic and impressive
    achievement from Apple it did come with its fair share of criticisms and issues.
    Since picking up my 32-core Mac Studio M1-chip, I have been looking to fully leverage
    the GPU and tinker with new applications. I must say, it hasn’t been all fun and
    games. From [ARM](https://en.wikipedia.org/wiki/ARM_architecture_family) architecture
    compatibility issues to unsupported machine learning libraries — it has been a
    challenge at times to get a working environment. This is expected with any…
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
