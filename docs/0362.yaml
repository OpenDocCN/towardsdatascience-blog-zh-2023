- en: 'Deploy Containerized Plotly Dash App with CI/CD (P2: GCP)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/deploy-containerised-plotly-dash-app-with-ci-cd-p2-gcp-dfa33edc5f2f?source=collection_archive---------14-----------------------#2023-01-24](https://towardsdatascience.com/deploy-containerised-plotly-dash-app-with-ci-cd-p2-gcp-dfa33edc5f2f?source=collection_archive---------14-----------------------#2023-01-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://ropdam.medium.com/?source=post_page-----dfa33edc5f2f--------------------------------)[![Robin
    Opdam](../Images/9dba1f1b77cb1b0a46a29a41b2b08e54.png)](https://ropdam.medium.com/?source=post_page-----dfa33edc5f2f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dfa33edc5f2f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dfa33edc5f2f--------------------------------)
    [Robin Opdam](https://ropdam.medium.com/?source=post_page-----dfa33edc5f2f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F49ce97f2f8f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-containerised-plotly-dash-app-with-ci-cd-p2-gcp-dfa33edc5f2f&user=Robin+Opdam&userId=49ce97f2f8f7&source=post_page-49ce97f2f8f7----dfa33edc5f2f---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dfa33edc5f2f--------------------------------)
    ·5 min read·Jan 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fdfa33edc5f2f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-containerised-plotly-dash-app-with-ci-cd-p2-gcp-dfa33edc5f2f&user=Robin+Opdam&userId=49ce97f2f8f7&source=-----dfa33edc5f2f---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fdfa33edc5f2f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeploy-containerised-plotly-dash-app-with-ci-cd-p2-gcp-dfa33edc5f2f&source=-----dfa33edc5f2f---------------------bookmark_footer-----------)![](../Images/17751f3101d4975c25a140430c2c974c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Dominik Lückmann](https://unsplash.com/@exdigy?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: After Heroku changed to paid tiers for their dynos, I wanted to try Google Cloud
    Platform (GCP) for deploying the same container, previously deployed to Heroku
    with CI/CD as described in [Part 1](https://medium.com/towards-data-science/deploy-containerized-plotly-dash-app-to-heroku-with-ci-cd-f82ca833375c).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/325a346e28c1a609e1ef8ceefc70be45.png)'
  prefs: []
  type: TYPE_IMG
- en: Example app deployed on [GCP](https://docker-dash-example.com/) using [Github
    Actions CI/CD Pipeline](https://github.com/ROpdam/docker-dash-example/actions),
    image by author. Note the latest action includes testing
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** This guide will use billable components within GCP, costs will remain
    minimal after initial deployment (below 1 euro in most cases). We will cover limiting
    and stopping costs at the end.'
  prefs: []
  type: TYPE_NORMAL
- en: For the initial setup (Github, app and deploying to Heroku) please see [P1 of
    this guide](https://medium.com/towards-data-science/deploy-containerized-plotly-dash-app-to-heroku-with-ci-cd-f82ca833375c).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here in P2 we zoom in on the deployment part for GCP and what you will need,
    thus changing step 5 and 6 from P1:'
  prefs: []
  type: TYPE_NORMAL
- en: File Structure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create Plotly Dash App
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Dockerfile, Run Locally
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build Docker Image with Github Actions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create and configure GCP project**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deploy to Google Cloud Run through Github Actions**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the repo [here on Github](https://github.com/ROpdam/docker-dash-example)
    and the app on [https://docker-dash-example.com/](https://docker-dash-example.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Create and configure GCP project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within GCP everything is organized through [projects](https://cloud.google.com/docs/overview#projects)
    in which you can enable services like Cloud Storage and Cloud Run. Create your
    Google Cloud account and project through [the console](https://console.cloud.google.com/)
    and [enable billing](https://cloud.google.com/billing/docs/how-to/modify-project).
    Afterwards, be sure to install the [gcloud CLI](https://cloud.google.com/sdk/gcloud)
    so you can interact with GCP through [gcloud commands](https://cloud.google.com/sdk/docs/cheatsheet)
    from your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the steps from [this tutorial](https://cloud.google.com/community/tutorials/cicd-cloud-run-github-actions)
    (step: Cloud Run) setup your service account, enable access to the services needed
    (run, storage, iam) and generate a key.json you’ll need for authentication later.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note: keep the key.json somewhere secure, perhaps not within your git repo.**'
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Deploy to Google Cloud Run through Github Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**6.1 push container**'
  prefs: []
  type: TYPE_NORMAL
- en: '**6.2 write deployment part in pipeline**'
  prefs: []
  type: TYPE_NORMAL
- en: '**6.3 limit billing and cleanup**'
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 Manual deployment on GCP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before automating the process, let’s manually deploy your app on Google Cloud
    Run (GCRu) through Google Container Register (GCRe). Following [Google’s guide](https://cloud.google.com/container-registry/docs/pushing-and-pulling)
    to push your image to GCRe you’ll finally run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that when using Apple’s Mx chip you’ll need an additional flag for the
    build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to your project’s GCRe to see the image you just pushed. To deploy
    this image on GCRu we can use the following command (assuming all permissions
    are ok):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Where the SERVICE is your project_id and the IMAGE_URL contains the HOSTNAME/PROJECT-ID/IMAGE:TAG
    we filled during the docker push command before. Check if your container runs
    through Cloud Run by following the URL on top of your app’s GCRu page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/147e5a829e3c8e11988ac2cfefac6ceb.png)'
  prefs: []
  type: TYPE_IMG
- en: GCRe (left) GCRu (right) containing the folder with Docker images and the app
    to be run in Cloud Run, screenshots by author
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 CI/CD for deployment on GCP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your app works through manual deployment let’s automate the process and incorporate
    a deployment step within the pipeline [from part 1](/deploy-containerized-plotly-dash-app-to-heroku-with-ci-cd-f82ca833375c).
    As a brief recap, part 1 focused on deploying your Plotly Dash app through Github
    Actions on Heroku. Now deployment to Heroku is swapped with deployment to GCP
    within the Github Workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by setting up the [Github Secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)
    needed for the deployment pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GCP_EMAIL**: the email from the service account you created, formatted like:
    `$ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GCP_PROJECT_ID**: your project name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GCP_CREDENTIALS**: your key.json (copy paste the content)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GCP_APP_NAME**: the name of your app (for within the GCRe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these secrets we can build the CI/CD workflow through Github Actions. Note
    that the initial build step of the workflow remains unchanged as we push and build
    the container within Github Packages first, please find the full explanation for
    the build part [in part 1](/deploy-containerized-plotly-dash-app-to-heroku-with-ci-cd-f82ca833375c?gi=ac91abf3ba6e).
  prefs: []
  type: TYPE_NORMAL
- en: '**Build step (unchanged):**'
  prefs: []
  type: TYPE_NORMAL
- en: Github Actions build step, gist by author
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploy step (changed to GCP):**'
  prefs: []
  type: TYPE_NORMAL
- en: Github Actions deploy step, gist by author
  prefs: []
  type: TYPE_NORMAL
- en: '(lines: 1–24) The start is similar to deployment to Heroku, however, within
    the environment we now define the IMAGE_NAME as the location of your image within
    GCRe. We checkout master then pull and build the image from Github Packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘Login to Google Cloud’: Using [Google’s defined workflow action](https://github.com/google-github-actions/auth)
    we authenticate to Google Cloud. Here we use the GCP_CREDENTIALS secret from Github
    Secrets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘Configure Docker’: Within [Google’s guide for pushing and pulling](https://cloud.google.com/container-registry/docs/pushing-and-pulling)
    images they also need you to setup [authentication for Docker](https://cloud.google.com/container-registry/docs/advanced-authentication#methods).
    This step configures authentication in the image during deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘Push to registry’: Push your image to GCRe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘Deploy’: Using [Google’s defined workflow action for deploying to GCRu](https://github.com/google-github-actions/deploy-cloudrun)
    we deploy the pushed container through Cloud Run like we did manually before.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes:** `— port=8080` is the port I expose within my container, this can
    be different for your container. `— allow-unauthenticated` allows requests to
    your Cloud Run application without a valid authentication token. I use this flag
    to have my app publicly accessible, please use this flag as you see fit for your
    app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.3 Limit billing and cleanup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the app to run we have activated multiple services. Take a look at the services
    described below and how to monitor and limit costs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Google Cloud Storage (GCS) costs](https://cloud.google.com/storage/pricing#europe),
    GCRe is storing the images of your containers within [GCS](https://cloud.google.com/storage).
    With a GB costing around 2 cents per month (in Europe) this should not cost you
    much if you keep the GCRe clean. We can make sure no old images linger in your
    GCRe by adding the following line that removes images without the ‘latest’ tag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[Google Cloud Run costs](https://cloud.google.com/run/pricing), having your
    apps operative costs computing power that you will be charged for. If your app
    is not used extensively this should also be below 1 or 2 dollar every month.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To keep track of these costs we can use the [Google Cloud Billing](https://cloud.google.com/billing/docs#:~:text=Cloud%20Billing%20is%20a%20collection,set%20of%20Google%20Cloud%20resources.)
    center that keeps track of all the costs spend. Here, you can set an alert for
    costs of your account or more specifically for a project or service.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can limit the [original resources Google allocates to your
    GCRu](https://cloud.google.com/run/quotas) using [GCP quotas](https://cloud.google.com/docs/quota#viewing_your_quota_console).
    Here you can limit the resources Google Cloud Run can use.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This taught me a lot about the advantages of containerizing an application to
    lift & shift it to another cloud platform. Make sure to monitor your Google Billing
    Overview and set alarms if you leave your app publicly accessible. If it is your
    first time using GCP you might still be eligible for their initial *$*300 of free
    credits.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please don’t hesitate to reach out with any questions or comments.
  prefs: []
  type: TYPE_NORMAL
- en: Happy to connect on [LinkedIn](https://www.linkedin.com/in/robinopdam/)!
  prefs: []
  type: TYPE_NORMAL
- en: Some of [my other projects](http://ropdam.github.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Things to Improve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There can (and should) be a testing step in between the building and the deployment
    steps of the CI/CD pipeline (done in the latest update to [the repo](https://github.com/ROpdam/docker-dash-example)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multi-step building can speed up deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The docker image can be made smaller with the right tweaks, meaning faster building
    and deployment (Alpine base image, skip pip cache etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional Things to try
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Testdriven.io FastApi Docker](https://testdriven.io/courses/tdd-fastapi/continuous-delivery/)
    course, great course from which I have learned most of the concepts described
    in this guide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
