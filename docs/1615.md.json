["```py\nwith pm.Model() as model:\n\n    # Set priors.\n    intercept=pm.Uniform(name=\"intercept\",lower=-10, upper=10)\n    x1_slope=pm.Uniform(name=\"x1_slope\",lower=-5, upper=5)\n    x2_slope=pm.Uniform(name=\"x2_slope\",lower=-5, upper=5)\n    interaction_slope=pm.Uniform(name=\"interaction_slope\",lower=-5, upper=5)\n    sigma=pm.Uniform(name=\"sigma\", lower=1, upper=5)\n\n    # Set likelhood.\n    likelihood = pm.Normal(name=\"y\", mu=intercept + x1_slope*x1+x2_slope*x2+interaction_slope*x1*x2, \\\n                           sigma=sigma, observed=y)\n    # Configure sampler.\n    trace = pm.sample(5000, chains=5, tune=1000, target_accept=0.87, random_seed=SEED)\n```", "```py\nwith model: \n    idata = pm.sample_prior_predictive(samples=200, random_seed=SEED)\n    idata.extend(pm.sample(200, tune=2000, random_seed=SEED)here\n```", "```py\nbackground=np.hstack((x1.reshape((250,1)),x2.reshape((250,1))))\nshap_values_list=[]\nx_test=np.array([2,3]).reshape((-1,2))\nfor i in range(len(pos_intercept)): \n  model=SimpleModel(intercept=pos_intercept[i],\n                    x1_slope=pos_x1_slope[i], \n                    x2_slope=pos_x2_slope[i], \n                    interaction_slope=pos_interaction_slope[i],\n                    sigma=pos_sigma[i])\n  explainer = shap.Explainer(model.predict, background)\n  shap_values = explainer(x_test)\n  shap_values_list.append(shap_values.values)\n```"]