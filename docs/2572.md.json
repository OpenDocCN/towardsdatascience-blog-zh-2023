["```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\ncols = ['P', 'Ws', 'Power_curve', 'Wa']\n\n# build the matrix\ncorrelation_matrix = np.corrcoef(data[cols].values.T)\nhm = sns.heatmap(correlation_matrix,\n                 cbar=True, annot=True, square=True, fmt='.3f',\n                 annot_kws={'size': 15},\n                 cmap='Blues',\n                 yticklabels=['P', 'Ws', 'Power_curve', 'Wa'],\n                 xticklabels=['P', 'Ws', 'Power_curve', 'Wa'])\n\n# save the figure\nplt.savefig('image.png', dpi=600, bbox_inches='tight')\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\ncols = ['P', 'Ws', 'Power_curve', 'Wa']\n\n# build the matrix\nsns.pairplot(data[cols], height=2.5)\nplt.tight_layout()\n\n# save the figure\nplt.savefig('image2.png', dpi=600, bbox_inches='tight')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\ncols = ['P', 'Ws', 'Power_curve', 'Wa']\n\n# buid the matrix\ndef correlation_dots(*args, **kwargs):\n    corr_r = args[0].corr(args[1], 'pearson')\n    ax = plt.gca()\n    ax.set_axis_off()\n    marker_size = abs(corr_r) * 3000\n    ax.scatter([.5], [.5], marker_size,\n               [corr_r], alpha=0.5,\n               cmap = 'Blues',\n               vmin = -1, vmax = 1,\n               transform = ax.transAxes)\n    font_size = abs(corr_r) * 40 + 5\n\nsns.set(style = 'white', font_scale = 1.6)\nfig = sns.PairGrid(data, aspect = 1.4, diag_sharey = False)\nfig.map_lower(sns.regplot)\nfig.map_diag(sns.histplot)\nfig.map_upper(correlation_dots)\n\n# save the figure\nplt.savefig('image3.jpg', dpi = 600, bbox_inches = 'tight')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\n\n# build the plot\nplt.scatter(data['Ws'], data['P'], color='steelblue', marker='+', label='actual')\nplt.scatter(data['Ws'], data['Power_curve'], color='black', label='theoretical')\nplt.xlabel('Wind Speed')\nplt.ylabel('Power')\nplt.legend(loc='best')\n\n# save the figure\nplt.savefig('image4.png', dpi=600, bbox_inches='tight')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\n\n# build the plot\nplt.scatter(data['Ws'], data['P'], color='steelblue', marker='+', label='actual')\nplt.scatter(data['Ws'], data['Power_curve'], color='black', label='theoretical')\n\n# add vertical lines, text notes and arrow\nplt.vlines(x=3.05, ymin=10, ymax=350, lw=3, color='black')\nplt.text(1.1, 355, r\"cut-in\", fontsize=15)\nplt.vlines(x=12.5, ymin=3000, ymax=3500, lw=3, color='black')\nplt.text(13.5, 2850, r\"nominal\", fontsize=15)\nplt.vlines(x=24.5, ymin=3080, ymax=3550, lw=3, color='black')\nplt.text(21.5, 2900, r\"cut-out\", fontsize=15)\nplt.annotate('outlier!', xy=(18.4,1805), xytext=(21.5,2050),\n            arrowprops={'color':'red'})\n\nplt.xlabel('Wind Speed')\nplt.ylabel('Power')\nplt.legend(loc='best')\n\n# save the figure\nplt.savefig('image4_2.png', dpi=600, bbox_inches='tight')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\n\n# resample 10-min data into hourly time measurements\ndata['Date/Time'] = pd.to_datetime(data['Date/Time'])\nfig = plt.figure(figsize=(10,8))\ngroup_data = (data.set_index('Date/Time')).resample('H')['P'].sum()\n\n# plot wind power dynamics\ngroup_data.plot(kind='line')\nplt.ylabel('Power')\nplt.xlabel('Date/Time')\nplt.title('Power generation (resampled to 1 hour)')\n\n# save the figure\nplt.savefig('wind_power.png', dpi=600, bbox_inches='tight')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom windrose import WindroseAxes\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\nwd  = data['Wa']\nws = data['Ws']\n\n# plot normalized wind rose in a form of a stacked histogram\nax = WindroseAxes.from_ax()\nax.bar(wd, ws, normed=True, opening=0.8, edgecolor='white')\nax.set_legend()\n\n# save the figure\nplt.savefig('windrose.png', dpi = 600, bbox_inches = 'tight')\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom windrose import WindroseAxes\n\n# read data\ndata = pd.read_csv('T1.csv')\nprint(data)\n\n# rename columns to make their titles shorter\ndata.rename(columns={'LV ActivePower (kW)':'P',\n                     'Wind Speed (m/s)':'Ws',\n                     'Theoretical_Power_Curve (KWh)':'Power_curve',\n                     'Wind Direction (°)': 'Wa'},inplace=True)\ndata['Date/Time'] = pd.to_datetime(data['Date/Time'])\n\nfig = plt.figure(figsize=(10,8))\n\n# plot both plots as subplots\nax1 = fig.add_subplot(211)\ngroup_data = (data.set_index('Date/Time')).resample('H')['P'].sum()\ngroup_data.plot(kind='line')\nax1.set_ylabel('Power')\nax1.set_xlabel('Date/Time')\nax1.set_title('Power generation (resampled to 1 hour)')\n\nax2 = fig.add_subplot(212, projection='windrose')\n\nwd  = data['Wa']\nws = data['Ws']\n\nax = WindroseAxes.from_ax()\nax2.bar(wd, ws, normed=True, opening=0.8, edgecolor='white')\nax2.set_legend()\n\n# save the figure\nplt.savefig('image5.png', dpi=600, bbox_inches='tight')\nplt.show()\n```", "```py\nimport numpy as np\nimport PIL\nfrom PIL import Image\n\n# list images that needs to be merged\nlist_im = ['wind_power.png','windrose.png']\nimgs = [PIL.Image.open(i) for i in list_im]\n\n# resize all images to match the smallest\nmin_shape = sorted([(np.sum(i.size), i.size) for i in imgs])[0][1]\n\n# for a vertical stacking - we use vstack\nimages_comb = np.vstack((np.asarray(i.resize(min_shape)) for i in imgs))\nimages_comb = PIL.Image.fromarray(imgs_comb)\n\n# save the figure\nimgages_comb.save('image5_2.png', dpi=(600,600))\n```", "```py\nimport numpy as np\nimport PIL\nfrom PIL import Image\n\nlist_im = ['image4.png','image4_2.png']\nimgs = [PIL.Image.open(i) for i in list_im]\n\n# pick the image which is the smallest, and resize the others to match it (can be arbitrary image shape here)\nmin_shape = sorted([(np.sum(i.size), i.size) for i in imgs])[0][1]\n\nimgs_comb = np.hstack((np.asarray(i.resize(min_shape)) for i in imgs))\n### save that beautiful picture\nimgs_comb = PIL.Image.fromarray(imgs_comb)\nimgs_comb.save('image4_merged.png', dpi=(600,600))\n```"]