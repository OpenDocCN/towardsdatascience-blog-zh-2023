["```py\nimport random\n\ndef shuffle_in_memory(filename_in, filename_out):\n    # Shuffle a file, line-by-line\n    with open(filename_in) as fp:\n        lines = fp.readlines()\n    # Randomize them in place:\n    random.shuffle(lines)\n    # Write the new order out:\n    with open(filename_out, \"w\") as fp:\n        fp.writelines(lines)\n```", "```py\nimport os\n\ndef make_file(lines):\n    filename = \"test-%s.txt\" % lines\n    print(\"Making test file '%s'...\" % filename)\n\n    with open(filename, \"w\") as fp:\n        for i in range(lines):\n            fp.write(f\"Line {i}\\n\")\n\n    print(\"Done!\")\n    return filename\n```", "```py\nfilename_in = make_file(1000)\n```", "```py\nLine 0\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\n...\n```", "```py\nfilename_out = \"test-randomized-1000.txt\"\nshuffle_in_memory(filename_in, filename_out)\n```", "```py\nLine 110\nLine 592\nLine 887\nLine 366\nLine 52\nLine 22\nLine 891\nLine 83\nLine 931\nLine 408\n...\n```", "```py\nfilename_in_big = make_file(10_000_000)\n```", "```py\nimport tempfile\n\ndef shuffle(filename_in, filename_out, memory_limit, file_split_count, \n            depth=0, debug=False):\n    if os.path.getsize(filename_in) < memory_limit:\n        if debug: print(\" \" * depth, f\"Level {depth + 1}\",\n            \"Shuffle in memory...\")\n        shuffle_in_memory(filename_in, filename_out)\n    else:\n        if debug: print(\n            \" \" * depth, f\"Level {depth + 1}\",\n            f\"{os.path.getsize(filename_in)} is too big;\",\n            f\"Split into {file_split_count} files...\"\n        )\n        # Split the big file into smaller files\n        temp_files = [tempfile.NamedTemporaryFile('w+', delete=False)\n                      for i in range(file_split_count)]\n        for line in open(filename_in):\n            random_index = random.randint(0, len(temp_files) - 1)\n            temp_files[random_index].write(line)\n\n        # Now we shuffle each smaller file\n        for temp_file in temp_files:\n            temp_file.close()\n            shuffle(temp_file.name, temp_file.name, memory_limit, \n                    file_split_count, depth+1, debug)\n\n        # And merge back in place of the original\n        if debug: print(\" \" * depth, f\"Level {depth + 1}\", \n            \"Merge files...\")\n        merge_files(temp_files, filename_out)\n```", "```py\ndef merge_files(temp_files, filename_out):\n    with open(filename_out, \"w\") as fp_out:\n        for temp_file in temp_files:\n            with open(temp_file.name) as fp:\n                line = fp.readline()\n                while line:\n                    fp_out.write(line)\n                    line = fp.readline()\n```", "```py\nfilename_out_big = \"test-randomized-10000000.txt\"\nshuffle(filename_in_big, filename_out_big, 128_888_890, 2, debug=True)\n```", "```py\n Level 1 128888890 is too big; Split into 2 files...\n  Level 2 Shuffle in memory...\n  Level 2 Shuffle in memory...\n Level 1 Merge files...\n```", "```py\nshuffle(filename_in_big, filename_out_big, 1_000_000, 20, debug=True)\n```", "```py\nimport sqlite3\n\ndef shuffle_sql(filename_in, filename_out, memory_limit, depth=0, debug=False):\n    if os.path.getsize(filename_in) < memory_limit:\n        if debug: print(\" \" * depth, f\"Level {depth + 1}\",\n            \"Shuffle in memory...\")\n        shuffle_in_memory(filename_in, filename_out)\n    else:\n        if debug: print(\n            \" \" * depth, f\"Level {depth + 1}\",\n            f\"{os.path.getsize(filename_in)} is too big;\",\n            f\"Writing to SQLite database...\"\n        )\n        temp_db = tempfile.NamedTemporaryFile(delete=False)\n        connection = sqlite3.connect(temp_db.name)\n        cursor = connection.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS lines (\n                line TEXT\n            );\n        \"\"\")\n        with open(filename_in) as fp:\n            line = fp.readline()\n            while line:\n                cursor.execute(\"INSERT INTO lines (line) VALUES (?);\", [line])\n                line = fp.readline()\n            connection.commit()\n        with open(filename_out, \"w\") as fp:\n          for line in cursor.execute(\"\"\"\n              SELECT line FROM lines ORDER BY random();\n              \"\"\"):\n              fp.write(line[0])\n```", "```py\nshuffle_sql(filename_in_big, filename_out_big, 1_000_000, debug=True)\n```"]