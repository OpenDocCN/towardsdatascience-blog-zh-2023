- en: 'Data Science for Raman Spectroscopy: A Practical Example'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-science-for-raman-spectroscopy-a-practical-example-e81c56cf25f?source=collection_archive---------5-----------------------#2023-01-16](https://towardsdatascience.com/data-science-for-raman-spectroscopy-a-practical-example-e81c56cf25f?source=collection_archive---------5-----------------------#2023-01-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A practical example on spectra pre-processing and modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nicopez?source=post_page-----e81c56cf25f--------------------------------)[![Nicolas
    Coca, PhD](../Images/548630c393526a802cf560344990a1e3.png)](https://medium.com/@nicopez?source=post_page-----e81c56cf25f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e81c56cf25f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e81c56cf25f--------------------------------)
    [Nicolas Coca, PhD](https://medium.com/@nicopez?source=post_page-----e81c56cf25f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F60149d1ba899&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-science-for-raman-spectroscopy-a-practical-example-e81c56cf25f&user=Nicolas+Coca%2C+PhD&userId=60149d1ba899&source=post_page-60149d1ba899----e81c56cf25f---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e81c56cf25f--------------------------------)
    ·10 min read·Jan 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe81c56cf25f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-science-for-raman-spectroscopy-a-practical-example-e81c56cf25f&user=Nicolas+Coca%2C+PhD&userId=60149d1ba899&source=-----e81c56cf25f---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe81c56cf25f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdata-science-for-raman-spectroscopy-a-practical-example-e81c56cf25f&source=-----e81c56cf25f---------------------bookmark_footer-----------)![](../Images/b3e7021c38a14b4e51219a154932f8b1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Science for Raman Spectra**. From spectral pre-processing to modeling:
    Spike detection and removal, baseline subtraction, smoothing and application of
    classical least squares for components quantification. [Image by the author].'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Raman spectroscopy provides information about the vibrational modes of molecules
    in the form of Raman spectra. These spectra can work like a structural fingerprint
    by which molecules and materials can be identified and characterized. From them
    we can learn things like what is our material composed of, what is its temperature,
    where are the tension within the material, if there is any applied electromagnetic
    field, etc. However, in order to extract such information we first need to clean
    and process the data before applying a chemometric or machine learning model.
    In the present draft I will explain how the data science pipeline works on Raman
    spectral data and give an example chemometrics for quantitative spectral analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'This post is part of a series on Data Science for Raman spectroscopy with Python.
    The present one will help to wrap up the topics presented in the previous ones
    and use them for a full processing and modeling cycle. See the previous ones published
    in [Towards Data Science](https://towardsdatascience.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[Removing Spikes from Raman Spectra with Anomaly Detection](https://medium.com/towards-data-science/removing-spikes-from-raman-spectra-8a9fdda0ac22)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Classical Least Squares Method for Quantitative Spectral Analysis with Python](https://medium.com/towards-data-science/classical-least-squares-method-for-quantitative-spectral-analysis-with-python-1926473a802c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**An example**'
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this post is to show the typical workflow of analysis and modelling
    of Raman spectral data. For that purpose, a synthetic Raman spectrum is generated
    based on three distinct components. Different kinds of noise are added for the
    shake of reality. The most usual steps of pre-processing are applied in order
    to recover a clean spectrum. Finally, a classical least squares method is used
    to estimate the concentration of the three distinct components.
  prefs: []
  type: TYPE_NORMAL
- en: 'This notebook is therefore divided into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: 1) Generation of a synthetic spectrum
  prefs: []
  type: TYPE_NORMAL
- en: 2) Preprocessing of the spectrum
  prefs: []
  type: TYPE_NORMAL
- en: 3) Application of classical least squares to calculate the amount of different
    components on the spectrum
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by loading the libraries that we are going to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Generation of synthetic data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this practical example, we are going to simulate some Raman spectra, so
    we know what to expect.
  prefs: []
  type: TYPE_NORMAL
- en: 1) We are going to generate three components, which we will mix with a given
    ratio.
  prefs: []
  type: TYPE_NORMAL
- en: '2) In order to make it more real, we will add noise: Random noise, spikes and
    a baseline.'
  prefs: []
  type: TYPE_NORMAL
- en: Generation of a mixture spectrum made of three components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even this topic is much more complex, for this example, let’s assume that our
    signal is composed of Gaussian peaks. For this, we define a Gaussian function
    as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We first generate the three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1a8e4f31d9d08339b431aab3d15bf48c.png)'
  prefs: []
  type: TYPE_IMG
- en: Three (known) synthetic components’ spectra. [Image by the author].
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then generate a mixture spectrum base on these three different components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/09dc5f1c14e54043a82f854528072574.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic spectrum. [Image by the author].
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to have our mixture more real, let’s add now some noise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b05e1b4afaf9209121f4a4074d9aa52a.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic spectrum with added noise. [Image by the author].
  prefs: []
  type: TYPE_NORMAL
- en: We have now a synthetic measured spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-processing of the spectrum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we could do any modelling, we need to pre-process our spectrum. These
    are some of the things that we would do with a real measured spectra: Clean the
    spikes, smooth the noise and subtract the baseline. To do so, we will use some
    simple algorithms as described below.'
  prefs: []
  type: TYPE_NORMAL
- en: For a more complete list of Raman spectra processing steps, the reader is encouraged
    to go to B. Barton et al (Applied Spectroscopy 76 (9), 1021–1041) or to O. Ryabchykov
    et al ([https://doi.org/10.1515/psr-2017-0043](https://doi.org/10.1515/psr-2017-0043)).
  prefs: []
  type: TYPE_NORMAL
- en: i) Despiking the spectrum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to locate and correct the spikes. For this we use a modified
    z-score based algorithm. The modified z-scores are calculated as
  prefs: []
  type: TYPE_NORMAL
- en: z(i) = 0.6745 (x(i)-M) / MAD
  prefs: []
  type: TYPE_NORMAL
- en: where the MAD = median(|x-M|), |…| represents the absolute value, and x are
    the values of the differentiated spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: For more information see my previous [post](/removing-spikes-from-raman-spectra-8a9fdda0ac22)
    or [this jupyter notebook](https://github.com/nicocopez/Outlier_detection_for_Spikes_Removal_from_Raman_Spectra/blob/master/Despiking_Raman_spectra_1.ipynb)
    my github account.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We next apply the despiking algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'and compare with the original mix spectrum:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef5db90d71bf420f25b95cd892fc4616.png)'
  prefs: []
  type: TYPE_IMG
- en: Spike detection. [Image by the author].
  prefs: []
  type: TYPE_NORMAL
- en: ii) Baseline separation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to calculate the baseline, we use a baseline estimation algorithm based
    on asymetric least squares, as presented in this paper by Eilers and Boelens in
    2005.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Baseline Subtraction parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As they say in their paper, “there are two parameters: **p for asymmetry**
    and **l for smoothness**. Both have to be tuned to the data at hand. We found
    that generally 0.001 < p < 0.1 is a good choice (for a signal with positive peaks)
    and 10² < l < 10⁹.” See Eiler and Boelens, 2005.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With the help of this algorithm we can estimate the baseline and subtract it
    from the measured spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6c866522ebbd05d1f08ffaf54e1a8ce6.png)'
  prefs: []
  type: TYPE_IMG
- en: Baseline subtraction. [Image by the author].
  prefs: []
  type: TYPE_NORMAL
- en: iii) Smoothing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to smooth the spectra, we use a Savitzky Golay filter as implemented
    in the library SciPy. The parameters window (number of points) w and polynomial
    order p can be optimized for every set of spectra.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/550d47e11792bc83e80628b284fd17b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Noise smoothing. [Image by the author].
  prefs: []
  type: TYPE_NORMAL
- en: We finally have a processed spectrum to which we can apply a model.
  prefs: []
  type: TYPE_NORMAL
- en: Classical Least Squares (CLS) Method for Quantitative Spectral Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have preprocessed our mix spectrum, we can apply CLS to quantify its
    composition. For more information on CLS you can see my previous post in [here](https://medium.com/towards-data-science/classical-least-squares-method-for-quantitative-spectral-analysis-with-python-1926473a802c).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We first generate the matrix of the components K
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We can make use of Scikit-learn to implement CLS, so we import the library
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: and apply CLS to calculate the concentrations
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6a1d19aa42100e9305c88367a4e45b35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s look at it graphically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7fd96b96a65895d3b76074a8eff3ea41.png)'
  prefs: []
  type: TYPE_IMG
- en: Spectrum fitting. [Image by the author].
  prefs: []
  type: TYPE_NORMAL
- en: The fit concentrations, shown in the legend of the figure, perfectly agree with
    the set values for the synthetic spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: So, in summary, we have seen how to preprocess a spectrum and we have applied
    a simple least squares model to recover the different components and their concentration.
    This simple, yet powerful tools might help you to get most of your spectral data.
    Importantly, different steps of this approach can be applied to not only Raman
    spectra, but to any kind of spectral data, as for example Infrared spectra, X-ray
    diffraction spectra, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is your turn, synthesize different spectra and play with the parameters
    of the different algorithms or apply them to your own measured spectra.
  prefs: []
  type: TYPE_NORMAL
- en: '… and if you have any **question, comment or suggestion**, please do not hesitate
    to **contact me** via message or at my linkedin account: [nicolascocalopez](https://www.linkedin.com/in/nicolascocalopez/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jupyter notebook:**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See the complete jupyter notebook [here](https://github.com/nicocopez/Data-Science-for-Raman-spectroscopy-a-practical-example/blob/main/Workshop%20ML%20with%20Python%20-%20DS%20for%20Raman%20spectroscopy%20-%20An%20example%20by%20NCL.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: '**References**:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can read more about despiking spectra in my previous post [here](https://medium.com/towards-data-science/removing-spikes-from-raman-spectra-8a9fdda0ac22)
    and about classical least squares in [here](https://medium.com/towards-data-science/classical-least-squares-method-for-quantitative-spectral-analysis-with-python-1926473a802c)
    or at my github or medium accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/@nicopez](https://medium.com/@nicopez)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nicocopez/](https://github.com/nicocopez/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Original papers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Despiking algorithm with modified z-scores](https://chemrxiv.org/engage/api-gateway/chemrxiv/assets/orp/resource/item/60c73e33469df41c2af4281c/original/a-simple-algorithm-for-despiking-raman-spectra.pdf).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whitaker et al. Chemometrics and Intelligent Laboratory Systems Vol 179, 15
    August 2018.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Baseline subtration with asymetric least squares.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Baseline Correction with Asymmetric Least Squares Smoothing” by Paul H. C.
    Eilers and Hans F.M. Boelens. October 21, 2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a complete guide on how to process and apply chemometrics to Raman spectra
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: Barton, B., Thomson, J., Diz, E. L., & Portela, R. (2022). Chemometrics for
    Raman Spectroscopy Harmonization. Applied Spectroscopy, 76(9), 1021–1041.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ryabchykov, O., Guo, S., & Bocklitz, T. (2019). Analyzing Raman spectroscopic
    data. Physical Sciences Reviews, 4(2).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
