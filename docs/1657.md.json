["```py\nimport numpy as np\nimport pandas as pd\nimport plotnine as p9\nfrom scipy.stats import uniform, bernoulli\n\n# From https://github.com/igor-sb/blog/blob/main/posts/logistic/plots.py\nfrom logistic.plots import plot_naive_logistic_fit\n\ndef logistic(x, k, x0):\n    return 1 / (1 + np.exp(-k*(x - x0)))\n\ndef create_smooth_logistic_curve_data(k, x0, n_points=100):\n    df = pd.DataFrame({'x': np.linspace(0, 5, n_points)})\n    df['p_x'] = logistic(df['x'], k, x0)\n    return df\n\ndef create_sample_data(k, x0, n_points, seed=1):\n    np.random.seed(seed)\n    df = pd.DataFrame({\n        'x': uniform.rvs(loc=0, scale=5, size=n_points)\n    }).sort_values('x', ignore_index=True)\n    p_x = logistic(df['x'], k, x0)\n    df['y'] = bernoulli.rvs(p_x)\n    return df\n\nsample_df = create_sample_data(k=3, x0=2.5, n_points=30)\nsmooth_px_df = create_smooth_logistic_curve_data(k=3, x0=2.5)\n\nplot_naive_logistic_fit(sample_df, smooth_px_df)\n```", "```py\ndef log_loss(p_x, y):\n    return -y * np.log(p_x) - (1 - y) * np.log(1 - p_x)\n```", "```py\ndef create_smooth_logloss_data(k, x0, n_points=100):\n    x = np.linspace(0, 5, n_points)\n    p_x = logistic(x, k, x0)\n    return pd.DataFrame({\n        'x': np.concatenate((x, x)),\n        'y': np.concatenate(([0] * len(x), [1] * len(x))),\n        'log_loss': np.concatenate((log_loss(p_x, 0), log_loss(p_x, 1))),\n    })\n\ndef add_logloss(df, k, x0):\n    p_x = logistic(df['x'], k, x0)\n    return df.assign(log_loss = log_loss(p_x, df['y']))\n\ndef fit_data_to_logloss(sample_df, k, x0):\n    sample_fit_df = add_logloss(sample_df, k, x0)\n    logloss_df = create_smooth_logloss_data(k, x0)\n    return (sample_fit_df, logloss_df)\n```", "```py\nfrom logistic.plots import plot_logistic_fit\n\nsample_fit_df, logloss_df = fit_data_to_logloss(sample_df, k=3, x0=2.5)\n\nplot_logistic_fit(sample_fit_df, logloss_df)\n```", "```py\ndef fit_parameter_combinations(sample_df, combinations):\n    sample_df_list = []\n    logloss_df_list = []\n    for k, x0 in combinations:\n        sample_fit_df, logloss_df = fit_data_to_logloss(sample_df, k, x0)\n        sample_fit_df['k'] = logloss_df['k'] = k\n        sample_fit_df['x0'] = logloss_df['x0'] = x0\n        sample_df_list.append(sample_fit_df)\n        logloss_df_list.append(logloss_df)\n\n    return (\n        pd.concat(sample_df_list, ignore_index=True),\n        pd.concat(logloss_df_list, ignore_index=True)\n    )\n```", "```py\n# From https://github.com/igor-sb/blog/blob/main/posts/logistic/plots.py\nfrom logistic.plots import plot_logistic_fit_panel\n\nx0_dfs, x0_logloss_dfs = fit_parameter_combinations(\n    sample_df,\n    [(3, 1.5), (3, 2.5), (3, 3.5)]\n)\nplot_logistic_fit_panel(x0_dfs, x0_logloss_dfs, '~x0')\n```", "```py\nk_dfs, k_logloss_dfs = fit_parameter_combinations(\n    sample_df,\n    [(0.5, 2.5), (3, 2.5), (7, 2.5)]\n)\nplot_logistic_fit_panel(k_dfs, k_logloss_dfs, '~k')\n```", "```py\nperfect_df = create_sample_data(k=3, x0=2.5, n_points=30, seed=112)\n\nperfect_sep_df, perfect_sep_logloss_df = fit_data_to_logloss(\n    perfect_df,\n    k=3,\n    x0=2.5\n)\n\nprint(\"Total log-loss: \", perfect_sep_df['log_loss'].sum())\n\nplot_logistic_fit(perfect_sep_df, perfect_sep_logloss_df)\n\n#> Total log-loss:  1.4776889859527733\n```", "```py\nperfect_sep_df, perfect_sep_logloss_df = fit_data_to_logloss(\n    perfect_df,\n    k=13,\n    x0=2.5\n)\n\nprint(\"Total log-loss: \", perfect_sep_df['log_loss'].sum())\n\nplot_logistic_fit(perfect_sep_df, perfect_sep_logloss_df)\n\n#> Total log-loss:  0.050774866143719344\n```"]