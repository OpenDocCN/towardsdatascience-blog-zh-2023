["```py\n# Import.\nfrom scipy.optimize import minimize\n\n# Define function.\ndef aquisition(x, model, theta=1.0):\n    x = np.asarray(x)\n    y_pred, y_std = model.predict(x.reshape(-1, 1), return_std=True)\n    return -(y_pred + theta * y_std)\n\nx0 = 0.0 # initial value for optimization\ndomain = [[-10, 10]] # (safe) region of interest\nres = minimize(acquisition, x0, args=GP, bounds=domain)\nx_proposed = res.x # retrieve solution\n```", "```py\n# Import GPy.\nimport GPy as gp\n\n# Define kernel.\nk_m = gp.kern.RBF(input_dim=1, active_dims=[0])\nk_w = gp.kern.Linear(input_dim=1, active_dims=[1])\nk_w.constrain_fixed(1.0) # fix the scale parameter of the linear kernel\nk_f = gp.kern.RBF(input_dim=1, active_dims=[0])\nk = k_m + k_w * k_f\n\n# Define model.\nmodel = gp.models.GPRegression(X_model, \n                               Y_model,\n                               kernel=k,\n                               normalizer=True)\n\n# Optimize hyperparameters.\nmodel.optimize(ipython_notebook=True)\n```"]