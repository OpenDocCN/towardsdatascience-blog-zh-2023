["```py\nH\nT\n```", "```py\nHH\nHT\nTH\nTT\n```", "```py\nHHH\nHHT\nHTH\nHTT\nTHH\nTHT\nTTH\nTTT\n```", "```py\nCREATE TABLE input_data(n INT NOT NULL);\n```", "```py\nINSERT INTO input_data\n\nWITH RECURSIVE fill_n(ctr, n) AS (\n  SELECT 4000, (RANDOM() * 2000)::INT\n\n  UNION ALL\n\n  SELECT ctr-1, (RANDOM() * 2000)::INT\n  FROM fill_n\n  WHERE ctr > 0\n)\n\nSELECT n FROM fill_n;\n\nSELECT COUNT(DISTINCT n) AS num_unique_actual FROM input_data;\n\nWITH hashed_list AS (\n  SELECT\n    ('x' || SUBSTR(md5(n::TEXT), 1, 16))::BIT(64)::BIGINT AS h\n  FROM input_data\n),\n\nbucketed AS (\n  SELECT\n    -- Keep 64 buckets\n    h & (63::BIGINT) AS bucket_id,\n    (h >> 6) & 2147483647::BIGINT AS h_key\n  FROM hashed_list\n),\n\nloglog_mapped AS (\n  SELECT\n    bucket_id,\n    -- The following computes the position of the first 1 bit\n    -- when looking at the number from right (least significant\n    -- bit) to left.\n    LOG(h_key & -h_key) / LOG(2.0) AS fsb,\n    h_Key\n  FROM bucketed\n),\n\nmax_in_bucket AS (\n  SELECT\n    bucket_id,\n    -- Retain the largest bit position in any bucket.\n    MAX(fsb) AS fsb\n  FROM loglog_mapped\n  GROUP BY 1\n),\n\nharmonic_mean_mapped AS (\n  SELECT\n    AVG(fsb) AS avg_fsb,\n    COUNT(1) / SUM(1.0 / (CASE WHEN fsb = 0 THEN 1 ELSE fsb END)) hm_fsb,\n    -- Number of unique elements using the LogLog estimator.\n    COUNT(1) * POW(2, AVG(fsb)) / 0.77351 AS num_unique_log_log,\n    -- Number of unique elements using the HyperLogLog estimator.\n    COUNT(1) * POW(\n      2, COUNT(1) / SUM(1.0 / (CASE WHEN fsb = 0 THEN 1 ELSE fsb END))\n    ) / 0.77351 AS num_unique_hll\n  FROM max_in_bucket\n  WHERE fsb > 0\n)\n\nSELECT * FROM harmonic_mean_mapped;\n```"]