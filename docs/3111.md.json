["```py\nimport random\n\ndef guessing_game(max):\n    random_number = random.randint(1, max)\n    print(f\"Guess a number between 1 and {max}\")\n    while True:\n        user_input = input()\n        guess = int(user_input)\n        if guess < random_number:\n            print(\"Too low\")\n        elif guess > random_number:\n            print(\"Too high\")\n        else:\n            print(\"That's right!\")\n            break\n\nguessing_game(100)\n```", "```py\nfunction guessing_game(max::Integer)\n    random_number = rand(1:100)  \n    println(\"Guess a number between 1 and $max\")\n    while true\n        user_input::String = readline()\n        guess = parse(Int, user_input)\n        if guess < random_number\n            println(\"Too low\")\n        elseif guess > random_number\n            println(\"Too high\")\n        else\n            println(\"That's right!\")\n            break\n        end\n    end\nend\n\nguessing_game(100)\n```", "```py\n# Elegant Expressions \nx = 2\nz = 2y + 3x - 5\n\n# Official Unicode Support\nα, β, γ = 1, 2, π/2\n\n# one-line functions\nf(r) = π*r^2\n\nf'(3)  # derivative (with Flux.jl package)\n\n# Column vector is literally a column\nv₁ = [1\n      2\n      3\n      4]  \n\nv₂ = [1 2 3 4]\n\n# transpose\nprintln(v1' == v2)\n\n# This is literally a 3x3 matrix\nM⁽ⁱ⁾ = [1 2 3\n        4 5 7\n        7 8 9]\n\n# Explicit modeling of missingness\nX = [1, 2, missing, 3, missing]\n```", "```py\nimport numpy as np\n\n# Gradient Descent in a Neural Network\nJ_del_B_n = [np.zeros(b) for b in B_n]\nJ_del_W_n = [np.zeros(W) for W in W_n]\n\nfor (x, y) in zip(x_batch, y_batch):\n    J_del_B_n_s, J_del_W_n_s = backprop(x, y)\n    J_del_B_n = [J_del_b + J_del_b_s for J_del_b,\n                 J_del_b_s in zip(J_del_B_n, J_del_B_n_s)]\n    J_del_W_n = [J_del_W + J_del_W_s for J_del_W,\n                 J_del_W_s in zip(J_del_W_n, J_del_W_n_s)]\n\nd = len(x_batch)\nW_n = [(1 - lambda_val * alpha / d) * W - lambda_val /\n       d * J_del_W for W, J_del_W in zip(W_n, J_del_W_n)]\nB_n = [(1 - lambda_val * alpha / d) * b - lambda_val /\n       d * J_del_b for b, J_del_b in zip(B_n, J_del_B_n)]\n```", "```py\n# Gradient Descent in a NN\nმJⳆმBₙ = [zeros(b) for b in Bₙ]\nმJⳆმWₙ = [zeros(W) for W in Wₙ]\n\nfor (x, y) in zip(x_batch, y_batch)\n    მJⳆმBₙₛ, მJⳆმWₙₛ = backprop(x, y)\n    მJⳆმBₙ = [მJⳆმb + მJⳆმbₛ for მJⳆმb, მJⳆმbₛ in zip(მJⳆმBₙ, მJⳆმBₙₛ)]  \n    მJⳆმWₙ = [მJⳆმW + მJⳆმWₛ for მJⳆმW, მJⳆმWₛ in zip(მJⳆმWₙ, მJⳆმWₙₛ)]\n\nd = len(x_batch)\nWₙ = [(1 - λ*α/d)* W - λ/d * მJⳆმW for W, მJⳆმW in zip(Wₙ, მJⳆმWₙ)]\nBₙ = [(1 - λ*α/d)* b - λ/d * მJⳆმb for b, მJⳆმb in zip(Bₙ, მJⳆმBₙ)]\n```", "```py\n# Base class\nclass Shape:\n    def __init__(self, color):\n        pass\n\n    def area(self):\n        pass\n\n# Child class\nclass Circle(Shape):\n    def __init__(self, radius):\n        super().__init__()\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius \n```", "```py\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        super().__init__()\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n```", "```py\n### Shape Abstract Type (Interface)\n\nabstract type Shape end\n\nfunction area(self::Shape)  end\n\n### Circle Type (Implements the Interface)\n\nstruct Circle <: Shape\n    radius::Float64\nend\n\nfunction area(circle::Circle)\n    return 3.14 * circle.radius^2\nend\n```", "```py\nc = Circle(3.0)\nprintln(area(c))\n```", "```py\nstruct Rectangle <: Shape\n    length::Float64\n    width::Float64\nend\n\nfunction area(rect::Rectangle)\n    return rect.length * rect.width\nend\n```", "```py\nrect = Rectangle(3.0, 6.0)\nprintln(area(rect))\n```", "```py\n### Interface definitions\nfunction animate(self::Shape)  end\nfunction ThreeDify(self::Shape)  end\n\n### Circle definitions\nfunction animate(self::Circle)  \n...\nend\nfunction ThreeDify(self::Circle)  \n...\nend\n\n### Rectangle defintions\nfunction animate(self::Rectangle)  \n...\nend\nfunction ThreeDify(self::Rectangle)  \n...\nend\n```", "```py\n#> 1\\. Creating a NumPy array\n### Python\narr = np.array([[1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]])\n### Julia\narr = [1 2 3\n       4 5 6\n       7 8 9]\n\n#> 2\\. Getting the shape of an array\n### Python\nshape = arr.shape\n### Julia\nshape = size(arr)\n\n#> 3\\. Reshaping an array\n### Python\nreshaped_arr = arr.reshape(3, 3)\n### Julia\nreshaped_arr = reshape(arr, (3, 3))\n\n#> 4\\. Accessing elements by index\n### Python\nelement = arr[1, 2]\n### Julia\nelement = arr[1, 2]\n\n#> 5\\. Performing element-wise arithmetic operations\n### Python\nmultiplication = arr * 3\n### Julia\nmultiplication = arr .* 3\n\n# 6\\. Array concatenation\n### Python\narr1 = np.array([[1, 2, 3]])\narr2 = np.array([[4, 5, 6]])\nconcatenated_arr = np.concatenate((arr1, arr2), axis=0)\n### Julia\narr1 = [1 2 3]\narr2 = [4 5 6]\nconcatenated_arr = vcat(arr1, arr2)\n\n#> 7\\. Boolean masking\n### Python\nmask = arr > 5\nmasked_arr = arr[mask]\n### Julia\nmask = arr .> 5\nmasked_arr = arr[mask]\n\n#> 8\\. Calculating the sum of array elements\n### Python\nmean_value = arr.sum()\n### Julia\nmean_value = sum(arr)\n```", "```py\nname = \"Alice\"\nage = 13\n\n## concatentation\ngreeting = \"Hello, \" * name * \"!\"\n\n## interpolation\nmessage2 = \"Next year, you will be $(age + 1) years old.\"\n\n## regex\ntext = \"Here are some email addresses: alice123@gmail.com\"\n\n# Define a regex for emails\nemail_pattern = r\"[\\w.-]+@[\\w.-]+\\.\\w+\"\n\n# match emails\nemail_addresses = match(email_pattern, text)\n\n\"aby\" > \"abc\"       # true\n```", "```py\n# Before multi-threading\nfor i in eachindex(x)\n    y[i] = a * x[i] + y[i]\nend\n\n# After multi-threading\nThreads.@threads for i in eachindex(x)\n    y[i] = a * x[i] + y[i]\nend\n```", "```py\n#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n```", "```py\n# specify function, return type, arg types and input. Prefix types with \"C\"\nresult = ccall(add, Cint, (Cint, Cint), 5, 3)\n```", "```py\nusing PyCall\n\nnp = pyimport(\"numpy\")\n\n# Create a NumPy array in Python\npy_array = np.array([1, 2, 3, 4, 5])\n\n# Perform some operations on the NumPy array\npy_mean = np.mean(py_array)\npy_sum = np.sum(py_array)\npy_max = np.max(py_array)\n```", "```py\n# Create a directory\nmkdir(\"my_directory\")\n\n# Change the working directory\ncd(\"my_directory\")\n\n# List files in the current directory\nprintln(readdir())\n\n# Remove the directory\nrm(\"my_directory\"; recursive=true)\n\n# Check if a file exists\nif isfile(\"my_file.txt\")\n    println(\"File exists.\")\nelse\n    println(\"File does not exist.\")\nend\n\n# Run a simple shell command from Julia\nrun(`echo \"Hello, Julia!\"`)\n\n# Capture the output of a shell command\nresult = read(`ls`, String)\nprintln(\"Contents of the current directory: $result\")\n```", "```py\nmacro add_seven(x)\n    quote\n        $x + 7\n    end\nend\n```", "```py\nx = 5\n@add_seven x\n```"]