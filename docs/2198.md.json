["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.ensemble import RandomForestRegressor\n```", "```py\nX, y = load_diabetes(return_X_y=True)\nrf = RandomForestRegressor().fit(X, y)\n```", "```py\nfeatures = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nfeatures_averages = {}\nfor feature in tqdm(features):\n    features_averages[feature] = ([], [])\n\n  # For each unique value in the feature\n    for feature_val in np.unique(X[:, feature]):\n        features_averages[feature][0].append(feature_val)\n\n    # We remove the feature from the dataset\n        aux_X = np.delete(X, feature, axis=1)\n    # We add the feature value for every row of the dataset\n        aux_X = np.hstack((aux_X, np.array([feature_val for i in range(aux_X.shape[0])])[:, None]))\n\n    # We calculate the average prediction\n        features_averages[feature][1].append(np.mean(rf.predict(aux_X)))\n```", "```py\nfor feature in features_averages:\n    plt.figure(figsize=(5,5))\n    values = features_averages[feature][0]\n    predictions = features_averages[feature][1]\n\n    plt.plot(values, predictions)\n    plt.xlabel(f'Feature: {feature}')\n    plt.ylabel('Target')\n```"]