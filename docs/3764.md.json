["```py\nfrom sagemaker.pytorch import PyTorch\nfrom sagemaker_ssh_helper.wrapper import SSHEstimatorWrapper\nMINUTE = 60\n\nestimator = PyTorch(\n    role='<sagemaker role>',\n    entry_point='run_ssh.py',\n    source_dir='<path to source dir>',\n    instance_type='ml.g5.xlarge',\n    instance_count=1,\n    framework_version='2.0.1',\n    py_version='py310',\n    dependencies=[SSHEstimatorWrapper.dependency_dir()]\n)\n\n# configure the SSH wrapper. Set the wait time for the connection.\nssh_wrapper = SSHEstimatorWrapper.create(estimator.framework, \n                                    connection_wait_time_seconds=2*MINUTE)\n\n# start job\nestimator.fit()\n\n# wait to receive an instance id for the connection over SSM\ninstance_ids = ssh_wrapper.get_instance_ids()\n\nprint(f'To connect run: aws ssm start-session --target {instance_ids[0]}')\n```", "```py\nimport sagemaker_ssh_helper\nfrom time import sleep\n\n# setup SSH and wait for connection_wait_time_seconds seconds\n# (to give opportunity for the user to connect before script resumes)\nsagemaker_ssh_helper.setup_and_start_ssh()\n\n# place any code here... e.g. your training code\n# we choose to sleep for two hours to enable connecting in an SSH window\n# and running trials there\nHOUR = 60*60\nsleep(2*HOUR)\n```", "```py\naws ssm start-session \\\n  --target mi-0748ce18cf28fb51b \\\n  --document-name AWS-StartPortForwardingSession\n  --parameters '{\"portNumber\":[\"6006\"],\"localPortNumber\":[\"9999\"]}'\n```"]