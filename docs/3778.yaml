- en: 'How-To: Cross Validation with Time Series Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-cross-validation-with-time-series-data-9802a06272c6?source=collection_archive---------4-----------------------#2023-12-29](https://towardsdatascience.com/how-to-cross-validation-with-time-series-data-9802a06272c6?source=collection_archive---------4-----------------------#2023-12-29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When it comes to time series data, you have to do cross validation differently
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)[![Haden
    Pelletier](../Images/8f73fc8222e783883c4ebcaee14513e0.png)](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)
    [Haden Pelletier](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb14d1de976eb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-cross-validation-with-time-series-data-9802a06272c6&user=Haden+Pelletier&userId=b14d1de976eb&source=post_page-b14d1de976eb----9802a06272c6---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)
    ·5 min read·Dec 29, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9802a06272c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-cross-validation-with-time-series-data-9802a06272c6&user=Haden+Pelletier&userId=b14d1de976eb&source=-----9802a06272c6---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9802a06272c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-cross-validation-with-time-series-data-9802a06272c6&source=-----9802a06272c6---------------------bookmark_footer-----------)![](../Images/e6086d85a950ceb80f3d99b0979ecd94.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Standard k-fold cross validation. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-validation** is an important part of training and evaluating an ML
    model. It allows you to get an estimate of how a trained model will perform on
    new data.'
  prefs: []
  type: TYPE_NORMAL
- en: Most people who learn how to do cross validation first learn about the **K-fold
    approach.** I know I did. In K-fold cross validation, the dataset is randomly
    split into n folds (usually 5). Over the course of 5 iterations, the model is
    trained on 4 out of the 5 folds while the remaining 1 acts as a test set for evaluating
    performance. This is repeated until all 5 folds have been used as a test set at
    one point in time. By the end of it, you’ll have 5 error scores, which, averaged
    together, will give you your cross validation score.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the catch though — this method really only works for non-time series
    / non sequential data. If the order of the data matters in any way, or if any
    data points are dependent on preceding values, **you cannot use K-fold cross validation.**
  prefs: []
  type: TYPE_NORMAL
- en: The reason why is fairly straightforward. If you split up the data into 4 training
    folds and 1 testing fold using KFold you will randomize the order of the data.
    Therefore, data points that once preceded other data points can end up in the…
  prefs: []
  type: TYPE_NORMAL
