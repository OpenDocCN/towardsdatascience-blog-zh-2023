["```py\ndf = pd.read_parquet(\"fhvhv_tripdata_2022-01.parquet\").head(100_000)\n```", "```py\n# define time mask\ntime_mask = (df['request_datetime'].dt.month == 1) & \\\n            (df['request_datetime'].dt.day == 1) & \\\n            (df['request_datetime'].dt.hour == 0) \n\n# sort values\none_hour = df[time_mask].sort_values(by=['request_datetime'])\n\n# perform a simple groupby with .count()\nhigh_demand = one_hour[['PULocationID','hvfhs_license_num']].groupby(['PULocationID']).count()\n```", "```py\nhigh_demand = high_demand.rename(columns={'hvfhs_license_num':'n_requests'})\nhigh_demand.sort_values(by='n_requests', ascending=False, inplace=True)\nhigh_demand.head(10)\n```", "```py\n# subset df to requests from 2022 only\nrequests = df[['request_datetime', 'on_scene_datetime', 'pickup_datetime', 'dropoff_datetime', 'PULocationID', 'DOLocationID']][df.request_datetime.dt.year==2022]\n\n# sort by request_datetime\nrequests.sort_values(by=['request_datetime'], inplace=True)\n\n# set request_datetime as index\nrequests.set_index('request_datetime', inplace=True)\n\nrequests.head()\n```", "```py\n# expand df to have a unique column for each PULocationID\npivot = pd.pivot_table(\n    requests, \n    values='pickup_datetime', \n    index=requests.index,\n    columns=['PULocationID'], \n    aggfunc='count'\n)\n\npivot.head()\n```", "```py\ntumbling = pivo.resample('15min').sum()\ntumbling\n```", "```py\nres.resample('15min').sum().plot(legend=False)\n```", "```py\n# create sliding windows in pandas\nres = pivot.resample(interval_size).sum()\nwindows = res.rolling(window_size).sum()\n```", "```py\nres_1m = res.resample('1min').sum()\nres_1m.head(3)\n```", "```py\nwindows = res_1m.rolling(5).sum()\nwindows.head()\n```", "```py\nwindows_drop = windows.iloc[4:]\nwindows_drop.head()\n```", "```py\n# create custom window indexer\nindexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=5)\n\n# use indexer to create rolling window\nwindows_f = res_1m.rolling(window=indexer).sum()\n\nwindows_f.head()\n```", "```py\n# drop the last 14 columns\nwindows_f_drop = windows.iloc[:45]\nwindows_f_drop.tail()\n```", "```py\nimport matplotlib.pyplot as plt\n\nwindows.plot(kind='bar', legend=False);\n```", "```py\nsignal = windows[(windows > 50)].dropna(axis=1, how=”all”)\nsignal.plot(figsize=(10,8))\nplt.legend(bbox_to_anchor=(1.0,1.0))\nplt.show()\n```"]