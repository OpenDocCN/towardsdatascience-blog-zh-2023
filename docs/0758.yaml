- en: Fourier Transform, the Practical Python Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/fourier-transform-the-practical-python-implementation-acdd32f1b96a?source=collection_archive---------0-----------------------#2023-02-27](https://towardsdatascience.com/fourier-transform-the-practical-python-implementation-acdd32f1b96a?source=collection_archive---------0-----------------------#2023-02-27)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A practical application on real-world signals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----acdd32f1b96a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)
    ·10 min read·Feb 27, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Facdd32f1b96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&user=Omar+Alkousa&userId=f8302b9534b5&source=-----acdd32f1b96a---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Facdd32f1b96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&source=-----acdd32f1b96a---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Fourier Transform is one of the most famous tools in signal processing and analysis
    of time series. The Fast Fourier Transform (FFT) is the practical implementation
    of the Fourier Transform on Digital Signals. FFT is considered one of the top
    10 algorithms with the greatest impact on science and engineering in the 20th
    century [**[1]**](https://doi.ieeecomputersociety.org/10.1109/MCISE.2000.814652).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ac064d5315ad701a5a208c5466249a07.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Edz Norton](https://unsplash.com/@edznorton?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this post, a practical approach to FFT has been discussed as how to use it
    to represent the frequency domain (spectrum) of the signal data and plot the spectrum
    using Plotly to give us more interactivity and a better understanding of the features
    in the spectrum. By the end of this post, we’ll build a class to analyze the signal.
    An ECG signal and its spectrum have been provided as a final example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10097e595e8555e1baedbda84a9ba92a.png)'
  prefs: []
  type: TYPE_IMG
- en: Representation of using our class Fourier. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fourier Transform (FT) relates the time domain of a signal to its frequency
    domain, where the frequency domain contains the information about the sinusoids
    (amplitude, frequency, phase) that construct the signal. Since FT is a continuous
    transform, the Discrete Fourier Transform (DFT) becomes the applicable transform
    in the digital world that holds the information of signals in the discrete format
    as a set of samples, where the sampling theorem is the strict rule of discretizing
    and the signal. The DFT of a signal (xn) with N number of samples is given by
    the following equation [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aadc5aa1519714b6ab1f6b92d4cab792.png)'
  prefs: []
  type: TYPE_IMG
- en: The DFT equation [[2]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
  prefs: []
  type: TYPE_NORMAL
- en: '**Where:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'N: Number of samples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'n: Current sample'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'k: Current frequency where k∈[0,N−1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'xn: The sine value at sample n'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Xk: The DFT which includes information on both amplitude and phase'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of the DFT (Xk) is an array of complex numbers that hold the information
    of frequency components [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
    Applying DFT on signals using the mathematical equation directly demands a heavy
    computation complexity. Luckily, a Fast Fourier Transform (FFT) was developed
    [**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/)
    to provide a faster implementation of the DFT. The FFT takes advantage of the
    symmetry nature of the output of the DFT. We will not further discuss how FFT
    works as it’s like the standard practical application of DFT. But if you want
    more details, refer to [**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s Code:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start simply to understand the inputs and outputs of each method we
    use in this post. First, we will import the required packages. Numpy is for dealing
    with matrices and calculations. We import the methods that help us with the calculations
    related to Fourier Analysis from scipy.fft module (fft, rfft, fftfreq, rfftfreq).
    Finally, Plotly and matplotlib are for visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We need signals to try our code on. Sinusoids are great and fit to our examples.
    In the next code, we generate a sinusoidal signal using a class named Signal,
    which you can find ready to use following this [**GitHub gist**](https://gist.github.com/OmarAlkousa/4bd0bacb0ff976be4105777965854e06).
    The signal we will generate using the previous class contains three sinusoids
    (1, 10, 20) Hz with amplitudes of (3, 1, 0.5), respectively. The sampling rate
    will be 200 and the duration of the signal is 2 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5f8605af3acfa389493fe5d21456cf2b.png)'
  prefs: []
  type: TYPE_IMG
- en: The signal we will process next. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: 'The Fourier Transform of this signal can be calculated using (fft) from the
    scipy package as follows [**[4]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html#scipy.fft.fft):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/47cc5e61eeb983ed96bb616413cb0735.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of the FFT of the signal. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: The figure above should represent the frequency spectrum of the signal. Notice
    that the x-axis is the number of samples (instead of the frequency components)
    and the y-axis should represent the amplitudes of the sinusoids. To get the actual
    amplitudes of the spectrum, we have to normalize the output of (fft) by N/2 the
    number of samples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fceffbd48be98e5b2cb3b863c21efca4.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of the FFT after normalizing. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: To get the frequency components (x-axis), you can use (fftfreq) from the scipy
    package. This method needs the number of samples (N) and the sampling rate as
    input arguments. And it returns a frequency axis with N frequency components [**[5]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftfreq.html#scipy.fft.fftfreq).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3de9718aead7454cf588ecd925e3bec7.png)'
  prefs: []
  type: TYPE_IMG
- en: The spectrum with the actual amplitudes and frequency axis. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand what happened in the last code, let’s plot only the frequency
    axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4a1f28f529929a8023f4fee1dbca156c.png)'
  prefs: []
  type: TYPE_IMG
- en: The frequency axis. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the frequency array starts at zero. Then, it begins to increase
    with (d) step by step to reach its maximum (100Hz). After that, it starts from
    the negative maximum frequency (-100Hz) to increase back again with (d) step by
    step. The maximum frequency that can hold information from the signal (100Hz)
    is half of the sampling rate and this is true according to the Sampling Theorem
    [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
  prefs: []
  type: TYPE_NORMAL
- en: Due to the symmetry of the spectrum for the real-value signals, we only focus
    on the first half of the spectrum [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
    The Scipy package provides methods to deal with the Fourier transform of the real-value
    signals, where it takes advantage symmetry nature of the spectrum. Such methods
    are (rfft [**[6]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfft.html#scipy.fft.rfft),
    rfftfreq [**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftfreq.html#scipy.fft.rfftfreq)).
    These methods are the same as (fft, fftfreq), respectively. By comparing the time
    execution between (fft) and (rfft) methods on the same signal, you’ll find that
    (rfft) is a little bit faster. When dealing with real-value signals, which is
    most likely the case, using (rfft) is the best choice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To conclude our discussion about scaling the amplitudes and generating the frequency
    axis of the spectrum for real-values signal data that have a symmetry nature in
    their frequency domain, the code below represents the final form of the spectrum
    (the actual amplitudes on the right frequencies).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8f5189fd03a3d1690ed5f3723dc81893.png)'
  prefs: []
  type: TYPE_IMG
- en: The actual spectrum of the signal. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: The figure below helps you understand and memorize how to get each of the frequency
    axis and the actual amplitudes of the sinusoids that construct the spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0d48cdb9d2dc51adb7eb7e4c91328d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Take a moment to read each code line as it gives you the actual spectrum of
    the signal. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: The Final Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve understood the inputs and outputs of each method we used in Fourier
    analysis, let’s do our final code. We will build a class (Fourier) to make our
    use of Fourier Transform more convenient and easier to use. The class we need
    should calculate the DFT of the signal data and intuitively visualize the data.
    Make sure to read the documentation of the class to understand the use of this
    class. If you are not familiar with classes in Python and how to build one, refer
    to this previous [**post**](https://medium.com/towards-data-science/use-classes-for-generating-signals-6694d22e9a80)
    about building a class to generate signals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let’s try our class on the signal above. The input arguments are the real-values
    signal data (Time Domain) and the sampling rate of this signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b7c4928957a20befc08ae54634032c1e.png)'
  prefs: []
  type: TYPE_IMG
- en: The spectrum of the signal using our class Fourier. If you’re applying the code
    above, you can get the values interactively by hovering on the blue line. [Image
    by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: The Spectrum of the Electrocardiogram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our final example will be real-world signal data. We will use the class Fourier
    to plot the time-frequency domains of an electrocardiogram (ECG). The signal is
    5 minutes long of the heart’s electrical activity, sampled at 360Hz [**[8]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html#scipy.misc.electrocardiogram).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/10097e595e8555e1baedbda84a9ba92a.png)'
  prefs: []
  type: TYPE_IMG
- en: ECG signal and its Frequency Spectrum. [Image by the Author]
  prefs: []
  type: TYPE_NORMAL
- en: The image above represents an example of using the Fourier class we built in
    this post (An ECG signal and its Frequency Spectrum). The use of the Plotly package
    allows you to hover over the values of the plot and zoom in/out on the interesting
    parts so easily.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve introduced the Discrete Fourier Transform (DFT) mathematically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A step-by-step Fourier Analysis coding was discussed. We started by introducing
    the Fast Fourier Transform (FFT) and the pythonic implementation of FFT to produce
    the spectrum of the signals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve introduced the requirements of normalizing the spectrum to give us the
    actual amplitudes of the sinusoids. Also, we’ve used one of the scipy.fft helper
    functions to generate the frequency axis of the spectrum (fftfreq).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve pointed out the symmetry nature of the Fourier transform and how the spectrum
    is symmetric around the sampling frequency. And this is what led us to discuss
    new methods to deal with real-value signal data (rfft, rfftfreq).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve built a class to easier use the Fourier transform and produce the frequency
    domain of the signals interactively using the Plotly package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks for Reading ^_^
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**[1]**](https://doi.ieeecomputersociety.org/10.1109/MCISE.2000.814652) Dongarra,
    J., & Sullivan, F. (2000). Guest Editors Introduction to the top 10 algorithms.
    *Computing in Science & Engineering*, 2(01), 22–23.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020). Fourier Transform. *Python programming
    and numerical methods: A guide for engineers and scientists* (pp. 415–444). Academic
    Press.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/)
    Cooley, J. W., & Tukey, J. W. (1965). An algorithm for the machine calculation
    of complex Fourier series. *Mathematics of computation*, 19(90), 297–301.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**[4]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html#scipy.fft.fft)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.fft).
    [Accessed on 23/2/2023]'
  prefs: []
  type: TYPE_NORMAL
- en: '[**[5]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftfreq.html#scipy.fft.fftfreq)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.fftfreq).
    [Accessed on 23/2/2023]'
  prefs: []
  type: TYPE_NORMAL
- en: '[**[6]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfft.html#scipy.fft.rfft)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.rfft).
    [Accessed on 23/2/2023]'
  prefs: []
  type: TYPE_NORMAL
- en: '[**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftfreq.html#scipy.fft.rfftfreq)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.rfftfreq).
    [Accessed on 23/2/2023]'
  prefs: []
  type: TYPE_NORMAL
- en: '[**[8]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html#scipy.misc.electrocardiogram)
    Scipy Documentation, API Reference, Miscellaneous routines (scipy.misc.electrocardiogram).
    [Accessed on 23/2/2023]'
  prefs: []
  type: TYPE_NORMAL
