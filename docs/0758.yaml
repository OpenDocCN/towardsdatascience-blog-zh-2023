- en: Fourier Transform, the Practical Python Implementation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 傅里叶变换，实用的 Python 实现
- en: 原文：[https://towardsdatascience.com/fourier-transform-the-practical-python-implementation-acdd32f1b96a?source=collection_archive---------0-----------------------#2023-02-27](https://towardsdatascience.com/fourier-transform-the-practical-python-implementation-acdd32f1b96a?source=collection_archive---------0-----------------------#2023-02-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/fourier-transform-the-practical-python-implementation-acdd32f1b96a?source=collection_archive---------0-----------------------#2023-02-27](https://towardsdatascience.com/fourier-transform-the-practical-python-implementation-acdd32f1b96a?source=collection_archive---------0-----------------------#2023-02-27)
- en: A practical application on real-world signals
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真实世界信号的实际应用
- en: '[](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)[![Omar
    Alkousa](../Images/7598618abe8e8fa89f1d8a4bfc21f014.png)](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)
    [Omar Alkousa](https://medium.com/@omar.ok1998?source=post_page-----acdd32f1b96a--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----acdd32f1b96a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)
    ·10 min read·Feb 27, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Facdd32f1b96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&user=Omar+Alkousa&userId=f8302b9534b5&source=-----acdd32f1b96a---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff8302b9534b5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&user=Omar+Alkousa&userId=f8302b9534b5&source=post_page-f8302b9534b5----acdd32f1b96a---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----acdd32f1b96a--------------------------------)
    ·10分钟阅读·2023年2月27日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Facdd32f1b96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&user=Omar+Alkousa&userId=f8302b9534b5&source=-----acdd32f1b96a---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Facdd32f1b96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&source=-----acdd32f1b96a---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Facdd32f1b96a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffourier-transform-the-practical-python-implementation-acdd32f1b96a&source=-----acdd32f1b96a---------------------bookmark_footer-----------)'
- en: Fourier Transform is one of the most famous tools in signal processing and analysis
    of time series. The Fast Fourier Transform (FFT) is the practical implementation
    of the Fourier Transform on Digital Signals. FFT is considered one of the top
    10 algorithms with the greatest impact on science and engineering in the 20th
    century [**[1]**](https://doi.ieeecomputersociety.org/10.1109/MCISE.2000.814652).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换是信号处理和时间序列分析中最著名的工具之一。快速傅里叶变换（FFT）是傅里叶变换在数字信号上的实际应用。FFT被认为是20世纪对科学和工程影响最大的前10个算法之一
    [**[1]**](https://doi.ieeecomputersociety.org/10.1109/MCISE.2000.814652)。
- en: '![](../Images/ac064d5315ad701a5a208c5466249a07.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac064d5315ad701a5a208c5466249a07.png)'
- en: Photo by [Edz Norton](https://unsplash.com/@edznorton?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Edz Norton](https://unsplash.com/@edznorton?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In this post, a practical approach to FFT has been discussed as how to use it
    to represent the frequency domain (spectrum) of the signal data and plot the spectrum
    using Plotly to give us more interactivity and a better understanding of the features
    in the spectrum. By the end of this post, we’ll build a class to analyze the signal.
    An ECG signal and its spectrum have been provided as a final example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，讨论了FFT的实际应用，即如何使用它来表示信号数据的频率域（谱），并使用 Plotly 绘制谱图，以提供更多互动性，并更好地理解谱中的特征。到文章末尾，我们将构建一个类来分析信号。提供了一个
    ECG 信号及其谱作为最终示例。
- en: '![](../Images/10097e595e8555e1baedbda84a9ba92a.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10097e595e8555e1baedbda84a9ba92a.png)'
- en: Representation of using our class Fourier. [Image by the Author]
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们类 Fourier 的表示 [作者提供的图片]
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Fourier Transform (FT) relates the time domain of a signal to its frequency
    domain, where the frequency domain contains the information about the sinusoids
    (amplitude, frequency, phase) that construct the signal. Since FT is a continuous
    transform, the Discrete Fourier Transform (DFT) becomes the applicable transform
    in the digital world that holds the information of signals in the discrete format
    as a set of samples, where the sampling theorem is the strict rule of discretizing
    and the signal. The DFT of a signal (xn) with N number of samples is given by
    the following equation [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换（FT）将信号的时间域与其频率域联系起来，其中频率域包含构成信号的正弦波（幅度、频率、相位）的信息。由于FT是一个连续变换，离散傅里叶变换（DFT）在数字世界中成为适用的变换，它以离散格式的样本集合形式保存信号信息，其中采样定理是离散化和信号的严格规则。具有
    N 个样本的信号（xn）的DFT 由以下方程给出 [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)：
- en: '![](../Images/aadc5aa1519714b6ab1f6b92d4cab792.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aadc5aa1519714b6ab1f6b92d4cab792.png)'
- en: The DFT equation [[2]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: DFT 方程 [[2]](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
- en: '**Where:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**其中：**'
- en: 'N: Number of samples'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'N: 样本数量'
- en: 'n: Current sample'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'n: 当前样本'
- en: 'k: Current frequency where k∈[0,N−1]'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'k: 当前频率，其中 k∈[0,N−1]'
- en: 'xn: The sine value at sample n'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'xn: 样本 n 的正弦值'
- en: 'Xk: The DFT which includes information on both amplitude and phase'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Xk: 包含幅度和相位信息的DFT'
- en: The output of the DFT (Xk) is an array of complex numbers that hold the information
    of frequency components [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
    Applying DFT on signals using the mathematical equation directly demands a heavy
    computation complexity. Luckily, a Fast Fourier Transform (FFT) was developed
    [**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/)
    to provide a faster implementation of the DFT. The FFT takes advantage of the
    symmetry nature of the output of the DFT. We will not further discuss how FFT
    works as it’s like the standard practical application of DFT. But if you want
    more details, refer to [**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: DFT（Xk）的输出是一个复杂数数组，包含频率成分的信息 [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)。直接应用DFT到信号上需要进行复杂的计算。幸运的是，已经开发了快速傅里叶变换（FFT）
    [**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/)
    来提供DFT的更快实现。FFT利用了DFT输出的对称性。我们将不会进一步讨论FFT的工作原理，因为它类似于DFT的标准实际应用。如果你需要更多细节，请参见
    [**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/)。
- en: 'Let’s Code:'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码示例：
- en: We will start simply to understand the inputs and outputs of each method we
    use in this post. First, we will import the required packages. Numpy is for dealing
    with matrices and calculations. We import the methods that help us with the calculations
    related to Fourier Analysis from scipy.fft module (fft, rfft, fftfreq, rfftfreq).
    Finally, Plotly and matplotlib are for visualization.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简单地开始理解我们在这篇文章中使用的每种方法的输入和输出。首先，我们将导入所需的包。Numpy 用于处理矩阵和计算。我们从 scipy.fft 模块（fft、rfft、fftfreq、rfftfreq）中导入帮助我们进行傅里叶分析相关计算的方法。最后，Plotly
    和 matplotlib 用于可视化。
- en: Let’s get started…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们开始吧…
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We need signals to try our code on. Sinusoids are great and fit to our examples.
    In the next code, we generate a sinusoidal signal using a class named Signal,
    which you can find ready to use following this [**GitHub gist**](https://gist.github.com/OmarAlkousa/4bd0bacb0ff976be4105777965854e06).
    The signal we will generate using the previous class contains three sinusoids
    (1, 10, 20) Hz with amplitudes of (3, 1, 0.5), respectively. The sampling rate
    will be 200 and the duration of the signal is 2 seconds.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要信号来测试我们的代码。正弦波非常适合我们的示例。在接下来的代码中，我们使用一个名为Signal的类生成正弦信号，你可以在以下[**GitHub
    gist**](https://gist.github.com/OmarAlkousa/4bd0bacb0ff976be4105777965854e06)中找到现成的。我们将使用这个类生成的信号包含三个正弦波（1、10、20）Hz，幅度分别为（3、1、0.5）。采样率将是200，信号的持续时间为2秒。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/5f8605af3acfa389493fe5d21456cf2b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5f8605af3acfa389493fe5d21456cf2b.png)'
- en: The signal we will process next. [Image by the Author]
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要处理的信号。[作者提供的图片]
- en: 'The Fourier Transform of this signal can be calculated using (fft) from the
    scipy package as follows [**[4]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html#scipy.fft.fft):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该信号的傅里叶变换可以使用scipy包中的(fft)计算，如下所示 [**[4]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html#scipy.fft.fft)：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/47cc5e61eeb983ed96bb616413cb0735.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47cc5e61eeb983ed96bb616413cb0735.png)'
- en: The output of the FFT of the signal. [Image by the Author]
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 信号的FFT输出。[作者提供的图片]
- en: The figure above should represent the frequency spectrum of the signal. Notice
    that the x-axis is the number of samples (instead of the frequency components)
    and the y-axis should represent the amplitudes of the sinusoids. To get the actual
    amplitudes of the spectrum, we have to normalize the output of (fft) by N/2 the
    number of samples.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图应表示信号的频谱。注意，x轴是样本数量（而不是频率分量），y轴应表示正弦波的幅度。为了获得实际的频谱幅度，我们必须将(fft)的输出除以N/2（样本数量）。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/fceffbd48be98e5b2cb3b863c21efca4.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fceffbd48be98e5b2cb3b863c21efca4.png)'
- en: The output of the FFT after normalizing. [Image by the Author]
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正常化后的FFT输出。[作者提供的图片]
- en: To get the frequency components (x-axis), you can use (fftfreq) from the scipy
    package. This method needs the number of samples (N) and the sampling rate as
    input arguments. And it returns a frequency axis with N frequency components [**[5]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftfreq.html#scipy.fft.fftfreq).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取频率分量（x轴），可以使用scipy包中的(fftfreq)。该方法需要样本数量（N）和采样率作为输入参数。它返回一个包含N个频率分量的频率轴 [**[5]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftfreq.html#scipy.fft.fftfreq)。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/3de9718aead7454cf588ecd925e3bec7.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3de9718aead7454cf588ecd925e3bec7.png)'
- en: The spectrum with the actual amplitudes and frequency axis. [Image by the Author]
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实际幅度和频率轴的频谱。[作者提供的图片]
- en: 'To understand what happened in the last code, let’s plot only the frequency
    axis:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解上一段代码发生了什么，让我们仅绘制频率轴：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/4a1f28f529929a8023f4fee1dbca156c.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a1f28f529929a8023f4fee1dbca156c.png)'
- en: The frequency axis. [Image by the Author]
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 频率轴。[作者提供的图片]
- en: Notice that the frequency array starts at zero. Then, it begins to increase
    with (d) step by step to reach its maximum (100Hz). After that, it starts from
    the negative maximum frequency (-100Hz) to increase back again with (d) step by
    step. The maximum frequency that can hold information from the signal (100Hz)
    is half of the sampling rate and this is true according to the Sampling Theorem
    [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意频率数组从零开始。然后，它以(d)的步长逐步增加，直到达到最大值（100Hz）。之后，它从负最大频率（-100Hz）开始，逐步增加回到正频率。可以从信号中获取信息的最大频率（100Hz）是采样率的一半，这符合采样定理
    [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)。
- en: Due to the symmetry of the spectrum for the real-value signals, we only focus
    on the first half of the spectrum [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html).
    The Scipy package provides methods to deal with the Fourier transform of the real-value
    signals, where it takes advantage symmetry nature of the spectrum. Such methods
    are (rfft [**[6]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfft.html#scipy.fft.rfft),
    rfftfreq [**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftfreq.html#scipy.fft.rfftfreq)).
    These methods are the same as (fft, fftfreq), respectively. By comparing the time
    execution between (fft) and (rfft) methods on the same signal, you’ll find that
    (rfft) is a little bit faster. When dealing with real-value signals, which is
    most likely the case, using (rfft) is the best choice.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于实值信号频谱的对称性，我们只关注频谱的前半部分 [**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)。Scipy包提供了处理实值信号傅里叶变换的方法，其中利用了频谱的对称性质。这些方法包括（rfft
    [**[6]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfft.html#scipy.fft.rfft)，rfftfreq
    [**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftfreq.html#scipy.fft.rfftfreq)）。这些方法分别对应（fft，fftfreq）。通过比较相同信号上（fft）和（rfft）方法的时间执行，你会发现（rfft）稍微快一点。处理实值信号时，通常情况下，使用（rfft）是最佳选择。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To conclude our discussion about scaling the amplitudes and generating the frequency
    axis of the spectrum for real-values signal data that have a symmetry nature in
    their frequency domain, the code below represents the final form of the spectrum
    (the actual amplitudes on the right frequencies).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为总结我们关于缩放幅度和生成具有对称性质的实值信号频谱频率轴的讨论，下面的代码表示频谱的最终形式（右侧频率上的实际幅度）。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/8f5189fd03a3d1690ed5f3723dc81893.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f5189fd03a3d1690ed5f3723dc81893.png)'
- en: The actual spectrum of the signal. [Image by the Author]
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 信号的实际频谱。[作者提供的图片]
- en: The figure below helps you understand and memorize how to get each of the frequency
    axis and the actual amplitudes of the sinusoids that construct the spectrum.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图帮助你理解和记住如何获取频率轴和构成频谱的正弦波的实际幅度。
- en: '![](../Images/b0d48cdb9d2dc51adb7eb7e4c91328d6.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0d48cdb9d2dc51adb7eb7e4c91328d6.png)'
- en: Take a moment to read each code line as it gives you the actual spectrum of
    the signal. [Image by the Author]
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间阅读每一行代码，它为你提供了信号的实际频谱。[作者提供的图片]
- en: The Final Code
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终代码
- en: Now that we’ve understood the inputs and outputs of each method we used in Fourier
    analysis, let’s do our final code. We will build a class (Fourier) to make our
    use of Fourier Transform more convenient and easier to use. The class we need
    should calculate the DFT of the signal data and intuitively visualize the data.
    Make sure to read the documentation of the class to understand the use of this
    class. If you are not familiar with classes in Python and how to build one, refer
    to this previous [**post**](https://medium.com/towards-data-science/use-classes-for-generating-signals-6694d22e9a80)
    about building a class to generate signals.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了在傅里叶分析中使用的每种方法的输入和输出，让我们进行最终的代码编写。我们将构建一个类（Fourier），使我们使用傅里叶变换更方便和更易于使用。我们需要的类应该计算信号数据的DFT并直观地可视化数据。确保阅读该类的文档以理解其使用方法。如果你不熟悉Python中的类及其构建方法，请参阅之前的
    [**帖子**](https://medium.com/towards-data-science/use-classes-for-generating-signals-6694d22e9a80)，了解如何构建类以生成信号。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s try our class on the signal above. The input arguments are the real-values
    signal data (Time Domain) and the sampling rate of this signal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在上面的信号上测试我们的类。输入参数是实值信号数据（时间域）和该信号的采样率。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/b7c4928957a20befc08ae54634032c1e.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b7c4928957a20befc08ae54634032c1e.png)'
- en: The spectrum of the signal using our class Fourier. If you’re applying the code
    above, you can get the values interactively by hovering on the blue line. [Image
    by the Author]
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们类（Fourier）的信号频谱。如果你应用上述代码，可以通过悬停在蓝色线条上互动获取数值。[作者提供的图片]
- en: The Spectrum of the Electrocardiogram
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 心电图的频谱
- en: Our final example will be real-world signal data. We will use the class Fourier
    to plot the time-frequency domains of an electrocardiogram (ECG). The signal is
    5 minutes long of the heart’s electrical activity, sampled at 360Hz [**[8]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html#scipy.misc.electrocardiogram).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终示例将是现实世界的信号数据。我们将使用 Fourier 类绘制心电图（ECG）的时频域。该信号为心脏电活动的 5 分钟长，采样频率为 360Hz。[**[8]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html#scipy.misc.electrocardiogram)
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/10097e595e8555e1baedbda84a9ba92a.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10097e595e8555e1baedbda84a9ba92a.png)'
- en: ECG signal and its Frequency Spectrum. [Image by the Author]
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ECG 信号及其频谱。[图片由作者提供]
- en: The image above represents an example of using the Fourier class we built in
    this post (An ECG signal and its Frequency Spectrum). The use of the Plotly package
    allows you to hover over the values of the plot and zoom in/out on the interesting
    parts so easily.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图像展示了我们在本帖中构建的 Fourier 类的一个示例（心电图信号及其频谱）。使用 Plotly 包使你可以轻松地悬停查看图表的值并对有趣的部分进行缩放。
- en: Conclusion
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We’ve introduced the Discrete Fourier Transform (DFT) mathematically.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在数学上介绍了离散傅里叶变换（DFT）。
- en: A step-by-step Fourier Analysis coding was discussed. We started by introducing
    the Fast Fourier Transform (FFT) and the pythonic implementation of FFT to produce
    the spectrum of the signals.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了逐步傅里叶分析编码。我们首先介绍了快速傅里叶变换（FFT）及其在 Python 中的实现，以生成信号的谱。
- en: We’ve introduced the requirements of normalizing the spectrum to give us the
    actual amplitudes of the sinusoids. Also, we’ve used one of the scipy.fft helper
    functions to generate the frequency axis of the spectrum (fftfreq).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们介绍了标准化频谱的要求，以便获得正弦波的实际幅度。此外，我们还使用了 scipy.fft 的一个辅助函数来生成频谱的频率轴（fftfreq）。
- en: We’ve pointed out the symmetry nature of the Fourier transform and how the spectrum
    is symmetric around the sampling frequency. And this is what led us to discuss
    new methods to deal with real-value signal data (rfft, rfftfreq).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指出了傅里叶变换的对称性质以及谱在采样频率周围的对称性。这就是我们讨论处理实值信号数据的新方法（rfft，rfftfreq）的原因。
- en: We’ve built a class to easier use the Fourier transform and produce the frequency
    domain of the signals interactively using the Plotly package.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们建立了一个类来简化傅里叶变换的使用，并使用 Plotly 包交互式地生成信号的频域。
- en: Thanks for Reading ^_^
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 感谢阅读 ^_^
- en: References
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[**[1]**](https://doi.ieeecomputersociety.org/10.1109/MCISE.2000.814652) Dongarra,
    J., & Sullivan, F. (2000). Guest Editors Introduction to the top 10 algorithms.
    *Computing in Science & Engineering*, 2(01), 22–23.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[1]**](https://doi.ieeecomputersociety.org/10.1109/MCISE.2000.814652) Dongarra,
    J., & Sullivan, F. (2000)。十大算法的客座编辑介绍。*科学与工程计算*，2(01)，22–23。'
- en: '[**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020). Fourier Transform. *Python programming
    and numerical methods: A guide for engineers and scientists* (pp. 415–444). Academic
    Press.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[2]**](https://pythonnumericalmethods.berkeley.edu/notebooks/chapter24.02-Discrete-Fourier-Transform.html)
    Kong, Q., Siauw, T., & Bayen, A. (2020)。傅里叶变换。*Python 编程与数值方法：工程师和科学家的指南*（第 415–444
    页）。学术出版社。'
- en: '[**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/)
    Cooley, J. W., & Tukey, J. W. (1965). An algorithm for the machine calculation
    of complex Fourier series. *Mathematics of computation*, 19(90), 297–301.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[3]**](https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/)
    Cooley, J. W., & Tukey, J. W. (1965)。复杂傅里叶级数的机器计算算法。*计算数学*，19(90)，297–301。'
- en: '[**[4]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html#scipy.fft.fft)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.fft).
    [Accessed on 23/2/2023]'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[4]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html#scipy.fft.fft)
    Scipy 文档，API 参考，离散傅里叶变换 (scipy.fft.fft)。[访问日期：2023年2月23日]'
- en: '[**[5]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftfreq.html#scipy.fft.fftfreq)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.fftfreq).
    [Accessed on 23/2/2023]'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[5]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftfreq.html#scipy.fft.fftfreq)
    Scipy 文档，API 参考，离散傅里叶变换 (scipy.fft.fftfreq)。[访问日期：2023年2月23日]'
- en: '[**[6]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfft.html#scipy.fft.rfft)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.rfft).
    [Accessed on 23/2/2023]'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[6]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfft.html#scipy.fft.rfft)
    Scipy 文档，API 参考，离散傅里叶变换 (scipy.fft.rfft)。[访问日期：2023年2月23日]'
- en: '[**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftfreq.html#scipy.fft.rfftfreq)
    Scipy Documentation, API Reference, Discrete Fourier Transforms (scipy.fft.rfftfreq).
    [Accessed on 23/2/2023]'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[7]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftfreq.html#scipy.fft.rfftfreq)
    Scipy 文档，API 参考，离散傅里叶变换 (scipy.fft.rfftfreq)。 [访问于 2023年2月23日]'
- en: '[**[8]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html#scipy.misc.electrocardiogram)
    Scipy Documentation, API Reference, Miscellaneous routines (scipy.misc.electrocardiogram).
    [Accessed on 23/2/2023]'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[**[8]**](https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html#scipy.misc.electrocardiogram)
    Scipy 文档，API 参考，杂项例程 (scipy.misc.electrocardiogram)。 [访问于 2023年2月23日]'
