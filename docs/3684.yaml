- en: 'Visualizing trade flow in Python maps — Part I: Bi-directional trade flow maps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/visualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba?source=collection_archive---------4-----------------------#2023-12-16](https://towardsdatascience.com/visualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba?source=collection_archive---------4-----------------------#2023-12-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)[](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----639f39c19bba---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)
    ·7 min read·Dec 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F639f39c19bba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----639f39c19bba---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F639f39c19bba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&source=-----639f39c19bba---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: The exchange of goods and services in exchange for their corresponding values
    is an intricate part of our daily life. Similarly, countries engage in different
    kinds of trade relationships for the exchange of products and services such as
    electricity, energy commodities, raw materials, processed goods, tourism, etc.
    Understanding the trade flow between countries (import and export) is crucial
    to assessing the earnings and expenditure of a country, the economic prowess,
    the security of supply, and the nature of the relationship between countries.
  prefs: []
  type: TYPE_NORMAL
- en: In this two-part series, I am going to share how the trade flow between countries
    can be visualized in maps using Python. The first part of this series will focus
    on visualizing the **two-way (imports and exports) trade flow** between countries.
    The second part will focus on visualizing the **net trade flow** between countries.
    I am going to use dummy datasets of a hypothetical product for this visualization.
    I will highlight my country and region (Nepal/South Asia) as an example for the
    demonstration purpose. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12ae7950c17b8aab24d7838276dea766.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [GeoJango Maps](https://unsplash.com/@geojango_maps?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding Coordinates of Arrows**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the trade flow maps, I aimed to represent two-way trade relationships between
    countries. For example, the export from Nepal to India would be represented by
    the first arrow (A1-A2) and the import by Nepal from India would be represented
    by a second arrow (A3-A4). In this way, each country pair relationship would require
    four coordinate points to define the start and end points of arrows to represent
    exports and imports respectively.
  prefs: []
  type: TYPE_NORMAL
- en: While it is also possible to assume a coordinate that can be detected automatically
    (for example, the centroid of a country geometry), I intended to mark the points
    in a map and get their coordinates individually. For this purpose, it is possible
    to create a project in an application such as Google Earth, export a KML file,
    and extract the coordinates with a converter (for example, the GIS data converter
    in the website of [MyGeodata Cloud](https://mygeodata.cloud/)).
  prefs: []
  type: TYPE_NORMAL
- en: Keyhole Markup Language (KML) is a file format used to display geographic data
    in an application such as Google Earth. It uses a tag-based structure with nested
    elements and attributes and is based on the XML standard (Google, 2023).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Data**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The structure of my input data looks as shown in the image below. It contains
    five different trade relationships between neighboring countries: **Nepal-India,
    Nepal-Bangladesh, Nepal-China, India-Pakistan, and India-Sri Lanka**. For each
    country pair, there are four coordinate points for the start and end points of
    the two arrows. Value1 represents the export from Country1 to Country2\. Value2
    represents the import by Country1 from Country2\. The aim is to display this relationship
    in a Python map.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f958bd65599f0ebadb0b11f148220325.png)'
  prefs: []
  type: TYPE_IMG
- en: Data input for trade flow maps. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: I read the above data as a pandas dataframe `df`. Furthermore, I created dictionary
    objects such as `transfers` containing the export and import volume between each
    country pair, and `startarrow1_dict` containing the coordinate of starting point
    of the first arrow.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a585a531a1a562ce73ccd49ff3dfaba6.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating necessary dictionary objects. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Code description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I will describe the code used to visualize the trade flow maps.
    I will mainly use the matplotlib and cartopy packages. I have also used the same
    packages to visualize the global surface temperature anomaly in [one](/assessing-global-temperature-anomaly-using-nasas-space-studies-part-ii-29e5e313a7b3)
    of my previous posts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Import required packages**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I started with importing the main required packages and dependencies as shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Read the shape file**'
  prefs: []
  type: TYPE_NORMAL
- en: As a shape file, I used the Natural Earth [Vector](https://www.naturalearthdata.com/downloads/10m-cultural-vectors/10m-admin-0-countries/).
    The vector file can be read directly by the shapereader [module](https://scitools.org.uk/cartopy/docs/latest/reference/generated/cartopy.io.shapereader.Reader.html)
    of the cartopy package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using a package called Fiona, it is possible to read the list of all countries
    as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aab7c11e4a540ec539451b8549163ff6.png)'
  prefs: []
  type: TYPE_IMG
- en: Fiona package is used to open the shape file and extract the list of all country
    names. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Extract the information of only required countries**'
  prefs: []
  type: TYPE_NORMAL
- en: Next, I created `required`, which is a list of six countries having trade relationships.
    I also created a dictionary object `c`, which contained the FionaRecord i.e.,
    all relevant information of the countries that can be used for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Plot the** `**required**` **countries and clipping**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this step, first, I plotted the geometries of `required` countries in a
    PlateCarree projection as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9f5242012ec08d75c817328bfd2f179.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the required countries. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I wanted to clip off the geometries of the rest of the world so that I
    could have a magnified view of the six countries alone. I determined the extent
    of the maximum and minimum longitude and latitude values respectively that could
    cover all six countries, set the extent for the axes plot, and plotted the countries.
    In the for loop, I also added an code that would display the names of the countries
    over the centroid geometry of each country.
  prefs: []
  type: TYPE_NORMAL
- en: The `zorder` [attribute](https://matplotlib.org/stable/gallery/misc/zorder_demo.html)
    of the matplotlib package would determine the drawing order of the artists. Artists
    with higher `zorder` are drawn on the top.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**5\. Set up colormap, add arrow patches, and color bar.**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the most important section of the code. First, I selected `viridis_r`
    i.e., the reverse color palette of `viridis` as my colormap. Next, I determined
    the minimum and maximum value of any trade values between countries as `tmin`
    and `tmax` respectively. These values are normalized such that the `tmin` corresponds
    to the lowest end (0) and `tmax` corresponds to the highest end (1) of the colormap
    `cmap` and used accordingly in the succeeding code.
  prefs: []
  type: TYPE_NORMAL
- en: Then I looped through the `transfers` and used the [FancyArrowPatch](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.FancyArrowPatch.html)
    object to plot the arrows between countries. Each arrow object is associated with
    a unique color `col` that represents the trade flow from one country to another.
    While it is also possible to use an offset from the coordinates of the first arrow
    to plot the second arrow, I have specified the coordinates for the second arrow
    in my code. In the code, the `mutation_scale` attribute is used to control the
    length of the head of the arrow, and the `linewidth` attribute is used to control
    the width of the main line.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I added the horizontal colorbar below the main plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The end product is shown below. In my dummy dataset, the least trade flow is
    export from Sri Lanka to India (53 units), which is represented by yellow color.
    The highest trade flow is export from Bangladesh to Nepal (98 units), which is
    represented by violet color.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c95a7096d62472f4a7570c42e85afbe2.png)'
  prefs: []
  type: TYPE_IMG
- en: Bi-directional trade flow between countries represented by arrows between countries.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, I demonstrated how the trade flow between countries including
    export and import relationships can be visualized in a Python map using two arrows.
    I have used the cartopy and matplotlib packages for this purpose. In the second
    part of this series, I will showcase how the “net” trade flow relationship can
    be visualized while highlighting the net exporter and net importer countries.
  prefs: []
  type: TYPE_NORMAL
- en: The notebook for this post is available in this GitHub [repository](https://github.com/hbshrestha/Geospatial-Analysis/tree/main).
    Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: Google Developers, 2023\. [KML Tutorial | Keyhole Markup Language | Google for
    Developers](https://developers.google.com/kml/documentation/kml_tut). The content
    of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/)
  prefs: []
  type: TYPE_NORMAL
