- en: 'Visualizing trade flow in Python maps — Part I: Bi-directional trade flow maps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 地图可视化贸易流量 — 第一部分：双向贸易流量地图
- en: 原文：[https://towardsdatascience.com/visualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba?source=collection_archive---------4-----------------------#2023-12-16](https://towardsdatascience.com/visualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba?source=collection_archive---------4-----------------------#2023-12-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/visualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba?source=collection_archive---------4-----------------------#2023-12-16](https://towardsdatascience.com/visualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba?source=collection_archive---------4-----------------------#2023-12-16)
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)[](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)[](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----639f39c19bba--------------------------------)'
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----639f39c19bba---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)
    ·7 min read·Dec 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F639f39c19bba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----639f39c19bba---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----639f39c19bba---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----639f39c19bba--------------------------------)
    ·7分钟阅读·2023年12月16日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F639f39c19bba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----639f39c19bba---------------------clap_footer-----------)'
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F639f39c19bba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&source=-----639f39c19bba---------------------bookmark_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F639f39c19bba&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvisualizing-trade-flow-in-python-maps-part-i-bi-directional-trade-flow-maps-639f39c19bba&source=-----639f39c19bba---------------------bookmark_footer-----------)'
- en: The exchange of goods and services in exchange for their corresponding values
    is an intricate part of our daily life. Similarly, countries engage in different
    kinds of trade relationships for the exchange of products and services such as
    electricity, energy commodities, raw materials, processed goods, tourism, etc.
    Understanding the trade flow between countries (import and export) is crucial
    to assessing the earnings and expenditure of a country, the economic prowess,
    the security of supply, and the nature of the relationship between countries.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 商品和服务的交换以及它们相应的价值是我们日常生活中的复杂部分。同样，国家之间也会进行各种类型的贸易关系，交换产品和服务，如电力、能源商品、原材料、加工品、旅游等。理解国家之间的贸易流动（进出口）对于评估一个国家的收入和支出、经济实力、供应安全以及国家之间的关系性质至关重要。
- en: In this two-part series, I am going to share how the trade flow between countries
    can be visualized in maps using Python. The first part of this series will focus
    on visualizing the **two-way (imports and exports) trade flow** between countries.
    The second part will focus on visualizing the **net trade flow** between countries.
    I am going to use dummy datasets of a hypothetical product for this visualization.
    I will highlight my country and region (Nepal/South Asia) as an example for the
    demonstration purpose. Let’s get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个两部分系列中，我将分享如何使用Python将国家之间的贸易流动可视化在地图上。本系列的第一部分将重点介绍可视化**双向（进口和出口）贸易流动**。第二部分将重点介绍可视化**净贸易流动**。我将使用一个假设产品的虚拟数据集来进行这种可视化。我将以我的国家和地区（尼泊尔/南亚）作为演示的例子。让我们开始吧。
- en: '![](../Images/12ae7950c17b8aab24d7838276dea766.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/12ae7950c17b8aab24d7838276dea766.png)'
- en: Photo by [GeoJango Maps](https://unsplash.com/@geojango_maps?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[GeoJango Maps](https://unsplash.com/@geojango_maps?utm_source=medium&utm_medium=referral)提供，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上。
- en: '**Finding Coordinates of Arrows**'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**查找箭头的坐标**'
- en: In the trade flow maps, I aimed to represent two-way trade relationships between
    countries. For example, the export from Nepal to India would be represented by
    the first arrow (A1-A2) and the import by Nepal from India would be represented
    by a second arrow (A3-A4). In this way, each country pair relationship would require
    four coordinate points to define the start and end points of arrows to represent
    exports and imports respectively.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在贸易流动地图中，我的目标是表示国家之间的双向贸易关系。例如，从尼泊尔到印度的出口将由第一个箭头（A1-A2）表示，从印度到尼泊尔的进口将由第二个箭头（A3-A4）表示。这样，每对国家关系将需要四个坐标点来定义箭头的起点和终点，以分别表示出口和进口。
- en: While it is also possible to assume a coordinate that can be detected automatically
    (for example, the centroid of a country geometry), I intended to mark the points
    in a map and get their coordinates individually. For this purpose, it is possible
    to create a project in an application such as Google Earth, export a KML file,
    and extract the coordinates with a converter (for example, the GIS data converter
    in the website of [MyGeodata Cloud](https://mygeodata.cloud/)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管也可以假设一个可以自动检测到的坐标（例如，国家几何形状的中心点），我打算在地图上标记这些点并逐一获取其坐标。为此，可以在类似Google Earth的应用程序中创建一个项目，导出KML文件，并通过转换器提取坐标（例如，[MyGeodata
    Cloud](https://mygeodata.cloud/)网站上的GIS数据转换器）。
- en: Keyhole Markup Language (KML) is a file format used to display geographic data
    in an application such as Google Earth. It uses a tag-based structure with nested
    elements and attributes and is based on the XML standard (Google, 2023).
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Keyhole Markup Language (KML)是一种用于在应用程序中显示地理数据的文件格式，例如Google Earth。它使用基于标签的结构，具有嵌套的元素和属性，并基于XML标准（Google,
    2023）。
- en: '**Data**'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**数据**'
- en: 'The structure of my input data looks as shown in the image below. It contains
    five different trade relationships between neighboring countries: **Nepal-India,
    Nepal-Bangladesh, Nepal-China, India-Pakistan, and India-Sri Lanka**. For each
    country pair, there are four coordinate points for the start and end points of
    the two arrows. Value1 represents the export from Country1 to Country2\. Value2
    represents the import by Country1 from Country2\. The aim is to display this relationship
    in a Python map.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我的输入数据结构如下图所示。它包含了五种不同的邻国之间的贸易关系：**尼泊尔-印度，尼泊尔-孟加拉国，尼泊尔-中国，印度-巴基斯坦，以及印度-斯里兰卡**。对于每对国家，有四个坐标点用于表示两个箭头的起点和终点。Value1表示从Country1到Country2的出口。Value2表示Country1从Country2的进口。目标是将这种关系在Python地图中展示出来。
- en: '![](../Images/f958bd65599f0ebadb0b11f148220325.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f958bd65599f0ebadb0b11f148220325.png)'
- en: Data input for trade flow maps. Image by Author.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 贸易流动地图的数据输入。图片由作者提供。
- en: I read the above data as a pandas dataframe `df`. Furthermore, I created dictionary
    objects such as `transfers` containing the export and import volume between each
    country pair, and `startarrow1_dict` containing the coordinate of starting point
    of the first arrow.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我将上述数据读入pandas dataframe `df`。此外，我创建了包含每对国家之间出口和进口量的字典对象，例如`transfers`，以及包含第一个箭头起点坐标的字典对象`startarrow1_dict`。
- en: '![](../Images/a585a531a1a562ce73ccd49ff3dfaba6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a585a531a1a562ce73ccd49ff3dfaba6.png)'
- en: Creating necessary dictionary objects. Image by Author.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建必要的字典对象。图片由作者提供。
- en: Code description
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码描述
- en: In this section, I will describe the code used to visualize the trade flow maps.
    I will mainly use the matplotlib and cartopy packages. I have also used the same
    packages to visualize the global surface temperature anomaly in [one](/assessing-global-temperature-anomaly-using-nasas-space-studies-part-ii-29e5e313a7b3)
    of my previous posts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**Import required packages**'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I started with importing the main required packages and dependencies as shown
    below:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**2\. Read the shape file**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: As a shape file, I used the Natural Earth [Vector](https://www.naturalearthdata.com/downloads/10m-cultural-vectors/10m-admin-0-countries/).
    The vector file can be read directly by the shapereader [module](https://scitools.org.uk/cartopy/docs/latest/reference/generated/cartopy.io.shapereader.Reader.html)
    of the cartopy package.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using a package called Fiona, it is possible to read the list of all countries
    as shown below.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aab7c11e4a540ec539451b8549163ff6.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Fiona package is used to open the shape file and extract the list of all country
    names. Image by Author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Extract the information of only required countries**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Next, I created `required`, which is a list of six countries having trade relationships.
    I also created a dictionary object `c`, which contained the FionaRecord i.e.,
    all relevant information of the countries that can be used for plotting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**4\. Plot the** `**required**` **countries and clipping**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'In this step, first, I plotted the geometries of `required` countries in a
    PlateCarree projection as shown below:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9f5242012ec08d75c817328bfd2f179.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Plotting the required countries. Image by Author.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Next, I wanted to clip off the geometries of the rest of the world so that I
    could have a magnified view of the six countries alone. I determined the extent
    of the maximum and minimum longitude and latitude values respectively that could
    cover all six countries, set the extent for the axes plot, and plotted the countries.
    In the for loop, I also added an code that would display the names of the countries
    over the centroid geometry of each country.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The `zorder` [attribute](https://matplotlib.org/stable/gallery/misc/zorder_demo.html)
    of the matplotlib package would determine the drawing order of the artists. Artists
    with higher `zorder` are drawn on the top.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**5\. Set up colormap, add arrow patches, and color bar.**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: This is the most important section of the code. First, I selected `viridis_r`
    i.e., the reverse color palette of `viridis` as my colormap. Next, I determined
    the minimum and maximum value of any trade values between countries as `tmin`
    and `tmax` respectively. These values are normalized such that the `tmin` corresponds
    to the lowest end (0) and `tmax` corresponds to the highest end (1) of the colormap
    `cmap` and used accordingly in the succeeding code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Then I looped through the `transfers` and used the [FancyArrowPatch](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.FancyArrowPatch.html)
    object to plot the arrows between countries. Each arrow object is associated with
    a unique color `col` that represents the trade flow from one country to another.
    While it is also possible to use an offset from the coordinates of the first arrow
    to plot the second arrow, I have specified the coordinates for the second arrow
    in my code. In the code, the `mutation_scale` attribute is used to control the
    length of the head of the arrow, and the `linewidth` attribute is used to control
    the width of the main line.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我遍历了`transfers`，并使用了[FancyArrowPatch](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.FancyArrowPatch.html)对象在国家之间绘制箭头。每个箭头对象都与一个独特的颜色`col`相关联，表示从一个国家到另一个国家的贸易流。虽然也可以使用第一个箭头坐标的偏移量来绘制第二个箭头，但我在代码中指定了第二个箭头的坐标。在代码中，`mutation_scale`属性用于控制箭头头部的长度，而`linewidth`属性用于控制主线的宽度。
- en: Finally, I added the horizontal colorbar below the main plot.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我在主图下方添加了水平颜色条。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The end product is shown below. In my dummy dataset, the least trade flow is
    export from Sri Lanka to India (53 units), which is represented by yellow color.
    The highest trade flow is export from Bangladesh to Nepal (98 units), which is
    represented by violet color.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面展示了最终产品。在我的虚拟数据集中，贸易流最少的是从斯里兰卡到印度的出口（53单位），用黄色表示。贸易流最多的是从孟加拉国到尼泊尔的出口（98单位），用紫色表示。
- en: '![](../Images/c95a7096d62472f4a7570c42e85afbe2.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c95a7096d62472f4a7570c42e85afbe2.png)'
- en: Bi-directional trade flow between countries represented by arrows between countries.
    Image by Author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过箭头表示的国家间双向贸易流。图像由作者提供。
- en: Conclusion
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post, I demonstrated how the trade flow between countries including
    export and import relationships can be visualized in a Python map using two arrows.
    I have used the cartopy and matplotlib packages for this purpose. In the second
    part of this series, I will showcase how the “net” trade flow relationship can
    be visualized while highlighting the net exporter and net importer countries.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我展示了如何通过使用两个箭头在 Python 地图中可视化国家之间的贸易流，包括出口和进口关系。我使用了 cartopy 和 matplotlib
    包来实现这一目的。在本系列的第二部分，我将展示如何可视化“净”贸易流关系，并突出显示净出口国和净进口国。
- en: The notebook for this post is available in this GitHub [repository](https://github.com/hbshrestha/Geospatial-Analysis/tree/main).
    Thank you for reading!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本帖的笔记本可以在这个 GitHub [仓库](https://github.com/hbshrestha/Geospatial-Analysis/tree/main)中找到。感谢阅读！
- en: '**References**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: Google Developers, 2023\. [KML Tutorial | Keyhole Markup Language | Google for
    Developers](https://developers.google.com/kml/documentation/kml_tut). The content
    of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Google Developers, 2023\. [KML 教程 | Keyhole 标记语言 | Google 开发者](https://developers.google.com/kml/documentation/kml_tut)。本页面的内容根据[知识共享署名
    4.0 国际许可证](https://creativecommons.org/licenses/by/4.0/)进行许可。
