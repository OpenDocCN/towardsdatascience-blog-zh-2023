["```py\ndef prepare_long_prompt(df):\n  initial_txt = \"Classify the sentiment in these sentences between brackets regarding only the company specified in double-quotes. The response should be in one line with format company name in normal case followed by upper cased sentiment category in sequence separated by a semicolon:\\n\\n\"\n  prompt = \"\\\"\" + df['company'] + \"\\\"\" + \" [\" + df['title'] + \")]\"\n\n  return initial_txt + '\\n'.join(prompt.tolist())\n```", "```py\ndef call_chatgpt_api(prompt):\n  # getting the maxium amount of tokens allowed to the response, based on the\n  # api Max of 4097, and considering the length of the prompt text\n  prompt_length = len(prompt)\n  max_tokens = 4097 - prompt_length\n\n  # this rule of dividing by 10 is just a empirical estimation and is not a precise rule\n  if max_tokens < (prompt_length / 10):\n    raise ValueError(f'Max allowed token for response is dangerously low {max_tokens} and might not be enough, try reducing the prompt size')\n\n  response = openai.Completion.create(\n    model=\"text-davinci-003\",\n    prompt=prompt,\n    temperature=0,\n    max_tokens=max_tokens,\n    top_p=1,\n    frequency_penalty=0,\n    presence_penalty=0\n  )\n\n  return response.choices[0]['text']\n\nlong_prompt = prepare_long_prompt(df)\ncall_chatgpt_api(long_prompt)\n```", "```py\ndef get_df_plot(df, th_sequence):\n  temp_list = []\n\n  for th in th_sequence:\n    converted_gold_arr = np.where((df['sentiment'] <= th) & (df['sentiment'] >= -th), 0, np.sign(df['sentiment']))\n    converted_model_arr = np.where((df['cnn-pred-sent'] <= th) & (df['cnn-pred-sent'] >= -th), 0, np.sign(df['cnn-pred-sent']))\n    df['sent_cat_value'] = converted_gold_arr.astype(np.int64)\n    df['cnn_pred_sent_cat_value'] = converted_model_arr.astype(np.int64)\n    corr_gold_chatgpt = df['chatgpt_sent_value'].corr(df['sent_cat_value'])\n    corr_gold_cnn = df['chatgpt_sent_value'].corr(df['cnn_pred_sent_cat_value'])\n    acc_gold_chatgpt = (df['chatgpt_sent_value']==df['sent_cat_value']).mean()\n    acc_gold_cnn = (df['chatgpt_sent_value']==df['cnn_pred_sent_cat_value']).mean()\n    temp_list.append([th, corr_gold_chatgpt, corr_gold_cnn, acc_gold_chatgpt, acc_gold_cnn])\n\n  return pd.DataFrame(data=temp_list, columns=['th', 'corr_gold_chatgpt', 'corr_gold_cnn', 'acc_gold_chatgpt', 'acc_gold_cnn'])\n\nth_sequence = np.arange(0, 1.000001, 0.001)\ndf_plot = get_df_plot(df.copy(), th_sequence)\n```"]