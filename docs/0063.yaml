- en: Validate Balanced Parenthesis using SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/validate-balanced-parenthesis-using-sql-5bb79732d772?source=collection_archive---------22-----------------------#2023-01-04](https://towardsdatascience.com/validate-balanced-parenthesis-using-sql-5bb79732d772?source=collection_archive---------22-----------------------#2023-01-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Check the well-formed-ness of a string containing open and close parenthesis
    using just SQL
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@dhruvbird?source=post_page-----5bb79732d772--------------------------------)[![Dhruv
    Matani](../Images/d63bf7776c28a29c02b985b1f64abdd3.png)](https://medium.com/@dhruvbird?source=post_page-----5bb79732d772--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5bb79732d772--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5bb79732d772--------------------------------)
    [Dhruv Matani](https://medium.com/@dhruvbird?source=post_page-----5bb79732d772--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F63f5d5495279&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-balanced-parenthesis-using-sql-5bb79732d772&user=Dhruv+Matani&userId=63f5d5495279&source=post_page-63f5d5495279----5bb79732d772---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5bb79732d772--------------------------------)
    ·5 min read·Jan 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5bb79732d772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-balanced-parenthesis-using-sql-5bb79732d772&user=Dhruv+Matani&userId=63f5d5495279&source=-----5bb79732d772---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5bb79732d772&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-balanced-parenthesis-using-sql-5bb79732d772&source=-----5bb79732d772---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Validating if a string contains balanced parenthesis is a practical problem
    resulting from string/expression parsing/validation in various practical scenarios.
    In this article, we look at how to validate such a string containing only open
    ‘(’ and close ‘)’ parenthesis using just declarative SQL.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2fee6c8922213106725258d8446a8ab.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: Photo by [Elena Mozhvilo](https://unsplash.com/@miracleday?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous Article: [Longest Increasing Subsequence of an array in SQL](https://medium.com/@dhruvbird/longest-increasing-subsequence-of-an-array-in-sql-3202888c637f)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Problem Statement
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given a string containing only open and closed parenthesis, can you determine
    if these parenthesis are balanced? Being balanced means:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个只包含开括号和闭括号的字符串，你能确定这些括号是否是平衡的吗？平衡的意思是：
- en: Every open parenthesis ‘(’ has exactly one closing parenthesis ‘)’ after it
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个开括号 ‘(’ 后面必须有一个匹配的闭括号 ‘)’。
- en: A closing parenthesis ‘)’ is always matched with exactly one open parenthesis
    ‘(’ that appears before it
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个闭括号 ‘)’ 总是与一个出现在它之前的开括号 ‘(’ 配对。
- en: 'The following are examples of **valid** balanced parenthesis strings:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是**有效**的平衡括号字符串示例：
- en: ((()()))
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ((()()))
- en: ()()()()
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ()()()()
- en: (()()(()()))
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (()()(()()))
- en: 'The following are example of **invalid** balanced parenthesis:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是**无效**的平衡括号示例：
- en: ((()( — here, the first 2 and the last open parenthesis don’t have a matching
    closing parenthesis
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ((()( — 这里，第一个和最后一个开括号没有匹配的闭括号
- en: ()()()()) — here, the last closing parenthesis doesn’t match any other unmatched
    open parenthesis
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ()()()()) — 这里，最后一个闭括号没有匹配任何其他未匹配的开括号
- en: Online coverage of the problem statement
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题陈述的在线覆盖
- en: '[Bradfield CS](https://bradfieldcs.com/algos/stacks/balanced-parentheses/)'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Bradfield CS](https://bradfieldcs.com/algos/stacks/balanced-parentheses/)'
- en: '[Leetcode](https://leetcode.com/problems/valid-parentheses/)'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Leetcode](https://leetcode.com/problems/valid-parentheses/)'
- en: '[Geeksforgeeks](https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/)'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Geeksforgeeks](https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/)'
- en: Input Table Schema
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入表模式
- en: 'The input table has 2 columns:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输入表有 2 列：
- en: '**idx:** The problem index. i.e. the 1st string to check will have idx = 1,
    the 2nd string to check will have idx = 2, and so on.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**idx**：问题索引。即第一个待检查的字符串将有 idx = 1，第二个待检查的字符串将有 idx = 2，依此类推。'
- en: '**parens:** A string containing only open and close parenthesis. This string
    needs to be checked for well-formedness.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**括号**：一个只包含开括号和闭括号的字符串。这个字符串需要检查是否结构正确。'
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/c9a13d40328fc769891665fb2137c855.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9a13d40328fc769891665fb2137c855.png)'
- en: The input table for the balanced parenthesis problem (Image by author)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 平衡括号问题的输入表（作者提供的图片）
- en: 'Solution: Maintain a running counter: O(n)'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案：维护一个运行计数器：O(n)
- en: In imperative programming languages, this problem is usually solved by maintaining
    a stack which receives an ‘(’ every time it is encountered in the input string.
    Hence, the stack contains only ‘(’ characters. Every time a ‘)’ is seen in the
    input, it is matched with an ‘(’ on the top of the stack, and the ‘)’ character
    is popped off.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令式编程语言中，这个问题通常通过维护一个栈来解决，每当在输入字符串中遇到一个 ‘(’ 时，就将其压入栈中。因此，栈中只包含 ‘(’ 字符。每当在输入中看到
    ‘)’ 时，就将其与栈顶的 ‘(’ 匹配，并将 ‘)’ 字符弹出。
- en: Since we have **only one type of open (and close) brackets**, we can eliminate
    the stack and **maintain just a counter**, which counts how many unmatched ‘(’
    characters have been seen so far. Every time an ‘(’ character is encountered,
    we increment the counter, and every time a ‘)’ character is encountered, we decrement
    the counter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们**只有一种类型的开括号（和闭括号）**，我们可以去除栈，**只维护一个计数器**，用于计数到目前为止看到的未匹配的 ‘(’ 字符。每当遇到一个
    ‘(’ 字符时，我们就增加计数器，每当遇到一个 ‘)’ 字符时，我们就减少计数器。
- en: '**Negative counter value:** If the counter ever reaches a negative (< 0) value,
    it indicates an unmatched closing parenthesis.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**负计数器值**：如果计数器的值达到负值 (< 0)，则表示有未匹配的闭括号。'
- en: '**Final counter value:** After all the characters in the input string are processed,
    if the value of the counter is != 0, it indicates a problem. A positive value
    indicates an unmatched ‘(’ character in the input, and a negative value is already
    considered above.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最终计数器值**：在处理完输入字符串中的所有字符后，如果计数器的值 != 0，则表示有问题。正值表示输入中有未匹配的 ‘(’ 字符，而负值已经在上面考虑过。'
- en: 'The SQL code for this solution looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案的 SQL 代码如下：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are quite a few intermediate tables used in the solution above to aid
    readability and to separate out the various processing steps.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述解决方案中，使用了相当多的中间表来帮助可读性，并将各种处理步骤分开。
- en: This is the first time we have used the [UNNEST](https://www.postgresql.org/docs/9.2/functions-array.html)
    keyword in SQL. This is also the first time I’ve written a solution that batch-processes
    multiple inputs and solves them at once. I leverage the **idx** field which indicates
    the index of the input string. All intermediate tables use the **idx** field to
    separate out solutions to different problems.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一次在SQL中使用[UNNEST](https://www.postgresql.org/docs/9.2/functions-array.html)关键字。这也是我第一次编写一个批量处理多个输入并一次性解决的解决方案。我利用了**idx**字段，它表示输入字符串的索引。所有中间表都使用**idx**字段来分离不同问题的解决方案。
- en: '![](../Images/e14566348e6942080cd3bc54742515d8.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e14566348e6942080cd3bc54742515d8.png)'
- en: The result of the O(n) solution (Image by author)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: O(n)解决方案的结果（作者提供的图片）
- en: '**Estimated Cost:** The estimated cost for this query on a table with 5 distinct
    input rows is [45k](https://explain.depesz.com/s/mN2y). Most of this cost seems
    to be coming from the use of the window aggregation functions.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**估计成本：** 在一个具有5个不同输入行的表上，该查询的估计成本为[45k](https://explain.depesz.com/s/mN2y)。这个成本大部分似乎来自于使用窗口聚合函数。'
- en: While I’ve tagged the runtime to be **O(n)**, it would depend on how the database
    engine internally executes the query. For example, if the engine notices that
    the assignment of the **row_num** column using **ROW_NUMBER()** results in rows
    that have a strictly increasing value for that column, and the database is able
    to preserve that row order across CTE tables, then it can avoid doing a sort later
    when it encounters an **ORDER BY** clause in the window function execution here.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我标记了运行时间为**O(n)**，但这取决于数据库引擎如何内部执行查询。例如，如果引擎发现使用**ROW_NUMBER()**分配的**row_num**列结果具有该列值严格递增，并且数据库能够在CTE表中保持这一行顺序，那么它可以避免在遇到**ORDER
    BY**子句时在窗口函数执行中进行排序。
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The **ORDER BY** in the **OVER()** clause above is essential to ensure that
    we get a running sum, and not an overall sum for the entire partition.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述**ORDER BY**在**OVER()**子句中是至关重要的，以确保我们得到的是一个运行总和，而不是整个分区的总体总和。
- en: SQL Fiddle
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL Fiddle
- en: The SQL Fiddle link to the solution in this post can be found [here](http://sqlfiddle.com/#!17/e83e88/20).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章中SQL Fiddle解决方案的链接可以在[这里](http://sqlfiddle.com/#!17/e83e88/20)找到。
- en: Extensions and exercises
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展和练习
- en: What if we have more than one type of parenthesis such as square brackets [],
    curly braces {}. How would you evolve the solution to account for this change?
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们有多种括号类型，比如方括号[]，花括号{}。你会如何演变解决方案来适应这一变化？
- en: What if the string that make up the open and close bracket pairs were not fixed
    but specified in another dimension table. How would you evolve the solution to
    account for this change?
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果组成开括号和闭括号对的字符串不是固定的，而是在另一个维度表中指定的，你会如何演变解决方案来适应这一变化？
- en: We shall see (in later posts) how these extensions solve real-world and practical
    problems encountered by SQL practitioners.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到（在后续文章中）这些扩展如何解决SQL从业者遇到的实际问题。
