["```py\n# Import the required packages\nimport numpy as np\nimport matplotlib.pyplot as plt\n```", "```py\n# Generate the three signals using Signal class and its method sine()\nsignal_1hz = Signal(amplitude=3, frequency=1, sampling_rate=200, duration=2)\nsine_1hz = signal_1hz.sine()\nsignal_20hz = Signal(amplitude=1, frequency=20, sampling_rate=200, duration=2)\nsine_20hz = signal_20hz.sine()\nsignal_10hz = Signal(amplitude=0.5, frequency=10, sampling_rate=200, duration=2)\nsine_10hz = signal_10hz.sine()\n\n# Sum the three signals to output the signal we want to analyze\nsignal = sine_1hz + sine_20hz + sine_10hz\n\n# Plot the signal\nplt.plot(signal_1hz.time_axis, signal, 'b')\nplt.xlabel('Time [sec]')\nplt.ylabel('Amplitude')\nplt.title('Sum of three signals')\nplt.show()\n```", "```py\n# Build a function that calculates the discrete Fourier transform\ndef DFT(signal):\n  # Number of samples, 100 samples in our example\n  N = len(signal)\n  # The samples from 0 to N-1, [0, 1, 2, ..., 199] in our example\n  n = np.arange(N)\n  # Generate the frequencies, [[0], [1], [2], ..., [199]] in our example\n  k = n.reshape((N,1))\n  # e is a matrix of complex numbers with a shape of (N, N), (200, 200) in our example\n  e = np.exp(-2j * np.pi * k * n / N)\n  # dft is a matrix of complex numbers with a shape of (N,), (200,) in our example\n  dft = np.dot(e,signal)\n  return dft\n\n# Let's use the function\ndft = DFT(signal= signal)\n\n# Calculate the amplitude spectrum of the signal\namp = np.abs(dft)\n\n# Generate the frequency axis\nN = len(dft)\nn = np.arange(N)\nT = N/signal_1hz.sampling_rate\nfreq = n/T\n\n# Plot the spectrum\nplt.figure(figsize = (8, 6))\nplt.stem(freq, amp, 'b', markerfmt='o', basefmt='b')\nplt.xlabel('Frequency [Hz]')\nplt.ylabel('DFT Amplitude |X(freq)|')\nplt.title('Spectrum of the signal')\n```", "```py\n# Get the length of one side of frequencies\nn_oneside = N//2\n# Get the one side frequency\nf_oneside = freq[:n_oneside]\n# Normalize the amplitude by N/2\none_side_dft = dft[:n_oneside]/n_oneside\n\n# Plot the first half\nplt.stem(f_oneside, np.abs(one_side_dft))\nplt.xlabel('Freq (Hz)')\nplt.ylabel('DFT Amplitude |X(freq)|')\nplt.title('The spectrum of the signal after normalization')\nplt.show()\n```", "```py\ndef IDFT(dft):\n  # Number of frequencies, 200 components in our example\n  N = len(dft)\n  # The frequencies from 0 to N-1, [0, 1, 2, ..., 199] in our example\n  k = np.arange(N)\n  # Generate the samples, [[0], [1], [2], ..., [199]] in our example\n  n = k.reshape((N,1))\n  # If your input was a first half spectrum, 2j should be 1j to retrieve the signal\n  e = np.exp(2j * np.pi * k * n / N)\n  # dft is a matrix of complex numbers with a shape of (N,), (200,) in our example\n  signal = np.dot(e,dft)/N\n  return signal\n\n# Apply the Inverse Fourier Transform on the spectrum [dft]\nsig = IDFT(dft)\n\n# Generate the time axis from sampling rate and length of dft\nN = len(dft)\nduration = N/signal_1hz.sampling_rate\ntime_axis = np.arange(0, 2, 1/200)\n\n# Plot the results of IDFT along with the original signal\nplt.plot(time_axis, sig,'b')\nplt.plot(time_axis, signal, 'r')\nplt.xlabel('Time [sec]')\nplt.ylabel('Amplitude')\nplt.title('Output of the IDFT')\nplt.show()\n```", "```py\n# Import the scipy package\nfrom scipy.fftpack import fft\n\n# Estimate the execution time of DFT using the function we've built\nprint('Execution time of DFT Function:')\n%timeit DFT(signal)\n# Estimate the execution time of DFT using FFT from numpy package\nprint('\\nExecution time of FFT using Numpy pacakge:')\n%timeit np.fft.fft(signal)\n# Estimate the execution time of DFT using FFT from scipy package\nprint('\\nExecution time of FFT using Scipy package:')\n%timeit scipy.fftpack.fft(signal)\n```", "```py\nExecution time of DFT Function:\n17.3 ms ± 2.65 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nExecution time of FFT using Numpy pacakge:\n8.72 µs ± 2.2 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n\nExecution time of FFT using Scipy package:\n8.27 µs ± 137 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n```"]