- en: 4 Autonomous AI Agents you need to know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/4-autonomous-ai-agents-you-need-to-know-d612a643fa92?source=collection_archive---------0-----------------------#2023-04-16](https://towardsdatascience.com/4-autonomous-ai-agents-you-need-to-know-d612a643fa92?source=collection_archive---------0-----------------------#2023-04-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Westworld” simulation, Camel, BabyAGI, AutoGPT ⭐ with the power of LangChain
    ⭐
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sophiamyang.medium.com/?source=post_page-----d612a643fa92--------------------------------)[![Sophia
    Yang, Ph.D.](../Images/c133f918245ea4857dc46df3a07fc2b1.png)](https://sophiamyang.medium.com/?source=post_page-----d612a643fa92--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d612a643fa92--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d612a643fa92--------------------------------)
    [Sophia Yang, Ph.D.](https://sophiamyang.medium.com/?source=post_page-----d612a643fa92--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fae9cae9cbcd2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F4-autonomous-ai-agents-you-need-to-know-d612a643fa92&user=Sophia+Yang%2C+Ph.D.&userId=ae9cae9cbcd2&source=post_page-ae9cae9cbcd2----d612a643fa92---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d612a643fa92--------------------------------)
    ·9 min read·Apr 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd612a643fa92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F4-autonomous-ai-agents-you-need-to-know-d612a643fa92&user=Sophia+Yang%2C+Ph.D.&userId=ae9cae9cbcd2&source=-----d612a643fa92---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd612a643fa92&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2F4-autonomous-ai-agents-you-need-to-know-d612a643fa92&source=-----d612a643fa92---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Autonomous AI agents have been the hottest topic. It’s truly impressive how
    rapidly things have progressed and unfolded in this area. Are autonomous AI agents
    the future, particularly in the area of prompt engineering? AI experts including
    Andrej Karpathy referred to AutoGPTs as the *Next frontier of prompt engineering.*
    I think so as well. What do you think?
  prefs: []
  type: TYPE_NORMAL
- en: 'In the simplest form, Autonomous AI agents run on a loop to generate self-directed
    instructions and actions at each iteration. As a result, they do not rely on humans
    to guide their conversations, and they are highly scalable. There are at least
    4 notable Autonomous AI agents projects that came out in the last two weeks, and
    in this article, we are going to dive into each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**“Westworld” simulation** — released on Apr. 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camel** — released on Mar. 21'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BabyAGI** — released on Apr. 3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AutoGPT** — released on Mar. 30'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project 1: “Westworld” simulation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/deee0bd4d160e8d03875b5a9f2445515.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1\. Generative agents create believable simulacra of human behavior.
    Source: [https://arxiv.org/pdf/2304.03442.pdf](https://arxiv.org/pdf/2304.03442.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Researchers from Stanford and Google created an interactive sandbox environment
    with 25 generative AI agents that can simulate human behavior. They walk in the
    park, join for coffee at a cafe, and share news with colleagues. They demonstrated
    surprisingly good social behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“For example, starting with only a single user-specified notion that one agent
    wants to throw a Valentine’s Day party, the agents autonomously spread invitations
    to the party over the next two days, make new acquaintances, ask each other out
    on dates to the party, and coordinate to show up for the party together at the
    right time.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'These believable simulations of human behavior are possible because of an **agent
    architecture** (see Figure 2) that extends a large language model with three important
    architecture basics: memory, reflection, and planning.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/362b538fa816834ab387594f806c8ae7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2\. Generative agent architecture. Source: [https://arxiv.org/pdf/2304.03442.pdf](https://arxiv.org/pdf/2304.03442.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '**1) Memory and Retrieval**'
  prefs: []
  type: TYPE_NORMAL
- en: The memory stream contains a list of observations for each agent with timestamps.
    Observations can be behaviors performed by the agent or behaviors that the agent
    perceives from others. The memory stream is long. However, not all observations
    in the memory stream are important.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve the most important memory to pass on to the language model, there
    are three factors to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Recency**: recent memories are more important'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Importance**: memories the agent believes to be important. For example, breaking
    up with someone is a more important memory than eating breakfast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relevance**: memories that are related to the situation, a query memory.
    For example, when discussing what to study for a chemistry test, schoolwork memories
    are more important.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/893c865577c687308a0cc9075cc6e738.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3\. The memory stream comprises a large number of observations. Retrieval
    identifies a subset of these observations that should be passed to the language
    model. Source: [https://arxiv.org/pdf/2304.03442.pdf](https://arxiv.org/pdf/2304.03442.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '**2) Reflection**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reflections are high-level abstract thoughts to help agents generalize and
    make inferences. Reflections get generated periodically with the following two
    questions: “what are 3 most salient high-level questions we can answer about the
    subjects in the statements?”, “What 5 high-level insights can you infer from the
    above statements?”'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a646968cfa7730b9628824572b8f41f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4\. A reflection tree. Source: [https://arxiv.org/pdf/2304.03442.pdf](https://arxiv.org/pdf/2304.03442.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '**3) Planning**'
  prefs: []
  type: TYPE_NORMAL
- en: Planning is important because the actions should not just be focused on in the
    moment but also over a longer time horizon so that they can be coherent and believable.
    A plan is also stored in the memory stream. Agents can create actions based on
    the plan and they can react and update the plan according to the other observations
    in the memory stream.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/63bf0c85ab8dfd5f91e8a79dd144126b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5\. Valentine’s Day party. Source: [https://arxiv.org/pdf/2304.03442.pdf](https://arxiv.org/pdf/2304.03442.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: The possibilities for applications of this are immense and maybe even a little
    scary. Imagine an assistant who observes and watches your every move, makes plans
    for you, and even perhaps executes plans for you. It’d automatically adjust the
    lights, brew the coffee, and reserve dinner for you before you even tell it to
    do anything.
  prefs: []
  type: TYPE_NORMAL
- en: ⭐LangChain Implementation⭐
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: …Coming soon…
  prefs: []
  type: TYPE_NORMAL
- en: I heard LangChain is working on this ;) Will add it once it’s implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project 2: Camel'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CAMEL (Communicative Agents for “Mind” Exploration of Large Scale Language
    Model Society) proposes a *role-playing* agent framework where two AI agents communicate
    with each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '1) **AI user agent**: give instructions to the AI assistant with the goal of
    completing the task.'
  prefs: []
  type: TYPE_NORMAL
- en: '2) **AI assistant agent**: follow AI user’s instructions and respond with solutions
    to the task.'
  prefs: []
  type: TYPE_NORMAL
- en: '3) **task-specifier agent**: there is actually another agent called the task-specifier
    agent to brainstorm a specific task for the AI user and AI assistant to complete.
    This helps write a concrete task prompt without the user spending time defining
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example (Figure 6), a human has an idea of developing a trading bot.
    The AI user is a stock trader and The AI assistant is a Python programmer. The
    **task-specific agent** first comes up with a specific task with task details
    (monitor social media sentiment and trade stock based on the sentiment analysis
    results). Then the **AI user agent** becomes the task planner, the **AI assistant
    agent** becomes the task executor, and they prompt each other in a loop until
    some termination conditions are met.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7cd368031f5bfe2eb8b066ac1652e1b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6\. Role-playing framework. Source: [https://arxiv.org/abs/2303.17760](https://arxiv.org/abs/2303.17760)'
  prefs: []
  type: TYPE_NORMAL
- en: The essence of Camel lies in its prompt engineering, i.e., inception prompting.
    The prompts are actually carefully defined to assign roles, prevent flipping roles,
    prohibit harm and false information, and encourage consistent conversation. See
    detailed prompts in the [Camel paper](https://arxiv.org/abs/2303.17760).
  prefs: []
  type: TYPE_NORMAL
- en: ⭐LangChain Implementation⭐
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [LangChain implementation](https://python.langchain.com/en/latest/use_cases/agents/camel_role_playing.html)
    used the prompts mentioned in the [Camel paper](https://arxiv.org/abs/2303.17760)
    and defined three agents: task_specify_agent, assistant_agent, and user_agent.
    It then uses a while loop to loop through the conversation between the assistant
    agent and the user agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The results look quite reasonable!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3196d2cebee252808b1a0dd31f25e05d.png)'
  prefs: []
  type: TYPE_IMG
- en: In Camel, the AI assistant’s executions are simply answers from the language
    model without actually using any tools to run the Python code. I wonder if LangChain
    has plans to integrate Camel with all the amazing LangChain tools 🤔
  prefs: []
  type: TYPE_NORMAL
- en: 🐋 Real-world use cases 🐋
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make a game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infiltrate communication networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project 3: BabyAGI'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Yohei Nakajima announced the “Task-driven Autonomous Agent” on March 28 and
    then open-sourced the BabyAGI project on April 3\. The key feature of BabyAGI
    is just three agents: Task Execution Agent, Task Creation Agent, and Task Prioritization
    Agent.'
  prefs: []
  type: TYPE_NORMAL
- en: 1) The **task execution agent** completes the first task from the task list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2) The **task creation agent** creates new tasks based on the objective and
    result of the previous task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3) The **task prioritization agent** then reorders the tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And then this simple process gets repeated over and over.
  prefs: []
  type: TYPE_NORMAL
- en: In a LangChain webinar, Yohei mentioned that designed BabyAGI in a way to emulate
    how he works. Specifically, he starts each morning by tackling the first item
    on his to-do list and then works through his tasks. If a new task arises, he simply
    adds it to his list. At the end of the day, he reevaluates and reprioritizes his
    list. This same approach was then mapped onto the agent.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb3dbaf7e49b4892b31ec0793115e396.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7\. BabyAGI flow chart. Source:[https://yoheinakajima.com/task-driven-autonomous-agent-utilizing-gpt-4-pinecone-and-langchain-for-diverse-applications/](https://yoheinakajima.com/task-driven-autonomous-agent-utilizing-gpt-4-pinecone-and-langchain-for-diverse-applications/)
    (funny thing that GPT-4 wrote this research paper)
  prefs: []
  type: TYPE_NORMAL
- en: ⭐BabyAGI + LangChain⭐
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BabyAGI is easy to run within the LangChain framework. Check out the [code](https://python.langchain.com/en/latest/use_cases/agents/baby_agi.html)
    here. It basically creates a BabyAGI controller which composes of three chains
    TaskCreationChain, TaskPrioritizationChain, and ExecutionChain, and runs them
    in a (potentially-)infinite loop. With Langchain, you can define the max iterations,
    so that it doesn’t run forever and spend all the money on OpenAI API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result from 2 iteration runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/94af43bf8694d1d9f2461330a3b903bd.png)'
  prefs: []
  type: TYPE_IMG
- en: ⭐BabyAGI + LangChain Tools⭐ = Superpower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see from the example above, BabyAGI only “executes” things with an
    LLM response. With the power of LangChain tools, the execution step can use various
    tools for example Google Search to actually search for information online. Here
    is an example, where the “execution” uses Google Search to search for the current
    weather conditions in San Francisco.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04eeb5bcb8758ae69f8a7af0d42f7ae4.png)'
  prefs: []
  type: TYPE_IMG
- en: The potential for applications of BabyAGI is also immense! We can just tell
    it an objective and it will execute for you. The only thing I think it’s missing
    is an interface to accept user feedback. For example, before BabyAGI makes an
    appointment for me, I’d like it to check with me first. I think Yohei is actually
    working on this to allow for real-time input for the system to dynamically adjust
    task prioritization.
  prefs: []
  type: TYPE_NORMAL
- en: 🐋 Real-world use cases 🐋
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Project 4: AutoGPT'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AutoGPT is a lot like BabyAGI combined with LangChain tools. It follows similar
    logic as BabyAGI: it’s an infinite loop of generating thoughts, reasoning, generating
    plans, criticizing, planning the next action, and executing.'
  prefs: []
  type: TYPE_NORMAL
- en: In the executing step, AutoGPT can execute many [commands](https://github.com/Significant-Gravitas/Auto-GPT/blob/6a93537c426759708f0e91a125587512c05f354c/autogpt/commands.py#L34-L141)
    such as Google Search, browse websites, write to files, and execute Python files.
    And it can even start and delete GPT agents?! That’s pretty cool!
  prefs: []
  type: TYPE_NORMAL
- en: 'When running AutoGPT, there are two initial inputs that will prompt you to
    enter: 1) AI’s role and 2) AI’s goal. Here I’m just using the given example —
    building a business.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a430b307ea780f1cea72d1c0350cbe89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It was able to generate thoughts, reasoning, a plan, criticism, plan the next
    action, and execute (Google search in this case):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4be08a054151f6c12b6ad250722c90b8.png)![](../Images/d0c632a8370b16c695ad5a5e2f441401.png)'
  prefs: []
  type: TYPE_IMG
- en: One thing I really like about AutoGPT is that it allows human interaction (sort
    of). When it wants to run Google commands, it asks for authorization, so that
    you can stop the loop before spending too much money on OpenAI API tokens. It’d
    be nice though if it also allows conversation with humans for us to give better
    directions and feedback in real-time.
  prefs: []
  type: TYPE_NORMAL
- en: ⭐LangChain Implementation⭐
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: …Coming soon…
  prefs: []
  type: TYPE_NORMAL
- en: I heard LangChain is working on this ;) Will add it once it’s implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 🐋 Real-world use cases 🐋
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write and execute Python code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we explore four prominent autonomous AI agents projects. Despite
    being in their early stages of development, they have already showcased impressive
    outcomes and potential applications. However, it is worth noting that all these
    projects come with significant limitations and risks, such as the possibility
    of an agent getting stuck in a loop, hallucination and security issues, as well
    as ethical concerns. Nevertheless, autonomous agents undoubtedly represent a promising
    field for the future, and I am excited to see further progress and advancements
    in this area.
  prefs: []
  type: TYPE_NORMAL
- en: '**References:**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**“Westworld” simulation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://arxiv.org/pdf/2304.03442.pdf](https://arxiv.org/pdf/2304.03442.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://reverie.herokuapp.com/arXiv_Demo/](https://reverie.herokuapp.com/arXiv_Demo/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camel**'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.camel-ai.org/](https://www.camel-ai.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://arxiv.org/abs/2303.17760](https://arxiv.org/abs/2303.17760)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://python.langchain.com/en/latest/use_cases/agents/camel_role_playing.html](https://python.langchain.com/en/latest/use_cases/agents/camel_role_playing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BabyAGI**'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/yoheinakajima/babyagi](https://github.com/yoheinakajima/babyagi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://yoheinakajima.com/task-driven-autonomous-agent-utilizing-gpt-4-pinecone-and-langchain-for-diverse-applications/](https://yoheinakajima.com/task-driven-autonomous-agent-utilizing-gpt-4-pinecone-and-langchain-for-diverse-applications/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://python.langchain.com/en/latest/use_cases/agents/baby_agi.html](https://python.langchain.com/en/latest/use_cases/agents/baby_agi.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://python.langchain.com/en/latest/use_cases/agents/baby_agi_with_agent.html](https://python.langchain.com/en/latest/use_cases/agents/baby_agi_with_agent.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AutoGPT**'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/Significant-Gravitas/Auto-GPT](https://github.com/Significant-Gravitas/Auto-GPT)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: . . .
  prefs: []
  type: TYPE_NORMAL
- en: By [Sophia Yang](https://www.linkedin.com/in/sophiamyang/) on April 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: Sophia Yang is a Senior Data Scientist. Connect with me on [LinkedIn](https://www.linkedin.com/in/sophiamyang/),
    [Twitter](https://twitter.com/sophiamyang), and [YouTube](https://www.youtube.com/SophiaYangDS)
    and join the DS/ML [Book Club](https://dsbookclub.github.io/) ❤️
  prefs: []
  type: TYPE_NORMAL
