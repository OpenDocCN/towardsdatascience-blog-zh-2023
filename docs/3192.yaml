- en: Securing your Containerised Models and Workloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b?source=collection_archive---------5-----------------------#2023-10-24](https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b?source=collection_archive---------5-----------------------#2023-10-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Switch to a non-root user!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[![Jake
    Teo](../Images/9687f43822fab69befb750a8ec58516d.png)](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    [Jake Teo](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F52b0d82d5bf5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsecuring-your-containerised-models-and-workloads-3bff4d90a07b&user=Jake+Teo&userId=52b0d82d5bf5&source=post_page-52b0d82d5bf5----3bff4d90a07b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    ·8 min read·Oct 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3bff4d90a07b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsecuring-your-containerised-models-and-workloads-3bff4d90a07b&user=Jake+Teo&userId=52b0d82d5bf5&source=-----3bff4d90a07b---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3bff4d90a07b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsecuring-your-containerised-models-and-workloads-3bff4d90a07b&source=-----3bff4d90a07b---------------------bookmark_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: Containerisation is now the *de facto* means of deploying many applications,
    with Docker being the forefront software driving its adoption. With its popularity
    also comes the increased risk of attacks [1]. Hence it will serve us well to secure
    our docker applications. The most fundamental means of doing this is to ensure
    that we set the user within our containers as a non-root user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Why use Non-Root?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Or rather, why not use the root user? Let’s take an example of a dummy architecture
    like the one below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f13742acc9199c79964e30e62bc8eac1.png)'
  prefs: []
  type: TYPE_IMG
- en: A hacker entering a container with root access. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Security is often viewed in a multi-layered approach. If an attacker manages
    to enter a container, the permissions it has as a user will be the first layer
    of defence. If the container user is assigned to have root access, the attacker
    can have free control of everything within the container. With such broad access,
    it can also exploit any potential vulnerabilities present and using…
  prefs: []
  type: TYPE_NORMAL
