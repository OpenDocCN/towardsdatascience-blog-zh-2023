- en: Make Your Tables Look Glorious
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/make-your-tables-look-glorious-2a5ddbfcc0e5?source=collection_archive---------2-----------------------#2023-01-10](https://towardsdatascience.com/make-your-tables-look-glorious-2a5ddbfcc0e5?source=collection_archive---------2-----------------------#2023-01-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simple formatting tricks to make your pandas DataFrames presentation-ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bradley-stephen-shaw.medium.com/?source=post_page-----2a5ddbfcc0e5--------------------------------)[![Bradley
    Stephen Shaw](../Images/b3ef5e6e292083ff0f8523ec5ffe89f0.png)](https://bradley-stephen-shaw.medium.com/?source=post_page-----2a5ddbfcc0e5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2a5ddbfcc0e5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2a5ddbfcc0e5--------------------------------)
    [Bradley Stephen Shaw](https://bradley-stephen-shaw.medium.com/?source=post_page-----2a5ddbfcc0e5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·
  prefs: []
  type: TYPE_NORMAL
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc5cd0a58b5ae&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-tables-look-glorious-2a5ddbfcc0e5&user=Bradley+Stephen+Shaw&userId=c5cd0a58b5ae&source=post_page-c5cd0a58b5ae----2a5ddbfcc0e5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2a5ddbfcc0e5--------------------------------)
    ·13 min read·Jan 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2a5ddbfcc0e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-tables-look-glorious-2a5ddbfcc0e5&user=Bradley+Stephen+Shaw&userId=c5cd0a58b5ae&source=-----2a5ddbfcc0e5---------------------clap_footer-----------)'
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2a5ddbfcc0e5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmake-your-tables-look-glorious-2a5ddbfcc0e5&source=-----2a5ddbfcc0e5---------------------bookmark_footer-----------)![](../Images/fffd57f16a2bf52a634c619612002471.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Pierre Bamin](https://unsplash.com/@bamin?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'With 2023 delivering everything we all hope for and dream of, the new year
    also brings with it something else: year end reports and presentations.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether we like it or not, visual impressions count. And while graphics are
    generally easier to understand and better convey a message than an array of numbers,
    we sometimes can’t get away from using a table of figures. But that doesn’t mean
    that the table can’t be pretty!
  prefs: []
  type: TYPE_NORMAL
- en: Now, fair is fair — Jupyter notebooks do make a decent-looking table, but using
    just `pandas`, we can do a fair bit of customisation to really make the table
    our own, and — more importantly — get our message across.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we’ll see how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Format dates
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Format absolute numbers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Format currencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Format ratios
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export formatted DataFrames
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s get to it, imagining for a moment that we’re at the Widget Company, presenting
    sales data for two types of widget to an internal sales team.
  prefs: []
  type: TYPE_NORMAL
- en: '*Aside: of course, you won’t only have to report results, projections and summaries
    in January, so the tips I’ll summarise here will hopefully be more perennial.*'
  prefs: []
  type: TYPE_NORMAL
- en: The data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll start with creating a dummy data set. Nothing fancy here — just a bit
    of simulation using `pandas` and `numpy` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, so simple. Let’s calculate a few “interesting” statistics — average
    sale amounts and product conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '… which gives us the following (abbreviated) DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb7de3e05810c241a6f60e8117ec675f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have quite a typical summary table that we might want to present to
    stakeholders: numbers, currency amounts, and a few ratios all expressed across
    time.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s work our way through the data set, formatting elements as we go.
  prefs: []
  type: TYPE_NORMAL
- en: '*For brevity’s sake, forthcoming images of the DataFrame will only show the
    first six rows of the data, but any code snippets apply to the DataFrame in its
    entirety.*'
  prefs: []
  type: TYPE_NORMAL
- en: Formatting dates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First up, the date column.
  prefs: []
  type: TYPE_NORMAL
- en: There’s arguably nothing *wrong* with the formatting, but it could be better.
    For instance, since all of the monthly data is reflected as at the first of each
    month, there’s probably little sense in keeping the day element of each `Month`
    entry as it tells the reader very little.
  prefs: []
  type: TYPE_NORMAL
- en: '*Eagle-eyed readers will note that I am not using the date format common in
    the US; I would of course recommend using formats which are generally acceptable
    in your locale.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s show only the year and the month number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a6e3caaee30d285fb793d34eead1ba41.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: A small change, but already much better!
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can improve readability even further by using the name of each month
    rather than the month number and we can do this **without having to alter the
    underlying data**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/21da1db6970836e502c7418a5134ca16.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Maybe a little too wordy now — let’s use abbreviations instead (e.g. “Jan” instead
    of “January”).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/77a99c9453d3912e5d2ffbc453d3c3d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Short and snappy. I’d like to take another stab at year and month number, aiming
    for something more readable than the `YYYY-MM` but stopping short of using names
    (abbreviated or not). So let’s re-format the data, but rather than use a `YYYY-MM`
    format, let’s switch to using the year and month number, separated by the letter
    “M”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/254218bf047ef2e56e47637994a452d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Not too shabby, but I prefer the abbreviated name, so we’ll proceed with that.
  prefs: []
  type: TYPE_NORMAL
- en: '*Aside: if you are interested in using the* `YYYY M-MM` *format I’ve used above,
    but don’t like the look of leading zeroes, the format string* `{:%Y M%#m}` *will
    remove that pesky zero.*'
  prefs: []
  type: TYPE_NORMAL
- en: Formatting numbers with a thousand separator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly straightforward formatting experience here as we separate thousands
    of `Quotes` and `Numbers` using commas.
  prefs: []
  type: TYPE_NORMAL
- en: What is important to note however, is that if we also want to retain the formatting
    we applied to the `Month` column (we do), then we need to extend the formatting
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6ed8e7ccd13817bd77b6c6ec8985d183.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: That looks decent — much easier to get a sense of the scale of those absolute
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Next up is currency amounts, where it is important to reflect both the size
    of the number and the currency it is denominated in.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting currencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Widget Company just so happens to produce and sell its widgets in a country
    that uses a currency denoted by £ (I hope somewhere warmer and sunnier than the
    country where I earn my £).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s reflect that in the table, reminding ourselves that:'
  prefs: []
  type: TYPE_NORMAL
- en: At an overall level, using decimal points is probably a little much
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At a lower level — say for instance, the average sale value — using decimals
    can be useful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So we add currency formatting for `Amounts` and `Average sale` to our formatting
    dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ca09e0eb65fc3e56498eec0563057b47.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different ways of displaying currency, and it’s quite easy to change
    the format around — for instance, if we wanted to show `Average sale` as a number
    followed by the currency symbol we could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/18a23df44a8029bfb2fa26e86880f36f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I prefer the `currency symbol -- number` format but we could of
    course apply the number formatting and include the currency symbol in the column
    name — e.g. `Average sale (£)` .
  prefs: []
  type: TYPE_NORMAL
- en: Formatting percentages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another fairly straightforward formatting step, it’s much easier to view ratios
    when they are expressed as percentages rather than floating point numbers.
  prefs: []
  type: TYPE_NORMAL
- en: I’d again recommend tailoring the exact format to the use case. If a high degree
    of accuracy is not required, using few (or no) decimals in your percentage can
    really clean the table up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, our formatting code now becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7280f6360e636b720b0b7087a927e0e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: I think our data is now formatted to a decent degree. Let’s move in to changes
    which affect the overall look and feel of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Hide the index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I think default DataFrame indexes are ugly. There, I said it.
  prefs: []
  type: TYPE_NORMAL
- en: 'They are obviously important but they can be an eyesore, or even worse, a distraction.
    Put yourself in the stakeholder’s shoes: you’re being shown a table that not only
    has unnecessary row numbers, but the numbering starts at zero! Pretty strange
    if you’re not used to Python.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are various ways we could address this. We could set `Month`
    to be the DataFrame’s index (even better, set a `Month x Product`multi-index).
    Or, for presentation’s sake, we could set the index to be an array of empty strings.
  prefs: []
  type: TYPE_NORMAL
- en: Or, we *could* just hide the index on display. It’s much cleaner and leaves
    the DataFrame’s index unperturbed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a965f5b96effa913cc17e19274d4ae68.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Now we’re getting there.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Highlighting certain elements in our data is a great way of getting a message
    across, or drawing the audience’s attention to a certain aspect of the data.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start with highlighting rows if an element of the row meets a given condition — in
    this case, highlight all rows containing information relating to product A.
  prefs: []
  type: TYPE_NORMAL
- en: 'We do this in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the function `highlight_product` which returns a string if the given
    condition is met (that is, if the row relates to the specified product). The string
    contains a format command that we will pass through to the `Styler`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting format command is fed through using the `apply` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/dfddd722c16eb56b212cffb24590d8e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: And so rows relating to product A highlighted. Easy peasy.
  prefs: []
  type: TYPE_NORMAL
- en: As it so happens, this also makes the table more readable as it’s now easier
    to distinguish between the two product types.
  prefs: []
  type: TYPE_NORMAL
- en: '*Pro tip: we can provide colour hex codes to* `pandas`*, making bespoke formatting
    more accessible — this particular shade of blue is actually one of my favourite
    Microsoft Excel colours. Tailoring highlighting colours to match a company’s colour
    palette is a really neat touch.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can of course use different conditional tests. Here’s an example of applying
    a conditional threshold to `Average sale`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/da04300e8decb6e6bdf20441130be68f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: … and we see rows with `Average sale > £20` very starkly highlighted in yellow.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of applying the highlighting to an entire row, we could limit format
    changes to a subset of the DataFrame. As an example, we’ll apply two threshold
    tests to `Product conversion`, changing the font colour and weight if the condition
    is met.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, we need a to specify some formatting functions first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/06e66a0dbce1a1a72f6ccce17e043aef.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Nice!
  prefs: []
  type: TYPE_NORMAL
- en: Notice how we use `applymap` here rather than `apply`, and use the `subset`
    argument to restrict the formatting to a *subset* of the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'I think I’d make two changes here:'
  prefs: []
  type: TYPE_NORMAL
- en: Code-wise, I’d use lambda functions rather than defining so many similar helper
    functions. That would make for much cleaner code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I would hesitate to present a table where certain cells have different font
    formats, unless the formatting is applied to row or column totals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Table level changes: text alignment and captions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just a quick overall enhancement — we’ll align the text and add a caption to
    our DataFrame (clear signage is always good!).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '… which yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1aad2bb9ccb5b32e0c835c13ff815aae.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '*Pro tip: when specifying multi-line captions, line breaks need to be represented
    with* `<br>` *rather* *than* `\n` .'
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s put these tips and tricks together now, including adding a column “total"
    along the bottom of the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'The column total needs some extra leg work:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll get raw totals by taking sums.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The average and conversion needs to be recalculated using the new totals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s no meaningful “total” calculation for the `Product` column, so we’ll
    replace that element with an empty string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll replace the `Month` entry with a missing value, so that we can overwrite
    it without complicating things (sneaky!).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2c60e2ab2608281c3388ada0f49d48f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: It’s then pretty straightforward to add the total to the DataFrame using `pd.concat`
    . We also write up a quick function to make the text in the total row **bold**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting it all together, using our newly-concatenated DataFrame `d` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: … and voila!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f527951d0ab48d44ab7b94477453c54d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Not too shabby!
  prefs: []
  type: TYPE_NORMAL
- en: '*Pro tip: notice how we used a missing value in* `Month` , *and the* `na_rep`
    *argument to fill in the missing value with a string. This is an easy way to use
    a string on a date-time column.*'
  prefs: []
  type: TYPE_NORMAL
- en: Export the magic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re still using PowerPoint for your work presentations, then you’ll probably
    be familiar with the pain of taking screenshots of Jupyter notebooks and pasting
    them into your slides.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is obviously horribly inefficient (not to mention boring), but there is
    some good news — you can export your tables to an image using *code*. Even better
    news is that there is a handy Python package to do just that — enter `dataframe_image`²:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/16237d1abf0ff91c972c6afc5b77e22e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The resulting *image* is slightly different to what we see in the notebook,
    but it is oh-so-good-looking (if I do say so myself!).
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s wrap it up.
  prefs: []
  type: TYPE_NORMAL
- en: This one has been a bit of an image-heavy article, but it’s been necessary to
    demonstrate how we can use `pandas` to format dates, absolute numbers, currencies,
    and ratios. We’ve also used `dataframe_image` to export our fancy tables to image
    format.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve covered quite a bit of ground here, but this is by no means an exhaustive
    discussion. Using some more advanced functionality and a bit of HTML can deliver
    some awesome-looking tables; I unfortunately am a bit of an HTML-newbie, so have
    quite quickly reached the limit of my capabilities. I’d recommend checking out
    the official documentation³ to get a flavour of what’s actually possible; you’ll
    also find a better explanation of the `Styler` and the difference between `apply`
    and `applymap` there.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, whilst I'm new to`dataframe_image` , I found it really simple to use
    and it does — indeed — do what it says on the tin. `nbconvert` users may never
    need to use it, but it’s a great tool to have in the back pocket.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully this article has set you up for a year of great-looking data tables.
    Let me know how you get your (tabular) points across— I’m always keen to hear
    of better ways to communicate ideas!
  prefs: []
  type: TYPE_NORMAL
- en: References and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[string — Common string operations — Python 3.11.1 documentation](https://docs.python.org/3/library/string.html#format-specification-mini-language)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[GitHub — dexplo/dataframe_image: A python package for embedding pandas DataFrames
    as images into pdf and markdown documents](https://github.com/dexplo/dataframe_image)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Table Visualization — pandas 1.5.2 documentation (pydata.org)](https://pandas.pydata.org/docs/user_guide/style.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A useful summary of date formats: [datetime — Basic date and time types — Python
    3.11.1 documentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior).'
  prefs: []
  type: TYPE_NORMAL
