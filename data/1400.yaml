- en: Handling Time Zones with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python处理时区
- en: 原文：[https://towardsdatascience.com/handling-time-zones-with-python-a100bfc7f6df?source=collection_archive---------3-----------------------#2023-04-21](https://towardsdatascience.com/handling-time-zones-with-python-a100bfc7f6df?source=collection_archive---------3-----------------------#2023-04-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/handling-time-zones-with-python-a100bfc7f6df?source=collection_archive---------3-----------------------#2023-04-21](https://towardsdatascience.com/handling-time-zones-with-python-a100bfc7f6df?source=collection_archive---------3-----------------------#2023-04-21)
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----a100bfc7f6df--------------------------------)'
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----a100bfc7f6df---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)
    ·10 min read·Apr 21, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa100bfc7f6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----a100bfc7f6df---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----a100bfc7f6df---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a100bfc7f6df--------------------------------)
    ·10分钟阅读·2023年4月21日'
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa100bfc7f6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&source=-----a100bfc7f6df---------------------bookmark_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa100bfc7f6df&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhandling-time-zones-with-python-a100bfc7f6df&source=-----a100bfc7f6df---------------------bookmark_footer-----------)'
- en: This post demonstrates the functionalities to deal with time zones in Python
    by means of comparative assessment of hourly solar irradiance data for four cities
    in 2020 based on different time zones.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本文通过对2020年四个城市的小时太阳辐射数据在不同时间区的比较评估，展示了在Python中处理时区的功能。
- en: Time zones
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时区
- en: When I start my work in Bonn, Germany on the first day of October at 9 am, it
    is already afternoon at 12:45 pm in my hometown in Chitwan, Nepal. My friend in
    Sydney, Australia has already finished his work schedule at 6 pm on the same day.
    Another friend in New York, the USA is still sleeping as it is 3 am in morning
    there. This implies that these four places have different **time zones**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在德国波恩的工作开始的第一天，十月的早上9点时，我在尼泊尔奇旺的家乡已经是下午12:45。我在澳大利亚悉尼的朋友当天已经在晚上6点结束了他的工作安排。另一个在美国纽约的朋友还在睡觉，因为那里的时间是凌晨3点。这表明这四个地方有不同的**时区**。
- en: '![](../Images/ce3d3f4bf5443fbffb7130a92a3cdca9.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce3d3f4bf5443fbffb7130a92a3cdca9.png)'
- en: Illustration of different time zones in the world. Map © [OpenStreetMap contributors](https://www.openstreetmap.org/copyright)
    licensed under [Open Data Commons Open Database License (ODbl)](https://opendatacommons.org/licenses/odbl/)
    by the [OpenStreetMap foundation](https://opendatacommons.org/licenses/odbl/)
    (OpenStreetMap, 2023). Labels added by Author.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 世界各地的不同时间区插图。地图 © [OpenStreetMap contributors](https://www.openstreetmap.org/copyright)，依据
    [Open Data Commons Open Database License (ODbl)](https://opendatacommons.org/licenses/odbl/)
    由 [OpenStreetMap foundation](https://opendatacommons.org/licenses/odbl/) 授权（OpenStreetMap，2023）。标签由作者添加。
- en: The [time zone](https://en.wikipedia.org/wiki/Time_zone) is an area, which observes
    uniform standard time for legal, social, or commercial purposes. The world is
    not uniformly divided into different time zones based on longitudes. Time zones
    tend to rather follow boundaries between and within countries for differentiation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[时区](https://en.wikipedia.org/wiki/Time_zone) 是一个区域，该区域为了法律、社会或商业目的而观察统一的标准时间。世界并不是根据经度均匀划分成不同的时区。时区往往根据国家之间和国家内部的边界进行划分。'
- en: All time zones are defined as an offset from **Coordinated Universal Time (UTC)**.
    And these values can range from UTC-12:00 to UTC+14:00\. While the offsets are
    usually a whole number of hours, a few zones are also offset by an additional
    30 or 45 minutes. For example, the time zone of Nepal has a time offset of UTC+05:45\.
    In total, there are [38 time zones](https://www.timeanddate.com/time/current-number-time-zones.html)
    in the world.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有时区都定义为相对于**协调世界时 (UTC)** 的偏移量。这些值范围从 UTC-12:00 到 UTC+14:00。虽然偏移量通常是整数小时，但有些时区的偏移量还额外增加了30分钟或45分钟。例如，尼泊尔的时区偏移量为
    UTC+05:45。全球共有 [38 个时区](https://www.timeanddate.com/time/current-number-time-zones.html)。
- en: If I have data on solar irradiance for the four cities in Nepal, Germany, Australia,
    and the USA in the UTC time zone, it doesn’t reflect the data for the same hour
    of the day in each of these countries. In this post, I am going to discuss how
    the time zones of the data can be handled for datetime objects including pandas
    dataframe in Python.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我有尼泊尔、德国、澳大利亚和美国四个城市的太阳辐射数据，并且这些数据是基于 UTC 时区的，这并不反映每个国家同一时刻的数据。在这篇文章中，我将讨论如何处理数据的时区，以便在
    Python 中处理日期时间对象，包括 pandas 数据框。
- en: 'For this purpose, I am going to download solar irradiance data for 2020 of
    these four cities/countries, compare and analyze the data when:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我将下载这四个城市/国家的2020年太阳辐射数据，并在以下情况下对数据进行比较和分析：
- en: The data of each country is in the UTC time zone and
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个国家的数据都在 UTC 时区中
- en: The data refers to the respective time zone of the country.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据指的是相应国家的时区。
- en: Let’s get started.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: '![](../Images/14899f4278a4b23df27b09f700ea3625.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14899f4278a4b23df27b09f700ea3625.png)'
- en: Image by [Luis Cortes](https://unsplash.com/@luiscortestamez) in [Unsplash](https://unsplash.com/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Luis Cortes](https://unsplash.com/@luiscortestamez) 提供，来自 [Unsplash](https://unsplash.com/)。
- en: Geocoding to retrieve the coordinates of four cities
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理编码以检索四个城市的坐标
- en: In the first step, I retrieve the coordinates of the four cities in four countries
    because I need them to extract the solar irradiance data. The process of extracting
    the geographical coordinates by providing the name of the place is called geocoding.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我检索了四个国家四个城市的坐标，因为我需要这些坐标来提取太阳辐射数据。通过提供地点名称来提取地理坐标的过程称为地理编码。
- en: As shown below, I wrote a function for geocoding using the [geopy](https://geopy.readthedocs.io/en/stable/)
    package. The function utilizes [Nominatim](https://nominatim.org/), which is an
    open-source service for geocoding that uses [OpenStreetMap](https://www.openstreetmap.org/#map=6/26.037/85.024)
    data to find locations on the earth by name and address.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，我编写了一个使用 [geopy](https://geopy.readthedocs.io/en/stable/) 包进行地理编码的函数。该函数利用了
    [Nominatim](https://nominatim.org/)，这是一个开源的地理编码服务，使用 [OpenStreetMap](https://www.openstreetmap.org/#map=6/26.037/85.024)
    数据通过名称和地址查找地球上的位置。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I used the function to extract the coordinates of individual cities and create
    a pandas dataframe out of it as depicted in the screenshot below.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用该函数提取了各个城市的坐标，并创建了一个 pandas 数据框，如下图所示。
- en: '![](../Images/f1f9dc30095792c3d4f219b4aeba921a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f1f9dc30095792c3d4f219b4aeba921a.png)'
- en: Dataframe is created containing latitude and longitude values of the four cities.
    Illustration by Author.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个包含四个城市的纬度和经度值的数据框。插图由作者提供。
- en: Accessing data using NASA Power API
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NASA Power API 访问数据
- en: The Applications Programming Interface (API) [service](https://power.larc.nasa.gov/docs/services/api/)
    of NASA Power allows to retrieve Analysis Ready Data (NASA Power, 2023a). For
    this post, I download the solar irradiance data for **four** cities in **hourly**
    resolution fom NASA Power Data(NASA Power, 2023b). The parameter I use is All
    Sky Surface Shortwave Downward Irradiance (`ALLSKY_SFC_SW_DWN`) for **2020**,
    which is described in more detail in the section below.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 美国宇航局Power的应用程序编程接口（API）[服务](https://power.larc.nasa.gov/docs/services/api/)允许检索分析就绪数据（NASA
    Power, 2023a）。对于这篇文章，我从NASA Power数据（NASA Power, 2023b）下载了**四个**城市的**每小时**分辨率的太阳辐射数据。我使用的参数是**2020**年的全天空表面短波下行辐射量（`ALLSKY_SFC_SW_DWN`），其详细描述见下节。
- en: The data is called in **UTC time zone** format, although the [hourly API](https://power.larc.nasa.gov/docs/services/api/temporal/hourly/#:~:text=POWER%20provides%20two%20different%20time,middle%20longitude%20of%20the%20swath.)
    also allows calling the data in Local Solar Time (LST) format by default.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据以**UTC时区**格式调用，尽管[每小时API](https://power.larc.nasa.gov/docs/services/api/temporal/hourly/#:~:text=POWER%20provides%20two%20different%20time,middle%20longitude%20of%20the%20swath.)默认也允许以本地太阳时间（LST）格式调用数据。
- en: 'The `base_url` configuration looks as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`base_url`配置如下所示：'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, I loop through the longitude and latitude of each place defined by geocoding
    in a list called `places` and request the hourly solar irradiance data for 2020\.
    The full code for this step is given in the GitHub gist below:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我遍历由地理编码定义的每个地点的经纬度，这些地点在一个名为`places`的列表中，并请求2020年的每小时太阳辐射数据。该步骤的完整代码如下所示：
- en: Parameter description
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数描述
- en: The solar irradiance data refers to the total power (direct + diffused) obtained
    from the sun per unit area per hour (Wh/m²) on a horizontal plane at the surface
    of the earth under all sky conditions (NASA Power, 2023c).
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 太阳辐射数据指的是在所有天空条件下，每小时每单位面积（Wh/m²）从太阳获得的总功率（直接+漫射），位于地球表面上的水平面上（NASA Power, 2023c）。
- en: 'This parameter, also referred to as **Global Horizontal Irradiance (GHI),**
    is relevant to calculate the size of solar PV module needed to meet the given
    electricity demand as given in the formula below:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该参数，也称为**全球水平辐射（GHI）**，用于计算满足给定电力需求所需的太阳光伏模块尺寸，如下方公式所示：
- en: '![](../Images/62ee11b171e8c008cfeb7e88a4d03de9.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62ee11b171e8c008cfeb7e88a4d03de9.png)'
- en: Equation 1 and 2 refer to formula for calculating the sizes of solar PV module
    and battery to meet given electricity demand based on solar irradiance and other
    technical parameters. Illustration by Author.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 方程1和2指的是计算太阳光伏模块和电池尺寸的公式，以满足给定的电力需求，基于太阳辐射量和其他技术参数。由作者说明。
- en: Basic statistics of given data
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给定数据的基本统计
- en: '![](../Images/6e82674f2440988e76c199631675aeed.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e82674f2440988e76c199631675aeed.png)'
- en: Global Horizontal Irradiance data downloaded for four cities. Illustration by
    Author.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下载的全球水平辐射数据，涵盖四个城市。由作者说明。
- en: The downloaded data is depicted in the plot above. The data shows higher solar
    irradiance in Sydney towards the beginning and end of the year, and lower towards
    the middle of the year. This pattern is opposite in the other three cities, which
    can be explained by the location of Sydney in the Southern hemisphere and other
    cities in the Northern hemisphere of the globe.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下载的数据如上图所示。数据显示悉尼在年初和年末的太阳辐射量较高，而在年中较低。这一模式在其他三个城市中正好相反，这可以通过悉尼位于南半球而其他城市位于北半球来解释。
- en: '![](../Images/0b9f6ea0789a97fb60e138c29d5f0d4f.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b9f6ea0789a97fb60e138c29d5f0d4f.png)'
- en: Statistics from the downloaded data. Illustration by Author.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从下载的数据中得到的统计信息。由作者说明。
- en: It is observed that Chitwan, Nepal received the highest annual solar irradiance
    (1669 kWh/m²) in 2020 followed by Sydney, Australia (1631 kWh/m²), New York, the
    USA (1462 kWh/m²), and Bonn, Germany received the least (1193 kWh/m²).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到2020年，尼泊尔的奇特旺接收到的年太阳辐射量最高（1669 kWh/m²），其次是澳大利亚悉尼（1631 kWh/m²）、美国纽约（1462 kWh/m²），而德国波恩接收到的最少（1193
    kWh/m²）。
- en: However, the maximum solar irradiance received at a particular hour is highest
    for Sydney (1061.3 W/m²) followed by Chitwan (997 W/m²).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，特定小时接收到的最大太阳辐射量最高的是悉尼（1061.3 W/m²），其次是奇特旺（997 W/m²）。
- en: The minimum solar irradiance and the 25th percentile values for each city is
    zero because there is no solar irradiance during night hours.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个城市的最小太阳辐射量和第25百分位值为零，因为夜间没有太阳辐射。
- en: Time zone Handling
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时区处理
- en: 1\. Default pandas dataframe without “datetime” format index
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 默认的pandas数据框，没有“datetime”格式索引
- en: As 2020 was a leap year, there were 366 days and as a result, the data was obtained
    for 8784 hours.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于2020年是闰年，有366天，因此数据获取了8784小时。
- en: 'When the data is first downloaded, its index is of integer (**int64**) type
    as shown below:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据首次下载时，其索引是整数（**int64**）类型，如下所示：
- en: '![](../Images/5016c70d79cb024bb34b2788f791948f.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5016c70d79cb024bb34b2788f791948f.png)'
- en: Data when first downloaded from NASA Power website. Illustration by Author.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数据最初从NASA Power网站下载。作者插图。
- en: 2\. Converting integer type index to “naive” datetime index
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 将整数类型索引转换为“原始”日期时间索引
- en: The dataframe index can be converted into datetime type using `pd.to_datetime()`
    and specifying the format `%Y%m%d%H` for year, month, day and hours respectively.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`pd.to_datetime()`并指定格式`%Y%m%d%H`将数据框架索引转换为日期时间类型，分别对应年、月、日和小时。
- en: '![](../Images/1700b29877372e16c876b3d69c5c5d7a.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1700b29877372e16c876b3d69c5c5d7a.png)'
- en: Converting integer index to datetime index. Illustration by Author.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将整数索引转换为日期时间索引。作者插图。
- en: 'This change is also reflected when the dataframe is plotted as the months Jan
    to Dec of 2020 are visible in xticks as shown below:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据框绘制时也反映了这一变化，因为2020年1月至12月的月份在xticks中可见，如下所示：
- en: '![](../Images/6baed8f5afb2ea1e536d502583365529.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6baed8f5afb2ea1e536d502583365529.png)'
- en: Plotting pandas dataframe with “naive” datetime index shows months from Jan
    to Dec 2020 in the xaxis. Illustration by Author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 用“原始”日期时间索引绘制pandas数据框显示了2020年1月至12月的月份在x轴上。作者插图。
- en: Although this dataframe has a datetime index, it does not have any information
    about time zones and daylight saving. Hence, the dataframe index is a **naive**
    datetime object. This is evident by checking the time zone info of one of the
    index of the pandas dataframe.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此数据框具有日期时间索引，但没有任何关于时区和夏令时的信息。因此，数据框索引是一个**原始**的日期时间对象。通过检查pandas数据框架的一个索引的时区信息可见。
- en: '![](../Images/d707297e7213db5e69a2088d3c4622e5.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d707297e7213db5e69a2088d3c4622e5.png)'
- en: Checking the time zone info of the first datetime index of dataframe. Illustration
    by Author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据框架第一个日期时间索引的时区信息。作者插图。
- en: 3\. Localizing “naive” datetime object to “time zone aware” datetime object
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 将“原始”日期时间对象本地化为“时区感知”日期时间对象
- en: The datetime [module](https://docs.python.org/3/library/datetime.html#module-datetime)
    of Python can be used to access, retrieve and manipulate the date and time information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Python的datetime [模块](https://docs.python.org/3/library/datetime.html#module-datetime)可用于访问、检索和操作日期和时间信息。
- en: By default, the `datetime.now()` function returns the current “local” date and
    time information. However, it doesn’t have any time zone and daylight saving information
    as `time_now.tzinfo` returns None in the code snippet below, implying it is a
    **naive** datetime object.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`datetime.now()`函数返回当前的“本地”日期和时间信息。但是，由于下面代码段中的`time_now.tzinfo`返回None，这意味着它是一个**原始**的日期时间对象。
- en: As of now (21 April 2023), I am in Nepal. Therefore, I localize the current
    time to “Asia/Kathmandu” time zone using the `timezone.localize()` module of [**pytz**](https://pypi.org/project/pytz/)
    package. Now, the `time_in_nepal` is a **time zone aware** datetime object.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前（2023年4月21日），我在尼泊尔。因此，我使用[**pytz**](https://pypi.org/project/pytz/)包的`timezone.localize()`模块将当前时间本地化为“Asia/Kathmandu”时区。现在，`time_in_nepal`是一个**时区感知**的日期时间对象。
- en: To get the current local time in Germany, I can use `time_in_nepal.astimezone(timezone("Europe/Berlin"))`,
    which is also a **time zone aware** datetime object.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取德国当前本地时间，可以使用`time_in_nepal.astimezone(timezone("Europe/Berlin"))`，这也是一个**时区感知**的日期时间对象。
- en: '![](../Images/88b8510061b58accbf280a4e23d73f6a.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/88b8510061b58accbf280a4e23d73f6a.png)'
- en: First cell shows the current local time time_now as a naive datetime object
    without time zone information. Second cell shows localizing time_now to Nepali
    time zone. Third cell shows converting Nepali local time to German local time.
    Illustration by Author.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个单元格显示当前本地时间`time_now`作为一个没有时区信息的原始日期时间对象。第二个单元格显示将`time_now`本地化为尼泊尔时区。第三个单元格显示将尼泊尔本地时间转换为德国本地时间。作者插图。
- en: 4\. Localizing timezone of pandas dataframe
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 本地化pandas数据框的时区
- en: Next, I localize the naive index of pandas dataframe to UTC time zone using
    `df.tz_localize(tz = "UTC")` as shown in the code screenshot below.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我使用`df.tz_localize(tz = "UTC")`将pandas数据框的原始索引本地化为UTC时区，如下图所示。
- en: '![](../Images/cb3ccc8ce573230876db8191a8563516.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb3ccc8ce573230876db8191a8563516.png)'
- en: Localizing naive dataframe index to UTC time zone. Illustration by Author.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将原始数据框索引本地化为UTC时区。作者插图。
- en: It is observed that the index of `df` is converted from naive index to time
    zone aware index of UTC time zone as shown above.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到`df`的索引从天真的索引转换为UTC时区的时区感知索引，如上所示。
- en: 5\. List of all possible time zone addresses
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 所有可能的时区地址列表
- en: The list of all possible time zone addresses that can be referred are available
    using `all_timezones` module of pytz package. There are 594 such addresses. Some
    addresses can refer to same time zone. For example, Europe/Berlin, Europe/Amsterdam,
    Europe/Copenhagen all refer to same time zone.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可以参考的可能时区地址列表可通过pytz包的`all_timezones`模块获得。共有594个这样的地址。一些地址可以指向相同的时区。例如，Europe/Berlin、Europe/Amsterdam、Europe/Copenhagen都指向相同的时区。
- en: '![](../Images/1881391e01ea40d62f18e496aac758a3.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1881391e01ea40d62f18e496aac758a3.png)'
- en: List of possible addresses that can be referred to for time zones using pytz
    module. Illustration by Author.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pytz模块参考的可能地址列表。插图由作者提供。
- en: 6\. Create new dataframe for each city and convert UTC time zone to corresponding
    local time zone
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 为每个城市创建新的数据框，并将UTC时区转换为相应的本地时区
- en: '`df` contains the solar irradiance data of the four cities in UTC time zone.
    In this step, I create four dataframes out of each column of `df`. And then I
    convert the time zone of new dataframe from UTC to the local time zone of each
    city or country it belongs to. For example, the time zone of `df_chitwan` is converted
    using'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`df`包含四个城市的UTC时区的太阳辐射数据。在这一步中，我从`df`的每一列创建了四个数据框。然后，我将新数据框的时区从UTC转换为它所属城市或国家的本地时区。例如，`df_chitwan`的时区转换使用'
- en: '`df_chitwan.tz_convert(tz = "Asia/Kathmandu")`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`df_chitwan.tz_convert(tz = "Asia/Kathmandu")`。'
- en: '![](../Images/7c94baf018453d963ec02b19868c0280.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c94baf018453d963ec02b19868c0280.png)'
- en: Creating different dataframes out of each column of df. The time zones of new
    dataframes are converted from UTC to respective time zone of the country/city.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从`df`的每一列创建不同的数据框。新数据框的时区从UTC转换为相应国家/城市的时区。
- en: It is to be noted that for countries which have daylight savings, this is automatically
    accounted for in the time zone conversion. For example, Nepal time is consistent
    with UTC + 05:45 throughout the year. However, for Sydney, Python automatically
    deals with daylight saving as the offset with UTC time zone can be 10 or 11 hours
    depending on time of year.
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 需要注意的是，对于有夏令时的国家，这在时区转换中会自动考虑。例如，尼泊尔时间全年与UTC + 05:45保持一致。然而，对于悉尼，Python会自动处理夏令时，因为与UTC时区的偏移可以根据年份的不同为10小时或11小时。
- en: 7\. Comparing the plots of solar irradiance data in different time zones
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 比较不同时间区的太阳辐射数据图
- en: 'In this final step, I wanted to compare how the solar irradiance looked like
    in the four cities when the data corresponded to:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步中，我想比较四个城市的数据在下列情况下的太阳辐射情况：
- en: a. The UTC time zone and
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: a. UTC时区和
- en: b. The local time zone of each city.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: b. 每个城市的本地时区。
- en: In the code snippet below, I create two sub-plots to plot the solar irradiance
    in four cities. In the left subplot, the solar irradiance data for October 1,
    2020 based on UTC time zone is plotted. And in the right subplot, the solar irradiance
    data for October 1, 2020 based on the local time of each city is plotted.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我创建了两个子图来绘制四个城市的太阳辐射。在左侧子图中，绘制了基于UTC时区的2020年10月1日的太阳辐射数据。在右侧子图中，绘制了基于每个城市本地时间的2020年10月1日的太阳辐射数据。
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The plot looks as shown below:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图形如下所示：
- en: '![](../Images/4180ee10616600f18af02a6a8b5c669d.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4180ee10616600f18af02a6a8b5c669d.png)'
- en: 'Solar irradiance on October 1, 2020\. Left: Based on UTC time zone. Right:
    Based on local time zone of each city/country. Illustration by Author.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年10月1日的太阳辐射。左图：基于UTC时区。右图：基于每个城市/国家的本地时区。插图由作者提供。
- en: 'As of October 1, 2020, the time zones of four cities as compared to UTC time
    zone are: Chitwan (UTC+05:45), New York (UTC- 04:00), Bonn (UTC + 02:00), and
    Sydney (UTC+10:00). Thus, we see the solar irradiance peak around 4 am, 3 pm,
    10 am and 3 am of UTC time zone for Chitwan, New York, Bonn, and Sydney respectively
    on the plot on the left.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2020年10月1日，与UTC时区相比，四个城市的时区如下：奇特旺（UTC+05:45）、纽约（UTC-04:00）、波恩（UTC+02:00）和悉尼（UTC+10:00）。因此，我们可以看到在左图中，奇特旺、纽约、波恩和悉尼的太阳辐射峰值分别出现在UTC时区的凌晨4点、下午3点、上午10点和凌晨3点。
- en: The plot on the right shows that solar irradiance has a similar shape based
    on local hours throughout the day in each city. The solar irradiance starts to
    increase from zero at around 5 or 6 am in each city, it peaks around noon and
    continues to decline before reaching zero again at 5 or 6 pm. On this day of the
    year, Sydney received the highest solar irradiance, followed by Chitwan, New York,
    and Bonn.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的图表显示了各城市的太阳辐射在每天的本地时间内有相似的形状。太阳辐射在每天的5或6点左右开始从零增加，在中午达到峰值，然后在5或6点前继续下降，最后再次达到零。在这一年的这一天，悉尼接收到的太阳辐射量最高，其次是奇特旺、纽约和波恩。
- en: Conclusion
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this post, I demonstrated the methods to deal with time zones while working
    with datetime objects including dataframe in Python. I used the example of working
    with solar irradiance data for four cities across the world. These methodologies
    could be very handy while working with time series data, where time zones matter
    such as meteorological data. I have summarized the key techniques learnt from
    this post to deal with time zones in Python in the following numbered bullets:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我演示了在处理日期时间对象（包括数据框）时如何处理时区的方法。我使用了四个城市的太阳辐射数据作为示例。这些方法在处理时间序列数据时非常有用，特别是当时区很重要时，例如气象数据。我总结了从本文中学习到的处理
    Python 中时区的关键技术，列在以下编号的要点中：
- en: It is possible to check the time zone of a datetime object using **tzinfo**
    module.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用**tzinfo**模块检查日期时间对象的时区。
- en: 2\. When the datetime object does not contain any information about time zones
    and daylight saving, it is called **naive** datetime object.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 当日期时间对象不包含任何关于时区和夏令时的信息时，它被称为**naive**日期时间对象。
- en: 3\. Using the **timezone** module of **pytz** package, it is possible to convert
    **naive time** to **local time**. For example,
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 使用**pytz**包的**timezone**模块，可以将**naive time**转换为**local time**。例如，
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 4\. The new object is now **time zone aware**. It is possible to get the time
    in a different time zone using `astimezone` module of datetime object. For example,
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 新对象现在是**时区感知**的。可以使用日期时间对象的`astimezone`模块获取不同时区的时间。例如，
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 5\. To work with time series data, it makes sense to convert the index of pandas
    dataframe to datetime index.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 在处理时间序列数据时，将 pandas 数据框的索引转换为日期时间索引是有意义的。
- en: 6\. The naive dataframe index can be localized using `tz_localize` module in
    `df` and specifying the time zone. For example,
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 使用`df`中的`tz_localize`模块和指定的时区可以对naive数据框索引进行本地化。例如，
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 7\. The dataframe object can also be converted to different time zone using
    `tz_convert` module of `df`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 数据框对象也可以使用`df`的`tz_convert`模块转换为不同的时区。
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The data, code and output plots for this post are available in `notebooks/Timezone_handling`
    folder in this GitHub [repository](https://github.com/hbshrestha/Data_Analytics).
    Thank you for reading!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的数据、代码和输出图表可以在此 GitHub [代码库](https://github.com/hbshrestha/Data_Analytics)中的`notebooks/Timezone_handling`文件夹中找到。感谢您的阅读！
- en: '**References**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: OpenStreetMap, 2023\. [Copyright and license](https://www.openstreetmap.org/copyright).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStreetMap, 2023. [版权和许可](https://www.openstreetmap.org/copyright)。
- en: NASA Power, 2023a. [NASA Power APIs](https://power.larc.nasa.gov/docs/services/api/).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: NASA Power, 2023a. [NASA Power APIs](https://power.larc.nasa.gov/docs/services/api/)。
- en: NASA Power, 2023b. [POWER|Data Access Viewer](https://power.larc.nasa.gov/data-access-viewer/).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: NASA Power, 2023b. [POWER|数据访问查看器](https://power.larc.nasa.gov/data-access-viewer/)。
- en: NASA Power, 2023c. [Parameters definitions](https://power.larc.nasa.gov/docs/tutorials/parameters/).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: NASA Power, 2023c. [参数定义](https://power.larc.nasa.gov/docs/tutorials/parameters/)。
