- en: Solving Geographic Travelling Salesman Problems using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python解决地理旅行推销员问题
- en: 原文：[https://towardsdatascience.com/solving-geographic-travelling-salesman-problems-using-python-e57284b14cd7?source=collection_archive---------1-----------------------#2023-07-12](https://towardsdatascience.com/solving-geographic-travelling-salesman-problems-using-python-e57284b14cd7?source=collection_archive---------1-----------------------#2023-07-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/solving-geographic-travelling-salesman-problems-using-python-e57284b14cd7?source=collection_archive---------1-----------------------#2023-07-12](https://towardsdatascience.com/solving-geographic-travelling-salesman-problems-using-python-e57284b14cd7?source=collection_archive---------1-----------------------#2023-07-12)
- en: Using pyconcorde to find optimal solutions to real-world routing problems
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用pyconcorde寻找现实世界路由问题的**最佳解决方案**
- en: '[](https://medium.com/@mikedbjones?source=post_page-----e57284b14cd7--------------------------------)[![Mike
    Jones](../Images/b841e6215298729d051a21fecbd83b12.png)](https://medium.com/@mikedbjones?source=post_page-----e57284b14cd7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e57284b14cd7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e57284b14cd7--------------------------------)
    [Mike Jones](https://medium.com/@mikedbjones?source=post_page-----e57284b14cd7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mikedbjones?source=post_page-----e57284b14cd7--------------------------------)[![Mike
    Jones](../Images/b841e6215298729d051a21fecbd83b12.png)](https://medium.com/@mikedbjones?source=post_page-----e57284b14cd7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e57284b14cd7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e57284b14cd7--------------------------------)
    [Mike Jones](https://medium.com/@mikedbjones?source=post_page-----e57284b14cd7--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F253ada1cc4c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsolving-geographic-travelling-salesman-problems-using-python-e57284b14cd7&user=Mike+Jones&userId=253ada1cc4c9&source=post_page-253ada1cc4c9----e57284b14cd7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e57284b14cd7--------------------------------)
    ·12 min read·Jul 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe57284b14cd7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsolving-geographic-travelling-salesman-problems-using-python-e57284b14cd7&user=Mike+Jones&userId=253ada1cc4c9&source=-----e57284b14cd7---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F253ada1cc4c9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsolving-geographic-travelling-salesman-problems-using-python-e57284b14cd7&user=Mike+Jones&userId=253ada1cc4c9&source=post_page-253ada1cc4c9----e57284b14cd7---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e57284b14cd7--------------------------------)
    ·12分钟阅读·2023年7月12日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe57284b14cd7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsolving-geographic-travelling-salesman-problems-using-python-e57284b14cd7&user=Mike+Jones&userId=253ada1cc4c9&source=-----e57284b14cd7---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe57284b14cd7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsolving-geographic-travelling-salesman-problems-using-python-e57284b14cd7&source=-----e57284b14cd7---------------------bookmark_footer-----------)![](../Images/2e7334e2d22e1e5749ed0fa324793135.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe57284b14cd7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsolving-geographic-travelling-salesman-problems-using-python-e57284b14cd7&source=-----e57284b14cd7---------------------bookmark_footer-----------)![](../Images/2e7334e2d22e1e5749ed0fa324793135.png)'
- en: An optimal car driving route between 79 UK cities. Image by author. Map data
    from [OpenStreetMap](https://www.openstreetmap.org/copyright).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一条**最佳的**汽车驾驶路线，连接79个英国城市。图像由作者提供。地图数据来自 [OpenStreetMap](https://www.openstreetmap.org/copyright)。
- en: The famous [Travelling Salesman Problem (TSP)](https://en.wikipedia.org/wiki/Travelling_salesman_problem)
    is about finding an optimal route between a collection of nodes (cities) and returning
    to where you started. It sounds simple, but is impossible to solve by brute force
    for large numbers of nodes, since the number of possible orderings of `n` cities
    is `n!`. This means that for even just 30 cities, the number of trips you would
    have to check is 265,252,859,812,191,058,636,308,480,000,000\. Large TSP problems
    are impractical to solve by brute force, even by powerful computers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的[旅行推销员问题（TSP）](https://en.wikipedia.org/wiki/Travelling_salesman_problem)是关于在一组节点（城市）之间找到最佳路线并返回起点。这听起来很简单，但对于大量节点而言，通过蛮力求解是不可能的，因为`n`个城市的可能排序数量为`n!`。这意味着，即使是30个城市，你需要检查的旅行数量也是265,252,859,812,191,058,636,308,480,000,000。即使是强大的计算机也无法通过蛮力解决大型TSP问题。
- en: '![](../Images/ffc8bce187e3538ae1b404b70271bbd0.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ffc8bce187e3538ae1b404b70271bbd0.png)'
- en: 'Randomly generated TSP with 10 nodes: 3,628,800 possible routes to check. Image
    by author.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随机生成的10节点TSP：需要检查3,628,800条可能的路线。图片由作者提供。
- en: Fortunately, some algorithms have been developed that dramatically reduce the
    amount of compute needed to solve large TSPs. One such piece of software, [Concorde](https://www.math.uwaterloo.ca/tsp/concorde/),
    was developed a couple of decades ago for use in the academic community. Although
    it is quite technical to use as stand-alone software, and is intended for specialists
    only, [*pyconcorde*](https://github.com/jvkersch/pyconcorde) has been developed
    as a Python wrapper for Concorde. An explanation of the algorithms used in Concorde
    is outside the scope of this article. However, we will delve into the code needed
    to reproduce these problems and their solutions in Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，已经开发出一些算法，大大减少了解决大型TSP所需的计算量。几十年前开发的[Concorde](https://www.math.uwaterloo.ca/tsp/concorde/)软件在学术界得到广泛使用。虽然作为独立软件使用时相当技术性，并且仅面向专业人员，但[*pyconcorde*](https://github.com/jvkersch/pyconcorde)作为Concorde的Python包装器被开发出来。Concorde中使用的算法的解释超出了本文的范围。然而，我们将深入探讨在Python中重现这些问题及其解决方案所需的代码。
- en: Real-world geographic TSP
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实世界的地理TSP
- en: How would someone go about solving a real-world, geographical travelling salesman
    problem? Real-world points are not connected by simple 2D lines like in the image
    above. Instead, geographical features are connected by various possible routes,
    and those routes will change depending on whether someone is walking, cycling
    or driving.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如何解决实际的地理旅行推销员问题？现实世界的点不像上图那样通过简单的2D线连接。相反，地理特征通过各种可能的路线连接，而这些路线会根据是步行、骑自行车还是开车而变化。
- en: 'Why might a data scientist or software engineer want to solve a real-world
    TSP? Here are a few examples of use cases:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家或软件工程师为何要解决实际的TSP？以下是一些用例示例：
- en: A company employing couriers needs a way of calculating optimal routes through
    a city, minimizing the time spent on the road for each of its drivers.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一家公司雇用快递员，需要一种计算城市中最佳路线的方法，以最小化每位司机的道路时间。
- en: A tour operator needs to find the shortest route connecting a set of destinations,
    within a constrained amount of time.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旅游运营商需要在有限的时间内找到连接一组目的地的最短路线。
- en: A waste disposal company or local authority needs to allocate its resources
    to ensure pickups are ordered in as efficient a manner as possible.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 废物处理公司或地方当局需要分配资源，以确保尽可能高效地安排取货。
- en: In order to solve a real-world TSP, the [*routingpy*](https://github.com/gis-ops/routingpy)library
    can be used to find routes, distances (in metres) and durations (in seconds) between
    geographical points in `[longitude, latitude]` pairs. In this article we will
    describe the method that can be used for such a problem.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决实际的TSP，可以使用[*routingpy*](https://github.com/gis-ops/routingpy)库来查找路线、距离（以米为单位）和地理点之间的持续时间（以秒为单位），格式为`[经度,
    纬度]`对。本文将描述可用于此类问题的方法。
- en: Coding walk-through
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码讲解
- en: 'A guide to solving a geographic TSP using Python is outlined here. The broad
    structure of the problem-solving process is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里概述了使用Python解决地理TSP的指南。问题解决过程的基本结构如下：
- en: Obtain a list of *n* coordinates as `[longitude, latitude]` pairs.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个包含*n*个坐标的列表，格式为`[经度, 纬度]`对。
- en: Use a routing service to obtain a matrix (*n* x *n*) of real-world durations
    between each of these coordinates, for the appropriate profile (walking, cycling,
    driving a car, driving an HGV, etc). This matrix will be asymmetric (driving from
    A to B is not the exact reverse of B to A).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用路由服务获取一个 (*n* x *n*) 矩阵，表示这些坐标之间的现实世界持续时间，适用于相应的配置文件（步行、骑行、驾车、驾驶重型货车等）。此矩阵将是非对称的（从
    A 到 B 的驾驶时间并非 B 到 A 的完全反向）。
- en: Transform (*n* x *n*) matrix into a symmetric matrix (*2n* x *2n*).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 (*n* x *n*) 矩阵转换为对称矩阵 (*2n* x *2n*)。
- en: Feed this matrix into the Concorde solver to find an optimal ordering of coordinates.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此矩阵输入 Concorde 求解器以找到坐标的最佳顺序。
- en: Create the real-world route using the routing service.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用路由服务创建现实世界的路线。
- en: Visualize the results on a map.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地图上可视化结果。
- en: Optionally, create a GPX file of the final route.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：创建最终路线的 GPX 文件。
- en: Each of these steps will be covered in detail.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每一步将详细讲解。
- en: 'Step 1: Obtaining coordinates'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 步：获取坐标
- en: For our example, we will consider the problem of driving a car between 79 cities
    in the UK. Shown below is a map of the UK cities in blue. A data scientist can
    find coordinates in a number of ways. If required, they can be found manually
    using Google Maps or [Google Earth](https://earth.google.com/web/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将考虑在英国的 79 个城市之间驾车旅行的问题。下图显示了蓝色的英国城市地图。数据科学家可以通过多种方式找到坐标。如果需要，可以使用
    Google Maps 或 [Google Earth](https://earth.google.com/web/) 手动查找坐标。
- en: '![](../Images/1c577cb11b1cdb53cb3700979657130f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c577cb11b1cdb53cb3700979657130f.png)'
- en: 79 cities in the UK. Image by author. Map data from [OpenStreetMap](https://www.openstreetmap.org/copyright).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 英国的 79 个城市。图像由作者提供。地图数据来自 [OpenStreetMap](https://www.openstreetmap.org/copyright)。
- en: '**The code structure and data used in this example is also available in** [**this
    GitHub repository**](https://github.com/mikedbjones/Geographic-TSP)**.**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**本示例中使用的代码结构和数据也可以在** [**此 GitHub 仓库**](https://github.com/mikedbjones/Geographic-TSP)**中找到。**'
- en: Here is a CSV file containing the coordinates of the cities (*gb_cities.csv*
    in the repo), and below it the code required to import it using pandas.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个包含城市坐标的 CSV 文件（*gb_cities.csv* 在仓库中），以及使用 pandas 导入它所需的代码。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Step 2: Using a routing service to obtain duration matrix'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 步：使用路由服务获取持续时间矩阵
- en: There are several routing services available through the routingpy library.
    The API from [Graphhopper](https://www.graphhopper.com/) includes a free tier
    which allows rate-limited use. Other routers that are available through routingpy
    are listed in the [documentation](https://routingpy.readthedocs.io/en/latest/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: routingpy 库提供了多种路由服务。来自 [Graphhopper](https://www.graphhopper.com/) 的 API 包含一个免费层，允许有限的使用。通过
    routingpy 还可以使用其他路由器，详细信息见 [文档](https://routingpy.readthedocs.io/en/latest/)。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is `durations`, a 79 x 79 matrix of the driving time in seconds between
    coordinates:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `durations`，一个 79 x 79 的矩阵，表示坐标之间的驾驶时间（以秒为单位）：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The driving time between cities can be determined as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 城市之间的驾驶时间可以通过以下方法确定：
- en: 'Each row and column corresponds to a city: Aberdeen is the first row and column,
    Ayr the second, Basildon the third, and so on.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每一行和每一列对应一个城市：阿伯丁是第一行和第一列，艾尔是第二行，巴斯尔顿是第三行，依此类推。
- en: 'To find the time between Aberdeen and Ayr, look at the 1st row, 2nd column:
    10,902 seconds. The reverse time (Ayr to Aberdeen) is 10,901 seconds.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要找到阿伯丁和艾尔之间的时间，请查看第 1 行第 2 列：10,902 秒。反向时间（艾尔到阿伯丁）为 10,901 秒。
- en: In general, the time from the i-th to the j-th city is at the intersection between
    the i-th row and j-th column.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一般来说，从第 i 个城市到第 j 个城市的时间位于第 i 行和第 j 列的交点处。
- en: 'Notice that the matrix, as expected, has zeros along the diagonal, since each
    point is connected to itself with zero distance or duration. Also, the matrix
    is not quite symmetric: driving durations between cities are unlikely to be identical
    in opposite directions, due to different road layouts and traffic hotspots. They
    are broadly similar, though, as would be expected.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意矩阵中对角线上的零，因为每个点与自身的距离或持续时间为零。此外，矩阵并非完全对称：城市之间的驾驶时间在两个方向上不太可能完全相同，原因是道路布局和交通热点不同。不过，它们大致相似，这也是预期中的情况。
- en: 'Step 3: Transforming asymmetric matrix to symmetric'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 步：将非对称矩阵转换为对称矩阵
- en: 'Before using this matrix to generate an optimal ordering in pyconcorde, we
    need to make the matrix symmetric. A method for transforming an asymmetric TSP
    into symmetric TSP is described by [Jonker and Volgenant (1983): Transforming
    asymmetric into symmetric traveling salesman problems, Operations Research Letters,
    2(4), 161–163](https://www.sciencedirect.com/science/article/abs/pii/0167637783900482).
    What follows is the theory behind this transformation. If desired, this section
    can be skipped (scroll down to the section titled *Transforming the geographic
    asymmetric TSP*)**.**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用该矩阵生成pyconcorde中的最佳排序之前，我们需要使矩阵对称。有关将非对称TSP转化为对称TSP的方法，请参见[Jonker和Volgenant
    (1983)：将非对称问题转化为对称旅行商问题，《运筹学快报》，2(4)，161–163](https://www.sciencedirect.com/science/article/abs/pii/0167637783900482)。以下是这种转换的理论。如果需要，可以跳过本节（滚动到标题为*将地理非对称TSP转化为对称TSP*的部分）**。
- en: '**Jonker/Volgenant asymmetric to symmetric transformation**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jonker/Volgenant非对称到对称的转换**'
- en: Below is a visualization of an asymmetric TSP with 3 nodes, and its distance
    matrix.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是具有3个节点的非对称TSP的可视化及其距离矩阵。
- en: '![](../Images/6666027086298ed86cb89062ad636fb6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6666027086298ed86cb89062ad636fb6.png)'
- en: Asymmetric TSP with 3 nodes. Image by author.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 具有3个节点的非对称TSP。图片由作者提供。
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is a sketch of the method used to transform this into a symmetric TSP:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是将其转化为对称TSP的方法草图：
- en: Create new *ghost nodes*, A’, B’ and C’. Join A to A’, B to B’ and C to C’ with
    distance zero.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的*幽灵节点*，A'、B'和C'。将A连接到A'，B连接到B'，C连接到C'，距离为零。
- en: 'Connect the nodes with weights as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以如下方式连接节点并赋予权重：
- en: A to B is now represented by A’ to B; B to A is now B’ to A.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A到B现在由A'到B表示；B到A现在由B'到A表示。
- en: B to C is now B’ to C; C to B is now C’ to B.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B到C现在由B'到C表示；C到B现在由C'到B表示。
- en: C to A is now C’ to A; A to C is A’ to C.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C到A现在由C'到A表示；A到C现在由A'到C表示。
- en: Set all other edge weights to be infinite, so any algorithm does not attempt
    to travel between them. Since this will be impractical later when using pyconcorde,
    instead set all other weights to be much higher than the highest weight we have.
    In this case, we will set them to equal 99.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有其他边的权重设为无限，以便任何算法不会尝试在它们之间进行旅行。由于在使用pyconcorde时这将不切实际，因此将所有其他权重设为远高于我们已有的最高权重。在这种情况下，我们将其设置为99。
- en: '![](../Images/df27cbcf58566d17b4115a5d2fe2abcf.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df27cbcf58566d17b4115a5d2fe2abcf.png)'
- en: Equivalent symmetric TSP with (3 x 2) nodes. Image by author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 等效的对称TSP，具有（3 x 2）节点。图片由作者提供。
- en: 'Here is the resulting distance matrix. The ordering of the nodes in the matrix
    is: A, B, C, A’, B’, C’.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的距离矩阵。矩阵中节点的顺序是：A、B、C、A'、B'、C'。
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note again that the diagonal is zero, as would be expected, and that the matrix
    is now symmetric. The original matrix is in the bottom-left corner of the new
    matrix, and its transpose is in the top-right. Meanwhile, the top-left and bottom-right
    parts contain very high weights between nodes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意对角线是零，这符合预期，并且矩阵现在是对称的。原始矩阵位于新矩阵的左下角，其转置矩阵位于右上角。与此同时，左上角和右下角部分包含节点之间非常高的权重。
- en: A, B and C (top-left) are no longer connected to each other (strictly speaking,
    they are connected but with very high instead of infinite weight, for practical
    purposes). This means that any algorithm will not seek to find a path between
    these nodes. Likewise, A’, B’ and C’ (bottom-right) are not connected to each
    other. Instead, the directional nature of the original asymmetric network is represented
    here by the weights on the original nodes A, B and C, together with their ghosts
    A’, B’ and C’.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: A、B和C（左上角）不再彼此连接（严格来说，它们是连接的，但具有非常高的权重而不是无限权重，出于实际考虑）。这意味着任何算法都不会尝试在这些节点之间寻找路径。同样，A'、B'和C'（右下角）彼此也没有连接。相反，原始非对称网络的方向性在这里由原始节点A、B和C上的权重以及它们的幽灵节点A'、B'和C'表示。
- en: 'There is a one-to-one mapping between solutions of the original asymmetric
    problem and the new, symmetric TSP:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 原始非对称问题的解与新的对称TSP之间存在一一对应关系：
- en: A — B — C — A corresponds to A — A’ — B — B’ — C — C’ — A
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A — B — C — A对应于A — A' — B — B' — C — C' — A
- en: A — C — B — A corresponds to A — A’ — C — C’ — B — B’ — A
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A — C — B — A对应于A — A' — C — C' — B — B' — A
- en: In each case the ghost nodes A’, B’ and C’ alternate with the original nodes
    A, B and C, and each original node is adjacent to its ‘partner’ ghost node (A
    is adjacent to A’, and so on).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，幽灵节点A'、B'和C'与原始节点A、B和C交替出现，每个原始节点都与其“伙伴”幽灵节点相邻（A与A'相邻，依此类推）。
- en: '**Transforming the geographic asymmetric TSP**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**将地理非对称TSP转化为对称TSP**'
- en: 'Back to our practical example. We can create a function to transform an asymmetric
    TSP matrix into a symmetric one:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的实际示例。我们可以创建一个函数，将不对称 TSP 矩阵转换为对称矩阵：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`symmetricize(durations)` returns:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`symmetricize(durations)` 返回：'
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This 158 x 158 matrix contains a copy of `durations` in the bottom left and
    a transposed copy in the top right. The high value of 461,120 (10 times the maximum
    value in `durations`) means that, for practical purposes, nodes with this duration
    are not connected.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 158 x 158 的矩阵在左下角包含 `durations` 的副本，在右上角包含转置副本。高达 461,120 的值（是 `durations`
    中最大值的 10 倍）意味着在实际应用中，具有这种时长的节点是不连接的。
- en: This matrix can finally be fed into pyconcorde to calculate an optimal path.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩阵最终可以输入到 pyconcorde 中，以计算最佳路径。
- en: 'Step 4: Using the Concorde solver'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 4 步：使用 Concorde 求解器
- en: '**Installing pyconcorde**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 pyconcorde**'
- en: 'Run the following commands to install pyconcorde (installation is available
    in Linux or Mac OS, but not in Windows at present):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来安装 pyconcorde（目前在 Linux 或 Mac OS 上可用，但 Windows 上不可用）：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Solving the TSP in Python**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**在 Python 中解决 TSP**'
- en: Now we can import from `concorde` in a Python script.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在 Python 脚本中从 `concorde` 导入。
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our symmetric durations matrix can be fed into `solve_concorde()`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的对称时长矩阵可以输入到 `solve_concorde()` 中。
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the print output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是打印输出：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This solution shows the ordering of nodes in the optimal tour. Note that this
    solution, as expected above, contains original nodes (numbered 0 to 78) alternating
    with their partner ghost nodes (79 to 157):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案展示了最佳旅游路线中节点的排序。请注意，如上所述，该解决方案包含原始节点（编号为 0 到 78）和它们的虚拟节点（79 到 157）交替出现：
- en: 0 is partnered with 79,
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0 与 79 配对，
- en: 22 with 101,
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22 与 101 配对，
- en: 25 with 104, and so on…
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 25 与 104，以此类推……
- en: This suggests that the solution has worked correctly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明解决方案已正确工作。
- en: 'Step 5: Creating the real-world route'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 5 步：创建现实世界的路线
- en: The next step is to pick alternate elements of the solution (the nodes corresponding
    to the original 79 cities), then order the coordinates accordingly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是选择解决方案中的交替元素（对应于原始 79 个城市的节点），然后相应地排序坐标。
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here are the first few city names in `names_ordered`, (the real ordering of
    the cities in the optimal tour):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `names_ordered` 中的前几个城市名称，（最佳旅游路线中城市的真实排序）：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now we add back in the first city to make a complete looped tour, and finally
    obtain the final route using the Graphhopper directions API.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们重新加入第一个城市，以形成一个完整的循环路线，并最终使用 Graphhopper 方向 API 获取最终路线。
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Step 6: Visualization on a map'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 步：在地图上可视化
- en: Seeing the final route on a map will enable us to be confident in the result,
    as well as allowing us to use the solution in a practical setting. The following
    code will display a folium map which can be saved to HTML.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图上查看最终路线将使我们对结果充满信心，并允许我们在实际设置中使用解决方案。以下代码将显示一个可以保存为 HTML 的 folium 地图。
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The result is shown at the top of this article. [Click here to view as an interactive
    map](https://mikedbjones.github.io/Geographic-TSP/gb_cities.html). It’s possible
    to zoom in to the map to see more detail and to hover over individual cities which
    will reveal their number in the tour sequence. Below is a zoomed-in part of the
    map showing the route passing through Sheffield (between Lincoln and Chesterfield
    on the optimal tour).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在本文顶部。[点击这里查看互动地图](https://mikedbjones.github.io/Geographic-TSP/gb_cities.html)。可以放大地图以查看更多细节，并悬停在单个城市上以显示它们在旅游序列中的编号。下面是地图的一部分，显示了经过谢菲尔德的路线（在林肯和切斯特菲尔德之间）。
- en: '![](../Images/cc9e4fabdeb1f4050d04f4a4bf26bd86.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc9e4fabdeb1f4050d04f4a4bf26bd86.png)'
- en: Image by author. Map data from [OpenStreetMap](https://www.openstreetmap.org/copyright).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。地图数据来源于 [OpenStreetMap](https://www.openstreetmap.org/copyright)。
- en: 'Step 7: Optional: Creating a GPX file'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 7 步：可选：创建 GPX 文件
- en: 'If the calculated route needs to be followed in real-life, for instance on
    a device with a GPS (such as a phone or car navigation system), a GPX can be created.
    This is not part of the optimization problem, but is an optional additional step
    available if you want to save the route to a file. The GPX file is created from
    the `directions` variable:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要在现实生活中跟随计算出的路线，例如在具有 GPS 的设备上（如手机或车载导航系统），可以创建 GPX 文件。这不是优化问题的一部分，但如果你想将路线保存到文件中，这是一项可选的附加步骤。GPX
    文件是从 `directions` 变量创建的：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The GPX file for this problem can be downloaded [here](https://github.com/mikedbjones/Geographic-TSP/blob/master/gb_cities.gpx).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的 GPX 文件可以 [在这里下载](https://github.com/mikedbjones/Geographic-TSP/blob/master/gb_cities.gpx)。
- en: Conclusion
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'We have seen how we can combine the following elements to solve real-world
    geographic travelling salesman problems:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何结合以下元素来解决现实世界中的地理旅行推销员问题：
- en: Directions and duration matrices from the routingpy library, specifying an appropriate
    `profile` (mode of transport).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从routingpy库获取的方向和持续时间矩阵，指定适当的`profile`（交通模式）。
- en: Efficient and powerful Concorde solver via the pyconcorde wrapper, to provide
    an optimal route.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过pyconcorde包装器使用高效而强大的Concorde求解器，以提供最佳路线。
- en: Visualization using folium to create a map.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用folium进行可视化，以创建地图。
- en: The driving tour shown above is a convincing solution to the 79-city travelling
    salesman problem, and according to the Concorde solver is provably ‘optimal’.
    Since we are working with real-world data, however, the end result is only as
    good as the input. We are relying that the point-to-point durations matrix obtained
    from routingpy is representative of the real-world. In reality, the time taken
    to walk, cycle or drive between points will depend on the time of day, or day
    of the week. This is a limitation of the method that we’ve used. One way of being
    more confident in the end result would be to try the same method with an [alternative
    routing service](https://routingpy.readthedocs.io/en/latest/#module-routingpy.routers).
    Each routing service (Graphhopper, ORS, Valhalla, and so on) has its own API which
    could be used for a TSP problem such as the one described here, and the results
    could be compared from different services.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的自驾游路线是对79城旅行推销员问题的一个令人信服的解决方案，根据Concorde求解器，它被证明是“最佳的”。然而，由于我们使用的是实际数据，最终结果的准确性取决于输入数据的质量。我们依赖于从routingpy获得的点对点时间矩阵能够代表实际情况。实际上，步行、骑车或驾车在不同时间段或一周中的不同日期之间所需的时间会有所不同。这是我们所使用的方法的一种限制。增强最终结果可信度的一种方式是使用[替代路线服务](https://routingpy.readthedocs.io/en/latest/#module-routingpy.routers)来尝试相同的方法。每个路线服务（如Graphhopper、ORS、Valhalla等）都有自己的API，可以用于解决像这里描述的TSP问题，并且可以比较不同服务的结果。
- en: Despite the real-world limitations of solving a problem such as this, the methodology
    above provides a good starting point for a salesperson or courier needing to make
    their way round a city in as efficient a manner as possible or a tourist hoping
    to catch as many sights as possible on their tour. By visualizing the results
    on an interactive map and storing the route as a GPX file, the solution is useful
    by the end user, not just the data scientist who implemented the code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管解决这样一个问题存在现实世界的限制，上述方法为需要以尽可能高效方式在城市中移动的销售人员或快递员，或者希望在旅行中尽可能多地观光的游客提供了一个良好的起点。通过在互动地图上可视化结果并将路线存储为GPX文件，解决方案对最终用户非常有用，而不仅仅是实现代码的数据科学家。
