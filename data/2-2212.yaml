- en: Unlock the Full Potential of Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发掘 Python 的全部潜力
- en: 原文：[https://towardsdatascience.com/unlock-the-full-potential-of-python-bc78a980168b](https://towardsdatascience.com/unlock-the-full-potential-of-python-bc78a980168b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/unlock-the-full-potential-of-python-bc78a980168b](https://towardsdatascience.com/unlock-the-full-potential-of-python-bc78a980168b)
- en: Tips and Tricks for Readable and Efficient Code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可读且高效的代码提示与技巧
- en: '[](https://tinztwinspro.medium.com/?source=post_page-----bc78a980168b--------------------------------)[![Janik
    and Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----bc78a980168b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bc78a980168b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bc78a980168b--------------------------------)
    [Janik and Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----bc78a980168b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/?source=post_page-----bc78a980168b--------------------------------)[![Janik
    和 Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----bc78a980168b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bc78a980168b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bc78a980168b--------------------------------)
    [Janik 和 Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----bc78a980168b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bc78a980168b--------------------------------)
    ·9 min read·May 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bc78a980168b--------------------------------)
    ·阅读时间 9 分钟·2023年5月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f2a8e5fcd50cccc27e31966429fead88.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2a8e5fcd50cccc27e31966429fead88.png)'
- en: Photo by [Maxwell Nelson](https://unsplash.com/@maxcodes?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Maxwell Nelson](https://unsplash.com/@maxcodes?utm_source=medium&utm_medium=referral)
    提供，刊登于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**Python** is one of the most popular programming languages among developers
    and Data Scientists. Developers use the language for backend and frontend development.
    Data Scientists and Analysts use Python to analyse data. The main machine-learning
    libraries are available in Python. For this reason, Python is very popular among
    Data Scientists.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python** 是开发人员和数据科学家中最受欢迎的编程语言之一。开发人员使用该语言进行后台和前端开发。数据科学家和分析师使用 Python 进行数据分析。主要的机器学习库都可以在
    Python 中使用。因此，Python 在数据科学家中非常受欢迎。'
- en: In this article, we show some Python tips and tricks. The tips and tricks will
    help you to make your Python code more efficient and readable. You can use these
    tips directly in your next Python project. We structured the tips in such a way
    that you can read all the tips independently of each other. Read the headline
    and decide which tip or trick interests you! **Let’s start right now!**
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们展示了一些 Python 的提示和技巧。这些提示和技巧将帮助你让 Python 代码更高效、更易读。你可以在下一个 Python 项目中直接使用这些技巧。我们将提示结构化成可以独立阅读的形式。阅读标题并决定哪个提示或技巧对你感兴趣！**现在就开始吧！**
- en: Use enumerate()
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `enumerate()`
- en: In Python, you usually write a `for()` loop over an iterable object. So you
    don’t need a count variable to access elements. However, sometimes it is necessary
    to have a counter variable. There are several ways to implement such a `for()`
    loop. We will show you two variants today. The following example code shows variant
    A.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你通常会对一个可迭代对象编写 `for()` 循环。因此，你不需要一个计数变量来访问元素。然而，有时确实需要一个计数器变量。有几种方法可以实现这样的
    `for()` 循环。今天我们将展示两种变体。下面的示例代码展示了变体 A。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we create a counter variable `i`. We increment this counter
    variable at each iteration. This implementation is error-prone. You have to remember
    to update `i` at each iteration.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个计数变量 `i`。我们在每次迭代时递增这个计数变量。这种实现容易出错。你必须记住在每次迭代时更新 `i`。
- en: 'You can avoid this error by using `enumerate()` in the loop. Instead of inserting
    the iterable directly into the `for()` loop, you put the iterable into the brackets
    of `enumerate()`. The following example shows how it works:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在循环中使用 `enumerate()` 来避免这个错误。不要将可迭代对象直接插入 `for()` 循环中，而是将可迭代对象放入 `enumerate()`
    的括号中。下面的示例展示了它是如何工作的：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `enumerate()` function also gives you the option to set the start value
    of the counter. The function improves your code in terms of maintainability, readability
    and efficiency.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`enumerate()` 函数还允许你设置计数器的起始值。该函数从可维护性、可读性和效率方面改进了你的代码。'
- en: Use zip()
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `zip()`
- en: Python’s `zip()` function creates an iterator that combines elements from two
    or more iterables. With the resulting iterator, you can solve common programming
    problems. We show you how to use the Python function `zip()` with practical examples.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`zip()`函数创建一个迭代器，将两个或更多可迭代对象的元素结合起来。使用这个迭代器，你可以解决常见的编程问题。我们展示了如何用实际例子使用Python函数`zip()`。
- en: You can think of the `zip()` function as a physical zip. The analogy will help
    you understand the `zip()` function. The `zip()` function has iterables as arguments
    and returns an iterator. This iterator creates a series of tuples. The tuples
    contain the elements from each iterable. The `zip()` function accepts any type
    of iterable (e.g., files, lists, tuples, dictionaries, etc.). The following code
    block shows how it works with two lists as arguments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`zip()`函数视作一个物理的拉链。这种类比将帮助你理解`zip()`函数。`zip()`函数的参数是可迭代对象，并返回一个迭代器。这个迭代器创建一系列的元组。元组包含了每个可迭代对象中的元素。`zip()`函数接受任何类型的可迭代对象（例如文件、列表、元组、字典等）。以下代码块展示了它如何处理两个列表作为参数。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the `zip()` function returns an iterator. We need to use `list()`
    to call the list object. In the above example, the length of the iterables is
    the same. However, it is also possible that the iterables do not have the same
    length. We will now take a closer look at this case.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`zip()`函数返回一个迭代器。我们需要使用`list()`来调用列表对象。在上面的示例中，迭代对象的长度是相同的。然而，也可能出现迭代对象长度不同的情况。我们现在将更详细地查看这种情况。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We see in the code example above that the length of the shortest iterable is
    used. The `zip()` function ignores the remaining elements in longer iterables.
    Since Python 3.10, `zip()` has a new optional argument called strict. The key
    purpose of this argument is to provide a safe way to handle unequal-length iterables.
    Look at the code example below.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面的代码示例中看到使用了最短可迭代对象的长度。`zip()`函数忽略了较长可迭代对象中的剩余元素。从Python 3.10开始，`zip()`有了一个新的可选参数叫做strict。这个参数的主要目的是提供一种安全的方式来处理不等长的可迭代对象。看看下面的代码示例。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We get a ValueError because the length does not match. The argument `strict`
    is useful when you need to make sure that the function only accepts iterables
    of equal length.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到一个ValueError，因为长度不匹配。当你需要确保函数仅接受相同长度的可迭代对象时，`strict`参数非常有用。
- en: A loop over multiple iterables is one of the most common use cases for Python’s
    `zip()` function. The `zip()` function is useful for iterating over sequences
    (e.g. list, dictionary). We show you how to use `zip()` to run multiple iterables
    at the same time. We also compare the classical procedure with the `zip()` method.
    The following code example shows the classic way to iterate through two lists.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对多个可迭代对象进行循环是Python `zip()`函数最常见的使用案例之一。`zip()`函数对迭代序列（例如列表、字典）非常有用。我们展示了如何使用`zip()`同时运行多个可迭代对象。我们还将经典方法与`zip()`方法进行比较。以下代码示例展示了遍历两个列表的经典方式。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we iterate through the two lists `list_a` and `list_b`. In
    the `for()` loop, we must access individual list elements manually. This process
    increases the runtime of the code. Now let’s look at how we can improve the code
    with the `zip()` function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们迭代了两个列表`list_a`和`list_b`。在`for()`循环中，我们必须手动访问每个列表元素。这一过程增加了代码的运行时间。现在让我们来看看如何使用`zip()`函数改进代码。
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we again iterate over the lists `list_a` and `list_b`. Now
    we can access the individual elements of the lists directly in the `for()` loop.
    The advantages are shorter code and improved runtime.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们再次遍历列表`list_a`和`list_b`。现在我们可以直接在`for()`循环中访问列表的各个元素。其优点是代码更简短且运行时间更短。
- en: Don’t be surprised at the `_` in the numbers. The solution is in the last tip.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不要对数字中的`_`感到惊讶。解决方案在最后一个提示中。
- en: Unpacking and Packing function arguments
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解包和打包函数参数
- en: We look at an add function that receives two arguments. In the following, you
    see the classic implementation as you know it from other programming languages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一个接收两个参数的add函数。在下面，你将看到经典的实现方式，和你在其他编程语言中看到的一样。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we add 5 and 2\. The result is 7\. In Python we can also pass
    a list of arguments to the function. This is really cool!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将5和2相加。结果是7。在Python中，我们还可以将参数列表传递给函数。这真的很酷！
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we use * to unpack the list so that all elements of it can
    be passed. In addition, we use ** to unpack the dictionary.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用*来解包列表，以便将其所有元素传递出去。此外，我们使用**来解包字典。
- en: We can also pass any number of arguments. That is called packing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以传递任意数量的参数。这被称为打包。
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `add_function()` above packs all the arguments into a single variable. With
    the packed variable we can do everything as with a normal tuple. args[0] and args[1]
    give you the first and second argument.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的`add_function()`将所有参数打包到一个变量中。通过打包的变量，我们可以像使用普通元组一样处理它。`args[0]`和`args[1]`给你第一个和第二个参数。
- en: Unpacking and Packing make your code less error-prone and cleaner. It is so
    simple that you can use it directly in your next project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 解包和打包使你的代码更少出错且更清晰。它如此简单，你可以直接在下一个项目中使用它。
- en: Inplace value exchange
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 就地交换值
- en: Many developers use a temporary variable for caching. There is an **easier and
    faster way** without creating an additional variable. Take a look at the following
    code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者使用临时变量来缓存。实际上有一种**更简单更快速的方式**，无需创建额外的变量。请看下面的代码。
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You see it isvery simple. However, this approach is not limited to variables.
    You can also apply it to lists. The following code shows an example with the first
    Fibonacci numbers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这非常简单。然而，这种方法不仅限于变量。你也可以将其应用于列表。下面的代码展示了使用前几个斐波那契数的示例。
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, we rearrange the order of the elements of the list. Often it’s
    the simple things that make your code cleaner. Remember this tip for your next
    Python project.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们重新排列了列表元素的顺序。往往是简单的东西让你的代码更干净。记住这个提示用于你的下一个Python项目。
- en: Avoid exception with Dictionary Get() method
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用字典的`Get()`方法引发异常
- en: As a Python developer, you have seen the KeyError exception many times. The
    goal is to prevent unexpected KeyError exceptions from occurring. The following
    code shows the exception with a small example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名Python开发者，你已经多次见过`KeyError`异常。目标是防止意外的`KeyError`异常发生。以下代码展示了一个小例子中的异常。
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A solution to stop this error is to use `.get()` function. Let’s use `.get()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 停止此错误的一个解决方案是使用`.get()`函数。我们来使用`.get()`。
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we don’t get a KeyError exception because we use the safer `.get()` method.
    If the key is not found, the return value is None (default). You can also specify
    the default value yourself by passing a second argument.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不会得到`KeyError`异常，因为我们使用了更安全的`.get()`方法。如果未找到键，返回值为None（默认）。你还可以通过传递第二个参数来指定默认值。
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, we change the default return value to 0\. The `.get()` function
    makes your code safer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将默认返回值改为0。`.get()`函数让你的代码更安全。
- en: Use context managers
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用上下文管理器
- en: Python context managers are a powerful feature of the language for managing
    resources, network and database connections. Resources such as files, network
    or database connections are automatically set up and taken down when needed or
    not needed. Context managers are useful in projects where resources are scarce
    or when dealing with multiple connections. In addition, context managers can help
    with error handling. In Python, the `with` statement implements a context manager.
    Let’s look at an example.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python的上下文管理器是语言中一个强大的特性，用于管理资源、网络和数据库连接。诸如文件、网络或数据库连接等资源会在需要或不需要时自动设置和清理。上下文管理器在资源稀缺的项目或处理多个连接时非常有用。此外，上下文管理器还可以帮助处理错误。在Python中，`with`语句实现了上下文管理器。我们来看一个例子。
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: First, we look at the syntax. After the `with` statement stands the context
    manager expression. This expression is responsible for the setup of the context
    manager object. Examples of a context manager expression are connections to databases
    or opening a file (as in our example). After the `as` is an optional variable
    that receives the result of the `__enter__()` method of the context manager. In
    our example, this is the JSON file. Then we come to the body. In the body, we
    execute the code within the context. In our example, we load the JSON file and
    save the content in a dictionary.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看语法。在`with`语句之后是上下文管理器表达式。这个表达式负责上下文管理器对象的设置。上下文管理器表达式的示例包括数据库连接或打开文件（如我们的例子）。`as`之后是一个可选变量，它接收上下文管理器的`__enter__()`方法的结果。在我们的例子中，这是JSON文件。接着是代码块。在代码块中，我们在上下文中执行代码。在我们的例子中，我们加载JSON文件并将内容保存到字典中。
- en: 'After the code in the body has been executed, the `with` statement calls the
    `__exit__()` method of the context manager. The `__exit__()` method performs the
    cleanup (for example: closing the file or freeing resources). In practice, the
    `with` statement is essential, especially when working with database connections.
    The use of context managers ensures that database connections are closed automatically.
    **Efficient resource management becomes possible.**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码主体执行后，`with` 语句调用上下文管理器的 `__exit__()` 方法。`__exit__()` 方法执行清理操作（例如：关闭文件或释放资源）。实际上，`with`
    语句至关重要，特别是在处理数据库连接时。使用上下文管理器可以确保数据库连接自动关闭。**高效的资源管理变得可能。**
- en: When using context manager, a lot of manual work is taken away from the developer
    by doing a lot automatically. That leads to the fact that not all steps are visible
    in the code. So it is hard to understand the code when you look at it for the
    first time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上下文管理器时，许多手动工作被自动化处理。这导致代码中不是所有步骤都可见。因此，当你第一次查看代码时，很难理解。
- en: Context managers should be used for memory optimisation and clean resource management,
    because they take a lot of work off your hands.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文管理器应用于内存优化和清理资源管理，因为它们可以减少你的工作量。
- en: Working with large numbers
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理大数字
- en: Have you ever worked with large numbers in Python? Which number is more readable
    1000000 or 1,000,000? The second one, right? Unfortunately, the second notation
    does not work in Python. In Python, however, you can use a `_` instead of a `,`.
    Let’s look at an example.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你曾经在 Python 中处理过大数字吗？哪个数字更易读，1000000 还是 1,000,000？是第二个，对吧？不幸的是，第二种表示法在 Python
    中不起作用。然而，在 Python 中，你可以使用 `_` 代替 `,`。我们来看一个例子。
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Both methods give the same result. The only difference is the representation
    of large numbers. The second method is easier to read and avoids errors.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法给出相同的结果。唯一的区别是大数字的表示方式。第二种方法更易读，避免了错误。
- en: Conclusion
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this article, we have learned how to write cleaner and safer code. The key
    findings are:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们学习了如何编写更清洁和更安全的代码。关键发现如下：
- en: '**Use the enumerate() function in a loop: You get a count of the current iteration
    and the value of the item at the current iteration.**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在循环中使用 enumerate() 函数：你可以获得当前迭代的计数和该迭代项的值。**'
- en: '**Use zip() in a loop to iterate over multiple iterables.**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在循环中使用 zip() 以迭代多个可迭代对象。**'
- en: '**Use Unpacking and Packing for less error-prone and cleaner code.**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用拆包和打包来减少错误并使代码更清晰。**'
- en: '**Avoid temporary variables with in-place value exchange.**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免使用临时变量进行就地值交换。**'
- en: '**Avoid the KeyError exception with the dictionary .get() method.**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用字典的 .get() 方法避免 KeyError 异常。**'
- en: '**Use context managers for your resource management.**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用上下文管理器来管理资源。**'
- en: '**Use _ for large numbers to make your code readable.**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 _ 来处理大数字，使你的代码更具可读性。**'
- en: 👉🏽 [**Join our free weekly Magic AI newsletter for the latest AI updates!**](https://magicai.tinztwins.de)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**加入我们的免费每周魔法 AI 时事通讯，获取最新的 AI 更新！**](https://magicai.tinztwins.de)
- en: 👉🏽 [**You can find all our Freebies on our digital products page!**](https://shop.tinztwins.de/)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**你可以在我们的数字产品页面上找到所有免费资源！**](https://shop.tinztwins.de/)
- en: '[**Subscribe for free**](https://tinztwinspro.medium.com/subscribe) **to get
    notified when we publish a new story:**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[**免费订阅**](https://tinztwinspro.medium.com/subscribe) **以便在我们发布新故事时收到通知：**'
- en: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----bc78a980168b--------------------------------)
    [## Get an email whenever Janik and Patrick Tinz publishes.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----bc78a980168b--------------------------------)
    [## 订阅邮件以获取 Janik 和 Patrick Tinz 的最新发布。'
- en: Get an email whenever Janik and Patrick Tinz publishes. By signing up, you will
    create a Medium account if you don’t…
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当 Janik 和 Patrick Tinz 发布时，你将收到一封电子邮件。通过注册，你将创建一个 Medium 账户，如果你还没有的话…
- en: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----bc78a980168b--------------------------------)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----bc78a980168b--------------------------------)
- en: Learn more about us on our [About page](https://medium.com/@tinztwinspro/about).
    Don’t forget to follow us on [X](https://twitter.com/tinztwins). Thanks so much
    for reading. If you liked this article, feel free to share it. **Have a great
    day!**
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于我们的信息，请访问我们的 [关于页面](https://medium.com/@tinztwinspro/about)。不要忘记关注我们在
    [X](https://twitter.com/tinztwins)。非常感谢你的阅读。如果你喜欢这篇文章，请随意分享。**祝你有个美好的一天！**
- en: Sign up for a Medium membership using [our link](https://tinztwinspro.medium.com/membership)
    to read unlimited Medium stories.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[我们的链接](https://tinztwinspro.medium.com/membership)注册 Medium 会员，即可阅读无限量的
    Medium 故事。
