- en: Exact Algorithm or Heuristic?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精确算法还是启发式算法？
- en: 原文：[https://towardsdatascience.com/exact-algorithm-or-heuristic-20d59d7fb359](https://towardsdatascience.com/exact-algorithm-or-heuristic-20d59d7fb359)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/exact-algorithm-or-heuristic-20d59d7fb359](https://towardsdatascience.com/exact-algorithm-or-heuristic-20d59d7fb359)
- en: '![](../Images/d9bca324355d53b2b6ba3569da40cb8a.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d9bca324355d53b2b6ba3569da40cb8a.png)'
- en: A fleet of trucks. Image by Dall-E 2.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一车队的卡车。图像由 Dall-E 2 提供。
- en: A step-by-step guide to make the right choice for your mathematical optimization
    problem
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是一个逐步指南，帮助你为数学优化问题做出正确的选择。
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----20d59d7fb359--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----20d59d7fb359--------------------------------)[](https://towardsdatascience.com/?source=post_page-----20d59d7fb359--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----20d59d7fb359--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----20d59d7fb359--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hennie-de-harder.medium.com/?source=post_page-----20d59d7fb359--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----20d59d7fb359--------------------------------)[](https://towardsdatascience.com/?source=post_page-----20d59d7fb359--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----20d59d7fb359--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----20d59d7fb359--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----20d59d7fb359--------------------------------)
    ·6 min read·Feb 28, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----20d59d7fb359--------------------------------)
    ·6分钟阅读·2023年2月28日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**Are you struggling to find the best method for solving your optimization
    problem? When it comes to solving optimization problems, there are two main approaches:
    (meta-)heuristics and exact algorithms. Each approach has its own strengths and
    weaknesses, and the choice of method will depend on the specific characteristics
    of the problem. In this post, we will explore the differences between heuristics
    and exact algorithms, and help you decide which method is best suited for your
    problem.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**你是否在寻找解决优化问题的最佳方法？在解决优化问题时，主要有两种方法：（元）启发式算法和精确算法。每种方法都有其自身的优点和缺点，方法的选择将取决于问题的具体特性。在这篇文章中，我们将探讨启发式算法和精确算法之间的区别，并帮助你决定哪种方法最适合你的问题。**'
- en: Often used exact algorithms are [linear programming](https://medium.com/towards-data-science/a-beginners-guide-to-linear-programming-and-the-simplex-algorithm-87db017e92b4),
    [mixed integer programming](https://medium.com/towards-data-science/how-to-handle-optimization-problems-daf97b3c248c)
    and [constraint programming](https://medium.com/towards-data-science/constraint-programming-explained-2882dc3ad9df).
    Famous [heuristics](https://medium.com/towards-data-science/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6)
    are local search, genetic algorithms and particle swarm optimization. To improve
    an heuristic like local search it’s interesting to combine it with meta-heuristics
    like simulated annealing or tabu search.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 常用的精确算法包括 [线性规划](https://medium.com/towards-data-science/a-beginners-guide-to-linear-programming-and-the-simplex-algorithm-87db017e92b4)、[混合整数规划](https://medium.com/towards-data-science/how-to-handle-optimization-problems-daf97b3c248c)
    和 [约束编程](https://medium.com/towards-data-science/constraint-programming-explained-2882dc3ad9df)。著名的
    [启发式算法](https://medium.com/towards-data-science/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6)
    包括局部搜索、遗传算法和粒子群优化。为了改进像局部搜索这样的启发式算法，将其与模拟退火或禁忌搜索等元启发式算法结合起来是很有趣的。
- en: In this post, we’ll start with an example to compare and explain different characteristics
    of exact algorithms and heuristics. The parts that follow will explain some considerations
    when choosing for an exact algorithm or heuristic, starting with a flowchart to
    make it even easier for you to make the right choice!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将以一个例子开始，比较并解释精确算法和启发式算法的不同特性。接下来的部分将解释在选择精确算法或启发式算法时需要考虑的一些因素，首先提供一个流程图，帮助你更容易做出正确的选择！
- en: Besides the considerations of this post, other factors can play a part in your
    choice, like experience with different methods or maybe even gut feeling. This
    is a heads up that this post tries to generalize, but that every problem can have
    its own characteristics and circumstances that make you choose a certain approach,
    or let you deviate from the flowchart.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 除了本文的考虑因素之外，其他因素也可能影响你的选择，比如对不同方法的经验或者直觉。这是一个提醒，说明本文试图进行概括，但每个问题可能有其独特的特征和情况，促使你选择某种方法，或者偏离流程图。
- en: Comparison by Example
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过示例比较
- en: 'Let’s start with an example to explain the main differences between exact algorithms
    and heuristics: say you have a delivery company with a fleet of trucks that need
    to deliver packages to different locations. The goal of the problem is to determine
    the best routes for each truck to deliver the packages in the most efficient way,
    while taking into account factors such as distance, delivery time windows, and
    truck capacity. This problem is a variation of the capacitated vehicle routing
    problem.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来解释精确算法和启发式算法之间的主要区别：假设你有一家需要将包裹送到不同地点的配送公司，拥有一车队的卡车。问题的目标是确定每辆卡车的最佳路线，以最有效的方式配送包裹，同时考虑到距离、配送时间窗口和卡车容量等因素。这个问题是带容量限制的车辆路径问题的一个变种。
- en: An exact algorithm for this problem might be a MIP model that formulates the
    problem as a mathematical optimization problem. The MIP model would consider all
    the constraints and objective(s) of the problem, and find the optimal solution
    that minimizes the total delivery time and cost, while ensuring that all the packages
    are delivered on time and within the capacity of each truck.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 针对这个问题的一个精确算法可能是一个将问题表述为数学优化问题的MIP模型。MIP模型将考虑问题的所有约束条件和目标，找到最小化总配送时间和成本的最优解决方案，同时确保所有包裹按时送达，并在每辆卡车的容量范围内。
- en: However, solving the MIP model for large problems can be *computationally expensive*
    and *time-consuming*, even with powerful computers. This is where heuristics come
    into play. A heuristic for this problem might be a simple nearest neighbor algorithm
    that assigns each package to the closest truck, and then optimizes the route for
    each truck using local search. While this approach may not guarantee an optimal
    solution, it can *quickly generate good-quality solutions* that are *close to
    the optimal solution*, and may be sufficient for practical applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使使用强大的计算机，解决大型MIP模型也可能*计算开销大*和*耗时*。这时，启发式算法就发挥了作用。针对这个问题的启发式算法可能是一个简单的最近邻算法，它将每个包裹分配给最近的卡车，然后使用局部搜索优化每辆卡车的路线。虽然这种方法可能不能保证最优解，但它可以*快速生成高质量的解决方案*，并且*接近最优解*，可能足够满足实际应用需求。
- en: In summary, the main difference between an exact algorithm and a heuristic is
    the *level of accuracy* and *efficiency*. Exact algorithms aim to find the optimal
    solution, but may be *computationally expensive* and *impractical* for large-scale
    problems. Heuristics, on the other hand, aim to find a good solution *quickly*
    and *efficiently*, but may *not guarantee an optimal solution*. The choice between
    these approaches depends on the specific characteristics of the problem and the
    trade-off between accuracy and efficiency.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，精确算法和启发式算法之间的主要区别在于*准确性水平*和*效率*。精确算法旨在找到最优解，但对于大规模问题可能*计算开销大*且*不切实际*。启发式算法则旨在*快速*和*高效*地找到一个好的解决方案，但可能*不能保证最优解*。在这些方法之间的选择取决于问题的具体特征以及准确性和效率之间的权衡。
- en: Exact or Heuristic?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精确算法还是启发式算法？
- en: 'A couple of things are important to keep in mind when choosing between an exact
    algorithm and heuristic. I have divided them into four main topics: solution quality,
    performance, flexibility and costs. If you are looking for a quick answer (heuristic
    or exact algorithm), this flowchart might help:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择精确算法和启发式算法时，有几个重要的因素需要考虑。我将这些因素分为四个主要主题：解决方案质量、性能、灵活性和成本。如果你在寻找一个快速的答案（启发式算法还是精确算法），这个流程图可能会有所帮助：
- en: '![](../Images/23db5885d7ca380c7095db57a3fa3be3.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/23db5885d7ca380c7095db57a3fa3be3.png)'
- en: Flowchart for choosing between exact algorithm and heuristic. Click to enlarge.
    Image by author.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 选择精确算法和启发式算法的流程图。点击放大。图片由作者提供。
- en: Let’s take a look at each of them in more depth.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地看看每一个因素。
- en: Solution Quality
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案质量
- en: If your most important goal is to get solutions with the highest possible quality,
    because a slightly better solution brings a lot of value, you can stop here. In
    that case you should go for an exact algorithm. By using an exact algorithm, you
    know the gap between the optimal and current solution and you can continue the
    search until you have found the optimum.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你最重要的目标是获得尽可能高质量的解决方案，因为稍微更好的解决方案会带来很大价值，你可以停在这里。在这种情况下，你应该选择精确算法。通过使用精确算法，你可以知道最优解与当前解之间的差距，并可以继续搜索，直到找到最优解。
- en: But, an important note, if the problem is really large, an exact algorithm can
    take a lot of time to come to that optimal. Hours, days, or weeks are possible.
    Especially if you use an open source solver like [CBC](https://github.com/coin-or/Cbc)
    or [glpk](https://www.gnu.org/software/glpk/), you can’t expect an optimal solution
    fast. You’d rather use a commercial one like [Gurobi](https://www.gurobi.com/)
    or [CPLEX](https://www.ibm.com/uk-en/analytics/cplex-optimizer). And even with
    state of the art solvers, finding the optimal solution can take a lot of time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有一个重要的注意事项，如果问题非常庞大，精确算法可能需要很长时间才能找到最优解。可能需要几个小时、几天或几周。特别是如果你使用像[ CBC](https://github.com/coin-or/Cbc)或[
    glpk](https://www.gnu.org/software/glpk/)这样的开源求解器，你不能期望快速得到最优解。你可能更倾向于使用像[Gurobi](https://www.gurobi.com/)或[CPLEX](https://www.ibm.com/uk-en/analytics/cplex-optimizer)这样的商业求解器。即使使用最先进的求解器，找到最优解也可能需要大量时间。
- en: The difficulty with heuristics is that it’s hard to know the quality of the
    solution. You can compare it with a baseline, but you don’t know the gap between
    the optimal and the current solution.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式算法的难点在于很难知道解决方案的质量。你可以将其与基准进行比较，但你不知道最优解与当前解之间的差距。
- en: Performance
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: Heuristics are generally faster than exact algorithms because they sacrifice
    accuracy for speed. Exact algorithms aim to find the optimal solution to a problem,
    but this can be computationally expensive and time-consuming, especially for large-scale
    problems. Exact algorithms typically explore the entire solution space, which
    can be very large for some problems, and require the use of complex mathematical
    techniques to find the optimal solution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式算法通常比精确算法更快，因为它们以牺牲准确性换取速度。精确算法旨在找到问题的最优解，但这可能计算成本高昂且耗时，特别是对于大规模问题。精确算法通常会探索整个解空间，对于某些问题，这个解空间可能非常庞大，并且需要使用复杂的数学技术来找到最优解。
- en: Heuristics use simple rules of thumb to guide the search for a solution. Often
    they focus on a subset of the most promising solutions. This reduces the computational
    effort required to find a solution and allows heuristics to generate good-quality
    solutions in a shorter amount of time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式算法使用简单的经验规则来指导解决方案的搜索。它们通常关注最有前景的解决方案的一个子集。这减少了找到解决方案所需的计算工作量，并允许启发式算法在更短的时间内生成高质量的解决方案。
- en: It’s easier to implement problem-specific knowledge in a heuristic to guide
    the search for a solution, which can help to avoid exploring parts of the solution
    space that are unlikely to contain good solutions. This can further reduce the
    computational effort required to find a solution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在启发式算法中实现特定问题的知识更容易，以指导解决方案的搜索，这有助于避免探索那些不太可能包含好解的解空间部分。这可以进一步减少找到解决方案所需的计算工作量。
- en: Flexibility
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵活性
- en: Heuristics are often more flexible than exact algorithms because they are not
    bound by the same restrictions as exact algorithms and can be adapted to address
    specific problem characteristics or constraints. Heuristics can often be implemented
    using simple algorithms and data structures, making them easier to develop and
    modify than exact algorithms. This allows heuristics to quickly adapt to new or
    changing problem instances, making them a good choice for problems where the solution
    needs to be found quickly or where the problem is likely to change over time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式算法通常比精确算法更灵活，因为它们不受精确算法相同的限制，可以适应特定问题的特征或约束。启发式算法通常可以使用简单的算法和数据结构来实现，使其比精确算法更容易开发和修改。这使得启发式算法能够快速适应新的或变化的问题实例，使其成为需要快速找到解决方案或问题可能会随时间变化的情况的良好选择。
- en: Exact algorithms are based on mathematical models that provide a formal, rigorous
    framework for solving problems. These models are based on a set of constraints
    and objective functions that define the problem to be solved. However, this rigidity
    can make it difficult to address specific problem characteristics or constraints
    that are not easily captured by the mathematical model.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 精确算法基于数学模型，这些模型为解决问题提供了一个正式而严谨的框架。这些模型基于一组约束和目标函数，定义了待解决的问题。然而，这种刚性可能使得处理特定问题特征或约束变得困难，这些特征或约束可能不容易被数学模型所捕捉。
- en: Overall, the flexibility of heuristics is one of their key strengths, allowing
    them to be applied to a wide range of problems and to quickly adapt to changing
    problem characteristics.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，启发式算法的灵活性是其主要优点之一，使其能够应用于广泛的问题，并快速适应变化的问题特征。
- en: Costs
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成本
- en: 'When it comes to solving large problems, obtaining a high-quality solver can
    cost a lot of money. However, the investment is often worth it for those who require
    the highest level of accuracy and speed in their solutions. And a great addition:
    you usually get good support when getting a commercial solver license, people
    with a lot of experience can help you with the model formulation and improve performance.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到解决大型问题时，获得一个高质量的求解器可能需要花费大量的金钱。然而，对于那些需要最高精度和速度的人来说，这笔投资通常是值得的。一个很好的补充是：在获得商业求解器许可证时，你通常会得到很好的支持，经验丰富的人可以帮助你进行模型构建并提升性能。
- en: In terms of time, hiring consultants to implement solutions for you can be an
    efficient way to get things done quickly. However, this approach can also be costly,
    and may not always yield the most optimal results. For those who don’t have the
    budget for consultants or want to maintain greater control over the problem-solving
    process, learning and implementing different heuristics can be a viable option.
    While it may take more time upfront, investing in the development of heuristics
    can pay off in the long run by providing a more customized and efficient solution
    process.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就时间而言，雇佣顾问来为你实施解决方案可以是一种高效的快速完成任务的方式。然而，这种方法也可能成本较高，且不总是能获得最优结果。对于那些没有预算雇佣顾问或希望对解决问题过程保持更大控制的人来说，学习和实施不同的启发式算法可以是一个可行的选择。尽管这可能需要更多的前期时间，但投资于启发式算法的开发从长远来看可能会带来更为定制和高效的解决过程。
- en: Conclusion
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This post compares exact algorithms and heuristics for solving optimization
    problems. Exact algorithms aim for optimal solutions, but can be slow and computationally
    expensive. Heuristics sacrifice accuracy for speed, but can generate good solutions
    quickly. The choice depends on the specific problem and the trade-off between
    accuracy and efficiency. The flowchart provided aims to help choosing between
    the two methods. Considerations include solution quality, performance, flexibility,
    and costs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章比较了用于解决优化问题的精确算法和启发式算法。精确算法旨在获得最优解，但可能会比较慢且计算开销大。启发式算法为了速度牺牲了准确性，但可以快速生成良好的解决方案。选择取决于具体问题以及准确性和效率之间的权衡。提供的流程图旨在帮助选择这两种方法中的一种。考虑因素包括解决方案质量、性能、灵活性和成本。
- en: 'And one final note: every problem is different and sometimes small nuances
    can make you choose another approach, which is perfectly fine. You can always
    reconsider your choice in a later stage, or try both approaches for comparison
    purposes.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点最终说明：每个问题都是不同的，有时细微的差别可能会让你选择另一种方法，这完全没问题。你可以在后续阶段重新考虑你的选择，或者为了比较目的尝试两种方法。
- en: Related
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: '[](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----20d59d7fb359--------------------------------)
    [## Why Every Data Scientist Should Learn Mathematical Optimization'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[为什么每个数据科学家都应该学习数学优化](https://towardsdatascience.com/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----20d59d7fb359--------------------------------)
    [## 为什么每个数据科学家都应该学习数学优化'
- en: Data science courses are focusing on data visualization, feature engineering,
    data processing, (un)supervised learning…
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据科学课程正专注于数据可视化、特征工程、数据处理、（非）监督学习……
- en: towardsdatascience.com](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----20d59d7fb359--------------------------------)
    [](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----20d59d7fb359--------------------------------)
    [## How to Handle Optimization Problems?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何处理优化问题？](https://towardsdatascience.com/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----20d59d7fb359--------------------------------)
    [如何处理优化问题？](https://towardsdatascience.com/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----20d59d7fb359--------------------------------)
    [## 如何处理优化问题？'
- en: Easy examples with solutions and code.
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轻松示例及其解决方案和代码。
- en: towardsdatascience.com](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----20d59d7fb359--------------------------------)
    [](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----20d59d7fb359--------------------------------)
    [## Mathematical Optimization Heuristics Every Data Scientist Should Know
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的数学优化启发式方法](https://towardsdatascience.com/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----20d59d7fb359--------------------------------) '
- en: Local search, genetic algorithms and more.
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部搜索、遗传算法等。
- en: towardsdatascience.com](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----20d59d7fb359--------------------------------)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何处理优化问题](https://towardsdatascience.com/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----20d59d7fb359--------------------------------) '
