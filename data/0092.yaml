- en: Neural Networks with Multiple Data Sources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有多个数据源的神经网络
- en: 原文：[https://towardsdatascience.com/neural-networks-with-multiple-data-sources-ef91d7b4ad5a?source=collection_archive---------4-----------------------#2023-01-06](https://towardsdatascience.com/neural-networks-with-multiple-data-sources-ef91d7b4ad5a?source=collection_archive---------4-----------------------#2023-01-06)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/neural-networks-with-multiple-data-sources-ef91d7b4ad5a?source=collection_archive---------4-----------------------#2023-01-06](https://towardsdatascience.com/neural-networks-with-multiple-data-sources-ef91d7b4ad5a?source=collection_archive---------4-----------------------#2023-01-06)
- en: How to design a neural network with inputs from multiple data sources using
    Tensorflow
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Tensorflow 设计一个具有多个数据源输入的神经网络
- en: '[](https://medium.com/@morgan_lynch?source=post_page-----ef91d7b4ad5a--------------------------------)[![Morgan
    Lynch](../Images/731f65c99b8bedc3e07ca6f281596f09.png)](https://medium.com/@morgan_lynch?source=post_page-----ef91d7b4ad5a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ef91d7b4ad5a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ef91d7b4ad5a--------------------------------)
    [Morgan Lynch](https://medium.com/@morgan_lynch?source=post_page-----ef91d7b4ad5a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@morgan_lynch?source=post_page-----ef91d7b4ad5a--------------------------------)[![Morgan
    Lynch](../Images/731f65c99b8bedc3e07ca6f281596f09.png)](https://medium.com/@morgan_lynch?source=post_page-----ef91d7b4ad5a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ef91d7b4ad5a--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ef91d7b4ad5a--------------------------------)
    [Morgan Lynch](https://medium.com/@morgan_lynch?source=post_page-----ef91d7b4ad5a--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4b5483121384&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fneural-networks-with-multiple-data-sources-ef91d7b4ad5a&user=Morgan+Lynch&userId=4b5483121384&source=post_page-4b5483121384----ef91d7b4ad5a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ef91d7b4ad5a--------------------------------)
    ·5 min read·Jan 6, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fef91d7b4ad5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fneural-networks-with-multiple-data-sources-ef91d7b4ad5a&user=Morgan+Lynch&userId=4b5483121384&source=-----ef91d7b4ad5a---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4b5483121384&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fneural-networks-with-multiple-data-sources-ef91d7b4ad5a&user=Morgan+Lynch&userId=4b5483121384&source=post_page-4b5483121384----ef91d7b4ad5a---------------------post_header-----------)
    发表在 [数据科学前沿](https://towardsdatascience.com/?source=post_page-----ef91d7b4ad5a--------------------------------)
    ·5 分钟阅读·2023年1月6日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fef91d7b4ad5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fneural-networks-with-multiple-data-sources-ef91d7b4ad5a&user=Morgan+Lynch&userId=4b5483121384&source=-----ef91d7b4ad5a---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fef91d7b4ad5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fneural-networks-with-multiple-data-sources-ef91d7b4ad5a&source=-----ef91d7b4ad5a---------------------bookmark_footer-----------)![](../Images/b642d0d8398604490bcb3b4dd45695fc.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fef91d7b4ad5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fneural-networks-with-multiple-data-sources-ef91d7b4ad5a&source=-----ef91d7b4ad5a---------------------bookmark_footer-----------)![](../Images/b642d0d8398604490bcb3b4dd45695fc.png)'
- en: CNN with multiple datasources. Image by author.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多个数据源的卷积神经网络。图片来源：作者。
- en: There are many use cases where a neural network needs to be trained on multiple
    data sources in parallel. These include medical use cases where there may be once
    or more images together with structured patient data or multi-image use cases
    where images of different objects contribute to a single output. e.g. Using separate
    photos of a persons house and car to predict their income.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多使用场景中，神经网络需要并行训练多个数据源。这些包括医学应用场景，其中可能会有一张或多张图像与结构化的患者数据一起使用，或者多图像应用场景，其中不同对象的图像贡献到单一输出。例如，使用个人房屋和汽车的独立照片来预测他们的收入。
- en: The collective data cannot be processed as-one as each will have it’s own attributes
    and shape. To successfully design a network, each input stream needs to be processed
    and trained separately.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 集体数据不能一体处理，因为每个数据源都有其独特的属性和形状。为了成功设计一个网络，每个输入流需要单独处理和训练。
- en: Using CNNs with multiple separate inputs has been shown to increase accuracy
    over a single image input. In one study [1], 3 different image input branches
    were processed and them merged to give an 8% improvement in accuracy over individual
    image processing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具有多个独立输入的 CNN 已被证明比单一图像输入提高了准确性。在一项研究中[1]，处理了三个不同的图像输入分支，并将它们合并，结果比单独处理图像提高了
    8% 的准确性。
- en: In addition to this, it has also been shown that merging the network branches
    late in the CNN design also produces better accuracy [2]. This late merging means
    in practice that the input branches should be almost fully processed as individual
    networks before they are merged into the final model and a prediction generated.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还显示出在 CNN 设计中，晚期合并网络分支也能产生更好的准确性[2]。这种晚期合并意味着在实际操作中，输入分支应该在合并到最终模型并生成预测之前，几乎完全作为独立网络进行处理。
- en: We will look in detail at how a CNN of this type can be designed using a theoretical
    example of patient data where we have a CSV file of data together with an image.
    We will only look at one image input but this approach can be equally used with
    multiple images per patient.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细讨论如何设计这种类型的卷积神经网络（CNN），通过一个理论上的患者数据示例，其中包含一个数据 CSV 文件和一张图像。我们将只考虑一个图像输入，但这种方法也可以用于每个患者的多个图像。
- en: To begin, the source file must be loaded and processed into a Pandas dataframe.
    In the example shown below, a simple dataset is loaded with patient ID, patient
    age and a flag to indicate if cancer has been diagnosed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，必须加载源文件并将其处理为 Pandas 数据框。下方示例中，加载了一个简单的数据集，包括患者 ID、患者年龄和一个标志，表示是否已诊断出癌症。
- en: It’s important to note the shape of the dataframe as this will influence the
    design of the network to follow.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意数据框的形状，因为这将影响后续网络的设计。
- en: Next we must load an image for each of the patients. This is done by iterating
    on the patient dataframe so that the sequence of records is maintained.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须为每个患者加载一张图像。这是通过对患者数据框进行迭代来完成的，以保持记录的顺序。
- en: The image data is also converted to a numpy array to maintain consistency with
    the patient data loaded from file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图像数据也被转换为 numpy 数组，以保持与从文件中加载的患者数据的一致性。
- en: '![](../Images/973fb21675363cb370788210ba1674fd.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/973fb21675363cb370788210ba1674fd.png)'
- en: Shape of loaded data. Image by author
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 加载数据的形状。图片由作者提供
- en: We now need to consider the shape of the data that has been loaded. For the
    images, if each individual image is 512,512 pixels and we have *n* images then
    the shape of this data is (n, 512, 512). For images with multiple channels a further
    dimension may be added, but we will keep this example simple.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要考虑已加载数据的形状。对于图像，如果每个图像的尺寸为 512x512 像素，并且我们有*n*张图像，那么数据的形状为(n, 512, 512)。对于具有多个通道的图像，可能会添加进一步的维度，但我们将保持这个示例简单。
- en: For the structured patient data, we have three columns in the file and *n* records.
    This will result in a shape of (n, 3). The patient ID column is not needed for
    training so this will likely be dropped later giving us a final training shape
    of (n, 2).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于结构化的患者数据，我们的文件中有三列和*n*条记录。这将导致数据形状为(n, 3)。患者 ID 列在训练中是不需要的，因此这列可能会被删除，从而得到最终训练数据的形状为(n,
    2)。
- en: Further pre-processsing of the data such as scaling is outside the scope of
    this discussion. For this example we will accept the data as-is.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的进一步预处理，如缩放，不在本讨论范围之内。对于本示例，我们将直接使用原始数据。
- en: 'Before we design the neural network there is however one further step needed.
    This is to split the data into training and test datasets. This needs to be done
    in one single step to preserve the sequencing & split of the two datasets. The
    example below demonstrates doing this with scikit-learn:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在设计神经网络之前，还需要一步。这一步是将数据分割成训练集和测试集。这需要在一个步骤中完成，以保持数据集的顺序和分割。下面的示例演示了如何使用 scikit-learn
    来完成这一步骤：
- en: 'Once the split is done, we can then extract the target feature from both datasets
    as our ‘y’ dataset. Checking the shape of the two resulting training datasets
    should produce an output similar to this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦分割完成，我们就可以从两个数据集中提取目标特征作为我们的‘y’数据集。检查两个结果训练数据集的形状应该产生类似于以下的输出：
- en: '*(1200, 512, 512)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*(1200, 512, 512)*'
- en: (1200, 3)*
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*(1200, 3)*'
- en: Where the number of records is 1,200\. Both datasets are required to have the
    same number of records so that they can be merged in the output of the neural
    network.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 记录数为 1,200。两个数据集需要具有相同数量的记录，以便它们可以在神经网络的输出中合并。
- en: 'We can now begin to design the neural network itself using the Keras functional
    API. Firstly we will start with the structured patient data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 Keras 函数式 API 开始设计神经网络。首先，我们将从结构化的患者数据开始：
- en: The design of the network can vary, but it is good practice to include a normalization
    layer. The normalization layer is adapted to the training data only.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 网络的设计可以有所不同，但最好包括一个归一化层。归一化层仅适应于训练数据。
- en: Importantly, the shape of the input layer is set to the number of columns in
    the data (in this example; 3).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，输入层的形状设置为数据中的列数（在此示例中为3）。
- en: 'The shape of the output layer is also critical as this is the shape that will
    be merged with the image processing branch. This is determined by the final dense
    layer. In this example the shape of the output layer will be:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出层的形状也很关键，因为这是将与图像处理分支合并的形状。这由最后的 Dense 层决定。在此示例中，输出层的形状将是：
- en: '*(None, 64)*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*(无, 64)*'
- en: Where ‘None’ is Keras’ interpretation of the number of records and is unspecified.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其中‘None’是 Keras 对记录数量的解释，未指定。
- en: The data branch is now complete and we can now look at the image processing
    branch. While it is possible to design your own network, in practice is is easier
    to use a pre-designed model. In this example we will use Resnet-50 from Keras
    Applications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分支现在已经完成，我们可以查看图像处理分支。虽然可以设计自己的网络，但在实践中使用预设计的模型更为方便。在此示例中，我们将使用 Keras Applications
    中的 Resnet-50。
- en: As can be seen above, the input shape is the size of each image together with
    a further dimension for the image channel (in this case 1).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，输入形状是每个图像的大小，加上一个额外的维度用于图像通道（在此案例中为1）。
- en: 'A fully-connected Dense layer is added to the end of the Resnet model to give
    the output the same shape as the data branch:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Resnet 模型的末尾添加一个全连接的 Dense 层，以使输出与数据分支的形状相同：
- en: '*(None, 64)*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*(无, 64)*'
- en: 'Because we have taken care with the shape of the data throughout, we are now
    able to merge the output of the two branches:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在整个过程中都注意了数据的形状，所以现在能够合并两个分支的输出：
- en: The two branches are concatenated and a final fully-connected Dense layer is
    then added to reduce the model down to a final prediction. The activation used
    here can vary. In this example, linear is used to output the actual class probabilities.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 两个分支被连接在一起，最后添加一个全连接的 Dense 层以将模型减少到最终的预测。这里使用的激活函数可以有所不同。在此示例中，使用线性激活函数来输出实际的类别概率。
- en: 'The final design of the CNN is summarized below:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: CNN 的最终设计总结如下：
- en: '![](../Images/dd2da001a98f1ee9fd06d02b4297ad05.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd2da001a98f1ee9fd06d02b4297ad05.png)'
- en: Design of final CNN. Image by author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最终 CNN 设计。图片由作者提供
- en: As can be seen above, if the shape of the data being processed is carefully
    considered, multiple branches can be successfully merged. This merged model can
    then be used to generate a single prediction from the multiple data sources.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，如果仔细考虑数据的形状，可以成功地合并多个分支。然后，可以使用这个合并后的模型从多个数据源生成单一的预测。
- en: Thank you for reading.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。
- en: '**References:**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献：**'
- en: '[1] Yu Sun, Lin Zhu, Guan Wang, Fang Zhao, “Multi-Input Convolutional Neural
    Network for Flower Grading”, *Journal of Electrical and Computer Engineering*,
    vol. 2017, Article ID 9240407, 8 pages, 2017\. [https://doi.org/10.1155/2017/9240407](https://doi.org/10.1155/2017/9240407)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Yu Sun, Lin Zhu, Guan Wang, Fang Zhao, “Multi-Input Convolutional Neural
    Network for Flower Grading”, *Journal of Electrical and Computer Engineering*,
    vol. 2017, Article ID 9240407, 8 pages, 2017\. [https://doi.org/10.1155/2017/9240407](https://doi.org/10.1155/2017/9240407)'
- en: '[2] Seeland M, Mäder P (2021) Multi-view classification with convolutional
    neural networks. PLoS ONE 16(1): e0245230\. [https://doi.org/10.1371/journal.pone.0245230](https://doi.org/10.1371/journal.pone.0245230)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Seeland M, Mäder P (2021) Multi-view classification with convolutional
    neural networks. PLoS ONE 16(1): e0245230\. [https://doi.org/10.1371/journal.pone.0245230](https://doi.org/10.1371/journal.pone.0245230)'
