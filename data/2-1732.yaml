- en: 'Python OOP Tutorial: How to Create Classes and Objects'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python OOP 教程：如何创建类和对象
- en: 原文：[https://towardsdatascience.com/python-oop-tutorial-how-to-create-classes-and-objects-c36a92b01552](https://towardsdatascience.com/python-oop-tutorial-how-to-create-classes-and-objects-c36a92b01552)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-oop-tutorial-how-to-create-classes-and-objects-c36a92b01552](https://towardsdatascience.com/python-oop-tutorial-how-to-create-classes-and-objects-c36a92b01552)
- en: An easy guide to using classes and objects in Object-Oriented Programming (OOP)
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于在面向对象编程（OOP）中使用类和对象的简单指南
- en: '[](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)[![Yasmine
    Hejazi](../Images/1c280c78e49f62345b3cd0c30b185482.png)](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)
    [Yasmine Hejazi](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)[![Yasmine
    Hejazi](../Images/1c280c78e49f62345b3cd0c30b185482.png)](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)
    [Yasmine Hejazi](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)
    ·6 min read·Jan 4, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)
    ·阅读时间 6 分钟·2023年1月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/0dde12a92beeefc82d69df98b05a3724.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0dde12a92beeefc82d69df98b05a3724.png)'
- en: Photo by [Taylor Heery](https://unsplash.com/@taylorheeryphoto?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Taylor Heery](https://unsplash.com/@taylorheeryphoto?utm_source=medium&utm_medium=referral)
    提供的照片，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In Python programming, everything is an object. Variables and even functions
    are objects. **A class is a mold** that creates an object.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 编程中，一切都是对象。变量甚至函数都是对象。**类是一个模具**，用于创建对象。
- en: '*Think of a popsicle tray.* First, you manufacture the popsicle tray to create
    your desired size, shape, and depth; this is the **class**. Then, you can decide
    what to pour into your popsicle tray to freeze — maybe you add water and simply
    make ice, or maybe you add different kinds of fruit and juices to make popsicles.
    Each popsicle you create is an **object**, and objects can have different “data”
    or flavors associated with them.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*想象一个冰棒托盘。* 首先，你制造冰棒托盘以创建你所需的大小、形状和深度；这就是**类**。然后，你可以决定向冰棒托盘中倒入什么来冻结——也许你加入水并简单制作冰块，或者你加入不同种类的水果和果汁制作冰棒。你创建的每个冰棒都是一个**对象**，对象可以有不同的“数据”或口味。'
- en: 'This article will demonstrate with code how to create your own class and use
    it in your Python code. The different components of a class can be broken down
    into the following: constructors, getters and setters, properties, decorators,
    privacy naming, class methods, attributes, and inheritance.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将通过代码演示如何创建自己的类并在 Python 代码中使用它。类的不同组件可以分解为以下内容：构造函数、获取器和设置器、属性、装饰器、私有命名、类方法、属性和继承。
- en: '**When to use a class/object versus a module:**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**何时使用类/对象与模块：**'
- en: Use classes when you need a number of individual instances with similar behavior
    but different data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你需要多个具有类似行为但数据不同的独立实例时使用类
- en: Use classes when you want support for inheritance; modules do not support inheritance
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你需要支持继承时使用类；模块不支持继承
- en: Use a module if you only want one of something
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你只需要一个东西，就使用模块
- en: Use the simplest solution; modules are usually simpler than classes
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最简单的解决方案；模块通常比类更简单
- en: Introduction Example of a Class
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类的介绍示例
- en: 'Below is an example of a simple class. Within the class, we see three components:
    the `__init__` method which is the initialization method, or constructor, a setter
    method called `toss`, and a getter method called `get_sideup`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单类的示例。在这个类中，我们看到三个组件：`__init__` 方法，它是初始化方法或构造函数，一个称为 `toss` 的设置方法，以及一个称为
    `get_sideup` 的获取方法。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How do you use it in your main Python script? In your script, you simply call
    the object and set it to a new variable. Then you can begin to use its components.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在你的主 Python 脚本中使用它？在你的脚本中，你只需调用对象并将其设置为一个新变量。然后你可以开始使用它的组件。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s break it down.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解一下。
- en: Class Components
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类组件
- en: Object Initialization Method
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象初始化方法
- en: When you see a method with the special name `__init__`, you will know that this
    is the object initialization method. This is called the **constructor** because
    it constructs the object in memory. This method is run automatically when you
    create an object of your class.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到一个方法具有特殊名称`__init__`时，你会知道这是对象初始化方法。这被称为**构造函数**，因为它在内存中构造了对象。当你创建类的对象时，这个方法会自动运行。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our `__init__` method above requires an argument called **name**. When we create
    an object using our `Person` class, we should pass a name into the call like:
    `Person("Bob")`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面的 `__init__` 方法需要一个名为**name**的参数。当我们使用 `Person` 类创建对象时，我们应该像这样传入一个名字：`Person("Bob")`。
- en: 'The **self** argument specifies that it refers to the individual object itself.
    Remember that the class is a **mold** and we can use that mold to initialize (and
    then later modify) multiple objects. For example, we can create two objects with
    the `Person` class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**self** 参数指定它指的是对象本身。记住，类是一个**模板**，我们可以使用这个模板来初始化（然后稍后修改）多个对象。例如，我们可以用 `Person`
    类创建两个对象：'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Getters and Setters
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Getter 和 Setter
- en: Some object-oriented languages support private object attributes that can’t
    be accessed directly from the outside. For that reason, you need **getter** and
    **setter** methods to read and write the values of private attributes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一些面向对象语言支持私有对象属性，这些属性不能从外部直接访问。因此，你需要**getter**和**setter**方法来读取和写入私有属性的值。
- en: All attributes and methods in Python are public. We don’t need getters and setters.
    To be “Pythonic”, use **properties**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，所有属性和方法都是公开的。我们不需要 getter 和 setter。为了做到“Pythonic”，使用**属性**。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The last line defines the getter and setter methods as properties of the **name**
    attribute. Now it will call the getter and setter methods in the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行将 getter 和 setter 方法定义为**name**属性的属性。现在它会在以下情况下调用 getter 和 setter 方法：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Decorators
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器
- en: Decorators are another way to define properties (the same thing we did above).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器是另一种定义属性的方法（即我们上面做的事情）。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Privacy Naming
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐私命名
- en: Begin by using two underscores in the name. This makes it so that the attribute
    can’t be accessed outside of the class definition once you create your object.
    This also helps to prevent the accidental overriding of attributes by subclasses.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在名称中使用两个下划线。这使得一旦你创建了对象，属性就无法在类定义外部访问。这也有助于防止子类意外覆盖属性。
- en: In our Duck class, instead of using `hidden_name`, use `__name`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Duck 类中，代替使用 `hidden_name`，使用 `__name`。
- en: '`self.hidden_name = input_name` → `self.__name = input_name`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.hidden_name = input_name` → `self.__name = input_name`'
- en: Class Methods
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类方法
- en: So far, what we’ve been demonstrating have been **instance methods**. How can
    we tell? The first parameter of an instance method is **self**. When you call
    an instance method, the call will only affect the copy of the object you are working
    with.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们演示的都是**实例方法**。我们怎么知道？实例方法的第一个参数是**self**。当你调用实例方法时，调用只会影响你正在使用的对象的副本。
- en: Class methods affect the class as a whole (and therefore all of its copies of
    objects). Instead of the **self** parameter, a class method uses the **cls** parameter.
    A class method can be defined by using the class decorator `@classmethod`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 类方法影响整个类（因此影响所有对象副本）。类方法使用**cls**参数，而不是**self**参数。类方法可以通过使用类装饰器`@classmethod`来定义。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Static methods** are a third type of method that affect neither the class
    nor its objects. It uses no self or cls parameters. It’s just there for convenience.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态方法**是第三种类型的方法，它既不影响类也不影响其对象。它不使用 self 或 cls 参数。它只是为了方便而存在。'
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Attributes
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: 'Instance attributes are the outward behaviors we want the object instances
    to share. A student class may have the attributes:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 实例属性是我们希望对象实例共享的外部行为。一个学生类可能具有以下属性：
- en: 'methods: student.get_gpa(), student.add_class(), student.get_schedule()'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法：student.get_gpa()，student.add_class()，student.get_schedule()
- en: 'data: student.first_name, student.last_name, student.class_list'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据：student.first_name，student.last_name，student.class_list
- en: '`dir(object_instance)` gives you the list of attributes of that object.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`dir(object_instance)` 给你提供该对象的属性列表。'
- en: '`object_instance.__dict__` gives you all the instance attributes specific to
    that instance (and values)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`object_instance.__dict__` 为你提供特定于该实例的所有实例属性（及其值）'
- en: 'A class attribute is an attribute of the class, rather than an attribute of
    an *instance* of a class. This is an attribute that all objects of the class share
    together. Let’s say we want to track that every student is a human:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类属性是类的属性，而不是类的 *实例* 的属性。这是类的所有对象共享的属性。假设我们想跟踪每个学生都是人类：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you want to know more, here is an [overly-thorough guide on Python class
    attributes](https://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多，可以查看这个[关于 Python 类属性的详尽指南](https://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide)。
- en: Inheritance
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: Inheritance allows you to create a hierarchy of classes where a class acquires
    all the properties and behaviors of a parent class. Then you can make your own
    specifications on the child class that is different from the parent.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 继承允许你创建一个类的层次结构，其中一个类继承了父类的所有属性和行为。然后，你可以在子类上进行自己的规格定义，这些定义不同于父类。
- en: For example, we have a parent class `Animal` with the ability to eat and sleep.
    Then we create a child class `Cat` that also takes on the attributes from `Animal`,
    plus its own special attribute.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有一个父类 `Animal`，它具有吃和睡的能力。然后我们创建一个子类 `Cat`，它继承了 `Animal` 的属性，并增加了自己特有的属性。
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: All you need to do is pass the Animal class into Cat. Now the Cat class has
    `eat()` and `sleep()`. You can override the eat or sleep methods on the Cat subclass
    by simply defining the method in Cat. You can override any method using `__init__()`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的就是将 `Animal` 类传递给 `Cat`。现在 `Cat` 类有了 `eat()` 和 `sleep()` 方法。你可以通过在 `Cat`
    中定义方法来覆盖 `eat` 或 `sleep` 方法。你也可以通过 `__init__()` 方法覆盖任何方法。
- en: The child class can add a method that wasn’t in the parent (i.e.; `meow()`).
    The parent will not have this method.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 子类可以添加父类中没有的方法（例如 `meow()`）。父类将不包含此方法。
- en: 'Use `super()` when the child class is doing something on its own but still
    needs something from the parent:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当子类自己做某些事情但仍需要从父类中获取某些内容时，使用 `super()`：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Benefits of inheritance:**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**继承的好处：**'
- en: Allows subclasses to reuse code from the parent
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许子类重用父类的代码
- en: Instead of starting a class from scratch, you can specialize or extend a class
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不必从头开始创建类，你可以专门化或扩展一个类
- en: The parent class can define an interface to allow subclasses to interact with
    a program
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父类可以定义一个接口，以允许子类与程序进行交互
- en: Allows the programmer to organize related objects
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许程序员组织相关对象
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: A class is a mold (popsicle tray) and an object is created from that class (the
    popsicle)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类是一个模具（冰棒托），对象是从该类中创建的（冰棒）
- en: Objects can call instance methods of their class (using self) to receive and
    change their data
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象可以调用其类的实例方法（使用 self）来接收和更改数据
- en: Privacy naming helps to prevent the accidental overriding of attributes by subclasses
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐私命名有助于防止子类意外覆盖属性
- en: Classes themselves have methods (using cls) where you can track and manipulate
    all object instances of that class
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类本身具有方法（使用 cls），你可以跟踪和操作该类的所有对象实例
- en: Inheritance allows us to bring similar classes to scale
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承允许我们扩展相似的类
