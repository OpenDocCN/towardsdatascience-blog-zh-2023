- en: Docker for Data Science
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学中的 Docker
- en: 原文：[https://towardsdatascience.com/from-chaos-to-consistency-docker-for-data-scientists-240372adff18](https://towardsdatascience.com/from-chaos-to-consistency-docker-for-data-scientists-240372adff18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/from-chaos-to-consistency-docker-for-data-scientists-240372adff18](https://towardsdatascience.com/from-chaos-to-consistency-docker-for-data-scientists-240372adff18)
- en: An introduction and application of Docker for Data Scientists
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学家用 Docker 的介绍和应用
- en: '[](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)[](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)[](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)
    ·7 min read·May 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)
    ·阅读时间 7 分钟·2023年5月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b9ddc7ca1478ae7fd299d341e9610337.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9ddc7ca1478ae7fd299d341e9610337.png)'
- en: Photo by [Ian Taylor](https://unsplash.com/@carrier_lost?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Ian Taylor](https://unsplash.com/@carrier_lost?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: But it works on my machine?
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但在我的机器上运行正常？
- en: This is a classic meme in the tech community, especially for Data Scientists
    who want to ship their amazing machine-learning model, only to learn that the
    production machine has a different operating system. Far from ideal.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是技术社区中的经典梗，尤其对于那些想要发布他们惊人的机器学习模型的数据科学家来说，结果却发现生产机器上有不同的操作系统。远非理想。
- en: However…
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而…
- en: There is a solution thanks to these wonderful things called [**containers**](https://www.docker.com/resources/what-container/)
    and tools to control them such as [**Docker**](https://en.wikipedia.org/wiki/Docker_%28software%29)**.**
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了这些被称为[**容器**](https://www.docker.com/resources/what-container/)的奇妙事物和控制它们的工具，如[**Docker**](https://en.wikipedia.org/wiki/Docker_%28software%29)**，**这才有了解决方案。
- en: In this post, we will dive into what containers are and how you can build and
    run them using Docker. The use of containers and Docker has become an industry
    standard and common practice for data products. As a Data Scientist, learning
    these tools is then an invaluable tool in your arsenal.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将深入探讨容器是什么，以及如何使用 Docker 构建和运行它们。容器和 Docker 的使用已成为行业标准和数据产品的常见实践。作为数据科学家，学习这些工具是你武器库中宝贵的工具。
- en: What is Docker?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Docker？
- en: Docker is a service that help build, run and execute code and applications in
    containers.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Docker 是一种服务，可以在容器中构建、运行和执行代码及应用程序。
- en: Now you may be wondering, what is a container?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能在想，什么是容器？
- en: Ostensibly, a container is very similar to a [**virtual machine (VM)**](https://en.wikipedia.org/wiki/Virtual_machine).
    It is a small isolated environment where everything is self ‘contained’ and can
    be run on any machine. The primary selling point of containers and VMs is their
    portability, allowing your application or model to run seamlessly on any on-premise
    server, local machine, or on cloud platforms such as [**AWS**](https://aws.amazon.com/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，容器非常类似于[**虚拟机 (VM)**](https://en.wikipedia.org/wiki/Virtual_machine)。它是一个小型隔离环境，一切都自‘包含’，可以在任何机器上运行。容器和虚拟机的主要卖点是它们的便携性，允许你的应用程序或模型在任何本地服务器、个人计算机或如[**AWS**](https://aws.amazon.com/)这样的云平台上无缝运行。
- en: The main difference between containers and VMs is how they use their hosts computer
    resources. Containers are a lot more lightweight as they do not actively partition
    the hardware resources of the host machine. I will not delve into the full technical
    details here, however if you want to understand a bit more, I have linked a great
    article explaining their differences [here](https://www.freecodecamp.org/news/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 容器和虚拟机之间的主要区别在于它们如何使用主机计算机的资源。容器要轻得多，因为它们不会主动分割主机计算机的硬件资源。我这里不深入探讨所有技术细节，但如果你想了解更多，我在[这里](https://www.freecodecamp.org/news/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b/)链接了一篇很棒的文章解释它们的区别。
- en: Docker is then simply a tool we use to create, manage and run these containers
    with ease. It is one of the main reasons why containers have become very popular,
    as it enables developers to easily deploy applications and models that run anywhere.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 简单来说是我们用来轻松创建、管理和运行这些容器的工具。这是容器变得非常流行的主要原因之一，因为它使开发者能够轻松部署可以在任何地方运行的应用程序和模型。
- en: '![](../Images/248db54f5672b41ad6c9f1deb2b8ee83.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/248db54f5672b41ad6c9f1deb2b8ee83.png)'
- en: Diagram by author.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图示。
- en: Docker Technical Features
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 技术特性
- en: 'There are three main elements we need to run a container using Docker:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行容器所需的三个主要元素是：
- en: '**Dockerfile:** *A text file that contains the instructions of how to build
    a docker. image*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile：** *一个包含如何构建 Docker 镜像的指令的文本文件。*'
- en: '**Docker Image**: *A blueprint or template to create a Docker container.*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 镜像：** *一个创建 Docker 容器的蓝图或模板。*'
- en: '**Docker Container:** *An isolated environment that provides everything an
    application or machine learning model needs to run. Includes things such as dependencies
    and OS versions.*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 容器：** *一个提供应用程序或机器学习模型运行所需的一切的隔离环境。包括依赖项和操作系统版本等。*'
- en: '![](../Images/e10fb19dc6b93ce00b58c6d168f669ed.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e10fb19dc6b93ce00b58c6d168f669ed.png)'
- en: Diagram by author.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图示。
- en: 'There are also a few other key points to note:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他关键点需要注意：
- en: '**Docker Daemon:** *A background process (*[*daemon*](https://en.wikipedia.org/wiki/Daemon_(computing))*)
    that deals with the incoming requests to docker.*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 守护进程：** *一个后台进程（[*守护进程*](https://en.wikipedia.org/wiki/Daemon_(computing))），处理对
    Docker 的传入请求。*'
- en: '**Docker Client:** *A shell interface that enables the user to speak to Docker
    through its daemon.*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 客户端：** *一个允许用户通过其守护进程与 Docker 进行交互的 shell 接口。*'
- en: '[**DockerHub**](https://hub.docker.com/)**:** *Similar to GitHun, a place where
    developers can share their Docker images.*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**DockerHub**](https://hub.docker.com/)**：** *类似于 GitHub，开发者可以在这里分享他们的 Docker
    镜像。*'
- en: Installing Docker
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: Hombrew
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hombrew
- en: The first thing you should install is **Homebrew** ([link here](https://brew.sh/)).
    This is dubbed as the ‘missing package manager for MacOS’ and is very useful for
    anyone coding on their Mac.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先你应该安装的是 **Homebrew** ([link here](https://brew.sh/))。它被称为“MacOS 的缺失包管理器”，对任何在
    Mac 上编码的人都非常有用。
- en: 'To install Homebrew, simply run the command given on their website:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Homebrew，只需运行他们网站上给出的命令：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Verify Homebrew is installed by running `brew help`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`brew help`来验证 Homebrew 是否已安装。
- en: Docker
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: 'Now with Homebrew installed, you can install docker by running `brew install
    docker`. Verify docker is installed by running `which docker` , the output should
    not rise any errors and look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Homebrew 已安装，你可以通过运行`brew install docker`来安装 Docker。通过运行`which docker`来验证
    Docker 是否已安装，输出结果不应出现任何错误，应该如下所示：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Colima
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Colima
- en: 'The final part, is it install [**Colima**](https://github.com/abiosoft/colima)**.**
    Simply, run`install colima` and verify it is installed with `which colima`. Again,
    the output should look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是安装 [**Colima**](https://github.com/abiosoft/colima)**。** 只需运行`install colima`，并通过`which
    colima`验证它是否已安装。再次，输出结果应如下所示：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you might be wondering, what on earth is Colima?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想，Colima 到底是什么？
- en: Colima is a software package that enables [**container runtimes**](https://kubernetes.io/docs/setup/production-environment/container-runtimes/)
    on MacOS. In more laymen terms, Colima creates the environment for containers
    to work on our system. To achieve this, it runs a Linux virtual machine with a
    [**daemon**](https://en.wikipedia.org/wiki/Daemon_(computing)) that Docker can
    communicate with using the [**client-server model**](https://en.wikipedia.org/wiki/Client%E2%80%93server_model).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Colima是一个软件包，能够在MacOS上启用[**容器运行时**](https://kubernetes.io/docs/setup/production-environment/container-runtimes/)。简单来说，Colima为容器在我们的系统上工作创建了环境。为此，它运行一个带有[**守护进程**](https://en.wikipedia.org/wiki/Daemon_(computing))的Linux虚拟机，Docker可以通过[**客户端-服务器模型**](https://en.wikipedia.org/wiki/Client%E2%80%93server_model)与其通信。
- en: 'Alternativetly, you can also install [**Docker desktop**](https://www.docker.com/products/docker-desktop/)
    instead of Colima. However, I prefer Colima for a few reasons: its free, more
    lightweight and I like working in the terminal!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以安装[**Docker桌面版**](https://www.docker.com/products/docker-desktop/)来替代Colima。然而，我更喜欢Colima，原因有几个：它免费、更轻量，而且我喜欢在终端中工作！
- en: See this [blog post here](https://alexpearce.me/2022/07/colima-docker-desktop-replacement/)
    for more arguments for Colima
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有关Colima的更多论点，请查看这个[博客文章](https://alexpearce.me/2022/07/colima-docker-desktop-replacement/)。
- en: Deploying With Docker Example
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker的示例
- en: Workflow
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流
- en: 'Below is an example of how Data Scientists and Machine Learning Engineers can
    deploy their model using Docker:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是数据科学家和机器学习工程师如何使用Docker部署其模型的示例：
- en: '![](../Images/e3c5bb63da7980c4b0e39bfd3298c5ce.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e3c5bb63da7980c4b0e39bfd3298c5ce.png)'
- en: Diagram by author.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的图示。
- en: The first step is obviously to build their amazing model. Then, you need to
    wrap up all the stuff you are using to run the model, stuff like the python version
    and package dependencies. The final step is to use that requirements file inside
    the Dockerfile.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步显然是构建他们的惊人模型。然后，你需要将运行模型所需的所有内容打包起来，比如Python版本和包依赖。最后一步是使用Dockerfile中的requirements文件。
- en: If this seems completely arbitrary to you at the moment don't worry, we will
    go over this process step by step!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在觉得这完全随意，不用担心，我们会一步一步讲解这个过程！
- en: Basic Model
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本模型
- en: 'Let’s start by building a basic model. The provided code snippet displays a
    simple implementation of the [**Random Forest**](https://en.wikipedia.org/wiki/Random_forest)
    classification model on the famous [Iris dataset](https://www.kaggle.com/datasets/uciml/iris):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从构建一个基本模型开始。提供的代码片段展示了在著名的[Iris数据集](https://www.kaggle.com/datasets/uciml/iris)上实现[**随机森林**](https://en.wikipedia.org/wiki/Random_forest)分类模型的简单实现。
- en: '[Dataset from Kaggle with a CC0 licence.](https://www.kaggle.com/datasets/uciml/iris)'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[来自Kaggle的CC0许可数据集。](https://www.kaggle.com/datasets/uciml/iris)'
- en: GitHub Gist by author.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的GitHub Gist。
- en: This file is called `basic_rf_model.py` for reference.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件叫做`basic_rf_model.py`，供参考。
- en: Create Requirements File
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建需求文件
- en: 'Now that we have our model ready, we need to create a `requirement.txt` file
    to house all the dependencies that underpin the running of our model. In this
    simple example, we luckily only rely on the `scikit-learn` package. Therefore,
    our `requirement.txt` will simply look like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了模型，我们需要创建一个`requirement.txt`文件，来容纳支撑我们模型运行的所有依赖。在这个简单的例子中，我们幸运地只依赖于`scikit-learn`包。因此，我们的`requirement.txt`文件看起来会是这样：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can check the version you are running on your computer by the `scikit-learn
    --version` command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`scikit-learn --version`命令检查你计算机上运行的版本。
- en: Create Dockerfile
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Dockerfile
- en: Now we can finally create our Dockerfile!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们终于可以创建我们的Dockerfile了！
- en: 'So, in the same directiory as the `requirement.txt` and `basic_rf_model.py`,
    create a file named `Dockerfile`. Inside `Dockerfile` we will have the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在与`requirement.txt`和`basic_rf_model.py`相同的目录下，创建一个名为`Dockerfile`的文件。在`Dockerfile`中，我们将包含以下内容：
- en: GitHub Gist by author.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的GitHub Gist。
- en: 'Let’s go over line by line to see what it all means:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析，看看这是什么意思：
- en: '`FROM python:3.9`: *This is the base image for our image*'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM python:3.9`：*这是我们镜像的基础镜像*'
- en: '`MAINTAINER egor@some.email.com`: *This indicates who maintains this image*'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAINTAINER egor@some.email.com`：*这表示谁维护这个镜像*'
- en: '`WORKDIR /src`: *Sets the working directory of the image to be src*'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WORKDIR /src`：*将镜像的工作目录设置为src*'
- en: '`COPY . .`: *Copy the current directory files to the Docker directory*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY . .`：*将当前目录的文件复制到Docker目录*'
- en: '`RUN pip install -r requirements.txt`: *Install the requirements from* `requirement.txt`
    *file into the Docker environment*'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUN pip install -r requirements.txt`：*将`requirement.txt`文件中的要求安装到Docker环境中*'
- en: '`CMD ["python", "basic_rf_model.py"]`: *Tells the container to execute the
    command* `python basic_rf_model.py` *and run the model*'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD ["python", "basic_rf_model.py"]`：*告诉容器执行命令* `python basic_rf_model.py`
    *并运行模型*'
- en: Initiate Colima & Docker
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 Colima 和 Docker
- en: 'The next step is setup the Docker environment: First we need to boot up Colima:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置 Docker 环境：首先我们需要启动 Colima：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After Colima has started up, check that the Docker commands are working by
    running:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Colima 启动后，通过运行以下命令检查 Docker 命令是否有效：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It should return something like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该返回类似这样的内容：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is good and means both Colima and Docker are working as expected!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，意味着 Colima 和 Docker 按预期工作！
- en: '**Note**: the `docker ps` command lists all the current running containers.'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**：`docker ps` 命令列出所有当前运行的容器。'
- en: Build Image
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建镜像
- en: 'Now it is time to build our first Docker Image from the `Dockerfile` that we
    created above:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候从我们上面创建的 `Dockerfile` 构建我们的第一个 Docker 镜像了：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-t` flag indicates the name of the image and the `*.*`tells us to build
    from this current directory.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`-t` 标志表示镜像的名称，`*.*` 告诉我们从当前目录构建。'
- en: 'If we now run `docker images`, we should see something like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行`docker images`，我们应该会看到类似这样的内容：
- en: '![](../Images/e614fabc2418cc1e05331aee2b3dce81.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e614fabc2418cc1e05331aee2b3dce81.png)'
- en: Image from author.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: Congrats, the image has been built!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，镜像已构建完成！
- en: Run Container
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行容器
- en: 'After the image has been created, we can run it as a container using the `IMAGE
    ID` listed above:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在镜像创建完成后，我们可以使用上面列出的 `IMAGE ID` 作为容器运行它：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Because all it has done is run the `basic_rf_model.py` script!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它所做的只是运行了`basic_rf_model.py`脚本！
- en: Extra Information
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外信息
- en: This tutorial is just scratching the surface of what Docker can do and be used
    for. There are many more features and commands to learn to understand Docker.
    I great detailed tutorial is given on the Docker website that you can find [here](https://docker-curriculum.com/#docker-run).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程只是触及了 Docker 的基本功能和用途。要真正理解 Docker，还有许多功能和命令需要学习。Docker 网站上提供了一个详细的教程，你可以在[这里](https://docker-curriculum.com/#docker-run)找到。
- en: 'One cool feature is that you can run the container in interactive mode and
    go into its shell. For example, if we run:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很酷的功能是你可以以交互模式运行容器并进入其 shell。例如，如果我们运行：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will enter the Docker container and it should look something like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你将进入 Docker 容器，应该会看到类似这样的内容：
- en: '![](../Images/18257aca7eddeef508e5f81ae6050810.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18257aca7eddeef508e5f81ae6050810.png)'
- en: Image by author.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: We also used the `ls` command to show all the files in the Docker working directory.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`ls`命令来显示 Docker 工作目录中的所有文件。
- en: Summary & Further Thoughts
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与进一步思考
- en: Docker and containers are fantastic tools to ensure Data Scientists’ models
    can run anywhere and anytime with no issues. They do this by creating small isolated
    compute environments that contain everything for the model to run effectively.
    This is called a container. It is easy to use and lightweight, rendering it a
    common industrial practice nowadays. In this article, we went over a basic example
    of how you can package your model into a container using Docker. The process was
    simple and seamless, so is something Data Scientists can learn and pick up quickly.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 和容器是确保数据科学家的模型可以随时随地运行的绝佳工具。它们通过创建包含模型有效运行所需的所有内容的小型隔离计算环境来实现这一点。这被称为容器。它易于使用且轻量化，使其成为如今常见的工业实践。本文介绍了如何使用
    Docker 将模型打包到容器中的基本示例。这个过程简单而无缝，数据科学家可以很快学习和掌握。
- en: 'Full code used in this article can be found at my GitHub here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本文使用的完整代码可以在我的 GitHub 上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/docker-example?source=post_page-----240372adff18--------------------------------)
    [## Medium-Articles/Software Engineering /docker-example at main · egorhowell/Medium-Articles'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/docker-example?source=post_page-----240372adff18--------------------------------)
    [## Medium-Articles/Software Engineering /docker-example at main · egorhowell/Medium-Articles'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你现在无法执行此操作。你在另一个标签页或窗口中登录。你在另一个标签页或窗口中退出了……
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/docker-example?source=post_page-----240372adff18--------------------------------)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/docker-example?source=post_page-----240372adff18--------------------------------)
- en: Another Thing!
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个事项！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的通讯，[**Dishing the Data**](https://dishingthedata.substack.com/)，在其中我每周分享成为更优秀数据科学家的技巧。没有“浮夸”或“点击诱饵”，只有来自实践中的数据科学家的纯粹可操作见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----240372adff18--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://newsletter.egorhowell.com/?source=post_page-----240372adff18--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读由Egor Howell编写的Dishing The Data，一份Substack出版物。
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----240372adff18--------------------------------)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----240372adff18--------------------------------)'
- en: Connect With Me!
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
- en: References & Further Reading
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料与进一步阅读
- en: '*Docker website*: [https://www.docker.com/](https://www.docker.com/)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker 网站*: [https://www.docker.com/](https://www.docker.com/)'
- en: '*Docker tutorial*: [https://docker-curriculum.com/](https://docker-curriculum.com/)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker 教程*: [https://docker-curriculum.com/](https://docker-curriculum.com/)'
- en: '*General tips for Docker*: [https://github.com/veggiemonk/awesome-docker](https://github.com/veggiemonk/awesome-docker)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker 常见技巧*: [https://github.com/veggiemonk/awesome-docker](https://github.com/veggiemonk/awesome-docker)'
