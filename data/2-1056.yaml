- en: Exploring a greedy solution to the stock cutting problem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索解决股票切割问题的贪婪算法
- en: 原文：[https://towardsdatascience.com/how-bad-is-being-greedy-cdec75ce52a6](https://towardsdatascience.com/how-bad-is-being-greedy-cdec75ce52a6)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-bad-is-being-greedy-cdec75ce52a6](https://towardsdatascience.com/how-bad-is-being-greedy-cdec75ce52a6)
- en: Creating a quick estimation to the stock cutting solution
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为股票切割问题创建快速估算
- en: '[](https://medium.com/@jarom.hulet?source=post_page-----cdec75ce52a6--------------------------------)[![Jarom
    Hulet](../Images/0fdeb1a2df90cccdd8f2f4b84d5e54eb.png)](https://medium.com/@jarom.hulet?source=post_page-----cdec75ce52a6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cdec75ce52a6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cdec75ce52a6--------------------------------)
    [Jarom Hulet](https://medium.com/@jarom.hulet?source=post_page-----cdec75ce52a6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jarom.hulet?source=post_page-----cdec75ce52a6--------------------------------)[![Jarom
    Hulet](../Images/0fdeb1a2df90cccdd8f2f4b84d5e54eb.png)](https://medium.com/@jarom.hulet?source=post_page-----cdec75ce52a6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cdec75ce52a6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cdec75ce52a6--------------------------------)
    [Jarom Hulet](https://medium.com/@jarom.hulet?source=post_page-----cdec75ce52a6--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cdec75ce52a6--------------------------------)
    ·7 min read·Aug 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cdec75ce52a6--------------------------------)
    ·7分钟阅读·2023年8月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: Motivation of the stock cutting problem
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 股票切割问题的动机
- en: Quick overview of NP-Hard problems
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NP-Hard问题的快速概述
- en: Encoding the stock cutting problem into Python
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将股票切割问题编码到Python中
- en: The greedy algorithm
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 贪婪算法
- en: Comparison to exhaustive search in low n-space
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与低维空间中的穷举搜索的比较
- en: Comparison to random search in higher n-space
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与随机搜索在更高维空间中的比较
- en: Conclusion
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结论
- en: '**Motivation of the stock cutting problem**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**股票切割问题的动机**'
- en: I’m a data scientist by trade. While my data science skills are very important
    at work (by definition), I find that data science concepts help solve a lot of
    problems outside of work too!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一名数据科学家。虽然我的数据科学技能在工作中非常重要（这很自然），但我发现数据科学概念也帮助解决了许多工作之外的问题！
- en: One of the ways that my DS skills come in handy is in my hobby as a DIYer/maker.
    A common challenge is knowing how to plan for cutting material. I have a list
    of cuts I need to make from multiple pieces of same-sized material from the store.
    How does one plan the cuts in a way to waste as little as possible? This challenge
    is known as the ‘Stock Cutting Problem.’ As it turns out, this can be a really
    hard problem to solve, NP-Hard in fact!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我的数据科学技能在我的DIY爱好中派上了用场。一个常见的挑战是知道如何规划材料的切割。我有一个需要从多个同尺寸材料中切割的清单。如何规划这些切割以尽可能少浪费呢？这个挑战被称为“股票切割问题”。事实证明，这个问题很难解决，实际上是NP-Hard的！
- en: In this article, I’ll explore a ‘short-cut’ (pun intended) to solving this problem
    and analyze how this method compares to the long way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将探索一种“捷径”（双关语）来解决这个问题，并分析这种方法与长途解决方案的比较。
- en: '![](../Images/caa0f14bb735ef86d7b0cb579cd80b61.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/caa0f14bb735ef86d7b0cb579cd80b61.png)'
- en: White oak top, steel base table I made last year — image by author
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我去年制作的白橡木桌面，钢制底座 — 作者图片
- en: '**Quick overview of NP-Hard problems**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**NP-Hard问题的快速概述**'
- en: I’m not going to go into very much depth about NP-Hard problems here, but I
    do want to give some intuition on it. What makes an optimization problem hard
    is typically the size of its solution space. Meaning how many possible solutions
    do you need to explore to find the best one? The difficulty of a problem is usually
    assessed by how fast the solution space grows as the problem size grows.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里深入探讨NP-Hard问题，但我确实想给出一些直观的理解。使优化问题变得困难的通常是其解决方案空间的大小。也就是说，你需要探索多少可能的解决方案才能找到最佳方案？一个问题的难度通常通过问题规模增长时解决方案空间增长的速度来评估。
- en: For the ‘Stock Cutting Problem,’ the problem gets bigger, *much bigger* as you
    add more cuts. See how fast the solution space grows below!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“股票切割问题”，当你增加更多切割时，问题变得*更大*。看看解决方案空间增长的速度吧！
- en: '![](../Images/c73fc6e412c472b7510e0fa48856af55.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c73fc6e412c472b7510e0fa48856af55.png)'
- en: Image by author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: The solution space grows factorially, meaning that the total number of solutions
    that must be searched to be sure of the optimal answer is n!, which as you see,
    gets big really, really fast.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 解空间呈阶乘增长，这意味着必须搜索的解决方案总数是 n!，正如你所看到的，这个数字增长非常快。
- en: NP stands for ‘non-deterministic polynomial,’ which means that the problem grows
    faster than any polynomial function. There are tons of resources that dive deeper
    into the NP/NP-hard problems. This is all I will discuss here.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: NP 代表‘非确定性多项式’，这意味着问题的增长速度快于任何多项式函数。有很多资源深入探讨 NP/NP-hard 问题。这里我只会讨论到这些。
- en: '**Encoding the stock cutting problem into Python**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**将库存切割问题编码为 Python**'
- en: The stock cutting problem essentially boils down to an ordering problem. You
    make the cuts in a specific order, and when you run out of length on a piece of
    stock, you start cutting (still in order) on the next piece of stock.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 库存切割问题本质上是一个排序问题。你按照特定顺序进行切割，当某块库存的长度用完时，你开始在下一块库存上进行切割（仍然按照顺序）。
- en: 'A visualization explains this best. Let’s say we have this order of cuts :
    [4'', 2'', 1'', 2'', 2'', 1''], and we have stock sizes of 5''. The waste calculation
    looks like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化最能解释这一点。假设我们有这个切割顺序：[4', 2', 1', 2', 2', 1']，并且我们有 5' 的库存。浪费计算如下：
- en: '![](../Images/4342c4196943f2f7eb7bda65abdfbcfd.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4342c4196943f2f7eb7bda65abdfbcfd.png)'
- en: Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: Here we have a total waste of 4'.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们总共浪费了 4'。
- en: 'But, if we change the order (keeping all of the same cuts), we can get different
    levels of waste. Let’s try [4'', 1'', 2'', 2'', 1'', 2'']:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们改变顺序（保持所有相同的切割），可能会得到不同的浪费水平。让我们尝试 [4', 1', 2', 2', 1', 2']：
- en: '![](../Images/2628df3b9d055812d911a170c04f4c32.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2628df3b9d055812d911a170c04f4c32.png)'
- en: Image by author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: Here, we only get 3' of waste — simply changing the order reduced our waste!
    This is the whole idea of this optimization problem. We want to find which order
    of the cuts is best.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只有 3' 的浪费——简单地改变顺序就减少了我们的浪费！这就是这个优化问题的核心思想。我们想找出哪种切割顺序最好。
- en: Now, to encode this into a Python script, we need (1) functions to calculate
    the waste of each order, and (2) an algorithm to sort lists into optimal orders.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了将其编码为 Python 脚本，我们需要 (1) 用于计算每个订单浪费的函数，和 (2) 将列表排序为最优顺序的算法。
- en: 'The function to calculate waste just replicates the logic outlined above. Here
    is the Python code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 计算浪费的函数只是复制了上述逻辑。以下是 Python 代码：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’ll cover the algorithm we need in the next section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中介绍所需的算法。
- en: '**The greedy algorithm**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**贪婪算法**'
- en: The greedy algorithm is extremely simple, just find the biggest piece that fits
    on what is left of the current stock you are working on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 贪婪算法非常简单，只需找到适合当前库存剩余部分的最大块。
- en: Using the previous example, we’ll say we want to make these cuts [4', 2', 1',
    2', 2', 1'] and we need a greedy algorithm to optimize the order.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的示例，我们将假设我们想进行这些切割 [4', 2', 1', 2', 2', 1']，并且我们需要一个贪婪算法来优化顺序。
- en: We first start with the longest cut that fits on our current piece of stock.
    Since we haven’t made any cuts, our current stock piece is 5'. 4' is the longest
    cut we have and it fits on a 5' of remaining stock. The next longest cut is 2',
    since we only have 1' of stock left, it is too long. We go to the next longest
    cut, which is 1'. This fits in the remaining stock, so our next cut is 1'. The
    algorithm follows this pattern until there are no more cuts left.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从适合当前库存的最长切割开始。由于我们还没有进行任何切割，我们当前的库存长度是 5'。4' 是我们拥有的最长切割，它适合在 5' 的剩余库存中。下一个最长的切割是
    2'，由于我们只剩下 1' 的库存，这个切割太长了。我们转到下一个最长的切割，即 1'。它适合在剩余库存中，因此我们下一个切割是 1'。该算法按照这种模式进行，直到没有剩余的切割。
- en: 'Here is what that algorithm looks like in Python:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该算法在 Python 中的实现：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Comparison to exhaustive search in low n-space**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**与低维空间穷举搜索的比较**'
- en: We are saving ourselves a ton of time by using an approximation of the optimal
    solution via the greedy algorithm, but how good is that approximation? An exhaustive
    search of the solution space gives the global optimal solution — which is our
    gold standard. Let’s compare the greedy algorithm’s solution to the global optimal
    solutions for scenarios with just a few cuts (remember that to find the global
    optimal with a lot of cuts is really hard).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用贪婪算法的近似解，我们节省了大量时间，但这种近似解有多好？对解空间进行穷举搜索可以得到全局最优解——这是我们的金标准。让我们将贪婪算法的解与仅有少量切割的全局最优解进行比较（记住，找到大量切割的全局最优解确实很困难）。
- en: 'I randomly created 250 cut lists for cut sizes ranging from 2–10 cuts. Each
    cut was between 0 and 1 and the stock size was set to 1.1\. Below is the performance:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我随机创建了250个切割列表，切割尺寸范围从2到10。每个切割的范围是0到1，库存尺寸设置为1.1。以下是性能表现：
- en: '![](../Images/4a00607ae60097207fccb13665eafacd.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a00607ae60097207fccb13665eafacd.png)'
- en: Image by author
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: As you can see, as ’n’ increases, the greedy performance gets worse relative
    to global optimum, but stays relatively close and highly correlated.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，随着'n'的增加，贪婪算法的性能相对于全局最优解变得更差，但仍然相对接近且高度相关。
- en: '**Comparison to random search in higher n-space**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**与高维空间中的随机搜索比较**'
- en: Unfortunately, we have a major blind spot… That is, we don’t know the global
    optimum in higher n-space. Now, we get into the business of comparing different
    types of heuristics (algorithms designed to approximate global optimums). How
    does the greedy algorithm hold up against a random search of the solution space?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们有一个重大的盲点……也就是说，我们不知道在高维空间中的全局最优解。现在，我们进入比较不同类型启发式算法（旨在近似全局最优解的算法）的领域。贪婪算法与随机搜索解空间的效果如何？
- en: '![](../Images/afa9178a5b22b28e3fe9bbc59de50f81.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/afa9178a5b22b28e3fe9bbc59de50f81.png)'
- en: Image by author
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: We can see that, as the number of cuts gets larger, the random search gets much
    worse. This makes sense because the random search is randomly selecting 500 solutions
    and picking the best one — as the solution space explodes, the probability percentage
    of the solution space we randomly search gets smaller and smaller. We now can
    see that the greedy solution is much better than just randomly looking at potential
    solutions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，随着切割数量的增加，随机搜索的效果变得越来越差。这是有道理的，因为随机搜索是在随机选择500个解并挑选最佳的一个——随着解空间的爆炸性增长，我们随机搜索到的解空间的概率百分比越来越小。我们现在可以看到，贪婪解法明显比随机查看潜在解决方案要好。
- en: '**Conclusions**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论**'
- en: It seems that the greedy solution to the stock cutting problem is a reasonable,
    very fast way to find a pretty good solution. For my purposes, this is sufficient.
    I only do a few projects a year and they are typically small. However, for applications
    such as manufacturing plants, more complicated and intensive approaches will likely
    have a significant dollar impact to the company. You can look into ‘mixed integer
    linear programming’ (MILP) which is another way of searching for better optimal
    solutions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来，对于股票切割问题，贪婪解法是一种合理且非常快速的找到相当好解的方法。对我来说，这就足够了。我每年只做几个项目，通常规模较小。然而，对于制造厂等应用，更复杂且密集的方法可能对公司有显著的经济影响。你可以研究一下“混合整数线性规划”（MILP），这是一种寻找更优解的方法。
- en: If I were to go more into depth on this problem, I would compare the greedy
    approach to better meta heuristic algorithms (random search is probably the worst
    one ) such as various versions of hill-climb, tabu search or simulated annealing.
    For now I’ll leave it here however, I have another table to make!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我要深入研究这个问题，我会将贪婪方法与更好的元启发式算法（随机搜索可能是最差的）进行比较，例如各种版本的爬山算法、禁忌搜索或模拟退火。不过现在我就先放到这里，我还有另一个表格要做！
- en: For all of the code used in this article, see this [repo](https://github.com/jaromhulet/stock_cutting.git).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本文中使用的所有代码，请参见这个 [repo](https://github.com/jaromhulet/stock_cutting.git)。
