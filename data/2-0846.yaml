- en: Exploratory Analysis of MEMS Sensor Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MEMS传感器数据的探索性分析
- en: 原文：[https://towardsdatascience.com/exploratory-analysis-of-mems-sensor-data-bbfc0aa0a887](https://towardsdatascience.com/exploratory-analysis-of-mems-sensor-data-bbfc0aa0a887)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/exploratory-analysis-of-mems-sensor-data-bbfc0aa0a887](https://towardsdatascience.com/exploratory-analysis-of-mems-sensor-data-bbfc0aa0a887)
- en: Reading, collecting, and analyzing data from the MPU6050 sensor
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从MPU6050传感器读取、收集和分析数据
- en: '[](https://dmitryelj.medium.com/?source=post_page-----bbfc0aa0a887--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----bbfc0aa0a887--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bbfc0aa0a887--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bbfc0aa0a887--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----bbfc0aa0a887--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dmitryelj.medium.com/?source=post_page-----bbfc0aa0a887--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----bbfc0aa0a887--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bbfc0aa0a887--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bbfc0aa0a887--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----bbfc0aa0a887--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bbfc0aa0a887--------------------------------)
    ·13 min read·Aug 19, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bbfc0aa0a887--------------------------------)
    ·阅读时间13分钟·2023年8月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: MEMS (Micro-electromechanical Systems) sensors are widely used in different
    applications, from game controllers and smartphones to unmanned aerial vehicles.
    In this article, I will show how to connect a gyroscope and accelerometer sensor,
    what kind of data it is possible to get from it, and how this data can be processed
    and visualized.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MEMS（微电机械系统）传感器广泛应用于不同的场景，从游戏控制器和智能手机到无人机。在这篇文章中，我将展示如何连接陀螺仪和加速度计传感器、可以从中获取的数据类型以及如何处理和可视化这些数据。
- en: Let’s get started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Hardware
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件
- en: The MPU-6050 is a 6-axis sensor that combines a 3-axis gyroscope, a 3-axis accelerometer,
    and the I2C interface. As written in the datasheet, it is widely used for tablets
    and smartphones. When our smartphone or smartwatch calculates the steps and calories
    during the workout, the data from MEMS sensors is actually used. But sensors like
    this can be used for more than just sports. I decided to place the sensor in my
    apartment for several days and figure out if I would be able to detect and analyze
    different vibrations in the building where I live.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MPU-6050 是一个6轴传感器，结合了3轴陀螺仪、3轴加速度计和I2C接口。正如数据表中所写，它广泛用于平板电脑和智能手机。当我们的智能手机或智能手表在锻炼时计算步数和卡路里时，实际上使用的是MEMS传感器的数据。但是像这样的传感器不仅仅可以用于运动。我决定将传感器放在我家中几天，看看是否能够检测和分析我所住的建筑物中的各种振动。
- en: 'If we want to collect data within several days, the Raspberry Pi is a good
    solution for that. The Raspberry Pi is a cheap (30–50$) single-board computer;
    it has low power consumption and plenty of pins to connect different types of
    hardware. An MPU-6050 prototyping board can be ordered on Amazon for 3–5$. The
    sensor itself uses the I2C bus for data transfer, and it can be connected to a
    Rasberry Pi using only 4 wires:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在几天内收集数据，Raspberry Pi 是一个很好的解决方案。Raspberry Pi 是一个便宜的（30-50美元）单板计算机；它功耗低，拥有大量引脚来连接不同类型的硬件。可以在亚马逊上以3-5美元的价格订购一个MPU-6050原型板。传感器本身使用I2C总线进行数据传输，只需4根线即可将其连接到Raspberry
    Pi：
- en: '![](../Images/5bdd66a7770cc8248454aa787dd38659.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5bdd66a7770cc8248454aa787dd38659.png)'
- en: Connection diagram, Image by author
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 连接图示，作者提供的图片
- en: 'Before using the sensor, the I2C bus should be enabled on the Raspbian OS (there
    are enough tutorials about how to connect the MPU6050 to the Raspberry Pi, so
    I will skip the “hardware” details here). After connecting the sensor, I created
    a simple Python application that reads the sensor data and writes it “as is” into
    log files:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用传感器之前，应该在Raspbian操作系统上启用I2C总线（关于如何将MPU6050连接到Raspberry Pi的教程足够多，所以我在这里跳过“硬件”细节）。连接传感器后，我创建了一个简单的Python应用程序，读取传感器数据并将其“原样”写入日志文件中：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the “production” scenario, we can send data to a Kafka topic or to any other
    cloud provider, but for the “home” test, it was enough just to run the application
    in the background:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在“生产”场景中，我们可以将数据发送到 Kafka 主题或其他任何云服务提供商，但对于“家庭”测试，只需在后台运行应用程序即可：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After that, we can leave the Raspberry Pi running for several days.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以让 Raspberry Pi 运行几天。
- en: 'As we can see from the code, all log files have a “YYYY-MM-DD” pattern. We
    can download these files from a Raspberry Pi using scp:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码中我们可以看到，所有的日志文件都有一个“YYYY-MM-DD”的模式。我们可以使用 `scp` 从 Raspberry Pi 下载这些文件：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now let’s see what kind of data we can get.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看我们可以获得什么样的数据。
- en: General Insights
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总体见解
- en: 'First, let''s see what the gyroscope and accelerometer data look like. We need
    to include the needed libraries:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看陀螺仪和加速度计的数据是什么样的。我们需要包含所需的库：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let’s load the CSV into the Pandas dataframe and draw it using [Bokeh](https://github.com/bokeh/bokeh):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将 CSV 文件加载到 Pandas 数据框中，并使用 [Bokeh](https://github.com/bokeh/bokeh) 绘制它：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This sample contains the records, collected within 6 seconds, and the values
    look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个样本包含了在 6 秒内收集的记录，数据值如下所示：
- en: '![](../Images/0aacc7fa04821120e12ffb6549f5cd6e.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0aacc7fa04821120e12ffb6549f5cd6e.png)'
- en: 'As we can see, we can get about 60 measurements per second from the sensor.
    Let’s draw the data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们可以从传感器中每秒获得约 60 次测量。让我们绘制数据：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By the way, the Bokeh library is good for plotting data like this. It turned
    out that, at least on my computer, Matplotlib practically “died” when the number
    of points became larger than several thousand. At the same time, Bokeh can handle
    even 1 million records in one graph.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，Bokeh 库非常适合绘制这样的数据。结果是，至少在我的计算机上，当点数超过几千时，Matplotlib 几乎“崩溃”了。与此同时，Bokeh
    可以处理在一个图表中多达 100 万条记录的数据。
- en: 'The output looks like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![](../Images/b13b0125a260bc57e76e1909522ed8ec.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b13b0125a260bc57e76e1909522ed8ec.png)'
- en: Accelerometer and gyroscope data, Image by author
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计和陀螺仪数据，图片来源于作者
- en: It is also important to understand the **difference between a gyroscope and
    an accelerometer**. An accelerometer (top graph) is measuring *static acceleration*,
    including force from the Earth’s gravity. In this example, I was slowly rotating
    the board in my hand, and all three X, Y, and Z axes were proportionally changing.
    A gyroscope measures the *instantaneous momentum* around each axis. This data
    looks like a derivative of the accelerometer data; when the movement starts, there
    is a peak, then the values are going back to zeros.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 了解**陀螺仪和加速度计之间的区别**也很重要。加速度计（上图）测量的是*静态加速度*，包括来自地球重力的作用。在这个例子中，我慢慢地在手中旋转板子，所有三个
    X、Y 和 Z 轴的值都在成比例地变化。陀螺仪测量的是*瞬时动量*，围绕每个轴的旋转。这些数据看起来像是加速度计数据的导数；当运动开始时，会出现一个峰值，然后数值回到零。
- en: 'I was not going to analyze step data in this article, but some readers may
    still be curious about what the **raw sensor data of human steps** looks like:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我原本不打算在本文中分析步态数据，但一些读者可能仍然对**人类步态的原始传感器数据**感兴趣：
- en: '![](../Images/9051362deed907ca4983ac1b3a6330fa.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9051362deed907ca4983ac1b3a6330fa.png)'
- en: Accelerometer and gyroscope data from human steps, Image by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 人类步态的加速度计和陀螺仪数据，图片来源于作者
- en: As we can see, especially on the gyroscope data graph, the pattern is quite
    straightforward to detect. And for the purpose of this article, it is more challenging
    to see if we can detect much slighter variations in the data, like the vibrations
    of the building.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，特别是在陀螺仪数据图中，这种模式很容易检测。为了本文的目的，更具挑战性的是看看我们是否能够检测到数据中更微小的变化，比如建筑物的振动。
- en: Data Analysis
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据分析
- en: In the previous steps, we saw how to make a simple application to collect sensor
    data and got a general insight into what this data looks like. Now, let’s see
    in more detail what interesting patterns can be found. For all further examples,
    I will be using data collected within 24 hours.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们了解了如何制作一个简单的应用程序来收集传感器数据，并对这些数据有了一个大致的了解。现在，让我们更详细地看看可以发现哪些有趣的模式。对于所有后续的示例，我将使用在24小时内收集的数据。
- en: '**1\. Timestamp Accuracy**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 时间戳准确性**'
- en: As a reminder, sensor data was collected using a Python application running
    on a Raspberry Pi. The Raspberry Pi itself is running Linux, which is not a real-time
    OS. First, let’s see the timestamp accuracy we have.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，传感器数据是通过在 Raspberry Pi 上运行的 Python 应用程序收集的。Raspberry Pi 本身运行的是 Linux，而不是实时操作系统。首先，让我们看看我们拥有的时间戳准确性。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'I have collected 5,513,693 records within 24 hours; the total file size is
    about 500 MBytes. As we can see, the average difference between timestamps is
    0.015 s, and the average fps is about 64\. But how consistent is it? Let’s create
    a **histogram of the time difference**:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 24 小时内收集了 5,513,693 条记录；总文件大小约为 500 MBytes。正如我们所见，时间戳之间的平均差异为 0.015 秒，平均
    fps 约为 64。它的稳定性如何？让我们创建一个**时间差直方图**：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can see that indeed, Raspbian is not an RTOS, but the accuracy is good enough
    for our task:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，Raspbian 确实不是一个实时操作系统，但其准确性足够满足我们的任务：
- en: '![](../Images/4558ed1d4e204f756be53443a231307b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4558ed1d4e204f756be53443a231307b.png)'
- en: Timestamps difference in milliseconds, Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳差异（毫秒），图片由作者提供
- en: 5,349,277 records (more than 70%) have about 0,015 s (15 ms) of delay, and only
    less than 50 records (0.001%) have intervals longer than 0,01 s (100 ms).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 5,349,277 条记录（超过 70%）具有约 0.015 秒（15 毫秒）的延迟，只有不到 50 条记录（0.001%）的间隔长于 0.01 秒（100
    毫秒）。
- en: '**2\. Sonogram**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 声谱图**'
- en: 'Let‘s go to the more fun stuff. We obviously cannot analyze 5 million records
    with the naked eye. Let’s build a sonogram, which will allow us to see if there
    are some anomalies in the frequency domain:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看更有趣的部分。显然，我们无法用肉眼分析 500 万条记录。让我们建立一个声谱图，以便查看频率域中是否存在一些异常：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The sonogram is based on the Fast Fourier Transform (FFT), which converts the
    values from a “time-based” domain to a “frequency” domain. The maximum frequency
    on the sonogram is about 30 Hz, which is equal to half of the sampling rate according
    to Nyquist’s theorem. Doing the calculations manually may require a lot of work,
    but Matplotlib’s “*specgram”* method does it all for us. The result looks like
    this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 声谱图基于快速傅里叶变换（FFT），将值从“时间域”转换为“频率域”。声谱图上的最大频率约为 30 Hz，根据奈奎斯特定理，这相当于采样率的一半。手动计算可能需要很多工作，但
    Matplotlib 的“*specgram*”方法为我们完成了所有工作。结果如下：
- en: '![](../Images/7bbf2f08a6327c4b141dc631c2caedbf.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7bbf2f08a6327c4b141dc631c2caedbf.png)'
- en: Sonogram of the sensor data, Image by author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器数据的声谱图，图片由作者提供
- en: As we can see, there are some spots on the graph, but the building where I live
    has no clearly visible resonant frequencies. But for other types of construction
    (motors, machines, bridges, etc.), this type of analysis can be useful.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，图表上有一些斑点，但我居住的建筑物没有明显的共振频率。但对于其他类型的建筑（电动机、机器、桥梁等），这种类型的分析可能很有用。
- en: '**3\. Heatmap**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 热图**'
- en: If we want to find some patterns in the vibration data, it makes sense to see
    the signal amplitude on the timeline. But there are too many records, and plotting
    them on one line will not be effective. In this case, the heatmap will be much
    better.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在振动数据中找到一些模式，查看时间轴上的信号幅度是有意义的。但记录太多，将它们绘制在一条线上效果不好。在这种情况下，热图会更好。
- en: 'To make the heatmap, I preprocessed the data using three steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作热图，我使用了三个步骤来预处理数据：
- en: 'Normalization. I extracted the mean and took the absolute value:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 归一化。我提取了均值并取了绝对值：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Taking the maximum for the rolling period. This part is a bit more tricky.
    In the vibration data, short 1–2 s peaks can occur. Such small peaks will not
    be visible on the 24-hour timeline, so I decided to take a “rolling maximum” using
    this code:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对滚动周期取最大值。这部分稍微复杂一些。在振动数据中，可能会出现短暂的 1–2 秒峰值。这些小峰值在 24 小时时间轴上不可见，所以我决定使用以下代码进行“滚动最大值”处理：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Practically, it looks like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，它看起来是这样的：
- en: '![](../Images/c3d2a4edbe88227dfd9362031a467d75.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3d2a4edbe88227dfd9362031a467d75.png)'
- en: Data processing example, Image by author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理示例，图片由作者提供
- en: In this example, I set the number of samples for rolling to 400\. Instead of
    a short (violet) peak, we will have a much bigger spot on the heatmap.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将滚动的样本数设置为400。我们将有一个比短小（紫色）峰值更大的点在热图上。
- en: 'The heatmap itself can be displayed using the “heatmap” method in Seaborn.
    The full code with preprocessing and drawing is presented below:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 热图本身可以使用 Seaborn 的“heatmap”方法来显示。下面是包括预处理和绘制的完整代码：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The final image looks like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最终图像如下：
- en: '![](../Images/2b9cd32d7347cc0a6701a6aa6b73304e.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b9cd32d7347cc0a6701a6aa6b73304e.png)'
- en: MPU6050 vibration data heatmap, Image by author
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: MPU6050 振动数据热图，图片由作者提供
- en: As we can see, getting all 24-hour data in one image is much more “explanatory”.
    For example, we can easily see the vibrations from the transport, which occurred
    in the morning at 9 a.m. and in the evening between 4 and 6 p.m.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，将所有24小时的数据放在一张图中更加“说明性”。例如，我们可以很容易地看到交通振动，它发生在早上9点和下午4点到6点之间。
- en: I did not implement brightness adjustment; it can be changed manually in the
    code by tuning the parameters *vmin* and *vmax* of the *sns.heatmap* call. The
    data itself has no gaps, and processing of the missing values is not implemented
    here.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有实现亮度调整；可以通过调整 *sns.heatmap* 调用的 *vmin* 和 *vmax* 参数在代码中手动更改。数据本身没有缺口，缺失值的处理在这里没有实现。
- en: '**4\. Anomalies Detection**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 异常检测**'
- en: On the heatmap, we can see some interesting patterns, like the vibration caused
    by transport in the evening time. And we can also see some bright white spots
    — it is interesting to know what is it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在热图上，我们可以看到一些有趣的模式，比如晚间交通造成的振动。我们还可以看到一些明亮的白点——有趣的是知道它是什么。
- en: To detect such “anomalies”, we will try two approaches. First, we can just find
    the data that is bigger than a threshold. As a second approach, we can use ready-to-use
    libraries like Python Outlier Detection (PyOD). Let’s test both!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测这些“异常”，我们将尝试两种方法。首先，我们可以直接找到大于阈值的数据。作为第二种方法，我们可以使用像 Python Outlier Detection
    (PyOD) 这样的现成库。让我们测试一下这两种方法！
- en: '**Filtering with a threshold** is straightforward. As a threshold, I selected
    a large value (7 standard deviations), so the probability of getting such levels
    of vibration by chance is minuscule. As for filtering itself, Pandas already have
    all the needed methods:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于阈值的过滤** 是直接的。作为阈值，我选择了一个大值（7 个标准差），因此随机获得这种振动水平的概率极小。至于过滤本身，Pandas 已经拥有所有需要的方法：'
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As an output, we get array indexes. But some of the items are too close; for
    example, indexes 3065854 and 3065855 definitely represent the same event. To filter
    the array, I created a helper method to remove redundant items:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为数组索引。但有些项目过于接近；例如，索引 3065854 和 3065855 确实表示相同的事件。为了过滤数组，我创建了一个辅助方法来删除冗余项目：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here the parameter “num_samples” is used as a criterion; all array items closer
    than this value will be removed from the list.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数“num_samples”用作标准；所有接近此值的数组项将从列表中删除。
- en: 'Now, we can show results with Bokeh:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 Bokeh 显示结果：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output looks like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![](../Images/4a8e37e52b1c34d86629149f025f7fe3.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a8e37e52b1c34d86629149f025f7fe3.png)'
- en: Anomalies, detected by a threshold, Image by author
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由阈值检测到的异常，图像由作者提供
- en: As the last step of this article, let’s find anomalies using the [**Python Outlier
    Detection (PyOD)**](https://github.com/yzhao062/pyod) library. This library has
    more than 40 algorithms implemented; I will show one of them just to give readers
    an idea of how it works. I will be using a proximity-based KNN (k Nearest Neighbors)
    algorithm, which uses the distance to the kth nearest neighbor as the outlier
    score.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本文的最后一步，让我们使用 [**Python Outlier Detection (PyOD)**](https://github.com/yzhao062/pyod)
    库来寻找异常。这个库实现了40多种算法；我将展示其中之一，仅仅是为了让读者了解其工作原理。我将使用基于邻近的 KNN（k 最近邻）算法，它使用到第 k 个最近邻的距离作为异常值评分。
- en: 'First, we need to fit the algorithm using some data. To do this, I’ve used
    one of the indexes that were found before:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用一些数据来拟合算法。为此，我使用了之前找到的一个索引：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As we can see, there are two major differences between using PyOD and my “naive”
    approach. First, PyOD can analyze *multivariate data*, so we can use all three
    axes from the sensor. Second, based on our domain knowledge, we need to specify
    a *contamination* rate. I was looking for very rare and short events, which can
    occur once every several hours, so I put this value at 0.0001.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，使用 PyOD 和我的“天真”方法之间有两个主要区别。首先，PyOD 可以分析 *多变量数据*，因此我们可以使用传感器的所有三个轴。其次，根据我们的领域知识，我们需要指定一个
    *污染* 率。我在寻找非常罕见且短暂的事件，这些事件可能每几个小时发生一次，因此我将此值设置为 0.0001。
- en: 'When the detector is trained, we can simply use a “predict” method to process
    another set of data and get the results:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测器训练完成后，我们可以简单地使用“predict”方法来处理另一组数据并获取结果：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To see the results in a visual form, let’s draw inputs and predictions on the
    same graph:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以可视化形式查看结果，让我们在同一图表上绘制输入和预测：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here the red, green, and blue lines are representing the sensor data, and the
    gray line is a prediction result, the small peaks are showing indexes where the
    outliers were detected:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的红色、绿色和蓝色线条表示传感器数据，灰色线条是预测结果，小的峰值显示了检测到异常值的索引：
- en: '![](../Images/28d6d5fea3251434d25c664b76741c87.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28d6d5fea3251434d25c664b76741c87.png)'
- en: Anomaly detection with PyOD, Image by author
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 异常检测与PyOD，作者提供的图片
- en: It works. And as was written before, there are [more than 40 algorithms](https://github.com/yzhao062/pyod#implemented-algorithms)
    available in PyOD. Readers who wish are welcome to test others on their own. If
    someone would like to test them on the same dataset, write in the comments below,
    and I will share a temporary link.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效。正如之前所述，PyOD中有 [40多种算法](https://github.com/yzhao062/pyod#implemented-algorithms)可供使用。欢迎有兴趣的读者自行测试其他算法。如果有人希望在相同的数据集上测试这些算法，请在下方评论，我会分享一个临时链接。
- en: Conclusion
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I explained how to connect the MPU6050 MEMS sensor to a Raspberry
    Pi single-board computer and collect vibration data from a building within several
    days. Then we analyzed this data in different ways, like drawing raw data on a
    timeline and on a heatmap, building a sonogram in the frequency domain, and applying
    an anomaly detection algorithm. This can be interesting for the research of the
    modern urban environment; for example, the vibrations caused by traffic were clearly
    visible on the graph (I was actually surprised that the MPU6050, which was designed
    mostly for smartphones and game controllers, can reliably detect such slight vibrations).
    It can even be possible to detect rare events like earthquakes, though for such
    events, having data from at least two places would be more reliable. Analysis
    of vibrations can also be useful to predict failures in machines like motors or
    turbines. The number of possible applications is actually large.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我解释了如何将MPU6050 MEMS传感器连接到树莓派单板计算机，并在几天内收集来自建筑物的振动数据。然后我们以不同的方式分析了这些数据，比如在时间轴和热图上绘制原始数据、在频域中构建声谱图，并应用异常检测算法。这对于现代城市环境的研究可能很有趣；例如，交通引起的振动在图表上非常明显（我实际上很惊讶MPU6050，这个传感器主要设计用于智能手机和游戏控制器，竟然能可靠地检测到如此微小的振动）。甚至有可能检测到如地震这样的稀有事件，尽管对于这种事件，拥有至少两个地点的数据会更可靠。振动分析也可以用于预测机器如电动机或涡轮机的故障。实际应用的可能性非常大。
- en: In general, it was interesting to make this experiment and to work with the
    “real” hardware and its data. Alas, I must admit that the number of articles and
    posts about data science and data analysis in hardware and IoT is minuscule, not
    only on TDS but also on other websites. I hope this story can change this disproportion
    a bit and show readers that working with hardware can be fun.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，进行这个实验以及使用“真实”硬件和其数据是很有趣的。遗憾的是，我必须承认关于硬件和物联网中的数据科学和数据分析的文章和帖子数量微乎其微，不仅在TDS上如此，在其他网站上也是如此。我希望这个故事能稍微改变这种不平衡，向读者展示与硬件打交道也可以很有趣。
- en: Thanks for reading. If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这个故事，欢迎 [订阅](https://medium.com/@dmitryelj/membership) Medium，你将会收到我新文章发布的通知，并且可以完全访问来自其他作者的成千上万的故事。
