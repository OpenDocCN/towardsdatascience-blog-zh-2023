- en: Continuous Integration and Deployment for Data Platforms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据平台的持续集成和部署
- en: 原文：[https://towardsdatascience.com/continuous-integration-and-deployment-for-data-platforms-817bf1b6bed1](https://towardsdatascience.com/continuous-integration-and-deployment-for-data-platforms-817bf1b6bed1)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/continuous-integration-and-deployment-for-data-platforms-817bf1b6bed1](https://towardsdatascience.com/continuous-integration-and-deployment-for-data-platforms-817bf1b6bed1)
- en: CI/CD for data engineers and ML Ops
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据工程师和机器学习操作的CI/CD
- en: '[](https://mshakhomirov.medium.com/?source=post_page-----817bf1b6bed1--------------------------------)[![💡Mike
    Shakhomirov](../Images/bc6895c7face3244d488feb97ba0f68e.png)](https://mshakhomirov.medium.com/?source=post_page-----817bf1b6bed1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----817bf1b6bed1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----817bf1b6bed1--------------------------------)
    [💡Mike Shakhomirov](https://mshakhomirov.medium.com/?source=post_page-----817bf1b6bed1--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mshakhomirov.medium.com/?source=post_page-----817bf1b6bed1--------------------------------)[![💡Mike
    Shakhomirov](../Images/bc6895c7face3244d488feb97ba0f68e.png)](https://mshakhomirov.medium.com/?source=post_page-----817bf1b6bed1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----817bf1b6bed1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----817bf1b6bed1--------------------------------)
    [💡Mike Shakhomirov](https://mshakhomirov.medium.com/?source=post_page-----817bf1b6bed1--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----817bf1b6bed1--------------------------------)
    ·9 min read·Apr 14, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----817bf1b6bed1--------------------------------)
    ·阅读时间9分钟·2023年4月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/fd7ac2298a3ebce9921e027ae8163cd9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd7ac2298a3ebce9921e027ae8163cd9.png)'
- en: Photo by [Emmy Sobieski](https://unsplash.com/@emmy_s?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Emmy Sobieski](https://unsplash.com/@emmy_s?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: What is a data environment? Data engineers split infrastructure resources into
    live and staging to create isolated areas (environments) where they can test ETL
    services and data pipelines before promoting them to production.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是数据环境？数据工程师将基础设施资源分为实时和暂存，以创建隔离的区域（环境），在这些区域中，他们可以测试ETL服务和数据管道，然后再将其推广到生产环境中。
- en: '**Data environment** refers to a set of applications and related physical infrastructure
    resources that enable data storage, transfer, processing and data transformation
    to support company goals and objectives.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据环境** 指的是一组应用程序和相关的物理基础设施资源，这些资源支持数据存储、传输、处理和数据转换，以支持公司的目标和计划。'
- en: '**This story** providesan **overview of CI/CD tech** available for data and
    a **working example** of a simple **ETL** service built in **Python** and deployed
    with **Infrastructure as code** (IaC) using **Github Actions**.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**这个故事** 提供了 **适用于数据的CI/CD技术概述** 和一个简单的 **ETL** 服务的 **工作示例**，该服务使用 **Python**
    构建，并通过 **Github Actions** 以 **基础设施即代码**（IaC）进行部署。'
- en: Continuous integration and continuous delivery (CI/CD)
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成和持续交付（CI/CD）
- en: Continuous integration and continuous delivery (CI/CD) is a software development
    strategy in which all developers collaborate on a common repository of code, and
    when changes are made, an automated build process is used to discover any potential
    code problems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成和持续交付（CI/CD）是一种软件开发策略，所有开发人员在一个共同的代码仓库上协作，当做出更改时，会使用自动化构建过程来发现任何潜在的代码问题。
- en: '![](../Images/6a68cf39e925c7b6f79982657c32ab9f.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a68cf39e925c7b6f79982657c32ab9f.png)'
- en: Image by author
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: CI/CD benefits
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD的好处
- en: One of the primary technical advantages of CI/CD is that it improves overall
    code quality and saves time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD的主要技术优势之一是它提高了整体代码质量并节省了时间。
- en: Automated CI/CD pipelines using Infrastructure as Code solve a lot of problems.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用基础设施即代码的自动化CI/CD管道解决了许多问题。
- en: '[](https://levelup.gitconnected.com/infrastructure-as-code-for-beginners-a4e36c805316?source=post_page-----817bf1b6bed1--------------------------------)
    [## Infrastructure as Code for Beginners'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://levelup.gitconnected.com/infrastructure-as-code-for-beginners-a4e36c805316?source=post_page-----817bf1b6bed1--------------------------------)
    [## 初学者的基础设施即代码'
- en: Deploy Data Pipelines like a pro with these templates
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用这些模板像专业人士一样部署数据管道
- en: levelup.gitconnected.com](https://levelup.gitconnected.com/infrastructure-as-code-for-beginners-a4e36c805316?source=post_page-----817bf1b6bed1--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[levelup.gitconnected.com](https://levelup.gitconnected.com/infrastructure-as-code-for-beginners-a4e36c805316?source=post_page-----817bf1b6bed1--------------------------------)'
- en: '**Deliver faster**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**更快交付**'
- en: Adding new features numerous times each day is not an easy task. But, if we
    have a simplified CI/CD workflow, it is definitely achievable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每天多次添加新功能并不是一件容易的任务。然而，如果我们拥有简化的CI/CD工作流，这绝对是可以实现的。
- en: Using CI/CD tools such as GoCD, Code Pipeline, Docker, Kubernetes, Circle CI,
    Travis CI, etc. dev teams now can build, test, and deploy things independently
    and automatically.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CI/CD工具，如GoCD、Code Pipeline、Docker、Kubernetes、Circle CI、Travis CI等，开发团队现在可以独立且自动地构建、测试和部署。
- en: '**Reduce errors**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**减少错误**'
- en: Finding and resolving code issues late in the development process is time-consuming
    and, therefore, expensive. When features with errors being released to production,
    this becomes even more important.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中晚些时候发现和解决代码问题是费时且昂贵的。当功能出现错误并发布到生产环境时，这变得尤为重要。
- en: By testing and deploying code more often using a CI/CD pipeline, testers will
    be able to see problems as soon as they arise and correct them right away. This
    helps to mitigate risks in real time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用CI/CD管道更频繁地测试和部署代码，测试人员将能够及时发现问题并立即进行修复。这有助于实时降低风险。
- en: '**Less manual effort and more transparency**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**减少人工干预和提高透明度**'
- en: Tests should run automatically for new code features to ensure that neither
    the new code nor the new features damage any already-existing features. We would
    want to get regular updates and information regarding the development, test, and
    deployment circles throughout this process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应自动运行，以确保新代码或新功能不会损坏任何已有功能。在整个过程中，我们希望获得有关开发、测试和部署周期的定期更新和信息。
- en: '**Easy rollbacks**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**轻松回滚**'
- en: To prevent downtime in production, the most recent successful build is normally
    deployed immediately if something is wrong with our new release or feature. This
    is another greate CI/CD feature that enables easy rollbacks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止生产环境的停机，如果新发布或功能出现问题，通常会立即部署最近一次成功的构建。这是另一个出色的CI/CD功能，便于轻松回滚。
- en: '**Extensive logs**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**详尽的日志**'
- en: Knowing the deployement process is essential. Undestanding why our code fails
    is even more important. One of the most important parts of DevOps and CI/CD integration
    is observability. Being able to read extensive logs for our builds is definitely
    a must have function.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 了解部署过程至关重要。了解代码为何失败则更为重要。DevOps和CI/CD集成中最重要的部分之一是可观察性。能够阅读我们构建的详尽日志绝对是必备功能。
- en: When do we use CI/CD for data platforms?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们什么时候使用CI/CD来处理数据平台？
- en: '**Managing data resources and infrastructure**: With CI/CD techniques and tools
    we can provision, deploy and manage the infrastructure resources we might need
    for data pipelines, i.e. Cloud Storage buckets, Serverless microservices to perform
    ETL tasks, event streams and queues. Tools like AWS Cloudformation and Terraform
    can manage infrastructure with ease to provision resources for tests, staging
    and live environments.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**管理数据资源和基础设施**：通过CI/CD技术和工具，我们可以配置、部署和管理我们可能需要的数据管道基础设施资源，例如云存储桶、无服务器微服务以执行ETL任务、事件流和队列。像AWS
    Cloudformation和Terraform这样的工具可以轻松管理基础设施，为测试、预发布和生产环境提供资源。'
- en: '**SQL unit testing**: CI/CD helps with data transformation. If we have a data
    pipeline that transforms data in ELT pattern we can automate SQL unit tests to
    test the logic behind it. A good example would be a GitHub Actions workflow that
    compiles our SQL scripts and runs unit tests.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL单元测试**：CI/CD有助于数据转换。如果我们有一个以ELT模式转换数据的数据管道，我们可以自动化SQL单元测试以测试其背后的逻辑。一个好的例子是GitHub
    Actions工作流，它编译我们的SQL脚本并运行单元测试。'
- en: '[](/unit-tests-for-sql-scripts-with-dependencies-in-dataform-847133b803b7?source=post_page-----817bf1b6bed1--------------------------------)
    [## Unit Tests for SQL Scripts with Dependencies in Dataform'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/unit-tests-for-sql-scripts-with-dependencies-in-dataform-847133b803b7?source=post_page-----817bf1b6bed1--------------------------------)
    [## SQL脚本的单元测试及其依赖项'
- en: and Data warehouse Gitflow pipelines to run it automatically
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以及数据仓库Gitflow管道来自动运行
- en: towardsdatascience.com](/unit-tests-for-sql-scripts-with-dependencies-in-dataform-847133b803b7?source=post_page-----817bf1b6bed1--------------------------------)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/unit-tests-for-sql-scripts-with-dependencies-in-dataform-847133b803b7?source=post_page-----817bf1b6bed1--------------------------------)'
- en: '**Validating ETL processes**: Many data pipelines rely heavily on ETL (Extract,
    Transform, Load) operations. We would want to ensure that any changes we commit
    to our GitHub repository do the right job with the data. This can be achieved
    by implementing automated **integration testing**. Here is a simple example of
    how to do it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**验证ETL过程**：许多数据管道严重依赖ETL（提取、转换、加载）操作。我们希望确保任何提交到GitHub代码库的更改都能正确处理数据。这可以通过实施自动化**集成测试**来实现。以下是一个简单的实现示例：'
- en: '[](https://mydataschool.com/blog/data-platform-unit-and-integration-tests-explained/?source=post_page-----817bf1b6bed1--------------------------------)
    [## Data Platform Unit and Integration Tests Explained'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mydataschool.com/blog/data-platform-unit-and-integration-tests-explained/?source=post_page-----817bf1b6bed1--------------------------------)
    [## 数据平台单元和集成测试解释'
- en: How to do this exercise and how to apply it to our data pipelines? This is a
    good question I asked myself at the very…
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何进行这个练习以及如何将其应用到我们的数据管道中？这是我自己提出的一个好问题。
- en: mydataschool.com](https://mydataschool.com/blog/data-platform-unit-and-integration-tests-explained/?source=post_page-----817bf1b6bed1--------------------------------)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: mydataschool.com](https://mydataschool.com/blog/data-platform-unit-and-integration-tests-explained/?source=post_page-----817bf1b6bed1--------------------------------)
- en: '**Monitoring data pipelines**. A great example would be using CI/CD and Infrastructure
    as Code to provision Notification Topics and Alarms for ETL resources, i.e. Lambda,
    etc. We can receive notifications via selected channels if something goes wrong
    with our ETL processing service, for instance, if the number of errors reaches
    the threshold. Here is an AWS Cloudformation example of how to do it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**监控数据管道**。一个很好的例子是使用CI/CD和基础设施即代码来配置通知主题和警报，用于ETL资源，例如Lambda等。如果我们的ETL处理服务出现问题，例如错误数量达到阈值，我们可以通过选定的渠道接收通知。以下是一个AWS
    Cloudformation示例：'
- en: How to set up a CI/CD pipeline for a data platform?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何为数据平台设置CI/CD管道？
- en: '![](../Images/947060c560a5af8a23c8a169682d229f.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/947060c560a5af8a23c8a169682d229f.png)'
- en: Sample CI/CD pipeline. Image by author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例CI/CD管道。作者提供的图像。
- en: '**Step 1\. Create a repository**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1\. 创建一个代码库**'
- en: This is a fundamental step. A version control system is required. We would want
    to ensure that every change in our code is version controlled, saved somewhere
    in the cloud and can be reverted if needed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基础步骤。需要一个版本控制系统。我们希望确保我们代码中的每个更改都进行版本控制，保存到云端，并且在需要时可以恢复。
- en: '**Step 2\. Add build step**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2\. 添加构建步骤**'
- en: 'Now when we have a repository we can configure our CI/CD pipeline to actually
    build the project. Imagine, we have an ETL microservice that loads data from AWS
    S3 into a data warehouse. This step would involve building a Lambda package in
    the isolated local environment, i.e. in Github. During this step, CI/CD service
    must be able to collect all required code packages to compile our service. For
    example, if we have a simple AWS Lambda to perform an ETL task then we would want
    to build the package:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们有了代码库后，我们可以配置CI/CD管道来实际构建项目。假设我们有一个ETL微服务，它从AWS S3加载数据到数据仓库。此步骤将涉及在隔离的本地环境中构建Lambda包，即在Github中。在此步骤中，CI/CD服务必须能够收集所有所需的代码包来编译我们的服务。例如，如果我们有一个简单的AWS
    Lambda来执行ETL任务，我们将需要构建这个包：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Step 3\. Run tests**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3\. 运行测试**'
- en: We would want to ensure that the changes we deploy for our data pipeline work
    as expected. This can be achieved by writing good unit and integration tests.
    Then we would configure our CI/CD pipeline to run them, for example, every time
    we commit the changes or merge into the master branch. For instance, we can configure
    Gitflow Actions to run a `**pytest test.py**` or `**npm run test**` for our **AWS
    Lambda**. If tests are successful we can proceed to the next step.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望确保我们部署的数据管道的更改按预期工作。这可以通过编写良好的单元测试和集成测试来实现。然后，我们将配置我们的CI/CD管道来运行这些测试，例如，每次我们提交更改或合并到主分支时。举例来说，我们可以配置Gitflow
    Actions来运行`**pytest test.py**`或`**npm run test**`来测试我们的**AWS Lambda**。如果测试成功，我们可以进行下一步。
- en: '**Step 4\. Deploy staging**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 4\. 部署到预发布环境**'
- en: In this step, we continue to implement Continuous Integration. We have a successful
    build for our project and all tests have been passed and now we would want to
    deploy in the staging environment. By environment we mean resources. CI/CD pipeline
    can be configured to use settings relevant to this particular environment using
    Infrastructure as code and finally deploy.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们继续实现持续集成。我们的项目已经成功构建，所有测试都通过了，现在我们希望在暂存环境中部署。这里的环境指的是资源。CI/CD管道可以配置为使用与此特定环境相关的设置，通过基础设施即代码进行最终部署。
- en: '**Example for Lambda**. This bash script can be added to a relevant step of
    CI/CD pipeline:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lambda示例**。此bash脚本可以添加到CI/CD管道的相关步骤中：'
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Step 5\. Deploy live**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤5\. 部署到生产环境**'
- en: This is the final step and typically it is **triggered manually** when we are
    100% sure everything is okay.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是最后一步，通常在我们100%确认一切正常时**手动触发**。
- en: '![](../Images/bd47c202a438ad7702541056d3c7309a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd47c202a438ad7702541056d3c7309a.png)'
- en: Image by author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: CI/CD would use IaC settings for the production environment. For instance, we
    might want to provide any infrastructure resources relevant only for production,
    i.e. our Lambda function name should be `pipeline-manager-live`. These resource
    parameters and configuration settings must be mentioned in our Cloudformation
    stack file. For example, we might want our **ETL Lambda to be triggered by Cloudwatch
    event from S3 bucket every time a new S3 object is created there.** In this case,
    we would want to provide the name of this S3 bucket in the parameters. Another
    example would be our Lambda settings such **as memory and timeout**. There is
    no need to over-provision memory for staging service but on live we would want
    it to be able to process larger amounts of data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD将使用用于生产环境的IaC设置。例如，我们可能希望提供仅与生产相关的任何基础设施资源，即我们的Lambda函数名称应为`pipeline-manager-live`。这些资源参数和配置设置必须在我们的Cloudformation堆栈文件中提及。例如，我们可能希望我们的**ETL
    Lambda由S3桶中的Cloudwatch事件触发，每当创建新S3对象时**。在这种情况下，我们需要在参数中提供此S3桶的名称。另一个例子是我们的Lambda设置**如内存和超时**。对于暂存服务，不需要过度配置内存，但在生产环境中，我们希望它能够处理更大的数据量。
- en: 'CI/CD Live step example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD生产环境步骤示例：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/e826dcbc72527e8cd4db0bc311fced24.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e826dcbc72527e8cd4db0bc311fced24.png)'
- en: Image by author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Rollbacks, version control and security can be handled via CI/CD service settings
    and IaC.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 回滚、版本控制和安全性可以通过CI/CD服务设置和IaC来处理。
- en: CI/CD pipeline example with infrastructure as code and AWS Lambda
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有基础设施即代码和AWS Lambda的CI/CD管道示例
- en: Let’s imagine we have a typical repo with some ETL service (AWS Lambda) being
    deployed with AWS Cloudformation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个典型的代码库，其中一些ETL服务（AWS Lambda）通过AWS Cloudformation进行部署。
- en: That can be a data pipeline manager application or something else to perform
    ETL tasks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以是一个数据管道管理应用程序或其他执行ETL任务的工具。
- en: 'Our repo folder structure will be the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码库文件夹结构如下：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will define our CI/CD pipeline with **deploy_staging.yaml** and **deploy_live.yaml**
    in .github/workflows folder.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在.github/workflows文件夹中使用**deploy_staging.yaml**和**deploy_live.yaml**来定义我们的CI/CD管道。
- en: On any **Pull Request**, we would want to run tests and deploy on staging.
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在任何**Pull Request**上，我们希望运行测试并在暂存环境中部署。
- en: Then if everything is okay we will promote our code to production and deploy
    the stack to live environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果一切正常，我们将把代码推广到生产环境，并将堆栈部署到生产环境。
- en: '![](../Images/29a2109d76dc7ab68dcb506da2c5bac6.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/29a2109d76dc7ab68dcb506da2c5bac6.png)'
- en: Image by author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: This pipeline will be using Github repository secrets where we will copy paste
    AWS credentials.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该管道将使用Github仓库的机密，我们将在其中复制粘贴AWS凭证。
- en: '![](../Images/c747bd72d1fe8fc3b606c644e220b01e.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c747bd72d1fe8fc3b606c644e220b01e.png)'
- en: Image by author
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'After STAGING AND TESTS has been executed successfully and everything passed
    we can manually promote our code to live. We can use `workflow_dispatch:` for
    that:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在STAGING AND TESTS成功执行且所有测试通过后，我们可以手动将代码推广到生产环境。我们可以使用`workflow_dispatch:`来完成此操作：
- en: '![](../Images/3f0e1f6a198058d88f0ac34f83372695.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f0e1f6a198058d88f0ac34f83372695.png)'
- en: Image by author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: CI/CD tools available in the market
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 市场上可用的CI/CD工具
- en: There are various CI/CD solutions that may be used to automate data pipeline
    testing, deployment, and monitoring. Github Actions is a great tool but sometimes
    we might need more and/or something different.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种CI/CD解决方案可以用于自动化数据管道测试、部署和监控。Github Actions是一个很好的工具，但有时我们可能需要更多和/或不同的工具。
- en: '**This is not an extensive list but some popular tech to try:**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**这不是一个详尽的列表，但以下是一些值得尝试的热门技术：**'
- en: '**AWS CodePipeline:** Solid tool for $1.5 a month per one pipeline. Lots of
    features including automated builds and deployments via infrastructure as code.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS CodePipeline:** 每个管道每月$1.5的可靠工具。包括通过基础设施即代码进行的自动构建和部署等许多功能。'
- en: '**Circle CI:** Circle CI is a cloud-based CI/CD system for automated data pipeline
    testing and deployment. It has a number of connectors and plugins that make it
    simple to set up and operate.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**Circle CI:** Circle CI 是一个基于云的 CI/CD 系统，用于自动化数据管道的测试和部署。它有多个连接器和插件，使其设置和操作变得简单。'
- en: '**Jenkins:** Jenkins is a free and open-source automation server for continuous
    integration and deployment. It offers a diverse set of plugins and connectors,
    making it a powerful data pipeline management solution.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jenkins:** Jenkins 是一个免费的开源自动化服务器，用于持续集成和部署。它提供了多种插件和连接器，使其成为一个强大的数据管道管理解决方案。'
- en: '**GitLab CI/CD:** GitLab CI/CD is a cloud-based system that allows teams to
    manage changes to their code and data pipelines in a single location. It has an
    easy-to-use interface for creating, testing, and deploying data pipelines.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitLab CI/CD:** GitLab CI/CD 是一个基于云的系统，允许团队在一个位置管理代码和数据管道的变更。它具有易于使用的界面，用于创建、测试和部署数据管道。'
- en: '**Travis CI:** Travis CI is a cloud-based CI/CD system for automated data pipeline
    testing and deployment. It is simple to set up and utilize, making it a popular
    choice for teams with little automation expertise.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Travis CI:** Travis CI 是一个基于云的 CI/CD 系统，用于自动化数据管道的测试和部署。它易于设置和使用，使其成为缺乏自动化经验的团队的热门选择。'
- en: '**GoCD:** GoCD is a free and an open source build and release tool. It’s free
    and rely on bash scripts a lot.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**GoCD:** GoCD 是一个免费的开源构建和发布工具。它是免费的，并且大量依赖 bash 脚本。'
- en: '**Conclusion**'
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**结论**'
- en: One of the main benefits of CI/CD is that it improves code quality. Continuous
    integration and deployment bring a lot of benefits for data platform engineers
    and ML Ops. Every step of our data pipeline deployments can be easily monitored
    and managed to ensure faster delivery with no errors in production. It saves time
    and helps engineers to be more productive.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 的主要好处之一是提高代码质量。持续集成和部署为数据平台工程师和 ML Ops 带来了许多好处。我们数据管道部署的每一步都可以轻松监控和管理，以确保更快的交付且生产中没有错误。这节省了时间，并帮助工程师提高生产力。
- en: I hope this simple example given in this story will be useful for you. Using
    it as a template I was able to create robust and flexible CI/CD pipelines for
    containerized applications. Automation in deployment and testing is pretty much
    a standard these days. And we can do so much more with it including ML Ops and
    provisioning resources for data science.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个故事中给出的简单示例对你有所帮助。利用它作为模板，我能够为容器化应用程序创建强大且灵活的 CI/CD 管道。自动化部署和测试如今几乎已成标准。我们还可以做更多的事情，包括
    ML Ops 和为数据科学提供资源。
- en: There are a lot of CI/CD tools available in the market. Some of them are free
    some aren’t but bringing more flexible setups that might become a better fit for
    your data stack. My advice for beginners would be to start with free tools and
    try to implement this story example. It describes the process that can be reproduced
    for any data service later.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有很多 CI/CD 工具。一些是免费的，一些不是，但提供了更多灵活的设置，可能更适合你的数据堆栈。我对初学者的建议是从免费的工具开始，并尝试实现这个故事中的示例。它描述了一个可以为任何数据服务复制的过程。
- en: Recommended read
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐阅读
- en: 1\. [https://docs.github.com/en/actions](https://docs.github.com/en/actions)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. [https://docs.github.com/en/actions](https://docs.github.com/en/actions)
- en: 2\. [https://stackoverflow.com/questions/58877569/how-to-trigger-a-step-manually-with-github-actions](https://stackoverflow.com/questions/58877569/how-to-trigger-a-step-manually-with-github-actions)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. [https://stackoverflow.com/questions/58877569/how-to-trigger-a-step-manually-with-github-actions](https://stackoverflow.com/questions/58877569/how-to-trigger-a-step-manually-with-github-actions)
- en: 3\. [https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. [https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html)
- en: 4\. [https://medium.com/gitconnected/infrastructure-as-code-for-beginners-a4e36c805316](https://medium.com/gitconnected/infrastructure-as-code-for-beginners-a4e36c805316)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. [https://medium.com/gitconnected/infrastructure-as-code-for-beginners-a4e36c805316](https://medium.com/gitconnected/infrastructure-as-code-for-beginners-a4e36c805316)
- en: 5\. [https://betterprogramming.pub/great-data-platforms-use-conventional-commits-51fc22a7417c](https://betterprogramming.pub/great-data-platforms-use-conventional-commits-51fc22a7417c)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. [https://betterprogramming.pub/great-data-platforms-use-conventional-commits-51fc22a7417c](https://betterprogramming.pub/great-data-platforms-use-conventional-commits-51fc22a7417c)
