- en: 'Deep Dive into pandas Copy-on-Write Mode: Part I'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入探讨 pandas Copy-on-Write 模式：第一部分
- en: 原文：[https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6?source=collection_archive---------5-----------------------#2023-08-09](https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6?source=collection_archive---------5-----------------------#2023-08-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6?source=collection_archive---------5-----------------------#2023-08-09](https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6?source=collection_archive---------5-----------------------#2023-08-09)
- en: '*Explaining how Copy-on-Write works internally*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*解释 Copy-on-Write 内部是如何工作的*'
- en: '[](https://medium.com/@patrick_hoefler?source=post_page-----26982e7408c6--------------------------------)[![Patrick
    Hoefler](../Images/35ca9ef1100d8c93dbadd374f0569fe1.png)](https://medium.com/@patrick_hoefler?source=post_page-----26982e7408c6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----26982e7408c6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----26982e7408c6--------------------------------)
    [Patrick Hoefler](https://medium.com/@patrick_hoefler?source=post_page-----26982e7408c6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@patrick_hoefler?source=post_page-----26982e7408c6--------------------------------)[![Patrick
    Hoefler](../Images/35ca9ef1100d8c93dbadd374f0569fe1.png)](https://medium.com/@patrick_hoefler?source=post_page-----26982e7408c6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----26982e7408c6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----26982e7408c6--------------------------------)
    [Patrick Hoefler](https://medium.com/@patrick_hoefler?source=post_page-----26982e7408c6--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F103b3417e0f5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6&user=Patrick+Hoefler&userId=103b3417e0f5&source=post_page-103b3417e0f5----26982e7408c6---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----26982e7408c6--------------------------------)
    ·8 min read·Aug 9, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F26982e7408c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6&user=Patrick+Hoefler&userId=103b3417e0f5&source=-----26982e7408c6---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F103b3417e0f5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6&user=Patrick+Hoefler&userId=103b3417e0f5&source=post_page-103b3417e0f5----26982e7408c6---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----26982e7408c6--------------------------------)
    ·8分钟阅读·2023年8月9日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F26982e7408c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6&user=Patrick+Hoefler&userId=103b3417e0f5&source=-----26982e7408c6---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F26982e7408c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6&source=-----26982e7408c6---------------------bookmark_footer-----------)![](../Images/76145cd8462a1cce9b082b46b634ac76.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F26982e7408c6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6&source=-----26982e7408c6---------------------bookmark_footer-----------)![](../Images/76145cd8462a1cce9b082b46b634ac76.png)'
- en: Photo by [Clint Adair](https://unsplash.com/@clintadair?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/BW0vK-FA3eg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Clint Adair](https://unsplash.com/@clintadair?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    在 [Unsplash](https://unsplash.com/photos/BW0vK-FA3eg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: '[pandas 2.0](https://medium.com/gitconnected/welcoming-pandas-2-0-194094e4275b)
    was released in early April and brought many improvements to the new Copy-on-Write
    (CoW) mode. The feature is expected to become the default in pandas 3.0, which
    is scheduled for April 2024 at the moment. There are no plans for a legacy or
    non-CoW mode.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[pandas 2.0](https://medium.com/gitconnected/welcoming-pandas-2-0-194094e4275b)于四月初发布，并带来了许多对新
    Copy-on-Write (CoW) 模式的改进。该功能预计将成为 pandas 3.0 的默认模式，计划于2024年四月发布。目前没有遗留或非 CoW
    模式的计划。'
- en: This series of posts will explain how Copy-on-Write works internally to help
    users understand what’s going on, show how to use it effectively and illustrate
    how to adapt your code. This will include examples on how to leverage the mechanism
    to get the most efficient performance and also show a couple of anti-patterns
    that will result in unnecessary bottlenecks. I wrote a [short introduction](https://medium.com/towards-data-science/a-solution-for-inconsistencies-in-indexing-operations-in-pandas-b76e10719744)
    to Copy-on-Write a couple of months ago.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列文章将解释 Copy-on-Write 如何在内部工作，以帮助用户了解发生了什么，展示如何有效使用它，并说明如何调整你的代码。这将包括如何利用机制以获得最有效的性能的示例，同时展示一些会导致不必要瓶颈的反模式。我几个月前写了一篇[简短的介绍](https://medium.com/towards-data-science/a-solution-for-inconsistencies-in-indexing-operations-in-pandas-b76e10719744)
    介绍 Copy-on-Write。
- en: I wrote [a short post](https://medium.com/better-programming/pandas-internals-explained-545f14a941c1)
    that explains the data structure of pandas which will help you understand some
    terminology that is necessary for CoW.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了[一篇简短的文章](https://medium.com/better-programming/pandas-internals-explained-545f14a941c1)，解释了
    pandas 的数据结构，这将帮助你理解 CoW 所需的一些术语。
- en: I am part of the pandas core team and was heavily involved in implementing and
    improving CoW so far. I am an open source engineer for [Coiled](https://www.coiled.io)
    where I work on Dask, including improving the pandas integration and ensuring
    that Dask is compliant with CoW.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 pandas 核心团队的一员，至今参与了 CoW 的实施和改进。我是[Coiled](https://www.coiled.io)的开源工程师，负责
    Dask，包括改进 pandas 集成并确保 Dask 符合 CoW 标准。
- en: How Copy-on-Write changes pandas behavior
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Copy-on-Write 如何改变 pandas 行为
- en: 'Many of you are probably familiar with the following caveats in pandas:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的许多人可能已经熟悉 pandas 中的以下注意事项：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s select the grade-column and overwrite the first row with `"E"`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择 grade 列并用 `"E"` 覆盖第一行。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unfortunately, this also updated `df` and not only `grades`, which has the potential
    to introduce hard to find bugs. CoW will disallow this behavior and ensures that
    only `grades` is updated. We also see a false-positive `SettingWithCopyWarning`
    that doesn't help us here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这也更新了`df`而不仅仅是`grades`，这可能会引入难以发现的错误。CoW 将不允许这种行为，并确保仅更新`grades`。我们还看到一个无用的`SettingWithCopyWarning`，对我们没有帮助。
- en: 'Let’s look at a `ChainedIndexing` example that is not doing anything:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个`ChainedIndexing`的示例，这个示例没有做任何事情：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We again get a `SettingWithCopyWarning` but nothing happens to `df` in this
    example. All these gotchas come down to copy and view rules in NumPy, which is
    what pandas uses under the hood. pandas users have to be aware of these rules
    and how they apply to pandas DataFrames to understand why similar code patterns
    produce different results.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次得到`SettingWithCopyWarning`，但在这个示例中`df` 没有发生任何变化。所有这些问题都归结于 NumPy 中的复制和视图规则，这是
    pandas 在底层使用的。pandas 用户必须了解这些规则以及它们如何应用于 pandas DataFrame，以理解类似的代码模式为何会产生不同的结果。
- en: '**CoW cleans up all these inconsistencies**. Users can only update one object
    at a time when CoW is enabled, e.g. `df` would be unchanged in our first example
    since only `grades` is updated at that time and the second example raises a `ChainedAssignmentError`
    instead of doing nothing. Generally, it won''t be possible to update two objects
    at once, e.g., every object behaves as it is a copy of the previous object.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**CoW 清理了所有这些不一致性**。启用 CoW 时，用户只能一次更新一个对象，例如，在第一个示例中，`df` 将保持不变，因为那时只更新了`grades`，而第二个示例会引发`ChainedAssignmentError`，而不是什么都不做。一般来说，不可能一次更新两个对象，例如，每个对象的行为都像是前一个对象的副本。'
- en: There are many more of these cases, but going through all of them is not in
    scope here.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多这样的情况，但在这里讨论所有这些超出了范围。
- en: How it works
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作
- en: Let’s look into Copy-on-Write in more detail and highlight some facts that are
    good to know. This is the main part of this post and is fairly technical.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨 Copy-on-Write，并突出一些值得了解的事实。这是本文的主要部分，相当技术性。
- en: Copy-on-Write promises that **any DataFrame or Series derived from another in**
    **any way always behaves as a copy**. This means that it is not possible to modify
    more than one object with a single operation, e.g. our first example above would
    only modify `grades`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Copy-on-Write 承诺**任何从其他 DataFrame 或 Series 派生的** **对象始终表现为副本**。这意味着不可能通过单个操作修改多个对象，例如我们上面的第一个示例仅会修改`grades`。
- en: A very defensive approach to guarantee this would be to copy the DataFrame and
    its data in every operation, which would avoid views in pandas altogether. This
    would guarantee CoW semantics but also incur a huge performance penalty, so this
    wasn’t a viable option.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保证这一点，采取非常防御性的方式是每次操作时复制 DataFrame 及其数据，这样可以完全避免 pandas 中的视图。这将保证 CoW 语义，但也会带来巨大的性能损失，因此这不是一个可行的选项。
- en: We will now dive into the mechanism that ensures that no two objects are updated
    with a single operation **and** that our data isn’t unnecessarily copied. The
    second part is what makes the implementation interesting.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将深入了解确保不会有两个对象通过单次操作更新 **且** 我们的数据不会不必要地被复制的机制。第二部分是使实现变得有趣的部分。
- en: We have to know exactly when to trigger a copy to avoid copies that aren’t absolutely
    necessary. Potential copies are only necessary if we try to mutate the values
    of one pandas object without copying its data. We have to trigger a copy, if the
    data of this object is shared with another pandas object. This means that we have
    to keep track of whether one NumPy array is referenced by two DataFrames (generally,
    we have to be aware if one NumPy array is referenced by two pandas objects, but
    I will use the term DataFrame for simplicity).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须准确知道何时触发复制，以避免不必要的复制。只有在尝试改变一个 pandas 对象的值而不复制其数据时，潜在的复制才是必要的。如果这个对象的数据与另一个
    pandas 对象共享，我们必须触发一个复制。这意味着我们必须跟踪是否一个 NumPy 数组被两个 DataFrame 引用（通常，我们需要知道一个 NumPy
    数组是否被两个 pandas 对象引用，但为了简单起见，我将使用 DataFrame 这个术语）。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This statement creates a DataFrame `df` and a view of this DataFrame `df2`.
    View means that both DataFrames are backed by the same underlying NumPy array.
    When we look at this with CoW, `df` has to be aware that `df2` references its
    NumPy array too. This is not sufficient though. `df2` also has to be aware that
    `df` references its NumPy array. If both objects are aware that there is another
    DataFrame referencing the same NumPy array, we can trigger a copy in case one
    of them is modified, e.g.:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句创建了一个 DataFrame `df` 和这个 DataFrame `df2` 的视图。视图意味着这两个 DataFrame 是由相同的底层
    NumPy 数组支撑的。当我们用 CoW 看待这个问题时，`df` 必须知道 `df2` 也引用了它的 NumPy 数组。但这还不够。`df2` 也必须知道
    `df` 引用了它的 NumPy 数组。如果两个对象都知道另一个 DataFrame 引用相同的 NumPy 数组，我们可以在其中一个被修改时触发一个复制，例如：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`df` is modified inplace here. `df` knows that there is another object that
    references the same data, e.g. it triggers a copy. It is not aware which object
    references the same data, just that there is another object out there.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`df` 在这里被就地修改。`df` 知道有另一个对象引用相同的数据，例如，它触发了一个复制。它不知道哪个对象引用相同的数据，只是知道外面有另一个对象。'
- en: Let’s take a look at how we can achieve this. We created an internal class `BlockValuesRefs`
    that is used to store this information, it points to all DataFrames that reference
    a given NumPy array.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何实现这一点。我们创建了一个内部类 `BlockValuesRefs`，用于存储这些信息，它指向所有引用给定 NumPy 数组的 DataFrames。
- en: 'There are three different types of operation that can create a DataFrame:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 DataFrame 可以通过三种不同类型的操作：
- en: A DataFrame is created from external data, e.g. through `pd.DataFrame(...)`
    or through any I/O method.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataFrame 是从外部数据创建的，例如通过 `pd.DataFrame(...)` 或通过任何 I/O 方法。
- en: A new DataFrame is created through a pandas operation that triggers a copy of
    the original data, e.g. `dropna` creates a copy in almost all cases.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一个 pandas 操作创建一个新的 DataFrame，这个操作会触发对原始数据的复制，例如 `dropna` 在几乎所有情况下都会创建一个复制。
- en: A new DataFrames is created through a pandas operation that **does not** trigger
    a copy of the original data, e.g. `df2 = df.reset_index()`.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一个 pandas 操作创建一个新的 DataFrame，这个操作 **不会** 触发对原始数据的复制，例如 `df2 = df.reset_index()`。
- en: The first two cases are simple. When the DataFrame is created, the NumPy arrays
    that back it are connected to a fresh `BlockValuesRefs` object. These arrays are
    only referenced by the new object, so we don't have to keep track of any other
    objects. The object creates a `weakref` that points to the `Block` that wraps
    the NumPy array and stores this reference internally. The concept of Blocks is
    explained [here](https://medium.com/better-programming/pandas-internals-explained-545f14a941c1).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个案例很简单。当创建 DataFrame 时，支撑它的 NumPy 数组会连接到一个新的 `BlockValuesRefs` 对象。这些数组仅被新对象引用，因此我们不必跟踪任何其他对象。该对象创建一个
    `weakref`，指向包裹 NumPy 数组的 `Block` 并在内部存储这个引用。Blocks 的概念在[这里](https://medium.com/better-programming/pandas-internals-explained-545f14a941c1)进行了解释。
- en: A [weakref](https://docs.python.org/3/library/weakref.html) creates a reference
    to any Python object. It does not keep this object alive when it would normally
    go out of scope.
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[weakref](https://docs.python.org/3/library/weakref.html)创建对任何Python对象的引用。它不会在对象通常超出作用域时保持该对象存活。'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example creates a Dummy object and a weak reference to this object. Afterward,
    we assign another object to the same variable, e.g. the initial object goes out
    of scope and is garbage collected. The weak reference does not interfere with
    this process. If you resolve the weak reference, it will point to `None` instead
    of the original object.
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个示例创建了一个Dummy对象及其弱引用。随后，我们将另一个对象赋给相同的变量，例如初始对象超出作用域并被垃圾回收。弱引用不会干扰这一过程。如果你解析弱引用，它将指向`None`而不是原始对象。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This ensures that we don’t keep any arrays alive that would otherwise be garbage
    collected.
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这确保了我们不会保留任何本应被垃圾回收的数组。
- en: 'Let’s take a look at how these objects are organized:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些对象是如何组织的：
- en: '![](../Images/af723ab6a06f1f56cd2e5ba5dea4bf68.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/af723ab6a06f1f56cd2e5ba5dea4bf68.png)'
- en: Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Our example has two columns `"a"` and `"b"` which both have dtype `"int64"`.
    They are backed by one Block that holds the data for both columns. The Block holds
    a hard reference to the reference tracking object, ensuring that it stays alive
    as long as the Block is not garbage collected. The reference tracking object holds
    a weak reference to the Block. This enables the object to track the lifecycle
    of this block but does not prevent garbage collection. The reference tracking
    object does not hold a weak reference to any other Block yet.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例有两列`"a"`和`"b"`，它们的dtype都是`"int64"`。它们由一个Block支持，该Block保存这两列的数据。Block持有对引用跟踪对象的硬引用，确保只要Block没有被垃圾回收，它就会保持活跃。引用跟踪对象持有对Block的弱引用。这使得该对象能够跟踪此Block的生命周期，但不会阻止垃圾回收。引用跟踪对象尚未持有对任何其他Block的弱引用。
- en: These are the easy scenarios. We know that no other pandas object shares the
    same NumPy array, so we can simply instantiate a new reference tracking object.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是简单的场景。我们知道没有其他pandas对象共享相同的NumPy数组，因此我们可以简单地实例化一个新的引用跟踪对象。
- en: The third case is more complicated. The new object views the same data as the
    original object. This means that both objects point to the same memory. Our operation
    will create a new Block that references the same NumPy array, this is called a
    shallow copy. We now have to register this new `Block` in our reference tracking
    mechanism. We will register our new `Block` with the reference tracking object
    that is connected to the old object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种情况更复杂。新对象查看的数据与原始对象相同。这意味着两个对象指向相同的内存。我们的操作将创建一个新的Block，该Block引用相同的NumPy数组，这称为浅拷贝。我们现在必须在我们的引用跟踪机制中注册这个新的`Block`。我们将使用与旧对象连接的引用跟踪对象来注册我们的新`Block`。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/a2c2fc52065f845d3ec6093ce639265d.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2c2fc52065f845d3ec6093ce639265d.png)'
- en: Image by author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Our `BlockValuesRefs` now points to the Block that backs the initial `df` and
    the newly created Block that backs `df2`. This ensures that we are always aware
    about all DataFrames that point to the same memory.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`BlockValuesRefs`现在指向支持初始`df`的Block和支持`df2`的新增Block。这确保了我们始终了解所有指向相同内存的DataFrame。
- en: We can now ask the reference tracking object how many Blocks pointing to the
    same NumPy array are alive. The reference tracking object evaluates the weak references
    and tells us that more than one object references the same data. This enables
    us to trigger a copy internally if one of them is modified in place.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以询问引用跟踪对象有多少个指向相同NumPy数组的Block仍然存在。引用跟踪对象评估弱引用，并告诉我们有多个对象引用相同的数据。这使我们能够在其中一个对象在原地修改时内部触发复制。
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Block in `df2` is copied through a deep copy, creating a new Block that
    has its own data and reference tracking object. The original block that was backing
    `df2` can now be garbage collected, which ensures that the arrays backing `df`
    and `df2` don't share any memory.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`df2`中的Block通过深拷贝进行复制，创建了一个新的Block，该Block拥有自己的数据和引用跟踪对象。原始的Block现在可以被垃圾回收，这确保了`df`和`df2`所支持的数组不会共享任何内存。'
- en: '![](../Images/e06fd9daf47e7ebe973af0728c0f407c.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e06fd9daf47e7ebe973af0728c0f407c.png)'
- en: Image by author
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Let’s look at a different scenario.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个不同的场景。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`df` is invalidated before we modify `df2`. Consequently, the weakref of our
    reference tracking object, that points to the Block that backed `df`, evaluates
    to `None`. This enables us to modify `df2` without triggering a copy.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们修改`df2`之前，`df`已被失效。因此，我们引用跟踪对象的弱引用，指向支持`df`的Block，评估结果为`None`。这使我们能够在不触发复制的情况下修改`df2`。
- en: '![](../Images/7174f506834adb8fbf5c54b4d1adbd88.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7174f506834adb8fbf5c54b4d1adbd88.png)'
- en: Image by author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Our reference tracking object points to only one DataFrame which enables us
    to do the operation inplace without triggering a copy.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的引用跟踪对象仅指向一个DataFrame，这使我们能够在不触发复制的情况下进行就地操作。
- en: '`reset_index` above creates a view. The mechanism is a bit simpler if we have
    an operation that triggers a copy internally.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`reset_index`创建了一个视图。如果我们有一个内部触发复制的操作，机制会简单一些。
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This immediately instantiates a new reference tracking object for our DataFrame
    `df2`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这立即为我们的DataFrame `df2` 实例化了一个新的引用跟踪对象。
- en: '![](../Images/00760204bbc4c441baab8b73b4b858e8.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/00760204bbc4c441baab8b73b4b858e8.png)'
- en: Image by author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: We have investigated how the Copy-on-Write tracking mechanism works and when
    we trigger a copy. The mechanism defers copies in pandas as much as possible,
    which is quite different from the non-CoW behavior. The reference tracking mechanism
    keeps track of all DataFrames that share memory, enabling more consistent behavior
    in pandas.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经研究了Copy-on-Write跟踪机制是如何工作的以及何时触发复制。该机制尽可能推迟pandas中的复制，这与非CoW行为有很大不同。引用跟踪机制跟踪所有共享内存的DataFrame，从而在pandas中实现更一致的行为。
- en: The next part in this series will explain techniques that are used to make this
    mechanism more efficient.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本系列的下一部分将解释用于提高此机制效率的技术。
- en: Thank you for reading. Feel free to reach out to share your thoughts and feedback
    about Copy-on-Write.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如有意见和反馈，请随时联系以分享您对Copy-on-Write的看法。
