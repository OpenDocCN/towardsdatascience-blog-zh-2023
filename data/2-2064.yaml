- en: 'The SQL Unit Testing Landscape: 2023'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 单元测试现状：2023
- en: 原文：[https://towardsdatascience.com/the-sql-unit-testing-landscape-2023-7a8c5f986dd3](https://towardsdatascience.com/the-sql-unit-testing-landscape-2023-7a8c5f986dd3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-sql-unit-testing-landscape-2023-7a8c5f986dd3](https://towardsdatascience.com/the-sql-unit-testing-landscape-2023-7a8c5f986dd3)
- en: Advancing speed and safety in SQL development
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升 SQL 开发的速度和安全性
- en: '[](https://medium.com/@cisenbe?source=post_page-----7a8c5f986dd3--------------------------------)[![Chad
    Isenberg](../Images/56e50c1ee292ac672df4b8062e460c8e.png)](https://medium.com/@cisenbe?source=post_page-----7a8c5f986dd3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7a8c5f986dd3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7a8c5f986dd3--------------------------------)
    [Chad Isenberg](https://medium.com/@cisenbe?source=post_page-----7a8c5f986dd3--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@cisenbe?source=post_page-----7a8c5f986dd3--------------------------------)[![Chad
    Isenberg](../Images/56e50c1ee292ac672df4b8062e460c8e.png)](https://medium.com/@cisenbe?source=post_page-----7a8c5f986dd3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7a8c5f986dd3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7a8c5f986dd3--------------------------------)
    [Chad Isenberg](https://medium.com/@cisenbe?source=post_page-----7a8c5f986dd3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7a8c5f986dd3--------------------------------)
    ·9 min read·May 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----7a8c5f986dd3--------------------------------)
    ·阅读时间 9 分钟·2023年5月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7df8aad2d9bf6732036f59b3df2c4a19.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7df8aad2d9bf6732036f59b3df2c4a19.png)'
- en: Photo by [Ilse Orsel](https://unsplash.com/@lgtts?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Ilse Orsel](https://unsplash.com/@lgtts?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The evolution of SQL development
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 开发的演变
- en: Although SQL is nearly [50 years old](https://en.wikipedia.org/wiki/SQL) (or
    perhaps *because* it’s nearly 50 years old), development in the language has been
    slow to adopt modern practices and tools. For decades, our primary “IDEs” were
    management tools like [SSMS](https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver16)
    and [DBeaver](https://dbeaver.io/), version control was accomplished via naming
    conventions like *stored_proc_2022_03_15*, and testing consisted of running your
    queries against production tables and exporting to a spreadsheet for manual reconciliation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 SQL 已经有将近[50年](https://en.wikipedia.org/wiki/SQL)的历史（或者说*正因为*它已经将近50年了），但该语言的发展在采用现代实践和工具方面一直较为缓慢。几十年来，我们主要的“IDE”是像[SSMS](https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver16)和[DBeaver](https://dbeaver.io/)这样的管理工具，版本控制则通过像*stored_proc_2022_03_15*这样的命名约定来完成，测试则是通过将查询运行在生产表上并导出到电子表格中进行手动核对。
- en: But things have been improving rapidly over the last decade. Those database
    management tools, as well as cloud consoles for warehouses, are pretty feature
    rich with syntax highlighting, code completion, and plan visualizations. We have
    database versioning through tools like [Liquibase](https://docs.liquibase.com/home.html),
    [Flyway](https://documentation.red-gate.com/fd/welcome-to-flyway-184127914.html),
    and [dbt](https://docs.getdbt.com/docs/introduction). And even testing / auditing
    is less of a headache with things like [dbt-audit-helper](https://github.com/dbt-labs/dbt-audit-helper).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但在过去十年中，情况已经迅速改善。那些数据库管理工具以及云数据仓库控制台都具有丰富的功能，包括语法高亮、代码自动完成和计划可视化。我们通过像[Liquibase](https://docs.liquibase.com/home.html)、[Flyway](https://documentation.red-gate.com/fd/welcome-to-flyway-184127914.html)和[dbt](https://docs.getdbt.com/docs/introduction)这样的工具实现了数据库版本控制。即使是测试/审计方面也不再那么令人头疼，有了像[dbt-audit-helper](https://github.com/dbt-labs/dbt-audit-helper)这样的工具。
- en: One of the last frontiers is SQL [unit testing](https://en.wikipedia.org/wiki/Unit_testing),
    which is still very much in its infancy. Let’s dive in!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个前沿领域之一是 SQL [单元测试](https://en.wikipedia.org/wiki/Unit_testing)，它仍然处于起步阶段。让我们深入探讨一下！
- en: Why should we unit test?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么要进行单元测试？
- en: For those who have come into SQL development from outside of software engineering,
    the value of unit testing may not be immediately obvious. Typically, query development
    is a fairly fast cycle of “write query, run query, look at result set, modify
    query, repeat” But as your query complexity and data size grow, you run into some
    barriers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些从软件工程之外进入SQL开发领域的人来说，单元测试的价值可能并不明显。通常，查询开发是一个相对快速的“编写查询、运行查询、查看结果集、修改查询、重复”的过程。但随着查询复杂性和数据量的增长，你会遇到一些障碍。
- en: 'First, you can engage in a lot of redundant testing. Consider the following
    transform:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可能会进行大量冗余测试。考虑以下转换：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The query itself isn’t exciting. But from a testing standpoint, what do we
    actually need to test, and what is being tested? We only need four records to
    cover our cases:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查询本身并不令人兴奋。但从测试的角度来看，我们实际上需要测试什么，正在测试什么？我们只需要四条记录来覆盖我们的案例：
- en: '*order_count < 50*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*order_count < 50*'
- en: '*order_count > 50*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*order_count > 50*'
- en: '*order_count = 50*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*order_count = 50*'
- en: '*order_count IS NULL*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*order_count IS NULL*'
- en: Against your production database, you could be scanning millions or billions
    of records for your tests, and that can add up. You can (and should) have a development
    environment with a smaller subset of cleansed data, but this can still leave you
    with far more records than what you actually need to adequately test your queries.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的生产数据库，你可能需要扫描数百万或数十亿条记录进行测试，这可能会积累成本。你可以（也应该）拥有一个数据子集较小的开发环境，但这仍然可能留下比实际测试查询所需的记录更多的数据。
- en: The other major issue is that even your full production dataset might not contain
    all reasonable test cases. Especially when you’re onboarding a new data source,
    or if development or operations teams are changing how they generate data, it’s
    entirely possible that you’ll need test coverage for scenarios that don’t yet
    exist in your data!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个主要问题是，即使是你的完整生产数据集也可能不包含所有合理的测试用例。特别是当你引入新的数据源，或者开发或运维团队更改生成数据的方式时，你可能会需要覆盖尚不存在于数据中的场景的测试！
- en: 'Finally, the biggest dividends are earned during maintenance. When you need
    to make a change to existing functionality, a robust unit test suite will give
    you confidence that you’re not breaking your queries. If your change breaks a
    unit test, you know that you have work to do: either change your query to preserve
    needed functionality, or modify your test to reflect the new logic. And since
    you’re using very small mock datasets, you can get your feedback almost instantly
    while developing.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的收益通常是在维护阶段获得的。当你需要对现有功能进行更改时，一个稳健的单元测试套件将让你确信不会破坏你的查询。如果你的更改破坏了一个单元测试，你就知道你需要做工作：要么调整你的查询以保持所需的功能，要么修改你的测试以反映新的逻辑。由于你使用的是非常小的模拟数据集，你可以在开发过程中几乎立即获得反馈。
- en: Yes, you’ll still need to do integrations testing and auditing, but with good
    test coverage, you can catch many of your errors before this stage, saving you
    time and compute costs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你仍然需要进行集成测试和审计，但通过良好的测试覆盖率，你可以在此阶段之前捕捉到许多错误，从而节省时间和计算成本。
- en: To illustrate some of these ideas, here’s a scenario.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这些想法，这里有一个场景。
- en: Let’s say I’m working on a particularly complicated query that takes 30 minutes
    and $10 to execute against the production dataset. During the course of development,
    I have to execute the query 5 times as I make small adjustments, each time spending
    another $1 and 2 minutes while my audit query completes (noting that this step
    could be much more expensive if I manually audit results). As an average [American
    data engineer](https://www.salary.com/research/salary/listing/data-engineer-salary)
    making $120K / year, my time is approximately $57 / hour (ignoring taxes, benefits,
    etc.). My development cost $171 in labor and $55 in compute, for a total of $226.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我在处理一个特别复杂的查询，这个查询在生产数据集上执行需要30分钟和10美元。在开发过程中，我必须执行这个查询5次，每次进行小调整，每次花费1美元和2分钟，同时我的审计查询完成（注意，如果我手动审计结果，这一步可能会更昂贵）。作为一名平均年薪为12万美元的[美国数据工程师](https://www.salary.com/research/salary/listing/data-engineer-salary)，我的时间成本约为57美元/小时（不考虑税收、福利等）。我的开发成本为171美元的劳动成本和55美元的计算成本，总计226美元。
- en: 'Implementing unit tests to cover the same query might take me an hour or two,
    since it’s really complicated. But now my first 4 runs of the query are essentially
    free; since we’ll be processing a handful of records, execution will take a handful
    of seconds, and I’m only on the hook for the final run for validation: $11 and
    30 minutes of time ($28.50), for a total of $39.50\. Combined with the unit test
    overhead, we’re looking at $153.50, a savings of ~33%.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实现单元测试以覆盖相同的查询可能需要我一到两个小时，因为这真的很复杂。但现在我的前四次查询基本上是免费的；由于我们处理的记录数量有限，执行只需几秒钟，而我仅需为最终验证负责：$11
    和 30 分钟的时间（$28.50），总共为 $39.50。加上单元测试的开销，我们总共花费 $153.50，节省了大约 33%。
- en: There are plenty of counterarguments. What if the query only cost pennies and
    took seconds to run in the first place? What if I only had to make a trivial change
    and completed the work in one pass? What if I were working on a scaled-back development
    environment that cut my costs by half or more?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多反驳的观点。如果查询本身只花费几分钱并且执行时间仅需几秒钟呢？如果我只需进行一个微不足道的更改并在一次操作中完成工作呢？如果我在一个削减了成本一半或更多的缩减开发环境中工作呢？
- en: Your specific use-cases may dictate how much value you can get out of unit testing,
    but I would argue that no matter your circumstances, you need to think about your
    testing strategy and the tradeoffs you’re making. Testing incurs costs but is
    crucial to developing high-quality products; this is no different in the data
    world than it is in software.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你的具体使用案例可能决定了你能从单元测试中获得多少价值，但我认为无论你的情况如何，你都需要考虑你的测试策略和你所做的权衡。测试会产生成本，但对开发高质量产品至关重要；在数据世界中，这一点与软件世界没有不同。
- en: So where’s our pytest equivalent?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那我们的 pytest 等价物在哪里？
- en: 'To answer the headline: there isn’t one. Hopefully I’ve sold you on the idea
    that unit testing can give us the coverage we need with a very minimal amount
    of data. But of course, there’s a catch. In the SQL world, what is a “unit”? For
    a language Python or Java, unit testing is frequently done at the method or class
    level; as the name implies, these are the most basic “units” of functionality
    that need to be tested.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 回答标题：没有一个。希望我已经让你相信，单元测试可以以非常少的数据给我们所需的覆盖范围。但当然，也有陷阱。在 SQL 世界中，什么是“单元”？对于像 Python
    或 Java 这样的语言，单元测试通常在方法或类级别进行；正如名称所示，这些是需要测试的最基本的功能“单元”。
- en: In SQL, is a unit the entire query? Is it a single CTE? A group of CTEs that
    convey some meaning together? The latter adds complexity to unit testing solutions
    since SQL isn’t readily composable like general-purpose languages; you can’t just
    “call” a CTE like you would a method. Good data modeling can help reduce this
    burden by making your queries more modular, but good test design is still challenging,
    and there are scarce best practices available.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，一个单元是整个查询吗？是单个 CTE 吗？还是传达某种意义的一组 CTE？后者为单元测试解决方案增加了复杂性，因为 SQL 并不像通用语言那样容易组合；你不能像调用方法那样“调用”一个
    CTE。良好的数据建模可以通过使查询更具模块化来帮助减少这种负担，但良好的测试设计仍然具有挑战性，而且可用的最佳实践很少。
- en: There are a number of pre-built options for SQL unit testing, but there’s no
    standard at this point. There’s an excellent [dbt thread](https://github.com/dbt-labs/dbt-core/discussions/4455)
    that details the benefits and potential approaches, but unfortunately, this isn’t
    something that has made the roadmap just yet. Let’s review some of the more popular
    options.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQL 单元测试，有许多现成的选项，但目前还没有标准。有一个很棒的 [dbt 讨论帖](https://github.com/dbt-labs/dbt-core/discussions/4455)
    详细介绍了这些选项的优点和潜在方法，但不幸的是，这还没有成为路线图的一部分。让我们回顾一些更流行的选项。
- en: tSQLt
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tSQLt
- en: '[tSQLt](https://tsqlt.org/) is an open source project maintained by [Redgate](https://www.red-gate.com/),
    a big name in the SQL Server development space. Like a lot of SQL Server solutions,
    tSQLt is implemented as a series of stored procedures added as database objects
    into your target database.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[tSQLt](https://tsqlt.org/) 是一个开源项目，由 SQL Server 开发领域的知名公司 [Redgate](https://www.red-gate.com/)
    维护。像许多 SQL Server 解决方案一样，tSQLt 实现为一系列存储过程，作为数据库对象添加到你的目标数据库中。'
- en: 'From the [tutorial](https://tsqlt.org/user-guide/tsqlt-tutorial/), here’s a
    test of a stored procedure, with mocks handled as variables:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [教程](https://tsqlt.org/user-guide/tsqlt-tutorial/) 中，这里是一个存储过程的测试，模拟作为变量处理：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: tSQLt also offers functionality for mocking tables and views, as well as asserting
    equalities, inequalities, and existence of various database objects. This tool
    is particularly well-suited to applications database development since, well,
    that’s one of SQL Server’s primary use-cases. You certainly *can* apply this to
    analytics (and there are plenty of data warehouses implemented in SQL Server),
    but the focus is clearly on a different kind of development.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: tSQLt 还提供了模拟表和视图的功能，以及断言各种数据库对象的相等、不等和存在性。这个工具特别适合应用数据库开发，因为这正是 SQL Server 的主要用例之一。你当然*可以*将其应用于分析（而且
    SQL Server 实现了许多数据仓库），但显然关注的是不同类型的开发。
- en: dbt-unit-testing
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dbt-unit-testing
- en: '[dbt-unit-testing](https://github.com/EqualExperts/dbt-unit-testing) is a dbt
    package maintained by [Equal Experts](https://www.equalexperts.com/), a global
    technology consultancy. The approach is to create custom tests that utilize the
    package’s macros, and then to run them. Here, mocks can be defined in query- or
    CSV-style, and some clever work with Jinja macros substitutes the mocks for the
    actual table references. From their docs:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[dbt-unit-testing](https://github.com/EqualExperts/dbt-unit-testing) 是一个由 [Equal
    Experts](https://www.equalexperts.com/) 维护的 dbt 软件包，Equal Experts 是一家全球技术咨询公司。其方法是创建利用软件包宏的自定义测试，然后运行它们。在这里，模拟数据可以用查询风格或
    CSV 风格定义，一些巧妙的 Jinja 宏处理将模拟数据替换为实际的表引用。根据他们的文档：'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you’ve established your tests, it’s as simple as running dbt test, and
    you get formatted output (also from the docs):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你建立了测试，只需运行 dbt test，你就会得到格式化的输出（也来自文档）：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In addition to manually creating mocks, this package supports functionality
    to infer columns by directly querying your warehouse. In my personal experience,
    I had trouble getting this working, but this functionality could be very useful
    for wide tables, as you’re otherwise on the hook for enumerating every single
    column.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了手动创建模拟数据之外，这个软件包还支持通过直接查询你的数据仓库来推断列。我个人的经验是，在使这一功能正常工作时遇到了困难，但对于宽表来说，这一功能可能非常有用，因为否则你必须列举每一列。
- en: dbt-datamocktool
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dbt-datamocktool
- en: '[dbt-datamocktool](https://github.com/mjirv/dbt-datamocktool) is another dbt
    package that takes a slightly different approach. Mocks and expectations are created
    as seed files, and then tests are defined as inputs to the package’s existing
    test in *schema.yml*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[dbt-datamocktool](https://github.com/mjirv/dbt-datamocktool) 是另一个 dbt 软件包，它采用了稍微不同的方法。模拟数据和期望值被创建为种子文件，然后测试被定义为
    *schema.yml* 中软件包现有测试的输入。'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In addition to providing the mock data, you’ll map the models’ sources and
    refs to the appropriate mocks. This approach is more hands-on, but it’s also more
    lightweight in terms of what it demands from your project. Unlike dbt-unit-testing,
    you don’t have to override the *ref()* and *source()* macros with package-specific
    versions. The majority of the functionality is coming from dbt’s native components:
    tests and seeds.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供模拟数据之外，你还会将模型的来源和引用映射到适当的模拟数据上。这种方法更加动手操作，但在项目需求方面也更加轻量。与 dbt-unit-testing
    不同，你不必用软件包特定版本覆盖 *ref()* 和 *source()* 宏。大多数功能来自 dbt 的原生组件：测试和种子。
- en: The other exciting feature is support for incremental models for adapters that
    support the *MERGE* operation. This is especially important in the dbt landscape
    since the incremental materialization fundamentally runs different queries depending
    on the “mode” of the dbt invocation; you need to be able to test both “versions”
    of the query for full coverage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个令人兴奋的功能是对支持 *MERGE* 操作的适配器的增量模型的支持。这在 dbt 领域尤为重要，因为增量物化根据 dbt 调用的“模式”运行不同的查询；你需要能够测试查询的两个“版本”以实现全面覆盖。
- en: SQLMesh
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLMesh
- en: A newcomer to the SQL modeling / templating space, [SQLMesh](https://sqlmesh.readthedocs.io/en/stable/)
    brings a ton of goodies, not the least of which is native unit test support. Tests
    are defined in YAML files and then executed on-demand or upon rebuilding of a
    SQLMesh plan.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 新comer 进入 SQL 建模/模板空间，[SQLMesh](https://sqlmesh.readthedocs.io/en/stable/) 带来了大量的好东西，其中之一是原生单元测试支持。测试在
    YAML 文件中定义，然后在按需执行或重建 SQLMesh 计划时执行。
- en: 'Mocking is straightforward, with mocks and expectations defined inside the
    same file. A killer feature I haven’t seen elsewhere is the ability to test *individual
    CTEs*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟数据非常简单，模拟数据和期望值都定义在同一个文件中。我没有见过的一个杀手级功能是能够测试*单个 CTEs*：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we saw with dbt-unit-testing, test output is visualized nicely:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 dbt-unit-testing 中看到的，测试输出的可视化效果很好：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For me personally, this is the most compelling SQL unit testing option I’ve
    seen; however, it’s also complicated by the fact that it’s a SQL framework that
    isn’t dbt. This is an early-stage tool facing a de-facto industry standard, and
    between feature gaps and adoption inertia (i. e., it has to be better by enough
    to get teams to switch), it’s uncertain what its future holds.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这是我见过的最有说服力的SQL单元测试选项；然而，复杂之处在于它是一个不是dbt的SQL框架。这是一个处于早期阶段的工具，面临着一个事实上的行业标准，在功能缺口和采纳惯性（即，它必须足够好才能让团队转而使用）之间，它的未来充满不确定性。
- en: That being said, read the docs and get an idea of why, as impressive as the
    unit testing framework is, that’s not even SQLMesh’s best feature.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，还是要阅读文档，了解为什么即使单元测试框架很令人印象深刻，这也不是SQLMesh最好的特性。
- en: Are we there yet?
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们已经准备好了吗？
- en: 'No. At the end of the day, the existing solutions are all pretty close in functionality
    and suffer from similar drawbacks. All of the tools do more or less the same thing:
    run your queries with mock inputs and compare the query output to an expectation.
    Some are more sophisticated than others in how they construct the test scenarios
    and generate output, but the differences are relatively small.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不。归根结底，现有的解决方案在功能上都非常接近，并且都存在类似的缺陷。所有工具或多或少做着相同的事情：使用模拟输入运行查询，并将查询输出与预期进行比较。在构建测试场景和生成输出的方式上，有些工具比其他工具更复杂，但差异相对较小。
- en: 'There are three hurdles to adoption that I can see:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我能看到三个采纳障碍：
- en: The industry hasn’t coalesced around a standard. dbt has been remarkably successful
    even though it has significant and serious gaps (column-level lineage, unit testing,
    scalability); adoption has driven adoption. No unit testing solution has hit critical
    mass
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行业尚未达成一个标准。尽管dbt取得了显著成功，但它也存在着重要的缺陷（列级血缘追踪、单元测试、可扩展性）；采纳度推动了更多的采纳。没有任何单元测试解决方案达到了临界规模。
- en: The culture isn’t there yet. SQL developers have been producing successful solutions
    for decades without access to unit testing. While the rise of the analytics engineer
    has brought more and more software engineering best practices to SQL development,
    it hasn’t brought all of them, and unit testing is one of the gaps
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文化尚未成熟。SQL开发人员在没有单元测试的情况下已经成功地解决了几十年的问题。尽管分析工程师的兴起将越来越多的软件工程最佳实践带入了SQL开发，但并未涵盖所有最佳实践，单元测试就是一个缺口。
- en: 'Data mocking is still an unsolved problem. In all of the documented examples,
    we’re looking at a handful of columns with simple relations between a handful
    of tables. Real queries can be orders of magnitude more complex. The developer
    feels the burden of many, sometimes dozens of join conditions and the referential
    integrity needed to make the tests pass. To some extent, this can be seen as a
    feature: i. e., the developer has to reason about every join and every record.
    But practically speaking, it’s a slog, especially when real data that will just
    work is tantalizingly in reach'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据模拟仍然是一个未解决的问题。在所有记录的例子中，我们看到的是少数几列和少数几张表之间的简单关系。实际查询可能复杂得多。开发人员感受到许多、甚至数十个连接条件以及为了使测试通过所需的引用完整性的负担。在某种程度上，这可以被视为一种特性：即开发人员必须考虑每个连接和每条记录。但从实际角度来看，这是一项繁重的任务，特别是当真正能用的数据就在眼前时，尤其令人心痒。
- en: I’m hopeful that the increasing number of conversations about the importance
    of testing, quality, and standards in the industry is pushing us toward more mature
    practices and better outcomes. When we can develop queries as safely and quickly
    as we can develop other software, we’re going to unlock a lot of value.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望关于行业中测试、质量和标准重要性的对话越来越多，这将推动我们朝着更成熟的实践和更好的成果前进。当我们能够像开发其他软件一样安全迅速地开发查询时，我们将释放出大量的价值。
