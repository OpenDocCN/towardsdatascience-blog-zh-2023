- en: 'Particle Swarm Optimization: Search Procedure, Visualized'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子群优化：搜索过程可视化
- en: 原文：[https://towardsdatascience.com/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a](https://towardsdatascience.com/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a](https://towardsdatascience.com/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a)
- en: Intuition + math + code, for practitioners
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直觉 + 数学 + 代码，为从业者提供
- en: '[](https://medium.com/@byjameskoh?source=post_page-----4b0364fb3e5a--------------------------------)[![James
    Koh, PhD](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----4b0364fb3e5a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4b0364fb3e5a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4b0364fb3e5a--------------------------------)
    [James Koh, PhD](https://medium.com/@byjameskoh?source=post_page-----4b0364fb3e5a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@byjameskoh?source=post_page-----4b0364fb3e5a--------------------------------)[![詹姆斯·柯博士](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----4b0364fb3e5a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4b0364fb3e5a--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4b0364fb3e5a--------------------------------)
    [詹姆斯·柯博士](https://medium.com/@byjameskoh?source=post_page-----4b0364fb3e5a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4b0364fb3e5a--------------------------------)
    ·9 min read·Dec 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[数据科学前沿](https://towardsdatascience.com/?source=post_page-----4b0364fb3e5a--------------------------------)
    ·阅读时间9分钟·2023年12月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/861b57cca91b8b669ecc1b8b6623e6df.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/861b57cca91b8b669ecc1b8b6623e6df.png)'
- en: Image created by DALL·E 3 based on the prompt “Draw a science-fiction themed
    image that depicts a swarm of drones searching for a target in an urban landscape”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由DALL·E 3根据提示“绘制一幅科幻主题的图像，描绘一群无人机在城市景观中寻找目标”创建
- en: Humans like to mimic many things in nature.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 人类喜欢模仿自然界中的许多事物。
- en: We mimic frogs in swimming. We mimic birds by installing wings on planes to
    provide lift. We mimic the crane/ snake/ mantis in martial arts. We mimic termites
    to build structures with efficient temperature control (see Eastgate Centre).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模仿青蛙游泳。我们通过在飞机上安装翅膀来模仿鸟类以提供升力。我们模仿起重机/蛇/螳螂来进行武术。我们模仿白蚁来建造具有高效温控的结构（参见东门大厦）。
- en: This extends to math algorithms as well, where you would have heard of Artificial
    **Bee** Colony, **Ant** Colony Optimization, **Cuckoo** Search, and **Firefly**
    Algorithm. I’ve also previously talked about [Evolutionary Algorithm,](https://medium.com/towards-data-science/evolutionary-algorithm-selections-explained-2515fb8d4287)
    which works following natural selection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这也扩展到了数学算法中，例如你可能听说过**蜜蜂**算法、**蚂蚁**算法、**布谷鸟**搜索算法和**萤火虫**算法。我之前还谈过[进化算法，](https://medium.com/towards-data-science/evolutionary-algorithm-selections-explained-2515fb8d4287)它遵循自然选择的原则。
- en: Today, I will talk about PSO — Particle Swarm Optimization. At the end of this
    article, you will have the code which enables you to implement the solution as
    well as generate a gif to visualize the search process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我将讲解PSO——粒子群优化。在本文的最后，你将获得能够实现解决方案的代码，并生成一个gif来可视化搜索过程。
- en: Use-Case
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用案例
- en: Searching for an optimal solution in high-dimensional space is difficult. Students
    picking up ML would probably have heard of the term ‘curse of dimensionality’
    within their first week.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在高维空间中寻找最优解是困难的。刚接触机器学习的学生可能在第一周就听说过“维度诅咒”这个术语。
- en: High-dimensional space is not just an abstract mathematical concept. Consider
    a supply chain problem. A company has to decide where to locate its production
    factory, warehouse, distribution centers, and retail stores. For simplicity, let’s
    just assume there is only one of each. This already makes the solution we are
    searching for 8-dimensional — (*x*₁, *y*₁, *x*₂, *y*₂, *x*₃, *y*₃, *x*₄, *y*₄).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 高维空间不仅仅是一个抽象的数学概念。考虑一个供应链问题。一家公司必须决定在哪里建立生产工厂、仓库、分销中心和零售店。为了简单起见，我们假设每种设施只有一个。这已经使我们要寻找的解决方案是8维的——(*x*₁,
    *y*₁, *x*₂, *y*₂, *x*₃, *y*₃, *x*₄, *y*₄)。
- en: '![](../Images/20e004815855d640a298d71a6d971f4f.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/20e004815855d640a298d71a6d971f4f.png)'
- en: Image created by DALL·E 3 based on the prompt “Draw a panoramic view of a town
    with the four key facilities — a production factory, warehouse, distribution center,
    and retail store”.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由DALL·E 3根据提示“绘制一个包含四个关键设施——生产工厂、仓库、配送中心和零售店——的全景视图”创建的图像。
- en: The absolute location (*x*₁, *y*₁, *x*₂, *y*₂, *x*₃, *y*₃, *x*₄, *y*₄) influences
    the relative locations between each facility. Both the absolute as well as relative
    locations would influence the operational costs as well as expected revenue, and
    hence the profits. While not perfect, we can approximately say that the search
    space and impact on the objective function is continuous.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对位置(*x*₁, *y*₁, *x*₂, *y*₂, *x*₃, *y*₃, *x*₄, *y*₄)影响每个设施之间的相对位置。绝对位置和相对位置都会影响运营成本以及预期收益，从而影响利润。虽然不完全准确，但我们可以大致说搜索空间和对目标函数的影响是连续的。
- en: Formulation of Problem
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题的公式化
- en: In reality, the underlying function which maps the inputs (candidate solutions)
    to output (objective) is a black box and cannot be represented mathematically.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，将输入（候选解）映射到输出（目标）的底层函数是一个黑箱，无法用数学方法表示。
- en: If we could, an analytical solution can be obtained directly. However, in dealing
    with a black box, we will perform *sampling*. A naïve approach would then be to
    perform a grid search. At the end of this article, you will have the tools to
    do much better, and more importantly, understand why it works.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以的话，可以直接获得解析解。然而，在处理黑箱时，我们将进行*采样*。一个天真的方法是执行网格搜索。在本文末尾，你将掌握更好的工具，更重要的是，理解为什么它有效。
- en: Let’s translate the supply-chain problem and black box into the following mathematical
    equation (to have something to work with). While at it, we will import all the
    required libraries.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将供应链问题和黑箱转化为以下数学方程式（以便于操作）。同时，我们将导入所有需要的库。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice how everything is deliberately intertwined. This is because if a simple
    function where components are added (for example, below) had been used, a grid
    search can be performed with order O(n²) instead of O(n⁸). This would also not
    be consistent with reality, because we cannot naively solve for an optimal warehouse
    location independent of where the production facility and retail stores are located.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意一切是如何被故意纠缠在一起的。这是因为如果使用一个简单的组件加法函数（例如，下方所示），可以执行O(n²)的网格搜索而不是O(n⁸)。这也与现实不一致，因为我们不能天真地解决生产设施和零售店位置独立的最佳仓库位置问题。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The objective of the problem will be to find (*x*₁, *y*₁, *x*₂, *y*₂, *x*₃,
    *y*₃, *x*₄, *y*₄), such that the output given by `blackbox` is as high as possible,
    without knowing the underlying equation. To make the problem realistic, we add
    noise to the sampling process. Of course, we could simply repeat the measurements
    at each point and take the average, but a robust search algorithm ought to perform
    well even without doing so.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的目标是找到(*x*₁, *y*₁, *x*₂, *y*₂, *x*₃, *y*₃, *x*₄, *y*₄)，使得`blackbox`给出的输出尽可能高，而不知道底层方程。为了使问题更具现实性，我们在采样过程中加入噪声。当然，我们可以简单地在每个点重复测量并取平均值，但一个鲁棒的搜索算法即使没有这样做也应能表现良好。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Formulation of Solution
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案的公式化
- en: 'Let’s start with the basic building block of PSO — a particle. A particle is
    a candidate solution vector, and carries its personal best and a set of vectors
    which determines the extent of personal influence and social influence. On each
    iteration, each particle *i* explores a new solution based on its velocity:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从PSO的基本构建块——粒子开始。一个粒子是一个候选解向量，携带其个人最佳解和一组向量，这些向量决定了个人影响和社会影响的程度。在每次迭代中，每个粒子*i*根据其速度探索新的解：
- en: '![](../Images/11f18f9959704099b7deead0a4d22607.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11f18f9959704099b7deead0a4d22607.png)'
- en: All images by author unless otherwise stated.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图像均为作者提供，除非另有说明。
- en: This velocity is governed by its inertial, along with an inclination towards
    both its personal best and the population’s global best solution. [1]
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该速度受其惯性控制，同时也受到个人最佳解和群体全局最佳解的倾斜影响。[1]
- en: '![](../Images/b47ceed15d26f36739fa5705abf07f03.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b47ceed15d26f36739fa5705abf07f03.png)'
- en: Velocity of each particle determined by three components.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个粒子的速度由三个组件决定。
- en: '*w* is the propensity for the particle to continue along its previous trajectory,
    while *ϕ*₁ and *ϕ*₂ can be seen as the learning rate towards the personal and
    global best. Having inertia is a good idea, because if we are already heading
    in a supposedly good direction previously, it makes sense to keep up at it. In
    fact, this concept of momentum is also present in Adam optimizer used in updating
    the weights of neural networks during gradient descent.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*w*是粒子继续沿其先前轨迹的倾向，而*ϕ*₁和*ϕ*₂可以看作是对个人和全球最佳的学习率。拥有惯性是个好主意，因为如果我们之前已经朝着一个假设的良好方向前进，那么继续保持是合理的。事实上，这种动量概念也存在于Adam优化器中，用于在梯度下降过程中更新神经网络的权重。'
- en: The personal best, and even global best, are based on what had been found thus
    far. Chances are, some aspects (ie. dimensions) of those are good, at least relatively
    speaking, but not all. However, we do not know which dimensions should be retained,
    and therefore simply try various combinations. In the same spirit of Evolutionary
    Algorithms, what matters is the *best* particle and not the average population,
    hence there is only upside potential when it comes to exploration.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 个人最佳，甚至全球最佳，是基于迄今为止发现的内容。可能有些方面（即维度）较好，至少相对而言，但不是全部。然而，我们不知道哪些维度应该保留，因此只能尝试各种组合。秉持进化算法的精神，重要的是*最佳*粒子而不是平均种群，因此探索时只有上升潜力。
- en: To put this concept into mathematical equations, we have vectors *U*₁ and *U*₂
    randomly drawn from a uniform distribution, multiplied by the respective learning
    rates *ϕ*₁ and *ϕ*₂. Each particle has an affinity towards its personal best and
    global best, to varying degrees along the different dimensions. Collectively,
    we can write the following for a `Particle` class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个概念转化为数学方程，我们有向量*U*₁和*U*₂从均匀分布中随机抽取，乘以各自的学习率*ϕ*₁和*ϕ*₂。每个粒子对其个人最佳和全球最佳有不同维度上的亲和力。综合来看，我们可以为`Particle`类写出如下代码。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that I had blended *ϕ*₁*U*₁ and *ϕ*₂*U*₂ into *r*₁ and *r*₂, respectively,
    for (very slight) computational savings. Essentially, I had prescribed the learning
    rate to be of order 1, to save time for this simple problem. You could also use
    `random.uniform(0,0.1)` or some other range as you deem fit.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我将*ϕ*₁*U*₁和*ϕ*₂*U*₂分别合并为*r*₁和*r*₂，以便（非常轻微地）节省计算。实际上，我将学习率规定为1的数量级，以节省这个简单问题的时间。你也可以使用`random.uniform(0,0.1)`或你认为合适的其他范围。
- en: Moving on, a **swarm** comprises a large number of particles. Each particle
    is created independently, and has its own unique affinity towards different dimensions
    of the personal and global best. In each iteration, all particles search a nearby
    solution as determined by its ‘velocity’, and keep track of its velocity as shown
    at the beginning of this section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，一个**群体**包含大量粒子。每个粒子是独立创建的，并且对个人最佳和全球最佳的不同维度有其独特的亲和力。在每次迭代中，所有粒子根据其‘速度’搜索附近的解决方案，并跟踪其速度，如本节开头所示。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The implementation can be completed as follows. Here, the population comprises
    2000 particles as an illustration. Each particle has a noisy measurement, but
    noise is removed from the final solution to get an accurate measure of the algorithm’s
    performance. Notice that `gbest` need not be updated in every iteration. This
    is because there is no guarantee that the solution improves each time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可以如下完成。这里，种群包括2000个粒子作为示例。每个粒子都有一个噪声测量值，但噪声会从最终解决方案中去除，以获得算法性能的准确度量。注意，`gbest`不需要在每次迭代中更新。这是因为没有保证每次解决方案都会改进。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Results
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: A solution is found in just a couple of seconds. For fairness, I repeated the
    experiment ten times, deleting `swarm` and reinitializing everything in each of
    the loop. The results inevitably vary, given that each particle had been initialized
    randomly with emphasis on different components.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需几秒钟即可找到解决方案。为了公平起见，我重复了十次实验，每次循环都删除`swarm`并重新初始化所有内容。结果不可避免地有所不同，因为每个粒子都被随机初始化，侧重于不同的组件。
- en: '![](../Images/4afe9a84dbe88ceb41622ad3914db8b8.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4afe9a84dbe88ceb41622ad3914db8b8.png)'
- en: 10 repetitions of PSO, each with 200 iterations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 进行10次PSO，每次有200次迭代。
- en: Without knowledge of PSO or another decent search algorithm, your alternative
    is to do a brute force grid search. Let’s see how this approach compares with
    PSO.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有PSO或其他优秀的搜索算法，你的替代方案是进行暴力网格搜索。让我们看看这种方法与PSO的比较如何。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Even with an extremely coarse search of just 11 points per dimension (ie. splitting
    into tenths), it requires 10⁸ computations of the black box function. On my computer,
    it takes more than 20 minutes. Note that this is under ‘best performance’ mode,
    and nothing else is running in the background; not even music (I went for a coffee
    break while waiting). In real life, each computation could involve a simulation
    which takes much longer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在每个维度上仅进行11个点（即分成十分之一）的极其粗略搜索，也需要进行10⁸次黑箱函数计算。在我的计算机上，这需要超过20分钟。请注意，这是在“最佳性能”模式下，并且背景中没有其他程序运行；甚至没有音乐（我在等待期间去喝了咖啡）。在现实中，每次计算可能涉及一个需要更长时间的模拟。
- en: '![](../Images/866ab8d7748c77b3002214ca2f992708.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/866ab8d7748c77b3002214ca2f992708.png)'
- en: Time taken to complete the grid search across eight dimensions, and the corresponding
    best solution and value of the objective function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完成八维网格搜索所需的时间，以及对应的最佳解决方案和目标函数值。
- en: Using just a tiny fraction of the computational budget, PSO solved the problem
    (median 10.61, max 10.63) just as well as the brute force grid search, which settled
    on 10.61\. It is important to note that we are only dealing with 8 dimensions
    here. If we are dealing with the likes of 1000 dimensions, grid search is simply
    not feasible, and the benefits of PSO will be amplified.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用极少的计算预算，PSO解决了问题（中位数10.61，最大10.63），效果与蛮力网格搜索（最终值10.61）一样好。值得注意的是，我们这里只涉及8维。如果涉及1000维等问题，网格搜索显然不可行，而PSO的好处将得到放大。
- en: Visualization
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化
- en: Let’s take a look at how the particles are distributed through the iterations.
    Although it is impossible to visualize things in 8 dimensions, we can focus on
    two dimensions each time, while neglecting the other components.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看粒子在迭代中的分布情况。尽管在8维中可视化事物是不可能的，我们可以每次关注两个维度，同时忽略其他组件。
- en: In the plot below, the heatmap is the objective value as we vary only two dimensions
    while keeping all 6 others fixed at the value of `swarm.gbest_particle` for that
    particular iteration. Therefore, each snapshot truly applies to only one single
    particle (and there is no practical way to present 2000 heatmaps concurrently).
    It gives some idea nonetheless, and is better than an empty background.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，热图展示的是在仅改变两个维度的同时，保持其他6个维度为该特定迭代的`swarm.gbest_particle`值的目标值。因此，每个快照实际上仅适用于一个粒子（且没有实际方法同时呈现2000个热图）。尽管如此，它仍然提供了一些想法，胜于空白背景。
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using the `imageio` library to create gif as [shared previously](https://medium.com/towards-data-science/a-cornerstone-of-rl-td-%CE%BB-and-3-big-names-2e547b37c05),
    we can put all the figures together to form the following gif.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`imageio`库创建gif，如[之前共享的](https://medium.com/towards-data-science/a-cornerstone-of-rl-td-%CE%BB-and-3-big-names-2e547b37c05)，我们可以将所有图形组合成以下gif。
- en: The white dot represents the position of `swarm.gbest_particle`, while the other
    1999 particles are represented by the smaller blue dots.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 白点表示`swarm.gbest_particle`的位置，而其他1999个粒子由较小的蓝点表示。
- en: It might be tempting to jump to conclusions and claim that the PSO agent is
    “stupid” and could simply have moved slightly towards a brighter region on the
    map. Such an argument would be flawed. The heatmap which we see is only a slice
    of the multi-dimensional solution space, and as seen in the gif, can vary substantially
    when the other dimensions take different values. It is not a matter of just greedily
    optimizing component dimensions piecewise. Had different combinations of the representation
    been taken, say for example, *x*₁ with *y*₃, or *x*₄ with *y*₂, the story would
    be different. There is no one-size-fits-all technique to make everyone happy simultaneously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会很诱人急于得出结论，声称PSO代理是“愚蠢的”，只需稍微朝地图上更亮的区域移动即可。这样的论点是有缺陷的。我们看到的热图只是多维解决空间的一部分，正如gif中所示，当其他维度取不同的值时，它可以有很大变化。这不仅仅是贪婪地逐个优化组件维度的问题。如果采用了不同的表示组合，比如说*x*₁与*y*₃，或*x*₄与*y*₂，情况会有所不同。没有一种万全的技术可以同时让所有人满意。
- en: Ultimately, the results speak for itself, and the fact that PSO solved the problem
    within seconds is evident of its usefulness.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，结果说明了一切，PSO在几秒钟内解决问题的事实证明了其有效性。
- en: Conclusion
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we saw how PSO can be implemented to search for an optimal
    solution to an unknown black box in a efficient manner, along with an appreciation
    of what goes on behind the scenes to make this possible.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探讨了如何高效地实现PSO来寻找未知黑箱的最优解，并了解了实现这一目标的幕后过程。
- en: I envision continuing with a series of these nature-inspired algorithms. After
    all, nature is beautiful. Math is beautiful. Nature in Math? It has to be the
    best.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我设想继续进行一系列以自然为灵感的算法。毕竟，自然是美丽的。数学是美丽的。自然中的数学？这必定是最棒的。
- en: In my next article, I will explain the implementation of [ABC (Artificial Bee
    Colony)](/artificial-bee-colony-how-it-differs-from-pso-9c6831bfb552?sk=a7e8d75735fda2e6ed6c69898296210e),
    as well as compare it against PSO to look at the types of problems in which ABC
    fares better. Stay tuned.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的下一篇文章中，我将解释[ABC（人工蜂群）](/artificial-bee-colony-how-it-differs-from-pso-9c6831bfb552?sk=a7e8d75735fda2e6ed6c69898296210e)的实现方法，并与PSO进行比较，探讨ABC在何种问题上表现更佳。敬请关注。
- en: References
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] A. E. Eiben and J. E. Smith, [Introduction to evolutionary computing](https://link.springer.com/book/10.1007/978-3-662-44874-8)
    (2015), Springer-Verlag Berlin Heidelberg'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] A. E. Eiben 和 J. E. Smith, [进化计算导论](https://link.springer.com/book/10.1007/978-3-662-44874-8)
    (2015), Springer-Verlag Berlin Heidelberg'
