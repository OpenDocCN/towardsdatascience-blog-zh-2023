- en: Optimize Data Warehouse Storage with Views and Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化数据仓库存储：视图与表
- en: 原文：[https://towardsdatascience.com/optimize-data-warehouse-storage-with-views-and-tables-659dd588345d](https://towardsdatascience.com/optimize-data-warehouse-storage-with-views-and-tables-659dd588345d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/optimize-data-warehouse-storage-with-views-and-tables-659dd588345d](https://towardsdatascience.com/optimize-data-warehouse-storage-with-views-and-tables-659dd588345d)
- en: The difference between tables and views and how to use them
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表与视图的区别及其使用方法
- en: '[](https://madison-schott.medium.com/?source=post_page-----659dd588345d--------------------------------)[![Madison
    Schott](../Images/0b82d0dd48629641abb439cef23ebe04.png)](https://madison-schott.medium.com/?source=post_page-----659dd588345d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----659dd588345d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----659dd588345d--------------------------------)
    [Madison Schott](https://madison-schott.medium.com/?source=post_page-----659dd588345d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://madison-schott.medium.com/?source=post_page-----659dd588345d--------------------------------)[![Madison
    Schott](../Images/0b82d0dd48629641abb439cef23ebe04.png)](https://madison-schott.medium.com/?source=post_page-----659dd588345d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----659dd588345d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----659dd588345d--------------------------------)
    [Madison Schott](https://madison-schott.medium.com/?source=post_page-----659dd588345d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----659dd588345d--------------------------------)
    ·6 min read·Mar 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----659dd588345d--------------------------------)
    ·阅读时间6分钟·2023年3月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/836edeb9f20b6e4112718edec85e7a93.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/836edeb9f20b6e4112718edec85e7a93.png)'
- en: Photo by [Sophia Baboolal](https://unsplash.com/@sophiababoolal?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/table?orientation=landscape&utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Sophia Baboolal](https://unsplash.com/@sophiababoolal?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/s/photos/table?orientation=landscape&utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: With the rise of modern data stacks, many companies are moving their databases
    from on-prem to the cloud. They are beginning to utilize data warehouse tools
    like Snowflake, Redshift, and DuckDB in order to take advantage of all of the
    benefits of the cloud.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着现代数据技术堆栈的兴起，许多公司正在将其数据库从本地迁移到云端。他们开始利用像 Snowflake、Redshift 和 DuckDB 这样的数据仓库工具，以充分发挥云的所有优势。
- en: While these data warehouses typically help smaller companies save money, compute
    costs on the cloud can easily rack up. It is essential that you optimize your
    warehouse for storage and computing costs. This means you need to understand the
    best way to store your data so that it can be utilized by data teams in a cost-effective
    manner.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些数据仓库通常帮助较小的公司节省开支，但云上的计算成本很容易累积。因此，优化存储和计算成本至关重要。这意味着你需要了解最佳的数据存储方式，以便数据团队能够以具有成本效益的方式使用这些数据。
- en: In this article, we will discuss the difference between views and tables, the
    different types of views that exist in data warehouses, and the use cases for
    each of them. By the end of this article, you should be able to identify the best
    option for storing your different datasets while saving on costs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将讨论视图与表的区别、数据仓库中存在的不同类型视图以及每种视图的使用场景。阅读完本文后，你应该能够确定存储不同数据集的最佳选项，同时节省成本。
- en: What is a view?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是视图？
- en: A view is **a defined query that sits on top of a table**. Unlike a table, it
    doesn’t store the actual data. It always contains the latest data because it reruns
    every time it is queried. Whereas a table is only as fresh as the last time it
    was created or updated, no matter when you query it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是**一个定义的查询，位于表的顶部**。与表不同，它不存储实际数据。它始终包含最新的数据，因为每次查询时都会重新运行。而表的内容仅与上次创建或更新时一样，无论你什么时候查询。
- en: There are two main types of views- **non-materialized** and **materialized**
    views.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 视图主要有两种类型：**非物化视图**和**物化视图**。
- en: Non-materialized Views
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非物化视图
- en: Non-materialized views are what people typically think of when they think about
    a view. This type only runs when the view is actually queried, otherwise, it is
    not stored in the database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 非物化视图是人们通常想到的视图。这种类型的视图仅在实际查询时运行，否则不会存储在数据库中。
- en: Non-materialized views are great because they take up no storage space, which
    means you don’t have to worry about paying for a lot of storage. They also only
    run when they are needed, saving you money in computing resources. This means,
    if a source table isn’t needed for months or weeks at a time, you won’t have to
    pay to maintain it. You only pay for it once the analyst or analytics engineer
    resumes working with that table.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 非物化视图很棒，因为它们不占用存储空间，这意味着你不必担心为大量存储付费。它们也只有在需要时才运行，从而节省计算资源费用。这意味着，如果源表几个月或几周都不需要，你无需为其维护付费。只有当分析师或分析工程师重新开始使用该表时，你才需为其付费。
- en: The best part? Non-materialized views still have all of the same functions as
    a table! You can perform joins, aggregations, and window functions on them if
    need be.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最棒的部分？非物化视图仍然具有与表相同的所有功能！如果需要，你可以在它们上面执行连接、聚合和窗口函数。
- en: Unfortunately, just like with everything, there is always a con that comes with
    all of the pros. Non-materialized views are not ideal for large amounts of data
    with complex logic since this logic is run every time the view is queried.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，就像其他所有事物一样，所有优点背后总会有缺点。非物化视图不适合处理大量数据和复杂逻辑，因为每次查询视图时，这些逻辑都会被执行。
- en: For example, I typically create all of my source data tables as non-materialized
    views that reference my raw data. These are simple SELECT statements that contain
    basic functions such as column renaming, casting, and data cleaning. Because their
    underlying logic is simple, they run fast whenever I query these source tables.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我通常将所有的源数据表创建为非物化视图，这些视图引用我的原始数据。这些是简单的 SELECT 语句，包含基本函数，如列重命名、数据类型转换和数据清理。由于它们的底层逻辑简单，所以每当我查询这些源表时，它们运行得很快。
- en: If I were to create complex data models containing joins and window functions
    as views, chances are my views would never load when I queried them. Or they would
    just take an extremely long time! Obviously, this isn’t ideal. You would end up
    using way more computing power to run this query on a view than you would by creating
    that view as a table instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我创建包含连接和窗口函数的复杂数据模型作为视图，可能在查询时这些视图永远不会加载。或者它们需要极其长的时间！显然，这不是理想的情况。你将会花费更多的计算能力来运行视图查询，而不是将视图创建为表。
- en: '‍**Remember: Non-materialized views are great to utilize, but only when the
    logic creating them is a simple SELECT statement.**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**记住：非物化视图非常适合使用，但仅当创建它们的逻辑是简单的 SELECT 语句时。**'
- en: Materialized Views
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物化视图
- en: Materialized views are the less common view out of the two we discuss. Materialized
    views behave more like a table. They are faster to query and considered more accessible
    than non-materialized views. And, just like a table, they take up more storage
    space in your data warehouse and require more computing resources. This in turn
    means they are the more expensive option out of the two types of views.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 物化视图在我们讨论的两种视图中较为少见。物化视图的行为更像表。它们查询速度更快，被认为比非物化视图更易于访问。并且，就像表一样，它们在数据仓库中占用更多的存储空间，需要更多的计算资源。这意味着它们是两种视图中更昂贵的选项。
- en: 'It’s not often that you will want to utilize them. In fact, I’ve never come
    across a use case where it made sense to use them. According to [Snowflake’s documentation](https://docs.snowflake.com/en/user-guide/views-materialized),
    you should only use materialized views if ALL of the following are true:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会经常需要使用它们。事实上，我从未遇到过一个合理的使用场景。根据[Snowflake 的文档](https://docs.snowflake.com/en/user-guide/views-materialized)，你应该仅在以下所有条件都满足时使用物化视图：
- en: The results of the view are used frequently
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图的结果被频繁使用
- en: The query powering the view uses a lot of resources
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 驱动视图的查询使用了大量资源
- en: The view changes frequently
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图变化频繁
- en: It’s very rare for all three of these to be the case with your base/staging,
    intermediate, and core dbt models. Base/staging models don’t consume a lot of
    resources and intermediate and core data models don’t change frequently. Of course,
    there are always exceptions to this, but I have yet to experience a scenario when
    this is true.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这三者同时适用于你的基础/暂存、中间和核心 dbt 模型的情况非常少见。基础/暂存模型不会消耗大量资源，而中间和核心数据模型变化不频繁。当然，总会有例外情况，但我还没遇到过这种情况。
- en: How these views should be used in data modeling
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这些视图在数据建模中的使用方式
- en: If you are an analytics engineer, then you may be wondering how un-materialized
    and materialized views can be used in data modeling. Let’s look at dbt base (or
    staging) models as well as core models.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是分析工程师，你可能会想知道未物化视图和物化视图在数据建模中如何使用。让我们深入了解一下dbt基础（或阶段）模型以及核心模型。
- en: ‍dbt Base Models
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ‍dbt基础模型
- en: 'dbt base models exist as views on top of your raw data. They are created as
    un-materialized views in order to keep the integrity of the raw data while utilizing
    proper naming conventions and company standards. The code in these models is basic
    SQL select statements that read directly from the raw data ingested into your
    warehouse via ELT from ingestion tools like Airbyte. A typical base model looks
    like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: dbt基础模型作为视图存在于你的原始数据之上。它们被创建为未物化视图，以保持原始数据的完整性，同时利用适当的命名约定和公司标准。这些模型中的代码是从原始数据中直接读取的基本SQL选择语句，通过像Airbyte这样的摄取工具进行ELT。一个典型的基础模型如下：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '‍If you look at the underlying logic of this file in dbt, it actually compiles
    in Snowflake (my data warehouse of choice)to look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ‍如果你查看dbt中此文件的底层逻辑，它实际上会在Snowflake（我首选的数据仓库）中编译为如下所示：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Because you are only using basic date functions and renaming columns, the views
    are still fast to query on demand. This in turn saves storage space that you would
    otherwise use to save an almost identical copy of the raw data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你仅使用基本的日期函数和重命名列，视图在按需查询时仍然很快。这反过来节省了你原本会用来保存几乎相同的原始数据副本的存储空间。
- en: dbt Core Models
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dbt核心模型
- en: Your core models in dbt are more complex than your base models and often contain
    multiple CTEs, joins, and window functions. While you may have a specific use
    case to create these as materialized views, you will most likely create these
    as a table in your data warehouse. Tables are ideal for handling complex transformations
    that will take a long time to run if stored as a view.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在dbt中，你的核心模型比基础模型更复杂，通常包含多个CTE、联接和窗口函数。虽然你可能有特定的用例来将这些创建为物化视图，但你很可能会将这些创建为数据仓库中的表。表对于处理复杂的转换非常理想，如果将其存储为视图，会需要较长的运行时间。
- en: 'Here is a code example of one of my core data models:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我一个核心数据模型的代码示例：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When compiled in Snowflake as SQL, the code will look like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Snowflake中编译为SQL时，代码将如下所示：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that this is being created as a table within Snowflake rather than a
    view. This is ideal for any data that will be directly used in a BI tool, which
    most core data models are. They can be easily queried on demand without the underlying
    logic needing to be run. This ensures fast dashboards that stakeholders can trust.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里创建的是一个Snowflake中的表而不是视图。这对于任何将直接用于BI工具的数据是理想的，大多数核心数据模型都是这样。它们可以按需轻松查询，无需运行底层逻辑。这确保了快速的仪表板，能够让利益相关者信赖。
- en: Conclusion
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Views and tables exist for different reasons in your data warehouse. Views do
    not store the actual data and can be used as a tool to save money with simple
    queries that sit on top of other tables. Tables should be utilized to store data
    generated by more complex logic, ensuring performance and availability are always
    high.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 视图和表在数据仓库中存在不同的原因。视图不存储实际数据，可以作为一个工具来节省开支，通过简单查询在其他表之上运行。表应当用于存储由更复杂逻辑生成的数据，确保性能和可用性始终较高。
- en: When used correctly, non-materialized views are a great tool for saving money
    within Snowflake without sacrificing performance. I highly recommend using them
    for your base models within dbt in order to create high-quality data that follows
    all of the company standards you’ve put in place. And, don’t forget to use tables
    with your core dbt models. The performance increase is worth the higher cost!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正确使用时，非物化视图是在Snowflake中节省开支的好工具，同时不牺牲性能。我强烈推荐在dbt中将其用于你的基础模型，以创建符合你设定的公司标准的高质量数据。而且，不要忘记在核心dbt模型中使用表。性能提升是值得更高成本的！
- en: For more on [analytics engineering](https://madisonmae.substack.com/), subscribe
    to my free weekly newsletter where I share learning resources, tutorials, best
    practices, and more.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多[分析工程](https://madisonmae.substack.com/)的信息，订阅我的免费每周通讯，我会分享学习资源、教程、最佳实践等。
- en: Check out my first ebook, [The ABCs of Analytics Engineering](https://madisonmae.gumroad.com/l/learnanalyticsengineering),
    an all-in-one guide to getting started in the role of analytics engineering.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我的第一本电子书，[分析工程的基础知识](https://madisonmae.gumroad.com/l/learnanalyticsengineering)，这是一本关于如何开始从事分析工程角色的全方位指南。
