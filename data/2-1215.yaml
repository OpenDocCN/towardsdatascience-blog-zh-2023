- en: How to *Not* Get Machine Learning Models in Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何 *避免* 将机器学习模型投入生产
- en: 原文：[https://towardsdatascience.com/how-to-not-get-machine-learning-models-in-production-742e6b79847d](https://towardsdatascience.com/how-to-not-get-machine-learning-models-in-production-742e6b79847d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-not-get-machine-learning-models-in-production-742e6b79847d](https://towardsdatascience.com/how-to-not-get-machine-learning-models-in-production-742e6b79847d)
- en: A satirical guide to avoiding getting production anywhere near your ML models
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一份讽刺性的指南，避免将生产过程与您的机器学习模型接触
- en: '[](https://medium.com/@ebbeberge?source=post_page-----742e6b79847d--------------------------------)[![Eirik
    Berge, PhD](../Images/7507374e75980fd0c1056af3cd299eaa.png)](https://medium.com/@ebbeberge?source=post_page-----742e6b79847d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----742e6b79847d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----742e6b79847d--------------------------------)
    [Eirik Berge, PhD](https://medium.com/@ebbeberge?source=post_page-----742e6b79847d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ebbeberge?source=post_page-----742e6b79847d--------------------------------)[![Eirik
    Berge, PhD](../Images/7507374e75980fd0c1056af3cd299eaa.png)](https://medium.com/@ebbeberge?source=post_page-----742e6b79847d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----742e6b79847d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----742e6b79847d--------------------------------)
    [Eirik Berge, PhD](https://medium.com/@ebbeberge?source=post_page-----742e6b79847d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----742e6b79847d--------------------------------)
    ·8 min read·Jul 8, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----742e6b79847d--------------------------------)
    ·8分钟阅读·2023年7月8日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/0d63b46131824d9b39a8fc7793989034.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d63b46131824d9b39a8fc7793989034.png)'
- en: Photo by [Unpad Street Feeding Animal Friend](https://unsplash.com/@unpadstreetfeeding?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Unpad Street Feeding Animal Friend](https://unsplash.com/@unpadstreetfeeding?utm_source=medium&utm_medium=referral)
    提供，在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Overview of Your Journey
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您旅程的概述
- en: '[Introduction — No Production, No Problems!](#a6cb)'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[引言 — 没有生产，没问题！](#a6cb)'
- en: '[Notebooks can be Used for Everything!](#b893)'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[笔记本可以用来做所有事情！](#b893)'
- en: '[Why Automate When You have the Time?](#8f4f)'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[为什么要在有时间的时候自动化？](#8f4f)'
- en: '[Testing? Just Never Make Mistakes!](#15c2)'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[测试？只需从不出错！](#15c2)'
- en: '[Dependency Management in my Head!](#677b)'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[我的头脑中的依赖管理！](#677b)'
- en: '[Wrapping Up](#c801)'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[总结](#c801)'
- en: 1 — Introduction — No Production, No Problems!
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 — 引言 — 没有生产，没问题！
- en: As data scientists, data engineers, and ML engineers we are bombarded with information
    about ML models in production. Hundreds of videos and thousands of blogs have
    tried their best to help us avoid the situation we find ourselves in. But to no
    avail. **Right now, it pains me to say, there are ML models in production all
    around the world.** Generating value to millions of unknowing people. On every
    street corner. And we tolerate it, just because it‘s common.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家、数据工程师和机器学习工程师，我们被有关生产中机器学习模型的信息淹没。数以百计的视频和数以千计的博客尽力帮助我们避免当前的困境。然而徒劳无功。**现在，我痛苦地说，全球各地都有机器学习模型在生产中。**
    这些模型正在为数百万无知的人创造价值。每个街角都有。我们容忍它，只因为它很常见。
- en: When going to conferences, I listen to nervous data scientists on stage in front
    of big audiences talk about production. It’s clear from their forehead sweat and
    clammy hands that the situation is serious. This has been going on for many years,
    but we didn’t trust their prophesies. And look at us now. We should have listened.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在参加会议时，我听到紧张的数据科学家在大观众面前谈论生产。从他们的额头汗水和湿漉漉的手中可以看出情况的严重性。这种情况已经持续了很多年，但我们没有相信他们的预言。现在看看我们自己。我们应该听从的。
- en: This is no time for anyone to say “I told you so”. We need to band together
    to retake what is ours. We need to to unilaterally profess disdain for the modern
    ways of doing things. We need to go back to better times, **when ML models in
    production was just a nonbinding bullet point on job adverts for middle-sized
    companies.**
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不是有人说“我早就告诉过你们”的时候。我们需要团结起来，夺回我们的领地。我们需要单方面表达对现代做事方式的厌恶。我们需要回到更好的时代，**当时生产中的机器学习模型只是中型公司招聘广告上的一个非约束性要点。**
- en: Someone has to take the lead and guide this journey of redemption. And who better
    than me? Without intending to brag, I’ve made several ML models that did not reach
    production. Some of them were not even close. I can share with you some of the
    best tips so that you don’t need to replicate your development environment — because
    there will be nothing else.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 必须有人带头引导这次救赎之旅。而谁比我更合适呢？不打算吹嘘，我已经做了几个没有投入生产的 ML 模型。其中一些甚至离生产都很远。我可以与你分享一些最佳技巧，这样你就不需要复制你的开发环境——因为将不会有其他环境。
- en: I’ve clearly divided each following section into two parts. The first is called
    **The Righteous Way**. It tells you how to avoid ML models in production. The
    second is called **The Sinful Way**. This lets you know what to avoid, as this
    is a fast track to getting ML model in production. Don’t get them confused!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将接下来的每一部分清晰地分为两个部分。第一部分叫做**正道**。它告诉你如何避免将 ML 模型投入生产。第二部分叫做**歪道**。这让你知道应该避免什么，因为这是将
    ML 模型快速投入生产的捷径。不要搞混！
- en: 2 — A Single Notebook can be Used for Everything!
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 — 一个单一的笔记本可以用来做所有事情！
- en: The Righteous Way
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正道
- en: I’ve found that one of the simplest ways to avoid getting ML models in production
    is simply to **have your entire code base in a single Jupyter notebook file.**
    This includes model training, model predictions, data processing, and even configuration
    files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现避免将 ML 模型投入生产的最简单方法之一就是**将你的整个代码库放在一个单一的 Jupyter 笔记本文件中**。这包括模型训练、模型预测、数据处理，甚至配置文件。
- en: Think about it. When all the sensitive configuration files are within your main
    document, it becomes virtually impossible to upload anything to GitHub or Azure
    DevOps without introducing major security risks. In addition, have you every tried
    to read a pull request from someone who has modified a file with 100.000 lines?
    The best response is to simply drop the remote hosting and version control all
    together.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 想想看。当所有敏感的配置文件都在你的主文档中时，几乎不可能在不引入重大安全风险的情况下将任何东西上传到 GitHub 或 Azure DevOps。此外，你是否曾尝试阅读一个修改了
    100,000 行的文件的拉取请求？最好的回应就是干脆放弃远程托管和版本控制。
- en: This, my friend, puts us on the fast track to avoiding production. No remote
    hosting means that silos will be inevitable. And have you stopped to think about
    the cloud consumption costs of running the entire model training every time you
    need a prediction — remember that we only have a single Jupyter notebook for both
    training and testing. The **single notebook architecture** as I’ve proudly named
    it is simply genius.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这，我的朋友，把我们带上了避免生产的快车道。没有远程托管意味着孤岛将是不可避免的。你有没有停下来思考一下每次需要预测时运行整个模型训练的云消耗成本——记住，我们只有一个用于训练和测试的
    Jupyter 笔记本。我自豪地称之为**单一笔记本架构**的这种方法简直是天才之作。
- en: The Sinful Way
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 歪道
- en: Instead of the single notebook architecture, people have over time gone astray.
    They’ve started to **split their code, configurations, and documentation into
    multiple files.** These files unfortunately follow conventions that makes them
    easy to navigate. There are even tools like [Cookiecutter](https://drivendata.github.io/cookiecutter-data-science/)
    that provides easy-to-use templates structuring ML projects.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 相比单一笔记本架构，人们随着时间的推移走了歪路。他们开始**将代码、配置和文档拆分到多个文件中**。这些文件不幸的是遵循了使其易于导航的惯例。甚至还有像[Cookiecutter](https://drivendata.github.io/cookiecutter-data-science/)这样的工具，提供了结构化
    ML 项目的易用模板。
- en: The code itself is often divided into modular components like functions, classes,
    and files. This encourages reuse and improves the organization. Coding standards
    are enforced with [PEP8 standards](https://peps.python.org/pep-0008/) and automatic
    formatting tools like [Black](https://medium.com/towards-data-science/tired-of-pointless-discussions-on-code-formatting-a-simple-solution-exists-af11ea442bdc).
    There are even perverse blog posts [guiding data scientists to better software
    development practices](https://medium.com/towards-data-science/why-software-development-skills-are-essential-for-data-science-f53364670bd7).
    Disgusting!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 代码本身通常被划分为诸如函数、类和文件这样的模块化组件。这鼓励了重用并改善了组织结构。编码标准通过[PEP8标准](https://peps.python.org/pep-0008/)和[Black](https://medium.com/towards-data-science/tired-of-pointless-discussions-on-code-formatting-a-simple-solution-exists-af11ea442bdc)等自动格式化工具来强制执行。甚至还有一些恶心的博客帖子[指导数据科学家更好的软件开发实践](https://medium.com/towards-data-science/why-software-development-skills-are-essential-for-data-science-f53364670bd7)。真恶心！
- en: Not only is the source code structured. There are tools like [Data Version Control
    (DVC)](https://dvc.org/) for **versioning big data**, or tools like [MLflow](https://mlflow.org/docs/latest/projects.html)
    for **structuring ML model packaging**. And none of these are even particularly
    difficult to get started with. Stay clear of this!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是源代码被结构化。还有像[数据版本控制（DVC）](https://dvc.org/)这样的工具用于**大数据版本控制**，或者像[MLflow](https://mlflow.org/docs/latest/projects.html)这样的工具用于**结构化机器学习模型打包**。这些工具中的任何一个实际上都不难上手。远离这些吧！
- en: 3 — Why Automate When You have the Time?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 — 为什么在有时间的时候还要自动化？
- en: '![](../Images/4c824725ae1e391767c68e9a1ba1038b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c824725ae1e391767c68e9a1ba1038b.png)'
- en: Photo by [Aron Visuals](https://unsplash.com/@aronvisuals?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Aron Visuals](https://unsplash.com/@aronvisuals?utm_source=medium&utm_medium=referral)拍摄，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The Righteous Way
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正义的方式
- en: Back in the day, things were different. We felt ownership with our code. This
    ownership came from revisiting the code routinely with regular time intervals.
    **That’s right, we ran all the code manually.** This is clearly the way god intended,
    and I am tired of pretending that it’s not.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，情况有所不同。我们对我们的代码有一种归属感。这种归属感来自于定期重新审视代码。**没错，我们都是手动运行所有代码的。** 这显然是上天的旨意，我已经厌倦了假装不是这样。
- en: The manually approach gave you complete control. There was no need to check
    if a data pipeline had been initiated at 3 a.m. — you were there! Meticulously
    typing out execution commands from memory every night. When you have the time,
    why rely on [CRON expressions](https://crontab.cronhub.io/) or [Airflow DAGs](https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html)
    to get the job done? At the end of the day, can you really trust anyone?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 手动方法让你拥有完全的控制权。不需要检查数据管道是否在凌晨3点启动——你就在那儿！每晚都仔细地从记忆中输入执行命令。当你有时间的时候，为什么要依赖[CRON
    表达式](https://crontab.cronhub.io/)或[Airflow DAGs](https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html)来完成工作？到头来，你真的能相信别人吗？
- en: This manual approach turned out to be a blessing against ML models in production.
    [Data drift](/data-drift-part-1-types-of-data-drift-16b3eb175006) happens to ML
    models, and then the models need to be retrained. But with the manual approach,
    someone have to sit put and watch for when sufficient data drift has happened.
    In this economy? Not likely! It’s probably better to drop the whole production
    aspect and return to better ways.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种手动方法被证明在生产环境中对机器学习模型是个福音。[数据漂移](/data-drift-part-1-types-of-data-drift-16b3eb175006)发生在机器学习模型上，然后模型需要重新训练。但使用手动方法，必须有人坐镇监视数据漂移是否足够。在这种经济环境下？不太可能！也许还是放弃整个生产环节，回到更好的方法上来吧。
- en: The Sinful Way
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堕落的方式
- en: 'Let’s talk about the elephant in the room: **Continuous integration & Continuous
    delivery (CI/CD)**. I know, it makes my blood boil as well. Nowadays, people automatically
    check for code quality and run tests before updating the code base. Tools like
    [GitHub Actions](https://docs.github.com/en/actions) or [Azure DevOps Pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops)
    are also used to automate retraining of ML models in production. Do we even stand
    a chance?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈明显的问题：**持续集成与持续交付（CI/CD）**。我知道，这也让我感到愤怒。现在，人们会在更新代码库之前自动检查代码质量并运行测试。像[GitHub
    Actions](https://docs.github.com/en/actions)或[Azure DevOps Pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops)这样的工具也用于自动化生产环境中机器学习模型的再训练。我们还有机会吗？
- en: There is more! People now use tools like [Terraform](https://www.terraform.io/)
    to set up infrastructure necessary to support ML model in production. With this
    infrastructure as code approach, environments can be replicated across a wide
    range of settings. **Suddenly ML models in production in Azure are suddenly in
    production in AWS!**
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多！现在人们使用像[Teraform](https://www.terraform.io/)这样的工具来设置支持生产环境中机器学习模型所需的基础设施。通过这种基础设施即代码的方法，环境可以在各种设置中复制。**突然间，生产环境中的机器学习模型从Azure变成了AWS！**
- en: There are also tools like [Airflow](https://airflow.apache.org/) that help with
    the **orchestration of data pipelines**. Airflow ensures that preprocessing steps
    wait for the previous steps to complete before executing. It also gives you a
    GUI where you can inspect previous pipeline runs to see how things have gone.
    While these things seem simple, they can catch errors quickly before they propagate
    through your system and corrupt your data quality. High quality data is unfortunately
    key for successful ML models in production.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 还有像[Airflow](https://airflow.apache.org/)这样的工具帮助进行**数据管道的编排**。Airflow 确保预处理步骤在执行之前等待前一步骤完成。它还提供了一个
    GUI，你可以查看之前的管道运行记录，了解情况。虽然这些功能看似简单，但它们能在错误传播到系统并破坏数据质量之前迅速发现错误。不幸的是，高质量的数据对于成功的生产环境中的
    ML 模型至关重要。
- en: 4 — Testing? Just Never Make Mistakes!
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4 — 测试？就是不要犯错！
- en: The Righteous Way
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确的方式
- en: The philosophy of testing is a response to countless production failures and
    security breaches. The idea is to catch as many issues as possible before launching
    a product. While indeed noble, I think this is misguided. A much more simple approach
    reveals itself for those who pay attention. Precisely! It’s clear as day once
    you see it. **You should simply not write any mistakes.**
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的哲学是对无数生产失败和安全漏洞的回应。这个想法是尽可能多地发现问题，然后再推出产品。虽然确实很高尚，但我认为这是误导性的。对于那些关注的人，一个更简单的方法显现出来。正是这样！一旦你看到它，它就像白天一样清晰。**你只需不犯任何错误。**
- en: With mistake-free code, there is no need for tests. Even better, while you are
    100% certain about the validity of your code, others are less so inclined. They
    will doubt the correctness of your code. As such, they will avoid putting your
    ML models in production in the fear that everything will break. You know it wouldn't.
    But they don’t have to know that. Keep you pristine coding skills to yourself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有错误的代码，不需要测试。更好的是，当你对代码的有效性100%确信时，其他人则不那么确信。他们会怀疑你的代码的正确性。因此，他们将避免将你的 ML
    模型投入生产，担心一切会崩溃。你知道它不会。但他们不必知道这一点。把你完美的编码技巧留给自己。
- en: Not writing tests have the additional advantage that you get less documentation.
    **Sometimes tests are vital for letting others understand what your code should
    be doing.** Without tests, even less people will bother you, and you can continue
    on in peace.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不编写测试还有一个额外的好处，那就是你会获得更少的文档。**有时测试对帮助他人理解你的代码应该做什么至关重要。** 没有测试，甚至更少的人会打扰你，你可以继续平静地工作。
- en: The Sinful Way
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 罪恶的方式
- en: Writing tests has become common, even for ML models and data engineering pipelines.
    Two major classes are **unit tests** and **integration tests**. Unit tests, as
    the name suggests, test a single unit like a Python function whether it works
    as intended. Integration tests on the other hand test whether different components
    work seamlessly together. Let’s focus on unit tests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试已经变得很普遍，即使是对于 ML 模型和数据工程管道。主要有两类测试：**单元测试**和**集成测试**。正如名称所示，单元测试测试一个单独的单元，如
    Python 函数是否按预期工作。另一方面，集成测试测试不同组件是否无缝地协同工作。让我们关注单元测试。
- en: In Python, you have the built-in library [unittest](https://docs.python.org/3/library/unittest.html)
    for writing, you guessed it, unit tests. This is OOP-based and requires a bit
    of boilerplate code to get started. More and more people are using the external
    library [pytest](https://docs.pytest.org/en/7.4.x/) to write unit tests in Python.
    It is functional rather than OOP-based, and requires less boilerplate code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以使用内置的库[unittest](https://docs.python.org/3/library/unittest.html)来编写，正如你所猜到的，单元测试。这是基于
    OOP 的，需要一些样板代码才能开始。越来越多的人使用外部库[pytest](https://docs.pytest.org/en/7.4.x/)来编写 Python
    中的单元测试。它是功能性而非基于 OOP 的，并且需要较少的样板代码。
- en: Writing unit tests also has a side effect. It forces you to write code modularly.
    **Modular code that is well-tested break less often in production.** This is bad
    news for your ML models. If they don’t break in production, then they will stay
    there forever. When you think about it, then ML models breaking in production
    is them trying to escape. And who could blame them?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试还有一个副作用。它迫使你以模块化的方式编写代码。**经过充分测试的模块化代码在生产中发生故障的概率较低**。这对你的 ML 模型来说是坏消息。如果它们在生产中没有出现故障，那么它们将永远留在那里。考虑一下，ML
    模型在生产中出现故障就是它们试图逃脱。谁能怪它们呢？
- en: 5 — Dependency Management in my Head!
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 — 头脑中的依赖管理！
- en: The Righteous Way
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确的方式
- en: Managing dependencies is an important part of any ML project. This includes
    for instance knowing which Python libraries you’ve used. **My advice is to simply
    remember which libraries you’ve installed, the operating system you are using,
    the runtime version, and so on.** It’s not that hard, I’m sure there is even an
    app for keeping track of this.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 管理依赖项是任何机器学习项目的重要部分。这包括知道你使用了哪些Python库。**我的建议是简单地记住你安装了哪些库、你使用的操作系统、运行时版本等等。**
    这并不难，我相信甚至有应用程序可以帮助你跟踪这些。
- en: I do sometimes wake up at night and wonder if I have version 0.2.3 or version
    0.3.2 of scikit-learn running. It’s no matter! All the versions exist, so there
    shouldn’t be a problem…right? If I didn’t routinely solve dependency conflicts,
    then my dependency conflict skills would go stale.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我有时会在夜里醒来，想知道自己运行的是scikit-learn的0.2.3版本还是0.3.2版本。这没关系！所有版本都存在，所以应该没有问题……对吧？如果我不定期解决依赖冲突，那么我的依赖冲突技能就会生疏。
- en: The advantage of simply remembering your dependencies is that it becomes **difficult
    for others to run your code**. Especially if you don’t want to tell them all the
    dependency details. In this way, you can avoid someone suddenly getting the sneaky
    idea to lift your ML models to production.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅记住你的依赖项的优势在于**其他人很难运行你的代码**。尤其是当你不想告诉他们所有依赖细节时。这样，你可以避免有人突然产生偷偷将你的机器学习模型投入生产的想法。
- en: The Sinful Way
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 罪恶的方法
- en: People with bad memory skills have opted for the easy way out. They’ve looked
    for solutions that handle your dependencies for you. I swear, people get lazier
    every day! A simple approach to managing runtime versions and library dependencies
    is to use a **virtual environment** and a *requirements.txt* file. In Python,
    there are tools like [virtualenv](https://virtualenv.pypa.io/en/latest/) that
    allows you to set up virtual environments easily.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆力差的人选择了简单的办法。他们寻找可以为你处理依赖的解决方案。我发誓，人们每天都变得更懒惰！管理运行时版本和库依赖的简单方法是使用**虚拟环境**和*requirements.txt*文件。在Python中，有像[virtualenv](https://virtualenv.pypa.io/en/latest/)这样的工具，允许你轻松设置虚拟环境。
- en: Those that want to go a step further use a **container-based technology** like
    [Docker](https://www.docker.com/). This can replicate everything from the operating
    system and upwards. In this way, sharing ML models becomes pretty effortless as
    long as everyone knows how to run Docker containers. In modern tools like [Azure
    Machine Learning](https://azure.microsoft.com/en-us/products/machine-learning/),
    there are easy ways to use standardized Docker images. These can include commonly
    used libraries like [scikit-learn](https://scikit-learn.org/stable/index.html)
    and [tensorflow](https://www.tensorflow.org/). And you don’t even have to remember
    the versions yourself!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那些想更进一步的人使用像[Docker](https://www.docker.com/)这样的**基于容器的技术**。这可以从操作系统及以上层面复制一切。这样，只要每个人知道如何运行Docker容器，共享机器学习模型就变得相当轻松。在像[Azure
    Machine Learning](https://azure.microsoft.com/en-us/products/machine-learning/)这样的现代工具中，有简单的方法来使用标准化的Docker镜像。这些镜像可以包括像[scikit-learn](https://scikit-learn.org/stable/index.html)和[tensorflow](https://www.tensorflow.org/)这样的常用库。而且你甚至不需要自己记住版本！
- en: 6 — Wrapping Up
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6 — 总结
- en: '![](../Images/4a06c775ef80f575c5d7cdfe36d7a151.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a06c775ef80f575c5d7cdfe36d7a151.png)'
- en: Photo by [Spencer Bergen](https://unsplash.com/@spencerbergen?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[斯宾塞·伯根](https://unsplash.com/@spencerbergen?utm_source=medium&utm_medium=referral)提供，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: I hopefully don’t have to point out that you DO want machine learning models
    in production. The points I’ve argued for here can be reversed and help you get
    those pesky ML models in production successfully.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望不用指出你确实希望机器学习模型进入生产环境。我在这里提出的观点可以反向操作，帮助你成功将那些麻烦的机器学习模型投入生产。
- en: Feel free to follow me on [LinkedIn](https://www.linkedin.com/in/eirik-berge/)
    and say hi, I’m not nearly as grumpy as I pretended in this blog post ✋
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 随时在[LinkedIn](https://www.linkedin.com/in/eirik-berge/)上关注我并打个招呼，我在这篇博客文章中看起来并没有我表现得那么烦躁
    ✋
- en: '**Like my writing?** Check out some of my other posts for more Python content:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**喜欢我的写作吗？** 可以看看我其他的一些帖子，获取更多Python内容：'
- en: '[Modernize Your Sinful Python Code with Beautiful Type Hints](/modernize-your-sinful-python-code-with-beautiful-type-hints-4e72e98f6bf1)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用美丽的类型提示现代化你的罪恶Python代码](/modernize-your-sinful-python-code-with-beautiful-type-hints-4e72e98f6bf1)'
- en: '[Visualizing Missing Values in Python is Shockingly Easy](/visualizing-missing-values-in-python-is-shockingly-easy-56ed5bc2e7ea)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中可视化缺失值简直太简单了](/visualizing-missing-values-in-python-is-shockingly-easy-56ed5bc2e7ea)'
- en: '[Introducing Anomaly/Outlier Detection in Python with PyOD 🔥](/introducing-anomaly-outlier-detection-in-python-with-pyod-40afcccee9ff)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中使用 PyOD 介绍异常/离群点检测 🔥](/introducing-anomaly-outlier-detection-in-python-with-pyod-40afcccee9ff)'
- en: '[5 Awesome NumPy Functions That Can Save You in a Pinch](/5-awesome-numpy-functions-that-can-save-you-in-a-pinch-ba349af5ac47)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个绝妙的 NumPy 函数，关键时刻拯救你](/5-awesome-numpy-functions-that-can-save-you-in-a-pinch-ba349af5ac47)'
- en: '[5 Expert Tips to Skyrocket Your Dictionary Skills in Python 🚀](/5-expert-tips-to-skyrocket-your-dictionary-skills-in-python-1cf54b7d920d)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个专家技巧，让你的 Python 字典技能飞速提升 🚀](/5-expert-tips-to-skyrocket-your-dictionary-skills-in-python-1cf54b7d920d)'
