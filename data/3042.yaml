- en: 'Advanced Python: Metaclasses'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 Python： metaclasses
- en: 原文：[https://towardsdatascience.com/advanced-python-metaclasses-e32d46e0ebe3?source=collection_archive---------1-----------------------#2023-10-06](https://towardsdatascience.com/advanced-python-metaclasses-e32d46e0ebe3?source=collection_archive---------1-----------------------#2023-10-06)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/advanced-python-metaclasses-e32d46e0ebe3?source=collection_archive---------1-----------------------#2023-10-06](https://towardsdatascience.com/advanced-python-metaclasses-e32d46e0ebe3?source=collection_archive---------1-----------------------#2023-10-06)
- en: A brief introduction to Python class object and how it is created
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对 Python 类对象及其创建方式的简要介绍
- en: '[](https://medium.com/@ilija.lazarevic?source=post_page-----e32d46e0ebe3--------------------------------)[![Ilija
    Lazarevic](../Images/4a0d84af6d8fa97705ee35444d319b07.png)](https://medium.com/@ilija.lazarevic?source=post_page-----e32d46e0ebe3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e32d46e0ebe3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e32d46e0ebe3--------------------------------)
    [Ilija Lazarevic](https://medium.com/@ilija.lazarevic?source=post_page-----e32d46e0ebe3--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ilija.lazarevic?source=post_page-----e32d46e0ebe3--------------------------------)[![Ilija
    Lazarevic](../Images/4a0d84af6d8fa97705ee35444d319b07.png)](https://medium.com/@ilija.lazarevic?source=post_page-----e32d46e0ebe3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e32d46e0ebe3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e32d46e0ebe3--------------------------------)
    [Ilija Lazarevic](https://medium.com/@ilija.lazarevic?source=post_page-----e32d46e0ebe3--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe73ea2eae8e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-metaclasses-e32d46e0ebe3&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=post_page-e73ea2eae8e6----e32d46e0ebe3---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e32d46e0ebe3--------------------------------)
    ·8 min read·Oct 6, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe32d46e0ebe3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-metaclasses-e32d46e0ebe3&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=-----e32d46e0ebe3---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fe73ea2eae8e6&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-metaclasses-e32d46e0ebe3&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=post_page-e73ea2eae8e6----e32d46e0ebe3---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e32d46e0ebe3--------------------------------)
    ·8分钟阅读·2023年10月6日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe32d46e0ebe3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-metaclasses-e32d46e0ebe3&user=Ilija+Lazarevic&userId=e73ea2eae8e6&source=-----e32d46e0ebe3---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe32d46e0ebe3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-metaclasses-e32d46e0ebe3&source=-----e32d46e0ebe3---------------------bookmark_footer-----------)![](../Images/e409921158233f95efc4e3cb4cd1ba6f.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe32d46e0ebe3&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fadvanced-python-metaclasses-e32d46e0ebe3&source=-----e32d46e0ebe3---------------------bookmark_footer-----------)![](../Images/e409921158233f95efc4e3cb4cd1ba6f.png)'
- en: As Atlas is to the heavens, metaclasses are to classes. Photo by [Alexander
    Nikitenko](https://unsplash.com/@quintonik?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/H6obC_biCSk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如阿特拉斯之于天空，metaclasses 之于类。照片由 [Alexander Nikitenko](https://unsplash.com/@quintonik?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/H6obC_biCSk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: This article continues the Advanced Python series (previous [article](https://medium.com/towards-data-science/advanced-python-functions-3be6810f92d1)
    on functions in Python). This time, I cover an introduction to metaclasses. The
    subject is rather advanced because there is rarely a need for the engineer to
    implement custom metaclasses. However, it is one of the most important constructs
    and mechanisms that every knowledgeable Python developer should know about, mainly
    because it enables the OOP paradigm.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文继续了《高级 Python》系列（前一篇关于 Python 函数的 [文章](https://medium.com/towards-data-science/advanced-python-functions-3be6810f92d1)）。这次，我介绍了元类。这个主题相当高级，因为工程师通常不需要实现自定义元类。然而，这是每个了解
    Python 的开发者都应该知道的最重要的构造和机制之一，主要是因为它支持面向对象编程范式。
- en: After getting the idea behind metaclasses and how class objects are created,
    you will be able to continue learning the OOP principles of encapsulation, abstraction,
    inheritance, and polymorphism. Then you will be able to understand how to apply
    all of it through numerous design patterns guided by some of the principles in
    software engineering (for example, *SOLID*).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了元类的概念以及类对象是如何创建之后，你将能够继续学习面向对象编程的封装、抽象、继承和多态原则。然后，你将能够通过许多设计模式以及软件工程中的一些原则（例如，*SOLID*）来理解如何应用这些原则。
- en: 'Now, let’s start with this seemingly trivial example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从这个看似微不足道的例子开始：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Back in the days when you learned about object-oriented programming, you most
    probably came across a general idea that describes what classes and objects are,
    and it goes like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你学习面向对象编程时，你很可能遇到过一个描述类和对象是什么的一般性概念，它是这样的：
- en: “Class is like a cookie mold. And objects are cookies molded by it”.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “类就像一个饼干模具。对象则是由它模制出来的饼干。”
- en: This is a very intuitive explanation and conveys the idea rather clearly. Having
    said that, our example defines two templates with little or no functionalities,
    but they work. You can play with defining the `__init__` method, set some object
    attributes, and make it more usable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常直观的解释，并且相当清晰地传达了这个概念。话虽如此，我们的例子定义了两个几乎没有功能的模板，但它们仍然有效。你可以尝试定义 `__init__`
    方法，设置一些对象属性，使其更具可用性。
- en: However, what is interesting **in Python** is that **even though a class is
    a “template” that is used to create objects from it, it is also an object itself.**
    Everyone learning OOP in Python would quickly go over this statement, not really
    thinking in depth. Everything in Python is an object, so what? But once you start
    thinking about this, a lot of questions pop up, and interesting Python intricacies
    unravel.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，**在 Python 中**有趣的是，**尽管类是一个“模板”，用于从中创建对象，但它本身也是一个对象。** 学习 Python 面向对象编程的人很快就会略过这个陈述，并没有深入思考。Python
    中的一切都是对象，那又怎样呢？但是一旦你开始思考这个问题，会出现很多问题，Python 的复杂性也会揭示出来。
- en: 'Before I start asking these questions for you, let’s remember that **in Python,
    everything is an object**. And I mean everything. This is probably something you
    already picked up, even if you are a newbie. The next example shows this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开始问你这些问题之前，让我们记住**在 Python 中，一切都是对象**。我说的“一切”就是所有东西。这可能是你已经了解的，即使你是新手。下面的例子展示了这一点：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Based on these examples, here are some questions that you should ask yourself:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些例子，这里有一些你应该问自己的问题：
- en: If a class is an object, when is it created?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果类是一个对象，那么它是在什么时候创建的？
- en: Who creates class objects?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁创建了类对象？
- en: If class is an object, how come I’m able to call it when instantiating an object?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果类是一个对象，那我怎么能在实例化对象时调用它呢？
- en: Class object creation
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类对象创建
- en: Python is widely known as an interpreted language. This means there is an interpreter
    (program or process) that goes line by line and tries to translate it to machine
    code. This is opposed to compiled programming languages like C, where programming
    code is translated into machine code before you run it. This is a very simplified
    view. To be more precise, Python is both compiled and interpreted, but this is
    a subject for another time. What is important for our example is that the interpreter
    goes through the class definition, and once the class code block is finished,
    the class object is created. From then on, you are able to instantiate objects
    from it. You have to do this explicitly, of course, even though class objects
    are instantiated implicitly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python 被广泛认为是一种解释型语言。这意味着有一个解释器（程序或进程）逐行读取并尝试将其转换为机器码。这与像 C 这样的编译型编程语言相对，在编译型语言中，编程代码会在运行之前被转换为机器码。这是一个非常简化的观点。更准确地说，Python
    既是编译型的又是解释型的，但这是另一个话题。对我们示例重要的是，解释器会遍历类定义，并在类代码块完成后创建类对象。从那时起，你可以从中实例化对象。当然，你必须显式地做到这一点，即使类对象是隐式实例化的。
- en: 'But what “process” is triggered when the interpreter finishes reading the class
    code block? We could go directly to details, but one chart speaks a thousand words:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当解释器完成读取类代码块时，会触发什么“过程”？我们可以直接进入细节，但一张图胜过千言万语：
- en: '![](../Images/8b234379df93408228ea4868c29df990.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b234379df93408228ea4868c29df990.png)'
- en: How objects, classes and metaclasses are related to each other. Image by Ilija
    Lazarevic.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对象、类和元类之间的关系。图像由 Ilija Lazarevic 提供。
- en: 'If you are not aware, Python has `type` functions that can be used for our
    purpose(s) now. By calling `type` with object as an argument, you will get the
    object’s type. How ingenious! Take a look:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不知道，Python 有 `type` 函数可以用于我们的目的。通过将对象作为参数调用 `type`，你将得到对象的类型。真是巧妙！看一下：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `type` call in the example makes sense. `child` is of type `Child`. We used
    a class object to create it. So in some way, you can think of `type(child)` giving
    you the name of its “creator”. And in a way, the `Child` class is its creator
    because you called it to create a new instance. But what happens when you try
    to get the “creator” of the class object, `type(Child)`? You get the `type`. To
    sum it up, **an object is an instance of a class, and a class is an instance of
    a type**. By now, you may be wondering how a class is an instance of a function,
    and the answer is that`type` is both a function and a class. This is intentionally
    left as it is because of backward compatibility back in the old days.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中的`type`调用是有意义的。`child` 的类型是 `Child`。我们使用了一个类对象来创建它。因此，从某种意义上说，你可以认为`type(child)`给出了其“创建者”的名称。在某种程度上，`Child`
    类是它的创建者，因为你调用它来创建一个新实例。但当你尝试获取类对象的“创建者”时，即`type(Child)`，你得到的是 `type`。总结一下，**对象是类的实例，类是类型的实例**。到现在为止，你可能会想知道类是如何成为函数的实例的，答案是`type`既是函数又是类。这故意保留了这种状态，以确保与早期版本的向后兼容。
- en: What will make your head spin is the name we have for the class that is used
    to create a class object. It is called a **metaclass.** And here it is important
    to make a distinction between inheritance from the perspective of the object-oriented
    paradigm and the mechanisms of a language that enable you to practice this paradigm.
    Metaclasses provide this mechanism. What can be even more confusing is that metaclasses
    are able to inherit parent classes just like regular ones can. But this can quickly
    become “inceptional” programming, so let’s not go that deep.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让你头脑发热的是我们用来创建类对象的类的名称。它叫做**元类**。在这里，重要的是要区分从面向对象范式的角度来看继承和语言机制，它们使你能够实践这个范式。元类提供了这种机制。更令人困惑的是，元类能够像普通类一样继承父类。但这很快就会变成“自我反转”的编程，所以我们不要深入探讨。
- en: Do we have to deal with these metaclasses on a daily basis? Well, no. In rare
    cases, you will probably need to define and use them, but most of the time, default
    behavior is just fine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否需要每天处理这些元类？嗯，不需要。在少数情况下，你可能需要定义和使用它们，但大多数情况下，默认行为就足够了。
- en: 'Let’s continue with our journey, this time with a new example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们的旅程，这次用一个新的示例：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Something like this should be your very first OOP step in Python. You are taught
    that `__init__` is a constructor where you set the values of your object attributes,
    and you are good to go. However, this `__init__` dunder method is exactly what
    it says: the initialization step. Isn’t it strange that you call it to initialize
    an object, and yet you get an object instance in return? There is no `return`
    there, right? So, how is this possible? Who returns the instance of a class?'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该是你在 Python 中的第一个面向对象编程步骤。你被教导 `__init__` 是一个构造函数，你在其中设置对象属性的值，然后就可以继续。然而，这个
    `__init__` dunder 方法确实如其所言：初始化步骤。奇怪的是，你调用它来初始化一个对象，但却得到一个对象实例的返回值？那里没有 `return`，对吗？那怎么可能呢？是谁返回了类的实例？
- en: 'Very few learn at the start of their Python journey that there is another method
    that is called implicitly and is named `__new__`. This method actually creates
    an instance before `__init__` is called to initialize it. Here is an example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有人在 Python 学习之初就知道还有另一个方法被隐式调用，名为 `__new__`。这个方法实际上在 `__init__` 被调用来初始化之前创建一个实例。这里是一个例子：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What you’ll immediately see is that `__new__` returns `super().__new__(cls)`.
    This is a new instance. `super()` fetches the parent class of `Parent,` which
    is implicitly an `object` class. This class is inherited by all classes in Python.
    And it is an object in itself too. Another innovative move by the Python creators!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你会立即看到 `__new__` 返回 `super().__new__(cls)`。这是一个新的实例。`super()` 获取 `Parent` 的父类，隐式为
    `object` 类。这个类被 Python 中的所有类继承。它本身也是一个对象。Python 创造者的另一个创新举措！
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But what binds `__new__` and `__init__`? There has to be something more to how
    object instantiation is performed when we call `Parent('John' ,35)`. Take a look
    at it once again. You are invoking (calling) a class object, like a function.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`__new__` 和 `__init__` 是如何绑定在一起的呢？当我们调用 `Parent('John' ,35)` 时，对象实例化的过程一定还有其他内容。再看一遍，你是在像调用函数一样调用一个类对象。
- en: Python callable
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 可调用
- en: 'Python, being a structurally typed language, enables you to define specific
    methods in your class that describe a *Protocol* (a way of using its object),
    and based on this, all instances of a class will behave in the expected way. Do
    not get intimidated if you are coming from other programming languages. *Protocols*
    are something like *Interfaces* in other languages. However, here we do not explicitly
    state that we are implementing a specific interface and, therefore, specific behavior.
    We just implement methods that are described by *Protocol*, and all objects are
    going to have protocol’s behavior. One of these *Protocols* is *Callable*. By
    implementing the dunder method `__call__,` you enable your object to be called
    like a function. See the example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Python 作为一种结构化类型语言，使你能够在类中定义特定的方法，这些方法描述了一个 *协议*（使用其对象的方式），基于此，所有类的实例将按预期方式行为。如果你来自其他编程语言，不要感到畏惧。*协议*
    就像其他语言中的 *接口*。但是，在这里我们并不明确声明我们正在实现一个特定的接口，因此也没有具体行为。我们只是实现由 *协议* 描述的方法，所有对象将具有协议的行为。其中一个
    *协议* 是 *可调用的*。通过实现 dunder 方法 `__call__`，你使你的对象像函数一样被调用。看一下这个例子：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: By implementing `__call__` in the class definition, your class instances become
    C*allable*. But what about `Parent('John', 35)`? How do you achieve the same with
    your class object? If an object’s type definition (class) specifies that the object
    is *Callable*, then the class object type (type i.e. metaclass) should specify
    that the class object is callable too, right? Invocation of the dunder methods
    `__new__` and `__init__` happens there.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在类定义中实现 `__call__`，你的类实例变得 *可调用*。但 `Parent('John', 35)` 怎么办呢？如何在你的类对象中实现相同的功能？如果对象的类型定义（类）指定该对象是
    *可调用的*，那么类对象类型（即元类）也应该指定类对象是可调用的，对吗？`__new__` 和 `__init__` 的 dunder 方法在这里发生。
- en: At this point, it is time to start playing with metaclasses.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，是时候开始玩转元类了。
- en: Python metaclasses
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 元类
- en: 'There are at least two ways you can change the process of class object creation.
    One is by using class decorators; the other is by explicitly specifying a metalcass.
    I will describe the metaclass approach. Keep in mind that a metaclass looks like
    a regular class, and the only exception is that it has to inherit a `type` class.
    Why? Because `type` classes have all the implementation that is required for our
    code to still work as expected. For example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有至少两种方法可以改变类对象的创建过程。一种是通过使用类装饰器；另一种是通过显式指定元类。我将描述元类的方法。请记住，元类看起来像一个普通的类，唯一的例外是它必须继承`type`类。为什么？因为`type`类包含了我们代码正常工作的所有实现。例如：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, `MyMeta` is the driving force behind new class object instantiation and
    also specifies how new class instances are created. Take a closer look at the
    last two lines of the example. `parent` holds nothing! But why? Because, as you
    can see, `MyMeta.__call__` just prints information and returns nothing. Explicitly,
    that is. Implicitly, that means that it returns `None`, which is of `NoneType`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`MyMeta`是新类对象实例化的驱动因素，同时指定了新类实例是如何创建的。仔细查看示例的最后两行。`parent`什么也没有！但为什么？因为，如你所见，`MyMeta.__call__`只是打印信息而不返回任何内容。明确地说，就是这样。隐含地说，它返回`None`，即`NoneType`。
- en: How should we fix this?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该如何解决这个问题？
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From the output, you can see what happens on `MyMeta.__call__`invocation. The
    provided implementation is just an example of how the whole thing works. You should
    be more careful if you plan to override parts of metaclasses yourself. There are
    some edge cases that you have to cover up. For example, one of the edge cases
    is that `Parent.__new__` can return an object that is not an instance of the `Parent`
    class. In that case, it is not going to be initialized by the `Parent.__init__`
    method. That is the expected behavior you have to be aware of, and it really doesn’t
    make sense to initialize an object that is not an instance of the same class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，你可以看到在`MyMeta.__call__`调用时发生了什么。提供的实现只是展示整个过程如何工作的一个例子。如果你打算自己重写元类的某些部分，你需要更加小心。有一些边缘情况需要你覆盖。例如，其中一个边缘情况是`Parent.__new__`可能返回一个不是`Parent`类实例的对象。在这种情况下，该对象不会被`Parent.__init__`方法初始化。这是你需要注意的预期行为，初始化一个不是同一类实例的对象实际上是没有意义的。
- en: Conclusion
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'This would conclude the brief overview of what happens when you define a class
    and make an instance of it. Of course, you could go even further and see what
    happens during the class block interpretation. All of this happens in the metaclass
    too. It’s fortunate for most of us that we probably won’t need to create and use
    specific metaclasses. Yet it is useful to understand how everything functions.
    I’d like to use a similar saying that applies to using NoSQL databases, which
    goes something like this: if you’re not sure whether you need to use Python metaclasses,
    you probably don’t.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将总结定义类并创建实例时发生的简要概述。当然，你还可以进一步了解类块解释期间发生的事情。所有这些都发生在元类中。对大多数人来说，我们可能不需要创建和使用特定的元类，这真是幸运。然而，理解一切如何运作是有用的。我想引用一个类似的说法，适用于使用
    NoSQL 数据库，内容大致如下：如果你不确定是否需要使用 Python 元类，你可能不需要。
- en: References
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[Python Metaclasses](https://jfreeman.dev/blog/2020/12/07/python-metaclasses/)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 元类](https://jfreeman.dev/blog/2020/12/07/python-metaclasses/)'
- en: '[Understanding Object Instantiation and Metaclasses in Python](https://www.honeybadger.io/blog/python-instantiation-metaclass/)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解 Python 中的对象实例化和元类](https://www.honeybadger.io/blog/python-instantiation-metaclass/)'
