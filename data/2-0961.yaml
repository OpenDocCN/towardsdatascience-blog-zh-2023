- en: Generating Synthetic Data with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python生成合成数据
- en: 原文：[https://towardsdatascience.com/generating-synthetic-data-with-python-ea15fd0555ee](https://towardsdatascience.com/generating-synthetic-data-with-python-ea15fd0555ee)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/generating-synthetic-data-with-python-ea15fd0555ee](https://towardsdatascience.com/generating-synthetic-data-with-python-ea15fd0555ee)
- en: A Comprehensive Guide to Creating Synthetic Data
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建合成数据的全面指南
- en: '[](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)
    ·14 min read·Jul 31, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)
    ·阅读时长14分钟·2023年7月31日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a17fd93d1fcd31d058aef3ac14afca95.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a17fd93d1fcd31d058aef3ac14afca95.png)'
- en: Image by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We keep hearing time and again about the pivotal role that data plays in driving
    growth, innovation, and competitiveness. It has become the bedrock for success
    across all industries. In essence, data has become the foundation of our every
    endeavour, from crafting technical blogs, educational content, and testing products
    or debugging software to explore the complexities of AI/ML training models and
    algorithms, data lies at the heart of all these tasks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一次又一次地听到数据在推动增长、创新和竞争力方面的关键作用。它已经成为所有行业成功的基石。本质上，数据已成为我们每一个努力的基础，无论是撰写技术博客、教育内容、测试产品或调试软件，还是探索AI/ML训练模型和算法的复杂性，数据都处于所有这些任务的核心。
- en: Obtaining precise data that perfectly fit various needs and interests can be
    a Herculean task. Searching the internet for the exact data you need can be both
    frustrating and time-consuming. Even if you manage to find suitable data, the
    process of cleaning and processing it may demand valuable time, resources, and
    expenses. Moreover, privacy concerns, data sensitivity, copyrights, and regulatory
    restrictions often stand as significant barriers. For example, datasets containing
    sensitive information like medical data, financial records data, or obtaining
    a demo dataset from a copyrighted website, etc.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 获得完全适合各种需求和兴趣的精确数据可能是一项艰巨的任务。在互联网上寻找你所需的确切数据既令人沮丧又耗时。即使你成功找到合适的数据，清理和处理数据的过程也可能需要宝贵的时间、资源和费用。此外，隐私问题、数据敏感性、版权和监管限制通常是重要的障碍。例如，包含敏感信息的数据集，如医疗数据、财务记录数据，或从版权网站获取的演示数据集等。
- en: In situations like these, synthetic data comes to save the day! In this article,
    we’ll explore what synthetic data is all about and how you can generate it in
    Python using 2 different libraries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的情况下，合成数据会拯救我们！在本文中，我们将探讨合成数据的全部内容，以及如何使用2个不同的库在Python中生成它。
- en: What is synthetic data?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是合成数据？
- en: Synthetic data, according to [Wikipedia](https://en.wikipedia.org/wiki/Synthetic_data),
    is data that is artificially generated instead of being derived from real-world
    events. In the simplest language,
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[维基百科](https://en.wikipedia.org/wiki/Synthetic_data)，合成数据是人工生成的数据，而非源自现实世界事件。用最简单的话来说，
- en: Synthetic Data = Fake Data
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 合成数据 = 虚假数据
- en: It is a replication of real data that may maintain its resemblance without disclosing
    any specific information about real individuals, situations, or entities. You
    might have already heard different terms, including computer-generated data, artificial
    data, AI-generated data, or simulated data, but essentially, they all are more
    or less the same - Fake Data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它是现实数据的复制，可能保持其相似性而不泄露有关真实个人、情况或实体的任何特定信息。你可能已经听说过不同的术语，包括计算机生成的数据、人工数据、AI生成的数据或模拟数据，但本质上，它们都是或多或少相同的——虚假数据。
- en: Why is synthetic data required?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么需要合成数据？
- en: You may wonder why we need synthetic data when we already have plenty of real-world
    data. It is valuable for various reasons, it allows us to create additional data
    that looks like real data but doesn’t contain any real information about people
    or situations. Synthetic data helps us protect privacy (where real data cannot
    be revealed to others), tackles data scarcity(where suitable data is limited or
    unavailable for analysis, or research), and enables testing of AI/ML models without
    relying on sensitive/restricted real data or to test a very specific behaviour
    under control conditions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道，既然我们已经拥有大量真实世界的数据，为什么还需要合成数据。它有多种价值，它允许我们创建看起来像真实数据但不包含任何有关人员或情况的真实信息的附加数据。合成数据帮助我们保护隐私（当真实数据不能向他人公开时），解决数据稀缺问题（当适合的数据有限或无法进行分析或研究时），并在不依赖敏感/受限的真实数据的情况下测试
    AI/ML 模型，或者在受控条件下测试非常特定的行为。
- en: There are many other instances, where synthetic data may be needed. For example,
    real data may be hard or expensive to acquire, or it may have too few data points
    (the dataset is not large enough or it does not contain a sufficient number of
    data samples to effectively train a model, obtain significant conclusions, or
    achieve accurate results)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他情况需要合成数据。例如，真实数据可能难以获得或成本过高，或者数据点太少（数据集不够大，或包含的样本数量不足以有效训练模型、得出重要结论或获得准确结果）
- en: Consider a bank that wants to predict credit risk for its customers in the lending
    division. They need historical data, including credit behaviour, repayment history,
    income, name, contact, and other relevant details. However, due to data privacy
    concerns and adherence to data protection regulations like [GDPR](https://gdpr.eu/what-is-gdpr/),
    along with limited past data availability and high data acquisition costs, they
    may lack enough data for training a model or drawing conclusions through data
    analysis.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 设想一个银行希望预测其借贷部门客户的信用风险。他们需要历史数据，包括信用行为、还款历史、收入、姓名、联系方式和其他相关细节。然而，由于数据隐私问题和遵守数据保护法规如[GDPR](https://gdpr.eu/what-is-gdpr/)，以及过去数据的有限可用性和高数据获取成本，他们可能缺乏足够的数据来训练模型或通过数据分析得出结论。
- en: With only a small amount of real data, capturing the complexities and creditworthiness
    patterns becomes difficult, leading to potential inaccuracies in predictions.
    To address this, the bank can generate synthetic datasets resembling real customers’
    characteristics and credit behaviours. This improves model performance, reduces
    overfitting risk, and provides more accurate predictions, enabling the bank to
    make informed and reliable credit decisions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 仅有少量真实数据时，捕捉复杂性和信用模式变得困难，从而导致预测的潜在不准确性。为了解决这个问题，银行可以生成类似于真实客户特征和信用行为的合成数据集。这可以提高模型性能，减少过拟合风险，并提供更准确的预测，使银行能够做出明智且可靠的信用决策。
- en: How to generate synthetic data?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何生成合成数据？
- en: 'Now that we are more familiar with what synthetic data is and why it is needed,
    let’s move on to the next step: How to generate it? Synthetic data can primarily
    be generated in two ways,'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对合成数据是什么以及为什么需要它有了更多了解，接下来让我们进入下一步：如何生成它？合成数据主要有两种生成方式，
- en: '**1\. By duplicating portions of actual data and using it as a reference,**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 通过复制实际数据的部分并将其用作参考，**'
- en: Creating variations of existing real data by applying transformations or modifications
    to the original dataset. This process is often referred to as [data augmentation](https://www.mygreatlearning.com/blog/understanding-data-augmentation/).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过对原始数据集应用变换或修改来创建现有真实数据的变体。这个过程通常被称为[数据增强](https://www.mygreatlearning.com/blog/understanding-data-augmentation/)。
- en: For example, in text data, you can introduce minor alterations such as randomly
    inserting or deleting text, rephrasing sentences while keeping the core meaning
    intact, etc. to expand the dataset size.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，在文本数据中，你可以引入一些小的变化，例如随机插入或删除文本、在保持核心含义不变的情况下重新措辞等，以扩展数据集的大小。
- en: '**2\. By creating an entirely new dataset from scratch**,'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 通过从头创建一个全新的数据集**，'
- en: Alternatively, you can generate entirely new data points from scratch based
    on certain criteria.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外，你可以根据某些标准从头生成完全新的数据点。
- en: This method is commonly used when dealing with sensitive or private data, as
    it ensures that no real data is exposed in the synthetic dataset.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法通常用于处理敏感或私人数据，因为它确保合成数据集中没有暴露真实数据。
- en: Both approaches have their merits and can be chosen based on the specific requirements
    and goals of the data generation task such as the availability of real data, data
    privacy concerns, the complexity of the data, and the intended use of the synthetic
    dataset. For this article, we will be using the second approach.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法各有优点，可根据数据生成任务的具体要求和目标选择，如真实数据的可用性、数据隐私问题、数据的复杂性以及合成数据集的预期用途。在本文中，我们将使用第二种方法。
- en: Scenario
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景
- en: Imagine that we need to create a customer table with all the necessary information
    for conducting a credit risk analysis. Below is a list of fields I intend to create,
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们需要创建一个包含进行信用风险分析所需的所有信息的客户表。以下是我打算创建的字段列表，
- en: '***Customer ID***: A unique identifier for each customer in the table.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***客户ID***：表中每个客户的唯一标识符。'
- en: '***Customer Name***: Name of the customer.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***客户姓名***：客户的名字。'
- en: '***Age***: Age of the customer, as it can be a relevant factor in credit risk
    assessment.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***年龄***：客户的年龄，因为这可能是信用风险评估的相关因素。'
- en: '***Income***: Customer’s income level, which is crucial for evaluating their
    ability to repay the loan amount.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***收入***：客户的收入水平，这对于评估他们偿还贷款能力至关重要。'
- en: '***Credit Score***: Customer’s creditworthiness based on their credit history.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***信用评分***：基于客户的信用历史评估其信用worthiness。'
- en: '***Debt-to-Income Ratio***: The ratio of the customer’s total debt to their
    income, which shows their financial stability.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***债务收入比***：客户的总债务与其收入的比例，显示其财务稳定性。'
- en: '***Employment Status***: Customer’s employment status - employed, unemployed,
    self-employed, etc.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***就业状态***：客户的就业状态——在职、失业、自雇等。'
- en: '***Loan Amount***: The loan amount customer is applying for.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***贷款金额***：客户申请的贷款金额。'
- en: '***Loan Term***: The duration of time a cuatomer has to repay a loan. For example,
    if a loan has a term of 36 months, the customer will have to repay the loan within
    a period of 36 months. The loan term influences the repayment schedule, as longer
    terms may result in lower monthly payments but higher overall interest, while
    shorter terms may have higher monthly payments but lower overall interest.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***贷款期限***：客户偿还贷款的时间长度。例如，如果贷款期限为36个月，客户必须在36个月内偿还贷款。贷款期限影响还款计划，较长的期限可能导致较低的月付款但较高的总体利息，而较短的期限可能导致较高的月付款但较低的总体利息。'
- en: '***Payment History***: The customer’s past payment behaviour on loans and credit
    accounts.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***付款历史***：客户在贷款和信用账户上的过往付款行为。'
- en: '***Number of Dependents***: The number of people financially dependent on the
    customer.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***受抚养人数***：财务上依赖于客户的人员数量。'
- en: In Python, you can find various libraries for creating synthetic data. They
    all offer different levels of complexity and functionality for generating synthetic
    data. Depending on your requirements, you can choose the one that best suits your
    needs. Always make sure to check,
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你可以找到各种创建合成数据的库。它们提供了不同级别的复杂性和功能来生成合成数据。根据你的需求，你可以选择最适合的库。务必检查，
- en: Official documentation
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档
- en: Community support
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区支持
- en: for the most up-to-date information on these libraries. In this article, we’ll
    be using the following Python libraries,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以获取这些库的最新信息。在本文中，我们将使用以下Python库，
- en: Faker
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Faker
- en: Random
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机
- en: Cracking the Code
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 破解代码
- en: Before we begin coding, let’s first understand the libraries we are going to
    use,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，我们先了解一下我们将要使用的库，
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '***Faker*** - It’s a Python library that generates synthetic data, it offers
    a variety of functions to create real-looking personal information.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***Faker*** - 这是一个生成合成数据的Python库，提供了多种功能来创建真实看起来的个人信息。'
- en: '***random*** - It’s a standard Python library that provides functions to generate
    random data. It is most commonly used to generate random integers, floating-point
    numbers, and make random choices from a list of elements.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***random*** - 这是一个标准的Python库，提供生成随机数据的函数。它最常用于生成随机整数、浮点数和从元素列表中进行随机选择。'
- en: '***Pandas*** - It’s a popular Python library for data manipulation, including
    tasks like data cleaning, filtering, grouping, merging, etc. It’s designed to
    handle structured data, such as tables and time series data, offering powerful
    functions for efficient data analysis.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***Pandas*** - 这是一个流行的Python库，用于数据操作，包括数据清理、过滤、分组、合并等任务。它设计用于处理结构化数据，如表格和时间序列数据，提供了高效的数据分析强大功能。'
- en: '***typing*** - It’s a Python library that provides tools for adding type hints
    to your code. Type hints help improve code clarity and readability by specifying
    the expected types of variables and function parameters. It was introduced in
    Python 3.5'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***typing*** - 这是一个 Python 库，提供了将类型提示添加到代码中的工具。类型提示通过指定变量和函数参数的预期类型来帮助提高代码的清晰度和可读性。它在
    Python 3.5 中引入。'
- en: Now, let’s start coding! The first step is to create a *Faker* instance.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始编程吧！第一步是创建一个 *Faker* 实例。
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Why do we need it? Well, a *Faker* instance serves as a *generator* that can
    create various types of data. A *generator* is an object in Python that produces
    a sequence of values, one at a time, as requested. You can read more about it
    here,
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么需要它？嗯，*Faker* 实例充当一个 *生成器*，可以创建各种类型的数据。*生成器* 是 Python 中的一个对象，它按请求一次生成一个值的序列。你可以在这里了解更多，
- en: '[](https://medium.com/swlh/writing-memory-efficient-programs-using-generators-in-python-49854bb57da6?source=post_page-----ea15fd0555ee--------------------------------)
    [## Writing Memory Efficient Programs Using Generators in Python.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/swlh/writing-memory-efficient-programs-using-generators-in-python-49854bb57da6?source=post_page-----ea15fd0555ee--------------------------------)
    [## 使用生成器编写内存高效的 Python 程序。'
- en: The basic introduction to Python’s Generator Function and Generator Expression.
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 Python 的生成器函数和生成器表达式的基本介绍。
- en: medium.com](https://medium.com/swlh/writing-memory-efficient-programs-using-generators-in-python-49854bb57da6?source=post_page-----ea15fd0555ee--------------------------------)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/swlh/writing-memory-efficient-programs-using-generators-in-python-49854bb57da6?source=post_page-----ea15fd0555ee--------------------------------)
- en: By using functions provided by *Faker*, you can easily generate data that looks
    just like the real thing! You can also specify the locale when setting up the
    *Faker* instance. Locale means a specific place or country that has its own unique
    culture, language, and way of presenting any information. When we set the locale
    to a particular region, *Faker* generates data that matches the characteristics
    of that place, like names and addresses that are common in that country.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 *Faker* 提供的函数，你可以轻松生成看起来像真的数据！你还可以在设置 *Faker* 实例时指定区域。区域指的是具有自己独特文化、语言和信息呈现方式的特定地方或国家。当我们将区域设置为特定地区时，*Faker*
    生成的数据将匹配该地方的特征，比如该国家常见的名字和地址。
- en: In the code above, using *“en_GB”* allows us to access functions tailored for
    the UK (United Kingdom), providing location-specific data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，使用 *“en_GB”* 允许我们访问针对英国（United Kingdom）量身定制的函数，提供特定于地点的数据。
- en: Now, for the next step in coding, let’s create a function that generates all
    the required fields as per the given specifications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进行编程的下一步，让我们创建一个生成所有所需字段的函数，按照给定的规格。
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above code block,
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码块中，
- en: We have created a function *‘generate_customer_data’* that takes one argument,
    *‘num_records’*, which represents the number of synthetic customer records we
    want to generate.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为 *‘generate_customer_data’* 的函数，该函数接受一个参数 *‘num_records’*，表示我们希望生成的合成客户记录的数量。
- en: 'The *‘(num_records: int)’* specifiesa tying hint that the function expects
    an integer as this argument.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*‘(num_records: int)’* 指定了一个类型提示，表示该函数期望一个整数作为此参数。'
- en: Inside the *‘generate_customer_data’* function, we are creating a dictionary
    *‘customer_data’,* which will hold the synthetic data for each customer.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *‘generate_customer_data’* 函数内部，我们正在创建一个名为 *‘customer_data’* 的字典，用于保存每个客户的合成数据。
- en: 'The *‘customer_data: Dict[str, list]’* indicates that the dictionary’s *keys*
    will be strings, and the corresponding *values* will be *lists*.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*‘customer_data: Dict[str, list]’* 表示字典的 *keys* 将是字符串，而相应的 *values* 将是 *lists*。'
- en: We use typing hints to specify the expected data types for better understanding
    and readability.
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们使用类型提示来指定预期的数据类型，以便更好地理解和阅读代码。
- en: let’s understand the first line of code from the code block above,
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解一下上面代码块的第一行，
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, *‘customer_id’* is key and the corresponding value is a *list*. This line
    of code generates a *list* of customer IDs using the ‘*fake.aba()’* method from
    the *Faker* library. This method randomly generates a 9-digit number, which we
    will be using as a unique customer ID.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*‘customer_id’* 是键，对应的值是一个 *list*。这一行代码使用 *Faker* 库中的 ‘*fake.aba()’* 方法生成一个
    *list* 类型的客户 ID。这个方法随机生成一个 9 位数的数字，我们将用它作为唯一的客户 ID。
- en: If you notice, it’s a single line of code, often referred to as *‘one-liners’*
    in Python*.* Well, here it’s called *List Comprehension*, a short and concise
    way to write *lists* in Python.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到，这是一行代码，通常被称为*“一行代码”*。在这里，它被称为*列表推导式*，是一种在 Python 中编写*列表*的简洁方法。
- en: '![](../Images/ea52047e2257d4d6b39328123437f780.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea52047e2257d4d6b39328123437f780.png)'
- en: 'Image by author: common syntax of a list comprehension'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片：列表推导式的常见语法
- en: You can read more about various types of *Comprehensions* supported in Python
    here,
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里阅读有关 Python 支持的各种*推导式*的更多信息，
- en: '[](/comprehensions-and-generator-expression-in-python-2ae01c48fc50?source=post_page-----ea15fd0555ee--------------------------------)
    [## Comprehensions and Generator Expression in Python'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/comprehensions-and-generator-expression-in-python-2ae01c48fc50?source=post_page-----ea15fd0555ee--------------------------------)
    [## Python 中的推导式和生成器表达式'
- en: To understand Python's Comprehension capabilities, it's important to understand
    the concept of comprehension at first…
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要了解 Python 的推导式功能，首先了解推导式的概念是很重要的…
- en: towardsdatascience.com](/comprehensions-and-generator-expression-in-python-2ae01c48fc50?source=post_page-----ea15fd0555ee--------------------------------)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/comprehensions-and-generator-expression-in-python-2ae01c48fc50?source=post_page-----ea15fd0555ee--------------------------------)'
- en: 📌 **Side Note**
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 📌 **附注**
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the second line of the code *for* loop, I’ve used the *‘_’* *(underscore)*
    instead of *‘i’*. Both approaches are correct, but using the *‘_’* is a more common
    and preferred practice when we don't intend to use the loop variable (in this
    case, *‘i’* is a loop variable).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第二行*for*循环中，我使用了*‘_’*（*下划线*）代替*‘i’*。这两种方法都是正确的，但使用*‘_’* 是更常见和推荐的做法，当我们不打算使用循环变量时（在这种情况下，*‘i’*
    是循环变量）。
- en: It's a clearer way to indicate that the loop variable is not relevant or not
    used within the comprehension. This makes the code more readable and standard,
    helping others easily understand your code. If you use *‘i’* as the loop variable,
    it might suggest that it has a purpose, leading to confusion and unnecessary variable
    assignments. So,
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更清晰的方式来表示循环变量在推导式中不相关或未被使用。这使得代码更加易读和标准，帮助他人更容易理解你的代码。如果你使用*‘i’* 作为循环变量，它可能暗示着有某种用途，导致混淆和不必要的变量赋值。因此，
- en: When you don't need the loop variable, it's considered a good practice to use
    the underscore as a placeholder, making your code cleaner and more concise.
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你不需要循环变量时，使用下划线作为占位符是一种良好的实践，使你的代码更干净、更简洁。
- en: Having mentioned that, since I’m writing a beginner-friendly article, I’ve opted
    to use the loop variable. Nevertheless, it’s essential to pass on the best approach
    as well!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 既然如此，由于我正在写一篇适合初学者的文章，我选择了使用循环变量。然而，传达最佳方法也是很重要的！
- en: Moving on to our code, in a similar approach, I have generated synthetic information
    for all the fields required for the Customer table,
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在类似的方式下，我为客户表生成了所有必需字段的合成信息，
- en: '***‘customer_name’: [fake.name() for name in range(num_records)]***'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘customer_name’: [fake.name() for name in range(num_records)]***'
- en: This generates a list of names for each customer using the *‘fake.name()’* method
    from the *Faker* library. This method is used to generate a random and synthetic
    name that looks like a real person’s name. It can create diverse names with first
    names and last names from various cultures and regions. Since at the beginning
    of the code we have set the locale to *‘en-GB’*, it ensures that the synthetic
    data closely resembles the United Kingdom.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码使用 *‘fake.name()’* 方法从 *Faker* 库生成每个客户的名称。这个方法用于生成一个随机和合成的名字，看起来像是一个真实的人名。它可以生成来自各种文化和地区的名字，包括名字和姓氏。由于在代码开头我们将区域设置为*‘en-GB’*，这确保了合成的数据与英国非常相似。
- en: '***‘age’: [random.randint(18, 70) for age in range(num_records)]***'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘age’: [random.randint(18, 70) for age in range(num_records)]***'
- en: This line generates a list of customers’ ages using the *‘random.randint()’*
    function. This function is used to generate a random integer between a specified
    range. You provide two numbers as arguments - the first is the minimum value of
    the and the second is the maximum value of the range. It then returns a random
    integer from that range, inclusive of the minimum and maximum values. In our case,
    this function generates a random age for each customer, ranging between *18* and
    *70,* including both *18* and *70* in the range.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行生成了一个客户年龄的列表，使用了*‘random.randint()’*函数。此函数用于生成指定范围内的随机整数。你提供两个数字作为参数——第一个是最小值，第二个是最大值。它然后返回范围内的一个随机整数，包括最小值和最大值。在我们的情况下，此函数生成每个客户的随机年龄，范围在*18*和*70*之间，包括*18*和*70*。
- en: '![](../Images/1e185831d581813f4ad5b3546fa15812.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e185831d581813f4ad5b3546fa15812.png)'
- en: 'Image by author: syntax of random.randint()'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片：random.randint() 的语法
- en: '***‘income’: [random.randint(20000, 100000) for income in range(num_records)]***'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘income’: [random.randint(20000, 100000) for income in range(num_records)]***'
- en: This generates a list of random income levels using the *‘random.randint()’*
    function. As explained earlier each income is a random integer, ranging between
    *20,000* and *100,000,* including both *20,000* and *100,000* in the range.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这生成了一个随机收入水平的列表，使用了*‘random.randint()’*函数。如前所述，每个收入是一个随机整数，范围在*20,000*和*100,000*之间，包括*20,000*和*100,000*。
- en: '***‘credit_score’: [random.randint(300, 850) for score in range(num_records)]***'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘credit_score’: [random.randint(300, 850) for score in range(num_records)]***'
- en: 'This generates a list of credit scores using the *‘random.randint()’* function.
    By now, you understand the process: it generates a random credit score for each
    customer, ranging between *300* and *850,* including both *300* and *850* in the
    range.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这生成了一个信用评分的列表，使用了*‘random.randint()’*函数。到目前为止，你已经理解了这个过程：它为每个客户生成一个随机的信用评分，范围在*300*和*850*之间，包括*300*和*850*。
- en: '***‘debt_to_income_ratio’: [round(random.uniform(0.1, 1.0), 2) for ratio in
    range(num_records)],***'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘debt_to_income_ratio’: [round(random.uniform(0.1, 1.0), 2) for ratio in
    range(num_records)],***'
- en: 'This generates a list of debt-to-income ratios using the *‘random.uniform()’*
    function. This function helps in generating random decimal numbers between a given
    range. You provide two numbers as arguments: the lower limit and the upper limit,
    and the function then produces a random decimal number between those two values,
    inclusive of both the lower and upper limits. *‘round(random.uniform(0.1, 1.0),
    2)’* means each ratio is a random floating-point number between *0.1* and *1.0*,
    rounded to two decimal places.'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这生成了一个债务收入比的列表，使用了*‘random.uniform()’*函数。此函数用于生成指定范围内的随机小数。你提供两个数字作为参数：下限和上限，然后函数会生成这两个值之间的随机小数，包括下限和上限。*‘round(random.uniform(0.1,
    1.0), 2)’*表示每个比率是一个*0.1*到*1.0*之间的随机浮点数，四舍五入到两位小数。
- en: '![](../Images/dff8442383220e254a762b1f37f56adb.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dff8442383220e254a762b1f37f56adb.png)'
- en: 'Image by author: syntax of random.uniform()'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片：random.uniform() 的语法
- en: '‘***employment_status’: [random.choice([‘Employed’, ‘Unemployed’, ‘Self-employed’])
    for status in range(num_records)],***'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘employment_status’: [random.choice([‘Employed’, ‘Unemployed’, ‘Self-employed’])
    for status in range(num_records)],***'
- en: 'This generates a list of employment status for each customer using the *‘random.choice()’*
    function. This function allows you to pick a random item from a list or any sequence
    of elements. You provide the list or sequence as an argument, and the function
    randomly selects and returns one element from that sequence. In our context, the
    status of each customer is randomly chosen from the given list of options: ‘*Employed’*,
    ‘*Unemployed’*, or *‘Self-employed’*.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这生成了一个每个客户的就业状态列表，使用了*‘random.choice()’*函数。此函数允许你从列表或任何元素序列中选择一个随机项。你提供列表或序列作为参数，函数将随机选择并返回该序列中的一个元素。在我们的背景下，每个客户的状态是从给定的选项列表中随机选择的：‘*Employed*’，‘*Unemployed*’，或*‘Self-employed’*。
- en: '![](../Images/9f2466ed57f0b8fbf2e682802f3d8665.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f2466ed57f0b8fbf2e682802f3d8665.png)'
- en: 'Image by author: syntax of random.choice()'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片：random.choice() 的语法
- en: '***‘loan_amount’: [random.randint(1000, 50000) for amount in range(num_records)],***'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘loan_amount’: [random.randint(1000, 50000) for amount in range(num_records)],***'
- en: This generates a list of loan amounts for each customer using *‘random.randint()’*
    function. The loan amount for each customer is a random integer between *1,000*
    and *50,000*, including both *1,000* and *50,000* in the range.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这生成了一个每个客户的贷款金额列表，使用了*‘random.randint()’*函数。每个客户的贷款金额是*1,000*和*50,000*之间的随机整数，包括*1,000*和*50,000*。
- en: '***‘loan_term’: [random.choice([12, 24, 36, 48, 60]) for term in range(num_records)],***'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘loan_term’: [random.choice([12, 24, 36, 48, 60]) for term in range(num_records)],***'
- en: 'This line generates a list of loan terms using the *‘random.choice()’* function.
    As we have already discussed for *‘employment_status’,* theloan term for each
    customer is randomly chosen from the given list of options: *12*, *24*, *36*,
    *48*, or *60* months.'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行使用*‘random.choice()’*函数生成一个贷款期限列表。正如我们之前讨论的*‘employment_status’*，每个客户的贷款期限是从给定的选项列表中随机选择的：*12*、*24*、*36*、*48*或*60*个月。
- en: '***‘payment_history’: [random.choice([‘Good’, ‘Fair’, ‘Poor’]) for history
    in range(num_records)],***'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘payment_history’: [random.choice([‘Good’, ‘Fair’, ‘Poor’]) for history
    in range(num_records)],***'
- en: 'This line generates a list of payment histories using the *‘random.choice()’*
    function. Each payment history is randomly chosen from the list of options: *‘Good’*,
    *‘Fair’*, or *‘Poor’*.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行使用*‘random.choice()’*函数生成一个支付历史列表。每个支付历史都是从选项列表中随机选择的：*‘Good’*、*‘Fair’*或*‘Poor’*。
- en: '***‘number_of_dependents’: [random.randint(0, 5) for dep in range(num_records)],***'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***‘number_of_dependents’: [random.randint(0, 5) for dep in range(num_records)],***'
- en: This generates a list of numbers of dependents using the *‘random.randint()’*
    function. Each number of dependents is a random integer between *0* and *5*, including
    both *0* and *5* in the range.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这生成了一个依赖人数的列表，使用*‘random.randint()’*函数。每个依赖人数是*0*到*5*之间的随机整数，包括*0*和*5*。
- en: This explanation was quite extensive, wasn’t it? Now, as we approach the end
    of the loop, once it has processed all the customers, we return the *‘customer_data’*
    dictionary containing the synthetic data.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解释相当详细，是吧？现在，随着我们接近循环的结束，处理完所有客户后，我们返回包含合成数据的*‘customer_data’*字典。
- en: Now that we have defined the necessary details for each field in the function,
    let’s move on to calling the function. But before that, we will set the total
    number of records we want to generate and store it in the variable *‘number_of_rows’*.
    With that done, we’ll proceed to call the *‘generate_customer_data’* function
    using this value. Here, we are generating *10000* synthetic records.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了函数中每个字段的必要细节，让我们继续调用函数。但在此之前，我们将设置要生成的记录总数，并将其存储在变量*‘number_of_rows’*中。完成后，我们将使用这个值调用*‘generate_customer_data’*函数。在这里，我们生成*10000*个合成记录。
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*‘customer_data: Dict[str, list]’* indicates that the function returns the
    synthetic data in the form of a dictionary, where its *keys* will be *strings*,
    and the corresponding *values* will be *lists*.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*‘customer_data: Dict[str, list]’*表示该函数以字典形式返回合成数据，其中*keys*将是*strings*，对应的*values*将是*lists*。'
- en: Moving on to the final part of the code, after extracting all the essential
    information, we have choices for what to do next. We can either export it to a
    *CSV, Excel* or *JSON* file or print it. However, it’s a good idea to keep the
    data in a pandas data frame. This lets you use it right away as well as in the
    future for data analysis. With a data frame, you can do different operations,
    clean and prepare the data, analyse it, and smoothly work with other libraries.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 进入代码的最后部分，在提取所有必要的信息后，我们有选择下一步的方案。我们可以将其导出到*CSV*、*Excel*或*JSON*文件中，也可以打印出来。然而，保留数据在pandas
    DataFrame中是个好主意。这样你可以立即使用它，也可以在未来进行数据分析。使用DataFrame，你可以执行各种操作，清理和准备数据，分析数据，并顺畅地与其他库配合使用。
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the code block above, we are using the dictionary *‘customer_data’* which
    was returned by the function *‘generate_customer_data’* tocreate a pandas DataFrame
    *‘df_customer’. ‘df_customer: pd.DataFrame’* indicates that *‘df_customer’* is
    a variable of type *‘pd.DataFrame’,* which means it is a Pandas DataFrame.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的代码块中，我们使用了函数*‘generate_customer_data’*返回的字典*‘customer_data’*来创建一个pandas
    DataFrame*‘df_customer’*。‘df_customer: pd.DataFrame’*表示*‘df_customer’*是*‘pd.DataFrame’*类型的变量，这意味着它是一个Pandas
    DataFrame。'
- en: Finally, let’s save this data to a *CSV* file. Please note that by default,
    the file will be created in the same directory as your program,
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们将这些数据保存到*CSV*文件中。请注意，默认情况下，文件将创建在与程序相同的目录中。
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we have created *‘synthetic_customer_data.csv’* as an output file, and
    stored this to a variable *‘output_file’*. ‘*to_csv()’* will save Pandas DataFrame
    as a *CSV* file,
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了*‘synthetic_customer_data.csv’*作为输出文件，并将其存储到变量*‘output_file’*中。‘*to_csv()’*将把Pandas
    DataFrame保存为*CSV*文件。
- en: '*index=False* indicates that the index column of the DataFrame will not be
    included in the resulting *CSV* file. By default, it is set to *true*.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*index=False*表示DataFrame的索引列将不会包含在结果*CSV*文件中。默认情况下，它设置为*true*。'
- en: '*encoding=’utf-8''* specifies the character encoding to be used when writing
    the DataFrame to a *CSV* file.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*encoding=’utf-8''* 指定了在将 DataFrame 写入 *CSV* 文件时使用的字符编码。'
- en: '*header=”true”* includes the column names as the header row in the *CSV* file.
    By default, it is set to *true*.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*header=”true”* 包括列名作为 *CSV* 文件中的表头行。默认情况下，设置为 *true*。'
- en: Conclusion
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The purpose of this article was to introduce the basics of generating synthetic
    data using Python. With various libraries available, like scikit-learn, SDV, Gretel,
    CTGAN, faker, random, and more, you can generate data for diverse use cases efficiently.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在介绍使用 Python 生成合成数据的基础知识。通过使用各种库，如 scikit-learn、SDV、Gretel、CTGAN、faker、random
    等，你可以高效地为各种用例生成数据。
- en: While synthetic data offers numerous benefits, it also has its drawbacks. Some
    common cons include possible inaccuracies in replicating real-world complexities,
    challenges in accurately representing rare events, and the potential introduction
    of biases if not created and validated carefully. The effectiveness of synthetic
    data generation relies on your specific requirements and the libraries available
    to you. Therefore, it is crucial to thoroughly evaluate your requirements and
    the capabilities of the available tools, as they directly influence the accuracy
    and usefulness of the generated synthetic data.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管合成数据提供了众多好处，但它也有其缺点。一些常见的缺点包括可能无法准确复制现实世界的复杂性、准确表示稀有事件的挑战，以及如果没有仔细创建和验证可能引入的偏见。合成数据生成的有效性依赖于你的具体需求和可用的库。因此，彻底评估你的需求和可用工具的能力至关重要，因为它们直接影响生成的合成数据的准确性和有用性。
- en: 'Here are some resources to get you started with synthetic data:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些资源可以帮助你开始使用合成数据：
- en: '[Synthetic Data vs Real Data](https://research.aimultiple.com/synthetic-data-vs-real-data/)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[合成数据与真实数据](https://research.aimultiple.com/synthetic-data-vs-real-data/)'
- en: '[Synthetic Data - The Royal Society](https://royalsociety.org/-/media/policy/projects/privacy-enhancing-technologies/Synthetic_Data_Survey-24.pdf)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[合成数据 - 皇家学会](https://royalsociety.org/-/media/policy/projects/privacy-enhancing-technologies/Synthetic_Data_Survey-24.pdf)'
- en: '[Faker Library](https://faker.readthedocs.io/en/master/)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Faker 库](https://faker.readthedocs.io/en/master/)'
- en: '[Random Library](https://python.readthedocs.io/en/stable/library/random.html)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Random 库](https://python.readthedocs.io/en/stable/library/random.html)'
- en: '[Typing Hint](https://docs.python.org/3.5/library/typing.html)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型提示](https://docs.python.org/3.5/library/typing.html)'
- en: '[Cassie Kozyrkov](https://medium.com/u/2fccb851bb5e?source=post_page-----ea15fd0555ee--------------------------------),
    the Chief Decision Scientist at Google, has written an extensive introductory
    guide on synthetic data that is a must-read,'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[Cassie Kozyrkov](https://medium.com/u/2fccb851bb5e?source=post_page-----ea15fd0555ee--------------------------------)，谷歌的首席决策科学家，撰写了关于合成数据的详尽入门指南，值得一读，'
- en: '[What is synthetic data?](/what-is-synthetic-data-e4820ccebfcf)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是合成数据？](/what-is-synthetic-data-e4820ccebfcf)'
- en: '[The synthetic data field guide](/the-synthetic-data-field-guide-f1fc59e2d178)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[合成数据实用指南](/the-synthetic-data-field-guide-f1fc59e2d178)'
- en: '[Why would you want synthetic data?](https://kozyrkov.medium.com/why-would-you-want-synthetic-data-5e919e2cbf0c)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你为什么需要合成数据？](https://kozyrkov.medium.com/why-would-you-want-synthetic-data-5e919e2cbf0c)'
- en: '[AI-generated synthetic data](/ai-generated-synthetic-data-913b73494062)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AI生成的合成数据](/ai-generated-synthetic-data-913b73494062)'
- en: '[The pros and cons of synthetic data](https://kozyrkov.medium.com/the-pros-and-cons-of-synthetic-data-f44ebb4d9e98)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[合成数据的利与弊](https://kozyrkov.medium.com/the-pros-and-cons-of-synthetic-data-f44ebb4d9e98)'
- en: The code used for this article is available on my [GitHub-Repository](https://github.com/PhoenixIM/Pure_Python/blob/master/Synthetic_Data_Generator.ipynb)
    and the resulting output file ‘*synthetic_customer_data.csv’* can be accessed
    [GitHub-Gist](https://gist.github.com/PhoenixIM/7ffda2f1c4d521f13a56ed9c3804fa31).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本文使用的代码可在我的 [GitHub 仓库](https://github.com/PhoenixIM/Pure_Python/blob/master/Synthetic_Data_Generator.ipynb)
    中找到，生成的输出文件‘*synthetic_customer_data.csv’* 可在 [GitHub Gist](https://gist.github.com/PhoenixIM/7ffda2f1c4d521f13a56ed9c3804fa31)
    中访问。
- en: '[*Become a member and read every story on Medium*](https://medium.com/@iffatm/membership)*.*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[*成为会员并阅读 Medium 上的每一个故事*](https://medium.com/@iffatm/membership)*.*'
- en: Happy Learning!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 祝学习愉快！
