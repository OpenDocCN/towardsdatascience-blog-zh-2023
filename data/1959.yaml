- en: Managing Deep Learning Models Easily With TOML Configurations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TOML 配置轻松管理深度学习模型
- en: 原文：[https://towardsdatascience.com/managing-deep-learning-models-easily-with-toml-configurations-fb680b9deabe?source=collection_archive---------4-----------------------#2023-06-15](https://towardsdatascience.com/managing-deep-learning-models-easily-with-toml-configurations-fb680b9deabe?source=collection_archive---------4-----------------------#2023-06-15)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/managing-deep-learning-models-easily-with-toml-configurations-fb680b9deabe?source=collection_archive---------4-----------------------#2023-06-15](https://towardsdatascience.com/managing-deep-learning-models-easily-with-toml-configurations-fb680b9deabe?source=collection_archive---------4-----------------------#2023-06-15)
- en: You may never need those long CLI args for your train.py
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你可能永远不需要那些长 CLI 参数来运行你的 train.py
- en: '[](https://equipintelligence.medium.com/?source=post_page-----fb680b9deabe--------------------------------)[![Shubham
    Panchal](../Images/d48aecd8b1ed27ab68fc2e7ff6716606.png)](https://equipintelligence.medium.com/?source=post_page-----fb680b9deabe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fb680b9deabe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fb680b9deabe--------------------------------)
    [Shubham Panchal](https://equipintelligence.medium.com/?source=post_page-----fb680b9deabe--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://equipintelligence.medium.com/?source=post_page-----fb680b9deabe--------------------------------)[![Shubham
    Panchal](../Images/d48aecd8b1ed27ab68fc2e7ff6716606.png)](https://equipintelligence.medium.com/?source=post_page-----fb680b9deabe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fb680b9deabe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fb680b9deabe--------------------------------)
    [Shubham Panchal](https://equipintelligence.medium.com/?source=post_page-----fb680b9deabe--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd45a9465f044&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-deep-learning-models-easily-with-toml-configurations-fb680b9deabe&user=Shubham+Panchal&userId=d45a9465f044&source=post_page-d45a9465f044----fb680b9deabe---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fb680b9deabe--------------------------------)
    ·4 min read·Jun 15, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffb680b9deabe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-deep-learning-models-easily-with-toml-configurations-fb680b9deabe&user=Shubham+Panchal&userId=d45a9465f044&source=-----fb680b9deabe---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fd45a9465f044&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-deep-learning-models-easily-with-toml-configurations-fb680b9deabe&user=Shubham+Panchal&userId=d45a9465f044&source=post_page-d45a9465f044----fb680b9deabe---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fb680b9deabe--------------------------------)
    ·4 分钟阅读·2023年6月15日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffb680b9deabe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-deep-learning-models-easily-with-toml-configurations-fb680b9deabe&source=-----fb680b9deabe---------------------bookmark_footer-----------)![](../Images/e4b95ed664b346a4ed6a66901d2d0454.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffb680b9deabe&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmanaging-deep-learning-models-easily-with-toml-configurations-fb680b9deabe&source=-----fb680b9deabe---------------------bookmark_footer-----------)![](../Images/e4b95ed664b346a4ed6a66901d2d0454.png)'
- en: Photo by [Scott Graham](https://unsplash.com/@homajob?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Scott Graham](https://unsplash.com/@homajob?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Managing deep learning models can be difficult due to the huge number of parameters
    and settings that are needed for all modules. The training module might need parameters
    like `batch_size` or the `num_epochs` or parameters for the learning rate scheduler.
    Similarly, the data preprocessing module might need `train_test_split` or parameters
    for image augmentation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 管理深度学习模型可能很困难，因为需要为所有模块配置大量参数和设置。训练模块可能需要诸如`batch_size`或`num_epochs`的参数，或用于学习率调度器的参数。同样，数据预处理模块可能需要`train_test_split`或用于图像增强的参数。
- en: A naive approach to manage or introduce these parameters into pipeline is to
    use them as CLI arguments while running the scripts. Command line arguments could
    be difficult to enter and managing all parameters in a single file may not be
    possible. TOML files provide a cleaner way to manage configurations and scripts
    can load necessary parts of the configuration in the form of a Python `dict` without
    needing boilerplate code to read/parse command-line args.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 管理或引入这些参数到管道中的一种天真的方法是将它们作为CLI参数传递给脚本。命令行参数可能很难输入，并且在单个文件中管理所有参数可能不切实际。TOML文件提供了一种更清洁的配置管理方式，脚本可以以Python
    `dict`的形式加载配置的必要部分，而无需读取/解析命令行参数的样板代码。
- en: In this blog, we’ll explore the use of TOML in configuration files and how we
    can efficiently use them across training/deployment scripts.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客中，我们将深入探讨TOML在配置文件中的使用，以及如何在训练/部署脚本中高效地使用它们。
- en: What are TOML files?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是TOML文件？
- en: TOML, stands for [*Tom’s Obvious Minimal Language*](https://toml.io/en/), is
    file-format designed specifically for configuration files. The concept of a TOML
    file is quite similar to [YAML/YML files](https://yaml.org/) which have the ability
    to store key-value pairs in a tree-like hierarchy. [An advantage of TOML over
    YAML is its readability](https://www.reddit.com/r/devops/comments/6f82nu/yaml_vs_toml/)
    which becomes important when there are multiple nested levels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TOML，代表[*Tom’s Obvious Minimal Language*](https://toml.io/en/)，是一种专门为配置文件设计的文件格式。TOML文件的概念与[YAML/YML文件](https://yaml.org/)非常相似，这些文件能够以树状层次结构存储键值对。[TOML相对于YAML的一个优点是其可读性](https://www.reddit.com/r/devops/comments/6f82nu/yaml_vs_toml/)，当存在多个嵌套层级时，这一点尤为重要。
- en: '![](../Images/243acf211a4cf117dd43331068b4c1c7.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/243acf211a4cf117dd43331068b4c1c7.png)'
- en: Fig.1\. The same model configurations written in TOML (left) and YAML (right).
    TOML allows us to write key-value pairs at the same indentation level regardless
    of the hierarchy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图1\. 同一模型配置以TOML（左）和YAML（右）编写。TOML允许我们在相同的缩进级别下编写键值对，无论层次结构如何。
- en: Personally, except for enhanced readability, I find no practical reason to prefer
    TOML over YAML. Using YAML is absolutely fine, here’s a [Python package](https://pypi.org/project/PyYAML/)
    for parsing YAML.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 就个人而言，除了增强的可读性，我找不到任何实用的理由来优先选择TOML而非YAML。使用YAML完全没问题，这里有一个[Python包](https://pypi.org/project/PyYAML/)用于解析YAML。
- en: Why do we need configurations in TOML?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要在TOML中配置？
- en: 'There are two advantages of using TOML for storing model/data/deployment configuration
    for ML models:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TOML存储模型/数据/部署配置有两个优势：
- en: 'Managing all configurations in a single file: With TOML files, we can create
    multiple groups of settings that are required for different modules. For instance,
    in figure 1, the settings related to the model’s training procedure are nested
    under the `[train]` attribute, similarly the `port` and `host` required for deploying
    the model are stored under `deploy` . We need not jump between `train.py` or `deploy.py`
    to change their parameters, instead we can globalize all settings from a single
    TOML configuration file.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个文件中管理所有配置：通过TOML文件，我们可以为不同模块创建多个设置组。例如，在图1中，与模型训练过程相关的设置嵌套在`[train]`属性下，类似地，模型部署所需的`port`和`host`存储在`deploy`下。我们不需要在`train.py`或`deploy.py`之间跳转以更改参数，而是可以从单个TOML配置文件中全局化所有设置。
- en: This could be super helpful if we’re training the model on a virtual machine,
    where code-editors or IDEs are not available for editing files. A single config
    file is easy to edit with `vim` or `nano` available on most VMs.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我们在虚拟机上训练模型，而没有代码编辑器或IDE可用来编辑文件，这可能会非常有帮助。单个配置文件可以通过大多数虚拟机上可用的`vim`或`nano`轻松编辑。
- en: How do we read configurations from TOML?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何从TOML中读取配置？
- en: To read the configuration from a TOML files, two Python packages can be used,
    `[toml](https://github.com/uiri/toml)` and `[munch](https://github.com/uiri/toml)`
    . `toml` will help us read the TOML file and return the contents of the file as
    a Python `dict` . `munch` will convert the contents of the `dict` to enable attribute-style
    access of elements. For instance, instead of writing, `config[ "training" ][ "num_epochs"
    ]` , we can just write `config.training.num_epochs` which enhances readability.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要从TOML文件中读取配置，可以使用两个Python包，`[toml](https://github.com/uiri/toml)` 和 `[munch](https://github.com/uiri/toml)`。`toml`将帮助我们读取TOML文件并返回文件内容作为Python
    `dict`。`munch`将转换`dict`的内容以实现属性样式的元素访问。例如，不需要写`config[ "training" ][ "num_epochs"
    ]`，我们可以直接写`config.training.num_epochs`，这增强了可读性。
- en: Consider the following file structure,
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下文件结构，
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`project_config.toml` contains the configuration for our ML project, like,'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`project_config.toml` 包含我们的 ML 项目的配置，如，'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In `config.py` , we create a function which returns the *munchified*-version
    of this configuration, using `toml` and `munch` ,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `config.py` 中，我们创建了一个函数，该函数返回使用 `toml` 和 `munch` 的 *munchified* 版本的配置，
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, now in any of our project files, like `train.py` or `predict.py` , we can
    load this configuration,
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们项目的任何文件中，比如 `train.py` 或 `predict.py`，我们都可以加载这个配置，
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output of `print( toml.load( filepath ) ) )` is,
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`print( toml.load( filepath ) )` 的输出是，'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you’re using MLOps tools like W&B Tracking or MLFlow, maintaining configuration
    as a `dict` could be helpful as we can directly pass it as an argument.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用像 W&B Tracking 或 MLFlow 这样的 MLOps 工具，将配置保持为 `dict` 可能会很有帮助，因为我们可以直接将其作为参数传递。
- en: The End
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束
- en: Hope you will consider using TOML configurations in your next ML project! Its
    a clean way of managing settings that are both global or local to your training
    / deployment or inference scripts.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您考虑在您的下一个 ML 项目中使用 TOML 配置！这是管理全局或局部于您的训练/部署或推理脚本的设置的一种清晰方式。
- en: Instead of writing long CLI arguments, the scripts could directly load the configuration
    from the TOML file. If we wish to train two versions of a model with different
    hyperparameters, we just need to change the TOML file in `config.py` . I have
    started using TOML files in my recent projects and experimentation has become
    faster. MLOps tools can also manage versions of a model along with their configurations,
    but the simplicity of the above discussed approach is unique and required minimal
    change in existing projects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是编写长长的命令行参数，脚本可以直接从 TOML 文件中加载配置。如果我们希望用不同的超参数训练两个版本的模型，我们只需在 `config.py`
    中更改 TOML 文件。我最近的项目中开始使用 TOML 文件，实验变得更快了。MLOps 工具也可以管理模型的版本以及它们的配置，但以上讨论的方法的简单性是独特的，并且需要最小的现有项目更改。
- en: Hope you’ve enjoyed reading. Have a nice day ahead!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您喜欢阅读。祝您有个愉快的一天！
