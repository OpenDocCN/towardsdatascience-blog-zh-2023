- en: 'Understanding SQL: Getting Started with Window Functions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SQL：入门窗口函数
- en: 原文：[https://towardsdatascience.com/understanding-sql-getting-started-with-window-functions-287391b9cef5?source=collection_archive---------5-----------------------#2023-09-17](https://towardsdatascience.com/understanding-sql-getting-started-with-window-functions-287391b9cef5?source=collection_archive---------5-----------------------#2023-09-17)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understanding-sql-getting-started-with-window-functions-287391b9cef5?source=collection_archive---------5-----------------------#2023-09-17](https://towardsdatascience.com/understanding-sql-getting-started-with-window-functions-287391b9cef5?source=collection_archive---------5-----------------------#2023-09-17)
- en: Get more from your aggregations by using SQL window functions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过使用 SQL 窗口函数，获取更多的聚合信息
- en: '[](https://medium.com/@dataforyou?source=post_page-----287391b9cef5--------------------------------)[![Rob
    Taylor, PhD](../Images/5e4e86da7b77404ed42d00a60ea5eacf.png)](https://medium.com/@dataforyou?source=post_page-----287391b9cef5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----287391b9cef5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----287391b9cef5--------------------------------)
    [Rob Taylor, PhD](https://medium.com/@dataforyou?source=post_page-----287391b9cef5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@dataforyou?source=post_page-----287391b9cef5--------------------------------)[![Rob
    Taylor, PhD](../Images/5e4e86da7b77404ed42d00a60ea5eacf.png)](https://medium.com/@dataforyou?source=post_page-----287391b9cef5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----287391b9cef5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----287391b9cef5--------------------------------)
    [Rob Taylor, PhD](https://medium.com/@dataforyou?source=post_page-----287391b9cef5--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F98de080592fc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-getting-started-with-window-functions-287391b9cef5&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=post_page-98de080592fc----287391b9cef5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----287391b9cef5--------------------------------)
    ·15 min read·Sep 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F287391b9cef5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-getting-started-with-window-functions-287391b9cef5&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=-----287391b9cef5---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F98de080592fc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-getting-started-with-window-functions-287391b9cef5&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=post_page-98de080592fc----287391b9cef5---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----287391b9cef5--------------------------------)
    ·15 分钟阅读·2023年9月17日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F287391b9cef5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-getting-started-with-window-functions-287391b9cef5&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=-----287391b9cef5---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F287391b9cef5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-getting-started-with-window-functions-287391b9cef5&source=-----287391b9cef5---------------------bookmark_footer-----------)![](../Images/7d9d02bd38237ca6dc7bedb3e5383324.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F287391b9cef5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-getting-started-with-window-functions-287391b9cef5&source=-----287391b9cef5---------------------bookmark_footer-----------)![](../Images/7d9d02bd38237ca6dc7bedb3e5383324.png)'
- en: Photo by [Components AI](https://unsplash.com/@components_ai?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Components AI](https://unsplash.com/@components_ai?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: When it comes to aggregating data in SQL, *window functions* provide greater
    flexibility than aggregations used in conjunction with `GROUP BY` clauses. While
    both approaches indeed perform similar functions, window functions differ by virtue
    of how the outputs are structured. Specifically, window functions apply operations
    across a *set* of related rows, where the relation is determined by some grouping,
    or *partition*, of the table rows. And, unlike their non-window counterparts that
    collapse rows into a single output row, *all* rows retain their separate identities
    and are present in the output table.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中聚合数据时，*窗口函数*比与`GROUP BY`子句结合使用的聚合方法提供了更大的灵活性。虽然这两种方法确实执行类似的功能，但窗口函数的不同在于输出的结构方式。具体来说，窗口函数对一组相关的行进行操作，这些行的关系由表行的某些分组或*分区*决定。而且，与将行合并为单一输出行的非窗口函数不同，*所有*行都保持其独立身份，并出现在输出表中。
- en: This behaviour is quite unlike your usual run of the mill aggregation and can
    greatly extend your analytical toolbox beyond simple summary statistics. For example,
    window functions allows us to compute running sums, moving averages, and even
    statistical measures like *z*-scores.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为与普通的聚合操作大相径庭，能够大大扩展你的分析工具箱，超越简单的汇总统计。例如，窗口函数允许我们计算累计总和、移动平均，甚至像*z*-得分这样的统计指标。
- en: In this post we’re going to take a look at the anatomy and basic functionality
    of SQL window functions. The focus here is somewhat rudimentary, so if you haven’t
    come across window functions, or have limited experience using them, this will
    hopefully be of some interest to you.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将查看 SQL 窗口函数的结构和基本功能。这里的重点有些基础，因此如果你还没有接触过窗口函数，或者对它们的使用经验有限，希望这对你会有一些帮助。
- en: 'For this post we’ll be using some high level summary data about the FIFA World
    Cup competitions between 1930 and 2022\. The placings and statistics were sourced
    from Wikipedia and is made available under the Creative Commons Attribution Share-Alike
    license (CC-BY-SA). The data and related information can be found [here](https://en.wikipedia.org/wiki/FIFA_World_Cup).
    For the purpose of this blog I imported the table into my own PostgresSQL database,
    but if you want to follow along you can grab a copy of the table from my [Git
    repository](https://github.com/dataforyounz/fifa-world-cup). In my database this
    table is called `world_cup_placings` and an output is shown below:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将使用关于1930年至2022年FIFA世界杯比赛的一些高级汇总数据。这些排名和统计数据来自维基百科，并在知识共享署名-相同方式共享（CC-BY-SA）许可下提供。数据和相关信息可以在[这里](https://en.wikipedia.org/wiki/FIFA_World_Cup)找到。为了本博客的目的，我将表格导入到我自己的PostgresSQL数据库中，但如果你想跟随，你可以从我的[Git
    仓库](https://github.com/dataforyounz/fifa-world-cup)中获取表格的副本。在我的数据库中，这个表格被称为`world_cup_placings`，下面显示了一个输出示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A quick note on execution order
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于执行顺序的简要说明
- en: The order in which SQL executes each clause is important to understand, so let’s
    just take a few minutes to examine where window functions fall in the [order of
    execution](/understanding-sql-order-of-execution-ba2b4e558828).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 SQL 执行每个子句的顺序是很重要的，所以我们花几分钟时间来检查窗口函数在[执行顺序](https://understanding-sql-order-of-execution-ba2b4e558828)中的位置。
- en: Window functions can only be used within `SELECT` lists and the`ORDER BY` clause.
    They **cannot** be used with `GROUP BY` , `HAVING` , or `WHERE` clauses. The reason
    for this is that window functions are executed *after* these clauses have been
    processed. Another thing to note is that window functions are processed *after*
    non-window aggregate functions (i.e., `SUM` , `MAX,` `AVG` , etc). As we’ll see
    later, this is useful because it means we can actually use these functions within
    our window function.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数只能在 `SELECT` 列表和 `ORDER BY` 子句中使用。它们**不能**与 `GROUP BY`、`HAVING` 或 `WHERE`
    子句一起使用。原因在于窗口函数是在这些子句处理*之后*执行的。另一个需要注意的事项是，窗口函数是在非窗口聚合函数（即 `SUM`、`MAX`、`AVG` 等）处理*之后*执行的。正如我们稍后将看到的，这很有用，因为这意味着我们实际上可以在窗口函数中使用这些函数。
- en: The OVER clause
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OVER 子句
- en: 'First, let’s take a look at the simplest version of a window function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看看窗口函数的最简单版本：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `FUNCTION_NAME()` is just a placeholder for whatever function you wish to
    use; however, window functions must *always* contain an `OVER` clause. This clause
    is what distinguishes window from non-window functions and its role is to determine
    *how* the rows are split up for processing. In the example above, though, no arguments
    have been passed to `OVER` . This is perfectly legitimate so lets see what this
    looks like in practice.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`FUNCTION_NAME()`只是一个占位符，用于你希望使用的任何函数；然而，窗口函数必须*总是*包含`OVER`子句。这个子句区别了窗口函数和非窗口函数，它的作用是确定*如何*将行分割以进行处理。在上面的例子中，虽然没有传递任何参数给`OVER`。这完全合法，所以让我们看看实际效果如何。'
- en: 'A common use case for window functions is to assign a numerical value to each
    row in the table. This can be achieved using the inbuilt `ROW_NUMBER` function.
    For example, consider the example query below:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数的一个常见用例是为表中的每一行分配一个数值。这可以通过内置的`ROW_NUMBER`函数实现。例如，考虑下面的示例查询：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We now have a newly minted column called `row_num` that contains a sequential
    list of numbers; one for each table row. With just the vanilla `OVER` clause the
    window function treats the *entire* table as a single partition. That’s because
    we haven’t told it anything otherwise.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个新创建的列叫做`row_num`，它包含一个顺序编号列表；每个表行一个。仅使用普通的`OVER`子句，窗口函数将*整个*表视为一个单一分区。这是因为我们没有告诉它其他信息。
- en: 'Let’s see what happens if we replace `ROW_NUMBER` with an aggregate function,
    like `SUM` , and apply it to the `total_goals` columns, which is the total number
    of goals during the entire competition. The query for this is provided next:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果用聚合函数，如`SUM`，替代`ROW_NUMBER`并应用于`total_goals`列（即整个比赛期间的总进球数）会发生什么。下面提供了这个查询：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Okay, so we just get a single value for each row — but this is exactly what
    we should expect to see. Remember, window functions are applied across all rows
    within a partition, and here (like above) the window function is treating the
    entire table as a partition. As a result, it will just sum all values in the `total_goals`
    column. Also, window functions retain row identity and so this output value is
    repeated for each output row. Note also that we’re using an aggregation function
    within the window function — this is possible because window functions are processed
    *after* aggregate functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们为每一行只得到一个值——这正是我们应该预期的。记住，窗口函数是在一个分区内应用到所有行的，而这里（如上所述），窗口函数将整个表视为一个分区。因此，它将只对`total_goals`列中的所有值进行求和。此外，窗口函数保留了行的身份，因此这个输出值会为每一行重复。还要注意，我们在窗口函数中使用了一个聚合函数——这是可能的，因为窗口函数是在聚合函数*之后*处理的。
- en: 'Right, let’s see how far we can push this approach by computing the average
    number of goals scored across all competitions (note the rounding off for output
    value):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看看通过计算所有比赛中的平均进球数（注意输出值的四舍五入）我们可以推进到什么程度：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, this is quite useful. Having the average number of goals listed alongside
    the competition totals allows us to directly compare these values. We can easily
    see how individual totals compare to the average taken across all competitions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这非常有用。将平均进球数与比赛总数一起列出，让我们可以直接比较这些值。我们可以很容易地看到个别总数与所有比赛中的平均数相比如何。
- en: 'Let’s push this even further by computing a *z*-score for each row. To do so
    we’ll also need to use the `STDDEV` function within another window function. The
    query below shows you how to do this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步推展，通过计算每一行的*z*-分数来实现。为此，我们还需要在另一个窗口函数中使用`STDDEV`函数。下面的查询展示了如何做到这一点：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That’s looking pretty good!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当不错！
- en: The PARTITION BY clause
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PARTITION BY 子句
- en: 'Up until this point I have been using the term *partition* a lot, so let’s
    take a look at what this actually means. Recall that in the earlier examples we
    didn’t explicitly state how we wanted the table partitioned, so operations were
    performed across all rows in the table. The `PARTITION BY` clause, on the other
    hand, is called *within* the `OVER` clause and it dictates how rows should be
    divided into groups, or *partitions.* With this clause included the anatomy of
    the window function now looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我一直在使用*分区*这个术语，所以让我们看看这实际上是什么意思。回顾之前的例子，我们没有明确说明希望如何对表进行分区，所以操作是在整个表的所有行上进行的。另一方面，`PARTITION
    BY`子句被称为*在*`OVER`子句内，它规定了行应该如何分成组或*分区*。包含这个子句后，窗口函数的结构现在看起来像这样：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The placeholder `[var]` refers to a column that is used to group rows. To demonstrate,
    let’s take another crack at numbering rows using the `ROW_NUMBER` function, only
    this time we’ll use the `first_place` column to partition the rows. Check out
    the query below:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符`[var]`指的是用于分组行的列。为了演示，我们再试一次使用`ROW_NUMBER`函数对行进行编号，这次我们将使用`first_place`列来对行进行分区。查看下面的查询：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Okay, things are looking very different to last time. First, we can see that
    the output has ordered the table using the `first_place` column, but that’s not
    all that interesting. What *is* interesting are the changes to the `row_num` column.
    Starting at the top and working down, we can see that the number sequence resets
    for each distinct value in `first_place`, counting only the rows associated with
    each country’s partition.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，情况与上次看起来非常不同。首先，我们可以看到输出已使用`first_place`列对表进行了排序，但这并不特别有趣。*有趣*的是`row_num`列的变化。从顶部开始向下查看，我们可以看到编号序列在`first_place`的每个不同值上都会重置，只计数与每个国家的分区相关的行。
- en: 'Let’s build on our query some more. In addition to the `row_num` column let’s
    compute the total number of goals scored and the maximum total attendance. We’ll
    again use the `first_place` column to partition the table, so these aggregations
    will apply only to the rows associated with each partition. The query below shows
    you how to do this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在查询基础上再做些扩展。除了`row_num`列，我们还计算总进球数和最大总出席人数。我们将再次使用`first_place`列来对表进行分区，因此这些聚合将仅适用于与每个分区相关的行。下面的查询展示了如何做到这一点：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, neither of these aggregations are particularly useful in and of themselves
    and they’re really just for demonstration purposes. But let’s take a look at what
    we actually get back from this query.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些聚合本身并不是特别有用，它们只是为了演示目的。但让我们看看从这个查询中实际得到的结果。
- en: First, the `all_goals` column provides the total number of goals scored across
    all competitions for each winning country (recall, we have partitioned rows using
    the `first_place` column). For example, in competitions where Argentina won, we
    can see that a total of 102 goals were scored when Argentina hosted in 1978, 132
    goals were scored in 1986 when Mexico hosted, and 172 goals most recently in Qatar.
    The `all_goals` value, then, is simply the sum of these two values, which is 406.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`all_goals`列提供了每个获胜国家在所有比赛中进球的总数（回忆一下，我们已使用`first_place`列对行进行了分区）。例如，在阿根廷获胜的比赛中，我们可以看到在1978年阿根廷主办时进了102球，1986年墨西哥主办时进了132球，最近在卡塔尔进了172球。`all_goals`值就是这两个值的总和，即406。
- en: Second, the `max_attendance` value returns the highest competition attendance
    for each winning country. For example, of the World Cups listed in the table,
    Italy has won four of them, with the highest attendance recorded during the 2006
    World Cup held in Germany (3,359,439). So, for all rows where Italy was the winner,
    this is value returned for `max_attendance` .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`max_attendance`值返回每个获胜国家的最高比赛出席人数。例如，在表中列出的世界杯中，意大利赢得了其中四场，其中2006年在德国举办的世界杯的最高出席人数（3,359,439）。因此，对于所有意大利获胜的行，这就是`max_attendance`返回的值。
- en: 'Looking back over the query, you might have noticed that we need write `OVER(
    PARTITION BY first_place )` three times; once for each window function in the
    `SELECT` list. This can become a little tedious if your query requires multiple
    window functions that partition using the same column. So is there a better to
    achieve the same goal? Yes. Yes there is. In cases like these — where the windowing
    is the same for all functions — we can use a separate `WINDOW` clause to define
    the partition and assign it a name that can be called by `OVER` . Take a look
    at the query below:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾查询，你可能会注意到我们需要写`OVER( PARTITION BY first_place )`三次；每个窗口函数在`SELECT`列表中出现一次。如果你的查询需要多个窗口函数，并且使用相同的列进行分区，这可能会变得有些乏味。那么有没有更好的方法来实现相同的目标？有的。确实有。在这些情况下——所有函数的窗口设置相同——我们可以使用一个单独的`WINDOW`子句来定义分区，并为其指定一个可以通过`OVER`调用的名称。查看下面的查询：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, this doesn’t eliminate the need to provide an argument after the `OVER`
    clause — that can’t be avoided — but this approach is far less error-prone and
    definitely helps declutter the query. You can check that the results are identical
    to the output above.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这并不会消除在`OVER`子句后提供参数的需要——这是无法避免的——但这种方法出错的可能性要小得多，并且确实有助于清理查询。你可以检查结果是否与上面的输出一致。
- en: The ORDER BY clause
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ORDER BY`子句'
- en: 'Another clause that can be added to `OVER` is the `ORDER BY` clause. This clause
    will certainly look familiar, and indeed it works exactly how you’d expect it
    to. The only difference is that when we use it within the `OVER` clause it affects
    the ordering within each partition. With this clause included our window function
    now looks like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以添加到`OVER`中的子句是`ORDER BY`子句。这个子句肯定很熟悉，实际上它的工作方式完全符合你的预期。唯一的不同是，当我们在`OVER`子句中使用它时，它会影响每个分区内的排序。包含这个子句后，我们的窗口函数现在看起来是这样的：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can use the `ORDER BY` clause to order values before performing an operation.
    This is particularly useful if we want to rank values using the `RANK` function
    which assigns a numerical value to each *distinct* `ORDER BY` value. This means
    it behaves slightly differently to the `ROW_NUMBER` function because the `RANK`
    function will assign the same rank to duplicated values. Check out the query below
    and compare the row outputs:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ORDER BY`子句在执行操作之前对值进行排序。如果我们想使用`RANK`函数对值进行排名，这非常有用，因为`RANK`函数会为每个*不同*的`ORDER
    BY`值分配一个数值。这意味着它的行为与`ROW_NUMBER`函数略有不同，因为`RANK`函数会为重复值分配相同的排名。查看下面的查询并比较行输出：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See the difference? If we look at the rows two and three, we see that both Brazil
    2014 and France 1998 resulted in 171 goals. While the `row_num` column assigns
    different values to these rows, the `row_rank` columns has assigned the same rank.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 看到了区别吗？如果我们查看第二行和第三行，我们会看到巴西2014和法国1998都得到了171个进球。虽然`row_num`列为这些行分配了不同的值，但`row_rank`列则分配了相同的排名。
- en: Just note that, for the `ROW_NUMBER` window function, I didn’t actually need
    to specify `ORDER BY total_goals DESC` , but I’ve done this to highlight the fact
    that the `ROW_NUMBER` window function doesn’t care about duplicated values; it
    simply numbers each row despite the ordering by `total_goals` .
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，对于`ROW_NUMBER`窗口函数，我实际上不需要指定`ORDER BY total_goals DESC`，但我这样做是为了强调`ROW_NUMBER`窗口函数不关心重复值；它只是为每一行编号，不管是否按`total_goals`排序。
- en: 'Okay, now let’s try using the `ORDER BY` and `PARTITION BY` clause together
    to find in which year each team last won the World Cup. First, we’ll use the `first_place`
    column to partition the table and then sort the rows in descending order using
    the `year` column. The following query shows you how to do this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们尝试将`ORDER BY`和`PARTITION BY`子句一起使用，以找出每个团队最后一次赢得世界杯的年份。首先，我们将使用`first_place`列来对表进行分区，然后使用`year`列按降序对行进行排序。以下查询展示了如何实现这一点：
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By sorting the competition years in descending order we ensure that the most
    recent year occupies the first row of each partition. Now, because there can only
    be one winner each year there are no duplicate values in the `year` column. So,
    when we assign ranks to each partition, the first row will always have a rank
    of 1 which corresponds to the most recent win for each country.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按降序排列比赛年份，我们确保每个分区的第一行是最新的年份。现在，由于每年只能有一个获胜者，因此`year`列中没有重复值。因此，当我们为每个分区分配排名时，第一行将始终具有排名1，这对应于每个国家的最新胜利。
- en: 'This output, however, is a bit noisy and we have to read each row to find the
    ranks for each partition. We can tidy things up a bit by placing the above query
    within a sub-query and filtering out only the rows that have a rank of 1\. Check
    out the query below to see this in action:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个输出有点杂乱，我们必须阅读每一行以找出每个分区的排名。我们可以通过将上述查询放在子查询中，并过滤出仅具有排名1的行来整理一下。查看下面的查询以了解实际效果：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Final Remarks
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终备注
- en: Window functions are remarkably versatile and are often more efficient when
    needing to compute values using only a subset of rows. This post just scratches
    the surface of what can be done using window functions and demonstrates only their
    basic functionality. Regardless, I hope you found something useful in this post.
    In a later post we’ll build on these concepts and explore how window functions
    can be used to compute some more exotic measures.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数非常灵活，当需要仅使用子集行来计算值时，它们通常更加高效。此帖仅触及窗口函数的表面，并仅演示了它们的基本功能。不管怎样，希望你在此帖中找到了一些有用的内容。在后续的帖子中，我们将基于这些概念，探索如何使用窗口函数计算一些更为复杂的度量。
- en: Related Articles
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关文章
- en: '[Understanding SQL: Order of Execution](https://medium.com/towards-data-science/understanding-sql-order-of-execution-ba2b4e558828)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解 SQL：执行顺序](https://medium.com/towards-data-science/understanding-sql-order-of-execution-ba2b4e558828)'
- en: Thanks for reading!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: If you enjoyed this post and would like to stay up to date then please consider
    [following me on Medium.](https://medium.com/@dataforyou) This will ensure you
    don’t miss out on any new content.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章并希望保持更新，请考虑[关注我的 Medium 账号](https://medium.com/@dataforyou)。这将确保你不会错过任何新内容。
- en: To get unlimited access to all content consider signing up for a [Medium subscription](https://medium.com/membership).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 若要无限制访问所有内容，请考虑注册[Medium 订阅](https://medium.com/membership)。
- en: You can also follow me on [Twitter](https://twitter.com/dataforyounz), [LinkedIn](https://www.linkedin.com/in/dataforyou/),
    or check out my [GitHub](https://github.com/dataforyounz) if that’s more your
    thing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在[Twitter](https://twitter.com/dataforyounz)、[LinkedIn](https://www.linkedin.com/in/dataforyou/)上关注我，或者查看我的[GitHub](https://github.com/dataforyounz)，如果这更符合你的兴趣。
