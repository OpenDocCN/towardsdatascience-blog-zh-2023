- en: 4 Common Python Mistakes You Should Avoid as a Beginner
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4个初学者应避免的常见Python错误
- en: 原文：[https://towardsdatascience.com/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b](https://towardsdatascience.com/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b](https://towardsdatascience.com/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b)
- en: And how to correct yourself before you unintentionally ruin a job interview.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以及如何在不小心破坏面试机会之前纠正自己。
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)
    ·7 min read·Jan 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)
    ·阅读时长7分钟·2023年1月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6b371b75bddaaafc03c5b79151b4e80e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b371b75bddaaafc03c5b79151b4e80e.png)'
- en: Photo by [David Pupaza](https://unsplash.com/@dav420?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[David Pupaza](https://unsplash.com/@dav420?utm_source=medium&utm_medium=referral)提供，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Python is an excellent language for beginners, but that doesn’t mean there are
    no mistakes to be made. Especially during the early stages of learning to program,
    it’s easy to write code that is technically correct, but stylistically poor.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一个很适合初学者的语言，但这并不意味着不会犯错误。特别是在学习编程的早期阶段，容易编写出技术上正确但风格上欠佳的代码。
- en: If you’re going to learn to code, it’s crucial that you learn to do it well.
    Be it in academia or industry, the quality of your code matters. It affects not
    only you, but each and every person who will go on to read and work with your
    code. Perhaps more selfishly, it also affects your hiring prospects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算学习编程，那么学会如何编写高质量的代码至关重要。无论是在学术界还是工业界，代码的质量都很重要。它不仅影响到你自己，还影响到每一个将要阅读和使用你代码的人。更自私一点说，它还影响到你的招聘前景。
- en: In this article, I’ll discuss four common mistakes made by introductory Python
    programmers. Learning these traps in my early Python days was extremely helpful
    for me, and I hope it can be for you as well.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将讨论初学Python程序员常犯的四个错误。学习这些陷阱对我早期学习Python非常有帮助，希望对你也同样有用。
- en: Let’s get into it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始吧。
- en: The Good Old Boolean Conditional
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统布尔条件
- en: This is a common mistake made by introductory programmers. It’s also a mistake
    made by not-so-introductory programmers who nevertheless lack a formal background
    in programming because they simply use code as a tool. I’m looking at you, data
    scientists.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是初学者程序员常犯的一个错误。这也是那些没有正式编程背景的程序员所犯的错误，因为他们只是将代码作为工具使用。我在说你们，数据科学家们。
- en: Conditional statements in Python are useful, but they aren’t always necessary.
    This is particularly true in cases when the condition you’re checking already
    contains a Boolean (True or False) value.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的条件语句很有用，但并非总是必要的。特别是当你检查的条件已经包含布尔值（True或False）时，更是如此。
- en: Let me illustrate with a simple example. Say we want to write code to determine
    if a data set has already been cleaned. Lucky for us, the code base contains a
    convenient variable called `is_data_clean` which keeps track of this. All we need
    to do is check it and return the correct value.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我用一个简单的例子来说明。假设我们想编写代码来确定数据集是否已经被清理。幸运的是，代码库中包含一个名为`is_data_clean`的方便变量来跟踪这一点。我们只需检查它并返回正确的值即可。
- en: 'As a first attempt, we might write something like the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一次尝试，我们可能会写如下内容：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This works well enough, but it’s needlessly complex. Do you see the problem?
    Look carefully.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这方法够用了，但不必要地复杂。你看到问题了吗？仔细看看。
- en: The variable `is_data_clean` is already a Boolean; therefore, it already contains
    the very value you need to return! The code checks if it is `True`, only to then
    return `True`, and if it isn’t `True` (meaning it is `False`), the code returns
    `False`. It’s just a whole bunch of unnecessary checks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`is_data_clean`已经是布尔值；因此，它已经包含了你需要返回的值！代码检查它是否为`True`，如果是，则返回`True`，如果不是`True`（即`False`），则代码返回`False`。这只是一些不必要的检查。
- en: 'We can simplify the code in the function to one line:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将函数中的代码简化为一行：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Much better.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 好得多。
- en: The manual sum, mean, or other built-in operation
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动计算总和、均值或其他内置操作
- en: Python has more built-in functionality than most people realize. The number
    of people still using a loop to manually calculate a sum is too damn high.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python具有比大多数人意识到的更多的内置功能。仍然使用循环手动计算总和的人数太多了。
- en: 'If we have a list of numbers in Python, we absolutely should **not** be calculating
    the sum like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Python中有一组数字，我们绝对**不**应该这样计算总和：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the built-in `sum` function instead:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 改用内置的`sum`函数：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Need a minimum or maximum? The universe forbid you write something like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 需要最小值还是最大值？宇宙不允许你这样写：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This isn’t an introductory computer science principles class; it’s the real
    world. Stop reinventing the wheel and use the built-in `min` and `max` functions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一门计算机科学原理入门课；这是现实世界。停止重新发明轮子，使用内置的`min`和`max`函数：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For a full list of built-in functions, see the [Python documentation](https://docs.python.org/3/library/functions.html)
    [1].
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的内置函数列表，请参见[Python文档](https://docs.python.org/3/library/functions.html)
    [1]。
- en: '**Bonus: Built-in functions that aren’t *technically* built in.**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外奖励：内置的函数虽然*从技术上讲* 不是内置的。**'
- en: Some functions are harder to find, but that doesn’t mean you shouldn’t find
    them.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有些函数较难找到，但这并不意味着你不应该找到它们。
- en: 'For instance, if we need the mean of a list of numbers (you might sense a recurring
    theme here), we *could* use the first code snippet below, but we *should* use
    the second:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们需要一组数字的均值（你可能会感受到这里的重复主题），我们*可以*使用下面的第一个代码片段，但我们*应该*使用第二个：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Oftentimes, Python offers useful functions that are within modules. It might
    be a bit of extra work to locate the module we need and import the function, but
    it’s well worth the resulting code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Python提供了有用的函数，这些函数在模块中。找到我们需要的模块并导入函数可能需要一点额外的工作，但结果代码非常值得。
- en: Remember — Python is all about simplicity and readability. Built-in functions
    are your friends. And unlike your human friends, they’ll never disappoint.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 记住——Python的核心是简单性和可读性。内置函数是你的朋友。与人类朋友不同，它们不会让你失望。
- en: Doing something to do nothing
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做点什么以便什么都不做
- en: In one of the introductory Python classes I teach, the students’ first project
    is to write a simple decision-making algorithm. It’s primarily an exercise in
    conditionals, requiring the students to define a question and associated scoring
    system to determine the likelihood that someone qualifies for the question.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我教授的某一门Python入门课程中，学生的第一个项目是编写一个简单的决策算法。这主要是一个条件判断的练习，要求学生定义一个问题和相关的评分系统，以确定某人是否符合该问题的条件。
- en: 'For example, one might ask, “Should I become a data scientist?” Then, the algorithm
    could consist of the following questions, all of which either add or subtract
    from the eventual output score, depending on the answer:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有人可能会问，“我应该成为数据科学家吗？”那么，算法可能会包含以下问题，所有这些问题都会根据答案对最终的输出分数进行加减：
- en: Am I interested in using data to gain insights about the world?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我是否有兴趣使用数据来获取对世界的洞察？
- en: Am I willing to learn Python?
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我是否愿意学习Python？
- en: Do I enjoy working with multidisciplinary teams?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我是否喜欢与跨学科团队合作？
- en: And so on.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如此类。
- en: In the midst of writing their algorithm, many students realize that in certain
    cases, they simply want to do nothing to the overall score. For example, they
    might decide that if someone is willing to learn Python, that adds 10 points to
    their overall score, but if they are unwilling, it simply leaves the score unchanged.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写算法的过程中，许多学生意识到在某些情况下，他们只是希望对整体分数不做任何修改。例如，他们可能决定，如果有人愿意学习Python，那会给整体分数加10分，但如果他们不愿意，则分数保持不变。
- en: 'Most students implement this with the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数学生用以下代码实现这一点：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is a classic case of *doing something to do nothing*. Let’s break down
    everything that Python has to do when it sees the line of code `score += 0`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个经典的*做某事却什么也没做*的案例。让我们拆解 Python 在看到代码行`score += 0`时需要做的所有事情：
- en: It needs to look up the value of the variable `score`.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要查找变量`score`的值。
- en: It needs to add 0 to this value. This requires calling the addition function,
    passing in two arguments (the current value and 0), and computing the output.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要在这个值上加上0。这需要调用加法函数，传入两个参数（当前值和0），并计算输出。
- en: Reassigning the `score` variable to the new value (which, clearly, is the same).
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新将`score`变量赋值为新值（显然，这个值是相同的）。
- en: All of this work to do … nothing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工作却做了……什么都没有。
- en: Sure, it’s not a *huge amount* of work for the computer, and it won’t make any
    meaningful difference to your code’s efficiency. That said, it is pointless and
    somewhat unclean, which is uncharacteristic of excellent Python code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这对计算机来说并不是*大量*工作，也不会对代码的效率产生任何实际影响。不过，它是无用的且有些不干净，这在优秀的 Python 代码中是不常见的。
- en: 'A better solution is to use Python’s `pass` keyword, which literally tells
    Python to do nothing and just move on. It fills in a line of code which doesn’t
    need to be there, but which would error if left completely empty. We can even
    add a little comment to provide further clarity:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的解决方案是使用 Python 的`pass`关键字，它字面上告诉 Python 什么也不做，只是继续。它填补了一行代码，这一行代码本不需要存在，但如果完全空着会导致错误。我们甚至可以添加一个小注释以提供进一步的清晰度：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Cleaner, clearer, more Pythonic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更简洁、更清晰、更符合 Python 风格。
- en: The single conditional gone wild
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单个条件失控
- en: The conditional statement is arguably one of the more powerful and consistent
    constructs in standard programming. When learning it for the first time, it is
    easy to overlook an important subtlety.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句可以说是标准编程中更强大和一致的构造之一。当第一次学习它时，很容易忽略一个重要的细微之处。
- en: 'This subtlety arises when we want to check for two or more conditions. For
    example, say we are reviewing a survey for responses that take one of three forms:
    “Yes,” “No,” or “Maybe.”'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要检查两个或更多条件时，这个细微之处就会出现。例如，假设我们正在审查一个调查，调查结果有三种形式：“是”，“否”或“也许”。
- en: 'Early Python programmers often code this in one of two ways:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的 Python 程序员通常会以两种方式之一来编写这个代码：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this context, both of these code snippets are effectively the same. They
    behave in the same way, they aren’t particularly confusing to understand, and
    they accomplish the desired goal. The issue arises when people mistakenly believe
    that the two structures above are *always* equivalent.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，这两个代码片段实际上是一样的。它们的行为相同，理解起来并不特别困难，并且实现了预期的目标。问题在于，当人们错误地认为上述两个结构*总是*等同的时候。
- en: This is false. The second code snippet above is a *single* conditional expression
    made of multiple parts, whereas the first code snippet consists of *three, separate*
    conditional expressions, despite the fact that they appear interconnected.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是错误的。上面的第二个代码片段是由多个部分组成的*单一*条件表达式，而第一个代码片段则包含了*三个独立*的条件表达式，尽管它们看起来是相互连接的。
- en: Why is this important? Because whenever Python sees a brand new `if` keyword
    (i.e., a new conditional expression starting), it will check the associated condition.
    On the other hand, Python will only ever enter an `elif` or `else` condition if
    no previous conditions in the current conditional expression have been satisfied.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很重要？因为每当 Python 遇到一个全新的`if`关键字（即，新的条件表达式开始时），它都会检查相关的条件。另一方面，Python 仅会进入`elif`或`else`条件，如果当前条件表达式中的所有先前条件都未被满足。
- en: 'Let’s look at an example to see why this matters. Say we need to write code
    that assigns students a letter grade based on their numerical score on some assignment.
    We write the following code in our Python file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，看看这为什么重要。假设我们需要编写代码，根据学生在某个作业中的分数来分配字母等级。我们在 Python 文件中编写以下代码：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running this code outputs the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码会输出以下内容：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Do you see the difference? In the second case, we get an unexpected output.
    Why? Because Python reads every `if` statement as a brand new conditional, and
    so if a score happens to be less than multiple number checks, the corresponding
    letter grade gets printed out for all of them.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到区别了吗？在第二种情况下，我们得到了意外的输出。为什么？因为 Python 将每个`if`语句视为全新的条件，因此如果一个分数恰好小于多个数字检查，那么对应的字母等级会被输出所有这些检查的结果。
- en: Now, there are ways to make this work with multiple `if` statements; for instance,
    we could make it so the condition checks for a range rather than just an upper
    limit. The point of this example is not to argue for the merits of one example
    over the other (although I would personally lean toward making use of `elif` and
    `else` for clarity), but simply to illustrate that they are not the *same*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有方法可以让多个`if`语句工作；例如，我们可以让条件检查一个范围，而不仅仅是一个上限。这个例子的重点不是争论一个示例优于另一个示例（虽然我个人倾向于使用`elif`和`else`以提高清晰度），而只是为了说明它们并不是*相同的*。
- en: Be sure you understand that.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你理解这一点。
- en: Final Thoughts and Recap
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的思考与总结
- en: 'Here’s your Python beginner cheat sheet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的 Python 初学者备忘单：
- en: Don’t make unnecessary conditionals for Booleans when you can simply return
    the Boolean value directly.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你可以直接返回布尔值时，不要为布尔值创建不必要的条件语句。
- en: Built-in functions are your best friends.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内置函数是你最好的朋友。
- en: If you need to tell Python to do nothing, use the `pass` keyword.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要告诉 Python 什么都不做，使用`pass`关键字。
- en: Make sure you structure conditional expressions correctly, understanding the
    meaning of the `if` , `elif` , and `else` keywords.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你正确构建条件表达式，理解`if`、`elif`和`else`关键字的含义。
- en: It’s excellent that you’ve decided to learn Python — I assure you that the language
    shall treat you well.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你决定学习 Python 是很棒的——我向你保证，这门语言会对你很好。
- en: Just be sure to return the favor.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 只要记得回报它们。
- en: '**Want to excel at Python?** [**Get exclusive, free access to my simple and
    easy-to-read guides here**](https://witty-speaker-6901.ck.page/0977670a91)**.
    Want to read unlimited stories on Medium? Sign up with my referral link below!**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**想在 Python 中表现出色？** [**点击这里获取独家、免费的简易指南**](https://witty-speaker-6901.ck.page/0977670a91)**。想在
    Medium 上阅读无限故事？使用下面的推荐链接注册！**'
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)
    [## Murtaza Ali - Medium'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[阅读 Murtaza Ali 的文章](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)
    [## Murtaza Ali - Medium'
- en: Read writing from Murtaza Ali on Medium. PhD student at the University of Washington.
    Interested in human-computer…
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Murtaza Ali 在 Medium 上的文章。华盛顿大学的博士生。对人机交互感兴趣…
- en: murtaza5152-ali.medium.com](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[murtaza5152-ali.medium.com](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)'
- en: References
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[1] [https://docs.python.org/3/library/functions.html](https://docs.python.org/3/library/functions.html)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://docs.python.org/3/library/functions.html](https://docs.python.org/3/library/functions.html)'
