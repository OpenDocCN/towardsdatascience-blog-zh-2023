- en: How to use FILTER in DAX the correct way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正确使用DAX中的FILTER
- en: 原文：[https://towardsdatascience.com/how-to-use-filter-in-dax-the-correct-way-eb621b49527a](https://towardsdatascience.com/how-to-use-filter-in-dax-the-correct-way-eb621b49527a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-use-filter-in-dax-the-correct-way-eb621b49527a](https://towardsdatascience.com/how-to-use-filter-in-dax-the-correct-way-eb621b49527a)
- en: '*The FILTER() function in DAX can be challenging to tame. You can tap into
    some pitfalls, leading to bad performance of your DAX code. Here are some examples
    of how to use FILTER() and how not.*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*DAX中的FILTER()函数可能难以驾驭。你可能会陷入一些陷阱，导致DAX代码的性能不佳。以下是如何使用FILTER()以及不该如何使用的一些示例。*'
- en: '[](https://medium.com/@salvatorecagliari?source=post_page-----eb621b49527a--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----eb621b49527a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eb621b49527a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eb621b49527a--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----eb621b49527a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@salvatorecagliari?source=post_page-----eb621b49527a--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----eb621b49527a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eb621b49527a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eb621b49527a--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----eb621b49527a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eb621b49527a--------------------------------)
    ·11 min read·Feb 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----eb621b49527a--------------------------------)
    ·阅读时长11分钟·2023年2月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e1e8439b16701f24cc9fe52f0c54ec2a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1e8439b16701f24cc9fe52f0c54ec2a.png)'
- en: Photo by [Andrea De Santis](https://unsplash.com/@santesson89?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Andrea De Santis](https://unsplash.com/@santesson89?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)提供
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'More than a year ago, I wrote an article about the [FILTER()](https://dax.guide/filter/)
    function:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一年多前，我写了一篇关于[FILTER()](https://dax.guide/filter/)函数的文章：
- en: '[](/discover-the-power-of-filter-in-dax-4bfeac3dd786?source=post_page-----eb621b49527a--------------------------------)
    [## Discover the power of FILTER() in DAX'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/discover-the-power-of-filter-in-dax-4bfeac3dd786?source=post_page-----eb621b49527a--------------------------------)
    [## 发现DAX中FILTER()的强大功能'
- en: The FILTER() function in DAX is potent, but it has some intricacies. Let’s dig
    into these details to build a good…
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FILTER()函数在DAX中非常强大，但它有一些复杂之处。让我们深入探讨这些细节，以构建一个良好的…
- en: towardsdatascience.com](/discover-the-power-of-filter-in-dax-4bfeac3dd786?source=post_page-----eb621b49527a--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/discover-the-power-of-filter-in-dax-4bfeac3dd786?source=post_page-----eb621b49527a--------------------------------)
- en: There I explained some details about this powerful function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我在那里解释了一些关于这个强大函数的细节。
- en: What I didn’t do is to explain and show some performance-relevant details of
    FILTER().
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有做的是解释和展示FILTER()的一些性能相关细节。
- en: If you are new to this function or are unsure how to use it, jump to that article
    to get a basic understanding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个函数不熟悉或不确定如何使用它，可以跳到那篇文章以获得基本了解。
- en: There is some redundancy between my old and this article, but it’s never wrong
    to learn the basics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我的旧文和这篇文章之间有一些冗余，但学习基础知识总是正确的。
- en: In addition, to show you how to use the FILTER() function, I will show you the
    consequences of each variant on the performance and efficiency of each variant.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了展示如何使用FILTER()函数外，我还将展示每种变体对性能和效率的影响。
- en: For this, I will use [DAX Studio](https://daxstudio.org/) and the Server Timings
    in DAX Studio to get performance statistics.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我将使用[DAX Studio](https://daxstudio.org/)和DAX Studio中的服务器时间来获取性能统计数据。
- en: 'If you don’t know this feature in DAX Studio or are unsure about the interpretation
    of the Metrics shown there, read this article, where I dig into this feature:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道DAX Studio中的这个功能，或者对那里显示的度量解释不确定，可以阅读这篇文章，我将在其中深入探讨这个功能：
- en: '[](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----eb621b49527a--------------------------------)
    [## How to get performance data from Power BI with DAX Studio'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----eb621b49527a--------------------------------)
    [## 如何使用 DAX Studio 从 Power BI 获取性能数据'
- en: Sometimes we have a slow Report, and we need to figure out why. We will see
    how to collect performance data and the…
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有时我们有一个慢报表，需要找出原因。我们将看到如何收集性能数据以及……
- en: towardsdatascience.com](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----eb621b49527a--------------------------------)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----eb621b49527a--------------------------------)
- en: The base query
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本查询
- en: 'To define our starting point, I define a base query on my Demo Dataset (See
    the References section for Details):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定我们的起点，我在我的演示数据集中定义了一个基本查询（详见参考部分）：
- en: 'I want to get a list of Countries and the corresponding Sales, but I want to
    restrict the Brands of the sold Products to these three:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我想获取国家和相应的销售数据，但我希望将销售产品的品牌限制为这三个：
- en: Contoso
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Contoso
- en: Northwind Traders
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Northwind Traders
- en: Fabrikam
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fabrikam
- en: 'The base query is the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 基本查询如下：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I will show you how we can alter the line ‘Product’[BrandName] IN ListOfBrands
    and see the consequences of these changes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示如何更改行 ‘Product’[BrandName] IN ListOfBrands 并查看这些更改的后果。
- en: 'The Result looks like this (Snippet):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下（片段）：
- en: '![](../Images/3d057bfbeb5a98a7ea4d74e090a042d0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d057bfbeb5a98a7ea4d74e090a042d0.png)'
- en: Figure 1 — Part of the result of the base query (Figure by the Author)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图1 — 基本查询的部分结果（图由作者提供）
- en: We get 35 rows with all known countries and values for China, Germany, and the
    United States.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到35行所有已知国家的值，包括中国、德国和美国。
- en: 'The Server Timings of the base query are the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基本查询的服务器时间如下：
- en: '![](../Images/e4f36006e0520f8139d94717db8bb620.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4f36006e0520f8139d94717db8bb620.png)'
- en: Figure 2 — Server Timing of the base query (Figure by the Author)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图2 — 基本查询的服务器时间（图由作者提供）
- en: The query is executed reasonably quickly with a duration of 0.3 seconds, and
    the efficiency is good as well, as 91.6 % of the time is spent in the Storage
    Engine.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 查询执行得相当快，持续时间为0.3秒，效率也不错，因为91.6%的时间花费在存储引擎上。
- en: OK, let’s make some modifications and look at the consequences.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们做一些修改并查看后果。
- en: The first Variance — Introducing FILTER()
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个变体 — 引入 FILTER()
- en: 'Here is the first variance of the query:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是查询的第一个变体：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This time, I added a filter on the Product table to filter it by the three Brands.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我在产品表上添加了一个过滤器，以根据这三个品牌进行过滤。
- en: 'Here are the Server Timings:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是服务器时间：
- en: '![](../Images/e161f30218fb4ddbdf3846dcc0e16cba.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e161f30218fb4ddbdf3846dcc0e16cba.png)'
- en: Figure 3 — Server timings of the first variant (Figure by the Author)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图3 — 第一个变体的服务器时间（图由作者提供）
- en: The Total execution is almost the same, but the time spent in the Storage Engine
    is more than 100ms longer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总执行时间几乎相同，但存储引擎所花费的时间多了100毫秒。
- en: And, instead of three, we have five Storage Engine Queries.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，我们有五个存储引擎查询，而不是三个。
- en: Two of these queries use a CallbackDataID call, meaning that the Storage Engine
    calls the Formula Engine to execute something it cannot do.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些查询中的两个使用了 CallbackDataID 调用，这意味着存储引擎调用公式引擎执行其无法完成的操作。
- en: In this case, two times the creation of the list of Brands to filter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，品牌列表创建了两次进行过滤。
- en: DAX Studio marks queries containing a CallbackDataID in bold, as this call is
    unsuitable for performance and efficiency.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: DAX Studio 将包含 CallbackDataID 的查询标记为粗体，因为此调用不适合性能和效率。
- en: Moreover, the first two queries returned over 2’500 rows each. This is called
    materialization.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，前两个查询各返回了超过2’500行。这称为物化。
- en: We should minimize the size of materialization in our DAX expressions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该尽量减少 DAX 表达式中的物化大小。
- en: In this case, 2’517 is the row count of the entire Product table, which means
    that the Formula Engine gets the whole table and needs to filter it afterward.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，2’517是整个产品表的行数，这意味着公式引擎获取了整个表格，并需要随后进行过滤。
- en: 'Imagine that we have a table with hundreds of thousands of rows. This variant
    will load the entire table, which takes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们有一个包含数十万行的表。这个变体将加载整个表格，所需时间为：
- en: · A lot of memory
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: · 很多内存
- en: · A lot of time
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: · 很多时间
- en: OK, using FILTER() in this way is not good at all.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，使用 FILTER() 这种方式完全不可取。
- en: The second variance — FILTER with ALL()
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二个变体 — 使用 ALL() 的 FILTER
- en: With the following variance, we add the [ALL()](https://dax.guide/all/) function
    to the FILTER() call.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下变体，我们将[ALL()](https://dax.guide/all/)函数添加到FILTER()调用中。
- en: The ALL() function removes any Filter on the given table or column and returns
    a table with all values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALL()` 函数移除给定表或列上的任何过滤器，并返回一个包含所有值的表。'
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is still the same, but the Server Timings are radically different
    from the first variance:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 结果仍然相同，但服务器时间与第一种变体的差异很大：
- en: '![](../Images/3c44887a5a2dbd72f13de0c741cbf863.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c44887a5a2dbd72f13de0c741cbf863.png)'
- en: Figure 4 — Server timings of the second variance with ALL() (Figure by the Author)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4 — 第二种变体使用 ALL() 的服务器时间（图由作者提供）
- en: With this variance, we get almost the same queries and timings as the original
    query without using FILTER().
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个变体，我们得到的查询和时间几乎与原始查询相同，而无需使用 FILTER()。
- en: If we look closely, we discover that the Storage Engine queries are the same
    in both.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细观察，我们会发现存储引擎查询在两者之间是相同的。
- en: Consequently, both queries are equivalent in terms of performance and efficiency.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这两个查询在性能和效率上是等效的。
- en: This is very interesting as it shows the intelligence of the two Engines.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有趣，因为它展示了两个引擎的智能。
- en: 'The differences are the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 差异如下：
- en: The base and the second variance replace the filter on the Brand column
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础和第二种变体替换了品牌列上的过滤器。
- en: The first variance adds a Filter to the Brand column without changing the existing
    filter context.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种变体添加了对品牌列的过滤器，而没有改变现有的过滤器上下文。
- en: This causes additional queries.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会导致额外的查询。
- en: It’s up to you which variance you use. As a lazy person, I prefer to type less
    code to get the same result.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由你决定使用哪种变体。作为一个懒人，我更喜欢输入更少的代码来获得相同的结果。
- en: The third variance — Adding VALUES() instead of ALL()
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三种变体——添加 VALUES() 代替 ALL()
- en: Let’s replace the ALL() function with the [VALUES()](https://dax.guide/values/)
    function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 ALL() 函数替换为[VALUES()](https://dax.guide/values/)函数。
- en: The VALUES() function with one column returns a table with the source column’s
    distinct values (excluding duplicates).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES() 函数对于一个列返回一个包含源列唯一值（排除重复项）的表。
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result is still the same: 35 rows with all countries and three values.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 结果仍然相同：35 行所有国家和三个值。
- en: 'These are the Server Timings:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是服务器时间：
- en: '![](../Images/a1425af18116324913c4089235b45031.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1425af18116324913c4089235b45031.png)'
- en: Figure 5 — Server Timings of the third variance with VALUES() (Figure by the
    Author)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5 — 第三种变体使用 VALUES() 的服务器时间（图由作者提供）
- en: Again, we see the same three SE (Storage Engine) queries (Which look the same
    as with the base and the second query) and almost the same duration.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们看到相同的三个 SE（存储引擎）查询（与基础和第二个查询看起来相同）和几乎相同的持续时间。
- en: The numbers vary by a minimal amount between executions. But they are very similar
    to the base query.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 数字在执行之间变化很小，但它们与基础查询非常相似。
- en: This shows that using VALUES() is the same as using a simple filter predicate
    or using FILTER() with ALL().
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明使用 VALUES() 就像使用简单的过滤谓词或使用 FILTER() 与 ALL() 相同。
- en: The fourth variance — Adding one more filter
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四种变体——添加一个额外的过滤器
- en: 'In addition to filtering the Brand, I want to filter by the product color as
    well:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了过滤品牌外，我还想按产品颜色进行过滤：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Of course, the numbers in the query result change as we only want to get the
    Red Products Sales.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，查询结果中的数字会变化，因为我们只想获取红色产品的销售数据。
- en: 'Here are the Server Timings:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务器时间：
- en: '![](../Images/51426980700d7e8e7cb51cb92dfcd9ee.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51426980700d7e8e7cb51cb92dfcd9ee.png)'
- en: Figure 6 — Server Timings of the fourth variance filtering two columns (Figure
    by the Author)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6 — 第四种变体过滤两个列的服务器时间（图由作者提供）
- en: The result is fascinating.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很吸引人。
- en: The query is much faster than before and uses only two SE queries.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 查询比之前快得多，并且只使用了两个 SE 查询。
- en: As you can see in the image above, we get one query with one WHERE filtering
    both columns in the Product table.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，我们得到一个查询，该查询在产品表中使用一个 WHERE 过滤器来过滤两个列。
- en: This means that the SE is very intelligent in combining filters on one table,
    as it eliminates the first query and executes only two instead of three queries.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 SE 在组合一个表上的过滤器时非常智能，因为它消除了第一个查询，只执行了两个而不是三个查询。
- en: The fifth variance — Filtering columns from two tables
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五种变体——从两个表中过滤列
- en: 'The next step is to try to filter two columns from two different tables:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是尝试从两个不同的表中过滤两个列：
- en: Brand = “Contoso” in the Product table
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 品牌 = “Contoso” 在产品表中
- en: Continent = “Europe” from the Customer table
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大陆 = “欧洲” 来自客户表
- en: Here is the starting point for this requirement.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是满足这一要求的起点。
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This doesn’t work:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这不起作用：
- en: '![](../Images/d5bc07c6d0323568bf540a95bc82dc8c.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5bc07c6d0323568bf540a95bc82dc8c.png)'
- en: Figure 7 — Error when filtering to columns from a different table with FILTER()
    (Figure by the Author)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7 — 使用FILTER()时过滤来自不同表的列的错误（图由作者提供）
- en: 'The reason why this cannot function is that the second column is from another
    table that is not part of the Input of the FILTER function:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 不能工作的原因是第二列来自另一个不属于FILTER函数输入的表：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s try it in another way:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试另一种方法：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We use direct filters (predicates) this time without the FILTER() function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们使用直接过滤器（谓词），不使用FILTER()函数。
- en: 'This works, and the execution is very fast and efficient:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有效，并且执行速度非常快且高效：
- en: '![](../Images/87864b168a478b59f45e8c700c4d243e.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87864b168a478b59f45e8c700c4d243e.png)'
- en: Figure 8 — Server timings of the fifth variance with direct filters (Figure
    by the Author)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8 — 第五个变体的服务器时间，使用直接过滤器（图由作者提供）
- en: But we want to see something else.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们想看到其他内容。
- en: How can we use the FILTER function with columns from separate tables?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在来自不同表的列中使用FILTER函数？
- en: The sixth variance — Building a table for FILTER()
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六个变体 — 为FILTER()构建表
- en: We must build an input table for FILTER() from different source tables to achieve
    this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须从不同的源表中构建一个输入表以实现这一点。
- en: 'For this purpose, we use [SUMMARIZECOLUMNS()](https://dax.guide/summarizecolumns/)
    to generate a table combining the values from the given columns:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用[SUMMARIZECOLUMNS()](https://dax.guide/summarizecolumns/)来生成一个结合给定列中值的表：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The SE can interpret this variance to execute only one query to get the result
    (The second query retrieves only the list of the countries):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: SE可以将这个变体解释为执行仅一个查询以获得结果（第二个查询仅检索国家列表）：
- en: '![](../Images/5a223ba1d4d5eb3c036ee2f7f46b0580.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a223ba1d4d5eb3c036ee2f7f46b0580.png)'
- en: Figure 9 — Server timings and SE query for the sixth variance (Figure by the
    Author)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9 — 第六个变体的服务器时间和SE查询（图由作者提供）
- en: Moreover, the Total execution time is very short.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，总执行时间非常短。
- en: But, before we conclude, I have one more variance for you.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们得出结论之前，我还有一个变体给你。
- en: The seventh variance — Using CROSSJOIN() for FILTER()
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七个变体 — 使用CROSSJOIN()进行FILTER()
- en: The last variance uses the [CROSSJOIN()](https://dax.guide/crossjoin/) function.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的变体使用了[CROSSJOIN()](https://dax.guide/crossjoin/)函数。
- en: This function returns a table with the multiplication of each row from the first
    input table with each row from the second table.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数返回一个表，其中包含第一个输入表的每一行与第二个表的每一行的乘积。
- en: Read the article or watch the video in the [DAX Guide](https://dax.guide) article
    linked above for details.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息请阅读上面链接的[DAX Guide](https://dax.guide)文章或观看视频。
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result still doesn’t change. But the execution pattern is very different:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 结果仍然没有改变。但执行模式却大相径庭：
- en: '![](../Images/ea9c0caaf65539136b2e511382e94ce6.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea9c0caaf65539136b2e511382e94ce6.png)'
- en: Figure 10 — Server Timings of seventh variance with CROSSJOIN() (Figure by the
    Author)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10 — 使用CROSSJOIN()的第七个变体的服务器时间（图由作者提供）
- en: Even though the Total execution time isn’t much longer, now we have four SE
    Queries.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管总执行时间没有多长，但现在我们有四个SE查询。
- en: But the first two are executed extremely fast.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 但前两个查询执行速度极快。
- en: The first Query retrieves the list of all continents (6 rows), and the second
    retrieves the list of all brands (14 rows).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个查询检索所有大洲的列表（6 行），第二个查询检索所有品牌的列表（14 行）。
- en: The third and fourth queries are the same as in the previous variances.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第三和第四个查询与之前的变体相同。
- en: 'But there are more things to consider with this variance:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个变体还有更多需要考虑的地方：
- en: The Cross-Join is done by the Formula Engine (FE). This isn’t a problem with
    such a small number of values. But when you have hundreds or thousands of values,
    this will take a tremendous amount of time.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cross-Join 由公式引擎（FE）完成。对于如此少量的值来说，这不是问题。但当你有数百或数千个值时，这将花费大量时间。
- en: This variance generates a table with two columns (Brands and Continents) with
    all possible combinations. This table is filtered with two Predicates (Brand =
    “Contoso” and Continent = “Europe”). Finally, the generated table is applied as
    Filter to the CALCULATE() function.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个变体生成一个包含两个列（品牌和大洲）的表，其中包含所有可能的组合。该表用两个谓词（Brand = “Contoso”和Continent = “Europe”）进行了过滤。最后，生成的表被作为过滤器应用于CALCULATE()函数。
- en: You must use the ALL() function in order to use the CROSSJOIN() function. Without
    the ALL function, you will get an error. As an alternative, use the VALUES() function,
    which leads to the same result.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CROSSJOIN()函数必须配合使用ALL()函数。如果不使用ALL()函数，你将会遇到错误。作为替代方案，可以使用VALUES()函数，它会产生相同的结果。
- en: This variance requires much writing without any benefit, as the SE queries are
    the same as in the two variances shown above. But when you need to construct an
    input table for FILTER() in this specific way, now you know it is possible.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种变体需要大量编写而没有任何好处，因为SE查询与上述两个变体中的查询相同。但当你需要以这种特定方式构造FILTER()的输入表时，现在你知道这是可能的。
- en: '![](../Images/51fb3e2b8cefedb2439a062b7845cc34.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51fb3e2b8cefedb2439a062b7845cc34.png)'
- en: Photo by [Afif Ramdhasuma](https://unsplash.com/ko/@javaistan?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Afif Ramdhasuma](https://unsplash.com/ko/@javaistan?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)拍摄的照片
- en: Conclusion
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: As you have seen, there are a lot of possible variances for using the FILTER
    function in DAX.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，使用DAX中的FILTER函数有很多可能的变体。
- en: But take care. What appeared to be very quick in my example can be very different
    in your scenario, as you might have another situation with your data.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意。在我的示例中看起来很快的操作，在你的场景中可能会大相径庭，因为你可能会面临不同的数据情况。
- en: The more distinct values you have in the columns you need to filter, the more
    you need to pay attention to how you use FILTER().
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要过滤的列中独特的值越多，你就越需要注意如何使用FILTER()。
- en: In my opinion, the direct filter approach is the first and most efficient method
    as it requires the least effort and typing. In most cases, it works right.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，直接过滤的方法是第一种也是最有效的方法，因为它需要最少的努力和输入。在大多数情况下，它可以正常工作。
- en: So, don’t overwork or overthink your Measures, as the most uncomplicated and
    straightforward approach might be the correct one.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，不要过度工作或过度思考你的度量值，因为最简单和直接的方法可能是正确的。
- en: 'Read this if you want to learn more about this approach:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于这种方法的信息，可以阅读以下内容：
- en: '[](https://medium.com/codex/dont-start-with-optimized-code-it-may-not-be-a-good-idea-2e9c6afa85a1?source=post_page-----eb621b49527a--------------------------------)
    [## Don’t start with optimized code. It may not be a good idea'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 不要从优化代码开始。这可能不是一个好主意](https://medium.com/codex/dont-start-with-optimized-code-it-may-not-be-a-good-idea-2e9c6afa85a1?source=post_page-----eb621b49527a--------------------------------)'
- en: The title of this article seems counterintuitive. Why should you not develop
    your solution with the most optimized…
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这篇文章的标题似乎违背直觉。为什么你不应该用最优化的方式来开发你的解决方案……
- en: medium.com](https://medium.com/codex/dont-start-with-optimized-code-it-may-not-be-a-good-idea-2e9c6afa85a1?source=post_page-----eb621b49527a--------------------------------)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/codex/dont-start-with-optimized-code-it-may-not-be-a-good-idea-2e9c6afa85a1?source=post_page-----eb621b49527a--------------------------------)'
- en: References
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: I use the Contoso sample dataset, like in my previous articles. You can download
    the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了Contoso示例数据集，就像我之前的文章中提到的那样。你可以从微软[这里](https://www.microsoft.com/en-us/download/details.aspx?id=18279)免费下载ContosoRetailDW数据集。
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Contoso数据可以在MIT许可证下自由使用，如[这里](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo)所述。
- en: I enlarged the dataset to make the DAX engine work harder.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我扩大了数据集，以使DAX引擎更加费劲。
- en: The Online Sales table contains 71 million rows (instead of 12.6 million rows),
    and the Retail Sales table contains 18.5 million rows (instead of 3.4 million
    rows).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在线销售表包含7100万行（而不是1260万行），零售销售表包含1850万行（而不是340万行）。
- en: '[](https://medium.com/@salvatorecagliari/membership?source=post_page-----eb621b49527a--------------------------------)
    [## Join Medium with my referral link - Salvatore Cagliari'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入Medium - Salvatore Cagliari](https://medium.com/@salvatorecagliari/membership?source=post_page-----eb621b49527a--------------------------------)'
- en: Read every story from Salvatore Cagliari (and thousands of other writers on
    Medium). Your membership fee directly…
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Salvatore Cagliari的每一个故事（以及Medium上其他成千上万的作家）。你的会员费直接……
- en: medium.com](https://medium.com/@salvatorecagliari/membership?source=post_page-----eb621b49527a--------------------------------)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@salvatorecagliari/membership?source=post_page-----eb621b49527a--------------------------------)'
