- en: Deep Dive into pandas Copy-on-Write Mode—Part II
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入探讨 pandas Copy-on-Write 模式—第 II 部分
- en: 原文：[https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334?source=collection_archive---------6-----------------------#2023-08-17](https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334?source=collection_archive---------6-----------------------#2023-08-17)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334?source=collection_archive---------6-----------------------#2023-08-17](https://towardsdatascience.com/deep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334?source=collection_archive---------6-----------------------#2023-08-17)
- en: '*Explaining how Copy-on-Write optimizes performance*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*解释 Copy-on-Write 如何优化性能*'
- en: '[](https://medium.com/@patrick_hoefler?source=post_page-----b023432a5334--------------------------------)[![Patrick
    Hoefler](../Images/35ca9ef1100d8c93dbadd374f0569fe1.png)](https://medium.com/@patrick_hoefler?source=post_page-----b023432a5334--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b023432a5334--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b023432a5334--------------------------------)
    [Patrick Hoefler](https://medium.com/@patrick_hoefler?source=post_page-----b023432a5334--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@patrick_hoefler?source=post_page-----b023432a5334--------------------------------)[![Patrick
    Hoefler](../Images/35ca9ef1100d8c93dbadd374f0569fe1.png)](https://medium.com/@patrick_hoefler?source=post_page-----b023432a5334--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b023432a5334--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b023432a5334--------------------------------)
    [Patrick Hoefler](https://medium.com/@patrick_hoefler?source=post_page-----b023432a5334--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F103b3417e0f5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334&user=Patrick+Hoefler&userId=103b3417e0f5&source=post_page-103b3417e0f5----b023432a5334---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b023432a5334--------------------------------)
    ·6 min read·Aug 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fb023432a5334&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334&user=Patrick+Hoefler&userId=103b3417e0f5&source=-----b023432a5334---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[跟进](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F103b3417e0f5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334&user=Patrick+Hoefler&userId=103b3417e0f5&source=post_page-103b3417e0f5----b023432a5334---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b023432a5334--------------------------------)
    ·6 分钟阅读·2023 年 8 月 17 日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb023432a5334&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334&source=-----b023432a5334---------------------bookmark_footer-----------)![](../Images/8a8f28224bd638244c9aa1f1dc06d8fa.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb023432a5334&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdeep-dive-into-pandas-copy-on-write-mode-part-ii-b023432a5334&source=-----b023432a5334---------------------bookmark_footer-----------)![](../Images/8a8f28224bd638244c9aa1f1dc06d8fa.png)'
- en: Photo by [Joshua Brown](https://unsplash.com/@joshbrown?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/73YJpOGgi4E?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Joshua Brown](https://unsplash.com/@joshbrown?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    拍摄于 [Unsplash](https://unsplash.com/photos/73YJpOGgi4E?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: The [first post](https://medium.com/towards-data-science/deep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6)
    explained how the Copy-on-Write mechanism works. It highlights some areas where
    copies are introduced into the workflow. This post will focus on optimizations
    that ensure that this won’t slow the average workflow down.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一篇文章 [first post](https://medium.com/towards-data-science/deep-dive-into-pandas-copy-on-write-mode-part-i-26982e7408c6)
    解释了 Copy-on-Write 机制的工作原理。它重点介绍了在工作流程中引入副本的一些领域。本文将专注于确保这些优化不会减慢平均工作流程的优化。
- en: We utilize a technique that pandas internals use to avoid copying the whole
    DataFrame when it’s not necessary and thus, increase performance.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用了 pandas 内部使用的一种技术，以避免在不必要时复制整个 DataFrame，从而提高性能。
- en: I am part of the pandas core team and was heavily involved in implementing and
    improving CoW so far. I am an open source engineer for [Coiled](https://www.coiled.io)
    where I work on Dask, including improving the pandas integration and ensuring
    that Dask is compliant with CoW.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 pandas 核心团队的一员，并且在实现和改进 CoW 方面参与了很多。我是 [Coiled](https://www.coiled.io) 的开源工程师，主要负责
    Dask 的相关工作，包括改进 pandas 集成，并确保 Dask 符合 CoW 标准。
- en: Removal of defensive copies
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防御性复制的移除
- en: Let’s start with the most impactful improvement. Many pandas methods performed
    defensive copies to avoid side effects to protect against inplace modifications
    later on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从最具影响力的改进开始。许多 pandas 方法进行防御性复制以避免副作用，从而保护后续的就地修改。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is no need to copy the data in `reset_index`, but returning a view would
    introduce side effects when modifying the result, e.g. `df` would be updated as
    well. Hence, a defensive copy is performed in `reset_index`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `reset_index` 中不需要复制数据，但返回视图在修改结果时会引入副作用，例如 `df` 也会被更新。因此，在 `reset_index`
    中执行了防御性复制。
- en: All these defensive copies are no longer there when Copy-on-Write is enabled.
    This affects many methods. A full list can be found [here](https://pandas.pydata.org/docs/user_guide/copy_on_write.html#copy-on-write-optimizations).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Copy-on-Write 后，这些防御性复制将不再存在。这影响了许多方法。完整列表可以在[这里](https://pandas.pydata.org/docs/user_guide/copy_on_write.html#copy-on-write-optimizations)找到。
- en: Additionally, selecting a columnar subset of a DataFrame will now always return
    a view instead of a copy as before.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，选择 DataFrame 的列子集现在总是返回视图，而不是像之前那样返回复制。
- en: 'Let’s look at what this means performance-wise when we combine some of these
    methods:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们结合这些方法时，性能方面会有什么变化：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This creates a DataFrame with 30 columns, 3 different dtypes and 2 million
    rows. Let’s execute the following method chain on this DataFrame:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建一个具有 30 列、3 种不同数据类型和 200 万行的 DataFrame。让我们在这个 DataFrame 上执行以下方法链：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All of these methods perform a defensive copy without CoW enabled.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 CoW 前，所有这些方法都会执行防御性复制。
- en: '**Performance without CoW:**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**没有 CoW 的性能：**'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Performance with CoW enabled:**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**启用 CoW 的性能：**'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: An improvement by roughly a factor of 200\. I chose this example explicitly
    to illustrate the potential benefits of CoW. Not every method will get that much
    faster.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 大约提升了 200 倍。我特意选择了这个例子来说明 CoW 的潜在好处，并不是每个方法的速度都会提升这么多。
- en: Optimizing copies triggered by inplace modifications
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化因就地修改触发的复制
- en: The previous section illustrated many methods where a defensive copy is no longer
    necessary. CoW guarantees that you can’t modify two objects at once. This means
    that we have to introduce a copy when the same data is referenced by two DataFrames.
    Let’s look at techniques to make these copies as efficient as possible.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上一部分展示了许多方法在不再需要防御性复制的情况下。CoW 保证你不能同时修改两个对象。这意味着当两个 DataFrame 参考相同数据时，我们必须引入复制。让我们来看看如何使这些复制尽可能高效。
- en: 'The previous post showed that the following might trigger a copy:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上一篇文章展示了以下情况可能会触发复制：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The copy is triggered if the data that is backing `df` is referenced by another
    DataFrame. We assume that our DataFrame has `n` integer columns, e.g. is backed
    by a single Block.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `df` 的数据被另一个 DataFrame 参考，则会触发复制。我们假设我们的 DataFrame 有 `n` 个整数列，例如由一个 Block
    支持。
- en: '![](../Images/e2de64195cd07a4883634f1138e1222a.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e2de64195cd07a4883634f1138e1222a.png)'
- en: Image by author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Our Reference tracking object is also referencing another Block, so we can not
    modify the DataFrame inplace without modifying another object. A naive approach
    would be to copy the whole block and be done with it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的参考跟踪对象也引用了另一个 Block，因此我们不能在不修改其他对象的情况下就地修改 DataFrame。一个简单的方法是复制整个块然后完成。
- en: '![](../Images/69fb3fd0bb66248feeba2d1b65cc1e49.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69fb3fd0bb66248feeba2d1b65cc1e49.png)'
- en: Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: This would set up a new reference tracking object and create a new Block that
    is backed by a fresh NumPy array. This Block doesn’t have any more references,
    so another operation would be able to modify it inplace again. This approach copies
    `n-1` columns that we don't necessarily have to copy. We utilize a technique we
    call Block splitting to avoid this.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置一个新的引用跟踪对象，并创建一个由新的NumPy数组支持的新块。这个块没有任何其他引用，因此另一个操作将能够再次原地修改它。这种方法复制了`n-1`列，而我们不一定需要复制这些列。我们利用一种称为块拆分的技术来避免这种情况。
- en: '![](../Images/fea5468f7a06f4cd2ded2b07c4123a8d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fea5468f7a06f4cd2ded2b07c4123a8d.png)'
- en: Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Internally, only the first column is copied. All other columns are taken as
    views on the previous array. The new Block does not share any references with
    other columns. The old Block still shares references with other objects since
    it is only a view on the previous values.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 内部只复制了第一列。所有其他列都作为对先前数组的视图。新块与其他列没有共享引用。旧块仍与其他对象共享引用，因为它只是对先前值的视图。
- en: There is one disadvantage to this technique. The initial array has `n` columns.
    We created a view on columns `2` till `n`, but this keeps the whole array alive.
    We also added a new array with one column for the first column. This will keep
    a bit more memory alive than necessary.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术有一个缺点。初始数组有`n`列。我们创建了从列`2`到`n`的视图，但这会保持整个数组的存在。我们还添加了一个只有一列的新数组用于第一列。这将比必要时多占用一点内存。
- en: This system directly translates to DataFrames with different dtypes. All Blocks
    that are not modified at all are returned as is and only Blocks that are modified
    inplace are split.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统直接转换为具有不同数据类型的DataFrames。所有未被修改的块会原样返回，只有被原地修改的块才会被拆分。
- en: '![](../Images/6dd047068c1106ef8515075eac181bcf.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6dd047068c1106ef8515075eac181bcf.png)'
- en: Image by author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: We now set a new value into column `n+1` the float Block to create a view on
    columns `n+2` to `m`. The new Block will only back column `n+1`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在列`n+1`的浮点块中设置一个新值，以创建对列`n+2`到`m`的视图。新块将只支持列`n+1`。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/c1d38d72ade02a84f7c3f81aed84bc2b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1d38d72ade02a84f7c3f81aed84bc2b.png)'
- en: Image by author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Methods that can operate inplace
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可以原地操作的方法
- en: The indexing operations we looked at don’t generally create a new object; they
    modify the existing object inplace, including the data of said object. Another
    group of pandas methods does not touch the data of the DataFrame at all. One prominent
    example is `rename`. Rename only changes the labels. These methods can utilize
    the lazy-copy mechanism mentioned above.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看的索引操作通常不会创建新对象；它们会原地修改现有对象，包括该对象的数据。另一组pandas方法则完全不涉及DataFrame的数据。一个显著的例子是`rename`。Rename只会更改标签。这些方法可以利用上述提到的惰性复制机制。
- en: There is another third group of methods that can actually be done inplace, like
    `replace` or `fillna`. These will always trigger a copy.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还有第三组方法实际上可以原地操作，如`replace`或`fillna`。这些方法将始终触发复制。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Modifying the data inplace without triggering a copy would modify `df` and `df2`,
    which violates CoW rules. This is one of the reasons why we consider keeping the
    `inplace` keyword for these methods.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 修改数据时如果不触发复制，则会修改`df`和`df2`，这违反了CoW规则。这是我们考虑保留这些方法的`inplace`关键字的原因之一。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This would get rid of this problem. It’s still an open proposal and might go
    into a different direction. That said, this only pertains to columns that are
    actually changed; all other columns are returned as views anyway. This means that
    only one column is copied if your value is only found in one column.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将解决这个问题。这仍然是一个开放提案，可能会朝不同的方向发展。也就是说，这仅涉及实际被更改的列；所有其他列仍然以视图形式返回。这意味着，如果你的值只出现在一列中，则只会复制一列。
- en: Conclusion
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: We investigate how CoW changes pandas internal behavior and how this will translate
    to improvements in your code. Many methods will get faster with CoW, while we
    will see a slowdown in a couple of indexing related operations. Previously, these
    operations always operated inplace, which might have produced side effects. These
    side effects are gone with CoW and a modification on one DataFrame object will
    never impact another.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了CoW如何改变pandas的内部行为，以及这将如何转化为代码的改进。许多方法在使用CoW时会变得更快，而我们会看到一些与索引相关的操作变慢。以前，这些操作总是原地进行的，这可能产生副作用。这些副作用在CoW中消失了，对一个DataFrame对象的修改将永远不会影响另一个对象。
- en: The next post in this series will explain how you can update your code to be
    compliant with CoW. Also, we will explain which patterns to avoid in the future.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本系列的下一篇文章将解释如何更新你的代码以符合CoW标准。此外，我们还将说明未来应该避免哪些模式。
- en: Thank you for reading. Feel free to reach out to share your thoughts and feedback
    about Copy-on-Write.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如有任何关于写时复制（Copy-on-Write）的想法和反馈，请随时联系我们。
