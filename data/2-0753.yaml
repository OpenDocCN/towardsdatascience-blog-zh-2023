- en: 'Docker For the Modern Data Scientists: 6 Concepts You Can’t Ignore in 2023'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代数据科学家的 Docker：2023 年你不能忽视的 6 个概念
- en: 原文：[https://towardsdatascience.com/docker-for-the-modern-data-scientists-6-concepts-you-cant-ignore-in-2023-8c9477e1f4a5](https://towardsdatascience.com/docker-for-the-modern-data-scientists-6-concepts-you-cant-ignore-in-2023-8c9477e1f4a5)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/docker-for-the-modern-data-scientists-6-concepts-you-cant-ignore-in-2023-8c9477e1f4a5](https://towardsdatascience.com/docker-for-the-modern-data-scientists-6-concepts-you-cant-ignore-in-2023-8c9477e1f4a5)
- en: An illustrated guide to the cool, essential tool
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一本关于酷炫、必备工具的插图指南
- en: '[](https://ibexorigin.medium.com/?source=post_page-----8c9477e1f4a5--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----8c9477e1f4a5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8c9477e1f4a5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8c9477e1f4a5--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----8c9477e1f4a5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----8c9477e1f4a5--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----8c9477e1f4a5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8c9477e1f4a5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8c9477e1f4a5--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----8c9477e1f4a5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8c9477e1f4a5--------------------------------)
    ·11 min read·Jun 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8c9477e1f4a5--------------------------------)
    ·11 分钟阅读·2023 年 6 月 7 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/58e3632c5797099e37e9c558988a3e0b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58e3632c5797099e37e9c558988a3e0b.png)'
- en: Image by me with Leonardo AI
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我使用 Leonardo AI 制作
- en: 'This is by far one of the funniest memes I’ve ever seen:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我见过的最搞笑的 meme 之一：
- en: It touches on one of the most painful problems not just in data science and
    ML but in all of programming — sharing applications/scripts and making the darn
    things work on others’ machines as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它涉及到的不仅仅是数据科学和机器学习中的一个最棘手的问题，而是所有编程中的难题——共享应用程序/脚本，并使这些东西在其他人的机器上也能正常工作。
- en: While Microsoft, Apple, and Linus Torvalds meant well when they released different
    operating systems, they inadvertently created the never-ending struggle for software
    compatibility.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管微软、苹果和林纳斯·托瓦兹在发布不同的操作系统时出于好意，但他们无意中创造了软件兼容性的无尽挣扎。
- en: Linux, Windows, macOS — each has its own quirks and idiosyncrasies. And let’s
    not forget the variations in Python versions, library versions, and the unpredictable
    landscapes of GPU drivers in machine learning.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Linux、Windows、macOS——每个操作系统都有其独特的怪癖和特性。别忘了 Python 版本、库版本的差异以及机器学习中 GPU 驱动程序的不可预测性。
- en: Enter containers. While they have been around for a while to address this problem,
    it was with the release of Docker in 2013 that they gained immense popularity.
    Since then, Docker and its containers have become the go-to tools for sharing
    anything that runs with code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 进入容器。虽然它们已经存在一段时间以解决这个问题，但自 2013 年 Docker 发布以来，它们才获得了巨大的普及。从那时起，Docker 及其容器已经成为共享任何运行代码的工具的首选。
- en: So, this tutorial will highlight the six most important concepts to help you
    navigate the complex world of Docker as a data scientist or an ML engineer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本教程将突出六个最重要的概念，以帮助你作为数据科学家或机器学习工程师在复杂的 Docker 世界中导航。
- en: A little note
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小提示
- en: Like many other great software, interacting with Docker is very intuitive and
    easy. You just have to read the docs a couple times to know the commands required
    to make the most out of the tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多其他伟大的软件一样，与 Docker 的交互非常直观且容易。你只需多读几遍文档，就能知道如何充分利用这个工具。
- en: That’s why we are more concerned with the theory behind each command — those
    are harder to understand, and almost always, the documentation does a poor job
    of explaining them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们更关注每个命令背后的理论——这些更难理解，而文档几乎总是解释得不好。
- en: So, throughout the tutorial, I will be focusing more on the concepts rather
    than code but will sprinkle in a few relevant pages whenever needed to learn more
    about certain items.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在整个教程中，我将更注重于概念而非代码，但会根据需要适时加入一些相关页面以深入了解某些内容。
- en: Let’s get started!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: 0\. Why not ZIP files?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0\. 为什么不用 ZIP 文件？
- en: '![](../Images/ac9a5d13e2b83e27e8a2ba68f290b030.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac9a5d13e2b83e27e8a2ba68f290b030.png)'
- en: Image by me
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我制作
- en: Why learn a totally new tool when you can simply put all the code and datasets
    for your model into a zip file and share that? Well, that would be the equivalent
    of sending a box of Lego bricks via mail to build a car instead of just driving
    the ready car to your friend’s house.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要学习一个全新的工具，既然你可以将模型的所有代码和数据集放入 zip 文件中并分享？这就像寄一盒乐高砖块给朋友让他们建造一辆车，而不是直接把现成的车开到朋友家。
- en: 'There are several excellent reasons to consider Docker over zip files or other
    methods:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个很好的理由来考虑使用 Docker，而不是 zip 文件或其他方法：
- en: '**Dependency and compatibility chaos**: Zip files don’t care about the host
    system. They are like globetrotting tourists who expect every machine to speak
    their language. But different operating systems have different architectures,
    which can become a massive issue when dealing with various libraries and dependencies
    and their versions.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**依赖和兼容性混乱**：zip 文件不关心主机系统。它们就像环球旅行的游客，期望每台机器都能说他们的语言。但不同的操作系统有不同的架构，这在处理各种库和依赖及其版本时可能会成为一个巨大问题。'
- en: '**Reproducibility woes**: Imagine things break when someone tries to run your
    zip file. Is it due to a bug in the code or an environment-related problem? This
    can lead to hours of frustrating debugging, causing even the most patient person
    to scream-swear.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可重复性问题**：想象一下，当有人尝试运行你的 zip 文件时出现了问题。这是代码中的 bug 还是环境相关的问题？这可能导致几个小时的挫败性调试，甚至让最有耐心的人也会抓狂。'
- en: '**Isolation illusion**: With a zipfile, you don’t really know the contents
    beforehand, and unpacking it is like releasing a bunch of mischievous mice into
    your operating system. You have no control over where they will run and potentially
    wreak havoc. Malicious individuals can take advantage of this chaos, leading to
    security attacks.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**隔离假象**：使用 zip 文件，你事先无法了解其内容，解压它就像把一群调皮的老鼠释放到你的操作系统中。你无法控制它们会在哪里运行，并可能造成破坏。恶意人士可以利用这种混乱，导致安全攻击。'
- en: '**Deployment dilemmas**: Deploying models from zip files often involves tedious
    manual configuration, environment setup, and managing dependencies. It’s like
    building a house from scratch every time you move to a new city.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**部署困境**：从 zip 文件中部署模型通常涉及繁琐的手动配置、环境设置和依赖管理。这就像每次搬到新城市时都要从头开始建造一座房子。'
- en: In short, while zip files may appear to be the easiest way to share applications,
    they can’t match the power and advantages of Docker containers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，虽然 zip 文件可能看起来是共享应用程序的最简单方式，但它们无法匹敌 Docker 容器的强大和优势。
- en: But what *is* a container, you ask? Let’s answer that next.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但你问，*容器*究竟是什么？我们接下来回答这个问题。
- en: 1\. Docker Container
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. Docker 容器
- en: Containers are like mini-operating systems on your machine, isolated from other
    processes and applications such as Spotify, Chrome, Photoshop, games, and more.
    They have direct access to your machine’s resources, including RAM, CPU, Disk,
    and sometimes even GPUs, enabling them to run any software with custom configurations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 容器就像你机器上的迷你操作系统，与 Spotify、Chrome、Photoshop、游戏等其他进程和应用程序隔离开来。它们可以直接访问你机器的资源，包括
    RAM、CPU、磁盘，有时甚至是 GPU，从而能够运行任何软件并进行自定义配置。
- en: '![](../Images/231067d804e55b44494d6a8165d1c1c7.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/231067d804e55b44494d6a8165d1c1c7.png)'
- en: Image by me
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由我制作的图像
- en: These lightweight and portable computing environments are designed to provide
    everything a machine learning model needs to run in isolation without interfering
    with the processes on the host machine. They use only a fraction of the available
    resources, ensuring that the rest of your machine remains unaffected.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些轻量级和可移植的计算环境旨在提供运行机器学习模型所需的一切，并且可以在隔离环境中运行而不会干扰主机上的其他进程。它们只使用了可用资源的一小部分，确保你的机器其余部分不受影响。
- en: '![](../Images/a1d91f8c414b71a046ba8b01d8927eb5.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1d91f8c414b71a046ba8b01d8927eb5.png)'
- en: Image by me
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由我制作的图像
- en: Another significant advantage is that containers guarantee consistent results
    over time. Regardless of whether it’s been a day, a month, or a year, the outputs
    will remain the same for the same inputs. But it doesn’t stop there — containers
    also ensure consistency anywhere. They run identically on various environments,
    be it your personal laptop, your neighbor’s rusty Windows machine, or even in
    the clouds (AWS, Azure, GCP).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个显著的优点是容器能够保证结果的一致性。无论是一天、一个月还是一年，对于相同的输入，输出结果都将保持不变。但这还不是全部——容器还保证在任何地方的一致性。无论是在你的个人笔记本电脑、邻居的旧
    Windows 机器，还是在云端（AWS、Azure、GCP），它们的运行方式都是相同的。
- en: '![](../Images/d8ba34b80b85a39feaaff45062f8cacb.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8ba34b80b85a39feaaff45062f8cacb.png)'
- en: Image by me
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: Another notable benefit of containers is their high level of security and isolation.
    Even if you make a mess inside a container, rest assured that the mess won’t leak
    out to the rest of your machine or impact other containers. Everything is nicely
    *contained* within the container.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的另一个显著好处是它们的高安全性和隔离性。即使你在容器内搞得一团糟，也可以放心，这些混乱不会泄露到你机器的其他部分或影响其他容器。一切都在容器内*得到很好的控制*。
- en: Moreover, containers are lightweight and require minimal resources compared
    to alternatives like virtual machines (VMs). This efficiency enables you to run
    entire operating systems, such as Ubuntu, Debian, and CentOS Linux processes,
    on top of your existing operating system.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与虚拟机（VMs）等替代方案相比，容器更加轻量且资源需求最小。这种效率使你能够在现有操作系统上运行整个操作系统，如 Ubuntu、Debian 和
    CentOS Linux 进程。
- en: While there are many tools available for working with containers, Docker stands
    out as the best. It is an open-source project with a vast user base, serving as
    the go-to tool for creating, managing, and running any application as a container.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多工具可以用于处理容器，但 Docker 脱颖而出，成为最好的工具。它是一个开源项目，拥有庞大的用户基础，是创建、管理和运行容器应用程序的首选工具。
- en: 2\. Virtualization
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 虚拟化
- en: The secret behind the impressive capabilities of containers without overwhelming
    their host lies in virtualization technology.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 容器强大能力而不会压倒主机的秘密在于虚拟化技术。
- en: Virtualization creates isolated environments within the host operating system,
    enabling multiple containers to run independently and efficiently.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化在主操作系统内创建隔离的环境，使多个容器能够独立而高效地运行。
- en: '![](../Images/951ae14d5c1a1cb8d8f0c351f4a53faa.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/951ae14d5c1a1cb8d8f0c351f4a53faa.png)'
- en: Image by me
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: Virtualization divides the host resources, such as CPU, RAM, and Disk, and presents
    each piece as a separate resource to the software utilizing them. For instance,
    a 64GB RAM can be virtualized to appear as four individual 16GB RAMs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化将主机资源，如 CPU、RAM 和磁盘，进行划分，并将每一部分呈现为单独的资源供软件使用。例如，64GB RAM 可以虚拟化为四个独立的 16GB
    RAM。
- en: Unlike virtual machines (VMs) that achieve similar goals and perform virtualization
    down to the hardware level, containers virtualize at the software level. They
    leverage the host operating system’s kernel and share the underlying OS resources.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟机（VMs）通过硬件级别实现类似目标的虚拟化不同，容器是在软件级别进行虚拟化。它们利用主操作系统的内核，并共享底层操作系统资源。
- en: This approach allows for lightweight and efficient virtualization, enabling
    multiple containers to coexist on a single host. The process of starting and stopping
    containers incurs minimal overhead, resulting in faster updates and distribution.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法实现了轻量和高效的虚拟化，使多个容器能够在单一主机上共存。启动和停止容器的过程开销最小，从而实现更快的更新和分发。
- en: 3\. Docker Image
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. Docker 镜像
- en: When working with Docker, you may often encounter the terms “image” and “container”
    used interchangeably, but there are distinct differences between them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 时，你可能经常会遇到“镜像”和“容器”这两个术语交替使用，但它们之间存在明显的区别。
- en: A Docker image is similar to a food recipe that contains meticulous instructions
    and steps for running an application. On the other hand, a Docker container is
    like a prepared dish that brings the recipe to life — a fully functional instance.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像类似于包含详细说明和步骤的食谱，用于运行应用程序。另一方面，Docker 容器就像是一道准备好的菜肴，将食谱变为现实——一个完全功能的实例。
- en: While a single image can have multiple running instances as containers, these
    containers operate independently of each other and remain unaware of one another’s
    existence.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管单个镜像可以有多个运行的容器实例，这些容器却独立操作，彼此之间互不知晓。
- en: For personal projects, you typically build your own images. However, for many
    tasks, there are already many pre-built images available from the community.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于个人项目，你通常会构建自己的镜像。然而，对于许多任务，社区已经提供了许多预构建的镜像。
- en: For instance, Docker Hub is the largest registry hosting over a million images,
    all a couple of terminal commands’ away, once you have Docker installed on your
    machine.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Docker Hub 是最大的注册中心，托管着超过一百万个镜像，只需几条终端命令，你就可以在机器上安装 Docker。
- en: This registry includes official images for various operating systems (Ubuntu,
    CentOS, Debian), software stacks and programming languages (Node.js, Python, MySQL,
    Nginx), databases, pre-packaged and pre-configured ML frameworks (TensorFlow,
    PyTorch with GPU support, Sklearn), and much more.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个注册表包含了各种操作系统（Ubuntu、CentOS、Debian）、软件栈和编程语言（Node.js、Python、MySQL、Nginx）、数据库、预打包和预配置的机器学习框架（TensorFlow、PyTorch
    支持 GPU、Sklearn）等的官方镜像，还有更多。
- en: 'To illustrate, let’s say you want to download the official release candidate
    for Python 3.12 and start using it on your machine. You can accomplish this with
    just two simple commands:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，假设你想下载 Python 3.12 的官方候选版并开始在你的机器上使用它。你可以通过简单的两个命令来完成这一操作：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second command with the `-it` flag will initiate an interactive terminal
    within a container created from the `python:3.12-rc-bullseye` image. This running
    container instance will resemble a mini-operating system solely equipped with
    Python 3.12, with nothing else installed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个带有 `-it` 标志的命令将在从 `python:3.12-rc-bullseye` 镜像创建的容器内启动一个交互式终端。这个运行中的容器实例将类似于一个仅装备了
    Python 3.12 的迷你操作系统，没有安装其他任何东西。
- en: However, like any Ubuntu distribution, you can install additional tools like
    Git or Conda within the container and perform almost any task you would typically
    do in Ubuntu, although without a graphical user interface (GUI).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，就像任何 Ubuntu 发行版一样，你可以在容器内安装额外的工具，比如 Git 或 Conda，并执行几乎任何你在 Ubuntu 中通常会做的任务，尽管没有图形用户界面（GUI）。
- en: 4\. Dockerfile
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. Dockerfile
- en: When we call `[docker pull](https://docs.docker.com/engine/reference/commandline/pull/)`
    and `[docker run python](https://docs.docker.com/engine/reference/commandline/run/)`,
    how does the container know where to get the binaries for Python 3.12, all its
    dependencies and install them?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用 `[docker pull](https://docs.docker.com/engine/reference/commandline/pull/)`
    和 `[docker run python](https://docs.docker.com/engine/reference/commandline/run/)`
    时，容器如何知道从哪里获取 Python 3.12 的二进制文件及其所有依赖项并安装它们？
- en: The solution lies in Dockerfiles. These text files are blueprints or recipes
    for building custom images that encapsulate our Python scripts or machine learning
    models, along with their dependencies and configurations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案在于 Dockerfiles。这些文本文件是构建自定义镜像的蓝图或配方，封装了我们的 Python 脚本或机器学习模型，以及它们的依赖项和配置。
- en: 'You will use Dockerfiles extensively when creating your images (one Dockerfile
    for one directory/project). Although Dockerfiles can become lengthy for complex
    projects, they generally include the following commands for Python projects:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建镜像时，你将广泛使用 Dockerfiles（每个目录/项目一个 Dockerfile）。虽然 Dockerfiles 对于复杂项目来说可能变得很长，但它们通常包括以下命令用于
    Python 项目：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Above is a sample Dockerfile for containerizing a `train.py` script located
    in our current working directory. Here is an overview of the commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上面是一个用于将 `train.py` 脚本容器化的示例 Dockerfile，位于我们当前的工作目录中。以下是这些命令的概述：
- en: '`FROM` - a keyword to specify a base image. Base images are pre-built images
    on Docker Hub you can use in your custom images without having to reinvent the
    wheel. Above, we are using Python 3.9 base image so that we don''t have to install
    Python manually with `apt-get`.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FROM` - 一个用于指定基础镜像的关键字。基础镜像是 Docker Hub 上的预构建镜像，你可以在自定义镜像中使用这些基础镜像，而无需重新发明轮子。上述，我们使用
    Python 3.9 基础镜像，以免使用 `apt-get` 手动安装 Python。'
- en: '`WORKDIR` - This command sets the working directory inside the container to
    `/app`, where the application files (`train.py` and `requirements.txt`) will be
    copied.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`WORKDIR` - 这个命令将容器内的工作目录设置为 `/app`，应用程序文件（`train.py` 和 `requirements.txt`）将被复制到该目录。'
- en: '`RUN` - Following this keyword, you can include any valid terminal command,
    such as `pip install` or run bash scripts to execute specific tasks during the
    container build process.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RUN` - 在这个关键字后，你可以包含任何有效的终端命令，例如 `pip install` 或运行 bash 脚本以在容器构建过程中执行特定任务。'
- en: '`CMD` - This command specifies the default command to run when the container
    starts using `docker start`. In this case, it trains a new model by executing
    `python train.py`.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CMD` - 这个命令指定了容器启动时使用 `docker start` 时要运行的默认命令。在这种情况下，它通过执行 `python train.py`
    来训练一个新模型。'
- en: To build a new image using this Dockerfile, you simply run
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个 Dockerfile 构建新镜像，你只需运行
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It's as simple as that!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单！
- en: As you’ve observed, Dockerfile syntax is not entirely unfamiliar to those who
    have experience with YAML files or working in the terminal.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Dockerfile 的语法对有经验的 YAML 文件使用者或终端操作人员来说并不完全陌生。
- en: Check out [this page](https://docs.docker.com/language/python/) of the Docker
    documentation to learn more about building images and writing Dockerfiles for
    Python applications.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [这个页面](https://docs.docker.com/language/python/) 的 Docker 文档，以了解更多关于构建镜像和编写
    Python 应用程序的 Dockerfile 的信息。
- en: 5\. Image layers
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 镜像层
- en: A layer is a bit of a weird concept of Docker images.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 层是 Docker 镜像中一个有点奇怪的概念。
- en: Each instruction/command in a Dockerfile contributes to creating a new, read-only,
    immutable layer in the resulting image. Layers are stacked on top of each other,
    forming a layered file system that represents the final image.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 中的每条指令/命令都有助于在生成的镜像中创建一个新的、只读的、不可变的层。层叠加在一起，形成一个分层的文件系统，代表最终的镜像。
- en: '![](../Images/804b07900228d521e2dff029ac1713e1.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/804b07900228d521e2dff029ac1713e1.png)'
- en: '[Image by Docker docs. Apache-2 license.](https://github.com/docker/docs)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[图片来自 Docker 文档。Apache-2 许可证。](https://github.com/docker/docs)'
- en: There are many benefits to using a layered structure, such as caching. Since
    building images is an incremental process with many updates to the contents within,
    caching makes repeated calls of `docker build` much faster.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分层结构有许多好处，比如缓存。由于构建镜像是一个增量过程，内容经常更新，缓存使得重复调用`docker build`变得更快。
- en: Heavy commands such as `FROM` or `RUN` will take only a fraction of a second
    if Docker detects that these layers weren't changed in the current build.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Docker 检测到这些层在当前构建中没有变化，像`FROM`或`RUN`这样的重命令只需几分之一秒。
- en: '![](../Images/8c6c98ea99f5fa0297953463c0ab4365.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c6c98ea99f5fa0297953463c0ab4365.png)'
- en: '[Image by Docker docs. Apache-2 license.](https://github.com/docker/docs)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[图片来自 Docker 文档。Apache-2 许可证。](https://github.com/docker/docs)'
- en: Apart from caching, layers allow efficient storage utilization, version control
    (image history, easy rollbacks) and lightweight distribution.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了缓存，层还允许高效的存储利用、版本控制（镜像历史、轻松回滚）和轻量级分发。
- en: Learn more about layers, multi-stage builds and cache from [this page](https://docs.docker.com/build/guide/layers/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [这个页面](https://docs.docker.com/build/guide/layers/) 了解更多关于层、多阶段构建和缓存的知识。
- en: 6\. Docker engine
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. Docker 引擎
- en: A single host can have dozens of built images and running containers. How does
    the host machine distribute resources across all of them without going up in smoke?
    Enter the Docker Engine.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 单个主机可以有数十个构建的镜像和运行的容器。主机是如何在不崩溃的情况下分配资源的？这就是 Docker 引擎的作用。
- en: '![](../Images/49639f26a7334417636da5d3ba3c99ac.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49639f26a7334417636da5d3ba3c99ac.png)'
- en: Image by me
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: 'Docker Engine is responsible for all the magical Docker jiu-jitsu that takes
    care of creating, running and maintaining images and containers. It has many components,
    but here are the *three* most important ones:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 引擎负责所有神奇的 Docker 技巧，处理创建、运行和维护镜像及容器的任务。它有许多组件，但这里有 *三个* 最重要的：
- en: '**Docker Daemon** or `dockerd` - a background process on the host machine that
    manages the lifecycle of containers. It is responsible for virtualization and
    allocation of resources.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Docker Daemon** 或 `dockerd` - 主机上的一个后台进程，管理容器的生命周期。它负责虚拟化和资源分配。'
- en: '**Docker Client** — a software that allows users to interact with Docker Engine.
    Primarily, it is the Docker command-line interface (`[docker](https://docs.docker.com/engine/reference/commandline/cli/)`
    [CLI](https://docs.docker.com/engine/reference/commandline/cli/)) but there is
    also platform-agnostic [Docker Desktop](https://www.docker.com/products/docker-desktop/)
    for people who prefer a graphical user interface (GUI).'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Docker 客户端** — 一款允许用户与 Docker 引擎交互的软件。主要是 Docker 命令行接口（`[docker](https://docs.docker.com/engine/reference/commandline/cli/)`
    [CLI](https://docs.docker.com/engine/reference/commandline/cli/)），但也有适用于喜欢图形用户界面（GUI）的用户的跨平台
    [Docker Desktop](https://www.docker.com/products/docker-desktop/)。'
- en: '**Docker API** — a set of interfaces and protocols that allows Docker clients
    or other external tools to interact with Docker Daemon. An internal language for
    Docker, if you will.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Docker API** — 一组接口和协议，允许 Docker 客户端或其他外部工具与 Docker Daemon 进行交互。如果你愿意的话，可以看作是
    Docker 的内部语言。'
- en: 99% of your time will be spent working through a Docker client but it is important
    to understand other components as they play such a crucial role in how containers
    operate.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 99% 的时间你将通过 Docker 客户端进行工作，但了解其他组件很重要，因为它们在容器操作中发挥着至关重要的作用。
- en: Conclusion
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Because of all the benefits I mentioned (and didn’t mention) here, Docker is
    extremely popular in the community. As such, many awesome projects have been built
    upon to extend the default functionality.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我提到（以及未提到）的所有好处，Docker在社区中极受欢迎。因此，许多很棒的项目在此基础上进行了扩展，以增强默认功能。
- en: For example, Kubernetes, often abbreviated as K8s, is a powerful container orchestration
    platform that automates the deployment, scaling, and management of containerized
    applications. It can manage and schedule Docker containers across a cluster of
    nodes, providing features like automatic scaling, load balancing, and self-healing
    capabilities.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Kubernetes，通常缩写为K8s，是一个强大的容器编排平台，可以自动化容器化应用程序的部署、扩展和管理。它可以在一个节点集群中管理和调度Docker容器，提供自动扩展、负载均衡和自愈功能等特性。
- en: There is also Docker Compose, which allows you to spin up multiple containers,
    define their relationships, and manage their configurations as a single application
    stack.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 还有Docker Compose，它允许你启动多个容器，定义它们之间的关系，并将它们的配置管理为一个应用栈。
- en: And specific to us, Kubeflow is an open-source platform designed to simplify
    the deployment, management, and scaling of machine learning (ML) workloads on
    Kubernetes. It aims to provide a seamless and integrated experience for running
    ML workflows, making it easier for data scientists and engineers to build, train,
    and deploy machine learning models at scale.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们来说，Kubeflow是一个开源平台，旨在简化在Kubernetes上部署、管理和扩展机器学习（ML）工作负载。它旨在提供无缝集成的ML工作流体验，使数据科学家和工程师更容易构建、训练和大规模部署机器学习模型。
- en: Each of these technologies are worth spending your time on as they will greatly
    enhance the quality of your life when doing MLOps.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每一种这些技术都值得你花时间，因为它们会大大提升你在进行MLOps时的生活质量。
- en: Thank you for reading!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章吗？还有，它那奇特的写作风格？想象一下能够访问到几十篇类似的文章，全部由一位才华横溢、迷人、风趣的作者（顺便说一下，就是我 :)）撰写。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需4.99美元的会员订阅，你不仅可以访问我的故事，还能获得来自Medium上最优秀头脑的知识宝藏。如果你使用[我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我超级nova的感激之情，并且为支持我的工作得到一个虚拟的击掌。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----8c9477e1f4a5--------------------------------)
    [## Join Medium with my referral link - Bex T.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----8c9477e1f4a5--------------------------------)
    [## 通过我的推荐链接加入Medium - Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独家访问我所有的⚡高级⚡内容和Medium上的所有内容，不受限制。通过给我买一杯咖啡来支持我的工作…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----8c9477e1f4a5--------------------------------)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----8c9477e1f4a5--------------------------------)
