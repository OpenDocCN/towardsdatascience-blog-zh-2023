- en: 6 Python Best Practices that Distinguish Senior Developers from Juniors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区分资深开发人员与初级开发人员的6个 Python 最佳实践
- en: 原文：[https://towardsdatascience.com/6-python-best-practices-that-distinguish-seniors-from-juniors-84199d4cac3c](https://towardsdatascience.com/6-python-best-practices-that-distinguish-seniors-from-juniors-84199d4cac3c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/6-python-best-practices-that-distinguish-seniors-from-juniors-84199d4cac3c](https://towardsdatascience.com/6-python-best-practices-that-distinguish-seniors-from-juniors-84199d4cac3c)
- en: How to write Python code that is perceived as coming from an experienced developer
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何编写被认为来自经验丰富的开发人员的 Python 代码
- en: '[](https://medium.com/@tomergabay?source=post_page-----84199d4cac3c--------------------------------)[![Tomer
    Gabay](../Images/1fb1d408bc89415918c1aa6733df44e1.png)](https://medium.com/@tomergabay?source=post_page-----84199d4cac3c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----84199d4cac3c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----84199d4cac3c--------------------------------)
    [Tomer Gabay](https://medium.com/@tomergabay?source=post_page-----84199d4cac3c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@tomergabay?source=post_page-----84199d4cac3c--------------------------------)[![Tomer
    Gabay](../Images/1fb1d408bc89415918c1aa6733df44e1.png)](https://medium.com/@tomergabay?source=post_page-----84199d4cac3c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----84199d4cac3c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----84199d4cac3c--------------------------------)
    [Tomer Gabay](https://medium.com/@tomergabay?source=post_page-----84199d4cac3c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----84199d4cac3c--------------------------------)
    ·12 min read·Apr 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----84199d4cac3c--------------------------------)
    ·12 min 阅读·2023年4月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3dd47a21048817c7f706cbf2338c9456.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3dd47a21048817c7f706cbf2338c9456.png)'
- en: Photo by [Desola Lanre-Ologun](https://unsplash.com/@disruptxn?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Desola Lanre-Ologun](https://unsplash.com/@disruptxn?utm_source=medium&utm_medium=referral)
    提供，发布于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In January 2023 I published [an article about 5 Python Tricks That Distinguish
    Senior Developers From Juniors](https://medium.com/towards-data-science/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940).
    In this article, rather than looking at ‘tricks’, we take a look at 6 best practices
    in Python that can distinguish experienced developers from beginners. Through
    various examples, we will explore the differences between code written by a senior
    developer and that by a junior developer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年1月，我发表了 [一篇关于区分资深开发人员与初级开发人员的5个 Python 技巧](https://medium.com/towards-data-science/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940)。在这篇文章中，我们不关注“技巧”，而是探讨6个
    Python 最佳实践，这些实践可以区分经验丰富的开发人员和初学者。通过各种示例，我们将深入了解资深开发人员和初级开发人员编写的代码之间的差异。
- en: By learning these best practices, you can write code that is not only perceived
    as being created by a senior developer, but it will also actually be of a higher
    quality as well. Both these qualities will be advantageous when e.g. presenting
    your code to colleagues or at job interviews.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习这些最佳实践，你可以编写出不仅被视为资深开发人员创作的代码，而且实际上代码质量也会更高。这些特点在向同事或在工作面试中展示你的代码时都会很有优势。
- en: 1\. Use the right iterable type
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 使用正确的可迭代类型
- en: An iterable is any Python object capable of returning its members one at a time,
    permitting it to be iterated over in a for-loop. ([source](https://www.pythonlikeyoumeanit.com/Module2_EssentialsOfPython/Iterables.html#:~:text=An%20iterable%20is%20any%20Python,over%20in%20a%20for%2Dloop.))
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可迭代对象是任何能够逐个返回其成员的 Python 对象，允许在 for 循环中进行迭代。 ([source](https://www.pythonlikeyoumeanit.com/Module2_EssentialsOfPython/Iterables.html#:~:text=An%20iterable%20is%20any%20Python,over%20in%20a%20for%2Dloop.))
- en: 'Junior developers tend to use lists every time they need an iterable. However,
    different types of iterables serve different purposes in Python. To summarize
    the most essential iterables:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 初级开发人员往往每次需要可迭代对象时都使用列表。然而，不同类型的可迭代对象在 Python 中有不同的用途。总结最基本的可迭代对象：
- en: '**lists** are for iterables that should be **ordered** and **mutable.**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表**用于需要**排序**和**可变**的可迭代对象。'
- en: '**sets** are for iterables that should **only contain unique values** and are
    **mutable** and **unordered**. They should be preferred when checking for the
    presence of an item, in which they are extremely fast. However, they are slower
    than a `list` when used to iterate over.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集合**是用于**仅包含唯一值**的可迭代对象，它们是**可变**和**无序**的。当检查某项是否存在时，它们应该是首选，因为它们非常快速。然而，当用于迭代时，它们比`list`要慢。'
- en: '**tuples** are for iterables that should be **ordered** and **immutable**.
    Tuples are faster and more memory-efficient than lists.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元组**是用于**有序**和**不可变**的可迭代对象。元组比列表更快，更节省内存。'
- en: 'Let’s first take a look at the difference when using a `set` versus a `list`.
    Imagine the simple task of warning the user when a requested username is already
    used. For example, you might often encounter code like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看看使用 `set` 和 `list` 的区别。想象一下一个简单的任务：当请求的用户名已被使用时警告用户。例如，你可能经常遇到如下代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`taken_usernames` is a `list` in the above code. However, all values in `taken_usernames`
    only have to occur once, there is no need for duplicate values, as duplicate usernames
    are not allowed. Also, the use case here for `taken_usernames` is to check for
    the presence of a new username in it. Therefore, there is no reason here to use
    a `list`. Instead, it is better to use a `set`, as we read here above that checking
    for presence is faster when using a `set` and because there is no need to store
    the same value more than once.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`taken_usernames` 是一个 `list`。然而，由于 `taken_usernames` 中的所有值只能出现一次，不需要重复值，因为不允许重复的用户名。因此，这里没有必要使用
    `list`。相反，使用 `set` 更好，因为我们在上面提到过，当使用 `set` 时，检查是否存在更快，并且没有必要存储重复的值。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Despite that both code snippets end up with the same result, using a `set` for
    checking presence instead of a `list` shows others that you understand that there
    are different iterable types for different use cases, rather than using a `list`
    each time you need an iterable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两个代码片段的结果相同，但使用 `set` 进行存在性检查而不是 `list` 向他人展示了你理解不同的可迭代类型适用于不同的用例，而不是每次需要可迭代对象时都使用
    `list`。
- en: 'For iterables that won’t mutate during execution time and need order, a `tuple`
    is the best option; e.g.:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在执行期间不会发生变化并且需要顺序的可迭代对象，`tuple`是最佳选择；例如：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you have a better understanding of when to use which iterable type! Your
    code will already seem more senior when instead of a `list` you use a `set` for
    iterables that contain only unique values which don’t need order, and a `tuple`
    for an ordered iterable whose values should not change.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对何时使用哪种可迭代类型有了更好的理解！当你使用 `set` 来处理仅包含唯一值且不需要顺序的可迭代对象时，你的代码会显得更高级，而 `tuple`
    则用于有序且值不应更改的可迭代对象。
- en: In the next section, we’ll take a look at Python’s naming conventions, after
    which will be clear why for example `WEEKDAYS` was spelt with capital letters
    in the more senior example in the snippet here above.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨 Python 的命名规范，之后会明确为什么例如 `WEEKDAYS` 在上面的代码片段中使用了大写字母。
- en: 'If you want to go deeper into when to use which iterable see for e.g. this
    article:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解何时使用哪种可迭代对象，请参阅例如这篇文章：
- en: '[](/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07?source=post_page-----84199d4cac3c--------------------------------)
    [## 15 Examples to Master Python Lists vs Sets vs Tuples'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 15 Examples to Master Python Lists vs Sets vs Tuples](/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07?source=post_page-----84199d4cac3c--------------------------------)'
- en: Comprehend the differences between these data structures
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解这些数据结构之间的区别
- en: towardsdatascience.com](/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07?source=post_page-----84199d4cac3c--------------------------------)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07?source=post_page-----84199d4cac3c--------------------------------)'
- en: 2\. Use Python’s naming conventions
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 使用 Python 的命名规范
- en: 'There are two kinds of ‘rules’ for variable names in Python:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中变量名的‘规则’有两种：
- en: Enforced rules
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制规则
- en: Naming conventions
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名规范
- en: 'Enforced rules prevent invalid variable names, such as variable names which
    start with a digit or that contain hyphens:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 强制规则防止无效的变量名，例如以数字开头或包含连字符的变量名：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Of course, because these are enforced by Python interpreters, you (hopefully)
    won’t see any of them applied in code. However, there are style guidelines (a.k.a.
    naming conventions) for variable names which are not enforced, and hence, you
    can use the wrong style for the wrong object.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于这些规则是由 Python 解释器强制执行的，所以（希望）你不会在代码中看到它们的应用。然而，对于变量名，有一些样式指南（即命名约定）是没有强制执行的，因此，你可以对错误的对象使用错误的样式。
- en: 'These are some of the most important naming conventions in Python:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Python 中一些最重要的命名约定：
- en: '**variables:** lower-case only, which underscores to split words, for example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量：** 仅使用小写字母，并用下划线分隔单词，例如：'
- en: '`first_name` `items` `names_list`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first_name` `items` `names_list`'
- en: '**functions** and **methods:** same rule as *variables,* lower-case only, which
    underscores to split words, for example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数**和**方法：** 与*变量*相同的规则，全部小写，并用下划线分隔单词，例如：'
- en: '`get_avg` `load_data` `print_each_item`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_avg` `load_data` `print_each_item`'
- en: '**classes:** use [CamelCasing](https://www.techtarget.com/whatis/definition/CamelCase#:~:text=CamelCase%20is%20a%20way%20to,humps%20on%20a%20camel''s%20back.);
    start with a capital letter and each new word starts with another capital letter,
    with no underscores in between:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**类：** 使用 [CamelCasing](https://www.techtarget.com/whatis/definition/CamelCase#:~:text=CamelCase%20is%20a%20way%20to,humps%20on%20a%20camel''s%20back.)；以大写字母开头，每个新单词也以大写字母开头，中间没有下划线：'
- en: '`Person` `TrainStation` `MarineAnimal`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Person` `TrainStation` `MarineAnimal`'
- en: '**constants:** uppercase only, with underscores to split words, for example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**常量：** 仅使用大写字母，并用下划线分隔单词，例如：'
- en: '`WEEKDAYS` `FORBIDDEN_WORDS`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WEEKDAYS` `FORBIDDEN_WORDS`'
- en: '**modules:** for Python file names, use the same convention as *variables,
    functions* and *methods (*lowercase with underscores to split words):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块：** 对于 Python 文件名，使用与*变量、函数*和*方法*相同的约定（小写字母并用下划线分隔单词）：'
- en: '`calculations.py` `data_preprocessing.py`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`calculations.py` `data_preprocessing.py`'
- en: Using the proper naming conventions does not only show maturity in Python, but
    not using the proper naming conventions can lead to significantly more confusing
    code, as we’ll see here below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正确的命名约定不仅显示了你在 Python 中的成熟度，而且不使用正确的命名约定可能导致代码显著混乱，正如下文所示。
- en: 'Python code that follows PEP-8 naming conventions:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循 PEP-8 命名约定的 Python 代码：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Python code that doesn’t use naming conventions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用命名约定的 Python 代码：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Most developers will definitely highly doubt your Python skills if you provide
    them with the code in the second snippet, while when provided with the first snippet,
    they see quality Python code. Therefore it is very important to make sure you
    adhere to Python’s naming conventions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供的代码片段是第二种，那么大多数开发人员肯定会高度怀疑你的 Python 技能，而如果提供的是第一种片段，他们会认为是高质量的 Python 代码。因此，确保遵守
    Python 的命名约定是非常重要的。
- en: For more details on naming conventions in Python see [PEP-8.](https://peps.python.org/pep-0008/#naming-conventions)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Python 命名约定的更多详细信息，请参见 [PEP-8](https://peps.python.org/pep-0008/#naming-conventions)
- en: 3\. Use the proper comparison statements
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 使用适当的比较语句
- en: Comparison operators (…) compare the values on either side of them and returns
    a boolean value. They tell whether a statement is True or False according to the
    condition. ([source](https://flexiple.com/python/comparison-operators-in-python/))
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 比较运算符（…）比较它们两边的值并返回一个布尔值。它们告诉你一个语句是 True 还是 False，具体取决于条件。 ([source](https://flexiple.com/python/comparison-operators-in-python/))
- en: 'In Python, there are many ways to write (almost) identical comparison statements,
    but they’re not necessarily equally appropriate. Let’s take a look at a small
    example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，有很多种方法来编写（几乎）相同的比较语句，但它们并不一定同样合适。我们来看一个小例子：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last example `if is_even(x):` works, because without anything to compare
    to, Python evaluates if `is_even(x)` evaluates to `True`. However, it is important
    to note that almost any Python variable will evaluate to `True` except for:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子 `if is_even(x):` 能够工作，因为在没有任何比较对象的情况下，Python 评估 `is_even(x)` 是否为 `True`。然而，需要注意的是，几乎任何
    Python 变量都将被评估为 `True`，除非：
- en: Empty sequences, such as lists, tuples, strings etc.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空序列，如列表、元组、字符串等。
- en: The number `0` (in both its integer and its float type)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字 `0`（无论是整数还是浮点数类型）
- en: '`None`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None`'
- en: '`False` (obviously)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False`（显而易见）'
- en: 'This means for example that every `if <number>:` statement will evaluate to
    `True`, except if that number is `0`. Therefore, an if-statement without any concrete
    example might seem too global to be used, because the chances seem high that it
    unwittingly might evaluate to `True`. Yet, we can make very good use of the fact
    that empty sequences always evaluate to `False`, while a sequence with at least
    one value always evaluates to `True`. Often in more junior Python code, you’ll
    encounter the following comparison statement: `if <variable> != []`, such as in
    the snippet below.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，例如，每个`if <number>:`语句将评估为`True`，除非该数字是`0`。因此，没有具体示例的if语句可能看起来过于宽泛，因为它可能无意中评估为`True`的可能性很高。然而，我们可以很好地利用空序列始终评估为`False`这一事实，而至少有一个值的序列始终评估为`True`。在初级Python代码中，你常常会遇到以下比较语句：`if
    <variable> != []`，如下片段所示。
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: However, what will happen when someone inserts a different type of iterable?
    For example, a `set`. If you want to raise a `ValueError` for an empty `list`
    , you probably would want to raise a `ValueError` for an empty `set` as well.
    In the code above, an empty `set` will still evaluate to `True`, because an empty
    `set` is not equal to an empty `list`. One way to prevent such unwanted behaviour
    is to use `if items` instead of `if items != []`, because `if items` will now
    raise a `ValueError` for each iterable that is empty, including the `list`, `set`
    and a `tuple` from section1.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当有人插入不同类型的可迭代对象时会发生什么呢？例如，一个`set`。如果你希望对空`list`引发`ValueError`，你可能也希望对空`set`引发`ValueError`。在上述代码中，空`set`仍将评估为`True`，因为空`set`与空`list`不相等。避免这种不必要行为的一种方法是使用`if
    items`而不是`if items != []`，因为`if items`现在将对每个空的可迭代对象引发`ValueError`，包括`list`、`set`和第1节中的`tuple`。
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you want to compare a value explicitly to `True` or `False` , you should
    use `is True` or `is False` instead of `== True` and `== False` . This also applies
    to `None` , because they are all [*singletons*](https://www.geeksforgeeks.org/singleton-pattern-in-python-a-complete-guide/).
    See [PEP285](https://peps.python.org/pep-0285/). Though the differences in performances
    are tiny, `is True` is a bit faster than `== True.` Above all, it shows that you
    are known with PEPs (Python Enhancement Proposals), which shows developer skill
    maturity.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想显式地将值与`True`或`False`进行比较，你应该使用`is True`或`is False`，而不是`== True`和`== False`。这同样适用于`None`，因为它们都是[*单例*](https://www.geeksforgeeks.org/singleton-pattern-in-python-a-complete-guide/)。见[PEP285](https://peps.python.org/pep-0285/)。虽然性能差异微小，但`is
    True`比`== True`稍快。最重要的是，这表明你熟悉PEP（Python增强提案），这显示了开发者的技能成熟度。
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Bonus tip:** [PEP8](https://peps.python.org/pep-0008/#programming-recommendations)
    warns about the use of `if value` to make sure `value` is not `None` . To check
    whether a value is not `None` , use `if value is not None` explicitly.'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**额外提示：** [PEP8](https://peps.python.org/pep-0008/#programming-recommendations)警告使用`if
    value`来确保`value`不是`None`。要检查值是否不是`None`，请明确使用`if value is not None`。'
- en: Choosing the most proper comparison statement can occasionally save you or others
    from having to debug a tricky bug. But above all, senior developers will estimate
    you more equal to them if you use e.g. `if value is True` over `if value == True`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 选择最合适的比较语句有时可以避免你或他人调试棘手的错误。但最重要的是，高级开发者会更看重你使用，例如`if value is True`而非`if value
    == True`。
- en: Of course, rather than just writing a comparison statement for a variable's
    value it is better to check for the data type first, but how do we raise good
    exceptions for that? Let’s take a look at raising informative exceptions in the
    section!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，与其仅仅编写变量值的比较语句，不如首先检查数据类型，但我们如何为此引发好的异常呢？让我们看看本节中的信息性异常引发方法！
- en: 4\. Raise informative exceptions
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 提升信息性异常
- en: 'Something more junior developers rarely do is ‘manually’ raise exceptions with
    custom messages. Let’s consider the following situation: we want to create a function
    called `print_each_item()` which prints each item of an iterable type.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 初级开发者很少做的一件事是‘手动’引发带有自定义消息的异常。让我们考虑以下情况：我们想创建一个名为`print_each_item()`的函数，该函数打印每个可迭代类型的项。
- en: 'The most simple solution would be:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的解决方案是：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Of course, this code works. However, when this function is part of a big code
    base, the possible absence of print results when running the program might be
    confusing. Is the function called properly? One way to solve such an issue is
    to use **logging**, which we’ll discuss in the next section. First, let’s look
    at how to prevent insecurities such as the absence of print results by raising
    `Exceptions`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这段代码是有效的。然而，当这个函数是大型代码库的一部分时，运行程序时可能缺少打印结果可能会让人困惑。函数是否被正确调用？解决这种问题的一种方法是使用**日志记录**，我们将在下一节讨论。首先，让我们看看如何通过抛出`Exceptions`来防止诸如缺少打印结果等不安全问题。
- en: 'The function `print_each_item()` works only on iterable Python objects, so
    our first check should be whether Python can iterate on the provided argument
    by using Python''s built-in function `iter()`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `print_each_item()` 仅对可迭代的 Python 对象有效，因此我们首先应该检查 Python 是否可以通过使用内置函数 `iter()`
    对提供的参数进行迭代：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By trying the `iter()` function on `items` we check whether it is possible to
    iterate over `items`. Of course, it is also possible to check the type of `items`
    through `isinstance(items, Iterable)`, however, some custom Python types might
    not count as an `Iterable` while they might be iterable, so `iter(items)` is more
    waterproof here. We add the `.with_traceback` here to the `Exception`to give more
    context for debugging when the error is raised.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对 `items` 尝试 `iter()` 函数，我们检查是否可以对 `items` 进行迭代。当然，也可以通过 `isinstance(items,
    Iterable)` 来检查 `items` 的类型，但某些自定义的 Python 类型可能不被算作 `Iterable`，尽管它们可能是可迭代的，因此 `iter(items)`
    更加可靠。我们在 `Exception` 中添加 `.with_traceback` 以提供更多调试时的上下文。
- en: 'Next, when we’ve confirmed that `items` is iterable, we must make sure that
    `items` is not an empty iterable, to prevent the absence of print results. We
    can do this how we learned in the previous section, by using `if items:`. If `if
    items:` is `False` we want to raise a `ValueError`, because that means the iterable
    is empty. Here below is the full-proof `print_each_item()` function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当我们确认 `items` 是可迭代的时，我们必须确保 `items` 不是空的可迭代对象，以防止打印结果缺失。我们可以使用之前学到的 `if
    items:` 来实现。如果 `if items:` 为 `False`，我们想要抛出一个 `ValueError`，因为这意味着可迭代对象是空的。下面是经过验证的
    `print_each_item()` 函数：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Of course, the most simple `print_each_item()` is fine for most use cases, however,
    if you work as a developer at a company, or write open-source code, and the function
    is often reused, your fellow-Pythoneers might require or at least be much happier
    when they see the function as in the second example. Being able to understand
    which exceptions could happen for a function and how to properly handle them and
    raising informative exceptions is definitely a required skill to become (more)
    senior.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，最简单的 `print_each_item()` 适用于大多数用例，但如果你在公司担任开发人员，或编写开源代码，并且该函数经常被重用，你的 Python
    同行可能会要求或至少会更高兴看到第二个示例中的函数。能够理解函数可能出现的异常以及如何正确处理它们，并抛出有用的异常，绝对是成为（更）高级开发者所需的技能。
- en: Yet, your function will still likely be refused when being reviewed by others.
    That is because it doesn’t contain a docstring or any type hinting, which are
    essential for high-quality Python code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你的函数被其他人审查时，仍然可能会被拒绝。因为它没有包含文档字符串或任何类型提示，这些都是高质量 Python 代码的必要条件。
- en: 5\. Type hinting and docstrings
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 类型提示和文档字符串
- en: 'Type hinting was introduced in Python 3.5\. With type hinting, you can *hint*
    which type is expected. A very simplistic example could be:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示在 Python 3.5 中引入。通过类型提示，你可以*提示*预期的类型。一个非常简单的示例可以是：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By specifying `str` as the type hint of `sentence` we know `sentence` should
    be a string, and not e.g. a list with words. Through `-> str` we specify that
    the function returns an object of type string. Python won’t enforce the right
    types (if won’t raise an `Exception` if an object of a different type is inserted)
    but often IDEs like [Visual Studio Code](https://code.visualstudio.com/) and [PyCharm](https://www.jetbrains.com/pycharm/promo/?medium=cpc&campaign=14124132615&term=pycharm&content=536947779960&gclid=CjwKCAjwue6hBhBVEiwA9YTx8AeY9b1iUuYFfKf0ae1o-GKo3jbkTjE361ftJkshc6vKDk7dPqDPdxoC7boQAvD_BwE)
    help you code by making use of the type hints in the code (see screenshot further
    down this section).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定`str`作为`sentence`的类型提示，我们知道`sentence`应该是一个字符串，而不是例如一个包含单词的列表。通过`-> str`我们指定该函数返回一个字符串类型的对象。Python
    不会强制执行正确的类型（如果插入了不同类型的对象不会引发`Exception`），但通常像 [Visual Studio Code](https://code.visualstudio.com/)
    和 [PyCharm](https://www.jetbrains.com/pycharm/promo/?medium=cpc&campaign=14124132615&term=pycharm&content=536947779960&gclid=CjwKCAjwue6hBhBVEiwA9YTx8AeY9b1iUuYFfKf0ae1o-GKo3jbkTjE361ftJkshc6vKDk7dPqDPdxoC7boQAvD_BwE)
    这样的 IDE 会通过利用代码中的类型提示来帮助你编程（见本节进一步下方的截图）。
- en: 'We can apply this too in our `print_each_item()` through:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在`print_each_item()`中应用这一点，通过：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Docstrings** help explain code snippets like functions or classes. We can
    add the following docstring to `print_each_item()` to make it absolutely clear
    for other users and our future self what the function does:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档字符串** 有助于解释代码片段，如函数或类。我们可以向`print_each_item()`添加以下文档字符串，以使其他用户和未来的自己清楚函数的作用：'
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, if we are writing code that uses `print_each_item` we see the following
    information appear:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们编写使用`print_each_item`的代码，我们会看到以下信息出现：
- en: '![](../Images/09803f88a783599a56e8edaa60adf6eb.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09803f88a783599a56e8edaa60adf6eb.png)'
- en: (Screenshot by Author)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: （截图由作者提供）
- en: By adding type hinting and docstrings, we have made our function much more user-friendly!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加类型提示和文档字符串，我们使我们的函数变得更加用户友好！
- en: For more on type hinting click [here](https://docs.python.org/3/library/typing.html).
    For more on docstrings see [PEP-257](https://peps.python.org/pep-0257/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 关于类型提示的更多信息请点击 [这里](https://docs.python.org/3/library/typing.html)。有关文档字符串的更多信息请参见
    [PEP-257](https://peps.python.org/pep-0257/)。
- en: '**Note:** it might feel like writing a long docstring for such a simple function
    is a bit of an overkill, which you could argue it sometimes is. Luckily, when
    a function isn’t secretive, you can easily ask [ChatGPT](https://chat.openai.com/)
    to write a very accurate and elaborate docstring for you!'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 为这样一个简单的函数编写长文档字符串可能会觉得有些过头，尽管你可以争辩说确实有时是这样。幸运的是，当一个函数不是秘密的时，你可以轻松地请求
    [ChatGPT](https://chat.openai.com/) 为你编写一个非常准确和详细的文档字符串！'
- en: 6\. Use logging
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 使用日志记录
- en: There are a few things which make using your code much more pleasant for others,
    such as type hinting and docstrings. However, one of the most important, underused
    and underrated features is logging. Though a lot of (junior) developers perceive
    logging as difficult or unnecessary, running a properly logged program can make
    a huge difference to anyone using your code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事可以使使用你的代码对其他人更加愉快，例如类型提示和文档字符串。然而，最重要、最少使用且被低估的特性之一是日志记录。尽管许多（初级）开发者认为日志记录是困难或不必要的，但运行一个适当记录的程序可以对任何使用你的代码的人产生巨大差异。
- en: 'Only two lines are required to make logging in your code possible:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要两行代码即可使日志记录在你的代码中成为可能：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, you can easily add logging to help e.g. with debugging:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以轻松地添加日志来帮助，例如调试：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It can also really help other developers with debugging by logging the error
    messages:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它还可以通过记录错误信息真正帮助其他开发者进行调试：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Because logging is such a rare feature to see in more junior developers’ code,
    adding it to your own makes you already (seem) much more experienced in Python!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因为日志记录在较初级开发者的代码中是一个很少见的特性，添加它到你自己的代码中会让你显得（更）有经验一些！
- en: To conclude
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we’ve taken a look at 6 Python best practices that can make
    the difference between appearing to be a junior developer versus a more senior
    one. Of course, there are manymore factors that distinguish senior developers
    from juniors, however, by applying these 6 best practices you’ll definitely distinguish
    yourself (whether at your work, at a coding interview or when contributing to
    open-source packages) from other junior developers who don’t apply these best
    practices!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们回顾了 6 个 Python 最佳实践，这些实践可以让你看起来像是一个资深开发者，而不是一个初级开发者。当然，还有许多其他因素区分资深开发者和初级开发者，不过，通过应用这
    6 个最佳实践，你肯定会在你的工作、编程面试或贡献开源项目时，明显区别于那些不应用这些最佳实践的初级开发者！
- en: 'To read more about the differences between code of seniors and juniors see:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解高级和初级代码之间的差异，请查看：
- en: '[](/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940?source=post_page-----84199d4cac3c--------------------------------)
    [## 5 Python Tricks That Distinguish Senior Developers From Juniors'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940?source=post_page-----84199d4cac3c--------------------------------)
    [## 5 个 Python 技巧，区分高级开发者和初级开发者'
- en: Illustrated through differences in approaches to Advent of Code puzzles
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 Advent of Code 题目的解法差异进行说明
- en: towardsdatascience.com](/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940?source=post_page-----84199d4cac3c--------------------------------)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940?source=post_page-----84199d4cac3c--------------------------------)
- en: 'If you want to know more about how to become more senior yourself see:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解如何自己晋升为更高级别的开发者，请查看：
- en: '[](/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355?source=post_page-----84199d4cac3c--------------------------------)
    [## How to Level Up Your Python Skills by Learning From These Professionals'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355?source=post_page-----84199d4cac3c--------------------------------)
    [## 如何通过向这些专业人士学习来提升你的 Python 技能'
- en: Prevent staying stuck at the junior level of Python programming
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免停留在 Python 编程的初级水平
- en: towardsdatascience.com](/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355?source=post_page-----84199d4cac3c--------------------------------)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355?source=post_page-----84199d4cac3c--------------------------------)
- en: Resources
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '**Iterables** [https://www.pythonlikeyoumeanit.com/Module2_EssentialsOfPython/Iterables.html#](https://www.pythonlikeyoumeanit.com/Module2_EssentialsOfPython/Iterables.html#)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**可迭代对象** [https://www.pythonlikeyoumeanit.com/Module2_EssentialsOfPython/Iterables.html#](https://www.pythonlikeyoumeanit.com/Module2_EssentialsOfPython/Iterables.html#)'
- en: '[https://stackoverflow.com/questions/2831212/python-sets-vs-lists](https://stackoverflow.com/questions/2831212/python-sets-vs-lists)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://stackoverflow.com/questions/2831212/python-sets-vs-lists](https://stackoverflow.com/questions/2831212/python-sets-vs-lists)'
- en: '[https://towardsdatascience.com/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07](/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07](/15-examples-to-master-python-lists-vs-sets-vs-tuples-d4ffb291cf07)'
- en: '**Naming conventions**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**命名约定**'
- en: '[https://peps.python.org/pep-0008](https://peps.python.org/pep-0008)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://peps.python.org/pep-0008](https://peps.python.org/pep-0008)'
- en: '[https://www.techtarget.com/whatis/definition/CamelCase#:~:text=CamelCase%20is%20a%20way%20to,humps%20on%20a%20camel''s%20back](https://www.techtarget.com/whatis/definition/CamelCase#:~:text=CamelCase%20is%20a%20way%20to,humps%20on%20a%20camel''s%20back).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.techtarget.com/whatis/definition/CamelCase#:~:text=CamelCase%20is%20a%20way%20to,humps%20on%20a%20camel''s%20back](https://www.techtarget.com/whatis/definition/CamelCase#:~:text=CamelCase%20is%20a%20way%20to,humps%20on%20a%20camel''s%20back).'
- en: '**Proper comparison statements** [https://peps.python.org/pep-0008](https://peps.python.org/pep-0008)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**适当的比较语句** [https://peps.python.org/pep-0008](https://peps.python.org/pep-0008)'
- en: '[https://peps.python.org/pep-0285/](https://peps.python.org/pep-0285/)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://peps.python.org/pep-0285/](https://peps.python.org/pep-0285/)'
- en: '[https://flexiple.com/python/comparison-operators-in-python/](https://flexiple.com/python/comparison-operators-in-python/)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://flexiple.com/python/comparison-operators-in-python/](https://flexiple.com/python/comparison-operators-in-python/)'
- en: '**Type hinting and docstrings** [https://docs.python.org/3/library/typing.html](https://docs.python.org/3/library/typing.html)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型提示和文档字符串** [https://docs.python.org/3/library/typing.html](https://docs.python.org/3/library/typing.html)'
- en: '[https://peps.python.org/pep-0257/](https://peps.python.org/pep-0257/)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://peps.python.org/pep-0257/](https://peps.python.org/pep-0257/)'
- en: '**Logging** [https://docs.python.org/3/library/logging.html](https://docs.python.org/3/library/logging.html)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志记录** [https://docs.python.org/3/library/logging.html](https://docs.python.org/3/library/logging.html)'
- en: '**Memes** [https://www.reddit.com/r/ProgrammerHumor/comments/l9lbm2/code_review_be_like/](https://www.reddit.com/r/ProgrammerHumor/comments/l9lbm2/code_review_be_like/)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**表情包** [https://www.reddit.com/r/ProgrammerHumor/comments/l9lbm2/code_review_be_like/](https://www.reddit.com/r/ProgrammerHumor/comments/l9lbm2/code_review_be_like/)'
