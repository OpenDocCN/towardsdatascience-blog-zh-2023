- en: Using Symbolic Regression to Add Uncertainty to Elo’s Famous Ratings System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用符号回归为Elo著名评分系统增加不确定性
- en: 原文：[https://towardsdatascience.com/using-symbolic-regression-to-add-uncertainty-to-elos-famous-ratings-system-796d54f2b478](https://towardsdatascience.com/using-symbolic-regression-to-add-uncertainty-to-elos-famous-ratings-system-796d54f2b478)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/using-symbolic-regression-to-add-uncertainty-to-elos-famous-ratings-system-796d54f2b478](https://towardsdatascience.com/using-symbolic-regression-to-add-uncertainty-to-elos-famous-ratings-system-796d54f2b478)
- en: And creating an unexpectedly useful ratings algorithm
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并创建一个意外有用的评分算法
- en: '[](https://medium.com/@BlakeAtkinson?source=post_page-----796d54f2b478--------------------------------)[![Blake
    Atkinson](../Images/9f40ad0458f4b881d5a767f1206c8608.png)](https://medium.com/@BlakeAtkinson?source=post_page-----796d54f2b478--------------------------------)[](https://towardsdatascience.com/?source=post_page-----796d54f2b478--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----796d54f2b478--------------------------------)
    [Blake Atkinson](https://medium.com/@BlakeAtkinson?source=post_page-----796d54f2b478--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@BlakeAtkinson?source=post_page-----796d54f2b478--------------------------------)[![Blake
    Atkinson](../Images/9f40ad0458f4b881d5a767f1206c8608.png)](https://medium.com/@BlakeAtkinson?source=post_page-----796d54f2b478--------------------------------)[](https://towardsdatascience.com/?source=post_page-----796d54f2b478--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----796d54f2b478--------------------------------)
    [Blake Atkinson](https://medium.com/@BlakeAtkinson?source=post_page-----796d54f2b478--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----796d54f2b478--------------------------------)
    ·12 min read·Jul 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----796d54f2b478--------------------------------)
    ·阅读时间12分钟·2023年7月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2873d9a5d01ad773ef96a85f7f528359.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2873d9a5d01ad773ef96a85f7f528359.png)'
- en: Photo by [JESHOOTS.COM](https://unsplash.com/@jeshoots?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/video-games?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[JESHOOTS.COM](https://unsplash.com/@jeshoots?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，来自[Unsplash](https://unsplash.com/s/photos/video-games?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: A Universal Ratings System
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个通用评分系统
- en: The Elo ratings system has become famous in a few contexts. Perhaps most famously,
    it has been been the basis of Chess ratings since the 1960’s. Additionally, the
    website 538 has successfully used modifications of it for most of their well-known
    sports ratings. Less publicly, many video game developers use variations of the
    Elo system behind the scenes in their matchmaking systems. If you’re reading this
    article, I’ll assume you have some familiarity with the system. Why is it so used
    in so many contexts? I would argue because of its computational scaling, versatility,
    and simplicity. There are however some drawbacks. In this article, we will address
    a very key one, while maintaining the advantages listed above.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Elo评分系统在一些领域变得非常著名。最著名的例子可能是它自1960年代以来作为国际象棋评分的基础。此外，网站538成功地对其进行了修改，用于他们大部分知名的体育评分。较少公开的是，许多视频游戏开发者在他们的匹配系统中使用了Elo系统的变种。如果你正在阅读这篇文章，我会假设你对该系统有一定的了解。它为何在如此多的领域被广泛使用？我认为是因为它的计算扩展性、多功能性和简单性。然而，它也有一些缺点。本文将解决一个非常关键的问题，同时保持上述优点。
- en: Symbolic Regression
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号回归
- en: While Large Language Models are currently getting all of the attention (pun
    intended), there are other exciting models that are being developed separately
    with very different use cases. Symbolic regression is typically well suited to
    discover closed-form analytical rules rather than attack a deep learning task
    like classifying an image or translating an audio recording. If you wanted to
    rediscover Newton’s law of cooling, for example, you *could* build a resource
    intensive dense neural network. This would do well with enough data, but would
    not be able to generalize to situations it hadn’t seen. However, symbolic regression
    would be the right tool for the task. It can find the exact formula with limited
    data, and therefore not only generalize, but save quite a bit on computation.
    [One of my favorite papers of all time by Cranmer et al.](https://arxiv.org/abs/2006.11287)
    goes into this further and even develops a previously undiscovered equation for
    dark matter overdensity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大型语言模型目前获得了所有的关注（双关含义），但也有其他令人兴奋的模型在被单独开发，具有非常不同的用途。符号回归通常适合发现封闭形式的解析规则，而不是处理像图像分类或音频翻译这样的深度学习任务。例如，如果你想重新发现牛顿的冷却定律，你*可以*构建一个资源密集型的密集神经网络。虽然这样做在数据足够的情况下效果良好，但它无法推广到未见过的情况。然而，符号回归将是正确的工具。它可以用有限的数据找到精确的公式，因此不仅可以推广，还能节省相当多的计算资源。[Cranmer等人撰写的我最喜欢的论文之一](https://arxiv.org/abs/2006.11287)对此进行了更深入的探讨，甚至发展了一个以前未发现的暗物质过密度方程。
- en: The Problem
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Classic Elo ratings treat every rating as equally certain. This is usually
    a poor assumption for a large-scale ratings system. Simply put, newcomers to a
    ratings system should almost always be modeled with greater variance than those
    who have been around for awhile. Likewise, players that the ratings system hasn’t
    seen for a long period of time might’ve gotten better or worse by a significant
    amount. Imagine you and your group of four close friends often play Mario Kart
    against one another. For now, we can use the simplifying assumption that you only
    play head to head matches. No games have been played yet, but let’s say you have
    the following fundamentally true Elo ratings:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的Elo评分将每个评分视为同样确定。这通常对大规模评分系统而言是一个不准确的假设。简单来说，新进入评分系统的玩家应该几乎总是以比那些已存在一段时间的玩家更大的方差进行建模。同样，那些评分系统长时间未曾见过的玩家可能已经有所改进或退步。假设你和你的四个密友经常在马里奥卡丁车中互相竞技。现在，我们可以使用简化的假设，你们只进行一对一的比赛。虽然还没有进行任何比赛，但假设你们有以下基本真实的Elo评分：
- en: 'Alice: 1900'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 爱丽丝：1900
- en: 'Bob: 1700'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 鲍勃：1700
- en: 'Chelsea: 1500'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切尔西：1500
- en: 'Dimitri: 1300'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 德米特里：1300
- en: 'Evelyn: 1100'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伊夫琳：1100
- en: 'With the classic Elo system, the expected win probability is totally determined
    by the ratings difference:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典的Elo系统中，预期的胜率完全由评分差异决定：
- en: '![](../Images/6d64973ed89d15de72b2fc50cae0a564.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d64973ed89d15de72b2fc50cae0a564.png)'
- en: Where WP_A is win probability for Player A and R_B and R_A are the ratings for
    each player
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其中WP_A是玩家A的胜率，R_B和R_A是每个玩家的评分
- en: 'Because this is a sim, and we don’t have to worry about current form, a good
    nights sleep, or BAC. Instead, our true Elo ratings correspond to true win probabilities
    via the equation above. This would mean the following true win % chances when
    each player plays one another in our simulation:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一个模拟，我们不必担心当前的状态、良好的睡眠或血液酒精含量。相反，我们真实的Elo评分通过上述方程对应真实的胜率。这将意味着在模拟中每个玩家对抗另一名玩家时，以下是真实的胜率百分比：
- en: '![](../Images/93452a8141ca1fce7c40d0ba9f375a6a.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93452a8141ca1fce7c40d0ba9f375a6a.png)'
- en: 'You decide to use the Elo system to figure out how good everyone is, since
    as of right now, you don’t know the true ratings. The one parameter you need for
    the Elo system is the K value. K value is the amount of rating points “wagered”
    between players for each match, and which are ultimately awarded to the winner
    based on the pre-match win probability. Higher K values are used when you want
    to be more reactive to recent results, and lower K values are used when you want
    to trust your existing ratings. In most use cases, you’ll see K values between
    about 10 and 40\. Any higher than 40, and ratings become very noisy. Lower than
    10, and the ratings barely move at all. The following are 5,000 simulations of
    how long it would take for you, on average, to figure out how good everyone is
    with a k of 12, 24, and 36 over about 100 games:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你决定使用Elo系统来确定每个人的水平，因为目前你不知道真实评分。Elo系统所需的唯一参数是K值。K值是每场比赛中玩家之间“下注”的评分点数，最终根据赛前获胜概率奖励给胜者。较高的K值用于更快响应近期结果，而较低的K值用于更信任现有评分。在大多数使用情况下，你会看到K值在10到40之间。高于40，评分变得非常嘈杂。低于10，评分几乎不会变化。以下是5,000次模拟中，你平均需要多长时间才能确定每个人的水平，使用K值为12、24和36，经过大约100场比赛：
- en: '![](../Images/70148f098b1b5c3b7198d46649b39b19.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70148f098b1b5c3b7198d46649b39b19.png)'
- en: As you can see, even with fairly high k-values (36), our system still takes
    100 games to converge. As the k-values increase, the consistency gets worse. For
    example, when k=12, our rating approximation for the green player Chelsea stays
    right around her true rating of 1500\. However, with higher k-values, our approximation
    of Chelsea’s rating drifts anywhere from 1400–1600.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，即使使用相当高的K值（36），我们的系统仍需100场比赛才能收敛。随着K值的增加，一致性变得更差。例如，当K=12时，我们对绿色玩家Chelsea的评分近乎真实评分1500。然而，使用较高的K值时，我们对Chelsea评分的估计会在1400到1600之间漂移。
- en: One option would be to start with a high k-value, in order to increase convergence
    speed, and then reduce the k-value as ratings get more accurate. That is a hacky
    way to reduce uncertainty as more data comes in, and it turns out not to perform
    as well as more principled methods.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个选择是从高K值开始，以提高收敛速度，然后随着评分的准确性提高而减少K值。这是一种在更多数据到来时减少不确定性的巧妙方法，但结果显示，它的表现不如更有原则的方法。
- en: Other Systems
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他系统
- en: 'There have been plenty of attempts to solve this problem in the past, notably
    the [Glicko system](http://www.glicko.net/glicko/glicko.pdf) in 1995 and the [TrueSkill
    system](https://www.microsoft.com/en-us/research/project/trueskill-ranking-system/)
    in 2005\. Glicko relies on a closed form update equation, while TrueSkill uses
    Bayesian factor graphs to update ratings. TrueSkill has the enormous advantage
    of being able to handle multiplayer race scenarios, or team scenarios, and tends
    to converge quicker. TrueSkill does usually require extra computation, especially
    if the number of players per game/race/tournament is large. It is also more sensitive
    to parameter changes than Glicko. The decision on which to use of course depends
    on the application (but usually ends up being TrueSkill). Let’s see how Glicko,
    TrueSkill, Elo, and Elo with decaying K all stack up trying to converge to Alice’s
    rating:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 过去曾有很多尝试解决这个问题，特别是1995年的[Glicko系统](http://www.glicko.net/glicko/glicko.pdf)和2005年的[TrueSkill系统](https://www.microsoft.com/en-us/research/project/trueskill-ranking-system/)。Glicko依赖于一个封闭形式的更新方程，而TrueSkill使用贝叶斯因子图来更新评分。TrueSkill具有处理多人比赛场景或团队场景的巨大优势，并且通常收敛更快。TrueSkill通常需要额外的计算，尤其是当每场比赛/比赛/锦标赛的玩家数量较多时。它也比Glicko对参数变化更敏感。使用哪种系统的决定当然取决于应用（但通常最终选择TrueSkill）。让我们看看Glicko、TrueSkill、Elo以及带有衰减K的Elo如何尝试收敛到Alice的评分：
- en: '![](../Images/82258cbcb7cd97e6c6c8ba2683658578.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82258cbcb7cd97e6c6c8ba2683658578.png)'
- en: As you can see, Glicko and TrueSkill converge *much* faster on average than
    Elo and Elo with k-value decay. Fundamentally, the faster convergence is because
    they are incorporating a measure of uncertainty. TrueSkill with scaled default
    parameters actually overshoots the true rating in my simulations, which demonstrates
    the sensitivity to parameter choices for that system. If I tuned the parameters,
    it would outperform Glicko, and not overshoot the true rating.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Glicko和TrueSkill在平均情况下收敛*快得多*，比Elo和带有K值衰减的Elo更快。从根本上说，更快的收敛是因为它们融入了不确定性度量。TrueSkill在我的模拟中，实际超出真实评分，这显示了该系统对参数选择的敏感性。如果我调整参数，它将优于Glicko，并且不会超出真实评分。
- en: Symbolic Regression and My Own System
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号回归与我自己的系统
- en: Before I realized how others had solved the problem, I set out to solve the
    problem myself. I’m glad I didn’t see their solutions, as it might’ve discouraged
    me from creating my own. In doing so, I found a great use case for the often underutilized
    symbolic regression.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我了解到其他人如何解决这个问题之前，我决定自己解决这个问题。我很高兴没有看到他们的解决方案，因为这可能会使我放弃创造自己的方法。在这个过程中，我发现了一个很好的使用案例，就是常常被低估的符号回归。
- en: Introductory Math
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门数学
- en: As with any classic model, we have to start with assumptions. For the purposes
    of this article it is safe to assume that player and team skills are, for the
    most part, normally distributed. In my experience, this is close to true for about
    any competition. Chess ratings have been found to be slightly better approximated
    by the [logistic distribution](https://en.wikipedia.org/wiki/Logistic_distribution),
    but I want to avoid getting bogged down for now.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何经典模型一样，我们必须从假设开始。就本文而言，可以安全地假设玩家和团队的技能在大多数情况下是正态分布的。根据我的经验，这对于几乎任何竞争都是接近真实的。国际象棋评级被发现略微更适合[逻辑分布](https://en.wikipedia.org/wiki/Logistic_distribution)，但我现在想避免过于详细。
- en: Let’s say we have a normally distributed selection of 10,000 Mario Kart players.
    Let’s zoom in on two of those players. One will be “blue player” and the other
    will be “red player”.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个正态分布的10,000名马里奥卡丁车玩家的样本。我们来放大其中的两个玩家。其中一个是“蓝色玩家”，另一个是“红色玩家”。
- en: '![](../Images/bb723290c125258307564db1afce6175.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bb723290c125258307564db1afce6175.png)'
- en: I would say that I’m pretty well modeled by the red player in this scenario
    (somewhere from bad to worse).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我会说，在这种情况下，我的表现比较符合红色玩家（从差到更差）。
- en: In this case, I drew two random players from this distribution. In the classic
    Elo formulation, the matchup can completely be described by the ratings difference
    between these two players. Classic Elo makes no attempt to account for the fact
    that we might have less data on the blue player than the red player. Just to be
    clear, we’re not using these distributions to predict the outcome of an *individual*
    match yet. The distributions simply represent overall skill level. Even if they
    did not overlap at all, there would still be a small probability of the red player
    beating the blue player.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我从这个分布中随机抽取了两个玩家。在经典的Elo公式中，比赛完全可以通过这两个玩家之间的评分差异来描述。经典Elo没有试图考虑我们可能对蓝色玩家的数据比红色玩家少。为了澄清，我们还没有使用这些分布来预测*单场*比赛的结果。这些分布仅仅代表了整体的技能水平。即使它们完全不重叠，红色玩家击败蓝色玩家的概率仍然很小。
- en: Let’s say, for instance, we’ve only seen the blue player play once, and he or
    she did pretty well. It might have been luck from picking up the right item boxes
    at the right time, it’s hard to say. On the other hand, we’re pretty sure the
    red player is bad, although there’s some uncertainty about exactly how bad. In
    this new form of Elo, we acknowledge that it might be true that the blue player
    is actually worse than the red player (because the distributions somewhat meaningfully
    overlap).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我们只见过蓝色玩家一次，他或她表现得相当不错。可能是因为在正确的时间拾取了正确的道具箱，这很难说。另一方面，我们对红色玩家的表现很确定，虽然具体有多差还有些不确定。在这种新的Elo形式中，我们承认蓝色玩家实际上可能比红色玩家差（因为分布有些有意义地重叠）。
- en: 'Let’s call the red distribution R, the blue distribution B, and the distribution
    of the differences Z:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把红色分布叫做R，蓝色分布叫做B，差异分布叫做Z：
- en: '![](../Images/1683cc711af52b6f52f1a6fb73ec7933.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1683cc711af52b6f52f1a6fb73ec7933.png)'
- en: I promise, not a lot of equations, and only simple ones
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我保证，数学方程不多，而且只有简单的方程
- en: Since these are independent distributions, the covariance of B and R is zero.
    Our equations become very simple at this point. In other words, classic Elo only
    cares about the mean Z, which is about 1.85\. In this case, we are also tracking
    the standard deviation of Z, which is about 0.84\. That way, when we record an
    observation, we can update the distribution in a Bayesian manner.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些是独立分布，B和R的协方差为零。我们的方程此时变得非常简单。换句话说，经典Elo只关心均值Z，约为1.85。在这种情况下，我们还跟踪Z的标准差，约为0.84。这样，当我们记录一个观察值时，可以以贝叶斯方式更新分布。
- en: '![](../Images/a8c1d31bfa5c480f231246d35f4b6de3.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8c1d31bfa5c480f231246d35f4b6de3.png)'
- en: Notice the x axes above have the same scale. I’m just translating skill difference
    to win probability via the sigmoid function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意上面的x轴具有相同的刻度。我只是通过sigmoid函数将技能差异转化为获胜概率。
- en: Above, I visualized what it looks like when we run Elo drawing 10,000 times
    from the skill difference distribution. Classic Elo would give blue player a win
    probability of 86.4%, denoted by the yellow star. Our new Elo model will give
    a lot of different probabilities depending on the draw from the distribution.
    Interestingly, because one tail scenario drops the win probability precipitously,
    and the other one hits an upper bound, the average win probability is actually
    significantly lower for our distribution than just a point estimate— 83.7%. I’m
    just speculating, but perhaps this contributes to the reason the FIDE found that
    underdogs consistently won slightly more than predicted by Elo.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我可视化了当我们从技能差异分布中运行Elo 10,000次时的情况。经典Elo会给蓝色玩家一个86.4%的胜率，用黄色星星表示。我们的新Elo模型将根据从分布中抽样的结果给出许多不同的概率。有趣的是，由于一个尾部场景使胜率急剧下降，而另一个尾部场景达到了上限，因此我们分布的平均胜率实际上比仅仅一个点估计要低得多——83.7%。我只是猜测，但这也许有助于解释为什么国际象棋联合会发现弱者往往比Elo预测的赢得更多。
- en: It is also worth quickly mentioning that some games involve more luck than others.
    For example, you can get good at Uno, Catan, Euchre, or Five Crowns, but those
    games have enough luck involved that a bad player could still upset a much higher
    ranked player. On the other hand, if I play Magnus Carlson in Chess, I’m losing
    100/100 times, and so there is less luck involved. In order to model irreducible
    luck, additional complexity is needed (that I’m avoiding for now).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得快速提及的是，一些游戏比其他游戏更具运气成分。例如，你可以在Uno、卡坦岛、尤克或者Five Crowns中变得更出色，但这些游戏中涉及的运气因素足够多，以至于一个差的玩家仍然可能击败排名更高的玩家。另一方面，如果我与Magnus
    Carlson下棋，我100场100次都会输，因此涉及的运气成分较少。为了建模不可减少的运气因素，需要额外的复杂性（我现在暂时避免）。
- en: Symbolic Regression
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号回归
- en: Now, how can we use a win/loss result to update the parameters of these distributions?
    We need it to be a binary outcome variable to preserve the versatility of Elo
    — we want to be able to use this system for about any game (a good exercise would
    be to create a system that updates based on continuous outcomes). However, as
    far as I know, there isn’t a simple closed form solution to update the parameters
    of a Normal distribution with a binary outcome, and so imperfections arise. On
    one hand, I could spend a couple of years going through university courses and
    hone my mathematical skills to the point where I would know how to sit down and
    attack this problem. On the other hand, I could cheat and throw it into a symbolic
    regression model and additionally have a Medium article out of it. I chose the
    latter, although I have a lot of respect for someone who does the former.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们如何利用胜负结果来更新这些分布的参数呢？我们需要将其作为一个二元结果变量，以保持Elo系统的通用性——我们希望能够将这个系统应用于几乎所有的游戏（一个好的练习是创建一个基于连续结果更新的系统）。然而，据我所知，没有简单的闭式解来更新带有二元结果的正态分布的参数，因此会出现一些不完美之处。一方面，我可以花费几年时间通过大学课程来磨练我的数学技能，以至于知道如何坐下来解决这个问题。另一方面，我可以作弊，把它放入符号回归模型中，并额外写一篇Medium文章。我选择了后者，尽管我非常尊重那些选择前者的人。
- en: 'The Beta distribution is perfect for modeling the probabilities of binary outcomes,
    and we already have the mean of such a distribution given by our sigmoid transform
    of the mean of the Normal distribution (the purple graphs/yellow star above).
    The question is whether or not there is a decent formula for transforming Normal
    distribution variance into the equivalent of Beta distribution variance. In order
    to answer that question, I simply randomly generated a few thousand Normal skill
    difference distributions with known mean and variance, and then transformed every
    individual point from those randomly generated distributions into their equivalent
    probability between 0 and 1 with the sigmoid function. Here are some samples where
    I adjust the variance of the purple distribution above, keeping the same mean:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Beta分布非常适合建模二元结果的概率，我们已经通过对正态分布均值的sigmoid变换得到了这样一个分布的均值（上面的紫色图表/黄色星星）。问题是是否存在一个合理的公式将正态分布的方差转化为Beta分布方差的等效形式。为了回答这个问题，我随机生成了几千个具有已知均值和方差的正态技能差异分布，然后将这些随机生成的分布中的每个点通过sigmoid函数转换为其0到1之间的等效概率。以下是一些示例，其中我调整了上面紫色分布的方差，保持相同的均值：
- en: '![](../Images/b73f09d08e7faaa622f7f9cb1faead9b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b73f09d08e7faaa622f7f9cb1faead9b.png)'
- en: As variance goes up, less information is known, and the less confident we can
    be that the blue player is better than the red player. Yellow is the highest variance
    distribution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 随着方差的增加，已知的信息减少，我们对蓝色玩家比红色玩家更优秀的信心也减少。黄色是方差最高的分布。
- en: I put a question mark next to Beta, because there is no guarantee that I’m generating
    a Beta distribution by doing this. In fact, I certainly am not. However, simply
    by eyeballing the distributions, I guessed that I could find corresponding Beta
    parameters to describe these distributions well. Let’s empirically find the parameters
    of the distributions above using maximum likelihood estimation to fit the best
    Beta parameters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我在Beta旁边加了一个问号，因为没有保证通过这样做生成Beta分布。实际上，我确实没有。然而，仅仅通过目测这些分布，我猜测我可以找到相应的Beta参数来很好地描述这些分布。让我们使用最大似然估计经验性地找到上述分布的参数，以拟合最佳的Beta参数。
- en: 'Minimizing negative log likelihood, I came up with the following results:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化负对数似然，我得出了以下结果：
- en: '![](../Images/5b693c17feebadf953b843f22dad72bb.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b693c17feebadf953b843f22dad72bb.png)'
- en: 'The Beta param fits are far from perfect, but seemingly do very well in cases
    where variance is fairly low, or the probability isn’t extreme. After generating
    thousands of these, I simply fit a symbolic regression model using the [PySR package](https://github.com/MilesCranmer/PySR).
    I give it the Beta mean and Normal variance and see if it can predict the Beta
    sample size (which corresponds to variance). Then I will have all the parameters
    of the Beta distribution model. After fitting the model, PySR gives by far the
    highest score (which is based on simplicity and performance) to the equation:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Beta参数拟合远非完美，但在方差较低或概率不极端的情况下似乎表现非常好。在生成了数千个这些后，我简单地使用[PySR包](https://github.com/MilesCranmer/PySR)拟合了一个符号回归模型。我给它Beta均值和正态方差，看看它是否能预测Beta样本量（对应于方差）。然后我将得到Beta分布模型的所有参数。拟合模型后，PySR给出了迄今为止最高的评分（基于简洁性和性能）的方程：
- en: '![](../Images/16860c21d92bacf1aa5c22adf1bd4cc3.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/16860c21d92bacf1aa5c22adf1bd4cc3.png)'
- en: where mu_b is the Beta mean and sigma squared is the Normal variance
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其中mu_b是Beta均值，sigma平方是正态方差
- en: 'I was amazed at how simple that equation was, and for such a simple equation,
    how good the results were. Although it’s even farther from perfect than above,
    you can see it fits the data pretty well:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这个方程的简单程度感到惊讶，对于这样一个简单的方程，结果居然如此好。虽然它比上面更远离完美，但你可以看到它对数据的拟合相当好：
- en: '![](../Images/bd1ef7f2756f37d1362c147aa8fd4f89.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd1ef7f2756f37d1362c147aa8fd4f89.png)'
- en: This is the beauty of Symbolic Regression. Instead of taking minutes or hours
    to run an optimization on thousands of thousands of data points, we write a one
    line function that can give similar results instantly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是符号回归的美妙之处。我们不需要花费数分钟或数小时来优化成千上万的数据点，而是编写一个一行的函数，可以立即给出类似的结果。
- en: 'Making this key equation into an actual ratings system takes a few more steps
    which are not the focus of the article. If you’re interested, it involves using
    a Bayesian update of the Beta distribution, and then using algebra to get back
    to the Normal distribution. I also found through experimenting that since a match
    is a pairwise comparison (we are getting information from two players), we have
    way more effective sample size in practice than updating a typical Beta distribution
    (like a textbook coin flip example). Adjusting for the higher sample just involves
    adding a square term. The following is all the code I used to implement it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个关键方程转化为实际的评级系统需要几个额外的步骤，这些步骤不是文章的重点。如果你感兴趣，这涉及使用Beta分布的贝叶斯更新，然后使用代数返回到正态分布。我还通过实验发现，由于比赛是成对比较（我们从两个玩家那里获取信息），实际中我们的有效样本量远远高于更新典型的Beta分布（如教科书中的掷硬币示例）。对于较高的样本量的调整只涉及添加一个平方项。以下是我用于实现它的所有代码：
- en: 'Of course at this point, I still wasn’t sure how good my implementation was.
    Would it be incredibly inferior to TrueSkill and Glicko? It seemed very possible
    that I had just wasted a lot of time. So, I tried the same convergence test as
    before for Alice:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，此时我仍然不确定我的实现有多好。它会比TrueSkill和Glicko差得多吗？我很可能只是浪费了大量时间。所以，我对Alice进行了之前相同的收敛测试：
- en: '![](../Images/070c4af33ff07f7a6af253300bffae60.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/070c4af33ff07f7a6af253300bffae60.png)'
- en: (This time I spent the time fitting TrueSkill)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: （这次我花时间拟合TrueSkill）
- en: 'To my surprise, it performed extremely well. Since it requires only a handful
    of basic operations, it can compute thousands of ratings per second, and so it
    is extremely scalable. The system also has the advantage of not requiring much
    parameter tweaking, while keeping the versatility and simplicity of Elo’s system.
    Of course, I wanted to push it a little further, and see where it broke down:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 令我惊讶的是，它表现非常好。由于只需要少量基本操作，它可以每秒计算数千个评分，因此具有极高的可扩展性。该系统还具有无需大量参数调整的优点，同时保持了 Elo
    系统的多样性和简洁性。当然，我想进一步推进，看看它在哪里崩溃：
- en: '![](../Images/fd62c31a99ee1fc500e9c46ec5cc5b86.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd62c31a99ee1fc500e9c46ec5cc5b86.png)'
- en: The prediction did not match the maximum likelihood estimate when probabilities
    got close to 0 or 1\. So, ultimately there are some disadvantages because fundamentally
    a Beta distribution isn’t a perfect fit. I’m sure there’s a more complicated equation
    that could help take care of this, or some sort of modification. Maybe a statistician
    will inform me that a better distribution than the Beta distribution for modeling
    these outcomes exists. However, I was happily surprised with the system I created.
    No system will every be perfect, and there are always drawbacks to consider. Of
    course, there are a few ways to interweave these ideas into practical applications
    — you can follow me if you’re interested and I will continue to write about them.
    I hope that a success like this motivates readers to try symbolic regression for
    their own use cases. [Here is a link](https://github.com/btatkinson/oddsmaker/blob/main/medium/How%20to%20Add%20Uncertainty%20to%20Arpad%20Elo's%20Famous%20Ratings%C2%A0System.ipynb)
    to the notebook where I created all of these visualizations. It’s part of a library
    where I hope to implement vectorized versions of all these ratings systems (although
    that might still be a few months away).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当概率接近 0 或 1 时，预测结果与最大似然估计不匹配。因此，最终由于 Beta 分布根本上不是一个完美的拟合，这里存在一些劣势。我相信有一个更复杂的方程可以帮助解决这个问题，或者某种修正方法。也许一位统计学家会告诉我，有比
    Beta 分布更适合建模这些结果的分布。然而，我对我创建的系统感到非常惊喜。没有任何系统能做到完美，总是有需要考虑的缺陷。当然，有几种方法可以将这些想法融入实际应用中——如果你感兴趣，可以关注我，我会继续写相关内容。我希望这样的成功能激励读者尝试符号回归以适应自己的使用案例。[这里有一个链接](https://github.com/btatkinson/oddsmaker/blob/main/medium/How%20to%20Add%20Uncertainty%20to%20Arpad%20Elo's%20Famous%20Ratings%C2%A0System.ipynb)到我创建所有这些可视化的笔记本。这是一个库的一部分，我希望在其中实现所有这些评分系统的向量化版本（尽管这可能还需要几个月时间）。
- en: 'References:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献：
- en: '[1] Miles Cranmer, [Interpretable Machine Learning for Science with PySR and
    SymbolicRegression.jl](https://arxiv.org/abs/2305.01582) (2023)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Miles Cranmer, [用于科学的可解释机器学习：PySR 和 SymbolicRegression.jl](https://arxiv.org/abs/2305.01582)
    (2023)'
- en: '[2] Mark Glickman, [A Comprehensive Guide to Chess Ratings](http://www.glicko.net/research/acjpaper.pdf)
    (1995)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Mark Glickman, [国际象棋等级评估综合指南](http://www.glicko.net/research/acjpaper.pdf)
    (1995)'
- en: '[3] Ralf Herbrich, Tom Minka, Thore Graepel, [TrueSkill(TM): A Bayesian Skill
    Rating System](https://www.microsoft.com/en-us/research/publication/trueskilltm-a-bayesian-skill-rating-system/)
    (2007), Advances in Neural Information Processing Systems 20'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] Ralf Herbrich, Tom Minka, Thore Graepel, [TrueSkill(TM): 贝叶斯技能评分系统](https://www.microsoft.com/en-us/research/publication/trueskilltm-a-bayesian-skill-rating-system/)
    (2007)，神经信息处理系统第 20 卷'
- en: All images unless otherwise noted are by the author.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则所有图像均由作者提供。
