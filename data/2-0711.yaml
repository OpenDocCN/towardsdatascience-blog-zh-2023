- en: Demystifying Rotation Matrix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭开旋转矩阵的神秘面纱
- en: 原文：[https://towardsdatascience.com/demystifying-rotation-matrix-6c8885c691d6](https://towardsdatascience.com/demystifying-rotation-matrix-6c8885c691d6)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/demystifying-rotation-matrix-6c8885c691d6](https://towardsdatascience.com/demystifying-rotation-matrix-6c8885c691d6)
- en: How to rotate a vector in R²
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 R² 空间中旋转一个向量
- en: '[](https://medium.com/@smertatli?source=post_page-----6c8885c691d6--------------------------------)[![Mert
    Atli](../Images/2ce3ad8e4e3533aa889e1972ca52b02b.png)](https://medium.com/@smertatli?source=post_page-----6c8885c691d6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6c8885c691d6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6c8885c691d6--------------------------------)
    [Mert Atli](https://medium.com/@smertatli?source=post_page-----6c8885c691d6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@smertatli?source=post_page-----6c8885c691d6--------------------------------)[![Mert
    Atli](../Images/2ce3ad8e4e3533aa889e1972ca52b02b.png)](https://medium.com/@smertatli?source=post_page-----6c8885c691d6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6c8885c691d6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6c8885c691d6--------------------------------)
    [Mert Atli](https://medium.com/@smertatli?source=post_page-----6c8885c691d6--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6c8885c691d6--------------------------------)
    ·6 min read·Nov 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6c8885c691d6--------------------------------)
    ·6 分钟阅读·2023 年 11 月 1 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: A rotation matrix is like a magical tool in the world of linear algebra, designed
    to spin vectors around in space with precision and ease. Imagine you have a vector,
    a little arrow pointing somewhere in space, and you want to turn it around a certain
    point, like spinning a key around a keyring. That’s exactly what a rotation matrix
    helps you do.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转矩阵就像线性代数世界中的一种神奇工具，旨在精确而轻松地旋转空间中的向量。想象一下你有一个向量，一个指向某处的箭头，你想围绕某一点旋转它，就像在钥匙圈上旋转钥匙一样。这正是旋转矩阵帮助你完成的任务。
- en: To see how the rotation matrix emerges, lets start with a vector in R² and try
    to rotate it along horizontal axis.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解旋转矩阵的生成，我们从 R² 空间中的一个向量开始，尝试沿水平轴旋转它。
- en: Rotating a vector in R²
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 R² 空间中旋转一个向量
- en: The figure below shows a vector **v** in R² that makes the angle **a** with
    horizontal axis. Let’s say that we want to rotate it ‘b degrees’ counter-clock
    wise along the horizontal axis, which is denoted by **v’**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个在 R² 空间中与水平轴成角度 **a** 的向量 **v**。假设我们想将它沿水平轴逆时针旋转 ‘b 度’，这个向量记作 **v’**。
- en: '![](../Images/19c48b2f1c07578044de81caa85bd4ae.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19c48b2f1c07578044de81caa85bd4ae.png)'
- en: From v to v’ via rotation
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从 v 到 v’ 的旋转
- en: '**As we can see, the rotation just changes the direction of v and keeps the
    length(a.k.a ‘magnitude’) same.**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**正如我们所看到的，旋转只是改变了 v 的方向，并保持长度（即‘大小’）不变。**'
- en: 'In R², we can represent the vector v as the ordered tuple (m, n) with first
    element in horizontal axis, and the second element in the vertical axis. From
    trigonometry, we know that the coordinates of **v**=(m, n) can be represented
    as (||v||.cos(a), ||v||.sin(a)):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R² 空间中，我们可以将向量 v 表示为有序元组 (m, n)，其中第一个元素在水平轴上，第二个元素在垂直轴上。从三角学中，我们知道向量 **v**=(m,
    n) 的坐标可以表示为 (||v||.cos(a), ||v||.sin(a))：
- en: '![](../Images/28f3ee9f4f9a7a86b827fa0ff627cc0d.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28f3ee9f4f9a7a86b827fa0ff627cc0d.png)'
- en: The coordinates of a vector given its length and the angle
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 给定向量的长度和角度来确定向量的坐标
- en: 'So similarly, v’ can be represented as (||v||.cos(a+b), ||v||.sin(a+b)):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，v’ 可以表示为 (||v||.cos(a+b), ||v||.sin(a+b))：
- en: '![](../Images/9ce5c072cf2a52f94f4a0da00f08c5ff.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ce5c072cf2a52f94f4a0da00f08c5ff.png)'
- en: The coordinates of v and v’
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: v 和 v’ 的坐标
- en: 'So our problem is to find a mapping from v to v’. **Any vector can be transformed
    to another vector through matrix multiplication, especially when it comes to rotations.**
    If you have a vector **v** and you want to transform it to another vector **v′**
    through rotation, then there exists a rotation matrix **A** that can accomplish
    this task:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的问题是找到从 v 到 v’ 的映射。**任何向量都可以通过矩阵乘法转换成另一个向量，尤其是在旋转的情况下。** 如果你有一个向量 **v**，并且你想通过旋转将它转换为另一个向量
    **v′**，那么存在一个旋转矩阵 **A** 能够完成这个任务：
- en: '![](../Images/e1bbb11c00d146cbb93b4877df9d54d2.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1bbb11c00d146cbb93b4877df9d54d2.png)'
- en: Matrix A as a map from v to v’
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵 A 作为从 v 到 v’ 的映射
- en: 'From the equation above, it seems to be a good idea to represent **v** and
    **v’** as vectors to do some calculations with them. The vector representation
    of v is as follows (the first element is horizontal and the second element is
    vertical axis):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的方程可以看出，将**v**和**v’**表示为向量进行一些计算似乎是一个好主意。v的向量表示如下（第一个元素是水平轴，第二个元素是垂直轴）：
- en: '![](../Images/2e5581ee04f45a5efb0e3b8926287a59.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e5581ee04f45a5efb0e3b8926287a59.png)'
- en: vector representation of v
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: v的向量表示
- en: 'Similarly, the vector representation of v’ is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，v’的向量表示如下：
- en: '![](../Images/93d82a6d8177e217990725dad81d943c.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93d82a6d8177e217990725dad81d943c.png)'
- en: vector representation of v’
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: v’的向量表示
- en: 'So we have v and v’ as vectors. We don’t know the elements of the rotation
    matrix A yet, so lets denote them by variables x, y, z, and t:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有v和v’作为向量。我们还不知道旋转矩阵A的元素，所以让我们用变量x、y、z和t表示它们：
- en: '![](../Images/86aa8a3d3629258c93e1a2f3a2ed9655.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86aa8a3d3629258c93e1a2f3a2ed9655.png)'
- en: From v to v’ via rotation matrix
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过旋转矩阵从v到v’
- en: 'By doing matrix vector multiplication on the left hand side and then by equating
    it to the expressions on the right hand side, we can easily get the values of
    x, y, z, and t:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在左侧进行矩阵向量乘法，然后将其等于右侧的表达式，我们可以轻松获得x、y、z和t的值：
- en: '![](../Images/ca61ed4f1a708bb35056334948cfebf7.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca61ed4f1a708bb35056334948cfebf7.png)'
- en: Finding values of variables x, y, z, and t
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找变量x、y、z和t的值
- en: 'So this gives us a rotation matrix as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了如下旋转矩阵：
- en: '![](../Images/445efe6130336c8d2ab2f6d1e0c04f9d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/445efe6130336c8d2ab2f6d1e0c04f9d.png)'
- en: Rotation matrix
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转矩阵
- en: This is the rotation matrix that we need to rotate any vector v **b degrees
    counter-clock wise along the horizontal axis**. Looks cryptical? Let’s explore
    it further.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要的旋转矩阵，用于将任何向量v**绕水平轴逆时针旋转b度**。看起来很神秘？让我们进一步探讨。
- en: Properties of Rotation Matrix in R²
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R²中的旋转矩阵性质
- en: Let’s explore some special cases to justify the rotation matrix.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨一些特殊情况以证明旋转矩阵的合理性。
- en: 0-degree rotation
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0度旋转
- en: A 0-degree rotation means that the object or vector is not rotated at all; it
    stays in its original position and orientation. In terms of transformation matrices,
    a 0-degree rotation can be represented by the identity matrix. This result makes
    sense because a 0-degree rotation should not change the vector’s position or orientation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 0度旋转意味着物体或向量没有任何旋转；它保持在其原始位置和方向。就变换矩阵而言，0度旋转可以用单位矩阵表示。这一结果是合理的，因为0度旋转不应改变向量的位置或方向。
- en: '![](../Images/f9db3cc389bc724df7956deffa984d91.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f9db3cc389bc724df7956deffa984d91.png)'
- en: Rotation matrix with 0 degree
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 0度旋转矩阵
- en: 180-degree rotation
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 180度旋转
- en: A 180-degree rotation means that the object or vector is rotated half a circle
    from its original position. For a 2D vector, this rotation will flip the vector
    to the opposite quadrant, changing both its x and y components to their negatives.
    **This result makes sense because a 180-degree rotation should flip the vector
    to the opposite direction.** For instance, if you have a vector pointing straight
    up, a 180-degree rotation would flip it to point straight down.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 180度旋转意味着物体或向量从其原始位置旋转半圈。对于2D向量，这种旋转将向量翻转到相对象限，将其x和y分量都变为其负值。**这一结果是合理的，因为180度旋转应该将向量翻转到相反的方向。**
    例如，如果你有一个指向上方的向量，180度旋转将使它指向下方。
- en: '![](../Images/68d4ac9a2fefdaa9599b9deadb2ab8dc.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/68d4ac9a2fefdaa9599b9deadb2ab8dc.png)'
- en: First *β* degree, then -*β* degree rotation
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先旋转*β*度，然后旋转-*β*度
- en: When a vector undergoes a rotation by an angle ***β*** and then undergoes another
    rotation by an angle **-*β***, the two rotations effectively cancel each other
    out, resulting in the vector returning to its original position and orientation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个向量经历了***β***角度的旋转，然后经历了**-*β***角度的另一次旋转时，这两个旋转实际上会相互抵消，使向量返回到其原始位置和方向。
- en: 'Since there will be two matrix multiplication, one for **β** and the other
    for **-β** degree rotation, it is equivalent to multiply v by a matrix **A’**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于将进行两个矩阵乘法，一个用于**β**，另一个用于**-β**度旋转，这等同于将v乘以矩阵**A’**：
- en: '![](../Images/67b3d060b04359ff3c932b5d4ffd69fd.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/67b3d060b04359ff3c932b5d4ffd69fd.png)'
- en: When we calculate the **A’**, we end up with an identity matrix! So **A’ ⋅ v**
    is equal to **v** itself! The key for the calculations below is that **cosine
    is an even function and sine is an odd function**. So **cos(-b) = cos(b)**, and
    **sin(-b) = -sin(b):**
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们计算**A’**时，我们得到的是一个单位矩阵！所以**A’ ⋅ v**等于**v**本身！下面计算的关键是**余弦是偶函数，正弦是奇函数**。所以**cos(-b)
    = cos(b)**，并且**sin(-b) = -sin(b)**：
- en: '![](../Images/761d0d46694d5b43a6375fe140118974.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/761d0d46694d5b43a6375fe140118974.png)'
- en: Rotate b, then rotate -b degree
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 先旋转 b，然后旋转 -b 度
- en: What about R³ ?
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么 R³ 呢？
- en: The general concept of rotation using matrices can indeed be extended from 2D
    to 3D and even beyond, to higher-dimensional spaces.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用矩阵进行旋转的基本概念确实可以从 2D 扩展到 3D，甚至更高维度的空间。
- en: In 2D, a rotation matrix can be used to rotate a vector around the origin. The
    rotation matrix depends on the angle of rotation, and it transforms the original
    vector to a new position while preserving its length.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2D 中，可以使用旋转矩阵将向量绕原点旋转。旋转矩阵依赖于旋转角度，它将原始向量转换到一个新位置，同时保持其长度。
- en: '**When we move to 3D, the idea is similar, but we have to consider rotations
    around different axes.** In 3D space, you can rotate a vector around the x-axis,
    y-axis, or z-axis. For each type of rotation, there is a corresponding rotation
    matrix. Just like in 2D, the length of the vector is preserved during the rotation.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**当我们进入 3D 时，思想是类似的，但我们必须考虑绕不同轴的旋转。** 在 3D 空间中，你可以绕 x 轴、y 轴或 z 轴旋转向量。对于每种类型的旋转，都有一个对应的旋转矩阵。就像在
    2D 中一样，向量在旋转过程中长度保持不变。'
- en: 'Here’s a simplified breakdown:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简化的分解：
- en: 'Rotation around the x-axis: The y and z components of the vector change, but
    the x component stays the same.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕 x 轴旋转：向量的 y 和 z 分量会变化，但 x 分量保持不变。
- en: 'Rotation around the y-axis: The x and z components of the vector change, but
    the y component stays the same.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕 y 轴旋转：向量的 x 和 z 分量会变化，但 y 分量保持不变。
- en: 'Rotation around the z-axis: The x and y components of the vector change, but
    the z component stays the same.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕 z 轴旋转：向量的 x 和 y 分量会变化，但 z 分量保持不变。
- en: '**The rotation matrices for 3D rotations take into account the angle of rotation
    and the axis of rotation.** When you multiply a vector by one of these rotation
    matrices, you get a new vector that has been rotated around the specified axis
    by the specified angle.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**3D 旋转矩阵考虑了旋转角度和旋转轴。** 当你将一个向量与这些旋转矩阵之一相乘时，你会得到一个围绕指定轴旋转了指定角度的新向量。'
- en: 'The same logic applies: if you rotate a vector and then rotate it back by the
    same angle in the opposite direction (using the inverse rotation), you end up
    back at the original vector.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的逻辑适用：如果你旋转一个向量，然后再按相同角度的相反方向旋转它（使用逆旋转），你会回到原始向量。
- en: This idea can be extended to higher dimensions as well, though visualizing rotations
    becomes more complex as you move beyond 3D. In any dimension, the concept of using
    matrices to perform rotations and the properties of these rotations (such as preserving
    the length of the vector) remain consistent.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念也可以扩展到更高维度，尽管当你超出 3D 时，旋转的可视化变得更加复杂。在任何维度中，使用矩阵进行旋转的概念及这些旋转的性质（如保持向量的长度）仍然是一致的。
- en: '*Unless otherwise noted, all images are by the author.*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
