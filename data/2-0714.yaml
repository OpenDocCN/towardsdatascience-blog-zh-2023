- en: Deploy Your Time Series Forecasting Model with Streamlit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Streamlit部署您的时间序列预测模型
- en: 原文：[https://towardsdatascience.com/deploy-your-time-series-forecasting-model-with-streamlit-c3ce5a7edf19](https://towardsdatascience.com/deploy-your-time-series-forecasting-model-with-streamlit-c3ce5a7edf19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/deploy-your-time-series-forecasting-model-with-streamlit-c3ce5a7edf19](https://towardsdatascience.com/deploy-your-time-series-forecasting-model-with-streamlit-c3ce5a7edf19)
- en: A hands-on guide on building a web application to deploy your forecasting model
    using Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一份关于使用Python构建Web应用程序以部署预测模型的实用指南
- en: '[](https://medium.com/@marcopeixeiro?source=post_page-----c3ce5a7edf19--------------------------------)[![Marco
    Peixeiro](../Images/7cf0a81d87281d35ff47f51e3026a3e9.png)](https://medium.com/@marcopeixeiro?source=post_page-----c3ce5a7edf19--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c3ce5a7edf19--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c3ce5a7edf19--------------------------------)
    [Marco Peixeiro](https://medium.com/@marcopeixeiro?source=post_page-----c3ce5a7edf19--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcopeixeiro?source=post_page-----c3ce5a7edf19--------------------------------)[![Marco
    Peixeiro](../Images/7cf0a81d87281d35ff47f51e3026a3e9.png)](https://medium.com/@marcopeixeiro?source=post_page-----c3ce5a7edf19--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c3ce5a7edf19--------------------------------)[![数据科学之路](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c3ce5a7edf19--------------------------------)
    [Marco Peixeiro](https://medium.com/@marcopeixeiro?source=post_page-----c3ce5a7edf19--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c3ce5a7edf19--------------------------------)
    ·13 min read·Apr 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[数据科学之路](https://towardsdatascience.com/?source=post_page-----c3ce5a7edf19--------------------------------)
    ·13分钟阅读·2023年4月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/597cc6da68b8a31e827f4f2607f94c3d.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/597cc6da68b8a31e827f4f2607f94c3d.png)'
- en: Photo by [SpaceX](https://unsplash.com/@spacex?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[SpaceX](https://unsplash.com/@spacex?utm_source=medium&utm_medium=referral)提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上获取
- en: As data scientists, we often work in the experimentation phase. We work in notebooks
    and develop scripts to evaluate models, and it stops there.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，我们经常处于实验阶段。我们在笔记本中工作，开发脚本以评估模型，然后就停在那里。
- en: However, our work is never really done until the model is deployed. This crucial
    step brings us new challenges, as we have to think about error handling, and building
    an interface to interact with the model.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的工作永远不会真正完成，直到模型被部署。这个关键步骤带来了新的挑战，因为我们必须考虑错误处理和构建与模型互动的接口。
- en: 'This is where [Streamlit](https://streamlit.io/) comes in: it is a Python library
    that allows us to build data applications rapidly, since we only Python for both
    the modelling portion and building the user interface.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[Streamlit](https://streamlit.io/)的用武之地：它是一个Python库，允许我们快速构建数据应用程序，因为我们只需使用Python来进行建模部分和构建用户界面。
- en: While Streamlit is a great prototyping tool to quickly deploy models, it will
    probably not power high-traffic, full-fledged data applications. You should think
    of it as a way to add interactivity to your models and share your data science
    work with others.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Streamlit是一个很好的原型工具，可以快速部署模型，但它可能无法支持高流量的全面数据应用程序。你应该将其视为为模型添加互动性并与他人分享数据科学工作的方式。
- en: In this article, we will go through the portion of deploying a time series model
    using Streamlit. The full project is a multi-page application where we can both
    explore and forecast the data, but for this article, we focus only on the forecasting
    functionality.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨使用Streamlit部署时间序列模型的部分内容。完整项目是一个多页面应用程序，我们可以在其中探索和预测数据，但在这篇文章中，我们只关注预测功能。
- en: You can visit the [finished application](https://marcopeix-streamlit-population-canada-main-4rr347.streamlit.app/)
    and play around with it. Also, the full source code is available on [GitHub](https://github.com/marcopeix/streamlit-population-canada).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问[完成的应用程序](https://marcopeix-streamlit-population-canada-main-4rr347.streamlit.app/)并试用它。此外，完整的源代码可在[GitHub](https://github.com/marcopeix/streamlit-population-canada)上获取。
- en: '**Learn the latest time series analysis techniques with my** [**free time series
    cheat sheet**](https://www.datasciencewithmarco.com/pl/2147608294) **in Python!
    Get the implementation of statistical and deep learning techniques, all in Python
    and TensorFlow!**'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**通过我的** [**免费时间序列备忘单**](https://www.datasciencewithmarco.com/pl/2147608294)
    **在Python中学习最新的时间序列分析技术！获取统计和深度学习技术的实现，全部使用Python和TensorFlow！**'
- en: Let’s get started!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Objective
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标
- en: The objective of this application is to forecast the quarterly population in
    Canada. The dataset is taken from Statistics Canada, and spans Q3 of 1991 to Q1
    of 2023\. The original data can be found [here](https://www150.statcan.gc.ca/t1/tbl1/en/cv.action?pid=1710000901).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的目标是预测加拿大季度人口。数据集取自加拿大统计局，涵盖了1991年第三季度到2023年第一季度。原始数据可以在[这里](https://www150.statcan.gc.ca/t1/tbl1/en/cv.action?pid=1710000901)找到。
- en: Below is a sample of the dataset.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是数据集的一个样本。
- en: '![](../Images/70810e8af538acae05a808a43e422385.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70810e8af538acae05a808a43e422385.png)'
- en: Sample of the dataset used in the application. For each location, we have the
    quarterly population estimate. Image by the author.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中使用的数据集样本。对于每个位置，我们有季度人口估算。图像由作者提供。
- en: With this dataset, we have information on the population of the entire country,
    but also for each province and territory. This means that we can choose between
    multiple targets, which we must keep in mind when building the application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个数据集，我们可以获取整个国家的总人口信息，也可以获取每个省份和地区的人口信息。这意味着我们可以在多个目标之间进行选择，在构建应用程序时必须牢记这一点。
- en: Project structure
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: Since we are building an application that will deployed into production, the
    structure of the project matters greatly. Below is the structure that we use for
    this project.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在构建一个将部署到生产环境的应用程序，因此项目的结构非常重要。以下是我们为此项目使用的结构。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In our project folder, we have a data folder that contains the CSV file with
    the quarterly population estimates. Note that we will read the data from the GitHub
    URL, to avoid dealing with relative and absolute file paths.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目文件夹中，我们有一个数据文件夹，其中包含包含季度人口估算的CSV文件。请注意，我们将从GitHub URL读取数据，以避免处理相对和绝对文件路径的问题。
- en: Then, because we are building a multi-page application, we have a `pages` folder
    that will contain the script to build the interface and output the forecast, which
    is `forecast.py`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，因为我们正在构建一个多页面应用程序，我们有一个`pages`文件夹，其中包含构建界面和输出预测的脚本，即`forecast.py`。
- en: The main entry point to the application is controlled by the file `main.py`,
    but we will not cover it as it is not related to forecasting.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的主要入口点由文件`main.py`控制，但我们不会涉及它，因为它与预测无关。
- en: Finally, the file `requirements.txt` lists all the dependencies of the application
    to work properly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，文件`requirements.txt`列出了应用程序正常运行所需的所有依赖项。
- en: Application diagram
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序图
- en: Before we dive into the code, we must first determine how the application will
    work at a high-level to understand where each functionality comes into play.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，我们必须首先确定应用程序的高层次工作方式，以了解每个功能的作用。
- en: '![](../Images/1cf19fa265ad7d24358115777189f097.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1cf19fa265ad7d24358115777189f097.png)'
- en: Application diagram. Image by the author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序图。图像由作者提供。
- en: From the figure above, we see that the data has to be read and made available
    in the script.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中，我们可以看到数据需要被读取并在脚本中提供。
- en: Then, we add an option for the user to select a target and a horizon. We send
    that information to a function that will test different models and generate predictions
    using the best model only.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加了一个选项，供用户选择目标和时间范围。我们将这些信息发送到一个函数，该函数将测试不同的模型，并仅使用最佳模型生成预测。
- en: Then, the predictions are returned so that we can plot the forecast. Also, we
    return the evaluation metric, so that we can visualize it and identify what model
    was used.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，返回预测结果，以便我们可以绘制预测图。同时，我们返回评估指标，以便我们可以可视化它并确定使用了哪个模型。
- en: With the right project structure and an overall idea of what to build, we can
    now dive into the code and start building out our application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在有了正确的项目结构和整体构建思路之后，我们现在可以深入代码，开始构建我们的应用程序。
- en: Read the data
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取数据
- en: The first natural step is of course to read the data. Now, because this is part
    of a multi-page application we actually read the data in `main.py` and make it
    available in `pages/forecast.py`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步自然是读取数据。现在，由于这是多页面应用程序的一部分，我们实际上在`main.py`中读取数据，并在`pages/forecast.py`中提供数据。
- en: We start off by defining a function that will read the data. Notice how we read
    from a URL, which avoids having problems with file paths when deploying our application.
    For now, this is all standard code of how we would read a data in a notebook.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个读取数据的函数。注意我们从URL读取，这样在部署应用程序时可以避免文件路径的问题。现在，这只是标准代码，用于在笔记本中读取数据。
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice also the use of the decorator `@st.cache_data`. This tells Streamlit
    to cache the result of this function if the parameters do not change. That way,
    we do not have to rerun the function every time the user changes an input. This
    makes the application run much faster.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 同时注意装饰器`@st.cache_data`的使用。它告诉Streamlit如果参数不变就缓存此函数的结果。这样，用户每次更改输入时，我们就不必重新运行函数。这使得应用程序运行得更快。
- en: Then, we store the data in the session state. This is a way to store and persist
    data across multiple pages in Streamlit. That way, we can read the data in `main.py`
    and have access to it in `pages/forecast.py`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将数据存储在会话状态中。这是一种在Streamlit的多个页面之间存储和持久化数据的方法。这样，我们可以在`main.py`中读取数据，并在`pages/forecast.py`中访问这些数据。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It essentially works as a dictionary in which we can store important values
    that we want to access from different pages.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它本质上充当一个字典，我们可以在其中存储我们希望从不同页面访问的重要值。
- en: That way, in `pages/forecast.py`we can then access the data with
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，在`pages/forecast.py`中，我们可以通过
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even though we are in another file, we do not have to repeat the function to
    read the data, we can simply access it through the session state.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们在另一个文件中，我们也不必重复读取数据的函数，我们可以通过会话状态直接访问它。
- en: Build the interface
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建界面
- en: Now that we have access to our data, let’s build out the interface to allow
    the user to select a target and a forecast horizon.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以访问数据了，让我们构建界面以允许用户选择目标和预测期。
- en: First, let’s allow the user to select a target. In our dataset, the target corresponds
    to a location, whether it is the entire country, a province or a territory. If
    you recall the dataset sample shown above, the list of possible targets is simply
    the name of the columns in the dataset.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们允许用户选择一个目标。在我们的数据集中，目标对应于一个位置，无论是整个国家、省份还是地区。如果你还记得上面显示的数据集示例，可能的目标列表就是数据集中的列名。
- en: So, let’s create 2 columns, so the user can select the target and the horizon
    on the same line.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们创建两个列，以便用户可以在同一行上选择目标和预测期。
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, in the first column, we will create a dropdown list that has all the possible
    targets in the dataset.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第一个列中，我们将创建一个下拉列表，其中包含数据集中所有可能的目标。
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the code block above, the first parameter is a label for the input, and then
    we pass the list of possible values. By default, the first value of the list will
    be selected.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码块中，第一个参数是输入的标签，然后我们传递可能值的列表。默认情况下，列表中的第一个值将被选中。
- en: Then, to set the forecast horizon, let’s use a slider. Here, I will restrict
    the horizon from 1 to 16 quarters into the future, but feel free to play around
    with those numbers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了设置预测期，让我们使用滑块。在这里，我将预测期限制在未来1到16个季度之间，但你可以随意调整这些数字。
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, the code above is pretty self-explanatory: we pass in a label
    for the input element, specify the minimum value, the maximum value, the default
    value, and of course the increment step.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，上面的代码非常直观：我们传入输入元素的标签，指定最小值、最大值、默认值，以及增量步骤。
- en: 'At this point, the interface looks like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，界面看起来是这样的：
- en: '![](../Images/aa22b4acfb8795612313838fb2e8b8e6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa22b4acfb8795612313838fb2e8b8e6.png)'
- en: Application interface up until now. Image by the author.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止的应用程序界面。图片由作者提供。
- en: Great!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！
- en: Now, let’s add a button so that we only run the function to return the predictions
    once the user has set both the target and the horizon. Otherwise, Streamlit runs
    the entire script as soon as a change is registered.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个按钮，这样只有当用户设置了目标和预测期后，我们才运行函数以返回预测结果。否则，Streamlit会在每次检测到变化时运行整个脚本。
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And we get this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们得到这个：
- en: '![](../Images/7a518fec3ff9f314b7173c642113718b.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7a518fec3ff9f314b7173c642113718b.png)'
- en: Same as before, but with a button. Image by the author.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 和以前一样，不过添加了一个按钮。图片由作者提供。
- en: Alright, the interface is in place, now let’s code the logic to select the best
    model and generate predictions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，界面已经完成，现在让我们编写逻辑来选择最佳模型并生成预测结果。
- en: Generate predictions
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成预测
- en: Once the user has set the target and horizon, we want to test different models
    so that we get the best forecasts possible according to the target and horizon.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户设置了目标和预测期，我们希望测试不同的模型，以便根据目标和预测期获得最佳的预测结果。
- en: Then, it would be useful to plot the predictions and also display the evaluation
    metrics that justify the choice of the model. This is what we implement in this
    section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，绘制预测结果并显示评估指标以证明模型选择是有用的。这是我们在本节中实现的功能。
- en: Procedure for model selection
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型选择过程
- en: 'For this application, we will test three different models:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们将测试三种不同的模型：
- en: '[Autoregressive model](https://www.datasciencewithmarco.com/blog/time-series-forecasting-with-autoregressive-processes)'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[自回归模型](https://www.datasciencewithmarco.com/blog/time-series-forecasting-with-autoregressive-processes)'
- en: '[Double exponential smoothing](/the-complete-guide-to-time-series-analysis-and-forecasting-70d476bfe775)'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[双重指数平滑](/the-complete-guide-to-time-series-analysis-and-forecasting-70d476bfe775)'
- en: '[Theta model](https://www.datasciencewithmarco.com/blog/theta-model-for-time-series-forecasting)'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Theta 模型](https://www.datasciencewithmarco.com/blog/theta-model-for-time-series-forecasting)'
- en: Detailing each model would be too long, so I have linked to other articles if
    you would like to explore each one of them in detail.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 详细介绍每个模型会太长，因此如果您想详细了解每个模型，我已链接到其他文章。
- en: Now, for each model, we will train it on a training set and evaluate it on a
    test set. The test set will contain the last 32 timesteps of the data, and the
    rest will be for training.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个模型，我们将在训练集上训练它，并在测试集上进行评估。测试集将包含数据的最后 32 个时间步长，其余部分将用于训练。
- en: Also, we will make rolling predictions, such as to simulate the process of updating
    the model with new data and making new predictions. This means that if the horizon
    is set to 2 timesteps, then the model will forecast 2 future timesteps at a time,
    until it has predicted the entire test set, as shown below.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将进行滚动预测，例如模拟使用新数据更新模型并进行新预测的过程。这意味着如果时间范围设置为 2 个时间步长，那么模型将一次预测 2 个未来时间步长，直到预测完所有测试集，如下所示。
- en: '![](../Images/d687c88ae4bd1e3ec07f2d1da57dc83d.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d687c88ae4bd1e3ec07f2d1da57dc83d.png)'
- en: Visualizing rolling forecasts. The model is trained on an initial training set
    and makes predictions. Then, the training is updated and the model makes another
    of set predictions until the entire test set is covered. Image by the author.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化滚动预测。模型在初始训练集上进行训练并进行预测。然后，更新训练集，模型进行另一组预测，直到覆盖整个测试集。图片由作者提供。
- en: All of this logic is translated into the code block below.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些逻辑都转化为下面的代码块。
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the code block above, we simply take each model, train it on the initial
    training set, and complete the loop by updating the training set and making predictions
    until we have predictions for the entire test set.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码块中，我们简单地对每个模型进行训练，使用初始训练集，并通过更新训练集并进行预测，直到我们对整个测试集有预测结果。
- en: Evaluation metric
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估指标
- en: 'To select the best model, we use the symmetric mean absolute percentage error
    or sMAPE. The reason for that is that the MAPE tends to favor models that *under-forecast*.
    The sMAPE fixes that problem and is defined as:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了选择最佳模型，我们使用对称平均绝对百分比误差或 sMAPE。原因是 MAPE 倾向于偏向 *低估* 的模型。sMAPE 修复了这个问题，其定义为：
- en: '![](../Images/26ad5e44c6937dc76a6f0ff215f170fe.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26ad5e44c6937dc76a6f0ff215f170fe.png)'
- en: Formula for the sMAPE. Image by the author.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: sMAPE 的公式。图片由作者提供。
- en: 'So, let’s define a function to calculate the sMAPE:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们定义一个计算 sMAPE 的函数：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Select the best model
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择最佳模型
- en: Let’s get started on the function that will run the model selection procedure.
    It takes in the dataset, the target and horizon, and we start off by defining
    the training and test sets.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写运行模型选择过程的函数。它接受数据集、目标和时间范围，我们首先定义训练集和测试集。
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Then, we use our `rolling_predictions` function to generate the predictions
    over the test set.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们使用我们的 `rolling_predictions` 函数在测试集上生成预测。
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have all the predictions for the entire test set, we can evaluate
    each model using the sMAPE.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经拥有整个测试集的所有预测结果，我们可以使用 sMAPE 来评估每个模型。
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, the best model is simply the one that achieves the lowest sMAPE.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，最佳模型就是获得最低 sMAPE 的模型。
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, we can simply use the best model to get the predictions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以简单地使用最佳模型来获取预测结果。
- en: Make predictions
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行预测
- en: Depending on which model achieved the lowest sMAPE, we will train it on the
    entire dataset to generate out-of-sample predictions and actually predict the
    future.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据哪个模型获得了最低的 sMAPE，我们将对其进行全面数据集训练，以生成样本外预测并实际预测未来。
- en: This can be done with simple if statements.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过简单的 if 语句完成。
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then, our `test_and_predict` function will return the predictions and the sMAPE
    for each model. That way, we can visualize both the predictions and the evaluation
    metric for each model.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的 `test_and_predict` 函数将返回每个模型的预测结果和 sMAPE。这样，我们可以可视化每个模型的预测和评估指标。
- en: The full function is shown below.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的函数如下所示。
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Get predictions when the button is clicked
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击按钮时获取预测
- en: We have the interface and we have all the logic to test and generate predictions.
    Now, we only have to connect them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了界面，并且有了测试和生成预测的所有逻辑。现在，我们只需要将它们连接起来。
- en: We can detect if the button was clicked with an if statement, as Streamlit return
    `True` when the button is clicked.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 if 语句检测按钮是否被点击，因为 Streamlit 在按钮被点击时返回 `True`。
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that in the code block above,`target`, and `horizon` are variables defined
    earlier in this article that capture the information set by the user using a dropdown
    menu and a slider respectively.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的代码块中，`target` 和 `horizon` 是本文中早些时候定义的变量，它们分别捕获了用户通过下拉菜单和滑块设置的信息。
- en: 'Then, inside the if statement, we generate two plots: one for the forecast
    and the other for the evaluation metric.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 if 语句内部，我们生成两个图：一个用于预测，另一个用于评估指标。
- en: Plotting in Streamlit is just like using `matplotlib` in a Jupyter notebook.
    We simply render the plot using the `pyplot` method.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Streamlit 中绘图就像在 Jupyter notebook 中使用 `matplotlib` 一样。我们只是使用 `pyplot` 方法渲染图表。
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result of the code block above is this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码块的结果如下：
- en: '![](../Images/2b121c44ff8cf4dce0d6d07bcfa4ea7d.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b121c44ff8cf4dce0d6d07bcfa4ea7d.png)'
- en: Showing the predictions from the best model. Image by the author.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 显示最佳模型的预测结果。图片由作者提供。
- en: As you can see, the user selected Canada as the target and a horizon of 16 quarters.
    After clicking the button, the plot is rendered.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，用户选择了加拿大作为目标，并选择了 16 个季度的预测期。点击按钮后，图表被渲染出来。
- en: Then, let’s plot a bar plot to see which model performed best during the testing
    procedure.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们绘制一个条形图，以查看哪个模型在测试过程中表现最佳。
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This gives the following result:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出如下结果：
- en: '![](../Images/75e3b12ffd894e2b300b40f29b46daef.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75e3b12ffd894e2b300b40f29b46daef.png)'
- en: Showing the sMAPE of each model. Here, the AR model achieved the lowest sMAPE
    when tested for predicting the population of Canada on a horizon of 16 quarters.
    Image by the author.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 显示每个模型的 sMAPE。在这里，AR 模型在测试中实现了最低的 sMAPE，用于预测未来 16 个季度的加拿大人口。图片由作者提供。
- en: From the figure above, we see that the AR model is the best model, as it achieved
    the lowest sMAPE, specifically for predicting the quarterly population of Canada
    over the next 16 quarters. Therefore, the AR model was used to make the out-of-sample
    predictions that we see in the line plot above.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中，我们看到 AR 模型是最佳模型，因为它实现了最低的 sMAPE，特别是在预测未来 16 个季度的加拿大季度人口时。因此，AR 模型被用来进行我们在上图中看到的超出样本的预测。
- en: Awesome, everything works great on our local machine, so let’s actually deploy
    this and share it with the world!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，一切在本地机器上都运作良好，现在让我们实际部署它，并与全世界分享吧！
- en: Deploy to production
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到生产环境
- en: The easiest (and free) way of deploying a Streamlit application is by using
    the [Streamlit Community Cloud](https://streamlit.io/cloud).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Streamlit 应用程序最简单（且免费的）方式是使用 [Streamlit Community Cloud](https://streamlit.io/cloud)。
- en: 'To deploy an application, you need:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署一个应用程序，你需要：
- en: A GitHub account to host the source code of your application
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于托管应用程序源代码的 GitHub 帐户
- en: A Streamlit Community Cloud account (free)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Streamlit Community Cloud 帐户（免费）
- en: A `requirements.txt` file to list the dependencies
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `requirements.txt` 文件来列出依赖项
- en: List the dependencies
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出依赖项
- en: The hardest of deploying a Streamlit application is actually listing the dependencies,
    especially if your work on a Windows machine with Anaconda (like I do).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Streamlit 应用程序最困难的部分实际上是列出依赖项，特别是如果你在 Windows 机器上使用 Anaconda（像我一样）。
- en: If you are on Linux, then it is as simple as `pip freeze > requirements.txt`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Linux，那么 `pip freeze > requirements.txt` 就非常简单。
- en: At the time of writing, the documentation of Streamlit states that they support
    the `environment.yml` file that you can generate with Anaconda, but I found that
    it breaks the deployment process. So, you need to resort to the .txt file.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写时，Streamlit 的文档表明他们支持可以通过 Anaconda 生成的 `environment.yml` 文件，但我发现这会破坏部署过程。所以，你需要使用
    .txt 文件。
- en: With Anaconda, run `conda list -e > requirements.txt`. However, your file will
    not be formatted correctly and it will have a lot of mistakes, that you need to
    fix by hand.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Anaconda，运行 `conda list -e > requirements.txt`。然而，你的文件将无法正确格式化，并且会有很多错误，需要你手动修复。
- en: 'A simple way of fixing it is to get rid of everything but the packages that
    you actually import at the beginning of the your script. In our case, that would
    be:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一个简单方法是去除脚本开头未实际导入的所有包。在我们的案例中，这些包是：
- en: pandas
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pandas
- en: numpy
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy
- en: matplotlib
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: matplotlib
- en: statsmodels
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: statsmodels
- en: Everything else in your file can be deleted.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的其他内容可以删除。
- en: Also, it is very important to delete `streamlit` from your dependencies, as
    this will break the deployment process. You can see what your file should look
    like [here](https://github.com/marcopeix/streamlit-population-canada/blob/master/requirements.txt).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，删除`streamlit`依赖项非常重要，因为这会破坏部署过程。你可以查看你的文件应该是什么样子的[这里](https://github.com/marcopeix/streamlit-population-canada/blob/master/requirements.txt)。
- en: Launch to production
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上线生产
- en: Once you have the dependencies listed, make sure that all the code is in a GitHub
    repository.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦列出了依赖项，请确保所有代码都在GitHub仓库中。
- en: Then, in your Streamlit Community Cloud account, click “New app”.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你的Streamlit Community Cloud账户中，点击“新应用”。
- en: '![](../Images/0dc0db43b8784199b3e0f2be618219ec.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0dc0db43b8784199b3e0f2be618219ec.png)'
- en: Streamlit Community Cloud interace. Image by the author.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit Community Cloud界面。图片由作者提供。
- en: Then, simply specify the URL for the repository, the branch (should be master)
    and the main file path. Usually, you have a main Python script at the root of
    your project.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需指定仓库的URL、分支（应为master）和主文件路径。通常，项目根目录下有一个主Python脚本。
- en: '![](../Images/a9f2307f350fad8bce09e501a7cbf55c.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a9f2307f350fad8bce09e501a7cbf55c.png)'
- en: Form to deploy a Streamlit application. Image by the author.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 部署Streamlit应用程序的表单。图片由作者提供。
- en: Then, simply click “Deploy” and that’s it! You will then have a link that you
    can use to share your application with everyone!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需点击“部署”，就完成了！你将获得一个链接，可以用来与大家分享你的应用！
- en: Again, if you want to see the full final result, you check the application [here](https://marcopeix-streamlit-population-canada-main-4rr347.streamlit.app/)!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看最终的完整结果，可以在[这里](https://marcopeix-streamlit-population-canada-main-4rr347.streamlit.app/)查看应用！
- en: Conclusion
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Deploying a model using Streamlit is intuitive and straightforward. Using only
    Python, we managed to create an interactive web interface that can cache data,
    read user input, run a model and generate predictions for the future!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Streamlit部署模型直观且简单。仅使用Python，我们创建了一个交互式Web界面，可以缓存数据、读取用户输入、运行模型并生成未来的预测！
- en: I hope that this article inspires you to dig further into Streamlit and make
    a little application of your own!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能激励你进一步探究Streamlit，并制作你自己的小应用！
- en: 'If you want to master time series forecasting, then checkout my course: [Applied
    Time Series Forecasting in Python](https://www.datasciencewithmarco.com/offers/zTAs2hi6/checkout?coupon_code=ATSFP10).
    This is the only course that implements statistical, deep learning, and state-of-the-art
    models in 15 guided hands-on projects.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想掌握时间序列预测，那么查看我的课程：[Python中的应用时间序列预测](https://www.datasciencewithmarco.com/offers/zTAs2hi6/checkout?coupon_code=ATSFP10)。这是唯一一个在15个指导项目中实现统计学、深度学习和最先进模型的课程。
- en: Cheers 🍻
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 干杯 🍻
- en: Support me
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持我
- en: Enjoying my work? Show your support with [Buy me a coffee](http://buymeacoffee.com/dswm),
    a simple way for you to encourage me, and I get to enjoy a cup of coffee! If you
    feel like it, just click the button below 👇
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢我的工作吗？通过[买杯咖啡](http://buymeacoffee.com/dswm)来支持我，这是鼓励我的一种简单方式，而我可以享受一杯咖啡！如果你愿意，只需点击下面的按钮
    👇
- en: '[![](../Images/7ad9438bd50b1698fdd722fa6661b16c.png)](http://buymeacoffee.com/dswm)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/7ad9438bd50b1698fdd722fa6661b16c.png)](http://buymeacoffee.com/dswm)'
