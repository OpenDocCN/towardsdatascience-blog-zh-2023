- en: Introduction of Four Types of Item Similarity Measures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 四种项目相似性度量的介绍
- en: 原文：[https://towardsdatascience.com/introduction-of-four-types-of-item-similarity-measures-e0aea70da335](https://towardsdatascience.com/introduction-of-four-types-of-item-similarity-measures-e0aea70da335)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/introduction-of-four-types-of-item-similarity-measures-e0aea70da335](https://towardsdatascience.com/introduction-of-four-types-of-item-similarity-measures-e0aea70da335)
- en: Data Mining
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据挖掘
- en: Covers how to choose the similarity measure when item embeddings are available
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍如何选择项目嵌入可用时的相似性度量
- en: '[](https://medium.com/@jhwang1992m?source=post_page-----e0aea70da335--------------------------------)[![Jiahui
    Wang](../Images/91350774d661092f429d1b0591af95f4.png)](https://medium.com/@jhwang1992m?source=post_page-----e0aea70da335--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e0aea70da335--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e0aea70da335--------------------------------)
    [Jiahui Wang](https://medium.com/@jhwang1992m?source=post_page-----e0aea70da335--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jhwang1992m?source=post_page-----e0aea70da335--------------------------------)[![Jiahui
    Wang](../Images/91350774d661092f429d1b0591af95f4.png)](https://medium.com/@jhwang1992m?source=post_page-----e0aea70da335--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e0aea70da335--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e0aea70da335--------------------------------)
    [Jiahui Wang](https://medium.com/@jhwang1992m?source=post_page-----e0aea70da335--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e0aea70da335--------------------------------)
    ·5 min read·Feb 17, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e0aea70da335--------------------------------)
    ·阅读时间5分钟·2023年2月17日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b75c9c4e4fd412a9e5b9ad5ec3a51357.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b75c9c4e4fd412a9e5b9ad5ec3a51357.png)'
- en: Photo by [James Yarema](https://unsplash.com/@jamesyarema?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [James Yarema](https://unsplash.com/@jamesyarema?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Recommendation algorithms are applied everywhere in our daily lives, from the
    order of videos that appear on our Youtube homepage, to the arrangement of item
    shelves in Walmart. These algorithms learn the potential preferences of the users
    and recommend the most relevant items to the users. To achieve this, we need to
    describe the users and items in terms of numerical vectors, so that the algorithms
    can measure the user similarity and item similarity to make further recommendations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐算法在我们日常生活中无处不在，从我们 Youtube 首页上出现的视频顺序，到沃尔玛商品货架的排列。这些算法学习用户的潜在偏好，并向用户推荐最相关的项目。为实现这一点，我们需要用数值向量来描述用户和项目，以便算法能够测量用户相似性和项目相似性，从而进行进一步的推荐。
- en: 'There are two common methods to learn the numerical vector representations
    of the users and items: [content-based filtering and collaborative filtering](https://developers.google.com/machine-learning/recommendation/overview/candidate-generation).
    In content-based filtering, vector representations of the items are learnt by
    manually crafting features based on the expert knowledge of the items. Let’s take
    the mobile apps for example, each app on Google Play will have an app name, a
    category and some text description provided by the developers. Then expert knowledge
    can be applied to extract features from these information to build vector representation
    of the apps. The advantage of content-based filtering is that it does not rely
    on existing user-item data. In contrast, collaborative filtering does not require
    expert knowledge of the items and purely relies on the existing user-item data.
    When it comes to collaborative filtering, data speaks for itself. As long as we
    have enough user-item data, user and item representations can be extracted by
    using matrix factorization.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 学习用户和项目的数值向量表示有两种常见的方法：[基于内容的过滤和协同过滤](https://developers.google.com/machine-learning/recommendation/overview/candidate-generation)。在基于内容的过滤中，通过根据项目的专家知识手动构建特征来学习项目的向量表示。以移动应用为例，每个在
    Google Play 上的应用都有一个应用名称、一个类别和开发者提供的一些文本描述。然后可以应用专家知识从这些信息中提取特征，以构建应用的向量表示。基于内容的过滤的优势在于它不依赖于现有的用户-项目数据。相反，协同过滤不需要对项目的专家知识，完全依赖现有的用户-项目数据。当涉及到协同过滤时，数据本身会说话。只要我们拥有足够的用户-项目数据，就可以通过矩阵分解来提取用户和项目的表示。
- en: After getting the numerical vector representations of the items, the next task
    is to measure similarities between the items to make recommendation. In this post,
    we will focus on the various similarity measures and discuss how to choose the
    right similarity measure. Meanwhile, Spark code examples on how to calculate the
    similarities will be provided, as recommendation algorithms are usually applied
    on big data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得项目的数值向量表示后，下一任务是测量项目之间的相似度以进行推荐。在这篇文章中，我们将关注各种相似度度量，并讨论如何选择合适的相似度度量。同时，将提供Spark代码示例，因推荐算法通常应用于大数据。
- en: Without further ado, let’s get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 言归正传，让我们开始吧！
- en: 1\. Introduction on the Example Data
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 示例数据介绍
- en: In this post, we will study the app similarities by analysing the installed
    app lists of a large number of users. Suppose we have m users with a total number
    of n apps installed, then we can construct a user-item matrix of m×n. Unlike the
    collaborative filtering method, which will learn a low dimensional representation
    of the users and the items, in this example, we will directly use the m dimensional
    representation for each app. Collaborative filtering learns low dimensional representations
    of the users and items to do quick calculation for real-time recommendation tasks,
    but here we are focused on demonstrate how to calculate similarities after we
    get the numerical vector representations. Thus, we simplify the process to get
    the item vectors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将通过分析大量用户的已安装应用列表来研究应用相似度。假设我们有m个用户，总共安装了n个应用，那么我们可以构建一个m×n的用户-项目矩阵。与协同过滤方法不同，协同过滤方法将学习用户和项目的低维表示，以进行实时推荐任务的快速计算，但在这个示例中，我们将直接使用每个应用的m维表示。协同过滤学习用户和项目的低维表示，以进行实时推荐任务的快速计算，但这里我们专注于演示如何在获得数值向量表示后计算相似度。因此，我们简化了获取项目向量的过程。
- en: 'Furthermore, for demonstration purpose, we will only use a dummy example of
    4 users and 4 apps, which can be generated with the code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了演示目的，我们将仅使用一个包含4个用户和4个应用的虚拟示例，该示例可以通过以下代码生成：
- en: Code to generate the installed app list example
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 生成已安装应用列表示例的代码
- en: '![](../Images/e9977b1853375ca690ab610488ecafc8.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9977b1853375ca690ab610488ecafc8.png)'
- en: Example of the installed app list
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装应用列表示例
- en: 'The dataframe is then converted into rows of install list for each user:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 数据帧随后被转换为每个用户的安装列表行：
- en: Code to convert the installed app list to userid as key
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将已安装应用列表转换为userid作为键的代码
- en: '![](../Images/d4b7435c0d7504638b279f24c9339497.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4b7435c0d7504638b279f24c9339497.png)'
- en: Results of transformed installed app list
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后的已安装应用列表结果
- en: 2\. Various Similarity Measures
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 各种相似度度量
- en: 'The calculation of the various similarity measures relies on two common statistical
    results: cosine similarity of the app pairs and Euclidean magnitudes of the app
    vectors, which can be calculated as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 各种相似度度量的计算依赖于两个常见的统计结果：应用对的余弦相似度和应用向量的欧几里得量级，这些可以计算如下：
- en: Code of generating cosine similarity and Euclidean magnitudes of app pairs
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 生成应用对的余弦相似度和欧几里得量级的代码
- en: '![](../Images/f0911d966499749e0333c10a595ba293.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0911d966499749e0333c10a595ba293.png)'
- en: Result of cosine similarity and Euclidean magnitudes of app pairs
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应用对的余弦相似度和欧几里得量级结果
- en: 2.1 Cosine Similarity
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 余弦相似度
- en: Cosine similarity measures the angle between two vectors. It can be easily calculated
    by calling the Spark’s native function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 余弦相似度衡量两个向量之间的角度。可以通过调用Spark的原生函数轻松计算。
- en: '![](../Images/76408abd15063f085d7bba3ff4725c09.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76408abd15063f085d7bba3ff4725c09.png)'
- en: Equation of cosine similarity
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 余弦相似度公式
- en: 2.2 Dot Product
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 点积
- en: Dot product is cosine similarity multiplied by the euclidean magnitudes of the
    two vectors. It can be understood as the projection of one vector on the other
    vector. The euclidean magnitude of a vector measures the popularity of the app
    among the users. When more users install an app, the euclidean magnitude of this
    app will become larger. Thus, unlike cosine similarity, dot product is affected
    by the popularity of the two apps. Dot product of a popular app and an unpopular
    app will be small, as if we imagine when the short vector is projected on the
    long vector, the projection length won’t be long. Thus, on top of the cosine similarity,
    dot product takes consideration of the popularity of the two apps.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点积是余弦相似度乘以两个向量的欧几里得范数。它可以理解为一个向量在另一个向量上的投影。一个向量的欧几里得范数衡量了该应用在用户中的受欢迎程度。当更多用户安装一个应用时，该应用的欧几里得范数将变大。因此，与余弦相似度不同，点积受两个应用的受欢迎程度的影响。一个受欢迎的应用和一个不受欢迎的应用的点积会很小，就像我们想象短向量在长向量上的投影，投影长度不会很长。因此，在余弦相似度的基础上，点积考虑了两个应用的受欢迎程度。
- en: Code of generating dot product
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 生成点积的代码
- en: 2.3 Jaccard Similarity
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 Jaccard 相似度
- en: Jaccard similarity is the intersaction of the user sets divided by the union
    of the user sets who install the two apps. The intersaction of the user sets measures
    the similarity of the two apps, while the union of the user sets measures the
    diversity of the two apps. In this sense, we can consider Jaccard similarity as
    a measurement that is normalized by the diversity of the two apps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Jaccard 相似度是用户集合的交集除以安装两个应用的用户集合的并集。用户集合的交集衡量了两个应用的相似度，而用户集合的并集衡量了两个应用的多样性。从这个意义上讲，我们可以将
    Jaccard 相似度视为一个以两个应用的多样性为标准化的度量。
- en: '![](../Images/0b60d05bf6691575a86e12200379a647.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b60d05bf6691575a86e12200379a647.png)'
- en: Illustration of Jaccard similarity
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Jaccard 相似度的说明
- en: 'By using the euclidean magnitudes of two vectors and the calculated dot product,
    Jaccard similarity can be easily calculated:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用两个向量的欧几里得范数和计算出的点积，可以轻松计算 Jaccard 相似度：
- en: Code to generate Jaccard similarity
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 Jaccard 相似度的代码
- en: 2.4 Conditional Probability Lift
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 条件概率提升
- en: Conditional probability lift measures to what extent the installment of app
    B helps with the installment of app A.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 条件概率提升衡量了应用 B 的安装在多大程度上有助于应用 A 的安装。
- en: '![](../Images/a88cade78c5db93568968a1d8662a78d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a88cade78c5db93568968a1d8662a78d.png)'
- en: Equation of conditional probability lift
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 条件概率提升的方程
- en: By using the Euclidean magnitudes of the two vectors, conditional probability
    can be easily calculated.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用两个向量的欧几里得范数，可以轻松计算条件概率。
- en: Code to calculate conditional probability lift
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 计算条件概率提升的代码
- en: After mapping back the app_id, the final results can be obtained.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 映射回app_id后，可以得到最终结果。
- en: Code to merge the four similartiy results
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 合并四个相似度结果的代码
- en: '![](../Images/67f81211645142cec1034a77cb5c80f4.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/67f81211645142cec1034a77cb5c80f4.png)'
- en: Merged similarity results
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 合并的相似度结果
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this post, we covered four types of similarity measures on the embedding,
    namely cosine similarity, dot product, Jaccard similarity, and conditional probability
    lift. Depending on the definition of embedding similarity, we can choose to use
    the most appropriate measure.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了嵌入中的四种相似度度量，即余弦相似度、点积、Jaccard 相似度和条件概率提升。根据嵌入相似度的定义，我们可以选择使用最合适的度量。
