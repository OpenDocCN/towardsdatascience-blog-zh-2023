- en: Mastering Iterators and Generators in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握 Python 中的迭代器和生成器
- en: 原文：[https://towardsdatascience.com/mastering-iterators-and-generators-in-python-ca30939d962](https://towardsdatascience.com/mastering-iterators-and-generators-in-python-ca30939d962)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/mastering-iterators-and-generators-in-python-ca30939d962](https://towardsdatascience.com/mastering-iterators-and-generators-in-python-ca30939d962)
- en: Python for AI Engineers and Data Scientists
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 为 AI 工程师和数据科学家
- en: Create Custom Iterators and Generators for Efficient Data Processing
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义迭代器和生成器以实现高效的数据处理
- en: '[](https://jvision.medium.com/?source=post_page-----ca30939d962--------------------------------)[![Joseph
    Robinson, Ph.D.](../Images/3117b65a4e10752724585d3457343695.png)](https://jvision.medium.com/?source=post_page-----ca30939d962--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ca30939d962--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ca30939d962--------------------------------)
    [Joseph Robinson, Ph.D.](https://jvision.medium.com/?source=post_page-----ca30939d962--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://jvision.medium.com/?source=post_page-----ca30939d962--------------------------------)[![Joseph
    Robinson, Ph.D.](../Images/3117b65a4e10752724585d3457343695.png)](https://jvision.medium.com/?source=post_page-----ca30939d962--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ca30939d962--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ca30939d962--------------------------------)
    [Joseph Robinson, Ph.D.](https://jvision.medium.com/?source=post_page-----ca30939d962--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ca30939d962--------------------------------)
    ·11 min read·Jan 17, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ca30939d962--------------------------------)
    ·11 分钟阅读·2023年1月17日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8c930dd3fe4ded63beb436fb0128f391.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c930dd3fe4ded63beb436fb0128f391.png)'
- en: Visual created by the author.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉效果由作者创建。
- en: This blog post delves into the world of iterators and generators in Python,
    providing an in-depth guide on how to use them to optimize your code and improve
    the performance and efficiency of your programs. The post covers the concepts
    of iterators and generators, including how they work and how to create custom
    them for specific use cases. The blog also explores advanced techniques for combining
    iterators and generators to achieve specific functionality and create complex
    data processing pipelines. Finally, we review a sample data loader in Keras used
    to train a deep network. With this guide, you will learn how to master the art
    of iterator and generator programming in Python and take your data processing
    capabilities to the next level.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客文章深入探讨了 Python 中迭代器和生成器的世界，提供了如何使用它们来优化代码并提高程序性能和效率的详细指南。文章涵盖了迭代器和生成器的概念，包括它们的工作原理以及如何为特定用例创建自定义迭代器和生成器。博客还探讨了结合迭代器和生成器的高级技术，以实现特定功能并创建复杂的数据处理管道。最后，我们回顾了在
    Keras 中用于训练深度网络的示例数据加载器。通过本指南，你将学习如何掌握 Python 中迭代器和生成器编程的艺术，并将数据处理能力提升到一个新的水平。
- en: Table of Contents
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: · [Introduction](#62e9)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: · [介绍](#62e9)
- en: · [Understanding Iterators](#1957)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: · [理解迭代器](#1957)
- en: · [Creating Custom Iterators](#6fa2)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: · [创建自定义迭代器](#6fa2)
- en: · [Understanding Generators](#5e47)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: · [理解生成器](#5e47)
- en: · [Creating Custom Generators](#39db)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: · [创建自定义生成器](#39db)
- en: · [Combining Iterators and Generators](#2adc)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: · [组合迭代器和生成器](#2adc)
- en: · [Iterators and Generators for Deep Learning](#061e)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: · [深度学习中的迭代器和生成器](#061e)
- en: · [Conclusion](#d126)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: · [结论](#d126)
- en: · [Additional Resources](#94dd)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: · [附加资源](#94dd)
- en: · [Contact](#d304)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: · [联系](#d304)
- en: Introduction
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Python is a versatile and powerful programming language that offers a wide range
    of features for developers to work with. One of these features is the ability
    to create and use iterators and generators. Understanding and mastering the concepts
    of iterators and generators in Python can significantly enhance your coding skills
    and improve the performance of your programs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种多功能且强大的编程语言，提供了多种开发者可以使用的特性。其中之一就是创建和使用迭代器和生成器的能力。理解并掌握 Python 中迭代器和生成器的概念可以显著提升你的编码技能，并改善程序的性能。
- en: Iterators are objects that can be iterated (looped) upon. They represent a data
    stream, and they implement the iterator protocol, which consists of the methods
    `iter()` and `next()`. On the other hand, generators are a type of iterator that
    allows you to declare a function that behaves like an iterator. They use the yield
    statement to return data and are a more memory-efficient way of working with large
    data sets.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器是可以被迭代（循环）的对象。它们代表一个数据流，并实现了迭代器协议，该协议包含 `iter()` 和 `next()` 方法。另一方面，生成器是一种迭代器，允许你声明一个像迭代器一样工作的函数。它们使用
    yield 语句返回数据，并且是一种处理大型数据集时更节省内存的方式。
- en: This blog post will delve into Python's world of iterators and generators. We
    will explore the concepts of iterators and generators and how they work under
    the hood. We will also cover how to create custom iterators and generators and
    look at advanced techniques for combining them to achieve specific functionality
    in your programs. By the end of this post, you will have a solid understanding
    of how to use iterators and generators in Python to write efficient and effective
    code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客文章将深入探讨 Python 的迭代器和生成器世界。我们将探讨迭代器和生成器的概念以及它们在底层的工作原理。我们还将介绍如何创建自定义迭代器和生成器，并查看如何将它们结合起来以在程序中实现特定功能的高级技巧。阅读完本文后，你将对如何在
    Python 中使用迭代器和生成器编写高效且有效的代码有一个深入的理解。
- en: Understanding Iterators
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解迭代器
- en: In Python, an iterator is an object that can be iterated (looped) upon. An object
    which will return data, one element at a time. They represent a data stream and
    implement the iterator protocol, which consists of the methods `iter()` and `next()`.
    The `iter()` method returns the iterator object itself, and the `next()` method
    returns the following item from the iterator.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，迭代器是一个可以被迭代（循环）的对象。它是一个返回数据的对象，一次一个元素。它们代表一个数据流，并实现了包含 `iter()` 和
    `next()` 方法的迭代器协议。`iter()` 方法返回迭代器对象本身，`next()` 方法返回迭代器中的下一个项。
- en: To create an iterator in Python, we need to implement the iterator protocol,
    that is, the `iter()` and `next()` methods in a class. Once this is done, an instance
    of this class can be used as an iterator.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Python 中创建迭代器，我们需要在类中实现迭代器协议，即 `iter()` 和 `next()` 方法。一旦完成，类的实例可以用作迭代器。
- en: It's important to know that every Python object that implements the `iter()`
    method can be considered an Iterable, but not all are Iterators. An `Iterator`
    has another method `next()`, which is used to fetch the next item.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 了解每个实现了 `iter()` 方法的 Python 对象都可以被视为可迭代对象，但并非所有对象都是迭代器。一个 `Iterator` 还有另一个方法
    `next()`，用于获取下一个项。
- en: 'The Iteration Protocol must be followed by an object to be considered an iterator.
    The protocol requires an object to implement two methods: `iter()` and `next()`.
    The `iter()` method should return the iterator object, and the `next()` method
    should return the next item from the iterator. If there are no more items to return,
    the `next()` method should raise `StopIteration` exception.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对象要被视为迭代器必须遵循迭代协议。该协议要求对象实现两个方法：`iter()` 和 `next()`。`iter()` 方法应返回迭代器对象，而 `next()`
    方法应返回迭代器中的下一个项。如果没有更多项可返回，`next()` 方法应引发 `StopIteration` 异常。
- en: In summary, Iterators are objects that can be iterated over, and they implement
    the iterator protocol with the `iter()` and `next()` methods. They are the objects
    used to traverse a container's elements.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，迭代器是可以被迭代的对象，它们实现了包含 `iter()` 和 `next()` 方法的迭代器协议。它们是用于遍历容器元素的对象。
- en: Creating Custom Iterators
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义迭代器
- en: Creating custom iterators in Python allows you to define the behavior of an
    iterator for a specific use case. To create a custom iterator, you need to define
    a class that implements the iterator protocol with the `iter()` and `next()` methods.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中创建自定义迭代器允许你为特定的使用案例定义迭代器的行为。要创建自定义迭代器，你需要定义一个实现了迭代器协议的类，该类包含 `iter()`
    和 `next()` 方法。
- en: The iter() method should return the iterator object itself, typically by returning
    `self`. The `next()` method should return the following item from the iterator
    and raise the StopIteration exception when there are no more items to return.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`iter()` 方法应返回迭代器对象本身，通常是返回 `self`。`next()` 方法应返回迭代器中的下一个项，并在没有更多项可返回时引发 StopIteration
    异常。'
- en: 'Here''s an example of a simple custom iterator class that iterates over a range
    of numbers:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的自定义迭代器类的示例，它迭代一个数字范围：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This iterator class takes a start and an end value as arguments and returns
    the numbers in the range [`start`, `end`] when iterated over.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个迭代器类接受起始值和结束值作为参数，并在迭代时返回范围[`start`, `end`]内的数字。
- en: 'Implementing the above class and creating an instance of it, we can use it
    as an iterator, for example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实现上述类并创建其实例后，我们可以将其用作迭代器，例如：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will print the numbers from 1 to 5.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印从1到5的数字。
- en: Creating custom iterators for large data sets is an efficient way of processing
    them. By creating a custom iterator, you can control how the data is accessed
    and limit the amount of data loaded into memory at any given time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为大型数据集创建自定义迭代器是一种高效的处理方式。通过创建自定义迭代器，你可以控制数据的访问方式，并限制任何给定时间加载到内存中的数据量。
- en: In summary, Creating custom iterators in Python allows you to define the behavior
    of an iterator for a specific use case by implementing the iterator protocol,
    `iter()` and `next()` methods. It is an efficient way of handling large data sets
    by controlling how the data is accessed and limiting the amount of data loaded
    into memory at any given time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总结起来，创建自定义迭代器在Python中允许你通过实现迭代器协议、`iter()`和`next()`方法来定义迭代器的行为，以适应特定的使用案例。这是一种高效处理大型数据集的方法，通过控制数据的访问方式并限制任何给定时间加载到内存中的数据量。
- en: Understanding Generators
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解生成器
- en: A generator is a type of iterator in Python that allows you to declare a function
    that behaves like an iterator. They use the yield statement to return data and
    are a more memory-efficient way of working with large data sets.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器是Python中的一种迭代器类型，它允许你声明一个像迭代器一样行为的函数。它们使用`yield`语句返回数据，并且是处理大型数据集时更节省内存的方式。
- en: A generator function is defined like a regular function, but instead of using
    the `return` statement, it uses the `yield`. When the generator function is called,
    it returns a generator object but does not execute the function body immediately.
    The function body is executed only when its `next()` method is called.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器函数的定义类似于常规函数，但它使用`yield`代替`return`语句。当生成器函数被调用时，它返回一个生成器对象，但不会立即执行函数体。函数体只有在调用其`next()`方法时才会被执行。
- en: 'Here''s an example of a simple generator function that generates the numbers
    in a range:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单的生成器函数示例，它生成一个范围内的数字：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This generator takes a start and an end value as arguments and generates the
    numbers in that range to iterate.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成器接受起始值和结束值作为参数，并生成该范围内的数字以进行迭代。
- en: 'You can use this generator function as an iterator, for example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个生成器函数用作迭代器，例如：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will print the numbers from 1 to 5.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印从1到5的数字。
- en: Generators are a more memory-efficient way of working with big data because
    the entire data set is not stored in memory. Instead, it generates the data one
    item at a time each time `next()` is called.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器是一种更节省内存的处理大数据的方式，因为整个数据集不会存储在内存中。而是每次调用`next()`时生成一个数据项。
- en: In summary, Generators are a type of iterator in Python that allows you to declare
    a function that behaves like an iterator. They use the `yield` statement to return
    data and are a more memory-efficient way of working with large data sets. They
    are defined like a regular function and return a generator object, an iterator,
    that executes the function body when the generator's `next()` method is called.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 总结起来，生成器是Python中的一种迭代器类型，它允许你声明一个像迭代器一样行为的函数。它们使用`yield`语句返回数据，并且是处理大型数据集时更节省内存的方式。它们的定义类似于常规函数，返回一个生成器对象，一个迭代器，当生成器的`next()`方法被调用时执行函数体。
- en: Creating Custom Generators
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义生成器
- en: Creating custom generators in Python allows you to define the behavior of a
    generator for a specific use case. To create a custom generator, you need to define
    a function that uses the `yield` statement to return data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中创建自定义生成器允许你为特定的使用案例定义生成器的行为。要创建自定义生成器，你需要定义一个使用`yield`语句返回数据的函数。
- en: 'Here''s an example of a simple custom generator function that generates the
    Fibonacci sequence:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单的自定义生成器函数示例，它生成斐波那契数列：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This generator function takes an argument `n`, and generates the first *n* numbers
    of the Fibonacci sequence when iterated over.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成器函数接受一个参数`n`，并在迭代时生成斐波那契数列的前*n*个数字。
- en: 'You can use this generator function as an iterator, for example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个生成器函数用作迭代器，例如：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will print the first five numbers of the Fibonacci sequence.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印斐波那契数列的前五个数字。
- en: Generator-based coroutines are another way to use generators in Python, allowing
    you to write concurrent code synchronously without explicit locks, threading,
    or multiprocessing. Coroutines are functions that can be paused and resumed, and
    they use the `yield` statement to return data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 基于生成器的协程是另一种在Python中使用生成器的方法，它允许你在没有显式锁、线程或多进程的情况下同步编写并发代码。协程是可以被暂停和恢复的函数，它们使用`yield`语句返回数据。
- en: Creating custom generators for large data sets is an efficient way of processing
    them. Then, you can control how the data is accessed and limit the amount of data
    loaded into memory at any given time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为大型数据集创建自定义生成器是一种高效的处理方法。然后，你可以控制数据的访问方式，并限制在任何给定时间内加载到内存中的数据量。
- en: In summary, Creating custom generators in Python allows you to define the behavior
    of a generator for a specific use case by defining a function that uses the `yield`
    statement to return a sample each time `next()` is called. Generator-based coroutines
    are another way to use generators. They allow you to write concurrent code synchronously
    without requiring explicit locks, threading, or multiprocessing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在Python中创建自定义生成器允许你通过定义一个使用`yield`语句的函数来为特定用例定义生成器的行为。基于生成器的协程是另一种使用生成器的方法。它们允许你同步编写并发代码，而不需要显式的锁、线程或多进程。
- en: Combining Iterators and Generators
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合迭代器和生成器
- en: Iterators and generators in Python can be combined in various ways to achieve
    specific functionality in your programs. Complex data processing pipelines become
    easy to understand and maintain by chaining iterators and generators.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，迭代器和生成器可以以各种方式组合，以实现程序中的特定功能。通过链式操作迭代器和生成器，复杂的数据处理管道变得易于理解和维护。
- en: Iterator chaining is a technique where you chain multiple iterators to create
    a new iterator that iterates over the original iterators' elements. This can be
    done using the built-in function `itertools.chain()`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器链式操作是一种将多个迭代器链在一起以创建一个新的迭代器，该迭代器遍历原始迭代器的元素的技术。这可以通过内置函数`itertools.chain()`完成。
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will print the numbers from 1 to 9
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印1到9之间的数字。
- en: Pipeline Iterators is a technique where you chain multiple iterators together,
    each performing a specific operation on the data and passing the result to the
    next iterator. This can be done using generator expressions, list comprehension,
    or functional tools like `map()` and `filter()`
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 管道迭代器是一种将多个迭代器链在一起的技术，每个迭代器对数据执行特定操作，并将结果传递给下一个迭代器。这可以通过生成器表达式、列表推导式或像`map()`和`filter()`这样的函数工具完成。
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will print the even squares of the numbers from 0 to 9.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印0到9之间数字的偶数平方。
- en: Advanced Iterator Techniques can also be implemented to achieve specific functionality,
    like implementing decorators to add additional functionality to an iterator or
    using `zip()` and `enumerate()` to iterate over multiple sequences at once.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 高级迭代器技术也可以实现特定功能，例如实现装饰器以为迭代器添加额外功能，或使用`zip()`和`enumerate()`同时迭代多个序列。
- en: In summary, Combining Iterators and Generators in Python can create complex
    data processing pipelines that are easy to understand and maintain. By chaining
    iterators and generators together, you can create new iterators that iterate over
    the elements of all the original iterators. Iterator chaining and pipeline iterators
    are the two most common ways of combining Iterators and Generators. Advanced Iterator
    Techniques like decorators, `zip()`, and `enumerate()` can also be used to achieve
    specific functionality.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在Python中组合迭代器和生成器可以创建复杂的数据处理管道，这些管道易于理解和维护。通过将迭代器和生成器链在一起，你可以创建新的迭代器，这些迭代器遍历所有原始迭代器的元素。迭代器链式操作和管道迭代器是组合迭代器和生成器的两种最常见方法。高级迭代器技术如装饰器、`zip()`和`enumerate()`也可以用来实现特定功能。
- en: Iterators and Generators for Deep Learning
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于深度学习的迭代器和生成器
- en: One example of using iterators and generators in machine learning is working
    with large datasets that do not fit in memory. Instead of loading the entire dataset
    into memory, a custom generator can load the data one batch at a time. This saves
    memory and allows for processing the data incrementally, which can be helpful
    for online learning algorithms.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中使用迭代器和生成器的一个例子是处理无法全部加载到内存中的大型数据集。与其将整个数据集加载到内存中，不如使用自定义生成器一次加载一批数据。这节省了内存，并允许增量处理数据，这对在线学习算法非常有帮助。
- en: 'Here''s an example of using a generator to load a large dataset of images and
    labels for a deep-learning model:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用生成器加载深度学习模型的大型数据集（包括图像和标签）的示例：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In machine learning, iterators and generators can improve your models'' performance
    and efficiency. Here are a few examples:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，迭代器和生成器可以提高模型的性能和效率。以下是一些示例：
- en: '**Data loading**: When working with large datasets, loading all the data into
    memory can be a problem. By using a generator to load the data, you can load only
    a small batch at a time and feed it to the model. This can be done by creating
    a generator function that reads the data from the disk, processes it, and yields
    it in small batches.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据加载**：在处理大型数据集时，将所有数据加载到内存中可能会成为问题。通过使用生成器加载数据，你可以一次只加载一个小批次，并将其提供给模型。这可以通过创建一个生成器函数来完成，该函数从磁盘读取数据，处理它，并以小批次提供数据。'
- en: '**Data preprocessing**: When working with image or video data, it may be necessary
    to perform extensive preprocessing on the data before it can be fed to the model.
    Using a generator, you can preprocess the data on the fly and yield the preprocessed
    data to the model.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据预处理**：在处理图像或视频数据时，可能需要对数据进行广泛的预处理，然后才能输入模型。通过使用生成器，你可以实时预处理数据，并将预处理后的数据提供给模型。'
- en: '**Data augmentation**: Data augmentation is a technique used to increase the
    size of the dataset by applying random transformations to the data. Using a generator,
    you can apply data augmentation on the fly and yield the augmented data to the
    model.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据增强**：数据增强是一种通过对数据应用随机变换来增加数据集大小的技术。使用生成器，你可以实时应用数据增强，并将增强后的数据提供给模型。'
- en: '**Model training**: When training a model, it is often necessary to iterate
    over the data multiple times. By using an iterator, you can repeat the iteration.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模型训练**：在训练模型时，通常需要多次迭代数据。通过使用迭代器，你可以重复迭代。'
- en: 'Here''s an example of using a generator function to load and preprocess image
    data for a machine-learning model:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用生成器函数加载和预处理图像数据以用于机器学习模型的示例：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This example uses the `ImageDataGenerator` class from Keras to load and preprocess
    the images. The `image_generator` function takes in the directory containing the
    images, target size, and batch size as arguments and returns an iterator that
    yields preprocessed pictures and labels. The `model.fit_generator` method is then
    used to train the model on the images by passing the iterator and the number of
    steps per epoch.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用了 Keras 的 `ImageDataGenerator` 类来加载和预处理图像。`image_generator` 函数接收包含图像的目录、目标尺寸和批次大小作为参数，并返回一个生成预处理图片和标签的迭代器。然后使用
    `model.fit_generator` 方法通过传递迭代器和每个 epoch 的步数来训练模型。
- en: This way, the generator function loads the images from the disk, preprocess
    them, and yields them one batch at a time. The model can iterate over it, reducing
    memory usage and allowing it to work with large datasets.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，生成器函数从磁盘加载图像，预处理它们，并一次提供一个批次。模型可以对其进行迭代，减少内存使用，并允许处理大数据集。
- en: Conclusion
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this blog post, we have delved into Python's world of iterators and generators.
    We have explored the concepts of iterators and generators and how they work under
    the hood. We have also covered how to create custom iterators and generators and
    looked at advanced techniques for combining them to achieve specific functionality
    in your programs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我们已经深入探讨了 Python 的迭代器和生成器世界。我们探讨了迭代器和生成器的概念及其内部工作原理。我们还介绍了如何创建自定义迭代器和生成器，并查看了将它们结合起来以在程序中实现特定功能的高级技术。
- en: We have seen that iterators are objects that can be iterated over, and they
    implement the iterator protocol with the `iter()` and `next()` methods. On the
    other hand, generators are a type of iterator that allows you to declare a function
    that behaves like an iterator. They use the yield statement to return data and
    are a more memory-efficient way of working with large data sets.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，迭代器是可以被迭代的对象，它们实现了具有 `iter()` 和 `next()` 方法的迭代器协议。另一方面，生成器是一种允许你声明一个行为类似于迭代器的函数的迭代器类型。它们使用
    yield 语句来返回数据，并且是处理大型数据集的更节省内存的方式。
- en: Creating custom iterators and generators allows you to define the behavior of
    an iterator or generator for a specific use case. In addition, chaining iterators
    and generators together can create complex data processing pipelines that are
    easy to understand and maintain.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义迭代器和生成器可以让你为特定的用例定义迭代器或生成器的行为。此外，将迭代器和生成器串联起来可以创建复杂的数据处理管道，这些管道易于理解和维护。
- en: By the end of this post, you should have a solid understanding of how to use
    iterators and generators in Python to write efficient and effective code. We encourage
    you to try out the concepts discussed in this post and continue learning about
    Python's many other features and capabilities.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章结束时，你应该对如何在 Python 中使用迭代器和生成器以编写高效而有效的代码有一个扎实的理解。我们鼓励你尝试本篇文章中讨论的概念，并继续学习
    Python 的其他功能和能力。
- en: Additional resources like official documentation, books, tutorials, and videos
    can be found online to continue learning and mastering Iterators and Generators
    in Python.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在线可以找到官方文档、书籍、教程和视频等额外资源，以继续学习和掌握 Python 中的迭代器和生成器。
- en: Additional Resources
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外资源
- en: 'Python documentation on Iterators and Generators:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的迭代器和生成器文档：
- en: '[](https://docs.python.org/3/tutorial/classes.html?source=post_page-----ca30939d962--------------------------------#iterators)
    [## 9\. Classes'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 9\. 类](https://docs.python.org/3/tutorial/classes.html?source=post_page-----ca30939d962--------------------------------#iterators)'
- en: Classes provide a means of bundling data and functionality together. Creating
    a new class creates a new type of object…
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类提供了一种将数据和功能捆绑在一起的方法。创建一个新类会创建一个新的对象类型…
- en: docs.python.org](https://docs.python.org/3/tutorial/classes.html?source=post_page-----ca30939d962--------------------------------#iterators)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.python.org](https://docs.python.org/3/tutorial/classes.html?source=post_page-----ca30939d962--------------------------------#iterators)'
- en: '"Python Iterators: A Step-By-Step Guide" by Corey Schafer:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '"Python 迭代器：一步步指南" 由 Corey Schafer 提供：'
- en: '"[**How to Use Generators and yield in Python**](https://realpython.com/introduction-to-python-generators/)"
    by Real Python:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '"[**如何在 Python 中使用生成器和 yield**](https://realpython.com/introduction-to-python-generators/)"
    由 Real Python 提供：'
- en: '[](https://realpython.com/introduction-to-python-generators/?source=post_page-----ca30939d962--------------------------------)
    [## How to Use Generators and yield in Python - Real Python'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何在 Python 中使用生成器和 yield](https://realpython.com/introduction-to-python-generators/?source=post_page-----ca30939d962--------------------------------)
    - Real Python'
- en: Introduced with PEP 255, generator functions are a special kind of function
    that return a lazy iterator. These are…
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器函数由 PEP 255 引入，是一种特殊类型的函数，返回一个惰性迭代器。这些是…
- en: realpython.com](https://realpython.com/introduction-to-python-generators/?source=post_page-----ca30939d962--------------------------------)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[realpython.com](https://realpython.com/introduction-to-python-generators/?source=post_page-----ca30939d962--------------------------------)'
- en: '"Python Iterators and Generators" by Trey Hunner:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '"Python 迭代器和生成器" 由 Trey Hunner 提供：'
- en: '[](https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/?source=post_page-----ca30939d962--------------------------------)
    [## How to make an iterator in Python'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何在 Python 中创建一个迭代器](https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/?source=post_page-----ca30939d962--------------------------------)'
- en: I wrote an article sometime ago on the iterator protocol that powers Python's
    for loops. One thing I left out of that…
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我之前写过一篇关于驱动 Python `for` 循环的迭代器协议的文章。那篇文章中有一件事我没有提及…
- en: treyhunner.com](https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/?source=post_page-----ca30939d962--------------------------------)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[treyhunner.com](https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/?source=post_page-----ca30939d962--------------------------------)'
- en: '"[**What Are Python Generators?**](https://dbader.org/blog/python-generators)"
    by Dan Bader:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '"[**什么是 Python 生成器？**](https://dbader.org/blog/python-generators)" 由 Dan Bader
    提供：'
- en: '[](https://dbader.org/blog/python-generators?source=post_page-----ca30939d962--------------------------------)
    [## What Are Python Generators? - dbader.org'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 什么是 Python 生成器？](https://dbader.org/blog/python-generators?source=post_page-----ca30939d962--------------------------------)
    - dbader.org'
- en: Generators are a tricky subject in Python. With this tutorial you'll make the
    leap from class-based iterators to using…
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器是 Python 中一个棘手的主题。通过本教程，你将从基于类的迭代器跃迁到使用…
- en: dbader.org](https://dbader.org/blog/python-generators?source=post_page-----ca30939d962--------------------------------)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[dbader.org](https://dbader.org/blog/python-generators?source=post_page-----ca30939d962--------------------------------)'
- en: '"[**Python Iterators & Generators**](https://medium.com/geekculture/python-iterators-generators-ea63c5821550)**"**
    by [Kurtis Pykes](https://medium.com/u/5ba760786877?source=post_page-----ca30939d962--------------------------------)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '"[**Python 迭代器与生成器**](https://medium.com/geekculture/python-iterators-generators-ea63c5821550)**"**
    作者：[Kurtis Pykes](https://medium.com/u/5ba760786877?source=post_page-----ca30939d962--------------------------------)'
- en: '[](https://medium.com/geekculture/python-iterators-generators-ea63c5821550?source=post_page-----ca30939d962--------------------------------)
    [## Python Iterators & Generators'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/geekculture/python-iterators-generators-ea63c5821550?source=post_page-----ca30939d962--------------------------------)
    [## Python 迭代器与生成器'
- en: Understanding the Key Differences
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解关键差异
- en: medium.com](https://medium.com/geekculture/python-iterators-generators-ea63c5821550?source=post_page-----ca30939d962--------------------------------)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/geekculture/python-iterators-generators-ea63c5821550?source=post_page-----ca30939d962--------------------------------)
- en: '"Asynchronous iterators in python" by [Dinesh Kumar K B](https://medium.com/u/f3e3395e9bbf?source=post_page-----ca30939d962--------------------------------)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '"Python中的异步迭代器" 作者：[Dinesh Kumar K B](https://medium.com/u/f3e3395e9bbf?source=post_page-----ca30939d962--------------------------------)'
- en: '[](https://medium.com/geekculture/asynchronous-iterators-in-python-fdf55198287d?source=post_page-----ca30939d962--------------------------------)
    [## Asynchronous iterators in Python'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/geekculture/asynchronous-iterators-in-python-fdf55198287d?source=post_page-----ca30939d962--------------------------------)
    [## Python中的异步迭代器'
- en: How to write async for loops in python
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在Python中编写异步for循环
- en: medium.com](https://medium.com/geekculture/asynchronous-iterators-in-python-fdf55198287d?source=post_page-----ca30939d962--------------------------------)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/geekculture/asynchronous-iterators-in-python-fdf55198287d?source=post_page-----ca30939d962--------------------------------)
- en: '"[**Iterator Functions**](https://itnext.io/iterator-functions-33265a99e5d1)**"**
    by [Thijmen Dam](https://medium.com/u/63098707ef90?source=post_page-----ca30939d962--------------------------------)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '"[**迭代器函数**](https://itnext.io/iterator-functions-33265a99e5d1)**"** 作者：[Thijmen
    Dam](https://medium.com/u/63098707ef90?source=post_page-----ca30939d962--------------------------------)'
- en: '[](https://itnext.io/iterator-functions-33265a99e5d1?source=post_page-----ca30939d962--------------------------------)
    [## Iterator Functions'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://itnext.io/iterator-functions-33265a99e5d1?source=post_page-----ca30939d962--------------------------------)
    [## 迭代器函数'
- en: Iterate Efficiently with Python's Built-in Functions
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python内置函数高效迭代
- en: itnext.io](https://itnext.io/iterator-functions-33265a99e5d1?source=post_page-----ca30939d962--------------------------------)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: itnext.io](https://itnext.io/iterator-functions-33265a99e5d1?source=post_page-----ca30939d962--------------------------------)
- en: '"[**Demystify Iterators and Generators in Python**](/demystify-iterators-and-generators-in-python-f21878c9897)**"**
    by[Lynn Kwong](https://medium.com/u/f649eccbbc3d?source=post_page-----ca30939d962--------------------------------)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '"[**揭开Python中迭代器和生成器的神秘面纱**](/demystify-iterators-and-generators-in-python-f21878c9897)**"**
    作者：[Lynn Kwong](https://medium.com/u/f649eccbbc3d?source=post_page-----ca30939d962--------------------------------)'
- en: '[](/demystify-iterators-and-generators-in-python-f21878c9897?source=post_page-----ca30939d962--------------------------------)
    [## Demystify Iterators and Generators in Python'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/demystify-iterators-and-generators-in-python-f21878c9897?source=post_page-----ca30939d962--------------------------------)
    [## 揭开Python中迭代器和生成器的神秘面纱'
- en: Learn an efficient way to work with large datasets
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习高效处理大型数据集的方法
- en: towardsdatascience.com](/demystify-iterators-and-generators-in-python-f21878c9897?source=post_page-----ca30939d962--------------------------------)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/demystify-iterators-and-generators-in-python-f21878c9897?source=post_page-----ca30939d962--------------------------------)
- en: Contact
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Want to Connect? Follow Dr. Robinson on [LinkedIn](https://www.linkedin.com/in/jrobby/),
    [Twitter](https://twitter.com/jrobvision), [Facebook](https://www.facebook.com/joe.robinson.39750),
    and [Instagram](https://www.instagram.com/doctor__jjj/). Visit my homepage for
    papers, blogs, email signups, and more!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 想要联系？关注罗宾逊博士的 [LinkedIn](https://www.linkedin.com/in/jrobby/)、[Twitter](https://twitter.com/jrobvision)、[Facebook](https://www.facebook.com/joe.robinson.39750)
    和 [Instagram](https://www.instagram.com/doctor__jjj/)。访问我的主页获取论文、博客、邮箱注册等更多信息！
- en: '[](https://www.jrobs-vision.com/?source=post_page-----ca30939d962--------------------------------)
    [## AI Research Engineer and Entrepreneur | Joseph P. Robinson'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.jrobs-vision.com/?source=post_page-----ca30939d962--------------------------------)
    [## AI研究工程师及企业家 | 约瑟夫·P·罗宾逊'
- en: Researcher & Entrepreneur Greetings! As a researcher, Dr. Robinson proposed
    and employed advanced AI to understand…
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 研究员与企业家问候！作为研究员，罗宾逊博士提出并使用了先进的AI来理解…
- en: www.jrobs-vision.com.](https://www.jrobs-vision.com/?source=post_page-----ca30939d962--------------------------------)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: www.jrobs-vision.com.](https://www.jrobs-vision.com/?source=post_page-----ca30939d962--------------------------------)
