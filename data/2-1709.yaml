- en: 'How To Fix TypeError: ObjectId Is Not JSON Serializable'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '如何修复 TypeError: ObjectId 不是 JSON 可序列化的'
- en: 原文：[https://towardsdatascience.com/pymongo-cursor-to-json-9f770740375a](https://towardsdatascience.com/pymongo-cursor-to-json-9f770740375a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pymongo-cursor-to-json-9f770740375a](https://towardsdatascience.com/pymongo-cursor-to-json-9f770740375a)
- en: Converting a mongo cursor into JSON object in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Mongo 游标转换为 Python 中的 JSON 对象
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)
    ·4 min read·Jan 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)
    ·4分钟阅读·2023年1月7日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/eaab2de46fd1a4afdef1ebe34e4c49af.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eaab2de46fd1a4afdef1ebe34e4c49af.png)'
- en: Photo by [Ciprian Boiciuc](https://unsplash.com/@ciprian?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/TrNSWatUW5g?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Ciprian Boiciuc](https://unsplash.com/@ciprian?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，出处 [Unsplash](https://unsplash.com/photos/TrNSWatUW5g?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Welcome to our tutorial on serializing PyMongo cursors into JSON. In this article,
    we will cover how to properly handle `ObjectId` and `datetime` objects, as well
    as any other object, using a custom `JSONEncoder`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到我们的教程，介绍如何将 PyMongo 游标序列化为 JSON。在本文中，我们将讨论如何使用自定义 `JSONEncoder` 正确处理 `ObjectId`
    和 `datetime` 对象以及其他对象。
- en: One common task when working with PyMongo is the need to serialize data for
    storage or for transfer over a network. In this tutorial, we will look at how
    to serialize a PyMongo cursor, which is a common data structure used to store
    results from a MongoDB query, into JSON format.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 PyMongo 时，一个常见的任务是将数据序列化以便存储或通过网络传输。在本教程中，我们将探讨如何将 PyMongo 游标（这是一个常用于存储
    MongoDB 查询结果的数据结构）序列化为 JSON 格式。
- en: 'A commonly reported error when doing so, is the following `TyperError`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的错误是 `TyperError`：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will also delve into how to properly handle complex data types such as `ObjectId`
    and datetime objects, which cannot be serialized directly into JSON. We will show
    you how to use a custom `JSONEncoder` to properly handle these objects and any
    other custom object types you may have in your PyMongo cursor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将深入探讨如何正确处理复杂数据类型，如 `ObjectId` 和 datetime 对象，这些对象不能直接序列化为 JSON。我们将向您展示如何使用自定义
    `JSONEncoder` 正确处理这些对象及您 PyMongo 游标中的其他自定义对象类型。
- en: So if you want to learn how to serialize PyMongo cursors into JSON and handle
    complex data types, keep reading!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果您想了解如何将 PyMongo 游标序列化为 JSON 并处理复杂数据类型，请继续阅读！
- en: Creating a custom `JSONEncoder`
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义 `JSONEncoder`
- en: 'The `JSONEncoder` — which is a member of the `json` module of the standard
    library — is an extensible JSON encoder for Python data structures. By default,
    is supports the following serialisations:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONEncoder` —— 这是标准库 `json` 模块的一个成员 —— 是一个可扩展的 JSON 编码器，用于 Python 数据结构。默认情况下，它支持以下序列化：'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This means that whenever an object of a different data type is observed (which
    is not listed on the above table), a `TypeError` will be raised.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每当观察到不同数据类型的对象（未列在上述表格中）时，将引发 `TypeError`。
- en: When working with documents in Mongo, by default every document will have an
    assigned `_id` that corresponds to a unique identifier for every document within
    a collection. Now whenever you query a Mongo collection, a cursor will be returned
    containing (a pointer to) the retrieved documents where each document will also
    have the `_id` field of type `ObjectId`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理Mongo中的文档时，每个文档默认都会有一个分配的`_id`，这对应于集合中每个文档的唯一标识符。现在每当你查询Mongo集合时，将返回一个游标，该游标包含（指向）检索到的文档，每个文档还将有一个`ObjectId`类型的`_id`字段。
- en: 'Therefore, if you attempt to serialise such documents using the default `JSONEncoder`,
    you will end up getting the error mentioned in the introduction of this tutorial:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你尝试使用默认的`JSONEncoder`来序列化这些文档，你将会遇到在本教程介绍中提到的错误：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Therefore, in order to manage to serialise such objects contained in the PyMongo
    cursor, we need to extend the default `JSONEncoder` such that it properly handles
    such data types the way we would want it to. To achieve this we will also need
    to implement the `default` method to return the mapping we wish, as specified
    in the documentation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了能够序列化PyMongo游标中包含的这些对象，我们需要扩展默认的`JSONEncoder`，以便它能够按照我们希望的方式正确处理这些数据类型。为此，我们还需要实现`default`方法以返回我们希望的映射，如文档中所述。
- en: To extend this to recognize other objects, subclass and implement a `[default()](https://docs.python.org/3/library/json.html#json.JSONEncoder.default)`
    method with another method that returns a serializable object for `o` if possible,
    otherwise it should call the superclass implementation (to raise `[TypeError](https://docs.python.org/3/library/exceptions.html#TypeError)`).
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要扩展以识别其他对象，请子类化并实现一个`[default()](https://docs.python.org/3/library/json.html#json.JSONEncoder.default)`方法，该方法返回一个可序列化的对象`o`（如果可能），否则应调用超类实现（以引发`[TypeError](https://docs.python.org/3/library/exceptions.html#TypeError)`）。
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — [Python documentation](https://docs.python.org/3/library/json.html#json.JSONEncoder)
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — [Python文档](https://docs.python.org/3/library/json.html#json.JSONEncoder)
- en: In our custom `JSONEncoder`, I am about to serialise any instance of `bson.ObjectId`
    and `datetime.datetime` to `str`. Depending on the documents contained in your
    own Mongo cursor, you may have to specify and handle additional (or perhaps less)
    data types.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的自定义`JSONEncoder`中，我将把任何`bson.ObjectId`和`datetime.datetime`实例序列化为`str`。根据你自己Mongo游标中的文档，你可能需要指定并处理额外（或更少）的数据类型。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Encoding the Mongo Cursor using the MongoJSONEncoder
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用MongoJSONEncoder编码Mongo游标
- en: Now that we have extended the defualt `JSONEncoder` such that is now capable
    of also encoding objects of type `bson.ObjectId` and `datetime.datetime`, we can
    now encode the Mongo cursor.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经扩展了默认的`JSONEncoder`，使其能够编码`bson.ObjectId`和`datetime.datetime`类型的对象，我们现在可以编码Mongo游标了。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a Python object out of the JSON object
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从JSON对象创建Python对象
- en: 'Finally, in case you wish to convert the newly created JSON object into a Python
    object (that is a list of dictionaries containing the key-value pairs that correspond
    to the document values within the Mongo cursor), all you need to call is the `json.loads()`
    function:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你希望将新创建的JSON对象转换为Python对象（即包含文档值的键值对的字典列表），你只需要调用`json.loads()`函数：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Final Thoughts
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终思考
- en: In this tutorial, we learned how to serialize PyMongo cursors into JSON and
    properly handle complex data types such as `ObjectId` and `datetime` objects.
    We accomplished this by creating a custom `JSONEncoder` that extended the default
    `JSONEncoder` and implemented a `default()` method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们学习了如何将PyMongo游标序列化为JSON并正确处理复杂的数据类型，如`ObjectId`和`datetime`对象。我们通过创建一个扩展了默认`JSONEncoder`并实现了`default()`方法的自定义`JSONEncoder`来完成这一任务。
- en: We then used this custom encoder to encode the PyMongo cursor, and finally,
    we converted the resulting JSON object into a Python object using the `json.loads()`
    function. This tutorial demonstrated how to handle `ObjectId` and `datetime` objects,
    but the custom `JSONEncoder` can also be extended to handle any other custom object
    types that may be present in the PyMongo cursor.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用这个自定义编码器来编码PyMongo游标，最后，我们使用`json.loads()`函数将结果JSON对象转换为Python对象。本教程演示了如何处理`ObjectId`和`datetime`对象，但自定义的`JSONEncoder`也可以扩展以处理PyMongo游标中可能存在的其他自定义对象类型。
- en: '[**Become a member**](https://gmyrianthous.medium.com/membership) **and read
    every story on Medium. Your membership fee directly supports me and other writers
    you read. You’ll also get full access to every story on Medium.**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[**成为会员**](https://gmyrianthous.medium.com/membership) **，在 Medium 上阅读每一篇故事。您的会员费直接支持我和其他您阅读的作者。您还将获得对
    Medium 上每一篇故事的完全访问权限。**'
- en: '[](https://gmyrianthous.medium.com/membership?source=post_page-----9f770740375a--------------------------------)
    [## Join Medium with my referral link — Giorgos Myrianthous'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/membership?source=post_page-----9f770740375a--------------------------------)
    [## 使用我的推荐链接加入 Medium — Giorgos Myrianthous'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，您的会员费的一部分将用于支持您阅读的作者，您也将获得对每一篇故事的完全访问权限…
- en: gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----9f770740375a--------------------------------)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----9f770740375a--------------------------------)'
- en: '**Related articles you may also like**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**您可能也感兴趣的相关文章**'
- en: '[](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----9f770740375a--------------------------------)
    [## Diagrams as Code in Python'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----9f770740375a--------------------------------)
    [## Python 中的图表代码'
- en: Creating cloud system architecture diagrams with Python
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Python 创建云系统架构图
- en: towardsdatascience.com](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----9f770740375a--------------------------------)
    [](/infrastructure-as-code-f153d810428b?source=post_page-----9f770740375a--------------------------------)
    [## Infrastructure as Code
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----9f770740375a--------------------------------)
    [](/infrastructure-as-code-f153d810428b?source=post_page-----9f770740375a--------------------------------)
    [## 基础设施即代码
- en: Managing infrastructure resources with code
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用代码管理基础设施资源
- en: towardsdatascience.com](/infrastructure-as-code-f153d810428b?source=post_page-----9f770740375a--------------------------------)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/infrastructure-as-code-f153d810428b?source=post_page-----9f770740375a--------------------------------)
