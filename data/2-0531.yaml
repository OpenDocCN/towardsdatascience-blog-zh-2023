- en: Combining Traditional Thread-Based Code and Asyncio in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合传统的基于线程的代码和 Python 中的 asyncio
- en: 原文：[https://towardsdatascience.com/combining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c](https://towardsdatascience.com/combining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/combining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c](https://towardsdatascience.com/combining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c)
- en: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
- en: A comprehensive guide to integrating synchronous and asynchronous programming
    in Python
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合同步和异步编程的综合指南
- en: '[](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----dc162084756c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)
    ·6 min read·May 15, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc162084756c--------------------------------)
    ·6分钟阅读·2023年5月15日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2d6b4ed69c2a46871c9ec4c44fa56d21.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d6b4ed69c2a46871c9ec4c44fa56d21.png)'
- en: 'Photo Credit: Created by Author, [Canva](https://www.canva.com/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者创建，[Canva](https://www.canva.com/)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this article, I’ll explain how to call existing IO-blocking code in asyncio
    programs that don’t implement asyncio and how to call asyncio code in existing
    programs based on the threaded model.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将解释如何在不实现 asyncio 的 asyncio 程序中调用现有的 IO 阻塞代码，以及如何在基于线程模型的现有程序中调用 asyncio
    代码。
- en: In the previous articles, I introduced you to asyncio, a Python feature. The
    performance of asyncio is very high, and using asyncio in modern, highly concurrent
    code will improve IO performance by several orders of magnitude.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的文章中，我向你介绍了 asyncio，这是一种 Python 特性。asyncio 的性能非常高，在现代的高并发代码中使用 asyncio 将提升
    IO 性能几个数量级。
- en: But in the real world, we have not seen asyncio code used as much as expected.
    Why is that?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但在现实世界中，我们并没有看到 asyncio 代码被使用得像预期的那样多。为什么会这样呢？
- en: 'Challenge 1: How to call old IO-blocking code in asyncio code'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战 1：如何在 asyncio 代码中调用旧的 IO 阻塞代码
- en: One scenario is that while we implement the new code with asyncio, there are
    still a lot of IO-blocking programs left in the system that was implemented traditionally.
    For example, microservice, file operation, etc. Even if you use asyncio and call
    these blocking APIs directly, you still can’t achieve the high concurrency effect.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一种情况是，当我们使用 asyncio 实现新代码时，系统中仍然存在大量传统实现的 IO 阻塞程序。例如，微服务、文件操作等。即使你使用 asyncio
    并直接调用这些阻塞 API，仍然无法实现高并发效果。
- en: 'Challenge 2: How to call asyncio in existing blocking code to accomplish tasks
    asynchronously'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战 2：如何在现有的阻塞代码中调用 asyncio 以实现异步任务
- en: In another case, the existing code already implements a set of architecture
    based on the threaded model. Since asyncio’s event loop is executed in the current
    thread, directly calling asyncio will block the execution of existing code. It
    does not have the effect of concurrent execution.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一种情况下，现有代码已经实现了一套基于线程模型的架构。由于 asyncio 的事件循环是在当前线程中执行的，直接调用 asyncio 会阻塞现有代码的执行，无法实现并发执行的效果。
- en: So today, I will use a few real-life examples to show you how to implement asyncio
    calls in each of the two cases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以今天，我将通过一些现实生活中的例子来向你展示如何在这两种情况下实现 asyncio 调用。
- en: 'Part 1: Calling IO-Blocking Code in Asyncio-Based Programs'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 部分：在基于 asyncio 的程序中调用 IO 阻塞代码
- en: Let’s take FastAPI as an example. FastAPI is a high-performance web framework
    based on asyncio implementation. But very often, not all the business logic of
    a web application is implemented in the FastAPI code. Sometimes we need to call
    several microservices implemented long ago that are blocking calls. How could
    we deal with this situation?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以 FastAPI 为例。FastAPI 是一个基于 asyncio 实现的高性能 web 框架。但通常情况下，web 应用程序的所有业务逻辑并不是都在
    FastAPI 代码中实现的。有时我们需要调用几个早已实现的阻塞调用的微服务。我们该如何处理这种情况？
- en: Using run_in_executor to Run IO-Blocking Code
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 run_in_executor 运行 IO-阻塞代码
- en: In the previous article, we explained how to use `loop.run_in_executor` API
    to integrate multiple processes with asyncio to achieve high-performance computing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我们解释了如何使用 `loop.run_in_executor` API 将多个进程与 asyncio 集成，以实现高性能计算。
- en: '[](/combining-multiprocessing-and-asyncio-in-python-for-performance-boosts-15496ffe96b?source=post_page-----dc162084756c--------------------------------)
    [## Combining Multiprocessing and Asyncio in Python for Performance Boosts'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/combining-multiprocessing-and-asyncio-in-python-for-performance-boosts-15496ffe96b?source=post_page-----dc162084756c--------------------------------)
    [## 结合多进程和 asyncio 以提升 Python 性能'
- en: Using a real-world example to demonstrate a map-reduce program
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用实际的例子来演示 map-reduce 程序
- en: towardsdatascience.com](/combining-multiprocessing-and-asyncio-in-python-for-performance-boosts-15496ffe96b?source=post_page-----dc162084756c--------------------------------)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/combining-multiprocessing-and-asyncio-in-python-for-performance-boosts-15496ffe96b?source=post_page-----dc162084756c--------------------------------)
- en: 'However, IO-bound code is unsuitable for multi-process calls but recommended
    for multi-thread. The good thing is that the first argument of `loop.run_in_executor`
    accepts either a `concurrent.futures.ProcessPoolExecutor` implementation or a
    `concurrent.futures.ThreadPoolExecutor` implementation. So our sample code is
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，IO 绑定的代码不适合多进程调用，但推荐用于多线程。好的一点是 `loop.run_in_executor` 的第一个参数接受 `concurrent.futures.ProcessPoolExecutor`
    实现或 `concurrent.futures.ThreadPoolExecutor` 实现。因此，我们的示例代码如下：
- en: First, we use a `get_status` method to simulate the old microservice code calls
    via the requests package.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `get_status` 方法通过 requests 包来模拟旧的微服务代码调用。
- en: Then, we manage the creation and destruction of the `ThreadPoolExecutor` thread
    pool during the startup and shutdown phases of the web application, respectively.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们分别在 web 应用程序的启动和关闭阶段管理 `ThreadPoolExecutor` 线程池的创建和销毁。
- en: Finally, we call the IO blocking methods in the thread pool and get the results
    in the response method of the request via `loop.run_in_executor`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在线程池中调用 IO 阻塞方法，并通过 `loop.run_in_executor` 在请求的响应方法中获取结果。
- en: 'The default executor parameter of `loop.run_in_executor` can be None. That
    is because asyncio will initialize a default thread pool internally after startup.
    When the executor parameter of `run_in_executor` is None, it will use the default
    thread pool to execute, so we don’t have to manage a thread pool in our code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop.run_in_executor` 的默认 executor 参数可以是 None。这是因为 asyncio 启动后会在内部初始化一个默认的线程池。当
    `run_in_executor` 的 executor 参数为 None 时，它会使用默认线程池来执行，因此我们不必在代码中管理线程池：'
- en: Leveraging [asyncio.to_thread](https://docs.python.org/3/library/asyncio-task.html#asyncio.to_thread)
    (Python 3.9+)
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用 [asyncio.to_thread](https://docs.python.org/3/library/asyncio-task.html#asyncio.to_thread)（Python
    3.9+）
- en: 'Python 3.9 introduced a new high-level abstraction API, `asyncio.to_thread`,
    which, as you can see from the source code, internally calls the `loop.run_in_thread`
    method with the executor argument of None:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.9 引入了新的高级抽象 API `asyncio.to_thread`，从源代码中可以看到，它内部调用了 `loop.run_in_thread`
    方法，executor 参数为 None：
- en: Thus, using `asyncio.to_thread`, will further simplify the code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用 `asyncio.to_thread` 将进一步简化代码。
- en: 'Part 2: Calling Asyncio Code in Traditional Thread-Based Programs'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：在传统线程基础程序中调用 asyncio 代码
- en: There is another case where our program already implements a loop in the existing
    code. For example, most GUI programs use an event loop to respond to various events
    and to update the UI.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个情况是我们的程序已经在现有代码中实现了循环。例如，大多数GUI程序使用事件循环来响应各种事件并更新UI。
- en: 'Let’s take [tkinter](https://docs.python.org/3/library/tkinter.html) as an
    example. tkinter will start a main loop when it starts, and this main loop will
    block the main thread and keep on looping. As shown in the figure below:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以 [tkinter](https://docs.python.org/3/library/tkinter.html) 为例。tkinter 启动时会启动一个主循环，这个主循环会阻塞主线程并不断循环。如下图所示：
- en: '![](../Images/e70f8ed638b43c6d6e0a30238c06cf3b.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e70f8ed638b43c6d6e0a30238c06cf3b.png)'
- en: How does the tkinter main loop work. Image by Author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: tkinter 主循环是如何工作的。图片来自作者
- en: A direct call to synchronous IO code will block the main loop
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接调用同步 IO 代码会阻塞主循环
- en: 'Let’s take the example of a tkinter program that contains a button and a status
    text:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以包含按钮和状态文本的 tkinter 程序为例：
- en: This program uses a state machine to implement it. Every 60 milliseconds, the
    code refreshes the corresponding text according to the program’s current state.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序使用状态机来实现。每 60 毫秒，代码根据程序的当前状态刷新相应的文本。
- en: 'When we click the request_code button, the workflow should ideally look like
    the following diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击 request_code 按钮时，工作流程理想情况下应该如下图所示：
- en: '![](../Images/14604b3eab87ef6b7f70d5d87f07603b.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14604b3eab87ef6b7f70d5d87f07603b.png)'
- en: Workflow of the tkinter program. Image by Author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: tkinter 程序的工作流程。图片来自作者
- en: 'But by the execution result, the program hangs when clicking the button, and
    the status text is updated until the IO blocking code finishes executing. It means
    that the main loop is blocked when the IO request is running, causing the GUI
    interface to be unresponsive:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但从执行结果来看，点击按钮时程序会挂起，状态文本直到 IO 阻塞代码执行完才会更新。这意味着在 IO 请求运行时，主循环被阻塞，导致 GUI 界面没有响应：
- en: '![](../Images/e04a97f4a740a7340d5dbd34caac33d7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e04a97f4a740a7340d5dbd34caac33d7.png)'
- en: The app is blocked and doesn’t show query text. Image by Author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序被阻塞且不显示查询文本。图片来自作者
- en: Using [asyncio.run](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run)
    to Run Asyncio Code
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 [asyncio.run](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run)
    运行 Asyncio 代码
- en: Can we replace the requests package with the [aiohttp](https://docs.aiohttp.org/en/stable/)
    package to achieve the asynchronous invocation of IO requests?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否用 [aiohttp](https://docs.aiohttp.org/en/stable/) 包替换 requests 包来实现 IO 请求的异步调用？
- en: 'Here we first inherit the `App` class to implement a new class `AppAsyncBase`.
    In this new class, we use aiohttp to implement an `async_request` method to lay
    the foundation for subsequent asynchronous calls:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先继承 `App` 类来实现一个新的类 `AppAsyncBase`。在这个新类中，我们使用 aiohttp 实现一个 `async_request`
    方法，为后续的异步调用奠定基础：
- en: 'Readers of my previous article will know we can execute asynchronous methods
    inside synchronous code via `asyncio.run`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 读过我之前文章的读者会知道我们可以通过 `asyncio.run` 在同步代码中执行异步方法：
- en: 'Then, we implement a new class `AppAsyncRun`, by inheriting `AppAsyncBase`.
    In this new class, we override the `request_remote` method and use `asyncio.run`
    to call the `async_request` method directly:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过继承 `AppAsyncBase` 实现一个新的类 `AppAsyncRun`。在这个新类中，我们重写 `request_remote`
    方法，并使用 `asyncio.run` 直接调用 `async_request` 方法：
- en: 'Next, let’s look at the results. Because asyncio’s [event loop](https://docs.python.org/3/library/asyncio-eventloop.html)
    is executed in the main thread by default, and when the event loop is running,
    it blocks the main thread, and the main loop of tkinter is blocked and unresponsive:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看结果。由于 asyncio 的 [事件循环](https://docs.python.org/3/library/asyncio-eventloop.html)
    默认在主线程中执行，当事件循环运行时，它会阻塞主线程，从而使 tkinter 的主循环被阻塞且没有响应：
- en: '![](../Images/2f71c434e21b8b0d15edc0bcd93a2d02.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2f71c434e21b8b0d15edc0bcd93a2d02.png)'
- en: asyncio.run blocks the main loop. Image by Author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncio.run` 会阻塞主循环。图片来自作者'
- en: Integrating Asyncio with Thread-Based Programs
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Asyncio 与基于线程的程序集成
- en: Is there a way to solve the event loop blocking problem?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有解决事件循环阻塞问题的方法？
- en: 'Here we can use a separate [daemon thread](https://docs.python.org/3/library/threading.html#thread-objects)
    and then run the event loop into the daemon thread, so asyncio’s event loop will
    not block the main thread. The diagram is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以使用一个单独的 [守护线程](https://docs.python.org/3/library/threading.html#thread-objects)，然后将事件循环运行到守护线程中，这样
    asyncio 的事件循环就不会阻塞主线程。图示如下：
- en: '![](../Images/fb5957d523d6178cc237a8c68f93088c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb5957d523d6178cc237a8c68f93088c.png)'
- en: Combining tkinter and asyncio loops. Image by Author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结合 tkinter 和 asyncio 循环。图片来自作者
- en: 'Looking at the code implementation, we first inherit the `AppAsyncBase` class
    to implement a new class `AppEventLoop`. Next, override the `request_remote` method
    and use `asyncio.run_coroutine_threadsafe` to call the `async_request` method
    in the event loop. Request method in the event loop. `asyncio.run_coroutine_threadsafe`
    is also thread-safe:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 查看代码实现，我们首先继承 `AppAsyncBase` 类来实现一个新的类 `AppEventLoop`。接下来，重写 `request_remote`
    方法并使用 `asyncio.run_coroutine_threadsafe` 来在事件循环中调用 `async_request` 方法。事件循环中的请求方法
    `asyncio.run_coroutine_threadsafe` 也是线程安全的：
- en: 'Implement a `run_event_loop` method to call the `loop.run_forever` in the thread:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个`run_event_loop`方法，在线程中调用`loop.run_forever`：
- en: 'Then, use the `contextmanager` decorator to manage the lifecycle of the daemon
    thread:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`contextmanager`装饰器来管理守护线程的生命周期：
- en: 'Finally, implement the event loop integration and the app launch in the main
    method, and let’s see the result:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在主方法中实现事件循环集成和应用启动，让我们看看结果：
- en: '![](../Images/0d1f6b0932e7b4a55535ab9f9b4ac0ea.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d1f6b0932e7b4a55535ab9f9b4ac0ea.png)'
- en: The event loop running separately in the daemon thread no longer blocks. Image
    by Author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在守护线程中独立运行的事件循环不再阻塞。图像来源：作者
- en: Perfect! Click the button, the status text is changed accordingly, the whole
    GUI interface runs smoothly, and IO calls do not block the GUI ever. Mission accomplished.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！点击按钮，状态文本相应变化，整个GUI界面运行流畅，IO调用从未阻塞GUI。任务完成。
- en: Conclusion
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Although asyncio can dramatically improve the execution performance of concurrent
    programs, asyncio is not used on a large scale because it does not implement much
    of the legacy code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`asyncio`可以显著提高并发程序的执行性能，但由于它没有实现大量的遗留代码，所以尚未大规模使用。
- en: 'Today’s article, using examples from real-world coding efforts, demonstrates
    the solution to two challenges:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的文章，通过真实世界的编码示例，展示了解决两个挑战的方案：
- en: How to call the old IO code non-blocking in a new asyncio program.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在新的`asyncio`程序中以非阻塞方式调用旧的IO代码。
- en: how to use asyncio asynchronous code in an existing synchronous program to achieve
    non-blocking execution.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在现有的同步程序中使用`asyncio`异步代码实现非阻塞执行。
- en: Welcome to leave your comments and discussions. I will answer them one by one.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎留下评论和讨论。我会逐一回答。
- en: By [joining Medium](https://medium.com/@qtalen/membership), you’ll have unlimited
    access to all of my posts and those of thousands of other authors. It only costs
    you the price of a cup of coffee, but it’s a great encouragement to me.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[加入Medium](https://medium.com/@qtalen/membership)，你将无限访问我和其他数千位作者的所有文章。这只需要你一杯咖啡的价格，但对我来说是极大的鼓励。
- en: 'This article was originally published at:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初发表于：
- en: '[https://www.dataleadsfuture.com/combining-traditional-thread-based-code-and-asyncio-in-python/](https://www.dataleadsfuture.com/combining-traditional-thread-based-code-and-asyncio-in-python/)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.dataleadsfuture.com/combining-traditional-thread-based-code-and-asyncio-in-python/](https://www.dataleadsfuture.com/combining-traditional-thread-based-code-and-asyncio-in-python/)'
