- en: Finding Order in Chaos with Polynomial Chaos Expansion, using uncertainpy and
    chaospy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用多项式混沌扩展、使用 uncertainpy 和 chaospy 寻找混乱中的秩序
- en: 原文：[https://towardsdatascience.com/finding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7?source=collection_archive---------6-----------------------#2023-10-12](https://towardsdatascience.com/finding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7?source=collection_archive---------6-----------------------#2023-10-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/finding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7?source=collection_archive---------6-----------------------#2023-10-12](https://towardsdatascience.com/finding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7?source=collection_archive---------6-----------------------#2023-10-12)
- en: Here’s how to tackle chaotic problems using math, physics, Python and data science
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下面是如何利用数学、物理学、Python 和数据科学来解决混乱问题的方法
- en: '[](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)[![Piero
    Paialunga](../Images/de2185596a49484698733e85114dd1ff.png)](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)
    [Piero Paialunga](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)[![Piero
    Paialunga](../Images/de2185596a49484698733e85114dd1ff.png)](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)
    [Piero Paialunga](https://piero-paialunga.medium.com/?source=post_page-----a66487f330c7--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F254e653181d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&user=Piero+Paialunga&userId=254e653181d2&source=post_page-254e653181d2----a66487f330c7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)
    ·9 min read·Oct 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa66487f330c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&user=Piero+Paialunga&userId=254e653181d2&source=-----a66487f330c7---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F254e653181d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&user=Piero+Paialunga&userId=254e653181d2&source=post_page-254e653181d2----a66487f330c7---------------------post_header-----------)
    发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a66487f330c7--------------------------------)
    ·9 min read·2023年10月12日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa66487f330c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&user=Piero+Paialunga&userId=254e653181d2&source=-----a66487f330c7---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa66487f330c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&source=-----a66487f330c7---------------------bookmark_footer-----------)![](../Images/d4bb664d6374834cbeda94edc5ee2d95.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa66487f330c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ffinding-order-in-chaos-with-polynomial-chaos-expansion-using-uncertainpy-and-chaospy-a66487f330c7&source=-----a66487f330c7---------------------bookmark_footer-----------)![](../Images/d4bb664d6374834cbeda94edc5ee2d95.png)'
- en: Image by author generated using Midjourney
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用 Midjourney 生成
- en: 'Three years ago I moved from Rome, Italy and I started living in Cincinnati,
    Ohio, USA, after a PhD offer from University of Cincinnati. There were (and there
    are) a lot of things that I miss about my city: the food, the weather, the beauty
    of the eternal city. One thing that I absolutely don’t miss about my city is **the
    insane traffic**.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 三年前，我从意大利罗马搬到了美国俄亥俄州辛辛那提，接受了辛辛那提大学的博士offer。我非常怀念我的城市，有很多东西：美食、天气、永恒之城的美丽。我绝对不怀念我城市的一件事是**疯狂的交通**。
- en: A good friend of mine texted me the other day and said
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一个好朋友前几天给我发了短信说
- en: “Piero, today the traffic is so bad and the city is a total **chaos**”.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “皮耶罗，今天交通太糟糕了，城市一片**混乱**。”
- en: Now, obviously, I didn’t correct him (especially knowing how the traffic is
    in Rome), but the term ***chaos***has a totally different meaning in math and
    physics with respect to how we use “chaos” in our everyday lives.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，显然，我没有纠正他（尤其是知道罗马的交通情况），但术语***混乱***在数学和物理中有着与我们日常生活中使用的“混乱”完全不同的意义。
- en: 'A popular definition of chaos, when we refer to chaos in math, is the one of
    a problem that is regulated by **deterministic equations,** *but* **the evolution
    of the system is extremely dependent on the original conditions**. This means
    that even with an extremely small change in the original conditions, the evolution
    of the system can be incredibly different. To say it in the words of Lorentz¹
    this means that:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈到数学中的混乱时，一个流行的定义是：一个由**确定性方程**控制的问题，*但* **系统的演变极度依赖于初始条件**。这意味着即使初始条件发生极其微小的变化，系统的演变也可能会极其不同。用洛伦茨¹的话来说，这意味着：
- en: “The present determines the future, but the approximate present does not approximately
    determine the future.”
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “现在决定未来，但近似的现在不能近似决定未来。”
- en: ¹ [http://mpe.dimacs.rutgers.edu/2013/03/17/chaos-in-an-atmosphere-hanging-on-a-wall/](http://mpe.dimacs.rutgers.edu/2013/03/17/chaos-in-an-atmosphere-hanging-on-a-wall/)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ [http://mpe.dimacs.rutgers.edu/2013/03/17/chaos-in-an-atmosphere-hanging-on-a-wall/](http://mpe.dimacs.rutgers.edu/2013/03/17/chaos-in-an-atmosphere-hanging-on-a-wall/)
- en: This means that the only way that we are able to predict the evolution of a
    state is by considering it from a **probabilistic point of view.** Given the starting
    point of a process, we won’t be able to predict exactly the arrival point of the
    system, as it’s chaotic, but we will be able to predict it **probabilistically**,
    in the sense that we will be able to get, for example, the mean and start deviation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们能够预测状态的演变的唯一方法是从**概率视角**考虑它。给定过程的起始点，我们无法准确预测系统的到达点，因为它是混乱的，但我们能够**概率性地**预测，比如我们可以得到平均值和初始偏差。
- en: This kind of chaos can be treated numerically, for example using **Python.**
    In this blog post, we will describe the Polynomial Chaos Expansion (PCE) starting
    from the abstract Random Walk to the application on a real case with our coffee
    temperature ☕️
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种混乱可以通过数值方法处理，例如使用**Python**。在这篇博客文章中，我们将从抽象的随机游走开始，描述多项式混沌展开（PCE），并应用于一个实际案例，如我们的咖啡温度☕️。
- en: Let’s get started!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: 1\. Random Walk
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 随机游走
- en: 'The random walk is something that is well known to all the mathematicians and
    the physicists who are reading. This model has been used pretty much everywhere,
    from finance to physics, and it is very simple. It is also known in the literature
    as **Brownian motion** and it works like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 随机游走是所有阅读的数学家和物理学家都很熟悉的东西。这个模型几乎在所有地方都被使用，从金融到物理，它非常简单。它在文献中也被称为**布朗运动**，其工作原理如下：
- en: We start from a point x = 0
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从点x = 0开始
- en: With the same probability we can go from x=0 to x=1 or from x=0 to x=-1\. We
    define this point as x_1
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以相同的概率，我们可以从x=0到x=1，或者从x=0到x=-1。我们将这个点定义为x_1
- en: Again, we can increase the value of x_1 by +1 or -1\. We will define this point
    x_2.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，我们可以将x_1的值增加或减少1。我们将定义这一点为x_2。
- en: We repeat point 3 with x_2 for N-2 more times
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用x_2重复第3点N-2次
- en: For once, I think that the pseudocode is even more easy to understand than explaining
    it in words
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我觉得伪代码比用文字解释更容易理解
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now let’s explore this, shall we?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来探讨一下这个问题，好吗？
- en: 1.2 Code
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 代码
- en: In this part of the post, we will describe the Random Walk using the Python
    language code. You will need to import very basic libraries like **numpy** and
    **matplotlib.pyplot**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将使用Python语言代码描述随机游走。你需要导入像**numpy**和**matplotlib.pyplot**这样的基本库。
- en: 'This is the Random Walk code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是随机游走代码：
- en: 'If we run this, let’s say 100 times we get the following paths:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个，比如100次，我们会得到以下路径：
- en: 'What’s very interesting is that you can find the **gaussian distribution**
    if you consider the last step:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 很有趣的是，如果你考虑最后一步，你可以发现**高斯分布**。
- en: '![](../Images/d1c14e422519e82b378758908effb147.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1c14e422519e82b378758908effb147.png)'
- en: Let’s leave it here for now. I promise, we will use this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们先留在这里。我保证，我们会用到这些。
- en: 2\. Differential Equations
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 微分方程
- en: Now, all we know about life, wait, **literally**, all we know about life we
    know it because of the **differential equation.**
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关于生活的一切，等一下，**字面上**，我们所知道的关于生活的一切都是因为**微分方程**。
- en: 'The differential equations are the tools that physics use to describe the evolution
    of a system. My high school teacher explained it by saying:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 微分方程是物理学用来描述系统演变的工具。我的高中老师通过这样解释：
- en: '“To describe the world you need two things: to differentiate and to integrate.
    It’s very easy to differentiate, it’s very hard to integrate.”'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “描述世界你需要两样东西：区分和积分。区分非常容易，积分非常困难。”
- en: 'For example, let’s consider the location **y** of a squirrel climbing on the
    tree:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们考虑爬树的松鼠的**y**位置：
- en: '![](../Images/c6b50398778a8997ac8e748de167d6c2.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c6b50398778a8997ac8e748de167d6c2.png)'
- en: Image by author generated using Midjourney
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用 Midjourney 生成
- en: Let’s say that the **speed** of the squirrel is v(t) = (t/60)**2, where t =
    seconds. So our superhero start with a v(t=0) = 0 and after two minutes he gets
    to the speed v(120) = 2**2 = 4 m/s .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设**松鼠的速度**是 v(t) = (t/60)**2，其中 t = 秒。所以我们的超级英雄开始时的 v(t=0) = 0，经过两分钟，他的速度达到
    v(120) = 2**2 = 4 m/s。
- en: Given this information, what is the location of the super-squirrel?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这些信息，超级松鼠的位置在哪里？
- en: 'What we need to do is to integrate the velocity equation and we get:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是积分速度方程，然后得到：
- en: '![](../Images/272245bcb161b5f3172af92f70f346b7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/272245bcb161b5f3172af92f70f346b7.png)'
- en: How do we get that c constant? We just set what happens at t = 0\. We assume
    that our squirrel starts at height = 0 so c = 0.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何得到这个 c 常数？我们只是设置 t = 0 时发生的情况。我们假设我们的松鼠从高度 = 0 开始，所以 c = 0。
- en: 'So the location of our super squirrel that climbs the tree is the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们爬树的超级松鼠的位置如下：
- en: '![](../Images/d5eed2ee3be59a387830ec33e4c50c98.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5eed2ee3be59a387830ec33e4c50c98.png)'
- en: In general, a certain solution **y** can be seen as an integration of another
    quantity, say xand a starting condition.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个特定的解决方案 **y** 可以看作是另一量，例如 x 的积分以及一个初始条件。
- en: 'In this scheme we talked about:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方案中，我们讨论了：
- en: The time (**t**) that is the time variable (that goes from the start to the
    end of the experiment)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间（**t**），这是时间变量（从实验开始到结束）
- en: '**x**, that is the object that we are integrating (in the example above **x**
    is the velocity)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x**，即我们正在积分的对象（在上述例子中，**x**是速度）'
- en: The solution (**y**) that is the solution that we obtain integrating **x (**in
    the example above **y** is the location of the super squirrel)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案（**y**）是我们通过积分**x**得到的解决方案（在上述例子中，**y**是超级松鼠的位置）
- en: So in this case we can say that x (t) = integration of y(t).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这种情况下，我们可以说 x (t) = y(t) 的积分。
- en: '**There is more**. You can have some parameters in your system that are fixed
    but that can **change the evolution of your system.** So:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**还有更多**。你可以在系统中拥有一些固定的参数，但这些参数可以**改变系统的演变。** 所以：'
- en: x(t, list of parameters) = integration of y(t, list of parameters)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: x(t, 参数列表) = y(t, 参数列表) 的积分
- en: For example. Let’s talk about coffee. Coffee? Yes, coffee.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如。我们来谈谈咖啡。咖啡？是的，咖啡。
- en: 2.1 Newton’s law of cooling
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 牛顿的冷却定律
- en: A guy that was pretty decent in Physics (lol) named Isaac Netwon, among the
    many gifts he left us, explained how to describe the heat transfer of a hot body.
    In other words, he told us how things cool down
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一位在物理学上相当出色（哈哈）的家伙，名叫艾萨克·牛顿，在他留给我们的众多礼物中，解释了如何描述热体的热传导。换句话说，他告诉我们物体如何冷却。
- en: '![](../Images/04ef256a9a8643a6b3f82259f96b230b.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04ef256a9a8643a6b3f82259f96b230b.png)'
- en: Image by author generated using Midjourney
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用 Midjourney 生成
- en: The law of cooling proposed by Newton states that the rate of heat from the
    body to the outside is proportional to a constant **k** that is dependent on the
    surface area and its **heat transfer coefficient** and the difference between
    the temperature T at time t and the temperature of the environment T_env.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 牛顿提出的冷却定律指出，从身体到外界的热量流失速率与一个常数 **k** 成正比，该常数依赖于表面积及其**热传导系数**，以及时间 t 的温度 T 和环境温度
    T_env 之间的差异。
- en: If we want to get the **temperature (T)**, we need to integrate the **rate of
    heat (dT/dt)**. **This is the equation:**
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想获得**温度（T）**，我们需要积分**热量流失速率（dT/dt）**。**这是方程：**
- en: '![](../Images/5e0f6d8b7d153483627f834b21a08185.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e0f6d8b7d153483627f834b21a08185.png)'
- en: Image by author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: To get the temperature T, **given T_env and k (remember this!!!)**, we need
    to integrate dT/dt.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得温度 T，**给定 T_env 和 k（记住这一点！！！）**，我们需要积分 dT/dt。
- en: 3\. Wiener’s Chaos!
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 威纳的混沌！
- en: Rarely, **very rarely**, we are able to define an analytical solution for the
    differential equation. *That is why my high school professor said that it’s very
    hard to integrate*. We are more likely in need of doing a **numerical integration**,
    which means solving the differential equation in a numerical way (a.k.a. with
    an algorithm).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们**非常罕见**地能够定义微分方程的解析解。*这就是我高中教授说它很难积分的原因*。我们更可能需要进行**数值积分**，即用数值方式（也就是用算法）解决微分方程。
- en: There are super well-known methods (algorithms) for integrations, like the [trapezoidal](https://en.wikipedia.org/wiki/Trapezoidal_rule)
    or the [Riemann](https://en.wikipedia.org/wiki/Riemann_sum) sum. They work, with
    their pros and cons, and they work efficiently. They are not the problem.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些非常著名的积分方法（算法），比如[梯形规则](https://en.wikipedia.org/wiki/Trapezoidal_rule)或[黎曼和](https://en.wikipedia.org/wiki/Riemann_sum)。它们有效，有利有弊，并且高效。它们不是问题所在。
- en: The **real** problem is in the **parameters (e.g. T_env and kappa) of the differential
    equation.** Let me elaborate.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**真正**的问题在于**微分方程的参数（例如 T_env 和 kappa）**。让我详细说明一下。'
- en: Do you remember **T_env** and **k** from the equation above? We have no idea
    of what they might actually be, and it can completely change the evolution of
    our system.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得上面方程中的**T_env**和**k**吗？我们完全不知道它们实际是什么，它们可能会完全改变我们系统的演化。
- en: The beautiful mind of [**Norbert Wiener**](https://en.wikipedia.org/wiki/Norbert_Wiener)
    made a very elegant formulation of the differential equations with **additional
    random parameters.** In particular, ***and now all our talk makes sense***, the
    differential equations with random parameters are defined as **chaotic** and can
    be described using **random walks (ah-ha!) as a polynomial.** By doing this, we
    are able to understand the solution T(t) in a **probabilistic way!**
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[**诺伯特·维纳**](https://en.wikipedia.org/wiki/Norbert_Wiener)的美丽心灵为带有**额外随机参数**的微分方程提供了非常优雅的公式。特别是，***现在我们所有的讨论都很有意义了***，带有随机参数的微分方程被定义为**混沌的**，可以用**随机游走（啊哈！）作为多项式来描述**。通过这样做，我们能够以**概率方式**理解解
    T(t)！'
- en: 'I understand it can be confusing: let’s do it step by step :)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解这可能会让人困惑：让我们一步一步来 :)
- en: 3.1 The setup
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 设置
- en: 'The first thing that we need, in Python, is to define our differential equation:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Python 中需要做的第一件事是定义我们的微分方程：
- en: As we see, it’s not only a matter of **T (**our variable) but a matter of **kappa
    and T_env** too.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这不仅仅是**T**（我们的变量）的问题，还有**kappa 和 T_env**的问题。
- en: This is the function that we need to integrate. **Before doing that**, let’s
    import some friends 🦸‍♂️
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要积分的函数。**在此之前**，让我们导入一些朋友🦸‍♂️
- en: 'You will probably have an error cause you don’t have **chaospy and uncertainpy**.
    Those are our magic wizards: they implement the polynomial chaos expansion method.
    It’s super easy to install them:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到错误，因为你没有**chaospy 和 uncertainpy**。它们是我们的魔法小助手：它们实现了多项式混沌展开方法。安装它们非常简单：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3.2 Integrating the function
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 积分函数
- en: 'Let’s set up the function to **integrate** using the trapezoidal rule:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用梯形规则设置需要**积分**的函数：
- en: 'So:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以：
- en: We set the starting temperature of our coffee, let’s say T_0 = 95
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设定咖啡的初始温度，比如 T_0 = 95
- en: We set the time step of our problem, let’s say 500 time steps
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设定我们问题的时间步长，比如 500 个时间步
- en: We integrate it using the trapezoidal rule
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用梯形规则进行积分
- en: We return the time and temperature
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们返回时间和温度
- en: 3.3 About uncertainpy
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 关于 uncertainpy
- en: 'Now, I have to say this: [**uncertainpy**](https://uncertainpy.readthedocs.io/en/latest/index.html)
    **is awesome**. There are so many things you can do with it and I really recommend
    you to spend some time on it [here](https://uncertainpy.readthedocs.io/en/latest/index.html).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我得说一下：[**uncertainpy**](https://uncertainpy.readthedocs.io/en/latest/index.html)
    **非常棒**。你可以用它做很多事情，我真的推荐你花时间在[这里](https://uncertainpy.readthedocs.io/en/latest/index.html)了解一下。
- en: 'What we are going to do is the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是：
- en: We set a distribution of possible **kappa**s. For example, kappa is sampled
    from a normal distribution with a given mu and variance.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们设定一个可能的**kappa**分布。例如，kappa 从具有给定 mu 和方差的正态分布中抽取。
- en: We do the same with **T_env**
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对**T_env**做同样的处理
- en: We apply uncertainpy **and extract a distribution of possible values of Temperature
    given the input distributions**
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用 uncertainpy **并提取给定输入分布的温度可能值分布**
- en: 'The game is easy: if we know the possible distribution of the parameters **thanks
    to the Wiener’s chaos** we are able to know the distribution of the output.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏很简单：如果我们知道**得益于Wiener的混沌**参数的可能分布，我们就能知道输出的分布。
- en: 'It might sound confusing but I swear it’s going to be more clear after showing
    you the code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有点混乱，但我保证展示代码后会更清楚：
- en: The model is defined with the **coffee_cup**, which is our differential equation.
    We then define the parameter distributions (using **chaospy**) and define the
    corresponding parameters dictionary.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 模型通过**coffee_cup**定义，这就是我们的微分方程。接着，我们定义参数分布（使用**chaospy**）并定义相应的参数字典。
- en: Now. For each value of kappa and T_env we have a differential equation with
    different parameters and different Temperatures T(t), that are the result of **integration**.
    Thanks to the use of the magic **chaospy** the solutions become a **distribution**
    with mean and std.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在。对于每个 kappa 和 T_env 值，我们有一个具有不同参数和不同温度 T(t) 的微分方程，这些是**积分**的结果。得益于神奇的**chaospy**，解决方案变成了一个具有均值和标准差的**分布**。
- en: 'Let’s see how:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何操作：
- en: '**That’s that!** (like Biggie)**. So easy.**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**就是这样！**（就像 Biggie 所说）**。非常简单。**'
- en: 3.4 The whole thing
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4 整体内容
- en: 'The whole thing can be put in this single block of code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 整个内容可以放在这个代码块中：
- en: '![](../Images/96b4cb1096b1d0fa4b11ebe07a963aed.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96b4cb1096b1d0fa4b11ebe07a963aed.png)'
- en: Isn’t this beautiful? We are able to convert the **distribution of the parameters
    in the input** in the **distribution of the result of the output.** At time t=0,
    the temperature is the T= T_0 = 95\. When the time increases, the **uncertainty
    in the parameters** become more and more present. We have a big uncertainty (let’s
    say from 5 to 30) at Time = 200 minutes, it could be cold or a little bit hot
    depending on k and T_env.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这难道不美好吗？我们能够将**输入参数的分布**转化为**输出结果的分布**。在时间 t=0 时，温度是 T= T_0 = 95。随着时间的推移，**参数的不确定性**变得越来越明显。在时间
    = 200 分钟时，我们有一个很大的不确定性（假设从 5 到 30），这取决于 k 和 T_env，可能会很冷或稍微有点热。
- en: 4\. Results
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 结果
- en: 'In this blog post, we described the beautiful **chaospy and uncertainpy libraries**.
    These libraries allowed us to treat the **Wiener Chaos** problem, which uses the
    **Random Walk** to define a form of **polynomial chaos**.This polynomial chaos
    is used to treat **differential equations** with distributions instead of **parameters**.
    We did this in the following order:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我们描述了美妙的**chaospy 和 uncertainpy 库**。这些库使我们能够处理**Wiener 混沌**问题，它使用**随机游走**来定义一种**多项式混沌**。这种多项式混沌用于处理**带有分布的微分方程**，而不是**参数**。我们按以下顺序进行了操作：
- en: We described the **random walk** in Chapter 1.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在第 1 章中描述了**随机游走**。
- en: We described **differential equations** in Chapter 2\. In particular we described
    the Netwon Cooling Law.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在第 2 章中描述了**微分方程**。特别是我们描述了牛顿冷却定律。
- en: We described **chaos** according to **Wiener** and applied the **polynomial
    chaos in** Chapter 3.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们按照**Wiener**的描述了**混沌**并在第 3 章中应用了**多项式混沌**。
- en: 5\. Conclusions
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 结论
- en: 'If you liked the article and you want to know more about machine learning,
    or you just want to ask me something, you can:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章并想了解更多关于机器学习的内容，或者你只是想问我一些问题，你可以：
- en: A. Follow me on [**Linkedin**](https://www.linkedin.com/in/pieropaialunga/),
    where I publish all my stories
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: A. 在 [**Linkedin**](https://www.linkedin.com/in/pieropaialunga/) 上关注我，我会发布所有的故事。
- en: B. Subscribe to my [**newsletter**](https://piero-paialunga.medium.com/subscribe).
    It will keep you updated about new stories and give you the chance to text me
    to receive all the corrections or doubts you may have.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: B. 订阅我的 [**通讯**](https://piero-paialunga.medium.com/subscribe)。它将让你了解新故事，并给你机会与我联系，获取所有可能的更正或疑问。
- en: C. Become a [**referred member**](https://piero-paialunga.medium.com/membership),
    so you won’t have any “maximum number of stories for the month” and you can read
    whatever I (and thousands of other Machine Learning and Data Science top writers)
    write about the newest technology available.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: C. 成为一个 [**会员**](https://piero-paialunga.medium.com/membership)，这样你就不会有“每月故事的最大数量限制”，可以阅读我（以及成千上万其他机器学习和数据科学顶级作者）写的关于最新技术的内容。
