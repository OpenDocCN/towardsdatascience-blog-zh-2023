- en: Movie Recommendations with Neo4j
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Neo4j 的电影推荐
- en: 原文：[https://towardsdatascience.com/movie-recommendations-with-neo4j-adaad7c9bf2b](https://towardsdatascience.com/movie-recommendations-with-neo4j-adaad7c9bf2b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/movie-recommendations-with-neo4j-adaad7c9bf2b](https://towardsdatascience.com/movie-recommendations-with-neo4j-adaad7c9bf2b)
- en: Building a simple movie recommender with Python and Neo4j
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 和 Neo4j 构建一个简单的电影推荐系统
- en: '[](https://dpanagop-53386.medium.com/?source=post_page-----adaad7c9bf2b--------------------------------)[![Dimitris
    Panagopoulos](../Images/437f218b1a27ed01a98270817c76729f.png)](https://dpanagop-53386.medium.com/?source=post_page-----adaad7c9bf2b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----adaad7c9bf2b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----adaad7c9bf2b--------------------------------)
    [Dimitris Panagopoulos](https://dpanagop-53386.medium.com/?source=post_page-----adaad7c9bf2b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dpanagop-53386.medium.com/?source=post_page-----adaad7c9bf2b--------------------------------)[![Dimitris
    Panagopoulos](../Images/437f218b1a27ed01a98270817c76729f.png)](https://dpanagop-53386.medium.com/?source=post_page-----adaad7c9bf2b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----adaad7c9bf2b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----adaad7c9bf2b--------------------------------)
    [Dimitris Panagopoulos](https://dpanagop-53386.medium.com/?source=post_page-----adaad7c9bf2b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----adaad7c9bf2b--------------------------------)
    ·7 min read·Feb 19, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----adaad7c9bf2b--------------------------------)
    ·阅读时间 7 分钟·2023年2月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/924eb1da869fd77b718b1eaa3ffc9e78.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/924eb1da869fd77b718b1eaa3ffc9e78.png)'
- en: Image created by author using stable diffusion and code described in [https://bytexd.com/get-started-with-stable-diffusion-google-colab-for-ai-generated-art/](https://bytexd.com/get-started-with-stable-diffusion-google-colab-for-ai-generated-art/)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用稳定扩散和[https://bytexd.com/get-started-with-stable-diffusion-google-colab-for-ai-generated-art/](https://bytexd.com/get-started-with-stable-diffusion-google-colab-for-ai-generated-art/)中的代码创建
- en: '**Introduction**'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: Creating recommendations is a common use case of machine learning. In this post,
    we will demonstrate how to use a graph database to create a simple movie recommendation
    system. The proposed methods are not state-of-the-art. But using graph databases
    is easy to implement and easy to explain. They could form the starting point for
    a simple recommender that could be used to serve results fast and/or be used as
    a baseline for evaluating more complex systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建推荐是机器学习的一个常见用例。在这篇文章中，我们将演示如何使用图数据库创建一个简单的电影推荐系统。所提出的方法不是最先进的。但使用图数据库的实现简单且易于解释。它们可以成为一个简单推荐系统的起点，该系统可以快速提供结果和/或作为评估更复杂系统的基准。
- en: If a reader would like to experiment, then he/she can use [Neo4j’s sandbox](https://neo4j.com/sandbox/)
    and [Google’s colab](https://colab.research.google.com/) to get a system ready
    in just one or two minutes. For this article, we will be using data from [GroupLens.org](https://grouplens.org/datasets/movielens/)
    (i.e., the “[1M Dataset](https://files.grouplens.org/datasets/movielens/ml-1m.zip)”).
    We will also use a small data set to create a minimal graph with only a few nodes
    so that can easily check calculations. All code and data for the minimal graph
    can be found in the author’s [GitHub](https://github.com/dpanagop/data_analytics_examples/tree/master/neo4j_recommender).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果读者希望进行实验，他/她可以使用 [Neo4j 的沙盒](https://neo4j.com/sandbox/) 和 [Google 的 Colab](https://colab.research.google.com/)
    在一两分钟内准备好系统。对于本文，我们将使用 [GroupLens.org](https://grouplens.org/datasets/movielens/)（即
    “[1M 数据集](https://files.grouplens.org/datasets/movielens/ml-1m.zip)”）中的数据。我们还将使用一个小数据集来创建一个包含少量节点的最小图，以便可以轻松检查计算。所有用于最小图的代码和数据可以在作者的
    [GitHub](https://github.com/dpanagop/data_analytics_examples/tree/master/neo4j_recommender)
    中找到。
- en: 'Please note that:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：
- en: Neo4j Graph Data Science plug-in should be installed in Neo4j (it is already
    installed in Neo4j’s sandbox)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Neo4j Graph Data Science 插件应安装在 Neo4j 中（它已在 Neo4j 的沙盒中安装）
- en: In Python, “neo4j-driver” and “graphdatascience” libraries should be installed.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python 中，应安装“neo4j-driver”和“graphdatascience”库。
- en: To install Python libraries in (2) you can use pip
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在(2)中安装 Python 库，可以使用 pip
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Connect to Neo4j
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到 Neo4j
- en: After loading the necessary libraries, the first step is to connect to Neo4j.
    This is done with the following snippet
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载必要的库后，第一步是连接到 Neo4j。可以使用以下代码片段完成此操作
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In case we are using Neo4j’s sandbox, we can find the URL and password in the
    “Connect via drivers” tab.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 Neo4j 的沙盒，我们可以在“通过驱动程序连接”选项卡中找到 URL 和密码。
- en: '![](../Images/24a039724a193e603591d74709701514.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24a039724a193e603591d74709701514.png)'
- en: Connection details to Neo4j’s sandbox (screen shoot of Neo4j sandbox by the
    author)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Neo4j 沙盒的连接详细信息（作者提供的 Neo4j 沙盒屏幕截图）
- en: Loading data to Neo4j
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据加载到 Neo4j
- en: 'As mentioned in the introduction, we are going to use data on movie ratings.
    In especial, we are going to use MovieLens 1M dataset. This dataset contains 1
    million ratings from 6000 movies on 4000 movies. It consists of three separate
    text files:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所提到的，我们将使用电影评分数据。特别是，我们将使用 MovieLens 1M 数据集。该数据集包含来自 6000 部电影的 1 百万条评分。它由三个独立的文本文件组成：
- en: '**movies.dat**: data on movies in the form of MovieID::Title::Genres'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**movies.dat**：电影数据，格式为 MovieID::Title::Genres'
- en: '**users.dat**: data on users in the form of UserID::Gender::Age::Occupation::Zip-code'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**users.dat**：用户数据，格式为 UserID::Gender::Age::Occupation::Zip-code'
- en: '**ratings.dat**: data on ratings in the form of UserID::MovieID::Rating::Timestamp'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ratings.dat**：评分数据，格式为 UserID::MovieID::Rating::Timestamp'
- en: '![](../Images/04e1341dad428e4aba856bc2f9243ecf.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04e1341dad428e4aba856bc2f9243ecf.png)'
- en: First five rows of movies, user and ratings text files (image by the author)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 电影、用户和评分文本文件的前五行（图像由作者提供）
- en: We will create two kinds of nodes. One that represents users and another one
    representing movies. We will also create a relationship between user nodes and
    movie nodes to represent the fact that a user has rated a movie. As an attribute
    of this relationship, we will use the rating score. The graph database schema
    is shown below.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两种类型的节点。一种代表用户，另一种代表电影。我们还将创建用户节点和电影节点之间的关系，以表示用户对电影的评分。作为该关系的属性，我们将使用评分分数。图数据库的模式如下所示。
- en: '![](../Images/167dec0bd968fd456259cdccafca303d.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/167dec0bd968fd456259cdccafca303d.png)'
- en: Schema of graph database (screen shot by the author)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据库的模式（作者提供的屏幕截图）
- en: Using the graph data science library is pretty straightforward to load pandas
    dataframes to Neo4j. For example, the code below loads users.dat
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用图数据科学库将 pandas 数据框加载到 Neo4j 是相当简单的。例如，下面的代码加载 users.dat
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Ratings.dat file is quite big and it cannot be loaded all at once. Hence, we
    need to split the dataframe and load it into chunks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Ratings.dat 文件相当大，不能一次性加载。因此，我们需要将数据框分割并分块加载。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Minimal example graph
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小示例图
- en: 'To help the reader understand the methods we are going to use, we will use
    the following minimal graph as an example. It has:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助读者理解我们将要使用的方法，我们将使用以下最小图作为示例。它包含：
- en: three user nodes numbered 1, 2 and 3
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个用户节点，编号为 1、2 和 3
- en: four movie nodes
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个电影节点
- en: seven rating relationships, in parenthesis one can see the actual rating
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 七条评分关系，括号中可以看到实际评分
- en: '![](../Images/be307ce30f04134e868798f1431a07ed.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be307ce30f04134e868798f1431a07ed.png)'
- en: Minimal example graph (image by the author)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最小示例图（图像由作者提供）
- en: Finding similar movies using cypher
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cypher 查找相似电影
- en: Using cypher, it is easy to find movies that are similar to a given one. Given
    a movie m1, one can find all users that have rated it with a top score (5) and
    then return all other movies those users have also rated as excellent. Using the
    number of paths that connect m1 to each of the other movies, we can calculate
    a similarity score.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 cypher，找到与给定电影相似的电影非常简单。给定一部电影 m1，可以找到所有以最高评分（5）对其进行评分的用户，然后返回这些用户也评分为优秀的其他所有电影。通过计算连接
    m1 和每部其他电影的路径数量，我们可以计算相似度得分。
- en: For example, the cypher query for finding similar movies to “Toy Story (1995)”
    is the following.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查找与“玩具总动员（1995）”相似电影的 cypher 查询如下。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In our minimal graph example, this will return “Jumanji (1995)” which is connected
    to “Toy Story (1995)” with two paths. One passing through user 1 and the other
    passing through user 2.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最小图示例中，这将返回“勇敢者游戏（1995）”，它与“玩具总动员（1995）”通过两条路径连接。一条路径经过用户 1，另一条路径经过用户 2。
- en: When we use our regular graph with one million ratings, the five most similar
    movies to “Toy Story (1995)” are
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用我们常规的包含一百万条评分的图时，与“玩具总动员（1995）”最相似的五部电影是
- en: 'Star Wars: Episode IV — A New Hope (1977)'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 《星球大战：第四集 — 新希望（1977）》
- en: Toy Story 2 (1999)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 《玩具总动员 2（1999）》
- en: Raiders of the Lost Ark (1981)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 《夺宝奇兵（1981）》
- en: 'Star Wars: Episode V — The Empire Strikes Back…'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 《星球大战：第五集 — 帝国反击战……》
- en: Shawshank Redemption, The (1994)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 《肖申克的救赎（1994）》
- en: While for “Matrix, The (1999)” the top 5 is
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于“黑客帝国（1999）”，前五名是
- en: 'Star Wars: Episode IV — A New Hope (1977)'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 《星球大战：第四集 — 新希望（1977）》
- en: 'Star Wars: Episode V — The Empire Strikes Back…'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 星球大战：帝国反击战……
- en: Raiders of the Lost Ark (1981)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 夺宝奇兵（1981）
- en: American Beauty (1999)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 美国美人（1999）
- en: Sixth Sense, The (1999)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第六感（1999）
- en: Some readers might have mixed feelings about those results. Which is understandable.
    Popular movies, with high ratings, tend to dominate when we use this method. And
    the truth is that one million ratings are not enough to build a recommender. Experience
    with using MovieLens with various recommendation methods has shown that increasing
    the number of ratings, improves recommendations. Still, one should note that we
    are able to find similar movies by leveraging graphs just by using a simple query.
    A more sophisticated method would be to use a similar method as described in the
    next section for finding similar users.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一些读者可能对这些结果感到复杂，这是可以理解的。使用这种方法时，受欢迎的电影和高评分的电影往往占据主导地位。事实是，一百万条评分还不足以建立一个推荐系统。使用MovieLens和各种推荐方法的经验表明，增加评分数量可以改善推荐。然而，应该注意的是，我们仅通过简单查询就能利用图找到相似的电影。更复杂的方法是使用类似于下一节描述的查找相似用户的方法。
- en: Suggesting movies to users
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向用户推荐电影
- en: 'Using Neo4j we can apply [collaborative filtering](https://en.wikipedia.org/wiki/Collaborative_filtering)
    to recommend movies to a user. A high-level description of the collaborative filtering
    method is that the process of recommending new movies to a user is done in two
    steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Neo4j，我们可以应用[协同过滤](https://en.wikipedia.org/wiki/Collaborative_filtering)来向用户推荐电影。协同过滤方法的高层次描述是，向用户推荐新电影的过程分为两个步骤：
- en: we find similar users to our user,
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们找到与我们的用户相似的用户，
- en: we use ratings of users found in step (1) to suggest new movies.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用步骤（1）中找到的用户评分来建议新电影。
- en: Calculating user similarity
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算用户相似度
- en: We are going to use Jaccard similarity to detect similar users. In our graph-theoretic
    setting, Jaccard similarity between two nodes is the ratio of the number of nodes
    both of them are connected to divided by the number of nodes that are connected
    to at least one of them (excluding the two nodes we are calculating the similarity
    of).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Jaccard相似度来检测相似用户。在我们的图论设置中，两个节点之间的Jaccard相似度是它们都连接的节点数量与连接到至少一个节点的节点数量的比率（不包括我们计算相似度的两个节点）。
- en: 'In our minimal graph example, user nodes 1 and 2:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最简图示例中，用户节点1和2：
- en: are both connected to “Toy Story (1995)” and “Jumanji (1995)”
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 都连接到“玩具总动员（1995）”和“勇敢的心（1995）”
- en: are connected to “Toy Story (1995)”, “Jumanji (1995)” and “Waiting to Exhale
    (1995)”
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到“玩具总动员（1995）”、“勇敢的心（1995）”和“呼吸等待（1995）”
- en: Hence Jaccard similarity of users 1 and 2 is 2/3.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用户1和用户2的Jaccard相似度为2/3。
- en: 'Similarly, users 1 and 3:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，用户1和用户3：
- en: are both connected to “Toy Story (1995)”
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 都连接到“玩具总动员（1995）”
- en: are connected to “Toy Story (1995)”, “Jumanji (1995)”, “Waiting to Exhale (1995)”
    and “GoldenEye (1995)”
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到“玩具总动员（1995）”、“勇敢的心（1995）”、“呼吸等待（1995）”和“黄金眼（1995）”
- en: Hence Jaccard similarity of users 1 and 3 is 1/4.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此用户1和用户3的Jaccard相似度为1/4。
- en: Neo4j’s Graph Data Science library can calculate Jaccard’s similarity. First,
    we need to create a subgraph (or projection as Neo4j calls it) of the nodes and
    relationships we want to take under consideration when calculating Jaccard similarity.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Neo4j的图数据科学库可以计算Jaccard相似度。首先，我们需要创建一个子图（或者Neo4j称之为投影），包含我们在计算Jaccard相似度时需要考虑的节点和关系。
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then, we calculate Jaccard similarity and store the results in a pandas dataframe.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们计算Jaccard相似度并将结果存储在pandas数据框中。
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/563525a5be903bab42040e5cec1d3a0c.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/563525a5be903bab42040e5cec1d3a0c.png)'
- en: First five rows of pandas contain user similarities for our minimal example
    graph (image by the author)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: pandas的前五行包含我们最简图示例图的用户相似度（图像由作者提供）
- en: Finally, we create a new relationship between user nodes that have as an attribute
    the calculated similarity between them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在用户节点之间创建一个新的关系，作为它们之间计算出的相似度的属性。
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To recommend movies for a user (user1) we calculate a rank for movies the user
    has not rated using a weighted average rating of movies other users have seen
    where the weight is Jaccard similarity.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向用户（user1）推荐电影，我们计算用户尚未评分的电影的排名，使用其他用户观看过的电影的加权平均评分，其中权重为Jaccard相似度。
- en: '![](../Images/937375bcd92e5f7e261e5a4057986ae8.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/937375bcd92e5f7e261e5a4057986ae8.png)'
- en: The formula for calculating the weighted average rating (image by the author)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 计算加权平均评分的公式（图像由作者提供）
- en: We also add the logarithm of the number of paths that connect the user (user1)
    to a movie. This is because we want to boost movies that are connected to (user1)
    with more than one user. The corresponding cypher query is
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了连接用户（user1）到电影的路径数量的对数。这是因为我们想要提升与（user1）连接的有多个用户的电影。对应的 cypher 查询是
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For our minimal graph example, the result for user 3 is:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最小图示例，用户 3 的结果是：
- en: Jumanji (1995) with a score of 5.69
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《勇敢者游戏》（1995年），评分为 5.69
- en: Waiting to Exhale (1995) with a score of 3.00
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《呼吸等待》（1995年），评分为 3.00
- en: '![](../Images/fe6bd4582a809ea07e3316c2625267dd.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe6bd4582a809ea07e3316c2625267dd.png)'
- en: Top 10 movie recommendations (left) for a user and top 10 rated movies (right)
    for a user (image by thae author)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的前 10 部电影推荐（左侧）和用户的前 10 部评分最高的电影（右侧）（图片由作者提供）
- en: Conclusions
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Hopefully, this article has demonstrated the benefits of using a graph database
    to quickly create a recommendation engine. While this is not state-of-the-art,
    it is easily implemented and maintained. As a side bonus, I hope the article has
    also provide some useful tricks for combining Python with Neo4j.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章已经展示了使用图数据库来快速创建推荐引擎的好处。虽然这不是最先进的技术，但它易于实现和维护。作为附加 bonus，我希望这篇文章也提供了一些将
    Python 与 Neo4j 结合的有用技巧。
- en: 'Citation of dataset used:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的数据集引用：
- en: 'F. Maxwell Harper and Joseph A. Konstan. 2015\. The MovieLens Datasets: History
    and Context. ACM Transactions on Interactive Intelligent Systems (TiiS) 5, 4,
    Article 19 (December 2015), 19 pages. DOI=[http://dx.doi.org/10.1145/2827872](http://dx.doi.org/10.1145/2827872)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: F. Maxwell Harper 和 Joseph A. Konstan. 2015\. 《MovieLens 数据集：历史与背景》。ACM 互动智能系统交易（TiiS）5,
    4, 文章 19（2015年12月），19页。DOI=[http://dx.doi.org/10.1145/2827872](http://dx.doi.org/10.1145/2827872)
