- en: 'A Data Scientist’s Guide to Python Typing: Boosting Code Clarity'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家的Python类型指南：提升代码清晰度
- en: 原文：[https://towardsdatascience.com/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05](https://towardsdatascience.com/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05](https://towardsdatascience.com/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05)
- en: The importance of typing and how it can be carried in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型的重要性以及如何在Python中实现
- en: '[](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)[](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)[](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)
    ·4 min read·Jul 31, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)
    ·阅读时长4分钟·2023年7月31日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/76d1ae8f42e8d81de522593a525b0fd6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76d1ae8f42e8d81de522593a525b0fd6.png)'
- en: Photo by [Pankaj Patel](https://unsplash.com/@pankajpatel?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Pankaj Patel](https://unsplash.com/@pankajpatel?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: What is ‘Typing’?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是‘类型’？
- en: By typing we are not referring to physically touching our keyboard, but rather
    the datatypes our variables (and functions) take on in our Python code!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的类型不是指物理上触碰键盘，而是我们Python代码中变量（和函数）所采用的数据类型！
- en: Python inherently is a [**dynamic language**](https://en.wikipedia.org/wiki/Dynamic_programming_language),
    which means there is no formal requirement to declare what datatype our variables
    take on. For example, a variable may start as an integer but change to a string
    somewhere else in the code. This flexibility can often lead to errors during runtime
    that can be hard to debug.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 本质上是[**动态语言**](https://en.wikipedia.org/wiki/Dynamic_programming_language)，这意味着没有正式的要求来声明变量的数据类型。例如，一个变量可能在开始时是整数，但在代码的其他地方变成字符串。这种灵活性常常会导致在运行时出现难以调试的错误。
- en: Other languages are [**statically typed**](https://www.techopedia.com/definition/22321/statically-typed#:~:text=Statically%20typed%20is%20a%20programming,with%20variables%2C%20not%20with%20values.),
    this means their variable types need to be explicitly declared and cannot change
    during runtime. If a variable is declared as an integer, it has to be an integer
    through the whole runtime of the program. Examples of statically typed languages
    are [**Fortran**](https://medium.com/towards-data-science/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89)
    and C++.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其他语言是[**静态类型**](https://www.techopedia.com/definition/22321/statically-typed#:~:text=Statically%20typed%20is%20a%20programming,with%20variables%2C%20not%20with%20values.)的，这意味着它们的变量类型需要明确声明，并且在运行时不能更改。如果一个变量被声明为整数，它在程序运行期间必须始终是整数。静态类型语言的例子有[**Fortran**](https://medium.com/towards-data-science/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89)和C++。
- en: However, in recent years Python has developed support for typing and nowadays
    it is an industry-wide standard. This is especially true for Data Scientists who
    need to deploy robust machine-learning models into production.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，近年来Python已经开发了对类型的支持，现在它已成为行业标准。对于需要将稳健的机器学习模型投入生产的数据科学家尤为重要。
- en: In this post, I want to take you through the basic syntax and processes behind
    typing in Python and how to use the `mypy` package, which allows us to seamlessly
    type check our code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想带你了解Python中的基本语法和类型过程，以及如何使用`mypy`包，这使我们能够无缝地检查代码的类型。
- en: Typing is actually recommended as shown by [**PEP 484**](https://peps.python.org/pep-0484/)**.**
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如[**PEP 484**](https://peps.python.org/pep-0484/)**所示，实际上推荐使用类型注解。**
- en: Basic Example
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本示例
- en: 'Let’s walk through a simple example to explain the need for type-checking in
    Python. Below we have a function that adds two numbers together called, ingeniously,
    `adding_two_numbers`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的示例来解释在 Python 中进行类型检查的必要性。下面我们有一个将两个数字相加的函数，巧妙地命名为 `adding_two_numbers`：
- en: GitHub Gist by author.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: 'What is the output from the two `print` statements? Well, the first one is:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `print` 语句的输出是什么？首先是：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is expected. However, the output of the second `print` statement is:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期中的情况。然而，第二个 `print` 语句的输出是：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Despite this result being ‘technically’ correct, it is clearly not what we were
    trying to achieve with this particular function.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个结果在‘技术上’是正确的，但显然不是我们在这个特定函数中试图实现的目标。
- en: 'To help overcome this issue happening, we can add *type annotations* to the
    function to make clearer the type of arguments we need to pass in and the expected
    *return type*:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助解决这个问题，我们可以为函数添加 *类型注解* 以明确我们需要传递的参数类型和预期的 *返回类型*：
- en: GitHub Gist by author.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: In the above example, we have made it clear that `num1` and `num2` *should*
    both be integers and the expected output *should* be an integer as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们明确了 `num1` 和 `num2` *应该* 都是整数，预期的输出 *应该* 也是整数。
- en: It is important to mention that these are truly just ‘hints’ and if you pass
    in a string there will still be no runtime error when running the program as Python
    fundamentally is dynamically typed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要提到，这些真的只是‘提示’，如果你传入一个字符串，在运行程序时仍然不会出现运行时错误，因为 Python 本质上是动态类型的。
- en: 'So, the general syntax for declaring types is:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，声明类型的通用语法是：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Furthermore, if you are unsure what datatype your objects or variable is, you
    can check it by calling the `type()` function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你不确定对象或变量的数据类型，你可以通过调用 `type()` 函数来检查：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Typing Module
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型模块
- en: What if you want a specific function to return a `list`, but every element in
    the `list` must be an integer? Unfortunately, Python’s inherent types can’t quite
    do this easily. This is where we use the `typing` package, which can be installed
    by running `pip install typing`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让特定函数返回一个 `list`，但 `list` 中的每个元素都必须是整数怎么办？不幸的是，Python 的固有类型不能很容易做到这一点。这就是我们使用
    `typing` 包的地方，可以通过运行 `pip install typing` 来安装。
- en: 'We can use the `typing` package to declare our datatype a lot more intricately.
    Below are some examples:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `typing` 包来更精细地声明我们的数据类型。以下是一些示例：
- en: GitHub Gist by author.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: There are also many more types available within the `typing` package to meet
    ‘any’ variable you come across (no pun intended!). [See this cheat sheet](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)
    if you are interested in delving further in.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`typing` 包中还有许多其他类型可以满足你遇到的‘任何’变量（无意的双关语！）。[查看这个备忘单](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)如果你有兴趣深入了解。'
- en: Creating Types
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建类型
- en: 'You can also create your own types by simply constructing a class. Below is
    an example of a `dog` class that I made:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过简单地构造一个类来创建自己的类型。下面是我制作的 `dog` 类的示例：
- en: GitHub Gist by author.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: MyPy Tutorial
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MyPy 教程
- en: '`mypy` is a package that is now the industry standard for checking types in
    your Python code. It is used in virtually any production deployed code, especially
    machine learning algorithms, so it is well worth knowing as a Data Scientist.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`mypy` 是现在检查 Python 代码类型的行业标准包。它几乎在所有生产部署的代码中使用，特别是机器学习算法，因此作为数据科学家掌握它是非常值得的。'
- en: To get started with `mypy`, simply install it as `pip install mypy`. Then to
    use it, all you need to do is run `mypy <file_name.py>`. Thats really all there
    is to it!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 `mypy`，只需将其安装为 `pip install mypy`。然后要使用它，你只需运行 `mypy <file_name.py>`。这就是全部！
- en: See [here](https://mypy.readthedocs.io/en/stable/) if you want to learn some
    of the more advanced features in mypy.
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想学习 mypy 的一些更高级的功能，请查看[这里](https://mypy.readthedocs.io/en/stable/)。
- en: 'Let’s go over an example to make this more concrete. If we go back to our previous
    function `adding_two_numbers`, which looked like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来使这个概念更具体。如果我们回到之前的函数 `adding_two_numbers`，它看起来是这样的：
- en: GitHub Gist by author.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: 'And, we run `mypy adding_two_numbers.py`, the following output looks like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们运行 `mypy adding_two_numbers.py`，输出结果如下：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the errors are only for line 6 where we have passed in string types
    but the function expected integer types. It even states this in the error message.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，错误仅出现在第 6 行，因为我们传入了字符串类型，但函数期望的是整数类型。错误信息中甚至指出了这一点。
- en: It raised no errors for the `print` statement on line 5 as we passed in and
    the function returned the expected integer types.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第 5 行的 `print` 语句没有引发错误，因为我们传入了正确的类型，函数也返回了预期的整数类型。
- en: 'Summary: Pros & Cons'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结：优缺点
- en: 'Let’s wrap up this article if listing some of the main pros and cons of typing
    in Python:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下 Python 类型注解的一些主要优缺点：
- en: Pros
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: '*Helps with* [***linting***](https://en.wikipedia.org/wiki/Lint_(software))
    *and reduces the chance of bugs occurring within your code.*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有助于* [***linting***](https://en.wikipedia.org/wiki/Lint_(software)) *并减少代码中出现错误的可能性。*'
- en: '*Improves readability and documentation of your code.*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提高代码的可读性和文档化。*'
- en: Cons
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: '*Time spent implementing and writing the types.*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实施和编写类型的时间。*'
- en: '*Backward compatibility on some types is not available for all Python versions.*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*某些类型的向后兼容性并非所有 Python 版本都支持。*'
- en: Overall
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总体而言
- en: Typing is an industry standard procedure for most Python code, and that includes
    data science work. Therefore, it is an important and also relatively easy skill
    to learn and implement in your work. Not only will it make your code more intuitive
    but it will help prevent your machine learning model breaking in production!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类型注解是大多数 Python 代码中的行业标准程序，包括数据科学工作。因此，这是一项重要且相对容易学习和实现的技能。这不仅会使你的代码更直观，而且有助于防止你的机器学习模型在生产环境中出现故障！
- en: References & Further Reading
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料与进一步阅读
- en: '[*mypy typing cheat sheet*](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*mypy 类型速查表*](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)'
- en: '[*Further detailed of Python typing*](https://realpython.com/python-type-checking/)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*Python 类型详细信息*](https://realpython.com/python-type-checking/)'
- en: Another Thing!
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个事项！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的新闻通讯，[**数据揭秘**](https://dishingthedata.substack.com/)，每周分享成为更好的数据科学家的技巧。没有“废话”或“诱饵”，只有来自实践数据科学家的纯粹可操作见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----194371b4ef05--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://newsletter.egorhowell.com/?source=post_page-----194371b4ef05--------------------------------)
    [## 数据揭秘 | Egor Howell | Substack'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读《数据揭秘》，由 Egor Howell 编写的 Substack 出版物，内容包括…
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----194371b4ef05--------------------------------)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----194371b4ef05--------------------------------)'
- en: Connect With Me!
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**领英**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
