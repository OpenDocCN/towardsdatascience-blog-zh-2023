- en: Schedule and Invoke Notebooks as Web Services using Jupyter API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jupyter API 调度和调用笔记本作为网络服务
- en: 原文：[https://towardsdatascience.com/schedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008?source=collection_archive---------3-----------------------#2023-08-10](https://towardsdatascience.com/schedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008?source=collection_archive---------3-----------------------#2023-08-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/schedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008?source=collection_archive---------3-----------------------#2023-08-10](https://towardsdatascience.com/schedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008?source=collection_archive---------3-----------------------#2023-08-10)
- en: '[](https://medium.com/@tfoldi?source=post_page-----fb71c1e8a008--------------------------------)[![Tamas
    Foldi](../Images/0453bdb63701bda8c68490b08e8d4a24.png)](https://medium.com/@tfoldi?source=post_page-----fb71c1e8a008--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fb71c1e8a008--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fb71c1e8a008--------------------------------)
    [Tamas Foldi](https://medium.com/@tfoldi?source=post_page-----fb71c1e8a008--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@tfoldi?source=post_page-----fb71c1e8a008--------------------------------)[![Tamas
    Foldi](../Images/0453bdb63701bda8c68490b08e8d4a24.png)](https://medium.com/@tfoldi?source=post_page-----fb71c1e8a008--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fb71c1e8a008--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fb71c1e8a008--------------------------------)
    [Tamas Foldi](https://medium.com/@tfoldi?source=post_page-----fb71c1e8a008--------------------------------)'
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa586bc473bbf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fschedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008&user=Tamas+Foldi&userId=a586bc473bbf&source=post_page-a586bc473bbf----fb71c1e8a008---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fb71c1e8a008--------------------------------)
    ·6 min read·Aug 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffb71c1e8a008&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fschedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008&user=Tamas+Foldi&userId=a586bc473bbf&source=-----fb71c1e8a008---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa586bc473bbf&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fschedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008&user=Tamas+Foldi&userId=a586bc473bbf&source=post_page-a586bc473bbf----fb71c1e8a008---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fb71c1e8a008--------------------------------)
    ·6 min read·2023年8月10日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Ffb71c1e8a008&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fschedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008&user=Tamas+Foldi&userId=a586bc473bbf&source=-----fb71c1e8a008---------------------clap_footer-----------)'
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffb71c1e8a008&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fschedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008&source=-----fb71c1e8a008---------------------bookmark_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffb71c1e8a008&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fschedule-and-invoke-notebooks-as-web-services-using-jupyter-api-fb71c1e8a008&source=-----fb71c1e8a008---------------------bookmark_footer-----------)'
- en: Thanks to serverless cloud services like GCP CloudRunner and Cloud Functions,
    we don’t need to manage costly virtual machines or servers to deploy our notebooks
    and execute them periodically. With Jupyter API, you can lift and shift your notebooks
    to the cloud, turn them into web services and integrate them with scheduling.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢像 GCP CloudRunner 和 Cloud Functions 这样的无服务器云服务，我们不再需要管理昂贵的虚拟机或服务器来部署我们的笔记本并定期执行它们。通过
    Jupyter API，你可以将笔记本迁移到云端，将其转换为网络服务，并与调度系统集成。
- en: '![](../Images/35bed8a4f657cf3d4fb00571a23e9562.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/35bed8a4f657cf3d4fb00571a23e9562.png)'
- en: Python notebook scheduled in the cloud, generated by MidJourney, instructed
    by the author
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在云端调度的 Python 笔记本，由 MidJourney 生成，由作者指导
- en: However, the most commonly used approach (unless you’re using a cloud-native
    services like Vertex AI or SageMaker) is to convert notebooks to Python code using
    `nbconvert` and adding the code to a freshly bootstrapped Tornado or Flask custom
    web application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最常用的方法（除非你使用像 Vertex AI 或 SageMaker 这样的云原生服务）是使用`nbconvert`将笔记本转换为 Python
    代码，并将代码添加到新启动的 Tornado 或 Flask 自定义 web 应用程序中。
- en: '![](../Images/7ad9ec48534503b421be4057882796a1.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ad9ec48534503b421be4057882796a1.png)'
- en: Traditional containerization of a Python Notebook without, image by the author
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 Python 笔记本容器化，无图，图片由作者提供
- en: This includes some coding and external libraries, but the good news is that
    we can leave our code in our Jupyter development container and trigger it directly
    from there using the [Jupyter Rest API](https://jupyter-server.readthedocs.io/en/latest/developers/rest-api.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括一些编码和外部库，但好消息是我们可以将代码保留在我们的 Jupyter 开发容器中，并直接从那里触发，使用 [Jupyter Rest API](https://jupyter-server.readthedocs.io/en/latest/developers/rest-api.html)。
- en: Accessing a Notebook over Web API
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Web API 访问笔记本
- en: Before we jump into the details of how to use Jupyter API, I’ll demonstrate
    how the architecture will work. First, let’s take a simple notebook we can use
    for testing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解如何使用 Jupyter API 之前，我会展示架构如何工作。首先，让我们使用一个简单的笔记本进行测试。
- en: '![](../Images/dcf053ff6404f88f5756605f5377177e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dcf053ff6404f88f5756605f5377177e.png)'
- en: '[Simple test notebook](https://github.com/tfoldi/jupyterapi_nbrunner/blob/main/tests/test_notebook/JupyterAPI_Test.ipynb)
    returning with “15" if all works well.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[简单测试笔记本](https://github.com/tfoldi/jupyterapi_nbrunner/blob/main/tests/test_notebook/JupyterAPI_Test.ipynb)
    如果一切正常，将返回“15”。'
- en: 'To run it locally using Jupyter, the easiest way is to run it in a Jupyter
    Lab container:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地使用 Jupyter 运行，最简单的方法是通过 Jupyter Lab 容器运行：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the service starts, you’ll be able to access the notebook at [http://127.0.0.1:8888/lab/tree/work](http://127.0.0.1:8888/lab/tree/work)
    using the token passed in the JUPYTER_TOKEN environment variable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务启动，你将能够使用 JUPYTER_TOKEN 环境变量中传递的令牌访问笔记本，地址是 [http://127.0.0.1:8888/lab/tree/work](http://127.0.0.1:8888/lab/tree/work)。
- en: Calling the Notebook from the command line
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行调用笔记本
- en: 'From the command line, you can download [this](https://github.com/tfoldi/jupyterapi_nbrunner/blob/main/main.py)
    small script (it requires `requests` and `websocket-client` packages) or run it
    through a Docker container:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行，你可以下载 [这个](https://github.com/tfoldi/jupyterapi_nbrunner/blob/main/main.py)
    小脚本（需要`requests`和`websocket-client`包）或通过 Docker 容器运行：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script connects to our newly created JupyterLab server, executes our notebook,
    returns the last cell’s result, then exits. The entire procedure occurs over web
    protocols without requiring any modifications to the notebook code or additional
    libraries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本连接到我们新创建的 JupyterLab 服务器，执行我们的笔记本，返回最后一个单元的结果，然后退出。整个过程通过 web 协议进行，无需对笔记本代码或额外的库进行任何修改。
- en: Under the hood
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 底层实现
- en: Unfortunately, there’s no single endpoint in Jupyter API to execute a notebook
    end-to-end. First, we have to initialize a new kernel (or use an existing one),
    retrieve the notebook metadata, get all code cells and send an `execute_request`
    for each one of them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Jupyter API 中没有一个端点可以端到端地执行笔记本。首先，我们必须初始化一个新的内核（或使用现有的），检索笔记本的元数据，获取所有代码单元，并为每一个发送一个`execute_request`。
- en: To retrieve the results, we need to listen for incoming messages in the WebSocket
    channel. Since there’s no “end of all code executions” message, we have to manually
    keep track of how many code blocks we sent for execution and how many of them
    have actually been completed by counting all messages of type `execute_reply`.
    Once everything has finished executing, we can stop the kernel or leave it in
    an idle stage for future executions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索结果，我们需要监听 WebSocket 通道中的传入消息。由于没有“所有代码执行结束”的消息，我们必须手动跟踪我们发送了多少个代码块以及其中多少个已实际完成，通过计算所有类型为`execute_reply`的消息。一旦所有执行完成，我们可以停止内核或将其保持在空闲状态以备将来执行。
- en: 'The following diagram illustrates the complete flow:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了完整的流程：
- en: '![](../Images/11c524c1045884750fb7a48d56e4dacf.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11c524c1045884750fb7a48d56e4dacf.png)'
- en: Steps to execute a Jupyter Notebook over the Rest API. Notebook-level actions
    use Rest API, while cell-level invocations are on WebSockets. Image by the author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Rest API 执行 Jupyter Notebook 的步骤。笔记本级别的操作使用 Rest API，而单元级别的调用则在 WebSocket
    上。图片由作者提供。
- en: To remain authenticated, we have to pass the `Authorization` header for all
    HTTP and WebSocket calls.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持认证，我们必须为所有 HTTP 和 WebSocket 调用传递`Authorization`头。
- en: If this feels like a somewhat excessive amount of steps just to execute a notebook,
    I hear you. I’m sure it would be useful to implement a higher-level function inside
    Jupyter Server to reduce the complexity.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果觉得仅仅为了执行一个 notebook 步骤有些多，我理解。相信在 Jupyter Server 内实现一个更高层次的函数来简化复杂性会很有用。
- en: The complete [script is here](https://github.com/tfoldi/jupyterapi_nbrunner/blob/main/main.py),
    ready to be used in your applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 [脚本在这里](https://github.com/tfoldi/jupyterapi_nbrunner/blob/main/main.py)，可以在你的应用程序中使用。
- en: Schedule our workbook on GCP for Free (almost)
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GCP 上安排我们的工作簿免费（几乎）。
- en: While there are many options for hosting a notebook, the most cost-effective
    way is to leverage Google Cloud’s Cloud Run service. With Cloud Run, you only
    pay for the exact runtime of your job, making it a cost-efficient choice for infrequently
    triggered tasks without extra packages or additional SaaS vendors (other than
    Google) — and, again, without writing a single line of code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有很多选项可以托管 notebook，但最具成本效益的方法是利用 Google Cloud 的 Cloud Run 服务。使用 Cloud Run，你只需为作业的实际运行时间付费，使其成为一个经济高效的选择，用于不频繁触发的任务，而无需额外的软件包或额外的
    SaaS 供应商（除了 Google），而且再次强调，无需编写一行代码。
- en: 'The architecture and invocation flow will look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 架构和调用流程将如下所示：
- en: '![](../Images/431947b505e850f4b423574ed62ab90b.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/431947b505e850f4b423574ed62ab90b.png)'
- en: We’re going to use serverless services only to keep the costs down. Image by
    the author.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅使用无服务器服务来保持成本低。作者提供的图片。
- en: First, we have to deploy our notebook in GCP Cloud Run. There are multiple ways
    to add a file to a Cloud Run service, but perhaps the easiest one is to copy our
    notebooks to a Docker container.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在 GCP Cloud Run 中部署我们的 notebook。有多种方式可以将文件添加到 Cloud Run 服务中，但也许最简单的方法是将我们的
    notebook 复制到 Docker 容器中。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To build and make the container available in Cloud Run, we can simply specify
    the `--source` option with `gcloud run deploy`, pointing it to a directory where
    our notebooks and `Dockerfile` are located.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建并使容器在 Cloud Run 中可用，我们只需在 `gcloud run deploy` 中指定 `--source` 选项，指向包含我们笔记本和
    `Dockerfile` 的目录。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: JupyterLab will be available at the Service URL. Google Cloud Run will provide
    the SSL certificates and the mechanisms to start or suspend the container depending
    on requests hitting the deployment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 将在服务 URL 上提供。Google Cloud Run 将提供 SSL 证书以及根据请求的到达启动或暂停容器的机制。
- en: To trigger our newly deployed notebook from the Cloud Scheduler, we have to
    create a Cloud Function tied to a PubSub topic. The following command will deploy
    `main.py` and `requirements.txt` from [this repository](https://github.com/tfoldi/jupyterapi_nbrunner/).
    The `main.py` is the same script we used previously to trigger our code from the
    command line.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 Cloud Scheduler 触发我们新部署的 notebook，我们需要创建一个绑定到 PubSub 主题的 Cloud Function。以下命令将从
    [这个仓库](https://github.com/tfoldi/jupyterapi_nbrunner/) 部署 `main.py` 和 `requirements.txt`。`main.py`
    是我们之前用来从命令行触发代码的相同脚本。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s test our new Cloud Function by sending a message to the `t_nbtrigger`
    topic with the appropriate parameters, just like we did in the command line:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向 `t_nbtrigger` 主题发送带有适当参数的消息来测试我们的新 Cloud Function，就像我们在命令行中做的那样：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you check the `nbtrigger` Cloud Function’s logs, you may notice that emitting
    a record to the topic successfully triggered the execution of the notebook we
    specified:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `nbtrigger` Cloud Function 的日志，你可能会注意到，向主题发送记录成功触发了我们指定的 notebook 执行：
- en: '![](../Images/471606b8c7c1dfcc3bca2028c26c355b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/471606b8c7c1dfcc3bca2028c26c355b.png)'
- en: The logs show the successful execution of our notebook. Image by the author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 日志显示我们的 notebook 成功执行。作者提供的图片。
- en: 'The final step is to create a schedule that runs at specified times. In this
    case, we are about to run our notebook every hour:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建一个在指定时间运行的计划。在这种情况下，我们打算每小时运行一次 notebook：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You’re all set — you just scheduled your first Jupyter Notebook in a serverless
    way.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪——你刚刚以无服务器的方式安排了你的第一个 Jupyter Notebook。
- en: '![](../Images/579099583726993d1558e9d706617887.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/579099583726993d1558e9d706617887.png)'
- en: CloudRun automatically shuts down our container after the job execution. The
    “idle” state is also free of charge in case we do not specify min-instances.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CloudRun 在作业执行后会自动关闭我们的容器。如果我们没有指定最小实例，"闲置"状态也不会产生费用。
- en: Our Notebook will consume only a few cents per day, making this deployment method
    one of the most cost-effective in Google Cloud.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Notebook 每天只会消耗几美分，这使得这种部署方式成为 Google Cloud 中最具成本效益的方式之一。
- en: '![](../Images/69712ebc972347c1dc3f9f582dc4b078.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69712ebc972347c1dc3f9f582dc4b078.png)'
- en: After few days of execution the costs are around three cents.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 执行几天后的成本大约为三分钱。
- en: Conclusion
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We used to rely on converting our Jupyter Notebooks to Python code to make them
    available to cloud-native tools, or on more complex and expensive services like
    Vertex AI or SageMaker. However, by utilizing the Jupyter Rest API and deploying
    your Notebooks along with its “development environment,” you can skip the extra
    steps and enable web service calls or scheduling for your Notebooks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾经依赖于将 Jupyter Notebooks 转换为 Python 代码，以便使其能够被云原生工具使用，或者依赖于更复杂且昂贵的服务，如 Vertex
    AI 或 SageMaker。然而，通过利用 Jupyter Rest API 并部署带有其“开发环境”的 Notebooks，你可以跳过额外的步骤，实现对
    Notebooks 的网络服务调用或调度。
- en: While this approach is not necessarily appropriate for large-scale projects
    with compute-heavy long-running notebooks, it is perfectly fine for your home
    automation or hobby projects — without (over)spending on infrastructure.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法不一定适用于需要大量计算资源的长期运行的笔记本的大规模项目，但对于你的家庭自动化或爱好项目来说，这种方法完全适用 — 而无需（过度）花费在基础设施上。
