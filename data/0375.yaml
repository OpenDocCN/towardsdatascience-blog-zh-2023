- en: A complete word processing with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 完整的文字处理
- en: 原文：[https://towardsdatascience.com/a-complete-word-processing-with-python-ac4e66963f40?source=collection_archive---------3-----------------------#2023-01-25](https://towardsdatascience.com/a-complete-word-processing-with-python-ac4e66963f40?source=collection_archive---------3-----------------------#2023-01-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-complete-word-processing-with-python-ac4e66963f40?source=collection_archive---------3-----------------------#2023-01-25](https://towardsdatascience.com/a-complete-word-processing-with-python-ac4e66963f40?source=collection_archive---------3-----------------------#2023-01-25)
- en: Reading pdf file, utilizing regular expressions, exporting to Excel and Word
    document, and converting it back to pdf format
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取 PDF 文件，利用正则表达式，导出到 Excel 和 Word 文档，并转换回 PDF 格式
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page-----ac4e66963f40--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----ac4e66963f40---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)
    ·10 min read·Jan 25, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fac4e66963f40&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----ac4e66963f40---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fba33e6d0d27b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=post_page-ba33e6d0d27b----ac4e66963f40---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ac4e66963f40--------------------------------)
    · 10分钟阅读 · 2023年1月25日 [](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fac4e66963f40&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&user=Himalaya+Bir+Shrestha&userId=ba33e6d0d27b&source=-----ac4e66963f40---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fac4e66963f40&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&source=-----ac4e66963f40---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fac4e66963f40&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-complete-word-processing-with-python-ac4e66963f40&source=-----ac4e66963f40---------------------bookmark_footer-----------)'
- en: Recently for a self-study project, I had to go through an 800-page pdf file.
    Each chapter of the file contained a common set of questions. And I needed the
    answers to specific questions in each chapter. Now it’d take me forever to go
    through each page of the document and assess the answers to those questions. I
    was wondering if there was a quick way to scan through each page and extract only
    the relevant information for me from the file. I figured out a Pythonic way to
    do the same. In this post, I am going to share how I was able to read the pdf
    file, extract only relevant information from each chapter of the file, export
    the data into Excel and editable word document, and convert it back to pdf format
    using different packages in Python. Let’s get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最近在一个自学项目中，我不得不处理一个800页的PDF文件。文件的每一章都包含一组共同的问题，而我需要每章中特定问题的答案。现在，逐页浏览文档并评估这些问题的答案会花费我很长时间。我在想是否有快速的办法来扫描每一页，只提取对我有用的信息。我找到了一个Pythonic的解决方案。在这篇文章中，我将分享如何使用Python读取PDF文件，提取每章中仅相关的信息，将数据导出到Excel和可编辑的Word文档中，然后使用不同的Python包将其转换回PDF格式。让我们开始吧。
- en: '![](../Images/3bf54b24b975348fe2d8e7e5323a019e.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3bf54b24b975348fe2d8e7e5323a019e.png)'
- en: Image by [Dariusz Sankowski](https://unsplash.com/@dariuszsankowski) on [Unsplash](https://unsplash.com/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Dariusz Sankowski](https://unsplash.com/@dariuszsankowski)提供，来自[Unsplash](https://unsplash.com/)。
- en: Data
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: Rather than an 800-page document, I am going to use a [4-page pdf file](https://github.com/hbshrestha/Data_Analytics/blob/main/data/autobook.pdf)
    as an example. During the final days of high school, my classmates passed around
    a diary called “Auto book” as a memory to collect the interests, preferences,
    and contact information of each other. The pdf file I am using contains dummy
    information about four imaginary friends named Ram, Shyam, Hari, and Shiva. The
    file contains information such as their nationality, date of birth, preferences
    (food, fruit, sports, player, movie, actor), favorite quotes, aim, views on politics,
    and message to the world.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用一个[4页的PDF文件](https://github.com/hbshrestha/Data_Analytics/blob/main/data/autobook.pdf)作为示例，而不是800页的文档。在高中最后几天，我的同学们传阅了一本叫做“Auto
    book”的日记，作为一个记忆，收集彼此的兴趣、偏好和联系信息。我使用的PDF文件包含关于四个虚构朋友Ram、Shyam、Hari和Shiva的虚拟信息。该文件包含他们的国籍、出生日期、偏好（食物、水果、运动、球员、电影、演员）、喜欢的名言、目标、对政治的看法和对世界的留言。
- en: '![](../Images/e027625bd6d4b8bdcf07485c7c51df36.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e027625bd6d4b8bdcf07485c7c51df36.png)'
- en: Pdf file called autobook.pdf containing information and messages from four friends.
    Image by Author.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为autobook.pdf的PDF文件，包含四位朋友的信息和消息。图片由作者提供。
- en: It’d be easy to extract information for few friends directly by copy pasting
    from the pdf file. However, if the pdf file is large, it’d be much more efficient
    and precise to do it using Python. Following sections show how it is done step
    by step in Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于几个朋友，直接从PDF文件中复制粘贴信息会很简单。然而，如果PDF文件很大，使用Python来完成将会更加高效和准确。接下来的部分将逐步展示如何在Python中完成这项工作。
- en: 1\. Reading pdf document using PyPDF2 or PyMuPDF packages
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 使用PyPDF2或PyMuPDF包读取PDF文档
- en: '**a. Read the first page using PyPDF2**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**a. 使用PyPDF2读取第一页**'
- en: To read the text in the pdf file using Python, I use a package called [PyPDF2](https://pypi.org/project/PyPDF2/),
    and its PdfReader module. In the code snippet below, I read just the first page
    of the pdf file and extract the text from it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Python读取PDF文件中的文本，我使用了一个叫做[PyPDF2](https://pypi.org/project/PyPDF2/)的包及其PdfReader模块。在下面的代码片段中，我只读取了PDF文件的第一页，并从中提取了文本。
- en: '![](../Images/03238604047dac96808ec557bbdd0fa3.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03238604047dac96808ec557bbdd0fa3.png)'
- en: Script to read the first page of the pdf file. Image by Author.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 读取PDF文件第一页的脚本。图片由作者提供。
- en: '**b. Read the entire text of the file using PyPDF2**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**b. 使用PyPDF2读取整个文件的文本**'
- en: To read the entire text from the pdf file, I use a function called `extract_text_from_pdf`
    as shown below. First, the function opens the pdf file for reading in binary format
    and initializes the reading object. An empty list called `pdf_text` is initialized.
    Next, while looping through each page of the pdf file, the content of each page
    is extracted and appended to the list.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要从PDF文件中读取全部文本，我使用了一个叫做`extract_text_from_pdf`的函数，如下所示。首先，函数以二进制格式打开PDF文件进行读取，并初始化读取对象。接着，初始化一个名为`pdf_text`的空列表。然后，在循环遍历PDF文件的每一页时，将每一页的内容提取出来并追加到列表中。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When the file is passed as an argument in the function above, it returns a
    list containing elements- each element referring to the text on each page. The
    given file `autobook.pdf` is read as 4 elements using the `extract_text_from_pdf()`
    function as shown below:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件作为参数传递给上述函数时，它返回一个包含元素的列表，每个元素指向每一页的文本。给定文件 `autobook.pdf` 被使用 `extract_text_from_pdf()`
    函数读取为 4 个元素，如下所示：
- en: '![](../Images/560fa1df5fc2e20f25a6e12e52f7bf32.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/560fa1df5fc2e20f25a6e12e52f7bf32.png)'
- en: 'The elements inside the `extracted_text` can also be joined as a single element
    using:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`extracted_text` 内的元素也可以使用以下方法连接为一个单一元素：'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`all_text` returns a list containing only one element for the entire text in
    all the pages of the pdf file.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`all_text` 返回一个包含整个 pdf 文件所有页面文本的单一元素的列表。'
- en: '**c. Alternative way to read the entire text of the pdf file using PyMUPDF
    package.**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**c. 使用 PyMUPDF 包读取整个 pdf 文件的替代方法。**'
- en: 'Alternatively, I came across a package called [PyMUPDF](https://pymupdf.readthedocs.io/en/latest/tutorial.html)
    to read the entire text in the pdf as shown below:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我发现了一个名为 [PyMUPDF](https://pymupdf.readthedocs.io/en/latest/tutorial.html)
    的包来读取 pdf 文件中的所有文本，如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First, the pdf file is opened as a doc. `text` is initialized as an empty string.
    By looping through each page in the doc, the character on each page is appended
    to the `text`. Hence, the length of `text` here is 1786 elements, which includes
    each character including spaces, new lines, and punctuation marks.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，pdf 文件作为文档打开。`text` 被初始化为空字符串。通过循环遍历文档中的每一页，将每一页上的字符附加到 `text` 中。因此，`text`
    的长度为 1786 个元素，其中包括每个字符、空格、换行符和标点符号。
- en: 2\. RegEx
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. RegEx
- en: RegEx, or Regular Expression, is a sequence of characters that forms a search
    pattern. Python has an in-built package called `re` for this purpose.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: RegEx 或正则表达式是一系列字符，形成一个搜索模式。Python 有一个内置的 `re` 包用于此目的。
- en: From all the text in the given pdf file, I wanted to extract only the specific
    information. Below I describe the functions I used for this purpose, although
    there could be much wider use cases of RegEx.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的 pdf 文件中的所有文本中，我想提取出特定的信息。下面描述了我为此目的使用的函数，尽管 RegEx 的使用场景可能更广泛。
- en: '**a. findall**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**a. findall**'
- en: When the given pattern matches in the string/text, the findall function returns
    the list of all the matches.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定的模式在字符串/文本中匹配时，findall 函数会返回所有匹配项的列表。
- en: In the code snippet below, `x`, `y` and `z` return all the matches for `Name`,
    `Nationality`, and `Country` in the text. There are four occurrences of `Name`,
    three occurrences of `Nationality`, and a single occurrence of `Country` in the
    text in the pdf.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，`x`、`y` 和 `z` 返回文本中 `Name`、`Nationality` 和 `Country` 的所有匹配项。在文本中，`Name`
    出现了四次，`Nationality` 出现了三次，而 `Country` 仅出现了一次。
- en: '![](../Images/e23a523e20ba025bd23a33c608474f00.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e23a523e20ba025bd23a33c608474f00.png)'
- en: Findall function is used to return the list of all matches. Image by Author.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Findall 函数用于返回所有匹配项的列表。图片由作者提供。
- en: '**b. sub**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**b. sub**'
- en: The sub function is used to substitute/replace one or more matches with a string.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Sub 函数用于用字符串替代/替换一个或多个匹配项。
- en: In the given text, the `Nationality` is referred to as `Country` in the case
    of a friend named Hari. To replace the `Country` with `Nationality`, first I compiled
    a regular expression pattern for `Country`. Next, I used the sub method to replace
    the pattern with the new word and created a new string called `new_text`. In `new_text`,
    I find four occurrences of `Nationality` unlike three in the previous case.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的文本中，`Nationality` 在名为 Hari 的朋友的情况下被称为 `Country`。为了将 `Country` 替换为 `Nationality`，首先我编译了一个
    `Country` 的正则表达式模式。接下来，我使用 sub 方法将模式替换为新词，并创建了一个名为 `new_text` 的新字符串。在 `new_text`
    中，我发现 `Nationality` 出现了四次，而在前一个情况下是三次。
- en: '![](../Images/53a4c6249490b311a50e8ab3dbb48b55.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/53a4c6249490b311a50e8ab3dbb48b55.png)'
- en: Sub function used to substitute/find and replace in the string. Image by Author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Sub 函数用于在字符串中进行替换/查找和替换。图片由作者提供。
- en: '**c. finditer**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**c. finditer**'
- en: The finditer method can be used to find the matches of the pattern in a string.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: finditer 方法可以用来查找字符串中模式的匹配项。
- en: In the given text, the text between the `Name` and `Nationality` fields contains
    the actual names of the friends, and the text between the `Nationality` and `Date
    of Birth` fields contains the actual nationalities. I created the following function
    called `find_between()` to find the text between any two words present in consecutive
    order in the given text.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的文本中，`Name` 和 `Nationality` 字段之间的文本包含朋友的实际姓名，而 `Nationality` 和 `Date of Birth`
    字段之间的文本包含实际的国籍。我创建了以下名为 `find_between()` 的函数，以在给定文本中查找任何两个连续单词之间的文本。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One of the main parameters in the above function is the `pattern`. The `pattern`
    is set up to extract the characters between the `first_word` and the `last_word`
    in the given text. The finditer function returns an iterator over all non-overlapping
    matches in the string. For each match, the iterator returns a Match object. An
    empty list called `new_list` is initialized. By looping through the `matches`,
    the exact `match` in each iteration is appended to the `new_list`, and is returned
    by the fuction.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数中的一个主要参数是 `pattern`。`pattern` 被设置为提取给定文本中 `first_word` 和 `last_word` 之间的字符。finditer
    函数返回一个迭代器，遍历字符串中所有不重叠的匹配项。对于每个匹配项，迭代器返回一个 Match 对象。一个名为 `new_list` 的空列表被初始化。通过遍历
    `matches`，在每次迭代中，确切的 `match` 被附加到 `new_list` 中，并由函数返回。
- en: 'In this way, I was able to create the lists for each field such as names, nationalities,
    date of birth, preferences, and so on from the pdf file as shown in the code snippet
    below:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我能够从 PDF 文件中创建每个字段的列表，如姓名、国籍、出生日期、偏好等，如下方代码片段所示：
- en: '![](../Images/52a05b7752ffb1146a68fa054761c13e.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/52a05b7752ffb1146a68fa054761c13e.png)'
- en: Using the find_between function to extract relevant profile information of each
    friend from the pdf. Image by Author.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 find_between 函数从 PDF 中提取每个朋友的相关档案信息。图片由作者提供。
- en: '**Note:**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: The ‘.’ special character in Python matches with any character in the text/string
    excluding the new line. However, the **re.DOTALL** flag the ‘.’ character can
    match any character including the new line.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的 ‘.’ 特殊字符可以匹配文本/字符串中的任何字符，但不包括换行符。然而，**re.DOTALL** 标志使得 ‘.’ 字符可以匹配包括换行符在内的任何字符。
- en: 3\. Exporting data to Excel
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 导出数据到 Excel
- en: '**a. Pandas dataframe from lists**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**a. 从列表中创建 pandas dataframe**'
- en: 'In the step above, I got the lists for each profile field for each friend.
    In this step, I convert these lists into a pandas dataframe:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一步中，我获取了每个朋友每个档案字段的列表。在这一步，我将这些列表转换为 pandas dataframe：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The dataframe `df` looks as shown below:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: dataframe `df` 如下所示：
- en: '![](../Images/5764e49ef8471b0c784759fb10d1d626.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5764e49ef8471b0c784759fb10d1d626.png)'
- en: Deriving pandas dataframe from the lists of each profile field for each friend.
    Imagy by Author.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从每个朋友的每个档案字段的列表中推导 pandas dataframe。图片由作者提供。
- en: '**b. Conditional formatting using pandas dataframe**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**b. 使用 pandas dataframe 进行条件格式化**'
- en: 'Pandas datafame allows conditional formatting feature similar to Excel. Suppose
    I want to highlight the cells containing the name of my favorite player `Lionel
    Messi` in `df`. This can be done using `df.style.applymap()` function as shown
    below:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas dataframe 提供了类似于 Excel 的条件格式化功能。假设我想在 `df` 中突出显示包含我最喜欢的球员 `Lionel Messi`
    的单元格。这可以通过 `df.style.applymap()` 函数完成，如下所示：
- en: '![](../Images/349ff025afadbd337429cd5a04c28e3c.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/349ff025afadbd337429cd5a04c28e3c.png)'
- en: Applying background color in selected cells using df.style.applymap function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 df.style.applymap 函数在选定单元格中应用背景颜色。
- en: When the file is exported as *.xlsx format in line [28], the exported file also
    contains yellow highlight for the cell containing `Lionel Messi`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件以 *.xlsx 格式导出时，如第 [28] 行所示，导出的文件还包含了对包含 `Lionel Messi` 的单元格的黄色高亮。
- en: 4\. **Exporting from Python to word format**
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. **从 Python 导出到 Word 格式**
- en: '**a. Creating word document using Python-docx**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**a. 使用 Python-docx 创建 Word 文档**'
- en: To export data from Python to a Word format, I use a package called [python-docx](https://python-docx.readthedocs.io/en/latest/).
    The `Document` module inside the docx package allows the creation of different
    aspects of a word document such as headings and paragraphs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要将数据从 Python 导出到 Word 格式，我使用了一个叫做 [python-docx](https://python-docx.readthedocs.io/en/latest/)
    的包。docx 包中的 `Document` 模块允许创建 Word 文档的不同部分，如标题和段落。
- en: In the code below, I add the heading Name for each friend at first followed
    by a paragraph containing the actual name of the friend. This is followed by the
    headings and the corresponding texts for each profile field. I add a page break
    at the end of the profile of each friend.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我首先为每位朋友添加标题“Name”，接着是包含朋友实际姓名的段落。然后是每个个人资料字段的标题和对应的文本。我在每个朋友的个人资料末尾添加了分页符。
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The code above helps to yield a word document of the following format after
    saving it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码有助于在保存后生成以下格式的 Word 文档：
- en: '![](../Images/9e54a162f0cf049cc569af93f6c9f1d4.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9e54a162f0cf049cc569af93f6c9f1d4.png)'
- en: Word document that is to be generated by the code above. Image by Author.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成的 Word 文档。图片由作者提供。
- en: '**b. Highlight paragraph using Python-docx**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**b. 使用 Python-docx 高亮段落**'
- en: The Python-docx package helps to generate a word document with most of the features
    available in a Microsoft Word application. For example, the font can be added
    in different font styles, font colors, and sizes, along with features such as
    bold, italic, and underline.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python-docx 包帮助生成具有 Microsoft Word 应用程序中大多数功能的 Word 文档。例如，可以添加不同字体样式、字体颜色和大小的字体，并具有粗体、斜体和下划线等功能。
- en: 'Let’s say I want to create a section called Favorites at the end of the document
    and highlight the text in the document. It can be done with the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想在文档末尾创建一个名为 Favorites 的部分，并高亮文档中的文本。可以使用以下代码完成：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**c. Create a table using Python-docx**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**c. 使用 Python-docx 创建表格**'
- en: The Python-docx also allows the creation of tables in the word document directly
    from Python. Suppose I want to add a table consisting of the favorite item of
    each friend in the Favorites section at the end of the document. A table can be
    created using `document.add_tables(rows = nrows, cols = ncols)`. Furthermore,
    the text needs to be defined for each row/column or cell of the table.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Python-docx 还允许直接从 Python 创建 Word 文档中的表格。假设我想在文档末尾的“Favorites”部分添加一个包含每位朋友最喜欢项目的表格。可以使用
    `document.add_tables(rows = nrows, cols = ncols)` 创建表格。此外，需要为表格的每一行/列或单元格定义文本。
- en: In the code below, I define a table object with 8 rows and 5 columns. Next,
    I define the table header and first column. By looping through the dataframe `df`,
    I define the text for each cell inside the table based on the favorite item of
    each friend.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我定义了一个具有 8 行和 5 列的表格对象。接下来，我定义了表头和第一列。通过循环遍历数据框 `df`，我根据每位朋友的最喜欢项目定义表格中每个单元格的文本。
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**d. Save the document.**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**d. 保存文档。**'
- en: 'The document is saved as a *.docx format file using:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 文档保存为 *.docx 格式文件：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The final page of the document comprising favorites section and the table looks
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 包含“favorites”部分和表格的文档的最后一页如下所示：
- en: '![](../Images/1d61e0bbe1b3015dd8da9ca699859e20.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d61e0bbe1b3015dd8da9ca699859e20.png)'
- en: Favorites section and table created by following steps b and c above. File is
    saved as *.docx format using code in step d. Image by Author.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “Favorites”部分和通过步骤 b 和 c 创建的表格。文件使用步骤 d 中的代码保存为 *.docx 格式。图片由作者提供。
- en: 5\. Converting word document to pdf format.
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 将 Word 文档转换为 pdf 格式。
- en: To convert a document from word *.docx format to *.pdf format using Python,
    I came across a package called [docx2pdf](https://pypi.org/project/docx2pdf/).
    The word document can be converted to pdf format using the convert module of the
    package as `convert(input_path, output_path)`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Python 将文档从 Word *.docx 格式转换为 *.pdf 格式，我发现了一个叫做 [docx2pdf](https://pypi.org/project/docx2pdf/)
    的包。可以使用该包的 convert 模块 `convert(input_path, output_path)` 将 Word 文档转换为 pdf 格式。
- en: '![](../Images/4e4c6071c36fa31f11746c2ed6a4a5c4.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e4c6071c36fa31f11746c2ed6a4a5c4.png)'
- en: Converting word document from *.docx to *.pdf format. Image by Author.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Word 文档从 *.docx 转换为 *.pdf 格式。图片由作者提供。
- en: 'The output folder looks as follows for me:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，输出文件夹如下所示：
- en: '![](../Images/6727c0f8794bf0ec06588d28e4365699.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6727c0f8794bf0ec06588d28e4365699.png)'
- en: Output folder comprising of Excel file, Word document, and pdf file all exported
    using Python. Image by Author.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 Excel 文件、Word 文档和所有通过 Python 导出的 pdf 文件的输出文件夹。图片由作者提供。
- en: Conclusion
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Scanning through a pdf file and extracting only the necessary information can
    be very time-consuming and stressful. There are different packages available in
    Python that help to automate this process, alleviate cumbersomeness, and make
    the process more efficient to extract precise information.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描 pdf 文件并提取仅必要的信息可能非常耗时和压力大。Python 中有不同的包可以帮助自动化此过程，减轻繁琐性，并使提取精确信息的过程更高效。
- en: In this post, I use a dummy example of a pdf file containing common fields/sections/headings
    in the profile of four friends and extract the relevant information for each field
    for each friend. First, I used the PyPDF2 or PyMuPDF package to read the pdf file
    and print out the entire text. Second, I used Regular Expressions (RegEx) to detect
    patterns and find the matches for each pattern in the text to extract only relevant
    information. Third, I converted the lists of information for each profile field
    for each friend as pandas dataframe and exported it to an Excel file. Next, I
    created a word file using the Python-docx package. And finally, I converted the
    word file into a pdf format again using the docx2pdf file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我使用了一个包含四个朋友个人档案中常见字段/部分/标题的pdf文件作为示例，并提取了每个朋友每个字段的相关信息。首先，我使用了PyPDF2或PyMuPDF包来读取pdf文件并打印出整个文本。其次，我使用正则表达式（RegEx）来检测模式并在文本中找到每个模式的匹配项，以提取仅相关的信息。第三，我将每个朋友每个个人档案字段的信息列表转换为pandas
    dataframe，并导出为Excel文件。接下来，我使用Python-docx包创建了一个word文件。最后，我再次使用docx2pdf文件将word文件转换为pdf格式。
- en: The notebook and the input pdf file for this post are available in this GitHub
    [repository](https://github.com/hbshrestha/Data_Analytics). Thank you for reading!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的笔记本和输入的pdf文件可以在这个GitHub [仓库](https://github.com/hbshrestha/Data_Analytics)中找到。感谢阅读！
