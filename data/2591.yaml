- en: How to Use Google’s PaLM 2 API with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Google的PaLM 2 API与Python
- en: 原文：[https://towardsdatascience.com/how-to-use-google-palm-2-api-with-python-373bc564251c?source=collection_archive---------2-----------------------#2023-08-14](https://towardsdatascience.com/how-to-use-google-palm-2-api-with-python-373bc564251c?source=collection_archive---------2-----------------------#2023-08-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-use-google-palm-2-api-with-python-373bc564251c?source=collection_archive---------2-----------------------#2023-08-14](https://towardsdatascience.com/how-to-use-google-palm-2-api-with-python-373bc564251c?source=collection_archive---------2-----------------------#2023-08-14)
- en: Customize and integrate Google’s LLM in your application.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义并将Google的LLM集成到你的应用程序中。
- en: '[](https://eliselandman.medium.com/?source=post_page-----373bc564251c--------------------------------)[![Elise
    Landman](../Images/1cd86aa9df340e430820a48f4d26de5a.png)](https://eliselandman.medium.com/?source=post_page-----373bc564251c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----373bc564251c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----373bc564251c--------------------------------)
    [Elise Landman](https://eliselandman.medium.com/?source=post_page-----373bc564251c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://eliselandman.medium.com/?source=post_page-----373bc564251c--------------------------------)[![Elise
    Landman](../Images/1cd86aa9df340e430820a48f4d26de5a.png)](https://eliselandman.medium.com/?source=post_page-----373bc564251c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----373bc564251c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----373bc564251c--------------------------------)
    [Elise Landman](https://eliselandman.medium.com/?source=post_page-----373bc564251c--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdbd14e538474&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-google-palm-2-api-with-python-373bc564251c&user=Elise+Landman&userId=dbd14e538474&source=post_page-dbd14e538474----373bc564251c---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----373bc564251c--------------------------------)
    ·11 min read·Aug 14, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F373bc564251c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-google-palm-2-api-with-python-373bc564251c&user=Elise+Landman&userId=dbd14e538474&source=-----373bc564251c---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdbd14e538474&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-google-palm-2-api-with-python-373bc564251c&user=Elise+Landman&userId=dbd14e538474&source=post_page-dbd14e538474----373bc564251c---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----373bc564251c--------------------------------)
    ·11分钟阅读·2023年8月14日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F373bc564251c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-google-palm-2-api-with-python-373bc564251c&user=Elise+Landman&userId=dbd14e538474&source=-----373bc564251c---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F373bc564251c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-google-palm-2-api-with-python-373bc564251c&source=-----373bc564251c---------------------bookmark_footer-----------)![](../Images/83e8ff5e480e20067392de2c2d57db3d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F373bc564251c&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-use-google-palm-2-api-with-python-373bc564251c&source=-----373bc564251c---------------------bookmark_footer-----------)![](../Images/83e8ff5e480e20067392de2c2d57db3d.png)'
- en: Image by Alexandre Debiève from [Unsplash](https://unsplash.com/photos/FO7JIlwjOtU).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 Alexandre Debiève 提供，来源于 [Unsplash](https://unsplash.com/photos/FO7JIlwjOtU)。
- en: 'Generative AI is all over the place. We see more and more companies investing
    in this **powerful technology** as it becomes increasingly clear how much **potential**
    it has. And as Gartner states: in the near future, [Generative AI] will become
    a competitive advantage and differentiator.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 生成型人工智能无处不在。我们看到越来越多的公司投资于这项**强大技术**，因为它的**潜力**变得越来越明显。正如Gartner所说：在不久的将来，[生成型人工智能]将成为竞争优势和差异化的关键。
- en: “in the near future, [Generative AI] will become a competitive advantage and
    differentiator.”
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在不久的将来，[生成型人工智能]将成为竞争优势和差异化的关键。”
- en: 'Unfortunately, developing Generative AI models is not only a complex work of
    engineering, but it is usually quite a pricey project. Luckily, we do not have
    to develop these ourselves — we can reuse what has been pre-developed for us:
    with APIs! Therefore, let’s not wait any longer — let’s jump right into how we
    can leverage Generative AI by **integrating** it into our application.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，开发生成性 AI 模型不仅是复杂的工程工作，而且通常是一个相当昂贵的项目。幸运的是，我们不必自己开发这些模型 — 我们可以重用已经为我们预先开发的：通过
    APIs！所以，不要再等了 — 让我们直接深入了解如何通过**集成**生成性 AI 到我们的应用程序中来利用它。
- en: 'For this article, we’ll be looking at **Google’s answer to LLMs**: the **PaLM
    2** API. PaLM 2 is Google’s newest version of their **Pathways Language Model**,
    a large language model which uses around five times more training data than their
    initial model released in 2022.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本文，我们将查看**谷歌对 LLM 的回答**：**PaLM 2** API。PaLM 2 是谷歌最新版本的**Pathways 语言模型**，这是一个大型语言模型，使用的训练数据量约是他们在
    2022 年发布的初始模型的五倍。
- en: In this article I will be going through **some code examples** and showing you
    how to authenticate to Google Cloud and use, as well as customize the **PaLM 2
    APIs** with Python 3.11.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将介绍**一些代码示例**并展示如何认证到 Google Cloud，使用以及自定义**PaLM 2 APIs**，并使用 Python 3.11。
- en: 1 | Getting Started
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 | 入门
- en: The PaLM 2 APIs can be accessed through **Google Cloud’s** [**Vertex AI**](https://cloud.google.com/vertex-ai)
    platform. Therefore, before we can make any API calls, we will need to set up
    our Google Cloud account. You can [sign up here](https://console.cloud.google.com/)
    and get [$300 in free credits](https://cloud.google.com/free/docs/free-cloud-features#free-trial)
    to start playing around with the services.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PaLM 2 APIs 可以通过**Google Cloud**的 [**Vertex AI**](https://cloud.google.com/vertex-ai)
    平台访问。因此，在我们进行任何 API 调用之前，我们需要设置我们的 Google Cloud 账户。你可以 [在这里注册](https://console.cloud.google.com/)
    并获得 [$300 的免费额度](https://cloud.google.com/free/docs/free-cloud-features#free-trial)
    来开始使用这些服务。
- en: As soon as your account and project are set up, we can go ahead and [create
    a service account](https://cloud.google.com/iam/docs/service-accounts-create)
    which we will use to authenticate to the Vertex AI APIs. We use service accounts,
    because we can ensure **access control** to our Google Cloud resources by giving
    them only specific IAM permissions. For our use case, we will give the service
    account the `Vertex AI User` role. This might be too broad for your use case,
    so I recommend checking the [available access roles](https://cloud.google.com/vertex-ai/docs/general/access-control)
    and choose which one fits your needs.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的账户和项目设置完成，我们可以继续 [创建一个服务账户](https://cloud.google.com/iam/docs/service-accounts-create)，我们将用它来认证到
    Vertex AI APIs。我们使用服务账户，是因为我们可以通过仅给予它们特定的 IAM 权限来确保对 Google Cloud 资源的**访问控制**。对于我们的用例，我们将授予服务账户
    `Vertex AI User` 角色。这可能对你的用例来说过于宽泛，所以我建议你检查 [可用的访问角色](https://cloud.google.com/vertex-ai/docs/general/access-control)
    并选择适合你需求的角色。
- en: After having created the service account and given it the right permissions,
    we can go ahead and [generate a service account key](https://cloud.google.com/iam/docs/keys-create-delete).
    Select JSON as the key type and save the file in a safe place.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了服务账户并赋予其正确的权限后，我们可以继续 [生成一个服务账户密钥](https://cloud.google.com/iam/docs/keys-create-delete)。选择
    JSON 作为密钥类型，并将文件保存在安全的位置。
- en: Great — we are ready to get hands-on! 👏
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 很好 — 我们准备动手操作了！👏
- en: 2 | Authenticate to Google Cloud
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 | 认证到 Google Cloud
- en: In this example, we will authenticate using [OAuth 2.0](https://oauth.net/2/)
    and request an access token with the help of the service account key we generated
    in the previous step.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用 [OAuth 2.0](https://oauth.net/2/) 进行认证，并借助我们在前一步生成的服务账户密钥请求访问令牌。
- en: 'To facilitate this process, we can make use of the `[google-auth](https://pypi.org/project/google-auth/)`
    Python library, as shown in the code sample below:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便利这个过程，我们可以使用 `[google-auth](https://pypi.org/project/google-auth/)` Python
    库，如下面的代码示例所示：
- en: Authenticate to Google Cloud using the google-auth Python library.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 google-auth Python 库认证到 Google Cloud。
- en: This code sample uses the service account key file “key.json” to request and
    generate an access token we can use for the Google Cloud APIs. After having obtained
    our access token, we can start using it to make calls to the Vertex AI PaLM 2
    APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码示例使用服务账户密钥文件“key.json”来请求和生成一个访问令牌，我们可以用它来访问 Google Cloud APIs。在获得访问令牌后，我们可以开始使用它调用
    Vertex AI PaLM 2 APIs。
- en: 3 | Calling the PaLM 2 API
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 | 调用 PaLM 2 API
- en: 'As of today, there are two different PaLM 2 models available in Google Cloud:
    **PaLM 2 for Text** (i. e. `[text-bison](https://cloud.google.com/vertex-ai/docs/generative-ai/text/text-overview)`)
    and **PaLM 2 for Chat** (i. e. `[chat-bison](https://cloud.google.com/vertex-ai/docs/generative-ai/chat/chat-prompts)`).
    The documentation suggests using `text-bison` for text tasks that can be completed
    with one response, and `chat-bison` for text tasks that require more conversational,
    back-and-forth interactions.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 截至今天，Google Cloud中提供了两种不同的PaLM 2模型：**PaLM 2 for Text**（即`[text-bison](https://cloud.google.com/vertex-ai/docs/generative-ai/text/text-overview)`）和**PaLM
    2 for Chat**（即`[chat-bison](https://cloud.google.com/vertex-ai/docs/generative-ai/chat/chat-prompts)`）。文档建议对可以用一个回复完成的文本任务使用`text-bison`，对需要更多对话互动的文本任务使用`chat-bison`。
- en: Let’s start with the `text-bison` model. For these examples, we will be using
    the Python `[requests](https://pypi.org/project/requests/)` library to make the
    API calls. You can also use the [Vertex AI SDK](https://cloud.google.com/python/docs/reference/aiplatform/latest/index.html),
    if you prefer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`text-bison`模型开始。对于这些示例，我们将使用Python的`[requests](https://pypi.org/project/requests/)`库来进行API调用。如果你愿意，也可以使用[Vertex
    AI SDK](https://cloud.google.com/python/docs/reference/aiplatform/latest/index.html)。
- en: 'PaLM 2 for Text: Sentiment Analysis'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PaLM 2 for Text：情感分析
- en: 'The PaLM 2 for Text model can be used for various **text-related tasks**: including
    summarization, answering questions, sentiment analysis, etc. It takes the following
    parameters as input:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PaLM 2 for Text模型可用于各种**与文本相关的任务**：包括摘要、回答问题、情感分析等。它接受以下参数作为输入：
- en: '`prompt`: instructions of the task we want the model to perform.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prompt`：我们希望模型执行的任务的指令。'
- en: '`temperature`: controls the “creativity” of the model. If we want our model
    to be more open-ended and creative in its replies, we should increase the temperature.
    If we want it to be more deterministic, the temperature should be lower. Values
    range between 0 and 1.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`temperature`：控制模型的“创造性”。如果我们希望模型在回复中更具开放性和创造性，则应提高温度。如果我们希望模型更具确定性，则温度应降低。值的范围在0到1之间。'
- en: '`maxOutputTokens`: number of tokens to be generated in the output (1 token
    = 4 characters). Values range between 1 and 1024.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxOutputTokens`：生成输出的token数量（1个token = 4个字符）。值的范围在1到1024之间。'
- en: '`topK`: changes the probability of how the model selects tokens for generating
    output. In each token selection step, the `topK` tokens with the highest probabilities
    are sampled and then further filtered with `topP`. The higher the value, the more
    random the responses will be. Values range between 1 and 40.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topK`：改变模型选择生成输出的token的概率。在每个token选择步骤中，具有最高概率的`topK`个token被采样，然后进一步通过`topP`筛选。值越高，响应越随机。值的范围在1到40之间。'
- en: '`topP`: changes the probability of how the model selects tokens for generating
    output. Tokens are selected until the sum of their probabilities equals `topP`.
    The higher the value, the more random the response is. Values range between 0
    and 1.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topP`：改变模型选择生成输出的token的概率。token的选择直到其概率总和等于`topP`。值越高，响应越随机。值的范围在0到1之间。'
- en: '*For more details on the parameters see* [*this documentation*](https://cloud.google.com/vertex-ai/docs/generative-ai/start/quickstarts/api-quickstart#parameter_definitions)*.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关参数的更多细节，请参见* [*此文档*](https://cloud.google.com/vertex-ai/docs/generative-ai/start/quickstarts/api-quickstart#parameter_definitions)*。*'
- en: 'In this first example, we will perform sentiment analysis on some **sample
    product reviews**:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个例子中，我们将对一些**示例产品评论**进行情感分析：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The instructions (i. e. the prompt) we will give the model need to be clearly
    stating the task we want the model to perform, as well as the output we expect
    it to generate. In our case, we ask it to go through each of the reviews in the
    `sentences` list and **tell us what the sentiment of these is**. We also instruct
    it to provide the output as a Python list.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给模型的指令（即提示）需要清楚地说明我们希望模型执行的任务，以及我们期望它生成的输出。在我们的例子中，我们要求它遍历`sentences`列表中的每个评论，并**告诉我们这些评论的情感**。我们还指示它将输出提供为Python列表。
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Lastly, we need to define the **input parameter values**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要定义**输入参数值**：
- en: We set the `temperature` to `0` because for this task, we want to avoid the
    model being too creative. With a lower temperature, we configure the the model
    be more likely to output exactly the structure we requested.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`temperature`设置为`0`，因为对于这个任务，我们希望避免模型过于创意。通过降低温度，我们使得模型更有可能输出我们请求的确切结构。
- en: We set `256` as `maxOutputTokens`, because it is approximately equivalent to
    200 words and is a good length for our task.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`256`设置为`maxOutputTokens`，因为它大约相当于200个单词，并且是适合我们任务的长度。
- en: We set `topK` to 40, because this is the model’s default value.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`topK`设置为40，因为这是模型的默认值。
- en: We set `topK` to 0.95, because this is the model’s default value.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`topK`设置为0.95，因为这是模型的默认值。
- en: 'We can now make the API call, similarly to any other API call we would make
    with the `[requests](https://pypi.org/project/requests/)` library, as shown below:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以像进行任何其他API调用一样发出API调用，使用`[requests](https://pypi.org/project/requests/)`库，如下所示：
- en: Make an API call to the Google Cloud PaLM 2 for Text API.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 向Google Cloud PaLM 2 for Text API发出API调用。
- en: 'We can get the output of the response with `response.json()[“predictions”][0][“content”]`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`response.json()[“predictions”][0][“content”]`来获取响应的输出：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Neat! Now, let’s do the exact same and try to set the `temperature` parameter
    to `1.0`. This will imply that our model’s output will become increasingly more
    creative. The output we get looks as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在，让我们做完全相同的操作并尝试将`temperature`参数设置为`1.0`。这将意味着我们的模型输出将变得越来越富有创意。我们得到的输出如下：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Indeed, we can see that the output is more creative than before and did not
    properly listen to our prompt mentioning that the “output should be in a python
    list”. Therefore, this a great learning that a **good choice of parameter values
    is very important** to obtain the desired output from the model.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，我们可以看到输出比以前更具创意，并且没有正确遵循我们提到的“输出应该是一个python列表”的提示。因此，这是一个很好的教训，即**选择合适的参数值非常重要**，以从模型中获得期望的输出。
- en: 'Now you might be asking yourself : “*does this mean I cannot be sure that the
    model output is in the correct format?*” There are various mechanisms you can
    set in place in order to test your model’s output and check whether it corresponds
    to the format you expected. From understanding and correctly configuring the model’s
    input parameters, to refining your prompt (i. e. prompt engineering), as well
    as implementing additional static tests that can validate the output’s structure.
    It is highly recommended to apply these techniques, as Generative AI can make
    mistakes and we want to be sure to tackle them before they happen.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会问自己：“*这是否意味着我不能确定模型输出是否符合正确的格式？*” 有多种机制可以设置以测试模型的输出并检查其是否符合你预期的格式。从理解并正确配置模型的输入参数，到优化你的提示（即提示工程），以及实施额外的静态测试以验证输出的结构。强烈建议应用这些技术，因为生成式AI可能会出错，我们希望在它们发生之前就解决这些问题。
- en: 'PaLM 2 for Text: Text Generation'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'PaLM 2 for Text: 文本生成'
- en: In our next example, let’s ask PaLM 2 to **generate a welcome text** for new
    customers landing on an e-commerce website. We want to welcome them and offer
    a 20% discount code on their first purchase. For this use case, we want our model
    to come up with something a bit more creative. Therefore, we will set the `temperature`
    to `0.5`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个示例中，让我们要求PaLM 2为新客户生成**欢迎文本**，他们正在访问一个电子商务网站。我们想欢迎他们，并在首次购买时提供20%的折扣码。对于这个用例，我们希望我们的模型提出一些更具创意的内容。因此，我们将`temperature`设置为`0.5`。
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Nice! It even gave us the output in markdown format. Let’s again try to adjust
    the `temperature` by setting it to `1.0` . The output is the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！它甚至以markdown格式给出了输出。让我们再次尝试将`temperature`调整为`1.0`。输出如下：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can again see how much more creative our model is compared to the previous
    output. It even came up with an offer expiration date, without us explicitly telling
    it to do so.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次可以看到我们的模型相比之前的输出变得更加富有创意。它甚至提出了一个优惠过期日期，而我们并没有明确要求它这样做。
- en: 'PaLM 2 for Chat: Conversational Assistant'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'PaLM 2 for Chat: 对话助手'
- en: 'In the last example, we will test the PaLM 2 for Chat API which is more focused
    on generating a **conversational experience**. The model we’ll be using is called
    `chat-bison`. It takes the following parameters as input:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个示例中，我们将测试专注于生成**对话体验**的PaLM 2 for Chat API。我们将使用的模型称为`chat-bison`。它接受以下参数作为输入：
- en: '`messages`: contains the messages and messaging history with the bot.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`messages`：包含与聊天机器人之间的消息和消息历史记录。'
- en: '`context`: defines “guidelines” for the bot’s behavior. For example: what the
    bot’s name is, what its role is, vocabulary to include/exclude, etc.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`：定义聊天机器人行为的“指南”。例如：聊天机器人的名称是什么，它的角色是什么，包含/排除的词汇等。'
- en: '`examples`: sample input and output of how the bot should respond in the conversation.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`examples`：示例输入和输出，展示了聊天机器人在对话中的响应方式。'
- en: as well as `temperature`, `maxOutputTokens`, `topK` and `topP` which do the
    same as for the `text-bison` model in the previous section.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及`temperature`、`maxOutputTokens`、`topK`和`topP`，它们的作用与前一节中的`text-bison`模型相同。
- en: '*For more details on the parameters and what they exactly do, see* [*this documentation*](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/text-chat#generative-ai-text-chat-drest)*.*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关参数及其具体作用的更多详细信息，请参见* [*此文档*](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/text-chat#generative-ai-text-chat-drest)*。*'
- en: Let’s create a chatbot which will serve as a **customer support agent** for
    an online gardening store “**GardenWorld**”. The bot should respond to questions
    around plant and flower types, gardening tools, etc. We want the bot to always
    be friendly and welcoming to customers, and it should greet customers with “Hoowdy
    gardener! 🌱” as well as motivate customers to sign up to the newsletter to receive
    a 10% discount code on their first purchase.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来创建一个聊天机器人，作为在线园艺商店“**GardenWorld**”的**客户支持代表**。这个机器人应当能够回答有关植物和花卉类型、园艺工具等问题。我们希望机器人始终对客户友好和热情，并且应该用“Hoowdy
    gardener! 🌱”来问候客户，并激励客户注册新闻通讯以获得首次购买的10%折扣码。
- en: 'We can define this by setting the `context` and the `examples` parameters as
    shown below:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过设置`context`和`examples`参数来定义这些，如下所示：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will give our model three examples of what its output should look like. Of
    course, the **more examples** we give, the more the bot can be **customized**
    and the **better** the model will be able to learn what we expect from it. Since
    our use case is very simple, these three examples should give the bot enough information
    to provide us with the right answer structure. We will set the `temperature` to
    `1.0`, `maxOutputTokens` to `256`, `topK` to `40` and `topP` to `0.95`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将给模型三个示例，说明输出应是什么样的。当然，**我们提供的示例越多**，机器人可以**定制**的程度就越高，模型将能够更好地学习我们期望的内容。由于我们的用例非常简单，这三个示例应该能给机器人足够的信息来提供正确的答案结构。我们将`temperature`设置为`1.0`，`maxOutputTokens`设置为`256`，`topK`设置为`40`，`topP`设置为`0.95`。
- en: Now, let’s start the conversation by saying “**Hi!**”.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们开始对话，先说“**Hi!**”。
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we can make the API call:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以进行API调用：
- en: Make an API call to the Google Cloud PaLM 2 for Chat API.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 向Google Cloud PaLM 2进行聊天API调用。
- en: 'After a few seconds, we get the following response back:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，我们得到以下回复：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Nice! Our model did exactly what we asked it to do: it used the correct greeting
    (even including the emoji 🌱) and mentioned the 10% discount code.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！我们的模型准确地完成了我们的要求：它使用了正确的问候语（甚至包括了表情符号🌱），并提到了10%折扣码。
- en: 'In order to continue our conversation with the bot, we will have to update
    the **conversation history** accordingly. We can define two simple functions which
    we can invoke after every API call:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续与机器人对话，我们需要相应地更新**对话历史**。我们可以定义两个简单的函数，在每次API调用后调用它们：
- en: Functions to update the chatbots message history.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 更新聊天机器人的消息历史的功能。
- en: '`update_history()` will add the most recent bot reply to the `messages` list.
    Then we can use `send_message()` to send a new question to the bot “**I need a
    nice houseplant that is easy to take care of. What can you recommend?**”.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`update_history()`将最新的机器人回复添加到`messages`列表中。然后我们可以使用`send_message()`向机器人发送一个新问题“**我需要一株易于照料的漂亮室内植物。你有什么推荐？**”。'
- en: 'Now our `messages` variable looks as following, with the most recent message
    at the end of the list:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`messages`变量如下所示，最新的消息位于列表末尾：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can include the `messages` history in the next API call and the response
    we get back is the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下一次API调用中包含`messages`历史记录，得到的回复是：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It suggested us to choose the “[Snake Plant](https://www.almanac.com/plant/snake-plants)”
    which is a houseplant known to be easy to take care of. Let’s also add this message
    to the `messages` history.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它建议我们选择“[蛇尾兰](https://www.almanac.com/plant/snake-plants)”，这是一种被认为易于照料的室内植物。让我们将这条消息也添加到`messages`历史记录中。
- en: 'Then, let’s ask one last question “**Any alternatives you can suggest? Also,
    can I get a discount?**”. The response we get back is:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们提出最后一个问题“**你能建议一些替代方案吗？另外，我可以获得折扣吗？**”我们得到的回复是：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Great! As we see above, the bot suggested our discount code, and thanks to the
    `messages` history, it remembered the question we asked previously and suggested
    a “[ZZ plant](https://www.gardenersworld.com/how-to/grow-plants/how-to-grow-zz-plant-zamioculcas-zamiifolia/)”
    an alternative plant which is easy to care for.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！如上所示，机器人建议了我们的折扣码，感谢`messages`历史记录，它记住了我们之前提出的问题，并建议了一个容易打理的植物“[ZZ plant](https://www.gardenersworld.com/how-to/grow-plants/how-to-grow-zz-plant-zamioculcas-zamiifolia/)”。
- en: 'The results show us, how **easily** and **quickly** we can get a **custom chatbot**
    up and running: only by giving three `examples` and a high-level `context` , the
    bot was able to **understand** what we expected from it and correctly return the
    information during the conversation. Imagine we would provide it with hundreds,
    or even thousands of additional `examples` — the potential is huge!'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 结果展示了我们如何**轻松**且**迅速**地让一个**自定义聊天机器人**运行起来：只需提供三个`示例`和一个高层次的`上下文`，机器人就能够**理解**我们的期望，并在对话中正确返回信息。想象一下如果我们提供数百甚至数千个额外的`示例`——潜力巨大！
- en: 4 | Conclusion
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4 | 结论
- en: In this article we have seen how **easy** it is to make use of the Google Cloud
    **PaLM 2 APIs**, using both the `text-bison` and `chat-bison` models. We have
    seen how we can **authenticate** remotely to our Google Cloud project using the
    Python `[google-auth](https://pypi.org/project/google-auth/)` library and make
    calls to the APIs using the `[requests](https://pypi.org/project/requests/)` library.
    Lastly, we have seen how these APIs can be **customized** by adjusting and playing
    around with the input parameters.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们看到利用 Google Cloud 的**PaLM 2 APIs**是多么**简单**，使用了`text-bison`和`chat-bison`模型。我们了解到如何使用
    Python 的`[google-auth](https://pypi.org/project/google-auth/)`库进行远程**认证**，以及如何使用`[requests](https://pypi.org/project/requests/)`库调用这些
    APIs。最后，我们看到如何通过调整和玩转输入参数来**定制**这些 APIs。
- en: I hope this article was informative for you and gave you some inspiration and
    ideas on how to get started using the PaLM 2 APIs! 🪴🤖
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章对你有帮助，并给你一些灵感和关于如何开始使用 PaLM 2 APIs 的想法！ 🪴🤖
- en: 🔜🔜 In the upcoming **part 2 of this article**, we will focus on **Prompt Engineering
    with PaLM 2 APIs** and cover how we can make our input prompts and model parameter
    selections better.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 🔜🔜 在即将到来的**第二部分**中，我们将专注于**使用 PaLM 2 APIs 进行提示工程**，并探讨如何更好地优化输入提示和模型参数选择。
- en: '*Feedback or questions? Feel free to reach out in the comment section!* 💬'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*反馈或问题？请随时在评论区联系我！* 💬'
- en: 📚 Keen on learning more? Check out [Generative AI on Google Cloud](https://cloud.google.com/ai/generative-ai)
    or try out the free [Generative AI Learning Path](https://www.cloudskillsboost.google/journeys/118)
    on Google Cloud Skills Boost.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 📚 想了解更多？查看 [Google Cloud 上的生成 AI](https://cloud.google.com/ai/generative-ai)
    或尝试 Google Cloud Skills Boost 上免费的 [生成 AI 学习路径](https://www.cloudskillsboost.google/journeys/118)。
- en: References
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Gartner, [Gartner Experts Answer the Top Generative AI Questions for Your
    Enterprise](https://www.gartner.com/en/topics/generative-ai), Accessed 13 August
    2023.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Gartner, [Gartner 专家回答您的企业生成 AI 顶级问题](https://www.gartner.com/en/topics/generative-ai)，访问日期：2023年8月13日。'
- en: '[2] CB Insights, [The State of Generative AI in 7 Charts](https://www.cbinsights.com/research/generative-ai-funding-top-startups-investors/),
    2 August 2023.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] CB Insights, [生成 AI 的现状：7 张图表](https://www.cbinsights.com/research/generative-ai-funding-top-startups-investors/)，2023年8月2日。'
- en: '[3] Google Cloud, [Overview of Generative AI Support on Vertex AI](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/overview),
    Accessed 13 August 2023.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] Google Cloud, [Vertex AI 上生成 AI 支持概览](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/overview)，访问日期：2023年8月13日。'
