- en: Improving Your SQL Logic with Common Table Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用公共表表达式改进你的 SQL 逻辑
- en: 原文：[https://towardsdatascience.com/improving-your-sql-logic-with-common-table-expressions-26f04967fc86](https://towardsdatascience.com/improving-your-sql-logic-with-common-table-expressions-26f04967fc86)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/improving-your-sql-logic-with-common-table-expressions-26f04967fc86](https://towardsdatascience.com/improving-your-sql-logic-with-common-table-expressions-26f04967fc86)
- en: Making logic easier to write, read, explain, and maintain
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使逻辑更容易编写、阅读、解释和维护
- en: '[](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)[![Elliott
    Stam](../Images/5469da79b12b9d5842df36d381415033.png)](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)[](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)
    [Elliott Stam](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)[![Elliott
    Stam](../Images/5469da79b12b9d5842df36d381415033.png)](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)[](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)
    [Elliott Stam](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)
    ·6 min read·Dec 5, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)
    ·阅读时长 6 分钟·2023年12月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6a63bf368229748a912d02f23f3d9489.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a63bf368229748a912d02f23f3d9489.png)'
- en: Photo by [Sam Moghadam Khamseh](https://unsplash.com/@sammoghadamkhamseh?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sam Moghadam Khamseh](https://unsplash.com/@sammoghadamkhamseh?utm_source=medium&utm_medium=referral)
    的照片，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
- en: 'Throwing your laundry into a pile and hoping for the best probably isn’t a
    great long-term strategy for managing your clothes. It’ll be hard to:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 把衣物丢进一堆里并寄希望于最好的方法可能不是管理衣物的长期策略。这样很难做到：
- en: '`SELECT socks FROM pile` later on.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT socks FROM pile` 随后执行。'
- en: 'And you’ll definitely struggle to:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你肯定会遇到困难：
- en: '`SELECT shirt FROM pile WHERE wrinkles = false` when you need a shirt.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT shirt FROM pile WHERE wrinkles = false` 当你需要一件衬衫时。'
- en: As with managing your clothes, there are clear benefits to actively managing
    how SQL logic is organized.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像管理你的衣物一样，积极管理 SQL 逻辑的组织有明显的好处。
- en: In this article we’re taking a look at how common table expressions (CTEs) can
    improve your SQL logic. Spaghetti code is rarely good code, and this is as true
    in SQL as it is in any programming language. In data management and engineering
    there are no silver bullets. However, keeping your logic organized and easy to
    review will only help you. So let’s dive in!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨公共表表达式（CTEs）如何改进你的 SQL 逻辑。意大利面条代码很少是好的代码，这在 SQL 中和任何编程语言中都是一样的。在数据管理和工程中没有灵丹妙药。然而，保持你的逻辑有序且易于审查只会对你有帮助。那么，让我们深入了解吧！
- en: What does a common table expression look like?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个公共表表达式是什么样的？
- en: 'I sometimes call them `WITH` clauses. Why? Let’s take a look at an example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我有时称它们为 `WITH` 子句。为什么？让我们看一个例子：
- en: A example common table expression.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个公共表表达式的示例。
- en: I call them `WITH` statements because they always begin with … `WITH` .
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我称它们为 `WITH` 语句，因为它们总是以 … `WITH` 开头。
- en: 'At a glance, how easy is it to understand what’s happening? There are three
    parts:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一目了然，理解发生了什么有多容易？有三个部分：
- en: A query identifying the “high value customers”.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个识别“高价值客户”的查询。
- en: A query identifying the “new customers”.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个识别“新客户”的查询。
- en: The final querying stage performing an inner join between the “high value customers”
    and the “new customers”, providing a result set containing only the customers
    who exist in both categories.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终查询阶段执行一个内连接操作，将“高价值客户”和“新客户”进行连接，提供一个结果集，包含仅存在于这两个类别中的客户。
- en: An alternative approach
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一种替代的方法
- en: 'Before I knew about common table expressions (CTEs / `WITH` statements), this
    is how I might have approached this query:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我了解公共表表达式（CTEs / `WITH` 语句）之前，这就是我可能会如何处理这个查询：
- en: Before someone showed me the value of CTEs, this is how I wrote all my queries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在有人向我展示 CTE 的价值之前，这就是我编写所有查询的方式。
- en: There isn’t necessarily anything wrong with the query above. In fact, it appears
    to just be re-organization of the code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的查询没有什么本质上的问题。实际上，它似乎只是代码的重新组织。
- en: But sometimes the order of things matters.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但有时顺序很重要。
- en: Matters, the order of things sometimes does (thanks, Yoda).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序，事情的顺序有时确实很重要（谢谢，尤达）。
- en: 'My opinion is that the CTE approach is easier to work with and interpret. When
    reading the CTE query, it’s clear to me that the story is:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我的观点是，CTE方法更容易处理和解释。在阅读CTE查询时，我清楚地知道故事是：
- en: We have high-value customers.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有高价值客户。
- en: We have new customers.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有新客户。
- en: Our results will return the inner join of the two sets of customers.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的结果将返回两个客户集的内连接。
- en: 'That is a simple and straightforward story. The second query isn’t rocket science
    either, but here is how I experience reading it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单明了的故事。第二个查询也不复杂，但这是我阅读它的体验：
- en: We have a customer.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个客户。
- en: We have total revenue (probably for the customer).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有总收入（可能是针对客户的）。
- en: We have days since last seen (probably for the customer).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有自上次见面以来的天数（可能是针对客户的）。
- en: We have a subquery deriving customers who met some revenue threshold.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个子查询派生出满足某些收入门槛的客户。
- en: We will perform an inner join on another subquery….
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将对另一个子查询执行内连接……
- en: The other subquery derives customers who were first seen in the last 90 days.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个子查询派生出在过去90天内首次出现的客户。
- en: That story is still easy enough to piece together, but it takes me six thoughts
    to piece the story together whereas it takes only three to piece together the
    CTE version. I’m a simple man — cutting the effort in half goes a long way for
    me.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那个故事仍然足够简单易懂，但我需要六个思考步骤来拼凑这个故事，而只需三个步骤就能拼凑出CTE版本。我是个简单的人——将工作量减少一半对我来说意义重大。
- en: But in all seriousness, in practice I find that the CTE approach modularizes
    the logic in such a way that it’s easy to define small pieces of your SQL puzzle,
    enabling you to easily connect the pieces of the puzzle in the final querying
    stage.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但说真的，实际上我发现CTE方法将逻辑模块化，使得定义SQL拼图的小部分变得容易，从而能够在最终查询阶段轻松连接这些拼图。
- en: What we saw above was a toy example. In the real world, complex problems often
    require more complex logic. It’s helpful to find ways to break complex problems
    (or complex queries) into smaller pieces. In doing this, one complex problem might
    become a handful of simple problems. And if you can easily solve a handful of
    simple problems then you have successfully developed a simple solution to a complex
    problem.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面看到的是一个玩具示例。在现实世界中，复杂问题通常需要更复杂的逻辑。寻找将复杂问题（或复杂查询）拆分成更小部分的方法是有帮助的。这样，一个复杂的问题可能变成几个简单的问题。如果你能够轻松解决几个简单的问题，那么你就成功地为复杂问题开发了一个简单的解决方案。
- en: Summarizing the benefits
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结好处
- en: 'In my experience these are the core benefits of adopting common table expressions
    into your SQL workflows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，这些是将公共表表达式纳入SQL工作流程的核心好处：
- en: Organization of the logic.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逻辑的组织。
- en: Readability of the logic and the purpose of the query.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逻辑和查询目的的可读性。
- en: Maintainability of the logic.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逻辑的可维护性。
- en: Explainability of the logic.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逻辑的可解释性。
- en: Performance and extensibility (say what?)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 性能和可扩展性（这是什么？）
- en: '1: Organization of the logic'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1：逻辑的组织
- en: Common table expressions provide structure to our queries. Similar to how paragraphs
    provide structure to the pages of a book, or how rooms provide structure to a
    house, or how functions provide structure to a program, or… you get the point.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表表达式为我们的查询提供了结构。类似于段落为书页提供结构，房间为房子提供结构，函数为程序提供结构，或者……你懂我的意思。
- en: Having reliable and predictable patterns is an absolute win in terms of improving
    the efficacy of our queries.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有可靠和可预测的模式在提高查询效率方面是绝对有利的。
- en: '2: Readability of the logic and the purpose of the query'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2：逻辑和查询目的的可读性
- en: The organization of the structure in our queries helps to make them more readable.
    Have you ever tried reading a book from the 1800s? Do a quick Google search. Some
    of those sentences could go on for multiple *pages.*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 查询中的结构组织有助于使其更具可读性。你是否尝试过阅读一本1800年代的书？做个快速的Google搜索。那些句子有的可能会延续好几*页*。
- en: 'Unstructured SQL queries are like really, really long sentences: it’s hard
    to keep track of it all. Where does one thought end the other begin?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 无结构的SQL查询就像非常非常长的句子：很难跟踪全部内容。一种思路在哪里结束，另一种思路从哪里开始？
- en: Keeping your logic readable is a big win. It’s a win for you and it’s a win
    for anyone else who will ever look at your query. The logic in your queries shouldn’t
    be a cryptographic algorithm that keeps Alan Turing up at night trying to solve.
    They should be so easy that non-technical people think, “hey I think know what
    that’s doing”.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 保持逻辑的可读性是一个巨大的胜利。这对你自己以及任何将来查看你查询的人来说都是一个胜利。你的查询中的逻辑不应是一个让艾伦·图灵夜不能寐的加密算法。它们应该是如此简单，以至于非技术人员会想，“嘿，我想我知道这在做什么”。
- en: '3: Maintainability of the logic'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3: 逻辑的可维护性'
- en: When your queries are easy to read, they’re easy to maintain. You don’t want
    to come back to a query three months after you wrote it only to spend hours deciphering
    how the damn thing works.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的查询易于阅读时，它们也容易维护。你不想在写完查询三个月后回来，却要花几个小时来解读这个该死的东西是怎么工作的。
- en: Odds are that even good queries will need to adapt and evolve over time. Good
    queries should be easy to understand, debug, and extend for further use.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是好的查询也很可能需要随着时间的推移进行适应和演变。好的查询应该容易理解、调试，并能扩展以供进一步使用。
- en: Common table expressions make it easy to break your logic into bite-size pieces.
    This improves the maintainability of your queries, as you can isolate specific
    components of the logic. For example, you might have a 500 line query but because
    you organized it well you know that implementing a new feature only requires editing
    a specific section of your CTE which involves a mere 20 lines.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表表达式使你可以轻松地将逻辑拆分为小块。这提高了查询的可维护性，因为你可以隔离逻辑的特定组件。例如，你可能有一个 500 行的查询，但由于你组织得很好，你知道实现一个新功能只需编辑你
    CTE 的特定部分，而这仅涉及 20 行代码。
- en: '4: Explainability of the logic'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '4: 逻辑的可解释性'
- en: 'Organized, readable logic tends to be easier to explain than a bunch of spaghetti.
    Whether it’s documentation, project handovers, or inquisitive business users poking
    holes in your implementation: you’ll need to explain your logic at some point
    if it’s doing anything important.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化、可读的逻辑往往比一堆意大利面条更容易解释。无论是文档、项目交接还是好奇的业务用户挑剔你的实现：如果你的逻辑做了任何重要的事情，你总会需要解释它。
- en: Common table expressions make it easy to break your logic into small, explainable
    pieces. When your stakeholders understand the small pieces, you’re very close
    to winning them over in terms of understanding the bigger picture.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表表达式使你可以轻松地将逻辑拆分为小而易于解释的部分。当你的利益相关者理解这些小部分时，你就非常接近赢得他们对整体大局的理解。
- en: '5: Performance and extensibility'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '5: 性能和可扩展性'
- en: Technically a common table expression is not more performant than a chain of
    in-line subqueries. Our two examples earlier should be equal in terms of performance.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，公共表表达式的性能并不比一系列内联子查询更好。我们之前的两个示例在性能上应该是相等的。
- en: 'But on the battlefield of performance, we don’t fight fair. This is what will
    make you stand out as a data engineer: do you know how to tilt the scale unfairly
    in your favor? Common table expressions can help make it obvious when there is
    a common query component being implemented in many workflows. This opens the door
    for efficiencies in terms of automation or perhaps ETL optimizations which allow
    performing that query once and recycling its result set in multiple places.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但在性能的战场上，我们并不讲究公平。这将使你在数据工程师中脱颖而出：你是否知道如何在你的 favor 中不公平地倾斜天平？公共表表达式可以帮助显而易见地识别在许多工作流中实现的公共查询组件。这为自动化或
    ETL 优化的效率打开了大门，允许一次执行该查询，并在多个地方重用其结果集。
- en: You’ll also likely find that you have a “library” of query components after
    you adopt common table expressions. A piece of a query you wrote last week might
    be relevant to a new business use case you’re working on today. When your queries
    are organized and well-structured using common table expressions, it’s very easy
    to reach into a problem you already solved and grab the relevant chunk of logic
    to insert into a new problem that needs solving.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会发现，在采用公共表表达式后，你会有一个“库”来存储查询组件。你上周写的一部分查询可能与今天你正在处理的新业务用例相关。当你的查询使用公共表表达式组织和结构化得很好时，很容易从你已经解决的问题中提取相关的逻辑片段，并将其插入到需要解决的新问题中。
- en: What next?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Getting a SQL query working is just the start. Setting it up to deliver maximum
    value (and minimal headache) over its lifetime is the differentiator.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使 SQL 查询正常工作只是开始。设置它以在其生命周期内提供最大价值（和最小头痛）才是关键所在。
- en: Look back at some of your old queries. Are they easy to understand? Are they
    easy to explain and maintain? If the answer is no, then give what we’ve talked
    about here a try.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下你以前的一些查询。它们易于理解吗？易于解释和维护吗？如果答案是否定的，那么不妨尝试一下我们在这里讨论的内容。
- en: Organize your logic into a common table expression. Split it into pieces of
    logic that are easier to manage. Run your changes by a colleague and see how they
    react. Take what works for you and run with it!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的逻辑组织成一个公共表表达式。将其拆分成更易于管理的逻辑片段。将你的更改给同事看看，看看他们的反应。取用对你有效的部分并加以运用！
- en: Wrapping it up
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: That does it for this article. As you’ve read this far, I hope you found this
    useful and interesting! Good luck out there writing good quality SQL.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本文到此结束。既然你读到了这里，希望你觉得这篇文章有用且有趣！祝你在编写高质量SQL时好运。
- en: If you’re wanting more content, check out my [YouTube channel](https://www.youtube.com/@devyx)!
    Drop me a comment and let me know what other data engineering topics you’re curious
    to explore.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更多内容，请查看我的[YouTube频道](https://www.youtube.com/@devyx)！给我留言，告诉我你想探索哪些其他数据工程主题。
