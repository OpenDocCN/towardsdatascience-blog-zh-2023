- en: Tracking Python’s Session Memory Using Tracemem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tracemem 跟踪 Python 会话内存
- en: 原文：[https://towardsdatascience.com/tracking-pythons-session-memory-using-tracemem-30f00c3f347](https://towardsdatascience.com/tracking-pythons-session-memory-using-tracemem-30f00c3f347)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/tracking-pythons-session-memory-using-tracemem-30f00c3f347](https://towardsdatascience.com/tracking-pythons-session-memory-using-tracemem-30f00c3f347)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Tracemem is a lightweight library to help you track the full memory of Python
    sessions.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tracemem 是一个轻量级的库，帮助你跟踪 Python 会话的全部内存。
- en: '[](https://medium.com/@nyggus?source=post_page-----30f00c3f347--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----30f00c3f347--------------------------------)[](https://towardsdatascience.com/?source=post_page-----30f00c3f347--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----30f00c3f347--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----30f00c3f347--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----30f00c3f347--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----30f00c3f347--------------------------------)[](https://towardsdatascience.com/?source=post_page-----30f00c3f347--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----30f00c3f347--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----30f00c3f347--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----30f00c3f347--------------------------------)
    ·9 min read·Dec 11, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----30f00c3f347--------------------------------)
    ·9 分钟阅读·2023年12月11日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6648173ce353664cef3a6ada910ce9e0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6648173ce353664cef3a6ada910ce9e0.png)'
- en: Tracemem is a session memory tracker in Python. Photo by [Ronan Furuta](https://unsplash.com/@ronan18?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Tracemem 是一个用于 Python 的会话内存跟踪器。照片由 [Ronan Furuta](https://unsplash.com/@ronan18?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '`Tracemem` is a lightweight Python profiling tool that allows you to measure
    the full memory usage of a Python session at a particular moment and to track
    subsequent changes. This can be used to debug code for memory issues or simply
    to log memory usage. `Tracemem`’s feature set is very limited, thanks to which
    it’s a very lightweight tool, with a minimal impact on the session’s memory. Nevertheless,
    like any memory-profiling tool, it can significantly impact program execution
    time.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracemem` 是一个轻量级的 Python 性能分析工具，可以让你在特定时刻测量 Python 会话的全部内存使用情况，并跟踪随后的变化。这可以用于调试内存问题的代码，或仅仅记录内存使用情况。由于
    `Tracemem` 的功能集非常有限，它是一个非常轻量的工具，对会话内存的影响很小。然而，像任何内存分析工具一样，它可能会显著影响程序的执行时间。'
- en: Under the hood, the package is a wrapper around `pympler.asizeof.asizeof()`,
    a `[pympler](https://pypi.org/project/Pympler/)` function that measures memory
    usage by a Python session. This means that `tracemem` offers a simple API to track
    and assess session memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，这个包是 `pympler.asizeof.asizeof()` 的一个封装，`[pympler](https://pypi.org/project/Pympler/)`
    函数可以测量 Python 会话的内存使用情况。这意味着 `tracemem` 提供了一个简单的 API 来跟踪和评估会话内存。
- en: 'This simplicity comes at a cost. You cannot use this tool to measure memory
    usage of a particular function, object or code snippet. If your needs are bigger
    than just assessing session memory, you can use other tools, such as:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简洁性是有代价的。你不能使用这个工具来测量特定函数、对象或代码片段的内存使用情况。如果你的需求超出了仅仅评估会话内存，你可以使用其他工具，例如：
- en: '`[pympler](https://pypi.org/project/Pympler/)`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[pympler](https://pypi.org/project/Pympler/)`'
- en: '`[memory_profiler](https://pypi.org/project/memory-profiler/)`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[memory_profiler](https://pypi.org/project/memory-profiler/)`'
- en: '`[perftester](https://pypi.org/project/perftester/)`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[perftester](https://pypi.org/project/perftester/)`'
- en: '`[memray](https://pypi.org/project/memray/)`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[memray](https://pypi.org/project/memray/)`'
- en: 'And of course, there are typical Python profilers, about which you can read
    here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有典型的 Python 性能分析器，你可以在这里阅读：
- en: '[](https://docs.python.org/3/library/profile.html?source=post_page-----30f00c3f347--------------------------------)
    [## The Python Profilers'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://docs.python.org/3/library/profile.html?source=post_page-----30f00c3f347--------------------------------)
    [## Python 性能分析器'
- en: 'Source code: Lib/profile.py and Lib/pstats.py Introduction to the profilers:
    cProfile and profile provide deterministic…'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码：Lib/profile.py 和 Lib/pstats.py 介绍性能分析器：cProfile 和 profile 提供确定性…
- en: docs.python.org](https://docs.python.org/3/library/profile.html?source=post_page-----30f00c3f347--------------------------------)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.python.org](https://docs.python.org/3/library/profile.html?source=post_page-----30f00c3f347--------------------------------)'
- en: While I usually rely on the built-in `[cProfile](https://docs.python.org/3/library/profile.html#module-cProfile)`
    Python profiler, the `[line profiler](https://pypi.org/project/line-profiler/)`
    package offers a powerful tool for line-by-line profiling.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我通常依赖于内置的`[cProfile](https://docs.python.org/3/library/profile.html#module-cProfile)`
    Python分析器，但`[line profiler](https://pypi.org/project/line-profiler/)`包提供了一个强大的逐行分析工具。
- en: '`Tracemem`’s API is somewhat atypical for Python, but this was a deliberate
    decision made to keep the tool as simple and lightweight as possible. This unusual
    API also stems from the fact that `tracemem` is a profiling tool, typically used
    for debugging. Therefore, the different approach to syntax (or rather, imports)
    shouldn’t pose any major issues.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracemem`的API在Python中有些不典型，但这是一个刻意的决定，以保持工具尽可能简单和轻量。这种不寻常的API也源于`tracemem`是一个分析工具，通常用于调试。因此，语法（或者说，导入）的不同方法不应造成任何重大问题。'
- en: 'This article dives into the fundamentals of `tracemem` and demonstrates how
    to utilize it to monitor the overall memory consumption of a Python session throughout
    the program’s execution. For our experiments, we’ll employ Python 3.12 installed
    in WSL 1 on a (7-year-old) Windows 10 machine with 16GB of RAM. We’ll also conduct
    two experiments: (1) we’ll replicate the `tracemem`-based checks on Python 3.10,
    3.11, and 3.12, and (2) we’ll assess whether using this tool noticeably affects
    program execution time.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本文深入探讨了`tracemem`的基础知识，并演示了如何利用它来监控Python会话的整体内存消耗，贯穿程序的执行。对于我们的实验，我们将使用安装在WSL
    1上的Python 3.12，在一台（7年的）Windows 10机器上，配备16GB RAM。我们还将进行两个实验：（1）我们将在Python 3.10、3.11和3.12上复制基于`tracemem`的检查，（2）我们将评估使用此工具是否明显影响程序执行时间。
- en: '*Disclaimer*: I am the author of the `tracemem` package and of its documentation.
    Therefore, you may notice slight similarities between this article and the package’s
    documentation.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明*：我是`tracemem`包及其文档的作者。因此，你可能会注意到这篇文章与包的文档之间有些许相似之处。'
- en: Usage
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用
- en: '`Tracemem` is a profiling tool, so you’ll most likely use it for profiling
    and debugging. Sometimes, you may also use it for production code, such as logging
    an app’s memory usage. However, the most common use case is profiling, and this
    use case heavily influenced the package’s design.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracemem`是一个分析工具，所以你最有可能将它用于分析和调试。有时，你也可能将它用于生产代码，例如记录应用程序的内存使用情况。然而，最常见的用例是分析，而这个用例严重影响了包的设计。'
- en: 'To make the tool more user-friendly, `tracemem` objects are available as truly
    global variables during a Python session, as explained in the following article:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使工具更友好，`tracemem`对象在Python会话中可用作真正的全局变量，如下文所述：
- en: '[](/are-globals-in-python-really-global-492f1e4faf9b?source=post_page-----30f00c3f347--------------------------------)
    [## Are Globals in Python Really Global?'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/are-globals-in-python-really-global-492f1e4faf9b?source=post_page-----30f00c3f347--------------------------------)
    [## Python中的全局变量真的全局吗？'
- en: Learn a hack to make a Python object truly global.
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习一个技巧，让Python对象真正全局化。
- en: towardsdatascience.com](/are-globals-in-python-really-global-492f1e4faf9b?source=post_page-----30f00c3f347--------------------------------)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/are-globals-in-python-really-global-492f1e4faf9b?source=post_page-----30f00c3f347--------------------------------)'
- en: 'Remember that you need use the top-level import of `tracemem`, which imports
    the whole module:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 记住你需要使用`tracemem`的顶级导入，这会导入整个模块：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After this, you can access all its objects from any other module in the session
    without importing it again.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以在会话中的任何其他模块中访问其所有对象，而无需再次导入。
- en: However, remember that you can use its objects without the module’s name, which
    is atypical for *top-level import* but typical for *from-import*. Hence, for example,
    using `tracemem.MEMPOINT()` won’t work, but `MEMPOINT()` will.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，请记住，你可以在没有模块名称的情况下使用它的对象，这在*顶级导入*中是不典型的，但在*from-import*中是典型的。因此，例如，使用`tracemem.MEMPOINT()`将不起作用，但`MEMPOINT()`将有效。
- en: 'Here’s a list of all `tracemem` functions:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是所有`tracemem`函数的列表：
- en: '`MEMPOINT()`, which creates a memory point in your session'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMPOINT()`，它在你的会话中创建一个内存点'
- en: '`MEMORY()`, which prints the memory usage, without creating a memory point'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMORY()`，它打印内存使用情况，而不创建内存点'
- en: '`MEMPRINT()`, which prints `MEMLOGS`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMPRINT()`，它打印`MEMLOGS`'
- en: '`tracemem()`, a decorator function that creates a memory point before and after
    calling the decorated method'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tracemem()`，一个装饰器函数，在调用被装饰的方法前后创建一个内存点'
- en: 'In addition, `tracemem` API contains the following — very important — object:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`tracemem` API 包含以下非常重要的对象：
- en: '`MEMLOGS`, an instance of a `MemLogsList` class, a list-like singleton container
    that keeps all memory points created during a session'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMLOGS`，`MemLogsList` 类的一个实例，一个类似列表的单例容器，保存会话期间创建的所有内存点'
- en: Let’s analyze the package’s functions one by one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一分析包的功能。
- en: '`MEMPOINT` and MEMLOGS'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`MEMPOINT` 和 MEMLOGS'
- en: The main function of tracemem is `MEMPOINT()`. It creates a so-called memory
    point, which is a measurement point of the memory used by a Python session; the
    function also adds this memory point to `MEMLOGS`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: tracemem 的主要功能是 `MEMPOINT()`。它创建一个所谓的内存点，这是一个测量 Python 会话中使用的内存的点；该函数还将此内存点添加到
    `MEMLOGS` 中。
- en: '***A memory point****: A measurement point of the full memory used by a Python
    session.*'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***一个内存点***：Python 会话中使用的完整内存的测量点。'
- en: 'The first memory point is created when `tracemem` is imported:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个内存点在 `tracemem` 被导入时创建：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I used the ellipsis in the above doctests, as the memory depends on quite a
    few elements, and thus will vary from machine to machine. You can read more about
    doctesting in the following article:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我在上面的 doctests 中使用了省略号，因为内存依赖于许多因素，因此会因机器而异。您可以在以下文章中阅读有关 doctest 的更多信息：
- en: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----30f00c3f347--------------------------------)
    [## Python Documentation Testing with doctest: The Easy Way'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Python 文档测试与 doctest：简单方法](https://towardsdatascience.com/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----30f00c3f347--------------------------------)'
- en: doctest allows for documentation, unit and integration testing, and test-driven
    development.
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: doctest 允许进行文档测试、单元测试、集成测试以及测试驱动开发。
- en: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----30f00c3f347--------------------------------)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 文档测试与 doctest：简单方法](https://towardsdatascience.com/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----30f00c3f347--------------------------------)'
- en: 'The default ID of a memory point is `None`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 内存点的默认 ID 是 `None`：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you create two memory points with the same ID, say `"my id"`, the second
    memory point will be assigned a new ID, `"my id-2"`, and so on:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建两个具有相同 ID 的内存点时，例如 `"my id"`，第二个内存点将被分配一个新 ID，`"my id-2"`，以此类推：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can use any object as an ID, but remember that under the hood, its string
    representation is used instead.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何对象作为 ID，但请记住，在底层使用的是其字符串表示形式。
- en: 'Memory points contain the memory used by the whole session, in bytes. Look:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 内存点包含整个会话使用的内存（以字节为单位）。看：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This shows that such a large dictionary adds a lot to the session memory, and
    removing it with `del` frees this memory. (Note I skipped the last `doctest` above,
    as I wanted to show the memories’ values, but they can differ a little from session
    to session.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明如此大的字典会增加会话内存，而使用 `del` 删除它会释放这部分内存。（注意，我跳过了上面的最后一个 `doctest`，因为我想显示内存的值，但它们可能会因会话而异。）
- en: 'As mentioned above, `MEMLOGS` is not a list but a list-like container, an instance
    of a `tracemem.MemLogsList` class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，`MEMLOGS` 不是一个列表，而是一个类似列表的容器，`tracemem.MemLogsList` 类的一个实例：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This class works slightly differently than a regular list. It has only one
    instance: `MEMLOGS`. Most typical list methods don’t work for it. For instance,
    `MEMPOINT()` is the only valid way to update `MEMLOGS`. You cannot append anything
    to it, multiply it, or add it to another list.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类的工作方式与常规列表略有不同。它只有一个实例：`MEMLOGS`。大多数典型的列表方法对它不起作用。例如，`MEMPOINT()` 是更新 `MEMLOGS`
    的唯一有效方式。您不能向其添加任何内容、进行乘法操作或将其添加到另一个列表中。
- en: 'The elements of `MEMLOGS` are instances of a `MemLog` named tuple, so you can
    access its two elements by both indexing and using the attributes’ names, `ID`
    and `memory`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMLOGS` 的元素是 `MemLog` 命名元组的实例，因此您可以通过索引和使用属性名 `ID` 和 `memory` 来访问它的两个元素：'
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`MEMLOGS` also has the following attributes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMLOGS` 还有以下属性：'
- en: '`.memories`, returning all the reported memories'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.memories`，返回所有报告的内存'
- en: '`.IDs`, returning all the reported IDs'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.IDs`，返回所有报告的 ID'
- en: '`.filter()`, a method to filter `MEMLOGS`, similar to the built-in `filter()`
    function'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.filter()`，一个用于过滤`MEMLOGS`的方法，类似于内置的`filter()`函数'
- en: '`.map()`, a method to apply a function to all elements of `MEMLOGS`, similar
    to the build-in `map()` function'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.map()`，一个用于对所有 `MEMLOGS` 元素应用函数的方法，类似于内置的 `map()` 函数'
- en: These are far less important attributes of `tracemem`, hence I describe them
    shortly in the Appendix.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `tracemem` 的重要性较低的属性，因此我在附录中简要描述它们。
- en: '`MEMPRINT`'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`MEMPRINT`'
- en: 'The `MEMPRINT()` function prints `MEMLOGS`, first converting memories to MB.
    It’s a very simple function that offers human-readable elements of `MEMLOGS`.
    You should use it for printing, but not necessarily for logging, for which you
    may prefer to use the detailed information in `MEMLOGS`. Let’s see how `MEMPRINT()`
    works in our session:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMPRINT()` 函数打印 `MEMLOGS`，首先将内存转换为 MB。这是一个非常简单的函数，提供了 `MEMLOGS` 的人类可读元素。你应该使用它来打印，但不一定用于记录，你可以选择使用
    `MEMLOGS` 中的详细信息进行记录。让我们看看 `MEMPRINT()` 在我们的会话中的工作效果：'
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`MEMPRINT()` does not return anything; like `print()`, it simply prints the
    information to the standard output.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMPRINT()` 不返回任何东西；与 `print()` 类似，它只是将信息打印到标准输出。'
- en: The MEMTRACE decorator
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MEMTRACE 装饰器
- en: 'If you want to track memory session before and after using a particular function,
    the easiest way is to use the `MEMTRACE` decorator. It creates *before* and *after*
    memory points for each call of the decorated function:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟踪在使用特定函数前后的内存会话，最简单的方法是使用 `MEMTRACE` 装饰器。它为每次调用被装饰的函数创建*之前*和*之后*的内存点：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: MEMORY
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MEMORY
- en: 'When you just want to see the current memory of the session, without creating
    a memory point in `MEMLOGS`, use the `MEMORY()` function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只想查看会话的当前内存，而不创建 `MEMLOGS` 中的内存点时，请使用 `MEMORY()` 函数：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This function retrieves (not prints) the current session memory usage as an
    integer value in bytes. As mentioned earlier, it doesn’t impact `MEMLOGS`. This
    function serves a rather niche purpose, but you might find it useful for occasional
    tasks, for instance during interactive profiling or debugging.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数检索（而不是打印）当前会话内存使用情况，以字节为整数值。正如前面提到的，它不会影响 `MEMLOGS`。这个函数用途较为小众，但你可能会在偶尔的任务中发现它有用，例如在交互式分析或调试期间。
- en: Comparison of session weight of Python 3.10–3.12
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 3.10–3.12 会话重量的比较
- en: Here, I’d like to compare memory weights of three Python sessions, from Python
    3.10, 3.11 and 3.12\. `Tracemem` is a perfect tool for this.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我想比较 Python 3.10、3.11 和 3.12 三个 Python 会话的内存重量。`Tracemem` 是一个很好的工具。
- en: 'We’ll use the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下代码：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I understand you might have anticipated some compelling findings in this section.
    I might have even hinted at it. However, the reality is that the three Python
    versions exhibit no significant variation in session weight. Disregarding minor
    discrepancies, I obtained the following results:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解你可能对这一部分有所期待。我甚至可能已经暗示过这一点。然而，实际情况是，三种 Python 版本在会话重量上没有显著差异。忽略细微的差异，我获得了以下结果：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, a fresh Python 3.10–3.12 session uses in WSL 1 on a Windows
    10 machine about `1.1`–`1.2` MB.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，新的 Python 3.10–3.12 会话在 Windows 10 机器上的 WSL 1 中使用大约`1.1`–`1.2` MB。
- en: '`Tracemem` impacts execution time'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Tracemem` 影响执行时间'
- en: 'When `tracemem` measures the size of small Python sessions, its impact on program
    execution time is minor — but still visible. When the session is memory-intensive,
    this impact can be substantial. I’ll demonstrate this by comparing the performance
    of the script I used in the previous experiment (let’s call it `code_with_tracemem.py`)
    to that of its version without `tracemem` (`code_without_tracemem.py`):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当`tracemem`测量小型 Python 会话的大小时，它对程序执行时间的影响很小——但仍然可见。当会话占用大量内存时，这种影响可能会很大。我将通过比较我在之前实验中使用的脚本（我们称之为`code_with_tracemem.py`）和其没有`tracemem`的版本（`code_without_tracemem.py`）的性能来演示这一点：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'I ran the both of them in Python 3.12, on the same machine as above, and I
    used the built-in `time` tool. Here are the results:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我在上面相同的机器上用 Python 3.12 运行了这两个脚本，并使用了内置的 `time` 工具。结果如下：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then I ran the same two scripts with `n` of `1000`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我用`n`为`1000`运行了相同的两个脚本：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, `tracemem` can strongly impact execution time, even for lightweight
    sessions. This is something to consider if you want to use `tracemem` for purposes
    other than profiling (e.g., logging). If you’re concerned about this performance
    tradeoff, remember that it’s a common aspect of memory-profiling tools — or at
    least all the Python memory-profiling tools I’ve encountered. Profiling memory
    can be time-consuming, so keep that in mind when using it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`tracemem` 即使在轻量级会话中也能显著影响执行时间。如果你打算将 `tracemem` 用于除分析外的其他目的（例如记录），这点需要考虑。如果你担心这种性能权衡，请记住这是内存分析工具的常见特性——或者至少是我遇到的所有
    Python 内存分析工具。内存分析可能是耗时的，所以在使用时要记住这一点。
- en: Conclusion
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: '`Tracemem` is a lightweight and straightforward tool for basic session-memory
    profiling. If you just want to track the memory consumption of a session, `tracemem`
    is a suitable option. However, if you need more comprehensive insights, such as
    memory usage breakdowns by specific objects or code segments, you should explore
    more advanced profiling tools like `[pympler](https://pypi.org/project/Pympler/)`,
    `[memory_profiler](https://pypi.org/project/memory-profiler/)`, `[perftester](https://pypi.org/project/perftester/)`,
    `[memray](https://pypi.org/project/memray/)`, `[cProfile](https://docs.python.org/3/library/profile.html#module-cProfile)`
    or `[line profiler](https://pypi.org/project/line-profiler/)`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracemem`是一个轻量级且简单的工具，用于基本的会话内存分析。如果你只想跟踪会话的内存消耗，`tracemem`是一个合适的选择。然而，如果你需要更全面的见解，如按特定对象或代码段的内存使用情况细分，你应该探索更高级的分析工具，如`[pympler](https://pypi.org/project/Pympler/)`、`[memory_profiler](https://pypi.org/project/memory-profiler/)`、`[perftester](https://pypi.org/project/perftester/)`、`[memray](https://pypi.org/project/memray/)`、`[cProfile](https://docs.python.org/3/library/profile.html#module-cProfile)`或`[line
    profiler](https://pypi.org/project/line-profiler/)`。'
- en: Appendix
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: 'This appendix shows how to use less important attributes of the `MEMLOGS` object:
    `.memories`, `.IDs`, `.filter()` and `.map()`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录展示了如何使用`MEMLOGS`对象的较不重要属性：`.memories`、`.IDs`、`.filter()`和`.map()`。
- en: 'You can use the first two in the following way:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以以下方式使用前两个：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Like the built-in `filter()` function, the `.filter()` method accepts a predicate
    used for filtering. This predicate needs to work with `MemLog` elements. Unlike
    the built-in function, the `MEMLOGS.filter()` method returns a list:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 像内置的`filter()`函数一样，`.filter()`方法接受一个用于过滤的谓词。这个谓词需要与`MemLog`元素配合使用。与内置函数不同，`MEMLOGS.filter()`方法返回一个列表：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can use a `lambda` function as a predicate:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`lambda`函数用作谓词：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Like the `.filter()` method, the `.map()` method returns a list:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`.filter()`方法，`.map()`方法返回一个列表：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能还会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)查看。并且，如果你想加入Medium，请使用我下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----30f00c3f347--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入Medium - Marcin Kozak](https://medium.com/@nyggus/membership?source=post_page-----30f00c3f347--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium会员，你的一部分会员费将分配给你阅读的作者，并且你可以全面访问每一篇故事……
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----30f00c3f347--------------------------------)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----30f00c3f347--------------------------------)'
