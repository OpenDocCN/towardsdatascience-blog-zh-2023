- en: 'Version Controlling in Practice: Data, ML Model, and Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践中的版本控制：数据、机器学习模型和代码
- en: 原文：[https://towardsdatascience.com/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc](https://towardsdatascience.com/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc](https://towardsdatascience.com/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)
- en: A Step-by-Step Guide to Versioning in MLOps
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MLOps 中版本管理的逐步指南
- en: '[](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)[![Chayma
    Zatout](../Images/341c45f53ddf73dc0851d547cc7cb55a.png)](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)
    [Chayma Zatout](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)[![Chayma
    Zatout](../Images/341c45f53ddf73dc0851d547cc7cb55a.png)](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)
    [Chayma Zatout](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)
    ·13 min read·Dec 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[数据科学前沿](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)
    ·13分钟阅读·2023年12月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/37c9fd4dbfd42fec21a997f19490f28a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/37c9fd4dbfd42fec21a997f19490f28a.png)'
- en: Photo by [Christopher Gower](https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Christopher Gower](https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Version control is a crucial practice! Without it, your project may become disorganized,
    making it challenging to roll back to any desired point. You risk losing critical
    model configurations, weights, experiment results from extensive training periods,
    and even the entire project itself. You might also find yourself in disagreements
    and conflicts with your teammates when the code breaks, hindering effective collaboration.
    In this article, we navigate the importance of version control through a practical
    example that employs some of the most common tools in the field. The entire codebase
    for this article is accessible in [the associated repository](https://github.com/Chim-SO/hand-written-digits-classification).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制是一个至关重要的实践！没有它，你的项目可能会变得杂乱无章，使得回滚到任何期望的点变得困难。你可能会丧失重要的模型配置、权重、来自长期训练的实验结果，甚至整个项目本身。你也可能会在代码出现问题时与队友产生分歧和冲突，从而阻碍有效的合作。在本文中，我们通过一个实际的例子来探讨版本控制的重要性，例子中使用了一些该领域最常见的工具。本文的完整代码库可以在[相关仓库](https://github.com/Chim-SO/hand-written-digits-classification)中访问。
- en: '**Table of contents:**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录：**'
- en: · [1\. Introduction](#7df7)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: · [1\. 介绍](#7df7)
- en: · [2\. Tools](#51d8)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: · [2\. 工具](#51d8)
- en: · [3\. Setting up your project](#4d35)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: · [3\. 设置你的项目](#4d35)
- en: ∘ [3.1\. Project folder](#65ee)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [3.1\. 项目文件夹](#65ee)
- en: ∘ [3.2\. Project environment](#fed7)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [3.2\. 项目环境](#fed7)
- en: · [4\. Code versioning](#dfb9)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: · [4\. 代码版本管理](#dfb9)
- en: · [5\. Data versioning](#c5f4)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: · [5\. 数据版本管理](#c5f4)
- en: · [6\. Model versioning](#caf0)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: · [6\. 模型版本管理](#caf0)
- en: · [Conclusion](#a958)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: · [结论](#a958)
- en: 1\. Introduction
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 介绍
- en: '![](../Images/c9cc5136b57967221c0ea501afea4868.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9cc5136b57967221c0ea501afea4868.png)'
- en: Version controlling is the practice of recording changes to a file or setting
    of files over time, using version control systems, so that we can recall specific
    versions later. In MLOps, version controlling is one of the main principles that
    I consider it as the first one to consider when starting your machine learning
    projects. To ensure that we harness all the benefits, version control should be
    applied across different machine learning workflow steps, including ***data***,
    the ***Machine Learning model*** (ML model), and ***code***.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制是记录文件或文件集随时间变化的实践，使用版本控制系统，以便我们可以在以后回忆特定版本。在 MLOps 中，版本控制是我认为在开始机器学习项目时需要考虑的首要原则之一。为了确保我们充分利用所有好处，版本控制应应用于不同的机器学习工作流步骤，包括***数据***、***机器学习模型***（ML
    模型）和***代码***。
- en: '**Why versioning?** Using version control for code, data, and models enables
    ***reproducibility*** (which is an another important MLOps principle) by allowing
    to recreate specific states of the project at any given point in time; ***tracking***
    and ***monitoring*** changes by establishing a systematic approach to capturing,
    documenting, and managing changes throughout the development lifecycle; ***collaboration***
    by tracking changes made by different contributors, and merging those changes
    efficiently and many other important benefits such as ***error recovery*** and
    ***traceability***.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么要进行版本控制？** 使用版本控制来管理代码、数据和模型可以实现***可重复性***（这是另一个重要的 MLOps 原则），通过允许在任何时间点重新创建项目的特定状态；***跟踪***和***监控***变化，通过建立系统化的方法来捕捉、记录和管理开发生命周期中的变化；***协作***，通过跟踪不同贡献者所做的更改，并高效地合并这些更改，以及其他许多重要的好处，如***错误恢复***和***可追溯性***。'
- en: '**Versioning use case?** Let’s consider a specific scenario in the handwritten
    digits classification project that we will use as an example throughout this article.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本控制用例？** 让我们考虑一个具体的场景，在手写数字分类项目中，我们将用作本文的示例。'
- en: '**Code.** Suppose we introduced optimizations to improve speed.However, after
    deployment, users reported unexpected inaccuracies in predictions. Thanks to the
    project’s robust code versioning practices, we can promptly identify the commit
    associated with the bug and temporarily roll back the deployment before optimization
    integration while we address the bug, fix it and reintegrate it into the main
    project version.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码。** 假设我们引入了优化以提高速度。然而，部署后，用户报告了预测中出现了意外的不准确。得益于项目的强大代码版本控制实践，我们可以迅速识别出与错误相关的提交，并在解决错误、修复并重新集成到主项目版本之前，暂时回滚部署。'
- en: '**Data.** Suppose we decide to augment the dataset to enhance the model’s generalization
    capabilities. However, after the augmented dataset is used in training, unexpected
    variations in model performance are observed. Therefore, we review the versioning
    history, identifies the specific augmentation technique that may be causing issues,
    and swiftly roll back to the previous version of the dataset. Then, we collaboratively
    work on refining the data augmentation approach, ensuring that only validated
    changes are reintegrated into the main project version.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据。** 假设我们决定扩展数据集以增强模型的泛化能力。然而，在扩展的数据集用于训练后，观察到模型性能出现了意外的变化。因此，我们审查版本控制历史，确定可能导致问题的具体扩展技术，并迅速回滚到数据集的先前版本。然后，我们共同优化数据扩展方法，确保只有经过验证的更改才会重新集成到主项目版本中。'
- en: '**ML model.** Suppose now, we embark on refining the model architecture to
    boost accuracy. We implement a Convolutional Neural Network (CNN) for improved
    feature extraction and integrate it to the main project. However, during deployment,
    subtle discrepancies arise, impacting real-time predictions. Therefore, we roll
    back to the previous, more stable model version. Then, we collaboratively address
    the issues, conduct thorough testing, and integrate the refined model back into
    the main project version.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器学习模型。** 假设现在，我们开始优化模型架构以提高准确性。我们实施了一个卷积神经网络（CNN）以改进特征提取，并将其集成到主项目中。然而，在部署过程中，出现了细微的差异，影响了实时预测。因此，我们回滚到之前更稳定的模型版本。接着，我们共同解决问题，进行彻底测试，然后将优化后的模型重新集成到主项目版本中。'
- en: Although this is an article dedicated to how to use version control in your
    project, it’s also part of my MLOps articles series. Furthermore, by following
    my previous and next tutorials you’ll be able to create your own end-to-end MLOps
    project starting from the workflow to model deployment and tracking.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这篇文章专注于如何在项目中使用版本控制，但它也是我 MLOps 文章系列的一部分。此外，通过阅读我之前和之后的教程，你将能够从工作流程到模型部署和跟踪，创建自己的端到端
    MLOps 项目。
- en: 'If you are interested in MLOps, check out my articles:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 MLOps 感兴趣，可以查看我的文章：
- en: '[*Tutorial 1: A Key Start to MLOps: Exploring Its Essential Components*](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*教程 1：MLOps 的关键开始：探索其基本组件*](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d)'
- en: '[*Tutorial 2: A Beginner-Friendly Introduction to MLOps Workflow*](/a-beginner-friendly-introduction-to-mlops-95282f25325c)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*教程 2：面向初学者的 MLOps 工作流程介绍*](/a-beginner-friendly-introduction-to-mlops-95282f25325c)'
- en: '[*Tutorial 3: Introduction to MLOps Principles*](https://medium.com/towards-data-science/introduction-to-mlops-principles-c5d73a00aa76)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*教程 3: MLOps 原则介绍*](https://medium.com/towards-data-science/introduction-to-mlops-principles-c5d73a00aa76)'
- en: '[*Tutorial 4: Structuring Your Machine Learning Project with MLOps in Mind*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*教程 4: 以 MLOps 为导向构建机器学习项目*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9)'
- en: '[*Tutorial 5: Version Controlling in Practice: Data, ML Model, and Code*](https://medium.com/towards-data-science/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*教程 5: 实践中的版本控制：数据、ML 模型和代码*](https://medium.com/towards-data-science/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)'
- en: '[*Tutorial 6: Testing in Practice: Code, Data and ML Model*](/testing-in-practice-code-data-and-ml-model-cfb1ada81f6c)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*教程 6: 实践中的测试：代码、数据和 ML 模型*](/testing-in-practice-code-data-and-ml-model-cfb1ada81f6c)'
- en: '[Tutorial 7: Tracking in Practice: Code, Data and ML Model](/tracking-in-practice-code-data-and-ml-model-6787a881609c)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*教程 7: 实践中的追踪：代码、数据和 ML 模型*](/tracking-in-practice-code-data-and-ml-model-6787a881609c)'
- en: 2\. Tools
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 工具
- en: '![](../Images/a4d7e9b47996b56af5bb596a46a77f55.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4d7e9b47996b56af5bb596a46a77f55.png)'
- en: When working on machine learning projects or any computer science projects,
    before starting programming, the adequate tools to use need to be selected. The
    tools selection depends on different factors such as project requirement, team
    expertise, data volume and cost.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行机器学习项目或任何计算机科学项目时，在开始编程之前，需要选择合适的工具。工具的选择取决于项目需求、团队专业技能、数据量和成本等不同因素。
- en: 'In this article, the following tools are selected:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，选择了以下工具：
- en: '**Python** as the programming language which is combination of a rich ecosystem,
    community support, ease of learning, versatility, integration capabilities, extensive
    libraries, data science tools, scalability, and industry adoption collectively
    contribute to its prominence in the realm of machine learning projects.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python** 作为编程语言，结合了丰富的生态系统、社区支持、学习的便捷性、多功能性、集成能力、广泛的库、数据科学工具、可扩展性以及行业采用，这些因素共同促成了它在机器学习项目领域的突出地位。'
- en: '**Git** for code versioning. Git, that stands for Global Information Tracker,
    is an open-source distributed version control system (DVCS) widely used in software
    development for tracking changes in source code during the development of a project.
    It is an essential tool that enables teams to manage code changes effectively,
    collaborate seamlessly, and maintain a reliable version history . It has become
    a standard in the industry and is used by developers worldwide for projects of
    all sizes.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git** 用于代码版本控制。Git，全称为全球信息跟踪器，是一种开源的分布式版本控制系统（DVCS），广泛用于软件开发中以跟踪项目开发过程中源代码的更改。它是一个关键工具，能够有效管理代码更改、无缝协作并保持可靠的版本历史。它已成为行业标准，被全球开发者用于各种规模的项目。'
- en: '**DVC** for data versioning. DVC, that stands for Data Version Control, is
    an open-source version control system widely used for data management. It’s designed
    to manage large datasets, make projects reproducible, and collaborate better.
    It works on top of Git repositories with similar feel and flows. One of the key
    features of DVC is data versioning: it allows to version control datasets separately
    from code. Therefore, data can be tracked, shared, and easily switched between
    different versions.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DVC** 用于数据版本控制。DVC，全称为数据版本控制，是一种开源版本控制系统，广泛用于数据管理。它旨在管理大规模数据集、使项目可重现以及促进更好的协作。它在
    Git 仓库之上运行，具有类似的感觉和流程。DVC 的一个关键特性是数据版本控制：它允许将数据集与代码分开进行版本控制。因此，数据可以被跟踪、共享，并在不同版本之间轻松切换。'
- en: '**MLflow** for model versioning. It is an open-source platform designed to
    manage the end-to-end machine learning lifecycle and foster collaboration among
    ML practitioners. Its compatibility with popular libraries, and strong community
    support make it an attractive choice for managing the complete machine learning
    lifecycle in a unified and scalable manner.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow** 用于模型版本控制。它是一个开源平台，旨在管理端到端的机器学习生命周期并促进 ML 从业者之间的协作。其与流行库的兼容性和强大的社区支持使其成为以统一且可扩展的方式管理完整机器学习生命周期的有吸引力的选择。'
- en: 3\. Setting up your project
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 设置你的项目
- en: 'Before getting started, ensure you have Git and DVC installed on your system.
    If it’s not already installed, you can download and install it from the [official
    Git website](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and
    the [official DVC website](https://dvc.org/doc/install) respectively. Or if you
    are on Ubuntu you can simply execute the following command lines :'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，确保你的系统上已安装 Git 和 DVC。如果尚未安装，你可以从[官方 Git 网站](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)和[官方
    DVC 网站](https://dvc.org/doc/install)下载并安装，或者如果你使用的是 Ubuntu，可以直接执行以下命令：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, it’s strongly recommended to create a virtual environment before installing
    DVD; thus, we will install it in the next few minutes after creating our virtual
    environment. In addition, note that:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，强烈建议在安装 DVD 之前创建一个虚拟环境；因此，我们将在创建虚拟环境后几分钟内进行安装。此外，请注意：
- en: DVC does not replace or include Git. You must have `git` in your system to enable
    important features such as data versioning and quick experimentation (recommended).
    [1]
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DVC 并不替代或包含 Git。你必须在系统中安装 `git`，以启用数据版本控制和快速实验等重要功能（推荐）。 [1]
- en: 3.1\. Project folder
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1\. 项目文件夹
- en: 'Let’s start off by setting up the project folder! To do so, there are several
    approaches including:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置项目文件夹！为此，有几种方法，包括：
- en: '**Creating your folder from scratch:** it is the most straightforward method,
    but it requires manually adding standard files and structuring the project afterwards.
    I do not recommend this approach when working on medium to large projects.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从头创建文件夹：** 这是最直接的方法，但需要手动添加标准文件并随后构建项目。我不推荐在中大型项目中使用这种方法。'
- en: '**Importing an existing template:** it is typically the optimal choice for
    simple maintenance, easy collaboration and good transparency, reproducibility
    and reusability. In this article, we will use the following project structure
    for machine learning projects created using [this Github template](https://github.com/Chim-SO/mlops-template)
    or this [Cookiecutter MLOps repository](https://github.com/Chim-SO/cookiecutter-mlops),
    but feel free to explore alternative templates. If you’re eager to delve deeper
    into structuring ML projects, I invite you to read my dedicated article on the
    topic: [*Structuring Your Machine Learning Project with MLOps in Mind*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入现有模板：** 这是进行简单维护、易于协作以及确保良好透明性、可重复性和可重用性的最佳选择。本文中，我们将使用以下项目结构，用于通过[这个 Github
    模板](https://github.com/Chim-SO/mlops-template)或这个[Cookiecutter MLOps 仓库](https://github.com/Chim-SO/cookiecutter-mlops)创建的机器学习项目，但可以随意探索其他模板。如果你渴望深入了解
    ML 项目结构，我邀请你阅读我专门讨论这一主题的文章：[*考虑 MLOps 的机器学习项目结构*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9)。'
- en: '![](../Images/ec4e813b5e591a3c59e3fe5cf8b93168.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec4e813b5e591a3c59e3fe5cf8b93168.png)'
- en: Project structure using [this Github template](https://github.com/Chim-SO/mlops-template)
    or this [Cookiecutter MLOps repository](https://github.com/Chim-SO/cookiecutter-mlops)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[这个 Github 模板](https://github.com/Chim-SO/mlops-template)或这个[Cookiecutter
    MLOps 仓库](https://github.com/Chim-SO/cookiecutter-mlops)的项目结构
- en: '**Clone/fork an existing project:** it is typically the optimal choice when
    working on existing projects. It supports collaboration and code reuse. For this
    article, feel free to clone or fork my repository to easily reuse the provided
    code. To clone the project use:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆/分叉现有项目：** 当处理现有项目时，这通常是最佳选择。它支持协作和代码重用。对于本文，可以随意克隆或分叉我的仓库，以便轻松重用提供的代码。要克隆项目，请使用：'
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using a Github template or cloning a Github repository requires some familiarity
    of Github. However, rest assured! You can still follow this tutorial as I provide
    you with the necessary commands and explanations.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Github 模板或克隆 Github 仓库需要对 Github 有一定的了解。不过，请放心！你仍然可以跟随本教程，我将为你提供必要的命令和解释。
- en: 3.2\. Project environment
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2\. 项目环境
- en: Another essential step to execute is setting up the virtual environment which
    is a best practice in software development that enhances project isolation, dependency
    management, reproducibility, collaboration, and overall project cleanliness.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要步骤是设置虚拟环境，这是软件开发中的最佳实践，可以增强项目隔离、依赖管理、可重复性、协作和整体项目整洁性。
- en: 'Let’s start by creating a virtual environment named `handwritten-digits-classification-env`
    and activating it:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先创建一个名为 `handwritten-digits-classification-env` 的虚拟环境并激活它：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After that and in most cases when working with GPU, we need to update the environment
    with the appropriate Cuda version (see [this article](/managing-multiple-cuda-versions-on-a-single-machine-a-comprehensive-guide-97db1b22acdc)
    for more details). Nevertheless, to make this tutorial simple and accessible,
    a GPU is not required, especially since the project requirements are simple since
    the data and model are not large.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在那之后，通常在使用GPU时，我们需要更新环境以适应适当的Cuda版本（有关详细信息，请参见[这篇文章](/managing-multiple-cuda-versions-on-a-single-machine-a-comprehensive-guide-97db1b22acdc)）。然而，为了使本教程简单易懂，并且项目要求较简单，因为数据和模型都不大，所以不需要GPU。
- en: 'Finally, we install requirements and DVC by executing the following command:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们通过执行以下命令来安装需求和DVC：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 4\. Code versioning
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 代码版本控制
- en: After setting up the repository, we are now ready to start versioning! In this
    tutorial, we adopt a straightforward feature branch workflow. This workflow involves
    creating a dedicated branch for each new feature rather than making direct changes
    to the main branch. Then, we use the rebase/merge approach to seamlessly integrate
    the feature branch into the main branch.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好仓库后，我们现在准备开始版本控制！在本教程中，我们采用一种简单的功能分支工作流。这种工作流涉及为每个新功能创建一个专门的分支，而不是直接更改主分支。然后，我们使用变基/合并方法将功能分支无缝集成到主分支中。
- en: 'We start by listing all the branches in the repository and check the current
    branch we are on that is typically marked with an asterisk (`*`):'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们首先列出所有分支，并检查当前所在的分支，通常用星号（`*`）标记：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here I have only one branch that is the master branch and it is the current
    branch.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我只有一个分支，即主分支，并且它是当前分支。
- en: 'If you are not already in the main branch switch to it using:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你还不在主分支上，请使用以下命令切换到它：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We first create a branch called `feature/data` where we add all the code related
    to data processing:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为`feature/data`的分支，在其中添加所有与数据处理相关的代码：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After adding all the necessary code, we import the code to the main branch
    by using the `merge` command that incorporates the changes present in the named
    branch into the current working branch:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在添加了所有必要的代码后，我们通过使用`merge`命令将代码导入主分支，该命令将命名分支中的更改并入当前工作分支：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, we create another branch called `feature/model` where we add all
    the code involving model creation, training and validating and merge it into the
    main branch :'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，我们创建了另一个名为`feature/model`的分支，在其中添加了所有与模型创建、训练和验证相关的代码，并将其合并到主分支中：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At this point, we can say that we created a simple first version of our code!
    And it’s time to mark this specific point adding a add a tag as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以说我们创建了代码的简单第一个版本！现在是时候标记这个特定点，添加一个标签，如下所示：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The entire workflow is described as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 整个工作流描述如下：
- en: '![](../Images/bdb87db52b64e4b9024da8bfc70cc750.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdb87db52b64e4b9024da8bfc70cc750.png)'
- en: 'Where each circle represents a commit that can be displayed using the command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每个圆圈代表一个提交，可以使用以下命令显示：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/3815b1d16089a6df09a517b60ff1226f.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3815b1d16089a6df09a517b60ff1226f.png)'
- en: '**Back to our code problem example:**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**回到我们的代码问题示例：**'
- en: 'Let’s say that after the deployment, a problem arises so we decide to temporarily
    roll back the deployment to the previous version the code in the deployment:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设在部署后出现了问题，我们决定暂时将部署回滚到之前的版本：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The revert operation undoes the modifications introduced by the specified commit
    by creating a new commit, still, we might need to resolve any conflicts that arise
    during the process, similar to what happens during a regular merge.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销操作通过创建一个新的提交来撤销指定提交所做的修改，但我们可能需要解决在此过程中出现的任何冲突，类似于常规合并中发生的情况。
- en: 'By using the commit history, we identify that a specific optimization in the
    model branch might be causing the issue. Thus, A hotfix branch named `hotfix/inference-bug`
    is created to address the bug:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用提交历史，我们识别出模型分支中的一个特定优化可能导致了这个问题。因此，创建了一个名为`hotfix/inference-bug`的热修复分支来解决这个错误：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We then make the necessary corrections to the code and commit the changes:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们对代码进行必要的修正并提交更改：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The bug fix is tested thoroughly, and a new pull request is opened for code
    review if we are really working in team and finally the hotfix is merged into
    the main branch:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误修复经过彻底测试，并且如果我们真的在团队中工作，还会为代码审查打开一个新的拉取请求，最终热修复被合并到主分支中：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The corrected code, free of the bug, is re-deployed to the production environment.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 修复了错误的代码重新部署到生产环境。
- en: 5\. Data versioning
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 数据版本控制
- en: Now that the code it’s ready, we can download data set it to it’s first version
    then transform it into the `csv` format.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码准备好了，我们可以将数据集下载到其第一个版本，然后将其转换为`csv`格式。
- en: First, we need to make sure that the folder where we will store data isn’t ignored
    by git. This is done by checking `.gitignore` file and removing/commenting the
    line that exclude the data folder from source control. If you’re using the template
    I provided comment line 79.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们需要确保存储数据的文件夹未被git忽略。这通过检查`.gitignore`文件并移除/注释掉排除数据文件夹的行来完成。如果你使用的是我提供的模板，请注释掉第79行。
- en: 'Now, we start by creating a branch `feature/data-csv` , initializing the DVC
    project inside the project folder and finally adding to Git the created files:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，我们开始创建一个分支`feature/data-csv`，在项目文件夹内初始化DVC项目，最后将创建的文件添加到Git中：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we download our dataset and add it to DVC and add the new DVC files to
    git:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们下载我们的数据集，将其添加到DVC中，并将新的DVC文件添加到git中：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding files to dvc will generate metadata that are stored in new files in a
    special `.dvc` file extension. Also, note that even though the data folder is
    tracked by git, it will be ignored once we add it to DVC since this later will
    create `.gitignore` and add data path to it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件添加到dvc将生成存储在新文件中的元数据，文件扩展名为`.dvc`。另外，请注意，即使数据文件夹由git跟踪，但一旦我们将其添加到DVC中，它会创建`.gitignore`并将数据路径添加到其中，因此它将被忽略。
- en: 'We also transform it into `csv` format and add the resulted files `data/preprocessed/train.csv`
    and `data/preprocessed/test.csv` to DVC the same way as previously:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将其转换为`csv`格式，并将生成的文件`data/preprocessed/train.csv`和`data/preprocessed/test.csv`以与之前相同的方式添加到DVC中：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '. At this point, the data is downloaded and created. The next step is the merge
    to the main branch and add a git tag :'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，数据已下载并创建。下一步是合并到主分支并添加git标签：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Back to our data problem example:**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**回到我们的数据问题示例：**'
- en: 'Let’s say that we applied offline augmentation of the processed data and we
    added it to DVC:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设我们对处理过的数据进行了离线增强，并将其添加到DVC中：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'However, after training, the model behaved poorly so we decide to re-use the
    previous version as follows:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，训练后，模型表现不佳，因此我们决定重新使用之前的版本，如下所示：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 6\. Model versioning
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 模型版本控制
- en: 'As mentioned previously, we use MLflow to track and manage our model. Since
    for the moment we will work locally, we start a local MLflow Tracking Server:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们使用MLflow来跟踪和管理我们的模型。由于目前我们将在本地工作，我们启动一个本地的MLflow Tracking Server：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a branch where we train and save our model:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个分支，我们在其中训练并保存模型：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we initiate an MLflow run context to start a run, train the model and
    then save it using MLflow:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，我们初始化MLflow运行上下文以启动一个运行，训练模型，然后使用MLflow保存模型：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Merge to the main branch and add a git tag :'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并到主分支并添加git标签：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Train a model using the following command:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令训练模型：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Where `configs/cnn.yaml` file contains some configuration parameters like batch
    size and number of epochs.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`configs/cnn.yaml`文件包含一些配置参数，如批量大小和训练轮次。
- en: 'We can view the run in the MLflow UI to see the results by simply navigate
    to the previous URL in our browser. Click on the experiment name `cnn` to list
    its associated runs and then click on the random name that has been generated
    for the run :'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在MLflow UI中查看运行结果，只需在浏览器中导航到之前的URL。点击实验名称`cnn`以列出其相关的运行，然后点击为运行生成的随机名称：
- en: '![](../Images/f751ad7e1fa8e5a6a806343a5dd31ea2.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f751ad7e1fa8e5a6a806343a5dd31ea2.png)'
- en: 'By clicking on the run name, the RUN page is displayed where the details of
    the execution are shown:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击运行名称，显示RUN页面，其中显示了执行的详细信息：
- en: '![](../Images/3436dfc437fa16b0206f5785f6d80ad4.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3436dfc437fa16b0206f5785f6d80ad4.png)'
- en: 'When you save a model using MLflow, it creates a directory structure containing
    the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用MLflow保存模型时，它会创建一个包含以下内容的目录结构：
- en: '`data` folder that includes the serialized files containing the model parameters.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`文件夹包含序列化的模型参数文件。'
- en: '`MLmodel` file that includes metadata about the model, such as the framework,
    the model’s signature, and other properties.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MLmodel`文件，包含有关模型的元数据，如框架、模型签名及其他属性。'
- en: '`conda.yaml` , `python_env.yaml` and `requirements.txt` files that elps recreate
    the same environment when loading the model.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conda.yaml`、`python_env.yaml`和`requirements.txt`文件，这些文件帮助重建相同的环境以便加载模型。'
- en: It also provides insights into the model schema and demonstrates how to execute
    predictions, offering flexibility with both *Spark DataFrame* and *Pandas DataFrame*.
    Another remarkable aspect of MLflow is its ability to preserve the commit ID from
    which the model was generated. Furthermore, it introduces a straightforward model
    registration option which a topic that will be explored in upcoming articles.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了对模型架构的深入理解，并展示了如何执行预测，支持 *Spark DataFrame* 和 *Pandas DataFrame* 两种灵活的选择。MLflow
    的另一个显著特点是能够保留生成模型的提交 ID。此外，它引入了一个简单的模型注册选项，这是一个将在后续文章中探讨的话题。
- en: Conclusion
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'Here we come to the end of this article. In this article, we learned through
    a practical example the implementation of version control for the three elements
    within a machine learning project: the code, the data, and the machine learning
    model. Version controlling is a fundamental principle in MLOps that enables meticulous
    tracking, seamless collaboration, and robust reproducibility in machine learning
    workflows. The entire codebase for this article is accessible in [the associated
    repository](https://github.com/Chim-SO/hand-written-digits-classification).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来到了本文的结尾。在这篇文章中，我们通过一个实际示例学习了如何对机器学习项目中的三个元素：代码、数据和机器学习模型进行版本控制。版本控制是 MLOps
    的一个基本原则，它能实现细致的跟踪、无缝的协作以及机器学习工作流程的强大可复现性。本文的完整代码库可在 [相关的仓库](https://github.com/Chim-SO/hand-written-digits-classification)
    中访问。
- en: Thanks for reading this article. You can find all the examples of the different
    tutorials I provide in my [GitHub profile](https://github.com/Chim-SO?tab=repositories).
    If you appreciate my tutorials, please support me by following me and subscribing.
    This way, you’ll receive notifications about my new articles. If you have any
    questions or suggestions, feel free to leave a comment.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读本文。您可以在我的 [GitHub 个人主页](https://github.com/Chim-SO?tab=repositories) 中找到我提供的所有不同教程的示例。如果您喜欢我的教程，请通过关注我和订阅来支持我。这样，您将收到我新文章的通知。如果您有任何问题或建议，请随时留言。
- en: '[](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d?source=post_page-----e13c518067dc--------------------------------)
    [## A Key Start to MLOps: Exploring Its Essential Components'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d?source=post_page-----e13c518067dc--------------------------------)
    [## MLOps 的关键起点：探索其基本组件'
- en: A Beginner-Friendly Introduction to MLOps
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初学者友好的 MLOps 介绍
- en: towardsdatascience.com](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d?source=post_page-----e13c518067dc--------------------------------)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d?source=post_page-----e13c518067dc--------------------------------)
- en: References
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] [https://dvc.org/doc/install](https://dvc.org/doc/install)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://dvc.org/doc/install](https://dvc.org/doc/install)'
- en: Image credits
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片来源
- en: All images and figures in this article whose source is not mentioned in the
    caption are by the author.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中所有未在说明中提及来源的图片和图表均由作者提供。
