- en: '🦜🔗LangChain: Enhancing Performance with Memory Capacity'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 🦜🔗LangChain：通过记忆容量提升性能
- en: 原文：[https://towardsdatascience.com/langchain-enhancing-performance-with-memory-capacity-c7168e097f81](https://towardsdatascience.com/langchain-enhancing-performance-with-memory-capacity-c7168e097f81)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/langchain-enhancing-performance-with-memory-capacity-c7168e097f81](https://towardsdatascience.com/langchain-enhancing-performance-with-memory-capacity-c7168e097f81)
- en: '![](../Images/7ad10b2af7c0deba0e3b68918593a2f0.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ad10b2af7c0deba0e3b68918593a2f0.png)'
- en: Photo by [Milad Fakurian](https://unsplash.com/ko/@fakurian?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Milad Fakurian](https://unsplash.com/ko/@fakurian?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: LangChain’s Boost through Memory Expansion Techniques
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LangChain 通过记忆扩展技术提升性能
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)
    ·4 min read·Jun 21, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)
    ·4 分钟阅读·2023年6月21日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: I have already published [articles](https://medium.com/towards-data-science/develop-applications-powered-by-language-models-with-langchain-d2f7a1d1ad1a)
    about LangChain before, introducing the library and all its capabilities. Now
    I would like to focus on a key aspect, how to manage memory in intelligent chatbots.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前已经发布过关于 LangChain 的[文章](https://medium.com/towards-data-science/develop-applications-powered-by-language-models-with-langchain-d2f7a1d1ad1a)，介绍了这个库及其所有功能。现在我想集中讨论一个关键方面，即如何在智能聊天机器人中管理记忆。
- en: Chatbots or agents also need an information storage mechanism, which can take
    different forms and perform different functions. **Implementing a memory system
    in chatbots not only helps make them more clever, but also more natural and useful
    for users**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人或代理程序也需要一种信息存储机制，这可以采取不同的形式并执行不同的功能。**在聊天机器人中实现记忆系统不仅有助于使它们更加聪明，还能让它们对用户更自然、更有用**。
- en: Fortunately, LangChain provides APIs that make it easy for developers to implement
    memory in their applications. In this article, we will explore this aspect in
    more detail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，LangChain 提供了使开发人员能够轻松实现应用程序中记忆的 API。在本文中，我们将更详细地探讨这一方面。
- en: Use Memory in LangChain
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 LangChain 中使用记忆
- en: A best practice when developing chatbots is to **save all the interactions the
    chatbot has with the user.** This is because the **state of the LLM can change
    depending on the past conversation**, in fact, the LLM to the same question from
    2 users will also answer differently because they have a different past conversation
    with the chatbot and therefore it is in a different state.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发聊天机器人的最佳实践之一是**保存聊天机器人与用户的所有互动**。这是因为**LLM 的状态可能会根据过去的对话而变化**，实际上，LLM 对两个用户提出的相同问题会给出不同的回答，因为他们与聊天机器人有不同的过去对话，因此它处于不同的状态。
- en: So what the chatbot memory creates is nothing more than a list of old messages,
    which are fed back to it before a new question is asked. Of course, the **LLM
    have limited context, so you have to be a little creative and choose how to feed
    this history back to the LLM**. The most common methods are to return a summary
    of the old messages or return only the N latest messages that are probably the
    most informative.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，聊天机器人记忆创建的内容无非就是旧消息的列表，这些消息在提出新问题之前会反馈给它。当然，**LLM 有有限的上下文，因此你需要稍微发挥创造力，选择如何将这些历史记录反馈给
    LLM**。最常见的方法是返回旧消息的摘要或仅返回最近的 N 条消息，这些消息可能是最具信息性的。
- en: Start with the basics with ChatMessageHistory
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 ChatMessageHistory 的基础开始
- en: This is the main class that allows us to manage the messages that occur between
    the chatbot (AI) and the user (Human). This class provides two main methods which
    are The following.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是允许我们管理聊天机器人（AI）与用户（Human）之间消息的主要类。此类提供了两个主要方法，如下所示。
- en: '**add_user_message:** allows us to add a message into the chatbot’s memory
    and tag the message as “user”'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**add_user_message:** 允许我们将消息添加到聊天机器人的记忆中，并将该消息标记为“用户”'
- en: '**add_ai_message:** allows us to add a message into the chatbot’s memory and
    tag the message as “AI”'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**add_ai_message:** 允许我们将消息添加到聊天机器人的记忆中，并将该消息标记为“AI”'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This class allows you to do various things, but in its simplest use, you can
    look at it as saving various messages to a list from time to time. Then you can
    also review all the messages you have added simply by iterating over the history
    in the following way.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类允许你做各种事情，但在最简单的使用情况下，你可以将其视为不时将各种消息保存到列表中。然后，你也可以通过以下方式遍历历史记录，简单地查看你添加的所有消息。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Advanced Memory with ConversationBufferMemory
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ConversationBufferMemory 进行高级记忆管理
- en: The **ConversationBufferMemory** class behaves somewhat like the ChatMessageHistory
    class with respect to the message store, though it **provides clever methods to
    retrieve old messages**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**ConversationBufferMemory** 类在消息存储方面的行为有点类似于 ChatMessageHistory 类，但它**提供了聪明的方法来检索旧消息**。'
- en: For example, we can retrieve old messages, as a list of messages or as one big
    string depending on what we need. If we want to ask the LLM to make a summary
    of the past conversation it might be useful to have the past conversation as one
    big string. If we want to do a detailed analysis of the past instead, we can read
    one message at a time by extracting a list.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以以消息列表或一个大字符串的形式检索旧消息，这取决于我们的需求。如果我们想让 LLM 对过去的对话进行总结，将过去的对话作为一个大字符串可能会很有用。如果我们想对过去的对话进行详细分析，我们可以通过提取列表来逐条阅读消息。
- en: Also with the ConversationBufferMemory class, we can add messages to the history
    using the add_user_message and add_user_message methods.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ConversationBufferMemory 类，我们还可以通过 add_user_message 和 add_user_message 方法将消息添加到历史记录中。
- en: The load_memory_variables method on the other hand is used to extract old messages
    in list or dictionary form depending on what is specified, let’s see an example.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，load_memory_variables 方法用于提取旧消息，可以是列表或字典形式，具体取决于指定的内容，让我们看一个示例。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Manage Memory in Multiple Conversations
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理多个对话的记忆
- en: We have seen toy examples of how to manage memory by saving and retrieving messages.
    **But in a real-world application you will probably need to manage the memory
    of several conversations**. LangChain allows you to manage this case as well with
    the use of what are called **chains.**
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何通过保存和检索消息来管理记忆的简单示例。**但在实际应用中，你可能需要管理多个对话的记忆**。LangChain 允许你通过使用所谓的**链**来管理这种情况。
- en: '**A chain is nothing more than a workflow of various simple or complex steps
    that allow you to achieve a certain goal.**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**链不过是实现某个目标的一系列简单或复杂步骤的工作流。**'
- en: '**For example, an LLM that looks up a piece of information on Wikipedia because
    it does not know how to answer a certain question is a chain.**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**例如，一个 LLM 查找维基百科上的一条信息，因为它不知道如何回答某个问题，这就是一个链。**'
- en: To handle various conversations, it is enough to associate a ConversationBufferMemory
    with each chain that is created with an instantiation of the ConversationChain
    class.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理各种对话，只需将一个 ConversationBufferMemory 实例与每个创建的链关联即可，这些链是通过 ConversationChain
    类的实例化来创建的。
- en: This way when the predict method of the model is called, all the steps of the
    chain are run so the model will read the past messages of the conversation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当调用模型的 predict 方法时，链中的所有步骤都会运行，因此模型会读取对话中的过去消息。
- en: Let’s look at a simple example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Final Thoughts
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: In conclusion, **memory is a critical component of a chatbot,** and LangChain
    provides several frameworks and tools to manage memory effectively. Through the
    use of classes such as **ChatMessageHistory and ConversationBufferMemory, you
    can capture and store user interactions with the AI**, and use this information
    to guide future AI responses. I hope this information helps you build smarter
    and more capable chatbots!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，**记忆是聊天机器人的一个关键组成部分，** LangChain 提供了多个框架和工具来有效管理记忆。通过使用如**ChatMessageHistory
    和 ConversationBufferMemory** 等类，你可以捕捉并存储用户与 AI 的互动，并利用这些信息指导未来的 AI 响应。我希望这些信息能帮助你构建更智能、更强大的聊天机器人！
- en: In the next article, I will show you how to use LangChain tools.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我将向你展示如何使用 LangChain 工具。
- en: If you found this article useful follow me here on Medium! [😉](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这篇文章有用，可以在 Medium 上关注我！[😉](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)
- en: The End
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束
- en: '*Marcello Politi*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*马塞洛·波利提*'
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [Website](https://marcello-politi.super.site/)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Linkedin](https://www.linkedin.com/in/marcello-politi/)、[Twitter](https://twitter.com/_March08_)、[Website](https://marcello-politi.super.site/)'
