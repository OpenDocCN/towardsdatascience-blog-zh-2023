- en: 'Linear programming: Theory and applications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性规划：理论与应用
- en: 原文：[https://towardsdatascience.com/linear-programming-theory-and-applications-c67600591612?source=collection_archive---------3-----------------------#2023-04-05](https://towardsdatascience.com/linear-programming-theory-and-applications-c67600591612?source=collection_archive---------3-----------------------#2023-04-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/linear-programming-theory-and-applications-c67600591612?source=collection_archive---------3-----------------------#2023-04-05](https://towardsdatascience.com/linear-programming-theory-and-applications-c67600591612?source=collection_archive---------3-----------------------#2023-04-05)
- en: Linear optimization main concepts and implementation in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性优化的主要概念及其在 Python 中的实现
- en: '[](https://medium.com/@bruscalia12?source=post_page-----c67600591612--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----c67600591612--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c67600591612--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c67600591612--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----c67600591612--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page-----c67600591612--------------------------------)[![布鲁诺·斯卡利亚
    C. F. 莱特](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----c67600591612--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c67600591612--------------------------------)[![数据科学之道](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c67600591612--------------------------------)
    [布鲁诺·斯卡利亚 C. F. 莱特](https://medium.com/@bruscalia12?source=post_page-----c67600591612--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-programming-theory-and-applications-c67600591612&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----c67600591612---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c67600591612--------------------------------)
    ·13 min read·Apr 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc67600591612&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-programming-theory-and-applications-c67600591612&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----c67600591612---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-programming-theory-and-applications-c67600591612&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----c67600591612---------------------post_header-----------)
    发表在 [数据科学之道](https://towardsdatascience.com/?source=post_page-----c67600591612--------------------------------)
    ·13 分钟阅读·2023年4月5日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc67600591612&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-programming-theory-and-applications-c67600591612&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----c67600591612---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc67600591612&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-programming-theory-and-applications-c67600591612&source=-----c67600591612---------------------bookmark_footer-----------)![](../Images/fffd9350e61f068983fceb5a4c5e2a3d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc67600591612&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flinear-programming-theory-and-applications-c67600591612&source=-----c67600591612---------------------bookmark_footer-----------)![](../Images/fffd9350e61f068983fceb5a4c5e2a3d.png)'
- en: Photo by [Patrick Fore](https://unsplash.com/@patrickian4?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Patrick Fore](https://unsplash.com/@patrickian4?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Numerical optimization is a fundamental tool in quantitative decision-making
    processes. To optimize a given goal, one must select values for interrelated decision
    variables under some prescribed set of circumstances. The format of the mathematical
    equations that describe the objective and the constraints of the problem is used
    to distinguish optimization problems between two major categories: *Linear* and
    *Nonlinear Programming*.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数值优化是量化决策过程中一个基本工具。为了优化给定的目标，必须在某些规定的情况下选择相互关联的决策变量的值。描述目标和约束条件的数学方程的格式用于区分优化问题的两个主要类别：*线性*和*非线性编程*。
- en: Management sciences and operations research make extensive use of linear models,
    whereas nonlinear programming problems tend to arise naturally in the physical
    sciences and engineering (Nocedal & Wright, 2006). In linear problems, as the
    name suggests, the objective(s) and constraints are described by linear functions
    only, which will be the focus of the current article.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 管理科学和运筹学广泛使用线性模型，而非线性编程问题通常自然出现在物理科学和工程学中（Nocedal & Wright, 2006）。在线性问题中，正如名称所示，目标和约束仅由线性函数描述，这将是本文的重点。
- en: Throughout this article, some of the main theoretical aspects of linear programming
    will be covered, besides applications in classical problems using Python. To do
    this, we will use the libraries *scipy* and *pyomo* (Bynum et al., 2021).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将涵盖线性编程的一些主要理论方面，以及使用 Python 在经典问题中的应用。为此，我们将使用 *scipy* 和 *pyomo* 库（Bynum
    et al., 2021）。
- en: 'You may find here a short summary of the remainder of this text:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到本文本其余部分的简要总结：
- en: '[Problem statement](#d73a)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问题陈述](#d73a)'
- en: '[Feasible space and solution techniques](#d77c)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可行空间和解决技术](#d77c)'
- en: '[The product mix problem](#71af)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[产品组合问题](#71af)'
- en: '[The transportation problem](#0f73)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运输问题](#0f73)'
- en: '[Further reading](#0b54)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[进一步阅读](#0b54)'
- en: '[Conclusions](#cd50)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#cd50)'
- en: '[References](#30f1)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[参考文献](#30f1)'
- en: You can find the complete code in this [GIT repository](https://github.com/bruscalia/optimization-demo-files/tree/main/convex/linear).
    Now enjoy the ride!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个 [GIT 仓库](https://github.com/bruscalia/optimization-demo-files/tree/main/convex/linear)
    找到完整的代码。现在，尽情享受吧！
- en: Problem statement
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题陈述
- en: When formulating an optimization problem, one must define an objective that
    is a function of a vector decision variables ***x*** and might be subject to some
    equality and inequality constraints, which are functions of ***x*** as well. The
    objective can be defined either in a *minimization* or *maximization* sense although
    the former is the most usual. Notice that by simply multiplying the coefficients
    *cᵢ* of a *maximization* objective, it can be re-formulated in a *minimization*
    sense.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在制定优化问题时，必须定义一个目标，该目标是向量决策变量 ***x*** 的函数，并可能受到一些等式和不等式约束的限制，这些约束也是 ***x*** 的函数。目标可以定义为
    *最小化* 或 *最大化*，尽管前者更为常见。请注意，通过简单地乘以 *最大化* 目标的系数 *cᵢ*，可以将其重新定义为 *最小化* 目标。
- en: In linear problems, the decision variable space must be limited somehow. Otherwise,
    decision variables would converge to positive or negative infinity values according
    to the objective function. Constraints might be formulated by either equality
    or inequality relationships. They are usually stated as rows in the problem matrix.
    Let us distinguish the matrix of equality constraints ***A****_eq* from the matrix
    of inequality constraints ***A****_ub*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在线性问题中，决策变量空间必须以某种方式加以限制。否则，决策变量将根据目标函数趋向于正无穷或负无穷。约束可以通过等式或不等式关系来制定。它们通常在问题矩阵中作为行呈现。让我们区分等式约束矩阵
    ***A****_eq* 和不等式约束矩阵 ***A****_ub*。
- en: Lower and upper boundaries for each component of ***x*** might be explicit in
    the formulation, which reduces the search space. As a convention, due to solution
    techniques, usually lower bounds for decision variables are by default equal to
    zero. This leads to a general problem formulation such as the following.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组件 ***x*** 的下界和上界可能在公式中明确规定，这减少了搜索空间。作为惯例，由于解决技术，通常决策变量的下界默认等于零。这导致了如下的一般问题公式。
- en: '![](../Images/780119ebdaf4f617198f9c3b300f7ccb.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/780119ebdaf4f617198f9c3b300f7ccb.png)'
- en: Linear problem in generic formulation. (Image by the author).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通用形式的线性问题。（作者提供的图片）。
- en: Inequality constraints might be re-formulated as equality constraints by adding
    non-negative slack variables. If this occurs and all decision variables are stated
    non-negative, we say the linear program is in the *standard form*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不等式约束可以通过添加非负松弛变量重新公式化为等式约束。如果发生这种情况，并且所有决策变量都声明为非负，我们称线性规划为 *标准形式*。
- en: '![](../Images/b628705c02b1b81c3f0b719f6c064edf.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b628705c02b1b81c3f0b719f6c064edf.png)'
- en: Inequality constraint re-formulated as equality by including a nonnegative slack
    variable. (Image by the author).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含一个非负松弛变量将不等式约束重新公式化为等式。（作者提供的图片）。
- en: And can then be stated as the following.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以陈述如下。
- en: '![](../Images/a6ea008be2f3e2dbeea03875d61bc0fd.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6ea008be2f3e2dbeea03875d61bc0fd.png)'
- en: Linear programming problem in standard form. (Image by the author).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 标准形式的线性规划问题。（作者提供的图片）。
- en: Notice that inequalities work as equalities if their corresponding slack variables
    are equal to zero. We will dive deeper into that in the next section when discussing
    the feasible space and solution techniques.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当不等式的对应松弛变量为零时，不等式将作为等式工作。我们将在下一节中深入探讨这一点，讨论可行空间和解决技术。
- en: Feasible space and solution techniques
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可行空间和解决技术
- en: Let us introduce a simple example to explore the concepts of this section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们引入一个简单的例子来探讨本节的概念。
- en: '![](../Images/f647840cb04341e3bb3f37cf65744ff3.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f647840cb04341e3bb3f37cf65744ff3.png)'
- en: Example problem. (Image by the author).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 示例问题。（图片来源于作者）。
- en: Which can be represented in a two-dimensional space as the following.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在二维空间中表示为如下图示。
- en: '![](../Images/4589a4e4dc4d3088bd99ea5debd6fdbc.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4589a4e4dc4d3088bd99ea5debd6fdbc.png)'
- en: Notice that in each vertice of the feasible region (colored), a subset of constraints
    is active. Moreover, observe that the optimal solution in this example lies in
    a vertice. Recall that, when inequalities are active, their corresponding slack
    variables for the problem in the *standard form* are equal to zero. In linear
    problems, we will be interested in finding which constraints are active in a vertice
    that contains the optimal solution.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在可行区域的每个顶点（有色的），都有一个约束子集是活跃的。此外，观察到在这个示例中，最优解位于一个顶点。请记住，当不等式活跃时，它们在*标准形式*下的对应松弛变量为零。在线性问题中，我们将关注找到包含最优解的顶点中哪些约束是活跃的。
- en: A generalization for higher dimensional problems is that, if an optimal solution
    exists, the set of optimal points can be a single vertice (unique solution), an
    edge or face, or even the entire feasible set (multiple solutions). The problem
    has no solution if the feasible set is empty (the infeasible case) or if the objective
    function is unbounded on the feasible region (the unbounded case).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高维问题的推广是，如果存在最优解，则最优点的集合可以是一个单独的顶点（唯一解）、一个边或面，甚至是整个可行集合（多个解）。如果可行集合为空（不可行情况）或目标函数在可行区域上无界（无界情况），则问题没有解。
- en: In a formal definition, suppose the matrix ***A*** of the problem in its *standard
    form* has full row rank. In practice, preprocessing usually is applied to remove
    some redundancies. Reformulation by adding slack, surplus, and artificial variables
    is also used to force ***A*** to satisfy this condition (Nocedal & Wright, 2006).
    If we can identify a feasible point ***x*** with at most *m* nonzero components
    and the corresponding matrix ***B*** (*m* × *m*) of the columns from ***A*** matching
    nonzero indices in ***x*** is nonsingular, ***x*** is called a *basic feasible
    point* or a *basic feasible solution*. The variables set to zero are denoted *nonbasic*
    variables, while the remaining are denoted *basic* variables.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在正式定义中，假设问题的矩阵***A***在其*标准形式*下具有满行秩。在实践中，通常会进行预处理以去除一些冗余。通过添加松弛变量、盈余变量和人工变量来重新制定问题也是为了强制***A***满足这个条件（Nocedal
    & Wright, 2006）。如果我们可以识别一个至多具有*m*个非零分量的可行点***x***，并且对应的矩阵***B***（*m* × *m*），由***A***中与***x***中非零索引匹配的列组成，且为非奇异的，那么***x***称为*基本可行点*或*基本可行解*。设置为零的变量称为*非基本*变量，而其余的称为*基本*变量。
- en: Back to the feasible region… The feasible set defined by the linear constraints
    is a polytope (in the two-variable example provided it is a polygon). Algebraically,
    all its vertices correspond to *basic feasible points* previously described. We
    can, therefore, make a connection between the algebraic and geometric viewpoints
    of the problem and gain insight into understanding how the *simplex* method works.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 回到可行区域……由线性约束定义的可行集合是一个多面体（在提供的两变量示例中，它是一个多边形）。代数上，其所有顶点对应于之前描述的*基本可行点*。因此，我们可以将问题的代数视角与几何视角联系起来，从而深入理解*单纯形*方法的工作原理。
- en: 'Variants of the *simplex* method are probably the most widely used solution
    techniques of linear programming. They explore the fundamental theorem of linear
    programming (Luenberger & Ye, 2008):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*单纯形*方法的变体可能是线性规划中最广泛使用的解决技术。它们探讨了线性规划的基本定理（Luenberger & Ye, 2008）：'
- en: If there is a *feasible solution*, there is a *basic feasible solution*.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在*可行解*，则存在*基本可行解*。
- en: If there is an *optimal feasible solution*, there is an *optimal basic feasible
    solution*.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在*最优可行解*，则存在*最优基本可行解*。
- en: Thus, if an optimal solution exists, there is a vertice that contains an optimal
    solution. Aiming to find such a vertice, steps in the simplex method explore adjacent
    vertices, for which the set of basic indices differs in exactly one component
    until no further improvement is achieved. The reader interested in understanding
    better how to obtain a starting feasible point, prove the optimality of a solution,
    and how to iterate between two consecutive vertices might refer to Nocedal & Wright
    (2006) or Winston & Goldberg (2004).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果存在最优解，则存在一个顶点包含最优解。为了找到这样的顶点，单纯形法的步骤会探索相邻的顶点，其中基本索引的集合在一个分量上有所不同，直到没有进一步改进为止。对获取起始可行点、证明解的最优性以及在两个连续顶点之间迭代感兴趣的读者，可以参考Nocedal
    & Wright（2006）或Winston & Goldberg（2004）。
- en: Interior point methods are also widely used, especially for large linear programs.
    Interior-point methods share common features that distinguish them from the simplex
    method. Each interior-point iteration is expensive to compute and can make significant
    progress toward the solution, while the simplex method usually requires a larger
    number of inexpensive iterations (Nocedal & Wright, 2006). Some optimization solvers
    might also use variants of the simplex method to refine solutions obtained by
    interior point methods.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 内点方法也被广泛使用，特别是对于大型线性规划问题。内点方法具有一些与单纯形法不同的共同特征。每次内点迭代的计算成本较高，但能显著推进解决方案，而单纯形法通常需要更多的低成本迭代（Nocedal
    & Wright，2006）。一些优化求解器可能还会使用单纯形法的变体来完善由内点方法获得的解决方案。
- en: Both the *simplex* and *interior point* methods are represented in the figure
    below.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*单纯形*方法和*内点*方法都在下图中表示。'
- en: '![](../Images/e6d4a18764a72ed98721583ecae7ea57.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e6d4a18764a72ed98721583ecae7ea57.png)'
- en: Graphical representation of the simplex method (left) and an interior point
    method (right). (Image by the author).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 单纯形法（左）和内点法（右）的图示表示。（作者提供的图片）。
- en: Now done with some important theoretical aspects, in the next section, we will
    implement our first problem using Python. To solve it, we will first use the Python
    package *scipy* which has wrappers for the open-source solver HiGHS. Furthermore,
    we will implement the same problem using *pyomo* (Bynum et al., 2021) and solve
    it with the CBC solver. Both solvers will make use of variants of the simplex
    method to obtain their solutions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在完成了一些重要的理论方面的内容，在下一部分，我们将使用Python实现我们的第一个问题。为了解决这个问题，我们将首先使用Python包*scipy*，它有对开源求解器HiGHS的封装。此外，我们还将使用*pyomo*（Bynum等，2021）实现相同的问题，并用CBC求解器解决它。两个求解器都将利用单纯形法的变体来获得解决方案。
- en: The product mix problem
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品组合问题
- en: In the product mix problem, we must allocate limited *I* resources to produce
    *J* products maximizing expected returns. Each product *j* has a known unitary
    profit margin *cⱼ* and requires a known amount of each resource *fᵢⱼ*. Consider
    the availability of each resource *bᵢ*. Our decision variables represent how much
    of each product should be produced *xⱼ*. We can formulate the problem as the following.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在产品组合问题中，我们必须将有限的*I*资源分配给生产*J*种产品，以最大化预期回报。每种产品*j*具有已知的单位利润率*cⱼ*，并需要已知量的每种资源*fᵢⱼ*。考虑每种资源的可用量*bᵢ*。我们的决策变量表示每种产品应生产的数量*xⱼ*。我们可以将问题表述为如下。
- en: '![](../Images/fc6f2d68458a5e3fddd97a099dd637f0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fc6f2d68458a5e3fddd97a099dd637f0.png)'
- en: Product mix problem. (Image by the author).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 产品组合问题。（作者提供的图片）。
- en: From this structure, we can easily convert the problem to a matrix form, in
    which the matrix *A_ub* has elements *fᵢⱼ* in row *i* and column *j*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个结构出发，我们可以轻松地将问题转换为矩阵形式，其中矩阵*A_ub*在第*i*行和第*j*列的元素是*fᵢⱼ*。
- en: Consider an example in which we have three reactants {A, B, C} used to produce
    three products {D, E, F}. The availability of each reactant is respectively 8000,
    3000, and 2000\. The profit margin of each product is respectively 2.15, 1.34,
    1.72\. The proportions are given in the table below.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个例子，其中我们有三种反应物{A, B, C}用于生产三种产品{D, E, F}。每种反应物的可用量分别为8000、3000和2000。每种产品的利润率分别为2.15、1.34、1.72。比例见下表。
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let us start implementing this problem by importing useful libraries.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过导入有用的库来开始实现这个问题。
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And let us instantiate *numpy* arrays to represent our parameters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实例化*numpy*数组来表示我们的参数。
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are almost done now. All we need to do next is to call the *scipy* function
    *linprog* to solve the problem.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在几乎完成了。接下来需要做的就是调用*scipy*函数*linprog*来解决这个问题。
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And it should return a solution with properties *fun* (the objective function)
    and *x* (the vector of decision variables).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该返回具有属性*fun*（目标函数）和*x*（决策变量向量）的解决方案。
- en: This problem is more intuitive to formulate using matrix notation than others
    might be. For more complex problems, algebraic modeling languages (AML) can be
    very helpful. An amazing open-source alternative available in Python is *pyomo*
    (Bynum et al., 2021). So let us apply it to the product mix problem.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用矩阵符号来描述这个问题比使用其他方法更加直观。对于更复杂的问题，代数建模语言（AML）可以非常有帮助。在Python中，一个出色的开源替代方案是*pyomo*（Bynum等，2021）。那么让我们将其应用于产品组合问题。
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There are two approaches for modeling a problem in *pyomo*: *Abstract* and
    *Concrete* models. In the first approach, the algebraic expressions of the problem
    are defined before some data values are supplied, whereas, in the second, the
    model instance is created immediately as its elements are defined. You can find
    more about these approaches in the [library documentation](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)
    or in the book by Bynum et al. (2021). Throughout this article, we will adopt
    the *Concrete* model formulation.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在*pyomo*中，有两种建模问题的方法：*Abstract*和*Concrete*模型。在第一种方法中，问题的代数表达式是在提供数据值之前定义的，而在第二种方法中，模型实例在定义其元素时立即创建。您可以在[库文档](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)中或在Bynum等（2021）的书中找到更多关于这些方法的信息。在本文中，我们将采用*Concrete*模型形式。
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this problem there are two sets:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题中有两个集合：
- en: Resources *I*
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源*I*
- en: Products *J*
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品*J*
- en: When using *pyomo* we can create these sets as modeling components, which has
    some benefits of set operations implemented. It goes as the following.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*pyomo*时，我们可以将这些集合创建为建模组件，这样可以实现某些集合操作的好处。具体如下。
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we are using the *ConcreteModel* approach, we must provide values for each
    component immediately when instantiating it. For sets, this is done via the *initialize*
    keyword argument.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用*ConcreteModel*方法，因此在实例化时我们必须立即为每个组件提供值。对于集合，这是通过*initialize*关键字参数完成的。
- en: Now let us create the fixed parameters of our model. In *pyomo,* we can use
    the *Param* class to store parameters. Parameters can be defined over sets. In
    this case, we must pass the given sets as the first arguments in the definition.
    As for other *pyomo* components, multiple sets can be passed in this statement
    if the element defined (variable, parameter, expression, or constraint) is indexed
    by more than one set. This definition is in the Python **args* style.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建模型的固定参数。在*pyomo*中，我们可以使用*Param*类来存储参数。参数可以在集合上定义。在这种情况下，我们必须在定义中将给定的集合作为第一个参数传递。至于其他*pyomo*组件，如果定义的元素（变量、参数、表达式或约束）由多个集合索引，可以在此语句中传递多个集合。此定义采用了Python的**args**风格。
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, let us instantiate the decision variables and constraints. This is done
    using the *Var* and *Constraint* components respectively. Notice that I specified
    the domain of *x* as nonnegative reals. This can be done in *pyomo* via the *within*
    keyword argument.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实例化决策变量和约束。这是分别使用*Var*和*Constraint*组件完成的。请注意，我指定了*x*的领域为非负实数。这可以在*pyomo*中通过*within*关键字参数来实现。
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Observe that the constraint was instantiated passing the *rule* keyword argument.
    The rule must be a callable that receives the model as the first argument followed
    by indices of its corresponding domain.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，约束是在传递*rule*关键字参数的情况下实例化的。该规则必须是一个可调用的函数，它接收模型作为第一个参数，后面是其对应域的索引。
- en: We are almost done! Let us define the objective function.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快完成了！让我们定义目标函数。
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At last, let us instantiate a solver and use it to solve our model. In this
    example, I used the open-source solver CBC. You can download CBC binaries from
    [this link](https://www.coin-or.org/download/binary/Cbc/). You can also find an
    installation tutorial [here](https://github.com/coin-or/Cbc). As the CBC executable
    is included in the PATH variable of my system, I can instantiate the solver without
    specifying the path to an executable file. If yours is not, parse the keyword
    argument “executable” with the path to your executable file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们实例化一个求解器，并使用它来解决我们的模型。在这个例子中，我使用了开源求解器CBC。您可以从[这个链接](https://www.coin-or.org/download/binary/Cbc/)下载CBC二进制文件。您还可以[在这里](https://github.com/coin-or/Cbc)找到安装教程。因为CBC可执行文件已包含在我的系统的PATH变量中，所以我可以在不指定可执行文件路径的情况下实例化求解器。如果您的系统没有设置，请通过关键字参数“executable”传递可执行文件的路径。
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And we are done! Now you can access any modeling component and check its values
    by using the *print* or *display* methods. As expected, the solution using *pyomo*
    and CBC returned exactly the same values as the previous one using *scipy*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！现在你可以通过使用 *print* 或 *display* 方法访问任何建模组件并检查其值。正如预期的那样，使用 *pyomo* 和 CBC 的解决方案与之前使用
    *scipy* 的结果完全相同。
- en: 'In the following section, let us solve another problem slightly more complex:
    the transportation problem.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，让我们解决一个稍微复杂一点的问题：运输问题。
- en: The transportation problem
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运输问题
- en: In the transportation problem, we must match suppliers *I* of limited capacity
    *bᵢ* to a set of customers *J* to meet their known demands *dⱼ*. Each pair (*i*,
    *j*) has a known supply cost *cᵢⱼ*. Our goal is to minimize the total cost by
    defining how much of each demand is supplied by each supplier. We, therefore,
    consider decision variables *xᵢⱼ* to represent those quantities. If we consider
    conditions such that the total supply capacity meets total demand, we can formulate
    the problem as the following.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在运输问题中，我们必须将供应商 *I* 的有限容量 *bᵢ* 与客户 *J* 的已知需求 *dⱼ* 匹配。每对 (*i*, *j*) 具有已知的供应成本
    *cᵢⱼ*。我们的目标是通过定义每个需求由每个供应商提供的数量来最小化总成本。因此，我们考虑决策变量 *xᵢⱼ* 来表示这些数量。如果我们考虑总供应能力满足总需求的条件，我们可以将问题表述为以下内容。
- en: '![](../Images/bf95121652cdd7505efabfa5f004e954.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf95121652cdd7505efabfa5f004e954.png)'
- en: Transportation problem. (Image by the author).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运输问题。（作者提供的图片）。
- en: Let us consider an example with four customers {A, B, C, D} and three suppliers
    {1, 2, 3}. The demand of each customer is respectively 5, 15, 13, and 17\. The
    capacity of each supplier is respectively 14, 26, and 11\. Now consider the following
    costs matrix.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个有四个客户 {A, B, C, D} 和三个供应商 {1, 2, 3} 的例子。每个客户的需求分别为 5、15、13 和 17。每个供应商的容量分别为
    14、26 和 11。现在考虑以下成本矩阵。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let us instantiate these parameters as Python objects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些参数实例化为 Python 对象。
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And let us start implementing our *pyomo* model.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现我们的 *pyomo* 模型。
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once again we have two sets:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次有两个集合：
- en: Suppliers *I*
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 供应商 *I*
- en: Customers *J*
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户 *J*
- en: And the corresponding syntax should be quite similar to the previous example.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的语法应该与之前的示例非常相似。
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let us instantiate our parameters as *pyomo* components.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些参数实例化为 *pyomo* 组件。
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Our decision variables…
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的决策变量…
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And this time we should have both equality and inequality constraints as each
    demand must be met (equality) while respecting suppliers' capacities (inequality).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次我们应该有等式约束和不等式约束，因为每个需求必须得到满足（等式），同时要尊重供应商的容量（不等式）。
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let us define the objective function and once again use CBC to solve the problem.
    Notice that this time, I defined the objective using the *expr* keyword argument,
    which receives directly a *pyomo* expression.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义目标函数，再次使用 CBC 来解决问题。注意这次，我使用了 *expr* 关键字参数来定义目标，它直接接收一个 *pyomo* 表达式。
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And in this example, I will export my results to a *pandas* DataFrame for better
    visualization.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我将把结果导出到 *pandas* DataFrame，以便更好地可视化。
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Which should return something like this.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回类似的结果。
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: And in this scenario, all customers would be served with minimum total cost.
    But what if we had less availability of suppliers than total demand? The problem
    would then be infeasible and we would need to define which constraints should
    be violated to return some optimization result. In this problem, a simple suggestion
    would be to introduce artificial variables to meet the demands with unitary costs
    greater than those of attending from any of the original suppliers. Remember that
    the best strategy should be unique for each scenario discussed in real-world problems
    though.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，所有客户都将以最低的总成本得到服务。但如果我们供应商的可用性少于总需求呢？那么问题将变得不可行，我们需要定义哪些约束应该被违反以返回某种优化结果。在这个问题中，一个简单的建议是引入人工变量来满足那些单位成本高于任何原始供应商的需求。请记住，最佳策略应该是针对实际问题中的每种场景唯一的。
- en: Further reading
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For a deeper understanding of the theoretical aspects of Linear Programming,
    I strongly advise reading the related chapters in the books by Luenberger & Ye
    (2008) and Nocedal & Wright (2006). The concept of *duality* can be especially
    useful due to sensitivity analysis, an economic interpretation of the problem,
    and solution techniques (just to mention a few applications).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地理解线性规划的理论方面，我强烈建议阅读 Luenberger & Ye (2008) 和 Nocedal & Wright (2006) 书中的相关章节。*对偶性*的概念特别有用，因为它涉及灵敏度分析、问题的经济解释和解决技术（仅举几个应用）。
- en: Operations Research makes extensive use of numerical optimization. The book
    by Winston & Goldberg (2004) can be very helpful for those interested in more
    applications of optimization besides some related sciences.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 运筹学广泛使用数值优化。Winston & Goldberg (2004) 的书对于那些对优化的更多应用感兴趣的人可以非常有帮助，除了与相关科学的联系。
- en: Some real-world problems include discrete variables, to formulate disjunctive
    problem aspects and integrality. I wrote a few medium articles on the subject,
    which might be helpful. See here an [introduction to branch & bound](/a-gentle-introduction-to-branch-bound-d00a4ee1cad),
    the classical [knapsack problem](https://medium.com/towards-data-science/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9),
    and the [job-shop scheduling problem](https://medium.com/towards-data-science/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一些实际问题包括离散变量，以形成析取问题方面和整体性。我写了几篇关于这个主题的中等文章，可能会有所帮助。请参阅这里的 [分支与界限介绍](/a-gentle-introduction-to-branch-bound-d00a4ee1cad)，经典的
    [背包问题](https://medium.com/towards-data-science/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9)，以及
    [车间调度问题](https://medium.com/towards-data-science/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab)。
- en: 'Some problems also include *nonlinear* functions in either the objective or
    constraints. If that’s the case, you might want to check this other article:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一些问题还包括*非线性*函数，无论是在目标函数还是约束条件中。如果是这种情况，你可能会想查看这篇其他文章：
- en: '[](/nonlinear-programming-theory-and-applications-cfe127b6060c?source=post_page-----c67600591612--------------------------------)
    [## Nonlinear programming: Theory and applications'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/nonlinear-programming-theory-and-applications-cfe127b6060c?source=post_page-----c67600591612--------------------------------)
    [## 非线性编程：理论与应用]'
- en: Gradient-based line search optimization algorithms explained in detail and implemented
    from scratch in Python
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于梯度的线性搜索优化算法详细解释并在 Python 中从零实现。
- en: towardsdatascience.com](/nonlinear-programming-theory-and-applications-cfe127b6060c?source=post_page-----c67600591612--------------------------------)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/nonlinear-programming-theory-and-applications-cfe127b6060c?source=post_page-----c67600591612--------------------------------)
- en: Conclusions
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'Throughout this article, some of the most relevant theoretical aspects of linear
    optimization have been explained in detail and illustrated with two practical
    implementation examples: the product mix and the transportation problems. The
    Python library *scipy* was used to solve the product-mix problem using matrix
    notation and both problems were modeled using the Python AML *pyomo* and solved
    using open-source solvers. The code used is entirely available for readers in
    this [GIT repository](https://github.com/bruscalia/optimization-demo-files/tree/main/convex/linear).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，详细解释了线性优化的一些最相关的理论方面，并通过两个实际实现示例进行了说明：产品组合问题和运输问题。使用了 Python 库*scipy*来通过矩阵符号解决产品组合问题，并且这两个问题均使用
    Python AML *pyomo* 建模，并使用开源求解器进行求解。所用代码完全开放给读者，可以在这个 [GIT 仓库](https://github.com/bruscalia/optimization-demo-files/tree/main/convex/linear)中找到。
- en: References
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Bynum, M. L. et al., 2021\. *Pyomo-optimization modeling in python.* Springer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Bynum, M. L. 等, 2021\. *Pyomo：Python中的优化建模.* 施普林格。
- en: 'Luenberger, D. G. & Ye, Y., 2008\. *Linear and Nonlinear Programming.* 3rd
    ed. Stanford: Springer.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'Luenberger, D. G. & Ye, Y., 2008\. *线性与非线性编程.* 第三版. 斯坦福: 施普林格。'
- en: 'Nocedal, J. & Wright, S. J., 2006\. *Numerical Optimization.* 2nd ed. New York:
    Springer New York.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'Nocedal, J. & Wright, S. J., 2006\. *数值优化.* 第二版. 纽约: 施普林格纽约。'
- en: 'Winston, W. L. & Goldberg, J. B., 2004\. *Operations research: applications
    and algorithms.* 4th ed. Belmont, CA: Thomson Brooks/Cole Belmont.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'Winston, W. L. & Goldberg, J. B., 2004\. *运筹学：应用与算法.* 第四版. 贝尔蒙特，加州: 汤姆森布鲁克斯/科尔贝尔蒙特。'
