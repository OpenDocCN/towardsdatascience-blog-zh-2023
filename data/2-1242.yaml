- en: How To Solve Travelling Salesman Problem With Simulated Annealing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何用模拟退火解决旅行推销员问题
- en: 原文：[https://towardsdatascience.com/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd](https://towardsdatascience.com/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd](https://towardsdatascience.com/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd)
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模拟退火优化算法获取旅行推销员问题的**最佳解决方案**。
- en: '[](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)
    ·6 min read·Feb 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)
    ·6分钟阅读·2023年2月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/32255d463d6594ee2b3194c9ece853c7.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32255d463d6594ee2b3194c9ece853c7.png)'
- en: Photo by [Annie Spratt](https://unsplash.com/de/@anniespratt?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Annie Spratt](https://unsplash.com/de/@anniespratt?utm_source=medium&utm_medium=referral)
    提供，发布在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: 'The [***travelling salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)is
    a ubiquitous problem within [***combinatorial optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    and mathematics in general. The problem poses the question: ‘Given a list of cities
    and their distances, what is the shortest route that visits each city once and
    returns to the original city?’'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[***旅行推销员问题 (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)
    是 [***组合优化***](https://en.wikipedia.org/wiki/Combinatorial_optimization) 和数学中一个普遍存在的问题。这个问题提出了这样一个问题：‘给定一个城市及其距离的列表，什么是访问每个城市一次并返回原始城市的最短路径？’'
- en: A more formal mathematical definition for the TSP is the [**Hamiltonian cycle**](https://en.wikipedia.org/wiki/Hamiltonian_path).
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旅行推销员问题的一个更正式的数学定义是 [**哈密顿回路**](https://en.wikipedia.org/wiki/Hamiltonian_path)。
- en: The reason this problem is famous is because it is [***NP-hard***](https://en.wikipedia.org/wiki/NP-hardness)***.***
    This essentially means you cannot find the optimal solution in a reasonable amount
    of time as the addition of new cities lead to a [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    of the number of possible routes. For example, with ***4*** cities the number
    of possible routes is ***3***, with ***6*** cities it is ***60***, however with
    ***20*** cities it is a huge ***60,822,550,200,000,000!***
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题之所以著名，是因为它是 [***NP-hard***](https://en.wikipedia.org/wiki/NP-hardness)***。***
    这本质上意味着你不能在合理的时间内找到**最佳解决方案**，因为新城市的增加会导致 [***组合爆炸***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    可能路径的数量。例如，***4*** 个城市的可能路径数为 ***3***，***6*** 个城市的路径数为 ***60***，然而 ***20*** 个城市的路径数达到了巨大的
    ***60,822,550,200,000,000!***
- en: The number of solutions to the TSP is **(n-1)!/2** where **n** is the number
    of cities. For large **n** the number of solutions is [**intractable**](https://en.wiktionary.org/wiki/intractable)by
    modern computing standards.
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: TSP 的解决方案数量为 **(n-1)!/2**，其中 **n** 是城市的数量。对于较大的 **n**，解决方案的数量 [**不可处理**](https://en.wiktionary.org/wiki/intractable)
    现代计算标准。
- en: So this begs the question, how do we find the shortest distance if we have some
    unfathomable number of routes to try? Well, you can of course use the [***brute-force***](https://blog.routific.com/blog/travelling-salesman-problem)
    (naive solution) approach and try every possible route, but like we mentioned
    above, for a certain number of cities this can take years with current computing
    standards. In fact for ***20*** cities, it would take on the order of [***~1000***
    years to try every route](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这就引出了一个问题：如果我们有一些难以想象的路线要尝试，我们如何找到最短距离？当然，你可以使用[***暴力破解***](https://blog.routific.com/blog/travelling-salesman-problem)（简单解法）的方法尝试每一种可能的路线，但正如我们上面提到的，对于一定数量的城市，使用当前的计算标准可能需要几年时间。事实上，对于***20***个城市，尝试每一条路线大约需要[***~1000***
    年](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)！
- en: This is where we refer to special [***heuristic***](https://en.wikipedia.org/wiki/Heuristic_(computer_science))
    or [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic) algorithms,
    which don’t guarantee to find the best solution every time, but will try and achieve
    a *good-enough* solution to the problem in a reasonable amount of time. In this
    article, we will use such an algorithm named [***Simulated Annealing***](https://en.wikipedia.org/wiki/Simulated_annealing)
    ***(SA)*** to solve the TSP.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们提到了一些特殊的[***启发式***](https://en.wikipedia.org/wiki/Heuristic_(computer_science))或[***元启发式***](https://en.wikipedia.org/wiki/Metaheuristic)算法，这些算法并不保证每次都能找到最佳解，但会尝试在合理的时间内获得一个*足够好的*解决方案。在本文中，我们将使用一种名为[***模拟退火***](https://en.wikipedia.org/wiki/Simulated_annealing)的算法***(SA)***来解决旅行商问题。
- en: Simulated Annealing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟退火
- en: Overview
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Simulated Annealing is a stochastic [***global search***](https://en.wikipedia.org/wiki/Global_optimization)
    algorithm which means it uses randomness as part of its search for the best solution.
    It derives its name and inspiration from a similar process named [***Annealing***](https://en.wikipedia.org/wiki/Annealing_(materials_science))
    in [***Metallurgy***](https://en.wikipedia.org/wiki/Metallurgy) whereby heating
    or cooling a metal affects its physical characteristics.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟退火是一种随机[***全局搜索***](https://en.wikipedia.org/wiki/Global_optimization)算法，这意味着它在寻找最佳解决方案的过程中使用了随机性。它的名字和灵感来自于[***退火***](https://en.wikipedia.org/wiki/Annealing_(materials_science))过程，这一过程在[***冶金***](https://en.wikipedia.org/wiki/Metallurgy)中，通过加热或冷却金属来影响其物理特性。
- en: SA uses this concept of temperature in determining the probability of transitioning
    (stochasticity of the search) to a worse solution in order to more widely explore
    the search space and have a better chance of finding the [***global optimum***](https://en.wikipedia.org/wiki/Maxima_and_minima).
    This helps avoid getting stuck in a [***local optimum***](https://en.wikipedia.org/wiki/Local_optimum)
    which algorithms such as [***Hill Climbing***](https://en.wikipedia.org/wiki/Hill_climbing)
    often do.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SA利用温度的概念来确定过渡到更差解决方案的概率（搜索的随机性），以更广泛地探索搜索空间，并更有可能找到[***全局最优解***](https://en.wikipedia.org/wiki/Maxima_and_minima)。这有助于避免陷入[***局部最优解***](https://en.wikipedia.org/wiki/Local_optimum)，这类情况常常发生在[***爬山算法***](https://en.wikipedia.org/wiki/Hill_climbing)等算法中。
- en: Theory
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理论
- en: 'The general mathematical framework of SA is:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SA的一般数学框架是：
- en: '![](../Images/9da4d08b77e9b035591c1bf918a26073.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9da4d08b77e9b035591c1bf918a26073.png)'
- en: Equation generated by author.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的方程。
- en: 'Where:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '![](../Images/85547289e68b773bdc0e161dd3c1a438.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85547289e68b773bdc0e161dd3c1a438.png)'
- en: Equation generated by author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的方程。
- en: In these equations ***x*** is the current state, ***x’*** is the new state,
    ***Δy*** is the difference in cost or score of the two states, ***P(x → x’)***
    is the probability of transitioning to the new state from the current on and ***T***
    is the temperature.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些方程中，***x*** 是当前状态，***x’*** 是新状态，***Δy*** 是两个状态之间成本或得分的差异，***P(x → x’)***
    是从当前状态过渡到新状态的概率，***T*** 是温度。
- en: One can see that we always transition to the new state when it has a better
    score than the current one we are in. Additionally, when the temperature ***T***
    is very high, we are also very likely to transition to the new site despite it
    having a worse score. This allows us to more easily move around and **explore**
    the search space to find the global optimum.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看出，当新状态的得分优于当前状态时，我们总是会过渡到新状态。此外，当温度***T***很高时，我们也很可能过渡到得分较差的新状态。这使我们能够更容易地在搜索空间中移动，**探索**全局最优解。
- en: As the temperature decreases, we are less likely to transition to a worse solution.
    Therefore, the process starts to converge to an optimum and starts **exploiting**
    the search space.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 随着温度的降低，我们转移到更差解的可能性减小。因此，过程开始趋向于最优并开始 **利用** 搜索空间。
- en: 'The temperature is often cooled exponentially:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 温度通常以指数形式冷却：
- en: '![](../Images/5792d44c41d7e19438a14cf4bb2e9d58.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5792d44c41d7e19438a14cf4bb2e9d58.png)'
- en: Equation generated by author.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 方程由作者生成。
- en: Where ***0 ≤ γ ≤ 1*** and ***t*** is the iteration number.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ***0 ≤ γ ≤ 1*** 和 ***t*** 是迭代次数。
- en: Another common question is how to determine the initial temperature? This is
    actually quite a complex topic and I point the reader to [***here***](https://www.researchgate.net/publication/227061666_Computing_the_Initial_Temperature_of_Simulated_Annealing)
    for a research paper on the subject. In general, you can just start with a temperature
    that you know is high enough to accept worse solutions at the beginning. This
    is just a classic trial and error process!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见问题是如何确定初始温度？这实际上是一个相当复杂的话题，我建议读者查看 [***这里***](https://www.researchgate.net/publication/227061666_Computing_the_Initial_Temperature_of_Simulated_Annealing)
    的研究论文。一般来说，你可以从一个你知道足够高的温度开始，以便在开始时接受更差的解。这只是一个经典的试错过程！
- en: Algorithm For TSP
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TSP 算法
- en: 'The way SA can be used for the TSP is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SA 进行 TSP 的方法如下：
- en: Get an initial solution, this can be any valid route for the salesman.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个初始解，这可以是销售员的任何有效路线。
- en: Randomly select two cities and swap them in the route.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机选择两个城市，并在路线中交换它们。
- en: Use SA to compute the probability of whether we accept this new solution or
    not.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SA 计算我们是否接受这个新解的概率。
- en: Continue this process for a set number of iterations and cool the temperature
    (decrease) on every iteration.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一组设定的迭代次数继续此过程，并在每次迭代中降低温度（减少）。
- en: Always log the best overall solution you have found as well.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终记录你找到的最佳总体解。
- en: Python Implementation
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 实现
- en: Let’s implement this in Python to show you a working example.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Python 中实现这一点，展示一个工作示例。
- en: 'First we will generate some data points, which will be our cities:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们将生成一些数据点，这些将是我们的城市：
- en: GitHub Gist by author.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Gist 作者提供。
- en: '![](../Images/a0993029f03520a91079adecb7566a70.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0993029f03520a91079adecb7566a70.png)'
- en: Plot generated by author in Python.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图由作者在 Python 中生成。
- en: The plot above is our cities along with an initial solution. The initial solution
    was simply generated by going through the cities in alphabetical order e.g. ***a,
    b, c ... r, s, a***. We have ***20*** cities, which means we have a breathtaking
    total of ***60,822,550,200,000,000*** different possible routes to try!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了我们的城市以及一个初始解。初始解是通过按字母顺序遍历城市生成的，例如 ***a, b, c ... r, s, a***。我们有 ***20***
    个城市，这意味着我们总共有 ***60,822,550,200,000,000*** 种不同的可能路线可供尝试！
- en: Now we will build a Python class to carry out the Simulated Annealing process
    for the TSP!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将构建一个 Python 类来执行 TSP 的模拟退火过程！
- en: I am not the best coder in Python, so I appreciate the following snippet may
    not be the best implementation …
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我不是最好的 Python 程序员，所以我知道以下代码片段可能不是最佳实现……
- en: GitHub Gist by author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Gist 作者提供。
- en: 'We will now run the SA optimization algorithm and plot the solution:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将运行 SA 优化算法并绘制解：
- en: GitHub Gist by author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Gist 作者提供。
- en: '![](../Images/3f8d29554b07054dcea1badd265ea11d.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f8d29554b07054dcea1badd265ea11d.png)'
- en: Plot generated by author in Python.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图由作者在 Python 中生成。
- en: '![](../Images/5d955185b51b0ef02ecee46a6a6fd90b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d955185b51b0ef02ecee46a6a6fd90b.png)'
- en: Plot generated by author in Python.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图由作者在 Python 中生成。
- en: The above plots show the solutions we iterated over plotted alongside the temperature
    and the best current solution. The bottom plot shows the route of the best solution
    we found through the SA algorithm. From a simple ‘eye-test’ this new solution
    is much better than the initial and seems to be quite optimal.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图显示了我们迭代过的解，与温度和当前最佳解一起绘制。底部图显示了我们通过 SA 算法找到的最佳解的路线。从简单的“眼睛测试”来看，这个新解比初始解要好得多，并且似乎相当接近最优。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this post we have gone over the travelling salesman problem, which asks us
    to find the shortest route for a set of cities (points). The number of possible
    different routes explodes as we add more cities and cannot be solved brute-force.
    However, we can make use of a meta-heuristic algorithm such as Simulated Annealing
    (SA) to find sufficient solution in most cases.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了旅行商问题，该问题要求我们找到一组城市（点）之间的最短路径。随着城市数量的增加，可能的不同路径数量呈指数增长，无法通过穷举法解决。然而，我们可以利用像模拟退火（SA）这样的元启发式算法，在大多数情况下找到足够的解决方案。
- en: 'The full code used in the article can be found at my GitHub here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 文章中使用的完整代码可以在我的GitHub上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/simulated_annealing_tsp.py?source=post_page-----c248447a8bcd--------------------------------)
    [## Medium-Articles/simulated_annealing_tsp.py at main · egorhowell/Medium-Articles'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/simulated_annealing_tsp.py?source=post_page-----c248447a8bcd--------------------------------)
    [## Medium-Articles/simulated_annealing_tsp.py at main · egorhowell/Medium-Articles'
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我在中等博客/文章中使用的代码。通过创建一个账户来为egorhowell/Medium-Articles的发展做贡献…
- en: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/simulated_annealing_tsp.py?source=post_page-----c248447a8bcd--------------------------------)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/simulated_annealing_tsp.py?source=post_page-----c248447a8bcd--------------------------------)
- en: Another Thing!
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一件事！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的新闻通讯，[**Dishing the Data**](https://dishingthedata.substack.com/)，每周分享成为更好数据科学家的技巧。没有“虚假”或“点击诱饵”，只有来自实践数据科学家的纯粹可操作的见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----c248447a8bcd--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://newsletter.egorhowell.com/?source=post_page-----c248447a8bcd--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读《Dishing The Data》，由Egor Howell编写，Substack出版物…
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----c248447a8bcd--------------------------------)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----c248447a8bcd--------------------------------)'
- en: Connect With Me!
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
- en: References and Further Reading
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献与进一步阅读
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*优化算法*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    和 [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144)。 ***2019***.'
