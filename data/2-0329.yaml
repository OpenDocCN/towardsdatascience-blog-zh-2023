- en: '*args, **kwargs, and Everything in Between'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*args, **kwargs 和一切介于两者之间'
- en: 原文：[https://towardsdatascience.com/args-kwargs-and-everything-in-between-ff7d9b536494](https://towardsdatascience.com/args-kwargs-and-everything-in-between-ff7d9b536494)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/args-kwargs-and-everything-in-between-ff7d9b536494](https://towardsdatascience.com/args-kwargs-and-everything-in-between-ff7d9b536494)
- en: The fundamentals of function parameters and arguments in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的函数参数和实参基础
- en: '[](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)[![Philip
    Wilkinson, Ph.D.](../Images/9811fa38963c29193b01a5cf856d014f.png)](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)
    [Philip Wilkinson, Ph.D.](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)[![Philip
    Wilkinson, Ph.D.](../Images/9811fa38963c29193b01a5cf856d014f.png)](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)
    [Philip Wilkinson, Ph.D.](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)
    ·6 min read·Jul 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)
    ·阅读时间6分钟·2023年7月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f4942f955c3c59bada72dac594277ddb.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f4942f955c3c59bada72dac594277ddb.png)'
- en: Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Python has become the go-to language in Data Science for its versatility, simplicity,
    and powerful libraries. Functions, with their ability to encapsulate reusable
    code, play a key role in streamlining and enhancing the data science workflow
    in Python. Understanding the nuances of function arguments and parameters is essential
    for harnessing the true potential of Python functions in the context of Data Science.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python因其多功能性、简洁性和强大的库，已成为数据科学的首选语言。函数凭借其封装可重用代码的能力，在Python的数据科学工作流程中发挥着关键作用。理解函数参数和实参的细微差别对于在数据科学背景下充分发挥Python函数的真正潜力至关重要。
- en: Parameters v Arguments
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数与实参
- en: 'The first thing to understand when working with functions in Python is the
    difference between parameters and arguments. A parameter is a variable within
    a function definition, while an argument is what you pass into the function''s
    parameters when you call it. For example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中处理函数时，首先要理解参数和实参之间的区别。参数是函数定义中的变量，而实参是你在调用函数时传入函数参数的值。例如：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`param1` and `param2` are functional parameters, while `"Arg1"` and `"Arg2"`
    are the arguments.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`param1` 和 `param2` 是函数参数，而“Arg1”和“Arg2”是实参。'
- en: Positional v Keyword arguments
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位置参数与关键字参数
- en: In this example, “Arg1” and “Arg2” are passed in as positional arguments. This
    is because the parameter that each argument relates to are not specified in the
    functional call. This means that due to their order “Arg1” takes the position
    of `param1`, and “Arg2” takes the position of `param2` .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，“Arg1”和“Arg2”作为位置参数传入。这是因为每个参数相关的参数在函数调用中没有被指定。这意味着由于它们的顺序，“Arg1”占据了`param1`的位置，而“Arg2”占据了`param2`的位置。
- en: We can change the order by taking advantage of keyword arguments. This is where
    the parameter that each argument relates to, is clearly defined using the correct
    keyword.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过利用关键字参数来改变顺序。这是因为每个参数相关的参数是通过正确的关键字明确定义的。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example produces the same output as the first function call, even when
    the position of the arguments has been switched because the parameter that each
    argument relates to was defined using the corresponding keyword.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例产生的输出与第一次函数调用相同，即使参数的位置被交换，因为每个参数相关的参数是使用相应的关键字定义的。
- en: Default Parameters
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认参数
- en: 'The second thing you will often see is default parameters. These parameters
    often have a common value or “default” value that can often be ignored when calling
    the function. They are set in the function definition by assigning the parameter
    a default value:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常会看到的第二种情况是默认参数。这些参数通常具有一个常见的值或“默认”值，当调用函数时，通常可以忽略这些值。它们通过给参数赋予默认值来在函数定义中设置：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the function above we set the we set the default of whether to print or
    not to `False` . This can be overridden when you call the function:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的函数中，我们将是否打印的默认值设置为`False`。调用函数时可以覆盖此设置：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When working with default parameters, it is important to note that a non-default
    parameter cannot follow a default parameter in the function definition. This ensures
    that your most used and variable parameters are at the start of your function
    definition and are assigned first.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理默认参数时，重要的是要注意在函数定义中，非默认参数不能跟随默认参数。这确保了你最常用和变化的参数在函数定义的开头，并且首先被赋值。
- en: '*Args'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*Args'
- en: 'A brilliant thing about functions in Python is that they can take an arbitrary
    number of positional arguments. The syntax for this takes the form of the argument
    name prefaced by an asterisk. By convention, this argument is defined as `*args`
    :'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python函数的一个精彩之处在于它们可以接受任意数量的位置参数。这种语法以参数名前加星号的形式出现。按照惯例，这个参数被定义为`*args`：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`*args` is typically passed as a tuple to the function, so we can take advantage
    of iteration. For example, in the volume function above, we assume that any amount
    of numbers are passed into the function to calculate the volume of a multi-dimensional
    object.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`*args`通常作为元组传递给函数，这样我们可以利用迭代。例如，在上面的体积函数中，我们假设传递了任意数量的数字来计算一个多维物体的体积。'
- en: 'A safer way to implement this however is to ensure that at least one number
    is passed in to start with, with a variable number of other dimensional lengths:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一种更安全的实现方式是确保至少传递一个数字开始，同时有一个变量数量的其他维度长度：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the `*args` parameter in this allows you to pass any number of positional
    arguments to the function, making the function more flexible and capable of handling
    a varying number of inputs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`*args`参数允许你将任意数量的位置参数传递给函数，使函数更加灵活，能够处理不同数量的输入。
- en: 'It is important to note that to working with `*args`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在处理`*args`时：
- en: '`*args` must come after every other positional parameter in the function definition.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args`必须在函数定义中的所有其他位置参数之后出现。'
- en: There can only be one `*args` in each parameter list.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个参数列表中只能有一个`*args`。
- en: '`*args` only collects positional arguments, not keyword arguments'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args`仅收集位置参数，不包括关键字参数。'
- en: Any argument proceeding `*args` are taken to be regular positional arguments
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何在`*args`之后的参数都被视为常规位置参数。
- en: Any arguments passed after `*args` must be passed as mandatory keyword arguments
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`*args`之后传递的任何参数必须作为强制关键字参数传递。
- en: '`**kwargs`'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`**kwargs`'
- en: The alternative is to accept an arbitrary number of keyword arguments. This
    can be done by prefixing a parameter in the function definition with `**` . By
    convention, this parameter is called `**kwargs` . This allows you to pass key-value
    pairs as arguments to function, providing a flexible way to handle named parameters
    in a function.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是接受任意数量的关键字参数。这可以通过在函数定义中用`**`前缀参数来完成。按照惯例，这个参数称为`**kwargs`。这允许你将键值对作为参数传递给函数，提供了一种灵活的方式来处理函数中的命名参数。
- en: 'An example of this is creating HTML tags which have a key and a value:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是创建具有键和值的HTML标签：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To take advantage of `**kwargs` you must ensure:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用`**kwargs`，你必须确保：
- en: '`*args` must always precede `**kwargs` in an argument list'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args`必须始终在`**kwargs`之前出现在参数列表中。'
- en: '`**kwargs` must always be last in an argument list'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs`必须总是放在参数列表的最后。'
- en: Positional only arguments
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅位置参数
- en: After Python 3.8, you also have the ability to specify positional-only arguments.
    This is done by adding `/` at the end of the parameter list that you want to be
    positional.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.8之后，你还可以指定仅位置参数。这通过在参数列表的末尾添加`/`来完成，表示该参数只能是位置参数。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example you cannot pass a value to the x parameter as a keyword, x must
    be a positional argument.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你不能将值作为关键字传递给x参数，x必须是一个位置参数。
- en: This can also be combined with regular arguments to ensure that some are positional,
    whilst others can be positional or keyword.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以与常规参数结合使用，以确保某些参数是位置参数，而其他参数可以是位置参数或关键字参数。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, `greeting` can be passed to the function by either its position
    or keyword, whilst `name` can only be passed by position.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`greeting` 可以通过位置或关键字传递给函数，而 `name` 只能通过位置传递。
- en: This can be useful when arguments have a natural order but are hard to give
    good descriptive names to. It also allows you to refactor your code without worrying
    too much about code that depends on those names.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当参数有自然顺序但很难给出良好的描述性名称时，这可能很有用。它还允许你重构代码而不必过于担心依赖这些名称的代码。
- en: Keyword only arguments
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅关键字参数
- en: 'The alternative is to specify keyword-only arguments. This is done by adding
    a `*` before a parameter list in the function definition. An argument after the
    `*` must be a keyword:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式是指定仅关键字参数。这通过在函数定义中的参数列表前添加一个`*`来完成。在`*`后的参数必须是关键字：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, `celsius` is a keyword-only argument so Python will raise an
    error if you try to specify it based on position without the keyword.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`celsius` 是一个仅关键字参数，因此如果你尝试基于位置而不使用关键字来指定它，Python 会抛出错误。
- en: This is useful in situations where you want to make sure that the correct value
    is being passed through to the function. In this case, we ensure that Celsius
    is passed to the function, not Fahrenheit or Kelvin.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你想确保正确的值被传递到函数中时非常有用。在这种情况下，我们确保传递给函数的是摄氏度，而不是华氏度或开尔文。
- en: Type Hinting
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型提示
- en: 'Finally, since Python 3.5 you can now hint which type a parameter should expect.
    This follows the syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从 Python 3.5 起，你现在可以提示参数应该期望什么类型。这遵循以下语法：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For example, hinting that you want to add together two numbers together in
    a function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，提示你希望在函数中将两个数字相加：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is important to note here that this does not enforce types, but is merely
    used to suggest and hint which types should be passed to the function. Importantly,
    type hints can now be picked up by most modern IDEs and warnings can be presented
    when the incorrect type is passed to the function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这并不强制类型，而只是用来建议和提示应该传递给函数的类型。重要的是，现代 IDE 现在可以识别类型提示，并在传递错误类型时提供警告。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Mastering function arguments in Python is a crucial skill for any data scientist
    seeking to optimise their workflow. With a solid understanding of function arguments,
    you can write cleaner, more concise code that promotes reusability, modularity
    and maintainability. So embrace the versatility and complexity of function arguments
    in Python, continue to explore the depths of Python’s function capability and
    experiment with different argument patterns to improve your coding workflow.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握 Python 中的函数参数对于任何寻求优化工作流的数据科学家来说都是一项关键技能。通过对函数参数的深入理解，你可以编写更简洁、清晰的代码，促进可重用性、模块化和可维护性。因此，拥抱
    Python 函数参数的多样性和复杂性，继续探索 Python 函数的深度，并尝试不同的参数模式，以改善你的编码工作流。
- en: If you liked what you read and are not yet a Medium member, feel free to sign
    up for Medium using my referral link below to support me and other amazing writers
    on this platform! Thank you in advance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢你所读的内容，还不是 Medium 会员，可以通过下面的推荐链接注册 Medium，以支持我和平台上的其他优秀作者！提前感谢。
- en: '[](https://philip-wilkinson.medium.com/membership?source=post_page-----ff7d9b536494--------------------------------)
    [## Join Medium with my referral link — Philip Wilkinson'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入 Medium — Philip Wilkinson](https://philip-wilkinson.medium.com/membership?source=post_page-----ff7d9b536494--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的会员费的一部分将分配给你阅读的作者，你可以完全访问每个故事……
- en: philip-wilkinson.medium.com](https://philip-wilkinson.medium.com/membership?source=post_page-----ff7d9b536494--------------------------------)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[philip-wilkinson.medium.com](https://philip-wilkinson.medium.com/membership?source=post_page-----ff7d9b536494--------------------------------)'
- en: 'Or feel free to check out some of my other articles on Medium:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者随时查看我在 Medium 上的其他文章：
- en: '[](/eight-data-structures-every-data-scientist-should-know-d178159df252?source=post_page-----ff7d9b536494--------------------------------)
    [## Eight Data Structures Every Data Scientist Should Know'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 每个数据科学家都应该知道的八种数据结构](https://philip-wilkinson.medium.com/membership?source=post_page-----ff7d9b536494--------------------------------)'
- en: From Basic Data Structures to Abstract Data Types in Python
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Python 中的基本数据结构到抽象数据类型
- en: towardsdatascience.com](/eight-data-structures-every-data-scientist-should-know-d178159df252?source=post_page-----ff7d9b536494--------------------------------)
    [](/a-complete-data-science-curriculum-for-beginners-825a39915b54?source=post_page-----ff7d9b536494--------------------------------)
    [## A Complete Data Science Curriculum for Beginners
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[初学者的数据科学完整课程](https://towardsdatascience.com/a-complete-data-science-curriculum-for-beginners-825a39915b54?source=post_page-----ff7d9b536494--------------------------------)'
- en: 'UCL Data Science Society: Introduction to Python, Data Scientists Toolkit,
    Data Science with Python'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'UCL数据科学社团: Python介绍，数据科学家工具包，使用Python进行数据科学'
- en: towardsdatascience.com](/a-complete-data-science-curriculum-for-beginners-825a39915b54?source=post_page-----ff7d9b536494--------------------------------)
    [](https://python.plainenglish.io/a-practical-introduction-to-random-forest-classifiers-from-scikit-learn-536e305d8d87?source=post_page-----ff7d9b536494--------------------------------)
    [## A Practical Introduction to Random Forest Classifiers from scikit-learn
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[随机森林分类器的实用介绍](https://python.plainenglish.io/a-practical-introduction-to-random-forest-classifiers-from-scikit-learn-536e305d8d87?source=post_page-----ff7d9b536494--------------------------------)'
- en: 'UCL Data Science Society Workshop 14: What is a Random Forest Classifier, Implementation,
    Evaluation, and Improvement'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'UCL数据科学社团研讨会 14: 随机森林分类器是什么，实施，评估和改进'
- en: python.plainenglish.io](https://python.plainenglish.io/a-practical-introduction-to-random-forest-classifiers-from-scikit-learn-536e305d8d87?source=post_page-----ff7d9b536494--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[八种每个数据科学家都应该知道的数据结构](https://towardsdatascience.com/eight-data-structures-every-data-scientist-should-know-d178159df252?source=post_page-----ff7d9b536494--------------------------------)'
