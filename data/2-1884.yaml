- en: Software Engineering Best Practices for Writing Maintainable ML Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写可维护机器学习代码的软件工程最佳实践
- en: 原文：[https://towardsdatascience.com/software-engineering-best-practices-for-writing-maintainable-ml-code-717934bd5590](https://towardsdatascience.com/software-engineering-best-practices-for-writing-maintainable-ml-code-717934bd5590)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/software-engineering-best-practices-for-writing-maintainable-ml-code-717934bd5590](https://towardsdatascience.com/software-engineering-best-practices-for-writing-maintainable-ml-code-717934bd5590)
- en: '![](../Images/1d59ed9c7fdba6ad95f054d4357d2f46.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d59ed9c7fdba6ad95f054d4357d2f46.png)'
- en: A data scientist who is lost in a forest full of code. Related to the second
    and last tip. Image created with [Midjourney](https://www.midjourney.com) by the
    author.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一位迷失在代码森林中的数据科学家。与第二个和最后一个建议相关。图片由作者通过[Midjourney](https://www.midjourney.com)创建。
- en: Advanced coding tips for data scientists
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对数据科学家的高级编码建议
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----717934bd5590--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----717934bd5590--------------------------------)[](https://towardsdatascience.com/?source=post_page-----717934bd5590--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----717934bd5590--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----717934bd5590--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hennie-de-harder.medium.com/?source=post_page-----717934bd5590--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----717934bd5590--------------------------------)[](https://towardsdatascience.com/?source=post_page-----717934bd5590--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----717934bd5590--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----717934bd5590--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----717934bd5590--------------------------------)
    ·11 min read·Aug 6, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----717934bd5590--------------------------------)
    ·阅读时间11分钟·2023年8月6日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**Unlike traditional software engineering projects, ML codebases tend to lag
    behind in code quality due to their complex and evolving nature, leading to increased
    technical debt and difficulties in collaboration. Prioritizing maintainability
    is important to create robust ML solutions that can adapt, scale, and deliver
    value over time.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**与传统的软件工程项目不同，机器学习代码库由于其复杂和不断发展的特性，往往在代码质量上滞后，导致技术债务增加和协作困难。优先考虑可维护性对于创建稳健的机器学习解决方案至关重要，这些解决方案能够适应、扩展并随着时间的推移提供价值。**'
- en: In recent years, machine learning has taken the world by storm, transforming
    industries from healthcare to finance and more. As more organizations jump on
    the ML bandwagon to discover new possibilities and insights, the significance
    of writing maintainable and robust ML code becomes crucial. By crafting ML code
    that’s easy to work with and stands the test of time, teams can collaborate better
    and guarantee success as models and projects grow and adapt. The following section
    will show common examples from ML codebases and explain how to handle those properly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，机器学习在全球掀起了热潮，从医疗到金融等各个行业都发生了变革。随着越来越多的组织加入机器学习的行列，探索新的可能性和洞察力，编写可维护和稳健的机器学习代码变得至关重要。通过编写易于处理且经得起时间考验的机器学习代码，团队可以更好地协作，并在模型和项目成长和适应的过程中确保成功。以下部分将展示机器学习代码库中的常见示例，并解释如何妥善处理这些问题。
- en: Don’t Create Monoliths
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要创建大型单体结构
- en: This tip is probably irrelevant for you, but it’s written for the single person
    who is not aware of this (until now)!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个建议可能与你无关，但它是为那些尚未意识到这一点的个体（直到现在）编写的！
- en: Monolithic scripts, a.k.a. a single script for the whole project, may arise
    when you reuse your experimental code in production. Copy, paste, done! It’s always
    a bad idea to create one single script for a project. It’s difficult to read (even
    for the writer), hard to debug and inefficient. You can’t easily add new features
    or modify the code, because every time the whole thing has to run. Adding unittests
    is impossible as well, because the monolith is ‘the whole unit’.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 单体脚本，即一个脚本处理整个项目，可能会在你将实验代码复用到生产环境时出现。复制、粘贴、完成！创建一个单独的脚本来处理整个项目总是一个糟糕的主意。这种脚本难以阅读（即使是编写者也难以阅读）、难以调试且效率低下。你无法轻松添加新功能或修改代码，因为每次都需要运行整个脚本。添加单元测试也是不可能的，因为这个单体就是“整个单元”。
- en: Another problem with a single script is reusability. You can’t reuse the code
    in other projects, because it’s so hard to read.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单个脚本的另一个问题是可重用性。你不能在其他项目中重用这些代码，因为它很难阅读。
- en: There is only one reason to write a monolith; that is if you don’t like the
    colleague who takes over your work. If you want to get this person frustrated,
    it’s an easy way to accomplish that.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 写单体应用只有一个理由；那就是如果你不喜欢接手你工作的同事。如果你想让这个人感到沮丧，这是一个简单的方法。
- en: What to do instead? Write modules and classes. Create different code files that
    have one specific purpose. Every file should contain functions or classes and
    methods. By doing this, the code becomes way easier to read, debug, reuse and
    test. In the next tip you can find a commonly used directory structure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么应该怎么做呢？编写模块和类。创建具有单一特定用途的不同代码文件。每个文件应包含函数或类和方法。这样，代码会更容易阅读、调试、重用和测试。在下一个提示中，你可以找到一个常用的目录结构。
- en: Don’t Over-Engineer the Repository Structure
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要过度设计仓库结构
- en: This might seem counterintuitive, but it’s quite an important one. Over-engineering
    the repository structure refers to creating a complex and unnecessarily convoluted
    organization for your code and project files. It involves introducing layers of
    abstraction, excessive folder structures, and intricate naming conventions that
    may not provide any significant benefits in terms of maintainability, scalability,
    or collaboration. Instead, it adds unnecessary complexity, making it harder for
    team members to understand, navigate, and contribute to the project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有些违反直觉，但这是非常重要的。过度设计仓库结构指的是为代码和项目文件创建复杂且不必要的复杂组织。这涉及引入抽象层、过度的文件夹结构和复杂的命名约定，这些可能在可维护性、可扩展性或协作方面没有显著好处。相反，它增加了不必要的复杂性，使团队成员更难理解、导航和贡献项目。
- en: 'To name a few issues that may arise: slower development because of the increased
    cognitive load for developers. The learning curve for new team members becomes
    more complex, and the complexity of the repo can lead to code duplication and
    fragmentation.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可能出现的一些问题包括：由于开发者的认知负担增加，开发速度变慢。新团队成员的学习曲线变得更加复杂，而仓库的复杂性可能导致代码重复和碎片化。
- en: 'How can you maintain a healthy repository structure? Here are some tips that
    might help:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如何维持一个健康的仓库结构？以下是一些可能有帮助的提示：
- en: Follow standard directory layouts and naming conventions that are widely accepted
    in the ML community (see below).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循在机器学习社区中广泛接受的标准目录布局和命名约定（见下文）。
- en: Group related files and modules together in appropriate directories. For example,
    keep data preprocessing code separate from model training code.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将相关文件和模块分组放在适当的目录中。例如，将数据预处理代码与模型训练代码分开。
- en: Provide clear and concise documentation to guide team members on how to navigate
    and contribute to the project.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供清晰简洁的文档，以指导团队成员如何浏览和贡献项目。
- en: Regularly review the repository structure with the team to identify areas that
    can be simplified or improved.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期与团队审查仓库结构，以识别可以简化或改进的区域。
- en: 'And last but not least: Keep it simple! Avoid adding unnecessary layers of
    abstraction or complicated folder hierarchies unless they genuinely improve organization
    and readability.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是：保持简单！避免添加不必要的抽象层或复杂的文件夹层级，除非它们确实能改善组织和可读性。
- en: 'Here is an example of a standard directory structure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个标准目录结构的例子：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/71f64ba97af91ce6f51f4061a0293b52.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71f64ba97af91ce6f51f4061a0293b52.png)'
- en: Many nested folders can make a repo too complex. Photo by [Didssph](https://unsplash.com/@didsss?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 许多嵌套的文件夹可能使仓库过于复杂。照片由[Didssph](https://unsplash.com/@didsss?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Understand your Programming Language Behavior
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解你的编程语言行为
- en: In some situations, a programming language does not behave as you would expect.
    This can cause frustration and a lot of time wasted on debugging code. To prevent
    this, it helps a lot if you are aware of strange behavior of your programming
    language.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，编程语言的行为可能与预期不同。这可能会导致挫折和大量的调试时间。为了防止这种情况，如果你了解编程语言的奇怪行为，会大有帮助。
- en: If we take a look at Python, here are some examples that you should be aware
    of.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看看Python，以下是一些你应该注意的例子。
- en: 'The first one you might encounter as programmer is the following. You want
    to round numbers and then you discover this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，你可能会遇到的第一个例子是以下情况。你想要对数字进行四舍五入，然后你发现了这个问题：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What’s going on? In Python 3, the decision is made to use bankers’ rounding,
    which means that 0.5 is rounded to an even number. Why does this make sense? I
    like [this explanation](https://stackoverflow.com/questions/45223778/is-bankers-rounding-really-more-numerically-stable)
    on Stack Overflow.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？在 Python 3 中，决定使用银行家舍入，这意味着0.5会四舍五入为偶数。为什么这样做有意义？我喜欢[这个解释](https://stackoverflow.com/questions/45223778/is-bankers-rounding-really-more-numerically-stable)在
    Stack Overflow 上。
- en: 'Another example of strange behavior in Python:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 Python 中奇怪行为的例子：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the example above the default argument of the list is an empty list. But
    if you run the function for a second time, the output of the second run is surprising.
    It returns the previous list with the new item added! The reason for this is that
    in Python there are *mutable default arguments*, meaning that changes made to
    the default object persist across function calls. To avoid this, set the default
    to `None` and create a new instance of the mutable object within the function
    call.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，列表的默认参数是一个空列表。但是如果你第二次运行该函数，第二次运行的输出会令人惊讶。它返回的是之前的列表加上新的项！原因是，在 Python
    中存在*可变默认参数*，这意味着对默认对象的更改会在函数调用之间持续存在。为避免这种情况，将默认值设置为`None`，并在函数调用中创建一个新的可变对象实例。
- en: 'And another one, *floating-point arithmetic precision*:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是*浮点运算精度*：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It’s better to accept small tolerances when comparing floating point values.
    If you are comparing floating point values during testing and you use [pytest](https://docs.pytest.org/en/7.4.x/contents.html),
    you can solve this problem with `approx`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较浮点值时，最好接受小的容差。如果你在测试期间比较浮点值，并且使用了[pytest](https://docs.pytest.org/en/7.4.x/contents.html)，你可以使用`approx`解决这个问题：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the special case you are using Python 2.7, the following example can be
    confusing. Variables used in a list comprehension can “leak” into the outer scope:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Python 2.7，以下示例可能会让人困惑。列表推导式中使用的变量可能会“泄漏”到外部作用域：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Sorting with `None` will raise a `TypeError`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对`None`进行排序会引发`TypeError`：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also assign an attribute to an instance that is not present in its
    class:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将属性分配给一个类中不存在的实例：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another confusing example is about *inconsistent closures*. A closure is a
    function that captures and remembers the environment in which it was created,
    including any variables from its outer scope. While closures are a powerful feature,
    their behavior in loops can lead to surprising results:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个令人困惑的例子是*不一致的闭包*。闭包是一个函数，它捕获并记住它创建时的环境，包括来自外部作用域的任何变量。虽然闭包是一个强大的特性，但它们在循环中的行为可能会导致令人惊讶的结果：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: All functions return the product of the last value of `i` in the loop (which
    is 4) with `x`. This happens because closures in Python close over variables,
    not their values, which means they retain a reference to the variable `i`. When
    the closure is called later (outside the loop), it looks up the current value
    of `i` in its enclosing scope, which is now 4 (the last value in the loop).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有函数都返回循环中`i`的最后一个值（即4）与`x`的乘积。这是因为 Python 中的闭包闭合的是变量，而不是它们的值，这意味着它们保留对变量`i`的引用。当闭包稍后被调用（在循环外部时），它会查找其封闭作用域中`i`的当前值，现在是4（循环中的最后一个值）。
- en: 'An easy way to solve this would be to use default arguments:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一个简单方法是使用默认参数：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are many more examples besides these ones. Being aware of this will make
    your code more robust and reliable and it will avoid all those unwanted surprises!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些示例，还有许多其他例子。意识到这一点将使你的代码更加健壮和可靠，并避免所有那些意外的惊喜！
- en: Handling Multiple Return Values
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多个返回值
- en: Adding more and more parameters to return statements in functions can make Python
    code messy and harder to maintain, especially when the number of parameters grows
    large. Every time you change something, you need to update all the calling code,
    leading to a maintenance nightmare. Developers might mistakenly pass the parameters
    in the wrong order, leading to logical errors.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数的返回语句中添加越来越多的参数可能会使 Python 代码变得混乱且更难维护，特别是当参数数量增加时。每次你更改某些内容时，你需要更新所有调用代码，这会导致维护上的噩梦。开发人员可能会错误地按错误的顺序传递参数，从而导致逻辑错误。
- en: 'Python provides an elegant solution for this: `[namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple)`
    from Python’s `collections` module.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一种优雅的解决方案：Python的`collections`模块中的`[namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple)`。
- en: 'Here’s how you can use namedtuples to improve the clarity and maintainability
    of your code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用namedtuples来提高代码的清晰度和可维护性：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Easy, right? Using `namedtuple` has many benefits, like making your code more
    readable, being immutable and it’s more memory efficient (implemented in C). And
    maybe the biggest one for you as a programmer: you don’t have to update all the
    calling code after adding another parameter to the return statement.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 简单，对吧？使用`namedtuple`有许多好处，比如提高代码的可读性，保持不变性，并且更节省内存（用C实现）。对于你作为程序员来说，最大的好处也许是：在向返回语句添加另一个参数后，你不需要更新所有调用代码。
- en: 'Note: [namedtuples](https://docs.python.org/3/library/collections.html#collections.namedtuple)
    in Python are similar to [case classes](https://docs.scala-lang.org/tour/case-classes.html)
    in Scala.'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：[namedtuples](https://docs.python.org/3/library/collections.html#collections.namedtuple)在Python中类似于Scala中的[case
    classes](https://docs.scala-lang.org/tour/case-classes.html)。
- en: A Note on Exception Handling
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常处理注意事项
- en: 'The worst way of handling exceptions is blindly continuing when one occurs:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 处理异常的最糟糕方法是发生异常时盲目继续：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Never do this. If something happens and the result couldn’t be obtained, the
    script continues like everything is normal. The exceptions are silently ignored.
    This can lead to hidden bugs and unexpected behavior.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要这样做。如果发生了某些事情且未能获得结果，脚本会像一切正常一样继续。异常被默默忽略。这可能导致隐藏的错误和意外的行为。
- en: In some repos, you will find many `try` `except` blocks. Avoid using try-except
    blocks for normal flow control. Exceptions should be used for handling exceptional
    situations, not regular flow.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些代码库中，你会发现许多`try` `except`块。避免使用try-except块进行正常流程控制。异常应该用于处理异常情况，而不是常规流程。
- en: 'Another bad practice is catching generic exceptions:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种不良实践是捕获泛型异常：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This can hide specific errors and make debugging difficult. Also avoid bare
    `except` blocks. You won’t have a clue about what’s going on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会隐藏特定错误，使调试变得困难。还要避免裸`except`块。你将对发生了什么一无所知。
- en: How should you handle exceptions? Here are some useful tips.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该如何处理异常？以下是一些有用的提示。
- en: Try to be specific, and only catch generic exceptions for debugging. In some
    cases it can be useful to add a `finally` block. Code in the `finally` block will
    always run.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量具体，只捕获泛型异常用于调试。在某些情况下，添加`finally`块可能会很有用。`finally`块中的代码将始终运行。
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also create custom exception classes. With custom exceptions, you can
    provide more specific error messages and help distinguish different types of errors.
    It can be as easy as this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以创建自定义异常类。通过自定义异常，你可以提供更具体的错误消息，并帮助区分不同类型的错误。可以像这样简单：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Dealing Properly with Large Conditional Logic Trees
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适当地处理大型条件逻辑树
- en: The complexity of (business) logic can quickly escalate. It begins with a simple
    if-else statement, but as it expands, it turns into a massive conditional structure
    that becomes difficult to manage, leading to frustration. Fortunately, various
    approaches exist to address this challenge and enhance maintainability.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: （业务）逻辑的复杂性可以迅速升级。它从一个简单的if-else语句开始，但随着扩展，变成一个庞大的条件结构，变得难以管理，导致挫败感。幸运的是，存在多种方法来解决这一挑战并提高可维护性。
- en: 'One solution is to separate the logic from the processing, for example in a
    dictionary. Let’s look at the following if-else tree:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一种解决方案是将逻辑与处理分开，例如在字典中。让我们来看一下下面的if-else树：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can refactor this using a dictionary:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用字典对其进行重构：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Best is to define the mapping outside of the function in a separate settings
    or configuration file. This approach is okay, but it can still become quite a
    large dictionary if you aren’t careful.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在函数外部定义映射，在单独的设置或配置文件中。这种方法是可以的，但如果不小心，它仍然可能变成一个相当大的字典。
- en: Another way to handle this is by using *polymorphism*. Create a base class with
    a common interface, and then implement subclasses for each specific case. Each
    subclass will handle its unique logic.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这种情况的另一种方法是使用*多态*。创建一个带有通用接口的基类，然后为每个特定情况实现子类。每个子类将处理其独特的逻辑。
- en: 'Suppose we want to perform different mathematical operations based on the input
    `op` and apply them to `x` and `y`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想根据输入`op`执行不同的数学操作，并将它们应用于`x`和`y`：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And a final warning: beware of code repetition. If you have multiple models
    and you want to use their outputs to get to a final score, don’t create nested
    conditional logic trees. Instead, you can use multiple small functions to get
    to the final score.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个警告：要小心代码重复。如果你有多个模型并且希望使用它们的输出得到最终得分，不要创建嵌套的条件逻辑树。相反，你可以使用多个小函数来得到最终得分。
- en: Let’s look at a toy example from school. Your final grade for math will be calculated
    out of your attendance percentage and your exam percentage score.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个学校里的玩具示例。你的数学最终成绩将根据你的出勤率和考试百分比分数来计算。
- en: 'First look at this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先看看这个：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Looks complex right? And what if there are more factors involved in calculating
    the grade? The tree will grow exponentially with every added parameter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来复杂对吧？如果计算成绩时涉及更多因素怎么办？每增加一个参数，树形结构将呈指数增长。
- en: 'Fortunately, there exists a more concise and efficient solution for such scenarios:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，对于这种情况，存在一种更简洁高效的解决方案：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This solution scales really well! You can add a parameter to the list with its
    corresponding score and it will be included in the result.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案扩展性很好！你可以将一个参数及其对应的分数添加到列表中，它将被包括在结果中。
- en: 'Note: You might want to round the final solution when adding more parameters.
    Make sure to do it properly (see the tip about programming language behavior).'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：你可能希望在添加更多参数时对最终解决方案进行四舍五入。确保正确执行（参见有关编程语言行为的提示）。
- en: In the future you can use these examples as inspiration to create smarter code
    and avoid long conditional logic trees.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 未来你可以用这些示例作为灵感，编写更智能的代码，避免冗长的条件逻辑树。
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations on reaching the end of this post! The provided tips can be instrumental
    in keeping codebases structured and maintainable. Striking a balance between chaotic
    monolithic files and overly complex nested directories is key to get a good development
    experience.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你读完了这篇文章！提供的建议对于保持代码库结构化和可维护性非常有帮助。在混乱的单体文件和过于复杂的嵌套目录之间取得平衡是获得良好开发体验的关键。
- en: By understanding the programming language’s behavior, adopting named tuples
    for multiple return values, handling errors effectively and simplifying conditional
    logic, developers and teams can invest less time in maintenance and more in adding
    useful functionality or exploring new projects. Remember to fortify codebases
    with [tests](https://docs.pytest.org/en/7.4.x/), [linting](https://flake8.pycqa.org/en/latest/),
    [code formatting](https://github.com/psf/black) and [documentation](https://www.sphinx-doc.org/en/master/)
    to ensure long-term health and productivity.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解编程语言的行为、采用命名元组处理多个返回值、有效处理错误和简化条件逻辑，开发者和团队可以减少维护时间，更多地投入到添加有用功能或探索新项目中。记得用[测试](https://docs.pytest.org/en/7.4.x/)、[代码检查](https://flake8.pycqa.org/en/latest/)、[代码格式化](https://github.com/psf/black)和[文档](https://www.sphinx-doc.org/en/master/)来加强代码库，以确保长期健康和生产力。
- en: Happy coding, and until next time!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编程愉快，下次再见！
- en: Related
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关
- en: '[](/simplify-your-machine-learning-projects-ab171d19c9ef?source=post_page-----717934bd5590--------------------------------)
    [## Simplify Your Machine Learning Projects'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 简化你的机器学习项目](https://towardsdatascience.com/simplify-your-machine-learning-projects-ab171d19c9ef?source=post_page-----717934bd5590--------------------------------)'
- en: Why spending a lot of time and effort on a complex model is a bad idea, and
    what to do instead
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么花费大量时间和精力在复杂模型上是一个不好的主意，以及应该怎么做
- en: towardsdatascience.com](/simplify-your-machine-learning-projects-ab171d19c9ef?source=post_page-----717934bd5590--------------------------------)
    [](/how-to-compare-ml-solutions-effectively-28384e2cbca1?source=post_page-----717934bd5590--------------------------------)
    [## How to Compare ML Solutions Effectively?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何简化你的机器学习项目](https://towardsdatascience.com/simplify-your-machine-learning-projects-ab171d19c9ef?source=post_page-----717934bd5590--------------------------------)
    [## 如何有效比较机器学习解决方案](https://towardsdatascience.com/how-to-compare-ml-solutions-effectively-28384e2cbca1?source=post_page-----717934bd5590--------------------------------)'
- en: Increasing the chances of getting a model to production
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加将模型投入生产的机会
- en: towardsdatascience.com](/how-to-compare-ml-solutions-effectively-28384e2cbca1?source=post_page-----717934bd5590--------------------------------)
    [](https://medium.com/bigdatarepublic/detecting-data-drift-with-machine-learning-adb177544312?source=post_page-----717934bd5590--------------------------------)
    [## Detecting Data Drift with Machine Learning
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何有效比较机器学习解决方案](https://towardsdatascience.com/how-to-compare-ml-solutions-effectively-28384e2cbca1?source=post_page-----717934bd5590--------------------------------)
    [## 使用机器学习检测数据漂移](https://medium.com/bigdatarepublic/detecting-data-drift-with-machine-learning-adb177544312?source=post_page-----717934bd5590--------------------------------)'
- en: Understand degraded performance of your ML models with an easy, automated process.
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过一个简单的自动化过程，了解你的机器学习模型性能下降的情况。
- en: medium.com](https://medium.com/bigdatarepublic/detecting-data-drift-with-machine-learning-adb177544312?source=post_page-----717934bd5590--------------------------------)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/bigdatarepublic/detecting-data-drift-with-machine-learning-adb177544312?source=post_page-----717934bd5590--------------------------------)'
