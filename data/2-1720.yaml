- en: Python Dictcomp Pipelines in Examples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python dictcomp 管道示例
- en: 原文：[https://towardsdatascience.com/python-dictcomp-pipelines-in-examples-4c4ec4e66f3](https://towardsdatascience.com/python-dictcomp-pipelines-in-examples-4c4ec4e66f3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-dictcomp-pipelines-in-examples-4c4ec4e66f3](https://towardsdatascience.com/python-dictcomp-pipelines-in-examples-4c4ec4e66f3)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: See the power of dictcomp pipelines
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 见识dictcomp管道的威力
- en: '[](https://medium.com/@nyggus?source=post_page-----4c4ec4e66f3--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----4c4ec4e66f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4c4ec4e66f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4c4ec4e66f3--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----4c4ec4e66f3--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Marcin Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----4c4ec4e66f3--------------------------------)
    [![Towards Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4c4ec4e66f3--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----4c4ec4e66f3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4c4ec4e66f3--------------------------------)
    ·11 min read·Apr 20, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----4c4ec4e66f3--------------------------------)
    ·11分钟阅读·2023年4月20日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2d7b967369a43cb84c51293abe58fee0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d7b967369a43cb84c51293abe58fee0.png)'
- en: Pipelines process tasks one after another. Photo by [Daniel Schludi](https://unsplash.com/fr/@schluditsch?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 管道一个接一个地处理任务。图片来源于[Daniel Schludi](https://unsplash.com/fr/@schluditsch?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: This article is motivated by a task I contributed to in a real life project
    a couple of years ago. After [proposing the concept of comprehension pipelines](/building-comprehension-pipelines-in-python-ec68dce53d03),
    I noticed the solution could be nicely implemented using a dictcomp pipeline,
    with additional help of the `OptionalBool` data structure I proposed in [yet another
    article](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的灵感来源于几年前我在一个实际项目中参与的任务。在[提出理解管道的概念](/building-comprehension-pipelines-in-python-ec68dce53d03)后，我注意到这个解决方案可以通过使用`OptionalBool`数据结构，并结合dictcomp管道来很好地实现，`OptionalBool`是我在[另一篇文章](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8)中提出的。
- en: This article aims to show you how we can implement such a pipeline. I will go
    into some of the details, so that the code becomes clear and convincing. You can
    consider it a case study showing the implementation of a dictcomp pipeline.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章旨在展示我们如何实现这样的管道。我将详细讲解一些细节，以便代码变得清晰且令人信服。你可以将其视为一个案例研究，展示dictcomp管道的实现。
- en: 'We have already discussed the power of generator pipelines in Python:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了Python中生成器管道的威力：
- en: '[](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----4c4ec4e66f3--------------------------------)
    [## Building Generator Pipelines in Python'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 在 Python 中构建生成器管道](https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff?source=post_page-----4c4ec4e66f3--------------------------------)'
- en: This article proposes an elegant way to build generator pipelines
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这篇文章提出了一种优雅的方式来构建生成器管道
- en: towardsdatascience.com](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----4c4ec4e66f3--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----4c4ec4e66f3--------------------------------)'
- en: 'Later on, I proposed a Python-specific concept of comprehension pipelines:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，我提出了一个Python特有的理解管道概念：
- en: '[](/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----4c4ec4e66f3--------------------------------)
    [## Building Comprehension Pipelines in Python'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 在 Python 中构建理解管道](https://towardsdatascience.com/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----4c4ec4e66f3--------------------------------)'
- en: Comprehension pipelines are a Python-specific idea for building pipelines
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解管道是一个Python特有的构建管道的概念
- en: towardsdatascience.com](/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----4c4ec4e66f3--------------------------------)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----4c4ec4e66f3--------------------------------)'
- en: 'Comprehension pipelines constitute the generalization of generator pipelines.
    They are similar to generator pipelines, but while the former create a generator
    with results, the latter output results in a form of any type of comprehension:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 理解式管道构成了生成器管道的泛化。它们类似于生成器管道，但前者创建一个带有结果的生成器，而后者则以任何类型的理解式形式输出结果：
- en: a generator, from a generator pipeline
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个生成器，来自一个生成器管道
- en: a list, from a listcomp pipeline
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个列表，来自一个列表推导式管道
- en: a dictionary, from a dictcomp pipeline
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字典，来自一个字典推导式管道
- en: a set, from a setcomp pipeline
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个集合，来自一个集合推导式管道
- en: In the above article, I focused on presenting how such pipelines work and how
    to construct them. When doing so, I used a bit simplistic examples. Here, we will
    use a more sophisticated example, in which we will use a dictcomp pipeline.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述文章中，我专注于展示这种管道的工作原理以及如何构造它们。在此过程中，我使用了一些比较简单的示例。在这里，我们将使用一个更复杂的示例，其中我们将使用一个字典推导式管道。
- en: 'The task: Document filtering'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务：文档过滤
- en: Imagine your company has a large number of [Standard Operating Procedures](https://en.wikipedia.org/wiki/Standard_operating_procedure)
    (SOPs). They are in a mess, organized using an old and out-of-date system. You
    need to filter them using a particular key. For instance, you need to find which
    of them include the word “Python”.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你的公司有大量的[标准操作程序](https://en.wikipedia.org/wiki/Standard_operating_procedure)（SOP）。它们混乱不堪，使用了一个过时的系统进行组织。你需要使用特定的键来过滤它们。例如，你需要找出哪些包含“Python”一词。
- en: Surely, such filtering can be far more complex, so you’re expected to write
    a program that will enable one to change the filtering logic in a close future.
    What’s more, for the moment the standards are stored as local file sin a shared
    drive into which you have access from your local machine. However, this should
    change soon, so you need to make the reading logic easy to change, too.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种过滤可以复杂得多，因此你需要编写一个程序，以便将来能够更改过滤逻辑。此外，目前标准以本地文件的形式存储在你从本地计算机可以访问的共享驱动器中。然而，这种情况应该很快会改变，因此你还需要使读取逻辑易于更改。
- en: As mentioned above, out filtering task is also simple. The next task, however,
    can require more advanced parsing logic, like of particular fields or tables and
    the like. Again, the general mechanism will be similar, and we would simply need
    to rewrite the parser. You should take this into account in the implementation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们的过滤任务也很简单。然而，下一任务可能需要更高级的解析逻辑，例如特定字段或表格等。再次强调，整体机制将类似，我们只需重写解析器。在实现时，你应该考虑到这一点。
- en: Implementation
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: 'We can describe the algorithm for the task as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将该任务的算法描述如下：
- en: We have a list (or another sequence) of `documents`; each `document` from `documents`
    can be read to a string (which depends on the type of documents). In our first
    case, this will be a list of paths to the files. But the documents can be accessed
    in another way, for example, from a database.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个`documents`的列表（或其他序列）；`documents`中的每个`document`可以被读取为一个字符串（这取决于文档的类型）。在我们的第一个例子中，这将是文件路径的列表。但文档也可以通过其他方式访问，例如从数据库中。
- en: After reading a `document`, parse the text and apply the filtering logic. In
    our example, this boils down to checking if the text contains the word “Python”.
    If it does, return `True`; otherwise, return `False`.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在读取一个`document`后，解析文本并应用过滤逻辑。在我们的例子中，这归结为检查文本是否包含“Python”一词。如果包含，返回`True`；否则，返回`False`。
- en: Do the above step for all the documents from `documents`.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`documents`中的所有文档执行上述步骤。
- en: As output, return a dictionary with string representation of documents as keys
    (paths as strings in our example) and these Boolean values as the corresponding
    values.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为输出，返回一个字典，其中文档的字符串表示作为键（在我们的示例中为字符串形式的路径），这些布尔值作为对应的值。
- en: The code block below shows the contents of a `dictcomp_pipeline` module. It
    implements the above logic in a general way, as described above.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块展示了`dictcomp_pipeline`模块的内容。它以通用方式实现了上述逻辑。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Appendix 1, you will find this code with extended versions of docstrings,
    which explain some critical details, which we also cover below.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在附录 1 中，你会发现这个代码包含了扩展版的文档字符串，它们解释了一些关键细节，我们也将在下文中涵盖这些细节。
- en: 'The generalization is in two aspects: the way the data reader is implemented,
    and the way the data parser is implemented. We will discuss these aspects in the
    next section, in which we will discuss each of these three functions.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 泛化体现在两个方面：数据读取器的实现方式和数据解析器的实现方式。我们将在下一节中讨论这些方面，并逐一讨论这三个函数。
- en: Functions
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: Reading data
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取数据
- en: This particular implementation takes one argument, `path`, being a `pathlib.Path`
    instance. Although we have implemented the `read_text()` function in a particular
    way, the pipeline function (`get_dictcomp_pipeline()`) is not fixed on this very
    implementation. You can re-implement `read_text()` to meet your needs; it can,
    for instance, read documents from PDF files, web pages, or a database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的实现接受一个参数`path`，它是一个`pathlib.Path`实例。尽管我们以特定方式实现了`read_text()`函数，但管道函数（`get_dictcomp_pipeline()`）并未固定在这个实现上。你可以重新实现`read_text()`以满足你的需求；例如，它可以从PDF文件、网页或数据库中读取文档。
- en: 'You are free to change the function, but you have to keep several things unchanged:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自由更改函数，但必须保持以下几点不变：
- en: The function must take an element of `documents` from `get_dictcomp_pipeline()`
    as the first argument. It’s run as a positional argument, so you can name it however
    suits the task the function is to accomplish. In this particular implementation,
    it’s `path`.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数必须将`get_dictcomp_pipeline()`中的一个`documents`元素作为第一个参数。它作为位置参数传递，因此你可以根据函数要完成的任务为其命名。在这个特定实现中，它是`path`。
- en: If the function takes more arguments, they must work as keyword arguments and
    should be the same for all runs of `read_text()`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果函数接受更多参数，它们必须作为关键字参数，并且在所有`read_text()`的调用中都应相同。
- en: The function should return the text as a string.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数应返回一个字符串形式的文本。
- en: Parsing data
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析数据
- en: Although in our task, we look for the word “Python” in the documents, the pipeline
    enables the user to look for any word, thanks to the signature of the `parse_data()`
    function. It takes two arguments, `text` and `word`, both being strings. If `word`
    is found in `text`, the function returns `True`; and `False` otherwise.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在我们的任务中，我们在文档中查找“Python”这个词，管道使得用户能够查找任何单词，这要归功于`parse_data()`函数的签名。它接受两个参数，`text`和`word`，都是字符串。如果在`text`中找到`word`，函数返回`True`；否则返回`False`。
- en: This parsing logic ignores the case of words, which is done in a simple way
    via the `.lower()` string method for both the text and the word searched for.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解析逻辑忽略了单词的大小写，通过对文本和搜索的单词都使用`.lower()`字符串方法来简单实现。
- en: 'As was the case with `read_data()`, you can change the logic of the function
    as well as its signature, again keeping in mind the following conditions:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与`read_data()`的情况类似，你可以更改函数的逻辑以及其签名，但需记住以下条件：
- en: The first argument, used as a positional argument, is the text returned by `read_text()`,
    as `str`.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数，作为位置参数使用，是`read_text()`返回的文本，类型为`str`。
- en: If the function takes more arguments, they should be the same for all runs of
    `parse_text()`. These additional arguments must work as keyword arguments.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果函数接受更多参数，它们在所有`parse_text()`的调用中都应相同。这些额外的参数必须作为关键字参数。
- en: The function returns a Boolean value.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数返回一个布尔值。
- en: The pipeline
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: The `run_dictcomp_pipeline()` function is implemented in a way so that the two
    functions discussed above can have varying implementations, depending on the data
    source and parsing logic. This is done thanks to providing arguments to these
    two functions as keywords arguments, so by unpacking the corresponding dictionaries.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`run_dictcomp_pipeline()`函数的实现方式使得上述两个函数可以有不同的实现，取决于数据源和解析逻辑。这是通过将这些函数作为关键字参数传递，从而解包相应的字典来完成的。'
- en: One limitation, as mentioned in the two subsections above, is that any additional
    arguments must have the same value for all documents. If you find this too restricting,
    you would need to reimplement the `run_dictcomp_pipeline()` function, at a cost
    of additional complexity.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上述两个小节提到的一个限制，任何额外的参数必须对所有文档具有相同的值。如果你觉得这过于限制，你需要重新实现`run_dictcomp_pipeline()`函数，代价是增加额外的复杂性。
- en: 'Unit tests: The pipeline in action'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试：管道在行动中
- en: To check out whether the pipeline works, let’s implement some unit tests, using
    `pytest`. I will skip here unit tests for `read_text()` and `parse_text()` functions,
    but feel free to add them as an exercise.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查管道是否有效，让我们使用`pytest`实现一些单元测试。我将在这里跳过`read_text()`和`parse_text()`函数的单元测试，但可以随意将它们作为练习添加。
- en: And here, we have a test to check whether the app works as expected.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个测试来检查应用程序是否按预期工作。
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s see what the test does. The fixture `files` creates 11 text files, the
    contents of six of which includes the word “Python”. These files are created when
    `test_get_dictcomp_pipeline()` is invoked. Then the test runs the pipeline function
    and asserts whether the output is as expected. After all, the testing text files
    are removed, which you will see in the last two lines of the fixture’s code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看测试是如何工作的。`files`固定装置创建了11个文本文件，其中六个文件的内容包含了“Python”这个词。这些文件在调用`test_get_dictcomp_pipeline()`时创建。然后测试运行管道函数并断言输出是否符合预期。最后，测试文本文件被删除，你将在固定装置代码的最后两行看到这些操作。
- en: 'After running the test, you should see a thumbs-up from `pytest`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试后，你应该会看到来自`pytest`的点赞：
- en: '![](../Images/618a3cb94d91e01b8770f2ad9ef3628c.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/618a3cb94d91e01b8770f2ad9ef3628c.png)'
- en: A pipeline integrates several functionalities into one, so the above test for
    our pipeline function can be considered, at least to some extent, an integration
    test.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个管道将多个功能整合为一个，因此上面对我们管道函数的测试可以被视为，至少在某种程度上，是一个集成测试。
- en: Even with very many documents, a dictionary should be fine to keep the output,
    as its type is `dict[str, bool]`, and such a dictionary does not require too much
    memory. Surely, you may wish to process it as a generator anyway; in that case,
    you should revise the pipeline function into a generator pipeline. One solution
    would be to make the generator yield the values of type `tuple[str, bool]`. So,
    it’d be a tuple with a string representing a document and the corresponding Boolean
    value informing whether the parsing function found the word searched for.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有非常多的文档，字典也应能很好地保存输出，因为它的类型是`dict[str, bool]`，这样的字典不会占用太多内存。当然，你可能还是希望将其处理为生成器；在这种情况下，你应该将管道函数修订为生成器管道。一个解决方案是使生成器生成`tuple[str,
    bool]`类型的值。这样，它将是一个包含表示文档的字符串和布尔值的元组，布尔值表示解析函数是否找到了所搜索的词。
- en: Extending the example
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展示例
- en: 'In the example above, we used a `bool` value, but in some tasks, it could be
    too limiting. For instance, you may want to take into account that not all documents
    are SOPs. In other words, you have a number of documents some of which are SOPs
    and some are not; the task is to check whether a document is an SOP, and if it
    is, check if it contains a particular word, phrase, or a number of words/phrases.
    In such a case, you may either use a more complex data structure, such as the
    `OptionalBool` data structure and type, proposed in this article:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用了一个`bool`值，但在某些任务中，这可能过于限制。例如，你可能需要考虑并非所有文档都是SOP。换句话说，你有一些文档，其中有些是SOP，有些不是；任务是检查文档是否为SOP，如果是，则检查是否包含特定的词、短语或多个词/短语。在这种情况下，你可以使用更复杂的数据结构，如本文中提出的`OptionalBool`数据结构和类型：
- en: '[](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)
    [## An OptionalBool Type for Python: None, False or True'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[## An OptionalBool Type for Python: None, False or True](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)'
- en: Use OptionalBool instead of Optional[bool].
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`OptionalBool`而不是`Optional[bool]`。
- en: medium.com](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)'
- en: In our task, an `OptionalBool` value of `None` would mean the corresponding
    document is not an SOP; `False`, that it is an SOP but does not contain the searched
    phrase(s); and `True`, that it is an SOP and contains the searched phrase(s).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的任务中，`OptionalBool`值为`None`意味着相应的文档不是SOP；`False`，表示它是SOP但不包含所搜索的短语；而`True`，表示它是SOP并且包含了所搜索的短语。
- en: This article is motivated by a real life example in which I had a situation
    similar to this one. Back then, I implemented the solution completely differently,
    but today I’d definitely consider doing it using `OptionalBool` and a dictcomp
    pipeline. In order to use `OptionalBool`, however, the signature of the `run_dictcomp_pipeline()`
    needs to be changed a little bit, as instead of `bool` we would work with `OptionalBool`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的动机来自一个真实的例子，当时我遇到了类似的情况。那时，我完全不同地实现了解决方案，但今天我肯定会考虑使用`OptionalBool`和字典推导管道。为了使用`OptionalBool`，`run_dictcomp_pipeline()`的签名需要稍作修改，因为我们将用`OptionalBool`替代`bool`。
- en: You will find the revised version of the code, including the test file, in Appendix
    2.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在附录2中找到修订后的代码版本，包括测试文件。
- en: Conclusion
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have discussed a real life example of using a dictcomp pipeline. While the
    task we implemented was rather simple, the solution is more general, enabling
    the user to re-implement the two functions creating the pipeline — without a necessity
    to change the pipeline function itself.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了使用 dictcomp 流水线的实际例子。虽然我们实现的任务相当简单，但解决方案更为通用，使得用户可以重新实现创建流水线的两个函数——而不需要更改流水线函数本身。
- en: 'You may have noticed that the dictcomp pipeline we have implemented simply
    looks like a dictionary comprehension. Because it simply *is* a dictionary comprehension.
    Just like a generator pipeline is a generator. The pipeline is hidden inside of
    what is being done: input → function → function → … → function → output. In our
    case, the pipeline was very short, but in many other scenarios, it can contain
    many more steps.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们实现的 dictcomp 流水线看起来只是一个字典推导式。因为它确实*就是*一个字典推导式。就像生成器流水线是一个生成器一样。流水线隐藏在正在进行的操作中：输入
    → 函数 → 函数 → … → 函数 → 输出。在我们的例子中，流水线非常简短，但在许多其他场景中，它可以包含更多步骤。
- en: I wanted to show you in what sort of scenarios such a comprehension pipeline
    could work. This particular task, however, could be implemented in various ways.
    Which to choose should largely depend on what sort of code you want to produce.
    If you need a mere implementation of a particular task, there is no need to generalize
    functions the way we did. If you aim to write a framework to be used by others,
    you would likely generalize it even more.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我想向你展示在什么样的场景下这样的推导式流水线可以发挥作用。然而，这个特定的任务可以以多种方式实现。选择哪种方式应主要取决于你希望生成什么样的代码。如果你只是需要实现一个特定的任务，那么没有必要像我们这样对函数进行泛化。如果你打算编写一个供他人使用的框架，你可能会更进一步地泛化它。
- en: Appendix 1
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 1
- en: 'The code of `run_dictcomp_pipeline()` from the first example, with full docstrings:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例中 `run_dictcomp_pipeline()` 的代码，带有完整的文档字符串：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Appendix 2
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 2
- en: 'In this Appendix, you will find the extended code of the solution that works
    with `OptionalBool` values. You will also need the code for the `OptionalBool`
    class, located in the `optionalbool` module, which you can copy-paste from the
    following article:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，你将找到处理`OptionalBool`值的解决方案的扩展代码。你还需要 `optionalbool` 模块中的 `OptionalBool`
    类的代码，你可以从以下文章中复制粘贴：
- en: '[](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)
    [## An OptionalBool Type for Python: None, False or True'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)
    [## 一个可选布尔类型（OptionalBool）：None、False 或 True]'
- en: Use OptionalBool instead of Optional[bool].
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 OptionalBool 替代 Optional[bool]。
- en: medium.com](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/pythoniq/an-optionalbool-type-for-python-none-false-or-true-7667e9cc6dd8?source=post_page-----4c4ec4e66f3--------------------------------)
- en: 'Here is the code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And the test file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以及测试文件：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)查看。如果你想加入
    Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----4c4ec4e66f3--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----4c4ec4e66f3--------------------------------)
    [## 使用我的推荐链接加入 Medium - Marcin Kozak]'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Marcin Kozak 的每一个故事（以及 Medium 上其他成千上万的作者的故事）。你的会员费用将直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----4c4ec4e66f3--------------------------------)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@nyggus/membership?source=post_page-----4c4ec4e66f3--------------------------------)
