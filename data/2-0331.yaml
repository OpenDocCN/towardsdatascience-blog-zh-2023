- en: Artificial Bee Colony — How it differs from PSO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工蜂群 — 它与粒子群优化的不同之处
- en: 原文：[https://towardsdatascience.com/artificial-bee-colony-how-it-differs-from-pso-9c6831bfb552](https://towardsdatascience.com/artificial-bee-colony-how-it-differs-from-pso-9c6831bfb552)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/artificial-bee-colony-how-it-differs-from-pso-9c6831bfb552](https://towardsdatascience.com/artificial-bee-colony-how-it-differs-from-pso-9c6831bfb552)
- en: Intuition and code implementation for ABC, and exploring where it outperforms
    Particle Swarm Optimization
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ABC的直觉和代码实现，以及探索其超越粒子群优化的地方
- en: '[](https://medium.com/@byjameskoh?source=post_page-----9c6831bfb552--------------------------------)[![James
    Koh, PhD](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----9c6831bfb552--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9c6831bfb552--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9c6831bfb552--------------------------------)
    [James Koh, PhD](https://medium.com/@byjameskoh?source=post_page-----9c6831bfb552--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@byjameskoh?source=post_page-----9c6831bfb552--------------------------------)[![詹姆斯·柯，博士](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----9c6831bfb552--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9c6831bfb552--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9c6831bfb552--------------------------------)
    [詹姆斯·柯，博士](https://medium.com/@byjameskoh?source=post_page-----9c6831bfb552--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9c6831bfb552--------------------------------)
    ·10 min read·Dec 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----9c6831bfb552--------------------------------)
    ·10分钟阅读·2023年12月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5bdc467ff2ee97b8a9bbc611dd5120fc.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5bdc467ff2ee97b8a9bbc611dd5120fc.png)'
- en: Image created by DALL·E 3 based on the prompt “Draw a science-fiction themed
    image of bees facing off in battle.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由DALL·E 3基于“绘制一个科幻主题的蜜蜂对抗战斗”的提示生成。
- en: I shared about the intuition, implementation and usefulness of Particle Swarm
    Optimization (PSO) in a [recent article](/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a?sk=478e8d135f6e98e596674cb6fcc3e9a9),
    as part of my series of nature-inspired algorithms. Today, I will explain how
    Artificial Bee Colony (ABC) works.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[近期文章](/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a?sk=478e8d135f6e98e596674cb6fcc3e9a9)中分享了粒子群优化（PSO）的直觉、实现及其有用性，作为我自然启发算法系列的一部分。今天，我将解释人工蜂群（ABC）如何工作。
- en: Aren’t bees part of a swarm? Are these two algorithms simply two sides of the
    same coin?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 蜜蜂不就是群体的一部分吗？这两种算法难道只是同一枚硬币的两面？
- en: For this article, I will jump right into the intuition of ABC. Next, I will
    provide the mathematics, followed by the implementation in Python. Finally, I
    will formulate a problem in which PSO fails to solve but ABC does with ease, and
    explain the aspects of ABC which makes this possible.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这篇文章，我将直接进入ABC的直觉部分。接下来，我将提供数学基础，然后介绍Python实现。最后，我将制定一个PSO无法解决但ABC轻松解决的问题，并解释使这一切成为可能的ABC方面。
- en: Intuition
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直觉
- en: Much like in the case of Reinforcement Learning and Evolutionary Algorithms,
    a fundamental driver behind ABC is the balance between exploration and exploitation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在强化学习和进化算法的情况下，ABC的一个基本驱动因素是探索与开发之间的平衡。
- en: Those who are new to swarm intelligence algorithms may initially feel intimidated
    by the association with biology, and think that there’s some complicated mathematical
    modelling to mimic what exactly happens in nature. As variables are typically
    represented as Greek alphabets in textbooks, it adds to this false perception
    of complexity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初次接触群体智能算法的人来说，最初可能会被生物学的联系所吓到，认为需要一些复杂的数学建模来模拟自然界中实际发生的情况。由于教科书中变量通常用希腊字母表示，这增加了这种复杂性的误解。
- en: That is certainly not the case, at least for ABC. There is nothing at all about
    bees’ waggle dance that you need to understand. Nor is there anything beyond just
    high school math in this algorithm.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 至少对于ABC来说情况并非如此。你不需要了解蜜蜂的摇摆舞，也没有超出高中数学的内容。
- en: Essentially, it is simply having a local directional search towards promising
    locations, saving the results only if there’s an improvement in the objective
    function, along with a global random search upon encountering prolonged periods
    of no progress.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，它只是对有前景的位置进行局部方向性搜索，仅在目标函数有所改进时保存结果，并在遇到长时间没有进展时进行全局随机搜索。
- en: The creators of this algorithm then packaged it with fanciful names, and tagged
    these to employed bees, onlooker bees, and scout bees.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的创作者随后为其起了华丽的名字，并将这些标签分别附加给雇佣蜂、旁观蜂和侦查蜂。
- en: Formulation of Solution
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解的形成
- en: Like PSO, ABC is a metaheuristic algorithm?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 像 PSO 一样，ABC 是一种元启发式算法？
- en: What is ‘metaheuristic’, you might ask?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是“元启发式方法”，你可能会问？
- en: Let’s start with a heuristic solution — it is a technique which, though not
    guaranteed to be optimal, often works well in practice to give something good
    enough.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个启发式解决方案开始——这是一种技术，尽管不保证最优，但通常在实践中表现良好，能提供足够好的结果。
- en: The ‘meta’ in ‘metaheuristic’ is not Facebook. It is a ‘higher-level’ heuristic
    — it is a general strategy that can be applied to different types of problems.
    Hence, it will be to your advantage to focus on understanding the principles;
    the math then falls in place with ease.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “元”在“元启发式方法”中不是指 Facebook。它是一种“高级”的启发式方法——它是可以应用于不同类型问题的一种通用策略。因此，理解这些原则对你有利；数学部分将会轻松跟随。
- en: Mathematics
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学
- en: 'Consider a problem that has a solution space of *D* dimensions. Upon initialization,
    *N* number of solutions are generated using [1]:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个具有 *D* 维度的解空间的问题。初始化时，使用 [1] 生成 *N* 个解决方案。
- en: '![](../Images/57ca7fb2f647e9820dfb70e1d96130e6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57ca7fb2f647e9820dfb70e1d96130e6.png)'
- en: It is actually easier to simply represent this in vector or matrix form.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，简单地用向量或矩阵形式表示更为方便。
- en: '![](../Images/1a42f7aa5e770d0dde7685a5c66d4b6b.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a42f7aa5e770d0dde7685a5c66d4b6b.png)'
- en: The ‘**Employed bee**’ phase is simply a local directional search around each
    source *i*, with respect to a randomly chosen neighbor *k*. The word ‘neighbor’
    might be misleading — it is simply another candidate solution, which does not
    necessarily need to be in the vicinity. Having this directional aspect as compared
    to a random Gaussian perturbation in the local search tends to perform better
    in practice. (This is what metaheuristics is about).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ‘**雇佣蜂**’阶段只是围绕每个源 *i* 进行局部方向性搜索，相对于随机选择的邻居 *k*。词语‘邻居’可能会误导——它仅仅是另一个候选解决方案，并不一定需要在附近。与在局部搜索中进行随机高斯扰动相比，这种方向性方面通常在实践中表现更好。（这就是元启发式方法的核心所在。）
- en: '![](../Images/3e6e920d9bd5a51b41ef5a88474ad9a0.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e6e920d9bd5a51b41ef5a88474ad9a0.png)'
- en: '***ϕ*** is a vector of random numbers drawn from a uniform distribution of
    [-1,1], ie.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '***ϕ*** 是从 [-1,1] 的均匀分布中抽取的随机数向量，即。'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although the neighbor *k* is randomly chosen, keep in mind that each neighbor
    is a potentially good solution in its own right. You may read that the vanilla
    form of ABC actually introduces a perturbation along just a single dimension *j*.
    However, in practice, perturbing along multiple dimensions concurrently can lead
    to fewer iterations. (It is essentially doing a more aggressive exploration —
    as with heuristics, there is no ‘unquestionable truth’ to follow; we are just
    finding what works).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管邻居 *k* 是随机选择的，但请记住，每个邻居在其自身的权利下都是潜在的良好解决方案。你可能会读到，ABC 的原始形式实际上仅在一个维度 *j* 上引入扰动。然而，在实践中，同时在多个维度上进行扰动可以减少迭代次数。（这本质上是进行更积极的探索——如同启发式方法，没有“不可置疑的真理”可循；我们只是寻找有效的方法。）
- en: '![](../Images/e38578933f2ca7c4e2d507aa5058e350.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e38578933f2ca7c4e2d507aa5058e350.png)'
- en: (Image of bees from DALL·E 3; put together by author.) Consider the solution
    i, with the neighbor k, in two-dimensional space. Suppose that phi, the random
    vector is [0.5, 0.1]. This means that the solution at i will be adjusted 50% towards
    k along the first dimension (horizontal), and 10% towards k along the second dimension
    (vertical) — it will be saved and updated if the objective value at x is higher
    than at i.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: （蜂群图像来源于 DALL·E 3；由作者整理。）考虑二维空间中的解 i 和邻居 k。假设 phi，即随机向量为 [0.5, 0.1]。这意味着解 i
    将在第一个维度（水平）上调整 50% 朝向 k，在第二个维度（垂直）上调整 10% 朝向 k——如果 x 处的目标值高于 i 处的目标值，则会保存并更新。
- en: Next, we move on to the ‘**Onlooker bee**’ phase. Each candidate solution is
    judged based on its fitness (eg. the value of the objective function), and we
    select one of these according to a probability distribution proportional to the
    relative fitness.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们进入‘**旁观者蜜蜂**’阶段。根据适应度（例如目标函数的值）评估每个候选解，并根据相对适应度的概率分布选择其中之一。
- en: As in the case of [Evolutionary Algorithm](https://medium.com/towards-data-science/evolutionary-algorithm-selections-explained-2515fb8d4287),
    it is not absolutely necessary to keep to a roulette wheel selection, there are
    other selection techniques such as Tournament selection (see section 3.2.2 of
    the linked article for details).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如同[进化算法](https://medium.com/towards-data-science/evolutionary-algorithm-selections-explained-2515fb8d4287)的情况一样，并非绝对必要保持轮盘选择，还有其他选择技术，如锦标赛选择（有关详细信息，请参见链接文章的第3.2.2节）。
- en: In this second phase, there is a stronger element of exploitation, because the
    ‘neighbor’ is one which likely has a good fitness, and a directional search is
    performed with respect to it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二阶段，有更强的开发元素，因为‘邻居’可能具有较好的适应度，并且相对于它进行定向搜索。
- en: '![](../Images/b3c94f418b83f6a181a9aa170d0708f3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3c94f418b83f6a181a9aa170d0708f3.png)'
- en: (Image of bees from DALL·E 3; put together by author.) Search during the ‘Onlooker
    bee’ phase. Modifying the solution at x, with respect to the selected solution
    at s. Note that the new point of interest to be evaluated need not be on the solid
    blue double-sided arrow. Instead, it can be anywhere within the blue triangle
    (if you use a modified phi with random numbers drawn from a uniform distribution
    of [0,1]), or even within the green triangle if drawn from the distribution of
    [-1,1].
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （DALL·E 3生成的蜜蜂图片；由作者整理。）在‘旁观者蜜蜂’阶段进行搜索。对x处的解进行修改，相对于选择的s处解。请注意，新关注点的评估不一定在实心蓝色双箭头上。相反，它可以在蓝色三角形内的任何位置（如果你使用一个从[0,1]均匀分布中抽取随机数的修改phi），甚至在从[-1,1]分布中抽取的绿色三角形内。
- en: In both the ‘Employed bee’ and ‘Onlooker bee’ phase, if the new solution (ie.
    food source in the analogy) is not an improvement over the existing solution,
    a counter corresponding to it is incremented by one. On the other hand, if there
    is an improvement, the solution is updated and the next search will be with respect
    to this new location.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在‘雇佣蜜蜂’和‘旁观者蜜蜂’阶段，如果新解（即类比中的食物源）没有比现有解更好，则相应的计数器增加1。另一方面，如果有改进，则更新解，下一次搜索将以此新位置为基础。
- en: This is followed by the ‘**Scout bee**’ phase. If the counter exceeds a pre-defined
    threshold, that corresponding candidate will be retired and a new candidate is
    re-initialized randomly across the entire solution space. In terms of bee analogy,
    this process represents the depletion of a food source. In terms of data science,
    it simply means that we treat the candidate as a local optima (and possibly global
    too).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 之后是‘**侦查蜜蜂**’阶段。如果计数器超过预定义的阈值，相应的候选者将被淘汰，并在整个解空间中随机重新初始化一个新候选者。在蜜蜂的类比中，这个过程代表了食物源的枯竭。在数据科学中，这意味着我们将候选者视为局部最优（也可能是全局最优）。
- en: Code Implementation
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码实现
- en: The C++ implementation in the reference [1] textbook actually spans three full
    pages, and comprises nearly 200 lines.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献[1]中的C++实现实际上跨越了三整页，包含了近200行代码。
- en: I will give you a simple python implementation in less than 60 lines of easy
    to read code. More importantly, it works effectively.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提供一个少于60行的简单Python实现，代码易于阅读。更重要的是，它有效。
- en: The basic unit of ABC is a `Bee`, which is analogous to a particle in PSO in
    that it represents a candidate solution.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ABC的基本单位是`Bee`，它类似于PSO中的粒子，因为它代表一个候选解。
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each `Bee` has an `explore` method, which updates its position with respect
    to another candidate. The fitness corresponding to this new location is updated.
    If the previous record is surpassed, its `pos` and `fitness` attribute will be
    updated, otherwise it increments `self.counter` by one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Bee`都有一个`explore`方法，它根据另一个候选者更新其位置。更新与此新位置对应的适应度。如果超过之前的记录，将更新其`pos`和`fitness`属性，否则`self.counter`增加1。
- en: The second other class (also the last) is `Colony`, which comprises a number
    of `Bee` instances.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个也是最后一个类是`Colony`，它包含了多个`Bee`实例。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that in every iteration, each bee of the class `Bee` performs the ‘employed
    bee’ phase, ‘onlooker bee’ phase, as well as ‘scout bee’ phase. They are not different
    entities. Essentially, we are just implementing elements of exploration and exploitation
    across each iteration.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到在每次迭代中，每只`Bee`类的蜜蜂都会执行‘雇佣蜂’阶段、‘观察蜂’阶段以及‘侦查蜂’阶段。它们不是不同的实体。本质上，我们只是跨每次迭代实现了探索和开发的元素。
- en: Why ABC when we have PSO?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 既然我们有PSO，为什么还需要ABC？
- en: Up till now, we have learnt about the intuition of Artificial Bee Colony, as
    well as did a step-by-step walkthrough for the math and code implementation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了人工蜂群的直觉，并对数学和代码实现进行了逐步讲解。
- en: Being a metaheuristic, ABC can be used in multiple different ways. However,
    let’s focus on a particular scenario where ABC is superior over PSO, which was
    what I promised in the last paragraph of the previous article.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种元启发式算法，ABC可以以多种不同方式使用。然而，让我们专注于一个特定场景，在该场景中，ABC相对于PSO具有优势，这也是我在上一篇文章最后一段中承诺的内容。
- en: ABC is highly capable to get out of local optima and does not get ‘stuck’.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ABC非常有能力摆脱局部最优，不会被‘困住’。
- en: Why would ABC be able to solve something which PSO cannot? Shouldn’t they work
    in the same way since we maintain a population of candidate solutions in both
    ABC and PSO?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么ABC能够解决PSO无法解决的问题？既然我们在ABC和PSO中都维持了一个候选解的种群，它们不应该以相同的方式工作吗？
- en: The key reason is due to the ‘Scout bee’ phase, which randomly explores a new
    region of the solution space once progress is tapering.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关键原因在于‘侦查蜂’阶段，它在进展减缓时会随机探索解决空间的新区域。
- en: In addition, the exploration in the ‘Employed bee’ and ‘Onlooker bee’ phases
    are also more aggressive (with the possibility of moving not just *towards* but
    *away* from other candidates) than in PSO (which gravitates *towards* the global
    best and local best).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，‘雇佣蜂’和‘观察蜂’阶段的探索比PSO更具攻击性（有可能不仅*朝向*而且*远离*其他候选点），而PSO则倾向于*朝向*全局最优和局部最优。
- en: Granted, by moving away from another candidate, we could well be taking a step
    backwards rather than forward. This brings us an important principle to keep in
    mind —we keep only the good stuff. (This is similar to why [mutations in Evolutionary
    Algorithms](https://medium.com/towards-data-science/evolutionary-algorithm-mutations-explained-4a3b5c2d49de)
    leads to improvement). In `Bee.explore`, notice that `self.pos` is overwritten
    only when there is an improvement in `self.fitness`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，通过远离另一个候选点，我们可能确实是在倒退而不是前进。这给我们一个重要的原则 — 我们只保留好的东西。（这类似于为什么[进化算法中的突变](https://medium.com/towards-data-science/evolutionary-algorithm-mutations-explained-4a3b5c2d49de)会导致改进）。在`Bee.explore`中，注意到`self.pos`仅在`self.fitness`有所改善时才会被覆盖。
- en: To illustrate the efficacy of ABC, let’s create an objective function which
    has multiple local optimal points, and solve it using both ABC and PSO.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明ABC的有效性，让我们创建一个具有多个局部最优点的目标函数，并使用ABC和PSO两者来求解它。
- en: Formulation of Problem
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题的公式化
- en: Consider a simple 2-dimensional problem as follows, generated by the following
    code. (Note that this function, in and of itself, is a useful learning point for
    those who want to create environments to test out optimization algorithms).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个如下所示的简单二维问题，由以下代码生成。（请注意，这个函数本身是一个有用的学习点，对于那些想要创建测试优化算法环境的人来说。）
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/56ac3ee47bdf34aaa265fd256e01a240.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56ac3ee47bdf34aaa265fd256e01a240.png)'
- en: Function with global optimal of 0.8 and local optima of 0.5 to 0.7\. Image by
    author, generated using Python.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 具有全局最优值0.8和局部最优值0.5至0.7的函数。图像由作者提供，使用Python生成。
- en: I’ve previously presented the value proposition of solving a high-dimensional
    mathematical equation, using location planning as an example in the first [article](https://medium.com/towards-data-science/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a)
    of this series (‘Use-Case’ section; right at the beginning).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前在本系列的第一篇[文章](https://medium.com/towards-data-science/particle-swarm-optimization-search-procedure-visualized-4b0364fb3e5a)中介绍了解决高维数学方程的价值主张，以位置规划为例（‘用例’部分；就在开头）。
- en: In the above two-dimensional problem, we see that there are four peaks, each
    of slightly different magnitude. Three of the peaks are located near the center
    of the search space, while the fourth, which has the highest peak, is located
    at a corner away from the others. The objective of this is to illustrate a problem
    where one might settle for a local optimal instead of the global optimal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述二维问题中，我们看到有四个峰值，每个峰值的大小略有不同。三个峰值位于搜索空间的中心附近，而第四个峰值（最高的那个）位于远离其他峰值的角落。这样做的目的是展示一个可能会选择局部最优而不是全局最优的问题。
- en: A realistic problem certainly has higher dimensions. Let’s extend the above
    to create a 8-dimensional function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现实问题通常具有更高的维度。让我们将上述内容扩展到创建一个8维函数。
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, x1, y1, x2, y2, x3, y3, x4, y4 are just different *dimensions* of a single
    vector. You may think of these as coordinates of four locations, which collectively
    makes up the solution.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，x1、y1、x2、y2、x3、y3、x4、y4 只是一个向量的不同*维度*。你可以把这些看作四个位置的坐标，它们共同构成了解决方案。
- en: It can be seen that the points (1,1,1,1,1,1,1,1), (-1,1,-1,1,-1,1,-1,1), and
    (1,-1,1,-1,1,-1,1,-1) are local optima with values of 0.5, 0.6 and 0.7, respectively.
    Meanwhile, the global optimum is at (-2,-2,-2,-2,-2,-2,-2,-2), with an objective
    value of 0.8.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，点 (1,1,1,1,1,1,1,1)、(-1,1,-1,1,-1,1,-1,1) 和 (1,-1,1,-1,1,-1,1,-1) 分别是局部最优点，其值为0.5、0.6和0.7。同时，全球最优点位于
    (-2,-2,-2,-2,-2,-2,-2,-2)，目标值为0.8。
- en: Following my usual practice of having everything as object-oriented, let’s define
    the following class.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我一贯的面向对象的做法，我们来定义以下类。
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This makes it compatible not only with the current ABC code, but also the PSO
    code shared in the linked article above.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得它不仅与当前的ABC代码兼容，还与上述链接文章中共享的PSO代码兼容。
- en: Results
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: Using the classes established, solving the use case just takes a couple of lines.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用建立的类，解决用例只需几行代码。
- en: 'For PSO:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PSO：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/d6d528f36d416bb52d2370755945ddd5.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6d528f36d416bb52d2370755945ddd5.png)'
- en: Results from Particle Swarm Optimization (screenshot by author). Obtained objective
    value of 0.7 in 52 seconds.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子群优化的结果（作者截图）。在52秒内获得了0.7的目标值。
- en: 'For ABC:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于ABC：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/5258a84826db08c578456f5105f25442.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5258a84826db08c578456f5105f25442.png)'
- en: Results from Artificial Bee Colony (screenshot by author). Obtained objective
    value of 0.8 in 20 seconds.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 人工蜂群的结果（作者截图）。在20秒内获得了0.8的目标值。
- en: We have a winner here! Not only did ABC find the true global optimum, it did
    so in less than half the time. Try it yourself!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有一个赢家！不仅ABC找到了真实的全局最优点，而且用时不到一半。自己试试看吧！
- en: Conclusion
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We see that Artificial Bee Colony, as a metaheuristic, balances the exploration
    and exploitation very effectively. This article shows that the math involved is
    just simple linear algebra, and that the intuition really does not require any
    knowledge of biology or bees.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，作为一种元启发式算法，人工蜂群在平衡探索和利用方面非常有效。本文展示了涉及的数学只是简单的线性代数，并且直觉上实际上不需要任何生物学或蜜蜂的知识。
- en: Using this, you can solve a multidimensional optimization problem using just
    a few lines of code, to get the optimal solution in seconds.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法，你可以用几行代码解决多维优化问题，并在几秒钟内获得最优解。
- en: Congrats! Another useful tool in your pocket!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！又一个实用的工具在你的工具箱里！
- en: References
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] B. Akay and D. Karaboga, Artificial Bee Colony Algorithm in [Swarm Intelligence
    Algorithms](https://books.google.com.sg/books?hl=en&lr=&id=v6P0DwAAQBAJ)(2020)
    CRC Press'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] B. Akay 和 D. Karaboga，《人工蜂群算法》在[群体智能算法](https://books.google.com.sg/books?hl=en&lr=&id=v6P0DwAAQBAJ)一书中（2020年）CRC出版社。'
