- en: Using Kafka with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 Kafka
- en: 原文：[https://towardsdatascience.com/using-kafka-with-python-54dc20717cf7](https://towardsdatascience.com/using-kafka-with-python-54dc20717cf7)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/using-kafka-with-python-54dc20717cf7](https://towardsdatascience.com/using-kafka-with-python-54dc20717cf7)
- en: Learn how to create producers and consumers with Python and plot a dynamic scatter
    plot
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何使用 Python 创建生产者和消费者，并绘制动态散点图
- en: '[](https://weimenglee.medium.com/?source=post_page-----54dc20717cf7--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----54dc20717cf7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----54dc20717cf7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----54dc20717cf7--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----54dc20717cf7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/?source=post_page-----54dc20717cf7--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----54dc20717cf7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----54dc20717cf7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----54dc20717cf7--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----54dc20717cf7--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----54dc20717cf7--------------------------------)
    ·7 min read·Mar 20, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----54dc20717cf7--------------------------------)
    ·7 分钟阅读·2023年3月20日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/189593ad2da51f8a3bf4c211cfa02a53.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/189593ad2da51f8a3bf4c211cfa02a53.png)'
- en: Photo by [Markus Winkler](https://unsplash.com/@markuswinkler?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Markus Winkler](https://unsplash.com/@markuswinkler?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In my previous article on Kafka, I introduced the use of Kafka for data streaming.
    I also showed how you can start a Kafka broker service and demonstrated how to
    use the Kafka producer console application to send messages and the Kafka consumer
    console application to receive messages.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前关于 Kafka 的文章中，我介绍了 Kafka 用于数据流处理的使用。我还展示了如何启动 Kafka 代理服务，并演示了如何使用 Kafka
    生产者控制台应用程序发送消息以及如何使用 Kafka 消费者控制台应用程序接收消息。
- en: 'In this article, I am going to show you how to make use of Kafka using Python.
    Specifically, I will:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将向你展示如何使用 Python 利用 Kafka。具体来说，我将：
- en: Use Python to send messages to a Kafka broker service
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 向 Kafka 代理服务发送消息
- en: Use Python to receive messages from a Kafka broker service
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 从 Kafka 代理服务接收消息
- en: Build a dynamic charting application to plot and update a scatter plot wherever
    new data is received from the broker service
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个动态图表应用程序，用于绘制和更新散点图，随时接收来自代理服务的新数据
- en: Using Python with Kafka
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 Kafka
- en: 'There are at least three Python libraries available for Python developers to
    interface with Kafka broker services. They are:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有三个 Python 库可供 Python 开发者与 Kafka 代理服务接口。它们是：
- en: Kafka-Python
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kafka-Python
- en: PyKafka
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyKafka
- en: Confluent Kafka Python
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Confluent Kafka Python
- en: For this article, I will make use of the **Confluent Kafka Python** package.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本文，我将使用 **Confluent Kafka Python** 包。
- en: 'To install the **Confluent Kafka Python** package, use the `pip` command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 **Confluent Kafka Python** 包，请使用 `pip` 命令：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Producing the Message
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成消息
- en: 'First, let’s work on the producer first. The producer is the one that sends
    messages to the Kafka broker service. The following code snippet specifies the
    Kafka broker server to connect to:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们先从生产者开始。生产者是向 Kafka 代理服务发送消息的组件。以下代码片段指定了要连接的 Kafka 代理服务器：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You need to ensure that your Kafka broker service is up and running. See [https://towardsdatascience.com/using-apache-kafka-for-data-streaming-9199699623fa](/using-apache-kafka-for-data-streaming-9199699623fa)
    for more details on how to start one.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你需要确保你的 Kafka 代理服务正在运行。有关如何启动服务的详细信息，请参阅 [https://towardsdatascience.com/using-apache-kafka-for-data-streaming-9199699623fa](/using-apache-kafka-for-data-streaming-9199699623fa)。
- en: '[](/using-apache-kafka-for-data-streaming-9199699623fa?source=post_page-----54dc20717cf7--------------------------------)
    [## Using Apache Kafka for Data Streaming'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用 Apache Kafka 进行数据流处理](https://towardsdatascience.com/using-apache-kafka-for-data-streaming-9199699623fa?source=post_page-----54dc20717cf7--------------------------------)'
- en: Learn how to install and use Kafka to send and receive messages
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解如何安装和使用 Kafka 发送和接收消息
- en: towardsdatascience.com](/using-apache-kafka-for-data-streaming-9199699623fa?source=post_page-----54dc20717cf7--------------------------------)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/using-apache-kafka-for-data-streaming-9199699623fa?source=post_page-----54dc20717cf7--------------------------------)
- en: 'To send a message, you can use the `produce()` function from the `Producer`
    object. You can pass four arguments to it:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要发送消息，你可以使用`Producer`对象的`produce()`函数。你可以传递四个参数给它：
- en: the topic to send
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要发送的主题
- en: the key for your message payload
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息负载的关键字
- en: the message payload
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息负载
- en: the callback function to invoke when you poll the producer to know if the message
    was successfully delivered (or not).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮询生产者以了解消息是否成功传递（或未传递）时要调用的回调函数。
- en: 'The following code snippet sends a message to the Kafka broker service:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将消息发送到Kafka代理服务：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `poll()` function returns the number of events processed (callbacks served).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`poll()`函数返回处理的事件数量（回调服务的数量）。'
- en: 'Let’s send another message with a different key:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们发送另一条具有不同关键字的消息：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Consuming the Message
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费消息
- en: 'With the message sent, you can now work on the consumer. The following code
    snippet connects to the Kafka broker service:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 消息发送完毕后，你现在可以处理消费者。以下代码片段连接到Kafka代理服务：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `group.id` indicates which consumers you belong to. If there are two consumers
    with the same Group ID assigned to the same topic, they will all share the work
    of reading from the same topic.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`group.id`指示你属于哪个消费者组。如果有两个消费者分配了相同的组ID到同一个主题，它们将共享从同一主题读取的工作。'
- en: The `auto.offset.reset` indicates…specifies how a consumer should behave when
    consuming from a topic partition when there is no initial offset.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`auto.offset.reset`指示…指定当从主题分区消费时没有初始偏移量时，消费者应如何行为。'
- en: I will discuss the offset in another article.
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我将在另一篇文章中讨论偏移量。
- en: 'To consume messages, let’s define a function named `consume()`. It takes in
    the consumer as well as the topics to subscribe to:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了消费消息，让我们定义一个名为`consume()`的函数。它接受消费者和要订阅的主题：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this function, you first subscribe to the topic that you want to listen to.
    Then, you use the `threading.currentThread()` function to check if an attribute
    named `run` has been set on the current thread that is used to run this function.
    This is used to control whether you should continue to wait for the next message
    or exit the function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，你首先订阅了你想要监听的主题。然后，你使用`threading.currentThread()`函数检查当前线程上是否设置了名为`run`的属性，该线程用于运行此函数。这用于控制是否继续等待下一条消息或退出函数。
- en: We will use an infinite loop to keep on polling the Kafka broker service. The
    `timeout` parameter allows you to set the time to block the call until a message
    is returned by the broker service. If you want to poll the broker at a higher
    frequency, set the `timeout` to a lower value, such as `0.5` second.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用无限循环来不断轮询Kafka代理服务。`timeout`参数允许你设置阻塞调用的时间，直到代理服务返回消息。如果你想更频繁地轮询代理，请将`timeout`设置为较低的值，例如`0.5`秒。
- en: If a message is returned, you can extract its key and value and then print them
    out. Finally, if the infinite loop is terminated, you close the consumer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回了消息，你可以提取其关键字和值，然后打印出来。最后，如果无限循环被终止，你将关闭消费者。
- en: 'To run the `consume()` function, we will use the `threading` package:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`consume()`函数，我们将使用`threading`包：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `start()` function runs the `consume()` function as an independent thread
    so that it does not freeze your Jupyter Notebook.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`start()`函数将`consume()`函数作为独立线程运行，以免冻结你的Jupyter Notebook。'
- en: 'You should now be able to see two incoming messages that were sent by the producer:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能看到由生产者发送的两个传入消息：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To terminate the consumer, simply set the `run` attribute of `thread` to `False`
    and the `consume()` function will stop running:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要终止消费者，只需将`thread`的`run`属性设置为`False`，`consume()`函数将停止运行：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Plotting Chart
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制图表
- en: Now that you are able to produce and consume messages using the Confluent Kafka
    Python package, it is time to do something useful with this newfound knowledge!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经能够使用Confluent Kafka Python包来生产和消费消息，是时候利用这项新知识做些有用的事情了！
- en: Let’s use the producer to simulate an IOT device sending sensor data to the
    Kafka broker service, and on the consumer end we will read the data and use it
    to plot a chart. As new data is received, the chart will be dynamically updated.
    All these will work directly on Jupyter Notebook.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用生产者模拟一个IOT设备向Kafka代理服务发送传感器数据，并在消费者端读取这些数据并绘制图表。随着新数据的接收，图表将动态更新。所有这些将在Jupyter
    Notebook中直接运行。
- en: Sending Sensor Data
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送传感器数据
- en: 'Let’s define a function named `send_message()`, which takes in four arguments:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个名为 `send_message()` 的函数，它接受四个参数：
- en: topic — the topic for the message
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: topic — 消息的主题
- en: datetime — the datetime of the sensor data collected
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: datetime — 收集的传感器数据的日期时间
- en: temp1 — the temperature reading for sensor 1
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: temp1 — 传感器 1 的温度读数
- en: temp2 — the temperature reading for sensor 2
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: temp2 — 传感器 2 的温度读数
- en: 'These four arguments will then be used to send the message:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个参数将用于发送消息：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will also define a function named `update()` that will be called every 2
    seconds to call the `send_message()` function with some random values:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将定义一个名为 `update()` 的函数，它每 2 秒调用一次 `send_message()` 函数，传入一些随机值：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Consuming the message and plotting the chart
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消费消息并绘制图表
- en: 'For the consumer, let’s create the `Consumer` object:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于消费者，我们来创建 `Consumer` 对象：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we will make use of Plotly to add two scatter plots to a `FigureWidget`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将利用 Plotly 向 `FigureWidget` 中添加两个散点图：
- en: A `FigureWidget` is a graph library that can display charts in Jupyter Notebook.
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`FigureWidget` 是一个图形库，可以在 Jupyter Notebook 中显示图表。'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now poll for messages from the Kafka broker service:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以从 Kafka broker 服务中轮询消息：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s dissect the above code snippet. When a message is obtained from the broker,
    it is split into three parts — `datetime`, `temp1`, and `temp2`. They are then
    appended to the `x`, `y1`, and `y2` lists, respectively:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下上面的代码片段。当从 broker 获取到一条消息时，它会被拆分为三部分 —— `datetime`、`temp1` 和 `temp2`。它们分别被添加到
    `x`、`y1` 和 `y2` 列表中：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As time passes, the lists would contain a lot of data. And so we only want
    to plot the last *n* points (which is set to 12 in this example). To update the
    first scatter plot, set the `fig.data[0].x` and `fig.data[0].y` attributes. For
    the second scatter plot, set the `fig.data[1].x` and `fig.data[1].y` attributes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，列表会包含大量数据。因此，我们只希望绘制最近的 *n* 个点（在此示例中设置为 12）。要更新第一个散点图，设置 `fig.data[0].x`
    和 `fig.data[0].y` 属性。对于第二个散点图，设置 `fig.data[1].x` 和 `fig.data[1].y` 属性：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And that’s it! Whenever new messages are received, the scatter plots would automatically
    update themselves!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！每当接收到新消息时，散点图将会自动更新！
- en: 'For now, when you run the code, an empty plot is shown:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当你运行代码时，会显示一个空的图：
- en: '![](../Images/c75219566ba1a3a5e86458d78d371944.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c75219566ba1a3a5e86458d78d371944.png)'
- en: Image by author
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'You are now ready to spin off a thread to run the `consume()` function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以准备开启一个线程来运行 `consume()` 函数：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After a while, you should see the two scatter plots updating:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 过一段时间后，你应该会看到两个散点图更新：
- en: '![](../Images/177b26907d32c8d46a601c597d86f3e9.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/177b26907d32c8d46a601c597d86f3e9.png)'
- en: Image by author
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Here’s a video of the plots updating:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新图表的视频：
- en: Video by author
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 视频由作者提供
- en: 'As usual, to step the `consume()` function, set the `run` attribute of `thread`
    to `False`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，若要暂停 `consume()` 函数，将 `thread` 的 `run` 属性设置为 `False`：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你喜欢阅读我的文章并且它对你的职业/学习有所帮助，请考虑注册成为 Medium 会员。每月 $5，你可以无限制访问 Medium 上的所有文章（包括我的文章）。如果你使用以下链接注册，我将获得少量佣金（对你没有额外费用）。你的支持意味着我可以花更多时间写出像这样的文章。**'
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----54dc20717cf7--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/membership?source=post_page-----54dc20717cf7--------------------------------)
    [## 使用我的推荐链接加入 Medium - 韦孟李]'
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Wei-Meng Lee 的每个故事（以及 Medium 上其他成千上万位作家的故事）。你的会员费用直接支持…
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----54dc20717cf7--------------------------------)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----54dc20717cf7--------------------------------)
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This articles demonstrates one useful application that you can build with Kafka.
    In particular, I showed you how to build a dynamic charting application using
    Python and Plotly. The real-time streaming nature of Kafka makes it an ideal candidate
    for applications that requires low-latency data updates, such as IOT applications.
    Stay tuned for the next Kafka article!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本文展示了一个你可以使用 Kafka 构建的有用应用。特别是，我向你展示了如何使用 Python 和 Plotly 构建一个动态图表应用。Kafka 的实时流式特性使其成为需要低延迟数据更新的应用（如物联网应用）的理想选择。敬请关注下一篇
    Kafka 文章！
