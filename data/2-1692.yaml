- en: Profiling Python Code with cProfile
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 **cProfile** 对 Python 代码进行性能分析
- en: 原文：[https://towardsdatascience.com/profiling-python-code-with-cprofile-328ae152fdfc](https://towardsdatascience.com/profiling-python-code-with-cprofile-328ae152fdfc)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/profiling-python-code-with-cprofile-328ae152fdfc](https://towardsdatascience.com/profiling-python-code-with-cprofile-328ae152fdfc)
- en: In this article we will explore how to profile Python code with **cProfile**
    module
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探索如何使用 **cProfile** 模块对 Python 代码进行性能分析
- en: '[](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)[![Misha
    Sv](../Images/d3f9605e2c7020246ff793869728e218.png)](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)
    [Misha Sv](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)[![Misha
    Sv](../Images/d3f9605e2c7020246ff793869728e218.png)](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)
    [Misha Sv](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)
    ·6 min read·Feb 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)
    ·阅读时长 6 分钟·2023 年 2 月 10 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/89cacd18fab67e3c61470469f4cd9bca.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89cacd18fab67e3c61470469f4cd9bca.png)'
- en: Photo by [Arnold Francisca](https://unsplash.com/@clark_fransa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/f77Bh3inUpE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Arnold Francisca](https://unsplash.com/@clark_fransa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/f77Bh3inUpE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: '**Table of Contents**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录**'
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍
- en: What is code profiling?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是代码性能分析？
- en: cProfile basic usage
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cProfile** 基本使用'
- en: Profile Python code with cProfile from terminal
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从终端使用 **cProfile** 对 Python 代码进行性能分析
- en: Profile Python code with cProfile in Python
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **cProfile** 对 Python 代码进行性能分析
- en: Profile Python function with cProfile in Python
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **cProfile** 在 Python 中对函数进行性能分析
- en: Export cProfile data
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出 **cProfile** 数据
- en: Conclusion
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结论
- en: Introduction
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Today programmers write thousands of lines of code in a matter of days. The
    complexity of new programs and applications evolves constantly and the code bases
    include multiple functions, some of which can slow down the performance of the
    entire program.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在程序员可以在几天内编写成千上万行代码。新程序和应用程序的复杂性不断演变，代码库包含多个函数，其中一些可能会减慢整个程序的性能。
- en: Focusing on code profiling, and specifically profiling your Python code to identify
    bottlenecks in the performance can significantly increase the performance of the
    software as well as create a better user experience.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 专注于代码性能分析，特别是对你的 Python 代码进行性能分析以识别性能瓶颈，可以显著提高软件的性能，并改善用户体验。
- en: In this tutorial we will work with the Python built-in [cProfile](https://docs.python.org/3/library/profile.html)
    module which provides deterministic profiling of Python programs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Python 内置的 [cProfile](https://docs.python.org/3/library/profile.html)
    模块，该模块提供 Python 程序的确定性性能分析。
- en: What is code profiling?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是代码性能分析？
- en: Code profiling is the process of analyzing the performance of programs, specifically
    analyzing performance of the code to identify potential bottlenecks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 代码性能分析是分析程序性能的过程，特别是分析代码性能以识别潜在的瓶颈。
- en: Identifying which parts of code run slow and then optimizing this code can significantly
    improve performance of the software, decrease memory usage and resource consumption.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确定代码中运行缓慢的部分并优化这些代码可以显著提高软件的性能，减少内存使用和资源消耗。
- en: In Python, **cProfile** profiling tool allows to track the execution time and
    memory usage of your Python scripts, helping identify slow-performing and high
    resource consuming parts of the code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，**cProfile** 性能分析工具可以跟踪 Python 脚本的执行时间和内存使用情况，帮助识别运行缓慢和高资源消耗的代码部分。
- en: cProfile basic usage
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**cProfile** 基本使用'
- en: 'Here is a quick example of profiling with **cProfile** and interpretation of
    the output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 **cProfile** 进行性能分析和解释输出的快速示例：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should get:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let’s interpret the output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来解释输出结果：
- en: '*ncalls* — the number of calls'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ncalls* — 调用次数'
- en: '*tottime* — the total time spent in a given function'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tottime* — 在给定函数中花费的总时间'
- en: '*percall* — the ratio of *tottime* and *ncalls*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*percall* — *tottime* 和 *ncalls* 的比率'
- en: '*cumtime* — the cumulative time spent in current function and subfunctions'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*cumtime* — 当前函数及其子函数的累计时间'
- en: '*percall* — the ratio of *cumtime* and primitive calls'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*percall* — *cumtime* 和原始调用的比率'
- en: '*filename* — the data of each function'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*filename* — 每个函数的数据'
- en: Profile Python code with cProfile from terminal
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从终端使用 cProfile 对 Python 代码进行性能分析
- en: Before we get started with Python code profiling, we will need some sample Python
    code to work with.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始 Python 代码性能分析之前，我们需要一些示例 Python 代码来进行测试。
- en: 'Let’s create a simple script that will print “Python Programming” 5 times and
    call it **main.py**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的脚本，它将“Python Programming”打印5次，并将其命名为**main.py**：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and once you run it, you should get:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行它，你应该得到：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One of the easiest ways to profile your Python code with cProfile is to run
    cProfile from terminal.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 cProfile 性能分析 Python 代码最简单的方法之一是从终端运行 cProfile。
- en: 'Open the terminal and navigate to the folder where your Python script ( **main.py**)
    is located, and run:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，导航到你的 Python 脚本 (**main.py**) 所在的文件夹，并运行：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should get:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Profile Python code with cProfile in Python
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的 cProfile 对 Python 代码进行性能分析
- en: Another way of profiling your Python code with cProfile is by using cProfile
    module directly in your Python script.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 cProfile 直接在 Python 脚本中分析 Python 代码是另一种方法。
- en: 'You will need to import the cProfile module into your Python environment and
    explicitly call the profiling function while passing the Python code as a string
    into the function as an argument:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 cProfile 模块导入到 Python 环境中，并显式调用性能分析函数，同时将 Python 代码作为字符串传递给该函数作为参数：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should get:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we simplified the code to just one line of printing “Python
    Programming”, because as you can see, passing code into **cProfile.run()** as
    a string is not the most convenient option.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将代码简化为仅打印“一行‘Python Programming’”，因为如你所见，将代码作为字符串传递给**cProfile.run()**并不是最方便的选项。
- en: There should be a better way right? Of course! In the next section we will explore
    how to profile Python code using functions and **cProfile**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 应该有更好的方法，对吧？当然！在下一节中，我们将探讨如何使用函数和**cProfile**对 Python 代码进行性能分析。
- en: Profile Python functions with cProfile in Python
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的 cProfile 对 Python 函数进行性能分析
- en: 'Let’s reuse the Python code from one of the previous sections and now place
    it in a function **my_func()**:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重用前面部分的 Python 代码，现在将其放入函数**my_func()**中：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we can easily run a profiler on this function by passing it into **cProfile.run()**
    as an argument:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过将该函数作为参数传递给**cProfile.run()**来轻松地对其进行性能分析：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'and you should get:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Export cProfile data
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出 cProfile 数据
- en: In the previous sections we ran the profiler on the Python code and the results
    were printed out in terminal.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们对 Python 代码进行了性能分析，结果在终端中打印出来。
- en: But can we extract and save the profiling data?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们可以提取并保存分析数据吗？
- en: Yes! Using the built-in **pstats** module together with **cProfile** we can
    extract and save the profiler results in a simple .txt file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！使用内置的**pstats**模块和**cProfile**，我们可以将分析结果提取并保存到一个简单的.txt文件中。
- en: 'Notice that the **profile.run()** functionality is defined as:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**profile.run()** 功能定义如下：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: where when *filename* is set to **None**, it automatically prints out the profiling
    report.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *filename* 设置为 **None** 时，它会自动打印出性能分析报告。
- en: 'Let’s now set *filename* equal to some sample file name like ‘results’ and
    run the code from the previous section:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将 *filename* 设置为一些示例文件名，如‘results’，并运行上一节的代码：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will notice the output in terminal is simply what the function is supposed
    to generate, but no profiling report:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到终端中的输出仅仅是函数应该生成的内容，但没有性能分析报告：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, you will now have a new file ‘results’ created in the directory of
    the project:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你会在项目目录中创建一个名为‘results’的新文件：
- en: '![](../Images/f3e0452cb4ac9b383083201cae14a716.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f3e0452cb4ac9b383083201cae14a716.png)'
- en: Image by Author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: We have the file with the profiling report, but we can’t open it just yet. Now
    we will need to convert it into .txt file using the **pstats** module, and then
    the report can be accessed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有了包含分析报告的文件，但我们还不能打开它。现在我们需要使用**pstats**模块将其转换为.txt文件，然后才能访问报告。
- en: 'This additional code will convert the ‘results’ file into ‘results.txt’:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这段额外的代码将把‘results’文件转换为‘results.txt’：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'and you should see a new file in the directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在目录中看到一个新文件：
- en: '![](../Images/a227b4c0de84c899318c356e98872f76.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a227b4c0de84c899318c356e98872f76.png)'
- en: Image by Author
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Now we have successfully created a .txt file with the profiling report. It
    should contain the following data:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了一个包含分析报告的.txt文件。它应包含以下数据：
- en: '![](../Images/91a6ba3791355fd7e9174beedf3e975e.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91a6ba3791355fd7e9174beedf3e975e.png)'
- en: Image by Author
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Complete Code for Extracting cProfile data
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取cProfile数据的完整代码
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Conclusion
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article we explored how to profile Python code with [**cProfile**](https://docs.python.org/3/library/profile.html#module-cProfile)
    module.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探讨了如何使用[**cProfile**](https://docs.python.org/3/library/profile.html#module-cProfile)模块来分析Python代码。
- en: Code profiling helps identify bottlenecks in the code and helps understand which
    parts of the code should be optimized for better overall performance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析帮助识别代码中的瓶颈，并帮助理解哪些部分的代码应该优化以提高整体性能。
- en: Feel free to leave comments below if you have any questions or have suggestions
    for some edits and check out more of my [Python Programming](https://pyshark.com/category/python-functions/)
    tutorials.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何问题或对某些编辑有建议，请随时在下面留言，并查看我的更多[Python编程](https://pyshark.com/category/python-functions/)教程。
- en: '*Originally published at* [*https://pyshark.com*](https://pyshark.com/profiling-python-code-with-cprofile/)
    *on February 10, 2023.*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发表于* [*https://pyshark.com*](https://pyshark.com/profiling-python-code-with-cprofile/)
    *2023年2月10日。*'
