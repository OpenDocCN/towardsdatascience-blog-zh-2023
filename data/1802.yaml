- en: How to Make Your Python Packages Really Fast with Rust
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何用 Rust 让你的 Python 包真正加速
- en: 原文：[https://towardsdatascience.com/how-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2?source=collection_archive---------2-----------------------#2023-05-31](https://towardsdatascience.com/how-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2?source=collection_archive---------2-----------------------#2023-05-31)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2?source=collection_archive---------2-----------------------#2023-05-31](https://towardsdatascience.com/how-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2?source=collection_archive---------2-----------------------#2023-05-31)
- en: Goodbye, slow code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 告别，慢速代码
- en: '[](https://medium.isaacharrisholt.com/?source=post_page-----91a9bebacbc2--------------------------------)[![Isaac
    Harris-Holt](../Images/723dfa962a9eb9b9d4fcc99502a7a294.png)](https://medium.isaacharrisholt.com/?source=post_page-----91a9bebacbc2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----91a9bebacbc2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----91a9bebacbc2--------------------------------)
    [Isaac Harris-Holt](https://medium.isaacharrisholt.com/?source=post_page-----91a9bebacbc2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.isaacharrisholt.com/?source=post_page-----91a9bebacbc2--------------------------------)[![Isaac
    Harris-Holt](../Images/723dfa962a9eb9b9d4fcc99502a7a294.png)](https://medium.isaacharrisholt.com/?source=post_page-----91a9bebacbc2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----91a9bebacbc2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----91a9bebacbc2--------------------------------)
    [Isaac Harris-Holt](https://medium.isaacharrisholt.com/?source=post_page-----91a9bebacbc2--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fae5d6a2a28aa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2&user=Isaac+Harris-Holt&userId=ae5d6a2a28aa&source=post_page-ae5d6a2a28aa----91a9bebacbc2---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----91a9bebacbc2--------------------------------)
    ·6 min read·May 31, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F91a9bebacbc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2&user=Isaac+Harris-Holt&userId=ae5d6a2a28aa&source=-----91a9bebacbc2---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fae5d6a2a28aa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2&user=Isaac+Harris-Holt&userId=ae5d6a2a28aa&source=post_page-ae5d6a2a28aa----91a9bebacbc2---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----91a9bebacbc2--------------------------------)
    · 6 分钟阅读 · 2023年5月31日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F91a9bebacbc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2&user=Isaac+Harris-Holt&userId=ae5d6a2a28aa&source=-----91a9bebacbc2---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91a9bebacbc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2&source=-----91a9bebacbc2---------------------bookmark_footer-----------)![](../Images/aa4989d4b59e24e5610fb197df1de377.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F91a9bebacbc2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-make-your-python-packages-really-fast-with-rust-91a9bebacbc2&source=-----91a9bebacbc2---------------------bookmark_footer-----------)![](../Images/aa4989d4b59e24e5610fb197df1de377.png)'
- en: Photo by [Chris Liverani](https://unsplash.com/@chrisliverani?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Chris Liverani](https://unsplash.com/@chrisliverani?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。
- en: Python is… slow. This is not a revelation. Lots of dynamic languages are. In
    fact, Python is so slow that many authors of performance-critical Python packages
    have turned to another language — C. But C is not fun, and C has enough foot guns
    to cripple a centipede.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是……慢。这并不是什么新发现。很多动态语言都是如此。实际上，Python 的速度如此之慢，以至于许多对性能有严格要求的 Python 包作者转向了另一种语言——C。但
    C 并不好玩，而且 C 有足够多的陷阱可以让一个蜈蚣陷入困境。
- en: Introducing Rust.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍 Rust。
- en: Rust is a memory-efficient language with no runtime or garbage collector. It’s
    incredibly fast, super reliable, and has a really great community around it. Oh,
    and it’s also *super easy* to embed into your Python code thanks to excellent
    tools like PyO3 and maturin.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 是一种内存高效的语言，没有运行时或垃圾回收器。它速度极快，可靠性极高，并且有一个非常优秀的社区。此外，由于像 PyO3 和 maturin 这样的优秀工具，它也*非常容易*嵌入到你的
    Python 代码中。
- en: Sound exciting? Great! Because I’m about to show you how to create a Python
    package in Rust step-by-step. And if you don’t know any Rust, don’t worry — we’re
    not going to be doing anything too crazy, so you should still be able to follow
    along. Are you ready? Let’s oxidise this snake.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很兴奋？太好了！因为我接下来将一步一步向你展示如何在 Rust 中创建一个 Python 包。如果你对 Rust 一无所知，也不用担心——我们不会做任何过于复杂的事情，所以你仍然可以跟得上。准备好了吗？让我们来氧化这条蛇吧。
- en: Pre-requisites
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: Before we get started, you’re going to need to install Rust on your machine.
    You can do that by heading to [rustup.rs](https://rustup.rs/) and following the
    instructions there. I would also recommend creating a virtual environment that
    you can use for testing your Rust package.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你需要在你的机器上安装 Rust。你可以通过访问 [rustup.rs](https://rustup.rs/) 并按照那里的说明进行安装。我还建议创建一个虚拟环境，以便用于测试你的
    Rust 包。
- en: Script overview
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本概述
- en: Here’s a script that, given a number n, will calculate the nth Fibonacci number
    100 times and time how long it takes to do so.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个脚本，给定一个数字 n，它将计算第 n 个斐波那契数 100 次，并记录所需时间。
- en: This is a very naive, totally unoptimised function, and there are plenty of
    ways to make this faster using Python alone, but I’m not going to be going into
    those today. Instead, we’re going to take this code and use it to create a Python
    package in Rust
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常初级、完全未优化的函数，使用纯 Python 也有很多方法可以使其更快，但我今天不会讨论那些方法。相反，我们将利用这段代码来创建一个 Rust
    中的 Python 包。
- en: Maturin setup
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maturin 设置
- en: The first step is to install [maturin](https://www.maturin.rs/), which is a
    build system for building and publishing Rust crates as Python packages. You can
    do that with `pip install maturin`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装 [maturin](https://www.maturin.rs/)，这是一个用于构建和发布 Rust crate 作为 Python 包的构建系统。你可以通过
    `pip install maturin` 来完成安装。
- en: Next, create a directory for your package. I’ve called mine `fibbers`. The final
    setup step is to run `maturin init` from your new directory. At this point, you’ll
    be prompted to select which Rust bindings to use. Select `pyo3`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为你的包创建一个目录。我将其命名为 `fibbers`。最后一步是从你的新目录中运行 `maturin init`。此时，你将被提示选择要使用的
    Rust 绑定。选择 `pyo3`。
- en: '![](../Images/b909e60c1bf09cc8fdeed5803878c8b8.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b909e60c1bf09cc8fdeed5803878c8b8.png)'
- en: Image by author.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者。
- en: Now, if you take a look at your `fibbers` directory, you’ll see a few files.
    Maturin has created some config files for us, namely a `Cargo.toml` and `pyproject.toml`.
    The `Cargo.toml` file is configuration for Rust’s build tool, `cargo`, and contains
    some default metadata about the package, some build options and a dependency for
    `pyo3`. The `pyproject.toml` file is fairly standard, but it’s set to use `maturin`
    as the build backend.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你查看你的 `fibbers` 目录，你会看到一些文件。Maturin 为我们创建了一些配置文件，即 `Cargo.toml` 和 `pyproject.toml`。`Cargo.toml`
    文件是 Rust 构建工具 `cargo` 的配置文件，包含有关包的一些默认元数据、构建选项和 `pyo3` 的依赖项。`pyproject.toml` 文件是相当标准的，但它被设置为使用
    `maturin` 作为构建后端。
- en: Maturin will also create a GitHub Actions workflow for releasing your package.
    It’s a small thing, but makes life *so* much easier when you’re maintaining an
    open source project. The file we mostly care about, however, is the `lib.rs` file
    in the `src` directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Maturin 还会为发布你的包创建一个 GitHub Actions 工作流。这虽然是个小事，但在维护开源项目时会让生活变得*轻松多了*。然而，我们最关心的文件是
    `src` 目录中的 `lib.rs` 文件。
- en: Here’s an overview of the resulting file structure.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的文件结构的概述。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Writing the Rust
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 Rust 代码
- en: Maturin has already created the scaffold of a Python module for us using the
    PyO3 bindings we mentioned earlier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Maturin 已经使用我们之前提到的 PyO3 绑定为我们创建了一个 Python 模块的框架。
- en: The main parts of this code are this `sum_as_string` function, which is marked
    with the `pyfunction` attribute, and the `fibbers` function, which represents
    our Python module. All the `fibbers` function is really doing is registering our
    `sum_as_string` function with our `fibbers` module.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的主要部分是 `sum_as_string` 函数，它被标记为 `pyfunction` 属性，以及 `fibbers` 函数，它代表我们的 Python
    模块。`fibbers` 函数实际上只是将 `sum_as_string` 函数注册到我们的 `fibbers` 模块中。
- en: If we installed this now, we’d be able to call `fibbers.sum_as_string()` from
    Python, and it would all work as expected.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在安装这个，我们将能够从Python调用`fibbers.sum_as_string()`，一切都会按预期工作。
- en: However, what I’m going to do first is replace the `sum_as_string` function
    with our `fib` function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我首先要做的是将`sum_as_string`函数替换为我们的`fib`函数。
- en: This has exactly the same implementation as the Python we wrote earlier — it
    takes in a positive unsigned integer n and returns the nth Fibonacci number. I’ve
    also registered our new function with the `fibbers` module, so we’re good to go!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前编写的Python实现完全相同——它接受一个正整数n并返回第n个斐波那契数。我还将我们的新函数注册到`fibbers`模块，所以我们可以开始使用了！
- en: Benchmarking our function
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基准测试我们的函数
- en: To install our `fibbers` package, all we have to do is run `maturin develop`in
    our terminal. This will download and compile our Rust package and install it into
    our virtual environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装我们的`fibbers`包，我们只需在终端中运行`maturin develop`即可。这将下载并编译我们的Rust包，并将其安装到我们的虚拟环境中。
- en: '![](../Images/1403ae627ee0b4a01ea8ad0968f0b11a.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1403ae627ee0b4a01ea8ad0968f0b11a.png)'
- en: Image by author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Now, back in our `fib.py` file, we can import `fibbers`, print out the result
    of `fibbers.fib()` and then add a `timeit` case for our Rust implementation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的`fib.py`文件中，我们可以导入`fibbers`，打印`fibbers.fib()`的结果，然后为我们的Rust实现添加一个`timeit`案例。
- en: If we run this now for the 10th Fibonacci number, you can see that our Rust
    function is about 5 times faster than Python, despite the fact we’re using an
    identical implementation!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行第10个斐波那契数，你会发现我们的Rust函数比Python快约5倍，尽管我们使用的是相同的实现！
- en: '![](../Images/42faca074401862fe3478468a5e55196.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42faca074401862fe3478468a5e55196.png)'
- en: Image by author.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: If we run for the 20th and 30th fib numbers, we can see that Rust gets up to
    being about 15 times faster than Python.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计算第20和第30个斐波那契数，我们可以看到Rust比Python快约15倍。
- en: '![](../Images/dd9ba721121d38effa68225d2e8f6e41.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd9ba721121d38effa68225d2e8f6e41.png)'
- en: 20th fib number results. Image by author.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第20个斐波那契数结果。图片由作者提供。
- en: '![](../Images/56c728d6b3607441c5f57b78a9dd71dd.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56c728d6b3607441c5f57b78a9dd71dd.png)'
- en: 30th fib number results. Image by author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第30个斐波那契数结果。图片由作者提供。
- en: But what if I told you that we’re not even at maximum speed?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我告诉你我们还没有达到最大速度呢？
- en: You see, by default, `maturin develop`will build the dev version of your Rust
    crate, which will forego many optimisations to reduce compile time, meaning the
    program isn’t running as fast as it could. If we head back into our `fibbers`
    directory and run `maturin develop`again, but this time with the `--release` flag,
    we’ll get the optimised production-ready version of our binary.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，默认情况下，`maturin develop`会构建Rust crate的开发版本，这会放弃许多优化以减少编译时间，这意味着程序运行的速度不会达到最佳。如果我们返回到`fibbers`目录，再次运行`maturin
    develop`，但这次加上`--release`标志，我们将得到优化后的生产就绪版本的二进制文件。
- en: '![](../Images/7f723ac21a572c815c7dbd8c320a9f7a.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f723ac21a572c815c7dbd8c320a9f7a.png)'
- en: If we now benchmark our 30th fib number, we see that Rust now gives us a whopping
    *40 times* speed improvement over Python!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在基准测试第30个斐波那契数，我们会看到Rust现在比Python快了令人惊叹的*40倍*！
- en: '![](../Images/f75f3a616edc770b5df0868e54190488.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f75f3a616edc770b5df0868e54190488.png)'
- en: 30th fib number, optimised. Image by author.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第30个斐波那契数，优化版。图片由作者提供。
- en: Rust limitations
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rust的限制
- en: However, we do have a problem with our Rust implementation. If we try to get
    the 50th Fibonacci number using `fibbers.fib()`, you’ll see that we actually hit
    an overflow error and get a different answer to Python.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的Rust实现确实有问题。如果我们尝试使用`fibbers.fib()`获取第50个斐波那契数，你会看到我们实际上遇到了溢出错误，并且得到的答案与Python不同。
- en: '![](../Images/8a5ced8efee69a67b0329f1a8c5e7c69.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a5ced8efee69a67b0329f1a8c5e7c69.png)'
- en: Rust experiences integer overflow. Image by author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Rust经历了整数溢出。图片由作者提供。
- en: This is because, unlike Python, Rust has fixed-size integers, and a 32-bit integer
    isn’t large enough to hold our 50th Fibonacci number.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为，与Python不同，Rust有固定大小的整数，32位整数不足以容纳我们的第50个斐波那契数。
- en: We can get around this by changing the type in our Rust function from `u32`
    to `u64`, but that will use more memory and might not be supported on every machine.
    We could also solve it by using a crate like [num_bigint](https://docs.rs/num-bigint/latest/num_bigint/),
    but that’s outside the scope of this article.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将Rust函数中的类型从`u32`更改为`u64`来解决这个问题，但这会使用更多的内存，并且可能不是每台机器都支持。我们还可以使用像[num_bigint](https://docs.rs/num-bigint/latest/num_bigint/)这样的crate来解决这个问题，但这超出了本文的范围。
- en: Another small limitation is that there’s some overhead to using the PyO3 bindings.
    You can see that here where I’m just getting the 1st Fibonacci number, and Python
    is actually faster than Rust thanks to this overhead.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个小限制是使用 PyO3 绑定会有一些开销。你可以在这里看到我仅仅获取第一个斐波那契数，实际上 Python 比 Rust 更快，这要归功于这种开销。
- en: '![](../Images/21a63bceb9f6e6ef68242a6c1d67e854.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21a63bceb9f6e6ef68242a6c1d67e854.png)'
- en: Python is faster for n=1\. Image by author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在 n=1 时更快。图片来自作者。
- en: Things to remember
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要记住的事项
- en: The numbers in this article were not recorded on a perfect machine. The benchmarks
    were run on my personal machine, and may not reflect real-world problems. Please
    take care with micro-benchmarks like this one in general, as they are often imperfect
    and emulate many aspects of real world programs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的数据不是在完美的机器上记录的。基准测试在我的个人机器上进行，可能无法反映真实世界的问题。请对像这样的微基准测试保持谨慎，因为它们通常不完美，并模拟了许多实际程序的方面。
- en: I hope you’ve found this article helpful, and that it’s encouraged you to try
    rewriting performance-critical parts of your Python code in Rust. Be wary that
    while Rust can speed up a lot of things, it won’t provide much advantage if most
    of your CPU cycles are spent on syscalls or network IO, as those slowdowns are
    outside the scope of your program.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这篇文章有帮助，并且它鼓励你尝试用 Rust 重写 Python 代码中的性能关键部分。要注意，虽然 Rust 可以加速很多东西，但如果你的
    CPU 循环大部分时间都花在系统调用或网络 IO 上，它不会提供太多优势，因为这些减速超出了程序的范围。
- en: 'If you’d like to see more complete examples of Python packages written in Rust,
    please check out the following examples:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看更多用 Rust 编写的 Python 包的完整示例，请查看以下示例：
- en: '[isaacharrisholt/uuidt](https://github.com/isaacharrisholt/uuidt)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[isaacharrisholt/uuidt](https://github.com/isaacharrisholt/uuidt)'
- en: '[pydantic/pydantic-core](https://github.com/pydantic/pydantic-core)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pydantic/pydantic-core](https://github.com/pydantic/pydantic-core)'
- en: '[pola-rs/polars](https://github.com/pola-rs/polars/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pola-rs/polars](https://github.com/pola-rs/polars/)'
- en: 'This article was based on the script for this video of mine, so if you’re more
    of a visual learner, or would like quick reference material, feel free to check
    it out:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本文基于我的这段视频脚本，所以如果你更倾向于视觉学习，或者希望有快速参考资料，欢迎查看：
- en: 'Or check out the code on GitHub:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者查看 GitHub 上的代码：
- en: '[](https://github.com/isaacharrisholt/youtube/tree/main/010-creating-python-packages-with-rust?source=post_page-----91a9bebacbc2--------------------------------)
    [## youtube/010-creating-python-packages-with-rust at main · isaacharrisholt/youtube'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/isaacharrisholt/youtube/tree/main/010-creating-python-packages-with-rust?source=post_page-----91a9bebacbc2--------------------------------)
    [## youtube/010-creating-python-packages-with-rust at main · isaacharrisholt/youtube'
- en: Everyone knows that program speed isn't Python's strong point. That's why so
    many number-crunching data science…
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个人都知道程序速度不是 Python 的强项。这就是为什么有如此多的数据科学…
- en: github.com](https://github.com/isaacharrisholt/youtube/tree/main/010-creating-python-packages-with-rust?source=post_page-----91a9bebacbc2--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/isaacharrisholt/youtube/tree/main/010-creating-python-packages-with-rust?source=post_page-----91a9bebacbc2--------------------------------)
- en: Stay fast!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 保持快速！
- en: Isaac
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Isaac
