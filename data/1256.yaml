- en: How to Write a Custom Function to Generate Multiple Plots in R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写自定义函数以在 R 中生成多个图表
- en: 原文：[https://towardsdatascience.com/how-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd?source=collection_archive---------2-----------------------#2023-04-11](https://towardsdatascience.com/how-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd?source=collection_archive---------2-----------------------#2023-04-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd?source=collection_archive---------2-----------------------#2023-04-11](https://towardsdatascience.com/how-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd?source=collection_archive---------2-----------------------#2023-04-11)
- en: An easy introduction to writing custom functions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轻松介绍自定义函数的编写
- en: '[](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)[![Vivian
    Peng](../Images/867b8bbfe22ae0881776fef31108fe89.png)](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)
    [Vivian Peng](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)[![Vivian
    Peng](../Images/867b8bbfe22ae0881776fef31108fe89.png)](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)
    [Vivian Peng](https://medium.com/@create_self?source=post_page-----7ad24637e0dd--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffd5a22d4fcc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&user=Vivian+Peng&userId=fd5a22d4fcc&source=post_page-fd5a22d4fcc----7ad24637e0dd---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)
    ·9 min read·Apr 11, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7ad24637e0dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&user=Vivian+Peng&userId=fd5a22d4fcc&source=-----7ad24637e0dd---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ffd5a22d4fcc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&user=Vivian+Peng&userId=fd5a22d4fcc&source=post_page-fd5a22d4fcc----7ad24637e0dd---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ad24637e0dd--------------------------------)
    · 9 分钟阅读 · 2023年4月11日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7ad24637e0dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&source=-----7ad24637e0dd---------------------bookmark_footer-----------)![](../Images/a796c3be75f979deddaa04aa1bd47593.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7ad24637e0dd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-write-a-custom-function-to-generate-multiple-plots-in-r-7ad24637e0dd&source=-----7ad24637e0dd---------------------bookmark_footer-----------)![](../Images/a796c3be75f979deddaa04aa1bd47593.png)'
- en: A visual of a pair of hands typing on a laptop with code on the screen. Image
    by Author
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一双手在笔记本电脑上打字，屏幕上显示代码的视觉图像。图片由作者提供
- en: I always felt intimidated to write functions in R, since I was so comfortable
    using out-of-the box solutions that come with [tidyverse](https://www.tidyverse.org/).
    When I started coding in Python, I found myself writing more and more custom functions
    to replicate my favorite `dplyr` functions from R into Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是觉得在 R 中编写函数很有压力，因为我习惯了使用 [tidyverse](https://www.tidyverse.org/) 提供的现成解决方案。当我开始用
    Python 编程时，我发现自己越来越多地编写自定义函数，以将我喜欢的 `dplyr` 函数从 R 转移到 Python 中。
- en: Learning how to write functions in Python has made me a better programmer in
    R, too. It’s helped me automate my work and ensure reproducibility. The most common
    use case I have for custom functions is to generate multiple plots in R.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何在 Python 中编写函数使我在 R 编程方面也变得更好。它帮助我自动化工作并确保结果可复现。我最常用自定义函数的场景是生成多个 R 图表。
- en: 'Reasons to write custom functions to generate plots in R:'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写自定义函数以生成 R 中的图表的理由：
- en: '**1\. Automate reporting:** Sometimes you have to build a report with the same
    type of visual (like a bar chart) for different variables. For example, I formerly
    worked for the Mayor of Los Angeles, Eric Garcetti, during the height of the pandemic.
    Our data team was tasked with producing reports for his daily Covid press briefings
    that covered daily case, death, hospitalization, testing, and vaccination rates.
    We had the same chart format–bar chart– for each of these variables. Instead of
    repeating the graph code each time for a different variable, we automated the
    reporting process by writing a custom function to loop through the variables and
    produce the charts. This way, we just had to pull in the data each day and run
    the script of code to generate new graphs.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 自动化报告：** 有时你需要为不同的变量构建相同类型的视觉报告（例如柱状图）。例如，我曾在大流行期间为洛杉矶市长 Eric Garcetti
    工作。我们的数据团队负责为他的每日 Covid 新闻发布会制作报告，涵盖了每日病例、死亡、住院、检测和疫苗接种率。我们对这些变量使用了相同的图表格式——柱状图。为了避免每次为不同变量重复图表代码，我们通过编写自定义函数循环处理变量并生成图表，从而自动化了报告过程。这样，我们每天只需提取数据并运行代码脚本以生成新图表。'
- en: '**2\. Stepping stone to building a dashboard:** Once you have automated the
    reporting process, it’s a natural progression to turn your report into a dashboard
    for an interactive experience. R has a great dashboard library, [Shiny](https://shiny.rstudio.com/),
    that makes it easy to build a web application directly in R language. When you
    already have a custom function for generating plots, you can easily use the same
    function in your dashboard code to allow for users to select the variable of interest.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 构建仪表盘的跳板：** 一旦你自动化了报告过程，将报告转化为仪表盘以获得互动体验是一个自然的进展。R 具有一个很棒的仪表盘库，[Shiny](https://shiny.rstudio.com/)，可以轻松地用
    R 语言直接构建 Web 应用程序。当你已经有一个用于生成图表的自定义函数时，可以轻松地在仪表盘代码中使用相同的函数，以便用户可以选择感兴趣的变量。'
- en: '**3\. Create a DIY facet wrap for** [**Plotly**](https://plotly.com/)**:**
    One of my favorite features of `[ggplot2](https://ggplot2.tidyverse.org/)` is
    using `facet_wrap,` where you can generate multiple subplots in one view. It’s
    a simple line of code in `ggplot2`. Unfortunately, there’s nothing like this for
    Plotly yet so I had to recreate it with a custom function.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 为** [**Plotly**](https://plotly.com/)** 创建 DIY facet wrap：** 我最喜欢 `[ggplot2](https://ggplot2.tidyverse.org/)`
    的功能之一是使用 `facet_wrap`，它可以在一个视图中生成多个子图。这在 `ggplot2` 中只需一行代码。不幸的是，目前 Plotly 中还没有类似的功能，所以我不得不使用自定义函数重新创建它。'
- en: I acknowledge that we can now use `ggplotly()`to create an interactive version
    of `ggplot2` graph with `facet_wrap`. But I personally have found poor performance
    issues using `ggplotly()`, and choose to custom build everything directly in Plotly
    instead.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认我们现在可以使用 `ggplotly()` 创建一个带有 `facet_wrap` 的 `ggplot2` 图表的互动版本。但我个人发现使用 `ggplotly()`
    性能较差，因此选择直接在 Plotly 中自定义构建所有内容。
- en: 'Here’s a breakdown of the logic for creating a custom function:'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以下是创建自定义函数的逻辑分解：
- en: 1\. Start with creating one visual first
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 首先创建一个可视化
- en: 2\. Understand which variable you want to use to create multiple plots
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 了解你要用来创建多个图表的变量
- en: 3\. Change the graphing code into a function
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 将图表代码转换为函数
- en: 4\. Loop through your unique values to generate multiple plots
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 循环遍历你的唯一值以生成多个图表
- en: 'Let’s work with the adorable [Palmer Penguins dataset from Allison Horst](https://allisonhorst.github.io/palmerpenguins/).
    This dataset has three unique species of penguins — Chinstrap, Gentoo, Adelie:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用可爱的 [Palmer Penguins 数据集](https://allisonhorst.github.io/palmerpenguins/)。该数据集包含三种独特的企鹅种类——
    Chinstrap、Gentoo、Adelie：
- en: '![](../Images/ab73693b37cdb30493b10c814d498777.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ab73693b37cdb30493b10c814d498777.png)'
- en: Artwork by [@allison_horst](https://allisonhorst.github.io/palmerpenguins/articles/art.html)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Artwork by [@allison_horst](https://allisonhorst.github.io/palmerpenguins/articles/art.html)
- en: Here’s how to load the data
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以下是如何加载数据
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 1\. Start with creating one visual first
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 首先创建一个可视化
- en: Let’s create a bar plot for the Adelie species to see their median body mass
    for each year.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 Adelie 物种创建一个柱状图，以查看它们每年的中位体重。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/be94cb0811c8e75e96430be2d33d5646.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be94cb0811c8e75e96430be2d33d5646.png)'
- en: A bar chart of the median body mass for Adelie Penguins for the years 2007,
    2008, and 2009.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个条形图显示了Adelie企鹅在2007年、2008年和2009年的中位体重。
- en: 2\. Understand which variable you want to use to create multiple plots
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 理解你想使用哪个变量来创建多个图表
- en: '*aka: what’s your `facet_wrap` variable?*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*即：你的`facet_wrap`变量是什么？*'
- en: Here’s the view of our `summary` table. We want to create the same bar graph
    for each species. In this example, our variable of interest is the `species` variable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们`summary`表格的视图。我们希望为每个物种创建相同的条形图。在这个例子中，我们感兴趣的变量是`species`变量。
- en: '![](../Images/2d0722fb6735d2e9cc53b58f415bed6f.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d0722fb6735d2e9cc53b58f415bed6f.png)'
- en: A view of our summary table that displays the median body mass for each penguin
    species — Adelie, Chinstrap, and Gentoo — for the years 2007, 2008, and 2009.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的总结表格的视图，展示了每种企鹅物种——Adelie、Chinstrap和Gentoo——在2007年、2008年和2009年的中位体重。
- en: 3\. Change the graphing code into a function
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 将绘图代码转换为函数
- en: 'Identify the components in your graphing code that need to be generalized.
    Now, we will swap out any instance of the species name `Adelie` with a generalized
    variable:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 确定绘图代码中需要概括的组件。现在，我们将用一个概括的变量替换任何“Adelie”物种名称的实例：
- en: '![](../Images/6f07fe4415ff8e1689c36a3362720ef3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f07fe4415ff8e1689c36a3362720ef3.png)'
- en: Description of our Plotly code that shows which variables we will want to generalize.
    In this example, we want to swap out any instance of the species name “Adelie”
    with a generalized variable so we can create the plot for each new species.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 描述我们的Plotly代码，展示了我们希望概括的变量。在这个例子中，我们希望用一个概括的变量替换任何“Adelie”物种名称的实例，以便为每个新物种创建图表。
- en: 'Transform the graphing code into a function. This function takes in one variable
    `species_name` which will be entered as string text. See how instead of the name
    `Adelie` here, we have replaced with the variable `species_name`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将绘图代码转换为函数。这个函数接收一个变量`species_name`，它将以字符串形式输入。请看这里，我们用变量`species_name`代替了名称`Adelie`：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s an example of how to run the function to generate your new plot. Let’s
    make the same bar chart for the species `Chinstrap`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何运行函数以生成新图表的示例。让我们为物种`Chinstrap`制作相同的条形图：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/a77fbd98eab37699a6d2126f4892d8f8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a77fbd98eab37699a6d2126f4892d8f8.png)'
- en: A bar chart of the median body mass for Chinstrap Penguins for the years 2007,
    2008, and 2009\. This was generated by the custom function we created in the post.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个条形图显示了Chinstrap企鹅在2007年、2008年和2009年的中位体重。这是通过我们在帖子中创建的自定义函数生成的。
- en: 4\. Loop through your unique values to generate multiple plots
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 循环遍历你的唯一值以生成多个图表
- en: From here, you need a list of all the unique species to loop through for your
    function. We get that with `unique(summary$species)`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，你需要一个包含所有唯一物种的列表，以便循环遍历你的函数。我们通过`unique(summary$species)`来获取这个列表。
- en: Start with creating an empty list to store all your plots
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从创建一个空列表开始，用于存储所有你的图表
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Loop through the unique species variable to generate a plot for each species.
    Then, add it to the `plot_list`
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 循环遍历唯一的物种变量，为每个物种生成一个图表。然后，将其添加到`plot_list`中。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now visualize all the plots in one grid with the `subplot` function in Plotly:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用Plotly中的`subplot`函数将所有图表可视化到一个网格中：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/8fb15638ec571d9b222deeb7b7724304.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8fb15638ec571d9b222deeb7b7724304.png)'
- en: Three bar charts of the median body mass for Adelie, Chinstrap, and Gentoo Penguins
    for the years 2007, 2008, and 2009\. This was generated by looping through each
    unique species in our dataset for our custom graphing function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 三个条形图显示了Adelie、Chinstrap和Gentoo企鹅在2007年、2008年和2009年的中位体重。这是通过循环遍历数据集中每个唯一物种，并使用我们的自定义绘图函数生成的。
- en: We did it!
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们做到了！
- en: I know that’s a lot more work than using the `facet_wrap` function in `ggplot2`,
    but understanding how to create functions helps with automating reports and creating
    more dynamic dashboards and visuals!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这比使用`facet_wrap`函数在`ggplot2`中要多做很多工作，但理解如何创建函数有助于自动化报告和创建更动态的仪表板和视觉效果！
- en: Bonus Step! Adding Annotations to Get a Title for Each Plot
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖励步骤！添加注释以获取每个图表的标题
- en: To get the titles on each of the subplot in the last visual, you have to use
    [annotations in Plotly](https://plotly.com/r/text-and-annotations/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要在最后的视觉效果中为每个子图添加标题，你必须使用[Plotly中的注释](https://plotly.com/r/text-and-annotations/)。
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is kind of a messy, trial-and-error process, because you have to hard
    code in the positions. Here’s a breakdown for how to do so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点像一个混乱的试错过程，因为你必须硬编码位置。以下是如何操作的详细说明：
- en: '**Create a list of annotations for each subplot title:** The annotations will
    be a list of lists. Each element is a list that includes all the information for
    each subplot. In our example, I want one title that displays the species name
    for each subplot, so I will have a list with 3 elements. Here’s what goes into
    each element:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为每个子图标题创建注释列表：** 注释将是一个列表的列表。每个元素是一个包含每个子图所有信息的列表。在我们的例子中，我希望每个子图显示物种名称，因此我将有一个包含
    3 个元素的列表。每个元素包含以下内容：'
- en: '![](../Images/4a63ee02469225780840568581b40823.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a63ee02469225780840568581b40823.png)'
- en: Description of our annotations code that shows what the ‘x’ , ‘y’, and ‘text’
    variables correspond to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的注释代码的描述，展示了‘x’、‘y’和‘text’变量所对应的内容。
- en: '`x`: This is a value between 0 and 1 and corresponds to the position for the
    entire graphic, with 0 at the left end and 1 at the right end.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：这是一个介于 0 和 1 之间的值，对应于整个图形的位置，其中 0 代表左端，1 代表右端。'
- en: '`y`: This is a value between 0 and 1 and corresponds to the position for the
    entire graphic, with 0 at the bottom and 1 at the top.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`：这是一个介于 0 和 1 之间的值，对应于整个图形的位置，其中 0 代表底部，1 代表顶部。'
- en: '`text:` This is the text you want to display for each of the subplot titles.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text:` 这是你希望显示的每个子图标题的文本。'
- en: '`xref` and `yref`: You have options to select ‘paper’ which means the position
    refers to the distance from the left of the plotting area in normalized coordinates
    where “0” (“1”) corresponds to the left (right). Alternatively, you can select
    ‘domain’ that will correspond to the domain for each individual subplot.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xref` 和 `yref`：你可以选择‘paper’，这意味着位置参考的是绘图区域左侧的标准化坐标距离，其中“0”（“1”）对应左侧（右侧）。或者，你可以选择‘domain’，这将对应于每个单独子图的域。'
- en: '`xanchor`: Sets the text box’s horizontal position anchor. This anchor binds
    the `x` position to the “left”, “center” or “right” side of the annotation. Imagine
    where your point is based on your x and y coordinates, and how you want the text
    to align relative to the position.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xanchor`：设置文本框的水平位置锚点。这个锚点将 `x` 位置绑定到注释的“左边”、“中间”或“右边”。根据你的 x 和 y 坐标想象一下你的点的位置，以及你希望文本如何相对于该位置对齐。'
- en: '![](../Images/6ec807a1709f8cad8959de33c0c0eff8.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6ec807a1709f8cad8959de33c0c0eff8.png)'
- en: Description on xanchor alignment for Plotly layout.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 布局的 xanchor 对齐描述。
- en: '`yanchor`: Sets the text box’s vertical position anchor. This anchor binds
    the `y` position to the “top”, “middle” or “bottom” of the annotation. Imagine
    where your point is based on your x and y coordinates, and how you want the text
    to align relative to the position.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yanchor`：设置文本框的垂直位置锚点。这个锚点将 `y` 位置绑定到注释的“顶部”、“中间”或“底部”。根据你的 x 和 y 坐标想象一下你的点的位置，以及你希望文本如何相对于该位置对齐。'
- en: '![](../Images/eb8af2b52172494cf5d321c3ecd22e1c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb8af2b52172494cf5d321c3ecd22e1c.png)'
- en: Description on yanchor alignment for Plotly layout.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 布局的 yanchor 对齐描述。
- en: '`showarrow`: Plotly can draw an arrow that points to the location of your annotation
    using TRUE or FALSE options . This is helpful if you want to label a specific
    point on a scatter plot. Since we are just adding text labels onto each subplot,
    the arrow is unnecessary in this example.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showarrow`：Plotly 可以使用 TRUE 或 FALSE 选项绘制指向注释位置的箭头。如果你想在散点图上标记特定点，这个功能非常有用。由于我们只是向每个子图添加文本标签，因此在这个例子中箭头是不必要的。'
- en: '**2\. Add the layout option to your subplot code:** You can add layout options
    with the `layout()` function.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 将布局选项添加到你的子图代码中：** 你可以通过 `layout()` 函数添加布局选项。'
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here are some options you can specify:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些你可以指定的选项：
- en: '`annotations`: The list of annotations you created that include all the information
    for the text and position of each label'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`annotations`：你创建的注释列表，包括每个标签的文本和位置的所有信息。'
- en: '`title`: This is the text for the title of the entire grid'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：这是整个网格的标题文本。'
- en: '`xaxis`, `xaxis2`, `xaxis3`: In Plotly, each subplot has its own x axis properties.
    `xaxis` refers to the first subplot. In this example, the one for the Adelie penguin
    species. The remaining x axes can be referenced by numbering each one. Here I
    am specifying the label for the tick values so that we have standardized years.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xaxis`、`xaxis2`、`xaxis3`：在 Plotly 中，每个子图都有自己的 x 轴属性。`xaxis` 指代第一个子图。在这个例子中，就是为阿德利企鹅物种的那个。剩余的
    x 轴可以通过编号进行引用。这里我指定了刻度值的标签，以便我们有标准化的年份。'
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'While this is a simple example, I hope this helps open up more possibilities
    for improving your data science workflow by using custom functions! You can take
    the steps we took here and generalize it to writing custom functions overall by:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个简单的例子，但我希望这能帮助你通过使用自定义函数来开启更多改进数据科学工作流的可能性！你可以将我们在这里所采取的步骤推广到总体编写自定义函数的方法中：
- en: Starting with a simplified example
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从简化的示例开始
- en: Swapping out your variable into a generalized variable
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的变量替换为一个通用变量
- en: Applying the function to the rest of your data
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该函数应用到其余的数据上
- en: Once you have the basics down, you can expand on this to ensure reproducibility
    of your work through automated reports, dashboards, and interactive visuals. Having
    this foundation also helps you become more proficient in both languages — R and
    Python — because you can reconstruct what works in one language into the other.
    In a world where R and Python are becoming increasingly more interchangeable,
    this offers possibilities that are not limited to a specific language!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦掌握了基础，你可以扩展这一点，通过自动报告、仪表板和交互式可视化来确保工作的可重复性。拥有这个基础也有助于你在两种语言——R 和 Python——中变得更加熟练，因为你可以将某一语言中的有效方法转化到另一种语言中。在
    R 和 Python 越来越可互换的世界里，这提供了不局限于特定语言的可能性！
- en: All images unless otherwise noted are by the author.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则所有图片均由作者提供。
