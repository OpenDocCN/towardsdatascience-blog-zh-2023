- en: 'Sorting Algorithms: Heap Sort'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序算法：堆排序
- en: 原文：[https://towardsdatascience.com/heapify-with-heap-sort-5df23b5764c1?source=collection_archive---------19-----------------------#2023-01-03](https://towardsdatascience.com/heapify-with-heap-sort-5df23b5764c1?source=collection_archive---------19-----------------------#2023-01-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/heapify-with-heap-sort-5df23b5764c1?source=collection_archive---------19-----------------------#2023-01-03](https://towardsdatascience.com/heapify-with-heap-sort-5df23b5764c1?source=collection_archive---------19-----------------------#2023-01-03)
- en: Learn about heap data structure and how it is used for sorting
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解堆数据结构及其在排序中的应用
- en: '[](https://medium.com/@slavahead?source=post_page-----5df23b5764c1--------------------------------)[![Vyacheslav
    Efimov](../Images/db4b02e75d257063e8e9d3f1f75d9d6d.png)](https://medium.com/@slavahead?source=post_page-----5df23b5764c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5df23b5764c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5df23b5764c1--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page-----5df23b5764c1--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@slavahead?source=post_page-----5df23b5764c1--------------------------------)[![Vyacheslav
    Efimov](../Images/db4b02e75d257063e8e9d3f1f75d9d6d.png)](https://medium.com/@slavahead?source=post_page-----5df23b5764c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5df23b5764c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5df23b5764c1--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page-----5df23b5764c1--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc8a0ca9d85d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fheapify-with-heap-sort-5df23b5764c1&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=post_page-c8a0ca9d85d8----5df23b5764c1---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5df23b5764c1--------------------------------)
    ·7 min read·Jan 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5df23b5764c1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fheapify-with-heap-sort-5df23b5764c1&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=-----5df23b5764c1---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc8a0ca9d85d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fheapify-with-heap-sort-5df23b5764c1&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=post_page-c8a0ca9d85d8----5df23b5764c1---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5df23b5764c1--------------------------------)
    · 7 分钟阅读 · 2023年1月3日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F5df23b5764c1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fheapify-with-heap-sort-5df23b5764c1&user=Vyacheslav+Efimov&userId=c8a0ca9d85d8&source=-----5df23b5764c1---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5df23b5764c1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fheapify-with-heap-sort-5df23b5764c1&source=-----5df23b5764c1---------------------bookmark_footer-----------)![](../Images/99d9ca3f43899b65860f0083b86d38d2.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F5df23b5764c1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fheapify-with-heap-sort-5df23b5764c1&source=-----5df23b5764c1---------------------bookmark_footer-----------)![](../Images/99d9ca3f43899b65860f0083b86d38d2.png)'
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Heap is a data structure that represents an array in a binary tree-based format.
    Heap imposes the following rules for its structure:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 堆是一种数据结构，表示以基于二叉树的格式组织的数组。堆对其结构施加了以下规则：
- en: '**Completeness**. Every level of the heap is completely filled with elements.
    However, the last level may be partially filled with elements starting from the
    left.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整性**。堆的每一层都被完全填满。然而，最后一层可能从左侧开始部分填满。'
- en: '**Heap rule**. The value of any parent’s node must be less or equal to the
    values of its children. If this property is satisfied, the heap is called min-heap.
    There also exists a max-heap variation for which parents’ values must be greater
    than children’s values.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆规则**。任何父节点的值必须小于或等于其子节点的值。如果满足这一属性，则堆称为最小堆。还有一种最大堆变体，其中父节点的值必须大于子节点的值。'
- en: Examples and code in this article will be provided for min heaps. The algorithm
    workflow for max heaps looks very similar. An example of a min-heap is shown below.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的示例和代码将针对最小堆提供。最大堆的算法工作流程非常类似。下面展示了一个最小堆的示例。
- en: '![](../Images/5e5906b224656fbe591da0a80e519b87.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e5906b224656fbe591da0a80e519b87.png)'
- en: 'Heap is usually stored in the form of an array. *If a parent has an index i,
    then the positions of its left and right children are 2 * i + 1 and 2 * i + 2
    respectively. Inversely, if a non-root node has an index* i*, then its parent’s
    node has an index* (i - 1) // 2\. Following this principle, we get the array representation
    of the heap above:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 堆通常以数组的形式存储。*如果一个父节点的索引是 i，那么其左子节点和右子节点的位置分别是 2 * i + 1 和 2 * i + 2。反之，如果一个非根节点的索引是*
    i*，那么其父节点的索引是* (i - 1) // 2*。遵循这一原则，我们得到上述堆的数组表示：
- en: '![](../Images/4d80164a8184defd378f330f1263d4d6.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d80164a8184defd378f330f1263d4d6.png)'
- en: Operations
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作
- en: 'Heap supports several operations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 堆支持多种操作：
- en: Inserting a node
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入一个节点
- en: Building a heap from an array
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数组构建堆
- en: Extracting a node with the minimum value
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取具有最小值的节点
- en: Sorting
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序
- en: Since the heap data structure has several operations, it is more practical to
    implement it as a class. For now, we are going to implement its basis. After each
    operation, a corresponding code snippet will be provided.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于堆数据结构具有多个操作，实际中将其实现为一个类更为方便。目前，我们将实现其基础部分。每次操作后，将提供相应的代码片段。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*heap* field stores an input array in the form of a heap (will be implemented
    later)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*heap* 字段以堆的形式存储输入数组（稍后将实现）'
- en: The _*swap()* method takes two indices of the array and swaps their values.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*_swap()* 方法接受两个数组索引并交换其值。'
- en: The *_number_of_children()* method returns the number of children a node has
    (0, 1 or 2)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*number_of_children()* 方法返回节点的子节点数量（0、1 或 2）'
- en: Inserting a node
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入一个节点
- en: The new element of the heap is inserted at the last position. Such insertion
    can break the heap rule if the new element is lower than the parent’s value. To
    avoid this problem, the new node is recursively propagated up until the moment
    when it does not violate the heap rule. The described procedure is called heapify(up).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 新元素插入堆的最后位置。如果插入的元素低于父节点的值，可能会破坏堆规则。为避免此问题，新节点会递归向上传播，直到不违反堆规则为止。上述过程称为堆化（up）。
- en: From the figure above we insert a node with the value 3.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中，我们插入了一个值为 3 的节点。
- en: '![](../Images/dd988bcb480281d6a9d100c9a769c2cc.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd988bcb480281d6a9d100c9a769c2cc.png)'
- en: After the insertion, the heap rule is broken, since 3 < 15 (parent). We swap
    elements 3 and 15.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入后，堆规则被破坏，因为 3 < 15（父节点）。我们交换元素 3 和 15。
- en: Now node 3 has a new parent which has value 7\. Again, the heap rule is not
    satisfied, since 3 < 7\. As a result, we swap 3 and 7.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在节点 3 有了一个新父节点，值为 7。再次，堆规则未得到满足，因为 3 < 7。结果，我们交换了 3 和 7。
- en: Node 3 stands at index 2 and has a parent with the value 1\. Since 3 ≥ 1, the
    heap rule is correct. At this stage, the insertion procedure ends.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点 3 位于索引 2，其父节点值为 1。由于 3 ≥ 1，堆规则是正确的。在这一阶段，插入过程结束。
- en: '![](../Images/7b9eb6f655a7ee2691ab78145f5e1947.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b9eb6f655a7ee2691ab78145f5e1947.png)'
- en: Let us find out the time complexity for insertion. The worst case is possible
    when it is necessary to propagate the new node from the bottom to the top level
    of a tree. Since the height of any tree is logarithmic in relation to the total
    number of its elements *N* and each comparison takes *O(1)* time, the final estimation
    results in *O(logN)* time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探讨插入的时间复杂度。最坏的情况是需要将新节点从树的底部传播到顶部。由于任何树的高度与其元素总数 *N* 的对数关系成正比，而每次比较花费 *O(1)*
    时间，最终估计结果为 *O(logN)* 时间。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The *insert()* method appends the value to the heap and then calls the method
    to heapify it up.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*insert()* 方法将值附加到堆中，然后调用堆化方法。'
- en: The _*heapify_up()* method recursively invokes itself on a parent node until
    the heap rule is correct.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*_heapify_up()* 方法递归调用自身，直到堆规则正确。'
- en: Building a heap
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建堆
- en: For each element of an input array, an insert procedure is called. This is the
    way a heap is built.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于输入数组的每个元素，调用插入过程。这就是构建堆的方法。
- en: Speaking of complexity, it might seem that building a heap requires *O(N * logN)*
    *of time because for each of N elements, we call a function that works by O(logN)
    time. However, it is possible to improve that estimation and prove mathematically
    that the total time is O(N)*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 说到复杂度，可能会觉得构建一个堆需要 *O(N * logN)* *的时间，因为对于每个 N 元素，我们调用一个耗时 O(logN) 的函数。然而，可以改进这个估计，并通过数学证明总时间是
    O(N)*。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For the passed array in the *build()* method, the heap is built through insertion
    calls.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于传递给 *build()* 方法的数组，通过插入调用构建堆。
- en: Extracting a node with the minimum value
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取具有最小值的节点
- en: 'The minimum node is located at the top of the heap. We extract the minimum
    and replace the top node with the last node of the heap. The heap rule is violated,
    so we propagate this element down. The algorithm is very similar to the previous
    one we used above (during insertion elements were propagated up): at each step,
    we swap the current element with a child who has the minimum value. This procedure
    lasts until the heap rule is no longer broken or the current element does have
    a child.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最小节点位于堆的顶部。我们提取最小值，并用堆的最后一个节点替换顶部节点。由于违反了堆规则，我们将这个元素向下传播。该算法与我们上面使用的插入元素时相似（插入时元素是向上传播的）：在每一步中，我们将当前元素与具有最小值的子节点交换。此过程持续到堆规则不再被破坏或当前元素没有子节点为止。
- en: '![](../Images/30b0db0e5c933bb54dfcb43c7ec78b41.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30b0db0e5c933bb54dfcb43c7ec78b41.png)'
- en: In the figure above, the node with value 1 was extracted and the last node with
    value 15 took its place.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，值为1的节点被提取，值为15的最后一个节点取代了它的位置。
- en: Since node 15 violates the heap rule, we swap it with its smallest child which
    is 3.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于节点15违反了堆规则，我们将其与其最小的子节点3交换。
- en: Then node 15 has children 7 and 8 which are inferior. Again, we swap 15 with
    the smallest child which is 7.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后节点15有子节点7和8，它们都较小。我们再次将15与最小的子节点7交换。
- en: After that, 15 stands at index 5 and has an only child which is 20\. Since 15
    ≤ 20, we stop the heapify procedure.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，15位于索引5，并且只有一个子节点20。由于15 ≤ 20，我们停止堆化过程。
- en: '![](../Images/2aafb5bf033bbf6242d98e50d2c511df.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2aafb5bf033bbf6242d98e50d2c511df.png)'
- en: Similar to the heapify algorithm in the insertion section, this one has the
    same asymptotics and proceeds for *O(logN)* time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于插入部分的堆化算法，该算法具有相同的渐进复杂度，并在 *O(logN)* 时间内进行。
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sorting
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: Sorting is implemented via minimum node extraction. While the heap is not empty,
    we call the *extract_min()* function and append every minimum element to a new
    array. This way the array will consist of sorted elements.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 排序是通过提取最小节点来实现的。当堆不为空时，我们调用 *extract_min()* 函数，并将每个最小元素附加到新数组中。这样，数组将由排序的元素组成。
- en: Since the heap contains *N* nodes and *extract_min()* works for *O(logN)*, the
    total sorting time sorting takes *O(N ** logN).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于堆包含 *N* 个节点，并且 *extract_min()* 的时间复杂度为 *O(logN)*，因此总排序时间为 *O(N * logN)*。
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Conclusion
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have covered all four main operations for heaps. To sort an array using a
    heap data structure, it is necessary to first build a heap and then call the sort
    method on it. Building a heap requires *O(N)* time and sorting takes *O(N * logN)*
    *time which finally results in O(N * logN)* asymptotics for heap sort.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经覆盖了堆的所有四个主要操作。要使用堆数据结构对数组进行排序，必须首先构建堆，然后调用排序方法。构建堆需要 *O(N)* 时间，而排序需要 *O(N
    * logN)* *时间，这最终导致堆排序的O(N * logN)*渐进复杂度。
- en: The full implementation of the Heap class is shown below.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 堆类的完整实现如下所示。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Execution example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行示例：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*All images unless otherwise noted are by the author*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供*'
