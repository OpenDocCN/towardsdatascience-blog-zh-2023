- en: NumPy Broadcasting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 广播
- en: 原文：[https://towardsdatascience.com/numpy-broadcasting-4c4cb9dff1e7?source=collection_archive---------20-----------------------#2023-01-04](https://towardsdatascience.com/numpy-broadcasting-4c4cb9dff1e7?source=collection_archive---------20-----------------------#2023-01-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/numpy-broadcasting-4c4cb9dff1e7?source=collection_archive---------20-----------------------#2023-01-04](https://towardsdatascience.com/numpy-broadcasting-4c4cb9dff1e7?source=collection_archive---------20-----------------------#2023-01-04)
- en: Definitions, rules and examples
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义、规则和示例
- en: '[](https://medium.com/@cretanpan?source=post_page-----4c4cb9dff1e7--------------------------------)[![Pan
    Cretan](../Images/8b3fbab70c0e61f7ca516d2f54b646e5.png)](https://medium.com/@cretanpan?source=post_page-----4c4cb9dff1e7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4c4cb9dff1e7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4c4cb9dff1e7--------------------------------)
    [Pan Cretan](https://medium.com/@cretanpan?source=post_page-----4c4cb9dff1e7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@cretanpan?source=post_page-----4c4cb9dff1e7--------------------------------)[![Pan
    Cretan](../Images/8b3fbab70c0e61f7ca516d2f54b646e5.png)](https://medium.com/@cretanpan?source=post_page-----4c4cb9dff1e7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4c4cb9dff1e7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4c4cb9dff1e7--------------------------------)
    [Pan Cretan](https://medium.com/@cretanpan?source=post_page-----4c4cb9dff1e7--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff990ba57425&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-broadcasting-4c4cb9dff1e7&user=Pan+Cretan&userId=ff990ba57425&source=post_page-ff990ba57425----4c4cb9dff1e7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4c4cb9dff1e7--------------------------------)
    ·9 min read·Jan 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4c4cb9dff1e7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-broadcasting-4c4cb9dff1e7&user=Pan+Cretan&userId=ff990ba57425&source=-----4c4cb9dff1e7---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fff990ba57425&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-broadcasting-4c4cb9dff1e7&user=Pan+Cretan&userId=ff990ba57425&source=post_page-ff990ba57425----4c4cb9dff1e7---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4c4cb9dff1e7--------------------------------)
    ·9分钟阅读·2023年1月4日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4c4cb9dff1e7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-broadcasting-4c4cb9dff1e7&user=Pan+Cretan&userId=ff990ba57425&source=-----4c4cb9dff1e7---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4c4cb9dff1e7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-broadcasting-4c4cb9dff1e7&source=-----4c4cb9dff1e7---------------------bookmark_footer-----------)![](../Images/c72e9c7fc065552e52bfb5c5c995bb30.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4c4cb9dff1e7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fnumpy-broadcasting-4c4cb9dff1e7&source=-----4c4cb9dff1e7---------------------bookmark_footer-----------)![](../Images/c72e9c7fc065552e52bfb5c5c995bb30.png)'
- en: Photo by [Jean-Guy Nakars](https://unsplash.com/@jgnak?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 摄影：[Jean-Guy Nakars](https://unsplash.com/@jgnak?utm_source=medium&utm_medium=referral)
    摄于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '[NumPy](https://numpy.org/) offers fast calculations via vectorisation that
    avoids the use of slow Python loops. Vectorisation is also available when using
    binary ufuncs, such as addition or multiplication, with the added benefit that
    arrays do not need to have the same shape. Operations with arrays of different
    shape are known as [broadcasting](https://numpy.org/doc/stable/user/basics.broadcasting.html#general-broadcasting-rules)
    and can be particularly confusing, especially with multidimensional arrays, or
    when both arrays need to be stretched.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[NumPy](https://numpy.org/) 提供了通过矢量化进行快速计算的方法，这避免了使用较慢的 Python 循环。矢量化在使用二元
    ufuncs（如加法或乘法）时也可用，附加的好处是数组不需要具有相同的形状。具有不同形状的数组之间的操作称为 [广播](https://numpy.org/doc/stable/user/basics.broadcasting.html#general-broadcasting-rules)，这可能会特别令人困惑，特别是对于多维数组，或当两个数组都需要扩展时。'
- en: There are many examples and tutorials available, but I find most useful to approach
    the matter by thinking, and actually memorising, the broadcasting rules. It is
    then easier to think about any given use case and write the code without relying
    on trial-and-error.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多示例和教程，但我发现通过思考并实际记住广播规则来处理问题最有用。这样更容易考虑任何给定的使用案例，并编写代码，而无需依赖试错法。
- en: Broadcasting rules
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 广播规则
- en: There are two data analysis and data science books that I would highly recommend.
    Both of them contain a small section on broadcasting.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈推荐两本数据分析和数据科学的书籍。它们都有关于广播的小节。
- en: '[Python for Data Analysis](https://wesmckinney.com/book/advanced-numpy.html#numpy_broadcasting)
    by Wes McKinney contains he following broadcasting rule:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据分析的 Python](https://wesmckinney.com/book/advanced-numpy.html#numpy_broadcasting)
    由 Wes McKinney 编写，包含以下广播规则：'
- en: Two arrays are compatible for broadcasting if for each *trailing dimension*
    (i.e., starting from the end) the axis lengths match or if either of the lengths
    is 1\. Broadcasting is then performed over the missing or length 1 dimensions.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果对于每个*尾部维度*（即从末尾开始）轴长度匹配，或者任一长度为1，则两个数组可以进行广播。广播将对缺失或长度为1 的维度进行。
- en: '[Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/02.05-computation-on-arrays-broadcasting.html)
    by Jake VanderPlas contains a more verbose set of broadcasting rules:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 数据科学手册](https://jakevdp.github.io/PythonDataScienceHandbook/02.05-computation-on-arrays-broadcasting.html)
    由 Jake VanderPlas 编写，包含更详细的广播规则：'
- en: 'Rule 1: If the two arrays differ in their number of dimensions, the shape of
    the one with fewer dimensions is *padded* with ones on its leading (left) side.'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 规则1：如果两个数组在维度数量上不同，维度较少的那个数组的形状会在其前面（左侧）用1进行*填充*。
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Rule 2: If the shape of the two arrays does not match in any dimension, the
    array with shape equal to 1 in that dimension is stretched to match the other
    shape.'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 规则2：如果两个数组的形状在任何维度上不匹配，则形状为1的数组会被扩展以匹配另一个形状。
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Rule 3: If in any dimension the sizes disagree and neither is equal to 1, an
    error is raised.'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 规则3：如果在任何维度上大小不一致且都不等于1，将会引发错误。
- en: I find the second set of rules easier to follow. The examples below will be
    using these rules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现第二组规则更容易遵循。下面的示例将使用这些规则。
- en: Examples
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: Perhaps one of the simplest examples of broadcasting, and a typical pattern,
    is to subtract the column mean from each column. Following this operation the
    column means will become numerically equally to zero
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最简单的广播示例之一，以及一个典型模式，是从每一列中减去列均值。进行此操作后，列均值将变为数值上等于零。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: that prints
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这会打印
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s see what is going on here. Computing the means of the columns with `a.mean(axis=0)`
    produces an one-dimensional array with shape (3,). The two arrays involved in
    the subtraction differ in shape and hence `means_columns`that has fewer dimensions,
    will have its shape padded with 1 on the left according to rule 1\. Hence, behind
    the scenes, `means_columns` will be reshaped to (1, 3). Then according to rule
    2 `means_columns` will be stretched along axis 0 so that its shape becomes (3,
    3) to match the shape of `a`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这里发生了什么。计算 `a.mean(axis=0)` 的列均值会生成一个形状为 (3,) 的一维数组。涉及减法的两个数组在形状上有所不同，因此
    `means_columns` 会根据规则1在左侧填充1以匹配形状。因此，在幕后，`means_columns` 会被重塑为 (1, 3)。然后根据规则2，`means_columns`
    会沿着轴0扩展，使其形状变为 (3, 3) 以匹配 `a` 的形状。
- en: In addition to using the rules to predict how the array with fewer dimensions
    will be stretched we can also use `[np.broadcast_to](https://numpy.org/doc/stable/reference/generated/numpy.broadcast_to.html)`
    that returns a read-only view on the original array with the given shape. The
    view may be non-contiguous and it is possible that different elements refer to
    the same memory address
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用规则预测维度较少的数组如何被扩展外，我们还可以使用 `[np.broadcast_to](https://numpy.org/doc/stable/reference/generated/numpy.broadcast_to.html)`，它返回一个只读视图，该视图具有给定的形状。该视图可能是不连续的，且不同元素可能指向相同的内存地址。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: that prints
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这会打印
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that the base is the original means array (hence it is a view), whilst
    the stride along the first axis is 0, which means that different elements of the
    same column refer to the same memory location (see [here](https://medium.com/towards-data-science/numpy-internals-an-introduction-bcaafa1a68a2)
    for a primer on NumPy internals). NumPy is truly optimising memory usage wherever
    it can!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到基础是原始的均值数组（因此它是一个视图），而沿第一个轴的步幅是0，这意味着同一列的不同元素指向相同的内存位置（有关NumPy内部的介绍，请参见[这里](https://medium.com/towards-data-science/numpy-internals-an-introduction-bcaafa1a68a2)）。NumPy确实在尽可能优化内存使用！
- en: What if we wanted to demean the rows? The mean of the rows can be computed readily
    with `a.mean(axis=1)` that will return a (4,) array. Padding its shape with 1
    on the left, means that the array will become (1, 4). According to rule 3 the
    last dimension of the two arrays disagree and neither is 1\. This means that broadcasting
    will not take place. We could also anticipate this because`np.broadcast_to(a.mean(axis=1),
    a.shape)` raises an exception informing us that broadcast could not produce the
    requested shape (4, 3). The incompatibility of shapes can also be seen by executing
    `np.broadcast_shapes(a.shape, a.mean(axis=1).shape)` that also raises an exception
    explaining the shape mismatch. Demeaning the rows can be done by reshaping the
    row means into a (4, 1) array using either `a.mean(axis=1).reshape(-1, 1)` or
    `a.mean(axis=1)[:, np.newaxis]`
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想对行进行去均值操作怎么办？可以通过`a.mean(axis=1)`快速计算行的均值，该操作将返回一个形状为（4，）的数组。将其形状左侧填充1，意味着数组将变成（1，4）。根据规则3，这两个数组的最后维度不一致且都不是1。这意味着广播不会发生。我们也可以预见到这一点，因为`np.broadcast_to(a.mean(axis=1),
    a.shape)`引发异常，告知我们广播无法生成请求的形状（4, 3）。形状的不兼容性还可以通过执行`np.broadcast_shapes(a.shape,
    a.mean(axis=1).shape)`来观察，这也引发异常，解释了形状不匹配。通过将行均值重塑为（4，1）数组来进行行去均值操作，可以使用`a.mean(axis=1).reshape(-1,
    1)`或`a.mean(axis=1)[:, np.newaxis]`
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: that prints
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Rule 2 makes it clear why this works as an array with shape (4, 1) can be stretched
    across the columns for its shape to become (4, 3).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 规则2清楚地解释了为什么这有效，因为形状为（4，1）的数组可以在列中扩展，使其形状变成（4，3）。
- en: In the third example we will demonstrate that broadcasting can stretch both
    arrays in the ufunc binary function
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个示例中，我们将演示广播如何在ufunc二元函数中扩展两个数组
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: that gives
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将得到
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Strictly speaking the reshaping of the `b` was not necessary, but it makes things
    a bit clearer. We can also broadcast the two arrays without applying the ufunc
    with `[np.broadcast_arrays](https://numpy.org/doc/stable/reference/generated/numpy.broadcast_arrays.html)`
    or the related and more flexible `[np.broadcast](https://numpy.org/doc/stable/reference/generated/numpy.broadcast.html#numpy.broadcast)`.
    For completeness, there are other ways to achieve the same result as with broadcasting,
    with one example being `np.add.outer(a, b)` that produces an equal result as
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，重塑`b`并不是必要的，但它使事情更清晰。我们还可以使用`[np.broadcast_arrays](https://numpy.org/doc/stable/reference/generated/numpy.broadcast_arrays.html)`或相关且更灵活的`[np.broadcast](https://numpy.org/doc/stable/reference/generated/numpy.broadcast.html#numpy.broadcast)`来广播两个数组，而不应用ufunc。为了完整起见，还有其他方法可以实现与广播相同的结果，一个例子是`np.add.outer(a,
    b)`，它产生与
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: returns True.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回True。
- en: Demeaning a high dimensional array across any axis can be generalised with
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对任何轴上的高维数组进行去均值操作可以被推广为
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can confirm that `np.abs(res.mean(axis=1)).max()` is numerically equal to
    zero. The above function was taken from the book by Wes McKinney but had to be
    slightly modified to work with the NumPy version used for this article (1.23.4).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确认`np.abs(res.mean(axis=1)).max()`在数值上等于零。上述函数取自Wes McKinney的书籍，但需要稍微修改以适配本文使用的NumPy版本（1.23.4）。
- en: 'As a more real life example, we can use broadcasting to convert a color image
    to greyscale. The broadcasting part is annotated with comments:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个更实际的例子，我们可以使用广播将彩色图像转换为灰度图像。广播部分已用注释标出：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The code above produces
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成
- en: '![](../Images/3aee3670314a7f03619d446c12e9fc02.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3aee3670314a7f03619d446c12e9fc02.png)'
- en: Conversion of a transparent PNG image to greyscale (photo by [nextvoyage](https://pixabay.com/users/nextvoyage-5275305/)
    on [pixabay](https://pixabay.com/))
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将透明PNG图像转换为灰度图像（照片由[nextvoyage](https://pixabay.com/users/nextvoyage-5275305/)在[pixabay](https://pixabay.com/)提供）
- en: What is perhaps of interest is that the original is a RGBA image (red green
    blue alpha), i.e. it also contains a fourth alpha channel to indicate how opaque
    each pixel is. We converted the RGBA image to RGB by using a white background.
    This, and pretty much everything in this example, could have been done with [Pillow](https://pillow.readthedocs.io/en/stable/),
    but we used NumPy as much as possible on purpose (e.g. Pillow can [convert to
    greyscale](https://stackoverflow.com/questions/12201577/how-can-i-convert-an-rgb-image-into-grayscale-in-python)
    maintaining the transparency). The last part of the code is some [Matplotlib](https://matplotlib.org/)
    gimmickry to compare the color and greyscale images.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 也许值得关注的是，原图是一个 RGBA 图像（红色、绿色、蓝色、透明度），即它还包含第四个 alpha 通道来指示每个像素的透明度。我们通过使用白色背景将
    RGBA 图像转换为 RGB。这以及示例中的几乎所有内容，都可以使用[Pillow](https://pillow.readthedocs.io/en/stable/)来完成，但我们故意尽可能使用
    NumPy（例如，Pillow 可以[转换为灰度图像](https://stackoverflow.com/questions/12201577/how-can-i-convert-an-rgb-image-into-grayscale-in-python)以保持透明度）。代码的最后部分是一些[Matplotlib](https://matplotlib.org/)的花招，用于比较彩色图像和灰度图像。
- en: The conversion to greyscale is done using the equation
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为灰度图像是通过以下公式完成的。
- en: '![](../Images/55253152222c572e69b7f1c72fe5af93.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55253152222c572e69b7f1c72fe5af93.png)'
- en: from this wikipedia [page](https://en.wikipedia.org/wiki/Grayscale). The part
    of the code carrying out the multiplication and summation that changes the shape
    of the image array from (1080, 1920, 3) to (1080, 1920) is commented. You may
    wonder if it was worth showing such a long example for one line of broadcasting
    code. This is exactly the point! Broadcasting is concise and without it the code
    will be much longer and much slower. It is often the case that the magic behind
    an algorithm is few lines of NumPy operations, often including broadcasting.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 来自维基百科的[this page](https://en.wikipedia.org/wiki/Grayscale)。执行乘法和求和的代码部分，将图像数组的形状从（1080，1920，3）更改为（1080，1920）的部分已被注释掉。你可能会想，为了一行广播代码展示如此长的示例是否值得。这正是要点！广播是简洁的，如果没有它，代码会更长且更慢。通常，算法背后的魔法是几行
    NumPy 操作，通常包括广播。
- en: Setting values
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置值
- en: Most NumPy users associate broadcasting with array addition or multiplication.
    However, broadcasting applies equally when using indexing to set values. Below
    you can find a set of examples that we will not comment in detail
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 NumPy 用户将广播与数组加法或乘法相关联。然而，当使用索引设置值时，广播同样适用。下面你可以找到一组示例，我们将不对其详细评论。
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Conclusions
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Broadcasting may seem complex, but it can be easily mastered if a few key principles
    are kept in mind. The most important principle is that the array shapes are aligned
    starting from the right. Missing dimensions are filled with ones, always on the
    left. The two shapes become identical via stretching of dimensions that are equal
    to one. It may be necessary to do some reshaping with `np.newaxis` before two
    (or more!) arrays are broadcastable. Broadcasting is not only used to compute
    a whole array but also to set some of the values of an array. This is the gist
    of it. With some practice NumPy broadcasting can lead to surprisingly concise
    and efficient code. Use it to its full potential!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 广播可能看起来很复杂，但如果记住几个关键原则，它可以很容易掌握。最重要的原则是数组的形状从右开始对齐。缺失的维度用一填充，始终在左侧。通过扩展维度为一的形状，这两个形状变得相同。在两个（或更多！）数组可以进行广播之前，可能需要使用`np.newaxis`进行一些重新形状调整。广播不仅用于计算整个数组，还用于设置数组中的某些值。这就是要点。通过一些练习，NumPy
    的广播可以导致令人惊讶的简洁和高效的代码。充分利用它的潜力！
