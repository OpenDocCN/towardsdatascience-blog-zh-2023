- en: How to Build Popularity-Based Recommenders With Polars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Polars 构建基于人气的推荐系统
- en: 原文：[https://towardsdatascience.com/how-to-build-popularity-based-recommenders-with-polars-cc7920ad3f68](https://towardsdatascience.com/how-to-build-popularity-based-recommenders-with-polars-cc7920ad3f68)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-build-popularity-based-recommenders-with-polars-cc7920ad3f68](https://towardsdatascience.com/how-to-build-popularity-based-recommenders-with-polars-cc7920ad3f68)
- en: '[RECOMMENDATION SYSTEM](https://medium.com/tag/recommendation-system)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[推荐系统](https://medium.com/tag/recommendation-system)'
- en: Basic recommenders that are easy to understand and implement, as well as fast
    to train
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的推荐系统易于理解和实现，且训练速度快
- en: '[](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)[![Dr.
    Robert Kübler](../Images/3b8d8b88f76c0c43d9c305e3885e7ab9.png)](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)
    [Dr. Robert Kübler](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)[![Dr.
    Robert Kübler](../Images/3b8d8b88f76c0c43d9c305e3885e7ab9.png)](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)
    [Dr. Robert Kübler](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)
    ·6 min read·Apr 28, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)
    ·阅读时间6分钟·2023年4月28日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/86cf3808c7ceac75c67a41bd0c28464e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86cf3808c7ceac75c67a41bd0c28464e.png)'
- en: Created by me on [dreamstudio.ai](https://beta.dreamstudio.ai/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由我在 [dreamstudio.ai](https://beta.dreamstudio.ai/) 创建
- en: Recommender systems are algorithms designed to provide user recommendations
    based on their past behavior, preferences, and interactions. Becoming integral
    to various industries, including e-commerce, entertainment, and advertising, recommender
    systems improve user experience, increase customer retention, and drive sales.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统是旨在根据用户的过去行为、偏好和互动提供推荐的算法。它们已成为各种行业（包括电子商务、娱乐和广告）的重要组成部分，提升用户体验、增加客户保留率并推动销售。
- en: 'While various advanced recommender systems exist, today I want to show you
    one of the most straightforward — yet often difficult to beat — recommenders:
    the **popularity-based recommender**. It is an excellent baseline recommender
    that you should always try out in addition to a more advanced model, such as matrix
    factorization.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然存在各种高级推荐系统，但今天我想向你展示其中一种最简单的——但往往难以超越——推荐系统：**基于人气的推荐系统**。它是一个优秀的基线推荐系统，除了更高级的模型（如矩阵分解）外，你应该始终尝试一下。
- en: '[](/introduction-to-embedding-based-recommender-systems-956faceb1919?source=post_page-----cc7920ad3f68--------------------------------)
    [## Introduction to Embedding-Based Recommender Systems'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/introduction-to-embedding-based-recommender-systems-956faceb1919?source=post_page-----cc7920ad3f68--------------------------------)
    [## 基于嵌入的推荐系统简介'
- en: Learn to build a simple matrix factorization recommender in TensorFlow
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何在 TensorFlow 中构建一个简单的矩阵分解推荐系统
- en: towardsdatascience.com](/introduction-to-embedding-based-recommender-systems-956faceb1919?source=post_page-----cc7920ad3f68--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/introduction-to-embedding-based-recommender-systems-956faceb1919?source=post_page-----cc7920ad3f68--------------------------------)
- en: We will create *two* different flavors of popularity-based recommenders using
    [**polars**](https://pola.rs/) in this article. Don’t worry if you have not used
    the fast pandas-alternative polars before; this article is a great place to learn
    it along the way. Let’s start!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本文中使用 [**polars**](https://pola.rs/) 创建*两*种不同风格的基于人气的推荐系统。如果你之前没有使用过快速的
    pandas 替代品 polars，不必担心；这篇文章是学习它的绝佳机会。让我们开始吧！
- en: Initial Thoughts
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初步想法
- en: 'Popularity-based recommenders work by suggesting the most frequently purchased
    products to customers. This vague idea can be turned into at least two concrete
    implementations:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 基于人气的推荐系统通过向客户推荐最常购买的产品来工作。这一模糊的概念可以转化为至少两种具体的实现：
- en: Check which articles are bought most often **across all customers**. Recommend
    these articles to each customer.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查哪些文章在**所有客户中**最常被购买。将这些文章推荐给每位客户。
- en: Check which articles are bought most often **per customer**. Recommend these
    per-customer articles to their corresponding customer.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查哪些文章在**每位客户**中最常被购买。将这些每位客户的文章推荐给对应的客户。
- en: We will now show how to implement these concretely using our own custom-crated
    dataset.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将展示如何使用我们自己创建的数据集具体实现这些。
- en: If you want to follow along with a real-life dataset, the [H&M Personalized
    Fashion Recommendations](https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/overview)
    challenge on Kaggle provides you with an excellent example. Due to copyright reasons,
    I will not use this lovely dataset for this article.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟随一个真实的数据集，Kaggle上的[H&M个性化时尚推荐](https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/overview)挑战为你提供了一个很好的例子。由于版权原因，我不会在这篇文章中使用这个可爱的数据显示集。
- en: The Data
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: 'First, we will create our own dataset. Make sure to install polars if you haven’t
    done so already:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建自己的数据集。如果你还没有安装polars，请确保安装：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, let us create random data consisting of a **(customer_id, article_id)
    pairs** that you should interpret as “The customer with this ID bought the article
    with that ID.”. We will use 1,000,000 customers that can buy 50,000 products.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们创建一个随机数据集，包括**（customer_id, article_id）对**，你应该将其理解为“拥有此ID的客户购买了拥有该ID的商品。”我们将使用1,000,000名可以购买50,000种产品的客户。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/e456b6c7e9473d4584b2d1e03e41147f.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e456b6c7e9473d4584b2d1e03e41147f.png)'
- en: Image by the author.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: This medium-sized dataset has **over 100,000,000 rows (transactions)**, an amount
    you could find in a business context.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个中等大小的数据集有**超过100,000,000行（交易）**，这是你在商业环境中可能会遇到的数量。
- en: The Task
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务
- en: 'We now want to build recommender systems that scan this dataset in order to
    recommend *popular* items in some sense. We will shed light on two variants of
    how to interpret this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想构建推荐系统来扫描这个数据集，以推荐*受欢迎*的项目。我们将阐明两种解释这个问题的变体：
- en: most popular across all customers
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有客户中最受欢迎的产品
- en: most popular per customer
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每位客户最受欢迎的产品
- en: Our recommenders should recommend **ten articles for each customer**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的推荐系统应该为**每位客户推荐十篇文章**。
- en: '***Note:*** *We will* ***not*** *assess the quality of the recommenders here.
    Drop me a message if you are interested in this topic, though, since it’s worth
    having a separate article about this.*'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：*** *我们将* ***不会*** *在这里评估推荐系统的质量。不过，如果你对这个话题感兴趣，可以给我发消息，因为这值得另写一篇文章。*'
- en: Most Popular Across All Customers
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在所有客户中最受欢迎的产品
- en: In this recommender, we don’t even care who bought the articles — all the information
    we need is in the **article_id** column alone.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个推荐系统中，我们甚至不关心谁购买了这些文章——我们所需的所有信息仅在**article_id**列中。
- en: 'High-level, it works like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 高层次地，它的工作原理是这样的：
- en: Load the data.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载数据。
- en: Count how often each article appears in the column **article_id**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算每篇文章在**article_id**列中出现的频率。
- en: Return the ten most frequent products as the recommendation for each customer.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现频率最高的十种产品作为每位客户的推荐。
- en: Familiar Pandas Version
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉的Pandas版本
- en: As a gentle start, let us check out how you could do this **in pandas**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个温和的开始，让我们看看你如何**在pandas中**完成这个任务。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On my machine, this takes about **31 seconds**. This sounds like a little, but
    the dataset still has **only a moderate size**; things get really ugly with larger
    datasets. To be fair, 10 seconds are used for loading the CSV file. Using a better
    format, such as [parquet](https://en.wikipedia.org/wiki/Apache_Parquet), would
    decrease the loading time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的机器上，这大约需要**31秒**。这听起来有点少，但数据集仍然**只是一个中等大小**；对于更大的数据集情况会变得很糟糕。公平地说，10秒是用来加载CSV文件的。使用更好的格式，例如[parquet](https://en.wikipedia.org/wiki/Apache_Parquet)，可以减少加载时间。
- en: '***Note:*** *I used pandas 2.0.1, which is the latest and most optimized version.*'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：*** *我使用的是最新和最优化的版本pandas 2.0.1。*'
- en: Still, to prepare yet a little bit more for the polars version, let us do the
    pandas version using **method chaining**, a technique I grew to love.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了进一步准备polars版本，让我们使用**方法链**，这是一种我逐渐喜爱的技术，来完成pandas版本。
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is lovely since you can read from top to bottom what is happening without
    the need for a lot of intermediate variables that people usually struggle to name
    (*df_raw → df_filtered → df_filtered_copy → … → df_final anyone?*). The run time
    is the same, however.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，因为你可以从上到下阅读发生了什么，无需很多通常很难命名的中间变量（*df_raw → df_filtered → df_filtered_copy
    → … → df_final，怎么样？*）。不过运行时间还是一样。
- en: Faster Polars Version
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更快的 Polars 版本
- en: Let us implement the same logic **in polars** using method chaining as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用方法链在 **polars** 中实现相同的逻辑。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Things look pretty similar, except for the running time: **3 seconds** instead
    of 31, which is impressive!'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了运行时间：**3 秒** 替代 31 秒，这点令人印象深刻外，其他方面看起来相似！
- en: Polars is just SO much faster than pandas.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Polars 真的比 pandas 快得多。
- en: Unarguably, this is one of the main advantages of polars over pandas. Apart
    from that, polars also has a **convenient syntax for creating complex operations**
    that pandas does not have. We will see more of that when creating the other popularity-based
    recommender.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不可否认，这也是 polars 相较于 pandas 的主要优势之一。除此之外，polars 还有一个 **创建复杂操作的便捷语法**，这是 pandas
    所没有的。我们将在创建其他基于受欢迎程度的推荐器时看到更多。
- en: It is also important to note that pandas and polars produce the same output
    as expected.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样重要的是，pandas 和 polars 产生的输出如预期一致。
- en: Most Popular Per Customer
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个客户的最受欢迎产品
- en: In contrast to our first recommender, we want to slice the dataframe per customer
    now and get the most popular products for each customer. This means that we need
    the **customer_id** as well as the **article_id** now.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们第一个推荐器不同，我们现在希望按客户切片数据框，并获取每个客户的最受欢迎的产品。这意味着我们现在需要 **customer_id** 和 **article_id**。
- en: 'We illustrate the logic using a small dataframe consisting of only ten transactions
    from three customers A, B, and C buying four articles 1, 2, 3, and 4\. We want
    to get the **top two articles per customer**. We can achieve this using the following
    steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过一个仅包含三位客户 A、B 和 C 购买四个文章 1、2、3 和 4 的十个交易的小数据框来说明逻辑。我们希望获取 **每个客户的前两篇文章**。我们可以通过以下步骤实现：
- en: '![](../Images/47520d362d304bb8c76cd9228fe17190.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47520d362d304bb8c76cd9228fe17190.png)'
- en: Image by the author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: We start with the original dataframe.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从原始数据框开始。
- en: We then group by **customer_id** and **article_id** and aggregate via a count.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们按 **customer_id** 和 **article_id** 分组，并通过计数进行聚合。
- en: We then aggregate again over the **customer_id** and write the **article_id**s
    in a list, just as in our last recommender. The twist is that we **sort this list
    by the count column**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们再次对 **customer_id** 进行聚合，并将 **article_id** 写入列表中，就像在我们上一个推荐器中一样。不同的是我们 **按照计数列对这个列表进行排序**。
- en: That way, we end up with precisely what we want.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们最终得到的正是我们想要的。
- en: A bought products 1 and 2 most frequently.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A 最常购买的产品是 1 和 2。
- en: B bought products 4 and 2 most frequently. Products 4 and 1 would have been
    a correct solution as well, but internal orderings just happened to flush product
    2 into the recommendation.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: B 最常购买的产品是 4 和 2。产品 4 和 1 也会是正确的解决方案，但内部排序刚好把产品 2 推入了推荐中。
- en: C only bought product 3, so that’s all there is.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C 只购买了产品 3，所以就只有这些了。
- en: Step 3 of this procedure sounds especially difficult, but polars lets us handle
    this conveniently.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的第 3 步听起来特别困难，但 polars 让我们可以方便地处理它。
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**By the way:** This version **runs for about about a minute** on my machine
    already. I did not create a pandas version for this, and I’m definitely scared
    to do so and let it run. If you are brave, give it a try!'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**顺便提一下：** 这个版本在我的机器上 **运行大约一分钟**。我没有为此创建 pandas 版本，而且我绝对害怕这样做并让它运行。如果你勇敢的话，可以试试看！'
- en: A Small Improvement
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小改进
- en: So far, some users might have less than ten recommendations, and some even have
    none. An easy thing to do is pad each customer’s recommendations to ten articles.
    For example,
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一些用户可能收到的推荐少于十个，甚至有些没有。一个简单的做法是将每个客户的推荐补充到十个文章。例如，
- en: using random articles, or
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用随机文章，或者
- en: using the most popular articles across all customers from our first popularity-based
    recommender.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们第一个基于受欢迎程度的推荐器中所有客户的最受欢迎文章。
- en: 'We can implement the second version like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样实现第二个版本：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Conclusion
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Popularity-based recommenders hold a significant position in the realm of recommendation
    systems due to their simplicity, ease of implementation, and effectiveness as
    an initial approach and a difficult-to-beat baseline.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 基于受欢迎程度的推荐系统在推荐系统领域占据了重要地位，因为它们的简单性、易于实现以及作为初始方法和难以超越的基准的有效性。
- en: In this article, we have learned how to transform the simple idea of popularity-based
    recommendations into code using the fabulous polars library.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们学会了如何使用出色的 polars 库将基于流行度的简单推荐思想转化为代码。
- en: The main disadvantage, especially of the personalized popularity-based recommender,
    is that the recommendations are **not inspiring** in any way. People have seen
    all of the recommended things before, meaning they are stuck in an extreme echo
    chamber.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 主要缺点，特别是个性化的基于流行度的推荐系统，是推荐内容**没有启发性**。人们之前都见过推荐的所有内容，这意味着他们陷入了一个极端的回声室。
- en: 'One way to mitigate this problem *to some extent* is by using other approaches,
    such as collaborative filtering or hybrid approaches, such as here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 缓解这一问题的一个方法是使用其他方法，例如协同过滤或混合方法，如下所示：
- en: '[](/a-performant-recommender-system-without-cold-start-problem-69bf2f0f0b9b?source=post_page-----cc7920ad3f68--------------------------------)
    [## A Performant Recommender System Without Cold Start Problem'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-performant-recommender-system-without-cold-start-problem-69bf2f0f0b9b?source=post_page-----cc7920ad3f68--------------------------------)
    [## 无冷启动问题的高效推荐系统'
- en: When collaboration and content-based recommenders merge
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当协作和基于内容的推荐系统融合时
- en: towardsdatascience.com](/a-performant-recommender-system-without-cold-start-problem-69bf2f0f0b9b?source=post_page-----cc7920ad3f68--------------------------------)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/a-performant-recommender-system-without-cold-start-problem-69bf2f0f0b9b?source=post_page-----cc7920ad3f68--------------------------------)
- en: I hope that you learned something new, interesting, and valuable today. Thanks
    for reading!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你今天学到了新的、有趣的和值得的东西。感谢阅读！
- en: '*If you have any questions, write me on* [*LinkedIn*](https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/)*!*'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果你有任何问题，可以通过* [*LinkedIn*](https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/)*联系我！*'
- en: And if you want to dive deeper into the world of algorithms, give my new publication
    **All About Algorithms** a try! I’m still searching for writers!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解算法的世界，可以试试我新的出版物**《算法全解》**！我仍在寻找作者！
- en: '[](https://medium.com/all-about-algorithms?source=post_page-----cc7920ad3f68--------------------------------)
    [## All About Algorithms'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/all-about-algorithms?source=post_page-----cc7920ad3f68--------------------------------)
    [## 《算法全解》'
- en: From intuitive explanations to in-depth analysis, algorithms come to life with
    examples, code, and awesome…
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从直观解释到深入分析，算法通过实例、代码和精彩内容展现生命力……
- en: medium.com](https://medium.com/all-about-algorithms?source=post_page-----cc7920ad3f68--------------------------------)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/all-about-algorithms?source=post_page-----cc7920ad3f68--------------------------------)
