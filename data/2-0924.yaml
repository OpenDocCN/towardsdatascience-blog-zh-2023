- en: 'Fourier-transform for Time-Series: Detrending'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列的傅里叶变换：去趋势
- en: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-detrending-f0f470f4bf14](https://towardsdatascience.com/fourier-transform-for-time-series-detrending-f0f470f4bf14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-detrending-f0f470f4bf14](https://towardsdatascience.com/fourier-transform-for-time-series-detrending-f0f470f4bf14)
- en: Detrending your time-series might be a game-changer
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对你的时间序列进行去趋势处理可能会改变游戏规则
- en: '[](https://mocquin.medium.com/?source=post_page-----f0f470f4bf14--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----f0f470f4bf14--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f0f470f4bf14--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f0f470f4bf14--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----f0f470f4bf14--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/?source=post_page-----f0f470f4bf14--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----f0f470f4bf14--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f0f470f4bf14--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f0f470f4bf14--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----f0f470f4bf14--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f0f470f4bf14--------------------------------)
    ·8 min read·Aug 11, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----f0f470f4bf14--------------------------------)
    ·8分钟阅读·2023年8月11日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b2c3572ce97230dc0947212f27958abf.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2c3572ce97230dc0947212f27958abf.png)'
- en: '**Detrending a signal before computing its Fourier transform is a common practice,
    especially when dealing with time-series.**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**在计算傅里叶变换之前对信号进行去趋势处理是一种常见做法，尤其是在处理时间序列时。**'
- en: In this post, I want to show both mathematically and visually how detrending
    your signal affects its Fourier-transform.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想从数学和视觉上展示去趋势处理如何影响信号的傅里叶变换。
- en: '*All images by author.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图像均由作者提供。*'
- en: 'This post is the fourth of my Fourier-transform for time-series series: I use
    very simple examples and a few mathematical formulas to explain various concepts
    of the Fourier transform. You don’t need to read them in the order below, I’d
    rather recommend going back and forth between each article.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章是我关于时间序列傅里叶变换系列的第四篇：我使用非常简单的示例和少量数学公式来解释傅里叶变换的各种概念。你无需按照下面的顺序阅读，建议在每篇文章之间来回翻阅。
- en: '**Check out the previous posts here:**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**查看之前的帖子：**'
- en: '**Review how the convolution relate to the Fourier transform and how fast it
    is**:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回顾卷积与傅里叶变换的关系及其速度：**'
- en: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----f0f470f4bf14--------------------------------)
    [## Fourier transform for time-series: fast convolution explained with numpy'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----f0f470f4bf14--------------------------------)
    [## 时间序列的傅里叶变换：使用numpy解释快速卷积'
- en: 10000-times faster convolution using Fourier transform
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10000倍速度提升的卷积使用傅里叶变换
- en: towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----f0f470f4bf14--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----f0f470f4bf14--------------------------------)
- en: '**Deepen your understanding of convolution using image examples:**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过图像示例深入理解卷积：**'
- en: '[](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----f0f470f4bf14--------------------------------)
    [## Fourier-Transform for Time Series: About Image Convolution and SciPy'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----f0f470f4bf14--------------------------------)
    [## 时间序列的傅里叶变换：关于图像卷积和SciPy'
- en: Fourier-transform convolution also applies to images
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 傅里叶变换卷积也适用于图像
- en: towardsdatascience.com](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----f0f470f4bf14--------------------------------)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----f0f470f4bf14--------------------------------)
- en: '**Understand how the Fourier-transform can be visualy understood using a vector-visual
    approach:**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解如何通过向量视觉方法直观理解傅里叶变换：**'
- en: '[](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----f0f470f4bf14--------------------------------)
    [## Fourier-transform for time-series : plotting complex numbers'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----f0f470f4bf14--------------------------------)
    [## 傅里叶变换在时间序列中的应用：绘制复数'
- en: Plot the Fourier-transform algorithm to understand it.
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制傅里叶变换算法以理解它。
- en: towardsdatascience.com](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----f0f470f4bf14--------------------------------)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----f0f470f4bf14--------------------------------)
- en: 'In this post, we are going to explore 2 kinds of detrends : we’ll call them
    ‘*constant*’ and ‘*linear*’ detrendings.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本帖中，我们将探讨 2 种去趋势：我们将其称为 ‘*常数*’ 和 ‘*线性*’ 去趋势。
- en: '**The end goal of this post is to make you understand what are constant and
    linear detrending, why we use them, and how they affects the Fourier-transform
    of the signal.**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**本帖的最终目标是让你理解什么是常数和线性去趋势，为什么使用它们，以及它们如何影响信号的傅里叶变换。**'
- en: '**Quick review of the Fourier transform**'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**傅里叶变换快速回顾**'
- en: 'In this post, we’ll use the following definition of the Fourier-transform :
    for an input sequence x[n], for n=0 to N, the k-th coefficient of the Fourier-transform
    is the following complex number:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本帖中，我们将使用以下傅里叶变换定义：对于输入序列 x[n]，从 n=0 到 N，傅里叶变换的第 k 个系数是以下复数：
- en: '![](../Images/bcc91597fbbf257c4fc73f59ea462f4d.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bcc91597fbbf257c4fc73f59ea462f4d.png)'
- en: Fourier transform used in this post.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本帖使用的傅里叶变换。
- en: '**Constant detrending**'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**常数去趋势**'
- en: 'Let’s analyse the input signal. The sequence x[n] can be decomposed as follow:
    instead of considering x as a whole, let’s write it as a sum of 2 signals : a
    ‘constant part’ equal to the mean of the signal, and a ‘variability around the
    mean’ part giving the difference between the actual signal and its mean:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析输入信号。序列 x[n] 可以分解如下：与其将 x 视为整体，不如将其写作 2 个信号的总和：一个是等于信号均值的“恒定部分”，另一个是给出实际信号与其均值之间差异的“均值周围的变异性”部分：
- en: '![](../Images/bd80c49d064899a341170208865e26b6.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd80c49d064899a341170208865e26b6.png)'
- en: 'Decomposing x as a sum of 2 parts : a constant part (mean), and the “rest”,
    i.e. the variability around the mean'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将 x 分解为 2 部分的总和：一个是常数部分（均值），另一个是“剩余部分”，即均值周围的变异性
- en: 'So for all sample n, we have:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于所有样本 n，我们有：
- en: '![](../Images/48f97f5b4dbf55855bbff7148f1ec93f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48f97f5b4dbf55855bbff7148f1ec93f.png)'
- en: 'Each value of x is decomposed as 2 part : the mean, plus the difference between
    that value and the mean.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: x 的每个值被分解为 2 部分：均值，加上该值与均值之间的差异。
- en: 'First, let’s take the Fourier transform of the mean of x :'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们对 x 的均值进行傅里叶变换：
- en: '![](../Images/1746d72a7a37d6aa74fd187ab7f412c8.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1746d72a7a37d6aa74fd187ab7f412c8.png)'
- en: 'Fourier transform of a constant value equal to the mean of x: 0 everywhere
    except for k=0 where it equals the input value.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 常数值等于 x 的均值的傅里叶变换：在所有地方都为 0，除了 k=0 处等于输入值。
- en: 'Which is a simple sequence with value the mean of x at sample k=0, and 0 everywhere
    else. Using the code from the previous post, we can easily understand why the
    following is true:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的序列，在采样 k=0 时其值为 x 的均值，其余地方为 0。使用之前帖子的代码，我们可以轻松理解为什么以下是正确的：
- en: '![](../Images/ca6dbcc5b0be9cbf75f0a1b9f49b5a9a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca6dbcc5b0be9cbf75f0a1b9f49b5a9a.png)'
- en: The sum of the exponentials are 0 except when k=0\. This can be shown graphically
    in the plot below.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 指数的总和为 0，除了 k=0。这可以在下图中图示。
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/0dbe2fc0e07d455f24410e850a1e2e0f.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0dbe2fc0e07d455f24410e850a1e2e0f.png)'
- en: Plotting the sum of all exponents shows why they always sum to 0 (except for
    k=0).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制所有指数的总和可以显示为什么它们总是加起来为 0（除了 k=0）。
- en: 'Now let’s take the Fourier tranform of x as we wrote it, with its 2 parts :'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对 x 进行傅里叶变换，如我们所写的，有其 2 个部分：
- en: '![](../Images/35420cf27b24dbb9615e70e6308f912d.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/35420cf27b24dbb9615e70e6308f912d.png)'
- en: 'Fourier-transform of decomposed x, which results in the sum of 2 Fourier transforms:
    the FT of the “variability” part, and a coefficient equal to the mean for k=0.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对分解后的 x 进行傅里叶变换，得到 2 个傅里叶变换的总和：一个是“变异性”部分的傅里叶变换，另一个是 k=0 时等于均值的系数。
- en: In other words, the Fourier transform of x is the sum of the Fourier transform
    of its variability around its mean, plus a sequence that is 0 everywhere except
    for k=0 where its equals the mean of x.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，x 的傅里叶变换是其均值周围的傅里叶变换的总和，加上一个在所有地方都为 0 但在 k=0 时等于 x 均值的序列。
- en: '**And that’s what constant detrending is : it just means to remove the mean**
    of the signal before taking its Fourier-transform. In terms of Fourier coefficients,
    it corresponds to setting 0 to the k=0 coefficient.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**这就是常数去趋势的含义：即在进行傅里叶变换之前去除信号的均值**。在傅里叶系数方面，这相当于将k=0的系数设置为0。'
- en: 'Another way to see this is the following: it can be shown easily that the coefficient
    for k=0 is always equal to the mean of the signal:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种理解方式如下：可以很容易地证明，当k=0时的系数总是等于信号的均值：
- en: '![](../Images/1ede9aa273a08a029e1d84e6525369bf.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ede9aa273a08a029e1d84e6525369bf.png)'
- en: Proof that the 0-th coeffiicient is equal to the mean of x.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 证明0-th系数等于x的均值。
- en: '**Linear detrending**'
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**线性去趋势**'
- en: 'The approach is the same as before: write the input signal a sum of 2 parts:
    a “linear” part, and the rest of variability around this linear part:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 方法与之前相同：将输入信号写成2部分的和：一个“线性”部分，以及围绕该线性部分的其他变异：
- en: '![](../Images/e47dfa321d246c09cd818bf047c20bec.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e47dfa321d246c09cd818bf047c20bec.png)'
- en: 'Decompose x as a sum of 2 parts: a “linear part”, and the “rest”.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将x分解为2部分：一个“线性部分”和“其余部分”。
- en: 'where the linear part is typically computed from a least-square fit. Using
    indexes we can write the linear part as :'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 其中线性部分通常是通过最小二乘拟合计算出来的。使用索引，我们可以将线性部分写为：
- en: '![](../Images/9ef7c4e1669eaa9d99fd6ecfcfd17bf8.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ef7c4e1669eaa9d99fd6ecfcfd17bf8.png)'
- en: Expression of the linear part.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 线性部分的表达。
- en: with b being the mean of the signal.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其中b是信号的均值。
- en: 'Now that we have written the decomposition of x, let’s take its Fourier-transform
    :'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经写出了x的分解，接下来进行傅里叶变换：
- en: '![](../Images/cc48534c7cd8aecc81675f32a9b743ec.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc48534c7cd8aecc81675f32a9b743ec.png)'
- en: Decomposing the Fourier transform of x as the sum of 2 Fourier transforms.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将x的傅里叶变换分解为2个傅里叶变换的和。
- en: 'with the Fourier-transform of the linear part being, given the linearity property
    of the Fourier-transform:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 线性部分的傅里叶变换，由于傅里叶变换的线性特性：
- en: '![](../Images/196b75fd9f42654d482255fab2112305.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/196b75fd9f42654d482255fab2112305.png)'
- en: Decomposing the Fourier-transform of the linear part.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 线性部分的傅里叶变换分解。
- en: '**So linear detrending consists in removing the linear part of x** before taking
    its Fourier-transform: it removes the term aFT(n)+b from the result, where a is
    a constant factor (corresponding to the slope of the linear fit), FT(n) is the
    Fourier transform of the linear sequence [0, 1, …], and b is the mean of the signal
    (hence the first Fourier coefficient will be 0, as in constant detrending).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**因此，线性去趋势的过程就是在进行傅里叶变换之前去除x的线性部分**：这会从结果中去除项aFT(n)+b，其中a是一个常数因子（对应于线性拟合的斜率），FT(n)是线性序列[0,
    1, …]的傅里叶变换，而b是信号的均值（因此第一个傅里叶系数将为0，就像常数去趋势一样）。'
- en: '**Detrending in python**'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**在python中进行去趋势**'
- en: Let’s see how we can simply detrend a signal and take its Fourier transform
    in python. It is pretty straightforward using numpy and scipy.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在python中简单地去趋势信号并进行傅里叶变换。使用numpy和scipy来实现非常直接。
- en: Scipy proposes a **detrend** function in its **signal** package, with **a type**
    argument to specify if we want to constant-detrend or linear-detrend our signal.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Scipy在其**signal**包中提供了一个**detrend**函数，并且有一个**type**参数来指定是否要对信号进行常数去趋势或线性去趋势。
- en: In the example below, we create a signal of length 20 samples, that contains
    a linear part with leading coefficient 2, a bit of noise, an offset of 4, and
    a sinusoidal part.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们创建了一个长度为20样本的信号，其中包含一个主系数为2的线性部分、一点噪声、一个4的偏移量和一个正弦部分。
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/052720f5716ed5d2e10340b7fa8a53d0.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/052720f5716ed5d2e10340b7fa8a53d0.png)'
- en: 'Left: input signal, constant detrended and linear detrended. Right: Module
    of their Fourier-transforms.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧：输入信号、常数去趋势和线性去趋势。右侧：它们的傅里叶变换的幅度。
- en: '**Let’s review the plots.**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们回顾这些图表。**'
- en: '**On the left we have the raw input signal**, as well as its constant-detrended
    and linear-detrended versions.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**左侧是原始输入信号**，以及它的常数去趋势和线性去趋势版本。'
- en: Constant detreding effectively removes the mean of the signal to center it around
    0\. Linear detrending not only removes the mean of the signal, but also its linear
    trend (aka “straight slope”). Visually, it is easier to spot the sinusoidal part
    on the linear-detrended signal than on the raw signal.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 常数去趋势有效地去除了信号的均值，使其中心围绕0。线性去趋势不仅去除信号的均值，还去除其线性趋势（即“直线斜率”）。在视觉上，在线性去趋势信号上比在原始信号上更容易识别出正弦部分。
- en: '**On the right are the modules of the Fourier-transform of each signal**: If
    no detrend is applied, we get the blue module. Removing the mean using constant
    detrending effectively set the 0-th coefficient to 0, which most of the time make
    the plot easier to analyze. But the best part comes from linear-detrending: as
    you can see, the output Fourier coefficients shows well the sinus frequency in
    the ouput spectrum.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**右侧是每个信号的傅里叶变换的模**：如果没有进行去趋势处理，我们会得到蓝色的模。通过常量去趋势处理去除均值实际上将 0 阶系数设为 0，这通常使得图形更容易分析。但最好的部分来自线性去趋势处理：正如你所看到的，输出的傅里叶系数很好地显示了输出谱中的正弦频率。'
- en: '**So imagine your are analyzing a time series and looking for seasonal patterns
    using the Fourier spectrum: it is way easier if your signal has been linear-detrended.**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**所以，假设你正在分析时间序列并使用傅里叶谱查找季节性模式：如果你的信号已经进行了线性去趋势处理，这将更容易。**'
- en: To go even further, **the main advantage of linear-detrending is that it reduces
    *spectral-leakage* a lot**. We’ll see in detail in another post what is spectral
    leakage and why we want to get rid of it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，**线性去趋势的主要优点是它大大减少了*谱泄漏*。** 我们将在另一篇文章中详细讨论什么是谱泄漏以及为什么我们要去除它。
- en: About the Fourier-transform of a linear signal
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于线性信号的傅里叶变换
- en: 'We can easily plot the Fourier-transform of a linear signal Kn where K is the
    slope, for different values of K:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地绘制线性信号 Kn 的傅里叶变换，其中 K 是斜率，针对不同的 K 值：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/4c4067d2bdf994fc012683eed24c75c8.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c4067d2bdf994fc012683eed24c75c8.png)'
- en: 'Fourier coefficients of a linear signal K*n. First line: for K=-5\. Second
    line: for K=2\. Third line: for K=5'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 线性信号的傅里叶系数 K*n。第一行：K=-5。第二行：K=2。第三行：K=5。
- en: As you can see, for a given value of k, the Fourier-coefficients, represented
    by the red arrow, are always aligned, and equal up to a scale. So the removed
    part of the output spectrum is always that of the Fourier transform of the sequence
    [0, 1, …N], with a scaling factor given by the slope of the linear fit.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，对于给定的 k 值，傅里叶系数（由红色箭头表示）总是对齐的，并且相等，只是尺度不同。因此，输出谱中去除的部分始终是序列 [0, 1, …N]
    的傅里叶变换，其缩放因子由线性拟合的斜率给出。
- en: '**Wrapup**'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'In this post, we saw what constant and linear detrending are: it simply consists
    of removing the mean or the linear fit of the input signal, respectively. This
    preprocessing step before computing the Fourier-transform helps make the output
    spectrum easier to interpret.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们了解了常量去趋势和线性去趋势的概念：它们分别是去除输入信号的均值或线性拟合。这一步骤在计算傅里叶变换之前有助于使输出谱更容易解释。
- en: '**Removing the mean of the signal sets the 0-th coefficient to 0**. The resulting
    plot is easier to inspect since, most of the time, the mean can be pretty big
    compared to the rest of the spectrum. So, the scale of the y-axis is easier to
    set if we remove that coefficient.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**去除信号的均值将 0 阶系数设为 0**。结果图形更易于检查，因为大多数情况下，均值相对于谱的其他部分可能非常大。因此，如果去除该系数，y 轴的尺度更容易设置。'
- en: '**Removing the linear part, in addition to removing the mean, also removes
    the general trend in the signal**, which is usually the dominating part of the
    raw signal and can hide the other components/seasonal behaviors that you’re really
    interested in.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**去除线性部分，除了去除均值外，还去除了信号中的整体趋势**，这通常是原始信号中主导的部分，并且可能掩盖了你真正感兴趣的其他组件/季节性行为。'
- en: '**If you liked this post and want to read more, please subscribe :) !**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你喜欢这篇文章并想阅读更多内容，请订阅 :) !**'
- en: '[](https://mocquin.medium.com/subscribe?source=post_page-----f0f470f4bf14--------------------------------)
    [## Get an email whenever I publish !'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 每当我发布时获取电子邮件！](https://mocquin.medium.com/subscribe?source=post_page-----f0f470f4bf14--------------------------------)'
- en: Get an email whenever I publish ! New publication will include data transformation,
    advanced plotting and simulation…
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当我发布时获取电子邮件！新的出版物将包括数据转换、先进的绘图和模拟……
- en: mocquin.medium.com](https://mocquin.medium.com/subscribe?source=post_page-----f0f470f4bf14--------------------------------)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[mocquin.medium.com](https://mocquin.medium.com/subscribe?source=post_page-----f0f470f4bf14--------------------------------)'
- en: '**And make sure to check my other posts not Fourier-transform related:**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**确保查看我其他与傅里叶变换无关的文章：**'
- en: '**Finite difference method with numpy:**'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 numpy 的有限差分法：**'
- en: '[](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----f0f470f4bf14--------------------------------)
    [## 300-times faster resolution of Finite-Difference Method using numpy'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----f0f470f4bf14--------------------------------)
    [## 使用 numpy 300 倍更快的有限差分法解析度'
- en: Finite-difference method is a powerfull technique to solve complex problems,
    and numpy makes it fast !
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有限差分法是一种强大的技术来解决复杂问题，而 numpy 使其更快！
- en: towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----f0f470f4bf14--------------------------------)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----f0f470f4bf14--------------------------------)
- en: '**Comparison between PCA, ICA and LDA algorithms:**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PCA、ICA 和 LDA 算法的比较：**'
- en: '[](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----f0f470f4bf14--------------------------------)
    [## PCA/LDA/ICA : a components analysis algorithms comparison'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----f0f470f4bf14--------------------------------)
    [## PCA/LDA/ICA：组件分析算法比较'
- en: Review the concepts and differences between these famous algorithms.
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回顾这些著名算法的概念和差异。
- en: towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----f0f470f4bf14--------------------------------)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----f0f470f4bf14--------------------------------)
- en: '**Compare PCA-whitening and ZCA-withening:**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**比较 PCA 白化和 ZCA 白化：**'
- en: '[](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----f0f470f4bf14--------------------------------)
    [## PCA-whitening vs ZCA-whitening : a numpy 2d visual'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----f0f470f4bf14--------------------------------)
    [## PCA 白化 vs ZCA 白化：一个 numpy 2d 可视化'
- en: The process of whitening data consists in a transformation such that the transformed
    data has identity matrix as…
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据白化的过程包括一种变换，使得变换后的数据具有单位矩阵作为…
- en: towardsdatascience.com](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----f0f470f4bf14--------------------------------)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----f0f470f4bf14--------------------------------)
