- en: Introduction to asyncio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: asyncio 介绍
- en: 原文：[https://towardsdatascience.com/introduction-to-asyncio-57a5a1290ce0](https://towardsdatascience.com/introduction-to-asyncio-57a5a1290ce0)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/introduction-to-asyncio-57a5a1290ce0](https://towardsdatascience.com/introduction-to-asyncio-57a5a1290ce0)
- en: Managing I/O bound concurrency with Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用 Python 管理 I/O 绑定的并发
- en: '[](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----57a5a1290ce0--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)
    ·6 min read·Mar 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----57a5a1290ce0--------------------------------)
    ·阅读时间6分钟·2023年3月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Concurrency and parallelism denote a program’s or computer’s capability to run
    multiple operations in parallel. One commonly distinguishes multi-processing (parallelism)
    and multi-threading (concurrency)— with the former describing running multiple
    processes, whereas the second denotes spawning multiple threads within the same
    process. In Python, due to the [Global Interpreter Lock](https://realpython.com/python-gil/)
    (GIL), only one thread can be executed at once, causing any multi-threaded application
    to be single core effectively. Still, e.g. for I/O bound programs (programs, in
    which more time is spent waiting for inputs — i.e. this is the bottleneck and
    not compute), also in Python multi-threading makes sense. In this post we will
    introduce [asyncio](https://docs.python.org/3/library/asyncio.html), which is
    an elegant and easy way of doing so.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 并发和并行指的是程序或计算机同时运行多个操作的能力。通常，我们区分多处理（并行）和多线程（并发）——前者描述运行多个进程，而后者指的是在同一个进程内生成多个线程。在
    Python 中，由于[全局解释器锁](https://realpython.com/python-gil/)（GIL），一次只能执行一个线程，导致任何多线程应用实际上都是单核的。不过，例如对于
    I/O 绑定的程序（即更多时间花在等待输入上——这才是瓶颈而非计算），在 Python 中使用多线程仍然是有意义的。在这篇文章中，我们将介绍[asyncio](https://docs.python.org/3/library/asyncio.html)，这是一种优雅且简便的方法来实现这一点。
- en: '![](../Images/56706dacea79f62fb82537889418d6a7.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56706dacea79f62fb82537889418d6a7.png)'
- en: Photo by [Gabriel Gusmao](https://unsplash.com/@gcsgpp?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/pMmw3ynuXHw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Gabriel Gusmao](https://unsplash.com/@gcsgpp?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    在[Unsplash](https://unsplash.com/photos/pMmw3ynuXHw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)拍摄的照片'
- en: Why asyncio?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 asyncio？
- en: We will designate a future post for the differences between multi-processing
    and multi-threading, and how asyncio plays into this. Still we want to motivate
    its usage here. As hinted above, multi-threading is particularly useful for I/O
    bound, i.e. non-CPU bound, applications. And asyncio is one way of doing so, which
    is preferred for some use cases by many developers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将指定一篇未来的文章来讨论多处理和多线程的区别，以及 asyncio 在其中的作用。不过我们这里想要激励大家使用它。如上所述，多线程特别适用于 I/O
    绑定的，即非 CPU 绑定的应用。而 asyncio 是实现这一点的一种方式，许多开发者在某些用例中更倾向于使用它。
- en: asyncio excels for I/O bound programs, for which we want to write easy, clearly
    structured, and error-resistant code. asyncio actually uses only a single thread,
    and leaves it up to the user when the currently executed piece of code will “yield”
    its execution for waiting on external inputs and allowing a different piece of
    code to be executed. This often makes the code easier to read, while also giving
    the user more control of what is executed when — while simultaneously reducing
    the risk of deadlocks and co.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: asyncio 对于 I/O 绑定的程序非常出色，我们希望编写易于理解、结构清晰、抗错误的代码。asyncio 实际上只使用一个线程，并且由用户决定当前执行的代码块何时“让出”执行以等待外部输入，并允许执行不同的代码块。这通常使代码更易于阅读，同时也给予用户更多控制，减少死锁等风险。
- en: Motivating Example
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激励示例
- en: 'Let’s begin by an introductory example. Consider the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个入门示例开始。考虑以下代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In it, we call `sleepy_function()` three times, which simply prints two things
    and otherwise sleeps for a second. In total, this program takes 3 seconds to execute.
    But of course it is pretty much a waste to have a CPU wait for 1 second without
    doing any other work. Thus it’s natural to parallelise this — which is exactly
    the definition of an I/O bound program.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，我们调用了三次 `sleepy_function()`，它简单地打印两件事，然后睡眠一秒。总的来说，这个程序需要 3 秒钟来执行。但当然，让 CPU
    等待 1 秒而不做其他工作是相当浪费的。因此，进行并行化是很自然的 —— 这正是 I/O 绑定程序的定义。
- en: 'With asyncio, the following code can be parallelised like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 asyncio，以下代码可以并行化如下：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note asyncio is only available from Python versions 3.4 upwards, and for these
    is included in the standard library.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，asyncio 仅在 Python 3.4 及以上版本中可用，并且在这些版本中包含在标准库中。
- en: In the following, we will now have a closer look at the used syntax and asyncio
    in general.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更详细地查看所使用的语法和 asyncio 一般情况。
- en: Using asyncio
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 asyncio
- en: Core concepts of asyncio are coroutines and tasks. Coroutines are basically
    functions, which can yield execution to the controlling asyncio thread (while
    e.g. waiting for inputs), without losing their state (a bit similar to [generator
    expressions](https://medium.com/@hrmnmichaels/generators-and-generator-expressions-in-python-a8d2e700945e)).
    Thus, in this form of concurrency the user is in full control of when context
    switches between threads (coroutines / tasks in this setting) happen, as opposed
    to classical multi-threading, where this is determined by the operating system.
    Due to this, and the fact that asyncio makes use of only a single thread — asyncio
    code is much less error prone and we (normally) don’t need to use any kind of
    locking, such as locks or mutexes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: asyncio 的核心概念是协程和任务。协程基本上是函数，它们可以将执行权交给控制 asyncio 线程（例如，等待输入），而不会丢失其状态（有点类似于
    [生成器表达式](https://medium.com/@hrmnmichaels/generators-and-generator-expressions-in-python-a8d2e700945e)）。因此，在这种形式的并发中，用户完全控制线程之间（协程/任务）的上下文切换发生的时机，而不是像经典的多线程那样由操作系统决定。由于这一点，以及
    asyncio 只使用一个线程 —— asyncio 代码更不易出错，并且我们（通常）不需要使用任何锁定机制，如锁或互斥量。
- en: 'A coroutine is defined using the keyword async:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 协程使用关键字 async 定义：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It is now not enough to just call this as usual via `sample_coroutine()` —
    this won’t work. Instead, we have to order asyncio to execute this. We can do
    so via:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在仅仅像平常一样调用 `sample_coroutine()` 不够 —— 这将不起作用。相反，我们必须指示 asyncio 执行此操作。我们可以通过以下方式实现：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next important keyword is `await`. This signals asyncio that we want to
    wait for some event, and that it can proceed executing another part of the code.
    Anything we can `await` for is called `Awaitable`, and coroutines and tasks are
    two examples:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要的关键字是 `await`。这向 asyncio 发出信号，表示我们想要等待某个事件，并且它可以继续执行代码的另一部分。我们可以 `await`
    的任何东西都被称为 `Awaitable`，协程和任务就是两个例子。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In above example, we first wait for 1s using `asyncio.sleep` — and then for
    `sample_coroutine_2`. Note the execution time of this program is still 1s, and
    not less somehow — but shortening this is not the point of this simple example.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们首先使用 `asyncio.sleep` 等待 1 秒 —— 然后等待 `sample_coroutine_2`。注意这个程序的执行时间仍然是
    1 秒，并没有更少 —— 但缩短执行时间不是这个简单示例的重点。
- en: Tasks
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务
- en: 'If however, we now want to parallelise the execution of different code blocks,
    one thing we can use is tasks. Via `asyncio.create_task` we can create a task
    from a coroutine, and then execute this via `await`. This way, we can run multiple
    coroutines in parallel:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在想要并行执行不同的代码块，我们可以使用任务。通过 `asyncio.create_task` 我们可以从协程创建一个任务，然后通过 `await`
    执行它。这样，我们可以并行运行多个协程：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: gather
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: gather
- en: 'However, I usually find it more convenient and intuitive to use the following
    syntax involving `asyncio.gather`, which can take arbitrary many `Awaitables`
    as input:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我通常发现使用以下涉及`asyncio.gather`的语法更加方便和直观，它可以接受任意多个`Awaitables`作为输入：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can shorten above code using the [asterix (*)](/unpacking-operators-in-python-306ae44cd480)
    operator, which unpacks the given Iterable into single arguments (and thus closing
    the gap to the introductory example):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用[星号（*）](/unpacking-operators-in-python-306ae44cd480)运算符来缩短上述代码，该运算符将给定的可迭代对象解包为单个参数（从而缩小了与介绍示例之间的差距）：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Queue
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Queue
- en: Let’s end this post by introducing `asyncio.Queue`, a queue which is safe to
    be used in “multi-threaded” asyncio applications, and a helpful tool for many
    real-world use-cases. We use it for a slightly more complex example, in hopes
    of capping off this post by a more realistic “real-world” example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过介绍`asyncio.Queue`来结束这篇文章，它是一个适用于“多线程” asyncio 应用程序的安全队列，是许多实际应用场景中的有用工具。我们将用它来进行一个稍微复杂一点的示例，希望通过一个更真实的“实际”示例来结束这篇文章。
- en: Our example consists of one producer thread and N consumer threads. The producer
    tries to guess [ISBN numbers](https://en.wikipedia.org/wiki/ISBN), and puts them
    on the queue. The consumers remove these from the queue, and do a [GET request](https://www.w3schools.com/tags/ref_httpmethods.asp)
    to a public endpoint returning information about books with the given ISBN. If
    the consumer guesses a correct ISBN, we print the returned book information.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例由一个生产者线程和N个消费者线程组成。生产者尝试猜测[ISBN号码](https://en.wikipedia.org/wiki/ISBN)，并将其放入队列中。消费者从队列中移除这些号码，并对返回关于该ISBN书籍信息的公共端点发起[GET请求](https://www.w3schools.com/tags/ref_httpmethods.asp)。如果消费者猜对了ISBN，我们会打印返回的书籍信息。
- en: 'To execute the request in async mode, we use [aiohttp](https://docs.aiohttp.org/en/stable/).
    Webrequests in general are a common topic and use-case for asyncio: often, a webserver
    will concurrently run different requests, render / query different things, and
    then return the resulting webpage. Since this is not CPU bound, but most of the
    time (probably) is spent on waiting for the request results, asyncio is a good
    fit here.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以异步模式执行请求，我们使用[aiohttp](https://docs.aiohttp.org/en/stable/)。Web请求通常是asyncio的常见主题和用例：通常，一个网络服务器将并发运行不同的请求，渲染/查询不同的内容，然后返回结果网页。由于这不是CPU密集型的，大多数时间（可能）都花在等待请求结果上，因此asyncio非常适合这里。
- en: 'Let’s look at the code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Apart from what was said above, it is noteworthy to call out how to use the
    async queue. As we can see, we place items on the queue via `put_nowait()`. The
    `_nowait` suffix simply means don’t wait when the queue is full — which does not
    concern us here, as we don’t put a limit on the queue size.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述内容外，值得指出的是如何使用异步队列。正如我们所见，我们通过`put_nowait()`将项目放入队列。`_nowait`后缀仅意味着当队列已满时不等待——这对我们来说不重要，因为我们没有对队列大小设限。
- en: Items are popped from the queue via `get()` — but need to be marked complete
    by a corresponding `tasks_done()`!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 项目通过`get()`从队列中弹出——但需要通过相应的`tasks_done()`来标记完成！
- en: Note I tuned the number of consumers and the sleep time between generating ISBNs,
    s.t. on my laptop the queue size stays relatively constant.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我调整了消费者的数量和生成ISBN之间的休眠时间，使得在我的笔记本电脑上队列大小保持相对恒定。
- en: '**This brings us to the end of this tutorial about asyncio. I hope this was
    an interesting read, thanks for stopping by!**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**这标志着我们对asyncio教程的结束。希望这次阅读对你有趣，谢谢你的光临！**'
- en: 'PS: let me know if you by accident discovered any cool reads using the last
    sample program!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: PS：如果你偶然发现了使用上一个示例程序的任何有趣阅读，请告诉我！
