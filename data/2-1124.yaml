- en: How to Build Waterfall Charts with Plotly Graph Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Plotly 图形对象构建瀑布图
- en: 原文：[https://towardsdatascience.com/how-to-build-waterfall-charts-with-plotly-graph-objects-a8354543c42e](https://towardsdatascience.com/how-to-build-waterfall-charts-with-plotly-graph-objects-a8354543c42e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-build-waterfall-charts-with-plotly-graph-objects-a8354543c42e](https://towardsdatascience.com/how-to-build-waterfall-charts-with-plotly-graph-objects-a8354543c42e)
- en: Plotly Express doesn’t implement waterfall charts but we can create a helper
    function that leverages Plotly Graph Objects instead
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Plotly Express 不支持瀑布图，但我们可以创建一个利用 Plotly 图形对象的辅助函数
- en: '[](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)
    ·8 min read·Sep 14, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)
    ·阅读时间 8 分钟·2023年9月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7e1bc52e691c1d6e2bec6531912b3380.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e1bc52e691c1d6e2bec6531912b3380.png)'
- en: Image by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Plotly gives you two ways of drawing charts: Graph Objects and Plotly Express.
    The first is a set of low-level functions that provide maximum flexibility for
    creating charts, while Plotly Express gives us a set of easy-to-use methods that
    implement the most commonly used charts.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 提供了两种绘制图表的方法：图形对象和 Plotly Express。前者是一组低级函数，为创建图表提供最大的灵活性，而 Plotly Express
    则提供了一组易于使用的方法，来实现最常用的图表。
- en: Plotly Express functions are essentially wrappers around Plotly Graph Objects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express 函数本质上是对 Plotly 图形对象的封装。
- en: But there is no Waterfall Chart method in Plotly Express, so we are going to
    present a waterfall chart function that is simple to use for what is probably
    the most common use case and also has the flexibility to address more complex
    usage.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Plotly Express 中没有瀑布图方法，因此我们将介绍一个简单易用的瀑布图函数，它适用于最常见的用例，并且具有应对更复杂用法的灵活性。
- en: Waterfall charts
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瀑布图
- en: Waterfall charts are a bit like bar charts that have been split over a number
    of columns. They are often used to show the increase and decrease of a value over
    time. For example, take the following data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布图有点像被分成多列的条形图。它们通常用于显示一个值随时间的增加和减少。例如，考虑以下数据。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The labels represent amounts of cash in different categories that have either
    been received or spent and the data are the actual amounts (in dollars, hundreds
    of dollars, thousands… whatever).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 标签表示不同类别中已接收或已支出的现金金额，数据则是实际金额（以美元、百元、千元…等为单位）。
- en: We can usefully represent this data as a waterfall chart where the first column
    is the starting point, the last column is the endpoint and the columns in between
    show the cash flow that resulted in the final sum.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些数据有效地表示为瀑布图，其中第一列是起点，最后一列是终点，中间的列展示了导致最终结果的现金流。
- en: '![](../Images/81a6702a8bf88267e2a53847b3ffeaa8.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/81a6702a8bf88267e2a53847b3ffeaa8.png)'
- en: Image by author
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Typically, a waterfall chart distinguishes positive and negative amounts by
    colour — in this case, green for positive and red for negative. The final column
    is given a third colour as this represents the final result rather than a positive
    or negative change.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，瀑布图通过颜色区分正负金额——在本例中，正数为绿色，负数为红色。最终一列使用第三种颜色，因为这代表的是最终结果，而不是正变或负变。
- en: This is a typical use case although more complex charts are possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的用例，尽管更复杂的图表也是可能的。
- en: In her book *Storytelling with Data*[1], Cole Nussbaumer Knaflic (CNK) regards
    the Waterfall Chart as one of her 12 essential charts and gives an example of
    how it can be used to describe changes in employment over time. Here is my version
    of her chart.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在她的书《*数据讲故事*》[1]中，Cole Nussbaumer Knaflic (CNK) 将瀑布图视为她的12个必备图表之一，并给出了如何用它描述随时间变化的就业情况的示例。这是我对她图表的版本。
- en: '![](../Images/7136b6890eebf61a22016fa80dec42b6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7136b6890eebf61a22016fa80dec42b6.png)'
- en: Image by author
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: You can see that we begin with a headcount of 100 and this is increased and
    decreased for various reasons until we end up with a final headcount of 116.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我们从100开始，这个数字因各种原因增加和减少，直到最终人数为116。
- en: CNK prefers a single colour for all of the columns and, strictly speaking, the
    colours in the previous chart are indeed redundant as it is clear from the labels
    and the direction of the column (up or down) whether the change is positive or
    negative.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CNK偏好所有列使用单一颜色，严格来说，前面图表中的颜色确实是多余的，因为从标签和列的方向（向上或向下）可以清楚地看出变化是正向还是负向。
- en: I understand CNK’s point of view, the chart rendered in her style probably looks
    better than the colourful one, but I also see that, particularly with a more complex
    chart, the colours could be helpful. Here’s a variation on the headcount chart
    where the positive and negative changes are mixed and you might agree that the
    red/green version is a little clearer (if, perhaps, not as aesthetically pleasing).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解CNK的观点，用她的风格呈现的图表可能比多彩的图表更好看，但我也看到，尤其是在更复杂的图表中，颜色可能会很有帮助。这是一个人数图表的变体，其中正负变化混合在一起，你可能会同意红绿版本稍微更清晰（如果，也许，不如多彩版本那么美观）。
- en: '![](../Images/ba4d606d37f63eaf4557fd6fa385f514.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba4d606d37f63eaf4557fd6fa385f514.png)'
- en: Image by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: '![](../Images/cfe2e84b4ddbc4befc86d09ce73a4a84.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cfe2e84b4ddbc4befc86d09ce73a4a84.png)'
- en: Image by author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: The solution that we shall develop will default to the colourful version but
    will also let you change the colour scheme if you prefer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发的解决方案默认为多彩版本，但如果你愿意，也可以更改颜色方案。
- en: Using the function
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用函数
- en: 'I’ve implemented the waterfall function in a separate file — `plotlyhelper.py`—
    so that it can be used as a library function. After importing the library, simple
    usage is like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一个单独的文件`plotlyhelper.py`中实现了瀑布图功能，以便可以作为库函数使用。导入库后，简单用法如下：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can use the function in any context where a Plotly chart can be rendered,
    for example, in a Flask application, a Jupyter Notebook, or a Streamlit app. We’ll
    look at the implementation later but here is how to use it in a Streamlit app.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在任何可以渲染Plotly图表的环境中使用这个函数，例如，在Flask应用程序、Jupyter Notebook或Streamlit应用程序中。我们稍后会查看实现，但这是在Streamlit应用程序中使用它的方法。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Which will give you two versions of the ‘headcount’ chart in two columns.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你两个“人数”图表版本，分为两列。
- en: '![](../Images/45393a19fee2db3832ad4badee45801f.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/45393a19fee2db3832ad4badee45801f.png)'
- en: Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: The obligatory parameters are the labels and the data, and in the examples above,
    we also specify a title (this defaults to an empty string if you don’t set it).
    Using these parameters we will get the default — colourful — version of the chart.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 必须的参数是标签和数据，在上述示例中，我们还指定了一个标题（如果不设置，默认为空字符串）。使用这些参数，我们将得到默认的——多彩——版本的图表。
- en: Changing the colour scheme
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改颜色方案
- en: In the second example, we also set the parameter `color` which defines the colour
    for all of the bars in the chart. This can be any value that is accepted by Plotly
    as a colour.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，我们还设置了`color`参数，它定义了图表中所有条形的颜色。这可以是Plotly接受的任何颜色值。
- en: We can also change the individual bar colours using the parameters `bicolor,
    dcolor, tcolor,` and `ccolor` which define the colours for an incrementing bar,
    a decrementing bar, the final bar and the colour of the connecting line between
    the bars. These default to “Green”, “Red”, “Blue”, and “Dark Grey”, respectively.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用参数`bicolor, dcolor, tcolor,` 和 `ccolor`来改变每个条形的颜色，这些参数分别定义了递增条形、递减条形、最终条形和条形之间连接线的颜色。它们的默认颜色分别为“绿色”、“红色”、“蓝色”和“深灰色”。
- en: If you set the `color` parameter this overrides any other colour that you may
    have set.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你设置了`color`参数，它将覆盖你可能设置的任何其他颜色。
- en: Here’s an example of how to set the individual colours.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何设置单个颜色的示例。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Which draws this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制出这个。
- en: '![](../Images/b300de157c96670f56188bafa64bfef5.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b300de157c96670f56188bafa64bfef5.png)'
- en: Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Maybe we could have competition for the most garish colour scheme.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们可以举办最炫目颜色方案的比赛。
- en: There are a couple of other parameters that we also can explore.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以探索其他几个参数。
- en: Annotations
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: The labels on the individual bars default to the data but can be customised
    with the `annotation` parameter. This is an array of labels that can be strings
    or numeric values and will be displayed on the bars. Here, for example, only the
    first and last bars are labelled.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 单个条形图上的标签默认为数据，但可以使用 `annotation` 参数进行自定义。这个数组可以是字符串或数字值，将显示在条形图上。例如，这里只有第一个和最后一个条形图被标记。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/d6c7d4b3d9d14607ff162ebc033b9968.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6c7d4b3d9d14607ff162ebc033b9968.png)'
- en: Image by author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: If no labels are required then `annotation` can be set to an empty list.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要标签，可以将 `annotation` 设置为空列表。
- en: Multiple time periods
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个时间段
- en: Sometimes we want to represent a series of time periods with intermediate totals.
    We can do this by specifying the type of each bar. In the default chart, all the
    bars except the last one are ‘relative’ meaning that they will be displayed as
    positive or negative values relative to the current running total. The final bar
    is of the type ‘total’ which means that it will show the current value of the
    running total.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们想用中间总计表示一系列时间段。我们可以通过指定每个条形图的类型来实现这一点。在默认图表中，除了最后一个条形图之外，所有条形图都是“相对”的，这意味着它们会相对于当前的累计总值显示为正值或负值。最后一个条形图是“总计”类型，这意味着它会显示当前的累计总值。
- en: To represent multiple time periods we use intermediate ‘total’ bars. Take this
    example.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示多个时间段，我们使用中间的“总计”条形图。看这个例子。
- en: '![](../Images/66e7ad5fcfb578cc3ad57df6dbd1fdb3.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66e7ad5fcfb578cc3ad57df6dbd1fdb3.png)'
- en: Image by author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Here we are showing profit and loss amounts for two quarters with an intermediate
    total for ‘Q1’ and a final total for ‘Q2’.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们展示了两个季度的利润和亏损金额，其中“Q1”有一个中间总计，“Q2”有一个最终总计。
- en: To achieve this we specify a list of bar types and pass it as the parameter
    `measure`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们指定一个条形图类型的列表，并将其作为参数 `measure` 传递。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should note that the data array element that maps onto the intermediate
    total is given the correct value of 130 but, unlike the other bars, this is *not*
    used to calculate the length of the bar; the bar length is calculated automatically
    from the previous values, and the data value for that bar is only used as an annotation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意到，映射到中间总计的数据数组元素被赋予了正确的值 130，但是，与其他条形图不同的是，这个值*不会*用于计算条形图的长度；条形图的长度是根据先前的值自动计算的，这个条形图的数据值仅作为注释使用。
- en: The waterfall helper function
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瀑布图辅助函数
- en: All of which brings us to the actual implementation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都引出了实际的实现。
- en: While Plotly Express does not implement a Waterfall Chart, Graph Objects (GO)
    include such a function. It’s just a bit tedious to use — which is why I developed
    this simple wrapper around it. As you can see from the code below, the GO waterfall
    function requires you to set many parameters. The helper function eliminates the
    need for this by setting defaults and/or calculating values — the user only needs
    to set two or three essential parameters.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Plotly Express 没有实现瀑布图，但 Graph Objects (GO) 包含这样的功能。使用起来有点繁琐——这也是我开发这个简单封装器的原因。如下面的代码所示，GO
    瀑布图功能要求你设置许多参数。辅助函数通过设置默认值和/或计算值消除了这一需求——用户只需设置两个或三个基本参数。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can cut and paste this code into your own code or visit my website to download
    the function and a Streamlit app that implements all of the examples above. As
    a bonus, the downloadable Streamlit code will also include a version of the Waterfall
    chart implemented in Matplotlib.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这段代码剪切并粘贴到自己的代码中，或者访问我的网站下载这个函数和一个实现了上述所有示例的 Streamlit 应用程序。作为额外奖励，下载的 Streamlit
    代码还将包括一个在 Matplotlib 中实现的瀑布图版本。
- en: I hope you have found this introduction to Waterfall Charts and their implementation
    in Plotly Graph Objects useful. The lack of a Waterfall Chart in Plotly Express
    is unimportant if you include a function like this in a helper library and it
    can make life much simpler when used across multiple projects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你觉得这个关于瀑布图及其在 Plotly Graph Objects 中实现的介绍有用。如果你在辅助库中包含这样的功能，Plotly Express
    缺少瀑布图并不重要，它在多个项目中使用时会使工作变得简单得多。
- en: Thanks for reading and please take a look at my [website](http://alanjones2.github.io)
    where you can find links to other articles and code. You can also subscribe to
    my occasional [newsletter](http://technofile.substack.com) where I publish some
    full articles as well as links to stuff that I have published on Medium.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，请访问我的[网站](http://alanjones2.github.io)，在这里你可以找到其他文章和代码的链接。你也可以订阅我的偶尔发布的[通讯](http://technofile.substack.com)，我会在上面发布一些完整的文章以及我在Medium上发布的内容的链接。
- en: Notes
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意事项
- en: '[*Storytelling with Data, a data visualization guide for business professionals*](https://amzn.to/3dJlMaS),
    Cole Nussbaumer Knaflic, Wiley, 2015 (affiliate link)'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*用数据讲故事：商业专业人士的数据可视化指南*](https://amzn.to/3dJlMaS)，Cole Nussbaumer Knaflic，Wiley，2015（附属链接）'
- en: English spelling — I am fully aware that I mix English and American spelling
    in this article but I am being consistent — honestly, I am. I use the English
    spelling of ‘colour’ in the text because… well, I’m English. But I use the American
    spelling ‘color’ in my code because I’m a programmer — and I am used to the fact
    that most programming languages use American English.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 英式拼写——我完全意识到我在这篇文章中混用了英式和美式拼写，但我保持了一致——老实说，我确实是这样。我在文本中使用‘colour’的英式拼写，因为……好吧，我是英国人。但是在我的代码中使用‘color’的美式拼写，因为我是程序员——我习惯于大多数编程语言使用美式英语。
