- en: Business Analytics with LangChain and LLMs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LangChain 和 LLMs 的业务分析
- en: 原文：[https://towardsdatascience.com/business-analytics-with-langchain-and-llms-c8e902446073](https://towardsdatascience.com/business-analytics-with-langchain-and-llms-c8e902446073)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/business-analytics-with-langchain-and-llms-c8e902446073](https://towardsdatascience.com/business-analytics-with-langchain-and-llms-c8e902446073)
- en: GENERATIVE AI
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成式 AI
- en: A step-by-step tutorial on querying SQL databases with human language
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个关于用人类语言查询 SQL 数据库的分步教程
- en: '[](https://tamimi-naser.medium.com/?source=post_page-----c8e902446073--------------------------------)[![Naser
    Tamimi](../Images/8d43c66ea3c0ef9b49c7d33dbc008c28.png)](https://tamimi-naser.medium.com/?source=post_page-----c8e902446073--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c8e902446073--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c8e902446073--------------------------------)
    [Naser Tamimi](https://tamimi-naser.medium.com/?source=post_page-----c8e902446073--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tamimi-naser.medium.com/?source=post_page-----c8e902446073--------------------------------)[![Naser
    Tamimi](../Images/8d43c66ea3c0ef9b49c7d33dbc008c28.png)](https://tamimi-naser.medium.com/?source=post_page-----c8e902446073--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c8e902446073--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c8e902446073--------------------------------)
    [Naser Tamimi](https://tamimi-naser.medium.com/?source=post_page-----c8e902446073--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c8e902446073--------------------------------)
    ·7 min read·Dec 19, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [数据科学前沿](https://towardsdatascience.com/?source=post_page-----c8e902446073--------------------------------)
    ·7 分钟阅读·2023年12月19日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5540ac3aed1e97360f2bf8286e9d3663.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5540ac3aed1e97360f2bf8286e9d3663.png)'
- en: Image by the author (generated via Midjourney)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供（通过 Midjourney 生成）
- en: Many businesses have a lot of proprietary data stored in their databases. If
    there’s a virtual agent that understands human language and can query these databases,
    it opens up big opportunities for these businesses. Think of customer service
    chatbots, they’re a common example. These agents can take customer requests, ask
    the database for information, and give the customer what they need.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多企业在其数据库中存储了大量专有数据。如果有一个能够理解人类语言并查询这些数据库的虚拟代理，这将为这些企业打开巨大的机会。想想客户服务聊天机器人，它们就是一个常见的例子。这些代理可以接受客户请求，向数据库询问信息，并向客户提供他们所需的内容。
- en: The benefit of such agents is not limited to external customer interactions.
    Many business owners or people in companies, even in tech companies, might not
    know SQL or similar languages, but they still need to ask the database for information.
    That’s where frameworks like LangChain come in. Such frameworks make it easy to
    create these helpful agents/applications. Agents that can talk to humans and at
    the same time, talk to databases, APIs, and more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代理的好处不仅限于外部客户互动。许多企业主或公司中的人员，即使是在科技公司，也可能不知道 SQL 或类似的语言，但他们仍然需要向数据库查询信息。这就是像
    LangChain 这样的框架派上用场的地方。这些框架使得创建这些有用的代理/应用程序变得容易。那些可以与人类对话，同时与数据库、API 等进行交互的代理。
- en: LLM-backed Applications
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LLM 支持的应用程序
- en: LangChain is an open-source framework for building interactive applications
    using Large Language Models (LLMs). It’s a tool that helps LLMs connect with other
    sources of information and lets them talk to the world around them. One important
    concept in such frameworks is the Chain. Let’s take a look at this concept.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain 是一个开源框架，用于构建使用大型语言模型（LLMs）的互动应用程序。这是一个帮助 LLMs 连接其他信息来源，并使其能够与周围世界对话的工具。在这些框架中，一个重要的概念是链（Chain）。让我们来看看这个概念。
- en: What are Chains?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是链（Chains）？
- en: Chains are advanced tools in this framework that combine LLMs with other tools
    to perform more complicated tasks. Specifically, chains are interfaces that use
    a sequence of LLMs along with other tools, such as SQL databases, API calls, bash
    operators, or math calculators, to complete a complex job. An example could be
    our application receiving input from a user and passing it to our LLM model; then,
    the LLM calls an API. The API responds to the LLM, and the LLM takes the response
    to perform another task, and so on. As you can see, it is a chain of inputs and
    outputs where, in many parts of this sequence, we have LLM models handling the
    situation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 链接是这个框架中的高级工具，它们将 LLM 与其他工具结合起来，以执行更复杂的任务。具体来说，链是使用 LLM 序列和其他工具（如 SQL 数据库、API
    调用、bash 操作符或数学计算器）来完成复杂工作的接口。例如，我们的应用程序接收来自用户的输入并将其传递给我们的 LLM 模型；然后，LLM 调用一个 API。API
    对 LLM 进行响应，LLM 使用响应执行另一个任务，如此循环往复。正如你所看到的，这是一系列输入和输出的链条，其中在许多部分，我们有 LLM 模型处理情况。
- en: Getting Our Hands Dirty
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始动手实践
- en: Now it’s time to get our hands dirty and start coding a simple LLM-backed application.
    For this application, we are going to make a simple Q&A agent that takes our question
    and queries a SQL database to find the answer for us.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始动手编写一个简单的 LLM 支持的应用程序了。对于这个应用程序，我们将制作一个简单的问答代理，它接收我们的问题并查询 SQL 数据库以为我们找到答案。
- en: Set Up A PostgreSQL Sample Database
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 PostgreSQL 示例数据库
- en: We use [DVD Rental Sample Database](https://www.postgresqltutorial.com/postgresql-getting-started/postgresql-sample-database/)
    from postgresqltutorial.com ([License Information](https://dev.mysql.com/doc/sakila/en/sakila-license.html)).
    To install the database on your local system, you need to have PostgreSQL installed.
    Simply type `*psql*`in your terminal and see if it runs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了来自 postgresqltutorial.com 的 [DVD Rental Sample Database](https://www.postgresqltutorial.com/postgresql-getting-started/postgresql-sample-database/)（[许可证信息](https://dev.mysql.com/doc/sakila/en/sakila-license.html)）。要在你的本地系统上安装数据库，你需要安装
    PostgreSQL。在终端中简单地输入 `*psql*` 看看它是否运行。
- en: Then you should follow the instructions [here](https://www.postgresqltutorial.com/postgresql-getting-started/load-postgresql-sample-database/).
    Here I walk through the database installation with you quickly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该按照 [这里](https://www.postgresqltutorial.com/postgresql-getting-started/load-postgresql-sample-database/)
    的说明进行操作。这里我将快速带你完成数据库安装过程。
- en: 'In your terminal launch PostgreSQL via:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端中通过以下命令启动 PostgreSQL：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You must substitute the `<USERNAME>` with your actual username. Then the system
    asks you about your password. Enter your password and you get into your Postgres
    database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须将 `<USERNAME>` 替换为你的实际用户名。系统会询问你的密码。输入你的密码后，你将进入你的 Postgres 数据库。
- en: First, we should create a database to load all the tables.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该创建一个数据库以加载所有的表。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After creating the database, you can check it by typing `*\list*` command, You
    should see your dvdrental database in the returned list. Then simply exit Postgres
    (via `\q`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据库后，你可以通过输入 `*\list*` 命令来检查它，你应该会在返回的列表中看到你的 dvdrental 数据库。然后简单地退出 Postgres（通过
    `\q`）。
- en: 'Now we need to download the tables and data. You can download everything as
    a tar file here: [Download DVD Rental Sample Database](https://www.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要下载表和数据。你可以在这里下载所有内容的 tar 文件：[下载 DVD Rental Sample Database](https://www.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip)
- en: Go to the folder that you downloaded the tar file and using pg_restore, we can
    load the tables into our Postgres Database.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 进入你下载 tar 文件的文件夹，使用 `pg_restore`，我们可以将表加载到我们的 Postgres 数据库中。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before going further, let’s check if the tables are loaded. Launch Postgres
    via `psql -U <USERNAME>` and enter your password.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们检查表是否已加载。通过 `psql -U <USERNAME>` 启动 Postgres 并输入你的密码。
- en: Then type the following commands to list tables inside the dvdrental database.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下命令以列出 dvdrental 数据库中的表。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You must see a list of tables like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个如下所示的表列表：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Set Up .env File
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 .env 文件
- en: 'After building the sample database, we need to create a `.env` file. We use
    this file to store our secrets and keys as well as environmental variables. Of
    course, we can put all that information in our code, but we must follow best engineering
    practices even for small projects. An accidental git push can expose our API keys
    and secrets to the public. Here is our `.env` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建示例数据库之后，我们需要创建一个 `.env` 文件。我们使用此文件来存储我们的秘密、密钥以及环境变量。当然，我们可以将所有这些信息放在代码中，但即使是小项目也必须遵循最佳工程实践。意外的
    git push 可能会将我们的 API 密钥和秘密暴露给公众。以下是我们的 `.env` 文件：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you see, you need to get your own OpenAI API key for this test. You can follow
    the instructions [here](https://medium.com/@rithin_9167/how-to-obtain-openai-api-key-30df0b8bd114)
    to obtain an API key from Open AI.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，你需要获得自己的 OpenAI API 密钥进行测试。你可以按照 [这里](https://medium.com/@rithin_9167/how-to-obtain-openai-api-key-30df0b8bd114)
    的说明从 Open AI 获取 API 密钥。
- en: Creating a LangChain Application
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 LangChain 应用程序
- en: After saving your .env file in your project folder, we can start the actual
    code. First, we import the required libraries into our Python code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 .env 文件保存到你的项目文件夹后，我们可以开始实际的代码。首先，我们将所需的库导入到 Python 代码中。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For this tutorial, I recommend using a Jupyter Notebook to test it step by step.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我建议使用 Jupyter Notebook 逐步测试它。
- en: We need to import the required libraries at the beginning.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在开始时导入所需的库。
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using load_dotenv(), we load the environment variables that we defined in the
    `.env` file. Now, safely we can access them in the code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 load_dotenv()，我们加载了在 `.env` 文件中定义的环境变量。现在，我们可以安全地在代码中访问它们。
- en: For our chain, we need a language model with chat capabilities. For simplicity,
    we chose gpt-3.5-turbo from OpenAI which is accessible through the API. You can
    use any other public or private models.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的链，我们需要一个具有聊天功能的语言模型。为简单起见，我们选择了来自 OpenAI 的 gpt-3.5-turbo，该模型可以通过 API 访问。你可以使用任何其他公共或私有模型。
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In addition to a model, we need a SQL Database connection. That connection enables
    our chain to query against the database and get the results back. As mentioned
    before, we use a PostgreSQL Database, but according to LangChain, any SQL engine
    with a JDBC connection should be easy to use (e.g. MySQL, Presto, Databricks).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了模型，我们还需要一个 SQL 数据库连接。该连接使我们的链能够对数据库进行查询并获取结果。如前所述，我们使用的是 PostgreSQL 数据库，但根据
    LangChain 的说法，任何具有 JDBC 连接的 SQL 引擎都应该容易使用（例如 MySQL、Presto、Databricks）。
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In case you are wondering about `sample_rows_in_table_info` parameter that we
    used in our SQL database connection, Rajkumar et. al showed in their paper ([https://arxiv.org/abs/2204.00498](https://arxiv.org/abs/2204.00498))
    that including a few sample rows from the table increases the performance of the
    model in creating mode affecting querying the data. In LangChain, simply you can
    set `sample_rows_in_table_info` and determine the number of sample rows from each
    table that will be appended to each table description.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对我们在 SQL 数据库连接中使用的 `sample_rows_in_table_info` 参数感到好奇，Rajkumar 等人在他们的论文中（[https://arxiv.org/abs/2204.00498](https://arxiv.org/abs/2204.00498)）展示了从表中包含几行样本数据可以提高模型在创建模式下查询数据的性能。在
    LangChain 中，你可以简单地设置 `sample_rows_in_table_info`，并确定从每个表中提取的样本行数，这些样本行将被附加到每个表的描述中。
- en: To test the SQL database connection, I printed the list of available tables
    using `db.get_usable_table_names()`. It should return the following list of tables
    for you too.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 SQL 数据库连接，我使用 `db.get_usable_table_names()` 打印了可用表的列表。它也应该返回以下表的列表给你。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The next step is the most important one. With our LLM model and a SQL database
    connection, now we should be able to instantiate our chain. Before showing the
    instantiation, let’s get a little bit more sense about a chain.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是最重要的步骤。借助我们的 LLM 模型和 SQL 数据库连接，我们现在应该能够实例化我们的链。在展示实例化之前，让我们先对链有更多了解。
- en: Now, we are using an SQL chain from LangChain to get a human question, convert
    it to an SQL query, run it on the database, and retrieve the results.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们正在使用来自 LangChain 的 SQL 链来获取人类问题，将其转换为 SQL 查询，在数据库上运行它，并检索结果。
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally, we use the `run()` method to pass our input/question to the chain and
    get the final response back.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `run()` 方法将输入/问题传递给链，并获取最终响应。
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now it is time to test our code. We start with a simple query that requires
    querying a single table.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是测试代码的时候了。我们从一个简单的查询开始，该查询只需查询一个表。
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The chain gets our human-style query and converts it into an SQL query first.
    Then using the SQL DB connection, it runs the SQL query on the database. The returned
    response provides context for the LLM and along with the human original query,
    triggers a response. In this case, you can see the final response:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该链接收我们的自然语言查询，并首先将其转换为 SQL 查询。然后，使用 SQL 数据库连接，它在数据库上运行 SQL 查询。返回的响应为 LLM 提供了上下文，并与原始人类查询一起触发了响应。在这种情况下，你可以看到最终的响应：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, since the `verbose=True` (where we defined the db_chain) we get more
    information about the constructed SQL query and the returned SQL results. If you
    turn off the verbose, you only see the final results (highlighted with the boldface).
    The final answer shows correctly that the average length of films released in
    2006 is 115.272 minutes (you can verify it with your own SQL query on Postgres).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，由于 `verbose=True`（我们在其中定义了 db_chain），我们可以获得更多关于构建的 SQL 查询和返回的 SQL 结果的信息。如果你关闭
    verbose，你只能看到最终结果（用粗体标记）。最终答案正确显示了2006年上映的电影的平均时长是115.272分钟（你可以在 Postgres 上使用你自己的
    SQL 查询进行验证）。
- en: The second question is a little bit more complicated and requires joining three
    tables.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题稍微复杂一些，需要连接三个表。
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The question asks about the actor who played in movies that their total length
    is more than any other actors. This question requires joining three tables: actor,
    film_actor, and film. Here is the chain response:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题询问的是在电影总时长超过其他任何演员的演员。这个问题需要连接三个表：actor、film_actor 和 film。以下是链响应：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you see, our super-simple LangChain application did a good job of understanding
    the relationships between these tables and constructing the SQL query.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们超简单的 LangChain 应用成功地理解了这些表之间的关系，并构建了 SQL 查询。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we introduced a powerful open-source tool called LangChain
    that enables us to build LLM-based applications.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们介绍了一款强大的开源工具，叫做 LangChain，它使我们能够构建基于 LLM 的应用程序。
- en: Then we used SQLDatabaseChain to build an application that queries a SQL database
    based on user questions and returns the results.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用 SQLDatabaseChain 构建了一个应用程序，该应用程序根据用户的问题查询 SQL 数据库并返回结果。
- en: This simple Q&A application can be expanded into a more complex business analytics
    assistant that anyone inside a business can use daily to get the latest insights
    from the proprietary data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的问答应用可以扩展成一个更复杂的业务分析助手，供企业内部的任何人每天使用，从专有数据中获取最新的洞察。
