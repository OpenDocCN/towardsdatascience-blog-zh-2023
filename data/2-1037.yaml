- en: Having Trouble Understanding Quantum Machine Learning?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在理解量子机器学习时遇到困难吗？
- en: 原文：[https://towardsdatascience.com/having-trouble-understanding-quantum-machine-learning-ce8a941d8c70](https://towardsdatascience.com/having-trouble-understanding-quantum-machine-learning-ce8a941d8c70)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/having-trouble-understanding-quantum-machine-learning-ce8a941d8c70](https://towardsdatascience.com/having-trouble-understanding-quantum-machine-learning-ce8a941d8c70)
- en: Implementing the Quantum Approximate Optimization Algorithm using functional
    programming
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用函数式编程实现量子近似优化算法
- en: '[](https://pyqml.medium.com/?source=post_page-----ce8a941d8c70--------------------------------)[![Frank
    Zickert | Quantum Machine Learning](../Images/ae361c0d68d13dac21bb86c7496d2917.png)](https://pyqml.medium.com/?source=post_page-----ce8a941d8c70--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ce8a941d8c70--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ce8a941d8c70--------------------------------)
    [Frank Zickert | Quantum Machine Learning](https://pyqml.medium.com/?source=post_page-----ce8a941d8c70--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pyqml.medium.com/?source=post_page-----ce8a941d8c70--------------------------------)[![Frank
    Zickert | Quantum Machine Learning](../Images/ae361c0d68d13dac21bb86c7496d2917.png)](https://pyqml.medium.com/?source=post_page-----ce8a941d8c70--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ce8a941d8c70--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ce8a941d8c70--------------------------------)
    [Frank Zickert | Quantum Machine Learning](https://pyqml.medium.com/?source=post_page-----ce8a941d8c70--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ce8a941d8c70--------------------------------)
    ·7 min read·Mar 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----ce8a941d8c70--------------------------------)
    ·阅读时间7分钟·2023年3月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Do you want to get started with Quantum Machine Learning? Have a look at [**Hands-On
    Quantum Machine Learning With Python**](https://www.pyqml.com/volume1?provider=medium&origin=troubleunderstanding)**.**
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 想要开始量子机器学习吗？请查看[**动手量子机器学习与Python**](https://www.pyqml.com/volume1?provider=medium&origin=troubleunderstanding)**。**
- en: This article will explain the most important parts of the Quantum Approximate
    Optimization Algorithm (QAOA). QAOA is a machine learning algorithm that you can
    use to solve combinatorial optimization problems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将解释量子近似优化算法（QAOA）中最重要的部分。QAOA是一种机器学习算法，你可以用来解决组合优化问题。
- en: The special thing is this algorithm caters to the specificities of quantum computers
    — a new kind of computer that promises exponential speedups in problem-solving.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 特别之处在于，这个算法迎合了量子计算机的特性——一种承诺在解决问题上提供指数级加速的新型计算机。
- en: Even though quantum machine learning (QML) — that is, using quantum computing
    to solve machine learning algorithms — is one of the most promising technologies,
    **it is as challenging!**
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管量子机器学习（QML）——即使用量子计算来解决机器学习算法——是最有前景的技术之一，**它也同样具有挑战性！**
- en: Therefore, this article aims to explain the concepts underlying QAOA in an accessible
    way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本文旨在以一种易于理解的方式解释QAOA的基本概念。
- en: Quantum computing, optimization, and machine learning rely heavily on mathematics.
    Unless you’re a mathematician, it will be a daunting endeavor.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算、优化和机器学习都在很大程度上依赖于数学。除非你是数学家，否则这将是一个令人望而生畏的任务。
- en: Fortunately, some QML libraries, such as IBM Qiskit, solve this problem. They
    provide easy-to-use interfaces and hide all the complexity from you.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一些QML库，比如IBM Qiskit，解决了这个问题。它们提供了易于使用的接口，并将所有复杂性隐藏在你之外。
- en: As I showed in [my previous post](https://medium.com/@pyqml/quantum-wildfire-fighting-e828497b7b89),
    they even take care of the problem formulation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在[我之前的帖子](https://medium.com/@pyqml/quantum-wildfire-fighting-e828497b7b89)中所展示的，它们甚至处理了问题的公式化。
- en: In that post, I used the **Quantum Approximate Optimization Algorithm** (QAOA)
    to solve a combinatorial optimization problem — how to respond to wildfires.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在那篇帖子中，我使用了**量子近似优化算法**（QAOA）来解决一个组合优化问题——如何应对野火。
- en: '![](../Images/de8c69995f2f0c7f748fdc4cd94a6927.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de8c69995f2f0c7f748fdc4cd94a6927.png)'
- en: Image by the author using Stable Diffusion
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用Stable Diffusion生成
- en: The only thing you have to do is to specify the individual values of your problem.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你唯一需要做的就是指定问题的个体值。
- en: It is too good to be true, no?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这简直太好了，不是吗？
- en: '![](../Images/62d3fb053da8cc4693d4388f3321913d.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62d3fb053da8cc4693d4388f3321913d.png)'
- en: Even though these libraries let you use quantum machine learning without bothering
    about math, quantum mechanics, or anything complicated, they likewise do not teach
    you much.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些库让你可以使用量子机器学习而不必担心数学、量子力学或其他复杂的东西，但它们同样不会教你太多。
- en: If you want to understand how an algorithm works, you’re right back to where
    you started. If the Qiskit library is that good, why don’t you look at their examples
    to understand how the QAOA works?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解一个算法是如何工作的，你就会回到最初的地方。如果Qiskit库如此出色，为什么不查看他们的示例来理解QAOA是如何工作的呢？
- en: The following figure depicts an excerpt of their example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了他们示例的一部分。
- en: '![](../Images/e4b744e73e5e0faef07b00748930ba71.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4b744e73e5e0faef07b00748930ba71.png)'
- en: Taken from the [Qiskit documentation](https://qiskit.org/textbook/ch-applications/qaoa.html)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 摘自 [Qiskit文档](https://qiskit.org/textbook/ch-applications/qaoa.html)
- en: I think there’s not much to add, is there?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为没有什么需要添加的，是吗？
- en: …
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: A little, perhaps.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 也许一点点。
- en: So, let me offer you an alternative explanation. One that does not ask for a
    math degree. But one that exploits the expressiveness of functional programming
    (in Python).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我给你提供一个替代的解释。一个不需要数学学位的解释。但一个利用函数式编程（在Python中）的表达力的解释。
- en: The story of functional programming is quickly told.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程的故事讲起来很快。
- en: Functional programming breaks down an application into a set of functions. Ideally,
    functions only take inputs and produce outputs and have no internal state that
    affects the output produced for a given input.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程将应用程序分解为一组函数。理想情况下，函数只接收输入并产生输出，并且没有影响给定输入产生的输出的内部状态。
- en: In that sense, the QAOA algorithm is a function that solves a `problem` by `optimize`ing
    a set of `params`. In other words, we aim to find the best values for these `params`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个意义上讲，QAOA算法是一个通过`optimize`一组`params`来解决`problem`的函数。换句话说，我们的目标是找到这些`params`的最佳值。
- en: To decide which `params` are best, we `assess` them based on the result we obtain
    from `compute` ing a (quantum) `circuit` that uses these `params` to encode the
    problem (`problem_circuit`) and its solution (`ansatz_circuit`).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了决定哪些`params`最佳，我们根据从`compute`得到的结果来`assess`这些`params`，该结果来自使用这些`params`编码问题（`problem_circuit`）及其解决方案（`ansatz_circuit`）的（量子）`circuit`。
- en: This is what Qiskit’s description refers to as a **variational algorithm.**
    It uses a classical optimization algorithm that makes queries to a quantum computer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Qiskit描述中提到的**变分算法**。它使用一种经典优化算法来向量子计算机发出查询。
- en: And this is the code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是代码。
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Pretty neat, isn’t it?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 相当不错，不是吗？
- en: Let’s proceed to the innermost function, `to_circuit`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续深入到最内层的函数`to_circuit`。
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function takes the `problem` and the `params`. We use the size of the `problem`
    to determine the number of quantum bits (qubits) in our quantum circuit.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接收`problem`和`params`。我们使用`problem`的大小来确定量子电路中量子比特（qubits）的数量。
- en: A qubit is the basic unit of computation in a quantum computer. Even though
    its internal state is pretty complicated, when you look at it, it is either 0
    or 1 — just like a regular bit.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个量子比特是量子计算机中的基本计算单位。尽管其内部状态非常复杂，但当你查看它时，它要么是0，要么是1——就像普通的比特一样。
- en: We start with applying the Hadamard gate (`h`) to all qubits. This puts the
    qubits into a state where they are equally likely to result in 0 and 1.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从对所有量子比特应用Hadamard门（`h`）开始。这将量子比特置于一个状态，其中它们有相等的可能性产生0或1。
- en: Then, we append two sub-circuits using the functions `problem_circuit` and `ansatz_circuit`.
    This is what Qiskit’s explanation refers to as *“the unitary U(β,γ) has a specific
    form and is composed of two unitaries U(β) and U(γ)...”*
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`problem_circuit`和`ansatz_circuit`函数附加两个子电路。这就是Qiskit解释中提到的*“单位矩阵U(β,γ)具有特定的形式，并由两个单位矩阵U(β)和U(γ)组成……”*
- en: The first function `problem_circuit` adds a quantum circuit representing the
    problem we aim to solve.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数`problem_circuit`添加了一个量子电路，表示我们想要解决的问题。
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, we loop through all `relations` in our `problem`. Apparently,
    we expect a `relation` to consist of a pair of integer values (`i, j`). We apply
    the `rzz` gate on the two qubits at these positions. The `rzz` gate is a parameterized
    (by parameter `gamma`) rotation around the ZZ-axis of a two-qubit system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们遍历`problem`中的所有`relations`。显然，我们期望一个`relation`由一对整数值（`i, j`）组成。我们在这些位置的两个量子比特上应用`rzz`门。`rzz`门是一个参数化（由参数`gamma`）的旋转门，绕着两个量子比特系统的ZZ轴旋转。
- en: The second function `ansatz_circuit` adds a quantum circuit representing the
    solution to our problem.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数`ansatz_circuit`添加了一个量子电路，表示我们问题的解决方案。
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This time, we loop through all parts of our problem and apply the `rx` gate
    on the respective qubit. This is a parameterized (by parameter `beta`) rotation
    around the X-axis of a qubit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们遍历问题的所有部分，并在相应的量子比特上应用`rx`门。这是一个以参数`beta`为参数的绕X轴的旋转。
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Essentially, these circuits use the two `params` (called `beta` and `gamma`)
    to create a quantum circuit that produces a particular quantum state that Qiskit
    describes vividly as **|𝜓(𝛽,𝛾)⟩**. Here, 𝜓 (“psi”) is a placeholder for a quantum
    state. 𝛽 and 𝛾 are the parameters that define this state.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，这些电路使用两个`params`（称为`beta`和`gamma`）来创建一个量子电路，该电路产生Qiskit生动描述的特定量子态**|𝜓(𝛽,𝛾)⟩**。这里，𝜓（“psi”）是量子态的占位符。𝛽和𝛾是定义此状态的参数。
- en: This quantum circuit creates a state that could result in any value, good or
    bad. Of course, we would prefer to create meaningful results. Therefore, we need
    a measure of “goodness.” That’s the purpose of the `assess` function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个量子电路创建了一个状态，可能产生任何值，无论好坏。当然，我们希望生成有意义的结果。因此，我们需要一个“好坏”度量。这就是`assess`函数的目的。
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Given our `problem`, we calculate the `performance` of a result that we obtained
    from executing the quantum circuit. We look at the `relations` inside the `problem`
    definition and decrease (note lower is better here) the performance if the qubits
    representing this `relation` are not equal (`solution[i] != solution[j]`). Remember,
    a qubit either results in 0 or 1\. So, `solution[i]` and `solution[j]` are either
    0 or 1.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的`problem`，我们计算从执行量子电路得到的结果的`performance`。我们查看`problem`定义中的`relations`，并在量子比特表示的`relation`不相等时（`solution[i]
    != solution[j]`）降低（注意，这里较低为更好）性能。记住，量子比特的结果是0或1。所以，`solution[i]`和`solution[j]`要么是0，要么是1。
- en: Now, with the ability to create circuits and assess their results, we can feed
    a classical optimization algorithm. This algorithm repeatedly evaluates different
    values and their results, based on which it moves towards values that promise
    better results.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过创建电路并评估其结果，我们可以输入一个经典优化算法。这个算法重复评估不同的值及其结果，并基于此向产生更好结果的值移动。
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, let’s look at the structure of the problem. We used two characteristics
    of it: `size` and `relations`. So, let’s create a `class` to hold these data.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看问题的结构。我们使用了它的两个特征：`size`和`relations`。因此，让我们创建一个`class`来存储这些数据。
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, we need to formulate the instance of our problem and feed it into the
    `qaoa` algorithm.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要制定我们问题的实例并将其输入到`qaoa`算法中。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We define the problem to consist of three nodes (`0, 1, 2`) and a couple of
    relations. The nodes `0, 1` and `1, 2` are connected. The following listing denotes
    the output.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义问题由三个节点（`0, 1, 2`）和几个关系组成。节点`0, 1`和`1, 2`是连接的。以下列表表示输出。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `nfev` denotes the number of iterations. And most importantly, `x` represents
    the `params` values that produced the best results.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`nfev`表示迭代次数。最重要的是，`x`表示产生最佳结果的`params`值。'
- en: To see what these values mean, we feed these values back into the circuit and
    look at the result.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这些值的意义，我们将这些值反馈到电路中并观察结果。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/3a6ff4cbb0e450f344ca2432af9e16e4.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a6ff4cbb0e450f344ca2432af9e16e4.png)'
- en: Image by author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'The output shows that two solutions occur more frequently: `010` and `101`.
    So, these denote the solution to the problem specified.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示两个解决方案出现得更频繁：`010`和`101`。因此，这些表示了指定问题的解决方案。
- en: When we look back into `assess` function, we see that we value each `relation`
    as `-1` if the two connected nodes have different values. Further, we defined
    `0, 1` and `1, 2` to be connected.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们回顾`assess`函数时，我们看到如果两个连接的节点具有不同的值，我们将每个`relation`的值定为`-1`。此外，我们定义了`0, 1`和`1,
    2`为连接的。
- en: Thus, the best solutions are those where these connected nodes have different
    values. And these are `010` and `101`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最佳解决方案是那些连接节点具有不同值的方案。这些是`010`和`101`。
- en: This problem is known as Max-Cut. It is the same problem solved in Qiskit’s
    example and could be considered the “Hello World” of combinatorial optimization.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题被称为Max-Cut。这是Qiskit示例中解决的相同问题，可以被认为是组合优化的“Hello World”。
- en: Conclusion
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This post explains the essential parts of the Quantum Approximate Optimization
    Algorithm (QAOA). Even though it is neither the first nor the only explanation,
    it does not require you to study mathematics first.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本文解释了量子近似优化算法（QAOA）的基本部分。虽然这不是第一个也不是唯一的解释，但它不要求你先学习数学。
- en: A non-mathematical explanation has quite a few advantages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 非数学性的解释有相当多的优点。
- en: It is much more accessible to most of us.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这对于我们大多数人来说要容易得多。
- en: It is hands-on. We directly solved a problem with it.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一门实践课程。我们直接用它解决了一个问题。
- en: You can see how the parts of the algorithm fit together.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以看到算法的各个部分如何配合在一起。
- en: Do you want to get started with Quantum Machine Learning? Have a look at [**Hands-On
    Quantum Machine Learning With Python**](https://www.pyqml.com/volume1?provider=medium&origin=troubleunderstanding)**.**
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 想要开始量子机器学习吗？看看[**用 Python 实践量子机器学习**](https://www.pyqml.com/volume1?provider=medium&origin=troubleunderstanding)**。**
- en: '![](../Images/c3892c668b9d47f57e47f1e6d80af7b6.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3892c668b9d47f57e47f1e6d80af7b6.png)'
- en: Get the first three chapters [for free](https://www.pyqml.com/volume1?provider=medium&origin=troubleunderstanding).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 免费获取前三章 [点击这里](https://www.pyqml.com/volume1?provider=medium&origin=troubleunderstanding)。
- en: 'The brand-new **Volume 2: Combinatorial Optimization** is all about how to
    solve optimization problems using the Variational Quantum Eigensolver and the
    **Quantum Approximate Optimization Algorithm**.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 全新**第2卷：组合优化**完全讲解了如何使用变分量子本征求解器和**量子近似优化算法**来解决优化问题。
- en: '[Claim your copy now](https://www.pyqml.com/volume2?provider=medium&origin=troubleunderstanding).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[立即索取您的副本](https://www.pyqml.com/volume2?provider=medium&origin=troubleunderstanding)。'
- en: '![](../Images/301b7c95ad0fe4b0dcbb7e3cf0fdc708.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/301b7c95ad0fe4b0dcbb7e3cf0fdc708.png)'
