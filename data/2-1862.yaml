- en: Simulated Annealing with Restart Strategy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带重启策略的模拟退火
- en: 原文：[https://towardsdatascience.com/simulated-annealing-with-restart-a19a53d914c8](https://towardsdatascience.com/simulated-annealing-with-restart-a19a53d914c8)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/simulated-annealing-with-restart-a19a53d914c8](https://towardsdatascience.com/simulated-annealing-with-restart-a19a53d914c8)
- en: A variation on the classic Simulated Annealing optimisation algorithm and its
    application to the Travelling Salesman Problem
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对经典的模拟退火优化算法及其在旅行商问题中的应用进行变种处理
- en: '[](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)
    ·5 min read·Feb 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)
    ·5分钟阅读·2023年2月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6c17609952a9449fb2de3dd465a9a0ee.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c17609952a9449fb2de3dd465a9a0ee.png)'
- en: Photo by [Jonathan Greenaway](https://unsplash.com/es/@jogaway?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jonathan Greenaway](https://unsplash.com/es/@jogaway?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: 'In my previous article we discussed how to solve the [***Travelling Salesman
    Problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem) using
    the [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic) optimisation
    algorithm of [***Simulated Annealing***](https://en.wikipedia.org/wiki/Simulated_annealing).
    You can check out that article here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前的文章中，我们讨论了如何使用 [***模拟退火***](https://en.wikipedia.org/wiki/Simulated_annealing)
    的 [***元启发式***](https://en.wikipedia.org/wiki/Metaheuristic) 优化算法来解决 [***旅行商问题
    (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)。你可以在这里查看那篇文章：
- en: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----a19a53d914c8--------------------------------)
    [## How To Solve Travelling Salesman Problem With Simulated Annealing'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----a19a53d914c8--------------------------------)
    [## 如何使用模拟退火解决旅行商问题'
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用模拟退火优化算法来获得旅行商问题的最优解
- en: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----a19a53d914c8--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----a19a53d914c8--------------------------------)
- en: The TSP is a famous [***combinatorial optimisation***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    and [***operations research***](https://en.wikipedia.org/wiki/Operations_research)
    problem. Its objective is to find the shortest distance a salesman can travel
    through ***n*** cities by visiting each city once and ending in the original/starting
    city.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TSP 是一个著名的 [***组合优化***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    和 [***运筹学***](https://en.wikipedia.org/wiki/Operations_research) 问题。它的目标是找到销售员访问
    ***n*** 个城市的最短路径，要求每个城市仅访问一次，并以原始/起始城市结束。
- en: The problem sounds simple, however as we add more cities the number of possible
    routes is subject to a [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion).
    For example, with ***4*** cities the number of possible routes is ***3***, ***6***
    cities it is ***60***, however for ***20*** cities its a gigantic ***60,822,550,200,000,000!***
    In fact for ***20*** cities it would take on the order of [***~2000*** years to
    try every route](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
    by [***brute-force***](https://blog.routific.com/blog/travelling-salesman-problem)!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 问题听起来很简单，但随着城市数量的增加，可能的路径数量会出现[***组合爆炸***](https://en.wikipedia.org/wiki/Combinatorial_explosion)。例如，***4***个城市的可能路径数量为***3***，***6***个城市的可能路径数量为***60***，而***20***个城市的可能路径数量则是巨大的***60,822,550,200,000,000!***
    实际上，对于***20***个城市，尝试每一条路径的时间大约是[***~2000***年](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)，这需要[***暴力破解***](https://blog.routific.com/blog/travelling-salesman-problem)！
- en: The numberof possible solutions to the TSP scales as **(n-1)!/2** where **n**
    is the number of cities.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: TSP的可能解的数量按**(n-1)!/2**的比例增长，其中**n**是城市的数量。
- en: This is where [***heuristic***](https://en.wikipedia.org/wiki/Heuristic_(computer_science))
    and meta-heuristic methods, like Simulated Annealing, come in to provide good-enough
    solutions in a reasonable amount of computation time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[***启发式***](https://en.wikipedia.org/wiki/Heuristic_(computer_science))和元启发式方法，如模拟退火，发挥作用的地方，它们在合理的计算时间内提供足够好的解决方案。
- en: In this article, we will review the process of Simulated Annealing and explain
    a slight variation to its original algorithm which can lead to an improvement
    in perforamance. We will then implement this variation to solve the TSP in Python.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将回顾模拟退火的过程，并解释其原始算法的一个小变化，这种变化可能会改善性能。然后，我们将实现这种变化以在 Python 中解决 TSP。
- en: Simulated Annealing With Restart
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带重启的模拟退火
- en: Overview
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Simulated Annealing is a stochastic (random) [***global search***](https://en.wikipedia.org/wiki/Global_optimization)
    optimisation algorithm. It derives its name from the [***Annealing***](https://en.wikipedia.org/wiki/Annealing_(materials_science))
    process in [***Metallurgy***](https://en.wikipedia.org/wiki/Metallurgy) which
    alters the physical properties of a metal through the use of temperature.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟退火是一种随机的（随机）[***全局搜索***](https://en.wikipedia.org/wiki/Global_optimization)优化算法。它的名字来源于[***退火***](https://en.wikipedia.org/wiki/Annealing_(materials_science))过程，这一过程在[***冶金学***](https://en.wikipedia.org/wiki/Metallurgy)中通过温度变化改变金属的物理性质。
- en: Simulated Annealing uses this idea of temperature to help it compute the probability
    of transitioning to a less optimal solution to greater [***explore***](https://scikit-optimize.github.io/stable/auto_examples/exploration-vs-exploitation.html)
    the state space to have a higher chance of reaching the [***global optimum***](https://en.wikipedia.org/wiki/Maxima_and_minima).
    This is to avoid getting trapped in [***local optimums***](https://en.wikipedia.org/wiki/Local_optimum)
    that [***greedy***](https://en.wikipedia.org/wiki/Greedy_algorithm) algorithms
    such as [***Nearest Neighbour***](https://en.wikipedia.org/wiki/Nearest_neighbour_algorithm)
    often do.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟退火利用温度的概念来计算转移到较差解的概率，以更好地[***探索***](https://scikit-optimize.github.io/stable/auto_examples/exploration-vs-exploitation.html)状态空间，从而更有可能达到[***全局最优***](https://en.wikipedia.org/wiki/Maxima_and_minima)。这是为了避免陷入[***局部最优***](https://en.wikipedia.org/wiki/Local_optimum)，这是[***贪婪***](https://en.wikipedia.org/wiki/Greedy_algorithm)算法，如[***最近邻***](https://en.wikipedia.org/wiki/Nearest_neighbour_algorithm)，经常发生的情况。
- en: Theory
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理论
- en: 'The general mathematical framework for Simulated Annealing is:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟退火的一般数学框架是：
- en: '![](../Images/9da4d08b77e9b035591c1bf918a26073.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9da4d08b77e9b035591c1bf918a26073.png)'
- en: Equation generated by author in LaTeX.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者使用 LaTeX 生成的方程。
- en: 'Where:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: This transition probability is derived from the [**Boltzmann distribution**](https://en.wikipedia.org/wiki/Boltzmann_distribution)
    from [**thermodynamics**](https://www.britannica.com/science/thermodynamics).
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个转移概率源自于[**玻尔兹曼分布**](https://en.wikipedia.org/wiki/Boltzmann_distribution)和[**热力学**](https://www.britannica.com/science/thermodynamics)。
- en: '![](../Images/85547289e68b773bdc0e161dd3c1a438.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85547289e68b773bdc0e161dd3c1a438.png)'
- en: Equation generated by author in LaTeX.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者使用 LaTeX 生成的方程。
- en: Here ***x*** is the current solution, ***x’*** is the new solution, ***Δy***
    is the difference in performance of the two solutions, ***P(x → x’)*** is the
    probability of transitioning to the new solution and ***T*** is the temperature
    of the process at that point in time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里***x***是当前解，***x'***是新解，***Δy***是两个解之间的性能差异，***P(x → x')***是过渡到新解的概率，***T***是此时过程的温度。
- en: If the new solution is better than the current solution, then we always transition
    to this new solution as the probability from the above formula is ***1***. Furthermore,
    when the new solution is worse but the temperature is very high, we are very likely
    to transition to the new solution despite its worse performance. However, as the
    temperature decreases, we are less likely to transition to a worse new solution.
    Therefore, the process starts to converge and is [***exploiting***](https://scikit-optimize.github.io/stable/auto_examples/exploration-vs-exploitation.html)
    the search space.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新解优于当前解，则我们总是过渡到这个新解，因为上述公式中的概率为***1***。此外，当新解较差但温度很高时，我们很可能会过渡到新解，尽管它的表现较差。然而，随着温度的下降，我们过渡到更差的新解的可能性会减小。因此，过程开始收敛，并且正在[***利用***](https://scikit-optimize.github.io/stable/auto_examples/exploration-vs-exploitation.html)搜索空间。
- en: 'The temperature is often cooled geometrically:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 温度通常以几何方式降温：
- en: '![](../Images/5792d44c41d7e19438a14cf4bb2e9d58.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5792d44c41d7e19438a14cf4bb2e9d58.png)'
- en: Equation generated by author in LaTeX.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在LaTeX中生成的方程。
- en: Where ***γ*** is the calling factor with a range ***0 ≤ γ ≤ 1*** and ***t***
    is the iteration number.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其中***γ***是取值范围为***0 ≤ γ ≤ 1***的调用因子，***t***是迭代次数。
- en: Another frequent question is how to calculate the initial temperature? This
    is sophisticated subject and and a good research [***here***](https://www.researchgate.net/publication/227061666_Computing_the_Initial_Temperature_of_Simulated_Annealing)
    helps answer this question. In general, this mainly a trial and error process.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的问题是如何计算初始温度？这是一个复杂的主题，好的研究[***这里***](https://www.researchgate.net/publication/227061666_Computing_the_Initial_Temperature_of_Simulated_Annealing)可以帮助回答这个问题。一般来说，这主要是一个试错过程。
- en: Variation
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变体
- en: Inspired from the authors of [this research paper](https://econpapers.repec.org/article/gamjmathe/v_3a9_3ay_3a2021_3ai_3a14_3ap_3a1625-_3ad_3a591554.htm),
    we can slightly modify this original implementation to help explore the search
    space more widely. This is done by **resetting the temperature to the initial
    temperature every time we find a new best solution**. A process which can be described
    as ***restart.*** This is essentially us carrying out several Simulated Annealing
    processes and choosing the best found solution.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从[这篇研究论文](https://econpapers.repec.org/article/gamjmathe/v_3a9_3ay_3a2021_3ai_3a14_3ap_3a1625-_3ad_3a591554.htm)的作者那里获得灵感，我们可以稍微修改这个原始实现，以帮助更广泛地探索搜索空间。这是通过**每次找到新的最佳解时重置温度到初始温度**来完成的。这一过程可以描述为***重启***。这实际上是我们执行多个模拟退火过程，并选择找到的最佳解。
- en: Modified Algorithm For TSP
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改版TSP算法
- en: 'Steps to implement the modified Simulated Annealing algorithm for the TSP:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实现修改版模拟退火算法以解决TSP问题的步骤：
- en: Get an initial solution, this is any valid route.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个初始解，这可以是任何有效的路径。
- en: Randomly select two cities and swap them to generate a new route.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机选择两个城市并交换它们以生成新路径。
- en: Use Simulated Annealing to compute the probability of whether we accept this
    new solution.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模拟退火来计算接受这个新解的概率。
- en: Continue this process for a set number of iterations and cool the temperature
    on every iteration.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续进行这一过程，迭代设置次数，并在每次迭代中降低温度。
- en: If the new solution is the best solution we have seen so far, then reset the
    temperature to the initial temperature.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果新解是迄今为止我们见过的最佳解，则将温度重置为初始温度。
- en: Always log the best overall solution.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终记录最优的总体解。
- en: Python Implementation
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python实现
- en: 'We will now implement this new modified version of Simulated Annealing to solve
    the TSP. Lets begin by generating some cities and plotting an initial solution:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将实现这个新修改版的模拟退火算法来解决TSP问题。让我们从生成一些城市并绘制初始解开始：
- en: GitHub Gist by author.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的GitHub Gist。
- en: '![](../Images/8007685ab58b5aef52d8f57cf2855b9f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8007685ab58b5aef52d8f57cf2855b9f.png)'
- en: Plot generated by author in Python.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在Python中生成的图表。
- en: 'Now lets build a Python class for the modified Simulated Annealing algorithm
    for the TSP:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为修改版的模拟退火算法构建一个Python类，以解决TSP问题：
- en: I am not the best coder, so the following snippet of code is not the most optimal
    or best practice implementation!
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我不是最好的编码者，因此以下代码片段可能不是最优或最佳实践实现！
- en: GitHub Gist by author.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: 'Running the algorithm and logging the outputs:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行算法并记录输出：
- en: GitHub Gist by author.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: '![](../Images/ae4a3ff6b1ae492fae8b9116fbf71c00.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae4a3ff6b1ae492fae8b9116fbf71c00.png)'
- en: Plot generated by author in Python.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在 Python 中生成的图表。
- en: '![](../Images/8e8e3654647a54bd82a13c2b46c30ad6.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e8e3654647a54bd82a13c2b46c30ad6.png)'
- en: Plot generated by author in Python.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在 Python 中生成的图表。
- en: From the above plots we see the temperature restarting frequently at the beginning
    of the process, but tailing off as the iterations increase. The best found route
    seems reasonable, however there is still some paths crossing over which may mean
    we have not found the global optimum. But thats the point of a meta-heuristic
    algorithm, the solution is meant to be *good-enough*!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述图表中，我们可以看到温度在过程开始时频繁重启，但随着迭代次数的增加逐渐减少。找到的最佳路线看起来合理，但仍有一些路径交叉，可能意味着我们尚未找到全局最优解。但这正是元启发式算法的要点，解决方案是*足够好的*！
- en: Summary and Further Thoughts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与进一步思考
- en: In this article we have explained the modified version of the Simulated Annealing
    algorithm. In this version, we reset the temperature to the initial temperature
    every time we find a new best solution, a process named *restart*. This approach
    provided a good solution our simulated Travelling Salesman problem that we implemented
    in Python.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们解释了模拟退火算法的修改版本。在此版本中，每次找到新的最佳解时，我们将温度重置为初始温度，这个过程称为*重启*。这种方法为我们在 Python
    中实现的旅行商问题提供了一个良好的解决方案。
- en: 'Full code used in this article is available at my GitHub here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的完整代码可以在我的 GitHub 上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/sa_with_restart.py?source=post_page-----a19a53d914c8--------------------------------)
    [## Medium-Articles/sa_with_restart.py at main · egorhowell/Medium-Articles'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Medium-Articles/sa_with_restart.py at main · egorhowell/Medium-Articles](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/sa_with_restart.py?source=post_page-----a19a53d914c8--------------------------------)'
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我在 Medium 博客/文章中使用的代码。通过创建一个账户来贡献开发 egorhowell/Medium-Articles：
- en: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/sa_with_restart.py?source=post_page-----a19a53d914c8--------------------------------)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/sa_with_restart.py?source=post_page-----a19a53d914c8--------------------------------)'
- en: Another Thing!
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一件事！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的新闻简报，[**Dishing the Data**](https://dishingthedata.substack.com/)，每周分享成为更好数据科学家的技巧。没有“虚假”或“诱饵”，只有来自实践中的数据科学家的纯粹可操作的见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----a19a53d914c8--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Dishing The Data | Egor Howell | Substack](https://newsletter.egorhowell.com/?source=post_page-----a19a53d914c8--------------------------------)'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读 Dishing The Data，作者 Egor Howell 的 Substack 出版物...
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----a19a53d914c8--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----a19a53d914c8--------------------------------)'
- en: Connect With Me!
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
- en: References and Further Reading
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献与进一步阅读
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*优化算法*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    和 [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***。'
