- en: 'Lists, Tuples, Dictionaries, And Data Frames in Python: The Complete Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表、元组、字典和数据框在 Python 中的完全指南
- en: 原文：[https://towardsdatascience.com/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee](https://towardsdatascience.com/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee](https://towardsdatascience.com/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee)
- en: All you need to know to master the most used data structures in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掌握 Python 中最常用的数据结构所需的所有知识
- en: '[](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)
    ·16 min read·May 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)
    ·阅读时间 16 分钟·2023年5月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/30c2615c37ccc11a8c930496d8e8e34a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30c2615c37ccc11a8c930496d8e8e34a.png)'
- en: Image by [Pexels](https://pixabay.com/it/users/pexels-2286921/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1284475)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1284475)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Pexels](https://pixabay.com/it/users/pexels-2286921/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1284475)
    提供，发布在 [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1284475)
- en: If you’ve started learning Python, whether you want to be a Software Engineer
    or a Data Scientist, you absolutely need to master data structures.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经开始学习 Python，无论你想成为一名软件工程师还是数据科学家，你都必须掌握数据结构。
- en: Python has a lot of data structures that allow us to store data. In this article,
    we’ll dive into the most used ones. So, if you’re starting your career and need
    to learn data structures, then this article is definitely for you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 具有许多数据结构，可以用来存储数据。在本文中，我们将深入了解最常用的数据结构。所以，如果你刚开始你的职业生涯，并需要学习数据结构，那么这篇文章绝对适合你。
- en: 'Here’s what you’ll find here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你会找到的内容：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Lists
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: Definition and creation examples
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义和创建示例
- en: 'In Python, a list is a collection of ordered elements that can be of any type:
    strings, integers, floats, etc…'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，列表是一个有序元素的集合，这些元素可以是任何类型：字符串、整数、浮点数等……
- en: 'To create a list, the items must be inserted between square brackets and separated
    by a comma. For example, here’s how we can create a list of integers:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个列表，项必须放在方括号中，并用逗号分隔。例如，这里是如何创建一个整数列表的：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But lists can also have “mixed” types stored inside them. For example, let’s
    create a list with both integers and strings:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但列表也可以包含“混合”类型的数据。例如，创建一个同时包含整数和字符串的列表：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To create a list, we can also use the Python built-in function `list()`. This
    is how we can use it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个列表，我们还可以使用 Python 内置函数 `list()`。这就是我们如何使用它的：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This built-in function is very useful in some particular cases. For example,
    let’s say we want to create a list of numbers in the range (1–10). Here’s how
    we can do so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个内置函数在某些特殊情况下非常有用。例如，假设我们想创建一个范围在 (1–10) 之间的数字列表。以下是我们可以这样做的方式：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, let’s see how we can manipulate lists.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何操作列表。
- en: Lists manipulation
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表操作
- en: 'Thanks to the fact that lists are mutable, we have lots of possibilities to
    manipulate them. For example, let’s say we have a list of names, but we made a
    mistake and we want to change one. Here’s how we can do so:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列表是可变的，我们有很多可能性来操作它们。例如，假设我们有一个名字列表，但我们犯了一个错误，需要更改其中一个。以下是我们可以这样做的方式：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, in the above example, we’ve changed the first name of the list from James
    to Alexander.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在上述示例中，我们将列表中的第一个名字从James更改为Alexander。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, suppose we’ve forgotten a name. We can add it to our list like so:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们忘记了一个名字。我们可以这样将其添加到我们的列表中：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we need to concatenate two lists, we have two possibilities: the `concatenate`
    method or the `extend()`one. Let’s see them:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要连接两个列表，我们有两种选择：`concatenate`方法或`extend()`方法。让我们来看一下：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So, this method creates a list that is the sum of other lists. Let’s see the
    `extend()` method:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这种方法创建了一个包含其他列表之和的列表。我们来看一下`extend()`方法：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, the results are the same, but the syntax is different. This method
    extends `list1` with `list2`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，结果是相同的，但语法不同。此方法用`list2`扩展了`list1`。
- en: 'If we want to remove elements, we have two possibilities: we can use the `remove()`
    method or `del`. Let’s see them:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要删除元素，我们有两种选择：可以使用`remove()`方法或`del`。让我们来看看：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s see the other method:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看另一种方法：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So, we get the same results with both methods, but `remove()` gives us the possibility
    to explicitly write the element to remove, while `del` needs to access the position
    of the element of the list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用这两种方法获得相同的结果，但`remove()`方法允许我们明确指定要删除的元素，而`del`则需要访问列表中元素的位置。
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: List comprehension
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表推导式
- en: 'There are a lot of cases where we need to create lists starting from existing
    lists, generally applying some filters to the existing data. To do so, we have
    two possibilities:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多情况下我们需要从现有列表中创建新列表，一般是对现有数据应用一些过滤条件。为此，我们有两种选择：
- en: We use loops and statements.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用循环和语句。
- en: We use list comprehension.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用列表推导式。
- en: Practically, they are both the same way to write the same thing, but list comprehension
    is more concise and elegant.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，它们都是写相同内容的方式，但列表推导式更简洁、更优雅。
- en: 'But before we discuss these methods, you may need a deep overview of loops
    and statements. Here are a couple of articles I wrote in the past that may help
    you:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但在讨论这些方法之前，你可能需要深入了解循环和语句。这里有几个我过去写的文章，可能会对你有帮助：
- en: '[](/loops-and-statements-in-python-a-deep-understanding-with-examples-2099fc6e37d7?source=post_page-----7ab54d4819ee--------------------------------)
    [## Loops and statements in Python: A deep understanding (with examples)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/loops-and-statements-in-python-a-deep-understanding-with-examples-2099fc6e37d7?source=post_page-----7ab54d4819ee--------------------------------)
    [## Python中的循环和语句：深入理解（带示例）'
- en: When they appear to be understood, there is something more
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当它们看起来被理解时，还有更多的内容
- en: 'towardsdatascience.com](/loops-and-statements-in-python-a-deep-understanding-with-examples-2099fc6e37d7?source=post_page-----7ab54d4819ee--------------------------------)
    [](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----7ab54d4819ee--------------------------------)
    [## Python Loops: A Complete Guide On How To Iterate in Python'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/loops-and-statements-in-python-a-deep-understanding-with-examples-2099fc6e37d7?source=post_page-----7ab54d4819ee--------------------------------)
    [](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----7ab54d4819ee--------------------------------)
    [## Python循环：如何在Python中遍历的完整指南
- en: Leveraging the power of loops in Python
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用Python中循环的力量
- en: towardsdatascience.com](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----7ab54d4819ee--------------------------------)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----7ab54d4819ee--------------------------------)
- en: Now, let’s see a couple of examples using loops and statements directly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们直接使用循环和语句来看几个例子。
- en: 'Suppose we have a shopping list. We want our program to print that we love
    one fruit and that we don’t like the others on the list. Here’s how we can do
    so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个购物清单。我们希望我们的程序打印出我们喜欢一种水果，而不喜欢清单上的其他水果。以下是实现的方法：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Another example could be the following. Suppose we have a list of numbers and
    we want to print just the even ones. Here’s how we can do so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子可能是这样的。假设我们有一个数字列表，并且我们只想打印出偶数。以下是实现的方法：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So, in the above example, we’ve created a list of numbers. Then, we’ve created
    an empty list that is used after the loop to append all the even numbers. This
    way, we’ve created a list of even numbers from a list with “general” numbers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在上述示例中，我们创建了一个数字列表。然后，我们创建了一个空列表，在循环后用于附加所有偶数。这样，我们就从包含“常规”数字的列表中创建了一个偶数列表。
- en: 'Now… this way of creating new lists with loops and statements is a little “heavy”.
    I mean: it requires a lot of code. We can gain the same results in a more concise
    way using list comprehension.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在……这种使用循环和语句创建新列表的方式有点“繁琐”。我的意思是：这需要很多代码。我们可以使用列表推导式以更简洁的方式获得相同的结果。
- en: 'For example, to create a list with even numbers we can use list comprehension
    like so:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个包含偶数的列表，我们可以使用如下的列表推导式：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'So, list comprehension creates directly a new list and we define the condition
    inside it. As we can see, we gain the same result as before, but in just one line
    of code: not bad!'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，列表推导式直接创建一个新列表，并在其中定义条件。如我们所见，我们获得了与之前相同的结果，但只用了一行代码：不错吧！
- en: 'Now, let’s create a list with comments on the fruit I love (and the fruit I
    don’t) with list comprehension:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用列表推导式创建一个包含我喜欢的水果（和我不喜欢的水果）的列表：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: So, we gained the same result as before, but with just a line of code. The only
    difference is that here we’ve printed a list (because list comprehension creates
    one!), while before we just printed the results.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们获得了与之前相同的结果，但只用了一行代码。唯一的区别是这里我们打印了一个列表（因为列表推导式创建了一个！），而之前我们只是打印了结果。
- en: List of lists
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表的列表
- en: There is also the possibility to create lists of lists, that are lists nested
    into one list. This possibility is useful when we want to represent listed data
    as a unique list.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还有可能创建列表的列表，即嵌套在一个列表中的列表。当我们想将列出的数据表示为一个唯一的列表时，这种可能性很有用。
- en: 'For example, consider we want to create a list of students and their grades.
    We could create something like that:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想创建一个学生及其成绩的列表。我们可以创建如下的内容：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is a useful notation if, for example, we want to calculate the mean grade
    for each student. We can do it like so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想计算每个学生的平均成绩，这是一种有用的表示方式。我们可以这样做：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tuples
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: 'Tuples are another data structure type in Python. They are defined with round
    brackets and, as lists, can contain any data type separated by a comma. So, for
    example, we can define a tuple like so:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是Python中的另一种数据结构类型。它们用圆括号定义，并且像列表一样，可以包含任何数据类型，数据类型之间用逗号分隔。例如，我们可以这样定义一个元组：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The difference between a tuple and a list is that a tuple is **immutable**.
    This means that the elements of a tuple can not be changed. So, for example, if
    we try to append a value to a tuple we get an error:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 元组和列表的区别在于元组是**不可变**的。这意味着元组的元素不能被更改。例如，如果我们尝试向元组中添加一个值，我们会得到一个错误：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So, since we can’t modify tuples, they are useful when we want our data to be
    immutable; for example, in situations where we don’t want to make mistakes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，由于我们不能修改元组，它们在我们希望数据不可变时很有用；例如，在我们不想犯错误的情况下。
- en: 'A practical example may be the cart of an e-commerce. We may want this kind
    of data to be immutable so that we don’t make any mistakes when manipulating it.
    Imagine someone bought a shirt, a pair of shoes, and a watch from our e-commerce.
    We may report this data with quantity and price into one tuple:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个实际的例子可能是电子商务的购物车。我们可能希望这种数据不可变，以便在操作时不犯错误。假设有人从我们的电子商务网站购买了一件衬衫、一双鞋子和一只手表。我们可以将这些数据以数量和价格的形式记录在一个元组中：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Of course, to be precise, this is a tuple of tuples.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，准确地说，这是一个元组的元组。
- en: Since tuples are immutable, they are more efficient in terms of performance,
    meaning they save our computer’s resources. But when it comes to manipulation,
    we can use the exact same code as we’ve seen for lists, so we won’t write it again.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于元组是不可变的，它们在性能方面更高效，这意味着它们节省了计算机的资源。但在操作时，我们可以使用与列表相同的代码，所以我们不会再写一次。
- en: 'Finally, similarly to lists, we can create a tuple with the built-in function
    `tuple()` like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，类似于列表，我们可以用内置函数`tuple()`创建一个元组，如下所示：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Dictionaries
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: 'A dictionary is a way to store data that are coupled as keys and values. This
    is how we can create one:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是一种以键和值对存储数据的方式。我们可以这样创建一个字典：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: So, we create a dictionary with curly brackets and we store in it a couple of
    keys and values separated by a colon. The couples keys-values are then separated
    by a comma.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们用大括号创建一个字典，并在其中存储一对对的键和值，用冒号分隔。键值对用逗号分隔。
- en: Now, let’s see how we can manipulate dictionaries.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何操作字典。
- en: Dictionaries manipulation
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典操作
- en: 'Both keys and values of a dictionary can be of any type: strings, integers,
    or floats. So, for example, we can create a dictionary like so:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键和值可以是任何类型：字符串、整数或浮点数。例如，我们可以这样创建一个字典：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'But we can create one also like that:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也可以这样创建：
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Choosing the type for values and keys depends on the problem we need to solve.
    Anyway, considering the dictionary we’ve seen before, we can access both values
    and keys like so:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 选择值和键的类型取决于我们需要解决的问题。无论如何，考虑到我们之前看到的字典，我们可以这样访问值和键：
- en: '[PRE28]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: So, if our dictionary is called `numbers` we access its key with `numbers.keys()`.
    And with `numbers.values()` we access its values. Also, note that we have created
    a list with the keys and a tuple with the values using the notation we’ve seen
    before.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们的字典叫做 `numbers`，我们用 `numbers.keys()` 访问其键。使用 `numbers.values()` 我们可以访问其值。此外，请注意，我们使用之前看到的表示法创建了一个包含键的列表和一个包含值的元组。
- en: 'Of course, we can also iterate over dictionaries. For example, suppose we want
    to print the values that are greater than a certain threshold:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们也可以遍历字典。例如，假设我们想打印出大于某个阈值的值：
- en: '[PRE29]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Like lists, dictionaries are mutable. So, if we want to add a value to a dictionary
    we have to define the key and the value to add to it. We can do it like so:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 像列表一样，字典是可变的。因此，如果我们想向字典中添加一个值，我们必须定义要添加的键和值。我们可以这样做：
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To modify a value of a dictionary, we need to access its key:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改字典的值，我们需要访问其键：
- en: '[PRE31]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To delete a pair key-value from a dictionary, we need to access its key:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要从字典中删除一对键值，我们需要访问其键：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Nested dictionaries
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套字典
- en: 'We have seen before that we can create lists of lists and tuples of tuples.
    Similarly, we can create nested dictionaries. Suppose, for example, we want to
    create a dictionary to store the data related to a class of students. We can do
    it like so:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看到，我们可以创建列表的列表和元组的元组。类似地，我们可以创建嵌套字典。假设，例如，我们想创建一个字典来存储与一个班级学生相关的数据。我们可以这样做：
- en: '[PRE33]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: So, the data of each student are represented as a dictionary and all the dictionaries
    are stored in a unique dictionary, representing the classroom. As we can see,
    the values of a dictionary can even be lists (or tuples, if we’d like). In this
    case, we’ve used lists to store the grades of each student.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个学生的数据表示为一个字典，所有字典都存储在一个唯一的字典中，表示整个课堂。正如我们所见，字典的值甚至可以是列表（或者元组，如果我们愿意的话）。在这个例子中，我们使用列表来存储每个学生的成绩。
- en: 'To print the values of one student, we just need to remember that, from the
    perspective of the classroom dictionary, we need to access the key and, in this
    case, the keys are the students themselves. This means we can do it like so:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印一个学生的值，我们只需记住，从课堂字典的角度来看，我们需要访问键，在这种情况下，键就是学生本身。这意味着我们可以这样做：
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Dictionaries comprehension
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典推导
- en: Dictionary comprehension allows us to create dictionaries concisely and efficiently.
    It’s similar to list comprehension but, instead of creating a list, it creates
    a dictionary.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 字典推导允许我们简洁高效地创建字典。它类似于列表推导，但不创建列表，而是创建一个字典。
- en: 'Suppose we have a dictionary where we have stored some objects and their prices.
    We want to know the objects that cost less than a certain threshold. We can do
    it like so:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个字典，其中存储了一些物品及其价格。我们想知道价格低于某个阈值的物品。我们可以这样做：
- en: '[PRE35]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'So, the syntax to use dictionary comprehension is:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，使用字典推导的语法是：
- en: '[PRE36]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Where iterable is any iterable Python object. It can be a list, a tuple, another
    dictionary, etc…
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 iterable 是任何可迭代的 Python 对象。它可以是一个列表、一个元组、另一个字典等…
- en: Creating dictionaries with the “standard” method would require a lot of code,
    with conditions, loops, and statements. Instead, as we can see, dictionary comprehension
    allows us to create a dictionary, based on conditions, with just one line of code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“标准”方法创建字典会需要大量的代码，包括条件、循环和语句。相反，如我们所见，字典推导允许我们仅用一行代码，基于条件创建字典。
- en: 'Dictionary comprehension is especially useful when we need to create a dictionary
    retrieving data from other sources or data structures. For example, say we need
    to create a dictionary retrieving values from two lists. We can do it like so:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 字典推导在我们需要从其他来源或数据结构中检索数据来创建字典时特别有用。例如，假设我们需要从两个列表中检索值来创建一个字典。我们可以这样做：
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Data frames
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据框
- en: '![](../Images/04d94eadfc725ebd55688664c54ce861.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04d94eadfc725ebd55688664c54ce861.png)'
- en: 'A data frame is the representation of tabular data. Image from the Panda’s
    website here: [https://pandas.pydata.org/docs/getting_started/index.html](https://pandas.pydata.org/docs/getting_started/index.html)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框是表格数据的表示。图片来源于熊猫网站：[https://pandas.pydata.org/docs/getting_started/index.html](https://pandas.pydata.org/docs/getting_started/index.html)
- en: 'A data frame is a two-dimensional data structure consisting of columns and
    rows. So, it is somehow similar to a spreadsheet or a table in an SQL database.
    They have the following characteristics:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框是由列和行组成的二维数据结构。因此，它在某种程度上类似于电子表格或 SQL 数据库中的表格。它们具有以下特点：
- en: Each row represents an individual observation or record.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每一行代表一个独立的观察或记录。
- en: Each column represents a variable or a specific attribute of the data.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每一列代表一个变量或数据的特定属性。
- en: They have labeled rows (called indexes) and columns, making it easy to manipulate
    the data.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们有标记的行（称为索引）和列，使得操作数据变得容易。
- en: The columns can contain different types of data, like integers, strings, or
    floats. Even a single column can contain different data types.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列可以包含不同类型的数据，如整数、字符串或浮点数。即使是单列也可以包含不同的数据类型。
- en: While data frames are the typical data structure used in the context of Data
    Analysis and Data Science, it is not uncommon that a Python Software Engineer
    may need to manipulate a data frame, and this is why we’re having an overview
    of data frames.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据框是数据分析和数据科学中使用的典型数据结构，但 Python 软件工程师也可能需要操作数据框，这就是我们进行数据框概述的原因。
- en: 'Here’s how a data frame appears:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数据框的显示方式：
- en: '![](../Images/9a79c8ab7583d84cf5c90c917a03e7aa.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9a79c8ab7583d84cf5c90c917a03e7aa.png)'
- en: A data frame. Image by Federico Trotta.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框。图片由 Federico Trotta 提供。
- en: So, on the left (in the blue rectangle) we can see the indexes, meaning the
    row counts. We can then see that a data frame can contain different types of data.
    In particular, the column “Age” contains different data types (one string and
    two integers).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在左侧（蓝色矩形中）我们可以看到索引，意味着行数。我们可以看到数据框可以包含不同类型的数据。特别是，列“Age”包含不同的数据类型（一个字符串和两个整数）。
- en: Basic data frames manipulation with Pandas
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Pandas 进行基本的数据框操作
- en: While recently a new library to manipulate data frames called “Polars” started
    circulating, here we’ll see some data manipulation with Pandas which is still
    the most used as of today.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最近开始流行一种叫做“Polars”的新库来操作数据框，但在这里我们将看到一些 Pandas 的数据操作，Pandas 仍然是目前使用最广泛的库。
- en: 'First of all, generally, we can create data frames by importing data from `.xlsx`
    or `.cvs` files. In Pandas we can do it like so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通常我们可以通过从 `.xlsx` 或 `.cvs` 文件导入数据来创建数据框。在 Pandas 中我们可以这样做：
- en: '[PRE38]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If we want to create a data frame:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想创建一个数据框：
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is the data frame we’ve shown above. So, as we can see, we first create
    a dictionary, and then we convert it to a data frame with the method `pd.DataFrame()`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们上面展示的数据框。所以，正如我们所见，我们首先创建一个字典，然后用 `pd.DataFrame()` 方法将其转换为数据框。
- en: 'We have three possibilities to visualize a data frame. Suppose we have a data
    frame called `df`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三种方式来可视化数据框。假设我们有一个名为 `df` 的数据框：
- en: The first one is `print(df)`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个是 `print(df)`。
- en: The second one is `df.head()` that will show the first 5 rows of our data frame.
    In case we have a data frame with a lot of rows, we can show more than the first
    five. For example, `df.head(20)` shows the first 20.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个是`df.head()`，它将显示我们数据框的前 5 行。如果我们有一个包含很多行的数据框，我们可以显示超过前五行。例如，`df.head(20)`显示前
    20 行。
- en: The third one is `df.tail()` that works exactly like `head()`, but this shows
    the last rows.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个是`df.tail()`，它的功能与`head()`完全相同，但它显示的是最后几行。
- en: 'On the side of visualization, using the above `df`, this is what `df.head()`
    shows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视化方面，使用上述 `df`，这是 `df.head()` 显示的内容：
- en: '![](../Images/c29ad0eb546983665b1aae6dc4c6c565.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c29ad0eb546983665b1aae6dc4c6c565.png)'
- en: What df.head() shows. Image by Federico Trotta.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`df.head()` 显示的内容。图片由 Federico Trotta 提供。'
- en: 'And this is what `print(df)` shows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `print(df)` 显示的内容：
- en: '![](../Images/b2673cd6325428d6a8b64a2c8c52618e.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2673cd6325428d6a8b64a2c8c52618e.png)'
- en: What print(df) shows. Image by Federico Trotta.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`print(df)` 显示的内容。图片由 Federico Trotta 提供。'
- en: In the case of small data sets like this one, the difference is only a matter
    of taste (I prefer `head()` because it “shows the tabularity” of data). But in
    the case of large data sets, `head()` is way much better. Try it, and let me know!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在像这样的小数据集的情况下，差异只是个人喜好（我更喜欢`head()`因为它“显示数据的表格性”）。但在大数据集的情况下，`head()`要好得多。试试看，告诉我！
- en: Consider that Pandas is a very wide library, meaning it allows us to manipulate
    tabular data in a variety of ways, so it’d need to be treated alone. Here we want
    to show just the very basics, so we’ll see how we can add and delete a column
    (the columns of a data frame are also called “Pandas series”).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到Pandas是一个非常广泛的库，这意味着它允许我们以多种方式操作表格数据，因此需要单独处理。这里我们只是展示最基本的内容，所以我们将学习如何添加和删除列（数据框的列也称为“Pandas系列”）。
- en: 'Suppose we want to add a column to the data frame `df` we’ve seen above that
    is telling us if people are married or not. We can do it like so:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想向上面提到的数据框`df`添加一列，表示人们是否已婚。我们可以这样做：
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And showing the head we have:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 显示头部，我们得到：
- en: '![](../Images/cc1912fe5f8149e37fcfe4b078ec6221.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc1912fe5f8149e37fcfe4b078ec6221.png)'
- en: The data frame df with the marital status. Image by Federico Trotta.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 包含婚姻状况的数据框df。图片由Federico Trotta提供。
- en: 'To delete one column:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 删除一列：
- en: '[PRE42]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And we get:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到：
- en: '![](../Images/2da1e2c02460c0505484f6ac000518ee.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2da1e2c02460c0505484f6ac000518ee.png)'
- en: The data frame without the column related to employment data. Image by Federico
    Trotta.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 删除与就业数据相关的列后的数据框。图片由Federico Trotta提供。
- en: Note that we need to use `axis=1` because here we are telling Pandas to remove
    columns and since a data frame is a two-dimensional data structure, `axis=1` represents
    the vertical direction.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们需要使用`axis=1`，因为这里我们告诉Pandas删除列，并且由于数据框是二维数据结构，`axis=1`表示垂直方向。
- en: 'Instead, if we want to drop a row, we need to use `axis=0`. For example, suppose
    we want to delete the row associated with the index 1 ( that is the second row
    because, again, we start counting from 0):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果我们想要删除一行，我们需要使用`axis=0`。例如，假设我们想删除索引为1的行（即第二行，因为我们从0开始计数）：
- en: '[PRE43]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And we get:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到：
- en: '![](../Images/17e4b949cc3b9e2e85656ae2e5e4e0d6.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17e4b949cc3b9e2e85656ae2e5e4e0d6.png)'
- en: The data frame without the second row. Image by Federico Trotta.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 删除第二行后的数据框。图片由Federico Trotta提供。
- en: Conclusions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: So far, we’ve seen the most used data structures in Python. These are not the
    only ones, but surely the most used.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了Python中最常用的数据结构。这些不是唯一的数据结构，但肯定是最常用的。
- en: 'Also, there is no right or wrong in using one rather than another: we just
    need to understand what data we need to store and use the best data structure
    for this type of task.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用其中一种数据结构并没有对错之分：我们只需要理解我们需要存储什么数据，并选择最适合这种任务的数据结构。
- en: I hope this article helped you understand the usage of these data structures
    and when to use them.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章帮助您理解这些数据结构的使用以及何时使用它们。
- en: '**FREE PYTHON EBOOK:**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**免费PYTHON电子书：**'
- en: 'Started learning Python Data Science but struggling with it? [***Subscribe
    to my newsletter and get my free ebook: this will give you the right learning
    path to follow to learn Python for Data Science with hands-on experience.***](https://federico-trotta.ck.page/a3970f33f4)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 开始学习Python数据科学但感到困难？[***订阅我的新闻通讯并获取我的免费电子书：这将为您提供正确的学习路径，帮助您通过实践学习Python数据科学。***](https://federico-trotta.ck.page/a3970f33f4)
- en: 'Enjoyed the story? Become a Medium member for 5$/month [through my referral
    link](https://medium.com/@federicotrotta/membership): I’ll earn a small commission
    to no additional fee to you:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这个故事吗？成为Medium会员，享受5$/月 [通过我的推荐链接](https://medium.com/@federicotrotta/membership)：我将获得一小笔佣金，但不会增加您的额外费用：
- en: '[](https://medium.com/@federicotrotta/membership?source=post_page-----7ab54d4819ee--------------------------------)
    [## Join Medium with my referral link - Federico Trotta'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@federicotrotta/membership?source=post_page-----7ab54d4819ee--------------------------------)
    [## 使用我的推荐链接加入Medium - Federico Trotta'
- en: Read every story from Federico Trotta (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Federico Trotta的每一个故事（以及Medium上的其他成千上万的作家）。您的会员费用直接支持…
- en: medium.com](https://medium.com/@federicotrotta/membership?source=post_page-----7ab54d4819ee--------------------------------)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@federicotrotta/membership?source=post_page-----7ab54d4819ee--------------------------------)
