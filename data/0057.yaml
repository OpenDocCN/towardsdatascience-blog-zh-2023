- en: Lazy Evaluation Using Recursive Python Generators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用递归 Python 生成器的惰性求值
- en: 原文：[https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803?source=collection_archive---------16-----------------------#2023-01-04](https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803?source=collection_archive---------16-----------------------#2023-01-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803?source=collection_archive---------16-----------------------#2023-01-04](https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803?source=collection_archive---------16-----------------------#2023-01-04)
- en: Can recursive functions use *“lazy evaluation”*? — Yes, they can — Using Python’s
    generator functions!
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归函数能否使用 *“惰性求值”*？——是的，它们可以——通过使用 Python 的生成器函数！
- en: '[](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----9ee6af0dd803---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    ·5 min read·Jan 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9ee6af0dd803&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----9ee6af0dd803---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4cbd6b36e62a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&user=Martin+Heinz&userId=4cbd6b36e62a&source=post_page-4cbd6b36e62a----9ee6af0dd803---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    · 5 min read · 2023年1月4日 [](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9ee6af0dd803&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&user=Martin+Heinz&userId=4cbd6b36e62a&source=-----9ee6af0dd803---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ee6af0dd803&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&source=-----9ee6af0dd803---------------------bookmark_footer-----------)![](../Images/84db954d46d54cd7ea660368b0737fa3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9ee6af0dd803&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flazy-evaluation-using-recursive-python-generators-9ee6af0dd803&source=-----9ee6af0dd803---------------------bookmark_footer-----------)![](../Images/84db954d46d54cd7ea660368b0737fa3.png)'
- en: Generated with Stable Diffusion
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Stable Diffusion 生成
- en: We all are familiar with Python’s generators and all their benefits. But, what
    if I told you that we can make them even better by combining them with recursion?
    So, let’s see how we can use them to implement *“lazy recursion”* and supercharge
    what we already do with generators in Python!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都熟悉 Python 的生成器及其所有好处。但如果我告诉你，我们可以通过将其与递归结合来让它们更强大呢？那么，让我们来看看如何利用它们实现 *“惰性递归”*
    并极大提升我们在 Python 中使用生成器的能力！
- en: Why Even Bother?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要费心呢？
- en: Before we get into the code, let’s first ask ourselves *“Why even bother? Do
    we really need recursive generators?”*. And the answer is… it depends. Naturally,
    a recursive generator will share both pros and cons of both generators as well
    as normal recursive functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入代码之前，先问自己 *“为什么要费心？我们真的需要递归生成器吗？”*。答案是……这要看情况。自然，递归生成器将共享生成器以及普通递归函数的优缺点。
- en: For the generators, the number one reason why one would use them is *“lazy”*
    evaluation — that is — computing elements one at the time rather than all at once.
    As for the recursion, it simply makes sense for certain algorithms or problems
    which it can solve elegantly and succinctly, such as tree traversal.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生成器，使用它们的首要原因是*“懒惰”*计算——即一次计算一个元素，而不是一次性计算所有元素。至于递归，它在某些算法或问题中显得非常合理，可以优雅而简洁地解决问题，比如树遍历。
- en: Therefore, a situations where recursive generators would make sense are naturally
    recursive algorithms that might process large amount of data or elements, and
    therefore consume a lot of memory if run *“eagerly”*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，递归生成器会显得合理的情况自然是递归算法，这些算法可能处理大量数据或元素，因此如果*“贪婪”*地运行，可能会消耗大量内存。
