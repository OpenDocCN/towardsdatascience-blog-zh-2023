- en: A Site-Search Engineer’s Journal Approaching Relevance Challenges in Elasticsearch
    Query Construction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一位站点搜索工程师的日志：在 Elasticsearch 查询构建中应对相关性挑战
- en: 原文：[https://towardsdatascience.com/a-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5?source=collection_archive---------17-----------------------#2023-06-13](https://towardsdatascience.com/a-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5?source=collection_archive---------17-----------------------#2023-06-13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5?source=collection_archive---------17-----------------------#2023-06-13](https://towardsdatascience.com/a-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5?source=collection_archive---------17-----------------------#2023-06-13)
- en: Working with Elasticsearch is like playing Lego
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Elasticsearch 的工作就像是在玩乐高
- en: '[](https://medium.com/@quy.dinh3195?source=post_page-----1eca29283da5--------------------------------)[![Quý
    Đinh](../Images/40c7da5cfcc56d79d2b6f45ea70a26ee.png)](https://medium.com/@quy.dinh3195?source=post_page-----1eca29283da5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1eca29283da5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1eca29283da5--------------------------------)
    [Quý Đinh](https://medium.com/@quy.dinh3195?source=post_page-----1eca29283da5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@quy.dinh3195?source=post_page-----1eca29283da5--------------------------------)[![Quý
    Đinh](../Images/40c7da5cfcc56d79d2b6f45ea70a26ee.png)](https://medium.com/@quy.dinh3195?source=post_page-----1eca29283da5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1eca29283da5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1eca29283da5--------------------------------)
    [Quý Đinh](https://medium.com/@quy.dinh3195?source=post_page-----1eca29283da5--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F44a47bf76e4e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5&user=Qu%C3%BD+%C4%90inh&userId=44a47bf76e4e&source=post_page-44a47bf76e4e----1eca29283da5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1eca29283da5--------------------------------)
    ·15 min read·Jun 13, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1eca29283da5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5&user=Qu%C3%BD+%C4%90inh&userId=44a47bf76e4e&source=-----1eca29283da5---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F44a47bf76e4e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5&user=Qu%C3%BD+%C4%90inh&userId=44a47bf76e4e&source=post_page-44a47bf76e4e----1eca29283da5---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1eca29283da5--------------------------------)
    · 15 分钟阅读 · 2023年6月13日 [](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1eca29283da5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5&user=Qu%C3%BD+%C4%90inh&userId=44a47bf76e4e&source=-----1eca29283da5---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1eca29283da5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5&source=-----1eca29283da5---------------------bookmark_footer-----------)![](../Images/f943af89e64f6e075864489a6e3eb919.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1eca29283da5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5&source=-----1eca29283da5---------------------bookmark_footer-----------)![](../Images/f943af89e64f6e075864489a6e3eb919.png)'
- en: Photo by [Mourizal Zativa](https://unsplash.com/@mourimoto?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mourizal Zativa](https://unsplash.com/@mourimoto?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 上的照片'
- en: Intro
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Over the last 22 months I have been working as a site-search engineer who uses
    Elasticsearch to help improve relevance in our restaurant platform. I have deployed
    in total 83 releases including 3 major versions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的22个月里，我一直担任站点搜索工程师，使用 Elasticsearch 来帮助提高我们餐饮平台的相关性。我总共部署了83个版本，包括3个主要版本。
- en: With roughly one release per week, I can say that not only our search engine
    is much better than it was 2 years ago, but I have also learned quite a lot. Though
    still far from a great search engine, here are some things worth sharing in my
    opinion. More importantly, I really want to get feedback about them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每周大约发布一次，我可以说我们的搜索引擎不仅比两年前好得多，而且我也学到了很多。虽然仍然远未达到一个伟大的搜索引擎，但在我看来，有些事情值得分享。更重要的是，我非常希望得到反馈。
- en: This blog post is to provide an approach to design the Elasticsearch query template
    to deal with common site-search problems including searching for matches across
    different fields, boosting results and testing. Together we will identify issues
    with the default approach and then gradually come up with a new one to address
    the issues altogether.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客文章旨在提供一种设计 Elasticsearch 查询模板的方法，以处理常见的网站搜索问题，包括跨不同字段的匹配、结果提升和测试。我们将共同识别默认方法的问题，然后逐步提出一种新的方法来解决这些问题。
- en: 'This Github repo: [https://github.com/dvquy13/elasticsearch-sharing](https://github.com/dvquy13/elasticsearch-sharing)
    contains the examples and code discussed in this post.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Github 仓库：[https://github.com/dvquy13/elasticsearch-sharing](https://github.com/dvquy13/elasticsearch-sharing)
    包含了本文讨论的示例和代码。
- en: Main
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要
- en: We now play the role of a search engineer for a restaurant platform, which allows
    diners to discover and make reservation for their next meals. We haven’t had much
    experience, but luckily the app does not require accuracy level of Google from
    the start. The key is to make gradual visible progresses!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在扮演餐厅平台搜索工程师的角色，该平台允许 diners 发现并预订他们的下一餐。我们经验不多，但幸运的是，该应用程序一开始并不要求像 Google
    那样的准确度。关键是逐步取得可见的进展！
- en: Alright, let’s dive into it. First off, we make sure user can search for restaurant
    by name. Here we can rely on the simple default `query-match` to get the job done.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们*深入探讨*。首先，我们确保用户可以通过名称搜索餐厅。在这里，我们可以依赖简单的默认 `query-match` 来完成这个工作。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above snippet can be run at Kibana’s Dev Tools > Console, which will be
    available at your `localhost:5601` if you follow the repo.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段可以在 Kibana 的 Dev Tools > Console 中运行，如果你按照仓库的说明，你会在 `localhost:5601`
    找到它。
- en: The code is self-explained. We ask Elasticsearch to return restaurants whose
    name contains `vietnamese`. And we get back one result for `Vietnamese Pho Noodle`.
    No problems.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 代码是自解释的。我们要求 Elasticsearch 返回名称中包含 `vietnamese` 的餐厅。我们收到了一个 `Vietnamese Pho
    Noodle` 的结果。没有问题。
- en: But we quickly find out that name is not the only place we want to look for
    when user submit a query. Given keyword`vietnamese` we should also return the
    restaurant `Sa Bi Chuong`, because it’s a Vietnamese restaurant as tagged in the
    `cuisine`. A `multi_match` query allows us to do exactly that.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们很快发现，名称并不是我们在用户提交查询时想要查看的唯一地方。鉴于关键字 `vietnamese`，我们还应该返回餐厅 `Sa Bi Chuong`，因为它在
    `cuisine` 中标记为越南餐厅。一个 `multi_match` 查询可以准确地做到这一点。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Problems with the default TFIDF
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认 TFIDF 的问题
- en: Notice the above scores. The first one is like 4 times higher than the second,
    indicating that it’s much more relevant given query `vietnamese`. One might have
    an assumption that because matching at multiple fields will make the score higher.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意上述分数。第一个分数比第二个高出大约 4 倍，这表明它与查询 `vietnamese` 的相关性要高得多。有人可能会假设，因为在多个字段中匹配会使分数更高。
- en: Whenever we have doubts, we can use Elasticsearch `explain` to get a detailed
    breakdown of its scoring components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们有疑问时，可以使用 Elasticsearch 的 `explain` 来获取详细的评分组成部分说明。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Above we can see that Vietnamese Pho Noodle is on top because of the default
    implementation of TFIDF that penalizes the matching at cuisine field because there
    are multiple restaurants with `cuisine=Vietnamese` while there are only one restaurant
    with `name=Vietnamese`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上面我们可以看到 `Vietnamese Pho Noodle` 排在最前面，是因为默认实现的 TFIDF 处罚了在菜系字段中的匹配，因为有多个餐厅的
    `cuisine=Vietnamese`，而只有一个餐厅的 `name=Vietnamese`。
- en: Diving into the `_explanation` block, we realize that score difference originates
    from the TFIDF matching output for `restaurant_name`. This is expected as the
    algorithm assumes that a keyword is a better signal if it is not common and usually
    found in a lot of documents (sort of a solution to automatically handle stopwords).
    In our examples, both the restaurants have cuisine `Vietnamese` so according to
    TFIDF, that match does not say much about the relevance of the documents.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 深入到 `_explanation` 块，我们意识到分数差异源于 `restaurant_name` 的 TFIDF 匹配输出。这是预期的，因为该算法假设如果关键词不常见且通常在许多文档中找到（类似于自动处理停用词的解决方案），那么它是更好的信号。在我们的例子中，两家餐厅都有越南菜，因此根据
    TFIDF，这种匹配并不能说明文档的相关性。
- en: Whether we should encourage this behavior is a question. Is it true that having
    Vietnamese in the name make one restaurant more “Vietnamese” than the other?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否应该鼓励这种行为是一个问题。真的有越南人名在名称中会使一个餐厅比另一个更“越南”吗？
- en: Another problem with TFIDF is that it takes into account the length of the field.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 TFIDF 的问题是它考虑了字段的长度。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can find the detailed and lengthy result in Appendix #1 at the end of the
    post. In short, we see that the result ranks restaurant Vietnamese Pho first and
    then Vietnamese Pho Noodle. Analyzing the component scores indicates that the
    key difference is that Vietnamese Pho has `length=2` (words) while Vietnamese
    Pho Noodle has `length=3`. It feels unintuitive since we know that the second
    restaurant has higher rating, given that both, in practice, are equally matching
    to user’s keyword.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以在帖子末尾的附录 #1 中找到详细而冗长的结果。简而言之，我们看到结果将越南河粉餐厅排名第一，然后是越南河粉面。分析组成分数表明，主要区别在于越南河粉的
    `length=2`（词）而越南河粉面的 `length=3`。这感觉不直观，因为我们知道第二家餐厅的评分更高，考虑到实际情况，两者匹配用户关键字一样。'
- en: Reranking (boosting) with function_score
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 function_score 进行重新排序（提升）
- en: As we talk about `rating`, we can wrap our query with`function_score` to incorporate
    that information to modify our matching scores, hence have a better control over
    our ranking.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论 `rating` 时，我们可以用 `function_score` 包裹我们的查询，以将该信息纳入修改匹配分数，从而更好地控制我们的排名。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The higher rating restaurant is on top now. But how about restaurant `Sa Bi
    Chuong` with `rating=5`? It being the last result seems like we haven’t boosted
    “enough”.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 高评分的餐厅现在排在前面了。但是餐厅 `Sa Bi Chuong` 的 `rating=5` 怎么样？它作为最后的结果似乎我们没有“足够”提升。
- en: We might start tinkering a bit more with `function_score` to make that happen.
    Here is one of the implementation which models the boosting in a non-linear manner
    to effectively apply a strong boost on documents with `rating=5`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会开始稍微调整 `function_score`，以使其发生。这是一种实现方式，以非线性方式模拟提升，从而有效地在评分为 `5` 的文档上应用强烈提升。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We might ponder that: “Isn’t the function boosting now looking too arbitrary?
    Will it work for other cases?”. Indeed, that’s the question we should ask ourselves.
    Overtime, with more and more requirements, our query template will grow in complexity,
    leading to conflicts between the modifications we make.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会思考：“现在的函数提升看起来不是太武断了吗？它对其他情况有效吗？”确实，这是我们应该问自己的问题。随着越来越多的需求，我们的查询模板将变得越来越复杂，导致我们所做的修改之间的冲突。
- en: Let’s move to the next example to illustrate what I mean by “conflict”.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下一个例子，来说明我所说的“冲突”。
- en: The complexity comes with fuzzy matching
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂性随着模糊匹配而来
- en: While not vital, the ability to handle user’s typo is always a nice-to-have
    feature, especially when they are now familiar with smart search engine like Google’s.
    Elasticsearch has a built-in mechanism called `fuzzy matching`, which is configurable
    with the option `fuzziness`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必需的，但处理用户的拼写错误总是一个不错的功能，尤其是当他们现在熟悉像 Google 这样的智能搜索引擎时。Elasticsearch 有一个名为
    `fuzzy matching` 的内置机制，可以通过选项 `fuzziness` 进行配置。
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice that we just created a query template instead of running a query. We
    can now invoke the query with paramaters, which is a nice feature Elasticsearch
    introduces to make our code look less overwhelming. Like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们只是创建了一个查询模板而不是运行一个查询。现在我们可以使用参数调用查询，这是 Elasticsearch 引入的一个很好的功能，可以使我们的代码看起来不那么令人畏惧。就像这样：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The above query returns our expected Vietnamese restaurant given a typo keyword
    `vietnames`. Under the hood, fuzzy matching uses [Levenshtein edit distance](https://www.elastic.co/guide/en/elasticsearch/reference/8.7/query-dsl-fuzzy-query.html),
    which measures similarity between strings by the number of modifications one make
    to make one become another. In our example, we just need to add one letter `e`
    at the end to make `vietnames` become `vietnamese`. Quite an easy task for the
    algorithm. One might also argue that it’s quite easy for our developers as well.
    2 lines of code and a new beautiful feature.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询返回了我们期望的越南餐馆，给定一个拼写错误的关键词`vietnames`。在后台，模糊匹配使用了[Levenshtein编辑距离](https://www.elastic.co/guide/en/elasticsearch/reference/8.7/query-dsl-fuzzy-query.html)，它通过修改一个字符串使其变成另一个字符串的次数来衡量字符串之间的相似度。在我们的例子中，我们只需要在末尾添加一个字母`e`，将`vietnames`变成`vietnamese`。对算法来说，这是一项非常简单的任务。也许有人会争辩说，这对我们的开发人员来说也很简单。2行代码和一个新的漂亮特性。
- en: Well, the interesting bit lies elsewhere. One day, our sales team suddenly comes
    to us with a complaint that search result is wrong. People are getting Japanese
    BBQ restaurants over Korean ones even when they explicitly search for `kbbq` (which
    is a common acronym for `korean bbq`).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，真正有趣的地方在于别处。一天，我们的销售团队突然向我们投诉搜索结果错误。即使人们明确搜索`kbbq`（这是`korean bbq`的常见缩写），他们也会得到日本烧烤餐馆而不是韩国烧烤餐馆。
- en: 'Here are the restaurants:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 餐馆如下：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Query:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 查询：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Result:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To understand what is happening, we need to enable `explain=true` to see what
    contributes to the final scores. As this time the output is too verbose, here
    are the findings:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解发生了什么，我们需要启用`explain=true`来查看是什么因素贡献了最终的分数。由于这次输出过于冗长，以下是发现：
- en: The keyword matching score (before boosting) for the `Best BBQ in town` restaurant
    is 0.8, less than the 1.2 of `Park Hang-seo's KBBQ`
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Best BBQ in town`餐馆的关键词匹配分数（在提升之前）为0.8，低于`Park Hang-seo''s KBBQ`的1.2'
- en: So if no boosting applied, we will see `Park Hang-seo's KBBQ` restaurant ranks
    at the first position
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有应用提升，我们会看到`Park Hang-seo's KBBQ`餐馆排在第一位
- en: But then the boosting from `rating` modifies the score, leading to the ordering
    as we can see
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但随后，来自`rating`的提升修改了分数，导致我们看到的排序结果
- en: One way to frame the issue is that we have imperfect boosting. Say we have a
    better formula that strikes the right balances, then the problem should be solved.
    But it’s close to impossible to guarantee that the new formula will not cause
    any other issues. We don’t want these kinds of issue creep into the system without
    any notice and then some day being flagged out by stakeholders. We want to be
    the first to be aware of those issues, especially whenever we make any changes.
    Therefore, before discussing potential solutions, I hope we all agree that the
    very next important thing we should do is (yes, you are probably thinking about
    the same thing as I am) setting up a testing/evaluation mechanism.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一种框架化问题的方法是我们目前的提升算法不完美。假设我们有一个更好的公式，能够取得正确的平衡，那么问题应该可以解决。但几乎无法保证新公式不会引发其他问题。我们不希望这些问题在没有任何警示的情况下悄然进入系统，然后在某一天被利益相关者标记出来。我们希望成为第一个发现这些问题的人，特别是每当我们进行任何更改时。因此，在讨论潜在解决方案之前，我希望我们都同意，接下来我们应该做的非常重要的事情是（是的，你可能和我有一样的想法）建立一个测试/评估机制。
- en: How should we create test cases for this search application?
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们应该如何为这个搜索应用创建测试用例？
- en: IMHO, the first challenge is about moving data. The queries and the documents
    can both grow over time, so a static mock dataset might not be a very good representative
    of the search relevance anymore after a month. The next bit is related to our
    mindset. Sometimes we might need to think about whether we need 100% passed test
    cases in order to fix this new very urgent issue. For example, there are cases
    where if you fix some issues then the search result orderings of the other test
    cases might alter a bit. If we hard-code the rankings, then we might sweat ourselves
    trying to tweak our query template. But in practice a lot of the times we neither
    don’t need the ranking to be exactly pre-defined nor we are perfectly sure about
    which ordering is actually optimal. We should consider using a soft mechanism
    where we quantify the relevance of the system and using threshold instead.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，第一个挑战是数据迁移。查询和文档都可能随着时间的推移而增长，因此静态模拟数据集可能在一个月后不再很好地代表搜索相关性。接下来的问题与我们的思维方式有关。有时我们可能需要考虑是否需要
    100% 通过测试用例才能解决这个新的紧急问题。例如，有些情况下，如果你修复了一些问题，其他测试用例的搜索结果排序可能会稍有改变。如果我们硬编码排名，那么我们可能会为了调整查询模板而苦苦挣扎。但实际上，我们往往不需要排名完全预定义，也不完全确定哪个排序实际上是最优的。我们应该考虑使用一种软机制，通过量化系统的相关性并使用阈值来代替。
- en: 'Here we look at how we can use Elasticsearch Ranking Evaluation API to implement
    such evaluation scheme:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们将讨论如何使用 Elasticsearch 排名评估 API 来实现这种评估方案：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let’s try to better our search by introducing changes that move the evaluation
    score closer to the perfect 1.0.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过引入一些变更来使评估分数更接近完美的 1.0。
- en: Our revised search model
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们修订后的搜索模型
- en: 'Before start designing a new query template, we can take a step back and really
    think about how we should model the search engine. Below are the essentials:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始设计新的查询模板之前，我们可以先退一步，真正思考一下我们应该如何建模搜索引擎。以下是要点：
- en: Exact matching will always surface on top of not-exact ones like fuzzy matching;
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 精确匹配总是会排在模糊匹配等非精确匹配之上；
- en: Exact matches does not take into account field length or word/document frequencies.
    If two documents have the same exact match in a field, they should have the same
    keyword matching score;
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 精确匹配不考虑字段长度或词汇/文档频率。如果两个文档在某个字段中的精确匹配相同，它们应该具有相同的关键词匹配分数；
- en: 'Within the same level of matching (whether exact or fuzzy), while the initial
    keyword matching scores should be the same, they can be reranked by certain modifiers
    such as distance, popularity, … However, the modified scores should not make the
    final score to exceed the base score of the upper level, e.g. modifed fuzzy score
    should not be greater than exact base score. This is to ensure the essential #1.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在相同的匹配级别内（无论是精确匹配还是模糊匹配），虽然初始的关键词匹配分数应该是相同的，但可以通过距离、流行度等某些修正器进行重新排序。然而，修正后的分数不应使最终分数超过上层级别的基准分数，例如，修正后的模糊分数不应大于精确基准分数。这是为了确保本质上的
    #1。'
- en: If you watch football, this resembles how the leagues such as Premiere League
    rank their teams. No matter how much more goals the team L has scored compared
    to team M’s or their head-to-head results, if team M has more points than team
    M has a higher ranking. The other measures are for tie-breaker only.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看足球，这类似于英超等联赛如何排名他们的球队。不论球队 L 比球队 M 多进了多少球，或者两队之间的交锋结果如何，如果球队 M 的积分比球队 L
    高，那么球队 M 排名会更高。其他措施仅用于决胜负。
- en: This understanding can be then transferred to how we use Elasticsearch to express
    our model.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种理解可以转化为我们如何使用 Elasticsearch 来表达我们的模型。
- en: 'One approach is to use `dis_max` query combined with `constant_score` query.
    The idea is to categorize each type of matching into different levels of score
    where one level will have twice the score of the below level. The documents fall
    into one level of matching (tie) will be reranked by modifiers but eventually
    the new scores will not exceed the upper base score. Here is the new query template:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是使用 `dis_max` 查询结合 `constant_score` 查询。其思路是将每种匹配类型分类到不同的分数级别，其中一个级别的分数是下一个级别的两倍。落入某一匹配级别的文档（平局）将由修正器重新排序，但最终新的分数不会超过上层基准分数。以下是新的查询模板：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When we re-run the evaluation, we can observe that the normalized DCG metric
    now has score equal to 1.0, denoting a perfect accuracy!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重新运行评估时，可以观察到标准化的 DCG 指标现在的分数等于 1.0，表示完美的准确性！
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This blog post focuses on putting you in the shoe of an Elasticsearch engineer
    who has to derive query templates that fit the needs of a site-search enginer.
    We have briefly coverred the following topics:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客文章重点是让你置身于需要衍生适合站点搜索引擎需求的查询模板的Elasticsearch工程师角色。我们简要覆盖了以下主题：
- en: Keyword matching with multiple fields
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多字段关键词匹配
- en: Understanding default Elasticsearch scoring
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解默认Elasticsearch评分
- en: Problems with the default TFIDF
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认TFIDF的问题
- en: Boosting search results by attributes
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过属性提升搜索结果
- en: Fuzzy matching
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊匹配
- en: Elasticsearch query templateEvaluation with Rank Evaluation API
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elasticsearch查询模板评估与排名评估API
- en: Constructing query with `dis_max`and `constant_score`
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`dis_max`和`constant_score`构造查询
- en: Though definitely not optimal, I hope that parts of the blog post help you come
    closer to utilize Elasticsearch to help solve your own problems.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然绝对不是最佳的，我希望博客中的某些部分能帮助你更接近利用Elasticsearch解决自己的问题。
- en: 'I also much appreciate any comments or feedbacks. If you want to discuss more,
    please comment on this post or open an issue in the Github repo: [https://github.com/dvquy13/elasticsearch-sharing](https://github.com/dvquy13/elasticsearch-sharing).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我也非常感激任何评论或反馈。如果你想深入讨论，请在此帖子下评论或在Github仓库中打开一个问题：[https://github.com/dvquy13/elasticsearch-sharing](https://github.com/dvquy13/elasticsearch-sharing)。
- en: Thanks all!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢大家！
- en: Appendix
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: '#1: Detailed breakdown of default TFIDF matching where length of the field
    value affect overall matching score'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '#1：详细解析默认TFIDF匹配，其中字段值的长度影响整体匹配分数'
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
