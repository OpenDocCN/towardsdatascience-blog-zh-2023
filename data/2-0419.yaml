- en: Build a Convolutional Neural Network from Scratch using Numpy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Numpy从零开始构建卷积神经网络
- en: 原文：[https://towardsdatascience.com/build-a-convolutional-neural-network-from-scratch-using-numpy-139cbbf3c45e](https://towardsdatascience.com/build-a-convolutional-neural-network-from-scratch-using-numpy-139cbbf3c45e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-a-convolutional-neural-network-from-scratch-using-numpy-139cbbf3c45e](https://towardsdatascience.com/build-a-convolutional-neural-network-from-scratch-using-numpy-139cbbf3c45e)
- en: Master computer vision by building a CNN from scratch all by yourself
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过从零开始构建CNN来掌握计算机视觉
- en: '[](https://medium.com/@riccardo.andreoni?source=post_page-----139cbbf3c45e--------------------------------)[![Riccardo
    Andreoni](../Images/5e22581e419639b373019a809d6e65c1.png)](https://medium.com/@riccardo.andreoni?source=post_page-----139cbbf3c45e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----139cbbf3c45e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----139cbbf3c45e--------------------------------)
    [Riccardo Andreoni](https://medium.com/@riccardo.andreoni?source=post_page-----139cbbf3c45e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@riccardo.andreoni?source=post_page-----139cbbf3c45e--------------------------------)[![Riccardo
    Andreoni](../Images/5e22581e419639b373019a809d6e65c1.png)](https://medium.com/@riccardo.andreoni?source=post_page-----139cbbf3c45e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----139cbbf3c45e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----139cbbf3c45e--------------------------------)
    [Riccardo Andreoni](https://medium.com/@riccardo.andreoni?source=post_page-----139cbbf3c45e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----139cbbf3c45e--------------------------------)
    ·8 min read·Nov 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----139cbbf3c45e--------------------------------)·8分钟阅读·2023年11月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e4cdce3bc89847e967f252d44f3c1394.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4cdce3bc89847e967f252d44f3c1394.png)'
- en: 'These colored windows remind me of the layers of CNNs and their filters. Image
    source: [unsplash.com](https://unsplash.com/photos/photo-of-green-leafed-plants-inside-building-CuEvrPd3NYc).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些彩色窗户让我想起了CNN的层及其过滤器。图片来源：[unsplash.com](https://unsplash.com/photos/photo-of-green-leafed-plants-inside-building-CuEvrPd3NYc)。
- en: As **Computer Vision** applications are now present everywhere in our daily
    lives, it is fundamental for every Data Science practitioner to **understand their
    functioning principles** and **familiarize themselves with them**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**计算机视觉**应用现在无处不在，每个数据科学从业者都必须**了解其工作原理**和**熟悉它们**。
- en: In [this article](/building-a-deep-neural-network-from-scratch-using-numpy-4f28a1df157a),
    I built a **Deep Neural Network** without relying on popular modern deep learning
    libraries like Tensorflow, Pytorch, and Keras. I then classified images of handwritten
    digits with it. While the achieved results didn’t reach state-of-the-art levels,
    they were nevertheless satisfactory. Now, I want to take a **further step** in
    developing a [**Convolutional Neural Network**](https://en.wikipedia.org/wiki/Convolutional_neural_network)
    (CNN) using only the Python library [**Numpy**](https://numpy.org/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[这篇文章](/building-a-deep-neural-network-from-scratch-using-numpy-4f28a1df157a)中，我在不依赖流行的现代深度学习库如Tensorflow、Pytorch和Keras的情况下构建了**深度神经网络**。我随后用它对手写数字进行分类。尽管取得的结果未达到最先进的水平，但仍然令人满意。现在，我想在使用Python库[**Numpy**](https://numpy.org/)的情况下迈出**进一步一步**，开发一个[**卷积神经网络**](https://en.wikipedia.org/wiki/Convolutional_neural_network)（CNN）。
- en: 'Python deep learning libraries, like the ones mentioned above, are **extremely
    powerful tools**. However, as a downside, they shield Data Science practitioners
    from understanding the low-level functioning principles of Neural Networks. This
    is especially true with CNNs, as their **processes are less intuitive** compared
    with the classical fully connected networks. The only way to address this issue
    is to get our hands dirty and implement CNNs ourselves: this is the motivation
    behind this task.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python深度学习库，如上所述，**是极其强大的工具**。然而，作为一个缺点，它们使数据科学从业者无法理解神经网络的低级工作原理。这一点在CNN中尤其明显，因为它们的**过程比经典的全连接网络更不直观**。解决这一问题的唯一方法就是亲自动手实现CNN：这就是这项任务的动机。
- en: This article is intended as a practical, **hands-on guide** rather than a comprehensive
    guide of CNN functioning principles. As a consequence, the theoretical part is
    concise and mostly serves the understanding of the practical section. For this
    reason, you will find an exhaustive list of resources at the end of this post.
    I warmly invite you to check them out!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章旨在作为一个实用的、**动手指南**，而不是一个全面的CNN工作原理指南。因此，理论部分简明扼要，主要服务于实际部分的理解。为此，你会在本文末尾找到一份详尽的资源列表。我热情邀请你去查看它们！
- en: Convolutional Neural Networks
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷积神经网络
- en: Convolutional Neural Networks use a specific architecture and operations that
    make them **well-suited for tasks related to images**, such as image classification,
    object localization, image segmentation, and more. Their design roughly **mirrors
    the human visual cortex**, where each biological neuron responds to only a small
    portion of the visual field. Moreover, higher-level neurons react to the outputs
    of lower-level neurons.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 卷积神经网络使用一种特定的架构和操作，使其**非常适合与图像相关的任务**，例如图像分类、目标定位、图像分割等。它们的设计大致**反映了人类视觉皮层**，其中每个生物神经元仅响应视觉场的一个小部分。此外，更高级的神经元对低级神经元的输出做出反应。
- en: While classical fully connected networks can handle image-related tasks, their
    effectiveness degrades significantly when applied to medium or large images due
    to the large number of parameters they require. For instance, a 200x200 pixel
    image contains 40,000 pixels, and if the first layer of the network has 1,000
    units, it results in 40 million weights just for that layer. This challenge is
    highly alleviated by CNNs as they implement **partially connected layers** and
    **weight sharing**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然经典的全连接网络可以处理与图像相关的任务，但当应用于中等或大型图像时，由于所需的参数数量众多，它们的效果会显著下降。例如，一个200x200像素的图像包含40,000个像素，如果网络的第一层有1,000个单元，仅这一层就需要4000万个权重。这个挑战通过CNN得到了极大的缓解，因为它们实现了**部分连接层**和**权重共享**。
- en: 'The **main components** of a Convolutional Neural Network are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 卷积神经网络的**主要组件**是：
- en: '**Convolutional layers**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卷积层**'
- en: '**Pooling layers**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**池化层**'
- en: Convolutional Layer
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卷积层
- en: A convolutional layer consists of a **set of filters**, also known as **kernels**.
    When applied to the input of the layer, these filters **modify the original images**
    in specific ways.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 卷积层由一组**滤波器**组成，也称为**内核**。当应用于层的输入时，这些滤波器**以特定方式修改原始图像**。
- en: 'A filter can be described as a matrix, whose elements values define the king
    of modification applied to the original image. For instance, a 3x3 kernel, like
    the following one, highlights the vertical edges of the image:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个滤波器可以描述为一个矩阵，其元素值定义了对原始图像应用的修改类型。例如，如下的3x3内核突出了图像的垂直边缘：
- en: '![](../Images/d1e5ad6d3a441e8ad32efb9c42af310b.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1e5ad6d3a441e8ad32efb9c42af310b.png)'
- en: 'This kernel instead accentuates the horizontal edges:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个内核则强调水平边缘：
- en: '![](../Images/d2ae91eef1c774f3439d13b504f95d01.png)![](../Images/1c898cb273b97f9024c4a000078a319c.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2ae91eef1c774f3439d13b504f95d01.png)![](../Images/1c898cb273b97f9024c4a000078a319c.png)'
- en: 'Source: [Wikipedia](https://en.wikipedia.org/wiki/Kernel_(image_processing)).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '来源: [维基百科](https://en.wikipedia.org/wiki/Kernel_(image_processing)).'
- en: It is important to note that the values of the elements of these kernels are
    not manually chosen but are parameters that the network learns during the training
    process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这些内核的元素值不是手动选择的，而是网络在训练过程中学习的参数。
- en: The main function of convolutions is to isolate and highlight the different
    features present in the image. Later on, dense layers will use these features.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 卷积的主要功能是隔离并突出图像中存在的不同特征。稍后，密集层将使用这些特征。
- en: Pooling Layer
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 池化层
- en: Pooling layers are **more simple than convolutional layers**. Their purpose
    is to minimize the computational load and memory usage of the network. They achieve
    this task by **downsizing the input image’s dimensions**. Reducing the dimension
    results in a reduction of the number of parameters that the CNN has to learn.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 池化层**比卷积层更简单**。它们的目的是最小化网络的计算负担和内存使用。它们通过**缩小输入图像的尺寸**来实现这一目标。降低维度会减少CNN需要学习的参数数量。
- en: Pooling layers also employ a kernel, typically of dimension 2x2, to aggregate
    a section of the input image into a single value. For example, a 2x2 max pooling
    kernel extracts 4 pixels from the input image and outputs only the pixel with
    the maximum value.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 池化层也使用一个通常为 2x2 维度的内核，将输入图像的一部分汇聚成一个值。例如，一个 2x2 的最大池化内核从输入图像中提取 4 个像素，并只输出值最大的像素。
- en: Python Implementation
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 实现
- en: You can find all the code shown in this section in [my GitHub repository](https://github.com/andreoniriccardo/CNN-from-scratch).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[我的 GitHub 仓库](https://github.com/andreoniriccardo/CNN-from-scratch)中找到本节中展示的所有代码。
- en: '[](https://github.com/andreoniriccardo/CNN-from-scratch?source=post_page-----139cbbf3c45e--------------------------------)
    [## GitHub - andreoniriccardo/CNN-from-scratch: Convolutional Neural Network from
    scratch'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/andreoniriccardo/CNN-from-scratch?source=post_page-----139cbbf3c45e--------------------------------)
    [## GitHub - andreoniriccardo/CNN-from-scratch: 从零开始构建卷积神经网络'
- en: Convolutional Neural Network from scratch. Contribute to andreoniriccardo/CNN-from-scratch
    development by creating an…
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从零开始构建卷积神经网络。通过创建一个…来贡献到 andreoniriccardo/CNN-from-scratch 的开发。
- en: github.com](https://github.com/andreoniriccardo/CNN-from-scratch?source=post_page-----139cbbf3c45e--------------------------------)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/andreoniriccardo/CNN-from-scratch?source=post_page-----139cbbf3c45e--------------------------------)
- en: The concept behind this implementation consists of creating **Python classes**
    that represent the **convolutional and max pooling layers**. Furthermore, as this
    CNN will be applied to the famous open-source [MNIST](https://datahub.io/machine-learning/mnist_784#readme)
    dataset, I also create a specific class for the Softmax layer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该实现的概念是创建**Python 类**，代表**卷积层和最大池化层**。此外，由于此 CNN 将应用于著名的开源 [MNIST](https://datahub.io/machine-learning/mnist_784#readme)
    数据集，我还创建了一个用于 Softmax 层的特定类。
- en: Within each class, I define the methods that perform the forward propagation
    and backpropagation steps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个类中，我定义了执行前向传播和反向传播步骤的方法。
- en: As a final step, the layers are appended into a list to build the final Convolutional
    Neural Network.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，将这些层附加到一个列表中以构建最终的卷积神经网络。
- en: Convolutional Layer Implementation
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卷积层实现
- en: 'The code defining a **convolutional layer** is the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 定义**卷积层**的代码如下：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The constructor of the `**ConvolutionLayer**` class takes as inputs the number
    of kernels of the convolutional layer and their size. I assume to use only squared
    kernels of size `**kernel_size**`by `**kernel_size**`**.**
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`**ConvolutionLayer**`类的构造函数接收卷积层的内核数量及其大小作为输入。我假设只使用大小为`**kernel_size**`乘`**kernel_size**`的方形内核**。'
- en: Later, I generate random filters of shape `**(kernel_num, kernel_size, kernel_size)**`and,
    for normalization, I divide each element by the squared kernel size.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我生成形状为`**(kernel_num, kernel_size, kernel_size)**`的随机滤波器，并通过将每个元素除以平方的内核大小进行归一化。
- en: The `**patches_generator()**`method is a generator. It yields the portions of
    the images on which to perform each convolution step.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`**patches_generator()**`方法是一个生成器。它生成要进行每个卷积步骤的图像部分。'
- en: The `**forward_prop()**`method carries out the convolution for each patch generated
    by the method above.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`**forward_prop()**`方法对上述方法生成的每个补丁执行卷积操作。'
- en: Finally, the `**back_prop()**`method is responsible for computing the gradient
    of the loss function with respect to each layer’s weight. It also updates the
    weights’ values correspondingly. Note that the loss function mentioned here is
    not the global loss of the network. Instead, it consists of the loss function
    passed by the max pooling layer to the previous convolutional layer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`**back_prop()**`方法负责计算损失函数相对于每层权重的梯度。它还相应地更新权重值。请注意，这里提到的损失函数不是网络的全局损失，而是由最大池化层传递给前一个卷积层的损失函数。
- en: To demonstrate the actual effect of this class, I created an instance of the
    `**ConvolutionLayer**`with 32 filters, each of size 3x3\. Then I apply the forward
    propagation method on an image, resulting in an output consisting of 32 slightly
    smaller images.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示此类的实际效果，我创建了一个 `**ConvolutionLayer**` 实例，具有 32 个滤波器，每个滤波器的大小为 3x3。然后，我在一张图像上应用前向传播方法，得到由
    32 张稍小的图像组成的输出。
- en: 'The initial input image has size 28x28 pixels and is depicted below:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 初始输入图像的大小为 28x28 像素，如下图所示：
- en: '![](../Images/c97ac38d0a385b1777f571765503b480.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c97ac38d0a385b1777f571765503b480.png)'
- en: Image by the author.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者。
- en: 'Once I applied the `**forward_prop()**`method of the convolutional layer, I
    obtain 32 images of size 26x26 pixels. One of them is the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我应用了卷积层的`**forward_prop()**`方法，我得到32张26x26像素的图像。其中之一如下：
- en: '![](../Images/5bdbb28eca65137bdebfb6f35b5f46d1.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5bdbb28eca65137bdebfb6f35b5f46d1.png)'
- en: Image by the author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: As you can see, the image has been reduced in size, and the clarity of the handwritten
    digit is worse. It is important to note that this operation was carried out by
    a filter containing random values, and therefore, it does not accurately represent
    the actual step performed by a trained CNN. Still, you can grasp the idea of how
    these convolutions yield smaller images where the distinctive features of the
    object are isolated.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，图像的尺寸被缩小了，手写数字的清晰度更差了。需要注意的是，这一操作是由一个包含随机值的滤波器执行的，因此，它并不准确代表经过训练的CNN实际执行的步骤。尽管如此，你可以理解这些卷积如何产生较小的图像，在这些图像中对象的特征被分离出来。
- en: Max Pooling Layer Implementation
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Max Pooling层实现
- en: 'I used Numpy to define the Max Pooling layer class as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Numpy定义了Max Pooling层类，如下所示：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The constructor method only assigns the kernel size value. The following methods
    operate similarly to the ones defined for the convolutional layer, with the main
    difference being that the `**back_prop()**`method doesn’t update any weight values.
    In fact, the pooling layer **doesnt’ rely on weights** to perform the aggregation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 构造方法仅分配内核大小值。接下来的方法与卷积层中定义的方法类似，主要的区别在于`**back_prop()**`方法不会更新任何权重值。实际上，池化层**不依赖于权重**来执行聚合操作。
- en: Softmax Layer Implementation
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Softmax层实现
- en: Finally, I define the **Softmax layer**. It has the objective of **flattening
    the output volume** obtained from the final max pooling layer. The Softmax layer
    outputs 10 values, which can be interpreted as the probability of an image corresponding
    to the 0-to-9 digits.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我定义了**Softmax层**。它的目的是**展平**从最终Max Pooling层获得的输出体积。Softmax层输出10个值，这些值可以被解释为图像对应于0到9数字的概率。
- en: 'The implementation has the same structure of the ones seen above:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实现具有与上述相同的结构：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/c105c918d43dbe3f6f996eb14371145d.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c105c918d43dbe3f6f996eb14371145d.png)'
- en: Image by the author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Conclusions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post, we saw a **theoretical introduction** to the fundamental CNN architectural
    elements such as convolutional and pooling layers. I am positive that the step-by-step
    Python implementation will provide you a **practical understanding** of how these
    theoretical concepts can be translated into code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们看到对基本CNN架构元素如卷积层和池化层的**理论介绍**。我相信，逐步的Python实现将为你提供**实际理解**这些理论概念如何转化为代码的途径。
- en: I invite you to clone the [GitHub repository](https://github.com/andreoniriccardo/CNN-from-scratch)
    containing the code and play with the `**main.py**`script. Of course, this network
    doesn’t achieve state-of-the-art performances, as it is not built for this objective,
    but nevertheless reaches a **96% accuracy** after a few epochs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我邀请你克隆包含代码的[GitHub仓库](https://github.com/andreoniriccardo/CNN-from-scratch)并尝试`**main.py**`脚本。当然，这个网络并没有达到最先进的性能，因为它不是为了这个目标而构建的，但在经过几个训练周期后，仍然达到了**96%的准确率**。
- en: Finally, in order to expand your knowledge about CNN and computer vision, I
    suggest checking some of the resources listed below.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了扩展你对CNN和计算机视觉的知识，我建议你查看下面列出的一些资源。
- en: If you liked this story, consider following me to be notified of my upcoming
    projects and articles!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，请考虑关注我，以便了解我即将推出的项目和文章！
- en: References
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[“Deep Learning” by Ian Goodfellow, Yoshua Bengio, and Aaron Courville](https://www.deeplearningbook.org/)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“深度学习”由Ian Goodfellow, Yoshua Bengio, 和Aaron Courville](https://www.deeplearningbook.org/)'
- en: '[“Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow” by Aurélien
    Géron](https://www.oreilly.com/library/view/hands-on-machine-learning/9781492032632/)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“动手机器学习：Scikit-Learn, Keras和TensorFlow”由Aurélien Géron](https://www.oreilly.com/library/view/hands-on-machine-learning/9781492032632/)'
- en: '[“ImageNet Classification with Deep Convolutional Neural Networks” by Alex
    Krizhevsky, Ilya Sutskever, and Geoffrey Hinton](https://proceedings.neurips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“ImageNet分类与深度卷积神经网络”由Alex Krizhevsky, Ilya Sutskever, 和Geoffrey Hinton](https://proceedings.neurips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)'
- en: '[“Very Deep Convolutional Networks for Large-Scale Image Recognition” by Karen
    Simonyan and Andrew Zisserman (VGGNet)](https://arxiv.org/abs/1409.1556)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“《用于大规模图像识别的深度卷积网络》” 作者：Karen Simonyan 和 Andrew Zisserman (VGGNet)](https://arxiv.org/abs/1409.1556)'
- en: '[“Python Machine Learning” by Sebastian Raschka and Vahid Mirjalili](https://www.amazon.com/Python-Machine-Learning-scikit-learn-TensorFlow/dp/1789955750)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“《Python 机器学习》” 作者：Sebastian Raschka 和 Vahid Mirjalili](https://www.amazon.com/Python-Machine-Learning-scikit-learn-TensorFlow/dp/1789955750)'
- en: '[“Convolutional Neural Networks in Python: Master Data Science and Machine
    Learning with Modern Deep Learning in Python, Theano, and TensorFlow” by Jason
    Brownlee](https://zlibrary-asia.se/book/2740843/d253d5?dsource=recommend)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“《Python 中的卷积神经网络：掌握数据科学和机器学习，现代深度学习方法，使用 Python、Theano 和 TensorFlow》” 作者：Jason
    Brownlee](https://zlibrary-asia.se/book/2740843/d253d5?dsource=recommend)'
- en: '[“Hands-On Convolutional Neural Networks with TensorFlow 2” by Alex Gotev](https://www.amazon.com/Hands-Neural-Networks-TensorFlow-2-0/dp/1789615550)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“《动手实践卷积神经网络与 TensorFlow 2》” 作者：Alex Gotev](https://www.amazon.com/Hands-Neural-Networks-TensorFlow-2-0/dp/1789615550)'
