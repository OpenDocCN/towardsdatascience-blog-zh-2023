- en: How to Efficiently Replace Values in a Pandas DataFrame
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何高效地替换Pandas DataFrame中的值
- en: 原文：[https://towardsdatascience.com/how-to-efficiently-replace-values-in-a-pandas-dataframe-330fe832dd21](https://towardsdatascience.com/how-to-efficiently-replace-values-in-a-pandas-dataframe-330fe832dd21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-efficiently-replace-values-in-a-pandas-dataframe-330fe832dd21](https://towardsdatascience.com/how-to-efficiently-replace-values-in-a-pandas-dataframe-330fe832dd21)
- en: PYTHON
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON
- en: A walkthrough for the Pandas replace method and how you can use it in a few
    simple examples
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对Pandas替换方法的详细讲解，以及如何通过几个简单的示例使用它
- en: '[](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)[](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)[](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)
    ·8 min read·Jul 12, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)
    ·阅读时间8分钟·2023年7月12日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/53c719fb6e620fc207e6e6e861e91571.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/53c719fb6e620fc207e6e6e861e91571.png)'
- en: Image used with permission from my talented sister [ohmintyartz](https://www.instagram.com/ohmintyartz/)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我的才华横溢的姐姐[ohmintyartz](https://www.instagram.com/ohmintyartz/)提供许可使用
- en: The Pandas library has a variety of built-in methods you can use to process
    and clean data to make it ready for analysis and machine learning.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas库提供了多种内置方法，供你用来处理和清洗数据，以便为分析和机器学习做好准备。
- en: As you work with different kinds of data, you’ll often find the need to remove
    entire rows based on a condition or update part of a string value as part of your
    data cleaning. You might also want to create new columns from existing ones as
    a part of your feature engineering process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理不同类型的数据时，你经常会发现需要根据条件删除整行或更新字符串值的一部分作为数据清洗的一部分。你也可能想从现有列中创建新列，作为特征工程过程的一部分。
- en: Pandas will let you perform a variety of operations on object and string data
    types with its native transformation methods. In this piece, let’s specifically
    take a look at how you can replace entire values and/or substrings in the columns
    in your DataFrames.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas将让你使用其本地转换方法对对象和字符串数据类型执行各种操作。在这篇文章中，让我们特别看看如何在DataFrame的列中替换整个值和/或子字符串。
- en: Feel free to follow along with the examples in this piece in a notebook! You
    can download the [dataset](https://www.kaggle.com/datasets/drahulsingh/top-largest-universities/versions/1?resource=download)
    from Kaggle available free for use under the Open Data Commons Public Domain Dedication
    and License (PDDL) v1.0\. Then import and run the following and we can get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随意在笔记本中跟随本篇示例操作！你可以从Kaggle下载[数据集](https://www.kaggle.com/datasets/drahulsingh/top-largest-universities/versions/1?resource=download)，该数据集在Open
    Data Commons Public Domain Dedication and License (PDDL) v1.0下免费使用。然后导入并运行以下代码，我们可以开始了！
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/fef95aa81d4bae2014d6111cc7f1d3ed.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fef95aa81d4bae2014d6111cc7f1d3ed.png)'
- en: Image by Author
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Using “replace” in Pandas to edit substring values in a DataFrame Series (Column)
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Pandas中的“replace”来编辑DataFrame Series（列）中的子字符串值
- en: Let’s say we wanted to look at the values in the “Continent” column specifically.
    We can use the `value_counts` method in Pandas that essentially does a group by
    and on the specified column and then returns a count of unique values in the DataFrame
    for each column value. This is useful to see how many of each unique value in
    the column exists in the DataFrame.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要专门查看“Continent”列中的值。我们可以使用Pandas中的`value_counts`方法，它实际上是对指定列进行分组，然后返回每个列值在DataFrame中唯一值的计数。这对于查看列中每个唯一值在DataFrame中出现的次数非常有用。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/5eab7bb4cc77fbe3ebb22e556a5d151d.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5eab7bb4cc77fbe3ebb22e556a5d151d.png)'
- en: Image by Author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Now, let’s say we wanted to get rid of “North” America so we can just have it
    as “America”. We might want to do this to create a new column as a part of our
    feature engineering process or if we wanted to treat both North and South America
    as just one region.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想要去掉“North” America，这样我们可以将其简化为“America”。我们可能希望这样做，以便创建一个新的列作为特征工程过程的一部分，或者如果我们想将北美和南美视为一个区域。
- en: 'We could achieve this by removing “North” from the string “North America” using
    the replace method. We can try that like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用replace方法从字符串“North America”中删除“North”来实现这一点。我们可以这样尝试：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/c239e9c4720583e098931b70cb4a0d61.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c239e9c4720583e098931b70cb4a0d61.png)'
- en: Image by Author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'This didn’t work because if you only pass a string value to replace, the Pandas
    method will only replace the value found in the Series if it is an exact match.
    To do a simple match on a substring, instead, we can do this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这不起作用，因为如果你仅传递一个字符串值来替换，Pandas方法只会替换在Series中找到的完全匹配的值。要对子字符串进行简单匹配，我们可以这样做：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We did a few different things in this snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个片段中，我们做了几件不同的事情：
- en: '`to_replace` — for clarity, we pass “North” to this parameter so that in the
    future it’s clear what this method does (we know which value we are looking to
    replace;'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_replace` — 为了清楚起见，我们将“North”传递给这个参数，以便将来清楚这个方法的作用（我们知道我们要替换哪个值）；'
- en: '`value` — we pass an empty string “” here to specify that we want the method
    to replace “North” with nothing (essentially removing the substring from the original
    string);'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` — 我们在这里传递一个空字符串“”以指定我们希望该方法将“North”替换为空（实际上是从原始字符串中删除子字符串）；'
- en: '`regex` — we set this to “True”, which lets the Pandas method know that the
    string we pass to `to_replace` should be treated as a regular expression.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regex` — 我们将其设置为“True”，这让Pandas方法知道我们传递给`to_replace`的字符串应该被视为正则表达式。'
- en: 'The code now returns a new edited Pandas Series:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 代码现在返回一个新的编辑后的Pandas Series：
- en: '![](../Images/ec7c38ecb2ff8b7850bc8571ed3c85be.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec7c38ecb2ff8b7850bc8571ed3c85be.png)'
- en: Image by Author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Replacing multiple substrings in a Pandas DataFme Series
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Pandas DataFrame Series中替换多个子字符串
- en: 'We can now take our example further and look at replacing both the “North”
    and “South” substrings in the “Continent” column. To do so, you can pass a list
    of strings to the `to_replace` parameter instead of just a single string:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以进一步查看在“Continent”列中同时替换“North”和“South”子字符串。为此，你可以将一个字符串列表传递给`to_replace`参数，而不仅仅是一个字符串：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/2de0ee838a503d2d3273284cf8c366f4.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2de0ee838a503d2d3273284cf8c366f4.png)'
- en: Image by Author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Based on the output, it looks like the code successfully removed “North” and
    “South” from values in the column where those substrings were present. However,
    if we take a closer look at the modified Series with `value_counts`, you’ll get
    this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输出，代码成功地从列中删除了“North”和“South”这些子字符串。然而，如果我们更仔细地查看用`value_counts`修改后的Series，你会看到：
- en: '![](../Images/202409d76368694abf1f52703f670254.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/202409d76368694abf1f52703f670254.png)'
- en: Image by Author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: It’s a step in the right direction but not quite what we initially wanted as
    now we have “ America” for the replaced values. This is because the Pandas method
    is matching the exact string of either “North” or “South”, but the raw data actually
    includes a space after the substring.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这在正确的方向上迈出了一步，但还不完全符合我们的初衷，因为现在我们有了“ America”作为替换值。这是因为Pandas方法匹配的是“North”或“South”的精确字符串，但原始数据实际在子字符串后面包含一个空格。
- en: Using regular expressions with the Pandas replace method
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用正则表达式和Pandas替换方法
- en: 'To fix that issue, we can instead explicitly pass a regular expression as an
    argument to `to_replace` that fits our initial needs:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以显式地将一个符合我们初始需求的正则表达式作为参数传递给`to_replace`：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we pass to the `to_replace` parameter the regular expression `r"(North|South)
    "` which allows us to extract from the string values either the word “North” or
    the word “South” followed by a space.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将正则表达式`r"(North|South) "`传递给`to_replace`参数，这使我们能够从字符串值中提取出“North”或“South”后面跟一个空格的单词。
- en: 'Then, just as before, we replace that part of the string with nothing, effectively
    removing the substring from the original string. You can see the changes to the
    original Series below:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，就像之前一样，我们用空字符串替换了字符串的那部分，有效地从原始字符串中删除了子字符串。你可以看到下面对原始Series的更改：
- en: '![](../Images/5090e7fd61c1be739afb6551556cc1a7.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5090e7fd61c1be739afb6551556cc1a7.png)'
- en: Image by Author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'To check the aggregate results, if we again append `value_counts` to the above,
    we get:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查汇总结果，如果我们再次将`value_counts`附加到上述内容中，我们会得到：
- en: '![](../Images/753c6cab3458ea40795da3126abcd12a.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/753c6cab3458ea40795da3126abcd12a.png)'
- en: Image by Author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Now, we have achieved our original goal of essentially combining “North America”
    and “South America” into one value “America” by using the replace method in Pandas!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经实现了最初的目标，即通过使用Pandas中的replace方法将“North America”和“South America”合并为一个值“America”！
- en: We know this has worked as well because there were 31 values for “North America”
    and 6 values for “South America” in the original data set, as seen from the first
    time we ran `value_counts` on the continent column. When you’re implementing this
    kind of code for analysis, it would also be good to implement some kind of data
    validation or test to ensure that your processing is functioning as expected.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道这也已经生效，因为原始数据集中“North America”有31个值，“South America”有6个值，这从我们第一次对continent列运行`value_counts`中可以看到。当你为分析实现这种代码时，实施某种数据验证或测试以确保处理按预期进行也是很好的做法。
- en: Replacing values in multiple columns of a Pandas DataFrame in one function call
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在一次函数调用中替换Pandas DataFrame中多个列的值
- en: You can also call the `replace` value on a DataFrame instead of a specific series.
    This can come in handy when you want to edit substrings that exist in multiple
    columns and replace them with the same value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在DataFrame上调用`replace`值，而不是特定的系列。这在你想编辑存在于多个列中的子字符串并将它们替换为相同的值时非常方便。
- en: For example, we could take a look at replacing all the punctuation in the DataFrame
    with something that’s easier to work with for analysis. Instead of having commas,
    parentheses, and dashes, it might be easier to work with the string data if all
    the punctuation were simply underscores.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以考虑将DataFrame中的所有标点符号替换为更容易进行分析的东西。如果所有的标点符号都被简单地替换为下划线，那么处理字符串数据可能会更容易，而不是处理逗号、括号和破折号。
- en: 'To do so, we could run the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以运行以下代码：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Previously, what we passed to `to_replace` was either a list or a string (and
    a regular expression string). This time, we take advantage of the `to_replace`
    method also accepting a dictionary as a valid argument.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们传递给`to_replace`的是一个列表或字符串（以及正则表达式字符串）。这一次，我们利用了`to_replace`方法也接受字典作为有效参数的特性。
- en: In this case, we want to replace different values in a few columns of our initial
    DataFrame with an underscore. To specify this, we pass a dictionary where the
    keys are the names of the columns in the DataFrame and the values are the substrings
    we want to replace.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们想用下划线替换初始DataFrame中几个列的不同值。为此，我们传递一个字典，其中键是DataFrame中列的名称，值是我们要替换的子字符串。
- en: You’ll notice that for the “Distance / In-Person” column, we pass a list as
    a value to that key. This is because we can still specify multiple values to match.
    We also pass lists for the “Institution” and “Location” columns, since to further
    clean the data we can remove the whitespace and also replace them with underscores.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，对于“Distance / In-Person”列，我们将一个列表作为该键的值。这是因为我们仍然可以指定多个值进行匹配。我们还为“Institution”和“Location”列传递列表，以便进一步清理数据，我们可以删除空格并用下划线替换它们。
- en: We must also explicitly pass a string in the `value` parameter when using a
    dictionary in this way with the replace method, otherwise, an error will be raised.
    In this case, since we want to change all the punctuation to an underscore, we
    simply set `value="_"`. Then, just as before, to match substrings that may occur
    anywhere in the target values and not exact strings, we set `regex=True`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用这种方式与replace方法时，我们还必须明确地在`value`参数中传递一个字符串，否则将会引发错误。在这种情况下，由于我们想将所有标点符号更改为下划线，因此我们只需将`value="_"`。然后，和之前一样，为了匹配可能出现在目标值中的子字符串而不是精确字符串，我们设置`regex=True`。
- en: 'We assign this to a new cleaned DataFrame `edited_df` that looks like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其分配给一个新的清理后的DataFrame `edited_df`，其样子如下：
- en: '![](../Images/16e1dcd3d600b9a8a846073df84bc51f.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/16e1dcd3d600b9a8a846073df84bc51f.png)'
- en: Image by Author
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We’ve now successfully edited the whole DataFrame in one function call and replaced
    the punctuation and whitespace in our target columns with underscores.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功地在一次函数调用中编辑了整个DataFrame，并用下划线替换了目标列中的标点符号和空格。
- en: If you wanted to apply the changes you set to the original DataFrame without
    assigning it to a new variable as we did, the `replace` method also accepts an
    optional argument to the `inplace` parameter which you can set to “True” (because
    by default it’s set to “False”).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '- 如果你想将对原始 DataFrame 的更改应用到数据框而不是像我们所做的那样赋值给新变量，`replace`方法也接受一个可选参数`inplace`，你可以将其设置为“True”（因为默认情况下设置为“False”）。'
- en: These were just a few examples to get you started. There’s a lot more you can
    do with the replace method in Pandas to work with all kinds of data types in your
    DataFrames.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '- 这些只是一些示例来帮助你入门。使用 Pandas 中的 replace 方法可以处理 DataFrame 中的各种数据类型，还有很多其他功能可以探索。'
- en: 'Some additional things to think about when working with this method:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '- 使用此方法时还需考虑一些额外的事项：'
- en: It’s good to have checks in place to make sure the `replace` method is working
    as intended. If your raw data changes over time, the initial code you wrote to
    match substrings may no longer work, and you may have to update the regular expressions
    that you wrote so that the output is what you expect;
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 建议进行检查，以确保`replace`方法按预期工作。如果你的原始数据随着时间的推移而变化，你最初编写的匹配子字符串的代码可能不再有效，你可能需要更新你编写的正则表达式，以确保输出符合预期；'
- en: For more complicated operations where you’re matching on many different substrings
    or columns, you may want to define the dictionary separately instead of passing
    it directly in the `to_replace` parameter. This will offer better readability
    later on and then you would could also simply pass a variable like `values_to_replace`
    that contains the dictionary you defined with columns and substrings to match.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 对于更复杂的操作，例如匹配许多不同的子字符串或列，你可能想单独定义字典，而不是直接将其传递到`to_replace`参数中。这将提供更好的可读性，之后你也可以简单地传递一个变量，例如`values_to_replace`，该变量包含你定义的字典，包含列和要匹配的子字符串。'
- en: I hope you found the examples in this piece useful! Best of luck in your data
    adventures.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我希望你发现这篇文章中的示例有用！祝你在数据探险中好运。'
- en: If you enjoy my content, consider following me and **signing up to become a
    Medium member** using my referral link below. It costs only $5 a month and you’ll
    get unlimited access to everything on Medium. Signing up using my link lets me
    earn a small commission. And if you’re already signed up to follow me, thanks
    a bunch for your support!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '- 如果你喜欢我的内容，考虑通过下面的推荐链接**注册成为 Medium 会员**。每月仅需 $5，你将无限访问 Medium 上的所有内容。通过我的链接注册让我赚取一小笔佣金。如果你已经注册关注我，非常感谢你的支持！'
- en: '[](https://byrondolon.medium.com/membership?source=post_page-----330fe832dd21--------------------------------)
    [## Join Medium with my referral link - Byron Dolon'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '- [## 通过我的推荐链接加入 Medium - Byron Dolon](https://byrondolon.medium.com/membership?source=post_page-----330fe832dd21--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '- 作为 Medium 会员，你的会员费的一部分将用于你阅读的作家，并且你可以完全访问每一个故事…'
- en: byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----330fe832dd21--------------------------------)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '- [byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----330fe832dd21--------------------------------)'
- en: '*M****ore by me:*** - [5 (and a half) Lines of Code for Understanding Your
    Data with Pandas](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- *更多内容:* - [理解 Pandas 中数据的 5（加半行）行代码](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)'
- en: '- [Top 4 Repositories on GitHub to Learn Pandas](/top-4-repositories-on-github-to-learn-pandas-1008cb769f77?sk=d3acc38062490a86ecb46875342224e6)'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- [在 GitHub 上学习 Pandas 的前 4 个仓库](/top-4-repositories-on-github-to-learn-pandas-1008cb769f77?sk=d3acc38062490a86ecb46875342224e6)'
- en: '- [Check for a Substring in a Pandas DataFrame](/check-for-a-substring-in-a-pandas-dataframe-column-4b949f64852?sk=bfb5bbab11ae45c47bfb316d931c3b56)'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- [在 Pandas DataFrame 中检查子字符串](/check-for-a-substring-in-a-pandas-dataframe-column-4b949f64852?sk=bfb5bbab11ae45c47bfb316d931c3b56)'
- en: '- C[onditional Selection and Assignment With .loc in Pandas](/conditional-selection-and-assignment-with-loc-in-pandas-2a5d17c7765b?sk=e5672d859a3964c1453a1c09edca22cf)'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- [使用 Pandas 中的 .loc 进行条件选择和赋值](/conditional-selection-and-assignment-with-loc-in-pandas-2a5d17c7765b?sk=e5672d859a3964c1453a1c09edca22cf)'
- en: '- [2 Easy Ways to Get Tables From a Website With Pandas](/2-easy-ways-to-get-tables-from-a-website-with-pandas-b92fc835e741?sk=9981ddaf0785a79be893b5a1dd3e03dd)'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- [通过 Pandas 从网站获取表格的 2 种简单方法](/2-easy-ways-to-get-tables-from-a-website-with-pandas-b92fc835e741?sk=9981ddaf0785a79be893b5a1dd3e03dd)'
