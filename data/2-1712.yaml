- en: Python args, kwargs, and All Other Ways to Pass Arguments to Your Function
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的args、kwargs以及传递参数给函数的所有其他方式
- en: 原文：[https://towardsdatascience.com/python-args-kwargs-and-all-other-ways-to-pass-arguments-to-your-function-bd2acdce72b5](https://towardsdatascience.com/python-args-kwargs-and-all-other-ways-to-pass-arguments-to-your-function-bd2acdce72b5)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-args-kwargs-and-all-other-ways-to-pass-arguments-to-your-function-bd2acdce72b5](https://towardsdatascience.com/python-args-kwargs-and-all-other-ways-to-pass-arguments-to-your-function-bd2acdce72b5)
- en: Expertly design your function parameters in 6 examples
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在6个示例中巧妙设计你的函数参数
- en: '[](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)
    ·8 min read·Mar 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)
    ·阅读时长8分钟·2023年3月7日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/232d65cc44f26ade0195ce94e644d795.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/232d65cc44f26ade0195ce94e644d795.png)'
- en: What does the slash and asterisk do? (image by author)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠和星号的作用是什么？（作者提供的图片）
- en: This article is a deep dive in designing your function parameters. We’ll find
    out what `*args` and `**kwargs` do, what the function of `/` and `*`is, and how
    to design your function parameters in the best way possible. A function with well-designed
    parameters is easier to understand and use by other developers. In this article
    we explore **6 questions** that demonstrate **everything you need to know** to
    **become a parameter-expert**. Let’s code!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文深入探讨了如何设计函数参数。我们将了解`*args`和`**kwargs`的作用，`/`和`*`的功能，以及如何以最佳方式设计函数参数。设计良好的函数参数更容易被其他开发者理解和使用。在本文中，我们探讨了**6个问题**，这些问题展示了**你需要知道的一切**以**成为参数专家**。让我们开始编码吧！
- en: 'Prep: definitions and passing arguments'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作：定义和传递参数
- en: In this part we’ll quickly go through the terminology and all the ways Python
    offers to handle passing arguments to a function.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将快速了解术语和Python提供的所有处理参数传递的方法。
- en: '[](/six-levels-of-python-decorators-1f12c9067b23?source=post_page-----bd2acdce72b5--------------------------------)
    [## Understanding Python decorators: six levels of decorators from beginner to
    expert'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/six-levels-of-python-decorators-1f12c9067b23?source=post_page-----bd2acdce72b5--------------------------------)
    [## 理解Python装饰器：从初学者到专家的六个层次'
- en: How decorators work, when to use them and 6 examples in increasingly complexity
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 装饰器如何工作，何时使用它们以及6个逐渐复杂的示例
- en: towardsdatascience.com](/six-levels-of-python-decorators-1f12c9067b23?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/six-levels-of-python-decorators-1f12c9067b23?source=post_page-----bd2acdce72b5--------------------------------)
- en: What is the difference between parameters and arguments?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数和实参之间有什么区别？
- en: 'Many people use these terms interchangeably but there are differences. Parameters
    are initialized with the values that the arguments supply:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人将这些术语互换使用，但它们之间是有区别的。参数是用参数提供的值初始化的：
- en: '**parameters** are the names that are defined in the function definition'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**是定义在函数定义中的名称'
- en: '**arguments** are the values that are passed to the function'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实参**是传递给函数的值'
- en: '![](../Images/9456d0abd2f46f9d3a8fb8e4818d04a2.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9456d0abd2f46f9d3a8fb8e4818d04a2.png)'
- en: parameters are red, arguments are green (image by author)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是红色的，实参是绿色的（作者提供的图片）
- en: What are the two ways I can pass arguments?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以通过哪两种方式传递参数？
- en: You can pass arguments **positionally** and by **keywords**. In the example
    below we pass the value `hello` as a positional arg. The value `world` is passed
    with a keyword; we specify that we want to pass `world` to the `thing` parameter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过**位置**和**关键字**传递参数。在下面的示例中，我们将值`hello`作为位置参数传递。值`world`是通过关键字传递的；我们指定要将`world`传递给`thing`参数。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The difference between positional arguments and kwargs (keyword arguments)
    is that the **order** in which you pass positional arguments matter. If you call
    `the_func(''world'', ''hello'')` it will print `world hello`. The order in which
    you pass kwargs doesn’t matter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 位置参数和`kwargs`（关键字参数）之间的区别在于**顺序**。你传递位置参数的顺序很重要。如果你调用`the_func('world', 'hello')`，它会打印`world
    hello`。传递`kwargs`的顺序无关紧要：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also notice (in the last line) that you can mix and match positional and keyword
    arguments as long as the kwargs come after the positional ones.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意（在最后一行），只要`kwargs`在位置参数之后，你可以混合使用位置参数和关键字参数。
- en: Is the performance of args better than kwargs?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`args`的性能是否优于`kwargs`？'
- en: Check out the article below!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 查看下面的文章！
- en: '[](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----bd2acdce72b5--------------------------------)
    [## Args vs kwargs: which is the fastest way to call a function in Python?'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[//args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----bd2acdce72b5--------------------------------](https://towardsdatascience.com/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----bd2acdce72b5--------------------------------)
    [## Args vs kwargs：哪种是调用Python函数的最快方式？'
- en: A clear demonstration of the timeit module
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`timeit`模块的清晰演示'
- en: towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----bd2acdce72b5--------------------------------)'
- en: Designing function parameters
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计函数参数
- en: In this part we’ll answer 6 questions that demonstrate all the ways in which
    you can design your function parameters. Each answer will be accompanied by an
    example and a use-case if required.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将回答6个问题，展示你可以如何设计函数参数。每个答案将附带示例和用例（如有需要）。
- en: 1\. How do I catch all uncaught positional arguments?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 如何捕获所有未捕获的位置参数？
- en: With `*args` you can design your function in such a way that it accepts an unspecified
    number of parameters. As an example, take a look at the function below.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`*args`，你可以设计函数使其接受任意数量的参数。例如，查看下面的函数。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this function we define the first two parameters (`a` and `b`) normally.
    Then we use `*args` to pack all remaining arguments in a tuple. Think of the `*`
    as eating up all unmached arguments and pushing them into a tuple-variable called
    ‘args’. Let’s see this in action:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们正常定义了前两个参数（`a`和`b`）。然后我们使用`*args`将所有剩余的参数打包成一个元组。把`*`看作是吞噬所有不匹配的参数并将它们推送到名为‘args’的元组变量中。让我们看看实际效果：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The last call assigns the value 1 to parameter `a`, a 2 gets assigned to `b`
    and the `arg` variable gets filled with `(3, 4)`. Since this is a tuple we can
    loop over it in the function and use the values for multiplication!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的调用将值1分配给参数`a`，值2分配给`b`，`arg`变量填充为`(3, 4)`。由于这是一个元组，我们可以在函数中循环遍历它并使用这些值进行乘法运算！
- en: '[](/why-and-how-custom-exceptions-lead-to-cleaner-better-code-2382216829fd?source=post_page-----bd2acdce72b5--------------------------------)
    [## Why and how custom exceptions lead to cleaner, better code'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[//why-and-how-custom-exceptions-lead-to-cleaner-better-code-2382216829fd?source=post_page-----bd2acdce72b5--------------------------------](https://towardsdatascience.com/why-and-how-custom-exceptions-lead-to-cleaner-better-code-2382216829fd?source=post_page-----bd2acdce72b5--------------------------------)
    [## 为什么及如何自定义异常能够使代码更干净、更好'
- en: Clean up your code by creating your own custom exceptions
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过创建自己的自定义异常来清理代码
- en: towardsdatascience.com](/why-and-how-custom-exceptions-lead-to-cleaner-better-code-2382216829fd?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/why-and-how-custom-exceptions-lead-to-cleaner-better-code-2382216829fd?source=post_page-----bd2acdce72b5--------------------------------)'
- en: 2\. How do I catch all uncaught keyword arguments?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 如何捕获所有未捕获的关键字参数？
- en: 'The same trick we use in the previous part can be used to catch all remaining,
    unmatched keyword arguments:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一部分使用的相同技巧可以用于捕获所有剩余的不匹配的关键字参数：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Like with `*args`, the `**kwargs` keyword eats up all unmatched keyword arguments
    and stores them in a dictionary called `kwargs`. We can then access this dictionary
    like in the function above.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与`*args`类似，`**kwargs`关键字会吞噬所有不匹配的关键字参数，并将它们存储在名为`kwargs`的字典中。然后我们可以像在上面的函数中一样访问这个字典。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With `kwargs` we can add some extra arguments to the `introduce` function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kwargs`，我们可以向`introduce`函数添加一些额外的参数。
- en: '[](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----bd2acdce72b5--------------------------------)
    [## No Need to Ever Write SQL Again: SQLAlchemy’s ORM for Absolute Beginners'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----bd2acdce72b5--------------------------------)
    [## 永远不需要再写 SQL：SQLAlchemy 的 ORM 绝对初学者指南'
- en: With this ORM you can create a table, insert, read, delete and update data without
    writing a single line of SQL
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用这个ORM，你可以创建表、插入、读取、删除和更新数据，而无需编写一行SQL代码
- en: towardsdatascience.com](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----bd2acdce72b5--------------------------------)'
- en: 3\. How can I design my function to only accept keyword arguments?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 我如何设计函数以只接受关键字参数？
- en: 'When you really don’t want to mix up your parameters you can force your function
    to only accept keyword arguments. A perfect use-case for this could be a function
    that transfers money from one account to another. You really don’t want to pass
    the account numbers positionally because then you run the risk that a developer
    switch up the account numbers accidentally:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你真的不想混淆你的参数时，你可以强制你的函数只接受关键字参数。一个完美的使用案例可能是一个将钱从一个账户转到另一个账户的函数。你确实不想以位置方式传递账户号码，因为这样你有可能让开发者不小心交换账户号码：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the function above you see the `*` again. I think of the asterisk as eating
    up all unmatched positional arguments, but whereas `*args` stores all unmatched,
    positional arguments in the `args` tuple, the bare `*` just voids them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的函数中你再次看到`*`。我将星号视为吞噬所有不匹配的位置参数，但与`*args`将所有不匹配的位置参数存储在`args`元组中不同，裸`*`只是将这些参数作废。
- en: '[](/understanding-python-context-managers-for-absolute-beginners-4873b6249f16?source=post_page-----bd2acdce72b5--------------------------------)
    [## Understanding Python Context-Managers for Absolute Beginners'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/understanding-python-context-managers-for-absolute-beginners-4873b6249f16?source=post_page-----bd2acdce72b5--------------------------------)
    [## 了解 Python 上下文管理器：绝对初学者指南'
- en: Understand the WITH statement with lightsabers
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用光剑理解WITH语句
- en: towardsdatascience.com](/understanding-python-context-managers-for-absolute-beginners-4873b6249f16?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/understanding-python-context-managers-for-absolute-beginners-4873b6249f16?source=post_page-----bd2acdce72b5--------------------------------)'
- en: 4\. How do I design my function to only accept positional arguments?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 我如何设计函数以只接受位置参数？
- en: 'The function below is an example of a function allowing only positional arguments:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数是只允许位置参数的函数示例：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `/` in the function definition forces all parameters that precede it to
    be positional. Sidenote: this doesn’t mean that all parameters that follow the
    `/` *must* be kwarg-only; these can be positionally *and* with keywords.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 函数定义中的`/`强制所有在它之前的参数必须是位置参数。附带说明：这并不意味着所有在`/`之后的参数*必须*仅为关键字参数；这些参数可以是位置参数*和*关键字参数。
- en: '**Why would I want this? Doesn’t this decrease the readability of my code?**
    Good question! An example occasion could be when you define a function that is
    so clear that you don’t need the keyword-argument to specify what it does. For
    example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**我为什么需要这样做？这不会降低代码的可读性吗？** 好问题！一个例子可能是当你定义一个函数时，这个函数非常明确，以至于你不需要关键字参数来指定它的作用。例如：'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this example it’s pretty clear that we are checking if the memory size of
    `''a''` exceeds 100 bytes. I can’t really think of a better name to give the `x`
    parameter and it’s fine to call the function without the need to specify that
    `x=’a’`. Another function is the built-int `len` function: it would be pretty
    awkward to call `len(target_object=some_list)`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，很明显我们在检查`'a'`的内存大小是否超过100字节。我真的想不出一个更好的名字来给`x`参数，而且可以在不需要指定`x=’a’`的情况下调用这个函数。另一个例子是内置的`len`函数：调用`len(target_object=some_list)`会显得很尴尬。
- en: 'As a little extra we can change the parameter-name since we know it doesn’t
    break any calls to the function: we don’t allow kwargs. In addition we can even
    extend this function with full backward compatibility like so. The version below
    will check if any provided argument exceeds 100 bytes.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外说明，我们可以更改参数名，因为我们知道这样不会破坏对函数的调用：我们不允许使用关键字参数。此外，我们甚至可以在完全向后兼容的情况下扩展这个函数。下面的版本将检查任何提供的参数是否超过100字节。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can replace the `x` by `*args` because in the previous version the `/` ensured
    that the function was called *only* with positional arguments.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用`*args`替换`x`，因为在之前的版本中，`/`确保函数仅以位置参数的形式调用。
- en: '[](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----bd2acdce72b5--------------------------------)
    [## Cython for absolute beginners: 30x faster code in two simple steps'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----bd2acdce72b5--------------------------------)
    [## Cython 对绝对初学者的指南：两步实现 30 倍更快的代码'
- en: Easy Python code compilation for blazingly fast applications
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速应用的简单 Python 代码编译
- en: towardsdatascience.com](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----bd2acdce72b5--------------------------------)
- en: '**5\. Mix and match — How do I pass args that are either positional or kwargs?**'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5\. 混合与匹配 — 如何传递既是位置参数又是`kwargs`的参数？**'
- en: 'As an example we’ll look to the `len` function we’ve discussed earlier. This
    function allows only positional arguments. We’ll extend this function with by
    allowing the developer to choose whether or not to count duplicates. We want to
    the developer to pass this keyword with kwargs:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将讨论之前提到的`len`函数。这个函数只允许位置参数。我们将扩展这个函数，允许开发者选择是否计算重复项。我们希望开发者通过`kwargs`传递这个关键字：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you see we want to count the `len` of the `x` variable. We can only pass
    the argument for the `x` parameter positionally since it’s preceded by a `/`.
    The `no_duplicates` parameter must be passed with a keyword since it follows the
    `*`. Let’s call the function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们希望计算`x`变量的`len`。由于`x`参数前面有`/`，我们只能以位置参数的方式传递它。`no_duplicates`参数必须以关键字的形式传递，因为它跟在`*`之后。让我们调用这个函数：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----bd2acdce72b5--------------------------------)
    [## Destroying Duck Hunt with OpenCV — image analysis for beginners'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----bd2acdce72b5--------------------------------)
    [## 用 OpenCV 破坏《Duck Hunt》 — 初学者的图像分析'
- en: Write code that will beat every Duck Hunt high score
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写能够击败所有《Duck Hunt》高分的代码
- en: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----bd2acdce72b5--------------------------------)
- en: 6\. Mix and match — all together
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 混合与匹配 — 综合应用
- en: The function below is pretty extreme example of how you can combine all previously
    discussed techniques. First, it forced the first two arguments to be passed positionaly,
    the next two can be passed positionally *and* with keywords, then two keyword-only
    parameters and then we catch the remaining uncaught with `**kwargs`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数是如何将所有之前讨论的技术结合在一起的极端示例。首先，它强制前两个参数以位置参数的方式传递，接下来的两个参数可以以位置参数和关键字参数的方式传递，然后是两个仅限关键字的参数，最后我们用`**kwargs`捕捉其余未捕获的参数。
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can pass this function like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样传递这个函数：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----bd2acdce72b5--------------------------------)
    [## Multi-tasking in Python: Speed up your program 10x by executing things simultaneously'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----bd2acdce72b5--------------------------------)
    [## Python 中的多任务处理：通过同时执行操作使程序速度提高 10 倍'
- en: Step-by-step guide to apply threads and processes to speed up your code
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将线程和进程应用于加速代码的逐步指南
- en: towardsdatascience.com](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----bd2acdce72b5--------------------------------)
- en: Conclusion
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article we went through all the ways to design your function parameters
    and seen the way you can mix and match them so that the developer can use your
    function in the best way possible.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了设计函数参数的所有方法，并展示了如何混合和匹配这些参数，以便开发者能够以最佳方式使用你的函数。
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles?tags=python) on all kinds
    of programming-related topics like these:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章如我所希望的那样清晰，如果不是这样，请告诉我我可以做些什么来进一步澄清。与此同时，看看我关于各种编程相关主题的[其他文章](https://mikehuls.com/articles?tags=python)，例如：
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Git 完全初学者指南：通过视频游戏理解 Git](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建并发布你自己的 Python 包](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 FastAPI 在 5 行代码中创建一个快速的自动文档、可维护和易用的 Python API](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
- en: Happy coding!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 编程愉快！
- en: — Mike
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: — 迈克
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言：喜欢我在做的事情吗？* [*关注我！*](https://mikehuls.medium.com/membership)'
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----bd2acdce72b5--------------------------------)
    [## Join Medium with my referral link — Mike Huls'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/membership?source=post_page-----bd2acdce72b5--------------------------------)
    [## 使用我的推荐链接加入 Medium — 迈克·胡尔斯'
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读迈克·胡尔斯及其他数千位 Medium 作者的每一个故事。你的会员费直接支持迈克…
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----bd2acdce72b5--------------------------------)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----bd2acdce72b5--------------------------------)
