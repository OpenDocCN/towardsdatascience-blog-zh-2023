- en: Effectively Use %timeit, %lprun, and %mprun to Write Efficient Python Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效地使用 %timeit、%lprun 和 %mprun 来编写高效的 Python 代码
- en: 原文：[https://towardsdatascience.com/effectively-use-timeit-lprun-and-mprun-to-write-efficient-python-code-f06fb8457049](https://towardsdatascience.com/effectively-use-timeit-lprun-and-mprun-to-write-efficient-python-code-f06fb8457049)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/effectively-use-timeit-lprun-and-mprun-to-write-efficient-python-code-f06fb8457049](https://towardsdatascience.com/effectively-use-timeit-lprun-and-mprun-to-write-efficient-python-code-f06fb8457049)
- en: A hands-on guide on how to use magic commands to test the most efficient python
    code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个关于如何使用魔法命令测试最高效 Python 代码的实用指南
- en: '[](https://suemnjeri.medium.com/?source=post_page-----f06fb8457049--------------------------------)[![Susan
    Maina](../Images/a3ac5f206f175c711a9e7779283fc18d.png)](https://suemnjeri.medium.com/?source=post_page-----f06fb8457049--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f06fb8457049--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f06fb8457049--------------------------------)
    [Susan Maina](https://suemnjeri.medium.com/?source=post_page-----f06fb8457049--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://suemnjeri.medium.com/?source=post_page-----f06fb8457049--------------------------------)[![Susan
    Maina](../Images/a3ac5f206f175c711a9e7779283fc18d.png)](https://suemnjeri.medium.com/?source=post_page-----f06fb8457049--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f06fb8457049--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f06fb8457049--------------------------------)
    [Susan Maina](https://suemnjeri.medium.com/?source=post_page-----f06fb8457049--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f06fb8457049--------------------------------)
    ·11 min read·Mar 8, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----f06fb8457049--------------------------------)
    ·阅读时间 11 分钟·2023 年 3 月 8 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3e9e1405f4a9150be078fd1dfff4beda.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e9e1405f4a9150be078fd1dfff4beda.png)'
- en: '[https://pixabay.com/images/id-534120/](https://pixabay.com/images/id-534120/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pixabay.com/images/id-534120/](https://pixabay.com/images/id-534120/)'
- en: I recently did a coding interview where one of the passing considerations was
    how optimized the code was. Unfortunately, I failed the test not because the code
    did not work (which it did) or the logic was wrong (which it was not) but because
    my code was not optimized.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近进行了一次编码面试，其中一个考核标准是代码的优化程度。不幸的是，我未能通过测试，并不是因为代码不能运行（实际上是能运行的）或逻辑错误（实际上没有错误），而是因为我的代码没有优化。
- en: 'As a data scientist, efficient code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，高效的代码：
- en: Saves time when processing and analyzing large or complex data.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理和分析大型或复杂数据时节省时间。
- en: Promotes scalability, ensuring your datasets can handle larger datasets and
    complex models.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进可扩展性，确保你的数据集能够处理更大的数据集和复杂的模型。
- en: Creates reusable and modular code, which again saves time and reduces errors.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用和模块化的代码，这样可以节省时间并减少错误。
- en: Is easily maintained and updated because it’s simple and understandable.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于维护和更新，因为它简单易懂。
- en: is shareable with a broader audience because it can work on less powerful hardware.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可与更广泛的受众分享，因为它可以在性能较低的硬件上运行。
- en: '***Optimized code == efficient code***'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '***优化代码 == 高效代码***'
- en: 'In python, efficient code is:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，高效的代码是：
- en: Pythonic — It uses python’s [unique style and idioms](https://peps.python.org/pep-0020/)
    in the way it was intended by the founders and the community.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合 Python 风格的 — 它使用 Python 的[独特风格和习惯用法](https://peps.python.org/pep-0020/)，按照创始人和社区所期望的方式进行编写。
- en: Readable —It’s easy to read and understand what the code does. For example,
    following [correct naming](https://realpython.com/python-pep8/#naming-conventions)
    conventions, being mindful of [white space](https://realpython.com/python-pep8/#whitespace-in-expressions-and-statements),
    and using fewer lines of code where possible.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读性强 — 它易于阅读和理解代码的功能。例如，遵循[正确的命名](https://realpython.com/python-pep8/#naming-conventions)规范，注意[空白字符](https://realpython.com/python-pep8/#whitespace-in-expressions-and-statements)，并尽可能减少代码行数。
- en: Fast — Should run in the least possible time, consuming minimum amounts of memory
    and resources.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速 — 应该在最短的时间内运行，消耗最少的内存和资源。
- en: Companies and employers prefer optimized code that can easily scale and allow
    new developers to get on board quickly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 公司和雇主更喜欢可以轻松扩展并允许新开发者快速上手的优化代码。
- en: In this article, we’ll cover four python [magic commands](https://ipython.readthedocs.io/en/stable/interactive/magics.html)
    that test how efficient our code is. We’ll also perform tasks using different
    code approaches and measure the most efficient method.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将讨论四个python [魔法命令](https://ipython.readthedocs.io/en/stable/interactive/magics.html)，它们测试我们代码的效率。我们还将使用不同的代码方法执行任务，并测量最有效的方法。
- en: '**Magic commands —** These are special python commands that start with `%`
    or `%%` and are supported in [Jupyter](https://jupyter.org/) notebooks and the
    [Ipython](https://ipython.org/) kernel. They provide a quick and powerful way
    to perform tasks such as timing code (discussed in this article), displaying visualizations,
    and navigating directories.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**魔法命令 —** 这些是以`%`或`%%`开头的特殊python命令，支持在[Jupyter](https://jupyter.org/)笔记本和[Ipython](https://ipython.org/)内核中使用。它们提供了一种快速而强大的方式来执行任务，如计时代码（本文讨论了这个问题）、显示可视化内容和导航目录。'
- en: '*Line magics:* These have a single % and operate on one line of input.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*行魔法命令：* 这些命令有一个%并作用于一行输入。'
- en: '*Cell magics:* These have two %% and operate on multiple lines of code or a
    cell block.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*单元魔法命令：* 这些命令有两个%%并作用于多行代码或一个单元块。'
- en: '**Note.** You may be familiar with the ‘!’ symbol, which is a short form of
    the magic command `%system`. This command executes shell commands directly in
    the notebook, such as installing packages using `!pip install package`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意。** 你可能对‘!’符号很熟悉，它是魔法命令`%system`的简写。该命令直接在笔记本中执行shell命令，例如使用`!pip install
    package`来安装软件包。'
- en: To display all built-in python [magic commands](https://ipython.org/ipython-doc/dev/interactive/magics.html),
    use `%lsmagic`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示所有内置的python [魔法命令](https://ipython.org/ipython-doc/dev/interactive/magics.html)，请使用`%lsmagic`。
- en: '![](../Images/b905d20eb3d392ff23fbb03d3e5550cc.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b905d20eb3d392ff23fbb03d3e5550cc.png)'
- en: Displaying magic commands by author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按作者显示魔法命令
- en: To find out what a magic command does, use the code *%magic_command****?***
    to display its documentation in place.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出魔法命令的功能，可以使用代码*%magic_command****?***来在当前位置显示其文档。
- en: '![](../Images/f194600162cb91f792d1e1ab175c28e4.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f194600162cb91f792d1e1ab175c28e4.png)'
- en: Screenshot by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: 1\. %timeit
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. %timeit
- en: '[This](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit)
    magic command measures the time it takes for a single line of code to execute.
    It runs the code several times and returns the average execution time.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[这个](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit)魔法命令测量单行代码的执行时间。它会多次运行代码并返回平均执行时间。'
- en: '***%timeit syntax*:** The command is followed by the code to test, all in one
    line.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '***%timeit语法*：** 该命令后面跟着要测试的代码，全部在一行中。'
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Example output
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Output explained:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出解释：
- en: '*32.4 ns =* The average execution time. Use the table below for time conversions.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*32.4 ns =* 平均执行时间。使用下表进行时间转换。'
- en: '*1.17 ns =* The standard deviation of the measurements.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*1.17 ns =* 测量的标准差。'
- en: '![](../Images/f803f9744a64bf15cb32db69b838ab3e.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f803f9744a64bf15cb32db69b838ab3e.png)'
- en: Units-of-time table by the author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的时间单位表
- en: '*7 runs =* The number of runs, or iterations, to repeat the process. We have
    different runs to account for variations in factors such as memory usage and CPU
    load, which may remain the same in one run but differ in others.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*7 runs =* 重复过程的运行次数或迭代次数。我们有不同的运行次数，以考虑内存使用和CPU负载等因素的变化，这些因素在一次运行中可能保持不变，但在其他运行中可能会有所不同。'
- en: '*10,000,000 loops =* The number of times to execute the code per iteration.
    Therefore, the code runs a total of `runs*loops` times.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*10,000,000 loops =* 每次迭代执行代码的次数。因此，代码总共运行了`runs*loops`次。'
- en: The number of runs and loops are automatically determined based on the code
    complexity, but you can also pass them as arguments, as discussed below.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行次数和循环次数根据代码复杂性自动确定，但你也可以将它们作为参数传递，具体如下所述。
- en: '***Task 1: Timing one line of code — compare [] vs list() for instantiating
    a list.***'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '***任务 1：计时一行代码 — 比较[]与list()在实例化列表时的表现。***'
- en: '*Creating a list using literal symbols []*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用文字符号[]创建列表*'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Creating a list using list()*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用list()创建列表*'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output explained:** Using the literal symbols takes 34.6 ns, less than half
    the time when using the function name (92.8 ns).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出解释：** 使用文字符号需要34.6 ns，不到使用函数名称（92.8 ns）的一半时间。'
- en: Therefore, when instantiating a python list, tuple, or dictionary, it is more
    efficient to use their literal symbols than their function names.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在实例化python列表、元组或字典时，使用其文字符号比使用其函数名称更高效。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The same can be said when creating a list of numbers using the range function.
    List unpacking using `*` is more efficient than using the `list()` name.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用range函数创建数字列表时也是如此。使用`*`进行列表拆包比使用`list()`名称更高效。
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Specifying runs and loops —** After the `%timeit` command, you can pass in
    as arguments your desired runs and loops using -r and -n respectively.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**指定运行次数和循环次数 —** 在`%timeit`命令后，可以通过 -r 和 -n 作为参数传入所需的运行次数和循环次数。'
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 2\. %%timeit
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. %%timeit
- en: This command is prefixed by **two** percentage signs. It measures the average
    time taken to execute a cell block that contains multiple code lines.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令前面带有**两个**百分号。它测量执行包含多行代码的单元块的平均时间。
- en: '***%%timeit Syntax:*** The command is written at the start of a cell block,
    immediately followed by the lines of code to be timed beneath it.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '***%%timeit 语法：*** 命令写在单元块的开头，后面紧跟要计时的代码行。'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '***Task 2: Timing multiple lines of code (a cell block) — Compare a for-loop
    VS a list comprehension that squares all the numbers from 0 to 1000.***'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '***任务2：计时多个代码行（一个单元块） — 比较一个for循环和一个列表推导式，它们都对0到1000的所有数字进行平方运算。***'
- en: '[*For-loop*](https://builtin.com/software-engineering-perspectives/can-you-put-a-for-loop-in-an-if-statement)
    *—* Below, we use `%%timeit` and pass in our desired number of runs (5) and loops
    per run (1000).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[*For-loop*](https://builtin.com/software-engineering-perspectives/can-you-put-a-for-loop-in-an-if-statement)
    *—* 下面，我们使用`%%timeit`并传入所需的运行次数（5）和每次运行的循环次数（1000）。'
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code takes 198 microseconds to execute.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行时间为198微秒。
- en: '*List comprehension —* Here we use `%timeit` with one percentage sign because
    we’re measuring only one line of code.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表推导式 —* 这里我们使用一个百分号的`%timeit`，因为我们只测量一行代码。'
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The list comprehension code is faster at 173 microseconds.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导式代码的速度更快，为173微秒。
- en: Therefore, whenever possible, and if it does not compromise readability, use
    a list comprehension over a for-loop.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只要可能，并且不影响可读性，就使用列表推导式而不是for循环。
- en: '%lprun — Line profiling'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '%lprun — 行分析'
- en: This command comes from the [line-profiler](https://pypi.org/project/line-profiler/)
    library, which outlines the time performance of a python function, program, or
    script.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令来自[行分析器](https://pypi.org/project/line-profiler/)，该库描述了python函数、程序或脚本的时间性能。
- en: It checks how long each line of code in the function takes and returns an output
    of the line-by-line analysis.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它检查函数中每行代码所花的时间，并返回逐行分析的结果。
- en: '***%lprun syntax:*** the command is followed by -f which means that we are
    analyzing a function. You then pass in the function name, then the function call
    with its parameters.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '***%lprun 语法：*** 命令后跟 -f，表示我们正在分析一个函数。然后传入函数名，再传入带有参数的函数调用。'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The line profiler is *not* built in python and needs to be installed the first
    time you use it in your system. You also need to load it into the ipython session
    every time you are running a new kernel.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 行分析器*不是*内置在python中的，需要在系统中首次使用时安装。每次运行新内核时，还需要将其加载到ipython会话中。
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The table returned is an analysis of each line in the function, with the following
    columns:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的表格是对函数中每一行的分析，包括以下列：
- en: '*Line number:* the position of the line in the function.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*行号：* 函数中该行的位置。'
- en: '*Hits:* Number of times the line was executed.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*次数：* 该行执行的次数。'
- en: '*Time:* Total time taken by the line. The timer unit is specified at the top
    of the table.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*时间：* 行执行所用的总时间。计时器单位在表格顶部指定。'
- en: '*Per Hit:* The average time it took to execute a line (Time/Hits)*.*'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*每次执行时间：* 执行一行代码所需的平均时间（时间/次数）*。*'
- en: '*% Time:* The percentage of time taken per line compared to other lines.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*%时间：* 每行代码所占的时间百分比，相对于其他行。'
- en: '*Line contents:* The actual source code of the line.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*行内容：* 行的实际源代码。'
- en: '***Task 3: Timing a Function — compare a for-loop VS a built-in python function
    for removing duplicates from a list.***'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '***任务3：计时函数 — 比较一个for循环和一个内置python函数，去除列表中的重复项。***'
- en: In this example, both functions take in a list, remove duplicates, and return
    a list of unique items.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，两个函数都接收一个列表，去除重复项，并返回一个唯一项的列表。
- en: '*Using a for-loop*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用for循环*'
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/3d07e7951ae968678e3b76e394a6499e.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d07e7951ae968678e3b76e394a6499e.png)'
- en: The timer unit is in seconds (1e-07 s), which equals 0.1 microseconds as per
    the table below. The whole function ran for 14.6 microseconds, and the for-loop
    codes were run severally (many hits).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器单位为秒（1e-07 s），相当于下表中的0.1微秒。整个函数运行了14.6微秒，而for循环代码被多次运行（许多次数）。
- en: '![](../Images/f803f9744a64bf15cb32db69b838ab3e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f803f9744a64bf15cb32db69b838ab3e.png)'
- en: Units-of-time table by author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的时间单位表
- en: '*Using the* [*set()*](https://www.w3schools.com/python/python_sets.asp) *function*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用* [*set()*](https://www.w3schools.com/python/python_sets.asp) *函数*'
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/6bbc1c93d31854c0a62a2472c665e8cc.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6bbc1c93d31854c0a62a2472c665e8cc.png)'
- en: This function only had one code line, which was run once (1 hit). The whole
    function ran for 3.3 microseconds.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数只有一行代码，运行了一次（1 hit）。整个函数运行了3.3微秒。
- en: For this reason, whenever possible, utilize the built-in functions that perform
    the task you desire. This is because they are optimized for their operations.
    Here is a list of [built-in python functions](https://www.w3schools.com/python/python_ref_functions.asp)
    that you can leverage in your code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽可能使用内置函数来执行你需要的任务。这是因为这些函数经过优化以提高操作效率。以下是你可以在代码中利用的[内置Python函数](https://www.w3schools.com/python/python_ref_functions.asp)的列表。
- en: '%mprun — Memory profiling'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '%mprun — 内存分析'
- en: This command comes from the [memory profiler](https://pypi.org/project/memory-profiler/)
    library, which outlines the memory usage of a function.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令来源于[memory profiler](https://pypi.org/project/memory-profiler/)库，该库概述了函数的内存使用情况。
- en: Therefore, where `%lprun` measures the time, `%mprun` measures the memory consumed
    and returns a line-by-line analysis of the memory resources.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，%lprun 测量时间，而 %mprun 测量内存消耗，并返回逐行的内存资源分析。
- en: However, with `%mprun`, the function needs to be saved in a separate python
    file. This file can be saved in your current working directory, which you then
    import into your session, and run the command on it. We’ll do all this soon.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用 %mprun 时，函数需要保存到一个单独的Python文件中。该文件可以保存在你的当前工作目录中，然后你将其导入到会话中，并对其运行命令。我们很快就会做所有这些。
- en: Again, you need to install the memory profiler library into your system, then
    load it into the current kernel session.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你需要将内存分析器库安装到你的系统中，然后加载到当前内核会话中。
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '***%mprun syntax:*** the command is followed by -f, then the function name,
    and finally the function call.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '***%mprun语法：*** 命令后跟 -f，接着是函数名，最后是函数调用。'
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The table returned contains the following information for every code line:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的表格包含每行代码的以下信息：
- en: '*Line #:* The line number being executed.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Line #:* 正在执行的行号。'
- en: '*Mem usage:* the memory used by the Python interpreter after executing this
    line of code, measured in bytes.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Mem usage:* 执行该行代码后，Python解释器使用的内存量，以字节为单位。'
- en: '*Increment:* the difference in memory used from the previous line. Think of
    it as the impact of this line on memory.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Increment:* 与上一行相比内存使用的差异。可以将其视为该行对内存的影响。'
- en: '*Occurrences:* the number of instances of items of the same type created in
    this line.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Occurrences:* 这一行中创建的相同类型项的实例数量。'
- en: '*Line Contents:* the source code on that line.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Line Contents:* 该行上的源代码。'
- en: '***Task 4: Timing a function in a Pandas DataFrame —* *What is the most efficient
    way to perform calculations on a Pandas column?***'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '***任务4: 在Pandas DataFrame中计时一个函数 —* *在Pandas列上执行计算的最有效方法是什么？***'
- en: In our example below, we’ll work with a [Pandas](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)
    Dataframe and perform some calculations on a column. I am using the Kaggle dataset
    ‘fuel consumption’ available [here](https://www.kaggle.com/datasets/ahmettyilmazz/fuel-consumption)
    under the [Open Database](http://opendatacommons.org/licenses/dbcl/1.0/) license.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将使用一个[Pandas](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)
    Dataframe，并对一列进行一些计算。我使用了Kaggle数据集‘燃料消耗’，可以在[这里](https://www.kaggle.com/datasets/ahmettyilmazz/fuel-consumption)找到，数据集采用[开放数据库](http://opendatacommons.org/licenses/dbcl/1.0/)许可。
- en: First, import the Pandas library, then load the dataset into the current session.
    Be sure to [install](https://www.geeksforgeeks.org/how-to-fix-no-module-named-pandas/)
    the Pandas Library first if the code returns a *module not found* error.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入Pandas库，然后将数据集加载到当前会话中。如果代码返回*module not found*错误，请确保首先[安装](https://www.geeksforgeeks.org/how-to-fix-no-module-named-pandas/)
    Pandas库。
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/38d25e102aece6cd129a36b0b9564afe.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38d25e102aece6cd129a36b0b9564afe.png)'
- en: First 5 rows of the dataset by author
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的数据集的前5行
- en: The function takes in a Pandas dataframe, multiplies a column’s values by a
    scalar, and returns a modified dataframe. We will test four functions to check
    the most memory-efficient approach.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接收一个Pandas dataframe，将列的值乘以一个标量，并返回一个修改后的dataframe。我们将测试四个函数，以检查最节省内存的方法。
- en: Remember that `%mprun` must access the function from a file. To save the functions
    in one file, run the cell block below where the top line is `%%file your_file.py.`
    This creates and writes (or overwrites) the contents into `your_file.py`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`%mprun`必须从文件中访问函数。要将函数保存到一个文件中，请运行下面的单元格块，其中顶行是`%%file your_file.py.` 这将创建并写入（或覆盖）内容到`your_file.py`。
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, load the memory profiler extension and import your functions from the
    file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，加载内存分析器扩展并从文件中导入你的函数。
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*Method 1: Using* [*apply with a lambda*](/lambda-functions-with-practical-examples-in-python-45934f3653a8)
    *function*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法 1: 使用* [*apply with a lambda*](/lambda-functions-with-practical-examples-in-python-45934f3653a8)
    *函数*'
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](../Images/9540666299ca986072ca75ebe5923969.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9540666299ca986072ca75ebe5923969.png)'
- en: Image by author
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The `apply` function line where the multiplication happens results in 45,000
    occurrences and a 1.6 MB memory increment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法发生的`apply`函数行会导致45,000次出现和1.6 MB的内存增量。
- en: '*Method 2: Using a list comprehension*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法 2: 使用列表推导*'
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/ae35266cfac30230251c6a80d148feda.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae35266cfac30230251c6a80d148feda.png)'
- en: Image by author
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Using a list comprehension halves the number of occurrences to around 22,500\.
    However, a similar memory increase of 1.7 MB is noted for the two lines.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导将出现次数减少到大约22,500。然而，两行的内存增加也为1.7 MB。
- en: '*Method 3: Direct multiplication.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法 3: 直接乘法。*'
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/2a55ef79766f54349820e3d2e0169d1c.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a55ef79766f54349820e3d2e0169d1c.png)'
- en: Using the direct multiplication method results in only one occurrence of this
    item in memory and a very little memory increment of 0.4 MB.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直接乘法方法会导致内存中只有一个项，并且内存增加非常小，为0.4 MB。
- en: '*Method 4: Using* [*NumPy*](/4-fundamental-numpy-properties-every-data-scientist-must-master-c906236eb44b)
    *by first calling* `*Series.values*` *to convert the column into a NumPy array.*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法 4: 使用* [*NumPy*](/4-fundamental-numpy-properties-every-data-scientist-must-master-c906236eb44b)
    *，首先调用* `*Series.values*` *将列转换为NumPy数组。*'
- en: '![](../Images/66a2fad939d620fe794bdebcb1745f9a.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66a2fad939d620fe794bdebcb1745f9a.png)'
- en: The fourth method involves first converting the column into a [NumPy](/4-fundamental-numpy-properties-every-data-scientist-must-master-c906236eb44b)
    array and then multiplying it by the scalar value. As in the previous method 3,
    there is only one occurrence of the item in memory and a similar memory increase
    of 0.4 MB.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 第四种方法首先将列转换为一个[NumPy](/4-fundamental-numpy-properties-every-data-scientist-must-master-c906236eb44b)数组，然后与标量值相乘。与之前的方法
    3 相似，这里内存中只有一个项的存在，并且内存增加也为0.4 MB。
- en: '**Speed of direct multiplication VS NumPy multiplication.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**直接乘法与NumPy乘法的速度对比。**'
- en: Numpy calculation is faster, even though it consumes the same memory as the
    direct method. See the results of the two functions using `%lprun` which measures
    the time taken per line.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然NumPy计算消耗的内存与直接方法相同，但它更快。请查看使用`%lprun`测量每行所需时间的两个函数的结果。
- en: '*Direct multiplication — Slower*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*直接乘法 — 更慢*'
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/55850a0cbfb97582442c23846c3ad8d0.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55850a0cbfb97582442c23846c3ad8d0.png)'
- en: Direct multiplication by author
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 直接乘法由作者提供
- en: '*NumPy''s calculation — Faster*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*NumPy的计算 — 更快*'
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/fb7a96c9e17f93f960a6a610acbaaa95.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb7a96c9e17f93f960a6a610acbaaa95.png)'
- en: NumPy's multiplication by the author
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的乘法由作者提供
- en: The NumPy calculation (the column is first converted into a NumPy array using
    `Series.values`) is faster, taking only 137 ms compared to 1,150 ms for the direct
    multiplication. The percentage time is also much less at 9.7% compared to 45%
    with direct multiplication.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy计算（列首先通过`Series.values`转换为NumPy数组）更快，仅需137毫秒，而直接乘法需要1150毫秒。百分比时间也显著较少，为9.7%，而直接乘法为45%。
- en: For this reason, numeric calculations in a dataframe are most efficient using
    NumPy, as it is optimized for element-wise operations.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数据框中的数值计算使用NumPy最为高效，因为它对逐元素操作进行了优化。
- en: Conclusion
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we discussed the importance of writing efficient and optimized
    code in python. We looked at different code examples and identified the most efficient
    coding approach.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了编写高效且优化的python代码的重要性。我们查看了不同的代码示例，并确定了最有效的编码方法。
- en: We explored four magic commands; `%timeit`, `%%timeit`, `%lprun,` and `%mprun`.
    The first three test the time taken to execute code, while the last one measures
    the memory consumed. We also learned that line magics operate on one line of code
    and are prefixed by one %. On the other hand, cell magics are prefixed by two
    %% and they operate on multiple code lines directly beneath it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探索了四个魔法命令；`%timeit`、`%%timeit`、`%lprun` 和 `%mprun`。前三个命令用于测试代码执行的时间，而最后一个命令用于测量消耗的内存。我们还了解到，行魔法命令作用于一行代码，并以一个
    % 开头。而单元魔法命令以两个 %% 开头，作用于直接在其下方的多行代码。
- en: I hope you enjoyed the article. To receive more like these whenever I publish
    a new one, subscribe [here](https://suemnjeri.medium.com/subscribe/@suemnjeri).
    If you are not yet a medium member and would like to support me as a writer, follow
    [this link](https://medium.com/@suemnjeri/membership) to subscribe for $5 and
    I will earn a small commission. Thank you for reading!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你喜欢这篇文章。要在我发布新文章时收到更多类似内容，请订阅[这里](https://suemnjeri.medium.com/subscribe/@suemnjeri)。如果你还不是
    Medium 会员，并且希望支持我作为作者，请通过[此链接](https://medium.com/@suemnjeri/membership)订阅$5，我将获得一小笔佣金。感谢你的阅读！
- en: '**References**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考资料**'
- en: '[MCoding’s 25 nooby python habits on YouTube](https://youtu.be/qUeud6DvOWI)'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[MCoding 的 25 个 Python 新手习惯在 YouTube 上](https://youtu.be/qUeud6DvOWI)'
- en: '[Finxter’s 29 top built-in python functions with examples.](https://blog.finxter.com/pythons-top-29-built-in-functions-with-examples/)'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Finxter 的 29 个顶级内置 Python 函数及示例。](https://blog.finxter.com/pythons-top-29-built-in-functions-with-examples/)'
- en: 3\. [Magic Commands for Profiling in Jupyter Notebook](/magic-commands-for-profiling-in-jupyter-notebook-d2ef00e29a63)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. [Jupyter Notebook 中的魔法命令用于分析](/magic-commands-for-profiling-in-jupyter-notebook-d2ef00e29a63)
