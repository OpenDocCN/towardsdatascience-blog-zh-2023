- en: Interacting with sklearn machine learning models in Power BI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Power BI中与sklearn机器学习模型互动
- en: 原文：[https://towardsdatascience.com/deploying-sklearn-models-in-power-bi-d982f2d21ec](https://towardsdatascience.com/deploying-sklearn-models-in-power-bi-d982f2d21ec)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/deploying-sklearn-models-in-power-bi-d982f2d21ec](https://towardsdatascience.com/deploying-sklearn-models-in-power-bi-d982f2d21ec)
- en: '![](../Images/74ee0509e142ebc1ab282778e7d62b1f.png)[](https://newmarrk.medium.com/?source=post_page-----d982f2d21ec--------------------------------)[![Mark
    Graus](../Images/5b8c4d77254d891b9fb0a3e96616525a.png)](https://newmarrk.medium.com/?source=post_page-----d982f2d21ec--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d982f2d21ec--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d982f2d21ec--------------------------------)
    [Mark Graus](https://newmarrk.medium.com/?source=post_page-----d982f2d21ec--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74ee0509e142ebc1ab282778e7d62b1f.png)[](https://newmarrk.medium.com/?source=post_page-----d982f2d21ec--------------------------------)[![Mark
    Graus](../Images/5b8c4d77254d891b9fb0a3e96616525a.png)](https://newmarrk.medium.com/?source=post_page-----d982f2d21ec--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d982f2d21ec--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d982f2d21ec--------------------------------)
    [Mark Graus](https://newmarrk.medium.com/?source=post_page-----d982f2d21ec--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d982f2d21ec--------------------------------)
    ·9 min read·May 24, 2023
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----d982f2d21ec--------------------------------)
    ·9分钟阅读·2023年5月24日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In some cases we want to have a supervised learning model to play around with.
    While any data scientist can quite easily build an SKLearn model and play around
    with it in a Jupyter notebook, when you want to have other stakeholders interact
    with your model you will have to create a bit of a front-end. This can be done
    in a simple Flask webapp, providing a web interface for people to feed data into
    an sklearn model or pipeline to see the predicted output. This post however will
    focus on how to use Python visuals in Power BI to interact with a model.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望拥有一个可以操作的监督学习模型。虽然任何数据科学家都可以很容易地在Jupyter notebook中构建一个SKLearn模型并进行操作，但当你希望其他利益相关者与模型互动时，你需要创建一个前端。这可以通过一个简单的Flask
    webapp来完成，提供一个网络界面，供用户向sklearn模型或管道输入数据以查看预测输出。然而，这篇文章将重点介绍如何在Power BI中使用Python可视化与模型互动。
- en: 'The post will consist of two main parts:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章将包括两个主要部分：
- en: Building the SKLearn Model / Building a Pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建SKLearn模型 / 构建管道
- en: Building the Power BI Interface
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Power BI接口
- en: The code is really straightforward and you can copypaste whatever you need from
    this post, but it is also available on [my Github](https://github.com/marrk/sklearn-in-powerbi).
    To use it, you have to do two things. Run the code in the Python Notebook to serialize
    the pipeline and alter the path to that pipeline in the Power BI file.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 代码非常简单，你可以从这篇文章中复制你需要的部分，但它也可以在[我的Github](https://github.com/marrk/sklearn-in-powerbi)上找到。要使用它，你需要做两件事。运行Python
    Notebook中的代码以序列化管道，并在Power BI文件中修改管道路径。
- en: 1\. Building the Model
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 构建模型
- en: For this example we’ll use the Titanic dataset and build a simple predictive
    model. The model will be a classification model, using one categorical (‘sex’)
    and one numeric feature (‘age’) as predictors. To demonstrate the approach we
    will use the RandomForestClassifier as the classification model. This is because
    a Random Forest Classifier is a bit harder to implement in Power BI than for example
    a logistic regression that could be coded in MQuery or DAX. In addition, since
    this post is not aimed at really building the best model, I am relying on [parts
    of the scikit-learn documentation](https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html)
    quite a bit and I will not be looking at performance that much.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Titanic数据集并构建一个简单的预测模型。这个模型将是一个分类模型，使用一个分类特征（‘sex’）和一个数值特征（‘age’）作为预测变量。为了演示这种方法，我们将使用RandomForestClassifier作为分类模型。这是因为Random
    Forest分类器在Power BI中的实现比例如在MQuery或DAX中编码的逻辑回归要复杂一些。此外，由于这篇文章并不是为了构建最好的模型，我会相当依赖于[scikit-learn文档的部分内容](https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html)，而且不会过多关注性能。
- en: The code we create does a couple of things. First of all, it loads and preprocesses
    the Titanic dataset. As mentioned before, we’re only using the ‘sex’ and the ‘age’
    features, but those still need to be processed. The categorical variable ‘sex’
    has to be transformed into Dummy Variables or has to be One Hot Encoded (i.e.
    the one column has to be recoded into a set of columns) for any sklearn model
    to be able to handle it. For the numerical feature ‘age’ we do a standard MinMaxScaling,
    as it goes from about 0 to 80, while ‘sex’ goes from 0 to 1\. Once all of that
    is done, we drop all observations with missing values, do a Train/Test split and
    build and serialize the pipeline.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的代码做了几件事。首先，它加载并预处理 Titanic 数据集。如前所述，我们仅使用“性别”和“年龄”特征，但这些特征仍需处理。分类变量“性别”必须转换为虚拟变量或进行独热编码（即将一列重新编码为一组列），以便任何
    sklearn 模型能够处理它。对于数值特征“年龄”，我们进行标准的 MinMaxScaling，因为它的范围大约是 0 到 80，而“性别”的范围是 0
    到 1。一旦完成所有这些步骤，我们删除所有缺失值的观察数据，进行训练/测试拆分，然后构建和序列化管道。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code above creates a model that scores not really good, but good enough
    for the purpose of this post.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个得分不太高但足够满足本帖目的的模型。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What will help us later, is to check how the model predicts. To do that we create
    a DataFrame with the Cartesian product age and sex (i.e. all possible ‘age’/’sex’
    combinations). We use that DataFrame to calculate predictions from the pipeline
    and we subsequently plot these predictions as a heatmap. The code to do that looks
    as follows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 后续对我们有帮助的是检查模型的预测。为此，我们创建一个包含年龄和性别的笛卡尔积的 DataFrame（即所有可能的“年龄”/“性别”组合）。我们利用这个
    DataFrame 从管道中计算预测，然后将这些预测绘制成热图。实现这一功能的代码如下。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The corresponding heatmap looks as follows and shows that for example for females
    from 13–33 years old, the prediction is survival (1). While a female aged exactly
    37 is predicted not to survive. For males, the predictions are mostly no survival,
    except for age 12 and some younger ages. This information will be useful when
    debugging the Power BI report.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的热图如下所示，它显示了例如 13–33 岁的女性的预测结果是生存（1）。而年龄恰好为 37 岁的女性被预测为不生存。对于男性，预测大多是不生存，除非年龄为
    12 岁及一些更年轻的年龄。此信息在调试 Power BI 报告时将非常有用。
- en: '![](../Images/1969e9889223308f30114cde2797f8b4.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1969e9889223308f30114cde2797f8b4.png)'
- en: A heatplot showing the model predictions for different combinations of age (vertical)
    and sex (horizontal). White squares are predictions corresponding to survival,
    black squares correspond to deceased. In general we see that female passengers
    have a higher predicted probability to survive.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 热图展示了不同年龄（垂直）和性别（水平）组合的模型预测。白色方块代表生存的预测，黑色方块代表去世的预测。总体上，我们看到女性乘客的生存预测概率较高。
- en: Now that this is done, we can serialize the model to start embedding it into
    a Power BI report.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在完成了这些，我们可以序列化模型，以便将其嵌入到 Power BI 报告中。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 2\. Power BI Interface
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. Power BI 界面
- en: Creating the Power BI Interface consists of two steps. The first step is that
    of creating the controls to feed data into the model. The second is that of creating
    the visualization that takes the inputs from the controls, feeds it into the model
    and shows the prediction.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Power BI 界面包括两个步骤。第一步是创建控件以将数据输入模型。第二步是创建可视化，将控件中的输入数据传递到模型中并显示预测结果。
- en: 2a. Controls
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2a. 控件
- en: A couple of concepts are important to be aware of when using Power BI. First
    of all, there are Parameters, or variables that contain values in Power BI. These
    Parameters can be controlled through slicers and the values they contain can be
    accessed through visualization elements in Power BI, which in our case will be
    a Python visualization.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Power BI 时需要了解几个重要概念。首先是参数，即包含值的变量。这些参数可以通过切片器控制，它们的值可以通过 Power BI 中的可视化元素访问，在我们的案例中是
    Python 可视化。
- en: '![](../Images/1df10f92c784c496eb8de21f9fdf32ac.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1df10f92c784c496eb8de21f9fdf32ac.png)'
- en: Process for Adding the Age Slicer
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 添加年龄切片器的过程
- en: For the parameters it is essential that we keep the same structure and values
    as the data that went into the pipeline. In our case we thus need one control
    for age (a numeric variable ranging from 0 to 80) and one control for sex (a categorical
    variable with the two values ‘male’ and ‘female’). Creating the parameter and
    slicer for ‘age’ is quite straightforward. In the ribbon section ‘Modeling’ we
    use the button ‘New Parameter’ and in the drop down we select the option select
    ‘Numeric Value’ and specify the values that we want to be able to enter. We ensure
    that the checkbox for ‘Add Slicer’ is checked and voila, the first control and
    the corresponding Parameter are available.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于参数来说，至关重要的是我们保持与进入管道的数据相同的结构和值。因此，在我们的情况下，我们需要一个用于年龄的控制（一个从0到80的数值变量）和一个用于性别的控制（一个具有“男性”和“女性”两个值的分类变量）。创建“年龄”参数和切片器非常简单。在功能区的“建模”部分，我们使用“新建参数”按钮，在下拉菜单中选择“数值”选项，并指定我们希望能够输入的值。我们确保勾选“添加切片器”复选框，完成后，第一个控制项和对应的参数就可用了。
- en: For ‘sex’ this is sadly a bit more tedious. It requires first of all creating
    a table with all possible values for the variable. The most elegant way to do
    this is through DAX. This is done by clicking on the ‘New Table’ button in the
    ‘Modeling’ section of the Ribbon and entering the text below. This query creates
    a new Table, with the name ‘SexValues’ containing one String column named ‘Sex
    Values’ with values ‘male’ and ‘female’. These will be used to create the parameter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“性别”，这会稍微繁琐一些。首先需要创建一个包含所有可能值的表格。最优雅的方式是通过DAX完成。通过点击功能区“建模”部分的“新建表格”按钮，并输入以下文本来实现。这条查询创建了一个名为“SexValues”的新表格，其中包含一个名为“性别值”的字符串列，列值为“男性”和“女性”。这些将用于创建参数。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/b6652dd8f3680bba4f89dc082b0ed5dd.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b6652dd8f3680bba4f89dc082b0ed5dd.png)'
- en: Creating the new parameter is done by using the Option ‘Fields’ in the dropdown
    menu behind the button ‘New Parameter’ in the ‘Modeling’ section of the Ribbon.
    In the configuration for this Parameter we select the field ‘Sex Values’ from
    the Table that we made (SexValues). Make sure that you have “add slicer” turned
    on in the dialog. Once you press ok, the slicer is added to your Power BI report,
    but it requires some additional setup. Select the slicer, and use the part in
    the interface with the properties of the visual. At the drop down that indicates
    field, click on the arrow pointing down and select ‘Show values of selected field’.
    After that is done, all controls are ready, all parameters are configured and
    we can start start feeding into the Python visualization.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在功能区“建模”部分的“新建参数”按钮下拉菜单中的“字段”选项来创建新的参数。在这个参数的配置中，我们从我们制作的表格（SexValues）中选择“性别值”字段。确保在对话框中开启了“添加切片器”。按下确定后，切片器将被添加到您的Power
    BI报告中，但还需要一些额外的设置。选择切片器，并使用界面中显示视觉属性的部分。在指示字段的下拉菜单中，点击向下的箭头，选择“显示所选字段的值”。完成后，所有控制项都准备好了，所有参数都已配置，我们可以开始输入Python可视化。
- en: 2b. Creating the Visualization
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2b. 创建可视化
- en: '![](../Images/93b6cce8cbb732a29c8a2f590b6fafcf.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93b6cce8cbb732a29c8a2f590b6fafcf.png)'
- en: Now that all the data is there it is time to create the Python Visual itself.
    To do this, create a Python visual. Use the ‘Py’ button to create the visual and
    select the values of the Parameters (‘Sex’ and ‘Age Value’) as input. For the
    Python visual the information from the parameters becomes available as a pandas.DataFrame,
    with a single row and the names of the parameters (‘Age Value’ and ‘Sex Values’)
    as column names. The code goes through a number of steps to use that information.
    Firstly, we import all the required libraries, in our case joblib, the relevant
    sklearn libraries, pandas and matplotlib for the visualization. Once that is done,
    the serialized Pipeline is loaded, the Parameter dataset is altered to correspond
    to the dataset that was used to train the model. After this, the pipeline is used
    to predict the survival from the Parameter values and the prediction, together
    with the parameter values is printed in a matplotlib visualization.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有数据都已经到位，接下来是创建 Python 可视化。为此，创建一个 Python 可视化。使用‘Py’按钮创建可视化，并选择参数（‘性别’和‘年龄值’）作为输入。对于
    Python 可视化，来自参数的信息会以 pandas.DataFrame 的形式提供，其中包含一行，参数名称（‘年龄值’和‘性别值’）作为列名。代码会经过若干步骤来使用这些信息。首先，我们导入所有必要的库，包括
    joblib、相关的 sklearn 库、pandas 和用于可视化的 matplotlib。完成后，加载序列化的管道，参数数据集被修改以对应于用于训练模型的数据集。之后，管道用于根据参数值预测生存情况，预测结果及其参数值会在
    matplotlib 可视化中打印出来。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once everything is done, you can move the elements around a bit and make it
    look nicer, or if you have the time you would alter the entire design of the report
    as well as the Python visual. But tadaaa, if you now play around with the slicers
    you can see the predictions being updated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一切完成，你可以稍微移动一下元素，让它看起来更好，或者如果有时间的话，可以改变整个报告的设计以及 Python 可视化。但呐呐呐，如果你现在玩弄切片器，你会看到预测被更新。
- en: '![](../Images/e73367bac1d1ea76fe62997ff74ba06b.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e73367bac1d1ea76fe62997ff74ba06b.png)'
- en: To see that the model is doing what we would expect, we can check the values
    we remember from right after building the model to check if the Power BI visual
    indeed corresponds to what we would expect from the data. And indeed, submitting
    the values we found before, shows that the prediction of the survival changes
    as expected.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证模型是否按预期工作，我们可以检查构建模型后记住的值，以确认 Power BI 可视化是否确实与我们从数据中预期的结果相符。确实，提交之前找到的值显示，生存预测的变化符合预期。
- en: '![](../Images/4912a5d6a8dc5d06d365786f6f94286d.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4912a5d6a8dc5d06d365786f6f94286d.png)'
- en: Predictions from the Model in Power BI
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Power BI 中模型的预测
- en: Conclusion
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This is quite a simple, artificial use case, with the purpose of building an
    sklearn model and interacting with that model in Power BI. For this use case that
    was a bit of an overkill, as it would have been easier, faster and more flexible
    to just precalculate all predictions for all combinations of age and sex and load
    those into Power BI. That approach sadly only works for a limited number of features,
    whereas the approach described here in principle can be extended to models with
    larger numbers of features.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的、人工的用例，目的是构建一个 sklearn 模型并在 Power BI 中与该模型互动。对于这个用例来说，这有点过于复杂，因为预计算所有年龄和性别组合的预测结果，并将其加载到
    Power BI 中，会更容易、更快捷且更灵活。可惜的是，这种方法只适用于有限数量的特征，而这里描述的方法原则上可以扩展到具有更多特征的模型。
- en: One negative aspect of this approach is that the performance of this interface
    is quite low, presumably because for every change of parameter values, the entire
    pipeline has to be deserialized, loaded and predicted again.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个负面方面是，接口的性能相当低，这可能是因为每次参数值发生变化时，整个管道都必须重新反序列化、加载并重新预测。
- en: I‘m very interested in finding out if this approach is useful for anyone. What
    use cases do you see? If you have any questions, ideas or suggestions, I’m more
    than happy to listen and think along!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常希望了解这种方法是否对任何人有用。你能想到哪些用例？如果你有任何问题、想法或建议，我非常乐意听取并一起思考！
