- en: Looking through the Window— Calculating customer lifetime value with new DAX
    functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 透过窗户——利用新的DAX函数计算客户生命周期价值
- en: 原文：[https://towardsdatascience.com/looking-through-the-window-calculating-customer-lifetime-value-with-new-dax-functions-9cce2d0699d](https://towardsdatascience.com/looking-through-the-window-calculating-customer-lifetime-value-with-new-dax-functions-9cce2d0699d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/looking-through-the-window-calculating-customer-lifetime-value-with-new-dax-functions-9cce2d0699d](https://towardsdatascience.com/looking-through-the-window-calculating-customer-lifetime-value-with-new-dax-functions-9cce2d0699d)
- en: New window functions are one of the most important enhancements to the DAX language
    ever! Learn how to leverage them to calculate a customer lifetime value
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的窗口函数是DAX语言迄今为止最重要的增强功能之一！学习如何利用它们来计算客户生命周期价值
- en: '[](https://datamozart.medium.com/?source=post_page-----9cce2d0699d--------------------------------)[![Nikola
    Ilic](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----9cce2d0699d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9cce2d0699d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9cce2d0699d--------------------------------)
    [Nikola Ilic](https://datamozart.medium.com/?source=post_page-----9cce2d0699d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://datamozart.medium.com/?source=post_page-----9cce2d0699d--------------------------------)[![尼古拉·伊利奇](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----9cce2d0699d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9cce2d0699d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9cce2d0699d--------------------------------)
    [尼古拉·伊利奇](https://datamozart.medium.com/?source=post_page-----9cce2d0699d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9cce2d0699d--------------------------------)
    ·7 min read·Jan 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----9cce2d0699d--------------------------------)
    ·7分钟阅读·2023年1月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6190e47157c687068627731da77f3602.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6190e47157c687068627731da77f3602.png)'
- en: Photo by Pixabay on Pexels
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由Pexels上的Pixabay提供
- en: In my previous “life” as a SQL professional, I’ve been using T-SQL window functions
    extensively for various analytic tasks. I’ve described one of the possible use
    cases in [this article](https://data-mozart.com/island-adventures-with-t-sql-window-functions/),
    but there are literally dozen of scenarios that can be quickly and intuitively
    solved by using window functions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前作为SQL专业人员的“生涯”中，我广泛使用T-SQL窗口函数来完成各种分析任务。我在[这篇文章](https://data-mozart.com/island-adventures-with-t-sql-window-functions/)中描述了其中一种可能的使用场景，但实际上有很多场景可以通过窗口函数快速直观地解决。
- en: Therefore, when I transitioned to Power BI, I was quite surprised (not to say
    disappointed) that there is no DAX equivalent to SQL window functions. Ok, we
    could have solved these challenges of performing different calculations over a
    certain set of rows, by writing more complex DAX — but, honestly, that was very
    often a really painful experience.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我转向Power BI时，我感到非常惊讶（更不用说失望了），因为没有DAX等效的SQL窗口函数。好吧，我们可以通过编写更复杂的DAX来解决在某些行上执行不同计算的挑战——但说实话，这常常是非常痛苦的经历。
- en: 'So, I was beyond excited when Power BI Desktop December 2022 update announced
    a brand new set of DAX functions — collectively called window functions — that
    should achieve the same goal as SQL window functions. At this moment, there are
    three DAX window functions: ***OFFSET***, ***INDEX***, and ***WINDOW***.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当Power BI Desktop 2022年12月更新宣布了一组全新的DAX函数——统称为窗口函数——这应该实现与SQL窗口函数相同的目标时，我感到非常兴奋。目前，有三个DAX窗口函数：***OFFSET***、***INDEX***
    和 ***WINDOW***。
- en: If you want to learn more about these functions and how they work behind the
    scenes, I strongly recommend reading [this article from Jeffrey Wang](https://pbidax.wordpress.com/2022/12/15/introducing-dax-window-functions-part-1/)
    — this is the best starting point for diving deeper into DAX window functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于这些函数及其背后工作原理的信息，我强烈推荐阅读[Jeffrey Wang的这篇文章](https://pbidax.wordpress.com/2022/12/15/introducing-dax-window-functions-part-1/)——这是深入了解DAX窗口函数的最佳起点。
- en: If you’re specifically interested in the OFFSET function, I encourage you to
    read [this great article](https://www.minceddata.info/2022/12/14/unlock-an-ample-new-world-by-seeing-through-a-window/)
    written by my friend Tom Martens, or [this one](https://www.linkedin.com/pulse/offset-its-usage-calculation-groups-%C5%A1t%C4%9Bp%C3%A1n-re%C5%A1l/)
    by Štěpán Rešl.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你特别对OFFSET函数感兴趣，我鼓励你阅读[这篇精彩的文章](https://www.minceddata.info/2022/12/14/unlock-an-ample-new-world-by-seeing-through-a-window/)由我的朋友Tom
    Martens撰写，或者[这篇文章](https://www.linkedin.com/pulse/offset-its-usage-calculation-groups-%C5%A1t%C4%9Bp%C3%A1n-re%C5%A1l/)由Štěpán
    Rešl撰写。
- en: In this article, I’ll not spend too much time explaining the ins and outs of
    the window functions, as I want to focus on explaining how you can leverage these
    functions to satisfy a very common business request — calculate the lifetime value
    of the customer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我不会花太多时间解释窗口函数的细节，因为我想专注于解释如何利用这些函数来满足一个非常常见的业务需求——计算客户的终身价值。
- en: Customer lifetime value
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户终身价值
- en: Let’s start with understanding what is a customer lifetime value. Well, it’s
    a broad term and may be interpreted in many possible ways. In our case, we want
    to provide a deep insight into the behavior of a single customer — for example,
    how many orders they placed, what is the total amount they spent on our products,
    how many days passed between their orders, and how this compares to the average
    of all customers. Finally, we want to know how loyal are our customers — meaning,
    how many days passed between their first and last order.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从了解什么是客户终身价值开始。它是一个广泛的术语，可能有多种解释。在我们的案例中，我们想深入了解单个客户的行为——例如，他们下了多少订单，他们在我们的产品上花了多少钱，他们的订单之间隔了多少天，以及这些与所有客户的平均情况相比如何。最后，我们想知道我们的客户有多忠诚——即他们的第一次和最后一次订单之间隔了多少天。
- en: 'So, let’s begin with a very basic scenario. I’m analyzing two customers from
    the Adventure Works dataset: Adam Young and Alexandra Jenkins. Here is the summary
    of their orders and total sales amount:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们从一个非常基本的场景开始。我正在分析Adventure Works数据集中的两个客户：Adam Young和Alexandra Jenkins。以下是他们的订单摘要和总销售额：
- en: '![](../Images/ebf024c6f0e4fc61a16def9414c437d8.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ebf024c6f0e4fc61a16def9414c437d8.png)'
- en: Image by author
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'The first concept to understand here is that we want to treat each customer
    as a separate “entity” — meaning, we want to create a “window” for each customer
    and analyze figures for that specific set of rows. In our case, we will have two
    “windows” here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要理解的概念是我们想将每个客户视为一个单独的“实体”——意味着，我们想为每个客户创建一个“窗口”，并分析该特定行集合的数字。在我们的案例中，我们将有两个“窗口”：
- en: '![](../Images/6673de0e94e2a712aea076f31b4dcbfd.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6673de0e94e2a712aea076f31b4dcbfd.png)'
- en: Image by author
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Window functions in DAX can work in two different ways — either by operating
    on a relative (REL) value, based on the current row (again, read Jeffrey’s article
    to understand how the current row is determined), or by operating on an absolute
    (ABS) value. In my case, I always want my window to start at the first row of
    the partition (each customer represents a separate partition), and finish on the
    last row of the partition.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DAX中的窗口函数可以以两种不同的方式工作——要么操作相对（REL）值，基于当前行（再次阅读Jeffrey的文章以了解如何确定当前行），要么操作绝对（ABS）值。在我的情况下，我总是希望我的窗口从分区的第一行开始（每个客户代表一个单独的分区），并在分区的最后一行结束。
- en: 'So, let’s create a measure that will calculate a running total of order quantity
    and sales for every partition:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们创建一个度量来计算每个分区的订单数量和销售额的累积总和：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s stop for a moment and explain this measure definition. As a CALCULATE
    filter modifier, we’re going to use a new window DAX function WINDOW. The first
    argument (1) determines where the window starts. Because the second argument is
    ABS (absolute), this means that the window starts at the beginning of the partition.
    Next, we define where the window ends.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们停下来解释一下这个度量定义。作为CALCULATE筛选器修饰符，我们将使用一个新的窗口DAX函数WINDOW。第一个参数（1）确定窗口的开始位置。由于第二个参数是ABS（绝对），这意味着窗口从分区的开始处开始。接下来，我们定义窗口的结束位置。
- en: Since we are using a negative value (-1) and ABS, this means that the window
    ends in the last row of the partition. After that, we are defining a table expression
    from which the output row will be returned. Finally, data will be sorted by date
    within the window (starting with the earliest date), and partitioning will be
    performed on a customer (each customer is a separate “window”).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了负值（-1）和ABS，这意味着窗口结束于分区的最后一行。之后，我们定义一个表表达式，从中返回输出行。最后，数据将在窗口内按日期排序（从最早的日期开始），并在客户上进行分区（每个客户是一个独立的“窗口”）。
- en: '![](../Images/1df0f364a0adbec4c8e86b7b2546beba.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1df0f364a0adbec4c8e86b7b2546beba.png)'
- en: Image by author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Now, we have a running total for each customer! So, we can for example now
    calculate a percentage of each individual purchase within the whole:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了每个客户的累计总数！所以，我们可以例如计算每笔个别购买在整体中的百分比：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/4a25ae0d6db928847c497106b013ed16.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a25ae0d6db928847c497106b013ed16.png)'
- en: Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'So far, so good! Let’s do some more cool stuff. First, I’ll calculate how many
    days passed between two consecutive orders. For that task, another DAX window
    function comes to the rescue: OFFSET. Essentially, I want to grab the date of
    the previous row and calculate the difference in days between the current row
    date and the previous row date:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利！让我们做一些更酷的事情。首先，我将计算两个连续订单之间的天数。为此，另一种DAX窗口函数OFFSET将派上用场。实际上，我想抓取上一行的日期，并计算当前行日期与上一行日期之间的天数差：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/15c96a092407974bb49f6dbefdc9cc79.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15c96a092407974bb49f6dbefdc9cc79.png)'
- en: Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'And, here is the measure to calculate the number of days between the orders:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是计算订单之间天数的度量：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/592a24a8d758dc3682c66cb1bf59985b.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/592a24a8d758dc3682c66cb1bf59985b.png)'
- en: Image by author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Ok, now, let’s calculate the average number of days between the orders for
    every customer:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在，让我们计算每个客户订单之间的平均天数：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/351daacb32b3bf88156edd4faa5d3449.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/351daacb32b3bf88156edd4faa5d3449.png)'
- en: Image by author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: So, what can we conclude at this point? Alexandra orders on average every 22
    days, while Adam needs 89 days on average to make a new order. How does that compare
    to a whole? Are 89 days way too long between the orders, or not?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们目前可以得出什么结论？亚历山德拉平均每22天下单，而亚当平均需要89天才会下新订单。与整体相比如何？89天的间隔是否过长？
- en: So, let’s put these numbers into the context of the whole dataset.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们将这些数字放入整个数据集的背景中。
- en: '![](../Images/1d44c0b1526e11d7f82c52b01252c3ea.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d44c0b1526e11d7f82c52b01252c3ea.png)'
- en: Image by author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Although 89 days may look bad compared to 22 days for Alexandra Jenkins, we
    may conclude that these 89 days are not bad at all compared to the average for
    all the customers, which is 287 days! Great insight indeed!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然89天相比于亚历山德拉·詹金斯的22天看起来不太好，但我们可以得出结论，与所有客户的平均天数287天相比，这89天根本不算差！确实很有洞察力！
- en: 'Let’s wrap it up by calculating the total customer lifetime. This is the number
    of days between the first and the last order for each customer. So, let’s calculate
    the first and the last order date within our “windows”:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过计算总客户生命周期来总结一下。这是每个客户首次和最后一次订单之间的天数。所以，让我们在我们的“窗口”内计算第一次和最后一次订单的日期：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/5ba9401851bae76554eb7e7154903178.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5ba9401851bae76554eb7e7154903178.png)'
- en: Image by author
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Here is the calculation for the number of customer lifetime days:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是客户生命周期天数的计算：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And, once I drag it into the table, I can see that it’s being calculated within
    each window (for each customer separately):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我把它拖到表格中，就能看到它在每个窗口（每个客户单独计算）内被计算：
- en: '![](../Images/fd085451b63d3f1b9ce9894a41ce9ecd.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd085451b63d3f1b9ce9894a41ce9ecd.png)'
- en: Image by author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Of course, this was just a basic example of what is possible by using DAX window
    functions. Honestly, there is an indefinite number of use cases to think of —
    for example, I could have also ranked individual rows within the window (and quickly
    identified the highest sales amount for each customer).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是使用DAX窗口函数的一个基本示例。说实话，有无数的用例可以考虑——例如，我还可以在窗口内对单独的行进行排名（并快速识别每个客户的最高销售额）。
- en: 'I could have also partitioned by multiple attributes — for example, by customer
    AND month. Then, we would have a “window” containing all the rows for a customer
    within a single month. Think of it: Adam Young — July, Adam Young — August, Alexandra
    Jenkins — July, Alexandra Jenkins — August, and so on. Depending on your specific
    business request, your “window” can be defined differently.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我还可以通过多个属性进行分区——例如，按客户和月份。这样，我们将有一个包含某个客户在单个月份内所有行的“窗口”。想象一下：亚当·杨——七月，亚当·杨——八月，亚历山德拉·詹金斯——七月，亚历山德拉·詹金斯——八月，等等。根据你的具体业务需求，“窗口”可以有不同的定义。
- en: Conclusion
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Window functions are one of the most important enhancements to the DAX language,
    there is no doubt about that! Some of the business use cases that previously required
    writing complex and verbose DAX, now may be fulfilled in a more elegant and optimal
    way. Same as in SQL language, where window functions are one of the most powerful
    analytical tools, DAX window functions will definitely make many of the Power
    BI development tasks easier to implement.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数是DAX语言最重要的增强功能之一，这一点毫无疑问！一些之前需要编写复杂且冗长的DAX的业务用例，现在可以以更优雅、更优化的方式实现。正如SQL语言中，窗口函数是最强大的分析工具之一，DAX窗口函数也将使许多Power
    BI开发任务更易于实现。
- en: Thanks for reading!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
