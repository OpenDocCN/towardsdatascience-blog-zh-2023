- en: 'Supercharged pandas: Encrypting Excel Files Written from DataFrames'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超强 pandas：加密从 DataFrames 写入的 Excel 文件
- en: 原文：[https://towardsdatascience.com/supercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b?source=collection_archive---------7-----------------------#2023-06-12](https://towardsdatascience.com/supercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b?source=collection_archive---------7-----------------------#2023-06-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/supercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b?source=collection_archive---------7-----------------------#2023-06-12](https://towardsdatascience.com/supercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b?source=collection_archive---------7-----------------------#2023-06-12)
- en: Introducing an ExcelHelper class which allows you to encrypt Excel files with
    a strong password or a password of your choice
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍一个 ExcelHelper 类，它允许你使用强密码或自定义密码加密 Excel 文件
- en: '[](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)[![Ji
    Wei Liew](../Images/f1b7267530b9a97106e6464b7b45ed85.png)](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)
    [Ji Wei Liew](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)[![Ji
    Wei Liew](../Images/f1b7267530b9a97106e6464b7b45ed85.png)](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)
    [Ji Wei Liew](https://jiweiliew.medium.com/?source=post_page-----1251b585145b--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbf5390a70cc8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&user=Ji+Wei+Liew&userId=bf5390a70cc8&source=post_page-bf5390a70cc8----1251b585145b---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)
    ·6 min read·Jun 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1251b585145b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&user=Ji+Wei+Liew&userId=bf5390a70cc8&source=-----1251b585145b---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fbf5390a70cc8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&user=Ji+Wei+Liew&userId=bf5390a70cc8&source=post_page-bf5390a70cc8----1251b585145b---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1251b585145b--------------------------------)
    ·6 min read·2023年6月12日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F1251b585145b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&user=Ji+Wei+Liew&userId=bf5390a70cc8&source=-----1251b585145b---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1251b585145b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&source=-----1251b585145b---------------------bookmark_footer-----------)![](../Images/48f2ccc861b8edbdc2f949971790e150.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F1251b585145b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsupercharged-pandas-encrypting-excel-files-written-from-dataframes-1251b585145b&source=-----1251b585145b---------------------bookmark_footer-----------)![](../Images/48f2ccc861b8edbdc2f949971790e150.png)'
- en: Writing to Excel and Encrypting it (Image by the author)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据写入 Excel 并加密（图片由作者提供）
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this article, I will be sharing how to incorporate an `ExcelHelper` class
    to open and encrypt the Excel file after writing dataframes to Excel. I’ve included
    this encryption capability in the `to_excelp` function in my previous [article](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将分享如何结合使用 `ExcelHelper` 类来在将数据框写入 Excel 后打开并加密 Excel 文件。我在之前的 [文章](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3)
    中已将这一加密功能包含在 `to_excelp` 函数中。
- en: '[](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3?source=post_page-----1251b585145b--------------------------------)
    [## Supercharged pandas: Reading from and Writing to Excel'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3?source=post_page-----1251b585145b--------------------------------)
    [## 超强大的pandas：从Excel中读取和写入'
- en: Enhancing .read_excel & .to_excel methods to allow you to focus on data exploration
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增强.read_excel和.to_excel方法，以便你可以专注于数据探索
- en: towardsdatascience.com](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3?source=post_page-----1251b585145b--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/supercharged-pandas-reading-from-and-writing-to-excel-9379f39db4b3?source=post_page-----1251b585145b--------------------------------)
- en: For data scientists and machine learning enthusiasts who are reading this, you
    are likely to find it helpful as it will speed up your work when exporting dataframes
    to Excel.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据科学家和机器学习爱好者来说，你会发现这非常有用，因为它可以加快将数据框导出到Excel时的工作速度。
- en: Motivation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动机
- en: In a recent project, I had to analyze data and prepare statistics for a few
    people. As the data contained sensitive information, there was a need to password-protect
    the files. This is very much aligned with my skill set and if you have read my
    previous article, within `pypo.py`, I already have a `to_excelp` function which
    opens the Excel file after it has been created by the `df.to_excel()` method.
    While this is worked well for me, it seems like a good time to relook at how it
    was implemented and also add the capability to password-protect the Excel file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的一个项目中，我需要分析数据并为几个人准备统计数据。由于数据包含敏感信息，需要对文件进行密码保护。这与我的技能非常匹配，如果你读过我之前的文章，你会发现，在`pypo.py`中，我已经有一个`to_excelp`函数，该函数在Excel文件通过`df.to_excel()`方法创建后打开它。虽然这对我有效，但现在似乎是重新审视实现方式并增加密码保护功能的好时机。
- en: Content
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容
- en: Opening and Encrypting the Excel file
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开和加密Excel文件
- en: Generating a strong password
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成强密码
- en: Putting it all together
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整合所有内容
- en: Full code [here](https://gist.github.com/jiweiliew/f07e24861ea42fd17caebf8566d8c2ac).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码 [在这里](https://gist.github.com/jiweiliew/f07e24861ea42fd17caebf8566d8c2ac)。
- en: Part 1 — Opening and Encrypting the Excel File
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1部分 — 打开和加密Excel文件
- en: 'When working with python and pandas, there are good reasons to open the Excel
    file, for example, visually inspecting it during testing, or formatting it before
    sending to stakeholders. If there is an additional need to encrypt the Excel file,
    then there would be 3 scenarios to handle: *open-only*, *encrypt-only*, *open
    & encrypt*. If we are neither opening nor encrypting the Excel file, then nothing
    needs to be done since `df.to_excel()` would suffice.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用python和pandas时，打开Excel文件有很多理由，例如，在测试期间进行视觉检查，或者在发送给利益相关者之前进行格式化。如果有额外的需求来加密Excel文件，则需要处理3种情况：*仅打开*，*仅加密*，*打开并加密*。如果我们既不打开也不加密Excel文件，那么不需要做任何操作，因为`df.to_excel()`就足够了。
- en: '`ExcelHelper` is a class written to launch Excel (the application) and then
    open the workbook based on the `path` provided. Programmatically, this is a 2-step
    process. Most people never realize it because the Excel application and workbook
    launches together when you double-click an Excel file.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExcelHelper`是一个用于启动Excel（应用程序）并根据提供的`path`打开工作簿的类。从程序角度看，这是一个两步过程。大多数人从未意识到这一点，因为当你双击一个Excel文件时，Excel应用程序和工作簿会一起启动。'
- en: '**Initialize the ExcelHelper class**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**初始化ExcelHelper类**'
- en: '`__init__(self, launch=True, encrypt=False, password=None, length=20, quit_=True)`
    This is the initialization call for the `ExcelHelper`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__(self, launch=True, encrypt=False, password=None, length=20, quit_=True)`
    这是`ExcelHelper`的初始化调用。'
- en: If `launch` equals to `True`, the workbook is displayed after encryption is
    done.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`launch`等于`True`，在加密完成后工作簿会被显示出来。
- en: If `encrypt` equals to `True`, the `self._encrypt()` method, which will be explained
    later, is called.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`encrypt`等于`True`，将调用`self._encrypt()`方法，稍后会进行解释。
- en: '`password` allows the user to input a preferred password, otherwise it will
    automatically suggest a strong password with `length` number of characters, where
    the maximum length is 255.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`允许用户输入首选密码，否则将自动建议一个长度为`length`的强密码，最大长度为255。'
- en: '**Open workbook**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**打开工作簿**'
- en: '`_open_wb(self, path, visible=False)` converts the given path to an absolute
    path and then opens it. Converting a path to an absolute path is necessary otherwise
    applications dispatched by `win32com.client` cannot find the file. (Previously,
    I used a `try-except` block to prepend the path with the current working directory
    but that is unnecessarily verbose and takes a bit of time to really understand
    what one is trying to do.)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_open_wb(self, path, visible=False)` 将给定路径转换为绝对路径，然后打开它。将路径转换为绝对路径是必要的，否则由`win32com.client`调度的应用程序无法找到文件。（之前，我使用了`try-except`块来在路径前添加当前工作目录，但这显得过于冗长，并且需要花费一些时间才能真正理解我们要做的事情。）'
- en: '`visible` controls whether the application is visible to the user. Generally,
    it makes sense to show the application only after the encryption is completed.
    So if we are launching and encrypting, we should set `visible=True` only after
    `self._encrypt()` is done.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`visible` 控制应用程序是否对用户可见。通常，只有在加密完成后才显示应用程序才有意义。因此，如果我们正在启动并加密，应该在`self._encrypt()`完成后才将`visible=True`设置为真。'
- en: '**Encrypt Excel**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**加密Excel**'
- en: '`_encrypt(self, visible=False)` encrypts the Excel workbook and then displays
    the application by setting the `self.xl.Visible` attribute after the encryption
    is completed.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_encrypt(self, visible=False)` 加密Excel工作簿，然后在加密完成后通过设置`self.xl.Visible`属性来显示应用程序。'
- en: Setting `self.xl.DisplayAlerts` to `True` is important otherwise the launched
    Excel file will not give any alerts (case in point, if you press Ctrl+F and try
    to find some gibberish and there would be no prompt 😱; it happened for me and
    I was really confused!).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`self.xl.DisplayAlerts`设置为`True`是很重要的，否则启动的Excel文件不会发出任何警报（例如，如果你按Ctrl+F尝试查找一些无意义的字符而没有任何提示
    😱；这曾经发生在我身上，我真的很困惑！）。
- en: '**Execute method**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行方法**'
- en: '`execute(self, path, launch, encrypt, quit_)` handles the 3 scenarios described
    above.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute(self, path, launch, encrypt, quit_)` 处理上述3种情况。'
- en: '`quit_` argument closes the Excel application (trailing underscore is a convention
    to denote that `quit` is a reserved keyword in python). When `ExcelHelper` is
    initiated, if `launch=False`, the Excel application runs in the background and
    the Excel file is `opened`. If the user now double-clicks on the Excel file, he
    will be prompted that it can only be open in read-only mode. It is quite difficult
    for non-technical user to close the file; the workaround would be to open Task
    manager, select the Excel program and then End Task. Therefore, there is a need
    to call `.Quit()` to terminate the Excel application. We could have just closed
    the workbook, but perhaps there is no need to handle this so finely for now.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quit_` 参数关闭Excel应用程序（尾部下划线是一种约定，表示`quit`在Python中是一个保留关键字）。当`ExcelHelper`被初始化时，如果`launch=False`，Excel应用程序将在后台运行，Excel文件会被`打开`。如果用户现在双击Excel文件，他会被提示只能以只读模式打开。对于非技术用户来说，关闭文件相当困难；解决方法是打开任务管理器，选择Excel程序，然后结束任务。因此，需要调用`.Quit()`来终止Excel应用程序。我们本可以直接关闭工作簿，但也许现在不需要处理得如此细致。'
- en: Part 2 — Generating a strong password
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2部分 — 生成强密码
- en: Initially, I was using `from cryptography.fernet import Fernet; Fernet.generate_key()`
    to generate random passwords. While several users were pleasantly surprised by
    the length and randomness of the password, I did not like it very much because
    it is a bit too long and does not contain a variety of punctuation. I googled
    and found a better [approach](https://stackoverflow.com/a/39596292/8350440) on
    StackOverflow. (I am always very impressed by how easily one can get very high
    quality answers on StackOverflow. All the tough work has already been done by
    all the giants, all we need to do is to search for it, copy, paste, and make small
    tweaks (e.g. change variable names).) The function is quite straightforward and
    rather self-explanatory.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我使用`from cryptography.fernet import Fernet; Fernet.generate_key()`来生成随机密码。虽然几个用户对密码的长度和随机性感到惊讶，但我不是很喜欢，因为它有点长，并且不包含多样的标点符号。我在Google上查找了一个更好的[方法](https://stackoverflow.com/a/39596292/8350440)在StackOverflow上。（我总是对StackOverflow上如何轻松获得高质量答案感到非常惊讶。所有困难的工作已经由所有前辈完成，我们只需搜索、复制、粘贴并做些小调整（例如更改变量名）。）这个函数相当简单直接，自解释性也很强。
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Just as everything was going a bit too smoothly, while testing my code, I noticed
    that occasionally the passwords cannot be used to open the file! I was really
    puzzled. It took a bit of trial-and-error and I began to suspect that there could
    be some characters which are not *suitable* as passwords because this phenomenon
    only occurred when passwords contain 2 backslashes `\\`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正当一切进展得过于顺利时，在测试我的代码时，我注意到有时密码无法用来打开文件！我真的很困惑。经过一番试错后，我开始怀疑可能有些字符是不*适合*用作密码的，因为这种现象只在密码包含两个反斜杠
    `\\` 时发生。
- en: 'Here’s a bit of background to allow you to appreciate the situation: I use
    Powershell and Notepad++, and my code prints the passwords to `stdout`. Next,
    I highlight the password printed on Powershell and then paste it when Excel prompts
    me to enter the password. So the issue is that `\` is an escape character, hence
    the first `\` should be ignored when I enter this as the password. It is troublesome
    to handle and for the purpose of passwords, I can do with one less character.
    Hence, all I did was slice out backslash in `string.punctuation`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些背景信息可以让你更好地理解情况：我使用Powershell和Notepad++，我的代码将密码打印到 `stdout`。接下来，我在Powershell上突出显示打印出的密码，然后在Excel提示我输入密码时粘贴它。所以问题是
    `\` 是一个转义字符，因此在我输入密码时，第一个 `\` 应该被忽略。处理起来很麻烦，对于密码的目的，我可以少用一个字符。因此，我所做的就是在 `string.punctuation`
    中切除反斜杠。
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Part 3 — Putting it all together
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分 — 将一切整合起来
- en: Since there is almost no value-add to instantiate an `ExcelHelper` object if
    you are not launching or encrypting the Excel file, one should start with `if
    launch or encrypt:`. Next, is merely passing the keyword arguments from `to_excelp`
    to `ExcelHelper` and returning the object and `password`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于如果你不启动或加密Excel文件，实例化 `ExcelHelper` 对象几乎没有附加值，因此应该以 `if launch or encrypt:`
    开始。接下来，仅需将关键字参数从 `to_excelp` 传递到 `ExcelHelper` 并返回对象和 `password`。
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you are writing dataframes to several different Excel files by calling this
    function, I would recommend to store the results in a list of tuples. You can
    subsequently iterate over this list of tuples to get the path to the Excel files
    and their passwords. Storing the object might be useful in future, especially
    if you intend to add more functionalities to `ExcelHelper`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过调用这个函数将数据框写入多个不同的Excel文件，我建议将结果存储在一个元组列表中。你可以随后遍历这个元组列表以获取Excel文件的路径及其密码。存储对象可能在未来很有用，特别是如果你打算为
    `ExcelHelper` 添加更多功能的话。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`ExcelHelper` can also be added to other your existing scripts too.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExcelHelper` 也可以添加到你现有的其他脚本中。'
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Conclusion
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Revisiting old code written by myself is like a walk down memory lane which
    reveals how little I knew back then. Although I am very much embarrassed by it,
    I am glad to know that I have progressed since then.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重新审视自己写的旧代码就像是走在记忆的长廊上，揭示了当时我知道的少。虽然对此感到非常尴尬，但我很高兴知道自己已经有所进步。
- en: “If you’re not embarrassed by your old code then you aren’t progressing as a
    programmer.” [Anonymous]
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “如果你对自己旧的代码不感到尴尬，那么你作为程序员就没有进步。” [匿名]
- en: Writing these little classes, functions takes time but there are immense benefits
    for having them as it automates the mechanical and not-so-fun parts of work and
    allows one to focus on the important tasks. (Imagine having to think about passwords
    with uppercase, lowercase, numbers and punctuation and storing them in a file
    all the time.)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这些小类和函数需要时间，但它们的好处巨大，因为它们自动化了机械化且不太有趣的工作部分，并使人能够专注于重要任务。（想象一下，总是要考虑包含大写字母、小写字母、数字和标点符号的密码，并将它们存储在文件中。）
