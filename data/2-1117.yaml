- en: How to build a Shazam-like Telegram Bot using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Python 构建一个类似 Shazam 的 Telegram 机器人
- en: 原文：[https://towardsdatascience.com/how-to-build-a-shazam-like-telegram-bot-using-python-98dc081c53d5](https://towardsdatascience.com/how-to-build-a-shazam-like-telegram-bot-using-python-98dc081c53d5)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-build-a-shazam-like-telegram-bot-using-python-98dc081c53d5](https://towardsdatascience.com/how-to-build-a-shazam-like-telegram-bot-using-python-98dc081c53d5)
- en: A tutorial to create and deploy a telegram bot that takes in music in real-time,
    and helps you to search the title and the singer
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个教程，教你如何创建和部署一个可以实时接收音乐并帮助你查找歌曲标题和歌手的 Telegram 机器人
- en: '[](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)[![Eugenia
    Anello](../Images/537f444252cdc60709e7a19e37734c7b.png)](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)
    [Eugenia Anello](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)[![Eugenia
    Anello](../Images/537f444252cdc60709e7a19e37734c7b.png)](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)
    [Eugenia Anello](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)
    ·9 min read·Jan 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)
    ·阅读时间9分钟·2023年1月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/42e32cdfef8d602899d368abc141af42.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42e32cdfef8d602899d368abc141af42.png)'
- en: Photo by [Austin Neill](https://unsplash.com/@arstyy) on [Unsplash](https://unsplash.com/photos/hgO1wFPXl3I)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Austin Neill](https://unsplash.com/@arstyy) 提供，来源于 [Unsplash](https://unsplash.com/photos/hgO1wFPXl3I)
- en: When you listen to music outside, like in a bar or a shop, and you really like
    it, don’t you wonder what the song’s title and the singer’s name are?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在外面听到音乐，比如在酒吧或商店里，如果你非常喜欢这首歌，难道不会想知道这首歌的标题和歌手的名字吗？
- en: It happened to me a lot of times and there is only one solution. Shazam. Download
    it and tap the Pop-Up button to identify the music.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到过很多次这种情况，只有一个解决方案。Shazam。下载它并点击弹出按钮来识别音乐。
- en: In this article, we are going to build a similar app to discover the song and
    the singer. A quick and easy way to develop this data science project is to create
    a Telegram Bot with Python.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将构建一个类似的应用来发现歌曲和歌手。开发这个数据科学项目的一种快速简便的方法是使用 Python 创建一个 Telegram 机器人。
- en: While you listen to the music, you record the voice. This bot will transcribe
    the audio into text and will find the title of the song and the singer for you.
    Let’s get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你听音乐时，你可以录制声音。这个机器人会将音频转录成文本，并为你找到歌曲的标题和歌手。让我们开始吧！
- en: 'Table of contents:'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录：
- en: '[**Part 1: Create Telegram Bot with Python**](#962f)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**第一部分：用 Python 创建 Telegram 机器人**](#962f)'
- en: '[**Part 2: Deploy Telegram Bot to Fly.io**](#379f)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**第二部分：将 Telegram 机器人部署到 Fly.io**](#379f)'
- en: 'Part 1: Create Telegram Bot with Python'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分：用 Python 创建 Telegram 机器人
- en: '![](../Images/935e38aa1851d1376de171bdb5e0c6b4.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/935e38aa1851d1376de171bdb5e0c6b4.png)'
- en: Illustration by Author
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作者插图
- en: This tutorial will be split into two parts. In the first part, we are going
    to focus on creating the telegram bot that transcribes the registration and discovers
    the information behind the song. Later, we’ll deploy the telegram bot to fly.io,
    which constitutes one of the many platforms that enable to building, running and
    scaling of applications in the cloud.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将分为两个部分。在第一部分中，我们将专注于创建一个可以转录音频并发现歌曲信息的 Telegram 机器人。之后，我们会将这个 Telegram 机器人部署到
    fly.io 上，这个平台是众多支持云端应用构建、运行和扩展的平台之一。
- en: '**Requirements**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要求**'
- en: '**Install libraries**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装库**'
- en: '**First steps to create Telegram Bot**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建 Telegram 机器人的第一步**'
- en: '**Transcribe the song’s audio**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转录歌曲的音频**'
- en: '**Discover the information about the song**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解有关歌曲的信息**'
- en: '**Requirements:**'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**要求：**'
- en: There are a few steps to steps to follow before starting programming with Python.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始用 Python 编程之前，需要遵循一些步骤。
- en: Go to Telegram, search for @botfather and click on the first result.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 Telegram，搜索 @botfather 并点击第一个结果。
- en: '![](../Images/89ebe7ebfee11ca39ed49a792ea0d9a9.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89ebe7ebfee11ca39ed49a792ea0d9a9.png)'
- en: Press the Start button to begin a conversation with BotFather.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下开始按钮以开始与BotFather对话。
- en: '![](../Images/a9f41f28ab708952446c933b9fec60e6.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a9f41f28ab708952446c933b9fec60e6.png)'
- en: Write `/newbot` and follow the instructions suggested in the screenshot. After
    creating the bot, you will receive the token by BotFather, allowing you access
    to Telegram API.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`/newbot`并按照截图中的指示操作。创建机器人后，你将收到BotFather发给你的令牌，从而允许你访问Telegram API。
- en: '![](../Images/95f6188ba265e10371d4f04f3d163509.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95f6188ba265e10371d4f04f3d163509.png)'
- en: Type the name of your telegram bot.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入你的Telegram机器人名称。
- en: '![](../Images/dc4d237fe211c5d0fc89d07ac377ff51.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc4d237fe211c5d0fc89d07ac377ff51.png)'
- en: '**Install libraries**'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**安装库**'
- en: First of all, install a python library, that allows creating a telegram bot
    with few lines of code. It’s called **pyTelegramBotAPI**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，安装一个允许用少量代码创建Telegram机器人的Python库。它叫做**pyTelegramBotAPI**。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To transcribe the audio, I am going to use **Steamship**’s API. Before installing
    the package, you need to install nodej. In Windows, you need to install it from
    here and add the path on the PATH environment variable, while on ubuntu you need
    two lines of code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了转录音频，我将使用**Steamship**的API。在安装包之前，你需要安装nodej。在Windows上，你需要从这里安装并将路径添加到PATH环境变量中，而在ubuntu上你需要运行两行代码：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After you can finally install Steamship CLI in your Python virtual environment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以在你的Python虚拟环境中安装Steamship CLI。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once it’s installed, we are going to pass to the third API that permits us to
    discover the song from the audio. This is possible by getting access to Google
    search results through this API, called **SerpApi**.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们将进入第三个API，它允许我们从音频中发现歌曲。这可以通过访问Google搜索结果来实现，使用的API叫做**SerpApi**。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**First steps to creating the telegram bot**'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**创建Telegram机器人的第一步**'
- en: Once you have obtained the API token of Telegram and created the Telegram Bot,
    which should appear in your Telegram application, we can start to explore [**pyTelegramBotAPI**](https://pypi.org/project/pyTelegramBotAPI/),
    which provides Python implementations to create a Telegram Bot with few lines
    of code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了Telegram的API令牌并创建了Telegram机器人，它应该会出现在你的Telegram应用中，我们可以开始探索[**pyTelegramBotAPI**](https://pypi.org/project/pyTelegramBotAPI/)，它提供了用少量代码创建Telegram机器人的Python实现。
- en: There are many other different python libraries that allow building Telegram
    Bots, but since I found many tutorials that used this library and the documentation
    was well done, I chose it for my little project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他不同的Python库可以用来构建Telegram机器人，但由于我发现许多教程使用了这个库，且文档做得很好，我选择了它来完成我的小项目。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We have a file `cred.json` that contains the bot token and the API keys for
    Steamship and SerpApi:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个文件`cred.json`，其中包含了机器人令牌以及Steamship和SerpApi的API密钥：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In line 11, we simply create an instance of the `TeleBot`, which is a class
    that provides functions to handle messages in Telegram. For example, let’s define
    a message handler, that returns the message “Insert the audio of your song” if
    you write on the chat `/start` or `/hello`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第11行，我们简单地创建了一个`TeleBot`实例，它是一个提供处理Telegram消息功能的类。例如，让我们定义一个消息处理器，如果你在聊天中输入`/start`或`/hello`，它会返回消息“插入你的歌曲音频”。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At the end of the code, we launch the bot using `bot.infinity_polling()`
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码末尾，我们使用`bot.infinity_polling()`来启动机器人。
- en: '![](../Images/a6b60277203ad0829b5af830e3642555.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6b60277203ad0829b5af830e3642555.png)'
- en: Screenshot by Author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的截图
- en: You should have a similar result, like in the screenshot above, after running
    `python bot.py` on the terminal.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`python bot.py`后，你应该会看到类似于上图的结果。
- en: After the function `send_welcome`, we can define another function, called `telegram_bot`,
    which will deal with audio files of the type “voice”.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数`send_welcome`之后，我们可以定义另一个函数，叫做`telegram_bot`，它将处理“语音”类型的音频文件。
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are interested in obtaining the public URL of your audio file sent to the
    bot. To check if the URL is right, copy the following path, by substituting the
    bot token and the file path, in your browser. If it works, it should download
    the audio to your local PC.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望获得你发送给机器人的音频文件的公开URL。要检查URL是否正确，请在浏览器中复制以下路径，替换令牌和文件路径。如果有效，它应该会将音频下载到你的本地电脑。
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The last operation we need to do is the convertion of the audio from OGA to
    MP3 format. This is an important step since the OGA file is not supported for
    transcription.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一个操作是将OGA格式的音频转换为MP3格式。这是一个重要步骤，因为OGA文件不支持转录。
- en: To convert the audio to an mp3 file, we are going to use the ffmpeg wrapper,
    which allows converting various audio files using command lines. Before using
    it, you need installing. If you work in windows, check this [guide](https://www.wikihow.com/Install-FFmpeg-on-Windows)
    that shows all the steps, while in Linux you need only the command line `sudo
    apt install ffmpeg`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将音频转换为 mp3 文件，我们将使用 ffmpeg 包装器，它允许使用命令行转换各种音频文件。在使用之前，你需要先安装它。如果你在 Windows
    上工作，请查看这个 [指南](https://www.wikihow.com/Install-FFmpeg-on-Windows)，它展示了所有步骤，而在
    Linux 上，你只需使用命令 `sudo apt install ffmpeg`。
- en: After the convertion reached in line 4 into the function `convert_oga_to_mp3`,
    we need to extract again the URL of the new audio file, which will have a different
    format at the end.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数 `convert_oga_to_mp3` 的第 4 行进行转换后，我们需要再次提取新音频文件的 URL，该文件的格式会有所不同。
- en: '**Transcribe the audio’s song**'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**转录音频的歌曲**'
- en: Now, we have reached the most interesting part of the tutorial which makes us
    reach the goals of the telegram bot. Before going further, log in [here](http://hKFo2SBHcnZYcldQTWdySWwwUXFTMU9xYVhTcU5tTnkxOUlGMKFur3VuaXZlcnNhbC1sb2dpbqN0aWTZIFpPUXNzNnIzSEJzMzZnbmtaTGNRcndDbDRlSlhzSGp3o2NpZNkga21ZbWNKTFJpSzU4TER2WXR6cmNmQWlDUmNCMHVQR0s)
    to obtain the API key. First, we want to transcribe the audio using Steamship
    API. The function `transcribe_audio` takes as input the audio URL retrieved before
    and the instance of `Steamship`, which is a class that provides functions and
    methods for many AI applications. In this case, it’s focused on audio transcription.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经到了教程中最有趣的部分，这使我们达到了 Telegram 机器人的目标。在继续之前，登录 [这里](http://hKFo2SBHcnZYcldQTWdySWwwUXFTMU9xYVhTcU5tTnkxOUlGMKFur3VuaXZlcnNhbC1sb2dpbqN0aWTZIFpPUXNzNnIzSEJzMzZnbmtaTGNRcndDbDRlSlhzSGp3o2NpZNkga21ZbWNKTFJpSzU4TER2WXR6cmNmQWlDUmNCMHVQR0s)
    以获取 API 密钥。首先，我们想使用 Steamship API 转录音频。函数 `transcribe_audio` 以之前检索到的音频 URL 和 `Steamship`
    的实例为输入，`Steamship` 是一个提供许多 AI 应用功能和方法的类。在这种情况下，它专注于音频转录。
- en: 'The code can be summarized by a few lines of code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以用几行代码来总结：
- en: In line 3, we specify that we are going to use the `audio_markdown` package
    to transcribe audio and, then, generate the Markdown output.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 3 行，我们指定将使用 `audio_markdown` 包来转录音频，然后生成 Markdown 输出。
- en: In the next line, we invoke the method `transcribe_url` by calling `invoke`.
    We also need to pass our URL of the audio.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下一行，我们通过调用 `invoke` 来调用方法 `transcribe_url`。我们还需要传递音频的 URL。
- en: In the middle of the function, we invoke the method `get_markdown`, which will
    allow us to receive the transcription of the audio. The number of retries is limited
    to 100 to avoid infinite loops in case it doesn’t succeed.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数的中间，我们调用方法 `get_markdown`，这将允许我们接收音频的转录。为了避免无限循环，如果不成功，重试次数被限制为 100。
- en: The function returns the transcription at the end and we get the resulting text
    on the telegram bot.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该函数在最后返回转录结果，我们在 Telegram 机器人上获得结果文本。
- en: Discover the information about the song
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现有关歌曲的信息
- en: After obtaining the transcription, we pass to the next step, which consists
    in discovering the title and the singer of the song. This is possible using **SerpApi**,
    which is an API that permits getting access to results of Google and other websites.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得转录后，我们进入下一步，即发现歌曲的标题和歌手。这可以通过使用 **SerpApi** 来实现，它是一个 API，允许访问 Google 和其他网站的结果。
- en: We need to pass a dictionary to `GoogleSearch` with the parameters, like the
    song’s words, the API key of SerpApi and we are going to obtain the results from
    Google. It returns a JSON output, which can be converted into a Python dictionary
    to get access to the information. After, a text message will be sent back to the
    sender, which can be the missed/achieved discovery.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向 `GoogleSearch` 传递一个字典，包含如歌曲歌词、SerpApi 的 API 密钥等参数，并从 Google 获得结果。它返回一个
    JSON 输出，可以转换为 Python 字典以获取信息。之后，一条文本消息将发送回发件人，这可能是未发现的/已实现的发现。
- en: '![](../Images/bad7d40ebf2e4fba5a8e5994d3dd797f.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bad7d40ebf2e4fba5a8e5994d3dd797f.png)'
- en: The Illustration of how the app should work.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应该如何工作的示意图。
- en: '**Part 2: Deploy Telegram Bot to Fly.io**'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第 2 部分：将 Telegram 机器人部署到 Fly.io**'
- en: 'Until now, we could make work the bot by running the following command line:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以通过运行以下命令行来使机器人工作：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: But it means that the bot will work only when you run this code and it’s not
    practical. It’s preferable to have the telegram bot always available to make people
    try it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但这意味着机器人只有在你运行此代码时才会工作，这并不实用。最好是让 Telegram 机器人始终可用，让人们尝试。
- en: For this reason, we need to deploy the Telegram Bot. At first, I wanted to use
    Heroku, which is another closed-source platform to deploy applications, but it
    doesn’t offer a free tier anymore.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要部署 Telegram 机器人。最初，我想使用 Heroku，这是另一个用于部署应用程序的闭源平台，但它不再提供免费层。
- en: So, I chose Fly.io as a cloud service because it provides a free plan and it
    was well-documented.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我选择了 Fly.io 作为云服务，因为它提供了免费计划，并且文档齐全。
- en: '**Create requirements.txt and Dockerfile**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建 requirements.txt 和 Dockerfile**'
- en: '**Connect to Fly.io**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接到 Fly.io**'
- en: '**Launch App**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动应用程序**'
- en: '**Deploy App**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署应用程序**'
- en: 1\. Create requirements.txt and Dockerfile
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 创建 requirements.txt 和 Dockerfile
- en: 'To put it into production, we need the file `requirements.txt`, that contains
    all the python dependencies. It can be automatically created by running the command
    line `pipreqs` in your terminal. You must install [pipreqs](https://pypi.org/project/pipreqs/)
    to make the command line work. These are the following python packages required
    by the project:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其投入生产，我们需要 `requirements.txt` 文件，其中包含所有的 Python 依赖项。可以通过在终端中运行命令行 `pipreqs`
    自动创建该文件。你必须安装 [pipreqs](https://pypi.org/project/pipreqs/) 以使命令行有效。项目所需的 Python
    包如下：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In addition to this file, we also need another file, called `Dockerfile`, which
    should be like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个文件，我们还需要另一个文件，名为 `Dockerfile`，其内容应如下：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 2\. Connect to Fly.io
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 连接到 Fly.io
- en: The third requirement is the installation of `flyctl`, a command line that will
    allow deploying our application. You can find the instructions [here](https://fly.io/docs/hands-on/install-flyctl/),
    which can be different depending on your operating system.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个要求是安装 `flyctl`，一个可以部署我们应用程序的命令行工具。你可以在 [这里](https://fly.io/docs/hands-on/install-flyctl/)
    找到说明，具体取决于你的操作系统。
- en: 'If you didn’t create a Fly.io account yet, you need to create one by running
    the command line:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有创建 Fly.io 账户，你需要通过运行以下命令行来创建一个：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In case you already have the account, you only need to sign in by copying on
    the terminal:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有账户，你只需要通过终端复制登录：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 3\. Launch App
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 启动应用程序
- en: 'To get started with this project, we can type the command line:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个项目，我们可以输入以下命令行：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It will ask you for the following information:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会要求你提供以下信息：
- en: Write the app name.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写下应用程序名称。
- en: Select the region for deployment.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择部署的区域。
- en: If you want to set up a Postgresql database. In this case, the answer is no.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要设置一个 Postgresql 数据库。此情况下，答案是否定的。
- en: If you want to set up an Upstash Redis Database now. In this case, the answer
    is no.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你现在想要设置 Upstash Redis 数据库。此情况下，答案是否定的。
- en: If we want to deploy now. The answer is no for now. We’ll deploy it later.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们现在想要部署的话。答案是现在不行。我们稍后再部署。
- en: 'Before deploying the app, I also decided to exploit a functionality provided
    by fly.io, the secrets. As you may know, the credentials are sensitive and you
    may prefer to not give your secrets to anyone except yourself. This is possible
    by tying the following command lines:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署应用程序之前，我还决定利用 fly.io 提供的一个功能，即秘密管理。正如你所知道的，凭据是敏感的，你可能希望不将你的秘密透露给除你自己以外的任何人。这可以通过以下命令行实现：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After running these command lines, the python code needs to be modified. We
    don’t use anymore JSON file with the credentials, which are stored directly on
    fly.io platform. For example, we can get access to the token of the Telegram bot
    in this way:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令行后，Python 代码需要进行修改。我们不再使用包含凭据的 JSON 文件，这些凭据直接存储在 fly.io 平台上。例如，我们可以通过以下方式获取
    Telegram 机器人的令牌：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You need to do the same for the other API keys. You can check the list of the
    command lines with the command line:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要对其他 API 密钥做相同的操作。你可以通过以下命令行查看命令列表：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 4\. Deploy App
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 部署应用程序
- en: 'Finally, we have reached the top of Everest! Just another command line and
    it’s done:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们达到了珠穆朗玛峰的顶峰！只需再输入一条命令，就完成了：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this way, our docker container with telegram bot is built and deployed. The
    code will be launched on the cloud, not on the local PC anymore. Now the telegram
    bot will work
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的包含 Telegram 机器人的 Docker 容器就构建并部署完成了。代码将运行在云端，而不再是在本地计算机上。现在 Telegram 机器人将开始工作。
- en: 'Final Thoughts:'
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终思考：
- en: I hope you appreciated this data science project. It can give you ideas for
    other possible applications. There are a lot of resources available online that
    reach everything you want. You only need creativity, patience and hard work. If
    you have any of these ingredients, there are no limits to what you can do. The
    GitHub code is [here](https://github.com/eugeniaring/shazam-like-telegram-bot).
    Thanks for reading. Have a nice day!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你欣赏这个数据科学项目。它可以给你提供其他可能应用的想法。网上有很多资源可以满足你的需求。你只需要创造力、耐心和努力工作。如果你拥有这些条件，那么你能做的事没有限制。GitHub
    代码在[这里](https://github.com/eugeniaring/shazam-like-telegram-bot)。感谢阅读。祝你有美好的一天！
