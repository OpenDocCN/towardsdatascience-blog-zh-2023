- en: How to Test Your Unit Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何测试你的单元测试
- en: 原文：[https://towardsdatascience.com/how-to-test-your-unit-tests-afe18d6e19d8](https://towardsdatascience.com/how-to-test-your-unit-tests-afe18d6e19d8)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-test-your-unit-tests-afe18d6e19d8](https://towardsdatascience.com/how-to-test-your-unit-tests-afe18d6e19d8)
- en: '[Unit Testing](https://medium.com/tag/unit-testing)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[单元测试](https://medium.com/tag/unit-testing)'
- en: A brief introduction to mutation testing
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突变测试简介
- en: '[](https://dr-robert-kuebler.medium.com/?source=post_page-----afe18d6e19d8--------------------------------)[![Dr.
    Robert Kübler](../Images/3b8d8b88f76c0c43d9c305e3885e7ab9.png)](https://dr-robert-kuebler.medium.com/?source=post_page-----afe18d6e19d8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----afe18d6e19d8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----afe18d6e19d8--------------------------------)
    [Dr. Robert Kübler](https://dr-robert-kuebler.medium.com/?source=post_page-----afe18d6e19d8--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dr-robert-kuebler.medium.com/?source=post_page-----afe18d6e19d8--------------------------------)[![Dr.
    Robert Kübler](../Images/3b8d8b88f76c0c43d9c305e3885e7ab9.png)](https://dr-robert-kuebler.medium.com/?source=post_page-----afe18d6e19d8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----afe18d6e19d8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----afe18d6e19d8--------------------------------)
    [Dr. Robert Kübler](https://dr-robert-kuebler.medium.com/?source=post_page-----afe18d6e19d8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----afe18d6e19d8--------------------------------)
    ·5 min read·Jan 16, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----afe18d6e19d8--------------------------------)
    ·阅读时长5分钟·2023年1月16日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/fbcb034d926169de17728b3dae68786b.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fbcb034d926169de17728b3dae68786b.png)'
- en: Photo by [Erik Mclean](https://unsplash.com/@introspectivedsgn?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Erik Mclean](https://unsplash.com/@introspectivedsgn?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'In my last article, I talked about how unit testing is an essential aspect
    of the work of a data scientist because incorrect code leads to faulty analyses.
    One way to improve unit testing is to use **property-based testing** alongside
    **example-based testing**, i.e. the *normal* way of unit testing. You can check
    out my last article here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我上一篇文章中，我讲述了单元测试如何成为数据科学家工作中的一个重要方面，因为错误的代码会导致分析结果出现问题。提高单元测试的一种方法是将**属性驱动测试**与**示例驱动测试**结合使用，即*常规*的单元测试方式。你可以在这里查看我上一篇文章：
- en: '[](/stop-hardcoding-your-unit-tests-e6643dfd254b?source=post_page-----afe18d6e19d8--------------------------------)
    [## Stop Hardcoding Your Unit Tests'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/stop-hardcoding-your-unit-tests-e6643dfd254b?source=post_page-----afe18d6e19d8--------------------------------)
    [## 停止硬编码你的单元测试'
- en: A guide to property-based testing in Python using Hypothesis
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python中使用Hypothesis进行属性驱动测试的指南
- en: towardsdatascience.com](/stop-hardcoding-your-unit-tests-e6643dfd254b?source=post_page-----afe18d6e19d8--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/stop-hardcoding-your-unit-tests-e6643dfd254b?source=post_page-----afe18d6e19d8--------------------------------)
- en: 'After publishing this article, I [got a response](https://medium.com/@dotcom.software/mutation-testing-is-also-an-amazing-technique-to-verify-if-weve-missed-any-edge-cases-in-our-unit-e3c63cae1a06)
    from **.com software** pointing me to **mutation testing**, which I want to explain
    to you today. Long story short:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布这篇文章后，我[收到了](https://medium.com/@dotcom.software/mutation-testing-is-also-an-amazing-technique-to-verify-if-weve-missed-any-edge-cases-in-our-unit-e3c63cae1a06)来自**.com软件**的回应，向我推荐了**突变测试**，我今天想向你解释一下。长话短说：
- en: Mutation testing allows you to spot weak tests.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 突变测试可以帮助你发现弱测试。
- en: Weak tests are tests that give you a wrong sense of security because they pass
    **even if you know that they should not pass**, the king of them being `assert
    True` . Replacing these tests makes your whole test suite more meaningful and
    trustworthy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 弱测试是那些给你错误安全感的测试，因为它们即使**明知道不该通过**也会通过，其中最典型的就是`assert True`。替换这些测试可以使你的整个测试套件更有意义和可信。
- en: Now, let’s see what this is all about!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解一下这是什么吧！
- en: Weak Tests
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弱测试
- en: 'Consider this very simple function:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个非常简单的函数：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let us assume that you want to write a unit test despite the simplicity of
    this function. A *test_mean.py* file could look like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想编写单元测试，尽管这个函数非常简单。一个*test_mean.py* 文件可能如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Calling `pytest test_mean.py` would then of course result in a passing test.
    Everything is green and we even got 100% coverage! Time to move on to the next
    feature, right? **No!**
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`pytest test_mean.py`当然会导致测试通过。一切都是绿色的，我们甚至达到了100%的覆盖率！是时候继续下一个功能了，对吧？**不！**
- en: 'Let us take a close look at the assertion in the test code instead: the second
    argument to the function is zero, meaning that the `y` in the function is basically
    ignored. The input has a special shape that lets the test pass easier than anticipated.
    For example, it would even pass if the function was'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看测试代码中的断言：函数的第二个参数是零，这意味着函数中的`y`基本上被忽略了。输入具有特殊的形状，使测试比预期更容易通过。例如，如果函数是
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Even after this simple **mutation of the function** — changing a plus to a minus
    —`test_mean` still passes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在这种简单的**函数变异**——将加号改为减号——`test_mean`仍然通过。
- en: '**This should not happen, i**f the test is any good, it should fail whenever
    we change the definition of the function!'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**这不应该发生**，如果测试足够好，它应该在我们更改函数定义时失败！'
- en: A test like this is as good as a metal detector that makes a noise even when
    presented with wood. That’s why we call `test_mean` a **weak test**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的测试就像一个金属探测器，即使面对木材也会发出声音。这就是为什么我们称`test_mean`为**薄弱的测试**。
- en: This weak test might be easy to spot here but if you write code that is slightly
    more involved, you might create weak examples by accident and not even notice
    it, giving you a false sense of security.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个薄弱的测试在这里可能很容易被发现，但如果你写的代码稍微复杂一些，你可能会意外地创建出薄弱的示例却没有注意到，从而给你一种虚假的安全感。
- en: Mutation Testing
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变异测试
- en: 'We can use **mutation testing** to spot weak tests. The idea of mutation testing
    is quite old already: it was originally proposed by Richard Lipton as a student
    in 1971\. It is also very simple, it is so simple in fact that I gave it away
    already in the last chapter.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**变异测试**来发现薄弱的测试。变异测试的理念已经相当古老：它最初由理查德·利普顿在1971年作为学生提出。它也非常简单，实际上我在上一章已经简单介绍过了。
- en: Mutate (apply small changes to) the source code of the function that you want
    to test and see if the tests still pass. If they do, they are weak. If they fail
    (and didn’t fail for the original function), they survived and might be strong.
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对你想要测试的函数源代码进行小的修改，并查看测试是否仍然通过。如果它们通过了，那它们就是薄弱的。如果它们失败（并且原函数没有失败），它们幸存下来并可能是强的。
- en: 'You have seen one mutation already, a change from + to -. Besides that, you
    can change:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了一个变异，即从 + 变为 -。此外，你还可以改变：
- en: '- to +'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 改为 +'
- en: / to * or vice versa,
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: / 改为 * 或反之亦然，
- en: ≥ to > or even <,
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ≥ 改为 > 或者 <，
- en: ≤ to < or even >
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ≤ 改为 < 或者 >
- en: = to != or vice versa
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: = 改为 != 或反之亦然
- en: add or subtract 1 from integers
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从整数中加减1
- en: add some random characters to strings
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向字符串中添加一些随机字符
- en: …
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: …
- en: you get the idea. Just simple tweaks that **still produce valid source code**,
    changing the original function that you want to test into something slightly different.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你明白了吧。只需简单的调整，**仍然生成有效的源代码**，将你想要测试的原函数变成稍微不同的东西。
- en: Of course, you can do this manually and change your source code a couple of
    times, always followed by a `pytest` . But since this is no fun, [people created
    a package to do just that automatically](https://github.com/boxed/mutmut) and
    log the results.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以手动完成这些操作，几次更改源代码，每次之后都运行一次`pytest`。但因为这没有趣味，[有人创建了一个包来自动完成这项工作](https://github.com/boxed/mutmut)并记录结果。
- en: Mutmut for Convenient Mutation Testing
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mutmut 方便的变异测试
- en: '[Anders Hovmöller aka boxed](https://github.com/boxed) and a lot of other contributors
    created a package called [mutmut](https://github.com/boxed/mutmut) to do the work
    for you.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[Anders Hovmöller aka boxed](https://github.com/boxed)和许多其他贡献者创建了一个名为[mutmut](https://github.com/boxed/mutmut)的包来为你完成这项工作。'
- en: First, install it via `pip install mutmut` . Then you have to extract the function(s)
    that you want to test into a file, let’s call it *function.py*. Let’s also still
    assume that the test is in *test_mean.py*. Then you can call
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过`pip install mutmut`安装它。然后，你需要将你想要测试的函数提取到一个文件中，我们称之为*function.py*。我们还假设测试在*test_mean.py*中。然后你可以调用
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: and it will create some mutations of your *function.py* containing the *mean*
    function that we want to test.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它将创建一些包含我们想要测试的*mean*函数的*function.py*的变异。
- en: '*If you open* function.py *in an editor that constantly reloads the file while
    mutmut is running, you can even see how the file gets changed live! But don’t
    worry: mutmut will create a copy of the original file first before it makes modifications.*'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果你在mutmut运行时在一个会不断重新加载文件的编辑器中打开* function.py *，你甚至可以看到文件如何实时变化！但不用担心：mutmut会在进行修改之前先创建原始文件的副本。*'
- en: 'The output will look like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](../Images/38069b69d36188159342474601ce3ee1.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38069b69d36188159342474601ce3ee1.png)'
- en: Image by the author.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'You can see several things here, especially **at the bottom**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里看到几个方面，尤其是**在底部**：
- en: 'Three mutants were created. (*side note: + to -, / to *, 2 to 3 in our case*)'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了三个突变体。(*旁注：+变为-，/变为*，在我们的案例中是2变为3*)
- en: Two out of these three mutants were *killed*, meaning that the unit test that
    passed before failed after the file was changed, which is good 🎉.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这三个突变体中的两个被*杀死*，意味着之前通过的单元测试在文件更改后失败了，这很好 🎉。
- en: 'One mutant survived, meaning that the test still passed although the source
    code changed. This is bad 🙁. We have even seen this survivor already:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个突变体幸存了，这意味着尽管源代码发生了变化，测试仍然通过。这很糟糕 🙁。我们已经看到过这个幸存者：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also create an HTML report via `mutmut html` and open it in a browser:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过 `mutmut html` 创建一个HTML报告并在浏览器中打开：
- en: '![](../Images/cc091067fd6dceec2c9a101112a4d40e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc091067fd6dceec2c9a101112a4d40e.png)'
- en: Image by the author.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: The design could be better, but it contains the main information about the survivors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 设计可以更好，但它包含了关于幸存者的主要信息。
- en: '***Note:*** *Sometimes two weak single tests can make one better test suite.
    For example, if you add the assertion* `*assert mean(-1, 1) == 0*` *— another
    weak test as the mutant* `*return (x+y) * 2*` *would survive — in total no mutant
    would survive mutmut’s procedure, improving the test suite.*'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：*** *有时两个较弱的单独测试可以形成一个更好的测试套件。例如，如果你添加了断言* `*assert mean(-1, 1) == 0*`
    *— 另一个较弱的测试，因为突变体* `*return (x+y) * 2*` *将幸存 — 总的来说，没有突变体会幸存于mutmut的程序，从而改进测试套件。*'
- en: Conclusion
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we have seen that passing tests and even 100% test coverage
    can be deceiving. A passing test is nice, but if it still passes even after changing
    the function that is being tested, this is a red flag that indicates that the
    test might be weak.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们看到通过测试甚至100%的测试覆盖率可能会令人误解。通过的测试很好，但如果即使在更改被测试函数后仍然通过，这可能是一个红旗，表明测试可能较弱。
- en: Mutation testing offers a structured way of changing (mutating) the function.
    The Python library mutmut even allows us to change our source code automatically
    (a backup is created beforehand) and check which tests still pass (🙁) and which
    ones fail after the mutation (🎉).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 突变测试提供了一种结构化的方式来更改（突变）函数。Python库mutmut甚至允许我们自动更改源代码（事先创建了备份），并检查哪些测试在突变后仍然通过（🙁），哪些测试失败（🎉）。
- en: This hardens your test suite, which in turn lets you produce the correct code
    that is necessary for faultless analyses.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你的测试套件更加健壮，从而让你生成正确的代码，这对于无错误分析是必要的。
- en: I hope that you learned something new, interesting, and useful today. Thanks
    for reading!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你今天学到了新的、有趣的、有用的东西。感谢阅读！
- en: '**As the last point, if you**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后一点，如果你**'
- en: '**want to support me in writing more about machine learning and**'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**想支持我写更多关于机器学习的内容和**'
- en: '**plan to get a Medium subscription anyway,**'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计划无论如何获得一个Medium订阅，**'
- en: '**why not do it** [**via this link**](https://dr-robert-kuebler.medium.com/membership)**?
    This would help me a lot! 😊**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么不通过** [**这个链接**](https://dr-robert-kuebler.medium.com/membership)**支持我呢**？这对我帮助很大！😊**'
- en: '*To be transparent, the price for you does not change, but about half of the
    subscription fees go directly to me.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了透明起见，对你来说价格不会改变，但约一半的订阅费用直接归我。*'
- en: '**Thanks a lot, if you consider supporting me!**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**非常感谢，如果你考虑支持我！**'
- en: '*If you have any questions, write me on* [*LinkedIn*](https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/)*!*'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果你有任何问题，请在* [*LinkedIn*](https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/)*上写信给我！*'
