- en: 'Mastering the Art of Machine Learning Workflows: A Comprehensive Guide to Transformer,
    Estimator, and Pipeline'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握机器学习工作流的艺术：变压器、估算器和管道的全面指南
- en: 原文：[https://towardsdatascience.com/mastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8?source=collection_archive---------7-----------------------#2023-06-09](https://towardsdatascience.com/mastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8?source=collection_archive---------7-----------------------#2023-06-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/mastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8?source=collection_archive---------7-----------------------#2023-06-09](https://towardsdatascience.com/mastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8?source=collection_archive---------7-----------------------#2023-06-09)
- en: Write seamless code with optimal results
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写无缝代码以获得最佳结果
- en: '[](https://medium.com/@andreas030503?source=post_page-----6254f4e2d2f8--------------------------------)[![Andreas
    Lukita](../Images/8660ca1fea5da34ce3475281c1f52152.png)](https://medium.com/@andreas030503?source=post_page-----6254f4e2d2f8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6254f4e2d2f8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6254f4e2d2f8--------------------------------)
    [Andreas Lukita](https://medium.com/@andreas030503?source=post_page-----6254f4e2d2f8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@andreas030503?source=post_page-----6254f4e2d2f8--------------------------------)[![Andreas
    Lukita](../Images/8660ca1fea5da34ce3475281c1f52152.png)](https://medium.com/@andreas030503?source=post_page-----6254f4e2d2f8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6254f4e2d2f8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6254f4e2d2f8--------------------------------)
    [Andreas Lukita](https://medium.com/@andreas030503?source=post_page-----6254f4e2d2f8--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F955ef38ea7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8&user=Andreas+Lukita&userId=955ef38ea7b&source=post_page-955ef38ea7b----6254f4e2d2f8---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6254f4e2d2f8--------------------------------)
    ·14 min read·Jun 9, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6254f4e2d2f8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8&user=Andreas+Lukita&userId=955ef38ea7b&source=-----6254f4e2d2f8---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F955ef38ea7b&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8&user=Andreas+Lukita&userId=955ef38ea7b&source=post_page-955ef38ea7b----6254f4e2d2f8---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6254f4e2d2f8--------------------------------)
    ·14 min read·2023年6月9日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F6254f4e2d2f8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8&user=Andreas+Lukita&userId=955ef38ea7b&source=-----6254f4e2d2f8---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6254f4e2d2f8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8&source=-----6254f4e2d2f8---------------------bookmark_footer-----------)![](../Images/750da8ba509c1ea6c28de2648e625fa5.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F6254f4e2d2f8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmastering-the-art-of-machine-learning-workflows-a-comprehensive-guide-to-transformer-estimator-6254f4e2d2f8&source=-----6254f4e2d2f8---------------------bookmark_footer-----------)![](../Images/750da8ba509c1ea6c28de2648e625fa5.png)'
- en: Photo by [Rick Hyne](https://unsplash.com/de/@quinley1770?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Rick Hyne](https://unsplash.com/de/@quinley1770?utm_source=medium&utm_medium=referral)
    贡献，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '*“It’s okay to write it this way as long as I understand it now, and the good
    thing is, it works! I manage to magically churns out a pretty good result with
    my model, what a good one to end off the day.”*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“只要我现在能理解它，写成这样也没关系，而好的一点是，它确实有效！我成功地用我的模型奇迹般地得到了一个相当不错的结果，真是一个不错的收尾。”*'
- en: No, I’m here to tell you that’s not good enough. Indeed, upon starting a Machine
    Learning project, many novices and intermediate-level analysts alike rush to produce
    mediocre-level models with a lack of proper workflow. While at times the problem
    at hand is simple, failure to follow proper workflow often leads to insidious
    problems that can be hard to detect — data leakage, for example.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不，我来告诉你，这还不够好。确实，当你开始一个机器学习项目时，许多新手和中级分析师都急于制作出中等水平的模型，却缺乏适当的工作流程。虽然有时候问题本身很简单，但如果不遵循适当的工作流程，常常会导致一些难以察觉的潜在问题，比如数据泄漏。
- en: “As long as it works, it’s good enough.” Let me tell you it’s not. Let’s role-play
    a quick scenario where you have to explain your work to the Senior Analyst. Here
    are some questions. If it works today, is it guaranteed that it will work tomorrow
    and will be reproducible easily? Could you explain the preprocessing steps of
    your model workflow in a Notebook consisting of more than 200 cells? If you perform
    cross-validation this way, wouldn’t that expose the testing dataset and bloat
    up the model performance? Tough questions, aren’t they?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “只要有效，就足够好了。” 让我告诉你，这并不是。让我们快速模拟一个场景，你需要向高级分析师解释你的工作。这里有一些问题。如果今天有效，是否能保证明天也有效，并且容易重复？你能在包含200多个单元格的Notebook中解释你的模型工作流程的预处理步骤吗？如果你以这种方式进行交叉验证，是否会暴露测试数据集并使模型性能膨胀？这些问题很棘手，不是吗？
- en: Let me tell you, actually, you are not alone and you are not that far. Even
    after attending multiple Business Analytics and Machine Learning courses, none
    of my instructors have shared the tools and tips that I am sharing below. I would
    say they are not the spotlight classes that everyone is paying attention to when
    first introduced to Scikit-Learn. Yet, they produce a consistent result that improves
    your code-writing dramatically. Imagine effortlessly wrangling your data, seamlessly
    transforming features, and training sophisticated models, all while maintaining
    the elegance and simplicity of your code. Yes, that is our objective by the end
    of this comprehensive guide, and hopefully, you will be convinced to adopt the
    practice below. Let’s get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我告诉你，实际上，你并不孤单，也并没有那么远。即使在参加了多个商业分析和机器学习课程后，我的任何一个讲师都没有分享我下面所要分享的工具和技巧。我会说，这些不是每个人在第一次接触Scikit-Learn时都关注的亮点课程。然而，它们会产生一致的结果，显著提升你的代码编写水平。想象一下，轻松处理数据，流畅地转换特征，并训练复杂的模型，同时保持代码的优雅和简洁。这就是我们在本综合指南结束时的目标，希望你能被下面的实践所说服。让我们开始吧。
- en: '**Table of Contents**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录**'
- en: '[Reasons to Adopt Pipeline](#8d5b)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[采用流水线的理由](#8d5b)'
- en: '[Estimators](#29de)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[估算器](#29de)'
- en: '[Transformers](#4358)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[变换器](#4358)'
- en: '[Pipeline](#fd4a)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[流水线](#fd4a)'
- en: '[Custom Estimator](#0457)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义估算器](#0457)'
- en: '[FeatureUnion](#5660)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特征联合](#5660)'
- en: '[Real-world Dataset Examples: Bank Marketing with Grid Search CV](#547b)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[真实世界数据集示例：银行营销与网格搜索交叉验证](#547b)'
- en: Reasons to Adopt Pipeline
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用流水线的理由
- en: '**1\. Streamlined Workflow.** Leveraging Pipeline allows seamless integration
    of multiple steps in your data preprocessing and modeling journey. It enables
    you to chain together various transformers and estimators, ensuring a clear, concise,
    and automated flow from data preprocessing to model training and evaluation. By
    encapsulating your preprocessing and modeling steps in a Pipeline, your code becomes
    more organized, modular, and easier to understand. It improves the way your code
    looks and can be maintained because each step is clearly defined. Treat each step
    in the Pipeline as independent, you can change or add steps without worrying about
    how one preprocessing step will affect the other!'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 精简的工作流程。** 利用流水线可以实现数据预处理和建模过程中的多个步骤的无缝集成。它使你能够将各种变换器和估算器串联起来，确保从数据预处理到模型训练和评估的流程清晰、简洁且自动化。通过将你的预处理和建模步骤封装在流水线中，你的代码变得更加有组织、模块化，并且更易于理解。它改善了代码的外观和可维护性，因为每一步都被清楚地定义。将流水线中的每一步视为独立的，你可以在不担心一个预处理步骤如何影响其他步骤的情况下进行更改或添加步骤！'
- en: '![](../Images/3a976ef31dac95508e385c36c6278c77.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a976ef31dac95508e385c36c6278c77.png)'
- en: Image by Author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '**2\. Prevent Data Leakage.** The dreaded antagonist, the nemesis of every
    analyst. Data Leakage may occur when information from the test dataset unintentionally
    influences the preprocessing steps or model training, leading to overly optimistic
    performance estimates. In a way, you are leaking information about what is going
    to be tested and making your learning model see what is going to be tested in
    advance. Obviously, *“he tryna gas it up”.* Generally, the rule of thumb is to
    fit the training dataset only, then transform both the training and testing dataset.
    ***The code below shows where some people went wrong.*** Also, often you would
    have multiple preprocessing steps that typically involve transformers such as
    `StandardScaler()`, `MinMaxScaler()`, `OneHotEncoder()`, etc. Imagine having to
    do the fit and transform process multiple times throughout your workflow, wouldn’t
    that be confusing and inconvenient?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 防止数据泄露。** 这是每个分析师都害怕的对手。数据泄露可能发生在测试数据集的信息无意中影响了预处理步骤或模型训练，从而导致过于乐观的性能估计。从某种程度上来说，你是在泄露关于将要测试的内容的信息，使你的学习模型提前看到将要测试的内容。显然，*“他在试图吹嘘”。*
    通常的经验法则是只拟合训练数据集，然后同时转换训练和测试数据集。***下面的代码展示了某些人错误的地方。*** 此外，你通常会有多个预处理步骤，这些步骤通常涉及变换器，例如
    `StandardScaler()`、`MinMaxScaler()`、`OneHotEncoder()` 等。想象一下在整个工作流程中多次进行拟合和转换过程，难道这不会让人困惑和不便吗？'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**3\. Hyperparameter Tuning and Cross-Validation.** Easily tune hyperparameters
    across all the steps in your pipeline using techniques such as GridSearchCV. Error
    often goes unnoticed in this particular step, however. Let’s look at a simple
    illustration.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 超参数调整和交叉验证。** 使用如 GridSearchCV 之类的技术轻松调整管道中所有步骤的超参数。然而，这一步骤中的错误往往被忽视。让我们看一个简单的例子。'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Try running both examples: although the cross-validation score is not far off,
    the part without the Pipeline leaks information since the feature selection step
    is performed on the entire dataset. When we reach the cross-validation step in
    which the dataset is separated into training and validation sets, they are essentially
    from the same source (the training set has information learned previously from
    the validation set when we perform feature selection). If you find it hard to
    understand this part, try rereading the paragraph and code it out yourself to
    internalize.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行这两个示例：虽然交叉验证分数相差不远，但没有使用 Pipeline 的部分泄露了信息，因为特征选择步骤是在整个数据集上进行的。当我们到达交叉验证步骤时，数据集被分为训练集和验证集，它们本质上来自同一来源（训练集在进行特征选择时已从验证集中学习到信息）。如果你发现这一部分难以理解，请尝试重新阅读这一段并自己编码以加深理解。
- en: Estimators
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 估算器
- en: Before we dive deeper into what Pipeline can do, let’s digress towards the components
    that form a Pipeline — Estimators. We will touch on the other components—Transformers,
    Predictors, and Models in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解 Pipeline 能做什么之前，让我们暂时离开，了解组成 Pipeline 的组件——估算器。我们将在下一节中讨论其他组件——变换器、预测器和模型。
- en: A lot of people often get confused with the term Estimator in Scikit-learn.
    People tend to associate estimators with the ability to predict—that is, with
    the `predict` method in particular. While there are some truths in that statement,
    it is unfortunately only a half-truth at best. Estimators are basically the building
    block of the Scikit-learn library. An estimator is a tool that can learn from
    your training set to create a model that can make predictions or inferences about
    new data. Since all estimators have the `fit` method to learn from the training
    set, they inherit from `BaseEstimator`
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人在使用 Scikit-learn 时常常对估算器这个术语感到困惑。人们倾向于将估算器与预测能力联系起来——也就是特别指 `predict` 方法。虽然这种说法有一定的真实性，但遗憾的是，最多只是部分真实。估算器基本上是
    Scikit-learn 库的构建块。估算器是一种工具，它可以从你的训练集学习，创建一个可以对新数据进行预测或推断的模型。由于所有估算器都有 `fit` 方法来从训练集学习，它们继承自
    `BaseEstimator`。
- en: From `BaseEstimator` itself, there is no `predict` method, only `fit`. An estimator
    does not necessarily need to have a `predict` method, although some do. An estimator
    with predict method attempts to make predictions on new, unseen data based on
    the learned model. For example, regressors and classifiers such as Linear Regression,
    Random Forest Classifier, Gradient Boosting Classifier, etc. are estimators with
    the`predict` method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从`BaseEstimator`本身来看，没有`predict`方法，只有`fit`。一个估计器并不一定需要有`predict`方法，虽然有些有。一个具有`predict`方法的估计器试图基于学习到的模型对新的、未见过的数据进行预测。例如，像线性回归、随机森林分类器、梯度提升分类器等回归器和分类器都是具有`predict`方法的估计器。
- en: Going one step further, let’s peek into the original documentation for `LogisticRegression`
    class[²](#11e5). In the snippet below, we observe that the class inherits from
    `BaseEstimator` for the `fit` method, and `LinearClassifierMixin` for the `predict`
    method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，我们来看看`LogisticRegression`类的原始文档[²](#11e5)。在下面的代码片段中，我们观察到该类继承了`BaseEstimator`以获得`fit`方法，并继承了`LinearClassifierMixin`以获得`predict`方法。
- en: '![](../Images/040dc7cbdee785137308b46706d97c64.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/040dc7cbdee785137308b46706d97c64.png)'
- en: '[Scikit-learn GitHub](https://github.com/scikit-learn/scikit-learn/blob/364c77e047ca08a95862becf40a04fe9d4cd2c98/sklearn/linear_model/_logistic.py)
    (BSD-3)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[Scikit-learn GitHub](https://github.com/scikit-learn/scikit-learn/blob/364c77e047ca08a95862becf40a04fe9d4cd2c98/sklearn/linear_model/_logistic.py)（BSD-3）'
- en: Transformers
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换器
- en: Transformer is a type of estimator with a `transform` method. Note that the
    word “transformer” here refers to the Scikit-learn context specifically. It should
    not be confused or mistaken with the transformer in neural network architecture,
    which has gained more attention and prominence in recent years.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 变换器是一种具有`transform`方法的估计器。请注意，这里的“变换器”特指Scikit-learn上下文。它不应与近年来备受关注的神经网络架构中的变换器混淆。
- en: In short, what a transformer does is transform/manipulate the predictors (`X`)
    in some ways such that it is ready to be consumed by machine learning algorithms.
    This could be scaling of continuous predictors using prominent tools such as `StandardScaler`
    and `MinMaxScaler`, or encoding categorical predictors using `OneHotEncoder` or
    `OrdinalEncoder`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，变换器的作用是以某种方式转换/处理预测变量（`X`），使其可以被机器学习算法使用。这可能是使用像`StandardScaler`和`MinMaxScaler`这样的显著工具对连续预测变量进行缩放，或者使用`OneHotEncoder`或`OrdinalEncoder`对分类预测变量进行编码。
- en: Going a step further, a transformer has a fit-transform mechanism, where it
    learns from the training data using the `fit` method and then applies the learned
    transformations to both the training and test data using the `transform` method.
    This ensures that the same transformations are consistently applied throughout.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，变换器具有fit-transform机制，其中它使用`fit`方法从训练数据中学习，然后使用`transform`方法将学习到的转换应用于训练数据和测试数据。这确保了整个过程中的转换一致应用。
- en: Going two steps further, to follow the Scikit-learn API implementation rule,
    a transformer usually inherits from `BaseEstimator` for its `fit` method, and
    `TransformerMixin` for its `transform` method. Let’s peek into the original documentation
    for `StandardScaler` library[³](#2e21).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 再进一步，为了遵循Scikit-learn API实现规则，变换器通常从`BaseEstimator`继承其`fit`方法，从`TransformerMixin`继承其`transform`方法。我们来看看`StandardScaler`库的原始文档[³](#2e21)。
- en: '![](../Images/4ade96aaf2b16470dcdafba3f3fa35a3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ade96aaf2b16470dcdafba3f3fa35a3.png)'
- en: '[Scikit-learn GitHub](https://github.com/scikit-learn/scikit-learn/blob/364c77e04/sklearn/preprocessing/_data.py#L644)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[Scikit-learn GitHub](https://github.com/scikit-learn/scikit-learn/blob/364c77e04/sklearn/preprocessing/_data.py#L644)'
- en: ColumnTransformer[⁵](#ea73)
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ColumnTransformer[⁵](#ea73)
- en: At times, you would need to apply transformations specific to certain columns
    only depending on your needs. For example, applying `OneHotEncoder` to categorical
    features with no specific hierarchy, and `OrdinalEncoder` to categorical features
    with specific hierarchy and ordering (i.e. for t-shirt sizes, we usually have
    sizes ordering to follow such as XS<S<M<L<XL). We can achieve this separation
    using `ColumnTransformer`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能需要根据需求仅对某些列应用特定的变换。例如，对没有特定层次结构的分类特征应用`OneHotEncoder`，对具有特定层次结构和排序的分类特征（即T恤尺寸，我们通常有XS<S<M<L<XL的排序）应用`OrdinalEncoder`。我们可以使用`ColumnTransformer`来实现这种分离。
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you might expect, we are going to put the variable `col_trans` above as part
    of our big overall Pipeline later on in the code. Simple and elegant.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能预料的那样，我们将把变量`col_trans`作为代码后续大整体管道的一部分放在上面。简单而优雅。
- en: '**Pipeline**'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**管道**'
- en: The `Pipeline[⁶](#8591)` class executes the estimators in the pipe in a sequential
    manner, passing the output of one step as the input to the next. This essentially
    allows the concept of chaining to take place. From the [Scikit-learn documentation](https://scikit-learn.org/stable/developers/develop.html)[⁴](#74fc)
    itself, here are the criteria for an estimator to be eligible to be incorporated
    as part of a Pipeline.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pipeline[⁶](#8591)`类以顺序方式执行管道中的估算器，将一个步骤的输出作为下一个步骤的输入。这本质上实现了链式操作的概念。根据[Scikit-learn
    文档](https://scikit-learn.org/stable/developers/develop.html)[⁴](#74fc)的说明，以下是估算器有资格作为管道的一部分的标准。'
- en: For an estimator to be usable together with `pipeline.Pipeline` in any but the
    last step, it needs to provide a `fit` or `fit_transform` function. To be able
    to evaluate the pipeline on any data but the training set, it also needs to provide
    a `transform` function. There are no special requirements for the last step in
    a pipeline, except that it has a `fit` function.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要使估算器能够与`pipeline.Pipeline`一起使用，除了最后一步之外，需要提供`fit`或`fit_transform`函数。为了能够在训练集之外的数据上评估管道，它还需要提供`transform`函数。管道中的最后一步没有特别要求，只需具有`fit`函数。
- en: Using `Pipeline`, we remove the redundant steps of having to call the method
    `fit` and `transform` on every estimator and/or transformer. Calling the method
    `fit` once directly from the pipeline suffices. How this works behind the scene
    is that it calls `fit` on the first estimator, then`transform` the input and pass
    it on to the next estimator. Indeed, the pipeline is as best as what the last
    estimator can do (it has all the methods of the last estimator in the pipe). If
    the last estimator is a regressor, then the Pipeline can be used as a regressor.
    If the last estimator is a transformer, so is the pipeline.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Pipeline`，我们去除了在每个估算器和/或转换器上调用`fit`和`transform`方法的冗余步骤。直接从管道调用一次`fit`方法就足够了。其背后的工作原理是，首先在第一个估算器上调用`fit`，然后`transform`输入并传递给下一个估算器。实际上，管道的效果取决于最后一个估算器（它包含了管道中最后一个估算器的所有方法）。如果最后一个估算器是回归器，那么管道也可以作为回归器使用。如果最后一个估算器是转换器，管道也是如此。
- en: Below is an illustration of how to use the `Pipeline` class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用`Pipeline`类的示例。
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In short, the argument to `Pipeline` is a list of tuples executed sequentially.
    The first element of the tuple is the arbitrary name you set as per your wish
    to identify the estimator, sort of like the ID. Meanwhile, the second element
    is the estimator object. Simple isn’t it? If you are not good with names, Scikit-learn
    provides the shorthand `make_pipeline` method that removes the headache of having
    to come up with names.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`Pipeline`的参数是一个顺序执行的元组列表。元组的第一个元素是你任意设定的名称，用来标识估算器，有点像ID。而第二个元素是估算器对象。简单吧？如果你不擅长起名字，Scikit-learn
    提供了简写的`make_pipeline`方法，省去了起名字的麻烦。
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Custom Estimator
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义估算器
- en: So far, methods such as `StandardScaler` and `MinMaxScaler` look good and work
    for many cases. The question is, what if you have your own customized method to
    manipulate and preprocess your dataset for example? Can you still incorporate
    it neatly into the `Pipeline` class? The answer is a resounding yes! There are
    two ways of achieving this—leveraging on `FunctionTransformer` or writing your
    own custom class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，像`StandardScaler`和`MinMaxScaler`这样的方法看起来很好，并且适用于许多情况。问题是，如果你有自己定制的方法来处理和预处理数据集，可以将其整洁地整合到`Pipeline`类中吗？答案是肯定的！有两种方法可以实现这一点——利用`FunctionTransformer`或编写你自己的自定义类。
- en: Let’s say you want to do a Box-Cox transformation on part of your dataset.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 比如你想对数据集的一部分进行Box-Cox变换。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The second method is to write your own custom class that inherits from `BaseEstimator`
    and `TransformerMixin` if you are writing a transformer estimator. If you are
    writing an estimator with a classification task for example, then inherit from
    `ClassifierMixin` instead.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是编写一个自定义类，继承自`BaseEstimator`和`TransformerMixin`，如果你编写的是转换器估算器。例如，如果你编写一个分类任务的估算器，那么应继承自`ClassifierMixin`。
- en: Let’s say you want to write a class that removes outliers and incorporates it
    into your Pipeline.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 比如你想编写一个移除异常值的类，并将其整合到你的管道中。
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I want to bring your focus, particularly on the `OutlierRemove` class. Here,
    we have the `fit` method that returns `self` to allow us to continue chaining
    and the`transform` method that does the removal of the outliers. After this, we
    can simply incorporate the class into our `Pipeline` like the following
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我特别希望将您的注意力集中在`OutlierRemove`类上。在这里，我们有`fit`方法返回`self`以便继续链式调用，还有`transform`方法进行异常值的删除。之后，我们可以将该类简单地合并到我们的`Pipeline`中，如下所示。
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: FeatureUnion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FeatureUnion
- en: Here comes the confusing part—`FeatureUnion` serves the same purpose as `Pipeline`,
    but they work quite differently. In `FeatureUnion`, the `fit` and `transform`
    methods are not done sequentially one after the other. Each transformer estimator
    is `fit` independently to the data, and then the `transform` methods are applied
    in parallel. The end results are then combined together. Picture the code below.
    Here, we can run the preprocessing for numerical and categorical predictors in
    parallel using `FeatureUnion[⁷](#2758)` as they are independent of one another.
    This results in faster and more efficient operation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是令人困惑的部分——`FeatureUnion`的作用与`Pipeline`相同，但它们的工作方式却大相径庭。在`FeatureUnion`中，`fit`和`transform`方法不是一个接一个地执行。每个转换器估算器独立地`fit`数据，然后并行地应用`transform`方法。最终结果被组合在一起。想象一下下面的代码。在这里，我们可以使用`FeatureUnion[⁷](#2758)`并行运行数值和分类预测的预处理，因为它们相互独立。这带来了更快和更高效的操作。
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Real-world Dataset Examples: Bank Marketing with Grid Search CV'
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实世界数据集示例：银行营销与网格搜索CV
- en: Here, I wish to end off by illustrating the contents above using a real-world
    dataset inspired by a Portuguese Financial Institution. The dataset is available
    on [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)[¹](#ed3c)
    for public use with citation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我希望通过使用受葡萄牙金融机构启发的真实数据集来说明上述内容。该数据集可以在[UCI机器学习库](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)[¹](#ed3c)上获取，供公众使用并引用。
- en: Allow me to skip all the exploratory data analysis and visualization, and zoom
    straight into the modeling of the Pipeline.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请允许我跳过所有的探索性数据分析和可视化，直接进入管道建模部分。
- en: '**1\. Importing the dataset**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 导入数据集**'
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In short, what the code above does are the followings:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，上面的代码实现了以下几个功能：
- en: Import the dataset with a comma separator
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用逗号分隔符导入数据集
- en: Rename the column ‘y’ to ‘deposit’
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列‘y’重命名为‘deposit’
- en: Encode the column deposit from no and yes to 0 and 1
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列中的“no”和“yes”编码为0和1
- en: '**2\. Train-Test Split**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 训练-测试拆分**'
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**3\. Writing additional 3 custom classes**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 编写另外3个自定义类**'
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In short, what the code above does are the followings:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，上面的代码实现了以下几个功能：
- en: The class `ClfSwitcher` inherits from `BaseEstimator`. This class serves the
    purpose of switching between classifiers easily. We set the default classifier
    to be XGBoost Classifier.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类`ClfSwitcher`继承自`BaseEstimator`。此类的目的是方便地在分类器之间切换。我们将默认分类器设置为XGBoost分类器。
- en: The method `outlier_thresholds` and `delete_potential_outlier_list` identify
    outliers in each column and set them to `NaN`. The class `OutlierTrans` is a transformer
    that inherits from both `BaseEstimator` and `TransformerMixin`. The `transform`
    method returns the previously mentioned 2 methods.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法`outlier_thresholds`和`delete_potential_outlier_list`识别每列中的异常值并将其设置为`NaN`。类`OutlierTrans`是一个继承自`BaseEstimator`和`TransformerMixin`的转换器。`transform`方法返回之前提到的两个方法。
- en: The class `TweakBankMarketing` is a custom class to do custom transformations
    such as creating new columns, dropping undesirable columns, and changing data
    types accordingly.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类`TweakBankMarketing`是一个自定义类，用于执行自定义转换，例如创建新列、删除不需要的列以及相应地更改数据类型。
- en: '**4\. Preparing Pipeline**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 准备管道**'
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In short, what the code above does are the followings:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，上面的代码实现了以下几个功能：
- en: Scale numerical columns using `StandardScaler` and `MinMaxScaler`
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`StandardScaler`和`MinMaxScaler`对数值列进行缩放
- en: Encode categorical columns using `OneHotEncoder` and `OrdinalEncoder`
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`OneHotEncoder`和`OrdinalEncoder`对分类列进行编码
- en: Use `ColumnTransformer` to do the transformations for different columns of the
    datasets separately.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ColumnTransformer`对数据集中的不同列分别进行转换。
- en: Finally, `Pipeline` encapsulates everything seamlessly.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，`Pipeline`无缝地封装了所有内容。
- en: At this stage, this is our constructed Pipeline.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，这是我们构建的管道。
- en: '![](../Images/b0bd308ca51fa6e1ae7316665e165d05.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0bd308ca51fa6e1ae7316665e165d05.png)'
- en: Image by Author
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: '**5\. Define hyperparameters for Grid Search CV**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. 为网格搜索CV定义超参数**'
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In short, what the code above does are the followings:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，上述代码执行的操作如下：
- en: Define parameter grids for 4 different classifiers, namely, `SGDClassifier`,
    `LogisticRegression`, `RandomForestClassifier`, `XGBClassifier`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为4种不同的分类器定义参数网格，即`SGDClassifier`，`LogisticRegression`，`RandomForestClassifier`，`XGBClassifier`。
- en: '**6\. Perform Grid Search CV**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**6\. 执行网格搜索CV**'
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In short, what the code above does are the followings:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，上述代码执行的操作如下：
- en: Placing our pipeline object as the first argument to the `GridSearchCV` parameter.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的管道对象作为`GridSearchCV`参数的第一个参数。
- en: '**7\. Printing best estimator**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**7\. 打印最佳估计器**'
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we obtain a validation score of 0.74, with an AUC score of 0.74 as well.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们获得了0.74的验证分数，以及0.74的AUC分数。
- en: '**8\. Plot the ROC-AUC curve**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**8\. 绘制ROC-AUC曲线**'
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/704e0e23207a8a15c9b496876cad3d55.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/704e0e23207a8a15c9b496876cad3d55.png)'
- en: Image by Author
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Afterword
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后记
- en: There you have it! Pipeline with Estimators and Transformers. Next time when
    you approach an ML project, consider using this technique. It may seem difficult
    to adopt at first, but keep practicing and soon you will create robust and efficient
    Machine Learning pipelines.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！使用估计器和转换器的管道。下次当你处理ML项目时，考虑使用这个技术。起初可能觉得难以采用，但持续练习，很快你就能创建出稳健而高效的机器学习管道。
- en: If you pick up something useful from this article, do consider giving me a [***Follow***](https://medium.com/@andreas030503)
    on Medium. Easy, 1 article a week to keep yourself updated and stay ahead of the
    curve!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这篇文章中获得了有用的信息，请考虑在Medium上给我一个[***关注***](https://medium.com/@andreas030503)。简单，每周一篇文章，保持更新并走在前沿！
- en: Connect With Me!
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注我！
- en: '[*LinkedIn*](https://www.linkedin.com/in/andreaslukita7/)👔'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*LinkedIn*](https://www.linkedin.com/in/andreaslukita7/)👔'
- en: '[*Twitter*](https://twitter.com/andreaslukita7)🖊'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*Twitter*](https://twitter.com/andreaslukita7)🖊'
- en: References
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Bank Marketing Data Set [Moro et al., 2014] S. Moro, P. Cortez, and P. Rita.
    A Data-Driven Approach to Predict the Success of Bank Telemarketing. Decision
    Support Systems, Elsevier, 62:22–31, June 2014: [https://archive.ics.uci.edu/ml/datasets/Bank+Marketing](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)
    (CC BY 4.0)'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 银行营销数据集 [Moro et al., 2014] S. Moro, P. Cortez, 和 P. Rita。基于数据的方法来预测银行电话营销的成功。决策支持系统，Elsevier，62:22–31，2014年6月：[https://archive.ics.uci.edu/ml/datasets/Bank+Marketing](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)
    (CC BY 4.0)
- en: 'Scikit-learn Linear Model Logistic: [https://github.com/scikit-learn/scikit-learn/blob/364c77e047ca08a95862becf40a04fe9d4cd2c98/sklearn/linear_model/_logistic.py](https://github.com/scikit-learn/scikit-learn/blob/364c77e047ca08a95862becf40a04fe9d4cd2c98/sklearn/linear_model/_logistic.py)'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scikit-learn线性模型逻辑回归：[https://github.com/scikit-learn/scikit-learn/blob/364c77e047ca08a95862becf40a04fe9d4cd2c98/sklearn/linear_model/_logistic.py](https://github.com/scikit-learn/scikit-learn/blob/364c77e047ca08a95862becf40a04fe9d4cd2c98/sklearn/linear_model/_logistic.py)
- en: 'Scikit-learn Preprocessing: [https://github.com/scikit-learn/scikit-learn/blob/364c77e04/sklearn/preprocessing/_data.py#L644](https://github.com/scikit-learn/scikit-learn/blob/364c77e04/sklearn/preprocessing/_data.py#L644)'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scikit-learn预处理：[https://github.com/scikit-learn/scikit-learn/blob/364c77e04/sklearn/preprocessing/_data.py#L644](https://github.com/scikit-learn/scikit-learn/blob/364c77e04/sklearn/preprocessing/_data.py#L644)
- en: 'Developing Scikit-learn estimators: [https://scikit-learn.org/stable/developers/develop.html](https://scikit-learn.org/stable/developers/develop.html)'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发Scikit-learn估计器：[https://scikit-learn.org/stable/developers/develop.html](https://scikit-learn.org/stable/developers/develop.html)
- en: 'Scikit-learn ColumnTransformer: [https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html](https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html)'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scikit-learn ColumnTransformer：[https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html](https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html)
- en: 'Scikit-learn Pipeline: [https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html)'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scikit-learn管道：[https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html)
- en: 'Scikit-learn FeatureUnion: [https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.FeatureUnion.html](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.FeatureUnion.html)'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scikit-learn FeatureUnion：[https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.FeatureUnion.html](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.FeatureUnion.html)
