- en: ETL vs ELT vs Streaming ETL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ETL vs ELT vs 流处理ETL
- en: 原文：[https://towardsdatascience.com/etl-elt-streaming-etl-af6379ffdd26](https://towardsdatascience.com/etl-elt-streaming-etl-af6379ffdd26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/etl-elt-streaming-etl-af6379ffdd26](https://towardsdatascience.com/etl-elt-streaming-etl-af6379ffdd26)
- en: Exploring batch and real-time design paradigms for data processing
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索数据处理的批处理和实时设计范式
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----af6379ffdd26--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----af6379ffdd26--------------------------------)[](https://towardsdatascience.com/?source=post_page-----af6379ffdd26--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----af6379ffdd26--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----af6379ffdd26--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/?source=post_page-----af6379ffdd26--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----af6379ffdd26--------------------------------)[](https://towardsdatascience.com/?source=post_page-----af6379ffdd26--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----af6379ffdd26--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----af6379ffdd26--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----af6379ffdd26--------------------------------)
    ·8 min read·Aug 29, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----af6379ffdd26--------------------------------)
    ·阅读时长8分钟·2023年8月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ae87ff8dd8a63419b49aed24af4ba9ae.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae87ff8dd8a63419b49aed24af4ba9ae.png)'
- en: Photo by [Compare Fibre](https://unsplash.com/@comparefibre?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/INNsF0Zz_kQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Compare Fibre](https://unsplash.com/@comparefibre?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，在 [Unsplash](https://unsplash.com/photos/INNsF0Zz_kQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Extract, Transform, Load (ETL) and Extract, Load, Transform (ELT) are two fundamental
    concepts in the context of data processing, used to describe data ingestion and
    transformation design paradigms. While these terms are often used interchangeably,
    they refer to slightly different concepts and are applicable to different use
    cases that also impose varying designs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 提取、转换、加载（ETL）和提取、加载、转换（ELT）是数据处理中的两个基本概念，用于描述数据摄取和转换设计范式。虽然这些术语经常被交替使用，但它们指代的概念略有不同，适用于不同的用例，这些用例也要求不同的设计。
- en: In this article, we will explore the differences and similarities of both ETL
    and ELT and discuss how the landscape in cloud computing and data engineering
    has affected data processing design patterns. Furthermore, we will outline the
    main advantages and disadvantages both have to offer in modern data teams. Lastly,
    we will discuss Streaming ETL, an emerging data-processing pattern that aims to
    solve various disadvantages of more traditional batch approaches.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨ETL和ELT的异同，并讨论云计算和数据工程领域的变革如何影响数据处理设计模式。此外，我们将概述这两种方法在现代数据团队中的主要优缺点。最后，我们将讨论流处理ETL，这是一种新兴的数据处理模式，旨在解决传统批处理方法的各种缺点。
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[**订阅数据管道**](https://thedatapipeline.substack.com/welcome)**，这是一个专注于数据工程的新闻通讯**'
- en: The three steps of interest
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三个关注的步骤
- en: Ingesting and persisting data from external sources into a destination system
    involves three distinct steps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从外部来源将数据摄取并持久化到目标系统涉及三个不同的步骤。
- en: '**Extract** The ‘Extract’ step involves all processes required in order to
    pull data from a source system. Such sources include an Application Programming
    Interface (API), a database system or a file, and Internet of Things (IoT) devices
    while the data can be in any form; structured, semi-structured or unstructured.
    Data pulled during this step are usually referred to as ‘raw data’.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**提取** “提取”步骤包括从源系统中提取数据所需的所有过程。这些源可以包括应用程序编程接口（API）、数据库系统或文件、物联网（IoT）设备，而数据可以是任何形式的；结构化、半结构化或非结构化。在此步骤中提取的数据通常被称为“原始数据”。'
- en: '![](../Images/79885a03f573852510c86b470ae2d773.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79885a03f573852510c86b470ae2d773.png)'
- en: 'Pulling raw data from a source system as part of the ‘Extract’ step in ETL/ELT
    pipelines — Source: Author'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在ETL/ELT管道中作为‘提取’步骤的一部分从源系统中提取原始数据 — 来源：作者
- en: '**Transform** During the ‘Transform’ step, the pipeline applies transformations
    on top of the raw data in order to achieve a certain goal. This goal is usually
    related to business or technical requirements. Some commonly applied transformations
    include data modification (e.g. mapping `United States` to `US`), record or attribute
    selection, joins into other data sources or even data validations.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**转换** 在‘转换’步骤中，管道对原始数据应用转换以实现某个目标。这个目标通常与业务或技术要求相关。一些常见的转换包括数据修改（例如，将`United
    States`映射为`US`）、记录或属性选择、与其他数据源的连接或甚至数据验证。'
- en: '![](../Images/7511285c4ee5f41afc28176e82ffa5fc.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7511285c4ee5f41afc28176e82ffa5fc.png)'
- en: 'Applying transformation on raw data to achieve a certain goal as part of the
    ‘Transform’ step in ETL/ELT pipelines — Source: Author'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在ETL/ELT管道中的‘转换’步骤中，对原始数据应用转换以实现某个目标 — 来源：作者
- en: '**Load** During the ‘load’ step, the data (either raw or transformed) are loaded
    into a destination system. Usually, the destination is an OLAP system (i.e. a
    Data Warehouse or Lake) but sometimes it can even be an OLTP system, such as an
    application Database.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载** 在‘加载’步骤中，数据（无论是原始数据还是已转换数据）被加载到目标系统中。通常，目标是OLAP系统（即数据仓库或数据湖），但有时它甚至可以是OLTP系统，例如应用程序数据库。'
- en: '![](../Images/675595563b164f760da0a85075e6bbf8.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/675595563b164f760da0a85075e6bbf8.png)'
- en: 'Loading data into a destination system as part of the ‘Load’ step in ETL/ELT
    pipelines — Source: Author'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为ETL/ELT管道中‘加载’步骤的一部分将数据加载到目标系统中 — 来源：作者
- en: Evidently, both ETL and ELT paradigms involve the aforementioned steps. Their
    key difference aligns with the order they execute them which in turn has significant
    implications in costs, computing power and design patterns. Therefore, the most
    appropriate paradigm should be selected based on the advantages and disadvantages
    each has to offer. It is also important to mention that team structure itself
    could be a good indicator as to which paradigm must be chosen. Let’s get into
    the details to make this even more clear!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，ETL和ELT范式都涉及上述步骤。它们的主要区别在于执行这些步骤的顺序，这反过来在成本、计算能力和设计模式上具有重要影响。因此，应根据每种范式的优缺点选择最合适的范式。还需要提到的是，团队结构本身也可能是选择哪种范式的良好指标。让我们深入探讨以使这更清楚！
- en: Extract Transform Load (ETL)
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取 转换 加载（ETL）
- en: ETL refers to the process that involves extraction from the source system (or
    file), followed by the transformation step that modifies the extracted raw data
    and finally the loading step that ingests the transformed data into the destination
    system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ETL指的是一个过程，包括从源系统（或文件）提取数据，然后进行转换步骤以修改提取的原始数据，最后是加载步骤将转换后的数据导入目标系统。
- en: '![](../Images/2b9e3ebdc07951f0e588fec0cf099c13.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b9e3ebdc07951f0e588fec0cf099c13.png)'
- en: 'The sequence of execution in Extract-Transform-Load (ETL) pipelines — Source:
    Author'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 提取-转换-加载（ETL）管道中的执行顺序 — 来源：作者
- en: '**ETL Steps:**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**ETL步骤：**'
- en: Extract raw data from the source system
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源系统提取原始数据
- en: Transform the data in a staging server (i.e. external to the destination system/server)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在暂存服务器（即目标系统/服务器之外）转换数据
- en: Load data into the destination system
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据加载到目标系统
- en: ETL has been around for many years and gained significant traction back in the
    days when companies started using Data Warehouses to store their data in a centralised
    point within their technological ecosystem.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ETL已经存在多年，并在公司开始使用数据仓库将数据集中存储在其技术生态系统中的中心点时获得了显著关注。
- en: ETL is still relevant in the data world but when it comes to batch processing,
    it demonstrates two significant disadvantages. The first one is related to the
    fact that the raw data will never make it to the destination system. This means
    that whenever a new transformation is required, a new ETL job must be executed
    in order to fetch the data from the source (once again!), apply the new transformation
    rules and finally load it into the destination system. The second major disadvantage
    is related to the fact that the transformation usually occurs in a staging server.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ETL 在数据世界中仍然相关，但在批处理方面表现出两个显著的缺点。第一个缺点与原始数据永远无法到达目标系统有关。这意味着每当需要新的变换时，必须执行新的
    ETL 作业来从源头（再次！）获取数据，应用新的变换规则，并最终加载到目标系统中。第二个主要缺点是变换通常发生在暂存服务器中。
- en: Extract Load Transform (ELT)
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取加载变换（ELT）
- en: With the emergence of cloud technologies and the significant reduction of data
    storage costs, modern organisations are now able to store enormous amounts of
    raw data and then apply any transformations or analyses, as required.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云技术的出现和数据存储成本的显著降低，现代组织现在能够存储大量的原始数据，然后根据需要应用任何变换或分析。
- en: These changes in the technological landscape have also shifted the way data
    teams ingest and analyse data. ELT paradigm enables teams to load the data into
    the destination system, where any transformations can then be made.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 技术环境的这些变化也改变了数据团队摄取和分析数据的方式。ELT 范式使团队能够将数据加载到目标系统，然后进行任何必要的变换。
- en: '![](../Images/ddaa6c073c544e7e625701f7f2252ac6.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ddaa6c073c544e7e625701f7f2252ac6.png)'
- en: 'The sequence of execution in Extract-Load-Transform (ELT) pipelines — Source:
    Author'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提取-加载-变换（ELT）管道的执行顺序—来源：作者
- en: '**ELT Steps:**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**ELT 步骤：**'
- en: Extract raw data from the source system
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源系统提取原始数据
- en: Load extracted raw data into the destination system
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提取的原始数据加载到目标系统
- en: Transform raw data within the destination system
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标系统内变换原始数据
- en: With ELT, there’s no need to maintain (and pay) for a staging server where the
    transformations would normally take place. Additionally, raw data is available
    at any given time which means further transformations can be performed in a blink
    of an eye.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ELT，不需要维护（和支付）用于变换的暂存服务器。此外，原始数据随时可用，这意味着进一步的变换可以瞬间完成。
- en: Streaming ETL
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流式 ETL
- en: Streaming ETL refers to a concept where the ETL paradigm is performed continuously.
    As the data comes in (as part of the ‘Extract’ step), the transformations — including
    joining, mapping, filtering, and windowing — are performed over streaming data.
    Processed data are then pushed into the downstream destination system, such as
    a database, a warehouse or even a message queue.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 流式 ETL 指的是一个概念，其中 ETL 范式持续执行。当数据进入（作为“提取”步骤的一部分）时，变换—包括连接、映射、过滤和窗口化—会在流数据上执行。处理后的数据会推送到下游目标系统，如数据库、仓库或甚至消息队列。
- en: While both ETL and ELT paradigms are still quite relevant and useful, they always
    occur as batch processes. This means that latency is increased while data freshness
    is decreased. On the other hand, Streaming ETL offers numerous advantages over
    batch jobs including lower latency, increased data freshness as well as more flexibility
    (both in terms of the resource usage as well as the data processing itself) and
    scalability.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 ETL 和 ELT 范式仍然非常相关且有用，但它们总是作为批处理过程进行。这意味着延迟增加，而数据的新鲜度减少。另一方面，流式 ETL 相较于批处理作业具有许多优势，包括较低的延迟、较高的数据新鲜度以及更多的灵活性（无论是在资源使用还是数据处理本身）和可扩展性。
- en: As an example let’s consider fraud detection which is applicable to many different
    industries and especially financial services. In banking, fraud can be performed
    using stolen cards, forge or even phishing calls. Detecting fraudulent activity
    is time-critical since financial institutions need to perform certain actions
    (e.g. freezing an account or sending a notification) upon their detection. Although
    many factors should be taken into account when it comes to detecting malicious
    transactional activity, an obvious and key factor that can potentially indicate
    fraud is whether the same account has been used to perform transactions within
    a few minutes, but within different geographical locations (whose distance doesn’t
    reasonate the time difference in between the transactions of interest). To do
    so, we could take advantage of time windows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以欺诈检测为例，这适用于许多不同的行业，特别是金融服务。在银行业中，欺诈可能通过盗用卡片、伪造或甚至网络钓鱼电话进行。检测欺诈活动是时间关键的，因为金融机构需要在检测到后执行某些操作（例如冻结账户或发送通知）。尽管检测恶意交易活动时需要考虑许多因素，但一个明显且关键的因素是同一账户是否在几分钟内在不同的地理位置进行交易（这些地点的距离与感兴趣交易之间的时间差异不匹配）。为此，我们可以利用时间窗口。
- en: Evidently, batch processing — that can be executed in the form of ELT or ELT
    pipelines — would be incapable of serving time-critical use cases such as fraud
    detection. And this is exactly where stream processing comes into play.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，批处理——可以以ELT或ELT管道的形式执行——无法满足时间关键型用例如欺诈检测。而这正是流处理发挥作用的地方。
- en: Stream Processing
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流处理
- en: Stream processing refers to the practice of continuous processing of data at
    the time it is created. Typically, a stream processing pipeline involves the ingestion
    or generation of the raw data, the processing performed over it, including aggregations,
    filtering, windowing, enrichment, etc. and eventually, the delivery of the processed
    stream into a destination system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 流处理指的是在数据创建时进行连续处理的实践。通常，流处理管道包括原始数据的摄取或生成，对其进行的处理，包括聚合、过滤、窗口化、丰富等，最终将处理后的流传送到目标系统。
- en: '![](../Images/187931ce30dce0e9316c53a3eb6f619a.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/187931ce30dce0e9316c53a3eb6f619a.png)'
- en: 'High level overview of stream processing pipeline — Source: Author'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 流处理管道的高级概述 — 来源：作者
- en: Batch processing has been the status quo for a long time but the rapid increase
    of data generation across the globe along with the appearance of technologies
    that started challenging batch architectures have changed the landscape since
    then.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理已经长期存在，但全球数据生成的快速增长以及挑战批处理架构的技术出现改变了这一现状。
- en: Evidently, the primary advantage of stream processing is its ability to process
    data at real-time. This enables users and organisations to perform faster analysis
    and thus decision making.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，流处理的主要优势在于其实时处理数据的能力。这使得用户和组织能够更快地进行分析，从而加快决策过程。
- en: Furthermore, stream processing systems can scale much easier than batch processes
    since they are designed to handle huge volumes of data in real-time. This is especially
    important for use cases incorporating data flows with spikes (in terms of volume),
    such as Internet-of-Things applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，流处理系统比批处理过程更容易扩展，因为它们设计用于实时处理大量数据。这对于包含波动数据流的用例尤为重要，例如物联网应用。
- en: In contrast to batch jobs, stream processing can reduce data processing costs
    related to data storage. Streaming jobs process only the subset of data that is
    required to be processed without having to store and maintain large datasets consisting
    of unused data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与批处理作业相比，流处理可以减少与数据存储相关的数据处理成本。流处理作业仅处理需要处理的数据子集，而无需存储和维护包含未使用数据的大型数据集。
- en: Applying Streaming ETL with Streaming Databases
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流式ETL与流式数据库
- en: There are different flavours of Streaming Databases that provide various different
    features and support different SQL flavours. One such streaming database is RisingWave
    that I will be using as an example to describe some Streaming ETL concepts, due
    to my familiarity with Postgres SQL.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的流式数据库提供各种不同的功能并支持不同的SQL变体。其中一个流式数据库是RisingWave，我将使用它作为示例来描述一些流式ETL概念，因为我熟悉Postgres
    SQL。
- en: '[RisingWave](https://www.risingwave.dev/docs/current/intro/) is a distributed
    SQL database for stream processing and it is designed to enable a seamless experience
    when it comes to building real-time and event-driven applications.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[RisingWave](https://www.risingwave.dev/docs/current/intro/)是一个用于流处理的分布式SQL数据库，旨在提供构建实时和事件驱动应用程序的无缝体验。'
- en: The tool can work with data consumed from sources like Apache Pulsar, Apache
    Kafka, Kinesis and CDC sources. Likewise, data from RisingWave can then be ingested
    into downstream systems, including data warehouses, data lakes and message brokers/queues.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具可以处理来自Apache Pulsar、Apache Kafka、Kinesis和CDC源的数据。同样，来自RisingWave的数据可以被引入到下游系统，包括数据仓库、数据湖和消息代理/队列。
- en: The platform can be used to consume data from the aforementioned sources, perform
    incremental computations as new data comes in and update results dynamically.
    Due to the fact that RisingWave is a database system itself, users are able to
    access data efficiently and effectively.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该平台可以用于从上述源中提取数据，随着新数据的到来执行增量计算，并动态更新结果。由于RisingWave本身是一个数据库系统，用户能够高效、有效地访问数据。
- en: Evidently, one of the many use cases that RisingWave supports is Streaming ETL.
    The data can be extracted from various sources and ingested into the streaming
    database, where transformations can be applied. The resulting processed/transformed
    data is then written into the desired destination system on a continuous base.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，RisingWave支持的众多用例之一是流式ETL。数据可以从各种源中提取并引入流式数据库，在那里可以应用转换。然后，处理/转换后的数据会持续写入所需的目标系统。
- en: '![](../Images/739e994a094b70f6f27a4c8812af2bc5.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/739e994a094b70f6f27a4c8812af2bc5.png)'
- en: 'Streaming archtecture with RisingWave — Source: [RisingWave GitHub repository](https://github.com/risingwavelabs/risingwave-docs/blob/0f7e1302b22493ba3c1c48e78810750ce9a5ff42/docs/images/archi_simple.png)
    (Licensed under [Apache License](https://github.com/risingwavelabs/risingwave/blob/main/LICENSE))'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RisingWave的流式架构 — 来源：[RisingWave GitHub库](https://github.com/risingwavelabs/risingwave-docs/blob/0f7e1302b22493ba3c1c48e78810750ce9a5ff42/docs/images/archi_simple.png)（根据[Apache许可证](https://github.com/risingwavelabs/risingwave/blob/main/LICENSE)授权）
- en: '**Streaming ETL steps using RisingWave**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**RisingWave使用的流式ETL步骤**'
- en: 'Extract: RisingWave enables the ingestion from various data sources, including
    log files, message queues, and CDC streams coming from database logs'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取：RisingWave支持从各种数据源中提取数据，包括日志文件、消息队列和来自数据库日志的CDC流。
- en: 'Transform: It provides all the functionality required in order to perform certain
    transformations over streaming data, including mapping, aggregation, filtering,
    windowing, joining and stateful processing'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换：它提供了执行流数据转换所需的所有功能，包括映射、聚合、过滤、窗口、连接和有状态处理。
- en: 'Load: Finally, the processed data streams can then be loaded from RisingWave
    into the downstream destination system'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载：最后，处理过的数据流可以从RisingWave加载到下游目标系统。
- en: 'Some use cases that can be greatly benefited from the Streaming ETL capabilities
    include:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一些可以从流式ETL功能中受益匪浅的用例包括：
- en: Continuous data integration
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续数据集成
- en: Internet-of-Things (IoT) data processing
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网（IoT）数据处理
- en: Real-time fraud detection
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时欺诈检测
- en: Real-time alerting
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时警报
- en: An alternative solution for Streaming ETL is also FlinkSQL that allows usesrs
    to develop streaming applications using SQL. Databricks and Snowflake have also
    recently started providing support for streaming applications and could also be
    good alternative options.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种流式ETL的解决方案是FlinkSQL，它允许用户使用SQL开发流式应用程序。Databricks和Snowflake最近也开始提供对流式应用程序的支持，可能也是不错的替代选择。
- en: Final Thoughts…
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终思考…
- en: Designing data processing pipelines is a challenging task given that there are
    no one-size-fits-all solutions. Therefore, one should familiarise themselves with
    fundamental concepts in order to be able to make valuable considerations when
    it comes to implementing a solution that solves a specific and niche problem.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 设计数据处理管道是一项具有挑战性的任务，因为没有一种通用的解决方案。因此，应该熟悉基本概念，以便在实施解决特定问题的解决方案时能够做出有价值的考虑。
- en: In today’s article, we discussed two commonly used paradigms in the context
    of data processing, namely ETL and ELT. Furthermore, we discussed how modern organisations
    can take advantage of real-time capabilities and implement event-driven architectures
    using Streaming ETL using RisingWave, a distributed SQL database used for stream
    processing that can support real-time analytics, event-driven applications and
    Streaming ETL among others.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的文章中，我们讨论了数据处理上下文中常用的两种范式，即 ETL 和 ELT。此外，我们还讨论了现代组织如何利用实时能力，并使用 RisingWave
    实现事件驱动架构，RisingWave 是一个用于流处理的分布式 SQL 数据库，可以支持实时分析、事件驱动应用程序以及流式 ETL 等功能。
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[**订阅数据管道**](https://thedatapipeline.substack.com/welcome)**，这是一个专注于数据工程的新闻通讯**'
