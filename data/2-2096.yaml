- en: Thresholding — a Way to Make Images More Visible (CV-04)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阈值化 — 使图像更清晰的方式 (CV-04)
- en: 原文：[https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c](https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c](https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c)
- en: Extract More Information from Images with Thresholding
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过阈值化从图像中提取更多信息
- en: '[](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)
    ·7 min read·Apr 26, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)
    ·阅读时间 7 分钟·2023年4月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/50b6aba472098b0e97253da3b871b778.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/50b6aba472098b0e97253da3b871b778.png)'
- en: Image by [Jonas Svidras](https://pixabay.com/users/jonas-svidras-6138262/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3046269)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3046269)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jonas Svidras](https://pixabay.com/users/jonas-svidras-6138262/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3046269)
    提供，来源于 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3046269)
- en: Motivation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: In the real world, we aren’t always dealing with a 100% clear image. Sometimes,
    the image gets blurred, distorted, and so on. It becomes a crucial issue to extract
    information from these types of images. That is why transparent, clear, and more
    eye-catching images play a vital role in getting comprehensive information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，我们并不总是处理百分之百清晰的图像。有时，图像会变得模糊、扭曲等等。从这些类型的图像中提取信息成为一个关键问题。这就是为什么透明、清晰和更具视觉吸引力的图像在获取全面信息方面扮演着重要角色。
- en: '![](../Images/c5f7c499e8ece697243ecb04b802004c.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5f7c499e8ece697243ecb04b802004c.png)'
- en: The left side image is taken from the [pxfuel](https://www.pxfuel.com/en/free-photo-jsbhm/download/1920x1080)
    under creative common license. The right-side image is generated after applying
    thresholding.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧图像取自[pxfuel](https://www.pxfuel.com/en/free-photo-jsbhm/download/1920x1080)，并且在创意共享许可下使用。右侧图像是应用阈值化后的生成结果。
- en: The image after thresholding is more visually clear. Apart from the image, this
    thresholding technique might be helpful in thousands of use cases. *If you read
    the article till the end, you will be a master of* ***how to use, where to use,
    and when to use*** *image thresholding in real life.*
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 阈值化后的图像更具视觉清晰度。除了图像，这种阈值化技术在数千种应用场景中可能会很有帮助。*如果你读到文章的最后，你将掌握* ***如何使用、在哪里使用以及何时使用***
    *图像阈值化的技能。*
- en: In detail, image thresholding transforms an image into a binary image to extract
    more information.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 具体来说，图像阈值化将图像转换为二值图像，以提取更多信息。
- en: Table of Contents
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: '`[What is Image Thresholding?](#5265)`'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[什么是图像阈值化？](#5265)`'
- en: '`[Difference Between Global and Local Thresholding](#d413)`'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[全局阈值化与局部阈值化的区别](#d413)`'
- en: '`[Popular Thresholding Techniques and Python Implementation](#5e52)`'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[流行的阈值化技术和 Python 实现](#5e52)`'
- en: What is Image Thresholding?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是图像阈值化？
- en: Image thresholding works on a grayscale image. It is a way of segmenting the
    grayscale image into a binary image [1]. For thresholding, a particular pixel
    intensity value is considered a threshold value. All the pixels greater or less
    than the threshold value are assigned to the maximum or minimum value. It converts
    the entire image into a binary image. Because now there are only two pixels.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图像阈值化作用于灰度图像。这是一种将灰度图像分割成二值图像的方法 [1]。对于阈值化，某个特定的像素强度值被视为阈值值。所有大于或小于阈值的像素都被分配为最大或最小值。这将整个图像转换为二值图像。因为现在只有两种像素值。
- en: Suppose we want to apply image thresholding to the pixel intensity values 123,
    50, 180,200\. And we set the threshold value to 128\. So, all the values greater
    than 128 will be the highest pixel intensity value of 255, and less than 128 will
    be 0.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想对像素强度值 123、50、180、200 应用图像阈值化。我们将阈值设置为 128。因此，所有大于 128 的值将变为最高的像素强度值 255，而小于
    128 的值将变为 0。
- en: '![](../Images/a6e20462d54f2cb4f8262bfad9feba14.png)![](../Images/cbdf0b0d3e1e84eba1091e3246c87b03.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6e20462d54f2cb4f8262bfad9feba14.png)![](../Images/cbdf0b0d3e1e84eba1091e3246c87b03.png)'
- en: Image on the left is the result of thresholding and right-side image is before
    thresholding (From Wikimedia Commons under Public Domain license)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的图像是阈值化后的结果，右侧的图像是阈值化之前的图像（来自 Wikimedia Commons，公共领域许可）
- en: Look at the above two images. After applying thresholding, the resulting image
    is completely white or black. The pixels with relatively high-intensity values
    are transformed into entirely white (intensity value 255), and low-intensity values
    turn into pure black (intensity value 0).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下上面的两张图像。应用阈值化后，得到的图像完全是白色或黑色。相对高强度值的像素被转换成完全白色（强度值 255），而低强度值则变成纯黑色（强度值 0）。
- en: Difference Between Global and Local Thresholding
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局阈值化和局部阈值化的区别
- en: There are many thresholding techniques available.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多阈值化技术可用。
- en: The same process or threshold value is often applied to the entire image. This
    type of thresholding is known as ***global thresholding***.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的过程或阈值通常应用于整个图像。这种类型的阈值化被称为 ***全局阈值化***。
- en: On the other hand, local/adaptive thresholding works locally. The same thresholding
    value is not applied to the entire image. We can apply different thresholding
    values for different segments of the image.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，局部/自适应阈值化在局部区域内工作。相同的阈值值不会应用于整个图像。我们可以对图像的不同部分应用不同的阈值值。
- en: Global image thresholding is not suitable for every case. Sometimes adaptive
    thresholding is preferable. Look at the following image.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 全局图像阈值化并不适用于所有情况。有时自适应阈值化更为合适。看看下面的图像。
- en: '![](../Images/f8bf7abfe788b84fbaad04904e65569a.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8bf7abfe788b84fbaad04904e65569a.png)'
- en: Image is collected from [OpenCV](https://docs.opencv.org/3.4/d7/d4d/tutorial_py_thresholding.html)
    documentation
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图像来自于 [OpenCV](https://docs.opencv.org/3.4/d7/d4d/tutorial_py_thresholding.html)
    文档
- en: In the original image, lighting varies in different image locations. Applying
    the same thresholding value for the entire image will produce the result, something
    that is shown in the global thresholding image. Adaptive thresholding provides
    a much better result.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始图像中，光照在不同图像位置上有所变化。对整个图像应用相同的阈值将产生类似于全局阈值化图像的结果。自适应阈值化提供了更好的结果。
- en: Popular Thresholding Techniques and Python Implementation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流行的阈值化技术和 Python 实现
- en: We will discuss **global thresholding** techniques — `*Simple and Otsu’s thresholding*`.
    And local/adaptive thresholding technique.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论 **全局阈值化** 技术——`*简单阈值化和 Otsu 阈值化*`。以及局部/自适应阈值化技术。
- en: '**Simple Thresholding**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单阈值化**'
- en: Simple thresholding is a global threshold technique. In this method, we need
    to set a boundary (threshold) intensity value. The threshold value is used to
    transform the new pixel intensity value. Look at the following table.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 简单阈值化是一种全局阈值技术。在这种方法中，我们需要设置一个边界（阈值）强度值。阈值值用于转换新的像素强度值。看看下面的表格。
- en: '![](../Images/207f3b385674a7f94e6a55bc6809b639.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/207f3b385674a7f94e6a55bc6809b639.png)'
- en: Different Simple Thresholding Techniques (Image By Author)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的简单阈值化技术（图像由作者提供）
- en: Look at the above table. In the action section, `pixel(x,y)` represents the
    updated particular intensity value of a thresholding image, and `src(x,y)` represents
    the original intensity value of the image before applying thresholding.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 看看上面的表格。在操作部分，`pixel(x,y)` 表示阈值化图像的更新后的特定强度值，而 `src(x,y)` 表示应用阈值化之前图像的原始强度值。
- en: '**⭐ Python Implementation️**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**⭐ Python 实现️**'
- en: For demonstration purposes, I have used the following image.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我使用了以下图像。
- en: '![](../Images/44131e0ed5ef4f1b44b264b1faf7def0.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44131e0ed5ef4f1b44b264b1faf7def0.png)'
- en: Image by [Picdream](https://pixabay.com/users/picdream-9595/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=57266)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=57266)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由 [Picdream](https://pixabay.com/users/picdream-9595/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=57266)
    提供，来源于 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=57266)
- en: '*Some generic code to import libraries and load image —*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*一些通用代码用于导入库和加载图像 —*'
- en: Thresholding always works on the grayscale image. So, I have converted the image
    from BGR (OpenCV generally reads the image in BGR format) to grayscale with the
    code `cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 阈值化始终作用于灰度图像。因此，我将图像从BGR（OpenCV通常以BGR格式读取图像）转换为灰度图像，代码为`cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)`。
- en: '**Binary Thresholding**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**二值阈值化**'
- en: '`**OpenCV**` library makes our life easier by providing various functions to
    implement computer vision techniques. The piece of following code helps us to
    implement *binary thresholding*. Where `120` is the threshold value, and `255`
    is the maximum intensity value. So, all intensity values less than `120` will
    be set to `0 and 255` otherwise.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`**OpenCV**`库通过提供各种函数来实现计算机视觉技术，使我们的工作变得更加轻松。以下代码片段帮助我们实现*二值阈值化*。其中`120`是阈值，`255`是最大强度值。因此，所有低于`120`的强度值将被设为`0`，其余为`255`。'
- en: The output will be varied for the different threshold values.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出会因不同的阈值而有所变化。
- en: '**Binary Inverse Thresholding**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**二值反向阈值化**'
- en: It is just the reverse of binary thresholding. We set the threshold value to
    `120` and the maximum value to `255`. So, all the intensity values less than `120`
    will be `255` (white) and `0` (black)otherwise. *Look at the following code.*
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这正好是二值化阈值的反向操作。我们将阈值设为`120`，最大值设为`255`。因此，所有低于`120`的强度值将为`255`（白色），其余为`0`（黑色）。*请查看以下代码。*
- en: So, in the case of binary inverse threshold, the output is just the opposite
    of binary thresholding.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在二值反向阈值的情况下，输出正好是二值阈值的相反结果。
- en: '**Truncate Thresholding**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**截断阈值化**'
- en: In our coding example, we set the threshold value of `145` and the max value
    of `255`. So, for truncate thresholding, all the values less than `145` will be
    set to the threshold value of `145`. Otherwise, it will remain the same.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的编码示例中，我们将阈值设为`145`，最大值设为`255`。因此，对于截断阈值化，所有低于`145`的值将被设为阈值`145`。否则，它将保持不变。
- en: The output texts are much more visible than the previous techniques.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出文本比之前的技术更为清晰可见。
- en: '**Threshold to Zero**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**阈值为零**'
- en: In case of threshold to zero, pixel values less than the threshold will be set
    to zero and remain the same otherwise. For demonstration purposes, I have set
    the threshold value to 145 and the max value to 255\. The code is given below.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在阈值为零的情况下，低于阈值的像素值将被设为零，否则保持不变。为了演示目的，我将阈值设置为145，最大值设置为255。代码如下所示。
- en: '**Threshold to Zero Inverse**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**阈值反转**'
- en: It is just the opposite of the threshold to zero.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这正好是阈值为零的相反操作。
- en: '**Otsu’s Thresholding**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**大津法阈值化**'
- en: The **Otsu’s** thresholding is a little bit different than the simple thresholding.
    It calculates the between-class variance to set the threshold value. There are
    two classes, the background and foreground pixels. The between-class variance
    can be calculated with the following formula.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**大津法**的阈值化与简单阈值化有所不同。它通过计算类间方差来设置阈值。有两个类别，即背景和前景像素。类间方差可以通过以下公式计算。'
- en: '![](../Images/5a8b6595fd2ac37e85372ffdcaeeedce.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a8b6595fd2ac37e85372ffdcaeeedce.png)'
- en: Here, average weights of background and foreground classes are represented with
    ***Wb*** and ***Wf*** *.* And mean weights of the classes are represented with***µb***
    and ***µf****.* We need to calculate between class variance for all the pixel
    intensity values. Finally, the threshold value with the highest between-class
    variance is selected.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，背景和前景类的平均权重分别用***Wb***和***Wf***表示。类的均值权重用***µb***和***µf***表示。我们需要计算所有像素强度值的类间方差。最终，选择类间方差最高的阈值。
- en: '***For demonstration purposes, I have given an example below.***'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '***为了演示目的，下面给出了一个示例。***'
- en: '![](../Images/8b45fadaf436181fafda0c505821c505.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b45fadaf436181fafda0c505821c505.png)'
- en: 3 x 3 Image (Image By Author)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 3 x 3 图像（图像由作者提供）
- en: In the above image, the value inside the circles is the intensity value of each
    pixel. Pixel intensities are `***0,1,2, and 3***`. The frequency of the intensity
    values is shown below.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，圆圈内的值是每个像素的强度值。像素强度为`***0,1,2, 和 3***`。强度值的频率如下所示。
- en: Here, we set the threshold value to 2\. All value less than 2 is considered
    as the background, and greater than or equal to 2 is the foreground. In the above
    graph, red bars are the background frequency, and green bars represent the foreground
    frequency.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将阈值设置为 2。所有小于 2 的值被视为背景，大于或等于 2 的值是前景。在上述图表中，红色条是背景频率，绿色条代表前景频率。
- en: The calculation for the threshold value is shown below.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 阈值计算如下所示。
- en: '![](../Images/fcc6de90c2b1df06bc8b26192959bbf9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcc6de90c2b1df06bc8b26192959bbf9.png)'
- en: Calculation of between class variance with threshold value 2 (Image by Author)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 阈值 2 的类间方差计算（图片作者提供）
- en: '*Between class variance for other threshold values 0,1 and 3 is shown in the
    following table.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*其他阈值 0、1 和 3 的类间方差见下表。*'
- en: '![](../Images/15daba6bbc3087ae0e0d342991272576.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15daba6bbc3087ae0e0d342991272576.png)'
- en: Image by Author
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The highest between-class variance is 0.89, associated with the threshold value
    2\. So, according to Otsu’s method, the threshold value is 2.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的类间方差为 0.89，与阈值 2 相关。因此，根据 Otsu 方法，阈值为 2。
- en: '*Below is the Python implementation on the previous image.*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*以下是对之前图像的 Python 实现。*'
- en: This output is amazing, and the result is quite good compared to the previous
    techniques. *Let’s see the threshold value for Otsu’s thresholding.*
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果非常棒，与之前的技术相比效果很好。*让我们看看 Otsu 阈值处理的阈值。*
- en: '**Adaptive/Local Thresholding**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**自适应/局部阈值处理**'
- en: In adaptive/local thresholding, the entire image is divided into some segments,
    and global thresholding is applied to each segment. This thresholding is preferable
    when the lighting is uniformly distributed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在自适应/局部阈值处理的情况下，整个图像被分成一些分段，并对每个分段应用全局阈值。当光照均匀分布时，这种阈值处理更为可取。
- en: '![](../Images/818f69a26b1613946287b5457c7ead86.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/818f69a26b1613946287b5457c7ead86.png)'
- en: Demo Gray Scale Image with 6 Different Segments (Image By Author)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 演示灰度图像具有 6 个不同的分段（图片作者提供）
- en: Follow the gray image. The square boxes are the segments of the image. In the
    case of adaptive thresholding, each segment is separated to apply global thresholding.
    So, we can adjust the threshold value for each region/ segment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随灰度图像。方框是图像的分段。在自适应阈值处理的情况下，每个分段会被分开以应用全局阈值。因此，我们可以调整每个区域/分段的阈值。
- en: Adaptive thresholding implementation on the text image is shown below.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 文本图像上的自适应阈值处理实现如下所示。
- en: The output is also satisfactory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 结果也令人满意。
- en: We can also blend two threshold outputs to extract more information, as shown
    below.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将两个阈值输出进行融合以提取更多信息，如下所示。
- en: Conclusion
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Image thresholding is one of the best ways of extracting information from blurred
    or unclear images. The thresholding techniques are not limited to the techniques
    mentioned above. But these are widely used. When to use which thresholding technique
    is entirely dependent on you; I believe if you have a clear concept of the above-mentioned
    method, you will be able to make right decision.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图像阈值处理是从模糊或不清晰的图像中提取信息的最佳方法之一。阈值处理技术不限于上述技术，但这些技术被广泛使用。选择何时使用哪种阈值处理技术完全依赖于你；我相信如果你对上述方法有清晰的概念，你将能够做出正确的决定。
- en: References
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[Thresholding (image processing) — Wikipedia](https://en.wikipedia.org/wiki/Thresholding_(image_processing))'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[阈值处理（图像处理） — 维基百科](https://en.wikipedia.org/wiki/Thresholding_(image_processing))'
- en: '`Join medium with the following link to support my writings.`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`通过以下链接支持我的写作。`'
- en: '`[https://mzh706.medium.com/membership](https://mzh706.medium.com/membership)`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`[https://mzh706.medium.com/membership](https://mzh706.medium.com/membership)`'
- en: Previous articles from my Computer Vision series —
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我计算机视觉系列的先前文章 —
- en: '[](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----b3e314b5215c--------------------------------)
    [## Getting Started with NumPy and OpenCV for Computer Vision (CV-01)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----b3e314b5215c--------------------------------)
    [## NumPy 和 OpenCV 计算机视觉入门 (CV-01)]'
- en: Start Your Coding for Computer vision with Python
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Python 开始你的计算机视觉编码
- en: towardsdatascience.com](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----b3e314b5215c--------------------------------)
    [](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----b3e314b5215c--------------------------------)
    [## A Comprehensive Guide on Color Representation in Computer Vision (CV-02)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----b3e314b5215c--------------------------------)
    [](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----b3e314b5215c--------------------------------)
    [## 关于计算机视觉中色彩表示的全面指南 (CV-02)'
- en: A Detail Explanation of Color Space and Color Model
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色空间和颜色模型的详细解释
- en: towardsdatascience.com](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----b3e314b5215c--------------------------------)
    [](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----b3e314b5215c--------------------------------)
    [## The Easiest Guideline on Image Blending (CV-03)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----b3e314b5215c--------------------------------)
    [](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----b3e314b5215c--------------------------------)
    [## 最简单的图像融合指南 (CV-03)'
- en: Easiest Guideline on Blending and Pasting Image for Computer Vision
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最简单的图像融合和粘贴指南
- en: towardsdatascience.com](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----b3e314b5215c--------------------------------)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----b3e314b5215c--------------------------------)'
