- en: Recreating Andrej Karpathy’s Weekend Project — a Movie Search Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新创建 Andrej Karpathy 的周末项目 — 电影搜索引擎
- en: 原文：[https://towardsdatascience.com/recreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4?source=collection_archive---------3-----------------------#2023-11-07](https://towardsdatascience.com/recreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4?source=collection_archive---------3-----------------------#2023-11-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/recreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4?source=collection_archive---------3-----------------------#2023-11-07](https://towardsdatascience.com/recreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4?source=collection_archive---------3-----------------------#2023-11-07)
- en: Building a movie recommender system with OpenAI embeddings and a vector database
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 OpenAI 嵌入和向量数据库构建电影推荐系统
- en: '[](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----9b270d7a92e4--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----9b270d7a92e4---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)
    ·9 min read·Nov 7, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9b270d7a92e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&user=Leonie+Monigatti&userId=3a38da70d8dc&source=-----9b270d7a92e4---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----9b270d7a92e4---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b270d7a92e4--------------------------------)
    ·9分钟阅读·2023年11月7日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9b270d7a92e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&source=-----9b270d7a92e4---------------------bookmark_footer-----------)![](../Images/e9469f6553eb0ffb4b927e45e7e6705c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9b270d7a92e4&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Frecreating-andrej-karpathys-weekend-project-a-movie-search-engine-9b270d7a92e4&source=-----9b270d7a92e4---------------------bookmark_footer-----------)![](../Images/e9469f6553eb0ffb4b927e45e7e6705c.png)'
- en: Stylized screenshot of the [final movie recommender demo](https://awesome-moviate.weaviate.io/)
    (Image by the author)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[最终电影推荐演示](https://awesome-moviate.weaviate.io/) 的风格化截图（图片由作者提供）'
- en: 'In April 2023, [Andrej Karpathy](https://karpathy.ai/), one of the founding
    members of OpenAI and former Director of AI at Tesla, shared this fun weekend
    hack, a [movie search and recommendation engine](https://awesome-movies.life/):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在2023年4月，[Andrej Karpathy](https://karpathy.ai/)，OpenAI 的创始成员之一及前特斯拉人工智能总监，分享了这个有趣的周末项目，一个
    [电影搜索和推荐引擎](https://awesome-movies.life/)：
- en: The user interface is simple, with two key functionalities. First, you have
    a search bar where you can search for movies by their title. When you then click
    on any movie, you get a list of its 40 most similar movies recommended to you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面非常简单，主要有两个关键功能。首先，你有一个搜索框，可以通过电影标题进行搜索。然后点击任何电影，你会得到一份该电影的 40 部最相似电影的推荐列表。
- en: '![](../Images/6cfd01c37e7c5bf45d28f50e5949f88d.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cfd01c37e7c5bf45d28f50e5949f88d.png)'
- en: Demo live at [https://awesome-movies.life/](https://awesome-movies.life/)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 演示网站：[https://awesome-movies.life/](https://awesome-movies.life/)
- en: Despite its popularity, Karpathy unfortunately has not publicly shared the project’s
    source code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管很受欢迎，Karpathy 不幸地没有公开分享该项目的源代码。
- en: '![](../Images/211d985776d7aa12c6d29ae98eb6334c.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/211d985776d7aa12c6d29ae98eb6334c.png)'
- en: Screenshot of [comment](https://twitter.com/karpathy/status/1647644308647071745)
    under original Tweet (Screenshot by author)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 原推文下的 [评论截图](https://twitter.com/karpathy/status/1647644308647071745)（截图由作者提供）
- en: So, grab yourself some popcorn, and let’s recreate it ourselves!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，拿上一些爆米花，让我们自己动手重建吧！
- en: Prerequisites
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'This project is built on four primary components:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目基于四个主要组件：
- en: OpenAI embedding model to generate embeddings
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI 嵌入模型生成嵌入
- en: Weaviate [vector database](https://medium.com/towards-data-science/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78)
    to store the embeddings, which is populated with a Python script
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Weaviate [向量数据库](https://medium.com/towards-data-science/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78)
    来存储嵌入，数据通过 Python 脚本填充
- en: 'Frontend: HTML, CSS, Js'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端：HTML、CSS、Js
- en: 'Backend: NodeJs'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端：NodeJs
- en: 'Thus, to follow along in this tutorial, you will need the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要跟随本教程，你需要以下内容：
- en: '**Python** for data processing and populating the vector database'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python** 用于数据处理和填充向量数据库'
- en: '**Docker and Docker-Compose** for running the vector database locally.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 和 Docker-Compose** 用于在本地运行向量数据库。'
- en: '**Node.js and npm** for running the application locally.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js 和 npm** 用于在本地运行应用程序。'
- en: '**OpenAI API key** to access the OpenAI embedding model'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenAI API 密钥** 用于访问 OpenAI 嵌入模型'
- en: Implementing a Movie Search Engine
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一个电影搜索引擎
- en: 'This section analyzes Karpathy’s weekend hack and aims to recreate it with
    its own little twists. To build a simple movie search engine, follow these steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本节分析 Karpathy 的周末黑客活动，并旨在以一些小变化重建它。要构建一个简单的电影搜索引擎，请按照以下步骤操作：
- en: '[Preparation: Movie dataset](#f305)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准备工作：电影数据集](#f305)'
- en: '[Step 1: Generate and store embeddings](#553d)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[步骤 1：生成和存储嵌入](#553d)'
- en: '[Step 2: Search for movies](#d1dc)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[步骤 2：搜索电影](#d1dc)'
- en: '[Step 3: Get similar movie recommendations](#5fc7)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[步骤 3：获取类似的电影推荐](#5fc7)'
- en: '[Step 4: Run the demo](#86ba)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[步骤 4：运行演示](#86ba)'
- en: The full code is open source, and you can find it on [GitHub](https://github.com/weaviate-tutorials/awesome-moviate).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码是开源的，你可以在 [GitHub](https://github.com/weaviate-tutorials/awesome-moviate)
    上找到它。
- en: 'Preparation: Movie dataset'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作：电影数据集
- en: Karpathy’s project indexes all 11,762 movies since 1970, including the plot
    and the summary from Wikipedia.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Karpathy 的项目索引了自 1970 年以来的 11,762 部电影，包括来自 Wikipedia 的情节和摘要。
- en: 'To achieve something similar without manually scraping Wikipedia, you can use
    the following two datasets from Kaggle:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 若想在不手动抓取 Wikipedia 的情况下实现类似功能，你可以使用以下两个来自 Kaggle 的数据集：
- en: '[48,000+ movies dataset](https://www.kaggle.com/datasets/yashgupta24/48000-movies-dataset)
    (License: [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/))
    for the columns `''id''`, `''name''`, `''PosterLink''`, `''Genres''`, `''Actors''`,
    `''Director''`, `''Description''`, `''Keywords''`, and `''DatePublished''`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[48,000+ 电影数据集](https://www.kaggle.com/datasets/yashgupta24/48000-movies-dataset)（许可：[CC0:
    公共领域](https://creativecommons.org/publicdomain/zero/1.0/)）包括 `''id''`、`''name''`、`''PosterLink''`、`''Genres''`、`''Actors''`、`''Director''`、`''Description''`、`''Keywords''`
    和 `''DatePublished''` 列。'
- en: '[Wikipedia Movie Plots](https://www.kaggle.com/datasets/jrobischon/wikipedia-movie-plots)
    (License: [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)), for
    the column `''plot''`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Wikipedia 电影情节](https://www.kaggle.com/datasets/jrobischon/wikipedia-movie-plots)（许可：[CC
    BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)），用于 `''plot''` 列。'
- en: 'The two datasets are merged on the movie title and release year and then filtered
    by movies released after 1970\. You can find the detailed preprocessing steps
    in the `[add_data.py](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/add_data.py)`
    file. The resulting DataFrame contains roughly 35,000 movies of which about 8,500
    movies have a plot in addition to the description and looks as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 两个数据集在电影标题和发行年份上合并，然后筛选出1970年后发行的电影。你可以在`[add_data.py](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/add_data.py)`文件中找到详细的预处理步骤。结果数据框包含大约35,000部电影，其中约8,500部电影有情节描述，数据框如下所示：
- en: '![](../Images/a1bcfc5105b915beac48139e6b91844a.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1bcfc5105b915beac48139e6b91844a.png)'
- en: Preprocessed movies dataframe (Screenshot by author)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理后的电影数据框（截图由作者提供）
- en: 'Step 1: Generate and store embeddings'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1：生成并存储嵌入
- en: 'The core of this demo project is the embeddings of the movie data objects,
    which are mainly used to recommend movies by plot similarity. In Karpathy’s project,
    vector embeddings are generated for the movie summaries and plots. There are two
    options to generate vector embeddings:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示项目的核心是电影数据对象的嵌入，这些嵌入主要用于通过情节相似度推荐电影。在Karpathy的项目中，为电影摘要和情节生成了向量嵌入。生成向量嵌入有两个选项：
- en: Term Frequency-Inverse Document Frequency (TF-IDF), which are simple bigrams
    and should be used for the individual word use.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语频率-逆文档频率（TF-IDF），这是一种简单的二元组，应该用于单个词的使用。
- en: '`[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    [embedding model from OpenAI](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings),
    which should be used for semantic similarity.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    [OpenAI的嵌入模型](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)，应该用于语义相似度。'
- en: 'Additionally, the similarity is calculated based on each movie’s Wikipedia
    summary and plot with two choices for a similarity ranker:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，相似度是基于每部电影的维基百科摘要和情节计算的，具有两种相似度排序选择：
- en: k-Nearest Neighbor (kNN) using cosine similarity
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: k-最近邻（kNN）使用余弦相似度
- en: Support Vector Machine
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持向量机
- en: Karpathy suggests a combination of `[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    and kNN for a good and fast default setting.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Karpathy建议将`[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`和kNN结合使用，以获得一个好的快速默认设置。
- en: 'And last but not least, as stated in this infamous response, the vector embeddings
    are stored in `np.array`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，如这条臭名昭著的回应所述，向量嵌入存储在`np.array`中：
- en: '![](../Images/2bd195ca70bea5862e395d4a06782b09.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2bd195ca70bea5862e395d4a06782b09.png)'
- en: Screenshot of [comment](https://twitter.com/karpathy/status/1647374645316968449)
    under original Tweet (Screenshot by author)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 原推文下的[评论](https://twitter.com/karpathy/status/1647374645316968449)的截图（截图由作者提供）
- en: In this project, we will also use the `[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    embedding model from OpenAI but store the vector embeddings in a vector database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们还将使用来自OpenAI的`[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`嵌入模型，但将向量嵌入存储在向量数据库中。
- en: 'Namely, we will use [Weaviate](https://weaviate.io/)*, an open source vector
    database. Although I could argue that vector databases are much faster than when
    you store your embeddings in `np.array`because they use vector indexing, let’s
    be honest here: At this scale (thousands), you won’t notice any difference in
    speed. My main reason for using a vector database here is that Weaviate has many
    convenient built-in functionalities you can use out of the box, such as automatic
    vectorization using embedding models.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们将使用[Weaviate](https://weaviate.io/)*，一个开源的向量数据库。虽然我可以争论说，向量数据库比将嵌入存储在`np.array`中要快得多，因为它们使用向量索引，但坦率地说：在这个规模（数千个）下，你不会注意到速度上的任何差异。我使用向量数据库的主要原因是Weaviate有许多方便的内置功能可以立即使用，比如使用嵌入模型的自动向量化。
- en: First, as shown in the `[add_data.py](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/add_data.py)`
    file, you need to set up your Weaviate client, which connects to a local Weaviate
    database instance, as follows. Additionally, you will define your OpenAI API key
    here to enable the usage of the integrated OpenAI modules.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如`[add_data.py](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/add_data.py)`文件所示，你需要设置你的Weaviate客户端，它连接到本地的Weaviate数据库实例，如下所示。此外，你将定义你的OpenAI
    API密钥，以启用集成OpenAI模块的使用。
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, you will define a data collection called `Movies` to store the movie data
    objects, which is analogous to creating a table in a relational database. In this
    step, you define the `text2vec-openai` module as a vectorizer, which enables automatic
    data vectorization at import and query time, and in the module settings, you define
    to use the `[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`
    embedding model. Additionally, you can define the cosine distance as the similarity
    measure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将定义一个名为`Movies`的数据集合来存储电影数据对象，这类似于在关系数据库中创建一个表。在这一步中，你定义`text2vec-openai`模块作为向量化器，它允许在导入和查询时自动进行数据向量化，并在模块设置中定义使用`[text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings)`嵌入模型。此外，你可以定义余弦距离作为相似性度量。
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, you define the movie data objects’ properties and for which properties
    to generate vector embeddings. In the following shortened code snippet, you can
    see that for the properties `movie_id` and `title` no vector embeddings are generated
    because of the `"skip" : True` setting for the vectorizer module. This is because,
    we only want to generate vector embeddings for the `description` and `plot`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，你定义电影数据对象的属性以及为哪些属性生成向量嵌入。在下面的简化代码片段中，你可以看到，对于属性`movie_id`和`title`，没有生成向量嵌入，因为向量化模块的设置为`"skip"
    : True`。这是因为，我们只希望为`description`和`plot`生成向量嵌入。'
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, you define a batch process to populate the vector database:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你定义一个批处理过程来填充向量数据库：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Step 2: Search for movies'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二步：搜索电影
- en: 'In Karpathy’s project, the search bar is a simple keyword-based search that
    tries to match your exact query to movie titles verbatim. When some people stated
    that they expected the search to allow semantic search for movies, Karpathy agreed
    that this could be a good extension of the project:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karpathy 的项目中，搜索栏是一个简单的基于关键字的搜索，尝试逐字匹配你的确切查询与电影标题。当一些人表示他们希望搜索能够进行语义搜索时，Karpathy
    同意这可能是项目的一个很好的扩展：
- en: '![](../Images/5c0db08fd09133d39658b214d1ae353d.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c0db08fd09133d39658b214d1ae353d.png)'
- en: Screenshot of [comment](https://twitter.com/karpathy/status/1647376961902366720)
    under original Tweet (Screenshot by author)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 原始推文下的[评论](https://twitter.com/karpathy/status/1647376961902366720)截图（作者截图）
- en: 'In this project, you will enable three types of searches in the `[queries.js](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/queries.js)`
    file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将在`[queries.js](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/queries.js)`文件中启用三种类型的搜索：
- en: keyword-based search ([BM25](https://weaviate.io/developers/weaviate/search/bm25)),
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于关键字的搜索 ([BM25](https://weaviate.io/developers/weaviate/search/bm25)),
- en: semantic search, and
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义搜索，以及
- en: '[hybrid search](https://weaviate.io/developers/weaviate/search/hybrid), which
    is a combination of keyword-based search and semantic search.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[混合搜索](https://weaviate.io/developers/weaviate/search/hybrid)，它是基于关键字的搜索和语义搜索的结合。'
- en: Each of these searches will return `num_movies = 20` movies with the properties
    `['title', 'poster_link', 'genres', 'year', 'director', 'movie_id']`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个搜索都会返回`num_movies = 20`部电影，属性为`['title', 'poster_link', 'genres', 'year',
    'director', 'movie_id']`。
- en: To enable **keyword-based search,** you can use a `.withBm25()` search query
    across the properties `['title', 'director', 'genres', 'actors', 'keywords', 'description',
    'plot']`. You can give the property `'title'` a bigger weight by specifying `'title^3'`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用**基于关键字的搜索**，你可以使用`.withBm25()`搜索查询，涉及的属性为`['title', 'director', 'genres',
    'actors', 'keywords', 'description', 'plot']`。你可以通过指定`'title^3'`来给属性`'title'`更大的权重。
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To enable **semantic search,** you can use a `.withNearText()` search query.
    This will automatically vectorize the search query and retrieve its closest movies
    in the vector space.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用**语义搜索**，你可以使用`.withNearText()`搜索查询。这将自动将搜索查询向量化，并检索其在向量空间中最接近的电影。
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To enable **hybrid search,** you can use a `.withHybrid()` search query. The
    `alpha : 0.5` means that keyword search and semantic search are weighted equally.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '要启用**混合搜索**，你可以使用`.withHybrid()`搜索查询。`alpha : 0.5`表示关键字搜索和语义搜索的权重相等。'
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Step 3: Get similar movie recommendations'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三步：获取类似电影推荐
- en: To get similar movie recommendations, you can do a `.withNearObject()` search
    query, as shown in the `[queries.js](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/queries.js)`
    file. By passing the movie’s `id`, the query returns the `num_movies = 20` closest
    movies to the given movie in the vector space.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取类似的电影推荐，你可以执行 `.withNearObject()` 搜索查询，如 `[queries.js](https://github.com/weaviate-tutorials/awesome-moviate/blob/main/queries.js)`
    文件中所示。通过传递电影的 `id`，查询返回向量空间中与给定电影最接近的 `num_movies = 20` 部分电影。
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Step 4: Run the demo'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步：运行演示
- en: Finally, wrap everything up nicely in a web application with the iconic 2000s
    [GeoCities](https://en.wikipedia.org/wiki/GeoCities) aesthetic (I’m not going
    to bore you with frontend stuff), and voila! You’re all set!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将一切包装成一个具有2000年代标志性 [GeoCities](https://en.wikipedia.org/wiki/GeoCities)
    美学的网页应用（我不打算让你厌倦前端的内容），然后就完成了！你已准备好！
- en: To run the demo locally, clone the [GitHub repository](https://github.com/weaviate-tutorials/awesome-moviate).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地运行演示，克隆 [GitHub 仓库](https://github.com/weaviate-tutorials/awesome-moviate)。
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Navigate to the demo’s directory and set up a virtual environment.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到演示的目录并设置一个虚拟环境。
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make sure to [set the environment variables for your $OPENAI_API_KEY in your
    virtual environment.](https://stackoverflow.com/questions/9554087/setting-an-environment-variable-in-virtualenv)
    Additionally, run the following command in the directory to install all required
    dependencies in your virtual environment.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 [在你的虚拟环境中设置环境变量 $OPENAI_API_KEY。](https://stackoverflow.com/questions/9554087/setting-an-environment-variable-in-virtualenv)
    此外，在目录中运行以下命令，以安装虚拟环境中所需的所有依赖项。
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, set your OPENAI_API_KEY in the `docker-compose.yml` file and run the following
    command to run Weaviate locally via Docker.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `docker-compose.yml` 文件中设置你的 OPENAI_API_KEY，并运行以下命令通过 Docker 本地运行 Weaviate。
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once your Weaviate instance is up and running, run the `add_data.py` file to
    populate your vector database.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的 Weaviate 实例启动并运行，运行 `add_data.py` 文件以填充你的向量数据库。
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Before you can run your application, install all required node modules.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行应用程序之前，安装所有必需的节点模块。
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, run the following command to start up your movie search engine application
    locally.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行以下命令在本地启动你的电影搜索引擎应用程序。
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, navigate to [http://localhost:3000/](http://localhost:3000/) and start
    playing around with your application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到 [http://localhost:3000/](http://localhost:3000/) 并开始尝试你的应用程序。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This article has recreated Andrej Karpathy’s fun weekend project of a movie
    search engine/recommender system. Below, you can see a short video of the finished
    [live demo](https://awesome-moviate.weaviate.io/):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本文重新创建了 Andrej Karpathy 的有趣周末项目，即电影搜索引擎/推荐系统。下面，你可以看到完成的 [实时演示](https://awesome-moviate.weaviate.io/)
    的简短视频：
- en: '![](../Images/2b3edc4058d918016f21473cf8ff12bf.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b3edc4058d918016f21473cf8ff12bf.png)'
- en: Demo live at [https://awesome-moviate.weaviate.io/](https://awesome-moviate.weaviate.io/)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 演示网址 [https://awesome-moviate.weaviate.io/](https://awesome-moviate.weaviate.io/)
- en: In contrast to the original project, this project uses a vector database to
    store the embeddings. Also, the search functionality was extended to allow for
    semantic and hybrid searches as well.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与原始项目相比，该项目使用向量数据库来存储嵌入。此外，搜索功能扩展到了语义和混合搜索。
- en: 'If you play around with it, you’ll notice that it is not perfect, but just
    as Karpathy has said:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进行尝试，你会注意到它并不完美，但正如 Karpathy 所说：
- en: “it works ~okay hah, have to tune it a bit more.”
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “它运行得~还不错，哈哈，需要再调试一下。”
- en: You can find the project’s open source code on [GitHub](https://github.com/weaviate-tutorials/awesome-moviate)
    and tweak it if you like. Some suggestions for further improvements could be to
    play around with vectorizing different properties, to tweak the weighting between
    keyword search and semantic search or to switch out the embedding model with an
    open source alternative.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [GitHub](https://github.com/weaviate-tutorials/awesome-moviate) 上找到项目的开源代码，并根据需要进行修改。一些进一步改进的建议包括尝试向量化不同的属性、调整关键词搜索与语义搜索之间的权重，或用开源替代品替换嵌入模型。
- en: Enjoyed This Story?
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 喜欢这个故事吗？
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[*免费订阅*](https://medium.com/subscribe/@iamleonie) *以便在我发布新故事时收到通知。*'
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----9b270d7a92e4--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----9b270d7a92e4--------------------------------)
    [## 每当 Leonie Monigatti 发布时获取电子邮件。'
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当Leonie Monigatti发布新内容时，会收到一封电子邮件。通过注册，如果你还没有Medium账户，你将创建一个…
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----9b270d7a92e4--------------------------------)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----9b270d7a92e4--------------------------------)'
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*在* [*LinkedIn*](https://www.linkedin.com/in/804250ab/)、[*Twitter*](https://twitter.com/helloiamleonie)
    *和* [*Kaggle*](https://www.kaggle.com/iamleonie) *上找到我*！'
- en: Disclaimer
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 免责声明
- en: At the time of writing, I am a developer advocate at [Weaviate](https://weaviate.io/),
    an open-source [vector database](https://weaviate.io/blog/what-is-a-vector-database).
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在撰写本文时，我是一名[Weaviate](https://weaviate.io/)的开发者倡导者，这是一个开源的[向量数据库](https://weaviate.io/blog/what-is-a-vector-database)。
- en: 'This project is not an original idea: The project is inspired by [Andrej Karpathy’s
    weekend project](https://twitter.com/karpathy/status/1647372603907280896) and
    the implementation is based on an [old demo project of a movie search engine](https://github.com/weaviate/weaviate-examples/tree/main/movies-search-engine)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个项目并非原创想法：该项目的灵感来源于[Andrej Karpathy的周末项目](https://twitter.com/karpathy/status/1647372603907280896)，实现基于一个[旧的电影搜索引擎演示项目](https://github.com/weaviate/weaviate-examples/tree/main/movies-search-engine)。
