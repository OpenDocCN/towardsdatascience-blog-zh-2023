- en: A Simple Guide to Understand the apply() Functions in R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 R 中 apply() 函数的简单指南
- en: 原文：[https://towardsdatascience.com/a-simple-guide-to-understand-the-apply-functions-in-r-69277fc7e522](https://towardsdatascience.com/a-simple-guide-to-understand-the-apply-functions-in-r-69277fc7e522)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-simple-guide-to-understand-the-apply-functions-in-r-69277fc7e522](https://towardsdatascience.com/a-simple-guide-to-understand-the-apply-functions-in-r-69277fc7e522)
- en: Learn how to use these helpful functions once and for all
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一劳永逸地学会如何使用这些有用的函数
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)[](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)[](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)
    ·8 min read·Oct 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)
    ·阅读时长 8 分钟·2023年10月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d38e794bd5b719ca31a8e398cfe549a7.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d38e794bd5b719ca31a8e398cfe549a7.png)'
- en: Photo by [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/0iKjge_aOVo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/0iKjge_aOVo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: I will start this post by saying that I work daily with **R** and **Python**
    languages. Honestly, I find it easier and more intuitive the way the `apply` functions
    are used in Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我在开始这篇文章时要说的是，我每天都使用**R**和**Python**语言。老实说，我觉得 Python 中 `apply` 函数的使用方式更简单、更直观。
- en: Thinking about the reason behind that, I believe it is because there aren’t
    many options in Python. The R Language presents many different options, the *family
    of apply functions* as I like to refer to them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 反思原因，我认为是因为 Python 中的选项不多。R 语言提供了许多不同的选项，即我喜欢称之为的*apply 函数家族*。
- en: I remember that once I read somewhere somebody saying they always go directly
    to loops to solve a problem because they can never remember what each of the apply
    functions do and which one would be the most suited version to use for that case.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得曾经有人说他们总是直接使用循环来解决问题，因为他们总是记不住每个 apply 函数的作用，也不知道哪个函数最适合使用。
- en: Well, I hope that those kind of problems will end after this post. It is my
    intention that those who read this article end it with a good understanding of
    the family of functions, and of how and when to use them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这些问题在这篇文章后能得到解决。我的目的是希望读者在阅读本文后，对这些函数家族有一个清晰的理解，以及如何和何时使用它们。
- en: To perform the exercises, let’s quickly create a sample data frame, without
    too much criteria. An ID, the product name, qty sold and dollar amount for two
    different periods.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行这些练习，我们快速创建一个示例数据框，没有过多的标准。包括一个 ID、产品名称、销售数量和两个不同时间段的金额。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: No more small talk, let’s dive in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不再多说，让我们深入探讨。
- en: Functions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'The *apply family* in R has 4 main functions: `apply()`, `lapply()`, `sapply()`,
    and `tapply()`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: R 中的*apply 家族*有 4 个主要函数：`apply()`、`lapply()`、`sapply()` 和 `tapply()`。
- en: apply( )
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: apply( )
- en: The `apply()` function names the *family*. It is probably the most straightforward
    one to be used. This function *applies* the same function to all the elements
    of a row or a column. Here is the syntax.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply()` 函数被称为*家族*。它可能是最直接的函数。这个函数*应用*相同的操作到行或列的所有元素。这里是语法。'
- en: '`apply(X, MARGIN, FUN)`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply(X, MARGIN, FUN)`'
- en: Apply to the matrix X, on the rows (1) or columns (2), the function specified.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对矩阵 X 应用指定的函数，按行（1）或列（2）。
- en: The easiest example is the application of the **mean** value. We have a dataset
    with a bunch of products sales. But what’s the mean quantity sold and the mean
    dollar amount sold?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的例子是**均值**的应用。我们有一个包含一堆产品销售的数据集。但销售的平均数量和平均销售金额是多少？
- en: To quickly see that, we can use `apply` and choose the function `mean` to be
    applied to every numeric column in the dataset.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速查看这一点，我们可以使用`apply`并选择函数`mean`来应用于数据集中每个数值列。
- en: So, our `X` a matrix with the numeric columns 3 (`qty`) and 4 (`amt`) of our
    dataset — since we can’t take the mean of *product A* and *product B.* The `MARGIN`
    can be `1` for apply to rows or `2` when applying the function to columns. `FUN`
    is the function to be applied to every element. The code will be as follows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`X`是一个矩阵，包含数据集中的数值列3（`qty`）和4（`amt`）——因为我们不能对*产品A*和*产品B*取平均。`MARGIN`可以是`1`以应用于行，或`2`以应用于列。`FUN`是要应用于每个元素的函数。代码如下。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Common Errors
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见错误
- en: We must use the slice notation for `X` when using `apply()` because R would
    throw an error if we try to use the whole dataset `dtf`, given that there are
    string columns. We can’t have the mean point of strings.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用`apply()`时，我们必须使用`X`的切片表示法，因为如果我们尝试使用整个数据集`dtf`（考虑到有字符串列），R会抛出错误。我们不能对字符串求平均。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Even if we try to use a whole column, such as `dtf$qty` to get the mean of the
    quantities (which is numeric) it is not going to work as well, because there is
    just one variable, so it is easier to simply use `mean(dtf$qty)`, right?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使我们尝试使用整个列，例如`dtf$qty`来获取数量的均值（这是数值型的），也不会很好，因为只有一个变量，所以更简单的方法是直接使用`mean(dtf$qty)`，对吗？
- en: When running `apply()`, R will first read the dimensions of the object `X` prior
    to running the function. If you try `dim(dtf$qty)`, you will see that the output
    is `NULL`. That is why you get that error below. The dimension needs to be over
    1.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当运行`apply()`时，R会在运行函数之前首先读取对象`X`的维度。如果你尝试`dim(dtf$qty)`，你会看到输出是`NULL`。这就是你下面收到错误的原因。维度需要大于1。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Great. Nice and easy.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，简单明了。
- en: Apply function by row
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按行应用函数
- en: Now let’s take another look at the data again. If we want to calculate the mean
    by row, to know the average between amount1 and amount2 we can use the same code,
    but just changing to `MARGIN=1` now, and the function will calculate the simple
    average of the row:`[amt + amt2] / 2`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再看看数据。如果我们想按行计算均值，以了解amount1和amount2之间的平均值，我们可以使用相同的代码，只需将`MARGIN=1`更改为`1`，然后函数将计算行的简单平均值：[amt
    + amt2] / 2。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And yet, we can add that to the dataset.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我们可以将其添加到数据集中。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we want to add a column that will calculate the `amt/qty` , we can calculate
    that by row (`MARGIN=1`) using a custom function within apply. The custom functions
    takes a matrix **mtrx** and divides the value in the second column of **mtrx**
    by the value from the first column.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想添加一列来计算`amt/qty`，我们可以通过按行（`MARGIN=1`）使用`apply`中的自定义函数来计算。自定义函数接收一个矩阵**mtrx**，并将**mtrx**第二列的值除以第一列的值。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: lapply( )
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: lapply( )
- en: In R language, a **list** is a concept different than it is for Python. In R,
    it is a collection of objects, not necessarily of the same type. And there will
    be occasions when we need to apply a function to each element in a list. That’s
    what `lapply()` is used for.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在R语言中，**列表**的概念与Python中的不同。在R中，它是一个对象的集合，不一定是相同类型的。当我们需要对列表中的每个元素应用函数时，这就是`lapply()`的用途。
- en: Important to note that `lapply` **returns a list object** with the same length
    as X.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意`lapply` **返回一个与X具有相同长度的列表对象**。
- en: '`lapply(X, FUN)`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`lapply(X, FUN)`'
- en: The simplest example I can think of is if you have a list and you want to check
    the type of each object in that list. Let’s see the code for this simple example.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我能想到的最简单的例子是，如果你有一个列表，想要检查列表中每个对象的类型。让我们看一下这个简单例子的代码。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As expected, the same length (4 objects) and the function `class` was applied
    to every element in the list. Basically, you should use that method if you’re
    dealing with a list object or if you need to have a list returned.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，长度相同（4个对象），并且函数`class`已应用于列表中的每个元素。基本上，如果你处理的是列表对象或需要返回列表，那么你应该使用这种方法。
- en: You should use that method if you’re dealing with a list object or if you need
    to have a list returned.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你处理的是列表对象或需要返回列表，你应该使用这种方法。
- en: sapply( )
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sapply( )
- en: As per the documentation, `sapply()` is an user-friendly version of `lapply()`,
    **returning a vector or matrix of same length** instead of returning a list. If
    the argument `simplify=TRUE`, which is on by default, it will return an array
    (simplified object).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据文档，`sapply()`是`lapply()`的用户友好版本，**返回相同长度的向量或矩阵**，而不是返回一个列表。如果参数`simplify=TRUE`（默认开启），它将返回一个数组（简化对象）。
- en: sapply( ) is an user-friendly version of lapply( ), that will return a simpler
    object, like an array.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sapply()是lapply()的用户友好版本，返回一个更简单的对象，如数组。
- en: '`sapply(X, FUN, simplify = TRUE)`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`sapply(X, FUN, simplify = TRUE)`'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Going back to our created dataset `dtf`, the column `product` brings the names
    preceded by the word ‘*product*’. If we want to remove that, `sapply` can be a
    good helper. Instead of going with a loop or even before loading Tidyverse to
    do that, remember that the apply functions from Base R can help.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们创建的数据集`dtf`，列`product`包含了以‘*product*’开头的名称。如果我们想去除这些，`sapply`可以是一个很好的助手。在使用循环之前，甚至在加载Tidyverse之前，记住Base
    R中的apply函数可以提供帮助。
- en: Observe that we’re using a custom function here to split the string in two pieces,
    once it finds the space character, and taking the second element of that list.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在这里使用了一个自定义函数，将字符串分成两部分，一旦找到空格字符，就取该列表的第二个元素。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: tapply( )
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tapply( )
- en: Finally, `tapply()` is a function to be used when you’re dealing with factors
    (or groups).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`tapply()`是一个在处理因子（或组）时使用的函数。
- en: '`tapply(X, INDEX, FUN, simplify = TRUE)`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`tapply(X, INDEX, FUN, simplify = TRUE)`'
- en: Use tapply to apply a function to every group of values.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用tapply对每组值应用一个函数。
- en: The obvious example for this function is if we want to check the mean of `amt`
    by product without a *group by* function, `tapply` can be handy.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的明显例子是如果我们想在没有*分组*函数的情况下检查`amt`的均值，`tapply`会很有用。
- en: '`X` is the matrix or vector.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X`是矩阵或向量。'
- en: '`INDEX` is the column with the groups.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INDEX`是包含组的列。'
- en: '`FUN` is the function to be applied.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FUN`是要应用的函数。'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That’s about it for the most used functions from the apply family in R.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于R中apply家族函数的最常用部分了。
- en: Before You Go
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你离开之前
- en: Well, the apply functions are great mapping functions. In your daily job as
    a data scientist, there will be several occasions where a mapping function is
    much better than a loop, being that for performance purposes or just for a better
    code readability.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，apply函数是很好的映射函数。在你作为数据科学家的日常工作中，会有很多情况需要映射函数，这比循环要好，无论是为了性能还是为了更好的代码可读性。
- en: With this quick intro, I am sure you can now *apply* the family of apply functions
    to your data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个简要介绍，我相信你现在可以*将* apply函数家族应用到你的数据中。
- en: '`apply`: Use to apply the same function to every element of a row or column
    in a dataset.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apply`：用于对数据集中的每一行或列的每个元素应用相同的函数。'
- en: '`lapply`: Use to apply a function to each element of a list. Returns a list
    of same length as result.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lapply`：用于对列表中的每个元素应用一个函数。返回一个长度相同的列表作为结果。'
- en: '`sapply`: friendly version of lapply that returns an array as result.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sapply`：lapply的友好版本，返回一个数组作为结果。'
- en: '`tapply`: use to apply a function to each group of values. Almost like a group
    by.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tapply`：用于对每一组值应用一个函数。几乎类似于分组操作。'
- en: 'Code in GitHub:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的代码：
- en: '[](https://github.com/gurezende/Studying/tree/master/R/apply?source=post_page-----69277fc7e522--------------------------------)
    [## Studying/R/apply at master · gurezende/Studying'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/gurezende/Studying/tree/master/R/apply?source=post_page-----69277fc7e522--------------------------------)
    [## Studying/R/apply at master · gurezende/Studying'
- en: This is a repository with my tests and studies of new packages - Studying/R/apply
    at master · gurezende/Studying
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是一个包含我对新包测试和学习的代码库 - Studying/R/apply at master · gurezende/Studying
- en: github.com](https://github.com/gurezende/Studying/tree/master/R/apply?source=post_page-----69277fc7e522--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/gurezende/Studying/tree/master/R/apply?source=post_page-----69277fc7e522--------------------------------)
- en: Reference
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考
- en: '[](https://www.guru99.com/r-apply-sapply-tapply.html?source=post_page-----69277fc7e522--------------------------------#5)
    [## apply(), lapply(), sapply(), tapply() Function in R with Examples'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.guru99.com/r-apply-sapply-tapply.html?source=post_page-----69277fc7e522--------------------------------#5)
    [## apply(), lapply(), sapply(), tapply() Function in R with Examples'
- en: This tutorial aims at introducing the apply() function collection. The apply()
    function is the most basic of all…
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本教程旨在介绍apply()函数系列。apply()函数是所有函数中最基本的一个…
- en: www.guru99.com](https://www.guru99.com/r-apply-sapply-tapply.html?source=post_page-----69277fc7e522--------------------------------#5)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: www.guru99.com](https://www.guru99.com/r-apply-sapply-tapply.html?source=post_page-----69277fc7e522--------------------------------#5)
- en: '[https://www.datacamp.com/tutorial/r-tutorial-apply-family](https://www.datacamp.com/tutorial/r-tutorial-apply-family)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.datacamp.com/tutorial/r-tutorial-apply-family](https://www.datacamp.com/tutorial/r-tutorial-apply-family)'
- en: '[SANTOS, Gustavo R. 2023\. *Data Wrangling with R.* 1 ed. Packt Publishing.](https://a.co/d/1gij8AW)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[SANTOS, Gustavo R. 2023\. *使用 R 进行数据整理.* 第1版. Packt Publishing.](https://a.co/d/1gij8AW)'
