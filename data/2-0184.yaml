- en: A Data Scientist’s Guide To Improving Python Code Quality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家提高 Python 代码质量的指南
- en: 原文：[https://towardsdatascience.com/a-data-scientists-guide-to-improving-python-code-quality-21660ecea97d](https://towardsdatascience.com/a-data-scientists-guide-to-improving-python-code-quality-21660ecea97d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-data-scientists-guide-to-improving-python-code-quality-21660ecea97d](https://towardsdatascience.com/a-data-scientists-guide-to-improving-python-code-quality-21660ecea97d)
- en: Tools and packages to write production worthy Python code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写符合生产标准的 Python 代码的工具和包
- en: '[](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)
    ·6 min read·Aug 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)
    ·阅读时间6分钟·2023年8月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c47a9cda8d76910dc96373aa3ca5deb2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c47a9cda8d76910dc96373aa3ca5deb2.png)'
- en: Photo by [Christopher Gower](https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Christopher Gower](https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral)
    提供的照片，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: Nowadays, Data Scientists are becoming more and more involved in the production
    side of deploying a machine learning model. This means we need to be able to write
    production standard Python code like our fellow software engineers. In this article,
    I want to go over some of the key tools and packages that can aid in creating
    production-worthy code for your next model.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，数据科学家在部署机器学习模型的生产环节中变得越来越重要。这意味着我们需要像其他软件工程师一样，能够编写符合生产标准的 Python 代码。在这篇文章中，我想介绍一些可以帮助你为下一个模型编写符合生产标准代码的关键工具和包。
- en: Linters
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检查工具
- en: Overview
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: '[**Linters**](https://en.wikipedia.org/wiki/Lint_%28software%29) are a tool
    that catches small bugs, formatting errors, and odd design patterns that can lead
    to runtime problems and unexpected outputs.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[**代码检查工具**](https://en.wikipedia.org/wiki/Lint_%28software%29) 是一种捕捉小错误、格式错误和可能导致运行时问题及意外输出的奇怪设计模式的工具。'
- en: In Python, we have [**PEP8**](https://pep8.org/) which fortunately gives us
    a global style guide to how our code should look. Numerous linters exist in Python
    that adhere to PEP8, however my preference is [**flake8**](https://flake8.pycqa.org/en/latest/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们有 [**PEP8**](https://pep8.org/)，它幸运地为我们提供了一个全局的代码风格指南。虽然 Python
    中存在许多符合 PEP8 的代码检查工具，但我个人的偏好是 [**flake8**](https://flake8.pycqa.org/en/latest/)。
- en: Flake8
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flake8
- en: Flake8 is actually a combination of the [**Pyflakes**](https://github.com/PyCQA/pyflakes),
    [**pycodestyle**](https://github.com/pycqa/pycodestyle) and [**McCabe**](https://github.com/PyCQA/mccabe)
    linting packages. It checks for errors, [**code smells**](https://en.wikipedia.org/wiki/Code_smell)
    and enforces PEP8 standards.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Flake8 实际上是 [**Pyflakes**](https://github.com/PyCQA/pyflakes)、[**pycodestyle**](https://github.com/pycqa/pycodestyle)
    和 [**McCabe**](https://github.com/PyCQA/mccabe) 代码检查包的组合。它用于检查错误、[**代码异味**](https://en.wikipedia.org/wiki/Code_smell)
    并强制执行 PEP8 标准。
- en: To install flake8 `pip install flake8` and you can use it by `flake8 <file_name.py>`.
    It really is that simple!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 flake8 使用 `pip install flake8`，并且你可以通过 `flake8 <file_name.py>` 使用它。真的就是这么简单！
- en: 'For example, let’s say we have the function `add_numbers` in a file `flake8_example.py`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们在一个文件 `flake8_example.py` 中有一个函数 `add_numbers`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To call flake8 on this file, we execute `flake8 flake8_example.py` and the
    output looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要对这个文件调用 flake8，我们执行 `flake8 flake8_example.py`，输出结果如下：
- en: '![](../Images/9dc5aa4b820701951336ba52ad2e7460.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9dc5aa4b820701951336ba52ad2e7460.png)'
- en: Photo by author.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的照片。
- en: Flake8 has picked up several styling errors that we should correct to be in
    line with PEP8.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Flake8发现了几个样式错误，我们应该修正这些错误以符合PEP8。
- en: See [here](https://flake8.pycqa.org/en/latest/) for more information about flake8
    and how to customise it for your needs.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有关flake8的更多信息以及如何根据需要自定义它，请参见[此处](https://flake8.pycqa.org/en/latest/)。
- en: Code Formatters
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码格式化工具
- en: Overview
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Linters often just tell you what’s wrong with your code but don’t actively fix
    it for you. Formatters do fix your code and help expedite your workflow, ensure
    your code adheres to style guides, and makes it more readable for other people.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Linters通常只是告诉你代码中有什么问题，但不会主动为你修复。格式化工具会修复你的代码，帮助加快工作流程，确保代码遵循风格指南，并使其对其他人更具可读性。
- en: isort
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: isort
- en: The [isort package](https://pycqa.github.io/isort/) sorts your imports in the
    required order specified in [**PEP8**](https://peps.python.org/pep-0008/#imports).
    It can easily be installed by `pip install isort`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[isort包](https://pycqa.github.io/isort/)按[**PEP8**](https://peps.python.org/pep-0008/#imports)中指定的顺序对导入进行排序。可以通过`pip
    install isort`轻松安装。'
- en: 'Imports should be written on separate lines:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 导入应写在单独的行上：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'They should also be grouped in the following order:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还应按以下顺序分组：
- en: '*Standard library* (e.g. `sys`)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标准库*（例如`sys`）'
- en: '*Related third party* (e.g. `pandas`)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*相关第三方*（例如`pandas`）'
- en: '*Local* (e.g. functions from other files in the repo)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*本地*（例如，repo中其他文件的函数）'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, the imports from packages need to be in alphabetical order:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，来自包的导入需要按字母顺序排列：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following commands show you how to run isort from the terminal:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令展示了如何从终端运行isort：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For more information on isort, check out their site [here](https://pycqa.github.io/isort/).
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有关isort的更多信息，请查看他们的网站[此处](https://pycqa.github.io/isort/)。
- en: Black
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Black
- en: Black reformats your code based on its own style guide which is a subset of
    [**PEP8**](https://peps.python.org/pep-0008/). See [here](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html)
    for the current guide black adheres to when formatting.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Black根据其自己的风格指南重新格式化代码，该指南是[**PEP8**](https://peps.python.org/pep-0008/)的一个子集。有关当前black遵循的格式化指南，请参见[此处](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html)。
- en: To install black simply run `pip install black` and to call it on a file `black
    <file_name.py>`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装black，只需运行`pip install black`，然后在文件上调用`black <file_name.py>`。
- en: 'Below is an example for a file called `black_example.py` :'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个名为`black_example.py`的文件示例：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then we run `black black_example.py`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们运行`black black_example.py`：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output in the terminal will also look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 终端中的输出也将是这样的：
- en: '![](../Images/6134ead408ac6d7e4e586a8af119fdf9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6134ead408ac6d7e4e586a8af119fdf9.png)'
- en: Photo by author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者拍摄。
- en: For more information and how to customise your black formatter, see their homepage
    [here](https://black.readthedocs.io/en/stable/index.html#).
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有关更多信息以及如何自定义你的black格式化工具，请参见他们的主页[此处](https://black.readthedocs.io/en/stable/index.html#)。
- en: Unit Tests
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Overview
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: '[**Unit tests**](https://en.wikipedia.org/wiki/Unit_testing) provide a structured
    format to ensure your code is doing what it is meant to do. They test small bits
    of your code like functions and classes to verify they are behaving as expected.
    Tests are quite simple to setup and can save you hours of debugging time, so are
    highly recommended for Data Scientists.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[**单元测试**](https://en.wikipedia.org/wiki/Unit_testing)提供了一个结构化的格式，以确保你的代码按照预期执行。它们测试代码的小部分，例如函数和类，以验证它们是否按预期行为。测试设置相当简单，可以节省你大量的调试时间，因此对数据科学家非常推荐。'
- en: PyTest
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyTest
- en: '[**Pytest**](https://docs.pytest.org/en/7.3.x/) is the most popular unit testing
    framework alongside Python’s native [**unit testing**](https://docs.python.org/3/library/unittest.html)
    package and is easily installed through `pip install pytest`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Pytest**](https://docs.pytest.org/en/7.3.x/)是最受欢迎的单元测试框架，与Python的本地[**单元测试**](https://docs.python.org/3/library/unittest.html)包一起使用，可以通过`pip
    install pytest`轻松安装。'
- en: 'To use pytest, we first need a function we can test. Let’s go back to our `add_numbers`
    function, which will be in a file called `pytest_example.py`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用pytest，我们首先需要一个可以测试的函数。让我们回到我们的`add_numbers`函数，该函数将位于名为`pytest_example.py`的文件中：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now in a separate file called `test_pytest_example.py`, we write the corresponding
    function’s unit test:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在一个名为`test_pytest_example.py`的单独文件中，我们编写相应函数的单元测试：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To run this test, we simply execute `pytest test_pytest_example.py`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此测试，我们只需执行`pytest test_pytest_example.py`：
- en: '![](../Images/53ac3a5642e523fe81896cf6df3ff345.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/53ac3a5642e523fe81896cf6df3ff345.png)'
- en: Photo by author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作者拍摄。
- en: As you can see, our test passed!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的测试通过了！
- en: 'If you want a more detailed and comprehensive tutorial on pytest and unit testing,
    checkout my previous post on the subject:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更详细和全面的pytest和单元测试教程，请查看我之前关于这个主题的文章：
- en: '[](/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8?source=post_page-----21660ecea97d--------------------------------)
    [## Debugging Made Easy: Use Pytest to Track Down and Fix Python Code'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8?source=post_page-----21660ecea97d--------------------------------)
    [## 调试变得简单：使用Pytest跟踪和修复Python代码'
- en: A beginner’s tutorial on unit testing and how to carry them out in Pytest
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初学者的单元测试教程及如何在Pytest中进行单元测试
- en: towardsdatascience.com](/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8?source=post_page-----21660ecea97d--------------------------------)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8?source=post_page-----21660ecea97d--------------------------------)
- en: Type Checker
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型检查器
- en: Overview
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The final topic we will cover is typing, and no not the keyboard kind! Python
    is a [**dynamic language**](https://en.wikipedia.org/wiki/Dynamic_programming_language),
    which means it does not enforce strict typing for its variables. A variable `x`,
    can be an integer and a string in the same code. However, this can be problematic
    and lead to unexpected bugs. Therefore, there are tools to make Python more like
    a [**statically typed**](https://www.techopedia.com/definition/22321/statically-typed#:~:text=Statically%20typed%20is%20a%20programming,with%20variables%2C%20not%20with%20values.)
    language.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个主题是类型系统，不是键盘类型！Python是[**动态语言**](https://en.wikipedia.org/wiki/Dynamic_programming_language)，这意味着它不强制变量的严格类型。变量`x`在同一代码中可以是整数也可以是字符串。然而，这可能会导致意外的错误。因此，有工具可以使Python更像是[**静态类型**](https://www.techopedia.com/definition/22321/statically-typed#:~:text=Statically%20typed%20is%20a%20programming,with%20variables%2C%20not%20with%20values.)语言。
- en: Mypy
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mypy
- en: We can ensure our variables and function have the right expected types by using
    the package [**mypy**](https://mypy-lang.org/). This package checks that the inputs
    and outputs are correct with the required types.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用包[**mypy**](https://mypy-lang.org/)来确保我们的变量和函数具有正确的预期类型。这个包检查输入和输出是否符合所需的类型。
- en: 'For example, for the `add_numbers` function, we expect the inputs and outputs
    to both be `float`. This can be specified in the function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于`add_numbers`函数，我们期望输入和输出都为`float`。这可以在函数中指定：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let’s say we pass the following arguments into the function and `print`
    the results:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们将以下参数传递给函数并`print`结果：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output would look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出会如下所示：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We see the first output is what we expect, but the second is not. This is because
    we passed in two `str` types, however the python interpreter didn’t error out
    as Python is a dynamic language.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到第一个输出符合我们的预期，但第二个则不符合。这是因为我们传入了两个`str`类型，然而Python解释器没有报错，因为Python是动态语言。
- en: 'We can use mypy to catch these errors and avoid any bugs downstream. To do
    this, call mypy as `mypy <file_name.py>`. So, for this example we execute `mypy
    mypy_example.py`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用mypy来捕获这些错误，避免下游出现任何bug。为此，调用mypy命令为`mypy <file_name.py>`。所以，对于这个例子，我们执行`mypy
    mypy_example.py`：
- en: '![](../Images/1faa678f068177a197f5dc9e2adc8582.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1faa678f068177a197f5dc9e2adc8582.png)'
- en: Photo by author.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作者拍摄的照片。
- en: As we can see, mypy has picked up that the arguments specified in line 6 are
    `str`, whereas the function expects `float`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，mypy发现第6行中指定的参数是`str`，而函数期望的是`float`。
- en: 'If you want a more detailed and comprehensive tutorial on mypy and typing,
    checkout my previous post on the subject:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更详细和全面的mypy和类型教程，请查看我之前关于这个主题的文章：
- en: '[](/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05?source=post_page-----21660ecea97d--------------------------------)
    [## A Data Scientist’s Guide to Python Typing: Boosting Code Clarity'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05?source=post_page-----21660ecea97d--------------------------------)
    [## 数据科学家的Python类型指南：提升代码清晰度'
- en: The importance of typing and how it can be carried in Python
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型的重要性及其在Python中的应用
- en: towardsdatascience.com](/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05?source=post_page-----21660ecea97d--------------------------------)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05?source=post_page-----21660ecea97d--------------------------------)
- en: What’s The Need?
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是需求？
- en: 'To summarise, you might be thinking, why do we need all these tools? Well,
    all these lead to your Python code having:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，你可能会想，为什么我们需要这些工具？这些工具的最终目的是让你的Python代码具有：
- en: '***Readability:*** *Your code becomes instantly more intuitive and readable
    to other developers and data scientists. This allows for better collaboration
    and quicker delivery times.*'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***可读性：*** *你的代码变得对其他开发者和数据科学家更加直观和易读。这有助于更好的协作和更快的交付时间。*'
- en: '***Robustness:*** *The code will be less prone to errors and also harder to
    introduce errors, particularly using unit tests.*'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***鲁棒性：*** *代码将更不容易出错，并且引入错误的难度也更大，特别是使用单元测试时。*'
- en: '***Easier To Identify Bugs:*** *Through the use of linters and tests, we can
    detect any inconsistencies and odd results from the code, which limits the risk
    of shipping to production with code errors.*'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***更容易识别错误：*** *通过使用代码检查工具和测试，我们可以检测代码中的任何不一致和异常结果，从而降低在生产环境中出现代码错误的风险。*'
- en: 'You can view the whole code used in this post at my GitHub here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我的 GitHub 上查看本文中使用的完整代码：
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/code-quality-example?source=post_page-----21660ecea97d--------------------------------)
    [## Medium-Articles/Software Engineering /code-quality-example at main · egorhowell/Medium-Articles'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/code-quality-example?source=post_page-----21660ecea97d--------------------------------)
    [## Medium-Articles/Software Engineering /code-quality-example at main · egorhowell/Medium-Articles'
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我在我的 Medium 博客/文章中使用的代码。通过创建一个帐户来为 egorhowell/Medium-Articles 的开发做出贡献…
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/code-quality-example?source=post_page-----21660ecea97d--------------------------------)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/code-quality-example?source=post_page-----21660ecea97d--------------------------------)
- en: References & Further Reading
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献与进一步阅读
- en: '[*More Python code quality examples*](https://testdriven.io/blog/python-code-quality/#black)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*更多的 Python 代码质量示例*](https://testdriven.io/blog/python-code-quality/#black)'
- en: '[*More linting tools*](https://realpython.com/python-code-quality/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*更多的代码检查工具*](https://realpython.com/python-code-quality/)'
- en: '[*And some more tools*](https://cpske.github.io/ISP/code-quality/code-quality-tools)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*还有更多工具*](https://cpske.github.io/ISP/code-quality/code-quality-tools)'
- en: Another Thing!
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个话题！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的通讯， [**Dishing the Data**](https://dishingthedata.substack.com/)，在其中我每周分享成为更好数据科学家的小贴士。没有“空话”或“点击诱饵”，只有来自实践中的数据科学家的纯粹可操作的见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----21660ecea97d--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://newsletter.egorhowell.com/?source=post_page-----21660ecea97d--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读《Dishing The Data》，作者 Egor Howell，Substack 发表的…
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----21660ecea97d--------------------------------)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----21660ecea97d--------------------------------)
- en: Connect With Me!
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
