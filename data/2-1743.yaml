- en: 'Python Type Hinting: Duck Type Compatibility and Consistent-With'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 类型提示：鸭子类型兼容性和与一致
- en: 原文：[https://towardsdatascience.com/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac](https://towardsdatascience.com/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac](https://towardsdatascience.com/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON PROGRAMMING
- en: You don’t have to hint int when you’re hinting float, or namedtuple when you’re
    hinting tuple. Why?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当你在提示`float`时，你不必提示`int`，当你在提示`tuple`时，也不必提示`namedtuple`。为什么？
- en: '[](https://medium.com/@nyggus?source=post_page-----72e8b348d8ac--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----72e8b348d8ac--------------------------------)[](https://towardsdatascience.com/?source=post_page-----72e8b348d8ac--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----72e8b348d8ac--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----72e8b348d8ac--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----72e8b348d8ac--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----72e8b348d8ac--------------------------------)[](https://towardsdatascience.com/?source=post_page-----72e8b348d8ac--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----72e8b348d8ac--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----72e8b348d8ac--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----72e8b348d8ac--------------------------------)
    ·8 min read·Jun 6, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----72e8b348d8ac--------------------------------)
    ·阅读时间8分钟·2023年6月6日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7661c8753bdda73a66f4cc31ac70bc99.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7661c8753bdda73a66f4cc31ac70bc99.png)'
- en: Photo by [Markus Winkler](https://unsplash.com/@markuswinkler?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Markus Winkler](https://unsplash.com/@markuswinkler?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)提供的照片
- en: 'Sometimes, Python type hinting can make things easier. True, not always — but
    at least in my opinion, quite often it does — given that it’s done wisely. Some
    disagree, but I am not going to dispute with them: in my eyes, this is quite a
    subjective subject.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Python 类型提示可以使事情变得更简单。确实，并不总是如此——但至少在我看来，通常它确实能做到——前提是明智地使用它。有些人不同意，但我不打算与他们争论：在我看来，这是一个相当主观的话题。
- en: 'I wrote what I think about Python type hinting, how to use it to increase code
    readability, and how *not* to use it to do otherwise, in the following article:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我在以下文章中写了我对 Python 类型提示的看法，如何使用它来提高代码可读性，以及如何*不*使用它以达到其他目的：
- en: '[](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----72e8b348d8ac--------------------------------)
    [## Python’s Type Hinting: Friend, Foe, or Just a Headache?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----72e8b348d8ac--------------------------------)
    [## Python 的类型提示：朋友、敌人还是仅仅是个头疼的问题？'
- en: Type hinting’s popularity is increasing in the Python community. Where will
    this lead us? What can we do to use it…
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型提示在 Python 社区中的受欢迎程度正在上升。这会将我们带到哪里？我们可以做些什么来使用它……
- en: betterprogramming.pub](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----72e8b348d8ac--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: betterprogramming.pub](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----72e8b348d8ac--------------------------------)
- en: Today, we’ll discuss what *consistent-with* and *duck-type compatibility* mean
    in terms of Python types.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们将讨论在 Python 类型中，*与一致*（consistent-with）和*鸭子类型兼容性*（duck-type compatibility）的含义。
- en: 'Imagine you’re hinting the use of `float`, like in the function below:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你在提示使用`float`，就像下面的函数：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a typical statistical function, calculating the sum of squares of a
    variable. It takes a container of floating-point numbers and returns a float.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的统计函数，用于计算一个变量的平方和。它接受一个浮点数的容器并返回一个浮点数。
- en: As you see, to annotate the function, I used `Sequence`, a generic abstract
    base class available from `collections.abc` (before Python 3.9 you needed to use
    `typing.Sequence`). This means you can provide a list or a tuple — but you can’t
    provide, for instance, a generator¹.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，为了注释这个函数，我使用了`Sequence`，这是一个从`collections.abc`（在 Python 3.9 之前，你需要使用`typing.Sequence`）中提供的通用抽象基类。这意味着你可以提供一个列表或一个元组——但你不能提供，例如，一个生成器¹。
- en: Okay, so this is a statistical function, and it expects a sequence of floating-point
    numbers. That makes sense, right? But in real-life, quite often quantitative variables
    are integers, like the number of mites per shoot, the number of items sold, the
    number of inhabitants, to name just a few.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以这是一个统计函数，它期望一个浮点数的序列。这是有道理的，对吧？但在实际生活中，相当多的定量变量是整数，比如每个芽的螨虫数量、销售的物品数量、人口数量，仅举几例。
- en: Shouldn’t we thus do something with the function, to take this fact into account?
    We all know that *dynamically*, the function will work just fine for integers,
    and that *dynamically* we can easily join integers and floating-point numbers
    in `x`. But what about type hints and static checkers?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们是不是应该对函数做一些调整，以考虑到这个事实呢？我们都知道，*动态*情况下，函数对整数是完全有效的，而且*动态*情况下，我们可以轻松地将整数和浮点数结合在
    `x` 中。但是类型提示和静态检查器呢？
- en: Is it fine to use `int` for this function, or should we rather make it clear
    that it accepts `int` values, too? Should we do it like below?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个函数，使用 `int` 是否合适，还是我们应该更清楚地说明它也接受 `int` 值？我们应该像下面这样做吗？
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This seems clear: you can use a sequence of floating-point numbers or integers,
    and the function returns a float. Isn’t this version better, at least from type-hinting
    perspective?'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这很明显：你可以使用浮点数或整数的序列，函数会返回一个浮点数。从类型提示的角度来看，这个版本不是更好吗？
- en: To answer this question, let’s return to the previous version, without `int`.
    What do static type checkers say about that?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这个问题，我们回到之前的版本，没有 `int`。静态类型检查器对此有何看法？
- en: 'Not a word! Look what `Pylance` (in Visual Studio Code) says about it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一句话也不说！看看 `Pylance`（在 Visual Studio Code 中）对它的说法：
- en: '![](../Images/baaf9324c6318ec4be4e3ad671e78857.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/baaf9324c6318ec4be4e3ad671e78857.png)'
- en: 'Screenshot from Visual Studio Code: Pylance does not indicate any error. Image
    by author'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Visual Studio Code 的截图：Pylance 没有指出任何错误。图片由作者提供
- en: 'Nothing! Had `Pylance` seen a static error, we would’ve seen it underlined
    in the color red. And here, `mypy`’s opinion:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 没有！如果 `Pylance` 发现静态错误，我们会看到它被红色下划线标出。在这里，这是 `mypy` 的看法：
- en: '![](../Images/9b9a0fd14b3351e967d152476db544c9.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b9a0fd14b3351e967d152476db544c9.png)'
- en: Mypy says all’s fine when you use int for float annotation. Image by author
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Mypy 说当你使用 `int` 进行浮点数注解时一切正常。图片由作者提供
- en: Why can you use `int` instead of `float`?
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你可以用 `int` 代替 `float`？
- en: We’ve come to the main topic of this article. Long story short, you can use
    `int` instead of `float` when you hint `float`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经进入了本文的主要话题。简而言之，当你提示 `float` 时，你可以使用 `int` 代替。
- en: 'First, let’s have a look at the webpage of `mypy`’s documentation describing
    duck type compatibility:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看看 `mypy` 文档中描述鸭子类型兼容性的网页：
- en: '[## Duck type compatibility - mypy 1.3.0 documentation'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 鸭子类型兼容性 - mypy 1.3.0 文档'
- en: In Python, certain types are compatible even though they aren't subclasses of
    each other. For example, objects are…
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Python 中，某些类型即使不是彼此的子类，仍然是兼容的。例如，对象是…
- en: mypy.readthedocs.io](https://mypy.readthedocs.io/en/stable/duck_type_compatibility.html?source=post_page-----72e8b348d8ac--------------------------------)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[mypy.readthedocs.io](https://mypy.readthedocs.io/en/stable/duck_type_compatibility.html?source=post_page-----72e8b348d8ac--------------------------------)'
- en: 'This is what we will read there, among others:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将在那里看到的内容之一：
- en: In Python, certain types are compatible even though they aren’t subclasses of
    each other. For example, `int` objects are valid whenever `float` objects are
    expected. Mypy supports this idiom via *duck type compatibility*.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Python 中，某些类型即使不是彼此的子类，仍然是兼容的。例如，`int` 对象在期望 `float` 对象的地方是有效的。Mypy 通过 *鸭子类型兼容性*
    支持这种惯用法。
- en: Ha!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 哈！
- en: 'Don’t worry, this doesn’t widen the knowledge you should know about type hints
    too much:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心，这不会过多扩展你对类型提示的知识：
- en: 'This is supported for a small set of built-in types:'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这对于一小部分内置类型是被支持的：
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* `int` is duck type compatible with `float` and `complex`.'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* `int` 是与 `float` 和 `complex` 兼容的鸭子类型。'
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* `float` is duck type compatible with `complex`.'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* `float` 是与 `complex` 兼容的鸭子类型。'
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* `bytearray` and `memoryview` are duck type compatible with `bytes`.'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* `bytearray` 和 `memoryview` 是与 `bytes` 兼容的鸭子类型。'
- en: So now we know. We do not have to hint `int` when we already hint the use of
    `float`. This will work in exactly the same way as `float | int` (or `Union[float,
    int]`). This means that the `| int` part in the hint is redundant.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们知道了。当我们已经提示使用 `float` 时，不必再提示 `int`。这将和 `float | int`（或 `Union[float,
    int]`）完全一样。这意味着提示中的 `| int` 部分是多余的。
- en: And just like `int` is duck type compatible with `float`, it is also duck type
    compatible with `complex`, and `float` is duck type compatible with `complex`,
    and both `bytearray` and `memoryview` are duck type compatible with `bytes`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `int` 与 `float` 是鸭子类型兼容的，它也与 `complex` 是鸭子类型兼容的，`float` 与 `complex` 是鸭子类型兼容的，同时
    `bytearray` 和 `memoryview` 也与 `bytes` 是鸭子类型兼容的。
- en: 'Okay, that’s `mypy`. Now, let’s look into my favorite Python book, one I’ve
    referred to quite a lot in my articles: *Fluent Python*, 2nd ed., by Luciano Ramalho:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那是 `mypy`。现在，让我们看看我最喜欢的 Python 书籍，我在文章中经常提到的那本书：*Fluent Python*，第 2 版，由 Luciano
    Ramalho 编写：
- en: '[](https://www.fluentpython.com/?source=post_page-----72e8b348d8ac--------------------------------)
    [## Fluent Python, the lizard book'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.fluentpython.com/?source=post_page-----72e8b348d8ac--------------------------------)
    [## Fluent Python，蜥蜴书'
- en: An accessibility-friendly Hugo theme, ported from the original Cupper project.
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个无障碍友好的 Hugo 主题，从原始的 Cupper 项目移植过来。
- en: www.fluentpython.com](https://www.fluentpython.com/?source=post_page-----72e8b348d8ac--------------------------------)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: www.fluentpython.com](https://www.fluentpython.com/?source=post_page-----72e8b348d8ac--------------------------------)
- en: To learn what’s going on in here, we should move to where Luciano explains what
    *consistent-with* means. What he writes is, we don’t have to add `int` to a `float`
    type hint because `int` is *consistent-with* `float`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这里发生了什么，我们应该转到 Luciano 解释 *consistent-with* 意思的地方。他写道，我们不需要将 `int` 添加到 `float`
    类型提示中，因为 `int` 是 *consistent-with* `float`。
- en: But what does *consistent-with* mean? (And yes, Luciano does use the hyphen
    in and the italics for *consistent-with* every time, unlike [PEP 484](https://peps.python.org/pep-0484/)*.)*
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 *consistent-with* 是什么意思呢？（是的，Luciano 每次都使用连字符和斜体来表示 *consistent-with*，这与
    [PEP 484](https://peps.python.org/pep-0484/) 不同。）
- en: As he explains, `T2` is *consistent-with* `T1` when `T1` is a subtype of `T2`.
    In other words, a subclass is *consistent-with* all its superclasses — with some
    exceptions that enwiden the definition of *consistent-with*. Based on [this section
    of PEP 484](https://peps.python.org/pep-0484/#the-numeric-tower), Luciano explains
    that the definition also comprises the above-cited scenarios with numbers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如他解释的那样，当 `T1` 是 `T2` 的子类型时，`T2` 是 *consistent-with* `T1`。换句话说，一个子类是 *consistent-with*
    所有它的超类——尽管有一些例外，这些例外扩展了 *consistent-with* 的定义。根据 [PEP 484 的这一部分](https://peps.python.org/pep-0484/#the-numeric-tower)，Luciano
    解释说，这一定义还包括了上述提到的数字场景。
- en: And when we add the scenario with the types *consistent-with* `bytes`, we will
    have the following definition of *consistent-with:*
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们添加与类型 *consistent-with* `bytes` 的场景时，我们将有以下 *consistent-with* 的定义：
- en: '![](../Images/84df5d4ef8b1cb03651755dbbbd826f7.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84df5d4ef8b1cb03651755dbbbd826f7.png)'
- en: '`T2` is *consistent-with* `T1` when:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `T2` 是 *consistent-with* `T1` 时：
- en: '`T1` is a subtype of `T2`, or'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1` 是 `T2` 的子类型，或者'
- en: '`T1` is duck type compatible with `T2`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1` 与 `T2` 是鸭子类型兼容的。'
- en: '![](../Images/84df5d4ef8b1cb03651755dbbbd826f7.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84df5d4ef8b1cb03651755dbbbd826f7.png)'
- en: What we need to remember is that if one type is *consistent-with* another type,
    it’s either its subtype (subclass), or it is duck type compatible with it — which
    boils down to a fact that it’s enough to type hint the latter; you can simply
    omit the former.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要记住的是，如果一种类型是 *consistent-with* 另一种类型，它要么是其子类型（子类），要么是与之鸭子类型兼容的——这归结为一个事实：只需对后者进行类型提示即可；你可以简单地省略前者。
- en: 'To be honest, I did such a mistake quite often — I mean, I did this redundant
    thing, something like below:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，我经常犯这样的错误——我的意思是，我做了这种多余的事情，类似如下：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I always thought I was making the user’s life easier, thanks to clarifying that
    `x` can include both integers and floating-point numbers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直认为通过澄清 `x` 可以包含整数和浮点数，我是在让用户的生活更轻松。
- en: Was I? I don’t know. For sure, I was making the code verbose. A person who does
    not know that `int` is a duck type of `float` may think, why only `float`? On
    the other hand, we should not write the code in a way that makes easy to understand
    by those who do not know. Of course, there are some limits, but I don’t think
    this situation crosses a line. Besides, anyone who knows Python a little bit should
    know that where a `float` is expected, an `int` can be used; this is rather common
    knowledge. Anyway, this is one of the reasons why I’m writing this article — so
    that my readers know that not only can an `int` be used dynamically instead of
    a `float`, but also that this is fine from a static checkers point of view.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我吗？我不知道。确实，我使代码变得冗长。一个不知道`int`是`float`的鸭子类型的人可能会想，为什么只有`float`？另一方面，我们不应该以让那些不了解的人容易理解的方式编写代码。当然，有一些限制，但我认为这种情况并没有越界。此外，任何稍微懂一点Python的人应该知道，在期望`float`的地方，可以使用`int`；这是一种相当普遍的知识。无论如何，这也是我写这篇文章的原因之一——让我的读者知道，不仅`int`可以动态地代替`float`，从静态检查器的角度来看这也是可以的。
- en: 'Let’s return to the `sum_of_squares()` function. When you know about duck type
    compatibility, the concise version is as clear but shorter and thus cleaner:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`sum_of_squares()`函数。当你了解鸭子类型兼容性时，简洁版是一样清晰但更短，因此更干净：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, I could say that my lack of Python knowledge made me think I was doing a
    favor to the users of my code — now I know that I wasn’t.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我可以说，我对Python知识的缺乏让我认为我是在为我的代码用户做好事——现在我知道我不是。
- en: Named tuples
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名元组
- en: With `collection.namedtupes` and `typing.NamedTuples`, the situation is similar,
    with a small difference. Both these types are subtypes of the regular `tuple`
    type, and this is why they are *consistent-with* it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`collection.namedtupes`和`typing.NamedTuples`，情况类似，但有一点小差别。这两种类型都是常规`tuple`类型的子类型，这就是它们*与…一致*的原因。
- en: 'That’s why the below annotation is… Well, it’s not the best:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么下面的注释是……嗯，它不是最好的：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function itself is not the smartest among those I’ve written, but that’s
    not the point. The point is, if you want to accept a `tuple`, a `namedtuple` and
    a `NamedTuple`, you can do it this way:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数本身在我写过的函数中不是最聪明的，但这不是重点。重点是，如果你想接受一个`tuple`、一个`namedtuple`和一个`NamedTuple`，你可以这样做：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'However, if you want to accept only one of the two named tuples, you can type
    hint it, for example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你只想接受两种命名元组中的一个，你可以进行类型提示，例如：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And here, only instances of `collections.namedtuple` and of its subclasses can
    be used. You could of course indicate `typing.NamedTuple` the same way, and then
    a `collections.namedtuple` could not be used. Remember, if `T1` is *consistent-with*
    `T2`, it does not mean that `T2` is *consistent-with* `T1`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，只能使用`collections.namedtuple`及其子类的实例。你当然可以以相同的方式指明`typing.NamedTuple`，这样`collections.namedtuple`就不能使用了。记住，如果`T1`与`T2`*一致*，并不意味着`T2`也*一致*于`T1`。
- en: Remember, if `T1` is *consistent-with* `T2`, it does not mean that `T2` is *consistent-with*
    `T1`.
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 记住，如果`T1`与`T2`*一致*，并不意味着`T2`也*一致*于`T1`。
- en: Conclusion
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'We learned what *consistent-with* and *duck type compatibility* mean. Don’t
    be afraid to use this knowledge in your code. You know how to respond to the following
    questions: “Why only `float`? What if I want to use an `int`?”'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了*与…一致*和*鸭子类型兼容性*的含义。不要害怕在代码中使用这些知识。你知道如何回应以下问题：“为什么只有`float`？如果我想使用`int`呢？”
- en: Footnotes
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: ¹ That `sum_of_squares()` defined that way does not accept a generator makes
    plenty of sense. To see why, analyze the function’s body, keeping in mind how
    generators work.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ `sum_of_squares()`以这种方式定义不接受生成器是有充分理由的。要理解原因，请分析函数的主体，并考虑生成器是如何工作的。
- en: 'Note that calculating `len(x)` would consume the generator — so, the function
    would not be able to calculate the sum of `x`. Look:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，计算`len(x)`会消耗生成器——所以，函数将无法计算`x`的和。看：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Pylance` screams:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pylance`大喊：'
- en: '![](../Images/20aa90352469f55f0a3ad8835a38536a.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/20aa90352469f55f0a3ad8835a38536a.png)'
- en: '`mypy` does not like it, either:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`mypy`也不喜欢：'
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Do you see how using a static type checker can help you catch errors that otherwise
    would be caught at runtime?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否看到使用静态类型检查器可以帮助你捕捉那些否则会在运行时被发现的错误？
- en: So, kudos to type hinting? Yes — but kudos to *good* type hinting!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，类型提示值得称赞？是的——但要称赞*好的*类型提示！
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)看到它们。如果你想加入Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----72e8b348d8ac--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----72e8b348d8ac--------------------------------)
    [## 使用我的推荐链接加入Medium - Marcin Kozak'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Marcin Kozak的每个故事（以及Medium上的其他成千上万位作家的故事）。你的会员费将直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----72e8b348d8ac--------------------------------)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@nyggus/membership?source=post_page-----72e8b348d8ac--------------------------------)
