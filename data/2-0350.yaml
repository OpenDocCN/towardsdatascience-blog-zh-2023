- en: 'AWS Essentials for Data Science: Compute'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学AWS基础：计算
- en: 原文：[https://towardsdatascience.com/aws-essentials-for-data-science-compute-9b4c6e3b46bf](https://towardsdatascience.com/aws-essentials-for-data-science-compute-9b4c6e3b46bf)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/aws-essentials-for-data-science-compute-9b4c6e3b46bf](https://towardsdatascience.com/aws-essentials-for-data-science-compute-9b4c6e3b46bf)
- en: Understanding and deploying EC2 and Lambda services
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解和部署EC2和Lambda服务
- en: '[](https://mgsosna.medium.com/?source=post_page-----9b4c6e3b46bf--------------------------------)[![Matt
    Sosna](../Images/c3175c0dc62b795a8d0fa57532fb669b.png)](https://mgsosna.medium.com/?source=post_page-----9b4c6e3b46bf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b4c6e3b46bf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b4c6e3b46bf--------------------------------)
    [Matt Sosna](https://mgsosna.medium.com/?source=post_page-----9b4c6e3b46bf--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mgsosna.medium.com/?source=post_page-----9b4c6e3b46bf--------------------------------)[![Matt
    Sosna](../Images/c3175c0dc62b795a8d0fa57532fb669b.png)](https://mgsosna.medium.com/?source=post_page-----9b4c6e3b46bf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b4c6e3b46bf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b4c6e3b46bf--------------------------------)
    [Matt Sosna](https://mgsosna.medium.com/?source=post_page-----9b4c6e3b46bf--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b4c6e3b46bf--------------------------------)
    ·18 min read·Jan 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b4c6e3b46bf--------------------------------)
    ·阅读时间18分钟·2023年1月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7452510321621511a738d6a39304a5d4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7452510321621511a738d6a39304a5d4.png)'
- en: Photo by [Nick Owuor (astro.nic.visuals)](https://unsplash.com/@astro_nic25?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Nick Owuor (astro.nic.visuals)](https://unsplash.com/@astro_nic25?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: So you’ve built a cool app and want to show it off to the world. Maybe it’s
    an AI that generates [cat pictures from scribbles](https://affinelayer.com/pixsrv/),
    a [viral LinkedIn post generator](https://viralpostgenerator.com), or an [English
    to RegEx translator](https://www.autoregex.xyz/). You want a user to just click
    a link and immediately start interacting with your app, rather than needing to
    download and run it on their computer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你创建了一个很酷的应用程序，并想向全世界展示它。也许它是一个可以生成[涂鸦猫咪图片的AI](https://affinelayer.com/pixsrv/)、一个[病毒式LinkedIn帖子生成器](https://viralpostgenerator.com)或一个[英语到RegEx的翻译器](https://www.autoregex.xyz/)。你希望用户只需点击一个链接，就能立即开始使用你的应用程序，而不是需要下载并在他们的电脑上运行它。
- en: This “immediate interactivity” is going to require a **server**, which takes
    user requests (e.g., cat scribbles) and *serves* responses (e.g., AI-generated
    cat images). You *could* use your personal laptop, but it’ll stop serving requests
    when it goes to sleep or turns off, and a sophisticated hacker could probably
    steal your private data. The cherry on top is that your hard drive might melt
    if your computer tries serving too many requests at once!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“即时交互”需要一个**服务器**，它接收用户请求（例如，猫咪涂鸦）并*提供*响应（例如，AI生成的猫咪图片）。你*可以*使用个人笔记本电脑，但当它进入睡眠模式或关闭时，它将停止处理请求，而且一个熟练的黑客可能会窃取你的私人数据。更糟糕的是，如果你的计算机尝试同时处理过多的请求，你的硬盘可能会过热！
- en: Unless you like hacked, melted laptops, you’ll probably want to [rent a server
    from the cloud](/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284).
    While you sacrifice some control by not having access to the physical machine,
    you’ll abstract away a lot of configuration and maintenance you likely don’t want
    to deal with anyway. And if you’re willing to pay a bit more, you can easily rent
    a machine — or several — that are significantly stronger than your laptop. So
    how do we get started?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你喜欢被黑客攻击或硬盘过热的笔记本电脑，否则你可能会想要[租用云服务器](/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284)。虽然你失去了一些对物理机器的控制，但你会避免很多你可能不愿意处理的配置和维护。而且如果你愿意多花点钱，你可以轻松租用一台——甚至几台——远比你的笔记本电脑强大的机器。那么我们怎么开始呢？
- en: We previously covered a [high-level overview](/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284)
    of the cloud, as well as a tutorial on [storing data](/aws-essentials-for-data-science-storage-5755afc3cb4a).
    But what about the *engines* of the cloud? In this final post, we’ll cover two
    compute-focused **Amazon Web Services**. We’ll start with the fundamental cloud
    building block, **EC2**, before moving on to server-less computing with **Lambda**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前覆盖了云计算的[高层概述](/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284)以及[存储数据](
    /aws-essentials-for-data-science-storage-5755afc3cb4a)的教程。但云计算的*引擎*是什么？在这篇最后的文章中，我们将讨论两个计算密集型的**亚马逊网络服务**。我们将从基础的云构建模块**EC2**开始，然后转到无服务器计算的**Lambda**。
- en: '![](../Images/8bb891a7b1f3e4070c7195dc9c94e8e7.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8bb891a7b1f3e4070c7195dc9c94e8e7.png)'
- en: Photo by [Taylor Vick](https://unsplash.com/@tvick?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Taylor Vick](https://unsplash.com/@tvick?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)拍摄
- en: Background
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: The holiday season is a recurring chaotic time for retailers. Q4 accounts for
    **a staggering 33–39%** of [Macy’s](https://ycharts.com/companies/M/revenues)
    and [Kohl’s](https://ycharts.com/companies/KSS/revenues) yearly revenues, for
    example, and even with Prime Day in the summer, [Amazon’s](https://ycharts.com/companies/AMZN/revenues)
    Q4 is still around 31%. Much of this holiday rush [takes place online](https://www.cbre.com/insights/articles/omnichannel-what-is-the-share-of-e-commerce-in-overall-retail-sales),
    translating to *a lot more users* spending *a lot more time* on stores’ websites.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假期季节对于零售商来说是一个反复出现的混乱时刻。例如，第四季度占**惊人的33–39%**的[Macy's](https://ycharts.com/companies/M/revenues)和[Kohl's](https://ycharts.com/companies/KSS/revenues)年度收入，甚至在夏季的Prime
    Day之后，[亚马逊](https://ycharts.com/companies/AMZN/revenues)的第四季度仍然约为31%。这股假日冲动[大多在线上发生](https://www.cbre.com/insights/articles/omnichannel-what-is-the-share-of-e-commerce-in-overall-retail-sales)，转化为*更多的用户*在商店网站上*花费更多的时间*。
- en: 'Put yourself in the shoes of an Amazon infrastructure engineer in October 2005,
    a few years after the [dot-com bubble](https://en.wikipedia.org/wiki/Dot-com_bubble),
    but before the cloud industry really started. You know you have to do *something*
    to handle the tsunami of traffic on the horizon: the last thing you want is for
    the site to be down, [millions of dollars of sales slipping by](https://www.independent.co.uk/news/business/amazon-down-internet-outage-sales-b1861737.html)
    as frustrated shoppers switch to another website. [1]'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将自己置身于2005年10月的亚马逊基础设施工程师的角色中，那时[互联网泡沫](https://en.wikipedia.org/wiki/Dot-com_bubble)已过去几年，但云计算行业尚未真正起步。你知道你必须做*某些事情*来应对即将到来的流量洪峰：你最不希望的就是网站崩溃，[数百万美元的销售机会溜走](https://www.independent.co.uk/news/business/amazon-down-internet-outage-sales-b1861737.html)，因为沮丧的顾客转向了其他网站。[1]
- en: One way to handle the additional load is to *buy more computers*. (There are
    indeed [stories of early Amazon engineers](https://open.spotify.com/episode/14LmWeOMRZysw2i2vYSOuw?si=ce630660e3b44461)
    preparing for the holidays by buying the most powerful servers they could find
    and crossing their fingers!) These extra servers should indeed handle the spike
    in traffic. But when the holiday buzz ends, that extra compute will end up sitting
    around unused until the next holiday season. [2]
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 处理额外负载的一种方法是*购买更多计算机*。 (确实有[早期亚马逊工程师的故事](https://open.spotify.com/episode/14LmWeOMRZysw2i2vYSOuw?si=ce630660e3b44461)，他们在假期前购买了他们能找到的最强大的服务器，并祈祷一切顺利！)
    这些额外的服务器确实应该处理流量激增。但当假期热潮结束时，这些额外的计算资源将会闲置，直到下一个假期季节。[2]
- en: The alternative would be to *rent* compute somehow. Ideally, resources would
    **elastically** and **automatically** increase and decrease to your immediate
    needs, rather than needing to guess ahead of time. You’d abstract away the physical
    hardware, instead just dipping into a “pool” of resources.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方案是以某种方式*租用*计算资源。理想情况下，资源会**弹性地**和**自动地**根据你的即时需求增加和减少，而不需要提前猜测。你将抽象化物理硬件，而只需进入一个“资源池”。
- en: 'Amazon Web Services was born out of needs like these in the fledgling internet:
    dynamically accessing the compute resources you need, when you need them. We’ve
    [already covered](/aws-essentials-for-data-science-storage-5755afc3cb4a) one of
    their fundamental *storage* offerings: Amazon Simple Storage Service (S3), a catch-all
    Dropbox analogue for storing data. But let’s now turn to Amazon’s fundamental
    *compute* offering: **Elastic Compute Cloud.**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊网络服务（AWS）正是为了应对这些初创互联网的需求而诞生的：动态地访问你所需的计算资源。我们已经[介绍过](/aws-essentials-for-data-science-storage-5755afc3cb4a)其基础的*存储*服务：亚马逊简单存储服务（S3），这是一个类似于Dropbox的综合数据存储服务。但现在让我们转向亚马逊的基础*计算*服务：**弹性计算云**。
- en: '![](../Images/470af19619c1d5e1dc39271aa48d12e1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/470af19619c1d5e1dc39271aa48d12e1.png)'
- en: Screenshot by author
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: 'EC2: Elastic Compute Cloud'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'EC2: 弹性计算云'
- en: 'We can use **Amazon EC2** to access the fundamental building block of the cloud:
    the **virtual server**. Data centers are filled with servers, which are [logically
    partitioned](https://en.wikipedia.org/wiki/Logical_partition) into virtual servers,
    allowing multiple people to simultaneously and independently use the hardware.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**亚马逊EC2**来访问云的基本构建块：**虚拟服务器**。数据中心充满了服务器，这些服务器被[逻辑分区](https://en.wikipedia.org/wiki/Logical_partition)成虚拟服务器，允许多人同时独立使用硬件。
- en: One server could be simultaneously running simulations for a weather forecast,
    fetching data from multiple databases, sending the HTML for a dozen webpages,
    and more. Importantly, this physical server would be abstracted away from its
    users beyond the configurations of their virtual servers, letting them focus on
    their applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一台服务器可以同时运行天气预报模拟，从多个数据库中获取数据，发送十几个网页的HTML等等。重要的是，这台物理服务器对用户来说是抽象的，超出了他们虚拟服务器的配置范围，让他们能够专注于自己的应用。
- en: At AWS, virtual servers are called **EC2 instances**. Released in 2006, EC2
    was [one of Amazon’s first cloud services](https://aws.amazon.com/blogs/aws/aws-blog-the-first-five-years/)
    and has grown to be a [central component of the tech stacks](https://aws.amazon.com/ec2/customers/)
    of Netflix, Pinterest, Lyft, and many others. EC2 instances are modular and configurable,
    allowing users to optimize for compute, memory, GPU, storage, or a combination
    depending on their needs. A GPU-optimized instance could be used for training
    machine learning models, for example, while a storage-optimized instance could
    host a database.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中，虚拟服务器被称为**EC2实例**。EC2于2006年发布，是[亚马逊的首批云服务之一](https://aws.amazon.com/blogs/aws/aws-blog-the-first-five-years/)，并已成长为[Netflix、Pinterest、Lyft等众多公司技术栈的核心组件](https://aws.amazon.com/ec2/customers/)。EC2实例具有模块化和可配置性，允许用户根据需求优化计算、内存、GPU、存储或它们的组合。例如，GPU优化实例可以用于训练机器学习模型，而存储优化实例则可以托管数据库。
- en: Let’s now create an EC2 instance to take a closer look. We [log into our AWS
    account](https://aws.amazon.com/login), then navigate to EC2 from the menu of
    services. We should see something like the image below. Let’s click on the `Launch
    instance` button and begin.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来创建一个EC2实例进行更详细的了解。我们[登录到我们的AWS账户](https://aws.amazon.com/login)，然后从服务菜单中导航到EC2。我们应该会看到类似下面的图像。点击`Launch
    instance`按钮并开始。
- en: '![](../Images/443377eeee944a578b77e8c1c6b38154.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/443377eeee944a578b77e8c1c6b38154.png)'
- en: Screenshot by author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Set up
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'AMI: Amazon Machine Image'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'AMI: 亚马逊机器镜像'
- en: 'The first thing we’ll do when launching an EC2 instance is select the [**Amazon
    Machine Image**](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html).
    An AMI specifies the basic software configuration our instance: the operating
    system, [application server](https://www.gartner.com/en/information-technology/glossary/application-server),
    and applications required for your server to run. AMIs are like [Docker images](https://www.tutorialspoint.com/docker/docker_images.htm):
    **reusable templates** that let us create the exact environment we want each time.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启动EC2实例时，我们首先需要选择[**亚马逊机器镜像**](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html)。AMI指定了我们实例的基本软件配置：操作系统，[应用服务器](https://www.gartner.com/en/information-technology/glossary/application-server)和运行服务器所需的应用程序。AMI就像[Docker镜像](https://www.tutorialspoint.com/docker/docker_images.htm)：**可重用模板**，让我们每次都能创建出我们想要的精确环境。
- en: The default AMI comes with a Linux kernel optimized for EC2, [the system and
    service manager *systemd*](https://en.wikipedia.org/wiki/Systemd), [the GCC compiler](https://en.wikipedia.org/wiki/GNU_Compiler_Collection),
    and other very low-level software. We could create our own AMI if we had strong
    opinions about how to optimize for our use case. But this is an intro tutorial,
    so let’s just choose the default Amazon Linux 2 AMI.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 AMI 配备了优化用于 EC2 的 Linux 内核，[系统和服务管理器 *systemd*](https://en.wikipedia.org/wiki/Systemd)、[GCC
    编译器](https://en.wikipedia.org/wiki/GNU_Compiler_Collection)以及其他非常底层的软件。如果我们对如何优化以适应我们的用例有强烈的意见，我们可以创建自己的
    AMI。但这是一个入门教程，所以我们就选择默认的 Amazon Linux 2 AMI。
- en: '![](../Images/1d0bfcc28ce35bfb9f09c53647b09f82.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d0bfcc28ce35bfb9f09c53647b09f82.png)'
- en: Screenshot by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Instance Type
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例类型
- en: Next up is **Instance Type**, where we choose the hardware for our server. We
    won’t want to deviate from the `t2.micro` option, which is covered by the Free
    Tier. In a production setting, we could decide to optimize for **CPU** (for running
    a [wide range of system operations simultaneously](https://www.weka.io/learn/hpc/cpu-vs-gpu)),
    **GPU** (for machine learning or graphics processing), **storage** (for slow reads
    and writes of persistent data), **memory** (for [fast reads and writes of volatile
    data](https://www.backblaze.com/blog/whats-diff-ram-vs-storage/)), or some combination.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是**实例类型**，在这里我们选择服务器的硬件。我们不希望偏离`t2.micro`选项，该选项被免费套餐覆盖。在生产环境中，我们可以决定优化**CPU**（用于同时运行[各种系统操作](https://www.weka.io/learn/hpc/cpu-vs-gpu)）、**GPU**（用于机器学习或图形处理）、**存储**（用于慢速读写持久数据）、**内存**（用于[快速读写易失性数据](https://www.backblaze.com/blog/whats-diff-ram-vs-storage/)）或某种组合。
- en: We can’t change the instance type once we launch our instance, so make sure
    you don’t accidentally click [the one that charges $31.21 per hour](https://www.todayilearnedcloud.com/Amazon-EC2-How-Much-Does-The-Most-Expensive-Instance-Cost/)!
    Triple-checking that we’ve selected `t2.micro`, we can continue to the next step.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动了实例，我们无法更改实例类型，因此请确保你不要意外点击[每小时收费 31.21 美元的实例](https://www.todayilearnedcloud.com/Amazon-EC2-How-Much-Does-The-Most-Expensive-Instance-Cost/)!
    仔细检查我们是否选择了`t2.micro`，然后可以继续下一步。
- en: Key Pair
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥对
- en: We’ll now create a key pair. [AWS uses public-key cryptography](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html)
    to secure the login information for EC2 instances. Rather than a password, we’ll
    use the key pair to remotely log into our instance via [SSH](https://www.techtarget.com/searchsecurity/definition/Secure-Shell).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一对密钥。[AWS 使用公钥加密](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html)来保护
    EC2 实例的登录信息。我们将使用密钥对而不是密码，通过[SSH](https://www.techtarget.com/searchsecurity/definition/Secure-Shell)远程登录到我们的实例。
- en: We’ll click on `Create a new key pair`. We then give it a name and stick with
    the RSA and .pem defaults. (Select PuTTY if you’re using Windows.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将点击`创建新密钥对`。然后给它起个名字，并保持 RSA 和 .pem 的默认设置。（如果你使用 Windows，请选择 PuTTY。）
- en: '![](../Images/9eb6f1ec40755f4b4d36838dccedb54d.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9eb6f1ec40755f4b4d36838dccedb54d.png)'
- en: Screenshot by author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Once we click `Create key pair`, Amazon will save a public part of our key,
    and our computer will download the private key. Make sure you don’t lose this
    .pem (or .ppk) file, as we’ll use it to identify ourselves when remotely accessing
    the EC2 instance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击`创建密钥对`，Amazon 将保存密钥的公钥部分，我们的计算机将下载私钥。确保不要丢失这个 .pem（或 .ppk）文件，因为我们将用它来在远程访问
    EC2 实例时进行身份验证。
- en: Network settings
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络设置
- en: We now set the rules for how to access our EC2 instance via the internet. For
    this demo, let’s just click `Select existing security group`, then our default
    VPC ([virtual private cloud](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html)).
    If you followed along in the previous [AWS Storage post](https://medium.com/towards-data-science/aws-essentials-for-data-science-storage-5755afc3cb4a),
    you’ll have already tinkered with the inbound and outbound access rules for this
    VPC.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们设置通过互联网访问 EC2 实例的规则。对于这个演示，只需点击`选择现有的安全组`，然后选择我们的默认 VPC（[虚拟私有云](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html)）。如果你按照之前的[AWS
    存储帖子](https://medium.com/towards-data-science/aws-essentials-for-data-science-storage-5755afc3cb4a)进行了操作，你将已经调整了这个
    VPC 的入站和出站访问规则。
- en: Configure storage
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置存储
- en: We’ll leave our storage config at the default values, which are well within
    the Free Tier limits. Any data we write to our instance will be deleted once our
    demo is over; if we cared about persisting this data, we could click `Add new
    volume` to reserve an [Amazon Elastic Block Storage (EBS)](https://aws.amazon.com/ebs/)
    volume and save our data there. But let’s stick with the root volume for now.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将存储配置保持在默认值，这些值在免费层限制范围内。我们写入实例的任何数据将在演示结束后被删除；如果我们关心数据的持久性，可以点击 `Add new
    volume` 来预留一个[Amazon Elastic Block Storage (EBS)](https://aws.amazon.com/ebs/)
    卷，并将数据保存在那里。但现在我们还是使用根卷吧。
- en: Advanced details
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级细节
- en: We’ll skip this section for our demo. But this is where we can specify configurations
    like using on-demand [spot instances](https://aws.amazon.com/ec2/spot/), shutdown
    and [hibernate](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
    behavior, whether we want detailed [Amazon CloudWatch](https://aws.amazon.com/cloudwatch/)
    logs, and more.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在演示中跳过这一部分。但这里是我们可以指定配置的地方，例如使用按需[Spot 实例](https://aws.amazon.com/ec2/spot/)、关闭和[休眠](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)行为、是否需要详细的[Amazon
    CloudWatch](https://aws.amazon.com/cloudwatch/) 日志等。
- en: '![](../Images/ee21d11cb4f05e977d479d444602656c.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ee21d11cb4f05e977d479d444602656c.png)'
- en: Photo by [charlesdeluvio](https://unsplash.com/@charlesdeluvio?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[charlesdeluvio](https://unsplash.com/@charlesdeluvio?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 上的照片'
- en: Connecting to our instance
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到我们的实例
- en: Our instance will be available within a few minutes after we hit `Create`. On
    the EC2 home page, we can then click on `Instances` and see something like the
    image below.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实例将在我们点击 `Create` 后的几分钟内可用。在 EC2 首页，我们可以点击 `Instances` 并查看类似下图的内容。
- en: '![](../Images/8b47df54cb414eac6f6214a6daf1b94c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b47df54cb414eac6f6214a6daf1b94c.png)'
- en: Screenshot by author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Let’s now connect to our instance. We’ll use [**SSH**](https://www.techtarget.com/searchsecurity/definition/Secure-Shell),
    a network protocol that enables secure communication over an unsecured network
    (like the internet). Once we’ve SSH’d into our instance, we will be able to control
    the machine as if we were in a Terminal on our laptop.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们连接到实例。我们将使用[**SSH**](https://www.techtarget.com/searchsecurity/definition/Secure-Shell)，这是一种在不安全网络（如互联网）上进行安全通信的网络协议。一旦我们通过
    SSH 连接到实例，我们将能够像在笔记本电脑的终端上控制机器一样控制它。
- en: The first thing to do is **modify the instance’s security group to allow inbound
    traffic.** On our instance page, we’ll click on the `Security` tab at the bottom,
    then the link for the instance’s security group.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是 **修改实例的安全组以允许入站流量**。在我们的实例页面上，我们点击底部的 `Security` 选项卡，然后点击实例安全组的链接。
- en: '![](../Images/59c948bf7b5d0877c77e4e7f1b05c790.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59c948bf7b5d0877c77e4e7f1b05c790.png)'
- en: Screenshot by author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: On the Security Group page, click `Edit inbound rules`, then `Add rule`. Select
    **SSH** for `Type`, then **My IP** for `Source`. Finally, click `Save rules`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全组页面，点击 `Edit inbound rules`，然后点击 `Add rule`。选择 **SSH** 作为 `Type`，然后选择 **My
    IP** 作为 `Source`。最后，点击 `Save rules`。
- en: So let’s try connecting to our instance now. The command is `ssh` followed by
    the Public [IPv4 DNS](https://www.cloudns.net/blog/what-is-ipv4-everything-you-need-to-know/),
    available on the Instance page. You can also go to `Connect` > `SSH client` to
    get the address.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试连接到我们的实例。命令是 `ssh`，后跟公共[IPv4 DNS](https://www.cloudns.net/blog/what-is-ipv4-everything-you-need-to-know/)，该信息可以在实例页面找到。你也可以通过
    `Connect` > `SSH client` 来获取地址。
- en: We get a Permission denied error because we haven’t passed in our private key.
    Let’s change directories to the one with our key and try again.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遇到了权限被拒绝的错误，因为我们没有传入私钥。让我们切换到包含私钥的目录，然后再试一次。
- en: 'So far so good, but then we get another error:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利，但随后我们遇到了另一个错误：
- en: 'The error is that our private key has [permission code 644](https://chmodcommand.com/chmod-0644/),
    which means that anyone can read the file. This is the [default access level](https://www.namecheap.com/support/knowledgebase/article.aspx/400/205/file-permissions/)
    for new files, but AWS considers this too insecure: anyone with your key could
    impersonate you.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 错误是我们的私钥具有[权限代码 644](https://chmodcommand.com/chmod-0644/)，这意味着任何人都可以读取该文件。这是新文件的[默认访问级别](https://www.namecheap.com/support/knowledgebase/article.aspx/400/205/file-permissions/)，但
    AWS 认为这不够安全：任何拥有你的密钥的人都可能冒充你。
- en: So we’ll need to modify the file privacy to make it more secure. To do so, we
    use [**chmod**](https://en.wikipedia.org/wiki/Chmod) to change the read and write
    permissions of the file. Specifically, we’ll change the file so that **the only
    valid action is a read by the owner (us).** Even if someone copied our private
    key to another computer, or a different user on our network somehow found the
    key, the file wouldn’t open because that person isn’t the owner. As an additional
    precaution, we remove our write access as well.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们需要修改文件的隐私设置以增强安全性。为此，我们使用 [**chmod**](https://en.wikipedia.org/wiki/Chmod)
    来更改文件的读写权限。具体来说，我们将文件更改为 **仅允许所有者（我们）读取**。即使有人将我们的私钥复制到另一台计算机上，或网络上的其他用户以某种方式找到了密钥，文件也无法打开，因为那个人不是所有者。作为额外的预防措施，我们还移除了写权限。
- en: 'The `chmod` code for [this permission level is 400](https://chmodcommand.com/chmod-400/):
    owner can only read (`4`), security group can’t read/write/execute (`0`), and
    others can’t read/write/execute (`0`). Let’s therefore run this command in the
    Terminal:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[这个权限级别的 `chmod` 代码是 400](https://chmodcommand.com/chmod-400/): 所有者只能读取（`4`），安全组无法读取/写入/执行（`0`），其他人无法读取/写入/执行（`0`）。因此，让我们在终端中运行这个命令：'
- en: 'Now when we try to connect, we succeed:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们尝试连接时，我们成功了：
- en: We’re in! To the left of our cursor we should see something like `[ec2-user@ip-xx-xx-xx-xxx
    ~]$`, where we previously just saw `$`. Let’s now run some quick commands to explore
    the instance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进来了！在光标左侧，我们应该看到类似 `[ec2-user@ip-xx-xx-xx-xxx ~]$` 的内容，而之前我们只看到 `$`。现在让我们运行一些快速命令来探索实例。
- en: Python already comes installed, which is convenient! Let’s download a [sample
    Python file](https://raw.githubusercontent.com/mgsosna/code_samples/master/calculate_mean.py)
    from GitHub and run some basic calculations on our EC2 instance. We’ll use `curl`
    to download the file from the URL, then pass in some arguments to `calculate_mean.py`
    to get their average value.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Python 已经安装了，这很方便！让我们从 GitHub 下载一个 [示例 Python 文件](https://raw.githubusercontent.com/mgsosna/code_samples/master/calculate_mean.py)，并在我们的
    EC2 实例上运行一些基本计算。我们将使用 `curl` 从 URL 下载文件，然后传递一些参数给 `calculate_mean.py` 以获取其平均值。
- en: Let’s now train a random forest classifier on some generated data. We’ll download
    `numpy`, `pandas`, and `scikit-learn`, open Python, generate the data, then create
    the model.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在生成的数据上训练一个随机森林分类器。我们将下载 `numpy`、`pandas` 和 `scikit-learn`，打开 Python，生成数据，然后创建模型。
- en: We’ll first download the necessary libraries.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先下载必要的库。
- en: We can now run Python, generate our data, train the model, and make some predictions.
    We’ll use `np.random.normal` for the features and `np.random.choice` for the labels.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以运行 Python，生成数据，训练模型，并做出一些预测。我们将使用 `np.random.normal` 生成特征，用 `np.random.choice`
    生成标签。
- en: Ta da! You’ve (technically) trained a machine learning model in the cloud. Since
    we’ve hit the pinnacle of EC2 use cases (😜), let’s sever our SSH connection and
    terminate our instance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 呵呵！你（从技术上讲）在云端训练了一个机器学习模型。既然我们已经达到了 EC2 用例的**巅峰**（😜），让我们断开 SSH 连接并终止我们的实例。
- en: Now on our Instance page on the EC2 page, we can click on `Instance state` >
    `Terminate instance`. Note that we’ll lose our Python libraries and the `calculate_mean.py`
    file, since the instance’s data will be wiped as it’s made available for someone
    else to use. If we want to hold onto the instance a little longer, we can click
    `Stop instance` instead.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在我们的 EC2 实例页面上，我们可以点击 `Instance state` > `Terminate instance`。注意，我们将丢失我们的
    Python 库和 `calculate_mean.py` 文件，因为实例的数据将被清除，以便其他人使用。如果我们想多保留一会儿实例，可以点击 `Stop
    instance`。
- en: '![](../Images/a43a9b752dfb8c056421cbec446094cb.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a43a9b752dfb8c056421cbec446094cb.png)'
- en: Photo by [Ivan Diaz](https://unsplash.com/@ivvndiaz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Ivan Diaz](https://unsplash.com/@ivvndiaz?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供。
- en: Beyond the basics
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础之外
- en: So we just created an EC2 instance, downloaded files from the internet, and
    ran some Python code. While this is awesome, we haven’t experienced anything that
    we couldn’t run on our own laptop, which is likely more powerful than a `t2.micro`
    server. **So what value are we really getting from EC2?**
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们刚刚创建了一个 EC2 实例，从互联网上下载了文件，并运行了一些 Python 代码。虽然这很棒，但我们还没有体验到任何无法在自己的笔记本电脑上运行的东西，而
    `t2.micro` 服务器可能不如我们的笔记本电脑强大。 **那我们从 EC2 获得了什么真正的价值？**
- en: The first thing to note is that **there are a wide range of EC2 options beyond
    the Free Tier.** If we wanted to run simulations for a research paper, we could
    simply select an EC2 instance with more CPU or GPU than our laptop. This would
    get the job done more quickly, especially if we don’t have a decent computer or
    can’t dedicate all of its resources to the simulations. (It would also prevent
    damaging your own laptop, which I accidentally did in college with a horribly
    inefficient R script!)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要注意的是，**除了免费套餐之外，EC2 选项有很多种。** 如果我们想为研究论文运行模拟，我们可以简单地选择一个比我们笔记本电脑拥有更多 CPU
    或 GPU 的 EC2 实例。这将更快完成任务，特别是如果我们没有一台不错的计算机或不能将其所有资源都用于模拟的话。（这也可以防止损坏你自己的笔记本电脑，这一点我在大学里用一个非常低效的
    R 脚本时不小心做到了！）
- en: But more importantly, we need to remember that **EC2 instances are just *building
    blocks*.** For our research simulations, it may be more efficient to rent two
    or three instances and parallelize the calculations. If we’re using an EC2 instance
    to host a Flask API for our website, when traffic grows we can simply duplicate
    the instance and add a load balancer to distribute traffic. Better yet, [we can
    automatically scale](https://aws.amazon.com/ec2/autoscaling/) the number of instances
    up and down to meet demand, letting us focus more on our actual application. Q4,
    while still a demanding time for retailers, has become so much more manageable
    with cloud computing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我们需要记住，**EC2 实例只是*构建块*。** 对于我们的研究模拟，租用两个或三个实例并进行并行计算可能更高效。如果我们使用 EC2 实例来托管我们网站的
    Flask API，当流量增长时，我们可以简单地复制实例并添加负载均衡器来分配流量。更好的是，[我们可以自动调整](https://aws.amazon.com/ec2/autoscaling/)
    实例的数量以满足需求，让我们可以更多地专注于实际应用。尽管 Q4 对零售商来说仍是一个紧张时期，但借助云计算，它已经变得更加可管理。
- en: All this abstraction is a tremendous step forward from the internet of the early
    2000’s. And yet… sometimes even a virtual server isn’t flexible or scalable enough
    for our use case. In that case, we may want a “server-less” option like **Amazon
    Lambda.**
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些抽象化相较于 2000 年代初期的互联网是一个巨大的进步。然而，有时即使是虚拟服务器也可能不够灵活或可扩展以满足我们的用例。在这种情况下，我们可能需要像**Amazon
    Lambda**这样的“无服务器”选项。
- en: '![](../Images/41eb304519c31ce50d517da6fc85edd7.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41eb304519c31ce50d517da6fc85edd7.png)'
- en: Screenshot by author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Lambda
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda
- en: When is EC2 not the right choice?
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么时候 EC2 不是正确的选择？
- en: With EC2, we’re given an entire virtual server. AWS gives us incredible flexibility
    in defining what this server will look like, letting us tinker with every hardware
    and software detail imaginable. This post’s EC2 setup section for a simple demo,
    for example, was dozens of lines long!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EC2，我们会得到一个完整的虚拟服务器。AWS 在定义这个服务器的外观方面给了我们惊人的灵活性，让我们可以调整每一个硬件和软件细节。比如，本帖的
    EC2 设置部分的简单演示就有几十行！
- en: This flexibility means we can find some combination of EC2 instances that will
    meet essentially any task we can imagine. **But this puts the responsibility on
    *us* to make sure we’re configuring our instances properly.** This configuration
    may be straightforward if we’re performing a single task like training a machine
    learning model. But optimizing our resource usage becomes much more challenging
    when we’re juggling multiple instances, *especially if we have multiple instance
    types*. If our app is clunky, should we add more instances to host our database,
    fetch data from the database, or display it on the frontend? And how does this
    change as traffic to our app changes?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性意味着我们可以找到一些 EC2 实例的组合，以满足我们可以想象的任何任务。**但这就将责任落在*我们*身上，以确保我们正确配置实例。** 如果我们只执行一个任务，比如训练一个机器学习模型，这种配置可能很简单。但当我们同时处理多个实例时，优化资源使用就变得更加具有挑战性，*尤其是当我们有多种实例类型时*。如果我们的应用程序运行不畅，我们是应该增加更多实例来托管数据库、从数据库中获取数据，还是在前端展示数据？随着我们应用程序的流量变化，这种情况会如何变化？
- en: Another issue is that **our instance is only accessible while it’s running.**
    Just like how our laptop won’t respond to inputs while it’s sleeping or turned
    off, we can’t use our EC2 instance unless it’s running — ***and charging us for
    its usage.*** This is fine if we’re constantly sending requests to our instance.
    But if we expect to use our instance sporadically, then it can be expensive and
    inefficient to keep the instance running while we’re not using it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，**我们的实例只有在运行时才能访问。** 就像我们的笔记本电脑在睡眠或关闭时不会响应输入一样，除非 EC2 实例正在运行 — ***而且会对其使用收费。***
    如果我们不断向实例发送请求，这没问题。但如果我们预计会偶尔使用实例，那么在我们不使用它时保持实例运行可能会很昂贵且效率低下。
- en: What is Lambda?
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Lambda？
- en: In 2014, Amazon released [**Lambda**](https://aws.amazon.com/lambda/), pushing
    the abstraction of the cloud to a new level with ***server-less* computing**.
    In contrast to EC2, we’re given *zero* information about the machine(s) running
    our code. Our [only tunable parameter](https://aws.amazon.com/lambda/pricing/)
    is the amount of memory our code is allowed to use.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2014 年，亚马逊发布了[**Lambda**](https://aws.amazon.com/lambda/)，将云计算的抽象推向了一个新水平，提供了***无服务器计算*服务**。与
    EC2 相比，我们对运行代码的机器没有*任何*信息。我们的[唯一可调参数](https://aws.amazon.com/lambda/pricing/)是代码允许使用的内存量。
- en: Lambda executes code in response to *events* and automatically manages the underlying
    compute resources. If our code isn’t actively running on a machine, we’re not
    paying for anything. This is ideal for one-off actions like [writing user actions
    to a database](https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html)
    or [generating predictions from an ML model](https://aws.amazon.com/blogs/compute/pay-as-you-go-machine-learning-inference-with-aws-lambda/),
    but we can even build a [microservice-based web app](https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/)
    or [real-time streaming data processor](https://aws.amazon.com/blogs/compute/building-serverless-applications-with-streaming-data-part-1/).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 响应*事件*执行代码，并自动管理底层计算资源。如果我们的代码没有在机器上主动运行，我们不会支付任何费用。这非常适合像[将用户操作写入数据库](https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html)或[从
    ML 模型生成预测](https://aws.amazon.com/blogs/compute/pay-as-you-go-machine-learning-inference-with-aws-lambda/)这样的单次操作，但我们甚至可以构建一个[基于微服务的
    Web 应用](https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/)或[实时流数据处理器](https://aws.amazon.com/blogs/compute/building-serverless-applications-with-streaming-data-part-1/)。
- en: Our workflow in Lambda will involve setting up ***functions*** that we then
    *trigger* from other services. No need to stress about configuring hardware, ensuring
    its security patches are up to date, and efficiently utilizing our resources.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Lambda 中的工作流程将涉及设置***函数***，然后从其他服务中*触发*这些函数。不需要担心配置硬件、确保其安全补丁是最新的，并有效利用资源。
- en: The one major downside is that **because we don’t have a dedicated virtual server
    waiting for requests, there is a brief delay when we first begin triggering our
    functions**, as Lambda needs to find and reserve the necessary resources for us.
    Scattering our application across many Lambda functions, as opposed to one monolithic
    EC2 instance, can also **significantly increase the complexity of our app** as
    it grows. But these are often small prices to pay for the convenience of having
    the hardware completely abstracted away from us.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的主要缺点是**因为我们没有专用的虚拟服务器来等待请求，所以在第一次触发函数时会有短暂的延迟**，因为 Lambda 需要找到并预留所需的资源。将我们的应用程序分散到多个
    Lambda 函数中，而不是一个巨大的 EC2 实例，也可能**显著增加应用程序的复杂性**。但这些通常是为了完全抽象化硬件所需支付的小代价。
- en: '![](../Images/1b3fa5d106fd7f7db09ca4d12f7b570d.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b3fa5d106fd7f7db09ca4d12f7b570d.png)'
- en: Photo by [Michael Dziedzic](https://unsplash.com/es/@lazycreekimages?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Michael Dziedzic](https://unsplash.com/es/@lazycreekimages?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Creating a function
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个函数
- en: Let’s explore Lambda by setting up a function that returns the mean of a set
    of numbers. In the AWS Console, we start by navigating to the Lambda homepage.
    We then click the big orange `Create function` button. We’ll stick with the “Author
    from scratch” option, then give our function a name (`calculate_mean`) and select
    the Python 3.9 runtime. Then we scroll down and click `Create function`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过设置一个返回一组数字平均值的函数来探索 Lambda。在 AWS 控制台中，我们首先导航到 Lambda 首页。然后点击大橙色的 `Create
    function` 按钮。我们将选择“从头开始创建”选项，然后给我们的函数起个名字（`calculate_mean`）并选择 Python 3.9 运行时。接着我们向下滚动并点击
    `Create function`。
- en: '![](../Images/6edc0d09913b87a8aa2f2ccd889be463.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6edc0d09913b87a8aa2f2ccd889be463.png)'
- en: Screenshot by author
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截屏
- en: 'We’re then taken to the Lambda function page. Scrolling down to the `Code`
    tab, we see a basic template provided for our function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后被带到了 Lambda 函数页面。向下滚动到 `Code` 标签，我们可以看到为我们的函数提供的基本模板：
- en: And in the `Test` tab, we see a simple JSON input we can use to test our function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Test` 标签中，我们可以看到一个简单的 JSON 输入，供我们测试函数使用。
- en: We’ll want to change both of these for our `calculate_mean` function. Let’s
    start by changing the test input to an array of numbers like below. Give your
    test a name (e.g., `my_array`) and hit `Save`. You should see a green banner at
    the top that says, *“The test event* ***my_array*** *was successfully saved.”*
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的 `calculate_mean` 函数更改这两个内容。首先更改测试输入为下面的数字数组。给你的测试命名（例如 `my_array`），然后点击
    `保存`。你应该会看到顶部的绿色横幅，上面写着 *“测试事件* ***my_array*** *已成功保存。”*
- en: Now let’s go back to the Lambda function and change it to the code below. Specifically,
    we remove the `json` import, extract the `nums` field from `event`, and change
    the return `body` field to calculate the mean. In a production setting, we’d want
    to add error handling for empty arrays, arrays with non-numbers, etc., but this
    is fine for now. [3]
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到 Lambda 函数，并将其更改为下面的代码。具体而言，我们去掉 `json` 导入，从 `event` 中提取 `nums` 字段，并将返回的
    `body` 字段更改为计算均值。在生产环境中，我们需要添加对空数组、非数字数组等的错误处理，但现在这样就足够了。[3]
- en: Save your function (⌘ + `s`, or `File` > `Save`), then click `Deploy`. You should
    see a green banner that says, *“Successfully updated the function* ***calculate_mean****.”*
    Now hit `Test`, which should generate some logs like below. The import thing is
    that the response `body` field should be the mean of the array of numbers in your
    test file (for us 3, the mean 1 to 5).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的函数（⌘ + `s`，或 `文件` > `保存`），然后点击 `部署`。你应该会看到一条绿色横幅，上面写着 *“成功更新了函数* ***calculate_mean****。”*
    现在点击 `测试`，应该会生成一些日志，如下所示。重要的是响应的 `body` 字段应该是你测试文件中数字数组的均值（例如我们的是 3，均值为 1 到 5）。
- en: '![](../Images/46a1f470353736fca114b88dc988aac1.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/46a1f470353736fca114b88dc988aac1.png)'
- en: Screenshot by author
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Let’s try this now from the **AWS CLI**. (If you haven’t downloaded the CLI,
    you can follow [these steps](https://medium.com/towards-data-science/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284).)
    Open a Terminal window, create an input JSON file, and send the file to your Lambda
    function. Lambda will return the response as a file, `output.json` here, which
    we can then view.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们从 **AWS CLI** 尝试一下。（如果你还没有下载 CLI，可以参考 [这些步骤](https://medium.com/towards-data-science/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284)。）打开一个终端窗口，创建一个输入
    JSON 文件，并将文件发送到你的 Lambda 函数。Lambda 会将响应返回为一个文件，这里是 `output.json`，然后我们可以查看。
- en: '![](../Images/51a6712981e175dc0d601dd8dae619f1.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51a6712981e175dc0d601dd8dae619f1.png)'
- en: Photo by [Sergei Wing](https://unsplash.com/@sergeiwing?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Sergei Wing](https://unsplash.com/@sergeiwing?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Triggering via API Gateway
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 API Gateway 触发
- en: Congrats, we have a Lambda function! But we can only really interact with this
    function in the Lambda console and on our personal computer. What we really want
    is **to be able to trigger this function from anywhere.** So back in the browser,
    let’s scroll to the top of the `calculate_mean` function page, where we can see
    the triggers (and destinations) for our function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，我们有了一个 Lambda 函数！但我们只能在 Lambda 控制台和个人计算机上真正与这个函数交互。我们真正想要的是 **能够从任何地方触发这个函数**。所以回到浏览器，让我们滚动到
    `calculate_mean` 函数页面的顶部，在那里可以看到我们函数的触发器（和目标）。
- en: '![](../Images/4e12f7d7d4b3887e11c44db5065aa71c.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e12f7d7d4b3887e11c44db5065aa71c.png)'
- en: Screenshot by author
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: When we click `Add trigger`, we’re taken to a drop-down menu with an astonishing
    number of services, from [Alexa](https://aws.amazon.com/alexaforbusiness/), [AWS
    IoT](https://aws.amazon.com/iot/), and [DynamoDB](https://aws.amazon.com/dynamodb/),
    to non-AWS services like [Auth0](https://auth0.com/), [Datadog](https://www.datadoghq.com/),
    and [Shopify](https://www.shopify.com/). We could have Auth0 trigger a Lambda
    function that writes to a database whenever a user logs in, for example, or [Amazon
    SNS](https://aws.amazon.com/sns/) send us a notification any time a new file is
    uploaded to one of our S3 buckets.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击 `添加触发器` 时，我们会看到一个下拉菜单，其中包含大量服务，从 [Alexa](https://aws.amazon.com/alexaforbusiness/)、[AWS
    IoT](https://aws.amazon.com/iot/)、[DynamoDB](https://aws.amazon.com/dynamodb/)，到非
    AWS 服务如 [Auth0](https://auth0.com/)、[Datadog](https://www.datadoghq.com/)、[Shopify](https://www.shopify.com/)。例如，我们可以让
    Auth0 触发一个 Lambda 函数，在用户登录时写入数据库，或者 [Amazon SNS](https://aws.amazon.com/sns/)
    在每次新文件上传到我们的 S3 桶时发送通知。
- en: Let’s choose [**API Gateway**](https://aws.amazon.com/api-gateway/) to create
    an HTTP endpoint for our function. This will let us invoke our Lambda function
    from any code that can send an HTTP request. We’ll select `Create a new API`,
    `HTTP API` for API type, and `Open` for Security. Then click `Add`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择 [**API Gateway**](https://aws.amazon.com/api-gateway/) 为我们的函数创建一个 HTTP
    端点。这将允许我们从任何可以发送 HTTP 请求的代码中调用我们的 Lambda 函数。我们将选择 `创建一个新的 API`，选择 `HTTP API` 作为
    API 类型，然后选择 `开放` 作为安全性设置。然后点击 `添加`。
- en: '![](../Images/a99412c28775e78ff1233b680e877cd1.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a99412c28775e78ff1233b680e877cd1.png)'
- en: Screenshot by author
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: We should now see API Gateway as a trigger for our `calculate_mean` function.
    The endpoint should look something like `[https://xx.execute-api.us-east-1.amazonaws.com/default/calculate_mean](https://xx.execute-api.us-east-1.amazonaws.com/default/calculate_mean.)`[.](https://xx.execute-api.us-east-1.amazonaws.com/default/calculate_mean.)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该看到 API Gateway 作为我们 `calculate_mean` 函数的触发器。端点应该类似于 `[https://xx.execute-api.us-east-1.amazonaws.com/default/calculate_mean](https://xx.execute-api.us-east-1.amazonaws.com/default/calculate_mean.)`[.](https://xx.execute-api.us-east-1.amazonaws.com/default/calculate_mean.)
- en: If we click on the link, we’re taken to a page that just says “Internal Server
    Error.” This is because our Lambda function is configured to expect a JSON with
    the field `nums`, but our browser’s HTTP request doesn’t have this field. An easy
    way to pass in this field is as a [**query string parameter**](https://www.positly.com/support/query-string-parameters/),
    where *the URL itself* has `nums` and the array of values. So instead of `/default/calculate_mean`,
    we would have something like `/default/calculate_mean?nums=1,2,3`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击链接，我们会看到一个只显示“内部服务器错误”的页面。这是因为我们的 Lambda 函数配置为期望一个包含 `nums` 字段的 JSON，但我们浏览器的
    HTTP 请求没有这个字段。传递此字段的一种简单方法是作为 [**查询字符串参数**](https://www.positly.com/support/query-string-parameters/)，其中
    *URL 本身* 包含 `nums` 和数值数组。因此，应该是 `/default/calculate_mean?nums=1,2,3`，而不是 `/default/calculate_mean`。
- en: So let’s modify our Lambda function to accept URL parameters. We’ll add a try-except
    block, where we first try pulling the `nums` param from the query string (`event['queryStringParameters']`).
    We convert the string to a list of strings, then cast each number to float. If
    the user passes in a JSON (as we did previously), we just pull the `nums` array
    from the `event` object.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们修改我们的 Lambda 函数以接受 URL 参数。我们将添加一个 try-except 块，其中我们首先尝试从查询字符串 (`event['queryStringParameters']`)
    中提取 `nums` 参数。我们将字符串转换为字符串列表，然后将每个数字转换为浮点数。如果用户传递 JSON（如我们之前所做），我们只需从 `event`
    对象中提取 `nums` 数组。
- en: Don’t forget to save the function and deploy it. Wait a few seconds, then copy
    your API endpoint into the URL address of a new tab on your browser. Add `?nums=1,2,3`
    to the end of the URL and hit enter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记保存函数并部署它。等待几秒钟，然后将你的 API 端点复制到浏览器新标签页的 URL 地址栏中。将 `?nums=1,2,3` 添加到 URL
    末尾，然后按回车键。
- en: '![](../Images/17a73d405aedb1952cbc1ec1159f2700.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17a73d405aedb1952cbc1ec1159f2700.png)'
- en: Screenshot by author
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: 'Awesome! Let’s try one last thing. Open a Python window on your local machine
    (or your EC2, if you’re feeling fancy) and run the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！让我们再尝试最后一件事。在本地机器（或你的 EC2，如果你想要炫耀的话）上打开一个 Python 窗口，并运行以下代码：
- en: We see that we can even pass in floats via the URL string to our function, and
    that we’re able to access it from anywhere. Congrats! 🎉
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们甚至可以通过 URL 字符串传递浮点数到我们的函数，并且我们能够从任何地方访问它。恭喜！🎉
- en: '![](../Images/2af2041c1ced328260045a86ce773937.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2af2041c1ced328260045a86ce773937.png)'
- en: Photo by [Sarah Brown](https://unsplash.com/@sweetpagesco?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sarah Brown](https://unsplash.com/@sweetpagesco?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片'
- en: Cleaning up
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: Our demos are over, so let’s make sure to delete everything we created to avoid
    incurring charges. We should **start with our API endpoint, which is currently
    available for anyone on the internet to use** — if someone guesses our URL, they
    could start sending hundreds or thousands of requests per second, which we’ll
    have to pay AWS for.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的演示结束了，因此让我们确保删除我们创建的所有内容，以避免产生费用。我们应该**从我们的 API 端点开始，该端点目前对互联网用户开放**——如果有人猜到我们的
    URL，他们可能会开始每秒发送数百或数千个请求，而这些请求我们将需要为 AWS 支付费用。
- en: So let’s navigate to **API Gateway** in the AWS Console and delete our API endpoint.
    You click on the button next to `calculate_mean-API`, then `Actions` > `Delete`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们在 AWS 控制台中导航到 **API Gateway** 并删除我们的 API 端点。你点击 `calculate_mean-API` 旁边的按钮，然后选择
    `操作` > `删除`。
- en: Next up is the Lambda function. Navigate to **Lambda** in the AWS Console and
    delete the function.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是Lambda函数。导航到**Lambda**在AWS控制台中，并删除该函数。
- en: Finally, if you haven’t already, terminate your EC2 instance. Navigate to **EC2**
    in the console, stop your instance if you haven’t already, and then terminate
    it. You can also go to your security group and remove your IP address from the
    inbound traffic rules.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你还没做，请终止你的EC2实例。导航到**EC2**在控制台中，如果你还没有停止实例，请先停止，然后终止它。你还可以进入你的安全组，将你的IP地址从入站流量规则中移除。
- en: '![](../Images/e9e12f4782263c078c9cbc5773996aa8.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9e12f4782263c078c9cbc5773996aa8.png)'
- en: Photo by [Ian Stauffer](https://unsplash.com/ja/@ianstauffer?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[伊恩·斯托弗](https://unsplash.com/ja/@ianstauffer?utm_source=medium&utm_medium=referral)提供，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Conclusions
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this post, we explored two Amazon Web Services for compute: **EC2** and
    **Lambda.** We saw how **Amazon EC2 lets us reserve a virtual server with whatever
    exact configuration we’d like**, tailoring our resources to our use case. We created
    a server and SSH’d into it after modifying the read permissions of our private
    key. We then downloaded files from the internet, ran a Python script, and trained
    a classifier on some generated data.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探讨了两种计算的亚马逊网络服务：**EC2**和**Lambda**。我们看到**Amazon EC2 让我们可以预留一个具有我们所需精确配置的虚拟服务器**，根据我们的使用案例调整资源。我们创建了一个服务器，并在修改了私钥的读取权限后通过SSH连接到服务器。然后，我们从互联网下载了文件，运行了一个Python脚本，并在一些生成的数据上训练了一个分类器。
- en: We then contrasted EC2 with **AWS Lambda, Amazon’s “server-less” approach to
    compute.** We created a function for calculating the mean of an array of numbers
    and invoked the function from the console and AWS CLI. We then added an AWS API
    Gateway trigger, modified our function to take query string parameters, and called
    the function from our browser and local Python environment.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后将EC2与**AWS Lambda，亚马逊的“无服务器”计算方法**进行了对比。我们创建了一个用于计算数字数组平均值的函数，并从控制台和AWS
    CLI中调用了该函数。我们还添加了AWS API Gateway触发器，修改了函数以接受查询字符串参数，并从浏览器和本地Python环境中调用了该函数。
- en: 'Between our [intro,](/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284)
    [storage](/aws-essentials-for-data-science-storage-5755afc3cb4a), and compute
    posts, we’ve used seven fundamental services: IAM, S3, RDS, DynamoDB, EC2, Lambda,
    and API Gateway. While Amazon offers [over 200 services](https://www.aboutamazon.com/what-we-do/amazon-web-services),
    many build on these core services. With the knowledge we’ve gained in this series,
    we’re well equipped to begin leveraging the cloud for our needs.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的[介绍](/aws-essentials-for-data-science-why-cloud-computing-141cc6cee284)、[存储](/aws-essentials-for-data-science-storage-5755afc3cb4a)和计算文章中，我们使用了七项基本服务：IAM、S3、RDS、DynamoDB、EC2、Lambda和API
    Gateway。虽然亚马逊提供了[超过200项服务](https://www.aboutamazon.com/what-we-do/amazon-web-services)，许多服务建立在这些核心服务之上。通过我们在这一系列中获得的知识，我们已经做好了充分准备，可以开始利用云服务满足我们的需求。
- en: Thanks for reading!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: Best,
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 祝好，
- en: Matt
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 马特
- en: Footnotes
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: 1\. Background
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 背景
- en: 'In researching for this post, I found plenty of interesting statistics about
    how expensive it can be for a popular website to be unresponsive or unavailable.
    Some of the more interesting stats:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究这篇文章时，我发现了很多关于流行网站在不可响应或不可用时的高成本的有趣统计数据。以下是一些更有趣的统计数据：
- en: '[Taobao](https://en.wikipedia.org/wiki/Taobao), a Chinese online shopping platform,
    had a 20-minute crash during Singles’ Day in 2021 that may have cost [**several
    billion dollars**](https://queue-it.com/blog/singles-day-statistics/) in sales.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[淘宝](https://en.wikipedia.org/wiki/Taobao)，一个中国在线购物平台，在2021年双十一期间经历了20分钟的崩溃，这可能导致了[**数十亿美元**](https://queue-it.com/blog/singles-day-statistics/)的销售损失。'
- en: A webpage that loads within two seconds has an average [bounce rate](https://en.wikipedia.org/wiki/Bounce_rate)
    of 9%. That number [**jumps to 38%**](https://www.pingdom.com/blog/page-load-time-really-affect-bounce-rate/)
    when the webpage takes five seconds to load.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载时间在两秒内的网页具有平均[跳出率](https://en.wikipedia.org/wiki/Bounce_rate)为9%。当网页加载时间达到五秒时，这个数字[**跃升到38%**](https://www.pingdom.com/blog/page-load-time-really-affect-bounce-rate/)。
- en: 2\. Background
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 背景
- en: For hyper-growth early Amazon, the extra compute purchased during the holiday
    season would eventually just serve the normal business needs as the company grew.
    But for most companies, this extra compute would be a hindrance most of the year.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于处于超高速增长期的早期亚马逊来说，节假日期间购买的额外计算资源最终只是满足公司成长后的正常业务需求。但对大多数公司来说，这些额外的计算资源在大部分时间里将成为一种负担。
- en: As a side note, there’s a common narrative that AWS spun out of Amazon trying
    to utilize all this “extra compute” sitting around Q1-Q3\. They had all these
    unused servers, so why not just let customers use them? My [favorite rebuttal](https://open.spotify.com/episode/14LmWeOMRZysw2i2vYSOuw?si=ce630660e3b44461&nd=1)
    of this narrative is that when Q4 came up the following year, Amazon obviously
    couldn’t just terminate all those customers to take back their servers! Amazon
    would be stuck needing to buy a bunch more servers again.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，有一个常见的说法是 AWS 从亚马逊试图利用这些“额外的计算资源”中分拆出来的。他们有这么多未使用的服务器，那么为什么不让客户使用呢？我对这个说法的[最喜欢的反驳](https://open.spotify.com/episode/14LmWeOMRZysw2i2vYSOuw?si=ce630660e3b44461&nd=1)是，当下一年的
    Q4 到来时，亚马逊显然不能仅仅终止所有这些客户以收回他们的服务器！亚马逊将不得不再次购买大量服务器。
- en: 3\. Creating a function
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 创建函数
- en: 'We can argue whether error handling should be within the Lambda function or
    at callers to the function. There are tradeoffs: adding error handling to the
    function means the checks are in one place, reducing mental load on developers
    interacting with the function. But checks make the function heavier — they need
    to run *every* time the function is called.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以讨论错误处理是否应该在 Lambda 函数内部还是在调用函数的地方。两者各有利弊：将错误处理添加到函数中意味着检查集中在一个地方，减少了与函数交互的开发者的心理负担。但检查会让函数变得更重——它们需要在函数每次被调用时都运行。
- en: We can keep the function lightweight by having callers guarantee valid inputs.
    But enforcing this responsibility is challenging, especially if the codebase is
    large and developers don’t necessarily have the full context of the system. This
    also means there’s no standardization on what checks are run and how errors are
    communicated back to the user.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过让调用者保证有效输入来保持函数的轻量化。但强制执行这一责任是具有挑战性的，特别是当代码库很大而开发者不一定拥有系统的完整上下文时。这也意味着没有标准化的检查内容以及如何将错误反馈给用户。
- en: One intermediate option could be to have checks performed by [one Lambda function
    that then passes valid inputs to the actual function](https://stackoverflow.com/questions/31714788/can-an-aws-lambda-function-call-another).
    This increases the overall system complexity, but it allows for both reduced mental
    load on callers and a lightweight function. Ultimately, the right approach depends
    on your use case.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一个中间选项可能是由[一个 Lambda 函数来执行检查，然后将有效输入传递给实际函数](https://stackoverflow.com/questions/31714788/can-an-aws-lambda-function-call-another)。这会增加整体系统的复杂性，但它可以减少调用者的心理负担，并保持函数的轻量化。**最终**，合适的方法取决于你的使用场景。
