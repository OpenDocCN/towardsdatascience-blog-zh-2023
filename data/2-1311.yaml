- en: Implement a Cache Decorator with Time to Live Feature in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中实现具有TTL功能的缓存装饰器
- en: 原文：[https://towardsdatascience.com/implement-a-cache-decorator-with-ttl-feature-in-python-1d6969b7ca3f](https://towardsdatascience.com/implement-a-cache-decorator-with-ttl-feature-in-python-1d6969b7ca3f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/implement-a-cache-decorator-with-ttl-feature-in-python-1d6969b7ca3f](https://towardsdatascience.com/implement-a-cache-decorator-with-ttl-feature-in-python-1d6969b7ca3f)
- en: A decorator based on @functools.lru_cache supports cache expiration
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于@functools.lru_cache的装饰器支持缓存过期
- en: '[](https://qtalen.medium.com/?source=post_page-----1d6969b7ca3f--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----1d6969b7ca3f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1d6969b7ca3f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1d6969b7ca3f--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----1d6969b7ca3f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://qtalen.medium.com/?source=post_page-----1d6969b7ca3f--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----1d6969b7ca3f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1d6969b7ca3f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1d6969b7ca3f--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----1d6969b7ca3f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1d6969b7ca3f--------------------------------)
    ·5 min read·Apr 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----1d6969b7ca3f--------------------------------)
    ·5分钟阅读·2023年4月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1f1d5294aa688496b0d210d8cce05051.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f1d5294aa688496b0d210d8cce05051.png)'
- en: Photo by [Aron Visuals](https://unsplash.com/@aronvisuals?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Aron Visuals](https://unsplash.com/@aronvisuals?utm_source=medium&utm_medium=referral)拍摄的照片，刊登在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上
- en: '**The problem：**'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**问题：**'
- en: The [lru_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache)
    decorator in Python’s functools package provides an implementation based on an
    LRU cache. Using this decorator functions with the same arguments will be significantly
    faster from the second time they are executed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python的functools包中的[lru_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache)装饰器提供了基于LRU缓存的实现。使用这个装饰器，具有相同参数的函数在第二次执行时会显著更快。
- en: However, lru_cache cannot support cache expiration. If you want the cache to
    expire after a certain amount of time to update the cache when the function is
    called next time, lru_cache cannot achieve this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，lru_cache不能支持缓存过期。如果你希望缓存在一定时间后过期以便在下次调用函数时更新缓存，lru_cache无法实现这一点。
- en: '**How to solve:**'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**解决方法：**'
- en: '**1\. Implement a lru_cache with a TTL feature**'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1. 实现一个具有TTL功能的lru_cache**'
- en: Therefore, I have implemented a new decorator based on lru_cache. This decorator
    can accept a ttl parameter. This parameter can accept a time in seconds, and when
    this time expires, the next function call will return a new value and refresh
    the cache.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我实现了一个新的基于lru_cache的装饰器。这个装饰器可以接受一个ttl参数。这个参数可以接受一个秒数，当这个时间到期时，下一个函数调用将返回一个新值并刷新缓存。
- en: 'For those who need to solve the problem urgently, here is the source code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要紧急解决问题的用户，这里是源代码：
- en: 'The usage is very simple, like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非常简单，如下所示：
- en: '**2\. Test the effectiveness**'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2. 测试效果**'
- en: We use a ttl_cache with an expiration time of 40 seconds. Then let the function
    be executed for 10 rounds, each round for 6 seconds.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个ttl_cache，过期时间为40秒。然后让函数执行10轮，每轮6秒。
- en: '![](../Images/6cfc32a3fee161090bc96fba13db5242.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cfc32a3fee161090bc96fba13db5242.png)'
- en: Image by Author
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: As we can see, when it reaches the 7th round, 6*7=42 (seconds). The cache is
    refreshed, indicating that our ttl_cache is successful, hurray.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，当它达到第7轮时，6*7=42（秒）。缓存被刷新，表明我们的ttl_cache成功了，万岁。
- en: '**Some background knowledge:**'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**一些背景知识：**'
- en: '**1\. What is LRU cache?**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1. 什么是LRU缓存？**'
- en: Assuming that the size of the cache is fixed, if the cache is full, some content
    needs to be deleted to make room for new content. But the question is, which content
    should be deleted? We certainly hope to delete those caches that are not useful
    and continue to leave useful data in the cache for later use. So, what data do
    we consider “useful” data?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设缓存的大小是固定的，如果缓存已满，则需要删除一些内容以腾出空间给新内容。但问题是，应该删除哪些内容？我们当然希望删除那些无用的缓存，继续保留有用的数据以供后续使用。那么，我们如何定义“有用”的数据呢？
- en: The LRU cache strategy believes that the data that has been used recently should
    be “useful”, and the data that has not been used for a long time should be useless.
    When the capacity is full, those useless data should be deleted first.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: LRU 缓存策略认为，最近使用的数据应该是“有用的”，而长时间未使用的数据应该是无用的。当容量满时，应优先删除那些无用的数据。
- en: '**2\. How is the LRU cache implemented?**'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2\. 如何实现 LRU 缓存？**'
- en: When implementing LRU, we need to focus on its read-and-write performance.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 LRU 时，我们需要关注其读写性能。
- en: At this point, it is easy to think of using HashMap, which can achieve O(1)
    speed by accessing data according to the key. But the speed of updating the cache
    cannot reach O(1) because it needs to determine which data has been accessed the
    earliest, which requires traversing all the cache to find it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，容易想到使用 HashMap，它可以通过根据键访问数据来实现 O(1) 的速度。但更新缓存的速度无法达到 O(1)，因为需要确定哪些数据是最早被访问的，这就需要遍历所有缓存数据来查找它。
- en: Therefore, we need a data structure that both sorts by access time and can be
    randomly accessed in constant time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要一种数据结构，它不仅按访问时间排序，还能在常数时间内进行随机访问。
- en: This can be achieved by using HashMap+Doubly linked list. HashMap guarantees
    O(1) access time for data accessed through the key, and the doubly linked list
    passes through each data in the order of access time. The reason for choosing
    a doubly linked list instead of a singly linked list is that it can modify the
    linked list structure from any node in the middle, without having to traverse
    from the head node.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用 HashMap + 双向链表来实现。HashMap 保证通过键访问的数据的时间复杂度为 O(1)，而双向链表则按访问时间的顺序遍历每个数据。选择双向链表而非单向链表的原因是，它可以从链表中任意一个节点修改链表结构，而无需从头节点开始遍历。
- en: As shown in the figure below, the black part is the structure of HashMap, and
    the red arrow is the forward connection of the doubly linked list. It can be seen
    clearly that the data access order is 1->3->5->6->10\. We only need to change
    the connection order of the linked list after each access to achieve our goal.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，黑色部分是 HashMap 的结构，红色箭头是双向链表的前向连接。可以清楚地看到数据访问顺序是 1->3->5->6->10。我们只需在每次访问后更改链表的连接顺序即可实现目标。
- en: '![](../Images/429b3aa064e993defe2df425b08fe0eb.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/429b3aa064e993defe2df425b08fe0eb.png)'
- en: Image by Author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '**3\. How does this help us implement ttl_cache?**'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3\. 这如何帮助我们实现 ttl_cache？**'
- en: We know that the LRU algorithm uses HashMap to implement fast data reading,
    so we can change the parameter by changing the hash key after the expiration time
    to implement cache expiration.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 LRU 算法使用 HashMap 来实现快速的数据读取，因此我们可以通过在过期时间后更改哈希键来实现缓存过期。
- en: Since the hash key of lru_cache is calculated based on all hashable parameters
    in the decorated function, we only need to add a ttl_hash parameter and change
    the value of this parameter after the expiration time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 lru_cache 的哈希键是基于装饰函数中所有可哈希参数计算的，因此我们只需添加一个 ttl_hash 参数，并在过期时间之后更改此参数的值。
- en: '**Code interpretation:**'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**代码解释：**'
- en: '**1\. A general decorator template**'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1\. 通用装饰器模板**'
- en: 'When starting to write a decorator, I will use a decorator template code, which
    can help me write a decorator more quickly. For example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当开始编写装饰器时，我会使用装饰器模板代码，这可以帮助我更快地编写装饰器。例如：
- en: '**2\. A lazy execution generator code**'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2\. 延迟执行生成器代码**'
- en: Next, we need to generate a hash key every time the function decorated by ttl_cache
    is called, and if it has not exceeded the expiration time, this hash key should
    remain unchanged. If it exceeds the expiration time, this hash key should be different
    from the previously generated one.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要每次调用 ttl_cache 装饰的函数时生成一个哈希键，如果该哈希键未超过过期时间，则应保持不变。如果超过过期时间，则该哈希键应不同于先前生成的哈希键。
- en: Therefore, I plan to subtract the time when the code starts running from the
    current time, and then divide the result by the ttl parameter. Finally, the remainder
    is used as this hash key.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我计划将代码开始运行的时间减去当前时间，然后将结果除以`ttl`参数。最后，将余数作为此哈希键。
- en: 'Since I need to save the time when the code starts running and only get the
    latest hash key when necessary, the best way I can think of is to use a [generator
    function](https://wiki.python.org/moin/Generators):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我需要保存代码开始运行的时间，并且只在必要时获取最新的哈希键，我能想到的最佳方法是使用 [生成器函数](https://wiki.python.org/moin/Generators)：
- en: In this way, I can use the next() function to get the latest hash key when needed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我可以在需要时使用`next()`函数获取最新的哈希键。
- en: '**3\. Use lru_cache to decorate the original function**'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3. 使用 lru_cache 装饰原函数**'
- en: 'Next, we will use lru_cache to decorate the original function, and the new
    function needs to pass in a ttl_hash parameter to generate a new hash after the
    expiration time:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`lru_cache`装饰原函数，新函数需要传入`ttl_hash`参数，以便在过期时间后生成新的哈希值：
- en: In the wrapped function, we get a new hash_key every time and return a function
    call with ttl_hash to achieve our goal.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在封装的函数中，我们每次都会获得一个新的`hash_key`并返回一个带有`ttl_hash`的函数调用以实现我们的目标。
- en: '**4\. Don’t forget to copy the properties of the original function**'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4. 别忘了复制原函数的属性**'
- en: 'Finally, don’t forget to copy the module, name, doc, and other attributes of
    the original function into the newly generated function. The easiest way here
    is to use update_wrapper in the functools module:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，别忘了将原函数的模块、名称、文档及其他属性复制到新生成的函数中。这里最简单的方法是使用`functools`模块中的`update_wrapper`：
- en: '**Conclusion:**'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论：**'
- en: There are other solutions, such as [expiringdict](https://pypi.org/project/expiringdict/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他解决方案，比如 [expiringdict](https://pypi.org/project/expiringdict/)。
- en: But these solutions change the way how we use lru_cache, after all, we just
    want to make lru_cache more powerful to use.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些解决方案改变了我们使用`lru_cache`的方式，毕竟，我们只是希望使`lru_cache`更强大。
- en: The ttl_cache implemented in this article is thread-safe and can be used in
    a multi-threaded environment.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本文实现的`ttl_cache`是线程安全的，可以在多线程环境中使用。
- en: I hope you can like my implementation of the TTL cache. And welcome everyone
    to comment and provide valuable suggestions for improvement. Thank you for reading.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你喜欢我对 TTL 缓存的实现。欢迎大家评论并提供宝贵的改进建议。感谢阅读。
- en: By [joining Medium](https://medium.com/@qtalen/membership), you’ll have unlimited
    access to all of my posts and those of thousands of other authors. It only costs
    you the price of a cup of coffee, but it’s a great encouragement to me.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [加入 Medium](https://medium.com/@qtalen/membership)，你将能够无限访问我和其他成千上万位作者的所有文章。它只需你一杯咖啡的价格，但对我来说是一种很大的鼓励。
- en: 'This article was originally published on: [https://www.dataleadsfuture.com/implement-a-cache-decorator-with-time-to-live-feature-in-python/](https://www.dataleadsfuture.com/implement-a-cache-decorator-with-time-to-live-feature-in-python/)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初发布在：[https://www.dataleadsfuture.com/implement-a-cache-decorator-with-time-to-live-feature-in-python/](https://www.dataleadsfuture.com/implement-a-cache-decorator-with-time-to-live-feature-in-python/)
