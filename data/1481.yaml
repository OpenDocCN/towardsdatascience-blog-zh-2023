- en: Evolving a Data Pipeline Testing Plan
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发展数据管道测试计划
- en: 原文：[https://towardsdatascience.com/evolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9?source=collection_archive---------4-----------------------#2023-04-30](https://towardsdatascience.com/evolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9?source=collection_archive---------4-----------------------#2023-04-30)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/evolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9?source=collection_archive---------4-----------------------#2023-04-30](https://towardsdatascience.com/evolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9?source=collection_archive---------4-----------------------#2023-04-30)
- en: '**The Perils of Exhaustive Multi-Source Multi-Destination Test-Driven Development**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**穷尽多源多目的地测试驱动开发的危险**'
- en: '[](https://farmi.medium.com/?source=post_page-----3e1fc44998d9--------------------------------)[![Moussa
    Taifi PhD](../Images/ba824e71aede3ce7e9d5d73505055403.png)](https://farmi.medium.com/?source=post_page-----3e1fc44998d9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3e1fc44998d9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3e1fc44998d9--------------------------------)
    [Moussa Taifi PhD](https://farmi.medium.com/?source=post_page-----3e1fc44998d9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://farmi.medium.com/?source=post_page-----3e1fc44998d9--------------------------------)[![Moussa
    Taifi 博士](../Images/ba824e71aede3ce7e9d5d73505055403.png)](https://farmi.medium.com/?source=post_page-----3e1fc44998d9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3e1fc44998d9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3e1fc44998d9--------------------------------)
    [Moussa Taifi 博士](https://farmi.medium.com/?source=post_page-----3e1fc44998d9--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F215bedf6878d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=post_page-215bedf6878d----3e1fc44998d9---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3e1fc44998d9--------------------------------)
    ·9 min read·Apr 30, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3e1fc44998d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=-----3e1fc44998d9---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[跟随](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F215bedf6878d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9&user=Moussa+Taifi+PhD&userId=215bedf6878d&source=post_page-215bedf6878d----3e1fc44998d9---------------------post_header-----------)
    发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----3e1fc44998d9--------------------------------)
    ·9 分钟阅读·2023 年 4 月 30 日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3e1fc44998d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9&source=-----3e1fc44998d9---------------------bookmark_footer-----------)![](../Images/a3a35cf7b8442d748afe2e6beb93454c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3e1fc44998d9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fevolving-a-testing-plan-for-a-data-pipeline-3e1fc44998d9&source=-----3e1fc44998d9---------------------bookmark_footer-----------)![](../Images/a3a35cf7b8442d748afe2e6beb93454c.png)'
- en: (image by author)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （作者提供的图片）
- en: The first contact with the ideas of Test-Driven Development (TDD) leaves many
    beginner data engineers in shock at what TDD promises. Faster development, cleaner
    code, career advancement, and world domination, to name a few. Yet, the reality
    is quite different. The initial attempts at applying TDD to data engineering leave
    many data engineers demoralized. Extracting the value of TDD takes so much efforts.
    It requires a deep knowledge of testing techniques that are not in the beginner
    DE toolbelt. The process of learning “what” to test is hard. Learning the tradeoffs
    inherent to applying TDD to data pipelines is even harder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 初次接触测试驱动开发（TDD）的理念往往让许多初学者数据工程师对TDD的承诺感到震惊。更快的开发、更清洁的代码、职业晋升以及世界主导地位等，诸多好处显而易见。然而，现实却截然不同。初次尝试在数据工程中应用TDD往往令许多数据工程师感到沮丧。要提取TDD的价值需要大量的努力。这要求深入了解测试技术，而这些技术并不在初学者的工具包中。学习“什么”需要测试的过程是困难的。了解在数据管道中应用TDD所固有的权衡更加困难。
- en: In this article we look at how to evolve a data pipeline testing plan to avoid
    feeling the full pain that comes from over-specified testing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了如何演进数据管道测试计划，以避免感受到过度指定测试带来的全部痛苦。
- en: Problem
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the perils of test-driven development? For all its benefits, TDD can
    be a dangerous thing for a new data engineer. The initial drive to test everything
    is strong, and it can lead to sub-optimal design choices. Too much of a good thing,
    as they say.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发的风险是什么？尽管TDD有其好处，但对于一个新数据工程师来说，它可能是一个危险的东西。最初测试一切的冲动很强烈，这可能导致次优设计选择。正如他们所说，过犹不及。
- en: The drive to test every single part of the data pipeline is a tempting direction
    for engineering-minded folks. But in order to preserve one’s sanity, there must
    necessarily be some restraint. Otherwise, you’ll end up with a jungle of tests
    surrounded by a sea of red. And balls of mud are always not far behind.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据管道的每个部分对工程思维的人来说是一个诱人的方向。但为了保持理智，必须有一些节制。否则，你将陷入一片测试的丛林，被一片红色的海洋包围。泥巴球总是紧随其后。
- en: 'For example, say we have the following data pipeline.:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有以下数据管道：
- en: '![](../Images/34fb6d28fafbb5804e5375331bc6bd61.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34fb6d28fafbb5804e5375331bc6bd61.png)'
- en: (image by author)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: We have three data sources, six transformations, and two data destinations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个数据源，六个转换步骤和两个数据目的地。
- en: '**What would an inexperienced data engineer produce as a test plan?**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个没有经验的数据工程师会如何制定测试计划？**'
- en: We’ve all be there.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都经历过。
- en: 'Solution #1: Exhaustive Multi-Source Multi-Destination Paths with Edge Length
    > 0'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #1: 耗尽的多源多目的地路径，边长 > 0'
- en: 'Using the classic 3 part testing framework we can safely assume that our data
    engineer will start with this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用经典的三部分测试框架，我们可以安全地假设我们的数据工程师会从这里开始：
- en: '**Unit tests** ✅ : Sure take each transformation, generate some sample input
    data for each transformation, run the sample data through each step of the pipeline,
    capture the results, and use the output to validate the transformation logic.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试** ✅ : 当然，取每个转换，为每个转换生成一些样本输入数据，经过每一步骤的管道，捕获结果，并使用这些输出来验证转换逻辑。'
- en: '**E2E test** ✅ : We are gonna need to run the pipeline on full prod data anyways
    so let’s run the whole pipeline on a sample from the production data, capture
    the results and use that output to validate the end to end pipeline.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端到端测试** ✅ : 我们无论如何都需要在完整的生产数据上运行管道，所以让我们在生产数据的样本上运行整个管道，捕获结果并使用这些输出来验证端到端管道。'
- en: '**Integration tests** ❓❓❓: But what to do here? The first inclination is to
    build one test for each of the combinations of the transformation stage.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试** ❓❓❓: 那么该怎么做呢？最初的想法是为每个转换阶段的组合构建一个测试。'
- en: '![](../Images/1375333f1dc53f627a14874b99f8a77b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1375333f1dc53f627a14874b99f8a77b.png)'
- en: (image by author)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: After some back of the envelope calculation our data engineer starts internalizing
    the fact that the combination of the 6 transformation steps grows rapidly. There
    must be a better way.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些粗略计算，我们的数据工程师开始意识到6个转换步骤的组合迅速增长。必须有更好的方法。
- en: '![](../Images/494427dab35f7266f2efb324ae2305d6.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/494427dab35f7266f2efb324ae2305d6.png)'
- en: (image by author)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: Testing every single combination with edges of variable length is not gonna
    meet the deadline we promised to the customer. We should have budgeted for more
    time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 测试所有边长不同的组合无法满足我们对客户承诺的截止日期。我们应该为更多时间做预算。
- en: 'Solution #2:'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #2:'
- en: '*“OK OK, but it can’t be that bad.”*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*“好的好的，但不可能那么糟糕。”*'
- en: Yes considering that integration tests are not going to be touching real sources
    and sinks, then so be it, let’s plug these 6 transformations together. We get
    the graph combinations below. We get approximately 10 integration tests.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，考虑到集成测试不会触及真实的源和汇，那么就这样吧，让我们将这6个转换步骤连接起来。我们得到以下图形组合。我们得到大约10个集成测试。
- en: '![](../Images/d1a22164634f331b5a07cf73ac88edff.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1a22164634f331b5a07cf73ac88edff.png)'
- en: (image by author)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: But remember this is data engineering, which means that input data is out of
    our control, and changes over time. So we need to add the data-centric tests in
    there. (You surely know better but lets follow this argument).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，这涉及数据工程，这意味着输入数据不受我们的控制，并且随时间变化。所以我们需要在其中添加以数据为中心的测试。（你肯定知道得更清楚，但让我们跟随这个论点）。
- en: '![](../Images/0b707e2d18b68badfd88b9ea25f050c5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b707e2d18b68badfd88b9ea25f050c5.png)'
- en: (image by author)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: 'Solution #3:'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #3:'
- en: '*“Right but can’t we summarize this somehow, there must be a core set of data
    scenarios we need to absolutely support? Like a priority list of data validation
    things?”*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*“对，但我们不能以某种方式总结一下吗？一定有一组核心数据场景是我们必须绝对支持的？比如数据验证的优先级列表？”*'
- en: 'Sure, but even if we delay the data validation checks we still get this picture:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，但即使我们推迟数据验证检查，我们仍然会看到这个情况：
- en: '![](../Images/1385ef5c11a9dc543e248a6135b69dfb.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1385ef5c11a9dc543e248a6135b69dfb.png)'
- en: (image by author)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: '*“Do we really need this much testing? Isn’t acceptance testing about testing
    what the users sees? Can’t we sacrifice the developer experience in order to deliver
    a good product, on time, that solves the customers problem?”*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*“我们真的需要这么多测试吗？验收测试不就是测试用户看到的内容吗？我们不能为了按时交付一个解决客户问题的好产品而牺牲开发者体验吗？”*'
- en: 'Sure, yes the next logical step is to only run the e2e tests and move one with
    our lives. However, there is a middle step that solves both problems of *“too
    many integration tests”* and *“solid data validation tests”*. Your probably used
    it before but didn’t have a name for it: **“Inline assertions”**. This is a quite
    useful trick from the defensive programming tradition.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，是的，下一个逻辑步骤是只运行端到端测试并继续我们的生活。然而，还有一个中间步骤可以解决“*集成测试太多*”和“*数据验证测试固如磐石*”两个问题。你可能以前使用过但没有名字：**“内联断言”**。这是防御性编程传统中一个相当有用的技巧。
- en: 'Solution #4:'
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #4：'
- en: The core idea of these ”Inline Assertions” is that you build, when possible,
    the whole pipeline as a monolith that includes assertions about the code interfaces
    AND the data interfaces between the components of your monolith.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些“内联断言”的核心思想是，当可能时，你将整个管道作为一个整体构建，包括关于代码接口和单体组件之间数据接口的断言。
- en: '![](../Images/95c83461c67b0365f2905b90586c92cd.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95c83461c67b0365f2905b90586c92cd.png)'
- en: (image by author)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: That’s it, you put that in the red, green, refactor development loop, and keep
    growing that list of assertions as random things happen.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你将其放入红色、绿色、重构开发循环中，并随着随机事件的发生不断增加断言列表。
- en: We are running a little hot here, but notice that we are using production data
    sources, and production sinks. If you are in a bind, go for it. If you have some
    time, at least create dedicated testing sinks, and remember to put limits on the
    number of rows you get from the input data sources.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有点过热，但请注意我们使用的是生产数据源和生产接收器。如果你陷入困境，就这样做吧。如果你有时间，至少创建专门的测试接收器，并记得限制从输入数据源获取的行数。
- en: This might seem obvious to you, but we are all learning how to build data pipelines
    that solves the customers problem here :)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这对你来说可能很明显，但我们都在学习如何构建解决客户问题的数据管道 :)
- en: How would that look in the revered Testing Pyramid?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在反向测试金字塔中，这将是什么样子？
- en: '![](../Images/3b89b51ec06a237e419cf316492ed513.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b89b51ec06a237e419cf316492ed513.png)'
- en: (image by author)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: Let’s call that **DEE2E++ Testing.**
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称之为**DEE2E++ 测试**。
- en: Data Engineering End to End ++ Testing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程端到端 ++ 测试。
- en: 'There seem to be two flavors of DEE2E++ Testing:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎有两种DE2E++测试的变体：
- en: Ubiquitous Anti-Corruption Layers (U-ACL)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无处不在的反腐层（U-ACL）
- en: Mostly-Warnings Anti-Corruption Layer (MW-ACL)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数警告反腐层（MW-ACL）
- en: 'On the Ubiquitous side it looks like the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在无处不在的一侧，它看起来如下：
- en: '![](../Images/6cb69e674c656c37de883a8ac33cfd9c.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cb69e674c656c37de883a8ac33cfd9c.png)'
- en: (image by author)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: Each transformation gets one input anti-corruption layer that protects it from
    upstream changes, and one output anti-corruption layer that protects the downstream
    consumers from the current transformation’s internal changes. If something changes
    in the upstream data schema or contents, then the input ACL with stop the processing
    and report the error to the user. Then if we change something in the data schema
    or contents of the current transformation, then the output ACL will also catch
    the errors and stop the processing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个转换都有一个输入反腐层，保护它免受上游更改的影响，还有一个输出反腐层，保护下游消费者免受当前转换内部更改的影响。如果上游数据模式或内容发生变化，那么输入ACL将停止处理并向用户报告错误。如果我们更改当前转换的数据模式或内容，那么输出ACL也会捕获错误并停止处理。
- en: 'This is quite a lot of work for a starting data engineer. Adding mandatory
    validation rules on each and every transformation will push the data eng to “batch
    work”. Instead of breaking the pipeline into multiple steps, they will say to
    themselves: *“If I have to add these ACLs for each transform, that’s gonna be
    2 times the number of transformations. I might as well add just two. One at the
    top of the pipeline and one at the bottom. I’ll deal with the internals of the
    transformations on my own.”* That isa valid initial approach where the focus is
    on 1) top level ingestion logic and 2) customer-visible data outputs. The issue
    with this strategy is that we lose the benefits of tests in regards to Localizing
    bugs. If there is a bug in transformation 4 of 6 then the ACL tests will only
    show that the final output is invalid, not that transformation 4 is the culprit.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于刚入门的数据工程师来说，这确实是相当多的工作。在每个转换上添加强制的验证规则将使数据工程师陷入“批处理工作”模式。与其将管道分解为多个步骤，他们可能会对自己说：*“如果我必须为每个转换添加这些ACL，那么这将是转换数量的两倍。我还不如只添加两个，一个在管道顶部，一个在底部。我会自己处理转换的内部细节。”*
    这是一个有效的初始方法，其中重点是1) 顶层的摄取逻辑和2) 客户可见的数据输出。这个策略的问题在于，我们会失去测试在本地化错误方面的好处。如果第4个转换中有错误，那么ACL测试只会显示最终输出无效，而不会指出第4个转换是罪魁祸首。
- en: In addition, as the data sources evolve, what we are talking about here is 90%
    warnings and 10% blocking errors. Just because a new column showed up on the input
    data does not mean that the whole pipeline should fail. And just because the distribution
    mean of some column has shifted a bit does not mean that all of the data is invalid.
    Customers might still be interested in the freshest available data for making
    their business decisions and do reconciliation later if needed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，随着数据源的演变，我们在这里讨论的是90%的警告和10%的阻塞错误。仅仅因为输入数据中出现了新列，并不意味着整个管道应该失败。而仅仅因为某列的分布均值略有变化，并不意味着所有数据都是无效的。客户可能仍然对最新可用的数据感兴趣，以便做出业务决策，并在需要时进行对账。
- en: For that, you need the “Mostly-Warnings Anti-Corruption Layer”.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你需要“主要警告反腐败层”。
- en: '![](../Images/d89d19ebdef98e22c424c0419410d5aa.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d89d19ebdef98e22c424c0419410d5aa.png)'
- en: (image by author)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: It notifies the dev that there is something wrong, but does not stop the processing.
    It achieves the same role as the input and output ACLs but for each transformation.
    Also it is much more tolerant to change. This type of ACL emits warnings and metrics
    and the dev can prioritize the warnings later. If something is completely out
    of hand, the dev can backfill the data after fixing the data transformation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它通知开发人员有问题，但不会停止处理。它在每个转换中扮演着与输入和输出ACL相同的角色。此外，它对变化更加宽容。这种类型的ACL会发出警告和指标，开发人员可以稍后优先处理这些警告。如果情况完全失控，开发人员可以在修复数据转换后填充数据。
- en: Obviously, YMMV. If the current data pipeline’s output has few established human
    users, then communicating with the consumers will help the new dev learn about
    the domain. On the other hand if this pipeline has a multitude of established
    automated data pipelines that consume the output, then this DEE2E++ Testing might
    not be sufficient. However, new data devs that are starting out are probably not
    assigned on day one to business critical data pipelines that impact hundreds of
    data consumers. So, instead of forcing the new data devs to be crushed by both
    foreign testing techniques, and by mission-critical domains, the DEE2E++ method
    can be good starting point for new data devs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你的情况可能会有所不同。如果当前的数据管道输出有少量确定的人工用户，那么与这些消费者沟通将帮助新的开发人员了解领域。另一方面，如果这个管道有大量已建立的自动化数据管道来消费其输出，那么这个DEE2E++测试可能就不够了。然而，刚开始的新数据开发人员通常不会在第一天就被分配到对数百个数据消费者有影响的业务关键数据管道。因此，与其让新的数据开发人员同时被陌生的测试技术和关键任务领域压垮，不如将DEE2E++方法作为新数据开发人员的一个良好起点。
- en: Here is the DEE2E++ diagram again.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是DEE2E++图示再次呈现。
- en: '![](../Images/3b89b51ec06a237e419cf316492ed513.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b89b51ec06a237e419cf316492ed513.png)'
- en: (image by author)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: '*“Wait, Wait, Wait are you saying that each component is only gonna get a Warnings-Only
    Anti-Corruption Layer?”*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*“等一下，等一下，你是说每个组件只会得到一个仅警告的反腐败层？”*'
- en: Not “Warnings-only”, “*Mostly*-Warnings”. Some of the assertions will certainly
    stop the processing and fail the job. But yes, that’s the idea. If you do the
    “Ubiquitous Anti-Corruption Layer” strategy, then you will need more time. As
    the domain become clearer you can add stricter ACLs around critical pieces of
    the data pipeline. This domain understanding will help rank the transformations
    in terms of complexity. As you identify the complex ones that need extra care,
    you can move from the “MW-ACL”s to the “U-ACL”s to protect highly critical business
    logic for example.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 不是“仅警告”，而是“*主要*警告”。一些断言确实会停止处理并使工作失败。但这就是想法。如果你采用“普遍反腐层”策略，那么你将需要更多时间。随着领域变得更清晰，你可以在数据管道的关键部分添加更严格的ACL。这种领域理解将有助于按复杂性对变换进行排序。当你识别出需要额外关注的复杂部分时，例如，你可以从“MW-ACL”转向“U-ACL”来保护高度关键的业务逻辑。
- en: '*“I mean yes, but then why bother with the unit tests then? Aren’t they covered
    in the inline tests?”*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*“我的意思是，是的，但那为什么还要做单元测试呢？它们不是已经在内联测试中涵盖了吗？”*'
- en: Sure, fine, let’s remove them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，好吧，我们就去掉它们吧。
- en: '![](../Images/ec86ef2a608672412f295ea83954bda2.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec86ef2a608672412f295ea83954bda2.png)'
- en: (image by author)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: OK? I guess we can all go back to work now.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好了？我想我们现在可以回去工作了。
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In short, the common principles of test-driven development can be quite overpowering
    for a new data engineer. It is important to remember that TDD is a design tool,
    not a law. Use it wisely, and it will serve you well. But use it too much, and
    you’ll find yourself in a world of hurt.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，测试驱动开发的常见原则对于新数据工程师来说可能会非常压倒性。重要的是要记住，TDD 是一种设计工具，而不是法律。明智地使用它，它将对你有很大帮助。但使用过多，你会发现自己陷入困境。
- en: In this article we examined what can happen with over-specified testing. First,
    we took a seemingly simple data pipeline and saw what happens when we fall in
    the trap of :“Exhaustive Multi-Source Multi-Destination Paths”. Then we observed
    how integration tests are only the tip of the iceberg when compared to the data-centric
    tests. Finally, we found out that a good place to start for beginner data engineers
    is to focus on E2E tests with “Mostly-Warnings Anti-Corruption Layers” as inline
    tests. This DEE2E++ Testing strategy has two benefits. First, the fresh data engineer
    will not give up on testing from day 1\. Second, it gives the devs breathing room
    to learn about the domain and iterate their data pipeline design using their existing
    basic knowledge of data engineering. Instead of immediately getting lost in the
    micro-level of TDD, they can deliver working software to the stakeholders, and
    then build on the protection that DEE2E++ Testing provides to add more fine grained
    tests as the requirements evolve.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探讨了过度指定测试可能会发生的情况。首先，我们以一个看似简单的数据管道为例，看到当我们陷入“详尽的多源多目标路径”时会发生什么。然后，我们观察到与数据中心测试相比，集成测试只是冰山一角。最后，我们发现，初学者数据工程师的一个良好起点是将“主要警告反腐层”作为内联测试的E2E测试。这种DEE2E++测试策略有两个好处。首先，初学的数据工程师不会从第一天起就放弃测试。其次，它给开发人员提供了学习领域知识的余地，并利用他们现有的数据工程基础知识迭代他们的数据管道设计。与其立即陷入TDD的微观层面，不如向利益相关者交付工作中的软件，然后利用DEE2E++测试提供的保护，随着需求的演变，添加更细粒度的测试。
- en: So there you have it. The perils of test-driven development. May you all avoid
    them, and may your data pipelines be ever green.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你们看到了。测试驱动开发的危险。愿你们都能避免这些危险，愿你们的数据管道常绿。
- en: Want to learn more about modern data pipelines testing techniques?
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想了解更多关于现代数据管道测试技术的信息吗？
- en: Checkout my latest book on the subject. This book gives a visual guide to the
    most popular techniques for testing modern data pipelines.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我关于这个主题的最新书籍。这本书为测试现代数据管道的最流行技术提供了视觉指南。
- en: '2023 Book link:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年书籍链接：
- en: '***Book link:*** [***Modern Data Pipelines Testing Techniques***](https://leanpub.com/moderndatapipelinestestingtechniques/)*on
    leanpub.*'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***书籍链接：*** [***现代数据管道测试技术***](https://leanpub.com/moderndatapipelinestestingtechniques/)*在
    leanpub 上。*'
- en: See ya!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再见！
- en: '**Disclaimer:** The views expressed on this post are mine and do not necessarily
    reflect the views of my current or past employers.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明：** 本文表达的观点仅代表我个人，未必反映我当前或过去雇主的观点。'
