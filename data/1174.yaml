- en: 'Understanding SQL: Order of Execution'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SQL：执行顺序
- en: 原文：[https://towardsdatascience.com/understanding-sql-order-of-execution-ba2b4e558828?source=collection_archive---------13-----------------------#2023-04-03](https://towardsdatascience.com/understanding-sql-order-of-execution-ba2b4e558828?source=collection_archive---------13-----------------------#2023-04-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understanding-sql-order-of-execution-ba2b4e558828?source=collection_archive---------13-----------------------#2023-04-03](https://towardsdatascience.com/understanding-sql-order-of-execution-ba2b4e558828?source=collection_archive---------13-----------------------#2023-04-03)
- en: A brief guide on how databases interpret your SQL queries
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于数据库如何解释你的 SQL 查询的简要指南
- en: '[](https://medium.com/@dataforyou?source=post_page-----ba2b4e558828--------------------------------)[![Rob
    Taylor, PhD](../Images/5e4e86da7b77404ed42d00a60ea5eacf.png)](https://medium.com/@dataforyou?source=post_page-----ba2b4e558828--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba2b4e558828--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba2b4e558828--------------------------------)
    [Rob Taylor, PhD](https://medium.com/@dataforyou?source=post_page-----ba2b4e558828--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@dataforyou?source=post_page-----ba2b4e558828--------------------------------)[![Rob
    Taylor, PhD](../Images/5e4e86da7b77404ed42d00a60ea5eacf.png)](https://medium.com/@dataforyou?source=post_page-----ba2b4e558828--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba2b4e558828--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba2b4e558828--------------------------------)
    [Rob Taylor, PhD](https://medium.com/@dataforyou?source=post_page-----ba2b4e558828--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F98de080592fc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-order-of-execution-ba2b4e558828&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=post_page-98de080592fc----ba2b4e558828---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba2b4e558828--------------------------------)
    ·7 min read·Apr 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fba2b4e558828&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-order-of-execution-ba2b4e558828&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=-----ba2b4e558828---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F98de080592fc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-order-of-execution-ba2b4e558828&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=post_page-98de080592fc----ba2b4e558828---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba2b4e558828--------------------------------)
    ·7 min 阅读·2023年4月3日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fba2b4e558828&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-order-of-execution-ba2b4e558828&user=Rob+Taylor%2C+PhD&userId=98de080592fc&source=-----ba2b4e558828---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fba2b4e558828&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-order-of-execution-ba2b4e558828&source=-----ba2b4e558828---------------------bookmark_footer-----------)![](../Images/ece046668873e9586d438d6fc8a35928.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fba2b4e558828&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstanding-sql-order-of-execution-ba2b4e558828&source=-----ba2b4e558828---------------------bookmark_footer-----------)![](../Images/ece046668873e9586d438d6fc8a35928.png)'
- en: Photo by [Wengang Zhai](https://unsplash.com/@wgzhai?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Wengang Zhai](https://unsplash.com/@wgzhai?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Writing efficient SQL queries is an essential skill for any data analyst working
    with large volumes of data. I’m sure many of us have endured the pain of having
    developed a query that runs well on small scales, only to have it slowly grind
    out the results when applied to a much larger dataset.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编写高效的 SQL 查询是处理大数据量的任何数据分析师必备的技能。我相信我们中的许多人都经历过这样的痛苦：在小规模数据上运行良好的查询，应用到大规模数据集时却慢得令人抓狂。
- en: Oftentimes, query performance can be significantly improved by simply understanding
    how a database *interprets* the query. Not only will this help you optimize queries
    for speed and performance, but it will also help debug and troubleshoot erroneous
    scripts.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，通过简单了解数据库是如何*解析*查询的，可以显著提高查询性能。这不仅有助于优化查询速度和性能，还能帮助调试和解决错误的脚本。
- en: So today, I’m going to step you through the order in which a SQL query is executed
    and touch on some common errors that arise when building queries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以今天，我将带你了解 SQL 查询的执行顺序，并讨论构建查询时出现的一些常见错误。
- en: Declarative vs. Procedural Languages
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明式与过程式语言
- en: First, it’s important to understand that SQL is a *declarative* programming
    language. This means that we define the result we want but provide no instruction
    on *how* it is achieved. This contrasts with *imperative*, or *procedural*, languages
    that require each step to produce the output to be explicitly defined. The implication
    of working with a declarative language like SQL is that, while SQL expects statements
    to be written in a specified order, the sequence in which the statements are evaluated
    *differs*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要了解 SQL 是一种*声明式*编程语言。这意味着我们定义所需的结果，但不提供*如何*实现它的指令。这与*命令式*或*过程式*语言形成对比，这些语言要求每一步产生输出的过程都必须明确指定。使用像
    SQL 这样的声明式语言的含义是，虽然 SQL 期望语句按照特定顺序编写，但语句的评估*顺序*会有所不同。
- en: 'To demonstrate, here is the list of the seven common clauses used when building
    SQL queries and the order they should be used in:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，以下是构建 SQL 查询时常用的七个子句及其使用顺序的列表：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now compare this with the *order of execution*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将其与*执行顺序*进行比较：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, the statements have been shuffled around a bit. For example,
    note that while the SELECT clause is *written* first it is much lower down the
    list when it comes to execution. As we’ll see shortly, it’s the order of execution
    that matters most and is something an analyst must be keenly aware of.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，语句已经有些打乱。例如，注意到虽然 SELECT 子句*写在*第一位，但在执行时它的位置要低得多。正如我们将很快看到的，执行顺序是最重要的，这是分析师必须特别注意的。
- en: The FROM Clause
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FROM 子句
- en: Naturally, the database needs to know where data is coming from so this is a
    logical first step. While simpler queries might only reference a single table,
    more often the information you need exists across several tables. Accordingly,
    the JOIN statement is used in conjunction with FROM to combine source tables.
    If a join is required then the first thing the database will do is bring everything
    together.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，数据库需要知道数据的来源，因此这是一个逻辑上的第一步。虽然较简单的查询可能只涉及一个表，但通常情况下，所需的信息存在于多个表中。因此，JOIN 语句与
    FROM 语句一起使用，以合并源表。如果需要进行联接，则数据库首先会将所有内容汇集在一起。
- en: This means that you should think about the size of the source tables, the type
    of join used, and the number of predicates used in the join. For example, reducing
    the size of source tables by selecting only the necessary columns, filtering out
    unnecessary rows, and ensuring there are common identifiers to complete the join,
    will all improve efficiency. Additionally, INNER JOINs should be preferred over
    OUTER JOINs as the former are generally faster.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你应该考虑源表的大小、使用的联接类型以及联接中使用的谓词数量。例如，通过仅选择必要的列、筛选掉不必要的行，并确保有共同的标识符以完成联接，来减少源表的大小，这将提高效率。此外，INNER
    JOIN 应优先于 OUTER JOIN，因为前者通常更快。
- en: Ultimately, you don’t want to process data that isn’t needed so minimizing the
    set to work with should be a primary objective, as much as possible.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你不希望处理不必要的数据，因此将处理的数据集最小化应该是主要目标，尽可能做到这一点。
- en: The WHERE Clause
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WHERE 子句
- en: 'This clause is used to filter a base table, or joined output, by retuning only
    those rows that meet a given condition. Any supported data type can be used to
    filter records. For example, consider the table below which lists a small number
    of Commonwealth cities, along with their populations:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该子句用于通过仅返回满足给定条件的行来筛选基本表或联接输出。可以使用任何支持的数据类型来过滤记录。例如，考虑下表，它列出了少量英联邦城市及其人口：
- en: '![](../Images/04f1f103d0beeb10dc6ede0f9113a6ff.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04f1f103d0beeb10dc6ede0f9113a6ff.png)'
- en: A small example table called ‘cities’ (image by author).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为‘cities’的小示例表（作者图片）。
- en: 'If we were to filter this table down to only those cities in New Zealand we
    could write the following query, for example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要将这个表过滤到只包含新西兰的城市，我们可以写出如下查询：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'which would return the rows containing Auckland, Christchurch, and Wellington.
    Alternatively, if we wanted to return all cities that have a population larger
    than half a million then the query would look like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回包含奥克兰、基督城和惠灵顿的行。或者，如果我们想返回所有人口超过五十万的城市，那么查询将是这样的：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We could also combine these filters using the AND operator, which would return
    Auckland only:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 AND 操作符组合这些过滤条件，这样只会返回奥克兰：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One important thing to remember about the WHERE clause is that it *cannot*
    be used to filter aggregated columns. For example, take a look at the modified
    query below:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 WHERE 子句，有一个重要的事情需要记住，那就是它*不能*用于过滤聚合列。例如，看看下面修改后的查询：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The intent of the above query is to obtain all countries where the combined
    city population is larger than 5 million. Unfortunately, this query will fail
    because an aggregation function has been used in the WHERE statement. The issue
    is that aggregation functions require the GROUP BY clause which is executed *after*
    the WHERE clause. This means the WHERE condition cannot be evaluated because the
    database is not yet aware of any aggregated variables.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询的意图是获取所有城市总人口超过 500 万的国家。不幸的是，这个查询会失败，因为在 WHERE 语句中使用了聚合函数。问题在于聚合函数需要 GROUP
    BY 子句，而 GROUP BY 子句是在 WHERE 子句*之后*执行的。这意味着 WHERE 条件无法被评估，因为数据库尚未知道任何聚合变量。
- en: We’ll see how to remedy this shortly, but before we do let’s quickly touch on
    the GROUP BY clause.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将很快看到如何解决这个问题，但在此之前，让我们快速了解一下 GROUP BY 子句。
- en: The GROUP BY Clause
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GROUP BY 子句
- en: 'As you’ve probably recognized, this clause allows us to aggregate, or summarise,
    a quantity and is used in combination with functions such as COUNT(), SUM(), MIN(),
    MAX(), and the like. In effect, GROUP BY collapses the variable, or variables,
    and returns a single value for each distinct element, or combination of elements.
    For example, if we wanted to tally the city populations for each country, we can
    group them by country like so:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经识别的，这个子句允许我们聚合或汇总数量，并与 COUNT()、SUM()、MIN()、MAX() 等函数结合使用。实际上，GROUP BY
    将变量或变量组折叠，并为每个不同的元素或元素组合返回一个单一的值。例如，如果我们想统计每个国家的城市人口，我们可以按国家分组，如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output will then return four rows — one for each country — along with the
    aggregated population for each country listed in the table.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将返回四行 —— 每个国家一行 —— 以及表中列出的每个国家的聚合人口。
- en: The HAVING Clause
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HAVING 子句
- en: 'This clause solves the problem encountered earlier when trying to filter using
    an aggregation function with the WHERE clause. The HAVING clause allows us to
    filter results using grouped and aggregated data because it is executed *after*
    the GROUP BY statement. The database is now aware of the aggregations meaning
    they can be used in all statements that follow. We can now amend the earlier query
    like so:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个子句解决了之前尝试使用聚合函数进行过滤时遇到的问题，即 WHERE 子句。HAVING 子句允许我们使用分组和聚合的数据进行结果过滤，因为它是在 GROUP
    BY 语句*之后*执行的。数据库现在已经知道了这些聚合，这意味着它们可以在所有后续的语句中使用。我们现在可以像这样修改之前的查询：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will return just two countries: Australia and England.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只返回两个国家：澳大利亚和英国。
- en: The SELECT Clause
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SELECT 子句
- en: The SELECT clause is where we define the columns we want in our table, along
    with any grouped and aggregated fields. This is also where we can apply *column
    aliases* using the AS operator. Now, while the select statement comes first when
    building our queries, it isn’t executed until the data have been sourced and filtered.
    This is important to recognize because what this means is that aggregated variables
    and aliases *cannot* be used in WHERE, GROUP BY, or HAVING statements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT 子句是我们定义所需列的地方，同时还包括任何分组和聚合字段。这也是我们可以使用 AS 操作符应用*列别名*的地方。现在，虽然 select
    语句在构建查询时排在首位，但它不会在数据被源化和过滤后执行。这一点很重要，因为这意味着聚合变量和别名*不能*在 WHERE、GROUP BY 或 HAVING
    语句中使用。
- en: For example, consider the following query that creates a column alias **total_pop**
    which is then used with the HAVING clause. This query will throw an error because
    the alias has not yet been created. The HAVING clause *precedes* the SELECT clause
    so there is nothing called **total_pop** toreference**.**
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下查询，它创建了一个列别名**total_pop**，然后在HAVING子句中使用。这个查询会抛出错误，因为别名尚未创建。HAVING子句*位于*
    SELECT子句之前，因此没有名为**total_pop**的引用**。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I won’t go into detail on these, but the DISTINCT and UNION statements are executed
    *after* SELECT and *before* the ORDER BY clause, with DISTINCT executed before
    UNION.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细讲解这些内容，但DISTINCT和UNION语句是在SELECT之后*执行*，在ORDER BY子句之前执行，其中DISTINCT在UNION之前执行。
- en: The ORDER BY Clause
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORDER BY 子句
- en: We’re now reaching the end and much of the heavy lifting has been done. We have
    sourced (and possibly joined) tables, applied some filtering, grouped and aggregated
    some fields, and specified the columns we want to be included in our final table.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在接近尾声，许多重要的工作已经完成。我们已经来源（并可能联接）了表，应用了一些过滤，分组并汇总了一些字段，并指定了我们希望在最终表中包含的列。
- en: At this point, you’re likely thinking about how you want the data arranged in
    the target table. For example, you might have rows ordered chronologically, or
    perhaps ordered based on some ranking value. This is precisely what the ORDER
    BY clause does.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能会考虑你希望目标表中数据的排列方式。例如，你可能希望按时间顺序排列行，或者基于某些排名值进行排序。这正是ORDER BY子句的作用。
- en: 'The nice about this statement is that, because it’s at the backend of the order,
    we can use aggregations and column aliases in our GROUP BY statements. For example,
    suppose we wanted to order country by total city population. We could write a
    query like the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句的好处在于，因为它位于排序的后端，我们可以在GROUP BY语句中使用聚合和列别名。例如，假设我们想按城市总人口对国家进行排序。我们可以编写如下查询：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note here that we can use the column alias **total_pop** in the ORDER BY statement.
    By default, this will return records in ascending order (i.e., smallest to largest).
    To return the rows in descending order we can use the DESC operator like so:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以在ORDER BY语句中使用列别名**total_pop**。默认情况下，这将按升序返回记录（即从小到大）。要按降序返回行，我们可以使用DESC运算符，如下所示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The LIMIT Clause
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LIMIT 子句
- en: 'When dealing with large tables it’s often not optimal to have the query return
    all rows, particularly when you’re only developing and testing. The LIMIT clause
    is exceedingly useful here and allows us to define the number of rows we want
    back. It’s also used in combination with the ORDER BY clause to return the *n*-top
    or *n*-bottom records. For example, suppose we wanted the top three most populous
    cities in the table. We could use the ORDER BY and LIMIT clauses as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大型表时，通常不建议让查询返回所有行，特别是在你仅进行开发和测试时。LIMIT子句在这里非常有用，允许我们定义希望返回的行数。它也可以与ORDER
    BY子句结合使用，以返回*前n*或*后n*条记录。例如，假设我们想要表中人口最多的前三个城市。我们可以如下使用ORDER BY和LIMIT子句：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that not all databases support the LIMIT statement, but they will have
    equivalents that perform a similar function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库都支持LIMIT语句，但它们会有执行类似功能的等效语句。
- en: Wrapping Up
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The order in which statements are executed is an important concept to grasp
    when building SQL queries, and we’ve touched on some common gotchas that can occur.
    Though I haven’t provided in-depth examples I hope this brief little primer gets
    you thinking about how to improve your query performance, and if you’re just starting
    out with SQL, I hope this article helps you along your journey.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 语句执行的顺序是构建SQL查询时需要掌握的重要概念，我们已经触及了一些常见的陷阱。虽然我没有提供详细的示例，但我希望这个简短的入门介绍能让你思考如何提高查询性能。如果你刚刚开始接触SQL，希望这篇文章能帮助你在学习的旅程中前进。
- en: Thanks for reading!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: If you enjoyed this post and would like to stay up to date then please consider
    [following me on Medium.](https://medium.com/@dataforyou) This will ensure you
    don’t miss out on any new content.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章并希望保持更新，请考虑[关注我在Medium上的账号。](https://medium.com/@dataforyou) 这将确保你不会错过任何新内容。
- en: To get unlimited access to all content consider signing up for a [Medium subscription](https://medium.com/membership).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得所有内容的无限访问权，请考虑订阅[Medium](https://medium.com/membership)。
- en: You can also follow me on [Twitter](https://twitter.com/dataforyounz), [LinkedIn](https://www.linkedin.com/in/dataforyou/),
    or check out my [GitHub](https://github.com/dataforyounz) if that’s more your
    thing 😉
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 [Twitter](https://twitter.com/dataforyounz)、[LinkedIn](https://www.linkedin.com/in/dataforyou/)
    上关注我，或者查看我的 [GitHub](https://github.com/dataforyounz)，如果你更喜欢这样的话 😉
