- en: 'Google Foobar Challenge: Level 3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Google Foobar Challenge: Level 3'
- en: 原文：[https://towardsdatascience.com/google-foobar-challenge-level-3-f487fa3f204b](https://towardsdatascience.com/google-foobar-challenge-level-3-f487fa3f204b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/google-foobar-challenge-level-3-f487fa3f204b](https://towardsdatascience.com/google-foobar-challenge-level-3-f487fa3f204b)
- en: Exploring binary numbers, dynamic programming, and Markov chains
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索二进制数字、动态编程和马尔可夫链
- en: '[](https://medium.com/@katyhagerty19?source=post_page-----f487fa3f204b--------------------------------)[![Katy
    Hagerty](../Images/7a4471c602063df015a289c1c343ca4e.png)](https://medium.com/@katyhagerty19?source=post_page-----f487fa3f204b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f487fa3f204b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f487fa3f204b--------------------------------)
    [Katy Hagerty](https://medium.com/@katyhagerty19?source=post_page-----f487fa3f204b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@katyhagerty19?source=post_page-----f487fa3f204b--------------------------------)[![凯蒂·哈格提](../Images/7a4471c602063df015a289c1c343ca4e.png)](https://medium.com/@katyhagerty19?source=post_page-----f487fa3f204b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f487fa3f204b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f487fa3f204b--------------------------------)
    [凯蒂·哈格提](https://medium.com/@katyhagerty19?source=post_page-----f487fa3f204b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f487fa3f204b--------------------------------)
    ·9 min read·Nov 30, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f487fa3f204b--------------------------------)
    ·9分钟阅读·2023年11月30日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a0ec52c11538eee31caf7d77a54e6431.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0ec52c11538eee31caf7d77a54e6431.png)'
- en: Photo by [Rajeshwar Bachu](https://unsplash.com/@rajeshwerbatchu7?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 [Rajeshwar Bachu](https://unsplash.com/@rajeshwerbatchu7?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: What is the Foobar Challenge? 🧐
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Foobar挑战是什么？ 🧐
- en: The Foobar Challenge is a coding challenge hosted by Google that can be completed
    in either Python or Java. I completed the challenge using Python. The challenge
    has its own server with specific, terminal-style commands. The problems are of
    various difficulty organized into 5 levels. Each question must be solved within
    a certain time limit. More time is given for the higher levels.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Foobar挑战是由Google主办的编码挑战，可以用Python或Java完成。我用Python完成了挑战。这个挑战有自己专属的服务器，使用特定的终端风格命令。问题的难度各异，共分为5个级别。每个问题必须在一定时间限制内解决。较高级别的挑战会给予更多时间。
- en: To read more about the Foobar Challenge, I recommend reading my previous article,
    which provides an overview and a break-down of the Level 1 problem.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Foobar挑战的信息，我推荐阅读我之前的文章，其中提供了对第1级问题的概述和分析。
- en: '[](/google-foobar-challenge-level-1-3487bb252780?source=post_page-----f487fa3f204b--------------------------------)
    [## Google Foobar Challenge: Level 1'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/google-foobar-challenge-level-1-3487bb252780?source=post_page-----f487fa3f204b--------------------------------)
    [## Google Foobar Challenge: Level 1'
- en: An intro to the secretive coding challenge and a breakdown of the problems
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对神秘编码挑战的介绍以及问题的分析
- en: towardsdatascience.com](/google-foobar-challenge-level-1-3487bb252780?source=post_page-----f487fa3f204b--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/google-foobar-challenge-level-1-3487bb252780?source=post_page-----f487fa3f204b--------------------------------)
- en: Level 3 is where it started to get serious. Levels 1 and 2 tested the basics
    and took about 15 minutes to solve. Level 3 tested problem-solving skills and
    required hours of research. Unlike the prior levels, I didn’t immediately know
    how to solve these problems. I had to read the questions a few times and work
    out test cases on paper. Also, I had to research and practice some new concepts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第3级开始变得严肃起来。第1级和第2级测试了基础知识，大约需要15分钟解决。第3级测试了问题解决技能，需要几个小时的研究。与之前的级别不同，我没有立即知道如何解决这些问题。我不得不多次阅读问题并在纸上进行测试。此外，我还需要研究和实践一些新的概念。
- en: Research doesn’t mean Googling the problem name and looking at other people’s
    solutions. Instead, I tried to rephrase the question or search for phrases that
    seemed oddly specific to find relevant equations and models.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 研究并不意味着仅仅通过Google搜索问题名称并查看其他人的解决方案。相反，我尝试重新表述问题或搜索那些看起来特别具体的短语，以找到相关的方程和模型。
- en: At first, I was little hesitant. Was Google tracking my search history? Would
    they consider this as cheating? However, as I progressed in the level, I realized
    *these problems were mostly likely intended to force to you to look at outside
    material*. I highly doubt Google expects developers to memorize Markov Chain formulas.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我有些犹豫。谷歌会跟踪我的搜索记录吗？他们会认为这是一种作弊吗？然而，随着我在这一关卡的进展，我意识到*这些问题很可能是为了迫使你查看外部材料*。我非常怀疑谷歌会期望开发者记住马尔可夫链公式。
- en: As you work through the problems, I encourage you research unfamiliar concepts
    especially if your solution becomes long and unstructured. These problems were
    designed to have elegant solutions. ***If you can’t think of an elegant way to
    solve the problem, that’s a clue that there is probably a formula or method that
    will simplify it****.* Remember, part of coding is researching the best methods.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你解决这些问题时，我鼓励你研究不熟悉的概念，尤其是当你的解决方案变得冗长和不结构化时。这些问题的设计目的是为了找到优雅的解决方案。***如果你想不出一种优雅的解决方法，那说明可能存在某个公式或方法能简化它***。记住，编码的一部分是研究最佳的方法。
- en: Questions & Concepts 📚
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题与概念 📚
- en: Warning — Spoilers Ahead ⛔️
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警告 — 含有剧透 ⛔️
- en: Below, I break down the questions and explain my thought process. I also provide
    solutions. However, ***I highly recommend you attempt the problem first***. The
    best part of the challenge is the surprise and satisfaction of solving an elusive
    problem.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我将详细讲解这些问题并解释我的思考过程。我也提供了解决方案。不过，***我强烈建议你先尝试解决这个问题***。挑战中最好的部分就是解决一个难以捉摸的问题所带来的惊喜和满足感。
- en: I debated not posting solutions and just explaining the underlying concepts.
    However, part of coding is learning how to troubleshoot and pinpointing where
    the code fails. Thus, I decided to post solutions so that if you’re stuck, you
    can see exactly where your logic diverges.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾考虑不发布解决方案，仅仅解释基础概念。然而，编码的一部分是学习如何排查故障和定位代码失败的地方。因此，我决定发布解决方案，以便当你卡住时，可以准确看到你的逻辑在哪里偏离了正确的路径。
- en: 'Level 3: Problem 1'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3关：问题1
- en: Out of all the problems in Level 3, this was the hardest for me. I worked through
    a lot of examples on paper. The requirement to handle a 309 digit-long number
    seemed like a hint to try to solve this using binary numbers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3关的所有问题中，这对我来说是最困难的。我在纸上做了很多示例。处理一个309位长的数字的要求似乎暗示着尝试用二进制数来解决这个问题。
- en: The objective of the problem is to reach one pellet with the fewest actions.
    The most efficient action is halving the pellets because then, `n` will decay
    exponentially.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的目标是用最少的操作达到一个弹珠。最有效的操作是将弹珠对半分，因为这样`n`会呈指数级衰减。
- en: '![](../Images/0105e2e38189cfdc0617a7e1d51cf47f.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0105e2e38189cfdc0617a7e1d51cf47f.png)'
- en: Image by author.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: However, perfect exponential decay only works if `n` is a power of 2\. If not,
    eventually `n` will reduce to an odd number and cannot be halved. In those cases,
    is it better to add 1 or subtract 1? The best action is whichever one results
    in a number that can be halved the most. Luckily, the binary form provides that
    information. The number of trailing zeros in a binary number is how many times
    a number can be divided by 2.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，完美的指数衰减仅在`n`是2的幂时有效。如果不是，`n`最终将减少到一个奇数，并且不能被除以2。在这种情况下，是加1还是减1更好？最佳的操作是使数字可以被最多次地除以2的那个选项。幸运的是，二进制形式提供了这些信息。一个二进制数中的尾随零的数量就是一个数字可以被2除以多少次。
- en: 'For example, consider `n = 15` as shown below. The two series illustrate the
    two options for the first action: adding 1 (`n = 16`) and subtracting 1 (`n =
    14`). Even though 14 is closer to the desired final state of 1, 16 is the better
    option because it can be halved more. As you can see on the right graph, the number
    of trailing zeros in the binary form corresponds to how many times a number can
    be halved.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑`n = 15`，如下所示。这两个序列说明了第一步的两个选项：加1（`n = 16`）和减1（`n = 14`）。尽管14离期望的最终状态1更近，但16是更好的选择，因为它可以被更多次地除以2。正如你在右侧图表上看到的，二进制形式中的尾随零的数量对应于一个数字可以被除以2的次数。
- en: '![](../Images/2af017fb2627430f0c3bd19d75f99eb2.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2af017fb2627430f0c3bd19d75f99eb2.png)'
- en: Image by author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: To solve the problem, I first converted the input string (`n`) to binary (`b`)
    using the built-in `bin` function. I used a while loop to reduce to `b` until
    it reached 1\. If `b` is even, I halve it by removing a trailing zero. Halving
    `b` as much as possible will minimize the total number of actions. If `b` is odd,
    I choose the nearest neighboring integer with the most trailing zeros.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我首先使用内置的`bin`函数将输入字符串(`n`)转换为二进制(`b`)。我使用了一个while循环将`b`减少到1。如果`b`是偶数，我通过去掉尾部零来将其减半。尽可能多地将`b`减半将最小化总操作次数。如果`b`是奇数，我选择具有最多尾部零的最近邻整数。
- en: As mentioned, the quantity of trailing zeros indicates the how many times a
    given number is divisible by two. Numbers with more trailing zeros are prioritized
    because they allow more halving. In other words, the number with the most trailing
    zeros provides the most the efficient way to 1.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，尾部零的数量表示一个给定的数字可以被二除的次数。尾部零更多的数字优先，因为它们允许更多的减半。换句话说，尾部零最多的数字提供了最有效的方法来达到1。
- en: 'Level 3: Problem 2'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 级别 3：问题 2
- en: To begin, I worked through lots of practices problems on paper. In doing so,
    I realized the solutions to bigger staircases consisted of solutions to smaller
    staircases. Solving for `n` involves first solving for the smaller staircase sub-problems
    making this a dynamic programming problem.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 开始时，我在纸上完成了大量的练习题。通过这样做，我意识到较大楼梯的解决方案包括了较小楼梯的解决方案。解决`n`涉及首先解决较小楼梯的子问题，这使得这是一个动态规划问题。
- en: '![](../Images/0f0cca9d56a7e675558c601a695cc62d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f0cca9d56a7e675558c601a695cc62d.png)'
- en: Image by author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: I really struggled with cumulative nature of this problem. While I understood
    how smaller staircases contributed to larger ones, I couldn’t figure out how to
    account for the two step staircases. For example, when `n = 7`, I saw how `n =
    3` was part of the solution, but I didn’t know how to account for other two-step
    staircases.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我在解决这个问题的累积特性时真的很挣扎。虽然我理解较小的楼梯如何贡献于较大的楼梯，但我无法弄清楚如何计算两个步骤的楼梯。例如，当`n = 7`时，我看到`n
    = 3`是解决方案的一部分，但我不知道如何计算其他两个步骤的楼梯。
- en: '![](../Images/45e7af3ae94805b0eaeb3180cd373dfa.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/45e7af3ae94805b0eaeb3180cd373dfa.png)'
- en: Image by author.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: As an exercise, I simplified the problem and just tried to find how many staircases
    existed for a given height and `n`. In other words, I took the graphic above and
    put in table form.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个练习，我简化了这个问题，并只是试图找出给定高度和`n`的楼梯数量。换句话说，我将上面的图表转为表格形式。
- en: '![](../Images/515b54d8c1fc066cdcfd53378cc8e4c1.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/515b54d8c1fc066cdcfd53378cc8e4c1.png)'
- en: Image by author.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: As I filled out the table, I figured out the algorithm. For each cell, I subtracted
    the staircase height from `n`. Then, I took the remainder and visited that column
    (`n = remainder`). The sum of that column equals the number of solutions. In some
    cases, the remainder was enough to build 1 step. To account for those cases, I
    added 1 along the diagonal. See the green numbers in the left figure below.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我填充表格时，我找到了算法。对于每个单元格，我从`n`中减去楼梯高度。然后，我取余数并访问该列(`n = remainder`)。该列的总和等于解决方案的数量。在某些情况下，余数足够建造1步。为了计算这些情况，我在对角线上加了1。请参见下图左侧的绿色数字。
- en: '![](../Images/42ce530ed34c458fd1a99d200d2c90a0.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42ce530ed34c458fd1a99d200d2c90a0.png)'
- en: Image by author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: 'For example, when `n = 8` and `staircase height = 5`, the remainder is `n =
    3`. The 3 column contains two solutions: `staircase height = 3` and `staircase
    height = 2`. Thus, for `n = 8` with `staircase height = 5`, there are two solutions.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当`n = 8`且`staircase height = 5`时，余数为`n = 3`。3列包含两个解决方案：`staircase height
    = 3`和`staircase height = 2`。因此，对于`n = 8`和`staircase height = 5`，共有两个解决方案。
- en: This method works, but it could be more efficient. Instead of visiting each
    cell in a column, the table could be structured so that rows represented the max
    staircase height. For instance, `max staircase height = 3` would be the sum of
    the solutions for heights 1, 2, and 3 for a given `n`. The purple numbers below
    represent this cumulative approach. Now, finding the solution involves visiting
    just one cell.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有效，但可能更高效。与其访问列中的每个单元格，不如将表格结构化，使得行表示最大楼梯高度。例如，`max staircase height = 3`将是给定`n`的高度为1、2和3的解决方案之和。下方的紫色数字代表这种累积方法。现在，找到解决方案只需要访问一个单元格。
- en: Note how the figure below includes a `n=0` column. This way, the column index
    number equals the `n` value. This small change drastically simplifies the code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意下图中包含了一个`n=0`列。这样，列索引号等于`n`值。这一小变化大大简化了代码。
- en: '![](../Images/fd221f092f44bca4d1be18bc0ded154e.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd221f092f44bca4d1be18bc0ded154e.png)'
- en: Image by author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'Level 3: Problem 3'
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三级：问题 3
- en: After reading the problem, a couple of phrases jumped out at me. I searched
    for terms like “fixed probability state” and “probability state transitions” and
    eventually came across Markov chains. Since there is guaranteed a path from each
    state to a terminal state, this is an absorbing Markov chain. A terminal state,
    also referred to as an absorbing state, means it is impossible to leave that state
    (i.e. zero probability of going to another state).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读问题后，我想到了几个短语。我搜索了诸如“固定概率状态”和“概率状态转移”等术语，最终找到了马尔可夫链。由于从每个状态到终端状态都有路径，这就是一个吸收马尔可夫链。终端状态，也称为吸收状态，意味着无法离开该状态（即，转移到其他状态的概率为零）。
- en: I never heard of Markov chains so before I started coding, I did my research.
    [Here](https://brilliant.org/wiki/absorbing-markov-chains/) is a great overview
    of Markov chains.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我以前从未听说过马尔可夫链，所以在开始编写代码之前，我做了一些研究。[这里](https://brilliant.org/wiki/absorbing-markov-chains/)
    是对马尔可夫链的很好的概述。
- en: 'The transition matrix, *P*, for an absorbing Markov chain with *t* transition
    states and *s* absorbing states is the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 吸收马尔可夫链的转移矩阵 *P*，对于有 *t* 个过渡状态和 *s* 个吸收状态的情况如下：
- en: '![](../Images/a38ebf16ef400dd9ed2787c850fdc916.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a38ebf16ef400dd9ed2787c850fdc916.png)'
- en: Image by author.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'The transition matrix can then be used to find the fundamental matrix:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用转移矩阵来找到基本矩阵：
- en: '![](../Images/b229b7b942d99f1c3f5bfa83eda8558f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b229b7b942d99f1c3f5bfa83eda8558f.png)'
- en: Image by author.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'The fundamental matrix provides lots of information. But in order to solve
    the problem, one more matrix must be calculated:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 基本矩阵提供了很多信息。但为了求解问题，还必须计算一个矩阵：
- en: '![](../Images/d8b1b0812169ed07620b7662db4f274d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8b1b0812169ed07620b7662db4f274d.png)'
- en: Image by author.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: In *M*, the rows represent starting states and the columns represent absorbing
    states. The value at *M[i][j]* is the probability of being absorbed by terminal
    state *j* if starting at transition state *i*. Thus, the number of rows in *M*
    will be determined by the number of transition states and the number of columns
    equals the number of terminal states.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *M* 中，行表示起始状态，列表示吸收状态。*M[i][j]* 的值是从过渡状态 *i* 开始被吸收到终端状态 *j* 的概率。因此，*M* 的行数由过渡状态的数量决定，而列数等于终端状态的数量。
- en: First, I had to find the number and locations of the transition and absorbing
    states. Then, for the transition states, I had to convert the integers to fractions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要找出过渡状态和吸收状态的数量及位置。然后，对于过渡状态，我需要将整数转换为分数。
- en: 'Given the following input:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 给定以下输入：
- en: '![](../Images/3c703b0b5bff4f9aa3c96c8dc7c76cc3.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c703b0b5bff4f9aa3c96c8dc7c76cc3.png)'
- en: Image by author.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'The code above transforms it to:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将其转换为：
- en: '![](../Images/4a765d1b4858a8fb6fc92165a05f90cb.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a765d1b4858a8fb6fc92165a05f90cb.png)'
- en: Image by author.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Next, I need to calculate the *I* and *Q* matricesto solve for *N*. Since I
    couldn’t use libraries, I brushed up on matrix operations like [dot product](/dot-product-in-linear-algebra-for-data-science-using-python-f113fb60c8f)
    and [matrix inversion](https://integratedmlai.com/matrixinverse/).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我需要计算 *I* 和 *Q* 矩阵以求解 *N*。由于我不能使用库，我复习了像 [点积](/dot-product-in-linear-algebra-for-data-science-using-python-f113fb60c8f)
    和 [矩阵求逆](https://integratedmlai.com/matrixinverse/) 这样的矩阵运算。
- en: '![](../Images/fa070364d577140a895d5f3a8d44619d.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa070364d577140a895d5f3a8d44619d.png)'
- en: Image by author.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Now, I need to solve for *R.*
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我需要求解 *R*。
- en: '![](../Images/34c10516690a9288a4a65c325cfa378d.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34c10516690a9288a4a65c325cfa378d.png)'
- en: Image by author.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Now that both *R* and *N* are solved, I can calculate the probability matrix,
    *M.*
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，*R* 和 *N* 都已经求解，我可以计算概率矩阵 *M*。
- en: '![](../Images/fcf1e5ae6ac0db4558656fc9c38631ae.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcf1e5ae6ac0db4558656fc9c38631ae.png)'
- en: Image by author.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Now, *M* must be formatted to match output specifications. Only the first row
    is needed since the question only asks for the probabilities when starting from
    state 0\. As you can see above, *M* is in fractions. To format the answer as an
    array of integers representing the numerators of the probabilities, I needed to
    find the least common multiple. The LCM will be the common denominator among the
    probabilities.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，*M* 必须格式化以匹配输出规范。由于问题只要求从状态 0 开始的概率，因此只需要第一行。正如上面所示，*M* 是以分数形式表示的。为了将答案格式化为表示概率分子的一维数组，我需要找到最小公倍数。最小公倍数将是概率之间的公分母。
- en: '![](../Images/e4adc6f0c1648ecb3f9eb6464c896f8c.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4adc6f0c1648ecb3f9eb6464c896f8c.png)'
- en: Image by author.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: The trickiest part of this problem ended up being the fractions and relearning
    matrix operations. Like I mentioned in my Level 1 article, this challenge is very
    specific about what type of outputs it will accept.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题中最棘手的部分是分数和重新学习矩阵操作。正如我在 Level 1 文章中提到的，这个挑战对接受的输出类型非常具体。
- en: Here’s the solution in full.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的解决方案。
- en: Conclusion
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: At the end of the level, I was given the option to submit my contact info for
    a Google recruiter. However, that was over a year ago, and Google has yet to reach
    out.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在级别结束时，我有机会提交我的联系信息给 Google 招聘人员。然而，那是超过一年前的事情了，Google 还没有联系我。
- en: Overall, I felt these problems were designed to test more than just basic coding
    skills. Solving these types of problems proves you can develop solutions despite
    tricky edges cases and memory constraints. Ironically, I found the problems to
    get easier as the level progressed. However, with each new problem, I also started
    to *work* *smarter, not harder.* I reread the problem. I paused and drew out some
    examples on paper rather than immediately start coding the first thing that came
    to mind. And, most importantly, I used existing resources to learn new concepts
    and brush up on old ones.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，我觉得这些问题的设计不仅仅是测试基础编码技能。解决这些类型的问题证明了你能够在处理复杂边缘情况和内存限制时开发解决方案。具有讽刺意味的是，我发现随着难度级别的提升，问题变得更容易了。然而，每解决一个新问题，我也开始*更加聪明地工作，而不是更努力地工作*。我重新阅读问题，暂停并在纸上绘制一些例子，而不是立即开始编码想到的第一个解决方案。最重要的是，我利用现有资源来学习新概念和巩固旧知识。
- en: '[![](../Images/03ef44469698c6bbba9be1e11d44ee17.png)](http://buymeacoffee.com/katyhagerty)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/03ef44469698c6bbba9be1e11d44ee17.png)](http://buymeacoffee.com/katyhagerty)'
- en: '*Thank you for reading my article. If you like my content, follow me on* [*Medium*](https://medium.com/@katyhagerty19)*.*'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*感谢你阅读我的文章。如果你喜欢我的内容，可以在* [*Medium*](https://medium.com/@katyhagerty19)*上关注我。*'
- en: ''
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Connect with me on* [*LinkedIn*](https://www.linkedin.com/in/katherine-katy-hagerty/)*,*
    [*Twitter*](https://twitter.com/HagertyKaty)*, or* [*Instagram*](https://www.instagram.com/katyhagerty/)*.*'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在* [*LinkedIn*](https://www.linkedin.com/in/katherine-katy-hagerty/)*、* [*Twitter*](https://twitter.com/HagertyKaty)*
    或* [*Instagram*](https://www.instagram.com/katyhagerty/)*上与我联系。*'
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*All feedback is welcome. I am always eager to learn new or better ways of
    doing things.*'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*所有反馈都是受欢迎的。我总是渴望学习新的或更好的做事方式。*'
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Feel free to leave a comment or reach out to me at katyhagerty19@gmail.com.*'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*随时可以留下评论或通过 katyhagerty19@gmail.com 联系我。*'
