- en: Julia Magic Too Few People Know About
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia 魔法 太少人知道
- en: 原文：[https://towardsdatascience.com/julia-magic-too-few-people-know-about-330a7039a11a](https://towardsdatascience.com/julia-magic-too-few-people-know-about-330a7039a11a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/julia-magic-too-few-people-know-about-330a7039a11a](https://towardsdatascience.com/julia-magic-too-few-people-know-about-330a7039a11a)
- en: Some less known capabilities of the Julia programming language.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Julia 编程语言的一些不太为人知的功能。
- en: '[](https://emmaccode.medium.com/?source=post_page-----330a7039a11a--------------------------------)[![Emma
    Boudreau](../Images/f7201d012b733643d6e97957f73fd1fa.png)](https://emmaccode.medium.com/?source=post_page-----330a7039a11a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----330a7039a11a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----330a7039a11a--------------------------------)
    [Emma Boudreau](https://emmaccode.medium.com/?source=post_page-----330a7039a11a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://emmaccode.medium.com/?source=post_page-----330a7039a11a--------------------------------)[![Emma
    Boudreau](../Images/f7201d012b733643d6e97957f73fd1fa.png)](https://emmaccode.medium.com/?source=post_page-----330a7039a11a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----330a7039a11a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----330a7039a11a--------------------------------)
    [Emma Boudreau](https://emmaccode.medium.com/?source=post_page-----330a7039a11a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----330a7039a11a--------------------------------)
    ·10 min read·Oct 15, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----330a7039a11a--------------------------------)
    ·阅读时间 10 分钟·2023年10月15日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b22e53ebd32ae5b1747afc050ab2696b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b22e53ebd32ae5b1747afc050ab2696b.png)'
- en: (image by author)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: （图像由作者提供）
- en: introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: As far as programming languages and their paradigms go, Julia’s take is incredibly
    unique. Comparing Julia to the slough of other multi-paradigm programming languages
    that are popular today, Julia is radically different by many comparisons. This
    is especially the case in paradigm, or how the types of the language (which hold
    the data,) work with functions or methods in the language. There are a number
    of different solutions that have been proposed for this, and every language tends
    to sit in one category — though not necessarily firmly. Most modern languages
    have bridged multiple programming concepts through these paradigms, and this makes
    most modern programming languages multi-paradigm. Under this umbrella, the Julia
    language would also be included.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就编程语言及其范式而言，Julia 的方法极为独特。与今天流行的其他多范式编程语言相比，Julia 在许多方面显著不同。尤其在范式方面，即语言中的类型（持有数据）如何与语言中的函数或方法协作。对此已经提出了许多不同的解决方案，每种语言往往都处于某一类别
    — 尽管不一定完全如此。大多数现代语言通过这些范式桥接了多个编程概念，这使得大多数现代编程语言都是多范式的。在这个大伞下，Julia 语言也被包括在内。
- en: 'Although Julia is a multi-paradigm programming language, it is built in a unique
    paradigm centered around multiple dispatch. This is not to say this paradigm is
    entirely novel, the basis of this paradigm is found in the Standard Meta Language
    (SML). I actually, because of Julia, went back and tried that language ages ago
    — it was a very interesting experience, and if you would like to read more about
    what transpired with that here is a link to that article:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Julia 是一种多范式编程语言，但它建立在一个以多重分派为中心的独特范式上。这并不是说这种范式完全新颖，这种范式的基础可以在标准元语言（SML）中找到。实际上，因为
    Julia，我回去尝试了那个语言——这是一次非常有趣的经历，如果你想了解更多关于这个经历的内容，这里有一篇文章的链接：
- en: '[](/getting-introduced-to-sml-a-weird-polymorphic-language-originated-in-1983-797ff9d6622e?source=post_page-----330a7039a11a--------------------------------)
    [## Getting Introduced to SML: A Weird Polymorphic Language Originated in 1983'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/getting-introduced-to-sml-a-weird-polymorphic-language-originated-in-1983-797ff9d6622e?source=post_page-----330a7039a11a--------------------------------)
    [## 介绍 SML：一种源于1983年的奇异多态语言'
- en: Trying my luck at writing and compiling some basic code with the SML language
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 试着用 SML 语言编写和编译一些基本代码
- en: towardsdatascience.com](/getting-introduced-to-sml-a-weird-polymorphic-language-originated-in-1983-797ff9d6622e?source=post_page-----330a7039a11a--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/getting-introduced-to-sml-a-weird-polymorphic-language-originated-in-1983-797ff9d6622e?source=post_page-----330a7039a11a--------------------------------)
- en: There are a lot of really cool things that Julia can do that are entirely unique
    to the language. This paradigm and its feature set brings a lot of excitement
    and new capabilities to a programming language, but also creates a lot of hurdles.
    Taking advantage of these complexities can mean a lot when it comes to Data Science.
    With capability comes complexity, and with certain nuances of Julia that are somewhat
    unique it might be tricky for users to get a full Julia experience. There is a
    lot to learn, and Julia is a seriously awesome language to work with, so it is
    worth taking advantage of!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 能做很多完全独特的事情，这些功能在语言中是独一无二的。这种范式及其特性集为编程语言带来了很多兴奋感和新能力，但也创造了许多障碍。利用这些复杂性对数据科学来说意义重大。能力带来了复杂性，考虑到
    Julia 中某些有些独特的细微差别，用户可能会发现获得完整的 Julia 体验有些棘手。需要学习的东西很多，Julia 是一个非常棒的语言，值得充分利用！
- en: As far as Data Science goes, Julia is the new kid on the block, but its community
    development has been solid and the language only gets more and more promising
    day by day. That being said, when using Julia in your Data Science projects it
    really comes in handy to know the language well. This is especially the case considering
    just how much Science stuff is in Julia’s `Base` . Julia has been designed with
    Data Science in mind, so learning Julia in this way is going to be very helpful
    towards mastering Data Science in the language!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就数据科学而言，Julia 是新手中的新秀，但其社区开发一直很稳固，语言每天都变得越来越有前景。也就是说，在你的数据科学项目中使用 Julia 时，了解这门语言非常有用。尤其是考虑到
    Julia 的 `Base` 中有很多科学内容。Julia 是考虑到数据科学而设计的，因此以这种方式学习 Julia 对于掌握语言中的数据科学非常有帮助！
- en: '[olive notebook](https://github.com/ChifiSource/OliveNotebooks.jl/blob/main/julia/random/less_known_jl.jl)'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[olive notebook](https://github.com/ChifiSource/OliveNotebooks.jl/blob/main/julia/random/less_known_jl.jl)'
- en: initialized arguments
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化参数
- en: One thing that I sometimes forget that Julia features is initialized arguments.
    This allows us to have an argument that is obtained with some work. This has applications
    all over the places and I find this incredibly useful. This is very useful for
    creating a default that pulls data from another provided argument.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我有时会忘记 Julia 的一个特性，即初始化参数。这允许我们使用一些操作获得一个参数。这在许多地方都有应用，我发现这非常有用。这对于创建一个从另一个提供的参数中拉取数据的默认值特别有用。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we made an `index` argument which will always be the `length` of `vec`
    by default. Useful! This is quite a lot better, in my opinion, than the solution
    that is found in languages without this feature. That considered, I really appreciate
    this feature being in Julia — a new Julia user could certainly miss it, and an
    experienced user could certainly forget it is there — but when the situation is
    correct, it is a really nice thing to have and makes a far superior API!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们创建了一个 `index` 参数，默认情况下它将始终是 `vec` 的 `length`。很有用！在我看来，这比那些没有这个特性的语言中的解决方案要好得多。考虑到这一点，我非常欣赏
    Julia 中这个特性——一个新的 Julia 用户肯定会错过它，一个经验丰富的用户也可能会忘记它的存在——但在情况合适时，它确实是一个非常好的功能，并且使
    API 远远优于其他！
- en: checking methods
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查方法
- en: '`Methods` in Julia carries a connotation somewhat unique to the language and
    its paradigm. In Julia, methods are defined as function names alongside the types
    of the arguments that method of that function is written for. In other words,'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 中的 `Methods` 带有一种在语言及其范式中独特的内涵。在 Julia 中，方法被定义为函数名称与为该函数编写方法的参数类型一起出现。换句话说，
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the example above, `example` is a function and `example(::Any)` is its first
    method. See we not only defined the function, but also its first method. We can
    get these methods into a `Base.MethodList` using the `methods` method. This is
    useful for any introspection we might want to do, and the display of the `MethodList`
    is really helpful for learning the dispatches of functions. The significant upside
    to Julia’s system is that less functions get built — more methods get built. The
    significant downside is that this means you need to learn multiple methods for
    each function and how it applies to each type. Fortunately, something like this
    is really helpful towards learning these things.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`example`是一个函数，`example(::Any)`是它的第一个方法。我们不仅定义了函数，还定义了它的第一个方法。我们可以使用`methods`方法将这些方法放入`Base.MethodList`中。这对于任何我们可能想要进行的自省都很有用，并且`MethodList`的显示对于学习函数的分发非常有帮助。Julia系统的显著优点是构建的函数更少——方法更多。显著的缺点是这意味着你需要学习每个函数的多个方法以及它们如何应用于每种类型。幸运的是，这种方法对于学习这些内容非常有帮助。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/74524d8f7019eec3f9e2db8f59ad775e.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74524d8f7019eec3f9e2db8f59ad775e.png)'
- en: (image by author)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （作者提供的图片）
- en: 'There are also certainly applications of method introspection outside of just
    learning the functions, however. This is the basis for my project Olive’s **multiple
    dispatch** notebook. For this case, I used the method list to search for new ways
    to build cells — making loading extensions as easy as defining methods. If you
    would like to view that project, here is a link:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，方法自省的应用不仅限于学习函数。这也是我项目Olive的**多重分发**笔记本的基础。在这种情况下，我使用方法列表来寻找构建单元的新方法——使加载扩展就像定义方法一样简单。如果你想查看该项目，这里是一个链接：
- en: '[](https://github.com/ChifiSource/Olive.jl?source=post_page-----330a7039a11a--------------------------------)
    [## GitHub - ChifiSource/Olive.jl: pure julia notebooks'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/ChifiSource/Olive.jl?source=post_page-----330a7039a11a--------------------------------)
    [## GitHub - ChifiSource/Olive.jl: 纯Julia笔记本'
- en: pure julia notebooks. Contribute to ChifiSource/Olive.jl development by creating
    an account on GitHub.
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 纯Julia笔记本。在GitHub上创建一个账户，贡献于ChifiSource/Olive.jl的开发。
- en: github.com](https://github.com/ChifiSource/Olive.jl?source=post_page-----330a7039a11a--------------------------------)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/ChifiSource/Olive.jl?source=post_page-----330a7039a11a--------------------------------)
- en: With Julia we can easily examine any function and its methods — as well as essentially
    everything else in `Main` . Introspection is very prominent in this language and
    is very useful in this language, so this is certainly another feature in Julia
    that I appreciate substantially.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Julia，我们可以轻松检查任何函数及其方法——以及`Main`中的几乎所有其他内容。自省在这种语言中非常突出，并且非常有用，因此这无疑是我非常欣赏Julia的另一个特性。
- en: '[](/runtime-introspection-julias-most-powerful-best-kept-secret-bf845e282367?source=post_page-----330a7039a11a--------------------------------)
    [## Runtime Introspection: Julia’s Most Powerful, Best-Kept Secret'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/runtime-introspection-julias-most-powerful-best-kept-secret-bf845e282367?source=post_page-----330a7039a11a--------------------------------)
    [## 运行时自省：Julia最强大、最保密的秘密'
- en: A look at using introspection to work with types in Julia
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 观察如何在 Julia 中使用自省来处理类型
- en: towardsdatascience.com](/runtime-introspection-julias-most-powerful-best-kept-secret-bf845e282367?source=post_page-----330a7039a11a--------------------------------)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/runtime-introspection-julias-most-powerful-best-kept-secret-bf845e282367?source=post_page-----330a7039a11a--------------------------------)
- en: The most important piece to this puzzle is the field `sig` on the `Method` type.
    Using this, we can denote things about the methods from within our code, and this
    can be very useful in some instances.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个难题的最重要部分是`Method`类型中的字段`sig`。通过使用它，我们可以在代码中描述有关方法的内容，这在某些情况下非常有用。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This signature contains the type of our `Function` and the type of each argument,
    this example has one, `Any` .
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个签名包含了我们的`Function`的类型和每个参数的类型，这个例子有一个，`Any`。
- en: deleting methods
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除方法
- en: Something I find really cool about Julia is that we can both add **and** delete
    methods. In essence, this means any `Method` can be replaced, methods can be removed
    for certain instances. The Base portion of Julia, or any other Julia package that
    is added is incredibly open-ended on what you can do. From within Julia we can
    `import` and extend with some methods.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得Julia非常酷的一点是，我们既可以添加**也**可以删除方法。从本质上讲，这意味着任何`Method`都可以被替换，方法可以根据特定情况被移除。Julia的Base部分，或者任何添加的Julia包，都对你可以做的事情非常开放。在Julia中，我们可以`import`并扩展一些方法。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can also delete methods. For a long time I had no idea this could be done,
    and when this is the case I am always eccentric to be sharing it. Now that we
    have `cd` imported, we use `Base.delete_method` on a `Method` of that function
    to remove it. We retrieve this `Method` using the `methods` method — *jeeze*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以删除方法。很长一段时间我不知道可以这样做，当这种情况发生时，我总是很兴奋地分享它。现在我们已经导入了 `cd`，我们使用 `Base.delete_method`
    对该函数的 `Method` 进行删除。我们通过 `methods` 方法检索这个 `Method` — *天哪*。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: dispatch a parameter
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调度一个参数
- en: Another really great aspect of Julia is the type parameters. Parameters are
    a **distinction of type** that tell us something about how the structure was constructed.
    For example, the following `Vector` has a parameter denoting the type of its elements,
    `Int64` .
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的另一个很棒的方面是类型参数。参数是**类型的区分**，它告诉我们关于结构是如何构造的一些信息。例如，以下的 `Vector` 具有一个表示其元素类型的参数
    `Int64`。
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This comes in handy in multiple capacities. For new users, I see parameters
    as a common barrier to learning Julia — it is understandable that a lack of familiarity
    with type parameters could make this daunting. They are quire useful however,
    and relatively straightforward to use. These parameters are used to create parametric
    multiple dispatch, or parametric polymorphism — generic functions that mutate
    multiple types based on parameters. This is also a very powerful feature in Julia.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这在多种情况下都非常有用。对于新用户来说，我看到参数是学习 Julia 的一个常见障碍 — 不熟悉类型参数的确可能使这变得令人望而生畏。然而，它们非常有用，而且相对简单易用。这些参数用于创建参数化的多重调度或参数化多态性
    — 根据参数变更多个类型的泛型函数。这也是 Julia 中一个非常强大的特性。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Another really cool aspect to this is that we can dispatch based on super-types.
    This means at any point in our abstraction hierarchy we may use multiple dispatch
    to encompass all the types below. For example, we want all `Real` numbers to be
    arguments… We do this by using the sub-type operator, `<:` , before the abstract
    type in our parameter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常酷的方面是我们可以根据超类型进行调度。这意味着在我们的抽象层次结构中的任何点，我们可以使用多重调度来涵盖所有下面的类型。例如，我们希望所有 `Real`
    数字都作为参数……我们通过在参数中的抽象类型前使用子类型操作符 `<:` 来实现这一点。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now `example` can be used with any `Vector` containing sub-types of `Real`.
    If we do not use the sub-type. With this, we can write a method as generically
    as possible. As a result, Julia projects take a lot less code — this paradigm
    makes it incredibly easy to pinpoint exactly the thing you need and write a method
    for it. The icing on the cake is being able to do that with any `Method` .
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `example` 可以与任何包含 `Real` 子类型的 `Vector` 一起使用。如果我们不使用子类型。通过这种方式，我们可以尽可能通用地编写方法。结果是，Julia
    项目所需的代码要少得多 — 这种范式使得精确定位所需的东西并为其编写方法变得极其简单。锦上添花的是，能够用任何 `Method` 完成这件事。
- en: AWESOME comprehensions
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超棒的 comprehensions
- en: Julia has **the best** comprehensions of any programming language I have ever
    used. This is partially due to Julia’s expressive syntax, which contributes in
    a variety of ways. For example, Julia’s parsing does not care about white-space
    — we can also wrap anything in a begin and an end. With how useful (and fast)
    comprehensions are in Julia, I rarely see reason to use a traditional `for` loop.
    The exception is when I want to use `continue` or `break` . Another reason these
    are so useful in that sense is because they always produce a `Vector` return.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 具有我使用过的任何编程语言中**最佳**的理解能力。这部分得益于 Julia 表达性丰富的语法，它在多方面都有贡献。例如，Julia 的解析器不关心空白符
    — 我们也可以将任何内容用 `begin` 和 `end` 包裹起来。由于 comprehensions 在 Julia 中非常有用（且快速），我很少看到使用传统的
    `for` 循环的理由。唯一的例外是当我想使用 `continue` 或 `break` 时。另一个让这些在这种情况下非常有用的原因是它们总是返回一个 `Vector`。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are few programming languages where comprehensions are quite so flexible.
    This is something that I think more users ought to try taking advantage of. In
    the example above we have an entire conditional and a return with no appending
    or anything like that. This is a really nice feature of Julia, and can make code
    incredibly concise.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有编程语言的 comprehensions 如此灵活。我认为更多用户应该尝试利用这一点。在上面的例子中，我们有一个完整的条件和一个返回，没有附加或类似的操作。这是
    Julia 的一个非常好的特性，可以使代码变得极其简洁。
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/bafd2956f639f5cf1a848c9bf2f02845.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bafd2956f639f5cf1a848c9bf2f02845.png)'
- en: (image by author)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: （图像由作者提供）
- en: expr examination
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式检查
- en: When it comes to meta-programming, Julia is a language that carries many possibilities
    along with it. With some Julia experience, we might get familiar with the basics
    of meta-programming in Julia. This is done primarily using `eval` and `Meta.parse`
    .
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在元编程方面，Julia 是一门带来许多可能性的语言。通过一些 Julia 的经验，我们可能会熟悉 Julia 中元编程的基础知识。这主要通过 `eval`
    和 `Meta.parse` 完成。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Meta` is a `Module` inside `Base` , this is a distinguished method from `Base.parse`
    . While this is a more basic form of this type of examination, we can also look
    further into an `Expr` by looking into its field.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Meta` 是 `Base` 内部的一个 `Module`，这与 `Base.parse` 是不同的方法。虽然这是这种类型检查的一个更基础形式，但我们也可以通过查看字段进一步了解
    `Expr`。'
- en: '![](../Images/b1606459ff634a3d8dd91b009f78ada9.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b1606459ff634a3d8dd91b009f78ada9.png)'
- en: The main two fields on the `Expr` tyoe are `head` and `args`. In this context,
    `head` is the function call and `args` are the arguments provided.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Expr` 类型的两个主要字段是 `head` 和 `args`。在这种情况下，`head` 是函数调用，而 `args` 是提供的参数。'
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: eval is a field of module
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: eval 是模块的一个字段
- en: For these last 3, we will be moving to the REPL as in some cases we need the
    terminal for these examples.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这最后三项，我们将转到 REPL，因为在某些情况下我们需要终端来进行这些示例。
- en: 'When it comes to scoping, Julia has all you need — as many languages do. Julia,
    like most other languages of its type, uses lexical scoping. This is a scope which
    is descending, like a mountain it gets smaller as you go further up in the levels
    of scoping. This means that anytime you open a new scope it can access the scope
    above it but not the scope below it. Consider the following example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在作用域方面，Julia 提供了所需的一切——就像许多语言一样。Julia 和大多数同类语言一样，使用词法作用域。这是一种向下的作用域，就像山一样，随着你在作用域层次中向上移动，它变得越来越小。这意味着每次打开一个新作用域时，它可以访问上层作用域，但不能访问下层作用域。考虑以下示例：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the example above, `Example` is in a new scope below `Main` . This means
    that `Example` can access `Main` , but `Main` cannot access `Example` . Thus,
    `y` is defined in `Example` , but `x` is not defined in `Main` . A new scope like
    this is opened anytime we perform most actions in programming — looping, conditionals,
    and method calls all establish a new level of scope and have their own scope.
    This is an important thing to consider when programming in any language.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，`Example` 位于 `Main` 下面的一个新范围内。这意味着 `Example` 可以访问 `Main`，但 `Main` 无法访问
    `Example`。因此，`y` 在 `Example` 中定义，但 `x` 在 `Main` 中未定义。在编程中执行大多数操作时，如循环、条件判断和方法调用，都会建立一个新的范围层次，并拥有自己的作用域。这是编程中需要考虑的重要因素。
- en: In Julia, modules are containers which contain names, which are essentially
    just fields. These names are everything defined within that module. Inside of
    each module, we also have a local `eval` . As a result, in the case of our `Example`
    function from earlier, `Example.eval` is a function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Julia 中，模块是包含名称的容器，这些名称本质上只是字段。这些名称是该模块内定义的所有内容。在每个模块内部，我们还有一个本地的 `eval`。因此，在之前提到的
    `Example` 函数的情况下，`Example.eval` 是一个函数。
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: piping operator
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道运算符
- en: Another really cool thing that I often forget Julia comes with is the ability
    to pipe functions. Piping allows us to chain together several function calls very
    easily in a way that is incredibly readable. With pipes, we turn several function
    calls on one thing into a single line of code. Piping in Julia is also easy and
    concise. This is done using the `|>` pipe operator in a pragmatic fashion, function
    by function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我常常忘记的非常酷的功能是 Julia 具备管道功能。管道允许我们以非常易读的方式将多个函数调用链接在一起。通过管道，我们将多个函数调用合并成一行代码。Julia
    中的管道功能也很简单而且简洁。这是通过 `|>` 管道运算符以实用的方式逐个函数完成的。
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s pipe a number through these two functions:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将一个数字通过这两个函数：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: redirecting standard output
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重定向标准输出
- en: The last thing I wanted to talk about that is surprisingly easy in Julia is
    redirecting IO. In other languages, such as Python, this is a surprisingly daunting
    feat that requires a lot of knowledge and work. In Julia, this is a simple method
    call that is incredibly easy to use. To redirect standard output in Julia, we
    simply use the `redirect_stdout` method! The only challenge to this is that this
    `Method` takes an `IOStream` or a `Pipe` . Only a `Pipe` is in memory, so the
    easiest use-case is to use this to write to a file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我想谈的最后一点是，在 Julia 中重定向 IO 是意外简单的。在其他语言中，例如 Python，这是一项令人惊讶的艰巨任务，需要大量知识和工作。在
    Julia 中，这只是一个简单的方法调用，非常容易使用。要在 Julia 中重定向标准输出，我们只需使用`redirect_stdout`方法！唯一的挑战是这个`Method`需要一个`IOStream`或`Pipe`。只有`Pipe`在内存中，因此最简单的用例是将其用来写入文件。
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There is a lot that can be done with this, there is a lot more if this can
    be stored in memory. I have an entire article which goes into a lot of detail
    on this function and all of the ways to use it. If you would like to learn more
    about this, here is a link to that article:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面可以做很多事情，如果能存储在内存中，还能做更多。我有一整篇文章详细讨论了这个函数及其所有用法。如果你想了解更多，这里是那篇文章的链接：
- en: '[](https://chifi.dev/redirecting-output-in-julia-the-rundown-7a1c814f842f?source=post_page-----330a7039a11a--------------------------------)
    [## Redirecting Output In Julia: The Rundown'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 在 Julia 中重定向输出：详细解析](https://chifi.dev/redirecting-output-in-julia-the-rundown-7a1c814f842f?source=post_page-----330a7039a11a--------------------------------)'
- en: Everything you need to know about redirecting STDIO in Julia.
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于在 Julia 中重定向 STDIO，你需要知道的一切。
- en: chifi.dev](https://chifi.dev/redirecting-output-in-julia-the-rundown-7a1c814f842f?source=post_page-----330a7039a11a--------------------------------)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[chifi.dev](https://chifi.dev/redirecting-output-in-julia-the-rundown-7a1c814f842f?source=post_page-----330a7039a11a--------------------------------)'
- en: conclusion
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Julia’s greatest strength is how its many features play on its core paradigm.
    Julia’s greatest weakness is that these many features create a barrier for new
    users and using them. Furthered, this might make new users more prone to get lost
    in code. Julia’s syntax is able to make code as condensed as possible while still
    being very legible, but there is still a problem if you don’t know how to read
    it. That being said, there is a lot of Julia and some of my favorite things about
    Julia are things that people have no idea even exist! Hopefully sharing these
    was helpful on this day! Thank you for reading!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的最大优势在于它的许多特性如何发挥其核心范式。Julia 的最大弱点在于这些许多特性为新用户使用它们设置了障碍。此外，这可能使新用户更容易在代码中迷失。Julia
    的语法能够使代码尽可能简洁，同时仍然非常易读，但如果你不知道如何阅读它，仍然存在问题。话虽如此，Julia 还有很多令人惊叹的特性，我最喜欢的 Julia
    方面是很多人甚至不知道它们的存在！希望今天分享这些内容对你有帮助！感谢阅读！
