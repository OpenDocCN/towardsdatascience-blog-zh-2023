- en: 'Character Encoding in NLP: The Role of ASCII and Unicode'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自然语言处理中的字符编码：ASCII 和 Unicode 的角色
- en: 原文：[https://towardsdatascience.com/character-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee?source=collection_archive---------13-----------------------#2023-01-12](https://towardsdatascience.com/character-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee?source=collection_archive---------13-----------------------#2023-01-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/character-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee?source=collection_archive---------13-----------------------#2023-01-12](https://towardsdatascience.com/character-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee?source=collection_archive---------13-----------------------#2023-01-12)
- en: A closer look at the technicalities and practical applications
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更详细地审视技术细节和实际应用
- en: '[](https://medium.com/@javi_sanchez?source=post_page-----9349b4fe3cee--------------------------------)[![Javi
    Sánchez](../Images/4b24d1e1aaef9581f1d085c9a6a5990d.png)](https://medium.com/@javi_sanchez?source=post_page-----9349b4fe3cee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9349b4fe3cee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9349b4fe3cee--------------------------------)
    [Javi Sánchez](https://medium.com/@javi_sanchez?source=post_page-----9349b4fe3cee--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@javi_sanchez?source=post_page-----9349b4fe3cee--------------------------------)[![Javi
    Sánchez](../Images/4b24d1e1aaef9581f1d085c9a6a5990d.png)](https://medium.com/@javi_sanchez?source=post_page-----9349b4fe3cee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9349b4fe3cee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9349b4fe3cee--------------------------------)
    [Javi Sánchez](https://medium.com/@javi_sanchez?source=post_page-----9349b4fe3cee--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdadb8e5314e0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcharacter-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee&user=Javi+S%C3%A1nchez&userId=dadb8e5314e0&source=post_page-dadb8e5314e0----9349b4fe3cee---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9349b4fe3cee--------------------------------)
    ·7 min read·Jan 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9349b4fe3cee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcharacter-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee&user=Javi+S%C3%A1nchez&userId=dadb8e5314e0&source=-----9349b4fe3cee---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fdadb8e5314e0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcharacter-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee&user=Javi+S%C3%A1nchez&userId=dadb8e5314e0&source=post_page-dadb8e5314e0----9349b4fe3cee---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9349b4fe3cee--------------------------------)
    ·7 min read·2023年1月12日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9349b4fe3cee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcharacter-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee&user=Javi+S%C3%A1nchez&userId=dadb8e5314e0&source=-----9349b4fe3cee---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9349b4fe3cee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcharacter-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee&source=-----9349b4fe3cee---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9349b4fe3cee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcharacter-encoding-in-nlp-the-role-of-ascii-and-unicode-9349b4fe3cee&source=-----9349b4fe3cee---------------------bookmark_footer-----------)'
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this article we will cover the topic of character encoding standards, specifically
    focusing on the ASCII and Unicode systems. We will dive into how they work and
    their role in deep learning. In addition, we will provide some examples of character
    encoding using Tensorflow, to have an overview of how this library manages strings
    on the inside.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨字符编码标准的主题，特别是ASCII和Unicode系统。我们将深入了解它们的工作原理及其在深度学习中的作用。此外，我们还将提供一些使用
    Tensorflow 进行字符编码的示例，以便概览该库如何处理字符串。
- en: '![](../Images/2a0c219212d87bfa8b058ae41b488b43.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a0c219212d87bfa8b058ae41b488b43.png)'
- en: Photo by [Giammarco](https://unsplash.com/es/@giamboscaro) on [Unsplash](https://unsplash.com/)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Giammarco](https://unsplash.com/es/@giamboscaro) 提供的照片，来源于 [Unsplash](https://unsplash.com/)'
- en: But first of all, we will present some important concepts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将介绍一些重要的概念。
- en: What is a character encoding standard?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是字符编码标准？
- en: Character encoding is a system for representing characters as numerical values,
    known as code points. These code points allow computers to store and manipulate
    text, which can then be displayed or used in other ways. In this article, we will
    explain the ASCII and Unicode character encoding systems and discuss their usefulness
    in the field of natural language processing (NLP).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码是一种将字符表示为数值（即编码点）的系统。这些编码点允许计算机存储和处理文本，然后可以以其他方式显示或使用。在本文中，我们将解释 ASCII 和
    Unicode 字符编码系统，并讨论它们在自然语言处理（NLP）领域的实用性。
- en: ASCII
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASCII
- en: ASCII (American Standard Code for Information Interchange) is a character encoding
    standard that assigns unique numbers to each letter, digit, and other symbol used
    in written text. It is widely used, but it has some limitations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII（美国信息交换标准代码）是一种字符编码标准，为书面文本中的每个字母、数字和其他符号分配唯一的数字。它被广泛使用，但也存在一些限制。
- en: ASCII has 128 code points, which means that it can represent 128 characters
    and symbols. Some of these code points represent instructions for the computer,
    while others represent printable characters such as letters and digits.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII 具有 128 个编码点，这意味着它可以表示 128 个字符和符号。其中一些编码点代表计算机的指令，而另一些代表可打印的字符，如字母和数字。
- en: 'The mapping system used in ASCII can be found in this table:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII 中使用的映射系统可以在此表格中找到：
- en: '![](../Images/c443857bcfbabbafc942f1f70d1e6549.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c443857bcfbabbafc942f1f70d1e6549.png)'
- en: ASCII table, [link](https://commons.wikimedia.org/wiki/File:ASCII-Table-wide.svg)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII 表格, [链接](https://commons.wikimedia.org/wiki/File:ASCII-Table-wide.svg)
- en: As we can see, out of 128 code points, only 94 are printables.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，在 128 个编码点中，只有 94 个是可打印的。
- en: For example, using the hexadecimal column of this table, we can encode the string
    “Language” as “4C 61 6E 67 75 61 67 65”.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用此表格的十六进制列，我们可以将字符串“Language”编码为“4C 61 6E 67 75 61 67 65”。
- en: Limitations of ASCII
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASCII 的限制
- en: The main limitation of ASCII code as we said earlier is that it only has 94
    printable characters. These include upper and lower case English letters (52 characters),
    digits (10 characters), and punctuation marks and symbols (32 characters). So
    ASCII is not suited for any language that uses more than the basic Latin alphabet.
    There are different characters in other languages (Chinese, Russian, Norwegian),
    or even accented letters in languages such as French and Spanish, for example,
    that can not be displayed using this character encoding system. Also, there are
    special symbols, like emojis or currency symbols that are not included in ASCII
    either, which limits its potential. For those reasons, a new character encoding
    system was required, to make it more extensible and have taken into account all
    these characters and symbols that have been forgotten in the ASCII code. This
    is where the Unicode Standard arises.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，ASCII 码的主要限制是它只有 94 个可打印字符。这些字符包括大小写英文字母（52 个字符）、数字（10 个字符）以及标点符号和符号（32
    个字符）。因此，ASCII 不适用于使用超过基本拉丁字母的语言。其他语言中有不同的字符（如中文、俄文、挪威文），甚至有法语和西班牙语中的带重音字母，这些都无法使用这种字符编码系统显示。此外，像表情符号或货币符号这样的特殊符号也不包含在
    ASCII 中，这限制了它的潜力。因此，需要一种新的字符编码系统，以使其更具扩展性，并考虑到所有这些在 ASCII 码中被忽略的字符和符号。这就是 Unicode
    标准的出现。
- en: Unicode
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unicode
- en: Unicode is a character encoding standard developed in the late 1980s and early
    1990s to expand upon the capabilities of ASCII and other existing standards. One
    of the main motivations for its development was the need to have a single-character
    encoding standard that could be used to represent text in any language. To address
    this problem, the Unicode consortium was formed, to create a single, universal
    character encoding standard that could represent all the world’s languages. Unicode
    uses a 16-bit encoding scheme, which allows it to represent over 65,000 different
    characters. This is significantly more than the 128 characters that can be represented
    using ASCII. It has since become the dominant character encoding standard for
    the WWW and is widely supported by modern computing systems and software. It can
    encode and display text in a wide range of languages, including those using scripts
    other than the Latin alphabet (e.g. Chinese, Japanese, Arabic), as well as special
    symbols like emojis and currency symbols.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 是一种字符编码标准，开发于1980年代末至1990年代初，旨在扩展ASCII及其他现有标准的功能。其主要开发动机之一是需要一个可以表示任何语言文本的单一字符编码标准。为了解决这个问题，Unicode
    联盟应运而生，创建了一个能够表示世界所有语言的单一通用字符编码标准。Unicode 使用16位编码方案，这使其能够表示超过65,000种不同的字符。这比ASCII可以表示的128个字符要多得多。它已经成为WWW的主流字符编码标准，并被现代计算系统和软件广泛支持。它可以编码和显示多种语言的文本，包括使用拉丁字母以外的字符集的语言（如中文、日文、阿拉伯文），以及像表情符号和货币符号等特殊符号。
- en: You can find more information on their website.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在他们的[网站](https://home.unicode.org/?source=post_page-----9349b4fe3cee--------------------------------)上找到更多信息。
- en: '[](https://home.unicode.org/?source=post_page-----9349b4fe3cee--------------------------------)
    [## Home'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://home.unicode.org/?source=post_page-----9349b4fe3cee--------------------------------)
    [## 首页'
- en: Edit description
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑描述
- en: home.unicode.org](https://home.unicode.org/?source=post_page-----9349b4fe3cee--------------------------------)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: home.unicode.org](https://home.unicode.org/?source=post_page-----9349b4fe3cee--------------------------------)
- en: How does it work?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: Unicode defines a codespace, a set of numerical values ranging from 0 through
    10FFFF (in hexadecimal), called code points and denoted with a U at the beginning,
    so it ranges from U+0000 to U+10FFFF. We will use the U followed by the code point
    value of the character in hexadecimal and use it for digits (with leading zeros
    if necessary, e.g., U+00F7). The Unicode codespace is divided into seventeen planes,
    numbered 0 to 16\. Each plane consists of 65,536 (2¹⁶) consecutive code points.
    Plane 0, known as the Basic Multilingual Plane (BMP), contains the most commonly
    used characters. The remaining planes (1 to 16) are called supplementary planes.
    Within each plane, characters are allocated within named blocks of related characters.
    A Unicode block is one of several contiguous ranges of numeric character codes.
    They are used to organize the vast number of characters in the Unicode standard.
    Each block is generally, but not always, meant to supply glyphs used by one or
    more specific languages, or in some general application area.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 定义了一个代码空间，一组从0到10FFFF（十六进制）的数值，称为代码点，并以U开头表示，因此范围从U+0000到U+10FFFF。我们将使用U后跟字符的十六进制代码点值，并在必要时使用前导零（例如，U+00F7）。Unicode代码空间分为十七个平面，编号从0到16。每个平面由65,536（2¹⁶）个连续的代码点组成。平面0，称为基本多语言平面（BMP），包含了最常用的字符。其余的平面（1到16）被称为补充平面。在每个平面中，字符被分配在命名的相关字符块中。Unicode
    块是多个连续的数字字符代码范围之一。它们用于组织Unicode标准中的大量字符。每个块通常但不总是用来提供一种或多种特定语言使用的字形，或者在某些通用应用领域中使用。
- en: Mapping and encodings
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射和编码
- en: 'Unicode defines two mapping methods: UTF encodings and UCS encodings. An encoding
    maps the range of Unicode code points to a sequence of values within a fixed range.
    All UTF encodings map code points to a unique sequence of bytes. The number in
    the names of the encodings indicates the number of bits per code unit. UTF-8 and
    UTF-16 are the most commonly used encodings.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 定义了两种映射方法：UTF编码和UCS编码。编码将Unicode代码点范围映射到固定范围内的一系列值。所有UTF编码将代码点映射到唯一的字节序列。编码名称中的数字表示每个代码单元的位数。UTF-8和UTF-16是最常用的编码。
- en: UTF-8 uses one to four bytes for each cope point. It is very compatible with
    ASCII.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UTF-8 对每个代码点使用一到四个字节。它与ASCII非常兼容。
- en: UTF-16 uses one or two 16-bit code units per code point.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UTF-16 对每个代码点使用一个或两个16位代码单元。
- en: Unicode in NLP
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unicode 在自然语言处理中的应用
- en: In this section, we will see how to use Unicode in NLP tasks and how is it useful.
    We will use some Tensorflow code to make these examples more illustrative.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在NLP任务中使用Unicode以及它的作用。我们将使用一些Tensorflow代码使这些示例更加生动。
- en: NLP models often handle different languages with different character sets. The
    most representative task could be Neural Machine Translation (NMT), where the
    model has to translate sentences into other languages. But in general, all language
    models have to use string sequences as input, so Unicode is a pretty important
    step. Using Unicode representation is generally the most effective choice.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: NLP模型通常处理具有不同字符集的不同语言。最具代表性的任务可能是神经机器翻译（NMT），在这种任务中，模型必须将句子翻译成其他语言。但一般来说，所有语言模型都必须使用字符串序列作为输入，因此Unicode是一个相当重要的步骤。使用Unicode表示通常是最有效的选择。
- en: Here we will see how to represent a string in Tensorflow and manipulate them
    using Unicode. The basic TensorFlow tf.string type allows us to build tensors
    of the byte string. Unicode strings are UTF-8 by default.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们将看到如何在Tensorflow中表示字符串并使用Unicode对其进行操作。基本的TensorFlow tf.string类型允许我们构建字节字符串的张量。Unicode字符串默认是UTF-8。
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we can see that the emoji is encoded as “\xf0\x9f\x8c\x8e”. It is represented
    in UTF-8.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到，表情符号被编码为“\xf0\x9f\x8c\x8e”。它以UTF-8表示。
- en: Representation
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示
- en: 'We can represent a Unicode string in Tensorflow in two standards:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Tensorflow中使用两种标准表示Unicode字符串：
- en: string scalar — where the sequence of code points is encoded using a known character
    encoding (such as Unicode).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串标量——其中代码点序列使用已知字符编码（例如Unicode）进行编码。
- en: int32 vector — where each position contains a single code point.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: int32 向量——其中每个位置包含一个单一的代码点。
- en: For example, the following values all represent the Unicode string “语言处理” (which
    means “language processing” in Chinese).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下值都表示Unicode字符串“语言处理”（在中文中意为“language processing”）。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And we can also represent it using UTF-16.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用UTF-16进行表示。
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And finally, in a vector of Unicode code points.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在一个Unicode代码点向量中。
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Conversion
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: 'Tensorflow provides operations to convert between these different representations:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Tensorflow提供了在这些不同表示之间转换的操作：
- en: '*tf.strings.unicode_decode*: Converts an encoded string scalar to a vector
    of code points.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tf.strings.unicode_decode*：将编码的字符串标量转换为代码点向量。'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*tf.strings.unicode_encode*: Converts a vector of code points to an encoded
    string scalar.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tf.strings.unicode_encode*：将代码点向量转换为编码的字符串标量。'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*tf.strings.unicode_transcode*: Converts an encoded string scalar to a different
    encoding.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*tf.strings.unicode_transcode*：将编码的字符串标量转换为不同的编码。'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Character length
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符长度
- en: We can use the unit parameter of the *tf.strings.length* operation to indicate
    how character lengths should be computed. The default unit value is “BYTE”, but
    it can be set to other values such as “UTF8_CHAR” or “UTF16_CHAR”, to determine
    the number of Unicode code points in each encoded string.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用*tf.strings.length*操作的unit参数来指示字符长度的计算方式。默认的单位值是“BYTE”，但可以设置为其他值，例如“UTF8_CHAR”或“UTF16_CHAR”，以确定每个编码字符串中的Unicode代码点数量。
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you count the number of bytes in the string “Hello World \xf0\x9f\x8c\x8d”
    (counting each letter, space, and byte) you will see that there are 16 bytes as
    we can see in the output code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计算字符串“Hello World \xf0\x9f\x8c\x8d”的字节数（包括每个字母、空格和字节），你会看到总共有16个字节，如输出代码所示。
- en: This string has 13 UTF-8 characters if we count the same as before but count
    the emoji as one character and not 4 bytes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们像之前一样计算这字符串的字符数，但将表情符号视为一个字符而不是4个字节，这个字符串包含13个UTF-8字符。
- en: If you want a more complete tutorial about this section, I recommend you to
    visit this TensorFlow tutorial.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更完整的教程，我建议你访问这个TensorFlow教程。
- en: '[](https://www.tensorflow.org/text/guide/unicode?source=post_page-----9349b4fe3cee--------------------------------)
    [## Unicode strings | Text | TensorFlow'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Unicode strings | Text | TensorFlow](https://www.tensorflow.org/text/guide/unicode?source=post_page-----9349b4fe3cee--------------------------------)'
- en: NLP models often handle different languages with different character sets. Unicode
    is a standard encoding system that…
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NLP模型通常处理具有不同字符集的不同语言。Unicode是一个标准编码系统，它...
- en: www.tensorflow.org](https://www.tensorflow.org/text/guide/unicode?source=post_page-----9349b4fe3cee--------------------------------)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.tensorflow.org](https://www.tensorflow.org/text/guide/unicode?source=post_page-----9349b4fe3cee--------------------------------)'
- en: Conclusion
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, the character encoding is an essential aspect of computer systems
    and natural language processing (NLP). ASCII is a widely used standard that assigns
    unique numbers to each letter, digit, and symbol in the text, but it has limitations
    in its representation of characters. The Unicode standard was developed to address
    the limitations of ASCII, by using a 16-bit encoding scheme that allows it to
    represent over 65,000 different characters and support text in any language. Unicode
    has since become the dominant character encoding standard for the World Wide Web
    and modern computing systems and is essential for displaying and processing text
    in a wide range of languages and symbols. In this article, we have seen a detailed
    overview of the ASCII and Unicode encoding systems, and how Tensorflow manages
    the strings in Unicode.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，字符编码是计算机系统和自然语言处理（NLP）中的一个重要方面。ASCII 是一种广泛使用的标准，为文本中的每个字母、数字和符号分配唯一的编号，但它在字符表示上存在局限性。Unicode
    标准的开发旨在解决 ASCII 的局限性，它使用 16 位编码方案，使其能够表示超过 65,000 个不同的字符，并支持任何语言的文本。Unicode 已成为全球互联网和现代计算系统中主流的字符编码标准，对于显示和处理各种语言和符号的文本至关重要。在这篇文章中，我们详细概述了
    ASCII 和 Unicode 编码系统，以及 Tensorflow 如何管理 Unicode 中的字符串。
- en: If you have any doubts or suggestions please leave a comment. Thanks for reading!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何疑问或建议，请留下评论。感谢阅读！
