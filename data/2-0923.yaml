- en: 'Fourier-transform for time series: About image convolution and SciPy'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 傅里叶变换在时间序列中的应用：关于图像卷积和 SciPy
- en: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603](https://towardsdatascience.com/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603](https://towardsdatascience.com/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603)
- en: Fourier-transform convolution also applies to images
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 傅里叶变换卷积同样适用于图像
- en: '[](https://mocquin.medium.com/?source=post_page-----5e8fa1279603--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----5e8fa1279603--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5e8fa1279603--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5e8fa1279603--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----5e8fa1279603--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/?source=post_page-----5e8fa1279603--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----5e8fa1279603--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5e8fa1279603--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5e8fa1279603--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----5e8fa1279603--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5e8fa1279603--------------------------------)
    ·5 min read·Jul 21, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5e8fa1279603--------------------------------)
    ·阅读时间 5 分钟·2023年7月21日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'This post is the second of the Fourier-transform for time series, check the
    first here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是傅里叶变换在时间序列中的第二篇文章，第一篇文章可以在这里查看：
- en: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)
    [## Fourier transform for time-series: fast convolution explained with numpy'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[傅里叶变换在时间序列中的应用：用 numpy 解释快速卷积](https://towardsdatascience.com/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)
    [## 傅里叶变换在时间序列中的应用：用 numpy 解释快速卷积'
- en: 10000-times faster convolution using Fourier transform
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用傅里叶变换实现的卷积速度提高了10000倍
- en: towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[傅里叶变换在时间序列中的应用：用 numpy 解释快速卷积](https://towardsdatascience.com/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)'
- en: '**Quick review of the previous post**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**上一篇文章的快速回顾**'
- en: In the first post, I explained how the Fourier-transform can be used to convolve
    signals **very efficiently**. I showed that convolution using the Fourier-transform
    in *numpy* is many orders of magnitude faster that the standard algebraic approach,
    and that it corresponds to a certain type of convolution called **circular convolution.**
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我解释了傅里叶变换如何**非常高效**地卷积信号。我展示了使用傅里叶变换的卷积在*numpy*中比标准代数方法快了多个数量级，并且它对应于一种叫做**循环卷积**的卷积类型。
- en: In this post, I want to emphasize what the circular convolution means and how
    it all applies to images. Images are also a good way to extend the 1-dimension
    intuition into 2 dimensions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想强调循环卷积的含义以及它如何应用于图像。图像也是将一维直观扩展到二维的一个好方法。
- en: '*All images were made by the author.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图像均由作者制作。*'
- en: '**Image convolution with scipy**'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用 scipy 的图像卷积**'
- en: If you’ve ever worked with images for image processing, you most likely have
    encountered functions to apply convolution. Convoluting images is used everywhere
    — image enhancement, denoising, segmentation, feature extraction, compression
    — and is at the base of Convolutionnal Neural Networks, the gold standard of deep
    learning model to process visual data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经处理过图像处理中的图像，你很可能遇到过用于应用卷积的函数。图像卷积在各个领域都被广泛应用——图像增强、去噪、分割、特征提取、压缩——并且是卷积神经网络的基础，卷积神经网络是处理视觉数据的深度学习模型的黄金标准。
- en: In *Python*, image convolution can be done quite simply using *scipy* and its
    *ndimage* subpackage. At this point, I recommend taking a quick look at [the documentation
    of the `convolve` function](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html),
    and then come back here.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Python*中，图像卷积可以通过使用*scipy*及其*ndimage*子包来简单实现。此时，我建议快速查看一下[`convolve`函数的文档](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html)，然后再回来继续阅读。
- en: '[## scipy.ndimage.convolve - SciPy v1.11.1 Manual'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[## scipy.ndimage.convolve - SciPy v1.11.1 手册'
- en: 'Multidimensional convolution. The array is convolved with the given kernel.
    Parameters: The input array. Array of…'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多维卷积。数组与给定的内核进行卷积。参数：输入数组。数组…
- en: docs.scipy.org](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html?source=post_page-----5e8fa1279603--------------------------------)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.scipy.org](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html?source=post_page-----5e8fa1279603--------------------------------)'
- en: 'The use is very simple: you can pass two images to convolve them together.
    Let’s see an example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法非常简单：你可以传递两个图像以进行卷积。让我们看一个例子：
- en: '[Note that *scipy* proposes several ways to handle the boundaries using the
    parameter ‘*mode*’](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html):
    as we will see below, the mode ‘*wrap*’ corresponds to circular convolution and
    hence to convolution using a Fourier-transform approach. Other approaches exist,
    like ‘*reflect*’ that reflects the images inside-out, or ‘*constant*’ that repeats
    the outermost value. Notice also how ‘*wrap*’ works: it repeats the whole signal,
    as if it was periodic.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[注意*scipy*提供了几种使用参数‘*mode*’处理边界的方法](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html)：如下面所示，模式‘*wrap*’对应于循环卷积，因此对应于使用傅里叶变换的方法。还存在其他方法，如‘*reflect*’，它将图像内外翻转，或‘*constant*’，它重复最外层的值。还要注意‘*wrap*’的工作方式：它重复整个信号，就好像它是周期性的。'
- en: Convolution of 2D images
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2D图像的卷积
- en: Let’s start coding to see the differences between different convolution modes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始编码以查看不同卷积模式之间的差异。
- en: 'First, we create a class to represent 2D periodic images: remember from the
    previous post that when using Fourier-transform tool, the signal are considered
    to be periodic. This class is just syntactic sugar to plot such 2d periodic arrays.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个类来表示2D周期性图像：记住在上一篇文章中，当使用傅里叶变换工具时，信号被认为是周期性的。这个类只是用于绘制这种2D周期数组的语法糖。
- en: We show the “*base*” image in the [0, V, 0, H] rectangle, as well as its 8 first
    replicas around. As stated in the previous post, the signal is considered periodic
    hence with infinite support, but we only need and use a single period.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[0, V, 0, H]矩形中展示了“*基*”图像，以及其周围的前8个复制品。如前一篇文章所述，信号被视为周期性的，因此具有无限支持，但我们只需要并使用一个周期。
- en: 'Let’s now create a sample image to play with: it shall contain random noise,
    a sinusoidal pattern, a slope pattern, and a few square spots. We also create
    the periodic version of this sample image: it represents the periodic image that
    the Fourier-transform considers when applying its operators:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个样本图像进行测试：它应包含随机噪声、正弦波模式、斜坡模式和几个方形斑点。我们还创建了此样本图像的周期版本：它表示傅里叶变换在应用其算子时所考虑的周期图像。
- en: '![](../Images/d83fc9efe9fa95558a7975252b8de358.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d83fc9efe9fa95558a7975252b8de358.png)'
- en: Input image we are going to convolve, represented as a periodic array. The “base”
    image is in the center, with its replicas all around.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要进行卷积的输入图像，以周期数组表示。中心是“基”图像，其复制品围绕四周。
- en: 'Let’s now create a kernel to use for the convolution: we’ll use a simple constant
    kernel, also called averaging kernel since the convolution with this kernel just
    gives the local average of the input image.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个用于卷积的内核：我们将使用一个简单的常量内核，也称为平均内核，因为与此内核的卷积仅给出输入图像的局部平均值。
- en: 'We then start playing with *scipy* convolution function and its differents
    *modes* to handle the boundaries, and wrap the result as a periodic array for
    easy plotting: notice how the middle of the convoluted image is always the same
    whatever the *mode* used, but the boundaries vary.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们开始使用*scipy*的卷积函数及其不同的*modes*来处理边界，并将结果包装为周期数组以便于绘图：注意卷积图像的中间部分总是相同的，无论使用何种*mode*，但边界会有所不同。
- en: '![](../Images/d37359d9096e6e2f4793b6f9dc3264b7.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d37359d9096e6e2f4793b6f9dc3264b7.png)'
- en: Results of 4 different types of ‘mode’ to handle boundaries with scipy convolution
    function. Each result image is displayed as a periodic array.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 scipy 卷积函数处理边界的 4 种不同“模式”的结果。每个结果图像都显示为周期数组。
- en: 'Now we can use a Fourier-transform approach to compute the convolution: as
    shown in the previous post, we just need to take the inverse Fourier-transform
    of the product of the Fourier-transform of both signals, the image and the kernel:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用傅里叶变换方法来计算卷积：如前一篇文章所示，我们只需要对两个信号的傅里叶变换的乘积进行逆傅里叶变换，即图像和内核：
- en: '![](../Images/f47345d7022b328ceef0d96f7fcf26c9.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f47345d7022b328ceef0d96f7fcf26c9.png)'
- en: Base equation to compute the convolution of 2 signals using a Fourier-transform
    approach.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个信号的卷积的基本方程，使用傅里叶变换方法。
- en: '![](../Images/8a8147b6ae4c56d247b7b967a068dbbe.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a8147b6ae4c56d247b7b967a068dbbe.png)'
- en: Result of the convolution using a Fourier-transform approach, not scipy.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用傅里叶变换方法的卷积结果，而不是 scipy。
- en: 'Comparing the result with the “wrap” mode of scipy, we can see that the results
    look a lot alike, just with a slight shift:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与 scipy 的“wrap”模式结果进行比较，我们可以看到结果非常相似，只是有一点偏移：
- en: '![](../Images/59d8f26d0b48814ffc697789b7503e2a.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59d8f26d0b48814ffc697789b7503e2a.png)'
- en: Comparison between scipy convolution with mode=’wrap’, and Fourier-transform
    approach. They are almost identical. Using the periodic array representation,
    we can see that it is just a matter of shit.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: scipy 卷积模式=’wrap’和傅里叶变换方法的比较。它们几乎是相同的。使用周期数组表示，我们可以看到这只是一个偏移的问题。
- en: 'This is just a matter of indexing, and we can get the exact same results using
    a shifted-centered kernel:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个索引的问题，我们可以使用移位中心化内核得到完全相同的结果：
- en: '![](../Images/413f7f65fb24ad068aa626d4d3edc5e9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/413f7f65fb24ad068aa626d4d3edc5e9.png)'
- en: 'Comparison between convolution with scipy mode=’wrap’ (left), and 2 Fourier-trasnform
    approach: with kernel padded on the sides (middle), and centered kernel (right).
    The left and right image are identical.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 scipy 模式=’wrap’（左侧）的卷积与两种傅里叶变换方法的比较：在两侧填充内核（中间）和中心化内核（右侧）。左侧和右侧的图像是相同的。
- en: Using proper centering, we then got identical results between *scipy*’s convolution
    with mode=’*wrap*’, and theFourier-transform approach.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用适当的中心化，我们得到了*scipy*的卷积与模式=’*wrap*’以及傅里叶变换方法之间的相同结果。
- en: 'Out of curiosity, let’s see which approach is faster:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 出于好奇，我们来看看哪种方法更快：
- en: '![](../Images/9b5e53ffe4aabce07e8b04350ce6f043.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b5e53ffe4aabce07e8b04350ce6f043.png)'
- en: 'Time comparison between scipy and Fourier-transform to compute the convolution
    between our 2 images: Fourier-transform is about 15-times faster than scipy.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: scipy 和傅里叶变换计算两个图像之间卷积的时间比较：傅里叶变换比 scipy 快约15倍。
- en: Again, the Fourier-transform approach was faster, and in this case **faster
    than a scipy function,** which is nice.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，傅里叶变换方法更快，并且在这种情况下**比 scipy 函数更快**，这很棒。
- en: Wrap up
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have seen in this post how the circular convolution translates to images,
    and how it is equivalent to scipy convolution function using mode=’wrap’.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这篇文章中看到圆形卷积如何转换为图像，以及它如何等同于使用模式=’wrap’的 scipy 卷积函数。
- en: In the next post, we’ll dive in the use of window functions in the context of
    Fourier-transform to reduce spectral leakage and improve spectral analysis.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我们将深入探讨在傅里叶变换的背景下使用窗口函数，以减少谱泄漏并改善谱分析。
- en: Subscribe to get future posts about Fourier transform directly onto your feed!
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订阅以直接在您的动态中获取有关傅里叶变换的未来帖子！
- en: 'Also, check out my other posts and if you like any of them, please subscribe
    it helps me a lot to reach my goal of 100 subscribers:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请查看我的其他帖子，如果您喜欢其中的任何帖子，请订阅，这对我实现100名订阅者的目标帮助很大：
- en: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)
    [## Fourier transform for time-series: fast convolution explained with numpy'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)
    [## 傅里叶变换在时间序列中的应用：使用 numpy 解释的快速卷积'
- en: 10000-times faster convolution using Fourier transform
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用傅里叶变换实现的卷积速度快10000倍
- en: 'towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)
    [](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----5e8fa1279603--------------------------------)
    [## PCA/LDA/ICA: a components analysis algorithms comparison'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[## PCA/LDA/ICA: 组件分析算法比较](https://towardsdatascience.com/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----5e8fa1279603--------------------------------)'
- en: Review the concepts and differences between these famous algorithms.
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复习这些著名算法的概念和区别。
- en: 'towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----5e8fa1279603--------------------------------)
    [](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----5e8fa1279603--------------------------------)
    [## PCA-whitening vs ZCA-whitening: a numpy 2d visual'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[## PCA-whitening vs ZCA-whitening: 一个 numpy 2d 可视化](https://towardsdatascience.com/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----5e8fa1279603--------------------------------)'
- en: The process of whitening data consists in a transformation such that the transformed
    data has identity matrix as…
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据的 whitening 过程包括一个变换，使得变换后的数据具有单位矩阵作为…
- en: towardsdatascience.com](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----5e8fa1279603--------------------------------)
    [](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----5e8fa1279603--------------------------------)
    [## 300-times faster resolution of Finite-Difference Method using numpy
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 比有限差分法快300倍的分辨率使用 numpy](https://towardsdatascience.com/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----5e8fa1279603--------------------------------)'
- en: Finite-difference method is a powerfull technique to solve complex problems,
    and numpy makes it fast !
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有限差分法是一种强大的技术，用于解决复杂问题，而 numpy 使其变得更快！
- en: towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----5e8fa1279603--------------------------------)
    [](/interactive-plotting-the-well-know-rc-circuit-in-jupyter-d153c0e9d3a?source=post_page-----5e8fa1279603--------------------------------)
    [## Interactive plotting the well-know RC-circuit in Jupyter
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 在 Jupyter 中交互式绘制知名的 RC 电路](https://towardsdatascience.com/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----5e8fa1279603--------------------------------)'
- en: Another step into ipywidgets and matplotlib
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另一阶段的 ipywidgets 和 matplotlib
- en: towardsdatascience.com](/interactive-plotting-the-well-know-rc-circuit-in-jupyter-d153c0e9d3a?source=post_page-----5e8fa1279603--------------------------------)
    [](/wrapping-numpys-arrays-971e015e14bb?source=post_page-----5e8fa1279603--------------------------------)
    [## Wrapping numpy’s arrays
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 封装 numpy 的数组](https://towardsdatascience.com/interactive-plotting-the-well-know-rc-circuit-in-jupyter-d153c0e9d3a?source=post_page-----5e8fa1279603--------------------------------)'
- en: The container approach.
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器方法。
- en: towardsdatascience.com](/wrapping-numpys-arrays-971e015e14bb?source=post_page-----5e8fa1279603--------------------------------)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 封装 numpy 的数组](https://towardsdatascience.com/wrapping-numpys-arrays-971e015e14bb?source=post_page-----5e8fa1279603--------------------------------)'
- en: If those articles seem interesting to you, remember to follow me, the new articles
    will appear on your feed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些文章对你感兴趣，记得关注我，新文章会出现在你的信息流中。
