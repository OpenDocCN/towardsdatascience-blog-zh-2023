- en: Testing Python Code With Pytest — For Beginners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pytest 测试 Python 代码——适合初学者
- en: 原文：[https://towardsdatascience.com/testing-python-code-with-pytest-for-beginners-bcde301e7453](https://towardsdatascience.com/testing-python-code-with-pytest-for-beginners-bcde301e7453)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/testing-python-code-with-pytest-for-beginners-bcde301e7453](https://towardsdatascience.com/testing-python-code-with-pytest-for-beginners-bcde301e7453)
- en: Overview and Implementation With Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 的概述与实现
- en: '[](https://medium.com/@aashishnair?source=post_page-----bcde301e7453--------------------------------)[![Aashish
    Nair](../Images/23f4b3839e464419332b690a4098d824.png)](https://medium.com/@aashishnair?source=post_page-----bcde301e7453--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bcde301e7453--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bcde301e7453--------------------------------)
    [Aashish Nair](https://medium.com/@aashishnair?source=post_page-----bcde301e7453--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@aashishnair?source=post_page-----bcde301e7453--------------------------------)[![Aashish
    Nair](../Images/23f4b3839e464419332b690a4098d824.png)](https://medium.com/@aashishnair?source=post_page-----bcde301e7453--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bcde301e7453--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bcde301e7453--------------------------------)
    [Aashish Nair](https://medium.com/@aashishnair?source=post_page-----bcde301e7453--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bcde301e7453--------------------------------)
    ·8 min read·Apr 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bcde301e7453--------------------------------)
    ·阅读时间 8 分钟·2023年4月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c8878181dbd849d86d9719658b424a99.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c8878181dbd849d86d9719658b424a99.png)'
- en: 'Photo by Pixabay: [https://www.pexels.com/photo/blur-business-close-up-code-270557/](https://www.pexels.com/photo/blur-business-close-up-code-270557/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源： [https://www.pexels.com/photo/blur-business-close-up-code-270557/](https://www.pexels.com/photo/blur-business-close-up-code-270557/)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: When maintaining a data pipeline, it’s important to test the underlying code
    after making any changes. That way, you can be alerted whenever any refactored
    code fails to perform as expected.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在维护数据管道时，在进行任何更改后测试底层代码是很重要的。这样，你可以在任何重构的代码无法按预期执行时得到提醒。
- en: Most beginners tend to test their code manually, running their functions against
    different arguments one at a time. This approach is simple, but it does not scale
    well.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数初学者倾向于手动测试他们的代码，一次运行一个函数，针对不同的参数。这种方法很简单，但扩展性不好。
- en: Testing a piece of code against a set of arguments once shouldn’t be very time-consuming,
    but how long would it take to do it 10 times? 50 times? 100 times?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对一段代码进行一次性测试不应花费太多时间，但如果要进行10次？50次？100次呢？
- en: In projects that span months or years, where a data pipeline’s underlying code
    is frequently refactored, testing code manually will cost programmers a considerable
    amount of time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续数月或数年的项目中，数据管道的底层代码经常被重构，手动测试代码将耗费程序员大量时间。
- en: Those taking on long-term projects will benefit from automating this process
    by using [**pytest**](https://docs.pytest.org/en/7.2.x/), a Python testing framework
    that enables users to execute tests with little code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从事长期项目的人将从自动化这个过程中受益，使用 [**pytest**](https://docs.pytest.org/en/7.2.x/) 这个 Python
    测试框架，用户可以通过少量代码执行测试。
- en: Here, we uncover the benefits of pytest and show how data scientists can leverage
    this package to write basic tests through a case study.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们揭示了 pytest 的好处，并展示数据科学家如何通过案例研究利用这个包来编写基本测试。
- en: Is Pytest Worth The Effort?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pytest 值得付出努力吗？
- en: 'Writing test with pytest requires users to learn the new framework and even
    adopt new programming habits. So, it might be tempting to shun this tool and stick
    to testing code by manually running it on kernels in a Jupyter Notebook (confession:
    this used to be me).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pytest 编写测试要求用户学习新的框架，甚至养成新的编程习惯。因此，可能会有抛弃这个工具、继续在 Jupyter Notebook 的内核上手动运行代码的诱惑（坦白说，这曾经是我）。
- en: However, the benefits of pytest more than make up for the time and effort it
    takes to learn to write them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，pytest 的好处远远弥补了学习编写测试所需的时间和精力。
- en: '**Pytest requires little run time**'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Pytest 运行时间很短**'
- en: The time needed to run the given tests is negligible. Moreover, thanks to the
    pytest package’s easy syntax, a single command is sufficient for running all tests
    against the pre-defined arguments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行给定测试所需的时间微不足道。此外，得益于 pytest 包的简单语法，一条命令就足以运行所有测试。
- en: '**2\. Pytest improves the debugging experience**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. Pytest 改善调试体验**'
- en: The reports generated by pytest are very informative. They identify the tests
    that pass/fail, while also pointing out the cause of the failed tests. This makes
    it easier for programmers to spot their mistake and rectify it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: pytest 生成的报告非常详尽。它们标识了通过/失败的测试，同时指出了失败测试的原因。这使得程序员更容易发现并纠正错误。
- en: '**3\. Pytest provides documentation**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. Pytest 提供文档**'
- en: The scripts written with pytest serve as an additional piece of documentation.
    Collaborators looking to understand a piece of code can use the test functions
    to determine its purpose without needing to skim through endless lines of source
    code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pytest 编写的脚本作为额外的文档。希望理解一段代码的合作者可以使用测试函数来确定其目的，而无需浏览大量的源代码。
- en: '**4\. Pytest breeds confidence**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. Pytest 增强信心**'
- en: With pytest, users can safely push code to production knowing that the code
    still performs as expected. This allays any fears that data scientists may have
    of pushing code that sabotages the data pipeline.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pytest，用户可以安全地将代码推送到生产环境，知道代码仍能按预期执行。这消除了数据科学家对推送可能破坏数据管道的代码的担忧。
- en: Case Study
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究
- en: 'For this case study, we will write a number of test functions using pytest
    to test the functions in the `module.py` file. This file contains two functions:
    `add_lists` and `subtract_lists`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个案例研究，我们将编写一些测试函数，使用 pytest 测试 `module.py` 文件中的函数。这个文件包含两个函数：`add_lists`
    和 `subtract_lists`。
- en: 'The `add_lists` function merges two lists by adding the numbers in each element.
    For instance:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_lists` 函数通过将列表中每个元素的数字相加来合并两个列表。例如：'
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `subtract_lists` function merges two lists by subtracting the numbers in
    each element from the lists. For instance:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`subtract_lists` 函数通过从列表中的每个元素中减去数字来合并两个列表。例如：'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Setting Up the Environment
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'First, install pytest by running the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过运行以下命令来安装 pytest：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Long-term projects tend to comprise multiple scripts, so it is common practice
    for the written tests to be placed in a separate folder that doesn’t contain the
    source code. For this case study, we will adhere to this practice by setting up
    the project in the following manner.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 长期项目通常包含多个脚本，因此将编写的测试放在不包含源代码的单独文件夹中是一种常见做法。对于本案例研究，我们将通过以下方式设置项目，遵循这一做法。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The file named `test_module.py` will store all of the test functions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 名为 `test_module.py` 的文件将存储所有的测试函数。
- en: Writing Our First Tests
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写我们的第一个测试
- en: 'Now, we can write our first test functions, which test the `add_lists` and
    `subtract_lists` functions. As explained by the [pytest documentation](https://docs.pytest.org/en/7.1.x/explanation/anatomy.html),
    a test typically has 4 steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以编写我们的第一个测试函数，测试 `add_lists` 和 `subtract_lists` 函数。如 [pytest 文档](https://docs.pytest.org/en/7.1.x/explanation/anatomy.html)
    所述，测试通常有 4 个步骤：
- en: '**Arrange**: Prepare everything needed for the test.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安排**：为测试准备所有必要的内容。'
- en: '**Act**: Run the function that is being tested'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**行动**：运行正在测试的函数'
- en: '**Assert**: Check if the tested code’s output matches what was expected.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**断言**：检查测试代码的输出是否符合预期。'
- en: '**Cleanup**: Remove any objects generated from the test (if any) so that other
    tests aren’t affected. This step is optional.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**清理**：删除测试中生成的任何对象（如果有的话），以免影响其他测试。此步骤是可选的。'
- en: Let’s write two test functions that follow these steps.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写两个遵循这些步骤的测试函数。
- en: 'Note: The test functions in pytest *must* follow the form `test_*.py` or `\*_test.py`
    to be executed.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：pytest 中的测试函数 *必须* 遵循 `test_*.py` 或 `\*_test.py` 的格式才能被执行。
- en: In the snippet above, we *arrange* the tests by establishing the input lists
    as well as the expected outputs. Then, we *act* by running the `add_lists` and
    `subtract_lists` functions with the provided inputs. Finally, we *assert* by using
    assert statements to check if the returned values match the expected values.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们 *安排* 测试，通过建立输入列表以及预期的输出。然后，我们 *行动*，通过使用提供的输入运行 `add_lists` 和 `subtract_lists`
    函数。最后，我们 *断言*，使用断言语句检查返回值是否与预期值匹配。
- en: 'Note: Assert statements are a core component in many tests. If you’re unfamiliar
    with the syntax of assert statements or just need a refresher, check out the following
    article:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：断言语句是许多测试中的核心组件。如果你不熟悉断言语句的语法或需要复习，可以查看以下文章：
- en: '[](/debugging-in-python-is-easy-with-with-assert-statements-ff333bfb3388?source=post_page-----bcde301e7453--------------------------------)
    [## Debugging in Python Is Easy With With Assert Statements'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/debugging-in-python-is-easy-with-with-assert-statements-ff333bfb3388?source=post_page-----bcde301e7453--------------------------------)
    [## 使用断言语句在 Python 中轻松调试'
- en: A look into a tool that allows a pain-free troubleshooting experience
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解一个允许轻松故障排除的工具
- en: towardsdatascience.com](/debugging-in-python-is-easy-with-with-assert-statements-ff333bfb3388?source=post_page-----bcde301e7453--------------------------------)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/debugging-in-python-is-easy-with-with-assert-statements-ff333bfb3388?source=post_page-----bcde301e7453--------------------------------)
- en: 'Tests can be run by using the following command in the command line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令在命令行中运行测试：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Interpreting The Pytest Report
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解读 Pytest 报告
- en: 'Let’s get familiar with the pytest report by running the tests in the `test_module.py`
    file with the command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 `test_module.py` 文件中的测试，我们可以熟悉 pytest 报告，命令如下：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If all test functions pass, the report will look like the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有测试函数都通过，报告将如下所示：
- en: '![](../Images/e9b7ab331e419adfd6659c5034e8d4e5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9b7ab331e419adfd6659c5034e8d4e5.png)'
- en: Command Output (Created By Author)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出（由作者创建）
- en: 'If one or more test functions fail, the report will look like the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个或多个测试函数失败，报告将如下所示：
- en: '![](../Images/a66bc48f17c1a254599eec9b5ccd7d0f.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a66bc48f17c1a254599eec9b5ccd7d0f.png)'
- en: Command Output (Created By Author)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出（由作者创建）
- en: As shown by the outputs, test functions that pass are denoted with the `.` character,
    while test functions that fail are denoted with the `F` character.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，通过 `.` 字符表示通过的测试函数，通过 `F` 字符表示失败的测试函数。
- en: When a test fails, the report points to the assert statement that isn’t being
    met with the `>` symbol and presents the error message right under it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试失败时，报告会用 `>` 符号指向未满足的断言语句，并在其下方显示错误信息。
- en: Overall, the reports generated by pytest are very informative. They tell us
    how many tests were run, how many tests passed/failed, and why the tests failed
    (if they did).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，pytest 生成的报告非常有用。它们告诉我们运行了多少测试，多少测试通过/失败，以及测试失败的原因（如果有的话）。
- en: Generating Reports With Greater Verbosity
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成更详细的报告
- en: The `pytest <file_name>` command is sufficient for running tests, but if you
    want to increase the amount of information reported in the output, you can simply
    use the -v flag.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest <file_name>` 命令足以运行测试，但如果你想增加输出中报告的信息量，只需使用 -v 标志。'
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s see the pytest report again after using the -v flag.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 -v 标志后，再次查看 pytest 报告。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/4a66852f4b9cd305bb3887a9089736f5.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a66852f4b9cd305bb3887a9089736f5.png)'
- en: Command Output (Created By Author)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出（由作者创建）
- en: This time, we can explicitly see the name of the test functions as well as their
    outcomes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们可以明确看到测试函数的名称及其结果。
- en: Testing a Function With Multiple Arguments
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多个参数测试函数
- en: The `test_add_lists` function currently tests the `add_lists` function with
    only one case. However, there are many situations where functions need to be tested
    with multiple cases.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_add_lists` 函数目前仅测试了一个 `add_lists` 函数的情况。然而，有很多情况需要用多个案例来测试函数。'
- en: 'Take the `add_lists` function for example. Although adding numbers in two lists
    is a simple task, there are a few edge cases that need to be considered:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `add_lists` 函数为例。虽然将两个列表中的数字相加是一个简单的任务，但需要考虑一些边界情况：
- en: Adding lists with unequal length
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加长度不等的列表
- en: Adding empty lists
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加空列表
- en: Adding lists with strings
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加包含字符串的列表
- en: We could test the `add_lists` function with all of these cases by creating test
    functions that test one case each.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建测试每个案例的测试函数来测试 `add_lists` 函数的所有这些情况。
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, that would require repeating many lines of code. Instead, we can run
    tests against multiple inputs by using the `pytest.mark.parametrize` decorator.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这将需要重复许多行代码。相反，我们可以通过使用 `pytest.mark.parametrize` 装饰器对多个输入运行测试。
- en: 'We can modify the current `test_add_lists` function so that it tests multiple
    arguments with the following snippet:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改当前的 `test_add_lists` 函数，使其使用以下代码片段测试多个参数：
- en: This time, the `pytest.mark.parametrize`decorator defines 3 inputs as well as
    the expected outputs. This serves as the *arrange* phase of the test. The *act*
    and *assert* phases don’t need to be changed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`pytest.mark.parametrize` 装饰器定义了 3 个输入以及期望的输出。这是测试的 *安排* 阶段。*执行* 和 *断言* 阶段不需要改变。
- en: 'When we execute the test for this function, we get the following results:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行该函数的测试时，我们得到如下结果：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/2cf2c56337e7bbed69db7208c999c052.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2cf2c56337e7bbed69db7208c999c052.png)'
- en: Command Output (Created By Author)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出（作者创建）
- en: As shown by the generated report, each input is defined in the `pytest.mark.parametrize`
    decorator is treated as an individual test. Hence, the report shows the results
    of 3 tests.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如生成的报告所示，`pytest.mark.parametrize` 装饰器中定义的每个输入都被视为一个独立的测试。因此，报告显示了 3 个测试的结果。
- en: Testing Multiple Functions With the Same Data
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用相同数据测试多个函数
- en: So far, we have been creating the input data inside each test function.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在每个测试函数内部创建输入数据。
- en: 'This begs the question: how should we approach tests where we wish to test
    multiple functions with the *same* data?'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了一个问题：我们应该如何处理那些希望用 *相同* 数据测试多个函数的测试？
- en: The simplest approach would be to instantiate the same input data inside each
    function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是在每个函数内部实例化相同的输入数据。
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However, this is an undesirable practice for a number of reasons.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于许多原因，这是一种不理想的做法。
- en: Firstly, it would entail repeating the same lines of code, which hampers readability.
    Secondly, loading data repeatedly can be a time-consuming and computationally
    intensive process. If the data needed for tests comes from a database or flat
    file, performing reads repeatedly on the same data would be highly inefficient.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这将涉及重复相同的代码行，这会影响可读性。其次，重复加载数据可能是一个耗时且计算密集的过程。如果测试所需的数据来自数据库或平面文件，重复读取相同的数据将非常低效。
- en: Fortunately, users of pytest can resolve this issue by using **fixtures**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，pytest 的用户可以通过使用 **fixtures** 来解决这个问题。
- en: A fixture is a function that uses the `pytest.fixture` decorator. It returns
    the data needed for subsequent tests. Tests that need data from a fixture can
    access it by passing the fixture function as an argument.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: fixture 是一个使用 `pytest.fixture` 装饰器的函数。它返回后续测试所需的数据。需要从 fixture 获取数据的测试可以通过将
    fixture 函数作为参数传递来访问这些数据。
- en: As an example, let’s suppose that we wish to test the `add_lists` and `subtract_lists`
    functions with the same data.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们希望用相同的数据测试 `add_lists` 和 `subtract_lists` 函数。
- en: To do so, we can first create a function with the `pytest.fixture` decorator
    called `example_data` that returns the data that will be used for the tests.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以首先创建一个带有 `pytest.fixture` 装饰器的函数，名为 `example_data`，它返回用于测试的数据。
- en: This data can be accessed by the test functions `test_add_list` and `test_subtract_lists`
    by passing the `example_data` function as the argument.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据可以通过将 `example_data` 函数作为参数传递来让测试函数 `test_add_list` 和 `test_subtract_lists`
    访问。
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/9edcd367271682a072f6d22dd0024b06.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9edcd367271682a072f6d22dd0024b06.png)'
- en: Command Output (Created By Author)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 命令输出（作者创建）
- en: Conclusion
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: '![](../Images/ad64f905a5de98635a3377a89df8f3cd.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ad64f905a5de98635a3377a89df8f3cd.png)'
- en: Photo by [Prateek Katyal](https://unsplash.com/it/@prateekkatyal?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Prateek Katyal](https://unsplash.com/it/@prateekkatyal?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Well done! You have now learned to write and run basic tests with pytest!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！你现在已经学会了如何使用 pytest 编写和运行基本测试！
- en: While this beginner-level case study doesn’t provide a comprehensive breakdown
    of all the features in pytest, it has hopefully encouraged users to embrace the
    practice of writing scripts using the package for a more structured, efficient,
    and scalable approach toward testing.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个初学者级别的案例研究没有提供 pytest 所有功能的全面分析，但它希望鼓励用户采用使用该软件包编写脚本的实践，以实现更结构化、高效和可扩展的测试方法。
- en: I wish you the best of luck in your data science endeavors!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你在数据科学的事业中好运！
