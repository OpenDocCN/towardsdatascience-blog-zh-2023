- en: Tips and Tricks to improve your R-Skills
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高你 R 技能的技巧和窍门
- en: 原文：[https://towardsdatascience.com/tips-and-tricks-to-improve-your-r-skills-b0f58006d0c1](https://towardsdatascience.com/tips-and-tricks-to-improve-your-r-skills-b0f58006d0c1)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/tips-and-tricks-to-improve-your-r-skills-b0f58006d0c1](https://towardsdatascience.com/tips-and-tricks-to-improve-your-r-skills-b0f58006d0c1)
- en: Learn how to write efficient R code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何编写高效的 R 代码
- en: '[](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)[![Janik
    and Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)
    [Janik and Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)[![Janik
    和 Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)
    [Janik 和 Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)
    ·8 min read·May 11, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)
    ·阅读时间 8 分钟·2023 年 5 月 11 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3c7d8cfed6ec4c5e7c742a51f3b4abbc.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c7d8cfed6ec4c5e7c742a51f3b4abbc.png)'
- en: 1234567890-=Photo by [AltumCode](https://unsplash.com/es/@altumcode?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 1234567890-=照片来源于 [AltumCode](https://unsplash.com/es/@altumcode?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**R** is widely used in business and science as a data analysis tool. The programming
    language is an essential tool for data driven tasks. For many Statisticians and
    Data Scientists, R is the first choice for statistical questions.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**R** 广泛用于商业和科学领域作为数据分析工具。该编程语言是数据驱动任务的基本工具。对于许多统计学家和数据科学家来说，R 是解决统计问题的首选。'
- en: Data Scientists often work with large amounts of data and complex statistical
    problems. Memory and runtime play a central role here. You need to write efficient
    code to achieve maximum performance. In this article, we present tips that you
    can use directly in your next R project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家们通常处理大量数据和复杂的统计问题。内存和运行时间在这里扮演了重要角色。你需要编写高效的代码以实现最佳性能。在本文中，我们将介绍一些可以直接在下一个
    R 项目中使用的技巧。
- en: Use code profiling
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码性能分析
- en: Data Scientists often want to optimise their code to make it faster. In some
    cases, you will trust your intuition and try something out. This approach has
    the disadvantage that you probably optimise the wrong parts of your code. So you
    waste time and effort. You can only optimise your code if you know where your
    code is slow. The solution is **code profiling**. Code profiling helps you find
    slow code parts!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家们经常希望优化他们的代码以提高运行速度。在某些情况下，你会依赖直觉尝试一些方法。这种方法的缺点是你可能优化了代码的错误部分，因此浪费了时间和精力。只有了解代码慢的部分，才能进行优化。解决方案是
    **代码性能分析**。代码性能分析可以帮助你找到慢的代码部分！
- en: '[Rprof()](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/Rprof)
    is a built-in tool for code profiling. Unfortunately, Rprof() is not very user-friendly,
    so we do not recommend its direct use. We recommend the [profvis](http://rstudio.github.io/profvis/)
    package. Profvis allows the visualisation of the code profiling data from Rprof().
    You can install the package via the R console with the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Rprof()](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/Rprof)
    是一个内置的代码性能分析工具。不幸的是，Rprof() 并不是很用户友好，因此我们不推荐直接使用它。我们推荐使用 [profvis](http://rstudio.github.io/profvis/)
    包。Profvis 允许可视化来自 Rprof() 的代码性能数据。你可以通过 R 控制台使用以下命令来安装该包：'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the next step, we do code profiling using an example.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将通过一个示例进行代码性能分析。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you run this code in your [RStudio](https://posit.co/downloads/), then you
    will get the following output.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 [RStudio](https://posit.co/downloads/) 中运行这段代码，你将得到以下输出。
- en: '![](../Images/e04e59d597c4247d6720c46a1c7beddf.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e04e59d597c4247d6720c46a1c7beddf.png)'
- en: Flame Graph (Image by authors)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 火焰图（图片由作者提供）
- en: At the top, you can see your R code with bar graphs for memory and runtime for
    each line of code. This display gives you an overview of possible problems in
    your code but does not help you to identify the exact cause. In the memory column,
    you can see how much memory (in MB) has been allocated (the bar on the right)
    and released (the bar on the left) for each call. The time column shows the runtime
    (in ms) for each line. For example, you can see that line 4 takes 280 ms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部，你可以看到你的 R 代码以及每行代码的内存和运行时间条形图。这种显示方式提供了代码中可能存在的问题的概览，但无法帮助你确定确切的原因。在内存列中，你可以看到每次调用分配的内存（右侧条形图）和释放的内存（左侧条形图）（以
    MB 为单位）。时间列显示每行代码的运行时间（以 ms 为单位）。例如，你可以看到第 4 行的时间为 280 ms。
- en: At the bottom, you can see the ***Flame Graph*** with the full called stack.
    This graph gives you an overview of the whole sequence of calls. You can move
    the mouse pointer over individual calls to get more information. It is also noticeable
    that the garbage collector (<GC>) takes a lot of time. But why? In the memory
    column, you can see in line 4 that there is an increased memory requirement. A
    lot of memory is allocated and released in line 4\. Each iteration creates another
    copy of `y`, resulting in increased memory usage. **Please avoid such copy-modify
    tasks!**
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，你可以看到带有完整调用栈的***火焰图***。该图提供了整个调用序列的概览。你可以将鼠标指针移动到单个调用上以获取更多信息。还可以注意到垃圾回收器（<GC>）消耗了大量时间。为什么呢？在内存列中，你可以看到第
    4 行的内存需求增加。第 4 行分配并释放了大量内存。每次迭代都会创建 `y` 的另一个副本，导致内存使用增加。**请避免这种复制-修改的任务！**
- en: You can also use the ***Data tab***. The ***Data tab*** gives you a compact
    overview of all calls and is particularly suitable for complex nested calls.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用***数据选项卡***。***数据选项卡***为你提供了所有调用的简洁概述，特别适合复杂的嵌套调用。
- en: '![](../Images/1529ea37bf7bfacfbf002501623cf37a.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1529ea37bf7bfacfbf002501623cf37a.png)'
- en: Data Tab (Image by authors)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据选项卡（图像由作者提供）
- en: If you want to learn more about provis, you can visit the [Github](https://github.com/rstudio/profvis)
    page.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 provis 的信息，你可以访问 [Github](https://github.com/rstudio/profvis) 页面。
- en: Vectorise your code
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量化你的代码
- en: Maybe you have heard of vectorisation. But what is that? Vectorisation is not
    just about avoiding `for()` loops. It goes one step further. You have to think
    in terms of vectors instead of scalars. Vectorisation is very important to speed
    up R code. Vectorised functions use loops written in C instead of R. Loops in
    C have less overhead, which makes them much faster. Vectorisation means finding
    the existing R function implemented in C that closely matches your task. The functions
    `rowSums()`, `colSums()`, `rowMeans()` and `colMeans()` are handy to speed up
    your R code. These vectorised matrix functions are always faster than the `apply()`
    function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你听说过向量化。那么它是什么呢？向量化不仅仅是避免使用 `for()` 循环。它更进一步。你需要从向量而不是标量的角度来思考。向量化对于加速 R 代码非常重要。向量化的函数使用用
    C 编写的循环，而不是 R。C 中的循环开销更小，使其速度更快。向量化意味着找到在 C 中实现的与任务紧密匹配的现有 R 函数。函数 `rowSums()`、`colSums()`、`rowMeans()`
    和 `colMeans()` 对加速你的 R 代码非常有用。这些向量化矩阵函数总是比 `apply()` 函数更快。
- en: 'To measure the runtime, we use the R package [microbenchmark](https://cran.r-project.org/web/packages/microbenchmark/microbenchmark.pdf).
    In this package, the evaluations of all expressions are done in C to minimise
    the overhead. As an output, the package provides an overview of statistical indicators.
    You can install the microbenchmark package via the R Console with the following
    command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测量运行时间，我们使用了 R 包 [microbenchmark](https://cran.r-project.org/web/packages/microbenchmark/microbenchmark.pdf)。在这个包中，所有表达式的评估都在
    C 中完成，以最小化开销。作为输出，该包提供了统计指标的概述。你可以通过 R 控制台使用以下命令安装 microbenchmark 包：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we compare the runtime of the `apply()` function with the `colMeans()`
    function. The following code example demonstrates it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将 `apply()` 函数的运行时间与 `colMeans()` 函数进行比较。以下代码示例演示了这一点。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In both cases, we calculate the mean value of each column of a data frame. To
    ensure the reliability of the result, we make 100 runs (`times=10`) using the
    microbenchmark package. As a result, we see that the `colMeans()` function is
    about three times faster.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们计算数据框每一列的均值。为了确保结果的可靠性，我们使用 microbenchmark 包进行了 100 次运行（`times=10`）。结果显示，`colMeans()`
    函数大约快三倍。
- en: We recommend the online book [R Advanced](https://adv-r.hadley.nz/perf-improve.html)
    if you want to learn more about vectorisation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于向量化的知识，我们推荐在线书籍 [R Advanced](https://adv-r.hadley.nz/perf-improve.html)。
- en: Matrices vs. Data frames
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵与数据框
- en: 'Matrices have some similarities with data frames. A matrix is a two-dimensional
    object. In addition, some functions work in the same way. A difference: All elements
    of a matrix must have the same type. Matrices are often used for statistical calculations.
    For example, the function lm() converts the input data internally into a matrix.
    Then the results are calculated. In general, matrices are faster than data frames.
    Now, we look at the runtime differences between matrices and data frames.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵与数据框有一些相似之处。矩阵是一个二维对象。此外，一些函数的工作方式相同。不同之处在于：矩阵的所有元素必须具有相同的类型。矩阵常用于统计计算。例如，函数`lm()`会将输入数据内部转换为矩阵，然后进行计算。通常，矩阵的速度比数据框快。现在，我们来比较矩阵和数据框之间的运行时间差异。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We perform 100 runs using the microbenchmark package to obtain a meaningful
    statistical evaluation. It is recognisable that the matrix access to the first
    row is about 30 times faster than for the data frame. **That’s impressive!** A
    matrix is significantly quicker, so you should prefer it to a data frame.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 microbenchmark 包进行 100 次运行以获得有意义的统计评估。可以看出，矩阵访问第一行的速度比数据框快约 30 倍。**这非常令人印象深刻！**
    矩阵明显更快，因此你应该优先使用矩阵而不是数据框。
- en: is.na() and anyNA
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is.na() 和 anyNA
- en: You probably know the function `is.na()` to check whether a vector contains
    missing values. There is also the function `anyNA()` to check if a vector has
    any missing values. Now we test which function has a faster runtime.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道函数`is.na()`来检查向量是否包含缺失值。还有函数`anyNA()`来检查向量是否有任何缺失值。现在我们测试哪一个函数的运行时间更快。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The evaluation shows that `anyNA()` is on average, significantly faster than
    `is.na()`. You should use `anyNA()` if possible.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 评估结果表明，`anyNA()` 的平均速度显著快于 `is.na()`。如果可能的话，你应该使用 `anyNA()`。
- en: if() … else() vs. ifelse()
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: if() … else() 与 ifelse()
- en: '`if() ... else()` is the standard control flow function and `ifelse()` is more
    user-friendly.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`if() ... else()` 是标准控制流函数，而 `ifelse()` 更加用户友好。'
- en: '`Ifelse()` works according to the following scheme:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ifelse()`按以下方案工作：'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From the point of view of many programmers, `ifelse()` is more understandable
    than the multiline alternative. The disadvantage is that `ifelse()` is not as
    computationally efficient. The following benchmark illustrates that `if() ...
    else()` runs more than 20 times faster.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从许多程序员的角度来看，`ifelse()` 比多行的替代方案更易于理解。缺点是 `ifelse()` 在计算效率上不如 `if() ... else()`。以下基准测试表明，`if()
    ... else()` 的运行速度比 `ifelse()` 快 20 倍以上。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You should avoid using `ifelse()` in complex loops, as it slows down your program
    considerably.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂循环中应避免使用 `ifelse()`，因为它会显著减慢你的程序速度。
- en: Parallel Computing
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行计算
- en: 'Most computers have several processor cores, allowing parallel tasks to be
    processed. This concept is called parallel computing. The R package [parallel](https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf)
    enables parallel computing in R applications. The package is pre-installed with
    base R. With the following commands, you can load the package and see how many
    cores your computer has:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数计算机有多个处理器核心，可以并行处理任务。这个概念叫做并行计算。R 包 [parallel](https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf)
    实现了 R 应用中的并行计算。该包在基本 R 中预安装。使用以下命令，你可以加载该包并查看你的计算机有多少个核心：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Parallel data processing is ideal for Monte Carlo simulations. Each core independently
    simulates a realisation of the model. In the end, the results are summarised.
    The following example is based on the online book [Efficient R Programming](https://csgillespie.github.io/efficientR/performance.html#performance-parallel).
    First, we need to install the [devtools](https://cran.r-project.org/web/packages/devtools/index.html)
    package. With the help of this package, we can download the [efficient](https://github.com/csgillespie/efficient)
    package from GitHub. You must enter the following commands in the RStudio console:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 并行数据处理非常适合蒙特卡罗模拟。每个核心独立地模拟模型的一个实现。最后，结果被汇总。以下示例基于在线书籍 [Efficient R Programming](https://csgillespie.github.io/efficientR/performance.html#performance-parallel)。首先，我们需要安装
    [devtools](https://cran.r-project.org/web/packages/devtools/index.html) 包。借助此包，我们可以从
    GitHub 下载 [efficient](https://github.com/csgillespie/efficient) 包。你必须在 RStudio
    控制台中输入以下命令：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the efficient package, there is a function `snakes_ladders()` that simulates
    a single game of Snakes and Ladders. We will use the simulation to measure the
    runtime of the `sapply()` and `parSapply()` functions. `parSapply()` is the parallelised
    variant of `sapply()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 efficient 包中，有一个 `snakes_ladders()` 函数，它模拟了一场蛇梯棋游戏。我们将使用模拟来测量 `sapply()` 和
    `parSapply()` 函数的运行时间。`parSapply()` 是 `sapply()` 的并行化变体。
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The evaluation shows that `parSapply()` the simulation calculates on average
    about 3.5 x faster than the `sapply()` function. **Wow!** You can quickly integrate
    this tip into your existing R project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 评估显示，`parSapply()` 的模拟计算速度平均比 `sapply()` 函数快约 3.5 倍。**哇！** 你可以快速将这个技巧融入到你现有的
    R 项目中。
- en: R interface to other languages
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 语言与其他语言的接口
- en: There are cases where R is simply slow. You use all kinds of tricks, but your
    R code is still too slow. In this case, you should consider rewriting your code
    in another programming language. For other languages, there are interfaces in
    R in the form of R packages. Examples are [Rcpp](https://cran.r-project.org/web/packages/Rcpp/index.html)
    and [rJava](https://cran.r-project.org/web/packages/rJava/index.html). It is easy
    to write C++ code, especially if you have a software engineering background. Then
    you can use it in R.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时 R 会很慢。你使用各种技巧，但你的 R 代码仍然太慢。在这种情况下，你应该考虑用另一种编程语言重写你的代码。对于其他语言，R 提供了以 R 包形式的接口。例如，[Rcpp](https://cran.r-project.org/web/packages/Rcpp/index.html)
    和 [rJava](https://cran.r-project.org/web/packages/rJava/index.html)。编写 C++ 代码很简单，特别是如果你有软件工程背景。然后你可以在
    R 中使用它。
- en: 'First, you have to install Rcpp with the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要使用以下命令安装 Rcpp：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following example demonstrates the approach:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了这种方法：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: C++ is a powerful programming language, which makes it best suited for code
    acceleration. For very complex calculations, we recommend using C++ code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 是一种强大的编程语言，使其最适合于代码加速。对于非常复杂的计算，我们建议使用 C++ 代码。
- en: Conclusion
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we learned how to analyse R code. The provis package supports
    you in the analysis of your R code. You can use vectorised functions like `rowSums()`,
    `colSums()`, `rowMeans()` and `colMeans()` to accelerate your program. In addition,
    you should prefer matrices instead of data frames if possible. Use `anyNA()` instead
    of `is.na()` to check if a vector has any missing values. You speed up your R
    code by using `if() ... else()` instead of `ifelse()`. Furthermore, you can use
    parallelised functions from the parallel package for complex simulations. You
    can achieve maximum performance for complex code sections by using the Rcpp package.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们学习了如何分析 R 代码。provis 包支持你分析你的 R 代码。你可以使用 `rowSums()`、`colSums()`、`rowMeans()`
    和 `colMeans()` 等矢量化函数来加速你的程序。此外，如果可能的话，你应该优先使用矩阵而不是数据框。使用 `anyNA()` 而不是 `is.na()`
    来检查向量是否有缺失值。通过使用 `if() ... else()` 而不是 `ifelse()` 来加速你的 R 代码。此外，你可以使用 parallel
    包中的并行函数进行复杂的模拟。通过使用 Rcpp 包，你可以实现复杂代码段的最大性能。
- en: 'There are some books for learning R. You will find three books that we think
    are very good for learning efficient R programming in the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些书籍用于学习 R。你将在以下找到我们认为非常适合学习高效 R 编程的三本书：
- en: 'Efficient R Programming: A Practical Guide to Smarter Programming'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效 R 编程：更智能编程的实用指南
- en: 'Hands-On Programming with R: Write Your Own Functions and Simulations'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动手编程 R：编写你自己的函数和模拟
- en: 'R for Data Science: Import, Tidy, Transform, Visualize, and Model Data'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 数据科学：导入、整理、转换、可视化和建模数据
- en: 👉🏽 [**Join our free weekly Magic AI newsletter for the latest AI updates!**](https://magicai.tinztwins.de)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**加入我们的免费每周 Magic AI 时事通讯，获取最新的 AI 更新！**](https://magicai.tinztwins.de)
- en: 👉🏽 [**You can find all our Freebies on our digital products page!**](https://shop.tinztwins.de/)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**你可以在我们的数字产品页面找到所有的免费资源！**](https://shop.tinztwins.de/)
- en: '[**Subscribe for free**](https://tinztwinspro.medium.com/subscribe) **to get
    notified when we publish a new story:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[**免费订阅**](https://tinztwinspro.medium.com/subscribe) **以在我们发布新故事时获得通知：**'
- en: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----b0f58006d0c1--------------------------------)
    [## Get an email whenever Janik and Patrick Tinz publishes.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----b0f58006d0c1--------------------------------)
    [## 订阅邮件，以便在 Janik 和 Patrick Tinz 发布新内容时收到通知。'
- en: Get an email whenever Janik and Patrick Tinz publishes. By signing up, you will
    create a Medium account if you don’t…
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 订阅邮件，以便在 Janik 和 Patrick Tinz 发布新内容时收到通知。如果你还没有 Medium 账户，注册时将会创建一个…
- en: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----b0f58006d0c1--------------------------------)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----b0f58006d0c1--------------------------------)
- en: Learn more about us on our [About page](https://medium.com/@tinztwinspro/about).
    Don’t forget to follow us on [X](https://twitter.com/tinztwins). Thanks so much
    for reading. If you liked this article, feel free to share it. **Have a great
    day!**
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于我们的信息，请访问我们的[关于页面](https://medium.com/@tinztwinspro/about)。不要忘记关注我们的[X](https://twitter.com/tinztwins)。非常感谢你的阅读。如果你喜欢这篇文章，欢迎分享。**祝你一天愉快！**
- en: Sign up for a Medium membership using [our link](https://tinztwinspro.medium.com/membership)
    to read unlimited Medium stories.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[我们的链接](https://tinztwinspro.medium.com/membership)注册成为Medium会员，以阅读无限量的Medium故事。
