- en: 'Without Further Ado: Automate Dev Environments and Build'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无需多言：自动化开发环境和构建
- en: 原文：[https://towardsdatascience.com/without-further-ado-automate-dev-environments-and-build-f2f9bcaaae1e](https://towardsdatascience.com/without-further-ado-automate-dev-environments-and-build-f2f9bcaaae1e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/without-further-ado-automate-dev-environments-and-build-f2f9bcaaae1e](https://towardsdatascience.com/without-further-ado-automate-dev-environments-and-build-f2f9bcaaae1e)
- en: Bring joy to your fellow developers by making your software easy to use through
    environment and build automation. With code examples in Python and Hatch.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过环境和构建自动化使你的软件易于使用，给你的开发同事带来快乐。包括Python和Hatch中的代码示例。
- en: '[](https://medium.com/@mattiadigangi?source=post_page-----f2f9bcaaae1e--------------------------------)[![Mattia
    Di Gangi](../Images/ccd89021df6724797d45cc3c655a38a5.png)](https://medium.com/@mattiadigangi?source=post_page-----f2f9bcaaae1e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f2f9bcaaae1e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f2f9bcaaae1e--------------------------------)
    [Mattia Di Gangi](https://medium.com/@mattiadigangi?source=post_page-----f2f9bcaaae1e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mattiadigangi?source=post_page-----f2f9bcaaae1e--------------------------------)[![Mattia
    Di Gangi](../Images/ccd89021df6724797d45cc3c655a38a5.png)](https://medium.com/@mattiadigangi?source=post_page-----f2f9bcaaae1e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f2f9bcaaae1e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f2f9bcaaae1e--------------------------------)
    [Mattia Di Gangi](https://medium.com/@mattiadigangi?source=post_page-----f2f9bcaaae1e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f2f9bcaaae1e--------------------------------)
    ·11 min read·Feb 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f2f9bcaaae1e--------------------------------)
    ·11分钟阅读·2023年2月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/9b740db055fe462f411ece0c9cc9fe21.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b740db055fe462f411ece0c9cc9fe21.png)'
- en: Photo by [Carol Jeng](https://unsplash.com/@carolran?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Carol Jeng](https://unsplash.com/@carolran?utm_source=medium&utm_medium=referral)
    于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Most developers hate legacy software, why? “Legacy” in our industry means a
    codebase that has been in service for many years, usually the original developers
    are no longer in the company, and nobody is able to really maintain it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员讨厌遗留软件，为什么？在我们的行业中，“遗留”意味着一个已经服务了多年的代码库，通常原始开发者不再在公司，而没有人能够真正维护它。
- en: 'Some important ingredients in the legacy software recipe are: lack of documentation,
    hard-to-understand code, difficulty in **trying out modifications**, and serious
    difficulty in **building software for shipment**.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留软件配方中的一些重要成分是：缺乏文档、难以理解的代码、**尝试修改**的困难，以及**构建软件以进行发布**的严重困难。
- en: However, legacy software is called like that because the company relies on it,
    and that is why it is still in use despite the fact that most developers do not
    know how to handle it. We inherit it from our past colleagues, and it becomes
    our duty to keep it working in the future like it did in the past.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，遗留软件之所以被称为遗留，是因为公司依赖它，这也是为什么尽管大多数开发人员不知道如何处理它，它仍然在使用。我们从过去的同事那里继承了它，因此我们有责任让它在未来继续像过去一样工作。
- en: Yet, there is software that respects the abovementioned requirements for legacy
    software without having the pro side of having serviced us for years. Part of
    that code is also quite recent. That means, people write code that is already
    “legacy” according to its negative definitions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些软件满足上述遗留软件的要求，但却没有服务多年的优点。部分代码也相当近期。这意味着，人们编写的代码已经根据其负面定义成为“遗留”代码。
- en: A bad working day
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不愉快的一天
- en: Today it is Monday and you have been assigned to a new project. In a meeting
    at 9 o’clock, you learn that you are now working in **Petty,** the new company
    product, which is a search engine for pet images. Your first task is to work on
    **Petognizer,** a component to recognize pets in images. It is currently working
    on production, but it can only recognize cats and dogs. Now the management wants
    it to recognize also hamsters and rabbits.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 今天是星期一，你被分配了一个新项目。在早上9点的会议上，你了解到你现在在**Petty**工作，这是一个用于搜索宠物图片的新公司产品。你的第一个任务是开发**Petognizer**，一个识别图片中宠物的组件。它目前在生产中，但只能识别猫和狗。现在管理层希望它也能识别仓鼠和兔子。
- en: You get a link to the repository in the company GitLab account and are ready
    to use it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到了公司GitLab账户中的仓库链接，并准备使用它。
- en: Except that you cannot.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是你不能。
- en: The repository has no README, and no folder called `docs` or something similar.
    It looks like you have some figuring out to do on your own.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仓库没有README，也没有叫做`docs`或类似的文件夹。看来你需要自己进行一些探索。
- en: It is 10.30 and you start digging into the repo. After 30 minutes you understood
    where to find the training code, the data preprocessing scripts and the inference
    code. It looks overly complicated, but this is not the moment to go into the details,
    you want to get a global idea of it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是10:30，你开始挖掘仓库。经过30分钟你明白了在哪里可以找到训练代码、数据预处理脚本和推理代码。这看起来过于复杂，但现在不是进入细节的时候，你想对它有一个整体的了解。
- en: You also find a Dockerfile that is likely used for production, but this is not
    explicitly written anywhere, and a `requirements.txt`, of course this is a Python
    project since it is about machine learning.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你还发现了一个可能用于生产的Dockerfile，但这个并没有明确写在任何地方，还有一个`requirements.txt`，这当然是一个Python项目，因为它涉及到机器学习。
- en: It is 11.30 now and you feel ready to try it out. You know where the new dataset
    is, so now you want to start with the data preparation pipeline. Thus, you want
    to install the package, except that you notice the absence of a `setup.py` and
    a `pyproject.toml`. You ask your colleagues if maybe the package is in the company’s
    private `pypi` server but you receive a negative answer. After all, if there are
    no build instructions, how could it be packaged?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是11:30，你感觉准备好了要尝试一下。你知道新的数据集在哪里，所以现在你想开始数据准备流程。于是，你想安装包，却发现缺少`setup.py`和`pyproject.toml`。你问你的同事是否这个包在公司私有的`pypi`服务器上，但得到的回答是否定的。毕竟，如果没有构建说明，它怎么可能被打包？
- en: Apparently, you have to go the dirty way. You download the repo, find the entry
    point with data preparation, which was not in a `__main__.py` file, add the root
    folder of the project to your `PYTHONPATH` environment variable. Then, you create
    a new python environment with `venv`, run `pip install -r requirements.txt` to
    install all the necessary dependencies, run the script and… voila!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你不得不走“脏活”的路。你下载了仓库，找到了数据准备的入口点，这不在`__main__.py`文件中，将项目的根文件夹添加到你的`PYTHONPATH`环境变量中。然后，你创建一个新的python环境，使用`venv`，运行`pip
    install -r requirements.txt`来安装所有必要的依赖，运行脚本，然后……瞧！
- en: '`ImportError: module xxx not found`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImportError: module xxx not found`'
- en: You thought that requirements.txt would have provided the dev dependencies,
    but apparently not. But now you look at your watch and notice that it is already
    one o’clock, so you decide to go for lunch with your colleagues. You will figure
    it out later.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你以为`requirements.txt`会提供开发依赖，但显然不是。但现在你看了看手表，发现已经一点钟了，于是决定和同事一起去吃午饭。你会在之后搞清楚。
- en: When you are back from your lunch break, you are again energized and ready to
    tackle the problem again.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从午休回来时，你再次充满活力，准备再次攻克这个问题。
- en: Your work now is to install the missing dependencies one by one, every time
    that you install one library you run it again, wait a little time and the next
    ImportError comes out. You finish installing all the stuff by 3 o’clock and you
    are still wondering what the requirements.txt is actually for.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的工作是一个一个地安装缺失的依赖，每次安装一个库后你重新运行它，等待一会儿，接着下一个ImportError就会出现。你在3点钟前安装完所有东西，仍然在想`requirements.txt`到底是用来干什么的。
- en: You have been several hours in the process and you are still not sure that you
    can really run the software for what you need. And your day so far feels completely
    wasted.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在这个过程中几个小时了，你仍然不确定是否真的可以运行这个软件来满足你的需求。而你到目前为止的工作感觉完全浪费了。
- en: '![](../Images/858ac3fa9a12e2b7106605e07c4b9b9a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/858ac3fa9a12e2b7106605e07c4b9b9a.png)'
- en: Photo by [Anthony Intraversato](https://unsplash.com/@anthonyintraversato?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Anthony Intraversato](https://unsplash.com/@anthonyintraversato?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In a parallel world, you simply ran
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个平行世界中，你简单地运行了
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or maybe, if the training dependencies are provided as an extra
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，也许，如果训练依赖作为额外的提供
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then found the command for data preparation explained in the README, and you
    were ready to go in about 10 minutes, well before your lunch break
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在README中找到了数据准备的命令，你在大约10分钟内准备好，一切都在午休前完成。
- en: The presence of a pyproject.toml would have made so easy to both install the
    package (even more if it was in the pypi server) and prepare a build environment.
    Also, some proper documentation would have made easy to know how to actually use
    the code for the different tasks.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个`pyproject.toml`文件，将会大大简化包的安装（如果它在pypi服务器上会更容易）以及准备构建环境的过程。此外，一些适当的文档将使得了解如何实际使用代码进行不同任务变得更加简单。
- en: So many hours of talented developers all over the world go wasted every day
    just because some code maintainer did not take any time to set up documentation
    and automation to provide the basics for a good development experience.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每天都有如此多才华横溢的开发人员浪费时间，只因为某些代码维护者没有花时间设置文档和自动化，以提供良好开发体验的基础。
- en: Now that you are in charge of this codebase, you can decide to leave as it is,
    gifting the same frustration to the next developer that is going to use it. Alternatively,
    you can decide to spark some joy in the organization and make the repository easily
    usable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你负责这个代码库，你可以选择保持原样，把同样的挫败感留给下一个将要使用它的开发人员。或者，你可以决定为组织带来一些欢乐，使得代码库更容易使用。
- en: While writing documentation is a long-term process that require understanding
    of the code (but some correct documentation is better than no documentation),
    automating the build and the dev environment creation can free the developers
    from a lot of hassle and make them productive with the codebase much faster.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然编写文档是一个需要长期投入的过程，需要对代码有深入理解（但一些正确的文档总比没有文档要好），自动化构建和开发环境的创建可以解放开发人员免于很多麻烦，使他们能更快地在代码库中提高生产力。
- en: '[](/tips-for-reading-and-writing-an-ml-research-paper-a505863055cf?source=post_page-----f2f9bcaaae1e--------------------------------)
    [## Tips for Reading and Writing an ML Research Paper'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/tips-for-reading-and-writing-an-ml-research-paper-a505863055cf?source=post_page-----f2f9bcaaae1e--------------------------------)
    [## 阅读和编写ML研究论文的技巧'
- en: Lessons learned by dozens of peer reviews given and received
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过多次的同行评审获得的经验教训
- en: towardsdatascience.com](/tips-for-reading-and-writing-an-ml-research-paper-a505863055cf?source=post_page-----f2f9bcaaae1e--------------------------------)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/tips-for-reading-and-writing-an-ml-research-paper-a505863055cf?source=post_page-----f2f9bcaaae1e--------------------------------)
- en: Hatch
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hatch
- en: '[Hatch](https://hatch.pypa.io/latest/) is an automation tool supported by the
    Python Packaging Authority (PyPA) that enables creating environments and building
    software with high simplicity.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hatch](https://hatch.pypa.io/latest/)是一个由Python打包机构（PyPA）支持的自动化工具，它能够以高度的简便性创建环境和构建软件。'
- en: It uses a file called `pyproject.toml` which is the “new” unifying Python project
    settings file. Unifying because it is used by Hatch and other similar tools, like
    [Poetry](https://python-poetry.org/), and it can specify the configuration of
    other tools, such as [black](https://github.com/psf/black) or [flake8](https://github.com/PyCQA/flake8),
    for instance.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用一个名为`pyproject.toml`的文件，这是“新”的统一Python项目设置文件。之所以称之为统一，是因为它被Hatch和其他类似工具（如[Poetry](https://python-poetry.org/)）使用，并且它可以指定其他工具的配置，例如[black](https://github.com/psf/black)或[flake8](https://github.com/PyCQA/flake8)等。
- en: We can use Hatch to create a new project with
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Hatch创建一个新项目，命令为
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: and it will create a standard project structure like
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它将创建一个标准的项目结构，如
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It contains two separate packages for the source code and the tests, a README.md
    filled with some default text, a LICENSE.txt, a file called `__about__.txt` containing
    the software version, and `pyproject.toml`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含两个独立的包：一个用于源代码，另一个用于测试，还有一个包含一些默认文本的README.md，一个LICENSE.txt，一个名为`__about__.txt`的文件，里面包含软件版本，以及`pyproject.toml`。
- en: Hatch can also be used into an existing project by simply running
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Hatch也可以通过简单运行来用于现有项目
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: in its root folder. It will generate a default `pyproject.toml` that needs to
    be modified.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在其根文件夹中。这将生成一个默认的`pyproject.toml`文件，需要进行修改。
- en: Hatch can be installed with `pipx install hatch` to make it available as a command
    for the user without “polluting” the existing default python environment.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`pipx install hatch`来安装Hatch，使其作为用户命令可用，而不会“污染”现有的默认Python环境。
- en: '[](/python-polymorphism-with-class-discovery-28908ac6456f?source=post_page-----f2f9bcaaae1e--------------------------------)
    [## Python Polymorphism with Registers | Python Patterns'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-polymorphism-with-class-discovery-28908ac6456f?source=post_page-----f2f9bcaaae1e--------------------------------)
    [## 带有注册表的Python多态性 | Python模式'
- en: Learn a pattern to isolate packages while extending the functionalities of your
    Python code.
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习一种模式来隔离包，同时扩展Python代码的功能。
- en: towardsdatascience.com](/python-polymorphism-with-class-discovery-28908ac6456f?source=post_page-----f2f9bcaaae1e--------------------------------)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-polymorphism-with-class-discovery-28908ac6456f?source=post_page-----f2f9bcaaae1e--------------------------------)
- en: A quick glance of pyproject.toml
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pyproject.toml 的快速浏览
- en: The Hatch documentation is quite thorough, although sometimes the clarity could
    be improved, thus here we shall stick to the parts relevant for this article’s
    topic and some necessary context.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Hatch 文档非常详细，尽管有时清晰度可以提高，因此在这里我们将专注于与本文主题相关的部分和一些必要的背景信息。
- en: '`pyproject.toml` comes with an initial part that is quite descriptive. Here
    we can find the project’s name, description, authors, what Python versions are
    supported and the version.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproject.toml` 带有一个初始部分，描述性很强。在这里我们可以找到项目的名称、描述、作者、支持的 Python 版本和版本。'
- en: Let’s use as an example this toy repo that I made for illustration [https://github.com/mattiadg/demo_it-analyze/blob/main/pyproject.toml](https://github.com/mattiadg/demo_it-analyze/blob/main/pyproject.toml)
    (Thanks to my friend [Mario](https://github.com/Marius0092) for helping with the
    front end of this little app)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以我为说明制作的这个玩具库为例 [https://github.com/mattiadg/demo_it-analyze/blob/main/pyproject.toml](https://github.com/mattiadg/demo_it-analyze/blob/main/pyproject.toml)
    （感谢我的朋友 [Mario](https://github.com/Marius0092) 帮助制作这个小应用的前端）
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It should be quite clear, except for two fields. `dynamic = ["version"]` means
    that the software version has to be computed dynamically, and later in the file
    it says it has to be found in the `__about.py__` file. On the other hand, the
    field `dependencies` lists the **package** dependencies. These are the packages
    that will be installed together with this software, when packaged. Here, I have
    only listed the names, but some version constraints are also applicable, such
    as `==`, `<=`, etc… they are the same as used by **pip.**
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 应该很清楚，除了两个字段。`dynamic = ["version"]` 表示软件版本需要动态计算，稍后文件中提到它必须在 `__about.py__`
    文件中找到。另一方面，字段 `dependencies` 列出了**包**的依赖关系。这些是与软件一起安装的包。当打包时，我这里只列出了名称，但也可以应用一些版本约束，如
    `==`、`<=` 等… 它们与**pip**使用的相同。
- en: Notice that these dependencies are specified under the tag `[project]`, but
    there are other dependencies that are specified only for some environments. However,
    these are common to the package and all the environments. The codebase just does
    not work without them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些依赖项是在 `[project]` 标签下指定的，但还有其他仅为某些环境指定的依赖项。然而，这些是包和所有环境共同的。代码库没有它们就无法工作。
- en: Tools configuration
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具配置
- en: As mentioned previously, `pyproject.toml` can be used to specify the configuration
    of tools used in the project, and Hatch is one of those tools that can be configured
    here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`pyproject.toml` 可用于指定项目中使用的工具的配置，而 Hatch 是可以在这里配置的工具之一。
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that the fields here start with `tool.hatch` and not with `project`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里的字段以 `tool.hatch` 开头，而不是 `project`。
- en: We start by telling Hatch where to find the software version. Then we specify
    the `FLASK_APP` for the **default** python environment. Hatch allows us to create
    many environments, and default is the one that is always defined and from which
    all the others derive. We can define dependencies for our environments, and these
    are the **dev** dependencies, because the environments do not exist in the package
    code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先告诉 Hatch 到哪里去寻找软件版本。然后，我们为**默认** Python 环境指定 `FLASK_APP`。Hatch 允许我们创建多个环境，默认环境是始终定义的，并且所有其他环境都从它派生。我们可以为环境定义依赖项，这些是**开发**依赖项，因为环境在包代码中不存在。
- en: With Hatch we can create the default environment by just executing
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Hatch，我们可以通过执行来创建默认环境
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: and it will create the default environment with all its dependencies. We can
    also create another environment specified in the `pyproject.toml` (for instance
    `test` is also defined in this example) by running
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 它将创建具有所有依赖项的默认环境。我们还可以通过运行指定在 `pyproject.toml` 中的另一个环境（例如示例中也定义了 `test`）来创建另一个环境
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'However, one nice thing of Hatch is that we do not need to create environments
    explicitly. The command `hatch run` allows us to run any command, or script, inside
    an environment. In the file copied above we have this script definition:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Hatch 的一个好处是我们不需要显式创建环境。命令 `hatch run` 允许我们在环境中运行任何命令或脚本。在上面复制的文件中，我们有这个脚本定义：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So we can run for example
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以运行，例如
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: and hatch will create the default environment, if it does not exist, **syncronize
    its dependencies** with those specified in `pyproject.toml` at the moment of execution,
    and run `flask --app src.app run` inside the environment, executing our flask
    server. We can also specify to run the command in a specific environment, for
    example `test` with
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`hatch` 会创建默认环境（如果不存在的话），**同步其依赖**与 `pyproject.toml` 中指定的依赖，并在环境中运行 `flask
    --app src.app run`，启动我们的 flask 服务器。我们还可以指定在特定环境中运行命令，例如 `test`。'
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: And notice that we did not need to install anything. Hatch reads the `pyproject.toml`
    and recognizes the scripts that it can run.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不需要安装任何东西。`Hatch` 会读取 `pyproject.toml` 并识别可以运行的脚本。
- en: You see what we did here? The project maintainers specify some configuration
    options in a file and then it becomes super easy for anybody who uses the repo
    to create exactly the same environments. No more struggling to reproduce the dev
    environments!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到我们在这里做了什么吗？项目维护者在一个文件中指定了一些配置选项，然后对任何使用该仓库的人来说，创建完全相同的环境变得非常简单。不再为重现开发环境而苦恼！
- en: '[](/data-processing-automation-with-inotifywait-663aba0c560a?source=post_page-----f2f9bcaaae1e--------------------------------)
    [## Data Processing Automation with inotifywait'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/data-processing-automation-with-inotifywait-663aba0c560a?source=post_page-----f2f9bcaaae1e--------------------------------)
    [## 使用 inotifywait 进行数据处理自动化'
- en: How to automate before having a production-ready MLOps platfotm
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在拥有一个生产就绪的 MLOps 平台之前进行自动化
- en: towardsdatascience.com](/data-processing-automation-with-inotifywait-663aba0c560a?source=post_page-----f2f9bcaaae1e--------------------------------)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/data-processing-automation-with-inotifywait-663aba0c560a?source=post_page-----f2f9bcaaae1e--------------------------------)'
- en: Building
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建
- en: 'Hatch is also a decent build tool. It has its own build backend called **hatchling**,
    and the `pyproject.toml` comes with some configurations for building. From the
    example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hatch` 也是一个不错的构建工具。它有自己的构建后端，称为**hatchling**，而 `pyproject.toml` 附带了一些构建配置。根据示例：'
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have to specify the build backend because Hatch can be used as a nice front
    end for all the features that it offers, and then build with another tool. Then
    we see that we can specify some options for what to put in the two build formats
    `sdist` and `wheel`. However, there is not much to put inside them for a toy project
    like this one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须指定构建后端，因为 `Hatch` 可以作为所有功能的良好前端，然后用其他工具进行构建。然后我们看到可以为 `sdist` 和 `wheel`
    两种构建格式指定一些选项。然而，对于像这样的玩具项目，里面的内容不多。
- en: Then, we can simply run `hatch build` and it will build both targets. Or we
    can specify one with `hatch build -t wheel`, for instance.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以简单地运行 `hatch build`，它会构建两个目标。或者我们可以用 `hatch build -t wheel` 来指定其中一个目标，例如。
- en: When you also have credentials for a pypi server, be it the official one, the
    test server, or a private server, you can publish your package there from your
    build using simply `hatch publish`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拥有 pypi 服务器的凭据时，无论是官方的、测试服务器的还是私有服务器的，你都可以通过简单地使用 `hatch publish` 从构建中发布你的包。
- en: For sure, publishing a package is something that should be done with care, after
    ensuring that the software works. But then, hatch takes care of all the details
    and we just need to run two simple commands.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，发布包是一项需要谨慎处理的工作，在确保软件正常工作后进行。但随后，`hatch` 处理所有细节，我们只需要运行两个简单的命令。
- en: And if you have a CI/CD pipeline enabled like **Github Actions**, you can also
    specify these commands there for even more automation!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启用了类似**Github Actions**的 CI/CD 流水线，你也可以在那里指定这些命令，以实现更多的自动化！
- en: What we did not cover
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们没有覆盖的内容
- en: Making a codebase easily usable can be a challenging problem and, while building
    automation is a useful step in the right direction, it is far from being everything
    needed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使代码库易于使用可能是一个具有挑战性的问题，虽然构建自动化是朝着正确方向迈出的有用一步，但这远未满足所有需求。
- en: We already mentioned documentation in the introductory story and we shall not
    talk longer about it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在介绍故事中已经提到过文档，我们将不再详细讨论它。
- en: Another important aspect is a thorough test suite, which serves three main purposes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要方面是彻底的测试套件，它有三个主要目的。
- en: First, it helps to verify that the code is correct. Anybody can read the test
    and check if they are proving the right thing. And if tests pass, then we have
    some guarantees about code correctness.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它有助于验证代码是否正确。任何人都可以阅读测试并检查它们是否证明了正确的内容。如果测试通过，那么我们对代码的正确性有了一些保障。
- en: Second, they serve as a safety net against regression. When we change a codebase,
    in particular one we do not know well, a thorough test suite can catch if the
    modification broke some expected behavior.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，它们作为防止回归的安全网。当我们修改一个代码库时，特别是一个我们不太熟悉的代码库，全面的测试套件可以捕捉到修改是否破坏了预期的行为。
- en: Third, if the documentation is not exhaustive enough, tests can show us how
    to use functions or classes we struggle to understand, since they are by their
    very nature code examples.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，如果文档不够详尽，测试可以展示我们难以理解的函数或类的使用方法，因为测试本质上就是代码示例。
- en: Another important missing part is a continuous integration/continuous delivery
    pipeline (CI/CD), which runs some checks every time some code is added to the
    remote repository, and can also build and deploy the software. A CI/CD pipeline
    shows the expected code quality from the code base, since it can run checks like
    linters or static type checkers (for dynamic languages like Python), as well as
    tests. A step in the pipeline for building and deploying the software also ensures
    that those actions are easy to perform and have an high-enough level of automation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的遗漏部分是持续集成/持续交付管道（CI/CD），它在每次代码添加到远程仓库时运行一些检查，还可以构建和部署软件。CI/CD管道展示了代码库中预期的代码质量，因为它可以运行诸如代码检查工具或静态类型检查器（针对像Python这样的动态语言）以及测试。管道中的构建和部署步骤还确保这些操作容易执行，并具有足够的自动化水平。
- en: '**Conclusions**'
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: Hatch is a great tool for automation that requires some maintainance and the
    specification of some configuration options, but then pays off greatly by simplifying
    significantly the environment and build creation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Hatch是一个出色的自动化工具，虽然需要一些维护和配置选项的指定，但它通过显著简化环境和构建创建，带来了极大的回报。
- en: When developers can easily work with software without spending hours figuring
    out how to set it up, it is easier for them to be productive and also figure out
    the missing part in the documentation, because they can run the code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者可以轻松地使用软件，而无需花费数小时去弄清楚如何设置时，他们更容易提高生产力，同时也能找出文档中遗漏的部分，因为他们可以运行代码。
- en: Thank you for reading so far, it was a long read, but I hope I have convinced
    you that with tools like Hatch you can greatly improve the developer experience
    for you and your fellow developers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读到这里，这篇文章较长，但我希望我能说服您，使用像Hatch这样的工具可以大大提升您和其他开发者的开发体验。
- en: Bibliography
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Some books definitely influenced this article. The most prominent is [The Unicorn
    Project](https://itrevolution.com/product/the-unicorn-project/), written by the
    famous DevOps author [Gene Kim](https://itrevolution.com/author/gene-kim/) and
    edited by IT Revolution. A senior developer is exiled in a dysfunctional department
    where it is not possible for developers to run the code locally. During the novel,
    she and a group of illuminated colleagues do their best to free their colleague
    from the hassle of thousands of blockers and bureaucracy to let them do what they
    are actually paid for.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一些书籍对这篇文章产生了深远的影响。最突出的书是[独角兽项目](https://itrevolution.com/product/the-unicorn-project/)，由著名的DevOps作者[Gene
    Kim](https://itrevolution.com/author/gene-kim/)编写，并由IT Revolution编辑。一个高级开发者被流放到一个功能失调的部门，在那里开发者无法本地运行代码。在小说中，她和一群开明的同事尽力解救她的同事，摆脱成千上万的阻碍和官僚主义，去做他们真正被雇佣来做的事情。
- en: '[Grokking Continuous Delivery](https://www.manning.com/books/grokking-continuous-delivery)
    by Christie Wilson and edited by Manning is a guide on how to start having a CI/CD
    pipeline starting from scratch, and improve your codebase in the process.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[深入理解持续交付](https://www.manning.com/books/grokking-continuous-delivery)由Christie
    Wilson编写，并由Manning编辑，是一本从零开始建立CI/CD管道并在过程中改进代码库的指南。'
- en: '[Re-Engineering Legacy](https://www.manning.com/books/re-engineering-legacy-software)
    by Chris Birchall and also edited by Manning takes a comprehensive look at legacy
    software, how to work with it when we are assigned to it, how to improve it, and
    how to make sure that we are not writing legacy software.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[重构遗留系统](https://www.manning.com/books/re-engineering-legacy-software)由Chris
    Birchall编写，并由Manning编辑，全面探讨了遗留软件，包括如何处理我们被分配的遗留系统，如何改进它，以及如何确保我们不会编写遗留软件。'
- en: Medium Membership
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Medium会员
- en: Do you like my writing and are considering subscribing for a Medium Membership
    for having unlimited access to the articles?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您喜欢我的写作并考虑订阅Medium会员以无限制访问文章吗？
- en: If you subscribe through this link you will support me through your subscription
    with no additional cost for you [https://medium.com/@mattiadigangi/membership](https://medium.com/@mattiadigangi/membership)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过此链接订阅，你将通过你的订阅支持我，而无需支付额外费用 [https://medium.com/@mattiadigangi/membership](https://medium.com/@mattiadigangi/membership)
