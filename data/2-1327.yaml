- en: Initialize Rust Constants at Runtime with lazy_static
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 lazy_static 在运行时初始化 Rust 常量
- en: 原文：[https://towardsdatascience.com/initialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79](https://towardsdatascience.com/initialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/initialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79](https://towardsdatascience.com/initialize-rust-constants-at-runtime-with-lazy-static-e05b1df46c79)
- en: Define non-constant static variables with lazy initialization
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用懒惰初始化定义非常量静态变量
- en: '[](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)[![Nicholas
    Obert](../Images/d70330063c9edc2f63e53f62a78f82ec.png)](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)
    [Nicholas Obert](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)[![Nicholas
    Obert](../Images/d70330063c9edc2f63e53f62a78f82ec.png)](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)
    [Nicholas Obert](https://medium.com/@nic-obert?source=post_page-----e05b1df46c79--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)
    ·4 min read·Aug 5, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e05b1df46c79--------------------------------)
    ·4 分钟阅读·2023年8月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d3a48ff6643b48687887a2af35a5c63e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d3a48ff6643b48687887a2af35a5c63e.png)'
- en: Photo by [Christian Lue](https://unsplash.com/@christianlue?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Christian Lue](https://unsplash.com/@christianlue?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片
- en: It’s no secret that initializing constants at compile time is a good practice
    in programming. Not only do you reduce the initialization overhead, but you also
    make it easier for the compiler to cleverly optimize your code by knowing the
    value of the constant in advance.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，在编译时初始化常量的好处是显而易见的。这样不仅减少了初始化开销，还使编译器能够更聪明地优化代码，因为它提前知道了常量的值。
- en: 'Sometimes, however, it’s impossible to initialize every constant at compile
    time since it requires performing non-constant operations or fetching data available
    only at runtime. For instance, say we make repetitive use of the number `√7` in
    our program. Instead of calculating it every time, it would be better to define
    a constant for it like follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时在编译时初始化每个常量是不可能的，因为这需要执行非常量操作或获取仅在运行时可用的数据。例如，假设我们在程序中反复使用数字 `√7`。与其每次计算它，不如像下面这样定义一个常量：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code, however, is invalid. The Rust compiler returns the following error:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这段代码是无效的。Rust 编译器返回以下错误：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same happens if we try to initialize a constant with an environment variable:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试用环境变量初始化一个常量，也会发生相同的情况：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From the Rust compiler:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Rust 编译器：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, certain constants that would be useful to initialize at compile
    time require non-constant operations. This is where Rust’s `lazy_static` crate
    comes in handy. `lazy_static` allows you to define global static variables that
    get initialized lazily, meaning that their values only get set upon their first
    actual usage at runtime. Lazy statics only need to be initialized the first time
    they’re used and, since this is a one-time operation, their runtime initialization
    overhead is negligible.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，某些在编译时初始化的常量需要非常量操作。这时，Rust 的 `lazy_static` crate 就派上用场了。`lazy_static`
    允许你定义全局静态变量，这些变量会被懒惰地初始化，即它们的值仅在第一次实际使用时才被设置。懒惰的静态变量只需在第一次使用时初始化一次，由于这是一次性操作，因此它们的运行时初始化开销可以忽略不计。
- en: In this article, we’ll take a look at how to use Rust’s `lazy_static` crate
    to lazily initialize global constants and a few of their use cases.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨如何使用 Rust 的 `lazy_static` crate 来懒惰地初始化全局常量及其一些用例。
- en: Use lazy_static
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 lazy_static
- en: To use the `lazy_static` crate, you simply add it to your project dependencies
    by
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `lazy_static` crate，你只需将其添加到项目依赖中
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you added the crate, you can import the `lazy_static!` macro in your source
    files like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了这个 crate，你可以在源文件中像这样导入 `lazy_static!` 宏：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To define lazy statics, enclose all the declarations within the `lazy_static!`
    macro:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义延迟静态，需将所有声明包含在 `lazy_static!` 宏中：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'By doing this, you declare a global static reference to a lazily initialized
    value. To use these “lazy constants”, you can just dereference them:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，你声明了一个全局静态引用，用于延迟初始化的值。要使用这些“延迟常量”，你只需对它们进行解引用：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now you can effectively use the `lazy_static` crate to initialize global constants
    at runtime. Keep reading to learn how it works.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以有效地使用 `lazy_static` crate 在运行时初始化全局常量。继续阅读以了解它是如何工作的。
- en: What is lazy initialization?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是延迟初始化？
- en: When do lazy statics get initialized? In computing, the term lazy usually means
    that work is done exclusively if and when it’s required. Otherwise, lazy operations
    aren’t performed. In the case of lazy statics, they are initialized just before
    their first usage.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟静态何时初始化？在计算中，“延迟”一词通常意味着只有在需要时才进行工作。否则，延迟操作不会执行。在延迟静态的情况下，它们会在首次使用之前初始化。
- en: 'To make it clearer, take a look at the following code example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚，请查看以下代码示例：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All these lazy static initializations have side effects: they print stuff to
    the console. Using these side effects, we can detect when their values are actually
    initialized.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些延迟静态初始化都有副作用：它们会将内容打印到控制台。利用这些副作用，我们可以检测到它们的值何时被实际初始化。
- en: 'The `main()` function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()` 函数：'
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And the output order shows when each operation is performed at runtime:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输出顺序显示了每个操作在运行时的执行时间：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see from the first output line, no lazy static is initialized before
    it’s actually needed. The second and third output lines show that the initialization
    is performed exactly before the value is used.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如从第一个输出行中看到的，所有延迟静态都在实际需要之前没有初始化。第二和第三输出行显示初始化恰好发生在值被使用之前。
- en: The fourth line highlights the fact that no initialization is required for already
    used lazy statics since their value is stored.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第四行突出了这样一个事实：对于已使用的延迟静态，不需要初始化，因为它们的值已被存储。
- en: Also, did you notice that `UNUSED_LAZY_STATIC` was never initialized? That’s
    because lazy operations are performed only if they’re actually needed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你是否注意到 `UNUSED_LAZY_STATIC` 从未初始化？那是因为只有在实际需要时才会执行延迟操作。
- en: Further reading
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入阅读
- en: This article was meant to be a basic tutorial on the `lazy_static` crate and
    its most popular feature. For more information, read the [official documentation](https://docs.rs/lazy_static/latest/lazy_static/).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在成为 `lazy_static` crate 及其最流行功能的基础教程。欲了解更多信息，请阅读 [官方文档](https://docs.rs/lazy_static/latest/lazy_static/)。
- en: I hope you enjoyed this article. If you have anything to add, please share your
    thoughts in a comment. Thanks for reading!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章。如果你有任何补充，请在评论中分享你的想法。感谢阅读！
- en: 'If you want to learn more about low-level programming, I highly recommend checking
    out this story below:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于低级编程的内容，我强烈推荐你查看下面的故事：
- en: '[](https://betterprogramming.pub/heres-how-the-cpu-handles-if-statements-and-branching-95cfd42af9c?source=post_page-----e05b1df46c79--------------------------------)
    [## Here’s How the CPU Handles If Statements and Branching'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 这里是 CPU 如何处理 if 语句和分支](https://betterprogramming.pub/heres-how-the-cpu-handles-if-statements-and-branching-95cfd42af9c?source=post_page-----e05b1df46c79--------------------------------)'
- en: 'Know why if statements are disliked and how they actually work. Spoiler: they
    aren’t that bad'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解为什么 if 语句不受欢迎以及它们实际是如何工作的。剧透：它们并没有那么糟糕
- en: betterprogramming.pub](https://betterprogramming.pub/heres-how-the-cpu-handles-if-statements-and-branching-95cfd42af9c?source=post_page-----e05b1df46c79--------------------------------)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[betterprogramming.pub](https://betterprogramming.pub/heres-how-the-cpu-handles-if-statements-and-branching-95cfd42af9c?source=post_page-----e05b1df46c79--------------------------------)'
