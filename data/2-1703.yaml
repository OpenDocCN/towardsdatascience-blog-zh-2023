- en: Protocols in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的协议
- en: 原文：[https://towardsdatascience.com/protocols-in-python-110943832d98](https://towardsdatascience.com/protocols-in-python-110943832d98)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/protocols-in-python-110943832d98](https://towardsdatascience.com/protocols-in-python-110943832d98)
- en: How to use structural subtyping
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用结构性子类型
- en: '[](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    ·5 min read·Jul 27, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    ·5 min 阅读·2023年7月27日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'Python 3.8 introduced a neat new feature: [protocols](https://peps.python.org/pep-0544/).
    Protocols are an alternative to [abstract base classes (ABC)](https://docs.python.org/3/library/abc.html),
    and allow structural subtyping — checking whether two classes are compatible based
    on available attributes and functions alone. In this post we’ll go into the details
    about this and show how to use protocols using practical examples.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.8 引入了一个新特性：[协议](https://peps.python.org/pep-0544/)。协议是[抽象基类 (ABC)](https://docs.python.org/3/library/abc.html)的替代方案，并允许结构性子类型检查——仅基于可用属性和函数检查两个类是否兼容。在这篇文章中，我们将深入探讨这个细节，并展示如何通过实际示例使用协议。
- en: '![](../Images/90dd020181af078f64485fe5957a0b41.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/90dd020181af078f64485fe5957a0b41.png)'
- en: Photo by [Chris Liverani](https://unsplash.com/@chrisliverani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/9cd8qOgeNIY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Chris Liverani](https://unsplash.com/@chrisliverani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)拍摄，[Unsplash](https://unsplash.com/photos/9cd8qOgeNIY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)上的照片
- en: Typing in Python
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中的输入
- en: 'Let us begin by discussing how Python is typed. It is a dynamically typed language,
    meaning types are inferred at runtime and the following code runs without problems:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先讨论 Python 的类型。它是动态类型语言，这意味着类型在运行时推断，以下代码可以正常运行：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first call results in an integer addition returning 5, the second in a
    string concatenation returning “str1str2”. This is different to e.g. C++, which
    is statically typed — and we have to provide type declarations:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用结果是整数相加返回 5，第二次是字符串连接返回“str1str2”。这与静态类型的 C++ 不同——在 C++ 中我们必须提供类型声明：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Static typing offers the advantage of having the potential to catching errors
    at compile time — whereas in dynamically typed languages we only encounter these
    during runtime. On the other hand, dynamic typing can allow quicker prototyping
    and experimentation — one reason why Python has become so popular.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 静态类型的优点在于可以在编译时捕捉到潜在的错误，而在动态类型语言中，我们只能在运行时遇到这些错误。另一方面，动态类型允许更快速的原型设计和实验，这也是
    Python 变得如此流行的原因之一。
- en: 'Dynamic typing is also called [duck typing](https://en.wikipedia.org/wiki/Duck_typing),
    based on the saying: “if it walks like a duck and it quacks like a duck, then
    it must be a duck”. Ergo: if objects offer the same attributes / functions, they
    should be treated similarly, and e.g. can be passed to functions requiring the
    other type.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 动态类型也被称为[鸭子类型](https://en.wikipedia.org/wiki/Duck_typing)，这是基于这样一句话：“如果它走起来像一只鸭子，叫声像一只鸭子，那么它一定是一只鸭子”。因此：如果对象提供相同的属性/函数，它们应该被类似对待，例如可以传递给要求另一种类型的函数。
- en: Nevertheless, especially in larger, more professional software products, this
    unreliability offers more down- than upsides — and the trend thus goes towards
    static type checking, e.g. via [providing type hints with mypy](https://medium.com/towards-data-science/introduction-to-mypy-3d32fc96db75).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，尤其是在较大、更专业的软件产品中，这种不可靠性带来的弊端多于利端——因此趋势是向静态类型检查方向发展，例如通过[使用 mypy 提供类型提示](https://medium.com/towards-data-science/introduction-to-mypy-3d32fc96db75)。
- en: '**Subtyping**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**子类型化**'
- en: 'One interesting issue — hinted above e.g. in the short paragraph about duck
    typing — is subtyping. If we have a function with signature `foo(x: X)`, what
    other classes except `X` does mypy allow to be passed to the function? (Note we
    now only question typing and type hints — since Python is dynamically typed, as
    discussed before, we can pass any object to `foo` — and if the expected attributes
    / methods are there, it works, and crashes otherwise.) For this, one distinguishes
    structural and nominal subtyping. Structural subtyping is based on class hierarchy
    / inheritance: if class `B` inherits from `A`, it is a subtype of `A` — and thus
    can also be used everywhere where `A` is expected. On the other hand, nominal
    subtyping is defined based on operations available for the given class — if `B`
    offers all attributes / functions provided by `A`, it can be used in all places
    where `A` is expected. One can argue, that the latter method is more “Pythonic”,
    as it more resembles the idea of duck typing.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '一个有趣的问题——在关于鸭子类型的简短段落中有所提及——是子类型化。如果我们有一个签名为 `foo(x: X)` 的函数，除了 `X` 之外，mypy
    还允许哪些其他类被传递给该函数？（注意我们现在只讨论类型和类型提示——由于 Python 是动态类型的，如前所述，我们可以将任何对象传递给 `foo`——如果有期望的属性/方法，它就能工作，否则会崩溃。）为此，人们区分结构性和名义性子类型化。结构性子类型化基于类层次/继承：如果类
    `B` 继承自 `A`，它是 `A` 的子类型——因此也可以在期望 `A` 的地方使用。另一方面，名义性子类型化基于给定类的可用操作定义——如果 `B` 提供了
    `A` 所有的属性/函数，它可以在所有期望 `A` 的地方使用。可以说，后一种方法更“Pythonic”，因为它更像鸭子类型的思想。'
- en: Subtyping in Practise
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践中的子类型化
- en: 'Before Python 3.8, one could only use inheritance for subtyping, and e.g. use
    (abstract) base classes (ABCs): here, we define an (abstract) base class — a “blue
    print” for child classes — and then define several child classes inheriting from
    this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.8 之前，人们只能通过继承来进行子类型化，例如使用（抽象）基类（ABCs）：在这里，我们定义一个（抽象）基类——一个子类的“蓝图”——然后定义几个从这个基类继承的子类：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code, we first define the ABC `Animal`, providing the abstract method
    `feed`. Then, we subclass `Duck` and implement this method. Lastly we define a
    generic `feed` function, accepting an `Animal` as parameter, and then feed this
    animal.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们首先定义了 ABC `Animal`，提供抽象方法 `feed`。然后，我们子类化 `Duck` 并实现这个方法。最后，我们定义一个通用的
    `feed` 函数，接受一个 `Animal` 作为参数，然后喂养这个动物。
- en: 'This seems legit — where is the problem? Indeed there are a few reasons, why
    one might not want to use this pattern: base classes are often poorly exposed
    and hard to include — i.e. if you want to inherit from a base class in another
    module, maybe a public library, you would have to find the base class. Second,
    you cannot change existing code e.g. in public / third party modules: this is
    a problem if you would like types imported from those to be subtypes of others,
    possibly in combination with other types introduced by you. And lastly, this somewhat
    goes against the idea of Python and duck typing.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是合理的——问题在哪里？确实有一些原因，为什么可能不想使用这种模式：基类往往暴露不充分且难以包含——即，如果你想从另一个模块中的基类继承，也许是一个公共库，你将不得不找到这个基类。其次，你不能更改现有代码，例如公共/第三方模块：如果你希望从这些模块中导入的类型成为其他类型的子类型，可能与其他由你引入的类型组合使用，这会是个问题。最后，这在某种程度上违背了
    Python 和鸭子类型的思想。
- en: '**Protocols**'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**协议**'
- en: 'Thus, Python 3.8 introduced protocols, alleviating aforementioned issues. Protocols,
    as the name suggests, work implicitly by defining an “interface” of expected attributes
    / methods, and checking whether the classes in question provide these, if necessary:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Python 3.8 引入了协议，缓解了上述问题。协议，如其名称所示，通过定义期望的属性/方法的“接口”隐式地工作，并在必要时检查相关类是否提供了这些属性/方法：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see, `Animal` now is a `Protocol`, and `Duck` does not inherit from
    any base class — still mypy is happy.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`Animal` 现在是一个 `Protocol`，而 `Duck` 并未从任何基类继承——但 mypy 依然很高兴。
- en: '**Subclassing Protocols**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**子类化协议**'
- en: 'Naturally, we can also subclass protocols — i.e. defining a child protocol
    inheriting from a parent one, extending this. When doing so, we just need to remember
    to inherit both from the parent protocol, as well as `typing.Protocol`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，我们也可以对子协议进行子类化——即定义一个继承自父协议的子协议，并对其进行扩展。在这样做时，我们只需记住同时继承父协议和 `typing.Protocol`：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above code, we specify `Bird` as a specific `Animal` type, and then define
    a function to feed a bird, expecting it to fly away afterwards.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们将 `Bird` 指定为特定的 `Animal` 类型，然后定义一个喂鸟的函数，期望它随后飞走。
- en: A Short History of Protocols
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协议简史
- en: 'All code written above is valid Python, even before Python 3.8 (remember, Python
    is dynamically typed) — we only needed ABCs to satisfy mypy, and it would have
    complained for the latter examples without ABCs. Nevertheless, protocols have
    been around in Python for much longer, just not as visible or explicit as now:
    most Python developers used the term “protocol” as an agreement to conform to
    certain interfaces, just as was made explicit now. One famous example is the [iterator
    protocol](https://www.pythonmorsels.com/iterator-protocol/#:~:text=The%20iterator%20protocol%20is%20how,it%20evaluates%20a%20for%20loop.)
    — an interface describing which methods a [custom iterator](https://medium.com/gitconnected/iterators-in-python-bd7332ddbc00)
    needs to implement. To make this work with mypy without explicit protocols, several
    “tricks” existed, such as custom typing types:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有代码都是有效的 Python，甚至在 Python 3.8 之前（记住，Python 是动态类型的）——我们只需要 ABCs 来满足 mypy，否则
    mypy 会因为没有 ABCs 的例子而发出警告。然而，协议在 Python 中存在的时间更久，只是不像现在这样明显或显式：大多数 Python 开发者将“协议”一词用作遵守某些接口的约定，就像现在所明确的那样。一个著名的例子是
    [迭代器协议](https://www.pythonmorsels.com/iterator-protocol/#:~:text=The%20iterator%20protocol%20is%20how,it%20evaluates%20a%20for%20loop.)——一个描述自定义迭代器需要实现哪些方法的接口。为了使这与
    mypy 一起工作而无需显式协议，存在几种“技巧”，例如自定义类型：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Abstract Base Classes vs Protocols
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象基类与协议
- en: 'We already discussed possible drawbacks of ABCs (difficulty with external modules
    and interfaces, “unpythonic” code). However, protocols should not replace ABCs,
    but instead both be used. ABCs e.g. are a good way of re-using code: all common
    functionality should be implemented in the base class, and only specific bits
    in the child classes. This is not possible with protocols.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了 ABCs 的潜在缺点（与外部模块和接口的兼容性、“非 Pythonic” 代码）。然而，协议不应取代 ABCs，而是两者都应使用。例如，ABCs
    是重用代码的好方法：所有通用功能应在基类中实现，而只有特定部分在子类中实现。这在协议中是不可能的。
- en: Conclusion
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this post we discussed static vs dynamic typing (duck typing), and how mypy
    handles subtyping. Before Python 3.8, abstract base classes (ABCs) had to be used.
    With the introduction of protocols, Python obtained an elegant way of defining
    “interfaces” and allowing mypy to check adherence to these: in a more Pythonic
    style, protocols allow specifying which attributes / functions classes need to
    implement, and then allowing the usage of all such classes as subtypes of the
    protocol.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了静态与动态类型（鸭子类型），以及 mypy 如何处理子类型。在 Python 3.8 之前，必须使用抽象基类（ABCs）。随着协议的引入，Python
    获得了一种优雅的定义“接口”的方式，并允许 mypy 检查这些接口的遵守情况：以更 Pythonic 的方式，协议允许指定类需要实现哪些属性/函数，然后允许所有这些类作为协议的子类型使用。
