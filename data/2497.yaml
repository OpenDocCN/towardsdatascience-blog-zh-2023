- en: Rubik’s cubes and Markov chains
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 魔方与 Markov 链
- en: 原文：[https://towardsdatascience.com/a-random-walk-on-the-rubiks-cube-684dd304bf3e?source=collection_archive---------1-----------------------#2023-08-04](https://towardsdatascience.com/a-random-walk-on-the-rubiks-cube-684dd304bf3e?source=collection_archive---------1-----------------------#2023-08-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-random-walk-on-the-rubiks-cube-684dd304bf3e?source=collection_archive---------1-----------------------#2023-08-04](https://towardsdatascience.com/a-random-walk-on-the-rubiks-cube-684dd304bf3e?source=collection_archive---------1-----------------------#2023-08-04)
- en: '![](../Images/f2a440689d64309768d49e01e4c71ba0.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2a440689d64309768d49e01e4c71ba0.png)'
- en: Image from Unsplash modified by the author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 Unsplash，由作者修改
- en: '*We obtain the probability of* optimally *solving the Rubik’s cube using a
    Markov process description*'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*我们获得了* 使用 Markov 过程描述 *优化解决魔方的概率*'
- en: '[](https://medium.com/@eduardotestelino?source=post_page-----684dd304bf3e--------------------------------)[![Eduardo
    Testé](../Images/238ed56054abe20dd9ca0b580ca3be20.png)](https://medium.com/@eduardotestelino?source=post_page-----684dd304bf3e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----684dd304bf3e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----684dd304bf3e--------------------------------)
    [Eduardo Testé](https://medium.com/@eduardotestelino?source=post_page-----684dd304bf3e--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@eduardotestelino?source=post_page-----684dd304bf3e--------------------------------)[![Eduardo
    Testé](../Images/238ed56054abe20dd9ca0b580ca3be20.png)](https://medium.com/@eduardotestelino?source=post_page-----684dd304bf3e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----684dd304bf3e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----684dd304bf3e--------------------------------)
    [Eduardo Testé](https://medium.com/@eduardotestelino?source=post_page-----684dd304bf3e--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F180b2f8491d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-random-walk-on-the-rubiks-cube-684dd304bf3e&user=Eduardo+Test%C3%A9&userId=180b2f8491d8&source=post_page-180b2f8491d8----684dd304bf3e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----684dd304bf3e--------------------------------)
    ·14 min read·Aug 4, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F684dd304bf3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-random-walk-on-the-rubiks-cube-684dd304bf3e&user=Eduardo+Test%C3%A9&userId=180b2f8491d8&source=-----684dd304bf3e---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F180b2f8491d8&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-random-walk-on-the-rubiks-cube-684dd304bf3e&user=Eduardo+Test%C3%A9&userId=180b2f8491d8&source=post_page-180b2f8491d8----684dd304bf3e---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----684dd304bf3e--------------------------------)
    ·14 分钟阅读·2023年8月4日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F684dd304bf3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-random-walk-on-the-rubiks-cube-684dd304bf3e&user=Eduardo+Test%C3%A9&userId=180b2f8491d8&source=-----684dd304bf3e---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F684dd304bf3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-random-walk-on-the-rubiks-cube-684dd304bf3e&source=-----684dd304bf3e---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F684dd304bf3e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fa-random-walk-on-the-rubiks-cube-684dd304bf3e&source=-----684dd304bf3e---------------------bookmark_footer-----------)'
- en: The Rubik’s cube is a prototype of a planning problem with a *colossal state
    space* and only one solution. It is the very definition of a needle in a haystack.
    With no guidance (even if you can turn the faces 100 times per second) you might
    spend the whole age of the universe with no success. Everything about it seems
    to involve huge numbers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 魔方是一个具有*巨大状态空间*的规划问题原型，且只有一个解决方案。这正是“针在干草堆中”这一概念的定义。如果没有指导（即使你每秒可以旋转面 100 次），你可能会在整个宇宙的时间里也无法成功。关于它的一切似乎都涉及到巨大的数字。
- en: 'The quantity we are going to compute here is an exception to that. With it
    you will get a simple perspective on a difficult problem (and on any similar planning
    problem too). We need two ingredients, a random process, and an optimal solver.
    This last is a device (real or ideal) that can solve the cube (or a similar problem)
    using a minimum number of moves, given any initial state. We will fully answer
    the following question:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里计算的量是一个例外。通过它，你将获得对一个困难问题（以及任何类似的规划问题）的简单视角。我们需要两个要素，一个随机过程和一个最佳求解器。后者是一个设备（真实的或理想的），可以在任何初始状态下使用最少的移动次数来解决魔方（或类似问题）。我们将完全回答以下问题：
- en: '*If a solved cube undergoes* ***N*** *random turns, what is the probability*
    ***p(d|N)*** *that an optimal solver needs precisely* ***d*** *moves to solve
    it back?*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果一个已解魔方经历了* ***N*** *次随机转动，* ***p(d|N)*** *的概率是多少，即一个最佳求解器需要* ***d*** *次移动才能将其恢复到原始状态？*'
- en: 'In a normal situation, if someone ask you to solve the cube, you will just
    get that, a scramble cube with no references or labels. Here we have one piece
    of information about the scrambled state: it was obtained after ***N*** random
    moves from the solved state. That information is useful!'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，如果有人要求你解魔方，你只会得到一个打乱的魔方，没有任何参考或标签。在这里，我们有关于打乱状态的一条信息：它是在从已解状态开始的***N***次随机移动后获得的。这条信息很有用！
- en: Why are we interested in **p(d|N)** ?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们为什么对**p(d|N)**感兴趣？
- en: Computationally you can try to decipher the cube in different ways. The ambition
    of a Rubik’s project might range between *solving any or some states suboptimally*,
    and *solve every possible state optimally* (this, for example, will take the famous
    [35 CPU-years](https://www.outsidethebeltway.com/rubiks-cube-gods-number-20/)).
    A [cube solver](https://medium.com/@benjamin.botto/implementing-an-optimal-rubiks-cube-solver-using-korf-s-algorithm-bf750b332cf9)
    generally involves two things, a search algorithm and a heuristic function. By
    choosing these two we parametrize how difficult, efficient, or computationally
    demanding our approach is.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算上，你可以尝试以不同的方式解密魔方。一个魔方项目的目标可能在于*以次优方式解决任何或某些状态*，或者*以最佳方式解决每个可能的状态*（例如，这将需要著名的[35
    CPU年](https://www.outsidethebeltway.com/rubiks-cube-gods-number-20/)）。一个[魔方求解器](https://medium.com/@benjamin.botto/implementing-an-optimal-rubiks-cube-solver-using-korf-s-algorithm-bf750b332cf9)通常涉及两个方面，一个搜索算法和一个启发式函数。通过选择这两个方面，我们参数化了我们的方法的难度、效率或计算要求。
- en: In the field of the heuristic function, i.e. the search guidance, there is always
    room for new ideas. Historically, the cube’s heuristic was a combination of Manhattan-like
    distance estimations for the position of the scrambled cube facelets relative
    to their solved positions. Only [recently](https://deepcube.igb.uci.edu/static/files/SolvingTheRubiksCubeWithDeepReinforcementLearningAndSearch_Final.pdf)
    a neural net was used as the heuristic.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在启发式函数领域，即搜索引导，总是存在创新的空间。历史上，魔方的启发式方法是将对打乱的魔方面片相对于其已解状态位置的曼哈顿距离估算相结合。直到[最近](https://deepcube.igb.uci.edu/static/files/SolvingTheRubiksCubeWithDeepReinforcementLearningAndSearch_Final.pdf)，神经网络才被用作启发式方法。
- en: '*Neural Net = Rubik’s cube new heuristic*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*神经网络 = 魔方的新启发式方法*'
- en: 'The work of the neural net is simple (a classifier): you feed a cube’s state
    ***x*** and the depth ***d*** of that state is predicted. The depth ***d*** of
    a state is defined as the minimum number of moves required to solve the cube optimally
    from that state. Notice the following. If we have a device that knows the depth
    of any state, we actually have an optimal solver because everytime we can select
    the move that give us a state with a lower depth, until we get to depth = 0 (the
    solved state).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络的工作很简单（一个分类器）：你输入一个魔方的状态***x***，然后预测该状态的深度***d***。状态***d***的深度定义为从该状态开始解决魔方所需的最少移动次数。请注意以下几点。如果我们有一个知道任何状态深度的设备，我们实际上就有了一个最佳求解器，因为每次我们可以选择一个使状态深度更低的移动，直到达到深度
    = 0（已解状态）。
- en: 'The problem here is how to train that net. Or, specifically, how to get an
    accurate training data. There is no easy way to know the ground-truth depth of
    a scrambled state ***x***, unless you already have an optimal solver. And we don’t
    have an optimal solver, or, we don’t want to use a computational expensive one.
    We want to build an approximate and efficient optimal solver from scratch and
    with minimal human input, and we also want accurate training data for it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是如何训练该网络。或者，具体来说，如何获得准确的训练数据。除非你已经拥有一个最优求解器，否则没有简单的方法知道一个打乱状态***x***的真实深度***d***。我们没有最优求解器，或者，我们不想使用计算代价高昂的求解器。我们想从头开始构建一个近似且高效的最优求解器，并尽量减少人工输入，同时也需要准确的训练数据：
- en: training_data = (***x , d***).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: training_data = (***x , d***).
- en: 'As we said, the accuracy of ***d*** is difficult to get, but it is easy to
    associate a number ***N*** with some particular scrambled states: the ones produced
    by acting on the solved state with ***N*** random moves. Then'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，***d***的准确性很难获得，但将某个特定打乱状态与数字***N***关联却很容易：即通过对已解决状态进行***N***次随机移动生成的状态。然后
- en: '***p(d|N)*** *estimates* ***d,*** *given* ***N.***'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '***p(d|N)*** *估计* ***d,*** *给定* ***N.***'
- en: '***p(d|N)*** will be used to improve the accuracy of that training data. The
    authors of the aforementioned [paper](https://deepcube.igb.uci.edu/)(s) built
    the first Rubik’s cube depth-classifier neural net. Their training data was of
    the form:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '***p(d|N)***将用于提高该训练数据的准确性。前述[论文](https://deepcube.igb.uci.edu/)的作者建立了第一个魔方深度分类神经网络。他们的训练数据形式为：'
- en: training_data = (***x , N***).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: training_data = (***x , N***).
- en: They took ***d*** as ***N.*** That choice was compensated by dynamically improving
    the accuracy of the labels using a Bellman-like loop during the training. The
    probability ***p(d|N)*** computed here offers a better starting point for the
    accuracy of that training data (abundantly obtained by just randomly twisting
    the solved state ***N*** times).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 他们将***d***视为***N.*** 这个选择通过在训练过程中使用类似Bellman的循环动态提高标签的准确性来进行补偿。这里计算的概率***p(d|N)***为训练数据的准确性提供了一个更好的起点（仅通过随机旋转已解决状态***N***次即可获得大量数据）。
- en: A Random Walk view
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个随机游走视角
- en: 'Computing ***p(d|N)*** is equivalent to ask how far ***d*** would a random
    walker be after ***N*** steps. Instead of walking in a square lattice, he would
    be walking in a massive Rubik’s graph of 10 to the power of 19 nodes (cube’s states)
    and a similar number of links (legal moves). If we chose a layout where the nodes
    are organized by their depths: with the solved state in the center and the states
    of depth ***d*** located at radius ***d*** from the center, the graph will look
    very symmetrical. The radial (depth) direction offers a very simple perspective.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 计算***p(d|N)***相当于问一个随机游走者在***N***步之后会离***d***多远。不是在方格网格上行走，而是在一个拥有10的19次方节点（立方体状态）和相似数量连接（合法移动）的巨大魔方图上行走。如果我们选择一个布局，将节点按深度组织：将已解决状态置于中心，深度为***d***的状态位于距离中心***d***的半径上，则图将看起来非常对称。径向（深度）方向提供了一个非常简单的视角。
- en: Convention
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常规
- en: Here we adopt the so called quarter-turn metric for the 3x3x3 cube, where a
    move involves a 90-degree face turn, either clockwise or anticlockwise. In this
    metric there are twelve possible moves. If we had chosen a different metric, like
    the half-turn metric (that also includes 180-degree face turns as a single move)
    the expression for ***p(d|N)*** would differ.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们采用所谓的3x3x3魔方的四分之一转度量，其中一次移动涉及90度的面旋转，无论是顺时针还是逆时针。在这种度量下，有十二种可能的移动。如果我们选择了不同的度量，例如半转度量（也将180度的面旋转作为一次移动），那么***p(d|N)***的表达式将会有所不同。
- en: The data
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: 'To get ***p(d|N)*** we will need to use some kind of domain knowledge , but
    we don’t want to deal with graphs, patterns databases or group theory. We will
    use something more “primary”:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得***p(d|N)***，我们需要使用某种领域知识，但我们不想处理图、模式数据库或群体理论。我们将使用一些更“基础”的东西：
- en: '*The list containing the population of cubes’ states at a depth* ***d****.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*包含深度为***d***的魔方状态数量的列表*'
- en: '[The list](http://www.cube20.org/qtm/) (provided by the authors of the 2012’s
    God’s number paper) doesn’t specify which states are at a certain depth, just
    the total number of them, and there is no reference to any ***N.***'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[这个列表](http://www.cube20.org/qtm/)（由2012年“上帝的数字”论文的作者提供）没有指定哪些状态在某个特定深度，只提供了它们的总数，并且没有提及任何***N.***'
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/2494783db0d4fb83d6bc9dfe05668fa3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2494783db0d4fb83d6bc9dfe05668fa3.png)'
- en: Log-scaled plot of the number of states vs depth
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 深度对状态数量的对数刻度图
- en: 'Some observations on this list:'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于这个列表的一些观察：
- en: First, there are zero states at a depth greater than 26 (God’s number is 26
    in the quarter-turn metric). Second, the list reports an approximate number of
    states for ***d*** between *19* and *24*. We will need to be careful with this
    later. Third, if we make a log-scaled graph, we can see a linear growth for most
    depths (except for those close to the end). That means the population ***D(d)***
    of states growths exponentially. Fitting the linear part of the log graph with
    a straight line we learn that between ***d =*** *3* and ***d =*** *18* the state
    population growth as
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，深度大于26时没有状态（在四分之一转动度量中，上帝的数字是26）。其次，列表中报告了*19*到*24*之间***d***的状态的近似数量。我们稍后需要对此保持谨慎。第三，如果我们绘制对数尺度图，我们可以看到大多数深度（除了接近末端的那些）呈线性增长。这意味着状态数量***D(d)***以指数方式增长。将对数图的线性部分拟合成一条直线，我们发现***d
    =*** *3*和***d =*** *18*之间，状态数量增长为
- en: '![](../Images/d932b286974a514385d7cec312583c5a.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d932b286974a514385d7cec312583c5a.png)'
- en: At depths *3 <* ***d*** *< 18,* on average, *9.34* of the *12* moves will make
    you go away from the solved state, and *2.66* will make you go closer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在*3 <* ***d*** *< 18*的深度上，平均来说，*9.34*个*12*次移动会使你远离已解决状态，而*2.66*次会使你更接近已解决状态。
- en: '**A Markov process on depth’s classes**'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**马尔可夫过程在深度类上的应用**'
- en: 'To find ***p(d|N)*** we imagine the depth classes as sites of a Markov process.
    Let me explain:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出***p(d|N)***，我们可以把深度类看作马尔可夫过程的站点。让我解释一下：
- en: '![](../Images/2e4f65fd4964a257da295fab9325f5fb.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e4f65fd4964a257da295fab9325f5fb.png)'
- en: Randomly moving the cube faces is described as a Markov process (one dimensional
    random walk) between depth classes. Image by the author.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 随机旋转立方体面被描述为深度类之间的马尔可夫过程（一维随机游走）。作者提供的图像。
- en: A depth class ***d*** is the set of all the cube’s states at a depth ***d***
    (minimal number of moves to the solved state). If we randomly chose a state in
    a depth class ***d***, and we turn a random face with a random move, that will
    give us either a state in the class ***d + 1 ,*** with a probability ***p_d***,
    or a state in the class ***d -1,*** with a probability ***q_d.*** In the quarter-turn
    metric there are no self-class moves.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个深度类***d***是指所有在深度***d***下的立方体状态（到达已解决状态的最小步数）。如果我们在深度类***d***中随机选择一个状态，并用随机的动作旋转一个随机的面，这将以概率***p_d***给我们一个深度为***d
    + 1***的状态，或者以概率***q_d***给我们一个深度为***d - 1***的状态。在四分之一转动度量中，没有自类转换。
- en: '![](../Images/5e02256c6870b9cc2f8af9205c251d07.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e02256c6870b9cc2f8af9205c251d07.png)'
- en: That defines a Markov process, where a particular site is a whole depth class.
    In our case, only contiguous ***d*** classes are one-jump connected. To be precise,
    this is a [discrete-time birth-death Markov chain](https://www.randomservices.org/random/markov/BirthDeath.html).
    Because the amount of sites is finite, the chain is also irreducible and ergodic,
    and a unique stationary distribution exist.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了一个马尔可夫过程，其中特定的站点是一个完整的深度类。在我们的例子中，只有相邻的***d***类是一步跳转连接的。准确地说，这是一个[离散时间出生-死亡马尔可夫链](https://www.randomservices.org/random/markov/BirthDeath.html)。由于站点数量是有限的，因此该链也是不可约且遍历的，并且存在唯一的平稳分布。
- en: 'We assume equally distributed probabilities for the selection of the random
    moves at each time. That induces some transition probabilities ***p_d, q_d***
    (to be computed)between the depth classes. The amount of random moves ***N***
    is the discrete time of the Markov process. This is also a one-dimensional random
    walker: at every site (depth class number ***d)***, the probability of going forward
    is ***p_d,*** and the probability of going backwards is ***q_d.*** This one dimensional
    chain is, roughly speaking, the “radial” direction in the Rubik’s graph (organized
    in the depth-radial layout).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设在每次选择随机动作时概率是均匀分布的。这会产生一些深度类之间的转移概率***p_d, q_d***（待计算）。随机动作的数量***N***是马尔可夫过程的离散时间。这也是一个一维随机游走：在每个站点（深度类编号***d***）中，前进的概率是***p_d***，后退的概率是***q_d***。这个一维链，粗略来说，是鲁比克图中的“径向”方向（按深度-径向布局组织）。
- en: The transition matrix
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转移矩阵
- en: 'Any Markov processes is encoded in a transition matrix ***M***. The **(*i,j*)**entry
    of ***M*** is the probability of jumping from site ***i*** to site ***j***. In
    our case only the following entries are different from zero:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 任何马尔可夫过程都可以用转移矩阵***M***编码。***M***的**(*i,j*)**项是从站点***i***跳到站点***j***的概率。在我们的例子中，只有以下项不同于零：
- en: '![](../Images/57083f8394eb0d8992d285009e40350f.png)![](../Images/58dba14ad43573438ebfd95c23d5e330.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57083f8394eb0d8992d285009e40350f.png)![](../Images/58dba14ad43573438ebfd95c23d5e330.png)'
- en: 'Here ***p_*0 *= 1:*** from the depth class **0** (containing just the solved
    state) we can only jump to the depth class ***1*** (there is no class ***-1***).
    Also, ***q_*26 *= 1***: from the depth class **26** we can only jump to depth
    class **25** (there is no class **27**). For the same reason, there are no ***p_*26**
    or ***q_*0.**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '这里 ***p_*0 *= 1:*** 从深度等级**0**（仅包含已解决状态）我们只能跳到深度等级***1***（不存在等级***-1***）。同样，***q_*26
    *= 1***: 从深度等级**26**我们只能跳到深度等级**25**（不存在等级**27**）。出于同样的原因，***p_*26** 或 ***q_*0**
    不存在。'
- en: The stationary distribution
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平稳分布
- en: 'We mapped the action of randomly moving the cube to a one-dimensional depth-class
    random walker jumping back and forth with probabilities ***q_d*** and ***p_d***.
    What happens after a long walk? or, how many times does the walker visit a particular
    site after a long walk? In real life: how often is a depth class visited when
    the cube undergoes random turns?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将立方体的随机移动作用映射为一个一维深度等级随机游走者，以概率 ***q_d*** 和 ***p_d*** 来回跳动。长时间的行走会发生什么？或者，游走者在长时间的行走后访问特定位置的次数是多少？在现实生活中：当立方体经历随机旋转时，深度等级的访问频率是多少？
- en: 'In the long run, and no matter what the starting point was, the time the walker
    spends in the depth class ***d*** is proportional to the population ***D(d)***
    of that depth class. This is the main point here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从长远来看，无论起点是什么，游走者在深度等级 ***d*** 上花费的时间与该深度等级的人口 ***D(d)*** 成正比。这是这里的重点：
- en: '*the (normalized) depth-population list* ***D(d)*** *should be interpreted
    as the vector representing the stationary distribution of our depth class Markov
    process.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*（归一化的）深度人口列表* ***D(d)*** *应被解释为表示我们深度等级马尔可夫过程的平稳分布的向量。*'
- en: Mathematically, ***D(d)*** is a left eigenvector of ***M***
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，***D(d)*** 是 ***M*** 的左特征向量
- en: '![](../Images/bde913f9da3abfad0083731280a5d51b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bde913f9da3abfad0083731280a5d51b.png)'
- en: This matrix equation will give us **26** linear equations, from which we will
    get the ***p_i’***s and ***q_i****’*s.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩阵方程将给出**26**个线性方程，我们将从中得到 ***p_i’*** 和 ***q_i****’*。
- en: '![](../Images/0eeb7faa1a5b0dde5d756aa467e928f5.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0eeb7faa1a5b0dde5d756aa467e928f5.png)'
- en: Taking into account that ***p_*0 *= q_*26 *=* 1*,*** we can rewrite these as
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 ***p_*0 *= q_*26 *=* 1*,*** 我们可以将这些重新写作
- en: '![](../Images/d7dffda0523d71261d1597a8cacf9b85.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d7dffda0523d71261d1597a8cacf9b85.png)'
- en: Detailed balance equations. Image by the author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 详细平衡方程。图像由作者提供。
- en: 'These are known as ***detailed balance equations***: the flux, defined to be
    the stationary site population times the jumping probability, is the same in both
    directions. The solutions are:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些被称为 ***详细平衡方程***：流量，定义为站态位置人口与跳跃概率的乘积，在两个方向上是相同的。解为：
- en: '![](../Images/fa7368abaae4e49dfbffb35965cccbee.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa7368abaae4e49dfbffb35965cccbee.png)'
- en: and ***p_i*** is obtained using ***p_i + q_i = 1.***
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 ***p_i*** 是通过 ***p_i + q_i = 1.*** 获得的。
- en: Some conditions on the population of a depth class
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对深度等级人口的一些条件
- en: There is something interesting about these solutions. Because ***q_i*** is a
    probability we should have that
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些解有趣的地方在于，因为 ***q_i*** 是一个概率，我们应该有
- en: '![](../Images/bf99a7c64535e8839cfc796007eb75ab.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf99a7c64535e8839cfc796007eb75ab.png)'
- en: 'and that translate into the following condition for the distribution ***D_k***:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这转化为分布 ***D_k*** 的以下条件：
- en: '![](../Images/843b9f5679324a7b0d15998c790c54c5.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/843b9f5679324a7b0d15998c790c54c5.png)'
- en: 'This is a tower of inequalities that the depth-population ***D_k*** should
    fulfill. Explicitly, they can be organized as:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是深度人口 ***D_k*** 应该满足的一个不等式塔。明确地，它们可以组织为：
- en: '![](../Images/41bf55db7c0f0278a9e59085609a4411.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41bf55db7c0f0278a9e59085609a4411.png)'
- en: In particular, the last two inequalities are
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，最后两个不等式是
- en: '![](../Images/ffda467b088df2d468490af3b19e34e7.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ffda467b088df2d468490af3b19e34e7.png)'
- en: Because ***D_27 = 0,*** we get that the lower and upper bound are equal, so
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 ***D_27 = 0,*** 我们得到下限和上限相等，所以
- en: '![](../Images/38a6a36914d5831e968da9c01f04abd5.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38a6a36914d5831e968da9c01f04abd5.png)'
- en: 'Or:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '![](../Images/b3b99d688cb884f585ca2ff6af13efe0.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3b99d688cb884f585ca2ff6af13efe0.png)'
- en: '*The sum of the population of the even sites should be equal to the sum of
    the population of the odd sites!*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*偶数位置的总人口应该等于奇数位置的总人口！*'
- en: 'We can see this as a detailed balance between even and odd sites: every move
    is always to a different and contiguous depth class. Any jump will take you from
    the odd depth class (the class of all the odd depth classes) to the even depth
    class (the class of all the even depth classes). So the odd to even class jump
    occur with probability 1 (and vise versa). Being the probabilities one in both
    direction, their population should be equal by detailed balance.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其视为偶数和奇数站点之间的详细平衡：每一步总是到达不同且相邻的深度类。任何跳跃都会将你从奇数深度类（所有奇数深度类的类）带到偶数深度类（所有偶数深度类的类）。因此，奇数到偶数类的跳跃发生的概率为1（反之亦然）。由于两个方向的概率都是1，它们的数量应该通过详细平衡来相等。
- en: For the same reason the Markov process will attain a period-two “stationary
    distribution” that switches between even and odd sites after every move (discrete
    time ***N***).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 出于同样的原因，马尔可夫过程将达到一个周期为二的“平稳分布”，在每次移动后在偶数和奇数站点之间切换（离散时间***N***）。
- en: A problem with the data
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据存在问题
- en: 'The depth-population ***D_d*** reported in the [source](http://www.cube20.org/qtm/)
    of the data that we are planning to use is approximate for ***d*** *= 19,20,21,22,23,24\.*
    So there is no guarantee it will satisfy all these conditions (inequalities).
    Don’t be surprised if we get some probabilities ***q_i*** out of the range [0,1]
    (as it is the case!). In particular, if we try and check the last condition (the
    even-odd population equality) it is off by a big number! (update: see the note
    at the end)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划使用的数据的深度人口***D_d***在[source](http://www.cube20.org/qtm/)中报告的是大致的，对于***d***
    *= 19,20,21,22,23,24\。因此，没有保证它会满足所有这些条件（不等式）。如果我们得到一些概率***q_i***超出了[0,1]范围（如情况所示！）。特别是，如果我们尝试检查最后一个条件（偶数-奇数人口平衡），它差距很大！（更新：见末尾注释）
- en: '![](../Images/d3e73762c794aeaf2e594603731cf6fc.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d3e73762c794aeaf2e594603731cf6fc.png)'
- en: A way out
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 出路
- en: The odd class seem to be underpopulated (this is a consequence of the approximation
    the authors chose to report the data). To make things work (get probabilities
    in the range [0,1]), we decided to add the previous big number to the population
    of the depth class 21 (the odd class with the greatest population, or, the one
    that will notice that big addition the least). With this correction, all the obtained
    probabilities seems to be correct (which means the inequalities are also satisfied).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 奇数类似乎人口不足（这是作者选择报告数据的近似的结果）。为了使结果有效（使概率在[0,1]范围内），我们决定将之前的大数字添加到深度类别21的人口中（具有最大人口的奇数类，或者，最不容易注意到这个大增量的类）。通过这个修正，所有得到的概率似乎都是正确的（这意味着不等式也得到了满足）。
- en: 'The jumping probabilities are:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 跳跃概率为：
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice that almost all the first ***p_i*** (up to ***i = 21***) are close to
    **1\.** These are the probabilities of going away from the solved state. The probabilities
    of going closer to the solved state (***q_i***) are almost ***1*** for ***i***
    greater than ***21\.*** This puts in perspective why it is difficult to solve
    the cube: the random walker (or the cube’s random mover) will be “trapped forever”
    in a neighborhood of the depth class ***21***.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意几乎所有前***p_i***（直到***i = 21***）都接近**1**。这些是远离已解决状态的概率。接近已解决状态的概率（***q_i***）对于***i***大于***21***几乎为***1***。这使我们认识到为何解决魔方困难：随机行走者（或魔方的随机移动者）将“永远困在”深度类***21***的邻域中。
- en: '**p(d|N)**'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**p(d|N)**'
- en: 'Plugging the ***​​p_i, q_i*** numerical values in the transition matrix ***M***
    the Markov process is completely described. In particular, if we start at site
    **0** with probability one, after ***N*** steps the random walker will be at site
    ***d*** with probability:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将***​​p_i, q_i***数值代入转移矩阵***M***中，马尔可夫过程得到完整描述。特别是，如果我们以概率一从站点**0**开始，经过***N***步后，随机行走者将以概率到达站点***d***：
- en: '![](../Images/239206aa18da8c62b25b6283c75c1bbb.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/239206aa18da8c62b25b6283c75c1bbb.png)'
- en: 'This is the probability we were looking for:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们寻找的概率：
- en: '![](../Images/848d2cf583e6041543f8dbb1de70b2ae.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/848d2cf583e6041543f8dbb1de70b2ae.png)'
- en: 'Numerically, we learn that ***p(d|N)*** is non zero only if ***N*** and ***d***
    have the same parity (something that is well known by some Rubik’s cube scholars).
    Below we plot some ***p(d|N)***’s for different ***N***’s:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从数值上看，我们了解到***p(d|N)***只有在***N***和***d***具有相同奇偶性时才非零（这是某些魔方学者所熟知的）。下面我们为不同的***N***绘制了一些***p(d|N)***：
- en: '![](../Images/60327a7b01aa936c7c67fa93b5cbc87b.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60327a7b01aa936c7c67fa93b5cbc87b.png)'
- en: Some probabilities p(d|N). Image by the author.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一些概率p(d|N)。作者图像。
- en: 'For example: after ***N*** *= 18* random moves (green plot), it is more likely
    the resulting cube’s state is at depth ***d*** = *17* than at depth***d*** *=
    19\.* We also observe that after ***N*** = ***31*** or ***32****,* ***p(d|N)***
    is pretty close to the stationary distribution ***D(d)*** (except it switches
    back and forth between even and odd sites). This is another answer the question
    of how many moves are enough to say we [really scrambled the cube](https://theconversation.com/how-hard-is-it-to-scramble-rubiks-cube-129916).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：经过 ***N*** *= 18* 次随机移动（绿色曲线），结果立方体的状态在深度 ***d*** = *17* 的可能性比在深度 ***d***
    *= 19* 更高。我们还观察到，在 ***N*** = ***31*** 或 ***32*** 时，***p(d|N)*** 与平稳分布 ***D(d)***
    非常接近（除了它在偶数和奇数位置之间来回切换）。这是另一个回答多少步足以说明我们[真的打乱了魔方](https://theconversation.com/how-hard-is-it-to-scramble-rubiks-cube-129916)的问题。
- en: Let’s notice we have solved an inverse problem. We got the transition probabilities
    from the stationary distribution. This is not possible for a general Markov process.
    In particular, it is not possible to find ***p(d|N),*** withthe method described
    here, for the half-turn metric. The half-turn metric is different because we can
    stay in the same depth class after a move (by their moves definition). These self
    depth class jumps introduce extra probabilities ***r_i*** in the diagonal of the
    transition matrix and we will have more variables than equations.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们解决了一个逆问题。我们从平稳分布中得到了转移概率。这对于一般的马尔科夫过程是不可能的。特别是，对于半转度量，通过这里描述的方法不能找到 ***p(d|N)***。半转度量是不同的，因为我们可以在移动后停留在同一深度类别（按他们的移动定义）。这些自深度类别跳跃在转移矩阵的对角线上引入了额外的概率
    ***r_i***，我们将有更多的变量而不是方程。
- en: Final Comments
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的评论
- en: 'Even if the Rubik’s cube is a 35 CPU-years problem from a computational perspective,
    there are many aspects of it that can be described analytically or with modest
    numerical efforts. The probability we computed here is an example of that. Everything
    we said can be easy generalized to more complex Rubik’s cube-[siblings](https://superliminal.com/cube/).
    A cool generalization is to go to more dimensions: ***S = 4D, 5D, 6D***, … dimensional
    Rubik’s cube. The state space in those cases growth exponentially with ***S***.
    So there are cubes for which the Markov chain is as long as we want. In other
    words, we have similar puzzles for which God’s numbers as big as we want (roughly
    speaking, God’s number is the logarithm of the number of states, and the number
    of states increases with the dimension ***S***). In those cases we can take certain
    limits that explain some aspects of our ***3D*** case, like the next one:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 即使从计算角度来看，魔方是一个35 CPU年问题，它的许多方面仍然可以通过分析或适度的数值计算来描述。我们在这里计算的概率就是一个例子。我们所说的一切都可以很容易地推广到更复杂的魔方-[兄弟](https://superliminal.com/cube/)。一个很酷的推广是进入更多维度：***S
    = 4D, 5D, 6D***，……维度的魔方。在这些情况下，状态空间随着 ***S*** 的增加而呈指数增长。因此，有些魔方的马尔科夫链可以长到我们想要的长度。换句话说，我们有类似的谜题，其中上帝的数字可以大到我们想要的程度（粗略地说，上帝的数字是状态数量的对数，而状态数量随着维度
    ***S*** 的增加而增加）。在这些情况下，我们可以采取某些极限来解释我们***3D***情况的某些方面，就像下一个：
- en: '*In the limit of large God’s number* ***G,*** *the probability* ***p(d|N)***
    *should approach the binomial distribution*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*在大上帝数* ***G*** *的极限情况下，* ***p(d|N)*** *的概率应该接近二项分布*'
- en: 'It is not very difficult to see why that might be the case. If ***G*** is large,
    the exponential growth of ***D_d*** will be very stable for most ***d***’s. This
    is a daring, yet not excessively wild guess:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出为什么会这样。如果 ***G*** 很大，***D_d*** 的指数增长将在大多数 ***d*** 下非常稳定。这是一个大胆但并非过于疯狂的猜测：
- en: '![](../Images/85ebc8962ba21d12032b6d749ad4d857.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85ebc8962ba21d12032b6d749ad4d857.png)'
- en: 'for ***k*** away from ***0*** and ***G***. As we said, in the ***S = 3D***
    case ***b =*** *9.34\.* For higher ***S***, ***b*** should increase (having more
    faces will increase the branching factor ***b***). That translate into the following
    values for the probabilities:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于远离 ***0*** 和 ***G*** 的 ***k***。如我们所说，在 ***S = 3D*** 的情况下 ***b =*** *9.34*。对于更高的
    ***S***，***b*** 应该增加（拥有更多面会增加分支因子 ***b***）。这转化为以下概率值：
- en: '![](../Images/bb2f9575ad779d4d0c7b8098f3ceb6ca.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bb2f9575ad779d4d0c7b8098f3ceb6ca.png)'
- en: '***q_i*** approaches a constant value ***1/(b+1)*** when ***i*** is away from
    the origin (***i>>1***) and God’s number (***i<<G***). ***p_i*** will also be
    constant in this range. You can see that the values of ***p_i*** and ***q_i***
    computed here for the ***3D*** case are almost constant for ***i=3, …, 15,***
    and that ***q_i*** is approximately equal to ***1/(b+1)*** with ***b =*** *9.34\.*
    For ***0 << i << G*** we will then have a one dimensional random walker with constant
    probabilities of going back (***q***) and forth (***p***). In this case the position
    the walker will be described by a binomial-like distribution.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当***i***远离原点（***i >> 1***）且上帝的数字（***i << G***）时，***q_i***会接近一个常数值***1/(b+1)***。在这个范围内，***p_i***也将是常数。你可以看到，这里为***3D***情况计算的***p_i***和***q_i***的值对于***i
    = 3, …, 15***几乎是常数，并且***q_i***大约等于***1/(b+1)***，其中***b =*** *9.34*。对于***0 << i
    << G***，我们将得到一个具有常数返回概率（***q***）和前进概率（***p***）的一维随机行走者。在这种情况下，行走者的位置将由类似二项分布的分布描述。
- en: The probability that the random walker will take ***k*** steps to the right
    (success rate ***p***) and ***N-k*** steps to the left (success rate ***q***)
    after ***N*** trials is ***Binomial(k,N,p)***. The distance traveled after ***N***
    steps will then be
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 随机行走者在经过***N***次试验后，向右走***k***步（成功率***p***）和向左走***N-k***步（成功率***q***）的概率为***Binomial(k,N,p)***。在经过***N***步后行走的距离将是
- en: '***d = k -* (*N - k*)*,***'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '***d = k - (*N - k*)***'
- en: from which we obtain
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们得到
- en: '![](../Images/a9a2768e4fe65621547b6265fbf6598a.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a9a2768e4fe65621547b6265fbf6598a.png)'
- en: From here we can get analytical estimates for the most likely ***d***
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里我们可以得到最可能的***d***的解析估计
- en: '![](../Images/040fdb32d30d8bded4adee7998f2ca22.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/040fdb32d30d8bded4adee7998f2ca22.png)'
- en: The most likely ***d*** (in the binomial regime)growth linearly with ***N,***
    and with a slope that depends on the “effective” branching factor ***b***. As
    the dimension ***S*** of the cube increases, the branching factor ***b*** grows,
    and the most probable depth ***d*** actually approaches ***N.***
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最可能的***d***（在二项分布范围内）随***N***线性增长，斜率依赖于“有效”分支因子***b***。随着立方体维度***S***的增加，分支因子***b***也会增加，而最可能的深度***d***实际上接近于***N***。
- en: '**Update note**. After this story was published I contacted Tomas Rokicki and
    Morley Davidson (two of the authors of the 2012’s [proof that God’s number is
    20 in the half-turn metric](https://tomas.rokicki.com/rubik20.pdf)) about their
    [reported **D(d)**](https://cube20.org/qtm/)and the negative probabilities I got
    using it**.** They share with me a more accurate data, with lower and upper bounds
    for the population of the depths d = 19, …, 24 . Their data is fully compatible
    with the here obtained inequalities, and with the fact that the population of
    the even depth classes should be equal to the population of the odd depth classes
    (in the quarter-turn metric). The probabilities computed here have a negligible
    correction when using this new data.'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**更新说明**。在这个故事发布后，我联系了Tomas Rokicki和Morley Davidson（2012年[证明上帝的数字在半转度量中为20](https://tomas.rokicki.com/rubik20.pdf)的两位作者）关于他们[报告的**D(d)**](https://cube20.org/qtm/)以及我使用这些数据得到的负概率。他们与我分享了更准确的数据，包括深度d
    = 19, …, 24的上下界。他们的数据与这里得到的不等式完全兼容，并且与偶数深度类别的数量应等于奇数深度类别的数量（在四分之一转度量中）的事实相一致。使用这些新数据计算的概率具有微不足道的修正。'
