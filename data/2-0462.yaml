- en: Caching in GitHub Actions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions中的缓存
- en: 原文：[https://towardsdatascience.com/caching-in-github-actions-7ff11b6c1874](https://towardsdatascience.com/caching-in-github-actions-7ff11b6c1874)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/caching-in-github-actions-7ff11b6c1874](https://towardsdatascience.com/caching-in-github-actions-7ff11b6c1874)
- en: Speed up your CI/CD Pipelines
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加速您的CI/CD管道
- en: '[](https://medium.com/@hrmnmichaels?source=post_page-----7ff11b6c1874--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----7ff11b6c1874--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ff11b6c1874--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ff11b6c1874--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----7ff11b6c1874--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@hrmnmichaels?source=post_page-----7ff11b6c1874--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----7ff11b6c1874--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ff11b6c1874--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ff11b6c1874--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----7ff11b6c1874--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ff11b6c1874--------------------------------)
    ·7 min read·Nov 21, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ff11b6c1874--------------------------------)
    ·7分钟阅读·2023年11月21日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In this post we will discover how to cache [GitHub Actions](https://docs.github.com/en/actions).
    Github Actions is a platform from Github with which one can automate workflows,
    and is commonly used for CI/CD (continuous integration / delivery) pipelines —
    e.g. to automatically run unit tests when wanting to merge a new PR. Since these
    pipelines are run frequently, and their execution time can grow significantly,
    it makes sense to see where to save time — and caching action outputs is one such
    method.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨如何缓存[GitHub Actions](https://docs.github.com/en/actions)。GitHub
    Actions是GitHub提供的一个平台，允许自动化工作流，通常用于CI/CD（持续集成/交付）管道——例如，当想要合并新的PR时自动运行单元测试。由于这些管道运行频繁，且执行时间可能显著增长，因此考虑节省时间是很有意义的——缓存动作输出就是一种方法。
- en: '![](../Images/60ed35c51b86a7f2379b590ccccb0a4b.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60ed35c51b86a7f2379b590ccccb0a4b.png)'
- en: Photo by [Possessed Photography](https://unsplash.com/@possessedphotography?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/sodimm-ram-stick-nuc3NFB_6po?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Possessed Photography](https://unsplash.com/@possessedphotography?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)拍摄，发表于[Unsplash](https://unsplash.com/photos/sodimm-ram-stick-nuc3NFB_6po?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: 'In this post we will cover said caching. I felt the official documentation
    is quite brief and leaves some questions unanswered — thus I here wanted to shed
    a bit more light into this. We begin by a short introduction to Github Actions
    and how caching works, and then demonstrate this using two examples: the first
    follows the original toy example about creating prime numbers, while the second
    one is more realistic — we cache a full Python environment.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论缓存。我觉得官方文档简洁且未解答一些问题——因此我在这里想多做一些解释。我们首先简要介绍GitHub Actions及其缓存的工作原理，然后通过两个示例进行演示：第一个示例遵循创建素数的原始玩具示例，而第二个示例更现实——我们缓存一个完整的Python环境。
- en: Introduction to Github Actions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions简介
- en: 'In a [previous post](https://medium.com/gitconnected/introduction-to-github-actions-e742b5370bfa)
    I introduced this topic in more details — thus here we will just briefly cover
    this, and I would like to refer to the linked article for details. However, in
    summary Github Actions allows to automatize workflows, often used for CI/CD pipelines,
    e.g. for running unit tests, checking style guides etc. After receiving certain
    trigger events, runners (which can be hosted by Github or custom ones) pick up
    jobs consisting of different steps. Let’s use an example from the previous post
    for demonstration:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[上一篇文章](https://medium.com/gitconnected/introduction-to-github-actions-e742b5370bfa)中，我详细介绍了这一主题——因此这里我们仅简要概述此内容，并且我建议参阅链接中的文章获取详细信息。总的来说，GitHub
    Actions允许自动化工作流，通常用于CI/CD管道，例如运行单元测试、检查风格指南等。在接收到某些触发事件后，运行器（可以由GitHub托管或自定义）会接收由不同步骤组成的任务。让我们用上一篇文章中的一个示例进行演示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we define a workflow “Sample Workflow”, and set code pushes and opening
    of new PRs as event triggers. The workflow then consists of a single job running
    on “ubuntu-20.04” — which is a freely available Git instance running said Ubuntu
    version. The job has different steps, which checkout the repo, setup Python, and
    output different messages.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为“Sample Workflow”的工作流，并将代码推送和打开新PR设置为事件触发器。工作流包括一个在“ubuntu-20.04”上运行的单个作业——这是一个运行所述Ubuntu版本的免费Git实例。该作业有不同的步骤，包括检出代码库、设置Python和输出不同的消息。
- en: 'In order for this to be run, we need to place it into the `.github/workflows`
    folder. Once there and pushed to Github, this workflow will automatically be run
    on the defined event triggers — and we can see status and output of the defined
    workflows conveniently, e.g. as such:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行此工作流，我们需要将其放置到`.github/workflows`文件夹中。一旦放置并推送到Github，这个工作流将会在定义的事件触发器上自动运行——我们可以方便地查看定义工作流的状态和输出，例如，如下所示：
- en: '![](../Images/523d8d1e0325b167b34056fc5c7564bb.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/523d8d1e0325b167b34056fc5c7564bb.png)'
- en: Image by author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Caching Actions
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存操作
- en: 'With the foundations laid, let’s move to caching. Via the [cache action](https://github.com/actions/cache),
    we can define a cache step. Borrowing from our toy example to come, this can look
    like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在奠定基础之后，让我们继续讨论缓存。通过[缓存操作](https://github.com/actions/cache)，我们可以定义一个缓存步骤。借用我们即将到来的玩具示例，这可以如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A cache is uniquely identified by a key, and a path: if both of these are present
    / filled, the cache is loaded — otherwise generated. When the workflow is run
    for the first time (or some dependencies change) and the cache is generated, the
    contents of the folder specified under `path` are uploaded to some Github storage.
    This way, the cache is independent of the runner the previous run was executed
    on, and always available (in particular, you do not need your own runner to persist
    the cache — but can use the publicly available Github runners).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存由一个键和一个路径唯一标识：如果这两者都存在/填写，缓存将被加载——否则生成。当工作流第一次运行（或某些依赖项发生更改）并生成缓存时，指定在`path`下的文件夹内容将上传到某个Github存储区。这样，缓存就与之前运行的运行器无关，并且始终可用（特别是，你不需要自己的运行器来持久化缓存——可以使用公开的Github运行器）。
- en: 'Now, in a following step, we can check if the cache is available (cache hit),
    and skip it (typically the step generating the contents of the cache):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在接下来的步骤中，我们可以检查缓存是否可用（缓存命中），并跳过它（通常是生成缓存内容的步骤）：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Caching Generating Prime Numbers
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存生成素数
- en: 'With this being said, let’s give a first full example: via Github Actions we
    generate the first `N` prime numbers, and cache this output. Note this is motivated
    by the original docs, albeit somewhat more complete in my opinion.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们给出第一个完整的示例：通过Github Actions，我们生成前`N`个素数，并缓存此输出。请注意，这一做法受到原始文档的启发，尽管在我看来更为完整。
- en: 'The example consists of two bash scripts. Via the first, `generate_primes.sh`,
    we generate the first `N` prime numbers and write them to `prime-numbers/generate_primes.sh`
    :'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例由两个bash脚本组成。通过第一个脚本`generate_primes.sh`，我们生成前`N`个素数并将它们写入`prime-numbers/generate_primes.sh`：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The other script, `primes.sh`, reads this file, and simply prints the stored
    prime numbers:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个脚本`primes.sh`读取此文件，并简单地打印存储的素数：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Assuming we want to find a lot of prime numbers, and that this takes a while,
    it lies close wanting to cache this process, which is exactly what we do with
    `prime_workflow.yml`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想找很多素数，并且这需要一段时间，这与缓存这个过程密切相关，这正是我们用`prime_workflow.yml`做的：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We checkout the repository, and in step 2 call the cache action: the key is
    composed of the runner OS and the suffix “-primes”, and the cache path is the
    folder our first script dumps the resulting file into.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检出代码库，在第2步调用缓存操作：键由运行器操作系统和后缀“-primes”组成，缓存路径是第一个脚本将结果文件转储到的文件夹。
- en: Then, we ask the workflow to generate the prime numbers (i.e. run `generate_primes.sh`)
    — if there is no cache hit, e.g. when executing this script for the first time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们要求工作流生成素数（即运行`generate_primes.sh`）——如果没有缓存命中，例如，当第一次执行此脚本时。
- en: 'Lastly, we use the generated or cached prime numbers in the script `primes.sh`
    . Looking at the second run of this workflow, we observe that indeed the “generate”
    step was skipped:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在脚本`primes.sh`中使用生成的或缓存的素数。查看此工作流的第二次运行，我们观察到确实跳过了“生成”步骤：
- en: '![](../Images/8097ba7337afc860f3e306fafcfc69bc.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8097ba7337afc860f3e306fafcfc69bc.png)'
- en: Image by author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: You can also find the full example on [Github](https://github.com/hermanmichaels/github_actions_cache).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在[Github](https://github.com/hermanmichaels/github_actions_cache)上找到完整的示例。
- en: Caching Poetry Environments
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存 Poetry 环境
- en: 'Now, let’s come to a slightly more realistic example: it is strongly recommended
    that any Python project is bundled with an environment, s.t. all developers are
    guaranteed to work with the same packages and versions. On Github Actions runners,
    the repository is mostly checked out freshly, meaning every time the set environment
    has to be installed anew. Thus, here we show how to cache this environment — meaning
    instead of downloading and installing the packages, the full environment is cached
    and downloaded from the cache. In particular, this example will show the usage
    of [poetry](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161),
    which I prefer for managing my environments.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个稍微现实一点的示例：强烈建议任何 Python 项目都捆绑一个环境，以确保所有开发者使用相同的包和版本。在 Github Actions
    运行器上，仓库通常是全新检出的，这意味着每次都必须重新安装设置的环境。因此，我们在这里展示如何缓存这个环境——即与其下载和安装包，不如将完整的环境缓存并从缓存中下载。特别是，此示例将展示如何使用[poetry](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161)，这是我管理环境时更倾向使用的工具。
- en: 'The sample file `main.py` in this project looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目中的示例文件`main.py`如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I.e., we plot a simple sinus curve using [matplotlib](https://matplotlib.org/),
    and thus need this and numpy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 即，我们使用[matplotlib](https://matplotlib.org/)绘制简单的正弦曲线，因此需要这个和 numpy。
- en: 'Consequently, our `pyproject.toml` file for poetry contains the following (here,
    I am assuming basic knowledge of poetry — and otherwise would like to refer to
    the [linked post](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161)):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`pyproject.toml`文件包含以下内容（这里，我假设你对 poetry 有基本了解——否则可以参考[链接的帖子](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161)）：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we can see, we install the needed packages — as well as some other [useful
    tools no Python project should miss](https://medium.com/towards-data-science/best-practices-for-python-development-bf74c2880f87).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们安装了所需的包——以及一些[每个 Python 项目都不应错过的有用工具](https://medium.com/towards-data-science/best-practices-for-python-development-bf74c2880f87)。
- en: 'Then, the corresponding Github Actions workflow to setup the environment (including
    caching) looks as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，设置环境（包括缓存）的相应 Github Actions 工作流如下所示：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We initially install Python and poetry. In the last step, we run `poetry install`,
    which installs all required packages into the poetry environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先安装 Python 和 poetry。在最后一步，我们运行`poetry install`，它将所有所需的包安装到 poetry 环境中。
- en: 'Key focus of this post is the second last step: in this, we define a cache
    with target path `~/.cache/pypoetry` — which is where poetry environments are
    stored by default. Thus, if this workflow is run again, and this key / folder
    combination is present in the cache, we skip the poetry install — and instead
    download the full environment from the cloud cache.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本帖的关键点是倒数第二步：在此步骤中，我们定义了一个目标路径为`~/.cache/pypoetry`的缓存——这是 poetry 环境默认存储的地方。因此，如果再次运行此工作流，并且此键/文件夹组合存在于缓存中，我们将跳过
    poetry 安装——而是从云缓存中下载完整的环境。
- en: Also this example is available in the same [demo repository](https://github.com/hermanmichaels/github_actions_cache).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例也可以在相同的[演示仓库](https://github.com/hermanmichaels/github_actions_cache)中找到。
- en: 'NOTE: there is a trade-off to this. In the version without caching, we download
    all packages and then install them. In the version employing the cache, we do
    not have to install anything, but instead need to download all installed packages
    from the cache. Whatever is faster should depend on various factors, such as bandwidth,
    package size and installation duration. Let me know in the comments if you have
    practical data points here, and how you prefer to handle this!'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这其中存在权衡。在没有缓存的版本中，我们下载所有包并安装它们。在使用缓存的版本中，我们不需要安装任何东西，而是需要从缓存中下载所有已安装的包。哪个更快应取决于各种因素，如带宽、包的大小和安装时长。如果你有实际的数据点，或者你更喜欢如何处理，请在评论中告诉我！
- en: Managing Caches
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存管理
- en: 'Lastly, a word about monitoring and managing your caches: when opening your
    repository on Github, and navigating to “Actions / Caches”, we see the following
    image:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于监控和管理缓存的一点说明：当你在 Github 上打开你的仓库，并导航到“Actions / Caches”时，我们会看到如下图像：
- en: '![](../Images/87d157982af78ec3961720d1ee18c233.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87d157982af78ec3961720d1ee18c233.png)'
- en: Image by author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: All caches used in this repository are displayed, e.g. indicating their size,
    and we can remove them if needed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仓库中使用的所有缓存都被展示出来，例如，指明了它们的大小，我们可以在需要时将其移除。
- en: Conclusion
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This finishes our introduction to caching for Github Actions. This is an extremely
    useful feature, as CI/CD pipelines often have developers waiting impatiently —
    and by caching we can reduce the time these need to run, and also reduce load
    on the overall system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了我们对Github Actions缓存的介绍。这是一个非常有用的功能，因为CI/CD流水线通常让开发者等待不耐烦——通过缓存，我们可以减少这些流程的运行时间，并减少对整个系统的负载。
- en: 'After a general introduction to the topic, we showed how to apply caching via
    two concrete examples: we started with a toy example caching generated prime numbers,
    and then showed how to cache a poetry environment. This [Github repository](https://github.com/hermanmichaels/github_actions_cache)
    contains all sample code.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在对主题进行一般介绍后，我们通过两个具体示例展示了如何应用缓存：我们从缓存生成的素数的玩具示例开始，然后展示了如何缓存一个诗歌环境。这个[Github
    仓库](https://github.com/hermanmichaels/github_actions_cache)包含了所有示例代码。
- en: Thanks for reading!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
