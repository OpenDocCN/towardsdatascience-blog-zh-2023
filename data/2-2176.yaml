- en: Understand SQL Injection and Learn to Avoid It in Python with SQLAlchemy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SQL 注入并学习如何在 Python 中使用 SQLAlchemy 避免它
- en: 原文：[https://towardsdatascience.com/understand-sql-injection-and-learn-to-avoid-it-in-python-with-sqlalchemy-2c0ba57733b2](https://towardsdatascience.com/understand-sql-injection-and-learn-to-avoid-it-in-python-with-sqlalchemy-2c0ba57733b2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understand-sql-injection-and-learn-to-avoid-it-in-python-with-sqlalchemy-2c0ba57733b2](https://towardsdatascience.com/understand-sql-injection-and-learn-to-avoid-it-in-python-with-sqlalchemy-2c0ba57733b2)
- en: Learn to interact with databases in a safe way in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习在 Python 中以安全的方式与数据库交互
- en: '[](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)
    ·5 min read·Apr 12, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)
    ·5 分钟阅读·2023年4月12日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a20548112fa3a883fe1500f087c263f2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a20548112fa3a883fe1500f087c263f2.png)'
- en: Image by mohamed_hassan (Hosting Web Man) on Pixabay
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 Pixabay 的 mohamed_hassan（Hosting Web Man）
- en: SQL Injection is one of the most common and also most dangerous web security
    vulnerabilities which allows hackers to inject malicious SQL code into unvalidated
    and unsanitized plain SQL queries. It is also a common issue that new developers
    overlook.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入是最常见且最危险的网络安全漏洞之一，它允许黑客将恶意 SQL 代码注入到未经验证和清理的纯 SQL 查询中。这也是新开发人员常常忽视的一个问题。
- en: The cause and solution for SQL Injection are actually pretty simple. In this
    post, we will explore SQL Injection with some simple queries and will pretend
    to be an attacker to exploit our database. At the end of this post, you will fully
    understand SQL Injection and will never make the mistake again after realizing
    its power and danger.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入的原因和解决方案其实非常简单。在这篇文章中，我们将通过一些简单的查询来探索 SQL 注入，并假装成为攻击者来利用我们的数据库。在文章的最后，你将完全理解
    SQL 注入，并在意识到其威力和危险后不会再犯这个错误。
- en: Preparation
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: 'As usual, we will create a MySQL database using Docker:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们将使用 Docker 创建一个 MySQL 数据库：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the root user is used for simplicity in this post, but it should never
    be used directly in our web applications in practice.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本文中为了简化起见使用了 root 用户，但在实际应用中绝不应直接在我们的 Web 应用程序中使用。
- en: Then let’s create some database and table to play with. The data set is the
    same as the one used in the previous series of posts for simplicity.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们创建一些数据库和表来进行测试。为了简单起见，数据集与之前系列文章中使用的相同。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since we will use SQLAlchemy in this post for database connection, we need to
    install the necessary libraries. As usual, it’s recommended to create a separate
    virtual environment so that the libraries won’t impact the system also other virtual
    environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这篇文章中将使用 SQLAlchemy 进行数据库连接，我们需要安装必要的库。和往常一样，建议创建一个单独的虚拟环境，以便库不会影响系统及其他虚拟环境。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Explore SQL Injection
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 SQL 注入
- en: 'Let’s now create a simple function to read some data:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个简单的函数来读取一些数据：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `read_student_scores()` function looks seemingly normal from a simple coding
    point of view. However, there is a huge security issue that can be exploited by
    malicious users.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_student_scores()` 函数从简单的编码角度来看似乎很正常。然而，它存在一个巨大的安全问题，可能被恶意用户利用。'
- en: 'If we use it normally, it will just work normally:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正常使用，它将正常工作：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However, it can also return something that is not supposed to be returned by
    evil users. The first thing to hack is to return all the records, even those that
    a user is not supposed to see:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它也可能返回一些不应该由恶意用户返回的内容。黑客的第一个攻击点是返回所有记录，即使是用户不应该看到的记录：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is possible because the `read_student_scores()` function doesn’t clean
    and validate the input parameter and simply concatenates the input data with the
    original query.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的，因为 `read_student_scores()` 函数没有清理和验证输入参数，而是将输入数据与原始查询简单地拼接在一起。
- en: This is not uncommon for many developers. Actually, I have seen quite some legacy
    code written in this way. It is lucky that they have not been hacked before. Or
    maybe they have …
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于许多开发者来说并不罕见。实际上，我见过不少以这种方式编写的遗留代码。很幸运的是，它们之前没有被黑客攻击。或者说，也许已经被黑过了……
- en: SQL Injection can be more harmful than shown above and can actually return anything
    for hackers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入可能比上面所示的更具危害性，实际上黑客可以返回任何信息。
- en: Now, let’s pretend we are malicious users and try to get some information that
    is not supposed to be returned by this function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假装自己是恶意用户，尝试获取一些不应该由此函数返回的信息。
- en: The first thing a hacker wants to know is how many columns are returned. It
    is obvious in this example that two columns are returned. However, when the output
    is displayed with some user interface, it may not be that obvious.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客首先想知道的是返回了多少列。在这个示例中，很明显返回了两列。然而，当输出通过某些用户界面显示时，这可能不是那么明显。
- en: 'There are many ways to guess how many columns are returned, two common ones
    are to use `ORDER BY` and `UNION`. Let’s see how it works:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以猜测返回了多少列，两种常见的方法是使用 `ORDER BY` 和 `UNION`。让我们看看它是如何工作的：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From the above queries, the results, and the errors, we know that two columns
    are returned.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述查询、结果和错误中，我们知道返回了两列。
- en: 'We can arrive at the same conclusion using `UNION`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`UNION`得出相同的结论：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using `UNION` we are able to guess the correct number of columns with a smaller
    number of tests. Actually, `UNION` is the most commonly used hacking tool to exploit
    a database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `UNION` 我们能够通过较少的测试猜测正确的列数。实际上，`UNION` 是最常用的黑客工具之一，用于攻击数据库。
- en: 'Let’s try to read something that’s not supposed to be returned normally:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试读取一些正常情况下不应该返回的内容：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The database name and version are returned!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库名称和版本被返回了！
- en: 'Let’s see something even scarier:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看更可怕的情况：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The username and authentication strings of all DB users are returned! Using
    some brute guessing tools, the hacker can hack the passwords in a short time,
    especially if simple passwords are used.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据库用户的用户名和认证字符串都被返回了！使用一些暴力猜测工具，黑客可以在短时间内破解密码，特别是当使用简单密码时。
- en: How to avoid SQL Injection?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何避免 SQL 注入？
- en: Now that we have understood what SQL Injection is and how dangerous it can be,
    let’s see how it can be avoided in practice.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 SQL 注入是什么以及它有多么危险，让我们看看如何在实践中避免它。
- en: 'The most efficient way to prevent SQL Injection is to use parametrized queries,
    which is achieved with the `:param_name` syntax in SQLAlchemy:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 防止 SQL 注入的最有效方法是使用参数化查询，这可以通过 SQLAlchemy 中的 `:param_name` 语法实现：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that SQLAlchemy 2.0 is used in this post and thus the syntax for specifying
    parameters will be different from that in SQLAlchemy 1.x (normally 1.4).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本帖使用了 SQLAlchemy 2.0，因此指定参数的语法与 SQLAlchemy 1.x（通常是 1.4）中的语法会有所不同。
- en: 'Let’s see what the evil queries will return with parametrized queries:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用参数化查询时恶意查询会返回什么：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All these evil queries return an empty result, which is much safer than before.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些恶意查询返回了空结果，比之前安全得多。
- en: In this post, we have introduced what SQL Injection is, how it works, and how
    to avoid it using simple examples.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了什么是 SQL 注入，它是如何工作的，以及如何使用简单的示例来避免它。
- en: 'Even though using parameterized queries can prevent most instances of SQL injections,
    to make our applications even more robust, we should apply the following strategies
    as well:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用参数化查询可以防止大多数 SQL 注入实例，但为了使我们的应用程序更加健壮，我们还应该应用以下策略：
- en: Limit the permissions for the DB user to query the database. A root user is
    used in this example for simplicity, but it should never be used in practice.
    Actually, we should create a dedicated DB user (with a strong password) for our
    web application and only grant minimum permissions for it.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制数据库用户查询数据库的权限。为了简单起见，本示例使用了 root 用户，但在实际应用中绝不应该使用 root 用户。实际上，我们应该为我们的 Web
    应用创建一个专用的数据库用户（并使用强密码），并仅授予最低权限。
- en: Clean and validate the input queries. If the type of the input data is not consistent
    or if it contains suspicious characters like hash (`#`), semicolon (`;`), minus
    (`-`), or even the word `UNION`, the case should be handled in a safe, robust,
    but also user-friendly way.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理并验证输入查询。如果输入数据的类型不一致，或者包含可疑字符如井号（`#`）、分号（`；`）、减号（`-`），甚至是词语`UNION`，应以安全、稳健且用户友好的方式处理这种情况。
- en: Never show debugging logs directly to end users. Debugging logs should only
    be used for internal users because they can contain sensitive information that
    can be used by malicious users to exploit the system.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要将调试日志直接展示给最终用户。调试日志仅应供内部用户使用，因为它们可能包含敏感信息，恶意用户可能利用这些信息来利用系统。
- en: 'Related articles:'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关文章：
- en: '[How to Execute Plain SQL Queries With SQLAlchemy in Python](https://betterprogramming.pub/how-to-execute-plain-sql-queries-with-sqlalchemy-627a3741fdb1)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在 Python 中使用 SQLAlchemy 执行纯 SQL 查询](https://betterprogramming.pub/how-to-execute-plain-sql-queries-with-sqlalchemy-627a3741fdb1)'
- en: '[How to Work with SQLAlchemy Query, Table, and ORM Classes in Pandas](https://medium.com/gitconnected/how-to-work-with-sqlalchemy-query-table-and-orm-classes-in-pandas-477599174b6)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在 Pandas 中使用 SQLAlchemy 查询、表和 ORM 类](https://medium.com/gitconnected/how-to-work-with-sqlalchemy-query-table-and-orm-classes-in-pandas-477599174b6)'
