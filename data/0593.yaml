- en: More on Road Network Matching
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于道路网络匹配的更多内容
- en: 原文：[https://towardsdatascience.com/more-on-road-network-matching-c2ea0728c415?source=collection_archive---------16-----------------------#2023-02-10](https://towardsdatascience.com/more-on-road-network-matching-c2ea0728c415?source=collection_archive---------16-----------------------#2023-02-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/more-on-road-network-matching-c2ea0728c415?source=collection_archive---------16-----------------------#2023-02-10](https://towardsdatascience.com/more-on-road-network-matching-c2ea0728c415?source=collection_archive---------16-----------------------#2023-02-10)
- en: Road network matching shenanigans
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 道路网络匹配的恶作剧
- en: '[](https://medium.com/@joao.figueira?source=post_page-----c2ea0728c415--------------------------------)[![João
    Paulo Figueira](../Images/54e4176f66e4ab0324d86ec71d8b033d.png)](https://medium.com/@joao.figueira?source=post_page-----c2ea0728c415--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c2ea0728c415--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c2ea0728c415--------------------------------)
    [João Paulo Figueira](https://medium.com/@joao.figueira?source=post_page-----c2ea0728c415--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@joao.figueira?source=post_page-----c2ea0728c415--------------------------------)[![João
    Paulo Figueira](../Images/54e4176f66e4ab0324d86ec71d8b033d.png)](https://medium.com/@joao.figueira?source=post_page-----c2ea0728c415--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c2ea0728c415--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c2ea0728c415--------------------------------)
    [João Paulo Figueira](https://medium.com/@joao.figueira?source=post_page-----c2ea0728c415--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64bc009cedeb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmore-on-road-network-matching-c2ea0728c415&user=Jo%C3%A3o+Paulo+Figueira&userId=64bc009cedeb&source=post_page-64bc009cedeb----c2ea0728c415---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c2ea0728c415--------------------------------)
    ·9 min read·Feb 10, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc2ea0728c415&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmore-on-road-network-matching-c2ea0728c415&user=Jo%C3%A3o+Paulo+Figueira&userId=64bc009cedeb&source=-----c2ea0728c415---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64bc009cedeb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmore-on-road-network-matching-c2ea0728c415&user=Jo%C3%A3o+Paulo+Figueira&userId=64bc009cedeb&source=post_page-64bc009cedeb----c2ea0728c415---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c2ea0728c415--------------------------------)
    ·9 分钟阅读·2023年2月10日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fc2ea0728c415&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmore-on-road-network-matching-c2ea0728c415&user=Jo%C3%A3o+Paulo+Figueira&userId=64bc009cedeb&source=-----c2ea0728c415---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc2ea0728c415&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmore-on-road-network-matching-c2ea0728c415&source=-----c2ea0728c415---------------------bookmark_footer-----------)![](../Images/c573f363fdc89bade23f26c4bc50e04e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fc2ea0728c415&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmore-on-road-network-matching-c2ea0728c415&source=-----c2ea0728c415---------------------bookmark_footer-----------)![](../Images/c573f363fdc89bade23f26c4bc50e04e.png)'
- en: Photo by [Denys Nevozhai](https://unsplash.com/de/@dnevozhai?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Denys Nevozhai](https://unsplash.com/de/@dnevozhai?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The purpose of this article is to complement and correct the [previous one on
    the same subject](/road-network-edge-matching-with-triangles-5dc989a77edf). In
    that article, I presented an approach to reconstructing missing map-matched data
    from the [Extended Vehicle Energy Dataset](https://arxiv.org/abs/2203.08630)¹
    (EVED) [1]. My technique explored the mathematical properties of triangles to
    find the lost data on a road network database quickly. Unfortunately, a subtle
    error in the code made it fail under some circumstances.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目的是对[之前关于同一主题的文章](/road-network-edge-matching-with-triangles-5dc989a77edf)进行补充和修正。在那篇文章中，我介绍了一种从[扩展车辆能量数据集](https://arxiv.org/abs/2203.08630)¹（EVED）重建丢失地图匹配数据的方法。我的技术探索了三角形的数学特性，以便快速找到道路网络数据库中的丢失数据。不幸的是，代码中的一个细微错误使得在某些情况下失败。
- en: Here, I present a correction to the code and discuss the results of applying
    these techniques to reconstruct more than thirty-two thousand trajectories on
    the EVED.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我展示了对代码的修正，并讨论了应用这些技术重建三万两千多个轨迹的结果。
- en: '[](/road-network-edge-matching-with-triangles-5dc989a77edf?source=post_page-----c2ea0728c415--------------------------------)
    [## Road Network Edge Matching With Triangles'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用三角形进行道路网络边缘匹配](https://towardsdatascience.com/road-network-edge-matching-with-triangles-5dc989a77edf?source=post_page-----c2ea0728c415--------------------------------)'
- en: Triangles have mighty properties for geospatial queries
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三角形在地理空间查询中具有强大的属性
- en: towardsdatascience.com](/road-network-edge-matching-with-triangles-5dc989a77edf?source=post_page-----c2ea0728c415--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](https://towardsdatascience.com/road-network-edge-matching-with-triangles-5dc989a77edf?source=post_page-----c2ea0728c415--------------------------------)'
- en: The Subtleties of Networks
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络的细微差别
- en: 'In the previous article, I illustrated two methods to fit map-matched locations
    to road network segments using triangular properties. The geometrical concepts
    that support the idea are adequate, but the code needs to be corrected. The issue
    occurs on the node filtering part and affects both matching methods, the ratio-based
    and the distance-based. Let''s look at the original code again using the ratio-based
    function:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我展示了两种方法来将地图匹配的位置拟合到道路网络段上，使用了三角形的性质。支持该思想的几何概念是适当的，但代码需要修正。问题出现在节点过滤部分，影响了两种匹配方法，即基于比例和基于距离的方法。让我们再次查看使用基于比例的函数的原始代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The function uses a set to store all the processed adjacent nodes to avoid repetitions.
    And it does avoid repetitions, unfortunately. This is where the error lies because
    by excluding a node, the function is also preventing all other adjacent edges
    from being tested. This situation is especially prevalent for nodes with multiple
    links. Correcting the code requires a conceptual change, removing processed road
    network *edges* instead of processed *nodes*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用一个集合来存储所有处理过的相邻节点，以避免重复。遗憾的是，它确实避免了重复。这就是错误所在，因为通过排除一个节点，函数也阻止了所有其他相邻边缘的测试。这种情况在具有多个链接的节点中特别普遍。修正代码需要一个概念上的变化，即移除处理过的道路网络*边缘*而不是处理过的*节点*。
- en: But another issue surfaced after using the code with a few different trajectories,
    a black swan. What happens when the input GPS location is close to one of the
    nodes? In some rare situations, the sampled GPS locations match one of the road
    network nodes very closely, which induces very subtle floating point instabilities.
    The result is the selection of a nonsensical edge, ruining the path reconstruction.
    To solve this issue, I added a default parameter with the minimum distance from
    the input GPS location to the closest node. When this distance is below one meter
    (three feet), the function refuses to select an edge and returns an empty value.
    This solution is moderate as this will happen relatively infrequently, and the
    ensuing reconstruction mechanism compensates for that.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在使用代码处理几个不同轨迹后出现了另一个问题，即“黑天鹅”事件。当输入的 GPS 位置接近某个节点时会发生什么？在一些罕见情况下，采样的 GPS 位置与某个道路网络节点非常接近，这会引起微妙的浮点不稳定性。结果是选择了一个不合理的边缘，破坏了路径重建。为了解决这个问题，我添加了一个默认参数，设置从输入的
    GPS 位置到最近节点的最小距离。当这个距离小于一米（三英尺）时，函数拒绝选择边缘并返回一个空值。这种解决方案比较温和，因为这种情况相对不常发生，而且随后的重建机制可以补偿这一点。
- en: You can see the corrected code below, featuring the set of tested road network
    edges and the minimum distance check.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到下面的修正代码，其中包含了测试过的道路网络边缘集和最小距离检查。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that I also changed the rate formula so that it ranges between zero and
    one, with larger values corresponding to a better fit. Interestingly, the rate-based
    function works better and faster than the distance-based one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我还更改了速率公式，使其范围在零到一之间，较大的值对应于更好的拟合。有趣的是，基于速率的函数比基于距离的函数更有效且更快速。
- en: Reconstructing Trips
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重建旅行
- en: The first part of the path reconstruction implies applying the function above
    to every point of the input trajectory and keeping only the unique road network
    edges. The code below shows a Python function that does that.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 路径重建的第一部分意味着将上述函数应用于输入轨迹的每一点，只保留独特的道路网络边缘。下面的代码展示了一个实现这一点的 Python 函数。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The function assigns a road network edge to each unique trajectory location.
    **Figure 1** below shows a sample of such matching.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数为每个独特的轨迹位置分配一个道路网络边缘。**图 1** 显示了一个匹配样本。
- en: '![](../Images/d764592ef9b23ed84cd8f059317b0a86.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d764592ef9b23ed84cd8f059317b0a86.png)'
- en: '**Figure 1** — The map above shows the input trajectory locations in red and
    the matched road network edges in blue. (Image source: Author using Folium and
    OpenStreetMap imagery)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1** — 上面的地图显示了红色的输入轨迹位置和蓝色的匹配道路网络边。（图片来源：作者使用 Folium 和 OpenStreetMap 图像）'
- en: As you can see, there are some gaps between the matched links due to the GPS
    sampling frequency. Reconstructing the path requires us to fill in these gaps,
    and we do so by finding the shortest way between the road network edges. The code
    below does that by keeping together the connected links and filling in the gaps
    for all the others using OSMnx's services [2].
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，由于 GPS 采样频率，匹配的链接之间存在一些间隙。重建路径要求我们填补这些间隙，我们通过在道路网络边之间找到最短路径来实现。下面的代码通过保持连接的链接在一起，并使用
    OSMnx 的服务填补其他所有间隙来完成这一任务 [2]。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After calling this function on the previous matches, we should have the trajectory
    fully reconstructed as a sequence of road network edges. We see a continuous result
    by superimposing the trajectory locations to the patched road network edges, as
    depicted in **Figure 2** below.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在对先前的匹配调用此函数后，我们应该将轨迹完全重建为一系列道路网络边。通过将轨迹位置叠加到修补后的道路网络边上，我们可以看到一个连续的结果，如下方的**图
    2**所示。
- en: '![](../Images/56b1a9dfacfdf059db7364b05c4ec5ea.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56b1a9dfacfdf059db7364b05c4ec5ea.png)'
- en: '**Figure 2** — The map above shows the reconstructed link sequence with the
    original trajectory locations superimposed. (Image source: Author using Folium
    and OpenStreetMap imagery)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2** — 上面的地图显示了重建的链接序列与原始轨迹位置叠加在一起。（图片来源：作者使用 Folium 和 OpenStreetMap 图像）'
- en: The Case for a Minimum Distance
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小距离的案例
- en: While reviewing this solution, I found an issue when iterating through the individual
    trajectories. **Figure 3** below details the problem.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查这个解决方案时，我发现了一个在迭代各个轨迹时的问题。下方的**图 3**详细描述了这个问题。
- en: '![](../Images/e03eb82f3222d1dc3d7142ff6ad95ca3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e03eb82f3222d1dc3d7142ff6ad95ca3.png)'
- en: '**Figure 3** — The image above shows a corner case where this road network
    edge matching system breaks down. One of the trajectory''s locations falls right
    over one of the nodes, fooling the matching process. (Image source: Author using
    Folium and OpenStreetMap imagery)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3** — 上面的图像显示了一个角落案例，在这个道路网络边匹配系统崩溃时发生。轨迹的一个位置正好落在某个节点上，从而欺骗了匹配过程。（图片来源：作者使用
    Folium 和 OpenStreetMap 图像）'
- en: A spurious cycle in the route arises from an unexpected value in the input data
    for the patching process. We can dig deeper into what is happening by reverting
    to the view showing which road network edges the algorithm matches to these GPS
    locations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 路由中的虚假循环源于修补过程中的输入数据中的意外值。我们可以通过返回显示算法如何将这些 GPS 位置匹配到道路网络边的视图来深入了解发生了什么。
- en: '**Figure 4** below illustrates the situation at the fork, where the matched
    GPS location coincides (or is extremely close) to one of the road network nodes.
    This will likely cause some numeric instability yielding a wrong result. A robust
    algorithm should avoid these situations, but how?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下方的**图 4**说明了在叉路口的情况，其中匹配的 GPS 位置与道路网络节点重合（或非常接近）。这可能会导致一些数值不稳定性，产生错误结果。一个稳健的算法应该避免这些情况，但如何做到呢？
- en: '![](../Images/d8e93483a483ccf1bd37d0294400eefb.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8e93483a483ccf1bd37d0294400eefb.png)'
- en: '**Figure 4** — The matching problem becomes evident once we see the location
    assignments. Clearly, in the above case, the very close proximity of the GPS location
    to one of the road network nodes induced instability in the edge selection process.
    (Image source: Author using Folium and OpenStreetMap imagery)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4** — 一旦看到位置分配，匹配问题变得明显。显然，在上述情况下，GPS 位置非常接近某个道路网络节点，这导致了边选择过程中的不稳定性。（图片来源：作者使用
    Folium 和 OpenStreetMap 图像）'
- en: After considering it, I decided to change both matching algorithms and use the
    distance to the closest road network node as a criterion to include or exclude
    the input location. If this distance is smaller than a given threshold (one meter
    or three feet as default), the match function returns an empty value signaling
    the calling code that it cannot safely assign a link. This is fine for the following
    step as it should infer the missing links because that algorithm depends only
    on road network edges and not the input locations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑后，我决定更改两个匹配算法，并使用与最近的道路网络节点的距离作为包含或排除输入位置的标准。如果这个距离小于给定的阈值（默认为一米或三英尺），匹配函数返回一个空值，通知调用代码无法安全地分配一个链接。这对接下来的步骤是可以的，因为它应该推断缺失的链接，因为该算法仅依赖于道路网络边，而不是输入位置。
- en: Now that we have sanitized the whole algorithm, let us see how it performs on
    the entire dataset.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对整个算法进行了清理，让我们看看它在整个数据集上的表现。
- en: Performance Assessment
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能评估
- en: To assess how the algorithm behaves on the whole EVED, I created a new standalone
    [script](https://github.com/joaofig/eved-explore/blob/main/calculate-matches.py)
    that iterates through all trajectories, matches the edges, generates a path, and
    compares the original trajectory's length to the reconstructed path. The Python
    script records all the differences so we can later analyze them using a standard
    statistical toolset.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估算法在整个EVED上的表现，我创建了一个新的独立[脚本](https://github.com/joaofig/eved-explore/blob/main/calculate-matches.py)，它遍历所有轨迹，匹配边缘，生成路径，并比较原始轨迹长度与重建路径的长度。Python脚本记录了所有的差异，以便我们可以使用标准统计工具集进行后续分析。
- en: The script core lies in its main loop, detailed in the code below.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的核心在于其主循环，详见下面的代码。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The function starts by downloading and preprocessing the road network data from
    OpenStreetMap. Because this is a long-running script, I added a persistent state
    serialized as a JSON-formatted text file and saved every 100 trajectories. This
    feature allows the user to interrupt the Python script without losing all the
    data from already-processed trajectories. The function that calculates the length
    difference between the original input trajectory and the reconstructed path is
    displayed below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数首先从OpenStreetMap下载并预处理道路网络数据。由于这是一个长时间运行的脚本，我添加了一个持久化状态，序列化为JSON格式的文本文件，并保存了每100条轨迹。这一功能允许用户中断Python脚本而不会丢失已处理轨迹的所有数据。计算原始输入轨迹与重建路径之间长度差异的函数如下所示。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The code converts both inputs into sequences of geolocations, computes their
    cumulative lengths, and finally computes their difference. When the script finishes,
    we can load the state data and analyze it using Pandas.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码将两个输入转换为地理位置序列，计算它们的累积长度，并最终计算它们的差异。当脚本完成时，我们可以加载状态数据并使用Pandas进行分析。
- en: We see how the difference between both distances distributes in **Figure 5**
    below (named "*error*").
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下面的**图5**中看到两个距离之间的差异分布（标记为"*error*"）。
- en: '![](../Images/930d63837c65b13b0933007d02a7c6c3.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/930d63837c65b13b0933007d02a7c6c3.png)'
- en: '**Figure 5** — The histogram above shows the distribution of the distance differences
    between the original input trajectories and the reconstructed paths. The horizontal
    axis displays distances in meters. (Image source: Author)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5** — 上面的直方图展示了原始输入轨迹与重建路径之间的距离差异的分布。横轴显示距离（以米为单位）。（图像来源：作者）'
- en: To see more detail around zero, I clipped the histogram and created the one
    in **Figure 6** below.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更详细地查看零附近的情况，我裁剪了直方图，并创建了**图6**。
- en: '![](../Images/0283303813be15f3d81659363e2037da.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0283303813be15f3d81659363e2037da.png)'
- en: '**Figure 6** — The histogram above details the difference distribution, highlighting
    the negative and majority positive differences. Most differences are minor, hinting
    at a good performance of the matching algorithm. (Image source: Author)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6** — 上面的直方图详细说明了差异分布，突出了负差异和大多数正差异。大多数差异很小，暗示匹配算法表现良好。（图像来源：作者）'
- en: As you can see, there are some differences in the negative part of the spectrum.
    Still, it is primarily positive, meaning that the reconstructed path lengths are
    usually longer than trajectories, which is expectable. Remember that trajectory
    points seldom match road network nodes, meaning that the most common scenario
    should be a match midway through a segment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，光谱的负部分存在一些差异。不过，它主要是正的，这意味着重建路径的长度通常比轨迹更长，这是可以预期的。请记住，轨迹点很少与道路网络节点匹配，这意味着最常见的情况应该是在一个段的中间匹配。
- en: We can also inspect where the mid-fifty percent of differences is by drawing
    a box-and-whiskers plot, as depicted below in **Figure 7**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过绘制箱线图来检查差异的中间五十个百分点，如下图**图7**所示。
- en: '![](../Images/c4bb17c27c5477ac28a5f10c27367ab2.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4bb17c27c5477ac28a5f10c27367ab2.png)'
- en: '**Figure 7** — The box-and-whiskers plot above shows where the middle 50% of
    the distribution lies. The 25%, 50%, and 75% percentiles are 13.0, 50.2, and 156.5
    meters, respectively. We can also see that the inliers band is relatively narrow,
    ranging from -202.3 to 371.8 meters. (Image source: Author)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7** — 上面的箱线图展示了分布中间50%的位置。25%、50%和75%的百分位数分别为13.0、50.2和156.5米。我们还可以看到，内点带相对较窄，范围从-202.3到371.8米。（图像来源：作者）'
- en: The image above contains essential information on the distribution of differences
    and the number of outliers. Using [Tukey's fences](https://en.wikipedia.org/wiki/Outlier#Tukey's_fences)
    method, we can classify as outliers 5,332² trajectories out of 32,528\. This proportion
    represents a relatively high percentage value of 16.4%, meaning there are probably
    better reconstruction methods than this or that there is a sizable amount of poorly
    processed trajectories. We can look into some of the most dramatic distance difference
    outliers to try and understand these results.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上图包含了有关差异分布和异常值数量的关键信息。使用[Tukey’s fences](https://en.wikipedia.org/wiki/Outlier#Tukey's_fences)方法，我们可以将32,528条轨迹中的5,332²条标记为异常值。这一比例代表了相对较高的16.4%值，这意味着可能有更好的重建方法，或者存在大量处理不当的轨迹。我们可以查看一些最剧烈的距离差异异常值，试图理解这些结果。
- en: Outlier Analysis
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常值分析
- en: As previously noted, there are over five-thousand trajectories with poor matching.
    We can quickly inspect a few to determine why the difference between the sampled
    trajectory and the reconstruction is so significant. We start with a revealing
    case, trajectory number 59, depicted below in **Figure 8**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有超过五千条轨迹匹配效果较差。我们可以快速检查其中的一些，来确定采样轨迹与重建之间的差异为何如此显著。我们从一个揭示性的案例开始，即**图 8**中的轨迹编号
    59。
- en: '![](../Images/bf48d4ed1c398976fcdff8eb5f292408.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf48d4ed1c398976fcdff8eb5f292408.png)'
- en: '**Figure 8** — The trajectory displayed above illustrates a map-matching error
    that led the reconstruction process to build a longer than necessary path. (Image
    source: Author using Folium and OpenStreetMap imagery)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8** — 上图所示的轨迹展示了一个地图匹配错误，导致重建过程生成了一条比必要的路径更长的路径。（图片来源：作者使用 Folium 和 OpenStreetMap
    图像）'
- en: The case above shows that the map-matching process incorrectly placed three
    GPS samples on a parallel road, forcing the reconstruction process to find a spurious
    detour. This type of error might result from the inadequate parameterization of
    the map-matching process, something to research in a later article.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述案例表明，地图匹配过程错误地将三个 GPS 样本放置在了一条平行的道路上，迫使重建过程找到一个虚假的绕行路径。这种错误可能由于地图匹配过程的参数设置不当造成，需在后续文章中进一步研究。
- en: Finally, we can see a very radical case in **Figure 9** below. The sampled GPS
    locations are so far away from the road that the map-matching process gave up.
    As you can see, the reconstruction process assigns road network links that bear
    no relation to the intended trajectory.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到下方的**图 9**中的一个非常极端的案例。采样的 GPS 位置距离道路如此之远，以至于地图匹配过程放弃了。正如你所见，重建过程分配了与预期轨迹无关的道路网络链接。
- en: '![](../Images/d4a3f7d4817474b1d51dec756747a11f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4a3f7d4817474b1d51dec756747a11f.png)'
- en: '**Figure 9** — The trajectory pictured above contains numerous errors, and
    the initial map-matching procedure could not eliminate them. (Image source: Author
    using Folium and OpenStreetMap imagery)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9** — 上图中的轨迹包含许多错误，初始的地图匹配过程无法消除这些错误。（图片来源：作者使用 Folium 和 OpenStreetMap
    图像）'
- en: Conclusion
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I corrected previously published code on road network edge
    matching and assessed its performance using the EVED dataset. I collected the
    performance assessment data using a specialized Python script that revealed a
    relatively high number of matched trajectories with seemingly abnormal deviations
    in the measured distances. To understand why this result could be better, I will
    turn next to the original map-matching software, [Valhalla](https://github.com/valhalla/valhalla),
    to try and fix the issues above.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我修正了先前发布的道路网络边缘匹配代码，并使用 EVED 数据集评估了其性能。我使用专门的 Python 脚本收集了性能评估数据，揭示了匹配轨迹中测量距离似乎异常偏差较高的情况。为了了解为何结果可以更好，我将接下来转向原始的地图匹配软件，[Valhalla](https://github.com/valhalla/valhalla)，以尝试修复上述问题。
- en: Notes
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: The original paper authors licensed the dataset under the Apache 2.0 License
    (see the [VED](https://github.com/gsoh/VED) and [EVED](https://github.com/zhangsl2013/eVED)
    GitHub repositories). Note that this also applies to derivative work.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原论文作者将数据集以 Apache 2.0 许可证授权（请参阅[VED](https://github.com/gsoh/VED)和[EVED](https://github.com/zhangsl2013/eVED)
    GitHub 仓库）。请注意，这也适用于衍生作品。
- en: The source of all images and calculations is in a [Jupyter notebook](https://github.com/joaofig/eved-explore/blob/main/08-road-network-analysis.ipynb),
    available from the public [GitHub repository](https://github.com/joaofig/eved-explore).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有图像和计算的来源均在一个 [Jupyter notebook](https://github.com/joaofig/eved-explore/blob/main/08-road-network-analysis.ipynb)
    中，来自公共 [GitHub 仓库](https://github.com/joaofig/eved-explore)。
- en: References
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Zhang, S., Fatih, D., Abdulqadir, F., Schwarz, T., & Ma, X. (2022). Extended
    vehicle energy dataset (eVED): An enhanced large-scale dataset for deep learning
    on vehicle trip energy consumption. *ArXiv*. [https://doi.org/10.48550/arXiv.2203.08630](https://doi.org/10.48550/arXiv.2203.08630)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Zhang, S., Fatih, D., Abdulqadir, F., Schwarz, T., & Ma, X. (2022). 扩展车辆能源数据集（eVED）：用于深度学习的车辆旅行能耗的大规模增强数据集。*ArXiv*.
    [https://doi.org/10.48550/arXiv.2203.08630](https://doi.org/10.48550/arXiv.2203.08630)'
- en: '[2] Boeing, G. 2017\. [OSMnx: New Methods for Acquiring, Constructing, Analyzing,
    and Visualizing Complex Street Networks](https://geoffboeing.com/publications/osmnx-complex-street-networks/).
    *Computers, Environment and Urban Systems* 65, 126–139\. doi:10.1016/j.compenvurbsys.2017.05.004'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Boeing, G. 2017\. [OSMnx：获取、构建、分析和可视化复杂街道网络的新方法](https://geoffboeing.com/publications/osmnx-complex-street-networks/)。*Computers,
    Environment and Urban Systems* 65, 126–139\. doi:10.1016/j.compenvurbsys.2017.05.004'
- en: João Paulo Figueira works as a Data Scientist at [tb.lx by Daimler Trucks and
    Buses](https://tblx.io/) in Lisbon, Portugal.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: João Paulo Figueira 在葡萄牙里斯本的 [tb.lx by Daimler Trucks and Buses](https://tblx.io/)
    担任数据科学家。
