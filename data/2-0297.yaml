- en: An Introduction to OpenAI Function Calling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenAI函数调用简介
- en: 原文：[https://towardsdatascience.com/an-introduction-to-openai-function-calling-e47e7cd7680e](https://towardsdatascience.com/an-introduction-to-openai-function-calling-e47e7cd7680e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/an-introduction-to-openai-function-calling-e47e7cd7680e](https://towardsdatascience.com/an-introduction-to-openai-function-calling-e47e7cd7680e)
- en: No more unstructured data outputs; turn ChatGPT’s completions into structured
    JSON!
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再输出无结构的数据；将ChatGPT的完成内容转化为结构化的JSON！
- en: '[](https://dkhundley.medium.com/?source=post_page-----e47e7cd7680e--------------------------------)[![David
    Hundley](../Images/1779ef96ec3d338f8fe4a9567ba7b194.png)](https://dkhundley.medium.com/?source=post_page-----e47e7cd7680e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e47e7cd7680e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e47e7cd7680e--------------------------------)
    [David Hundley](https://dkhundley.medium.com/?source=post_page-----e47e7cd7680e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dkhundley.medium.com/?source=post_page-----e47e7cd7680e--------------------------------)[![David
    Hundley](../Images/1779ef96ec3d338f8fe4a9567ba7b194.png)](https://dkhundley.medium.com/?source=post_page-----e47e7cd7680e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e47e7cd7680e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e47e7cd7680e--------------------------------)
    [David Hundley](https://dkhundley.medium.com/?source=post_page-----e47e7cd7680e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e47e7cd7680e--------------------------------)
    ·16 min read·Jul 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e47e7cd7680e--------------------------------)
    ·阅读时间16分钟·2023年7月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/14ae6814c08319c738cd14cdd99e5771.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14ae6814c08319c738cd14cdd99e5771.png)'
- en: Title card created by the author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者制作的标题卡
- en: 'A few months ago, OpenAI released their API to the general public, which excited
    many developers who wanted to make use of ChatGPT’s outputs in a systematic way.
    As exciting has this has been, it’s equally been a bit of a nightmare since we
    programmers tend to work in the realm of **structured data types**. We like integers,
    booleans, and lists. The unstructured string can be unwieldy to deal with, and
    in order to get consistent results, a programmer is required to face their worst
    nightmare: developing a regular expression (Regex) for proper parsing. 🤢'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月前，OpenAI向公众发布了他们的API，这让许多希望以系统化方式利用ChatGPT输出的开发者感到兴奋。尽管这很激动人心，但也同样有些令人头痛，因为我们程序员通常工作在**结构化数据类型**的领域。我们喜欢整数、布尔值和列表。无结构的字符串处理起来可能很麻烦，为了获得一致的结果，程序员必须面对他们最可怕的噩梦：开发用于正确解析的正则表达式（Regex）。🤢
- en: 'Of course, prompt engineering can actually help quite a bit here, but it’s
    still not perfect. For example, if you want to have ChatGPT analyze the sentiment
    of a movie review for positivity or negativity, you might structure a prompt that
    looks like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，提示工程确实可以在这里提供很大帮助，但仍然不完美。例如，如果你想让ChatGPT分析电影评论的积极性或消极性，你可能会构造如下提示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This prompt honestly does pretty decently, but the results aren’t precisely
    consistent. For example, I have seen ChatGPT produce outputs that look like the
    following in terms of the movie sentiment example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提示实际上做得相当不错，但结果并不完全一致。例如，我看到ChatGPT在电影情感示例中产生的输出可能如下：
- en: '`Positive`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Positive`'
- en: '`positive`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`positive`'
- en: '`Positive.`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Positive.`'
- en: This might not seem like a big deal, but in the world of programming, those
    are NOT equal. Again, you can get around a simpler example like this with a bit
    of Regex, but beyond the fact that most people (including myself) are terrible
    at writing regular expressions, there are simply some instances where even Regex
    can’t parse the information correctly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能不是大问题，但在编程世界中，这些是不相等的。再说，你可以通过一些正则表达式来处理这样的简单示例，但超出这一点，大多数人（包括我自己）在编写正则表达式方面都很糟糕，有些情况下即使是正则表达式也无法正确解析信息。
- en: 'As you can tell, programmers have been hoping that OpenAI would add functionality
    to support structured JSON outputs, and OpenAI has delivered in the form of **function
    calling**. [Function calling](https://openai.com/blog/function-calling-and-other-api-updates)
    is exactly as it sounds: it allows ChatGPT to produce arguments that can interact
    with a custom function in a manner that uses structured data types. Yup, no more
    fancy prompt engineering and Regex to cross your fingers and hope you get the
    right outcome. In this post, we’ll cover how to make use of this new functionality,
    but first, let’s start with an example of how we used to attempt to produce structured
    data outputs with prompt engineering and Regex.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，程序员们一直希望 OpenAI 增加支持结构化 JSON 输出的功能，而 OpenAI 以 **函数调用** 的形式实现了这一点。[函数调用](https://openai.com/blog/function-calling-and-other-api-updates)
    的意思就是它允许 ChatGPT 生成可以与自定义函数交互的参数，以使用结构化数据类型。不再需要花哨的提示工程和正则表达式来祈祷你能得到正确的结果。在这篇文章中，我们将介绍如何利用这一新功能，但首先，让我们从一个例子开始，展示我们过去如何尝试通过提示工程和正则表达式生成结构化数据输出。
- en: Before we jump into the bulk of our post, please allow me to [share a link to
    this Jupyter notebook in my GitHub](https://github.com/dkhundley/openai-api-tutorial/blob/main/notebooks/function-calling.ipynb).
    This notebook contains all the code I will be running (and more) as part of this
    blog post. Additionally, I would encourage you to [check out OpenAI’s official
    function calling documentation](https://platform.openai.com/docs/guides/gpt/function-calling)
    for anything that I may not cover here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入文章的主要内容之前，请允许我 [分享这个 Jupyter notebook 在我的 GitHub 上的链接](https://github.com/dkhundley/openai-api-tutorial/blob/main/notebooks/function-calling.ipynb)。这个
    notebook 包含了我将在这篇博客文章中运行的所有代码（以及更多）。此外，我建议你 [查看 OpenAI 官方的函数调用文档](https://platform.openai.com/docs/guides/gpt/function-calling)，以获取我可能没有涵盖的内容。
- en: The Pre-Function Calling Days
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数调用前的时代
- en: 'To demonstrate what we used to do in the “pre-function calling days”, I wrote
    a small bit of text about myself, and we’ll be using the OpenAPI to extract bits
    of information from this text. Here is the “About Me” text we’ll be working with:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示我们在“函数调用前的时代”是如何做的，我写了一小段关于自己的文本，我们将使用 OpenAPI 从这段文本中提取信息。以下是我们将要使用的“关于我”的文本：
- en: Hello! My name is David Hundley. I am a principal machine learning engineer
    at State Farm. I enjoy learning about AI and teaching what I learn back to others.
    I have two daughters. I drive a Tesla Model 3, and my favorite video game series
    is The Legend of Zelda.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你好！我叫大卫·亨德利。我是 State Farm 的首席机器学习工程师。我喜欢学习 AI 并将所学的知识传授给他人。我有两个女儿。我开一辆特斯拉 Model
    3，我最喜欢的视频游戏系列是《塞尔达传说》。
- en: 'Let’s say I want to extract the following bits of information from that text:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想从这段文本中提取以下信息：
- en: Name
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 姓名
- en: Job title
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 职业头衔
- en: Company
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司
- en: Number of children *as an integer (This is important!)*
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子女数量 *以整数形式（这很重要！）*
- en: Car make
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车辆品牌
- en: Car model
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车辆型号
- en: Favorite video game series
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最喜欢的视频游戏系列
- en: 'Here’s how I would engineer a few-shot prompt in order to produce a structured
    JSON output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我如何设计一个少量示例提示以生成结构化 JSON 输出：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s check out how ChatGPT returned this completion to me:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 ChatGPT 是如何返回这个完成的：
- en: '![](../Images/3c5674a1a303f8dab4da738c821fea48.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c5674a1a303f8dab4da738c821fea48.png)'
- en: The “Pre-Function Calling” Days (Captured by the author)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “函数调用前”的时代（作者捕捉）
- en: 'As you can see, this actually isn’t bad. But it’s not ideal and could prove
    to be risky for the following reasons:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这其实还不错。但它不是理想的，并且由于以下原因可能会有风险：
- en: We are not guaranteed that OpenAI’s response will provide a clean JSON output.
    It could have produced something like “Here is your JSON:” followed by the JSON
    output, meaning that in order to use `json.loads()` to parse the string into a
    JSON object, we’d first have to strip out that little bit of text that opens the
    response.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能保证 OpenAI 的回应会提供干净的 JSON 输出。它可能会生成类似于“这是你的 JSON：”后跟 JSON 输出的内容，这意味着为了使用
    `json.loads()` 将字符串解析为 JSON 对象，我们必须先去掉响应开头的那一小段文本。
- en: We are not guaranteed that the keys in the key-value pairs of the JSON object
    will be consistent from API call to API call. Recall the example from above of
    the 3 instances of the word `Positive`. This is precisely the same risk you run
    trying to have ChatGPT parse out keys through few-shot prompt engineering. The
    only way you could maybe lock this down is with Regex, which comes with its own
    baggage as we already discussed.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能保证 JSON 对象中的键值对的键在 API 调用中是一致的。回忆一下上面提到的3个 `Positive` 实例。这正是你在尝试通过少量提示工程解析键时所面临的风险。你可能唯一能固定这个问题的方法是使用正则表达式，但正如我们之前讨论过的，这也有自己的麻烦。
- en: We are not guaranteed to receive our responses in the proper data type format.
    While our prompt engineering to extract number of children did parse into a proper
    integer, we’re at the mercy of crossing our fingers and hoping we get that consistent
    result for every API call.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能保证收到的响应是正确的数据类型格式。虽然我们提取孩子数量的提示工程解析成了一个合适的整数，但我们仍然只能祈祷每次 API 调用都能获得一致的结果。
- en: 'We could summarize these issues into a single statement: **Without function
    calling, we are not guaranteed to get consistent results that are important for
    the precision required for systematic implementation.** It’s a nontrivial issue
    that can be very challenging to remedy through prompt engineering and regular
    expressions.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些问题总结为一句话：**没有功能调用，我们不能保证获得对系统化实现所需精度的重要一致结果。** 这是一个非平凡的问题，通过提示工程和正则表达式解决起来可能非常具有挑战性。
- en: Enter Function Calling
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入功能调用
- en: Now that we’ve built an intuition around why getting structured outputs from
    ChatGPT was formerly problematic, let’s move into looking at the new function
    calling capability introduced by OpenAI.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对为什么从 ChatGPT 获得结构化输出曾经存在问题有了一定的直觉，让我们来看看 OpenAI 引入的新功能调用能力。
- en: Function calling is actually a bit of a misnomer. OpenAI is not actually running
    your code in a true function call. Rather, it’s simply setting up the structured
    arguments you’d need to execute your own custom functions, and I’d argue this
    is preferred behavior. While you might be thinking that it doesn’t make sense
    that the OpenAI API isn’t executing your custom function, consider that in order
    to do that, you’d have to pass that function code into ChatGPT. This function
    code probably contains proprietary information that you would NOT want to expose
    to anybody, hence why it’s good that you don’t actually have to pass this code
    to make use of OpenAI’s function calling.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 功能调用实际上有点误导。OpenAI 实际上并没有在真正的函数调用中运行你的代码。相反，它只是设置了你执行自定义函数所需的结构化参数，我认为这是更好的行为。虽然你可能会觉得
    OpenAI API 不执行你的自定义函数不合理，但考虑到要做到这一点，你必须将函数代码传递给 ChatGPT。这段函数代码可能包含你不想暴露给任何人的专有信息，因此不需要传递这些代码来利用
    OpenAI 的功能调用是件好事。
- en: 'Let’s jump into an example of how to enable function calling with a single
    custom function. Using our “About Me” sample text from the previous section, let’s
    create a custom function called `extract_person_info`. This function needs just
    three bits of information: person name, job title, and number of children. (We’ll
    revisit extracting the rest of the information in the next section; I just want
    to start simpler for now.) This custom function is intentionally very simple and
    will simply take our arguments and print them together in a single string. Here’s
    the code for this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个如何使用单个自定义函数启用功能调用的示例。使用我们前一节的“关于我”样本文本，创建一个名为`extract_person_info`的自定义函数。这个函数只需要三项信息：个人姓名、职位名称和孩子数量。（我们将在下一节重新访问提取其余信息的部分；我现在只是想从简单开始。）这个自定义函数故意设计得非常简单，它将接受我们的参数，并将它们合并为一个字符串。以下是代码：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In order to make use of function calling, we need to set up a JSON object in
    a specific way that notes the name of our custom function and what data elements
    we are hoping ChatGPT will extract from the body of the text. Because of the specificity
    on how this JSON object should look, I would encourage you reference OpenAI’s
    developer documentation if you want to know any details that I don’t cover here.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用功能调用，我们需要以特定的方式设置一个 JSON 对象，说明我们自定义函数的名称以及我们希望 ChatGPT 从文本正文中提取的数据元素。由于
    JSON 对象应有的具体格式，如果你想了解我未涉及的详细信息，建议参考 OpenAI 的开发者文档。
- en: '(Note: In the OpenAI documentation, I noticed one element in the JSON object
    called `required` that seemingly indicates that a parameter must be present for
    ChatGPT to properly recognize the function. I tried testing this out, and either
    this isn’t how this functionality works or I did something wrong. Either way,
    I transparently have no idea what this `required` parameter indicates. 😅)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: （注意：在OpenAI文档中，我注意到JSON对象中有一个名为`required`的元素，似乎表示参数必须存在，以便ChatGPT能够正确识别函数。我尝试过测试，但无论如何，这可能不是这种功能的工作方式，或者我做错了什么。无论如何，我确实不清楚这个`required`参数的意义。😅）
- en: 'Here is how we need to structure our JSON object to make use of our custom
    function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要如何构建我们的JSON对象以利用自定义函数：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You’re probably already familiar with JSON syntax, although let me draw attention
    for a moment to the data type associated to each property. If you are a Python
    developer like myself, be aware that the data typing for this JSON structure is
    NOT directly equivalent to how we define data structures in Python. Generally
    speaking, we can find equivalencies that work out alright, but if you want to
    know more about the specific data types associated with this JSON structure, [check
    out this documentation](https://json-schema.org/understanding-json-schema/reference/object.html).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经对JSON语法很熟悉了，不过让我稍微提一下与每个属性相关的数据类型。如果你像我一样是Python开发人员，请注意，这种JSON结构的数据类型与我们在Python中定义的数据结构并不完全相同。一般来说，我们可以找到一些工作得不错的等效类型，但如果你想了解更多关于这种JSON结构的具体数据类型，[请查看这个文档](https://json-schema.org/understanding-json-schema/reference/object.html)。
- en: 'Now we’re ready to make our API call to get the results! Using the Python client,
    you’ll notice the syntax is very similar to how we obtain completions in general.
    We’re just going to add some additional arguments into this call that represent
    our function calling:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备进行API调用以获取结果！使用Python客户端，你会注意到语法非常类似于我们通常获取完成的方式。我们只是要在此调用中添加一些额外的参数，代表我们的函数调用：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we simply pass in our list of custom functions (or in our case
    for now, our singular custom function) as the `functions` parameter, and you’ll
    also notice an additional parameter called `function_call` that we’ve set to `auto`.
    Don’t worry about this for now as we’ll revisit what this `auto` piece is doing
    in the next section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们只是将自定义函数列表（在我们的例子中是单个自定义函数）作为`functions`参数传递，并且你会注意到一个名为`function_call`的额外参数，我们将其设置为`auto`。目前不必担心这个`auto`，因为我们将在下一节回顾这个`auto`的作用。
- en: Let’s run this code and take a look at the full API response from ChatGPT
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这段代码，看看ChatGPT的完整API响应
- en: '![](../Images/28cfd91d92c922e97466bb09a518c43c.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28cfd91d92c922e97466bb09a518c43c.png)'
- en: Function calling with a single function (Captured by the author)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单个函数的函数调用（由作者捕捉）
- en: 'For the most part, this response looks the same as a non-function call response,
    but now there’s an additional field in the response called `function_call`, and
    nested under this dictionary are two additional items: `name` and `arguments`.
    `name` indicates the name of our custom function that we will be calling with
    ChatGPT’s output, and `arguments` contains a string that we can load using `json.loads()`
    to load our custom function arguments as a JSON object.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，这个响应看起来与非函数调用响应相同，但现在响应中多了一个额外的字段，叫做`function_call`，在这个字典下嵌套了两个额外的项目：`name`和`arguments`。`name`表示我们将用ChatGPT的输出调用的自定义函数的名称，而`arguments`包含一个字符串，我们可以使用`json.loads()`将其加载为JSON对象，从而加载我们的自定义函数参数。
- en: Notice now that we’re getting much more consistency than we were in our pre-function
    calling methodology. Now we can be guaranteed that the keys of the key-value pairs
    WILL be consistent, and the data types WILL be consistent. No need for fancy prompt
    engineering or regular expressions!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，现在我们获得的结果比之前函数调用方法的结果要一致得多。现在我们可以保证键值对的键和值的数据类型将是一致的。无需复杂的提示工程或正则表达式！
- en: That’s the core of OpenAI’s function calling! Of course, this was a very simplistic
    example to get you going, but you probably have additional questions. Let’s cover
    those in this next section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是OpenAI函数调用的核心！当然，这只是一个非常简单的示例来帮助你入门，但你可能还有其他问题。我们将在下一节讨论这些问题。
- en: But What About…?
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么…怎么办呢？
- en: The previous section covered a very simple example of how to enable function
    calling, but if you’re like me, you probably have some additional questions beyond
    this point. Naturally, I can’t cover all these questions, but I do want to cover
    two big ones that are slightly more advanced than what we covered in the previous
    section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上一部分介绍了如何启用函数调用的一个非常简单的示例，但如果你像我一样，可能会有一些额外的问题。自然，我不能涵盖所有这些问题，但我确实想要探讨两个比上一部分稍微复杂一些的问题。
- en: What if the prompt I submit doesn’t contain the information I want to extract
    per my custom function?
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我提交的提示中不包含我自定义函数所需的信息会怎样？
- en: In our original example, our custom function sought to extract three very specific
    bits of information, and we demonstrated that this worked successfully by passing
    in my custom “About Me” text as a prompt. But you might be wondering, what happens
    if you pass in any other prompt that doesn’t contain that information?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的原始示例中，我们的自定义函数旨在提取三个非常具体的信息点，我们通过传入我的自定义“关于我”文本作为提示来成功演示了这一点。但你可能会想，如果你传入任何其他不包含这些信息的提示会发生什么？
- en: Recall that we set a parameter in our API client call called `function_call`
    that we set to `auto`. We’ll explore this even deeper in the next subsection,
    but what this parameter is essentially doing is telling ChatGPT to use its best
    judgment in figuring out when to structure the output for one of our custom functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们在 API 客户端调用中设置了一个名为 `function_call` 的参数，我们将其设置为 `auto`。我们将在下一小节中更深入地探讨这个问题，但这个参数的本质作用是告诉
    ChatGPT 在何时使用自定义函数来构建输出。
- en: 'So what happens when we submit a prompt that doesn’t match any of our custom
    functions? Simply put, it defaults to typical behavior as if function calling
    doesn’t exist. Let’s test this out with an arbitrary prompt: “How tall is the
    Eiffel Tower?”'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当我们提交一个不匹配任何自定义函数的提示时会发生什么呢？简单来说，它将默认采用典型行为，好像函数调用不存在一样。我们用一个任意提示来测试一下：“埃菲尔铁塔有多高？”
- en: '![](../Images/051335d6f9aa49a57801d18b5d99372a.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/051335d6f9aa49a57801d18b5d99372a.png)'
- en: Function calling but with a prompt that doesn’t match the function (Captured
    by the author)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用，但提示不匹配函数（作者拍摄）
- en: As you can see, we are getting a typical “Completions” output though we passed
    in our custom function. Naturally, this makes sense since this arbitrary Eiffel
    Towel prompt contains none of the specific information we are looking for.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们得到了典型的“完成”输出，尽管我们传入了自定义函数。自然，这也很合理，因为这个任意的埃菲尔铁塔提示中不包含我们所寻找的具体信息。
- en: What if I want to pass multiple custom functions and some of them have overlapping
    parameters?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我想传递多个自定义函数，而其中一些函数具有重叠的参数怎么办？
- en: 'In short, ChatGPT intelligently handles this without a problem. Where we previously
    passed in one custom function as essentially a list of Python dictionaries, we
    just need to keep adding additional Python dictionaries to this same list, each
    representing its own distinct function. Let’s add two new functions: one called
    `extract_vehicle_info` and another called `extract_all_info`. Here’s what our
    adjusted syntax looks like:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，ChatGPT 能够智能地处理这个问题。我们之前将一个自定义函数作为 Python 字典列表传入，现在我们只需继续向这个列表中添加更多 Python
    字典，每个字典表示一个不同的函数。我们来添加两个新函数：一个叫做 `extract_vehicle_info`，另一个叫做 `extract_all_info`。调整后的语法如下：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice specifically how the `extract_all_info` covers some of the same parameters
    as our original `extract_person_info` function, so how does ChatGPT know which
    one to select? Simply put, ChatGPT looks for the best match. If we pass in a prompt
    that contains all the arguments needed for the `extract_all_info` function, that’s
    the one it’ll select. But if we just pass in a prompt that contains either just
    simple information about me or a prompt about my vehicle, it’ll leverage the respective
    functions that do that. Let’s execute that in code here with a few samples:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意 `extract_all_info` 如何覆盖与我们原始的 `extract_person_info` 函数一些相同的参数，那么 ChatGPT
    如何知道选择哪个函数？简单来说，ChatGPT 寻找最佳匹配。如果我们传入的提示包含了 `extract_all_info` 函数所需的所有参数，它就会选择这个函数。但如果我们仅传入包含简单的个人信息或关于车辆的提示，它将利用相应的函数来处理。我们在这里用一些示例代码来执行这个操作：
- en: 'Sample 1: The original “About Me” text. (See above.)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 1：原始的“关于我”文本。（见上文。）
- en: 'Sample 2: *“My name is David Hundley. I am a principal machine learning engineer,
    and I have two daughters.”*'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 2：*“我的名字是 David Hundley。我是一名首席机器学习工程师，我有两个女儿。”*
- en: 'Sample 3: *“She drives a Kia Sportage.”*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 3：*“她开的是一辆起亚智跑。”*
- en: '![](../Images/b7fb9578c9fc406ec2389c960695b2e6.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b7fb9578c9fc406ec2389c960695b2e6.png)'
- en: 'Sample #1’s Results (Captured by the author)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 #1 的结果（作者捕获）'
- en: '![](../Images/4ca85cd4c01fe31f567aedb45838fbfd.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ca85cd4c01fe31f567aedb45838fbfd.png)'
- en: 'Sample #2’s Results (Captured by the author)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 #2 的结果（作者捕获）'
- en: '![](../Images/6f10796afa0b3dd7f8c45034501135b0.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f10796afa0b3dd7f8c45034501135b0.png)'
- en: 'Sample #3’s results:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 #3 的结果：'
- en: 'With each of the respective prompts, ChatGPT selected the correct custom function,
    and we can specifically note that in the `name` value under `function_call` in
    the API’s response object. In addition to this being a handy way to identify which
    function to use the arguments for, we can programmatically map our actual custom
    Python function to this value to run the correct code appropriately. If that doesn’t
    make sense, perhaps looking at this in code would make this more clear:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个相应的提示中，ChatGPT选择了正确的自定义函数，我们可以特别注意到API响应对象中`function_call`下的`name`值。除了这是识别哪个函数使用参数的便捷方式外，我们还可以将实际的自定义Python函数程序化地映射到这个值上，以正确地运行代码。如果这不太清楚，也许查看代码会更明白：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/d881eb31c35582412985e4f3e656dba7.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d881eb31c35582412985e4f3e656dba7.png)'
- en: Final programmatic results! (Captured by the author)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最终程序结果！（作者捕获）
- en: '****Beware one thing****: In the spirit of full transparency, I had to run
    that code there multiple times to get it to produce like that. The trouble is
    that because the `extract_person_info` and `extract_all_info` are more similar
    in nature, ChatGPT kept confusing those for one another. I guess the lesson to
    be learned here is that your functions should be extracting distinct information.
    I also only tested using `gpt-3.5-turbo`, so it’s possible that a more powerful
    model like GPT-4 could have handled that better.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '****注意事项****：为了完全透明，我必须多次运行那段代码才能使其产生这样的结果。问题在于，因为`extract_person_info`和`extract_all_info`的性质较为相似，ChatGPT经常把它们混淆在一起。我猜这里的教训是，你的函数应该提取不同的信息。我也仅使用了`gpt-3.5-turbo`进行测试，因此可能像GPT-4这样更强大的模型可能处理得更好。'
- en: '*****Friday, 7/28/23 Update**: I added a new section on how this works with
    LangChain!***'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*****2023年7月28日更新**：我添加了一个关于如何与LangChain配合使用的新部分！***'
- en: OpenAI Function Calling with LangChain
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenAI函数调用与LangChain
- en: Given the popular usage of LangChain, I thought it might be useful for how you
    might use this same function calling capability within that framework. Now, for
    folks familiar with LangChain, you might already be aware that LangChain offers
    its own parsing capabilities, and these parsing capabilities are largely enabled
    through advanced prompt engineering.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于LangChain的广泛使用，我认为了解如何在该框架内使用相同的函数调用能力可能会有用。对于熟悉LangChain的人，你可能已经知道LangChain提供了自己的解析能力，这些解析能力主要通过先进的提示工程实现。
- en: If you are already making use of these LangChain parsers, you might be wondering,
    “Should I pivot to use OpenAI function calling for better performance?” Unfortunately,
    there’s not a clean way to answer this question as OpenAI has abstracted away
    what it’s actually doing to enable function calling. (Trust me, I dug through
    the OpenAI client source code, and [this line here](https://github.com/openai/openai-python/blob/main/openai/api_resources/abstract/engine_api_resource.py#L156)
    shows that it is indeed abstracted away!) If you’re already making use of LangChain’s
    parsers, I would probably recommend you stick with those, especially since they
    are portable for other LLMs beyond OpenAI.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在使用这些LangChain解析器，你可能会想，“我是否应该转向使用OpenAI函数调用以获得更好的性能？” 不幸的是，没有一个明确的答案，因为OpenAI已经抽象化了实现函数调用的方式。（相信我，我深入挖掘了OpenAI客户端源代码，[这一行](https://github.com/openai/openai-python/blob/main/openai/api_resources/abstract/engine_api_resource.py#L156)显示它确实被抽象化了！）如果你已经在使用LangChain的解析器，我可能建议你继续使用这些解析器，特别是因为它们对于其他LLM也具有可移植性。
- en: The good news is that if you want to make use of OpenAI function calling in
    tandem with other LangChain functionality (and are okay with only being able to
    pass in one function calling template), you can absolutely do that! I’m not going
    to cover LangChain in depth in this post, but I would like to show the quick code
    to enable this. It’s essentially going to involve us importing some LangChain
    objects and using those as “wrappers” around what we’ve already created.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，如果你想同时利用 OpenAI 的函数调用和其他 LangChain 功能（并且可以接受只传入一个函数调用模板），你完全可以做到这一点！我不会在这篇文章中深入介绍
    LangChain，但我会展示如何快速启用它的代码。这本质上涉及到导入一些 LangChain 对象，并将它们作为我们已经创建的内容的“包装器”。
- en: 'Before we proceed forward, there’s also another issue with LangChain’s implementation…
    it doesn’t seem to allow us to submit multiple function calling templates at once.
    Additionally, we will have to reformat the JSON schema for this specific implementation.
    It looks very similar. Let’s do a back-to-back comparison. Here’s the original
    JSON schema for native OpenAI function calling:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，还有一个问题是 LangChain 的实现……它似乎不允许我们一次提交多个函数调用模板。此外，我们还需要重新格式化 JSON 架构以适应这个特定的实现。它看起来非常相似。我们来做一个逐对比。以下是原生
    OpenAI 函数调用的 JSON 架构：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And here is what the reformatted version looks like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是重新格式化后的版本的样子：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This little code snippet will show you how to perform the exact same functionality
    that we’ve done above, except now with LangChain!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小代码片段将展示如何执行与上述相同的功能，只不过这次是使用 LangChain！
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see in the screenshot below, we get the exact same results as we
    did before.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，我们得到的结果与之前完全相同。
- en: '![](../Images/cbe2a02e8c06b602a9fa94b3e014ca38.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cbe2a02e8c06b602a9fa94b3e014ca38.png)'
- en: Output of the LangChain call (Screenshot captured by the author)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain 调用的输出（截图由作者捕获）
- en: Wrapping Up
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope you can see now why function calling can be so powerful! When it comes
    to building applications that leverage Generative AI, this kind of function calling
    is a godsend for programmers. By not having to worry so much now about the output
    JSON structure, we can now focus our time on building out other parts of the application.
    It’s an awesome time to be working in this space
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你现在能理解为什么函数调用会如此强大！在构建利用生成式 AI 的应用程序时，这种函数调用对程序员来说是一个福音。由于现在不必过多担心输出的 JSON
    结构，我们可以将时间集中在构建应用程序的其他部分。现在在这个领域工作是一个绝妙的时机。
