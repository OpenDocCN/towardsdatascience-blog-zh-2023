- en: Unleashing the Power of Python Asyncio’s Queue
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 释放Python Asyncio队列的力量
- en: 原文：[https://towardsdatascience.com/unleashing-the-power-of-python-asyncios-queue-f76e3188f1c4](https://towardsdatascience.com/unleashing-the-power-of-python-asyncios-queue-f76e3188f1c4)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/unleashing-the-power-of-python-asyncios-queue-f76e3188f1c4](https://towardsdatascience.com/unleashing-the-power-of-python-asyncios-queue-f76e3188f1c4)
- en: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
- en: Mastering the producer-consumer pattern with asyncio through real-life examples
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过实际案例掌握使用asyncio的生产者-消费者模式
- en: '[](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f76e3188f1c4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f76e3188f1c4--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f76e3188f1c4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f76e3188f1c4--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f76e3188f1c4--------------------------------)
    ·8 min read·Jun 6, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f76e3188f1c4--------------------------------)
    ·8分钟阅读·2023年6月6日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/24745d20075c5ff8f7fcdfc41ffc42b9.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24745d20075c5ff8f7fcdfc41ffc42b9.png)'
- en: 'Photo Credit: Created by Author, [Canva](https://www.canva.com/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：由作者创建，[Canva](https://www.canva.com/)
- en: In this article, I will explain the API usage and application scenarios of various
    queues in Python asyncio relaxedly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将轻松讲解Python asyncio中各种队列的API用法和应用场景。
- en: At the end of the article, I will demonstrate the practical usage of `asyncio.Queue`
    in a classic shopping scenario.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章末尾，我将展示在经典购物场景中`asyncio.Queue`的实际用法。
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Why do we need asyncio.Queue
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们需要asyncio.Queue
- en: As readers who have read my previous articles know, I love asyncio because it
    is an almost perfect solution for concurrent programming.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如阅读过我之前文章的读者所知，我喜欢asyncio，因为它几乎是并发编程的**终极解决方案**。
- en: However, in a large-scale, highly concurrent project, a large number of uncontrollable
    concurrent tasks waiting will occupy system resources, leading to poor performance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在大规模、高度并发的项目中，大量不可控的并发任务等待将占用系统资源，导致性能差。
- en: Therefore, it is necessary to control the number of concurrent tasks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有必要控制并发任务的数量。
- en: Why can’t we use asyncio.Semaphore
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们不能使用`asyncio.Semaphore`
- en: In my previous article on synchronization primitives, I introduced using `Semaphore`
    locks to control the number of concurrent tasks running simultaneously.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前关于同步原语的文章中，我介绍了使用`Semaphore`锁来控制同时运行的并发任务的数量。
- en: '[](/mastering-synchronization-primitives-in-python-asyncio-a-comprehensive-guide-ae1ae720d0de?source=post_page-----f76e3188f1c4--------------------------------)
    [## Mastering Synchronization Primitives in Python Asyncio: A Comprehensive Guide'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/mastering-synchronization-primitives-in-python-asyncio-a-comprehensive-guide-ae1ae720d0de?source=post_page-----f76e3188f1c4--------------------------------)
    [## 在Python Asyncio中掌握同步原语：全面指南'
- en: Best practices for asyncio.Lock, asyncio.Semaphore, asyncio.Event and asyncio.Condition
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio.Lock、asyncio.Semaphore、asyncio.Event和asyncio.Condition的最佳实践
- en: towardsdatascience.com](/mastering-synchronization-primitives-in-python-asyncio-a-comprehensive-guide-ae1ae720d0de?source=post_page-----f76e3188f1c4--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/mastering-synchronization-primitives-in-python-asyncio-a-comprehensive-guide-ae1ae720d0de?source=post_page-----f76e3188f1c4--------------------------------)'
- en: Set the number of `Semaphore` locks first, and the tasks that get the lock will
    be executed, while those who don’t will wait.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先设置`Semaphore`锁的数量，获得锁的任务将会执行，而没有获得锁的任务则会等待。
- en: However, `asyncio.Semaphore` can only limit the concurrency of tasks accessing
    a resource through IO; the number of concurrent tasks cannot be limited.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`asyncio.Semaphore`只能限制通过IO访问资源的任务的并发性；无法限制并发任务的数量。
- en: Therefore, in this scenario, `asyncio.Semaphore` is not a perfect solution.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，`asyncio.Semaphore`不是一个完美的解决方案。
- en: asyncio.Queue is the way
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: asyncio.Queue就是这样的方式
- en: Using `asyncio.Queue`, we can start a fixed number of concurrent tasks when
    the program starts, and then pass the data to be processed through the queue to
    these tasks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`asyncio.Queue`，我们可以在程序启动时启动固定数量的并发任务，然后通过队列将待处理的数据传递给这些任务。
- en: This is the well-known producer-consumer pattern. At the same time, like the
    multiprocessing queue, `asyncio.Queue` also serves to pass messages between concurrent
    tasks.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是著名的生产者-消费者模式。同时，像多进程队列一样，`asyncio.Queue`也用于在并发任务之间传递消息。
- en: The Magical World of asyncio’s Queue
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: asyncio队列的魔法世界
- en: 'Why can `asyncio.Queue` plays such a significant role? In fact, we also encounter
    similar problems in real life:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么`asyncio.Queue`会扮演如此重要的角色？实际上，我们在现实生活中也会遇到类似的问题：
- en: '![](../Images/f6557fc9a9a025003cca9bbacb65160c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6557fc9a9a025003cca9bbacb65160c.png)'
- en: Crowds of people in the supermarket. Created by Author, [Canva](https://www.canva.com/)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 超市中的人群。由作者创建，[Canva](https://www.canva.com/)
- en: The most typical example is large shopping supermarkets. In such supermarkets,
    there are always many customers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最典型的例子是大型购物超市。在这样的超市里，总是有很多顾客。
- en: After each customer finishes shopping, they need to check out. Checking out
    takes some time, which can lead to congestion.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个顾客购物完后需要结账。结账需要一些时间，这可能会导致拥堵。
- en: A more straightforward solution is to hire more cashiers, preferably one for
    each customer, for instant checkouts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更直接的解决方案是雇佣更多的收银员，最好每个顾客一个，以实现即时结账。
- en: However, this is unrealistic because so many cashiers would mean colossal cost
    pressure (and resource consumption) for the boss.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不现实，因为这么多的收银员意味着老板需要承受巨大的成本压力（和资源消耗）。
- en: 'So, a brilliant person came up with a good solution: have customers line up
    in a queue, and then have a few cashiers check out customers in turn.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有人想出了一个好主意：让顾客排队，然后让几个收银员轮流结账。
- en: '![](../Images/326c7e31717a573d28e9ee72861982ff.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/326c7e31717a573d28e9ee72861982ff.png)'
- en: Customers in the supermarket are lining up. Photo by [Lisanto 李奕良](https://unsplash.com/@lisanto_?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 超市中的顾客正在排队。照片由[Lisanto 李奕良](https://unsplash.com/@lisanto_?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The only cost is that customers need to wait a little longer. At the same time,
    if the queue is too long, the manager can choose to temporarily add a few more
    cashiers. In this way, the system can flexibly expand.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的成本是顾客需要多等一会儿。同时，如果队列太长，经理可以选择临时增加几个收银员。这样，系统可以灵活扩展。
- en: 'By comparing the customer queue to data entering the queue and cashiers to
    concurrent tasks, we can see the benefits `asyncio.Queue` brings:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将顾客队列比作数据进入队列，将收银员比作并发任务，我们可以看到`asyncio.Queue`带来的好处：
- en: It is a good implementation of the producer-consumer pattern.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是生产者-消费者模式的良好实现。
- en: It can control the number of concurrent tasks.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以控制并发任务的数量。
- en: Making resource consumption manageable, and the system can also be flexibly
    expanded.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样可以让资源消耗变得可控，并且系统也可以灵活扩展。
- en: The Adventures of the Producer-Consumer Pattern in asyncio
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产者-消费者模式在asyncio中的冒险
- en: What is the producer-consumer pattern
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是生产者-消费者模式
- en: Imagine two types of tasks sharing a queue. Task A produces data and puts it
    into the queue, while Task B retrieves data from the queue for processing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下两种任务共享一个队列。任务A生成数据并将其放入队列，而任务B从队列中取出数据进行处理。
- en: This is the producer-consumer pattern, where Task A is the producer, and Task
    B is the consumer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是生产者-消费者模式，其中任务A是生产者，任务B是消费者。
- en: In analogy with a supermarket, customers are producers, cashiers are consumers,
    and the customer queue represents the queue.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类比超市，顾客是生产者，收银员是消费者，顾客队列代表队列。
- en: Why use the producer-consumer pattern
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用生产者-消费者模式
- en: In high-concurrency programs, producers often generate data quickly, while consumers
    process data slowly. Thus, producers must wait for consumers to finish processing
    before continuing to produce data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在高并发程序中，生产者通常会快速生成数据，而消费者处理数据较慢。因此，生产者必须等待消费者完成处理后才能继续生产数据。
- en: Sometimes, consumers process data quickly, while producers generate data slowly.
    This leads to consumers waiting for producers to generate data before continuing
    to run.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，消费者处理数据的速度较快，而生产者生成数据的速度较慢。这导致消费者在继续运行之前需要等待生产者生成数据。
- en: To balance between producers and consumers, a queue is needed to store the data
    produced by the producer. The queue acts as a buffer and decouples the producer
    and consumer.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了平衡生产者和消费者，需要一个队列来存储生产者产生的数据。队列充当缓冲区，并将生产者和消费者解耦。
- en: '![](../Images/d47ee0d9373081deb522778bec8b006c.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d47ee0d9373081deb522778bec8b006c.png)'
- en: The Diagram of Producer-Consumer Pattern. Image by Author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 生产者-消费者模式图。图像由作者提供
- en: Implementing the Producer-Consumer Pattern with asyncio’s Queue
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 asyncio 的 Queue 实现生产者-消费者模式
- en: Now, let’s implement the supermarket shopping scenario mentioned earlier using
    `asyncio.Queue`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `asyncio.Queue` 实现之前提到的超市购物场景。
- en: As shown in the code, we first implement the `Customer` and `Product` classes,
    representing customers and products that need to be checked out. The `Product`
    class has a `checkout_time` attribute, which represents the time required for
    checking out the product.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，我们首先实现了 `Customer` 和 `Product` 类，分别表示需要结账的顾客和产品。`Product` 类有一个 `checkout_time`
    属性，表示结账所需的时间。
- en: After that, we implement a `checkout_customer` method that acts as a consumer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们实现了一个 `checkout_customer` 方法作为消费者。
- en: As long as there is data in the queue, this method will continue to loop. During
    each iteration, it uses a `get` method to retrieve a `Customer` instance.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只要队列中有数据，该方法将继续循环。在每次迭代中，它使用 `get` 方法来获取一个 `Customer` 实例。
- en: If there is no data in the queue, it will wait.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果队列中没有数据，它将等待。
- en: After retrieving a piece of data (in this case, a `Customer` instance), it iterates
    through the `products` attribute and uses `asyncio.sleep` to simulate the checkout
    process.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在检索到一条数据（在本例中是一个 `Customer` 实例）后，它会遍历 `products` 属性，并使用 `asyncio.sleep` 来模拟结账过程。
- en: After finishing processing the data, we use `queue.task_done()` to tell the
    queue that the data has been successfully processed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理完数据后，我们使用 `queue.task_done()` 来告诉队列数据已成功处理。
- en: Next, we implement the `generate_customer` method as a factory method for producing
    customers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实现了 `generate_customer` 方法作为生产客户的工厂方法。
- en: We first define a product series and the required checkout time for each product.
    Then, we place 0 to 10 products in each customer’s shopping cart.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个产品系列及每个产品所需的结账时间。然后，我们在每个顾客的购物车中放置 0 到 10 个产品。
- en: Furthermore, we implement the `customer_generation` method as a producer. This
    method generates several customer instances regularly and puts them in the queue.
    If the queue is full, the `put` method will wait.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们实现了 `customer_generation` 方法作为生产者。该方法定期生成几个客户实例并将其放入队列。如果队列已满，`put` 方法将会等待。
- en: Finally, we use the `main` method to initialize the queue, producer, and consumer,
    and start all concurrent tasks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `main` 方法来初始化队列、生产者和消费者，并启动所有并发任务。
- en: '![](../Images/1f4a8d17480857da09d0da1f14caf26d.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f4a8d17480857da09d0da1f14caf26d.png)'
- en: The implementation is successful. Image by Author
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实现成功。图像由作者提供
- en: As expected, the implementation is successful.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，实施成功。
- en: Introducing the PriorityQueue
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 PriorityQueue
- en: Why use [asyncio.PriorityQueue](https://docs.python.org/3/library/asyncio-queue.html#priority-queue)
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用 [asyncio.PriorityQueue](https://docs.python.org/3/library/asyncio-queue.html#priority-queue)
- en: The queue mentioned earlier is a [First-In-First-Out (FIFO) queue](https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)),
    where the first item to enter the queue is the first to be retrieved. This is
    suitable when all tasks in the queue have the same priority.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的队列是一个 [先进先出 (FIFO) 队列](https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics))，其中第一个进入队列的项目是第一个被取出的。这在队列中的所有任务具有相同优先级时很合适。
- en: 'However, consider the following situation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，考虑以下情况：
- en: Suppose there is a queue with tasks waiting in line, each requiring a long processing
    time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个队列中有待处理的任务，每个任务都需要很长的处理时间。
- en: An error log or VIP user access is a high-priority task that needs immediate
    attention. What should we do?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志或 VIP 用户访问是需要立即关注的高优先级任务。我们该怎么办？
- en: '![](../Images/b36cdaeab79425994916e2b5040f5dcf.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b36cdaeab79425994916e2b5040f5dcf.png)'
- en: Photo by [Ethan Hu](https://unsplash.com/@ethanhjy?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Ethan Hu](https://unsplash.com/@ethanhjy?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: This is where `[asyncio.PriorityQueue](https://docs.python.org/3/library/asyncio-queue.html#priority-queue)`
    comes into play.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`[asyncio.PriorityQueue](https://docs.python.org/3/library/asyncio-queue.html#priority-queue)`发挥作用的地方。
- en: Briefly describe asyncio.PriorityQueue’s implementation
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简要描述`asyncio.PriorityQueue`的实现
- en: Unlike FIFO queues based on lists, `asyncio.PriorityQueue` is based on heaps.
    It is built using a binary tree structure.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与基于列表的FIFO队列不同，`asyncio.PriorityQueue`基于堆。它是通过二叉树结构构建的。
- en: You may be familiar with binary search trees, which ensure that the most minor
    node is always the leftmost node.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对二叉搜索树比较熟悉，它确保最小的节点始终是最左边的节点。
- en: However, the binary tree in `asyncio.PriorityQueue` ensures that the most minor
    node is always at the top, so the highest priority node is permanently removed
    first.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`asyncio.PriorityQueue`中的二叉树确保最小的节点始终在顶部，因此最高优先级的节点会被优先移除。
- en: '![](../Images/3c8c8aae9f26e66ab270438bab05f903.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c8c8aae9f26e66ab270438bab05f903.png)'
- en: On the left is the binary tree used by PriorityQueue, and on the right is the
    binary search tree. Image by Author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧是PriorityQueue使用的二叉树，右侧是二叉搜索树。 图片来源：作者
- en: Real-world example with asyncio.PriorityQueue
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`asyncio.PriorityQueue`的实际例子
- en: Let’s illustrate the usage of `asyncio.PriorityQueue` with a real-world scenario
    that exists in practice.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个实际存在的场景来说明`asyncio.PriorityQueue`的使用。
- en: Imagine we have an order service API. The API takes time for each order to process,
    but we can’t keep users waiting too long.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们有一个订单服务API。这个API需要时间来处理每个订单，但我们不能让用户等待太久。
- en: So when a user places an order, the API first puts the order into a queue, allowing
    a background task to process it asynchronously while immediately returning a message
    to the user.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当用户下订单时，API首先将订单放入队列中，允许后台任务异步处理，同时立即向用户返回一条消息。
- en: 'This API accepts orders from two types of users: regular users and VIP users.
    It must ensure that VIP user orders are processed with the highest priority.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个API接受两种类型的用户订单：普通用户和VIP用户。它必须确保VIP用户的订单以最高优先级处理。
- en: '![](../Images/cd2ec610384ccdeca7c3a38496346f69.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cd2ec610384ccdeca7c3a38496346f69.png)'
- en: VIP orders are processed with the highest priority. Image by Author
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: VIP订单以最高优先级处理。 图片来源：作者
- en: 'To keep the learning curve low for readers, in this example, we will use `aiohttp`
    to implement the server. The specific code is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持读者的学习曲线较低，在这个例子中，我们将使用`aiohttp`来实现服务器。具体代码如下：
- en: 'First, we define an enumeration marking the two categories: regular users and
    VIP users.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个枚举来标记两种类别：普通用户和VIP用户。
- en: Next, we use `dataclass` to define a user's order, which contains the user type
    and order processing duration. The order duration is not considered in priority
    sorting.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`dataclass`定义一个用户的订单，其中包含用户类型和订单处理时长。订单时长不考虑在优先级排序中。
- en: Then we define the consumer method `process_order_worker`, which retrieves orders
    from the queue and simulates the order processing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义消费者方法`process_order_worker`，它从队列中获取订单并模拟订单处理。
- en: Don’t forget to use `queue.task_done()` to tell the queue that we finished processing
    the order.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用`queue.task_done()`来告诉队列我们已经处理完订单。
- en: Following that, we implement the order API using `aiohttp`. This API responds
    to user requests, generates an order object, and places it in the `asyncio.PriorityQueue`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`aiohttp`实现订单API。这个API响应用户请求，生成一个订单对象，并将其放入`asyncio.PriorityQueue`。
- en: It then immediately returns a response to the user, avoiding user wait time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它随后立即返回响应给用户，避免了用户的等待时间。
- en: When the program starts, we use `create_order_queue` to initialize the queue
    and order consumption tasks.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序启动时，我们使用`create_order_queue`来初始化队列和订单消费任务。
- en: When the program ends, we use `destroy_order_queue` to ensure that all orders
    in the queue are processed and the background tasks are closed correctly.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序结束时，我们使用`destroy_order_queue`来确保队列中的所有订单都被处理，并且后台任务正确关闭。
- en: '`queue.join()` will wait for all the data in the queue to be processed. `asyncio.wait_for`
    sets a timeout of 20 seconds, after which it will no longer wait `queue.join()`
    to complete.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`queue.join()`将等待队列中的所有数据处理完成。`asyncio.wait_for`设置了20秒的超时，超时后将不再等待`queue.join()`完成。'
- en: 'We can test this implementation using PyCharm’s HTTP Request:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 PyCharm 的 HTTP 请求来测试这个实现：
- en: '![](../Images/a07612eda7364a25f9d308bbf30783ce.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a07612eda7364a25f9d308bbf30783ce.png)'
- en: API prioritizes orders from VIP users whenever possible. Image by Author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: API 优先处理 VIP 用户的订单。图片来源：作者
- en: As you can see, the two high-priority tasks are processed as expected. Perfect!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，两个高优先级的任务按预期处理了。完美！
- en: Conclusion
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I introduced the usage and best practices of `asyncio.Queue`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我介绍了`asyncio.Queue`的使用及最佳实践。
- en: When you need to control the concurrency of a program, I recommend using `asyncio.Queue`
    to effectively manage resource consumption.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要控制程序的并发性时，我推荐使用`asyncio.Queue`来有效管理资源消耗。
- en: 'I introduced the producer-consumer pattern and its benefits:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我介绍了生产者-消费者模式及其优点：
- en: Balancing between producers and consumers, maximizing resource utilization.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生产者和消费者之间平衡，最大化资源利用率。
- en: Decoupling the system, allows producers and consumers to scale independently.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解耦系统，允许生产者和消费者独立扩展。
- en: Finally, I showed how to use `asyncio.PriorityQueue` to handle scenarios where
    tasks require prioritization through a real-world example.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我展示了如何使用`asyncio.PriorityQueue`通过一个实际示例处理需要优先级的场景。
- en: Due to space constraints, I could not cover all aspects of `asyncio.Queue`.
    However, I hope this article provided a solid understanding of the basic concepts
    and helpful examples.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于空间限制，我未能覆盖`asyncio.Queue`的所有方面。然而，我希望这篇文章提供了对基本概念和有用示例的扎实理解。
- en: Asynchronous programming in Python is a powerful tool, and the producer-consumer
    pattern with `asyncio.Queue` is a versatile approach to handling concurrency and
    prioritization in your applications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的异步编程是一个强大的工具，使用`asyncio.Queue`的生产者-消费者模式是处理应用程序中的并发和优先级的多功能方法。
- en: 'You can get more knowledge about Python Concurrency through my list of articles:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过我的文章列表获取更多关于 Python 并发的知识：
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![彭倩](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[彭倩](https://qtalen.medium.com/?source=post_page-----f76e3188f1c4--------------------------------)'
- en: Python Concurrency
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 并发
- en: '[View list](https://qtalen.medium.com/list/python-concurrency-2c979347da3b?source=post_page-----f76e3188f1c4--------------------------------)10
    stories![Supercharge Your Python Asyncio With Aiomultiprocess: A Comprehensive
    Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Unleashing the Power of
    Python Asyncio’s Queue](../Images/aa5886c47ef891be14eb17f9a2ed3d0d.png)![](../Images/d5b38ed916e599eb0673eb311f95348d.png)[](https://qtalen.medium.com/membership?source=post_page-----f76e3188f1c4--------------------------------)
    [## Join Medium with my referral link - Peng Qian'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://qtalen.medium.com/list/python-concurrency-2c979347da3b?source=post_page-----f76e3188f1c4--------------------------------)10个故事！[用
    Aiomultiprocess 超强提升你的 Python Asyncio: 全面指南](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![释放
    Python Asyncio 队列的力量](../Images/aa5886c47ef891be14eb17f9a2ed3d0d.png)![](../Images/d5b38ed916e599eb0673eb311f95348d.png)[](https://qtalen.medium.com/membership?source=post_page-----f76e3188f1c4--------------------------------)
    [## 通过我的推荐链接加入 Medium - 彭倩'
- en: Read every story from Peng Qian (and thousands of other writers on Medium).
    Your membership fee directly supports Peng…
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读彭倩的每一个故事（以及 Medium 上的其他成千上万位作者）。您的会员费直接支持彭倩……
- en: qtalen.medium.com](https://qtalen.medium.com/membership?source=post_page-----f76e3188f1c4--------------------------------)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[qtalen.medium.com](https://qtalen.medium.com/membership?source=post_page-----f76e3188f1c4--------------------------------)'
- en: 'This article was originally published at: [https://www.dataleadsfuture.com/unleashing-the-power-of-python-asyncios-queue/](https://www.dataleadsfuture.com/unleashing-the-power-of-python-asyncios-queue/)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初发布于：[https://www.dataleadsfuture.com/unleashing-the-power-of-python-asyncios-queue/](https://www.dataleadsfuture.com/unleashing-the-power-of-python-asyncios-queue/)
