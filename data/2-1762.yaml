- en: 'Radial Treemaps: Extending Treemaps to Circular Mappings'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 径向树图：将树图扩展到圆形映射
- en: 原文：[https://towardsdatascience.com/radial-treemaps-extending-treemaps-to-circular-mappings-7b47785191da](https://towardsdatascience.com/radial-treemaps-extending-treemaps-to-circular-mappings-7b47785191da)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/radial-treemaps-extending-treemaps-to-circular-mappings-7b47785191da](https://towardsdatascience.com/radial-treemaps-extending-treemaps-to-circular-mappings-7b47785191da)
- en: Learn about Radial Treemaps and create your own with Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解径向树图并用 Python 创建自己的树图
- en: '[](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)[![Nick
    Gerend](../Images/716eb183008674ac46c6aee96093c4b3.png)](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)
    [Nick Gerend](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)[![Nick
    Gerend](../Images/716eb183008674ac46c6aee96093c4b3.png)](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)
    [Nick Gerend](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)
    ·16 min read·Dec 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)
    ·阅读时间16分钟·2023年12月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6f01781b35b77fcfaf65ec239959c2a5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f01781b35b77fcfaf65ec239959c2a5.png)'
- en: Radial-Treemap by Nick Gerend
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 径向树图，作者 Nick Gerend
- en: '**Background**'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**背景**'
- en: '**The Treemap Concept**'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**树图概念**'
- en: The “Treemap” was introduced by Ben Shneiderman at the University of Maryland
    in the early 1990s¹. Simply put, it’s an efficient way of displaying hierarchical
    data as a set of nested rectangles. Although the concept is simple, the arrangement
    of the rectangles is subject to an aesthetic preference, and various arrangement
    algorithms have been developed to enhance the appearance of the final layout.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “树图”由 Ben Shneiderman 在 1990 年代初期于马里兰大学提出¹。简而言之，它是一种将层次数据以嵌套矩形的形式高效展示的方法。尽管这一概念很简单，但矩形的排列受美学偏好的影响，因此已经开发出各种排列算法来改善最终布局的外观。
- en: '**Treemap Mechanics**'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**树图原理**'
- en: Given a hierarchy, a Treemap represents each branch in the hierarchy as a rectangle,
    which is then tiled with smaller rectangles representing sub-branches. The space
    in a Treemap is divided according to a specific attribute of the data (often size
    or value), and each rectangle’s area corresponds to the attribute’s magnitude,
    making it easy to compare different parts of the hierarchy.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个层次结构，树图将层次结构中的每个分支表示为一个矩形，然后用代表子分支的较小矩形进行拼接。树图中的空间是根据数据的特定属性（通常是大小或值）进行划分的，每个矩形的面积对应于该属性的大小，使得比较层次结构中的不同部分变得容易。
- en: '![](../Images/b0de705dee566f5e999e0a30c843ec77.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0de705dee566f5e999e0a30c843ec77.png)'
- en: 'Treemap of groups a, b and c, in that order -> largest items at each level:
    (a1), (a1,b1), (a1,b1,c1)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 树图中 a、b 和 c 组的顺序 -> 每个层级的最大项：(a1)、(a1,b1)、(a1,b1,c1)
- en: 'To account for the arrangement of the rectangles, here are some of the common
    algorithms that govern a Treemap’s construction and ultimate appearance:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了考虑矩形的排列，以下是一些常见的算法，它们控制树图的构造和最终外观：
- en: Squarified Treemaps² - creates rectangles as close to squares as possible by
    adjusting the aspect ratio of the rectangles
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方形树图² - 通过调整矩形的长宽比，使矩形尽可能接近正方形
- en: Strip Treemaps³ - lays out the rectangles in strips, either horizontally or
    vertically, based on the data’s hierarchy
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条形树图³ - 根据数据的层次结构，以水平或垂直方式布置矩形
- en: Slice-and-Dice⁴ - alternates between horizontal and vertical divisions which
    is straightforward but can create elongated rectangles
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片和切割⁴ - 交替进行水平和垂直分割，虽然直观，但可能会生成较长的矩形
- en: '**Treemap Features**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**树图特征**'
- en: Proportions - the size of each rectangle is proportional to the data point it
    represents, allowing quick identification of larger and smaller items
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比例 - 每个矩形的大小与其代表的数据点成比例，使得快速识别较大和较小的项变得容易
- en: Lines and Colors - clever usage of borders, border size and color, and buffers
    can delineate hierarchy levels while container colors are often used to represent
    different dimensions of the data
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线条和颜色 - 边框、边框大小和颜色以及缓冲区的巧妙使用可以划分层次级别，而容器颜色通常用来表示数据的不同维度
- en: Spatial Efficiency - Treemaps are particularly useful for visualizing large
    data sets as they make efficient use of space, allowing for the display of thousands
    of items simultaneously with the tiling algorithm determining the ultimate layout
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间效率 - Treemaps 特别适合可视化大型数据集，因为它们有效利用空间，允许同时显示成千上万的项目，平铺算法确定最终布局
- en: Order - when gathering data independent of a known hierarchy, the order of dimensions
    in the grouping is important as it determines the parent-child relationships at
    each level of the hierarchy
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序 - 当收集的数据独立于已知层次结构时，分组中维度的顺序很重要，因为它决定了层次结构每一级的父子关系
- en: Overall, the Treemap’s strength lies in its ability to display complex hierarchical
    data in a space-efficient and visually appealing manner, making it a popular visualization
    tool in any field of study.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Treemap 的优势在于能够以空间高效和视觉吸引的方式展示复杂的层次数据，使其成为任何研究领域中受欢迎的可视化工具。
- en: Polymorphism
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多态性
- en: Hierarchical data and it’s representation as nested polygons and shapes already
    has various useful and visually appealing implementations. One of my favorites
    is Voronoi Treemaps⁵, and I particularly like the idea of 3D mappings with Voronoi
    shapes (like a 3D Voronoi Treemap Sphere).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 层次数据及其作为嵌套多边形和形状的表示已经有各种有用且视觉吸引的实现。我最喜欢的之一是 Voronoi Treemaps⁵，而且我特别喜欢与 Voronoi
    形状结合的 3D 映射（如 3D Voronoi Treemap Sphere）的想法。
- en: There are likely many more Treemap representations waiting to be developed,
    and below I’ll cover my own implementation that I call the Radial Treemap. While
    writing this article, I also came across a tool called Krona⁶ (which seems to
    have a similar output style) that I found by reverse image searching my own Radial
    Treemap plots.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有许多 Treemap 表现形式等待开发，下面我将介绍我自己实现的径向 Treemap。在撰写这篇文章时，我还发现了一个名为 Krona⁶ 的工具（它似乎有类似的输出风格），这是通过反向图像搜索我自己的径向
    Treemap 图表时发现的。
- en: '**Radial Treemap**'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**径向 Treemap**'
- en: '**Inspiration**'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**灵感**'
- en: When I created my first Radial Treemap, I wasn’t thinking about implementing
    a type of Treemap, but rather a dataset about flying machines⁷. My goal was to
    take this dataset and make it look like a jet engine, as somewhat of an artistic
    visualization piece.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我创建我的第一个径向 Treemap 时，我并没有考虑实现一种 Treemap 类型，而是一个关于飞行器⁷的数据集。我的目标是将这个数据集呈现成一个喷气发动机的样子，作为一种艺术可视化作品。
- en: '![](../Images/f73341b257eeeec27ec79a7862a4da69.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f73341b257eeeec27ec79a7862a4da69.png)'
- en: “Takeoff” by Nick Gerend (3/11/2021)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “Takeoff” 作者：Nick Gerend (3/11/2021)
- en: What I ended up with, I initially called a “Pie-Tree” chart, but I realized
    later that it’s really just a form of Treemapping so now I call it a Radial Treemap!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我最终得到的东西，最初我称之为“饼图树”图表，但后来我意识到这实际上只是 Treemapping 的一种形式，所以现在我称它为径向 Treemap！
- en: What makes this type of Treemap special is the “radial” layout which opens up
    all kinds of useful and fun components that function well in a circular space.
    I find it particularly fun to integrate it with other types of radial charts for
    decomposing different aspects of hierarchical data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的 Treemap 特别之处在于其“径向”布局，这种布局在圆形空间中打开了各种有用且有趣的组件。我发现将它与其他类型的径向图表结合以分解层次数据的不同方面特别有趣。
- en: In the next section, I’ll discuss the components that are involved with constructing
    a Radial Treemap.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我将讨论构建径向 Treemap 时涉及的组件。
- en: Math, Algorithm & Layout
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学、算法与布局
- en: '**Ingredients**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**'
- en: 'The math behind the Radial Treemap leverages a few basic ingredients that determine
    the polygon container dimensions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 径向 Treemap 的数学基础利用了一些基本元素来确定多边形容器的尺寸：
- en: inner radius - outlines the shorter curved edge of the container
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内半径 - 勾勒出容器较短的弯曲边缘
- en: outer radius - outlines the longer curved edge of the container
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外半径 - 勾勒出容器较长的弯曲边缘
- en: starting angle - outlines the straight edge of the container at the minimum
    angle
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起始角度 - 勾勒出容器在最小角度处的直边
- en: ending angle - outlines the straight edge of the container at the maximum angle
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束角度 - 勾勒出容器在最大角度处的直边
- en: These containers are essentially pie or donut wedges segmented between two radii,
    which seem irregular compared to the rectangular containers of the conventional
    Treemap, but maintain the same level of intuition with relative size comparisons.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些容器本质上是沿两个半径分割的饼图或甜甜圈楔形，与传统树图的矩形容器相比显得不规则，但在相对大小比较上保持相同的直观性。
- en: '![](../Images/909a22de59aeab569edbbbe701f7e831.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/909a22de59aeab569edbbbe701f7e831.png)'
- en: shapes from a Treemap and Radial-Treemap with similar areas
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 来自树图和径向树图的形状，具有类似的区域
- en: '**Functions**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数**'
- en: 'Now that we’ve established the ingredients of the containers, let’s move onto
    the math, beginning with the area of the outer parent container at the first level
    of the hierarchy. Assuming we want to have some flexibility with shape of the
    outer container, let’s implement an area function (func_area) for a donut slice:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了容器的基本要素，接下来我们将进入数学部分，从层次结构第一层的外部父容器的面积开始。假设我们希望对外部容器的形状有一定的灵活性，我们可以为甜甜圈切片实现一个面积函数（func_area）：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This allows for void space in the middle of the donut (between the origin and
    inner radius) and a void section between the starting and ending angles. Having
    this flexibility encourages unique and creative ways to configure the layout to
    get the most out of the use case at hand. The possibilities!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许在甜甜圈的中间（原点和内半径之间）和起始角度与结束角度之间留有空隙。这种灵活性鼓励以独特和创造性的方式配置布局，以最大限度地利用当前的用例。可能性无限！
- en: 'Next we need to determine the corners of the containers depending on their
    prospective orientation (func_container):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要根据容器的预期方向来确定容器的角点（func_container）：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For implementing a good default orientation method, let’s calculate the arc
    and radius lengths for both orientation options to select the container orientation
    with the smallest maximum length (what I’ve called the “smart” method):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现一个好的默认方向方法，让我们计算两个方向选项的弧长和半径长度，以选择具有最小最大长度的容器方向（我称之为“智能”方法）：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'All that’s left is converting Polar coordinates to Cartesian coordinates for
    plotting (func_convertion):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是将极坐标转换为笛卡尔坐标进行绘图（func_convertion）：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Radial-Treemap Algorithm**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**径向树图算法**'
- en: 'Using the established functions, here’s the general algorithm:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用已建立的函数，这里是通用算法：
- en: 'Begin with a set of mutually exclusive groups, with 1 to many dimensions, and
    their associated counts or values that will govern the polygon areas, for example:
    ({a1,b1,c1}, 12.3), ({a1,b2,c1}, 4.5), ({a2,b1,c2}, 32.3), ({a1,b2,c2}, 2.1),
    ({a2,b1,c1}, 5.9), ({a3,b1,c1}, 3.5], ({a4,b2,c1}, 3.1)'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一组互斥的组开始，具有1到多个维度，以及它们的计数或值，这些将决定多边形的面积，例如：({a1,b1,c1}, 12.3), ({a1,b2,c1},
    4.5), ({a2,b1,c2}, 32.3), ({a1,b2,c2}, 2.1), ({a2,b1,c1}, 5.9), ({a3,b1,c1}, 3.5],
    ({a4,b2,c1}, 3.1)
- en: 'Set up configuration inputs: (positional: {starting angle, ending angle, inner
    radius, outer radius, rotation}), (sorting: {descending, ascending, manual}),
    (container orientation method: {alternating, outward, around, smart, legend}),
    (grouping: {on, off})'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置配置输入：（位置：{起始角度、结束角度、内半径、外半径、旋转}），（排序：{降序、升序、手动}），（容器方向方法：{交替、向外、绕行、智能、图例}），（分组：{开启、关闭}）
- en: Calculate the outer container’s area (func_area)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算外部容器的面积（func_area）
- en: Recursively calculate child container positions, leveraging their relative area
    percentage to the outer container’s area as an input into the container function
    (func_container), paired with the selected container orientation method
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 递归计算子容器的位置，利用它们相对于外部容器面积的相对面积百分比作为容器函数（func_container）的输入，配合所选择的容器方向方法
- en: Infill the polygon boundaries in the arc sections with points (more points for
    higher curve resolution) and convert the Polar coordinates into Cartesian coordinates
    for plotting
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用点填充弧段中的多边形边界（更多的点以获得更高的曲线分辨率），并将极坐标转换为笛卡尔坐标以进行绘图
- en: '**Container Orientation Methods**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器方向方法**'
- en: The original construction method I developed happened to alternate between radii
    partitions and concentric circle partitions (as seen above in my “ Takeoff” info-graphic),
    similar to the early Treemaps which were drawn with the “slice and dice” algorithm
    that alternated between horizontal and vertical partitions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我开发的原始构建方法恰好在半径分割和同心圆分割之间交替（如上所示的“起飞”信息图），类似于早期的树图，这些树图使用了“切片和切割”算法，在水平和垂直分割之间交替。
- en: 'Here are the container orientation methods I’ve created to date for my Radial
    Treemap:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我目前为径向树图创建的容器方向方法：
- en: Alternate - the original! (alternates like the slice and dice approach)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替代 - 原始的！（类似于切片和骰子的替代方法）
- en: Outward - all partitions are drawn as radii
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向外 - 所有分区都绘制为半径
- en: Around - all partitions are drawn as concentric circles
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周围 - 所有分区都绘制为同心圆
- en: Smart - the arc and radius lengths are calculated for each option and the smallest
    is chosen as a mechanism to prevent skinny polygons
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能 - 为每个选项计算弧长和半径长度，并选择最小的作为防止细长多边形的机制
- en: Legend - the first level of the hierarchy is always drawn as radii to align
    with a corresponding legend donut
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图例 - 层级结构的第一层总是绘制为半径，以对齐相应的图例甜甜圈
- en: A choice can also be made whether or not group the items in the first place.
    Flattening the data (removing the hierarchical grouping) to sort by the natural
    order of the lowest level of elements can be toggled for another layer of insight
    (especially useful for legends).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以选择是否首先对项目进行分组。可以切换扁平化数据（移除层次分组）以按元素最低级的自然顺序排序，为另一个层次的见解提供更多信息（特别是对图例很有用）。
- en: '![](../Images/826d95e40d1046173b7798dda9e4b00b.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/826d95e40d1046173b7798dda9e4b00b.png)'
- en: Radial-Treemap configurations using the example data above
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述示例数据的径向树图配置
- en: '**Layouts**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局**'
- en: With the flexibility to include central and wedge void spaces, stack, and rotate
    Radial-Treemaps, the layout options are endless!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包括中心和楔形空白区域、堆叠和旋转径向树图的灵活性，布局选项是无限的！
- en: 'Outer perimeter layout parameters:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 外围布局参数：
- en: Total Area (as a relative measure between 2 or more Radial Treemaps)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总面积（作为两个或更多径向树图之间的相对度量）
- en: Layout Constraints (donut slice determined by two angles and two radii)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局约束（甜甜圈切片由两个角度和两个半径确定）
- en: Rotation (rotation around the center)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转（围绕中心的旋转）
- en: Relative positioning with other Radial Treemaps (stacking, etc.)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他径向树图的相对定位（堆叠等）
- en: '![](../Images/e8dd5dd19d325ee068559bfed498993c.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8dd5dd19d325ee068559bfed498993c.png)'
- en: Radial Treemap perimeter examples
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 径向树图周边示例
- en: 'Legends:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图例：
- en: Complimentary Radial Treemap(s) around the inside, outside, or both sides (helpful
    for illustrating a different sorting of elements by level)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补充的径向树图（内部、外部或两侧）(有助于说明不同级别的元素排序)
- en: '![](../Images/7ee747077dd5fcae787794d543689c0c.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ee747077dd5fcae787794d543689c0c.png)'
- en: Radial Treemap Legends
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 径向树图图例
- en: 'Visualization Extensions (inner / outer / linear connections):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化扩展（内/外/线性连接）：
- en: '![](../Images/ebcfabd4feb53feb1e0f877927c09c8b.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ebcfabd4feb53feb1e0f877927c09c8b.png)'
- en: Examples of applicable visualization extensions (Sankey, Chord)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 适用的可视化扩展示例（桑基图，和弦图）
- en: '**3D Radial Treemap**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**3D 径向树图**'
- en: The Radial Treemap construct can easily be extended to 3D mathematically, and
    it comes with an extra plane for slicing and dicing!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 径向树图结构可以轻松地在数学上扩展到 3D，并且附带了一个额外的切片和切割平面！
- en: 'The available geometry for containerization is evident from the spherical coordinate
    system:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于容器化的几何形状从球坐标系统中可以看出：
- en: 'radial distance: r ≥ 0,'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 径向距离：r ≥ 0，
- en: 'polar angle: 0° ≤ θ ≤ 180° (0 rad ≤ θ ≤ π rad)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极角：0° ≤ θ ≤ 180°（0 rad ≤ θ ≤ π rad）
- en: 'azimuth : 0° ≤ φ < 360° (0 rad ≤ φ < 2π rad)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方位角：0° ≤ φ < 360°（0 rad ≤ φ < 2π rad）
- en: 'In terms of 3D Radial Treemap inputs, here’s a projection of each surface’s
    useable space:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 就 3D 径向树图输入而言，这是每个表面可用空间的投影：
- en: '![](../Images/8756bad982f74f55842a1f46b6848ee4.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8756bad982f74f55842a1f46b6848ee4.png)'
- en: 3D Radial Treemap Container Boundaries
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 径向树图容器边界
- en: 'Conveniently, the general algorithm for 3D is the same as 2D, adjusting for
    the effect of area transition to volume and solving for the 3 possible orientations
    in terms of radius, polar angle, and azimuth. Here’s a simple 3D Radial Treemap:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，3D 的通用算法与 2D 相同，调整面积过渡到体积的效果，并解决半径、极角和方位角的三种可能方向。以下是一个简单的 3D 径向树图：
- en: '![](../Images/ef480f9e787970fb125f27aa93c25d6b.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef480f9e787970fb125f27aa93c25d6b.png)'
- en: 3D Treemap by Nick Gerend, rendered with Autodesk Fusion 360
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Nick Gerend 渲染的 3D 树图，使用 Autodesk Fusion 360
- en: Next I’ll show a python implementation for generating 2D Radial Treemap visualizations.
    A 3D version is on the roadmap!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将展示一个生成 2D 径向树图可视化的 Python 实现。3D 版本在开发计划中！
- en: Python Implementation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 实现
- en: 'I’ve made an initial implementation of my Radial Treemap algorithm available
    in python via my [vizmath](https://pypi.org/project/vizmath/) package on PyPI.
    Here’s an example of usage:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经通过我的 [vizmath](https://pypi.org/project/vizmath/) 包在 PyPI 上提供了我径向树图算法的初步实现。以下是一个使用示例：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/fa0d604e0ee02d68e30021568bda5a28.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa0d604e0ee02d68e30021568bda5a28.png)'
- en: Radial Treemap using group values as areas via vizmath, rendered with Matplotlib
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组值作为区域的 Radial Treemap 通过 vizmath 渲染，使用 Matplotlib
- en: 'Let’s take a look at the output from the Radial Treemap algorithm:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 Radial Treemap 算法的输出：
- en: 'level - the level in the hierarchy: from 1 to N levels'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: level - 层级：从 1 到 N 层
- en: 'group - represents each node on the tree: for example, the group {a1,b1,c1}
    falls under the group {a1,b1}, which falls under {a1}'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: group - 代表树上的每个节点：例如，组 {a1,b1,c1} 属于组 {a1,b1}，而 {a1,b1} 属于 {a1}
- en: 'count - the group’s count: below you can see below that at level 1, the highest
    level, group {a2} contains 2 items'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: count - 组的计数：下方可以看到在第 1 层（最高层），组 {a2} 包含 2 个项目
- en: 'value - the group’s value (if specified): instead of using a count of items
    in a group, a supplied number can be used to represent the magnitude'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: value - 组的值（如果指定）：可以使用提供的数字来表示大小，而不是使用组中项目的计数
- en: 'level rank - the item’s rank within its group, in terms of its value (or count
    if value is not available) from highest to lowest: 1 to N'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层级排名 - 项目在其组中的排名，按其值（如果值不可用则按计数）从高到低排序：1 到 N
- en: 'overall rank - the item’s overall rank among all groups in terms of its value
    (or count if value is not available) from highest to lowest: 1 to N'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总体排名 - 项目在所有组中的总体排名，按其值（如果值不可用则按计数）从高到低排序：1 到 N
- en: x, y - Cartesian 2D coordinates for a point in the layout
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x, y - 布局中点的笛卡尔 2D 坐标
- en: 'path - an ordered set of integers that describe the path which encloses a polygon,
    in conjunction with each (x, y) point in the Radial Treemap, for each group: 1
    to N (specified by the ‘points’ parameter)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: path - 描述封闭多边形的整数有序集合，与 Radial Treemap 中每个 (x, y) 点相结合，用于每个组：1 到 N（由‘points’参数指定）
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/dc68232480ec0c5195115ffa7de8db9d.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc68232480ec0c5195115ffa7de8db9d.png)'
- en: Radial Treemap DataFrame
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Radial Treemap DataFrame
- en: Finally, let’s see what a count based version looks like that ignores the group
    values.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看一个忽略组值的基于计数的版本是什么样的。
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/820948895c92dda17bec3fc16f4dc318.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/820948895c92dda17bec3fc16f4dc318.png)'
- en: Radial Treemap using group counts as areas via vizmath, rendered with Matplotlib
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组计数作为区域的 Radial Treemap 通过 vizmath 渲染，使用 Matplotlib
- en: Tableau Public Implementation
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tableau Public 实现
- en: In this section, I’ll present a tutorial for implementing my Radial Treemap
    visualization in Tableau Public (v 2023.3.0) along with some fun interaction capabilities.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我将展示如何在 Tableau Public (v 2023.3.0) 中实现我的 Radial Treemap 可视化，并介绍一些有趣的交互功能。
- en: 'To get started, let’s add a couple more groups and values to our prior example
    with python and output the data to a csv file to use with Tableau Public. First,
    create a DataFrame with 3 categorical columns and one numerical column:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请向我们之前的示例中添加更多的组和值，并将数据输出到 csv 文件中以供 Tableau Public 使用。首先，创建一个包含 3 个类别列和一个数值列的
    DataFrame：
- en: '[PRE7]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we’ll use vizmath to create a Radial Treemap chart and legend, combine
    both into one file, and output the drawing information to a csv:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 vizmath 创建 Radial Treemap 图表和图例，将两者合并到一个文件中，并将绘图信息输出到 csv：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Import the file into Tableau using the ***Text file*** option, navigate to
    ***Sheet 1***, and create these parameters and calculated columns that we’ll use
    to draw the chart and legend:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ***文本文件*** 选项将文件导入 Tableau，导航到 ***Sheet 1***，并创建这些参数和计算字段，我们将使用它们绘制图表和图例：
- en: 'Create parameters (select “Create Parameter…” from the hamburger dropdown menu
    under the Data tab on the left):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建参数（从左侧“数据”标签下的汉堡菜单中选择“创建参数…”）：
- en: '***[Chart Level]***: {Integer, Range, Minimum: 1, Maximum: 3, Step size: 3}'
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Chart Level]***: {整数, 范围, 最小值: 1, 最大值: 3, 步长: 3}'
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Legend Level]***: {Integer, Range, Minimum: 1, Maximum: 3, Step size: 3}'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Legend Level]***: {整数, 范围, 最小值: 1, 最大值: 3, 步长: 3}'
- en: 'Create calculated columns (from the same menu under “Create Calculated Field…”):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 创建计算字段（从相同菜单下选择“创建计算字段…”）：
- en: '***[rad_treemap]***: if [type] = ‘chart’ and [Level] = [Chart Level] then MAKEPOINT([Y],[X])
    else null end'
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[rad_treemap]***: 如果 [type] = ‘chart’ 且 [Level] = [Chart Level]，则 MAKEPOINT([Y],[X])
    否则为 null 结束'
- en: ''
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[rad_treemap_legend]***: if ([type] = ‘legend’ and [Level] = [Legend Level])
    then MAKEPOINT([Y],[X]) else null end'
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[rad_treemap_legend]***: 如果 ([type] = ‘legend’ 且 [Level] = [Legend Level])，则
    MAKEPOINT([Y],[X]) 否则为 null 结束'
- en: ''
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[rad_treemap_lines]***: if [type] = ‘chart’ and [Level] <= [Chart Level]
    then MAKEPOINT([Y],[X]) else null end'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[rad_treemap_lines]***: 如果 [type] = ‘chart’ 且 [Level] <= [Chart Level]，则
    MAKEPOINT([Y],[X]) 否则为 null 结束'
- en: 'Start by dragging ***[radial_treemap]*** to ***Detail*** under ***Marks***
    to generate the first map layer and adjust these options by right clicking in
    the map area and selecting ***Background Layer***s:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将***[radial_treemap]***拖动到***标记***下的***详细信息***中，以生成第一个地图层，然后右键点击地图区域，选择***背景层***来调整这些选项：
- en: Unselect all ***Background Map Layers*** (Base, Land Cover, etc.)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消选择所有***背景地图层***（基础、土地覆盖等）。
- en: Now right click in the map area and select ***Map Options*** and unselect all
    of the options
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在地图区域右键单击，选择***地图选项***并取消选择所有选项。
- en: 'Close out of ***Background Layers*** and continue with the following steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭***背景层***并继续以下步骤：
- en: Drag ***[Group]*** to ***Detail*** under ***Marks***
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将***[Group]***拖到***标记***下的***详细信息***中。
- en: Under the ***Marks*** dropdown menu select ***Polygon*** (don’t worry if it
    looks strange at this point)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在***标记***下拉菜单中选择***多边形***（如果此时看起来有些奇怪也不用担心）。
- en: Drag ***[Path]*** to ***Path*** under ***Marks*** and right click on what’s
    now ***SUM(Path)*** and select ***Dimension***
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将***[Path]***拖动到***标记***下的***路径***中，右键点击现在的***SUM(Path)***并选择***维度***。
- en: Drag ***[Value]*** to ***Color*** and repeat the process for converting it to
    ***Dimension***
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将***[Value]***拖动到***颜色***中，并重复将其转换为***维度***的过程。
- en: 'Under ***Color*** select “Edit Colors…” and configure with the following options:
    {Reversed, Advanced: (Start: 0, End: 10)}'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在***颜色***下选择“编辑颜色…”，并配置以下选项：{反向，高级：（起始：0，结束：10）}
- en: Hit OK and adjust the opacity to 50% under ***Color***
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击确定，然后在***颜色***下将不透明度调整为50%。
- en: 'Now the structure of the Radial Treemap chart section should be in view. Let’s
    add another layer to enhance the color using items from the first level of the
    hierarchy. Start by adding some new calculated columns:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，径向树图的结构应该可见。让我们添加另一个层级，以使用层级的第一级项来增强颜色。首先添加一些新的计算列：
- en: '***[Label]***: replace(replace(replace([Group],”’”,’’),’(‘,’’),’)’,’’)'
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Label]***：replace(replace(replace([Group],”’”,’’),’(‘,’’),’)’,’’)'
- en: ''
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Level 1]***: split([Label],’,’,1)'
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Level 1]***：split([Label],’,’,1)'
- en: ''
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Level 2]***: split([Label],’,’,2)'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Level 2]***：split([Label],’,’,2)'
- en: ''
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Level 3]***: split([Label],’,’,3)'
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Level 3]***：split([Label],’,’,3)'
- en: 'Now let’s use ***[Level 1]*** for coloring:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用***[Level 1]***进行着色：
- en: 'Drag ***[radial_treemap]*** into the map area and a pop-up will appear: ***Add
    a Marks Layer*** - drop the pill into this to create a new map layer'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将***[radial_treemap]***拖动到地图区域，弹出窗口将显示：***添加标记层*** - 将该图标拖入此处以创建新的地图层。
- en: Repeat the steps from above except now use ***[Level 1]*** for the ***Color***
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复上述步骤，但现在使用***[Level 1]***作为***颜色***。
- en: Under ***Color***, select a black border and set the opacity to 50%
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在***颜色***下选择黑色边框，将不透明度设置为50%。
- en: 'Let’s wrap up the chart section by adding some lines with different thicknesses
    to indicate where the hierarchical boundaries are:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加一些不同厚度的线条来总结图表部分，以指示层级边界的位置：
- en: Repeat the prior steps with ***[rad_treemap_lines]*** as the map layer, ***Line***
    as the chart type under the ***Marks*** dropdown menu, and ***Color*** set to
    medium black
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用***[rad_treemap_lines]***作为地图层，***线条***作为***标记***下拉菜单中的图表类型，并将***颜色***设置为中等黑色，重复前面的步骤。
- en: Drag ***[Level]*** to ***Size***under ***Marks*** and convert to ***Dimension***
    and ***Discrete***
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将***[Level]***拖动到***标记***下的***大小***，并转换为***维度***和***离散***。
- en: On the right-hand side of the chart under the size section labeled ***Level***,
    select the dropdown from the upper right corner which shows up upon hovering over
    the container and select “***Edit Sizes…***”
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图表右侧的大小部分标记为***Level***，从容器右上角显示的下拉菜单中选择“***编辑大小…***”。
- en: Select the ***Reversed*** option, hit OK, and right-click on the nulls pill
    at the bottom right of the chart and select ***Hide Indicator*** to hide the nulls
    label
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择***反向***选项，点击确定，然后右键单击图表右下角的空值图标，选择***隐藏指示器***以隐藏空值标签。
- en: 'Now the chart section is in place and should look similar to the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图表部分已就位，应与下图类似：
- en: '![](../Images/4657675f701ddc381b8c5041ba8b8775.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4657675f701ddc381b8c5041ba8b8775.png)'
- en: 'Let’s add a legend next to compliment the chart:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个图例来补充图表：
- en: Repeat all of the same steps as before to add two chart layers using ***[rad_treemap_legend]***
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用***[rad_treemap_legend]***添加两个图表层，重复之前的所有步骤。
- en: 'To finalize the visualization, let’s add some label layers. Start by adding
    these parameters and calculated columns to position the labels:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成可视化，让我们添加一些标签层。首先添加这些参数和计算列来定位标签：
- en: 'Create parameters:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 创建参数：
- en: '***[Show Labels Chart]***: {Boolean, Aliases: (True: Yes, False: No)}'
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Show Labels Chart]***: {布尔值，别名：（True: Yes，False: No）}'
- en: ''
  id: totrans-175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Show Labels Legend]***: {Boolean, Aliases: (True: Yes, False: No)}'
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[Show Labels Legend]***: {布尔值，别名：（True: Yes，False: No）}'
- en: 'Create calculated columns:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 创建计算列：
- en: '***[point_angle]***: atan2([X], [Y])*180/pi() — 90'
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[point_angle]***: atan2([X]，[Y])*180/pi() — 90'
- en: ''
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_angle]***: {fixed [Type], [Group]: avg([point_angle])}'
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[group_angle]***: {固定 [Type]，[Group]：avg([point_angle])}'
- en: ''
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[point_radius]***: [X]/cos([point_angle]*pi()/180)'
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[point_radius]***: [X]/cos([point_angle]*pi()/180)'
- en: ''
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_radius_min]***: {fixed [Type], [Group]: min([point_radius])}'
  id: totrans-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[group_radius_min]***: {固定 [Type]，[Group]：min([point_radius])}'
- en: ''
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_radius_max]***: {fixed [Type], [Group]: max([point_radius])}'
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[group_radius_max]***: {固定 [Type]，[Group]：max([point_radius])}'
- en: ''
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_radius]***: ([group_radius_max]-[group_radius_min])/2+[group_radius_min]'
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[group_radius]***: ([group_radius_max]-[group_radius_min])/2+[group_radius_min]'
- en: ''
  id: totrans-189
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[chart_group_legend]***: if [Type] = ‘chart’ and [Level] = [Chart Level]
    and [Show Labels Chart] then'
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[chart_group_legend]***: 如果 [Type] = ‘chart’ 且 [Level] = [Chart Level] 且
    [Show Labels Chart] 则'
- en: MAKEPOINT(
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MAKEPOINT(
- en: -[group_radius]*sin(([group_angle])*pi()/180),
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -[group_radius]*sin(([group_angle])*pi()/180),
- en: '[group_radius]*cos(([group_angle])*pi()/180)'
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[group_radius]*cos(([group_angle])*pi()/180)'
- en: ) else null end
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ) 否则为空结束
- en: ''
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[legend_group_legend]***: if [Type] = ‘legend’ and [Level] = [Legend Level]
    and [Show Labels Legend] then'
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[legend_group_legend]***: 如果 [Type] = ‘legend’ 且 [Level] = [Legend Level]
    且 [Show Labels Legend] 则'
- en: MAKEPOINT(
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MAKEPOINT(
- en: -[group_radius]*sin(([group_angle])*pi()/180),
  id: totrans-198
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -[group_radius]*sin(([group_angle])*pi()/180),
- en: '[group_radius]*cos(([group_angle])*pi()/180)'
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[group_radius]*cos(([group_angle])*pi()/180)'
- en: ) else null end
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ) 否则为空结束
- en: 'Now we’ll add a final two layers to complete the Radial Treemap:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加最后两层以完成 Radial Treemap：
- en: Add ***[chart_group_legend]*** as a map layer and add ***[Group]*** to ***Detail***
    under ***Marks***
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 ***[chart_group_legend]*** 作为地图图层添加，并将 ***[Group]*** 添加到 ***Marks*** 下的 ***Detail***。
- en: Change the chart type to ***Circle*** and drag ***[Label]*** to ***Label***
    under ***Marks***
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图表类型更改为 ***Circle***，并将 ***[Label]*** 拖到 ***Marks*** 下的 ***Label***。
- en: Adjust the ***Color*** to white with a opacity of 50% and no border or halo,
    and drag slider under ***Size*** to right of center
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 ***Color*** 调整为50%不透明的白色，并没有边框或光晕，将滑块拖动到 ***Size*** 的中心右侧。
- en: Under ***Label***, click on the ***[…]*** menu next to ***Text***, and in the
    dialog box select the text and change the size to {8 with a Bold font} and hit
    OK
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 ***Label*** 下，点击 ***[…]*** 菜单旁的 ***Text***，在对话框中选择文本，将大小更改为 {8，粗体}，然后点击 OK。
- en: Back on the main ***Label*** menu, select ***Allow labels to overlap other marks***
    and adjust the ***Alignment*** to {center, center}
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回主 ***Label*** 菜单，选择 ***Allow labels to overlap other marks***，并将 ***Alignment***
    调整为 {center，center}。
- en: Toggle the parameter ***[Show Labels Chart]*** to False for now and repeat the
    above steps to add a label to the legend using ***[legend_group_legend]***
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前将参数 ***[Show Labels Chart]*** 切换为 False，并重复上述步骤使用 ***[legend_group_legend]***
    向图例添加标签。
- en: To complete ***Sheet 1***, add ***[ATTR(Label)]*** to the Tooltips by dragging
    ***[Label]*** to the ***Tooltip*** under ***Marks*** for the applicable layers
    and selecting ***Attribute*** by right-clicking on the pill. Add ***[ATTR(Items)]***
    and ***[ATTR(Value)]*** as well, in the same way.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成 ***Sheet 1***，通过将 ***[Label]*** 拖到 ***Marks*** 下的 ***Tooltip*** 中的 ***Attribute***，并右键点击该
    pill 选择 ***Attribute***，将 ***[ATTR(Label)]*** 添加到 Tooltips 中。以相同方式添加 ***[ATTR(Items)]***
    和 ***[ATTR(Value)]***。
- en: 'To assist with interactively exploring the data in the Radial Treemap, let’s
    create a simple table bar graph:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助交互式探索 Radial Treemap 中的数据，让我们创建一个简单的表格条形图。
- en: Create a new worksheet using the first plus sign on the bottom panel to create
    ***Sheet 2***
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用底部面板上的第一个加号创建新工作表，生成 ***Sheet 2***。
- en: In the new sheet, drag ***[Level 1]***, ***[Level 2]***, ***[Level 3]***, and
    ***[Label]*** to ***Rows***
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在新工作表中，将 ***[Level 1]***、***[Level 2]***、***[Level 3]*** 和 ***[Label]*** 拖到
    ***Rows***。
- en: Now drag ***[Count]*** to Rows and change to ***Dimension*** and ***Discrete***
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在将 ***[Count]*** 拖到 Rows 并更改为 ***Dimension*** 和 ***Discrete***。
- en: Do the same with ***[Value]***, change the chart type to ***Bar***, and also
    drag ***[Value]*** to ***Color*** and ***Size*** under ***Marks***
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 ***[Value]*** 进行相同操作，将图表类型更改为 ***Bar***，并将 ***[Value]*** 拖到 ***Marks*** 下的
    ***Color*** 和 ***Size***。
- en: Use the same color scheme for ***[Value]*** as we did with the prior Sheet and
    add a black border with 80% opacity
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 ***[Value]*** 使用与之前工作表相同的颜色方案，并添加80%不透明度的黑色边框。
- en: Rename ***[Count]*** to ***[Items]*** by right-clicking on the column and selecting
    ***Rename***
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键点击列并选择 ***Rename***，将 ***[Count]*** 重命名为 ***[Items]***。
- en: Finally, let’s pull the two Sheets together in a dashboard. After creating the
    dashboard and adding the sheets, setup an action under ***Actions*** in the ***Dashboard***
    top-menu. Click the ***Add Action*** dropdown and select ***Highlight***. Under
    ***Targeted Highlighting*** select ***Selected Fields*** and select the ***[Label]***
    and ***[ATTR(Label)]*** fields. Finally select the ***Hover*** option under the
    ***Run action on*** menu on the right and now the entire dashboard will highlight
    off of hovering over each level of the hierarchy in the table or chart!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将两个工作表汇总到仪表盘中。在创建仪表盘并添加工作表后，在***仪表盘***顶部菜单中的***操作***下设置一个操作。点击***添加操作***下拉菜单，选择***高亮显示***。在***目标高亮显示***下选择***选择字段***并选择***[标签]***和***[ATTR(标签)]***字段。最后在右侧的***运行操作于***菜单下选择***悬停***选项，现在当鼠标悬停在表格或图表中的每一层级上时，整个仪表盘将高亮显示！
- en: 'After adding the parameters to the dashboard and orienting everything in an
    organized way, here’s our new dashboard in Tableau Public:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 添加参数到仪表盘并以有序的方式进行定位后，这里是我们在Tableau Public上的新仪表盘：
- en: '![](../Images/431f3349c24781572635094ea7f9af58.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/431f3349c24781572635094ea7f9af58.png)'
- en: Conclusion
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I’ve covered a brief history of the Treemap and what I call
    the “Radial Treemap”, a visual tool I developed for examining hierarchical relationships
    in a circular layout that offers flexibility in terms of donut slicing, stacking,
    legends, and synergy with other radial chart types. It can be used in a variety
    of ways to derive new insights from your data, and I hope you’ve found this visualization
    technique inspiring and full of potential!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我简要介绍了树图的历史以及我称之为“径向树图”的内容，这是一种我开发的可视化工具，用于检查循环布局中的层级关系，提供了在甜甜圈切片、堆叠、图例和与其他径向图表类型的协同方面的灵活性。它可以以多种方式使用，从数据中得出新的见解，希望你发现这种可视化技术充满启发性和潜力！
- en: 'If you’re looking for inspiration with other radial chart types, check out
    my Multi-Chord Diagram:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对其他径向图表类型感兴趣，查看我的多弦图：
- en: '[](/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b?source=post_page-----7b47785191da--------------------------------)
    [## Introducing the Multi-Chord Diagram: Visualizing Complex Set Relationships'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b?source=post_page-----7b47785191da--------------------------------)
    [## 介绍多弦图：可视化复杂的集合关系'
- en: Background
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 背景
- en: towardsdatascience.com](/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b?source=post_page-----7b47785191da--------------------------------)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b?source=post_page-----7b47785191da--------------------------------)
- en: Let me know if you come across any fun or professional use cases, and thanks
    for reading!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现任何有趣或专业的使用案例，请告诉我，谢谢阅读！
- en: '**References**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: All images in this article were created by the author unless otherwise stated.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的所有图像均由作者创建，除非另有说明。
- en: '[1] Ben Shneiderman, “[Tree visualization with tree-maps: 2-d space-filling
    approach](https://dl.acm.org/doi/10.1145/102377.115768)” (1992), ACM Transactions
    on Graphics'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 本·施奈德曼， “[使用树图的树状可视化：二维空间填充方法](https://dl.acm.org/doi/10.1145/102377.115768)”
    (1992)，《ACM图形学报告》'
- en: '[2] Mark Bruls, Kees Huizing, Jarke J. van Wijk, “[Squarified Treemaps](http://www.win.tue.nl/~vanwijk/stm.pdf)”
    (2000), Data Visualization 2000: Proceedings of the Joint EUROGRAPHICS and IEEE
    TCVG Symposium on Visualization in Amsterdam, The Netherlands, May 29–30, 2000'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 马克·布鲁尔斯，凯斯·惠辛，贾尔克·J·范·维克，“[方形树图](http://www.win.tue.nl/~vanwijk/stm.pdf)”
    (2000)，《数据可视化2000：欧洲图形学和IEEE TCVG联合会议论文集》，荷兰阿姆斯特丹，2000年5月29-30日'
- en: '[3] Benjamin Bederson, Ben Shneiderman, Martin Wattenberg, “[Ordered and Quantum
    Treemaps: Making Effective Use of 2D Space to Display Hierarchies](http://www.cs.umd.edu/hcil/trs/2001-18/2001-18.pdf)”
    (2002), ACM Transactions on Graphics'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 本杰明·贝德森，本·施奈德曼，马丁·瓦滕贝格，“[有序和量子树图：有效利用二维空间显示层级结构](http://www.cs.umd.edu/hcil/trs/2001-18/2001-18.pdf)”
    (2002)，《ACM图形学报告》'
- en: '[4] Ben Shneiderman, Martin Wattenberg, “[Ordered Treemap Layouts](http://cvs.cs.umd.edu/~ben/papers/Shneiderman2001Ordered.pdf)”
    (2001), INFOVIS pages 73–78'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 本·施奈德曼，马丁·瓦滕贝格，“[有序树图布局](http://cvs.cs.umd.edu/~ben/papers/Shneiderman2001Ordered.pdf)”
    (2001)，《INFOVIS》第73-78页'
- en: '[5] Michael Balzer, Oliver Deussen, “[Voronoi Treemaps](https://graphics.uni-konstanz.de/publikationen/Balzer2005VoronoiTreemaps/Balzer2005VoronoiTreemaps.pdf)”
    (2005), IEEE Symposium on Information Visualization'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] 迈克尔·巴尔泽，奥利弗·德伊森，“[Voronoi树图](https://graphics.uni-konstanz.de/publikationen/Balzer2005VoronoiTreemaps/Balzer2005VoronoiTreemaps.pdf)”
    (2005)，IEEE信息可视化研讨会'
- en: '[6] Brian Ondov, Nicholas Bergman, Adam Phillippy, “[Interactive metagenomic
    visualization in a Web browser](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3190407/)”
    (2011), BMC Bioinformatics'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] 布莱恩·昂多夫，尼古拉斯·伯格曼，亚当·菲利皮，“[在网页浏览器中的交互式宏基因组可视化](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3190407/)”（2011年），BMC
    生物信息学'
- en: '[7] Federal Aviation Administration, “[Aircraft Registration Database](https://www.faa.gov/licenses_certificates/aircraft_certification/aircraft_registry/releasable_aircraft_download)”
    (2020), United States Department of Transportation'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[7] 联邦航空管理局，“[飞机登记数据库](https://www.faa.gov/licenses_certificates/aircraft_certification/aircraft_registry/releasable_aircraft_download)”（2020年），美国运输部'
