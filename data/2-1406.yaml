- en: 'Learning Python for Data Science On-the-Job Part 1: Philosophy'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在职学习 Python 数据科学 第1部分：哲学
- en: 原文：[https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041](https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041](https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041)
- en: Practical advice and philosophy on how to become a proficient Data Scientist
    without formal education
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于如何在没有正式教育的情况下成为一名熟练数据科学家的实用建议和理念
- en: '[](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)[![Nicholas
    Lewis](../Images/e1a473d6da5f4ae1cc569f30b08acde3.png)](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)
    [Nicholas Lewis](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)[![Nicholas
    Lewis](../Images/e1a473d6da5f4ae1cc569f30b08acde3.png)](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)
    [Nicholas Lewis](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)
    ·8 min read·Jan 14, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)
    ·8 分钟阅读·2023年1月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f6156bd577abc49b42723a0ea50db58b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6156bd577abc49b42723a0ea50db58b.png)'
- en: Photo by [Fatos Bytyqi](https://unsplash.com/@fatosi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Fatos Bytyqi](https://unsplash.com/@fatosi?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: With data science becoming more prevalent in every industry, it’s interesting
    to note how many self-taught programmers are in the workforce. Many people are
    seeking a mid-career shift, looking to supplement their expertise with the powerful
    tool of data science, or are simply interested in what all the hype is about.
    Although I went back to school for some formal education in data science, I never
    took a programming course in my undergraduate studies, and I worked in a data
    science job for 2 years before going back to school; I would definitely consider
    myself a self-taught programmer! It’s been nearly 10 years since I started my
    first research position job using Matlab and Python to explore optimization techniques
    in systems biology applications. As I’ve been thinking back, I thought I’d share
    some of the things that I tried — some that worked and some that didn’t — that
    helped me to learn programming in Python (and Matlab) and data science on-the-job.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据科学在各个行业中的普及，值得注意的是，许多自学成才的程序员已经进入了职场。很多人正在寻求职业转型，希望用数据科学这一强大工具来补充自己的专业知识，或者只是对所有的炒作感到好奇。尽管我回到学校接受了一些正式的数据科学教育，但在本科阶段我从未参加过编程课程，在回到学校之前我已经在数据科学领域工作了2年；我绝对会认为自己是一个自学成才的程序员！自从我开始使用
    Matlab 和 Python 探索系统生物学应用中的优化技术以来，已经快10年了。回顾过去，我想分享一些我尝试过的东西——有些成功了，有些失败了——这些都帮助我在工作中学习
    Python（和 Matlab）编程以及数据科学。
- en: This article is Part 1 in a 2-part series about learning data science without
    formal education. Part 1 is a reflection of my experience with some practical
    advice on things to try and maybe even avoid (you’ll find out that I don’t like
    YouTube tutorials!). [Part 2](https://nrlewis929.medium.com/learning-python-for-data-science-on-the-job-part-2-practice-b4ece80488da)
    takes a simple linear regression problem and works it in both Excel and Python,
    teaching some basic Python syntax and comparing the benefits and drawbacks of
    each method. Hope you enjoy!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是关于在没有正式教育情况下学习数据科学的两部分系列文章中的第一部分。第1部分是我经验的反思，提供了一些实践建议，包括尝试和可能需要避免的事项（你会发现我不喜欢
    YouTube 教程！）。[第2部分](https://nrlewis929.medium.com/learning-python-for-data-science-on-the-job-part-2-practice-b4ece80488da)
    通过一个简单的线性回归问题，分别在 Excel 和 Python 中进行操作，讲解了一些基本的 Python 语法，并比较了每种方法的优缺点。希望你喜欢！
- en: Getting Started
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: I still vividly remember my first week as a freshman research assistant, surrounded
    by grad students who ate, breathed, and dreamed in code. I didn’t understand how
    anyone could understand something as simple as `print('Hello World!')`. Why did
    that work? And how in the world was I supposed to do more advanced things?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然清楚地记得我作为新生研究助理的第一周，周围都是以代码为生、为梦的研究生。我不明白为什么有人能理解像`print('Hello World!')`这样的简单代码。这是为什么？我究竟要如何做更多高级的事情？
- en: I quickly learned that programming is, basically, logical ideas expressed with
    specific words and structure to produce an outcome. It was the same as typing
    things into my calculator, only more powerful. The only hard part is learning
    the syntax, or the keywords and characters that translate that logic in your head
    into an actionable task by the computer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我很快意识到，编程基本上是用特定的词汇和结构表达的逻辑思想，以产生结果。它与在计算器中输入内容是一样的，只是更强大。唯一困难的部分是学习语法，即将你脑中的逻辑转换为计算机可执行任务的关键字和字符。
- en: 'Here are a few things that worked for me to learn syntax:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我学习语法时的一些有效方法：
- en: Google is your best friend! To learn how to do a `for` loop, just Google “Python
    for loop example.” You’ll probably see some great tutorials that walk you through
    exactly which keywords and characters to use. As your questions get more advanced,
    you’ll discover Stack Overflow, a forum for people to ask questions and get answers
    from the community. You’ll see lots of creative ways to do the same thing there,
    and you’ll eventually develop a sense for commonly accepted practices.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 是你最好的朋友！要学习如何做一个`for`循环，只需 Google “Python for loop example。”你可能会看到一些很好的教程，详细讲解使用哪些关键字和字符。随着你问题的深入，你会发现
    Stack Overflow，这是一个人们提出问题并从社区获取答案的论坛。你会看到很多创造性的方法来做同样的事情，并最终培养对常见做法的敏感性。
- en: Treat Python as something you’re familiar with to start. For example, we’ve
    probably all used a calculator, so start by just putting in equations like you
    would a calculator. Then start adding complexity, like assigning variables, printing
    results, and increasing the computational complexity. The exercise in Part 2 of
    this series is an excellent in-depth case study in this.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从你熟悉的事物开始对待 Python。例如，我们可能都用过计算器，因此首先就像使用计算器一样输入方程式。然后开始增加复杂性，比如分配变量、打印结果和提高计算复杂性。本系列第
    2 部分的练习是一个很好的深入案例研究。
- en: Learn to read documentation. Unfortunately, there’s no good standard of how
    people write documentation, and some is done really poorly. But any time you start
    using a new package (such as pandas or numpy), if you have a question about how
    to do something, go to their documentation first and try to figure it out before
    you Google it.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会阅读文档。不幸的是，没有一个好的标准来规范人们编写文档的方式，有些文档写得非常差。但是每当你开始使用一个新包（如 pandas 或 numpy）时，如果你对如何做某事有疑问，首先查看它们的文档，然后再
    Google 查找答案。
- en: 'A few other things about getting started:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于入门的其他几点：
- en: Be sure to comment your code! That might be the first syntax you should learn.
    Google “how to comment code in Python.” Comments are lines of code that aren’t
    executed, so you can explain your logic and rationale for what you write. Go back
    to your earlier code at times and recognize your improvement.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保对你的代码进行注释！这可能是你应该学习的第一个语法。Google “how to comment code in Python。”注释是不会被执行的代码行，所以你可以解释你写代码的逻辑和理由。不时回顾你早期的代码，认识到你的进步。
- en: Get good at debugging. This can be as simple as adding `print` statements so
    you can see what your program is doing, and see if it matches what you expect
    it to be doing.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟练调试。这可以简单到添加`print`语句，以便你能看到程序正在做什么，并检查是否符合你的预期。
- en: Read! A ton! When I started my data science job, I was rusty on Python, and
    had never done any data science. So I spent the first hour of every work day reading
    how-tos and working through side projects. This was valuable just so that I could
    understand what options are out there. As you read, think of how what you’re reading
    applies to your work projects. I found tons of inspiration for innovative approaches
    to my work that were triggered by ideas from my readings (see, for example, my
    series on [emulating PID controllers](/emulating-a-pid-controller-with-long-short-term-memory-part-1-bb5b87165b08)).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读！大量阅读！当我开始我的数据科学工作时，我对 Python 生疏，并且从未进行过数据科学。所以我每天工作开始的第一个小时都会阅读教程并进行副项目实践。这对于我了解有哪些选项非常有价值。在阅读的同时，考虑你所阅读的内容如何应用到你的工作项目中。我发现了很多创新方法的灵感，这些灵感是通过阅读中的想法激发的（例如，参见我关于[模拟
    PID 控制器](/emulating-a-pid-controller-with-long-short-term-memory-part-1-bb5b87165b08)的系列）。
- en: There are tons of platforms to run Python code. Currently, the best for beginners
    (and advanced users who are trying out new ideas) is Jupyter notebook. If you
    are learning in a classroom setting, your instructor is most likely going to use
    a Jupyter notebook, because it is more intuitive and has built-in features that
    a simple text file doesn’t have.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多平台可以运行 Python 代码。目前，对于初学者（以及那些尝试新想法的高级用户）来说，Jupyter notebook 是最好的选择。如果你在课堂上学习，你的老师很可能会使用
    Jupyter notebook，因为它更直观，并且具有简单文本文件所没有的内置功能。
- en: Using Introductory Tutorials and Materials
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用入门教程和材料
- en: In my opinion, generic tutorials or YouTube videos aren’t worth the time. They
    don’t work for me, and they’re too generic to actually be helpful. If you’re completely
    new to programming, they *might* be useful just to start wrapping your head around
    how syntax works. If you do use them, you have to be active and code along with
    them. Most of us aren’t able to effectively learn just be watching and absorbing…you
    might watch a 4 hour tutorial, but if you’re not actively engaged, you probably
    won’t be any better of a coder after it’s over.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，一般的教程或 YouTube 视频不值得花时间。它们对我不起作用，而且过于笼统，实际上并不具备帮助性。如果你完全是编程新手，它们*可能*对你了解语法的运作方式有些帮助。如果你使用这些教程，你必须积极参与，边看边写代码。我们大多数人无法仅仅通过观看和吸收来有效学习……你可能会观看一个
    4 小时的教程，但如果你没有积极参与，教程结束后你可能不会成为一个更好的程序员。
- en: I learned coding by immersing myself in projects that I cared about. I would
    get some starter code that I would then go through line-by-line to understand.
    I’d add `print` statements to get a better idea of what was going on. Then I’d
    start making little tweaks and customizations. Even now, I almost never start
    writing code from complete scratch; rather, I’ll find some similar code (usually
    that I’ve written before, but as a starter, feel free to start with online resources),
    copy and paste it, then customize it to my particular project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过沉浸在我关心的项目中来学习编程。我会获取一些起始代码，然后逐行阅读以理解它。我会添加`print`语句来更好地了解发生了什么。接着，我会开始进行一些小的调整和定制。即使现在，我几乎从不从头开始编写代码；而是会找到一些类似的代码（通常是我之前写过的，但作为起点，可以从在线资源开始），复制粘贴，然后根据我的特定项目进行定制。
- en: 'Starting with a project rather than tutorial does two things: first, it gives
    you something that you care about doing, so you’re more invested (Towards Data
    Science is really good for finding project walk-throughs). It’s probably also
    a lot more relevant to what you’ll be doing later on in your job. Secondly, it
    gives you the opportunity to customize code to do what you want, rather than just
    spit out something that millions of people have already done. It’s the difference
    between doing a school assignment with an answer in the back of the book, and
    doing an open-ended work project with no single right answer. You’ll be able to
    recognize that there are different ways of doing the same thing. Eventually, you’ll
    start to recognize more efficient ways of coding, but for now, it’s more about
    getting reps in.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个项目开始而不是教程有两个好处：首先，它给你一个你关心的任务，因此你会更投入（Towards Data Science 对于寻找项目演练非常好）。这也可能与你以后工作中要做的事情更相关。其次，它给你提供了定制代码以实现你想要的功能的机会，而不是仅仅生成数百万已经完成的代码。就像做一个有答案的学校作业和做一个没有单一正确答案的开放式工作项目之间的区别。你将能够认识到完成同一任务的不同方式。最终，你会开始认识到更高效的编码方法，但现在，更重要的是多加练习。
- en: Start with the Basics
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从基础开始
- en: The simple truth is that no one is going to become a master in Python overnight.
    After 10 years, there’s still a lot that I’m learning. But something that will
    really help is to start with basic functionality in your code first, then add
    complexity. This is not only a good framework for beginner coders, but even advanced
    coders. In fact, as I was going through a recent [job search](/my-data-science-job-search-6deb4117e7b5),
    one of the most valuable pieces of feedback I got from a coding challenge was
    to start with the basic functionality before I started trying to tackle edge cases.
    It can be paralyzing to think of how to write an entire script that works perfectly
    (and, I might argue, impossible to do this), but with just a little practice,
    you can write a perfectly functional `for` loop or dictionary that gets most of
    what you need done.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的事实是，没有人能在一夜之间成为 Python 大师。即使经过 10 年，我仍在不断学习。但是，有一件事真的很有帮助，那就是先从代码中的基本功能开始，然后再增加复杂性。这不仅是初学者编码的好框架，对高级编码者也是如此。实际上，当我最近进行[求职](https://my-data-science-job-search-6deb4117e7b5)时，从一次编程挑战中得到的最有价值的反馈之一就是在尝试解决边界情况之前，先从基本功能开始。想到如何编写一个完美工作的整个脚本可能会让人感到无从下手（我可能会争辩说，这几乎是不可能的），但只需稍加练习，你就可以编写一个完全正常的`for`循环或字典来完成大部分任务。
- en: What do I mean by this? Consider a classic coding challenge of [converting Roman
    numerals to integers](https://www.geeksforgeeks.org/python-program-for-converting-roman-numerals-to-decimal-lying-between-1-to-3999/).
    There are some very logical rules to follow, but rather than trying to account
    for all of them at once, start with the basic, then add complexity. Start by writing
    some code that translates each individual Roman numeral to an integer (such as
    X = 10). Then figure out how to program the case of a larger value followed by
    a smaller value (such as XI = 11). Finally, code for the case where a larger value
    is preceeded by a smaller value (such as IX = 9).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我说的是什么意思？考虑一个经典的编程挑战——[将罗马数字转换为整数](https://www.geeksforgeeks.org/python-program-for-converting-roman-numerals-to-decimal-lying-between-1-to-3999/)。有一些非常合理的规则，但与其试图一次性考虑所有规则，不如从基础开始，然后增加复杂性。首先编写一些代码，将每个罗马数字翻译为整数（例如
    X = 10）。然后弄清楚如何编程处理一个较大值后跟一个较小值的情况（例如 XI = 11）。最后，编写代码处理一个较大值前面有一个较小值的情况（例如 IX
    = 9）。
- en: Developing Confidence
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发展自信
- en: 'Whether it’s teaching someone a language, an instrument, or any other skill,
    the thing that I always tell a student is this: have confidence! You’re not *just*
    learning violin, you play it. You’re not *just* learning Russian, you speak it.
    The same goes for this: you’re not *just* learning programming, you already do
    it. Sure, you’re continually developing and learning, and perhaps at a different
    skill level. But even as a beginner violinist, I would still claim that I played
    violin, even though I was nowhere near the level I am today. Same with programming.
    Sure, I know more than I did 10 years ago, and I’ll know more than I do now 10
    years from now, but that doesn’t diminish the fact that I am a programmer, just
    as I was 10 years ago when I started. The key behind this mentality is that it
    gives you confidence to put yourself out there, to tackle hard problems (or speak
    the language or perform on the instrument). And we learn best by doing, by challenging
    ourselves, and by having confidence. Yes, you should absolutely solicit feedback
    as much as possible, but don’t be paralyzed by fear of making mistakes. Don’t
    give yourself excuses to *not* take on an assignment just because you don’t know
    how to do it. The whole point of this is that you’re learning, and quite possibly
    even learning on the job.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是教别人一门语言、一种乐器，还是任何其他技能，我总是告诉学生这一点：要有自信！你不是*仅仅*在学习小提琴，你是在演奏它。你不是*仅仅*在学习俄语，你是在说它。编程也是如此：你不是*仅仅*在学习编程，你已经在做了。当然，你在不断发展和学习，也许在不同的技能水平上。但即使作为一个初学的小提琴手，我仍然会说我在演奏小提琴，尽管那时的水平远不如今天。编程也是一样。虽然我比
    10 年前知道的更多，10 年后我会比现在知道得更多，但这并没有减少我现在作为程序员的事实，就像我在 10 年前开始时一样。这种心态的关键在于它让你有信心去展现自己，去解决困难的问题（或说语言或演奏乐器）。我们通过实践、挑战自己、以及拥有自信来学习。是的，你绝对应该尽可能多地寻求反馈，但不要因为害怕犯错而感到瘫痪。不要因为不知道如何做而给自己找借口*不*去接受任务。整个要点在于你正在学习，甚至很可能是在工作中学习。
- en: Case Study and Conclusion
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究和结论
- en: 'When I started my first data science job, I made a goal for myself: I wanted
    to know Python better than I knew Excel. I was a whiz at Excel, but was definitely
    starting to hit the limitations, even with VBA. Most of us are familiar with or
    even experts in Excel; the case study in Part 2 is a fantastic way to get your
    feet wet by working a problem both in Excel and Python. I hope you’ll not only
    be able to see the parallels and pros and cons, but also develop confidence.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始我的第一份数据科学工作时，我给自己设定了一个目标：我想比我对Excel的了解更深入地掌握Python。我在Excel方面非常拿手，但即使是使用VBA，也确实开始遇到一些限制。我们中的大多数人对Excel很熟悉，甚至是专家；第2部分的案例研究是一个绝佳的机会，让你通过在Excel和Python中解决问题来初步涉猎。我希望你不仅能够看到它们的相似之处和优缺点，还能建立起自信。
- en: Hopefully some of this was useful to you. I know we all learn differently, and
    you may try a YouTube tutorial or virtual classroom and feel like it was the most
    valuable thing. The point I want to make is that you *can* learn this valuable
    skill on-the-job, and develop just as much confidence as your peers who had formal
    education in programming. As always,you can connect with me on [LinkedIn](https://www.linkedin.com/in/nicholas-lewis-0366146b/),
    and feel free to follow me on [Towards Data Science](https://nrlewis929.medium.com/)
    to see my regular posts on data science case studies.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些对你有所帮助。我知道我们每个人的学习方式不同，你可能会尝试YouTube教程或虚拟课堂，并觉得它们是最有价值的。我要表达的观点是，你*可以*在工作中学习这一宝贵的技能，并且培养出与那些接受过正式编程教育的同行一样的信心。像往常一样，你可以通过[LinkedIn](https://www.linkedin.com/in/nicholas-lewis-0366146b/)与我联系，也可以随时关注我在[Towards
    Data Science](https://nrlewis929.medium.com/)上的数据科学案例研究定期更新。
