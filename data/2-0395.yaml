- en: Maintain Clean Python Code With Black and GitHub Actions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Black 和 GitHub Actions 维护干净的 Python 代码
- en: 原文：[https://towardsdatascience.com/black-with-git-hub-actions-4ffc5c61b5fe](https://towardsdatascience.com/black-with-git-hub-actions-4ffc5c61b5fe)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/black-with-git-hub-actions-4ffc5c61b5fe](https://towardsdatascience.com/black-with-git-hub-actions-4ffc5c61b5fe)
- en: Nobody wants a messy codebase; few have the patience to clean it
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有人希望代码库凌乱不堪；也很少有人有耐心去清理它
- en: '[](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)
    ·8 min read·Jan 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)
    ·阅读时间 8 分钟·2023 年 1 月 16 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5b6f032c9c15cbfb6fd4451172f5f685.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b6f032c9c15cbfb6fd4451172f5f685.png)'
- en: Like this cleaning robot, we can build an automatic system to clean our Python
    codebase with Black and GitHub Actions. — Photo by [Onur Binay](https://unsplash.com/@onurbinay?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这个清洁机器人一样，我们可以构建一个自动化系统，使用 Black 和 GitHub Actions 来清理我们的 Python 代码库。——照片来自
    [Onur Binay](https://unsplash.com/@onurbinay?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Writing code is hard enough, but ensuring it's well-formatted and easy to read
    can be even more challenging.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码已经足够困难，但确保它的格式良好并且易于阅读则可能更具挑战性。
- en: My coding skills have improved a lot in a decade. But the majority of them are
    not some fancy API usage or anything. It's how I format the code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我的编码技能在十年中有了很大的提升。但大多数并不是一些花哨的 API 使用或其他内容，而是代码的格式化方式。
- en: In my earliest years, I've coded for the outcome. Of course, that's every programmer's
    ultimate goal. But as I progressed, I understood that good coding is much more
    than simply getting things done.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我最早的几年里，我编写代码是为了结果。当然，这也是每个程序员的终极目标。但随着我的进步，我意识到良好的编码远不只是完成任务那么简单。
- en: It wasn't easy to share my code with others and not get a truckload of questions
    to explain them. Other programmers found digesting my code very challenging, even
    with supporting documents and inline comments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与他人分享我的代码并避免一大堆问题并不容易。其他程序员发现理解我的代码非常具有挑战性，即使有支持文档和内联注释。
- en: A programmer's job is not over with a working code.
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序员的工作并不会因为代码运行正常而结束。
- en: Beyond documentation, there's something that makes good code great. And the
    programming community hasn't failed to find what it is.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文档，还有一些因素使得优秀的代码变得更加出色。而编程社区也没有辜负这个发现。
- en: It's how we format our code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们格式化代码的方式。
- en: Python, my favorite programming language, has the easiest syntax. But that doesn't
    warrant everyone who reads your Python code will understand it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python，我最喜欢的编程语言，具有最简单的语法。但这并不意味着每个人都能理解你的 Python 代码。
- en: For this reason, we have a style guide known as PEP 8\. This standard brings
    every programmer to code in the same style. If done correctly, a new programmer
    can spend less time figuring out which line is what.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有一个称为 PEP 8 的风格指南。这个标准使每个程序员都采用相同的编码风格。如果做到正确，新程序员可以减少花费在搞清楚每一行是什么的时间。
- en: Here's a sample code. The first is how I'd have coded it early in my career.
    It gets the job done. It reads a file and trains a model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例代码。第一个是我早期职业生涯中的编写方式。它完成了工作。它读取一个文件并训练一个模型。
- en: '![](../Images/2c014c2f9a9ce335aeaf0e5bd84b8665.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c014c2f9a9ce335aeaf0e5bd84b8665.png)'
- en: Unformatted Python code — Image by the author.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 未格式化的 Python 代码——作者提供的图片。
- en: In the above image, you can see only half of my code fits into the screen. I’d
    have to scroll to the right and left to read and understand the code. There are
    unwanted blank lines and whitespace everywhere, while there’s no blank line where
    there needs to be one.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图像中，你可以看到只有一半的代码适合屏幕。你必须左右滚动才能阅读和理解代码。到处都是不必要的空行和空白，而在需要空行的地方却没有。
- en: And this is how it would look like after implementing the style guide. This
    one is easier to understand, isn’t it?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实施风格指南后的样子就是这样。这看起来更容易理解，不是吗？
- en: '![](../Images/fd588f3d289822f81eb58f43f32c3f3d.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd588f3d289822f81eb58f43f32c3f3d.png)'
- en: Formatted Python code — Image by the author.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化的 Python 代码 — 作者提供的图像。
- en: But there's an issue. Remembering the style guide and forcing myself to code
    it this way takes a lot of work. I still wanted to spend more time getting the
    job done.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一个问题。记住风格指南并强迫自己以这种方式编码需要很多工作。我还是希望花更多的时间来完成工作。
- en: It would be helpful if someone else took care of the code formatting. That's
    where [Black](https://black.readthedocs.io/) comes in. Black is a Python package
    to format your code to a predefined style guide in a single command. This guide
    can be PEP 8, or you can tweak it to your organizational version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他人处理代码格式化，那将会很有帮助。这就是[Black](https://black.readthedocs.io/)的用武之地。Black 是一个
    Python 包，可以用一个命令将代码格式化为预定义的风格指南。这个指南可以是 PEP 8，或者你可以调整为你们组织的版本。
- en: Modern code editors usually come with support for document formatting. For instance,
    in VSCode, you can right-click on the editor and click on code formatting. If
    Black is installed, it'll format your code at once.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现代代码编辑器通常支持文档格式化。例如，在 VSCode 中，你可以右键点击编辑器并点击代码格式化。如果安装了 Black，它将立即格式化你的代码。
- en: All these improvements haven't stopped there. You can automate code formatting
    with pre-commit hooks and not worry about it at the time of coding. When you're
    committing a change, it will format all your python files. I've discussed that
    in a previous post.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些改进并没有止步于此。你可以通过预提交钩子自动格式化代码，而不必在编码时担心。当你提交更改时，它将格式化所有的 Python 文件。我在之前的帖子中讨论过这个问题。
- en: '[](/python-code-formatting-made-simple-with-git-pre-commit-hooks-9233268cdf64?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## Python Code Formatting Made Simple With Git Pre-commit Hooks'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-code-formatting-made-simple-with-git-pre-commit-hooks-9233268cdf64?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## 使用 Git 预提交钩子简化 Python 代码格式化'
- en: Write code that everyone will fall in love with.
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写每个人都会喜欢的代码。
- en: towardsdatascience.com](/python-code-formatting-made-simple-with-git-pre-commit-hooks-9233268cdf64?source=post_page-----4ffc5c61b5fe--------------------------------)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/python-code-formatting-made-simple-with-git-pre-commit-hooks-9233268cdf64?source=post_page-----4ffc5c61b5fe--------------------------------)'
- en: The last missing piece of the puzzle is this. Even pre-commit hooks run on the
    developers' computers. When working as a team, you still rely on them for formatting.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个缺失的拼图就是这个。即使预提交钩子在开发者的电脑上运行，当作为团队工作时，你仍然依赖于它们进行格式化。
- en: What if you can do it centrally regardless of who the developer is and how they
    did it?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以在中心化处理，无论开发者是谁以及他们是如何做的，那会怎么样？
- en: That's the focus of this post. We leverage [GitHub Actions](https://docs.github.com/en/actions)
    to do this.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是这篇文章的重点。我们利用 [GitHub Actions](https://docs.github.com/en/actions) 来做到这一点。
- en: When developers commit to the central repository, their code will automatically
    align with the organizational standards. GitHub actions will trigger a workflow
    whenever we push changes to the repository. We can configure it to run a Black
    formatting command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者提交到中央仓库时，他们的代码将自动符合组织标准。每当我们推送更改到仓库时，GitHub Actions 将触发一个工作流。我们可以配置它以运行
    Black 格式化命令。
- en: Set up Black on GitHub Actions to Automatically Format Python Code
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitHub Actions 上设置 Black 以自动格式化 Python 代码
- en: 'To use `black` to format your Python code when committing changes using GitHub
    Actions, you can follow these steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要在提交更改时使用 `black` 格式化你的 Python 代码，可以按照以下步骤操作：
- en: First, ensure that `black` is installed in your project. You can do this by
    adding `black` to the `requirements.txt` file in your project or by running `pip
    install black` in your project's virtual environment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你的项目中安装了 `black`。你可以通过将 `black` 添加到项目的 `requirements.txt` 文件中，或在项目的虚拟环境中运行
    `pip install black` 来完成这一步。
- en: Next, create a new file in your project's `.github/workflows` directory called
    `format.yml`. This file will contain the configuration for your GitHub Actions
    workflow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在你的项目的 `.github/workflows` 目录中创建一个名为 `format.yml` 的新文件。这个文件将包含你 GitHub Actions
    工作流的配置。
- en: 'In the `format.yml` file, you can define a workflow that runs `black` on your
    code whenever you commit changes to your repository. Here''s an example workflow
    that does this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `format.yml` 文件中，你可以定义一个工作流，每当你将更改提交到你的仓库时，它就会在你的代码上运行 `black`。以下是一个实现这一点的工作流示例：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This workflow will run whenever you push changes to the `master` branch of your
    repository.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工作流将在你向仓库的 `master` 分支推送更改时运行。
- en: It installs `black`, and then runs the `black` command on the entire project
    (the `.` at the end of the `black` command specifies the current directory). Finally,
    it commits the new changes to the same branch.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它会安装 `black`，然后在整个项目上运行 `black` 命令（`black` 命令末尾的 `.` 指定了当前目录）。最后，它会将新更改提交到相同的分支。
- en: Once you have defined your workflow, you can commit the changes to your repository
    and push them to GitHub. When you do this, the workflow will run automatically,
    formatting your code with `black`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你定义了工作流，你可以将更改提交到你的仓库并推送到 GitHub。当你这样做时，工作流会自动运行，用 `black` 格式化你的代码。
- en: '[](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## 7 Ways to Make Your Python Project Structure More Elegant'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## 7 种方法使你的 Python 项目结构更优雅'
- en: Here are the best practices for a manageable, scalable, and easily understandable
    python project structure.
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这里是可管理、可扩展和易于理解的 Python 项目结构的最佳实践。
- en: towardsdatascience.com](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----4ffc5c61b5fe--------------------------------)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----4ffc5c61b5fe--------------------------------)
- en: Excluding and including files and folders for formatting
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排除和包含用于格式化的文件和文件夹
- en: There's an issue with the above configuration. It goes through all the files
    and folders in our repository and tries to format them. Sometimes, we want to
    avoid that happening for specific files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置存在一个问题。它会遍历我们仓库中的所有文件和文件夹，并尝试对它们进行格式化。有时，我们希望避免对特定文件进行格式化。
- en: Black has options to configure its formatting behavior.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`black` 有选项来配置其格式化行为。'
- en: In the following example, we've configured black to ignore any files inside
    the ref folder.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们已经配置了 `black` 以忽略 `ref` 文件夹中的任何文件。
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will run the `black` command on all files in the current directory, except
    for those in the `env` folder.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对当前目录下所有文件运行 `black` 命令，但不包括 `env` 文件夹中的文件。
- en: 'By default, Black will format all `.py`, `.pyi`, and `.ipynb` files. Alternatively,
    you can specify the list of files to include directly using the `--include` flag,
    like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`black` 将格式化所有 `.py`、`.pyi` 和 `.ipynb` 文件。或者，你可以使用 `--include` 标志直接指定要包含的文件列表，如下所示：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will run the `black` command only on files with a `.py` extension in the
    current directory.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将仅在当前目录下具有 `.py` 扩展名的文件上运行 `black` 命令。
- en: Yes, you can use both the `--include` and `--exclude` flags together to specify
    a more complex pattern of files to include or exclude.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以同时使用 `--include` 和 `--exclude` 标志来指定更复杂的文件包含或排除模式。
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will run the `black` command on all files with a `.py` extension in the
    current directory, except for those in the `env` folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对当前目录下所有具有 `.py` 扩展名的文件运行 `black` 命令，但不包括 `env` 文件夹中的文件。
- en: Note that the `--include` flag takes precedence over the `--exclude` flag, so
    if a file matches both patterns, it will be included. Thus be extra careful when
    you include patterns. Blindely including patterns, like in the above example,
    would cause black to format files in your env folder too.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，`--include` 标志优先于 `--exclude` 标志，因此如果一个文件同时匹配这两个模式，它将被包含在内。因此，在包含模式时要格外小心。像上述示例那样盲目地包含模式，会导致
    `black` 也格式化你 `env` 文件夹中的文件。
- en: 'You can specify multiple patterns for both `--include` and `--exclude` by separating
    them with a comma, like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过用逗号分隔来指定多个 `--include` 和 `--exclude` 模式，如下所示：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will run the `black` command on all files with a `.py` or `.pyi` extension
    in the current directory, except for those in the `env` or `tests` folders.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对当前目录下所有具有 `.py` 或 `.pyi` 扩展名的文件运行 `black` 命令，但不包括 `env` 或 `tests` 文件夹中的文件。
- en: Another helpful way to manage files to exclude is your .gitignore file. You
    may have one in your project already. If a file matches any patterns in .gitignore,
    those files will be ignored for formatting.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 管理要排除的文件的另一个有用方法是你的.gitignore文件。你的项目中可能已经有一个。如果文件匹配.gitignore中的任何模式，这些文件将在格式化时被忽略。
- en: If you need to use both .gitignore and exclude behaviors, according to the official
    docs, you need to use `--extend-exclude` instead of `--exclude`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要同时使用.gitignore和排除行为，根据官方文档，你需要使用`--extend-exclude`而不是`--exclude`。
- en: '[](/github-automated-testing-python-fdfe5aec9446?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## How to Run Python Tests on Every Commit Using GitHub Actions?'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/github-automated-testing-python-fdfe5aec9446?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## 如何在每次提交时使用GitHub Actions运行Python测试？'
- en: Automate the boring stuff and ensure your code quality with a CI pipeline.
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化无聊的工作，并通过CI管道确保代码质量。
- en: towardsdatascience.com](/github-automated-testing-python-fdfe5aec9446?source=post_page-----4ffc5c61b5fe--------------------------------)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/github-automated-testing-python-fdfe5aec9446?source=post_page-----4ffc5c61b5fe--------------------------------)'
- en: Extending the workflow with more clean code tools
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展工作流以包括更多清洁代码工具
- en: Black is one of the essential tools for formatting Python code. It takes care
    of a lot of things. But we do have other important stuff too.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Black是格式化Python代码的重要工具之一。它处理了很多事情。但我们还有其他重要的工具。
- en: One aspect of clean coding is logically sorting imports. But once again, you
    don't have to worry about this. You can use the package isort with your GitHub
    workflow to handle this automatically.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁编码的一个方面是逻辑排序导入。但再次强调，你不必担心这个。你可以使用isort包与GitHub工作流来自动处理这个问题。
- en: Removing redundant or unused variables is another quality of a good codebase.
    Many IDEs nowadays automatically highlight such new variables. But autoflake8
    could automatically remove them as well.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 移除冗余或未使用的变量是一个优秀代码库的另一个特质。现在许多IDE会自动突出显示这些新变量。但autoflake8也可以自动移除它们。
- en: 'Here''s the finished GitHub Actions configuration:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完成的GitHub Actions配置：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When things don't go the way we want
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当事情没有按照我们希望的方式进行时
- en: Regardless of all our effort, there may be instances where these automated code
    refactoring can fail.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们付出了所有努力，但这些自动化代码重构有时仍可能失败。
- en: In a good development environment, this should be avoided. Most developers test
    their code locally before pushing it to Git because it allows them to identify
    any bugs or issues with the code before deployment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个好的开发环境中，这应该避免。大多数开发者在将代码推送到Git之前会在本地测试代码，因为这样可以在部署之前识别代码中的任何错误或问题。
- en: Testing locally also allows developers to make necessary changes and ensure
    that the code functions correctly before it is pushed live, saving time and resources
    in the long run.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本地测试也允许开发者进行必要的更改，确保代码在推送上线之前正常运行，从而节省时间和资源。
- en: Because of this, issues such as typos and other minor things, usually why code
    refactoring fails, won't be an issue. But when they happen, we need to be prepared.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，诸如拼写错误和其他小问题等问题，通常是代码重构失败的原因，将不再是问题。但当它们发生时，我们需要做好准备。
- en: The below config will send an email notification whenever our code refactoring
    fails.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置将在我们的代码重构失败时发送电子邮件通知。
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The above extension to the configuration uses the [custom GitHub action](https://github.com/dawidd6/action-send-mail)
    created by [Dawid Dziurla](https://github.com/dawidd6).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置扩展使用了由[Dawid Dziurla](https://github.com/dawidd6)创建的[自定义GitHub动作](https://github.com/dawidd6/action-send-mail)。
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Nobody wants messy code, but a few have the patience to clean it up.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人希望代码混乱，但只有少数人有耐心去清理它。
- en: Every programming community has a style guide to ensure the code is readable.
    But that's the first hurdle in solving the problem. We need to make code formatting
    effortless for every developer to use often. Packages like Black does that.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每个编程社区都有一个风格指南，以确保代码可读。但这只是解决问题的第一个障碍。我们需要使代码格式化对每个开发者而言都是毫不费力的。像Black这样的包可以做到这一点。
- en: But making it effortless doesn't mean everyone uses it. Pre-commit hooks automate
    the process but still rely on the developer. This post has presented a way to
    do the formatting centrally automatically.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使其毫不费力并不意味着每个人都会使用它。预提交钩子可以自动化过程，但仍然依赖于开发者。本文展示了一种集中自动格式化的方法。
- en: Black with GitHub Actions can ensure the code is always formatted. You can centrally
    dictate the style guide. It can be PEP 8 or your custom one. And when they fail
    for any reason, you can also get notified.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 的 Black 可以确保代码始终符合格式。你可以集中管理风格指南，可以是 PEP 8 或你自定义的风格。而且当格式化失败时，你也会收到通知。
- en: I hope this helps.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这对你有帮助。
- en: Thanks for reading, friend! Say Hi to me on [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/),
    [**Twitter**](https://twitter.com/Thuwarakesh), and [**Medium**](https://thuwarakesh.medium.com/).
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 谢谢阅读，朋友！在 [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/)、[**Twitter**](https://twitter.com/Thuwarakesh)
    和 [**Medium**](https://thuwarakesh.medium.com/) 上跟我打招呼吧。
- en: ''
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership)
    because, at no extra cost for you, I earn a small commission for referring you.
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还不是 Medium 会员？请使用这个链接 [**成为会员**](https://thuwarakesh.medium.com/membership)，因为在没有额外费用的情况下，我会因为推荐你而获得少量佣金。
