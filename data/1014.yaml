- en: Hands on Otsu Thresholding Algorithm for Image Background Segmentation, using
    Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亲自动手实现 Otsu 阈值分割算法，用于图像背景分割，使用 Python
- en: 原文：[https://towardsdatascience.com/hands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2?source=collection_archive---------7-----------------------#2023-03-20](https://towardsdatascience.com/hands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2?source=collection_archive---------7-----------------------#2023-03-20)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/hands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2?source=collection_archive---------7-----------------------#2023-03-20](https://towardsdatascience.com/hands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2?source=collection_archive---------7-----------------------#2023-03-20)
- en: From theory to practice with the Otsu thresholding algorithm
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从理论到实践，使用 Otsu 阈值分割算法
- en: '[](https://piero-paialunga.medium.com/?source=post_page-----9fa0575ac3d2--------------------------------)[![Piero
    Paialunga](../Images/de2185596a49484698733e85114dd1ff.png)](https://piero-paialunga.medium.com/?source=post_page-----9fa0575ac3d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9fa0575ac3d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9fa0575ac3d2--------------------------------)
    [Piero Paialunga](https://piero-paialunga.medium.com/?source=post_page-----9fa0575ac3d2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://piero-paialunga.medium.com/?source=post_page-----9fa0575ac3d2--------------------------------)[![Piero
    Paialunga](../Images/de2185596a49484698733e85114dd1ff.png)](https://piero-paialunga.medium.com/?source=post_page-----9fa0575ac3d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9fa0575ac3d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9fa0575ac3d2--------------------------------)
    [Piero Paialunga](https://piero-paialunga.medium.com/?source=post_page-----9fa0575ac3d2--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F254e653181d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2&user=Piero+Paialunga&userId=254e653181d2&source=post_page-254e653181d2----9fa0575ac3d2---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9fa0575ac3d2--------------------------------)
    ·8 min read·Mar 20, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9fa0575ac3d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2&user=Piero+Paialunga&userId=254e653181d2&source=-----9fa0575ac3d2---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F254e653181d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2&user=Piero+Paialunga&userId=254e653181d2&source=post_page-254e653181d2----9fa0575ac3d2---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9fa0575ac3d2--------------------------------)
    ·8分钟阅读·2023年3月20日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F9fa0575ac3d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2&user=Piero+Paialunga&userId=254e653181d2&source=-----9fa0575ac3d2---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9fa0575ac3d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2&source=-----9fa0575ac3d2---------------------bookmark_footer-----------)![](../Images/ec82b49b11dfd1d2e3831de232497bc8.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F9fa0575ac3d2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhands-on-otsu-thresholding-algorithm-for-image-background-segmentation-using-python-9fa0575ac3d2&source=-----9fa0575ac3d2---------------------bookmark_footer-----------)![](../Images/ec82b49b11dfd1d2e3831de232497bc8.png)'
- en: Photo by [Luke Porter](https://unsplash.com/@lukeporter?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/SZOfKAaQYLI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Luke Porter](https://unsplash.com/@lukeporter?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/SZOfKAaQYLI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: 'Let me start with a very technical concept:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我从一个非常技术性的概念开始：
- en: An Image will be viewed, treated, analyzed, and processed as a 2D signal.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 图像将被视作、处理、分析和处理为二维信号。
- en: 'And some proper definitions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以及一些恰当的定义：
- en: A **signal** is a quantity that changes over space or time and can be used to
    transmit a form of information.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号**是一个在空间或时间上变化的量，可用于传递某种信息。'
- en: An **image** is nothing but a quantity of light that hits an optical system,
    that is the camera or the canvas where you are painting it.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像**无非是光线照射到光学系统上，即相机或你正在绘画的画布。'
- en: In this sense, an image is nothing but a 2D signal, an electromagnetic signal
    that carries some information that is retrieved by a physical system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个意义上说，图像不过是一个2D信号，一个携带某些信息的电磁信号，这些信息由物理系统获取。
- en: So as we have established that an image is indeed a signal, we can think of
    applying a **signal processing** technique to an **image processing** task. We
    can thus stop discussing **philosophy** and start with the **nerd** part.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，既然我们已经确定图像确实是一个信号，我们可以考虑将**信号处理**技术应用于**图像处理**任务。这样我们可以停止讨论**哲学**，开始进入**技术**部分。
- en: 'Speaking of philosophy. Let’s take this **image**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 说到哲学。我们来看这张**图像**：
- en: '![](../Images/882ffc2b413c45538c86ed4defa87a06.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/882ffc2b413c45538c86ed4defa87a06.png)'
- en: Photo by [Tingey Injury Law Firm](https://unsplash.com/it/@tingeyinjurylawfirm?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/9SKhDFnw4c4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Tingey Injury Law Firm](https://unsplash.com/it/@tingeyinjurylawfirm?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    在 [Unsplash](https://unsplash.com/photos/9SKhDFnw4c4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供
- en: 'There is the philosopher in the image doing his job: thinking. And then there
    is this very white background, that we really don’t care about. **Can we get rid
    of it?** Can we get something like that?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图片中有位哲学家在思考他的工作。然后是这个非常白的背景，我们其实并不在乎。**我们能去掉它吗？** 我们能得到这样的东西吗？
- en: '![](../Images/1d7edaaeca7c602dea43e254b947997a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d7edaaeca7c602dea43e254b947997a.png)'
- en: Image by author
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: If I’m asking you, it means that we can. 😅
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我问你，这意味着我们可以。 😅
- en: Every person who knows a little bit of ***photoshop*** can do that, but how
    can you do that automatically and with Python? Again, yes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人只要懂一点***Photoshop***就可以做到这一点，但如何用Python自动完成呢？再说一遍，是的。
- en: Let me show you how 🚀
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你展示一下 🚀
- en: 0\. The Idea
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0\. 想法
- en: So let’s take a straightforward case.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们拿一个简单的例子。
- en: Yep. A small square inside a bigger square. This is an extremely simple case.
    What we want to do is to set all the values in the smaller square to 1 and everything
    that is outside to 0.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 没错。一个小方块在一个大方块里面。这是一个极其简单的情况。我们想做的是将小方块中的所有值设置为1，而外面的所有值设置为0。
- en: 'We can extract the two values with this code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下代码提取两个值：
- en: 'And then do something like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后做一些类似于：
- en: This converts the image from two values to 1 and 0.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将图像从两个值转换为1和0。
- en: This is extremely simple, right? Let’s make it a little bit harder.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单，对吧？让我们把它变得有些复杂。
- en: Now we will do the little square inside the bigger square **but both the squares
    have some noise.**
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将做的是在大方块内的小方块**但两个方块都有一些噪声。**
- en: What I mean is that we don’t have only 2 values but we can theoretically have
    **all the values between 0 and 255** which is the whole range of values in the
    encoding.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，我们不仅仅有2个值，而是理论上可以有**从0到255之间的所有值**，这就是编码中的整个值范围。
- en: How do we deal with this?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何处理这个问题？
- en: Well, the first thing we want to do is to **flatten** the image (2D signal)
    and change it into a 1D one.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们首先要做的是**扁平化**图像（2D信号），并将其转换为1D图像。
- en: '![](../Images/132122519b5885a6e93186b7916ec191.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/132122519b5885a6e93186b7916ec191.png)'
- en: Image by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The image was a 50x50 image and we have a “raveled” 50x50=2500 long 1D signal.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图像是50x50的，我们得到了一个“展开”的50x50=2500长度的1D信号。
- en: 'Now if we study the distribution of our 1D Signal we got something like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们研究1D信号的分布，我们得到这样的东西：
- en: '![](../Images/5cc87aec378dd846951541988b138150.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5cc87aec378dd846951541988b138150.png)'
- en: As we can see, we have **two normal distributions**. This is **exactly** where
    the Otsu algorithm performs best. The underlying idea is that the **background**
    and the **subject** of the image have two different natures and two different
    **domains**. For example, in this case, the first gaussian bell is the one related
    to the background (let’s say from 0 to 50), while the second Gaussian bell is
    the one of the smaller square (from 150 to 250).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们有 **两个正态分布**。这正是 Otsu 算法表现最佳的地方。其基本思想是 **背景** 和 **图像中的主体** 具有两种不同的性质和两个不同的
    **领域**。例如，在这种情况下，第一个高斯钟形曲线与背景相关（从 0 到 50），而第二个高斯钟形曲线则与较小的方块相关（从 150 到 250）。
- en: 'So let’s say that we decide that we set everything that is larger than 100
    as 1 and everything that is smaller as 0:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们决定将所有大于 100 的值设为 1，将所有小于 100 的值设为 0：
- en: And the result is the following mask between the **background** and the **subject:**
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下 **背景** 和 **主体** 之间的掩码：
- en: 'This is it. This is the whole idea of the Otsu algorithm:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这就是 Otsu 算法的整个思路：
- en: '**Import/Read** the image as a 2D signal'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入/读取**图像作为 2D 信号'
- en: '**Flatten** the image into a 1D vector'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将**图像展平为 1D 向量'
- en: Choose a **threshold**
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个 **阈值**
- en: '**Set** everything that is below that threshold as 0 and everything that is
    above as 1'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将**低于该阈值的所有内容设为 0，将高于该阈值的所有内容设为 1'
- en: Very easy right?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，对吧？
- en: But how do we choose the proper threshold? What is the best one? Let’s talk
    about **math**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何选择合适的阈值呢？最佳阈值是什么？让我们谈谈 **数学**。
- en: 1\. Theoretical Introduction
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 理论介绍
- en: Let’s formalize this concept a little bit.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微形式化一下这个概念。
- en: We have a **domain** of pixels in an image. The full domain goes from 0 to 255
    (white to black) but it doesn’t have to be that wide (it can be from 20 to 200
    for example).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个图像的 **领域**。整个领域从 0 到 255（白到黑），但它不必那么宽（例如可以是 20 到 200）。
- en: Now, multiple points can have the same pixel intensity of course (we can have
    two black pixels in the same image). Let’s say that we have 3 pixels with an intensity
    of 255 in an image that has 100 pixels. Now the probability of having intensity
    255 in that image is 3/100.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，多个点可以具有相同的像素强度（我们可以在同一图像中有两个黑色像素）。假设我们有 3 个强度为 255 的像素，在一个有 100 个像素的图像中。那么在该图像中强度为
    255 的概率是 3/100。
- en: 'In general, we can say that the probability of having pixel i in an image is:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们可以说图像中像素 i 的概率是：
- en: '![](../Images/b879d59f443db2c1db2239ab874f99c1.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b879d59f443db2c1db2239ab874f99c1.png)'
- en: Image by author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Now let’s say that the pixel on which we are doing the split is pixel k (in
    our previous example k was 100). This **classifies** the data points. All the
    points **before k belong to class 0** and all the points **after k belong to class
    1.**
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们进行分割的像素是像素 k（在我们之前的示例中，k 是 100）。这 **分类** 了数据点。所有 **k 之前的点属于类别 0**，所有 **k
    之后的点属于类别 1**。
- en: 'This means that the probability of picking a point from class 0 is the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着从类别 0 中选择一个点的概率如下：
- en: '![](../Images/269e994475d0e500da0c16f16cfdf65c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/269e994475d0e500da0c16f16cfdf65c.png)'
- en: Image by author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'While the probability of picking a point from class 1 is the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 而从类别 1 中选择一个点的概率如下：
- en: '![](../Images/baee39159ae78f3af2735c3fac1c14e7.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/baee39159ae78f3af2735c3fac1c14e7.png)'
- en: Image by author
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: As we can see, both probabilities are obviously dependent on k.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，这两个概率显然依赖于 k。
- en: Now, another thing that we can compute is the **variance for each class:**
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还可以计算每个类别的 **方差：**
- en: '![](../Images/51c36a80173951098f5a0dd8a5fc42cb.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51c36a80173951098f5a0dd8a5fc42cb.png)'
- en: Image by author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '![](../Images/e1009db6a01810f246e1c6387e0956da.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1009db6a01810f246e1c6387e0956da.png)'
- en: Image by author
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Where:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '![](../Images/72e0b9a5bc808a383db17f593aaba2ec.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72e0b9a5bc808a383db17f593aaba2ec.png)'
- en: Image by author
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: And
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '![](../Images/6383eb59617b9e87ddd063a1f0ebd8dd.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6383eb59617b9e87ddd063a1f0ebd8dd.png)'
- en: Image by author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The sigma value is the **variance** of each class aka how much the class is
    **spread** around the mean values that are mu_0 and mu_1.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: sigma 值是每个类别的 **方差**，即该类别在均值 mu_0 和 mu_1 周围的 **扩散** 程度。
- en: 'Now theoretically the idea is to find the value that creates that little **valley**
    that we saw in this picture earlier:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论上讲，目的是找到一个值，这个值形成了我们之前在图片中看到的小 **凹谷**：
- en: '![](../Images/5cc87aec378dd846951541988b138150.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5cc87aec378dd846951541988b138150.png)'
- en: But the approach that we use is slightly different and more rigorous. By using
    the same idea of the [Linear discriminant analysis](https://en.wikipedia.org/wiki/Linear_discriminant_analysis#Fisher's_linear_discriminant)
    (LDA). In the (Fisher) LDA we want to find a hyperplane that splits the two distributions
    in a way that the variance **between** classes is as big as possible (so that
    the two means are the furthest away from each other) and the variance **within**
    the classes is as small as possible (so that we don’t have too much overlap between
    the two classes data points).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们使用的方法稍有不同且更为严格。通过使用[线性判别分析](https://en.wikipedia.org/wiki/Linear_discriminant_analysis#Fisher's_linear_discriminant)（LDA）的相同思路。在（Fisher）LDA中，我们希望找到一个超平面，将两个分布分开，使得类别**之间**的方差尽可能大（这样两个均值之间的距离尽可能远），而类别**内部**的方差尽可能小（这样两个类别数据点之间的重叠最少）。
- en: In this case, we don’t have any hyperplane and the threshold that we set (our
    k) is not even a line, but it is more of a probability value that we use to discriminate
    data points and classify them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们没有任何超平面，我们设置的阈值（我们的k）甚至不是一条线，而更像是一个概率值，用于区分数据点并对其进行分类。
- en: 'It can be proven (full proof here in the original [paper](https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4310076))
    that the **best split** between the **background** and **subject** (is given the
    assumption that the domain of the background is different from the domain of the
    subject) is obtained by minimizing this quantity:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以证明（完整证明见原始[论文](https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4310076)），**最佳分割**在**背景**和**主体**之间（假设背景的域与主体的域不同）是通过最小化该数量来获得的：
- en: '![](../Images/201fa4937a409c6adc3af5410dcfd0db.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/201fa4937a409c6adc3af5410dcfd0db.png)'
- en: Image by author
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: This means that we can try all different ks and just pick the one with the lowest
    k.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以尝试所有不同的k，并选择其中最小的k。
- en: 2\. Hands On implementation
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 实践操作
- en: 'The theory might look complex and difficult to understand, but the implementation
    is extremely easy and it is made of three blocks:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 理论可能看起来复杂且难以理解，但实现起来非常简单，由三个块组成：
- en: 2.1 Importing the libraries
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 导入库
- en: The first thing that we want to do is to import 4 basic libraries that we will
    need.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要导入4个基本库。
- en: 2.2 The threshold function
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 阈值函数
- en: 'Once you find the perfect threshold, this is how to apply it to your image:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到完美的阈值，这就是如何将其应用到您的图像中：
- en: 2.3 The Otsu criterion
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 Otsu准则
- en: 'The function that will compute this quantity:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将计算该数量的函数：
- en: '![](../Images/201fa4937a409c6adc3af5410dcfd0db.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/201fa4937a409c6adc3af5410dcfd0db.png)'
- en: Image by author
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Is the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 是以下内容：
- en: 2.4 Best threshold computation
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 最佳阈值计算
- en: 'This other function just runs all over the possible ks and finds the best one
    according to the criterion above:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个函数会遍历所有可能的k，并根据上述准则找到最佳值。
- en: 2.5 The whole process
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 整个过程
- en: 'So the image we are using is the following one:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们使用的图像是以下这个：
- en: '![](../Images/bb682b7a3df65e2c7a6a3ed1ad6619aa.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bb682b7a3df65e2c7a6a3ed1ad6619aa.png)'
- en: Photo by [Ben Dumond](https://unsplash.com/@bendumond?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/VedK8_UlmkY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Ben Dumond](https://unsplash.com/@bendumond?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)拍摄的照片，来源于[Unsplash](https://unsplash.com/photos/VedK8_UlmkY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: 'If we save that image in a path and we apply the Otsu algorithm we get:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将该图像保存在路径中并应用Otsu算法，我们得到：
- en: 'And if we compare im (the original image) and im_otsu (the one after the algorithm)
    we get:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们比较im（原始图像）和im_otsu（算法处理后的图像），我们得到：
- en: As we can see, the black part of the right upper part of the picture is misinterpreted
    as the subject because it has the same tone as some of the subjects. People are
    not perfect and neither are the algorithms 🙃
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，图像右上部分的黑色区域被误解为主体，因为它与一些主体有相同的色调。人们不完美，算法也一样🙃
- en: 3\. Wrapping it up
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 总结
- en: Thank you for being here with me throughout the whole path of this Otsu algorithm
    tutorial.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您在整个Otsu算法教程中与我同行。
- en: 'In this brief article, we saw:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇简短的文章中，我们看到：
- en: That an **Image** can be treated as a **2D signal** and can then be analyzed
    using Signal Processing technique
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图像**可以被视为**二维信号**，然后可以使用信号处理技术进行分析'
- en: The assumption of the **Otsu algorithm,** that is the **background** and the
    **subject** of an image have two, continuous, non-overlapping, distinguished domains
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Otsu算法**的假设是图像的**背景**和**主体**具有两个连续的、互不重叠的、明确区分的领域。'
- en: How to find the **best** discrimination between the background and subject of
    an image given the Otsu algorithm. How we can interpret the Otsu algorithm as
    a Fisher Linear Discriminant.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在给定Otsu算法的情况下找到图像的**最佳**背景和主体的区分。我们如何将Otsu算法解释为Fisher线性判别。
- en: How to implement the Otsu algorithm using **Python**
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用**Python**实现Otsu算法。
- en: How to **apply** this algorithm in a real **image**
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在实际**图像**中**应用**此算法。
- en: 4\. Conclusions
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 结论
- en: 'If you liked the article and you want to know more about machine learning,
    or you just want to ask me something, you can:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，想了解更多关于机器学习的内容，或只是想问我一些问题，你可以：
- en: A. Follow me on [**Linkedin**](https://www.linkedin.com/in/pieropaialunga/),
    where I publish all my stories
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: A. 在[**Linkedin**](https://www.linkedin.com/in/pieropaialunga/)上关注我，我会在上面发布我的所有故事。
- en: B. Subscribe to my [**newsletter**](https://piero-paialunga.medium.com/subscribe).
    It will keep you updated about new stories and give you the chance to text me
    to receive all the corrections or doubts you may have.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: B. 订阅我的[**新闻通讯**](https://piero-paialunga.medium.com/subscribe)。它将让你了解最新故事，并给你机会通过短信与我联系，获取所有的更正或解答你可能有的疑问。
- en: C. Become a [**referred member**](https://piero-paialunga.medium.com/membership),
    so you won’t have any “maximum number of stories for the month” and you can read
    whatever I (and thousands of other Machine Learning and Data Science top writers)
    write about the newest technology available.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: C. 成为[**会员**](https://piero-paialunga.medium.com/membership)，这样你就不会有“每月故事数量上限”的限制，可以阅读我（以及成千上万的其他机器学习和数据科学顶级作家）关于最新技术的文章。
