- en: Two Interesting Pandas Data Manipulation Functions You Need to Know
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要知道的两个有趣的 pandas 数据操作函数
- en: 原文：[https://towardsdatascience.com/two-interesting-pandas-data-manipulation-functions-you-need-to-know-5eabd06af56b](https://towardsdatascience.com/two-interesting-pandas-data-manipulation-functions-you-need-to-know-5eabd06af56b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/two-interesting-pandas-data-manipulation-functions-you-need-to-know-5eabd06af56b](https://towardsdatascience.com/two-interesting-pandas-data-manipulation-functions-you-need-to-know-5eabd06af56b)
- en: Data Science
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学
- en: Extremely useful pandas functions for converting a continuous pandas column
    into categorical ones.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极其有用的 pandas 函数可以将连续的 pandas 列转换为分类列。
- en: '[](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)[![Suraj
    Gurav](../Images/f5dca32861f8c1c428e66fbe2174c04b.png)](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)
    [Suraj Gurav](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)[![Suraj
    Gurav](../Images/f5dca32861f8c1c428e66fbe2174c04b.png)](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)
    [Suraj Gurav](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)
    ·7 min read·Aug 24, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)
    ·阅读时间 7 分钟·2023年8月24日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6bad487920cb6f6872e7975472f27f51.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6bad487920cb6f6872e7975472f27f51.png)'
- en: Photo by [Brendan Church](https://unsplash.com/@bdchu614?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Brendan Church](https://unsplash.com/@bdchu614?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Python pandas is a powerful and widely used library for data analysis.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python pandas 是一个强大且广泛使用的数据分析库。
- en: It comes up with 200+ functions and methods, making data manipulation and transformation
    easy. However, knowing all these functions and using them where required in the
    actual work isn’t a feasible task.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了 200 多个函数和方法，使数据操作和转换变得容易。然而，了解所有这些函数并在实际工作中按需使用它们并不是一项可行的任务。
- en: One of the common tasks in data manipulation is converting a column having continuous
    numerical values into a column containing discrete or categorical values. And
    pandas has two amazing built-in functions which can certainly save you a few minutes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据操作中的常见任务之一是将包含连续数值的列转换为包含离散或分类值的列。pandas 有两个了不起的内置函数，可以节省你几分钟时间。
- en: You can use such type of data transformation for a variety of applications like
    grouping data, analyzing data by discrete groups, or visualizing data using histograms.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这种类型的数据转换用于各种应用，如分组数据、按离散组分析数据或使用直方图可视化数据。
- en: For example,
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: Recently, I calculated [Herfindahl-Hirschman Index (HHI)](https://www.investopedia.com/terms/h/hhi.asp)
    to understand the market concentration of multiple brands. So in a pandas DataFrame,
    I had a column with continuous values of HHI for all brands. Ultimately, I wanted
    to convert this column to a discrete one to categorize each brand as low, medium,
    and high market concentration — **That’s where I got inspired for this story.**
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最近，我计算了[赫芬达尔-赫希曼指数 (HHI)](https://www.investopedia.com/terms/h/hhi.asp)以了解多个品牌的市场集中度。因此，在一个
    pandas DataFrame 中，我有一个包含所有品牌 HHI 连续值的列。最终，我想将这一列转换为离散列，以将每个品牌分类为低、中和高市场集中度——**这就是我获得灵感的地方。**
- en: Without knowing these built-in pandas functions, you might need to write multiple
    *if-else* and *for* statements to get the same work done.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不知道这些内置的 pandas 函数，你可能需要编写多个 *if-else* 和 *for* 语句来完成相同的工作。
- en: Therefore, here you’ll explore such 2 super-useful built-in pandas functions
    along with interesting examples (*including my project*), which will supercharge
    your data analysis and save you a couple of minutes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这里你将探索两个超级有用的 pandas 内置函数以及有趣的示例（*包括我的项目*），这些示例将大大提升你的数据分析能力，并节省你几分钟时间。
- en: Often you need to convert a column with continuous values into another column
    with discrete values in your analytics project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的分析项目中，通常需要将一个具有连续值的列转换为另一个具有离散值的列。
- en: So basically you categorize the continuous data into several categories, i.e.
    buckets or bins. And you can do so by either specifying minimum and maximum values
    for each bin, i.e. defining bin edges or by specifying the number of bins.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上，你将连续数据分类为几个类别，即桶或箱子。你可以通过指定每个箱子的最小值和最大值，即定义箱子边缘，或通过指定箱子数量来做到这一点。
- en: Depending on your purpose of splitting a continuous series into a discrete one,
    you can use one of the **next two** methods.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你将连续序列拆分为离散序列的目的，你可以使用 **接下来的两种** 方法之一。
- en: As I was curious about a built-in function for my work, first I came across
    the `cut()` function from pandas library.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我对工作中的内置函数感到好奇，首先我遇到了 pandas 库中的 `cut()` 函数。
- en: pandas cut()
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas cut()
- en: You can use pandas **cut()** when you want to split the data into a fixed number
    of different buckets, irrespective of the number of values in each bucket.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想将数据分成固定数量的不同桶时，可以使用 pandas **cut()**，无论每个桶中的值的数量如何。
- en: As per pandas official documentation, there are 7 optional parameters for the
    function `**pandas.cut()**` along with 2 mandatory parameters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 pandas 官方文档，`**pandas.cut()**` 函数有 7 个可选参数和 2 个必需参数。
- en: But you don’t need to remember all of them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但你不需要记住所有这些。
- en: I’ve simplified things for you. I’m using this function quite often nowadays
    and found some of the function parameters more useful than others.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经为你简化了内容。我现在经常使用这个函数，发现一些函数参数比其他参数更有用。
- en: Here are the commonly used optional parameters which you’ll use in almost **90%
    of the cases**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你在几乎 **90% 的情况下** 会使用的常用可选参数。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s take an example to understand how each of these parameters works.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子来理解这些参数是如何工作的。
- en: Suppose you have the following continuous series, which you would like to convert
    into 5 bins.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有以下连续序列，你想将其转换为 5 个箱子。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/1be215a603dcdfb9e9124c7b62b882aa.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1be215a603dcdfb9e9124c7b62b882aa.png)'
- en: pandas cut() | Image by Author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: pandas cut() | 作者图片
- en: You simply assigned the integer 5 to the parameter *bin* — as a result, pandas
    split the entire column *Series1* into 5 equal-sized buckets. Pandas assigned
    each value from *Series1* to one of these 5 buckets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你简单地将整数 5 分配给参数 *bin*——结果，pandas 将整个列 *Series1* 拆分为 5 个相等大小的桶。Pandas 将 *Series1*
    中的每个值分配到这 5 个桶中的一个。
- en: If you inspect each of these buckets, you’ll see two things are common.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查这些桶中的每一个，你会发现两个共同点。
- en: The bin edges are non-integer — You can fix this by defining the bin edges in
    the bin parameter.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 箱子边缘是非整数——你可以通过在 bin 参数中定义箱子边缘来解决这个问题。
- en: Each bin edge is closed on the right — It is coming from the default setting
    of the parameter right as `right=True`. It means that the pandas include the maximum
    value of the bucket in the same bucket.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个箱子边缘在右侧是封闭的——这是由于参数 right 的默认设置 `right=True`。这意味着 pandas 包括桶中的最大值在同一个桶中。
- en: This parameter specifically helps you **control the binning process** and switching
    its value helps you include or exclude certain elements from a bin.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个参数特别帮助你 **控制分箱过程**，并且切换其值可以帮助你包括或排除某些元素。
- en: Let’s give it a second chance.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一次。
- en: This time you’ll pass a list of bin edges for the same DataFrame column and
    see how the result changes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这次你将传递一个箱子边缘的列表给相同的 DataFrame 列，看看结果是如何变化的。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/c36e254566f210d2ea0d70c38e60c0c9.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c36e254566f210d2ea0d70c38e60c0c9.png)'
- en: pandas cut with defined bin edges | Image by Author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: pandas cut 定义了箱子边缘 | 作者图片
- en: Pandas simply created new bins using the integers you provided in the *bin*
    parameter and assigned each number of *Series1* to these bins.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 使用你在 *bin* 参数中提供的整数简单地创建了新的箱子，并将 *Series1* 中的每个数字分配到这些箱子中。
- en: Moreover, you can also use the *Label* parameter to give a name to each of these
    buckets, like below.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以使用 *Label* 参数为每个桶命名，如下所示。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/8cad66ce659972f2927cf9b8a4ad4be9.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8cad66ce659972f2927cf9b8a4ad4be9.png)'
- en: pandas cut() with bin labels | Image by Author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: pandas cut() 带有箱子标签 | 作者图片
- en: It works perfectly as expected!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它工作得非常完美！
- en: Coming back to my work — **a real-world scenario** — I tried the function `**pandas.cut()**`
    on my below dataset.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我的工作——**一个真实场景**——我在下面的数据集上尝试了函数 `**pandas.cut()**`。
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/7b77257f2400c1e9bf2c0463c1f2a36d.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b77257f2400c1e9bf2c0463c1f2a36d.png)'
- en: Using pandas.cut() on a real-world example | Image by Author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际例子中使用pandas.cut() | 图片由作者提供
- en: However, the distribution of elements in each of these buckets is uneven, i.e.
    each bin contains a different number of elements. 5 brands belong to the *low*,
    3 brands belong to the *medium*, and only 2 brands belong to the *high* concentration
    bucket.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些桶中的元素分布不均，即每个桶包含的元素数量不同。5个品牌属于*低*，3个品牌属于*中*，仅2个品牌属于*高*浓度桶。
- en: But for my project, I wanted to keep the distribution i.e. the number of brands
    in each bucket same and that’s where I found the next pandas method useful.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但对于我的项目，我想保持分布，即每个桶中的品牌数量相同，这就是我发现下一个pandas方法有用的地方。
- en: pandas qcut()
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas qcut()
- en: '`pandas.qcut()` is used to get an equal data distribution in all the bins.
    It works on the principle of sample quantiles.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.qcut()`用于在所有桶中获得均等的数据分布。它基于样本分位数的原理。'
- en: Quantiles are the values that divide a series into a number of subsets — each
    containing nearly the same number of elements.
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 分位数是将序列分成若干个子集的值——每个子集包含大致相同数量的元素。
- en: So when you cut a series using the function **qcut()**, it simply tells you
    which element`of the series belongs to which quantile.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你使用函数**qcut()**切分一个序列时，它只是告诉你序列的哪个元素属于哪个分位数。
- en: The basic syntax of the function `qcut()` is almost the same as the syntax of
    the function `cut()`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`qcut()`的基本语法几乎与函数`cut()`的语法相同。
- en: Let’s understand this with an example — Here you’ll use both the functions `cut()`
    and `qcut()` on the same data and categorize them into 4 bins.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解——在这里你将对相同的数据使用函数`cut()`和`qcut()`，并将它们分为4个桶。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/418581e873b1ba46aa86e0cc0a07d37d.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/418581e873b1ba46aa86e0cc0a07d37d.png)'
- en: Quantile-based discretization Python | Image by Author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 基于分位数的离散化Python | 图片由作者提供
- en: Now, when you check the data distribution in each bin —
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你检查每个桶中的数据分布时——
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You’ll see when you used the function `**cut()**`, although each bin size is
    equal, i.e. 23, each bin contains a different number of elements.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，当你使用函数`**cut()**`时，尽管每个桶的大小相等，即23，但每个桶中包含的元素数量不同。
- en: Whereas, when you used the function `**qcut()**`, a similar number of elements
    were present in each bucket. But you can see such distribution came at the cost
    of varied bin sizes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 而当你使用函数`**qcut()**`时，每个桶中存在类似数量的元素。但你可以看到，这种分布是以不同的桶大小为代价的。
- en: So in the case of my project, the function `pandas.qcut()` was the ultimate
    solution as you can see here —
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我的项目中，函数`pandas.qcut()`是最终解决方案，正如你所看到的——
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/2c5e68e80519d4dd6383d4e60831d5f0.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c5e68e80519d4dd6383d4e60831d5f0.png)'
- en: Using pandas.qcut() to the real-world scenario | Image by Author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas.qcut()的实际场景 | 图片由作者提供
- en: So, `**qcut()**` assigned 3 brands to each of the *medium* and *high* concentration
    buckets and 4 brands to the *low* concentration bucket.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`**qcut()**`将每个*中*和*高*浓度桶分配了3个品牌，将*低*浓度桶分配了4个品牌。
- en: I hope you found this article refreshing and useful. Although the conversion
    of a continuous series into discrete ones is the common scenario in data analysis,
    the task can be really daunting if you don’t know the built-in functions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你发现这篇文章既清新又有用。尽管将连续序列转换为离散序列是数据分析中的常见场景，但如果你不了解内置函数，这项任务确实可能非常艰巨。
- en: Using these functions in your data analysis projects will certainly empower
    you to easily extract the required information from the data in no time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据分析项目中使用这些函数，肯定能帮助你迅速从数据中提取所需的信息。
- en: LMK in the **Comments** which topics you would like to get such amazing articles!
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在**评论**中告诉我你希望获得哪些精彩的文章！
- en: Well, just knowing these functions is not enough — start using them in your
    data analysis tasks to unlock the real pandas power today.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅了解这些函数是不够的——现在就开始在数据分析任务中使用它们，释放真正的pandas力量吧。
- en: Ready to level up your data analysis skills?
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 准备提升你的数据分析技能了吗？
- en: 💡 Consider [**Becoming a Medium Member**](https://medium.com/@17.rsuraj/membership)
    to **access unlimited** stories on Medium and daily interesting Medium digest.
    I will get a small portion of your fee and No additional cost to you.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 💡 考虑[**成为Medium会员**](https://medium.com/@17.rsuraj/membership)以**访问无限**的Medium故事和每日有趣的Medium摘要。我将获得你费用的一小部分，对你没有额外费用。
- en: 💡 Be sure to [**Sign-up to my Email list**](https://medium.com/subscribe/@17.rsuraj)
    to never miss another article on data science guides, tricks, and tips, SQL, and
    Python.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 💡 确保[**注册我的邮件列表**](https://medium.com/subscribe/@17.rsuraj)，以便不错过任何关于数据科学指南、技巧和提示、SQL
    和 Python 的文章。
- en: To know more about my project, Comment your question!
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解更多关于我的项目，请评论你的问题！
- en: Thank you for reading!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你的阅读！
