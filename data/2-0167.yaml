- en: A Brief Introduction to SciKit Pipelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SciKit管道简要介绍
- en: 原文：[https://towardsdatascience.com/a-brief-introduction-to-scikit-pipelines-888edc86da9b](https://towardsdatascience.com/a-brief-introduction-to-scikit-pipelines-888edc86da9b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-brief-introduction-to-scikit-pipelines-888edc86da9b](https://towardsdatascience.com/a-brief-introduction-to-scikit-pipelines-888edc86da9b)
- en: And why you should start using them.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以及你为什么应该开始使用它们。
- en: '[](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)[![Jonte
    Dancker](../Images/29e37a1a1cabc15cfb90a860b2931f03.png)](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)
    [Jonte Dancker](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)[![Jonte
    Dancker](../Images/29e37a1a1cabc15cfb90a860b2931f03.png)](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)
    [Jonte Dancker](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)
    ·7 min read·Aug 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)
    ·阅读时间7分钟·2023年8月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f2987996b1c9e2cc8de667615c02c9c0.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2987996b1c9e2cc8de667615c02c9c0.png)'
- en: Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Have you ever trained a machine learning model and your predictions looked too
    good to be true? But then you realized that you had some data leakage between
    your training and testing data?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经训练过机器学习模型，结果看起来太过理想？但后来你发现你的训练数据和测试数据之间存在一些数据泄露？
- en: Or have you had many pre-processing steps to prepare your data so that it was
    difficult to transfer the pre-processing steps from your model training into production
    to make actual predictions?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你是否有许多预处理步骤来准备数据，以至于难以将预处理步骤从模型训练迁移到生产中以进行实际预测？
- en: Or your pre-processing becomes messy and it is hard to share you code in a readable
    and easy to understand manner?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你的预处理变得混乱，难以以可读和易于理解的方式分享你的代码？
- en: Then you might want to try `scikit-learn`’s Pipeline. The Pipeline is an elegant
    solution to set up your workflow for ML training, testing, and in production,
    making your life easier and your results more reproducible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可能想尝试`scikit-learn`的管道。管道是设置你的机器学习训练、测试和生产工作流的优雅解决方案，使你的工作更加轻松，结果更具可重复性。
- en: But what is a pipeline, what are the benefits, and how do you set up a pipeline?
    I will go through these questions and give you some code examples of the building
    blocks. By combining these building blocks you can build more sophisticated pipelines,
    which are tailored to your needs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么什么是管道？它有哪些好处？如何设置管道？我将探讨这些问题，并给出一些构建模块的代码示例。通过结合这些构建模块，你可以构建更复杂的管道，这些管道是针对你需求量身定制的。
- en: What is a Pipeline?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是管道？
- en: A pipeline allows you to assemble several steps in your ML workflow that sequentially
    transform your data before passing the data to an estimator. Hence, a pipeline
    can consist of pre-processing, feature engineering and feature selection steps
    before passing the data to a final estimator for classification or regression
    tasks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 管道允许你在机器学习工作流中组装多个步骤，这些步骤按顺序转换数据，然后将数据传递给估算器。因此，管道可以包括预处理、特征工程和特征选择步骤，然后将数据传递给最终的估算器进行分类或回归任务。
- en: Why should I use a Pipeline?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我为什么要使用管道？
- en: In general, using a pipeline makes your life easier and speeds up the development
    of your ML models. This is because a pipeline
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，使用管道会使你的工作更轻松，并加快机器学习模型的开发。这是因为管道
- en: leads to cleaner and better understandable code
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导致更干净、更易于理解的代码
- en: is easy to replicate and understand data workflows
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于复制和理解数据工作流
- en: is easier to read and adjust
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更易于阅读和调整
- en: makes data preparation faster as the pipeline automates data preparation
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使数据准备更快，因为管道自动化了数据准备
- en: helps avoid data leakage
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于避免数据泄露
- en: allows hyperparameter optimization to be run over all estimators and parameters
    in the pipeline at once
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许对管道中的所有估计器和参数进行一次超参数优化
- en: is convenient as you only have to call `fit()` and `predict()` once to run your
    entire data pipeline
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方便的是，你只需调用一次`fit()`和`predict()`就能运行整个数据管道
- en: After you have trained and optimized your model and are happy with the results,
    you can easily save the trained pipeline. Then, whenever you want to run your
    model, just load the pre-trained pipeline and you are ready to do some inference.
    With this you can easily share your model in a very clean way, which is easy to
    replicate and understand.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练和优化模型并对结果满意后，你可以轻松保存训练好的管道。然后，每当你想运行模型时，只需加载预训练的管道，你就可以开始推理。这样，你可以以非常干净的方式分享你的模型，易于复制和理解。
- en: How do I set up a Pipeline?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设置管道？
- en: Setting up a pipeline with `scikit-learn` is very simple and straightforward.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`scikit-learn`的管道非常简单直接。
- en: '`scikit-learn`’s `Pipeline` uses a list of key-value pairs which contains the
    transformers you want to apply on your data as values. The keys you can choose
    arbitrarily. The keys can be used to access the parameters of the transformers,
    for example, when running a grid search during a hyperparameter optimization.
    As the transformers are stored in a list you can also access the transformers
    by indexing.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`scikit-learn`的`Pipeline`使用包含你要应用于数据的变换器的键值对列表。你可以任意选择键。键可以用来访问变换器的参数，例如，在超参数优化过程中运行网格搜索时。由于变换器存储在列表中，你也可以通过索引访问变换器。'
- en: To fit data on your pipeline and make predictions you can then run `fit()` and
    `predict()` as you would to with any transformer or regressor in `scikit-learn`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要在管道中拟合数据并进行预测，你可以像使用任何`scikit-learn`中的变换器或回归器一样运行`fit()`和`predict()`。
- en: 'A very simple pipeline could look like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常简单的管道可能如下所示：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`scikit-learn`, however, makes your life even easier if you do not want to
    enter key values for your transformers. Instead you can just use the `make_pipeline()`
    function and `scikit-learn` sets the names based on the transformer’s class name.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，`scikit-learn`还让你的生活更轻松，如果你不想为变换器输入键值，可以使用`make_pipeline()`函数，`scikit-learn`会根据变换器的类名设置名称。
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That’s it. With this you have quickly set up a simple pipeline that you can
    start using to train a model and run predictions with. If you want to have a look
    at how your pipeline looks, you can just print the pipeline and `scikit-learn`
    shows you an interactive view of the pipeline.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。这样你就快速设置了一个简单的管道，可以开始用它来训练模型和运行预测。如果你想查看管道的样子，可以直接打印管道，`scikit-learn`会向你展示管道的交互视图。
- en: But what if you want to build something more complex and customizable? For example,
    handle categorical and numerical values differently, add features or transform
    the target value.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想构建更复杂和可自定义的东西怎么办？例如，不同地处理分类值和数值，添加特征或转换目标值。
- en: 'No worries, `scikit-learn` provides additional functionality with which you
    can create more custom pipelines and bring your pipelines to the next level. These
    functions are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心，`scikit-learn`提供了额外的功能，可以创建更自定义的管道，并将管道提升到更高的水平。这些功能包括：
- en: '`ColumnTransformer`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ColumnTransformer`'
- en: '`FeatureUnion`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FeatureUnion`'
- en: '`TransformedTargetRegressor`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TransformedTargetRegressor`'
- en: I will go through them and show you examples of how to use them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我将逐一讲解它们，并展示如何使用的示例。
- en: Transforming selected features
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换选定的特征
- en: If you have different kinds of features, e. g., continuous and categorical,
    you probably want to transform these features differently. For example, scale
    the continuous features while one-hhot-encode the categorical features.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有不同类型的特征，例如，连续和分类特征，你可能会希望对这些特征进行不同的转换。例如，对连续特征进行缩放，而对分类特征进行独热编码。
- en: You could do these pre-processing steps before passing your features into the
    pipeline. But by doing so you would not be able to include these pre-processing
    steps and parameters in your hyperparameter search later. Also, including them
    in the pipeline makes handling your ML model much easier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在将特征传递到管道之前进行这些预处理步骤。但这样做的话，你无法将这些预处理步骤和参数包含在以后的超参数搜索中。而且，将它们包含在管道中可以使处理你的机器学习模型更为简便。
- en: To apply a transformation or even a sequence of transformations only to selected
    columns you can use the `ColumnTransformer`. The use is very similar to `Pipeline`
    as instead of passing a key-value pair to `steps` we just pass the same pairs
    to `transformers`. We can then include the created transformer as one step in
    our pipeline.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要对选择的列应用变换或一系列变换，可以使用`ColumnTransformer`。其使用方式与`Pipeline`非常相似，只不过我们将相同的键值对传递给`transformers`而不是`steps`。然后，我们可以将创建的变换器作为管道中的一个步骤包含进来。
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since we only want to run the transformation on certain columns, we need to
    pass these columns in the pipeline. Moreover, we can let the `ColumnTransformer`
    know what we want to do with the remaining columns. For example, if you want to
    keep the columns that are not changed by the transformer you need to set `remainder`
    to `passthrough`. Otherwise, the columns get dropped. Instead of doing nothing
    or dropping the columns you could also transform the remaining columns by passing
    a transformer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只想对某些列进行变换，我们需要在管道中传递这些列。此外，我们还可以让`ColumnTransformer`知道我们希望对其余列做什么。例如，如果你想保留那些未被变换器更改的列，你需要将`remainder`设置为`passthrough`。否则，这些列将被丢弃。除了什么都不做或丢弃列，你还可以通过传递一个变换器来变换剩余的列。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: from sklearn.compose import ColumnTransformer
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.compose import ColumnTransformer
- en: from sklearn.impute import SimpleImputer
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.impute import SimpleImputer
- en: from sklearn.pipeline import Pipeline
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.pipeline import Pipeline
- en: from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
- en: categorical_transformer = Pipeline(steps=[("encode", OneHotEncoder())])
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: categorical_transformer = Pipeline(steps=[("encode", OneHotEncoder())])
- en: numerical_transformer = Pipeline(
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: numerical_transformer = Pipeline(
- en: steps=[("imputation", SimpleImputer()), ("scaling", MinMaxScaler())]
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: steps=[("imputation", SimpleImputer()), ("scaling", MinMaxScaler())]
- en: )
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: preprocessor = ColumnTransformer(
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: preprocessor = ColumnTransformer(
- en: transfomers=[
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: transfomers=[
- en: ("numeric", numerical_transformer),
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("numeric", numerical_transformer),
- en: ("categoric", categorical_transformer, ["col_name"]),
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("categoric", categorical_transformer, ["col_name"]),
- en: ']'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: )
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: pipeline = Pipeline(steps=["preprocesssing", preprocessor])
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: pipeline = Pipeline(steps=["preprocesssing", preprocessor])
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: from sklearn.compose import FeatureUnion
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.compose import FeatureUnion
- en: from sklearn.pipeline import Pipeline
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.pipeline import Pipeline
- en: preprocessor = (
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: preprocessor = (
- en: FeatureUnion(
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: FeatureUnion(
- en: '['
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '['
- en: ("moving_Average", MovingAverage(window=30)),
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("moving_Average", MovingAverage(window=30)),
- en: ("numerical", numerical_pipeline),
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("numerical", numerical_pipeline),
- en: ']'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: ),
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: )
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: pipeline = Pipeline(steps=["preprocesssing", preprocessor])
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: pipeline = Pipeline(steps=["preprocesssing", preprocessor])
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: from sklearn.compose import TransformedTargetRegressor
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.compose import TransformedTargetRegressor
- en: from sklearn.impute import SimpleImputer
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.impute import SimpleImputer
- en: from sklearn.pipeline import Pipeline
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.pipeline import Pipeline
- en: from sklearn.preprocessing import MinMaxScaler
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import MinMaxScaler
- en: regressor = TransformedTargetRegressor(
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: regressor = TransformedTargetRegressor(
- en: regressor=model,
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: regressor=model,
- en: func=np.log1p,
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func=np.log1p,
- en: inverse_func=np.expm1
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: inverse_func=np.expm1
- en: )
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: pipeline = Pipeline(
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: pipeline = Pipeline(
- en: steps=[
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: steps=[
- en: ("imputer", SimpleImputer()),
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("imputer", SimpleImputer()),
- en: ("scaler", MinMaxScaler()),
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("scaler", MinMaxScaler()),
- en: ("regressor", regressor)
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("regressor", regressor)
- en: ']'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: )
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: pipeline.fit(X_train, y_train)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: pipeline.fit(X_train, y_train)
- en: y_pred = pipeline.predict(X_test)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = pipeline.predict(X_test)
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: from sklearn.base import BaseEstimator, TransformerMixin
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.base import BaseEstimator, TransformerMixin
- en: from sklearn.impute import SimpleImputer
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.impute import SimpleImputer
- en: from sklearn.pipeline import Pipeline
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.pipeline import Pipeline
- en: from sklearn.preprocessing import MinMaxScaler
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import MinMaxScaler
- en: 'class MovingAverage(BaseEstimator, TransformerMixin):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'class MovingAverage(BaseEstimator, TransformerMixin):'
- en: 'def __init__(self, window=30):'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, window=30):'
- en: self.window = window
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.window = window
- en: 'def fit(self, X, y=None):'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def fit(self, X, y=None):'
- en: return self
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return self
- en: 'def transform(self, X, y=None):'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def transform(self, X, y=None):'
- en: return X.rolling(window=self.window, min_periods=1, center=False).mean()
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return X.rolling(window=self.window, min_periods=1, center=False).mean()
- en: pipeline = Pipeline(
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: pipeline = Pipeline(
- en: steps=[
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: steps=[
- en: ("ma", MovingAverage(window=30)),
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("ma", MovingAverage(window=30)),
- en: ("imputer", SimpleImputer()),
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("imputer", SimpleImputer()),
- en: ("scaler", MinMaxScaler()),
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("scaler", MinMaxScaler()),
- en: ("regressor", model),
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("regressor", model),
- en: ']'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: )
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: pipeline.fit(X_train, y_train)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: pipeline.fit(X_train, y_train)
- en: y_pred = pipeline.predict(X_test)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = pipeline.predict(X_test)
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: from sklearn import set_config
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn import set_config
- en: set_config(transform_output = "pandas")
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: set_config(transform_output = "pandas")
- en: '```'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: When running a hyperparameter optimization or when checking single parameters
    of your pipeline, it can be helpful to access the parameters directly. To access
    parameters you can use the `<estimator>__<parameter>`syntax. For example, in the
    above example, of the moving average we could access the window width of the MovingAverage
    transformer by calling `pipeline.set_params(pipeline__ma_window=7)`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行超参数优化或检查Pipeline的单个参数时，直接访问参数可能会很有帮助。要访问参数，你可以使用`<estimator>__<parameter>`语法。例如，在上述示例中，我们可以通过调用`pipeline.set_params(pipeline__ma_window=7)`来访问MovingAverage转换器的窗口宽度。
- en: Conclusion
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Using `scikit-learn`’s Pipeline can make your life a lot easier when developing
    new ML models and setting up the pre-processing steps. Besides having many benefits,
    setting up a Pipeline is also simple and straightforward. Nevertheless, you can
    build sophisticated and customizable pre-processing Pipelines in which only your
    creativity sets the boundaries.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`scikit-learn`的Pipeline可以大大简化你在开发新机器学习模型和设置预处理步骤时的工作。除了拥有许多好处之外，设置Pipeline也很简单直接。不过，你可以构建复杂且可定制的预处理Pipeline，其中只有你的创造力限制了边界。
- en: If you liked this article or have any questions, feel free to leave a comment
    or reach out to me. I am also interested in your experiences with `scikit-learn`’s
    Pipeline.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章或有任何问题，随时留言或联系我。我也对你使用`scikit-learn`的Pipeline的经验感兴趣。
- en: 'Do you want to read more about Pipelines, check out the following link:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于Pipeline的信息，请查看以下链接：
- en: '[https://scikit-learn.org/stable/modules/compose.html#pipeline](https://scikit-learn.org/stable/modules/compose.html#pipeline)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://scikit-learn.org/stable/modules/compose.html#pipeline](https://scikit-learn.org/stable/modules/compose.html#pipeline)'
