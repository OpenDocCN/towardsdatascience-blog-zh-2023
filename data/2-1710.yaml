- en: What is pyproject.toml in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的 pyproject.toml 是什么
- en: 原文：[https://towardsdatascience.com/pyproject-python-9df8cc092f61](https://towardsdatascience.com/pyproject-python-9df8cc092f61)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pyproject-python-9df8cc092f61](https://towardsdatascience.com/pyproject-python-9df8cc092f61)
- en: Managing Python project dependencies in pyproject.toml files
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理 Python 项目依赖的 `pyproject.toml` 文件
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)
    ·5 min read·May 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)
    ·5 分钟阅读·2023年5月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f52d5d1a92753c16cb2f548c0ac9aecd.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f52d5d1a92753c16cb2f548c0ac9aecd.png)'
- en: Photo by [Fré Sonneveld](https://unsplash.com/@fresonneveld?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/chain?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Fré Sonneveld](https://unsplash.com/@fresonneveld?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/s/photos/chain?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Dependency management in Python is tricky, and sometimes frustrating work. Newcomers,
    are usually tempted to install any dependency (i.e. package) they may find useful,
    even in a single virtual enviroment. Therefore, this approach increases the chances
    of having conflicting package dependencies and ending up in the so-called **dependency
    hell**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的依赖管理既复杂又令人沮丧。新手通常倾向于安装他们认为有用的任何依赖（即包），即使是在一个虚拟环境中。因此，这种方法增加了依赖包冲突的可能性，并最终陷入所谓的
    **依赖地狱**。
- en: In a couple of my previous articles, we covered a few different methods for
    handling dependencies in Python projects, using `setup.py`, `setup.cfg` and `requirements.txt`
    files. However, as of Python 3.6, a new standard configuration file called `pyproject.toml`
    was introduced, and aims to simplify the way users manage dependencies and metadata
    definitions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前的几篇文章中，我们介绍了几种处理 Python 项目依赖的方法，包括 `setup.py`、`setup.cfg` 和 `requirements.txt`
    文件。然而，从 Python 3.6 开始，推出了一种新的标准配置文件 `pyproject.toml`，旨在简化用户管理依赖和元数据定义的方式。
- en: Over the last few years, the `pyproject.toml` file has become the standard (and
    most popular) way for managing depdendeices in Python projects. In the next few
    sections we will explore how dependency management can be achieved using this
    file. Furthermore, we will also demonstrate how to install a Project with `pyproject.toml`
    specification in editable mode.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，`pyproject.toml` 文件已成为管理 Python 项目依赖的标准（也是最受欢迎的）方式。在接下来的几个部分中，我们将深入探讨如何使用该文件实现依赖管理。此外，我们还将演示如何在可编辑模式下安装具有`pyproject.toml`
    规范的项目。
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[**订阅数据管道**](https://thedatapipeline.substack.com/welcome)**，这是一个专注于数据工程的新闻通讯**'
- en: Dependency management prior to pyproject.toml
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pyproject.toml 之前的依赖管理
- en: When Python was first released, the defacto package used for building distributions
    was `distutils`. Over time, `setuptools` made its appearence aiming to build additional
    features on top of `distutils`. Both tools made use of a `setup.py` file where
    users could specify dependencies and metadata used as part of the package build
    distribution.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 首次发布时，用于构建发行版的事实标准工具是 `distutils`。随着时间的推移，`setuptools` 出现，旨在在 `distutils`
    的基础上构建额外功能。这两个工具都使用了一个 `setup.py` 文件，用户可以在其中指定依赖项和用于软件包构建分发的元数据。
- en: This however, has created an issue given that any project that chooses to use
    `setuptools` must be import the package in `setup.py` file. Therefore, `setup.py`
    cannot be executed without knowing its dependencies but at the same time, the
    purpose of the file itself is to determine these dependencies. And this is how
    we ended up with the so-called chicken and egg problem in Python dependency management.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这造成了一个问题，因为任何选择使用 `setuptools` 的项目必须在 `setup.py` 文件中导入该包。因此，`setup.py` 在不知道其依赖项的情况下不能执行，但同时，该文件的目的就是确定这些依赖项。这就是我们在
    Python 依赖管理中遇到所谓的鸡和蛋问题的原因。
- en: I hope this information is enough to understand why a new approach was required.
    If you are interested in learning more about a more detailed explanation of the
    chicken-and-egg problem with `setuptools` and `pip` make sure to read [PEP-518](https://peps.python.org/pep-0518/#rationale).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这些信息足以让你理解为何需要一种新的方法。如果你有兴趣了解有关 `setuptools` 和 `pip` 的鸡和蛋问题的更详细解释，确保阅读 [PEP-518](https://peps.python.org/pep-0518/#rationale)。
- en: The new propasal, which is part of PEP-518, aimed to specify a new way for Python
    projects to list their dependencies upfront, so that tools like `pip` can make
    sure they are installed prior to the project build.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 新提案（PEP-518 的一部分）旨在为 Python 项目指定一种新的方式来提前列出其依赖项，以便像 `pip` 这样的工具可以确保在项目构建之前安装它们。
- en: The pyproject.toml
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pyproject.toml
- en: The `pyproject.tom` file was introduced as part of the Python Enhancement Proposal
    [(PEP) 518](https://peps.python.org/pep-0518/), that specifies how Python projects
    must specify build dependencies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproject.toml` 文件作为 Python 增强提案 [(PEP) 518](https://peps.python.org/pep-0518/)
    的一部分被引入，规定了 Python 项目必须如何指定构建依赖项。'
- en: These build dependeencies will be stored in the file that is located at the
    root directory of the project and follows the TOML (Tom’s Obvious, Minimal Language)
    syntax.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些构建依赖项将被存储在位于项目根目录的文件中，该文件遵循TOML（Tom’s Obvious, Minimal Language）语法。
- en: It contains metadata information such as the project name, version, description,
    author, license, and various other details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含了元数据，例如项目名称、版本、描述、作者、许可证以及各种其他细节。
- en: One of the key features of the `pyproject.toml` file is the ability to define
    project dependencies. This allows developers to specify the packages and their
    versions required for the project to run properly. This helps in maintaining the
    consistency of the project and ensures that the project can be easily reproduced
    by other developers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproject.toml` 文件的一个关键特性是能够定义项目依赖项。这允许开发人员指定运行项目所需的包及其版本。这有助于保持项目的一致性，并确保其他开发人员可以轻松地重现该项目。'
- en: The `pyproject.toml` file also supports the concept of `extras` which allows
    developers to define optional dependencies for a project. This allows users to
    install only the necessary dependencies in order to run the project. Usually,
    in the `extras` section one could specify additional requirements that will be
    used as part of testing (e.g. `pytest`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproject.toml` 文件还支持 `extras` 概念，允许开发人员为项目定义可选依赖项。这使得用户可以仅安装运行项目所需的必要依赖项。通常，在
    `extras` 部分可以指定作为测试一部分的额外需求（例如 `pytest`）。'
- en: In addition to the standard metadata and dependencies, `pyproject.toml` file
    also supports custom fields that can be used by third-party tools. As an example,
    you can consider linters, formatters and checkers such as `black` and `mypy`.
    This allows developers to extend the functionality of the file and add custom
    fields as per their requirements.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的元数据和依赖项外，`pyproject.toml` 文件还支持自定义字段，第三方工具可以使用这些字段。例如，你可以考虑使用 `black` 和
    `mypy` 等代码检查工具、格式化工具和校验工具。这允许开发人员扩展文件的功能，并根据需要添加自定义字段。
- en: Managing dependencies in `pyproject.toml`
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理 `pyproject.toml` 中的依赖项
- en: '`pyprojet.toml` can be used with package dependency management tools, such
    as `setuptools` and `poetry`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproject.toml` 可以与包依赖管理工具一起使用，例如 `setuptools` 和 `poetry`。'
- en: 'Here’s an example file for a project using `poetry`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 `poetry` 的项目示例文件：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here’s an example with `setuptools`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 `setuptools` 的示例：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing project in editable mode from pyproject.toml
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 `pyproject.toml` 安装项目的可编辑模式
- en: If you are actively developing a project, the chances are you may want to install
    the project locally in editable mode. When installing a package in editable mode
    from a specific location, any changes made to the source code will be reflected
    immediately in the environment (without you having to re-install the “new” version).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在积极开发一个项目，你可能希望将项目本地安装为可编辑模式。当从特定位置以可编辑模式安装包时，对源代码的任何更改会立即在环境中反映出来（而无需重新安装“新”版本）。
- en: Assuming you are using `poetry` to manage your Python dependencies and in order
    to install a Python project in editable mode, you need to have the following content
    in your `pyproject.toml` file
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用 `poetry` 来管理你的 Python 依赖，并且为了以可编辑模式安装 Python 项目，你需要在 `pyproject.toml`
    文件中包含以下内容
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: and from the project’s root directory, simply run
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目的根目录，只需运行
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Alternatively, a `poetry install` will also result in editable install. You
    can find out more on how to manage your Python projects’ dependencies with Poetry,
    in one of my latest articles:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，`poetry install` 也会导致可编辑安装。你可以在我最新的文章中了解更多关于如何使用 Poetry 管理 Python 项目依赖的内容：
- en: '[](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
    [## Managing Python Dependencies with Poetry'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
    [## 使用 Poetry 管理 Python 依赖'
- en: Dependency management and packaging with Poetry
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Poetry 进行依赖管理和打包
- en: towardsdatascience.com](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
- en: Final Thoughts
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的思考
- en: In today’s article we discussed about the usage of `pyproject.toml` in Python
    when it comes to managing dependencies and distributing projects across the community.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的文章中，我们讨论了在管理依赖和在社区中分发项目时 `pyproject.toml` 在 Python 中的使用。
- en: Overall `pyproject.toml` provides a standard and easy-to-use configuration for
    Python projects. It simplifies the process of defining metadata and dependencies,
    and ensures that the project can be easily reproduced by other developers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，`pyproject.toml` 提供了一个标准且易于使用的 Python 项目配置。它简化了定义元数据和依赖的过程，并确保项目可以被其他开发者轻松重现。
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[**订阅数据管道**](https://thedatapipeline.substack.com/welcome)**，一个专注于数据工程的新闻通讯**'
- en: '**Related articles you may also like**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关的文章你可能也喜欢**'
- en: '[](/setuptools-python-571e7d5500f2?source=post_page-----9df8cc092f61--------------------------------)
    [## setup.py vs setup.cfg in Python'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/setuptools-python-571e7d5500f2?source=post_page-----9df8cc092f61--------------------------------)
    [## setup.py 与 setup.cfg 在 Python 中的区别'
- en: Using setuptools to manage dependencies and distribute your Python packages
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 setuptools 管理依赖和分发 Python 包
- en: towardsdatascience.com](/setuptools-python-571e7d5500f2?source=post_page-----9df8cc092f61--------------------------------)
    [](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----9df8cc092f61--------------------------------)
    [## requirements.txt vs setup.py in Python
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/setuptools-python-571e7d5500f2?source=post_page-----9df8cc092f61--------------------------------)
    [](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----9df8cc092f61--------------------------------)
    [## requirements.txt 与 setup.py 在 Python 中的区别
- en: Understanding the purpose of requirements.txt, setup.py and setup.cfg in Python
    when developing and distributing…
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解在 Python 开发和分发中 `requirements.txt`、`setup.py` 和 `setup.cfg` 的目的……
- en: towardsdatascience.com](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----9df8cc092f61--------------------------------)
    [](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
    [## Managing Python Dependencies with Poetry
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----9df8cc092f61--------------------------------)
    [](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
    [## 使用 Poetry 管理 Python 依赖
- en: Dependency management and packaging with Poetry
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Poetry 进行依赖管理和打包
- en: towardsdatascience.com](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
