- en: How To Solve Optimization Problems Using Linear Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用线性规划解决优化问题
- en: 原文：[https://towardsdatascience.com/how-to-solve-optimisation-problems-using-linear-programming-912cc951afbb](https://towardsdatascience.com/how-to-solve-optimisation-problems-using-linear-programming-912cc951afbb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-solve-optimisation-problems-using-linear-programming-912cc951afbb](https://towardsdatascience.com/how-to-solve-optimisation-problems-using-linear-programming-912cc951afbb)
- en: An introduction to linear programming and how to solve it using the graphical
    and simplex algorithms
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性规划的介绍以及如何使用图形法和单纯形算法解决线性规划问题
- en: '[](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)
    ·7 min read·Jul 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)
    ·7分钟阅读·2023年7月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8f8bc85a775d8dd0a1009a32df6eeacd.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f8bc85a775d8dd0a1009a32df6eeacd.png)'
- en: Photo by [Isaac Smith](https://unsplash.com/es/@isaacmsmith?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Isaac Smith](https://unsplash.com/es/@isaacmsmith?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: '[**Linear programming (LP)**](https://en.wikipedia.org/wiki/Linear_programming)
    is an optimization technique that is used to find the best solution, from a specified
    *objective function*, subject to some *constraints*. It is applied in sundry industries
    ranging from finance to e-commerce, so it’s well worth knowing if you are a Data
    Scientist. The key feature of LP is the [**linear**](https://en.wikipedia.org/wiki/Linear_equation)part,
    which means that the constraints and objective function are all formulated as
    a linear relationship. In this post, we will run through an example LP problem
    and how it can be solved using the [**simplex algorithm**](https://en.wikipedia.org/wiki/Simplex_algorithm)and
    the [**graphical method**](https://www.toppr.com/guides/maths/linear-programming/graphical-method-of-solving-a-linear-programming-problem/).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[**线性规划 (LP)**](https://en.wikipedia.org/wiki/Linear_programming) 是一种优化技术，用于从指定的*目标函数*中找到最佳解决方案，受某些*约束*的限制。它广泛应用于从金融到电子商务等各个行业，因此，如果你是数据科学家，了解它是非常值得的。LP的关键特性是[**线性**](https://en.wikipedia.org/wiki/Linear_equation)部分，这意味着约束和目标函数都被表述为线性关系。在这篇文章中，我们将通过一个示例LP问题，讲解如何使用[**单纯形算法**](https://en.wikipedia.org/wiki/Simplex_algorithm)和[**图形法**](https://www.toppr.com/guides/maths/linear-programming/graphical-method-of-solving-a-linear-programming-problem/)解决它。'
- en: Graphical Method
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形法
- en: Basic Problem
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本问题
- en: We will start with the graphical method as thats the simplest to understand
    and gives us real intuition behind LP.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从图形法开始，因为它最简单易懂，并能给我们真实的线性规划直觉。
- en: Let’s say we run a small business selling smoothies for **£3** and coffees for
    **£2**, these are our two *decision variables****.*** Due to our ingredient constraints,
    we can only produce **75** smoothies and **100** coffees daily. Furthermore, we
    only have **140** cups available each day to serve our smoothies and coffees.
    Now, let’s formulate this as an LP problem!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们经营一家小型商店，出售**£3**的果昔和**£2**的咖啡，这就是我们的两个*决策变量*。由于原料限制，我们每天最多只能生产**75**杯果昔和**100**杯咖啡。此外，我们每天只有**140**个杯子来供应我们的果昔和咖啡。现在，让我们将这个问题形式化为一个线性规划（LP）问题！
- en: Formulation
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公式化
- en: 'If we let ***x*** be smoothies and ***y*** be coffee, then we want to maximise
    the following objective function, ***c,*** as a function of the decision variables:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们让***x***代表果昔，***y***代表咖啡，那么我们想要最大化以下目标函数***c***，作为决策变量的函数：
- en: '![](../Images/86d5d4b66aeee55d3319ef64580abf0f.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86d5d4b66aeee55d3319ef64580abf0f.png)'
- en: Equation in LaTeX by author.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 方程由作者用 LaTeX 编写。
- en: 'Subject to the following constraints:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 受以下约束条件限制：
- en: '![](../Images/9afab927c71e80569159206a366cf00e.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9afab927c71e80569159206a366cf00e.png)'
- en: Equation in LaTeX by author.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 方程由作者用 LaTeX 编写。
- en: The decision variables need to be non-negative.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 决策变量需要是非负的。
- en: Now it is time to plot these constraints!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是绘制这些约束条件的时候了！
- en: Plotting
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制
- en: 'As this is a two-dimensional problem, we can plot the constraints on a cartesian
    graph as straight lines (the linear part!):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个二维问题，我们可以在笛卡尔图上将约束绘制为直线（线性部分！）：
- en: '![](../Images/87afd72c7fc610e99064a21bf7f4096b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87afd72c7fc610e99064a21bf7f4096b.png)'
- en: Plot generated in Python by author.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者用 Python 生成。
- en: The grey area is known as the *feasible region*, where any solution is valid
    as it satisfies the constraint.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 灰色区域被称为 *可行区域*，在这里任何解都是有效的，因为它满足约束条件。
- en: From viewing the plot, the optimal solution appears to be in one of the corners
    where the constraints’ lines cross. This is actually called the [**fundamental
    theorem of linear programming**](https://en.wikipedia.org/wiki/Fundamental_theorem_of_linear_programming)**.**
    This theorem states that the optimal (maxima) of a linear function is in the corners
    over a [**convex polygon**](https://en.wikipedia.org/wiki/Convex_polygon) region
    (the feasibility region).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中观察，最优解似乎位于约束条件的直线交汇的角落。这实际上被称为[**线性规划基本定理**](https://en.wikipedia.org/wiki/Fundamental_theorem_of_linear_programming)**。**
    该定理指出，线性函数的最优解（最大值）位于[**凸多边形**](https://en.wikipedia.org/wiki/Convex_polygon)区域的角落（可行区域）。
- en: The optimal solution here is the **(75, 65)** corner with a value of **£355.**
    This can simply be derived from testing each corner of the feasible region.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的最优解是 **(75, 65)** 角落，值为 **£355**。这可以通过测试可行区域的每个角落简单得出。
- en: Limitation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制
- en: The above example is very simple to understand, however, what happens if we
    have another two products that our business sells? Well, it then becomes a four-dimensional
    problem. However, we humans can’t visualise that on paper. So what do we do? Well
    as every Data Scientist knows, we use an algorithm!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述例子很容易理解，但如果我们有另外两种产品我们公司销售会怎样？那么问题就变成了四维的。然而，我们人类无法在纸上可视化这一点。那么我们该怎么办呢？正如每个数据科学家所知，我们使用算法！
- en: Simplex Algorithm
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单纯形算法
- en: Intuition
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直觉
- en: The simplex algorithm was invented to solve LP problems by [**George Dantzig**](https://en.wikipedia.org/wiki/George_Dantzig)
    during the second world war. The general flow of the algorithm is to go to every
    vertex of the convex polygon and evaluate the objective function. Once we reach
    the optimal solution (we will show how we know it’s optimal), then we terminate
    the algorithm.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 单纯形算法是由[**乔治·丹茨格**](https://en.wikipedia.org/wiki/George_Dantzig)在第二次世界大战期间发明的，用于解决
    LP 问题。算法的一般流程是访问凸多边形的每个顶点并评估目标函数。一旦我们到达最优解（我们将展示如何知道它是最优的），就终止算法。
- en: In my opinion, the best way to learn the simplex algorithm is to apply it to
    a problem and explain what each step is doing. So, without further ado, let’s
    get into it!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，学习单纯形算法的最佳方法是将其应用于一个问题，并解释每一步的作用。因此，事不宜迟，让我们开始吧！
- en: The mathematical proof behind the algorithm is quite dense, so I haven’t gone
    into all the gritty details in this post. However, the interested reader can find
    it linked [here](https://pi.math.cornell.edu/~web401/matt.simplex.pdf).
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 算法背后的数学证明相当复杂，因此我在此帖中没有详细讨论所有细节。然而，感兴趣的读者可以在[此处](https://pi.math.cornell.edu/~web401/matt.simplex.pdf)找到相关链接。
- en: Walk Through
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤
- en: '***Step 1:***'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '***第 1 步：***'
- en: 'Transform the inequalities into a [**system of linear equations**](https://en.wikipedia.org/wiki/System_of_linear_equations)
    through the use of *slack variables*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 *松弛变量* 将不等式转换为[**线性方程组**](https://en.wikipedia.org/wiki/System_of_linear_equations)：
- en: '![](../Images/eb7cd68f5fe20f76067cfce5c1c38942.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb7cd68f5fe20f76067cfce5c1c38942.png)'
- en: Equation in LaTeX by author.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 方程由作者用 LaTeX 编写。
- en: Here ***s_1***, ***s_2***, and ***s_3*** are the slack variables, which literally
    pick up the slack enabling the inequalities to turn into equations. The slack
    variables are referred to as *basic variables* and the decision variables, ***x***
    and ***y***, are *non-basic variables*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 ***s_1***、***s_2*** 和 ***s_3*** 是松弛变量，它们字面上“弥补”了不等式，使其转变为方程。松弛变量被称为 *基本变量*，而决策变量
    ***x*** 和 ***y*** 被称为 *非基本变量*。
- en: '***Step 2:***'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '***第 2 步：***'
- en: 'Construct the equations into a *tableau*, where each equation is given its
    own row and the objective function is the bottom row:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将方程构建成一个*表格*，其中每个方程有自己的一行，目标函数在底部行：
- en: '![](../Images/9168f49baf1e01f943dce03e72f33826.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9168f49baf1e01f943dce03e72f33826.png)'
- en: Initial tableau of constraints and objective function. Diagram by author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 约束条件和目标函数的初始表格。图示由作者提供。
- en: This is known as the *initial basic solution* and corresponds to the **(0,0)**
    vertex in the plot we showed earlier.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为*初始基本解*，对应于我们之前展示的图中的**(0,0)**顶点。
- en: '***Step 3:***'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '***步骤3：***'
- en: 'Next, we need to identify the pivot column by finding the most negative entry
    in the last row. Then, we identify the pivot row by dividing the *value* column
    by the pivot column entries:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过找到最后一行中的最负值条目来识别枢轴列。然后，我们通过将*值*列除以枢轴列条目来识别枢轴行：
- en: '![](../Images/10d23e628d94a4a4032584e6998ba20f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10d23e628d94a4a4032584e6998ba20f.png)'
- en: Most negative entry in the last row. Diagram by author.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行中的最负值条目。图示由作者提供。
- en: In this instance, our pivot column is ***x****,*called the *entering variable,*and
    the corresponding pivot row is the first one, ***R1,*** as it has the smallest
    quotient.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的枢轴列是***x***，称为*进入变量*，对应的枢轴行是第一行，***R1***，因为它具有最小的商。
- en: We choose the lowest value in the bottom row as it represents the lowest coefficient
    in the objective function. Therefore, optimizing for this column will increase
    the objective function the most.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择底部行中的最低值，因为它代表了目标函数中的最低系数。因此，优化这个列将使目标函数增加最多。
- en: Furthermore, we choose the row with the smallest quotient to not violate constraints.
    More information about why this is the case can be found [here](https://math.stackexchange.com/questions/262207/steps-in-the-simplex-method).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们选择商最小的行，以不违反约束条件。有关为什么这样做的更多信息可以在[这里](https://math.stackexchange.com/questions/262207/steps-in-the-simplex-method)找到。
- en: '***Step 4:***'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '***步骤4：***'
- en: 'Using the pivot column, ***x***, and row, ***R1***, we want to make all entries
    in the pivot column ***0*** apart from ***R1\.*** We do this by either adding
    or subtracting multiples of ***R1*** with the other rows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用枢轴列，***x***，和行，***R1***，我们希望使枢轴列中的所有条目除***R1***外都为***0***。我们通过将其他行加上或减去***R1***的倍数来实现：
- en: '![](../Images/891b7e196f155efebd5f9ce28e055031.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/891b7e196f155efebd5f9ce28e055031.png)'
- en: Making every row in the x column 0 apart from the first row. Diagram by author.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使x列中的每一行为0，除了第一行。图示由作者提供。
- en: We see the new objective is **225**, which corresponds to the **(75,0)** vertex
    in the plot we showed above. So, graphically we have moved from vertex **(0,0)**
    to vertex **(75,0)**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到新的目标是**225**，这对应于我们上面展示的图中的**(75,0)**顶点。因此，从图形上看，我们已经从顶点**(0,0)**移动到顶点**(75,0)**。
- en: This step is essentially [**gaussian elimination**](https://en.wikipedia.org/wiki/Gaussian_elimination).
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这一步骤本质上是[**高斯消元法**](https://en.wikipedia.org/wiki/Gaussian_elimination)。
- en: '***Step 5:***'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '***步骤5：***'
- en: 'Repeat steps 3 and 4 until all the entries in the last row (objective function)
    are non-zero:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重复步骤3和4，直到最后一行（目标函数）中的所有条目都是非零的：
- en: '![](../Images/217056592d30479ab13218d73c0f9d35.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/217056592d30479ab13218d73c0f9d35.png)'
- en: Most negative entry in the last row. Diagram by author.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行中的最负值条目。图示由作者提供。
- en: '![](../Images/08c8be54292d9a83f5074a4d73b7b5d5.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08c8be54292d9a83f5074a4d73b7b5d5.png)'
- en: Making every row in the *y* column 0 apart from the third row. Diagram by author.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使* y *列中的每一行为0，除了第三行。图示由作者提供。
- en: Now, we have arrived at the optimal solution as there are no negatives in the
    bottom row. The optimal solution to our problem is then **£355** when ***x = 75***
    and ***y = 65***, in other words, the **(75,65)** vertex. This is the exact solution
    we found above using the graphical technique!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经达到了最佳解，因为底部行没有负值。我们问题的最佳解是**£355**，当***x = 75***和***y = 65***时，也就是说，**(75,65)**顶点。这正是我们使用图形技术上面找到的准确解！
- en: The algorithm steps themselves are not overly complicated, however, it can be
    tricky to understand what each step means. I have linked useful resources in the
    references section if you want to explore the simplex algorithm more and gain
    a deeper intuition behind the purpose of each step.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 算法步骤本身并不复杂，但理解每一步的含义可能有些棘手。如果你想更深入地探索单纯形算法并深入理解每一步的目的，我在参考文献部分提供了有用的资源链接。
- en: Other Algorithms
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他算法
- en: 'There are also more algorithms to solve LP problems. Below is a list with some
    provided links for the interested reader to check out:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的算法可以解决线性规划问题。以下是一个列表，其中包含一些提供的链接供感兴趣的读者查看：
- en: '[*Criss-cross algorithm*](https://en.wikipedia.org/wiki/Criss-cross_algorithm)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*交叉算法*](https://en.wikipedia.org/wiki/Criss-cross_algorithm)'
- en: '[*Interior point*](https://en.wikipedia.org/wiki/Interior-point_method#:~:text=Interior%2Dpoint%20methods%20(also%20referred,red%20points%20show%20iterated%20solutions.)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*内点法*](https://en.wikipedia.org/wiki/Interior-point_method#:~:text=Interior%2Dpoint%20methods%20(also%20referred,red%20points%20show%20iterated%20solutions.)'
- en: '[*Ellipsoid algorithm*](https://www.cs.princeton.edu/courses/archive/fall05/cos521/ellipsoid.pdf)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*椭圆体算法*](https://www.cs.princeton.edu/courses/archive/fall05/cos521/ellipsoid.pdf)'
- en: '[*Vaidya’s algorithm*](https://link.springer.com/article/10.1007/bf02592216)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*Vaidya 的算法*](https://link.springer.com/article/10.1007/bf02592216)'
- en: Linear Programming in Python
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的线性规划
- en: 'Fortunately, we don’t have to do the simplex algorithm by hand when solving
    LP problems! In Python, two main packages do the heavy lifting for us:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们在解决线性规划问题时不需要手动进行单纯形算法！在 Python 中，有两个主要的包为我们完成繁重的计算工作：
- en: '[*PuLP*](https://coin-or.github.io/pulp/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*PuLP*](https://coin-or.github.io/pulp/)'
- en: '[*SciPy*](https://scipy.org/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*SciPy*](https://scipy.org/)'
- en: I won’t go into how to use them in this article but [linked here](https://realpython.com/linear-programming-python/)
    is a great tutorial on applying these packages to your LP problem.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在本文中详细介绍如何使用它们，但 [这里链接](https://realpython.com/linear-programming-python/)
    提供了一个关于如何将这些包应用于你的线性规划问题的优秀教程。
- en: Summary & Further Thoughts
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要与进一步思考
- en: Linear programming (LP) is a very useful tool and can be applied to solve a
    wide range of problems, therefore is very useful for a Data Scientist to understand.
    The underlying concept behind LP is that it formulates the problem all in linear
    equations and inequalities enabling a quicker compute time. The most common method
    to solve LP problems is the simplex algorithm, which is luckily done for us in
    computing packages.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 线性规划（LP）是一个非常有用的工具，可以应用于解决广泛的问题，因此对数据科学家来说非常重要。线性规划的基本概念是将问题全部用线性方程和不等式来表述，从而实现更快的计算时间。解决线性规划问题最常见的方法是单纯形算法，幸运的是，计算包已经为我们完成了这项工作。
- en: 'The full code used in this blog can be found on my GitHub here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客中使用的完整代码可以在我的 GitHub 上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/linear-programming?source=post_page-----912cc951afbb--------------------------------)
    [## Medium-Articles/Optimisation/linear-programming at main · egorhowell/Medium-Articles'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/linear-programming?source=post_page-----912cc951afbb--------------------------------)
    [## Medium-Articles/Optimisation/linear-programming 在主分支 · egorhowell/Medium-Articles'
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我在中等博客/文章中使用的代码。通过创建账户来为 egorhowell/Medium-Articles 的开发做出贡献...
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/linear-programming?source=post_page-----912cc951afbb--------------------------------)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/linear-programming?source=post_page-----912cc951afbb--------------------------------)
- en: References & Further Reading
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献与进一步阅读
- en: '[*Some more worked examples of simplex and graphical methods*](https://www.cuemath.com/algebra/linear-programming/)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*一些单纯形和图形方法的更多实例*](https://www.cuemath.com/algebra/linear-programming/)'
- en: '[*More mathematical deep dive into LP*](https://math.mit.edu/~goemans/18310S15/lpnotes310.pdf)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*更深入的线性规划数学探讨*](https://math.mit.edu/~goemans/18310S15/lpnotes310.pdf)'
- en: '[*A more in depth worked example of the simplex algorithm*](https://math.libretexts.org/Bookshelves/Applied_Mathematics/Applied_Finite_Mathematics_(Sekhon_and_Bloom)/04%3A_Linear_Programming_The_Simplex_Method/4.02%3A_Maximization_By_The_Simplex_Method)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*单纯形算法的更深入实例*](https://math.libretexts.org/Bookshelves/Applied_Mathematics/Applied_Finite_Mathematics_(Sekhon_and_Bloom)/04%3A_Linear_Programming_The_Simplex_Method/4.02%3A_Maximization_By_The_Simplex_Method)'
- en: Another Thing!
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个事项！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的通讯，[**Dishing the Data**](https://dishingthedata.substack.com/)，在这里我每周分享成为更好的数据科学家的技巧。没有“废话”或“点击诱饵”，只有来自实践数据科学家的纯粹可操作的见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----912cc951afbb--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://newsletter.egorhowell.com/?source=post_page-----912cc951afbb--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读《Dishing The Data》，作者**Egor Howell**，这是一个Substack出版物。
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----912cc951afbb--------------------------------)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----912cc951afbb--------------------------------)'
- en: Connect With Me!
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
