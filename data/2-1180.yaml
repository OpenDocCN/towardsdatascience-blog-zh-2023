- en: How to Extend Pandas DataFrames with Custom Methods to Supercharge Code Functionality
    and Readability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何通过自定义方法扩展Pandas数据框，以增强代码的功能性和可读性
- en: 原文：[https://towardsdatascience.com/how-to-extend-pandas-dataframes-with-custom-methods-to-supercharge-code-functionality-readability-f4ae983ad715](https://towardsdatascience.com/how-to-extend-pandas-dataframes-with-custom-methods-to-supercharge-code-functionality-readability-f4ae983ad715)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-extend-pandas-dataframes-with-custom-methods-to-supercharge-code-functionality-readability-f4ae983ad715](https://towardsdatascience.com/how-to-extend-pandas-dataframes-with-custom-methods-to-supercharge-code-functionality-readability-f4ae983ad715)
- en: '**A step-by-step guide to extending pandas DataFrames with custom methods including
    full examples of how to implement extensions for conditional probability and expected
    values**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**逐步指南：如何通过自定义方法扩展pandas数据框，包括实现条件概率和期望值扩展的完整示例**'
- en: '[](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)[![Graham
    Harrison](../Images/c6bfe00c6e0cfcdf3bd042c7fdc03554.png)](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)
    [Graham Harrison](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)[![Graham
    Harrison](../Images/c6bfe00c6e0cfcdf3bd042c7fdc03554.png)](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)
    [Graham Harrison](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)
    ·6 min read·Oct 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)
    ·6分钟阅读·2023年10月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a15437590c86b85c8418a6056b45fb95.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a15437590c86b85c8418a6056b45fb95.png)'
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/hvSr_CVecVI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    拍摄，来自 [Unsplash](https://unsplash.com/photos/hvSr_CVecVI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The Problem
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Pandas data frames come with a wide range of in-built functions, but there are
    always new ways that Python programmers will want to interrogate and transform
    their data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas数据框提供了广泛的内置函数，但Python程序员总是希望以新的方式查询和转换数据。
- en: The Opportunity
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机会
- en: A common approach is to write functions and pass the data frames as parameters
    but this can become unwieldly, whereas the optimum approach would be to add new
    methods and properties directly to the pandas classes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的方法是编写函数并将数据框作为参数传递，但这可能会变得难以处理，而最佳的方法是直接向pandas类添加新的方法和属性。
- en: The Way Forward
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前进的方向
- en: It is very easy to extend the functionality of classes in pandas or any other
    library with custom methods and properties producing code which is easy to read,
    understand and re-use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展pandas或任何其他库中的类功能非常简单，只需使用自定义方法和属性即可生成易于阅读、理解和重用的代码。
- en: Background
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: I had been writing some code for a causal inference library that involved some
    complex data operations and the constant calls out to functions made the code
    difficult to read and understand.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我在为一个因果推断库编写一些代码，这涉及到一些复杂的数据操作，而频繁调用函数使得代码难以阅读和理解。
- en: I hit on the idea that if pandas data frames did the things that I was writing
    functions for natively the code would become clean, simple and easy to understand
    and it was only a small jump from there to finding out how to extend pandas myself
    …
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我想到一个主意，如果pandas数据框原生实现了我所编写的函数，那么代码将变得干净、简单且易于理解，从而很容易找到如何扩展pandas的方法……
- en: The Solution
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: The first function I wanted to implement was probability and conditional probability.
    Let us consider the following dataset …
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我想实现的第一个函数是概率和条件概率。让我们考虑以下数据集……
- en: '![](../Images/61346ad3797b5150c68255667910507b.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61346ad3797b5150c68255667910507b.png)'
- en: Image by Author
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: This is a synthetic dataset that captures the relationship between training,
    skills and income with each row representing an individual who either trained
    (or did not), acquired skills (or did not) and increased their income (or did
    not).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个合成数据集，捕捉了训练、技能和收入之间的关系，每一行代表一个个体，该个体要么接受了训练（或没有），获得了技能（或没有），收入增加了（或没有）。
- en: It would be very useful to know — given our data what is the probability that
    training was received.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 了解数据后，知道训练是否接受过将会非常有用。
- en: 'This can be expressed as a mathematical formula as follows: **ℙ(𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1)**
    which means “what is the probability that training = 1?”.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以表示为一个数学公式如下：**ℙ(𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1)**，意思是“训练=1的概率是多少？”。
- en: The traditional way of working this out would be to write specific code to filter
    the `DataFrame` down to just the rows where `training==1` and count the rows in
    the filter as a proportion of the overall data ...
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的做法是编写特定的代码，将 `DataFrame` 筛选到仅包含 `training==1` 的行，并计算过滤后的行数占整体数据的比例…
- en: This is fairly straightforward, but specific code has to be written every time
    a probability needs to be calculated and it is not immediately obvious that this
    code relates to probabilities. Wouldn’t it be much better if we could simple write
    `df_training.probability("p(training=1)")`?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当直接，但每次需要计算概率时必须编写特定代码，而且这段代码与概率的关系并不立即显现。如果我们能简单地写 `df_training.probability("p(training=1)")`
    不是更好吗？
- en: Well, it turns out that this can be done in just 7 lines of program code for
    any probability or conditional probability!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，事实证明，这可以用 7 行程序代码完成，无论是任何概率还是条件概率！
- en: The Complete Source Code for Probabilities
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概率的完整源代码
- en: Here is the full code followed by a detailed explanation…
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整代码及详细解释…
- en: Understanding the Regular Expressions
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解正则表达式
- en: The code has been significantly compacted by using regular expressions to implement
    string parsing and whilst this is not an article about regular expressions it
    would be useful to take a moment to understand them …
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用正则表达式来实现字符串解析，代码已经大大压缩，尽管这不是关于正则表达式的文章，但花点时间理解它们会很有用…
- en: It is easier to understand a regular expression by using one of the freely available
    parsers like [https://regex101.com/](https://regex101.com/). Armed with regex101
    it is easy to unpack and explain the regular expressions that have been used …
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像 [https://regex101.com/](https://regex101.com/) 这样的免费解析器来理解正则表达式会更容易。有了 regex101，解析和解释使用的正则表达式变得简单…
- en: '`VARIABLE_REGEX` - `[a-zA-Z0-9_ "\'']+` matches variable names, for example
    "SurnameField", "ABC123", X, training etc.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VARIABLE_REGEX` - `[a-zA-Z0-9_ "\'']+` 匹配变量名，例如 "SurnameField", "ABC123",
    X, training 等等。'
- en: '`OPERATOR_REGEX` - `=|<|<=|>|>=|!=` matches the common mathematical operators
    i.e. =, <, <=, >, >=, !='
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPERATOR_REGEX` - `=|<|<=|>|>=|!=` 匹配常见的数学运算符，即 =, <, <=, >, >=, !='
- en: '`VALUE_REGEX` - `\''[^\'']*\''|\"[^\"]*\"|-?\d+\.?\d*` matches a value, for
    example 48.52, 5, "01/01/2023", ''Hello'' etc.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VALUE_REGEX` - `\''[^\'']*\''|\"[^\"]*\"|-?\d+\.?\d*` 匹配一个值，例如 48.52, 5, "01/01/2023",
    ''Hello'' 等等。'
- en: '`ASSIGNMENT_REGEX` then concatenates those expression to identify the pattern
    VARIABLE, OPERATOR, VALUE.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`ASSIGNMENT_REGEX` 然后将这些表达式连接起来以识别模式 VARIABLE, OPERATOR, VALUE。'
- en: For example …
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如…
- en: '`re.findall(ASSIGNMENT_REGEX, "training=1, income=0")` will parse `"training=1,
    income=0"` into `[(''training'', ''='', ''1''), (''income'', ''='', ''0'')]`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.findall(ASSIGNMENT_REGEX, "training=1, income=0")` 将 `"training=1, income=0"`
    解析为 `[(''training'', ''='', ''1''), (''income'', ''='', ''0'')]`'
- en: Finally we have `PROB_REGEX` - `(?i)^p\(([^|]+)(?:\s*\|\s*)?(.*)?\)$`
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最终我们有 `PROB_REGEX` - `(?i)^p\(([^|]+)(?:\s*\|\s*)?(.*)?\)$`
- en: This is used to parse probability expressions and conditional probability expressions
    as follows …
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于解析概率表达式和条件概率表达式如下…
- en: '`re.findall(PROB_REGEX, "p(A=5, B=6)")` returns `[(''A=5, B=6'', '''')]` and
    `re.findall(PROB_REGEX, "p(A=5, B=6 | X=1, Y=2)")` returns `[(''A=5, B=6 '', ''X=1,
    Y=2'')]`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.findall(PROB_REGEX, "p(A=5, B=6)")` 返回 `[(''A=5, B=6'', '''')]` 和 `re.findall(PROB_REGEX,
    "p(A=5, B=6 | X=1, Y=2)")` 返回 `[(''A=5, B=6 '', ''X=1, Y=2'')]`'
- en: Probability and Conditional Probability
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概率和条件概率
- en: At this point it is worth taking a small diversion to explore conditional probability
    statements.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，值得稍微偏离一下，探索条件概率语句。
- en: We have already established that **ℙ(𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1)** can be read as “what is the
    probability that training = 1?”
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定 **ℙ(𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1)** 可以理解为“训练=1的概率是多少？”
- en: 'This next expression is a conditional probability: **ℙ(𝑖𝑛𝑐𝑜𝑚𝑒=1∣𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1).**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个表达式是一个条件概率：**ℙ(𝑖𝑛𝑐𝑜𝑚𝑒=1∣𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1)。**
- en: It can be read as “what is the probability that income = 1 given that training
    = 1?” i.e. in our data example “what is the probability that income increased
    given that training has been received?”.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以理解为“在 training = 1 的情况下，income = 1 的概率是多少？” 即在我们的数据示例中，“在接受培训的情况下，收入增加的概率是多少？”
- en: The part of the expression on the left hand side of the “|” is termed the “outcome”
    and on the right hand side as the “events” and the whole thing **ℙ(𝑜𝑢𝑡𝑐𝑜𝑚𝑒∣𝑒𝑣𝑒𝑛𝑡𝑠)**
    can be read as “what is the probability of the outcome given that the events have
    already occurred?”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式中“|”左侧的部分被称为“结果”，右侧的部分称为“事件”，整个表达式 **ℙ(𝑜𝑢𝑡𝑐𝑜𝑚𝑒∣𝑒𝑣𝑒𝑛𝑡𝑠)** 可以理解为“在事件已经发生的情况下，结果的概率是多少？”
- en: Understanding the Functions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解函数
- en: So to break our code down let’s start with the `probability` function ...
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以为了分解我们的代码，让我们从 `probability` 函数开始...
- en: '`parse_probability_expr = re.findall(PROB_REGEX, expression)` parses the expression
    passed in so `"p(income=1 | training=1, skills=1)"` is parsed into `[(''income=1
    '', ''training=1, skills=1'')]`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`parse_probability_expr = re.findall(PROB_REGEX, expression)` 解析传入的表达式，所以 `"p(income=1
    | training=1, skills=1)"` 被解析为 `[(''income=1 '', ''training=1, skills=1'')]`。'
- en: … so `parse_probability_expr[0][1].strip()` contains `'training=1, skills=1'`
    and `parse_probability_expr[0][0].strip()` contains `'income=1'`
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: …因此 `parse_probability_expr[0][1].strip()` 包含 `'training=1, skills=1'` 和 `parse_probability_expr[0][0].strip()`
    包含 `'income=1'`
- en: To understand the rest of the function lets take a look at the `_filter_dataset`
    function ...
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解函数的其余部分，让我们看看 `_filter_dataset` 函数...
- en: The next stage is to unpack the `_filter_dataset` function ...
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是解包 `_filter_dataset` 函数...
- en: '`_filter_dataset` is taking part of a probability expression like `''training=1,
    skills=1''` and converting it into a `DataFrame` filter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`_filter_dataset` 处理部分概率表达式如 `''training=1, skills=1''` 并将其转换为 `DataFrame`
    过滤器。'
- en: For example `'training=1, skills=1'` is transformed into `"(data['training']
    == 1) & (data['skills'] == 1)"` which is then applied to the `DataFrame` to filter
    it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如 `'training=1, skills=1'` 被转换为 `"(data['training'] == 1) & (data['skills']
    == 1)"`，然后应用到 `DataFrame` 中以进行过滤。
- en: The remaining code uses `_filter_dataset` to calculate the probability from
    the expression ...
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的代码使用 `_filter_dataset` 从表达式中计算概率...
- en: Also note that if there is no conditional, for example in the case where the
    expression is something like `p(training=1)` then step 1 simply returns the full
    dataset so step 2 will calculate the (non conditional) probability correctly
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的是，如果没有条件，例如在表达式为 `p(training=1)` 的情况下，第1步仅返回完整数据集，因此第2步将正确计算（无条件）概率。
- en: Extending the Pandas DataFrame Class
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 Pandas `DataFrame` 类
- en: The only thing left to do is to use Python “monkey patching” notation to extend
    the `DataFrame` class with a new method ...
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下要做的就是使用 Python “monkey patching” 语法扩展 `DataFrame` 类，添加一个新方法...
- en: '`pd.DataFrame.probability = probability`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.DataFrame.probability = probability`'
- en: This effectively adds a new method to the pandas `DataFrame` class and any `DataFrame`
    you create will be able to call the new method to calculate probabilities and
    conditional probabilities on the data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上为 pandas `DataFrame` 类添加了一个新方法，任何你创建的 `DataFrame` 都可以调用新方法来计算数据上的概率和条件概率。
- en: Also, if the complete source code is stored in a separate Python module, for
    example `dataframe_extensions.py` then a simple 1 line import will include those
    extension methods and any other code module that you write ...
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果完整的源代码存储在一个单独的 Python 模块中，例如 `dataframe_extensions.py`，那么只需一行导入即可包含这些扩展方法和你编写的任何其他代码...
- en: '`import dataframe_extensions`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`import dataframe_extensions`'
- en: Testing the Solution
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试解决方案
- en: Once the code has been written and the`DataFrame` class has been extended it
    is very easy and intuitive to invoke it ...
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码编写完成并且 `DataFrame` 类已被扩展，调用它就变得非常简单和直观...
- en: '`0.5`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`0.5`'
- en: '`0.05`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`0.05`'
- en: '`0.1`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`0.1`'
- en: Bonus Section — Expected Values
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外部分 — 期望值
- en: Expected values or expectancy represents the average or long-term value of a
    random variable.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 期望值或期望表示随机变量的平均值或长期值。
- en: Where we have a sample of continuous data in a `DataFrame` column this would
    simply be the mean - `df_training["training"].mean()` which does not seem worth
    an extension function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 `DataFrame` 列中有一组连续数据时，这将简单地是均值 - `df_training["training"].mean()`，这似乎不值得扩展功能。
- en: However, expectation can be conditional e.g. **𝔼[𝑖𝑛𝑐𝑜𝑚𝑒|𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1]** can be
    read as “What is the expected value of income given that training = 1?”
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，期望值可以是条件性的，例如 **𝔼[𝑖𝑛𝑐𝑜𝑚𝑒|𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1]** 可以理解为“在 training = 1 的情况下，收入的期望值是多少？”
- en: And by re-using the coding patterns developed above to extend a `DataFrame`
    for probabilities, expected values can be implemented as a method extension in
    just 3 lines of code ...
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重用上面开发的编码模式来扩展 `DataFrame` 以计算概率，期望值可以在仅 3 行代码中实现为方法扩展…
- en: The Complete Source Code for Expected Values
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 期望值的完整源代码
- en: Here is a synthetic dataset that contains continuous data followed by some examples
    of calculating expected values using the code above …
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个合成数据集，包含连续数据，并附带一些使用上面代码计算期望值的示例…
- en: '![](../Images/20a2e5e4f1057dd869a638477edd1179.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/20a2e5e4f1057dd869a638477edd1179.png)'
- en: Image by Author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: … and here is some testing to show the expected values extension in action …
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: … 这里是一些测试，展示了期望值扩展的实际效果 …
- en: '`4.412406593060421`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`4.412406593060421`'
- en: '`4.429821998698432`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`4.429821998698432`'
- en: '`3.7051574107849214`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`3.7051574107849214`'
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Extending library classes by adding new methods or properties can result in
    source code that is easy to understand, clean, concise and maintainable.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加新方法或属性来扩展库类，可以生成易于理解、简洁、清晰且可维护的源代码。
- en: The Python convention for “monkey patching” can easily be used to implement
    extensions, even where the classes exist in a standard, external library like
    pandas.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的“猴子补丁”约定可以很容易地用于实现扩展，即使这些类存在于像 pandas 这样的标准外部库中。
- en: By creating a separate module for extension classes that can be imported into
    future projects, Python developers can build up a library of extensions to help
    improve the efficiency and effectiveness of future projects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为扩展类创建一个单独的模块，并将其导入到未来的项目中，Python 开发者可以建立一个扩展库，以帮助提高未来项目的效率和有效性。
- en: Connect and Get in Touch …
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接并保持联系 …
- en: If you enjoyed this article, you can get unlimited access to thousands more
    by becoming a Medium member for just $5 a month by [clicking on my referral link](https://grahamharrison-86487.medium.com/membership)
    (I will receive a proportion of the fees if you sign up using this link at no
    extra cost to you).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，你可以通过每月仅需$5成为 Medium 会员，获得对更多文章的无限访问权限，方法是 [点击我的推荐链接](https://grahamharrison-86487.medium.com/membership)（如果你通过这个链接注册，我将从费用中获得一部分，但你无需额外付费）。
- en: '[](https://grahamharrison-86487.medium.com/membership?source=post_page-----f4ae983ad715--------------------------------)
    [## Join Medium with my referral link - Graham Harrison'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://grahamharrison-86487.medium.com/membership?source=post_page-----f4ae983ad715--------------------------------)
    [## 通过我的推荐链接加入 Medium - 格雷厄姆·哈里森'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的会员费用的一部分会分配给你阅读的作者，同时你可以完全访问每个故事…
- en: grahamharrison-86487.medium.com](https://grahamharrison-86487.medium.com/membership?source=post_page-----f4ae983ad715--------------------------------)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: grahamharrison-86487.medium.com](https://grahamharrison-86487.medium.com/membership?source=post_page-----f4ae983ad715--------------------------------)
- en: … or connect by …
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: … 或通过 … 进行连接
- en: '[Subscribing to a free e-mail whenever I publish a new story](https://grahamharrison-86487.medium.com/subscribe).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅免费电子邮件，以便每当我发布新故事时获得通知](https://grahamharrison-86487.medium.com/subscribe)。'
- en: '[Taking a quick look at my previous articles](https://grahamharrison-86487.medium.com/).'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[快速查看我之前的文章](https://grahamharrison-86487.medium.com/)。'
- en: '[Downloading my free strategic data-driven decision making framework](https://relentless-originator-3199.ck.page/5f4857fd12).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[下载我的免费战略数据驱动决策框架](https://relentless-originator-3199.ck.page/5f4857fd12)。'
- en: Visiting my data science website — [The Data Blog](https://www.the-data-blog.co.uk/).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 访问我的数据科学网站 — [数据博客](https://www.the-data-blog.co.uk/)。
