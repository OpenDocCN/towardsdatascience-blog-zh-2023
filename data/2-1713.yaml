- en: Python Assertions, or Checking If a Cat Is a Dog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 断言，或检查猫是否是狗
- en: 原文：[https://towardsdatascience.com/python-assertions-or-checking-if-a-cat-is-a-dog-ce11c55d143](https://towardsdatascience.com/python-assertions-or-checking-if-a-cat-is-a-dog-ce11c55d143)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-assertions-or-checking-if-a-cat-is-a-dog-ce11c55d143](https://towardsdatascience.com/python-assertions-or-checking-if-a-cat-is-a-dog-ce11c55d143)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Learn the rules of using assertions in Python — and those of not using them
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解在 Python 中使用断言的规则——以及不使用它们的规则
- en: '[](https://medium.com/@nyggus?source=post_page-----ce11c55d143--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----ce11c55d143--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ce11c55d143--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ce11c55d143--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----ce11c55d143--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----ce11c55d143--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----ce11c55d143--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ce11c55d143--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ce11c55d143--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----ce11c55d143--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ce11c55d143--------------------------------)
    ·13 min read·Mar 2, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ce11c55d143--------------------------------)
    ·13 分钟阅读·2023年3月2日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/84e60e7f48e20b9ca7e0acd560d557f3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84e60e7f48e20b9ca7e0acd560d557f3.png)'
- en: 'A false assertion should stop you: something is wrong! Photo by [Jose Aragones](https://unsplash.com/@jodaarba?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的断言应该让你停止：有什么问题！图片由 [Jose Aragones](https://unsplash.com/@jodaarba?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: An assertion is a statement you can use to test an assumption about your program.
    This short definition is, on the one hand, clear. On the other hand, it’s far
    from explaining when you should use assertions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 断言是你用来测试对程序的假设的语句。这一简短的定义，一方面很清晰。另一方面，它远未解释你何时应该使用断言。
- en: The `assert` statement, which is the main assertion tool in Python, is strictly
    related to the built-in `__debug__` object. At some point of my Python learning,
    I was unaware of this object, and so I guess many data scientists and Python developers
    are not aware of it, either. After reading this article, you will know how to
    use `__debug__` and assertions — and how *not* to use them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert` 语句，作为 Python 中主要的断言工具，与内置的 `__debug__` 对象密切相关。在我学习 Python 的某个阶段，我对这个对象一无所知，因此我猜许多数据科学家和
    Python 开发者也不清楚。在阅读本文后，你将了解如何使用 `__debug__` 和断言——以及如何 *不* 使用它们。'
- en: 'The main locations in which you will find assertions are tests. Whichever testing
    framework you use, it uses assertions. While `unittest` uses dedicated methods
    for assertions of specific types (like `.AssertTrue()`, `.AssertFalse()`, `.AssertEqual()`),
    `pytest` prefers the bare `assert` statement. Personally, I like the simplicity
    of the latter. If you want to assert that, say, `x` is 10, you can do it in this
    simple way:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在测试中找到断言的主要位置。无论你使用哪个测试框架，它都会使用断言。虽然 `unittest` 使用特定类型的断言方法（如 `.AssertTrue()`,
    `.AssertFalse()`, `.AssertEqual()`），`pytest` 更喜欢裸露的 `assert` 语句。就个人而言，我喜欢后者的简洁。如果你想断言
    `x` 是 10，可以用这种简单的方法：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you want to assert that `x` is an integer, you can do it as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要断言 `x` 是整数时，可以这样做：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For me, this is simple and clear, and being simple and being clear are two important
    virtues of Python code. Testing is no exception.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这很简单明确，而简单和明确是 Python 代码的重要美德。测试也不例外。
- en: 'When a condition is not true, the `assert` statement raises `AssertionError`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件不成立时，`assert` 语句会引发 `AssertionError`：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also use an optional message:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用可选消息：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, why can’t you do that in an `if` block, so without employing `assert`?
    It would go as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为什么不能在 `if` 块中做这个，而不使用 `assert` 呢？过程如下：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You do something like that if you want your program to raise an exception when
    `x` is not 10\. But this should not be `AssertionError`, because `AssertionError`
    is a specific type of error to be used in specific situations. There is more to
    it, however.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望你的程序在 `x` 不为 10 时抛出异常，你可以这样做。但这不应该是 `AssertionError`，因为 `AssertionError`
    是在特定情况下使用的特定错误类型。然而，还有更多的内容。
- en: 'As Mark Lutz writes in his fantastic book *Learning Python* (5th ed.), the
    `assert` statement is just a shortcut. In our above example, we can write the
    assertion in two equivalent ways (let’s use the optional message); the first one
    is that which you already know:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Mark Lutz 在他出色的书籍 *Learning Python*（第 5 版）中所写的那样，`assert` 语句只是一个快捷方式。在我们上面的例子中，我们可以用两种等效的方式编写断言（让我们使用可选消息）；第一种是你已经知道的：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is a shortcut for a longer piece of code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更长代码段的快捷方式：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Compare it to the previous `if` block. They do differ — and the obvious question
    that asks itself is, what is `__debug__`? An answer to this very question will
    help us understand what an assertion is and when to use it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的 `if` 块相比，它们确实不同——显而易见的问题是，`__debug__` 是什么？对这个问题的答案将帮助我们理解断言是什么以及何时使用它。
- en: What is __debug__?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 __debug__？
- en: 'The `__debug__` object is a Boolean variable, directly available in your Python
    session:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`__debug__` 对象是一个布尔变量，可以直接在你的 Python 会话中使用：'
- en: '![](../Images/8f53b43591f27210ac6a9c13db88fac0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f53b43591f27210ac6a9c13db88fac0.png)'
- en: A screenshot from Python 3.11 session in the debug mode. Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一张来自 Python 3.11 调试模式会话的截图。图片来源：作者
- en: 'Note that you cannot change it inside your Python session:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你不能在 Python 会话中更改它：
- en: '![](../Images/3e4eacc94ffb3d17fc64fd8c5f2f640b.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e4eacc94ffb3d17fc64fd8c5f2f640b.png)'
- en: A screenshot from Python 3.11 session in the debug mode. Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一张来自 Python 3.11 调试模式会话的截图。图片来源：作者
- en: 'I will show in a second how you can change `__debug__` to `False`. First, however,
    let’s see how `__debug__` is related to assertions:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我将稍后展示如何将 `__debug__` 更改为 `False`。但首先，让我们看看 `__debug__` 与断言的关系：
- en: '![](../Images/19f730177dc6ce6d2e8b68ee9796fb0f.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19f730177dc6ce6d2e8b68ee9796fb0f.png)'
- en: A screenshot from Python 3.11 session in the debug mode. Image by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一张来自 Python 3.11 调试模式会话的截图。图片来源：作者
- en: As you see, when you run your Python in the debug mode — and this is the default
    mode — `__debug__` is `True` and assertions work in a regular way.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，当你在调试模式下运行 Python 时——这是默认模式——`__debug__` 为 `True`，断言按常规方式工作。
- en: 'Let’s open a Python REPL in the production mode, to see how assertions work
    then. To do that, we need to provide a `-O` flag:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在生产模式下打开 Python REPL，以查看断言在那里的工作方式。为此，我们需要提供一个 `-O` 标志：
- en: '![](../Images/3575c790377567d1f18923e1d567302c.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3575c790377567d1f18923e1d567302c.png)'
- en: A screenshot from Python 3.11 session in the production mode. Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一张来自 Python 3.11 生产模式会话的截图。图片来源：作者
- en: 'As you see, `__debug__` is now `False`, meaning we work in the production mode.
    This means the code will be optimized:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`__debug__` 现在为 `False`，这意味着我们在生产模式下工作。这意味着代码将被优化：
- en: When `__debug__` is `True`, all assertions and whatever else follows the `if
    __debug__:` checks (which I will hereafter call debug-mode checks) will be executed.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `__debug__` 为 `True` 时，所有断言以及跟随 `if __debug__:` 检查的其他内容（在这里我将称之为调试模式检查）将被执行。
- en: When `__debug__` is `False`, the code is optimized, in a way that the code inside
    debug-mode checks is not executed. As we saw above, this includes all assertions,
    which are not run. We can see this in the screenshot above.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `__debug__` 为 `False` 时，代码会被优化，以至于调试模式检查中的代码不会被执行。正如我们上面所看到的，这包括所有的断言，它们不会被运行。我们可以在上面的截图中看到这一点。
- en: In particular, note that when `__debug__` is `False`, neither `assert True`
    nor `assert False` does anything. So, in particular, `assert False` did not raise
    `AssertionError`, while in the debug mode it would. This is strictly because `__debug__`
    was `False`, meaning that assertions were switched off.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意，当 `__debug__` 为 `False` 时，无论是 `assert True` 还是 `assert False` 都不会做任何事情。所以，特别地，`assert
    False` 没有引发 `AssertionError`，而在调试模式下它会。这完全是因为 `__debug__` 为 `False`，这意味着断言被关闭了。
- en: How to use __debug__ to optimize code execution
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 __debug__ 来优化代码执行
- en: 'As mentioned above, code executed in the production mode is optimized. It means
    only one thing: that any code in debug-mode checks will not be executed. Therefore,
    you can use `__debug__` to add code to be executed only in the debug mode; in
    the production mode, this code will be ignored. That way, your production code
    will be faster — of course assuming it contains debug-mode checks, including assertions.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，生产模式下执行的代码是经过优化的。这意味着只有一件事：在调试模式下的检查代码将不会被执行。因此，你可以使用`__debug__`来添加仅在调试模式下执行的代码；在生产模式下，这段代码将被忽略。这样，你的生产代码将会更快——当然，前提是它包含调试模式检查，包括断言。
- en: 'In order to achieve this, you can manually add code to a debug-mode check:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，你可以手动添加代码到调试模式检查中：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you run the code in the production mode, the contents of this `if` block
    will not be reached, and `debug_logger` will not log anything. Imagine you have
    plenty of such checks (e.g., in a long loop); ignoring them can make the code
    much faster.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在生产模式下运行代码，这个`if`块的内容将不会被执行，`debug_logger`也不会记录任何东西。假设你有很多这样的检查（例如，在一个长循环中）；忽略它们可以使代码更快。
- en: I can imagine this is something a little tricky to think about. My suggestion
    is, next time you write your code, think if there is anything you would like to
    be executed only in the debug mode but not in the production mode. Sometimes,
    you will not be able to figure out a single thing; other times, you may find something
    like that.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以想象，这可能有点难以思考。我的建议是，下次你编写代码时，考虑是否有一些代码只希望在调试模式下执行，而在生产模式下不执行。有时，你可能找不到任何这样的东西；其他时候，你可能会发现这样的情况。
- en: Always, however, you should be able to find locations in which an assertion
    would do a good job. We’ll discuss it below.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你应该能够找到在某些地方使用断言会很有效。我们将在下面讨论这个问题。
- en: 'To summarize, remember about two things:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，记住两件事：
- en: When you use many assertions and debug checks, the code can be significantly
    slower.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你使用很多断言和调试检查时，代码可能会显著变慢。
- en: If you want to run some code irrespective of the mode, why at all should you
    check if `__debug__` is true or not? Of course, when using the `assert` statement,
    it’s done under the hood — but we already know that it’s done and how it’s done.
    Nonetheless, remember not to add code to debug checks if you want to run it in
    both the debug and the production modes.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想运行一些代码，不管模式如何，为什么还需要检查`__debug__`是否为真呢？当然，当使用`assert`语句时，实际上是会在底层进行检查的——但我们已经知道它是如何进行的。然而，请记住，如果你希望代码在调试模式和生产模式下都能运行，就不要在调试检查中添加代码。
- en: When to use assertions
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用断言
- en: At last! Now that we know what `__debug__` and the debug mode are, we’re ready
    to discuss assertions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 终于！现在我们知道了`__debug__`和调试模式，我们可以开始讨论断言。
- en: 'As we saw above, in terms of code, an assertion is a check that is done if
    the code is executed in the debug mode: when the condition is true, nothing happens,
    and when it’s not, `AssertionError` is raised.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，就代码而言，断言是在调试模式下执行的检查：当条件为真时，什么也不会发生，而当条件不满足时，会引发`AssertionError`。
- en: It does not fully explain when you should use assertions. Simply put, use assertions
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这并没有完全解释你何时应该使用断言。简单地说，使用断言
- en: in testing (which is always performed in the debug mode), to check whether or
    not a particular test passes;
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试中（测试总是在调试模式下进行），以检查特定测试是否通过；
- en: in development mode, to check conditions *that should never ever happen*.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发模式下，以检查*绝不应该发生*的条件。
- en: '*As for testing*, all should be clear. As I wrote above `pytest` uses assertions
    as the main tool for checking conditions. You normally run unit tests in the debug
    mode. Try, however, to run `pytest` in the production mode, so using `python -O
    -m pytest`, and you will see the following warning:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*至于测试*，一切都很清楚。正如我上面所写，`pytest`使用断言作为检查条件的主要工具。你通常在调试模式下运行单元测试。然而，尝试在生产模式下运行`pytest`，例如使用`python
    -O -m pytest`，你会看到以下警告：'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you see, when you want to run `pytest` in the production mode, it’s in fact
    run in a what we could call a hybrid mode. All `assert` statements in test functions
    will be executed, but any assertions in the actual code will not be. This is what
    `PytestConfigWarning` tells us.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，当你想在生产模式下运行`pytest`时，它实际上是在我们可以称之为混合模式的模式下运行。测试函数中的所有`assert`语句都会被执行，但实际代码中的任何断言都不会被执行。这就是`PytestConfigWarning`告诉我们的。
- en: '*As for the development mode*, the situation is different. As you read above,
    the `assert` statement helps you check whether or not a condition *that should
    never ever happen* is true or not. This may sound strange at first glance. Why
    should I check a condition that should never happen? Isn’t this something like
    checking whether a cat is a dog?'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*至于开发模式*，情况有所不同。正如你在上面所读到的，`assert` 语句帮助你检查一个*绝不可能发生*的条件是否为真。这乍一看可能有些奇怪。我为什么要检查一个不应该发生的条件？这不是像检查猫是否是狗一样吗？'
- en: Exactly! You got it! Using assertions in code is like checking whether a cat
    is a dog. Sure, we know it is *not* — and the assertion `assert cat is not dog`
    does *not* really aim to check whether `cat is not dog`, which we do know to be
    true, but whether the code is correct.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正确！你明白了！在代码中使用断言就像检查猫是否是狗。当然，我们知道它*不是*——而断言 `assert cat is not dog` 并*不*真正旨在检查
    `cat is not dog`，我们确实知道这是真的，而是检查代码是否正确。
- en: 'In other words, assertions help you check whether the code works the way it
    should. When it does not, it can lead to such impossible things as a cat being
    a dog, an integer being a string, a natural number being negative, sample size
    being greaten than population size, and the like. Thus, remember what an assertion
    is: you check something that is obvious — and when it’s not, the assertion fails
    and you know that something is incorrect in the code or in the logic that the
    code implements.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，断言帮助你检查代码是否按预期工作。如果不是，它可能导致一些不可能的情况，例如猫是狗、整数是字符串、自然数是负数、样本大小大于总体大小等。因此，请记住断言是什么：你检查一些显而易见的东西——当它不是时，断言失败，你就知道代码或代码实现的逻辑有问题。
- en: The assertion `assert cat is not dog` does *not* really aim to check whether
    `cat is not dog`, which we do know to be true, but whether the code is correct.
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 断言 `assert cat is not dog` 并*不*真正旨在检查 `cat is not dog`，我们确实知道这是真的，而是检查代码是否正确。
- en: If according to your code `cat is dog`, which is of course not true, the assertion
    will fail and raise `AssertionError`. This means that the code is incorrect.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果根据你的代码 `cat is dog`，这当然是不正确的，断言将失败并引发 `AssertionError`。这意味着代码不正确。
- en: So, now we know when to use assertions. First, you can use them in testing.
    Second, you can use them to make sure that the code is correct, by adding assertions
    with conditions that must be true. If such an assertion fails, the code is incorrect
    — because a cat cannot be a dog.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了何时使用断言。首先，你可以在测试中使用它们。其次，你可以通过添加必须为真的断言来确保代码的正确性。如果这样的断言失败了，代码就是不正确的——因为猫不能是狗。
- en: If such an assertion fails, the code is incorrect — because a cat cannot be
    a dog.
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果这样的断言失败了，代码就是不正确的——因为猫不能是狗。
- en: There’s one important thing to add. Do *not* overdo with assertions. Do not
    put them wherever you can, only because you can. Use them in important places,
    where they mean something important. Use them to catch important flaws.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点重要的事情要补充。*不要*过度使用断言。不要仅仅因为可以就把它们放到任何地方。只在重要的地方使用它们，那些地方有重要意义。用它们来捕捉重要的缺陷。
- en: Do *not* overdo with assertions. Do not put them wherever you can, only because
    you can.
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*不要*过度使用断言。不要仅仅因为可以就把它们放到任何地方。'
- en: When not to use assertions
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么时候不使用断言
- en: Now that we know when to use assertions, it should be clear when we should not
    use them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道了什么时候使用断言，那么何时不使用它们也应该很明确。
- en: First of all, you should not use assertions to handle regular exceptions. These
    can be incorrect argument values, data, a wrong password, things like that. Such
    errors should be handled in a regular way.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你不应该使用断言来处理常规异常。这些异常可能是错误的参数值、数据、错误的密码等。这类错误应该以常规方式处理。
- en: You should not use assertions to handle regular exceptions.
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你不应该使用断言来处理常规异常。
- en: 'Let’s see. Consider the following function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下。考虑以下函数：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The function aims to preprocess a string in a particular way. In our case, preprocessing
    is very simple, `text.lower().strip()`, but that’s just an example of what the
    function could do. The function also checks whether the provided value of argument
    `text` has a correct type, that is, `str`; and if not, it raises an exception.
    Right?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数旨在以特定方式预处理一个字符串。在我们的例子中，预处理非常简单，`text.lower().strip()`，但这只是函数可能执行的一种示例。该函数还检查提供的参数
    `text` 的值是否具有正确的类型，即 `str`；如果不是，它会引发异常，对吧？
- en: Wrong! In order to check the type, the function uses the `assert` statement,
    and we already know that it’s not correct. First, note that if you provide an
    object of a different type, `AssertionError` is raised, and it does not say what
    it should — that the type is incorrect. Python has `TypeError` for this.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 错误！为了检查类型，函数使用了`assert`语句，而我们已经知道这不正确。首先，请注意，如果你提供了不同类型的对象，将引发`AssertionError`，而且它不会说明应该是什么——即类型不正确。Python
    对此有`TypeError`。
- en: Second, note that in the production mode, this check would not be executed.
    Is this really the behavior you would want for this function? I’d rather say if
    you need to check the type of `text`, then you should do it in both modes. Here,
    you could get a different behavior in the debug mode and in the production mode.
    I suppose many developers using `assert` in such situations may not know of this.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，请注意在生产模式下，这个检查不会被执行。这真的是你希望这个函数的行为吗？我更倾向于说，如果你需要检查`text`的类型，那么你应该在两种模式下都进行检查。在这里，你可能会在调试模式和生产模式中得到不同的行为。我猜很多在这种情况下使用`assert`的开发者可能不知道这一点。
- en: 'We know what’s wrong. The function should not use `assert`. Instead, it can
    use an `if` statement combined with the `raise` statement, or a dedicated tool,
    such as the `easycheck` package:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道哪里出了问题。这个函数不应该使用`assert`。相反，它可以使用`if`语句结合`raise`语句，或者使用专门的工具，如`easycheck`包：
- en: '[](https://github.com/nyggus/easycheck?source=post_page-----ce11c55d143--------------------------------)
    [## GitHub - nyggus/easycheck: A module offering Python functions for simple and
    readable assertions to…'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[## GitHub - nyggus/easycheck：一个提供简单且可读断言的 Python 函数的模块](https://github.com/nyggus/easycheck?source=post_page-----ce11c55d143--------------------------------)'
- en: A module offering Python functions for simple and readable assertions to be
    used inside code, but also in testing. …
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个提供用于代码内部和测试中的简单、可读断言的 Python 函数的模块。…
- en: github.com](https://github.com/nyggus/easycheck?source=post_page-----ce11c55d143--------------------------------)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/nyggus/easycheck?source=post_page-----ce11c55d143--------------------------------)'
- en: 'I’m planning to write a longer article about `easycheck`, but you can already
    read about its particular use case here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我计划写一篇关于`easycheck`的更长文章，但你已经可以在这里阅读它的特定用例：
- en: '[](/comparing-floating-point-numbers-with-easycheck-dcbae480f75f?source=post_page-----ce11c55d143--------------------------------)
    [## Comparing floating-point numbers with easycheck'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用 easycheck 比较浮点数](https://towardsdatascience.com/comparing-floating-point-numbers-with-easycheck-dcbae480f75f?source=post_page-----ce11c55d143--------------------------------)'
- en: easycheck can help you compare floats in assertion-like situations
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: easycheck 可以帮助你在类似断言的情况下比较浮点数
- en: towardsdatascience.com](/comparing-floating-point-numbers-with-easycheck-dcbae480f75f?source=post_page-----ce11c55d143--------------------------------)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/comparing-floating-point-numbers-with-easycheck-dcbae480f75f?source=post_page-----ce11c55d143--------------------------------)'
- en: 'In our above function, we can add an `easycheck` check as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上面的函数中，我们可以添加一个`easycheck`检查，如下所示：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The above check can be read in the following — natural in my eyes — way: Check
    type of `text`; it should be `str`; if it is not `str`, raise `TypeError`, with
    the following message: `f"Argument text must be string, not {type(text).__name__}"`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述检查可以用以下方式理解——在我看来是自然的：检查`text`的类型；它应该是`str`；如果不是`str`，则引发`TypeError`，并附上以下消息：`f"Argument
    text must be string, not {type(text).__name__}"`。
- en: 'So, when you provide, for instance, an integer, you will see the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当你提供一个整数时，你会看到以下内容：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s summarize this example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下这个例子：
- en: '**Question**: Should I use assertion in `preprocess_text()` in order to check
    if `text` is a string?'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：** 我是否应该在`preprocess_text()`中使用断言来检查`text`是否是字符串？'
- en: '**Answer**: No'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：** 不'
- en: '**Question**: Why not?'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：** 为什么不呢？'
- en: '**Answer:** You should not use assertion here because a different type of `text`
    is not an impossible situation that should never happen. It can happen when a
    user provides the `text` argument of an incorrect type — and this definitely *can*
    happen.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：** 你不应该在这里使用断言，因为不同类型的`text`不是一种不可能发生的情况。当用户提供了错误类型的`text`参数时，这种情况确实*可能*发生。'
- en: '**Question:** What should I use instead, then?'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：** 那么我应该使用什么呢？'
- en: '**Answer:** You can use an `if` check of `text`’s type, and raise `TypeError`
    when it’s incorrect. Or you can use `easycheck`, a dedicated tool for such situations.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：** 你可以使用`if`检查`text`的类型，并在类型不正确时引发`TypeError`。或者你可以使用`easycheck`，这是一个专门针对这种情况的工具。'
- en: Production mode, tests and assertions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产模式、测试和断言
- en: Now, an important question is whether at all you should use the production mode,
    invoked using the `-O` flag.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一个重要的问题是你是否应该使用通过`-O`标志调用的生产模式。
- en: In his [*Clean Code in Python. Develop maintainable and efficient code*](https://www.oreilly.com/library/view/clean-code-in/9781788835831/)book,
    Mariano Anaya says that you shouldn’t. You shouldn’t, because assertions help
    catch bugs, so why should you resign this opportunity only because you’re running
    your code in production? When an assertion fails, something serious is wrong with
    the code — and the code will break anyway, but quite possibly later. Best to raise
    an exception as soon as possible.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的[*Python 中的清晰代码：开发可维护和高效的代码*](https://www.oreilly.com/library/view/clean-code-in/9781788835831/)一书中，Mariano
    Anaya 说你不应该这么做。你不应该，因为断言有助于捕捉错误，那么为什么仅仅因为你在生产中运行代码就放弃这个机会呢？当断言失败时，代码中出现了严重的问题
    —— 无论如何代码都会崩溃，但可能会晚一些。最好尽早引发异常。
- en: I fully agree with the above approach, but…
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我完全同意上述方法，但……
- en: Sometimes it’s better to use the production mode. This is when the execution
    time is critical and the assertions used in the code make it significantly slower.
    Assuming that the code is well tested, you may prefer to switch off all assertions,
    only to make the app faster — especially when you used a lot of them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有时使用生产模式更好。这是在执行时间至关重要且代码中的断言显著减慢了速度的情况下。假设代码经过了充分测试，你可能会选择关闭所有断言，以使应用程序运行得更快
    —— 尤其是当你使用了很多断言时。
- en: In some projects, the decision whether or not to use the production mode is
    simple. When the execution time does not matter, run your production code in the
    debug mode. It’s like testing the production code in production — there is no
    better testing. In other projects, the decision is simple, too — when execution
    time matters, and I mean *it does matter*, use the production mode. In that case,
    the code should be well covered with unit and integration tests, and *all* the
    tests should be run before deployment of each new version.¹ Nonetheless, if you
    want to use the production mode, I think you should run your tests in both the
    debug and the production modes. The latter — which I actually called above the
    hybrid mode — can help you catch bugs that would not be caught in the debug mode.
    Since I’ve never found a word about this topic, I am planning to write a dedicated
    article, with in-depth explanation and examples; I will link it here when it’s
    ready and published.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些项目中，决定是否使用生产模式很简单。当执行时间不重要时，在调试模式下运行你的生产代码。这就像在生产中测试生产代码 —— 没有比这更好的测试了。在其他项目中，决定也很简单
    —— 当执行时间重要时，我的意思是*它确实很重要*，使用生产模式。在这种情况下，代码应该通过单元测试和集成测试进行良好的覆盖，并且*所有*测试应在每个新版本部署之前运行。¹
    尽管如此，如果你想使用生产模式，我认为你应该在调试模式和生产模式下运行测试。后者 —— 实际上我上面称之为混合模式 —— 可以帮助你捕捉在调试模式下无法捕捉到的错误。由于我从未找到关于这个主题的任何字样，我计划写一篇专门的文章，详细解释和举例；当它准备好并发布时，我会在这里链接。
- en: There will be in-between projects, in which the decision will not be that simple.
    You will have to decide if you should run assertions or switch them off based
    on the project’s assumptions, but also based on the quality of your code and tests
    as well as on the test coverage.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些项目中，决策将不会那么简单。你必须根据项目的假设、代码和测试的质量以及测试覆盖率来决定是否运行断言或关闭它们。
- en: Conclusion
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I wrote this article because I noticed that many Python developers do not understand
    what an assertion is. I sympathize with them. I was there. At some point of my
    Python journey, I didn’t understand assertions, either.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这篇文章是因为我注意到许多 Python 开发者不了解断言是什么。我对此感到同情。我也经历过。在我的 Python 学习旅程的某个时刻，我也不理解断言。
- en: 'I hope the article explains both assertions and `__debug__` in sufficient detail.
    Let’s summarize what we discussed:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章对断言和`__debug__`进行了充分的解释。让我们总结一下我们讨论的内容：
- en: Assertions are executed only in the debug mode, which is the default Python
    mode. Run Python in production mode by using the `-O` flag, that is, `python -O`.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言仅在调试模式下执行，这也是默认的 Python 模式。通过使用`-O`标志来在生产模式下运行 Python，即`python -O`。
- en: Use assertions to check conditions that *must be true*. If they fail, something
    is wrong with the code.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用断言来检查*必须为真的*条件。如果它们失败，说明代码中有问题。
- en: Do not use assertions to check other things, like conditions related to argument
    values. Such checks should be done using `if` checks combined with `raise`, or
    dedicated tools such as the `easycheck` Python package.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用断言来检查其他事情，比如与参数值相关的条件。这些检查应该使用 `if` 检查结合 `raise`，或使用像 `easycheck` 这样的专用工具进行。
- en: Use `__debug__` to add code to be executed in the debug mode but not in the
    production mode.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `__debug__` 添加在调试模式下执行的代码，而在生产模式下不执行。
- en: When you run your production code in the production mode, you should also run
    your unit and integration tests in the production mode.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你在生产模式下运行你的生产代码时，你也应该在生产模式下运行你的单元测试和集成测试。
- en: All in all, always decide whether to use the production mode or not based on
    the particular situation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，总是根据具体情况决定是否使用生产模式。
- en: If you’d like to learn a little more about `AssertionError`, the article below
    shows a little trick with it; namely, it shows how to overwrite it with a different
    type of exception. For instance, you may wish to use in unit tests a custom project
    exception instead of the built-in `AssertionError`. I don’t think that’s something
    you should actually use in your production code, but that’s something that can
    help you understand exception handling and assertions — and Python, for that matter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 `AssertionError` 的信息，下面的文章展示了一个小技巧，即如何用不同类型的异常覆盖它。例如，你可能希望在单元测试中使用自定义的项目异常而不是内置的
    `AssertionError`。我认为这不是你在生产代码中实际使用的东西，但这可以帮助你理解异常处理和断言——以及 Python 本身。
- en: '[](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----ce11c55d143--------------------------------)
    [## How to Overwrite AssertionError in Python and Use Custom Exceptions'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----ce11c55d143--------------------------------)
    [## 如何在 Python 中覆盖 AssertionError 并使用自定义异常'
- en: Python’s assert statement uses AssertionError. Know how to use a different exception
    instead
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 的 assert 语句使用 AssertionError。了解如何使用其他异常代替
- en: betterprogramming.pub](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----ce11c55d143--------------------------------)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: betterprogramming.pub](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----ce11c55d143--------------------------------)
- en: 'If you’re interesting in how to format long assertions, you may find the following
    article interesting:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对如何格式化长断言感兴趣，你可能会发现以下文章很有趣：
- en: '[](https://medium.com/pythoniq/dont-surround-python-assertions-with-parentheses-f9b28729609a?source=post_page-----ce11c55d143--------------------------------)
    [## Don’t Surround Python Assertions with Parentheses'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/pythoniq/dont-surround-python-assertions-with-parentheses-f9b28729609a?source=post_page-----ce11c55d143--------------------------------)
    [## 不要用括号围绕 Python 断言'
- en: Learn why you should not parenthesize assert statements when you’re using a
    message.
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解为什么在使用消息时不应将 assert 语句括起来。
- en: medium.com](https://medium.com/pythoniq/dont-surround-python-assertions-with-parentheses-f9b28729609a?source=post_page-----ce11c55d143--------------------------------)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/pythoniq/dont-surround-python-assertions-with-parentheses-f9b28729609a?source=post_page-----ce11c55d143--------------------------------)
- en: You will read there what to do when an assertion is too long to fit a single
    line — and why you should *never* surround its condition and message by parentheses.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在文中看到，当断言太长无法放在一行时该怎么办——以及为什么*永远*不要用括号围绕它的条件和消息。
- en: Footnotes
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: ¹ Well, you should *always* run tests before deploying a new version. Sometimes,
    however, you may decide to run only the tests of the module being re-deployed
    — but that depends on the architecture of the application. Anyway, it’s always
    safer to run all tests before deployment. We write them to run them, don’t we?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 嗯，你*应该总是*在部署新版本之前运行测试。然而，有时你可能决定只运行重新部署的模块的测试，但这取决于应用程序的架构。无论如何，在部署之前运行所有测试总是更安全。我们编写测试是为了运行它们，不是吗？
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能还会喜欢我写的其他文章，你可以在[这里](https://medium.com/@nyggus)查看。如果你想加入
    Medium，请使用下面我的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----ce11c55d143--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----ce11c55d143--------------------------------)
    [## 通过我的推荐链接加入 Medium - Marcin Kozak'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Marcin Kozak 的每一个故事（以及 Medium 上成千上万的其他作家的故事）。您的会员费用将直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----ce11c55d143--------------------------------)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@nyggus/membership?source=post_page-----ce11c55d143--------------------------------)
