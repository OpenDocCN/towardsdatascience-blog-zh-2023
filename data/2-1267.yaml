- en: How to Use Map Functions for Data Science in R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在R中使用映射函数进行数据科学
- en: 原文：[https://towardsdatascience.com/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79](https://towardsdatascience.com/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79](https://towardsdatascience.com/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79)
- en: Learn powerful functional programming tools from the tidyverse
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从tidyverse中学习强大的函数式编程工具
- en: '[](https://roryspanton.medium.com/?source=post_page-----8180c2ed6d79--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----8180c2ed6d79--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8180c2ed6d79--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8180c2ed6d79--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----8180c2ed6d79--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://roryspanton.medium.com/?source=post_page-----8180c2ed6d79--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----8180c2ed6d79--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8180c2ed6d79--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8180c2ed6d79--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----8180c2ed6d79--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8180c2ed6d79--------------------------------)
    ·7 min read·Feb 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8180c2ed6d79--------------------------------)
    ·7分钟阅读·2023年2月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7814864921e31d3a070fa03387a45857.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7814864921e31d3a070fa03387a45857.png)'
- en: Photo by [Z](https://unsplash.com/@dead____artist?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Z](https://unsplash.com/@dead____artist?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: All data scientists need to repeat code. Whether you’re fitting a model to multiple
    datasets or changing many values at once, running the same code many times over
    is essential.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据科学家都需要重复代码。无论是为多个数据集拟合模型，还是一次更改多个值，多次运行相同的代码都是必不可少的。
- en: There are many ways to repeat code. But while most programmers use loops, there
    are more succinct, readable, and efficient alternatives. Enter, the `map` family
    of functions from the purrr package.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 重复代码有很多方法。然而，尽管大多数程序员使用循环，还有更简洁、可读性更高且效率更高的替代方案。引入`map`家族的函数，来自purrr包。
- en: In this article, I’ll explain what mapping means, and how to use the `map`,
    `map2`, and `pmap` functions from the [purrr package](https://purrr.tidyverse.org/)
    in R.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将解释什么是映射，以及如何使用`map`、`map2`和`pmap`函数，这些函数来自[R的purrr包](https://purrr.tidyverse.org/)。
- en: What is “Mapping”, and How is it Done in R?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是“映射”，以及如何在R中实现？
- en: The kind of mapping that the purrr package does isn’t the geographical type
    that most people are familiar with. R has great tools for geospatial analysis,
    but that’s not what we’re talking about here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: purrr包所做的映射并不是大多数人熟悉的地理类型。R拥有优秀的地理空间分析工具，但这里讨论的不是这些。
- en: “[Mapping](https://en.wikipedia.org/wiki/Map_(higher-order_function))” is a
    specialised term in programming that refers to applying a function repeatedly
    across a set of arguments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “[映射](https://en.wikipedia.org/wiki/Map_(higher-order_function))”是编程中的一个专业术语，指的是在一组参数上反复应用一个函数。
- en: We can use a simple example to understand this. Let’s say we have a list, with
    each element containing 100 numbers. If we want to calculate the mean of each
    set of numbers, we can use `map` to do this in a straightforward way.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个简单的例子来理解这一点。假设我们有一个列表，每个元素包含100个数字。如果我们想计算每组数字的均值，我们可以使用`map`以直接的方式来完成。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we first load in the tidyverse, which contains the purrr package that
    provides our map functions. Then, we use `map` to get the mean for each list element.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先加载tidyverse，它包含提供映射函数的purrr包。然后，我们使用`map`来获取每个列表元素的均值。
- en: The basic `map` function takes two arguments. First, we specify the list or
    vector we want to apply a function across; in this case, `values_list`. Second,
    we name the function we want to apply; `mean`. This makes `map` a “[higher-order
    function](https://en.wikipedia.org/wiki/Higher-order_function)” because it takes
    another function as an argument. Running this code gives us the mean of each element
    from `values_list`, as shown below.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的`map`函数接受两个参数。首先，我们指定一个要应用函数的列表或向量；在本例中是`values_list`。其次，我们命名要应用的函数；`mean`。这使得`map`成为一个“[高阶函数](https://en.wikipedia.org/wiki/Higher-order_function)”，因为它将另一个函数作为参数。运行此代码会给出`values_list`中每个元素的均值，如下所示。
- en: '![](../Images/668e596f283a5129731a5ab8c50e5028.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/668e596f283a5129731a5ab8c50e5028.png)'
- en: As well as naming the function we want to apply, we can also use a formula to
    define the function. This is useful when defining functions with additional arguments,
    or more complex expressions. In the code below, we use such a formula to get the
    mean of each list element even when there are missing values in the data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了命名我们想应用的函数外，我们还可以使用公式来定义函数。当定义带有附加参数或更复杂表达式的函数时，这一点尤其有用。在下面的代码中，我们使用这样的公式来计算每个列表元素的均值，即使数据中存在缺失值。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this code, we define the function as a formula with the tilde (~) symbol.
    Inside `mean`, we refer to the list element used as an argument with the dot (.)
    symbol. Defining the `mean` function with a formula allows us to specify extra
    arguments like `na.rm = TRUE` which deals with the NA values in `values_list`.
    This gives a list of means like the previous example.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们将函数定义为一个带有波浪号（~）符号的公式。在`mean`内部，我们使用点（.）符号来引用作为参数的列表元素。用公式定义`mean`函数使我们可以指定额外的参数，例如`na.rm
    = TRUE`，用于处理`values_list`中的NA值。这会生成一个均值列表，如之前的例子所示。
- en: Why Use Map Functions Instead of Loops?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用 `map` 函数而不是循环？
- en: 'If you’re familiar with for-loops, you might be seeing the similarities between
    what `map` is doing and how you could use a loop to solve the problem above. Here
    is the same operation expressed as a loop:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉for循环，你可能会发现`map`的操作和你如何使用循环解决上述问题之间的相似之处。这里是将相同操作用循环表达的方式：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This loop is very simple. Each iteration, it takes a new element from `values_list`
    and prints the mean of the values in that element, like the `map` example. There
    is even an [R package](https://timteafan.github.io/loopurrr/) that converts `map`
    statements into loops!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环非常简单。每次迭代时，它从`values_list`中获取一个新元素，并打印该元素中值的均值，就像`map`示例一样。甚至有一个[R包](https://timteafan.github.io/loopurrr/)可以将`map`语句转换为循环！
- en: So if you can express `map` statements as loops, why should you learn about
    `map` at all?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你可以将 `map` 语句表达为循环，你为什么还要学习 `map` 呢？
- en: 'There are a few advantages of mapping compared with looping:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与循环相比，映射有一些优势：
- en: '`map` functions are often more concise, taking up one line rather than a minimum
    of three. This means they can be used inline and within other functions more easily,
    opening up powerful new possibilities for usage.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map` 函数通常更简洁，占用一行，而不是至少三行。这意味着它们可以更容易地内联使用和嵌入其他函数中，从而开启了强大的新使用可能性。'
- en: Unlike loops, mapping forces you to define functions. This leads to neater,
    more compartmentalised code that is easy to reuse.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与循环不同，映射迫使你定义函数。这会导致更整洁、更具模块化的代码，便于重用。
- en: Relating to the last point, defining functions often speeds up your code. This
    means mapping can be faster than looping (although this isn’t guaranteed).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关于上一点，定义函数通常会加速代码的执行。这意味着映射操作可能比循环更快（尽管这并不一定保证）。
- en: Loops still have their place, and sometimes it’s preferable to use them when
    they’re the fastest option, or when repeating very complex or unusual operations.
    That said, the `map` family can deal with more complex functions as well.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 循环仍然有其用武之地，有时在它们是最快选项或在重复非常复杂或不寻常的操作时使用它们更为合适。也就是说，`map`系列也能处理更复杂的函数。
- en: 'How To Use map Variants: map2 and pmap'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 `map` 的变体：`map2` 和 `pmap`
- en: The `map2` and `pmap` functions are straightforward extensions of `map`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`map2` 和 `pmap` 函数是 `map` 的直接扩展。'
- en: map2
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`map2`'
- en: '`map2` lets you apply a function that takes two arguments. For example, you
    could use it to fit several linear models that take x and y variables as arguments.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`map2` 允许你应用一个接受两个参数的函数。例如，你可以使用它来拟合几个线性模型，这些模型以x和y变量作为参数。'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we make two vectors, `x` and `y`, containing combinations of variables
    in the `mtcars` dataset. Inside our `map2` function expression, we refer to these
    variables as `.x` and `.y`. The `get` functions simply help `lm` locate the columns
    of interest in `mtcars` using their names. This results in three linear models
    being fitted; one for each combination of variables we specified.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了两个向量 `x` 和 `y`，包含了 `mtcars` 数据集中的变量组合。在我们的 `map2` 函数表达式中，我们将这些变量称为
    `.x` 和 `.y`。`get` 函数只是帮助 `lm` 使用名称定位 `mtcars` 中感兴趣的列。这导致三个线性模型被拟合；每个指定的变量组合对应一个。
- en: pmap
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pmap
- en: '`pmap` lets you apply a functional expression with more than two arguments.
    Concatenating together values from three separate lists for further analysis,
    for instance.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`pmap` 允许你对具有两个以上参数的函数表达式进行操作。例如，可以将三个不同列表中的值连接起来进行进一步分析。'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When calling `pmap`, we wrap our inputs in a list. Each input is then referred
    to as `..1, ..2, ..3` and so on. The result is a list of concatenated values,
    shown below.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `pmap` 时，我们将输入数据封装在一个列表中。每个输入被称为 `..1, ..2, ..3` 等。结果是一个连接值的列表，如下所示。
- en: '![](../Images/876e3197a99124c24e6d112463f48fca.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/876e3197a99124c24e6d112463f48fca.png)'
- en: How to Control the Output of map Functions
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何控制 map 函数的输出
- en: You might have noticed that all the examples so far have returned lists as their
    output. However, it’s possible to get map functions to return different types
    of vectors and dataframes instead.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，到目前为止所有的示例都返回了列表作为输出。然而，也可以让 map 函数返回不同类型的向量和数据框。
- en: Returning to the first example in this article, we can get a list of means using
    `map`. But we can also get a flat vector of means by using the `map_dbl` function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 回到本文的第一个示例，我们可以使用 `map` 获取一个均值列表。但我们也可以通过使用 `map_dbl` 函数来获取一个平坦的均值向量。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/e7c2e309bedee543e0d546e72e1743ef.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7c2e309bedee543e0d546e72e1743ef.png)'
- en: 'The result of the code above: a vector of means, not a list.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的结果：一个均值向量，而不是列表。
- en: 'Appending “_dbl” to our map function name enables this. There are a few other
    variants like this that work with `map`, `map2`, and `pmap`. Here is a list of
    them, and what they do:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 向我们的 map 函数名称添加 “_dbl” 实现了这一点。还有一些其他变体适用于 `map`、`map2` 和 `pmap`。以下是它们的列表及其功能：
- en: “_dbl” returns a double vector
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_dbl” 返回一个双精度向量
- en: “_lgl” returns a logical (TRUE/FALSE) vector
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_lgl” 返回一个逻辑（TRUE/FALSE）向量
- en: “_int” returns an integer vector
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_int” 返回一个整数向量
- en: “_chr” returns a character vector
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_chr” 返回一个字符向量
- en: “_raw” returns a raw vector
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_raw” 返回一个原始向量
- en: “_dfr” returns a tibble where each row is the result of a map operation
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_dfr” 返回一个 tibble，每行是一次 map 操作的结果
- en: “_dfc” returns a tibble where each column is the result of a map operation
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_dfc” 返回一个 tibble，每列是一次 map 操作的结果
- en: Using these function variants to return vectors and tibbles unlocks lots of
    possibilities. I often use `map_dbl` and `map_chr` inside other tidyverse functions
    like mutate to create new columns based on custom functions. I’ve also used `map_dfr`
    and `map_dfc` to replace long loops with only one or two lines of code. These
    are great functions, and they’re without a doubt useful enough to learn and remember.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些函数变体返回向量和 tibble 可以解锁许多可能性。我经常在其他 tidyverse 函数中使用 `map_dbl` 和 `map_chr`
    来基于自定义函数创建新列。我也使用 `map_dfr` 和 `map_dfc` 来用一两行代码替代长循环。这些函数很棒，毫无疑问值得学习和记住。
- en: Should You Use map Functions Instead of Base-R “apply” Functions?
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是否应该使用 map 函数代替 base-R 的 “apply” 函数？
- en: As we’ve established, the purrr package provides a whole family of `map` functions
    that can do all sorts of things.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所建立的，purrr 包提供了一整套 `map` 函数，可以执行各种操作。
- en: However, R also comes with a built-in family of mapping functions; the `apply`
    functions. These have the same functionality as purrr’s basic map functions, with
    some variations in syntax and how they treat data types going in and out.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，R 也配备了一套内置的映射函数；`apply` 函数。这些函数的功能与 purrr 的基本 map 函数相同，但在语法和处理数据类型的方式上有所不同。
- en: 'Although the base-R `apply` functions are widely used, I prefer the purrr `map`
    functions for a few reasons:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 base-R 的 `apply` 函数被广泛使用，但我更喜欢 purrr 的 `map` 函数，原因有几个：
- en: It’s easier to understand exactly what type of data `map` functions will output.
    This isn’t always the case with the base-R functions, which can sometimes behave
    unpredictably based on their input.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样更容易确切了解 `map` 函数将输出何种类型的数据。这在 base-R 函数中并不总是如此，后者有时会根据输入表现出不可预测的行为。
- en: They’re built to be compatible with other tidyverse packages, which is useful
    if they’re already part of your workflow.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们被设计为与其他 tidyverse 包兼容，这对于已经在你的工作流程中使用它们来说非常有用。
- en: Purrr also includes more advanced mapping functions that the `apply` family
    can’t match. Learning `map` enables you to pick these up more easily.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Purrr 还包含了更多高级的映射函数，这是 `apply` 系列无法匹敌的。学习 `map` 可以让你更轻松地掌握这些函数。
- en: There are some times when you might prefer using `apply`. If you’re developing
    a package and don’t want to introduce extra dependencies, built-in functions are
    the best option. `apply` functions can also be faster than their `map` counterparts,
    so they can be worth using to repeat computationally expensive operations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能会更倾向于使用 `apply`。如果你正在开发一个包，并且不想引入额外的依赖，内置函数是最佳选择。`apply` 函数的运行速度也可能比 `map`
    函数更快，因此在重复计算密集型操作时，它们可能更值得使用。
- en: Regardless, the `map` functions are easier for newcomers to learn, which is
    why I focused on them here. Besides, once you know how to use `map`, `apply` functions
    will be much easier to understand too.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，`map` 函数对于新手来说更容易学习，这也是我在这里重点讲解它们的原因。此外，一旦你掌握了 `map` 的使用，`apply` 函数也会变得容易理解。
- en: Learning `map` functions in R is a great way to extend your data science toolset.
    Mapping often saves space when compared to looping, without sacrificing readability.
    It also applies to many tasks and makes a great standard approach for efficiently
    repeating code. So now you know how to use `map`, try it out, and enjoy one of
    the most powerful tools in the tidyverse.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 R 中的 `map` 函数是扩展你的数据科学工具集的好方法。与循环相比，映射通常节省空间，而不牺牲可读性。它还适用于许多任务，是高效重复代码的一个极佳标准方法。因此，既然你知道了如何使用
    `map`，就试试看，享受 tidyverse 中最强大的工具之一吧。
