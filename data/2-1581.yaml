- en: 'NLP with Python: Knowledge Graph'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行NLP：知识图谱
- en: 原文：[https://towardsdatascience.com/nlp-with-python-knowledge-graph-12b93146a458](https://towardsdatascience.com/nlp-with-python-knowledge-graph-12b93146a458)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/nlp-with-python-knowledge-graph-12b93146a458](https://towardsdatascience.com/nlp-with-python-knowledge-graph-12b93146a458)
- en: '![](../Images/bf7a59d41b19f964ce71b34753c515bf.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf7a59d41b19f964ce71b34753c515bf.png)'
- en: Image by author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: SpaCy, Sentence segmentation, Part-Of-Speech tagging, D**ependency parsing,**
    Named Entity Recognition, and more…
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SpaCy、句子分割、词性标注、D**ependency parsing**、命名实体识别等……
- en: '[](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)[![Mauro
    Di Pietro](../Images/3586d9d3238d904a1e1fa39c77b59d3f.png)](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)[](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)
    [Mauro Di Pietro](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)[![Mauro
    Di Pietro](../Images/3586d9d3238d904a1e1fa39c77b59d3f.png)](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)[](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)
    [Mauro Di Pietro](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)
    ·14 min read·Apr 19, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)
    ·14分钟阅读·2023年4月19日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Summary
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this article, I will show how to build a Knowledge Graph with Python and
    Natural Language Processing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将展示如何使用Python和自然语言处理构建知识图谱。
- en: '![](../Images/321c5d15bba2bcd22a3328c17f2827ac.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/321c5d15bba2bcd22a3328c17f2827ac.png)'
- en: Photo by [Moritz Kindler](https://unsplash.com/@moritz_photography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Moritz Kindler](https://unsplash.com/@moritz_photography?utm_source=medium&utm_medium=referral)提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: A [**network graph**](https://en.wikipedia.org/wiki/Graph_theory) is a mathematical
    structure to show relations between points that can be visualized with undirected/directed
    graph structures. It’s a form of database that maps linked nodes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[**网络图**](https://en.wikipedia.org/wiki/Graph_theory)是一种数学结构，用于展示点之间的关系，可以通过无向图/有向图结构进行可视化。这是一种映射连接节点的数据库形式。'
- en: A [**knowledge base**](https://en.wikipedia.org/wiki/Knowledge_base) is a unified
    repository of information from different sources, like *Wikipedia*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[**知识库**](https://en.wikipedia.org/wiki/Knowledge_base)是来自不同来源的信息的统一存储库，如*维基百科*。'
- en: A [**Knowledge Graph**](https://en.wikipedia.org/wiki/Knowledge_graph) is a
    knowledge base that uses a graph-structured data model. To put it in simple words,
    it’s a particular type of network graph that shows qualitative relationships between
    real-world entities, facts, concepts and events. The term “Knowledge Graph” was
    used for the first time by *Google* in 2012 to introduce [their model](https://en.wikipedia.org/wiki/Google_Knowledge_Graph).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[**知识图谱**](https://en.wikipedia.org/wiki/Knowledge_graph)是一种使用图结构数据模型的知识库。简单来说，它是一种网络图，展示了现实世界实体、事实、概念和事件之间的定性关系。“知识图谱”一词首次由*谷歌*在2012年使用，以介绍[他们的模型](https://en.wikipedia.org/wiki/Google_Knowledge_Graph)。'
- en: '![](../Images/1c6b4397f08ef1f66cf0e7624bae5507.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c6b4397f08ef1f66cf0e7624bae5507.png)'
- en: Image by author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Currently, most companies are building [Data Lakes](https://en.wikipedia.org/wiki/Data_lake),
    a central database in which they toss raw data of all types (i.e. structured and
    unstructured) taken from different sources. Therefore, people need tools to make
    sense of all those pieces of different information. Knowledge Graphs are becoming
    popular as they can simplify exploration of large datasets and insight discovery.
    To put it in another way, a Knowledge Graph connects data and associated metadata,
    so it can be used to build a comprehensive representation of an organization’s
    information assets. For instance, a Knowledge Graph might replace all the piles
    of documents you have to go through in order to ﬁnd one particular information.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，大多数公司正在构建[数据湖](https://en.wikipedia.org/wiki/Data_lake)，这是一个中央数据库，用于存储从不同来源获取的各种原始数据（即结构化和非结构化数据）。因此，人们需要工具来理解这些不同信息片段。知识图谱变得越来越流行，因为它们可以简化对大型数据集的探索和洞察发现。换句话说，知识图谱将数据和相关的元数据连接起来，因此可以用来构建组织信息资产的全面表示。例如，知识图谱可以替代你需要浏览的所有文档堆，以便找到某一特定信息。
- en: Knowledge Graphs are considered part of the Natural Language Processing landscape
    because, in order to build “knowledge”, you must go through a process called “**semantic
    enrichment**”. Since nobody wants to do that manually, we need machines and NLP
    algorithms to perform this task for us.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱被认为是自然语言处理领域的一部分，因为为了构建“知识”，必须经过一个叫做“**语义丰富化**”的过程。由于没有人愿意手动执行这个过程，我们需要机器和NLP算法来为我们完成这项任务。
- en: I will present some useful Python code that can be easily applied in other similar
    cases (just copy, paste, run) and walk through every line of code with comments
    so that you can replicate this example (link to the full code below).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示一些有用的Python代码，这些代码可以轻松地应用于其他类似的情况（只需复制、粘贴、运行），并逐行讲解代码的注释，以便你可以复制这个示例（完整代码的链接如下）。
- en: '[](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/natural_language_processing/example_knowledge_graph.ipynb?source=post_page-----12b93146a458--------------------------------)
    [## DataScience_ArtificialIntelligence_Utils/example_knowledge_graph.ipynb at
    master ·…'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[## DataScience_ArtificialIntelligence_Utils/example_knowledge_graph.ipynb
    at master ·…](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/natural_language_processing/example_knowledge_graph.ipynb?source=post_page-----12b93146a458--------------------------------)'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你现在无法执行该操作。你在另一个标签页或窗口中登录了。在另一个标签页中注销了…
- en: github.com](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/natural_language_processing/example_knowledge_graph.ipynb?source=post_page-----12b93146a458--------------------------------)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/natural_language_processing/example_knowledge_graph.ipynb?source=post_page-----12b93146a458--------------------------------)'
- en: I will parse Wikipedia and extract a page that shall be used as the dataset
    of this tutorial (link below).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我将解析维基百科并提取一个页面，该页面将用作本教程的数据集（链接如下）。
- en: '[](https://en.wikipedia.org/wiki/Russo-Ukrainian_War?source=post_page-----12b93146a458--------------------------------)
    [## Russo-Ukrainian War - Wikipedia'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 俄乌战争 - 维基百科](https://en.wikipedia.org/wiki/Russo-Ukrainian_War?source=post_page-----12b93146a458--------------------------------)'
- en: The Russo-Ukrainian War is an ongoing international conflict between Russia,
    alongside Russian-backed separatists, and…
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 俄乌战争是俄罗斯及其支持的分裂主义者之间正在进行的国际冲突…
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/Russo-Ukrainian_War?source=post_page-----12b93146a458--------------------------------)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[维基百科](https://en.wikipedia.org/wiki/Russo-Ukrainian_War?source=post_page-----12b93146a458--------------------------------)'
- en: 'In particular, I will go through:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我将介绍：
- en: 'Setup: read packages and data with web scraping with [*Wikipedia-API*](https://pypi.org/project/Wikipedia-API/)*.*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置：通过[*Wikipedia-API*](https://pypi.org/project/Wikipedia-API/)读取数据和数据包。
- en: NLP with [*SpaCy*](https://spacy.io/usage/linguistic-features):Sentence segmentation,
    POS tagging, Dependency parsing, NER.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[*SpaCy*](https://spacy.io/usage/linguistic-features)进行NLP：句子分割、词性标注、依存句法分析、命名实体识别。
- en: Extraction of Entities and their Relations with [*Textacy*](https://spacy.io/universe/project/textacy).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[*Textacy*](https://spacy.io/universe/project/textacy)提取实体及其关系。
- en: Network Graph building with [*NetworkX*](https://networkx.org/documentation/stable/auto_examples/index.html)*.*
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有[*NetworkX*](https://networkx.org/documentation/stable/auto_examples/index.html)的网络图构建。
- en: Timeline Graph with [*DateParser*](https://dateparser.readthedocs.io/en/latest/).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有[*DateParser*](https://dateparser.readthedocs.io/en/latest/)的时间线图。
- en: Setup
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: 'First of all, I need to import the following libraries:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要导入以下库：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Wikipedia-api* is the Python wrapper that easily lets you parse Wikipedia
    pages. I shall extract the page I want, excluding all the “notes” and “bibliography”
    at the bottom:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*Wikipedia-api* 是一个 Python 包装器，可以轻松解析 Wikipedia 页面。我将提取我需要的页面，排除页面底部的所有“注释”和“参考书目”：'
- en: '![](../Images/98801f2ea84a245c028d4c26538a7239.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98801f2ea84a245c028d4c26538a7239.png)'
- en: from Wikipedia
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 来源于 Wikipedia
- en: 'We can simply write the name of the page:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地写出页面的名称：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/94afa2a5e25e3dbda1692246d27596bf.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94afa2a5e25e3dbda1692246d27596bf.png)'
- en: In this usecase, I will try to map historical events by identifying and extracting
    subjects-actions-objects from the text (so the action is the relation).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个用例中，我将尝试通过识别和提取文本中的主题-动作-对象（因此动作即为关系）来映射历史事件。
- en: NLP
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NLP
- en: In order to build a Knowledge Graph, we need first to identify entities and
    their relations. Therefore, we need to process the text dataset with NLP techniques.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建知识图谱，我们首先需要识别实体及其关系。因此，我们需要使用 NLP 技术处理文本数据集。
- en: Currently, the most used library for this type of task is *SpaCy*, an open-source
    software for advanced NLP that leverages *Cython* (C+Python). *SpaCy* uses pre-trained
    language models to tokenize the text and transform it into an object commonly
    called “[document](https://spacy.io/api/doc)”, basically a class that contains
    all the annotations predicted by the model.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，用于此类任务的最常用库是 *SpaCy*，这是一个用于高级 NLP 的开源软件，利用 *Cython* (C+Python)。*SpaCy* 使用预训练的语言模型将文本分词，并将其转换为一个通常称为
    “[document](https://spacy.io/api/doc)” 的对象，基本上是一个包含模型预测的所有注释的类。
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first output of the NLP model is [**Sentence segmentation**](https://spacy.io/usage/linguistic-features#sbd):
    the problem of deciding where a sentence begins and ends. Usually, it’s done by
    splitting paragraphs based on punctuation. Let’s see how many sentences *SpaCy*
    split the text into:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: NLP 模型的第一个输出是 [**句子分割**](https://spacy.io/usage/linguistic-features#sbd)：确定一个句子开始和结束的位置的问题。通常，通过基于标点符号拆分段落来完成。让我们看看
    *SpaCy* 将文本拆分成了多少个句子：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/3ec6987c0ef8065f19a9f2d4b1b6e9ea.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3ec6987c0ef8065f19a9f2d4b1b6e9ea.png)'
- en: Image by author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Now, for each sentence, we are going to extract entities and their relations.
    In order to do that, first we need to understand [**Part-of-Speech (POS) tagging**](https://spacy.io/usage/linguistic-features#pos-tagging)**:**
    the process of labeling each word in a sentence with its appropriate grammar tag.
    Here’s the full list of possible tags (as of today):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个句子，我们将提取实体及其关系。为此，我们首先需要理解 [**词性标注 (POS tagging)**](https://spacy.io/usage/linguistic-features#pos-tagging)**:**
    将句子中的每个单词标记上适当的语法标签的过程。以下是可能的标签的完整列表（截至今天）：
- en: '- ***ADJ***: adjective, e.g. big, old, green, incomprehensible, first'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***ADJ***: 形容词，例如 big, old, green, incomprehensible, first'
- en: '- ***ADP***: adposition (preposition/postposition) e.g. in, to, during'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***ADP***: 介词（前置词/后置词）例如 in, to, during'
- en: '- ***ADV***: adverb, e.g. very, tomorrow, down, where, there'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***ADV***: 副词，例如 very, tomorrow, down, where, there'
- en: '- ***AUX***: auxiliary, e.g. is, has (done), will (do), should (do)'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***AUX***: 助动词，例如 is, has (done), will (do), should (do)'
- en: '- ***CONJ***: conjunction, e.g. and, or, but'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***CONJ***: 连词，例如 and, or, but'
- en: '- ***CCONJ***: coordinating conjunction, e.g. and, or, but'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***CCONJ***: 并列连词，例如 and, or, but'
- en: '- ***DET***: determiner, e.g. a, an, the'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***DET***: 限定词，例如 a, an, the'
- en: '- ***INTJ***: interjection, e.g. psst, ouch, bravo, hello'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***INTJ***: 感叹词，例如 psst, ouch, bravo, hello'
- en: '- ***NOUN***: noun, e.g. girl, cat, tree, air, beauty'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***NOUN***: 名词，例如 girl, cat, tree, air, beauty'
- en: '- ***NUM***: numeral, e.g. 1, 2017, one, seventy-seven, IV, MMXIV'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***NUM***: 数字，例如 1, 2017, one, seventy-seven, IV, MMXIV'
- en: '- ***PART***: particle, e.g. ‘s, not'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***PART***: 语气词，例如 ‘s, not'
- en: '- ***PRON***: pronoun, e.g I, you, he, she, myself, themselves, somebody'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***PRON***: 代词，例如 I, you, he, she, myself, themselves, somebody'
- en: '- ***PROPN***: proper noun, e.g. Mary, John, London, NATO, HBO'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***PROPN***: 专有名词，例如 Mary, John, London, NATO, HBO'
- en: '- ***PUNCT***: punctuation, e.g. ., (, ), ?'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***PUNCT***: 标点符号，例如 ., (, ), ?'
- en: '- ***SCONJ***: subordinating conjunction, e.g. if, while, that'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***SCONJ***: 从属连词，例如 if, while, that'
- en: '- ***SYM***: symbol, e.g. $, %, §, ©, +, −, ×, ÷, =, :), emojis'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***SYM***: 符号，例如 $, %, §, ©, +, −, ×, ÷, =, :), 表情符号'
- en: '- ***VERB***: verb, e.g. run, runs, running, eat, ate, eating'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***VERB***: 动词，例如 run, runs, running, eat, ate, eating'
- en: '- ***X***: other, e.g. sfpksdpsxmsa'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***X***: 其他，例如 sfpksdpsxmsa'
- en: '- ***SPACE***: space, e.g.'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***SPACE***: 空格，例如'
- en: 'POS tagging alone is not enough, the model also tries to understand the relationship
    between pairs of words. This task is called [**Dependency (DEP) parsing**](https://spacy.io/usage/linguistic-features#dependency-parse).
    Here’s the full list of possible tags (as of today):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅进行词性标注是不够的，模型还试图理解词对之间的关系。这项任务称为 [**依存句法分析**](https://spacy.io/usage/linguistic-features#dependency-parse)。以下是所有可能的标记列表（截至今天）：
- en: '- ***ACL***: clausal modifier of noun'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***从句修饰名词：*** clausal modifier of noun'
- en: '- ***ACOMP***: adjectival complement'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***形容词补足语：*** adjectival complement'
- en: '- ***ADVCL:*** adverbial clause modifier'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***副词从句修饰语：*** adverbial clause modifier'
- en: '- ***ADVMOD:*** adverbial modifier'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***副词修饰语：*** adverbial modifier'
- en: '- ***AGENT:*** agent'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***施事者：*** agent'
- en: '- ***AMOD:*** adjectival modifier'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***形容词修饰语：*** adjectival modifier'
- en: '- ***APPOS:*** appositional modifier'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***同位修饰语：*** appositional modifier'
- en: '- ***ATTR:*** attribute'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***属性：*** attribute'
- en: '- ***AUX:*** auxiliary'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***辅助词：*** auxiliary'
- en: '- ***AUXPASS:*** auxiliary (passive)'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***辅助动词（被动）：*** auxiliary (passive)'
- en: '- ***CASE:*** case marker'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***格标记：*** case marker'
- en: '- ***CC***: coordinating conjunction'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***并列连词：*** coordinating conjunction'
- en: '- ***CCOMP:*** clausal complement'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***从句补足语：*** clausal complement'
- en: '- ***COMPOUND:*** compound modifier'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***复合修饰语：*** compound modifier'
- en: '- ***CONJ:*** conjunct'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***连接词：*** conjunct'
- en: '- ***CSUBJ:*** clausal subject'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***从句主语：*** clausal subject'
- en: '- ***CSUBJPASS:*** clausal subject (passive)'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***从句主语（被动）：*** clausal subject (passive)'
- en: '- ***DATIVE:*** dative'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***与格：*** dative'
- en: '- ***DEP:*** unclassified dependent'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***依存词：*** unclassified dependent'
- en: '- ***DET:*** determiner'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***限定词：*** determiner'
- en: '- ***DOBJ:*** direct object'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***直接宾语：*** direct object'
- en: '- ***EXPL:*** expletive'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***虚词：*** expletive'
- en: '- ***INTJ:*** interjection'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***感叹词：*** interjection'
- en: '- ***MARK:*** marker'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***标记：*** marker'
- en: '- ***META:*** meta modifier'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***元修饰语：*** meta modifier'
- en: '- ***NEG:*** negation modifier'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***否定修饰语：*** negation modifier'
- en: '- ***NOUNMOD:*** modifier of nominal'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***名词修饰语：*** modifier of nominal'
- en: '- ***NPMOD:*** noun phrase as adverbial modifier'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***名词短语作为副词修饰语：*** noun phrase as adverbial modifier'
- en: '- ***NSUBJ:*** nominal subject'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***名词主语：*** nominal subject'
- en: '- ***NSUBJPASS:*** nominal subject (passive)'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***名词主语（被动）：*** nominal subject (passive)'
- en: '- ***NUMMOD:*** number modifier'
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***数量修饰语：*** number modifier'
- en: '- ***OPRD:*** object predicate'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***对象谓词：*** object predicate'
- en: '- ***PARATAXIS:*** parataxis'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***并列语法：*** parataxis'
- en: '- ***PCOMP:*** complement of preposition'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***介词补足语：*** complement of preposition'
- en: '- ***POBJ:*** object of preposition'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***介词宾语：*** object of preposition'
- en: '- ***POSS:*** possession modifier'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***所有格修饰语：*** possession modifier'
- en: '- ***PRECONJ*:** pre-correlative conjunction'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***前关联连词：*** pre-correlative conjunction'
- en: '- ***PREDET:*** pre-determiner'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***前限定词：*** pre-determiner'
- en: '- ***PREP:*** prepositional modifier'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***介词修饰语：*** prepositional modifier'
- en: '- ***PRT:*** particle'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***词素：*** particle'
- en: '- ***PUNCT:*** punctuation'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***标点：*** punctuation'
- en: '- ***QUANTMOD:*** modifier of quantifier'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***数量词修饰语：*** modifier of quantifier'
- en: '- ***RELCL:*** relative clause modifier'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***关系从句修饰语：*** relative clause modifier'
- en: '- ***ROOT:*** root'
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***根：*** root'
- en: '- ***XCOMP:*** open clausal complement'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***开放从句补足语：*** open clausal complement'
- en: 'Let’s make an example to understand POS tagging and DEP parsing:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子来理解词性标注和依存句法分析：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/4ca9e2e7ea244d3a1bd20faf05a22517.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ca9e2e7ea244d3a1bd20faf05a22517.png)'
- en: 'Let’s check the POS and DEP tags predicted by the NLP model:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下 NLP 模型预测的词性和依存标记：
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/1410ef9f475e206da6e054efb8c69c85.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1410ef9f475e206da6e054efb8c69c85.png)'
- en: Image by author
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '*SpaCy* provides also a [graphic tool](https://spacy.io/usage/visualizers)
    to visualize those annotations:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*SpaCy* 还提供了一个 [图形工具](https://spacy.io/usage/visualizers) 来可视化这些标注：'
- en: '[PRE6]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/b8d9a5d99388ba97c4c4eaa3144f8dd5.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8d9a5d99388ba97c4c4eaa3144f8dd5.png)'
- en: Image by author
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The most important token is the verb (*POS=VERB*) because is the root (*DEP=ROOT*)
    of the meaning in a sentence.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的词素是动词（*POS=VERB*），因为它是句子意义的根源（*DEP=ROOT*）。
- en: '![](../Images/64e0fa11ce6e368669c43d8859a55538.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/64e0fa11ce6e368669c43d8859a55538.png)'
- en: Image by author
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Auxiliary particles, like adverbs and adpositions (*POS=ADV/ADP*), are often
    linked to the verb as modifiers (*DEP=*mod*), as they can modify the meaning of
    the verb. For instance, “*travel to*” and “*travel from*” have different meanings
    even though the root is the same (“*travel*”).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助粒子，例如副词和介词（*POS=ADV/ADP*），通常作为修饰语与动词相连（*DEP=*mod*），因为它们可以修饰动词的意义。例如，“*travel
    to*” 和 “*travel from*” 尽管根词相同（“*travel*”），却有不同的含义。
- en: '![](../Images/f3287c63bbc5adc3e8332d44c1928d30.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f3287c63bbc5adc3e8332d44c1928d30.png)'
- en: Image by author
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Among the words linked to the verb, there must be some nouns (*POS=PROPN/NOUN*)
    that work as the subject and object (*DEP=nsubj/*obj*) of the sentence.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在与动词相关联的词中，必须有一些名词（*POS=PROPN/NOUN*），它们充当句子的主语和宾语（*DEP=nsubj/*obj*）。
- en: '![](../Images/a8a6d2c219de36e650bce6151b5bf3a4.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8a6d2c219de36e650bce6151b5bf3a4.png)'
- en: Image by author
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Nouns are often near an adjective (*POS=ADJ*) that acts as a modifier of their
    meaning (*DEP=amod*). For instance, in “*good person*” and “*bad person*” the
    adjectives give opposite meanings to the noun *“person”.*
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 名词通常靠近一个形容词（*POS=ADJ*），这个形容词充当它们意义的修饰词（*DEP=amod*）。例如，在“*好人*”和“*坏人*”中，形容词给名词*“人”*带来了相反的含义。
- en: '![](../Images/5e6293965ae065dafede1c255e1a0564.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e6293965ae065dafede1c255e1a0564.png)'
- en: Image by author
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Another cool task performed by *SpaCy* is [**Named Entity Recognition (NER)**](https://spacy.io/usage/linguistic-features#named-entities).
    A named entity is a “real-world object” (i.e. person, country, product, date)
    and models can recognize various types in a document. Here’s the full list of
    possible tags (as of today):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*SpaCy* 执行的另一个酷炫任务是 [**命名实体识别（NER）**](https://spacy.io/usage/linguistic-features#named-entities)。命名实体是一个“现实世界的对象”（即人、国家、产品、日期），模型可以识别文档中的各种类型。以下是可能标签的完整列表（截至今日）：'
- en: '- ***PERSON:*** people, including fictional.'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***人物:*** 人，包括虚构的。'
- en: '- ***NORP:*** nationalities or religious or political groups.'
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***国家/宗教/政治组织:*** 国籍、宗教或政治团体。'
- en: '- ***FAC:*** buildings, airports, highways, bridges, etc.'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***设施:*** 建筑物、机场、公路、桥梁等。'
- en: '- ***ORG:*** companies, agencies, institutions, etc.'
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***组织:*** 公司、机构、组织等。'
- en: '- ***GPE:*** countries, cities, states.'
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***GPE:*** 国家、城市、州。'
- en: '- ***LOC:*** non-GPE locations, mountain ranges, bodies of water.'
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***地点:*** 非GPE位置、山脉、水体。'
- en: '- ***PRODUCT:*** objects, vehicles, foods, etc. (Not services.)'
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***产品:*** 物品、车辆、食品等。（不是服务。）'
- en: '- ***EVENT:*** named hurricanes, battles, wars, sports events, etc.'
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***事件:*** 命名的飓风、战役、战争、体育赛事等。'
- en: '- ***WORK_OF_ART:*** titles of books, songs, etc.'
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***艺术作品:*** 书籍、歌曲等的标题。'
- en: '- ***LAW:*** named documents made into laws.'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***法律:*** 成为法律的命名文档。'
- en: '- ***LANGUAGE:*** any named language.'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***语言:*** 任何命名的语言。'
- en: '- ***DATE:*** absolute or relative dates or periods.'
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***日期:*** 绝对或相对的日期或时期。'
- en: '- ***TIME:*** times smaller than a day.'
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***时间:*** 小于一天的时间。'
- en: '- ***PERCENT:*** percentage, including “%”.'
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***百分比:*** 包括“%”的百分数。'
- en: '- ***MONEY:*** monetary values, including unit.'
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***货币:*** 包括单位的货币值。'
- en: '- ***QUANTITY:*** measurements, as of weight or distance.'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***数量:*** 以重量或距离为单位的测量值。'
- en: '- ***ORDINAL:*** “first”, “second”, etc.'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***序数:*** “第一”、“第二”等。'
- en: '- ***CARDINAL:*** numerals that do not fall under another type.'
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- ***基数:*** 不属于其他类型的数字。'
- en: 'Let’s see our example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的例子：
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/848b13980abc501d3ac140d9e5acc8d8.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/848b13980abc501d3ac140d9e5acc8d8.png)'
- en: Image by author
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'or even better with *SpaCy* graphic tool:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 *SpaCy* 的图形工具：
- en: '[PRE8]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/b9006404b0c49d328aca53ab28813899.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9006404b0c49d328aca53ab28813899.png)'
- en: Image by author
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: That is useful in case we want to add several attributes to our Knowledge Graph.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这在我们想要向知识图谱中添加几个属性时非常有用。
- en: Moving on, using the tags predicted by the NLP model, we can extract entities
    and their relations.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 继续，使用NLP模型预测的标签，我们可以提取实体及其关系。
- en: '**Entity & Relation Extraction**'
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**实体与关系提取**'
- en: The idea is very simple but the implementation can be tricky. For each sentence,
    we’re going to extract the subject and object along with their modifiers, compound
    words, and punctuation marks between them.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法非常简单，但实现起来可能会很棘手。对于每个句子，我们将提取主语和宾语及其修饰词、复合词和它们之间的标点符号。
- en: 'This can be done in 2 ways:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过两种方式完成：
- en: '**Manually**, you can start from the baseline code, which probably must be
    slightly modified and adapted to your specific dataset/usecase.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**手动**地，你可以从基线代码开始，这些代码可能需要稍微修改和适应你的特定数据集/用例。'
- en: '[PRE9]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s try it out on this dataset and check out the usual example:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这个数据集上试试，并查看常见的例子：
- en: '[PRE10]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/31084e80201ba04ce021dd92e2a13cec.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31084e80201ba04ce021dd92e2a13cec.png)'
- en: '[PRE11]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/67878e59e8bd4936a43a10c30a1bce21.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/67878e59e8bd4936a43a10c30a1bce21.png)'
- en: '[PRE12]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/ab08673c6872b979eb3c506abcb60b0c.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ab08673c6872b979eb3c506abcb60b0c.png)'
- en: 2\. Alternatively, you can use ***Textacy***, a library built on top of *SpaCy*
    for extending its core functionalities. This is much more user-friendly and in
    general more accurate.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 你也可以使用 ***Textacy***，这是一个建立在 *SpaCy* 之上的库，用于扩展其核心功能。这更友好且通常更准确。
- en: '[PRE13]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/2c430480ba4a981daa8c9c2822bf85af.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c430480ba4a981daa8c9c2822bf85af.png)'
- en: Image by author
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Let’s extract also the attributes using NER tags (i.e. dates):'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也使用NER标签（即日期）提取属性：
- en: '[PRE14]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/d61096259f6f1b6ed84bc617a5fd3795.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d61096259f6f1b6ed84bc617a5fd3795.png)'
- en: Image by author
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Now that we have extracted “knowledge”, we can build the graph.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经提取了“知识”，可以构建图谱。
- en: Network Graph
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络图
- en: 'The standard Python library to create and manipulate graph networks is ***NetworkX***.
    We can create the graph starting from the whole dataset but, if there are too
    many nodes, the visualization will be messy:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 Python 库用于创建和操作图网络是***NetworkX***。我们可以从整个数据集开始创建图，但如果节点太多，视觉效果会变得混乱：
- en: '[PRE15]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/4bfc74c9eb2a4af92f33d79e754fed87.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4bfc74c9eb2a4af92f33d79e754fed87.png)'
- en: Image by author
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Knowledge Graphs make it possible to see how everything is related at a big
    picture level, but like this is quite useless… so better to apply some filters
    based on the information we are looking for. For this example, I shall take only
    the part of the graph involving the most frequent entity (basically the most connected
    node):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱使得从大局上看到事物之间的关系成为可能，但像这样是相当无用的……所以最好是根据我们要寻找的信息应用一些过滤器。对于这个例子，我将只取涉及最频繁实体（基本上是最连接的节点）的图的一部分：
- en: '[PRE16]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/c2ff0f03744dec80e73556d39245abb2.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c2ff0f03744dec80e73556d39245abb2.png)'
- en: Image by author
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '[PRE17]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/62f9aba479b0b678fadcd734acc63dc8.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62f9aba479b0b678fadcd734acc63dc8.png)'
- en: Image by author
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'That’s better. And if you want to make it 3D, use the following code:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这样更好。如果你想将其做成 3D，使用以下代码：
- en: '[PRE18]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/c92571d1d1e576e2b06ffc77a5922888.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c92571d1d1e576e2b06ffc77a5922888.png)'
- en: Image by author
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Please note that a graph might be useful and nice to see, but it’s not the main
    focus of this tutorial. The most important part of a Knowledge Graph is the “knowledge”
    (text processing), then results can be shown on a dataframe, a graph, or a different
    plot. For instance, I could use the dates recognized with NER to build a Timeline
    graph.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，图表可能很有用且可视化效果很好，但这不是本教程的主要焦点。知识图谱最重要的部分是“知识”（文本处理），然后结果可以以数据框、图形或其他图表的形式展示。例如，我可以使用
    NER 识别的日期来构建一个时间轴图。
- en: Timeline Graph
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间轴图
- en: First of all, I have to transform the strings identified as a “date” to datetime
    format. The library ***DateParser***parses dates in almost any string format commonly
    found on web pages.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我必须将被识别为“日期”的字符串转换为 datetime 格式。库***DateParser***可以解析几乎所有在网页上常见的字符串格式的日期。
- en: '[PRE19]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s apply it to the dataframe of attributes:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其应用于属性的数据框：
- en: '[PRE20]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/70777e12da6d469ee726b17e5717e20d.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70777e12da6d469ee726b17e5717e20d.png)'
- en: Image by author
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Now, I shall join it with the main dataframe of entities-relations:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将其与主要的实体-关系数据框合并：
- en: '[PRE21]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](../Images/4295cf217f9e8c39cd2e529feb4b21d1.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4295cf217f9e8c39cd2e529feb4b21d1.png)'
- en: Image by author
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Finally, I can plot the timeline. As we already know, a full plot probably
    won’t be useful:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我可以绘制时间轴。正如我们已经知道的，完整的图表可能不会很有用：
- en: '[PRE22]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/cd5408bb3670cdc5ca8e046212b647cb.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cd5408bb3670cdc5ca8e046212b647cb.png)'
- en: Image by author
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'So it’s better to filter a specific time:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 所以最好是过滤出特定时间段：
- en: '[PRE23]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/1b71d3d0ba0a63a3ba9c68789e0a79aa.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b71d3d0ba0a63a3ba9c68789e0a79aa.png)'
- en: Image by author
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: As you can see, once the “knowledge” has been extracted, you can plot it any
    way you like.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，一旦“知识”被提取出来，你可以用任何方式绘制它。
- en: Conclusion
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This article has been a tutorial about **how to build a Knowledge Graph with
    Python.** I used several NLP techniques on data parsed from Wikipedia to extract
    “knowledge” (i.e. entities and relations) and stored it in a Network Graph object.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是关于**如何用 Python 构建知识图谱**的教程。我使用了几种 NLP 技术处理从维基百科解析的数据，以提取“知识”（即实体和关系），并将其存储在一个网络图对象中。
- en: Now you understand why companies are leveraging NLP and Knowledge Graphs to
    map relevant data from multiple sources and find insights useful for the business.
    Just imagine how much value can be extracted by applying this kind of models on
    all documents (i.e. financial reports, news, tweets) related to a single entity
    (i.e. Apple Inc). You could quickly understand all the facts, people, and companies
    directly connected to that entity. And then, by extending the network, even the
    information not directly connected to starting entity (A — > B — > C).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你明白了为什么公司正在利用 NLP 和知识图谱来映射来自多个来源的相关数据，并找到对业务有用的洞察。试想一下，通过在与单一实体（例如 Apple Inc）相关的所有文档（例如财报、新闻、推文）上应用这种模型，可以提取出多少价值。你可以快速了解所有与该实体直接相关的事实、人物和公司。然后，通过扩展网络，甚至可以获取与起始实体（A
    — > B — > C）不直接相关的信息。
- en: I hope you enjoyed it! Feel free to contact me for questions and feedback or
    just to share your interesting projects.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这个！如有任何问题或反馈，或想分享你的有趣项目，欢迎随时联系我。
- en: 👉 [Let’s Connect](https://linktr.ee/maurodp) 👈
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 👉 [让我们联系](https://linktr.ee/maurodp) 👈
- en: 'This article is part of the series **NLP with Python**, see also:'
  id: totrans-232
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文是**使用Python进行NLP**系列的一部分，还可以查看：
- en: '[](/text-summarization-with-nlp-textrank-vs-seq2seq-vs-bart-474943efeb09?source=post_page-----12b93146a458--------------------------------)
    [## Text Summarization with NLP: TextRank vs Seq2Seq vs BART'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/text-summarization-with-nlp-textrank-vs-seq2seq-vs-bart-474943efeb09?source=post_page-----12b93146a458--------------------------------)
    [## 使用NLP进行文本总结：TextRank与Seq2Seq与BART'
- en: Natural Language Processing with Python, Gensim, Tensorflow, Transformers
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python进行自然语言处理、Gensim、Tensorflow、Transformers
- en: 'towardsdatascience.com](/text-summarization-with-nlp-textrank-vs-seq2seq-vs-bart-474943efeb09?source=post_page-----12b93146a458--------------------------------)
    [](/text-classification-with-nlp-tf-idf-vs-word2vec-vs-bert-41ff868d1794?source=post_page-----12b93146a458--------------------------------)
    [## Text Classification with NLP: Tf-Idf vs Word2Vec vs BERT'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/text-summarization-with-nlp-textrank-vs-seq2seq-vs-bart-474943efeb09?source=post_page-----12b93146a458--------------------------------)
    [](/text-classification-with-nlp-tf-idf-vs-word2vec-vs-bert-41ff868d1794?source=post_page-----12b93146a458--------------------------------)
    [## NLP的文本分类：Tf-Idf与Word2Vec与BERT'
- en: Preprocessing, Model Design, Evaluation, Explainability for Bag-of-Words, Word
    Embedding, Language models
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预处理、模型设计、评估、Bag-of-Words、词嵌入、语言模型的可解释性
- en: towardsdatascience.com](/text-classification-with-nlp-tf-idf-vs-word2vec-vs-bert-41ff868d1794?source=post_page-----12b93146a458--------------------------------)
    [](/text-analysis-feature-engineering-with-nlp-502d6ea9225d?source=post_page-----12b93146a458--------------------------------)
    [## Text Analysis & Feature Engineering with NLP
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/text-classification-with-nlp-tf-idf-vs-word2vec-vs-bert-41ff868d1794?source=post_page-----12b93146a458--------------------------------)
    [](/text-analysis-feature-engineering-with-nlp-502d6ea9225d?source=post_page-----12b93146a458--------------------------------)
    [## NLP的文本分析与特征工程'
- en: Language Detection, Text Cleaning, Length, Sentiment, Named-Entity Recognition,
    N-grams Frequency, Word Vectors, Topic…
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语言检测、文本清理、长度、情感、命名实体识别、N-gram频率、词向量、主题……
- en: towardsdatascience.com](/text-analysis-feature-engineering-with-nlp-502d6ea9225d?source=post_page-----12b93146a458--------------------------------)
    [](/text-classification-with-no-model-training-935fe0e42180?source=post_page-----12b93146a458--------------------------------)
    [## BERT for Text Classification with NO model training
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/text-analysis-feature-engineering-with-nlp-502d6ea9225d?source=post_page-----12b93146a458--------------------------------)
    [](/text-classification-with-no-model-training-935fe0e42180?source=post_page-----12b93146a458--------------------------------)
    [## BERT用于无模型训练的文本分类'
- en: Use BERT, Word Embedding, and Vector Similarity when you don’t have a labeled
    training set
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当你没有标记训练集时，使用BERT、词嵌入和向量相似性
- en: 'towardsdatascience.com](/text-classification-with-no-model-training-935fe0e42180?source=post_page-----12b93146a458--------------------------------)
    [](/ai-chatbot-with-nlp-speech-recognition-transformers-583716a299e9?source=post_page-----12b93146a458--------------------------------)
    [## AI Chatbot with NLP: Speech Recognition + Transformers'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/text-classification-with-no-model-training-935fe0e42180?source=post_page-----12b93146a458--------------------------------)
    [](/ai-chatbot-with-nlp-speech-recognition-transformers-583716a299e9?source=post_page-----12b93146a458--------------------------------)
    [## 使用NLP构建AI聊天机器人：语音识别+Transformers'
- en: Build a talking ChatBot with Python and have a conversation with your AI
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python构建一个会话聊天机器人，与AI进行对话
- en: towardsdatascience.com](/ai-chatbot-with-nlp-speech-recognition-transformers-583716a299e9?source=post_page-----12b93146a458--------------------------------)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/ai-chatbot-with-nlp-speech-recognition-transformers-583716a299e9?source=post_page-----12b93146a458--------------------------------)'
