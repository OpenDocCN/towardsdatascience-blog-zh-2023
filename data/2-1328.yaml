- en: 'Ink to Insights: Comparing SQL and Python Queries using Bookshop Analytics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《从数据到洞察：使用书店分析比较 SQL 和 Python 查询》
- en: 原文：[https://towardsdatascience.com/ink-to-insights-comparing-sql-and-python-queries-using-bookshop-analytics-90e3bb200671](https://towardsdatascience.com/ink-to-insights-comparing-sql-and-python-queries-using-bookshop-analytics-90e3bb200671)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/ink-to-insights-comparing-sql-and-python-queries-using-bookshop-analytics-90e3bb200671](https://towardsdatascience.com/ink-to-insights-comparing-sql-and-python-queries-using-bookshop-analytics-90e3bb200671)
- en: Which approach is better for your exploratory data analysis?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪种方法更适合你的探索性数据分析？
- en: '[](https://medium.com/@john_lenehan?source=post_page-----90e3bb200671--------------------------------)[![John
    Lenehan](../Images/addeeb0bacca7ddec928aa12c2a4fc53.png)](https://medium.com/@john_lenehan?source=post_page-----90e3bb200671--------------------------------)[](https://towardsdatascience.com/?source=post_page-----90e3bb200671--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----90e3bb200671--------------------------------)
    [John Lenehan](https://medium.com/@john_lenehan?source=post_page-----90e3bb200671--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@john_lenehan?source=post_page-----90e3bb200671--------------------------------)[![John
    Lenehan](../Images/addeeb0bacca7ddec928aa12c2a4fc53.png)](https://medium.com/@john_lenehan?source=post_page-----90e3bb200671--------------------------------)[](https://towardsdatascience.com/?source=post_page-----90e3bb200671--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----90e3bb200671--------------------------------)
    [John Lenehan](https://medium.com/@john_lenehan?source=post_page-----90e3bb200671--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----90e3bb200671--------------------------------)
    ·9 min read·Sep 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----90e3bb200671--------------------------------)
    ·阅读时间9分钟·2023年9月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c7141249ee90ee12403abfe5fb98a1d2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c7141249ee90ee12403abfe5fb98a1d2.png)'
- en: Photo by [Ayman Yusuf](https://unsplash.com/@ayman_yusuf97?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Ayman Yusuf](https://unsplash.com/@ayman_yusuf97?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片
- en: SQL is the bread and butter of any data scientist’s toolbox — the ability to
    quickly pull data from a data source for analysis is an essential skill for anyone
    working with large amounts of data. In this post I wanted to give some examples
    of a few basic queries I typically use in SQL, over the course of an EDA process.
    I’ll compare these queries against similar scripts in Python which produce the
    same output, as a comparison between the two approaches.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 是任何数据科学家工具箱中的基础技能 — 能够迅速从数据源中提取数据进行分析是处理大量数据时的必备技能。在这篇文章中，我想给出一些我在 SQL 中通常使用的基本查询的示例，贯穿整个探索性数据分析过程。我将这些查询与在
    Python 中产生相同输出的类似脚本进行比较，以便对这两种方法进行比较。
- en: For this analysis I’ll be using some synthetic data on last year’s highest rated
    books from a hypothetical chain of bookshops (the Total Fiction Bookstore). A
    link to the github folder for this project can be found [here](https://github.com/jlenehan/Bookshop_EDA),
    where I go into the details of running the analysis.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次分析中，我将使用一些关于去年最高评分图书的合成数据，这些数据来自一个假设的书店连锁（总虚构书店）。关于此项目的 GitHub 文件夹的链接可以在[这里](https://github.com/jlenehan/Bookshop_EDA)找到，在那里我详细介绍了如何进行分析。
- en: '![](../Images/d202ae38130a05412bd27ed575c3a2cb.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d202ae38130a05412bd27ed575c3a2cb.png)'
- en: Photo by [Eugenio Mazzone](https://unsplash.com/@eugi1492?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Eugenio Mazzone](https://unsplash.com/@eugi1492?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片
- en: 'As a side note — while I mainly focus on the SQL queries in this article, it’s
    worth noting that these queries can be integrated pretty seamlessly with Python
    using the pandaSQL library (as I’ve done for this project). This can be seen in
    detail in the Jupyter notebook on this project’s GitHub link, but the structure
    of this query generally goes as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 额外说明 — 尽管本文主要关注 SQL 查询，但值得注意的是，这些查询可以通过 pandaSQL 库与 Python 无缝集成（如我在此项目中所做）。这可以在此项目的
    GitHub 链接中的 Jupyter notebook 中详细查看，但这个查询的一般结构如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: PandaSQL is a very practical library for those who have more familiarity with
    SQL querying than the typical Pandas dataset manipulation — and is often much
    easier to read, as I will show here.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: PandaSQL 是一个非常实用的库，对于那些对 SQL 查询比典型的 Pandas 数据集操作更为熟悉的人来说 — 如我将在这里展示的，它通常更容易阅读。
- en: The Dataset
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集
- en: A snippet of the dataset can be seen below — there are columns for book title
    and the year it was published, the number of pages, the genres, the book’s average
    rating, the author, number of units sold, and book revenue.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的一部分如下所示——包含书名和出版年份、页数、类型、书籍的平均评分、作者、销售单位数和书籍收入的列。
- en: '![](../Images/4c8759f11afac45d9c5b72ade2644986.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c8759f11afac45d9c5b72ade2644986.png)'
- en: Synthetic data to be analysed (data by author)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 需分析的合成数据（数据由作者提供）
- en: Revenue Analysis by Decade
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按年代的收入分析
- en: Let’s say I want to know which decade has published the most profitable books
    for the bookshop. The original dataset doesn’t have a column for which decade
    the books were published in — however this is relatively straightforward to input
    to the data. I run a subquery to divide the year using floor division and multiply
    by 10 to get the decade data, before aggregating and averaging the revenue by
    decade. I then order the results by total revenue to get the most profitable decades
    of published books in the bookshop.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想知道哪个年代出版的书籍对书店最有利。原始数据集中没有书籍出版的年代列——但这相对容易输入数据。我运行子查询，通过整数除法来划分年份并乘以10以获得年代数据，然后按年代汇总和平均收入。接着，我按总收入对结果进行排序，以获取书店中最有利的出版年代。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By comparison, an equivalent output in Python would look something like the
    code snippet below. I apply a lambda function which runs the floor division and
    outputs the decade, and from there I aggregate the revenue by decade and sort
    the result by total revenue.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Python中的等效输出看起来类似于下面的代码片段。我应用了一个lambda函数，该函数进行整数除法并输出年代，然后根据年代汇总收入并按总收入对结果进行排序。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note the greater number of separate steps there are in the python script to
    achieve the same result — the functions are awkward and difficult to understand
    on first glance. By comparison the SQL script is much clearer in its presentation,
    and much easier to read.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Python脚本中有更多的独立步骤来实现相同的结果——函数在初看时很笨拙且难以理解。相比之下，SQL脚本在展示上要清晰得多，更易于阅读。
- en: I can now take this query and visualise it to get a sense of the book revenue
    trends across the decades, setting up a matplotlib graph using the following script
    — bar charts show the total revenue by decade, with a scatter plot on the secondary
    axis to show average book revenue.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在可以将这个查询进行可视化，以了解各年代的书籍收入趋势，使用以下脚本设置matplotlib图表——条形图显示按年代的总收入，散点图显示平均书籍收入。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The visualisation can be seen below — books published in the 1960s are apparently
    the most profitable for the bookshop, generating over $192,000 in revenue for
    Total Fiction Bookstore. By comparison, books on the list from the 1900s are more
    profitable on average, though didn’t sell as well as books from the 1960s.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化如下所示——1960年代出版的书籍显然是书店最赚钱的，为“总虚构书店”产生了超过192,000美元的收入。相比之下，1900年代的书籍虽然平均上更有利可图，但销售不如1960年代的书籍。
- en: '![](../Images/74e4067d720de7eb4e0322fcf2ec3c89.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74e4067d720de7eb4e0322fcf2ec3c89.png)'
- en: Total and average revenue by published decade (image by author)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 按发布年代的总收入和平均收入（图像由作者提供）
- en: Average book revenue follows a similar trend to total revenue across all decades
    of published books — with the exception of books from the 1900s and 1980s, which
    are more profitable on average but not overall.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 平均书籍收入在所有出版年代中跟随总收入的趋势——除了1900年代和1980年代的书籍，这些书籍平均上更有利可图，但总体上并不是。
- en: Author Analysis
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作者分析
- en: Now, suppose I want to get data on the top 10 authors in the list, ordered by
    their total generated revenue. For this query I want to know the number of books
    they’ve made that appear on the list, the total revenue they’ve generated on those
    books, their average revenue per book, and the average rating of those books in
    the bookshop. Simple enough question to answer using SQL — I can use a count statementto
    get the total number of books they’ve made, and avg statements to get the mean
    revenue and rating per author. Following that I can group these statements by
    director.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我想获取列表中前10位作者的数据，按照他们的总收入排序。对于这个查询，我想知道他们在列表中出现的书籍数量、这些书籍产生的总收入、每本书的平均收入以及这些书籍在书店中的平均评分。用SQL回答这个简单问题很容易——我可以使用计数语句来获取他们制作的书籍总数，使用平均语句来获取每位作者的平均收入和评分。随后，我可以按导演对这些语句进行分组。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: An equivalent Python script would look like this — roughly the same length,
    but much more complex for the same output. I group the values by author before
    specifying how to aggregate each column in the agg function, then sorting the
    values by total revenue. Again, the SQL script is much clearer by comparison.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个等效的 Python 脚本如下——长度大致相同，但输出的复杂度更高。我在指定如何在 agg 函数中聚合每列之前，对值按作者进行分组，然后按总收入排序。同样，SQL
    脚本的对比明显更清晰。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The output from this query can be seen below — Ava Mitchell leads the field,
    with a total revenue of over $152,000 from her book sales. Emma Hayes takes 2nd
    place at over $85,000, with Liam Parker close behind at over $83,000.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从下面的查询结果可以看到——Ava Mitchell 领先，书籍销售总收入超过 $152,000。Emma Hayes 位居第二，收入超过 $85,000，Liam
    Parker 紧随其后，收入超过 $83,000。
- en: '![](../Images/fd9403ef9a01506a7a34da60f5bdb47a.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd9403ef9a01506a7a34da60f5bdb47a.png)'
- en: Output of the book author query
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍作者查询的输出
- en: Visualising this in matplotlib using the following script, we can generate bar
    plots of total revenue with data points showing the average book revenue per author.
    The average rating per author is also plotted on a secondary axis.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 matplotlib 通过以下脚本进行可视化，我们可以生成总收入的条形图，并且数据点显示每位作者的平均书籍收入。每位作者的平均评分也绘制在第二个坐标轴上。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running this, we get the following graph:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本，我们得到以下图表：
- en: '![](../Images/aba0c9453bcdd05265b6c7f25cb7d10e.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aba0c9453bcdd05265b6c7f25cb7d10e.png)'
- en: Top 10 authors by revenue and rating (image by author)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 收入和评分前10名作者（图片由作者提供）
- en: This graph does point to a pretty clear assertion — revenue doesn’t correlate
    with average rating for each author. Ava Mitchell has the highest revenue but
    is at the median in terms of rating for the authors listed above. Olivia Hudson
    is highest by average rating while placing 8th in total revenue; there is no observable
    trend between an author’s revenue and their popularity.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表确实指向了一个相当明确的结论——收入与每位作者的平均评分没有关联。Ava Mitchell 的收入最高，但在上述作者中评分处于中位数。Olivia
    Hudson 在平均评分方面最高，但总收入排名第8；作者的收入与其受欢迎程度之间没有可观察到的趋势。
- en: Comparing Book Length vs Revenue
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较书籍长度与收入
- en: Finally, let’s assume I want to show how book revenue differs based on the book
    length. To answer this question, I first want to divide the books equally into
    4 categories based on the book length quartiles, which will give a better idea
    of overall revenue vs book length trends.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，假设我想展示书籍收入如何根据书籍长度的不同而变化。为了回答这个问题，我首先要将书籍根据书籍长度的四分位数均分为 4 类，这将更好地了解收入与书籍长度的整体趋势。
- en: Firstly, I define the quartiles in SQL, using a subquery to generate these values,
    before sorting the books into these buckets using a case when statement.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我在 SQL 中定义四分位数，使用子查询生成这些值，然后通过 case when 语句将书籍分类到这些桶中。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Alternatively (for SQL dialects that don’t support percentile functions, like
    SQLite), the quartiles can be calculated separately before inputting them manually
    to the case when statement.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另外（对于不支持百分位函数的 SQL 方言，如 SQLite），可以单独计算四分位数，然后手动输入到 case when 语句中。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Running this same query in Python, I define the percentiles using numpy before
    using the cut function to sort the books into their buckets, then sorting the
    values by book langth in pages. As before, this process is noticeably more complex
    than the equivalent script in SQL.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中运行相同的查询时，我使用 numpy 定义百分位数，然后使用 cut 函数将书籍分类到各个桶中，再按照书籍的页数排序。与之前一样，这个过程明显比
    SQL 中的等效脚本要复杂。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output to this query can be visualised as boxplots using seaborn — a snippet
    of the script used to generate the boxplots can be seen below. Note that the runtime
    buckets were manually sorted into the correct order to have them properly presented.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询的输出可以通过 seaborn 进行箱线图可视化——生成箱线图的脚本片段如下所示。注意，运行时间的桶被手动排序以正确展示。
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The boxplots can be seen below —note the median revenue for each book length
    quartile trends upwards as the books get longer. This suggests that longer books
    are more profitable at the bookshop.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 箱线图如下所示——注意每个书籍长度四分位数的中位收入随着书籍长度增加而上升。这表明较长的书籍在书店里更具盈利性。
- en: '![](../Images/092229bc48947966640cf80587ee58c7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/092229bc48947966640cf80587ee58c7.png)'
- en: Boxplot of revenue by book length quartile (image by author)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按书籍长度四分位数的收入箱线图（图片由作者提供）
- en: Additionally the range of the 4th quartile is much wider compared to the other
    quartiles, indicating there’s more variation in the price point for larger books.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，第4四分位数的范围相比其他四分位数要宽得多，这表明大型书籍的价格点变动更大。
- en: Final Thoughts and Further Applications
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终想法及进一步应用
- en: To conclude, the use of SQL for data analysis queries is typically much more
    straightforward than using equivalent operations in Python; the language is easier
    to write than Python queries, while broadly capable of producing the same results.
    I wouldn’t argue that either is better than the other — I’ve used a combination
    of both languages in this analysis — rather, I believe that using a combination
    of both languages together can produce more efficient and effective data analysis.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，使用SQL进行数据分析查询通常比在Python中进行等效操作要简单得多；SQL语言比Python查询更易于编写，同时广泛能够产生相同的结果。我不会主张其中任何一个比另一个更好——我在这个分析中使用了这两种语言的组合——而是，我相信使用这两种语言的组合可以产生更高效和有效的数据分析。
- en: Therefore, given the higher clarity in writing SQL queries over queries in Python,
    I think it’s much more natural to use this when performing the initial EDA for
    a project. SQL is far easier to read and write as I’ve shown in this article,
    making it especially advantageous for these early exploratory tasks. I often use
    it when beginning on a project, and I’d recommend this approach to anyone who
    already has a decent grasp of SQL querying.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，考虑到SQL查询的书写清晰度高于Python查询，我认为在项目的初步EDA中使用SQL更为自然。正如我在本文中所示，SQL更容易阅读和编写，这使得它在这些早期探索任务中尤其有利。我在开始项目时经常使用它，并推荐这种方法给任何对SQL查询已有相当了解的人。
