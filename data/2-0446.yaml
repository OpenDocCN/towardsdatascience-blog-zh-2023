- en: 'Building Better Data Warehouses with Dimensional Modeling: A Guide for Data
    Engineers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用维度建模构建更好的数据仓库：数据工程师指南
- en: 原文：[https://towardsdatascience.com/building-better-data-warehouses-with-dimensional-modeling-a-guide-for-data-engineers-422b3cd52df4](https://towardsdatascience.com/building-better-data-warehouses-with-dimensional-modeling-a-guide-for-data-engineers-422b3cd52df4)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-better-data-warehouses-with-dimensional-modeling-a-guide-for-data-engineers-422b3cd52df4](https://towardsdatascience.com/building-better-data-warehouses-with-dimensional-modeling-a-guide-for-data-engineers-422b3cd52df4)
- en: Data Warehouse Dimensional Modeling Design 101
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据仓库维度建模设计 101
- en: '[](https://chengzhizhao.medium.com/?source=post_page-----422b3cd52df4--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----422b3cd52df4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----422b3cd52df4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----422b3cd52df4--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----422b3cd52df4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://chengzhizhao.medium.com/?source=post_page-----422b3cd52df4--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----422b3cd52df4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----422b3cd52df4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----422b3cd52df4--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----422b3cd52df4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----422b3cd52df4--------------------------------)
    ·9 min read·May 8, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----422b3cd52df4--------------------------------)
    ·阅读时间 9 分钟·2023年5月8日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2aaba6fe12b34ed39479fd86886ac73a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2aaba6fe12b34ed39479fd86886ac73a.png)'
- en: Photo by [Erin Doering](https://unsplash.com/@edoering?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/wSWWyNJSL40?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Erin Doering](https://unsplash.com/@edoering?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，来源于[Unsplash](https://unsplash.com/photos/wSWWyNJSL40?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: 'Regarding system design for a data-intensive application, it usually comes
    with two options: write or read optimized.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据密集型应用的系统设计，通常有两个选项：优化写入或优化读取。
- en: There isn’t a database design that fits and optimizes both writing and reading.
    Like all system design perspectives, no solution is right or wrong, while only
    pros and cons. As data professionals who work on data model design, a critical
    part of the role is to identify the use case and further identify which design
    principle should be applied.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一种数据库设计既适合于写入也优化读取。就像所有系统设计视角一样，没有绝对对错的解决方案，只有优缺点。作为从事数据模型设计的数据专业人士，角色中的一个关键部分是识别用例，并进一步确定应应用哪种设计原则。
- en: 'The data warehouse has historically acted as the layer serving data to the
    end users, and it’s the last mile to convert data to insights. Ralph Kimball developed
    one of the famous modeling design techniques called [dimensional modeling](https://en.wikipedia.org/wiki/Dimensional_modeling).
    His [The Data Warehouse Toolkit: The Definitive Guide to Dimensional Modeling,
    3rd Edition](https://www.amazon.com/Data-Warehouse-Toolkit-Definitive-Dimensional/dp/1118530802/ref=asc_df_1118530802/?tag=hyprod-20&linkCode=df0&hvadid=312128454859&hvpos=&hvnetw=g&hvrand=12986151952939713448&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9032171&hvtargid=pla-396828635481&psc=1),
    is the most critical book for dimensional modeling.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库历史上一直作为向最终用户提供数据的层，它是将数据转化为洞察的最后一公里。Ralph Kimball 开发了一种著名的建模设计技术，称为[维度建模](https://en.wikipedia.org/wiki/Dimensional_modeling)。他的[《数据仓库工具包：维度建模的权威指南，第3版》](https://www.amazon.com/Data-Warehouse-Toolkit-Definitive-Dimensional/dp/1118530802/ref=asc_df_1118530802/?tag=hyprod-20&linkCode=df0&hvadid=312128454859&hvpos=&hvnetw=g&hvrand=12986151952939713448&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9032171&hvtargid=pla-396828635481&psc=1)是维度建模的最关键书籍。
- en: Although big data and cloud computing technologies unblock us from using more
    computing power and cheaper storage, new or even experienced data engineers have
    overseen the data warehouse modeling design. Fewer people pay attention to types
    of slow change dimension (SCD), surrogated key, table granularity, etc. concepts
    anymore.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大数据和云计算技术解放了我们，使用更多的计算能力和更便宜的存储，但新手或经验丰富的数据工程师却忽视了数据仓库建模设计。越来越少的人关注慢变化维度（SCD）、代理键、表粒度等概念。
- en: 'Data model design is crucial for setting the foundation for any data warehouse
    system. I want to bring the community’s attention to the essential- Building Better
    Data Warehouses with Dimensional Modeling: A Guide for Data Engineers.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数据模型设计对于建立任何数据仓库系统的基础至关重要。我希望引起社区对以下内容的关注——《通过维度建模构建更好的数据仓库：数据工程师指南》。
- en: Why Should You Care About OLTP vs. OLAP
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该关心 OLTP 与 OLAP
- en: 'If you are familiar with the databases, two acronyms should not be strange:
    OLTP and OLAP.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对数据库有所了解，两个缩写词应该不会陌生：OLTP 和 OLAP。
- en: OLTP stands for Online Transaction Processing, known for its design philosophy
    of normalization. In the early days, storage is expensive. **The core idea of
    normalization is to reduce duplication and improve write efficiency.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: OLTP 代表在线事务处理，以规范化的设计理念而闻名。在早期，存储是昂贵的。**规范化的核心思想是减少重复并提高写入效率。**
- en: For example, we could have a two-dimensional spreadsheet table. We have the
    product and the sub-type of its product. Both Alice and John have purchased the
    Honeycrisp apple at $1.99\. The same attribute for the exact apple repeats twice
    for different customers — we have duplication.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以有一个二维电子表格表。我们有产品及其子类型。爱丽丝和约翰都以 $1.99 购买了 Honeycrisp 苹果。对于不同的客户，相同属性的相同苹果重复出现——我们有重复。
- en: It becomes even worse when we’d need to perform an update/insert/delete operation.
    For example, we’d need to add which farm the apples come from, so we have to return
    to this table and repeat the entries thousands of times.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要执行更新/插入/删除操作时，情况会变得更糟。例如，我们需要添加苹果来源于哪个农场，因此我们必须返回到这个表中并重复录入数千次。
- en: '![](../Images/d28fefbde9fba84bc8b82e9b11d84fac.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d28fefbde9fba84bc8b82e9b11d84fac.png)'
- en: OLTP Normalization to Remove Duplicates | Image By Author
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OLTP 规范化以去除重复 | 图片来源：作者
- en: To resolve such duplication and improve efficiency, we can accomplish this by
    normalization — making a separate product table and moving all its related fields
    to that table. In the original table, only keep an identifier to reference the
    row in the newly created table.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这种重复并提高效率，我们可以通过规范化来实现——创建一个单独的产品表，并将所有相关字段移动到该表中。在原始表中，仅保留一个标识符以引用新创建的表中的行。
- en: This saves the storage spaces and reduces the number of rows to touch if an
    update/insert/delete operation needs to be performed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这节省了存储空间，并减少了在需要执行更新/插入/删除操作时接触的行数。
- en: So what’s the catch on the OLTP side? *It’s not for analytics pattern queries.*
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 OLTP 方面的难点是什么？*它不适用于分析模式查询。*
- en: '**The analytics pattern queries focus on query efficiency in reading data using
    Select/Filter/Aggregation.** The lack of such support for such query patterns
    leads to OLAP.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析模式查询专注于使用选择/过滤/聚合在读取数据时的查询效率。** 对这种查询模式缺乏支持导致了 OLAP。'
- en: OLAP stands for Online Analytical Processing, known for its design philosophy
    of denormalization. **The core idea of denormalization is to reduce complex business
    logic and big table joins (later, we call it fact to fact table) at run time.**
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: OLAP 代表在线分析处理，以非规范化的设计理念而闻名。**非规范化的核心思想是减少复杂的业务逻辑和大型表连接（后面我们称之为事实到事实表）在运行时的需求。**
- en: Preparing and writing data often happens beforehand within an ETL process, which
    usually takes longer to execute and precompute the business logic into the final
    table.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的准备和编写通常发生在 ETL 过程的前期，这通常需要更长的时间来执行和将业务逻辑预计算到最终表中。
- en: Returning to our data example of Apples, the spreadsheet we shared before normalization
    is an excellent example of analytics design. We have avoided joins between spreadsheets
    and can perform select/filter directly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的苹果数据示例，我们之前共享的电子表格是分析设计的一个优秀例子。我们避免了电子表格之间的联接，并且可以直接进行选择/过滤。
- en: Most of the time, data engineering aims to serve an OLAP data warehouse for
    end users. Unlike OLTP, which avoids duplication as much as poss, The design principle
    of OLAP is — **redundant (denormalization) isn’t bad. We sacrifice the storage
    cost but get faster query time at run time.**
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，数据工程的目标是为终端用户提供OLAP数据仓库。与尽量避免重复的OLTP不同，OLAP的设计原则是——**冗余（反规范化）并不坏。我们牺牲了存储成本，但在运行时获得了更快的查询速度。**
- en: 4 Steps For Successful Dimensional Model Design
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成功维度模型设计的4个步骤
- en: '[The Data Warehouse Toolkit: The Definitive Guide to Dimensional Modeling,
    3rd Edition](https://www.amazon.com/Data-Warehouse-Toolkit-Definitive-Dimensional/dp/1118530802/ref=asc_df_1118530802/?tag=hyprod-20&linkCode=df0&hvadid=312128454859&hvpos=&hvnetw=g&hvrand=12986151952939713448&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9032171&hvtargid=pla-396828635481&psc=1),
    is the most critical book for dimensional modeling. The book covers four essential
    steps for a successful data warehouse:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据仓库工具包：维度建模的权威指南，第3版](https://www.amazon.com/Data-Warehouse-Toolkit-Definitive-Dimensional/dp/1118530802/ref=asc_df_1118530802/?tag=hyprod-20&linkCode=df0&hvadid=312128454859&hvpos=&hvnetw=g&hvrand=12986151952939713448&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9032171&hvtargid=pla-396828635481&psc=1)
    是维度建模最关键的书籍。该书涵盖了成功构建数据仓库的四个关键步骤：'
- en: 1\. Choose the Business Process
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 选择业务流程
- en: Through my data engineering career path, I learned to find and stick to the
    business use case is the most important thing. You can have all the fancy tools,
    milliseconds latency real-time processing, and a powerful distributed compute
    query engine. No use case is a castle in the air.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的数据工程职业生涯中，我学到的最重要的事情就是找到并坚持业务用例。你可以拥有所有高端工具、毫秒级延迟的实时处理和强大的分布式计算查询引擎。但没有用例就像空中楼阁。
- en: Regardless of how thoughtful your design is, consulting with the end users is
    always a wise first move if you are also the end user (usually unlikely for data
    engineering). We can interview end users on how they parse and comprehend the
    data with their domain knowledge, how their current reports are generated, and
    understand the pain point in their process.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的设计多么周到，如果你也是终端用户（通常不太可能对于数据工程来说），咨询终端用户始终是明智的第一步。我们可以采访终端用户，了解他们如何利用领域知识解析和理解数据，他们当前的报告是如何生成的，以及了解他们在过程中遇到的痛点。
- en: Kimball’s [Enterprise Data Warehouse Bus Architecture](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/kimball-data-warehouse-bus-architecture/)
    is also an excellent technique to bridge the business use processes and the standard
    dimensions. The goal is to evaluate what sizes are shared across the fact table.
    Leveraging the bus matrix technique streamlines the design decision on designing
    dimensions at a later stage and helps you visualize the overall structure.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Kimball的[企业数据仓库总线架构](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/kimball-data-warehouse-bus-architecture/)也是一种优秀的技术，用于桥接业务使用流程和标准维度。目标是评估在事实表中共享的大小。利用总线矩阵技术可以简化后续阶段的维度设计决策，并帮助你可视化整体结构。
- en: '![](../Images/3493a709ca2cfa113945b2b2b59b6827.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3493a709ca2cfa113945b2b2b59b6827.png)'
- en: Data Warehouse Bus Matrix | Image By Author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库总线矩阵 | 图片由作者提供
- en: 2\. Declare the grain
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 声明粒度
- en: What is the gain? It refers to the lowest level of information kept in a table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 粒度是什么？它指的是表中保留的信息的最低级别。
- en: How do we know which grain is needed? We’d need to consult with our users to
    make such a decision. Usually, the more detailed information is provided, the
    more flexible it is within the table. Only having aggregated data is impossible
    to get the detail line level. For example, we can get the weekly sales data from
    a daily aggregation, but we can’t break down the weekly sales into daily easily.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何知道需要什么粒度？我们需要与用户咨询以做出这样的决定。通常，提供的信息越详细，表格中的灵活性就越高。仅有聚合数据是不可能获得详细的行级数据的。例如，我们可以从每日聚合中获得每周销售数据，但很难将每周销售数据轻松拆解为每日数据。
- en: The aggregate view is faster for queries but needs more detail. On the other
    hand, the lower grain can be aggregated later to provide the same insights, but
    it can take additional time at run time. It’s critical to confer with end users
    and help them understand the pros and cons and potential future needs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合视图在查询时更快，但需要更多细节。另一方面，更低的粒度可以在后期聚合以提供相同的见解，但在运行时可能需要额外的时间。与终端用户协商并帮助他们理解利弊和潜在的未来需求是至关重要的。
- en: I recommend starting the grain as low as possible because more granular data
    can be aggregated later, but not the other way around. You can make a higher-grain
    fact table using the existing one if a higher grain is needed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议将粒度设定得尽可能低，因为更详细的数据可以在后续聚合，但反之则不可。如果需要更高粒度的事实表，可以使用现有的事实表来构建。
- en: 3\. Identify the Dimensions
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 确定维度
- en: Once the grain is identified, dimensions should be the next to locate. Dimensions
    are the cornerstone of the fact table.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了粒度，接下来应该确定维度。维度是事实表的基石。
- en: Dimensions are to keep the fact table with more sense for the business. Typically
    dimensions are nouns like date, category, products, etc. They serve the purpose
    of the slice & dice. End users can use dimensions to focus on a specific data
    area or aggregate multiple fields to observe potential patterns. For example,
    what are the top 3 types of apples in our previous example?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 维度用于使事实表对业务更具意义。通常，维度是名词，如日期、类别、产品等。它们的作用是切片和切块。最终用户可以使用维度来关注特定数据区域或汇总多个字段以观察潜在模式。例如，在我们之前的例子中，前3种苹果是什么？
- en: Dimensions often contain much less than the fact tables. Suppose you are familiar
    with distributed computing or have worked on Spark physical plan. In that case,
    dimension tables are usually suitable for broadcast join, which means this dataset
    is small enough to send to every node for joining efficiency.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 维度表通常包含的数据比事实表少得多。如果你熟悉分布式计算或曾在Spark物理计划中工作过，那么维度表通常适合广播连接，这意味着这个数据集足够小，可以发送到每个节点以提高连接效率。
- en: The slow change dimension (SCD) is a core dimension designing concept. Although
    there are over six types of SCD, the **most critical ones are SCD Type 2**, given
    its wide adoption in the industry.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 缓慢变化维度（SCD）是核心维度设计概念。虽然有超过六种SCD类型，但**最关键的是SCD类型2**，因为它在行业中的广泛应用。
- en: If a row in the dimension value has been modified, how to track such change
    in your dimension table design?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果维度值中的一行已被修改，如何在你的维度表设计中跟踪这种变化？
- en: That’s the beauty of SCD Type 2\. We’d add another row with the same business
    key. The newly added row includes the unchanged fields and the modified fields.
    To know which row is present and which is the past, we’d add the start and end
    date time for the valid period of a specific row. For example, if the supplier
    moved from CA to IL, we can still track it in the slow-changing dimension.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是SCD类型2的魅力。我们会添加另一行，使用相同的业务键。新添加的行包括未更改的字段和修改过的字段。为了知道哪一行是当前的，哪一行是过去的，我们会为特定行的有效期添加开始和结束日期时间。例如，如果供应商从CA迁移到IL，我们仍然可以在缓慢变化维度中追踪。
- en: '![](../Images/6f678099620f9b322f1384523a244cb6.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f678099620f9b322f1384523a244cb6.png)'
- en: Slowly Changing Dimension (SCD) Type 2 | Image By Author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 缓慢变化维度（SCD）类型2 | 作者图片
- en: The Suppier_Code — ABC is usually the business key supplied from an OLTP system.
    To keep a primary to join with the fact table later, we’d need to create a [surrogate
    key](https://en.wikipedia.org/wiki/Surrogate_key) — Suppkier_Key- unique from
    this dimension.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Suppier_Code — ABC 通常是从OLTP系统提供的业务键。为了保持一个主键，以便以后与事实表连接，我们需要创建一个[代理键](https://en.wikipedia.org/wiki/Surrogate_key)
    — Suppkier_Key——在这个维度中是唯一的。
- en: 4\. Identify the Fact
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 确定事实
- en: The fact table is the “soul” of dimensional modeling. The fact table keeps the
    core business in the fact table. Most fact table rows are numeric only, such as
    total sales quantity, transaction fee, and profit.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 事实表是维度建模的“灵魂”。事实表保留了核心业务数据。大多数事实表的行仅为数字，例如总销售量、交易费用和利润。
- en: There are multiple types of fact tables. You can build a transactional-based
    fact table or a snapshot fact table like monthly sales.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 事实表有多种类型。你可以构建基于事务的事实表或快照事实表，如每月销售数据。
- en: The core idea of the fact table is to track the data change for a given period.
    For example, assume Alice has bought the Honeycrisp apple. Then the next day,
    she returns it because she found a worm inside the apple.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 事实表的核心思想是跟踪给定时期的数据变化。例如，假设Alice购买了Honeycrisp苹果。然后第二天，她因为发现苹果里有虫子而退货。
- en: If we take the transaction base view, we will log two rows. The first row is
    the profit for the $2.99, and the second is -$2.99 (assuming no extra operation
    cost) since she returns the apple.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们采用事务基础视图，我们将记录两行。第一行是$2.99的利润，第二行是-$2.99（假设没有额外操作成本），因为她退货了。
- en: If we take a snapshot of the monthly base view, Alice’s purchase won’t impact
    the business since the net profit from Alice is 0.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们对每月的基本视图进行快照，Alice的购买不会影响业务，因为Alice的净利润为0。
- en: The fact table is the tip of the pyramid. It requires all the foundation work
    to be ready. So having a solid foundation is critical before jumping into the
    fact table design.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 事实表是金字塔的顶端。它需要所有基础工作准备好。因此，在开始设计事实表之前，拥有一个坚实的基础是至关重要的。
- en: Should I Choose Star Schema and SnowFlake Schema?
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我应该选择星型模式还是雪花模式？
- en: The choice of [Star schema](https://en.wikipedia.org/wiki/Star_schema) and [Snowflake
    schema](https://en.wikipedia.org/wiki/Snowflake_schema) for the data warehouse
    could be more straightforward for people familiar with the OLTP design and trying
    to put some level of normalization.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[星型模式](https://en.wikipedia.org/wiki/Star_schema)和[雪花模式](https://en.wikipedia.org/wiki/Snowflake_schema)的选择对于熟悉OLTP设计并试图进行一定程度规范化的数据仓库来说可能更直接。'
- en: 'Start schema should be preferable in the majority of cases. There are a few
    reasons:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，星型模式应该是首选。原因有几个：
- en: We’d want to avoid extra join, which slows down your query performance
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望避免额外的联接，这会降低查询性能。
- en: The more relationship among dimensions, the more complicated to make manage
    and maintain data integrity
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维度之间的关系越多，管理和维护数据完整性就越复杂。
- en: End users usually don’t have the same familiarity with data schema, and designing
    the data warehouse should be simple and user-friendly.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终用户通常对数据模式不够熟悉，数据仓库的设计应该简单且用户友好。
- en: The extra cost to store additional data is minimal.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储额外数据的额外成本是微乎其微的。
- en: An exception we shall consider Snowflake schema is to save some cost or if the
    dimensional itself updates frequently, and you need to add normalization to reduce
    the number of fields to be touched. However, the first goal is to reduce the join
    to reduce the query time for the end users.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们考虑雪花模式的一个例外情况是为了节省成本，或者如果维度本身频繁更新，需要添加规范化以减少需要处理的字段数量。然而，首要目标是减少联接，以减少最终用户的查询时间。
- en: Why Not Keep Everything on a Single Table?
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不将所有内容保存在单个表中？
- en: It is also an option that stores all the fields in a single table instead of
    separating fact and dimension tables.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是将所有字段存储在一个表中，而不是分开存储事实表和维度表。
- en: We could go with a spreadsheet-like single table, and the query could become
    even faster with columnar storage like [Parquet](https://parquet.apache.org/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择类似电子表格的单表，并且通过像[Parquet](https://parquet.apache.org/)这样的列式存储，查询可能变得更快。
- en: The critical criteria to consider is — a dimension table is also shared across
    multiple fact tables. It would make things easier to manage as the dimension has
    been referenced in various places.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的关键标准是——维度表也会在多个事实表中共享。这样可以更容易地管理，因为维度在多个地方被引用。
- en: How about joining? Is dimension to fact table join slow? We have mentioned earlier
    that “Dimensions often contain much less than the fact tables.”. For distributed
    computing, the most efficient way is to send the smaller dataset to every single
    node to avoid a large volume of data getting shuffled. In this case, the join
    of the fact table is usually minimal, and it’s the engineer to evaluate the trade-off
    between query performance or data management effort.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于联接呢？维度表和事实表的联接是否缓慢？我们之前提到过“维度通常比事实表包含的数据少得多。”对于分布式计算，最有效的方法是将较小的数据集发送到每个节点，以避免大量数据的传输。在这种情况下，事实表的联接通常是最小的，由工程师评估查询性能和数据管理工作之间的权衡。
- en: Final Thought
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的思考
- en: Dimensional modeling and its principle have been in the industry for over 40
    years. It has been proven to be a typical design pattern for OLAP use cases. Although
    the big data era has brought us much more powerful distributed computing engines
    than ever, the fundamental design principle for OLAP shouldn’t fade away. Getting
    the design of a data project right is always crucial rather than throwing extravagant
    resources.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 维度建模及其原则在行业中已经存在超过40年。它已被证明是一种典型的OLAP用例设计模式。尽管大数据时代带来了比以往更强大的分布式计算引擎，但OLAP的基本设计原则不应被忽视。正确设计数据项目始终至关重要，而不是盲目投入资源。
- en: I hope this article can bring awareness to more data engineers who overlook
    the data warehouse design to rethink design first than chasing new tools.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能够引起更多数据工程师的关注，促使他们在追逐新工具之前重新考虑数据仓库设计。
