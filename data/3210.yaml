- en: Proximity Analysis to Find the Nearest Bar Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行邻近分析以找到最近的酒吧
- en: 原文：[https://towardsdatascience.com/proximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d?source=collection_archive---------2-----------------------#2023-10-26](https://towardsdatascience.com/proximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d?source=collection_archive---------2-----------------------#2023-10-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/proximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d?source=collection_archive---------2-----------------------#2023-10-26](https://towardsdatascience.com/proximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d?source=collection_archive---------2-----------------------#2023-10-26)
- en: '**A few words about spatial data processing**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**关于空间数据处理的几点说明**'
- en: '[](https://medium.com/@mik.sarafanov?source=post_page-----a29d29a3754d--------------------------------)[![Mikhail
    Sarafanov](../Images/88869a3c6f664785c90539dd7aab6d74.png)](https://medium.com/@mik.sarafanov?source=post_page-----a29d29a3754d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a29d29a3754d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a29d29a3754d--------------------------------)
    [Mikhail Sarafanov](https://medium.com/@mik.sarafanov?source=post_page-----a29d29a3754d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mik.sarafanov?source=post_page-----a29d29a3754d--------------------------------)[![Mikhail
    Sarafanov](../Images/88869a3c6f664785c90539dd7aab6d74.png)](https://medium.com/@mik.sarafanov?source=post_page-----a29d29a3754d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a29d29a3754d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a29d29a3754d--------------------------------)
    [Mikhail Sarafanov](https://medium.com/@mik.sarafanov?source=post_page-----a29d29a3754d--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F209c78c40898&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fproximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d&user=Mikhail+Sarafanov&userId=209c78c40898&source=post_page-209c78c40898----a29d29a3754d---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a29d29a3754d--------------------------------)
    ·10 min read·Oct 26, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa29d29a3754d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fproximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d&user=Mikhail+Sarafanov&userId=209c78c40898&source=-----a29d29a3754d---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F209c78c40898&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fproximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d&user=Mikhail+Sarafanov&userId=209c78c40898&source=post_page-209c78c40898----a29d29a3754d---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a29d29a3754d--------------------------------)
    ·10分钟阅读·2023年10月26日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa29d29a3754d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fproximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d&user=Mikhail+Sarafanov&userId=209c78c40898&source=-----a29d29a3754d---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa29d29a3754d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fproximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d&source=-----a29d29a3754d---------------------bookmark_footer-----------)![](../Images/41128cdb9b2221c5fd5299b99c687008.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa29d29a3754d&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fproximity-analysis-to-find-the-nearest-bar-using-python-a29d29a3754d&source=-----a29d29a3754d---------------------bookmark_footer-----------)![](../Images/41128cdb9b2221c5fd5299b99c687008.png)'
- en: Preview image (by author)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 预览图片（作者提供）
- en: 'Disclaimer: in this article we will demonstrate all approaches using the open-source
    library [estaty](https://github.com/wiredhut/estaty). This library appeared due
    to the desire to formalize the algorithms we use in our work into a tool that
    will be available to other developers. In other words, this article is written
    by the maintainer of the library.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 免责声明：在本文中，我们将使用开源库[estaty](https://github.com/wiredhut/estaty)演示所有方法。这个库的出现是因为我们希望将工作中使用的算法形式化为一个工具，供其他开发者使用。换句话说，本文由该库的维护者撰写。
- en: Today we would like to continue discussing the topic of spatial data processing
    using open-source Python library. We have already talked about how to [combine
    Open Street Map and Landsat open data to verify areas of green zones](/combining-open-street-map-and-landsat-open-data-to-verify-areas-of-green-zones-b1956e561321)
    nearby real estate objects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们将继续讨论使用开源Python库进行空间数据处理的话题。我们已经讨论过如何[结合Open Street Map和Landsat开放数据来验证房地产对象附近的绿地面积](/combining-open-street-map-and-landsat-open-data-to-verify-areas-of-green-zones-b1956e561321)。
- en: 'Now let’s consider another type of analysis: proximity analysis, or the availability
    (or accessibility) of some useful objects, such as parks, hospitals, kindergartens,
    etc. (Figure 1).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑另一种类型的分析：邻近性分析，或一些有用对象的可用性（或可达性），如公园、医院、幼儿园等（图1）。
- en: '![](../Images/ae719b69fbe6895a8c1cedfb97528dd7.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae719b69fbe6895a8c1cedfb97528dd7.png)'
- en: Figure 1\. Schematic illustrating the approach to proximity analysis (let’s
    imagine that here it is about hairdressing salons, for example) (image by author)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图1\. 说明邻近性分析方法的示意图（假设这里讨论的是理发店等） （图片作者提供）
- en: '**A little bit about proximity analysis**'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**关于邻近性分析的简要说明**'
- en: We propose to start the story with a brief literature review. I like the article
    “[Location Analytics Use-Cases that Every Data Scientist Should Know](/location-analytics-use-cases-that-every-data-scientist-should-know-740b708a2504)”
    (attention — it is *Member-only story*) that pretty easily introduces the reader
    to what geographic information analysis is.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议从简要的文献综述开始这个故事。我喜欢文章“[每个数据科学家都应该了解的地点分析用例](/location-analytics-use-cases-that-every-data-scientist-should-know-740b708a2504)”（注意——这是*仅限会员的故事*），它非常容易让读者了解地理信息分析是什么。
- en: 'The articles “[Creating a Cost Distance Surface to Measure Park Access](https://www.azavea.com/blog/2014/09/04/creating-a-cost-distance-surface-to-measure-park-access/)”
    and “[The growing state of Utah: a proximity analysis of Utah residents to medical
    care facilities](https://blog.lib.utah.edu/the-growing-state-of-utah-a-proximity-analysis-of-utah-residents-to-medical-care-facilities/)”
    also show quite clearly what characteristics in cities engineers can calculate
    to perform such analyses. The topic is quite popular and a lot of both scientific
    papers and practical applications have been developed — let’s join in.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文章“[创建公园可达性成本距离表面](https://www.azavea.com/blog/2014/09/04/creating-a-cost-distance-surface-to-measure-park-access/)”和“[犹他州的增长状态：对犹他州居民与医疗设施邻近性分析](https://blog.lib.utah.edu/the-growing-state-of-utah-a-proximity-analysis-of-utah-residents-to-medical-care-facilities/)”也非常清晰地展示了工程师在城市中可以计算的特征，以进行此类分析。这个话题相当受欢迎，已经开发了大量的科学论文和实际应用——让我们也来参与吧。
- en: '**Library (that we use)**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**我们使用的库**'
- en: 'Now let’s go to a more concrete conversation: the tools that can be used for
    this proximity analysis (in addition to geographic information systems like QGIS
    or ArcGIS and proprietary services as the end user of the product).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转到一个更具体的讨论：用于这种邻近性分析的工具（除了地理信息系统如QGIS或ArcGIS和作为最终用户的专有服务之外）。
- en: 'We, as developers, would like to analyze not aggregated data but raw values
    with the help of convenient libraries or services (preferably open-source, of
    course). We have not found any suitable tools for us, so we develop and use our
    own open-source library written in Python. It is called **estaty** and if you
    want, you can see the documentation page after reading the article:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们希望利用方便的库或服务（当然最好是开源的）分析原始数据而非汇总数据。我们没有找到适合我们的工具，因此开发并使用了我们自己的用Python编写的开源库。它叫做**estaty**，如果你愿意，可以在阅读本文后查看文档页面：
- en: '[**https://estaty.readthedocs.io/en/latest/?badge=latest**](https://estaty.readthedocs.io/en/latest/?badge=latest)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**https://estaty.readthedocs.io/en/latest/?badge=latest**](https://estaty.readthedocs.io/en/latest/?badge=latest)'
- en: Based on this library, we compose use cases. Based on these examples, we developed
    microservices that help real estate managers perform analysis. In addition to
    the ready-made services, however, these scripts are organized as use cases and
    are available to anyone who wants to use the library.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个库，我们编写了使用案例。基于这些示例，我们开发了帮助房地产经理进行分析的微服务。除了现成的服务，这些脚本还组织成使用案例，任何想要使用该库的人都可以使用它们。
- en: '**estaty** can use different data sources to perform the calculations, but
    the open examples (to keep them truly open) are based on OpenStreetMap data. In
    the current paper, we want to show how we can do a fairly quick collateral estimation
    and still scale the approach to new data sources if needed.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**estaty** 可以使用不同的数据源进行计算，但开放的示例（为了保持其真正开放）是基于 OpenStreetMap 数据的。在当前论文中，我们想展示如何进行相当快速的附带估算，并在需要时将该方法扩展到新的数据源。'
- en: '**Analysis (which we can do)**'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**分析（我们可以做的）**'
- en: First, install the library using the command
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用命令安装库
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'or, if you’re using poetry:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用 poetry：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are now ready to use version 0.1.0
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备使用版本 0.1.0
- en: 'Let’s start the implementation. We are going to provide a proximity analysis
    for the following address: “Berlin, Neustädtische Kirchstraße 4–7” — coordinates
    {latitude: 52.5171411, longitude: 13.3857187}. We will analyze the neighborhood
    of this object within a radius of 2 km.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们开始实现。我们将对以下地址进行邻近分析：“Berlin, Neustädtische Kirchstraße 4–7” — 坐标 {latitude:
    52.5171411, longitude: 13.3857187}。我们将在半径 2 公里的范围内分析该对象的邻近区域。'
- en: 'In order to find out how long it will take us to get to the nearest bar (according
    to OSM — it is worth mentioning here), let’s write and run the [following code](https://github.com/wiredhut/estaty_examples/blob/main/release_01/proximity_tds/path_to_parks.py):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出我们到达最近酒吧需要多长时间（根据 OSM — 值得一提），我们来编写并运行[以下代码](https://github.com/wiredhut/estaty_examples/blob/main/release_01/proximity_tds/path_to_parks.py)：
- en: 'Here the following occurs — we construct a processing pipeline for analyzing
    a property. The pipeline will look like a graph consisting of sequential transformations
    over the data:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了以下情况——我们构建了一个用于分析属性的处理管道。这个管道将呈现为一个由数据上的连续变换组成的图形：
- en: '![](../Images/987db08a3aef0f05cfd11c82cf9d54da.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/987db08a3aef0f05cfd11c82cf9d54da.png)'
- en: Figure 2\. Spatial data processing pipeline for calculating distances of routes
    to bars using OpenStreetMap data (image by author)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2\. 使用 OpenStreetMap 数据计算路线到酒吧的距离的空间数据处理管道（图片由作者提供）
- en: 'Let’s take a closer look at what’s going “under the hood”. Let’s start with
    the fact that the estaty architecture is built on 5 abstract layers (in the case
    of the Pipeline above, only three types of nodes are used):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看“引擎盖下”的内容。我们从 estaty 架构的 5 个抽象层开始（在上面的管道中，仅使用了三种类型的节点）：
- en: '**DataSource** — loads data from the required source, brings the data to a
    common standard (vector and raster). No matter what the source was, the output
    from this node will be only in two possible variations, which allows to unify
    their further processing;'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据源** — 从所需源加载数据，将数据标准化（矢量和栅格）。无论源是什么，这个节点的输出将只有两种可能的变体，从而使其进一步处理得以统一；'
- en: '**Preprocessor** — preprocessing of vector or raster data, e.g. assigning a
    new coordinate reference system (CRS);'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预处理器** — 对矢量或栅格数据进行预处理，例如分配新的坐标参考系统（CRS）；'
- en: '**Merger** — combining data in the required way. Possible combinations: vector
    data with vector data, raster with raster and vector data with raster data;'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并** — 以所需方式组合数据。可能的组合方式：矢量数据与矢量数据，栅格数据与栅格数据，矢量数据与栅格数据；'
- en: '**Analyzer** — core of the library — uses simple atomic transformations over
    rasters and vector objects to perform some analysis, such as area matching or
    pathfinding;'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析器** — 库的核心 — 使用对栅格和矢量对象的简单原子变换来执行某些分析，例如面积匹配或路径查找；'
- en: '**Report** — optional final analysis module, which allows generating a report
    in a user-friendly format.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**报告** — 可选的最终分析模块，允许以用户友好的格式生成报告。'
- en: By combining these nodes in a certain way it is possible to compose different
    pipelines for data analysis without modifying the ways of processing the original
    data — by substituting solely the original sources or ways of analysis (see Animation
    1).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以特定方式组合这些节点，可以在不修改原始数据处理方式的情况下，为数据分析构建不同的管道——仅通过替换原始数据源或分析方式（参见动画 1）。
- en: '![](../Images/eceb41cd22d0a33ea3e80629adbcacdb.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eceb41cd22d0a33ea3e80629adbcacdb.png)'
- en: Animation 1\. Flexibility of the library when preparing a pipeline for analysis
    (animation by author)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 动画 1\. 库在准备分析管道时的灵活性（动画由作者提供）
- en: 'So, Figure 2 shows that only three nodes are used in the analysis — this is
    a fairly simple pipeline. As a result of its work we will get a geopandas GeoDataFrame
    (a table with geometries of objects) with linear objects — routes to the objects
    of our interest. In this case — to the bars. Visualization of the result, by the
    way, will look as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，图 2 显示在分析中仅使用了三个节点——这是一个相当简单的管道。其工作结果将得到一个 geopandas GeoDataFrame（一个包含对象几何的表格），其中包含线性对象——到我们感兴趣的对象的路线。在这种情况下——到酒吧。结果的可视化将如下所示：
- en: '![](../Images/a9c310bbd45eb46e2fe034aaa0436a79.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a9c310bbd45eb46e2fe034aaa0436a79.png)'
- en: Figure 3\. Routes to bars with distances calculated by the algorithm (image
    by author)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3\. 路线到酒吧的距离计算（作者提供的图像）
- en: 'We have the rights to do what we want with the obtained set of linear objects
    — for example, to find the distance to the nearest bar, or to request the average
    value from the sample (which is done in the code):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有权对获得的线性对象集进行任何操作——例如，找到到最近酒吧的距离，或从样本中请求平均值（在代码中完成）：
- en: 'Min length: 308.93, m'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小长度：308.93 米
- en: 'Average length: 2306.49, m'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均长度：2306.49 米
- en: As a true expert in the location of bars in the centers of large cities, I can
    say that the bars in the area of analysis, in reality, can be much more. But we
    agreed at the beginning that we would analyze based on OSM data, so….
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为大城市酒吧位置的真正专家，我可以说，在分析区域内，酒吧实际上可能更多。但我们在一开始就同意基于 OSM 数据进行分析，所以……
- en: The Pipeline itself is independent of the source of data on which the analysis
    is performed. This is ensured by the weak interconnectedness of the library modules.
    Let’s start with the DataSource node — it has a built-in mechanism of data conversion
    to one type (for example, vector data here will be in the format geopandas GeoDataFrame
    and will always be only three types, no matter what source we used for this, all
    of them will be converted to points, lines, or polygons). This is followed by
    a pre-processor that will automatically determine the appropriate metric projection
    for our data. The only thing that matters to the pre-processor is that the data
    must come from the node’s DataSource, the rest should be taken care of by the
    node before it. And our simple pipeline is completed by an analysis block, which
    will operate on any geometric objects, no matter if they are area, linear or point.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 管道本身与进行分析的数据源无关。这是通过库模块之间的弱关联性来确保的。让我们从 DataSource 节点开始——它具有将数据转换为一种类型的内置机制（例如，这里的矢量数据将以
    geopandas GeoDataFrame 格式存在，并且无论我们使用了什么数据源，所有数据都将转换为点、线或多边形）。接下来是一个预处理器，它将自动确定适合我们数据的度量投影。预处理器唯一关心的是数据必须来自节点的
    DataSource，其余的应由之前的节点处理。我们的简单管道由一个分析块完成，它可以操作任何几何对象，无论是区域、线性还是点。
- en: 'Thus, we can do exactly the same calculations for other categories of data
    that we will extract from OSM (of course, the list is not limited only to OSM),
    for example, proximity analysis for schools, parks, water objects, public toilets,
    waste disposal bins, police stations and so on — anything (for the types of objects
    that can be defined by tags, see the wiki page [Map features](https://wiki.openstreetmap.org/wiki/Map_features)
    or in the [documentation estaty about data sources](https://estaty.readthedocs.io/en/latest/documentation/data_source/)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以对从 OSM 提取的其他类别的数据进行完全相同的计算（当然，这个列表不仅限于 OSM），例如，对学校、公园、水体、公共厕所、垃圾桶、警察局等进行邻近分析——任何（对于可以通过标签定义的对象类型，请参见
    [地图特征](https://wiki.openstreetmap.org/wiki/Map_features) 或 [关于数据源的文档](https://estaty.readthedocs.io/en/latest/documentation/data_source/)）：
- en: '![](../Images/457410efe02b4595444aac98106f6f9d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/457410efe02b4595444aac98106f6f9d.png)'
- en: Figure 4\. Proximity analysis for schools, parks, water objects, waste disposal
    bins, police stations (image by author)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4\. 对学校、公园、水体、垃圾桶、警察局的邻近分析（作者提供的图像）
- en: '**How the approach can be scaled up**'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**如何扩展这个方法**'
- en: 'We mentioned that spatial data of any nature can be analyzed: social data,
    natural objects or artificial constructions. Let’s look even deeper into the source
    code. From the figures we can see that distance calculation is performed on routes
    built with regard to roads, which is reasonable, because usually we don’t fly
    to bars by helicopters, but walk. Therefore, the ‘distance’ analysis includes
    the search for routes on the road graph, using the one from OSM. That is, the
    algorithm searches for a route on the following abstractions (we relied on the
    following article, highly recommended — [OSMnx: Python for Street Networks](https://geoffboeing.com/2016/11/osmnx-python-street-networks/)):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '我们提到过，任何性质的空间数据都可以进行分析：社会数据、自然对象或人工建筑。让我们更深入地查看源代码。从图中可以看出，距离计算是在考虑道路的路线中进行的，这是合理的，因为通常我们不是乘坐直升机去酒吧，而是步行。因此，“距离”分析包括在道路图上搜索路线，使用的是来自OSM的图。因此，算法在以下抽象上搜索路线（我们依赖于以下文章，强烈推荐——[OSMnx:
    Python for Street Networks](https://geoffboeing.com/2016/11/osmnx-python-street-networks/)）：'
- en: '![](../Images/d87c87e46592715c3e95c1c8a5c2eed3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d87c87e46592715c3e95c1c8a5c2eed3.png)'
- en: Figure 5\. Graph of walking roads, which is used to search for optimal routes
    (image by author)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图5\. 步行道路图，用于搜索最佳路线（图片作者提供）
- en: 'A graph here is a geographically referenced (have latitude and longitude attributes)
    nodes and edges. To find the shortest route from object A to object B, we need
    to take three steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图是地理参考的（具有纬度和经度属性）节点和边。为了找到从对象A到对象B的最短路径，我们需要执行三个步骤：
- en: Find the nearest node in the graph to object A (let’s call it node 1)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到图中离对象A最近的节点（我们称之为节点1）
- en: Find the nearest node in the graph to object B (let’s call it node 2)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到图中离对象B最近的节点（我们称之为节点2）
- en: Using the graph traversal algorithm, find the optimal route from node 1 to node
    2
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图遍历算法，找到从节点1到节点2的最佳路线
- en: If we want to obtain the distance, there is a need to sum up the length of the
    route from node 1 to node 2 with the distances from object A to node 1 and from
    object B to node 2\. The last two components can be calculated in a straight line
    because the network with nodes is quite dense. But here there is a difficulty
    — if object A and B are points, it is relatively easy to find the nodes nearest
    to them (calculate the distances between points). If the geometry of object A
    is, for example, an area, then we have to look for the “nearest” node to the polygon.
    What to do in the case of a linear object was also a problem to solve
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要获得距离，需要将从节点1到节点2的路径长度与从对象A到节点1以及从对象B到节点2的距离相加。最后两个分量可以通过直线计算，因为节点网络相当密集。但这里有一个难点——如果对象A和B是点，相对容易找到它们最近的节点（计算点之间的距离）。如果对象A的几何形状例如是一个区域，那么我们必须寻找与多边形“最近”的节点。线性对象的情况也是一个需要解决的问题。
- en: 'Then let’s answer the question, “How to calculate distances from graph nodes
    to vector objects of different types: lines, points and polygons in a unified
    way”? For this purpose, the library converts objects to point type (it is very
    easy to find the distance between points) before starting the calculation of routes.
    We call such transformations representations (Figure 6).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们回答这个问题：“如何统一计算图节点到不同类型矢量对象的距离：线、点和多边形”？为此，库在开始路线计算之前将对象转换为点类型（计算点之间的距离非常简单）。我们将这种转换称为表示（见图6）。
- en: '![](../Images/c606a11844f867e1cbaad26b27a6df49.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c606a11844f867e1cbaad26b27a6df49.png)'
- en: Figure 6\. Some ways to represent vector objects (image by author)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图6\. 表示矢量对象的几种方法（图片作者提供）
- en: That is, instead of writing and maintaining three algorithms, we write one (search
    for routes to points) and then reduce all the initial data types to one. How to
    reduce them to one type is an ambiguous question. We could do it simply by calculating
    centroids. However, in the case of calculation in urban areas and especially for
    large objects (like parks), finding routes for centroids may be unnecessary —
    we consider that we have reached the park not when we are in its center, but when
    we take the first step from the asphalted path into the pleasant dirt park darkness.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说， instead of 编写和维护三个算法，我们编写一个（搜索到点的路径），然后将所有初始数据类型简化为一个。如何将它们简化为一个类型是一个模糊的问题。我们可以简单地通过计算质心来做到这一点。然而，在城市地区尤其是对于大型对象（如公园）的计算中，为质心寻找路线可能是不必要的——我们认为，当我们从铺砌的道路进入宜人的泥土公园黑暗中时，我们才真正进入公园，而不是当我们站在公园中心时。
- en: So, we decided to use an approach where we find the closest point of a polygon
    or linear object to the object of analysis (from which the routes are built).
    Then this point is considered as the final destination node — to this node that
    the further route through the graph will be built.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们决定使用一种方法，在这种方法中，我们找到多边形或线性对象到分析对象（从中建立路径）的最近点。然后，这个点被视为最终的目标节点——到这个节点的进一步路径将在图中构建。
- en: '**More advanced analysis**'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**更高级的分析**'
- en: 'You can’t impress anyone with routes to bars alone. So let’s complicate the
    task. Let’s assume that we want to make a more complex analysis by combining data
    from different sources. For example, we want to calculate how much on average
    we have to walk to parks with oak trees (we like to walk after bars and admire
    the park with trees). To do this, we will combine data from two sources:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 仅凭前往酒吧的路径是无法令人印象深刻的。因此，让我们把任务复杂化。假设我们想通过结合来自不同来源的数据来进行更复杂的分析。例如，我们想计算在去橡树公园的平均步行距离（我们喜欢在酒吧之后散步，欣赏公园里的树木）。为此，我们将结合来自两个来源的数据：
- en: Let’s download vector data from GBIF | Global Biodiversity Information Facility
    (check [https://www.gbif.org/](https://www.gbif.org/), relevant for 20 October
    2023)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 GBIF | 全球生物多样性信息设施下载矢量数据（查看 [https://www.gbif.org/](https://www.gbif.org/)，截至2023年10月20日）
- en: OpenStreetMap — native integration of data downloading in the library
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStreetMap — 库中的数据下载本地集成
- en: 'GBIF data is a vector layer with point geometries that show the locations where
    certain species of plants and animals (and something else) have been found. In
    this case we will be interested in the Oak (or Quercus robur in Latin). This is
    what our data will look like when we overlay a point layer with oaks on top of
    the parks polygons:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: GBIF 数据是一个点几何的矢量层，显示了发现某些植物和动物（以及其他东西）的位置。在这种情况下，我们将关注橡树（或拉丁文中的 Quercus robur）。当我们将橡树的点层叠加到公园多边形上时，我们的数据将如下所示：
- en: '![](../Images/c9b0324952621ab326e045f72c9bfe48.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9b0324952621ab326e045f72c9bfe48.png)'
- en: Figure 7\. Combining OSM park data and GBIF data to calculate routes to oak
    woodland parks (image by author)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图7\. 结合 OSM 公园数据和 GBIF 数据计算前往橡树林公园的路径（图像由作者提供）
- en: 'The code to analyze looks [like this](https://github.com/wiredhut/estaty_examples/blob/main/release_01/proximity_tds/path_to_parks_with_quercus.py):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 用于分析的代码 [长这样](https://github.com/wiredhut/estaty_examples/blob/main/release_01/proximity_tds/path_to_parks_with_quercus.py)：
- en: 'One important thing to note is that the points do not have to fall exactly
    within the park’s polygon. We combine data from different sources and they may
    differ slightly. Therefore, we set a buffer of 10 meters and look at the result
    (Figure 8) — we will consider that there is an oak tree in the park if the park
    polygon has an intersection with the buffer polygon according to GBIF data:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，点不必完全落在公园的多边形内。我们结合来自不同来源的数据，它们可能会略有不同。因此，我们设置了 10 米的缓冲区，并查看结果（图8）——如果公园多边形与缓冲区多边形有交集，则我们将认为公园中有橡树：
- en: '![](../Images/7d12aec560528017faa0882d63f18479.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d12aec560528017faa0882d63f18479.png)'
- en: Figure 8\. Routes to parks where oak trees occur, with calculated distances
    (image by author)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图8\. 前往橡树出现的公园的路径，计算出的距离（图像由作者提供）
- en: '**A bit more about relevance**'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**关于相关性的更多信息**'
- en: The topic of analysis is in demand and obvious. Consequently, for example, functionality
    of routing is available in many source code solutions (while preparing this article
    I came across an interesting notebook “[Exploring routing tools for calculating
    paths for a set of origin-destination pairs](https://github.com/rajesvariparasa/spatial-routing-libraries-and-services/blob/main/Routing_Libraries_Services.ipynb)”),
    as well as in popular user services like Google Maps, and services related to
    maps implicitly. If we talk about proximity analysis, then here too there are
    a lot of implemented solutions. For instance, we can mention such a tool as [pandana](https://udst.github.io/pandana/introduction.html).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 分析主题需求明显。例如，许多源代码解决方案中都提供了路由功能（在准备这篇文章时，我发现了一个有趣的笔记本“[探索用于计算一组起点-终点对路径的路由工具](https://github.com/rajesvariparasa/spatial-routing-libraries-and-services/blob/main/Routing_Libraries_Services.ipynb)”），以及像
    Google Maps 这样的流行用户服务和隐含的地图相关服务。如果谈到邻近分析，这里也有很多实现的解决方案。例如，我们可以提到一个工具，如 [pandana](https://udst.github.io/pandana/introduction.html)。
- en: All these tools are certainly useful, but using them in application examples
    requires writing some auxiliary code. We are trying to make a convenient tool
    for our own team and want to share our findings with the community. In the approach
    presented in this article we can mention data source agnostic approach and a flexible
    way of combining data. We will be glad to receive comments and suggestions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具无疑很有用，但在应用示例中使用它们需要编写一些辅助代码。我们正在尝试为自己的团队制作一个方便的工具，并希望与社区分享我们的发现。在本文介绍的方法中，我们可以提到数据源无关的方法和灵活的数据组合方式。我们欢迎评论和建议。
- en: 'Useful links:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的链接：
- en: '[https://github.com/wiredhut/estaty](https://github.com/wiredhut/estaty) —
    Python open-source library for processing spatial data and preparing prototype
    algorithms for property analysis. The library is quite new, but we plan to develop
    and improve it;'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/wiredhut/estaty](https://github.com/wiredhut/estaty) —
    用于处理空间数据和准备物业分析原型算法的 Python 开源库。该库较新，但我们计划进行开发和改进；'
- en: '[https://estaty.readthedocs.io/en/latest/](https://estaty.readthedocs.io/en/latest/)
    — documentation page;'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://estaty.readthedocs.io/en/latest/](https://estaty.readthedocs.io/en/latest/)
    — 文档页面；'
- en: '[https://github.com/wiredhut/estaty_examples](https://github.com/wiredhut/estaty_examples)
    — open-source repository with example launches for this article'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/wiredhut/estaty_examples](https://github.com/wiredhut/estaty_examples)
    — 本文示例启动的开源存储库'
- en: 'Datasets used in this post (& licenses):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本文使用的数据集（及许可证）：
- en: Map data copyrighted OpenStreetMap contributors and available from [https://www.openstreetmap.org](https://www.openstreetmap.org)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地图数据版权归 OpenStreetMap 贡献者所有，可从 [https://www.openstreetmap.org](https://www.openstreetmap.org)
    获取
- en: License — [Open Data Commons Open Database License](https://opendatacommons.org/licenses/odbl/)
    Links are up to date at 25th of October 2023
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 许可证 — [开放数据公共开放数据库许可证](https://opendatacommons.org/licenses/odbl/) 链接更新至2023年10月25日
- en: GBIF.org (20 October 2023) GBIF Occurrence Download [https://doi.org/10.15468/dl.f487j5](https://doi.org/10.15468/dl.f487j5)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GBIF.org (2023年10月20日) GBIF 发生数据下载 [https://doi.org/10.15468/dl.f487j5](https://doi.org/10.15468/dl.f487j5)
- en: License — [Attribution-NonCommercial 4.0 International](https://creativecommons.org/licenses/by-nc/4.0/legalcode)
    Links are up to date at 25th of October 2023
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 许可证 — [署名-非商业性使用 4.0 国际](https://creativecommons.org/licenses/by-nc/4.0/legalcode)
    链接更新至2023年10月25日
- en: The story about proximity analysis using OpenStreetMap data and more, was presented
    by [Mikhail Sarafanov](https://github.com/Dreamlone) and the [Wiredhut team](https://wiredhut.com/)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenStreetMap 数据及更多内容的邻近分析故事由 [Mikhail Sarafanov](https://github.com/Dreamlone)
    和 [Wiredhut 团队](https://wiredhut.com/) 提供
