- en: 'System Design Series: The Ultimate Guide for Building High-Performance Data
    Streaming Systems from Scratch!'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统设计系列：从零开始构建高性能数据流系统的终极指南！
- en: 原文：[https://towardsdatascience.com/system-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa?source=collection_archive---------0-----------------------#2023-12-17](https://towardsdatascience.com/system-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa?source=collection_archive---------0-----------------------#2023-12-17)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/system-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa?source=collection_archive---------0-----------------------#2023-12-17](https://towardsdatascience.com/system-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa?source=collection_archive---------0-----------------------#2023-12-17)
- en: '[](https://medium.com/@sanilkhurana7?source=post_page-----3dd584bd28fa--------------------------------)[![Sanil
    Khurana](../Images/b6aea8dd0366a0659fcf3828fc745aea.png)](https://medium.com/@sanilkhurana7?source=post_page-----3dd584bd28fa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3dd584bd28fa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3dd584bd28fa--------------------------------)
    [Sanil Khurana](https://medium.com/@sanilkhurana7?source=post_page-----3dd584bd28fa--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@sanilkhurana7?source=post_page-----3dd584bd28fa--------------------------------)[![Sanil
    Khurana](../Images/b6aea8dd0366a0659fcf3828fc745aea.png)](https://medium.com/@sanilkhurana7?source=post_page-----3dd584bd28fa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3dd584bd28fa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3dd584bd28fa--------------------------------)
    [Sanil Khurana](https://medium.com/@sanilkhurana7?source=post_page-----3dd584bd28fa--------------------------------)'
- en: ·
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2bda56b80bb9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa&user=Sanil+Khurana&userId=2bda56b80bb9&source=post_page-2bda56b80bb9----3dd584bd28fa---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3dd584bd28fa--------------------------------)
    ·12 min read·Dec 17, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3dd584bd28fa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa&user=Sanil+Khurana&userId=2bda56b80bb9&source=-----3dd584bd28fa---------------------clap_footer-----------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F2bda56b80bb9&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa&user=Sanil+Khurana&userId=2bda56b80bb9&source=post_page-2bda56b80bb9----3dd584bd28fa---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3dd584bd28fa--------------------------------)
    ·12分钟阅读·2023年12月17日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3dd584bd28fa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa&user=Sanil+Khurana&userId=2bda56b80bb9&source=-----3dd584bd28fa---------------------clap_footer-----------)'
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3dd584bd28fa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa&source=-----3dd584bd28fa---------------------bookmark_footer-----------)![](../Images/e7927bd4b8459b08130d6ca30e85f9e6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3dd584bd28fa&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsystem-design-series-0-to-100-guide-to-data-streaming-systems-3dd584bd28fa&source=-----3dd584bd28fa---------------------bookmark_footer-----------)![](../Images/e7927bd4b8459b08130d6ca30e85f9e6.png)'
- en: 'Source: [Unsplash](https://unsplash.com/photos/a-black-and-white-photo-of-a-bunch-of-cubes-gC_aoAjQl2Q)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[Unsplash](https://unsplash.com/photos/a-black-and-white-photo-of-a-bunch-of-cubes-gC_aoAjQl2Q)
- en: 'Setting up an example problem: A Recommendationxt System'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设定一个示例问题：推荐系统
- en: “Data Streaming” sounds incredibly complex and “Data Streaming Pipelines” even
    more so. Before we talk about what that means and burden ourselves with jargon,
    let’s start with the reason for the existence of any software system, a problem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “数据流”听起来非常复杂，而“数据流管道”则更为复杂。在我们讨论这意味着什么并陷入术语之前，让我们从任何软件系统存在的原因——一个问题——开始。
- en: Our problem is pretty simple, we have to build a recommendation system for an
    e-commerce website (something like Amazon) i.e. a service that returns a set of
    products for a particular user based on the preferences of that user. We don’t
    need to tire ourselves with how it works just yet (more on that later), for now,
    we will focus on how data is sent to this service, and how it returns data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的问题非常简单，我们需要为一个电子商务网站（类似于亚马逊）建立一个推荐系统，即一个根据用户偏好返回一组产品的服务。我们暂时不需要为它如何工作而感到疲惫（稍后会详细讨论），现在我们将专注于数据如何发送到这个服务中，以及它如何返回数据。
- en: Data is sent to the service in the form of “events”. Each of these events is
    a particular action performed by the user. For example, a click on a particular
    product, or a search query. In simple words, all user interactions on our website,
    from a simple scroll to an expensive purchase, is considered an “event”.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据以“事件”的形式发送到服务中。这些事件都是用户执行的特定操作。例如，点击特定产品或搜索查询。简单来说，我们网站上所有的用户互动，从简单的滚动到昂贵的购买，都被视为一个“事件”。
- en: '![](../Images/5e5717366e9bb3abc284aac833daac58.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e5717366e9bb3abc284aac833daac58.png)'
- en: Image by Author
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: These events essentially tell us about the user. For example, a user interested
    in buying a gaming PC might also be interested in a gaming keyboard or mouse.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件本质上告诉我们有关用户的信息。例如，一个有意购买游戏PC的用户可能也会对游戏键盘或鼠标感兴趣。
- en: Every once in a while, our service gets a request to fetch recommendations for
    a user, its job is simple, respond with a list of products the user is interested
    in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务不时会收到获取用户推荐的请求，它的工作很简单，响应用户感兴趣的产品列表。
- en: '![](../Images/b76708acb83e39afbf956f9dd806d9ce.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b76708acb83e39afbf956f9dd806d9ce.png)'
- en: Image by Author
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: For now, we don’t care how this recommendations list is populated, assume that
    this “Recommendation Service” does some magical steps (more on this magic later
    at the end of the post, for now, we don’t care much about the logic of these steps)
    and figures out what our users prefer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们不关心这些推荐列表是如何生成的，假设这个“推荐服务”执行了一些神奇的步骤（关于这些魔法的更多内容将在文章末尾讨论，现在我们不太关心这些步骤的逻辑），并找出用户的偏好。
- en: Recommendations are usually an afterthought in many systems, but it's much more
    critical than you may think. Almost every application you use relies heavily on
    recommendation services like these to drive user actions. For example, according
    to [this paper](https://library.ucsd.edu/dc/object/bb8503744c/_2_1.pdf), 35% of
    Amazon web sales were generated through their recommended items.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐在许多系统中通常是事后的考虑，但它比你想象的要重要得多。几乎你使用的每个应用程序都依赖于像这样的推荐服务来驱动用户行为。例如，根据[这篇论文](https://library.ucsd.edu/dc/object/bb8503744c/_2_1.pdf)，35%的亚马逊网络销售是通过推荐商品生成的。
- en: The problem however lies in the sheer scale of data. Even if we run just a moderately
    popular website, we could still be getting hundreds of thousands of events per
    second (maybe even millions) at peak time! And if there is a new product or a
    huge sale, then it might go much higher.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，问题在于数据的巨大规模。即使我们运行的是一个中等流行的网站，在高峰时段，我们仍可能每秒接收到数十万（甚至可能是百万）个事件！如果有新产品或大型促销活动，那么这个数量可能会更高。
- en: And our problems don’t end there. We have to process this data (perform the
    magic we talked about before) in real-time and provide recommendations to users
    in real time! If there is a sale, even a few minutes of delay in updating recommendations
    could cause significant financial losses to a business.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们面临的问题不仅仅如此。我们必须实时处理这些数据（执行之前讨论的魔法），并实时向用户提供推荐！如果有促销活动，即使是几分钟的推荐更新延迟也可能对业务造成重大财务损失。
- en: What is a Data Streaming Pipeline?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是数据流处理管道？
- en: A Data Streaming Pipeline is just what I described above. It is a system that
    ingests continuous data (like events), performs multiple processing steps, and
    stores the results for future use.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流处理管道就是我上面描述的那样。它是一个接收连续数据（如事件）、执行多个处理步骤并存储结果以备未来使用的系统。
- en: In our case, the events will come from multiple services, our processing steps
    will involve a few “magical” steps to compute recommendations about the user,
    and then we will update the recommendations for each user in a data store. When
    we get a query for recommendations for a particular user, we simply fetch the
    recommendations we stored earlier and return them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，事件将来自多个服务，我们的处理步骤将涉及几个“神奇”的步骤来计算用户的推荐，然后我们将在数据存储中更新每个用户的推荐。当我们收到对特定用户推荐的查询时，我们只需获取之前存储的推荐并返回它们。
- en: The purpose of this post is to understand how to handle this scale of data,
    how to ingest it, process it, and output it for use later, rather than to understand
    the actual logic of the processing steps (but we will still dive a little into
    it for fun).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的目的是了解如何处理这种规模的数据，如何摄取、处理和输出这些数据以供以后使用，而不是了解处理步骤的实际逻辑（但我们仍会稍微探讨一下，增加一些趣味）。
- en: 'Creating a Data Streaming Pipeline: Step-by-step'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据流管道：逐步指南
- en: There is a lot to talk about, ingestion, processing, output, and querying, so
    let’s approach it one step at a time. Think of each step as a smaller, isolated
    problem. At each step, we will start with the most intuitive solution, see why
    it doesn’t work, and build a solution that does work.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及到许多方面，如数据摄取、处理、输出和查询，因此我们一步一步来。把每一步看作是一个较小的、孤立的问题。在每一步，我们将从最直观的解决方案开始，看看它为什么不起作用，然后构建一个有效的解决方案。
- en: Data Ingestion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据摄取
- en: Let’s start at the beginning of the pipeline, data ingestion. The data ingestion
    problem is pretty easy to understand, the goal is just to ingest events from multiple
    sources.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从管道的起点开始，数据摄取。数据摄取问题相对容易理解，目标只是从多个来源摄取事件。
- en: '![](../Images/5e5717366e9bb3abc284aac833daac58.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e5717366e9bb3abc284aac833daac58.png)'
- en: Image by Author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: But while the problem seems simple at first, it comes with its fair share of
    nuances,
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但虽然问题看起来简单，它也有其复杂的方面，
- en: The scale of data is extremely high, easily going into hundreds of thousands
    of events per second.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据的规模非常大，轻松达到每秒数十万事件。
- en: All these events have to be ingested in real-time, we cannot have a delay of
    even a few seconds.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有这些事件必须实时摄取，我们不能有哪怕几秒钟的延迟。
- en: Let’s start simple, the most intuitive way to achieve this is to send each event
    as a request to the recommendation system, but this solution has a lot of problems,
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从简单的开始，实现这一目标的最直观方法是将每个事件作为请求发送到推荐系统，但这个解决方案存在许多问题。
- en: Services sending events shouldn’t need to wait for a response from our recommendation
    service. That will increase latency on the services and block them till the recommendation
    service sends them a 200\. They should instead send fire-and-forget requests.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送事件的服务不应等待我们的推荐服务的响应。这会增加服务的延迟，并在推荐服务发送200状态码之前阻塞它们。它们应该改为发送“火并忘”的请求。
- en: The number of events would be highly volatile, going up and down throughout
    the day (for example, going up in the evenings or during sales), we would have
    to scale our recommendation service based on the scale of events. This is something
    we will have to manage and calculate.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件的数量会高度波动，一整天都会上下波动（例如，晚上或促销期间会增加），我们需要根据事件的规模来扩展我们的推荐服务。这是我们需要管理和计算的内容。
- en: If our recommendation service crashes, then we will lose events while it is
    down. In this architecture, our recommendation service is a single point of failure.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们的推荐服务崩溃，我们将会在其停机期间丢失事件。在这种架构中，我们的推荐服务是一个单点故障。
- en: Let’s fix this by using a message broker or an “event streaming platform” like
    Apache Kafka. If you don’t know what that is, it's simply a tool that you set
    up that can ingest messages from “publishers” to certain topics. “Subscribers”
    listen or subscribe to a topic and whenever a message is published on the topic,
    the subscriber receives the message. We will talk more about Kafka topics in the
    next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用消息代理或像Apache Kafka这样的“事件流平台”来解决这个问题。如果你不知道这是什么，它简单来说就是一个工具，可以从“发布者”那里接收消息并发布到特定主题上。“订阅者”监听或订阅这些主题，每当在主题上发布消息时，订阅者就会收到消息。我们将在下一节中进一步讨论Kafka主题。
- en: What you need to know about Kafka is that it facilitates a decoupled architecture
    between producers and consumers. Producers can publish a message on a Kafka topic
    and they don’t need to care when, how, or if the consumer consumes the message.
    The consumer can consume the message on its own time and process it. Kafka would
    also facilitate a very high scale since it can scale horizontally, and linearly,
    providing almost infinite scaling capability (as long as we keep adding more machines)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要了解关于 Kafka 的一点是，它促进了生产者和消费者之间的解耦架构。生产者可以在 Kafka 主题上发布消息，而不需要关心消费者何时、如何或是否消费消息。消费者可以在自己的时间消费消息并处理它。Kafka
    也能够实现非常高的扩展，因为它可以水平扩展，并且线性扩展，提供几乎无限的扩展能力（只要我们继续增加更多机器）。
- en: '![](../Images/643bb100e4e30b9b67ef6f5980b3b891.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/643bb100e4e30b9b67ef6f5980b3b891.png)'
- en: Image by Author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: So each service sends events to Apache Kafka. The recommendation service fetches
    these events from Kafka. Let’s see how this helps us -
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以每个服务将事件发送到 Apache Kafka。推荐服务从 Kafka 中获取这些事件。让我们看看这对我们有什么帮助 —
- en: Events are processed asynchronously, services no longer need to wait for the
    response from the Recommendation Service.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件是异步处理的，服务不再需要等待推荐服务的响应。
- en: It is easier to scale Kafka, and if the scale of events increases, Kafka will
    simply store more events while we scale up our recommendation service.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展 Kafka 更加容易，如果事件的规模增加，Kafka 将简单地存储更多事件，同时我们也扩展我们的推荐服务。
- en: Even if the recommendation service crashes, we won’t lose any events. Events
    are persisted in Kafka so we never lose any data.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使推荐服务崩溃，我们也不会丢失任何事件。事件被持久化在 Kafka 中，因此我们不会丢失任何数据。
- en: Now we know how to ingest events into our service, let’s move to the next part
    of the architecture, processing events.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何将事件引入我们的服务，让我们转到架构的下一部分——处理事件。
- en: Data Processing
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据处理
- en: Data processing is an integral part of our data pipeline. Once we receive events,
    we need to generate new recommendations for the user. For example, if a user searches
    for “Monitor”, we need to update the recommendations for this user based on this
    search, maybe add that the user is interested in monitors.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理是我们数据管道的一个组成部分。一旦我们接收到事件，我们需要为用户生成新的推荐。例如，如果用户搜索“显示器”，我们需要基于这个搜索更新该用户的推荐，也许会添加用户对显示器感兴趣的信息。
- en: Before we talk more about the architecture, let’s forget all this and talk a
    little about how to generate recommendations. This is also where machine learning
    comes in, it's not very important to understand this to continue with the post,
    but it’s pretty fun so I will try to give a very basic brief description of how
    it works.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步讨论架构之前，让我们忘记这些，稍微谈谈如何生成推荐。这也是机器学习发挥作用的地方，虽然理解这些内容对继续阅读文章并不是非常重要，但它非常有趣，所以我会尝试给出一个非常基础的简要描述。
- en: Let’s try to better understand user interactions and what they mean. When the
    user interacts with our website with a search, a click, or a scroll event, the
    user is telling us something about his/her interests. Our goal is to understand
    these interactions and use them to understand the user.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更好地理解用户互动及其含义。当用户通过搜索、点击或滚动事件与我们的网站互动时，用户是在告诉我们他/她的兴趣。我们的目标是理解这些互动，并利用它们来了解用户。
- en: When you think of a user, you probably think of a person, with a name, age,
    etc. but for our purposes, it's easier to think of every user as a vector, or
    simply a set of numbers. It sounds confusing(how can a user be represented as
    a set of numbers after all), but bear with me, and let’s see how this works.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想到一个用户时，你可能会想到一个有姓名、年龄等个人信息的人。然而，为了我们的目的，将每个用户视为一个向量，或者简单地说是一组数字会更容易理解。听起来可能有些令人困惑（毕竟用户怎么能用一组数字来表示呢），但请耐心看下去，我们来看看这是怎么工作的。
- en: Let’s assume we can represent each user(or his/her interests) as a point in
    a 2D space. Each axis represents a trait of our user. Let’s assume the X-axis
    represents how much he/she likes to travel, and the Y-axis represents how much
    he/she likes photography. Each action by the user influences the position of this
    user in the 2D space.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们可以将每个用户（或他的/她的兴趣）表示为二维空间中的一个点。每个轴表示用户的一个特征。假设 X 轴表示他/她喜欢旅行的程度，Y 轴表示他/她喜欢摄影的程度。用户的每个行为都会影响这个用户在二维空间中的位置。
- en: Let’s say a user starts with the following point in our 2D space —
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个用户在我们的二维空间中从以下点开始 —
- en: '![](../Images/6cbe49336b0c35b5425a0b18e8c84e1a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cbe49336b0c35b5425a0b18e8c84e1a.png)'
- en: Image by Author
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: When the user searches for a “travel bag”, we move the point to the right since
    that hints that the user likes traveling.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户搜索“旅行包”时，我们将点向右移动，因为这表明用户喜欢旅行。
- en: '![](../Images/72fbb66e4c68c539a127b86cb84c8609.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72fbb66e4c68c539a127b86cb84c8609.png)'
- en: Image by Author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: If the user had searched for a camera, we would have moved the user upwards
    in the Y-axis instead.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户搜索了相机，我们将把用户向Y轴方向上移。
- en: We also represent each product as a point in the same 2D space,
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将每个产品表示为相同二维空间中的一个点。
- en: '![](../Images/4f93b753acfc3cf0c28fe85092ec2e18.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4f93b753acfc3cf0c28fe85092ec2e18.png)'
- en: Image by Author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The position of the user in the above diagram indicates that the user loves
    to travel, and also likes photography a little. Each of the products is also placed
    according to how relevant they are to photography and traveling.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上图中用户的位置表明用户喜欢旅行，并且也有一点喜欢摄影。每个产品的位置也是根据它们与摄影和旅行的相关性来放置的。
- en: Since the user and the products are just points in a 2-dimensional space, we
    can compare them and perform mathematical operations on them. For example, from
    the above diagram, we can find the nearest product to the user, in this case,
    the suitcase, and confidently say that it is a good recommendation for the user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户和产品只是二维空间中的点，我们可以对它们进行比较和数学运算。例如，从上面的图表中，我们可以找到离用户最近的产品，在这种情况下是行李箱，并自信地说它是用户的一个好推荐。
- en: The above is a very basic introduction to recommendation systems (more on them
    at the end of the post). These vectors (usually much larger than 2 dimensions)
    are called embeddings (user embeddings that represent our users, and product embeddings
    that represent products on our website). We can generate them using different
    types of machine-learning models and there is a lot more to them than what I described
    but the basic principle remains the same.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上面是推荐系统的一个非常基础的介绍（更多内容请参见文章末尾）。这些向量（通常比2维大得多）被称为嵌入（用户嵌入表示我们的用户，产品嵌入表示我们网站上的产品）。我们可以使用不同类型的机器学习模型生成它们，虽然它们比我描述的要复杂得多，但基本原理是一样的。
- en: Let’s come back to our problem. For every event, we need to update the user
    embeddings (move the user on our n-dimensional chart), and return related products
    as recommendations.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的问题。对于每个事件，我们需要更新用户的嵌入（在我们的n维图表上移动用户），并返回相关的产品作为推荐。
- en: Let’s think of a few basic steps for each event that we need to perform to generate
    these embeddings,
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下生成这些嵌入所需的几个基本步骤，
- en: '`update-embeddings`: Update the user’s embeddings'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`update-embeddings`：更新用户的嵌入'
- en: '`gen-recommendations`: Fetch products related to (or near) the user embeddings'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`gen-recommendations`：获取与用户嵌入相关（或接近）的产品'
- en: '`save`: Save the generated recommendations and events'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`save`：保存生成的推荐和事件'
- en: We can build a Python service for each type of event.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每种类型的事件构建一个Python服务。
- en: '![](../Images/9d7febd5828a12f78c83280e20828572.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d7febd5828a12f78c83280e20828572.png)'
- en: Image by Author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Each of these microservices would listen to a Kafka topic, process the event,
    and send it to the next topic, where a different service would be listening.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每个微服务会监听一个Kafka主题，处理事件，然后将其发送到下一个主题，在那里一个不同的服务会监听。
- en: '![](../Images/a313815b49996547bcd9cb7ad44d3da4.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a313815b49996547bcd9cb7ad44d3da4.png)'
- en: Image by Author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Since we are again using Kafka instead of sending requests, this architecture
    gives us all the advantages we discussed before as well. No single Python microservice
    is a single point of failure and it's much easier to handle scale. The last service
    `save-worker` has to save the recommendations for future use. Let’s see how that
    works.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们再次使用Kafka而不是发送请求，这种架构也给我们带来了之前讨论的所有优势。没有单一的Python微服务是单点故障，处理规模也更容易。最后一个服务`save-worker`需要保存推荐以供将来使用。让我们看看它是如何工作的。
- en: Data Sinks
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据接收端
- en: Once we have processed an event, and generated recommendations for it, we need
    to store the event and recommendation data. Before we decide where to store events
    and recommendation data, let’s consider the requirements for the data store
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们处理了一个事件，并生成了推荐，我们需要存储事件和推荐数据。在决定将事件和推荐数据存储在哪里之前，让我们考虑数据存储的要求。
- en: Scalability and high write throughput— Remember we have a lot of incoming events,
    and each event also updates user recommendations. This means our data store should
    be able to handle a very high number of writes. Our database should be highly
    scalable and should be able to scale linearly.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可扩展性和高写入吞吐量 — 记住我们有大量的事件到达，每个事件还会更新用户推荐。这意味着我们的数据存储应该能够处理非常高数量的写入。我们的数据库应该具有高度的可扩展性，并且能够线性扩展。
- en: Simple queries — We are not going to perform complex JOINs, or do different
    types of queries. Our query needs are relatively simple, given a user, return
    the list of precomputed recommendations
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单查询 — 我们不会执行复杂的JOIN操作，也不会进行各种类型的查询。我们的查询需求相对简单，对于给定的用户，返回预计算的推荐列表。
- en: No ACID Requirements — Our database doesn’t need to have strong ACID compliance.
    It doesn’t need any guarantees for consistency, atomicity, isolation, and durability.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无 ACID 要求 — 我们的数据库不需要强 ACID 合规性。它不需要对一致性、原子性、隔离性和持久性提供任何保证。
- en: In simple terms, we are concerned with a database that can handle an immense
    amount of scale, with no extra bells and whistles.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，我们关注的是一个可以处理极大规模的数据库，没有额外的花里胡哨。
- en: Cassandra is a perfect choice for these requirements. It scales linearly due
    to its decentralized architecture and can scale to accommodate very high write
    throughput which is exactly what we need.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Cassandra 是满足这些要求的完美选择。由于其去中心化的架构，它可以线性扩展，并且能够处理非常高的写入吞吐量，这正是我们需要的。
- en: We can use two tables, one for storing recommendations for every user, and the
    other for storing events. The last Python microservice `save` worker would save
    the event and recommendation data in Cassandra.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用两个表，一个用于存储每个用户的推荐，另一个用于存储事件。最后的 Python 微服务 `save` 工作人员将把事件和推荐数据保存在 Cassandra
    中。
- en: '![](../Images/b8eaacce1ca4495011cb442a894cc3da.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8eaacce1ca4495011cb442a894cc3da.png)'
- en: Image by Author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: Querying
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询
- en: Querying is pretty simple. We have already computed and persisted recommendations
    for each user. To query these recommendations, we simply need to query our database
    and fetch recommendations for the particular user.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 查询非常简单。我们已经为每个用户计算并持久化了推荐。要查询这些推荐，我们只需查询我们的数据库并获取特定用户的推荐。
- en: '![](../Images/7acbfd7170e8adc3ccc4dd31f77e5189.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7acbfd7170e8adc3ccc4dd31f77e5189.png)'
- en: Image by Author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: Full Architecture
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整架构
- en: And, that’s it! We are done with the entire architecture, let’s draw out the
    complete architecture and see what it looks like.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们完成了整个架构，让我们画出完整的架构，看看它是什么样子的。
- en: '![](../Images/0404a3c0477c5180409b286a871d7d1c.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0404a3c0477c5180409b286a871d7d1c.png)'
- en: Image by Author
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: For more learning
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步学习
- en: Kafka
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kafka
- en: Kafka is an amazing tool developed by LinkedIn to handle an extreme amount of
    scale ([this](https://engineering.linkedin.com/kafka/running-kafka-scale) blog
    post by LinkedIn in 2015 talked about ~13 million messages per second!).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 是 LinkedIn 开发的一个惊人的工具，用于处理极大的规模（[这篇](https://engineering.linkedin.com/kafka/running-kafka-scale)
    LinkedIn 在2015年的博客文章讨论了每秒约1300万条消息！）。
- en: Kafka is amazing at scaling linearly and handling crazy high scale, but to build
    such systems, engineers need to know and understand Kafka, what is it, how it
    works, and how it fares against other tools.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka 在线性扩展和处理极高规模方面非常出色，但要构建这样的系统，工程师需要了解和理解 Kafka，它是什么，它如何工作，以及与其他工具的对比。
- en: I wrote a blog post in which I explained what Kafka is, how it differs from
    message brokers, and excerpts from the original Kafka paper written by LinkedIn
    engineers. If you liked this post, check out my post on Kafka —
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一篇博客文章，解释了 Kafka 是什么，它与消息代理的不同之处，以及 LinkedIn 工程师撰写的原始 Kafka 论文的摘录。如果你喜欢这篇文章，看看我关于
    Kafka 的文章 —
- en: '[](https://betterprogramming.pub/system-design-series-apache-kafka-from-10-000-feet-9c95af56f18d?source=post_page-----3dd584bd28fa--------------------------------)
    [## System Design Series: Apache Kafka from 10,000 feet'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/system-design-series-apache-kafka-from-10-000-feet-9c95af56f18d?source=post_page-----3dd584bd28fa--------------------------------)
    [## 系统设计系列：从 10,000 英尺看 Apache Kafka'
- en: Let’s look at what Kafka is, how it works and when should we use it!
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们来看看 Kafka 是什么，它是如何工作的以及我们什么时候应该使用它！
- en: betterprogramming.pub](https://betterprogramming.pub/system-design-series-apache-kafka-from-10-000-feet-9c95af56f18d?source=post_page-----3dd584bd28fa--------------------------------)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: betterprogramming.pub](https://betterprogramming.pub/system-design-series-apache-kafka-from-10-000-feet-9c95af56f18d?source=post_page-----3dd584bd28fa--------------------------------)
- en: Cassandra
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cassandra
- en: Cassandra is a unique database meant to handle very high write throughput. The
    reason it can handle such high throughput is due to its high scalability decentralized
    architecture. I wrote a blog post recently discussing Cassandra, how it works,
    and most importantly when to use it and when not to —
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Cassandra 是一种独特的数据库，旨在处理非常高的写入吞吐量。它能够处理如此高吞吐量的原因在于其高度可扩展的去中心化架构。我最近写了一篇博客文章讨论
    Cassandra、它是如何工作的，以及最重要的何时使用它和何时不使用它 —
- en: '[](https://medium.com/geekculture/system-design-solutions-when-to-use-cassandra-and-when-not-to-496ba51ef07a?source=post_page-----3dd584bd28fa--------------------------------)
    [## System Design Solutions: When to use Cassandra and when not to'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 系统设计解决方案：何时使用 Cassandra 以及何时不使用](https://medium.com/geekculture/system-design-solutions-when-to-use-cassandra-and-when-not-to-496ba51ef07a?source=post_page-----3dd584bd28fa--------------------------------)'
- en: Everything you need to know about when to use Cassandra and when not to
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于何时使用 Cassandra 以及何时不使用 Cassandra 的所有信息
- en: medium.com](https://medium.com/geekculture/system-design-solutions-when-to-use-cassandra-and-when-not-to-496ba51ef07a?source=post_page-----3dd584bd28fa--------------------------------)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/geekculture/system-design-solutions-when-to-use-cassandra-and-when-not-to-496ba51ef07a?source=post_page-----3dd584bd28fa--------------------------------)'
- en: Recommendation Systems
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐系统
- en: Recommendation systems are an amazing piece of technology, and they are used
    in almost all applications that you and I use today. In any system, personalization
    and recommendation systems form the crux of the search and discovery flow for
    users.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统是非常出色的技术，它们几乎在你我今天使用的所有应用程序中都得到了应用。在任何系统中，个性化和推荐系统形成了用户搜索和发现流程的核心。
- en: I have been writing quite a bit about search systems, and I have touched up
    a bit on how to build basic personalization in search systems, but my next topic
    will be to dive deeper into the nitty gritty of recommendation engines, how they
    work, and how to architect them. If that sounds interesting to you, follow me
    on Medium for more content! I also post a lot of byte-sized content on LinkedIn
    for regular reading, for example, [this](https://www.linkedin.com/posts/sanil-khurana-a2503513b_database-tech-softwareengineer-activity-7064441910639161344-1mQz?utm_source=share&utm_medium=member_desktop)
    post on Kafka Connect that describes how it works, and why it is so popular with
    just one simple diagram.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在写关于搜索系统的内容，并稍微涉及了一下如何在搜索系统中构建基础的个性化功能，但我的下一个话题将深入探讨推荐引擎的细节，它们是如何工作的，以及如何设计它们。如果这对你感兴趣，请在
    Medium 上关注我以获取更多内容！我也在 LinkedIn 上发布了很多简短的内容，例如，[这篇](https://www.linkedin.com/posts/sanil-khurana-a2503513b_database-tech-softwareengineer-activity-7064441910639161344-1mQz?utm_source=share&utm_medium=member_desktop)关于
    Kafka Connect 的帖子，描述了它的工作原理以及为什么它如此受欢迎，仅用一个简单的图表。
- en: Conclusion
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I love discussing interesting and complex topics like these and breaking them
    down into a 10-minute read. If you enjoyed this post, follow me here on Medium
    for more such content! [Follow me on LinkedIn](https://www.linkedin.com/in/sanil-khurana-a2503513b?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app)
    for smaller, regular guides to elevate your technical and design knowledge every
    day bit by bit.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢讨论有趣且复杂的话题，并将其分解成10分钟的阅读内容。如果你喜欢这篇文章，请在 Medium 上关注我以获取更多类似的内容！ [在 LinkedIn
    上关注我](https://www.linkedin.com/in/sanil-khurana-a2503513b?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app)
    ，每天获取更小、更常规的指南，逐步提升你的技术和设计知识。
- en: Hope you enjoyed this post, if you have any feedback about the post or any thoughts
    on what I should talk about next, you can post it as a comment!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章，如果你对这篇文章有任何反馈或对我接下来应该讨论的内容有任何想法，可以在评论中发表！
