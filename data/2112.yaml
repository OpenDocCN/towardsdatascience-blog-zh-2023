- en: How I Coded My Own Private French Tutor Out of ChatGPT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我如何用 ChatGPT 编写了自己的私人法语 tutor
- en: 原文：[https://towardsdatascience.com/how-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb?source=collection_archive---------1-----------------------#2023-06-30](https://towardsdatascience.com/how-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb?source=collection_archive---------1-----------------------#2023-06-30)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb?source=collection_archive---------1-----------------------#2023-06-30](https://towardsdatascience.com/how-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb?source=collection_archive---------1-----------------------#2023-06-30)
- en: Step-by-step guide to how I used the latest AI services to teach me a new language,
    from architecture to prompt engineering
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐步指南，讲述了我如何利用最新的人工智能服务来学习一门新语言，从架构到提示工程
- en: '[](https://shakedzy.medium.com/?source=post_page-----16b3e15007bb--------------------------------)[![Shaked
    Zychlinski 🎗️](../Images/4d050b916bccab64df3c02236b3129eb.png)](https://shakedzy.medium.com/?source=post_page-----16b3e15007bb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----16b3e15007bb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----16b3e15007bb--------------------------------)
    [Shaked Zychlinski 🎗️](https://shakedzy.medium.com/?source=post_page-----16b3e15007bb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://shakedzy.medium.com/?source=post_page-----16b3e15007bb--------------------------------)[![Shaked
    Zychlinski 🎗️](../Images/4d050b916bccab64df3c02236b3129eb.png)](https://shakedzy.medium.com/?source=post_page-----16b3e15007bb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----16b3e15007bb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----16b3e15007bb--------------------------------)
    [Shaked Zychlinski 🎗️](https://shakedzy.medium.com/?source=post_page-----16b3e15007bb--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F43218078e688&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb&user=Shaked+Zychlinski+%F0%9F%8E%97%EF%B8%8F&userId=43218078e688&source=post_page-43218078e688----16b3e15007bb---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----16b3e15007bb--------------------------------)
    ·10 min read·Jun 30, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F16b3e15007bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb&user=Shaked+Zychlinski+%F0%9F%8E%97%EF%B8%8F&userId=43218078e688&source=-----16b3e15007bb---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F43218078e688&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb&user=Shaked+Zychlinski+%F0%9F%8E%97%EF%B8%8F&userId=43218078e688&source=post_page-43218078e688----16b3e15007bb---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----16b3e15007bb--------------------------------)
    · 10分钟阅读 · 2023年6月30日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F16b3e15007bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb&source=-----16b3e15007bb---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F16b3e15007bb&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-coded-my-own-private-french-tutor-out-of-chatgpt-16b3e15007bb&source=-----16b3e15007bb---------------------bookmark_footer-----------)'
- en: '*Code of the discussed foreign-language tutor can be found in the* `[companion](https://github.com/shakedzy/companion)`
    [*repo on my GitHub page*](https://github.com/shakedzy/companion)*, and you can
    use it freely for any non-commercial use.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*讨论中提到的外语 tutor 的代码可以在* `[companion](https://github.com/shakedzy/companion)`
    [*我的 GitHub 页面上的 repo*](https://github.com/shakedzy/companion)*中找到，您可以在任何非商业用途下自由使用。*'
- en: '![](../Images/77c41f40c1d0441c96b20495c9f79836.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/77c41f40c1d0441c96b20495c9f79836.png)'
- en: Made with Dall-E
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Dall-E 制作
- en: So after postponing it for quite some time, I made a choice to resume my French
    studies. As I signed up for the class, this thought struck me — *what if I could
    program ChatGPT to be my personal French tutor? What if I could* ***speak*** *to
    it, and it would speak back to me?* Being a Data Scientist working with LLMs,
    this seemed like something worth building. I mean, yes, I can just speak to my
    wife, who’s French, but that’s not as cool as designing my own personal tutor
    out of ChatGPT. Love you, honey ❤️.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在推迟了一段时间之后，我决定重新开始我的法语学习。当我报名参加课程时，这个想法突然出现——*如果我能编程让ChatGPT成为我的个人法语导师会怎么样？如果我能*
    ***与它对话*** *，而它会回应我呢？* 作为一名与LLMs合作的数据科学家，这似乎是值得构建的东西。我是说，是的，我可以直接和我的法语妻子对话，但这不如设计一个由ChatGPT构建的个人导师来得酷。爱你，亲爱的❤️。
- en: 'But seriously now, this project is a little more than just “another cool code-toy”.
    Generative AI is headed to every field in our lives, and Large Language Models
    (LLMs) seem to take the lead here. The possibilities of what a single person can
    do these days with access to these models is jaw-dropping, and I decided this
    project is worth my time — and yours, too, I believe — for two main reason:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但说真的，这个项目不仅仅是“另一个酷炫的代码玩具”。生成性AI正向我们生活的每一个领域进军，而大型语言模型（LLMs）似乎在这里占据主导地位。如今，一个人通过访问这些模型所能做的事情令人瞠目结舌，我认为这个项目值得我投入时间——我相信也值得你的时间——主要有两个原因：
- en: Using ChatGPT as the well-known online tool is powerful, but integrating an
    LLM into your code is a whole different thing. LLMs are still somewhat unpredictable,
    and when your product relies on an LLM — or any other GenAI model — for the core
    product, you need to learn how to really control GenAI. And it’s not as easy as
    it sounds.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ChatGPT作为知名的在线工具是很强大的，但将LLM集成到你的代码中是完全不同的事情。LLMs仍然有些不可预测，当你的产品依赖于LLM——或任何其他生成AI模型——作为核心产品时，你需要学会真正控制生成AI。这并不像听起来那么简单。
- en: Getting a first working version took only a few workdays. Before GenAI and LLMs,
    this would take months, and would probably require more than a single person.
    The power of using these tools to create powerful applications fast is something
    you really have to try yourself — that’s the future, as far as I see it. We’re
    not going back.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取第一个工作版本只用了几天工作时间。在生成AI和LLMs出现之前，这需要几个月，并且可能需要不止一个人。利用这些工具快速创建强大应用的力量是你真正需要自己尝试的——这是未来，至少在我看来，我们不会回头。
- en: Plus, this project can actually do good. My mom really wants someone she can
    practice her English with. Now she can, and it costs less than $3 a month. My
    wife’s mom wants to kick off Korean studying. Same thing, same cost. And of course
    I use it too! This project really helps people, and it costs less than a small
    cup of coffee. That’s the real GenAI revolution, if you ask me.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，这个项目实际上可以做一些好事。我妈妈真的希望找一个可以练习英语的对象。现在她可以做到，而且费用不到每月3美元。我的妻子的妈妈想开始学习韩语。情况相同，费用相同。当然，我自己也在使用！这个项目真的帮助了人们，费用比一杯小咖啡还少。如果你问我，这才是真正的生成AI革命。
- en: Starting from Scratch
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始
- en: 'Looking at this project from a high-level perspective, what I needed were 4
    elements:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，我需要的有4个要素：
- en: '**Speech-to-text**, to transcribe my own voice to words'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音转文本**，将我的声音转录为文字'
- en: '**Large-Language Model**, preferably a Chat-LLM, which I can ask questions
    and get responses from'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大型语言模型**，最好是一个聊天型LLM，我可以向它提问并获得回答'
- en: '**Text-to-speech**, to turn the LLM’s answers to voice'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本转语音**，将LLM的回答转换为声音'
- en: '**Translation**, to convert any French text I do not fully understand to English
    (or Hebrew, my native language)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻译**，将我不完全理解的法语文本转换为英语（或希伯来语，我的母语）'
- en: Luckily, it’s 2023, and all of the above are very *very* accessible. I’ve also
    chosen to use managed services and APIs rather than running any of these locally,
    as inference will be much faster this way. Also, the low prices of these APIs
    for personal use made this decision a no-brainer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现在是2023年，以上提到的一切都变得非常*非常*容易获得。我还选择使用托管服务和API，而不是在本地运行这些服务，因为这样推理速度会更快。此外，这些API的个人使用价格非常低，使得这个决定毫无疑问。
- en: After playing around with several alternatives, I’ve chosen OpenAI’s Whisper
    and ChatGPT as my Speech-to-text and LLM, and Google’s Text-to-speech and Translate
    as the remaining modules. Creating API keys and setting these services up was
    super-simple, and I was able to communicate with all of them through their native
    Python libraries in a matter of minutes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 经过尝试几种替代方案后，我选择了 OpenAI 的 Whisper 和 ChatGPT 作为我的语音转文本和大型语言模型，Google 的文本转语音和翻译作为剩余模块。创建
    API 密钥并设置这些服务非常简单，我能够通过它们原生的 Python 库在几分钟内与所有服务进行通信。
- en: What really struck me after testing all these services, is that the tutor I’m
    constructing is not a just an English-to-French teacher; as Whisper, ChatGPT,
    and Google Translate & TTS support dozens of languages, this can be used to learn
    pretty much *any language* while speaking *any other language*. That’s insane!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 经过测试这些服务后，我真正震惊的是我正在构建的导师不仅仅是一个英法翻译老师；由于 Whisper、ChatGPT 和 Google Translate
    & TTS 支持几十种语言，这可以用来学习几乎*任何语言*，同时使用*任何其他语言*进行交流。这真是疯狂！
- en: '![](../Images/8bbea41fc4b9ccef5a4b39f60266e911.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8bbea41fc4b9ccef5a4b39f60266e911.png)'
- en: Made with Dall-E
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Dall-E 制作
- en: Architecture and Threading
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构和线程处理
- en: 'Let’s first make sure the overall flow is well understood: **(1)** We begin
    by recording the user’s voice, which is **(2)** sent to Whisper API, and returns
    as text. **(3)** The text is added to the chat history and sent to ChatGPT, which
    **(4)** returns a written response. Its response is **(5)** sent to Google Text-to-speech,
    which returns a sound file that will be **(6)** played as audio.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保整体流程得到充分理解：**(1)** 我们从录制用户的声音开始，**(2)** 该声音发送到 Whisper API，并返回文本。**(3)**
    文本被添加到聊天记录中，并发送到 ChatGPT，**(4)** ChatGPT 返回书面回复。其回复被**(5)** 发送到 Google Text-to-speech，Google
    返回的音频文件将**(6)** 被播放。
- en: '![](../Images/d796016494a36f4692161e52032412a3.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d796016494a36f4692161e52032412a3.png)'
- en: High-level architecture
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 高级架构
- en: My first practical step was to break this down to components and design the
    overall architecture. I knew I’ll need a UI, preferably a Web UI as it’s just
    easier to launch apps through the browser these days then having a standalone
    executable. I’ll also need a “backend”, which will be the actual Python code,
    communicating with all the different services. But in order to provide a real-time
    flowing experience, I realized I’ll need to break it to different threads.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一个实际步骤是将其拆解为组件并设计整体架构。我知道我需要一个 UI，最好是 Web UI，因为现在通过浏览器启动应用程序比使用独立的可执行文件更简单。我还需要一个“后端”，即实际的
    Python 代码，与所有不同的服务进行通信。但为了提供实时的流畅体验，我意识到我需要将其拆分为不同的线程。
- en: 'The main thread will run the majority of the code: it’ll transcribe my recording
    to text (via Whisper), display this text on the screen as part of the chat, and
    then display the tutor’s written response on the chat screen as well (as received
    by ChatGPT). But I’ll have to move the tutor’s text-to-speech to a separate thread
    — otherwise, what we’ll have is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 主线程将运行大部分代码：它将把我的录音转录为文本（通过 Whisper），将此文本显示在聊天界面上，然后将导师的书面回复（由 ChatGPT 接收）也显示在聊天屏幕上。但我必须将导师的文本转语音移到一个单独的线程——否则我们将得到：
- en: the tutor’s voice will only be heard once the entire message will be received
    from ChatGPT, and its response might be long
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导师的声音只能在从 ChatGPT 接收到整个消息后才会被听到，而且其回复可能会很长
- en: it’ll block the user from responding while the tutor speaks
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将阻止用户在导师讲话时进行回应
- en: that’s not the “flowing” behavior I’d like to have; I’d like the tutor to begin
    speaking as its message is being written on the screen, and to certainly not block
    the user and prevent it from responding just because audio is still playing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我想要的“流动”行为；我希望导师在消息显示在屏幕上时就开始讲话，并且绝对不要因为音频仍在播放而阻止用户并阻止其回应。
- en: To do that, the text-to-speech part of the project was split to *two* additional
    threads. As the tutor’s response was being received from ChatGPT token-by-token,
    every full sentence created was passed to another thread, from which it was sent
    to the text-to-speech service, converting it to sound files. I’d like to emphasize
    the word *files* here — as I’m sending text to the TTS service sentence-by-sentence,
    I also have multiple audio files, one per each sentence, which need to be played
    in the correct order. These sound files are then played from another thread, making
    sure audio playback does not block the rest of the program from running.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，项目的文本转语音部分被拆分为 *两个* 额外的线程。当从 ChatGPT 收到导师的响应时，每个完整的句子被传递到另一个线程，再从那里发送到文本转语音服务，转换为声音文件。我想在这里强调一下
    *文件* 这个词——由于我将文本逐句发送到 TTS 服务，所以我也有多个音频文件，每个句子一个，需要按正确的顺序播放。这些声音文件然后从另一个线程播放，确保音频播放不会阻塞程序的其余部分运行。
- en: Making all this work, along with several other issues originating from UI-server
    interactions, were *the* complicated part of this project. Surprising, huh — software
    engineering is where things get hard.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使所有这些工作，以及源于 UI-服务器交互的其他几个问题，是 *这个* 项目中复杂的部分。令人惊讶，对吧——软件工程才是最难的。
- en: Designing the UI
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计用户界面
- en: '![](../Images/f6755d93b567e854ae6f1373a6eec390.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6755d93b567e854ae6f1373a6eec390.png)'
- en: Project’s UI
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的用户界面
- en: 'Well, a UI was something I knew I’ll need, and I also knew pretty much how
    I’d like it to look — but coding a UI is beyond my knowledge. So I decided to
    try a novel approach: I asked ChatGPT to write my UI for me.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我知道我需要一个用户界面，我也大致知道我希望它看起来是什么样的——但编写用户界面超出了我的知识范围。所以我决定尝试一种新方法：我让 ChatGPT
    为我编写用户界面。
- en: 'For this I used the actual ChatGPT service (not the API), and used GPT-4 (yes,
    I’m a proud paying customer!). Surprisingly, my initial prompt:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我使用了实际的 ChatGPT 服务（而非 API），并使用了 GPT-4（是的，我是一个自豪的付费用户！）。令人惊讶的是，我的初始提示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: delivered an amazing first result, ending up with a Python-Flask backend, jQuery
    code, HTML and matching CSS. But that was only about 80% of all the functionality
    I was hoping to get, so I spent roughly 10 hours going back-and-forth with GPT-4,
    optimizing and upgrading my UI, one request at a time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 交付了一个惊人的初步结果，最终得到了一个 Python-Flask 后端、jQuery 代码、HTML 和匹配的 CSS。但这只是我希望获得的所有功能的约
    80%，所以我花了大约 10 个小时与 GPT-4 来回沟通，一次一个请求，优化和升级我的用户界面。
- en: 'If I made it look simple,I won’t to clearly say that it wasn’t. The more requests
    I added, the more GPT-4 got confused and delivered malfunctioning code, which
    at some point was easier to correct manually than asking it to fix it. And I had
    a lot of requests:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我让它看起来很简单，我想明确说明其实并非如此。我添加的请求越多，GPT-4 就越困惑，并且交付的代码出现故障，这在某些时候比让它修复要手动纠正更容易。我有很多请求：
- en: Add a profile picture next to each message
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每条消息旁边添加一个个人资料图片
- en: Add a button for every message re-playing the its audio
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每条消息添加一个按钮，用于重新播放其音频
- en: Add a button to every French message that will add its translation below the
    original text
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每条法语消息添加一个按钮，将其翻译添加到原始文本下方
- en: Add a save-session and a load-session buttons
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个保存会话和加载会话的按钮
- en: Add a dark-mode option, make it choose the right mode automatically
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个暗模式选项，使其自动选择正确的模式
- en: Add a “working” icon whenever a respond from a service is waited for
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个“工作中”图标，以便在等待服务响应时显示
- en: And many many more…
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Still, even though usually GPT’s code never worked out of the box, considering
    the fact I have very little knowledge in the fields of front-end, the results
    are amazing — and far beyond anything I could have done myself just by Googling
    and StackOverflowing. I’ve also made a lot of progress in learning how to craft
    better prompts. Thinking about it, perhaps I should write another blogpost just
    on the lessons-learned from literally building a product from the ground up alongside
    an LLM… (*well,* [*I did*](https://shakedzy.medium.com/7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管通常情况下 GPT 的代码无法直接运行，但考虑到我在前端领域知识有限，结果仍然令人惊叹——远远超出了我仅凭谷歌搜索和 StackOverflow 能做到的任何事情。我在学习如何制作更好的提示方面也取得了很大进展。考虑到这一点，也许我应该再写一篇博客，专门讲述从零开始与
    LLM 一起构建产品的经验教训……（*嗯，* [*我确实做过*](https://shakedzy.medium.com/7-lessons-learned-on-creating-a-complete-product-using-chatgpt-462038856c85)）。
- en: Prompt Engineering
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示工程
- en: '*For this part of the post, I will assume you have some basic knowledge of
    how communication with a Chat LLM (like ChatGPT) works via API. If you don’t,
    you might get a little lost.*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于这部分内容，我将假设你对如何通过 API 与聊天 LLM（如 ChatGPT）进行通信有一些基本了解。如果没有，你可能会有些迷失。*'
- en: '![](../Images/c540817f73169cb754ea28c5f3936d12.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c540817f73169cb754ea28c5f3936d12.png)'
- en: Made with Dall-E
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Dall-E 制作
- en: Last but most-certainly not least — I had to make GPT take the role of a private
    tutor.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但绝对不是最不重要的 — 我让 GPT 扮演一个私人导师的角色。
- en: 'As a starting point, I added a *System Prompt* to the beginning of the chat.
    As the chat with an LLM is basically a list of messages sent by the user and the
    bot to each other, a System Prompt is usually the first message of the chat, which
    describes to the bot how it should behave and what is expected of it. Mine looked
    something like this (parameters encapsulated by curly-braces are replaced by run-time
    values):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为起点，我在聊天开始时添加了一个 *系统提示*。由于与 LLM 的聊天基本上是用户和机器人相互发送的消息列表，系统提示通常是聊天的第一条消息，用于向机器人描述它应该如何表现以及期望它做什么。我的系统提示看起来像这样（由花括号包围的参数会被运行时值替代）：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This was actually yielding pretty good results, but it seemed like the effectiveness
    of the behavioral instructions I gave the bot (“correct me when I’m wrong”, “always
    respond in French”), decayed as the chat went on.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上产生了相当不错的结果，但似乎随着聊天的进行，我给机器人的行为指令（“当我错了时纠正我”，“始终用法语回应”）的有效性逐渐减弱。
- en: 'Trying to fight this vanishing behavior, I came up with an interesting solution;
    I manipulated the user messages before sending them over to GPT. Whatever the
    user’s message was, I added additional text to it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这种逐渐消失的行为，我想出了一个有趣的解决方案；我在将用户消息发送给 GPT 之前对其进行了处理。不论用户的消息是什么，我都会在其中添加额外的文本：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding these at the end of every user’s message made sure the LLM responds exactly
    the way I wanted it to. It is worth mentioning that the long suffix I added is
    written in English, while the user’s message might not. This is why I added an
    explicit separator between the original message and my addition (the `---`), ending
    the context of the original message and starting a new context. Also note that
    as this suffix is added to the user’s message, it is written in first-person (“I”,
    “me”, etc..). This little trick improved results and behavior dramatically. While
    it might goes without saying, it might be worth emphasizing that this suffix is
    not displayed in the chat UI and the user has no idea it is added to their messages.
    It is inserted behind the scenes, right before being sent with the rest of the
    chat history to ChatGPT.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个用户消息的末尾添加这些内容确保了 LLM 按照我希望的方式回应。值得一提的是，我添加的长后缀是用英语书写的，而用户的消息可能不是。因此，我在原始消息和我的附加内容之间添加了一个明确的分隔符（`---`），以结束原始消息的上下文并开始新的上下文。还请注意，由于这个后缀是添加到用户的消息中，因此是用第一人称（“我”，“我自己”等）书写的。这个小技巧显著改善了结果和行为。虽然这可能是显而易见的，但值得强调的是，这个后缀不会显示在聊天界面中，用户不知道它被添加到他们的消息中。它在幕后插入，在与聊天历史记录一起发送给
    ChatGPT 之前。
- en: One more behavior I wanted to have was making the tutor speak first, meaning
    ChatGPT will send the first message as the session begins, without waiting for
    the user to initiate the session. That is, apparently, not something ChatGPT was
    designed to do.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要的另一种行为是让导师先发言，也就是说，ChatGPT 将在会话开始时发送第一条消息，而不等待用户启动会话。显然，这不是 ChatGPT 设计时的功能。
- en: What I found out when attempting to make ChatGPT reply on a messages-history
    that contained only the System Prompt, is that ChatGPT “lost it”, and began creating
    a chat with itself, playing both the user and the bot. No matter what I tried,
    I wasn’t able to make it properly initiate the session without the user saying
    something first.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我尝试让 ChatGPT 在仅包含系统提示的消息历史记录中回复时，我发现 ChatGPT “丢失了”，开始与自己进行聊天，扮演用户和机器人。不管我尝试什么，我都无法让它在用户先说话之前正确启动会话。
- en: 'And then I had an idea. When the session initialized, I send ChatGPT the following
    message on behalf of the user:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我有了一个想法。当会话初始化时，我代表用户向 ChatGPT 发送以下消息：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This request was designed to make GPT’s response look exactly how I thought
    a proper initialization of the session by the bot should be like. I then removed
    my message from the chat, and made it seem as if the bot kicked off the session
    by itself.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求旨在使 GPT 的响应看起来正如我所认为的那样，应该是机器人的适当会话初始化方式。然后我从聊天中删除了我的消息，让它看起来好像是机器人自行启动了会话。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: '![](../Images/bccd020fb50ed849a1d0f71945c66286.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bccd020fb50ed849a1d0f71945c66286.png)'
- en: Made with Dall-E, edited
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Dall-E 制作，已编辑
- en: What kicked-off as a funny little whim became reality in literally no-time,
    done completely during spare-time of only one quite-busy man. The fact that tasks
    such as these are now so simple to create does not cease to amaze me. Just one
    year ago, having something as ChatGPT available was sci-fi, and now I can shape
    it from my own personal laptop.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个有趣的小念头开始，几乎在瞬间变为现实，这完全是在一个非常忙碌的人空闲时间中完成的。任务变得如此简单，我感到非常惊讶。仅仅一年前，像 ChatGPT
    这样的工具还是科幻小说中的内容，而现在我可以在自己个人的笔记本电脑上进行塑造。
- en: This is the beginning of the future, and whatever is to come — at least I know
    I’ll be ready for it with one more foreign language. *Au revoir!*
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是未来的开始，无论未来会发生什么——至少我知道，我会用一种新的外语做好准备。*再见！*
