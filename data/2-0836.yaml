- en: Evolutionary Algorithm — Mutations Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进化算法 — 突变解释
- en: 原文：[https://towardsdatascience.com/evolutionary-algorithm-mutations-explained-4a3b5c2d49de](https://towardsdatascience.com/evolutionary-algorithm-mutations-explained-4a3b5c2d49de)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/evolutionary-algorithm-mutations-explained-4a3b5c2d49de](https://towardsdatascience.com/evolutionary-algorithm-mutations-explained-4a3b5c2d49de)
- en: Illustrations with code implementation, applied to TSP as an example
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含代码实现的插图，以TSP为例
- en: '[](https://medium.com/@byjameskoh?source=post_page-----4a3b5c2d49de--------------------------------)[![James
    Koh, PhD](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----4a3b5c2d49de--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4a3b5c2d49de--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4a3b5c2d49de--------------------------------)
    [James Koh, PhD](https://medium.com/@byjameskoh?source=post_page-----4a3b5c2d49de--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@byjameskoh?source=post_page-----4a3b5c2d49de--------------------------------)[![James
    Koh, PhD](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----4a3b5c2d49de--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4a3b5c2d49de--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4a3b5c2d49de--------------------------------)
    [James Koh, PhD](https://medium.com/@byjameskoh?source=post_page-----4a3b5c2d49de--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4a3b5c2d49de--------------------------------)
    ·8 min read·Nov 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----4a3b5c2d49de--------------------------------)
    ·8分钟阅读·2023年11月7日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1f3a72402d15dee37703769569019834.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f3a72402d15dee37703769569019834.png)'
- en: Image created by DALL·E 3 based on the prompt “Draw a science-fiction looking
    image that depicts mutation. Show the ‘before’ on the left, and the ‘after’ on
    the right.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由DALL·E 3根据提示“绘制一个科幻风格的图像，描绘突变。左侧显示‘前’的状态，右侧显示‘后’的状态。”创建。
- en: This is a continuation of [Evolutionary Algorithm — Selections Explained](/evolutionary-algorithm-selections-explained-2515fb8d4287?sk=a4cd1504b6098f82f004db32567c8832).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对[进化算法 — 选择解释](/evolutionary-algorithm-selections-explained-2515fb8d4287?sk=a4cd1504b6098f82f004db32567c8832)的延续。
- en: If you are reading to gain a high-level understanding of recombination and mutations
    in premutation-based representation, this article will be self-sufficient as a
    standalone.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望对基于预突变表示的重组和突变有一个高层次的理解，本文将作为独立文献满足你的需求。
- en: However, to understand the full details of every step of the process, it will
    be helpful to first read the linked article above before continuing here.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了了解每个步骤的完整细节，首先阅读上面链接的文章将会有帮助，然后再继续阅读这里的内容。
- en: Together with the code snippets from the previous article, you will be able
    to solve the famous Travelling Salesman Problem (TSP) on your personal computer.
    More importantly, you will appreciate everything that goes on behind the scenes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 结合上一篇文章中的代码片段，你将能够在个人计算机上解决著名的旅行商问题（TSP）。更重要的是，你将欣赏到幕后发生的所有细节。
- en: Getting to the same page
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 达成共识
- en: 'In the first part, I gave an outline of the Evolutionary Algorithm framework
    as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分中，我概述了进化算法框架如下：
- en: '![](../Images/dbe66fc1a36b486b957647fe9fcaf5b8.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dbe66fc1a36b486b957647fe9fcaf5b8.png)'
- en: Image by author
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: After looking at a couple of terminologies used in EA, we dug into the details
    of initializing the appropriate genotype (in Section 3.1, for <1>) as well as
    roulette wheel and tournament selection (in Section 3.2, for <2>).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在回顾了EA中使用的一些术语之后，我们深入探讨了初始化适当基因型的细节（第3.1节，针对<1>）以及轮盘赌和锦标赛选择（第3.2节，针对<2>）。
- en: We shall continue with Section 3.3 now.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将继续第3.3节。
- en: 3.3 — Variation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.3 — 变异
- en: Variations can be unary (involving a single genotype) or binary (involving two
    genotypes). The objective is to end up with new genotype(s) which will, hopefully,
    have a higher fitness than its predecessor(s).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 变异可以是单基因型的（涉及单一基因型）或双基因型的（涉及两个基因型）。目标是得到新的基因型，期望它们的适应度高于前任基因型。
- en: Statistics help us realize this hope. Simply by chance, some genotype would
    be better, while others would be worse. By working hand-in-hand with parent selection
    (section 3.2) and survival selection (section 3.4), the ‘successes’ count for
    much more than ‘failures’.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 统计学帮助我们实现这一希望。纯粹通过运气，某些基因型可能更好，而其他的可能更差。通过与父本选择（第3.2节）和生存选择（第3.4节）协同工作，“成功”的次数远远超过“失败”。
- en: In sections 3.3.1 and 3.3.2, we focus on variations made to **permutation-based
    genotypes**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3.3.1节和第3.3.2节中，我们关注对**基于排列的基因型**的变异。
- en: Technically, the recombination process can involve more than two parents, but
    more is not necessarily better [1], and the scope of this article is kept at two
    parents.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，重组过程可以涉及两个以上的父本，但更多并不一定更好[1]，本文的范围保持在两个父本。
- en: 3.3.1 — Recombination
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.3.1 — 重组
- en: This involves two parent genotypes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及两个父本基因型。
- en: Unlike binary representations, which can recombine using single-point or n-points
    crossover, it is less straightforward for permutation representations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与可以使用单点或多点交叉进行重组的二进制表示不同，排列表示的重组并不那么简单。
- en: '![](../Images/25c5ed543025bc665d13bd5d52aa0a24.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25c5ed543025bc665d13bd5d52aa0a24.png)'
- en: The outcome of forcing a cross-over on permutation-based genotypes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对基于排列的基因型进行强制交叉的结果。
- en: Suppose we have a permutation from 0 to 5 inclusive, from two parents (one in
    red, the other in pink). A crossover would result in duplicates of some indices,
    and the absence of others. This cannot be a solution to the TSP.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个从0到5的排列，来自两个父本（一个是红色的，另一个是粉色的）。一次交叉会导致某些索引的重复，以及其他索引的缺失。这不能成为TSP的解决方案。
- en: What we do, instead, is to apply the partial map crossover.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的是应用部分映射交叉。
- en: In the example below, the first offspring [0, 1, 3, 5, 2, 4] is obtained from
    the left portion of the first (red) parent, retained as-in, combined with yet-to-be-used
    indices from the second (pink) parent, with the relative order maintained. This
    gives us [0, 1] (from the red) and [3, 5, 2, 4] (from the pink) added together.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，第一个后代[0, 1, 3, 5, 2, 4]是从第一个（红色）父本的左侧部分中获得的，保持原样，并与第二个（粉色）父本中尚未使用的索引组合，保持相对顺序。这给我们带来了[0,
    1]（来自红色）和[3, 5, 2, 4]（来自粉色）的组合。
- en: '![](../Images/2cd36cc77305b66e82d58d77671badf3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2cd36cc77305b66e82d58d77671badf3.png)'
- en: Process of partial map crossover. Image by author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 部分映射交叉的过程。图片由作者提供。
- en: 'The motivation is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 动机如下：
- en: The red parent [**0**, **1**, 4, 3, 5, 2] already has a good (or at least decent)
    fitness, hence it was selected as a parent.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 红色父本[**0**，**1**，4，3，5，2]已经具有良好的（或至少是不错的）适应度，因此被选择作为父本。
- en: It is possible that keeping a portion of its genotype, and shuffling the remaining,
    can lead to an improvement.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留基因型的一部分并打乱其余部分可能会导致改进。
- en: We exploit the knowledge that the pink parent [**3**, **5**, 1, **2**, 0, **4**]
    also has a good fitness — It visited 3, before 5, before 2, before 4.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们利用粉色父本[**3**，**5**，1，**2**，0，**4**]也有良好的适应度——它访问了3，然后是5，然后是2，然后是4。
- en: Rather than randomly shuffling the tail end of the red parent randomly, we scramble
    it to follow the order of visit by the pink parent.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不是随机打乱红色父本的尾部，而是按照粉色父本访问的顺序对其进行打乱。
- en: The same is true when the two parents are switched. Hence, two offspring are
    obtained.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个父本互换时，情况也是如此。因此，得到了两个后代。
- en: Note that the cutoff could happen anywhere along the genotype with equal probability.
    If the cutoff was performed exclusively at the middle, we lose the opportunity
    for a diverse set of offspring in the subsequent generation. No one can say for
    certain that the first half is ideal and should be kept — it could well be just
    the first quarter, or perhaps the first three-quarters. Hence, all options should
    be kept on the table, and the work is left to statistics.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，切割可以在基因型的任何位置发生，概率相等。如果切割只在中间进行，我们就会失去在随后的代中获得多样化后代的机会。没有人能确定前半部分是理想的并且应该保留——它可能只是前四分之一，或者也许是前三分之四。因此，所有选项都应保留，最终交给统计学处理。
- en: 3.3.2 — Mutation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.3.2 — 突变
- en: Still in the ‘**Variation**’ aspects of Evolutionary Algorithms, we move on
    to changes which are applicable to individual genotypes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在进化算法的‘**变异**’方面，我们转向适用于个体基因型的变化。
- en: '![](../Images/0e6a3ee425f7ac3fca12d699ee620d30.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e6a3ee425f7ac3fca12d699ee620d30.png)'
- en: Possible mutations for a permutation-based genotype.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 基于排列的基因型可能发生的突变。
- en: If a genotype comprises a permutation sequence, the changes to be applied has
    to involve some sort of re-ordering. It is not feasible to perform a bit flip,
    or to increase/decrease a single number.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果基因型包含一个排列序列，所应用的变化必须涉及某种重新排序。执行位翻转或增加/减少单个数字是不切实际的。
- en: One approach is to randomly select a number (for example, ‘2’) and shift it
    to the beginning or the end of the sequence. Another approach is to randomly select
    two numbers and exchange their positions with each other.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是随机选择一个数字（例如，“2”）并将其移到序列的开始或结束。另一种方法是随机选择两个数字并交换它们的位置。
- en: The idea here is to make minimal changes to a single genotype, with the hope
    of making an already good solution even better. Such variations would be especially
    helpful in scenarios where the solution is very good for most parts except for
    a point that is out of place.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是对单个基因型做出最小的改动，希望使一个已经很好的解决方案变得更好。这种变异在解决方案几乎完美的情况下尤其有用，只有某一点不太对。
- en: Here’s the code for sections 3.3.1 (Recombination) and 3.3.2 (Mutation).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第3.3.1节（重组）和第3.3.2节（突变）的代码。
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 3.4 — Survival selection
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.4 — 生存选择
- en: After discussing extensively on parent selection and variation, let’s move on
    to the third pillar of EA, which involves selecting which individuals in the population
    make it to the next population.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在广泛讨论了父代选择和变异之后，我们进入进化算法的第三个支柱，即选择哪些个体进入下一代。
- en: The first approach is to put all parents and offspring together, and select
    the fittest individuals to populate the next generation. The issue here is that
    we are ‘diluting’ the evolution effects. After going through all the trouble of
    creating offspring from parent selection + recombination + mutation, a substantial
    portion of those ends up being discarded. There’s some elements of ‘*two steps
    forward and one step back*’ in this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是将所有父代和后代放在一起，选择最适应的个体来填充下一代。这里的问题是我们在“稀释”进化效果。在经历了父代选择、重组和突变之后，产生的后代中有相当一部分会被丢弃。这其中有些“*前进两步，后退一步*”的成分。
- en: The second approach is to (somewhat) mimic nature. All parents will ‘die’ and
    disappear from the population, and the next generation is entirely populated by
    the offspring. The problem here is that the best offspring is not necessarily
    better than the best parent — and removing all parents may cause us to be further
    away from the ideal solution.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是（在一定程度上）模仿自然。所有父代将“死亡”并从种群中消失，下一代完全由后代组成。这里的问题是最好的后代不一定比最好的父代更好——移除所有父代可能会让我们离理想解决方案更远。
- en: As such, the middle ground is usually taken. We select the best individual(s)
    from the parents. We also mutate copies of them, with the hope that some perturbations
    further improve the solution. Then, we generate just enough offspring to full
    up the remaining places of the next population, without discarding any.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通常会采取中间道路。我们从父代中选择最好的个体，并对它们的副本进行突变，希望通过一些扰动进一步改进解决方案。然后，我们生成足够的后代以填补下一代剩余的位置，而不会丢弃任何个体。
- en: 'Specifically, in the `##... elitism; keep best individuals and variants of
    them ...` component in section 3.3, we can do something like the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在第3.3节的`##... 精英策略；保留最佳个体及其变体 ...`组件中，我们可以做如下操作：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3.5 — Termination
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.5 — 终止
- en: Perhaps your company has tasked you to apply EA and solve an industry problem,
    within a given budget. Or, perhaps you know the optimal objective value (but not
    the solution which gives that).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你的公司要求你应用进化算法解决一个行业问题，并且有一个预算限制。或者，你知道最佳目标值（但不知道给出这个值的解决方案）。
- en: In such cases, you may want to perform early termination once the results are
    good enough.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一旦结果足够好，可能需要进行提前终止。
- en: If there’s no specific number to look for, and we are uncertain about what is
    ‘good enough’ in the first place, one approach is to stop the iteration after
    the improvement across a certain number of generations is smaller than some threshold.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有特定的数字需要寻找，并且我们不确定什么是“足够好”，一种方法是当在一定代数中改进量小于某个阈值时停止迭代。
- en: If resources are not an issue, then you should be concerned about terminating
    *too early* rather than *too late.* It doesn’t hurt to go on with additional iterations,
    and run the evolution for more generations. Like in deep learning, we would keep
    the solution corresponding to the best iteration, and not the last iteration.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果资源不是问题，那么你应该关注的是*过早*终止，而不是*过晚*终止。进行额外的迭代并运行更多的进化是有益的。就像在深度学习中一样，我们会保留与最佳迭代对应的解决方案，而不是最后的迭代。
- en: 4\. Getting The Results
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 获得结果
- en: 4.1 Representing the TSP
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1 表示TSP
- en: Let’s build a class for the Travelling Salesman problem, to streamline the implementation
    process.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为旅行销售员问题构建一个类，以简化实施过程。
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 4.2 Train and observe
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2 训练和观察
- en: Putting together the code snippets above into a single `Evolutionary` class,
    the following can then be applied to find a solution to the TSP.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码片段组合成一个单一的`Evolutionary`类，然后可以应用以下方法来找到TSP的解决方案。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you’ve saved the intermediate results, you can simply put the screenshot
    images together to form a gif using my code which I shared [here](https://medium.com/towards-data-science/a-cornerstone-of-rl-td-%CE%BB-and-3-big-names-2e547b37c05).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你保存了中间结果，你可以使用我分享的代码[这里](https://medium.com/towards-data-science/a-cornerstone-of-rl-td-%CE%BB-and-3-big-names-2e547b37c05)将截图图像组合成一个gif。
- en: Congratulations! You now have the knowledge to solve an np-hard problem using
    evolutionary algorithm.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在具备了使用进化算法解决NP难题的知识。
- en: The same gif shown at the beginning of this article. This is the result of the
    codes shared above.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这与文章开头展示的gif相同。这是上述代码共享的结果。
- en: Conclusion
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, you learnt what makes Evolutionary Algorithm ticks, and how
    each component functions. Apart from the high level concepts, we dived deeply
    into the implementations, supported by visualization, codes, and tangible numbers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你了解了进化算法的运行原理，以及每个组件的功能。除了高层次的概念，我们还深入探讨了实现过程，配以可视化、代码和具体数据。
- en: References
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] A. E. Eiben, P. E. Raue, and Z. Ruttkay, [Genetic algorithms with multi-parent
    recombination](https://link.springer.com/chapter/10.1007/3-540-58484-6_252) (1994),
    In International conference on parallel problem solving from nature'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] A. E. Eiben, P. E. Raue, 和 Z. Ruttkay, [具有多父代重组的遗传算法](https://link.springer.com/chapter/10.1007/3-540-58484-6_252)
    (1994)，在国际并行问题解决自然会议上'
