- en: 'The Power of Linux Cgroups: How Containers Take Control of Their Resources'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux控制组的威力：容器如何控制其资源
- en: 原文：[https://towardsdatascience.com/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0](https://towardsdatascience.com/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0](https://towardsdatascience.com/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0)
- en: Optimizing Container Resource Allocation with Linux Control Groups
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Linux控制组优化容器资源分配
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----ba564fef13b0--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----ba564fef13b0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba564fef13b0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba564fef13b0--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----ba564fef13b0--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dpoulopoulos.medium.com/?source=post_page-----ba564fef13b0--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----ba564fef13b0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba564fef13b0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba564fef13b0--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----ba564fef13b0--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba564fef13b0--------------------------------)
    ·8 min read·Jan 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba564fef13b0--------------------------------)
    ·阅读时间8分钟·2023年1月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b0e5159a60f501ca4b4aa41481bdd327.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0e5159a60f501ca4b4aa41481bdd327.png)'
- en: Photo by [Joshua Hoehne](https://unsplash.com/@mrthetrain?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Joshua Hoehne](https://unsplash.com/@mrthetrain?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The last article examined how to use Linux Namespaces to create isolated environments
    within a single Linux system. This article is part of our effort to deeply understand
    how containers work by looking under the hood.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上一篇文章探讨了如何使用Linux命名空间在单一Linux系统内创建隔离环境。本文是我们深入了解容器如何工作的努力的一部分，旨在揭示其背后的机制。
- en: '[](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----ba564fef13b0--------------------------------)
    [## Containers: How They Work Under the Hood and Why They’re Taking Over the Data
    Science World'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----ba564fef13b0--------------------------------)
    [## 容器：它们如何在幕后工作以及为何它们正在主导数据科学领域'
- en: A Beginner’s Guide to Understanding the Magic of Docker
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初学者理解Docker魔法的指南
- en: towardsdatascience.com](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----ba564fef13b0--------------------------------)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----ba564fef13b0--------------------------------)
- en: Namespaces are the first step of our journey. We saw how you can create a `PID`
    namespace to create a world where the processes running within are under the assumption
    that they are the only ones in existence, but how can you enforce a limit to the
    number of resources they can consume? Enter Linux cgroups.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是我们旅程的第一步。我们看到如何创建一个`PID`命名空间，创建一个其中运行的进程假设自己是唯一存在的世界，但如何对它们可以消耗的资源数量施加限制呢？这就要引入Linux
    cgroups了。
- en: Linux control groups, or cgroups, are a powerful tool for managing and allocating
    resources in a Linux system. They allow administrators to limit the resources
    used by processes or groups of processes, ensuring that essential system services
    always have access to the resources they need to function properly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Linux控制组，或称cgroups，是一种强大的工具，用于管理和分配Linux系统中的资源。它们允许管理员限制进程或进程组使用的资源，确保关键系统服务始终能够获得其正常运行所需的资源。
- en: But cgroups are not just useful for system administrators — they also provide
    a way for containers to take control of their own resources, enabling them to
    run more efficiently and reliably within a shared host environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但 cgroups 不仅对系统管理员有用——它们还为容器提供了一种控制自身资源的方法，使其在共享主机环境中更高效、更可靠地运行。
- en: In this article, we explore the benefits of using cgroups in the context of
    containers and show you how to get started with cgroups in your own environment.
    First, we will create a control group to limit the memory consumption of a process
    that runs in its context and then run a whole namespace under it. Let’s dive in!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨在容器上下文中使用 cgroups 的好处，并展示如何在自己的环境中开始使用 cgroups。首先，我们将创建一个控制组，以限制在其上下文中运行的进程的内存消耗，然后在其下运行一个完整的命名空间。让我们深入了解吧！
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=cgroups)
    is a newsletter for those who are curious about the world of MLOps. MLOps is a
    broad field that strives to bring ML models to production in an efficient and
    rerpoducible way. Containers play a crucial role in the pipeline. If you want
    to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=cgroups).
    You’ll hear from me on the first Saturday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[学习速率](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=cgroups)
    是一份面向那些对 MLOps 世界充满好奇的人的新闻通讯。MLOps 是一个广泛的领域，致力于以高效和可重现的方式将 ML 模型投入生产。容器在这个流程中发挥着关键作用。如果你想了解更多类似的主题，请[点击这里订阅](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=cgroups)。每个月的第一个星期六，你将收到我关于最新
    MLOps 新闻和文章的更新和见解！'
- en: What are Cgroups?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Cgroups？
- en: Linux control groups, or cgroups, is a kernel feature that allows an administrator
    to allocate resources such as CPU, memory, and I/O bandwidth to groups of processes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 控制组或 cgroups 是一种内核特性，允许管理员将 CPU、内存和 I/O 带宽等资源分配给进程组。
- en: Cgroups provide a way to control how much of the system’s resources a process
    or a group of processes can use. For example, an administrator could create a
    cgroup for a group of processes associated with a specific application (e.g.,
    a web application running on a server) and then set limits on the amount of CPU
    and memory that those processes are allowed to use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Cgroups 提供了一种控制系统资源的使用量的方法。例如，管理员可以为与特定应用程序相关的进程组创建一个 cgroup（例如，运行在服务器上的 web
    应用程序），然后设置这些进程允许使用的 CPU 和内存的限制。
- en: Cgroups are helpful for various purposes, including improving system performance,
    isolating processes for security purposes, and simplifying managing multiple applications
    on a single system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Cgroups 对于各种目的都很有用，包括提高系统性能、隔离进程以提高安全性，以及简化在单个系统上管理多个应用程序。
- en: In the context of containers, cgroups allow us to limit the resources each container
    can consume so that our application cannot take over the whole server or ensure
    it has the resources it needs to function properly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器上下文中，cgroups 允许我们限制每个容器可以消耗的资源，以便我们的应用程序不会占用整个服务器，或者确保它拥有运行所需的资源。
- en: For example, setting the resources section of a pod in Kubernetes is always
    a good idea because it helps the Kubernetes scheduler decide on which node to
    schedule the pod. This ensures that our application will have everything it needs
    to run correctly. If not, our application won’t even start.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设置 Kubernetes 中 pod 的资源部分总是一个好主意，因为它帮助 Kubernetes 调度器决定将 pod 调度到哪个节点。这确保了我们的应用程序将拥有运行所需的一切。如果没有，应用程序甚至无法启动。
- en: 'How can we use cgroups in practice? Let’s see this by creating two simple examples:
    first, we will create a simple application and run it under a specific cgroup,
    then run a whole namespace in a similar context.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在实际中使用 cgroups？通过创建两个简单的示例来了解：首先，我们将创建一个简单的应用程序，并在特定的 cgroup 下运行它，然后在类似的上下文中运行一个完整的命名空间。
- en: A Simple Example
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的示例
- en: Our journey in the world of cgroups starts here. First, we will create a simple
    application and run it in the context of a memory-limiting cgroup. Then, we will
    create a Linux namespace in the same context and run the same application inside
    this namespace.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 cgroups 世界的旅程从这里开始。首先，我们将创建一个简单的应用程序，并在内存限制的 cgroup 中运行它。然后，我们将在相同的上下文中创建一个
    Linux 命名空间，并在该命名空间中运行相同的应用程序。
- en: Memhog
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Memhog
- en: To make this example work, we need to control the amount of memory the application
    uses. To this end, we will use a Debian package called `memhog`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个示例有效，我们需要控制应用程序使用的内存量。为此，我们将使用一个名为 `memhog` 的 Debian 软件包。
- en: '`memhog` is a simple package that allocates the memory we tell it to for testing
    purposes (see the manpage [here](https://man7.org/linux/man-pages/man8/memhog.8.html)
    for more details).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`memhog` 是一个简单的软件包，用于分配我们指定的内存以供测试（有关更多详细信息，请参见 [这里](https://man7.org/linux/man-pages/man8/memhog.8.html)
    的手册页）。'
- en: 'The first step is to install `memhog`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装 `memhog`：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Test that you have installed `memhog` properly by asking it to allocate 100
    megabytes of memory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 测试你是否正确安装了 `memhog`，让它分配 100 兆字节的内存：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output should be something like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you get this output, then you’re good to go! Let’s create a bash script
    that will run this every 2 seconds. So, our application is a service that asks
    for 100 megabytes every two seconds. Create a new file, call it `memhog.sh` and
    put the following content inside:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到了这个输出，那么你可以继续！让我们创建一个每 2 秒运行一次的 bash 脚本。因此，我们的应用程序是一个每两秒请求 100 兆字节的服务。创建一个新文件，命名为
    `memhog.sh` 并将以下内容放入其中：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, make the file executable:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使文件可执行：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create a Cgroup
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Cgroup
- en: 'To create, manage, and monitor cgroups, we need another package called `cgroup-tools`.
    So, first, you need to install this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建、管理和监控 cgroup，我们需要另一个名为 `cgroup-tools` 的软件包。所以，首先，你需要安装它：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have this in our toolbox, the process goes as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在工具箱中有了这个，过程如下：
- en: Create a new cgroup using the package we just installed
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们刚刚安装的软件包创建一个新的 cgroup
- en: Set a limit for the resource we want to control for this specific cgroup
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们想要控制的资源在这个特定的 cgroup 中设置一个限制
- en: Run the application or namespace under this cgroup
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个 cgroup 下运行应用程序或命名空间
- en: 'Thus, let us first create the cgroup. To achieve this, use the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先创建 cgroup。为此，请使用以下命令：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This command creates a new cgroup (`cgcreate`) of type memory and sets its
    name to `memhog-limiter`. What this command actually did was create a new directory
    under `/sys/fs/cgroup/memory`, and you can view its contents by running `ls`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令创建了一个新的 cgroup（`cgcreate`），类型为内存，并将其名称设置为 `memhog-limiter`。这个命令实际上做的是在 `/sys/fs/cgroup/memory`
    下创建了一个新目录，你可以通过运行 `ls` 来查看其内容：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (Depending on your system, the location or structure of this directory may vary)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: （根据你的系统，目录的地点或结构可能会有所不同）
- en: Now that we have created the cgroup let’s set our limits. We’ll set a limit
    of 50 megabytes, which means that any process that runs in this context cannot
    exceed it. Similarly, when talking about groups of processes, the sum of their
    needs cannot exceed this limit.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了 cgroup，让我们设置我们的限制。我们将设置 50 兆字节的限制，这意味着在这个上下文中运行的任何进程都不能超过这个限制。类似地，谈到进程组时，它们的总需求也不能超过这个限制。
- en: 'To set the memory limit, run the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置内存限制，请运行以下命令：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command sets a memory limit of 50 megabytes for the cgroup `momhog-limiter`.
    If you cat the corresponding file from the directory structure we saw earlier,
    you’ll see precisely this (in bytes):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令为 cgroup `momhog-limiter` 设置了 50 兆字节的内存限制。如果你查看我们之前看到的目录结构中的相应文件，你会看到正是这个（以字节为单位）：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We’re ready to run our application and namespace in this context.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备在这个上下文中运行我们的应用程序和命名空间。
- en: Set Your Limits!
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设定你的限制！
- en: 'Our state now is the following: we have created a service that allocates 100
    megabytes of memory every two seconds. We have also created a cgroup that limits
    the memory a process or a group of processes can consume to 50 megabytes. What
    do you expect to happen if we try to run our service in this context?'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的状态如下：我们创建了一个每两秒分配 100 兆字节内存的服务。我们还创建了一个限制进程或一组进程可以消耗的内存为 50 兆字节的 cgroup。如果我们在这个上下文中尝试运行我们的服务，你期望会发生什么？
- en: 'Without further ado, to execute a service in this context, run the command
    below:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不再废话，要在这个上下文中执行服务，请运行下面的命令：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is what we expected it to be: the Linux kernel kills the service
    every time it tries to run:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 结果正如我们预期的那样：每次它尝试运行时，Linux 内核都会终止服务：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That’s great; this is precisely what we’d like to see. But now, how can we create
    a namespace in this context? This is similar to what containers do, so if we achieve
    this, we’ll be on our way to creating a container-like environment without Docker,
    which is the goal of this series.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 很好；这正是我们想看到的。但现在，我们如何在这个上下文中创建一个命名空间呢？这类似于容器的功能，因此如果我们实现了这一点，我们将朝着在没有 Docker
    的情况下创建类似容器的环境的目标迈进，这也是本系列的终极目标。
- en: 'Creating a namespace in this context is pretty simple. The following command
    may look familiar to you:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个上下文中创建命名空间是相当简单的。以下命令可能对你来说很熟悉：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Sure, we used the first part before to run a service in the context of our
    `memhog-limiter` cgroup (`sudo cgexec -g memory:memhog-limiter`). Furthermore,
    we’ve seen the second part of the command in the article; we talked about namespaces
    (`unshare -fp — mount-proc`): it is the command we used to create a new `PID`
    namespace.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们在之前使用了第一部分来在`memhog-limiter` cgroup的上下文中运行服务（`sudo cgexec -g memory:memhog-limiter`）。此外，我们在文章中看到了命令的第二部分，我们讨论了命名空间（`unshare
    -fp — mount-proc`）：这是我们用来创建新的`PID`命名空间的命令。
- en: 'Thus, if we bring everything together, this command creates a new `PID` namespace
    in the context of our cgroup. To verify that you are in a new namespace, run the
    following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们将所有内容结合起来，这个命令在我们的cgroup上下文中创建了一个新的`PID`命名空间。要验证你是否在新的命名空间中，请运行以下命令：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, in your new namespace only `bash` is running as `PID` 1\. So,
    every service you’ll start now will start in the context of our cgroup. Let’s
    verify this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在你的新命名空间中，只有`bash`作为`PID` 1运行。因此，你现在启动的每个服务都将在我们的cgroup上下文中启动。让我们验证一下：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is great! We got the same output as before. If you want to play around,
    you could reduce the memory that `memhog` tries to allocate and make it work.
    In any case, congratulations! You’re one step closer to creating your own Linux
    containers without Docker!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们得到了和之前一样的输出。如果你想尝试一下，你可以减少`memhog`尝试分配的内存量，让它正常工作。无论如何，祝贺你！你离创建自己的Linux容器而无需Docker更进一步了！
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In summary, Linux cgroups is a powerful tool for managing and allocating resources
    in a Linux system. They allow administrators to limit the amount of resources
    that can be used by processes or groups of processes, ensuring that essential
    system services always have access to the resources they need to function properly.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Linux cgroups是管理和分配Linux系统资源的强大工具。它们允许管理员限制进程或进程组可以使用的资源量，确保重要的系统服务始终能够获得其正常运行所需的资源。
- en: In the context of containers, cgroups provide a way for containers to take control
    of their own resources, enabling them to run more efficiently and reliably within
    a shared host environment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器的上下文中，cgroups提供了一种让容器控制自身资源的方式，使它们能够在共享的主机环境中更高效、更可靠地运行。
- en: 'This story examined how you can use cgroups in practice and brought us one
    step closer to our final goal: create a container-like environment in Linux without
    Docker. Next stop? Overlay filesystems!'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事探讨了如何在实践中使用cgroups，并让我们离最终目标更近了一步：在Linux中创建类似容器的环境而无需Docker。下一站？覆盖文件系统！
- en: About the Author
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=cgroups),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我的名字是[Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=cgroups)，我是为[Arrikto](https://www.arrikto.com/)工作的机器学习工程师。我为欧洲委员会、Eurostat、IMF、欧洲中央银行、OECD和宜家等主要客户设计并实施了人工智能和软件解决方案。
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对阅读更多关于机器学习、深度学习、数据科学和数据运维的帖子感兴趣，可以在[Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow)、[LinkedIn](https://www.linkedin.com/in/dpoulopoulos/)或在Twitter上关注[@james2pl](https://twitter.com/james2pl)。
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 表达的观点完全是我个人的，并不代表我雇主的观点或意见。
