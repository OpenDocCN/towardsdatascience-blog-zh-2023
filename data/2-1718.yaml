- en: 'Python Decorators: A Comprehensive Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 装饰器：全面指南
- en: 原文：[https://towardsdatascience.com/python-decorators-a-comprehensive-guide-5bde06d2fb27](https://towardsdatascience.com/python-decorators-a-comprehensive-guide-5bde06d2fb27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-decorators-a-comprehensive-guide-5bde06d2fb27](https://towardsdatascience.com/python-decorators-a-comprehensive-guide-5bde06d2fb27)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: 'The article introduces the amazingly powerful syntactic sugar of Python: decorators.'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章介绍了 Python 的强大语法糖：装饰器。
- en: '[](https://medium.com/@nyggus?source=post_page-----5bde06d2fb27--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----5bde06d2fb27--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5bde06d2fb27--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5bde06d2fb27--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----5bde06d2fb27--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----5bde06d2fb27--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----5bde06d2fb27--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5bde06d2fb27--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5bde06d2fb27--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----5bde06d2fb27--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5bde06d2fb27--------------------------------)
    ·11 min read·Oct 19, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5bde06d2fb27--------------------------------)
    ·阅读时间11分钟·2023年10月19日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ca223f2a3dbe822cd12c47eb407ef22a.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca223f2a3dbe822cd12c47eb407ef22a.png)'
- en: Be a good designer of your decorators — and of your Python code. Photo by [Spacejoy](https://unsplash.com/@spacejoy?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 做一个优秀的装饰器设计师——以及 Python 代码设计师。照片由 [Spacejoy](https://unsplash.com/@spacejoy?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Python decorators are one of those concepts that seem simple if you understand
    them, but very difficult otherwise. Many Python beginners see them as a magical
    tool that they must learn and use in their own code in order to perform true magic.
    But using built-in decorators or those from site packages is not enough; it’s
    like doing magic with a magic box bought in a kid shop. True magic comes from
    writing your own decorators.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 装饰器是那些看似简单但如果不了解就非常困难的概念之一。许多 Python 初学者将它们视为一种神奇的工具，必须学习并在自己的代码中使用，以便实现真正的魔法。但使用内置的装饰器或来自第三方库的装饰器是不够的；这就像用儿童商店买来的魔法盒子做魔法一样。真正的魔法来自于编写自己的装饰器。
- en: I remember when I desperately wanted to learn how to write and use my own decorators
    in a real project, not just for fun. When that time finally came, the pleasure
    I felt was immense. This experience made me eager to find more opportunities to
    implement my own decorators.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得当时我迫切想学习如何在真实项目中编写和使用自己的装饰器，而不仅仅是为了好玩。当那个时刻终于到来时，我感受到的愉悦是巨大的。这段经历让我渴望寻找更多机会来实现自己的装饰器。
- en: I hope that after reading this article, you will have no problems with Python
    decorators. Therefore, this article aims to introduce the concept of Python decorators
    to those who have not been able to understand it yet. I hope to reveal the magic
    behind them in a simple to understand way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望在阅读本文后，你对 Python 装饰器不会再有任何困惑。因此，本文旨在向那些尚未理解 Python 装饰器概念的人介绍这个话题。我希望以一种易于理解的方式揭示其背后的魔力。
- en: There is much more to decorators than that. We will discuss the basics, but
    the good news is that these basics should be enough for you to implement even
    complex and functional decorators. In future articles, we will go further into
    the details by discussing the intricacies of decorators and their various use
    cases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器的内容远不止这些。我们将讨论基础知识，但好消息是，这些基础知识应该足以让你实现即使是复杂而实用的装饰器。在未来的文章中，我们将深入探讨装饰器的复杂细节及其各种应用场景。
- en: Python programmers at all levels can benefit from this article. *Beginners*
    will learn the basics of decorators, while *intermediates* will gain a deeper
    understanding; *advanced programmers* can use the article to refresh their memory.
    In addition, sometimes it’s good to look at a particular concept from different
    angles, not only the one we’ve been using for years — here, I am offering my viewpoint
    on decorators and their usefulness, which I hope will be helpful to readers of
    all levels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 各个水平的 Python 程序员都能从这篇文章中受益。*初学者*将学习装饰器的基础知识，而*中级程序员*将获得更深入的理解；*高级程序员*可以利用这篇文章来刷新记忆。此外，有时从不同的角度看待某个特定概念是好的，不仅仅是我们多年来使用的角度——在这里，我提供了对装饰器及其有用性的观点，希望能对各个水平的读者有所帮助。
- en: Introduction to decorators
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 装饰器简介
- en: Python decorators are a powerful and versatile tool, but they should be used
    judiciously to avoid overuse and misuse. A decorator is a function that allows
    you to modify the behavior of another function. Decorators can also be written
    as classes, but this is less common and will not be covered in this article.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python 装饰器是一个强大而多用途的工具，但应谨慎使用以避免过度使用和滥用。装饰器是一个函数，允许你修改另一个函数的行为。装饰器也可以作为类来编写，但这种情况较少见，本文将不予讨论。
- en: 'When you have a decorator, say `my_decorator()`, you use it to decorate another
    function, say `foo()`, in the following way:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个装饰器，比如`my_decorator()`时，你可以用它来装饰另一个函数，比如`foo()`，如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After decorating the `foo()` function, we no longer know what it does without
    also knowing what the `my_decorator` decorator does. The decorator may add new
    behavior, such as logging, or it may completely change the function’s behavior
    and return value. For example, the decorated `foo()` function may return a dictionary
    instead of a tuple, or it may return `None`. To find out what the `foo()` function
    does after being decorated, we must check the definition of the `my_decorator`
    decorator.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在装饰了`foo()`函数后，我们不能再知道它的行为，而不了解`my_decorator`装饰器的作用。装饰器可能会添加新的行为，比如日志记录，或者完全改变函数的行为和返回值。例如，装饰过的`foo()`函数可能返回一个字典而不是一个元组，或者可能返回`None`。要了解装饰后的`foo()`函数的行为，我们必须检查`my_decorator`装饰器的定义。
- en: I don’t know the etymology of the word “decorator” used in the Python context.
    In Python, the word comes from the decorator pattern, but this does not explain
    the original etymology. If you know it, please share it with us in the comments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道“装饰器”一词在 Python 上下文中的词源。在 Python 中，这个词源自装饰器模式，但这并没有解释其原始词源。如果你知道，请在评论中与我们分享。
- en: I personally find Python decorators to be a beautiful form of syntactic sugar.
    It is no wonder they are called decorators, as they decorate the function being
    decorated. I appreciate both the appearance and power of decorators.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人认为 Python 装饰器是一种美妙的语法糖。它们被称为装饰器也不奇怪，因为它们装饰了被装饰的函数。我欣赏装饰器的外观和功能。
- en: However, I am aware of the difficulty that decorators can introduce. As explained
    above, we cannot know how a decorated function behaves without knowing the definition
    of its decorator. Additionally, the fact that multiple decorators can be used
    on a single function can make things even more complex.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我了解装饰器可能带来的困难。如上所述，我们不能知道一个装饰过的函数的行为，而不了解其装饰器的定义。此外，多个装饰器可以作用于一个函数，这使得事情变得更加复杂。
- en: 'Let me organize the idea behind decorators into three steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我将装饰器背后的思想整理成三步：
- en: '*Need*. You have a function, but you need to change its behavior. This can
    result from various reasons. For instance, you may need to add logging to all
    functions in an application or changing the behavior of a function from an external
    module.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*需求*。你有一个函数，但你需要改变它的行为。这可能由于各种原因。例如，你可能需要为应用程序中的所有函数添加日志记录，或改变外部模块中函数的行为。'
- en: '*Definition*. You write a decorator function that is responsible for this updated
    behavior. It can take one or more parameters in addition to the original function.
    The decorator function typically calls the original function, but it doesn’t have
    to.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*定义*。你编写一个装饰器函数，负责这种更新的行为。它可以接受一个或多个参数，除了原始函数之外。装饰器函数通常会调用原始函数，但这并不是必须的。'
- en: '*Use*. You overwrite the original function with the new one. This can be done
    in two ways: via decoration or assignment, but decoration is much more common.
    Calling the decorated function using its original name means calling the new function,
    because the original function no longer exists unless it was copied.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*使用*。你用新函数覆盖原函数。这可以通过装饰或赋值的方式完成，但装饰更为常见。使用原始名称调用装饰函数意味着调用新函数，因为原函数不再存在，除非它被复制。'
- en: Each of these three steps is equally important, so let’s discuss these three
    steps one by one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这三步中的每一步都同样重要，所以我们逐步讨论这三步。
- en: 'Step 1: Need'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步：需求
- en: Okay, so you *need* to change the behavior of a function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以你*需要*改变函数的行为。
- en: 'Why use a decorator to change the behavior of a function instead of simply
    rewriting it? There are a few reasons:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么使用装饰器来改变函数的行为而不是简单地重写它？有几个原因：
- en: You may not be able to rewrite the function. For example, it may be a function
    from an external module.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能无法重写函数。例如，它可能是来自外部模块的函数。
- en: You may not want to rewrite the function. For example, it may be a large or
    complex function, or it may be a function that is used in many different places.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能不想重写函数。例如，它可能是一个大型或复杂的函数，或者是一个在许多不同地方使用的函数。
- en: It may be cumbersome to rewrite the function. For example, it may be called
    by many different functions.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写函数可能很麻烦。例如，它可能被许多不同的函数调用。
- en: You may only need to change the behavior of the function for development, but
    you want to use the original function in production.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能只需要在开发中改变函数的行为，但希望在生产中使用原函数。
- en: You may need to change the behavior of many functions. In this case, it is much
    more efficient to write a decorator than to rewrite each function individually.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能需要改变许多函数的行为。在这种情况下，编写装饰器比逐个重写每个函数要高效得多。
- en: The most common scenario is when you need to change the behavior of many functions.
    In this case, you can write one decorator and apply it to all of the functions
    that you need to change. This can save you a lot of time and code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的场景是你需要改变许多函数的行为。在这种情况下，你可以编写一个装饰器，并将其应用到所有需要改变的函数上。这可以节省大量时间和代码。
- en: 'Here are a few examples of how decorators can be used:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些装饰器可以使用的例子：
- en: To add logging to all existing functions in a project.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向项目中所有现有函数添加日志记录。
- en: To measure and log the execution time of each function in an app.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量并记录应用中每个函数的执行时间。
- en: To add authentication and authorization to functions called in an app.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用中调用的函数添加身份验证和授权。
- en: To cache output returned from functions.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存函数返回的输出。
- en: To change a function from writing data to a local file to writing data to a
    remote database.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将函数从写入本地文件的数据更改为写入远程数据库的数据。
- en: To silence a particular function for testing. For example, you could use a decorator
    to prevent a function from writing to a remote database during testing.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试中使某个特定函数静默。例如，你可以使用装饰器防止函数在测试期间写入远程数据库。
- en: Decorators are also heavily used in mocking in Python. Mocking allows you to
    create fake objects that simulate the behavior of real objects. This can be useful
    for testing code that relies on external resources, such as databases and web
    services.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器在Python中也被广泛用于模拟。模拟允许你创建假对象来模拟真实对象的行为。这对于测试依赖于外部资源的代码（如数据库和网络服务）非常有用。
- en: 'Step 2: Definition'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步：定义
- en: Have you noticed that after decorating a function with the `@` syntax, the decorated
    function is called using the name of the original function? This is what makes
    a function a decorator. If the original function, say `foo()`, is still available
    as `foo()`, and there is a new function, say `foo_changed()`, whose behavior is
    the changed behavior of `foo()`, *there is no decoration involved here*. So, decorating
    a function involves overwriting the original function. You can keep a copy of
    the original function under a new name, but the original function itself has been
    replaced by the decorated function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到，在用`@`语法装饰一个函数后，装饰过的函数是用原函数的名称来调用的？这就是使函数成为装饰器的原因。如果原函数，比如`foo()`，仍然可以作为`foo()`使用，并且有一个新的函数，比如`foo_changed()`，其行为是`foo()`的改变后的行为，*这里并没有涉及装饰*。因此，装饰一个函数涉及到覆盖原函数。你可以用一个新名称保留原函数的副本，但原函数本身已被装饰函数替代。
- en: Decorating involves overwriting the original function.
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 装饰涉及到覆盖原函数。
- en: 'It’s time to leave the world of abstraction and move to practicalities. Let’s
    create a simple decorator, called `scream()`, that makes functions scream:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候离开抽象的世界，转向实际操作了。让我们创建一个简单的装饰器，称为 `scream()`，使函数尖叫：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This decorator takes a callable (`func`) as input and returns a callable (`inner`).
    The inner function prints “SCREAM!!!” to the console before calling the original
    function (`func`). I gave up a docstring to make the code shorter, but in real
    work, you should definitely add docstrings to your decorators.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器接受一个可调用对象（`func`）作为输入，并返回一个可调用对象（`inner`）。`inner` 函数在调用原始函数（`func`）之前，会向控制台打印“SCREAM!!!”。为了简化代码，我放弃了文档字符串，但在实际工作中，你应该为装饰器添加文档字符串。
- en: In real work, you should definitely add docstrings to your decorators.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在实际工作中，你应该为装饰器添加文档字符串。
- en: 'Here is a breakdown of the `scream()` decorator line by line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `scream()` 装饰器逐行的解析：
- en: '`def scream(func: Callable) -> Callable:` → This is the function signature.
    The `scream()` decorator can be used to decorate any callable (`func`), and it
    returns a callable, too.¹'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`def scream(func: Callable) -> Callable:` → 这是函数签名。`scream()` 装饰器可以用于装饰任何可调用对象（`func`），并且它也返回一个可调用对象。¹'
- en: '`def inner(*args, **kwargs):` → This is the inner function. It prints “SCREAM!!!”;
    you can use whatever name you want, but I usually make it `inner`, like here.
    When decorating a function, you can use any parameters that the decorated function
    takes. For example, the `scream()` decorator can be used for any function, with
    any number of parameters of any types (hence the use of `*args, **kwargs`).'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`def inner(*args, **kwargs):` → 这是内层函数。它打印“SCREAM!!!”；你可以使用任何你想要的名字，但我通常使用
    `inner`，像这里一样。装饰函数时，你可以使用被装饰函数接受的任何参数。例如，`scream()` 装饰器可以用于任何函数，接受任何数量和类型的参数（因此使用了
    `*args, **kwargs`）。'
- en: '`print("SCREAM!!!")` → This is the new behavior, added to the original behavior
    of the decorated function. Whatever the function does, it will *first* scream
    (by printing `"SCREAM!!!"`), and then it will do what it was originally supposed
    to do. Note that in this decorator, the new behavior is added *before*, but it
    can be added *after*, both *before and after*,or even *instead* *of* the original
    behavior.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`print("SCREAM!!!")` → 这是添加到被装饰函数原始行为中的新行为。不管函数做什么，它将*首先*尖叫（通过打印“SCREAM!!!”），然后执行它最初应该做的事情。注意，在这个装饰器中，新行为是*之前*添加的，但它也可以*之后*添加，*之前和之后*都添加，甚至*代替*原始行为。'
- en: '`return func(*args, **kwargs)` → This is the original behavior of the function.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`return func(*args, **kwargs)` → 这是函数的原始行为。'
- en: '`return inner` → A standard line of any decorator: returning the `inner` function.
    This means that when the `scream()` decorator is used, it will replace the original
    function with the inner function.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`return inner` → 任何装饰器的标准行：返回 `inner` 函数。这意味着当 `scream()` 装饰器被使用时，它会用内层函数替换原始函数。'
- en: 'In Appendix 1, you will find two other version of the `scream()` decorator:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在附录 1 中，你会找到 `scream()` 装饰器的两个其他版本：
- en: 'Screaming two times: before and after the original behavior'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尖叫两次：在原始行为之前和之后
- en: Screaming instead of what the original function was supposed to do.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嚎叫代替了原始函数应该做的事情。
- en: 'Step 3: Use'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三步：使用
- en: To decorate a function, you can use a decorator in two ways. This subsection
    describes both of them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要装饰一个函数，你可以用两种方式使用装饰器。本小节描述了这两种方式。
- en: '*Method 1: Decorator used as* `*@decorator*`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法 1：将装饰器用作* `*@decorator*`'
- en: First, we need a function to decorate. Let’s use two functions to illustrate
    that you can use the same decorator for as many functions as you want or need,
    and for very different functions at that.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个要装饰的函数。让我们使用两个函数来说明你可以对任意多的函数使用相同的装饰器，并且这些函数可以非常不同。
- en: 'The first function we want to decorate is `foo()`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要装饰的第一个函数是 `foo()`：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we call this function, we will see the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用这个函数时，我们将看到以下输出：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is almost the easiest Python function: it takes no parameters and returns
    a string. This is the second function we want to decorate, `bar()`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是几乎最简单的 Python 函数：它不接受任何参数并返回一个字符串。这是我们想要装饰的第二个函数，`bar()`：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This function is more complex than `foo()`. It has three parameters: an integer
    `x`, a string `string`, and a callable `func`. It also accepts any additional
    keyword arguments. The function applies `func()` to each character in `string`
    and `x`, passing in the additional keyword arguments, if any. Finally, it returns
    a list of the results.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数比`foo()`复杂。它有三个参数：一个整数`x`、一个字符串`string`和一个可调用的`func`。它还接受任何额外的关键字参数。该函数将`func()`应用于`string`中的每个字符和`x`，如果有额外的关键字参数，也会传递进去。最后，它返回一个结果列表。
- en: 'A simple call can look like that:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的调用可能是这样的：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s change use a different callable for `func`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用不同的可调用对象作为`func`：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For our purposes, it doesn’t matter what `foo()` and `bar()` do. What’s important
    is that `foo()` is a very simple function, while `bar()` is more complex, despite
    being concise.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的来说，`foo()`和`bar()`的功能并不重要。重要的是`foo()`是一个非常简单的函数，而`bar()`虽然简洁但更复杂。
- en: 'We can decorate both functions using the decorator syntax, which is shown in
    the two lines starting with the `@` character. For the sake of completeness and
    clarity, I will show the full code, so I will repeat the functions’ code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用装饰器语法装饰这两个函数，这在以`@`字符开头的两行中显示。为了完整性和清晰性，我将展示完整代码，因此我会重复函数的代码：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s run both functions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这两个函数：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Method 2: Using a decorator as a* `*function()*`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法 2：将装饰器用作* `*function()*`'
- en: 'The most common way to use a decorator function is as a decorator. However,
    there is another way, which is less common:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用装饰器函数最常见的方式是作为装饰器。然而，还有一种不太常见的方式：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this way, you simply call the decorator function with the function to be
    decorated as an argument.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你只需将要装饰的函数作为参数调用装饰器函数。
- en: Irrespective of which method you use to apply the `scream()` decorator, when
    you run `foo()`, the decorated function will scream and then do what it was originally
    used to do.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用哪种方法来应用`scream()`装饰器，当你运行`foo()`时，装饰后的函数将会尖叫，然后做它最初要做的事情。
- en: Conclusion
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This article explains the basics of Python decorators. I have tried to be comprehensive,
    but there are still many intricacies of decorators that we have not discussed.
    We will explore these in future articles.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章解释了Python装饰器的基础知识。我尽力做到全面，但仍有许多装饰器的细节我们没有讨论。我们将在未来的文章中深入探讨这些问题。
- en: There are several reasons why it is important to learn about Python decorators,
    not only how to use them but also how to write new ones. First, decorators are
    a powerful tool that can help you write concise and readable code. If you know
    how to write custom decorators, you will often find that they can save you a lot
    of time and effort.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Python装饰器的重要性有几个原因，不仅仅是如何使用它们，还包括如何编写新的装饰器。首先，装饰器是一个强大的工具，可以帮助你编写简洁且易读的代码。如果你知道如何编写自定义装饰器，你会发现它们往往能为你节省大量时间和精力。
- en: Second, decorators can be used to quickly update legacy code. For example, if
    you need to change the behavior of a function or several functions, but revising
    the functions themselves is not an option, you can use a decorator instead. While
    it is always possible to rewrite the functions, if the changed behavior is the
    same for all of them, a single decorator may be sufficient.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，装饰器可以用来快速更新遗留代码。例如，如果你需要更改一个或多个函数的行为，但修订这些函数本身不可行，你可以使用装饰器。虽然总是可以重写这些函数，但如果所有函数的行为都是相同的，一个装饰器可能就足够了。
- en: Third, decorators are one of the most important syntactic sugar items in Python.
    If you do not understand them, you will likely be considered a Python beginner.
    I cannot imagine a Python developer who does not know how to use decorators, let
    alone understand them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，装饰器是Python中最重要的语法糖之一。如果你不理解它们，你可能会被认为是Python初学者。我无法想象一个不知道如何使用装饰器的Python开发者，更不用说理解它们了。
- en: Finally, decorators are very common in the Python code base. If you are not
    familiar with decorators, you will not be able to understand much of the existing
    code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，装饰器在Python代码库中非常常见。如果你不熟悉装饰器，你将无法理解许多现有的代码。
- en: Therefore, all intermediate and advanced Python developers should know the concept
    of decorators, understand how to use them, and be able to write them.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有中级和高级Python开发者应该了解装饰器的概念，理解如何使用它们，并能够编写它们。
- en: Although decorators may seem difficult at first glance, I believe that if you
    have read this article up to this point, you will agree that once you understand
    the basics, they are not such a big puzzle after all. In fact, they can be a rather
    simple and handy coding tool.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管装饰器乍看起来可能很复杂，但我相信如果你读到这篇文章的这个部分，你会同意一旦理解了基本原理，它们其实并不是那么复杂。事实上，它们可以是一个非常简单且实用的编码工具。
- en: Footnotes
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: '¹ For simplicity, I will use the term “decorator function” instead of “decorator
    callable.” However, please keep in mind that this is just a shorthand for decorators
    defined in both ways: as a function and as a class. I simply don’t want to overuse
    the word “callable,” even though it is frequently used in Python texts.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 为了简便起见，我将使用“装饰器函数”这一术语，而不是“装饰器可调用对象”。但请注意，这只是对以函数和类两种方式定义的装饰器的简写。我只是想避免过度使用“可调用对象”这个词，即使它在Python文本中经常出现。
- en: Appendices
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: 'Appendix 1: Two other versions of the `scream()` decorator'
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录1：`scream()`装饰器的两个其他版本
- en: '*Version 2: Scream before and after running the function*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*版本2：在运行函数之前和之后尖叫*'
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You would see the following output from `foo()` after decorating it with the
    above decorator:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到用上述装饰器装饰后的`foo()`的输出：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Version 3: Scream instead of running the function*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*版本3：尖叫代替运行函数*'
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以及：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This version of the `scream()` decorator completely overwrites the decorated
    function’s original behavior. The decorated function now only screams, and its
    original behavior is completely removed. This structure can be very useful in
    many different situations. For example, you could use it to totally silence a
    function:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的`scream()`装饰器完全覆盖了被装饰函数的原始行为。被装饰的函数现在只会尖叫，原始行为完全被移除。这种结构在许多不同情况下都非常有用。例如，你可以用它来完全静音一个函数：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can see an example of such a silencer in the code of the `[easycheck](https://pypi.org/project/easycheck/)`
    Python package:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`[easycheck](https://pypi.org/project/easycheck/)` Python包的代码中看到这种静音器的例子：
- en: '[](https://github.com/nyggus/easycheck/blob/master/easycheck/easycheck.py?source=post_page-----5bde06d2fb27--------------------------------)
    [## easycheck/easycheck/easycheck.py at master · nyggus/easycheck'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/nyggus/easycheck/blob/master/easycheck/easycheck.py?source=post_page-----5bde06d2fb27--------------------------------)
    [## easycheck/easycheck/easycheck.py在主分支 · nyggus/easycheck'
- en: A module offering Python functions for simple and readable assertion-like checks
    to be used inside code, but also in…
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个模块提供了Python函数用于简单且可读的断言式检查，可在代码内部以及其他地方使用…
- en: github.com](https://github.com/nyggus/easycheck/blob/master/easycheck/easycheck.py?source=post_page-----5bde06d2fb27--------------------------------)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/nyggus/easycheck/blob/master/easycheck/easycheck.py?source=post_page-----5bde06d2fb27--------------------------------)
- en: Look in this code for a `switch` function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中查找`switch`函数。
- en: 'You will also see there that you can stack decorators; here’s an example from
    the above `easycheck` library:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到，你可以堆叠装饰器；以下是来自上面`easycheck`库的一个例子：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will discuss such intricacies of decorators in future articles.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在未来的文章中讨论装饰器的这些细节。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)查看它们。如果你想加入Medium，请使用我下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----5bde06d2fb27--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----5bde06d2fb27--------------------------------)
    [## 使用我的推荐链接加入Medium - Marcin Kozak'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Marcin Kozak的每一个故事（以及Medium上的其他成千上万的作者）。你的会员费用直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----5bde06d2fb27--------------------------------)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@nyggus/membership?source=post_page-----5bde06d2fb27--------------------------------)
