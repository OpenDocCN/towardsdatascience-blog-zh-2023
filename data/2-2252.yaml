- en: Use LangChain’s Output Parser with ChatGPT for Structured Outputs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LangChain 的输出解析器与 ChatGPT 配合以获得结构化输出
- en: 原文：[https://towardsdatascience.com/use-langchains-output-parser-with-chatgpt-for-structured-outputs-cf536f692685](https://towardsdatascience.com/use-langchains-output-parser-with-chatgpt-for-structured-outputs-cf536f692685)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/use-langchains-output-parser-with-chatgpt-for-structured-outputs-cf536f692685](https://towardsdatascience.com/use-langchains-output-parser-with-chatgpt-for-structured-outputs-cf536f692685)
- en: Explained with an example use case.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用一个示例用例进行解释。
- en: '[](https://sonery.medium.com/?source=post_page-----cf536f692685--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----cf536f692685--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cf536f692685--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cf536f692685--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----cf536f692685--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://sonery.medium.com/?source=post_page-----cf536f692685--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----cf536f692685--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cf536f692685--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cf536f692685--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----cf536f692685--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cf536f692685--------------------------------)
    ·6 min read·Jun 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cf536f692685--------------------------------)
    ·6 分钟阅读·2023年6月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/54a0133f94d54e24a9aacf811a4d7d6b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/54a0133f94d54e24a9aacf811a4d7d6b.png)'
- en: Photo by [Dmitry Ratushny](https://unsplash.com/@ratushny?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/wpi3sDUrSEk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Dmitry Ratushny](https://unsplash.com/@ratushny?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/wpi3sDUrSEk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: ChatGPT and many other LLMs have led the way for creating LLM-based applications
    in different domains. These models are extremely powerful at processing text inputs
    and creating text outputs based on your queries. However, they’re not designed
    as a development framework.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 和许多其他 LLM 在创建基于 LLM 的应用程序方面引领了潮流。这些模型在处理文本输入和根据你的查询生成文本输出方面非常强大。然而，它们并不是作为开发框架而设计的。
- en: LangChain is an open-source development framework for applications that use
    large language models (LLMs). It provides abstractions in the form of components
    to use LLMs in a more efficient or programmatic way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain 是一个开源开发框架，用于使用大型语言模型 (LLMs) 的应用程序。它提供了以组件形式的抽象，帮助以更高效或程序化的方式使用 LLM。
- en: 'These components are:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件包括：
- en: 'Models: ChatGPT or other LLMs'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型：ChatGPT 或其他 LLM
- en: 'Prompts: Prompt templates and output parsers'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示：提示模板和输出解析器
- en: 'Indexes: Ingests external data such as document loaders and vector stores'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引：摄取外部数据，如文档加载器和向量存储
- en: 'Chains: Combines components to create end-to-end use cases. An example of a
    simple chain can be Prompt + LLM + Output Parser'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链：组合组件以创建端到端的用例。一个简单链的示例可以是 提示 + LLM + 输出解析器
- en: 'Agents: Makes LLMs use external tools'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理：使 LLM 使用外部工具
- en: The main idea behind LangChain is to chain multiple components together to extend
    the abilities of LLM and create more functional tools, or applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain 的主要思想是将多个组件串联在一起，以扩展 LLM 的功能并创建更实用的工具或应用程序。
- en: '![](../Images/78e994de6821ff11587da8f189e06901.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78e994de6821ff11587da8f189e06901.png)'
- en: (image by author)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （图像由作者提供）
- en: The developers of LangChain keep adding new features at a very rapid pace. It
    changes the way we interact with LLMs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain 的开发者不断以非常快速的速度添加新功能。这改变了我们与 LLM 交互的方式。
- en: In this article, we will go through an example use case to demonstrate how using
    output parsers with prompt templates helps getting more structured output from
    LLMs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将通过一个示例用例演示如何使用输出解析器和提示模板帮助从 LLM 中获取更结构化的输出。
- en: We’ll first do the example using only a prompt template and LLM. Then we’ll
    do the same example but adding an output parser.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用仅一个提示模板和 LLM 进行示例。然后，我们将添加一个输出解析器来做同样的示例。
- en: Prompt template + LLM
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示模板 + LLM
- en: Prompt template and an LLM is the simplest chain you can create with LangChain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 提示模板和 LLM 是你可以使用 LangChain 创建的最简单的链。
- en: Using a prompt template has many advantages over manually customizing prompts
    with f-strings. It allows for reusing prompts when applicable. Also, LangChain
    provides ready-to-use templates for common tasks such as querying a database.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提示模板相比于手动自定义带有 f-strings 的提示有许多优势。它允许在适用时重用提示。此外，LangChain 提供了可直接使用的模板，适用于查询数据库等常见任务。
- en: We’ll use OpenAI’s ChatGPT as our LLM so we need to set up an API key.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 OpenAI 的 ChatGPT 作为我们的 LLM，因此我们需要设置一个 API 密钥。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For this code to work and set up the API key, you need to create an environment
    variable named OPENAI_API_KEY, which holds the API key you obtained from the [API
    Keys](https://platform.openai.com/account/api-keys) menu on OpenAI website.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这段代码正常工作并设置 API 密钥，你需要创建一个名为 OPENAI_API_KEY 的环境变量，该变量保存你从 [API Keys](https://platform.openai.com/account/api-keys)
    菜单中获得的 API 密钥。
- en: Let’s start with creating a model. `ChatOpenAI` is LangChain’s abstraction for
    ChatGPT API endpoint.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个模型。`ChatOpenAI` 是 LangChain 对 ChatGPT API 端点的抽象。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, LangChain creates the chat model with a temperature value of 0.7\.
    The `temperature` parameter adjusts the randomness of the output. Higher values
    like 0.7 will make the output more random, while lower values like 0.2 will make
    it more focused and deterministic. We can set its value when creating the model
    instance.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，LangChain 创建的聊天模型的温度值为 0.7。`temperature` 参数用于调整输出的随机性。像 0.7 这样的较高值会使输出更加随机，而像
    0.2 这样的较低值则会使输出更加集中和确定。我们可以在创建模型实例时设置其值。
- en: The next step is to create the prompt template. We’ll create a template for
    extracting information from product reviews.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建提示模板。我们将创建一个用于从产品评论中提取信息的模板。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The code snippet above creates a prompt template from the given prompt string.
    The review is saved as an input variable, which can be checked using the `input_variables`
    attribute:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段从给定的提示字符串中创建了一个提示模板。评论作为输入变量保存，可以通过 `input_variables` 属性进行检查：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can now create an actual prompt using this template and a product review.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个模板和产品评价创建一个实际的提示。
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `messages` is a Python list that contains the actual prompt. We can see
    the prompt using `messages[0].content` , which outputs the following prompt:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`messages` 是一个 Python 列表，包含实际的提示。我们可以通过 `messages[0].content` 查看提示，它会输出以下提示：'
- en: 'For the following review, extract the following information:'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于以下评论，提取以下信息：
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'recommended: Does the buyer recommend the product Answer True if yes, False
    if not or unknown.'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'recommended: 买家是否推荐该产品。如果是，则回答 True；如果不是或未知，则回答 False。'
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'delivery_days: How many days did it take for the product to arrive? If this
    information is not found, output -1.'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'delivery_days: 产品到达用了多少天？如果没有找到此信息，输出 -1。'
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'setup: Extract any sentences about the setup of the product.'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'setup: 提取关于产品设置的任何句子。'
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Format the output as JSON with the following keys: recommended delivery_days
    setup'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将输出格式化为 JSON，键包括：recommended delivery_days setup
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'review: I got this product to plug my internet based phone for work from home
    (Avaya desktop phone). It works! It arrived in 5 days, which was earlier than
    the estimated delivery date. The setup was EXTREMELY easy. At completion, I plugged
    the phone into the extender’s ethernet port and made a few phone calls which all
    worked perfectly with complete clarity. VERY happy with this purchase since a
    cordless headset is around $250 (which I would have needed since the phone had
    to be at the ethernet port on the wall). I recommend this product!'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'review: 我购买了这个产品来连接我的互联网电话用于在家工作（Avaya 桌面电话）。它有效！它在 5 天内到达，比预计的交货日期还要早。设置非常简单。完成后，我将电话插入扩展器的以太网端口，并进行了几次电话，所有电话都完全清晰地正常工作。对这次购买非常满意，因为一个无线耳机大约
    $250（我本来需要的，因为电话必须放在墙上的以太网端口上）。我推荐这个产品！'
- en: 'We have the model and prompt ready. The next step is to query the model using
    the prompt:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了模型和提示。下一步是使用提示查询模型：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Although the `response` looks like a JSON, it is a string, which makes it difficult
    to parse.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 `response` 看起来像 JSON，但它是一个字符串，这使得解析变得困难。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’ll now learn how to use an output parser together with the prompt template
    to make it easier to parse the output.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何将输出解析器与提示模板一起使用，以便更容易解析输出。
- en: Prompt template + LLM + Output Parser
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示模板 + LLM + 输出解析器
- en: The output parser is added to the prompt by using the `format_instructions`
    . Let’s go over the process step-by-step.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `format_instructions` 将输出解析器添加到提示中。让我们逐步了解这个过程。
- en: 'The first step is to import the required modules and define a `ResponseSchema`
    for each piece of information to be extracted:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是导入所需的模块，并为每个需要提取的信息定义一个`ResponseSchema`：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next step is to create the output parser and format instructions using
    these schemas:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建输出解析器并使用这些模式来格式化指令：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We’ll now create the prompt template as we did before. When creating the actual
    prompt, we’ll pass in the `format_instructions` parameter:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像之前一样创建提示模板。在创建实际的提示时，我们将传入`format_instructions`参数：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s use our new prompt to query the model.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用我们新的提示来查询模型。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We used the `parse` method for parsing output. The type of the `output_dict`
    is dictionary, which is much easier than a string to parse. We can extract a particular
    piece of information using the `get` method.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`parse`方法来解析输出。`output_dict`的类型是字典，比字符串更容易解析。我们可以使用`get`方法提取特定的信息。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Final words
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的话
- en: You may argue that we can use the built-in `json` module to parse string into
    a JSON file and it’s a simple process using the `loads` method. You’re correct!
    It’s easier than creating an output parser and implementing it into a prompt template.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会争辩说，我们可以使用内置的`json`模块将字符串解析为JSON文件，并且使用`loads`方法是一个简单的过程。你说得对！这比创建一个输出解析器并将其实现到提示模板中要简单。
- en: However, there are more complex cases where an output parser simplifies the
    process in a way that cannot be simply done with the built-in `json` module. Also,
    output parser provides additional benefits when working with longer chains with
    different types of modules.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一些更复杂的情况，其中输出解析器简化了这个过程，而这种简化是内置的`json`模块无法做到的。此外，在处理包含不同类型模块的较长链时，输出解析器还提供了额外的好处。
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以成为* [*Medium会员*](https://sonery.medium.com/membership) *以解锁我所有的写作内容，并且可以访问Medium上的其他内容。如果你已经是会员了，别忘了*
    [*订阅*](https://sonery.medium.com/subscribe) *，如果你希望在我发布新文章时收到电子邮件通知。*'
- en: Thank you for reading. Please let me know if you have any feedback.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你有任何反馈，请告诉我。
