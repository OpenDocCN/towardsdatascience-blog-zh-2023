- en: 'The dynamic lot-size model: A mixed-integer programming approach'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态批量模型：一种混合整数编程方法
- en: 原文：[https://towardsdatascience.com/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e?source=collection_archive---------8-----------------------#2023-02-01](https://towardsdatascience.com/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e?source=collection_archive---------8-----------------------#2023-02-01)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e?source=collection_archive---------8-----------------------#2023-02-01](https://towardsdatascience.com/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e?source=collection_archive---------8-----------------------#2023-02-01)
- en: The classical inventory management optimization problem solved in Python using
    Pyomo
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经典库存管理优化问题，使用 Python 和 Pyomo 解决
- en: '[](https://medium.com/@bruscalia12?source=post_page-----4a9440ba124e--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----4a9440ba124e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4a9440ba124e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4a9440ba124e--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----4a9440ba124e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page-----4a9440ba124e--------------------------------)[![布鲁诺·斯卡利亚
    C. F. 莱特](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page-----4a9440ba124e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4a9440ba124e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4a9440ba124e--------------------------------)
    [布鲁诺·斯卡利亚 C. F. 莱特](https://medium.com/@bruscalia12?source=post_page-----4a9440ba124e--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----4a9440ba124e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4a9440ba124e--------------------------------)
    ·7 min read·Feb 1, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4a9440ba124e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----4a9440ba124e---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3ce9b7482ef0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=post_page-3ce9b7482ef0----4a9440ba124e---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4a9440ba124e--------------------------------)
    · 7 分钟阅读 · 2023年2月1日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F4a9440ba124e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e&user=Bruno+Scalia+C.+F.+Leite&userId=3ce9b7482ef0&source=-----4a9440ba124e---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4a9440ba124e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e&source=-----4a9440ba124e---------------------bookmark_footer-----------)![](../Images/180753602572ed69a63534bd608ac8c3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F4a9440ba124e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e&source=-----4a9440ba124e---------------------bookmark_footer-----------)![](../Images/180753602572ed69a63534bd608ac8c3.png)'
- en: Photo by [CHUTTERSNAP](https://unsplash.com/ko/@chuttersnap?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [CHUTTERSNAP](https://unsplash.com/ko/@chuttersnap?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Lot sizing problems are production planning problems with setups between production
    lots. By reason of these setups, it is often too costly to produce a given product
    in every period (Suwondo & Yuliando, 2012). In contrast, fewer setups are associated
    with higher holding inventory costs. Therefore, to obtain optimal costs, one should
    balance these operational aspects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 批量定制问题是具有生产批次之间设置的生产计划问题。由于这些设置，通常在每个周期内生产给定产品的成本过高（Suwondo & Yuliando, 2012）。相比之下，较少的设置与更高的持有库存成本相关。因此，为了获得最佳成本，需要平衡这些操作方面。
- en: Throughout this article, the problem proposed by Wagner & Whitin (1958) will
    be implemented using a mixed-integer programming approach. To do so, the Python
    library [*pyomo*](http://www.pyomo.org/) (Bynum et al., 2021) will be used with
    the [CBC solver](https://github.com/coin-or/Cbc). Personally, I find this problem
    extremely useful to introduce notions of inventory management in discrete planning
    horizons for numerical optimization, which is ubiquitous in more complex problems.
    Notice that, in their original work, Wagner & Whitin (1958) developed an exact
    algorithm for solving this problem, which differs from the approach herein adopted.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，Wagner & Whitin（1958）提出的问题将使用混合整数规划方法进行实现。为此，将使用Python库[*pyomo*](http://www.pyomo.org/)（Bynum等，2021）和[CBC求解器](https://github.com/coin-or/Cbc)。个人而言，我发现这个问题对于介绍离散规划中的库存管理概念非常有用，这在更复杂的问题中随处可见。请注意，在他们的原始工作中，Wagner
    & Whitin（1958）开发了一种求解该问题的精确算法，这与这里采用的方法有所不同。
- en: You can find the notebook with the complete implementation of the problem [here](https://github.com/bruscalia/optimization-demo-files/blob/main/mip/dynamic_lot_size/notebooks/dynamic_lot_size.ipynb).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://github.com/bruscalia/optimization-demo-files/blob/main/mip/dynamic_lot_size/notebooks/dynamic_lot_size.ipynb)找到包含问题完整实现的笔记本。
- en: If you are unfamiliar with numerical optimization and/or mixed-integer programming,
    you might want to see this introduction on the subject beforehand.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对数值优化和/或混合整数规划不熟悉，你可能需要先查看这个关于该主题的介绍。
- en: '[](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4a9440ba124e--------------------------------)
    [## An introduction to mixed-integer linear programming: The knapsack problem'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4a9440ba124e--------------------------------)
    [## 混合整数线性规划简介：背包问题'
- en: Learn how to solve optimization problems in Python using scipy and pyomo
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何使用scipy和pyomo在Python中解决优化问题
- en: towardsdatascience.com](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4a9440ba124e--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/an-introduction-to-mixed-integer-linear-programming-the-knapsack-problem-1445452a9fe9?source=post_page-----4a9440ba124e--------------------------------)
- en: Problem statement
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题陈述
- en: Suppose that, for a given horizon *T* of instants *t*, you can predict demands
    *d* for a given product for each *t*. Furthermore, consider you can predict setup
    costs *s* and inventory holding costs *h* for each time instant. If any amount
    of a product is produced in a given time *t*, the corresponding setup cost *s*
    should be incurred. Also, at the end of each period, holding inventory costs should
    be incurred, which correspond to *h* times the final inventory at *t*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在给定的时间范围*T*内，你可以预测每个时间点*t*的给定产品的需求*d*。此外，假设你可以预测每个时间点的设置成本*s*和库存持有成本*h*。如果在某个时间点*t*生产了任何数量的产品，则应发生相应的设置成本*s*。此外，在每个周期结束时，应产生持有库存成本，对应于*h*乘以*t*的期末库存。
- en: If the problem is uncapacitated, as considered in Wagner & Whitin (1958), one
    can state that every demand should be met. Moreover, consider that unitary production
    costs are not time-dependent, although small changes in the problem structure
    might easily introduce these costs. Your goal is to determine how many units of
    the product are produced at each instant so that we minimize setup and holding
    inventory costs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题是非限制性的，如Wagner & Whitin（1958）所考虑的，可以认为每个需求都应得到满足。此外，假设单位生产成本与时间无关，尽管问题结构的微小变化可能会轻易引入这些成本。你的目标是确定每一时刻生产多少单位的产品，以便最小化设置和持有库存成本。
- en: I will describe each modeling component in detail in the next section, but the
    complete optimization problem considered can be summarized by the following equations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一节中详细描述每个建模组件，但可以通过以下方程总结所考虑的完整优化问题。
- en: '![](../Images/8727d6deb1bb984be18f52f7da79c238.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8727d6deb1bb984be18f52f7da79c238.png)'
- en: Dynamic lot-size model as a mixed-integer programming problem. (Image by the
    author).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 动态批量模型作为混合整数规划问题。 (图片由作者提供)。
- en: Modeling
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建模
- en: 'Let us start by importing the Python libraries used:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们导入所使用的 Python 库：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And now, let us instantiate the dataset as in the example of the original article
    (Wagner & Whitin, 1958).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照原始文章（Wagner & Whitin, 1958）中的示例来实例化数据集。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we are using Pyomo in this example, we must first instantiate the *pyomo*
    model. In this example, I chose to use the *ConcreteModel* approach as I find
    it more straightforward for simple problems. Alternatively, one could have used
    an *AbstractModel*. Both are described in more detail [here](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这个示例中使用了 Pyomo，我们必须首先实例化 *pyomo* 模型。在这个示例中，我选择使用 *ConcreteModel* 方法，因为我发现它对于简单问题更直接。或者，也可以使用
    *AbstractModel*。这两种方法在[这里](https://pyomo.readthedocs.io/en/stable/pyomo_overview/abstract_concrete.html)有更详细的描述。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The only *Set* considered in this problem is the planning horizon *T*. Let us
    instantiate it as a pyomo object.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题中，唯一被考虑的*集合*是计划时间范围 *T*。让我们将其实例化为一个 pyomo 对象。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will instantiate model parameters imported from the problem dataset.
    They are the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实例化从问题数据集中导入的模型参数。它们如下：
- en: '*d*: demand at each time *t*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*d*：每个时间 *t* 的需求'
- en: '*s*: setup cost each time *t*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*s*：每个时间 *t* 的设定成本'
- en: '*h*: holding inventory cost at each time *t*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*h*：每个时间 *t* 的持有库存成本'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And the decision variables:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以及决策变量：
- en: '*x*: product amount produced at each time *t*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x*：每个时间 *t* 生产的产品数量'
- en: '*y*: binary variable that marks setup costs at each time *t*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y*：二进制变量，标记每个时间 *t* 的设定成本'
- en: '*I*: final inventory at each time *t*'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*I*：每个时间 *t* 的最终库存'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The inventory balance constraint states that the inventory at the end of a period
    *t* is equal to the inventory at the end of the previous period plus the amount
    produced minus the demand at that given period. We consider here the initial inventory
    as equal to zero.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 库存平衡约束表示在某一时期 *t* 的库存等于前一时期末的库存加上生产量减去该时期的需求。我们在这里假设初始库存为零。
- en: '![](../Images/e7a4cf4a6f1a54b0f2d61417bdeb512d.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7a4cf4a6f1a54b0f2d61417bdeb512d.png)'
- en: Inventory balance constraint. (Image by the author).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 库存平衡约束。 (图片由作者提供)。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now let us formulate the *big M* constraint to identify periods with setup costs.
    Our intention is that *y* should be 1 if any amount of the product is produced
    at time *t* and 0 otherwise.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们制定 *big M* 约束以识别具有设定成本的时期。我们的目的是，如果在时间 *t* 生产了任何数量的产品，则 *y* 应为 1，否则为 0。
- en: '![](../Images/030ad1874dbcc877a86b657446f09037.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/030ad1874dbcc877a86b657446f09037.png)'
- en: Big M constraint. (Image by the author).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大 M 约束。 (图片由作者提供)。
- en: In general, you might want to choose the smallest value of *M* that is large
    enough to avoid removing feasible solutions from the integer decision space. This
    might produce better *best-bound* values during the *branch-and-bound algorithm*
    than choosing arbitrarily large values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可能会想选择一个足够大的 *M* 值，以避免从整数决策空间中去除可行解。这样可以在 *分支定界算法* 中产生更好的 *best-bound* 值，而不是选择任意大的值。
- en: 'In this problem, it only makes sense to produce a certain demand lot *d* at
    time *t-n*, if holding inventory costs from time *t-n* to *t* are lesser than
    or equal to setup costs at *t*. So we can calculate the “maximum intelligent production”
    at an instant *t* by the following lines:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题中，只有在持有库存成本从时间 *t-n* 到 *t* 小于或等于 *t* 时的设定成本时，才有意义在时间 *t-n* 生产一定需求量 *d*。因此，我们可以通过以下几行计算某一时刻
    *t* 的“最大智能生产”：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And now we can define a proper *M* value for each time period and instantiate
    the *big M* constraint.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为每个时间段定义一个合适的 *M* 值，并实例化 *big M* 约束。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At last, the objective function sums all holding inventory and setup costs in
    the planning horizon.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，目标函数将计划时间范围内所有持有库存和设定成本相加。
- en: '![](../Images/8637397fe41ec00c915e6c8d32f25b2d.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8637397fe41ec00c915e6c8d32f25b2d.png)'
- en: Objective function. (Image by the author).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数。 (图片由作者提供)。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To solve the model I used the open-source solver CBC. You can download CBC binaries
    from [AMPL](https://ampl.com/products/solvers/open-source-solvers/#cbc) or from
    [this link](https://www.coin-or.org/download/binary/Cbc/). You can also find an
    installation tutorial [here](https://github.com/coin-or/Cbc). As the CBC executable
    is included in the PATH variable of my system, I can instantiate the solver without
    specifying the path to an executable file. If yours is not, parse the keyword
    argument “executable” with the path to your executable file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决模型，我使用了开源求解器 CBC。你可以从 [AMPL](https://ampl.com/products/solvers/open-source-solvers/#cbc)
    或 [这个链接](https://www.coin-or.org/download/binary/Cbc/) 下载 CBC 二进制文件。你还可以在 [这里](https://github.com/coin-or/Cbc)
    找到安装教程。由于 CBC 可执行文件已包含在我的系统 PATH 变量中，我可以在不指定可执行文件路径的情况下实例化求解器。如果你的系统没有包含，可通过关键字参数“executable”解析到你的可执行文件路径。
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Alternatively, one could have used GLPK to solve this problem (or any other
    solver compatible with *pyomo*). The latest available GLPK version can be found
    [here](http://ftp.gnu.org/gnu/glpk/) and the Windows executable files can be found
    [here](https://sourceforge.net/projects/winglpk/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，也可以使用 GLPK 来解决这个问题（或任何其他与*pyomo*兼容的求解器）。最新的 GLPK 版本可以在 [这里](http://ftp.gnu.org/gnu/glpk/)
    找到，Windows 可执行文件可以在 [这里](https://sourceforge.net/projects/winglpk/) 找到。
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: And we are done! The results are stored in our model and will be analyzed in
    detail in the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！结果已存储在我们的模型中，并将在下一节中详细分析。
- en: Results
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: First, let us print the naive scenario costs, in which every demand should be
    produced in its corresponding instant.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们打印简单场景的成本，其中每个需求都应该在其对应的瞬时生产。
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Which should return 1234.0.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回 1234.0。
- en: 'Next, let us obtain the new costs from the objective function and compare the
    results:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们从目标函数中获取新的成本并比较结果：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wow! The new cost is 864.0 and savings are almost 30%!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！新的成本是 864.0，节省了近 30%！
- en: 'Let us include new columns in the dataset and plot production versus demand
    to visualize the results better:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在数据集中添加新列，并绘制生产与需求的关系，以便更好地可视化结果：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/f0c7b2c6d90e6b5a2f35c81f75a2e86e.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0c7b2c6d90e6b5a2f35c81f75a2e86e.png)'
- en: Planning horizon results. (Image by the author).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 计划期结果。（图像由作者提供）。
- en: One can notice that, except for instant 10, which holds a single demand, other
    demands were combined in the same production instants so that the overall setup
    costs were significantly reduced.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以注意到，除了瞬时 10（其只有一个需求）之外，其他需求被组合在同一生产瞬时，以显著减少整体设置成本。
- en: Conclusions
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, the dynamic lot-size model (Wagner & Whitin, 1958) was formulated
    and solved as a mixed-integer programming problem. Compared to a naive solution,
    the optimization results would reduce overall costs by 30%. In this scenario,
    holding inventory and setup costs are adequately balanced. The complete solutions
    are available in this [git repository](https://github.com/bruscalia/optimization-demo-files/blob/main/mip/dynamic_lot_size/notebooks/dynamic_lot_size.ipynb).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，动态批量模型（Wagner & Whitin, 1958）被形式化并解决为一个混合整数规划问题。与简单的解决方案相比，优化结果可以将总体成本减少30%。在这种情况下，库存持有和设置成本得到了合理平衡。完整的解决方案可以在这个
    [git 仓库](https://github.com/bruscalia/optimization-demo-files/blob/main/mip/dynamic_lot_size/notebooks/dynamic_lot_size.ipynb)
    中找到。
- en: Further reading
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Those interested in more details about integer programming can refer to Wolsey
    (2020); for operations research, Winston & Goldberg (2004).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对整数规划有更多兴趣的人可以参考 Wolsey (2020)；有关运筹学的内容，可以参考 Winston & Goldberg (2004)。
- en: The Branch & Bound algorithm is the most used in the solution of integer and
    mixed-integer problems. Those interested in an introduction to its mechanisms
    can refer to my previous [Medium article](/a-gentle-introduction-to-branch-bound-d00a4ee1cad).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 分支限界算法是解决整数和混合整数问题中最常用的算法。有兴趣了解其机制的读者可以参考我之前的 [Medium 文章](/a-gentle-introduction-to-branch-bound-d00a4ee1cad)。
- en: References
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Bynum, M. L. et al., 2021\. *Pyomo-optimization modeling in python.* Springer.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Bynum, M. L. 等，2021。*Pyomo-optimization modeling in python.* Springer。
- en: 'Suwondo, E., & Yuliando, H. (2012). Dynamic lot-sizing problems: a review on
    model and efficient algorithm. *Agroindustrial journal*, *1*(1), 36.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Suwondo, E., & Yuliando, H. (2012). 动态批量问题：关于模型和高效算法的综述。*农业工业期刊*, *1*(1), 36。
- en: Wagner, H. M., & Whitin, T. M. (1958). Dynamic version of the economic lot size
    model. *Management science*, *5*(1), 89–96.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Wagner, H. M., & Whitin, T. M. (1958). 动态版本的经济批量模型。*管理科学*, *5*(1), 89–96。
- en: 'Winston, W. L. & Goldberg, J. B., 2004\. *Operations research: applications
    and algorithms.* 4th ed. Belmont, CA: Thomson Brooks/Cole Belmont.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Winston, W. L. & Goldberg, J. B., 2004\. *运筹学：应用与算法.* 第4版. 加州贝尔蒙特：汤姆森·布鲁克斯/科尔贝尔蒙特。
- en: Wolsey, L. A., 2020\. *Integer Programming.* 2nd ed. John Wiley & Sons.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Wolsey, L. A., 2020\. *整数规划.* 第2版. 约翰·威利与儿子公司。
