- en: 'Learning Python for Data Science On-the-Job, Part 2: Practice'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学中的Python学习 实战第2部分：练习
- en: 原文：[https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-2-practice-b4ece80488da](https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-2-practice-b4ece80488da)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-2-practice-b4ece80488da](https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-2-practice-b4ece80488da)
- en: A side-by-side case study of linear regression in Excel and Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Excel和Python中线性回归的并行案例研究
- en: '[](https://nrlewis929.medium.com/?source=post_page-----b4ece80488da--------------------------------)[![Nicholas
    Lewis](../Images/e1a473d6da5f4ae1cc569f30b08acde3.png)](https://nrlewis929.medium.com/?source=post_page-----b4ece80488da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b4ece80488da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b4ece80488da--------------------------------)
    [Nicholas Lewis](https://nrlewis929.medium.com/?source=post_page-----b4ece80488da--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://nrlewis929.medium.com/?source=post_page-----b4ece80488da--------------------------------)[![Nicholas
    Lewis](../Images/e1a473d6da5f4ae1cc569f30b08acde3.png)](https://nrlewis929.medium.com/?source=post_page-----b4ece80488da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b4ece80488da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b4ece80488da--------------------------------)
    [Nicholas Lewis](https://nrlewis929.medium.com/?source=post_page-----b4ece80488da--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b4ece80488da--------------------------------)
    ·10 min read·Jan 15, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b4ece80488da--------------------------------)
    ·10分钟阅读·2023年1月15日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7fe25f9ef78a62d00f5ba0f71a4fd54b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7fe25f9ef78a62d00f5ba0f71a4fd54b.png)'
- en: Photo by [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Welcome to Part 2 of this series of articles about learning Python and Data
    Science on-the-job, or without formal education. [Part 1](https://medium.com/towards-data-science/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041)
    talked about some of my experience over the past 10 years of learning both on-the-job
    and in formal education settings. If you’re interested in philosophy of learning
    and some ideas for how to motivate yourself to get started, feel free to check
    it out. Or if you’re like me and learn best by doing concrete examples hands-on,
    read on!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读这系列关于在工作中或没有正式教育背景下学习Python和数据科学的文章的第2部分。[第1部分](https://medium.com/towards-data-science/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041)讲述了我过去10年在工作中和正式教育环境中学习的经历。如果你对学习的哲学和一些激励自己开始学习的想法感兴趣，可以看看这篇文章。或者，如果你像我一样通过实际操作具体例子来学习，继续阅读吧！
- en: Problem Formulation
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题定义
- en: The files for this can all be found on my [Github](https://github.com/nrlewis929/excel_python_side-by-side).
    However, I’d encourage you to do this completely from scratch by following along
    with the code blocks and screenshots provided here.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有相关文件可以在我的 [Github](https://github.com/nrlewis929/excel_python_side-by-side)
    上找到。不过，我建议你完全从头开始，按照这里提供的代码块和截图进行操作。
- en: 'For this case study, we’ll perform a simple linear regression. We have two
    categories of input data, and based on the inputs, we want to train a linear model
    to predict an output, based on actual observed data. In the `data.csv` file, these
    inputs are called `x1` and `x2`, and the observed data are called `y`. The model
    will be in the form of Ax1 + Bx2 + C = y. You may notice that x2 = x1². This is
    intentional, and as you progress in data science, you may want to keep this little
    trick handy: you can create additional inputs into models by simply squaring or
    taking the log of already existing inputs (inputs are more commonly referred to
    as features in data science).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例研究中，我们将进行一个简单的线性回归。我们有两类输入数据，基于这些输入，我们希望训练一个线性模型来预测一个输出，基于实际观察到的数据。在 `data.csv`
    文件中，这些输入被称为 `x1` 和 `x2`，观察到的数据被称为 `y`。模型的形式为 Ax1 + Bx2 + C = y。你可能会注意到 x2 = x1²。这是有意为之的，随着你在数据科学中的进步，你可能会想要记住这个小技巧：你可以通过简单地平方或取已有输入的对数来创建额外的输入（在数据科学中，输入通常被称为特征）。
- en: Setup
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: To start, open both an Excel spreadsheet and a Jupyter notebook. Normally, you
    might start by copying and pasting the raw data immediately to the Excel file,
    but for this particular problem, we’re going to do something first that mirrors
    what you’ll commonly do in Python. You will need the solver add-in to solve this
    problem. If you’ve never used the solver add-in, follow the instructions [here](https://support.microsoft.com/en-us/office/load-the-solver-add-in-in-excel-612926fc-d53b-46b4-872c-e24772f078ca).
    Enabling the add-in gives you additional functionality within Excel that doesn’t
    come standard.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开 Excel 电子表格和 Jupyter notebook。通常，你可能会开始将原始数据直接复制并粘贴到 Excel 文件中，但对于这个特定的问题，我们首先要做一些类似于你在
    Python 中常做的事情。你需要求解器加载项来解决这个问题。如果你从未使用过求解器加载项，请按照[这里](https://support.microsoft.com/en-us/office/load-the-solver-add-in-in-excel-612926fc-d53b-46b4-872c-e24772f078ca)的说明进行操作。启用加载项为
    Excel 提供了额外的功能，而这些功能不是标准配置的一部分。
- en: While you rarely do this in Excel, you will almost always do something similar
    in Python. Enabling additional functionality is done by importing libraries, or
    behind-the-scenes code that enable you to execute more powerful and efficient
    commands in Python. You do this by typing the line `import [library_name].` This
    tells Python that you will be using the specified library. You can optionally
    give the library a shortened name. For example, you can say `import pandas as
    pd`. Any time you use some functionality from the `pandas` library, you can simply
    type `pd` instead of `pandas`. While you could name the library anything you want,
    you will quickly note that most packages have common abbreviations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Excel 中你很少这样做，但在 Python 中你几乎总会做类似的事情。启用额外功能是通过导入库或幕后代码来实现的，这些代码允许你在 Python
    中执行更强大和高效的命令。你可以通过输入 `import [library_name]` 来实现。这告诉 Python 你将使用指定的库。你可以选择为库起一个缩短的名字。例如，你可以说
    `import pandas as pd`。每次使用 `pandas` 库的某些功能时，你可以直接输入 `pd` 代替 `pandas`。虽然你可以给库起任何名字，但你会很快发现大多数包都有常见的缩写。
- en: 'Many libraries come pre-installed when you download Python, just as Excel already
    has buttons that allow you to make plots or perform mathematical functions. You
    will likely have no problems importing `pandas` (for data manipulation) and `matplotlib`
    (for plotting). You may need to [pip install](https://scikit-learn.org/stable/install.html)
    the `scikit-learn` (or `sklearn`) library, though, just as you had to do some
    special work to get the Excel solver add-in (`sklearn` is coincidentally going
    to be used in a similar capacity for this exercise as the Excel solver add-in).
    Your first block of code should look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多库在你下载 Python 时已经预装，就像 Excel 已经有按钮允许你制作图表或执行数学函数一样。你可能不会在导入 `pandas`（用于数据处理）和
    `matplotlib`（用于绘图）时遇到问题。不过，你可能需要[使用 pip 安装](https://scikit-learn.org/stable/install.html)
    `scikit-learn`（或 `sklearn`）库，就像你需要做一些特别的工作来获取 Excel 求解器加载项一样（巧合的是，`sklearn` 在这个练习中将以类似于
    Excel 求解器加载项的方式使用）。你的第一段代码应如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The line from `sklearn` looks a little different. That’s because `sklearn`
    is a vast library (take a look around their website and documentation), and we
    will only use a small fraction of it. So what we’re telling Python in that line
    is to import only that special functionality from scikit-learn, not all of it.
    It may be a rabbit hole, but note that the following code blocks do the same thing:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 `sklearn` 的这一行代码看起来有些不同。这是因为 `sklearn` 是一个庞大的库（可以查看他们的网站和文档），而我们只会使用其中的一小部分。因此，我们在这一行代码中告诉
    Python 只从 scikit-learn 中导入那部分特殊功能，而不是全部。可能会是一个无尽的坑，但请注意，以下代码块做了相同的事情：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Loading Data
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据
- en: 'That’s a lot of work to get things set up, compared to Excel, but it’s one
    of the elements that makes Python so much more versatile. Now, you’ll load your
    data into your program. In Excel, you can simply copy and paste from the `data.csv`
    file. In Python, you can load it as a dataframe (think of an Excel sheet on steroids).
    Your next line of code should be:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于 Excel，设置这些内容需要做很多工作，但这正是让 Python 更加多才多艺的因素之一。现在，你将数据加载到你的程序中。在 Excel 中，你可以直接从
    `data.csv` 文件中复制并粘贴。在 Python 中，你可以将其加载为数据框（想象成一个超级增强的 Excel 表格）。你的下一行代码应如下所示：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This line tells pandas to read the values in the `data.csv` file and store them
    in the `df` (short for dataframe) variable. You should make sure that the `data.csv`
    file is in the same directory as your Jupyter notebook, otherwise you will have
    to specify the path to the file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码告诉 pandas 读取 `data.csv` 文件中的值，并将其存储在 `df`（数据框的缩写）变量中。你应该确保 `data.csv` 文件在与你的
    Jupyter notebook 相同的目录中，否则你需要指定文件的路径。
- en: You may be frustrated that you don’t actually see what’s going on with each
    line of code. As visual creatures, this is perhaps a drawback of programming.
    However, as you are scripting code, you can readily display outputs. For example,
    type `df` and execute it (press ctrl+enter) in a new code block and see what happens.
    Then try `df.head()`. Finally, try `df.head(3)`. What do you notice about each
    one? This is where the versatility and efficiency of coding starts to show up
    in comparison to using spreadsheets. The code is minimalistic but powerful, and
    as soon as you get past the barrier of lack of initial visualization, you may
    find coding far preferable. As a side note, you’ll also appreciate it much more
    when you start dealing with datasets that have millions of entries; running operations
    on these datasets in Excel really bogs it down, while coding continues to run
    smoothly (until you get really big datasets).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对无法实际看到每行代码的运行情况感到沮丧。作为视觉生物，这也许是编程的一个缺陷。然而，当你编写代码时，你可以方便地显示输出。例如，在一个新的代码块中输入
    `df` 并执行（按 ctrl+enter），看看会发生什么。然后尝试 `df.head()`。最后，尝试 `df.head(3)`。你注意到每个的区别了吗？这就是编码相对于使用电子表格的灵活性和效率的体现。代码简洁而强大，一旦你克服了初始可视化的障碍，你可能会发现编码更为可取。顺便提一句，当你开始处理包含数百万条记录的数据集时，你会更加感激它；在
    Excel 中对这些数据集进行操作真的会让它变得非常缓慢，而编码则能保持流畅（直到你处理非常大的数据集）。
- en: Model Setup
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型设置
- en: We’ve been moving pretty slowly so far, but hopefully this next portion really
    highlights the advantages, verstality, and speed of coding in comparison to spreadsheets.
    Let’s walk through the problem setup in Excel first, then see how we can do the
    same thing in just a few lines of Python code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的进展相当缓慢，但希望接下来的部分能真正突出编码相对于电子表格的优势、灵活性和速度。让我们先通过 Excel 进行问题设置，然后看看如何用仅几行
    Python 代码做到同样的事情。
- en: In Excel, we’ll find the coefficients for our model by setting up a sum of squares
    system. Create a new box of cells to track coefficients, and make a guess value
    of the coefficients. You can probably set the guesses all to 1 to start, but sometimes
    your guess does have a great effect on the outcome (Python is more convenient
    and doesn’t require you to provide an initial guess, although it does give you
    the option). Then program a new column of cells with your model, as seen in the
    screenshot, to make a model prediction.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Excel 中，我们将通过设置平方和系统来找到模型的系数。创建一个新的单元格框来跟踪系数，并对系数做一个猜测值。你可以将所有猜测值初始设置为 1，但有时你的猜测确实对结果有很大影响（Python
    更方便，不需要提供初始猜测，虽然它提供了这个选项）。然后，按照截图中的模型编程新列单元格，以进行模型预测。
- en: '![](../Images/3b5218b66b67c220da09622d94153a52.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b5218b66b67c220da09622d94153a52.png)'
- en: Screenshot of how to program the prediction column. Image by author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 预测列编程的截图。图片由作者提供
- en: Finally, generate a new column, called the “squared error” column, calculated
    as shown below. The final step before opening up Solver is to sum all of the squared
    errors — hence the “sum of squares” objective, also referred to as the l2-norm.
    (You can do this by going to cell E23 and typing the formula =SUM(E2:E22).)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，生成一个新列，称为“平方误差”列，按照下面所示进行计算。在打开 Solver 之前的最后一步是求出所有平方误差的总和——因此叫做“平方和”目标，也称为
    l2-范数。（你可以通过转到 E23 单元格并输入公式 =SUM(E2:E22) 来完成此操作。）
- en: '![](../Images/255c737980819bd5abb6ed8fd1fdd68c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/255c737980819bd5abb6ed8fd1fdd68c.png)'
- en: Screenshot of formula to calculate the squared error. Image by author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 计算平方误差的公式截图。图片由作者提供
- en: 'We finally have the problem set up. I don’t know your proficiency in Excel
    or if you’ve used Solver before, but the point of going about the exercise this
    way is to show you how much simpler this process is in Python. This isn’t a tutorial
    on Excel Solver, linear regression, or why sum of squares works (although I could
    go into that!) so I’m not going to go into any more details here. We can get everything
    set up in Python in just 3 lines:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于完成了问题设置。我不知道你在 Excel 中的熟练程度或你是否使用过 Solver，但以这种方式进行练习的目的是展示在 Python 中这个过程有多么简单。这不是关于
    Excel Solver、线性回归或平方和为何有效的教程（尽管我可以讨论这些！），所以我不会在这里深入细节。我们可以用仅 3 行代码在 Python 中完成所有设置：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Model Solution
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型解决方案
- en: Let’s take a step back and remember what we’re after (we’re so close!). We want
    to develop a model that allows us to predict a value `y` based on two input features,
    `x1` and `x2`. We hypothesized that the model was a linear regression, in the
    form Ax1 + Bx2 + C = y. It seems like we’ve taken a roundabout way to do that,
    but we’re one step away. In Excel, open up the Solver dialog box, and fill it
    out as follows (make sure especially that the checkbox constraining to positive
    values is unchecked). Run the program, and you’ll see it all change on your screen.
    You will see your values of A, B, and C in the corresponding cells.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们退一步，记住我们要做什么（我们已经很接近了！）。我们想开发一个模型，允许我们基于两个输入特征 `x1` 和 `x2` 预测一个值 `y`。我们假设模型是线性回归，形式为
    Ax1 + Bx2 + C = y。看起来我们走了一条绕路的路，但我们只差一步。在 Excel 中，打开 Solver 对话框，并按如下方式填写（特别注意确保未选中限制为正值的复选框）。运行程序，你会看到屏幕上的所有变化。你会在对应的单元格中看到你的
    A、B 和 C 值。
- en: '![](../Images/0f40ac58af1bb9abe28ecff2d2c260b2.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f40ac58af1bb9abe28ecff2d2c260b2.png)'
- en: Screenshot of boxes to fill out before pressing “Solve.” Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完表格后再按“解决”的截图。图片由作者提供。
- en: 'We’ll come back to that yellow box and show something similar in Python. But
    to set up the problem in Python, you can do all this work by writing a single
    line of code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回到那个黄色框，展示类似的内容在 Python 中。但为了在 Python 中设置问题，你只需写一行代码即可完成所有工作：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Again, the most noticeable difference is you don’t *see* anything different
    in Python. But you actually already have the solution. If you dig into the documentation,
    you’ll find out that you actually can output the values. For a linear regression,
    you can find them by a few print statements, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，最明显的区别是你在 Python 中看不到任何不同的内容。但你实际上已经有了解决方案。如果你深入文档，你会发现你实际上可以输出这些值。对于线性回归，你可以通过几个打印语句找到这些值，如下所示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your values should match! So real quick, back to that yellow box. It’s basically
    asking if your A, B, and C coefficients should all be positive. Sometimes that’s
    important to do, especially if you’re modeling a system that has real physical
    meaning and the coefficients are constrained by natural phenomena to be positive.
    If you poke around the documentation for scikit-learn’s `LinearRegression`, you’ll
    discover that you can pass an argument when you initialize the model to do the
    same thing. It looks like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你的值应该匹配！所以迅速回到那个黄色框。它基本上是在问你的 A、B 和 C 系数是否都应该是正数。有时这很重要，特别是当你建模的系统有真实物理意义且系数受到自然现象限制为正数时。如果你在
    scikit-learn 的 `LinearRegression` 文档中找找，你会发现你可以在初始化模型时传递一个参数来做同样的事情。它看起来是这样的：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The point of that detour is to show you one of the most unintuitive things
    about programming: the options are there, you just have to find them! There’s
    no easy visual checkbox like in Excel, but they’re there! The default value that
    it tells you in the documentation is comparable to whether the box is checked
    or unchecked in Excel when you open up Solver.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 绕道的重点是展示编程中最不直观的事情之一：选项是存在的，你只需要找到它们！没有像 Excel 中那样简单的可视化复选框，但它们确实存在！文档中告诉你的默认值类似于在打开
    Solver 时复选框是否被选中的情况。
- en: Model Predictions
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型预测
- en: Great, so now we have a working model. How do we make predictions? Let’s say
    we want to know the predicted value for x1 = 0.65 and x2 = 0.65² = 0.4225\. In
    Excel, you need to put the values in some new cells, then program the equation
    into another cell to get the answer, just like in the screenshot below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们有了一个有效的模型。我们怎么进行预测呢？假设我们想知道 x1 = 0.65 和 x2 = 0.65² = 0.4225 的预测值。在 Excel
    中，你需要把这些值放在一些新的单元格中，然后将方程编程到另一个单元格中以获得答案，就像下面的截图一样。
- en: '![](../Images/1657b56de4cc78ce36ae34db660ca83c.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1657b56de4cc78ce36ae34db660ca83c.png)'
- en: Programming new cells to generate a prediction on new data. Note that the cells
    with coefficient values have been given unique names (discussed later). Image
    by author.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编程新的单元格以生成新数据的预测。注意，系数值的单元格已被赋予唯一的名称（稍后讨论）。图片由作者提供。
- en: 'In Python, you can do the exact same thing by typing the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以通过输入以下代码来做完全相同的事情：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This probably looks a little more tedious, since we have to type variable names.
    But here’s another interesting little fact: did you know that you can give Excel
    cells unique variable names? It’s the same as defining a Python variable, and
    then using it in a future equation. Google “excel give cell a variable name” or
    something similar, then you can rewrite your equation like you see in the screenshot.
    I almost never do this in practice, but since this article is all about comparing
    Excel to Python, hopefully this gives you a better sense of what you’re doing.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有点繁琐，因为我们必须输入变量名。但这里有一个有趣的小事实：你知道你可以给Excel单元格唯一的变量名吗？这与定义Python变量并在未来的公式中使用它是一样的。谷歌搜索“excel给单元格命名变量”或类似内容，然后你可以像截图中看到的那样重写你的公式。我几乎在实践中从不这样做，但由于这篇文章是关于将Excel与Python进行比较的，希望这能给你一个更好的理解。
- en: Plotting Results
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘图结果
- en: Here is an area where Excel may seem much better than Python, but that’s only
    because there’s a user interface to interact with. To make customizations in Python,
    you have to type a line of code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一领域，Excel可能看起来比Python要好很多，但那只是因为它有一个用户界面可以互动。要在Python中进行自定义，你必须输入一行代码。
- en: I won’t go through how to make a plot in Excel — you’re likely plenty competent
    in that. In Python, we’ll use matplotlib, but be aware that there are many other
    options to explore, such as plotly, seaborn, and altair. I think it’s time to
    turn you loose, so I won’t walk through every line of this code. Instead, take
    this as an exercise for you to try and understand what each line does. Then, look
    at the documentation, and see if you can change some of the inputs to make the
    plot your own!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会讲解如何在Excel中绘图——你可能对此已经很熟练了。在Python中，我们将使用matplotlib，但要注意，还有许多其他选项可以探索，如plotly、seaborn和altair。我想是时候让你自己动手了，所以我不会逐行讲解这段代码。相反，把它当作一个练习，试着理解每一行的作用。然后，查看文档，看看是否可以更改一些输入，使图形成为你自己的！
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: You made it! One of your first full codes, starting from scratch and finishing
    with usable results, is under your belt. Hopefully you got a lot of insight into
    how to learn programming, without wasting time on a 4 hour tutorial that goes
    in one ear and out the other. The cool thing is that this activity, which maybe
    took longer than you’d like, will be something you can whip out in 5 minutes within
    a month or two. It took me less time to develop the whole thing in both Excel
    and Python than it takes to read this article
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你做到了！你完成了其中一个完整的代码，从零开始并最终得到可用的结果。希望你从中获得了很多关于如何学习编程的见解，而不是浪费时间在一个4小时的教程上，那种教程通常只是听过就忘。很酷的一点是，这项活动，虽然可能比你期望的时间要长，但在一两个月内你可以在5分钟内轻松完成。开发整个过程在Excel和Python中都花的时间比阅读这篇文章要少。
- en: 'If I could summarize what I anticipate the biggest struggle will be, it’s this:
    we are visual creatures, and programming isn’t visual. Excel is easy, because
    there are buttons and a graphical user interface to deal with. You have to create
    visualizations on-the-fly with programming. As you’re learning, you can never
    go wrong with extra `print` statements, data plots, data tables, etc. Even as
    a more advanced programmer, you may still find yourself going through new data
    in Excel to get a quick feel for it. That’s totally fine! However, I hope you,
    like me, end up having a strong preference for doing things in Python — not only
    because it’s more powerful and versatile, but even because it becomes *easier*!'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我可以总结一下我预期的最大挑战，那就是：我们是视觉动物，而编程却不是视觉的。Excel很简单，因为有按钮和图形用户界面可供操作。你必须通过编程即时创建可视化图形。在学习过程中，额外的`print`语句、数据图表、数据表格等都不会出错。即使是更高级的程序员，你可能仍然会发现自己在Excel中浏览新数据以快速了解它。这是完全正常的！然而，我希望你像我一样，最终更倾向于使用Python——不仅因为它更强大和多功能，还因为它变得*更简单*！
- en: As always, you can connect with me on [LinkedIn](https://www.linkedin.com/in/nicholas-lewis-0366146b/),
    and feel free to follow me on [Towards Data Science](https://nrlewis929.medium.com/)
    to see my regular posts on data science case studies. I’d be happy to hear if
    some types of post are more useful or interesting than others. Until next time!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，你可以通过[LinkedIn](https://www.linkedin.com/in/nicholas-lewis-0366146b/)与我联系，也可以在[Towards
    Data Science](https://nrlewis929.medium.com/)上关注我，查看我关于数据科学案例研究的定期帖子。如果有些帖子类型比其他帖子更有用或更有趣，我很乐意听到。下次见！
