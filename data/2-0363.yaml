- en: Become Fluent in Python Decorators via Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过可视化掌握 Python 装饰器
- en: 原文：[https://towardsdatascience.com/become-fluent-in-python-decorators-via-visualization-4cc6ac06f2cb](https://towardsdatascience.com/become-fluent-in-python-decorators-via-visualization-4cc6ac06f2cb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/become-fluent-in-python-decorators-via-visualization-4cc6ac06f2cb](https://towardsdatascience.com/become-fluent-in-python-decorators-via-visualization-4cc6ac06f2cb)
- en: Comprehend Python Decorators By Visualization
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过可视化理解 Python 装饰器
- en: '[](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)
    ·7 min read·Jan 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)
    ·阅读时间 7 分钟·2023 年 1 月 23 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c44b22b6f30e95008253cc13f75711a4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c44b22b6f30e95008253cc13f75711a4.png)'
- en: Photo by [Huyen Bui](https://unsplash.com/ja/@huyenbui30?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/vM9R9uu_BKY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Huyen Bui](https://unsplash.com/ja/@huyenbui30?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/vM9R9uu_BKY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Python decorator is syntactic sugar. You can achieve everything without explicitly
    using the decorator. However, Using the decorator can help your code be more concise
    and readable. Ultimately, you write fewer lines of code by leveraging Python decorators.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 装饰器是语法糖。你可以在不显式使用装饰器的情况下实现所有功能。然而，使用装饰器可以使你的代码更加简洁和可读。最终，通过利用 Python
    装饰器，你可以写更少的代码行数。
- en: Nevertheless, Python decorator isn't a trivial concept to comprehend. Understanding
    Python decorators requires building blocks, including closure, function as an
    object, and deep knowledge of how Python code is executed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，理解 Python 装饰器并不是一个简单的概念。理解 Python 装饰器需要构建块，包括闭包、函数作为对象，以及对 Python 代码执行方式的深刻理解。
- en: Many online resources talk about Python decorators, but many tutorials only
    provide some sample code walkthroughs. Reading sample code could help to get a
    basic understanding of Python decorator. When it comes time to implement your
    decorator, we might still need clarification and clarity about the decorator concept
    and yet have to refer to the online resource to refresh our memory for detail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多在线资源讨论了 Python 装饰器，但许多教程只提供了一些示例代码的演示。阅读示例代码可以帮助你对 Python 装饰器有一个基本的理解。当需要实现你的装饰器时，我们可能仍然需要对装饰器概念有更清晰的理解，并且还需要参考在线资源以便详细回顾。
- en: Reading code sometimes doesn't deepen memory but seeing images does. In this
    article, I want to help you understand Python decorator with some visualization
    and fun examples.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读代码有时并不会加深记忆，但看到图像却会有所帮助。在这篇文章中，我想通过一些可视化和有趣的示例来帮助你理解 Python 装饰器。
- en: Python Functions are Objects
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 函数是对象
- en: '![](../Images/5005c7b57120ec09d984c5e80f8e5eb6.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5005c7b57120ec09d984c5e80f8e5eb6.png)'
- en: Python Functions are Objects | Image by Author
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数是对象 | 图片作者
- en: 'If we went to Python programming 101 class, we might get a drawing like this.
    We defined a variable, a representational name used to reference an object. The
    variable `foo` points to an object at a given time. It can be a list `[1,2,3,4]`
    , it can be a dictionary `[“city”: “New York”]`, or it can a string `“I like dumplings”`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们参加了 Python 编程基础课程，我们可能会看到这样的图示。我们定义了一个变量，这是一个用来引用对象的表示性名称。变量 `foo` 在某一时刻指向一个对象。它可以是一个列表
    `[1,2,3,4]`，也可以是一个字典 `[“city”: “New York”]`，或者是一个字符串 `“I like dumplings”`'
- en: A less covered discussed topic in Python is that the variable `foo` can also
    point to a function `add()` . When the variable refers to a function, the `foo`
    can pass around the same way you used other types like int, str, list, or dict.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中一个较少讨论的话题是变量 `foo` 也可以指向函数 `add()`。当变量引用一个函数时，`foo` 可以像使用 int、str、list
    或 dict 等其他类型一样传递。
- en: What does that mean I can pass `foo` around? **This unlocks us to pass a function
    as an argument. Furthermore, we can return a function as a return type**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这意味着我可以传递 `foo` 吗？**这使我们能够将函数作为参数传递。此外，我们还可以将函数作为返回类型返回。**
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Code walkthrough**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码讲解**'
- en: '**Function Definition**: we defined three functions called `add` which adds
    two objects; `I_am_1()` which simply returns number 1; `return_1` which return
    the function `I_am_1`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数定义**：我们定义了三个函数，分别是 `add`，用于加两个对象；`I_am_1()`，简单返回数字 1；`return_1`，返回函数 `I_am_1`'
- en: '**Interesting Fact**: Then we point to another variable `foo` to it. To prove
    that function is an object like the other types, we can even remove the original
    function reference named `add` . The rest of the code is still runnable due to
    `foo` refers to the object for the function.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有趣的事实**：然后我们将其指向另一个变量 `foo`。为了证明函数像其他类型一样是对象，我们甚至可以移除原始函数引用 `add`。其余代码仍然可以运行，因为
    `foo` 引用的是函数的对象。'
- en: '**Result Explain**: `return_1()()` looks wired at first. If we take a closer
    look, it is the same way as we are calling the function, `return_1()` is `I_am_1`
    as it just returns this function. In this case, we can think `return_1()()=1`mentally,
    so it does not surprise us the `foo(1,2)` gives an output of 3\. We can also pass
    `foo(1,2)` to another function. In this case, we passed it to itself. Since `foo(1,2)=3`
    , the outer function will operate as `foo(3,3)` . To get the result, we can pass
    the entire function with its arguments over and let the program execute at runtime
    to decipher everything.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果解释**：`return_1()()` 起初看起来有些奇怪。如果我们仔细观察，它实际上是调用函数的方式，`return_1()` 就是 `I_am_1`，因为它只是返回这个函数。在这种情况下，我们可以将
    `return_1()()=1` 理解为心里活动，因此 `foo(1,2)` 得到 3 的输出也就不足为奇了。我们还可以将 `foo(1,2)` 传递给另一个函数。在这种情况下，我们将其传递给了它自己。由于
    `foo(1,2)=3`，外部函数将作为 `foo(3,3)` 操作。为了得到结果，我们可以将整个函数及其参数传递，并让程序在运行时执行以解读所有内容。'
- en: '**Code Visualisation**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码可视化**'
- en: '![](../Images/1b5c4e5630701aa221fbaedd63d6d7ff.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b5c4e5630701aa221fbaedd63d6d7ff.png)'
- en: Pass Function to another Function | Image By Author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数传递给另一个函数 | 图片作者
- en: Python Decorators Structure
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 装饰器结构
- en: 'A Python decorator transforms the functionality of the original object without
    modifying the original one. It is syntax sugar that allows users to extend the
    object''s ability more conveniently instead of duplicating some existing code.
    Decorators are a pythonic implementation of the [decorator design pattern](http://en.wikipedia.org/wiki/Decorator_pattern)
    (Note: python decorator isn''t precisely the same as decorator design pattern).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python 装饰器在不修改原始对象的情况下，转换原始对象的功能。它是一种语法糖，使用户可以更方便地扩展对象的能力，而不是重复一些现有的代码。装饰器是
    [装饰器设计模式](http://en.wikipedia.org/wiki/Decorator_pattern) 的 Python 实现（注意：Python
    装饰器与装饰器设计模式并不完全相同）。
- en: 'We have discussed that we can return a function as a return type.Now, we extend
    that idea to demonstrate how a decorator works: **we can return a function as
    a return type within another function.**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了可以将函数作为返回类型返回。现在，我们扩展这个概念，演示装饰器如何工作：**我们可以在另一个函数内将函数作为返回类型返回。**
- en: To make our example more fun, we can create our decorator like a wrapper around
    a function and later stacks the multiple decorators.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的示例更有趣，我们可以创建一个装饰器，像一个函数的包装器，然后堆叠多个装饰器。
- en: Let's first define our functions and use the example of making some dumplings.
    🥟🥟🥟
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先定义我们的函数，并以制作一些饺子为例。🥟🥟🥟
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Code walkthrough**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码讲解**'
- en: '**Function Definition**: we defined three functions called `add_filling_vegetable`,
    `add_dumplings_wrapper`, and `dumplings` . Within `add_filling_vegetable` and
    `add_dumplings_wrapper`, we define a wrapper function that wraps around the original
    function passed as an argument. Additionally, we can do additional things. In
    this case, we print some text before and after the original function. If the original
    function also defined parameters, we can pass them in from the wrapper function.
    We also leverage the magic `*args` and `**kwargs` to be more flexible'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数定义**：我们定义了三个函数，分别是 `add_filling_vegetable`、`add_dumplings_wrapper` 和 `dumplings`。在
    `add_filling_vegetable` 和 `add_dumplings_wrapper` 中，我们定义了一个包装函数，该函数包裹在作为参数传递的原始函数周围。此外，我们可以做其他的事情。在这种情况下，我们在原始函数之前和之后打印一些文本。如果原始函数还定义了参数，我们可以通过包装函数传递它们。我们还利用了魔法
    `*args` 和 `**kwargs` 来提高灵活性。'
- en: '**Result Explain**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果解释**'
- en: 'we can call the default ingredients for `meat` by using the default one `add_dumplings_wrapper(add_filling_vegetable(dumplings))()`
    , we can see the function are chaining together. It''s not readable, which we
    will fix shortly with decorator syntax. The core idea here is that we keep passing
    the function object as an argument to another. The function does two things: 1)
    continue doing the unmodified original function; 2) execute additional code. The
    execution of the entire code is like a round trip.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用默认的 `add_dumplings_wrapper(add_filling_vegetable(dumplings))()` 来调用默认的成分
    `meat`，我们可以看到函数是链式调用的。这不易读，我们将很快用装饰器语法来修复它。这里的核心思想是我们不断将函数对象作为参数传递给另一个函数。这个函数做了两件事：1)
    继续执行未修改的原始函数；2) 执行附加的代码。整个代码的执行就像是一个往返旅行。
- en: '![](../Images/bef2eccb094b8a80cbf6f137f7804084.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bef2eccb094b8a80cbf6f137f7804084.png)'
- en: '`add_dumplings_wrapper(add_filling_vegetable(dumplings))() | Image By Author`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_dumplings_wrapper(add_filling_vegetable(dumplings))() | 图片由作者提供`'
- en: 2\. for `add_dumplings_wrapper(add_filling_vegetable(dumplings))(ingredients=’tofu’)`
    it changes the default ingredients from `meat` to `tofu` by passing an additional
    argument. In this case, `*args` and `**kwargs` is very useful for resolving the
    complexity. The wrapper functions don't have to unwrap to know the context of
    the argument. As a decorator, it is safe to pass down the actual function without
    modifying them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 对于 `add_dumplings_wrapper(add_filling_vegetable(dumplings))(ingredients=’tofu’)`，它通过传递额外的参数将默认成分从
    `meat` 改为 `tofu`。在这种情况下，`*args` 和 `**kwargs` 对于解决复杂性非常有用。包装器函数不需要解包以了解参数的上下文。作为一个装饰器，它可以安全地传递实际函数而不需要修改它们。
- en: '![](../Images/f9310b64980d7273c4f08cb100cf7f6f.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f9310b64980d7273c4f08cb100cf7f6f.png)'
- en: '`add_dumplings_wrapper(add_filling_vegetable(dumplings))(ingredients=’tofu’)`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_dumplings_wrapper(add_filling_vegetable(dumplings))(ingredients=’tofu’)`'
- en: So far, we haven’t touched the decorator syntax yet. Let’s make a small change
    in how we define the original function and call it `fancy_dumplings`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有触及装饰器语法。让我们对原始函数的定义做一个小改变，称其为 `fancy_dumplings`。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now decorator simplifies how we call all the functions and makes it more readable.
    We only need to call `fancy_dumplings` only once. it is much cleaner visually
    than nesting multiple functions horizontally.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在装饰器简化了我们调用所有函数的方式，使其更具可读性。我们只需要调用一次`fancy_dumplings`。这比水平嵌套多个函数在视觉上要干净得多。
- en: What can I use decorators for?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我可以用装饰器做什么呢？
- en: Great! How to create the Python decorators are clear to us now. What can I use
    decorators for?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们清楚了如何创建 Python 装饰器。我可以用装饰器做什么呢？
- en: There are many potential practical use cases for Python decorators. It makes
    your code easier to read and dynamically. *Note you don’t necessarily need to
    go decorators. We can always implement a wrapper around another function to achieve
    the same goal.* ***The decorator is just syntactic sugar****.*
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python 装饰器有许多潜在的实际应用场景。它使你的代码更易读且更具动态性。*请注意，你不一定需要使用装饰器。我们总是可以在另一个函数周围实现一个包装器来达到相同的目的。*
    ***装饰器只是语法糖***。
- en: You can build your time decorator to evaluate the performance for a given function.
    The following is a timer example from [Primer on Python Decorators](https://realpython.com/primer-on-python-decorators/#a-few-real-world-examples)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构建一个时间装饰器来评估给定函数的性能。以下是来自 [Python 装饰器入门](https://realpython.com/primer-on-python-decorators/#a-few-real-world-examples)
    的一个计时器示例。
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It measures the time to execute a given function. Let’s stack it with our dumplings
    example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它测量执行给定函数的时间。让我们将其与我们的饺子示例结合起来。
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can keep stacking the decorators to achieve your goal by simply calling
    the original function without worrying about wrapping other functions around when
    calling, as we have provided the sequence of the decorator when we define the
    original function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以继续堆叠装饰器来实现你的目标，只需简单地调用原始函数，无需担心在调用时包装其他函数，因为我们在定义原始函数时已经提供了装饰器的顺序。
- en: '![](../Images/d99170ba9040d4b0cb7d30c8879e8e77.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d99170ba9040d4b0cb7d30c8879e8e77.png)'
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/IiEFmIXZWSw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Markus Spiske](https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，发布在[Unsplash](https://unsplash.com/photos/IiEFmIXZWSw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)上。
- en: Final Thoughts
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的想法
- en: There are many possibilities you can leverage the Python decorators. Essentially,
    it’s a wrapper to alert the behavior of the original function. It depends on your
    perspective to judge how practical the decorator is, but it shouldn't be a syntax
    that feels foreign to you. I hope with some visualization, the concept of decorators
    becomes more straightforward to understand. Please let me know if you have any
    comments on this story.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以利用 Python 装饰器的许多可能性。本质上，它是一个包装器，用于改变原始函数的行为。装饰器的实用性取决于你的观点，但它不应是让你感到陌生的语法。希望通过一些可视化，装饰器的概念变得更容易理解。如果你对这个故事有任何评论，请告诉我。
- en: 'I hope this story is helpful to you. This article is **part of a series** of
    my engineering & data science stories that currently consist of the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个故事对你有帮助。本文是**我的工程与数据科学故事系列的一部分**，目前包括以下内容：
- en: '![Chengzhi Zhao](../Images/51b8d26809e870b4733e4e5b6d982a9f.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Chengzhi Zhao](../Images/51b8d26809e870b4733e4e5b6d982a9f.png)'
- en: '[Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)'
- en: Data Engineering & Data Science Stories
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据工程与数据科学故事
- en: '[View list](https://chengzhizhao.medium.com/list/data-engineering-data-science-stories-ddab37f718e7?source=post_page-----4cc6ac06f2cb--------------------------------)53
    stories![](../Images/8b5085966553259eef85cc643e6907fa.png)![](../Images/9dcdca1fc00a5694849b2c6f36f038d4.png)![](../Images/2a6b2af56aa4d87fa1c30407e49c78f7.png)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://chengzhizhao.medium.com/list/data-engineering-data-science-stories-ddab37f718e7?source=post_page-----4cc6ac06f2cb--------------------------------)53个故事![](../Images/8b5085966553259eef85cc643e6907fa.png)![](../Images/9dcdca1fc00a5694849b2c6f36f038d4.png)![](../Images/2a6b2af56aa4d87fa1c30407e49c78f7.png)'
- en: You can also [**subscribe to my new articles**](https://chengzhizhao.medium.com/subscribe)
    or become a [**referred Medium member**](https://chengzhizhao.medium.com/membership)who
    gets unlimited access to all the stories on Medium.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以[**订阅我的新文章**](https://chengzhizhao.medium.com/subscribe)或成为[**推荐的 Medium
    会员**](https://chengzhizhao.medium.com/membership)，享受对 Medium 上所有故事的无限访问权限。
- en: In case of questions/comments, **do not hesitate to write in the comments**
    of this story or **reach me directly** through [Linkedin](https://www.linkedin.com/in/chengzhizhao/)
    or [Twitter](https://twitter.com/ChengzhiZhao).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如有疑问/评论，**请随时在本文评论中写下**，或通过[Linkedin](https://www.linkedin.com/in/chengzhizhao/)或[Twitter](https://twitter.com/ChengzhiZhao)直接联系我。
