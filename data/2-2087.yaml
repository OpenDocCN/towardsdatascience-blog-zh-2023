- en: The World of SQL Query Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 查询优化的世界
- en: 原文：[https://towardsdatascience.com/the-world-of-sql-query-optimization-e1d5b5fef20d](https://towardsdatascience.com/the-world-of-sql-query-optimization-e1d5b5fef20d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-world-of-sql-query-optimization-e1d5b5fef20d](https://towardsdatascience.com/the-world-of-sql-query-optimization-e1d5b5fef20d)
- en: '![](../Images/83a4adc3c26c7145297a344045db80f7.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83a4adc3c26c7145297a344045db80f7.png)'
- en: Photo by [Jake Blucker](https://unsplash.com/@jakeblucker?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Jake Blucker](https://unsplash.com/@jakeblucker?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上。
- en: DATA ENGINEERING
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据工程
- en: A peek into the different query optimizers and how they work
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一窥不同的查询优化器及其工作原理
- en: '[](https://kovidrathee.medium.com/?source=post_page-----e1d5b5fef20d--------------------------------)[![Kovid
    Rathee](../Images/2bad5143febe95d28d0cf19698c5c976.png)](https://kovidrathee.medium.com/?source=post_page-----e1d5b5fef20d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e1d5b5fef20d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e1d5b5fef20d--------------------------------)
    [Kovid Rathee](https://kovidrathee.medium.com/?source=post_page-----e1d5b5fef20d--------------------------------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://kovidrathee.medium.com/?source=post_page-----e1d5b5fef20d--------------------------------)[![Kovid
    Rathee](../Images/2bad5143febe95d28d0cf19698c5c976.png)](https://kovidrathee.medium.com/?source=post_page-----e1d5b5fef20d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e1d5b5fef20d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e1d5b5fef20d--------------------------------)
    [Kovid Rathee](https://kovidrathee.medium.com/?source=post_page-----e1d5b5fef20d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e1d5b5fef20d--------------------------------)
    ·6 min read·Mar 27, 2023
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----e1d5b5fef20d--------------------------------)
    ·6分钟阅读·2023年3月27日
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: SQL is a simple language with very few rules, which is what makes it so popular.
    It is also enriched with a great number of keywords and features that allow you
    to interact with your data in all kinds of ways. With this flexibility comes a
    lot of variance in query writing styles and choices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 是一种简单的语言，规则非常少，这使得它如此受欢迎。它还具有大量的关键字和功能，让你以各种方式与数据进行交互。随着这种灵活性，查询编写风格和选择也会有很大的差异。
- en: Once you issue a query to your database, it has to parse your query to understand
    its flow, but that’s not where the work of the database ends. The database engine
    also has a component to look at your query and, in a sense, rewrite it without
    changing what it does at all to allow for better performance and response times.
    This mighty component, unsurprisingly, is called the **query optimizer**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你向数据库发出查询，它必须解析你的查询以理解其流程，但这并不是数据库工作的结束。数据库引擎还有一个组件用于查看你的查询，并在不改变其功能的情况下，进行重写，以实现更好的性能和响应时间。这个强大的组件，毫不意外，被称为**查询优化器**。
- en: 'But how would the optimizer rewrite the query? What source of extra information
    does it have to act on the query? These are the questions that when answered,
    classify different types of query optimizers. Broadly speaking, there are **four
    kinds of query optimization techniques**, as mentioned below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是优化器如何重写查询呢？它有哪些额外的信息来源来处理查询？这些问题的答案可以将不同类型的查询优化器进行分类。广义上说，以下提到的有**四种查询优化技术**：
- en: '**Heuristics-based optimization** acts based on pre-defined rules in the database,
    for instance, giving priority to a clustered index.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于启发式的优化**根据数据库中预定义的规则进行操作，例如，优先使用聚集索引。'
- en: '**Cost-based optimization** works based on query cost estimation, including
    estimating the cost of resources the query might use.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于成本的优化**根据查询成本估算来工作，包括估算查询可能使用的资源成本。'
- en: '**Hybrid optimization** uses both heuristics-based and cost-based optimization
    techniques. *Most relational databases use this technique.*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合优化**结合了基于启发式的方法和基于成本的方法。*大多数关系数据库使用这种技术*。'
- en: '**Adaptive optimization** is distinct from all the above techniques in that
    it changes the query execution plan while the query is executing. This is quite
    useful in distributed systems.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自适应优化**与上述所有技术不同，它在查询执行过程中改变查询执行计划。这在分布式系统中非常有用。'
- en: In the second year of my computer sciences degree, back in 2008, when I was
    studying database management systems, although I did have an affinity towards
    databases, I didn’t actually realize till much later how much query optimization
    and database performance tuning techniques will come in handy during my work.
    I can attest to the fact that understanding database-specific query optimizers
    has been the most fun and most useful skill for [writing good, efficient SQL queries](/how-to-avoid-writing-sloppy-sql-43647a160025).
    It makes a world of difference.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在2008年计算机科学学位的第二年，当我在学习数据库管理系统时，尽管我对数据库有一定的兴趣，但直到后来我才真正意识到查询优化和数据库性能调优技术在我的工作中将会有多么重要。我可以证明，理解特定数据库的查询优化器是[编写高效SQL查询](/how-to-avoid-writing-sloppy-sql-43647a160025)的最有趣和最有用的技能。这会带来巨大的差别。
- en: Let’s look at the different types of query optimizers in a bit more detail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解一下不同类型的查询优化器。
- en: Heuristics-based optimization
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于启发式的优化
- en: Heuristics-based query optimization, also called rule-based query optimization,
    uses a set of *rules of thumb* and *core principles* to determine the most efficient
    way to execute a query by rearranging the relational algebra operations that make
    a query tree (an internal representation of the query).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基于启发式的查询优化，也称为基于规则的查询优化，使用一组*经验法则*和*核心原则*来确定执行查询的最有效方式，通过重新排列构成查询树的关系代数操作（查询的内部表示）。
- en: 'I’m sure you’ve heard of the popular discussion among bugging SQL engineers:
    *does the order in which I join tables matter?* Well, the short answer to this
    question is both yes and no. Yes, because the order matters, but no, because the
    optimizer fixes the query after parsing it.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你一定听说过在SQL工程师中流行的讨论：*我连接表的顺序是否重要？* 这个问题的简短回答是既重要又不重要。重要，因为顺序确实很重要，但不重要，因为优化器在解析后会修正查询。
- en: Let’s take the most popular example of optimizing queries — using the `WHERE`
    clause. Now, it’s a *rule of thumb* that you should make the *selection* as early
    as possible. This is because if you filter out the data that you don’t need early
    in the process, you’ll also limit the data that you need to join, order, and group.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以优化查询的最常见示例为例——使用`WHERE`子句。现在，*经验法则*是你应该尽早进行*选择*。这是因为如果你在处理过程中尽早过滤掉不需要的数据，你也会限制需要连接、排序和分组的数据量。
- en: Several other rules around certain types of joins, CTEs, sorting, etc., can
    be called heuristics, hence the name heuristics-based optimization. Optimizing
    a SQL query is not just about relational algebra and heuristics. It matters which
    database you are using and what flavor of SQL you are using, among other things.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些关于特定类型的连接、CTE、排序等的规则可以被称为启发式，因此得名启发式优化。优化SQL查询不仅仅涉及关系代数和启发式，还要考虑你使用的是哪个数据库以及你使用的是哪种SQL方言等因素。
- en: Note that this method of query optimization is purely theoretical and doesn’t
    consider a lot of the real-world information from database statistics, which is
    why you won’t see databases using this type of optimization alone to optimize
    your SQL queries. They’ll also look into cost-based query optimization, which
    we’ll discuss in the next section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种查询优化方法纯粹是理论上的，并未考虑数据库统计信息中的大量实际世界信息，这也是为什么你不会看到数据库仅使用这种优化方法来优化你的SQL查询。它们还会考虑基于成本的查询优化，我们将在下一节中讨论这一点。
- en: Cost-based optimization
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于成本的优化
- en: This method takes a more practical approach to optimization. It takes into consideration
    the constraints of memory, CPU, network, etc., along with the data statistics
    that the database maintains, such as row count, average row size, table size,
    and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法采取了更实际的优化方法。它考虑了内存、CPU、网络等的约束条件，以及数据库维护的数据统计信息，如行数、平均行大小、表大小等。
- en: While heuristics-based optimization reorders the query tree based on rules of
    thumb, cost-based optimization involves evaluating several query execution plans
    and choosing the best out of them based on the estimated cost of running the query.
    This cost includes everything from the estimated time, the number of rows scanned,
    the number of indexes used, and more.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基于启发式的优化会根据经验法则重新排序查询树，但基于成本的优化则涉及评估几个查询执行计划，并根据执行查询的估算成本选择其中最优的一个。这个成本包括估算的时间、扫描的行数、使用的索引数量等。
- en: As cost-based optimization evaluates many query execution plans, it might take
    more time to come up with the right execution plan. The optimizer might also be
    slowed down because of the overhead of collecting and analyzing statistics from
    the database. Still, it usually turns out to be more efficient than heuristics-based
    optimization.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于基于成本的优化需要评估多个查询执行计划，因此可能需要更多时间来制定正确的执行计划。优化器也可能因为收集和分析数据库统计数据的开销而变得缓慢。然而，它通常比基于启发式的优化更有效。
- en: Most databases don’t use a cost-based optimizer alone. They usually go for a
    hybrid approach, with most of the optimization based on cost, while the rest is
    based on heuristics, user hints, etc. Jiaqi Yan of Snowflake talks about this
    in [one of the CMU DB Quarantine Tech Talks sessions](https://youtu.be/CPWn1SZUZqE?t=1051).
    In the next section, with the help of a few examples, let’s see how hybrid query
    optimization works.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库不仅仅使用基于成本的优化器。它们通常采用混合方法，大部分优化基于成本，其余部分基于启发式方法、用户提示等。Snowflake的Jiaqi Yan在[CMU
    DB隔离技术讲座的一场会议中](https://youtu.be/CPWn1SZUZqE?t=1051)谈到了这一点。在下一部分中，我们将通过一些示例，看看混合查询优化是如何工作的。
- en: '*A hybrid query optimization approach just takes both heuristics-based optimization
    and cost-based optimization into consideration and comes up with a balanced query
    optimization plan. We won’t go into the details of how hybrid query optimization
    works because it wildly differs from one database to another.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*混合查询优化方法考虑了基于启发式的优化和基于成本的优化，并制定了一个平衡的查询优化计划。我们不会深入探讨混合查询优化的具体细节，因为不同数据库之间的实现差异很大。*'
- en: Adaptive query optimization
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自适应查询优化
- en: Till now, we discussed query optimization techniques that only looked at and
    improved the query execution plan before the start of query execution. Adaptive
    query optimization is the type of query optimization that tries to improve the
    plan as the query executes. The use case for this might be obvious to you — distributed
    data processing systems and query engines that deal with large amounts of data
    and a high level of parallelism.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了查询优化技术，这些技术仅在查询执行开始之前查看并改进查询执行计划。自适应查询优化是一种在查询执行过程中尝试改进计划的查询优化类型。这种用例可能对你来说很明显——分布式数据处理系统和处理大量数据以及高并发的查询引擎。
- en: Adaptive query optimization pays off really well when you are dealing with long-running
    queries, the processing tasks for which have been divided into multiple jobs allocated
    to different compute nodes in your cluster (whatever the tech might be — Redshift,
    Snowflake, Databricks, and so on). A significant skew in the data, bad partitioning,
    and file formats, among other things, can slow down your queries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理长时间运行的查询时，自适应查询优化的效果尤其显著，这些查询的处理任务被划分为多个作业分配给集群中的不同计算节点（无论技术是什么——Redshift、Snowflake、Databricks等）。数据的显著偏斜、不良的分区以及文件格式等问题，可能会使查询变慢。
- en: Adaptive query optimization looks at some of these problems and more while your
    query is executing. It also looks at how it was supposed to be performing and
    how it is actually performing with the help of a number of metrics. With such
    a system in place, the query engine can individual query plan workflows or the
    whole query plan while the query is executing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 自适应查询优化在查询执行过程中会关注这些问题以及更多问题。它还会查看查询的预期表现以及实际表现，借助多种指标来进行评估。通过这样的系统，查询引擎可以在查询执行时调整单个查询计划工作流或整个查询计划。
- en: More and more databases, especially the ones that have distributed data processing
    capabilities, will end up using some version of adaptive query optimization because
    it solves some of the most time-consuming performance optimization problems like
    ensuring even data distribution, ensuring the optimal partition size based on
    your memory and compute availability, and so on. I’d highly recommend going through
    the session from Databricks Data+AI 2020 I’ve shared in the references. It has
    some practical insights into how adaptive query optimization is implemented internally.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的数据库，特别是那些具备分布式数据处理能力的数据库，将最终使用某种版本的自适应查询优化，因为它解决了许多耗时的性能优化问题，例如确保数据均匀分布、根据内存和计算资源的可用性确保最佳分区大小等。我强烈推荐查看我在参考资料中分享的Databricks
    Data+AI 2020会议的相关内容。它对自适应查询优化的内部实现提供了一些实际的见解。
- en: Conclusion
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This article explored the different types of query optimizers used in various
    databases, data warehouses, and data processing engines. The point of being aware
    of the kind of optimizer is that it is central to the query optimization and performance
    tuning aspect of data engineering. The more you scale, the harder it becomes to
    tune. With an in-depth knowledge of the optimizer, you will be able to understand
    how it works and how to manipulate its output to suit your needs and requirements.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章探讨了在各种数据库、数据仓库和数据处理引擎中使用的不同类型的查询优化器。了解优化器的类型对于数据工程中的查询优化和性能调优至关重要。随着规模的扩大，调优变得越来越困难。通过深入了解优化器，你将能够理解它的工作原理，以及如何调整其输出以满足你的需求和要求。
- en: Think of the ideas around any other type of space and time optimization in applications,
    such as garbage collection, caching, etc. Understanding query optimizers bring
    the same benefit to data engineers that understanding the aforementioned concepts
    brings to software developers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 想想其他类型的空间和时间优化在应用中的想法，例如垃圾回收、缓存等。理解查询优化器为数据工程师带来的好处，与理解上述概念给软件开发者带来的好处类似。
- en: References
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[Optimization Techniques, Database Design 424, University of Maryland](http://www.cbcb.umd.edu/confcour/Spring2014/CMSC424/query_optimization.pdf)'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[优化技术，数据库设计 424，马里兰大学](http://www.cbcb.umd.edu/confcour/Spring2014/CMSC424/query_optimization.pdf)'
- en: '[Query Optimization, Database II, CP 465, Wilfrid Laurier University](https://web.wlu.ca/science/physcomp/ikotsireas/CP465/W2-QueryOptimization/Query_Optimization.pdf)'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[查询优化，数据库 II，CP 465，威尔弗里德·劳里埃大学](https://web.wlu.ca/science/physcomp/ikotsireas/CP465/W2-QueryOptimization/Query_Optimization.pdf)'
- en: '[Relational Query Optimization, CS 3200, Northeastern University](https://www.ccs.neu.edu/home/kathleen/classes/cs3200/19-QOptimize.pdf)'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[关系查询优化，CS 3200，东北大学](https://www.ccs.neu.edu/home/kathleen/classes/cs3200/19-QOptimize.pdf)'
- en: '[MySQL 8.0 Reference Manual — Optimization Overview](https://dev.mysql.com/doc/refman/8.0/en/optimize-overview.html)'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[MySQL 8.0 参考手册 — 优化概述](https://dev.mysql.com/doc/refman/8.0/en/optimize-overview.html)'
- en: '[Overview of PostgreSQL Internals — Planner/Optimizer](https://www.postgresql.org/docs/current/planner-optimizer.html)'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[PostgreSQL 内部概述 — 规划器/优化器](https://www.postgresql.org/docs/current/planner-optimizer.html)'
- en: '[Databricks Adaptive Query Execution — Data+AI Summit 2020](https://www.youtube.com/watch?v=jzrEc4r90N8)'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Databricks 自适应查询执行 — Data+AI 峰会 2020](https://www.youtube.com/watch?v=jzrEc4r90N8)'
- en: If you found this article useful, please subscribe and check out all my writings
    on 🌲 [**Linktree**](https://linktr.ee/kovid). You can also consider supporting
    me by [**buying a Medium Membership**](https://kovidrathee.medium.com/membership)
    using my referral link. Cheers!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这篇文章有用，请订阅并查看我在 🌲 [**Linktree**](https://linktr.ee/kovid) 上的所有作品。你还可以考虑通过使用我的推荐链接
    [**购买 Medium 会员**](https://kovidrathee.medium.com/membership) 来支持我。谢谢！
