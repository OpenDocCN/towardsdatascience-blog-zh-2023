- en: 'Python Types: Optional Can Mean Mandatory'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 类型：可选的可以是强制的
- en: 原文：[https://towardsdatascience.com/python-types-optional-can-mean-mandatory-8e3b7ac2e805](https://towardsdatascience.com/python-types-optional-can-mean-mandatory-8e3b7ac2e805)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-types-optional-can-mean-mandatory-8e3b7ac2e805](https://towardsdatascience.com/python-types-optional-can-mean-mandatory-8e3b7ac2e805)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Learn how to avoid a frequent misuse and misunderstanding of typing.Optional.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何避免对 `typing.Optional` 的常见误用和误解。
- en: '[](https://medium.com/@nyggus?source=post_page-----8e3b7ac2e805--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----8e3b7ac2e805--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8e3b7ac2e805--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8e3b7ac2e805--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----8e3b7ac2e805--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----8e3b7ac2e805--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----8e3b7ac2e805--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8e3b7ac2e805--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8e3b7ac2e805--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----8e3b7ac2e805--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8e3b7ac2e805--------------------------------)
    ·8 min read·Nov 21, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----8e3b7ac2e805--------------------------------)
    ·8分钟阅读·2023年11月21日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7d449c5d156e16fcbe145e74f261329c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d449c5d156e16fcbe145e74f261329c.png)'
- en: Photo by [Caroline Hall](https://unsplash.com/@notcarolyn?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Caroline Hall](https://unsplash.com/@notcarolyn?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: According to [the Python documentation](https://docs.python.org/3/library/typing.html#typing.Optional),
    `typing.Optional` is a handy way to indicate that an object can be `None`. It’s
    a concise and elegant way to express this concept, but is it also crystal clear?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[Python文档](https://docs.python.org/3/library/typing.html#typing.Optional)，`typing.Optional`
    是一种方便的方式来表示一个对象可以是 `None`。这是一种简洁而优雅的方式来表达这个概念，但它是否也非常清晰？
- en: 'Let me rephrase this question: When you see the word “optional” in a Python
    context, what do you think it means? Imagine you see an argument called `x` that
    has the type of `Optional[int]`. The `int` part is rather clear, as most likely
    indicates an integer, but what does `Optional` mean? What’s your first thought?'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我换一种说法：当你在 Python 环境中看到“optional”这个词时，你认为它意味着什么？假设你看到一个名为 `x` 的参数，它的类型是 `Optional[int]`。`int`
    部分相当明确，因为它很可能表示一个整数，但 `Optional` 代表什么呢？你的第一反应是什么？
- en: 'Let’s consider the following two options:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来考虑以下两个选项：
- en: I don’t have to provide a value of `x` because it’s optional.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我不需要提供 `x` 的值，因为它是可选的。
- en: '`x` value can be either `int` or `None`.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`x` 的值可以是 `int` 或 `None`。'
- en: If you know Python type hinting well enough, you know option 2 is correct. But
    when you don’t… Maybe I’m wrong, but I cannot imagine any person who doesn’t know
    Python choosing option 2\. It is option 1 that seems to make most sense. When
    I see information that something is optional, I think that… well, that it’s optional…
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Python 类型提示足够了解，你会知道选项2是正确的。但当你不了解时……也许我错了，但我无法想象任何一个不懂 Python 的人会选择选项2。选项1
    似乎更有意义。当我看到信息说某物是可选的，我会认为……嗯，就是说它是可选的……
- en: This issue leads to a frequent misuse of the `typing.Optional` type. This article
    aims to shed light on this misuse and guide you towards the correct understanding
    of this type.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题导致了 `typing.Optional` 类型的常见误用。本文旨在揭示这种误用，并引导你正确理解这个类型。
- en: The meaning of `typing.Optional`
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`typing.Optional` 的含义'
- en: 'These three type hints are equivalent:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种类型提示是等效的：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Each of them conveys the same information: that `x` can be either a string
    or `None`. While perfectly valid, the first one (`Union[str, None]`) represents
    the early stages of type hinting in Python: it was the initial approach, but it’s
    not necessarily the preferred method nowadays. Then, `Optional` was added to the
    `typing` module, providing a more concise and straightforward way to express this
    concept. According to [the](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)
    `[mypy](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)`
    [documentation](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都传达了相同的信息：`x` 可以是字符串或 `None`。虽然完全有效，但第一个 (`Union[str, None]`) 代表了 Python 类型提示的早期阶段：这是最初的方法，但现在不一定是首选方法。随后，`Optional`
    被添加到 `typing` 模块中，提供了一种更简洁和直接的方式来表达这一概念。根据 [the](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)
    `[mypy](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)`
    [documentation](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)：
- en: You can use the `[Optional](https://docs.python.org/3/library/typing.html#typing.Optional)`
    type modifier to define a type variant that allows `None`, such as `Optional[int]`
    (`Optional[X]` is the preferred shorthand for `Union[X, None]`).
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以使用 `[Optional](https://docs.python.org/3/library/typing.html#typing.Optional)`
    类型修饰符来定义允许 `None` 的类型变体，例如 `Optional[int]`（`Optional[X]` 是 `Union[X, None]` 的首选简写）。
- en: Eventually, in Python 3.10, the `|` operator was introduced in type hinting.
    As [the mypy documentation](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#x-y-syntax-for-unions)
    says,
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在 Python 3.10 中，引入了 `|` 运算符用于类型提示。正如 [mypy 文档](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#x-y-syntax-for-unions)
    所述，
- en: '[**PEP 604**](https://peps.python.org/pep-0604/) introduced an alternative
    way for spelling union types. In Python 3.10 and later, you can write `Union[int,
    str]` as `int | str`.'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[**PEP 604**](https://peps.python.org/pep-0604/) 引入了一种拼写联合类型的替代方式。在 Python
    3.10 及更高版本中，你可以将 `Union[int, str]` 写作 `int | str`。'
- en: As you see, this is a general operator for union types, not specifically designed
    to indicate that a variable can be `None`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这是一种用于联合类型的一般运算符，并非专门设计用于表示变量可以为 `None`。
- en: 'While each of the three versions is valid, the choice should depend on several
    factors. First, if you’re using an older Python version than 3.10, the `|` operator
    is unavailable. Even with the `__future__` import:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这三种版本都是有效的，但选择应取决于几个因素。首先，如果你使用的 Python 版本低于 3.10，则 `|` 运算符不可用。即使使用 `__future__`
    导入：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: it may still fail in some cases. You can read about this in [the](https://mypy.readthedocs.io/en/stable/runtime_troubles.html#using-x-y-syntax-for-unions)
    `[mypy](https://mypy.readthedocs.io/en/stable/runtime_troubles.html#using-x-y-syntax-for-unions)`
    [documentation](https://mypy.readthedocs.io/en/stable/runtime_troubles.html#using-x-y-syntax-for-unions).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，它仍然可能会失败。你可以在 [the](https://mypy.readthedocs.io/en/stable/runtime_troubles.html#using-x-y-syntax-for-unions)
    `[mypy](https://mypy.readthedocs.io/en/stable/runtime_troubles.html#using-x-y-syntax-for-unions)`
    [documentation](https://mypy.readthedocs.io/en/stable/runtime_troubles.html#using-x-y-syntax-for-unions)
    中阅读相关内容。
- en: 'Nevertheless, I suggest not using the `Union` type to indicate the possibility
    of being `None`, as it’s unnecessarily verbose and, as the documentation quoted
    above says, it’s not the preferred option anymore. `Mypy` recommends `typing.Optional`
    ([quote](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type):
    “`Optional[X]` is the preferred shorthand for `Union[X, None]`”). I vote for the
    same, for the simple reasons that the `Optional` type was created exactly for
    such use cases, and that it will work also for older Python versions, unlike the
    `|` operator.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我建议不要使用 `Union` 类型来表示可能为 `None`，因为这不必要地冗长，而且正如上面引用的文档所述，这已经不是首选选项了。`Mypy`
    推荐使用 `typing.Optional` ([quote](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)：“`Optional[X]`
    是 `Union[X, None]` 的首选简写”)。我同样支持这一点，原因很简单：`Optional` 类型正是为这种用例创建的，并且它还适用于旧版本的
    Python，区别于 `|` 运算符。
- en: 'Here are several examples of correct type hints that utilize `Optional`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是几个正确的类型提示示例，这些示例使用了 `Optional`：
- en: '![](../Images/94c7b45c6320ca5a82b43df116d1e4cc.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94c7b45c6320ca5a82b43df116d1e4cc.png)'
- en: Examples of type hints utilizing typing.Optional in Python 3.12\. Screenshot
    from Visual Studio Code, by author
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.12 中使用 typing.Optional 的类型提示示例。来自 Visual Studio Code 的截图，作者提供
- en: As you can see, `Optional` can be used in simple and complex type hints. Let’s
    analyze only the middle one. The `dict[str, Optional[int]]` type indicates that
    a variable should be a dictionary, with keys being strings and values being either
    integers or `None`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`Optional`可以用于简单和复杂的类型提示。我们只分析其中间的一个。`dict[str, Optional[int]]`类型表示一个变量应该是一个字典，键是字符串，值可以是整数或`None`。
- en: This article is not about making this choice, however. I’d like to discuss a
    frequent misuse of the `typing.Optional` type — and to show how to avoid it. In
    so doing, I will explain where I see the source of this misuse, how to correct
    it, and how to understand the `typing.Optional` type.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这篇文章并不是关于做出这种选择的。我想讨论`typing.Optional`类型的一个常见误用——并展示如何避免它。在此过程中，我将解释我认为这种误用的来源、如何纠正它，以及如何理解`typing.Optional`类型。
- en: The Optional misunderstanding
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对`Optional`的误解
- en: 'Consider the following function signature:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下函数签名：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s analyze the type hints in this function signature. However, don’t get
    too attached to this analysis! And this is because these type hints can (though
    don’t have to) be wrong. Here we are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下这个函数签名中的类型提示。但是，不要过于依赖这个分析！因为这些类型提示可能（虽然不一定）是错误的。这里是：
- en: '`s` is a string (`str`) argument; it can be both positional and keyword argument,
    and it is required;'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`是一个字符串（`str`）参数；它可以是位置参数或关键字参数，并且是必需的；'
- en: '`n` is an optional integer (`int`) argument, either positional or keyword,
    with the default value of `1`;'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`是一个可选的整数（`int`）参数，可以是位置参数或关键字参数，默认值是`1`；'
- en: the `foo()` function returns a list of strings (`list[str]`).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`foo()`函数返回一个字符串列表（`list[str]`）。'
- en: 'Now a question: *What’s wrong with the above analysis?*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一个问题：*上述分析有什么问题？*
- en: It is the second bullet point that is wrong. It says that `n` is an optional
    integer. On the one hand, this is a perfectly valid English sentence. The `n`
    argument is indeed optional, because you don’t have to provide it’s value; when
    you omit it, the default value of `1` will be used.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个要点是错误的。它说`n`是一个可选的整数。从某种程度上说，这是一句完全有效的英语句子。`n`参数确实是可选的，因为你不必提供它的值；当你省略它时，将使用默认值`1`。
- en: 'On the other hand, this is *not necessarily* a valid `typing` sentence. What
    I mean is, this is an incorrect meaning of `typing.Optional`. Above, we used `Optional[int]`
    to mean the following: you don’t have to provide the value of `n`. This **meaning
    is incorrect**. The correct meaning of `Optional[int]` in the `typing` syntax
    is as follows: `n` can be either `int` or `None`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，这*不一定*是一个有效的`typing`句子。我的意思是，这种说法对`typing.Optional`的理解是不正确的。上面，我们用`Optional[int]`来表示以下含义：你不必提供`n`的值。这**意义是不正确的**。`typing`语法中`Optional[int]`的正确含义是：`n`可以是`int`或`None`。
- en: 'The image below summarizes the two understandings:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下图总结了这两种理解：
- en: '![](../Images/e4893d88c8d4ac21daf1a0191be28121.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4893d88c8d4ac21daf1a0191be28121.png)'
- en: Correct and incorrect understanding of typing.Optional. Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正确和不正确理解`typing.Optional`。图像由作者提供
- en: Let’s improve the function signature. We have four options to choose from, each
    representing a different situations. Choose the one that suits your specific scenario.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改进函数签名。我们有四个选项可以选择，每个选项代表不同的情况。选择适合你特定场景的选项。
- en: As you will see, there will be option 0, in which the signature will remain
    unchanged. Yes, this type hint can be correct — but its meaning is rarely what
    you need.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，将有选项0，其中签名保持不变。是的，这种类型提示可以是正确的——但它的含义很少是你需要的。
- en: '*Option 0: Leave as is*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项0：保持原样*'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The type hint `n: Optional[int] = 1` is fully correct. The point is, it means
    something else than many think because it means that'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '类型提示`n: Optional[int] = 1`是完全正确的。重点是，它的含义与许多人认为的不同，因为它表示'
- en: '`n` can be either `int` or `None`, and'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`可以是`int`或`None`，并且'
- en: the default value of `n` is 1.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`的默认值是1。'
- en: So, the default is `1`, but the user can still provide `None`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，默认值是`1`，但用户仍然可以提供`None`。
- en: While it’s technically correct, I’d use such a type hint only in very specific
    — and rare — circumstances in which this would be what is really needed. They
    are so rare that I have never found myself in a situation that would require this
    type hint. It simply sounds unnatural to me.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然技术上是正确的，但我只会在非常特定且罕见的情况下使用这种类型提示，因为这些情况非常少见，我从未遇到过需要这种类型提示的情况。这对我来说听起来不自然。
- en: 'I am so harsh on this option because in my eyes, it is this type hint that
    makes `typing.Optional` so frequently misused: It suggests that `n` is optional
    because it has a default value, so you simply don’t have to provide a value for
    this variable or argument.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这个选项非常苛刻，因为在我看来，正是这种类型提示使得`typing.Optional`被频繁误用：它暗示`n`是可选的，因为它有一个默认值，因此你根本不必为这个变量或参数提供值。
- en: I included this option because it’s technically correct — but it’s really something
    you should almost never consider. At the very least, remember that many less experienced
    Python users will most likely misunderstand this type hint.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我包括这个选项是因为它在技术上是正确的——但实际上你几乎不应该考虑它。至少，记住许多经验较少的Python用户很可能会误解这种类型提示。
- en: '*Option 1: Use* `Optional` *and* `None` *as the default value*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项1：使用* `Optional` *并且* `None` *作为默认值*'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the most frequent scenario when you need `None` for an integer — or
    any other type. A default value (`None`) is used here as a sort of sentiment that
    triggers a particular action. So, if the user provides an integer, some integer-based
    processing is done. But when `n` is `None`, this processing can be switched off
    whatsoever. Certainly, it’s an example scenario, but it’s a very frequent one
    .
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要`None`作为整数或其他任何类型的默认值时，这是一种最常见的情况。这里使用了默认值（`None`），作为触发特定操作的某种情感标志。因此，如果用户提供了一个整数，则会进行一些基于整数的处理。但当`n`是`None`时，这种处理可以完全关闭。当然，这只是一个示例场景，但它非常常见。
- en: 'Note the `if` block, which aims to conduct an explicit `None` check. Maybe
    it isn’t needed in all such scenarios, but according to [the](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)
    `[mypy](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)`
    [documentation](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`if`块，它旨在进行显式的`None`检查。也许在所有这种情况下都不需要，但根据[the](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)
    `[mypy](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)`
    [documentation](https://mypy.readthedocs.io/en/stable/kinds_of_types.html?highlight=union#optional-types-and-the-none-type)：
- en: Most operations will not be allowed on unguarded `None` or `[Optional](https://docs.python.org/3/library/typing.html#typing.Optional)`
    values […] Instead, an explicit `None` check is required. Mypy has powerful type
    inference that lets you use regular Python idioms to guard against `None` values.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于未加保护的`None`或`[Optional](https://docs.python.org/3/library/typing.html#typing.Optional)`值，大多数操作是不允许的[…]
    相反，需要进行显式的`None`检查。Mypy具有强大的类型推断功能，可以使用常规Python习惯来防范`None`值。
- en: '*Option 2: Don’t use* `Optional`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项2：不要使用* `Optional`'
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this option, what you really need is a default value of `n`, but `n` cannot
    be `None`. Here, you simply don’t have to provide the value of `n`, because, with
    a default value, you don’t have to provide it’s value in a call to `foo()`. So,
    this is the correct meaning of *optional* in English (the argument is optional
    because you don’t have to provide it’s value) but incorrect in the `typing` syntax
    (the argument is *not* `Optional` because `n` cannot be `None`).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个选项中，你真正需要的是`n`的默认值，但`n`不能是`None`。在这里，你完全不需要提供`n`的值，因为有了默认值，你在调用`foo()`时不必提供它的值。因此，这就是英语中*optional*的正确含义（参数是可选的，因为你不必提供它的值），但在`typing`语法中是不正确的（参数*不是*`Optional`，因为`n`不能是`None`）。
- en: '*Option 3\. Use* `Optional` *for* `n` *but require its value*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项3\. 使用* `Optional` *但要求其值*'
- en: 'This use case shows why using `typing.Optional` does not make the argument
    *optional*. As discussed above, the `typing.Optional` type means that a variable
    can be `None`, but it does not mean that when it’s used for a argument, you don’t
    have to provide its value. So, this is perfectly valid code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用例展示了为什么使用`typing.Optional`并不会使参数*optional*。如上所述，`typing.Optional`类型意味着一个变量可以是`None`，但这并不意味着当它用于参数时，你不必提供它的值。因此，这段代码是完全有效的：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Even though `n` is `Optional`, it is *not* optional — you have to provide its
    value. Hence, you have to provide `n`, but it still can be `None`. Here, optional
    means that `n` is optionally `int` as it can also be `None`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`n`是`Optional`，但它*不是*可选的——你必须提供它的值。因此，你必须提供`n`，但它仍然可以是`None`。在这里，可选意味着`n`是可选的`int`，因为它也可以是`None`。
- en: Like in option 1, more often than not you should use the explicit `None` check
    for `n`, as what I wrote about using `None` applies here as well.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如同选项1一样，你通常应该对`n`使用显式的`None`检查，因为我所写的关于使用`None`的内容在这里也适用。
- en: '![](../Images/dee47dd5961b50e442c3a1f2c0f8e114.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dee47dd5961b50e442c3a1f2c0f8e114.png)'
- en: A yes for using typing.Optional for require arguments. Image by author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用typing.Optional处理必需参数的肯定。图片作者
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have discussed a frequent mistake related to the `typing.Optional` type.
    The mistake stems from the fact that while the name suggests that `typing.Optional`
    deals with optional arguments, it actually refers to whether a variable can be
    `None` — and has nothing to do with whether or not you have to provide the argument’s
    value in a function call or not.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了一个与`typing.Optional`类型相关的常见错误。这个错误源于这样一个事实：尽管名称暗示`typing.Optional`处理可选参数，但它实际上指的是一个变量是否可以是`None`——与是否必须在函数调用中提供参数值无关。
- en: In my opinion, the term “optional” doesn’t accurately convey the meaning of
    `typing.Optional`. However, it’s a well-established Python term that’s been around
    for a while, so I don’t anticipate a change anytime soon — if ever whatsoever.
    Therefore, it’s important to be aware of this potential misunderstanding. Let’s
    hope that over time, the Python codebase will become less susceptible to `typing.Optional`
    misuse and misinterpretation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，“optional”一词并不能准确传达`typing.Optional`的含义。然而，这是一个已经存在一段时间的公认Python术语，因此我不预期会有任何变化——无论如何。因此，意识到这种潜在的误解很重要。希望随着时间的推移，Python代码库会减少对`typing.Optional`的误用和误解。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)看到它们。如果你想加入Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----8e3b7ac2e805--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入Medium - Marcin Kozak](https://medium.com/@nyggus/membership?source=post_page-----8e3b7ac2e805--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium会员，你的会员费用的一部分将会给你阅读的作者，而你可以全面访问每一个故事……
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----8e3b7ac2e805--------------------------------)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----8e3b7ac2e805--------------------------------)'
