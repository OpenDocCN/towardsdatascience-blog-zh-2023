- en: Handling Slowly Changing Dimensions (SCD) using Delta Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Delta 表处理缓慢变化的维度（SCD）
- en: 原文：[https://towardsdatascience.com/handling-slowly-changing-dimensions-scd-using-delta-tables-511122022e45](https://towardsdatascience.com/handling-slowly-changing-dimensions-scd-using-delta-tables-511122022e45)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/handling-slowly-changing-dimensions-scd-using-delta-tables-511122022e45](https://towardsdatascience.com/handling-slowly-changing-dimensions-scd-using-delta-tables-511122022e45)
- en: Handling the challenge of slowly changing dimensions using the Delta Framework
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Delta 框架处理缓慢变化维度的挑战
- en: '[](https://mkukreja1.medium.com/?source=post_page-----511122022e45--------------------------------)[![Manoj
    Kukreja](../Images/de7c954b505e9749bad47975a3bee80b.png)](https://mkukreja1.medium.com/?source=post_page-----511122022e45--------------------------------)[](https://towardsdatascience.com/?source=post_page-----511122022e45--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----511122022e45--------------------------------)
    [Manoj Kukreja](https://mkukreja1.medium.com/?source=post_page-----511122022e45--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mkukreja1.medium.com/?source=post_page-----511122022e45--------------------------------)[![Manoj
    Kukreja](../Images/de7c954b505e9749bad47975a3bee80b.png)](https://mkukreja1.medium.com/?source=post_page-----511122022e45--------------------------------)[](https://towardsdatascience.com/?source=post_page-----511122022e45--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----511122022e45--------------------------------)
    [Manoj Kukreja](https://mkukreja1.medium.com/?source=post_page-----511122022e45--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----511122022e45--------------------------------)
    ·10 min read·Jan 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----511122022e45--------------------------------)
    ·10 分钟阅读·2023 年 1 月 23 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: For a long time, the Kimball method has been a standard for dimensional data
    modeling techniques. As per Kimball “ *The notion of time pervades every corner
    of the data warehouse*”. What does this mean in the context of data analytics?
    At a high level, modern analytics can be seen as the aggregation of constantly
    changing data with the passage of time. The problem is that the constantly changing
    data not only includes new additions but also changes to previous datasets.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，Kimball 方法一直是维度数据建模技术的标准。根据 Kimball 的说法“*时间的概念渗透到数据仓库的每一个角落*”。在数据分析的背景下，这意味着什么？从高层次来看，现代分析可以被视为随着时间的推移对不断变化的数据的聚合。问题在于，不断变化的数据不仅包括新的添加，还包括对以前数据集的更改。
- en: 'Overall dimensional data modeling groups data into two major categories:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 整体维度数据建模将数据分为两大类：
- en: '**Facts** — This data represents *limitless* data sets that store measurements
    of entities. It contains data that is essential for quantitative analysis and
    decision-making. Fact tables frequently have columns that join to other tables
    (dimensions) for reference.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**事实** — 这些数据表示*无限*的数据集，存储实体的测量信息。它包含对定量分析和决策制定至关重要的数据。事实表通常具有与其他表（维度）连接的列，以供参考。'
- en: '**Dimensions** — This data represents relatively *limited* data sets that provide
    descriptive information regarding the measurements performed in the fact tables.
    In comparison to fact tables, dimensions evolve at a lot slower pace. This is
    the reason they are commonly referenced as “*slowly changing dimensions*”.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**维度** — 这些数据表示相对*有限*的数据集，提供关于在事实表中进行的测量的描述性信息。与事实表相比，维度的变化速度要慢得多。这就是为什么它们通常被称为“*缓慢变化的维度*”。'
- en: Kimball’s approach involves the creation of a star schema based on facts and
    dimensions. Because of the denormalized structure, the star schema is well suited
    for analytics use cases…no need for complex join conditions. For this reason,
    for several years, the star schema has been a de facto standard for modeling in
    traditional data warehouses.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kimball 的方法涉及基于事实和维度创建星型模式。由于其非规范化的结构，星型模式非常适合分析用例……不需要复杂的连接条件。因此，多年来，星型模式一直是传统数据仓库建模的事实标准。
- en: '![](../Images/45cbf90d8239b735cbe35fd12a284f26.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/45cbf90d8239b735cbe35fd12a284f26.png)'
- en: Image by author
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: For many years, data handlers have faced the challenge of handling slowly changing
    dimensions without losing their previous history as well as preserving the relational
    reference to fact tables. The Kimball method proposes several methods for effectively
    dealing with slowly changing dimensions or SCD in short. The reality is that once
    a particular SCD method is chosen it is relatively easy to implement it in a data
    warehouse. Support for SQL and ACID transactions makes it easy to handle.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，数据处理人员面临着处理缓慢变化维度的挑战，同时保持其之前的历史记录并保留与事实表的关系参考。Kimball 方法提出了几种有效处理缓慢变化维度的方法。现实情况是，一旦选择了特定的
    SCD 方法，在数据仓库中实施它相对容易。对 SQL 和 ACID 事务的支持使其处理起来变得简单。
- en: 'Unfortunately, implementing the same in the data lake is a different story.
    There are a couple of reasons for this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在数据湖中实现相同的操作是另一回事。有几个原因：
- en: The first problem is **immutability**. As per best practices, data in a data
    lake should not be changed.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个问题是 **不变性**。根据最佳实践，数据湖中的数据不应更改。
- en: Secondly, for several years it was not possible to perform atomic writes in
    a data lake. This meant you need to rewrite the entire table even if you have
    a minor edit.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，多年来在数据湖中无法进行原子写入。这意味着即使你只做了小的编辑，也需要重写整个表。
- en: The [Delta Lake](https://delta.io/) framework addresses the problems above.
    Support for ACID (atomicity, consistency, isolation, and durability) transactions
    now makes it possible to implement SCD with the same ease as a data warehouse.
    In this article, we will learn how to implement the most common methods for addressing
    slowly changing dimensions using the Delta Lake framework.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[Delta Lake](https://delta.io/) 框架解决了上述问题。对 ACID（原子性、一致性、隔离性和持久性）事务的支持现在使得在数据湖中实现
    SCD 与在数据仓库中一样轻松。在本文中，我们将学习如何使用 Delta Lake 框架实施处理缓慢变化维度的最常见方法。'
- en: 'Consider an example case scenario below:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例案例：
- en: “A company wants to keep track of the *customer* dimension for changes happening
    over time. They have requested their data engineering group to suggest a few alternatives.
    After careful consideration, data engineering has come up with three options to
    manage the slowly changing dimensions SCD Type 1, SCD Type 2 and SCD Type 3.”
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “一家公司希望跟踪*客户*维度随时间发生的变化。他们要求数据工程团队提供几种替代方案。经过仔细考虑，数据工程提出了三种管理缓慢变化维度的选项：SCD 类型
    1、SCD 类型 2 和 SCD 类型 3。”
- en: Before we move into each option let us try to understand the data structure
    of the customer dimension. Throughout this article, we will be using the sample
    datasets below. The dataset below shows some sample customer records. For explaining
    the different options for dealing with slowly changing dimensions our focus will
    remain on the customer record highlighted using a red box (customer with name
    = **Magee Cash**).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨每个选项之前，让我们尝试理解客户维度的数据结构。在本文中，我们将使用下面的示例数据集。下面的数据集显示了一些示例客户记录。为了说明处理缓慢变化维度的不同选项，我们将重点关注用红色框标出的客户记录（客户名称
    = **Magee Cash**）。
- en: '![](../Images/5a48e735e13b0ac803dd6c6eed69f3a0.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a48e735e13b0ac803dd6c6eed69f3a0.png)'
- en: Image by author
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '**Magee Cash** has recently changed her address. Change record(s) are delivered
    as [CDC](https://en.wikipedia.org/wiki/Change_data_capture) records to the **OLAP**
    system. In the context of data engineering, the CDC process aims at capturing
    incremental data sets from sources and merging them in enterprise data lakes.
    Following is the change record for **Magee Cash***,* notice that the address differs
    from the original record above.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Magee Cash** 最近更改了她的地址。更改记录以 [CDC](https://en.wikipedia.org/wiki/Change_data_capture)
    记录的形式传送到 **OLAP** 系统。在数据工程的背景下，CDC 过程旨在从源头捕获增量数据集，并将其合并到企业数据湖中。以下是 **Magee Cash**
    的更改记录，注意地址与上述原始记录不同。'
- en: '![](../Images/141265ab2660807488168394b0d3205a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/141265ab2660807488168394b0d3205a.png)'
- en: Image by author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The core capabilities of Delta Lake make it an extremely suitable platform for
    building modern data [lakehouse architecture](http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf).
    In the Lakehouse architecture, [Delta Lake](https://delta.io/) can be used for
    merging change records into a common data layer (silver). Once created the silver
    layer acts as the foundational data layer for your analytical workloads including
    BI, data science, machine learning, and artificial intelligence. For this reason,
    the silver layer is often referred to as the “***single source of truth***”.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Delta Lake 的核心能力使其成为构建现代数据[湖仓架构](http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf)的极其合适的平台。在湖仓架构中，[Delta
    Lake](https://delta.io/) 可用于将变更记录合并到公共数据层（银层）。一旦创建，银层就会作为分析工作负载的基础数据层，包括 BI、数据科学、机器学习和人工智能。因此，银层通常被称为“***单一事实来源***”。
- en: Let’s get back to the core objective of this article. Now that we have a clear
    understanding of the datasets, we are ready to explore the first SCD method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到本文的核心目标。现在我们对数据集有了清晰的理解，我们可以开始探索第一个 SCD 方法。
- en: SCD Type 1
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SCD 类型 1
- en: This type is often referred to as the “**Overwrite**” method. In this method,
    any changes to dimension data simply override the previous state of data with
    the same key. Although very simple to implement this method suffers from a major
    drawback. Due to the overwrite mechanism, you not only lose the previous history
    of the dimension, but also the state of the fact table that it gets attached to.
    The before and after image of the customer dimension using the SCD type 1 method
    is shown below.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型通常被称为“**覆盖**”方法。在这种方法中，任何对维度数据的更改都会用相同键的先前数据状态进行覆盖。虽然这种方法实现起来非常简单，但它有一个主要缺点。由于覆盖机制，你不仅会丢失维度的先前历史记录，还会丢失它所附加的事实表的状态。下图展示了使用
    SCD 类型 1 方法的客户维度的前后图像。
- en: '![](../Images/90ae4c316b621475e5fbad8b223f609c.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/90ae4c316b621475e5fbad8b223f609c.png)'
- en: Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Notice how the new home address is simply **overwritten** over the previous
    address, the history of the previous address is lost. The repercussions of losing
    history can be severe in cases where a fact table aggregation gets affected by
    the change in the dimension. In such a case, without the history, it becomes extremely
    difficult to back-track the reason why the aggregation value got affected.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，新的住址是**覆盖**了之前的地址，之前地址的历史记录丢失了。在维度发生变化时，失去历史记录的后果可能非常严重。如果事实表的聚合受到维度变化的影响，那么没有历史记录的情况下，很难追溯聚合值变化的原因。
- en: We will now learn how SCD Type 1 can be implemented using Delta framework. Start
    by creating the silver layer customer dimension table (***customer_silver_scd1***)
    using the raw customer data set in the bronze layer of the Lakehouse.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何使用 Delta 框架实现 SCD 类型 1。从使用湖仓的铜层原始客户数据集创建银层客户维度表（***customer_silver_scd1***）开始。
- en: '![](../Images/29c1bb1a22abeabbe1eec76fd294a781.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/29c1bb1a22abeabbe1eec76fd294a781.png)'
- en: Image by author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Create a new dataframe using the change record for **Magee Cash***.*
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Magee Cash**的变更记录创建一个新的数据框架。
- en: '![](../Images/52c45cf45a3a01ca1fd3d156f63a2182.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/52c45cf45a3a01ca1fd3d156f63a2182.png)'
- en: Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Finally, merge the change of address record into the ***customer_silver_scd1***
    silver layer dimension table.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将地址变更记录合并到***customer_silver_scd1***银层维度表中。
- en: '![](../Images/ac5d4cdc744e6321809167fb1e2e0145.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac5d4cdc744e6321809167fb1e2e0145.png)'
- en: Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: After performing a query on the silver layer dimension table, you will notice
    the change of address has overridden its previous state. The problem is that the
    previous state of this record is nowhere to be seen.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在对银层维度表执行查询后，你会注意到地址变更已经覆盖了其先前的状态。问题在于，这条记录的先前状态无法找到。
- en: Consider a scenario where **Magee Cash** may have placed an e-commerce order
    using the previous version of the address. The product has not been shipped yet,
    but the address has changed in the meantime. Where should the product be shipped
    to? The old address or the new one.
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 考虑一种情况，**Magee Cash**可能使用旧版本的地址下了电子商务订单。产品尚未发货，但地址在此期间已发生变化。那么，产品应该发往哪里？旧地址还是新地址？
- en: '![](../Images/88debfaef69f487c6818021ed1a496b8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/88debfaef69f487c6818021ed1a496b8.png)'
- en: Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Let me introduce you to a very useful feature in the Delta Lake framewrok. Delta
    Lake maintains a chronological history of changes including inserts, updates,
    and deletes. In the example above **version 0** of the table was generated when
    the ***customer_silver_scd1*** silver layer table was created. Similarly, **version
    1** of the table was created when we performed the data merge for the change of
    address record. In addition, Delta Lake tables can easily be restored to any previous
    version as desired.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我向你介绍Delta Lake框架中一个非常有用的功能。Delta Lake维护了更改的时间顺序历史，包括插入、更新和删除。在上面的示例中，**版本
    0**的表是在创建***customer_silver_scd1***银层表时生成的。同样，**版本 1**的表是在我们为地址变更记录执行数据合并时创建的。此外，Delta
    Lake表可以轻松恢复到任何所需的先前版本。
- en: '![](../Images/71516c5b7bc2be675a12b3b06f87e7bf.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71516c5b7bc2be675a12b3b06f87e7bf.png)'
- en: Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Due to the deficiencies cited above, SCD Type 1 is rarely used in modern data
    platforms. Therefore, we need a better method(s), one that lets us perform changes
    to dimensions while preserving the **previous** references for active usages.
    Overall, simply use SCD Type 1 if your computations *do not* care about the previous
    state of data or the repercussions that it causes down the line.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于上述缺陷，现代数据平台中很少使用SCD 类型 1。因此，我们需要一种更好的方法，能够在进行维度更改时保留**先前**的引用以供活动使用。总的来说，如果你的计算*不*关心数据的先前状态或其可能引发的后果，可以简单地使用SCD
    类型 1。
- en: SCD Type 2
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SCD 类型 2
- en: Also known as an “**Add a New Record**” method. In this method, the change record
    is added as a new record to the dimension table and marked as “***Current***”
    or “***Active***”. In addition, the previous version of the record is marked as
    “***Expired***” or “***Inactive***”. The various versions (current and historical)
    of a record are tied together using a **surrogate** key. At a table level, SCD
    Type 2 is implemented by adding a ***StartDate*** and *EndDate* timestamp columns
    for each row in the dimension table. Additionally, a ***Status*** column is added
    to mark if the record is ***current*** or***expired*** status. The before and
    after image of the customer dimension using the SCD Type 2 method is shown below.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为“**添加新记录**”方法。在这种方法中，更改记录作为新记录添加到维度表中，并标记为“***当前***”或“***活动***”。此外，记录的先前版本被标记为“***过期***”或“***非活动***”。记录的不同版本（当前和历史）通过**替代**键关联起来。在表级别，SCD
    类型 2通过为维度表中的每一行添加***开始日期***和*结束日期*时间戳列来实现。此外，添加了一个***状态***列，以标记记录的***当前***或***过期***状态。下面展示了使用SCD
    类型 2方法的客户维度的前后图像。
- en: '![](../Images/f3dbf275b0967c450b5eebddc4621901.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f3dbf275b0967c450b5eebddc4621901.png)'
- en: Image by author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: We will now learn how SCD Type 2 can be implemented using the delta framework.
    Start by creating the silver layer customer dimension table (***customer_silver_scd2***)
    using the raw customer dataset in the bronze layer of the Lakehouse.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何使用delta框架实现SCD 类型 2。从使用Lakehouse原始客户数据集创建银层客户维度表（***customer_silver_scd2***）开始。
- en: '![](../Images/33e8e077d10805e83380e4cff16acb64.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33e8e077d10805e83380e4cff16acb64.png)'
- en: Image by author
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Now **merge** the change of address record into the ***customer_silver_scd2***
    silver layer dimension table.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将地址更改记录合并到***customer_silver_scd2***银层维度表中。
- en: '![](../Images/94a3136f35d0ea6bc27baca37a8c69f6.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94a3136f35d0ea6bc27baca37a8c69f6.png)'
- en: Image by author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Notice the previous record got marked as ***Expired*** and an ***enddate***
    is updated. Also, a new record with the latest address was inserted with the ***startdate***
    same as the ***enddate*** of the previous record. Using this approach **Magee
    Cash** will surely be getting her e-commerce order shipped to the correct address.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，之前的记录被标记为***过期***，并且更新了***结束日期***。同时，插入了一条新记录，包含最新地址，其***开始日期***与之前记录的***结束日期***相同。使用这种方法，**Magee
    Cash**将确保她的电子商务订单被送到正确的地址。
- en: '![](../Images/308f0c07589a5670279b6a626b53c94c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/308f0c07589a5670279b6a626b53c94c.png)'
- en: Image by author
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Using the SCD Type 2 approach, you can chronologically track the history of
    changes over time and maintain the references to fact tables in a time chronological
    manner. I must admit that the implementation is a little tricky compared to SCD
    Type 1.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SCD 类型 2方法，你可以按时间顺序跟踪更改历史，并以时间顺序的方式维护对事实表的引用。我必须承认，与SCD 类型 1相比，这种实现有些复杂。
- en: As a cautionary note, the application that maintains the dimension table needs
    to be coded in such a way that the addition of the new record with the *current*
    version and the *expiry* of the previous version are performed in one single transaction.
    Also, every query that goes against the dimension table needs to filter *status=****Current***.
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为一个警告，维护维度表的应用程序需要以这样的方式编码，即将带有*当前*版本的新记录和先前版本的*过期*合并为一个事务。此外，所有针对维度表的查询都需要过滤*status=**Current***。
- en: There is a simpler alternative, further we explore yet another method which
    in some ways is simply an extension of the SCD Type 1 method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种更简单的替代方案，我们进一步探讨另一种方法，这在某些方面仅仅是 SCD 类型 1 方法的扩展。
- en: SCD Type 3
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SCD 类型 3
- en: Also known as an “**Add a New Field**” method. For every change, the prior version
    and the current version are stored as two distinct columns within the same row
    of the dimension table. SCD Type 3 is relatively easier to implement as compared
    to SCD Type 2, the history includes only the current and previous versions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为“**添加新字段**”方法。对于每次更改，先前版本和当前版本作为两个不同的列存储在同一行的维度表中。与 SCD 类型 2 相比，SCD 类型 3
    相对更易于实现，历史记录仅包括当前和先前的版本。
- en: '![](../Images/9efd1f5832c6277db80b8de34b01f534.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9efd1f5832c6277db80b8de34b01f534.png)'
- en: Image by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We will now learn how SCD Type 3 can be implemented using the delta framework.
    Start by creating the silver layer customer dimension table (***customer_silver_scd3***)
    using the raw customer dataset in the bronze layer of the lakehouse.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何使用 Delta 框架实现 SCD 类型 3。首先使用湖库中铜层的原始客户数据集创建银层客户维度表 (***customer_silver_scd3***)。
- en: '![](../Images/14b74ad31ac2a4047f3e779dc4de5f9d.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14b74ad31ac2a4047f3e779dc4de5f9d.png)'
- en: Image by author
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Notice that every column in the dimension table maintains a **current** and
    **previous** state. At the creation time of the dimension table, the current state
    of the column is populated with the latest data, yet the previous state of the
    column is left blank.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，维度表中的每一列都维护**当前**和**先前**状态。在创建维度表时，列的当前状态填充了最新的数据，而列的先前状态则留空。
- en: Now merge the change of address record into the ***customer_silver_scd3*** silver
    layer dimension table.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将地址变更记录合并到***customer_silver_scd3***银层维度表中。
- en: '![](../Images/6324b016844ac3dc76823465ed0edb90.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6324b016844ac3dc76823465ed0edb90.png)'
- en: Image by author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Moving ahead to check the state of the record after the delta lake merge.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 继续查看在 Delta Lake 合并后记录的状态。
- en: '![](../Images/f8ff0e04eb9e23642b3228d1930f206e.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8ff0e04eb9e23642b3228d1930f206e.png)'
- en: Image by author
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Notice that the ***address*** field is now populated with the changed record
    and the previous version of the address has been moved to the ***previous_address***
    field. Similarly, the ***modifieddate*** field has been updated to maintain a
    change chronology.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，***address*** 字段现在已填充了更改后的记录，地址的先前版本已移动到 ***previous_address*** 字段。同样，***modifieddate***
    字段已更新以维护更改的时间顺序。
- en: The fact that only a limited amount of history is available makes the use case
    of SCD Type 3 a little on the limited side. But the ease of implementation makes
    it somewhat desirable. It’s a good trade-off if you hate the limitations of SCD
    Type 1 and find SCD Type 2 hard to implement and manage.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于仅有有限的历史记录可用，SCD 类型 3 的使用案例略显有限。但实现的简便性使其具有一定的吸引力。如果您厌恶 SCD 类型 1 的局限性，并且发现
    SCD 类型 2 难以实现和管理，那么这是一个不错的折衷方案。
- en: 'All the code used in this article can be found on the link below:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的所有代码可以在下面的链接中找到：
- en: '[](https://github.com/mkukreja1/blogs/tree/master/scd?source=post_page-----511122022e45--------------------------------)
    [## blogs/scd at master · mkukreja1/blogs'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/mkukreja1/blogs/tree/master/scd?source=post_page-----511122022e45--------------------------------)
    [## blogs/scd at master · mkukreja1/blogs'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目前无法执行该操作。您在另一个标签页或窗口中已登录。您在另一个标签页或…
- en: github.com](https://github.com/mkukreja1/blogs/tree/master/scd?source=post_page-----511122022e45--------------------------------)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/mkukreja1/blogs/tree/master/scd?source=post_page-----511122022e45--------------------------------)'
- en: In many respects, SCD Type 2 is frequently considered the primary technique
    for implementing slowly changing dimensions. It should be clearly understood that
    the primary objective of SCD is not to store the history of records over time,
    instead, it is to maintain an accurate association with the fact tables. Also,
    in many respects, the slowly changing dimensions require you to update records
    which in general terms goes against the principles of the immutable nature of
    the data lake/warehouse. However new advances made by frameworks like Delta Lake
    have made it possible to implement SCD scenarios with **ease** and **simplicity**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，SCD 类型 2 通常被认为是实施缓慢变化维度的主要技术。需要明确的是，SCD 的主要目标不是存储记录的历史，而是保持与事实表的准确关联。此外，在许多方面，缓慢变化维度要求你更新记录，这在一般情况下与数据湖/仓库的不可变性原则相悖。然而，像
    Delta Lake 这样的框架的新进展使得以**简单**和**轻松**的方式实现 SCD 场景成为可能。
- en: I hope this article was helpful. **SC**D is covered as part of the AWS Big Data
    Analytics course offered by [Datafence Cloud Academy](http://www.datafence.com).
    The course is taught online by myself on weekends.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章对你有帮助。**SCD** 作为 [Datafence Cloud Academy](http://www.datafence.com) 提供的
    AWS 大数据分析课程的一部分进行了讲解。课程由我在周末在线授课。
