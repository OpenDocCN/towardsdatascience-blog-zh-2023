- en: 'SQL users: Halve the length of (some of) your queries with this one trick'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 用户：使用这一技巧将你的查询长度缩短一半
- en: 原文：[https://towardsdatascience.com/sql-users-halve-the-length-of-some-of-your-queries-with-this-one-trick-c3c2c226cb35](https://towardsdatascience.com/sql-users-halve-the-length-of-some-of-your-queries-with-this-one-trick-c3c2c226cb35)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/sql-users-halve-the-length-of-some-of-your-queries-with-this-one-trick-c3c2c226cb35](https://towardsdatascience.com/sql-users-halve-the-length-of-some-of-your-queries-with-this-one-trick-c3c2c226cb35)
- en: The QUALIFY clause is pure syntactic sugar
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`QUALIFY` 子句纯粹是语法糖'
- en: '[](https://medium.com/@mattchapmanmsc?source=post_page-----c3c2c226cb35--------------------------------)[![Matt
    Chapman](../Images/7511deb8d9ed408ece21031f6614c532.png)](https://medium.com/@mattchapmanmsc?source=post_page-----c3c2c226cb35--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c3c2c226cb35--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c3c2c226cb35--------------------------------)
    [Matt Chapman](https://medium.com/@mattchapmanmsc?source=post_page-----c3c2c226cb35--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mattchapmanmsc?source=post_page-----c3c2c226cb35--------------------------------)[![Matt
    Chapman](../Images/7511deb8d9ed408ece21031f6614c532.png)](https://medium.com/@mattchapmanmsc?source=post_page-----c3c2c226cb35--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c3c2c226cb35--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c3c2c226cb35--------------------------------)
    [Matt Chapman](https://medium.com/@mattchapmanmsc?source=post_page-----c3c2c226cb35--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c3c2c226cb35--------------------------------)
    ·6 min read·Mar 29, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c3c2c226cb35--------------------------------)
    ·阅读时间 6 分钟·2023年3月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7e7f9a7323462a08f37dd7ce8eb87c2c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e7f9a7323462a08f37dd7ce8eb87c2c.png)'
- en: Image by [Joanna Kosinska](https://unsplash.com/@joannakosinska) on [Unsplash](https://unsplash.com/photos/-ayOfwsd9mY)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Joanna Kosinska](https://unsplash.com/@joannakosinska) 提供，来源于 [Unsplash](https://unsplash.com/photos/-ayOfwsd9mY)
- en: 'In this article, I’m going to introduce you to the SQL `QUALIFY` clause: a
    trick that will help you write shorter and more readable SQL queries.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将向你介绍 SQL `QUALIFY` 子句：一种帮助你编写更简洁、可读性更高的 SQL 查询的技巧。
- en: 'If you work in Data Science/Analytics or Machine Learning, this is a must-have
    SQL tool for four reasons:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从事数据科学/分析或机器学习，这是一个必备的 SQL 工具，原因有四：
- en: First, because it can help you write much ***shorter*** queries, simplifying
    your data collection pipelines. In my experience, `QUALIFY` reduces the length
    of many queries by up to 50%.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，因为它可以帮助你编写更 ***简短*** 的查询，简化你的数据收集流程。在我的经验中，`QUALIFY` 将许多查询的长度减少了多达 50%。
- en: Second, because it will help you write much more ***succinct*** queries. This
    matters because, as Paul Graham famously said, [succinctness is power](http://www.paulgraham.com/power.html)
    in that it makes your code more readable and maintainable.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，因为它会帮助你编写更 ***简洁*** 的查询。这很重要，因为正如保罗·格雷厄姆所说，[简洁就是力量](http://www.paulgraham.com/power.html)，它使你的代码更具可读性和可维护性。
- en: Third, `QUALIFY` helps you write more ***efficient***queries which reduce costs
    and speed up development time.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三，`QUALIFY` 帮助你编写更 ***高效*** 的查询，从而降低成本并加快开发速度。
- en: Fourth, it’s an easy way to show off. I’m not saying that you’re going to win
    any innovation prizes for using `QUALIFY`, but because it’s a [relatively new
    clause](https://modern-sql.com/caniuse/qualify), chances are that your boss might
    not have heard of it. At any rate, it’ll be fun to show your team a new trick.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四，它是一个展示技巧的好方法。我并不是说你会因为使用 `QUALIFY` 赢得任何创新奖，但因为它是一个 [相对较新的子句](https://modern-sql.com/caniuse/qualify)，你的老板可能还没有听说过。无论如何，展示给你的团队一个新技巧会很有趣。
- en: What does the QUALIFY clause do?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`QUALIFY` 子句的作用是什么？'
- en: Simply put, the `QUALIFY` clause enables you to filter the results of window
    functions *without* needing to use nested subqueries or the `WITH` clause. It
    allows you to replace these bulky code blocks with a **single line of code**.
    It’s sort of like how the `HAVING` clause enables you to filter the results of
    `GROUP BY` aggregations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，`QUALIFY` 子句使你可以筛选窗口函数的结果，*无需* 使用嵌套子查询或 `WITH` 子句。它允许你用 **一行代码** 替代这些冗长的代码块。这有点类似于
    `HAVING` 子句如何使你能够筛选 `GROUP BY` 聚合的结果。
- en: the `QUALIFY` clause enables you to filter the results of window functions
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`QUALIFY` 子句使你能够筛选窗口函数的结果'
- en: If that sounds like gobbledygook, give me 2 minutes of your time and I’ll try
    my best to explain.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来像胡言乱语，给我2分钟的时间，我会尽力解释清楚。
- en: It all starts with window functions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一切从窗口函数开始
- en: If you’re not familiar with window functions, you might want to check out [this
    article](https://medium.com/learning-sql/sql-window-functions-explained-through-4-real-world-examples-91db9972b6bc),
    which introduces SQL window functions through 4 real-world use cases. But, in
    a nutshell, window functions can be used to perform calculations on a set of rows
    in a table without aggregating or collapsing the rows, which is very useful when
    you want to preserve the original structure of the table.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉窗口函数，你可能想看看[这篇文章](https://medium.com/learning-sql/sql-window-functions-explained-through-4-real-world-examples-91db9972b6bc)，它通过4个实际使用案例介绍了SQL窗口函数。但简而言之，窗口函数可以用来对表中的一组行进行计算，而无需聚合或合并这些行，这在你想保留表的原始结构时非常有用。
- en: For example, let’s say we have a table named `orders` which lists all the product
    orders a company receives. Each row represents an order and records the `date`
    the order was placed, the `customer` who placed the order, and the `order_amount`
    (in dollars).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个名为`orders`的表，它列出了公司收到的所有产品订单。每一行代表一个订单，并记录了订单下达的`date`、下订单的`customer`和`order_amount`（以美元计）。
- en: '![](../Images/903e5b3382d9807a1541f9b7b8b3b3fd.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/903e5b3382d9807a1541f9b7b8b3b3fd.png)'
- en: Image by author
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: 'Using a window function, we could add in a new column `total_order_amount`
    which represents the total order amount per customer. We could simply write:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用窗口函数，我们可以添加一个新的列`total_order_amount`，表示每个客户的总订单金额。我们可以简单地写：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'which would return:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回：
- en: '![](../Images/36750f2ed4b142dc15f9c2384a8e5f4d.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36750f2ed4b142dc15f9c2384a8e5f4d.png)'
- en: Image by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: As you can see, the window function `SUM(order_amount) OVER(PARTITION BY customer)`
    effectively partitioned our table into different “windows” (one for each customer)
    and then calculated the `total_order_amount` for each of these windows. All of
    this was achieved without using a `GROUP BY` aggregation, allowing us to retain
    the same number of rows.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，窗口函数`SUM(order_amount) OVER(PARTITION BY customer)`有效地将我们的表分区为不同的“窗口”（每个客户一个窗口），然后计算这些窗口的`total_order_amount`。所有这些都在不使用`GROUP
    BY`聚合的情况下完成，使我们能够保留相同数量的行。
- en: Enter the QUALIFY clause
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入 QUALIFY 子句
- en: 'Now that we’ve got our window function set up, let’s imagine that we want to
    send a Thank You email to our highest-spending customers. Before we can do this,
    we need to filter this table to see the orders of customers whose `total_order_amount`
    exceeded $5,000\. In other words, we want to produce something like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了窗口函数，假设我们想向我们花费最多的客户发送感谢邮件。在此之前，我们需要筛选这个表，查看`total_order_amount`超过$5,000的客户订单。换句话说，我们想生成这样的内容：
- en: '![](../Images/71900169bfde82bc93552023305bac6a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71900169bfde82bc93552023305bac6a.png)'
- en: Image by author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: 'A typical way of producing this would be to use a `WITH` clause:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一种生成这个结果的典型方法是使用`WITH`子句：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '… or a nested subquery:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: …或者一个嵌套子查询：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, while both of these are perfectly acceptable solutions, the `QUALIFY`
    clause enables us to simplify and shorten this code significantly. We could simply
    write:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，虽然这两种方法都是完全可接受的解决方案，但`QUALIFY`子句使我们能够显著简化和缩短这段代码。我们可以简单地写：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: which would return **the exact same result**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回**完全相同的结果**。
- en: The QUALIFY statement is pure syntactic sugar
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QUALIFY 语句是纯粹的语法糖
- en: The great thing about the `QUALIFY` clause is that it is evaluated *after* window
    functions are computed. This means that you can reference the window function
    column using the alias you assigned to it. In the example above, I demonstrated
    this by writing `QUALIFY total_order_amount..`, referencing the alias `total_order_amount`
    which I assigned at the point of creating the original window function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`QUALIFY` 子句的一个好处是它在窗口函数计算*之后*被评估。这意味着你可以使用你分配给窗口函数列的别名进行引用。在上面的例子中，我通过编写`QUALIFY
    total_order_amount..`演示了这一点，引用了我在创建原始窗口函数时分配的别名`total_order_amount`。'
- en: '![](../Images/6c27fefe0006b11daf24aaf61aff7995.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c27fefe0006b11daf24aaf61aff7995.png)'
- en: Image by author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: 'It’s also not necessary to write the window function in the `SELECT` clause.
    For example, if I didn’t want to actually show the total order amount as a separate
    column, but still needed to filter on this window function, I could write:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `SELECT` 子句中不必写窗口函数。例如，如果我不想实际将总订单金额显示为单独的列，但仍需在这个窗口函数上进行过滤，我可以这样写：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'which would return the same result, but without the `total_order_amount` column:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回相同的结果，但没有 `total_order_amount` 列：
- en: '![](../Images/b691592d3a61e309d1e921cfe20051bf.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b691592d3a61e309d1e921cfe20051bf.png)'
- en: Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: On top of all this, the `QUALIFY` clause can also be [slightly more efficient](https://stackoverflow.com/a/70149163)
    than using subqueries or `WITH`. Not only will this speed up your development
    time; it also helps a ton with cost optimisation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，`QUALIFY` 子句也可以比使用子查询或 `WITH` [稍微更高效](https://stackoverflow.com/a/70149163)。这不仅会加快你的开发时间；它还对成本优化有很大帮助。
- en: 'Another example: Select the top-N-per-group'
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个例子：选择每组中的前N名
- en: A common use case of the `QUALIFY` clause is to select the top-N-per-group.
    For example, imagine that we had the following table `sales` which records every
    sale that a shop makes on a given day. Each row represents a single transaction
    and contains the timestamp of the sale, the product purchased, and the total amount
    of money spent in that sale.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`QUALIFY` 子句的一个常见用例是选择每组中的前N名。例如，假设我们有一个记录每个商店在某一天进行的每笔销售的 `sales` 表。每一行代表一次交易，并包含销售的时间戳、购买的产品以及该笔销售中花费的总金额。'
- en: '![](../Images/bd09bfcd7fc881ac0dadd15e09c1ce44.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd09bfcd7fc881ac0dadd15e09c1ce44.png)'
- en: 'Using the window function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用窗口函数：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'we could assign a row number to each sale, within each product category:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在每个产品类别内给每笔销售分配一个行号：
- en: '![](../Images/f48bd226d1190b4b9e4af46a3cd2547c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f48bd226d1190b4b9e4af46a3cd2547c.png)'
- en: Image by author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'and then, using a `QUALIFY` statement, we could filter the result to only show
    the first row in each category:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `QUALIFY` 语句，我们可以过滤结果，只显示每个类别中的第一行：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/696b61c2159ea89769a5dc7679daec69.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/696b61c2159ea89769a5dc7679daec69.png)'
- en: Image by author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: And there you have it — the magic of `QUALIFY`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样——`QUALIFY` 的魔力。
- en: One final thing
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后一个事情
- en: The `QUALIFY` clause is not yet available in all dialects of SQL. At the time
    of writing, it’s supported by many of the big platforms including BigQuery, Databricks,
    Snowflake, and H2\. If your platform/dialect is not compatible, you’ll have to
    rely on subqueries/`WITH` for now, but you can keep an eye on [Modern SQL](https://modern-sql.com/caniuse/qualify)
    to see when it becomes available.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`QUALIFY` 子句在所有 SQL 方言中尚不可用。在撰写时，它已被许多大型平台如 BigQuery、Databricks、Snowflake 和
    H2\ 支持。如果你的平台/方言不兼容，你现在需要依赖子查询/`WITH`，但你可以关注[现代 SQL](https://modern-sql.com/caniuse/qualify)以查看它何时可用。'
