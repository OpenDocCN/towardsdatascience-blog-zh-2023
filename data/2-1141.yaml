- en: How to Create a Time Series Network Graph Visualization in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Python 中创建时间序列网络图可视化
- en: 原文：[https://towardsdatascience.com/how-to-create-a-time-series-network-graph-visualization-in-python-8da0227fa4b8](https://towardsdatascience.com/how-to-create-a-time-series-network-graph-visualization-in-python-8da0227fa4b8)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-create-a-time-series-network-graph-visualization-in-python-8da0227fa4b8](https://towardsdatascience.com/how-to-create-a-time-series-network-graph-visualization-in-python-8da0227fa4b8)
- en: Use Plotly and NetworkX to show how a network evolves over time
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Plotly 和 NetworkX 展示网络如何随时间演变
- en: '[](https://ds-claudia.medium.com/?source=post_page-----8da0227fa4b8--------------------------------)[![Claudia
    Ng](../Images/e3f42d73e4a459a4a276aaa293fa6861.png)](https://ds-claudia.medium.com/?source=post_page-----8da0227fa4b8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8da0227fa4b8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8da0227fa4b8--------------------------------)
    [Claudia Ng](https://ds-claudia.medium.com/?source=post_page-----8da0227fa4b8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ds-claudia.medium.com/?source=post_page-----8da0227fa4b8--------------------------------)[![Claudia
    Ng](../Images/e3f42d73e4a459a4a276aaa293fa6861.png)](https://ds-claudia.medium.com/?source=post_page-----8da0227fa4b8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8da0227fa4b8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8da0227fa4b8--------------------------------)
    [Claudia Ng](https://ds-claudia.medium.com/?source=post_page-----8da0227fa4b8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8da0227fa4b8--------------------------------)
    ·9 min read·Oct 26, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8da0227fa4b8--------------------------------)
    ·阅读时间 9 分钟·2023年10月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/32d47dc42370ba8c6be98f368dde3c7a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32d47dc42370ba8c6be98f368dde3c7a.png)'
- en: Visualizing changes in connections to a selected physician over time
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化与选定医生的连接随时间变化
- en: In this article, you will learn to create a time series network visualization
    in Python that shows how connections in a network develop over time, as illustrated
    in the animation above. Network data is very effective for revealing connections,
    and time series data can be useful for uncovering trends and anomalies in the
    underlying data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你将学习如何在 Python 中创建时间序列网络可视化，展示网络中的连接如何随时间发展，如上方动画所示。网络数据对于揭示连接非常有效，而时间序列数据可以用来揭示基础数据中的趋势和异常。
- en: 'For this article, we will create an example using a Kaggle [dataset](https://www.kaggle.com/datasets/rohitrox/healthcare-provider-fraud-detection-analysis/data?select=Train_Beneficiarydata-1542865627584.csv)
    on healthcare provider fraud. (This dataset is currently licensed CC0: Public
    Domain on Kaggle. Please note that this dataset might not be accurate, and it’s
    used in this article only for demonstration purposes).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '在本文中，我们将使用 Kaggle 上关于医疗服务提供者欺诈的 [数据集](https://www.kaggle.com/datasets/rohitrox/healthcare-provider-fraud-detection-analysis/data?select=Train_Beneficiarydata-1542865627584.csv)
    创建一个示例。（该数据集目前在 Kaggle 上的许可证为 CC0: 公众领域。请注意，该数据集可能不准确，仅用于本文演示目的）。'
- en: We will combine data from the provided link to get a cluster of fraudulent claims
    associated with the given attending physician, followed by plotting the connections
    between this physician and other entities (up to a certain number of hops away)
    over time based on the claim start date.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将结合提供的链接中的数据，获取与给定主治医生相关的欺诈性索赔的集群，然后根据索赔开始日期绘制该医生与其他实体之间的连接（最多到某个跳数）随时间的变化。
- en: Be sure to have [Plotly](https://plotly.com/python/getting-started/) and [NetworkX](https://networkx.org/documentation/stable/install.html)
    installed in your Python virtual environment.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在你的 Python 虚拟环境中安装了 [Plotly](https://plotly.com/python/getting-started/) 和
    [NetworkX](https://networkx.org/documentation/stable/install.html)。
- en: If you want to learn an effective way to visualize how a network grows over
    time, read on!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想学习一种有效的方法来可视化网络如何随时间增长，请继续阅读！
- en: Findings from Dataset
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集发现
- en: This dataset contains a total of 82,063 distinct physicians, of which 20,592
    have at least one fraudulent claim. While the majority of these physicians have
    only a handful of fraudulent claims, there is a small fraction who are prolific
    fraudsters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集包含总共 82,063 名不同的医生，其中 20,592 名至少有一个欺诈性索赔。虽然大多数这些医生只有少数几个欺诈性索赔，但也有少数人是极其活跃的欺诈者。
- en: The top 25% of physicians have at least 5 claims, and the most egregious example
    is a physician with 2,534 fraudulent claims!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前 25% 的医生至少有 5 个索赔，最严重的例子是一位有 2,534 个欺诈性索赔的医生！
- en: While it is easy to calculate these statistics on the physician level, a time
    series network visualization is a good way to make sense of the scale of fraud
    committed by this physician and over what timeframe.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在医生层面计算这些统计数据很容易，但时间序列网络可视化是理解该医生实施的诈骗规模及其时间范围的一个好方法。
- en: Finding Connections
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找连接
- en: Given a physician, what if we could find its connections that also have fraudulent
    claims up to a certain number of hops away?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个医生，如果我们能够找到其连接，并且这些连接也有欺诈性索赔，最多跳数为一定范围内，会怎样呢？
- en: For this, we will write a function that takes a DataFrame with claims data,
    AttendingPhysician (string) and MaxHops (integer) as arguments and returns a DataFrame
    containing fraudulent claims associated with the given AttendingPhysician up to
    a maximum number of hops away.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将编写一个函数，该函数接受包含索赔数据的 DataFrame、AttendingPhysician（字符串）和 MaxHops（整数）作为参数，并返回一个
    DataFrame，包含与给定 AttendingPhysician 相关的欺诈性索赔，最多跳数为 MaxHops。
- en: Starting from one physician, this function executes to identify beneficiaries
    and physicians with fraudulent claims connected to the cluster. It continues as
    long as the number of iterations is at or under MaxHops and it hasn’t converged,
    meaning that the cluster size at the end of the previous iteration is smaller
    than the cluster size after this iteration.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个医生开始，该函数执行以识别与集群连接的具有欺诈性索赔的受益人和医生。只要迭代次数等于或小于 MaxHops 并且尚未收敛，即前一轮迭代的集群大小小于这一轮迭代的集群大小，函数将继续执行。
- en: 'Below is a code snippet illustrating how to do this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个代码片段，演示如何执行此操作：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that you know how to get connections of fraudulent claims associated with
    a given physician, let’s pick a random physician. Let’s use AttendingPhysician
    `PHY379763` as an example, who has only 2 claims but both were fraudulent.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何获取与给定医生相关的欺诈性索赔连接，让我们选择一个随机医生。以 AttendingPhysician `PHY379763` 为例，该医生只有
    2 个索赔，但这两个索赔都是欺诈性的。
- en: After using the function above to find this physician’s connections up to 2
    hops away, the resulting dataset has 1,483 fraudulent claims containing 920 unique
    beneficiaries and 2 other physicians (so 3 distinct physicians altogether).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用上述函数找到该医生的连接（最多 2 跳）后，结果数据集中包含 1,483 个欺诈性索赔，涉及 920 个独特受益人和 2 位其他医生（总共 3 位不同的医生）。
- en: It is crazy to think that looking at the connections to a physician with only
    2 claims can expand so quickly!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，观察到一个仅有 2 个索赔的医生的连接，竟然可以如此迅速地扩展，实在令人惊讶！
- en: Creating the Time Series Network Plot
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建时间序列网络图
- en: 'After gathering the connections data, we are now ready to create a visualization.
    This can be broken down into 4 steps: i) building the main graph, ii) drawing
    a graph per time interval, iii) plotting the graphs per time interval, iv) configuring
    the figure.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集完连接数据后，我们现在准备创建可视化。这个过程可以分为 4 个步骤：i) 构建主图，ii) 按时间间隔绘制图形，iii) 按时间间隔绘制图表，iv)
    配置图形。
- en: I. Building the Graph
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I. 构建图形
- en: 'To begin, initialize an empty graph using `networkx`and add data to it from
    the DataFrame. In this example, the graph will contain two sets of nodes: one
    set of nodes for beneficiaries and another set for physicians.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 `networkx` 初始化一个空图，并从 DataFrame 中添加数据。在这个示例中，图将包含两组节点：一组是受益人节点，另一组是医生节点。
- en: It is important to label the nodes with {type, ID (`BeneID`or `AttendingPhysician`),
    claim start date (`ClaimStartDt`)}, because later on we will use the date to select
    nodes to remove for our monthly graphs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 给节点标注 {type, ID (`BeneID` 或 `AttendingPhysician`), 索赔开始日期 (`ClaimStartDt`)}
    是很重要的，因为稍后我们将使用日期来选择节点，以便从我们的月度图表中删除这些节点。
- en: Next, add the edges between connections. In this case, the edges exist between
    connected beneficiaries and physicians, and the label of these edges contain the
    {beneficiary ID (`BeneID`), physician ID (`AttendingPhysician`), claim start date
    (`ClaimStartDt`)}. Again, we will use the date to select edges to remove for the
    monthly graphs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加连接之间的边。在这种情况下，边存在于连接的受益人和医生之间，这些边的标签包含 {受益人 ID (`BeneID`), 医生 ID (`AttendingPhysician`),
    索赔开始日期 (`ClaimStartDt`)}。同样，我们将使用日期来选择边，以便从月度图表中删除这些边。
- en: 'Below is what this section looks like:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本节的内容：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the `RootPhysicianID` is the given physician ID that we started with,
    and we use a different label for this node so that we can give it a distinct color
    later on when plotting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`RootPhysicianID` 是我们开始时使用的给定医生 ID，我们为该节点使用不同的标签，以便在绘图时可以给它分配不同的颜色。
- en: Also, it is important to get the positions of nodes and edges using the`nx.spring_layout()`
    function, so that we can supply these positions to monthly graphs in order for
    nodes and edges to appear consistently in the same positions over time later on
    in the plotting step.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用 `nx.spring_layout()` 函数获取节点和边缘的位置也很重要，以便在绘图步骤中将这些位置提供给每月图形，以便节点和边缘可以在时间上保持一致的位置。
- en: II. Draw a Graph per Interval
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: II. 每个间隔绘制图形
- en: Next, decide on what time interval and frequency you would like your visualization
    to show. In this case, we will be using monthly intervals, so the resulting plot
    will create sliders for each month in the dataset.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，决定可视化图表的时间间隔和频率。在这种情况下，我们将使用按月的间隔，因此生成的图表将为数据集中的每个月创建滑块。
- en: 'Start by identifying the months to loop through by grabbing the unique months
    in the dataset:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过抓取数据集中唯一的月份来确定需要循环的月份：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, loop through each month to duplicate the original graph (`G`) and create
    a new graph (`new_G`) that we can modify to show data for this month. Then, identify
    and grab nodes and edges to remove if they occur after this month based on the
    claim start date in the labels. Remove these nodes, edges and any self-loops:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，遍历每个月以复制原始图表（`G`），并创建一个新的图表（`new_G`），我们可以修改它以显示该月的数据。然后，识别并删除在此月份之后出现的节点和边缘，基于标签中的索赔开始日期。删除这些节点、边缘和任何自环：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have a graph created for every month, it is time to plot them and
    add them to a Plotly Figure.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为每个月创建了一个图形，是时候绘制它们并将它们添加到 Plotly 图中。
- en: III. Plotting the Graph
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: III. 绘制图形
- en: To plot a network graph using Plotly, start by selecting the positions (x- and
    y-coordinates) of nodes and edges from the positions selected in the previous
    step stored in the variable `pos`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Plotly 绘制网络图形，首先从前一步中存储在变量 `pos` 中的位置选择节点和边缘的 x 和 y 坐标。
- en: We will also add extra text and/ or colors for different nodes, and then add
    these edges and nodes to the figure. We will choose and define colors for different
    nodes and store this in a dictionary called `color_mappings`. The keys correspond
    to the node labels and the values are the colors’ hex codes. Here is a helpful
    [website](https://palettes.shecodes.io/) for choosing colors that go well together.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会为不同的节点添加额外的文本和/或颜色，然后将这些边缘和节点添加到图形中。我们将选择并定义不同节点的颜色，并将其存储在一个名为 `color_mappings`
    的字典中。键对应于节点标签，值是颜色的十六进制代码。这里有一个有用的 [网站](https://palettes.shecodes.io/)，可以选择搭配好的颜色。
- en: 'Below is the function to plot a graph:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是绘制图形的函数：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function above is useful and will be reused to plot each monthly graph
    as such:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的函数很有用，将用于绘制每个月的图形，如下所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: IV. Configuring Figure
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IV. 配置图形
- en: Up until this step, we have a main graph (`G`) containing all nodes and edges,
    monthly graphs (multiple `new_G`‘s) containing all nodes and edges with claim
    start dates up to that month, and a Plotly figure (`fig`) containing multiple
    traces that plots the network graphs for each month.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个包含所有节点和边缘的主图（`G`），多个包含所有节点和边缘（含索赔开始日期到该月的 `new_G`）的每月图形，以及一个包含多个数据集的
    Plotly 图（`fig`），绘制了每个月的网络图形。
- en: Next, we have to add the steps for the slider. There should be a step for each
    month on the slider, and we need to configure what traces to show at each step.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加滑块的步骤。滑块上应该有每个月的步骤，我们需要配置每个步骤显示的数据显示。
- en: 'Remember that we have two sets of traces, one for nodes and one for edges for
    each month, so we will set the visibility for these traces accordingly:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们每个月有两个数据集，一个是节点，一个是边缘，因此我们将相应地设置这些数据集的可见性：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After creating steps for the slider, we can update the layout of the figure
    to add the slider, title and other miscellaneous configurations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在为滑块创建步骤后，我们可以更新图形的布局，添加滑块、标题和其他杂项配置：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: All that is left is to show the figure and your time series network plot should
    appear!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是显示图形，你的时间序列网络图应该会出现！
- en: 'Finally, use the following command if you wish to save the interactive plot
    as an html file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你希望将交互式图保存为 HTML 文件，请使用以下命令：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Conclusion
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Network visualizations are very powerful, and adding a time series component
    make them even more informative! Visualizing the growth of a network has many
    applications in various fields, ranging from understanding the origins of a disease
    to following the expansion of services and more.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 网络可视化非常强大，加入时间序列组件使其更加信息丰富！可视化网络的增长在各种领域都有许多应用，从理解疾病的起源到跟踪服务的扩展等等。
- en: The example we saw involved finding fraudulent claims associated with a selected
    physician up to two hops away, and then plotting this out over time to see how
    fraud for this cluster developed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的例子涉及到查找与选定医生相关的欺诈性索赔，最多两步远，然后绘制这些数据，查看该集群的欺诈行为如何发展。
- en: 'To recap, you learned how to find connections to a given entity up to a maximum
    number of hop and create a time series network plot by:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，你学会了如何找到与给定实体的连接，最多经过的跳数，并通过以下方式创建时间序列网络图：
- en: i) Building the main graph (`G`),
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: i) 构建主要图（`G`），
- en: ii) Drawing a new graph for each time interval (monthly in this case),
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 为每个时间间隔（在此情况下为每月）绘制新图，
- en: iii) Plotting each monthly graph (multiple `new_G`’s) and adding them to the
    figure (`fig`),
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: iii) 绘制每个月的图表（多个 `new_G`），并将其添加到图形（`fig`）中，
- en: iv) Configuring the slider for the figure.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: iv) 配置图形的滑块。
- en: It is fascinating to visualize how the connections between physicians and beneficiaries
    grew over time!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 看到医生和受益人之间的联系随着时间的推移而增长，真是令人着迷！
- en: Comment below with your thoughts and learnings. What data will you try this
    on? What insights did you draw from creating the visualization?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面评论你的想法和学习经历。你会尝试用这些数据做什么？在创建可视化过程中你得出了什么见解？
- en: Link to this [Jupyter notebook](https://github.com/claudian37/DS_Portfolio/tree/master/healthcare_fraud_network_viz)
    on Github
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接到这个 [Jupyter notebook](https://github.com/claudian37/DS_Portfolio/tree/master/healthcare_fraud_network_viz)
    在 Github 上
- en: '*Do you feel stuck in your analyst role? You might even feel a sense of imposter
    syndrome trying to learn new skills without a PhD or computer science background.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*你在分析师角色中感到困惑吗？你可能会感到一种冒名顶替综合症，试图在没有博士学位或计算机科学背景的情况下学习新技能。*'
- en: '*I transitioned to Data Science in 2020 without a technical background, and
    I want to help others do the same. I’ve created a* [***FREE Five-Day Data Science
    LaunchPad Email Course***](http://www.ds-claudia.com) *to jump-start your career.
    🚀*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*我在 2020 年转行数据科学，没有技术背景，我希望帮助其他人做到这一点。我创建了一个* [***免费五天数据科学启动课程电子邮件课程***](http://www.ds-claudia.com)
    *来启动你的职业生涯。🚀*'
- en: '[www.ds-claudia.com](http://www.ds-claudia.com)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.ds-claudia.com](http://www.ds-claudia.com)'
