- en: Important MySQL Data Definition Language (DDL) commands we should know for managing
    our tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应该了解的重要 MySQL 数据定义语言（DDL）命令，用于管理我们的表
- en: 原文：[https://towardsdatascience.com/learn-common-database-managing-commands-as-a-data-engineer-4d199cfb15ae](https://towardsdatascience.com/learn-common-database-managing-commands-as-a-data-engineer-4d199cfb15ae)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/learn-common-database-managing-commands-as-a-data-engineer-4d199cfb15ae](https://towardsdatascience.com/learn-common-database-managing-commands-as-a-data-engineer-4d199cfb15ae)
- en: Learn common database managing commands as a data engineer
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为数据工程师，学习常用的数据库管理命令
- en: '[](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)
    ·8 min read·Feb 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)
    ·阅读时间 8 分钟·2023年2月28日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/9ab632bea48c228ba8500f79c5cc4dc1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ab632bea48c228ba8500f79c5cc4dc1.png)'
- en: Image by geralt on Pixabay
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 geralt 提供于 Pixabay
- en: As a data engineer, checking and updating the schemas of tables is our bread
    and butter. There are plenty of tutorials online already but few of them focus
    on the conventions that should be followed. SQL is very flexible and can work
    in a “robust” way. You can use both lowercase and uppercase queries and name your
    database/tables/columns/indexes/views in whatever way you want. However, the price
    is that the readability is reduced and it becomes difficult to maintain because
    different people may have different ways of writing SQL queries.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据工程师，检查和更新表的模式是我们的日常工作。虽然网上已经有很多教程，但很少有教程关注应该遵循的约定。SQL 非常灵活，可以以“稳健”的方式工作。你可以使用小写或大写的查询，并以任何你想要的方式命名数据库/表/列/索引/视图。然而，代价是可读性降低，维护变得困难，因为不同的人可能会以不同的方式编写
    SQL 查询。
- en: In this post, we will introduce some common commands for managing table schemas
    in MySQL, with a focus on the convention and best practices for each operation.
    It can work as a handbook (with necessary adjustments) for new data engineers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将介绍一些用于管理 MySQL 表模式的常用命令，重点讲解每个操作的约定和最佳实践。它可以作为新数据工程师的手册（需进行必要的调整）。
- en: Preparation
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use Docker to start a MySQL 8 container which will work as the MySQL
    server for this post:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Docker 启动一个 MySQL 8 容器，它将作为这篇文章的 MySQL 服务器：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will create our database (also called schemas in MySQL) and tables in this
    MySQL server. To get started, let’s create a database to store our dummy data:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个 MySQL 服务器中创建我们的数据库（在 MySQL 中也称为模式）和表。首先，让我们创建一个数据库来存储我们的虚拟数据：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A database name should be descriptive, concise, and clear and contain no special
    characters except underscores. It should preferably be lowercase so we can tell
    it easily from MySQL keywords. The same naming convention applies to table and
    column names.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库名称应具有描述性、简洁明了，并且不包含特殊字符，除了下划线之外。它最好是小写的，以便与 MySQL 关键字区分开来。相同的命名约定也适用于表名和列名。
- en: We will use DBeaver to write queries and view table data in this post.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将使用 DBeaver 来编写查询并查看表数据。
- en: Create a table
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表
- en: Let’s now create our first table which will store customer data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建第一个表，它将存储客户数据。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can use singular or plural table names. I prefer plural as a table can be
    thought of as a container for data records.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用单数或复数表名。我更喜欢使用复数，因为表可以被视为数据记录的容器。
- en: 'The data definition language (DDL) query for an existing table can be found
    by this command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下命令查找现有表的数据定义语言（DDL）查询：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It’s recommended to specify the schema name when writing queries so you can
    have better support for auto-completion.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐在编写查询时指定模式名称，以便更好地支持自动补全。
- en: By default, MySQL is case-sensitive regarding database names, table names, and
    aliases. However, it is case-insensitive for column names. Therefore, it can be
    very flexible for the naming of column names. However, we should stick to some
    naming convention for the same database. It doesn’t matter whether you use a camel
    case or a snake case, you just need to be consistent. However, you may have some
    preferences depending on your backend programming language. For example, as Python
    developers, we would prefer the snake case.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MySQL对数据库名称、表名称和别名是区分大小写的。然而，对列名称不区分大小写。因此，列名称的命名可以非常灵活。然而，我们应该遵循一些相同数据库的命名约定。无论你使用驼峰命名还是蛇形命名，你只需要保持一致。然而，你可能会根据你的后端编程语言有一些偏好。例如，作为Python开发者，我们更倾向于使用蛇形命名。
- en: Besides, as you see we give the prefix `ix` (meaning index) to the index name.
    We should generally avoid giving prefixes for column names in order to make the
    queries more concise. However, we should provide prefixes for indexes or constraints
    so they can be more indicative when shown in some errors. We would rarely need
    to reference indexes or constraints explicitly so being concise is not a problem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如你所见，我们将前缀`ix`（表示索引）加到索引名称上。我们通常应该避免给列名称加前缀，以使查询更简洁。然而，我们应该为索引或约束提供前缀，以便在某些错误中更具指示性。我们很少需要显式引用索引或约束，因此简洁不是问题。
- en: 'Some commonly used prefixes are:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的前缀是：
- en: '`ix` for indexes.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ix`用于索引。'
- en: '`fk` for foreign key constraints.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fk`用于外键约束。'
- en: '`uq` for unique key constraints.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uq`用于唯一键约束。'
- en: 'Besides, there are some conventions regarding how the indexes or constraints
    should be named:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些关于如何命名索引或约束的约定：
- en: 'Indexes: `ix_%(column_0_label)s`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引：`ix_%(column_0_label)s`
- en: 'Foreign keys: `fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外键：`fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s`
- en: 'Unique keys: `uq_*%(table_name)s*_*%(column_0_name)s*`,'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一键：`uq_*%(table_name)s*_*%(column_0_name)s*`，
- en: We will introduce some of them later in this post.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本帖中稍后介绍其中的一些。
- en: Rename or duplicate a table
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重命名或复制一个表
- en: 'We can use the `RENAME` command to rename a table:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`RENAME`命令重命名一个表：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you want to duplicate a table from one schema to another one, you would need
    to do it in two steps. For example, let’s create a new `customers_data` schema
    and duplicate the `customers` table there.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将一个表从一个模式复制到另一个模式，你需要分两步进行。例如，让我们创建一个新的`customers_data`模式，并将`customers`表复制到那里。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this way, the data type and indexes of the old table will be kept in the
    new table. If you do it as shown below using `CREATE TABLE … SELECT…` then the
    data type (actually will be inferred) and indexes will be lost, which is not desired
    in almost all cases:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，旧表的数据类型和索引将保留在新表中。如果你按照下面所示使用`CREATE TABLE … SELECT…`，则数据类型（实际上会被推断）和索引会丢失，这在几乎所有情况下都是不希望的：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can use the `SHOW CREATE TABLE` command to check the schema of the new table
    created.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`SHOW CREATE TABLE`命令检查新创建表的模式。
- en: 'If you need to move a table from one database (different host or port) to another
    one, you can dump the table into a SQL file on one host, and then load it into
    the other one:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要将一个表从一个数据库（不同的主机或端口）移动到另一个数据库，你可以将表导出到一个SQL文件中，然后在另一个数据库中加载：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`mysqldump` is available after you have installed the MySQL client:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了MySQL客户端后，可以使用`mysqldump`：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The hosts can be the same for the two databases. In this case, the port would
    be different.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 两个数据库的主机可以相同。在这种情况下，端口会不同。
- en: Note the options specified for `mysqldump`, which are needed in most cases.
    Especially, with `--single-transaction`, the table won’t be locked when it’s being
    dumped.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`mysqldump`指定的选项，这在大多数情况下是必要的。特别是，使用`--single-transaction`时，表在导出时不会被锁定。
- en: Add/Delete/Change columns
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加/删除/更改列
- en: 'For a demonstration of the commands, let’s perform the following actions. The
    operations may not make much sense, the focus is on the commands used:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示命令，让我们执行以下操作。这些操作可能没有太大意义，重点是使用的命令：
- en: Delete the `name` column with `DROP`,
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`DROP`删除`name`列，
- en: Add the `name` column back with `ADD`,
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ADD`重新添加`name`列，
- en: Change the data type of a column with `MODIFY`;
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`MODIFY`更改列的数据类型；
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we can use the `AFTER column_name`keyword to change the order of the
    columns. If a column should be changed to be the first one, then we need to use
    the `FIRST` keyword rather than `AFTER column_name`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们可以使用 `AFTER column_name` 关键字来改变列的顺序。如果列应该被改为第一个，则需要使用 `FIRST` 关键字，而不是 `AFTER
    column_name`。
- en: 'For example, let’s change the `name` column to be the first one:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们将 `name` 列改为第一个：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Rename a column
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重命名列
- en: 'We can just rename a column without changing the data type using `RENAME COLUMN
    A TO B`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以仅使用 `RENAME COLUMN A TO B` 来重命名列而不更改数据类型：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that the `COLUMN` keyword can be omitted for the `ADD`, `DROP`, `MODIFY`,
    as well as the `CHANGE` command to be introduced, but not for the `RENAME` command
    here.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`COLUMN` 关键字可以在 `ADD`、`DROP`、`MODIFY` 以及即将介绍的 `CHANGE` 命令中省略，但在 `RENAME`
    命令中不能省略。
- en: 'We can also use the `CHANGE` command to rename a column and also change the
    data type. Let’s change `name` to `username` and also change the length to 100:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `CHANGE` 命令重命名列并更改数据类型。让我们将 `name` 改为 `username` 并将长度改为 100：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Work with foreign keys
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用外键
- en: 'Let’s create two new tables to demonstrate the usage of foreign keys. A new
    `products` table will store the products info and an `orders` table the orders
    made by customers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个新表来演示外键的使用。一个新的 `products` 表将存储产品信息，`orders` 表将存储客户的订单：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that the `id` column has no prefix in the `customers` and `products` tables
    but has in the `orders` table. This is needed because there are two IDs there,
    one for the customer and another for the product.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`customers` 和 `products` 表中的 `id` 列没有前缀，但在 `orders` 表中有前缀。这是因为那里的 ID 有两个，一个用于客户，另一个用于产品。
- en: If you check the data types of the `id` columns, you will find they are the
    same as those in the `customers` and `products` tables. This is required for adding
    foreign keys, as the data type of the column must be the same in the current table
    and in the reference table.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检查 `id` 列的数据类型，你会发现它们与 `customers` 和 `products` 表中的数据类型相同。这是添加外键的要求，因为列的数据类型必须在当前表和引用表中相同。
- en: A composite primary key was created using `customer_id` and `product_id`. Note
    that we need to create a separate index for `product_id`, but not for `customer_id`,
    which is covered by the composite primary key because it’s the first one in the
    composite key.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `customer_id` 和 `product_id` 创建了一个复合主键。注意，我们需要为 `product_id` 创建一个单独的索引，但不需要为
    `customer_id` 创建，因为它被复合主键覆盖，因为它是复合键中的第一个。
- en: Also pay attention to the naming convention for the foreign key constraints,
    which follows the naming convention introduced in [this link](https://docs.sqlalchemy.org/en/14/core/constraints.html#configuring-a-naming-convention-for-a-metadata-collection).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意外键约束的命名约定，遵循了[此链接](https://docs.sqlalchemy.org/en/14/core/constraints.html#configuring-a-naming-convention-for-a-metadata-collection)中介绍的命名约定。
- en: 'To check the indexes of a table, we can run one of the following two queries:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查表的索引，我们可以运行以下两个查询之一：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that the above queries do not return foreign keys. If we need to check
    the foreign keys, we need to run this query:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，上述查询不会返回外键。如果需要检查外键，我们需要运行以下查询：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that the two special tables `INFORMATION_SCHEMA.STATISTICS` and `INFORMATION_SCHEMA.KEY_COLUMN_USAGE`
    are system tables and are normally referenced in uppercase.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，两个特殊的表 `INFORMATION_SCHEMA.STATISTICS` 和 `INFORMATION_SCHEMA.KEY_COLUMN_USAGE`
    是系统表，通常以大写字母引用。
- en: Add and delete indexes and constraints
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和删除索引及约束
- en: Let’s demonstrate how to add and delete indexes and constraints. We cannot modify
    an index or constraint because once the condition is changed for an index/constraint,
    it has to be regenerated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示如何添加和删除索引和约束。我们不能修改索引或约束，因为一旦条件改变，索引/约束必须重新生成。
- en: 'Let’s first drop the primary key, indexes, and foreign keys for the `orders`
    table:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们删除 `orders` 表的主键、索引和外键：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note the way we specify how a foreign key should be dropped. It should be `DROP
    FOREIGN KEY …`, rather than `DROP CONSTRAINT …`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们指定如何删除外键的方式。应该使用 `DROP FOREIGN KEY …`，而不是 `DROP CONSTRAINT …`。
- en: 'And now let’s add them back:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将它们添加回来：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The syntax is similar to that in the DDL query above.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 语法类似于上面的 DDL 查询。
- en: Create or update a view
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建或更新视图
- en: A MySQL view works just like a table and is treated like a table. A view normally
    contains some selected columns from one or more tables based on some filtering
    conditions. It can be used to quickly check some specific data from one or more
    tables without writing `JOIN` and `WHERE` conditions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 视图与表的工作方式相同，并且被视为表。视图通常包含一个或多个表中的一些选定列，基于一些过滤条件。它可以用来快速查看一个或多个表中的特定数据，而无需编写
    `JOIN` 和 `WHERE` 条件。
- en: 'Let’s create a view for the `orders` table so we can get the details of the
    customers and products for the orders directly:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 `orders` 表创建一个视图，以便可以直接获取订单的客户和产品详情：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The name of a view should be indicative of its usage. In this case, `orders_with_details`
    is better than `orders_view` as the former is more indicative of what’s contained
    in the view.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 视图的名称应能指示其用途。在这种情况下，`orders_with_details` 比 `orders_view` 更好，因为前者更能说明视图中包含的内容。
- en: Standards for writing SQL queries
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 SQL 查询的标准
- en: 'We should write SQL queries in an easy-to-read way. There is no strict standard
    for how to write SQL queries. However, following the rules below will make your
    queries much easier to read and maintain:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应以易于阅读的方式编写 SQL 查询。虽然没有严格的标准，但遵循以下规则将使你的查询更易于阅读和维护：
- en: Put all SQL keywords in uppercase.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有 SQL 关键字写成大写字母。
- en: Put all database names, columns, and aliases in lowercase.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有数据库名称、列名和别名写成小写字母。
- en: Provide standard acronyms as aliases for your tables. For example, `products`
    => `p`, `product_attributes` => `pa`, etc. Don’t use arbitrary table aliases as
    they will make the queries much more difficult to read.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的表提供标准缩写作为别名。例如，`products` => `p`，`product_attributes` => `pa` 等。不要使用任意的表别名，因为这会使查询变得更加难以阅读。
- en: Start `SELECT`, `FROM,` `JOIN`, `WHERE`, `GROUP BY`, `ORDER BY`, etc statements
    on a new line.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `SELECT`、`FROM`、`JOIN`、`WHERE`、`GROUP BY`、`ORDER BY` 等语句另起一行。
- en: Start each `ON` and `AND` conditions on a new line.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 `ON` 和 `AND` 条件应另起一行。
- en: The same formatting standard applies to nested queries.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的格式化标准适用于嵌套查询。
- en: You can format your SQL queries automatically in DBeaver or VS code (with some
    SQL extensions). However, the formatting is not perfect and we normally need to
    make some manual adjustments based on the rules above.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 DBeaver 或 VS code（配合一些 SQL 扩展）中自动格式化 SQL 查询。不过，格式化效果并不完美，我们通常需要根据上述规则进行一些手动调整。
- en: In this post, we have introduced some common and handy commands for managing
    table schemas in MySQL. We have covered how databases, tables, columns, indexes,
    and views should be created and updated, with a focus on the convention and best
    practices for each operation which can work as starting guidance for new data
    engineers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了一些用于管理 MySQL 表模式的常见且实用的命令。我们涵盖了如何创建和更新数据库、表、列、索引和视图，并重点介绍了每个操作的约定和最佳实践，这些可以作为新数据工程师的起始指导。
- en: 'Related articles:'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关文章：
- en: '[Some Tips for Using DBeaver — A Universal Database Tool](/some-tips-for-using-dbeaver-a-univeral-database-tool-94af18d50671)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一些使用 DBeaver 的技巧 — 一款通用数据库工具](/some-tips-for-using-dbeaver-a-univeral-database-tool-94af18d50671)'
- en: '[Understand the basics of locks and deadlocks in MySQL (Part I)](https://lynn-kwong.medium.com/understand-the-basics-of-locks-and-deadlocks-in-mysql-part-i-92f229db0a)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[了解 MySQL 锁和死锁的基础知识（第一部分）](https://lynn-kwong.medium.com/understand-the-basics-of-locks-and-deadlocks-in-mysql-part-i-92f229db0a)'
