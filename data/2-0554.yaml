- en: 'Containers: How They Work Under the Hood and Why They’re Taking Over the Data
    Science World'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器：它们如何在幕后工作以及为何它们正在主宰数据科学世界
- en: 原文：[https://towardsdatascience.com/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa](https://towardsdatascience.com/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa](https://towardsdatascience.com/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa)
- en: A Beginner’s Guide to Understanding the Magic of Docker
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初学者指南：理解 Docker 的魔力
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)
    ·7 min read·Jan 5, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)
    ·阅读时间 7 分钟·2023年1月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/13ff5f2e19441c4680fe692971465852.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/13ff5f2e19441c4680fe692971465852.png)'
- en: Containerized city — Image generated by Stable Diffusion
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Containerized city — 由 Stable Diffusion 生成的图像
- en: Docker has taken the world by storm, and for a good reason. Lightweight, portable
    containers make it easy to package and deploy applications, ensuring they run
    consistently and reliably on any platform.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 风靡全球，这是有充分理由的。轻量级、可移植的容器使得打包和部署应用程序变得轻而易举，确保它们在任何平台上都能稳定可靠地运行。
- en: But what exactly are Docker containers, and how do they work under the hood?
    A Google search will give you hundreds of articles about how containers compare
    to Virtual Machines (VMs), but this does not answer the question. What does Docker
    do? Is it something they invented? Can we create containers without Docker or
    Podman, or any other platform you may use?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 Docker 容器到底是什么，它们在幕后是如何工作的呢？谷歌搜索会给你数百篇关于容器与虚拟机（VMs）比较的文章，但这并没有回答问题。Docker
    是做什么的？它是他们发明的吗？我们能否在没有 Docker、Podman 或其他任何你可能使用的平台的情况下创建容器？
- en: This series of articles will break down the concept of containers and explain
    how Docker uses them to revolutionize how we build and deploy software. We’ll
    see what Linux namespaces are, how you can use `cgroups` to limit the resources
    a container can dip into, and why overlay file systems play a critical role in
    creating container-like environments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本系列文章将分解容器的概念，并解释 Docker 如何利用这些概念来革新我们构建和部署软件的方式。我们将了解 Linux 名称空间是什么，如何使用 `cgroups`
    限制容器可以使用的资源，以及为何 overlay 文件系统在创建类似容器的环境中扮演着关键角色。
- en: Are you ready to understand the magic of Docker containers? By the end of this
    series, you will be able to create your own container-like environments without
    Docker.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好理解 Docker 容器的魔力了吗？在本系列结束时，你将能够创建自己的类似容器的环境，而无需 Docker。
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=namespaces)
    is a newsletter for those who are curious about the world of MLOps. MLOps is a
    broad field that strives to bring ML models to production in an efficient and
    rerpoducible way. Containers play a crucial role in the pipeline. If you want
    to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=namespaces).
    You’ll hear from me on the first Saturday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[学习速率](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=namespaces)是一个针对对
    MLOps 世界感兴趣的人的新闻通讯。MLOps 是一个广泛的领域，致力于以高效和可重复的方式将 ML 模型投入生产。容器在这个流程中扮演着关键角色。如果你想了解更多类似的话题，请订阅
    [这里](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=namespaces)。你将在每个月的第一个星期六收到我的更新和对最新
    MLOps 新闻和文章的见解！'
- en: The Key Components
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键组件
- en: Let’s move away from Docker a bit and start discussing the key components that
    make up Linux Containers. Linux containers are a powerful technology that allows
    you to run multiple sandboxed processes on a single host.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微远离 Docker，开始讨论构成 Linux 容器的关键组件。Linux 容器是一种强大的技术，允许你在单一主机上运行多个沙箱化进程。
- en: 'These processes share the host’s kernel but have their own user space, meaning
    that they have their own set of libraries, dependencies, and runtime environments.
    There are three key components that make up a Linux container: namespaces, control
    groups (`cgroups`), and overlay file systems.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些进程共享主机的内核，但有自己的用户空间，这意味着它们有自己的一套库、依赖和运行环境。构成 Linux 容器的三个关键组件是：命名空间、控制组（`cgroups`）和覆盖文件系统。
- en: Namespaces is a kernel feature that allows you to create isolated environments
    within a single Linux system. Each namespace has its own view of the system, meaning
    that processes within a namespace are unaware of the processes running in other
    namespaces.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是一个内核特性，它允许你在单一的 Linux 系统中创建隔离的环境。每个命名空间都有自己对系统的视图，这意味着在一个命名空间中的进程无法感知其他命名空间中运行的进程。
- en: Control groups (`cgroups`) are kernel features that allow you to manage and
    allocate resources, such as CPU, memory, and I/O bandwidth, to groups of processes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 控制组（`cgroups`）是内核特性，它允许你管理和分配资源，如 CPU、内存和 I/O 带宽，给进程组。
- en: Overlay file systems allow you to stack one file system on top of another, creating
    a single logical file system. We’ll see why this is important in later articles.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖文件系统允许你将一个文件系统堆叠在另一个文件系统之上，创建一个单一的逻辑文件系统。我们将在后续文章中看到这为什么很重要。
- en: This is a high-level view of what each component that makes up a container does.
    In this article, we will talk more about namespaces. In later articles, we will
    discuss how `cgroups` and the overlay file systems complete the picture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对构成容器的每个组件的高层次概述。在本文中，我们将深入讨论命名空间。在后续文章中，我们将探讨 `cgroups` 和覆盖文件系统如何完成这个整体。
- en: Namespaces
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间
- en: Namespaces are kernel features that allow you to create isolated environments
    within a single Linux system. Each namespace has its own view of the system, meaning
    that processes within a namespace are unaware of the processes running in other
    namespaces. Namespaces are used to create the isolated environments in which containers
    run.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是内核特性，它允许你在单一的 Linux 系统中创建隔离的环境。每个命名空间都有自己对系统的视图，这意味着在一个命名空间中的进程无法感知其他命名空间中运行的进程。命名空间用于创建容器运行的隔离环境。
- en: 'Let’s try a simple analogy: a namespace in Linux is like a room in a house.
    Each room has its own things inside of it, and you can only see and use the things
    in the room you are in. But there might be other rooms in the house with different
    things inside of them, and you can’t see or use those things unless you go into
    those rooms.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个简单的类比：Linux 中的命名空间就像房子中的一个房间。每个房间里都有自己的物品，你只能看到和使用你所在房间里的东西。但房子里可能还有其他房间，里面有不同的东西，除非你进入那些房间，否则你不能看到或使用这些东西。
- en: In Linux, each process (which is like a program that is running on the computer)
    can be in a different namespace. So if you have two processes in different namespaces,
    they can each have their own separate things (like their own list of files or
    their own network connections), and they won’t be able to see or use each other’s
    things. This is useful for keeping different processes separate from each other
    and for making sure that one process can’t interfere with another process.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中，每个进程（类似于计算机上正在运行的程序）可以处于不同的命名空间。因此，如果你有两个进程在不同的命名空间中，它们可以拥有各自独立的资源（比如各自的文件列表或网络连接），而且它们无法看到或使用对方的资源。这对于将不同的进程彼此隔离以及确保一个进程不能干扰另一个进程是非常有用的。
- en: Types of namespaces
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间的类型
- en: 'There are several different types of namespaces in Linux, including the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中有几种不同类型的命名空间，包括以下几种：
- en: '`PID` namespace: Isolates the process ID space so that processes in different
    `PID` namespaces can have the same `PID` without conflicting with each other.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PID` 命名空间：隔离进程 ID 空间，使得不同 `PID` 命名空间中的进程可以具有相同的 `PID` 而不会互相冲突。'
- en: '`net` namespace: Isolates the network stack, including network interfaces,
    IP addresses, and routing tables.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net` 命名空间：隔离网络栈，包括网络接口、IP 地址和路由表。'
- en: '`mount` namespace: Isolates the mount points so that processes in different
    mount namespaces can have their own private file systems that are separate from
    each other and from the host file system.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mount` 命名空间：隔离挂载点，使得不同挂载命名空间中的进程可以拥有各自独立的文件系统，这些文件系统彼此独立，并与主机文件系统隔离。'
- en: '`IPC` namespace: Isolates interprocess communication resources, such as System
    V `IPC` objects and POSIX message queues.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IPC` 命名空间：隔离进程间通信资源，如 System V `IPC` 对象和 POSIX 消息队列。'
- en: '`uts` namespace: Isolates the hostname.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uts` 命名空间：隔离主机名。'
- en: Next, let’s create our own `PID` namespace.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建自己的 `PID` 命名空间。
- en: Create your own namespace
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你自己的命名空间
- en: 'So, let’s create a new `PID` namespace and run the `bash` command in it. First,
    let’s explore the current state of our system using the `pstree` command. I work
    in a VM running Ubuntu in VirtualBox, so the command returns the following output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个新的 `PID` 命名空间并在其中运行 `bash` 命令。首先，让我们使用 `pstree` 命令探索当前系统的状态。我在一个运行
    Ubuntu 的 VirtualBox 虚拟机中工作，因此命令返回了以下输出：
- en: '![](../Images/91e844a4cb5f22aed6fa8cb5db44ef26.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91e844a4cb5f22aed6fa8cb5db44ef26.png)'
- en: '`pstree` — Image by Author'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`pstree` — 作者提供的图片'
- en: 'Here we see the way processes in Linux are structured. Every process has a
    parent except the first process. Typically the `init` process (usually `systemd`)
    will be `PID` 1 and has no parent. To learn more about `systemd` read the following
    story:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到 Linux 中进程的结构。每个进程都有一个父进程，除了第一个进程。通常，`init` 进程（通常是 `systemd`）将是 `PID`
    1，并且没有父进程。要了解更多关于 `systemd` 的信息，请阅读以下故事：
- en: '[](https://medium.com/geekculture/the-rise-of-linux-systemd-a-beginners-guide-8ca1e226103a?source=post_page-----6b94702609aa--------------------------------)
    [## The Rise of Linux Systemd: A Beginner’s Guide'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/geekculture/the-rise-of-linux-systemd-a-beginners-guide-8ca1e226103a?source=post_page-----6b94702609aa--------------------------------)
    [## Linux Systemd 的崛起：初学者指南'
- en: Understanding the Power and Flexibility of Linux Systemd.
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解 Linux Systemd 的强大和灵活性。
- en: medium.com](https://medium.com/geekculture/the-rise-of-linux-systemd-a-beginners-guide-8ca1e226103a?source=post_page-----6b94702609aa--------------------------------)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/geekculture/the-rise-of-linux-systemd-a-beginners-guide-8ca1e226103a?source=post_page-----6b94702609aa--------------------------------)
- en: 'If we create a new `PID` namespace, we expect to have a new tree structure
    with the processes that belong to this namespace. Moreover, the command we will
    run first in this namespace will take the `PID` 1, which will be mapped to a higher
    `PID` number in the host. Let’s see that in action:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建一个新的 `PID` 命名空间，我们期望看到一个新的树结构，其中包含属于此命名空间的进程。此外，我们将在此命名空间中首先运行的命令将获得 `PID`
    1，这将映射到主机上的更高 `PID` 号。让我们看看实际效果：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `unshare` command is the one you want to use to create new namespaces. In
    this context and with these flags, it will create a new `PID` namespace (the `p`
    flag) and a new `IPC` namespace (the `i` flag).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`unshare` 命令是你用来创建新命名空间的命令。在这种情况下，使用这些标志，它将创建一个新的 `PID` 命名空间（`p` 标志）和一个新的 `IPC`
    命名空间（`i` 标志）。'
- en: 'Now, if you try to get the processes running in this namespace, you should
    be able to see `bash` as `PID` 1, right? Let’s check this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你尝试获取在此命名空间中运行的进程，你应该能看到 `bash` 作为 `PID` 1，对吗？让我们来检查一下：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is the result I get in my system:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在系统中得到的结果：
- en: '![](../Images/aba675af1e2d20228d19a6ffc1727d91.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aba675af1e2d20228d19a6ffc1727d91.png)'
- en: ps — Image by Author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ps — 图片由作者提供
- en: So, what is going on? Why do I still see the `init` process as `PID` 1? The
    Linux kernel uses the `/proc` file system to get data about the running processes.
    Thus, we’re missing a component here. We need to also create a new `mount` namespace
    and mount a new `/proc` file system because now we’re getting this information
    from the default `mount` namespace.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，发生了什么？为什么我仍然看到`init`进程作为`PID` 1？Linux内核使用`/proc`文件系统来获取有关正在运行的进程的数据。因此，我们缺少一个组件。我们还需要创建一个新的`mount`命名空间并挂载一个新的`/proc`文件系统，因为现在我们从默认的`mount`命名空间获取这些信息。
- en: 'To resolve this error, we will use the `--mount-proc` flag, which creates a
    new `mount` namespace and mounts a new `/proc` file system. Type `exit` to get
    out of the `PID` namespace you created and run the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决此错误，我们将使用`--mount-proc`标志，它创建一个新的`mount`命名空间并挂载一个新的`/proc`文件系统。输入`exit`以退出你创建的`PID`命名空间，并运行以下命令：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, if you run `ps -ef` again you’ll get what you were looking for:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你再次运行`ps -ef`，你将得到你所寻找的结果：
- en: '![](../Images/79e01f77ad86464553dd1d773f5f453f.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79e01f77ad86464553dd1d773f5f453f.png)'
- en: pc-proc — Image by Author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: pc-proc — 图片由作者提供
- en: Congratulations, you created a new `PID` namespace. This is the first step to
    understanding how containers work under the hood. Of course, it helps if you try
    to run something more meaningful than bash, but keep in mind that you have created
    an isolated view of your system. To exit this view, just type `exit` in your terminal.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你创建了一个新的`PID`命名空间。这是理解容器在后台如何工作的第一步。当然，如果你尝试运行比bash更有意义的东西会更有帮助，但要记住，你已经创建了你系统的一个隔离视图。要退出此视图，只需在终端中输入`exit`。
- en: Conclusion
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Docker containers are a revolutionary technology that has taken the world by
    storm. These lightweight, portable containers make it easy to package and deploy
    applications, ensuring that they run consistently and reliably on any platform.
    But what exactly are Docker containers, and how do they work under the hood?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器是一项颠覆性的技术，它迅速席卷了全球。这些轻量级、可移植的容器使得打包和部署应用程序变得简单，确保它们在任何平台上都能一致且可靠地运行。但是，Docker容器究竟是什么，它们是如何在后台工作的呢？
- en: In this article, we discussed about the key components that make up a Linux
    container and looked at namespaces in detail. Next, we’ll take a deep dive into
    `cgroups`. Our goal is to create a container-like environment without using Docker!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了组成Linux容器的关键组件，并详细查看了命名空间。接下来，我们将深入探讨`cgroups`。我们的目标是创建一个类似容器的环境，而不使用Docker！
- en: About the Author
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=namespaces),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我的名字是[Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=namespaces)，我是一名为[Arrikto](https://www.arrikto.com/)工作的机器学习工程师。我为欧洲委员会、欧洲统计局、国际货币基金组织、欧洲中央银行、经济合作与发展组织和宜家等主要客户设计并实施了AI和软件解决方案。
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣阅读更多关于机器学习、深度学习、数据科学和数据操作的文章，请在[Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow)、[LinkedIn](https://www.linkedin.com/in/dpoulopoulos/)或Twitter上的[@james2pl](https://twitter.com/james2pl)关注我。
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所表达的观点仅代表我个人观点，不代表我雇主的观点或意见。
