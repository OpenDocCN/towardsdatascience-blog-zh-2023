- en: Create a Python Package with Super- Fast Rust Code in 3 Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 3 步创建一个带有超级快速 Rust 代码的 Python 包
- en: 原文：[https://towardsdatascience.com/create-a-python-package-with-super-fast-rust-code-in-3-steps-a27389629beb](https://towardsdatascience.com/create-a-python-package-with-super-fast-rust-code-in-3-steps-a27389629beb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/create-a-python-package-with-super-fast-rust-code-in-3-steps-a27389629beb](https://towardsdatascience.com/create-a-python-package-with-super-fast-rust-code-in-3-steps-a27389629beb)
- en: '*Extend you Python code with a package containing Rust code for a >150x performance
    increase!*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*通过一个包含 Rust 代码的包来扩展你的 Python 代码，实现 >150 倍的性能提升！*'
- en: '[](https://mikehuls.medium.com/?source=post_page-----a27389629beb--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----a27389629beb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a27389629beb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a27389629beb--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----a27389629beb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mike Huls](https://mikehuls.medium.com/?source=post_page-----a27389629beb--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----a27389629beb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a27389629beb--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----a27389629beb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a27389629beb--------------------------------)
    ·9 min read·Feb 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a27389629beb--------------------------------)
    ·阅读时间 9 分钟·2023 年 2 月 24 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ed219a4972a58651e9682cc108017a96.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ed219a4972a58651e9682cc108017a96.png)'
- en: This Python is getting a bit Rusty! (image by Dall-e 2!)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这 Python 变得有点 Rusty 了！（图片来自 Dall-e 2！）
- en: 'Python is a pretty easy language to pick up and it’s super quick to write some
    code in, compared to some other languages. All this ease-of-use comes with a downside:
    speed is sacrificed. Sometimes Python is just too slow!'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种相对容易上手的语言，与一些其他语言相比，编写代码的速度非常快。然而，这种易用性也有一个缺点：速度被牺牲了。有时候 Python 就是太慢了！
- en: To solve this problem we’ll re-write a bit of our Python-code in Rust and import
    this code, as a Python package, into our original project. We end up with a super-fast
    Python package that we can import and use like any other package. As a bonus we’ll
    multi-process our Rusty Python package and end up with a function that is roughly
    150x faster. Let’s code!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将把部分 Python 代码用 Rust 重写，并将这些代码作为 Python 包导入到原项目中。我们最终得到一个超级快速的 Python
    包，可以像其他包一样导入和使用。作为额外奖励，我们将对我们的 Rust Python 包进行多进程处理，最终得到一个大约快 150 倍的函数。让我们开始编程吧！
- en: Overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'A quick summary of what we’re going to do in this article. We’ll tackle the
    problem in 6 steps (of which step 2, 3 and 4 are devoted to actually writing the
    package):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文简要总结了我们将要做的事情。我们将分 6 步解决这个问题（其中第 2、3 和 4 步专门用于实际编写包）：
- en: Examining our slow function; why is it slow?
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查我们的慢函数；为什么它这么慢？
- en: Preparing our project
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备我们的项目
- en: We re-write this function in Rust
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将这个函数用 Rust 重写
- en: Compile the Rust code and put it in a Python package
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译 Rust 代码并将其放入 Python 包中
- en: Import the Python package into our project
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Python 包导入到我们的项目中
- en: Benchmarking the Python function vs the Rust one
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基准测试 Python 函数与 Rust 函数的性能
- en: We’ll use a Python package called `maturin`. This package will compile our Rust
    code and convert into a package. The result will be like any other Python package
    that we can import and use (like `pandas`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为 `maturin` 的 Python 包。这个包将编译我们的 Rust 代码并将其转换为一个包。结果将像其他 Python 包一样，我们可以导入并使用（比如
    `pandas`）。
- en: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----a27389629beb--------------------------------)
    [## Destroying Duck Hunt with OpenCV — image analysis for beginners'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 用 OpenCV 毁灭 Duck Hunt — 初学者的图像分析](https://towardsdatascience.com/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----a27389629beb--------------------------------)'
- en: Write code that will beat every Duck Hunt high score
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写能够打破每个 Duck Hunt 高分的代码
- en: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----a27389629beb--------------------------------)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](https://towardsdatascience.com/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----a27389629beb--------------------------------)'
- en: 1\. Examining our slow function
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 检查我们的慢函数
- en: 'It’s first important that we understand why our function is slow. Let’s imagine
    that our project requires a function that counts the number of primes between
    two numbers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们要了解为什么我们的函数很慢。假设我们的项目需要一个函数来计算两个数字之间的质数数量：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Please note that:'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意：
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The number of prime-checks isn’t really necessary for this function but it allows
    us to compare Python vs Rust in a later part of this article.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个函数中质数检查的数量其实并不必要，但它允许我们在文章的后面部分比较 Python 和 Rust。
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Python code and Rust code in this article are far from optimized for finding
    primes. The important thing is to demonstrate that we can optimize small chunks
    of Python with Rust and that we can compare the performance of these functions.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文中的 Python 代码和 Rust 代码远未优化以查找质数。重要的是演示我们可以使用 Rust 优化 Python 的小块代码，并比较这些函数的性能。
- en: 'If you insert `primecounter_py(10, 20)` it returns `4` (11, 13, 17, and 19
    are primes) and the number of prime-checks the function has performed. These small
    ranges are executed very quickly but when we use larger ranges you’ll see that
    performance starts to suffer:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你插入 `primecounter_py(10, 20)`，它会返回 `4`（11、13、17 和 19 是质数），以及函数已执行的质数检查数量。这些小范围执行非常迅速，但当我们使用更大的范围时，你会看到性能开始下降：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You see that as our input-size increases ten-fold; the duration increases much
    more. In other words: the larger a range becomes; the slower it gets (relatively).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，随着输入规模增加十倍，持续时间增加得更多。换句话说：范围越大，相对变慢的程度也越明显。
- en: '[](/keep-your-code-secure-by-using-environment-variables-and-env-files-4688a70ea286?source=post_page-----a27389629beb--------------------------------)
    [## Keep your code secure by using environment variables and env files'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/keep-your-code-secure-by-using-environment-variables-and-env-files-4688a70ea286?source=post_page-----a27389629beb--------------------------------)
    [## 通过使用环境变量和 env 文件来保护你的代码'
- en: Securely load a file containing all of our app’s required, confidential data
    like passwords, tokens, etc
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全加载包含我们应用程序所需的所有机密数据的文件，如密码、令牌等。
- en: towardsdatascience.com](/keep-your-code-secure-by-using-environment-variables-and-env-files-4688a70ea286?source=post_page-----a27389629beb--------------------------------)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/keep-your-code-secure-by-using-environment-variables-and-env-files-4688a70ea286?source=post_page-----a27389629beb--------------------------------)
- en: Why is the primecounter_py function slow?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么 primecounter_py 函数很慢？
- en: Code can be slow for many reasons. It can be I/O-based like waiting for an API,
    hardware-related or based on the design of Python as a language. In this article
    it’s the last case. The way Python is designed and how it handles variables e.g.
    make it very **easy to use** but you suffer a **small speed penalty** that becomes
    apparent when you have to perform a lot of calculations. On the bright side; **this
    function is very suitable for optimization with Rust**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可能因为多种原因变慢。它可以是 I/O 相关的，例如等待 API、硬件相关的，或基于 Python 作为一种语言的设计。在本文中是最后一种情况。Python
    的设计方式及其处理变量的方式，使得它**使用起来非常简单**，但你会遭受**小的速度损失**，这种损失在需要进行大量计算时变得明显。好消息是；**这个函数非常适合用
    Rust 进行优化**。
- en: If you are interested in what Python’s limitations are, I recommend reading
    the article below. It explains the cause and potential solutions for slowness
    due to how Python is designed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Python 的局限性感兴趣，我推荐阅读下面的文章。它解释了由于 Python 的设计方式导致的慢速原因和潜在解决方案。
- en: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----a27389629beb--------------------------------)
    [## Why Python is so slow and how to speed it up'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----a27389629beb--------------------------------)
    [## 为什么 Python 很慢以及如何加速'
- en: Take a look under the hood to see where Python’s bottlenecks lie
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 观察一下底层，看看 Python 的瓶颈在哪里。
- en: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----a27389629beb--------------------------------)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----a27389629beb--------------------------------)
- en: Is concurrency the problem?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发是问题所在吗？
- en: Doing multiple things simultaneously can solve a lot of speed problems. In our
    case we could opt for using multiple processes to divide all tasks over multiple
    cores in stead of the default 1\. Still we go for the optimization in Rust since
    we can also multi-process the faster function as you’ll see at the end of this
    article.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同时做多件事可以解决许多速度问题。在我们的例子中，我们可以选择使用多个进程将所有任务分配到多个核心上，而不是默认的 1 个。尽管如此，我们仍然选择使用
    Rust 进行优化，因为如你将在本文末尾看到的，我们也可以对更快的函数进行多进程处理。
- en: Many cases that involve a lot of I/O can be optimized by [**using threads**](https://mikehuls.medium.com/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e)
    (like waiting for an API)? Check out [**this article**](https://mikehuls.medium.com/advanced-multi-tasking-in-python-applying-and-benchmarking-threadpools-and-processpools-90452e0f7d40)
    or the one below on how to put multiple CPUs to work to increase execution speed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 许多涉及大量 I/O 的情况可以通过 [**使用线程**](https://mikehuls.medium.com/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e)（例如等待
    API）来优化？查看 [**这篇文章**](https://mikehuls.medium.com/advanced-multi-tasking-in-python-applying-and-benchmarking-threadpools-and-processpools-90452e0f7d40)
    或下面的文章，了解如何利用多个 CPU 提高执行速度。
- en: '[](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----a27389629beb--------------------------------)
    [## Applying Python multiprocessing in 2 lines of code'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----a27389629beb--------------------------------)
    [## 使用 Python 多处理库实现 2 行代码'
- en: When and how to use multiple cores to execute many times faster
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 何时以及如何使用多个核心以实现更快的执行速度
- en: towardsdatascience.com](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----a27389629beb--------------------------------)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----a27389629beb--------------------------------)
- en: 2\. Preparing our project
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 准备我们的项目
- en: This is the part where we install dependencies and create all files and folders
    we need to write Rust and compile it into a package.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们安装依赖并创建所有需要的文件和文件夹以编写 Rust 代码并将其编译为包的部分。
- en: '[](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----a27389629beb--------------------------------)
    [## Thread Your Python Program with Two Lines of Code'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----a27389629beb--------------------------------)
    [## 使用两行代码线程化你的 Python 程序'
- en: Speed up your program by doing multiple things simultaneously
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过同时执行多个任务加速你的程序
- en: towardsdatascience.com](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----a27389629beb--------------------------------)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----a27389629beb--------------------------------)
- en: '**a. Create a venv**'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**a. 创建虚拟环境**'
- en: 'Create a virtual environment and activate it. Then install `maturin`; this
    package will help us convert out Rust code to a Python package:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个虚拟环境并激活它。然后安装`maturin`；这个包将帮助我们将 Rust 代码转换为 Python 包：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[](/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----a27389629beb--------------------------------)
    [## Virtual environments for absolute beginners — what is it and how to create
    one (+ examples)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----a27389629beb--------------------------------)
    [## 面向绝对初学者的虚拟环境——什么是虚拟环境以及如何创建一个（+ 示例）'
- en: A deep dive into Python virtual environments, pip and avoiding entangled dependencies
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入探讨 Python 虚拟环境、pip 以及如何避免纠缠的依赖关系
- en: towardsdatascience.com](/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----a27389629beb--------------------------------)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----a27389629beb--------------------------------)
- en: '**b. Rust files and folders**'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**b. Rust 文件和文件夹**'
- en: We’ll create a directory called `my_rust_module` that will contain our rust
    code and `cd` into that directory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`my_rust_module`的目录，该目录将包含我们的 Rust 代码，并进入该目录。
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**c. Initializing maturin**'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**c. 初始化 maturin**'
- en: 'Then we call `maturin init`. It shows you some options. Choose `pyo3`. Maturin
    now creates some folders and files. Your project should look like this now:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用`maturin init`。它会显示一些选项。选择`pyo3`。Maturin 现在创建了一些文件夹和文件。你的项目现在应该是这样的：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The most important one is `/my_rust_module/src/lib.rs`. This file will contains
    our Rust code that we’re about to turn into a Python package.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的文件是`/my_rust_module/src/lib.rs`。这个文件将包含我们即将转化为 Python 包的 Rust 代码。
- en: 'Notice that `maturin` also created a `Cargo.toml`. This is the configuration
    of our project. It also contains all of our dependencies (like `requirements.txt`).
    In my case I’ve edited it to look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`maturin`还创建了一个`Cargo.toml`。这是我们项目的配置文件。它还包含了我们所有的依赖（如`requirements.txt`）。在我的情况下，我已经将它编辑成如下：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----a27389629beb--------------------------------)
    [## Create a fast auto-documented, maintainable and easy-to-use Python API in
    5 lines of code with…'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----a27389629beb--------------------------------)
    [## 用 5 行代码创建一个快速的自动文档化、可维护且易于使用的 Python API…'
- en: Perfect for (unexperienced) developers who just need a complete, working, fast
    and secure API
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非常适合（缺乏经验的）开发者，他们只需要一个完整、可用、快速且安全的 API
- en: towardsdatascience.com](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----a27389629beb--------------------------------)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----a27389629beb--------------------------------)
- en: 3\. Re-writing the function in Rust
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 用 Rust 重新编写函数
- en: We are now ready to recreate our Python function in Rust. We won’t dive too
    deep in the Rust syntax but focus more on the way we can make the Rust code work
    with Python. We’ll first create a pure-Rust function and then put it in a package
    that we can `import` and use in Python.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备在 Rust 中重建我们的 Python 函数。我们不会深入探讨 Rust 语法，而是更关注如何使 Rust 代码与 Python 配合工作。我们将首先创建一个纯
    Rust 函数，然后将其放入一个可以在 Python 中 `import` 并使用的包中。
- en: 'If you’ve never seen Rust code then the code below maybe a little confusing.
    The most important thing is that the `primecounter` function below is pure Rust;
    it has nothing to do with Python. Open `/my_rust_module/src/lib.rs` and give it
    the following content:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未见过 Rust 代码，那么下面的代码可能会有些令人困惑。最重要的是，下面的 `primecounter` 函数是纯 Rust 代码；它与 Python
    无关。打开 `/my_rust_module/src/lib.rs`，并填入以下内容：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s run through the most important things:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们梳理一下最重要的内容：
- en: The `primecounter` function is pure Rust
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`primecounter` 函数是纯 Rust 代码'
- en: The `primecounter` function is decorated with `#[pyfunction]`. This indicates
    that we want to transform it into a Python function
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`primecounter` 函数被 `#[pyfunction]` 装饰。这表明我们想将它转换为一个 Python 函数'
- en: In the last few lines we build a pymodule. The `my_rust_module` function packages
    the Rust code into a Python module.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后几行中，我们构建了一个 pymodule。`my_rust_module` 函数将 Rust 代码打包成一个 Python 模块。
- en: '[](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----a27389629beb--------------------------------)
    [## Args vs kwargs: which is the fastest way to call a function in Python?'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----a27389629beb--------------------------------)
    [## Args 与 kwargs：哪种是调用 Python 函数的最快方式？'
- en: A clear demonstration of the timeit module
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`timeit` 模块的清晰演示'
- en: towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----a27389629beb--------------------------------)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----a27389629beb--------------------------------)
- en: 4\. Rust code -> Python package
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. Rust 代码 -> Python 包
- en: This part may seem the hardest but with the help of the `maturin` package it
    becomes very easy for us. Just call
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分可能看起来最难，但在 `maturin` 包的帮助下，它变得非常简单。只需调用
- en: '`maturin build --release`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`maturin build --release`。'
- en: 'This compiles all Rust code and wraps it into a Python package that ends up
    in this directory: `your_project_dir/my_rust_module/target/wheels`. We install
    the wheel in the next part.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译所有 Rust 代码，并将其打包成一个 Python 包，最终位于此目录：`your_project_dir/my_rust_module/target/wheels`。我们将在下一部分安装该
    wheel。
- en: '***For windows users:*** *In the examples below I work in a Debian environment
    (via Windows WSL). This makes compiling code with Rust a little easier since the
    compilers we need are already installed. Building on Windows is possible as well
    but you’ll likely receive a message like* `*Microsoft Visual C++ 14.0 or greater
    is required*`*. This means you don’t have a compiler. You can solve this by installing
    C++ build tools that you can download* [*here*](https://visualstudio.microsoft.com/visual-cpp-build-tools)*.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '***对于 Windows 用户：*** *在下面的示例中，我在 Debian 环境中工作（通过 Windows WSL）。这使得使用 Rust 编译代码变得稍微容易一些，因为我们需要的编译器已经安装好。在
    Windows 上构建也是可能的，但你可能会收到类似于* `*需要 Microsoft Visual C++ 14.0 或更高版本*`* 的消息。这意味着你没有编译器。你可以通过安装可以从*
    [*这里*](https://visualstudio.microsoft.com/visual-cpp-build-tools)* 下载的 C++ 构建工具来解决此问题。*'
- en: '[](/sqlalchemy-for-absolute-beginners-22227a287ef3?source=post_page-----a27389629beb--------------------------------)
    [## SQLAlchemy for absolute beginners'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/sqlalchemy-for-absolute-beginners-22227a287ef3?source=post_page-----a27389629beb--------------------------------)
    [## SQLAlchemy 入门'
- en: Creating a database engine and execute SQL from Python
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数据库引擎并从 Python 执行 SQL
- en: towardsdatascience.com](/sqlalchemy-for-absolute-beginners-22227a287ef3?source=post_page-----a27389629beb--------------------------------)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/sqlalchemy-for-absolute-beginners-22227a287ef3?source=post_page-----a27389629beb--------------------------------)
- en: 5\. Importing our Rusty Python package
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 导入我们的 Rusty Python 包
- en: 'We can directly `pip install` the wheel we’ve created in the previous part:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接 `pip install` 我们在上一部分创建的 wheel：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then it’s just a matter of importing our module and using the function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后只需导入我们的模块并使用这个函数：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](/write-your-own-c-extension-to-speed-up-python-x100-626bb9d166e7?source=post_page-----a27389629beb--------------------------------)
    [## Write Your Own C-extension to Speed Up Python by 100x'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/write-your-own-c-extension-to-speed-up-python-x100-626bb9d166e7?source=post_page-----a27389629beb--------------------------------)
    [## 编写自己的 C 扩展以将 Python 提速 100 倍'
- en: How to write, compile, package and import your own, superfast C-module into
    Python
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何编写、编译、打包和导入你自己超级快速的 C 模块到 Python 中
- en: towardsdatascience.com](/write-your-own-c-extension-to-speed-up-python-x100-626bb9d166e7?source=post_page-----a27389629beb--------------------------------)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/write-your-own-c-extension-to-speed-up-python-x100-626bb9d166e7?source=post_page-----a27389629beb--------------------------------)
- en: 6\. Benchmarking Rust vs Python function
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 基准测试 Rust 与 Python 函数
- en: 'Let’s check out our functions compare. We’ll call both the Python and Rust
    version of our `primecounter` function and time them. We also call the function
    with multiple arguments. There are the results:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一下我们的函数比较。我们将调用 Python 和 Rust 版本的 `primecounter` 函数并测量它们的时间。我们还调用了具有多个参数的函数。结果如下：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Both our Python and Rust function return the result and the count of the numbers
    they have evaluated. In the overview above you see that **Rust outperforms Python
    by 27x** when it comes to these evaluations per second.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Python 和 Rust 函数都返回结果和它们评估的数字的计数。在上面的概述中你会看到，在每秒评估次数方面，**Rust 比 Python 快了
    27 倍**。
- en: '![](../Images/febf60ff08b194f5a6e56d0cfde97bfe.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/febf60ff08b194f5a6e56d0cfde97bfe.png)'
- en: Counting primes in Rust is a lot faster than in Python (image by author)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rust 中计算素数比在 Python 中快得多（图片由作者提供）
- en: The graph above provides a very clear difference in execution time.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图表清晰地显示了执行时间的差异。
- en: '[](/run-code-after-your-program-exits-with-pythons-atexit-82a0069b486a?source=post_page-----a27389629beb--------------------------------)
    [## Run Code after Your Program Exits with Python’s AtExit'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/run-code-after-your-program-exits-with-pythons-atexit-82a0069b486a?source=post_page-----a27389629beb--------------------------------)
    [## 使用 Python 的 AtExit 在程序退出后运行代码'
- en: Register cleanup functions that run after your script ends or errors
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册在脚本结束或出错后运行的清理函数
- en: towardsdatascience.com](/run-code-after-your-program-exits-with-pythons-atexit-82a0069b486a?source=post_page-----a27389629beb--------------------------------)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/run-code-after-your-program-exits-with-pythons-atexit-82a0069b486a?source=post_page-----a27389629beb--------------------------------)
- en: '7\. Bonus: multiprocessing for even more speed'
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 附加：多进程处理以获得更高速度
- en: 'Of course you can multi-process this new Python package! With the code below
    we divide all numbers that we need to evaluate over all of our cores:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以对这个新的 Python 包进行多进程处理！下面的代码会在所有核心上分配我们需要评估的所有数字：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s try find all primes between 0 and 100K again. With our current algorithm
    this means that we have to perform almost half a billion checks. As you see in
    the overview below Rust finishes these in 0.88 seconds. With multiprocessing the
    process finishes in 0.16 seconds; **5.5 times faster**, clocking in at **2.8 billion**
    calculations per second.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次尝试寻找 0 到 100K 之间的所有素数。根据我们当前的算法，这意味着我们需要进行将近五亿次检查。正如下面的概述所示，Rust 在 0.88
    秒内完成这些检查。使用多进程处理，这个过程在 0.16 秒内完成；**快了 5.5 倍**，每秒进行**28 亿**次计算。
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Compared to our original (single process) Python function we’ve increased the
    number of calculations per second from 18.8M to 2.8 billion. This means that our
    function is now roughly **150x faster**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们最初的（单进程）Python 函数相比，我们将每秒的计算次数从 1880 万增加到 28 亿。这意味着我们的函数现在大约**快了 150 倍**。
- en: '[](/secure-your-docker-images-with-docker-secrets-f2b92ec398a0?source=post_page-----a27389629beb--------------------------------)
    [## Secure Your Docker Images with Docker Secrets'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/secure-your-docker-images-with-docker-secrets-f2b92ec398a0?source=post_page-----a27389629beb--------------------------------)
    [## 使用 Docker Secrets 保护你的 Docker 镜像'
- en: Add docker secrets to prevent your docker image from leaking passwords
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Docker secrets 以防止 Docker 镜像泄露密码
- en: towardsdatascience.com](/secure-your-docker-images-with-docker-secrets-f2b92ec398a0?source=post_page-----a27389629beb--------------------------------)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[secure-your-docker-images-with-docker-secrets](https://towardsdatascience.com/secure-your-docker-images-with-docker-secrets-f2b92ec398a0?source=post_page-----a27389629beb--------------------------------)'
- en: Conclusion
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: As we’ve seen in this article, it’s not all that difficult to extend Python
    with Rust. If you know when and how to apply this technique you can really improve
    the execution speed of your program.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这篇文章中所见，扩展 Python 与 Rust 并不那么困难。如果你知道何时以及如何应用这种技术，你真的可以提高程序的执行速度。
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles?tags=python) on all kinds
    of programming-related topics like these:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能像我期望的那样清晰，但如果不是，请告诉我我可以做些什么来进一步澄清。同时，查看我关于各种编程相关主题的[其他文章](https://mikehuls.com/articles?tags=python)：
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[绝对初学者的 Git: 通过视频游戏理解 Git](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建并发布你自己的 Python 包](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
- en: '[Coding a Home Intruder System / Motion Detector with Python](https://mikehuls.medium.com/coding-a-home-intruder-system-motion-detector-with-python-22f5ba8bcca0)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Python 编写家庭入侵者系统 / 动态检测器](https://mikehuls.medium.com/coding-a-home-intruder-system-motion-detector-with-python-22f5ba8bcca0)'
- en: Happy coding!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐编程！
- en: — Mike
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: — 迈克
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言: 喜欢我正在做的事吗？* [*关注我！*](https://mikehuls.medium.com/membership)'
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----a27389629beb--------------------------------)
    [## Join Medium with my referral link - Mike Huls'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入 Medium - Mike Huls](https://mikehuls.medium.com/membership?source=post_page-----a27389629beb--------------------------------)'
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读迈克·赫尔斯（Mike Huls）和 Medium 上成千上万其他作者的每一个故事。你的会员费直接支持迈克……
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----a27389629beb--------------------------------)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----a27389629beb--------------------------------)'
