- en: 'Window Functions: A Must Know for Data Engineers and Data Scientists'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口函数：数据工程师和数据科学家必知的内容
- en: 原文：[https://towardsdatascience.com/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2](https://towardsdatascience.com/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2](https://towardsdatascience.com/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2)
- en: Back To Basics | Demystifying SQL Window Functions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到基础 | 揭开 SQL 窗口函数的神秘面纱
- en: '[](https://iffatm.medium.com/?source=post_page-----4dd3e4ad0d2--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----4dd3e4ad0d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4dd3e4ad0d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4dd3e4ad0d2--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----4dd3e4ad0d2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://iffatm.medium.com/?source=post_page-----4dd3e4ad0d2--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----4dd3e4ad0d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4dd3e4ad0d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4dd3e4ad0d2--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----4dd3e4ad0d2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4dd3e4ad0d2--------------------------------)
    ·13 min read·Jun 14, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4dd3e4ad0d2--------------------------------)
    ·阅读时间 13 分钟·2023年6月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/14add0fff137d8af56d3fda795403145.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14add0fff137d8af56d3fda795403145.png)'
- en: Data growth has been pretty extensive in the past few years and even though
    we have a diverse set of tools and technologies at our disposal, SQL still remains
    at the core of most of them. It’s one of the fundamental languages for data analysis
    and is widely employed by companies at all scales for solving data-related challenges.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据增长在过去几年中非常显著，尽管我们有各种工具和技术，但 SQL 仍然是大多数工具的核心。它是数据分析的基本语言之一，被各类公司广泛使用来解决与数据相关的挑战。
- en: I always believe you do not need to know certain concepts just for the sake
    of clearing the interview or solving a particular problem. If you care to learn
    the concept and underlying architecture it will help you conquer work anywhere
    you go. Window Functions are a bit tricky and one might feel a little intimidated
    at first but once you get a hold of it, they are most fun to work with.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我始终相信，你不需要仅仅为了通过面试或解决特定问题而了解某些概念。如果你愿意深入学习这些概念及其底层架构，它将帮助你在任何工作中取得成功。窗口函数有点棘手，刚开始可能会让人感到有些害怕，但一旦掌握，它们会变得非常有趣。
- en: 'It would be easier to understand the concept of Window Functions if you are
    familiar with SQL Aggregate Functions. Aggregate Functions perform the calculation
    on a set of values and return one value; when paired with *GROUP BY*clause, it
    returns a single value for each group. You can read more about it here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 SQL 聚合函数，理解窗口函数的概念会更容易。聚合函数对一组值进行计算并返回一个值；当与*GROUP BY*子句配合使用时，它为每个组返回一个值。你可以在这里阅读更多内容：
- en: '[](/how-to-use-sql-aggregate-functions-92f7244a07cb?source=post_page-----4dd3e4ad0d2--------------------------------)
    [## SQL Aggregate Functions for your next Data Science interview'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-use-sql-aggregate-functions-92f7244a07cb?source=post_page-----4dd3e4ad0d2--------------------------------)
    [## SQL 聚合函数为你的下一个数据科学面试做准备'
- en: Back To Basics | SQL fundamentals for beginners
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回到基础 | SQL 初学者的基础知识
- en: towardsdatascience.com](/how-to-use-sql-aggregate-functions-92f7244a07cb?source=post_page-----4dd3e4ad0d2--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-use-sql-aggregate-functions-92f7244a07cb?source=post_page-----4dd3e4ad0d2--------------------------------)
- en: Before going any further, let me introduce you to the sample database. We will
    be using data from a dummy vehicle retailer company, you can find source data
    in my [GitHub Repo](https://github.com/PhoenixIM/All_Things_SQL),
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步讨论之前，让我向你介绍一下示例数据库。我们将使用来自一个虚拟汽车零售公司的数据，你可以在我的 [GitHub Repo](https://github.com/PhoenixIM/All_Things_SQL)中找到源数据，
- en: '![](../Images/689057cd098a835bb0c46c8a2df2b2dd.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/689057cd098a835bb0c46c8a2df2b2dd.png)'
- en: Image by author
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: What are Window Functions?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是窗口函数？
- en: The traditional definition of a Window Function is,
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数的传统定义是，
- en: A Window Function performs calculations across a set of table rows that are
    somehow related to the current row.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 窗口函数在与当前行相关的一组表行上执行计算。
- en: If I break it down, Window Functions enable us to perform calculations against
    partitions. Partition is simply a user-defined set, subgroup or bucket of rows
    on which the window function will perform calculations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我将其拆解，窗口函数使我们能够对分区执行计算。分区只是用户定义的一组、子组或行桶，窗口函数将在其上执行计算。
- en: They are also widely known as *Analytic Functions.*
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也被广泛称为*分析函数*。
- en: Why do we need Window Functions?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们需要窗口函数？
- en: As we know, Aggregate Functions summarise the data from multiple rows into a
    single row (if used along with GROUP BY clause then a single row for each group);
    whereas, Window Functions also perform calculations on a set of rows but unlike
    Aggregate Functions they do not summarise the result set into a single row. Instead,
    all the rows maintain their original form/identity and the calculated row is added
    to the result set for every row.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，聚合函数将来自多行的数据汇总为一行（如果与GROUP BY子句一起使用，则每组一行）；而窗口函数也在一组行上执行计算，但与聚合函数不同的是，它们不会将结果集汇总为一行。相反，所有行保持其原始形式/身份，并且为每行添加计算后的行。
- en: Sounds funny, huh? Let’s break it down. Here is the sample data from the table
    PRODUCTS,
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来有趣吧？让我们来分解一下。这是来自表PRODUCTS的示例数据，
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/651d9f7af58f9aca574103ea1bbf35a7.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/651d9f7af58f9aca574103ea1bbf35a7.png)'
- en: Image by author
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Say, we need the information about the average buy pricefor each *PRODUCTCATEGORY*,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，我们需要关于每个*PRODUCTCATEGORY*的平均购买价格的信息，
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/1314327e8368f826b1ae1397fd1914e0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1314327e8368f826b1ae1397fd1914e0.png)'
- en: Image by author
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Now, this information alone won’t be much of a use. Yes! Now you do know the
    average buy price for each *PRODUCTCATEGORY,* but what next? How does this information
    produce business insight? What if I want to compare the buy price of each product
    with the average buy price of the particular *PRODUCTLCATEGORY*? Let me rephrase
    my new requirement,
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，仅这些信息可能用处不大。是的！你现在确实知道了每个*PRODUCTCATEGORY*的平均购买价格，但接下来呢？这些信息如何产生商业洞察？如果我想将每个产品的购买价格与特定*PRODUCTCATEGORY*的平均购买价格进行比较呢？让我重新表述一下我的新需求，
- en: Display the buy price of each product within the *PRODUCTCATEGORY* along with
    the average buy price for that *PRODUCTCATEGORY*.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示每个*PRODUCTCATEGORY*中的购买价格以及该*PRODUCTCATEGORY*的平均购买价格。
- en: Arrange the result set grouped by *PRODUCTCATEGORY*.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*PRODUCTCATEGORY*分组排列结果集。
- en: Would you be able to achieve this with normal Aggregate Function alone? The
    above stated requirement wants to display some information as it is (e.g. *PRODUCTCATEGORY*,
    *PRODUCTNAME*, *BUYPRICE* in the original form) and additionally wants a new column
    displaying the average buy price for each *PRODUCTCATEGORY* as well. That’s where
    the heroic Window Function comes to the rescue,
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你能仅用普通的聚合函数实现这一点吗？上述要求希望显示一些信息原样（例如*PRODUCTCATEGORY*、*PRODUCTNAME*、*BUYPRICE*），并且还希望新增一列显示每个*PRODUCTCATEGORY*的平均购买价格。这就是英雄般的窗口函数登场的时候，
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/d58f53fcd3b6071e46bc0382822931f6.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d58f53fcd3b6071e46bc0382822931f6.png)'
- en: GIF by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GIF由作者提供
- en: Before we jump start to commonly used Window Functions, let’s understand the
    basic syntax and clauses paired with it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们跳到常用的窗口函数之前，让我们了解一下基本的语法和配对的子句。
- en: The general syntax of a Window Function is,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数的一般语法是，
- en: '![](../Images/7231354dacbfef3c29dd5f72b36ffd52.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7231354dacbfef3c29dd5f72b36ffd52.png)'
- en: Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Where,
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，
- en: '***OVER()*** clausedefines a user-specific set of rows. A Window Function would
    then performs a calculation on that specific set only.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***OVER()***子句定义了一组用户指定的行。窗口函数将仅在该特定集合上执行计算。'
- en: It is used specifically with Window Functions; however, it can also be used
    with Aggregate Functions, just like we used it with the *AVG()* function above,
    and in doing so turning it into a Window Function.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它专门与窗口函数一起使用；然而，它也可以与聚合函数一起使用，就像我们在上面用*AVG()*函数一样，从而将其转变为窗口函数。
- en: If you do not supply anything inside of *OVER()*, the Window Function will be
    applied to the entire result set.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在*OVER()*中不提供任何内容，窗口函数将应用于整个结果集。
- en: '***PARTITION BY*** is used with *OVER* clause. It divides the query result
    set into partitions and then the Window Function applies to each partition.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***PARTITION BY*** 与*OVER*子句一起使用。它将查询结果集划分为多个分区，然后窗口函数应用于每个分区。'
- en: It’s optional, so if you do not specify *PARTITION BY* clause*,* thenthe function
    treats all rows as a single partition.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是可选的，如果你没有指定*PARTITION BY* 子句，那么函数会将所有行视为一个分区。
- en: '***ORDER BY***clause is used to sort the result set in either ascending or
    descending order within each partition of the result set. By default, it’s in
    ascending order.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***ORDER BY*** 子句用于在结果集的每个分区内按升序或降序排序。默认情况下是升序。'
- en: '***ROWS/RANGE*** is a part of the *FRAME* clause which defines a subset within
    the partition.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***ROWS/RANGE*** 是*FRAME*子句的一部分，它定义了分区中的一个子集。'
- en: You can read about a detailed comparison of Window vs Aggregate Function and
    Window Function clauses here, [*Anatomy of SQL Window Functions*](https://medium.com/towards-data-science/anatomy-of-sql-window-functions-7256d8cf509a).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里阅读关于窗口函数与聚合函数的详细比较以及窗口函数子句的内容，[*SQL窗口函数的结构*](https://medium.com/towards-data-science/anatomy-of-sql-window-functions-7256d8cf509a)。
- en: Now that we are familiar with the basic anatomy of a Window Function, let’s
    explore the most commonly used one,
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了窗口函数的基本结构，让我们探索最常用的窗口函数，
- en: ROW_NUMBER()
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ROW_NUMBER()
- en: '*ROW_NUMBER()* assigns a sequential integer number to each row of a table or
    a partition in case we are using *PARTITION BY* clause. The common syntax is,'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*ROW_NUMBER()* 给表或使用*PARTITION BY* 子句的分区中的每一行分配了一个顺序整数。常见的语法是，'
- en: '**ROW_NUMBER() OVER ([PARTITION BY clause] [ORDER BY clause])**'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**ROW_NUMBER() OVER ([PARTITION BY clause] [ORDER BY clause])**'
- en: Here is the sample data from the table *PRODUCTS,* it holds the data of a range
    of products available with the vehicle retailer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自*PRODUCTS*表的示例数据，它包含了汽车零售商提供的一系列产品数据。
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/651d9f7af58f9aca574103ea1bbf35a7.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/651d9f7af58f9aca574103ea1bbf35a7.png)'
- en: Image by author
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Let’s start basic,
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基础开始，
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/81e19d655d73883c4fe47b86506f573f.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/81e19d655d73883c4fe47b86506f573f.png)'
- en: Image by author
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Here, *ROW_NUMBER()* has assigned a sequential integer number starting from
    1 to each row of the table *PRODUCTS*. Let’s level it up a little by adding row
    numbers for each *PRODUCTCATEGORY,* for that we will have to use *PARTITION BY*
    clause.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*ROW_NUMBER()* 给表*PRODUCTS*中的每一行分配了从1开始的顺序整数。让我们稍微升级一下，为每个*PRODUCTCATEGORY*添加行号，为此我们需要使用*PARTITION
    BY* 子句。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/986bf791956b8f08782d34ff9e44635c.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/986bf791956b8f08782d34ff9e44635c.png)'
- en: GIF by author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的GIF
- en: We have the 2 distinct *PRODUCTCATEGORY* available in the *PRODUCTS* table,
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*PRODUCTS*表中有2个不同的*PRODUCTCATEGORY*，
- en: '![](../Images/1d485e42300dcec74d98116328e33225.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d485e42300dcec74d98116328e33225.png)'
- en: Image by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '*ROW_NUMBER()* generated a sequential integer number for each row and *PARTITION
    BY* clause, broke down the resultset into bucketsbased on *PRODUCTCATEGORY*. So
    basically *ROW_NUMBER()* along with *OVER* and *PARTITION B*Y clause, generated
    a unique sequence of numbers for each *PRODUCTCATEGORY.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*ROW_NUMBER()* 为每一行生成了一个顺序整数，*PARTITION BY* 子句将结果集按*PRODUCTCATEGORY* 划分成桶。因此，*ROW_NUMBER()*
    结合*OVER* 和*PARTITION BY* 子句，为每个*PRODUCTCATEGORY*生成了唯一的数字序列。'
- en: Now, let’s utilize the *ORDER BY* clause as well. This was also one of the most
    asked interview questions at the entry/intermediate level. Say, we want to know
    the top 3 products from each *PRODUCTCATEGORY* with the highest quantity in stock
    available.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们也利用*ORDER BY* 子句。这也是入门/中级面试中最常被问到的问题之一。假设我们想知道每个*PRODUCTCATEGORY*中库存数量最高的前3个产品。
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/f551b9eebdd985b47e38cde3518811eb.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f551b9eebdd985b47e38cde3518811eb.png)'
- en: Image by author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Let’s first break down the entire query into two parts, as shown in the following
    image; first, we are creating a *PRODUCT_INVENTORY.* The table data will be divided
    into partitions/groups of each *PRODUCTCATEGORY*, ordered in descending order
    of the quantity available in stock for each product category. *ROW_NUMBER()* will
    then generate sequential integer numbers for each partition. The cool part here
    is, the row number for each row is sort of reset for each *PRODUCTCATEGORY*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们将整个查询分成两部分，如下图所示；首先，我们在创建一个*PRODUCT_INVENTORY*。表数据将被划分为每个*PRODUCTCATEGORY*的分区/组，按每个产品类别的库存数量的降序排列。然后，*ROW_NUMBER()*
    将为每个分区生成顺序整数号码。这里的有趣之处在于，每个*PRODUCTCATEGORY*中的行号会在每个分区中重置。
- en: '![](../Images/16e509f3e781da65e904a9c5fa36a8ee.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/16e509f3e781da65e904a9c5fa36a8ee.png)'
- en: Image by author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The above query will return the following result,
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的查询将返回以下结果，
- en: '![](../Images/daa97b7f18233566468a8e77be17ffb9.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/daa97b7f18233566468a8e77be17ffb9.png)'
- en: Image by author
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Now the second part of our query is pretty straightforward. It will utilize
    this result-set as an input and will pick up the top 3 products from each *PRODUCTCATEGORY*
    based on the condition *ROW_NUM ≤ 3*. The final result is as follows,
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们查询的第二部分是相当简单的。它将利用这个结果集作为输入，并从每个 *PRODUCTCATEGORY* 中选取前3个产品，基于条件 *ROW_NUM
    ≤ 3*。最终结果如下，
- en: '![](../Images/1c5adf8b10295d05bfdb26c5db4c8f42.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c5adf8b10295d05bfdb26c5db4c8f42.png)'
- en: Image by author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: That leads us to the final result as,
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将得到最终结果，如下所示，
- en: '![](../Images/d852588165ed8e1da3cb84eba7daf198.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d852588165ed8e1da3cb84eba7daf198.png)'
- en: Image by author
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: RANK()
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RANK()
- en: As the name suggests, *RANK()* assigns a rank to each row of the table or each
    row in a partition. The general syntax is,
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，*RANK()* 为表中的每一行或每个分区中的每一行分配一个排名。一般语法是，
- en: '**RANK() OVER ([PARTITION BY clause] [ORDER BY clause])**'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**RANK() OVER ([PARTITION BY 子句] [ORDER BY 子句])**'
- en: Continuing to our *PRODUCTS* table example, let us assign a rank to products
    based on the quantity available in stock in descending order, partitioned by *PRODUCTCATEGORY*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们*PRODUCTS*表的例子，让我们根据库存数量以降序为产品分配一个排名，按*PRODUCTCATEGORY*进行分区。
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/d47aae5563f60fa0405ba9cca27e0269.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d47aae5563f60fa0405ba9cca27e0269.png)'
- en: Image by author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: I have limited the result-set for demo purpose. Now, Don’t get mixed up between
    *ROW_NUMBER()* and *RANK()*. The result-set for both of them may look alike; however,
    there is a difference. *ROW_NUMBER()* assigns a unique sequential integer number
    to each row of a table or in a partition; whilst, *RANK()* too generates a sequential
    integer number to each row of a table or in a partition but it assigns the same
    rank for rows with the same values.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将结果集限制为演示目的。现在，不要将 *ROW_NUMBER()* 和 *RANK()* 混淆。这两者的结果集可能看起来相似；然而，存在差异。*ROW_NUMBER()*
    为表中的每一行或每个分区中的每一行分配唯一的顺序整数编号；而 *RANK()* 也为表中的每一行或每个分区中的每一行生成顺序整数编号，但对具有相同值的行分配相同的排名。
- en: Let’s understand this with an example, here is the sample data from the table
    *CUSTOMERS*,
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解，以下是 *CUSTOMERS* 表的示例数据，
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/9b2c26bb8b1673ed9f92ebc50cee7f86.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b2c26bb8b1673ed9f92ebc50cee7f86.png)'
- en: Image by author
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: In the following demo, I have generated *ROW_NUMBER()* and *RANK()* for the
    table *CUSTOMERS*, ordered in descending order of their *CREDITLIMIT*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下演示中，我为 *CUSTOMERS* 表生成了 *ROW_NUMBER()* 和 *RANK()*，按 *CREDITLIMIT* 降序排列。
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/279568a1777a1ae809b303f52c82d114.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/279568a1777a1ae809b303f52c82d114.png)'
- en: Image by author
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: I have limited the result-set for demo purpose. Highlighted in green is *ROW_NUMBER()*
    and highlighted in blue is *RANK().*
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将结果集限制为演示目的。绿色高亮的是 *ROW_NUMBER()*，蓝色高亮的是 *RANK()*。
- en: Now if you refer to 3 records highlighted in red, that’s where the result-set
    for both the function differs; *ROW_NUMBER()*generated a unique sequential integer
    number for all the rows. But on the other hand, *RANK()* assigned the same rank,
    ***20***, for *CUSTOMERID* ***239*** and ***321*** since they have the same credit
    limit, which is ***105000.00***. Not just that, for the next record, that is *CUSTOMERID*
    ***458***, it skipped rank ***21*** and assigned it rank ***22***.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你查看红色高亮的3条记录，这就是两个函数结果集不同的地方；*ROW_NUMBER()* 为所有行生成了唯一的顺序整数编号。而另一方面，*RANK()*
    为 *CUSTOMERID* ***239*** 和 ***321*** 分配了相同的排名 ***20***，因为它们具有相同的信用额度，即 ***105000.00***。不仅如此，对于下一个记录，即
    *CUSTOMERID* ***458***，它跳过了排名 ***21*** 并分配了排名 ***22***。
- en: DENSE_RANK()
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DENSE_RANK()
- en: Now if you are wondering, why do we need *DENSE_RANK()* if we are already equipped
    with *RANK()*? As we already witnessed in the previous example, *RANK()* generates
    the same rank for rows with the same values and then it skips the next consecutive
    rank(refer to the above image).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你在想，为什么我们需要 *DENSE_RANK()*，如果我们已经有了 *RANK()*？正如我们在前面的例子中看到的，*RANK()* 为具有相同值的行生成相同的排名，然后跳过下一个连续排名（参见上面的图片）。
- en: '*DENSE_RANK()* is similar to the *RANK()* except for this one difference, it
    doesn’t skip any ranks when ranking the rows. The common syntax is,'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*DENSE_RANK()* 与 *RANK()* 类似，只是有一个区别，它在对行进行排名时不会跳过任何排名。通用语法是，'
- en: '**DENSE_RANK() OVER ([PARTITION BY clause] [ORDER BY clause])**'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**DENSE_RANK() OVER ([PARTITION BY 子句] [ORDER BY 子句])**'
- en: Going back to *CUSTOMERS* table, let’s compare result-set for both *RANK()*
    and *DENSE_RANK()*,
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 *CUSTOMERS* 表，让我们比较 *RANK()* 和 *DENSE_RANK()* 的结果集，
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/fede63360bf9a057ab071a2c6d8bf7a9.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fede63360bf9a057ab071a2c6d8bf7a9.png)'
- en: Image by author
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Similar to *RANK()* (highlighted in blue)*, DENSE_RANK() (*highlighted in green),
    generated the same rank for *CUSTOMERID* ***239*** and ***321****,* what *DENSE_RANK()*
    did differently is instead of skipping the next consecutive number like *RANK()*
    did, it maintained the sequence and assigned ***21*** rank to *CUSTOMERID* ***458***.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与 *RANK()*（以蓝色突出显示）类似，*DENSE_RANK()*（以绿色突出显示）为 *CUSTOMERID* ***239*** 和 ***321***
    生成了相同的排名，而 *DENSE_RANK()* 与 *RANK()* 不同的是，它没有跳过下一个连续数字，而是保持了序列，并将 ***21*** 排名分配给
    *CUSTOMERID* ***458***。
- en: NTH_VALUE()
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NTH_VALUE()
- en: This is a bit different than what we have discussed so far. *NTH_VALUE()* will
    return the value of the *Nth* row from the expression in a specified window. The
    common syntax is,
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前讨论的有点不同。*NTH_VALUE()* 将返回指定窗口中表达式的 *Nth* 行的值。常见的语法是，
- en: '**NTH_VALUE(expression, N) OVER ([PARTITION BY clause] [ORDER BY clause] [ROW/RANGE
    clause])**'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**NTH_VALUE(expression, N) OVER ([PARTITION BY clause] [ORDER BY clause] [ROW/RANGE
    clause])**'
- en: '*’N’* must be the positive integer value. If data doesn’t exist on *Nth* position,
    the function will return *NULL*. Here if you have noticed, we have an additional
    clause in the syntax which is the *ROW/RANGE* clause*.*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*‘N’* 必须是正整数值。如果数据不存在于 *Nth* 位置，函数将返回 *NULL*。在这里，如果你注意到，我们在语法中有一个额外的子句，即 *ROW/RANGE*
    子句*。'
- en: RAW/RANGE is part of the *Frame Clause* in Window Function which defines a subset
    within a window partition. *ROW/RANGE* defines the start and end points of this
    subset with respect to the current row, you take your current row’s location as
    a base point, and with that reference, you define your frame within the partition.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: RAW/RANGE 是窗口函数中 *Frame Clause* 的一部分，它定义了窗口分区内的子集。*ROW/RANGE* 根据当前行定义此子集的起点和终点，你以当前行的位置为基点，并以此为参考，在分区内定义你的框架。
- en: '*ROWS* - This defines the beginning and end of the frame by specifying the
    number of rows that precede or follow the current row.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ROWS* - 这定义了框架的开始和结束，通过指定当前行之前或之后的行数。'
- en: '*RANGE* - Contrary to the *ROWS*, *RANGE* specifies the range of values compared
    to the value of the current row to define a frame within the partition.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*RANGE* - 与 *ROWS* 相反，*RANGE* 通过与当前行的值进行比较来定义分区内框架的值范围。'
- en: Generic syntax is,
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通用语法是，
- en: '**{ROWS | RANGE} BETWEEN <frame_starting> AND <frame_ending>**'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**{ROWS | RANGE} BETWEEN <frame_starting> AND <frame_ending>**'
- en: '![](../Images/3849aa0e5961ada988e8b08e89b4b5b5.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3849aa0e5961ada988e8b08e89b4b5b5.png)'
- en: Image by author
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Whenever you use *ORDER BY* clause, it sets the default frame as,
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你使用 *ORDER BY* 子句时，它将设置默认框架为，
- en: '*{ROWS/RANGE} BETWEEN* **UNBOUNDED PRECEDING** *AND* **CURRENT ROW**'
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*{ROWS/RANGE} BETWEEN* **UNBOUNDED PRECEDING** *AND* **CURRENT ROW**'
- en: Without ORDER BY clause, the default frame as,
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 ORDER BY 子句，默认框架是，
- en: '*{ROWS/RANGE}* BETWEEN **UNBOUNDED PRECEDING** AND **UNBOUNDED FOLLOWING**'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*{ROWS/RANGE}* BETWEEN **UNBOUNDED PRECEDING** 和 **UNBOUNDED FOLLOWING**'
- en: It may all seem too much at the moment but no need to memorize the syntax and
    its meaning, just practice! You may read the detailed *Frame Clause* with a bunch
    of examples here,
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容现在可能看起来有些多，但无需记住语法及其含义，只需练习即可！你可以在这里阅读详细的 *Frame Clause* 和一系列示例，
- en: '[](/anatomy-of-sql-window-functions-7256d8cf509a?source=post_page-----4dd3e4ad0d2--------------------------------)
    [## Anatomy of SQL Window Functions'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/anatomy-of-sql-window-functions-7256d8cf509a?source=post_page-----4dd3e4ad0d2--------------------------------)
    [## SQL 窗口函数的结构]'
- en: Back To Basics | SQL fundamentals for beginners
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回到基础 | SQL 初学者基础
- en: towardsdatascience.com](/anatomy-of-sql-window-functions-7256d8cf509a?source=post_page-----4dd3e4ad0d2--------------------------------)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/anatomy-of-sql-window-functions-7256d8cf509a?source=post_page-----4dd3e4ad0d2--------------------------------)'
- en: Now let’s say, we need to find out *PRODUCTNAME* from each *PRODUCTCATEGORY*
    with 2nd highest buy-price,
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设，我们需要找出每个 *PRODUCTCATEGORY* 中的第二高买价的 *PRODUCTNAME*，
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/b8c66263b42f77d92f1ef6739c6c59c8.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8c66263b42f77d92f1ef6739c6c59c8.png)'
- en: Image by author
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: We have 2 more value functions similar to *NTH_VALUE()*; *FIRST_VALUE()* and
    *LAST_VALUE()*. As the name suggests, they return the highest(first) and lowest(last)
    values from an ordered list based on the user expression, respectively. The common
    syntax is,
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有两个类似于 *NTH_VALUE()* 的值函数；*FIRST_VALUE()* 和 *LAST_VALUE()*。顾名思义，它们分别从排序列表中返回最高（第一个）和最低（最后一个）值。通用语法是，
- en: '**FIRST_VALUE(expression) OVER ([PARTITION BY clause] [ORDER BY clause] [ROW/RANGE
    clause])**'
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**FIRST_VALUE(expression) OVER ([PARTITION BY clause] [ORDER BY clause] [ROW/RANGE
    clause])**'
- en: ''
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**LAST_VALUE(expression) OVER ([PARTITION BY clause] [ORDER BY clause] [ROW/RANGE
    clause])**'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**LAST_VALUE(expression) OVER ([PARTITION BY clause] [ORDER BY clause] [ROW/RANGE
    clause])**'
- en: Similar to the above example, can you now find out the *PRODUCTNAME* with the
    highest and the lowest buy-price for each *PRODUCTCATEGORY* ?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于上述示例，现在你能找出每个*PRODUCTCATEGORY*中买价最高和最低的*PRODUCTNAME*吗？
- en: NTILE()
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NTILE()
- en: Sometimes there are scenarios where you would want to arrange the rows within
    the partition to a certain number of groups or buckets. NTILE() is used for such
    purpose, it divides the ordered rows in the partition into a specific number of
    buckets. Each such bucket is assigned a group number starting from 1\. It will
    try to create groups of equal size as possible. For each row, *NTILE()* function
    returns a group number representing the group to which that row belongs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会出现需要将分区内的行安排到一定数量的组或桶中的情况。NTILE() 就是用于这种目的，它将分区中有序的行分成特定数量的桶。每个桶都会分配一个从 1
    开始的组号。它会尽量创建尽可能大小相等的组。对于每一行，*NTILE()* 函数返回一个组号，表示该行所属的组。
- en: General syntax is,
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通用语法是，
- en: '**NTILE(N) OVER ([PARTITION BY clause] [ORDER BY clause])**'
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**NTILE(N) OVER ([PARTITION BY 子句] [ORDER BY 子句])**'
- en: Where ’N’ a is a positive integer that defines the number of groups one wants
    to create.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 'N' 是定义要创建的组数的正整数。
- en: Say, we want to segregate *PRODUCTCATEGORY -‘Cars’* such that we have a list
    of cars with high-range, mid-range, and low-range buy-price.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，我们想要将*PRODUCTCATEGORY -‘Cars’* 分类为高价、中价和低价的汽车列表。
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/26e7d808c9718c3c9bc8a0d5f8765ff1.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26e7d808c9718c3c9bc8a0d5f8765ff1.png)'
- en: Image by author
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: LAG() & LEAD()
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LAG() 和 LEAD()
- en: We often encounter scenarios where some sort of comparative analysis is required.e.g.
    comparing sales of the selected year with the previous year or the following year.
    Such comparisons are really useful when working with time series data and calculating
    differences across time.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常遇到需要进行某种比较分析的场景。例如，将选定年份的销售与前一年或后一年进行比较。这种比较在处理时间序列数据和计算时间上的差异时非常有用。
- en: '*LAG()* pulls the data from the row that precedes the current row. If there
    is no preceding row then it returns *NULL*. The common syntax is,'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*LAG()* 从当前行之前的行提取数据。如果没有前导行，则返回*NULL*。常见的语法是，'
- en: '**LAG(expression, offset) OVER ([PARTITION BY clause] [ORDER BY clause])**'
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**LAG(expression, offset) OVER ([PARTITION BY 子句] [ORDER BY 子句])**'
- en: '*LEAD()* gets the data from the row that follows the current row. If there
    is no following row then it returns *NULL.* The common syntax is,'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*LEAD()* 从当前行之后的行获取数据。如果没有后续行，则返回*NULL*。常见的语法是，'
- en: '**LEAD(expression, offset) OVER ([PARTITION BY clause] [ORDER BY clause])**'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**LEAD(expression, offset) OVER ([PARTITION BY 子句] [ORDER BY 子句])**'
- en: Where ***offset***is optional and but when used its value must be either 0 or
    a positive integer,
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 其中***offset***是可选的，但使用时其值必须是 0 或正整数，
- en: When specified as 0, then *LAG()* and *LEAD()* evaluate the expression for the
    current row.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当指定为 0 时，*LAG()* 和 *LEAD()* 会对当前行评估表达式。
- en: When omitted, 1 is considered a default value, which takes the immediately preceding
    or following row to the current row.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果省略，1 被认为是默认值，它会取当前行的直接前一行或后一行。
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we have first used *CTE (Common Table Expression)* to get the data of
    total sales for each *PRODUCTCATEGORY* year-wise. We then use this data with *LAG()*
    and *LEAD()* to fetch data of total sales partitioned by *PRODUCTCATEGORY* and
    ordered by *SALES_YEAR* for the previous and following calendar year respectively.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先使用*CTE（公共表表达式）*来获取每个*PRODUCTCATEGORY*按年度的总销售数据。然后，我们使用这些数据与*LAG()* 和
    *LEAD()* 结合，以获取按*PRODUCTCATEGORY* 分区且按*SALES_YEAR* 排序的前一年和后一年总销售数据。
- en: '![](../Images/24ef51d7c4bc4b1269bd75db4181e98b.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24ef51d7c4bc4b1269bd75db4181e98b.png)'
- en: Image by author
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Conclusion
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Window Functions are really useful when you want to analyze your data in multiple
    ways. Different flavors of SQL may have slightly different implementations, so
    it’s always a good idea to refer to the official documentation of a particular
    SQL flavor. Here are some resources to get you started,
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数在你想以多种方式分析数据时非常有用。不同的 SQL 变体可能有略微不同的实现，因此查阅特定 SQL 变体的官方文档总是一个好主意。以下是一些资源，帮助你入门，
- en: '[Anatomy of Window Functions](/anatomy-of-sql-window-functions-7256d8cf509a)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[窗口函数的解剖](https://anatomy-of-sql-window-functions-7256d8cf509a)'
- en: '[Window Function concepts and syntax](https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[窗口函数概念和语法](https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html)'
- en: '[MySQL Window Function Restrictions](https://dev.mysql.com/doc/refman/8.0/en/window-function-restrictions.html)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL 窗口函数限制](https://dev.mysql.com/doc/refman/8.0/en/window-function-restrictions.html)'
- en: '[SQL Window Function Cheat Sheet](https://learnsql.com/blog/sql-window-functions-cheat-sheet/)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 窗口函数备忘单](https://learnsql.com/blog/sql-window-functions-cheat-sheet/)'
- en: If you remember something really well, you must have practiced it well,
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得某些东西非常清楚，你一定是练习得很好，
- en: '[HackerRank](https://www.hackerrank.com) or [LeetCode](https://leetcode.com)
    to practice basic/intermediate/advance SQL problems.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HackerRank](https://www.hackerrank.com) 或 [LeetCode](https://leetcode.com)
    用来练习基础/中级/高级 SQL 问题。'
- en: '[*Become a member and read every story on Medium*](https://medium.com/@iffatm/membership)*.*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[*成为会员，阅读 Medium 上的所有故事*](https://medium.com/@iffatm/membership)*.*'
- en: Happy Learning!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐学习！
