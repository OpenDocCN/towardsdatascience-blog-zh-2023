- en: 'Unlocking Data Access: Harnessing Triggers in the Absence of API Endpoints'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解锁数据访问：在没有 API 端点的情况下利用触发器
- en: 原文：[https://towardsdatascience.com/unlocking-data-access-harnessing-triggers-in-the-absence-of-api-endpoints-4b5c8b775058](https://towardsdatascience.com/unlocking-data-access-harnessing-triggers-in-the-absence-of-api-endpoints-4b5c8b775058)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/unlocking-data-access-harnessing-triggers-in-the-absence-of-api-endpoints-4b5c8b775058](https://towardsdatascience.com/unlocking-data-access-harnessing-triggers-in-the-absence-of-api-endpoints-4b5c8b775058)
- en: Fill in the missing pieces of your data puzzle using triggers
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用触发器填补数据拼图中的缺失部分
- en: '[](https://mg-subha.medium.com/?source=post_page-----4b5c8b775058--------------------------------)[![Subha
    Ganapathi](../Images/d346759d5990b79aae7ef2c3a5ab7cf3.png)](https://mg-subha.medium.com/?source=post_page-----4b5c8b775058--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4b5c8b775058--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4b5c8b775058--------------------------------)
    [Subha Ganapathi](https://mg-subha.medium.com/?source=post_page-----4b5c8b775058--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mg-subha.medium.com/?source=post_page-----4b5c8b775058--------------------------------)[![Subha
    Ganapathi](../Images/d346759d5990b79aae7ef2c3a5ab7cf3.png)](https://mg-subha.medium.com/?source=post_page-----4b5c8b775058--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4b5c8b775058--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4b5c8b775058--------------------------------)
    [Subha Ganapathi](https://mg-subha.medium.com/?source=post_page-----4b5c8b775058--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4b5c8b775058--------------------------------)
    ·10 min read·Jun 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4b5c8b775058--------------------------------)
    ·10 分钟阅读·2023年6月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8ab9ec3ecea0b81357cdfa9d26f5cf96.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ab9ec3ecea0b81357cdfa9d26f5cf96.png)'
- en: Photo by [Pixabay](https://www.pexels.com/photo/abstract-accuracy-accurate-aim-262438/)
    from [Pexels](https://www.pexels.com/)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Pixabay](https://www.pexels.com/photo/abstract-accuracy-accurate-aim-262438/)
    来自 [Pexels](https://www.pexels.com/)
- en: Overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: '**Have you ever faced a scenario wherein you’ve tried to extract a crucial
    data point from a transactional system (such as an e-commerce system) using its
    API, only to discover that the necessary information was not accessible through
    the provided endpoints? If so, read on to discover how this challenge can be effectively
    tackled using Triggers.**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**你是否曾经遇到过这样的场景：你尝试通过 API 从一个事务系统（如电子商务系统）中提取一个关键数据点，却发现通过提供的端点无法访问所需的信息？如果是这样，请继续阅读，了解如何有效地利用触发器应对这一挑战。**'
- en: In the absence of endpoints, we might think that querying data directly from
    the transactional tables is an option**.** It is definitely not a good idea to
    query your transactional tables directly as it can have a significant impact on
    the performance and stability of the transactional system, particularly when it
    involves an e-commerce system. When you try querying data from a live, e-commerce
    system, it is likely to have an adverse effect on user experience (Imagine waiting
    for 5–10 minutes for your cart to be retrieved while shopping on Amazon!).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有端点的情况下，我们可能会认为直接从事务表中查询数据是一种选择**。** 直接查询事务表绝对不是一个好主意，因为它可能会对事务系统的性能和稳定性产生重大影响，特别是当涉及到电子商务系统时。当你尝试从实时的电子商务系统中查询数据时，很可能会对用户体验产生不利影响（想象一下在亚马逊购物时需要等待
    5 到 10 分钟才能检索到购物车！）。
- en: In addition to that, running jobs on a transactional system’s tables can potentially
    disrupt ongoing transactions. This issue becomes even more critical if you are
    considering a ‘Truncate-Load’ operation in your data warehouse tables on a daily
    basis. Furthermore, the aforementioned option falls short of a sustainable solution
    since it lacks support for smooth historical data loads assuming periodic data
    purges happening in the transactional system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，在事务系统的表上运行作业可能会干扰正在进行的事务。如果你考虑在数据仓库表中每天进行“截断-加载”操作，这个问题变得更加重要。此外，上述选项不足以成为可持续的解决方案，因为它不支持平滑的历史数据加载，假设事务系统中定期进行数据清除。
- en: Therefore, it becomes crucial to automate the process of extracting data from
    the transactional system and seamlessly integrating it into the data warehouse
    while also not adversely impacting the system. Database triggers provide an effective
    solution in this scenario. But before we dive into the solution, here is an introduction
    to triggers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，自动化从事务系统中提取数据并将其无缝集成到数据仓库中，同时又不会对系统产生不利影响，就变得至关重要。在这种情况下，数据库触发器提供了一种有效的解决方案。但在我们深入探讨解决方案之前，这里是对触发器的简介。
- en: A Short Introduction to Triggers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发器简介
- en: Database Triggers
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库触发器
- en: An often overlooked concept, Database triggers have been present since the inception
    of relational databases. A database trigger is a function that gets triggered
    every time a record is created or updated (or even deleted) in the source table
    (in this case, a transactional table).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库触发器是一个经常被忽视的概念，自关系型数据库诞生以来就存在。数据库触发器是一个函数，每当在源表（在此情况下为事务表）中创建、更新（或甚至删除）记录时，都会触发该函数。
- en: 'Database triggers are of two types: DDL Triggers and DML Triggers.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库触发器分为两种类型：DDL 触发器和 DML 触发器。
- en: DDL Triggers are set up whenever you want to get notified of structuralchanges
    in your database. For example, DDL triggers are useful when you wish to get alerted
    every time a new schema is defined; or when a new table is created or dropped.
    Hence, the name DDL (Data Definition Language) triggers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: DDL 触发器在你希望获取数据库结构更改通知时设置。例如，当你希望在每次定义新模式时得到警报，或者在创建或删除新表时得到通知时，DDL 触发器非常有用。因此，命名为
    DDL（数据定义语言）触发器。
- en: DML Triggers are fired when new records are inserted, deleted, or updated In
    other words, you get notified anytime a Data Manipulation change happens in a
    system. **An important point here is that database triggers can be programmed
    to not just alert you about a change but also to perform actions such as moving
    data into a staging table.**
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DML 触发器在插入、删除或更新新记录时被触发。换句话说，你会在系统中发生数据操作更改时得到通知。**一个重要的点是，数据库触发器可以被编程来不仅仅提醒你发生了变化，还可以执行如将数据移动到暂存表等操作。**
- en: '**Specialized Triggers**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**专用触发器**'
- en: Modern cloud platforms such as Azure and AWS provide specialized triggers as
    part of their services. It is to be noted that **specialized triggers are not
    the same as Database Triggers**. While database triggers are specific to database
    management systems (DBMS) and operate within the database itself, specialized
    triggers have a wider scope. They can be used for a variety of automation tasks,
    for event-driven workflows, and also to create smooth integrations between cloud
    services and their components.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现代云平台如 Azure 和 AWS 提供了作为其服务一部分的专用触发器。需要注意的是，**专用触发器与数据库触发器并不相同**。数据库触发器是特定于数据库管理系统（DBMS）的，并且在数据库内部运行，而专用触发器具有更广泛的应用范围。它们可以用于各种自动化任务、事件驱动的工作流，并且能够在云服务及其组件之间创建流畅的集成。
- en: 'Here are some specialized triggers offered by AWS as part of its cloud services:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 AWS 作为其云服务的一部分提供的一些专用触发器：
- en: 'AWS Lambda Triggers: These triggers help initiate a lambda function when a
    specified event happens. In other words, you can specify an event that should
    trigger the lambda function. Events can be internal to AWS, or external in nature.
    Internal events can be related to AWS services such as Amazon S3, Amazon DynamoDB
    streams, or Amazon Kinesis. External events can come in from the database trigger
    of a transactional system outside of AWS or an IoT event.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda 触发器：这些触发器帮助在指定事件发生时启动一个 lambda 函数。换句话说，你可以指定一个事件来触发 lambda 函数。事件可以是
    AWS 内部的，也可以是外部的。内部事件可能与 AWS 服务相关，如 Amazon S3、Amazon DynamoDB 流或 Amazon Kinesis。外部事件可能来自
    AWS 外部事务系统的数据库触发器或 IoT 事件。
- en: 'Amazon S3 Event Notifications: These triggers enable you to get notified whenever
    an S3 bucket is created, modified, or deleted. They use AWS’ Simple Notification
    Service (SNS) to broadcast a message.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon S3 事件通知：这些触发器使你能够在 S3 存储桶被创建、修改或删除时获得通知。它们使用 AWS 的简单通知服务（SNS）来广播消息。
- en: 'AWS Cloudwatch Events: If you have used standalone relational databases such
    as Microsoft SQL Server and SQL Server Management Studio (SSMS), you may have
    used SQL Server Agent to notify users of a job failure. Cloudwatch is specific
    to AWS and is used not only to notify users of a job failure but also to trigger
    Lambda functions and to respond to events. The important difference between a
    CloudWatch Event and a Lambda Trigger is that while Lambda triggers refer to the
    capability of AWS Lambda to respond to events, CloudWatch Events is a broader
    event management service that can handle events from sources beyond Lambda. On
    a side note, while SQL Server Agent requires an email server to be configured,
    Cloudwatch has no such requirement.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Cloudwatch Events：如果你使用过独立的关系数据库，如 Microsoft SQL Server 和 SQL Server Management
    Studio (SSMS)，你可能使用过 SQL Server Agent 来通知用户作业失败。Cloudwatch 特定于 AWS，不仅用于通知用户作业失败，还用于触发
    Lambda 函数和响应事件。CloudWatch Event 和 Lambda Trigger 之间的重要区别在于，虽然 Lambda triggers
    指的是 AWS Lambda 响应事件的能力，但 CloudWatch Events 是一个更广泛的事件管理服务，可以处理来自 Lambda 以外来源的事件。顺便提一下，虽然
    SQL Server Agent 需要配置邮件服务器，但 Cloudwatch 没有这样的要求。
- en: 'Here are some specialized triggers offered by Azure as part of its cloud services:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Azure 作为其云服务的一部分提供的一些专用触发器：
- en: Blob Trigger — Azure blobs are similar to S3 buckets offered by AWS. Similar
    to how Amazon S3 notifications can be used to get alerts about changes in S3 buckets;
    blob triggers can be used to get notified of changes in Azure blob containers.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blob Trigger——Azure blob 类似于 AWS 提供的 S3 buckets。类似于 Amazon S3 通知可以用来获取 S3 buckets
    中变化的警报，blob triggers 可以用来获取 Azure blob 容器中变化的通知。
- en: Azure Function Trigger—These are the Azure equivalent of AWS Lambda Function
    Triggers. These triggers can be used to initiate an Azure function in response
    to an event within Azure or an external event, such as an external transactional
    database trigger, an HTTP request, or an IoT event hub stream. Azure functions
    can also be initiated based on a pre-defined schedule using a Timer Trigger.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Function Trigger——这些是 Azure 相当于 AWS Lambda Function Triggers 的功能。这些触发器可以用来响应
    Azure 内部或外部事件来启动 Azure 函数，例如外部事务数据库触发器、HTTP 请求或 IoT 事件中心流。Azure 函数也可以基于预定义的时间表通过
    Timer Trigger 启动。
- en: Now that we’ve looked at the different types of database triggers and specialized
    triggers offered by AWS and Azure, let’s revisit the use case to refresh your
    memory. Allow me to remind you about the use case we mentioned earlier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了 AWS 和 Azure 提供的不同类型的数据库触发器和专用触发器，让我们回顾一下之前提到的使用案例，以刷新你的记忆。允许我提醒你一下我们之前提到的使用案例。
- en: The use case — You see a couple of data points in your transactional system’s
    tables that you would require for your reporting metrics but these data points
    are not being provided by your transactional system’s API endpoints. So, there
    is no way you can write a script in Python or Java to grab these data points using
    the API. You cannot use direct querying on your transactional system as it can
    negatively impact its performance.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用案例——你在事务系统的表中看到了一些你需要用于报告指标的数据点，但这些数据点没有通过你的事务系统的 API 端点提供。因此，你无法使用 Python
    或 Java 编写脚本通过 API 获取这些数据点。你也不能在你的事务系统上直接查询，因为这可能会对其性能产生负面影响。
- en: 'To tackle this, we use a combination of database triggers and specialized triggers
    offered by cloud services. Here is a high-level approach:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们使用数据库触发器和云服务提供的专用触发器的组合。以下是一个高级别的方法：
- en: '![](../Images/10d4ce976426cec7d721dd31e683678f.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10d4ce976426cec7d721dd31e683678f.png)'
- en: '**High-level Approach (Image by the author)**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级别方法（作者提供的图片）**'
- en: '**Pre-requisite:** Identify the table in your transactional system’s database
    that has the data points which are not accessible via API endpoints. Once you
    have identified the table, follow the steps below -'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**前提条件：** 识别你事务系统数据库中那些通过 API 端点无法访问的数据表。一旦识别出这些表，按照以下步骤操作——'
- en: '**Step 1:** Create a staging table having the same columns as the transactional
    table. **Ensure that you don’t have any additional constraints copied over from
    the source transactional table.** This is to ensure as minimal impact as possible
    on the transactional system. In addition to that, also have a column to indicate
    the operation performed such as Insert, Update, Delete). Assuming that your transactional
    table’s backend has a SQL Server backend, here is an example of the transactional
    table and the staging table that would need to be created.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1：** 创建一个与事务表具有相同列的暂存表。**确保从源事务表中没有任何额外的约束被复制过来。** 这样可以尽可能减少对事务系统的影响。此外，还需添加一列来指示所执行的操作，例如插入、更新、删除。假设你的事务表的后端是
    SQL Server，以下是需要创建的事务表和暂存表的示例。'
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The staging table would then be:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 暂存表将是：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Step 2:** Set up a DML trigger directly on the ‘Pricing_info’ table (main
    transactional table).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2：** 直接在‘Pricing_info’表（主要事务表）上设置 DML 触发器。'
- en: The trigger would need to be programmed to insert data into a staging table
    whenever a new record comes in, or an existing record is updated or deleted. The
    idea behind using a staging table is that it will avoid any unnecessary strain
    on the main transactional tables.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器需要被编程，以便每当有新记录插入，或现有记录被更新或删除时，数据将被插入到暂存表中。使用暂存表的目的是避免对主要事务表施加不必要的压力。
- en: Below is an example of the same. As seen below, the two most important aspects
    of the DML trigger (in fact, for any database trigger) are the Trigger Event and
    the Trigger Timing. The Trigger Event refers to the action that should activate
    the trigger. In this case, we are interested in all DML events namely Insert,
    Delete, and Update in the transaction table ‘Pricing_info’. The Trigger Timing
    refers to whether you need the trigger to perform an activity before the event
    occurs or after the event occurs. For our use case, it is clearly an ‘After’ event
    trigger. We create three triggers, one for each DML event.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同内容的示例。如下面所示，DML 触发器的两个最重要方面（实际上，任何数据库触发器）是触发事件和触发时间。触发事件指的是应该激活触发器的操作。在这种情况下，我们关注所有
    DML 事件，即插入、删除和更新在事务表‘Pricing_info’中。触发时间指的是触发器是在事件发生之前还是之后执行活动。对于我们的用例，显然是‘After’事件触发器。我们创建三个触发器，每个
    DML 事件一个。
- en: 'Below is the Trigger for Insert:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是插入的触发器：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next is the trigger for Update:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是更新的触发器：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Lastly, we create the trigger for Delete:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建删除的触发器：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Step 3:** Let’s now move on to the portion of setting up the specialized
    triggers.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3：** 现在让我们进入设置专用触发器的部分。'
- en: '**Step 3a. If your data warehouse is housed in AWS**, below is a high-level
    solution that can be implemented.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3a。如果你的数据仓库托管在 AWS 中，** 以下是可以实施的高级解决方案。'
- en: '![](../Images/41d4748e57491ce574a5c18a11721996.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41d4748e57491ce574a5c18a11721996.png)'
- en: '**Implementation Idea for AWS — Using DML Triggers and AWS Lambda (Image by
    the author)**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS 实现思路 — 使用 DML 触发器和 AWS Lambda（图片由作者提供）**'
- en: In the above solution, the source is the transactional system. We set up a database
    DML trigger in the transactional system’s database. Whenever a new record comes
    into the transactional database table, the trigger would insert the new data into
    a staging table within the transactional database. Based on a schedule (using
    AWS Cloudwatch events), the Lambda trigger would trigger a lambda function to
    grab the data from the staging table to a table in the datawarehouse (Redshift).
    Let’s see the steps within this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述解决方案中，源是事务系统。我们在事务系统的数据库中设置一个数据库 DML 触发器。每当一个新记录进入事务数据库表时，触发器会将新数据插入到事务数据库中的暂存表中。根据计划（使用
    AWS Cloudwatch 事件），Lambda 触发器会触发一个 Lambda 函数，将数据从暂存表抓取到数据仓库（Redshift）中的表中。让我们看看其中的步骤。
- en: '**Pre-requisite:** Create a table in the datawarehouse that will hold the transactional
    information.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**前提条件：** 在数据仓库中创建一个表以保存事务信息。'
- en: 'Step 3a. (i) Create an AWS Lambda function: Write the code for your Lambda
    function that will grab the records from the staging table and insert them into
    the datawarehouse table, along with any underlying calculations necessary.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3a.（i）创建一个 AWS Lambda 函数：编写 Lambda 函数的代码，该函数将从暂存表中获取记录，并将其插入到数据仓库表中，同时进行任何必要的计算。
- en: Step 3b. (ii) Create the AWS Lambda Trigger — Schedule a Lambda trigger using
    AWS Cloudwatch services to run the lambda function in a nightly schedule (It is
    advisable to run the Lambda function during off-business hours or periods of low
    activity in the transactional system.)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3b. (ii) 创建 AWS Lambda Trigger — 使用 AWS Cloudwatch 服务安排 Lambda 触发器在夜间时间表中运行
    Lambda 函数（建议在业务时间之外或事务系统活动较低的时间段运行 Lambda 函数）。
- en: Step 3c. (iii) Set up Event Mapping using EventBridge — Configure the Lambda
    trigger to an event such that the trigger gets initiated based on the event condition
    specified. A typical scenario would be to trigger the Lambda on a schedule — once
    per day.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3c. (iii) 使用 EventBridge 设置事件映射 — 配置 Lambda 触发器为事件，以便触发器基于指定的事件条件启动。一个典型的场景是按计划触发
    Lambda — 每天一次。
- en: AWS offers great documentation around setting up Lambda functions, and hence,
    it is out of scope for this article.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了有关设置 Lambda 函数的详细文档，因此不在本文的讨论范围内。
- en: '**Step 3b. If your data warehouse is housed in Azure**, we can use Azure Functions
    and the timer trigger or an Azure Function Trigger offered by Azure.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3b. 如果你的数据仓库托管在 Azure**，我们可以使用 Azure Functions 和定时触发器或 Azure 提供的 Azure
    Function Trigger。'
- en: '![](../Images/ab8b3630270d4327e6e5f2e88541cb25.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ab8b3630270d4327e6e5f2e88541cb25.png)'
- en: '**Implementation Idea for Azure — Using DML Triggers and Azure Functions (Image
    by the author)**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure 实现方案 — 使用 DML 触发器和 Azure Functions（作者提供的图片）**'
- en: 'In this case, it is a good idea to use timer triggers. When the timer trigger
    activates, it would run the Azure Function which would then pick up the new/updated/deleted
    records from the staging table. (Note: The staging table will have an additional
    flag variable indicating whether the record was inserted, updated, or deleted).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用定时触发器是一个好主意。当定时触发器激活时，它将运行 Azure Function，然后从暂存表中提取新记录/更新记录/删除记录。（注意：暂存表将具有一个额外的标志变量，指示记录是插入、更新还是删除。）
- en: 'Here are the steps to follow:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要遵循的步骤：
- en: 'Step 3b. (i): Create an Azure Function: This is analogous to setting up the
    AWS Lambda function. Set up the code to gather records from the staging table
    and insert them into the datawarehouse table, along with any underlying calculations.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3b. (i)：创建 Azure Function：这类似于设置 AWS Lambda 函数。设置代码以从暂存表中提取记录并将其插入数据仓库表中，同时进行任何必要的计算。
- en: 'Step 3b. (ii): Set up the Azure Function Trigger: Using the Azure Function
    app, set up a timer trigger and specify the schedule and a timestamp parameter
    name.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3b. (ii)：设置 Azure Function Trigger：使用 Azure Function 应用程序，设置一个定时触发器并指定计划和时间戳参数名称。
- en: 'Step 3b. (iii): Set up Event Mapping using Azure Eventgrid: Configure the trigger
    to map the event data to the appropriate parameters in your Azure Function. This
    enables the trigger to get initiated based on the event condition specified.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3b. (iii)：使用 Azure Eventgrid 设置事件映射：配置触发器将事件数据映射到 Azure Function 中的适当参数。这使得触发器能够基于指定的事件条件启动。
- en: Handling Historic Data Loads
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理历史数据加载
- en: The solution that we discussed so far is for new data coming in for the data
    points of interest. How do we bring in the historic data?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的解决方案是针对新数据进入感兴趣的数据点。那么我们如何处理历史数据呢？
- en: For this, one option would be to do a ‘CREATE TABLE AS SELECT’ (SELECT * INTO
    in SQL Server) while creating the staging table. This will create the staging
    table pre-populated with all the data currently available in the transaction table.
    The remaining steps would remain the same (via a specialized Azure timer trigger/AWS
    Lambda trigger as the case may be).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，一个选项是创建暂存表时执行‘CREATE TABLE AS SELECT’（SQL Server 中的 SELECT * INTO）。这将创建一个预先填充了事务表中当前所有数据的暂存表。其余步骤将保持不变（根据具体情况通过专用的
    Azure 定时触发器/AWS Lambda 触发器）。
- en: Another option would be to do an ‘EMPTY UPDATE’ on all the records in the transaction
    table. Here is a sample empty update based on the current example/use case —
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是对事务表中的所有记录执行‘EMPTY UPDATE’。以下是基于当前示例/用例的空更新示例 —
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, none of the values get updated. However, from a database perspective,
    all records were updated and hence, the trigger would be fired for all the updates.
    Thereby, all the data would reach the staging table. **Note that this is not a
    recommended approach** as it could bog down the transactional system due to the
    number of updates and undo statements generated. Moreover, the transaction table
    will also be locked during the entire update operation and will be unavailable
    for other processes thus impacting the transactional system. This method is okay
    to use if your transaction table is extremely small in size.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，没有任何值被更新。然而，从数据库的角度来看，所有记录都已更新，因此触发器将为所有更新触发。因此，所有数据都会到达暂存表。**请注意，这不是推荐的方法**，因为它可能由于生成的更新和撤销语句的数量而拖累交易系统。此外，整个更新操作期间事务表也将被锁定，其他进程无法使用，从而影响交易系统。如果你的事务表非常小，这种方法是可以使用的。
- en: Concluding Remarks
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: In this article, we explored triggers’ versatility in capturing critical data
    points not readily available through standard API endpoints of the transactional
    system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探索了触发器在捕获通过交易系统的标准 API 端点无法轻易获得的关键数据点方面的多样性。
- en: They help ensure data integrity and eliminate the need for manual intervention.
    Thereby, they also ensure the effective inclusion of crucial reporting metrics.
    The solution provided here is asynchronous in nature to ensure that the transactional
    system is not burdened in any way. If your transactional system does not have
    a lot of traffic (or) is not directly used by end-user applications, then it can
    be set up as a synchronous process. In that case, the lambda or the Azure functions
    would need to have the trigger event as the transactional database’s staging table.
    The appropriate database connection information would also need to be provided.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些有助于确保数据完整性，并消除对人工干预的需求。因此，它们也确保了关键报告指标的有效纳入。这里提供的解决方案是异步的，以确保交易系统不会受到任何负担。如果你的交易系统没有大量流量（或）没有直接被终端用户应用程序使用，那么它可以设置为同步过程。在这种情况下，lambda
    或 Azure 函数需要将触发事件设置为交易数据库的暂存表。同时，还需要提供适当的数据库连接信息。
- en: Hope this article was helpful. Let me know if you have any questions in the
    comments. Happy learning!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章对你有帮助。如果你有任何问题，请在评论中告诉我。祝学习愉快！
