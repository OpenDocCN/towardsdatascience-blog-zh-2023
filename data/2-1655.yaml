- en: Pivot tables in Pandas and Handling Multi-Index Data with Hands-On Examples
    in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas 中的透视表及使用 Python 处理多重索引数据的实用示例。
- en: 原文：[https://towardsdatascience.com/pivot-tables-in-pandas-with-hands-on-examples-in-python-9f29a48796f2](https://towardsdatascience.com/pivot-tables-in-pandas-with-hands-on-examples-in-python-9f29a48796f2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pivot-tables-in-pandas-with-hands-on-examples-in-python-9f29a48796f2](https://towardsdatascience.com/pivot-tables-in-pandas-with-hands-on-examples-in-python-9f29a48796f2)
- en: Learn how to pivot a Pandas DataFrame and get meaningful insights
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何对 Pandas DataFrame 进行透视，并获得有意义的洞察。
- en: '[](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)[![Susan
    Maina](../Images/a3ac5f206f175c711a9e7779283fc18d.png)](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)
    [Susan Maina](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)[![Susan
    Maina](../Images/a3ac5f206f175c711a9e7779283fc18d.png)](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)
    [Susan Maina](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)
    ·11 min read·Feb 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)
    ·阅读时间 11 分钟·2023年2月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/58df12263c028369de91b8ed82ca9f81.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58df12263c028369de91b8ed82ca9f81.png)'
- en: Photo by [Елена from Pexels](https://www.pexels.com/photo/upside-down-multicolored-pencils-8850038/)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源 [Елена from Pexels](https://www.pexels.com/photo/upside-down-multicolored-pencils-8850038/)
- en: A pivot table is a data manipulation tool that rearranges a table and sometimes
    aggregates the values for easy analysis.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 透视表是一种数据操作工具，用于重新排列表格，有时还会聚合值以便于分析。
- en: In this article, we’ll look at the Pandas pivot_table function and how to use
    the various parameters it offers. We'll explore a real-world dataset from Kaggle
    to illustrate when and how to use the pivot_table function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨 Pandas 的 pivot_table 函数以及如何使用它提供的各种参数。我们将使用来自 Kaggle 的实际数据集来说明何时以及如何使用
    pivot_table 函数。
- en: Advantages of a pivot table
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 透视表的优点
- en: You can group the data by one or more columns and then summarize the values
    using various statistics such as mean, sum, and count.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过一个或多个列对数据进行分组，然后使用各种统计数据（如均值、总和和计数）来总结这些值。
- en: It has an easy-to-use syntax that intuitively allows for simple to complex data
    transformations.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有易于使用的语法，可以直观地进行简单到复杂的数据转换。
- en: '**Pivot_table syntax**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**透视表语法**'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Required parameters:*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*必需参数：*'
- en: '`data`: the data source, in the form of pandas DataFrame'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`: 数据源，格式为 pandas DataFrame'
- en: '*Either one of the two parameters below must be present to group the data.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*以下两个参数中至少需要一个来分组数据。*'
- en: '`index`: column(s) to group the data row-wise.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`: 按行分组数据的列。'
- en: '`columns`: column(s) to group the data column-wise.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns`: 按列分组数据的列。'
- en: '*Optional parameters:*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*可选参数：*'
- en: '`values`: column(s) to aggregate using the `aggfunc` function.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values`: 使用 `aggfunc` 函数进行聚合的列。'
- en: '`aggfunc`: Function used to aggregate the values by.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aggfunc`: 用于聚合值的函数。'
- en: '`fill_value`: value to replace missing values with.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fill_value`: 用于替换缺失值的值。'
- en: '`dropna`: whether to remove entire rows or columns that contain only NaN values.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropna`: 是否删除仅包含 NaN 值的整行或整列。'
- en: '`margins`: whether to include row and column subtotals.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`margins`: 是否包含行和列的小计。'
- en: '`margins_name`: label names for the row and column subtotals.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`margins_name`: 行和列小计的标签名称。'
- en: '`observed`: displays only observed values for categorical groupers.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`observed`: 仅显示分类分组器的观察值。'
- en: '`sort`: whether to sort the resulting row indices.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort`: 是否对结果的行索引进行排序。'
- en: '*Returns:*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*返回值：*'
- en: The pivot_table function returns a DataFrame with the summarized data using
    the parameters passed to it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: pivot_table 函数返回一个 DataFrame，其中包含使用传递给它的参数汇总的数据。
- en: '**An easy-to-use analogy** — In short, the pivot table syntax says that for
    every `‘index’`, return the `‘aggfunc’` of the `‘values’` column(s), segregated
    (further grouped) by `‘columns’`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**易于理解的类比** — 简而言之，透视表语法表示对于每一个`‘index’`，返回`‘values’`列的`‘aggfunc’`，按`‘columns’`进一步分组。'
- en: '![](../Images/f8c1b1921da8f77cfa41468439837e15.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8c1b1921da8f77cfa41468439837e15.png)'
- en: Pandas pivot_table illustration by author
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas透视表由作者提供的插图
- en: In our demonstrations below, we’ll use this analogy to understand the operations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的演示中，我们将使用这个类比来理解操作。
- en: '**The data**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据**'
- en: In this article, we’ll use the Hotel Reservations [Dataset](https://www.kaggle.com/datasets/ahsan81/hotel-reservations-classification-dataset)
    from Kaggle available under the [Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/)
    license. After exploring and cleaning the dataset in [this](https://github.com/suemnjeri/medium-articles/blob/main/pivot_table_pandas/EDA%20and%20Cleaning%20Hotel%20reservations%20Data.ipynb)
    notebook, below is a sample of the DataFrame that we’ll use to demonstrate pivot
    tables in Pandas.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将使用来自Kaggle的酒店预订[数据集](https://www.kaggle.com/datasets/ahsan81/hotel-reservations-classification-dataset)，该数据集使用[署名
    4.0 国际 (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/)许可证。我们将在[这个](https://github.com/suemnjeri/medium-articles/blob/main/pivot_table_pandas/EDA%20and%20Cleaning%20Hotel%20reservations%20Data.ipynb)笔记本中对数据集进行探索和清理，下面是我们将用来演示Pandas中透视表的DataFrame的一个示例。
- en: '![](../Images/aa38bf7cf92c7348d86d17e039c6ebbc.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa38bf7cf92c7348d86d17e039c6ebbc.png)'
- en: Sample DataFrame by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的示例DataFrame
- en: '**Exploring one parameter at a time**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**逐个参数探索**'
- en: '**‘Index’ parameter (Default: index = None)**'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Index’ 参数（默认值：index = None）**'
- en: This is the column(s) for grouping the data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于对数据进行分组的列。
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s look at the code above using the analogy we mentioned earlier. For each
    `market`, we want the `mean` of *all numeric* columns (the `values` parameter
    defaults to all columns which can handle the default `aggfunc=’mean’` parameter
    and are not present in the `‘index’` parameter).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用前面提到的类比来查看上面的代码。对于每个`market`，我们想要*所有数值*列的`mean`（`values`参数默认为所有可以处理默认`aggfunc=’mean’`参数且不在`‘index’`参数中的列）。
- en: '![](../Images/bc2d28efb30667a48116e267bb28a876.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc2d28efb30667a48116e267bb28a876.png)'
- en: Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: This results in a DataFrame grouped by the `‘market’`. The values in each cell
    are calculated as the average value of that column (e.g. number of guests, or
    room price) per market group.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生一个按`‘market’`分组的DataFrame。每个单元格中的值是按市场组计算的该列的平均值（例如，客人数量或房价）。
- en: '**‘Columns’ parameter (Default: columns = None)**'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Columns’ 参数（默认值：columns = None）**'
- en: This is also for grouping the data but on the columns level.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是在列级别对数据进行分组。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The same analogy applies. For each `‘market’`, return the `‘mean’` of the numeric
    values. The groups are displayed column-wise, and a transposed DataFrame to the
    one in the previous section is returned.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的类比适用。对于每个`‘market’`，返回数值的`‘mean’`。这些组按列显示，并返回一个转置的DataFrame。
- en: '![](../Images/278bf1bd1801048ef72ca996694b6524.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/278bf1bd1801048ef72ca996694b6524.png)'
- en: Image by author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**‘Values’ parameter (Default: values = None)**'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Values’ 参数（默认值：values = None）**'
- en: These are the values that will appear in the table cells. The aggregation function
    is applied to these values.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是将出现在表格单元格中的值。聚合函数应用于这些值。
- en: As mentioned earlier, we must pass the `data` and at least the `index` or `columns`
    parameters that group the data. If the `values` parameter is not explicitly specified,
    it is inferred from the data as the columns that support the `aggfunc` parameter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们必须传递`data`和至少`index`或`columns`参数来对数据进行分组。如果`values`参数没有明确指定，则会从数据中推断出支持`aggfunc`参数的列。
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The code above says that for every `‘meal_plan’` group, return the `‘mean’`
    of the `‘room_price’` values.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码表示对于每个`‘meal_plan’`组，返回`‘room_price’`值的`‘mean’`。
- en: '![](../Images/ebf332d440a1d94d42c8ba9741f20fc6.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ebf332d440a1d94d42c8ba9741f20fc6.png)'
- en: Image by author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**‘Aggfunc’ parameter (Default: aggfunc = ‘mean’)**'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Aggfunc’ 参数（默认值：aggfunc = ‘mean’）**'
- en: This is the function to aggregate the values (or choose the value to return)
    per group.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每组的值汇总（或选择返回值）的函数。
- en: The table below contains the commonly used `aggfunc` options and whether they
    apply to only numeric functions or both numeric and categorical functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下表包含常用的`aggfunc`选项，以及它们是否仅适用于数值函数或同时适用于数值和分类函数。
- en: '**Numeric columns:**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**数值列：**'
- en: '*‘mean’ — average of each group'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*‘mean’ — 每组的平均值'
- en: ‘sum’ — total sum per group
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ‘sum’ — 每组的总和
- en: ‘median’ — median value per group
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ‘median’ — 每组的中位数
- en: ‘std’ — standard deviation
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ‘std’ — 标准差
- en: ‘var’ — variance for each group
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ‘var’ — 每组的方差
- en: ‘mad’ — mean absolute deviation
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ‘mad’ — 平均绝对偏差
- en: ‘prod’ — product of values per group*
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ‘prod’ — 每组的值的乘积*
- en: '**Both numeric and categorical columns**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字和分类列**'
- en: '*‘count’ — number of rows per group'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*‘count’ — 每组的行数'
- en: ‘min’ — minimum value per group
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ‘min’ — 每组的最小值
- en: ‘max’ — maximum value
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ‘max’ — 最大值
- en: ‘first’ — first row value per group
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ‘first’ — 每组的第一行值
- en: ‘last’ — last row value
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ‘last’ — 最后一行的值
- en: ‘nunique’- number of unique values per group*
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ‘nunique’ — 每组的唯一值数量*
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the code above, for every `‘market’` group, return the number of `unique`
    `‘room_types’`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，对于每个 `‘market’` 组，返回 `unique` `‘room_types’` 的数量。
- en: '![](../Images/e22db644bfcfcf94dded4bf0d5134a80.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e22db644bfcfcf94dded4bf0d5134a80.png)'
- en: '`**aggfunc**` **dictionary** — we can also have `{‘values’:’aggfunc’}` dictionary
    pairs where we pass different functions for different `values` columns.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`**aggfunc**` **字典** — 我们还可以有 `{‘values’:’aggfunc’}` 字典对，其中我们为不同的 `values`
    列传递不同的函数。'
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, for every `‘market’` group, return the `count` of `‘room_types’`, the
    `maximum` `‘lead_time’`, and the `average ‘price’`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，对于每个 `‘market’` 组，返回 `‘room_types’` 的 `count`、`‘lead_time’` 的 `maximum`
    和 `‘price’` 的 `average`。
- en: '![](../Images/f52bd99043e7094629ba520e1bfc7e78.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f52bd99043e7094629ba520e1bfc7e78.png)'
- en: Image by author
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: '`**df.reset_index()**` — The results produced in the examples above are grouped
    by the `index` parameter, making it the new [index](/pandas-index-explained-b131beaf6f7b).
    You can use `df.reset_index()` to reset this column to a regular column, which
    also adds a [RangeIndex](https://pandas.pydata.org/docs/reference/api/pandas.RangeIndex.html)
    with integers from 0.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`**df.reset_index()**` — 上述示例中生成的结果按 `index` 参数分组，使其成为新的 [index](/pandas-index-explained-b131beaf6f7b)。你可以使用
    `df.reset_index()` 将此列重置为常规列，同时添加一个包含从 0 开始的 [RangeIndex](https://pandas.pydata.org/docs/reference/api/pandas.RangeIndex.html)。'
- en: '![](../Images/c99bf87068d35763770ddbeb3e3b287b.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c99bf87068d35763770ddbeb3e3b287b.png)'
- en: Image by author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: '**Understanding Multi-index column headers in pivot tables**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**理解透视表中的多重索引列头**'
- en: Before looking at the other pivot_table parameters, let's touch on [multi-index
    columns](https://medium.com/towards-data-science/functions-that-generate-a-multiindex-in-pandas-and-how-to-remove-the-levels-7aa15ac7ca95)
    that result from the pivot_table, and later on, how to remove the levels.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看其他 `pivot_table` 参数之前，我们先来看看从 `pivot_table` 生成的 [多重索引列](https://medium.com/towards-data-science/functions-that-generate-a-multiindex-in-pandas-and-how-to-remove-the-levels-7aa15ac7ca95)，以及如何去除这些层级。
- en: '![](../Images/99d0d2c2f4db168fd6d928a628c00312.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/99d0d2c2f4db168fd6d928a628c00312.png)'
- en: DataFrame Multi-index illustration by author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 多重索引示意图，作者提供
- en: 'Multi-index columns are present when the pivot table has:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当透视表具有以下条件时，会出现多重索引列：
- en: '*An ‘index’ parameter'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*一个 ‘index’ 参数'
- en: AND
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: AND
- en: multiple ‘columns’ parameters
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 多个 ‘columns’ 参数
- en: AND/OR
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: AND/OR
- en: multiple ‘values’ parameters
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 多个 ‘values’ 参数
- en: AND/OR
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: AND/OR
- en: multiple ‘aggfunc’ parameters*
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 多个 ‘aggfunc’ 参数*
- en: '**~** `**index**` **and multiple** `**columns**`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**~** `**index**` **和多个** `**columns**`'
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the code above, we group the data by `‘market’` and then return the `average`
    `‘room price’` further grouped by `status` and `year`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们按 `‘market’` 对数据进行分组，然后返回按 `status` 和 `year` 进一步分组的 `average` `‘room
    price’`。
- en: '![](../Images/92bdf388d14d01c37540f4bfefa16448.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92bdf388d14d01c37540f4bfefa16448.png)'
- en: Image by author
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Notice that for every column in the `‘columns’` list, a column level (hierarchy)
    is added to the table in the order of outermost(0) towards innermost(1).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 `‘columns’` 列表中的每一列，表中会按照从最外层（0）到最内层（1）的顺序添加一个列级别（层次结构）。
- en: '**~** `**index**` **and multiple** `**values**`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**~** `**index**` **和多个** `**values**`'
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we group the data by `‘market’`, then return the `mean` of the `‘nights‘`
    and `‘month’` values, grouped by the `‘status’.`
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们按 `‘market’` 对数据进行分组，然后返回 `‘nights‘` 和 `‘month’` 值的 `mean`，按 `‘status’`
    分组。
- en: '![](../Images/803d10cc5ebb172de20abc9a99e83003.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/803d10cc5ebb172de20abc9a99e83003.png)'
- en: Image by author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: The `values` level comes on top of the `columns`, and by default, the names
    are sorted. (The `sort=False` argument currently only works on the row indices).
    Unlike the `columns` parameter, all the names are held at one level, no matter
    the length of the list.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`values` 层级位于 `columns` 之上，默认情况下，名称是排序的。（`sort=False` 参数目前仅适用于行索引）。与 `columns`
    参数不同，所有名称都保持在一个层级中，无论列表的长度如何。'
- en: '**~** `**index**` **and multiple** `**aggfunc**` **options**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**~** `**index**` **和多个** `**aggfunc**` **选项**'
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, group the data by `‘market’`, then return the `mean` and the `maximum`
    values of the `‘guests’` column, further grouped by `‘status’`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，按 `‘market’` 分组数据，然后返回 `‘guests’` 列的 `mean` 和 `maximum` 值，并进一步按 `‘status’`
    分组。
- en: '![](../Images/7697e9fdfabc8408d446dcd6fe9dc910.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7697e9fdfabc8408d446dcd6fe9dc910.png)'
- en: Image by author
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: The `aggfunc` layer comes at the highest level. Similar to the `values`, all
    the `aggfunc` options are held at one level.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`aggfunc` 层次处于最高层次。类似于 `values`，所有 `aggfunc` 选项都保留在一个层次中。'
- en: '**~** `**index**` **and multiple** `**columns**`**,** `**values**`**, and**
    `**aggfunc**` **options**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**~** `**index**` **和多个** `**columns**` **、** `**values**` **以及** `**aggfunc**`
    **选项**'
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, for every `‘market’`, return the `median` and `maximum` values of the
    `‘lead_time’` and `‘mights’` columns, further grouped by `‘status’` and `‘year’`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，对于每个 `‘market’`，返回 `‘lead_time’` 和 `‘mights’` 列的 `median` 和 `maximum` 值，并进一步按
    `‘status’` 和 `‘year’` 分组。
- en: '![](../Images/d4829fb846abe1cd57f620c4e80c38b4.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4829fb846abe1cd57f620c4e80c38b4.png)'
- en: Image by author
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Notice that we now have four levels; two levels for the `columns` parameter,
    and a level each for the `values` and the `aggfunc` arguments.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们现在有四个层次；两个层次用于 `columns` 参数，以及每个 `values` 和 `aggfunc` 参数各一个层次。
- en: '**Removing the multi-index layers**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**移除多重索引层次**'
- en: You will see that the `df.reset_index()` will not work as expected when there
    is a hierarchy of columns.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，当存在列的层次结构时，`df.reset_index()` 将不会按预期工作。
- en: '![](../Images/a4bd2bff7d95da584c0f13f515cfa10c.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4bd2bff7d95da584c0f13f515cfa10c.png)'
- en: df.reset_index with multi-index illustration by author
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: df.reset_index 的多重索引示意图由作者提供
- en: Here are two ways to deal with the multi-index
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两种处理多重索引的方法
- en: '***combine/merge the levels***'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***合并/合并层次***'
- en: '![](../Images/e8ccf3a894118ea33d6120865476a52e.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8ccf3a894118ea33d6120865476a52e.png)'
- en: Image by author
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Using the pivot table above, below are two ways to merge the levels.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述的数据透视表，下面有两种合并层次的方法。
- en: '***Using the*** `***map***` ***and*** `***join***` ***functions***'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***使用*** `***map***` ***和*** `***join***` ***函数***'
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Inside the `map` function, call the `join` function and pass the separator symbol,
    in our case an underscore. This returns a list of the joined column levels, which
    you then assign to the dataframe’s column names as below.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `map` 函数中，调用 `join` 函数并传递分隔符符号，在我们的例子中是下划线。这将返回一个连接的列层次的列表，然后你可以将其分配给数据框的列名，如下所示。
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/18f2dcda5f386dafd3f7d80cec9cfae4.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18f2dcda5f386dafd3f7d80cec9cfae4.png)'
- en: Merged multi-index column headers
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 合并后的多重索引列标题
- en: You can also provide other symbols or characters as separators, for example,
    an empty string `(‘’.join)`, a dot `(‘.’.join)`, or even a word`(‘per’.join)`.
    Note that the levels are combined from the topmost level (level 0) towards the
    innermost (level -1).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以提供其他符号或字符作为分隔符，例如空字符串 `(''.join)`、点 `('.'.join)`，甚至一个词 `('per'.join)`。注意，层次是从最上层（层次
    0）向最内层（层次 -1）组合的。
- en: '***Using list comprehension —***this is useful when you want to re-order the
    names during a merge.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***使用列表推导式——***当你想在合并过程中重新排序名称时，这种方法很有用。'
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The code above results in the same DataFrame as the previous section. This code
    says that for every column, and with `i` being the topmost level and `j` the one
    after that, return the two levels in that order (`i` then `j`) separated by an
    underscore.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码结果与上一节相同的数据框。该代码表示对于每一列，`i` 为最上层，`j` 为其下一个层次，按照这种顺序返回这两个层次（`i` 然后 `j`），并用下划线分隔。
- en: Now, say you want a different order for the names after merging. We’ll use the
    DataFrame below.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你希望在合并后对名称进行不同的排序。我们将使用下面的数据框。
- en: '![](../Images/1639343193fbb83e9d15d49d1ac04419.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1639343193fbb83e9d15d49d1ac04419.png)'
- en: Image by author
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: You can merge like `level1_level0_level2` using a list comprehension. Here,
    use three variable names to represent the levels `(i,j,k)`, then provide the desired
    format to return, like `(f’{j}_{i}_{k}’)`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用列表推导式合并像 `level1_level0_level2` 这样的名称。在这里，使用三个变量名来表示层次 `(i,j,k)`，然后提供所需的格式进行返回，例如
    `(f’{j}_{i}_{k}’)`。
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the code above, we used a space to separate the names.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用空格来分隔名称。
- en: '![](../Images/9705d7ed4a9373b101b550b52f7f259c.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9705d7ed4a9373b101b550b52f7f259c.png)'
- en: Merged column names by author
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 合并后的列名由作者提供
- en: '***2\. Drop some levels***'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '***2\. 删除一些层次***'
- en: Sometimes, the level is not useful.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这些层次结构并没有实际用处。
- en: '![](../Images/7edada3497acfb9e59ef0d4744ff7960.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7edada3497acfb9e59ef0d4744ff7960.png)'
- en: Image by author
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: To drop the first two levels of the pivot table above, use `df.columns.droplevel(level=position)`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除上述数据透视表的前两个层次，使用 `df.columns.droplevel(level=position)`。
- en: '[PRE14]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/f210d114ca7c730c2e58c431bc10ba16.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f210d114ca7c730c2e58c431bc10ba16.png)'
- en: DataFrame with dropped multi-index columns
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 丢弃多级索引列的 DataFrame
- en: '**Removing the ‘column-level’ names** — Once you remove or merge the levels,
    you can then use `df.reset_index()`.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**删除‘列级别’名称** — 一旦你移除或合并了级别，你可以使用 `df.reset_index()`。'
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/42c2d81f7f6491d107eeb63be1332e8a.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42c2d81f7f6491d107eeb63be1332e8a.png)'
- en: Image by author
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: But now, the original column names that were passed to the `columns` parameter
    are present in the reset DataFrame. See `‘year’` above, which appears at the wrong
    location as the name of the new index. Let us use `df.rename_axis()` to remove
    this name.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，原始列名（传递给 `columns` 参数的名称）仍然出现在重置的 DataFrame 中。请参见上面的 `‘year’`，它作为新索引的名称出现在错误的位置。我们可以使用
    `df.rename_axis()` 来移除这个名称。
- en: '[PRE16]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/2e470f2934316cc8a1c50b4be338559a.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e470f2934316cc8a1c50b4be338559a.png)'
- en: Image by author
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**‘Fill_value’ parameter (Default: fill_value = None)**'
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Fill_value’ 参数（默认值：fill_value = None）**'
- en: This is the value that replaces the missing values.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是替代缺失值的值。
- en: Missing values, or NaNs (Not a number), appear when there are no `index-columns`
    combinations for the `values` you are aggregating.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有 `index-columns` 组合用于你正在聚合的 `values` 时，会出现缺失值或 NaNs（Not a number）。
- en: '![](../Images/99b0055b657526e5ce791815aa8fcf27.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/99b0055b657526e5ce791815aa8fcf27.png)'
- en: Image by author
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: In the DataFrame above (left), the area code 1112 does not have an agent ‘b’,
    hence the NaN where the 1112 and ‘b’ combination value should be.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的 DataFrame（左侧），区号 1112 没有 `agent ‘b’`，因此在 1112 和 ‘b’ 的组合值的位置上出现 NaN。
- en: Here, we can use `fill_value=0` to replace the NaNs with 0.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以使用 `fill_value=0` 将 NaNs 替换为 0。
- en: '![](../Images/e8f282310773c2119502fc6a7149db15.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8f282310773c2119502fc6a7149db15.png)'
- en: Image by author
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: You can also use string values like in the code below where we pass an empty
    string to the `fill_value` parameter.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用字符串值，如下面的代码中，我们将一个空字符串传递给 `fill_value` 参数。
- en: '![](../Images/6e130e806bcf94c23898d522279c9bf9.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e130e806bcf94c23898d522279c9bf9.png)'
- en: Image by author
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**‘dropna’ parameter (Default: dropna = True)**'
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘dropna’ 参数（默认值：dropna = True）**'
- en: When `True`, this parameter drops rows or columns which contain only missing
    values.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当为 `True` 时，此参数丢弃仅包含缺失值的行或列。
- en: For example, using the DataFrame below, suppose we have a new `agent c` who
    hasn’t been assigned an area code yet, and a new `area code 1113` without a price
    and size.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用下面的 DataFrame，假设我们有一个新的 `agent c` 尚未分配区号，以及一个新的 `area code 1113` 没有价格和大小。
- en: '![](../Images/4070eff986069840fa1d0c5c2e7b14c3.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4070eff986069840fa1d0c5c2e7b14c3.png)'
- en: Image by author
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'If we want them to appear in the pivoted table without being present in the
    original table, we can follow the steps below:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望它们出现在透视表中，而不是原始表中存在的内容，我们可以按照以下步骤进行：
- en: Convert the `agent` and `area_code` features into [Categorical data types](https://pandas.pydata.org/docs/user_guide/categorical.html)
    and provide all the possible categories.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `agent` 和 `area_code` 特征转换为 [分类数据类型](https://pandas.pydata.org/docs/user_guide/categorical.html)
    并提供所有可能的类别。
- en: '[PRE17]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Pivot the data using `dropna=False` so that columns and rows containing only
    missing values are not dropped. You can also use `fill_value` here.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `dropna=False` 透视数据，以便不丢弃仅包含缺失值的列和行。你也可以在这里使用 `fill_value`。
- en: '[PRE18]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/81261af1227b89fec75f0341563c4d17.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/81261af1227b89fec75f0341563c4d17.png)'
- en: Image by author
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**‘Margins’ parameter (Default: margins = False)**'
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Margins’ 参数（默认值：margins = False）**'
- en: This displays an aggregated value for every row and column of the pivoted table.
    The margin parameter works when the results of the pivoted table are numeric values
    (values from `aggfunc` functions such as `sum`, `count`, `nunique` etc.), and
    the same `aggfunc` function is used to calculate the `margin` values.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了透视表中每一行和每一列的聚合值。margin 参数在透视表的结果为数值（来自 `aggfunc` 函数如 `sum`、`count`、`nunique`
    等）时有效，并且相同的 `aggfunc` 函数用于计算 `margin` 值。
- en: For example, in the pivot_table below, we group the data by `‘area_code’` and
    return the `sum` of the `‘price’`, further grouped by the `‘agent’`. We also want
    the `margins` values, and in this case, the `sum` of the row and column values
    is returned.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的 pivot_table 中，我们按 `‘area_code’` 分组数据，并返回 `‘price’` 的 `sum`，进一步按 `‘agent’`
    分组。我们还希望 `margins` 值，在这种情况下，返回的是行和列值的 `sum`。
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/559e6c6cbea82091d3bc1e0d640aec7c.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/559e6c6cbea82091d3bc1e0d640aec7c.png)'
- en: Image by author
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**‘Margins_name’ parameter (Default: margins_name=’All’)**'
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Margins_name’ 参数（默认值：margins_name=’All’）**'
- en: This renames the margin names and only works with `margins` set to True.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这会重命名边际名称，并且仅在`margins`设置为 True 时有效。
- en: In the code below, we change the margin names to `‘sum_total’`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将边际名称更改为`‘sum_total’`。
- en: '![](../Images/2cbc2fd8f30afc5bbfa28be97bac4bd2.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2cbc2fd8f30afc5bbfa28be97bac4bd2.png)'
- en: Image by author
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者提供
- en: '**‘Observed’ parameter (Default: observed = False)**'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Observed’ 参数（默认值：observed = False）**'
- en: When you have [Categorical](https://pandas.pydata.org/docs/reference/api/pandas.Categorical.html)
    data types as we did earlier, sometimes the pivot_table will display rows and
    columns containing only zero values. This happens even when `dropna=True`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有像之前那样的[分类](https://pandas.pydata.org/docs/reference/api/pandas.Categorical.html)数据类型时，有时透视表会显示只包含零值的行和列。这种情况即使在`dropna=True`时也会发生。
- en: '![](../Images/5a598864c08fcdf270ad28f96e111622.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a598864c08fcdf270ad28f96e111622.png)'
- en: Image by author
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者提供
- en: When you set `observed=True`, only ‘observed’ groupings are displayed. This
    saves memory and computational power when creating pivot tables from large datasets.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置`observed=True`时，只显示‘observed’分组。这在从大型数据集中创建透视表时节省了内存和计算能力。
- en: '![](../Images/e0ff6f97a183cc336251e04e6bddf697.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e0ff6f97a183cc336251e04e6bddf697.png)'
- en: Image by author
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者提供
- en: '**‘Sort’ parameter (default: sort = True)**'
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**‘Sort’ 参数（默认值：sort = True）**'
- en: This sorts the row and column indices.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这会对行和列索引进行排序。
- en: '[PRE20]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/59ff0b0a57e6d35a0b232b7ffebcfc13.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59ff0b0a57e6d35a0b232b7ffebcfc13.png)'
- en: Image by author
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者提供
- en: When `sort=False`, the resulting row indices appear in the original order, but
    the column headers remain sorted.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当`sort=False`时，结果行索引按原始顺序出现，但列标题保持排序状态。
- en: '[PRE21]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](../Images/0ff71bb6b66929588fa6143ccac99692.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ff71bb6b66929588fa6143ccac99692.png)'
- en: Image by author
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者提供
- en: Conclusion
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we looked at how to use the Pandas pivot table and its parameters.
    We also learned that `values` of all the unique combinations of the `index` and
    `columns` parameters are aggregated into one value using the `aggfunc` function.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探讨了如何使用 Pandas 透视表及其参数。我们还了解到，`index`和`columns`参数的所有唯一组合的`values`会通过`aggfunc`函数聚合成一个值。
- en: We then saw how hierarchical columns [(multi-index)](https://medium.com/towards-data-science/functions-that-generate-a-multiindex-in-pandas-and-how-to-remove-the-levels-7aa15ac7ca95)
    result from passing an `index` together with multiple `columns`, `values`, or
    `aggfunc` arguments. Later, we merged and dropped the multi-index levels.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着看了如何通过传递一个`index`和多个`columns`、`values`或`aggfunc`参数来生成分层列[(多级索引)](https://medium.com/towards-data-science/functions-that-generate-a-multiindex-in-pandas-and-how-to-remove-the-levels-7aa15ac7ca95)。后来，我们合并并删除了多级索引级别。
- en: A pivot table is important for summarizing a dataset. You can then use this
    summary to plot graphs, or format and style the table for a presentation.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 透视表对总结数据集很重要。你可以使用这个总结来绘制图表，或为演示格式化和美化表格。
- en: Find the notebook and files used in this article [here on GitHub](https://github.com/suemnjeri/medium-articles/blob/main/pivot_table_pandas/Pivot_table%20examples%20using%20Hotel%20Reservations%20Data.ipynb).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[GitHub上的这个位置](https://github.com/suemnjeri/medium-articles/blob/main/pivot_table_pandas/Pivot_table%20examples%20using%20Hotel%20Reservations%20Data.ipynb)找到本文使用的笔记本和文件。
- en: I hope you enjoyed the article. To receive more like these whenever I publish
    a new one, subscribe [here](https://suemnjeri.medium.com/subscribe/@suemnjeri).
    If you are not yet a medium member and would like to support me as a writer, follow
    [this link](https://medium.com/@suemnjeri/membership) and I will earn a small
    commission. Thank you for reading!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章。要在我发布新文章时接收更多类似内容，请[点击这里](https://suemnjeri.medium.com/subscribe/@suemnjeri)订阅。如果你还不是
    Medium 成员并希望支持我作为写作者，请访问[这个链接](https://medium.com/@suemnjeri/membership)，我将获得一小部分佣金。感谢阅读！
