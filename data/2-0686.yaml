- en: 'Decoding NumPy’s Dot Product: A Brief Exploration of Dimensional Wizardry'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解码 NumPy 的点积：对维度魔法的简要探索
- en: 原文：[https://towardsdatascience.com/decoding-numpys-dot-product-a-brief-exploration-of-dimensional-wizardry-63d80f21a315](https://towardsdatascience.com/decoding-numpys-dot-product-a-brief-exploration-of-dimensional-wizardry-63d80f21a315)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/decoding-numpys-dot-product-a-brief-exploration-of-dimensional-wizardry-63d80f21a315](https://towardsdatascience.com/decoding-numpys-dot-product-a-brief-exploration-of-dimensional-wizardry-63d80f21a315)
- en: Clarifying once and for all the confusion over NumPy’s dot product
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一劳永逸地澄清对 NumPy 点积的困惑
- en: '[](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)[![Mario
    Larcher](../Images/b5b443807fe06f096ed4fc5139b3cb42.png)](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)[](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)
    [Mario Larcher](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)[![Mario
    Larcher](../Images/b5b443807fe06f096ed4fc5139b3cb42.png)](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)[](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)
    [Mario Larcher](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)
    ·5 min read·Jul 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)
    ·5 分钟阅读·2023年7月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3a4c3b065c8db38640141fa8b5164cca.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a4c3b065c8db38640141fa8b5164cca.png)'
- en: Image generated with [DreamStudio](https://beta.dreamstudio.ai/generate) with
    the prompt “A chaotic, dark, gloomy, multidimensional world full of code wizards”.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片生成自 [DreamStudio](https://beta.dreamstudio.ai/generate)，提示词为“一片混乱、黑暗、阴沉、充满代码巫师的多维世界”。
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Am I the only one who periodically gets confused when dealing with dimensions
    in NumPy? Today, while reading a [Gradio’s documentation page](https://www.gradio.app/guides/quickstart#an-image-example),
    I came across the following code snippet:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我是唯一一个在处理 NumPy 中的维度时经常感到困惑的人吗？今天，在阅读 [Gradio 的文档页面](https://www.gradio.app/guides/quickstart#an-image-example)时，我遇到了以下代码片段：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Hey, hey, hey! Why does the dot product of an image (W, H, 3) with a filter
    (3, 3) is legal? I asked ChatGPT to explain it to me, but it started giving me
    wrong answers (like saying this doesn’t work) or ignoring my question and started
    answering something else instead. So, there was no other solution than using my
    brain (plus reading the documentation, sigh).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，嘿，嘿！为什么一个形状为 (W, H, 3) 的图像与一个形状为 (3, 3) 的滤镜的点积是合法的？我问了 ChatGPT，但它开始给我错误的答案（例如说这行不通）或忽略了我的问题，开始回答其他内容。因此，唯一的解决办法就是动脑筋（再加上阅读文档，唉）。
- en: If you are also a little confuse by the code above, continue reading.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对上面的代码也感到有些困惑，请继续阅读。
- en: 'Dot Product: A Generic Example'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点积：一个通用示例
- en: 'From the [NumPy dot product documentation](https://numpy.org/doc/stable/reference/generated/numpy.dot.html)
    (with minor modifications):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 [NumPy 点积文档](https://numpy.org/doc/stable/reference/generated/numpy.dot.html)（略有修改）：
- en: If a.shape = (I, J, C) and b.shape = (K, C, L), then dot(a, b)[i, j, k, l] =
    sum(a[i, j, :] * b[k, :, l]). Notice that the last dimension of “a” is equal to
    the second-to-last dimension of “b”.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 a.shape = (I, J, C) 且 b.shape = (K, C, L)，那么 dot(a, b)[i, j, k, l] = sum(a[i,
    j, :] * b[k, :, l])。请注意，“a”的最后一个维度等于“b”的倒数第二个维度。
- en: 'Or, in code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，以代码的形式：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Output (same result):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出（相同的结果）：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Understanding NumPy Dot Product Shape
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 NumPy 点积形状
- en: 'To determine the shape of a dot product beforehand, follow these steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要提前确定点积的形状，请按照以下步骤操作：
- en: '**Step 1**: Consider two arrays, “a” and “b,” with their respective shapes.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1**：考虑两个数组，“a”和“b”，以及它们各自的形状。'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, array “a” has a shape of (4, 3, 2), and array “b” has a shape
    of (3, 2, 5). Notice, once again, that the last dimension of “a” and the second-to-last
    dimension of “b” must match.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，数组“a”的形状是 (4, 3, 2)，而数组“b”的形状是 (3, 2, 5)。请注意，再次强调，“a”的最后一个维度和“b”的倒数第二个维度必须匹配。
- en: '**Step 2**: Take all the dimensions of “a” except the last and all the dimensions
    of “b” except the second-to-last.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2**：取“a”的所有维度，除了最后一个维度，和“b”的所有维度，除了倒数第二个维度。'
- en: For array “a,” we exclude the last dimension (which is 2), resulting in a shape
    of (4, 3). For array “b,” we exclude the second-to-last dimension (which is also
    2), resulting in a shape of (3, 5).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组 “a”，我们排除最后一个维度（即 2），结果的形状为 (4, 3)。对于数组 “b”，我们排除倒数第二个维度（也是 2），结果的形状为 (3,
    5)。
- en: '**Step 3**: Concatenate the shapes obtained in Step 2.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3**：连接步骤 2 中获得的形状。'
- en: 'By concatenating the shapes using our rule, we get (4, 3, 3, 5). Let’s verify
    if it is true:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用我们的规则连接形状，我们得到 (4, 3, 3, 5)。让我们验证一下这个结果是否正确：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, the resulting shape of the dot product matches our calculated
    shape (4, 3, 3, 5). Thus, our understanding of the dot product shape is correct!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，点积的结果形状与我们计算的形状 (4, 3, 3, 5) 一致。因此，我们对点积形状的理解是正确的！
- en: Clarifying the Dot Product with Sepia Filter for RGB Pixels
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 sepia 滤镜澄清 RGB 像素的点积
- en: Let’s return to the original example with an image (H, W, C) and a filter (O,
    C), in this case, (3, 3).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到原始的例子，使用一个图像 (H, W, C) 和一个滤波器 (O, C)，在这个例子中是 (3, 3)。
- en: Remember that, in the original example, the dot product is with sepia_filter.T,
    that have shape (C, O). In this case C = O = 3 but if they were different this
    would be important.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在原始示例中，点积是与 sepia_filter.T 进行的，后者的形状是 (C, O)。在这种情况下，C = O = 3，但如果它们不同，这将是重要的。
- en: I have to take all the dimensions except the last from the image dimension,
    in this case, H and W, and all the dimensions except the second to last from the
    filter dimension, in this case, O. So the resulting dimension is (H, W, O) or,
    in our case (H, W, 3), still “RGB-like”.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要从图像的维度中取出所有维度，除了最后一个，这里是 H 和 W，从滤波器的维度中取出所有维度，除了倒数第二个，这里是 O。因此，结果的维度是 (H,
    W, O)，在我们的例子中是 (H, W, 3)，仍然是“类似 RGB”的。
- en: 'Using the NumPy documentation notation:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy 文档的表示法：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that this is the same as (removing the transposition from sepia_filter):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与（移除 sepia_filter 的转置）是一样的：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: But intuitively, how is every RGB pixel in the new image computed? Basically,
    every channel value of every new pixel (imagine R, “red”, at position 4, 2) is
    a linear combination of the old RGB values of the pixel at the same position,
    where the weight of this linear combination is the value in the corresponding
    row in sepia_filter (row index 0 for R, 1 for G, and 2 for B).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但直观地说，如何计算新图像中的每个 RGB 像素？基本上，每个新像素的每个通道值（假设位置为 4, 2 的 R，即“红色”）是旧 RGB 像素值的线性组合，其中这一线性组合的权重是
    sepia_filter 中相应行的值（R 的行索引为 0，G 为 1，B 为 2）。
- en: '**Bonus**: You can also use [einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html)
    for this! (more confusion haha, I know, NumPy is hard):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加信息**：你还可以使用 [einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html)
    来实现这一点！（更多的困惑哈哈，我知道，NumPy 确实很复杂）：'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![](../Images/7560752a9c5a0f8058c0160cd599ff12.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7560752a9c5a0f8058c0160cd599ff12.png)'
- en: My profile picture “sepia-toned”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我的头像“怀旧色调”
- en: Try it and try to understand how it works as an exercise.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下，并试图理解它是如何工作的作为练习。
- en: Conclusion
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations! You’ve successfully delved into the world of NumPy’s dot product
    and unraveled its mysteries. By following a simple rule of shape concatenation,
    you can now easily determine the resulting shape of the dot product for any pair
    of arrays.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你已经成功地深入了解了 NumPy 的点积运算，并揭示了它的奥秘。通过遵循形状连接的简单规则，你现在可以轻松确定任何一对数组的点积结果形状。
- en: Understanding how dimensions interact empowers you to use the dot product effectively
    in various image manipulations. For instance, we explored the transformation of
    an image with the sepia filter, creating beautiful effects through linear combinations
    of RGB values.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 理解维度如何相互作用，使你能够在各种图像操作中有效地使用点积。例如，我们探索了使用 sepia 滤镜对图像进行变换，通过 RGB 值的线性组合创造了美丽的效果。
- en: Now armed with this knowledge, you can confidently explore the vast possibilities
    of NumPy’s dot product in your numerical computations and image processing tasks.
    So, dive in fearlessly, experiment, and let the dot product work its magic!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在掌握了这些知识，你可以自信地探索 NumPy 点积在数值计算和图像处理任务中的广泛应用。因此，勇敢地深入探索，进行实验，让点积发挥它的魔力吧！
- en: Thank you for taking the time to read this article, and please feel free to
    leave a comment or connect with me to share your thoughts or ask any questions.
    To stay updated on my latest articles, you can follow me on [Medium](https://medium.com/@mnslarcher),
    [LinkedIn](https://www.linkedin.com/in/mnslarcher/) or [Twitter](https://twitter.com/mnslarcher).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你花时间阅读这篇文章，欢迎随时留言或联系我，分享你的想法或提问。要获取我最新文章的更新，你可以关注我在[Medium](https://medium.com/@mnslarcher)、[LinkedIn](https://www.linkedin.com/in/mnslarcher/)
    或 [Twitter](https://twitter.com/mnslarcher)上的动态。
- en: '[](https://medium.com/@mnslarcher/membership?source=post_page-----63d80f21a315--------------------------------)
    [## Join Medium with my referral link - Mario Namtao Shianti Larcher'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mnslarcher/membership?source=post_page-----63d80f21a315--------------------------------)
    [## 使用我的推荐链接加入Medium - Mario Namtao Shianti Larcher'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium会员，你的部分会员费用将分配给你阅读的作者，你还可以全面访问每一个故事……
- en: medium.com](https://medium.com/@mnslarcher/membership?source=post_page-----63d80f21a315--------------------------------)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@mnslarcher/membership?source=post_page-----63d80f21a315--------------------------------)
