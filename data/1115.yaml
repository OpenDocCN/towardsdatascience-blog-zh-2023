- en: Sliding Windows in Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas中的滑动窗口
- en: 原文：[https://towardsdatascience.com/sliding-windows-in-pandas-40b79edefa34?source=collection_archive---------1-----------------------#2023-03-29](https://towardsdatascience.com/sliding-windows-in-pandas-40b79edefa34?source=collection_archive---------1-----------------------#2023-03-29)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/sliding-windows-in-pandas-40b79edefa34?source=collection_archive---------1-----------------------#2023-03-29](https://towardsdatascience.com/sliding-windows-in-pandas-40b79edefa34?source=collection_archive---------1-----------------------#2023-03-29)
- en: Identify Patterns in Time-Series Data with Overlapping Window Techniques
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用重叠窗口技术识别时间序列数据中的模式
- en: '[](https://avrilaysha.medium.com/?source=post_page-----40b79edefa34--------------------------------)[![Avril
    Aysha](../Images/a3be4bcc007664fb10885df00d111732.png)](https://avrilaysha.medium.com/?source=post_page-----40b79edefa34--------------------------------)[](https://towardsdatascience.com/?source=post_page-----40b79edefa34--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----40b79edefa34--------------------------------)
    [Avril Aysha](https://avrilaysha.medium.com/?source=post_page-----40b79edefa34--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://avrilaysha.medium.com/?source=post_page-----40b79edefa34--------------------------------)[![Avril
    Aysha](../Images/a3be4bcc007664fb10885df00d111732.png)](https://avrilaysha.medium.com/?source=post_page-----40b79edefa34--------------------------------)[](https://towardsdatascience.com/?source=post_page-----40b79edefa34--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----40b79edefa34--------------------------------)
    [Avril Aysha](https://avrilaysha.medium.com/?source=post_page-----40b79edefa34--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb016782a8709&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsliding-windows-in-pandas-40b79edefa34&user=Avril+Aysha&userId=b016782a8709&source=post_page-b016782a8709----40b79edefa34---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----40b79edefa34--------------------------------)
    ·10 min read·Mar 29, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F40b79edefa34&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsliding-windows-in-pandas-40b79edefa34&user=Avril+Aysha&userId=b016782a8709&source=-----40b79edefa34---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb016782a8709&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsliding-windows-in-pandas-40b79edefa34&user=Avril+Aysha&userId=b016782a8709&source=post_page-b016782a8709----40b79edefa34---------------------post_header-----------)
    发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----40b79edefa34--------------------------------)
    · 10 分钟阅读 · 2023年3月29日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F40b79edefa34&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsliding-windows-in-pandas-40b79edefa34&user=Avril+Aysha&userId=b016782a8709&source=-----40b79edefa34---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F40b79edefa34&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsliding-windows-in-pandas-40b79edefa34&source=-----40b79edefa34---------------------bookmark_footer-----------)![](../Images/a1d1cf6d0a5270fa1d5be035f895a29c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F40b79edefa34&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fsliding-windows-in-pandas-40b79edefa34&source=-----40b79edefa34---------------------bookmark_footer-----------)![](../Images/a1d1cf6d0a5270fa1d5be035f895a29c.png)'
- en: Photo by [Eugene Chystiakov](https://unsplash.com/it/@eugenechystiakov?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/B-h3so_5UKA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [尤金·赫斯季亚科夫](https://unsplash.com/it/@eugenechystiakov?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来自 [Unsplash](https://unsplash.com/photos/B-h3so_5UKA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Windowing techniques enable data analysts to identify valuable patterns in time-series
    data. Sliding windows are particularly powerful because they allow you to spot
    patterns earlier than other techniques. This is an important feature in situations
    when making a key decision a few minutes (or seconds) earlier can save you money.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口技术使数据分析师能够识别时间序列数据中的有价值模式。滑动窗口特别强大，因为它们允许你比其他技术更早地发现模式。在做出关键决策的几分钟（或几秒钟）早一点可能会为你节省资金，这是一项重要的功能。
- en: 'This article will show you 3 ways to perform windowing in `pandas` and will
    discuss the tradeoffs and benefits of each approach. By the end, you’ll be able
    to create a sliding window visualisation that looks something like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将展示在`pandas`中执行窗口操作的三种方法，并讨论每种方法的权衡和好处。到最后，你将能够创建一个类似于下面这样的滑动窗口可视化：
- en: '![](../Images/6b2a4896b580e0058fd59a8176824fa3.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b2a4896b580e0058fd59a8176824fa3.png)'
- en: image by author
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Imagine you’re an Uber or Lyft driver. You’re driving around New York waiting
    for your next ride…and burning expensive gas in the meantime. Not cool. You need
    to find a way to maximise your chance of getting a new ride quickly. How could
    you do this?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你是Uber或Lyft的司机。你在纽约驾驶，等待下一个乘客……同时还在烧着昂贵的汽油。这不太好。你需要找到一种方法来最大化迅速获得新乘客的机会。你该怎么做？
- en: You could take an experience-driven approach and test out different strategies
    over a period of time to find out which parts of New York have high demand. You
    try starting in one neighbourhood the first day, another the second, and so on…
    But New York City is BIG and this way it’s going to take you a *loooong* time
    before you can start to identify patterns with any degree of confidence.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以采取经验驱动的方法，经过一段时间测试不同策略来找出纽约的高需求区域。你可以尝试第一天从一个社区开始，第二天从另一个社区开始，依此类推……但纽约市很大，这样做需要花费*很长*时间才能开始以任何程度的信心识别出模式。
- en: It would be much more efficient to take **a data-driven approach**. Which is
    exactly what we’ll be doing in this article.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 采用**数据驱动的方法**会更有效。这正是我们在本文中要做的。
- en: Let’s get to it 🚀
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧 🚀
- en: The Dataset
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集
- en: We’ll be working with 1 hour of rideshare (Uber/Lyft) data from the New York
    City Taxi and Limousine Commission (TLC) Trip Record* dataset, which is subsampled
    from the dataset for January 2022\. You can [download the complete Parquet file](https://d37ci6vzurychx.cloudfront.net/trip-data/fhvhv_tripdata_2022-01.parquet)
    for January 2022\. This contains data for more than 14.5 million rides (!) To
    replicate the dataset I’m using in this article, subsample to the first 100K rows.
    You can also [access the data and notebook directly](https://github.com/rrpelgrim/sliding-windows-pandas)
    from a dedicated Github repo.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自纽约市出租车和豪华车委员会（TLC）旅行记录*数据集的1小时拼车（Uber/Lyft）数据，该数据集从2022年1月的完整数据集中子样本提取。你可以[下载完整的Parquet文件](https://d37ci6vzurychx.cloudfront.net/trip-data/fhvhv_tripdata_2022-01.parquet)（2022年1月）。这包含了超过1450万次的乘车数据！（）要复制本文使用的数据集，请将数据子样本提取到前100K行。你也可以[直接访问数据和笔记本](https://github.com/rrpelgrim/sliding-windows-pandas)的专用Github仓库。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Remember: our objective is to **identify zones with peaks in demand, defined
    as number of requests per unit of time.**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：我们的目标是**识别需求峰值区域，定义为每单位时间的请求数量。**
- en: '1\. Quick-n-Dirty: a GroupBy over the Entire Dataset'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 快速粗略：对整个数据集进行GroupBy
- en: '![](../Images/1174363574132195f1f9ac852f304885.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1174363574132195f1f9ac852f304885.png)'
- en: image by author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We’ll start by doing a very rough pass to identify high-demand zones over the
    entire 1-hour dataset.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始对整个1小时数据集进行非常粗略的处理，以识别高需求区域。
- en: After using a `time_mask` to subset the data for a specific hour and sorting
    the values by the `request_datetime` column, this is essentially just a groupby
    operation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`time_mask`将数据子集提取到特定小时，并按`request_datetime`列排序值之后，这基本上就是一个groupby操作。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We now have a list of the number of requests per pickup location. Let’s clean
    up the column names and sort the values to get a meaningful output.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有每个取车地点的请求数量列表。让我们清理列名并排序值以获取有意义的输出。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/98a688ed6632f2d6d12e8fecf61674a9.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98a688ed6632f2d6d12e8fecf61674a9.png)'
- en: data output generated by author from [this notebook]
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 作者从[这个笔记本]生成的数据输出
- en: Sweet. We can now identify the top-10 pick-up zones with highest demand during
    the hour for which we have data. We could run this code in batch once a hour.
    This is great…but only sort of.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了。我们现在可以识别出数据中需求最高的前10个取车区域。我们可以每小时批量运行一次这个代码。这很棒……但仅仅是这样。
- en: Processing the data in 1-hour batches means that drivers will only receive the
    signal for a high-demand area *at the end of the hour.* What if the peak was actually
    happening during the first 15 or even 5 minutes of that hour? Then there would
    be absolutely no use in rushing to that part of town only to realise that the
    peak demand was long over.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以每小时为批次处理数据意味着司机只能在*每小时结束时*收到高需求区域的信号。如果高峰实际上发生在那个小时的前15分钟甚至5分钟内呢？那么，急匆匆地赶到那个城区只会发现高峰需求早已过去，毫无用处。
- en: 2\. Tumbling Windows in Pandas
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. Pandas中的滑动窗口
- en: '![](../Images/3ff46ba016b001212ea1a49c580ed6f8.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3ff46ba016b001212ea1a49c580ed6f8.png)'
- en: image by author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: The drivers aren’t happy. We need to do better. Let’s build some code that can
    chop up our hour of data into [tumbling windows](https://pathway.com/glossary/tumbling-window)
    of 15 minutes each. This way we will get some more granularity and be able to
    give the drivers more helpful instructions on when to be in which part of town.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 司机们不满意。我们需要做得更好。让我们编写一些代码，将我们的一小时数据分割成[tumbling windows](https://pathway.com/glossary/tumbling-window)
    每15分钟一个窗口。这样我们将获得更多的细节，并能给司机提供更有帮助的指示，告诉他们何时到达城市的哪个部分。
- en: We can use the pandas `pivot_table()` and `.resample()` methods to do this.
    We’ll need the index of our DataFrame to be set to a datetime column. Since we’re
    interested in the number of requests, we’ll use the `request_datetime` column.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用pandas的`pivot_table()`和`.resample()`方法来完成这个任务。我们需要将数据框的索引设置为一个datetime列。由于我们对请求数量感兴趣，我们将使用`request_datetime`列。
- en: Note that the dataset is not sorted correctly by incoming requests and includes
    some trips that were requested before midnight on the year before. So let’s clean
    those up first.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，数据集按请求的顺序未正确排序，并且包括一些在前一年午夜之前请求的行程。因此，让我们先清理这些数据。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our DataFrame now looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据框现在看起来像这样：
- en: '![](../Images/68e0cc65d98c57006727bc7ec50dffbd.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/68e0cc65d98c57006727bc7ec50dffbd.png)'
- en: data output generated by author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: Remember that we are looking to group our dataset into 15-minute windows with
    the number of requests per pickup zone for each window. This means we want our
    output to have 4 rows (15 x 4 = 60 minutes) and a column for each PULocationID.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们希望将数据集分组到15分钟的窗口中，每个窗口对应一个接送区的请求数量。这意味着我们希望输出具有4行（15 x 4 = 60分钟）和每个PULocationID的列。
- en: 'We need a pivot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个透视表：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/27444de101ba31efca250adc0b75f012.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27444de101ba31efca250adc0b75f012.png)'
- en: data output generated by author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: This is a sparse DataFrame with simply a count (1) for each row (request) in
    the column corresponding to that requests’ pickup zone.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个稀疏的数据框，对于每一行（请求），在对应于该请求的接送区的列中仅有一个计数（1）。
- en: 'Let’s resample our DataFrame with `.sum()`to group this data into 15-minute
    windows and sum up the counts for each PULocationID:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`.sum()`对我们的数据框进行重采样，将数据分组到15分钟的窗口中，并对每个PULocationID的计数进行求和：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/2ce7b5a0dbba7ee184ed752152df987d.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ce7b5a0dbba7ee184ed752152df987d.png)'
- en: data output generated by author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: Nice! We now have the number of requests per pickup zone for each 15-minute
    window. All that’s left is to define exactly what we mean with “high-demand” —
    let’s say 40 requests per 15-minute window — and then we can use this DataFrame
    to filter out the windows and pickup zones that exceed that high-demand threshold.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们现在有了每个15分钟窗口每个接送区的请求数量。剩下的就是准确地定义“高需求”的标准——假设为每15分钟窗口40个请求——然后我们可以使用这个数据框来筛选出超过高需求阈值的窗口和接送区。
- en: 'We can also inspect the data visually to identify the peak-demand zones:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过可视化数据来识别高峰需求区域：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/4a9089534061e1526e24b601f7be5cf4.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a9089534061e1526e24b601f7be5cf4.png)'
- en: plot generated by author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的图表
- en: This is great…but still only sort of. We’re still missing out on lots of granularity
    here. We need to wait for each 15-min window to finish before we can aggregate
    the data. What if the spike happens in the 15-minute window between minute 1 and
    minute 16 (rather than minute 0 and minute 15)? We will have missed the spike
    by just a minute but will need to wait 14 minutes before receiving the signal.
    By that time it may be too late to instruct drivers to that pickup zone.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好……但仍然只是有点好。我们仍然缺少很多细节。我们需要等待每个15分钟窗口完成后才能聚合数据。如果峰值发生在第1分钟到第16分钟之间的15分钟窗口（而不是第0分钟到第15分钟之间），我们将错过峰值一分钟，但需要等到14分钟后才能收到信号。到那时，可能已经太晚了，无法指示司机前往那个接送区。
- en: Do not fear, perfection is near!
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不要害怕，完美就在眼前！
- en: 3\. Sliding Windows in Pandas
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. Pandas 中的滑动窗口
- en: '![](../Images/d4a6f7ffa180c3168146983ddcdda1a1.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4a6f7ffa180c3168146983ddcdda1a1.png)'
- en: image by author
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Ideally, we want a signal every minute that tells us which zones are experiencing
    peak demand. We also want to reduce the size of our windows to enable our drivers
    to react to the incoming data faster. So let’s work with 5-minute windows and
    define “peak demand” as **more than 50 requests per 5-minute window**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望每分钟都有一个信号，告诉我们哪些区域正在经历高峰需求。我们还希望减少窗口的大小，以使我们的驱动程序能够更快地对 incoming 数据做出反应。因此，让我们使用5分钟的窗口，并将“高峰需求”定义为**每5分钟窗口内超过50个请求**。
- en: 'We can accomplish this using the pandas `.rolling()` method to create **sliding
    windows**: 5-minute windows with a 4-minute overlap, so that we can track the
    rate of incoming requests every minute.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 pandas 的`.rolling()`方法来创建**滑动窗口**：5分钟的窗口，重叠4分钟，以便我们可以每分钟跟踪 incoming 请求的速率。
- en: 'You can create sliding windows in pandas using the `.resample()` and `.rolling()`
    methods. Make sure to `.resample()` to **the size of your desired signal interval**
    instead of the size of your window:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`.resample()`和`.rolling()`方法在 pandas 中创建滑动窗口。确保`.resample()`到**你所需信号间隔的大小**，而不是窗口的大小：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s pick it apart step by step.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步拆解。
- en: We want our output to be a series of rows in which each row is a 5-minute window
    and the columns contain the sum of requests per pickup zone for that 5-minute
    window. However, instead of starting the second row at the end of the first 5-minute
    window, we want it to start at the end of the first minute of that first 5-minute
    window.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望输出是一系列行，每行是一个5分钟窗口，列中包含该5分钟窗口内每个取件区域的请求总数。然而，我们希望第二行不是从第一个5分钟窗口结束时开始，而是从第一个5分钟窗口的第一分钟结束时开始。
- en: 'Still with me here? If not, maybe this diagram below will help:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还跟得上吗？如果不行，也许下面的图示会有帮助：
- en: '![](../Images/62ce4e0e63841c17874e49ac2fbd3250.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62ce4e0e63841c17874e49ac2fbd3250.png)'
- en: image by author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: What we really want is 56 rows of 5-minutes each, with a 4-minute overlap between
    each row. This will give us a signal every minute which zones (if any) are getting
    more than 50 requests per 5 minutes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想要的是56行每行5分钟，每行之间有4分钟的重叠。这将为我们提供每分钟的信号，告知哪些区域（如果有的话）每5分钟内请求超过50个。
- en: 'To do this, we’ll have to resample our DataFrame first in order to get a single
    row for every minute:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们需要首先重采样我们的 DataFrame，以便每分钟获取一行数据：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/96e8822e16bdc6daacbe56c710267db3.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96e8822e16bdc6daacbe56c710267db3.png)'
- en: data output generated by author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: '*(If you wanted to get a signal say every second, you would resample to* `*1s*`
    *here.)*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*(如果你想每秒钟获取一个信号，你可以在这里将采样频率调整为`*1s*`。)*'
- en: 'Now that every row represents a single minute we can use `rolling()` and `sum()`
    to get the sum of the number of requests for every 5 rows (minutes):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每一行代表一分钟，我们可以使用`rolling()`和`sum()`来获得每5行（分钟）的请求总数：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/a14579fddc40d0e9f1206de9e94ea64b.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a14579fddc40d0e9f1206de9e94ea64b.png)'
- en: data output generated by author
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: 😱 Yikes, that’s a lot of NaNs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 😱 哎呀，这么多NaNs。
- en: But that’s only because `.rolling()` by default places the output of the window
    operation (in this case the sum) at the right edge of the window. This is technically
    correct since we will only get the first signal at the end of minute 4, when the
    first window has been completed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是因为`.rolling()`默认将窗口操作（在此例中为总和）的输出放在窗口的右边缘。这在技术上是正确的，因为我们只能在第4分钟末获得第一个信号，当第一个窗口已完成时。
- en: 'We can drop the first 4 columns if we want to get rid of the first 4 empty
    rows (minutes):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想去掉前4列，可以丢弃前4行空数据（分钟）：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/4ee16f3f4aa9494c0d38517f41fb8e3f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ee16f3f4aa9494c0d38517f41fb8e3f.png)'
- en: data output generated by author
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: 'Side note: Forward-Looking Windows'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附注：前瞻性窗口
- en: In some cases, you might want to move the values to the left edge to make it
    more easily readable. If you do so, be careful not to make the mistake of thinking
    that you will actually have data for window 1 at minute 1 (!) — you’re really
    just shifting the results over to the first row.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能希望将值移动到左边缘，以使其更易读。如果你这样做，请小心不要犯错，误认为第1分钟时窗口1中实际上会有数据 (!) — 你实际上只是将结果移动到了第一行。
- en: 'You can use the `FixedForwardWindowIndexer` object to place the window output
    on the left edge and create forward-looking windows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`FixedForwardWindowIndexer`对象将窗口输出放在左边缘并创建前瞻性窗口：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/b0fe34bea858226f190b4f4a9f96e445.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0fe34bea858226f190b4f4a9f96e445.png)'
- en: data output generated by author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: The last 4 columns of our DataFrame are now empty (because there is no full
    5-minute window available after minute 55) and we can drop them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框的最后4列现在为空（因为在第55分钟之后没有完整的5分钟窗口），我们可以删除这些列。
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/f2d7ee6641a4e6e1791c84fb532f4e40.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2d7ee6641a4e6e1791c84fb532f4e40.png)'
- en: data output generated by author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的数据输出
- en: This way of using the `.rolling()`method is not very well-known and is a little
    [buried in the docs](https://pandas.pydata.org/docs/user_guide/window.html#custom-window-rolling)
    but once you understand how it works it’s pretty easy to use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.rolling()` 方法的这种方式并不广为人知，且在[文档中稍微有些埋没](https://pandas.pydata.org/docs/user_guide/window.html#custom-window-rolling)，但一旦你理解了它的工作原理，使用起来还是相当简单的。
- en: Visualise Sliding Windows in Pandas
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Pandas 中可视化滑动窗口
- en: 'Let’s visualise our data to identify some patterns and spot the pickup zones
    with the highest peaks in demand. We’ll work with `windows` to make it extra clear
    that we don’t have any data for the first 5 minutes:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化数据，以识别一些模式，并找到需求峰值最高的接送区域。我们将使用 `windows` 来明确显示前5分钟的数据缺失：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/c58d83243423d5bdafc9c1baba33bc73.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c58d83243423d5bdafc9c1baba33bc73.png)'
- en: plot generated by author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的图表
- en: 'This is a very rough visualisation but even here we can already clearly see
    that:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常粗略的可视化，但即便如此，我们也可以清晰地看到：
- en: We don’t have any data the first 5 minutes
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前5分钟的数据缺失
- en: There are clear peaks in the rate of pickup requests in specific zones.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在特定区域内，接送请求的频率存在明显的峰值。
- en: From here, we can now define a cutoff/threshold and identify zones with above-threshold
    requests in specific windows. We can then motivate drivers to go to that zone.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以定义一个截断值/阈值，并识别在特定窗口中请求超过阈值的区域。然后我们可以鼓励司机去这些区域。
- en: 'One way to clarify the plot is to remove any columns with values below the
    threshold. Let’s say we want to identify zones with more than 50 requests per
    5-minute window:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 澄清图表的一种方法是删除所有值低于阈值的列。假设我们想要识别每5分钟窗口内请求超过50的区域：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/a986c6f7d4b27680048e9f17eab4a725.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a986c6f7d4b27680048e9f17eab4a725.png)'
- en: plot generated by author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作者生成的图表
- en: There’s much more we could do here. Play around with the code in [the notebook](https://github.com/rrpelgrim/sliding-windows-pandas/blob/main/pandas-sliding-windows-nyc-uber-lyft.ipynb)
    to perfect this further.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有很多可以做的事情。可以在 [这个笔记本](https://github.com/rrpelgrim/sliding-windows-pandas/blob/main/pandas-sliding-windows-nyc-uber-lyft.ipynb)
    中玩玩代码，进一步完善它。
- en: 'Sliding Windows in Pandas: Conclusion'
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas 中的滑动窗口：结论
- en: This article has introduced you to the powerful capabilities of performing sliding
    windows on time-series data. By chopping up your dataset into small, overlapping
    windows you are now able to get valuable data signals *at an actionable rate*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了在时间序列数据上执行滑动窗口的强大功能。通过将数据集切割成小的、重叠的窗口，你现在可以以*可操作的速率*获得有价值的数据信号。
- en: Of course, ideally you would be doing all of this in real-time. Watch this space
    for more on that soon, but in the meantime you might want to check out [this real-time
    monitoring tutorial](https://www.dataengineeringweekly.com/p/unlocking-data-stream-processing).
    Be prepared for a slight context change from New York traffic to website traffic
    instead ;)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，理想情况下，你会实时完成所有这些操作。敬请关注有关实时处理的更多内容，但与此同时，你可能想查看一下 [这个实时监控教程](https://www.dataengineeringweekly.com/p/unlocking-data-stream-processing)。做好准备，从纽约交通转到网站流量的背景变化
    ;)
- en: I hope you found this post helpful and engaging. [Follow me on LinkedIn](https://www.linkedin.com/in/avrilaysha/)
    to catch my latest content.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这篇文章有帮助且有趣。 [关注我的 LinkedIn](https://www.linkedin.com/in/avrilaysha/) 以获取我的最新内容。
- en: Happy data crunching! 👋
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理愉快！👋
- en: '**New York City Taxi and Limousine Commission (TLC) Trip Record Data was accessed
    on March 15, 2023 from* [*https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page*](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page)*.
    License:* [*https://www.nyc.gov/home/terms-of-use.page*](https://www.nyc.gov/home/terms-of-use.page)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**纽约市出租车和豪华轿车委员会（TLC）行程记录数据于2023年3月15日访问，来源于* [*https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page*](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page)*。许可证：*
    [*https://www.nyc.gov/home/terms-of-use.page*](https://www.nyc.gov/home/terms-of-use.page)'
