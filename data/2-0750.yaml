- en: Do Discretized Qubits Work In Practice?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离散化的量子比特在实际中有效吗？
- en: 原文：[https://towardsdatascience.com/do-discretized-qubits-work-in-practice-60acf19fc68c](https://towardsdatascience.com/do-discretized-qubits-work-in-practice-60acf19fc68c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/do-discretized-qubits-work-in-practice-60acf19fc68c](https://towardsdatascience.com/do-discretized-qubits-work-in-practice-60acf19fc68c)
- en: What if a qubit is more than just 0 or 1?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果量子比特不仅仅是0或1会怎么样？
- en: '[](https://pyqml.medium.com/?source=post_page-----60acf19fc68c--------------------------------)[![Frank
    Zickert | Quantum Machine Learning](../Images/ae361c0d68d13dac21bb86c7496d2917.png)](https://pyqml.medium.com/?source=post_page-----60acf19fc68c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----60acf19fc68c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----60acf19fc68c--------------------------------)
    [Frank Zickert | Quantum Machine Learning](https://pyqml.medium.com/?source=post_page-----60acf19fc68c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pyqml.medium.com/?source=post_page-----60acf19fc68c--------------------------------)[![Frank
    Zickert | 量子机器学习](../Images/ae361c0d68d13dac21bb86c7496d2917.png)](https://pyqml.medium.com/?source=post_page-----60acf19fc68c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----60acf19fc68c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----60acf19fc68c--------------------------------)
    [Frank Zickert | 量子机器学习](https://pyqml.medium.com/?source=post_page-----60acf19fc68c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----60acf19fc68c--------------------------------)
    ·9 min read·Jan 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----60acf19fc68c--------------------------------)
    ·阅读时间9分钟·2023年1月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Do you want to get started with Quantum Machine Learning? Have a look at [**Hands-On
    Quantum Machine Learning With Python**](https://www.pyqml.com/volume1?provider=medium&origin=discretizedqubit)**.**
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 想开始学习量子机器学习吗？请查看 [**Hands-On Quantum Machine Learning With Python**](https://www.pyqml.com/volume1?provider=medium&origin=discretizedqubit)**.**
- en: Machine learning models have become increasingly complex and, therefore, hard
    to train. Take ChatGPT, for instance. On a single GPU, its training would have
    taken 355 years.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习模型变得越来越复杂，因此训练也越来越困难。以ChatGPT为例。在单个GPU上训练它将需要355年。
- en: Quantum computing is a promising technology that could accelerate the training
    of such models. Yet, it comes with its own set of challenges.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算是一项有前景的技术，可能加速这种模型的训练。然而，它也带来了自身的一系列挑战。
- en: Quantum bits (qubits) are the basic unit we use inside a quantum computer. Unlike
    classical bits, which are either 0 or 1, quantum bits are in a complex linear
    relationship between their two basis states |0⟩ and |1⟩, called superposition.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 量子比特（qubits）是我们在量子计算机中使用的基本单元。与经典比特只能是0或1不同，量子比特处于它们的两个基态|0⟩和|1⟩之间的复杂线性关系中，这种状态称为叠加态。
- en: '![](../Images/d4ac85b337301a61c12c7e25e0d8faca.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4ac85b337301a61c12c7e25e0d8faca.png)'
- en: Image by author
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: This makes them extremely powerful. First, this relationship is not discrete
    but continuous, meaning the qubit can assume any value between the two basis states.
    Second, the relationship builds upon complex numbers — these are two-dimensional
    constructs — which exceed the capabilities of the one-dimensional numbers we’re
    used to working with.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得它们极为强大。首先，这种关系不是离散的，而是连续的，这意味着量子比特可以取两个基态之间的任何值。其次，这种关系建立在复数之上——这些是二维结构——超出了我们习惯使用的一维数字的能力。
- en: But there’s a problem. There always is — unfortunately.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但问题来了。不幸的是，总是会有问题。
- en: Once we measure a qubit, it collapses to either of its basis states. Inevitably,
    all we see is 0 or 1.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们测量一个量子比特，它会坍缩到它的基态之一。不可避免地，我们看到的只有0或1。
- en: Moreover, we only have very few qubits. And the qubits we have are prone to
    errors. We say they are noisy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们只有非常少量的量子比特。而且，我们拥有的量子比特容易出错。我们称它们为有噪声的。
- en: Obviously, we — the algorithm developers — can’t increase the number of available
    qubits. This challenge remains with the hardware manufacturers such as IBM. But,
    we can use the few qubits we have as efficiently as possible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们——算法开发者——无法增加可用的量子比特数量。这一挑战仍然留给了像IBM这样的硬件制造商。然而，我们可以尽可能高效地利用我们现有的少量量子比特。
- en: To this end, I [have proposed discretizing the expectation value](https://medium.com/towards-data-science/how-to-get-the-most-out-of-your-quantum-bit-56d4dc535aa6)
    and thus encoding more than two values by a qubit.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我[提出了离散化期望值的方法](https://medium.com/towards-data-science/how-to-get-the-most-out-of-your-quantum-bit-56d4dc535aa6)，从而通过一个量子比特编码多个值。
- en: '[](/how-to-get-the-most-out-of-your-quantum-bit-56d4dc535aa6?source=post_page-----60acf19fc68c--------------------------------)
    [## How To Get The Most Out Of Your Quantum Bit'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-get-the-most-out-of-your-quantum-bit-56d4dc535aa6?source=post_page-----60acf19fc68c--------------------------------)
    [## 如何最大限度地利用你的量子位'
- en: There’s more in a qubit than 0 and 1
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 量子位中不仅仅是0和1
- en: towardsdatascience.com](/how-to-get-the-most-out-of-your-quantum-bit-56d4dc535aa6?source=post_page-----60acf19fc68c--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-get-the-most-out-of-your-quantum-bit-56d4dc535aa6?source=post_page-----60acf19fc68c--------------------------------)
- en: The expectation value results from the repeated execution of a circuit and measuring
    the qubit. So, for instance, if a qubit is 1 in only three out of ten executions,
    its expectation value is `0.3`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 期望值源于对电路的重复执行和量子位的测量。因此，例如，如果一个量子位在十次执行中只有三次是1，它的期望值是`0.3`。
- en: The following function takes the `counts` object that results from running a
    quantum circuit in Qiskit — IBM’s quantum development kit. The `blocks` parameter
    denotes the number of discrete values we want to use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数接受在Qiskit中运行量子电路得到的`counts`对象——IBM的量子开发工具包。`blocks`参数表示我们希望使用的离散值的数量。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This function loops through all items in the `counts` object. These items are
    key-value pairs, such as `0: 300` where the key (`0`) represents the measurement,
    and the value (`300`) represents the number of times we observed it.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '这个函数遍历`counts`对象中的所有项。这些项是键值对，例如`0: 300`，其中键(`0`)表示测量值，而值(`300`)表示我们观察到的次数。'
- en: We multiply each key with its value and multiply that by the number of blocks
    and decrease that value a little bit (multiply by `0.999`). This means we regard
    a value that resides at the exact line between two discrete values as the lower
    one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每个键与其值相乘，然后乘以块数，并稍微减少该值（乘以`0.999`）。这意味着我们将位于两个离散值之间的确切线上的值视为较低的值。
- en: The overall discretized value is the total sum of all weighted values divided
    by the total sum of all unweighted values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总体离散值是所有加权值的总和除以所有未加权值的总和。
- en: This is but a short function. Yet, let’s see how it performs in practice.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简短的函数。然而，让我们看看它在实践中的表现。
- en: First, we write a helper function that creates the `counts` object for us.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们编写一个辅助函数，为我们创建`counts`对象。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function takes the number of `blocks`, the `steps`, and the `current` step
    as parameters. I’ll explain these in a minute. First, let’s look into the definition
    of the function. We create a quantum circuit with a single qubit and apply a rotation
    around the Y-axis.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受`blocks`、`steps`和`current`步骤作为参数。我会稍后解释这些。首先，让我们深入了解函数的定义。我们创建一个包含一个量子位的量子电路，并应用围绕Y轴的旋转。
- en: '[This post](https://pyqml.medium.com/how-to-precisely-control-your-qubits-in-qiskit-357f44780725)
    explains this operator in detail.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[这篇文章](https://pyqml.medium.com/how-to-precisely-control-your-qubits-in-qiskit-357f44780725)详细解释了这个算子。'
- en: '[](https://pyqml.medium.com/how-to-precisely-control-your-qubits-in-qiskit-357f44780725?source=post_page-----60acf19fc68c--------------------------------)
    [## How To Precisely Control Your Qubits In Qiskit'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pyqml.medium.com/how-to-precisely-control-your-qubits-in-qiskit-357f44780725?source=post_page-----60acf19fc68c--------------------------------)
    [## 如何精确控制你在Qiskit中的量子位'
- en: The RY operator in practice
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际中的RY算子
- en: pyqml.medium.com](https://pyqml.medium.com/how-to-precisely-control-your-qubits-in-qiskit-357f44780725?source=post_page-----60acf19fc68c--------------------------------)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[这篇文章](https://pyqml.medium.com/how-to-precisely-control-your-qubits-in-qiskit-357f44780725?source=post_page-----60acf19fc68c--------------------------------)'
- en: Essentially, the `ry` gate rotates the default state |0⟩ to a state that represents
    a certain probability of measuring the qubit as 1\. Here, this probability is
    `(current+0.5)/steps`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，`ry`门将默认状态|0⟩旋转到一个表示测量量子位为1的某个概率的状态。在这里，这个概率是`(current+0.5)/steps`。
- en: Then, we define a `backend` and `execute` the quantum circuit to obtain the
    `result` that provides the `counts` that we `discretize`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义一个`backend`并`execute`量子电路，以获得`result`，它提供`counts`，我们对其进行`discretize`。
- en: The behavior of this helper function becomes apparent when we use it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用这个辅助函数时，它的行为变得明显。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of this code is the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出如下：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, what happens here?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这里发生了什么？
- en: First, we define to discretize the expectation value of our qubit into four
    `blocks`. We want to evaluate this function with 20 `steps`. So, we run the circuit
    for each current step (`x`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义将我们量子位的期望值离散化为四个`blocks`。我们希望用20个`steps`来评估这个函数。因此，我们为每个当前步骤(`x`)运行电路。
- en: The first rows of the output denote the `counts` printed inside `discretize`
    function. As you see, the probability of measuring the qubit as 1 increases as
    the probability of measuring it as 0 decreases. The probability represents the
    ratio between the current step and the total number of steps. This is what we
    calculate by `prob_to_angle((current+0.5)/steps)`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的前几行表示`counts`在`discretize`函数内部打印的结果。如你所见，当测量量子比特为1的概率增加时，测量其为0的概率则减少。该概率表示当前步骤与总步骤数之间的比率。这就是我们通过`prob_to_angle((current+0.5)/steps)`计算的内容。
- en: The next line shows the list of discretized values. As we see, the first five
    items correspond to the value `0`, the next five to the value `1` and so on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行展示了离散化值的列表。如我们所见，前五个项对应值为`0`，接下来的五个项对应值为`1`，以此类推。
- en: The last output shows the distribution of discretized values. Each value from
    `0` to `3` appears five times. Since we have 20 steps, is demonstrates that the
    discretization works fine.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一项输出显示了离散化值的分布。每个值从`0`到`3`出现五次。由于我们有20个步骤，这表明离散化工作正常。
- en: But this is not a real test yet. We used the `statevector_simulator` that prepares
    the perfect quantum state and the exact `counts` corresponding to it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但这仍然不是一个真正的测试。我们使用了准备完美量子态及其确切`counts`的`statevector_simulator`。
- en: But, measuring quantum states can only be done empirically in reality. We can’t
    compute the perfect quantum state of a larger quantum circuit. If we could, there
    was no reason to build and use a quantum computer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但，测量量子态只能通过经验获得。在现实中我们不能计算更大量子电路的完美量子态。如果可以的话，就没有理由去构建和使用量子计算机了。
- en: So, the next helper function uses the `qasm_simulator` that creates the `counts`
    empirically.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，接下来的辅助函数使用`qasm_simulator`来经验性地创建`counts`。
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are only two differences. First, we use the `qasm_simulator` instead of
    the `statevector_simulator`. Second, we measure the qubits after we applied the
    `ry` gate.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 仅有两个区别。首先，我们使用了`qasm_simulator`而不是`statevector_simulator`。其次，我们在应用`ry`门后测量量子比特。
- en: Let’s look at the results.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果。
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We see that the `counts` are not as perfectly distributed anymore. However,
    the discretization still works. We see each discrete value exactly five times.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`counts`的分布不再那么完美。然而，离散化仍然有效。我们看到每个离散值恰好出现了五次。
- en: But we are not there yet. Even though we see statistical deviations in the results,
    the `qasm_simulator` simulates a noise-free quantum computer. But we do not have
    such devices yet.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们还没有完全到达目标。尽管我们在结果中看到统计偏差，`qasm_simulator`模拟的是无噪声的量子计算机。然而我们目前还没有这样的设备。
- en: Instead, our current devices are prone to errors. They are noisy. So, let’s
    add some noise.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们当前的设备容易出错。它们是有噪声的。我们来增加一些噪声。
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: While the circuit remains the same, we create another backend this time. We
    create a simulator that exhibits the same noise as IBM’s quantum computer in Quito.
    This is a five-qubit quantum computer available through the IBM cloud.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然电路保持不变，这次我们创建了另一个后端。我们创建了一个模拟器，其噪声特性与IBM在基多的量子计算机相同。这是一台通过IBM云提供的五量子比特量子计算机。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We see the `counts` to deviate even further from the correct values. And as
    a consequence, we see that we get one wrong discretization. We take one `3` for
    a `2`, in the case of `{0: 284, 1: 716}`. Certainly, we would not have seen an
    error if we only interpreted the `counts` as either 0 or 1\. The item in question
    certainly is rather 1 than 0.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '我们看到`counts`的偏差甚至更大。因此，我们看到一个错误的离散化。在`{0: 284, 1: 716}`的情况下，我们将一个`3`误认为是`2`。如果我们仅将`counts`解释为0或1，我们肯定不会看到错误。相关项显然更接近1而不是0。'
- en: Otherwise, the result is not too bad. In fact, let’s see what happens if we
    interpret the expectation value not as four but as eight values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，结果并不太糟。事实上，我们来看一下如果我们将期望值解释为八个值而不是四个值会发生什么。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We would expect to see each discretized value exactly three times. So, even
    though the results are not entirely unreasonable, we see a significant number
    of errors here.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预计每个离散值会出现三次。因此，尽管结果并非完全不合理，但我们在这里看到相当多的错误。
- en: So, discretized expectation values increase the susceptibility to noise. But,
    error mitigation techniques, such as the zero-noise extrapolation technique (ZNE)
    or Clifford Data Regression (CDR), help us mitigate the negative effect of noise.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，离散化的期望值增加了对噪声的敏感性。但错误缓解技术，如零噪声外推技术（ZNE）或Clifford数据回归（CDR），帮助我们减轻噪声的负面影响。
- en: '[](/how-to-implement-quantum-error-mitigation-with-qiskit-and-mitiq-e2f6a933619c?source=post_page-----60acf19fc68c--------------------------------)
    [## How To Implement Quantum Error Mitigation With Qiskit And Mitiq'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-implement-quantum-error-mitigation-with-qiskit-and-mitiq-e2f6a933619c?source=post_page-----60acf19fc68c--------------------------------)
    [## 如何用 Qiskit 和 Mitiq 实施量子误差缓解'
- en: Learn how to implement the Clifford Data Regression
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解如何实施 Clifford 数据回归
- en: towardsdatascience.com](/how-to-implement-quantum-error-mitigation-with-qiskit-and-mitiq-e2f6a933619c?source=post_page-----60acf19fc68c--------------------------------)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-implement-quantum-error-mitigation-with-qiskit-and-mitiq-e2f6a933619c?source=post_page-----60acf19fc68c--------------------------------)
- en: Conclusion
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Nevertheless, the ability to encode four or even eight instead of only two values
    could be a decisive factor when using current quantum computers. While we can’t
    easily increase the number of available qubits, we can use appropriate techniques,
    such as discretization. When combined with error mitigation techniques, we could
    possibly make our tiny number of qubits appear much bigger.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不能轻易增加可用的量子比特数量，但能够编码四个甚至八个值而不是仅两个值的能力可能在使用当前量子计算机时成为决定性因素。虽然我们无法轻易增加可用的量子比特数量，但我们可以使用适当的技术，如离散化。结合误差缓解技术，我们可能会使我们少量的量子比特显得更大。
- en: '[](https://pyqml.medium.com/membership?source=post_page-----60acf19fc68c--------------------------------)
    [## Join Medium with my referral link - Frank Zickert | Quantum Machine Learning'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pyqml.medium.com/membership?source=post_page-----60acf19fc68c--------------------------------)
    [## 使用我的推荐链接加入 Medium - Frank Zickert | 量子机器学习'
- en: Get Started With Quantum Machine Learning (and get full access to every story
    on Medium) Get full access to all the…
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始学习量子机器学习（并获得对 Medium 上所有故事的完全访问权限）。获取完整访问权限…
- en: pyqml.medium.com](https://pyqml.medium.com/membership?source=post_page-----60acf19fc68c--------------------------------)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: pyqml.medium.com](https://pyqml.medium.com/membership?source=post_page-----60acf19fc68c--------------------------------)
- en: Don’t miss the next episode, and subscribe to my [Substack channel](https://pyqml.substack.com/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不要错过下一集，订阅我的[Substack 频道](https://pyqml.substack.com/)。
- en: Do you want to get started with Quantum Machine Learning? Have a look at [**Hands-On
    Quantum Machine Learning With Python**](https://www.pyqml.com/volume1?provider=medium&origin=discretizedqubit)**.**
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 想开始学习量子机器学习吗？可以看看[**动手实践量子机器学习与 Python**](https://www.pyqml.com/volume1?provider=medium&origin=discretizedqubit)**。**
- en: '![](../Images/c3892c668b9d47f57e47f1e6d80af7b6.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3892c668b9d47f57e47f1e6d80af7b6.png)'
- en: Get the first three chapters for free [here](https://www.pyqml.com/volume1?provider=medium&origin=discretizedqubit).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 免费获取前三章[这里](https://www.pyqml.com/volume1?provider=medium&origin=discretizedqubit)。
