- en: Spatial Data Engineering with Typescript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Typescript 进行空间数据工程
- en: 原文：[https://towardsdatascience.com/spatial-data-engineering-with-typescript-fb5f59af8bb0](https://towardsdatascience.com/spatial-data-engineering-with-typescript-fb5f59af8bb0)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/spatial-data-engineering-with-typescript-fb5f59af8bb0](https://towardsdatascience.com/spatial-data-engineering-with-typescript-fb5f59af8bb0)
- en: '![](../Images/d8b3269364c41a6de125247805d7042d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8b3269364c41a6de125247805d7042d.png)'
- en: Photo by [T K](https://unsplash.com/@realaxer?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/9AxFJaNySB8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[T K](https://unsplash.com/@realaxer?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    在 [Unsplash](https://unsplash.com/photos/9AxFJaNySB8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    上的照片'
- en: Establishing data pipelines towards automated spatial data science
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立自动化空间数据科学的数据管道
- en: '[](https://sutan.co.uk/?source=post_page-----fb5f59af8bb0--------------------------------)[![Sutan
    Mufti](../Images/0a7922168ff75a80b2ddb38d4a142f37.png)](https://sutan.co.uk/?source=post_page-----fb5f59af8bb0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fb5f59af8bb0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fb5f59af8bb0--------------------------------)
    [Sutan Mufti](https://sutan.co.uk/?source=post_page-----fb5f59af8bb0--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://sutan.co.uk/?source=post_page-----fb5f59af8bb0--------------------------------)[![Sutan
    Mufti](../Images/0a7922168ff75a80b2ddb38d4a142f37.png)](https://sutan.co.uk/?source=post_page-----fb5f59af8bb0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fb5f59af8bb0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fb5f59af8bb0--------------------------------)
    [Sutan Mufti](https://sutan.co.uk/?source=post_page-----fb5f59af8bb0--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fb5f59af8bb0--------------------------------)
    ·9 min read·Sep 5, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fb5f59af8bb0--------------------------------)
    ·9 分钟阅读·2023 年 9 月 5 日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: We can think of data as if it were water and companies as towns. Just as a town
    grows as the population grows and needs more water to serve its residents, a company,
    as it gets bigger, requires a ready to consume data to support its operations.
    Such companies require a data pipeline system that acts like the pipes and infrastructure
    that bring water to homes in a town. In our data analogy, data engineers are the
    people who build and maintain these data pipelines. It is quite straight forward
    for regular array or table like data, however, it is a bit more complicated when
    it comes to spatial data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把数据看作水，把公司看作城镇。就像一个城镇随着人口增长而需要更多的水来服务其居民一样，一家公司在成长时也需要现成的数据来支持其运营。这类公司需要一个数据管道系统，类似于将水送到城镇家庭的管道和基础设施。在我们的数据类比中，数据工程师就是那些建立和维护这些数据管道的人。对于常规的数组或表格数据来说，这很简单，但对于空间数据来说，就会复杂一些。
- en: Spatial data is a bit different compared to regular data; it contains spatial
    attributes. These attributes allow us to establish spatial relationship; also
    known as [geospatial topology](https://en.wikipedia.org/wiki/Geospatial_topology).
    Even though two tables don’t have primary keys and foreign keys, we can still
    join them if they both have the spatial attributes. If we visualise the spatial
    attribute, we have a map!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 空间数据与常规数据略有不同；它包含空间属性。这些属性使我们能够建立空间关系，也称为 [地理空间拓扑](https://en.wikipedia.org/wiki/Geospatial_topology)。即使两个表没有主键和外键，只要它们都有空间属性，我们仍然可以将它们连接起来。如果我们可视化空间属性，就会得到一张地图！
- en: '[](/spatial-data-science-sql-join-spatially-ecd2f7400753?source=post_page-----fb5f59af8bb0--------------------------------)
    [## Spatial Data Science: SQL Join Spatially'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/spatial-data-science-sql-join-spatially-ecd2f7400753?source=post_page-----fb5f59af8bb0--------------------------------)
    [## 空间数据科学：SQL 空间连接'
- en: 'join the tables if they have spatial relationship. Bonus: I’m doing it in Ms.
    Excel'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果表格之间有空间关系，则将它们连接起来。附加说明：我正在使用 Ms. Excel 进行操作
- en: towardsdatascience.com](/spatial-data-science-sql-join-spatially-ecd2f7400753?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/spatial-data-science-sql-join-spatially-ecd2f7400753?source=post_page-----fb5f59af8bb0--------------------------------)
- en: Building spatial data pipelines differs from creating ordinary data pipelines.
    In this case, we primarily handle spatial data attributes using spatial SQL, which
    is [a less common skill](https://carto.com/blog/top-insights-state-of-spatial-data-science-report)
    within the data scientist community. Once a data pipe line is built, data analysts
    can proceed in analysing the spatial data from the data pipeline. This means data
    analyst can focus on generating spatial insights without having to worry about
    data availability. This also means that maps can be generated automatically with
    the latest spatial data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构建空间数据管道与创建普通数据管道有所不同。在这种情况下，我们主要使用空间 SQL 处理空间数据属性，这是数据科学家社区中[较少见的技能](https://carto.com/blog/top-insights-state-of-spatial-data-science-report)。一旦数据管道建立，数据分析师可以继续分析来自数据管道的空间数据。这意味着数据分析师可以专注于生成空间洞察，而无需担心数据的可用性。这也意味着可以使用最新的空间数据自动生成地图。
- en: This Article
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本文
- en: This article discusses how to build spatial data pipelines using typescript
    and nodeJS. We can call this an [ETL](https://aws.amazon.com/what-is/etl/) (Extract,
    Transform, Load) process but with spatial data. First, we will walk through how
    we can fetch the data from the source using typescript (Extract). We will then
    transform this data into the right structure for storage (Transform). Finally,
    we will operate spatial SQL to manage and store our data into our database (Load).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本文讨论了如何使用 TypeScript 和 NodeJS 构建空间数据管道。我们可以将其称为[ETL](https://aws.amazon.com/what-is/etl/)（提取、转换、加载）过程，但处理的是空间数据。首先，我们将演示如何使用
    TypeScript 从源头获取数据（提取）。接下来，我们将把这些数据转换成适合存储的结构（转换）。最后，我们将操作空间 SQL 来管理和存储数据到我们的数据库中（加载）。
- en: The development is done with typescript & Node.js, primarily using the [node-postgres](https://node-postgres.com/)
    library. The demo code is available in the following link.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开发使用 TypeScript 和 Node.js 完成，主要使用了[node-postgres](https://node-postgres.com/)库。演示代码可在以下链接中找到。
- en: '[](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)
    [## GitHub - sutanmufti/spatial-data-engineering-typescript: spatial data engineering
    with typescript…'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)
    [## GitHub - sutanmufti/spatial-data-engineering-typescript: 使用 TypeScript 进行空间数据工程…'
- en: spatial data engineering with typescript and node. Contribute to sutanmufti/spatial-data-engineering-typescript…
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 TypeScript 和 Node.js 进行空间数据工程。贡献者为 sutanmufti/spatial-data-engineering-typescript…
- en: github.com](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)
- en: Prerequisite
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'There are three prerequisites: you have Node.JS with typescript, and have an
    on demand postgis server. I am using Mac OS (UNIX) for this article, but this
    article is meant for any Linux or Unix like OS for servers.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个先决条件：你需要有 Node.JS 和 TypeScript，以及一个按需的 PostGIS 服务器。我在这篇文章中使用的是 Mac OS（UNIX），但这篇文章适用于任何
    Linux 或类似 UNIX 的服务器操作系统。
- en: Node.JS
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.JS
- en: Node.js is a JavaScript runtime that executes JavaScript code on the server.
    It functions similarly to Python, serving as an interpreter for JavaScript code.
    For this article, a basic understanding on Javasvript syntaxes suffices.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个在服务器上执行 JavaScript 代码的 JavaScript 运行时。它的功能类似于 Python，充当 JavaScript
    代码的解释器。对于本文，基本理解 JavaScript 语法即可。
- en: '[](https://nodejs.org/en/download?source=post_page-----fb5f59af8bb0--------------------------------)
    [## Download | Node.js'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://nodejs.org/en/download?source=post_page-----fb5f59af8bb0--------------------------------)
    [## 下载 | Node.js'
- en: Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js® 是一个基于 Chrome 的 V8 JavaScript 引擎构建的 JavaScript 运行时。
- en: nodejs.org](https://nodejs.org/en/download?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: nodejs.org](https://nodejs.org/en/download?source=post_page-----fb5f59af8bb0--------------------------------)
- en: Typescript
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScript
- en: Typescript is a superset of Javascript that adds type checking feature to javascript.
    This “type checking feature” restricts coding in javascript in return of lowering
    risks of bugs. The code we develop in typescript is compiled into javascript code.
    This javascript code is then executed by Node.JS. Typescript is optional, but
    I like having type check in my projects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是 JavaScript 的超集，为 JavaScript 添加了类型检查功能。这种“类型检查功能”限制了 JavaScript
    编码，从而降低了出错的风险。我们在 TypeScript 中开发的代码会被编译成 JavaScript 代码，然后由 Node.JS 执行。虽然 TypeScript
    是可选的，但我喜欢在我的项目中使用类型检查。
- en: '[## How to set up TypeScript'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何设置 TypeScript'
- en: Add TypeScript to your project, or install TypeScript globally
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 TypeScript 添加到你的项目中，或者全局安装 TypeScript
- en: www.typescriptlang.org](https://www.typescriptlang.org/download?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[TypeScript 官方网站](https://www.typescriptlang.org/download?source=post_page-----fb5f59af8bb0--------------------------------)'
- en: Postgis Server
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Postgis 服务器
- en: You must have postgresql server running with Postgis installed. Postgis is a
    postgresql extension that allows us to handle and store geospatial data. This
    is how we can conduct spatial SQL. Of course, you must know fundamental SQL to
    operate Postgresql.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须运行 PostgreSQL 服务器，并安装 Postgis。Postgis 是一个 PostgreSQL 扩展，允许我们处理和存储地理空间数据。这就是我们如何进行空间
    SQL 查询的方式。当然，你必须了解基本的 SQL 才能操作 PostgreSQL。
- en: '[](/spatial-data-science-spatial-queries-8d6709fd9747?source=post_page-----fb5f59af8bb0--------------------------------)
    [## Spatial Data Science: Spatial Queries'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/spatial-data-science-spatial-queries-8d6709fd9747?source=post_page-----fb5f59af8bb0--------------------------------)
    [## 空间数据科学：空间查询'
- en: answering every “where” question with SQL; with example
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用 SQL 回答每一个“在哪里”的问题；带有示例
- en: towardsdatascience.com](/spatial-data-science-spatial-queries-8d6709fd9747?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[Towards Data Science](https://towardsdatascience.com/spatial-data-science-spatial-queries-8d6709fd9747?source=post_page-----fb5f59af8bb0--------------------------------)'
- en: You can have your own postgis server with Docker or install it directly in your
    PC. Another alternative is to deploy a cloud instance such as with Amazon RDS,
    Google Cloud SQL, or a general virtual machine with postgresql installed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 Docker 拥有自己的 Postgis 服务器，或者直接在你的 PC 上安装它。另一种选择是部署一个云实例，例如使用 Amazon RDS、Google
    Cloud SQL，或一个安装了 PostgreSQL 的普通虚拟机。
- en: '[## Docker'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Docker'
- en: Edit description
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑描述
- en: registry.hub.docker.com](https://registry.hub.docker.com/r/postgis/postgis/?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Docker Hub 上的 Postgis 镜像](https://registry.hub.docker.com/r/postgis/postgis/?source=post_page-----fb5f59af8bb0--------------------------------)'
- en: The Idea
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理念
- en: 'We can break this job into several tasks:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这项工作分解为几个任务：
- en: 'Extract: fetching the data from the data source. For this article, the data
    source can be anything as long as we are receiving in [GeoJSON](https://geojson.org/)
    format ([RFC7946](https://datatracker.ietf.org/doc/html/rfc7946))! In this demo
    we will take the source from [Stuart Grange](https://skgrange.github.io/data.html)’s
    data that originates from the London Government’s [data store](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london/resource/9ba8c833-6370-4b11-abdc-314aa020d5e0).
    We can retrieve other geospatial format such as shapefile but that means we must
    handle this with other libraries. For the sake of simplicity, let’s stick with
    GeoJSON.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取：从数据源获取数据。对于本文，数据源可以是任何东西，只要我们接收的是 [GeoJSON](https://geojson.org/) 格式 ([RFC7946](https://datatracker.ietf.org/doc/html/rfc7946))！在这个演示中，我们将采用
    [Stuart Grange](https://skgrange.github.io/data.html) 的数据，该数据源自伦敦政府的 [数据存储](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london/resource/9ba8c833-6370-4b11-abdc-314aa020d5e0)。我们也可以检索其他地理空间格式如
    shapefile，但那意味着我们必须使用其他库来处理。为了简便起见，我们就使用 GeoJSON。
- en: 'Transform: validating the data (again, not the focus of this article) and handle
    it if it is not valid. Then, we transform the raw data into the structure that
    will be used by the data analysts; or how we design our data environment.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换：验证数据（再次说明，这不是本文的重点）并处理无效数据。然后，我们将原始数据转换成数据分析师使用的结构；或者说我们如何设计我们的数据环境。
- en: 'Load: inserting the data into the table. This uses spatial SQL.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载：将数据插入到表中。这使用空间 SQL。
- en: At the end of the article we can see our data being stored inside our postgis
    server. Let’s get into the code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章的最后，我们可以看到我们的数据存储在 Postgis 服务器中。让我们进入代码部分。
- en: Building The Data Pipeline
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建数据管道
- en: The main code is available in the following link. Let’s break down the tasks
    and walk through the code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 主要代码可以在以下链接中找到。让我们分解任务并逐步分析代码。
- en: '[](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)
    [## GitHub - sutanmufti/spatial-data-engineering-typescript: spatial data engineering
    with typescript…'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub - sutanmufti/spatial-data-engineering-typescript: 使用 TypeScript 进行空间数据工程…](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)'
- en: spatial data engineering with typescript and node. Contribute to sutanmufti/spatial-data-engineering-typescript…
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 TypeScript 和 Node 进行空间数据工程。贡献于 sutanmufti/spatial-data-engineering-typescript…
- en: github.com](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub - sutanmufti/spatial-data-engineering-typescript](https://github.com/sutanmufti/spatial-data-engineering-typescript?source=post_page-----fb5f59af8bb0--------------------------------)'
- en: 'The [main function](https://github.com/sutanmufti/spatial-data-engineering-typescript/blob/main/src/index.ts)
    is the following code. As you can see, it mainly comprises of 2 functions: the
    `ExtractData` and the `transformAndLoad` . Additionally, there is a constant variable
    named `pool`that handles authentication for the PostGIS server.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[主要功能](https://github.com/sutanmufti/spatial-data-engineering-typescript/blob/main/src/index.ts)是以下代码。如你所见，它主要包含了2个函数：`ExtractData`和`transformAndLoad`。此外，还有一个名为`pool`的常量变量，用于处理PostGIS服务器的认证。'
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Extract the Data
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取数据
- en: This task is done by the `ExtractData()` function. We are expecting a GeoJSON
    like data with this function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务是由`ExtractData()`函数完成的。我们期望这个函数能返回类似GeoJSON的数据。
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this function we have an asynchronous function with name `ExtractData` .
    the `export` statement tells that this function can be imported in another typescript
    file. This makes the project modular. The `async` syntax states that this is an
    asynchronous function. This allows us to run multiple functions at the same time;
    mainly because we will use fetch API to conduct HTTP GET request to the server.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们有一个名为`ExtractData`的异步函数。`export`语句表明这个函数可以在另一个TypeScript文件中导入，这使得项目模块化。`async`语法表示这是一个异步函数。这使我们可以同时运行多个函数，主要因为我们将使用fetch
    API来执行HTTP GET请求。
- en: Fetch API is an asynchronous function that is easier to be wrapped inside an
    asynchronous function. Thus we have the `await` statement to wait for the HTTP
    Get request to finish. We will have the `data` in the form of `GeoJSON` format.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch API是一个异步函数，更容易嵌套在异步函数中。因此，我们有`await`语句来等待HTTP Get请求完成。我们将以`GeoJSON`格式获得`data`。
- en: I find fetch API & asynchronous function to be confusing for beginners. Furthermore
    on how asynchronous function complements Fetch API is in my other article.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现fetch API和异步函数对初学者来说比较混乱。此外，异步函数如何与Fetch API互补的内容在我的另一篇文章中有介绍。
- en: '[](https://insight.sutan.co.uk/using-fetch-api-faa44d4d9a12?source=post_page-----fb5f59af8bb0--------------------------------)
    [## Using Fetch API'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://insight.sutan.co.uk/using-fetch-api-faa44d4d9a12?source=post_page-----fb5f59af8bb0--------------------------------)
    [## 使用Fetch API'
- en: How to use Fetch in Javascript? Why does Fetch return a promise? Introducing
    asynchronous functions & promises
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在Javascript中使用Fetch？为什么Fetch返回一个Promise？介绍异步函数和Promises
- en: insight.sutan.co.uk](https://insight.sutan.co.uk/using-fetch-api-faa44d4d9a12?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: insight.sutan.co.uk](https://insight.sutan.co.uk/using-fetch-api-faa44d4d9a12?source=post_page-----fb5f59af8bb0--------------------------------)
- en: Transform and Load the Data
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换和加载数据
- en: After we obtain the data, we can then transform it and load the transformed
    data into postgis. We will use `node-postgres` as the client that execute SQL
    with nodeJS. I prefer `node-postgres` as I like writing raw SQL code. Furthermore,
    we have granular control over the spatial SQL. The drawback is that our code might
    look complicated as we might write rows of SQL queries.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取数据后，我们可以将其转换并加载到PostGIS中。我们将使用`node-postgres`作为客户端来用nodeJS执行SQL。我偏爱`node-postgres`因为我喜欢编写原始SQL代码。此外，我们对空间SQL有更细粒度的控制。缺点是我们的代码可能会显得复杂，因为我们可能会编写多行SQL查询。
- en: '[](https://node-postgres.com/?source=post_page-----fb5f59af8bb0--------------------------------)
    [## node-postgres'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://node-postgres.com/?source=post_page-----fb5f59af8bb0--------------------------------)
    [## node-postgres'
- en: node-postgres is a collection of node.js modules for interfacing with your PostgreSQL
    database.
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: node-postgres是一个用于与PostgreSQL数据库接口的node.js模块集合。
- en: node-postgres.com](https://node-postgres.com/?source=post_page-----fb5f59af8bb0--------------------------------)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: node-postgres.com](https://node-postgres.com/?source=post_page-----fb5f59af8bb0--------------------------------)
- en: This one is a bit long. I will highlight the important parts, mainly the spatial
    SQL bit.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分稍微长一点。我将突出重点，主要是空间SQL部分。
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Safe Data Transaction with Node-postgres
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Node-postgres进行安全数据事务
- en: 'The essential recipe of inserting bulk rows in PostgreSQL is the following
    part of the code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostgreSQL中插入批量行的基本代码如下：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `client.query("BEGIN")` allows us to stage the inserting process for each
    record of the data. This means that if there is something wrong along the inserting
    process, (for instance, the data at row-n is invalid thus postgresql throws an
    error) we can cancel the data transaction as a whole. This cancelation is done
    with `client.query(‘ROLLBACK’)`. If all of the rows are inserted correctly without
    errors, then we can declare this as a safe insert and invoke `client.query("COMMIT")`
    to commit the data transaction.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`client.query("BEGIN")` 允许我们为每条数据记录进行插入过程的分阶段处理。这意味着如果在插入过程中出现问题（例如，第 n 行的数据无效，导致
    PostgreSQL 抛出错误），我们可以取消整个数据事务。这个取消操作通过 `client.query(''ROLLBACK'')` 完成。如果所有行都正确插入且没有错误，我们可以将其声明为安全插入，并调用
    `client.query("COMMIT")` 来提交数据事务。'
- en: If we do not begin with the `client.query("BEGIN")` , any errors that occur
    during the insertion process will result in the data being inserted into the database
    anyway. In most cases, we do not want this.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不以 `client.query("BEGIN")` 开始，那么在插入过程中发生的任何错误都会导致数据被插入到数据库中。在大多数情况下，我们不希望这样。
- en: Parameterised Query
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数化查询
- en: Let’s see what we do after we invoke `client.query("COMMIT")` . This is where
    we transform and insert our spatial data. There isn’t much to the transformation
    bit as I only extract some of the property.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在调用 `client.query("COMMIT")` 后我们会做什么。这是我们转换并插入空间数据的地方。转换的部分不多，因为我只是提取了一些属性。
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The most important bit is how to use parameterised query. A common SQL vulnerability
    is [SQL injection](https://www.w3schools.com/sql/sql_injection.asp#:~:text=SQL%20injection%20is%20a%20code,statements%2C%20via%20web%20page%20input.).
    Parameterised query mitigate this vulnerability by not inserting raw SQL into
    our data transaction. Look at the following SQL command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的一点是如何使用参数化查询。一个常见的 SQL 漏洞是 [SQL 注入](https://www.w3schools.com/sql/sql_injection.asp#:~:text=SQL%20injection%20is%20a%20code,statements%2C%20via%20web%20page%20input.)。参数化查询通过不将原始
    SQL 插入到我们的数据事务中来缓解这个漏洞。看看下面的 SQL 命令。
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Please note the string `$1` , `$2` , `$3` , and `$4` . These are the placeholders
    for the actual values we insert. We **should not** use [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)
    where we format our string. In Javascript Node-postgres, you should NOT do the
    following.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意字符串 `$1` 、 `$2` 、 `$3` 和 `$4`。这些是我们插入的实际值的占位符。我们**不应该**使用 [模板字面量](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)
    来格式化我们的字符串。在 JavaScript Node-postgres 中，你不应该这样做。
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You are subjecting the database to malicious queries. For instance if the `${value}`
    value is a `DROP TABLE` command, then the function will execute the `DROP TABLE`
    command! This is not possible if we use the `$1` parameterised query.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会让数据库面临恶意查询。例如，如果`${value}`的值是`DROP TABLE`命令，那么函数将执行`DROP TABLE`命令！如果我们使用`$1`参数化查询，这种情况是不会发生的。
- en: Inserting with Spatial SQL
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用空间 SQL 插入
- en: Now let’s see the insert statement and how I handle the spatial data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下插入语句以及我如何处理空间数据。
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `ST_GeomFromGeoJSON` is a postgis function that takes a *stringified* geometry
    and converts it into a geometry object. For instance,
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST_GeomFromGeoJSON` 是一个 postgis 函数，它接受一个*字符串化*的几何体并将其转换为几何对象。例如，'
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We then wrap this inside `ST_SetSRID` function to declare its projection. I
    am using the EPSG code `4326` here to indicate that this is a Latitude and Longitude
    values. You might receive data in different projections. For instance, in the
    United Kingdom, the data are often projected into British National Grid which
    has the code `27700` ; Northing and Easting. This is not the case for this demo.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将其包装在`ST_SetSRID`函数中以声明其投影。我在这里使用 EPSG 代码`4326`来表示这是经纬度值。你可能会收到不同投影的数据。例如，在英国，数据通常会投影到
    British National Grid，其代码为`27700`；北坐标和东坐标。这对于这个演示不适用。
- en: Release the Connection
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 释放连接
- en: Finally, we release the client to enable the server to handle another clients.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们释放客户端，以便服务器可以处理其他客户端。
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running the Code
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行代码
- en: Let’s run the code with `npm run start` which runs `npx tsc` (this compiles
    the typescript code into javascript) and `node build` (this actually executes
    the javascript code that runs the ETL process). The log says it has succeeded.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码使用`npm run start`，这会运行`npx tsc`（这将 TypeScript 代码编译成 JavaScript）和`node build`（这实际上执行运行
    ETL 过程的 JavaScript 代码）。日志显示操作成功。
- en: '![](../Images/cbea3ca1aeb7ac9b4931717945b754db.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cbea3ca1aeb7ac9b4931717945b754db.png)'
- en: 'Executing the code (source: author, 2023)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码（来源：作者，2023）
- en: Let’s look at the data with PgAdmin or plain psql by selecting the data. Something
    like,
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过选择数据在 PgAdmin 或普通的 psql 中查看数据。类似于，
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using PgAdmin, we can see that the data makes sense in the map! This means the
    data analysts can now start analysing the data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PgAdmin，我们可以看到数据在地图上是合理的！这意味着数据分析师现在可以开始分析数据了。
- en: '![](../Images/44a8b40409f93190c41f39bef0a381ff.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44a8b40409f93190c41f39bef0a381ff.png)'
- en: 'viewing the data (source: author, 2023)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 查看数据（来源：作者，2023）
- en: We can also start playing with the data in QGIS, an open source GIS software
    we can use to analyse geospatial data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在 QGIS 中开始玩转数据，QGIS 是一个开源的 GIS 软件，我们可以用来分析地理空间数据。
- en: '![](../Images/eb70196573cf6c3160d828837f909d30.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb70196573cf6c3160d828837f909d30.png)'
- en: 'viewing the data with QGIS (source: author, 2023)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 QGIS 查看数据（来源：作者，2023）
- en: Conclusion
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Spatial data engineering’s main idea is creating a data pipeline that draws
    the raw data from one source, treat it, and have it stored for use. This allows
    spatial data analysts to focus on analysing data without to worry about data availability;
    which is handled by the spatial data engineers. What makes spatial data engineering
    special is how we handle spatial data, that is, using spatial SQL. Using typescript
    with Node.JS, powered by `node-postgres`, we can construct a simple data pipleline.
    The data pipeline fetches geojson data, transform it, and stores the it inside
    a PostgreSQL database server with spatial data capability enabled by Postgis.
    This stored data can be then analysed using GIS software.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 空间数据工程的主要思想是创建一个数据管道，从一个来源提取原始数据，对其进行处理，并将其存储以供使用。这使得空间数据分析师可以专注于数据分析，而不必担心数据的可用性；这由空间数据工程师负责处理。空间数据工程的特殊之处在于我们如何处理空间数据，即使用空间
    SQL。使用 TypeScript 和 Node.JS，借助 `node-postgres`，我们可以构建一个简单的数据管道。数据管道获取 geojson
    数据，对其进行转换，并将其存储在启用了 Postgis 的 PostgreSQL 数据库服务器中。这些存储的数据随后可以使用 GIS 软件进行分析。
