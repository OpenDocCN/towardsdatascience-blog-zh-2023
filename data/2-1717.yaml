- en: 'Python: Computing Integrals the Right Way'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python：正确计算积分
- en: 原文：[https://towardsdatascience.com/python-computing-integrals-the-right-way-22e9257a5836](https://towardsdatascience.com/python-computing-integrals-the-right-way-22e9257a5836)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-computing-integrals-the-right-way-22e9257a5836](https://towardsdatascience.com/python-computing-integrals-the-right-way-22e9257a5836)
- en: Muscle-up your integral game with python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用 Python 提升你的积分能力
- en: '[](https://mocquin.medium.com/?source=post_page-----22e9257a5836--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----22e9257a5836--------------------------------)[](https://towardsdatascience.com/?source=post_page-----22e9257a5836--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----22e9257a5836--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----22e9257a5836--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/?source=post_page-----22e9257a5836--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----22e9257a5836--------------------------------)[](https://towardsdatascience.com/?source=post_page-----22e9257a5836--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----22e9257a5836--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----22e9257a5836--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----22e9257a5836--------------------------------)
    ·7 min read·Sep 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----22e9257a5836--------------------------------)
    ·7分钟阅读·2023年9月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: When dealing with scientific computing or physics problems, it is very common
    to compute the integral of some functions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理科学计算或物理问题时，计算一些函数的积分是非常常见的。
- en: '![](../Images/da236dd8662c72933ed6e008ba4016e6.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da236dd8662c72933ed6e008ba4016e6.png)'
- en: Photo by [Jeswin Thomas](https://unsplash.com/@jeswinthomas?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jeswin Thomas](https://unsplash.com/@jeswinthomas?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'In this short post, I want to demonstrate 3 ways you can compute the integral
    of a 1D function in python. We will split the approaches in 2 cases :'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇简短的文章中，我想展示三种在 Python 中计算一维函数积分的方法。我们将把这些方法分为两种情况：
- en: '**First case: computing integral of a sampled function**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第一种情况：计算采样函数的积分**'
- en: '**Second case: computing integral of a generic function**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第二种情况：计算通用函数的积分**'
- en: '**In the first case**, the function we want to integrate has already been sampled
    to some sample points, and we don’t have access to the underlying “true” function.
    For example, we don’t know the “formula” of that function, and we cannot sample
    any other point of that function. In other words, we only have arrays of x and
    corresponding y values.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**在第一种情况**下，我们想要积分的函数已经被采样到一些样本点上，我们无法访问底层的“真实”函数。例如，我们不知道该函数的“公式”，也不能再对该函数采样其他点。换句话说，我们只有
    x 数组和相应的 y 值。'
- en: '**In the second case**, we will consider that we have a function object, to
    which we can pass a sample point and it’ll return the value of that function at
    that point. This is the ideal approach because we have access to all the information
    of the function.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**在第二种情况**下，我们考虑有一个函数对象，我们可以传递一个样本点，它会返回该点的函数值。这是理想的方法，因为我们可以访问函数的所有信息。'
- en: 'Note that we can always use the sampled approach: if we still have access to
    the function, we can choose sample points and use them to sample the function
    and use the first approach. **But as we will see, the choice of those sample points
    is precisely the important part to compute clean integrals.**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们始终可以使用采样方法：如果我们仍然可以访问函数，我们可以选择样本点并使用它们对函数进行采样，并使用第一种方法。**但正如我们将看到的，选择这些样本点正是计算干净积分的重要部分。**
- en: Integral definition
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 积分定义
- en: 'In this first post, we will focus on a single variable function that returns
    another single value. The integral we want to compute is the standard definition:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将重点讨论一个返回单一值的单变量函数。我们想要计算的积分是标准定义：
- en: '![](../Images/a4e4a5f895402b793880d29655bf7629.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4e4a5f895402b793880d29655bf7629.png)'
- en: 'Now our goal is to compute I as accurately as possible — within the limits
    of what we know of “f”. As an example, we’ll try to compute the following integral:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的目标是尽可能准确地计算 I —— 在我们所知道的“f”的范围内。作为例子，我们将尝试计算以下积分：
- en: '![](../Images/a2a06bce6df7f4339ed0f857defae860.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2a06bce6df7f4339ed0f857defae860.png)'
- en: Using basic math, you can show that the value of that integral is
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基本数学，可以显示该积分的值为
- en: '![](../Images/cf82377d3143a7791a28c003ee8bee39.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf82377d3143a7791a28c003ee8bee39.png)'
- en: In this post, we’ll see different approaches to compute the integral, and see
    how close we are to the true value.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨不同的积分计算方法，并看看我们离真实值有多近。
- en: '**First approach: Integrate sampled functions**'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第一种方法：对采样函数进行积分**'
- en: Let’s say we retrieve data from a sampled function, in the form of an X array
    and the corresponding values in a Y array. How would you compute the integral
    under that (X,Y) curve ?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们从一个采样函数中提取数据，形式为 X 数组及相应的 Y 数组。你将如何计算 (X,Y) 曲线下的积分？
- en: 'As the function is already sampled, we are not dealing with a continuous signal
    but with a discrete signal. In other words, we don’t know “f”, we only know a
    sequence of values of f:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于函数已经被采样，我们处理的不是连续信号，而是离散信号。换句话说，我们不知道“f”，只知道 f 的一系列值：
- en: '![](../Images/551eb68b48885c30618e31d35379f1f2.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/551eb68b48885c30618e31d35379f1f2.png)'
- en: 'Hence, it seems logical to transpose the integral formula using discrete notations,
    where the integral symbol turns into a discrete symbol, and ‘dx’ turns into the
    distance between each x samples:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将积分公式转化为离散符号形式似乎是合理的，其中积分符号变成离散符号，而 ‘dx’ 变成每个 x 样本之间的距离：
- en: '![](../Images/1fc00b15aebd24eed900d48cff17fac4.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fc00b15aebd24eed900d48cff17fac4.png)'
- en: 'Seems logical, right ? Let’s see how that works for our example. To compute
    the differences of the xs, we’ll use numpy’s ***diff*** function. To simplify,
    we’ll use equally sampled xs with numpy’s ***linspace*** function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很合理，对吗？让我们看看在我们的例子中效果如何。为了计算 xs 的差值，我们将使用 numpy 的 ***diff*** 函数。为简化起见，我们将使用
    numpy 的 ***linspace*** 函数生成等间隔的 xs：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So only 0.3% error is pretty good, we should be able to improve the integral
    using more points right ?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以仅有 0.3% 的误差已经相当不错，我们应该能通过更多点来改进积分，对吗？
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Better, but still not perfect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 更好，但仍不完美。
- en: 'The error is due to boundaries effects: notice that we do not use the first
    value of y (y_0), and the distance between each x (x_i+1 — x_i) is multiplied
    by the value of f for x_i. [This approach is called the “rectangle” rule or “Riemann
    sum”](https://en.wikipedia.org/wiki/Riemann_sum), and corresponds to the following
    geometry:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 误差源于边界效应：注意我们没有使用 y 的第一个值（y_0），每个 x 之间的距离（x_i+1 — x_i）与 x_i 的 f 值相乘。[这种方法被称为“矩形”法则或“黎曼和”](https://en.wikipedia.org/wiki/Riemann_sum)，对应于以下几何形状：
- en: '![](../Images/c5d9b9985cbb19b4017b4e4122580165.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5d9b9985cbb19b4017b4e4122580165.png)'
- en: (Right) rectangle rule, [image from public domain hosted on wikipedia](https://en.wikipedia.org/wiki/Riemann_sum#/media/File:RightRiemann2.svg)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （右侧）矩形法则，[来自公共领域的图片托管在维基百科](https://en.wikipedia.org/wiki/Riemann_sum#/media/File:RightRiemann2.svg)
- en: It’s basically the simplest — and worst—approach to estimate an integral from
    sampled values.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是从采样值估计积分的最简单——也是最差——的方法。
- en: 'To improve our approach a good step, we should use instead numpy’s [***trapz***](https://numpy.org/doc/stable/reference/generated/numpy.trapz.html)that
    is specifically designed to this problem: it uses [the trapezoidal rule](https://en.wikipedia.org/wiki/Trapezoidal_rule)
    to compute the integral from a vector X and vector Y. Basically, it computes the
    integral using the following geometry:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改进我们的方法，一个好步骤是使用 numpy 的 [***trapz***](https://numpy.org/doc/stable/reference/generated/numpy.trapz.html)，它专门针对这个问题设计：它使用
    [梯形法则](https://en.wikipedia.org/wiki/Trapezoidal_rule) 从 X 向量和 Y 向量计算积分。基本上，它使用以下几何形状计算积分：
- en: '![](../Images/2d14d0c8c62321e4ee357cdf5806d076.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d14d0c8c62321e4ee357cdf5806d076.png)'
- en: '[Image from public domain, hosted on wikipedia](https://en.wikipedia.org/wiki/File:Composite_trapezoidal_rule_illustration.png)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[来自公共领域的图片，托管在维基百科](https://en.wikipedia.org/wiki/File:Composite_trapezoidal_rule_illustration.png)'
- en: 'Let’s see how it performs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的表现：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So about 1e-3% error! It is pretty good compared to .3% of the rectangle rule.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此误差约为 1e-3%！与矩形法则的 0.3% 相比，已经相当不错了。
- en: 'Using more points (assuming we can have more, which is not always possible)
    we get:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用更多点（假设我们可以有更多点，这并不总是可能的），我们得到：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: About 1e-5% error, starting to be pretty decent.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 误差约为 1e-5%，开始变得相当不错。
- en: 'To improve even further, here’s what we can do:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步改进，可以采取以下措施：
- en: '**Increase the number of sampled points** (if possible): as a general rule,
    increasing the number of points will always decrease the error, but in various
    proportions. In other words, increasing the number of samples improves the error
    down to a certain amount — it becomes less and less efficient. Note that this
    requires to still have “access” to the function — and if it is the case, you’d
    better use the second approach. Also, computing the values of f is sometimes time-consuming.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增加采样点数量**（如果可能）：作为一般规则，增加点的数量通常会减少误差，但减少的程度各不相同。换句话说，增加样本数量可以将误差减少到一定程度——它变得越来越低效。请注意，这需要仍然“访问”函数——如果可以的话，你最好使用第二种方法。此外，计算
    f 的值有时会耗时。'
- en: '**Make assumptions**: when using the rectangle or trapezoidal rules, we make
    the underlying assumption that the function is “constant” between each x-samples.
    If we “allow” it, we can make other assumptions, like the function behaves like
    a polynomial of a certain order, and use that information to compute the integral.
    Given the fact that we use the “sampled approach”, we usually don’t have access
    to more information about the true function, so making different assumptions (constant,
    polynomial), is not better that the other, it’s just different.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**做出假设**：在使用矩形或梯形规则时，我们做出一个基本假设，即函数在每个 x 采样点之间是“常数”的。如果我们“允许”这样做，我们可以做出其他假设，例如函数表现得像某个阶数的多项式，并利用这些信息来计算积分。鉴于我们使用的是“采样方法”，通常我们无法获得有关真实函数的更多信息，因此做出不同的假设（常数、多项式）并没有比其他方法更好，只是不同而已。'
- en: In the end, both of these approaches require access and/or more knowledge on
    the true function. Which is why we’ll move on to the second approach!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这两种方法都需要对真实函数有访问和/或更多的了解。这就是为什么我们要转向第二种方法！
- en: 'Second approach: integrate continuous function'
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二种方法：对连续函数进行积分
- en: In this case, we still have access to the function f.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们仍然可以访问函数 f。
- en: For cases like that, there are [a lot of possibilities to compute integrals](https://en.wikipedia.org/wiki/Numerical_integration).
    Trying to understand them, how they work, their pros and cons, is a good start
    to grasp the complexity of those problems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，有很多[计算积分的可能性](https://en.wikipedia.org/wiki/Numerical_integration)。尝试理解这些方法，它们的工作原理、优缺点，是掌握这些问题复杂性的良好起点。
- en: 'Which is where [***scipy.integrate***](https://docs.scipy.org/doc/scipy/tutorial/integrate.html)
    comes into play: this module provides with lots of integration schemes, and the
    default settings will most of the time be quite enough.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[***scipy.integrate***](https://docs.scipy.org/doc/scipy/tutorial/integrate.html)发挥作用的地方：这个模块提供了很多积分方案，默认设置大多数情况下已经足够。
- en: In our case, we are going to use the [***quad***](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad)function,
    which is the general purpose integration function for 1-dimensional functions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将使用[***quad***](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad)函数，它是用于一维函数的通用积分函数。
- en: 'Let’s see how it does for our problem:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看它对我们的问题的表现：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tada! Numerical-precision integration, right out of the box. So remember, rather
    than sampling the function f yourself, and using a trapezoid to compute the integral,
    let scipy do the hard work !
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 啦啦！数值精度积分，直接开箱即用。所以记住，与其自己对函数 f 进行采样，并使用梯形法计算积分，不如让 scipy 做繁重的工作！
- en: '*Scipy is truly filled with amazingly useful tools for many applications. Check
    its documentation once from time to time.*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*Scipy 确实充满了许多非常有用的工具，适用于许多应用。偶尔查看一下其文档。*'
- en: '**Wrap up**'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'So remember:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以记住：
- en: '**if you only have X and Y vectors sampled from an unknown function f, use
    numpy’s *trapz*** to quickly and safely compute its integral using the trapezoidal
    rule. It’s probably the greatest compromise between complexity and accuracy.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果你只有从未知函数 f 中采样的 X 和 Y 向量，请使用 numpy 的 *trapz*** 以梯形法快速且安全地计算其积分。这可能是复杂性和准确性之间最好的折中选择。'
- en: '**if you have acces to f, use scipy’s *quad* function to compute the integral:**
    it’ll probably give you amazing results out of the box, and you can further customize
    the integration scheme with parameters if needed.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果你可以访问 f，请使用 scipy 的 *quad* 函数来计算积分：** 它可能会直接给你惊人的结果，如果需要，你还可以进一步自定义积分方案的参数。'
- en: In the next post, I’ll show how to compute integral of complex-valued functions,
    so stay tuned!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我会展示如何计算复值函数的积分，敬请期待！
- en: '**If you’re considering joining Medium, use this link to quiclky subscribe
    and become one of my refered member** :'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你考虑加入Medium，请使用这个链接快速订阅并成为我的推荐会员**：'
- en: '[](https://medium.com/@mocquin/membership?source=post_page-----22e9257a5836--------------------------------)
    [## Join Medium with my referral link - Yoann Mocquin'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mocquin/membership?source=post_page-----22e9257a5836--------------------------------)
    [## 使用我的推荐链接加入Medium - Yoann Mocquin'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium会员，你的部分会员费将用于你阅读的作者，同时你可以全面访问每个故事…
- en: medium.com](https://medium.com/@mocquin/membership?source=post_page-----22e9257a5836--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@mocquin/membership?source=post_page-----22e9257a5836--------------------------------)'
- en: '**and subscribe to get an notification when I publish new post:**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**并订阅以便在我发布新文章时获得通知：**'
- en: '[](https://mocquin.medium.com/subscribe?source=post_page-----22e9257a5836--------------------------------)
    [## Get an email whenever I publish !'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/subscribe?source=post_page-----22e9257a5836--------------------------------)
    [## 每次发布时都通过邮件通知我！'
- en: Get an email whenever I publish ! New publication will include data transformation,
    advanced plotting and simulation…
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每次发布时都通过邮件通知我！新发布的内容将包括数据变换、先进的绘图和模拟…
- en: mocquin.medium.com](https://mocquin.medium.com/subscribe?source=post_page-----22e9257a5836--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[mocquin.medium.com](https://mocquin.medium.com/subscribe?source=post_page-----22e9257a5836--------------------------------)'
- en: 'Finaly, you can check out some of my other post, on Fourier transform or linear
    algebra techniques for datascience:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以查看我的其他一些文章，关于傅里叶变换或数据科学的线性代数技术：
- en: '[](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----22e9257a5836--------------------------------)
    [## Fourier-transform for time-series : detrending'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----22e9257a5836--------------------------------)
    [## 时间序列的傅里叶变换：去趋势处理'
- en: Detrending your time-series might be a game-changer.
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对你的时间序列进行去趋势处理可能会改变游戏规则。
- en: 'towardsdatascience.com](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----22e9257a5836--------------------------------)
    [](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----22e9257a5836--------------------------------)
    [## PCA/LDA/ICA : a components analysis algorithms comparison'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----22e9257a5836--------------------------------)
    [](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----22e9257a5836--------------------------------)
    [## PCA/LDA/ICA：成分分析算法比较'
- en: Review the concepts and differences between these famous algorithms.
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复习这些著名算法的概念和差异。
- en: 'towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----22e9257a5836--------------------------------)
    [](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----22e9257a5836--------------------------------)
    [## PCA-whitening vs ZCA-whitening : a numpy 2d visual'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----22e9257a5836--------------------------------)
    [](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----22e9257a5836--------------------------------)
    [## PCA白化与ZCA白化：numpy 2D可视化'
- en: The process of whitening data consists in a transformation such that the transformed
    data has identity matrix as…
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据白化过程包括一种变换，使得变换后的数据具有单位矩阵作为…
- en: towardsdatascience.com](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----22e9257a5836--------------------------------)
    [](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----22e9257a5836--------------------------------)
    [## 300-times faster resolution of Finite-Difference Method using numpy
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----22e9257a5836--------------------------------)
    [](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----22e9257a5836--------------------------------)
    [## 使用numpy的有限差分法解决方案提高了300倍'
- en: Finite-difference method is a powerfull technique to solve complex problems,
    and numpy makes it fast !
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有限差分法是一种强大的技术来解决复杂问题，而numpy使其变得更快！
- en: towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----22e9257a5836--------------------------------)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----22e9257a5836--------------------------------)'
