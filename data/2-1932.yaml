- en: 'Streamlit and MongoDB: Storing Your Data in the Cloud'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamlit 和 MongoDB：在云端存储你的数据
- en: 原文：[https://towardsdatascience.com/streamlit-and-mongodb-storing-your-data-in-the-cloud-c28663313ade](https://towardsdatascience.com/streamlit-and-mongodb-storing-your-data-in-the-cloud-c28663313ade)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/streamlit-and-mongodb-storing-your-data-in-the-cloud-c28663313ade](https://towardsdatascience.com/streamlit-and-mongodb-storing-your-data-in-the-cloud-c28663313ade)
- en: '**Streamlit Cloud has no local storage so data created is lost when the app
    terminates — unless you use third-party storage like MongoDB**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Streamlit Cloud 没有本地存储，因此在应用程序终止时创建的数据会丢失——除非你使用类似 MongoDB 的第三方存储**'
- en: '[](https://medium.com/@alan-jones?source=post_page-----c28663313ade--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----c28663313ade--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c28663313ade--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c28663313ade--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----c28663313ade--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alan-jones?source=post_page-----c28663313ade--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----c28663313ade--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c28663313ade--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c28663313ade--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----c28663313ade--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c28663313ade--------------------------------)
    ·12 min read·Aug 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c28663313ade--------------------------------)
    ·12 分钟阅读·2023 年 8 月 25 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f90175fb704850839f3927b973483025.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f90175fb704850839f3927b973483025.png)'
- en: An vintage NoSQL database — Photo by [Jan Antonin Kolar](https://unsplash.com/@jankolar?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 经典 NoSQL 数据库——照片由 [Jan Antonin Kolar](https://unsplash.com/@jankolar?utm_source=medium&utm_medium=referral)
    提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Streamlit lets you deploy your public apps to their cloud for free, but any
    files or databases you create locally will cease to exist when the app finishes.
    This may not be the behaviour that you want, so we are going to explore a solution
    using MongoDB.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 允许你将公共应用程序部署到他们的云端，免费提供，但你在本地创建的任何文件或数据库将在应用结束时消失。这可能不是你想要的行为，因此我们将探讨使用
    MongoDB 的解决方案。
- en: For many apps losing this data is no problem. For example, if you have designed
    a dashboard that reads data from an external source any data that you generate
    is likely to be temporary and only needed while the app is running.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多应用程序来说，丢失这些数据并不成问题。例如，如果你设计了一个从外部源读取数据的仪表板，那么你生成的任何数据都可能是临时的，仅在应用运行期间需要。
- en: But, as I noted when developing my app for the article, [Simple Surveys with
    Streamlit](https://medium.com/towards-data-science/simple-surveys-with-streamlit-and-databutton-d027586f1c71),
    if the app itself is generating data that needs to be stored, it’s not so straightforward.
    In that app, I stored the data in a local file but in a cloud-based deployment
    these will cease to exist when the app stops running — the proper solution is
    to use an external data store.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如我在为文章开发应用程序时所提到的，[Simple Surveys with Streamlit](https://medium.com/towards-data-science/simple-surveys-with-streamlit-and-databutton-d027586f1c71)，如果应用程序本身生成需要存储的数据，这就不那么简单了。在那个应用程序中，我将数据存储在本地文件中，但在基于云的部署中，这些数据将在应用停止运行时消失——正确的解决方案是使用外部数据存储。
- en: We are going to see how we can achieve this with MongoDB, but there are alternatives.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何通过 MongoDB 实现这一点，但也有其他选择。
- en: What are the choices?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有哪些选择？
- en: 'In the Streamlit documentation, there are guides for connecting to various
    databases and cloud storage suppliers. They basically break down into three areas:
    data buckets such as AWS S3 and Google Cloud Storage, where you can store anything;
    SQL databases like Microsoft’s SQL Server, MySQL, PostgreSQL; and NoSQL databases
    of which Firestore and MongoDB are examples. For each type, you obviously need
    access to a server that hosts that particular database.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Streamlit 文档中，有关于连接各种数据库和云存储供应商的指南。它们基本上分为三个领域：数据桶，例如 AWS S3 和 Google Cloud
    Storage，你可以在其中存储任何东西；SQL 数据库，如微软的 SQL Server、MySQL、PostgreSQL；以及 NoSQL 数据库，Firestore
    和 MongoDB 就是其中的例子。对于每种类型，你显然需要访问托管该特定数据库的服务器。
- en: To be perfectly honest, I’m not the biggest fan of SQL. It seems to me that
    there is a disjoint between SQL code and Python that feels uncomfortable. (Having
    said that I definitely appreciate the power and convenience of SQL and have written
    about it [here](https://medium.com/towards-data-science/python-pandas-and-sqlite-a0e2c052456f),
    [here](https://medium.com/towards-data-science/duckdb-sqlite-for-data-analysis-a279bdf94399)
    and [here](https://medium.com/towards-data-science/sql-pandas-or-both-analysing-the-uk-electoral-system-24fa01d33d05).)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白说，我不是 SQL 的最大粉丝。对我来说，SQL 代码和 Python 之间的脱节让人感到不适。（话虽如此，我确实欣赏 SQL 的强大功能和便利，并且在[这里](https://medium.com/towards-data-science/python-pandas-and-sqlite-a0e2c052456f)、[这里](https://medium.com/towards-data-science/duckdb-sqlite-for-data-analysis-a279bdf94399)和[这里](https://medium.com/towards-data-science/sql-pandas-or-both-analysing-the-uk-electoral-system-24fa01d33d05)写过相关内容。）
- en: But, NoSQL databases like MongoDB feel like they fit more neatly into the Python
    way of doing things.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但 NoSQL 数据库如 MongoDB 感觉更符合 Python 的工作方式。
- en: I’m sure there are all sorts of arguments about speed, efficiency, ease of use,
    security and I don’t know what else. But I’m not going there. I’m going to use
    MongoDB because of my own likes and prejudices and you can decide for yourself
    whether it’s a good choice.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信关于速度、效率、易用性、安全性等各种争论都有。但我不打算讨论这些。我将使用 MongoDB，因为这是我的个人喜好和偏见，你可以自己决定它是否是一个好的选择。
- en: The survey app
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查应用程序
- en: I’m going to use a version of the app that I developed to illustrate simple
    survey construction in Streamlit. I intentionally wrote it with the idea of porting
    it to use a different data store so all of the data storage code is in a single
    library. The idea is that in order to move from using a local data store to a
    cloud-based database all you need to do is re-write the library.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用我开发的一个应用程序版本来演示在 Streamlit 中构建简单调查。我有意编写它以便于移植到不同的数据存储，因此所有的数据存储代码都在一个库中。其目的是，为了从使用本地数据存储转到基于云的数据库，你只需重新编写库即可。
- en: But first, we need access to a MongoDB database.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，我们需要访问 MongoDB 数据库。
- en: MongoDB Atlas
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MongoDB Atlas
- en: You can download MongoDB and run an instance of it on your own server. Or you
    can use a hosted service such as MongoDB Atlas. We’ll do the latter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载 MongoDB 并在自己的服务器上运行一个实例。或者，你可以使用像 MongoDB Atlas 这样的托管服务。我们将使用后者。
- en: '[MongoDB Atlas](https://www.mongodb.com/) is the first hosting service that
    comes up in a search — there are others but, I’m not aware of any others with
    a free tier, so this is what we will use. As a freemium service, you can start
    for nothing and this gives you pretty much all you need for a simple (or indeed,
    not so simple) application but limits you to 0.5 gigs of stored data.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[MongoDB Atlas](https://www.mongodb.com/) 是搜索中出现的第一个托管服务——虽然还有其他服务，但我不知道有哪个提供免费层，因此我们将使用这个。作为一种免费增值服务，你可以从零开始，这几乎满足了你对简单（或者实际上不那么简单）应用程序的所有需求，但限制你存储数据为
    0.5 GB。'
- en: To use MongoDB you need to sign up for an account (using the link above) and
    you should also read their comprehensive getting started guides in the resources
    tab on their webpage.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 MongoDB，你需要注册一个帐户（使用上面的链接），并且还应阅读他们网页上资源标签中的全面入门指南。
- en: 'Once you are set up you have the information to create a connection string
    like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好，你将拥有创建连接字符串的信息，如下所示：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Replace the `<user>`, `<password>` and `<cluster-url>` with your own details
    and keep this as a Streamlit secret.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 替换 `<user>`、`<password>` 和 `<cluster-url>` 为你自己的详细信息，并将其保留为 Streamlit 密钥。
- en: A MongoDB database
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个 MongoDB 数据库
- en: MongoDB consists of *clusters* of *databases.* Inside the databases are *collections*
    (a bit like a table) and inside the collections are *documents* (the actual data
    in a JSON-like format).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 由 *集群* 和 *数据库* 组成。数据库内有 *集合*（有点像表），集合内有 *文档*（以类似 JSON 的格式存储的实际数据）。
- en: For the sake of this tutorial, I’ve created one database and two collections.
    The collections will store the questions that comprise the survey and the results
    that will be generated by the users. I’ve called them `survey1` and `results1`—
    not very original, I know.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本教程的方便，我创建了一个数据库和两个集合。这些集合将存储构成调查的问题以及用户生成的结果。我将它们命名为 `survey1` 和 `results1`——我知道这并不特别有创意。
- en: In the results collection, each document will represent a question. In the results
    table, each document will represent an individual response to all of the questions
    in the survey.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果收集部分，每个文档将代表一个问题。在结果表中，每个文档将代表对调查中所有问题的单独回答。
- en: '![](../Images/39454eebce1fd58cfa907061c144fc20.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/39454eebce1fd58cfa907061c144fc20.png)'
- en: Screenshot of the **survey** *database*
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**调查** *数据库* 截图'
- en: Clicking on one of the collection names with show you the documents, if there
    are any.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点击其中一个集合名称将显示文档（如果有的话）。
- en: '![](../Images/f709b41a2864c7af6bb996964295fbdd.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f709b41a2864c7af6bb996964295fbdd.png)'
- en: Questions in the survey1 collection
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 调查1集合中的问题
- en: 'As you can see the entries are very similar to Python dictionaries. Note the
    `_id` field: this is a unique identifier and is obligatory for a MongoDB document;
    you can specify it when you create a document or, if not, MongoDB will automatically
    create it for you.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这些条目非常类似于 Python 字典。注意 `_id` 字段：这是一个唯一标识符，对于 MongoDB 文档来说是必需的；你可以在创建文档时指定它，否则
    MongoDB 会自动为你创建一个。
- en: The app
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序
- en: You can read about the details of the implementation in the original article.
    Here, we will concentrate on the database code. (There will be a link to all of
    the code on my [web page](http://alanjones2.github.io) shortly after this article
    is published.) But let’s quickly review what the app does.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在原始文章中阅读实现的详细信息。这里，我们将专注于数据库代码。（在本文发布后不久，将会有一个指向我[网页](http://alanjones2.github.io)上所有代码的链接。）但让我们快速回顾一下应用程序的功能。
- en: 'The original application consists of three pages:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 原始应用程序由三个页面组成：
- en: The first page allows a user to create a simple questionnaire by specifying
    individual questions and storing them.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个页面允许用户通过指定单独的问题并存储它们来创建一个简单的问卷。
- en: The second page presents the questionnaire to a user, collects the responses
    and adds them to previous responses.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个页面向用户展示问卷，收集响应并将其添加到之前的响应中。
- en: The third page presents the results; it reads the responses and performs some
    simple analysis on them — it draws an overview bar chart and lets the user select
    a single question for a closer look at the responses to that question. The data
    can also be downloaded as a CSV file.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个页面展示结果；它读取响应并对其进行一些简单的分析 —— 绘制概览柱状图，并让用户选择一个问题以更详细地查看该问题的响应。数据也可以作为 CSV 文件下载。
- en: Each of the pages uses a library, *DButils*, to access the data. In the original
    app, the data was stored as JSON files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个页面使用一个库，*DButils*，来访问数据。在原始应用程序中，数据存储为 JSON 文件。
- en: To keep things simple I’m going to concentrate on the presentation of the survey
    and the presentation of the data that has been gathered. This means we need to
    both read and write to the database. (My thinking here is that creating the survey
    might best be done locally and the result stored in a file that would be later
    uploaded to MongoDB in its entirety — so, for the sake of this article we won’t
    look at that aspect of the app .)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，我将专注于问卷的展示和收集的数据的展示。这意味着我们需要对数据库进行读写操作。（我的想法是，创建问卷可能最好在本地完成，并将结果存储在文件中，之后再将其完整上传到
    MongoDB —— 因此，本文将不涉及应用程序的这一方面。）
- en: The DB library
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库库
- en: 'The original library uses some helper functions but the functions used by this
    version of the app are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 原始库使用了一些辅助函数，但该版本应用程序使用的函数有：
- en: '`get_survey()` — this retrieves the entire questionnaire'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_survey()` — 这个函数用于检索整个问卷'
- en: '`append_results(value)` — this adds a new response to the existing ones'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append_results(value)` — 这个函数将新的响应添加到现有响应中'
- en: '`get_results()` — this retrieves all of the responses'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_results()` — 这个函数用于检索所有的响应'
- en: For the MongoDB version, we need a little preamble.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 MongoDB 版本，我们需要一点前置准备。
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We clearly need to import *Streamlit*; we also need *MongoClient* from the *pymongo*
    library. We then set up some convenience constants that hardwire the database
    and collection names into the code. This, of course, makes the library specific
    to this app which is something we might avoid if we wanted to use the library
    again in a different app. Rather we would set these values within the app and
    pass them to the library.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显然需要导入 *Streamlit*；我们还需要从 *pymongo* 库中导入 *MongoClient*。然后，我们设置一些便利常量，将数据库和集合名称硬编码到代码中。这当然使得库特定于这个应用程序，如果我们希望在不同的应用程序中再次使用该库，可能会避免这种情况。我们更倾向于在应用程序中设置这些值，并将其传递给库。
- en: The variable `uri` is the connection string that we created earlier and with
    this, we create a MongoDB client from which we can access our data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `uri` 是我们之前创建的连接字符串，通过它我们创建一个 MongoDB 客户端，从中可以访问我们的数据。
- en: Reading and writing data is quite easy. First, you need to specify the database
    and the collection within that database. You can then use functions like `find()`
    to read data, and `insert_one()` or `insert_many()` to add data to a collection.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 读取和写入数据非常简单。首先，你需要指定数据库以及该数据库中的集合。然后，你可以使用 `find()` 函数来读取数据，使用 `insert_one()`
    或 `insert_many()` 函数将数据添加到集合中。
- en: We’ll illustrate the simple use of read and write functions, here, but to use
    MongoDB in anger you will need to consult the documentation on their website,
    e.g. [How to Use Python with MongoDB](https://www.mongodb.com/languages/python).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里说明读取和写入函数的简单用法，但要想充分利用 MongoDB，你需要查阅他们网站上的文档，例如 [如何在 MongoDB 中使用 Python](https://www.mongodb.com/languages/python)。
- en: Reading data
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取数据
- en: To read all of the data from a MongoDB collection we use the `find()` function.
    The code below will read all of the data from one of our collections — the `key`
    parameter should be one of `SURVEY_KEY` or `RESULTS_KEY.`
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 MongoDB 集合中读取所有数据，我们使用 `find()` 函数。下面的代码将从我们其中一个集合中读取所有数据——`key` 参数应为 `SURVEY_KEY`
    或 `RESULTS_KEY`。
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The value returned from `find()` is a cursor that we could iterate over to retrieve
    the data. However, since we are only dealing with a small amount of data here,
    it is perfectly acceptable to convert it to a Python list so that all of the data
    is kept in memory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `find()` 返回的值是一个游标，我们可以遍历它以检索数据。然而，由于我们在这里处理的数据量很小，将其转换为 Python 列表以便所有数据都保存在内存中是完全可以接受的。
- en: But this is not quite what we want. As you will recall, each of the documents
    in a collection has a unique identifier that is automatically provided by MongoDB.
    For this application, we don’t need, or indeed want, that attribute. So, let’s
    look a little more closely at this function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是我们想要的。正如你会记得的，每个集合中的文档都有一个由 MongoDB 自动提供的唯一标识符。对于这个应用程序，我们不需要，也确实不想要那个属性。因此，让我们更仔细地查看这个函数。
- en: MongoDB queries and filters
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MongoDB 查询和过滤器
- en: As you might expect, we can perform queries on a MongoDB database. To facilitate
    this, the `find()` function can take parameters that modify its behaviour. Each
    of the parameters is optional and, as we have seen by leaving them unspecified
    we retrieve all of the data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所料，我们可以对 MongoDB 数据库进行查询。为了方便这一点，`find()` 函数可以接受修改其行为的参数。每个参数都是可选的，正如我们看到的，通过不指定这些参数，我们检索到所有的数据。
- en: Below we can see a snippet of a small survey. It is an array of all of the documents
    in the collection and each document consists of the id field plus three survey
    questions and a response to each question.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们可以看到一个小调查的片段。这是集合中所有文档的数组，每个文档由 id 字段加上三个调查问题和每个问题的回答组成。
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we only require the response to one of the questions we can add a query parameter.
    In the code below we specify that we want documents that contain the response
    ‘R’ to the question ‘What programming language do you use most?’. The parameter
    is in the form of a Python dictionary and you can see the response immediately
    below the code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只需要对某个问题的回答，可以添加一个查询参数。在下面的代码中，我们指定我们想要包含对问题“你使用最多的编程语言是什么？”的回答为 ‘R’ 的文档。该参数以
    Python 字典的形式提供，你可以在代码下方立即看到响应。
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you would expect, the return value is the set of documents that match the
    query — it’s the equivalent of the `SELECT * WHERE …` in SQL.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所预期的，返回值是与查询匹配的文档集合——它相当于 SQL 中的 `SELECT * WHERE …`。
- en: This gives us a useful insight into how MongoDB queries work but doesn’t solve
    the problem of omitting the id field. For this, we need a second parameter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了 MongoDB 查询如何工作的有用见解，但并未解决省略 id 字段的问题。为此，我们需要一个第二个参数。
- en: The second parameter is also in the form of a Python dictionary and acts as
    a filter, e.g. `{'_id':False}`. This tells MongoDB that we do not want the id
    field. We could specify a list of fields in this parameter, each labelled `True`
    or `False` depending on whether we want them included or not.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数也是 Python 字典的形式，并充当过滤器，例如 `{'_id':False}`。这告诉 MongoDB 我们不需要 id 字段。我们可以在此参数中指定字段列表，每个字段标记为
    `True` 或 `False`，取决于我们是否希望包含它们。
- en: 'If we were to add this second parameter to our previous query the result would
    be this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个第二个参数添加到之前的查询中，结果将是这样：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The same entries as before but with the id field omitted.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前相同的条目，但省略了 id 字段。
- en: OK, let’s go back to what we actually want, which is *all* of the documents
    but with the id field omitted. We still need to specify both parameters but the
    first one needs to tell MongoDB that we want all documents and we do this by passing
    an empty dictionary.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们回到我们真正想要的，即*所有*的文档，但省略 id 字段。我们仍然需要指定两个参数，但第一个参数需要告诉 MongoDB 我们想要所有文档，我们通过传递一个空字典来实现。
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This gives us what we want.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们想要的结果。
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we read the survey questions we want to do exactly the same thing — return
    all documents but without the id fields — so this function serves to read both
    databases. We just need to provide the correct key, either `SURVEY_KEY` or `RESULTS_KEY`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们读取调查问题时，我们想做的正是同样的事情——返回所有文档，但不包含 id 字段——因此这个函数用于读取两个数据库。我们只需要提供正确的键，无论是
    `SURVEY_KEY` 还是 `RESULTS_KEY`。
- en: Appending data
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 追加数据
- en: In this version of the app, we add data to the results collection, only. This
    is done as follows, using the `insert_one()` function.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的应用中，我们仅向结果集合中添加数据。具体方法如下，使用 `insert_one()` 函数完成。
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Again, we select the collection with the appropriate key and add the value which
    is in the form of a list of Python dictionaries representing the survey questions
    and the response to each one. MongoDB, as we mentioned before, automatically adds
    a unique id. We end up with a collection like the ones we have seen, above.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们选择具有适当键的集合，并添加以 Python 字典列表形式表示的调查问题及其每个回答的值。正如我们之前提到的，MongoDB 会自动添加唯一的
    id。我们最终得到的集合与我们上面看到的类似。
- en: If you need to append a list of documents to the collection the function `insert_many()`
    will do that job for you.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要向集合中追加一组文档，`insert_many()` 函数可以为你完成这项工作。
- en: The code
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码
- en: The complete code for the library is shown below — it’s really quite small!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 库的完整代码如下——实际上非常简洁！
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Conclusion
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: I hope that you can see that using MongoDB is pretty straightforward and provides
    a neat solution to the problem of permanent storage in a Streamlit app. We could
    have used a hosted SQL solution but, as I mentioned earlier, the NoSQL solution
    seems to me to be more in keeping with the Python way of doing things — the mapping
    of Python lists to MongoDB collections is completely natural.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你能看到，使用 MongoDB 是相当简单的，并且为 Streamlit 应用中的持久存储问题提供了一个简洁的解决方案。我们本可以使用托管的 SQL
    解决方案，但正如我之前提到的，NoSQL 解决方案在我看来更符合 Python 的处理方式——将 Python 列表映射到 MongoDB 集合是完全自然的。
- en: 'I should add one thing, though: the code in this article was written before
    the new `st.experimental_connection()` feature was introduced in Streamlit and
    this, or another class-based solution, may represent a better way forward for
    production code, particularly if MongoDB is going to be used over a number of
    different projects. However, for a one-off project like this, the approach that
    I have used here seems simple and adequate.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我应该补充一点：本文中的代码是在 Streamlit 引入新的 `st.experimental_connection()` 特性之前编写的，这种方法或其他基于类的解决方案可能会为生产代码提供更好的前景，特别是当
    MongoDB 将被用于多个不同的项目时。然而，对于像这样的临时项目，我在这里使用的方法似乎简单且足够。
- en: Thanks for reading and I hope it has been useful. If you have any queries about
    the code or my approach, or you have any comments, or if you just want to say
    ‘hello’, please add a comment below — I always reply.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，希望这对你有帮助。如果你对代码或我的方法有任何疑问，或有任何评论，或者只是想说“你好”，请在下面添加评论——我总是会回复。
- en: By the time you read this, there should be a link to the code for the complete
    app from my [website](http://alanjones2.github.io). There you can find links to
    other articles and books on Streamlit, Data Visualisation, Data Science and coding
    generally — please take a look.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读这篇文章时，我的网站上应该有指向完整应用代码的链接 [website](http://alanjones2.github.io)。在那里你可以找到其他关于
    Streamlit、数据可视化、数据科学和编程的一些文章和书籍——请查看一下。
