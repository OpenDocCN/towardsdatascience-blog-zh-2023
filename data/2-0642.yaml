- en: 'Data Filtering In Julia: Everything You Need To Know'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Julia中的数据过滤：你需要知道的一切
- en: 原文：[https://towardsdatascience.com/data-filtering-in-julia-everything-you-need-to-know-d0bf08a00328](https://towardsdatascience.com/data-filtering-in-julia-everything-you-need-to-know-d0bf08a00328)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/data-filtering-in-julia-everything-you-need-to-know-d0bf08a00328](https://towardsdatascience.com/data-filtering-in-julia-everything-you-need-to-know-d0bf08a00328)
- en: Everything you need to know when it comes to data filtering in Julia
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当涉及到在Julia中进行数据过滤时，你需要知道的一切
- en: '[](https://emmaccode.medium.com/?source=post_page-----d0bf08a00328--------------------------------)[![Emma
    Boudreau](../Images/f7201d012b733643d6e97957f73fd1fa.png)](https://emmaccode.medium.com/?source=post_page-----d0bf08a00328--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d0bf08a00328--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d0bf08a00328--------------------------------)
    [Emma Boudreau](https://emmaccode.medium.com/?source=post_page-----d0bf08a00328--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://emmaccode.medium.com/?source=post_page-----d0bf08a00328--------------------------------)[![Emma
    Boudreau](../Images/f7201d012b733643d6e97957f73fd1fa.png)](https://emmaccode.medium.com/?source=post_page-----d0bf08a00328--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d0bf08a00328--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d0bf08a00328--------------------------------)
    [Emma Boudreau](https://emmaccode.medium.com/?source=post_page-----d0bf08a00328--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d0bf08a00328--------------------------------)
    ·7 min read·Jul 11, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d0bf08a00328--------------------------------)
    ·阅读时间7分钟·2023年7月11日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/0d8be971b1ee16caf88f89d7affa2ca9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d8be971b1ee16caf88f89d7affa2ca9.png)'
- en: Photo by [Najib Kalil](https://unsplash.com/@nkalil?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Najib Kalil](https://unsplash.com/@nkalil?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: When it comes to Data Science, performing hypothesis tests, machine-learning,
    and even analytics, the most important component to getting results is having
    good data. There are a multitude of different requirements for data that often
    need to be imposed on that data. One technique that is incredibly common and is
    frequently used in the world of data is data filtering. Data filtering may either
    be the process of removing components of data that do not belong or the process
    of grabbing a sample that fits a certain parameter or number of parameters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学中，进行假设检验、机器学习甚至分析时，获得结果的最重要因素是拥有良好的数据。数据通常需要满足多种不同的要求。数据过滤是一种非常常见且在数据领域中经常使用的技术。数据过滤可以是移除不属于的数据组件的过程，也可以是获取符合某些参数或多个参数的样本的过程。
- en: We might say that an example of removing data when it does not belong with filtering
    is when we remove missing values from our data. This is an essential step in the
    Data Science process and is often done with filtering techniques. An example of
    grabbing a sample that fits some set parameters would be if we were trying to
    test statistical significance between being tall and bumping your head. We would
    filter out all of the data where people are short so that we had data of exclusively
    tall people to test with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，当我们从数据中移除不属于该数据的内容时，比如从数据中去除缺失值，这就是一种数据过滤。这是数据科学过程中的一个重要步骤，通常通过过滤技术来完成。一个符合某些设定参数的样本的例子是，如果我们试图测试身高和撞头之间的统计显著性。我们会过滤掉所有身材矮小的数据，以便只留下高个子的数据进行测试。
- en: 'There are numerous applications of this technique. Filtering may also be essential
    for performing some common Data Science tasks, so it is certainly something to
    be aware of. Luckily, filtering in Julia is relatively straightforward. If you
    would like to try the code in this article, here is a link to this overview in
    notebook format:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术有许多应用。过滤可能对于执行一些常见的数据科学任务也很重要，因此确实需要注意。幸运的是，在Julia中进行过滤相对简单。如果你想尝试本文中的代码，这里有一个以笔记本格式呈现的概述链接：
- en: '[](https://github.com/emmettgb/Emmetts-DS-NoteBooks/blob/master/Julia/data%20filtering%20in%20julia.ipynb?source=post_page-----d0bf08a00328--------------------------------)
    [## Emmetts-DS-NoteBooks/Julia/data filtering in julia.ipynb at master · emmettgb/Emmetts-DS-NoteBooks'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/emmettgb/Emmetts-DS-NoteBooks/blob/master/Julia/data%20filtering%20in%20julia.ipynb?source=post_page-----d0bf08a00328--------------------------------)
    [## Emmetts-DS-NoteBooks/Julia/data filtering in julia.ipynb 在 master 分支 · emmettgb/Emmetts-DS-NoteBooks'
- en: Random notebooks for various projects. Contribute to emmettgb/Emmetts-DS-NoteBooks
    development by creating an account…
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 各种项目的随机笔记本。通过创建帐户，参与 emmettgb/Emmetts-DS-NoteBooks 的开发……
- en: github.com](https://github.com/emmettgb/Emmetts-DS-NoteBooks/blob/master/Julia/data%20filtering%20in%20julia.ipynb?source=post_page-----d0bf08a00328--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/emmettgb/Emmetts-DS-NoteBooks/blob/master/Julia/data%20filtering%20in%20julia.ipynb?source=post_page-----d0bf08a00328--------------------------------)
- en: In order to really understand filtering in Julia, there are a few different
    things that we need to know about. **Anonymous functions** will often be provided
    as arguments, though any form of function as an argument including the `do` syntax
    is possible. In some cases, we might also utilize a type of `Vector` called a
    `**BitArray**` .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正理解 Julia 中的过滤，我们需要了解一些不同的内容。**匿名函数** 通常作为参数提供，尽管包括 `do` 语法在内的任何形式的函数作为参数都是可能的。在某些情况下，我们也可能使用一种叫做
    `**BitArray**` 的 `Vector` 类型。
- en: BitArray
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BitArray
- en: 'A `BitArray` is a `Vector` that contains only `Bool` type values. In Julia,
    `Array` is simply an alias for `Vector` . Generally in mathematics, we consider
    a `Vector` to specifically describe a 1-dimensional array… Usually a single column
    of features. In the case of the `BitArray` , we should note that this might also
    go by the name `BitVector` . This is what will be returned from most bitwise bool
    operators when broadcasted with `.`, such as `.==` :'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`BitArray` 是一个只包含 `Bool` 类型值的 `Vector`。在 Julia 中，`Array` 只是 `Vector` 的别名。通常在数学中，我们认为
    `Vector` 特指一维数组……通常是一列特征。在 `BitArray` 的情况下，我们应该注意到它也可能被称为 `BitVector`。这是大多数按位布尔操作符在使用
    `.` 进行广播时返回的结果，例如 `.==`：'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although this type is quite similar to a `Vector{Bool}` , it is important to
    remember this type does exist as it will be a return from the operators, for example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个类型与 `Vector{Bool}` 非常相似，但重要的是要记住，这种类型确实存在，因为它将是从操作符中返回的结果，例如。
- en: Anonymous functions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匿名函数
- en: 'Anonymous functions in Julia can certainly look a little difficult to grasp
    at first, but are relatively simple once the syntax is understood. If you would
    like to read a more in-depth overview of anonymous functions in Julia, here is
    an article I have written detailing this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Julia 中，匿名函数起初可能看起来有些难以理解，但一旦掌握了语法，它们相对简单。如果你想要阅读有关 Julia 中匿名函数的更深入概述，这里有一篇我写的文章：
- en: '[](/what-on-earth-is-an-anonymous-function-f8043eb845f3?source=post_page-----d0bf08a00328--------------------------------)
    [## What On Earth Is An Anonymous Function?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/what-on-earth-is-an-anonymous-function-f8043eb845f3?source=post_page-----d0bf08a00328--------------------------------)
    [## 什么是匿名函数？'
- en: Uncovering the ins and outs of anonymous functions and types in Julia
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 揭示 Julia 中匿名函数和类型的方方面面
- en: towardsdatascience.com](/what-on-earth-is-an-anonymous-function-f8043eb845f3?source=post_page-----d0bf08a00328--------------------------------)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/what-on-earth-is-an-anonymous-function-f8043eb845f3?source=post_page-----d0bf08a00328--------------------------------)
- en: Anonymous functions are just like normal functions, only the function is not
    defined under a type. Allow me to make that make more sense by explaining a bit
    more about Julia functions. Whenever we create a function normally in Julia, this
    function becomes defined under a name and has a type. This is a singleton, and
    this type has methods that are registered with the type of (`typeof`) this method
    inside of them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数与普通函数类似，只是函数没有在某个类型下定义。让我通过进一步解释 Julia 函数来使这个概念更清晰。每当我们在 Julia 中正常创建一个函数时，这个函数会被定义在一个名称下，并具有一个类型。这是一个单例，这个类型拥有与该方法类型（`typeof`）注册的方法。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can access the methods of a new function using the `methods` method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `methods` 方法来访问新函数的方法。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Whenever we create an anonymous function, the function name becomes undefined
    — we can only have one method for an anonymous function for this reason. This
    is useful if we just want a function to do something quick for us, for example,
    filtering. To write an anonymous function, we use the logical right operator.
    In a lot of ways, it is a lot like if we replaced the `=` in a normal function
    declaration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们创建一个匿名函数时，函数名称会变得未定义——出于这个原因，我们只能为匿名函数拥有一个方法。如果我们只想让一个函数快速完成某事，例如过滤，这一点非常有用。要编写匿名函数，我们使用逻辑右操作符。在很多方面，这就像我们将正常函数声明中的
    `=` 替换了一样。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The arguments for the anonymous function go on the left side of the operator,
    the function itself goes on the right. We could use an annotation to make this
    a bit more clear:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数的参数放在操作符的左侧，函数本身放在右侧。我们可以使用注释来使这一点更加清晰：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: One of the great things about Julia is the language’s extensibility. With Julia,
    all of the modules can utilize the functions provided by the `Base` module to
    add new methods. In other words, modules can blend seemlessly with the `Base`
    and often be treated like `Base` types. This means that if we learn how these
    methods work with `Base` we will probably be able to carry a lot of that knowledge
    with us into other modules. Today we will demonstrate this by starting with `Base`
    and then expanding into filtering a different structure from a dependency, a `DataFrame`
    from `DataFrames` .
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的一个伟大之处在于语言的可扩展性。借助 Julia，所有模块都可以利用 `Base` 模块提供的函数来添加新方法。换句话说，模块可以无缝地与
    `Base` 结合，并且通常像 `Base` 类型一样被处理。这意味着如果我们学习了这些方法如何与 `Base` 一起工作，我们可能会将很多这方面的知识带到其他模块中。今天我们将通过从
    `Base` 开始，然后扩展到来自 `DataFrames` 的 `DataFrame` 过滤不同结构，来演示这一点。
- en: Filtering base types
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤基本类型
- en: 'There are a few different techniques that can be used to filter a simple `Vector`
    . One feature that I think is relatively new to Julia is the ability to provide
    conditional masks as indexes. I am not sure how long this has been included with
    `Base` , but this is certainly an awesome feature, as I love conditional masks.
    To create a conditional mask, we need to make one of the `BitArrays` we talked
    about earlier. In this instance, we will broadcast a comparison operator again.
    Here we will filter any value above 14 out of x:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的技术可以用来过滤简单的 `Vector`。我认为 Julia 中相对较新的一个特性是能够提供条件掩码作为索引。我不确定这个功能在 `Base`
    中已经存在多久了，但这无疑是一个很棒的特性，因为我喜欢条件掩码。要创建条件掩码，我们需要制作一个之前提到的 `BitArrays`。在这种情况下，我们将再次广播一个比较操作符。在这里，我们将过滤出
    x 中大于 14 的任何值：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Alternatively, we could utilize the `filter` methods. These are `filter` and
    `filter!` . These two methods do the same exact thing, the only difference is
    that `filter!` is a mutating method. This is precisely what the `!` in function
    names is meant to represent. I find that to be a really cool standard as it does
    certainly make it easier to discern when things are being mutated and when they
    are not. I think that is a great thing to know, especially when it comes to Data
    Science. The `filter` method is provided with a `Function` as the first positional
    argument and then our `Vector` as the second positional argument. This might change
    slightly if the type is not a `Vector` , so keep that in mind.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以利用 `filter` 方法。这些方法有 `filter` 和 `filter!`。这两个方法做完全相同的事情，唯一的区别是 `filter!`
    是一个变异方法。这正是函数名中的 `!` 所代表的含义。我觉得这是一个非常酷的标准，因为它确实使我们更容易区分何时数据被变异，何时没有。我认为这是一个非常值得了解的事情，特别是在数据科学方面。`filter`
    方法提供了一个 `Function` 作为第一个位置参数，然后是我们的 `Vector` 作为第二个位置参数。如果类型不是 `Vector`，这种情况可能会有所变化，所以请记住这一点。
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Given that we used `filter` instead of `filter!` here, we would need to set
    `x` equal to the return to enforce these changes. Another thing we can filter
    using this technique is dictionaries. Rather than providing the type of each element
    in the `Vector` , we instead work with a `Pair` .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这里使用的是 `filter` 而不是 `filter!`，我们需要将 `x` 设置为返回值以强制执行这些更改。我们还可以使用这种技术过滤字典。与其提供
    `Vector` 中每个元素的类型，不如使用 `Pair`。
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Because the function is the first positional argument, this also opens up the
    ability to utilize the do syntax, so definitely keep this in mind.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因为函数是第一个位置参数，这也开启了利用 `do` 语法的能力，所以一定要记住这一点。
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Filtering dataframes
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤数据框
- en: Another common type of structure that might need to be filtered is the `DataFrame`
    . This is a bit different because it is a dependency and a module, not just a
    portion of `Base` .
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能需要过滤的常见结构是`DataFrame`。这有点不同，因为它是一个依赖项和模块，而不仅仅是`Base`的一部分。
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `filter` method when used on a `DataFrame` will provide a `DataFrameRow`
    to the function. This is a cool type, we can index it pretty easily and this makes
    filtering a breeze.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`DataFrame`上使用`filter`方法时，它会向函数提供一个`DataFrameRow`。这是一个很酷的类型，我们可以很容易地对其进行索引，这使得过滤变得轻而易举。
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That really is all there is to it, and with the preexisting knowledge from `Base`
    , it might be hard to find things that are not possible to filter with this technique!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实就是全部内容，结合`Base`中的现有知识，可能很难找到无法用这种技术过滤的内容！
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Data filtering is an essential step in the process of working with data. Filtering
    techniques allow us to remove observations that might be impeding any sort of
    real analysis of modeling. Luckily, Julia being a Scientific computing language
    has considered the importance of this and the `Base` tools provided by the language
    work pretty well for this! Furthered, Julia is built in a way where the functions
    that comprise the `Base` can have additional methods added in order to add functionality.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 数据过滤是处理数据过程中的一个重要步骤。过滤技术使我们能够移除可能妨碍任何实际建模分析的观察数据。幸运的是，作为科学计算语言的Julia考虑了这一点，语言提供的`Base`工具对此效果很好！此外，Julia的构建方式允许在`Base`中包含的函数添加额外的方法以增加功能。
- en: What this creates is one of my favorite things about Julia. It is common in
    the programming world to have familiarity with a certain ecosystem or set of packages.
    Just because I know how to use NumPy does not mean I know how to use Dask, for
    example. With Julia, things are bit different because it is entirely possible
    that a Dask or NumPy equivalent would both use the same method. We see this in
    the application of `filter` on `DataFrames` . This helps to save cost on singletons
    and also helps the users of the packages to reuse old knowledge. Needless to say,
    Julia is a great language to work with data in — and this is no different in the
    application of data filtering.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这创造了我最喜欢的Julia特点之一。在编程世界中，熟悉某个生态系统或一组包是很常见的。例如，知道如何使用NumPy并不意味着知道如何使用Dask。在Julia中情况略有不同，因为完全可能Dask或NumPy的等效方法会使用相同的方法。我们在`DataFrames`上的`filter`应用中可以看到这一点。这有助于节省单例的成本，也帮助包的用户重用旧知识。不用多说，Julia是一个处理数据的出色语言——数据过滤的应用也不例外。
