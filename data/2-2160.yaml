- en: Two Powerful Python Features to Streamline Your Code and Make It More Readable
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两个强大的 Python 特性，以简化你的代码并提高可读性
- en: 原文：[https://towardsdatascience.com/two-powerful-python-features-to-streamline-your-code-and-make-it-more-readable-51240f11d1a](https://towardsdatascience.com/two-powerful-python-features-to-streamline-your-code-and-make-it-more-readable-51240f11d1a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/two-powerful-python-features-to-streamline-your-code-and-make-it-more-readable-51240f11d1a](https://towardsdatascience.com/two-powerful-python-features-to-streamline-your-code-and-make-it-more-readable-51240f11d1a)
- en: Enhance your code quality with the beauty of match statements and object slicing.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过匹配语句和对象切片提升你的代码质量。
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----51240f11d1a--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----51240f11d1a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51240f11d1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51240f11d1a--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----51240f11d1a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://murtaza5152-ali.medium.com/?source=post_page-----51240f11d1a--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----51240f11d1a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51240f11d1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51240f11d1a--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----51240f11d1a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51240f11d1a--------------------------------)
    ·8 min read·Sep 29, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51240f11d1a--------------------------------)
    ·8 分钟阅读·2023年9月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4c2222582de9c851f5249d9cc8877197.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c2222582de9c851f5249d9cc8877197.png)'
- en: Photo by [Kevin Ku](https://unsplash.com/@ikukevk?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Kevin Ku](https://unsplash.com/@ikukevk?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: There is a reason Python’s popularity has spread far and wide in the current
    tech landscape. Among modern programming languages, it is perhaps the most accessible
    for novices. And with that accessibility, it also offers plenty of power. Web
    development, data science, scientific computing — you can accomplish many a task
    with Python.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在当前技术领域的流行程度如此广泛是有原因的。在现代编程语言中，它可能是对新手最为友好的。凭借这种可访问性，它也提供了强大的功能。网页开发、数据科学、科学计算——你可以用
    Python 完成许多任务。
- en: As Python has advanced over the years, its developers have put great amounts
    of effort into maintaining its readability and conciseness. Though many of its
    features may require a bit of extra effort to learn, the return on clarity and
    beauty in your code is beyond worth it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Python 多年的发展，其开发者们付出了巨大的努力，以保持其可读性和简洁性。尽管许多特性可能需要额外的学习努力，但代码的清晰度和美观度是绝对值得的。
- en: 'In this article, we’ll look at two such features: match statements and string/list
    slicing. We’ll go over how each one works in detail, as well as consider some
    examples to build familiarity with the syntax and semantics.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将深入探讨两个这样的特性：匹配语句和字符串/列表切片。我们将详细介绍每个特性的工作原理，并考虑一些示例，以加深对语法和语义的理解。
- en: Now then, let’s get into it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨一下吧。
- en: Match Statements
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配语句
- en: Match statements — available in Python as of version 3.10 — are a way of checking
    equality of conditions and performing some action based on the conditions [1].
    If you are coming from another language such as C or JavaScript, you might already
    be familiar with the concept as *switch* statements.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配语句——从 Python 3.10 版本开始可用——是一种检查条件的相等性并根据条件执行某些操作的方法[1]。如果你来自其他语言如 C 或 JavaScript，你可能已经熟悉这种概念，它们被称为*switch*
    语句。
- en: In principle, match statements are similar to conditional statements, but they
    do provide a couple of useful advantages. Let’s start by looking at the basic
    structure via a comparison with conditionals; then, we’ll talk about the advantages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，匹配语句类似于条件语句，但它们确实提供了一些有用的优势。让我们首先通过与条件语句的比较来看其基本结构，然后再讨论这些优势。
- en: 'You might write the following conditional statement to check someone’s name
    for a bank account:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会写出以下条件语句来检查某人的银行账户名称：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Translated to a match statement, this would look like the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为匹配语句后，它将如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s break this down line by line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析：
- en: The first line is the same — we just define the `name` variable.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行是一样的——我们只是定义了 `name` 变量。
- en: The keyword `match` is used to start a match statement.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字 `match` 用于启动匹配语句。
- en: Then, for the individual conditions, rather than explicitly checking equality,
    we use the `case` statement to effectively pattern match. Thus, you can think
    of `case "Yen"` as checking for the case that `name`, which we are matching, is
    equal to `"Yen"`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，对于每个条件，我们使用 `case` 语句来有效地进行模式匹配，而不是明确地检查等式。因此，你可以把 `case "Yen"` 看作是在检查 `name`，即我们正在匹配的内容，是否等于
    `"Yen"`。
- en: Finally, the last case is the wildcard case. This is specified by an underscore
    (`_`) and is effectively the `else` case.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，最后一个 case 是通配符 case。它由下划线（`_`）指定，实际上是 `else` 情况。
- en: Now, you might ask — why use this over a traditional conditional statement?
    I initially had the same question, and would even become annoyed when people used
    match instead of standard if-else statements. However, there are advantages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会问——为什么使用这个而不是传统的条件语句？我最初也有同样的问题，甚至对人们使用匹配语句而不是标准的 if-else 语句感到恼火。然而，确实有一些优势。
- en: The first one is simply that it is a cleaner way to achieve the same goal. This
    may seem like a cop-out reason, but it’s actually fairly important. The entire
    spirit of Python lies in writing clean, concise code (if you don’t believe me,
    type `import this` into your Python interpreter and hit enter).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事是，它是实现相同目标的一种更简洁的方法。这看起来可能是个托词，但实际上相当重要。Python 的整个精神在于编写干净、简洁的代码（如果你不相信我，试着在你的
    Python 解释器中输入`import this`并按下回车）。
- en: Especially with a large number of conditions, it can be cumbersome to parse
    a long chain of `if` and `elif` statements. Using match statements cleans up the
    code and makes it easier for a fellow programmer to read — a worthy achievement
    for any Python programmer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是当条件数量较多时，解析长链的 `if` 和 `elif` 语句可能会很繁琐。使用匹配语句可以清理代码，并使同事程序员更容易阅读——这是任何 Python
    程序员值得追求的成就。
- en: 'Beyond this, match statements can also deconstruct certain objects directly,
    removing the need to do so manually with conditional statements. In practice,
    this means two things:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，匹配语句还可以直接解构某些对象，从而不再需要手动使用条件语句。实际上，这意味着两件事：
- en: You can automatically check types (removing the need for manual checks).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以自动检查类型（省去了手动检查的需要）。
- en: You can automatically access attributes of an object within each case.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在每个 `case` 中自动访问对象的属性。
- en: 'Let’s take a look at an example. Say we have the following code, which defines
    two classes for different types of cars:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。假设我们有以下代码，定义了两种不同类型的汽车类：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have defined an instance of `Subaru` above. Now, we want to write code that
    checks what type a car is and prints out some attribute of it. Using traditional
    conditional statements, we could do so as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面定义了一个 `Subaru` 实例。现在，我们想编写代码来检查汽车的类型，并打印出其某些属性。使用传统的条件语句，我们可以这样做：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For our `car` variable above, this will print out `"Subaru Outback"`. If we
    translate this to a match statement, we get the following, simplified code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们上面的 `car` 变量，这将打印出 `"Subaru Outback"`。如果我们将其转换为匹配语句，将得到以下简化的代码：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Match’s pattern-matching functionality enables Python to automatically check
    the type within the `case` statement, and further makes it so that the attributes
    of the object can be accessed directly. Note that this is made possible by the
    inclusion of the `__match_args__` attribute in the class definition, as it names
    the positional arguments for Python. The recommendation in the Python documentation
    is for the pattern here to mimic the one used in the `__init__` constructor when
    assigning attributes to `self`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配的模式匹配功能使 Python 能够在 `case` 语句中自动检查类型，并进一步使对象的属性可以直接访问。注意，这得益于在类定义中包含 `__match_args__`
    属性，它为 Python 命名了位置参数。Python 文档中的推荐是使模式在为 `self` 分配属性时模拟 `__init__` 构造函数中使用的模式。
- en: The match version of the code is both easier to read and less cumbersome to
    write. This is a fairly small example, but as situations get more complex, [strings
    of conditional statements can get increasingly more convoluted](https://peps.python.org/pep-0622/#rationale-and-goals)
    [2].
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配版本的代码更容易阅读且编写起来不那么繁琐。这是一个相当小的例子，但随着情况变得更加复杂，[条件语句的字符串可能变得越来越复杂](https://peps.python.org/pep-0622/#rationale-and-goals)
    [2]。
- en: All of that said, do keep in mind that this feature is only available starting
    in Python version 3.10\. As such, you should encode that whatever system, application,
    or project you are writing code for does not exist in a code base that must be
    compatible with an older version of Python.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，请记住，这一功能仅在 Python 3.10 及其之后的版本中可用。因此，你需要确保你编写代码的系统、应用程序或项目不会在需要兼容旧版 Python
    的代码库中存在。
- en: As long as that condition is met, consider using match statements. It might
    require a bit of effort, but your code will be better off for it in the long run.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 只要满足那个条件，就考虑使用 match 语句。虽然这可能需要一点努力，但从长远来看，你的代码将会更好。
- en: String and List Slicing
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串和列表切片
- en: You may already be somewhat familiar with this feature, but I’m willing to bet
    you aren’t using it to its full potential. Let’s start with a quick review, and
    then look into some more complex uses.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对这个功能有一些了解，但我敢打赌你还没有完全发挥它的潜力。让我们从快速回顾开始，然后深入了解一些更复杂的用法。
- en: 'In its simplest form, slicing refers to a concise syntax that lets you extract
    part of a string or list in Python [3]. Here is a small example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的形式中，切片指的是一种简洁的语法，让你可以在 Python [3] 中提取字符串或列表的一部分。这里有一个小例子：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The syntax requires using square brackets which contain the start and stop index
    separated by a colon. Remember that Python uses 0-indexing, so `1` corresponds
    to `'e'` here. Additionally, note that slicing is exclusive of the right index,
    so it goes up to `3` but does **not** include it, hence why the output is `'el'`
    and not `'ell'`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 语法要求使用包含起始和结束索引的方括号，并且索引之间用冒号分隔。请记住，Python 使用的是0索引，所以这里`1`对应于`'e'`。此外，切片不包括右索引，因此它到达`3`但**不**包括它，因此输出是`'el'`而不是`'ell'`。
- en: 'If you want to just start from the beginning or go all the way to the end of
    a string or list, you can leave the corresponding index blank:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想从开始处开始或一直到字符串或列表的末尾，你可以将相应的索引留空：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Leaving both indices blank gives you a copy of the entire object:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 留下两个索引为空会得到整个对象的副本：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that with both lists and strings, slicing defines and returns a brand
    new object distinct from the original:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在列表和字符串中，切片定义并返回一个全新的对象，这个对象与原始对象不同：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, let’s get to the good stuff. With slicing, you can also use negative indices.
    If you’re unfamiliar with negative indexing, it basically enables you to start
    counting from the end of a list or string. The last letter corresponds to `-1`,
    the second-to-last letter corresponds to `-2`, and so on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入重点。通过切片，你还可以使用负数索引。如果你不熟悉负数索引，它基本上允许你从列表或字符串的末尾开始计数。最后一个字母对应`-1`，倒数第二个字母对应`-2`，依此类推。
- en: 'This can simplify code by removing the need to manually compute lengths. To
    get everything but the last letter of a string, for instance, you can just do
    this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过省去手动计算长度来简化代码。例如，要获取字符串的所有内容但不包括最后一个字母，你可以这样做：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, one of the most overlooked features of slicing is that you can also
    specify a third number — which specifies a “jump” of sorts. This is easiest to
    explain with an example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，切片最被忽视的功能之一是你还可以指定第三个数字——这指定了一种“跳跃”。用一个例子来解释最简单：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s break down what’s happening above:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下上面的内容：
- en: For clarity, we define a list with more elements than the original one we had.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了清楚起见，我们定义了一个包含更多元素的列表，而不是我们之前的原始列表。
- en: In the list slice, the first two numbers are `1` and `-1`. As we saw above,
    this does away with the first and last elements of the object being sliced — `my_long_list`,
    in this case.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表切片中，前两个数字是`1`和`-1`。正如我们上面看到的，这会去掉被切片对象——在这种情况下是`my_long_list`的第一个和最后一个元素。
- en: Finally, we put a `2` as the final number after an additional colon. This tells
    Python that we want to slice the list from the start to the end index, but only
    keep every other item. Putting a `3` would give us every third item, putting a
    `4` would give us every fourth item, and so on.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们在额外的冒号后面放一个`2`作为最终数字。这告诉 Python 我们希望从开始到结束索引切片，但只保留每隔一个的项。放一个`3`会给我们每隔第三个项，放一个`4`会给我们每隔第四个项，依此类推。
- en: 'Combining the two things above, we can also slice lists to get the elements
    backward:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述两点结合起来，我们还可以对列表进行切片以获得反向元素：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And there you have it — everything you need to know about list slicing. When
    you get creative with the syntax described above, you can achieve some really
    cool behavior. For example, the following is one of the slickest ways to reverse
    a list in Python, courtesy of list slicing:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是了——关于列表切片的所有知识。当你对上述语法进行创意应用时，可以实现一些非常酷的行为。例如，以下是利用列表切片在 Python 中反转列表的最妙方式之一：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Do you see how it works? As an exercise, you should review each feature of
    list slicing above and try to break down the code yourself. **Hint: Take a look
    at what it means when we leave the start and end index blank.**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到它是如何工作的了吗？作为一个练习，你应该复习上述列表切片的每个特性，并尝试自己分解代码。**提示：看看当我们留空开始和结束索引时意味着什么。**
- en: Now then, let’s talk about why you should learn this stuff at all.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们谈谈为什么你应该学习这些内容。
- en: As a data scientist, why is this useful?
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为数据科学家，这有什么用？
- en: Just generally speaking, it’s important to consider readability and cleanliness
    of code when writing in Python. Using the features above will go a long way in
    helping you achieve this. As we already discussed, match statements have a couple
    of meaningful advantages over conditional statements in this regard. As for list
    slicing, it is much, much cleaner than trying to achieve the same behavior using
    some kind of convoluted loop.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在用 Python 编写代码时，考虑代码的可读性和整洁性很重要。使用上述特性将大有帮助。如我们所讨论的，匹配语句在这方面比条件语句有几个显著的优势。至于列表切片，它比尝试使用复杂循环实现相同行为要整洁得多。
- en: But going beyond these broader benefits, let’s talk data science specifically
    for a moment.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但超越这些广泛的好处，让我们专门谈谈数据科学。
- en: Practically speaking, if you’re working as a data scientist, there is a fair
    probability that your formal training was not in computer science, but rather
    in something like statistics, mathematics, or even just data science itself if
    you were lucky enough to find such a program. In such programs, computer science
    is generally taught as a tool.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际角度看，如果你作为数据科学家工作，你的正式培训很可能不是计算机科学，而是统计学、数学，或者如果你有幸找到这样的项目，可能是数据科学本身。在这些项目中，计算机科学通常作为工具来教授。
- en: The focus is on learning the basic principles of programming in a way that teaches
    you enough to process data, run analyses, and build models at scale. As such,
    there is not a huge amount of time left to learn topics like “useful Python-specific
    syntactic features.” Heck, such topics are often overlooked even in a pure computer
    science class.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重点是以一种教你足够知识以处理数据、进行分析和大规模构建模型的方式来学习编程基本原理。因此，没有大量时间去学习像“有用的 Python 特定语法特性”这样的主题。实际上，这些主题在纯计算机科学课程中也常常被忽视。
- en: However, using these features can take your code to the next level, helping
    you stand out among your brilliant colleagues and deliver better results to your
    clients. Match statements and object slicing are two powerful examples, [but there
    are a host more that Python has to offer](/3-underappreciated-skills-to-make-you-a-next-level-python-programmer-a20de69b29f2)
    which I encourage you to explore.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用这些特性可以将你的代码提升到一个新水平，帮助你在才华横溢的同事中脱颖而出，并为客户提供更好的结果。匹配语句和对象切片是两个强大的例子，[但 Python
    还有很多其他的特性可以提供](/3-underappreciated-skills-to-make-you-a-next-level-python-programmer-a20de69b29f2)，我鼓励你去探索。
- en: May the code be ever in your favor — until next time, friends.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 愿代码永远对你有利——下次见，朋友们。
- en: '**Want to excel at Python?** [**Get exclusive, free access to my simple and
    easy-to-read guides here**](https://witty-speaker-6901.ck.page/0977670a91)**.
    Want to read unlimited stories on Medium? Sign up with my referral link below!**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**想要在 Python 中脱颖而出？** [**点击这里获取我简单易读的独家免费指南**](https://witty-speaker-6901.ck.page/0977670a91)**。想在
    Medium 上阅读无限故事？使用下面的推荐链接注册吧！**'
- en: '[](https://medium.com/@murtaza5152-ali/membership?source=post_page-----51240f11d1a--------------------------------)
    [## Join Medium with my referral link - Murtaza Ali'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@murtaza5152-ali/membership?source=post_page-----51240f11d1a--------------------------------)
    [## 使用我的推荐链接加入 Medium - Murtaza Ali'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的会员费用的一部分将用于支持你阅读的作者，并且你可以完全访问每个故事……
- en: medium.com](https://medium.com/@murtaza5152-ali/membership?source=post_page-----51240f11d1a--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@murtaza5152-ali/membership?source=post_page-----51240f11d1a--------------------------------)'
- en: References
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] [https://docs.python.org/3.10/whatsnew/3.10.html#syntax-and-operations](https://docs.python.org/3.10/whatsnew/3.10.html#syntax-and-operations)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://docs.python.org/3.10/whatsnew/3.10.html#syntax-and-operations](https://docs.python.org/3.10/whatsnew/3.10.html#syntax-and-operations)'
- en: '[2] [https://peps.python.org/pep-0622/#rationale-and-goals](https://peps.python.org/pep-0622/#rationale-and-goals)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [https://peps.python.org/pep-0622/#rationale-and-goals](https://peps.python.org/pep-0622/#rationale-and-goals)'
- en: '[3] [https://docs.python.org/3/c-api/slice.html](https://docs.python.org/3/c-api/slice.html)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] [https://docs.python.org/3/c-api/slice.html](https://docs.python.org/3/c-api/slice.html)'
