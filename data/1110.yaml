- en: Custom YOLOv7 Object Detection with TensorFlow.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 YOLOv7 对象检测与 TensorFlow.js
- en: 原文：[https://towardsdatascience.com/training-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530?source=collection_archive---------6-----------------------#2023-03-28](https://towardsdatascience.com/training-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530?source=collection_archive---------6-----------------------#2023-03-28)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/training-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530?source=collection_archive---------6-----------------------#2023-03-28](https://towardsdatascience.com/training-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530?source=collection_archive---------6-----------------------#2023-03-28)
- en: '![](../Images/9b4d0e99afd60aaf9cf2530e000da490.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b4d0e99afd60aaf9cf2530e000da490.png)'
- en: Photo by [Martijn Baudoin](https://unsplash.com/@martijnbaudoin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/4z0-2mQE7io?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Martijn Baudoin](https://unsplash.com/@martijnbaudoin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    拍摄，来源于 [Unsplash](https://unsplash.com/photos/4z0-2mQE7io?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Training a custom YOLOv7 model in PyTorch and converting it to TensorFlow.js
    for real-time offline detection on the browser
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 PyTorch 中训练自定义 YOLOv7 模型，并将其转换为 TensorFlow.js 以实现浏览器上的实时离线检测
- en: '[](https://medium.com/@zaninihugo?source=post_page-----96a5ecd7a530--------------------------------)[![Hugo
    Zanini](../Images/cbda793f1cf82f34b29c6e136556361d.png)](https://medium.com/@zaninihugo?source=post_page-----96a5ecd7a530--------------------------------)[](https://towardsdatascience.com/?source=post_page-----96a5ecd7a530--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----96a5ecd7a530--------------------------------)
    [Hugo Zanini](https://medium.com/@zaninihugo?source=post_page-----96a5ecd7a530--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@zaninihugo?source=post_page-----96a5ecd7a530--------------------------------)[![Hugo
    Zanini](../Images/cbda793f1cf82f34b29c6e136556361d.png)](https://medium.com/@zaninihugo?source=post_page-----96a5ecd7a530--------------------------------)[](https://towardsdatascience.com/?source=post_page-----96a5ecd7a530--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----96a5ecd7a530--------------------------------)
    [Hugo Zanini](https://medium.com/@zaninihugo?source=post_page-----96a5ecd7a530--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8f4c63386bac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530&user=Hugo+Zanini&userId=8f4c63386bac&source=post_page-8f4c63386bac----96a5ecd7a530---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----96a5ecd7a530--------------------------------)
    ·6 min read·Mar 28, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F96a5ecd7a530&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530&user=Hugo+Zanini&userId=8f4c63386bac&source=-----96a5ecd7a530---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F8f4c63386bac&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530&user=Hugo+Zanini&userId=8f4c63386bac&source=post_page-8f4c63386bac----96a5ecd7a530---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----96a5ecd7a530--------------------------------)
    ·6 分钟阅读·2023年3月28日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F96a5ecd7a530&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530&user=Hugo+Zanini&userId=8f4c63386bac&source=-----96a5ecd7a530---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F96a5ecd7a530&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530&source=-----96a5ecd7a530---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F96a5ecd7a530&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Ftraining-a-custom-yolov7-in-pytorch-and-running-it-directly-in-the-browser-with-tensorflow-js-96a5ecd7a530&source=-----96a5ecd7a530---------------------bookmark_footer-----------)'
- en: 'Recently, I open-sourced an implementation of [**YOLOv7 in Tensorflow.js**](https://github.com/hugozanini/yolov7-tfjs?linkId=8607585)
    and the most common question I received was:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我开源了一个[**YOLOv7在Tensorflow.js中的实现**](https://github.com/hugozanini/yolov7-tfjs?linkId=8607585)，我收到的最常见问题是：
- en: How did you **convert** the model from PyTorch to Tensorflow**.js**?
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你是如何将模型从PyTorch**转换**为Tensorflow**.js**的？
- en: This post will cover this process by solving a real-world problem using a custom
    **YOLOv7** model running **directly on the browser and offline**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将通过使用自定义**YOLOv7**模型在**浏览器和离线环境下直接运行**来解决实际问题。
- en: The industry we will tackle is **physical retail**. Besides the digitalization
    that happened recently — mostly during the pandemic — [the physical store remains
    the customers' most preferred shopping destination](https://www.forbes.com/sites/sap/2022/02/07/retail-trends-2022-in-search-of-the-ultimate-customer-experience/?sh=13a0809c52ad).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解决的行业是**实体零售**。除了最近发生的数字化转型——主要是在疫情期间—— [实体店仍然是客户最偏爱的购物目的地](https://www.forbes.com/sites/sap/2022/02/07/retail-trends-2022-in-search-of-the-ultimate-customer-experience/?sh=13a0809c52ad)。
- en: Everything in a store is about the experience. The [Retail Feedback Group](https://feedbackgroup.com/)
    (RFG), which has been tracking the grocery shopping experience for around 15 years,
    [consistently finds](https://www.winsightgrocerybusiness.com/retailers/supermarket-experience-its-time-integrate)
    that the most crucial factor affecting customer satisfaction is whether shoppers
    are able to **find everything they need during their visit, whether it be in-store
    or online**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 商店中的一切都关乎体验。 [零售反馈组](https://feedbackgroup.com/)（RFG）已经跟踪了大约15年的杂货购物体验，[一贯发现](https://www.winsightgrocerybusiness.com/retailers/supermarket-experience-its-time-integrate)
    影响客户满意度的最关键因素是顾客是否能够**在访问期间找到他们所需的一切，无论是在店内还是在线**。
- en: So retailers are constantly focused on ensuring **product availability** and
    the **right mix of items** for their customers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以零售商们不断关注**产品可用性**和**适当的商品组合**以满足客户需求。
- en: In a previous article, I showed [how to create a TensorFlow.js model to recognize
    SKUs](https://blog.tensorflow.org/2022/05/real-time-sku-detection-in-browser.html).
    In this post, we will explore how to **identify empty shelves** using a custom
    YOLOv7 model — everything running in **real-time, offline, and in the browser
    of a smartphone**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我展示了[如何创建一个TensorFlow.js模型来识别SKU](https://blog.tensorflow.org/2022/05/real-time-sku-detection-in-browser.html)。在这篇文章中，我们将探讨如何使用自定义YOLOv7模型来**识别空货架**——一切都在**实时、离线和智能手机的浏览器中运行**。
- en: 'What this post will cover:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将涵盖的内容：
- en: Configuring the environment;
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置环境；
- en: Gathering the data;
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集数据；
- en: Preparing the model for training;
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备模型进行训练；
- en: Training and reparametrizing the model;
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练和重新参数化模型；
- en: Evaluating the model;
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估模型；
- en: Converting to TensorFlow.js;
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换为TensorFlow.js；
- en: Deploying the model on a web browser.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网页浏览器上部署模型。
- en: Configuring the environment
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置环境
- en: The entire training pipeline will be executed using the free GPU provided by
    Google Colab. If you want to access the notebook with all the consolidated steps,
    [click here](https://colab.research.google.com/drive/185pYr5D2us666KxGim3INaJNAx8vIkcS?usp=sharing).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 整个训练流程将使用Google Colab提供的免费GPU执行。如果你想访问包含所有整合步骤的笔记本，[点击这里](https://colab.research.google.com/drive/185pYr5D2us666KxGim3INaJNAx8vIkcS?usp=sharing)。
- en: Gathering the data
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收集数据；
- en: 'The dataset we will use to train the model is the [Retail empty shelves — stockout](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F8RET7B&version=DRAFT)
    ([CC0 1.0 License](https://creativecommons.org/publicdomain/zero/1.0/)). It has
    3608 annotations from 1155 images and a unique class: *Stockout*.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用来训练模型的数据集是 [零售空货架——缺货](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F8RET7B&version=DRAFT)（[CC0
    1.0许可证](https://creativecommons.org/publicdomain/zero/1.0/)）。它有1155张图像中的3608个标注和一个独特的类别：*缺货*。
- en: '![](../Images/70b73d9895d065c5c32565ee121080d5.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70b73d9895d065c5c32565ee121080d5.png)'
- en: Dataset sample from [Harvard Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F8RET7B&version=DRAFT)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集样本来自 [哈佛数据中心](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F8RET7B&version=DRAFT)
- en: The annotations should be in the YOLOv7 format, where each image has its corresponding
    `txt` file. The first value in each line represents the class — for the Stockout
    dataset, all classes are the same and equal to `0`. The remaining four numbers
    in the line indicate the coordinates of the bounding box.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注释应采用YOLOv7格式，每张图像都有相应的`txt`文件。每行的第一个值表示类别——对于Stockout数据集，所有类别都相同，等于`0`。行中的其余四个数字表示边界框的坐标。
- en: If you want to create your own dataset, you can use a tool like [CVAT](https://github.com/opencv/cvat).
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想创建自己的数据集，可以使用像[CVAT](https://github.com/opencv/cvat)这样的工具。
- en: '![](../Images/d5c36d8d43a31dd9c75c83234e7adae3.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5c36d8d43a31dd9c75c83234e7adae3.png)'
- en: Example of aYOLOv7 annotation | Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: aYOLOv7注释示例 | 图片作者提供
- en: 'To download and extract the [stockout dataset](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F8RET7B),
    use the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载并解压[库存数据集](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F8RET7B)，请使用以下代码：
- en: Preparing the model for training
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为训练准备模型
- en: 'The first step is to clone the YOLOv7 repository and install the dependencies:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是克隆YOLOv7的代码库并安装依赖：
- en: Then, download the weights pre-trained on the [COCO 2017 Dataset](https://cocodataset.org/#home).
    They will be used to initialize the model and speed up the training — this technique
    is known as [transfer learning](https://www.tensorflow.org/tutorials/images/transfer_learning).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，下载在[COCO 2017 数据集](https://cocodataset.org/#home)上预训练的权重。这些权重将用于初始化模型并加速训练——这种技术被称为[迁移学习](https://www.tensorflow.org/tutorials/images/transfer_learning)。
- en: Since we are working on a one-class problem, we opted for YOLOv7-tiny, a lightweight
    variation of YOLOv7.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们处理的是单类问题，我们选择了YOLOv7-tiny，这是YOLOv7的轻量级变体。
- en: And before starting the training, we have to configure a .yaml file with the
    parameters we want to use.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始训练之前，我们需要配置一个.yaml文件，设置我们想使用的参数。
- en: Training and reparametrizing the model
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练和重新参数化模型
- en: The training process is straightforward and customizable, allowing you to adjust
    parameters such as the number of epochs and batches to suit your dataset’s requirements.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 训练过程直观且可定制，允许你调整诸如epoch数量和批次等参数，以适应数据集的需求。
- en: By the end of the execution, you will have the weights saved at `yolov7/runs/train/your-model-name/weights/best.pt`
    .
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结束时，你将得到保存在`yolov7/runs/train/your-model-name/weights/best.pt`的权重。
- en: To view the training metrics in a visual format, launch TensorBoard or open
    the image `yolov7/runs/train/your-model-name/results.png` .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要以可视化格式查看训练指标，请启动TensorBoard或打开图像`yolov7/runs/train/your-model-name/results.png`。
- en: '![](../Images/cd8431647b1ccbc7dc39022a64a6d612.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cd8431647b1ccbc7dc39022a64a6d612.png)'
- en: Running tensorboard | Image by author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行tensorboard | 图片作者提供
- en: '![](../Images/66f74eb7cfef6723a38067d512565204.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66f74eb7cfef6723a38067d512565204.png)'
- en: results.png | Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: results.png | 图片作者提供
- en: Now that you have the model trained, it is time to **reparametrize the weights
    for inference**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经训练好了模型，是时候**重新参数化权重以进行推理**。
- en: Along with its architecture optimizations for real-time object detection, YOLOv7
    introduces additional modules and methods that can enhance training efficiency
    and improve object detection accuracy. These modules, known as **bag-of-freebies**,
    must be streamlined for efficient inference. For more information, refer to the
    [model paper](https://arxiv.org/abs/2207.02696).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实时目标检测的架构优化，YOLOv7还引入了额外的模块和方法，这些模块可以提高训练效率和目标检测精度。这些模块被称为**免费礼包**，必须优化以实现高效推理。有关更多信息，请参阅[模型论文](https://arxiv.org/abs/2207.02696)。
- en: Check the weight's path on the code below and execute it to generate a reparametrized
    model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 检查下面代码中的权重路径并执行，以生成重新参数化的模型。
- en: Evaluating the model
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估模型
- en: Now that the model is optimized for inference, it's time to run it in some testing
    images to see if it detects empty spaces on the shelves.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模型已针对推理进行了优化，接下来是运行一些测试图像，以查看它是否检测到货架上的空白区域。
- en: Converting to TensorFlow.js
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换为TensorFlow.js
- en: 'Converting the model can be challenging, as it requires passing through several
    transformations: PyTorch to ONNX, ONNX to TensorFlow, and finally, TensorFlow
    to TensorFlow.js.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 转换模型可能会很具挑战性，因为它需要经过几个转换：PyTorch到ONNX，ONNX到TensorFlow，最后是TensorFlow到TensorFlow.js。
- en: The following code will handle everything for you. Just make sure the **model
    paths** are correctly configured and then run it!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将为你处理所有事情。只需确保**模型路径**配置正确，然后运行它！
- en: Upon completion, the resulting TensorFlow.js model will be automatically downloaded
    by Google Colab.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，生成的TensorFlow.js模型将由Google Colab自动下载。
- en: Assuming everything has been executed successfully, the model will now be converted
    to the ***TensorFlow.js layers format***.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一切顺利，模型现在将被转换为***TensorFlow.js layers format***。
- en: 'The folder downloaded on your local machine should contain a *model.json* file
    and a set of sharded weights files in a binary format. The *model.json* has both
    the model topology (aka “architecture” or “graph”: a description of the layers
    and how they are connected) and a manifest of the weight files.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下载到本地的文件夹应包含一个*model.json*文件和一组二进制格式的分片权重文件。*model.json*包含模型拓扑（即“架构”或“图”：层及其连接方式的描述）和权重文件的清单。
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Deploying the model
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署模型
- en: The model is now ready to be loaded into JavaScript. As mentioned in the beginning,
    I open-sourced a YOLOv7 code in JavaScript. Therefore, we can utilize the same
    repository and replace the model with the one that we have just trained
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模型已经准备好可以加载到JavaScript中。如前所述，我开源了一个YOLOv7的JavaScript代码。因此，我们可以利用相同的代码库，并用我们刚刚训练的模型替换原有模型。
- en: 'Clone the [repository](https://github.com/hugozanini/yolov7-tfjs.git):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆[代码库](https://github.com/hugozanini/yolov7-tfjs.git)：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install the packages:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装这些包：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Go to the `[public](https://github.com/hugozanini/yolov7-tfjs/tree/master/public)`
    folder and past the model trained. You should have a structure like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`[public](https://github.com/hugozanini/yolov7-tfjs/tree/master/public)`文件夹并粘贴训练好的模型。你应该有如下结构：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Go to `[src/App.jsx](https://github.com/hugozanini/yolov7-tfjs/blob/master/src/App.jsx)`
    and change the model name on `[line 29](https://github.com/hugozanini/yolov7-tfjs/blob/4efa4cba39d1168d4bcf7bfe79274e54e87d2eaa/src/App.jsx#L29)`
    to stockout:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`[src/App.jsx](https://github.com/hugozanini/yolov7-tfjs/blob/master/src/App.jsx)`并将`[line
    29](https://github.com/hugozanini/yolov7-tfjs/blob/4efa4cba39d1168d4bcf7bfe79274e54e87d2eaa/src/App.jsx#L29)`上的模型名称更改为stockout：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To execute the application go to the root folder and run the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行应用程序，请前往根文件夹并运行以下命令：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A local server will be started, and you should see something similar to this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将启动本地服务器，你应该会看到类似于这样的内容：
- en: '![](../Images/741d69af65df9bc8058117a62bbad714.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/741d69af65df9bc8058117a62bbad714.png)'
- en: Running example | Image by author
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例 | 作者提供的图像
- en: This model was deployed on CodesSandbox too. Access the link below to see it
    running.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型也部署在CodesSandbox上。访问下面的链接查看其运行情况。
- en: '[](https://codesandbox.io/p/github/hugozanini/yolov7-tfjs/stockout?file=%2FREADME.md&workspace=%257B%2522activeFileId%2522%253A%2522clffv5qby000yg1fw2ridgthd%2522%252C%2522openFiles%2522%253A%255B%2522%252FREADME.md%2522%255D%252C%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522gitSidebarPanel%2522%253A%2522COMMIT%2522%252C%2522spaces%2522%253A%257B%2522clfjm1t8i00733b6idq6lqztm%2522%253A%257B%2522key%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522name%2522%253A%2522Default%2522%252C%2522devtools%2522%253A%255B%257B%2522type%2522%253A%2522PREVIEW%2522%252C%2522taskId%2522%253A%2522start%2522%252C%2522port%2522%253A3000%252C%2522key%2522%253A%2522clfjm1t8i00743b6iw255o0qk%2522%252C%2522isMinimized%2522%253Afalse%257D%255D%257D%257D%252C%2522currentSpace%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522spacesOrder%2522%253A%255B%2522clfjm1t8i00733b6idq6lqztm%2522%255D%252C%2522hideCodeEditor%2522%253Afalse%257D&source=post_page-----96a5ecd7a530--------------------------------)
    [## CondeSandbox'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://codesandbox.io/p/github/hugozanini/yolov7-tfjs/stockout?file=%2FREADME.md&workspace=%257B%2522activeFileId%2522%253A%2522clffv5qby000yg1fw2ridgthd%2522%252C%2522openFiles%2522%253A%255B%2522%252FREADME.md%2522%255D%252C%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522gitSidebarPanel%2522%253A%2522COMMIT%2522%252C%2522spaces%2522%253A%257B%2522clfjm1t8i00733b6idq6lqztm%2522%253A%257B%2522key%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522name%2522%253A%2522Default%2522%252C%2522devtools%2522%253A%255B%257B%2522type%2522%253A%2522PREVIEW%2522%252C%2522taskId%2522%253A%2522start%2522%252C%2522port%2522%253A3000%252C%2522key%2522%253A%2522clfjm1t8i00743b6iw255o0qk%2522%252C%2522isMinimized%2522%253Afalse%257D%255D%257D%257D%252C%2522currentSpace%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522spacesOrder%2522%253A%255B%2522clfjm1t8i00733b6idq6lqztm%2522%255D%252C%2522hideCodeEditor%2522%253Afalse%257D&source=post_page-----96a5ecd7a530--------------------------------)
    [## CondeSandbox'
- en: Stockout](https://codesandbox.io/p/github/hugozanini/yolov7-tfjs/stockout?file=%2FREADME.md&workspace=%257B%2522activeFileId%2522%253A%2522clffv5qby000yg1fw2ridgthd%2522%252C%2522openFiles%2522%253A%255B%2522%252FREADME.md%2522%255D%252C%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522gitSidebarPanel%2522%253A%2522COMMIT%2522%252C%2522spaces%2522%253A%257B%2522clfjm1t8i00733b6idq6lqztm%2522%253A%257B%2522key%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522name%2522%253A%2522Default%2522%252C%2522devtools%2522%253A%255B%257B%2522type%2522%253A%2522PREVIEW%2522%252C%2522taskId%2522%253A%2522start%2522%252C%2522port%2522%253A3000%252C%2522key%2522%253A%2522clfjm1t8i00743b6iw255o0qk%2522%252C%2522isMinimized%2522%253Afalse%257D%255D%257D%257D%252C%2522currentSpace%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522spacesOrder%2522%253A%255B%2522clfjm1t8i00733b6idq6lqztm%2522%255D%252C%2522hideCodeEditor%2522%253Afalse%257D&source=post_page-----96a5ecd7a530--------------------------------)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[缺货检测器](https://codesandbox.io/p/github/hugozanini/yolov7-tfjs/stockout?file=%2FREADME.md&workspace=%257B%2522activeFileId%2522%253A%2522clffv5qby000yg1fw2ridgthd%2522%252C%2522openFiles%2522%253A%255B%2522%252FREADME.md%2522%255D%252C%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522gitSidebarPanel%2522%253A%2522COMMIT%2522%252C%2522spaces%2522%253A%257B%2522clfjm1t8i00733b6idq6lqztm%2522%253A%257B%2522key%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522name%2522%253A%2522Default%2522%252C%2522devtools%2522%253A%255B%257B%2522type%2522%253A%2522PREVIEW%2522%252C%2522taskId%2522%253A%2522start%2522%252C%2522port%2522%253A3000%252C%2522key%2522%253A%2522clfjm1t8i00743b6iw255o0qk%2522%252C%2522isMinimized%2522%253Afalse%257D%255D%257D%257D%252C%2522currentSpace%2522%253A%2522clfjm1t8i00733b6idq6lqztm%2522%252C%2522spacesOrder%2522%253A%255B%2522clfjm1t8i00733b6idq6lqztm%2522%255D%252C%2522hideCodeEditor%2522%253Afalse%257D&source=post_page-----96a5ecd7a530--------------------------------)'
- en: With YOLOv7, it’s possible to detect up to 80 different classes. For businesses
    in the retail industry, this presents a great opportunity to improve their in-store
    product execution.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 利用YOLOv7，可以检测到多达80种不同的类别。对于零售行业的企业而言，这是一个提升店内产品执行的绝佳机会。
- en: By training the model to recognize all of their company’s products, retailers
    can ensure that their **products are properly placed on the shelves and that customers
    are able to easily find what they are looking for**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过训练模型识别公司所有产品，零售商可以确保他们的**产品正确摆放在货架上，以便顾客轻松找到所需的商品**。
- en: To validate the effectiveness of the model trained, I went to a grocery and
    drug store with my phone and recorded some examples of the detector running in
    real time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为验证训练模型的有效性，我带着手机去了一家杂货店和药店，并记录了一些实时运行检测器的示例。
- en: In the video below, you can verify the solution's ability to accurately detect
    empty shelves in a real environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的视频中，您可以验证解决方案在真实环境中准确检测空货架的能力。
- en: A stockout detector in conjunction with an [SKU recognition model](https://blog.tensorflow.org/2022/05/real-time-sku-detection-in-browser.html)
    can greatly enhance the efficiency and effectiveness of retail operations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与[SKU识别模型](https://blog.tensorflow.org/2022/05/real-time-sku-detection-in-browser.html)结合使用的缺货检测器可以极大地提升零售业务的效率和效果。
- en: While cloud-based solutions exist, they can sometimes be slow, taking up to
    24 hours to process a single detection. In comparison, using TensorFlow.js models
    on a smartphone browser allows for offline, real-time recognition — allowing businesses
    to make more immediate decisions and respond to stockouts faster.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然存在基于云的解决方案，但有时它们可能很慢，需要长达24小时才能处理一次检测。相比之下，使用TensorFlow.js模型在智能手机浏览器上进行离线实时识别，可以让企业做出更即时的决策，并更快速地响应缺货情况。
- en: Overall, combining a stockout detector with an SKU recognition model can provide
    a powerful way for optimizing retail operations and enhancing the shopping experience
    for customers. By using real-time analysis and offline recognition capabilities,
    businesses can make informed decisions and respond quickly to changing conditions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，将缺货检测器与SKU识别模型结合使用，可以为优化零售操作和提升顾客购物体验提供强大的途径。通过实时分析和离线识别能力，企业可以做出明智的决策，并快速响应变化的情况。
- en: If you have any questions or want to share about a user case, feel reach me
    on [Linkedin](https://www.linkedin.com/in/hugozanini/?locale=en_US) or [Twitter](https://twitter.com/hugoznn).
    All the source code used in this post is available on the [project repo](https://github.com/hugozanini/yolov7-tfjs/tree/stockout).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何问题或想分享一个用户案例，请通过[Linkedin](https://www.linkedin.com/in/hugozanini/?locale=en_US)或[Twitter](https://twitter.com/hugoznn)联系我。本文中使用的所有源代码均可在[项目仓库](https://github.com/hugozanini/yolov7-tfjs/tree/stockout)中找到。
- en: Thanks for reading :)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢阅读 :)
