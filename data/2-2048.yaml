- en: 'The Perfect Text Editor for Jupyter: A Complete Python IDE'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter 的完美文本编辑器：一个完整的 Python IDE
- en: 原文：[https://towardsdatascience.com/the-perfect-text-editor-for-jupyter-a-complete-python-ide-608dd466560b](https://towardsdatascience.com/the-perfect-text-editor-for-jupyter-a-complete-python-ide-608dd466560b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-perfect-text-editor-for-jupyter-a-complete-python-ide-608dd466560b](https://towardsdatascience.com/the-perfect-text-editor-for-jupyter-a-complete-python-ide-608dd466560b)
- en: From syntax highlighting to code completion, a complete Python IDE inside Jupyter
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从语法高亮到代码补全，一个完整的 Python IDE 在 Jupyter 中
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)
    ·5 min read·Mar 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)
    ·阅读时间 5 分钟·2023年3月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/074816bb2f0c1badf878e10ebac705da.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/074816bb2f0c1badf878e10ebac705da.png)'
- en: Photo by [Max Duzij](https://unsplash.com/@max_duz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Max Duzij](https://unsplash.com/@max_duz?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'This article is the fourth part of a series. Check out the full series: [Part
    I](/unlocking-the-potential-of-jupyterlab-discover-the-powerful-text-editor-you-never-knew-you-had-af18bf5bce3f),
    [Part II](/jupyter-already-has-a-perfect-text-editor-this-is-how-you-can-configure-it-4d3eb37878f1),
    [Part III](/jupyter-already-has-a-perfect-text-editor-building-a-python-ide-20063044749b).'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文是系列文章的第四部分。查看完整系列：[第一部分](/unlocking-the-potential-of-jupyterlab-discover-the-powerful-text-editor-you-never-knew-you-had-af18bf5bce3f)，[第二部分](/jupyter-already-has-a-perfect-text-editor-this-is-how-you-can-configure-it-4d3eb37878f1)，[第三部分](/jupyter-already-has-a-perfect-text-editor-building-a-python-ide-20063044749b)。
- en: Over the past few days, we’ve been building a complete Python IDE inside Jupyter.
    In this article, we will add the final touches and package everything in a Docker
    image to create a portable working environment for data scientists and Machine
    Learning engineers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几天里，我们在 Jupyter 中构建了一个完整的 Python IDE。在本文中，我们将进行最后的调整，并将一切打包成 Docker 镜像，以创建一个便于数据科学家和机器学习工程师使用的便携工作环境。
- en: Jupyter is not exactly an IDE. It’s not even an IPython UI, as many may think.
    I would argue that Jupyter is a development platform, and you can create your
    own workspace the way you like it. Since it includes a terminal emulator, you
    can do anything you may think. Thus, we will use it to create a complete, feature-packed
    Python IDE.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 并不是一个完整的 IDE。它甚至不是许多人认为的 IPython 用户界面。我认为 Jupyter 是一个开发平台，你可以按照自己的喜好创建工作区。由于它包含一个终端模拟器，你可以做你想做的任何事。因此，我们将利用它来创建一个功能丰富的
    Python IDE。
- en: 'Thus, in previous articles, we installed Neovim and configured it to act and
    look similar to the most popular text editor these days: Visual Studio Code. In
    this article, we will install one tool to conquer all: code completion, code formatting,
    git integration, spell checking, and lining. Let’s begin!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在之前的文章中，我们安装了 Neovim，并将其配置为与现在最流行的文本编辑器：Visual Studio Code 相似。在本文中，我们将安装一个全面的工具：代码补全、代码格式化、git
    集成、拼写检查和代码对齐。让我们开始吧！
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc)
    is a newsletter for those who are curious about the world of ML and MLOps. If
    you want to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc).
    You’ll hear from me on the last Sunday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[学习速率](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc)
    是一个面向对 ML 和 MLOps 世界感兴趣的人的新闻通讯。如果你想了解更多类似的主题，请[在这里](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc)订阅。每个月的最后一个星期天，你会收到我的更新和对最新
    MLOps 新闻和文章的见解！'
- en: Conquer of Completion
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conquer of Completion
- en: Many tools promise to make a developer’s life easier when it comes to Vim/Neovim,
    but my preference is [Conquer of Completion](https://github.com/neoclide/coc.nvim).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工具承诺在 Vim/Neovim 的使用上让开发者的生活更轻松，但我个人偏好的是[Conquer of Completion](https://github.com/neoclide/coc.nvim)。
- en: 'Conquer of Completion (CoC) is a popular plugin for Vim and Neovim that provides
    a powerful autocompletion engine. Here are a few key things to know about CoC:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Conquer of Completion (CoC) 是一个流行的 Vim 和 Neovim 插件，提供强大的自动补全引擎。以下是有关 CoC 的一些关键点：
- en: 'CoC supports multiple languages: it can provide autocompletion suggestions
    for various programming languages, including Python, JavaScript, C, Go, and many
    others. It uses language servers to provide intelligent recommendations based
    on your code context.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoC 支持多种语言：它可以为包括 Python、JavaScript、C、Go 等在内的各种编程语言提供自动补全建议。它使用语言服务器根据你的代码上下文提供智能推荐。
- en: 'CoC is highly configurable: it allows users to customize the autocompletion
    engine to fit their preferences in a VS Code-like way. Users can set up custom
    mappings for triggering completion, adjust the priority of completion sources,
    and more.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoC 是高度可配置的：它允许用户以类似 VS Code 的方式自定义自动补全引擎。用户可以设置触发补全的自定义映射，调整补全源的优先级等。
- en: 'CoC has a large user community: it is a popular plugin with a large user community,
    which means many resources are available for troubleshooting and customization.
    The plugin is also actively maintained and updated. Moreover, the community provides
    several great extensions we will use.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoC 拥有庞大的用户社区：这是一个流行的插件，拥有大量用户社区，这意味着有许多资源可以用来排除故障和进行自定义。该插件也在积极维护和更新。此外，社区提供了几个我们将使用的优秀扩展。
- en: Overall, Conquer of Completion is a powerful plugin that can significantly enhance
    your autocompletion experience in Vim or Neovim, mainly if you work with multiple
    programming languages.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Conquer of Completion 是一个强大的插件，可以显著提升你在 Vim 或 Neovim 中的自动补全体验，尤其是当你处理多种编程语言时。
- en: Installation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: CoC requires some setup. You’ll need to install and configure some additional
    components, including NodeJS and the `npm` package manager. Depending on your
    case, you may also need to install a language server for your preferred programming
    language.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: CoC 需要一些设置。你需要安装和配置一些额外的组件，包括 NodeJS 和 `npm` 包管理器。根据情况，你可能还需要为你喜欢的编程语言安装一个语言服务器。
- en: In our case, let’s first install NodeJS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，首先安装 NodeJS。
- en: NodeJS Installation
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NodeJS 安装
- en: NodeJS and `npm` are hard requirements to install the CoC plugin for Neovim
    and enable auto-completion for many programming languages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: NodeJS 和 `npm` 是安装 Neovim 的 CoC 插件并启用多种编程语言自动补全的硬性要求。
- en: 'To install the two packages execute the following commands:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这两个软件包，请执行以下命令：
- en: 'Install the PPA to get access to its packages:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 PPA 以访问其软件包：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '2\. Install Node.js:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 安装 Node.js：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '3\. Verify:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 验证：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you get something like `v18.15.0` (the latest version at the time of writing
    this article) you’re good to go. But even if you have another version installed,
    you should be able to continue.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似 `v18.15.0`（在撰写本文时的最新版本）的版本号，你就可以开始使用了。即使你安装了其他版本，也应该可以继续使用。
- en: Install CoC
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 CoC
- en: 'Installing the CoC plugin is as simple as any other plugin. Just place the
    following line in your `init.vim` configuration file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 CoC 插件与其他插件一样简单。只需将以下行放入你的 `init.vim` 配置文件中：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Restart the editor and run the `:PlugInstall` Vim command. `vim-plug`, the plugin
    manager we are using will install CoC for you. To complete the installation process,
    restart the editor again.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重启编辑器并运行 `:PlugInstall` Vim 命令。`vim-plug`，我们正在使用的插件管理器，会为你安装 CoC。为完成安装过程，请再次重启编辑器。
- en: To see the installation process of a plugin in Neovim in detail, refer back
    to the second blog of this series.
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要详细查看 Neovim 插件的安装过程，请参考本系列的第二篇博客。
- en: 'We are ready to install the extensions we need to turn our editor into a full-fledged
    IDE. Run the `:CocInstall coc-pyright` Vim command to install support for Python.
    After finishing the installation, quit every window of your editor and open a
    Python file like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备安装所需的扩展，将编辑器转变为一个功能齐全的 IDE。运行 `:CocInstall coc-pyright` Vim 命令以安装 Python
    支持。安装完成后，退出编辑器的所有窗口，然后打开一个 Python 文件，如下所示：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Autocomplete should be enabled; however, it’s not very practical. So, let’s
    configure CoC. Add the following lines in your `init.vim` configuration file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 自动补全应该启用；然而，它并不是很实用。因此，让我们配置 CoC。在你的 `init.vim` 配置文件中添加以下几行：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I left a comment for each line so you can understand what it does. Now CoC is
    configured, and you can use these key bindings to get the most out of it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我在每一行上留下了评论，以便你理解它的作用。现在 CoC 已配置好，你可以使用这些快捷键来充分利用它。
- en: 'However, things do not end here. As we said, CoC has several extensions (like
    `coc-pyright`) that you can install. Some of them are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事情并没有就此结束。正如我们所说，CoC 有多个扩展（如 `coc-pyright`）可以安装。它们包括：
- en: '`coc-git`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coc-git`'
- en: '`coc-docker`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coc-docker`'
- en: '`coc-yaml`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coc-yaml`'
- en: '`coc-json`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coc-json`'
- en: '`coc-prettier`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coc-prettier`'
- en: '`coc-pairs`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coc-pairs`'
- en: '`coc-spell-checker`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coc-spell-checker`'
- en: 'To install any of them, just run the `:CocInstall` command and provide the
    name of the extension. For a complete list of extensions, visit the `coc-extensions`
    page: [https://github.com/topics/coc-extensions](https://github.com/topics/coc-extensions)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它们中的任何一个，只需运行 `:CocInstall` 命令并提供扩展的名称。有关扩展的完整列表，请访问 `coc-extensions` 页面：[https://github.com/topics/coc-extensions](https://github.com/topics/coc-extensions)
- en: 'Finally, you can configure CoC much like you do with VS Code. Run the `:CocConfig`
    command and the `coc-settings.json` file will pop up. I have the following settings
    set there:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以像在 VS Code 中一样配置 CoC。运行 `:CocConfig` 命令，`coc-settings.json` 文件将弹出。我在其中设置了以下配置：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each row is self-explanatory, but if you want to find out what exactly you can
    configure, refer to the documentation of each CoC extension.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都是自解释的，但如果你想详细了解可以配置的内容，请参考每个 CoC 扩展的文档。
- en: As usual, save your work using the `docker commit` command (refer to previous
    articles in this series if you don’t know what this means). You can find my image
    in [DockerHub](https://hub.docker.com/layers/dpoulopoulos/jupyter/v0.0.3/images/sha256-3538e1a72d605071a6517bf157dabfe8a3953f7236d10abfa18dbc5a38f7951b?context=repo).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，使用 `docker commit` 命令保存你的工作（如果你不知道这意味着什么，请参考本系列以前的文章）。你可以在 [DockerHub](https://hub.docker.com/layers/dpoulopoulos/jupyter/v0.0.3/images/sha256-3538e1a72d605071a6517bf157dabfe8a3953f7236d10abfa18dbc5a38f7951b?context=repo)
    上找到我的镜像。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this series of articles, we built a complete Python IDE inside a JupyterLab
    environment. We started with a simple Neovim installation, which we configured
    to act and look like the most popular text editor today, VS Code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系列文章中，我们在 JupyterLab 环境中构建了一个完整的 Python IDE。我们从一个简单的 Neovim 安装开始，并将其配置为像今天最受欢迎的文本编辑器
    VS Code 一样。
- en: This article concludes this story, but if you want to see more things, like
    how to use a debugger or configure a specific plugin further, please leave a comment,
    and I’ll do my best! Till then, happy coding.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章结束了这个故事，但如果你想看到更多内容，如如何使用调试器或进一步配置特定插件，请留言，我会尽力而为！在此之前，祝编程愉快。
- en: About the Author
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我的名字是 [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc)，我是一名在
    [Arrikto](https://www.arrikto.com/) 工作的机器学习工程师。我为包括欧盟委员会、欧洲统计局、国际货币基金组织、欧洲中央银行、经济合作与发展组织和宜家在内的主要客户设计和实施了
    AI 和软件解决方案。
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对机器学习、深度学习、数据科学和数据操作等更多帖子感兴趣，请在 [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow)、[LinkedIn](https://www.linkedin.com/in/dpoulopoulos/)
    或 [Twitter](https://twitter.com/james2pl) 上关注我。
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所表达的观点仅代表我个人，并不代表我的雇主的观点或意见。
