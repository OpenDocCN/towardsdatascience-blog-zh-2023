- en: Think in SQL — Avoid Writing SQL in a Top to Bottom Approach
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 思考 SQL —— 避免从上到下编写 SQL
- en: 原文：[https://towardsdatascience.com/think-in-sql-avoid-writing-sql-in-a-top-to-bottom-approach-476a67f53a59](https://towardsdatascience.com/think-in-sql-avoid-writing-sql-in-a-top-to-bottom-approach-476a67f53a59)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/think-in-sql-avoid-writing-sql-in-a-top-to-bottom-approach-476a67f53a59](https://towardsdatascience.com/think-in-sql-avoid-writing-sql-in-a-top-to-bottom-approach-476a67f53a59)
- en: Write Clear SQL By Comprehend Logical Query Processing Order
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过理解逻辑查询处理顺序来编写清晰的 SQL
- en: '[](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)[](https://towardsdatascience.com/?source=post_page-----476a67f53a59--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----476a67f53a59--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)[](https://towardsdatascience.com/?source=post_page-----476a67f53a59--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----476a67f53a59--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----476a67f53a59--------------------------------)
    ·7 min read·Feb 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----476a67f53a59--------------------------------)
    ·7 分钟阅读·2023年2月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4b40ea0f0eb8d5415ec9881ec750cd1a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b40ea0f0eb8d5415ec9881ec750cd1a.png)'
- en: Photo by [Jeffrey Brandjes](https://unsplash.com/es/@jeffreyfotografie?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/7cLqEYJws8E?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jeffrey Brandjes](https://unsplash.com/es/@jeffreyfotografie?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/7cLqEYJws8E?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: You might find writing SQL challenging due to its declarative nature. Especially
    for engineers familiar with imperative languages like Python, Java, or C, SQL
    is gear-switching and mind shifts to many people. Thinking in SQL is different
    than any imperative language and should not be learned and developed the same
    way.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SQL 的声明式特性，你可能会觉得编写 SQL 有挑战。尤其对于那些熟悉 Python、Java 或 C 等命令式语言的工程师来说，SQL 切换起来是许多人需要的思维转换。思考
    SQL 与任何命令式语言都不同，因此学习和开发的方式也不应相同。
- en: When working with SQL, do you write in the top to bottom approach? Do you start
    developing in SQL with the “SELECT” clause first in SQL? In this article, let’s
    talk about SQL logical query processing order to help you understand why you might
    want to change that way you write SQL top to bottom. It can also help you think
    in SQL clearly and develop your query more effectively.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 SQL 时，你是按照从上到下的方法编写的吗？你是否从 SQL 中的“SELECT”子句开始开发？在这篇文章中，让我们探讨 SQL 的逻辑查询处理顺序，帮助你理解为何可能需要改变从上到下编写
    SQL 的方式。这也有助于你更清晰地思考 SQL，并更有效地开发查询。
- en: SQL Is a Declarative Language
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 是一种声明式语言
- en: 'The core concept of the declarative language is fantastic: humans convey high-level
    structure and logical instructions without exact flows. As a developer, that means
    instead of writing step-by-step guide on **how to accomplish a goal**. We’d write
    **what goal to achieve** so we can focus more on the result and let the underlying
    query parser and engine figure out how to execute the instruction.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式语言的核心概念非常棒：人类传达的是高级结构和逻辑指令，而不需要精确的流程。作为开发者，这意味着我们不需要编写**如何实现目标**的逐步指南。我们只需编写**要实现的目标**，这样我们可以更多地关注结果，让底层查询解析器和引擎来决定如何执行指令。
- en: When writing in SQL, you focus more on input and output, and execution is a
    magic black box behind the scene. For detailed execution, user provide preference
    on plan and optimization. But the execution is still handled by the query engine
    at run time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编写 SQL 时，你更关注输入和输出，而执行是幕后的神奇黑匣子。对于详细的执行，用户提供计划和优化的偏好。但执行仍然由查询引擎在运行时处理。
- en: However, it doesn’t mean we can wave a magic wand, and everything will be executed
    as desired. High-level instructions are still required that provides the following
    information.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不意味着我们可以挥舞魔法棒，一切都会如愿以偿。仍然需要高级指令来提供以下信息。
- en: Where the data sources (**FROM**)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源在哪里（**FROM**）
- en: What condition to apply (**WHERE/HAVING**)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用什么条件（**WHERE/HAVING**）
- en: Whether the row level or aggregation (**GROUP BY**)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是行级别还是聚合（**GROUP BY**）
- en: How to show the result (**SELECT**)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何显示结果（**SELECT**）
- en: How to sort the data (**ORDER BY**)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何排序数据（**ORDER BY**）
- en: How many rows to return (**LIMIT**)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回多少行（**LIMIT**）
- en: Unlike imperative language to get data, we don’t need to write complex logic
    or loop through each row. The SQL query is like a blueprint, and the SQL engine
    is the builder. As users, we need to wait for the output without worrying about
    how it gets the results.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与获取数据的命令式语言不同，我们不需要编写复杂的逻辑或逐行循环。SQL 查询就像一个蓝图，SQL 引擎是构建者。作为用户，我们只需等待输出，而不必担心它如何获取结果。
- en: SQL Logical Query Processing Order
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 逻辑查询处理顺序
- en: If you have worked with other data processing frameworks in a imperative language,
    or even for users of Spark or Pandas, we always need a dataset to work with first.
    The places to get the data source is usually the entry point for any data processing
    framework, and the same applies for SQL.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾使用过其他数据处理框架的命令式语言，甚至对于 Spark 或 Pandas 用户，我们总是需要先有数据集进行处理。获取数据源的地方通常是任何数据处理框架的入口点，SQL
    也是如此。
- en: To understand how SQL logical query processing order works, let’s take a SQL
    query at the syntax time compare it with logical processing order.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解 SQL 逻辑查询处理顺序，让我们用 SQL 查询在语法时间来比较它与逻辑处理顺序。
- en: '![](../Images/ac7af64a6eaa33b5832dd1303f64084a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac7af64a6eaa33b5832dd1303f64084a.png)'
- en: SQL syntax with logical query processing order marker | Image By Author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 语法与逻辑查询处理顺序标记 | 图片由作者提供
- en: '**FROM:** the entry point for SQL is the **FROM** clause. It is usually defined
    right after the “SELECT” statement, and executed as the preparation stage to navigate
    the query engine which tables to pull the data'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**FROM:** SQL 的入口点是 **FROM** 子句。它通常在“SELECT”语句之后定义，并作为准备阶段来指导查询引擎从哪些表中提取数据'
- en: '**ON**: on condition is evaluated next from each table to check which key(s)
    to join'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ON**: 在每个表中评估的条件，用于检查要连接的键'
- en: '**JOIN**: once knowing which keys to join, the SQL engine will check which
    types of join (Inner, Outer, Cross join, etc.) needs to be applied here'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JOIN**: 一旦知道要连接哪些键，SQL 引擎会检查需要应用哪些类型的连接（内连接、外连接、交叉连接等）'
- en: '**WHERE**: apply row-level filters'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**WHERE**: 应用行级过滤器'
- en: '**GROUP BY:** indicate the keys to aggregate on and change the view of the
    original row-level table. After this stage, everything handled forward will be
    aggregated level instead of original row level. If you use cube or roll-up for
    aggregation, it also happened at this stage.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**GROUP BY:** 指定要聚合的键，并改变原始行级表的视图。在这个阶段之后，所有处理的内容都会是聚合级别而不是原始行级别。如果使用了 cube
    或 roll-up 聚合，也会在这个阶段发生。'
- en: '**HAVING:** apply aggregated-level filters. We can also write a nested query
    or CTE (common table expression) to perform filter at the aggregated level. Still,
    it is much more convenient next to the GROUP BY clause and potentially good to
    SQL engine optimization.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**HAVING:** 应用聚合级过滤器。我们还可以编写嵌套查询或 CTE（公共表表达式）在聚合级别进行过滤。不过，紧挨着 GROUP BY 子句使用更为方便，并且可能有利于
    SQL 引擎优化。'
- en: '**SELECT:** Choosethefields to show to the users. For the derived fields that
    requires complex logic like window function (rank(), row_number(), etc.) or case
    statement, or aggregated function, they all happened at this time. As you can
    see, SELECT is much late in SQL logical query processing order. If you start with
    SELECT clause first, it becomes hard to anticipate what you will write for the
    other 6 statements mentioned above, thus likely causing unexpected result or error
    in SELECT. Let’s talk about more in the next section.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SELECT:** 选择要显示给用户的字段。对于需要复杂逻辑的派生字段，如窗口函数（rank()、row_number() 等）、或 case 语句，或聚合函数，这些操作都会在此时进行。如你所见，SELECT
    在 SQL 逻辑查询处理顺序中较晚。如果你先从 SELECT 子句开始，可能很难预见你会如何编写其他 6 个语句，从而可能导致 SELECT 中出现意外结果或错误。让我们在下一节中详细讨论。'
- en: '**ORDER BY**: sorting order of your final result. At this stage, we can resolve
    the alias name you defined in the SELECT clause.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ORDER BY**: 最终结果的排序顺序。在这个阶段，我们可以解析你在 SELECT 子句中定义的别名。'
- en: '**LIMIT:** return the number of result, or if you’d like to skip a few top
    rows combined with ORDER BY'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LIMIT：** 返回结果的数量，或者如果你想跳过几行顶部数据，可以结合 ORDER BY 使用。'
- en: Let’s reshuffle the SQL statement from syntax time into the SQL logical query
    processing order, and it will become much clear.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把 SQL 语句从语法时间重新排列成 SQL 逻辑查询处理顺序，这样会更清晰。
- en: '![](../Images/307298e53525e69c92c39223314b54ed.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/307298e53525e69c92c39223314b54ed.png)'
- en: SQL logical query processing order | Image By Author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 逻辑查询处理顺序 | 作者图像
- en: Microsoft has excellent documentation on this topic on [Logical Processing Order
    of the SELECT statement](https://learn.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql?redirectedfrom=MSDN&view=sql-server-ver16#logical-processing-order-of-the-select-statement).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在 [SELECT 语句的逻辑处理顺序](https://learn.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql?redirectedfrom=MSDN&view=sql-server-ver16#logical-processing-order-of-the-select-statement)
    上有很好的文档。
- en: “SELECT” Shouldn’t Be the First Word When Writing SQL
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “SELECT” 不应该是编写 SQL 时的第一个单词
- en: “SELECT” is usually the first clause when reading a SQL statement. Our brain
    works well with a top-to-bottom approach while reading or writing. Having “SELECT”
    first defines the result we’d like to show. Writing “SELECT” as the first word
    follows that pattern. Additionally, putting “SELECT” down is syntax correct to
    compile and run the entire SQL script.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “SELECT” 通常是阅读 SQL 语句时的第一个子句。我们的脑袋在阅读或写作时，通常采用自上而下的方法。首先使用 “SELECT” 定义了我们希望显示的结果。将
    “SELECT” 作为第一个单词符合这种模式。此外，将 “SELECT” 放在首位是语法正确的，可以编译并运行整个 SQL 脚本。
- en: 'How many times when you write a SQL query for data analysis, you have the following
    written down first:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为数据分析编写 SQL 查询时，有多少次你首先写下了以下内容：
- en: SELECT col1, col2, CASE (…), ROW_NUMER(…)
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT col1, col2, CASE (…), ROW_NUMER(…)
- en: IT WORKS! An SQL compiled and pulled the result correctly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有效！一个编译并正确提取结果的 SQL。
- en: 'However, as you can see above, **SELECT is evaluated much late in SQL logical
    query processing order.** Here are some reasons why avoid writing everything in
    SELECT first:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，正如你在上面看到的，**SELECT 在 SQL 逻辑查询处理顺序中被评估得较晚。** 以下是避免首先在 SELECT 中编写所有内容的一些原因：
- en: '**It’s hard to anticipate what you will write for the statement before SELECT
    in the logical query processing order**. Do you have all the table names? Do you
    have the alias defined? Whether you are processing row-level or aggregated-level
    data? I know someone can prevision everything SQL and all table and alias very
    well. Unfortunately, I am not good at foreseeing and memorization. Writing down
    SQL in the logical query processing order gives me references for what will be
    written next. It also keep a hint for me if I got interrupted when I was coding,
    and it’s much easier to resume from the breakpoint.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**很难预测你会在 SELECT 之前为语句写些什么。** 你有所有的表名吗？你有定义别名吗？你是在处理行级数据还是汇总级数据？我知道有人可以很好地预测所有
    SQL 以及所有表和别名。不幸的是，我不擅长预见和记忆。按逻辑查询处理顺序编写 SQL 给了我下一步要写的参考。如果在编码时被打断，它也给我一个提示，使我更容易从中断处恢复。'
- en: '**The logical query processing order fit our brain better.** If you write SQL,
    you probably familiar with ETL concept (Extraction, Transformation, Loading) data.
    The ETL concept follows the logical order: you take datasets, manipulate the datasets,
    place the reformed datasets somewhere else. Writing in SQL should follow the same
    logical order, “SELECT” fits more as transformation or loading stage, and we should
    get the dataset preparation first to feed “SELECT.”'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑查询处理顺序更适合我们的脑袋。** 如果你编写 SQL，可能熟悉 ETL 概念（提取、转换、加载）数据。ETL 概念遵循逻辑顺序：你获取数据集，对数据集进行操作，将重构后的数据集放到其他地方。在
    SQL 中编写应该遵循相同的逻辑顺序，“SELECT” 更适合作为转换或加载阶段，我们应该先准备数据集，以便为 “SELECT” 提供数据。'
- en: '**It helps debug and reason the error.** By following the logical query processing
    order, some errors becomes obvious. Like this StackOverflow question: “[SQL not
    recognizing column alias in where clause](https://stackoverflow.com/questions/28802134/sql-not-recognizing-column-alias-in-where-clause),”
    From this article, we can answer that quickly: the SELECT alias hasn’t been evaluated,
    so SQL engine doesn’t have the context of the alias name you gave, so it failed.
    *(some modern SQL vendors do some optimization to avoid this issue, but it does
    not apply to all SQL providers. We still should be aware of this)*.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它有助于调试和推理错误。** 通过遵循逻辑查询处理顺序，一些错误变得明显。例如这个 StackOverflow 问题：“[SQL 在 WHERE
    子句中未识别列别名](https://stackoverflow.com/questions/28802134/sql-not-recognizing-column-alias-in-where-clause)”，通过这篇文章，我们可以快速回答：SELECT
    别名尚未被评估，因此 SQL 引擎没有你给定的别名的上下文，因此失败了。*（一些现代 SQL 供应商进行了一些优化以避免这个问题，但并非所有 SQL 提供商都适用，我们仍应注意这一点）*。'
- en: '**Tips On Writing SQL In L**ogical Query Processing Order'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**编写 SQL 的技巧：逻辑查询处理顺序**'
- en: We can still write “SELECT” first, but only those 6 letters; use it as a placeholder
    to remind us to fill in the remaining content when it’s ready.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们仍然可以先写“SELECT”，但只写这 6 个字母；将其作为占位符，以提醒我们在内容准备好时填入剩余的内容。
- en: Think in the ETL manner, the data preparation is crucial to set the foundation
    for the rest of work. So the first thing to focus is getting **FROM, ON, and JOIN**
    statements right.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 ETL 角度思考，数据准备对于为其他工作奠定基础至关重要。因此，首先需要关注的是正确编写**FROM、ON 和 JOIN** 语句。
- en: If you encounter errors, follow the logical query processing order to debug.
    `SELECT *` is terrible in production, but we can still use it for debugging. We
    can further prevent ourselves pulling too much data by LIMIT clause.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果遇到错误，请按照逻辑查询处理顺序进行调试。`SELECT *` 在生产环境中很糟糕，但我们仍然可以在调试中使用它。我们还可以通过 LIMIT 子句进一步防止拉取过多的数据。
- en: Final Thoughts
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终思考
- en: If you write SQL top to bottom and this approach gives you some trouble in thinking
    SQL clearly, you should consider comprehending the SQL logical query processing
    order and practice this way.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从上到下编写 SQL 并且这种方法让你在思考 SQL 时感到困扰，你应该考虑理解 SQL 逻辑查询处理顺序并进行这种练习。
- en: I learned this approach early when I prepare for Microsoft Exam 70–461, and
    [Itzik Ben-Gan](https://www.amazon.com/stores/Itzik-Ben-Gan/author/B001IGQENW?ref=ap_rdr&store_ref=ap_rdr&isDramIntegrated=true&shoppingPortalEnabled=true)
    has a great book [Querying Microsoft SQL Server 2012 (MCSA)](https://www.amazon.com/Training-70-461-Querying-Microsoft-Server/dp/0735666059).
    What is great about this book is that he explained very well on fundamentals of
    SQL compare to other books are collection of fancy syntaxes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我在准备 Microsoft Exam 70–461 时很早就学到了这种方法，[Itzik Ben-Gan](https://www.amazon.com/stores/Itzik-Ben-Gan/author/B001IGQENW?ref=ap_rdr&store_ref=ap_rdr&isDramIntegrated=true&shoppingPortalEnabled=true)
    有一本很棒的书 [Querying Microsoft SQL Server 2012 (MCSA)](https://www.amazon.com/Training-70-461-Querying-Microsoft-Server/dp/0735666059)。这本书的优点在于它对
    SQL 基础的解释远胜于其他书籍中那些花哨的语法。
- en: Thinking in SQL is critical. You can reason why things happen like this and
    quickly resolve the errors. Additional, it helps you better structure your code
    for solving the complex queries in a more organized way.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 思考 SQL 是至关重要的。你可以推理事情为何如此发生，并迅速解决错误。此外，它帮助你更好地组织代码，以更有条理的方式解决复杂查询。
- en: 'I hope this story is helpful to you. This article is **part of a series** of
    my engineering & data science stories that currently consist of the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个故事对你有帮助。本文是我工程与数据科学故事的**系列之一**，目前包括以下内容：
- en: '![Chengzhi Zhao](../Images/51b8d26809e870b4733e4e5b6d982a9f.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Chengzhi Zhao](../Images/51b8d26809e870b4733e4e5b6d982a9f.png)'
- en: '[Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----476a67f53a59--------------------------------)'
- en: Data Engineering & Data Science Stories
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据工程与数据科学故事
- en: '[View list](https://chengzhizhao.medium.com/list/data-engineering-data-science-stories-ddab37f718e7?source=post_page-----476a67f53a59--------------------------------)53
    stories![](../Images/8b5085966553259eef85cc643e6907fa.png)![](../Images/9dcdca1fc00a5694849b2c6f36f038d4.png)![](../Images/2a6b2af56aa4d87fa1c30407e49c78f7.png)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://chengzhizhao.medium.com/list/data-engineering-data-science-stories-ddab37f718e7?source=post_page-----476a67f53a59--------------------------------)53
    个故事![](../Images/8b5085966553259eef85cc643e6907fa.png)![](../Images/9dcdca1fc00a5694849b2c6f36f038d4.png)![](../Images/2a6b2af56aa4d87fa1c30407e49c78f7.png)'
- en: You can also [**subscribe to my new articles**](https://chengzhizhao.medium.com/subscribe)
    or become a [**referred Medium member**](https://chengzhizhao.medium.com/membership)who
    gets unlimited access to all the stories on Medium.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以[**订阅我的新文章**](https://chengzhizhao.medium.com/subscribe)或成为[**推荐的 Medium
    会员**](https://chengzhizhao.medium.com/membership)，享受对 Medium 上所有故事的无限访问权限。
- en: In case of questions/comments, **do not hesitate to write in the comments**
    of this story or **reach me directly** through [Linkedin](https://www.linkedin.com/in/chengzhizhao/)
    or [Twitter](https://twitter.com/ChengzhiZhao).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如有问题/评论，**请随时在本文评论区留言**，或通过[Linkedin](https://www.linkedin.com/in/chengzhizhao/)或[Twitter](https://twitter.com/ChengzhiZhao)
    **直接联系我**。
