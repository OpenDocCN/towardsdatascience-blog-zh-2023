- en: 'The Magic of Quantum Computing: A Beginner’s Guide to Writing a Magic Number
    Guessing Game'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 量子计算的魔力：编写魔法数字猜测游戏的初学者指南
- en: 原文：[https://towardsdatascience.com/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457](https://towardsdatascience.com/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457](https://towardsdatascience.com/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457)
- en: Tutorial
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程
- en: Programming a quantum computer is fun!
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程量子计算机很有趣！
- en: '[](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)[![Kory
    Becker](../Images/53a2493fe53f215d3e715d456b36c553.png)](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)
    [Kory Becker](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)[![Kory
    Becker](../Images/53a2493fe53f215d3e715d456b36c553.png)](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)
    [Kory Becker](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)
    ·9 min read·Feb 10, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)
    ·9 分钟阅读·2023年2月10日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6931c4891a0299efe800b4c0f900ef11.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6931c4891a0299efe800b4c0f900ef11.png)'
- en: 'Source: [Stable Diffusion](https://stablediffusionweb.com/).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[稳定扩散](https://stablediffusionweb.com/)。
- en: From Classical to Quantum
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从经典到量子
- en: I’m not sure exactly what it is about quantum computing that brings such a sense
    of amazement and intrigue, but it definitely feels refreshingly different than
    programming a classical computer. The field of quantum computing is still young
    and filled with potential, opening the door to many possibilities for individuals,
    *just like you*, to make an impact.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定量子计算到底是什么让人如此惊叹和着迷，但它确实感觉与编程经典计算机截然不同。量子计算领域仍然年轻且充满潜力，为像*你一样*的人开辟了许多可能性。
- en: I’ve often found that one of the best ways to learn about a technology is through
    games. What better way to learn about quantum computing than to write your own
    game?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现，了解一种技术的最佳方式之一就是通过游戏。还有什么比编写自己的游戏更好的方式来了解量子计算呢？
- en: The Design of a Simple Game
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单游戏的设计
- en: We’re going to use Python and the open-source quantum computing library called
    Qiskit, to write a Magic Number Guessing game.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Python 和一个名为 Qiskit 的开源量子计算库，来编写一个魔法数字猜测游戏。
- en: Our game is very simple, but will be powered by the properties of quantum computing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏非常简单，但将由量子计算的特性驱动。
- en: 'Our game will have the following design:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏将具有以下设计：
- en: The quantum computer will generate a random number from 0 to 15.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 量子计算机将生成一个从 0 到 15 的随机数字。
- en: The player will have to guess the number.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家将需要猜测这个数字。
- en: At each round, we’ll tell the player if they are too low or too high.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每一轮中，我们会告诉玩家他们的猜测是否过低或过高。
- en: What a fantastic way to get started with quantum computing programming!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种很棒的方式来开始量子计算编程！
- en: Let’s get started!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: The Fun of Quantum Computing
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 量子计算的乐趣
- en: Often, when we think about quantum computing, one of the first topics that come
    to mind is the idea of bits being represented simultaneously as zero and one.
    This is a behavior of microscopic particles that we call [superposition](https://en.wikipedia.org/wiki/Quantum_superposition).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们想到量子计算时，首先想到的主题之一是比特同时表示为零和一的想法。这是我们称之为[叠加态](https://en.wikipedia.org/wiki/Quantum_superposition)的微观粒子的行为。
- en: Just imagine it. At the microscopic level, the entire world behaves in a completely
    different manner that we’re used to. Particles spin and exist in multiple states.
    Sometimes, they may even pop in and out of existence. They can even travel through
    physical walls; a behavior called [quantum tunneling](https://rpubs.com/primaryobjects/quantum-tunneling)!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下。在微观层面上，整个世界的行为方式与我们习惯的完全不同。粒子旋转并存在于多个状态。有时，它们甚至可能出现或消失。它们甚至可以穿过物理墙壁，这种行为称为
    [量子隧穿](https://rpubs.com/primaryobjects/quantum-tunneling)！
- en: And yet, we can harness these amazing effects by programming a quantum computer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以通过编程量子计算机来利用这些惊人的效果。
- en: Since one of the most powerful properties of quantum computing is the idea of
    representing a bit of information simultaneously as both a zero and a one, it’s
    one of the first logical gates that beginners learn about when building their
    first quantum circuit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于量子计算最强大的特性之一是同时表示零和一的位的信息，这也是初学者在构建第一个量子电路时最先学习的逻辑门之一。
- en: When a Bit is a Qubit
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当一个位是量子位
- en: A bit on a classical computer can hold a value of zero or one, but certainly
    not both at the same time. However, a qubit on a quantum computer can hold a value
    of both zero and one at the same time, enabling superposition, until measured.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 经典计算机上的一个位可以保存零或一的值，但绝对不能同时保存两者。然而，量子计算机上的量子位可以同时保存零和一的值，实现叠加态，直到被测量。
- en: We will use the powerful effect of superposition as the core piece to our game.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用叠加态的强大效应作为我们游戏的核心部分。
- en: On a quantum computer, the [Hadamard](https://qiskit.org/textbook/ch-states/single-qubit-gates.html#hgate)
    gate is used to place a qubit into superposition. When this is done, we can measure
    the qubit and receive back a random value of zero or one. That is, half of the
    time when we measure the qubit we will receive a result of zero, while the other
    half of the time we will receive a value of one.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在量子计算机上，[哈达玛门](https://qiskit.org/textbook/ch-states/single-qubit-gates.html#hgate)
    用于将量子位置于叠加态。当这样做时，我们可以测量量子位并得到一个随机的零或一的值。也就是说，我们在测量量子位时，半数时间会得到零，另一半时间会得到一。
- en: Since a qubit has a *50/50* chance of measuring either a zero or a one, we can
    use this effect to randomly generate a bit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于量子位有 *50/50* 的机会测量到零或一，我们可以利用这种效应来随机生成一个位。
- en: Generating Random Numbers
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机数
- en: Now that we know that we can use the Hadamard gate to create a random number
    of zero or one on a quantum computer, let’s extend this idea to four qubits. This
    gives us the ability to generate four random bits, which when converted to an
    integer, results in a value from 0 to 15.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道可以使用哈达玛门在量子计算机上生成零或一的随机数，让我们将这个想法扩展到四个量子位。这使我们能够生成四个随机位，当它们转换为整数时，结果在
    0 到 15 之间。
- en: This capability for generating random numbers within a specific range will be
    used as a key part for our game.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定范围内生成随机数的能力将作为我们游戏的关键部分。
- en: Generating a Random Number on a Classical Computer
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在经典计算机上生成随机数
- en: Before diving into the quantum computing part, let’s first see how to generate
    some random numbers on a classical computer. This will allow us to compare the
    results of the random numbers generated on a classical computer to those on a
    quantum computer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入量子计算部分之前，让我们首先看看如何在经典计算机上生成一些随机数。这将使我们能够比较经典计算机和量子计算机上生成的随机数的结果。
- en: Using Python, we can generate pseudo-random numbers quite easily using the following
    example code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python，我们可以通过以下示例代码轻松生成伪随机数。
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above code generates a random number from 0 to 15, resulting in the following
    array of values: [14, 7, 14, 10, 11, 6, 11, 10, 1, 9].'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了一个从 0 到 15 的随机数，结果为以下值数组：[14, 7, 14, 10, 11, 6, 11, 10, 1, 9]。
- en: If we draw a histogram of 300 random numbers generated from this method, we
    can see the graph displayed below.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们绘制一个从这种方法生成的 300 个随机数的直方图，我们可以看到下面显示的图形。
- en: '![](../Images/2b3830a29cf21ed3841802e715e04e1b.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b3830a29cf21ed3841802e715e04e1b.png)'
- en: 'The distribution of 300 random numbers generated with the Python random() module.
    Source: Author.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 的 random() 模块生成的 300 个随机数的分布。来源：作者。
- en: Notice, how each number occurs relatively equal in comparison to the others.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每个数字出现的频率相对平等，与其他数字相比。
- en: '*This seems to be pretty random!*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*这似乎非常随机！*'
- en: Generating a Random Number from Superposition
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从叠加态生成随机数
- en: Let’s take this into the quantum world.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其引入量子世界。
- en: Just as we’ve done with the classical computer method, now we’re going to use
    superposition with four qubits in order to generate four random bits that we can
    use to represent a number from 0 to 15.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在经典计算机方法中做的那样，现在我们将使用四个量子比特的叠加态来生成四个位的随机数，用于表示从 0 到 15 的数字。
- en: We can use the following code below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above example creates a quantum circuit using the Hadamard gate on each
    qubit to place them into superposition. We then measure the qubits to read the
    random values of zero or one for each.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例创建了一个量子电路，使用 Hadamard 门对每个量子比特进行操作，将它们置于叠加态。然后我们测量量子比特，读取每个量子比特的随机值，可能是零或一。
- en: Here is what the quantum circuit looks like when we draw it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是绘制出的量子电路的样子。
- en: '![](../Images/fa48da375bd32aa6db50de128c72be2c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa48da375bd32aa6db50de128c72be2c.png)'
- en: 'A quantum computing circuit for generating a 4-bit random number using superposition
    and the Hadamard gate. Source: Author, generated by Qiskit.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用叠加态和 Hadamard 门生成 4 位随机数的量子计算电路。来源：作者，生成于 Qiskit。
- en: As you can see, we’re simply using an H-gate on each qubit and measuring the
    resulting value.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们只是在每个量子比特上使用了 H 门，并测量了结果值。
- en: 'You’re probably wondering how the results compare to the classical method before?
    As it turns out, this method does indeed generate random numbers, as shown in
    the following array: [8, 11, 4, 2, 13, 9, 7, 12, 15, 13].'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道这些结果与之前的经典方法相比如何？事实证明，这种方法确实可以生成随机数，如下数组所示：[8, 11, 4, 2, 13, 9, 7, 12,
    15, 13]。
- en: We can draw a histogram of the random numbers to confirm the distribution of
    random values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以绘制随机数的直方图，以确认随机值的分布。
- en: '![](../Images/078094b4342498d53a79f69270cfc403.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/078094b4342498d53a79f69270cfc403.png)'
- en: 'The distribution of 300 random numbers generated with superposition. Source:
    Author.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用叠加态生成的 300 个随机数的分布。来源：作者。
- en: Just like the classical computing method, this too, seems to be quite random!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像经典计算方法一样，这种方法也似乎相当随机！
- en: Generating a Random Number from Quantum Noise
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从量子噪声中生成随机数
- en: Using superposition to generate random numbers is easy enough. It’s simple and
    straight-forward.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用叠加态生成随机数非常简单，直接明了。
- en: However, we can also generate random numbers on a quantum computer by using
    the property of quantum noise.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们也可以通过利用量子噪声的特性在量子计算机上生成随机数。
- en: When a quantum gate is executed, there is a tiny bit of [noise](https://arxiv.org/pdf/0802.1639.pdf)
    (or error) that can effect the gate. It’s this tiny amount of noise that we can
    harness to generate random numbers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当量子门执行时，会有微小的[噪声](https://arxiv.org/pdf/0802.1639.pdf)（或错误）可能影响门操作。正是这微小的噪声我们可以利用来生成随机数。
- en: Luckily, the Qiskit library makes it easy to take advantage of quantum noise.
    There have even been other [projects](https://github.com/rochisha0/quantum-ugly-duckling)
    that use this very feature for [random number generation](https://github.com/rochisha0/quantum-ugly-duckling/blob/main/quantum-ugly-duckling-main/nqrng.py).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Qiskit 库使得利用量子噪声变得简单。甚至还有其他[项目](https://github.com/rochisha0/quantum-ugly-duckling)利用这一特性进行[随机数生成](https://github.com/rochisha0/quantum-ugly-duckling/blob/main/quantum-ugly-duckling-main/nqrng.py)。
- en: Below is an example of setting up a quantum circuit to take advantage of noise.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是设置量子电路以利用噪声的示例。
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The above code initializes quantum noise for the various gates that we will
    be using in our program.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码初始化了我们将在程序中使用的各种门的量子噪声。
- en: Once we have the noise ready, we can create a quantum circuit to generate random
    numbers from noise by using the following code below.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦噪声准备好，我们可以通过以下代码创建一个量子电路，从噪声中生成随机数。
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The above code creates a quantum circuit as shown below.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了如下所示的量子电路。
- en: '![](../Images/9f8289bc579f624949ccb60798f56afc.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f8289bc579f624949ccb60798f56afc.png)'
- en: 'A quantum computing circuit for generating a 4-bit random number using quantum
    noise. Source: Author, generated by Qiskit.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用量子噪声生成 4 位随机数的量子计算电路。来源：作者，生成于 Qiskit。
- en: Notice that we’re using the U-Gate combined with a controlled-not (CX) gate
    in order to generate the required noise.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了 U 门与一个受控非门（CX 门）的组合来生成所需的噪声。
- en: You may have noticed the for-loop in the quantum circuit. We need to run the
    circuit a number of times in order to magnify the noise that is generated. Otherwise,
    our random numbers will be heavily skewed towards a zero or one, rather than randomly
    distributed. It’s important to balance the iterations of the loop versus the randomness
    of the numbers, as the longer the circuit, the longer it will take to run.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到了量子电路中的for循环。我们需要多次运行电路以放大生成的噪声。否则，我们的随机数将严重倾斜到零或一，而不是随机分布。平衡循环的迭代次数与数字的随机性非常重要，因为电路越长，运行时间也会越长。
- en: Finally, we measure the resulting four qubits to obtain random values.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们测量结果的四个量子比特以获得随机值。
- en: 'Once again, the resulting output, indeed, appears quite random, as shown in
    the following array: [4, 0, 6, 9, 2, 9, 15, 5, 2, 12].'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，结果输出确实显得相当随机，如下数组所示：[4, 0, 6, 9, 2, 9, 15, 5, 2, 12]。
- en: '![](../Images/83bc89638c8142485a7de942a0e06127.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83bc89638c8142485a7de942a0e06127.png)'
- en: 'The distribution of 300 random numbers generated using quantum noise. Source:
    Author.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用量子噪声生成的300个随机数的分布。来源：作者。
- en: Creating the Magic Number Game
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建魔法数字游戏
- en: Now that we’re ready to implement the game, we need to choose a method for generating
    the random numbers that will be used.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好实现游戏了，我们需要选择一种生成将要使用的随机数的方法。
- en: Both quantum computing approaches (superposition and noise) would equally suffice.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 两种量子计算方法（叠加和噪声）都同样有效。
- en: The superposition method is more commonly used for generating randomness, as
    it uses a simpler circuit, while the noise method takes advantage of distinct
    qualities of quantum computing gates. In fact, each technique can be equally interchangeable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 叠加方法更常用于生成随机性，因为它使用更简单的电路，而噪声方法则利用量子计算门的独特特性。实际上，每种技术都可以互换使用。
- en: However, let’s move forward with the method of using quantum noise, a more unique
    approach, and implement this in our game.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，让我们继续使用量子噪声的方法，这是一个更独特的方式，并在我们的游戏中实现它。
- en: Wrapping quantum into a classical function
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将量子封装到经典函数中
- en: To keep things tidy, we’ll wrap our noisy quantum circuit into a Python method
    called *random_number*. We can call this method to choose our magic number for
    the player to guess.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持整洁，我们将嘈杂的量子电路封装到一个名为*random_number*的Python方法中。我们可以调用这个方法来选择玩家需要猜测的魔法数字。
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once we have a magic number generated, we start a game loop. At each round,
    we’ll ask the user to input a guess from 0 to 15 and tell the player if their
    guess is too low or too high.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成了魔法数字，我们就开始游戏循环。在每一轮中，我们会要求用户输入一个从0到15的猜测，并告诉玩家他们的猜测是太低还是太高。
- en: The code for the game is shown below.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的代码如下所示。
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That’s really all there is to it!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！
- en: Lights, Camera, Action!
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灯光、摄像、动作！
- en: As you can see, our game is very simple in nature. However, the game demonstrates
    the capability of a quantum computer to generate a random number, which is, of
    course, a key part to this game.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们的游戏本质上非常简单。然而，游戏展示了量子计算机生成随机数的能力，这当然是这个游戏的关键部分。
- en: There is amazing potential to expand on this idea much further. Imagine the
    possibilities for adding graphics, game mechanics, event 3D or virtual reality
    effects into a game — all powered with quantum computing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法有惊人的潜力可以进一步扩展。想象一下将图形、游戏机制、事件3D或虚拟现实效果添加到游戏中的可能性——所有这些都由量子计算提供动力。
- en: The simple act of generating a quantum random number can power the key pieces
    behind your game design.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 生成量子随机数的简单动作可以为你游戏设计中的关键部分提供动力。
- en: Give Me Speed
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给我速度
- en: Now, it is important to note, there is a consideration with regard to speed
    of execution on a quantum computer. After all, processing a quantum circuit on
    a simulator or physical quantum computer (such as IBM Quantum) may require significant
    processing time and delays.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重要的是要注意，在量子计算机上执行速度的考虑。毕竟，在模拟器或物理量子计算机（例如IBM Quantum）上处理量子电路可能需要显著的处理时间和延迟。
- en: For now, however, games can still serve as an excellent proof of concept and
    learning opportunity. In addition, quantum simulators and hardware are improving
    every year.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，游戏仍然可以作为一个优秀的概念验证和学习机会。此外，量子模拟器和硬件每年都在改善。
- en: So stick with it and learn all that you can!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所以坚持下去，尽可能多地学习！
- en: Excited Yet?
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你兴奋了吗？
- en: I hope that you’re as excited as I am about quantum computing and its potential
    application to a vast array of computer problems.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你和我一样对量子计算及其在各种计算问题中的潜在应用感到兴奋。
- en: Now that you’ve learned how to use the Python Qiskit quantum computing library,
    along with superposition or quantum noise, you can easily generate random numbers
    for a multitude of purposes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用Python Qiskit量子计算库，以及叠加态或量子噪声，你可以轻松地为各种用途生成随机数。
- en: Of course, the fun of quantum computing goes well beyond random numbers. There
    are an ever-growing volume of quantum algorithms that take full advantage of the
    quantum process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，量子计算的乐趣远不仅仅是随机数。不断增长的量子算法充分利用了量子过程。
- en: This is only the tip of the iceberg!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅是冰山一角！
- en: The Future is Wide Open
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来一片广阔
- en: Now that you know how to create random numbers with quantum computing, it’s
    time to make your own applications and games!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经知道了如何用量子计算生成随机数，那么是时候制作你自己的应用程序和游戏了！
- en: You can download the complete code example for the Magic Number Guessing game
    [here](https://gist.github.com/primaryobjects/e1a5ba52da6d482e0f00d3e2e8a590fe).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://gist.github.com/primaryobjects/e1a5ba52da6d482e0f00d3e2e8a590fe)下载完整的魔法数字猜测游戏代码示例。
- en: About the Author
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: If you’ve enjoyed this article, please consider following me on [Medium](https://medium.com/@KoryBecker),
    [Twitter](https://twitter.com/PrimaryObjects), and my [web site](https://primaryobjects.com)
    to be notified of my future posts and research work.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，请考虑在[Medium](https://medium.com/@KoryBecker)、[Twitter](https://twitter.com/PrimaryObjects)和我的[网站](https://primaryobjects.com)上关注我，以便获取我未来的文章和研究工作通知。
