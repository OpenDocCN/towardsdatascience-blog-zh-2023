- en: Evolutionary Algorithm — Selections Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进化算法 — 选择解释
- en: 原文：[https://towardsdatascience.com/evolutionary-algorithm-selections-explained-2515fb8d4287](https://towardsdatascience.com/evolutionary-algorithm-selections-explained-2515fb8d4287)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/evolutionary-algorithm-selections-explained-2515fb8d4287](https://towardsdatascience.com/evolutionary-algorithm-selections-explained-2515fb8d4287)
- en: Understand what goes on, with visualization and code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解发生的过程，通过可视化和代码
- en: '[](https://medium.com/@byjameskoh?source=post_page-----2515fb8d4287--------------------------------)[![James
    Koh, PhD](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----2515fb8d4287--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2515fb8d4287--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2515fb8d4287--------------------------------)
    [James Koh, PhD](https://medium.com/@byjameskoh?source=post_page-----2515fb8d4287--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@byjameskoh?source=post_page-----2515fb8d4287--------------------------------)[![James
    Koh, PhD](../Images/8e7af8b567cdcf24805754801683b426.png)](https://medium.com/@byjameskoh?source=post_page-----2515fb8d4287--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2515fb8d4287--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2515fb8d4287--------------------------------)
    [James Koh, PhD](https://medium.com/@byjameskoh?source=post_page-----2515fb8d4287--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2515fb8d4287--------------------------------)
    ·8 min read·Nov 4, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----2515fb8d4287--------------------------------)
    ·阅读时间8分钟·2023年11月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a196f197fbda7a28f3ddab8d2b5563e8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a196f197fbda7a28f3ddab8d2b5563e8.png)'
- en: Image created by DALL·E 3 based on the prompt “Draw a science-fiction themed
    image that depicts parent selection in evolutionary algorithm.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由DALL·E 3根据提示“绘制一幅科幻主题的图像，描绘进化算法中的父代选择”创建。
- en: The Travelling Salesman Problem (TSP) is a well-known np-hard problem, that
    has obvious practical applications in real life. For example, this is useful if
    one is planning a trip around Europe and estimates the point-to-point travel time
    between sites.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 旅行商问题（TSP）是一个著名的NP难题，具有明显的现实应用。例如，如果有人计划一次环游欧洲的旅行，并估计各站点之间的旅行时间，这就非常有用。
- en: With just a mere 30 cities, there would be over 10³⁰ possible permutations.
    To solve TSP with 30 cities by brute force is not feasible (The number of grains
    of sand on Earth is ‘only’ 10¹⁹).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅30个城市就会有超过10³⁰种可能的排列。通过暴力破解方法解决30个城市的TSP是不可行的（地球上的沙粒数量“仅为”10¹⁹）。
- en: By the end of this article, solving such problems with Evolutionary Algorithm
    (EA) will be easy for you. You will be able to get the following result yourself.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本文，使用进化算法（EA）解决这些问题将变得轻而易举。你将能够自己获得以下结果。
- en: Solution improvement process obtained by Evolutionary Algorithm. Gif by author.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进化算法获得的解决方案改进过程。Gif由作者提供。
- en: More importantly, you will understand what exactly goes on behind the scenes,
    and how each component (specifically the various types of mutations) contribute
    to the solution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，你将了解幕后究竟发生了什么，以及每个组件（特别是各种类型的突变）如何对解决方案作出贡献。
- en: 1\. Value Proposition
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 价值主张
- en: Many guides incorrectly use the words Genetic Algorithm (GA) and Evolutionary
    Algorithm (EA) interchangeably.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多指南错误地将遗传算法（GA）和进化算法（EA）互换使用。
- en: 'GA, in its canonical form, involves the following elements [1]:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GA在其标准形式中涉及以下元素[1]：
- en: 1\. Representation — bit strings
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 表示 — 位串
- en: 2a. Parent selection — proportional to fitness
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2a. 父代选择 — 与适应度成比例
- en: 2b. Recombination — one-point crossover
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2b. 交叉 — 单点交叉
- en: 3\. Mutation — bit flip
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 突变 — 位翻转
- en: 4\. Survival selection — next generation
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 生存选择 — 下一代
- en: GA is a subset of EA.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: GA是EA的一个子集。
- en: In this guide, we cover aspects of EA that are not discussed in GA. In particular,
    we will focus on aspects pertaining to **permutation** representation, explaining
    with intuitive visualizations and code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们涵盖了GA中未讨论的EA方面。特别是，我们将重点关注**排列**表示方面，通过直观的可视化和代码进行解释。
- en: 2\. Definitions
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 定义
- en: Before moving further, we need to be clear on the use of terminologies [2].
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步讨论之前，我们需要明确术语的使用[2]。
- en: Phenotypes
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表型
- en: The solutions within the original problem context. These are to be interpreted
    ‘as is’ without any decoding; and are agnostic to how the solutions are even derived.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 原始问题背景中的解决方案。这些解决方案需要“按原样”解释，无需任何解码；并且与解决方案的推导方式无关。
- en: Genotypes
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基因型
- en: The encodings that represent the phenotype. This may be a string of bits, integers,
    or even floats. A deterministic mapping converts each genotype into the corresponding
    phenotype.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表示表型的编码。这可能是比特串、整数，甚至是浮点数。确定性映射将每个基因型转换为对应的表型。
- en: Fitness
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适应度
- en: A measure from some function that serves as the basis for selection. It allows
    us to compare between two genotypes (and hence two solutions) and define which
    is ‘better’.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从某个函数中得出的度量，作为选择的基础。它使我们能够比较两个基因型（因此也比较两个解决方案），并定义哪个更“好”。
- en: Population
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 种群
- en: Collection of individual genotypes, typically of a constant size. Through iterations,
    members of the population change through the process of recombination, mutation,
    and survivor selection.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由个体基因型组成的集合，通常具有恒定的大小。通过迭代，种群成员通过重组、突变和生存者选择的过程发生变化。
- en: Recombination
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重组
- en: A binary variation, where two offspring are created from two parent genotypes,
    blending their attributes in the process.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一种二进制变异，其中两个后代从两个父代基因型中创建，在这个过程中混合它们的属性。
- en: Mutation
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突变
- en: A unary variation performed on a single genotype. The change is random, and
    it serves to maintain diversity in the population.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对单一基因型执行的一元变异。变化是随机的，旨在保持种群的多样性。
- en: Survivor Selection
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生存者选择
- en: The process of determining which individuals (as represented by their genotype)
    will remain in the population for the next generation. The objective is to retain
    the most promising selections, with diversity maintained to foster potential future
    improvements.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 确定哪些个体（由其基因型表示）将在下一代中保留下来的过程。目标是保留最有前途的选择，同时保持多样性，以促进未来的潜在改进。
- en: 3\. Outline
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 大纲
- en: EA follows the following framework.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 进化算法遵循以下框架。
- en: '![](../Images/5a9ca78c7ba1dfcc9e5991734dd184c5.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a9ca78c7ba1dfcc9e5991734dd184c5.png)'
- en: Image by author. Inspired by Figure 3.2 of [2].
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。灵感来自于[2]中的图3.2。
- en: 3.1 — Initialization; Representation
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.1 — 初始化；表示
- en: Before even talking about any sort of math or code, we need to frame the problem
    and formulate the genotype such that it maps to the solution space appropriately.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论任何数学或代码之前，我们需要框定问题并制定基因型，以便它能适当地映射到解决方案空间。
- en: EA goes beyond binary and permutation representations, but we will not delve
    further here.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 进化算法超越了二进制和排列表示，但我们在这里不进一步探讨。
- en: The population will then be initialized with random copies of the appropriate
    genotype.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将种群初始化为适当基因型的随机副本。
- en: 3.1.1 (Why not) Binary Representation
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1.1（为什么不）二进制表示
- en: Using bits to represent the genotype is a natural choice, as this reflects reality.
    Human, as well as other organisms, has DNA as its genetic material. We can think
    of a DNA sequence as a string of 1’s and 0’s, in place of ‘A-T’ and ‘C-G’.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用比特来表示基因型是一个自然的选择，因为这反映了现实。人类以及其他生物都拥有DNA作为遗传物质。我们可以将DNA序列视为1和0的字符串，而不是‘A-T’和‘C-G’。
- en: Binary representation works beautifully when the inherent problem involves binary
    decisions — the perfect example is a knapsack problem, where each bit indicates
    whether or not that corresponding item is selected.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当固有问题涉及二进制决策时，二进制表示效果非常好——一个完美的例子是背包问题，其中每个比特表示该对应物品是否被选中。
- en: Even though everything can be represented in bits, it is not appropriate to
    use bits for representing solutions to non-binary problems.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一切都可以用比特表示，但对于非二进制问题的解决方案，使用比特表示是不适当的。
- en: Mutation is supposed to change the solution with equal probabilities, and ensure
    that the ensuing solution is valid. Changing a number 7 (0111) to 8 (1000) requires
    four bit flips, while changing it to 3 (0011) or 5 (0101) or 6 (0110) requires
    only one bit flip — the odds are different. Using Gray coding [3] is insufficient
    to resolve this discrepancy in Hamming distance, and insisting on such representation
    will lead to the evolution process being skewed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 突变应该以相等的概率改变解决方案，并确保随之产生的解决方案是有效的。将数字7（0111）变为8（1000）需要四次比特翻转，而将其变为3（0011）、5（0101）或6（0110）只需一次比特翻转——概率是不同的。使用灰码[3]不足以解决这种汉明距离的差异，坚持这种表示方式会导致进化过程的偏差。
- en: Furthermore, adjustments may be required after recombination and/or mutation,
    if a binary representation is used to represent a permutation. This is because
    each index much occur exactly once, and the resulting genotype might correspond
    to an invalid phenotype.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果使用二进制表示法来表示排列，在重组和/或变异后可能需要进行调整。这是因为每个索引必须恰好出现一次，结果基因型可能对应于一个无效的表现型。
- en: 3.1.2 Permutation Representation
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1.2 排列表示法
- en: This brings us to using permutations as the genotype. Apart from TSP, this is
    also applicable to problems requiring us to select a sequence. It could be a sequence
    of place to visit, a sequence of tasks to complete, assigning matches, or the
    placement of inventory in a warehouse.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了将排列作为基因型的使用。除了旅行商问题（TSP），这也适用于需要我们选择一个序列的问题。这可以是访问地点的序列、完成任务的序列、分配匹配或仓库中库存的放置。
- en: Having the genotype as a sequence of indices is ideal here, because we can be
    assured of a valid phenotype after variations. For example, if there are 12 cities
    to choose from, the genotype can be `[9,2,6,1,7,8,11,0,4,3,10,5]`. We will see
    that there are multiple ways to perform variations while ensuring that each integer
    appears exactly once.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将基因型作为索引序列在这里是理想的，因为我们可以确保在变异后得到有效的表现型。例如，如果有12个城市可以选择，基因型可以是`[9,2,6,1,7,8,11,0,4,3,10,5]`。我们将看到有多种方法可以进行变异，同时确保每个整数出现恰好一次。
- en: We can begin with the following outline to generate a population. (For conciseness,
    I am excluding the importing of libraries as those are trivial.)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从以下提纲开始生成一个种群。（为了简洁起见，我省略了库的导入，因为这些是微不足道的。）
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 3.2 — Parent selection
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.2 — 父代选择
- en: In EA, the process of parent selection, variation, and survival selection happens
    iteratively to ensure that the population as a whole improves across generations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在进化算法（EA）中，父代选择、变异和生存选择的过程是迭代进行的，以确保整个种群在代际之间不断改进。
- en: If any of the three steps is not implemented correctly, the whole algorithm
    can fall apart.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何一个步骤实施不正确，整个算法可能会崩溃。
- en: Parent selection, as one of the three pillars, is important because offspring
    are variants of their parents. Recall that each individual is actually a genotype,
    which is a representation of a candidate solution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 父代选择，作为三大支柱之一，很重要，因为后代是其父代的变体。请记住，每个个体实际上是一个基因型，它代表了一个候选解决方案。
- en: When we combine two parents, and apply recombination (Section 3.3.1) to obtain
    new genotypes, what really happens is that aspects of two solutions are blended
    together, resulting in new candidate solutions. While it is not a guarantee that
    parents of higher fitness lead to better offspring, the odds will be in our favor.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们结合两个父代，并应用重组（第3.3.1节）以获得新的基因型时，实际上发生的情况是将两个解决方案的各个方面混合在一起，结果产生新的候选解决方案。虽然不能保证高适应度的父代会导致更好的后代，但机会会倾向于对我们有利。
- en: Nonetheless, we need to strike a balance between exploration and exploitation,
    just like in reinforcement learning. It is a bad idea to select the two fittest
    parents 100% of the time, because the lack of diversity would hinder us from finding
    the optimal solution [4].
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要在探索和利用之间找到平衡，就像在强化学习中一样。每次都选择最适应的两个父代不是一个好主意，因为缺乏多样性会阻碍我们找到最终解决方案[4]。
- en: 3.2.1 Roulette wheel for Parent selection
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2.1 轮盘赌选择父代
- en: The hypothetical roulette wheel has its area directly proportional to the fitness
    of each individual. Each area depicts the probability of selecting each respective
    individual as a parent.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设的轮盘赌的区域与每个个体的适应度成正比。每个区域表示选择各自个体作为父代的概率。
- en: '![](../Images/6dcf4b0cb0885b0a84a29e9e289b1a29.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6dcf4b0cb0885b0a84a29e9e289b1a29.png)'
- en: Illustration of probability of parent selection with respect to fitness, under
    the roulette wheel approach. Pie chart from Excel. Image by author.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过轮盘赌方法展示的父代选择概率相对于适应度的示意图。饼图来自Excel。图片由作者提供。
- en: A caveat is that the fitness values should be positive. Try the following yourself,
    and it speaks louder than a thousand words.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个警告是适应度值应为正值。自己尝试一下，这比千言万语更有说服力。
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will see that all negative weights have zero chance of being selected, and
    that a highly negative weight would be no different from a slightly negative weight.
    That’s not what we want in EA, because a somewhat poor solution should be significantly
    preferred over an extremely bad one.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你将发现所有负权重被选中的机会为零，而高度负的权重与稍微负的权重没有区别。这不是我们在进化算法（EA）中想要的，因为一个略微差的解决方案应当明显优于一个极其糟糕的解决方案。
- en: In TPS, one common way of representing the fitness is by negating the distance
    between cities (You will see the code in Section 4.1). In this case, we need to
    normalize the fitness such that they are positive. This could be done by subtracting
    from the minimum (ie. most negative) fitness, add then adding some small epsilon
    to that even the worse solution has a non-zero chance of being selected.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在TPS中，一种常见的适应度表示方法是通过否定城市之间的距离（你将在第4.1节看到代码）。在这种情况下，我们需要对适应度进行标准化，使其为正数。这可以通过从最小（即最负）适应度中减去，然后添加一些小的epsilon来完成，这样即使是最差的解也有非零的被选中机会。
- en: 'This choice of baseline is actually more important than it looks, and does
    require some discretion on the part of the data scientist. Consider the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基准选择实际上比看起来更重要，需要数据科学家的一些判断。考虑以下情况：
- en: '![](../Images/1447711bba42653252006c55bb8b33dc.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1447711bba42653252006c55bb8b33dc.png)'
- en: How fitness is defined is of relevance. In the case above, it certainly makes
    a difference whether a fitness of 100 was already ‘guaranteed’ and built-in, or
    whether *individual A* earned it and was effectively a worthy contender of the
    others.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 适应度的定义是相关的。在上面的例子中，适应度为100是否已经‘保证’并内置，或者*个体A*获得了它并且确实是其他个体的有力竞争者，这是有区别的。
- en: 3.2.2 Tournament for Parent selection
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2.2 父代选择的锦标赛
- en: Another popular approach is that of tournament selection. This approach is used
    to ensure that the fittest parents do not end up dominating most of the time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的方法是锦标赛选择。这种方法用于确保最适应的父代不会大多数时间占据主导地位。
- en: Here, what happens is that a small subset of the population is randomly selected,
    and the fittest individual among this group gets chosen. In the example below
    (where the circle size represents each individual’s respective fitness), the purple
    individual will be selected as the parent for this particular run.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里发生的情况是，随机选择一个小子集，并在这个群体中选择适应度最高的个体作为父代。在下面的例子中（其中圆圈大小表示每个个体的适应度），紫色个体将被选择作为此特定运行的父代。
- en: '![](../Images/d207643a7d36cf790d89a97d5b55f5cb.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d207643a7d36cf790d89a97d5b55f5cb.png)'
- en: Visualization of individuals in a population, proportional to their fitness.
    The purple circle is selected in this example of tournament selection. Image by
    author.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按照适应度比例显示个体在种群中的可视化。紫色圆圈在这个锦标赛选择的例子中被选中。图片由作者提供。
- en: The helps in maintaining diversity, which is an important aspect as mentioned
    at the beginning of Section 3.2\. Had roulette wheel selection been used, the
    chances of this purple individual being selected would be pretty low.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于维持多样性，这一点在第3.2节开始时已经提到。若使用轮盘赌选择法，该紫色个体被选择的机会会非常低。
- en: 'In code, tournament selection or roulette wheel for parent selection can be
    implemented as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，锦标赛选择或轮盘赌选择父代可以实现如下：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I’ve set the size of the sub-population to be 5, or 2% of the population, whichever
    is lower. You are, of course, free to change this number. The smaller these hyperparameters,
    the more exploration (and less exploitation) is performed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我将子群体的大小设置为5或总人口的2%，以较小者为准。你当然可以自由更改这个数字。这些超参数越小，探索（而非利用）就会越多。
- en: To Be Continued
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 待续
- en: In this article, you’ve learnt about the different components that make up EA,
    with the rationale for different approaches for parent selection being explored.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你了解了构成进化算法（EA）的不同组件，并探讨了不同父代选择方法的理由。
- en: That’s quite many new things to absorb in a single article. It’s already a 8
    minutes read-time, and there’s plenty more important concepts in EA that needs
    to be discussed. To keep the learning palatable, that’s it for this article.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一篇文章中要吸收这么多新知识确实不少。这已经有8分钟的阅读时间了，EA中还有很多重要概念需要讨论。为了让学习更易接受，这篇文章就到这里。
- en: In the next article, [**Evolutionary Algorithm — Mutations Explained**](/evolutionary-algorithm-mutations-explained-4a3b5c2d49de?sk=e3e2305821577766713f14b8240e8459),
    you will learn about recombination, mutation and survival selection. Recombination
    in permutation-based genotype is not as trivial as crossovers, but explanations
    will be supported with intuition, visualization and code such that it can be clearly
    understood even without prior experience. We will then put all the code together,
    and solve the TSP.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，[**进化算法——突变解析**](/evolutionary-algorithm-mutations-explained-4a3b5c2d49de?sk=e3e2305821577766713f14b8240e8459)，你将学习关于重组、突变和生存选择的内容。基于排列的基因型中的重组不像交叉那样简单，但解释将通过直观、可视化和代码来支持，以便即使没有先前的经验也能清晰理解。然后我们将把所有代码整合在一起，并解决旅行商问题。
- en: References
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] D. E. Goldberg, [Genetic Algorithms in Search, Optimization and Machine
    Learning](https://dl.acm.org/doi/10.5555/534133) (1989), Addison-Wesley'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] D. E. Goldberg, [搜索、优化与机器学习中的遗传算法](https://dl.acm.org/doi/10.5555/534133)
    (1989)，Addison-Wesley'
- en: '[2] A. E. Eiben and J. E. Smith, [Introduction to evolutionary computing](https://link.springer.com/book/10.1007/978-3-662-44874-8)
    (2015), Springer-Verlag Berlin Heidelberg'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] A. E. Eiben 和 J. E. Smith, [进化计算简介](https://link.springer.com/book/10.1007/978-3-662-44874-8)
    (2015)，Springer-Verlag Berlin Heidelberg'
- en: '[3] C. Faloutsos, [Multiattribute hashing using gray codes](https://dl.acm.org/doi/abs/10.1145/16894.16877)
    (1986), In Proceedings of the 1986 ACM SIGMOD international conference on Management
    of data'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] C. Faloutsos, [使用灰码的多属性哈希](https://dl.acm.org/doi/abs/10.1145/16894.16877)
    (1986)，发表于1986年ACM SIGMOD国际数据管理会议论文集'
- en: '[4] F. Vafaee, G. Turán, P. C. Nelson, and T. Y. Berger-Wolf, [Balancing the
    exploration and exploitation in an adaptive diversity guided genetic algorithm](https://ieeexplore.ieee.org/abstract/document/6900257)
    (2014), In 2014 IEEE Congress on Evolutionary Computation'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] F. Vafaee, G. Turán, P. C. Nelson 和 T. Y. Berger-Wolf, [在自适应多样性引导遗传算法中平衡探索与开发](https://ieeexplore.ieee.org/abstract/document/6900257)
    (2014)，发表于2014 IEEE进化计算大会'
