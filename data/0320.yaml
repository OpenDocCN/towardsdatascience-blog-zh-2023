- en: Validate a String as HTML Using SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SQL 验证字符串是否为 HTML
- en: 原文：[https://towardsdatascience.com/validate-a-string-as-html-using-sql-d70e81149a2?source=collection_archive---------14-----------------------#2023-01-19](https://towardsdatascience.com/validate-a-string-as-html-using-sql-d70e81149a2?source=collection_archive---------14-----------------------#2023-01-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/validate-a-string-as-html-using-sql-d70e81149a2?source=collection_archive---------14-----------------------#2023-01-19](https://towardsdatascience.com/validate-a-string-as-html-using-sql-d70e81149a2?source=collection_archive---------14-----------------------#2023-01-19)
- en: Is it possible to check if a string contains valid HTML using just SQL?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是否可以仅通过 SQL 检查字符串是否包含有效的 HTML？
- en: '[](https://medium.com/@dhruvbird?source=post_page-----d70e81149a2--------------------------------)[![Dhruv
    Matani](../Images/d63bf7776c28a29c02b985b1f64abdd3.png)](https://medium.com/@dhruvbird?source=post_page-----d70e81149a2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d70e81149a2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d70e81149a2--------------------------------)
    [Dhruv Matani](https://medium.com/@dhruvbird?source=post_page-----d70e81149a2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@dhruvbird?source=post_page-----d70e81149a2--------------------------------)[![Dhruv
    Matani](../Images/d63bf7776c28a29c02b985b1f64abdd3.png)](https://medium.com/@dhruvbird?source=post_page-----d70e81149a2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d70e81149a2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d70e81149a2--------------------------------)
    [Dhruv Matani](https://medium.com/@dhruvbird?source=post_page-----d70e81149a2--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F63f5d5495279&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-a-string-as-html-using-sql-d70e81149a2&user=Dhruv+Matani&userId=63f5d5495279&source=post_page-63f5d5495279----d70e81149a2---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d70e81149a2--------------------------------)
    ·10 min read·Jan 19, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd70e81149a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-a-string-as-html-using-sql-d70e81149a2&user=Dhruv+Matani&userId=63f5d5495279&source=-----d70e81149a2---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F63f5d5495279&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-a-string-as-html-using-sql-d70e81149a2&user=Dhruv+Matani&userId=63f5d5495279&source=post_page-63f5d5495279----d70e81149a2---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d70e81149a2--------------------------------)
    ·10 min read·2023年1月19日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd70e81149a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-a-string-as-html-using-sql-d70e81149a2&user=Dhruv+Matani&userId=63f5d5495279&source=-----d70e81149a2---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd70e81149a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-a-string-as-html-using-sql-d70e81149a2&source=-----d70e81149a2---------------------bookmark_footer-----------)![](../Images/4b8989017ebbf485a08036972b5fc19a.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd70e81149a2&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fvalidate-a-string-as-html-using-sql-d70e81149a2&source=-----d70e81149a2---------------------bookmark_footer-----------)![](../Images/4b8989017ebbf485a08036972b5fc19a.png)'
- en: Photo by [Valery Sysoev](https://unsplash.com/@valerysysoev?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Valery Sysoev](https://unsplash.com/@valerysysoev?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Checking if a string is valid HTML is a really complex task, and isn’t something
    that can be accomplished trivially. In fact, writing a generic HTML string validator
    is a fairly involved task and isn’t something I hope to cover here. If you want
    to validate a string a containing valid XML/HTML in PostgreSQL, you should probably
    be using the [XML data type](https://p2d2.cz/files/xml.pdf) or [XML functions](https://www.postgresql.org/docs/9.1/functions-xml.html)
    library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 检查一个字符串是否为有效的 HTML 是一个非常复杂的任务，并不是简单就能完成的。事实上，编写一个通用的 HTML 字符串验证器是一项相当复杂的任务，这里不打算深入探讨。如果你想在
    PostgreSQL 中验证一个包含有效 XML/HTML 的字符串，你应该使用 [XML 数据类型](https://p2d2.cz/files/xml.pdf)
    或 [XML 函数](https://www.postgresql.org/docs/9.1/functions-xml.html) 库。
- en: Previous Articles
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先前的文章
- en: '[Validate Balanced Parenthesis using SQL](/validate-balanced-parenthesis-using-sql-5bb79732d772)'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[使用 SQL 验证平衡括号](/validate-balanced-parenthesis-using-sql-5bb79732d772)'
- en: '[Minimum Meeting Rooms Problem in SQL](https://medium.com/towards-data-science/minimum-meeting-rooms-problem-in-sql-4d3a92365bdf)'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[SQL 中的最少会议室问题](https://medium.com/towards-data-science/minimum-meeting-rooms-problem-in-sql-4d3a92365bdf)'
- en: Problem Statement
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题陈述
- en: We would like to write a SQL query which when fed an input string is able to
    return TRUE or FALSE based on whether the provided string is valid HTML or not.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望编写一个 SQL 查询，当输入一个字符串时，能够返回 TRUE 或 FALSE，基于提供的字符串是否为有效的 HTML。
- en: That said, let’s dive into the restricted problem of validating if a string
    is valid HTML as defined by us. What do we consider valid HTML for the purposes
    of this article?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，让我们深入探讨验证字符串是否是有效 HTML 的受限问题。为了本文的目的，我们如何定义有效的 HTML？
- en: Should contain balanced open and close named tags. For example, <html> should
    be paired with </html> after it.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应包含平衡的开闭命名标签。例如，<html> 应与其后的 </html> 配对。
- en: Correct pairing of balanced tags. For example <a><b></b></a> is valid, whereas
    <a><b></a></b> is invalid.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确配对的平衡标签。例如，<a><b></b></a> 是有效的，而 <a><b></a></b> 是无效的。
- en: The only unpaired tags allowed are<br> and <br/>.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 唯一允许的未配对标签是<br>和<br/>。
- en: We assume that there aren’t any malformed tags such as <a/b>.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们假设没有如 <a/b> 这样的格式错误的标签。
- en: We assume that the text itself doesn’t contain the < and > characters, and that
    they are properly escaped as *&lt;* and *&gt;* respectively.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们假设文本本身不包含 < 和 > 字符，并且它们被正确地转义为 *&lt;* 和 *&gt;*。
- en: There are no attributed inside HTML tags. For example, *<body>* is valid, but
    *<body class=”foo”>* is invalid.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML 标签内部没有属性。例如，*<body>* 是有效的，但 *<body class=”foo”>* 是无效的。
- en: Additional Background
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外背景
- en: XML/[HTML can not be parsed using regular expressions](https://blog.codinghorror.com/parsing-html-the-cthulhu-way/),
    since HTML is not a regular language.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: XML/[HTML 不能使用正则表达式解析](https://blog.codinghorror.com/parsing-html-the-cthulhu-way/)，因为
    HTML 不是一种正则语言。
- en: We would like to be able to validate the following HTML documents.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够验证以下 HTML 文档。
- en: Valid documents
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有效的文档
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Invalid documents
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无效的文档
- en: '[1] In the document below, the *</head>* tag is missing.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 在下面的文档中，*</head>* 标签丢失。'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[2] In the document below, the *</html>* tag appears before the *</head>* tag.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 在下面的文档中，*</html>* 标签出现在 *</head>* 标签之前。'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Preprocessing common to both solutions
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两种解决方案的预处理
- en: First, we tokenize the input string and extract the open and close tags as they
    appear in the document string. We use the below to extract the HTML tags into
    a separate table with one row per HTML tag in the document.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将输入字符串分词，提取文档字符串中出现的开标签和闭标签。我们使用下面的方法将 HTML 标签提取到一个单独的表中，每行代表文档中的一个 HTML
    标签。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This table is then again processed to assign the following to each row:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格随后再次处理，以便为每行分配以下内容：
- en: '**row_num**: A row number.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**row_num**：行号。'
- en: '**root_tag**: If the tag is an open tag, it’s the same as **html_tag**, else
    it’s the tag with the / character removed so that the close tag’s corresponding
    open tag is present in this column.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**root_tag**：如果标签是开标签，它与 **html_tag** 相同，否则它是去除 / 字符后的标签，以便闭标签的对应开标签在此列中存在。'
- en: '**delta**: +1 or -1 depending on whether this is an open or a close HTML tag.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**delta**：根据这是开 HTML 标签还是闭 HTML 标签，值为 +1 或 -1。'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We then remove all the unpaired tags (i.e. tags that are not supposed to have
    an open and close pair). For this article, there are only 2 such tags, namely
    <br> and <br/>.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们移除所有未配对的标签（即不应有开闭配对的标签）。对于本文，有且仅有两个这样的标签，即<br>和<br/>。
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'First solution: Incorrect solution'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个解决方案：不正确的解决方案
- en: The first solution is seemingly correct but fails to correctly identify our
    2nd invalid document above as invalid HTML.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个解决方案看似正确，但未能正确识别我们上面提到的第二个无效文档为无效 HTML。
- en: The main idea behind this solution is to look at every prefix of the input tags
    and maintain a separate counter for each type of tag encountered. We can do this
    by GROUPing on the root_tag column.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案的主要思路是查看每个输入标签的前缀，并为每种遇到的标签类型维护一个单独的计数器。我们可以通过对 root_tag 列进行分组来实现这一点。
- en: We compute the running sum for each root tag. If the running sum ever becomes
    negative (for any prefix of the tags), then it means we have a close tag before
    an open tag.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们计算每个根标签的累计和。如果累计和变为负数（对于任何标签前缀），则意味着在开标签之前存在一个闭标签。
- en: We check the running sum for the tags in the last prefix (which is basically
    the entire document). If this running sum has a value other than 0 for any tag,
    the document is invalid. We covered the negative case above. In case this sum
    is positive, it means that we have an unclosed open tag somewhere.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们检查最后前缀中标签的运行总和（基本上是整个文档）。如果这个运行总和对任何标签的值不为0，则文档无效。我们在上面已经涵盖了负面案例。如果这个总和为正，则表示我们在某处有一个未关闭的打开标签。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This solution fails to invalidate the 2nd invalid HTML document because we fail
    to track the order in which the close tags appear relative to other tags in the
    document. While we correctly check if a close tag appears after its corresponding
    open tag, we don’t check if there are any OTHER unclosed open tag between this
    close tag and its corresponding open tag.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此解决方案未能使第二个无效的 HTML 文档失效，因为我们未能跟踪关闭标签相对于文档中其他标签的出现顺序。虽然我们正确检查了关闭标签是否在其对应的打开标签之后出现，但我们没有检查在此关闭标签和其对应的打开标签之间是否有其他未关闭的打开标签。
- en: For example, in the example below, the <head> tag on line 2 is unclosed whereas
    the enclosing <html> tag (on line 1) has been closed by the </html> tag (on line
    3).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的示例中，第 2 行的 <head> 标签没有关闭，而封闭的 <html> 标签（第 1 行）已被第 3 行的 </html> 标签关闭。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Runtime complexity**: The runtime complexity of this solution is **O(n²)**,
    where **n** is the number of tags in the document. This is because we join each
    tag with every other tag before it in the query above. This is the dominant cost
    in the entire solution.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行时复杂度**：此解决方案的运行时复杂度为**O(n²)**，其中**n**是文档中的标签数量。这是因为我们将每个标签与之前的每个其他标签连接。这是整个解决方案中的主要成本。'
- en: 'Second Solution: Inside-out solution'
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二种解决方案：由内而外的解决方案
- en: The “*inside out solution*” processes strings from the innermost matching pair
    of open and close HTML tags. This solution relies on the fact that there is at
    least 1 matching open/close pair of tags that appear next to each other (on adjacent
    rows) in a valid HTML document.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “*由内而外的解决方案*”从最内层的匹配 HTML 标签对开始处理字符串。此解决方案依赖于在有效的 HTML 文档中，至少有一个匹配的打开/关闭标签对相邻出现。
- en: If we remove this matching pair, then we can find and eliminate the next matching
    pair, till no more tags remain (in a valid HTML document). We know that in a document
    with 2N tags, we will perform this matching and eliminate process at most N times
    to reach an empty list of tags. If after N rounds of matching and elimination,
    we still have some tags left, it indicates an invalid HTML document.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们移除这个匹配对，那么我们可以找到并消除下一个匹配对，直到没有更多标签（在有效的 HTML 文档中）。我们知道在一个包含 2N 个标签的文档中，我们最多会执行
    N 次匹配和消除过程来达到一个空的标签列表。如果在 N 轮匹配和消除之后，我们仍然有一些标签剩下，这表明这是一个无效的 HTML 文档。
- en: '**Example-1**: For the input below,'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例-1**：对于下面的输入，'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is what the recursive execution looks like and the animation below shows
    the order in which the pairs of open/close tags are matched and eliminated.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是递归执行的样子，下面的动画展示了打开/关闭标签对的匹配和消除顺序。
- en: '![](../Images/e56b2c482547e245dc3ed2d77af48ead.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e56b2c482547e245dc3ed2d77af48ead.png)'
- en: Second solution processing a valid HTML string (Image by author)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种解决方案处理有效的 HTML 字符串（作者提供的图片）
- en: '**Example-2**: For the input below,'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例-2**：对于下面的输入，'
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is what the recursive execution looks like and the animation below shows
    the order in which the pairs of open/close tags are matched and eliminated. Since
    this is invalid input, the processing stops when there’s no matching pair of adjacent
    tags left to process.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是递归执行的样子，下面的动画展示了打开/关闭标签对的匹配和消除顺序。由于这是无效的输入，处理在没有匹配的相邻标签对可以处理时停止。
- en: '![](../Images/b9d91a11b5196c20ff44edca11d7e897.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9d91a11b5196c20ff44edca11d7e897.png)'
- en: Second solution processing an invalid HTML string (Image by author)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种解决方案处理无效的 HTML 字符串（作者提供的图片）
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Runtime complexity**: The runtime complexity of this solution is **O(n²)**,
    where **n** is the number of tags in the document. We analyze the cost on both
    a valid as well as an invalid input:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行时复杂度**：此解决方案的运行时复杂度为**O(n²)**，其中**n**是文档中的标签数量。我们分析了有效和无效输入的成本：'
- en: '**Valid Input**: In the worst case, we will eliminate a single pair of tags,
    and we need **O(n)** rounds to eliminate all the **n/2** pairs of tags in the
    document. In each round, we need to retain and re-process all the remaining rows.
    We start with n rows of data and in the worst case reduce 2 rows in every recursive
    step. Hence, the number of rows shrinks as n, n-2, n-4, n-6, …, 0 (n/2 times),
    which sums up to O(n²).'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**有效输入**：在最坏的情况下，我们将消除一对标签，并且需要 **O(n)** 轮来消除文档中的所有 **n/2** 对标签。在每轮中，我们需要保留并重新处理所有剩余的行。我们从
    n 行数据开始，在最坏的情况下每个递归步骤减少 2 行。因此，行数的减少为 n, n-2, n-4, n-6, …, 0（n/2 次），总和为 O(n²)。'
- en: '**Invalid Input**: In case of an invalid input, we will fail to match a pair
    of open/close tags, and we will not eliminate any row for the entire duration
    of the **n** recursive rounds. Hence, the number of rows in each of the n rounds
    looks like n, n, n, …, n (n-times), which sums up to O(n²).'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无效输入**：在无效输入的情况下，我们将无法匹配一对开/关标签，并且在整个 **n** 次递归轮中不会消除任何行。因此，每轮中的行数看起来是 n,
    n, n, …, n（n 次），总和为 O(n²)。'
- en: SQL Fiddle
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL Fiddle
- en: The SQL Fiddle link to all the solutions in this post can be found [here](http://sqlfiddle.com/#!17/e7d84/26).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该帖中所有解决方案的 SQL Fiddle 链接可以在 [这里](http://sqlfiddle.com/#!17/e7d84/26) 找到。
- en: Conclusion
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We saw a way to check if a string is valid HTML or not. This method utilizes
    recursive CTEs to iteratively reduce the problem set size at every step.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了一种检查字符串是否为有效 HTML 的方法。该方法利用递归 CTE 迭代地减少每一步的问题集大小。
- en: Recursive CTEs in SQL are powerful tools that can solve a variety of problems
    if used creatively. However, recursive CTEs aren’t very space efficient. Where
    traditional imperative programming languages allow you to perform in-place updates,
    recursive CTEs require you to copy the data at every step.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的递归 CTE 是强大的工具，如果创意使用，可以解决各种问题。然而，递归 CTE 并不很节省空间。传统的命令式编程语言允许你进行原地更新，而递归
    CTE 需要你在每一步都复制数据。
