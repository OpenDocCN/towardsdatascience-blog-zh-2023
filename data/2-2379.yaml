- en: Why Taskgroup and Timeout Are so Crucial in Python 3.11 Asyncio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么 Taskgroup 和 Timeout 在 Python 3.11 Asyncio 中如此重要
- en: 原文：[https://towardsdatascience.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio-c424bcc88b89](https://towardsdatascience.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio-c424bcc88b89)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio-c424bcc88b89](https://towardsdatascience.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio-c424bcc88b89)
- en: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[PYTHON CONCURRENCY](https://medium.com/@qtalen/list/python-concurrency-2c979347da3b)'
- en: Embracing Structured Concurrency in Python 3.11
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥抱 Python 3.11 中的结构化并发
- en: '[](https://qtalen.medium.com/?source=post_page-----c424bcc88b89--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----c424bcc88b89--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c424bcc88b89--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c424bcc88b89--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----c424bcc88b89--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://qtalen.medium.com/?source=post_page-----c424bcc88b89--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----c424bcc88b89--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c424bcc88b89--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c424bcc88b89--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----c424bcc88b89--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c424bcc88b89--------------------------------)
    ·6 min read·Apr 12, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----c424bcc88b89--------------------------------)
    ·阅读时间6分钟·2023年4月12日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d2c98fe735728660298181954df9a9cc.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2c98fe735728660298181954df9a9cc.png)'
- en: Photo by [Brett Jordan](https://unsplash.com/@brett_jordan?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Brett Jordan](https://unsplash.com/@brett_jordan?utm_source=medium&utm_medium=referral)提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**New features of the Python 3.11 asyncio package**'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Python 3.11 asyncio 包的新功能**'
- en: '**1\. Introduction**'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1\. 介绍**'
- en: In last year’s Python 3.11 release, the asyncio package added the`TaskGroup`
    and `timeout`APIs. These two APIs introduced the official Structured Concurrency
    feature to help us better manage the life cycle of concurrent tasks. Today, I’ll
    introduce you to using these two APIs and the significant improvements Python
    has brought to our concurrent programming with the introduction of Structured
    Concurrency.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在去年的 Python 3.11 版本中，asyncio 包添加了`TaskGroup`和`timeout`API。这两个 API 引入了官方的结构化并发功能，帮助我们更好地管理并发任务的生命周期。今天，我将向你介绍这两个
    API 的使用以及 Python 引入结构化并发后对我们并发编程的重大改进。
- en: '**2\. TaskGroup**'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2\. TaskGroup**'
- en: '`TaskGroup` is created using an asynchronous context manager, and concurrent
    tasks can be added to the group by the method `create_task`, with the following
    code example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskGroup` 是使用异步上下文管理器创建的，并且可以通过`create_task`方法将并发任务添加到组中，如下代码示例所示：'
- en: When the context manager exits, it waits for all tasks in the group to complete.
    While waiting, we can still add new tasks to `TaskGroup`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当上下文管理器退出时，它会等待组中的所有任务完成。在等待期间，我们仍然可以向`TaskGroup`添加新任务。
- en: Note that assuming that a task in the group throws an exception other than `asyncio.CancelledError`
    while waiting, all other tasks in the group will be canceled.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，假设组中的一个任务在等待时抛出`asyncio.CancelledError`之外的异常，组中的所有其他任务将被取消。
- en: Also, all exceptions were thrown except for `asyncio.CanceledError` will be
    combined and thrown in the `ExceptionGroup`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了`asyncio.CanceledError`之外的所有异常将被合并并抛出在`ExceptionGroup`中。
- en: '**3\. timeout**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3\. 超时**'
- en: '`asyncio.timeout` is also created using the asynchronous context manager. It
    limits the execution time of concurrent code in a context.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncio.timeout` 也是使用异步上下文管理器创建的。它限制了在上下文中并发代码的执行时间。'
- en: 'Let’s assume that if we need to set a timeout to a single function call, it
    is sufficient to call `asyncio.wait_for`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要为单个函数调用设置超时，那么调用`asyncio.wait_for`就足够了：
- en: 'But when it is necessary to set a uniform timeout for multiple concurrent calls,
    things will become problematic. Let’s assume we have two concurrent tasks and
    want them to run to completion in 8 seconds. Let’s try to assign an average timeout
    of 4 seconds to each task, with code like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但当需要为多个并发调用设置统一的超时时间时，问题就会出现。假设我们有两个并发任务，并希望它们在 8 秒内完成。让我们尝试为每个任务分配一个平均超时时间为
    4 秒的设置，代码如下：
- en: You can see that although we set an average timeout for each concurrent method,
    such a setting may cause uncontrollable situations since each call to the IO-bound
    task is not guaranteed to return simultaneously, and we still got a `TimeoutError`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，尽管我们为每个并发方法设置了平均超时，但这种设置可能会导致不可控的情况，因为对 IO 绑定任务的每次调用无法保证同时返回，我们仍然遇到了`TimeoutError`。
- en: 'At this point, we use the `asyncio.timeout` block to ensure that we set an
    overall timeout for all concurrent tasks:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这时，我们使用`asyncio.timeout`块来确保为所有并发任务设置一个整体超时：
- en: '**4\. What is Structured Concurrency**'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4\. 结构化并发是什么**'
- en: '`TaskGroup` and `asyncio.timeout` above uses the `async with` feature. Just
    like `with` struct block can manage the life cycle of resources uniformly like
    this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskGroup` 和 `asyncio.timeout` 上述使用了`async with`特性。就像`with`结构块一样，可以统一管理资源的生命周期：'
- en: 'But calling concurrent tasks inside `with` block does not work because the
    concurrent task will continue executing in the background while the `with` block
    has already exited, which will lead to improper closure of the resource:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但在`with`块中调用并发任务不起作用，因为并发任务会在背景中继续执行，而`with`块已经退出，这将导致资源的不当关闭：
- en: 'Therefore, we introduced the `async with` feature here. As *with*, *async with*
    and `TaskGroup` Is used to manage the life cycle of concurrent code uniformly,
    thus making the code clear and saving development time. We call this feature our
    main character today: [**Structured Concurrency**](https://en.wikipedia.org/wiki/Structured_concurrency).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在这里引入了`async with`特性。像*with*、*async with* 和 `TaskGroup` 用于统一管理并发代码的生命周期，从而使代码更清晰并节省开发时间。我们称这个特性为我们今天的主角：[**结构化并发**](https://en.wikipedia.org/wiki/Structured_concurrency)。
- en: '**Why Structured Concurrency is so important**'
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**为什么结构化并发如此重要**'
- en: '**1\. History of concurrent programming**'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1\. 并发编程的历史**'
- en: Before the advent of concurrent programming, we executed our code serially.
    Code would perform for_loop loops, if_else conditional branches, and function
    calls sequentially, depending on the order in the call stack.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在并发编程出现之前，我们的代码是串行执行的。代码会根据调用栈的顺序依次执行`for_loop`循环、`if_else`条件分支和函数调用。
- en: '![](../Images/1871340581c375c70538ef047d70da77.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1871340581c375c70538ef047d70da77.png)'
- en: Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: However, as the speed of code execution became more and more demanding in terms
    of computational efficiency and as computer hardware developed significantly,
    parallel programming (CPU bound) and concurrent programming (IO bound) gradually
    emerged.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着代码执行速度对计算效率的要求越来越高，以及计算机硬件的显著发展，逐渐出现了并行编程（CPU 绑定）和并发编程（IO 绑定）。
- en: Before coroutine emerged, Python programmers used threading to implement concurrent
    programming. But Python’s threads have a problem, that is, [GIL (Global Interpreter
    Lock)](/python-gil-e63f18a08c65), the existence of GIL makes the thread-based
    Concurrency unable to achieve the desired performance.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在协程出现之前，Python 程序员使用线程来实现并发编程。但 Python 的线程存在一个问题，即[GIL（全局解释器锁）](/python-gil-e63f18a08c65)，GIL
    的存在使得基于线程的并发无法达到预期的性能。
- en: So asyncio coroutine emerged. Without GIL and inter-thread switching, concurrent
    execution is much more efficient. If threads are time-slice-based task switching
    controlled by the CPU, then coroutine is the creation and switching of subtasks
    back into the hands of the programmer himself. While programmers enjoy convenience,
    they also encounter a new set of problems.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`asyncio` 协程应运而生。没有全局解释器锁（GIL）和线程间切换，并发执行变得更加高效。如果线程是由 CPU 控制的基于时间片的任务切换，那么协程则是将子任务的创建和切换交到程序员自己手中。虽然程序员享受了便利，但也遇到了一系列新问题。
- en: '**2\. Problems with the Concurrent Programming Model**'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2\. 并发编程模型的问题**'
- en: As detailed in [this article](https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/),
    concurrent programming raises several issues regarding control flow.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[这篇文章](https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/)中详细描述的，并发编程引发了有关控制流的几个问题。
- en: Concurrent programming is opening up multiple branch processes in our main thread.
    These branch tasks silently perform network requests, file accesses, database
    queries, and other duties in the background.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 并发编程是在主线程中打开多个分支进程。这些分支任务在后台默默地执行网络请求、文件访问、数据库查询等工作。
- en: 'Concurrent programming will change the flow of our code from this to this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 并发编程将把我们的代码流程从这样改变成这样：
- en: '![](../Images/d66c37d510f68fee01260c977cc09fc5.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d66c37d510f68fee01260c977cc09fc5.png)'
- en: Image by author
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'According to the “low coupling, high cohesion” rule of programming, we all
    want to join all the background tasks in a module together after execution like
    this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据编程中的“低耦合，高内聚”原则，我们都希望在执行后将所有后台任务集中在一个模块中，如下所示：
- en: '![](../Images/425650679fc46f1854b7b3df3d86ff8f.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/425650679fc46f1854b7b3df3d86ff8f.png)'
- en: Image by author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: But the fact is that since multiple members develop our application or call
    numerous third-party components, we need to know which tasks are still executing
    in the background and which tasks are finished. It’s more likely that one background
    task will branch into several other branch tasks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，由于多个成员开发我们的应用程序或调用了许多第三方组件，我们需要知道哪些任务仍在后台执行，哪些任务已经完成。一个后台任务很可能会分支成几个其他的分支任务。
- en: 'Ultimately, these branching tasks need to be found by the caller and wait for
    their execution to complete, so it becomes like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 终极目标是这些分支任务需要被调用者找到，并等待其执行完成，因此变成了这样：
- en: '![](../Images/29a36d0bbb40296e8665cdd65afd5521.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/29a36d0bbb40296e8665cdd65afd5521.png)'
- en: Image by author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Although this is not [Marvel’s multiverse](https://en.wikipedia.org/wiki/Multiverse_(Marvel_Comics)),
    the situation is now just like the multiverse, bringing absolute chaos to our
    natural world.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是[漫威的多元宇宙](https://en.wikipedia.org/wiki/Multiverse_(Marvel_Comics))，但目前的情况就像多元宇宙一样，给我们的自然世界带来了绝对的混乱。
- en: 'Some readers say that `asyncio.gather` could be responsible for joining all
    the background tasks. But `asyncio.gather` it has its problems:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有读者表示，`asyncio.gather` 可以负责合并所有后台任务。但`asyncio.gather`也有其问题：
- en: It cannot centrally manage backend tasks in a unified way. Often creating backend
    tasks in one place and calling `asyncio.gather` in another.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它无法以统一的方式集中管理后台任务。通常是在一个地方创建后台任务，而在另一个地方调用`asyncio.gather`。
- en: The argument `aws` received by `asyncio.gather` is a fixed list, which means
    that we have set the number of background tasks when `asyncio.gather` is called,
    and they cannot be added randomly on the way to waiting.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asyncio.gather` 接收的参数`aws`是一个固定列表，这意味着在调用`asyncio.gather`时，我们已设置后台任务的数量，它们无法在等待过程中随意添加。'
- en: When a task is waiting in `asyncio.gather` throws an exception, it cannot cancel
    other tasks that are executing, which may cause some tasks to run indefinitely
    in the background and the program to die falsely.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当任务在`asyncio.gather`中等待时抛出异常时，它无法取消正在执行的其他任务，这可能导致一些任务在后台无限运行，程序错误地终止。
- en: Therefore, the Structured Concurrency feature introduced in Python 3.11 is an
    excellent solution to our concurrency problems. It allows the related asynchronous
    code to all finish executing in the same place, and at the same time, it will
    enable `tg` instances to be passed as arguments to background tasks, so that new
    background tasks created in the background tasks will not jump out of the current
    life cycle management of the asynchronous context.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Python 3.11 引入的结构化并发特性是解决我们并发问题的**绝佳**方案。它允许相关的异步代码在同一位置完成执行，同时，它还使`tg`实例能够作为参数传递给后台任务，从而使在后台任务中创建的新后台任务不会跳出当前异步上下文的生命周期管理。
- en: Thus, Structured Concurrency is a revolutionary improvement to Python asyncio.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，结构化并发是对 Python asyncio 的**革命性**改进。
- en: '**Comparison with other libraries that implement Structured Concurrency**'
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**与其他实现结构化并发的库的比较**'
- en: Structured Concurrency is not the first of its kind in Python 3.11; we had several
    concurrency-based packages that implemented this feature nicely before 3.11.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化并发并不是 Python 3.11 中首个此类特性；在 3.11 之前，我们已经有几个并发基础的包很好地实现了这个特性。
- en: '**1\. Nurseries in Trio**'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1\. Trio中的托儿所**'
- en: '[Trio](https://trio.readthedocs.io/en/stable/) was the first library to propose
    Structure Concurrency in the Python world, and in Trio, the API `open_nursery`
    is used to achieve the goal:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[Trio](https://trio.readthedocs.io/en/stable/) 是 Python 世界中首个提出结构化并发的库，在 Trio
    中，API `open_nursery` 被用来实现这个目标：'
- en: '**2\.** `**create_task_group**` **in Anyio**'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2\.** `**create_task_group**` **在 Anyio 中**'
- en: But with the advent of the official Python asyncio package, more and more third-party
    packages are using asyncio to implement concurrent programming. At this point,
    using Trio will inevitably run into compatibility problems.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但随着官方 Python asyncio 包的出现，越来越多的第三方包使用 asyncio 实现并发编程。在这一点上，使用 Trio 不可避免地会遇到兼容性问题。
- en: 'At this point, [Anyio](https://anyio.readthedocs.io/en/stable/index.html),
    which claims to be compatible with both asyncio and Trio, emerged. It can also
    implement Structured Concurrency through the `create_task_group` API:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，声称兼容 asyncio 和 Trio 的 [Anyio](https://anyio.readthedocs.io/en/stable/index.html)
    出现了。它还可以通过 `create_task_group` API 实现结构化并发：
- en: '**3\. Using quattro in low Python versions**'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3\. 在低版本 Python 中使用 quattro**'
- en: If you want to keep your code native to Python to easily enjoy the convenience
    of Python 3.11 asyncio in the future, there is a good alternative, [quattro](https://github.com/Tinche/quattro),
    which has fewer stars and is risk-averse.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在未来轻松享受 Python 3.11 asyncio 的便利，保持代码本地化，有一个不错的替代方案，[quattro](https://github.com/Tinche/quattro)，其星标较少，风险较低。
- en: '**Conclusion**'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: The TaskGroup and timeout APIs introduced in Python 3.11 bring us the official
    Structured Concurrency feature.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.11 引入的 TaskGroup 和 timeout APIs 为我们带来了官方的结构化并发功能。
- en: With Structured Concurrency, we can make concurrent programming code better
    abstracted, and programmers can more easily control the life cycle of background
    tasks, thus improving programming efficiency and avoiding errors.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结构化并发，我们可以使并发编程代码更好地抽象化，程序员可以更容易地控制后台任务的生命周期，从而提高编程效率并避免错误。
- en: Because of limited experience, if there are any omissions in this article about
    concurrent programming or Structured Concurrency, or if you have better suggestions,
    please comment. I will be grateful to answer you.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于经验有限，如果本文中关于并发编程或结构化并发的内容有遗漏，或者您有更好的建议，请发表评论。我会很感激并回答您。
- en: 'In the next article, we will discuss best practices for concurrent programming
    in asyncio using different APIs. You can read it here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我们将讨论在 asyncio 中使用不同 APIs 的并发编程最佳实践。您可以在这里阅读：
- en: '[](/use-these-methods-to-make-your-python-concurrent-tasks-perform-better-b693b7a633e1?source=post_page-----c424bcc88b89--------------------------------)
    [## Use These Methods to Make Your Python Concurrent Tasks Perform Better'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/use-these-methods-to-make-your-python-concurrent-tasks-perform-better-b693b7a633e1?source=post_page-----c424bcc88b89--------------------------------)
    [## 使用这些方法提升你的 Python 并发任务表现]'
- en: Best practices for asyncio.gather, asyncio.as_completed, and asyncio.wait
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio.gather、asyncio.as_completed 和 asyncio.wait 的最佳实践
- en: towardsdatascience.com](/use-these-methods-to-make-your-python-concurrent-tasks-perform-better-b693b7a633e1?source=post_page-----c424bcc88b89--------------------------------)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/use-these-methods-to-make-your-python-concurrent-tasks-perform-better-b693b7a633e1?source=post_page-----c424bcc88b89--------------------------------)
- en: By [joining Medium](https://medium.com/@qtalen/membership), you’ll have unlimited
    access to all of my posts and those of thousands of other authors. It only costs
    you the price of a cup of coffee, but it’s a great encouragement to me.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [加入 Medium](https://medium.com/@qtalen/membership)，您将能够无限制地访问我所有的帖子以及其他成千上万作者的帖子。这只需一杯咖啡的价格，对我来说是极大的鼓励。
- en: 'This article was originally published on: [https://www.dataleadsfuture.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio/](https://www.dataleadsfuture.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio/)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初发布于：[https://www.dataleadsfuture.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio/](https://www.dataleadsfuture.com/why-taskgroup-and-timeout-are-so-crucial-in-python-3-11-asyncio/)
