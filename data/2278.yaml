- en: Compute the Distance Matrix of a Set of Sites from Their Coordinates in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算一组地点坐标的距离矩阵（Python实现）
- en: 原文：[https://towardsdatascience.com/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e?source=collection_archive---------0-----------------------#2023-07-16](https://towardsdatascience.com/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e?source=collection_archive---------0-----------------------#2023-07-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e?source=collection_archive---------0-----------------------#2023-07-16](https://towardsdatascience.com/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e?source=collection_archive---------0-----------------------#2023-07-16)
- en: Easily estimate the distance between any pair of sites from their geographical
    coordinates as a stepping stone to solving general routing problems
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轻松估算任意一对地点之间的距离，作为解决一般路由问题的起点
- en: '[](https://medium.com/@carlosjuribe?source=post_page-----d5fc92a0ba9e--------------------------------)[![Carlos
    J. Uribe](../Images/902c5f4ac5d404dd99916f145be6756c.png)](https://medium.com/@carlosjuribe?source=post_page-----d5fc92a0ba9e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d5fc92a0ba9e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d5fc92a0ba9e--------------------------------)
    [Carlos J. Uribe](https://medium.com/@carlosjuribe?source=post_page-----d5fc92a0ba9e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@carlosjuribe?source=post_page-----d5fc92a0ba9e--------------------------------)[![Carlos
    J. Uribe](../Images/902c5f4ac5d404dd99916f145be6756c.png)](https://medium.com/@carlosjuribe?source=post_page-----d5fc92a0ba9e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d5fc92a0ba9e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d5fc92a0ba9e--------------------------------)
    [Carlos J. Uribe](https://medium.com/@carlosjuribe?source=post_page-----d5fc92a0ba9e--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4337eddb94ed&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcompute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e&user=Carlos+J.+Uribe&userId=4337eddb94ed&source=post_page-4337eddb94ed----d5fc92a0ba9e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d5fc92a0ba9e--------------------------------)
    ·13 min read·Jul 16, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd5fc92a0ba9e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcompute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e&user=Carlos+J.+Uribe&userId=4337eddb94ed&source=-----d5fc92a0ba9e---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F4337eddb94ed&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcompute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e&user=Carlos+J.+Uribe&userId=4337eddb94ed&source=post_page-4337eddb94ed----d5fc92a0ba9e---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d5fc92a0ba9e--------------------------------)
    ·13分钟阅读·2023年7月16日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fd5fc92a0ba9e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcompute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e&user=Carlos+J.+Uribe&userId=4337eddb94ed&source=-----d5fc92a0ba9e---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd5fc92a0ba9e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcompute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e&source=-----d5fc92a0ba9e---------------------bookmark_footer-----------)![](../Images/871f751c51440a309a64ceac1dc53e26.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fd5fc92a0ba9e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fcompute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e&source=-----d5fc92a0ba9e---------------------bookmark_footer-----------)![](../Images/871f751c51440a309a64ceac1dc53e26.png)'
- en: 'Image generated by DALL·E 3 with author’s prompt: “an image of a network of
    cities on top of a map where each city is connected to all other cities”'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由DALL·E 3生成的图像，作者的提示：“一张城市网络的地图，每个城市都连接到其他所有城市”
- en: '*👁️* **This is article #4 of the series covering the project “**[**An Intelligent
    Decision Support System for Tourism in Python**](https://medium.com/@carlosjuribe/list/an-intelligent-decision-support-system-for-tourism-in-python-b6ba165b4236)**”,**
    I encourage you to check it out to get a general overview of the whole project.
    If you’re only interested in creating distance matrices, this article is all you
    need, it’s self-contained. If you also want to apply the distance matrix to practical
    problems, the series will be of interest to you.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*👁️* **这是关于“**[**Python中的智能决策支持系统**](https://medium.com/@carlosjuribe/list/an-intelligent-decision-support-system-for-tourism-in-python-b6ba165b4236)**”项目的第4篇文章，**
    我鼓励你查看一下，以获取整个项目的一般概述。如果你只对创建距离矩阵感兴趣，这篇文章已经足够，它是自包含的。如果你还想将距离矩阵应用于实际问题，这个系列将对你有兴趣。'
- en: 'The present article continues our journey right where [sprint 3](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c)
    left off: the building of an optimization model for the Traveling Salesman Problem,
    *given a fixed set of places to visit* and their pair-wise distances. In sprint
    4, we take a brief detour from modeling and **develop a class with geospatial
    functionality** that will be very handy when we attempt to solve **general** Traveling
    Salesman Problems, *i.e.,* problemsfor arbitrary sites for which we may not have
    distance data readily available. We stated this “requirement” in the previous
    sprint, and we’ll build a subsystem to satisfy it in this one.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将继续从[sprint 3](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c)的最后一个地方开始：为旅行商问题构建优化模型，*在给定固定访问地点*及其对之间的距离的情况下。在第4轮中，我们将暂时从建模中绕开，**开发一个具有地理空间功能的类**，这将在我们尝试解决**一般性**旅行商问题时非常有用，即对于任意位置我们可能没有现成的距离数据的问题。我们在上一轮中提出了这个“需求”，将在这一轮中构建一个子系统来满足它。
- en: Table of contents
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: '[1\. Previous sprint recap](#3457)'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[1. 上一轮迭代回顾](#3457)'
- en: '[2\. Reading the input data](#d4c6)'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[2. 读取输入数据](#d4c6)'
- en: '[3\. Creating a distance matrix from location data](#4a0e)'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[3. 从位置数据创建距离矩阵](#4a0e)'
- en: '[3.1\. Should I go the extra mile to gain an extra yard?](#4a07)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.1. 我是否需要付出额外的努力来获得额外的进展？](#4a07)'
- en: '[3.2\. Geolocation utilities with](#8bc3) `[geopy](#8bc3)`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.2. 带有的地理定位工具](#8bc3) `[geopy](#8bc3)`'
- en: '[3.3\. Getting to the points](#f713)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.3. 到达要点](#f713)'
- en: '[3.4\. From coordinates to distance matrix](#6590)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.4. 从坐标到距离矩阵](#6590)'
- en: '[4\. Wrap it up! (inside a class)](#8f29)'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[4. 完成！（类内部）](#8f29)'
- en: '[4.1\.](#a881) `[GeoAnalyzer](#a881)` [class design](#a881)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4.1.](#a881) `[GeoAnalyzer](#a881)` [类设计](#a881)'
- en: '[4.2\. Class usage demo](#8c36)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4.2. 类使用演示](#8c36)'
- en: '[5\. Conclusion (or planning for next sprint)](#ef0c)'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[5. 结论（或规划下一轮迭代）](#ef0c)'
- en: 1\. Previous sprint recap
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 上一轮迭代回顾
- en: 'In the previous article, the one of [sprint 3](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c),
    we carried out a proof-of-concept whereby we demonstrated that we can solve the
    [Traveling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)
    (TSP) for a list of sites, *provided we had the distances between each possible
    pair of sites*, as a distance matrix:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，即[sprint 3](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c)，我们进行了概念验证，展示了我们可以解决[旅行商问题](https://en.wikipedia.org/wiki/Travelling_salesman_problem)（TSP）对于一组站点，*前提是我们拥有每一对站点之间的距离*，作为距离矩阵：
- en: '[](/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c?source=post_page-----d5fc92a0ba9e--------------------------------)
    [## Implementing, solving and visualizing the Traveling Salesman Problem with
    Python'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c?source=post_page-----d5fc92a0ba9e--------------------------------)
    [## 用Python实现、解决和可视化旅行商问题'
- en: Learn how to translate an optimization model from Math to Python, optimize it,
    and visualize the solution to gain quick…
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何将优化模型从数学翻译到Python，优化它，并可视化解决方案以快速获得结果…
- en: towardsdatascience.com](/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c?source=post_page-----d5fc92a0ba9e--------------------------------)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c?source=post_page-----d5fc92a0ba9e--------------------------------)
- en: We considered the distance matrix as given because, at that stage of development,
    the focus was on *model building*, not *data acquisition*. But once the model
    was ready and worked fine for our fixed set of locations, we quickly realized
    **we needed a way to** **solve general TSP problems** (problems for arbitrary
    sets of sites). This generalization is required to create a truly useful MVP.
    As such, we concluded the natural next step is to find a way to **automatically
    obtain a distance matrix from the coordinates of our sites of interest**, a step
    that we’ll cover in this article.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将距离矩阵视为已给定，因为在那个开发阶段，重点是*模型构建*，而不是*数据获取*。但是一旦模型准备好并且在我们的固定地点集上运行良好，我们很快意识到**我们需要一种方法来**
    **解决一般的TSP问题**（任意地点集的问题）。这种泛化是创建真正有用的MVP所必需的。因此，我们得出的自然下一步是找到一种**自动从我们兴趣点的坐标中获取距离矩阵**的方法，这一步我们将在本文中讨论。
- en: 'In doing so, our **new basic input** will be much simpler and natural, just
    the geographical coordinates of the sites we want to visit:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做，我们的**新基本输入**将会简单自然得多，只需提供我们想要访问地点的地理坐标：
- en: '![](../Images/59ec3de04074a9813170b50ccf7fed83.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59ec3de04074a9813170b50ccf7fed83.png)'
- en: '**Figure 1.** Coordinates of the sites of interest. (Image by author)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.** 兴趣点的坐标。 （图像由作者提供）'
- en: 'and the output will be the dataframe we used as input for the TSP model, the
    distance matrix for the input sites:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是我们用作TSP模型输入的数据框，即输入地点的距离矩阵：
- en: '![](../Images/18f610b518e1fed4161c761c29896bb7.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18f610b518e1fed4161c761c29896bb7.png)'
- en: '**Figure 2.** Desired distance matrix for a given set of sites. (Image by author)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2.** 给定一组地点的期望距离矩阵。 （图像由作者提供）'
- en: For consistency, we’ll use the same Paris sites we have considered so far. In
    the [next article](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9),
    we’ll integrate this functionality with the optimization model of the Traveling
    Salesman Problem, arriving at a more versatile MVP.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性，我们将使用到目前为止考虑的相同巴黎地点。在[下一篇文章](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9)中，我们将把这个功能与旅行销售员问题的优化模型集成，得到一个更具多功能性的MVP。
- en: '***🎯******Keeping the final goal in mind***'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***🎯******牢记最终目标***'
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Let’s take a step back and briefly recapitulate why we’re doing this. The
    original real-life problem we are aspiring to solve is what we can call the* ***Traveling
    Tourist Problem*** *(TTP), that is, the problem of creating* ***optimal trip plans***
    *for the general tourist,* ***given both her “personal” data*** *(preferences,
    budgets, etc.)* ***and the trip “environment” data*** *(distances, prices, modes
    of transport, etc.).*'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*让我们稍微回顾一下为什么要做这个。我们期望解决的原始实际问题是我们可以称之为的* ***旅行游客问题*** *(TTP)，即为一般游客制定* ***最佳旅行计划***
    *的问题，* ***给定她的“个人”数据*** *(如偏好、预算等)* ***以及旅行“环境”数据*** *(如距离、价格、交通方式等)。*'
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Since this real-life problem was deemed too complex, we simplified it to its
    essentialist version in* [*sprint 1*](https://medium.com/@carlosjuribe/plan-an-optimal-trip-for-your-next-holidays-with-the-help-of-operations-research-and-python-481b1ea38fef)*,
    to bootstrap the design of a solution. This “essentialist problem” turned out
    to be the* [*Traveling Salesman Problem*](/modeling-the-traveling-salesman-problem-from-first-principles-bd6530c9c07)
    *(TSP), where we considered the points to visit to be the “sites of interest”
    for the tourist in a city. With the functionality developed in this article, we
    are one step closer to a general solution of the TTP, with the TSP as the core
    of the solution.*'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*由于这个实际问题被认为过于复杂，我们在* [*第一个冲刺*](https://medium.com/@carlosjuribe/plan-an-optimal-trip-for-your-next-holidays-with-the-help-of-operations-research-and-python-481b1ea38fef)*中将其简化为其本质版，以启动解决方案的设计。这个“本质问题”被证明是*
    [*旅行销售员问题*](/modeling-the-traveling-salesman-problem-from-first-principles-bd6530c9c07)
    *(TSP)，在这个问题中，我们将要访问的点视为城市中游客的“兴趣点”。通过本文开发的功能，我们更接近于TTP的通用解决方案，以TSP作为解决方案的核心。*'
- en: 2\. Reading the input data
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 读取输入数据
- en: Our basic input is now the geographical coordinates of the sites we want to
    visit on the trip. We will treat the ‘hotel’ as a different kind of site, since
    the hotel is not, in itself, a “site of interest”, but a place we must visit to
    get some sleep on multi-day trips. Our choice of hotel could be different on a
    different trip, or under different circumstances, while the sites of interest
    in a city are more or less “constant” places that many travel guides agree on.
    The usefulness of this distinction will become more apparent when we’re ready
    to explore more advanced applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本输入现在是我们旅行中想要访问的地点的地理坐标。我们将“酒店”视为一种不同的地点，因为酒店本身并不是一个“感兴趣的地点”，而是我们必须在多日旅行中停留的地方。我们的酒店选择可能会因不同的旅行或不同的情况而有所不同，而一个城市中的感兴趣的地点则是相对“固定”的地方，许多旅行指南对此意见一致。当我们准备探索更高级的应用时，这种区分的有用性将变得更加明显。
- en: 'Hence, I’ve stored the coordinates of our hotel in a CSV file, `location_hotel.csv`,
    and the coordinates for the "sites of interest" in a separate CSV file, `sites_coordinates.csv`.
    Both CSVs have the same structure, so we read and combine them into one dataframe
    containing all our sites:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我将我们酒店的坐标存储在一个CSV文件 `location_hotel.csv` 中，将“感兴趣地点”的坐标存储在另一个CSV文件 `sites_coordinates.csv`
    中。这两个CSV文件具有相同的结构，因此我们将它们读取并合并成一个包含所有地点的数据框：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/b01c96cdeebff5b18e72e0b390391c18.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b01c96cdeebff5b18e72e0b390391c18.png)'
- en: '***ℹ️ How to quickly prepare your own location data***'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***ℹ️ 如何快速准备自己的位置数据***'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want to follow along this article using your own list of sites, you
    have to replicate the steps I took to obtain the coordinates:'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想使用自己的网站列表来跟随本文，你需要复制我获取坐标的步骤：
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. Go to [Google Maps](https://www.google.com/maps/) and search for each site
    in your list.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1\. 前往 [Google Maps](https://www.google.com/maps/) 并搜索你列表中的每个地点。
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '2\. Each site will appear as a point on the map. Right-click on each one. The
    first element that appears is a pair of numbers: the latitude and longitude of
    the point you clicked on.'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2\. 每个地点将在地图上显示为一个点。右击每个点。出现的第一个元素是一对数字：你点击的点的纬度和经度。
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. Click on those numbers, they will be saved in your clipboard, ready to be
    pasted in a file together with the name you choose for that point.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3\. 点击这些数字，它们将被保存到你的剪贴板中，准备粘贴到一个文件中，连同你为该点选择的名称一起。
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Repeat 1 to 3 for all your sites and you’ll have a file equivalent to `sites_coordinates.csv`.
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 4\. 对所有地点重复步骤1到3，你将得到一个等效于 `sites_coordinates.csv` 的文件。
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This process works fine for a small set of sites, but if you have hundreds,
    or even tens, of sites, it becomes very tedious. In [a future article] we’ll create
    a way to automate this manual work, which is called *geolocation*.
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个过程对于小规模的网站集非常有效，但如果你有数百个，甚至几十个地点，它会变得非常繁琐。在 [未来的一篇文章](https://example.org)
    中，我们将创建一种自动化这个手动工作的方式，这叫做*地理定位*。
- en: 3\. Creating a distance matrix from location data
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 从位置数据创建距离矩阵
- en: 'To build a distance matrix, we need to obtain the distance between any pair
    of locations. Sounds simple, but “distance” really depends on the context. Do
    we consider the number reported by mapping applications, like Google Maps, that
    take into account the streets network, bridges, parks, *etc*.? If so, do we take
    the distance that a pedestrian would walk, or that a car would drive? Or maybe
    just the good old length of a straight line connecting the two points? Clearly,
    we have many possible distances to choose from, with varying degrees of accuracy.
    *The first question we have to answer is*: **how should we define “distance”**
    in the particular context of *our problem*, and at *this stage*?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建距离矩阵，我们需要获得任何一对地点之间的距离。这听起来很简单，但“距离”实际上取决于上下文。我们是否考虑由如谷歌地图这样的地图应用程序报告的数字，这些应用程序考虑了街道网络、桥梁、公园，*等等*？如果是这样，我们考虑步行者行走的距离，还是汽车行驶的距离？或者只是连接这两个点的直线长度？显然，我们有许多可能的距离选择，每种选择的准确度不同。*我们必须回答的第一个问题是*：**在*我们的实际问题*的特定背景下，我们应该如何定义“距离”**，以及在*这个阶段*？
- en: 3.1\. Should I go the extra mile to gain an extra yard?
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1\. 我是否应该多花点时间以获得更多的好处？
- en: It’s natural to feel tempted to use accurate data. In the end, we all know that
    accuracy is intrinsically valuable, and hence we are inclined to pursue accurate
    data, the more, the better. But we must also remember that more accurate data
    entails more complex code and dependencies, and thus more development time and
    maintenance. As we’re following an **agile approach**, we don’t let the *best*
    be the enemy of the *good*, so **we will start as simple as we can, and then add
    complexity gradually, only if it is justified.**
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 很自然地，我们会被诱惑使用准确的数据。最终，我们都知道准确性是内在有价值的，因此我们倾向于追求更准确的数据，越多越好。但我们也必须记住，更准确的数据意味着更复杂的代码和依赖，因此需要更多的开发时间和维护。由于我们遵循**敏捷的方法**，我们不让*最佳*成为*良好*的敌人，因此**我们将尽可能简单地开始，然后逐步增加复杂性，仅在必要时**。
- en: At this point of having to find distances between locations, we could do as
    many do, and jump straight to third-party API-based solutions that require app
    keys, credentials, or even credit card numbers for cloud providers. That approach
    is fine, but often times it is inefficient, as we can forget that **accurate information
    brings added value, but also comes with added costs**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要找到地点之间的距离时，我们可以像很多人一样，直接跳到基于第三方 API 的解决方案，这些方案需要应用密钥、凭据，甚至云服务提供商的信用卡号码。这种方法是可以的，但往往效率不高，因为我们可能会忘记**准确的信息带来附加价值，但也会带来附加成本**。
- en: '*👁️* ***There ain’t no such thing as “free accuracy”***'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*👁️* ***没有“免费准确性”这种事***'
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Remembering that in general we always “pay a price” for accessing accurate
    data (which is closely related to the concept of* [***Value of Information***](https://en.wikipedia.org/wiki/Value_of_information)*)
    is another reason why taking an agile approach to the problem is a leaner course
    of action. By* ***starting with simple assumptions*** *on the “*required level
    of accuracy*”, and verifying their validity* ***on our own problem data****, we
    are ensuring that, if we eventually need to increase the accuracy of our data,
    we will be “paying a price” that is* ***worth the*** *(expected)* ***improved
    results****.*'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*记住通常我们总是“付出代价”来获取准确的数据（这与* [***信息的价值***](https://en.wikipedia.org/wiki/Value_of_information)*)
    紧密相关）是另一个原因，为什么采取敏捷的方法来解决问题是更精简的做法。通过* ***从简单假设开始*** *关于“*所需的准确度*”，并在我们自己的问题数据上验证其有效性*
    ***，我们确保，如果我们最终需要提高数据的准确性，我们将“付出代价”，这种代价是* ***值得的*** *(预期的)* ***改进结果****。'
- en: So let’s start very simple. We have coordinates. **First idea:** these coordinates
    are spread over parcels of the Earth *very small* compared to the radius of the
    Earth, so we could treat the latitudes as Y coordinates and the longitudes as
    X coordinates on a 2D plane, and then just compute the Euclidean distance (fancy
    term for the usual “straight line”).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们从非常简单的开始。我们有坐标。**第一个想法**：这些坐标分布在相对于地球半径*非常小*的地球的地块上，因此我们可以将纬度视为 Y 坐标，将经度视为
    X 坐标，在二维平面上进行计算，然后计算欧几里得距离（即通常所说的“直线”）。
- en: 'Pros: a simple formula for distance, no new dependencies or data, spatial relationships
    between locations are conserved.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：简单的距离公式，没有新的依赖或数据，地点之间的空间关系被保留。
- en: 'Cons: latitudes and longitudes are dimensionless numbers, so the numbers we’d
    get when solving the problem would not be actual distances. This means that some
    info we care about, like total distance traveled, would not be available, even
    if we can obtain the optimal tour.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：纬度和经度是无量纲的数字，因此我们在解决问题时得到的数字将不是实际的距离。这意味着我们关心的一些信息，如总旅行距离，即使我们可以获得最佳路线，也不会提供。
- en: 'The cons trump the pros, so we need a more complex approach (**but still simple**).
    **Second idea**: treat the coordinates as what they are, points on the Earth,
    but approximate the Earth as a sphere. A sphere does not have the familiar Euclidean
    geometry, so we will need a non-trivial formula that considers this spherical
    geometry when calculating the “straight line” distance between two points. So
    now it’s just a matter of implementing that formula using the radius of the Earth.
    We could do that, but we’ll instead rely on a famous library that already does
    that, and even better.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点胜过优点，因此我们需要一种更复杂的方法（**但仍然简单**）。**第二个想法**：将坐标视为它们本身，即地球上的点，但将地球近似为一个球体。一个球体没有我们熟悉的欧几里得几何，因此我们需要一个非平凡的公式，在计算两个点之间的“直线”距离时考虑这种球面几何。所以现在只需使用地球的半径来实现这个公式。我们可以这样做，但我们会依赖一个已经做了这件事的著名库，而且效果更好。
- en: 3.2\. Geolocation utilities with `**geopy**`
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2. 使用 `**geopy**` 的地理位置工具
- en: If this article series were especially focused on geospatial data science, it
    would be valuable to take the time to explain and implement the formula for the
    [great-circle distance](https://en.wikipedia.org/wiki/Great-circle_distance),
    a nice baseline option to compute “straight-line” distances between points on
    a sphere. However, this article series is about the creation of an **optimization-based
    tourism planning system**, so instead of crafting our own formulas for geospatial
    utilities, we will rely on [Geopy](https://geopy.readthedocs.io/en/stable/) to
    do the heavy lifting for us. That way, we maintain focus on reaching a solution
    quickly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这篇文章系列特别关注地理空间数据科学，那么花时间解释和实现[大圆距离](https://en.wikipedia.org/wiki/Great-circle_distance)的公式将是有价值的，这是一种计算球面上两点“直线”距离的良好基准选项。然而，这篇文章系列关于**基于优化的旅游规划系统**，因此，我们将依赖于[Geopy](https://geopy.readthedocs.io/en/stable/)来完成繁重的工作，而不是自制地理空间工具的公式。这样，我们可以专注于快速找到解决方案。
- en: 'Install it by running in an Anaconda prompt (or inside the conda environment
    we created in the [first article](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c#:~:text=For%20organized%20people,in%20this%20series),
    if you created it) the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 Anaconda 提示符（或在我们在[第一篇文章](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c#:~:text=For%20organized%20people,in%20this%20series)中创建的
    conda 环境内）运行以下命令来安装它：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, let’s do a demonstration with `geopy` for just two locations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用 `geopy` 对两个位置进行演示。
- en: 3.3\. Getting to the points
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3\. 到达要点
- en: Given the coordinates of two points, the `[geodesic](https://geopy.readthedocs.io/en/stable/#geopy.distance.geodesic)`
    function of `geopy` computes the distance of the geodesic connecting them across
    the Earth's surface. In Geometry, the [*geodesic*](https://en.wikipedia.org/wiki/Geodesic)
    is the path of minimal distance between points on a given [metric space](https://en.wikipedia.org/wiki/Metric_space).
    In our familiar Euclidean space, **straight lines** are the geodesics. In a spherical
    space, **great-circles** are. The underlying "space" that Geopy's `geodesic` function
    considers is an **accurate ellipsoid model of the Earth**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两点的坐标，`[geodesic](https://geopy.readthedocs.io/en/stable/#geopy.distance.geodesic)`
    函数可以计算它们之间的地球表面最短距离。在几何学中，[*测地线*](https://en.wikipedia.org/wiki/Geodesic) 是在给定[度量空间](https://en.wikipedia.org/wiki/Metric_space)上两点之间的最短路径。在我们熟悉的欧几里得空间中，**直线**就是测地线。在球面空间中，**大圆**是测地线。Geopy
    的 `geodesic` 函数所考虑的基础“空间”是**地球的精确椭球模型**。
- en: '***👁 A great-circle is great, but an ellipse is even greater***'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***👁 大圆很棒，但椭圆更棒***'
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Earlier I said we would consider the Earth to be a sphere, because it was
    the simplest workable approximation. In reality, the Earth isn’t a sphere, but
    an ellipsoid, a solid with a more complex geometry. Now that* `*geopy*` *will
    spare us from coding our own functions for non-Euclidean geometries, we can upgrade
    our approximation of the Earth and employ the more accurate* ***ellipsoidal distance***
    *between two points, instead of the great-circle distance. A better Earth model
    for the same lines of code. This indeed is free accuracy, so why not take it?*'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*之前我说过，我们将地球视为一个球体，因为这是最简单的可行近似。实际上，地球并不是一个球体，而是一个椭球体，是一种具有更复杂几何形状的固体。现在`*geopy*`*将免于我们为非欧几里得几何编写自己的函数，我们可以升级对地球的近似，并使用更精确的*
    ***椭球距离*** *来代替大圆距离。对于相同的代码行，这确实是免费的精确度，那么为什么不使用呢？*'
- en: 'Here’s a function that computes the ellipsoidal distance between point 1 and
    point 2, in meters:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个计算点 1 和点 2 之间椭球距离的函数，单位为米：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What is the distance between the Eiffel Tour and the Louvre?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 埃菲尔铁塔和卢浮宫之间的距离是多少？
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 3173 meters, around 3.2 km. Google Maps says it’s 3.5 km. The **computed** distance
    is 8.6 % lower than the “**real**” distance. Our legs only care about *absolute
    errors* in distance, though, which in this case amounts to just 330 extra meters
    to walk, compared to the estimated distance. Doesn’t seem like a significant error
    for a tourist who expects to be walking around all day in a big city.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 3173 米，大约 3.2 公里。谷歌地图显示为 3.5 公里。**计算**的距离比“**真实**”距离低 8.6%。不过，我们的腿只关心距离的*绝对误差*，在这种情况下，只比估算距离多走了
    330 米，对期望全天在大城市步行的游客来说，这似乎不是一个显著的误差。
- en: And between the Eiffel Tour and Port de Suffren?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 那么埃菲尔铁塔和苏弗伦港之间呢？
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 328 meters, this time 6% lower (just 22 meters shorter) than the 350 meters
    Google Maps provides. Not that bad for applying a formula. As we would expect,
    the closer the points are, the less chance there is for streets to zigzag and
    turns to appear, and hence the lower the error incurred by the ellipsoid model.
    Looks **good enough** for our present purposes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 328米，这次比Google Maps提供的350米低6%（仅22米短）。对于应用一个公式来说，这还不错。正如我们所预期的，点越近，街道出现之类的曲折转弯的机会越小，因此椭球模型产生的误差也越小。对于我们目前的目的来看，显得**足够好**。
- en: Now we must apply this function to all pairs of locations, thus getting the
    distance matrix the TSP model needs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须将这个函数应用于所有位置对，从而得到TSP模型所需的距离矩阵。
- en: 3.4\. From coordinates to distance matrix
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4\. 从坐标到距离矩阵
- en: This is the easy part, where we just have to loop over all the sites twice and
    compute and store the distance between each pair. The below function does that.
    Note that the distance metric is passed as an optional argument, being the ellipsoidal
    distance we used before the default. We leave the door open to better distance
    metrics to be passed in the future.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分很简单，我们只需对所有站点进行两次循环，计算并存储每对之间的距离。下面的函数就是这样做的。注意，距离度量作为可选参数传递，默认是我们之前使用的椭球距离。我们留着以后传递更好的距离度量的可能性。
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/dc8c5a88bbc2fe418177b846e152407c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc8c5a88bbc2fe418177b846e152407c.png)'
- en: '**Figure 3.** Distance matrix resulting from using the ellipsoidal model of
    the Earth. (Image by author)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.** 使用地球椭球模型得到的距离矩阵。（图像来源：作者）'
- en: And there we have it! As expected, the diagonal of the matrix is zero, and the
    matrix is symmetric. The index and columns of the output dataframe contain the
    names of the input sites.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！正如预期的那样，矩阵的对角线为零，矩阵是对称的。输出数据框的索引和列包含输入站点的名称。
- en: Functionality demonstrated. Now we can do better to facilitate the use of this
    function. Let’s wrap up this functionality inside a class in a convenient manner,
    **for easy re-use**, and more importantly, for **easier integration with the optimization
    model** of the TSP we built in the previous sprint.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 功能演示完毕。现在我们可以更好地方便使用这个函数。让我们以一种便捷的方式将这个功能封装在一个类中，**以便于重复使用**，更重要的是，**为了更容易与我们在上一个冲刺中构建的TSP优化模型集成**。
- en: 4\. Wrap it up! (inside a class)
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 总结！(在类内部)
- en: 4.1\. `GeoAnalyzer` class design
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1\. `GeoAnalyzer` 类设计
- en: 'Let’s create a new class, `GeoAnalyzer`, dedicated to the geospatial utilities
    that may arise in routing problems. As such, our function `compute_distance_matrix`
    fits in naturally as a method. The main parts of this class will be, for now:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的类，`GeoAnalyzer`，专门用于处理可能出现在路由问题中的地理空间工具。因此，我们的函数`compute_distance_matrix`自然地作为一个方法嵌入其中。这个类的主要部分目前将包括：
- en: A dataframe having site locations, the attribute `_df_locations`.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含站点位置的数据框，属性为`_df_locations`。
- en: The pure function `ellipsoidal_distance`.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯函数`ellipsoidal_distance`。
- en: The method `get_distance_matrix`, being equivalent to the previous function
    `compute_distance_matrix`, but using the instance attribute `_df_locations` to
    compute the distances.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法`get_distance_matrix`，等同于之前的函数`compute_distance_matrix`，但使用实例属性`_df_locations`来计算距离。
- en: Since the user may want to add new locations to the list of locations at any
    point in his analysis, we include the method `add_locations` that accepts a dataframe
    of geographical coordinates and appends it to the previously existing one.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户可能希望在分析的任何时刻添加新位置，我们包括了一个名为`add_locations`的方法，该方法接受一个地理坐标的数据框，并将其附加到先前存在的数据框中。
- en: Below you can find the definition of `GeoAnalyzer`. Note there are other convenience
    methods and properties not mentioned here.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下面可以找到`GeoAnalyzer`的定义。注意这里还有其他便利的方法和属性未提及。
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 4.2\. Class usage demo
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2\. 类使用演示
- en: 'Let’s explore a bit the main functionality of the class. We create an instance
    and add our sites of interest from Paris:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微探索一下这个类的主要功能。我们创建一个实例并从巴黎添加我们感兴趣的站点：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We check the representation of our instance at this point, which informs us
    that we’ve provided 9 locations, which we can check the details of with the attribute
    `locations`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查此时实例的表示，告知我们已经提供了9个位置，我们可以通过属性`locations`查看详细信息：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/eeb4a74be1a03f64e941620e2256c7c0.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eeb4a74be1a03f64e941620e2256c7c0.png)'
- en: 'Of course, we can extract the distance matrix from the object, which by now
    it’s quite familiar:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以从对象中提取距离矩阵，到目前为止这已经相当熟悉了：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/dc8c5a88bbc2fe418177b846e152407c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc8c5a88bbc2fe418177b846e152407c.png)'
- en: 'And lastly, in case we’re curious about where these values come from, we can
    check it from the dataframe itself:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们对这些值的来源感到好奇，我们可以从数据框本身进行检查：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This would be more valuable if more distance metrics were available, something
    that we will see in future sprints.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有更多的距离度量可用，这将更加有价值，这是我们在未来冲刺中将看到的内容。
- en: 5\. Conclusion (or planning for next sprint)
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 结论（或为下一个冲刺做计划）
- en: 'The end result of our work has been a class, `GeoAnalyzer`, with convenient
    methods that will help us generalize the Traveling Salesman Problem to arbitrary
    sets of sites. That generalization will be the precise goal of our [next sprint](https://medium.com/@carlosjuribe/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9),
    in which **we will create an estimator-like class for the TSP** that hides away
    the model-building steps covered in [sprint 2](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c)
    and takes as input the geo-coordinates of the sites to be visited. The `GeoAnalyzer`
    class will be a key component of this new estimator class, **enabling a true general
    use of the TSP optimization model** we have built. This new estimator-like class,
    combining the generality of both the `GeoAnalyzer` and the TSP model, will become
    the core of our solution to the more general **Traveling Tourist Problem** we
    aspire to solve. Continue to the [next sprint](https://medium.com/@carlosjuribe/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9)
    for the real deal:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工作的最终结果是一个名为 `GeoAnalyzer` 的类，具有便捷的方法，帮助我们将旅行推销员问题推广到任意的站点集合。这个推广将是我们[下一个冲刺](https://medium.com/@carlosjuribe/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9)的具体目标，**我们将为
    TSP 创建一个类似估算器的类**，它隐藏了在[sprint 2](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c)中涉及的模型构建步骤，并以待访问站点的地理坐标作为输入。`GeoAnalyzer`
    类将是这个新估算器类的关键组成部分，**实现我们所构建的 TSP 优化模型的真正通用应用**。这个新的类似估算器的类，将结合 `GeoAnalyzer` 和
    TSP 模型的通用性，将成为我们解决更一般的**旅行游客问题**的核心。继续阅读[下一个冲刺](https://medium.com/@carlosjuribe/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9)，了解真正的内容：
- en: '[](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9?source=post_page-----d5fc92a0ba9e--------------------------------)
    [## A classy approach to solving Traveling Salesman Problems effectively with
    Python'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9?source=post_page-----d5fc92a0ba9e--------------------------------)
    [## 一种优雅的方法来有效解决旅行推销员问题，使用 Python'
- en: Implementing the TSP model in a scikit-learn-like fashion to ease the building
    and solving of routing optimization…
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以类似 scikit-learn 的方式实现 TSP 模型，以简化路由优化的构建和解决过程…
- en: towardsdatascience.com](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9?source=post_page-----d5fc92a0ba9e--------------------------------)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9?source=post_page-----d5fc92a0ba9e--------------------------------)
- en: Feel free to follow me, ask me questions, **give me feedback**, or contact me
    on [LinkedIn](https://www.linkedin.com/in/carlosjuribe/). Thanks for reading!
    📈😊
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 随时关注我，向我提问，**给我反馈**，或通过[LinkedIn](https://www.linkedin.com/in/carlosjuribe/)与我联系。感谢阅读！📈😊
