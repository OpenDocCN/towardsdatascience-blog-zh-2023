- en: How to Generate and Evaluate the Performance of Knowledge Graph Embeddings?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何生成和评估知识图谱嵌入的表现？
- en: 原文：[https://towardsdatascience.com/how-to-generate-and-evaluate-the-performance-of-knowledge-graph-embeddings-95789abcb0c1](https://towardsdatascience.com/how-to-generate-and-evaluate-the-performance-of-knowledge-graph-embeddings-95789abcb0c1)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-generate-and-evaluate-the-performance-of-knowledge-graph-embeddings-95789abcb0c1](https://towardsdatascience.com/how-to-generate-and-evaluate-the-performance-of-knowledge-graph-embeddings-95789abcb0c1)
- en: A detailed guide to knowledge graph embedding training and evaluation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 知识图谱嵌入训练与评估的详细指南
- en: '[](https://medium.com/@rohithtejam?source=post_page-----95789abcb0c1--------------------------------)[![Rohith
    Teja](../Images/3b83438350f3eb69309b9abf715d6ee7.png)](https://medium.com/@rohithtejam?source=post_page-----95789abcb0c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----95789abcb0c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----95789abcb0c1--------------------------------)
    [Rohith Teja](https://medium.com/@rohithtejam?source=post_page-----95789abcb0c1--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@rohithtejam?source=post_page-----95789abcb0c1--------------------------------)[![Rohith
    Teja](../Images/3b83438350f3eb69309b9abf715d6ee7.png)](https://medium.com/@rohithtejam?source=post_page-----95789abcb0c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----95789abcb0c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----95789abcb0c1--------------------------------)
    [Rohith Teja](https://medium.com/@rohithtejam?source=post_page-----95789abcb0c1--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----95789abcb0c1--------------------------------)
    ·7 min read·Apr 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----95789abcb0c1--------------------------------)
    ·7 分钟阅读·2023年4月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d8b56187761abee2d42e0d8a1cba1a51.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8b56187761abee2d42e0d8a1cba1a51.png)'
- en: Photo by [Alina Grubnyak](https://unsplash.com/it/@alinnnaaaa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/network?orientation=landscape&utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Alina Grubnyak](https://unsplash.com/it/@alinnnaaaa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/s/photos/network?orientation=landscape&utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: 'Before you start with this article, I assume you have some brief idea about
    knowledge graph embeddings. If not, I suggest you check the following article,
    which gives you a good idea about the concept:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始阅读本文之前，我假设你对知识图谱嵌入有一些基本了解。如果没有，我建议你查看以下文章，它会给你一个关于这个概念的很好的介绍：
- en: '[](/knowledge-graph-embedding-a-simplified-version-e6b0a03d373d?source=post_page-----95789abcb0c1--------------------------------)
    [## Knowledge Graph Embedding — A Simplified Version!'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/knowledge-graph-embedding-a-simplified-version-e6b0a03d373d?source=post_page-----95789abcb0c1--------------------------------)
    [## 知识图谱嵌入 — 简化版！'
- en: An explanation of what knowledge graph embeddings actually are and how to calculate
    them.
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释了知识图谱嵌入到底是什么以及如何计算它们。
- en: towardsdatascience.com](/knowledge-graph-embedding-a-simplified-version-e6b0a03d373d?source=post_page-----95789abcb0c1--------------------------------)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/knowledge-graph-embedding-a-simplified-version-e6b0a03d373d?source=post_page-----95789abcb0c1--------------------------------)
- en: Now with this out of the way, in this article, I will show how you can generate
    knowledge graph embeddings, interpret them and also evaluate their performance
    on graph-based tasks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些内容都处理完了，在这篇文章中，我将展示如何生成知识图谱嵌入、解释它们以及评估它们在基于图的任务中的表现。
- en: Knowledge graph
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识图谱
- en: Consider a knowledge graph of [countries](https://pykeen.readthedocs.io/en/stable/api/pykeen.datasets.Countries.html#pykeen.datasets.Countries).
    In this graph, we have the names of countries and regions as entities. The relations
    are represented by two properties, namely, “neighbor” and “locatedin”.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个 [国家](https://pykeen.readthedocs.io/en/stable/api/pykeen.datasets.Countries.html#pykeen.datasets.Countries)
    的知识图谱。在这个图谱中，我们将国家和地区的名称视为实体。关系由两个属性表示，即“neighbor”和“locatedin”。
- en: The graph is a built-in dataset of the PyKEEN Python library.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该图是 PyKEEN Python 库的内置数据集。
- en: 'Check the following screenshot of the knowledge graph triples shown as a data
    frame:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下知识图谱三元组作为数据框的截图：
- en: '![](../Images/12d448b0ee72d590bb322777899be0ea.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/12d448b0ee72d590bb322777899be0ea.png)'
- en: Knowledge graph triples (Image by Author)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱三元组（作者提供的图像）
- en: 'The triples are in the form `(croatia, neighbor, serbia)` and `(denmark, locatedin,
    europe).` Below is a full visualization of the graph using the NetworkX Python
    library:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 三元组的形式为`(croatia, neighbor, serbia)`和`(denmark, locatedin, europe)`。下面是使用NetworkX
    Python库的图的完整可视化：
- en: '![](../Images/fa9ed7f4cbe1960153c09337113668b4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa9ed7f4cbe1960153c09337113668b4.png)'
- en: “Countries” knowledge graph (Image by Author)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “国家”知识图谱（作者图片）
- en: The graph is big, so the visualization is not too clear. Let’s check a subgraph
    of this knowledge graph.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图很大，因此可视化不是很清晰。让我们查看这个知识图谱的一个子图。
- en: '![](../Images/22417ad004036e70d0a154465ec55f33.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22417ad004036e70d0a154465ec55f33.png)'
- en: Subgraph of “Countries” knowledge graph (Image by Author)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “国家”知识图谱的子图（作者图片）
- en: The subgraph above clearly illustrates the triples, showing both the entities
    and relations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述子图清晰地展示了三元组，显示了实体和关系。
- en: Now we have a knowledge graph. Let’s understand how to generate the knowledge
    graph embeddings using the [PyKEEN](https://pykeen.readthedocs.io/en/stable/)
    Python library.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了知识图谱。让我们了解如何使用[PyKEEN](https://pykeen.readthedocs.io/en/stable/) Python库生成知识图谱嵌入。
- en: Knowledge graph embeddings
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识图谱嵌入
- en: '![](../Images/0ccc85fb032d94ca6f7da2a51dd69c24.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ccc85fb032d94ca6f7da2a51dd69c24.png)'
- en: Embedding visualization using PCA (Image by Author)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PCA进行嵌入可视化（作者图片）
- en: The above shown is a visualization of the knowledge graph embeddings trained
    using `TransR` algorithm. Observe how countries are bunched together. On the top
    of the visualization, we see Bosnia, Montenegro, and Albania close to each other.
    This indicates the embedding algorithm was able to club the countries with similar
    properties together.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示为使用`TransR`算法训练的知识图谱嵌入的可视化。观察各国如何被聚集在一起。在可视化的顶部，我们看到波斯尼亚、黑山和阿尔巴尼亚彼此接近。这表明嵌入算法能够将具有相似属性的国家聚集在一起。
- en: The visualization is made using PCA, where the embedding size of 128 is reduced
    to a size of 2 dimensions. This might impact the accuracy of grouping the countries.
    Also, the embedding algorithm can be tuned to improve the performance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化使用PCA进行，其中128维的嵌入被缩减到2维。这可能会影响国家分组的准确性。此外，嵌入算法可以进行调整以提高性能。
- en: 'Here is the code to generate the embeddings:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成嵌入的代码：
- en: Prerequisites
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Read the data
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取数据
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generate the embeddings
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成嵌入
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the code above, the `TriplesFactory` class provides a standardized representation
    of the triples in the knowledge graph. PyKEEN has different methods to read and
    manipulate triples. Also, to split the data into training, validation, and test
    sets. Here, I just split the data into train and test sets, as I am not performing
    any hyperparameter tuning.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`TriplesFactory`类提供了知识图谱中三元组的标准化表示。PyKEEN有不同的方法来读取和操作三元组。此外，也可以将数据划分为训练集、验证集和测试集。在这里，我仅将数据划分为训练集和测试集，因为我没有进行任何超参数调整。
- en: I selected the `TransR` model and set the embedding dimension to 128 and epochs
    to 200.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了`TransR`模型，并将嵌入维度设置为128，轮次设置为200。
- en: 'The Loss vs. Epochs plot looks as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 损失与轮次图如下所示：
- en: '![](../Images/1e1f03c7aca43c1562679bbf864a989e.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e1f03c7aca43c1562679bbf864a989e.png)'
- en: Loss vs. Epochs (Image by Author)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 损失与轮次（作者图片）
- en: The loss decreases until 100 epochs and then remains almost constant. 100 epochs
    would have been fine for this training process. Oh well!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 损失在100轮次后减少，并且保持几乎不变。100轮次对于这个训练过程来说已经足够了。哎呀！
- en: Retrieve the embeddings
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索嵌入
- en: The training process is done, and now, we can retrieve the embeddings from the
    `result` object of PyKEEN’s `pipeline()` function. We learn embeddings for both
    entities and relations. These embeddings can be visualized using any dimensionality
    reduction methods like PCA or t-SNE (same as the visualization shown in the section
    above).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 训练过程已完成，现在我们可以从PyKEEN的`pipeline()`函数的`result`对象中检索嵌入。我们学习了实体和关系的嵌入。这些嵌入可以使用任何降维方法如PCA或t-SNE进行可视化（与上面部分的可视化相同）。
- en: 'Below is the code to get embeddings after the training process is done:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是训练过程完成后获取嵌入的代码：
- en: Entity embeddings
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体嵌入
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Relation embeddings
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系嵌入
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Evaluation of embeddings
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入的评估
- en: We have seen the generation of embeddings and also how to retrieve them. Now
    let’s check their performance on link prediction. Link prediction is a graph-based
    task that involves predicting missing or future links between nodes in a graph.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到嵌入的生成以及如何检索它们。现在，让我们检查它们在链接预测中的表现。链接预测是一个基于图的任务，涉及预测图中节点之间的缺失或未来链接。
- en: Check my [article](https://medium.com/towards-data-science/a-quick-note-on-graphs-and-the-formulation-of-their-downstream-tasks-d8a8c808c93f)
    that details graph-based tasks like link prediction and node classification.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 查看我的[文章](https://medium.com/towards-data-science/a-quick-note-on-graphs-and-the-formulation-of-their-downstream-tasks-d8a8c808c93f)来详细了解图形任务，如链接预测和节点分类。
- en: PyKEEN provides an easy way to perform the evaluation of a link prediction task.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: PyKEEN 提供了一种简单的方法来执行链接预测任务的评估。
- en: I will create a data frame for train and test sets so that it is easier to understand
    the evaluation process.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我将创建一个数据框架来展示训练和测试集，以便更容易理解评估过程。
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I will use the scoring-based evaluation to perform the task of tail prediction
    (a variant of link prediction). The model has to predict the tail entity from
    the test set. I consider 3 cases to showcase the working of this evaluation process.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用基于评分的评估来执行尾预测任务（链接预测的一种变体）。模型必须从测试集中预测尾部实体。我考虑了3个案例来展示这一评估过程的工作情况。
- en: 'Case 1: Mexico'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例 1：墨西哥
- en: '![](../Images/32e5201edfc2c35f99f5405761d45482.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32e5201edfc2c35f99f5405761d45482.png)'
- en: 'Tail prediction: Mexico (Image by Author)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尾预测：墨西哥（作者图片）
- en: In the above image, we see that the model is trained on three triples involving
    `Mexico` as a head entity. The test set has one instance with the relation `neighbor.`
    Our objective is to correctly predict the tail entity of the test set, i.e., predict
    `united_states` from the triple `(mexico, neighbor, united_states).`
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图像中，我们看到模型在涉及`Mexico`作为头实体的三个三元组上进行了训练。测试集有一个实例，关系为`neighbor`。我们的目标是正确预测测试集的尾实体，即从三元组`(mexico,
    neighbor, united_states)`中预测`united_states`。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The above code block performs the tail prediction for the “missing” triple `(mexico,
    neighbor, **?**).`
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块对“缺失”三元组`(mexico, neighbor, **?**)`执行尾预测。
- en: '![](../Images/3a3e577611b2219fb8b7e333812f7a47.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a3e577611b2219fb8b7e333812f7a47.png)'
- en: 'Tail prediction: Mexico (Image by Author)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尾预测：墨西哥（作者图片）
- en: In the output above, we see that the model ranks `belize`, `guatemala` and `united_states`
    as the top predictions based on a scoring-based method. `belize` and `guatemala`
    were already present in the training set, and the model correctly predicted `united_states`.
    Observe how the top-ranked predictions have a better score.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，我们看到模型根据基于评分的方法将`belize`、`guatemala`和`united_states`排在前列。`belize`和`guatemala`已存在于训练集中，而模型正确预测了`united_states`。请观察排名前列的预测结果得分更高。
- en: This is one of the use cases of the link prediction task.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是链接预测任务的一个应用案例。
- en: 'Case 2: Senegal'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例 2：塞内加尔
- en: '![](../Images/3b18abe745068325bd986e75be0feb5e.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b18abe745068325bd986e75be0feb5e.png)'
- en: 'Tail prediction: Senegal (Image by Author)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尾预测：塞内加尔（作者图片）
- en: 'Here, we predict the tail of the test triple `(senegal, locatedin, **?**).`
    There is only one instance in the test set. The prediction is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们预测测试三元组`(senegal, locatedin, **?**)`的尾部。测试集中只有一个实例。预测结果如下：
- en: '![](../Images/8b34e617994ac585e146505d6076252e.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b34e617994ac585e146505d6076252e.png)'
- en: 'Tail prediction: Senegal (Image by Author)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尾预测：塞内加尔（作者图片）
- en: 'Case 3: Bhutan'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例 3：不丹
- en: '![](../Images/071778591c3eca6a14e5f81bc6211f1b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/071778591c3eca6a14e5f81bc6211f1b.png)'
- en: 'Tail prediction: Bhutan (Image by Author)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尾预测：不丹（作者图片）
- en: 'Here, there are two instances in the test set. Let’s see the predictions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，测试集中有两个实例。让我们看看预测结果：
- en: '![](../Images/3d7507f495180f8a5b187fb35f652c58.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d7507f495180f8a5b187fb35f652c58.png)'
- en: 'Tail prediction: Bhutan (Image by Author)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尾预测：不丹（作者图片）
- en: The model correctly scores the first instance of tail prediction (`india`) but
    fails to score the second instance (`china`) in the top ranks. It successfully
    predicts the tail label but with low confidence.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 模型正确地对第一个尾预测实例（`india`）进行了评分，但未能将第二个实例（`china`）列入前列。它成功预测了尾标签，但信心较低。
- en: This is because the model failed to perfectly capture the network relationship
    in the embeddings. Remember that I did not perform the hyperparameter optimization
    when training the model, which might have hampered the performance.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为模型未能完美捕捉嵌入中的网络关系。请记住，在训练模型时我没有进行超参数优化，这可能影响了性能。
- en: Evaluation metrics
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估指标
- en: In the above section, I showed a basic evaluation process. We have [rank-based
    evaluation](https://pykeen.readthedocs.io/en/stable/tutorial/understanding_evaluation.html)
    methods that quantify the model performance. The rank-based methods have several
    metrics, and one of the important metrics is mean rank.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上节中，我展示了一个基本的评估过程。我们有[基于排名的评估](https://pykeen.readthedocs.io/en/stable/tutorial/understanding_evaluation.html)方法来量化模型性能。基于排名的方法有多个指标，其中一个重要的指标是平均排名。
- en: 'Mean rank is the average rank of the correct prediction across all test triples.
    In the above 3 cases, the mean rank can be calculated as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 平均排名是所有测试三元组中正确预测的平均排名。在上述 3 个案例中，平均排名可以按如下方式计算：
- en: 'Case 1: Rank = 4'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 案例 1：排名 = 4
- en: 'Case 2: Rank = 2'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 案例 2：排名 = 2
- en: 'Case 3: Rank = 2 (first instance)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 案例 3：排名 = 2（第一次实例）
- en: 'Case 3: Rank = 13 (second instance)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 案例 3：排名 = 13（第二次实例）
- en: Hence, the mean rank is `(4+2+2+13)/4` = 5.25
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，平均排名是`(4+2+2+13)/4` = 5.25
- en: 'The mean rank for the entire test set is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 整个测试集的平均排名如下：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/ed4e11b0886102dd1e16e2b66cc1f43a.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ed4e11b0886102dd1e16e2b66cc1f43a.png)'
- en: Mean rank (Image by Author)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 平均排名（图片由作者提供）
- en: We performed a tail prediction in the above 3 cases. For the entire test set,
    the mean rank for tail prediction is around 7.2, which is not too shabby.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上述 3 个案例中进行了尾部预测。对于整个测试集，尾部预测的平均排名约为 7.2，这还不错。
- en: We have trained a decent knowledge graph embedding model!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们训练了一个相当不错的知识图谱嵌入模型！
- en: Thanks for reading, and cheers!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，干杯！
- en: '**Want to Connect?**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**想要联系？**'
- en: Reach me at [LinkedIn](https://www.linkedin.com/in/rohithteja/), [Twitter](https://twitter.com/rohithtejam),
    [GitHub](https://github.com/rohithteja), or [Website](https://rohithteja.github.io/)!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [LinkedIn](https://www.linkedin.com/in/rohithteja/)、[Twitter](https://twitter.com/rohithtejam)、[GitHub](https://github.com/rohithteja)
    或 [Website](https://rohithteja.github.io/) 联系我！
