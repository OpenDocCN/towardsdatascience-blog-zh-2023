- en: Protocols in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的协议
- en: 原文：[https://towardsdatascience.com/protocols-in-python-110943832d98?source=collection_archive---------0-----------------------#2023-07-27](https://towardsdatascience.com/protocols-in-python-110943832d98?source=collection_archive---------0-----------------------#2023-07-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/protocols-in-python-110943832d98?source=collection_archive---------0-----------------------#2023-07-27](https://towardsdatascience.com/protocols-in-python-110943832d98?source=collection_archive---------0-----------------------#2023-07-27)
- en: How to use structural subtyping
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用结构性子类型
- en: '[](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)[](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----110943832d98--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff2daf6260cca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprotocols-in-python-110943832d98&user=Oliver+S&userId=f2daf6260cca&source=post_page-f2daf6260cca----110943832d98---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    ·5 min read·Jul 27, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F110943832d98&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprotocols-in-python-110943832d98&user=Oliver+S&userId=f2daf6260cca&source=-----110943832d98---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff2daf6260cca&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprotocols-in-python-110943832d98&user=Oliver+S&userId=f2daf6260cca&source=post_page-f2daf6260cca----110943832d98---------------------post_header-----------)
    发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----110943832d98--------------------------------)
    ·5分钟阅读·2023年7月27日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F110943832d98&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprotocols-in-python-110943832d98&user=Oliver+S&userId=f2daf6260cca&source=-----110943832d98---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F110943832d98&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprotocols-in-python-110943832d98&source=-----110943832d98---------------------bookmark_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F110943832d98&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fprotocols-in-python-110943832d98&source=-----110943832d98---------------------bookmark_footer-----------)'
- en: 'Python 3.8 introduced a neat new feature: [protocols](https://peps.python.org/pep-0544/).
    Protocols are an alternative to [abstract base classes (ABC)](https://docs.python.org/3/library/abc.html),
    and allow structural subtyping — checking whether two classes are compatible based
    on available attributes and functions alone. In this post we’ll go into the details
    about this and show how to use protocols using practical examples.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.8引入了一个新特性： [协议](https://peps.python.org/pep-0544/)。协议是[抽象基类 (ABC)](https://docs.python.org/3/library/abc.html)的替代方案，允许结构性子类型——仅根据可用的属性和函数检查两个类是否兼容。在这篇文章中，我们将深入探讨这一点，并通过实际示例展示如何使用协议。
- en: '![](../Images/90dd020181af078f64485fe5957a0b41.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/90dd020181af078f64485fe5957a0b41.png)'
- en: Photo by [Chris Liverani](https://unsplash.com/@chrisliverani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/9cd8qOgeNIY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Chris Liverani](https://unsplash.com/@chrisliverani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，来源于[Unsplash](https://unsplash.com/photos/9cd8qOgeNIY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Typing in Python
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的类型
- en: 'Let us begin by discussing how Python is typed. It is a dynamically typed language,
    meaning types are inferred at runtime and the following code runs without problems:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先讨论一下Python的类型系统。它是一种动态类型语言，意味着类型是在运行时推断的，下面的代码运行没有问题：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first call results in an integer addition returning 5, the second in a
    string concatenation returning “str1str2”. This is different to e.g. C++, which
    is statically typed — and we have to provide type declarations:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用会返回整数相加的结果5，第二次调用会返回字符串连接的结果“str1str2”。这与例如 C++ 这样的静态类型语言不同——我们必须提供类型声明：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Static typing offers the advantage of having the potential to catching errors
    at compile time — whereas in dynamically typed languages we only encounter these
    during runtime…
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 静态类型提供了在编译时捕捉错误的潜力这一优势——而在动态类型语言中，我们只能在运行时遇到这些错误……
