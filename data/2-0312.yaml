- en: Animating Spatial Movement in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Python 动画化空间移动
- en: 原文：[https://towardsdatascience.com/animating-spatial-movement-in-python-ccf4e9462a0f](https://towardsdatascience.com/animating-spatial-movement-in-python-ccf4e9462a0f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/animating-spatial-movement-in-python-ccf4e9462a0f](https://towardsdatascience.com/animating-spatial-movement-in-python-ccf4e9462a0f)
- en: How to turn an origin-destination matrix into a mesmerizing animation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将起点-终点矩阵转化为迷人的动画
- en: '[](https://medium.com/@haavardwallinaagesen?source=post_page-----ccf4e9462a0f--------------------------------)[![Håvard
    Wallin Aagesen](../Images/45b79e090806b39359781b56710cbe77.png)](https://medium.com/@haavardwallinaagesen?source=post_page-----ccf4e9462a0f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ccf4e9462a0f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ccf4e9462a0f--------------------------------)
    [Håvard Wallin Aagesen](https://medium.com/@haavardwallinaagesen?source=post_page-----ccf4e9462a0f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@haavardwallinaagesen?source=post_page-----ccf4e9462a0f--------------------------------)[![Håvard
    Wallin Aagesen](../Images/45b79e090806b39359781b56710cbe77.png)](https://medium.com/@haavardwallinaagesen?source=post_page-----ccf4e9462a0f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ccf4e9462a0f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ccf4e9462a0f--------------------------------)
    [Håvard Wallin Aagesen](https://medium.com/@haavardwallinaagesen?source=post_page-----ccf4e9462a0f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ccf4e9462a0f--------------------------------)
    ·6 min read·Nov 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ccf4e9462a0f--------------------------------)
    ·阅读时间6分钟·2023年11月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/61608028da72395e20f21dca85cb6f13.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61608028da72395e20f21dca85cb6f13.png)'
- en: Static map of movements from bike sharing data. Image by author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车共享数据的移动静态地图。图片由作者提供。
- en: Spatial data is inherently visual, and the advances in visualizing (geo-)spatial
    data in Python has made it very easy to quickly plot maps of all shapes and forms.
    Even creating animations of charts and simple maps is quite easily possible. Choropleth
    maps in particular, with static polygons and changing colours, there are ready-made
    functions to do.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 空间数据本质上是可视化的，Python 在可视化（地理）空间数据方面的进步使得快速绘制各种形状和形式的地图变得非常简单。甚至创建图表和简单地图的动画也是相对容易的。特别是
    Choropleth 地图，具有静态多边形和变化的颜色，已经有现成的函数来完成这项工作。
- en: But, when it comes to movement data and animating lines, the task is a bit more
    cumbersome. Here I will try to give an example of how I have tried to solve animating
    spatial movement data in Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但当涉及到移动数据和动画化线路时，这项任务就显得有些繁琐。在这里，我将尝试给出一个示例，展示我如何在 Python 中解决空间移动数据动画化的问题。
- en: Initial Data
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始数据
- en: To start, we need some (line-)data with timestamps; in this example I will use
    bike sharing data from the bike sharing system in Oslo, Norway. The data is openly
    available under the [Norwegian Licence for Open Government Data (NLOD) 2.0](https://data.norge.no/nlod/no/2.0#_lisensavtalens_innledning)/Open
    Government License, from the homepage of [Oslo Bysykkel.](https://oslobysykkel.no/en/open-data)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一些带有时间戳的（线型）数据；在这个例子中，我将使用来自挪威奥斯陆的自行车共享系统的数据。这些数据在[挪威开放政府数据许可证 (NLOD)
    2.0](https://data.norge.no/nlod/no/2.0#_lisensavtalens_innledning)/开放政府许可证下公开提供，可以从[Oslo
    Bysykkel](https://oslobysykkel.no/en/open-data)的主页获取。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/354963fa584d5a2b6b724da8d3e451e4.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/354963fa584d5a2b6b724da8d3e451e4.png)'
- en: The first five rows of the initial dataset. Image by author.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 初始数据集的前五行。图片由作者提供。
- en: As the data consist of the start and end points of the trips, we need to create
    a line between the points, and for that we can use the implementation of Dijkstra’s
    algorithm in NetworkX.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据包括旅行的起点和终点，我们需要在这些点之间创建一条线，为此我们可以使用 NetworkX 中 Dijkstra 算法的实现。
- en: Creating movement lines
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建移动线路
- en: Before we can create the movement lines, we need a network of streets that we
    can use to for a shortest path calculation. With `osmnx` we can retrieve a bike
    network from OpenStreetMap for the area we are interested in. We will use the
    extent of the bike trip data as our study area.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以创建移动线路之前，我们需要一个街道网络，以便进行最短路径计算。通过 `osmnx`，我们可以从 OpenStreetMap 获取我们感兴趣区域的自行车网络。我们将使用自行车旅行数据的范围作为我们的研究区域。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To calculate the shortest path with Dijkstra’s Algorithm we can create a function
    which we will apply to our dataframe:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Dijkstra 算法计算最短路径，我们可以创建一个函数，并将其应用于我们的数据框：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can now apply the function to the dataframe. To do so, we create Shapely
    Points for the start and end points, and then use these in function to calculate
    the path between them:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将函数应用于数据框。为此，我们创建Shapely点作为起点和终点，然后在函数中使用这些点来计算它们之间的路径：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/628ce3f468ef6e39878eb79efadd9dda.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/628ce3f468ef6e39878eb79efadd9dda.png)'
- en: Dataset now with shortest path. Image by author.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集现在具有最短路径。作者图片。
- en: 'Before we start splitting the lines up into points along the path, we can prepare
    the time data so that it can be displayed nicely in our final animation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始将行拆分为路径上的点之前，我们可以准备时间数据，以便在最终动画中美观地显示：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/b9fcef2d05b905ca87e58a624d7b9c63.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9fcef2d05b905ca87e58a624d7b9c63.png)'
- en: One of the rows calculated into the shortest path between the start and end
    point. Image by author.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 计算出的最短路径中的一行。作者图片。
- en: Splitting up lines
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拆分行
- en: Now that we have our movement lines, the idea is to create a dot along this
    line at a set interval so that we can plot the points in order based on the time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了移动线路，目的是在这条线路上以固定的间隔创建一个点，以便根据时间顺序绘制这些点。
- en: The following `line_to_points()`-function goes through each of the lines in
    our dataframe and splits the line up into segments based on the duration of the
    bike trips. In this example, each line is split up after 15 seconds and a point
    is created at that location.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`line_to_points()`函数遍历数据框中的每一行，并根据自行车旅行的持续时间将行拆分为段。在这个例子中，每行在15秒后被拆分，并在该位置创建一个点。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the `line_to_points()`-function we create a new dataframe with only the
    points we want to animate with a timestamp that we can iterate over when we do
    the plotting.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`line_to_points()`函数，我们创建一个新的数据框，只包含我们希望用时间戳动画化的点，我们可以在绘图时迭代这些点。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/e750c61c1ce08d551aa47f1deb9fa32d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e750c61c1ce08d551aa47f1deb9fa32d.png)'
- en: Lines converted into timestamped points. Image by author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 行转换为带时间戳的点。作者图片。
- en: Animating the movements
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画化移动
- en: To be able to plot the new point data we create a geodataframe which contain
    the timestamp, size of the point, and the coordinates for each point.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够绘制新的点数据，我们创建一个地理数据框，其中包含时间戳、点的大小和每个点的坐标。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The essential goal here is now to create a plot for each timestamp in the new
    geodataframe and late combine all these plots into a GIF-animation. To do that,
    we create a function which will plot a single row in the geodataframe, and at
    the same time plot all the previous rows with a small dot size. That way we get
    the largest dot for the current time while still seeing the previous dots, giving
    an impression of the entire path up to that point.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的核心目标是为新地理数据框中的每个时间戳创建一个图，然后将所有这些图合并为一个GIF动画。为此，我们创建一个函数，该函数将绘制地理数据框中的单行，同时用小点大小绘制所有先前的行。这样，我们就能看到当前时间的大点，同时还能够看到先前的点，给人一种直观的路径感。
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can now use the list of timestamps that we created before, `times`, and iterate
    over each timestamp and run the function `plot_minute()` to make a map for each
    of the timestamps of data we have.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用之前创建的时间戳列表`times`，并遍历每个时间戳，运行`plot_minute()`函数为我们拥有的每个时间戳数据制作地图。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/1286f6e36dd46e7bfadee393deec629f.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1286f6e36dd46e7bfadee393deec629f.png)'
- en: One of the plotted maps at a single minute. Image by author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 单分钟绘制的地图之一。作者图片。
- en: Converting to GIF
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换为GIF
- en: The result of running `plot_minute()` for all our timestamps is that we now
    have a folder full of .png maps. There are several ways to animate a sequence
    of pngs, and on a UNIX-based system you can run the `convert` program in bash.
    Depending on the parameters set for the plots, the resulting file sizes of the
    pngs and the animation itself can get very large, so it might be necessary to
    resize to reduce the file size.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有时间戳运行`plot_minute()`的结果是，我们现在有一个充满.png地图的文件夹。动画化一系列png有几种方法，在基于UNIX的系统上，你可以在bash中运行`convert`程序。根据绘图设置的参数，png和动画本身的结果文件大小可能会非常大，因此可能需要调整大小以减少文件大小。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we can take a look at the final result:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以查看最终结果：
- en: Conclusion
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article I have shown you one way of turning a points dataset of mobility
    into an animated map based on the shortest path algorithm, using just a few common
    Python libraries.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我向你展示了一种将移动点数据集转化为基于最短路径算法的动画地图的方法，使用了几个常见的Python库。
- en: The solution will work for any origin-destination matrix with an accompanying
    network and bike sharing data is accessible for many cities around the world.
    Hopefully it can inspire you to explore bike sharing patterns and urban structure
    in other cities!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案适用于任何具有配套网络的起始-目的地矩阵，并且许多城市的自行车共享数据是可以获取的。希望它能激励你去探索其他城市的自行车共享模式和城市结构！
