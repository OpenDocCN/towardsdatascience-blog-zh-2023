- en: Productionize Machine Learning Models with Serverless Container Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无服务器容器服务将机器学习模型生产化
- en: 原文：[https://towardsdatascience.com/productionize-machine-learning-models-with-serverless-container-services-9323fdb8f60c](https://towardsdatascience.com/productionize-machine-learning-models-with-serverless-container-services-9323fdb8f60c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/productionize-machine-learning-models-with-serverless-container-services-9323fdb8f60c](https://towardsdatascience.com/productionize-machine-learning-models-with-serverless-container-services-9323fdb8f60c)
- en: '*How to create serverless containerized inference endpoint for your machine
    learning models with Azure Container App*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*如何使用 Azure 容器应用程序创建无服务器容器化推理端点以用于你的机器学习模型*'
- en: '[](https://medium.com/@edwin.tan?source=post_page-----9323fdb8f60c--------------------------------)[![Edwin
    Tan](../Images/7db7b2f72bdbeb1675df3a2c6eddf91f.png)](https://medium.com/@edwin.tan?source=post_page-----9323fdb8f60c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9323fdb8f60c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9323fdb8f60c--------------------------------)
    [Edwin Tan](https://medium.com/@edwin.tan?source=post_page-----9323fdb8f60c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@edwin.tan?source=post_page-----9323fdb8f60c--------------------------------)[![Edwin
    Tan](../Images/7db7b2f72bdbeb1675df3a2c6eddf91f.png)](https://medium.com/@edwin.tan?source=post_page-----9323fdb8f60c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9323fdb8f60c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9323fdb8f60c--------------------------------)
    [Edwin Tan](https://medium.com/@edwin.tan?source=post_page-----9323fdb8f60c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9323fdb8f60c--------------------------------)
    ·7 min read·Jan 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9323fdb8f60c--------------------------------)
    ·7 分钟阅读·2023年1月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b3117ecde779f597268070c22634e534.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3117ecde779f597268070c22634e534.png)'
- en: Photo by [Jan Canty](https://unsplash.com/@jancanty?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Jan Canty](https://unsplash.com/@jancanty?utm_source=medium&utm_medium=referral)
    提供，发布在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
    上。
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Serverless container architecture is an approach to building and running containerized
    applications and services without having to manage the underlying infrastructure.
    In this architecture, containers are used to package and deploy applications,
    and these containers are run in a fully managed environment provided by a cloud
    provider.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器容器架构是一种构建和运行容器化应用程序和服务的方法，无需管理底层基础设施。在这种架构中，容器用于打包和部署应用程序，这些容器在云服务提供商提供的完全托管环境中运行。
- en: The cloud provider is responsible for the infrastructure needed to run the containers,
    such as the hardware and operating system. The developer does not need to worry
    about setting up or maintaining this infrastructure, and can instead focus on
    writing code and building applications. The containers are typically run in a
    cluster, and the cloud provider automatically scales the number of containers
    up or down based on demand. This allows the application to handle fluctuations
    in traffic without the need for manual intervention. Serverless architectures
    can be more cost-effective than traditional architectures, since users only pay
    for the resources that was actually use, rather than paying for a fixed amount
    of computing power that may or may not be fully utilized.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商负责运行容器所需的基础设施，如硬件和操作系统。开发者无需担心设置或维护这些基础设施，可以专注于编写代码和构建应用程序。容器通常在集群中运行，云服务提供商会根据需求自动扩展容器的数量。这使得应用程序能够处理流量波动，而无需手动干预。无服务器架构可能比传统架构更具成本效益，因为用户仅需为实际使用的资源付费，而不是为可能未完全利用的固定计算能力付费。
- en: Some examples of serverless container services include Azure Functions, Azure
    Container Apps , AWS Lambda, and Google Cloud Functions. In this article we will
    demonstrate how to leverage on Azure Container Apps, a fully managed serverless
    container service for building and deploying apps at scale, for productionizing
    machine learning models. Common uses of Azure Container Apps include deploying
    API endpoints, hosting background processing applications, handling event-driven
    processing and running microservices [2].
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些无服务器容器服务的例子包括 Azure Functions、Azure Container Apps、AWS Lambda 和 Google Cloud
    Functions。本文将演示如何利用 Azure Container Apps，这是一个完全托管的无服务器容器服务，用于大规模构建和部署应用程序，用于生产化机器学习模型。Azure
    Container Apps 的常见用途包括部署 API 端点、托管后台处理应用程序、处理事件驱动的处理和运行微服务 [2]。
- en: These are the steps that we will take in order to train and deploy a scikit-learn
    model with Azure Container Apps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将帮助我们训练并部署一个 scikit-learn 模型到 Azure Container Apps。
- en: Train model locally
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地训练模型
- en: Create inference API with FastAPI
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 FastAPI 创建推断 API
- en: Dockerize the application
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对应用程序进行 Docker 化
- en: Deploy to Azure Container Apps
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署到 Azure Container Apps
- en: 0\. Setup
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0\. 设置
- en: This is the setup used for the following example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以下示例使用的设置。
- en: '**Development Environment**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发环境**'
- en: Visual Studio Code
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: Azure CLI
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI
- en: Python 3.8
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.8
- en: Docker
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: 'Python Packages: Refer to Section 3 for `requirements.txt`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 包：有关 `requirements.txt` 的信息，请参阅第 3 节
- en: '**Project Structure**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目结构**'
- en: 'The project folder structure as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件夹结构如下：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Dataset**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据集**'
- en: The UCI Heart Disease dataset [3] is a public dataset that contains data about
    patients who have been diagnosed with heart disease. It includes various patient
    characteristics, such as age, gender, blood pressure, and cholesterol levels.
    `1` and `0` values in the `condition` column represents the presence or absence
    of heart disease respectively.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: UCI 心脏病数据集 [3] 是一个公共数据集，包含关于被诊断为心脏病的患者的数据。它包括各种患者特征，如年龄、性别、血压和胆固醇水平。`1` 和 `0`
    值在 `condition` 列中分别表示心脏病的存在与否。
- en: 1\. Train model locally
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 在本地训练模型
- en: 'File: `train.py`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：`train.py`
- en: For the purpose of illustration, we will train a Gradient Boosting Classifier
    using only 5 features.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我们将使用仅 5 个特征来训练一个梯度提升分类器。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the training using CLI:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CLI 运行训练：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2\. Create prediction endpoint with FastAPI
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 使用 FastAPI 创建预测端点
- en: 'File: `app.py`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：`app.py`
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `app.py` file we
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.py` 文件中我们
- en: Define `app` , an instance of FastAPI.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `app`，这是 FastAPI 的一个实例。
- en: Load the trained model.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载训练好的模型。
- en: Define the input data format (`ModelData`) which the API will accept
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 API 接受的输入数据格式（`ModelData`）
- en: Define the API response format (`ResponseData`)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 API 响应格式（`ResponseData`）
- en: Define the `/predict` route which will trigger the `predict` function when a
    post request is made to this route.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `/predict` 路由，当对该路由发出 POST 请求时，将触发 `predict` 函数。
- en: The `predict` function receives the input data from the post request, predict
    and returns the probability that a patient has heart disease.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`predict` 函数接收来自 POST 请求的输入数据，进行预测并返回患者患有心脏病的概率。'
- en: At this point we can test the FastAPI application locally. The `--reload` flag
    helps with speeding up the development process. FastAPI auto reloads every time
    a change in the code is detected. This means that the developer does not need
    to manually restart FastAPI to test the code changes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此时我们可以在本地测试 FastAPI 应用程序。`--reload` 标志有助于加速开发过程。FastAPI 会在检测到代码更改时自动重新加载，这意味着开发人员不需要手动重启
    FastAPI 来测试代码更改。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will see the following message on the terminal:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在终端上看到以下消息：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The given URL will bring us to the Swagger UI where we can test out the API.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的 URL 会将我们带到 Swagger UI，我们可以在这里测试 API。
- en: 3\. Containerize the application using Docker
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 使用 Docker 对应用程序进行容器化
- en: '**Create a** `**requirements.txt**` **file**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建一个** `**requirements.txt**` **文件**'
- en: The `requirements.txt` file contains all the python packages required.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements.txt` 文件包含所有所需的 python 包。'
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Create a** `**.dockerignore**` **file**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建一个** `**.dockerignore**` **文件**'
- en: The purpose of the `.dockerignore` file is to avoid copying over files that
    are not required for inference such as the training script and data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dockerignore` 文件的目的是避免复制那些不用于推断的文件，例如训练脚本和数据。'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Create a** `**Dockerfile**` **file**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建一个** `**Dockerfile**` **文件**'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s a brief description of the Dockerfile:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Dockerfile 的简要描述：
- en: Use`python:3.8` as the base image
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `python:3.8` 作为基础镜像
- en: Creat a working directory named `/app`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为 `/app` 的工作目录
- en: Copy all the files in our project folder over to the working directory with
    the exception of those files or sub-directories that were listed in the `.dockerignore`
    file.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目文件夹中的所有文件复制到工作目录，除了 `.dockerignore` 文件中列出的文件或子目录。
- en: Install the python packages listed in `requirements.txt`
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `requirements.txt` 中列出的 Python 包
- en: '`CMD` runs the FastAPI application on port 80 when the docker container is
    launched. Unlike in the local test, we do not include — reload flag when we run
    uvicorn here. The reload flag is useful for speeding up the development process,
    however it is not required in production.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD` 在启动 Docker 容器时在 80 端口运行 FastAPI 应用。与本地测试不同，在这里运行 uvicorn 时不包括 --reload
    标志。虽然 reload 标志对加快开发过程有帮助，但在生产环境中并不需要。'
- en: '**Build docker image**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建 Docker 镜像**'
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Launch docker container**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动 Docker 容器**'
- en: We map port 80 in the container, which FastAPI is running on, to port 8080 on
    the Docker host.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将容器中 FastAPI 运行的 80 端口映射到 Docker 主机上的 8080 端口。
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Test the app**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试应用**'
- en: 'At this point we can test the application through the Swagger UI again by going
    to the URL: `[http://127.0.0.1:8080/docs](http://127.0.0.1:8080/docs)`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以通过访问以下 URL 再次通过 Swagger UI 测试应用：`[http://127.0.0.1:8080/docs](http://127.0.0.1:8080/docs)`
- en: 4\. Deploy to Azure Container Apps
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 部署到 Azure 容器应用
- en: In this section, we will push the docker image to Azure Container Registry and
    subsequently deploy the docker container in Azure Container Apps.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把 Docker 镜像推送到 Azure 容器注册表，然后在 Azure 容器应用中部署 Docker 容器。
- en: 'To deploy the containerized application to Azure Container Apps we require
    the following prerequisites:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要将容器化应用部署到 Azure 容器应用，我们需要满足以下先决条件：
- en: Azure Resource Group
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 资源组
- en: Azure Container Registry
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器注册表
- en: Azure Container App Environment
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器应用环境
- en: The following commands are executed in the command line.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将在命令行中执行。
- en: '**Create resource group**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建资源组**'
- en: A resource group is a logical grouping of Azure services used to support the
    application. We created a `heartdisease_rg` resource group in `eastus` location.
    All the subsequent resources will be assigned to`heartdisease_rg`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 资源组是用于支持应用的 Azure 服务的逻辑分组。我们在 `eastus` 区域创建了一个 `heartdisease_rg` 资源组。所有后续资源将分配给
    `heartdisease_rg`。
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Create Azure Container Registry**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建 Azure 容器注册表**'
- en: Azure Container Registry (ACR) is a collection of repositories used to store
    and manage container images. We create a container registry named `heartdisease`
    under the `heartdisease_rg` resource group and chose the `Basic` SKU pricing plan.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 容器注册表（ACR）是一个用于存储和管理容器镜像的仓库集合。我们在 `heartdisease_rg` 资源组下创建了一个名为 `heartdisease`
    的容器注册表，并选择了 `Basic` SKU 定价计划。
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once the container registry is provisioned we can check the ACR login server
    using
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器注册表被配置，我们可以使用以下命令检查 ACR 登录服务器
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The above command returns a long string which contains the login server. Take
    note of the login server details as we will be using it in the next step.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令返回一个包含登录服务器的长字符串。请注意登录服务器的详细信息，因为我们将在下一步中使用它。
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Tag docker image**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**标记 Docker 镜像**'
- en: To push the local docker image to ACR, the docker image `heart-disease-app`
    is tagged the following format `{login server}/{docker image name}/{version}`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要将本地 Docker 镜像推送到 ACR，Docker 镜像 `heart-disease-app` 被标记为 `{login server}/{docker
    image name}/{version}` 格式。
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Login to ACR**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**登录 ACR**'
- en: Ensure that you are logged in before pushing image to ACR.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在推送镜像到 ACR 之前已登录。
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Push docker image to ACR**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**将 Docker 镜像推送到 ACR**'
- en: Docker push is a command that uploads a local docker image to a container registry.
    This will make the docker image available to Azure Container Apps.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Docker push 是一个将本地 Docker 镜像上传到容器注册表的命令。这将使 Docker 镜像可供 Azure 容器应用使用。
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The docker image will be shown in ACR’s UI upon successful docker push.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 成功推送 Docker 镜像后，镜像将在 ACR 的 UI 中显示。
- en: '![](../Images/5609d71a4f8366eebe74890a3398c64a.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5609d71a4f8366eebe74890a3398c64a.png)'
- en: Image by author.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: '**Create Azure Container App Environment**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建 Azure 容器应用环境**'
- en: Before creating Azure Container Apps, we define the `heartdiseaseenv` environment
    which the Container App will run in.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Azure 容器应用之前，我们定义了容器应用将运行的 `heartdiseaseenv` 环境。
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Create Azure Container Apps**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建 Azure 容器应用**'
- en: 'In this step, we create the `heart-disease-container-app` Azure Container Apps
    using the `heartdiseaseenv` environment which we created in the step before. We
    also defined the docker image that should be used: `heartdisease.azurecr.io/heart-disease-app:v0.1.0`
    and the login server of the container registry: `heartdisease.azurecr.io`. The
    `ingress` is set to `external` as this API is meant to be exposed to the public
    web.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们创建了 `heart-disease-container-app` Azure 容器应用，使用的是前一步中创建的 `heartdiseaseenv`
    环境。我们还定义了应使用的 Docker 镜像：`heartdisease.azurecr.io/heart-disease-app:v0.1.0` 和容器注册表的登录服务器：`heartdisease.azurecr.io`。`ingress`
    设置为 `external`，因为此 API 旨在公开发布到互联网。
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If `az containerapp create` command is successful, it will return a URL for
    accessing your app.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `az containerapp create` 命令成功，它将返回一个访问应用程序的 URL。
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Test the app**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试应用程序**'
- en: 'We can test the app using either the Swagger UI, curl or python request. To
    access the Swagger UI, simply append `docs` at the end of the given URL: `[https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/docs](https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/docs.)`[.](https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/docs.)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Swagger UI、curl 或 python 请求来测试应用程序。要访问 Swagger UI，只需在给定 URL 的末尾添加 `docs`：`[https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/docs](https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/docs.)`[.](https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/docs.)
- en: 'To use CURL, the command as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CURL，命令如下：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can also send a post request to the prediction endpoint `https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/predict`
    using python’s request library in the following manner:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过以下方式使用 Python 的请求库向预测端点 `https://heart-disease-container-app.nicehill-f0509673.eastus.azurecontainerapps.io/predict`
    发送 POST 请求：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Conclusion
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we discussed the advantage of using serverless containerized
    machine learning inference endpoint and walked through an example of how to create
    an API endpoint with FastAPI, containerized it with Docker and deployed the containerized
    application with Azure Container Apps.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们讨论了使用无服务器容器化机器学习推理端点的优势，并演示了如何使用 FastAPI 创建 API 端点，用 Docker 容器化并使用 Azure
    容器应用程序部署容器化应用程序的示例。
- en: '[Join medium](https://medium.com/@edwin.tan/membership) to read more articles
    like this!'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[加入 medium](https://medium.com/@edwin.tan/membership) 阅读更多类似的文章！'
- en: Reference
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] [Serverless computing and applications | Microsoft Azure](https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-serverless-computing/)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [无服务器计算和应用 | Microsoft Azure](https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-serverless-computing/)'
- en: '[2] [Azure Container Apps overview | Microsoft Learn](https://learn.microsoft.com/en-us/azure/container-apps/overview)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [Azure 容器应用概述 | Microsoft Learn](https://learn.microsoft.com/en-us/azure/container-apps/overview)'
- en: '[3] Heart Disease Dataset from [UCI Machine Learning Repository](https://archive-beta.ics.uci.edu/ml/datasets/heart+disease).
    Licensed under CC BY 4.0.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 心脏病数据集来自 [UCI 机器学习库](https://archive-beta.ics.uci.edu/ml/datasets/heart+disease)。根据
    CC BY 4.0 许可协议授权。'
