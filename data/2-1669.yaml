- en: Practical Guide for Anomaly Detection in Time Series with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行时间序列异常检测的实用指南
- en: 原文：[https://towardsdatascience.com/practical-guide-for-anomaly-detection-in-time-series-with-python-d4847d6c099f](https://towardsdatascience.com/practical-guide-for-anomaly-detection-in-time-series-with-python-d4847d6c099f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/practical-guide-for-anomaly-detection-in-time-series-with-python-d4847d6c099f](https://towardsdatascience.com/practical-guide-for-anomaly-detection-in-time-series-with-python-d4847d6c099f)
- en: A hands-on article on detecting outliers in time series data using Python and
    sklearn
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一篇关于使用Python和sklearn检测时间序列数据异常值的实践文章
- en: '[](https://medium.com/@marcopeixeiro?source=post_page-----d4847d6c099f--------------------------------)[![Marco
    Peixeiro](../Images/7cf0a81d87281d35ff47f51e3026a3e9.png)](https://medium.com/@marcopeixeiro?source=post_page-----d4847d6c099f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d4847d6c099f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d4847d6c099f--------------------------------)
    [Marco Peixeiro](https://medium.com/@marcopeixeiro?source=post_page-----d4847d6c099f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcopeixeiro?source=post_page-----d4847d6c099f--------------------------------)[![Marco
    Peixeiro](../Images/7cf0a81d87281d35ff47f51e3026a3e9.png)](https://medium.com/@marcopeixeiro?source=post_page-----d4847d6c099f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d4847d6c099f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d4847d6c099f--------------------------------)
    [Marco Peixeiro](https://medium.com/@marcopeixeiro?source=post_page-----d4847d6c099f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d4847d6c099f--------------------------------)
    ·13 min read·Mar 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d4847d6c099f--------------------------------)
    ·阅读时长13分钟·2023年3月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4b3f1bd78c54730bd401ce05e9b15b28.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b3f1bd78c54730bd401ce05e9b15b28.png)'
- en: Photo by [Will Myers](https://unsplash.com/@will_myers?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Will Myers](https://unsplash.com/@will_myers?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Anomaly detection is a task in which we want to identify rare events that deviate
    significantly from the majority of the data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 异常检测是一个任务，我们希望识别出明显偏离数据大多数部分的稀有事件。
- en: Anomaly detection in time series has a wide range of real-life applications,
    from manufacturing to healthcare. Anomalies indicate unexpected events, and they
    can be caused by production faults or system defects. For example, if we are monitoring
    the number of visitors on a website, and the number falls to 0, it might mean
    that the server is down.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列中的异常检测有广泛的实际应用，从制造业到医疗保健。异常值表示意外事件，它们可能由生产故障或系统缺陷引起。例如，如果我们监控一个网站的访客数量，数量降到0，可能意味着服务器出现故障。
- en: It is also useful to detect anomalies in time series data before modelling for
    forecasting. Many forecasting models are autoregressive, meaning that they take
    into account past values to make predictions. A past outlier will definitely affect
    the model, and it can be a good idea to remove that outlier to get more reasonable
    predictions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行预测建模之前，检测时间序列数据中的异常值也很有用。许多预测模型是自回归的，这意味着它们会考虑过去的值来进行预测。过去的异常值肯定会影响模型，因此去除这些异常值可能是一个好的主意，以获得更合理的预测。
- en: In this article, we will take a look a three different anomaly detection techniques,
    and implement them in Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将介绍三种不同的异常检测技术，并在Python中实现它们。
- en: Mean absolute deviation (MAD)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平均绝对偏差（MAD）
- en: Isolation forest
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隔离森林
- en: Local outlier factor (LOF)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 局部离群因子（LOF）
- en: The first one is a baseline method that can work well if the series satisfies
    certain assumptions. The other two methods are machine learning approaches.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法是基线方法，如果系列满足某些假设，它可以很好地工作。其他两种方法是机器学习方法。
- en: '***Learn the latest time series analysis techniques with my*** [***free time
    series cheat sheet***](https://www.datasciencewithmarco.com/pl/2147608294) ***in
    Python! Get the implementation of statistical and deep learning techniques, all
    in Python and TensorFlow!***'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***使用我的*** [***免费时间序列备忘单***](https://www.datasciencewithmarco.com/pl/2147608294)
    ***学习最新的时间序列分析技术！获取统计学和深度学习技术的实现，全部使用Python和TensorFlow！***'
- en: Let’s get started!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Types of anomaly detection tasks in time series
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列中的异常检测任务类型
- en: 'There are two main types of anomaly detection tasks with time series data:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据中的异常检测任务主要有两种类型：
- en: Point-wise anomaly detection
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于点的异常检测
- en: Pattern-wise anomaly detection
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于模式的异常检测
- en: In the first type, we wish to find single points in time that are considered
    abnormal. For example, a fraudulent transaction is a point-wise anomaly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种类型中，我们希望找到被认为异常的单个时间点。例如，一次欺诈交易就是一个点状异常。
- en: The second type is interested in finding subsequences that are outliers. An
    example of that could be a stock that is trading at an abnormal level for many
    hours or days.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型关注于寻找作为离群点的子序列。一个例子可能是一个股票在许多小时或几天内以异常水平交易。
- en: In this article, we will focus only on point-wise anomaly detection, meaning
    that our outliers are isolated points in time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将只关注基于点的异常检测，这意味着我们的离群点是在时间上的孤立点。
- en: 'The scenario: CPU utilization on the AWS cloud'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景：AWS云上的CPU利用率
- en: We apply the different anomaly detection techniques on a dataset that monitors
    the CPU utilization on an EC2 instance in the AWS cloud. This is real-world data
    that was recorded every 5 minutes, starting on February 14th, 2014 at 14:30\.
    The dataset contains 4032 data points. It was made available through the [Numenta
    Anomaly Benchmark (NAB)](https://github.com/numenta/NAB) under the AGPL-3.0 license.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在一个监控AWS云中EC2实例CPU利用率的数据集上应用不同的异常检测技术。这是实际数据，每5分钟记录一次，从2014年2月14日14:30开始。数据集包含4032个数据点。它通过[Numenta
    Anomaly Benchmark (NAB)](https://github.com/numenta/NAB)在AGPL-3.0许可证下提供。
- en: The particular dataset for this article can be found [here](https://github.com/numenta/NAB/blob/master/data/realAWSCloudwatch/ec2_cpu_utilization_24ae8d.csv),
    and the associated labels are [here](https://github.com/numenta/NAB/blob/master/labels/combined_labels.json).
    Full source code is available on [GitHub](https://github.com/marcopeix/datasciencewithmarco/blob/master/time_series_anomaly_detection.ipynb).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本文所用的特定数据集可以在[这里](https://github.com/numenta/NAB/blob/master/data/realAWSCloudwatch/ec2_cpu_utilization_24ae8d.csv)找到，相关标签在[这里](https://github.com/numenta/NAB/blob/master/labels/combined_labels.json)。完整源代码可在[GitHub](https://github.com/marcopeix/datasciencewithmarco/blob/master/time_series_anomaly_detection.ipynb)上找到。
- en: Before we get started, we need to format our data in order to label each value
    as either an outlier or an inlier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要格式化数据，以便将每个值标记为离群点或内点。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, an outlier gets a label of -1, and an inlier gets a label of 1\. This matches
    the output of anomaly detection algorithms in scikit-learn.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，离群点被标记为-1，而内点被标记为1。这与scikit-learn中的异常检测算法输出一致。
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/48b39a86bf1504a0c73dd2b1e7226575.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48b39a86bf1504a0c73dd2b1e7226575.png)'
- en: Formatted data with the timestamp, the value, and a label to determine if is
    it an outlier (-1) or an inlier (1). Image by the author.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化的数据包括时间戳、值和标签，以确定其是否为离群点（-1）或内点（1）。图像由作者提供。
- en: At this point, we have a dataset with the right timestamp format, the value,
    and a label to indicated whether the value is an outlier (-1) or an inlier (1).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们拥有一个格式正确的数据集，包括时间戳、值和标签，以指示值是否为离群点（-1）或内点（1）。
- en: Now, let’s plot the data to visualize the anomalies.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们绘制数据以可视化异常。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/8803146e1e998c3319afffb1cf83ca5d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8803146e1e998c3319afffb1cf83ca5d.png)'
- en: Monitoring CPU usage on an EC2 instance. The two red dots indicated anomalous
    points, while the other blue dots are considered normal. Image by the author.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 监控EC2实例上的CPU使用情况。两个红点表示异常点，而其他蓝点被认为是正常的。图像由作者提供。
- en: From the figure above, we can see that our data only contains two outliers,
    as indicated by the red dots.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的图中，我们可以看到我们的数据仅包含两个离群点，如红色点所示。
- en: This shows how challenging anomaly detection can be! Because they are rare events,
    we have few occasions to learn from them. In this case, only 2 points are outliers,
    which represent 0.05% of the data. It also makes the evaluation of the models
    more challenging. A method basically has two occasions of getting it right, and
    4030 occasions of being wrong.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了异常检测的挑战性！由于这些事件很少，我们很少有机会从中学习。在这种情况下，只有2个点是离群点，占数据的0.05%。这也使得模型评估更具挑战性。一个方法基本上只有两次正确的机会，而有4030次错误的机会。
- en: With all that in mind, let’s apply some techniques for anomaly detection in
    time series, starting with the mean absolute deviation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于以上所有内容，让我们应用一些时间序列异常检测技术，从平均绝对偏差开始。
- en: Mean absolute deviation (MAD)
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平均绝对偏差（MAD）
- en: If our data is normally distributed, we can reasonably say that data points
    at each end of the tails can be considered an outlier.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的数据是正态分布的，我们可以合理地说，尾部的每个数据点都可以被视为离群点。
- en: To identify them, we can use the Z-score, which is a measurement in terms of
    standard deviations from the mean. If the Z-score is 0, the value is equal to
    the mean. Typically, we set a Z-score threshold of 3 or 3.5 to indicate if a value
    is an outlier or not.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别它们，我们可以使用 Z 分数，这是一个以标准差为单位的均值测量。如果 Z 分数为 0，则值等于均值。通常，我们设置 Z 分数阈值为 3 或 3.5，以指示一个值是否是异常值。
- en: Now, recall that the Z-score is calculated as
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回想一下 Z 分数的计算方法。
- en: '![](../Images/87d492189d18a7d3083679f6d2eeeed6.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87d492189d18a7d3083679f6d2eeeed6.png)'
- en: Equation for the Z-score. Image by the author.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Z 分数的公式。作者提供的图像。
- en: Where *mu* is the mean of the sample and *sigma* is the standard deviation.
    Basically, if the Z-score is large, it means that the value is far from the mean
    and towards one end of the distribution’s tail, which in turn can mean that it
    is an outlier.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *mu* 是样本的均值，*sigma* 是标准差。基本上，如果 Z 分数很大，意味着该值远离均值，接近分布尾部的一端，这也可能表示它是一个异常值。
- en: '![](../Images/de982122e3febefb67266f9215c7f351.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de982122e3febefb67266f9215c7f351.png)'
- en: A normal distribution with the Z-score. We can see that when the Z-score is
    3, we reach the tails of the distribution, and so we can say that beyond that
    threshold, the data are outliers. Image by the author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 Z 分数的正态分布。我们可以看到，当 Z 分数为 3 时，我们达到了分布的尾部，因此我们可以说，超过该阈值的数据是异常值。作者提供的图像。
- en: From the figure above, we can visualize the classical Z-score threshold of 3
    to determine if a value is an outlier or not. As shown by the black dashed lines,
    a Z-score of 3 brings us to the ends of the normal distribution. So, any value
    with a Z-score greater than 3 (or less than -3 if we are not working in absolute
    values) can be labelled as an outlier.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中，我们可以直观地看到经典的 Z 分数阈值 3，用于确定一个值是否是异常值。如黑色虚线所示，Z 分数为 3 时，我们达到了正态分布的尾部。因此，任何
    Z 分数大于 3（或小于 -3，如果我们不处理绝对值的话）都可以标记为异常值。
- en: Now, this works great under the assumption that we have a perfectly normal distribution,
    but the presence of outliers necessarily affects the mean, which in turns affect
    the Z-score. Therefore, we turn our attention to the median absolute deviation
    or MAD.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这在我们假设有一个完全正态分布的情况下效果很好，但异常值的存在必然会影响均值，从而影响 Z 分数。因此，我们将注意力转向中位绝对偏差或 MAD。
- en: The robust Z-score method
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强健 Z 分数方法
- en: To avoid the influence of outliers on the Z-score, instead use the median, which
    is a more robust metric in the presence of outliers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免异常值对 Z 分数的影响，改用中位数，这在存在异常值时是更强健的指标。
- en: 'The median absolute deviation or MAD is defined as:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 中位绝对偏差或 MAD 定义为：
- en: '![](../Images/7d608cd3d231b2bdc8fe5375a6663d86.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d608cd3d231b2bdc8fe5375a6663d86.png)'
- en: The MAD is the median of the absolute difference between a value and the median
    of the sample. Image by the author.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: MAD 是值与样本中位数之间绝对差值的中位数。作者提供的图像。
- en: 'Basically, the MAD is the median of the absolute difference between the values
    of a sample and the median of the sample. Then, we can calculate the robust Z-score
    with:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，MAD 是样本值与样本中位数之间绝对差值的中位数。然后，我们可以使用以下公式计算强健 Z 分数：
- en: '![](../Images/484d48fce120d5619883d7d44cc8958f.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/484d48fce120d5619883d7d44cc8958f.png)'
- en: Robust Z-score formula. Note that 0.6745 is the 75th percentile of the standard
    normal distribution to which the MAD converges to. Image by the author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 强健 Z 分数公式。请注意，0.6745 是 MAD 收敛的标准正态分布的第 75 个百分位数。作者提供的图像。
- en: Here, the robust Z-score takes the difference between a value and the median
    of the sample, multiplies it by 0.6745 and we divide everything by the MAD. Note
    that 0.6745 represents the 75th percentile of a standard normal distribution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，强健 Z 分数计算方法是：取值与样本中位数之间的差值，乘以 0.6745，然后除以 MAD。请注意，0.6745 代表标准正态分布的第 75 个百分位数。
- en: '**Why 0.6745? (optional read)**'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**为什么是 0.6745？（可选阅读）**'
- en: Unlike the traditional Z-score, the robust Z-score uses the median absolute
    deviation, which is always smaller than the standard deviation. Thus, to obtain
    a value that resembles a Z-score, we must scale it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的 Z 分数不同，强健 Z 分数使用中位绝对偏差，这通常小于标准差。因此，为了获得类似 Z 分数的值，我们必须进行缩放。
- en: In a normal distribution with no outliers, the MAD is about 2/3 (0.6745 to be
    precise) as big as the standard deviation. Therefore, because we are dividing
    by the MAD, we multiply by 0.6745 to get back to the scale of the normal Z-score.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有异常值的正态分布中，MAD 大约是标准差的 2/3（精确来说是 0.6745）。因此，由于我们是除以 MAD，我们乘以 0.6745 以回到正态
    Z 分数的尺度。
- en: 'The robust Z-score method will work best under two important assumptions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 稳健Z分数方法在两个重要假设下效果最佳：
- en: The data is close to a normal distribution
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据接近正态分布
- en: The MAD is not equal to 0 (happens when more than 50% of the data has the same
    value)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MAD不等于0（当超过50%的数据具有相同值时会发生）
- en: The second point is interesting, because if that is the case, then any value
    that is not equal to the median will be flagged as an outlier, no matter the threshold,
    since the robust Z-score will be incredibly large.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点很有趣，因为如果是这种情况，那么任何不等于中位数的值都会被标记为异常值，无论阈值如何，因为稳健Z分数将会非常大。
- en: With all that in mind, let’s apply this method to our scenario.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，让我们将此方法应用到我们的场景中。
- en: Applying the MAD for outlier detection
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用MAD进行异常值检测
- en: First, we need to check the distribution of our data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要检查数据的分布情况。
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/e216f583307e317516864b7cb9e47561.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e216f583307e317516864b7cb9e47561.png)'
- en: Distribution of our data. Already, we see that we do not have a normal distribution!
    Even worse, a lot of data points fall right on the median (black dashed line),
    meaning that the MAD is either 0 or very close to 0\. Image by the author.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据分布情况。我们已经看到数据不符合正态分布！更糟的是，许多数据点正好落在中位数（黑色虚线）上，这意味着MAD要么是0，要么非常接近0。图片由作者提供。
- en: From the figure above, we can already see two problems. First, the data is close
    to a normal distribution. Second, the black dashed line indicates the median of
    the sample, and it fall right on the peak of the distribution. This means that
    a lot of data points are equal to the median, meaning that we are in a situation
    where the MAD is potentially 0 or very close to 0.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中，我们可以看到两个问题。首先，数据接近正态分布。其次，黑色虚线表示样本的中位数，它正好位于分布的峰值上。这意味着许多数据点等于中位数，意味着我们处于MAD可能为0或非常接近0的情况。
- en: Nevertheless, let’s continue applying the method, just so that we understand
    how to work with it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们还是继续应用该方法，以便了解如何使用它。
- en: The next step, is to compute the MAD and the median of the sample to calculate
    the robust Z-score. The *scipy* package comes with an implementation of the MAD
    formula.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是计算样本的MAD和中位数，以计算稳健Z分数。*scipy*包包含了MAD公式的实现。
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, we simply write a function to calculate the robust Z-score and create
    a new column to store the score.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们简单地编写一个函数来计算稳健Z分数，并创建一个新列来存储分数。
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that we get a MAD of 0.002, which definitely close to 0, meaning that this
    baseline is likely not going to perform very well.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们得到了0.002的MAD，这确实接近0，意味着这个基准可能表现不佳。
- en: Once this is done, we decide on a threshold to flag outliers. A typical threshold
    is 3 or 3.5\. In this case, any value with a robust Z-score greater than 3.5 (right-hand
    tail) or smaller than -3.5 (left-hand tail) will be flagged as an outlier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们决定一个阈值来标记异常值。典型的阈值是3或3.5。在这种情况下，任何稳健Z分数大于3.5（右尾）或小于-3.5（左尾）的值将被标记为异常值。
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, we can plot a confusion matrix to see if our baseline correctly identified
    outliers and inliers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以绘制混淆矩阵，看看我们的基准是否正确识别了异常值和正常值。
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/d6bffc49f5cd8ef27ecc24323f0be5d1.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6bffc49f5cd8ef27ecc24323f0be5d1.png)'
- en: Confusion matrix of the baseline outlier detection method. Clearly, a lot of
    inliers were flagged as anomalies, which is expected since our data did not respect
    the assumptions of the MAD method. Image by the author.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 基准异常值检测方法的混淆矩阵。显然，许多正常值被标记为异常值，这在预期之中，因为我们的数据没有符合MAD方法的假设。图片由作者提供。
- en: Unsurprisingly, we see that the baseline method performs poorly, since 1066
    inliers were flagged as outliers. Again, this was expected since our data did
    not respect the assumptions of the method, and the MAD was very close to 0\. Still,
    I wanted to cover the implementation of this method in case it serves you in another
    scenario.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不意外地，我们看到基准方法表现不佳，因为1066个正常值被标记为异常值。这再次是预期中的情况，因为我们的数据没有符合该方法的假设，且MAD非常接近0。尽管如此，我还是想介绍这种方法的实现，以防在其他场景中对你有用。
- en: Although the results are disappointing, this method still holds when the assumptions
    are true for your dataset, and you now know how to apply it when it makes sense.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管结果令人失望，但当假设对你的数据集成立时，这种方法仍然有效，现在你知道在有意义的情况下如何应用它。
- en: Now, let’s move on to the machine learning approached, starting with isolation
    forest.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到机器学习方法，首先从隔离森林开始。
- en: Isolation Forest
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隔离森林
- en: The isolation forest algorithm is a tree-based algorithm that is often used
    for anomaly detection.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 孤立森林算法是一种基于树的算法，通常用于异常检测。
- en: The algorithm starts by randomly selecting an attribute and randomly selecting
    a split value between the maximum and minimum values for that attribute. This
    partitioning is done many times until the algorithm has isolated each point in
    the dataset.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 算法首先随机选择一个属性，并在该属性的最大值和最小值之间随机选择一个分裂值。这个分区过程会重复多次，直到算法隔离了数据集中的每个点。
- en: Then, the intuition behind this algorithm is that an outlier will take fewer
    partitions to be isolated than a normal point, as shown in the figures below.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这个算法的直觉是，离群点隔离所需的分区会比正常点少，如下图所示。
- en: '![](../Images/27a7c0261401deb2477d19830352ec9b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27a7c0261401deb2477d19830352ec9b.png)'
- en: Isolating an inlier. Notice how the data has to be partitioned many times before
    the point is isolated. Image by Sai Borrelli — [Wikipedia](https://commons.wikimedia.org/w/index.php?curid=82709489)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离一个内点。注意在点被隔离之前，数据必须经过多次分区。图像由Sai Borrelli提供 — [维基百科](https://commons.wikimedia.org/w/index.php?curid=82709489)
- en: '![](../Images/d456164b1a2801e575d9499036d1997f.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d456164b1a2801e575d9499036d1997f.png)'
- en: Isolating an outlier. Now, we see that less partitions were required to isolate
    it. Therefore, it it likely an anomaly. Image by Sai Borrelli — [Wikipedia](https://commons.wikimedia.org/w/index.php?curid=82709491)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离一个离群点。现在，我们看到隔离它所需的分区较少。因此，它很可能是一个异常值。图像由Sai Borrelli提供 — [维基百科](https://commons.wikimedia.org/w/index.php?curid=82709491)
- en: In the two figures above, we can see how the number of partitions differ when
    isolating an inlier and an outlier. In the top figure, isolating an inlier required
    many splits. In the bottom figure, fewer splits were necessary to isolate the
    point. Therefore, it is likely to be an anomaly.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的两个图中，我们可以看到在隔离内点和离群点时，分区的数量如何不同。在顶部图中，隔离一个内点需要很多分裂。在底部图中，隔离点所需的分裂较少。因此，它很可能是一个异常值。
- en: So we see how in an isolation forest, if the path to isolate a data point is
    short, then it is an anomaly!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们看到在孤立森林中，如果隔离数据点的路径很短，那么它就是一个异常值！
- en: Applying the isolation forest
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用孤立森林
- en: First, let’s split our data into a training and a test set. That way, we can
    evaluate if the model is able to flag an anomaly on unseen data. This is sometimes
    called novelty detection, instead of anomaly detection.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将数据分成训练集和测试集。这样，我们可以评估模型是否能够在未见数据上标记异常值。这有时被称为新颖性检测，而不是异常检测。
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, we can train our isolation forest algorithm. Here, we need to specify
    a level of contamination, which is simply the fraction of outliers in the training
    data. In this case, we only have one outlier in the training set.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以训练我们的孤立森林算法。在这里，我们需要指定一个污染水平，这只是训练数据中离群点的比例。在这个例子中，我们的训练集只有一个离群点。
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once trained, we can then generate predictions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完成后，我们可以生成预测。
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Again, we can plot the confusion matrix to see how the model performs.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们可以绘制混淆矩阵以查看模型的表现。
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/b7a0966b20d32421c0fb468077a81ee7.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b7a0966b20d32421c0fb468077a81ee7.png)'
- en: Confusion matrix of the isolation forest algorithm. Here, we can see that the
    algorithm did not flag any of the anomalies. It also mislabelled an anomaly as
    a normal point. Image by the author.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 孤立森林算法的混淆矩阵。在这里，我们可以看到算法没有标记任何异常值。它还错误地将一个异常值标记为正常点。图像由作者提供。
- en: From the figure above, we notice that the algorithm was not able to flag the
    new anomaly. It also labelled an anomaly as a normal point.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的图中，我们注意到算法无法标记新的异常值。它还将一个异常值标记为正常点。
- en: Again, this is a disappointing result, but we still have one more method to
    cover, which is the local outlier factor.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这是一项令人失望的结果，但我们还有一种方法需要介绍，即局部离群因子。
- en: Local outlier factor
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局部离群因子
- en: Intuitively, the local outlier factor (LOF) works by comparing the local density
    of a point to the local densities of its neighbours. If the densities of the point
    and its neighbours are similar, then the point is an inlier. However, if the density
    of the point is much smaller than the densities of its neighbours, then it must
    be an outlier, because a lower density means that the point is more isolated.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 直观上，局部离群因子（LOF）通过比较点的局部密度与其邻居的局部密度来工作。如果点和邻居的密度相似，那么该点就是一个内点。然而，如果点的密度远小于邻居的密度，那么它一定是一个离群点，因为较低的密度意味着该点更孤立。
- en: Of course, we need to set the number of neighbours to look at, and *scikit-learn*’s
    default parameter is 20, which works well in most cases.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要设置要查看的邻居数量，*scikit-learn* 的默认参数是 20，这在大多数情况下效果很好。
- en: Once the number of neighbours is set, we calculate the *reachability distance.*
    It is a bit tricky to explain this with words and pictures only, but I will do
    my best.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了邻居的数量，我们就计算*可达距离*。仅用文字和图片解释这有点复杂，但我会尽力说明。
- en: '![](../Images/44737a3754b4972abba7ac5125c01aa0.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44737a3754b4972abba7ac5125c01aa0.png)'
- en: Visualizing the reachability distance, Image by the author.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化可达距离，图像由作者提供。
- en: Suppose that we are studying point A, and that we set the number of neighbours
    to 3 (k=3). Drawing a circle while keeping point A in the middle results in the
    black dotted circle you see in the figure above. Points B, C and D are the three
    closest neighbours to A, and point E is too far in this case, so it is ignored.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在研究点 A，并且我们将邻居数量设置为 3（k=3）。在保持点 A 在中间的情况下画一个圆圈，就会得到你在上图中看到的黑色虚线圆圈。点 B、C
    和 D 是离 A 最近的三个邻居，而点 E 在这种情况下太远，因此被忽略。
- en: 'Now, the reachability distance is defined as:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可达距离被定义为：
- en: '![](../Images/69369779b5f660ab492552f1d7bba59f.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69369779b5f660ab492552f1d7bba59f.png)'
- en: Reachability equation. Image by the author.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可达距离方程。图像由作者提供。
- en: In words, the reachability distance from A to B is the largest value between
    the k-distance of B and the actual distance from A to B.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，从 A 到 B 的可达距离是 B 的 k-距离和 A 到 B 的实际距离之间的较大值。
- en: The k-distance of B is simply the distance from point B to its third nearest
    neighbour. That’s why in the figure above, we drew a blue dotted circle with B
    at its center, to realize that the distance from B to C is the k-distance of B.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: B 的 k-距离只是从点 B 到其第三个最近邻的距离。这就是为什么在上面的图中，我们画了一个以 B 为中心的蓝色虚线圆圈，以体现从 B 到 C 的距离是
    B 的 k-距离。
- en: Once the reachability distance is calculated for all the k-nearest neighbours
    of A, the local reachability density will be computed. This is simply the inverse
    of the average of the reachability distances.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦计算了 A 的所有 k 个最近邻的可达距离，将计算局部可达密度。这仅仅是可达距离的平均值的倒数。
- en: Intuitively, the reachability density tells us how far we have to travel to
    reach a neighbouring point. If the density is large, then points are close together
    and we don’t have too travel for long.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 直观上，可达密度告诉我们到达邻近点需要走多远。如果密度大，则点彼此靠近，我们不需要走太远。
- en: Finally, the local outlier factor, is simply a ratio of the local reachability
    densities. In the figure above, we set *k* to 3, so we would have three ratios
    that we would average. This allows us to compare the local density of a point
    to its neighbour.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，局部异常因子仅仅是局部可达密度的比率。在上面的图中，我们将 *k* 设置为 3，因此我们会有三个比率需要进行平均。这允许我们将点的局部密度与其邻居进行比较。
- en: As mentioned before, if that factor is close to 1 or smaller than 1, then it
    is a normal point. If it is much larger than 1, then it is an outlier.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果该因子接近 1 或小于 1，则为正常点。如果大于 1，则为异常值。
- en: Of course, this methods comes with drawbacks, as a value that is larger than
    1 is not a perfect threshold. For example, an LOF of 1.1 could mean an outlier
    for a dataset, and not for another one.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种方法也有缺点，因为大于1的值并不是一个完美的阈值。例如，LOF 为 1.1 可能意味着某个数据集中的异常值，但对另一个数据集则不适用。
- en: Applying the local outlier factor method
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用局部异常因子方法
- en: With the use of *scikit-lean* applying the local outlier factor method is straightforward.
    We use the same train/test split as for the isolation forest to have comparable
    results.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*scikit-learn*应用局部异常因子方法是直接的。我们使用与隔离森林相同的训练/测试拆分，以便获得可比较的结果。
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, we can generate the predictions to flag potential outliers in the test
    set.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以生成预测以标记测试集中的潜在异常值。
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, we plot the confusion matrix to evaluate the performance.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们绘制混淆矩阵来评估性能。
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/203bb5e4b53dfff6cab3f7fdd6761e4d.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/203bb5e4b53dfff6cab3f7fdd6761e4d.png)'
- en: Confusion matrix for local outlier factor. We see that the algorithm successfully
    identified the only outlier in the test set. Image by the author.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 局部异常因子的混淆矩阵。我们看到该算法成功识别了测试集中唯一的异常值。图像由作者提供。
- en: In the figure above we see that the LOF method was able to flag the only outlier
    in the test set, and correctly labelled every other point as a normal point.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图中，我们可以看到 LOF 方法能够标记测试集中唯一的异常值，并且正确地将其他每个点标记为正常点。
- en: As always, this does not mean that local outlier factor is better method than
    isolation forest. It simply means that it worked better in this particular situation.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，这并不意味着局部异常因子比孤立森林方法更好。这只是表示在这个特定情况下，局部异常因子效果更好。
- en: Conclusion
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we explored three different methods for outlier detection in
    time series data.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了三种不同的时间序列数据异常检测方法。
- en: First, we explored a robust Z-score that uses the mean absolute deviation (MAD).
    This works well when your data is normally distributed and if your MAD is not
    0.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们探讨了一种使用平均绝对偏差（MAD）的强健 Z-score。这在数据呈正态分布且 MAD 不为 0 时效果良好。
- en: Then, we looked at isolation forest, which a machine learning algorithm that
    determines how many times a dataset has to be partitioned in order to isolate
    a single point. If few partitions are necessary, then the point is an outlier.
    If many partitions are required, then the point is likely an inlier.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看了孤立森林方法，这是一种机器学习算法，它确定数据集需要多少次分割才能孤立一个点。如果需要的分割次数很少，那么这个点就是一个异常点。如果需要很多分割，那么这个点很可能是内点。
- en: Finally, we looked at the local outlier factor (LOF) method, which is an unsupervised
    learning method that compares the local density of a point to that of its neighbours.
    Basically, if the density of a point is small compared to its neighbours, it means
    it is an isolated point, and likely an outlier.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了局部异常因子（LOF）方法，这是一种无监督学习方法，它将一个点的局部密度与其邻居的密度进行比较。基本上，如果一个点的密度相对于其邻居较小，这意味着它是一个孤立点，很可能是异常点。
- en: I hope that you enjoyed this article and learned something new!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章，并学到了新知识！
- en: Interested in mastering time series forecasting? Check out [Applied Time Series
    Forecasting in Python](https://www.datasciencewithmarco.com/offers/zTAs2hi6/checkout?coupon_code=ATSFP10),
    the only course that covers statistical, deep learning, and state-of-the-art models,
    in 100% Python.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 想要掌握时间序列预测吗？查看[Python中的应用时间序列预测](https://www.datasciencewithmarco.com/offers/zTAs2hi6/checkout?coupon_code=ATSFP10)，这是唯一涵盖统计学、深度学习和最先进模型的100%
    Python课程。
- en: Cheers 🍻
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 干杯 🍻
- en: Support me
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持我
- en: Enjoying my work? Show your support with [Buy me a coffee](http://buymeacoffee.com/dswm),
    a simple way for you to encourage me, and I get to enjoy a cup of coffee! If you
    feel like it, just click the button below 👇
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 享受我的工作吗？通过[请我喝咖啡](http://buymeacoffee.com/dswm)来支持我，这是一种简单的方式来鼓励我，而我也可以享受一杯咖啡！如果你愿意，点击下面的按钮
    👇
- en: '[![](../Images/7ad9438bd50b1698fdd722fa6661b16c.png)](http://buymeacoffee.com/dswm)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](../Images/7ad9438bd50b1698fdd722fa6661b16c.png)](http://buymeacoffee.com/dswm)'
