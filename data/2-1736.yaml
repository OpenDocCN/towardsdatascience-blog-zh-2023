- en: 'Python Quirks: Understand How a Variable Can Be Modified by a Function That
    Doesn’t Return Anything'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python怪癖：了解如何通过一个不返回任何东西的函数来修改变量
- en: 原文：[https://towardsdatascience.com/python-quirks-understand-how-a-variable-can-be-modified-by-a-function-that-doesnt-return-anything-343a40cc6923](https://towardsdatascience.com/python-quirks-understand-how-a-variable-can-be-modified-by-a-function-that-doesnt-return-anything-343a40cc6923)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-quirks-understand-how-a-variable-can-be-modified-by-a-function-that-doesnt-return-anything-343a40cc6923](https://towardsdatascience.com/python-quirks-understand-how-a-variable-can-be-modified-by-a-function-that-doesnt-return-anything-343a40cc6923)
- en: A deep dive into how Python passes arguments and mutability to prevent unexpected
    bugs
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入了解 Python 如何传递参数和可变性，以防止意外错误
- en: '[](https://mikehuls.medium.com/?source=post_page-----343a40cc6923--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----343a40cc6923--------------------------------)[](https://towardsdatascience.com/?source=post_page-----343a40cc6923--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----343a40cc6923--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----343a40cc6923--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/?source=post_page-----343a40cc6923--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----343a40cc6923--------------------------------)[](https://towardsdatascience.com/?source=post_page-----343a40cc6923--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----343a40cc6923--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----343a40cc6923--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----343a40cc6923--------------------------------)
    ·8 min read·Apr 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----343a40cc6923--------------------------------)
    ·8 分钟阅读·2023年4月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/66a1b3b46f16c0c485439cbce8fc83b8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66a1b3b46f16c0c485439cbce8fc83b8.png)'
- en: Tracking down the unexpected bugs (image by [cottonbro studio](https://www.pexels.com/@cottonbro/)
    on [Pexels](https://www.pexels.com/photo/photo-of-person-taking-down-notes-7319070/))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪意外的错误（图片来自 [cottonbro studio](https://www.pexels.com/@cottonbro/) on [Pexels](https://www.pexels.com/photo/photo-of-person-taking-down-notes-7319070/))
- en: 'In this article we’ll put on our detective hat and solve a “*Python Mystery*”.
    In this episode we’ll find out how **a function that doesn’t return a value can
    alter a variable**. (see below for example). This is not all: **it only ‘works’
    on some types of variables**. Additionally it’s pretty easy to fall into the trap
    of this behaviour so it’s important to know what causes it.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将戴上侦探帽，解开一个“*Python 神秘*”。在这一集里，我们将了解**一个不返回值的函数如何改变一个变量**。（下面有示例）。不仅如此：**它只对某些类型的变量‘有效’**。此外，这种行为很容易让人陷入陷阱，因此了解其原因非常重要。
- en: We’ll focus on understanding the mechanics beneath the mystery. Not only will
    a better understanding of Python make you a **better developer**, it will also
    **save you a lot of frustration** trying to solve incomprehensible bugs. Let’s
    code!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点理解神秘背后的机制。更好地理解 Python 不仅会让你成为**更优秀的开发者**，还会**节省你解决难以理解的错误**的沮丧。让我们开始编程吧！
- en: The mystery — an example
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神秘——一个例子
- en: 'Let’s first analyze our “*Python Mystery*” a bit more: suppose we have two
    functions that:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们更深入地分析一下我们的“*Python 神秘*”：假设我们有两个函数：
- en: '***accept*** a variable'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***接受*** 一个变量'
- en: '***modify*** that variable'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***修改*** 该变量'
- en: '***don’t return*** the variable'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***不要返回*** 该变量'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For both functions we define a variable, print it out, call the function with
    the variable and then print it out again
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两个函数，我们定义一个变量，打印出来，调用函数并传递变量，然后再次打印出来
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What happened? Why has the `my_list` variable **changed** while the `my_str`
    variable **hasn’t**? This is despite the functions not returning anything! Three
    questions arise, which we will anser in three corresponding chapters:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？为什么`my_list`变量**改变**了，而`my_str`变量**没有**？尽管这些函数没有返回任何东西！我们有三个问题，将在三个相应的章节中解答：
- en: How does the function “have access” to the variable?
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数如何“访问”变量？
- en: Why is the list altered while the string is unchanged?
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么列表被修改而字符串没有改变？
- en: How can we prevent this behaviour?
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何防止这种行为？
- en: '[](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----343a40cc6923--------------------------------)
    [## Thread Your Python Program with Two Lines of Code'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----343a40cc6923--------------------------------)
    [## 用两行代码线程化你的 Python 程序'
- en: Speed up your program by doing multiple things simultaneously
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过同时做多件事来加快你的程序
- en: towardsdatascience.com](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----343a40cc6923--------------------------------)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----343a40cc6923--------------------------------)
- en: 1\. How the function accesses the variable
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 函数如何访问变量
- en: 'To find this out we need to understand how the variable ends up in the function:
    we need to know **how Python passes variables to functions**. There are many ways
    this can be done. In order to understand how Python passes variables to functions,
    we first need to look into [**how Python stores values in memory**](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了弄清楚这一点，我们需要理解变量是如何进入函数的：我们需要了解 **Python 是如何将变量传递给函数的**。有很多种方法可以做到这一点。为了理解
    Python 如何将变量传递给函数，我们首先需要了解 [**Python 如何在内存中存储值**](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e)。
- en: 1.1 How Python stores variables
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 Python 如何存储变量
- en: 'You might think that when we define a variable like this: `person = ''mike''`
    that there is an object in memory named `‘person’` with the value `‘mike’` (see
    the images below). This is only party true.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为当我们定义一个变量时，比如：`person = 'mike'`，内存中有一个名为 `‘person’` 的对象，其值为 `‘mike’`（参见下面的图片）。这只是部分正确。
- en: '![](../Images/cbe0ce130c0df00650699664d05a909d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cbe0ce130c0df00650699664d05a909d.png)'
- en: How variables get stored in memory in Python vs other languages (think C .e.g.)
    (Expertly drawn by author)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 变量在 Python 和其他语言（例如 C）的内存存储方式（由作者专业绘制）
- en: Python works with **references**. It creates an object in memory and then it
    creates a reference called `‘person’` that points to the object in memory, at
    a specific memory address, with the value `‘mike’`. Think of it as hanging a label
    on the object where the object in memory gets a label with the name of the variable
    on it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用 **引用**。它在内存中创建一个对象，然后创建一个名为 `‘person’` 的引用，指向内存中的对象，具体的内存地址和值是 `‘mike’`。可以把它看作是在对象上挂一个标签，这个标签上写着变量的名字。
- en: 'If we then do something like this: `person2 = person` we do not create a new
    object in memory, merely a new reference called ‘person2’ to the object in memory
    that already exists:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们做类似这样的操作：`person2 = person`，我们不会在内存中创建一个新对象，只是创建了一个名为‘person2’的新引用，指向已经存在的内存中的对象：
- en: '![](../Images/e31e37a5b5145078b38a97694c0e4e6e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e31e37a5b5145078b38a97694c0e4e6e.png)'
- en: Create a new reference that points to the same object (image by author)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的引用，指向相同的对象（图片由作者提供）
- en: 'Redefining `person2 = ‘bert''` will cause Python to create a new object in
    memory and point the reference named “person2” to there:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重新定义 `person2 = ‘bert'` 将导致 Python 在内存中创建一个新对象，并将名为“person2”的引用指向那里：
- en: '![](../Images/482ef44ae3de0b39f6d3a45256e209b8.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/482ef44ae3de0b39f6d3a45256e209b8.png)'
- en: 1.2 Does Python pass the object or the reference to the function?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 Python 是传递对象还是引用给函数？
- en: It’s pretty key to understand that when we call `somefunction(person)` **we
    don’t give the function an object in memory but merely the reference to that object**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 理解一个关键点是，当我们调用 `somefunction(person)` 时 **我们并没有给函数一个内存中的对象，而只是该对象的引用**。
- en: Python passes variables ***“by reference”*** as opposed to ***“by value”.***
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python 变量是 ***“按引用”*** 传递的，而不是 ***“按值”*** 传递的。
- en: 'This is the first answer to solve the mystery: we give the function a reference
    to a value in memory in stead of providing the function a **copy of the object**.
    This is why we can alter the value **without the function returning** anything.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是解决谜团的第一个答案：我们给函数提供了一个内存中值的引用，而不是给函数提供一个 **对象的副本**。这就是为什么我们可以修改值 **而不需要函数返回**
    任何东西。
- en: 'Let’s now look at the other part of the solution: why some variables can be
    altered while others cannot.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看解决方案的另一部分：为什么有些变量可以被修改而有些不能。
- en: '[](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----343a40cc6923--------------------------------)
    [## Args vs kwargs: which is the fastest way to call a function in Python?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----343a40cc6923--------------------------------)
    [## 参数与关键字参数：哪种方式在 Python 中调用函数最快？'
- en: A clear demonstration of the timeit module
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: timeit 模块的清晰演示
- en: towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----343a40cc6923--------------------------------)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----343a40cc6923--------------------------------)'
- en: 2\. Why can some values be altered while others cannot? — mutability
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 为什么有些值可以被改变而有些不能？ — 可变性
- en: 'Mutability is the ability of objects to change their values after they are
    created. Let’s start with an overview of mutable variables:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可变性是对象在创建后改变其值的能力。让我们首先了解一下可变变量：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you see the `str` is immutable; this means that it cannot change after it’s
    initialized. Then how is it possible that we’ve ‘modified’ our string in our earlier
    example (something like this: `input_string += ‘a''`). The next few parts explain
    what happens when we try to **alter** and **overwrite** mutable and immutable
    values.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`str`是不可变的；这意味着它在初始化后不能改变。那么我们之前如何“修改”了我们的字符串（例如：`input_string += ‘a'`）。接下来的部分解释了当我们尝试**更改**和**覆盖**可变和不可变值时会发生什么。
- en: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----343a40cc6923--------------------------------)
    [## Why Python is so slow and how to speed it up'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----343a40cc6923--------------------------------)
    [## 为什么Python这么慢以及如何加速'
- en: Take a look under the hood to see where Python’s bottlenecks lie
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 看一看背后的机制，了解Python的瓶颈所在
- en: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----343a40cc6923--------------------------------)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----343a40cc6923--------------------------------)'
- en: 2.1 What happens when we try to alter immutable values?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 当我们尝试更改不可变值时会发生什么？
- en: We create a variable called `my_str` with the value `'a'`. Next we use the `id`
    function to print the variable’s memory address. This is the location in memory
    where the reference(s) point to.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`my_str`的变量，值为`'a'`。接下来，我们使用`id`函数打印变量的内存地址。这是引用指向的内存位置。
- en: 'To re-iterate: in the example below we create a *reference* called `my_str`
    that points to an *object in memory* that has the value `''a''``. and is located
    at *memory address* `1988650365763`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一下：在下面的例子中，我们创建了一个*引用*，名为`my_str`，它指向一个*内存中的对象*，该对象的值为`'a'`，并位于*内存地址* `1988650365763`。
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, on line 3, we add `'b'` to `my_str` and print the memory location again.
    As you see, by the changing memory location, the `my_str` is different after you’ve
    added `'b'` to it. This means that a **new object is created in memory**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在第3行，我们将`'b'`添加到`my_str`中，并再次打印内存位置。如你所见，通过内存位置的变化，`my_str`在添加了`'b'`后变得不同。这意味着**在内存中创建了一个新对象**。
- en: It may seem like Python alters the string but under the hood it just creates
    a new object in memory and ponts the reference called `my_str` to that new object.
    The old object with value `'a’` will get get removed. Check out [**this article**](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e)
    to read more about why Python doesn’t just overwrite object in memory and how
    the old values get removed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来Python似乎在更改字符串，但实际上它只是创建了一个新的内存对象，并将名为`my_str`的引用指向那个新对象。值为`'a'`的旧对象将被移除。查看[**这篇文章**](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e)了解更多关于为什么Python不直接覆盖内存中的对象以及旧值如何被移除的内容。
- en: 2.2 What happens when we try to alter mutable values?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 当我们尝试更改可变值时会发生什么？
- en: 'Let’s do the same experiment with a mutable variable:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个可变变量做同样的实验：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So the reference called `my_list` still points to the same location in memory
    where the object resides. This proves that the object in memory has changed! Also
    notice that elements inside the list can contain immutable types. If we try to
    alter these variables the same happens as described in the previous section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以名为`my_list`的引用仍然指向内存中对象所在的同一位置。这证明了内存中的对象已经改变！还要注意，列表中的元素可以包含不可变类型。如果我们尝试更改这些变量，情况与之前所述相同。
- en: 2.3 What happens when we try to overwrite variables?
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 当我们尝试覆盖变量时会发生什么？
- en: 'As we’ve seen in the previous part Python doesn’t overwrite objects in memory.
    Let’s see this in action:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的部分所看到的，Python不会覆盖内存中的对象。让我们看看实际效果：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you see all memory locations are changed, both mutable and immutable variables.
    This is the default way Python works with variables. Notice that we **don’t try
    to change the contents** of the mutable list: we’re defining a new list; we’re
    not mutating it but assigning completely new data to `my_lst`.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，所有内存位置都发生了变化，包括可变和不可变的变量。这是 Python 处理变量的默认方式。注意我们**并没有尝试改变**可变列表的内容：我们定义了一个新的列表；我们并不是在改变它，而是将完全新的数据分配给`my_lst`。
- en: 2.4 Why are some values mutable while others aren’t?
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 为什么有些值是可变的而有些不是？
- en: The mutability is often a design choice; some variables guarantee that the contents
    remain unchanged and ordered.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可变性通常是设计选择；一些变量保证内容保持不变并且有序。
- en: '[](/getting-started-with-cython-how-to-perform-1-7-billion-calculations-per-second-in-python-b83374cfcf77?source=post_page-----343a40cc6923--------------------------------)
    [## Getting started with Cython: How to perform >1.7 billion calculations per
    second in Python'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/getting-started-with-cython-how-to-perform-1-7-billion-calculations-per-second-in-python-b83374cfcf77?source=post_page-----343a40cc6923--------------------------------)
    [## 入门 Cython：如何在 Python 中每秒进行超过 1.7 亿次计算'
- en: Combine the ease of Python with the speed of C
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Python 的简便性与 C 的速度结合
- en: towardsdatascience.com](/getting-started-with-cython-how-to-perform-1-7-billion-calculations-per-second-in-python-b83374cfcf77?source=post_page-----343a40cc6923--------------------------------)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/getting-started-with-cython-how-to-perform-1-7-billion-calculations-per-second-in-python-b83374cfcf77?source=post_page-----343a40cc6923--------------------------------)
- en: 'Solution: Pass-by-reference and mutability in action'
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案：按引用传递和可变性的实际操作
- en: 'In this part we’ll take our new-found knowledge and solve the mystery. In the
    code below we declare a (mutable) list and pass it (by reference) to a function.
    The function is then able to alter the contents of the list. We can see this by
    the fact that the memory address is the same on the 3rd line and the last one
    while the content has changed:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将运用新学到的知识来解决谜题。在下面的代码中，我们声明了一个（可变的）列表，并将其（通过引用）传递给一个函数。然后函数能够更改列表的内容。我们可以通过以下事实看到这一点：内存地址在第
    3 行和最后一行是相同的，而内容已经改变：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How does this work with immutable values?
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这如何与不可变值一起工作？
- en: 'Good question. Let’s check it out with a tuple that’s immutable:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题。让我们用一个不可变的元组来检查一下：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since we cannot mutate the value we have to ‘overwrite ’ the `input_tuple` in
    the `change_tuple` function. This doesn’t mean that the object in memory gets
    overwritten but that a new object gets created in memory.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不能改变值，我们必须在`change_tuple`函数中“覆盖”`input_tuple`。这并不意味着内存中的对象被覆盖，而是创建了一个新的对象。
- en: Then we modify the reference `input_tuple` that exists in the scope of the `change_tuple`
    function so that it now points to this new object. When we exit the function this
    reference gets cleaned up and in the outer scope the `my_tup` reference still
    points to the old object’s memory address.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们修改在`change_tuple`函数作用域内存在的引用`input_tuple`，使其现在指向这个新对象。当我们退出函数时，这个引用会被清理，在外部作用域中，`my_tup`引用仍然指向旧对象的内存地址。
- en: 'In short: the ‘new’ tuple only exists in the scope of the function.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：“新”元组仅存在于函数的作用域中。
- en: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----343a40cc6923--------------------------------)
    [## Destroying Duck Hunt with OpenCV — image analysis for beginners'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----343a40cc6923--------------------------------)
    [## 使用 OpenCV 毁灭《鸭子猎人》——初学者的图像分析'
- en: Write code that will beat every Duck Hunt high score
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写能打破所有《鸭子猎人》高分的代码
- en: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----343a40cc6923--------------------------------)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----343a40cc6923--------------------------------)
- en: 3\. How to prevent unwanted behaviour
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 如何防止不希望出现的行为
- en: 'You can prevent this behaviour by giving the function a `my_list.copy()`. This
    creates a copy of the list first and provides the function with a ***reference***
    to that copy so that all changes alter the copy in stead of `my_list`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过给函数一个`my_list.copy()`来防止这种行为。这会先创建列表的副本，并将该副本的***引用***提供给函数，从而使所有更改都作用于副本而不是`my_list`：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](/a-complete-guide-to-using-environment-variables-and-files-with-docker-and-compose-4549c21dc6af?source=post_page-----343a40cc6923--------------------------------)
    [## A complete guide to using environment variables and files with Docker and
    Compose'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-complete-guide-to-using-environment-variables-and-files-with-docker-and-compose-4549c21dc6af?source=post_page-----343a40cc6923--------------------------------)
    [## 完整指南：使用Docker和Compose的环境变量和文件'
- en: Keep your containers secure and flexible with this easy tutorial
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过这个简单的教程，让你的容器既安全又灵活。
- en: towardsdatascience.com](/a-complete-guide-to-using-environment-variables-and-files-with-docker-and-compose-4549c21dc6af?source=post_page-----343a40cc6923--------------------------------)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/a-complete-guide-to-using-environment-variables-and-files-with-docker-and-compose-4549c21dc6af?source=post_page-----343a40cc6923--------------------------------)
- en: Conclusion
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We’ve discussed mutability and the way Python passes variables to function;
    two important concepts to understand when designing your Python code. With this
    article I hope you avoid incomprehensible errors and a lot of time debugging.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了可变性以及Python如何将变量传递给函数；这两个概念在设计Python代码时非常重要。通过这篇文章，我希望你避免难以理解的错误和大量的调试时间。
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles?tags=python) on all kinds
    of programming-related topics like these:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能像我期望的那样清晰，如果不是这样，请告诉我我可以做些什么来进一步澄清。同时，查看我在[其他文章](https://mikehuls.com/articles?tags=python)中讨论的各种编程相关主题：
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Git绝对初学者指南：通过视频游戏理解Git](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建并发布你自己的Python包](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用FastAPI在5行代码中创建一个快速的自动文档、可维护且易于使用的Python API](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
- en: Happy coding!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 编程愉快！
- en: — Mike
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: — Mike
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*附注：喜欢我在做的事吗？* [*关注我!*](https://mikehuls.medium.com/membership)'
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----343a40cc6923--------------------------------)
    [## Join Medium with my referral link - Mike Huls'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/membership?source=post_page-----343a40cc6923--------------------------------)
    [## 通过我的推荐链接加入Medium - Mike Huls'
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Mike Huls的每个故事（以及Medium上的其他成千上万的作者）。你的会员费直接支持Mike…
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----343a40cc6923--------------------------------)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----343a40cc6923--------------------------------)
