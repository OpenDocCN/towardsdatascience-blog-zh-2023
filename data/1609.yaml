- en: 'When Spreadsheets Aren’t Good Enough: A Lesson in Relational Databases'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当电子表格不够用时：关系数据库的课程
- en: 原文：[https://towardsdatascience.com/when-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a?source=collection_archive---------8-----------------------#2023-05-12](https://towardsdatascience.com/when-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a?source=collection_archive---------8-----------------------#2023-05-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/when-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a?source=collection_archive---------8-----------------------#2023-05-12](https://towardsdatascience.com/when-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a?source=collection_archive---------8-----------------------#2023-05-12)
- en: SQL Tutorial
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL 教程
- en: Database normalization, relational databases, and why you need them
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库规范化、关系数据库以及你为何需要它们
- en: '[](https://medium.com/@stephanie_lo?source=post_page-----2e5b0b847f5a--------------------------------)[![Stephanie
    Lo](../Images/2b7787607352815394cf8b734a9f0f02.png)](https://medium.com/@stephanie_lo?source=post_page-----2e5b0b847f5a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2e5b0b847f5a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2e5b0b847f5a--------------------------------)
    [Stephanie Lo](https://medium.com/@stephanie_lo?source=post_page-----2e5b0b847f5a--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@stephanie_lo?source=post_page-----2e5b0b847f5a--------------------------------)[![Stephanie
    Lo](../Images/2b7787607352815394cf8b734a9f0f02.png)](https://medium.com/@stephanie_lo?source=post_page-----2e5b0b847f5a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2e5b0b847f5a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2e5b0b847f5a--------------------------------)
    [Stephanie Lo](https://medium.com/@stephanie_lo?source=post_page-----2e5b0b847f5a--------------------------------)'
- en: ·
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff4309a31ceee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhen-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a&user=Stephanie+Lo&userId=f4309a31ceee&source=post_page-f4309a31ceee----2e5b0b847f5a---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2e5b0b847f5a--------------------------------)
    ·11 min read·May 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2e5b0b847f5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhen-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a&user=Stephanie+Lo&userId=f4309a31ceee&source=-----2e5b0b847f5a---------------------clap_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Ff4309a31ceee&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhen-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a&user=Stephanie+Lo&userId=f4309a31ceee&source=post_page-f4309a31ceee----2e5b0b847f5a---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2e5b0b847f5a--------------------------------)
    ·11分钟阅读·2023年5月12日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F2e5b0b847f5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhen-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a&user=Stephanie+Lo&userId=f4309a31ceee&source=-----2e5b0b847f5a---------------------clap_footer-----------)'
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e5b0b847f5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhen-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a&source=-----2e5b0b847f5a---------------------bookmark_footer-----------)![](../Images/4b5c754c610ad34a260e1df042ad0ff8.png)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F2e5b0b847f5a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fwhen-spreadsheets-arent-good-enough-a-lesson-in-relational-databases-2e5b0b847f5a&source=-----2e5b0b847f5a---------------------bookmark_footer-----------)![](../Images/4b5c754c610ad34a260e1df042ad0ff8.png)'
- en: Photo by [Ivan Liu Hu](https://unsplash.com/ko/@ivanliuhu?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Ivan Liu Hu](https://unsplash.com/ko/@ivanliuhu?utm_source=medium&utm_medium=referral)
    提供，发布于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Have you ever waited minutes for an Excel spreadsheet to fully load and open?
    Does it continue to lag and freeze multiple items as you edit the spreadsheet
    and attempt to extract some insights? It’s not uncommon for this to be — or quickly
    become — the case for any organization that is constantly collecting data online.
    But one of the ways you can get results faster is by implementing a structured
    relational database.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经等待几分钟才能完全加载和打开一个 Excel 电子表格？在编辑电子表格并尝试提取一些见解时，它是否不断滞后和冻结？对于任何持续在线收集数据的组织来说，这种情况并不少见。但你可以通过实施结构化的关系型数据库来更快地获得结果。
- en: So what exactly is a relational database? It’s a collection of tables. Think
    of each one like an Excel spreadsheet that stores different pieces of information
    of your business, but instead of these Excels living separately, imagine if you
    could connect each of them together.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么关系型数据库到底是什么？它是一组表。可以将每个表视作存储业务不同信息的 Excel 电子表格，但想象一下，如果你可以将这些 Excel 电子表格连接在一起。
- en: '![](../Images/ceec2252d122b42e8f82c85bd518beb3.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ceec2252d122b42e8f82c85bd518beb3.png)'
- en: Spreadsheets live in silos whereas relational databases have established relationships
    between tables
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 电子表格存在于孤岛中，而关系型数据库在表之间建立了关系。
- en: Relational databases like MySQL or Oracle are useful because they’re designed
    to organize a heavy load of data, which can help you manage the data more efficiently.
    If designed correctly, they can save you hours on tasks and analytics.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 像 MySQL 或 Oracle 这样的关系型数据库非常有用，因为它们设计用来组织大量数据，这可以帮助你更高效地管理数据。如果设计得当，它们可以节省你在任务和分析上的大量时间。
- en: So if you’re working in a company and you expect the amount of data to grow
    — whether this be related to orders, customers, purchasing history or marketing
    engagement — then this article aims to explain how to start thinking about restructuring
    your current data practices to convert to a relational database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你在公司工作并且预期数据量将增长——无论是与订单、客户、采购历史还是营销互动相关——本文旨在解释如何开始思考重组当前的数据实践，以转换为关系型数据库。
- en: '**What are the advantages of a relational database?**'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**关系型数据库的优势是什么？**'
- en: 'Here are some advantages of implementing a relational database and the challenges
    a business could overcome with them:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是实施关系型数据库的一些优势以及业务可能克服的挑战：
- en: '**Efficient analysis:** Relational databases allow information to be retrieved
    quicker to then be analyzed with SQL (Structured Query Language), to then run
    queries.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效分析：** 关系型数据库允许更快速地检索信息，然后使用 SQL（结构化查询语言）进行分析，以便运行查询。'
- en: '**Centralized data management:** Since relational databases often require a
    certain type or format of data to be input into each column of a table, it’s less
    likely that you’ll end up with duplicate or inconsistent data.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中数据管理：** 由于关系型数据库通常要求每个表的每一列输入特定类型或格式的数据，因此不太可能出现重复或不一致的数据。'
- en: '**Scalability:** If your business is experiencing high growth, this means that
    the database will expand, and a relational database can accommodate an increased
    volume of data.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性：** 如果你的业务正在经历高速增长，这意味着数据库将扩展，而关系型数据库可以容纳增加的数据量。'
- en: You still may be wondering whether a relational database would be a suitable
    course of action for your company. Let’s consider an example to put this into
    context.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能仍在考虑关系型数据库是否适合你的公司。让我们通过一个例子来将这一点放入背景中。
- en: '**Example: E-commerce retailer experiencing high-growth**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**示例：高速增长的电子商务零售商**'
- en: '![](../Images/31f345dd24bd9c1c4f4eeba9e3e2c052.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31f345dd24bd9c1c4f4eeba9e3e2c052.png)'
- en: Photo by [Iga Palacz](https://unsplash.com/@igapalacz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Iga Palacz](https://unsplash.com/@igapalacz?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: You work for a local e-commerce retailer that sells second-hand furniture, and
    every week you provide your team a report that summarizes sales data which helps
    the buying team know what they should be sourcing more of.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你为一个本地的二手家具电子商务零售商工作，每周你会向团队提供一份总结销售数据的报告，这有助于采购团队了解他们应该采购更多的商品。
- en: So far, since the inventory has been input into Excel, you carry out most of
    your analyses on spreadsheets. It’s likely you use pivot tables or vlookups to
    carry out week-on week, month-on month or even year-on year percentage changes
    of sales of certain products or brands. Recently, you’ve been noticing since there
    is more inventory being sold, it takes a long time to not only open your spreadsheet,
    but to perform simple analyses in them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，由于库存数据已经输入到Excel中，你大部分的分析都是在电子表格上进行的。你很可能使用数据透视表或vlookup来计算某些产品或品牌的周度、月度或年度销售百分比变化。最近，你注意到由于销售的库存增加，打开电子表格和进行简单分析都需要很长时间。
- en: In a situation where a company is in a growth stage and therefore has more records
    of purchases, customers and inventory, Excel may not be efficient enough to carry
    out your usual tasks anymore. That’s where relational databases can help, by being
    able to store information at scale where pieces of data can be extracted, often
    by using SQL.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在公司处于增长阶段，记录了更多的采购、客户和库存时，Excel可能无法再有效地完成你的常规任务。这时，关系型数据库可以通过能够大规模存储信息并通过SQL提取数据来提供帮助。
- en: If you relate to these situations, then you might be wondering how you can shift
    your current data setup to a relational one. A good place to start thinking about
    structuring your database is to carry out a process called **database normalization.**
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这些情况有共鸣，那么你可能会想知道如何将当前的数据设置转变为关系型数据库。考虑如何结构化你的数据库的一个好方法是进行一个称为**数据库规范化**的过程。
- en: The basics of database normalization
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库规范化的基础
- en: Database normalization is the process of modifying existing data schema so that
    it complies to a series of progressive normal forms. More simply put, you are
    ensuring that data is organized in a structured way. It gives you a set of rules
    to be able to start categorizing your data and forming a layout that works for
    you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库规范化是修改现有数据模式的过程，以使其符合一系列渐进的规范形式。简单来说，就是确保数据以结构化的方式组织。这给你一套规则，帮助你开始对数据进行分类，并形成一个适合你的布局。
- en: 'By establishing structure in a database, you are able to help establish a couple
    of important things: data integrity and scalability. Data integrity ensures that
    data is entered correctly and accurately, and scalability ensures you have organized
    the data in a way that it is more computationally efficient when you start to
    run SQL queries.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在数据库中建立结构，你能够帮助建立几个重要的事物：数据完整性和可扩展性。数据完整性确保数据的输入正确和准确，而可扩展性则确保你以一种更具计算效率的方式组织数据，以便在运行SQL查询时更为高效。
- en: But what do we mean when we say normal forms?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当我们谈到规范形式时，我们到底在说什么呢？
- en: '**A quick breakdown of the normalization process**'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**规范化过程的快速概述**'
- en: Every stage of the organization process is called “normal forms”.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 组织过程的每个阶段都被称为“规范形式”。
- en: '*Edward J Codd, who first introduced the concept* [*here*](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf)*,
    originally described seven normal forms.* *However, to keep this article concise
    we will explain and walk through the first three, especially since databases are
    often considered as “normalized” if it meets the third normal form. A more comprehensive
    overview of the forms with a great tutorial can be found* [*here*](/a-complete-guide-to-database-normalization-in-sql-6b16544deb0)*.*'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*爱德华·C·科德首次提出了这一概念* [*在这里*](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf)*，最初描述了七种规范形式。*
    *然而，为了使本文简洁，我们将解释并讲解前三种规范形式，特别是因为数据库通常被认为“规范化”，如果它符合第三范式。更全面的形式概述和很好的教程可以在* [*这里*](/a-complete-guide-to-database-normalization-in-sql-6b16544deb0)*找到。*'
- en: '**First normal form (1NF)**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一范式 (1NF)**'
- en: Every value in each column of a table must be reduced to its most simple value,
    also known as atomic. An atomic value is one where there are no sets of values
    within a column.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个表中每一列的值必须简化为最基本的值，也称为原子值。原子值是指列中没有值集合的情况。
- en: There are no repeating columns or rows within the database.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库中没有重复的列或行。
- en: Each table should have a primary key which can be defined as a non-null, unique
    value that identifies each row insertion.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个表应有一个主键，这可以定义为一个非空的、唯一的值，以标识每一行的插入。
- en: '**Second normal form (2NF)**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二范式 (2NF)**'
- en: Conforms to first normal form rules.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合第一范式规则。
- en: Adjust columns so that each table only contains data relating to the primary
    key.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整列，使每个表只包含与主键相关的数据。
- en: Foreign keys are used to establish relationships between tables.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外键用于建立表之间的关系。
- en: '**Third normal form (3NF)**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三范式（3NF）**'
- en: Conforms to both first and second normal form rules.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合第一范式和第二范式的规则。
- en: Necessary to shift or remove columns (attributes) that are transitively dependent,
    which means they rely on other columns that aren’t foreign or primary keys.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要移动或删除那些传递依赖的列（属性），即那些依赖于其他列的列，而这些列不是外键或主键。
- en: Now that we’ve gotten to grips with some definitions, let’s apply these normal
    form rules in a working example to let these concepts sink in.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了一些定义，让我们在一个实际的例子中应用这些规范形式规则，以便这些概念能够深入理解。
- en: '**Tutorial: Segmenting audiences in a Canadian-based retailer**'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**教程：在加拿大零售商中进行受众分割**'
- en: '![](../Images/6c514e1e812e27147ea1eeb25a2471fd.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c514e1e812e27147ea1eeb25a2471fd.png)'
- en: Photo by [charlesdeluvio](https://unsplash.com/@charlesdeluvio?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [charlesdeluvio](https://unsplash.com/@charlesdeluvio?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片
- en: For this example, I used MySQL to carry out the queries, where each script should
    be adapted should you want to follow along with an alternate SQL server such as
    PostgreSQL or Oracle. If you are newer to MySQL I would suggest reading these
    articles [here](https://dev.mysql.com/doc/mysql-getting-started/en/) for installation
    instructions and [here](/an-introduction-to-sql-4c9eb27995df) to get started.
    Just a caveat that the follow-along code assumes some foundational SQL knowledge.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我使用了MySQL来执行查询，如果你想在其他SQL服务器（如PostgreSQL或Oracle）中跟随操作，每个脚本都应进行相应的调整。如果你对MySQL不太熟悉，我建议你阅读这些文章
    [这里](https://dev.mysql.com/doc/mysql-getting-started/en/) 以获取安装说明，以及 [这里](/an-introduction-to-sql-4c9eb27995df)
    以开始使用。请注意，跟随代码假设你具备一些基础的SQL知识。
- en: The following data is not based on actual e-commerce/subscription data and should
    only be considered for demonstrative purposes only. Synthetic data has been created
    in order to explore the concepts discussed in the article (in a real life enterprise,
    you would be working with thousands of rows of data and not just twenty rows).
    To follow along with the tutorial please check out my Github repository [here](https://github.com/stephrlo/mySQL_database_normalization),
    which includes a complete transformation of the data including data creation,
    data transformation and queries.
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以下数据并非基于实际的电子商务/订阅数据，仅供演示目的使用。合成数据已被创建，以便探索本文讨论的概念（在实际企业中，你将处理数千行数据，而不仅仅是二十行）。要跟随本教程，请查看我的Github仓库
    [这里](https://github.com/stephrlo/mySQL_database_normalization)，其中包含了数据的完整转换过程，包括数据创建、数据转换和查询。
- en: '**Database Normalization in practice**'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**数据库规范化实践**'
- en: 'Let’s say you’ve just been hired as an analyst at an e-commerce retailer. Your
    company is running an important sale and you’ve been assigned to carry out the
    following task:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你刚刚被聘为一家电子商务零售商的分析师。你的公司正在进行一次重要的促销活动，你被分配了以下任务：
- en: Separate out our current customers and email subscribers so that we can direct
    different email offers to each segment in order to drive purchases during our
    sale period.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将我们当前的客户和电子邮件订阅者分开，以便我们可以向每个细分市场发送不同的电子邮件优惠，从而推动销售期间的购买。
- en: 'When you access the database, a few immediate things stand out. Most notably,
    email subscriptions and customer information are housed in separate tables without
    any established relationship, which poses a challenge in carrying out the assigned
    task. However, there is a silver lining in that you have relatively complete data,
    and with a few tweaks relationships can be established between the two to carry
    out the task. Here’s a breakdown of the current database:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问数据库时，有几件事会立即引起注意。最显著的是，电子邮件订阅和客户信息被存储在不同的表格中，并且没有建立任何关系，这在执行分配任务时带来了挑战。然而，值得庆幸的是，你拥有相对完整的数据，并且通过一些调整可以在两者之间建立关系以完成任务。以下是当前数据库的详细信息：
- en: '![](../Images/ba15131dbce682f7b4061342e8e8105e.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba15131dbce682f7b4061342e8e8105e.png)'
- en: The tables outlined above contain a multitude of variables relevant to the customer
    and email subscribers, including their geographic location, the emails they have
    previously received, as well as associated email metrics.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表格包含了与客户和电子邮件订阅者相关的众多变量，包括他们的地理位置、他们以前收到的电子邮件以及相关的电子邮件指标。
- en: First Normal Form (1NF)
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一范式（1NF）
- en: 'The first thing we can do is to take a look at the data and data types contained
    in each column after we have uploaded each file onto an SQL server. We can do
    this by performing the following queries:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的第一件事是查看每列中包含的数据和数据类型，在将每个文件上传到SQL服务器之后。我们可以通过执行以下查询来完成此操作：
- en: 'It looks like we have a long way to go to conform to the first normal form!
    Recall that the requirements to achieve first normal form concerns proper row
    identification and grouping data correctly. Our current set up is in violation
    of all three rules of first normal form, which is mainly concentrated in the email_newsletter
    table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们还有很长的路要走才能符合第一范式！回顾一下，达到第一范式的要求涉及正确的行标识和正确分组数据。我们当前的设置违反了第一范式的所有三条规则，这主要集中在`email_newsletter`表中：
- en: Currently `email_newsletter` doesn’t have a primary key. This forces a database
    user to search for each subscriber using their email address, which is not considered
    good practice due to the possibility of users updating their email address and
    privacy concerns.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前`email_newsletter`没有主键。这迫使数据库用户通过电子邮件地址搜索每个订阅者，这并不被认为是好的实践，因为用户可能会更新他们的电子邮件地址以及隐私问题。
- en: The data in `email_newsletter` is not in its most reduced form. Upon further
    analysis, column contents can be separated into 2 columns, such as `subject_line`
    and `promo_code`.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email_newsletter`中的数据还没有达到最简化的形式。经过进一步分析，列内容可以分为两个列，如`subject_line`和`promo_code`。'
- en: In `email_newsletter`, the repeating group is the email send and content. One
    user can receive many emails, so the best course is to separate this from the
    table.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`email_newsletter`中，重复的组是电子邮件发送和内容。一个用户可以收到很多电子邮件，因此最好的办法是将其从表格中分离出来。
- en: 'To solve our first, we can add a unique primary key to `email_newsletter` in
    the first column of the table and run the following query, where `email_sign_up_id`
    is the column name and our data type is `INTEGER` :'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决第一个问题，我们可以在表格的第一列中添加一个唯一的主键到`email_newsletter`，并运行以下查询，其中`email_sign_up_id`是列名，数据类型是`INTEGER`：
- en: With this query, we added a unique identifying primary key that automatically
    increments with each new data record.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个查询，我们添加了一个唯一标识的主键，它会随着每条新数据记录的增加而自动递增。
- en: 'For the second revision, we need to split out `contents` into their respective
    field of `subject_line` and `promo_code`, we see that as a general pattern each
    field is separated by a comma which we can use to split out each one:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二次修订，我们需要将`contents`拆分为各自的`subject_line`和`promo_code`字段，我们发现每个字段通常由逗号分隔，我们可以用它来拆分每个字段：
- en: Our result is that we have each column separated out into its most reduced form
    so we are able to see the categories of each column more clearly.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的结果是将每列分隔到最简化的形式，以便更清晰地看到每列的类别。
- en: 'Lastly, we can remove repeating groups by organizing all of the email content-related
    data into a new table named `email_distribution` , don’t forget to add the data
    in from the original tables! (See GitHub [here](https://github.com/stephrlo/mySQL_database_normalization)
    for full SQL including data loading):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过将所有与电子邮件内容相关的数据组织到一个新的表格`email_distribution`中来去除重复的组，别忘了将原表中的数据添加进去！（查看GitHub
    [here](https://github.com/stephrlo/mySQL_database_normalization) 获取完整的SQL，包括数据加载）：
- en: 'With the query above, we have separated out the email contents into a separate
    table, to make sure that we don’t lose any information. We now need to connect
    this to `email_newsletter` table using a foreign key using the following queries:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上面的查询，我们将电子邮件内容拆分到一个单独的表中，以确保我们不会丢失任何信息。现在我们需要使用以下查询将其与`email_newsletter`表连接起来，使用外键：
- en: 'This helps us conform to the first normal form, where as a final step we can
    drop any redundant columns and look at our layout before moving onto the second:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们遵守第一范式，作为最终步骤，我们可以删除任何冗余的列，并查看我们的布局，然后再进入第二范式：
- en: '![](../Images/fa4f60bc56c1cb85ff82a2d7f03fdd22.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa4f60bc56c1cb85ff82a2d7f03fdd22.png)'
- en: Second Normal Form (2NF)
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二范式（2NF）
- en: 'To adhere to the rules of the second normal form, we need to achieve conformity
    of the first normal form ✓, establish relationships between tables and ensure
    non-key columns depend on the primary key. Here’s how we can approach transforming
    our set up into second normal form:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵守第二范式的规则，我们需要实现第一范式的合规性✓，建立表之间的关系，并确保非键列依赖于主键。以下是我们如何将设置转换为第二范式的步骤：
- en: The `customer` table is currently disconnected from the other two tables, where
    there are missing customers who have given their email consent in the column `email_opt_in`
    who are currently not being reached.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer`表目前与其他两个表没有连接，存在在`email_opt_in`列中已经同意提供其电子邮件的客户未被联系的情况。'
- en: There are unconnected columns to the primary key in `email_newsletter`, where
    email metrics such as `email_open` and `click_through` are not super relevant
    to their personal information, so we could consider separating these out.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`email_newsletter`中存在与主键不相关的列，例如`email_open`和`click_through`，这些与其个人信息不是非常相关，因此我们可以考虑将它们分离出来。
- en: 'We want to establish a relationship between the `customer` and `email_distribution`
    table in order to have our two segments of email prospects and current customers.
    However, if we drew a connection as it stands it may seem messy since one customer
    can receive many emails and disturb the primary key. Therefore, a logical intermediary
    step is to create a new table that can be placed between the two which we will
    name `customer_newsletter_metrics` to allow for these attributes to live in a
    table of their own:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在`customer`和`email_distribution`表之间建立关系，以便拥有我们的两个电子邮件前景和当前客户的两个部分。但是，如果按照目前的情况来连接可能会显得混乱，因为一个客户可能会收到多封电子邮件并干扰主键。因此，一个逻辑的中间步骤是创建一个新表，可以放置在两者之间，我们将其命名为`customer_newsletter_metrics`，以允许这些属性存储在自己的表中：
- en: This table helps to connect links between our entire database since we already
    stated the foreign keys in the creation of the table, with each column in the
    table being relevant and dependent on the primary key.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该表有助于连接我们整个数据库的链接，因为我们在创建表时已经说明了外键，表中的每列都与主键相关且依赖。
- en: The set up we have now is almost complete but a little unbalanced — since we
    have an established metrics table for customers but not one for email prospects.
    By applying the same treatment to this group this could help mitigate future issues
    since if a prospect’s email changes it would require less revisions if this information
    lived in a separate table (again, please follow along with the full code on GitHub
    [here](https://github.com/stephrlo/mySQL_database_normalization)).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的设置几乎完成了，但有点不平衡——因为我们为客户建立了一个已建立的指标表，但没有为电子邮件前景建立一个表。通过对这一组应用相同的处理，可以帮助减轻未来的问题，因为如果前景的电子邮件更改，则在单独的表中存储这些信息会减少修订（请在GitHub上的完整代码[这里](https://github.com/stephrlo/mySQL_database_normalization)进行跟踪）。
- en: 'After having renamed the `email_newsletter` to `email_newsletter_metrics` and
    created our `email_prospect` table here is our database after the 2NF transformation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将`email_newsletter`重命名为`email_newsletter_metrics`并创建我们的`email_prospect`表后，我们的数据库经过了2NF转换：
- en: '![](../Images/285c2b70c06a4d26adbe9f048e410d4a.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/285c2b70c06a4d26adbe9f048e410d4a.png)'
- en: Third Normal Form (3NF)
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三范式（3NF）
- en: The final step of our example is to follow third normal form rules which consist
    of completing first and second normal form rules ✓ and lastly, splitting out non-key
    columns that are dependent on one another.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例的最后一步是遵循第三范式规则，其中包括完成第一和第二范式规则 ✓，最后，分离出彼此依赖的非关键列。
- en: Overall, we’ve done a good job so far to mitigate interdependency between non-key
    columns although, if we were to take a closer look at the customer table we can
    see city and postal_code are dependent on another since the postal code is related
    to where the customer lives, but is also related to where the city where the customer
    resides. This may present problems in the long run in situations where the customer
    moves, one column may be updated but maybe not the other.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我们到目前为止做得很好，以减少非关键列之间的相互依赖，尽管如果我们更仔细地查看客户表，我们会发现城市和邮政编码是相互依赖的，因为邮政编码与客户居住地有关，但也与客户居住的城市有关。在客户搬迁时，这可能会在长期运行中出现问题，一个列可能会被更新，但可能不会更新另一个列。
- en: 'With this being said we can create a new table named `postal_code` which separates
    out `postal_code` and `city` from the `customer` table and form connections between
    these two tables:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，我们可以创建一个名为`postal_code`的新表，从`customer`表中分离出`postal_code`和`city`，并在这两个表之间建立连接：
- en: 'The last block of code above now completes our normalization process (yay!)
    where our final transformed database can be visualized below:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块的最后完成了我们的规范化过程（耶！），我们最终转换后的数据库如下所示：
- en: '![](../Images/873980ebe09f27f53ca034ca825b74a0.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/873980ebe09f27f53ca034ca825b74a0.png)'
- en: '**Our initial ask revisited: using a relational database**'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**我们重新访问的初始请求：使用关系数据库**'
- en: 'So we have our relational database ready through conforming to the first, second
    and third normal forms, why don’t we check out the original request that was given
    to us:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们通过符合第一、第二和第三范式的关系数据库已经准备好了，为什么不检查一下最初给我们的要求：
- en: Separate out our current customers and email subscribers so that we can direct
    different email offers to each segment in order to drive purchases during our
    sale period.
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将我们当前的客户和邮件订阅者分开，以便我们可以向每个数据段发送不同的邮件优惠，以推动销售期间的购买。
- en: 'Let’s form two simple query statements to grab the information of each segment:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们形成两个简单的查询语句来获取每个数据段的信息：
- en: 'The queries will result in two tables, and have an output like the one below:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 查询将产生两个表，输出如下所示：
- en: '![](../Images/67a63aa8ecd7cfd082be9e77d447c2e1.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/67a63aa8ecd7cfd082be9e77d447c2e1.png)'
- en: Now you’re ready to send out your next sale email with confidence that there
    is no duplication or missed contacts between the tables. What’s more, we’ve structured
    the database in such a way that makes it easier for data analysis and ready and
    equipped for more customers.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以自信地发送下一封销售邮件了，确保表格之间没有重复或遗漏的联系人。更重要的是，我们已经按照这样的结构组织了数据库，使数据分析变得更容易，并且为更多客户做好了准备。
- en: Some closing thoughts
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些结束语
- en: By recognizing pain points in your daily work routine such as a slow or complicated
    database, this article aims to offer implementation of a relational database as
    a solution. By using techniques like first to third normal form, you can break
    down your data into manageable chunks that are easier to work with and less prone
    to errors.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过识别日常工作中诸如数据库缓慢或复杂等痛点，本文旨在提供实施关系数据库作为解决方案的方法。通过使用从第一到第三范式的技术，你可以将数据拆分为易于处理和减少错误的可管理块。
- en: As a friendly final reminder, for a complete breakdown of the code used please
    visit my GitHub repository [here](https://github.com/stephrlo/mySQL_database_normalization).
    I hope this article may have inspired a newfound interest in relational databases
    ✨. Thanks for reading and following along!
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为友好的最后提醒，关于所用代码的完整解析，请访问我的GitHub仓库 [这里](https://github.com/stephrlo/mySQL_database_normalization)。希望这篇文章能够激发你对关系数据库的新兴趣✨。感谢阅读和关注！
- en: All images unless otherwise noted are by the author.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，所有图片均由作者提供。
- en: '**References**'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: E.F.Codd, [A relational model of data for large shared data banks](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf),
    June 1970, Communications of the ACM.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: E.F.Codd, [大规模共享数据银行的关系模型](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf)，1970年6月，《ACM通讯》。
- en: E.burns, [A complete guide to database normalization in SQL](/a-complete-guide-to-database-normalization-in-sql-6b16544deb0),
    Feb 2021 Medium.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: E.burns, [SQL数据库规范化完整指南](/a-complete-guide-to-database-normalization-in-sql-6b16544deb0)，2021年2月，Medium。
- en: C.Andreou, [An introduction to SQL](/an-introduction-to-sql-4c9eb27995df) ,
    Aug 2019 Medium.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C.Andreou, [SQL介绍](/an-introduction-to-sql-4c9eb27995df)，2019年8月，Medium。
