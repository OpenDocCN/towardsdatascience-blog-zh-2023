- en: Optimizing VS Code for dbt on Mac
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上优化VS Code以适应dbt
- en: 原文：[https://towardsdatascience.com/optimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5?source=collection_archive---------7-----------------------#2023-04-05](https://towardsdatascience.com/optimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5?source=collection_archive---------7-----------------------#2023-04-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/optimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5?source=collection_archive---------7-----------------------#2023-04-05](https://towardsdatascience.com/optimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5?source=collection_archive---------7-----------------------#2023-04-05)
- en: A Guide to Maximize Your dbt Productivity in Visual Studio Code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中最大化你的dbt生产力指南
- en: '[](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)[![Bas
    Nederkoorn](../Images/457bf4c58451ad98d1a389ed5c9ea5a3.png)](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)
    [Bas Nederkoorn](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)[![Bas
    Nederkoorn](../Images/457bf4c58451ad98d1a389ed5c9ea5a3.png)](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)
    [Bas Nederkoorn](https://medium.com/@sebasn?source=post_page-----a56dd27ba8d5--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F37a0396260cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&user=Bas+Nederkoorn&userId=37a0396260cd&source=post_page-37a0396260cd----a56dd27ba8d5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)
    ·9 min read·Apr 5, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa56dd27ba8d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&user=Bas+Nederkoorn&userId=37a0396260cd&source=-----a56dd27ba8d5---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F37a0396260cd&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&user=Bas+Nederkoorn&userId=37a0396260cd&source=post_page-37a0396260cd----a56dd27ba8d5---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a56dd27ba8d5--------------------------------)
    ·9分钟阅读·2023年4月5日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fa56dd27ba8d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&user=Bas+Nederkoorn&userId=37a0396260cd&source=-----a56dd27ba8d5---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa56dd27ba8d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&source=-----a56dd27ba8d5---------------------bookmark_footer-----------)![](../Images/3a045c30c5c89f8576cbca8a2d7a003f.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fa56dd27ba8d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Foptimizing-vs-code-for-dbt-on-mac-a56dd27ba8d5&source=-----a56dd27ba8d5---------------------bookmark_footer-----------)![](../Images/3a045c30c5c89f8576cbca8a2d7a003f.png)'
- en: (Image from [Unsplash](https://unsplash.com/photos/PqRvLsjD_TU))
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （图片来自[Unsplash](https://unsplash.com/photos/PqRvLsjD_TU)）
- en: If you are struggling to get VS Code and dbt to work well together, you are
    not alone. Integrating them can be challenging, but it will improve your modeling
    efficiency. That is why I am sharing the setup that has worked for me.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使VS Code和dbt良好协同工作方面遇到困难，你并不孤单。将它们集成可能具有挑战性，但它将提高你的建模效率。这就是我分享对我有效的设置的原因。
- en: In this article, I’ll cover topics like upgrading your terminal so you can quickly
    recall commands, making use of extensions that allow you to build models faster,
    and setting up formatting and linting to clean up your code and spot bugs in SQL.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将涵盖诸如升级终端以便快速回忆命令、利用可以更快构建模型的扩展，以及设置格式化和检查以清理代码和发现SQL中的错误等主题。
- en: If you implement the tips in this article, you will reduce the time you lose
    on typing code, running models, cleaning code, and searching for bugs. This gained
    time you can spend on creating data models that add value. While I’m writing with
    Mac users in mind, many of these tips will also be relevant to Windows users.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你实施本文中的提示，你将减少在输入代码、运行模型、清理代码和寻找错误上浪费的时间。这些节省下来的时间你可以用来创建增加价值的数据模型。虽然我在写这篇文章时以Mac用户为目标，但许多这些提示对Windows用户也同样适用。
- en: '**What you need to get started:**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**开始所需：**'
- en: Visual Studio Code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: The `homebrew` package manager. Installation instructions [here](https://docs.brew.sh/Installation)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`homebrew`包管理器。安装说明 [在这里](https://docs.brew.sh/Installation)'
- en: Python 3.7 or higher and a virtual environment with `dbt` installed. Refer to
    the [official documentation](https://docs.getdbt.com/docs/core/pip-install) for
    this.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.7或更高版本以及安装了`dbt`的虚拟环境。有关详细信息，请参阅[官方文档](https://docs.getdbt.com/docs/core/pip-install)。
- en: A dbt project. This article does not go into detail on how to set up a dbt project.
    If you do not have experience with this, I recommend you first complete the official
    dbt [jaffle shop tutorial](https://docs.getdbt.com/docs/quickstarts/dbt-core/quickstart).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个dbt项目。本文不详细介绍如何设置dbt项目。如果你没有这方面的经验，我建议你首先完成官方的dbt [jaffle shop教程](https://docs.getdbt.com/docs/quickstarts/dbt-core/quickstart)。
- en: Let’s dive in!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解吧！
- en: 1\. Optimizing your Terminal
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 优化你的终端
- en: 'You can improve your internal VS Code terminal to look and behave more like
    [iTerm](https://iterm2.com/). Installing [Oh-My-Zsh](https://ohmyz.sh/) and some
    additional packages can unlock the following benefits:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以改善你内部的VS Code终端，使其看起来和行为更像[iTerm](https://iterm2.com/)。安装[Oh-My-Zsh](https://ohmyz.sh/)和一些附加软件包可以解锁以下好处：
- en: '**Auto-completion,** valuable when you want to quickly call `dbt run -m {specific_model_you_ran_a_while_ago}`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动补全**，在你想快速调用`dbt run -m {specific_model_you_ran_a_while_ago}`时非常有用'
- en: '**Git branch visualization**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git分支可视化**'
- en: '**Syntax highlighting**, e.g. checking if commands you type exist in `$PATH`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语法高亮**，例如检查你输入的命令是否存在于`$PATH`中'
- en: 'If you don’t have `zsh` (newer Macs have it pre-installed) run:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有`zsh`（较新的Mac已预装），请运行：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following command to install Oh-My-Zsh:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来安装Oh-My-Zsh：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now you can select a theme. My favorite is *Agnoster* because it has a good
    git branch visualization. Selecting a theme can be done from the zsh configuration
    file in your home folder. Open this file by running:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以选择一个主题。我最喜欢的是*Agnoster*，因为它具有良好的git分支可视化。选择主题可以在你家目录中的zsh配置文件中完成。通过运行以下命令打开这个文件：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Modify `ZSH_THEME` to set your preferred theme. Save and close. Changes in `.zshrc`
    will show up when you reboot your terminal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`ZSH_THEME`以设置你喜欢的主题。保存并关闭。`.zshrc`中的更改将在你重新启动终端时显示。
- en: '***Note*** *To refresh the settings of your current terminal window, you can
    run:* `*source ~/.zshrc*`'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意*** *要刷新当前终端窗口的设置，你可以运行：* `*source ~/.zshrc*`'
- en: 'The Git branch visualization uses some particular icons, which you can display
    in the terminal using a so-called “Nerd Font”. I like the Dejavu Sans Mono Nerd
    Font, you can install it using `homebrew` [[1]](#ce33):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Git分支可视化使用了一些特定的图标，你可以通过所谓的“Nerd Font”在终端中显示这些图标。我喜欢Dejavu Sans Mono Nerd Font，你可以使用`homebrew`安装它[[1]](#ce33)：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, make sure your VS Code terminal uses the new font. Go to the command
    palette (**Cmd + Shift + P**) and open `settings.json` by typing *open settings*.
    Add the following line to the file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保你的VS Code终端使用新字体。转到命令面板（**Cmd + Shift + P**）并通过输入*open settings*打开`settings.json`。在文件中添加以下行：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '***Note:*** *Make sure to select the general* User Setting *file and not the
    project specific* Workspace Setting *file. Later on, when configuring settings
    specific to dbt, we will use the Workspace settings.*'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：*** *确保选择的是通用* 用户设置 *文件，而不是项目特定的* 工作区设置 *文件。稍后，当配置与dbt相关的设置时，我们将使用工作区设置。*'
- en: 'Your VS Code terminal should now look something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你的VS Code终端现在应该看起来像这样：
- en: '![](../Images/0e03e7ef5b2ddfbd0c051f7db0851418.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e03e7ef5b2ddfbd0c051f7db0851418.png)'
- en: (Screenshot by Author)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （作者截图）
- en: 'The final step is to install the `zsh-autocompletion` and `zsh-syntax-highlighting`
    packages [[2](#ce33)], [[3](#ce33)]. Install them by running:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是安装`zsh-autocompletion`和`zsh-syntax-highlighting`软件包[[2](#ce33)]，[[3](#ce33)]。通过运行以下命令来安装它们：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add them to the `plugins` variable in the `~/.zshrc` file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们添加到`~/.zshrc`文件中的`plugins`变量中：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '***Final Note on Terminal:*** *I briefly mentioned* [*iTerm*](https://iterm2.com/)*,
    this is an alternative for the default macOS terminal . If you don’t have it installed
    yet, I recommend trying it out.*'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***终端的最终说明：*** *我简要提到过* [*iTerm*](https://iterm2.com/)*，这是默认 macOS 终端的一个替代品。如果你还没有安装，建议你试试。*'
- en: 2\. Extensions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 扩展
- en: So far we have covered some optimizations for a general VS Code setup. Now it’s
    time to discuss some more dbt-specific configurations, starting with a very powerful
    VS Code extension called dbt Power User.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了一些通用 VS Code 设置的优化。现在是时候讨论一些更具体的 dbt 配置，从一个非常强大的 VS Code 扩展开始，叫做
    dbt Power User。
- en: '[](https://marketplace.visualstudio.com/items?itemName=innoverio.vscode-dbt-power-user&source=post_page-----a56dd27ba8d5--------------------------------)
    [## dbt Power User - Visual Studio Marketplace'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://marketplace.visualstudio.com/items?itemName=innoverio.vscode-dbt-power-user&source=post_page-----a56dd27ba8d5--------------------------------)
    [## dbt Power User - Visual Studio Marketplace'
- en: This extension makes vscode seamlessly work with dbt.
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这个扩展使得 vscode 可以无缝地与 dbt 配合使用。
- en: marketplace.visualstudio.com](https://marketplace.visualstudio.com/items?itemName=innoverio.vscode-dbt-power-user&source=post_page-----a56dd27ba8d5--------------------------------)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: marketplace.visualstudio.com](https://marketplace.visualstudio.com/items?itemName=innoverio.vscode-dbt-power-user&source=post_page-----a56dd27ba8d5--------------------------------)
- en: 'The main features of this extension that I regularly use are:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我常用的这个扩展的主要功能有：
- en: Previewing compiled SQL (**Cmd + ‘**)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览编译后的 SQL (**Cmd + ‘**)
- en: Generating base models from a source `yml`
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源 `yml` 生成基础模型
- en: Autocompletion of model references
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型引用的自动补全
- en: Executing model-specific tests
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行模型特定的测试
- en: SQL & Jijnja Templating
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL & Jinja 模板化
- en: '![](../Images/3899c34e79d5558e2c228da19808d56d.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3899c34e79d5558e2c228da19808d56d.png)'
- en: The concept of templating SQL (Image by Author)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 模板化的概念（图片来源于作者）
- en: 'One of the reasons why dbt is such a strong data modeling tool is that it supports
    *templating* for SQL code using [Jijna](https://jinja.palletsprojects.com/en/3.1.x/).
    It allows you to use Python-like logic (e.g. if statements or for loops) to create
    your SQL queries. In practice a *templated* SQL file might look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: dbt 成为如此强大的数据建模工具的原因之一是它支持 *模板化* SQL 代码，使用 [Jinja](https://jinja.palletsprojects.com/en/3.1.x/)。它允许你使用类似
    Python 的逻辑（例如 if 语句或 for 循环）来创建 SQL 查询。实际中，一个 *模板化的* SQL 文件可能看起来像这样：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The compiler returns the following *compiled* SQL file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器返回以下 *编译后的* SQL 文件：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The resulting compiled query might look different depending on the database
    you are using. Templating allows you to build complex SQL models with just a few
    lines of code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的查询结果可能会因使用的数据库不同而有所不同。模板化允许你用几行代码构建复杂的 SQL 模型。
- en: Templating in dbt is a whole topic in itself, to learn more about how you can
    use templating in your models refer to the [official documentation](https://docs.getdbt.com/docs/build/jinja-macros).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: dbt 中的模板化是一个独立的话题，要了解如何在模型中使用模板化，请参考 [官方文档](https://docs.getdbt.com/docs/build/jinja-macros)。
- en: vscode-dbt
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: vscode-dbt
- en: 'A tool that will help you speed up writing Jijna templated SQL code is `vscode-dbt`.
    This extension adds a couple of useful Jinja snippets to your toolset. For example:
    `for`,`ref` and `source`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以帮助你加速编写 Jinja 模板化 SQL 代码的工具是 `vscode-dbt`。这个扩展为你的工具集添加了一些有用的 Jinja 片段。例如：`for`，`ref`
    和 `source`。
- en: '[](https://marketplace.visualstudio.com/items?itemName=bastienboutonnet.vscode-dbt&source=post_page-----a56dd27ba8d5--------------------------------)
    [## vscode-dbt — Visual Studio Marketplace'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://marketplace.visualstudio.com/items?itemName=bastienboutonnet.vscode-dbt&source=post_page-----a56dd27ba8d5--------------------------------)
    [## vscode-dbt — Visual Studio Marketplace'
- en: 'Provides snippets for dbt and Jinja functions in SQL, YAML, and Markdown. Cool
    Tip: For a richer integration between…'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供 dbt 和 Jinja 函数在 SQL、YAML 和 Markdown 中的片段。酷炫提示：为了实现更丰富的集成……
- en: marketplace.visualstudio.com](https://marketplace.visualstudio.com/items?itemName=bastienboutonnet.vscode-dbt&source=post_page-----a56dd27ba8d5--------------------------------)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: marketplace.visualstudio.com](https://marketplace.visualstudio.com/items?itemName=bastienboutonnet.vscode-dbt&source=post_page-----a56dd27ba8d5--------------------------------)
- en: 'For the snippets to be recognized, you have to add the following line to your
    workspace `settings.json`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使片段被识别，你需要在工作区的 `settings.json` 中添加以下行：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Adding custom snippets**'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**添加自定义片段**'
- en: '![](../Images/932beab829985311ada2c32022e94433.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/932beab829985311ada2c32022e94433.png)'
- en: Creating custom code snippets (Image by Author)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义代码片段（图片来源于作者）
- en: If you find yourself typing the same thing again and again, it will be faster
    to create your own custom snippets. For example; At the top of each model, I like
    to *import* all the *dependencies* as a CTE, similar to what you would do in Python
    code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己不断重复输入相同的内容，创建自定义片段会更快。例如；在每个模型的顶部，我喜欢*导入*所有的*依赖项*作为 CTE，这类似于你在 Python
    代码中所做的。
- en: You can add snippets by opening the command palette (**Cmd + Shift + P**) and
    navigating to *Configure User Snippets*
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过打开命令面板（**Cmd + Shift + P**）并导航到*配置用户片段*来添加代码片段。
- en: '![](../Images/3fd306c9f53b82e4d620fb37b4e644b5.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3fd306c9f53b82e4d620fb37b4e644b5.png)'
- en: Go to configure user snippets (Screenshot by Author)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 转到配置用户片段（截图由作者提供）
- en: '![](../Images/d4a4bfcc150f662c14923e30ed9fa5ce.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4a4bfcc150f662c14923e30ed9fa5ce.png)'
- en: Open the jinja-sql snippet file (Screenshot by Author)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 jinja-sql 片段文件（截图由作者提供）
- en: 'After adding the snippet, the file looks like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 添加片段后，文件会变成这样：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a simple example for illustration purposes, I encourage you to create
    your own snippets wherever you see fit.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的示例，仅用于说明目的，我鼓励你在适合的地方创建自己的代码片段。
- en: '3\. Jinja-SQL formatting: sqlfmt'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. Jinja-SQL 格式化：sqlfmt
- en: To format Jinja-SQL, I use `sqlfmt`, a formatter specifically designed for dbt
    logic that is integrated with dbt Power User. `sqlfmt` is an *opinionated formatter*,
    you can adjust the maximum line length but there is not much room for customizing
    the formatting behavior. This is a good thing, as it leaves less room for discussion
    about code aesthetics. This simplicity also positively affects the reliability
    and speed of the formatting.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了格式化 Jinja-SQL，我使用 `sqlfmt`，这是一个专门为 dbt 逻辑设计的格式化工具，并与 dbt Power User 集成。`sqlfmt`
    是一个*有主见的格式化工具*，你可以调整最大行长度，但在自定义格式化行为方面没有太多空间。这是好事，因为它减少了关于代码美学的讨论空间。这种简单性也对格式化的可靠性和速度产生了积极影响。
- en: The easiest way to install `sqlfmt`(as recommended in [[4](#ce33)]) is by using
    `pipx`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `sqlfmt` 的最简单方法（如 [[4](#ce33)] 中推荐的）是使用 `pipx`。
- en: 'If you don’t have `pipx` , install it by running:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有 `pipx`，请运行以下命令安装：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `ensurepath` command adds the `pipx` bin to your `PATH`, so that you can
    call `sqlfmt` from anywhere → In our case from dbt Power User.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`ensurepath` 命令将 `pipx` 的二进制文件添加到你的 `PATH` 中，这样你就可以从任何地方调用 `sqlfmt` → 在我们的例子中就是从
    dbt Power User。'
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To install `sqlfmt` run:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `sqlfmt`，请运行：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Resulting in `sqlfmt` being installed and exposed on your `$PATH`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是 `sqlfmt` 被安装并暴露在你的 `$PATH` 中：
- en: '![](../Images/4d9d07a46c96effe15b92bd74bea060f.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d9d07a46c96effe15b92bd74bea060f.png)'
- en: (Image by Author)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: （图片由作者提供）
- en: 'The last step is to configure the default formatter for Jinja SQL in VS Code.
    Add these lines to the workspace `settings.json`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是在 VS Code 中配置 Jinja SQL 的默认格式化工具。将以下几行添加到工作区的 `settings.json` 中：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '***Note:*** *If you read the manual of sqlfmt, you will find the option to
    exclude certain parts of the code by using* `*# fmt: off / on*` *or define folders
    in the to exclude.*'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：*** *如果你阅读 sqlfmt 的手册，你会发现可以通过使用* `*# fmt: off / on*` *来排除代码的某些部分，或者定义要排除的文件夹。*'
- en: 4\. Linting with SQLFluff
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 使用 SQLFluff 进行 Linting
- en: '![](../Images/4588c9fdd0797bbc62df410734dc07b6.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4588c9fdd0797bbc62df410734dc07b6.png)'
- en: Linting with SQLFluff (Image by Author)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQLFluff 进行 Linting（图片由作者提供）
- en: What is Linting?
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Linting？
- en: Linting is the process of analyzing code to find errors, bugs, and style mistakes.
    You could consider a linter a grammar checker for code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Linting 是分析代码以查找错误、漏洞和样式问题的过程。你可以将 lint 工具视为代码的语法检查器。
- en: Formatting and linting are two different techniques that can be used together
    to improve your code. Formatting will improve code appearance while linting will
    help you catch more complex errors and mistakes in your code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化和 linting 是两种不同的技术，可以一起使用来改进你的代码。格式化将改善代码的外观，而 linting 将帮助你捕捉代码中的更复杂的错误和问题。
- en: The linter I use is [SQLFluff](https://sqlfluff.com/). It works for most SQL
    dialects and most importantly; it is compatible with Jinja templated SQL. At the
    time of writing, I found this to be the most advanced SQL linter out there.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的 linter 是 [SQLFluff](https://sqlfluff.com/)。它适用于大多数 SQL 方言，更重要的是；它与 Jinja
    模板化的 SQL 兼容。在撰写时，我发现这是最先进的 SQL linter。
- en: 'Install it by running the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To integrate SQLFluff with VS Code you can download the [sqlfluff extension](https://marketplace.visualstudio.com/items?itemName=dorzey.vscode-sqlfluff).
    To avoid conflicts between `sqlfluff`, `sqlfmt`, and dbt Jinja logic, add the
    following lines to your workspace `settings.json`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要将SQLFluff与VS Code集成，你可以下载[sqlfluff扩展](https://marketplace.visualstudio.com/items?itemName=dorzey.vscode-sqlfluff)。为避免`sqlfluff`、`sqlfmt`和dbt
    Jinja逻辑之间的冲突，请在你的工作区`settings.json`中添加以下行：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'On top of that, create a `.sqlfuff` file in your workspace folder. Add the
    following lines:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在你的工作区文件夹中创建一个`.sqlfuff`文件。添加以下行：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '***Note :*** *The above-mentioned* `*.sqlfluff*` *is based on [*[*5*](#ce33)*]
    but slightly extended. How you set up the linting rules is up to your personal
    (and your team’s) preference.*'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：*** *上述提到的`*.sqlfluff*`基于 [*[*5*](#ce33)*] 但稍作扩展。如何设置linting规则取决于你的个人（以及你团队的）偏好。*'
- en: 'You won’t need to lint from the command line once you have installed the `vscode-sqlfluff`
    extension. However, I still prefer calling `sqlfluff lint {path_to_model_sub_folder}`
    from the terminal, as it provides a clear overview of any issues in your code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`vscode-sqlfluff`扩展后，你无需再从命令行进行lint检查。然而，我仍然喜欢从终端调用`sqlfluff lint {path_to_model_sub_folder}`，因为它能清楚地概览你代码中的任何问题。
- en: '![](../Images/0ff3b14031a71ef49a0818a28889bfd1.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ff3b14031a71ef49a0818a28889bfd1.png)'
- en: (Screenshot by Author)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: （截图由作者提供）
- en: Besides the `lint` command, SQLFluff has a formatter-like`fix` command. You
    can use this to fix some of the issues in your code raised by SQLFluff. However,
    I recommend using this feature with some caution, as it can also break your code.
    As mentioned before, I prefer using less the complex `sqlfmt` for formatting.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`lint`命令，SQLFluff还有一个类似格式化的`fix`命令。你可以使用它来修复SQLFluff提出的一些代码问题。然而，我建议谨慎使用此功能，因为它也可能会破坏你的代码。如前所述，我倾向于使用较少复杂的`sqlfmt`进行格式化。
- en: To ignore linting errors due to templated dbt functions, such as the one below,
    you can add `ignore = templating` to your `.sqlfluff` file.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了忽略由于模板化dbt函数导致的lint错误，比如下面的那个，你可以在`.sqlfluff`文件中添加`ignore = templating`。
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To further customize the linting behavior, refer to the official documentation
    [[6](#ce33)].
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步自定义linting行为，请参阅官方文档[[6](#ce33)]。
- en: Done!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！
- en: Conclusion
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: If you have followed the outlined steps and made it this far, you should now
    have an optimal workspace to work with dbt! We’ve covered topics like upgrading
    your VS Code terminal, which extensions to use, and how to format and lint Jinja
    templated SQL. These tips will save you time and effort, allowing you to focus
    on building better data models.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照步骤操作并且已经完成了这些，应该现在你有了一个**优化**的工作区来使用dbt！我们涵盖了如升级VS Code终端、使用哪些扩展以及如何格式化和lint
    Jinja模板化SQL等主题。这些提示将节省你的时间和精力，让你专注于构建更好的数据模型。
- en: The goal is to continuously increase efficiency. If you’re looking for the next,
    more advanced step, I recommend exploring [macros for dbt](https://docs.getdbt.com/docs/build/jinja-macros).
    If you have any questions or ideas for future articles, feel free to reach out
    to me.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是不断提高效率。如果你在寻找下一个更高级的步骤，我建议你探索[dbt的宏](https://docs.getdbt.com/docs/build/jinja-macros)。如果你有任何问题或对未来的文章有想法，请随时联系我。
- en: Thank you for reading, and happy modeling!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，祝建模愉快！
- en: Enjoyed this Article?
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 觉得这篇文章有用吗？
- en: '*If you found this article helpful, be sure to* [*follow me*](https://medium.com/@sebasn)
    *to stay up-to-date with my latest articles on data modeling, coding, and more.*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你觉得这篇文章有帮助，记得* [*关注我*](https://medium.com/@sebasn) *以便了解我最新的关于数据建模、编码等的文章。*'
- en: '**References**'
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: '[1] Installing Fonts through homebrew **| |** [*link*](https://gist.github.com/davidteren/898f2dcccd42d9f8680ec69a3a5d350e)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 通过homebrew安装字体 **| |** [*链接*](https://gist.github.com/davidteren/898f2dcccd42d9f8680ec69a3a5d350e)'
- en: '[2] Installing zsh-syntax-higlighting | | [*link*](https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 安装zsh-syntax-higlighting | | [*链接*](https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md)'
- en: '[3] Installing zsh-autocomplete **| |** [*link*](https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 安装zsh-autocomplete **| |** [*链接*](https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md)'
- en: '[4] Installing sqlfmt ***| |*** [*link*](https://docs.sqlfmt.com/getting-started/installation)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 安装sqlfmt ***| |*** [*链接*](https://docs.sqlfmt.com/getting-started/installation)'
- en: '[5] Integrating `sqlfmt` and `sqlfluff` | | [*link*](https://docs.sqlfmt.com/integrations/sqlfluff)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] 集成`sqlfmt`和`sqlfluff` | | [*链接*](https://docs.sqlfmt.com/integrations/sqlfluff)'
- en: '[6]Default Config SQLFluff | | [*link*](https://docs.sqlfluff.com/en/stable/configuration.html#default-configuration)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] 默认配置 SQLFluff | | [*链接*](https://docs.sqlfluff.com/en/stable/configuration.html#default-configuration)'
