- en: 'From Python to Julia: Basic Data Manipulation and EDA'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Python 到 Julia：基本数据操作和探索性数据分析
- en: 原文：[https://towardsdatascience.com/from-python-to-julia-basic-data-manipulation-and-eda-51171b34f685](https://towardsdatascience.com/from-python-to-julia-basic-data-manipulation-and-eda-51171b34f685)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/from-python-to-julia-basic-data-manipulation-and-eda-51171b34f685](https://towardsdatascience.com/from-python-to-julia-basic-data-manipulation-and-eda-51171b34f685)
- en: '![](../Images/775edd50e2dd483b847e2e3422ad51eb.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/775edd50e2dd483b847e2e3422ad51eb.png)'
- en: Image by author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '[](https://medium.com/@wangshenghao1993?source=post_page-----51171b34f685--------------------------------)[![Wang
    Shenghao](../Images/c59ca7f4fc77ca81f6b670ea5435ac19.png)](https://medium.com/@wangshenghao1993?source=post_page-----51171b34f685--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51171b34f685--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51171b34f685--------------------------------)
    [Wang Shenghao](https://medium.com/@wangshenghao1993?source=post_page-----51171b34f685--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@wangshenghao1993?source=post_page-----51171b34f685--------------------------------)[![王晟昊](../Images/c59ca7f4fc77ca81f6b670ea5435ac19.png)](https://medium.com/@wangshenghao1993?source=post_page-----51171b34f685--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51171b34f685--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51171b34f685--------------------------------)
    [王晟昊](https://medium.com/@wangshenghao1993?source=post_page-----51171b34f685--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51171b34f685--------------------------------)
    ·7 min read·Jun 20, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51171b34f685--------------------------------)
    ·阅读时间7分钟·2023年6月20日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: As an emerging programming language in the space of statistical computing, Julia
    is gaining more and more attention in recent years. There are two features which
    make Julia superior over other programming languages.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为统计计算领域的一种新兴编程语言，Julia 近年来获得了越来越多的关注。Julia 有两个特性使其优于其他编程语言。
- en: Julia is a high-level language like Python. Therefore, it is easy to learn and
    use.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia 是一种像 Python 一样的高级语言。因此，它易于学习和使用。
- en: Julia is a compiled language, designed to be as fast as C/C++.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julia 是一种编译语言，设计目标是与 C/C++ 一样快速。
- en: When I first got to know Julia, I was attracted by its computing speed. So I
    decided to give Julia a try, and see if I can use it practically in my daily work.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次了解 Julia 时，我被它的计算速度吸引了。所以我决定尝试一下 Julia，看看我是否可以在日常工作中实际使用它。
- en: As a data science practitioner, I develop prototype ML models for various purposes
    using Python. To learn Julia quickly, I’m going to mimic my routine process of
    building a simple ML model with both Python and Julia. By comparing the Python
    and Julia code side by side, I can easily capture the syntax difference of the
    two languages. That’s how this blog will be arranged in the following sections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名数据科学从业者，我使用 Python 开发各种用途的原型 ML 模型。为了快速学习 Julia，我将模拟我在 Python 和 Julia 中构建简单
    ML 模型的常规过程。通过将 Python 和 Julia 代码并排比较，我可以轻松捕捉这两种语言的语法差异。这就是本博客将按以下章节安排的原因。
- en: Setup
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: Before getting started, we need to first install Julia on our workstation. The
    installation of Julia takes the following 2 steps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要先在工作站上安装 Julia。Julia 的安装分为以下 2 步骤。
- en: Download the installer file from the [official website](https://julialang.org/downloads/).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [官方网站](https://julialang.org/downloads/) 下载安装程序文件。
- en: Unzip the installer file and create a symbolic link to the Julia binary file.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解压安装程序文件并创建指向 Julia 二进制文件的符号链接。
- en: The following blog provides a detailed guideline on installing Julia.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下博客提供了安装 Julia 的详细指南。
- en: '[](https://medium.com/coffee-in-a-klein-bottle/install-julia-1-5-on-ubuntu-bb8be4b2571d?source=post_page-----51171b34f685--------------------------------)
    [## Installing Julia on Ubuntu'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/coffee-in-a-klein-bottle/install-julia-1-5-on-ubuntu-bb8be4b2571d?source=post_page-----51171b34f685--------------------------------)
    [## 在 Ubuntu 上安装 Julia'
- en: A quick tutorial on how to install Julia on Ubuntu and add the kernel to Jupyter
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于如何在 Ubuntu 上安装 Julia 并将内核添加到 Jupyter 的快速教程
- en: medium.com](https://medium.com/coffee-in-a-klein-bottle/install-julia-1-5-on-ubuntu-bb8be4b2571d?source=post_page-----51171b34f685--------------------------------)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/coffee-in-a-klein-bottle/install-julia-1-5-on-ubuntu-bb8be4b2571d?source=post_page-----51171b34f685--------------------------------)
- en: Dataset
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集
- en: I’m going to use a [credit card fraud detection dataset](https://www.kaggle.com/mlg-ulb/creditcardfraud)
    obtained from Kaggle. The dataset contains 492 frauds out of 284,807 transactions.
    There are in total of 30 features including transaction time, amount, and 28 principal
    components obtained with PCA. The “Class” of the transaction is the target variable
    to be predicted, which indicates whether a transaction is a fraud.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用从 Kaggle 获得的[信用卡欺诈检测数据集](https://www.kaggle.com/mlg-ulb/creditcardfraud)。该数据集包含
    492 个欺诈交易，出现在 284,807 个交易中。共有 30 个特征，包括交易时间、金额，以及通过 PCA 获得的 28 个主成分。交易的“Class”是待预测的目标变量，表示交易是否为欺诈。
- en: Similar to Python, the Julia community developed various packages to support
    the needs of the Julia users. The packages can be installed using Julia’s package
    manager `Pkg` , which is equivalent to Python’s `pip` .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Python，Julia 社区开发了各种包以支持 Julia 用户的需求。这些包可以通过 Julia 的包管理器 `Pkg` 安装，相当于 Python
    的 `pip`。
- en: The fraud detection data I use is in the typical .csv format. To load the csv
    data as a dataframe in Julia, both `CSV` and `DataFrame` packages need to be imported.
    The DataFrame package can be treated as the Pandas equivalent in Julia.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的欺诈检测数据采用典型的 .csv 格式。要在 Julia 中将 csv 数据加载为数据框，需要导入 `CSV` 和 `DataFrame` 包。DataFrame
    包可以视为 Julia 中 Pandas 的等价物。
- en: Load structured data as dataframe — Julia implementation
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将结构化数据加载为数据框 — Julia 实现
- en: Here’s how the imported data looks like.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是导入的数据的样子。
- en: '![](../Images/d91b107709ab9964b873762dde7b8d71.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d91b107709ab9964b873762dde7b8d71.png)'
- en: Image by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: In Jupyter, the loaded dataset can be displayed as shown in the above image.
    If you’d like to view more columns, one quick solution will be to specify the
    environment variable `ENV["COLUMNS"]` . Otherwise, only fewer than 10 columns
    will be displayed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中，加载的数据集可以如上图所示。如果您希望查看更多列，一种快速的解决方案是指定环境变量 `ENV["COLUMNS"]`。否则，最多只会显示不到
    10 列。
- en: The equivalent Python implementation is as follows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的 Python 实现如下。
- en: '![](../Images/03acf15b0edae9844435162ed1caf119.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03acf15b0edae9844435162ed1caf119.png)'
- en: Load structured data as dataframe — Python implementation (Image by author)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将结构化数据加载为数据框 — Python 实现（作者提供的图片）
- en: Exploratory Data Analysis (EDA)
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索性数据分析（EDA）
- en: Exploratory analysis allows us to examine the data quality and discover the
    patterns among the features, which can be extremely useful for feature engineering
    and training ML models.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 探索性分析允许我们检查数据质量并发现特征之间的模式，这对特征工程和训练 ML 模型非常有用。
- en: Basic statistics
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本统计
- en: We can start with computing some simple statistics of the features, such as
    mean, standard deviation. Similar to Pandas in Python, Julia’s DataFrame package
    provides a `describe` function for this purpose.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从计算特征的一些简单统计数据开始，例如均值、标准差。类似于 Python 中的 Pandas，Julia 的 DataFrame 包提供了 `describe`
    函数来实现这一目的。
- en: '![](../Images/b4171bf435fb5d0cf53f556733cb8596.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4171bf435fb5d0cf53f556733cb8596.png)'
- en: Generate basic statistics using the describe function in Julia (Image by author)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Julia 中的 describe 函数生成基本统计数据（作者提供的图片）
- en: The `describe` function allows us to generate 12 types of basic statistics.
    We can choose which one to generate by changing the `:all` argument such as `describe(df,
    :mean, :std)` . It’s a little annoying that the `describe` function will keep
    omitting the display of statistics if we do not specify `:all` , even if the upper
    limit for the number of displayable columns is set. This is something the Julia
    community can work on in future.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe` 函数允许我们生成 12 种基本统计数据。我们可以通过更改 `:all` 参数来选择生成哪一种，例如 `describe(df,
    :mean, :std)`。令人有些烦恼的是，如果不指定 `:all`，即使设置了显示列的上限，`describe` 函数也会不断遗漏统计数据的显示。这是
    Julia 社区未来可以改进的地方。'
- en: '![](../Images/1998da45bdfc44db02e435ccb06f5e85.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1998da45bdfc44db02e435ccb06f5e85.png)'
- en: Julia omits printing specified statistics :-/ (Image by author)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 遗漏了指定统计数据的打印 :-/（作者提供的图片）
- en: Class balance
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类别平衡
- en: Fraud detection datasets usually suffer from the issue of extreme class imbalance.
    Therefore, we’d like to find out the distribution of the data between the two
    classes. In Julia, this can be done by applying the [“split-apply-combine”](https://dataframes.juliadata.org/stable/man/split_apply_combine/)
    functions, which is equivalent to Pandas’ “groupby-aggregate” function in Python.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 欺诈检测数据集通常存在极端的类别不平衡问题。因此，我们希望了解两个类别之间的数据分布。在 Julia 中，这可以通过应用[“split-apply-combine”](https://dataframes.juliadata.org/stable/man/split_apply_combine/)函数来实现，这等同于
    Python 中 Pandas 的“groupby-aggregate”函数。
- en: '![](../Images/bed59312c9243b3f67f14a0c4ba96d91.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bed59312c9243b3f67f14a0c4ba96d91.png)'
- en: Check the class distribution — Julia implementation (Image by author)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 检查类别分布——Julia 实现（图像由作者提供）
- en: In Python, we can achieve the same purpose by using the `value_counts()` function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们可以使用`value_counts()`函数实现相同的目的。
- en: '![](../Images/843ba904904542765e2f5ae7b22fb149.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/843ba904904542765e2f5ae7b22fb149.png)'
- en: Check the class distribution — Python implementation (Image by author)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 检查类别分布——Python 实现（图像由作者提供）
- en: Univariate analysis
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单变量分析
- en: Next, let’s look into the distribution of features using histograms. In particular,
    we take the transaction amount and time as examples, since they are the only interpretable
    features in the dataset.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过直方图深入了解特征的分布。特别是，我们以交易金额和时间为例，因为它们是数据集中唯一可解释的特征。
- en: In Julia, there is a handy library called [StatsPlots](https://github.com/JuliaPlots/StatsPlots.jl),
    which allows us to plot various commonly used statistical graphs including histogram,
    bar chart, box plot etc.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Julia 中，有一个名为[StatsPlots](https://github.com/JuliaPlots/StatsPlots.jl)的实用库，允许我们绘制各种常用的统计图表，包括直方图、条形图、箱形图等。
- en: The following code plots the histograms for the transaction amount and time
    in two subplots. It can be observed that the transaction amount is highly skewed.
    For most transactions, the transaction amount is below 100\. The transaction time
    follows a bimodal distribution.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在两个子图中绘制了交易金额和时间的直方图。可以观察到交易金额高度偏斜。对于大多数交易，交易金额低于 100。交易时间遵循双峰分布。
- en: Plot the distribution of transaction time & transaction amount — Julia implementation
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制交易时间和交易金额的分布图——Julia 实现
- en: '![](../Images/5073b3a8a64416930bd02302c86addb6.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5073b3a8a64416930bd02302c86addb6.png)'
- en: Plot the distribution of transaction time & transaction amount — Julia implementation
    (Image by author)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制交易时间和交易金额的分布图——Julia 实现（图像由作者提供）
- en: In Python, we can use matplotlib and seaborn to create the same chart.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们可以使用 matplotlib 和 seaborn 创建相同的图表。
- en: '![](../Images/f041c2a0f6b7ee3187c3c6675f48bf7c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f041c2a0f6b7ee3187c3c6675f48bf7c.png)'
- en: Plot the distribution of transaction time & transaction amount —Python implementation
    (Image by author)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制交易时间和交易金额的分布图——Python 实现（图像由作者提供）
- en: Bivariate analysis
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双变量分析
- en: While the above univariate analysis shows us the general pattern of the transaction
    amount and time, it does not tell us how they are related to the fraud flag to
    be predicted. To have a quick overview for the relationship between the features
    and the target variable, we can create a correlation matrix and visualize it using
    a heatmap.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述单变量分析展示了交易金额和时间的一般模式，但它并未告诉我们这些与待预测的欺诈标志如何相关。为了快速了解特征与目标变量之间的关系，我们可以创建一个相关矩阵并通过热图进行可视化。
- en: Before creating the correlation matrix, we need to take note that our data is
    highly imbalanced. In order to better capture the correlation, the data needs
    to be downsampled so that the impact of the features won’t get “diluted” due to
    the data imbalance. This exercise requires dataframe slicing and concatenation.
    The following code demonstrates the implementation of downsampling in Julia.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建相关矩阵之前，我们需要注意到数据高度不平衡。为了更好地捕捉相关性，需要对数据进行下采样，以避免特征的影响因数据不平衡而被“稀释”。这个过程需要数据框的切片和连接。以下代码演示了
    Julia 中下采样的实现。
- en: '![](../Images/4f92e0191c910f8dcbe9665b7c2fdb89.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4f92e0191c910f8dcbe9665b7c2fdb89.png)'
- en: Downsampling of data in Julia (Image by author)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 中的数据下采样（图像由作者提供）
- en: The preceding code counts the number of the fraud transactions, and combines
    the fraud transactions with the same number of the non-fraud transactions. Next,
    we can create a heatmap to visualise the correlation matrix.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码统计了欺诈交易的数量，并将这些欺诈交易与相同数量的非欺诈交易结合起来。接下来，我们可以创建热图来可视化相关矩阵。
- en: Plot a heatmap to visualize the correlation matrix — Julia implementation
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制热图以可视化相关矩阵——Julia 实现
- en: The resulting heatmap is shown as follows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 结果热图如下所示。
- en: '![](../Images/3ef1faf7dba7104d965cf688d21110b1.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3ef1faf7dba7104d965cf688d21110b1.png)'
- en: Feature correlation heatmap plotted by Julia (Image by author)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Julia 绘制的特征相关性热图（图像由作者提供）
- en: Here’s the equivalent implementation of downsampling and plotting heatmap in
    Python.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 Python 中的下采样和热图绘制的等效实现。
- en: '![](../Images/b4b193d59bb2424e8c96a594efca5555.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4b193d59bb2424e8c96a594efca5555.png)'
- en: Downsampling and plotting correlation heatmap — Python implementation (Image
    by author)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下采样和绘制相关性热图 — Python 实现（图片由作者提供）
- en: 'After having an overview of the feature correlation, we would like to zoom
    into the features with significant correlation with the target variable, which
    is “Class” in this case. From the heatmap, it can be observed that the following
    PCA transformed features carry a positive relationship with “Class”: V2, V4, V11,
    V19, whereas the features which carry a negative relationship include V10, V12,
    V14, V17\. We can use boxplots to examine the impact of these highlighted features
    to the target variable.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在对特征相关性进行概述后，我们希望深入研究与目标变量（在本例中为“Class”）显著相关的特征。从热图中可以观察到，以下经过 PCA 转换的特征与“Class”具有正相关关系：V2、V4、V11、V19，而具有负相关关系的特征包括
    V10、V12、V14、V17。我们可以使用箱线图来检查这些突出特征对目标变量的影响。
- en: In Julia, boxplots can be created using the aforementioned [StatsPlots](https://github.com/JuliaPlots/StatsPlots.jl)
    package. Here I use the 4 features positively correlated with “Class” as an example
    to illustrate how to create boxplots.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Julia 中，可以使用上述的 [StatsPlots](https://github.com/JuliaPlots/StatsPlots.jl)
    包来创建箱线图。在这里，我使用与“Class”正相关的 4 个特征作为示例来说明如何创建箱线图。
- en: Create boxplots to visualize the impact of features to “Class” — Julia implementation
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建箱线图以可视化特征对“Class”的影响 — Julia 实现
- en: The `@df` here serves as a macro which indicates creating a boxplot over the
    target dataset, i.e. `balanced_df`. The resulting plot is shown as follows.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`@df` 作为宏，用于表示在目标数据集上创建箱线图，即 `balanced_df`。结果图如下所示。'
- en: '![](../Images/a2778178ab52654a8fc5dda21e270382.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2778178ab52654a8fc5dda21e270382.png)'
- en: Boxplots of features with positive correlation over “Class” (Image by author)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 特征与“Class”之间的正相关箱线图（图片由作者提供）
- en: The following code can be used to create the same boxplot in Python.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可以用来在 Python 中创建相同的箱线图。
- en: '![](../Images/e2d8dfd45c64cba5bf37bf7f778888e7.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e2d8dfd45c64cba5bf37bf7f778888e7.png)'
- en: Create boxplots to visualize the impact of features to “Class” — Python implementation
    (Image by author)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建箱线图以可视化特征对“Class”的影响 — Python 实现（图片由作者提供）
- en: Intermission
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插曲
- en: I’m going to pause here with a quick comment on my “user experience” with Julia
    so far. In terms of the language syntax, Julia seems to be somewhere in between
    Python and R. There are Julia packages which provide comprehensive support to
    the various needs of data manipulation and EDA. However, since the development
    of Julia is still in the early stage, the programming language still lacks resources
    and community support. It can take a lot of time to search for a Julia implementation
    of certain data manipulation exercises such as [unnesting a list-like dataframe
    column](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.explode.html).
    Furthermore, the syntax of Julia is nowhere close to getting stabilized like Python
    3\. At this point, I won’t say Julia is a good choice of programming language
    for large businesses and enterprises.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，我将暂停，并简要评论一下我迄今为止使用 Julia 的“用户体验”。就语言语法而言，Julia 似乎介于 Python 和 R 之间。Julia
    包提供了对数据处理和探索性数据分析（EDA）各种需求的全面支持。然而，由于 Julia 的发展仍处于早期阶段，这种编程语言仍然缺乏资源和社区支持。寻找某些数据处理练习的
    Julia 实现，如 [展开类似列表的数据框列](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.explode.html)，可能需要花费很多时间。此外，Julia
    的语法远未稳定，如 Python 3。此时，我不会说 Julia 是大型企业和企业的良好编程语言选择。
- en: We are not done with building the fraud detection model. I will continue in
    the next blog. Stay tuned!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还未完成构建欺诈检测模型的工作。我将在下一篇博客中继续，敬请关注！
- en: Jupyter notebook can be found on [Github](https://github.com/Shenghao1993/shenghao-blogs-work/tree/main/julia-traditional-ml).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter notebook 可以在 [Github](https://github.com/Shenghao1993/shenghao-blogs-work/tree/main/julia-traditional-ml)
    上找到。
- en: References
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[Machine Learning Group of ULB (Université Libre de Bruxelles)](http://mlg.ulb.ac.be).
    (no date). *Credit Card Fraud Detection* [Dataset]. [https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[布鲁塞尔自由大学机器学习小组](http://mlg.ulb.ac.be)。 (无日期)。*信用卡欺诈检测* [数据集]。 [https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud)'
