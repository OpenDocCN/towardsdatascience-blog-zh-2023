- en: 'Discovering the Maxflow Mincut Theorem: A Comprehensive and Formal Approach'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现最大流-最小割定理：一种全面而正式的方法
- en: 原文：[https://towardsdatascience.com/discovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7?source=collection_archive---------11-----------------------#2023-08-24](https://towardsdatascience.com/discovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7?source=collection_archive---------11-----------------------#2023-08-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/discovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7?source=collection_archive---------11-----------------------#2023-08-24](https://towardsdatascience.com/discovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7?source=collection_archive---------11-----------------------#2023-08-24)
- en: Exploring the field of flow networks and the Maxflow Mincut theorem
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索流网络领域和**最大流-最小割定理**
- en: '[](https://cardstdani.medium.com/?source=post_page-----e2402ce935c7--------------------------------)[![Daniel
    García Solla](../Images/b6e7bc9fdfdfcda7875215b1e0264d9e.png)](https://cardstdani.medium.com/?source=post_page-----e2402ce935c7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e2402ce935c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e2402ce935c7--------------------------------)
    [Daniel García Solla](https://cardstdani.medium.com/?source=post_page-----e2402ce935c7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://cardstdani.medium.com/?source=post_page-----e2402ce935c7--------------------------------)[![Daniel
    García Solla](../Images/b6e7bc9fdfdfcda7875215b1e0264d9e.png)](https://cardstdani.medium.com/?source=post_page-----e2402ce935c7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e2402ce935c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e2402ce935c7--------------------------------)
    [Daniel García Solla](https://cardstdani.medium.com/?source=post_page-----e2402ce935c7--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc63705819b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdiscovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7&user=Daniel+Garc%C3%ADa+Solla&userId=c63705819b32&source=post_page-c63705819b32----e2402ce935c7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e2402ce935c7--------------------------------)
    ·22 min read·Aug 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe2402ce935c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdiscovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7&user=Daniel+Garc%C3%ADa+Solla&userId=c63705819b32&source=-----e2402ce935c7---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fc63705819b32&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdiscovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7&user=Daniel+Garc%C3%ADa+Solla&userId=c63705819b32&source=post_page-c63705819b32----e2402ce935c7---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e2402ce935c7--------------------------------)
    ·22分钟阅读·2023年8月24日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fe2402ce935c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdiscovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7&user=Daniel+Garc%C3%ADa+Solla&userId=c63705819b32&source=-----e2402ce935c7---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe2402ce935c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdiscovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7&source=-----e2402ce935c7---------------------bookmark_footer-----------)![](../Images/b3cd16c30d97e9e76047094143274251.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fe2402ce935c7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fdiscovering-the-maxflow-mincut-theorem-a-comprehensive-and-formal-approach-e2402ce935c7&source=-----e2402ce935c7---------------------bookmark_footer-----------)![](../Images/b3cd16c30d97e9e76047094143274251.png)'
- en: Photo by [israel palacio](https://unsplash.com/@othentikisra?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [israel palacio](https://unsplash.com/@othentikisra?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: In the domain of network flow optimization, the Maxflow Mincut Theorem stands
    out as a remarkable mathematical milestone. Its elegance holds the key to solving
    complex optimization problems concerning the flow of fluids or resources through
    networks composed of nodes interconnected by edges. Its applications include a
    broad range of systems, from transportation networks to communications infrastructure,
    where efficient flow management is essential. By understanding this theorem and
    the fundamental concepts behind its mathematical articulation, you can unlock
    the riddles to maximizing resource utilization and reaching optimal performance
    in a variety of practical scenarios.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络流优化领域，Maxflow Mincut 定理作为一个显著的数学里程碑脱颖而出。它的优雅之处在于解决关于流体或资源在由节点和边互联的网络中流动的复杂优化问题。它的应用涵盖了从交通网络到通信基础设施的广泛系统，在这些系统中，高效的流动管理至关重要。通过理解这个定理及其数学表达背后的基本概念，你可以解开最大化资源利用和在各种实际场景中达到最佳性能的谜团。
- en: In this article, we aim to simplify and make the theorem approachable for all
    readers. We will guide you through its historical development, outlining its roots
    from early formulations that will allow us to appreciate the contributions of
    prominent minds that paved the way for this theorem and its entire mathematical
    study field. Moreover, we will delve into the real-world applications of the Maxflow
    Mincut Theorem. From designing efficient transportation systems to tackling image
    processing tasks, its versatility seems limitless. By exploring its practical
    implications, you will witness the theorem’s profound impact on diverse fields
    and industries.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们旨在简化并使定理对所有读者易于接近。我们将引导你了解其历史发展，概述其从早期公式化的根源，这将使我们能够欣赏到为这一定理及其整个数学研究领域铺平道路的杰出思想者的贡献。此外，我们将深入探讨
    Maxflow Mincut 定理的实际应用。从设计高效的交通系统到处理图像处理任务，其多样性似乎无穷无尽。通过探索其实际影响，你将见证定理在各种领域和行业中的深远影响。
- en: Finally, the goal is to provide you with a comprehensive explanation that matches
    simplicity and formality. No prior expertise in advanced mathematics is required,
    although some knowledge of graph theory and discrete mathematics *(logic and set
    theory)* can help significantly; all you need is a curious mind and a willingness
    to unravel the utility of this exceptional theorem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，目标是为你提供一个既简洁又正式的全面解释。不需要高级数学的先验知识，虽然一些图论和离散数学*(逻辑和集合论)*的知识会有很大帮助；你只需要一颗好奇的心和解开这个杰出定理实用性的愿望。
- en: History
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史
- en: The Maxflow Mincut Theorem was first introduced by Ford and Fulkerson in 1956
    in their seminal paper “[***Maximal flow through a network***](http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf)”,
    with the collaboration of other relevant mathematicians, such as ***Claude Shannon,***
    responsible for the development of information theory. The theorem states that
    the maximum flow in a network is equal to the minimum capacity of a cut, where
    a cut is a partition of the network nodes into two disjoint sets, and its capacity
    is the sum of all edges’ capacity crossing the cut. Since then, this theorem has
    become a cornerstone of flow network theory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Maxflow Mincut 定理首次由 Ford 和 Fulkerson 在 1956 年的开创性论文“*[***Maximal flow through
    a network***](http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf)*”中提出，并与其他相关数学家，如
    ***Claude Shannon***，即信息论的发展者合作。该定理指出，网络中的最大流量等于一个割的最小容量，其中割是将网络节点分成两个不相交的集合，其容量是穿过割的所有边的容量之和。从那时起，这一定理成为流网络理论的基石。
- en: However, the introduction of this theorem comes along with other key scientific
    contributions such as the [***Edmonds–Karp***](https://en.wikipedia.org/wiki/Edmonds%E2%80%93Karp_algorithm),
    [***Ford–Fulkerson***](https://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm),
    or [***Dinic’s***](https://en.wikipedia.org/wiki/Dinic%27s_algorithm) algorithms,
    which all serve the common task of finding the maximum flow that can be passed
    through a network with source and sink. Similarly, by means of the Maxflow Mincut
    Theorem, this value matches with the minimum cut that divides the sink from the
    source. Moreover, we can utilize the algorithms’ internal computations to identify
    the set of edges that constitute the minimum cut, as we will explore further.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个定理的引入伴随着其他关键的科学贡献，例如 [***Edmonds–Karp***](https://en.wikipedia.org/wiki/Edmonds%E2%80%93Karp_algorithm)、
    [***Ford–Fulkerson***](https://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm)
    或 [***Dinic’s***](https://en.wikipedia.org/wiki/Dinic%27s_algorithm) 算法，这些算法都用于寻找可以通过源和汇之间的网络传递的最大流量。同样，通过最大流最小割定理，这个值与将汇与源分开的最小割相匹配。此外，我们可以利用算法的内部计算来识别构成最小割的边集，正如我们将进一步探讨的那样。
- en: Flow Networks
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流网络
- en: Therefore, to simplify the explanation of the theorem that follows, we will
    first get to know the fundamentals and unmissable concepts about flow networks
    in graph theory.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了简化后续定理的解释，我们首先将了解图论中流网络的基本原理和不可错过的概念。
- en: '![](../Images/88494b37125cab4f49546c0b3d6b2cd8.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/88494b37125cab4f49546c0b3d6b2cd8.png)'
- en: Sample flow network (*Image by author*)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 示例流网络（*作者提供的图像*）
- en: As you can see in the above example, a flow network is a weighted, directed
    multigraph used to represent a network-structured object or system in which a
    certain amount of resources, measured in what is referred to as “flow”, needs
    to be conveyed or moved from one or more points ***“source” (represented as the
    S node)*** to one or more other nodes called ***“sink”*** ***(T node)***. Although,
    this particular example doesn’t display the property of multigraph, as there’s
    only one edge between two nodes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如上例所示，流网络是一个加权的、有向的多重图，用于表示一个网络结构的对象或系统，其中一定量的资源，以所谓的“流量”来衡量，需要从一个或多个点 ***“源”（表示为S节点）***
    传输或移动到一个或多个其他节点，称为 ***“汇”*** ***(T节点)***。尽管这个特定示例没有显示多重图的特性，因为两个节点之间只有一条边。
- en: To achieve the representation of such a template, the flow network has weights
    associated with every edge. In this context, the weighted edges model a physical/logical
    connection between several points of resource *(flow)* exchange, where the real
    positive value of weight stands for its ***Capacity (max flow supported).*** Above,
    you can see the capacity depicted at the right side of each edge label, as well
    as the current flow passing through, which in this case is 0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这样的模板表示，流网络的每条边都有权重。在这种情况下，加权边建模了多个资源*(流量)*交换点之间的物理/逻辑连接，其中实际的正值权重代表其 ***容量（最大流量支持）***。如上所示，容量标记在每条边标签的右侧，以及通过的当前流量，这里为0。
- en: Besides each edge’s capacity, the crucial metric that defines the rate at which
    resources traverse every edge per unit of time is the ***flow.*** You can think
    of it as the traffic on a road or the amount of water through a pipeline. Therefore,
    generated in the source nodes or ***supersource*** node if all network’s sources
    are connected to a master source flow generator and taken to the sink nodes or
    ***supersink*** if the similar construct is present on sinks, we can define the
    flow as a function ***f:E→R*** ​that takes in an edge ***(u,v)*** belonging to
    the set of graph edges ***E*** and outputs its current flow in time ***f(u,v),***
    which is a real positive value.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了每条边的容量外，定义资源每单位时间穿越每条边的速率的关键指标是 ***流量***。你可以把它想象成道路上的交通或管道中的水量。因此，由源节点或 ***超源***
    节点生成（如果所有网络的源节点连接到主源流量生成器），并传递到汇节点或 ***超汇***（如果汇节点上有类似构造），我们可以将流量定义为一个函数 ***f:E→R***
    ，它接受属于图边集 ***E*** 的边 ***(u,v)*** 并输出其当前流量 ***f(u,v)***，这是一个实际的正值。
- en: '![](../Images/bef55435a4526b62cdab7daed930c206.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bef55435a4526b62cdab7daed930c206.png)'
- en: Image by author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Therefore, if we compute the above expressions for all the corresponding sources
    ***S*** or sinks ***T*** of the flow network, we can obtain the total amount of
    flow going through the graph.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们计算流网络中所有对应的源***S***或汇***T***的上述表达式，我们可以得到通过图的总流量。
- en: 'To guarantee the flow adhesion to the network’s constraints, it must satisfy
    two fundamental properties:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保证流量符合网络的约束，它必须满足两个基本属性：
- en: '***Capacity Constraint***: The flow passing through any edge cannot exceed
    its capacity. Formally, if the capacity of an edge is denoted as “**c(u, v)**,”
    and the flow through that edge is “**f(u, v)**,” then it must satisfy the condition
    **0 ≤ f(u, v) ≤ c(u, v)** for all edges **(u, v)** within the network. Simply
    put, we can’t push more flow through an edge than its capacity establishes.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***容量约束***：通过任何边的流量不能超过其容量。正式地，如果边的容量表示为“**c(u, v)**”，而通过该边的流量为“**f(u, v)**”，那么它必须满足条件**0
    ≤ f(u, v) ≤ c(u, v)**，适用于网络中的所有边**(u, v)**。简单来说，我们不能通过一条边推动超过其容量所设定的流量。'
- en: '***Flow Conservation***: At every node *(excluding the source and sink nodes)*,
    the total flow entering the node must be equal to the total output flow.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***流量守恒***：在每个节点*（不包括源节点和汇节点）*，进入节点的总流量必须等于流出的总流量。'
- en: '![](../Images/953fa696c6a4fee10ad9339b38aa5aec.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/953fa696c6a4fee10ad9339b38aa5aec.png)'
- en: '*Image by author*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者图片*'
- en: 'This ensures that the flow continues without interruption and does not accumulate
    or dissipate within the network, despite you can allow flow accumulation if your
    system requires it. Mathematically, for every node “***u***” and its neighboring
    nodes represented and clustered by the supernodes “***v*** and ***w***,” the flow
    conservation property is expressed as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了流量持续流动，不会在网络内积累或消散，尽管你可以在系统需要时允许流量积累。在数学上，对于每个节点“***u***”及其邻接节点，由超节点“***v***
    和 ***w***”表示和聚类，流量守恒属性表示为：
- en: '![](../Images/7c37a1a07f0697bf0d4c743309ddf50e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c37a1a07f0697bf0d4c743309ddf50e.png)'
- en: '*Flow Conservation property (Image by author)*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*流量守恒属性（作者图片）*'
- en: Lastly, note that the flows can cancel each other, since if flows ***f1(u,v)***
    and ***f2(v,u)*** coexist between 2 nodes ***u*** and ***v***, then decreasing
    ***f1(u,v)*** is equivalent to increasing ***f2(v,u)***, as they have opposite
    directions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意流量可以相互抵消，因为如果流量***f1(u,v)*** 和 ***f2(v,u)*** 在两个节点***u***和***v***之间共存，那么减少***f1(u,v)***
    相当于增加***f2(v,u)***，因为它们具有相反的方向。
- en: Residual Networks and Augmenting Paths
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 剩余网络和增广路径
- en: Here we will introduce two new and more sophisticated concepts that will be
    highly helpful in finding maximum flows by using the previously mentioned algorithms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将引入两个新的、更复杂的概念，这些概念在使用之前提到的算法找到最大流量时将非常有帮助。
- en: 'The first of these is the difference between an edge’s capacity and its flow
    at a given time, called residual capacity and denoted as:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些中的第一个是边的容量和在给定时间的流量之间的差异，称为剩余容量，并表示为：
- en: '![](../Images/d268b4d2c0150c7c6a2ec7db25ea7bd9.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d268b4d2c0150c7c6a2ec7db25ea7bd9.png)'
- en: '*Image by author*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者图片*'
- en: With that property in mind, we can go ahead and define a particular type of
    flow network referred to as a ***Residual Network***, where the only difference
    with a standard network is the redefined capacity for its edges. A residual network
    counts with the function ***cf*** defined above that maps the set of edges, along
    with their respective capacities and flows, to the corresponding residual capacity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这个属性，我们可以定义一种特殊类型的流网络，称为***剩余网络***，它与标准网络的唯一区别在于其边的重新定义容量。剩余网络具有上述定义的函数***cf***，该函数将边的集合及其相应的容量和流量映射到相应的剩余容量。
- en: '![](../Images/49f482a0bd1472c50496601da010546a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49f482a0bd1472c50496601da010546a.png)'
- en: Flow-Residual network example (*Image by author*)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 流量-剩余网络示例（*作者图片*）
- en: In this example, you have a network populated with a specific flow function
    for all its edges in the upper graph. Hence, the residual network turns out to
    be the one below whose edge labels contain the residual capacity that can be sent
    according to the direction of the corresponding edge and the amount of flow in
    the opposite direction that could be delivered in case of undoing a flow augmentation
    action *(remember the flow cancellation property, which can be useful in situations
    where the network has some symmetry)*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你有一个网络，其中上图中所有边都有特定的流量函数。因此，剩余网络是下图，其边标签包含可以根据相应边的方向发送的剩余容量，以及在撤销流量增广操作时可以交付的反向流量的数量（*记住流量抵消属性，这在网络具有某些对称性时可能有用*）。
- en: Here the flow achieved through the network can be computed with the source or
    sink formulas as seen before, which in this case is 7 units of flow distributed
    in ***4+3*** outgoing units from ***S*** or equally ***4+1+2*** incoming units
    in ***T***. However, if we consider the ***(v5, v1)*** edge in the reverse direction
    *(or bidirectional),* there is the possibility of sending 2 more flow units along
    the path ***S-V1-V5-V4-V3-T***, which would increase the total amount of flow
    and become the largest available for the given network. Subsequently, after having
    derived the residual networks, there is the possibility that in one or more paths
    that connect the source with the sink, all the edges have a residual capacity
    greater than 0\. In other words, there are paths in which we could transport flow
    from a source to a sink, in the case that there are several sources or sinks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过网络实现的流量可以用之前看到的源或汇公式计算，在这种情况下，是***4+3***个单位从***S***发出，或***4+1+2***个单位到达***T***。然而，如果我们考虑边*(v5,
    v1)*的反向方向*(或双向)*，有可能沿着路径***S-V1-V5-V4-V3-T***发送2个更多的流量单位，这将增加总流量，并成为给定网络中最大的可用流量。随后，在得出残余网络后，可能在一个或多个连接源与汇的路径中，所有边的残余容量都大于0。换句话说，有路径可以从源传输流量到汇，在有多个源或汇的情况下。
- en: '![](../Images/0bcbc127e34d4c142b758affc23cd78a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0bcbc127e34d4c142b758affc23cd78a.png)'
- en: Augmenting path illustration (*Image by author*)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 增广路径示意图 (*作者提供的图片*)
- en: Within this context, such paths underlie the algorithms used to solve flow maximization
    or cost minimization issues and are named ***Augmenting Paths***. To understand
    why, in the above network, we can see how the established flow leads to the existence
    of an augmenting path whereby 2 units of flow can be transported from ***S***
    to ***T***. Consequently, the actual flow function over the network does not provide
    the maximum transportable flow through it, which is one of the problems faced
    by the Maxflow Mincut theorem that we will discuss later.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个背景下，这些路径是解决流量最大化或成本最小化问题的算法的基础，被称为***增广路径***。要理解为什么，在上面的网络中，我们可以看到建立的流量导致了一个增广路径的存在，其中2个单位的流量可以从***S***传输到***T***。因此，网络上的实际流量函数并未提供通过它的最大可运输流量，这也是我们稍后将讨论的最大流最小割定理面临的问题之一。
- en: '![](../Images/e83a7653cb35e9193d4dd221cf2ccd5f.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e83a7653cb35e9193d4dd221cf2ccd5f.png)'
- en: '*Image by author*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图片*'
- en: As a result, if we increase the flow through the displayed path, we will be
    able to ensure that the resulting flow is maximal with a value of 9 units since
    there won’t be any other path to increase the network flow. Finally, prior to
    introducing the theorem, it is important to bear in mind that to find the maximum
    flow of a network, algorithms such as the ***Ford-Fulkerson*** one use an intuitive
    procedure [***(greedy)***](https://en.wikipedia.org/wiki/Greedy_algorithm) that
    starts from a residual network with no flow at all and proceeds to find augmenting
    paths *(with the help of residual edges or opposite direction flows)* while increasing
    the flow as determined by these paths. Thus, once there are no more paths to be
    discovered that increase the flow, it can be assured that the flow reached is
    the maximum, i.e., that there is no faster way to move resources from ***S***
    to ***T*** due to a lack of capacity on some edges or even a lack of edges in
    the network.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们增加通过显示路径的流量，我们将能够确保最终的流量达到最大值9个单位，因为不会有其他路径来增加网络流量。最后，在引入定理之前，重要的是要记住，要找到网络的最大流量，诸如***Ford-Fulkerson***这样的算法使用一种直观的过程，[***贪心算法***](https://en.wikipedia.org/wiki/Greedy_algorithm)从一个完全没有流量的残余网络开始，并通过这些路径来增加流量，*(通过残余边或相反方向的流量的帮助)*。因此，一旦没有更多的路径可以发现来增加流量，就可以确保流量达到了最大值，即由于一些边的容量不足或网络中甚至没有边，从***S***到***T***没有更快的方法来移动资源。
- en: Another way to think of this procedure is to consider the amount of flow added
    per iteration. For an arbitrary augmenting path, the highest amount you can add
    is given by the edge with the least residual capacity since it comprises a bottleneck
    for the flow out of ***S***. Due to its ability to limit all the potential flow
    along an augmenting path, such a ***Bottleneck Edge*** is key in situations where
    we need to maximize flow.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考这种过程的方法是考虑每次迭代中增加的流量。对于任意的增广路径，你可以增加的最大流量由最小剩余容量的边决定，因为它构成了从***S***流出的瓶颈。由于它能够限制沿增广路径的所有潜在流量，这种***瓶颈边***在需要最大化流量的情况下至关重要。
- en: '![](../Images/37967197cdba6318b6a345d640b54f27.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/37967197cdba6318b6a345d640b54f27.png)'
- en: Bottleneck edge (*Image by author*)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 瓶颈边 (*作者图片*)
- en: For instance, considering the upper simple flow network *(residual)* with only
    one augmenting path available, we can clearly identify the bottleneck component
    of the edge ***(v2, v3),*** which sets the maximum flow of the whole path *(and
    in this case the network)* to 3\. After increasing the flow by 3 units as the
    path suggests, there is no augmenting path to increase the flow further, so the
    maximum flow is concluded to be reached. However, another way to ensure the validation
    of the resulting flow is to focus on the bottlenecks within the network; if every
    path between S and T has a null bottleneck value, i.e., its maximum residual capacity
    equal to 0, which is equivalent to the non-existence of augmenting paths, no more
    flow can be added and the current will be considered as maximum as seen above.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑上面简单的流网络*(剩余的)*，只有一条增广路径可用，我们可以清楚地识别出边***(v2, v3),*** 的瓶颈组件，它将整个路径*(以及在这个情况下的网络)*的最大流量设置为3。按照路径的建议将流量增加3个单位后，没有增广路径可以进一步增加流量，因此最大流量被认为已达到。然而，验证结果流量的另一种方法是关注网络中的瓶颈；如果每条S和T之间的路径都有一个为零的瓶颈值，即其最大剩余容量为0，这等同于没有增广路径，则不能再添加更多流量，当前流量将被认为是最大流量。
- en: To settle the question regarding bottlenecks; we should highlight that maximum
    flow can also be expressed as the sum of all the augmenting path’s bottlenecks
    used to find the maximum flow via Ford-Fulkerson-like algorithms since each path
    adds as much flow as determined by its corresponding bottleneck.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决瓶颈问题；我们应该强调，最大流量也可以表示为所有增广路径瓶颈的总和，这些瓶颈用于通过类似于Ford-Fulkerson的算法找到最大流量，因为每条路径的流量增加量由其对应的瓶颈决定。
- en: Flow Network Cuts
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流网络切割
- en: The last part we will cover concerning the basis of flow networks will be ***Cuts***,
    a fundamental component of the Maxflow Mincut theorem, and a key concept in understanding
    the previous sections due to e.g. the link between bottlenecks and partitions
    of a flow network.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的流网络基础的最后一部分是***切割***，它是最大流最小割定理的一个基本组成部分，并且是理解前面章节的一个关键概念，比如瓶颈与流网络分区之间的关系。
- en: First of all, let’s start with its definition; a cut is a partition of the network
    nodes where the source node S is in a set ***A*** and the sink T is in another
    set ***B*** disjoint to the previous one.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从它的定义开始；一个切割是将网络节点分成两个集合，其中源节点S在集合***A***中，汇节点T在另一个与之不相交的集合***B***中。
- en: '![](../Images/655a9f63d9fbe851832e145fe7a470b9.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/655a9f63d9fbe851832e145fe7a470b9.png)'
- en: '*Image by author*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者图片*'
- en: Neither ***A*** nor ***B*** sets can be empty, as they must contain the source(s)
    and sink(s), respectively. Therefore, if the network is connected, there will
    be edges that perform the connection functionality between the nodes of A and
    B bidirectionally. Also, these edges are contained in another set named ***cut-set***,
    although only those whose origin is a node in A and ends in B are taken into account,
    i.e. edges able to transport flow in the correct direction.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 集合***A***和***B***都不能是空的，因为它们必须分别包含源节点和汇节点。因此，如果网络是连通的，则会有边在A和B之间双向连接这些节点。此外，这些边包含在另一个名为***切割集***的集合中，但只有那些起点在A中的节点并且终点在B中的边被考虑，即能在正确方向上运输流量的边。
- en: '![](../Images/886b824790fc7497807023f1bc3c5632.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/886b824790fc7497807023f1bc3c5632.png)'
- en: '*Image by author*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者图片*'
- en: As an example, above you can see the simplest cut we can apply to the graph,
    resulting in a partition of the vertex set V as the union of the sets ***A={S}***
    and ***B={V1,V2,V3,V4,V5,T}***. As the unique network source remains isolated
    in a set, we can understand more precisely the concept of a cut and its subsequent
    properties. Typically, the cut is represented as a line that seeks to enclose
    one of the two sets A or B, indistinctly. Furthermore, the dividing boundary crosses
    multiple edges that are part of the ***cut-set,*** in both directions. These edges
    are used to determine the flow and capacity of the cut, which are essential components
    when establishing a relationship between a network’s arbitrary cut and flow. This
    is crucial in proving the theorem presented in this article.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，上面可以看到我们可以应用于图的最简单的切割， resulting in a partition of the vertex set V as the
    union of the sets ***A={S}*** and ***B={V1,V2,V3,V4,V5,T}***。由于唯一的网络源保持在一个集合中隔离，我们可以更准确地理解切割的概念及其后续属性。通常，切割被表示为一条线，旨在包围两个集合中的一个A或B，不分区别。此外，分界线穿越了多个属于***cut-set***的边，这些边用于确定切割的流量和容量，它们在建立网络的任意切割和流量之间的关系时是至关重要的。这对于证明本文中提出的定理至关重要。
- en: On the one hand, the flow through any given cut is defined as the sum of all
    the edges carrying flow in the direction A-B, minus the flow of the edges going
    in the opposite direction from set B to A.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，通过任何给定切割的流量定义为所有承载A到B方向的流量的边的总和，减去从B到A方向的边的流量。
- en: '![](../Images/b00cd3765b71e16630bf79e8bfc607e7.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b00cd3765b71e16630bf79e8bfc607e7.png)'
- en: '*Image by author*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: However, the flow does not offer significant value in this context, as it is
    limited by the capacity of the cut. For this reason, we can also define the capacity
    of a cut in a similar way as for the flow, with the difference here that only
    the first term of the above formula is taken into account, i.e., the capacity
    of the edges that are capable of carrying the flow from S to T, without having
    to subtract any other edge value.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，流量在这种情况下并没有显著的价值，因为它受到切割容量的限制。因此，我们也可以以类似的方式定义切割的容量，区别在于这里只考虑上述公式的第一项，即能从S到T传递流量的边的容量，而不需要减去其他边的值。
- en: '![](../Images/d25ed2be03767a235e293202cc6b28c8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d25ed2be03767a235e293202cc6b28c8.png)'
- en: '*Image by author*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: Once we have formally presented the concept of flow and capacity in cuts, it
    becomes necessary to consider some examples for simplifying these ideas as much
    as possible and to understand their rationale in this area.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们正式介绍了流量和切割容量的概念，就有必要考虑一些示例，以尽可能简化这些概念并理解它们在这一领域的原理。
- en: '![](../Images/b5d40fb9353fa9bab7b35f919d7d4eb1.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b5d40fb9353fa9bab7b35f919d7d4eb1.png)'
- en: '*Image by author*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: First, let’s examine each set’s vertices, leaving ***A={S,V5,V4}*** and ***B={V1,V2,V3,T}***.
    Since the network has already been assigned a flow, then the cut flow won’t be
    zero and will be determined by the sum of the flows on the edges connecting set
    A to B.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们检查每个集合的顶点，留下***A={S,V5,V4}***和***B={V1,V2,V3,T}***。由于网络已经分配了流量，因此切割流量不会为零，将由连接集合A到B的边上的流量总和决定。
- en: '![](../Images/2ccc66073fcc70ac2a0695cb6c5f3938.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ccc66073fcc70ac2a0695cb6c5f3938.png)'
- en: '*Image by author*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: Additionally, its capacity is obtained from the same previous edges and their
    respective capacities, constituting the maximum flow that could transit the cut.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它的容量来自相同的边及其各自的容量，构成了可能通过切割的最大流量。
- en: '![](../Images/d5218cf39a6649cbb444a3a9119b51f1.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5218cf39a6649cbb444a3a9119b51f1.png)'
- en: '*Image by author*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: '![](../Images/616333a9f402b10e6a6ffb7ec21247a2.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/616333a9f402b10e6a6ffb7ec21247a2.png)'
- en: '**(A={S,V2}, B={V1,V5,V3,V4,T})** cut (*Image by author*)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**(A={S,V2}, B={V1,V5,V3,V4,T})**切割 (*图片来自作者*)'
- en: In this interesting last sample cut, we can observe how a cut does not have
    to be a split where the vertices of both sets comprise connected components, that
    is, each set can contain any node as long as the basic constraints of a cut are
    met.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个有趣的最后示例切割中，我们可以观察到切割不一定是一个分裂，其中两个集合的顶点组成了连接的组件，也就是说，只要满足切割的基本约束，每个集合可以包含任何节点。
- en: '![](../Images/7066f6d27716f4fd9cd1fd751d8ecfbe.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7066f6d27716f4fd9cd1fd751d8ecfbe.png)'
- en: '*Image by author*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: Also, this example is particularly helpful in understanding the relationship
    between cuts and flow, providing a solid grounding before tackling the theorem.
    First, be aware that according to the cut definition, the resulting network *(after
    the cut)* is disconnected with respect to s-t. That means the capacity of such
    a cut is computed as the sum of all edges leading from the source assembly to
    the sink. In the most basic case of isolating the single source of flow, the capacity
    of the cut will exceed or equal the maximum flow of the network. However, in the
    previous examples, it can be appreciated that by inserting more nodes with outgoing
    edges, the capacity of the cut inevitably increases since there are more edges
    than strictly required to reach the maximum flow, i.e., the edges of the source
    are the ones that determine, in the case of bottlenecks, the flow that will subsequently
    go over the network.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个例子特别有助于理解切割与流量之间的关系，为解决定理提供了坚实的基础。首先，请注意根据切割定义，结果网络*(切割后)*在s-t方面是断开的。这意味着这样的切割的容量是从源头汇总到汇点的所有边的总和。在隔离单一流源的最基本情况下，切割的容量将超过或等于网络的最大流量。然而，在之前的示例中，可以看到通过插入更多具有外发边的节点，切割的容量不可避免地增加，因为有更多的边而不是严格所需的以达到最大流量，即源头的边决定了在瓶颈情况下随后的网络流量。
- en: Theorem Statement
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定理陈述
- en: Our primary objective in addressing a flow network optimization challenge is
    to determine the maximum attainable flow that can be conveyed from source to sink.
    This must be accomplished while adhering to the limitations on capacity, flow
    conservation, and ensuring the achieved flow is actually maximum. So, the step
    we will take in addressing the theorem will be to constrain that value with an
    upper bound that can be calculated roughly similar to the flow and thereby confirm
    its correctness.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在解决流网络优化问题时的主要目标是确定从源头到汇点的最大可达流量。这必须在遵守容量限制、流量守恒的前提下完成，并确保达到的流量实际上是最大值。因此，我们在处理定理时的步骤将是用一个可以大致类似于流量的上界来限制该值，从而确认其正确性。
- en: Initially, it should be highlighted that such an upper bound happens to be a
    cut, which fulfills the property of being the one with the least capacity. As
    the main lemma of the theorem, it may not be entirely clear, so let’s introduce
    and prove two simpler ideas;
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需要强调的是，这样的上界实际上是一个切割，满足具有最小容量的特性。作为定理的主要引理，它可能并不完全清楚，所以让我们引入并证明两个更简单的概念；
- en: '![](../Images/98dd7e5406848dd206868bc555e49fab.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98dd7e5406848dd206868bc555e49fab.png)'
- en: '*Image by author*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者图片*'
- en: The first one involves proving the above equality between the flow through any
    given cut and the total network flow, which in turn matches the source-generated
    flow. For this purpose, we can assume the initial proposition as true while applying
    the induction method to the set A of any cut, with A={S} as the base case, and
    then use the previously mentioned principle of flow conservation for nodes different
    from S or T. But since this would be complex to elaborate, we will opt for a simpler,
    although very similar, approach.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个步骤涉及证明任何给定的切割处的流量与整个网络流量之间的上述等式，这反过来又与源生成的流量相匹配。为此，我们可以假设初始命题为真，同时对任何切割的集合A应用归纳法，其中A={S}作为基本情况，然后使用前面提到的流量守恒原则，针对不同于S或T的节点。但由于这会比较复杂，我们将选择一种更简单但非常相似的方法。
- en: Note that the previous flow value along the proof can have any allowed value.
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，在证明过程中，之前的流量值可以是任何允许的值。
- en: 1- ***Flow Definition:*** In the initial step, we start with the total flow
    value for any given flow function ***f*** in a network and one of its possible
    definitions. Here, by having as a reference the source node S, which is the smallest
    possible set A for any network cut, we match the value of the flow to the flow
    generated by S minus the incoming flow into S since sometimes there may be a certain
    amount of flow returning to S.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 1- ***流量定义：*** 在初始步骤中，我们从网络中任何给定流函数***f***的总流量值开始，并定义其可能的定义之一。在这里，以源节点S为参考，即任何网络切割的最小可能集合，我们将流量值与由S生成的流量相匹配，减去流入S的流量，因为有时可能会有一定量的流量返回到S。
- en: '![](../Images/9c360ee046e40bf81d5521840f109a05.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c360ee046e40bf81d5521840f109a05.png)'
- en: '*Image by author*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者图片*'
- en: 2- ***Flow Conservation Property:*** After considering the network flow as the
    total flow generated by the source S, we apply the flow conservation principle
    whereby all nodes except s-t must propagate all the flow they receive, resulting
    in zero flow contributed to ***|f|*** by subtracting the outgoing minus the incoming
    flow. Now, if we take any cut ***(A,B)***, the total flow contributed by the nodes
    ***v*** within set ***A*** except the one that generates the flow ***{S}*** will
    be zero, satisfying the equality we had before.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 2- ***流量守恒属性:*** 在考虑网络流量为源点 S 产生的总流量后，我们应用流量守恒原理，即除了 s-t 外，所有节点必须传播它们接收到的所有流量，从而使流量
    ***|f|*** 通过减去流出流量与流入流量的差值来贡献为零。现在，如果我们考虑任何切割 ***(A,B)***，节点 ***v*** 在集合 ***A***
    中除产生流量的节点 ***{S}*** 外，总流量将为零，满足我们之前的等式。
- en: '![](../Images/ed862f2be9604d74f717b52f38ccff99.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ed862f2be9604d74f717b52f38ccff99.png)'
- en: '*Image by author*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: 3- ***Flow Trough Cut:*** Finally, we arrive at an expression where we add up
    all the outgoing flow from the nodes of A except S in the second term and S’s
    own outgoing flow in the first term, subtracting the corresponding incoming part
    from all the previous nodes. This corresponds to the aforementioned definition
    of cut flow, and therefore we can conclude as a consequence that all the existing
    flow through a network will necessarily match the flow through any given cut.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 3- ***流量通过切割:*** 最后，我们得到一个表达式，其中在第二项中将集合 A 中除 S 外的所有节点的流出流量相加，并将 S 自身的流出流量在第一项中，减去所有之前节点的对应流入部分。这对应于前面提到的切割流量定义，因此我们可以得出结论，网络中的所有现有流量必然与任何给定切割的流量匹配。
- en: '![](../Images/2bfcc2ec987646c0b82dbd8c30f7f7a1.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2bfcc2ec987646c0b82dbd8c30f7f7a1.png)'
- en: '*Image by author*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: The second proposition we will prove concerning the Maxflow Mincut theorem comprises
    an inequality that upper bounds the value of any flow in a network with the capacity
    value for any given cut.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将证明的关于最大流最小割定理的第二个命题包括一个不等式，该不等式为网络中任何流量的值提供了一个上界，限制为任何给定切割的容量值。
- en: '![](../Images/d891da83ca20be98165cdf5ea38e35f7.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d891da83ca20be98165cdf5ea38e35f7.png)'
- en: '*Image by author*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: 1- ***Alternative Flow Definition:*** Using the previous result regarding the
    flow of any cut, we can equal an arbitrary flow ***|f|*** to the flow through
    an arbitrary cut ***(A,B)***.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 1- ***替代流量定义:*** 利用关于任何切割的流量的先前结果，我们可以将任意流量 ***|f|*** 等同于通过任意切割 ***(A,B)***
    的流量。
- en: 2/3- ***Flow Bounding:*** In the second step, we establish an inequality that
    dispenses the second term that models the incoming flow in set ***A***, leaving
    only the outgoing flow of the edges that carry flow from A to B. After removing
    such a term, the result will always be greater than or equal to the previous one
    since if there is no edge that returns flow from B to A, the sum of the remaining
    edges flow from A to B will not decrease.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2/3- ***流量边界:*** 在第二步中，我们建立了一个不包含模拟集合 ***A*** 中流入流量的第二项的不等式，只保留从 A 到 B 的边的流出流量。移除这样的项后，结果将始终大于或等于之前的结果，因为如果没有边从
    B 返回到 A，则剩余边从 A 到 B 的流量总和不会减少。
- en: Then, we can simply augment the value of the inequality by setting the flow
    of outgoing edges from A to be less than or equal to the capacity of those edges.
    The validity of this inequality is given by the capacity constraint appearing
    on all network edges.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过设置从 A 流出的边的流量小于或等于这些边的容量来简单地增加不等式的值。这一不等式的有效性由所有网络边上出现的容量约束所给出。
- en: 4- [***Weak Duality***](https://en.wikipedia.org/wiki/Weak_duality)***:*** After
    matching the capacity sum of all the outgoing edges of set A with the cut capacity
    due to its definition, it can be concluded that for any given flow and cut in
    a network, the flow will always be smaller or equal to the cut capacity, which
    turns out to be the starting point of the theorem we are about to prove. Also,
    if we try to maximize the flow, we will reach a point that can be met by minimizing
    a cut capacity, establishing a weakly dual relationship where there is no certainty
    that a minimum capacity cut equal to a maximum flow will always exist.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 4- [***弱对偶性***](https://en.wikipedia.org/wiki/Weak_duality)***:*** 在将集合 A 的所有流出边的容量总和与由于其定义的切割容量匹配后，可以得出结论，对于网络中的任何给定流量和切割，流量将始终小于或等于切割容量，这也成为我们即将证明的定理的起点。此外，如果我们试图最大化流量，我们将达到一个点，这可以通过最小化切割容量来满足，建立了一种弱对偶关系，其中没有确定性保证最小容量切割总是等于最大流量。
- en: At this point, after having reached the weak duality prior to the Maxflow Mincut
    theorem, we can deliver a statement that is easier to comprehend and verify.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，在达成最大流最小割定理之前的弱对偶性之后，我们可以提供一个更易于理解和验证的声明。
- en: '![](../Images/c5f8dfe3621abc4e7d74f4443b996a72.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5f8dfe3621abc4e7d74f4443b996a72.png)'
- en: '*Image by author*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者提供的图像*'
- en: As already mentioned, the theorem holds via [***Strong Duality***](https://en.wikipedia.org/wiki/Strong_duality)that
    the maximum flow in any network matches the least-capacity cut attainable. In
    contrast to the former weakly dual result, this theorem ensures that the flow
    **maximization** dual is exactly equal to the **minimization** of any cut capacity,
    removing the possibility of having a difference between the two results and granting
    a strongly dual condition on the lemma.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，该定理通过 [***强对偶性***](https://en.wikipedia.org/wiki/Strong_duality) 得以成立，即任何网络中的最大流量与可达的最小容量割匹配。与前述的弱对偶结果不同，该定理确保流量的
    **最大化** 对偶与任何割容量的 **最小化** 完全相等，消除了两者结果之间存在差异的可能性，并且在引理上提供了强对偶条件。
- en: '![](../Images/a1eac14ab35c4720e06833d44f1e9a79.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1eac14ab35c4720e06833d44f1e9a79.png)'
- en: '**(A={S,V1}, B={V2,V5,V3,V4,T})** cut (*Image by author*)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**(A={S,V1}, B={V2,V5,V3,V4,T})** 割 (*作者提供的图像*)'
- en: 'Before proceeding with its demonstration, we should highlight a use case for
    the theorem. Here, the maximum flow has a value of 7, which equals the sum of
    each outgoing cut edge’s capacity. Note that these edges carry flow at their maximum
    capacity, which, in a minimum capacity cut such as the one shown, causes these
    edges to be bottlenecks, i.e., the cut-set itself acts as a bottleneck of the
    global network flow. To condense the explanation of this idea, you will find below
    a resource to help you understand it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行演示之前，我们应该强调定理的一个使用案例。在这里，最大流的值为 7，等于每个外流割边的容量之和。请注意，这些边承载了最大容量的流量，在像所示的最小容量割中，这些边成为瓶颈，即割集本身作为全球网络流的瓶颈。为了简化对这个想法的解释，您可以在下面找到一个资源以帮助您理解：
- en: '[](https://math.stackexchange.com/questions/161837/whats-an-intuitive-explanation-of-the-max-flow-min-cut-theorem?source=post_page-----e2402ce935c7--------------------------------)
    [## What''s an intuitive explanation of the max-flow min-cut theorem?'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 什么是最大流最小割定理的直观解释？](https://math.stackexchange.com/questions/161837/whats-an-intuitive-explanation-of-the-max-flow-min-cut-theorem?source=post_page-----e2402ce935c7--------------------------------)'
- en: I'm about to read the proof of the max-flow min-cut theorem that helps solve
    the maximum network flow problem. Could…
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我即将阅读最大流最小割定理的证明，该定理有助于解决最大网络流问题。可以…
- en: math.stackexchange.com](https://math.stackexchange.com/questions/161837/whats-an-intuitive-explanation-of-the-max-flow-min-cut-theorem?source=post_page-----e2402ce935c7--------------------------------)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[math.stackexchange.com](https://math.stackexchange.com/questions/161837/whats-an-intuitive-explanation-of-the-max-flow-min-cut-theorem?source=post_page-----e2402ce935c7--------------------------------)'
- en: Proof
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证明
- en: If we want to prove that the maximum network flow equals, in all cases, the
    minimum capacity cut-off in a network, we will use 3 propositions that must be
    equivalent for the theorem to be true.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想证明最大网络流在所有情况下等于网络中的最小容量割，我们将使用 3 个必须等价的命题，以确保定理的正确性。
- en: There exists a cut ***(A, B)*** that satisfies ***|f|= cap(A, B)***.
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 存在一个割 ***(A, B)*** 满足 ***|f|= cap(A, B)***。
- en: ''
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Flow value ***|f|*** is maximum.
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 流量值 ***|f|*** 是最大值。
- en: ''
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is no augmenting path in the flow network.
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 流网络中不存在增广路径。
- en: In order to show that all statements are equivalent, we will demonstrate the
    logical implications 1⇒2⇒3⇒1\. Meaning that we can infer any statement from any
    other statement. In the case of 1⇒2, it can be easily verified using the weak
    duality shown earlier. Then, considering that any flow is smaller than the cut
    with the least capacity, if we assume that there exists a flow equal to the capacity
    of an arbitrary cut (1), the weak duality tells us that this capacity is the upper
    bound for any given flow and therefore the resulting flow, coincident with that
    bound, is maximal (2).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示所有陈述是等价的，我们将演示逻辑推导 1⇒2⇒3⇒1。意思是我们可以从任何陈述推导出其他任何陈述。在 1⇒2 的情况下，可以使用之前展示的弱对偶性轻松验证。然后，考虑到任何流量都小于最小容量割，如果我们假设存在一个等于任意割容量的流（1），弱对偶性告诉我们，这个容量是任何给定流量的上界，因此结果流量与该上界相符，是最大流量（2）。
- en: Proceeding with 2⇒3, the simplest way to verify it is to take the contrapositive
    ¬3⇒¬2\. Then, it suffices to take an arbitrary flow |f| as an example, in case
    there was an augmenting path s-t ¬(3) that could transport flow, |f| could be
    increased across the corresponding path, which implies that |f| was not originally
    the maximum flow ¬(2).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 进行 2⇒3 的验证，最简单的方法是取对立命题 ¬3⇒¬2。然后，举例一个任意流 |f|，如果存在一个可以输送流量的增广路径 s-t ¬(3)，则可以通过相应路径增加
    |f|，这意味着 |f| 原本不是最大流量 ¬(2)。
- en: Finally, the most challenging step in this demonstration is 3⇒1\. First, we
    start by assuming a flow |f| in which the network has no augmenting paths. Furthermore,
    we define a set ***A*** containing all vertices reachable from ***S*** in the
    residual network. That is, ***A*** contains all vertices to which there exists
    a path from ***S*** in the residual network, and at the same time, all residual
    edges of that path are non-zero. Through these definitions, we can be certain
    that ***S*** is in ***A*** since it is self-reachable, and since there are no
    augmenting paths, ***T*** is not reachable in the residual network from ***S***,
    so we know that at least one node *(T)* is not in the set ***A***. Then, if we
    insert ***T*** into a different set ***B***, then we have that the pair ***(A,
    B)*** satisfies all the criteria to be a valid cut in the network.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最具挑战性的步骤是 3⇒1。首先，我们假设网络中没有增广路径的流 |f|。此外，我们定义一个集合 ***A***，包含在残余网络中从 ***S*** 可达的所有顶点。也就是说，***A***
    包含所有在残余网络中存在从 ***S*** 到达路径的顶点，同时该路径的所有残余边都不为零。通过这些定义，我们可以确定 ***S*** 在 ***A***
    中，因为它是自我可达的，而由于没有增广路径，***T*** 在残余网络中从 ***S*** 无法到达，因此我们知道至少有一个节点 *(T)* 不在集合 ***A***
    中。然后，如果我们将 ***T*** 插入到一个不同的集合 ***B*** 中，那么 ***(A, B)*** 这一对满足作为网络中有效割集的所有标准。
- en: '![](../Images/ce37e757d9e6cfc5c5a335f07f3404d6.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce37e757d9e6cfc5c5a335f07f3404d6.png)'
- en: Sample **(A={S,V1,V4}, B={T,V2,V3})** cut (*Image by author*)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 **(A={S,V1,V4}, B={T,V2,V3})** 割 (*图片由作者提供*)
- en: At this point, we must realize two things about the cut ***(A, B)***. On the
    one hand, the flow through the cut in the ***S-T*** direction must be equal to
    its capacity. Because by the previous definitions and assumptions (3), the only
    possibility that they were not equal lies in the reachability of the nodes of
    ***B***, so if any of them were reachable from ***S*** in the residual network,
    causing the flow on the cut edge not to reach its full capacity, the node would
    have to be inside ***A*** instead of ***B***, which is a contradiction. On the
    other hand, the flow in the other direction of the cut turns out to be zero owing
    to the same reason as before, i.e., if it were not zero, there would be an edge
    in the residual network in the direction ***A-B*** *(residual edge flow represented
    with negative sign)* that would reach the node at ***B*** and cause the contradiction.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们必须意识到关于割 ***(A, B)*** 的两件事。一方面，***S-T*** 方向上的割流必须等于其容量。因为根据之前的定义和假设（3），它们不相等的唯一可能性在于
    ***B*** 的节点的可达性，因此如果它们中的任何一个从 ***S*** 在残余网络中可达，导致割边的流量未达到其最大容量，则该节点必须在 ***A***
    中而不是 ***B*** 中，这就产生了矛盾。另一方面，割的另一个方向的流量因同样的原因为零，即如果它不是零，那么在残余网络中就会有一条 ***A-B***
    方向的边 *(残余边流量以负号表示)* 到达 ***B*** 节点，造成矛盾。
- en: '![](../Images/c1e7585971f5fff9d7574c76b7f48a6c.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1e7585971f5fff9d7574c76b7f48a6c.png)'
- en: '*Image by author*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片由作者提供*'
- en: Lastly, the only thing left to do is to match the network flow to the cut flow,
    which was demonstrated previously, remove the term of the flow into the cut since
    its null, and use the cut capacity definition to conclude that the flow ***|f|***
    equals the resulting cut capacity (3⇒1).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，剩下的唯一任务是将网络流与之前演示的割流匹配，去掉流量中的割流项（因为它为零），并使用割容量定义来得出流 ***|f|*** 等于得到的割容量（3⇒1）。
- en: Applications
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用
- en: The Maxflow Mincut Theorem has numerous applications in various fields. However,
    to keep it short, we will simply mention some essential aspects of the use cases,
    along with more detailed resources to help you understand them correctly.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最大流最小割定理在各个领域有着广泛的应用。然而，为了简洁起见，我们将简要提及一些关键方面，并提供更多详细资源，以帮助你正确理解这些应用。
- en: Ford-Fulkerson/Edmonds–Karp Algorithms
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ford-Fulkerson/Edmonds–Karp 算法
- en: As a first consequence, the findings and results provided by the theorem, in
    conjunction with other ones such as the integrality theorem, lead to and support
    the correctness proof of a series of algorithms oriented to calculating maximum
    flow.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一个后果，定理提供的发现和结果，加上其他定理如整性定理，导出了并支持了一系列旨在计算最大流的算法的正确性证明。
- en: The most significant of these, and the one we’ve already talked about, is [***Ford
    Fulkerson’s***](https://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm)
    algorithm, a greedy approach that increases the flow by seeking s-t augmenting
    paths. However, the most basic version of the algorithm has no guarantee to terminate
    or converge to the maximum flow in certain situations with very specific inputs
    *(such as working with real or irrational numbers and their representation)* due
    to the way it chooses augmenting paths. This also influences its time complexity,
    which is ***O(|E| |f|)***, meaning that in the worst case, the algorithm needs
    to traverse all edges of the network for each *(at least one)* unit of flow contained
    in the maximum to be reached.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最重要的，也是我们已经讨论过的，是[***Ford Fulkerson’s***](https://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm)算法，这是一种贪婪方法，通过寻找s-t增广路径来增加流量。然而，算法的最基本版本在某些特定输入下（*例如处理实际或无理数及其表示*）没有终止或收敛到最大流的保证，这影响了它的时间复杂度，时间复杂度为***O(|E|
    |f|)***，这意味着在最坏的情况下，算法需要遍历网络中所有边缘，以达到最大流中的每个*(至少一个)*流量单位。
- en: Then, with the aim of improving the previous version, which was the first one
    created to solve problems of this kind, the way of calculating augmenting paths
    was improved. In such a way that, while the ***Ford-Fulkerson*** version used
    depth-first search (DFS), which computes random paths to T, the improved ***Edmonds-Karp***
    variant is implemented using the breadth-first search (BFS) algorithm to find
    augmenting paths. So, with the aim of choosing at each iteration the augmenting
    path with the fewest possible edges, the algorithm has a termination guarantee
    with respect to the previous one, in addition to a change in the time complexity
    in the order of ***O(V E²).***
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了改进之前的版本，即最早创建的解决此类问题的版本，改进了计算增广路径的方法。这样，虽然***Ford-Fulkerson***版本使用深度优先搜索（DFS），计算随机路径到T，而改进后的***Edmonds-Karp***变体使用广度优先搜索（BFS）算法来找到增广路径。因此，旨在每次迭代中选择边数最少的增广路径，这个算法相较于之前的版本具有终止保证，并且时间复杂度改变为***O(V
    E²)***。
- en: Nevertheless, with these and similar algorithms, it is possible to compute not
    only the maximum flow in a network but also the minimum cut whose capacity equals
    its value. The procedure is quite simple; after calculating the maximum flow in
    all the edges of a network, according to the Maxflow Mincut theorem, the nodes
    accessible from S in the corresponding remaining residual network form the set
    A of the cut we are looking for, being the remaining nodes in B and leading to
    the resulting minimum capacity cut ***(A, B)***.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用这些及类似的算法，不仅可以计算网络中的最大流，还可以计算其容量等于值的最小割。过程非常简单；在计算网络中所有边的最大流之后，根据最大流最小割定理，从S出发可以访问的节点在相应的剩余网络中形成我们寻找的割的集合A，剩余的节点形成B，从而得到结果最小容量割***(A,
    B)***。
- en: Finally, it should be noted that the field of study of maximum flow algorithms
    is much larger than what is shown here. Therefore, if you wish to continue learning,
    [***here***](https://youtube.com/playlist?list=PLDV1Zeh2NRsDj3NzHbbFIC58etjZhiGcG)
    you have a resource that addresses these algorithms, as well as their implementations,
    in more detail.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要指出的是，最大流算法的研究领域远大于此处所展示的内容。因此，如果你希望继续学习，[***这里***](https://youtube.com/playlist?list=PLDV1Zeh2NRsDj3NzHbbFIC58etjZhiGcG)有一个资源详细介绍了这些算法及其实现。
- en: Practical Use Cases
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实际应用案例
- en: Nearly all the systems we interact with in our lives have some potential to
    be modeled *(at least in part)* by flow networks, which turns them into a crucial
    tool for addressing complex scalability problems. Likewise, as the possibilities
    are broad, only some of them will be mentioned here that provide a direct relationship
    with the fundamental concepts.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活中几乎所有的系统都有可能被建模为流网络（*至少部分*），这使它们成为解决复杂可扩展性问题的重要工具。由于可能性很广，这里仅提及一些与基本概念直接相关的应用。
- en: Initially, all the transportation systems, ranging from road networks and public
    transit systems to airline routing and cargo distribution, can be represented
    as flow networks. As a result, we can analyze traffic patterns, optimize routes,
    and enhance overall efficiency. This is particularly crucial in urban planning,
    where managing the flow of people, vehicles, and goods is essential to prevent
    congestion and ensure smooth operations. Moreover, not all of these use cases
    are entirely beneficial; for instance, flow networks can also model a country’s
    railway system, which may be targeted, in case of military conflict, for attacks
    that should be as strategically optimal as possible. You can learn more about
    this specific application in [***this***](https://youtu.be/8QO487YsLPc)resource.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，所有的交通系统，从道路网络和公共交通系统到航空路线和货物分配，都可以表示为流网络。因此，我们可以分析交通模式、优化路线，并提高整体效率。这在城市规划中尤为重要，因为管理人员、车辆和货物的流动对于防止拥堵和确保顺畅运营至关重要。此外，并非所有这些用例都是完全有益的；例如，流网络也可以模拟一个国家的铁路系统，在军事冲突中可能成为攻击的目标，这些攻击应尽可能具备战略最优化。你可以在[***这个***](https://youtu.be/8QO487YsLPc)资源中了解更多关于这一特定应用的信息。
- en: Despite other transcendental implementations in telecommunications, energy distribution,
    or even healthcare, we will focus on one more closely associated with computer
    science, specifically with the field of computer vision, which has achieved significant
    breakthroughs. In image processing, the main deployment of flow networks relies
    on [***Image Segmentation***](https://www.researchgate.net/figure/Using-the-max-flow-min-cut-approach-for-image-segmentation-a-Define-set-of-pixels-in_fig5_292335453)
    algorithms, responsible for dividing an image into segments or regions that correspond
    to objects, subjects, or distinct areas necessary to spot, which maybe can’t be
    distinguished by the human eye. In this context, flow networks bring their prowess
    by modeling the relationships between pixels as a network, where the edges represent
    the flow of likelihood values for similarity/dissimilarity between neighboring
    pixels. Furthermore, it is also worth mentioning the applications in comparable
    scopes, such as [***Machine Learning models***](https://en.wikipedia.org/wiki/Flow-based_generative_model),
    in which the flow concept is used to optimize specific learning, generative, or
    classification tasks.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在电信、能源分配甚至医疗保健中有其他超越的实现，我们将重点关注一个与计算机科学更密切相关的领域，特别是计算机视觉，该领域已取得了显著突破。在图像处理领域，流网络的主要应用依赖于[***图像分割***](https://www.researchgate.net/figure/Using-the-max-flow-min-cut-approach-for-image-segmentation-a-Define-set-of-pixels-in_fig5_292335453)算法，该算法负责将图像划分为对应于对象、主题或特定区域的区域，这些区域可能无法通过肉眼区分。在这种情况下，流网络通过将像素之间的关系建模为网络而展示其优势，其中边表示邻近像素之间相似性/差异性的可能值流动。此外，还值得提及在类似范围内的应用，如[***机器学习模型***](https://en.wikipedia.org/wiki/Flow-based_generative_model)，其中流的概念用于优化特定的学习、生成或分类任务。
- en: Conclusion
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'This article has covered a minor fraction of the mathematical domain of flow
    networks, as well as proving and simplifying one of its fundamental theorems.
    However, since it is a subject with a vast number of applications, particularly
    in the world’s system of consumption, transportation, and population management,
    it is useful to continue enlarging the theory and deepening the knowledge about
    these applications. For this purpose, the most efficient resources for observing
    more advanced formalizations of the theorem, as well as understanding step-by-step
    the algorithms mentioned in this article and learning new concepts about certain
    applications of flow networks, are the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本文涵盖了流网络数学领域的一小部分，并证明和简化了其中一个基本定理。然而，由于这是一个具有广泛应用的主题，特别是在世界消费、交通和人口管理系统中，因此继续扩展理论并深入了解这些应用是有益的。为此，观察定理更高级形式化以及逐步理解本文提到的算法和学习有关流网络某些应用的新概念的最有效资源是以下内容：
- en: '[https://www.cs.upc.edu/~mjserna/docencia/grauA/P20/MaxFlow-fib.pdf](https://www.cs.upc.edu/~mjserna/docencia/grauA/P20/MaxFlow-fib.pdf)'
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://www.cs.upc.edu/~mjserna/docencia/grauA/P20/MaxFlow-fib.pdf](https://www.cs.upc.edu/~mjserna/docencia/grauA/P20/MaxFlow-fib.pdf)'
- en: ''
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://ocw.tudelft.nl/wp-content/uploads/Algoritmiek_Introduction_to_Network_Flow.pdf](https://ocw.tudelft.nl/wp-content/uploads/Algoritmiek_Introduction_to_Network_Flow.pdf)'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://ocw.tudelft.nl/wp-content/uploads/Algoritmiek_Introduction_to_Network_Flow.pdf](https://ocw.tudelft.nl/wp-content/uploads/Algoritmiek_Introduction_to_Network_Flow.pdf)'
