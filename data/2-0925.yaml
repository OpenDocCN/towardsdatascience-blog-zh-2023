- en: 'Fourier Transform for Time Series: Fast Convolution Explained with numpy'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列的傅里叶变换：使用numpy解释快速卷积
- en: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99](https://towardsdatascience.com/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99](https://towardsdatascience.com/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99)
- en: Implementation from scratch vs numpy
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从头实现与numpy
- en: '[](https://mocquin.medium.com/?source=post_page-----5a16834a2b99--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----5a16834a2b99--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5a16834a2b99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5a16834a2b99--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----5a16834a2b99--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/?source=post_page-----5a16834a2b99--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----5a16834a2b99--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5a16834a2b99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5a16834a2b99--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----5a16834a2b99--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5a16834a2b99--------------------------------)
    ·7 min read·Jul 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5a16834a2b99--------------------------------)
    ·7分钟阅读·2023年7月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: The Fourier transform algorithm is considered one of the greatest discoveries
    in all of mathematics. French mathematician Jean-Baptiste Joseph Fourier laid
    the foundation for harmonic analysis in his book “Théorie analytique de la chaleur”
    in 1822\. Today, the Fourier transform and all its variants form the basis of
    our modern world, powering technologies like compression, communication, image
    processing.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换算法被认为是所有数学领域的伟大发现之一。法国数学家让-巴蒂斯特·约瑟夫·傅里叶在1822年的著作《热的解析理论》中奠定了谐波分析的基础。今天，傅里叶变换及其所有变种构成了我们现代世界的基础，支持着压缩、通信、图像处理等技术。
- en: '![](../Images/8d84f9551a5a0d7adaec9020d03587d7.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d84f9551a5a0d7adaec9020d03587d7.png)'
- en: 'Engraved portrait of French mathematician Jean Baptiste Joseph Fourier (1768–1830),
    early 19th century. [souce: [wikipedia](https://commons.wikimedia.org/wiki/File:Fourier2.jpg?uselang=fr#Conditions%20d%E2%80%99utilisation),
    image from public domain]'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 法国数学家让·巴蒂斯特·约瑟夫·傅里叶（1768–1830）的雕刻肖像，19世纪早期。[来源：[wikipedia](https://commons.wikimedia.org/wiki/File:Fourier2.jpg?uselang=fr#Conditions%20d%E2%80%99utilisation)，图片来自公有领域]
- en: This wonderful framework also provides great tools for analysing time-series…
    and that’s why we’re here!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个出色的框架还提供了分析时间序列的优秀工具……这就是我们在这里的原因！
- en: This post is part of a series on the Fourier transform. Today we will talk about
    convolution and how the Fourier transform provides the fastest way you can do
    it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是傅里叶变换系列的一部分。今天我们将讨论卷积以及傅里叶变换如何提供最快的实现方法。
- en: '*All figures and equations are made by the author.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图形和方程均由作者制作。*'
- en: '**Definition of the Discrete Fourier Transform (DFT)**'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**离散傅里叶变换（DFT）的定义**'
- en: 'Let’s start with basic definitions. The discrete Fourier transform for a discrete
    time sequence x of N elements is :'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基本定义开始。离散时间序列x的离散傅里叶变换是：
- en: '![](../Images/d691d37a0271bfada3d27899b1892c51.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d691d37a0271bfada3d27899b1892c51.png)'
- en: Discrete Fourier Transform (DFT) definition. Other definitions exist, you just
    need to choose one and stick to it (made by author)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 离散傅里叶变换（DFT）的定义。还有其他定义，你只需选择一种并坚持（由作者提供）
- en: where k denotes the k-th frequency of the spectrum of x. Note that some author
    add a scaling factor of 1/N to that definition, but is not of great importance
    for this post — all in all it is just a matter of definition and sticking it to
    it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其中k表示x的频谱的第k个频率。注意，一些作者在该定义中添加了1/N的缩放因子，但对于这篇文章来说并不重要——总的来说，这只是定义的问题，并且要坚持定义。
- en: 'The inverse Fourier transform is then (given the definition for the forward
    Fourier transform):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后逆傅里叶变换是（给定傅里叶变换的定义）：
- en: '![](../Images/b7a02543e0bdd19964b4faa4f271ec7e.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b7a02543e0bdd19964b4faa4f271ec7e.png)'
- en: Inverse Discrete Fourier Transform, based on the forward definition mentioned
    above (made by author).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 离散傅里叶变换，基于上述正向定义（作者制作）。
- en: That being said, one of the most important theorem on Fourier transform is that
    convolution in one space is equivalent to multiplication in the other. In other
    words, the Fourier transform of a product is the convolution of the respective
    Fourier spectra, and the Fourier transform of a convolution is the product of
    the respective Fourier spectra.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，傅里叶变换中最重要的定理之一是空间中的卷积等同于另一空间中的乘法。换句话说，乘积的傅里叶变换是各自傅里叶谱的卷积，而卷积的傅里叶变换是各自傅里叶谱的乘积。
- en: '![](../Images/98aaadaec03169eaef284e3d902de02c.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98aaadaec03169eaef284e3d902de02c.png)'
- en: Multiplication in the time-domain corresponds to circular convolution in Fourier
    domain (made by author).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 时间域中的乘法对应于傅里叶域中的循环卷积（作者制作）。
- en: and
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '![](../Images/29b7cfbfe9cc23c05dc7836ce1ed02c8.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/29b7cfbfe9cc23c05dc7836ce1ed02c8.png)'
- en: Circular convolution in time domain corresponds to multiplication in Fourier
    domain (made by author).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 时间域的循环卷积对应于傅里叶域的乘法（作者制作）。
- en: where the dot represents the standard product (multiplication) and the circled
    star represents **circular convolution**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其中点表示标准乘法（乘法），而圈中的星号表示**循环卷积**。
- en: '**Two important notes:**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**两个重要的注意事项：**'
- en: '**Periodic signal** : Fourier analysis framework consider that the signals
    we handle are **periodic**. In other words, they repeat from minus infinity to
    infinity. However it is not always practical to handle such signals with a finite
    memory computer, so we only “play” with one period, as we will see hereafter.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**周期信号**：傅里叶分析框架认为我们处理的信号是**周期性**的。换句话说，它们从负无穷到正无穷重复。然而，用有限内存的计算机处理这种信号并不总是实际的，因此我们只“处理”一个周期，正如我们接下来将看到的那样。'
- en: '**Circular convolution** : The convolution theorem states that multiplication
    is equivalent to **circulation** convolution, which is a bit different from **linear
    convolution**, which we are more accustomed to. As we will see, it is not that
    different, and not that complicated either.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环卷积**：卷积定理指出乘法等同于**循环**卷积，这与我们更熟悉的**线性卷积**稍有不同。正如我们将看到的，它并没有那么不同，也不那么复杂。'
- en: '**Circular convolution vs linear convolution**'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**循环卷积与线性卷积**'
- en: If you’re familiar with linear convolution, often simply referred to as ‘convolution’,
    you won’t be confused by circular convolution. Basically, **circular convolution
    is just the way to convolve periodic signals**. As you can guess, linear convolution
    only makes sense for finite length signals, that do not span from minus infinity
    to infinity. In our case, in the context of Fourier analysis, our signals are
    periodic therefore do not satisfy this condition. We can’t talk about (linear)
    convolution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对线性卷积（通常简单称为‘卷积’）比较熟悉，你不会对循环卷积感到困惑。基本上，**循环卷积只是处理周期性信号的一种方式**。正如你可以猜测的，线性卷积仅对有限长度的信号有意义，这些信号从负无穷到正无穷延展。在我们的案例中，在傅里叶分析的背景下，我们的信号是周期性的，因此不满足这个条件。我们不能讨论（线性）卷积。
- en: 'Yet we still can intuit a linear-convolution-like operation on our periodic
    signals : just convolve the periodic signal on a one-period length. That’s what
    circular convolution does : it convolves 2 periodic signals of the same length
    along a one-period span.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们仍然可以直观地感受到周期信号上的线性卷积类似操作：只需在一个周期长度上卷积周期信号。这就是循环卷积的作用：它在一个周期跨度内卷积两个相同长度的周期信号。
- en: 'To further convince yourself of the difference, compare both formulas for discrete
    linear convolution and discrete circular convolution :'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步确认这些差异，请比较离散线性卷积和离散循环卷积的公式：
- en: '![](../Images/eef4868a6d631bff14096fab3c453000.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eef4868a6d631bff14096fab3c453000.png)'
- en: 'Equation for linear convolution : most of the time in signal processing, with
    use this formula, by padding with zeros (made by author).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 线性卷积的公式：在信号处理过程中，大多数时候使用这个公式，通过零填充（作者制作）。
- en: '![](../Images/c2db1f10738a446e67a15811ef9761c9.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c2db1f10738a446e67a15811ef9761c9.png)'
- en: 'Circular convolution : this is the convolution used when dealing with periodic
    signals, as in Fourier analysis (made by author).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 循环卷积：这是在处理周期性信号时使用的卷积，如在傅里叶分析中（作者制作）。
- en: 'Notice the differences :'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意差异：
- en: '- **bounds** : linear convolution uses samples from minus-infinity to plus
    infinity — as stated previously, in this context x and y have finite energy the
    sum makes sense. For the circular convolution, we only need to what happened in
    a period span, so the sum only spans one period'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '- **边界**：线性卷积使用从负无穷到正无穷的样本——如前所述，在这种情况下，x和y具有有限的能量，因此求和是有意义的。对于循环卷积，我们只需要在一个周期范围内发生的情况，因此求和仅跨越一个周期。'
- en: '- **circular indexes** : in the circular convolution, we “wrap” the index of
    y using a modulo operation with a length of N. That’s just a way to ensure that
    y is considered periodic with a period of N : when we want to know the value of
    y at position k, we just use the value of y at position k%N — since y is N periodic,
    we get the right value. Again, this is just a mathematical way to handle periodic
    infinite-length sample sequences.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '- **循环索引**：在循环卷积中，我们使用模运算“包裹”y的索引，模的长度为N。这只是确保y被视为周期为N的周期性序列的一种方法：当我们想知道位置k处y的值时，我们只需使用位置k%N处y的值——由于y是N周期性的，我们得到正确的值。同样，这只是处理周期性无限长度样本序列的数学方法。'
- en: '**Implementation in numpy**'
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**numpy中的实现**'
- en: 'Numpy provides great tools for finite length signals: and that’s a good news
    because as we just saw, our infinite-length periodic signal can be represented
    with just a period.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy为有限长度信号提供了很好的工具：这真是个好消息，因为正如我们刚才看到的，我们的无限长度周期信号只需用一个周期表示。
- en: Let’s create a simple class to represent such signals. We add a method to quickly
    plot the array, as well as an additional period before and after the “base” array,
    to keep in mind that we are dealing with a periodic sequence.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的类来表示这些信号。我们添加一个方法来快速绘制数组，并在“基本”数组的前后添加额外的周期，以便记住我们处理的是周期序列。
- en: 'Let’s look at two examples : first with a sampled sinus sequence, then with
    a linear sequence. Both are considered to be N-periodic (N=10 in this case).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看两个例子：首先是采样的正弦序列，然后是线性序列。两者都被认为是N周期性（此例中N=10）。
- en: '![](../Images/85ad56ceae35b9c04179e44742864d23.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85ad56ceae35b9c04179e44742864d23.png)'
- en: '2 examples of PeriodicArray : the “base” period is plotted from 0 to N in dark
    blue, while 2 other periods are added before and after to represent the fact that
    we are dealing with periodic sequences (made by author).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PeriodicArray的两个例子：“基本”周期从0到N用深蓝色绘制，同时在前后添加了2个其他周期，以表示我们正在处理周期序列（作者制作）。
- en: '**Circular convolution, the slow way**'
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**缓慢方式的循环卷积**'
- en: 'Let’s now implement the circular convolution equation seen above. Using indexing
    and the modulo operator, it is pretty straightforward:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现上述循环卷积方程。使用索引和模运算符，这非常简单：
- en: '![](../Images/016103c6b8aa0dbe34aea4d97f4d88a6.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/016103c6b8aa0dbe34aea4d97f4d88a6.png)'
- en: The circular convolution between the above 2 periodic sequences (made by author).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个周期序列之间的循环卷积（作者制作）。
- en: 'That’s great, we can now see what the circular convolution between two signals
    looks like. Putting everything in a single figure :'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，我们现在可以看到两个信号之间的循环卷积是什么样的。将所有内容放在一个图中：
- en: '![](../Images/e08b7ecf11f11d5dcd6cde2191d8bd5d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e08b7ecf11f11d5dcd6cde2191d8bd5d.png)'
- en: 'Left : first periodic array. Middle : second periodic array. Right : circular
    convolution of the 2 periodic arrays, which also is a periodic array (made by
    author).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧：第一个周期性数组。中间：第二个周期性数组。右侧：两个周期性数组的循环卷积，它也是一个周期性数组（作者制作）。
- en: 'Now this solution works really well, but it has a major flaw : it is slow.
    As you can see, we have to go through 2 nested loops to compute the result : one
    for each position in the result array, and one to compute the result at that position
    : we say that the algorithm is O(N²), as N increases the number of operations
    will increase as the square of N.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个解决方案工作得很好，但它有一个主要缺陷：它很慢。如您所见，我们必须通过两个嵌套的循环来计算结果：一个用于结果数组中的每个位置，另一个用于计算该位置的结果：我们称该算法为O(N²)，随着N的增加，操作数量将增加到N的平方。
- en: For small arrays like those in the example, it is not a problem, but as your
    array will grow it’ll become a major problem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像示例中的这些小数组，这不是问题，但随着数组的增长，它将成为一个主要问题。
- en: Furthermore, loops on numerical data is most of the time considered a bad practice
    in python. There must be a better way…
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对数值数据进行循环通常被认为是Python中的不良实践。一定有更好的方法……
- en: '**Circular convolution, the Fourier way**'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**傅里叶方式的循环卷积**'
- en: And that’s where the Fourier transform and the convolution theorem come into
    play. Because of the way the discrete Fourier transform is implemented, in a very
    fast and optimized way using the Fast Fourier Transform (FFT), the operation is
    ****very**** fast (we say the FFT is O(N log N), which is way better than O(N²)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是傅里叶变换和卷积定理发挥作用的地方。由于离散傅里叶变换以非常快速和优化的方式实现（使用快速傅里叶变换 FFT），操作是****非常**** 快的（我们说
    FFT 是 O(N log N)，这比 O(N²) 好得多）。
- en: 'Using the convolution theorem, we can use the fact the product of the DFT of
    2 sequences, when transformed back into the time-domain using the inverse DFT,
    we get the convolution of the input time sequences. In other words, we have :'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 利用卷积定理，我们可以使用 2 个序列的离散傅里叶变换（DFT）的乘积，当通过逆 DFT 转换回时间域时，我们得到输入时间序列的卷积。换句话说，我们有：
- en: '![](../Images/ccae7e87543ab95283e0b1aea43a4c8d.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ccae7e87543ab95283e0b1aea43a4c8d.png)'
- en: Circular convolution between x and y using direct and inverse Fourier transform
    (made by author).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直接和逆傅里叶变换进行 x 和 y 的循环卷积（由作者制作）。
- en: where DFT represents the discrete Fourier transform, and IDFT the inverse operation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 DFT 代表离散傅里叶变换，IDFT 代表逆变换操作。
- en: 'We can then implement this algorithm to compute the convolution of x and y
    using numpy very easily :'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实现这个算法，使用 numpy 很容易地计算 x 和 y 的卷积：
- en: '**Numerical and Time comparison**'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**数值和时间比较**'
- en: 'To finish, let’s verify that both approaches yield the same results, and compare
    the time it take python to compute the circular convolution using both techniques:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们验证这两种方法是否得到相同的结果，并比较 Python 计算循环卷积所需的时间：
- en: '![](../Images/14277c278b5b9f10480c81bbd7d6c092.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14277c278b5b9f10480c81bbd7d6c092.png)'
- en: 'Comparison of both approaches to compute the circular convolution between 2
    periodic sequences : “slow way” is the simple algebraic using loops and additions
    in blue, which is superimposed with the “Fourier way” in orange. Both methods
    give exactly equal results (down to numerical precision) (made by author).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 比较计算两个周期序列之间的循环卷积的两种方法： “慢方法” 是使用蓝色的循环和加法进行简单代数运算，叠加在橙色的“傅里叶方法”上。这两种方法给出的结果完全相同（数值精度一致）（由作者制作）。
- en: That’s a perfect match! Both are rigorously equivalent in term of numerical
    values.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完美的匹配！两者在数值值上严格等价。
- en: 'Now for the time comparison:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行时间比较：
- en: 'And the results are:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: for N=10 samples, the DFT is faster by a factor of 6
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 N=10 个样本，DFT 快了 6 倍
- en: '**for N=1000 samples, the DFT is faster a factor of about 10000**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于 N=1000 个样本，DFT 快了大约 10000 倍**'
- en: That’s huge! Consider now what it can brings you when you analyze your time-series
    with thousands and thousands of samples!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是太棒了！现在考虑一下，当你用数以千计的样本分析时间序列时，这将为你带来什么！
- en: '**Wrap up**'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: We have seen in this post that the Fourier transform is powerful tool, especially
    thanks to the convolution theorem that allows us to compute convolution in a very
    efficient manner. We’ve seen that linear and circular are not exactly the same
    operation but are both based on a convolution.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这篇文章中看到，傅里叶变换是一个强大的工具，特别是得益于卷积定理，它允许我们以非常高效的方式计算卷积。我们看到线性和循环卷积并不是完全相同的操作，但都是基于卷积的。
- en: '**Subscribe to get future posts about Fourier transform directly onto your
    feed!**'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**订阅以便直接在你的信息流中获取关于傅里叶变换的未来文章！**'
- en: 'Also, check out my other post and if you like any of them, please subscribe
    it helps me a lot to reach my goal of 100 subscribers:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，查看我其他的文章，如果你喜欢其中的任何一篇，请订阅，这对我达到 100 名订阅者的目标帮助很大：
- en: '[300-Times Faster Resolution of Finite-Difference Method Using NumPy | by Yoann
    Mocquin | Towards Data Science (medium.com)](https://medium.com/towards-data-science/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 NumPy 实现有限差分法的 300 倍加速 | Yoann Mocquin | Towards Data Science (medium.com)](https://medium.com/towards-data-science/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1)'
- en: '[PCA/LDA/ICA : a components analysis algorithms comparison | by Yoann Mocquin
    | Towards Data Science (medium.com)](https://medium.com/towards-data-science/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[PCA/LDA/ICA : 组件分析算法比较 | Yoann Mocquin | Towards Data Science (medium.com)](https://medium.com/towards-data-science/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff)'
- en: '[Wrapping numpy’s array. The container approach. | by Yoann Mocquin | Towards
    Data Science (medium.com)](https://medium.com/towards-data-science/wrapping-numpys-arrays-971e015e14bb)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[包装 numpy 数组。容器方法。 | Yoann Mocquin | Towards Data Science (medium.com)](https://medium.com/towards-data-science/wrapping-numpys-arrays-971e015e14bb)'
- en: '[Deep Dive into Seaborn: Color Palettes | by Yoann Mocquin | Analytics Vidhya
    | Medium](https://medium.com/analytics-vidhya/deep-dive-into-seaborn-palettes-7b5fae5a258e)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[深入探讨 Seaborn：颜色调色板 | 作者：Yoann Mocquin | Analytics Vidhya | Medium](https://medium.com/analytics-vidhya/deep-dive-into-seaborn-palettes-7b5fae5a258e)'
