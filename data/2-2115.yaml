- en: Tips and Tricks for Working with Strings in Polars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Polars 中处理字符串的技巧与窍门
- en: 原文：[https://towardsdatascience.com/tips-and-tricks-for-working-with-strings-in-polars-ec6bb74aeec2](https://towardsdatascience.com/tips-and-tricks-for-working-with-strings-in-polars-ec6bb74aeec2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/tips-and-tricks-for-working-with-strings-in-polars-ec6bb74aeec2](https://towardsdatascience.com/tips-and-tricks-for-working-with-strings-in-polars-ec6bb74aeec2)
- en: From sorting column names to splitting columns
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从排序列名到拆分列
- en: '[](https://weimenglee.medium.com/?source=post_page-----ec6bb74aeec2--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----ec6bb74aeec2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ec6bb74aeec2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ec6bb74aeec2--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----ec6bb74aeec2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/?source=post_page-----ec6bb74aeec2--------------------------------)[![魏梦龙](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----ec6bb74aeec2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ec6bb74aeec2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ec6bb74aeec2--------------------------------)
    [魏梦龙](https://weimenglee.medium.com/?source=post_page-----ec6bb74aeec2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ec6bb74aeec2--------------------------------)
    ·9 min read·Jan 17, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ec6bb74aeec2--------------------------------)
    ·阅读时长 9 分钟·2023年1月17日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/dcdf237f50b5028ea8a4c18ac4d7898f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dcdf237f50b5028ea8a4c18ac4d7898f.png)'
- en: Photo by [Raphael Schaller](https://unsplash.com/@raphaelphotoch?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源 [Raphael Schaller](https://unsplash.com/@raphaelphotoch?utm_source=medium&utm_medium=referral)
    于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In my past articles on Polars ([https://medium.com/search?q=wei-meng+lee+polars](https://medium.com/search?q=wei-meng+lee+polars)),
    I dived into how to get started with Polars, how its lazy evaluation mode allows
    you to optimize your queries and make processing large datasets efficient, as
    well as the how to use it to perform various tasks such as data cleansing, data
    analytics, and data visualization.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我过去关于 Polars 的文章中（[https://medium.com/search?q=wei-meng+lee+polars](https://medium.com/search?q=wei-meng+lee+polars)），我深入探讨了如何开始使用
    Polars，它的惰性计算模式如何帮助优化查询和提高处理大数据集的效率，以及如何利用它进行各种任务，如数据清理、数据分析和数据可视化。
- en: 'One area that I did not dive into in more details is strings processing, which
    is a very commonly topic when dealing with dataframes. In this article, I will
    run through some of the tips and techniques you can use when performing string
    processing in Polars. They are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有深入探讨的一个领域是字符串处理，这在处理数据框时是一个非常常见的话题。在本文中，我将介绍一些你可以在 Polars 中进行字符串处理时使用的技巧和方法。它们包括：
- en: Sorting DataFrame columns
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序 DataFrame 列
- en: Counting length of strings
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算字符串长度
- en: Selecting Columns Based on Headers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据标题选择列
- en: Filtering Rows with Regex
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正则表达式过滤行
- en: Splitting String Columns
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拆分字符串列
- en: Replacing String Values
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换字符串值
- en: All Headers In Polars Must be String Type
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Polars 中的所有标题必须是字符串类型
- en: 'Before we dive into the various tips and tricks, it is important to remember
    that in Polars all column headers are of string type. Consider the following example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入各种技巧和窍门之前，重要的是要记住，在 Polars 中，所有列标题都是字符串类型。请考虑以下示例：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/9a3525a54b857eec56756b52deab2280.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9a3525a54b857eec56756b52deab2280.png)'
- en: 'The above shows a Polars DataFrame with four columns. Note that unlike Pandas
    where column headers can be of numeric type, in Polars all column headers must
    be of string type. The following is **not** allowed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了一个具有四列的 Polars DataFrame。请注意，与 Pandas 不同，在 Pandas 中列标题可以是数字类型，而在 Polars
    中，所有列标题必须是字符串类型。以下是**不允许**的：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you really want to use numbers as column headers, you need to convert them
    to strings:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想使用数字作为列标题，你需要将它们转换为字符串：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Sorting Columns
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列排序
- en: 'To sort the columns in a Polars DataFrame, first use the Python `sorted()`
    function to sort the column names and then use the `select()` function to rearrange
    the order of the columns:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要排序 Polars DataFrame 中的列，首先使用 Python 的 `sorted()` 函数对列名进行排序，然后使用 `select()`
    函数重新排列列的顺序：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `select()` function returns a new DataFrame with the columns rearranged:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`select()` 函数返回一个新的 DataFrame，列的顺序已重新排列：'
- en: '![](../Images/f142bdb117c912cf02e1a4ccf5661c76.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f142bdb117c912cf02e1a4ccf5661c76.png)'
- en: All images created in this article are created by the author
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文中的所有图像均由作者创建
- en: 'The default sort order of the `sorted()` function is alphabetical. To sort
    it in reverse order, set the `reverse` parameter to `True`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`sorted()` 函数的默认排序顺序是字母顺序。要以相反的顺序进行排序，将 `reverse` 参数设置为 `True`：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/0b272c5380135528a2f181b0d886c548.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b272c5380135528a2f181b0d886c548.png)'
- en: 'You might be tempted to sort using the square bracket notation (like in Pandas):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想使用方括号表示法进行排序（如 Pandas 中所示）：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, this is not recommended if you are going to use the result with other
    Polars function as this approach cannot be used with lazy evaluation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你打算将结果与其他 Polars 函数一起使用，这种方法不推荐，因为这种方法不能与延迟计算一起使用。
- en: You can use the square bracket notation if you simply want to have a glance
    of how the data looks like.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你只是想大致了解数据的样子，可以使用方括号表示法。
- en: Counting the Length of Strings
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串长度计数
- en: 'Sometimes you need to count the length of strings in a particular column. To
    illustrate this, I have the following self-created CSV file named **names.csv**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要计算特定列中字符串的长度。为此，我有一个名为 **names.csv** 的自制 CSV 文件：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s first load this into a Polars DataFrame:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将其加载到 Polars DataFrame 中：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/c716d58c888417f5687d97500b4d724d.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c716d58c888417f5687d97500b4d724d.png)'
- en: 'You can use the `lengths()` function to get the length of each name and then
    store it in a new column named **length_of_name**:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `lengths()` 函数获取每个名称的长度，然后将其存储在名为 **length_of_name** 的新列中：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/15be3991c81149d0577cc911ba088c97.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15be3991c81149d0577cc911ba088c97.png)'
- en: Selecting Columns Based on Headers
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于标题选择列
- en: In my earlier article on Polars ([https://towardsdatascience.com/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c](/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c)),
    I showed that you can use the `select()` function to select the columns from a
    dataframe. Let’e dive into this in more details using the Titanic dataset.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前关于 Polars 的文章中 ([https://towardsdatascience.com/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c](/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c))，我展示了如何使用
    `select()` 函数从数据框中选择列。让我们通过 Titanic 数据集详细了解一下。
- en: '**Source of Data**: The data source for this section is from [https://www.kaggle.com/datasets/tedllh/titanic-train](https://www.kaggle.com/datasets/tedllh/titanic-train).'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**数据来源**：本节的数据来源于 [https://www.kaggle.com/datasets/tedllh/titanic-train](https://www.kaggle.com/datasets/tedllh/titanic-train)。'
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Licensing —** Database Contents License (DbCL) v1.0 [https://opendatacommons.org/licenses/dbcl/1-0/](https://opendatacommons.org/licenses/dbcl/1-0/)'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**许可 —** 数据库内容许可（DbCL）v1.0 [https://opendatacommons.org/licenses/dbcl/1-0/](https://opendatacommons.org/licenses/dbcl/1-0/)'
- en: 'Loading the Titanic dataset, you see that it has 12 columns:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 加载 Titanic 数据集时，你会看到它有 12 列：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/32d935a6d0af970fe576ce373532a740.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32d935a6d0af970fe576ce373532a740.png)'
- en: 'If you only want to retrieve the **Name** and **Age** columns, put them into
    a list and pass it to the `select()` function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想检索 **Name** 和 **Age** 列，将它们放入列表中并传递给 `select()` 函数：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/d6bfd61eee91c4ff3e242d35224b23a6.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6bfd61eee91c4ff3e242d35224b23a6.png)'
- en: 'If you want *all* columns except the **PassengerId** column, use the `pl.exclude()`
    function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要 *所有* 列，除了 **PassengerId** 列，可以使用 `pl.exclude()` 函数：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/dd93527f024bd4ccf087b05b51f1aaca.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd93527f024bd4ccf087b05b51f1aaca.png)'
- en: 'The `exclude()` function supports regular expressions. The following example
    retrieves all columns except those who name starts with “S”:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclude()` 函数支持正则表达式。以下示例检索所有列，除了那些名称以“S”开头的列：'
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/5f0f112b0db98e101402314d29eea22b.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5f0f112b0db98e101402314d29eea22b.png)'
- en: 'If you want to retrieve specific columns, use the `pl.col()` function. The
    following example retrieves all columns with starts with “S”:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检索特定的列，可以使用 `pl.col()` 函数。以下示例检索所有以“S”开头的列：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/6538399c8809b03aafb983293fe5de5e.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6538399c8809b03aafb983293fe5de5e.png)'
- en: Filtering Rows with Regex
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正则表达式筛选行
- en: 'Besides the `pl.col()` function, the `contains()` function also supports regex.
    The following code snippet retrieves all rows that has the names ending with “William”:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `pl.col()` 函数，`contains()` 函数也支持正则表达式。以下代码片段检索所有名称以“William”结尾的行：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/f0f6b7df958dc7f76f9483b47f37c3e3.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0f6b7df958dc7f76f9483b47f37c3e3.png)'
- en: 'You can also try out the following expression:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试以下表达式：
- en: '`[Ww]illiam`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Ww]illiam`'
- en: '`(?i)illiam`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(?i)illiam`'
- en: '`^William`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^William`'
- en: Can you figure out what they do?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你能弄清楚它们的作用吗？
- en: 'Here’s a challenge: How do you find all the names that does *not* end with
    “William”?'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个挑战：你如何找到所有**不**以“William”结尾的名字？
- en: 'Well, you could use a regex to do that, but the easiest is to use the `is_not()`
    function to negate the condition specified in the `contains()` function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你可以使用正则表达式来做到这一点，但最简单的方法是使用`is_not()`函数来否定`contains()`函数中指定的条件：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/e8102b7eb570b6fd9586612f29d303f5.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8102b7eb570b6fd9586612f29d303f5.png)'
- en: Note that Polars does not support look-around, including look-ahead and look-behind
    for regex.
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，Polars 不支持正则表达式中的前瞻和回顾。
- en: Splitting String Columns
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串列拆分
- en: 'Another popular activity regarding strings is column-splitting. Let’s now split
    the **name** column (in the **names.csv** file) based on the space using the `split()`
    function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关于字符串的流行活动是列拆分。现在让我们基于空格使用`split()`函数拆分**name**列（在**names.csv**文件中）：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result is a new column named **split_name** as shown below:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个名为**split_name**的新列，如下所示：
- en: '![](../Images/dd04a214ddf9889ddb5bfb517ff03d26.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd04a214ddf9889ddb5bfb517ff03d26.png)'
- en: 'Notice that the names are now split into a list of strings. What you need to
    do next is to convert the list of strings into multiple columns, representing
    the first and last name. You can do so using the `with_column()` and the `pl.struct()`
    functions:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，名字现在被拆分成了字符串列表。接下来你需要做的是将字符串列表转换为多个列，表示名字和姓氏。你可以使用`with_column()`和`pl.struct()`函数来完成：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `with_column()` function returns a new DataFrame with a column updated.
    In this case, I will update the `split_name` column with a structure using the
    `pl.struct()` function, which iterates through the list of names in the **split_name**
    column. Think of the structure as a collection of columns. The updated dataframe
    now looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`with_column()`函数返回一个更新了列的新DataFrame。在这种情况下，我将使用`pl.struct()`函数更新`split_name`列，该函数遍历**split_name**列中的名字列表。将结构视为一组列。更新后的数据框现在如下所示：'
- en: '![](../Images/6ef53174a109b045452f9731ce436b55.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6ef53174a109b045452f9731ce436b55.png)'
- en: 'Notably, the **split_name** column is now of type `struct`. The final step
    is to use the `unnest()` function to decompose a `struct` column into individual
    columns:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，**split_name**列现在是`struct`类型。最后一步是使用`unnest()`函数将`struct`列拆分为单独的列：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The final result looks like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果如下：
- en: '![](../Images/264ef3b593565818bd3597919d6b341d.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/264ef3b593565818bd3597919d6b341d.png)'
- en: 'Let’s now try another example using the Titanic dataset. In particular, I want
    to focus on the **Name** column:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们用Titanic数据集尝试另一个例子。特别是，我想关注**Name**列：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is a snapshot of the unique names in the **Name** column:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**Name**列中唯一名字的快照：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The names are saved in the following format:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 名字以以下格式保存：
- en: '`Last Name, Title. First Name`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`姓氏，头衔。名字`'
- en: 'Ideally, you can use regular expression in the `split()` function. You can
    use the following regex for splitting the **Name** column into Last Name, Title,
    and First Name:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你可以在`split()`函数中使用正则表达式。你可以使用以下正则表达式将**Name**列拆分为姓氏、头衔和名字：
- en: '`‘([\’A-Za-z ()”//.-]+), ([A-Za-z]+). ([A-Za-z ()”//.-]*)’`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`‘([\’A-Za-z ()”//.-]+), ([A-Za-z]+). ([A-Za-z ()”//.-]*)’`'
- en: 'This regular expression was discussed in my earlier article:'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个正则表达式在我之前的文章中讨论过：
- en: '[](/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da?source=post_page-----ec6bb74aeec2--------------------------------)
    [## Feature Engineering using Regular Expression (RegEx) in Pandas DataFrame'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da?source=post_page-----ec6bb74aeec2--------------------------------)
    [## 使用正则表达式（RegEx）进行特征工程（Pandas DataFrame）'
- en: Discover how to manipulate your string columns easily using Regular Expressions
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索如何使用正则表达式轻松操作你的字符串列
- en: towardsdatascience.com](/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da?source=post_page-----ec6bb74aeec2--------------------------------)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da?source=post_page-----ec6bb74aeec2--------------------------------)
- en: Unfortunately, at the time of writing the `split()` function in Polars does
    not support regular expression.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在写作时，Polars中的`split()`函数不支持正则表达式。
- en: 'So the strategy is to perform the split multiple times:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所以策略是多次执行拆分：
- en: '![](../Images/ba52331a15b5a7cb0353577658da7d49.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba52331a15b5a7cb0353577658da7d49.png)'
- en: 'Here’s the first split:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一次拆分：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result now shows that the **Last Name** is extracted, followed by the **First
    Name**, which contains the title as well as the first name:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 结果现在显示**姓氏**被提取出来，接着是**名字**，其中包含标题和名字：
- en: '![](../Images/4c6e537834cb5d50f0e9eab2f1042664.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c6e537834cb5d50f0e9eab2f1042664.png)'
- en: 'And here’s the second split:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二次分割：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now the title is extracted from the first name:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从名字中提取标题：
- en: '![](../Images/58832fd35ba06cd7b570fb51a13c923b.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58832fd35ba06cd7b570fb51a13c923b.png)'
- en: Replacing String Values
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换字符串值
- en: Replacing string values in your dataframe is another common task that you perform
    routinely. For the passenger names in the Titanic dataset, there are a number
    of overlapping titles that are used. For example, for female passengers, some
    titles used are Ms, Miss, Mlle, Mlle, and Mme. You would usually want to reduce
    the number of titles to a more manageable number.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 替换 DataFrame 中的字符串值是你常常进行的另一个任务。在 Titanic 数据集中，乘客名称中有很多重复的标题。例如，对于女性乘客，使用的一些标题有
    Ms、Miss、Mlle、Mlle 和 Mme。你通常会想将标题数量减少到一个更可管理的范围。
- en: 'To replace a string in a column, use the `replace()` function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要在列中替换字符串，请使用 `replace()` 函数：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The above code snippet replaces all occurences of “Mlle.” in the **Name** column
    with “Miss.”. If you want to replace more than one title with “Miss.”, you can
    use a regex, like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段将 **Name** 列中所有的 “Mlle.” 替换为 “Miss.”。如果你想将多个标题替换为 “Miss.”，你可以使用正则表达式，如下所示：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The above code snippet replaces “Mlle.”, “Ms.”, and “Mme.” with “Miss.”.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段将 “Mlle.”、 “Ms.” 和 “Mme.” 替换为 “Miss.”。
- en: If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你喜欢阅读我的文章并且它对你的职业/学习有所帮助，请考虑注册成为 Medium 会员。每月 5 美元，它让你可以无限制地访问 Medium 上的所有文章（包括我的）。如果你使用以下链接注册，我将赚取少量佣金（对你没有额外费用）。你的支持意味着我将能花更多时间撰写像这样的文章。
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----ec6bb74aeec2--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/membership?source=post_page-----ec6bb74aeec2--------------------------------)
    [## 通过我的推荐链接加入 Medium - Wei-Meng Lee]'
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Wei-Meng Lee 的每一个故事（以及 Medium 上其他成千上万的作者）。你的会员费直接支持…
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----ec6bb74aeec2--------------------------------)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----ec6bb74aeec2--------------------------------)
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Working with strings in Polars is similar to that in Pandas. In addition, if
    you are familiar with regex, it will certainly make your life much easier. I have
    used quite a number of functions in this article and so here’s a handy guide for
    you to remember the next time you perform strings processing in Polars:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Polars 中处理字符串类似于 Pandas。此外，如果你熟悉正则表达式，它一定会让你的工作变得更轻松。我在这篇文章中使用了相当多的函数，所以这里有一个方便的指南，供你在下一次处理
    Polars 中的字符串时参考：
- en: '`select()` — select the columns that you want from the DataFrame'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select()` — 从 DataFrame 中选择你需要的列'
- en: '`with_column()` — returns a new DataFrame with a column updated'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_column()` — 返回一个更新了列的新 DataFrame'
- en: '`unnest()` — decomposes a struct column into individual columns'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unnest()` — 将一个结构体列分解为单独的列'
- en: '`str.lengths()` — returns the length of the string'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str.lengths()` — 返回字符串的长度'
- en: '`str.contains()` — checks if a string contains the specified string'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str.contains()` — 检查字符串是否包含指定的字符串'
- en: '`str.split()` — splits a string based on the specified string'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str.split()` — 基于指定的字符串分割字符串'
- en: '`str.replace()` — replaces a string with another string'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str.replace()` — 用另一个字符串替换字符串'
- en: '`pl.exclude()` — excludes specific columns'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pl.exclude()` — 排除特定列'
- en: '`pl.col()` — includes specific columns'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pl.col()` — 包括特定的列'
- en: '`pl.struct()` — a column containing a collection of columns'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pl.struct()` — 包含一组列的列'
