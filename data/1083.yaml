- en: Inverse Physics-Informed Neural Net
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逆物理信息化神经网络
- en: 原文：[https://towardsdatascience.com/inverse-physics-informed-neural-net-3b636efeb37e?source=collection_archive---------2-----------------------#2023-03-27](https://towardsdatascience.com/inverse-physics-informed-neural-net-3b636efeb37e?source=collection_archive---------2-----------------------#2023-03-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/inverse-physics-informed-neural-net-3b636efeb37e?source=collection_archive---------2-----------------------#2023-03-27](https://towardsdatascience.com/inverse-physics-informed-neural-net-3b636efeb37e?source=collection_archive---------2-----------------------#2023-03-27)
- en: iPINN ~with code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iPINN ~with code
- en: Solving inverse differential equation problems
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决逆微分方程问题
- en: '[](https://medium.com/@john_morrow?source=post_page-----3b636efeb37e--------------------------------)[![John
    Morrow](../Images/4a8ce62a0b4e1eb1cf77ecaba6b7ddcc.png)](https://medium.com/@john_morrow?source=post_page-----3b636efeb37e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3b636efeb37e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3b636efeb37e--------------------------------)
    [John Morrow](https://medium.com/@john_morrow?source=post_page-----3b636efeb37e--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[![John Morrow](../Images/4a8ce62a0b4e1eb1cf77ecaba6b7ddcc.png)](https://medium.com/@john_morrow?source=post_page-----3b636efeb37e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3b636efeb37e--------------------------------)
    [John Morrow](https://medium.com/@john_morrow?source=post_page-----3b636efeb37e--------------------------------)'
- en: ·
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb4bcd051bb38&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finverse-physics-informed-neural-net-3b636efeb37e&user=John+Morrow&userId=b4bcd051bb38&source=post_page-b4bcd051bb38----3b636efeb37e---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3b636efeb37e--------------------------------)
    ·11 min read·Mar 27, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F3b636efeb37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finverse-physics-informed-neural-net-3b636efeb37e&user=John+Morrow&userId=b4bcd051bb38&source=-----3b636efeb37e---------------------clap_footer-----------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fb4bcd051bb38&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finverse-physics-informed-neural-net-3b636efeb37e&user=John+Morrow&userId=b4bcd051bb38&source=post_page-b4bcd051bb38----3b636efeb37e---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3b636efeb37e--------------------------------)
    ·11 min read·2023年3月27日'
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3b636efeb37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finverse-physics-informed-neural-net-3b636efeb37e&source=-----3b636efeb37e---------------------bookmark_footer-----------)![](../Images/2e92775d892c0d6963e6ba80092035bf.png)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F3b636efeb37e&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Finverse-physics-informed-neural-net-3b636efeb37e&source=-----3b636efeb37e---------------------bookmark_footer-----------)![](../Images/2e92775d892c0d6963e6ba80092035bf.png)'
- en: Photo by [Daniele Levis Pelusi](https://unsplash.com/@yogidan2012?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Daniele Levis Pelusi](https://unsplash.com/@yogidan2012?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**(1) Introduction: What is physics-informed?**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**(1) 引言：什么是物理信息化？**'
- en: Many relationships in physics, biology, chemistry, economics, engineering, etc.,
    are defined by differential equations. (Check [here](https://en.wikipedia.org/wiki/List_of_named_differential_equations)
    for an extensive list.) In general, a differential equation (DE) describes how
    variables are affected by the rate of change of other variables. For instance,
    a DE explains how the position of a mass vibrating on spring changes with time
    in relation to the mass’s velocity and acceleration. A physics-informed neural
    network (PINN) produces responses that adhere to the relationship described by
    a DE (whether the subject is physics, engineering, economics, etc.). In contrast,
    an inverse physics-informed neural network (iPINN) acts on a response and determines
    the parameters of the DE that produced it. PINNs and iPINNs are trained by including
    a constraint during training that forces the relationship between the input and
    output of the neural network to conform to the DE being modeled.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学、生物学、化学、经济学、工程学等许多领域的关系由微分方程定义。（请参见[这里](https://en.wikipedia.org/wiki/List_of_named_differential_equations)获取详细列表。）一般来说，微分方程（DE）描述了变量如何受到其他变量变化率的影响。例如，微分方程解释了当质量在弹簧上振动时，其位置如何随时间变化，这与质量的速度和加速度相关。物理信息神经网络（PINN）生成遵循微分方程描述的关系的响应（无论研究对象是物理学、工程学、经济学等）。相比之下，逆物理信息神经网络（iPINN）作用于响应并确定产生该响应的微分方程的参数。PINN和iPINN通过在训练过程中包含一个约束来进行训练，该约束迫使神经网络的输入和输出之间的关系符合所建模的微分方程。
- en: This article begins with the implementation of a PINN, then builds on the PINN
    model to implement an iPINN. The analytical solution for the modeled DE is included
    for comparison to the responses produced by the PINN and iPINN.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文从PINN的实现开始，然后在PINN模型的基础上实现iPINN。对建模微分方程的解析解包括在内，以便与PINN和iPINN产生的响应进行比较。
- en: '**(2) Second-order differential equations**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**(2) 二阶微分方程**'
- en: This article focuses on a PINN and iPINN for DEs that describe damped harmonic
    motion, e.g., a springmass system with damping (Figure 1) and an electronic circuit
    comprising series-connected components of resistance, inductance, and capacitance
    (RLC) (Figure 2).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文重点讨论描述阻尼谐波运动的PINN和iPINN，例如带阻尼的弹簧-质量系统（图1）和由电阻、电感和电容（RLC）串联连接的组件组成的电子电路（图2）。
- en: '![](../Images/bc61d01bfaeaaae24a842f60ce35308f.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc61d01bfaeaaae24a842f60ce35308f.png)'
- en: 'Figure 1: **Vibrating Mass & Spring**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：**振动质量与弹簧**
- en: '![](../Images/b5b5b1212154e54a8958dc8d85c3f2f5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b5b5b1212154e54a8958dc8d85c3f2f5.png)'
- en: 'Figure 2: **RLC Circuit**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：**RLC电路**
- en: These applications are defined by second-order DEs, which include second derivatives
    with respect to time. Equation 1 is the second-order differential equation for
    a spring-mass system, where the parameters m, c, and k are, respectively, mass,
    damping coefficient, and spring constant. The displacement of the mass is represented
    by x, and time by t. The second derivative of x with respect to t is the acceleration
    of the mass, and the first derivative is the velocity of the mass.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用由二阶微分方程（DE）定义，其中包括相对于时间的二阶导数。方程1是弹簧-质量系统的二阶微分方程，其中参数m、c和k分别是质量、阻尼系数和弹簧常数。质量的位移由x表示，时间由t表示。x对t的二阶导数是质量的加速度，而一阶导数是质量的速度。
- en: '![](../Images/e60ec55bec5f64b3764e35c64ca0cb8d.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e60ec55bec5f64b3764e35c64ca0cb8d.png)'
- en: '**Equation 1**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程1**'
- en: Equation 2 is the second-order DE for the RLC circuit, where R, L, and C are,
    respectively, resistance, inductance, and capacitance. The current in the circuit
    is represented by i, and the time by t.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 方程2是RLC电路的二阶微分方程，其中R、L和C分别是电阻、电感和电容。电路中的电流由i表示，时间由t表示。
- en: '![](../Images/4ce837c7a5433b71b222b50c8fc85b74.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ce837c7a5433b71b222b50c8fc85b74.png)'
- en: '**Equation 2**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程2**'
- en: Both of these DEs produce similar responses, i.e., the motion of the mass when
    it is displaced from a resting position, then released, and the variation of the
    current over time when the switch is closed after pre-charging the capacitor with
    an initial voltage. The following section presents details of the responses of
    the RLC circuit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个微分方程产生类似的响应，即质量从静止位置被位移后释放时的运动，以及在预充电电容器并施加初始电压后关闭开关时电流随时间的变化。下一节介绍RLC电路响应的详细信息。
- en: '**(3) RLC circuit response**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**(3) RLC电路响应**'
- en: Following is an overview of the possible responses of the RLC circuit in Figure
    2, including the equation of the analytical solution to Equation 2 for each response.
    (A derivation of the analytical solution by the author is available for download
    [here](https://github.com/jmorrow1000/PINN-iPINN/blob/main/RLC_response_Laplace_solutions.pdf?raw=true).)
    The analytical responses will later be compared to PINN-derived and iPINN-derived
    responses.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是图 2 中 RLC 电路可能响应的概述，包括每个响应的方程 2 的解析解方程。（作者提供的解析解推导可以在 [这里](https://github.com/jmorrow1000/PINN-iPINN/blob/main/RLC_response_Laplace_solutions.pdf?raw=true)
    下载。）解析响应将在后续与 PINN 生成的和 iPINN 生成的响应进行比较。
- en: 'Depending upon the values of the components, this RLC circuit can produce three
    different types of responses: under-damped, critically damped, and over-damped.
    All three responses are based on the capacitor charged to a voltage, V₀ , prior
    to switch closure and the following initial conditions:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 根据组件的值，这个 RLC 电路可以产生三种不同类型的响应：欠阻尼、临界阻尼和过阻尼。所有这三种响应都基于在开关关闭之前电容器充电到电压 V₀ 和以下初始条件：
- en: '![](../Images/a498a6aba3ec6d8c74b4f78ff82522bb.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a498a6aba3ec6d8c74b4f78ff82522bb.png)'
- en: '**Equation 3**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 3**'
- en: '![](../Images/aeef250d79309763bf6250afc6cccf11.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aeef250d79309763bf6250afc6cccf11.png)'
- en: '**Equation 4**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 4**'
- en: '**(3.1) Under-damped response**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**(3.1) 欠阻尼响应**'
- en: 'An under-damped response occurs when the values of R, L, and C produce the
    following condition:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当 R、L 和 C 的值产生以下条件时，会发生欠阻尼响应：
- en: '![](../Images/d4a259e5229339f75ab8a576b4911997.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4a259e5229339f75ab8a576b4911997.png)'
- en: '**Equation 5**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 5**'
- en: 'As an example, let R = 1.2 (ohms), L = 1.5 (henries), C = 0.3 (farads), and
    V₀ = 12 (volts). The analytically-derived response to Equation 2 with these values
    is:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设 R = 1.2（欧姆），L = 1.5（亨利），C = 0.3（法拉），V₀ = 12（伏特）。这些值的方程 2 的解析响应为：
- en: '![](../Images/0613eb2d2e99041dc5e7d015ac470e21.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0613eb2d2e99041dc5e7d015ac470e21.png)'
- en: '**Equation 6**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 6**'
- en: The following is a plot of the response from Equation 6.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是方程 6 的响应图。
- en: '![](../Images/c5ddc5d19e742bafe613a1ae968d0aa9.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5ddc5d19e742bafe613a1ae968d0aa9.png)'
- en: 'Figure 3: **Under-damped response**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3: **欠阻尼响应**'
- en: '**(3.2) Critically damped response**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**(3.2) 临界阻尼响应**'
- en: 'A critically-damped response occurs when the values of R, L, and C produce
    the following condition:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当 R、L 和 C 的值产生以下条件时，会发生临界阻尼响应：
- en: '![](../Images/14b1fda78c81563e855f75a1d55069dc.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14b1fda78c81563e855f75a1d55069dc.png)'
- en: '**Equation 7**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 7**'
- en: 'As an example, let R = 4.47 (ohms), L = 1.5 (henries), C = 0.3 (farads), and
    V₀ = 12 (volts). The analytically-derived response to Equation 2 with these values
    is:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设 R = 4.47（欧姆），L = 1.5（亨利），C = 0.3（法拉），V₀ = 12（伏特）。这些值的方程 2 的解析响应为：
- en: '![](../Images/50773846c1c8db0713fc07ee3d1387df.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/50773846c1c8db0713fc07ee3d1387df.png)'
- en: '**Equation 8**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 8**'
- en: The following is a plot of the response from Equation 8.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是方程 8 的响应图。
- en: '![](../Images/6cd77ecdb7016968b9cf77dd577d97dc.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cd77ecdb7016968b9cf77dd577d97dc.png)'
- en: 'Figure 4: **Critically-damped response**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4: **临界阻尼响应**'
- en: '**(3.3) Over-damped response**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**(3.3) 过阻尼响应**'
- en: 'An over-damped response occurs when the values of R, L, and C produce the following
    condition:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当 R、L 和 C 的值产生以下条件时，会发生过阻尼响应：
- en: '![](../Images/ddb0c4454e0d9649afa987bf9cbccef2.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ddb0c4454e0d9649afa987bf9cbccef2.png)'
- en: '**Equation 9**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 9**'
- en: 'As an example, let R = 6.0 (ohms), L = 1.5 (henries), C = 0.3 (farads), and
    V₀ = 12 (volts). The analytically-derived response to Equation 2 with these values
    is:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设 R = 6.0（欧姆），L = 1.5（亨利），C = 0.3（法拉），V₀ = 12（伏特）。这些值的方程 2 的解析响应为：
- en: '![](../Images/25770dc13c36594089b9d52b189c76a8.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25770dc13c36594089b9d52b189c76a8.png)'
- en: '**Equation 10**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**方程 10**'
- en: The following is a plot of the response from Equation 10.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是方程 10 的响应图。
- en: '![](../Images/2f33e5d568110768bdc8bb590d19a554.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2f33e5d568110768bdc8bb590d19a554.png)'
- en: 'Figure 5: **Over-damped response**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '图 5: **过阻尼响应**'
- en: '**(4) PINN structure**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**(4) PINN 结构**'
- en: Typically, a neural network is trained with pairs of known input and output
    data. The training input data is presented to the neural network, and the resulting
    output is compared to the training output data using a loss function. The loss
    returned by this function is used via backpropagation to adjust the network’s
    weights to reduce the loss. PINNs and iPINNs use custom loss functions that include
    additional loss components for constraining the neural network to produce outputs
    that comply with the DE being modeled.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，神经网络使用已知的输入和输出数据对进行训练。训练输入数据被输入神经网络，产生的输出与训练输出数据通过损失函数进行比较。此函数返回的损失值通过反向传播调整网络权重，以减少损失。PINNs和iPINNs使用自定义损失函数，包括额外的损失组件，以约束神经网络生成符合所建DE的输出。
- en: A PINN model of the DE in Equation 2 accepts time, *t*, as input to the neural
    network and produces a corresponding current, *i*, as output. Training the PINN
    to comply with the DE requires both the first and second derivatives of the output
    with respect to the input, i.e., *di/dt* and *d²i/dt²* . These derivatives are
    available in TensorFlow and PyTorch through each platform’s automatic differentiation
    function. In this article, the PINN and iPINN are developed with TensorFlow [GradientTape](https://www.tensorflow.org/guide/autodiff).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个DE的PINN模型在方程2中将时间 *t* 作为神经网络的输入，输出对应的电流 *i*。训练PINN以符合DE需要计算输出相对于输入的第一和第二导数，即
    *di/dt* 和 *d²i/dt²*。这些导数在TensorFlow和PyTorch中通过各个平台的自动微分功能获得。本文中的PINN和iPINN是通过TensorFlow的[GradientTape](https://www.tensorflow.org/guide/autodiff)开发的。
- en: For each training input to the PINN, the first and second derivatives from GradientTape
    are combined with *R*, *L*, and *C* according to the DE in Equation 2 to produce
    a result that should equal zero. The difference between the actual result and
    zero is known as the residual. The residual becomes a component of the loss function
    used to train the PINN.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个PINN训练输入，GradientTape计算的第一和第二导数与 *R*、*L* 和 *C* 按照方程2中的DE组合，产生的结果应为零。实际结果与零之间的差异称为残差。残差成为用于训练PINN的损失函数的一个组成部分。
- en: A second-order DE, such as Equation 2, also requires that the solution complies
    with two initial conditions. In this case, the first condition is the value of
    *i* at *t = 0* (Equation 3) and the second is the value of *di/dt* at *t = 0*
    (Equation 4). Each initial condition is included as a component of the loss function.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 二阶DE，如方程2，还要求解符合两个初始条件。在这种情况下，第一个条件是 *t = 0* 时 *i* 的值（方程3），第二个条件是 *t = 0* 时
    *di/dt* 的值（方程4）。每个初始条件都作为损失函数的一个组成部分。
- en: Figure 6 illustrates the composition of the total loss. Loss 2 is from the residual.
    Loss 1 and loss 3 are from the initial conditions. During training, backpropagation
    is used to reduce the total loss. The PINN outputs for *d²i/dt²* and *di/dt* are
    provided by GradientTape.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图6展示了总损失的组成。损失2来自残差。损失1和损失3来自初始条件。在训练过程中，反向传播用于减少总损失。PINN的 *d²i/dt²* 和 *di/dt*
    输出由GradientTape提供。
- en: '![](../Images/0069146d0559d5725933f0ae3764758f.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0069146d0559d5725933f0ae3764758f.png)'
- en: 'Figure 6: **PINN loss function**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '图6: **PINN损失函数**'
- en: '**(5) PINN implementation**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**(5) PINN实现**'
- en: Following is the python code for the PINN implementation. The complete code
    for the PINN implementation is available [here](https://github.com/jmorrow1000/PINN-iPINN).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是PINN实现的python代码。完整的PINN实现代码可以在[这里](https://github.com/jmorrow1000/PINN-iPINN)找到。
- en: '**(5.1) Neural network model definition**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**(5.1) 神经网络模型定义**'
- en: The neural network for the PINN has two fully-connected hidden layers, each
    with 128 neurons. There is a single input for time points and a single output
    for the response points.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: PINN的神经网络具有两个全连接的隐藏层，每层有128个神经元。时间点有一个输入，响应点有一个输出。
- en: 'Listing 1: **PINN TensorFlow model**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '列表1: **PINN TensorFlow模型**'
- en: '**(5.2) PINN initialization**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**(5.2) PINN初始化**'
- en: In the PINN model, the *R*, *L*, and *C* component values and the initial capacitor
    voltage (lines 2–5) are constants that determine the response of the DE. The co-location
    points, specified in the time domain (line 8), are the points where the residual
    is calculated. The initial conditions (lines 11 and 15) are from Equation 3 and
    Equation 4.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在PINN模型中，*R*、*L*和*C*组件值以及初始电容电压（第2-5行）是决定DE响应的常数。共同位置点，指定在时间域中（第8行），是计算残差的点。初始条件（第11和15行）来自方程3和方程4。
- en: 'Listing 2: **PINN initialization**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '列表2: **PINN初始化**'
- en: '**(5.3) PINN training step**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**(5.3) PINN训练步骤**'
- en: Following is the python code for the training step function. For each training
    batch, the step function calculates the three components of loss, then uses the
    total loss to update the weights in the neural network.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是训练步骤函数的 Python 代码。对于每个训练批次，步骤函数计算三部分损失，然后使用总损失更新神经网络中的权重。
- en: '**loss 1:** The initial condition from Equation 3 is compared to the output
    of the network, *pred_y* (line 9). The square of the difference is *model_loss1*
    (line 10).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失 1：** 方程 3 的初始条件与网络输出 *pred_y*（第 9 行）进行比较。差异的平方是 *model_loss1*（第 10 行）。'
- en: '**loss 2:** The residual (line 30) is calculated at the co-location points.
    It uses the first-order gradient, *dfdx* (line 17), and the second-order gradient,
    *dfdx2* (line 26), from GradientTape, along with the output of the network, *pred_y*
    (line 29), to calculate the left-hand side of Equation 2\. This value squared
    is *model_loss2* (line 31).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失 2：** 共定位点（第 30 行）计算残差。它使用来自 GradientTape 的一阶梯度 *dfdx*（第 17 行）和二阶梯度 *dfdx2*（第
    26 行），以及网络输出 *pred_y*（第 29 行），来计算方程 2 的左侧。这一值的平方为 *model_loss2*（第 31 行）。'
- en: '**loss 3:** The initial condition from Equation 4 compares the product of L
    and the first-order gradient, *dfdx* (line 17), to v_init2\. The square of the
    difference is *model_loss3* (line 19).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失 3：** 方程 4 的初始条件将 L 与一阶梯度 *dfdx*（第 17 行）的乘积与 v_init2 比较。差异的平方为 *model_loss3*（第
    19 行）。'
- en: The total of the three loss components, *model_loss* (line 35), is used to calculate
    the gradients of the loss with respect to the neural network’s weights (line 38).
    The optimizer then updates the weights (line 41).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 三个损失组件的总和，*model_loss*（第 35 行），用于计算损失相对于神经网络权重的梯度（第 38 行）。优化器随后更新权重（第 41 行）。
- en: 'Listing 3: **PINN training step**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 3：**PINN 训练步骤**
- en: '**(6) PINN results**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**(6) PINN 结果**'
- en: 'The results of training a PINN for three test cases follow. The tests are for
    the conditions of section 3: under-damped, critically-damped, and over-damped.
    Each plot below presents three traces:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对三个测试案例训练 PINN 的结果。这些测试条件如第 3 节所述：欠阻尼、临界阻尼和过阻尼。每个图展示了三个轨迹：
- en: the response of the analytical equation (blue)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析方程的响应（蓝色）
- en: the co-location points (green)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共定位点（绿色）
- en: the output response of the trained PINN (red)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练好的 PINN 的输出响应（红色）
- en: '**Under-damped test case:**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**欠阻尼测试案例：**'
- en: '![](../Images/8259d6aad4b1dfb4c5c07e6b54ada22f.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8259d6aad4b1dfb4c5c07e6b54ada22f.png)'
- en: 'Figure 7: **Under-damped response**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7：**欠阻尼响应**
- en: '**Critically-damped test case:**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**临界阻尼测试案例：**'
- en: '![](../Images/f918185248f2bcfa0784383bb5ffa32d.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f918185248f2bcfa0784383bb5ffa32d.png)'
- en: 'Figure 8: **Critically-damped response**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8：**临界阻尼响应**
- en: '**Over-damped test case:**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**过阻尼测试案例：**'
- en: '![](../Images/66d01c13d36c5842087c8587941efdae.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66d01c13d36c5842087c8587941efdae.png)'
- en: '**(7) iPINN structure**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**(7) iPINN 结构**'
- en: Figure 10 illustrates the composition of the total loss. Like the PINN model,
    Loss 2 is from the residual, except that *R*, *L*, and *C* are variables whose
    values are determined during training. In contrast, *R*, *L*, and *C* are constants
    in the PINN model. As in the PINN, loss 1 and loss 3 force compliance with the
    initial conditions of Equation 3 and Equation 4.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10 说明了总损失的组成。与 PINN 模型类似，损失 2 来自残差，只是 *R*、*L* 和 *C* 是在训练过程中确定的变量。相比之下，在 PINN
    模型中，*R*、*L* 和 *C* 是常数。与 PINN 一样，损失 1 和损失 3 强制遵守方程 3 和方程 4 的初始条件。
- en: The iPINN model includes an additional loss function, loss 4, that forces the
    output response to match the response of the DE under investigation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: iPINN 模型包括一个额外的损失函数，损失 4，强制输出响应与待调查的微分方程响应匹配。
- en: '![](../Images/009c851fccaea1e364c7be30e965998e.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/009c851fccaea1e364c7be30e965998e.png)'
- en: 'Figure 10: **iPINN loss function**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10：**iPINN 损失函数**
- en: '**(8) iPINN implementation**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**(8) iPINN 实现**'
- en: Following is the python code for the PINN implementation. The complete code
    for the iPINN implementation is available [here](https://github.com/jmorrow1000/PINN-iPINN).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 PINN 实现的 Python 代码。iPINN 实现的完整代码可以在[这里](https://github.com/jmorrow1000/PINN-iPINN)找到。
- en: The neural network model definition for iPINN is identical to the PINN network
    (Section 5.1), i.e., two fully-connected hidden layers, each with 128 neurons.
    There is a single input for time points and a single output for the response points.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: iPINN 的神经网络模型定义与 PINN 网络（第 5.1 节）相同，即两个完全连接的隐藏层，每层有 128 个神经元。输入为时间点，输出为响应点。
- en: '**(8.1) iPINN initialization**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**(8.1) iPINN 初始化**'
- en: The response of the DE under investigation is loaded in line 4\. The two initial
    conditions (lines 9 and 13) are the same as in the PINN model. As discussed above,
    *R*, *L*, and *C* are trainable variables in the iPINN model (lines 18–20).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 被研究的微分方程的响应被加载在第4行。两个初始条件（第9行和第13行）与PINN模型中的相同。如上所述，*R*、*L*和*C*是iPINN模型中的可训练变量（第18–20行）。
- en: '**(8.2) iPINN training step**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**(8.2) iPINN 训练步骤**'
- en: '**loss 1:** The initial condition from Equation 3 is compared to the output
    of the network, *pred_y* (line 10). The square of the difference is *model_loss1*
    (line 11).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失 1：** 方程3的初始条件与网络输出*pred_y*（第10行）进行比较。差异的平方为*model_loss1*（第11行）。'
- en: '**loss 2:** As in the PINN training step function, the residual (line 34) is
    calculated at the co-location points defined by *t_coloc* to produce *model_loss2*
    (line 35). *R*, *L*, and *C* are trainable variables.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失 2：** 与PINN训练步骤函数一样，残差（第34行）在由*t_coloc*定义的共定位点处计算，产生*model_loss2*（第35行）。*R*、*L*和*C*是可训练变量。'
- en: '**loss 3:** The initial condition from Equation 4 compares the product of *L*,
    a trainable variable, and the first-order gradient, *dfdx* (line 18), to *v_init2*.
    The square of the difference is *model_loss3* (line 20).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失 3：** 方程4的初始条件将可训练变量*L*与一阶梯度*dfdx*（第18行）的乘积进行比较，以* v_init2*为标准。差异的平方为*model_loss3*（第20行）。'
- en: '**loss 4:** This loss component compares the output of the network (line 39)
    to the response of the DE under investigation, *i_coloc*, to produce *model_loss4*
    (line 40).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**损失 4：** 该损失组件将网络输出（第39行）与被研究的微分方程的响应*i_coloc*进行比较，产生*model_loss4*（第40行）。'
- en: 'The total of the four loss components, *model_loss* (line 43), is used to calculate
    the gradients of the loss with respect to the neural network’s weights and the
    three trainable variables: *R*, *L*, and *C* (line 49). The optimizer then updates
    the network’s weights (line 52), and the *R*, *L*, and *C* values are updated
    in lines 53–55.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 四个损失组件的总和，*model_loss*（第43行），用于计算损失相对于神经网络权重和三个可训练变量：*R*、*L*和*C*（第49行）的梯度。然后优化器更新网络的权重（第52行），并在第53–55行更新*R*、*L*和*C*的值。
- en: '**(9) iPINN results**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**(9) iPINN 结果**'
- en: 'The results of using an iPINN to identify three unknown test responses follow.
    The test responses presented to the iPINN were generated with the conditions of
    section 3: under-damped, critically-damped, and over-damped. The tables below
    compare the *R*, *L*, and *C* component values used to generate the test response
    to the values determined by the iPINN. Each plot below presents three traces:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用iPINN识别三个未知测试响应的结果。呈现给iPINN的测试响应是根据第3节的条件生成的：欠阻尼、临界阻尼和过阻尼。下表比较了用于生成测试响应的*R*、*L*和*C*组件值与iPINN确定的值。每个图表呈现三个轨迹：
- en: the response curve of the analytical equation (blue)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析方程的响应曲线（蓝色）
- en: the response data (60 points) to be identified by the iPINN (green)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要由iPINN识别的响应数据（60点）（绿色）
- en: the output response of the trained iPINN (red)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练后的iPINN输出响应（红色）
- en: '**Under-damped test case:**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**欠阻尼测试案例：**'
- en: '![](../Images/eac1f6e7db6392560e5935420c62ba21.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eac1f6e7db6392560e5935420c62ba21.png)'
- en: 'Table 1: **Under-damped test case**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 表1：**欠阻尼测试案例**
- en: '![](../Images/eede3a0349f29cf3456f7b807fabef8b.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eede3a0349f29cf3456f7b807fabef8b.png)'
- en: 'Figure 11: **Under-damped response**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：**欠阻尼响应**
- en: '**Critically-damped test case:**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**临界阻尼测试案例：**'
- en: '![](../Images/4f34b9f789f9aacee47b65aa53263268.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4f34b9f789f9aacee47b65aa53263268.png)'
- en: 'Table 2: **Critically-damped test case**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 表2：**临界阻尼测试案例**
- en: '![](../Images/10b1e4c7fdc01752f4d13b1193c5975c.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10b1e4c7fdc01752f4d13b1193c5975c.png)'
- en: 'Figure 12: **Critically-damped response**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：**临界阻尼响应**
- en: '**Over-damped test case:**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**过阻尼测试案例：**'
- en: '![](../Images/9206967325eb2179483ddcf1ee603702.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9206967325eb2179483ddcf1ee603702.png)'
- en: 'Table 3: **Over-damped test case**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 表3：**过阻尼测试案例**
- en: '![](../Images/475b3a56431ef0faf674af074c57c6c6.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/475b3a56431ef0faf674af074c57c6c6.png)'
- en: 'Figure 13: **Over-damped response**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：**过阻尼响应**
- en: '**(10) Conclusion**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**(10) 结论**'
- en: This study demonstrates that a neural network can successfully solve differential
    equations, which describe many relationships in numerous fields of science, engineering,
    and economics. A physics-informed neural network is trained to solve the second-order
    differential equation of an electronic circuit resulting in a neural network that
    produces the same response to an input signal as the actual circuit.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这项研究展示了神经网络可以成功求解微分方程，这些方程描述了科学、工程和经济学众多领域中的许多关系。训练了一个物理信息神经网络来解决电子电路的二阶微分方程，结果是一个能够对输入信号产生与实际电路相同响应的神经网络。
- en: This study also demonstrates that a neural network can determine the parameters
    of an unknown differential equation. Specifically, an inverse physics-informed
    neural network is trained to determine the unknown component values of an electronic
    circuit using only a sample response from the circuit. Further, after determining
    the unknown component values, the resulting neural network can produce the same
    response to an input signal as the actual circuit.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这项研究还展示了神经网络能够确定未知微分方程的参数。具体而言，训练了一个逆物理信息神经网络，通过仅使用来自电路的样本响应来确定电子电路的未知组件值。此外，在确定未知组件值后，得到的神经网络能够对输入信号产生与实际电路相同的响应。
- en: '**Bibliography**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: '[1] M. Raissi, P. Perdikaris, and G. E. Karniadakis, “Physics informed deep
    learning (part i): Data driven solutions of nonlinear partial differential equations,”
    2017\. [Online]. Available: https://arxiv.org/abs/1711.10561'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] M. Raissi, P. Perdikaris, 和 G. E. Karniadakis, “物理信息深度学习（第一部分）：非线性偏微分方程的数据驱动解法”，2017\.
    [在线]. 网址: https://arxiv.org/abs/1711.10561'
- en: '[2] M. Raissi, P. Perdikaris, and G. E. Karniadakis, “Physics informed deep
    learning (part ii): Data-driven discovery of nonlinear partial differential equations,”
    2017\. [Online]. Available: [https://arxiv.org/abs/1711.10566](https://arxiv.org/abs/1711.10566)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] M. Raissi, P. Perdikaris, 和 G. E. Karniadakis, “物理信息深度学习（第二部分）：非线性偏微分方程的数据驱动发现”，2017\.
    [在线]. 网址: [https://arxiv.org/abs/1711.10566](https://arxiv.org/abs/1711.10566)'
- en: '**A pdf of this article is available for download** [**here**](https://github.com/jmorrow1000/PINN-iPINN/blob/main/inverse_physics_informed_neural_net.pdf?raw=true)**.**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**这篇文章的pdf版本可以** [**在这里**](https://github.com/jmorrow1000/PINN-iPINN/blob/main/inverse_physics_informed_neural_net.pdf?raw=true)**下载**。'
- en: '*All images, unless otherwise noted, are by the author.*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
