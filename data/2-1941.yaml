- en: 'Supercharge Your Python Asyncio With Aiomultiprocess: A Comprehensive Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用`aiomultiprocess`超级增强你的Python Asyncio：一份全面指南
- en: 原文：[https://towardsdatascience.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide-571ee0e2f416](https://towardsdatascience.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide-571ee0e2f416)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide-571ee0e2f416](https://towardsdatascience.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide-571ee0e2f416)
- en: '[PYTHON TOOLBOX](https://medium.com/@qtalen/list/python-toolbox-4289824c6407)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[PYTHON TOOLBOX](https://medium.com/@qtalen/list/python-toolbox-4289824c6407)'
- en: Harness the power of asyncio and multiprocessing to turbocharge your applications
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用`asyncio`和`multiprocessing`的力量来加速你的应用程序
- en: '[](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)[](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)[](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)
    ·9 min read·Jul 5, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)
    ·阅读时间9分钟·2023年7月5日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/656680725e855bd9980f28bd31ee56cd.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/656680725e855bd9980f28bd31ee56cd.png)'
- en: 'Photo Credit: Created by Author, [Canva](https://www.canva.com/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者创作，[Canva](https://www.canva.com/)
- en: In this article, I will take you into the world of `aiomultiprocess`, a library
    that combines the powerful capabilities of Python `asyncio` and `multiprocessing`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将带你深入了解`aiomultiprocess`，一个结合了Python `asyncio`和`multiprocessing`强大功能的库。
- en: This article will explain through rich code examples and best practices.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章将通过丰富的代码示例和最佳实践进行解释。
- en: By the end of this article, you will understand how to leverage the powerful
    features of aiomultiprocess to enhance your Python applications, just like a head
    chef leading a team of chefs to create a delicious feast.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章结束时，你将理解如何利用aiomultiprocess的强大功能来增强你的Python应用程序，就像主厨带领一组厨师来准备一顿丰盛的宴席。
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Imagine that you want to invite your colleagues over for a big meal on the weekend.
    How would you do it?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你想在周末邀请你的同事们来一顿大餐。你会怎么做？
- en: As an experienced chef, you certainly wouldn’t cook one dish at a time; that
    would be too slow. You would efficiently use your time, letting multiple tasks
    happen simultaneously.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名经验丰富的厨师，你肯定不会一次只做一道菜；那样太慢了。你会高效地利用时间，让多个任务同时进行。
- en: For example, while you wait for the water to boil, you can step away to wash
    vegetables. This way, you can throw the vegetables into the pot when the water
    is boiling. This is the charm of concurrency.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当你等待水开时，你可以离开去洗菜。这样，当水开时，你可以把菜放进锅里。这就是并发的魅力。
- en: 'However, recipes can often be cruel: you need to keep stirring when making
    soup; vegetables need to be washed and chopped; you also need to bake bread, fry
    steaks, and more.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，食谱常常很残酷：你需要在做汤时不停搅拌；蔬菜需要洗净并切碎；你还需要烤面包、煎牛排等等。
- en: When there are many dishes to prepare, you’ll be overwhelmed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当有很多菜需要准备时，你会感到不知所措。
- en: Fortunately, your colleagues won’t just sit around waiting to eat. They will
    come into the kitchen to help you, with each additional person acting like an
    additional working process. This is the powerful combination of multiprocessing
    and concurrency.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，你的同事们不会只是坐在那等着吃。他们会进厨房来帮助你，每多一个人就像增加一个工作进程。这就是多进程和并发的强大结合。
- en: The same is true for code. Even with asyncio, has your Python application still
    encountered bottlenecks? Are you looking for ways to further improve the performance
    of your concurrent code? If so, `aiomultiprocess` is the answer you’ve been looking
    for.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 代码也是如此。即使使用 asyncio，你的 Python 应用程序是否仍然遇到瓶颈？你是否在寻找进一步提高并发代码性能的方法？如果是的话，`aiomultiprocess`
    是你一直在寻找的答案。
- en: How to Install and Basic Usage
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何安装和基本用法
- en: Installation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'If you use pip, install it like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 pip，按照如下方式安装：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you use Anaconda, install it from conda-forge:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Anaconda，从 conda-forge 安装：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Basic usage
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`aiomultiprocess` consists of three main classes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`aiomultiprocess` 由三个主要类组成：'
- en: '`Process` is the base class for the other two classes and is used to start
    a process and execute a coroutine function. You won’t usually need to use this
    class.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Process` 是其他两个类的基类，用于启动一个进程并执行协程函数。通常你不需要使用这个类。'
- en: '`Worker` is used to start a process, execute a coroutine function, and return
    the result. We also won’t be using this class.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Worker` 用于启动一个进程，执行一个协程函数，并返回结果。我们也不会使用这个类。'
- en: '`Pool` is the core class we will focus on. Like `multiprocessing.Pool`, it
    starts a process pool, but its context needs to be managed using `async with`.
    We will use the two methods of Pool: `map` and `apply`.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pool` 是我们将重点关注的核心类。与 `multiprocessing.Pool` 类似，它启动一个进程池，但其上下文需要使用 `async with`
    来管理。我们将使用 Pool 的两个方法：`map` 和 `apply`。'
- en: The `map` method accepts a coroutine function and an iterable. The `Pool` will
    iterate over the iterable and assign the coroutine function to run on various
    processes. The result of the map method can be asynchronously iterated using `async
    for:`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`map` 方法接受一个协程函数和一个可迭代对象。`Pool` 将遍历可迭代对象，并将协程函数分配给不同的进程运行。`map` 方法的结果可以使用 `async
    for:` 进行异步迭代'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `apply` method accepts a coroutine function and the required argument tuple
    for the function. According to the scheduler’s rules, the `Pool` will assign the
    coroutine function to an appropriate process for execution.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply` 方法接受一个协程函数和该函数所需的参数元组。根据调度器的规则，`Pool` 将协程函数分配给适当的进程进行执行。'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Implementation Principle and Practical Examples
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现原理和实际示例
- en: Implementation principle of aiomultiprocess.Pool
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: aiomultiprocess.Pool的实现原理
- en: '[In a previous article](/harnessing-multi-core-power-with-asyncio-in-python-1764404ce44f),
    I explained how to distribute asyncio tasks across multiple CPU cores.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[在上一篇文章中](/harnessing-multi-core-power-with-asyncio-in-python-1764404ce44f)，我解释了如何将
    asyncio 任务分布到多个 CPU 核心上。'
- en: 'The general approach is to start a process pool in the main process using `[loop.run_in_executor](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor)`.
    Then, an [asyncio event loop](https://docs.python.org/3/library/asyncio-eventloop.html#)
    is created in each process in the process pool, and the coroutine functions are
    executed in their respective loops. The schematic is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通用方法是在主进程中使用 `[loop.run_in_executor](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor)`
    启动一个进程池。然后，在进程池中的每个进程中创建一个 [asyncio 事件循环](https://docs.python.org/3/library/asyncio-eventloop.html#)，并在各自的循环中执行协程函数。示意图如下：
- en: '![](../Images/086e3a88a5b55ab8bd44c1260a8b45d6.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/086e3a88a5b55ab8bd44c1260a8b45d6.png)'
- en: This diagram shows the way to integrate asyncio and multiprocessing. Image by
    Author
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此图展示了 asyncio 和 multiprocessing 的集成方式。图片由作者提供
- en: The implementation of `aiomultiprocess.Pool` is similar. It includes `scheduler`,
    `queue`, and `process` as its three components.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`aiomultiprocess.Pool` 的实现类似。它包括 `scheduler`、`queue` 和 `process` 作为其三个组件。'
- en: The `scheduler` can be understood as the head chef, responsible for allocating
    tasks in a suitable way to each chef. Of course, you can hire (implement) a head
    chef suitable for your needs.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scheduler` 可以理解为大厨，负责以合适的方式将任务分配给每个厨师。当然，你可以雇佣（实现）一个适合你需求的大厨。'
- en: The `queue` is like the kitchen’s assembly line. Strictly speaking, it includes
    an order line and a delivery line. The head chef passes the menu through the order
    line to the chefs, and the chefs return the completed dishes through the delivery
    line.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queue` 就像厨房的流水线。严格来说，它包括一个订单线和一个交付线。大厨通过订单线将菜单传递给厨师，厨师通过交付线返回完成的菜肴。'
- en: The `process` is like the chefs in the restaurant. They each handle several
    dishes concurrently according to the allocation. Each time a dish is ready, it
    will be handed over in the allocated order.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process` 就像餐厅里的厨师。他们根据分配同时处理几个菜肴。每当一道菜准备好时，它将按照分配的顺序交付。'
- en: 'The entire schematic is shown below:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 整个示意图如下所示：
- en: '![](../Images/b46969311fbfa2a953d6bda2d62d8421.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b46969311fbfa2a953d6bda2d62d8421.png)'
- en: 'Aiomultiprocess consists of three components: scheduler, queue, and process.
    Image by Author'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Aiomultiprocess由三个组件组成：调度器、队列和进程。图片由作者提供
- en: Real-world example
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现实世界的示例
- en: Based on the introduction provided earlier, you should now understand how to
    use `aiomultiprocess`. Let’s dive into a real-world example to experience the
    power of it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基于之前提供的介绍，您现在应该理解如何使用`aiomultiprocess`。让我们深入一个现实世界的示例，以体验它的强大功能。
- en: First, we’ll use a remote call and a loop calculation to simulate the process
    of data retrieval and processing in real life. This method demonstrates that IO-bound
    and CPU-bound tasks are often mixed together, and the boundary between them is
    not so clear-cut.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用远程调用和循环计算来模拟实际数据检索和处理过程。这个方法展示了IO绑定和CPU绑定任务通常混合在一起，它们之间的界限并不那么明确。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, let’s use the traditional asyncio approach to call this task 30 times
    as a baseline:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用传统的asyncio方法调用此任务30次作为基线：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/09407b6f9fa7e08cb4d7d312bf5bb1b5.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09407b6f9fa7e08cb4d7d312bf5bb1b5.png)'
- en: The code is run using the traditional asyncio method. Screenshot by Author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用传统的asyncio方法运行。截图由作者提供
- en: The code execution results are shown in the figure, and it takes approximately
    21 seconds. Now let’s see how much aiomultiprocess can improve this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行结果如图所示，耗时约21秒。现在让我们看看aiomultiprocess能带来多大的改进。
- en: 'Using aiomultiprocess is simple. The original concurrent code does not need
    to be modified. You only need to adjust the code in the main method to run inside
    the Pool:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用aiomultiprocess很简单。原始的并发代码无需修改。您只需调整主方法中的代码，使其在Pool内部运行：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/ec58467cd297fd8a8108ade84d61e49b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec58467cd297fd8a8108ade84d61e49b.png)'
- en: Simply use the modified version of aiomultiprocess. Screenshot by Author
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需使用修改后的aiomultiprocess版本。截图由作者提供
- en: As you can see, the code using aiomultiprocess takes only 14 seconds to complete
    on my laptop. The performance improvement would be even greater on a more powerful
    computer.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用aiomultiprocess的代码在我的笔记本电脑上只需14秒即可完成。性能提升在更强大的计算机上会更大。
- en: Detailed Best Practices
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 详细的最佳实践
- en: Finally, based on my experience, let me share some more practical best practices.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，基于我的经验，我将分享一些更实用的最佳实践。
- en: Use pool only
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅使用池
- en: Although `aiomultiprocess` also provides the `Process` and `Worker` classes
    for us to choose from, we should always use the `Pool` class to ensure maximum
    efficiency due to the significant resource consumption of creating processes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`aiomultiprocess`也提供了`Process`和`Worker`类供我们选择，但由于创建进程会消耗大量资源，我们应始终使用`Pool`类以确保最大效率。
- en: How to use queues
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用队列
- en: '[In a previous article](/unleashing-the-power-of-python-asyncios-queue-f76e3188f1c4),
    I explained how to use `asyncio.Queue` to implement the producer-consumer pattern
    to balance resources and performance.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[在上一篇文章中](/unleashing-the-power-of-python-asyncios-queue-f76e3188f1c4)，我解释了如何使用`asyncio.Queue`实现生产者-消费者模式来平衡资源和性能。'
- en: In `aiomultiprocess`, we can also use queues. However, since we are in a process
    pool, we cannot use `asyncio.Queue`. At the same time, we cannot directly use
    `multiprocessing.Queue` in the process pool.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在`aiomultiprocess`中，我们也可以使用队列。然而，由于我们处于进程池中，不能使用`asyncio.Queue`。同时，我们也不能在进程池中直接使用`multiprocessing.Queue`。
- en: 'In this case, you should use `multiprocessing.Manager().Queue()` to create
    a queue, with the code as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您应该使用`multiprocessing.Manager().Queue()`来创建队列，代码如下：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using `initializer` to initialize resources
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`initializer`初始化资源
- en: Suppose you need to use an `aiohttp` session or a database connection pool in
    a coroutine method, but we cannot pass arguments when creating tasks in the main
    process because these objects cannot be pickled.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要在协程方法中使用`aiohttp`会话或数据库连接池，但由于这些对象无法被序列化，因此我们不能在主进程中创建任务时传递参数。
- en: An alternative is to define a global object and an initialization method. In
    this initialization method, access the global object and perform initialization.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是定义一个全局对象和一个初始化方法。在这个初始化方法中，访问全局对象并进行初始化。
- en: 'Just like `[multiprocessing.Pool](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool)`,
    `aiomultiprocess.Pool` can accept an initialization method and corresponding initialization
    parameters when initialized. This method will be called to complete the initialization
    when each process starts:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `[multiprocessing.Pool](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool)`
    一样，`aiomultiprocess.Pool` 在初始化时可以接受一个初始化方法和相应的初始化参数。每个进程启动时都会调用这个方法来完成初始化：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exception handling and retries
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常处理和重试
- en: Although `aiomultiprocess.Pool` provides the `exception_handler` parameter to
    help with exception handling, if you need more flexibility, you need to combine
    it with `asyncio.wait`. For the usage of `asyncio.wait`, you can refer to [my
    previous article](/use-these-methods-to-make-your-python-concurrent-tasks-perform-better-b693b7a633e1).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 `aiomultiprocess.Pool` 提供了 `exception_handler` 参数来帮助处理异常，但如果你需要更多的灵活性，你需要将它与
    `asyncio.wait` 结合使用。关于 `asyncio.wait` 的使用，你可以参考 [我之前的文章](/use-these-methods-to-make-your-python-concurrent-tasks-perform-better-b693b7a633e1)。
- en: 'With `asyncio.wait`, you can get tasks that encounter exceptions. After extracting
    the task, you can make some adjustments and then re-execute the task, as shown
    in the code below:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `asyncio.wait`，你可以获取遇到异常的任务。提取任务后，你可以进行一些调整，然后重新执行任务，如下代码所示：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using Tenacity for retries
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Tenacity 进行重试
- en: Of course, we have more flexible and powerful options for exception handling
    and retries, such as using the `Tenacity` library, which I explained in [this
    article](/conquer-retries-in-python-using-tenacity-an-in-depth-tutorial-3c98b216d798).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还有更灵活和强大的异常处理和重试选项，比如使用 `Tenacity` 库，我在 [这篇文章](/conquer-retries-in-python-using-tenacity-an-in-depth-tutorial-3c98b216d798)
    中解释了它。
- en: With `Tenacity`, the code above can be significantly simplified. You just need
    to add a decorator to the coroutine method, and the method will automatically
    retry when an exception is thrown.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Tenacity`，上述代码可以大大简化。你只需要在协程方法上添加一个装饰器，该方法在抛出异常时会自动重试。
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using tqdm to indicate progress
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 tqdm 指示进度
- en: I like `tqdm` because it can always tell me how far the code has run when I’m
    waiting in front of the screen. [This article](/using-tqdm-with-asyncio-in-python-5c0f6e747d55)
    also explains how to use it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢 `tqdm`，因为它总是能告诉我在屏幕前等待时代码执行的进度。[这篇文章](/using-tqdm-with-asyncio-in-python-5c0f6e747d55)
    也解释了如何使用它。
- en: 'Since `aiomultiprocess` uses asyncio’s API to wait for tasks to complete, it
    is also compatible with `tqdm`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `aiomultiprocess` 使用 asyncio 的 API 等待任务完成，它也与 `tqdm` 兼容：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Conclusion
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Running asyncio code is like a chef cooking a meal. Even if you can improve
    efficiency by running different tasks concurrently, you’ll eventually encounter
    bottlenecks.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 asyncio 代码就像厨师做饭一样。即使你可以通过并发执行不同的任务来提高效率，但最终你还是会遇到瓶颈。
- en: The simplest solution at this point is to add more chefs to increase the parallelism
    of the cooking process.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，最简单的解决方案是增加更多的厨师，以提高烹饪过程的并行性。
- en: '`Aiomultiprocess` is such a powerful Python library. By allowing concurrent
    tasks to run on multiple processes, it perfectly breaks through the performance
    bottlenecks caused by asyncio’s single-threaded nature.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Aiomultiprocess` 是一个强大的 Python 库。它通过允许并发任务在多个进程中运行，完美地突破了 asyncio 单线程特性造成的性能瓶颈。'
- en: The use and best practices of `aiomultiprocess` in this article are based on
    my work experience. If you’re interested in any aspect, feel free to comment and
    join the discussion.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中 `aiomultiprocess` 的使用和最佳实践基于我的工作经验。如果你对任何方面感兴趣，欢迎评论和参与讨论。
- en: 'Besides improving code execution speed and performance, using various tools
    to improve work efficiency is also a performance enhancement:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提高代码执行速度和性能，使用各种工具来提高工作效率也是一种性能提升：
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![彭茜](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[彭茜](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)'
- en: Python Toolbox
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 工具箱
- en: '[View list](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----571ee0e2f416--------------------------------)6
    stories![Seaborn 0.12: An Insightful Guide to the Objects Interface and Declarative
    Graphics](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![Supercharge Your Python
    Asyncio With Aiomultiprocess: A Comprehensive Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Conquer
    Retries in Python Using Tenacity: An In-depth Tutorial](../Images/e636d5546f5826d60865c6a95f976fa8.png)[](https://qtalen.medium.com/membership?source=post_page-----571ee0e2f416--------------------------------)
    [## Join Medium with my referral link - Peng Qian'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----571ee0e2f416--------------------------------)6个故事！[Seaborn
    0.12：对象接口和声明式图形的深度指南](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![使用 Aiomultiprocess
    超级增强您的 Python Asyncio：全面指南](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![使用
    Tenacity 克服 Python 中的重试：深入教程](../Images/e636d5546f5826d60865c6a95f976fa8.png)[](https://qtalen.medium.com/membership?source=post_page-----571ee0e2f416--------------------------------)
    [## 通过我的推荐链接加入 Medium - 彭乾'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 的会员，您的部分会员费用会分配给您阅读的作者，并且您可以完全访问每一个故事……
- en: qtalen.medium.com](https://qtalen.medium.com/membership?source=post_page-----571ee0e2f416--------------------------------)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[qtalen.medium.com](https://qtalen.medium.com/membership?source=post_page-----571ee0e2f416--------------------------------)'
- en: 'This article was originally published at: [https://www.dataleadsfuture.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide/](https://www.dataleadsfuture.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide/)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初发表于：[https://www.dataleadsfuture.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide/](https://www.dataleadsfuture.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide/)
