- en: Unleashing the Power of the Julia SuperType
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 释放Julia超级类型的力量
- en: 原文：[https://towardsdatascience.com/unleashing-the-power-of-the-julia-supertype-bb369209efca](https://towardsdatascience.com/unleashing-the-power-of-the-julia-supertype-bb369209efca)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/unleashing-the-power-of-the-julia-supertype-bb369209efca](https://towardsdatascience.com/unleashing-the-power-of-the-julia-supertype-bb369209efca)
- en: Using and working with abstraction to do interesting things with the Julia language
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用和操作抽象在Julia语言中做有趣的事情
- en: '[](https://emmaccode.medium.com/?source=post_page-----bb369209efca--------------------------------)[![Emma
    Boudreau](../Images/f7201d012b733643d6e97957f73fd1fa.png)](https://emmaccode.medium.com/?source=post_page-----bb369209efca--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bb369209efca--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bb369209efca--------------------------------)
    [Emma Boudreau](https://emmaccode.medium.com/?source=post_page-----bb369209efca--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://emmaccode.medium.com/?source=post_page-----bb369209efca--------------------------------)[![Emma
    Boudreau](../Images/f7201d012b733643d6e97957f73fd1fa.png)](https://emmaccode.medium.com/?source=post_page-----bb369209efca--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bb369209efca--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bb369209efca--------------------------------)
    [Emma Boudreau](https://emmaccode.medium.com/?source=post_page-----bb369209efca--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bb369209efca--------------------------------)
    ·7 min read·Oct 11, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bb369209efca--------------------------------)
    ·阅读时间7分钟·2023年10月11日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/709919bb56394b82ea33ff5474146f8f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/709919bb56394b82ea33ff5474146f8f.png)'
- en: image by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: One of the things I find fascinating about the exploration of different programming
    languages is the way that different paradigms solve different types of problems.
    In programming, there are a number of features that might be expected from a modern
    programming language. Some examples of these features include things like scope,
    polymorphism, and abstraction. Some paradigms are going to have more prominent
    applications in certain fields, and Data Science is no exception. These features
    are all implemented across the spectrum of programming paradigms using a multitude
    of different approaches. This subject becomes even more interesting to me whenever
    a language with a paradigm that is atypical implements these types of generic
    programming concepts. This brings us to the Julia programming language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现不同编程语言探索中最令人着迷的事情之一是不同范式解决不同类型问题的方式。在编程中，现代编程语言可能会有一些预期的特性。这些特性的例子包括范围、多态性和抽象。一些范式在某些领域中的应用会更为突出，数据科学也不例外。这些特性在各种编程范式中通过多种不同的方法得以实现。当一个具有不典型范式的语言实现这些通用编程概念时，这个主题对我而言变得更加有趣。这引出了Julia编程语言。
- en: The Julia programming language is one of the more interesting developments that
    has come to the world of programming in recent years. The world of programming
    is quite used to a few choice paradigms that have been honed over the decades
    to create some very formidable ideological approaches to solving programming problems.
    While Julia pulls a lot of more generic programming concepts to get the job done,
    the language’s paradigm itself is incredibly unique and often brings about a different
    way of doing things. This has been coined the Multiple Dispatch programming paradigm.
    This paradigm is a very effective programming paradigm when it comes to doing
    exactly what Data Scientists do.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Julia编程语言是近年来编程世界中较为有趣的发展之一。编程世界对几种经过数十年打磨的选择性范式已经相当熟悉，这些范式创造了非常强大的意识形态方法来解决编程问题。虽然Julia采用了许多更通用的编程概念来完成工作，但该语言的范式本身极为独特，常常带来不同的做事方式。这被称为多重分发编程范式。当涉及到数据科学家所做的事情时，这种范式是一种非常有效的编程范式。
- en: With this type of programming paradigm relationship, Julia changes its gears
    a bit to accomplish a lot of the more generic programming concepts that most programmers
    are going to want to use. There are a multitude of capacities where this plays
    out all across Julia. All of these concepts feed back into the robust capabilities
    of the multiple dispatch paradigm. For experienced programmers, I find this can
    be an incredibly powerful paradigm! That being said, with any paradigm it is important
    to know what tools are available to take advantage of. One example of a technique
    that fits very well into the Julian paradigm is the Julian implementation of abstraction.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这种编程范式关系，Julia 会稍微调整其机制，以实现大多数程序员希望使用的更多通用编程概念。Julia 中有许多功能体现了这一点。所有这些概念都反馈到多重分发范式的强大能力中。对于有经验的程序员，我发现这可能是一个极其强大的范式！话虽如此，无论是什么范式，了解可用的工具以便充分利用它们是很重要的。一个非常适合
    Julian 范式的技术示例是 Julian 的抽象实现。
- en: Abstraction is going to be an essential technique when it comes to Data Science.
    In Data Science, observations can be of many different types and something like
    polymorphism might be very effective considering that this draws some commonality
    between the way different structures might be worked with.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象在数据科学中将是一个基本的技术。在数据科学中，观察值可能有很多不同的类型，像多态性这样的概念可能非常有效，因为它在不同结构的处理方式之间找到了共同点。
- en: As one might expect, Julian abstraction is implemented using multiple dispatch.
    However, there are some nuances to using multiple dispatch in this way and these
    are important to take note of, so without further ado let’s review the ins and
    outs of abstraction in Julia!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，Julian 抽象是使用多重分发来实现的。然而，使用多重分发的方式有一些细微差别，这些细节很重要，因此事不宜迟，让我们来回顾一下 Julia
    中抽象的方方面面！
- en: Super-type basics
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超类型基础
- en: In order to get started creating our own super-types, we are going to want to
    get familiar with the `abstract type` syntax. An `abstract type` is a loosely
    defined type which exists only in name — containing no fields. Using different
    organizations of these names, we can apply methods to restricted levels of our
    type hierarchy. A great example of this would be numbers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始创建我们自己的超类型，我们需要熟悉 `abstract type` 语法。`abstract type` 是一个定义松散的类型，仅存在于名称中——没有字段。通过这些名称的不同组织，我们可以将方法应用于我们类型层次结构的受限级别。一个很好的例子就是数字。
- en: In Julia, numbers are organized based on a few different pragmatic categories.
    The resulting structure, which organizes different types of numbers hierarchically,
    is called a type heirarchy. In Julia, this type hierarchy will always begin with
    `Any` . `Any` is an abstract type that **every** type in Julia is a sub-type of.
    The number portion of this heirarchy begins below this with `Number` , before
    moving onto `Real` numbers — furthered with `Integers` and the works.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Julia 中，数字根据几个不同的实际类别进行组织。结果结构以层次结构的方式组织不同类型的数字，这被称为类型层次结构。在 Julia 中，这种类型层次结构始终以
    `Any` 开始。`Any` 是一个抽象类型，**每一个** Julia 类型都是其子类型。这个层次结构的数字部分从 `Any` 开始，接着是 `Number`，然后是
    `Real` 数字——进一步细化为 `Integers` 及其他。
- en: '![](../Images/f6c2fce8bf47d30c6a98865d59724af8.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6c2fce8bf47d30c6a98865d59724af8.png)'
- en: (image by author)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （图像由作者提供）
- en: '[](/julia-and-imaginary-numbers-the-numerical-hierarchy-694aef87a7ce?source=post_page-----bb369209efca--------------------------------)
    [## Julia And Imaginary Numbers: The Numerical Hierarchy'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[Julia 和虚数：数值层次结构](https://towardsdatascience.com/julia-and-imaginary-numbers-the-numerical-hierarchy-694aef87a7ce?source=post_page-----bb369209efca--------------------------------)'
- en: A deep dive into how Julia handles numbers.
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入探讨 Julia 如何处理数字。
- en: towardsdatascience.com](/julia-and-imaginary-numbers-the-numerical-hierarchy-694aef87a7ce?source=post_page-----bb369209efca--------------------------------)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[super-type basics](https://towardsdatascience.com/julia-and-imaginary-numbers-the-numerical-hierarchy-694aef87a7ce?source=post_page-----bb369209efca--------------------------------)'
- en: Our main tool to interact with the abstraction inside of Julia is the sub-type
    operator, `<:` . This is a bitwise boolean operator, meaning that it returns either
    true or false depending on two operands; bitwise meaning two operands, as opposed
    to unary, and boolean denoting the true/false nature of the return. This condition
    will be true if the first operand is a sub-type of the second operand. The first
    operand in this instance will be a `Type` or an abstract type. The second operand
    will always be an abstract type — given that things can only be a sub-type of
    an abstract type.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与 Julia 内部抽象交互的主要工具是子类型操作符`<:`。这是一种按位布尔操作符，意味着它根据两个操作数返回 true 或 false；按位指的是两个操作数，与一元操作相对，而布尔表示返回值的真/假性质。如果第一个操作数是第二个操作数的子类型，则该条件为真。在这个实例中，第一个操作数将是一个`Type`或抽象类型。第二个操作数将始终是抽象类型——因为事物只能是抽象类型的子类型。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This operator is also used in two other instances. One of these is multiple
    dispatch and the other is assigning a type as a sub-type. The latter may be done
    for a super-type or a regular type. This is done by providing the sub-type operator
    after its definition followed by the type we want it below.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作符还在另外两个实例中使用。一个是多重调度，另一个是将类型指定为子类型。后者可以为超类型或常规类型完成。这是通过在定义后提供子类型操作符，然后跟上我们想要它下面的类型来完成的。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Super-type dispatch
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超类型调度
- en: 'Creating these type of hierarchies is great, but even better is utilizing them
    with multiple dispatch. Using multiple dispatch, we can dispatch to the exact
    level we want, allowing for the creation of functions that encompass only specific
    categories. In the following case, any `Float` or `Integer` will be handled differently
    within this function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这些类型的层次结构是很好的，但更好的做法是与多重调度结合使用。通过多重调度，我们可以调度到我们想要的确切级别，从而创建仅涵盖特定类别的函数。在以下情况下，任何`Float`或`Integer`都将在此函数中以不同的方式处理：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Likewise, if the functionality of these functions were the same we could go
    up a level and dispatch `Real` , then creating one function. This is a really
    simple implementation that gets the job done perfectly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果这些函数的功能相同，我们可以上升一个层次并调度`Real`，然后创建一个函数。这是一个非常简单的实现，能够完美完成工作。
- en: 'One nuance to using dispatch in this context is dispatch sub-types as parameters.
    For example, in some cases we might have an argument that looks like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下使用调度的一个细微差别是将调度子类型作为参数。例如，在某些情况下，我们可能会有一个看起来像这样的参数：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, we wanted for any `Vector` that has numbers in it to be dispatched
    to this function. However, this is not the function we have wrote — instead we
    have dispatched a `Vector{Number}` …
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望任何包含数字的`Vector`都被调度到这个函数。然而，这不是我们编写的函数——相反，我们调度了一个`Vector{Number}`
    …
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The solution here is a little obscure — we dispatch the parameter in this weird
    way with the sub-type operator.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的解决方案有点晦涩——我们以这种奇怪的方式使用子类型操作符调度参数。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Oddly, this is a unary usage of this operator — it certainly is strange, but
    it gets the job done and does make sense logically in other ways. This is certainly
    a nuance to take note of, however.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是，这是对这个操作符的一种一元用法——确实很奇怪，但它完成了工作，并且在其他方面逻辑上是有意义的。不过，这确实是一个需要注意的细微差别。
- en: Fields
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段
- en: Something that should also be part of the conversation when it comes to abstraction
    in Julia is fields. In short, Julia would prefer that abstract types are never
    used for fields. The reason for this is that Julia takes a severe performance
    hit when a field of a type can be of several different types. This can also be
    a really bad practice for multiple dispatch. It is probably better to utilize
    generic function constructors rather than use a generic structure. For example,
    the following structure is probably a bad idea.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到 Julia 中的抽象时，字段也应该是讨论的一部分。简而言之，Julia 更倾向于不在字段中使用抽象类型。原因是，当类型的字段可以是几种不同类型时，Julia
    的性能会受到严重影响。这对于多重调度来说也可能是一个非常不好的做法。利用通用函数构造器可能比使用通用结构更好。例如，以下结构可能不是一个好主意。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, both `Real` and `AbstractString` are ambiguous field types. We
    can easily fix this by either deciding a better field or field type or using a
    parameter to denote the type. Whenever we use a parameter, we create a new type
    for every different setting that parameter could be. In other words, `Calculator{Float64}`
    is a distinct type from `Calculator{Int64}` , and the `x` field on both of these
    will always be the type of that parameter. To reorganize this, we add a parameter
    to the constructor and change the field to the parameter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`Real`和`AbstractString`是模糊的字段类型。我们可以通过决定一个更好的字段或字段类型，或者使用一个参数来表示类型，来轻松解决这个问题。每当我们使用一个参数时，我们就为该参数可能的每种不同设置创建一个新类型。换句话说，`Calculator{Float64}`是与`Calculator{Int64}`不同的类型，而这两个类型的`x`字段将始终是该参数的类型。为了重新组织，我们在构造函数中添加一个参数，并将字段改为该参数。
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can also sub-type this parameter, making it more explicit what we are expecting
    this field to be.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以对子类型进行显式化，明确我们期望这个字段是什么。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As for the case of `y` , this might be an example of where it is better to simply
    use a different type. In most cases, an `AbstractString` would be better as a
    simple `String` .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 至于`y`的情况，这可能是一个更好地使用不同类型的例子。在大多数情况下，`AbstractString`作为一个简单的`String`会更好。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In order for someone to construct this `Calculator` , they will now need to
    provide this parameter. We can change this by creating a new dispatch using an
    inner constructor.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构造这个`Calculator`，现在需要提供这个参数。我们可以通过使用一个内部构造函数创建一个新的调度来改变这一点。
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Super-type introspection
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超类型内省
- en: The final thing I would like to point out in this overview of super-types is
    the ability to introspect super-types. Though certainly not as useful as many
    other forms of introspection in Julia, this certainly can come in handy — especially
    when it comes to figuring some things out. The most obvious form of this introspection
    was touched on earlier, and this is the ability to discern whether or not a type
    is a sub-type of an abstract type.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个关于超类型的概述中，我想指出的最后一点是能够内省超类型。虽然这显然不像Julia中的许多其他内省形式那样有用，但在弄清楚一些事情时这确实会很有帮助。最明显的这种内省形式在前面已经提到，即区分一个类型是否是一个抽象类型的子类型。
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Unfortunately, Julia also does not offer a lot of options beyond this. One other
    thing you might do that could be valuable is to get a nice printout of this heirarchy
    for a specific type. Here is a pretty nice function that has circulated the Julia
    community to do so
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Julia也没有提供很多超出这一点的选项。另一件可能有价值的事情是获取特定类型的层级的漂亮打印输出。这里有一个在Julia社区广泛流传的相当不错的函数可以做到这一点
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: I believe the original source for this particular rendition goes to [tk3369](https://github.com/tk3369)
    on github.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我相信这个特定版本的原始来源来自于[tk3369](https://github.com/tk3369)在github上的发布。
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Conclusion
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Abstraction is an incredibly important tool for modern high-level programming
    languages. Creating the same function in multiple places is tedious, and programmers
    have caught onto this. A lot of languages have drastically different paradigms,
    and as a result the techniques used to achieve these programming concepts can
    be very interesting. One example where this is fervently the case is in that of
    the Julia language and its type hierarchies.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象是现代高级编程语言中一个极其重要的工具。在多个地方创建相同的函数是繁琐的，程序员已经意识到这一点。许多语言有着截然不同的范式，因此实现这些编程概念的技术可能非常有趣。一个显著的例子就是Julia语言及其类型层级。
- en: While Julia’s approach to this problem is a little unusual, it makes up for
    this abnormality by being incredibly powerful. Using this form of abstraction,
    we can get as specific as the exact type of each parameters or as ambiguous as
    allowing `Any` to pass through our methods. Overall, it is certainly very powerful
    and worth knowing. Thank you for reading!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Julia处理这个问题的方法有些不同寻常，但它通过极其强大的能力弥补了这种异常。通过这种抽象形式，我们可以具体到每个参数的精确类型，也可以模糊到允许`Any`通过我们的方法。总体而言，它确实非常强大，值得了解。感谢您的阅读！
