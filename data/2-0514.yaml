- en: 'Clearing the Confusion Once And For All: args, kwargs, And Asterisks in Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一劳永逸地澄清混乱：Python中的args、kwargs和星号
- en: 原文：[https://towardsdatascience.com/clearing-the-confusion-once-and-for-all-args-kwargs-and-asterisks-in-python-a905c36467a2](https://towardsdatascience.com/clearing-the-confusion-once-and-for-all-args-kwargs-and-asterisks-in-python-a905c36467a2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/clearing-the-confusion-once-and-for-all-args-kwargs-and-asterisks-in-python-a905c36467a2](https://towardsdatascience.com/clearing-the-confusion-once-and-for-all-args-kwargs-and-asterisks-in-python-a905c36467a2)
- en: and living happily ever after
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并幸福地生活在一起
- en: '[](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)
    ·9 min read·May 30, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[数据科学前沿](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)
    ·阅读时间9分钟·2023年5月30日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/49a1db551c8f925a358bd20c9e9f7d04.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49a1db551c8f925a358bd20c9e9f7d04.png)'
- en: Image by me with Midjourney
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我用Midjourney制作
- en: Motivation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: I’ve always felt annoyed when I saw someone using `*args`, `**kwargs` in functions
    or the asterisk operator for any other purpose than multiplication. I mean, couldn't
    they stop being arrogant for just a second and use something readable to everyone
    else?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是感到烦恼，当看到有人在函数中使用`*args`、`**kwargs`或将星号运算符用于乘法以外的任何其他目的时。我是说，他们能不能停下来片刻，用一些其他人都能理解的东西呢？
- en: But after learning what they were, I realized that the use of `*args`, `**kwargs`
    and the prefix asterisk comes from a desire for flexibility and elegance. Even
    though it may feel like a slap in [the Zen of Python](https://peps.python.org/pep-0020/)'s
    face, which says "Readability counts", they are powerful tools for beautiful code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但在了解了它们的作用后，我意识到`*args`、`**kwargs`和前缀星号的使用源于对灵活性和优雅的渴望。尽管这可能让人感觉像是在[Python之禅](https://peps.python.org/pep-0020/)上打了一巴掌，"可读性很重要"，但它们是美丽代码的强大工具。
- en: So, in this article, I intend to clear any and all confusion surrounding these
    cryptic keywords and starry expressions and show you almost all the scenarios
    you can use them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这篇文章中，我打算澄清所有关于这些神秘关键词和星光表达的混乱，并向你展示几乎所有可以使用它们的场景。
- en: Let’s get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Unpacking iterables
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解包可迭代对象
- en: When the asterisk is used between two variables or Python objects, it is usually
    for multiplication or exponentiation. But, when used *before* variables or iterable
    objects, it turns into a totally different beast.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当星号用于两个变量或Python对象之间时，通常是用于乘法或幂运算。但是，当用于*变量*或可迭代对象之前时，它就变成了完全不同的东西。
- en: An iterable is a Python object that you can iterate over, such as a string,
    tuple, list, dictionary, set, etc.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可迭代对象是一个你可以遍历的Python对象，比如字符串、元组、列表、字典、集合等。
- en: By putting an asterisk in front of any iterable or a variable holding an iterable,
    you can break apart (unpack) all its elements.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在任何可迭代对象或持有可迭代对象的变量前面放置星号，你可以拆解（解包）所有的元素。
- en: 'Exhibit A:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 展示A：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice how printing an unpacked iterable isn’t the same as printing it on its
    own:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，打印解包的可迭代对象与单独打印它是不一样的：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The difference is that in the first `print` call, we passed all the elements
    of a list to `print` as *individual arguments* (25 in fact). In the second one,
    we are passing the list as a whole - as a single argument to `print`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于，在第一次`print`调用中，我们将列表的所有元素作为*单独的参数*（实际上是25个）传递给`print`。在第二次调用中，我们将整个列表作为一个参数传递给`print`。
- en: So, scenario zero — use iterable unpacking to pass all elements of an iterable
    as *individual arguments* to some function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，场景零——使用可迭代解包将可迭代对象的所有元素作为*单独的参数*传递给某个函数。
- en: 'Exhibit B with strings:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 展示B中的字符串：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With loops, it would have went like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用循环，它会是这样：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will see more variants of this scenario later.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会看到这个场景的更多变体。
- en: Dictionary unpacking
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典解包
- en: Scenario one — use the double asterisk `**` operator to unpack dictionaries
    (only dictionaries).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 场景一——使用双星号`**`操作符解包字典（仅字典）。
- en: This scenario has many variants, too. One of them is passing dictionary items
    as keyword arguments into functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个场景也有许多变体。其中之一是将字典项作为关键字参数传递给函数。
- en: 'For example, consider the following `author` dictionary which contains the
    exact same keys as the arguments of the `pretty_print` function:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下包含与`pretty_print`函数参数完全相同键的`author`字典：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To pass the contents of `author` into `pretty_print`, we would have to write
    this ugly piece of code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`author`的内容传递给`pretty_print`，我们需要写下这段难看的代码：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'But we don’t have to; we can just use double asterisks to unpack the items:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不必这样做；我们可以使用双星号来解包项：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These two scenarios are enough to understand `args` and `kwargs`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个场景足以理解`args`和`kwargs`。
- en: Let’s move on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。
- en: Positional vs. keyword arguments
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位置参数与关键字参数
- en: One last thing before that — let’s quickly recap the differences between positional
    and keyword arguments in Python functions so there won’t be any confusion or name-calling
    later.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前最后一件事——让我们快速回顾一下Python函数中位置参数和关键字参数的区别，以避免以后出现混淆或误解。
- en: 'One sentence summary of the differences: positional arguments love **order**
    while keyword arguments love **explicitness**.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 区别的一个句子总结：位置参数偏爱**顺序**，而关键字参数偏爱**明确性**。
- en: 'Let’s look at a function with four arguments for further differences:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看一个有四个参数的函数来进一步了解区别：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Positional arguments**:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**位置参数**：'
- en: Don’t have a default value like `price` and `quantity`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不像`price`和`quantity`那样有默认值。
- en: Can’t be skipped. You should always provide values to them when calling functions.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不能省略。当调用函数时，你应该始终提供这些值。
- en: Require order. You can’t switch two positionals if you want to make sense or
    avoid nasty errors.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要顺序。如果你想让代码有意义或避免错误，你不能交换两个位置参数。
- en: Don’t care about names. They care about the position.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不关心名称。它们关心的是位置。
- en: Keep function definitions short and sweet.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持函数定义简短明了。
- en: Can be hard to understand, especially when dealing with functions with many
    arguments.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能很难理解，尤其是在处理有很多参数的函数时。
- en: 'On the other hand, **keyword arguments**:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**关键字参数**：
- en: Always have a default value, which means you can skip them when calling functions.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终有一个默认值，这意味着你可以在调用函数时省略它们。
- en: Don’t care about the order. You can pick and choose any of them at any time,
    irrespective of the order they were defined in the function signature.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不关心顺序。你可以随时选择任何一个，而不管它们在函数签名中定义的顺序。
- en: Offer precision and clarity. They let you explicitly specify which argument
    corresponds to which parameter.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供精确性和清晰度。它们让你可以明确指定哪个参数对应哪个实参。
- en: Enhance function documentation. They serve as mini-labels of what they do.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增强函数文档。它们作为功能的小标签来展示它们的作用。
- en: See [this discussion](https://stackoverflow.com/questions/9450656/positional-argument-vs-keyword-argument)
    for more details.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[这个讨论](https://stackoverflow.com/questions/9450656/positional-argument-vs-keyword-argument)以获取更多细节。
- en: Unknown number of positional arguments
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不确定数量的位置参数
- en: 'There is a common case of Python functions that don’t know how many positional
    arguments they require. For example, consider this one that calculates the geometric
    average of three numbers:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种常见的Python函数不知道需要多少个位置参数。例如，考虑这个计算三个数字几何平均数的函数：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What happens if you want to generalize to four numbers? Or five? Or six? You
    know where I am going with this…
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将其推广到四个数字怎么办？或者五个？或者六个？你知道我在说什么…
- en: We want the function to calculate the geometric average of as many numbers as
    we want.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望函数能够计算任意数量数字的几何平均数。
- en: 'So, here is the second scenario of the asterisk operator: defining functions
    that accept an **undefined number** of positional arguments.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里是星号操作符的第二种场景：定义接受**不确定数量**位置参数的函数。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You enter the second scenario by putting `*args` into a function definition,
    allowing you to pass however many values without raising any errors:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`*args`放入函数定义中，你进入了第二种场景，允许你传递任意多个值而不会引发错误：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: But what does `*args` actually mean?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但`*args`实际是什么意思？
- en: 'Under the hood, when we passed the six numbers separated by commas to `geometric_average`,
    `*args` collected them into a tuple:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，当我们将用逗号分隔的六个数字传递给`geometric_average`时，`*args`将它们收集成一个元组：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, in this scenario, we are performing packing, rather than *unpacking*.
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，我们进行的是打包，而不是*解包*。
- en: 'OK, since `args` is now a regular tuple, we can iterate over its elements and
    finish the rest of the function:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，既然`args`现在是一个普通的元组，我们可以迭代它的元素并完成函数的其余部分：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using the keyword `args` is only a convention. In fact, you can change it to
    a more readable word like `numbers`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键字`args`只是一个约定。事实上，你可以将其更改为更易读的词，如`numbers`：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Unknown number of keyword arguments
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不确定数量的关键字参数
- en: 'The next (third) scenario is when a function can accept an arbitrary number
    of keyword arguments. And you guessed it, this is where `**kwargs` come in:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个（第三个）场景是当一个函数可以接受任意数量的关键字参数。你猜对了，这就是`**kwargs`的用武之地：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`pickle_model` saves machine learning models to disk in pickle format. It has
    two required positional arguments for the model object itself and the path to
    save it.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`pickle_model`将机器学习模型以pickle格式保存到磁盘。它有两个必需的位置参数，一个是模型对象本身，另一个是保存路径。'
- en: Optionally, the user can pass whatever additional information about the model
    like hyperparameter values, the version number, model author, etc. as keyword
    arguments.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以选择传递关于模型的额外信息，如超参数值、版本号、模型作者等，作为关键字参数。
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: and there wouldn’t be any errors.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 并且不会有任何错误。
- en: 'Like `args`, `kwargs` is a name you can change to just about anything else:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 和`args`一样，`kwargs`是一个你可以更改为几乎任何其他名称的名称：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'But unlike `args`, `kwargs` is a dictionary. This means you can access its
    contents either through a look-up (this can lead to errors) or iterating with
    `.items()`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但不同于`args`，`kwargs`是一个字典。这意味着你可以通过查找（这可能导致错误）或使用`.items()`迭代来访问它的内容：
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The order of everything
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一切的顺序
- en: 'There are a few rules you must follow when mixing arguments in both function
    signatures and calls:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在混合参数时，无论是在函数签名还是调用中，你必须遵循一些规则：
- en: Positional arguments always come first.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 位置参数总是优先。
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Positional arguments can’t be skipped (already said that).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 位置参数不能被跳过（已说过）。
- en: '`*args` and `**kwargs` can be skipped entirely when calling functions:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用函数时可以完全跳过`*args`和`**kwargs`：
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In that case, `args` will be an empty list and `kwargs` will be an empty dictionary.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`args`将是一个空列表，`kwargs`将是一个空字典。
- en: '3\. All types of arguments can be stand-alone, meaning you don’t have to have
    a mix of arguments for a function:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 所有类型的参数可以是独立的，这意味着你不必混合使用函数的参数：
- en: '[PRE31]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '4\. You can’t pass positional arguments after keyword arguments:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 在关键字参数后不能传递位置参数：
- en: '[PRE32]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 5\. `*args` must always come *after* positional arguments and *before* keyword
    arguments.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. `*args`必须始终在位置参数之后和关键字参数之前。
- en: 6\. `**kwargs` should always be the last.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. `**kwargs`应该始终是最后一个。
- en: The grand scenario
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏大的场景
- en: 'Even though not very grand, it is a handy trick introduced in latest versions
    of Python. Consider this function signature:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不算宏大，但这是在最新版本的Python中引入的一个方便技巧。考虑这个函数签名：
- en: '[PRE34]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Right in the middle of everything, we see an asterisk standing on its own, not
    attached to anything. What does it mean?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在一切的中间，我们看到一个独立的星号，没有附加任何东西。这是什么意思？
- en: 'This **asterisk-on-its-own** syntax forces you to use keyword arguments *explicitly*
    all the time. For example, let’s define `weird` without the asterisk and call
    it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这种**独立星号**语法强制你始终*显式*使用关键字参数。例如，我们定义`weird`而没有星号，并调用它：
- en: '[PRE35]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: No errors. For `default`, we passed 3 but didn't write `default=3` to make the
    call shorter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 没有错误。对于`default`，我们传递了3但没有写`default=3`以使调用更简洁。
- en: 'Now, let’s try the same with asterisk present:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试带有星号的相同内容：
- en: '[PRE36]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We get a `TypeError`! It is telling us that we passed one too many positional
    arguments. In other words, we must use the following syntax:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到一个`TypeError`！它告诉我们传递了一个多余的位置参数。换句话说，我们必须使用以下语法：
- en: '[PRE38]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now, it is error-free again. This syntax was introduced to make function calls
    more readable, especially for functions and classes that accept many arguments.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它又没有错误了。这种语法的引入是为了使函数调用更具可读性，特别是对于接受许多参数的函数和类。
- en: 'Sklearn widely adopted this feature in its recent versions. For example, here
    is the docs for `RandomForestRegressor`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Sklearn在其最近的版本中广泛采用了这一特性。例如，这里是`RandomForestRegressor`的文档：
- en: '![](../Images/44ed9a8881e2a8a4aaed7ac02c5319a4.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44ed9a8881e2a8a4aaed7ac02c5319a4.png)'
- en: Image by me
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: 'In the past, certain pros who swallowed the docs would just write code like:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，某些阅读文档的高手会这样写代码：
- en: '[PRE39]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'And a beginner would be left baffled upon reading it. But with the addition
    of the asterisk, all keyword arguments after `n_estimators` must be explicitly
    specifed:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者读到它会感到困惑。但是添加了星号后，所有在`n_estimators`之后的关键字参数必须被明确指定：
- en: '[PRE40]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Various tricks with unpacking
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 各种解包技巧
- en: Asterisk unpacking can be used in many ways other than functions signatures
    and calls. In this section, I will list a few of them without going too much into
    the details.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 星号解包可以用于许多方式，除了函数签名和调用。在本节中，我将列出其中一些，而不深入细节。
- en: '0\. Merging two iterables:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 0\. 合并两个可迭代对象：
- en: '[PRE41]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Extending iterables
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展可迭代对象
- en: '[PRE46]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 2\. Formatting strings with dictionary items
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 使用字典项格式化字符串
- en: '[PRE48]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 3\. Unpacking into variables
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 解包到变量中
- en: '[PRE50]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 4\. Discarding values
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 丢弃值
- en: '[PRE52]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 5\. Unpacking nested lists
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 解包嵌套列表
- en: '[PRE54]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 6\. Transposing a list of lists (a matrix)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 转置列表的列表（矩阵）
- en: '[PRE56]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: I’d like you to pause and ponder why each of these examples work without errors,
    especially the ones that don’t even involve the asterisk operator like the fifth
    one.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你暂停思考为什么这些例子都能正常工作，尤其是那些甚至没有涉及星号运算符的第五个例子。
- en: Do you know any other trick yourself? Don’t be shy — share it in the comments.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你自己知道其他技巧吗？不要害羞——在评论中分享一下吧。
- en: Conclusion
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The quirkiness of Python knows no bounds and the use of asterisks along with
    `args` and `kwargs` is certainly an example of this.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的怪癖无穷无尽，星号的使用加上`args`和`kwargs`无疑就是一个例子。
- en: The key is to embrace this quirkiness and move past the initial discomfort for
    they can be great tools in making your code more elegant, readable and of course,
    a bit weird.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是接受这种怪癖，克服最初的不适，因为它们可以成为使你的代码更优雅、可读的绝佳工具，当然，也有点奇怪。
- en: Thank you for reading!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章，并且，面对现实，它的奇特写作风格？想象一下如果你能访问到更多类似的文章，全部由一位才华横溢、迷人、机智的作者（顺便说一下，就是我 :)）所写。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需4.99美元会员，你将不仅能访问我的故事，还能获得来自 Medium 上最优秀思想的知识宝库。如果你使用 [我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我的超级感谢和一个虚拟的高五，感谢你支持我的工作。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----a905c36467a2--------------------------------)
    [## Join Medium with my referral link - Bex T.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入 Medium - Bex T.](https://ibexorigin.medium.com/membership?source=post_page-----a905c36467a2--------------------------------)'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得对我所有⚡高级⚡内容以及 Medium 上所有内容的独家访问权。通过购买我一杯咖啡来支持我的工作…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----a905c36467a2--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----a905c36467a2--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)'
- en: Image by me with Midjourney
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我使用 Midjourney 制作
- en: 'References:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献：
- en: '[1] RealPython, [Python args and kwargs: Demystified](https://realpython.com/python-kwargs-and-args/),
    2019, realpython.com'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] RealPython, [Python args and kwargs: Demystified](https://realpython.com/python-kwargs-and-args/)，2019，realpython.com'
- en: '[2] Trey Hunner, [Asterisks in Python: what they are and how to use them](https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/),
    2018, treyhunner.com'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Trey Hunner, [Asterisks in Python: what they are and how to use them](https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/)，2018，treyhunner.com'
