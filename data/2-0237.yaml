- en: How to use React to build Web Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 React 构建 Web 应用
- en: 原文：[https://towardsdatascience.com/a-step-by-step-guide-to-develop-a-map-based-application-part-ii-6d3fa7dbd8b9](https://towardsdatascience.com/a-step-by-step-guide-to-develop-a-map-based-application-part-ii-6d3fa7dbd8b9)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-step-by-step-guide-to-develop-a-map-based-application-part-ii-6d3fa7dbd8b9](https://towardsdatascience.com/a-step-by-step-guide-to-develop-a-map-based-application-part-ii-6d3fa7dbd8b9)
- en: A Step-By-Step Guide to Develop a Map-Base Application (Part II)
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发基于地图的应用程序的逐步指南（第二部分）
- en: '[](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)[![Jacky
    Kaub](../Images/e66c699ee5a9d5bbd58a1a72d688234a.png)](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)
    [Jacky Kaub](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)[![Jacky
    Kaub](../Images/e66c699ee5a9d5bbd58a1a72d688234a.png)](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)
    [Jacky Kaub](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)
    ·20 min read·Feb 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)
    ·阅读时间 20 分钟·2023年2月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6a0d5cd09cb96bc373b944c80753e707.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a0d5cd09cb96bc373b944c80753e707.png)'
- en: Photo by [Lautaro Andreani](https://unsplash.com/@lautaroandreani?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 [Lautaro Andreani](https://unsplash.com/@lautaroandreani?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Maps are a powerful tool for visualizing and understanding geographic data but
    they need specific skills to be designed efficiently.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 地图是可视化和理解地理数据的强大工具，但需要特定的技能才能高效设计。
- en: In this step-by-step guide, we are going to take a deep dive into building a
    map-based application to show the customer's prices of gas stations around them.
    We will cover the different key steps of a product, from original proof of concept
    (POC) to the minimum viable product (MVP)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这份逐步指南中，我们将深入探讨构建一个基于地图的应用程序，以展示周围加油站的客户价格。我们将涵盖产品的不同关键步骤，从最初的概念验证（POC）到最小可行产品（MVP）。
- en: 'Articles in the series:'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列文章：
- en: '[Part I: The proof-of-concept — Build a minimalist demo](https://medium.com/p/757766b04f77)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一部分：概念验证——构建一个极简演示](https://medium.com/p/757766b04f77)'
- en: 'Part II: How to use React to build web apps (Static Layout)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分：如何使用 React 构建 Web 应用（静态布局）
- en: '[Part III: Add Interactivity to your web apps with React](/a-step-by-step-guide-to-develop-a-map-based-application-part-iii-ad501c4aa35b)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三部分：使用 React 为你的 Web 应用添加互动性](/a-step-by-step-guide-to-develop-a-map-based-application-part-iii-ad501c4aa35b)'
- en: '[Part IV: Build a back-end with PostgreSQL, FastAPI, and Docker](https://medium.com/towards-data-science/build-a-back-end-with-postgresql-fastapi-and-docker-7ebfe59e4f06)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四部分：使用 PostgreSQL、FastAPI 和 Docker 构建后端](https://medium.com/towards-data-science/build-a-back-end-with-postgresql-fastapi-and-docker-7ebfe59e4f06)'
- en: A bit of context around this article
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这篇文章的背景
- en: In this article, we will continue our work on the Gas Station Finder Application
    that was initiated previously. This time, we will focus on preparing the first
    version of the web application that can run locally using static datasets. The
    web application will be built using **the React framework** and this article will
    provide as much detail as possible for someone who is new to the framework.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将继续之前开始的加油站定位器应用的工作。这一次，我们将专注于准备可以使用静态数据集在本地运行的 Web 应用程序的第一个版本。该 Web
    应用程序将使用**React 框架**构建，本文将尽可能详细地介绍给那些对该框架不太熟悉的读者。
- en: I decided to go with React for this application as it is a compelling framework
    that only a few data scientists/data analysts are currently using. If you have
    been ever frustrated by the rigidity of other frameworks, I hope you will find
    in this article an alternative way to design your web application. You will see
    that the learning curve might look a bit steep at the beginning, (especially if
    you are not familiar with HTML/CSS/javascript), but once mastered, having this
    framework in your toolbox will open up a lot of opportunities for building dynamic,
    user-friendly and scalable web applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定为这个应用程序使用 React，因为它是一个令人信服的框架，目前只有少数数据科学家/数据分析师在使用。如果你曾对其他框架的僵化感到沮丧，我希望你会在本文中找到一种设计
    web 应用程序的替代方法。你会发现，学习曲线一开始可能看起来有点陡峭（尤其是如果你对 HTML/CSS/JavaScript 不熟悉），但一旦掌握，将这个框架加入你的工具箱将为构建动态、用户友好且可扩展的
    web 应用程序打开许多机会。
- en: 'Note: The article will not include all the code, only snippets to illustrate
    key principles, but the full code can be found on [my GitHub page](https://github.com/jkaub/fuel-station-viewer-react).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：本文不会包括所有代码，仅提供片段以说明关键原则，但完整代码可以在 [我的 GitHub 页面](https://github.com/jkaub/fuel-station-viewer-react)
    上找到。
- en: By the end of the article, we will have a layout of our React Application, and
    in the next part, we will focus on adding interactivity to it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到文章结束时，我们将拥有我们的 React 应用程序的布局，在下一部分，我们将专注于为其添加互动性。
- en: '![](../Images/d199843b195d293642b7e1c26eb7b3e6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d199843b195d293642b7e1c26eb7b3e6.png)'
- en: The application “static” render by the end of the article, Author Illustration
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文章结束时，应用程序将“静态”渲染，作者插图
- en: Why use React?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用 React？
- en: There are many tools and frameworks available to build nice and powerful web
    applications. Some of the most adopted frameworks in the data science ecosystem
    include [**Dash**](https://dash.plotly.com/) or [**Streamlit**](https://streamlit.io/).
    One of the big advantages of those tools is their simplicity and ease of use,
    which can be very efficient and sufficient for some of your use cases, especially
    if you are using mainly python.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具和框架可以用来构建漂亮而强大的 web 应用程序。在数据科学生态系统中，一些最常用的框架包括 [**Dash**](https://dash.plotly.com/)
    或 [**Streamlit**](https://streamlit.io/)。这些工具的一个大优势是它们的简单性和易用性，对于一些使用场景来说非常高效且足够，特别是如果你主要使用
    Python。
- en: Nevertheless, it comes with a trade-off on flexibility and customization, and
    if your application starts to be more complex, the amount of time to develop your
    features within those frameworks will grow exponentially.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这也带来了灵活性和自定义的权衡，如果你的应用程序变得更加复杂，开发这些框架中的功能所需的时间将呈指数级增长。
- en: React, on the other hand, is a framework that is more performant and allows
    for more flexibility. It also encourages the use of a modular and component-based
    architecture, which is appreciable when having to add new features and do the
    maintenance of the project. Finally, it is part of the JavaScript ecosystem, which
    is one of the largest and most popular ecosystems in the world.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，React 是一个性能更强且允许更多灵活性的框架。它还鼓励使用模块化和基于组件的架构，这在添加新功能和维护项目时非常有用。最后，它是 JavaScript
    生态系统的一部分，而 JavaScript 生态系统是世界上最大和最受欢迎的生态系统之一。
- en: Despite its advantages, you might be reluctant in learning the framework, especially
    if you come from the python world. Not only would you have to learn the framework
    itself, but also probably some javascript, HTML, and CSS, which can be very time-consuming.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些优势，你可能会对学习该框架感到犹豫，尤其是如果你来自 Python 世界。你不仅需要学习框架本身，还可能需要学习一些 JavaScript、HTML
    和 CSS，这可能会非常耗时。
- en: Regarding HTML and CSS, a basic knowledge of those languages is in any case
    needed even if you try to go deeper into your application (even in dash or streamlit).
    Javascript might be a bit more challenging, especially if you are not so much
    familiar with object-oriented and asynchronous programming, but once learned,
    it will potentially give you access to a more easy and efficient way of developing
    web apps (as well as sharpening your programming skills)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 HTML 和 CSS，即使你打算深入应用程序（即使是在 Dash 或 Streamlit 中），也需要对这些语言有基本了解。JavaScript
    可能会稍微有些挑战，特别是如果你不太熟悉面向对象和异步编程，但一旦学会，它将可能让你更轻松高效地开发 web 应用程序（同时提高你的编程技能）。
- en: Setup the Project
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: To start a project powered by react, you first need to install Node.js on your
    computer, which is the runtime environment used to run javascript.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个由 React 提供支持的项目，你首先需要在计算机上安装 Node.js，它是用于运行 JavaScript 的运行时环境。
- en: Node.js can be downloaded [here](https://nodejs.org/en/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 可以在[这里](https://nodejs.org/en/)下载。
- en: '*Side note: Things are changing fast. I wrote this article in March 2023 and
    I am using* ***React 18.2.0\.*** *If you read this article years after its publication,
    it might be a bit outdated. So be careful with what you will read below.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*附注：事情变化很快。我在 2023 年 3 月写了这篇文章，我正在使用* ***React 18.2.0\.*** *如果你在文章发布多年后阅读它，可能会有些过时。因此，请注意以下内容。*'
- en: Create a new project
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: Once installed, we will use **npx/npm** (roughly the equivalent of pip in python)
    to set up a react project via the command “create-react-app”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完毕，我们将使用**npx/npm**（大致相当于 Python 中的 pip）通过命令“create-react-app”来设置 React
    项目。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running this command in a CLI will automatically download all the required
    packages and set up your project in the following folders:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CLI 中运行此命令将自动下载所有所需的包，并在以下文件夹中设置你的项目：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This might look complicated, let us go into details file by file:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能很复杂，让我们逐文件详细了解：
- en: '**node_modules/**: This folder contains all the packages and dependencies that
    you will add to your project using npm. In general, you should leave this folder
    untouched.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**node_modules/**：此文件夹包含所有使用 npm 添加到项目中的包和依赖项。通常，你应该保持这个文件夹不变。'
- en: '**public/**: This folder contains static files used for your project. It is
    populated by default with basic files to run the default page that is generated
    when you initiate a new project.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**public/**：此文件夹包含项目使用的静态文件。默认情况下，它包含基本文件，以运行在启动新项目时生成的默认页面。'
- en: '**src/**: This folder is the core of your application and contains its source
    code. This is where we will write the code of our application. It is populated
    initially with files to run the default page that is generated when you initiate
    a new project.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**src/**：此文件夹是应用程序的核心，包含其源代码。我们将在这里编写应用程序的代码。最初，它包含运行默认页面的文件，当你启动一个新项目时会生成这个页面。'
- en: '**package-lock.js**on: This file is the equivalent of requirement.txt. It contains
    all the dependencies and exact versions of the packages that are installed using
    npm.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**package-lock.js**：此文件相当于 requirement.txt。它包含所有依赖项和通过 npm 安装的包的确切版本。'
- en: '**package.json**: This file is the equivalent of setup.py and it specifies
    project metadata.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**package.json**：此文件相当于 setup.py，指定了项目的元数据。'
- en: Running the project
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行项目
- en: In this part of the life cycle of the project (basically building and testing
    locally), we will use a development server which is a built-in feature of the
    **create-react-app** tool. This is good for making quick developments but is not
    robust enough for production purposes, and we will talk about this in another
    article.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的这一生命周期阶段（基本上是在本地构建和测试），我们将使用**create-react-app**工具的内置开发服务器。这对于快速开发很有用，但不够稳定，不能用于生产目的，我们将在另一篇文章中讨论这一点。
- en: 'To run your test server, simply go to your project folder and run the following
    command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试服务器，只需进入项目文件夹并运行以下命令：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/49b43591d6b4245ca1ab3df1a93c5fa9.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49b43591d6b4245ca1ab3df1a93c5fa9.png)'
- en: This will automatically open a new webpage in your default browser with the
    default page imitated in any new react project.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动在你的默认浏览器中打开一个新网页，显示任何新 React 项目中模仿的默认页面。
- en: the “localhost” means we are running the server on our own computer, while “:3000"
    indicates the port number of the application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “localhost” 意味着我们在自己的计算机上运行服务器，而 “:3000" 表示应用程序的端口号。
- en: '![](../Images/ee1397845e75512bbb1551671423dc81.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ee1397845e75512bbb1551671423dc81.png)'
- en: The react default app, , Author Illustration
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 React 应用，作者插图
- en: Installing required package
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装所需的包
- en: React has a large ecosystem and many packages are open sources and will simplify
    your life.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: React 拥有一个庞大的生态系统，许多包是开源的，会简化你的工作。
- en: In particular, for this project, we are going to use **react-plotly.js**, a
    wrapper of plotly made for react applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，对于这个项目，我们将使用**react-plotly.js**，这是一个为 React 应用程序制作的 Plotly 封装器。
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Part of very interesting packages, I can also mention **react-router-dom,**
    a powerful URL mapper to manage multi-page applications, and **uuid**, a package
    designed to generate automatic ids based on the latest standards. I will not use
    them today, but this is part of the must-known packages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些非常有趣的包，我还可以提到 **react-router-dom**，这是一个强大的 URL 映射器，用于管理多页面应用程序，以及 **uuid**，这是一个根据最新标准生成自动
    ID 的包。我今天不会使用它们，但它们是必须了解的包。
- en: Improve the coding experience
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升编码体验
- en: I will code the project using **VSCode**. Many extensions are available in order
    to simplify your life while developing a React web app.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 **VSCode** 编写项目。许多扩展可用，以简化开发 React 网页应用程序时的工作。
- en: Let’s talk briefly about some of them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 简要谈谈其中的一些。
- en: '**ES7 React/Redux/GraphQL/React-Native snippets:** This extension provides
    a lot of shortcuts to quickly set some template code.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**ES7 React/Redux/GraphQL/React-Native snippets：** 这个扩展提供了许多快捷方式，用于快速设置一些模板代码。'
- en: '![](../Images/dd233320407e87ff500386bb37ffaa73.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd233320407e87ff500386bb37ffaa73.png)'
- en: ES7 in action, Author Illustration
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ES7 动作，作者插图
- en: '**Emmet:** This plugin allows for fast coding by providing also a lot of shortcuts
    and abbreviations to automatically generate code.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Emmet：** 这个插件通过提供许多快捷方式和缩写来自动生成代码，从而实现快速编码。'
- en: '![](../Images/256029e5e1306d8888f71b1a44dc51cc.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/256029e5e1306d8888f71b1a44dc51cc.png)'
- en: Emmet in action, Author Illustration
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Emmet 动作，作者插图
- en: '**Prettier:** This extension automatically formats your code when you save
    your files.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Prettier：** 这个扩展在你保存文件时会自动格式化你的代码。'
- en: Build the layout
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建布局
- en: Now that our environment is properly set up, we can start to build our application.
    As mentioned in the previous part, this will be done mainly after modifying the
    files in the src/ folder.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的环境已经正确设置，我们可以开始构建我们的应用程序。正如前面部分所提到的，这主要是在修改 src/ 文件夹中的文件后完成的。
- en: 'Let’s look a bit at what is inside there:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微看一下里面的内容：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The only file of interest for us will be **App.js** and we will go into more
    detail about it later. Regarding the other files, quickly:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说唯一感兴趣的文件是 **App.js**，我们稍后会详细讨论。关于其他文件，简要说明：
- en: '**index.js** is responsible for the rendering of the application. We will not
    touch this file'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**index.js** 负责应用程序的渲染。我们将不会修改这个文件'
- en: '**reportWebVitals.js** is used to report the performance metrics of the web
    page to an analytic service, and in our level of use of React, will not be used.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**reportWebVitals.js** 用于将网页的性能指标报告给分析服务，在我们使用 React 的层级中，将不会使用。'
- en: '**setupTests.js** is a file used to set up a testing environment. Also out
    of the scope of this article and we will leave it untouched'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**setupTests.js** 是一个用于设置测试环境的文件。这也超出了本文的范围，我们将不做修改'
- en: '**logo.svg** is simply an image used in the default page when you create the
    project and can be deleted'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logo.svg** 仅仅是创建项目时在默认页面中使用的一张图片，可以删除'
- en: '**App.css** and **index.css** contain some basic .css for your web app, that
    could eventually be modified to give another style if you need to.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**App.css** 和 **index.css** 包含一些基本的 .css 文件，用于你的网页应用，如果需要，可以修改以实现不同的样式。'
- en: Application Architecture
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序架构
- en: 'In react, we build an application by assembling custom components. As a best
    practice, each component will be made of two files:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中，我们通过组合自定义组件来构建应用程序。作为最佳实践，每个组件将由两个文件组成：
- en: 'a .js file used to code the logic of the component: what it does, how it manages
    its internal state, and how it propagates its state to its parents and children
    components'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 .js 文件用于编写组件的逻辑：它的功能、如何管理其内部状态以及如何将状态传递给父组件和子组件
- en: a .css file used for the esthetic and formatting of the component
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 .css 文件用于组件的美观和格式设置
- en: 'Let’s take the example of our application and see how our logic will apply.
    We want our App to have basically 3 main components:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以我们的应用程序为例，看看我们的逻辑如何应用。我们希望我们的应用程序基本上有三个主要组件：
- en: A search area form will be used to look for a place and a type of fuel.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个搜索区域表单将用于查找地点和燃料类型
- en: A map that will display the stations, the same way we built it in the previous
    article
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个地图，将显示车站，就像我们在上一篇文章中构建的那样
- en: A table to summarize quickly the main information about the stations around.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个表格用于快速总结周围车站的主要信息
- en: 'This will look something like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将看起来像这样：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This might look like a lot of files and folders, but it will help keep your
    project clean and tidy, which will make your life much easier in the future if
    you need to go back to it to modify or improve your app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有很多文件和文件夹，但这将有助于保持项目的清晰和整洁，如果你将来需要返回修改或改进应用程序，这将使你的生活变得更加轻松。
- en: Application basic layout
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用基础布局
- en: At this point, you might want to build a rough layout of what your app could
    look like. If you don’t have a web designer to help, the best is to look at examples
    of modern apps and get inspiration from them. The Internet is full of templates
    to build nice components, and with basic .css knowledge and the help of those
    templates, you will already be able to do nice and modern elements.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能想要构建一个应用程序的粗略布局。如果你没有网页设计师帮助，最好的办法是查看现代应用程序的示例，从中获取灵感。互联网充满了构建漂亮组件的模板，通过基本的
    .css 知识和这些模板的帮助，你已经能够做出漂亮且现代的元素。
- en: As we start the project, we want to build a primary basic view just to have
    a rough idea about how to organize our components. Half of the job will be basically
    done with such a basic layout as a web application is basically made of boxes
    in boxes in boxes…
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始项目时，我们想要构建一个基本的初始视图，以大致了解如何组织我们的组件。基本布局完成一半，实际上，网页应用程序基本上是由盒子中的盒子构成的……
- en: 'For our web app, let’s keep things simple:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的网络应用程序，我们保持简单：
- en: '![](../Images/a2e720a415e5c6d34f78982ac7911dbc.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2e720a415e5c6d34f78982ac7911dbc.png)'
- en: Basic Application layout, Author Illustration
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 基本应用布局，作者插图
- en: Before going further, we also need to talk about design paradigms. In HTML/CSS,
    you have many ways of organizing your components. My favorite paradigm is [the
    Flexbox paradigm](https://css-tricks.com/snippets/css/a-guide-to-flexbox/), which
    provides an easy way to organize boxes within a container box.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步讨论之前，我们还需要谈谈设计范式。在 HTML/CSS 中，你有很多组织组件的方式。我最喜欢的范式是[Flexbox范式](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)，它提供了一种简单的方法来组织容器内的盒子。
- en: 'Using this paradigm, you set the organization style of your “container box”:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种范式，你可以设置“容器盒子”的组织样式：
- en: How are aligned the children's boxes, in rows, or in columns?
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子盒子的对齐方式是按行还是按列？
- en: Within this structure, how are organized the children's boxes on the main axis?
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个结构中，子盒子是如何在主轴上组织的？
- en: Within this structure, how are organized the children's boxes in the orthogonal
    axis?
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个结构中，子盒子在正交轴上是如何组织的？
- en: The layout used above follows the Flexbox paradigm.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述布局遵循 Flexbox 范式。
- en: 'The gray area is the main container. We want it to contain two “div” (which
    are the box in HTML language) organized in columns: One containing the header
    (a title with sometimes some menu options) and one containing the main components.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 灰色区域是主要容器。我们希望它包含两个“div”（即 HTML 语言中的盒子），按列组织：一个包含头部（一个标题，有时还有一些菜单选项），另一个包含主要组件。
- en: 'That div will be organized in a row in such a way that it divides the space
    in two: in the left part, we will have a div (in orange) for the filtering component
    and the table with the prices, and in the right, the map component which will
    take the remaining space.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 div 将以行的方式组织，从而将空间分成两部分：左侧部分，我们将有一个 div（橙色）用于过滤组件和价格表格，而右侧部分，将有地图组件，占据剩余空间。
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <StationsMap />, <StationsTable />, and <StationsFilter /> will be the custom
    components that we are going to build in the coming section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <StationsMap />、<StationsTable /> 和 <StationsFilter /> 将是我们将在接下来部分构建的自定义组件。
- en: App.css will contain the .css of our container boxes, let’s have a look!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: App.css 将包含我们容器盒子的 .css，来看看吧！
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**display: flex** indicates that the containers are “flex-boxes” and that the
    children''s boxes will be organized following this paradigm'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**display: flex** 指示容器是“弹性盒子”，子盒子将按照这个范式进行组织'
- en: '**flex-direction** indicates if the boxes are organized in a row or in a column'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**flex-direction** 指示盒子是按行还是按列组织的'
- en: '**align-items** organize the alignment in the secondary direction'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**align-items** 用于在次要方向上组织对齐'
- en: '**justify-content** (not used here) organize the alignment in the main direction'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**justify-content**（这里未使用）用于在主方向上组织对齐'
- en: Initiate the components
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化组件
- en: Now that all of the above is set up, let’s initialize our components with a
    basic version for all of them, which we will improve over time.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有上述内容都已设置，让我们用基本版本初始化所有组件，我们将随着时间的推移进行改进。
- en: In StationsFilter.js, we are going to use the shortcut “rfc” (as shown in the
    .gif in the previous section) that will directly generate the template for our
    component, and also add an import statement for the corresponding .css file.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 StationsFilter.js 中，我们将使用快捷方式“rfc”（如前一部分中的 .gif 所示），这将直接生成我们的组件模板，并添加相应 .css
    文件的导入语句。
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This little piece of code indicates with “export default” that the function
    StationsFilter can be later directly imported in another file like:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段小代码通过“export default”指示函数 StationsFilter 以后可以直接在另一个文件中导入，如：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'and used in its own HTML tag:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 并在其自身的 HTML 标签中使用：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let’s make the same template for StationsMap.js and StationsTable.js, I will
    pass on the code snapshot here, which is exactly identical to what we did before.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 StationsMap.js 和 StationsTable.js 制作相同的模板，我将在这里传递代码快照，它与我们之前做的完全相同。
- en: Working on the Filter Layout
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理过滤器布局
- en: 'We want the filter to be made of two components:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望过滤器由两个组件组成：
- en: One to look for a place by postal code
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于按邮政编码查找地点
- en: One to select the fuel type
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于选择燃料类型
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s have a look in detail:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看一下：
- en: We first define a box of type “form” in which we will put our form fields and
    the button
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们首先定义一个类型为“form”的框，在其中放置我们的表单字段和按钮
- en: We create an input of type “text” used to receive text. We place a placeholder
    name “Postal Code” which will appear to give an indication to the customers and
    a className for the .css
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建一个“text”类型的输入框，用于接收文本。我们设置了一个占位符名称“邮政编码”，以给客户提供指示，并为 .css 设置了一个 className
- en: We create a Dropdown with the tag <select>.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建一个带有 <select> 标签的 Dropdown。
- en: Inside this Dropdown component, we need to add the options as “children” tags.
    This is done by iterating via an array (the equivalent of a python list) to automatically
    generate all the possibilities.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个 Dropdown 组件中，我们需要将选项作为“children”标签添加。这是通过迭代数组（相当于 Python 列表）来自动生成所有可能性。
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'is equivalent to:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We use the “map” version because it is more compact, and potentially easier
    to maintain: if a new fuel type appears, we can simply modify our fuelTypes array
    and it will generate automatically the corresponding options.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用“map”版本，因为它更紧凑，并且可能更容易维护：如果出现新的燃料类型，我们只需修改我们的 fuelTypes 数组，它将自动生成相应的选项。
- en: Finally, we create a button that will be later the entry point for sending a
    request to the server and retrieve some data to display
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个按钮，稍后将成为发送请求到服务器并检索一些数据以显示的入口点
- en: '*Note: currently nothing is interactive, this will be detailed in the next
    article.*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：目前没有任何互动，这将在下一篇文章中详细说明。*'
- en: '*Note 2: I will not detail the .css here, for most of it I took it by looking
    for inspiration on the internet and it is not necessarily very interesting to
    detail here.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意 2：我不会在这里详细介绍 .css，大部分是通过在互联网上寻找灵感获得的，并不一定在这里详细说明很有趣。*'
- en: 'This is how looks the component on its own:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 组件单独的样子如下：
- en: '![](../Images/4d9abf9234db338a54e4df24f7a7540f.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d9abf9234db338a54e4df24f7a7540f.png)'
- en: The Filter Component, Author Illustration
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器组件，作者插图
- en: Building the Map
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建地图
- en: In order to build the map, we are going to use the **react-plotly** plugin.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建地图，我们将使用 **react-plotly** 插件。
- en: In react, plotly figures are basically made the same way as in python, with
    traces and a layout. The main difference is that instead of using a wrapper to
    build our charts (like go.Scatter) we need to provide the data in the JSON format
    (a dictionary with keys/values).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中，plotly 图形基本上与 Python 中的构建方式相同，都是通过 traces 和 layout。主要的区别在于，我们不使用包装器来构建图表（如
    go.Scatter），而是需要以 JSON 格式（一个包含键值对的字典）提供数据。
- en: If you are used to building your charts in python, don’t panic, it is actually
    very simple to convert your python figure to a react figure.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯用 Python 构建图表，不要惊慌，实际上将你的 Python 图形转换为 React 图形是非常简单的。
- en: 'As a starting point for now and for the illustration, I am going to show you
    how to copy our python figure to a react one. Later, when we will add interactions,
    we will rebuild this map adding good data feeds. This is the map we want to copy
    from our python code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 作为现在的起点和插图，我将展示如何将我们的 Python 图形复制到 React 中。稍后，当我们添加交互时，我们将通过添加良好的数据源来重建此地图。这是我们想从
    Python 代码中复制的地图：
- en: '![](../Images/678a3b01b24d71fb1c575fcaf8eac914.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/678a3b01b24d71fb1c575fcaf8eac914.png)'
- en: The map widget from the python POC, Author Illustration
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python POC 中的地图小部件，作者插图
- en: 'First step: let’s create a .json copy of our chart:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步：让我们创建一个 .json 版的图表：
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you want to have a look at how looks your figure as a python dictionary,
    you can also do fig.to_dict(). In the case of the figure above, this will give
    something looking like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看你的图形作为 Python 字典的样子，你也可以使用 fig.to_dict()。对于上面的图形，这将生成类似于以下的内容：
- en: '[PRE16]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'with, for example, taking the layout and one of the traces of our figure:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，采用布局和我们图形中的一个轨迹：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Most of the fields are generally familiar if you are used to plotly. Note the
    field “type” which specifies the type of trace you are building. In our case “type”:”scattermapbox”,
    equivalent to what we did in python with (go.Scattermapbox() )
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯使用 plotly，大多数字段应该都很熟悉。注意“type”字段，它指定你正在构建的轨迹类型。在我们的例子中，“type”:”scattermapbox”，相当于我们在
    Python 中用 (go.Scattermapbox() )
- en: This can be used directly in react and it is reproducible for any type of figure
    making it very easy to go from a proof of concept in python to its counterpart
    in react.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以直接在 react 中使用，并且可以复用到任何类型的图形中，使得从 Python 中的概念验证过渡到 React 中的对应部分变得非常简单。
- en: Let’s copy the full JSON we generated before in our project and include it in
    the folder of the component StationsMap.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将之前在项目中生成的完整 JSON 复制到 StationsMap 组件的文件夹中。
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can now simply import the file in our StationsMap.js script and use it in
    a react-plotly Figure.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在我们的 StationsMap.js 脚本中简单地导入该文件，并在 react-plotly 图中使用它。
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s have a look in detail:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看：
- en: First, we import simply our JSON object and store it in the variable figJson.
    Done this way, the figJson is a javascript Object, which is the equivalent of
    Python dictionaries which will make the job for our current static view.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们简单地导入我们的 JSON 对象并将其存储在变量 figJson 中。这样做的话，figJson 是一个 JavaScript 对象，相当于
    Python 字典，这将为我们当前的静态视图提供便利。
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then, as we could do in python, we update our layout Object with extra information
    and remove some keys/values. In my case, I set the plotly layout to “autosize”
    which means it will take all the space available, remove all the margin around
    the figure and delete the key/values for “template”, “width”, and “height ” that
    where generated by default from the python figure.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，正如我们在 Python 中所做的，我们更新了我们的布局对象，添加了额外的信息并删除了一些键/值。在我的例子中，我将 plotly 布局设置为“autosize”，这意味着它将占用所有可用空间，去掉图形周围的所有边距，并删除默认由
    Python 图形生成的“template”、“width”和“height”键/值。
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Finally, I declare that the component returned by my StationsMap() function
    is a plotly component including all the traces from my son and the modified layout.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我声明从我的 StationsMap() 函数返回的组件是一个 plotly 组件，包括我儿子所有的轨迹和修改后的布局。
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that you can pass parameters to a component directly inside the tag using
    the format:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以直接在标签中使用以下格式将参数传递给组件：
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the case of a plotly component, we pass a parameter data which is a list
    of objects representing the different traces of the chart, a parameter layout
    which is an object containing the layout information of the chart, and extra parameters
    like “style” or “useResizeHandler” which are parameters to indicate that the div
    generated by plotly should take all the remaining space.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 plotly 组件，我们传递一个 data 参数，它是一个表示图表不同轨迹的对象列表，一个 layout 参数，它是一个包含图表布局信息的对象，还有像“style”或“useResizeHandler”这样的额外参数，这些参数用于指示
    plotly 生成的 div 应该占用所有剩余的空间。
- en: '![](../Images/7838b650aafd89f40f8cd6c97b306065.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7838b650aafd89f40f8cd6c97b306065.png)'
- en: How plotly is rendered as a component of the app, same as the python version,
    Author Illustration
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: plotly 如何作为应用的组件进行渲染，与 Python 版本相同，作者插图
- en: Building the Table
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建表格
- en: 'We are missing one last component to complete our App Layout: a table summarizing
    the information of the surrounding stations.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还缺少一个最后的组件来完成我们的应用布局：一个总结周围车站信息的表格。
- en: Tables are components that can be difficult to design because we need to find
    the right level of information to show. They are usually more difficult to interpret
    than charts, but they are still very useful when you want an overall view of the
    details of your data.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 表格是可能难以设计的组件，因为我们需要找到展示信息的正确级别。它们通常比图表更难以解读，但在你想要数据详细信息的总体视图时仍然非常有用。
- en: 'In the case of our component, we want to provide some of the raw data available
    such as:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的组件，我们想要提供一些可用的原始数据，例如：
- en: the address of the station
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车站的地址
- en: the price of the fuel of interest which is expressed in €/L.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感兴趣的燃料价格以 €/L 表示。
- en: 'On top of that, we can as well transform the data to be more concrete for a
    user, for example:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以将数据转换为对用户更具体的格式，例如：
- en: the total price of an average full tank (say 60L)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均加满一箱油的总价格（比如 60L）
- en: he potential saving or loss in comparison to the average places of the surrounding
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对于周围环境的平均位置，潜在的节省或损失
- en: and why not add a Google Map link so that they can be redirected to Google services
    to get more information about the provided address?
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么不添加一个 Google 地图链接，以便用户可以被重定向到 Google 服务，以获取有关提供地址的更多信息呢？
- en: This looks like nothing, but putting yourself in the shoes of your customers
    is very important. The more clarity you bring to them in one look at the data,
    the more they will like your application and come back.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来没什么，但把自己放在客户的角度是非常重要的。你在一次查看数据时带来的清晰度越多，他们就越喜欢你的应用程序并愿意回来。
- en: 'Given that we are still in a “static view mode”, I will generate a sample of
    data in python based on the default map and use that at first for my layout. There
    are multiple ways of representing a table in a json, I chose to use a list of
    Objects that I find personally more convenient:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们仍然处于“静态视图模式”，我将根据默认地图在 Python 中生成一个数据示例，并首先在我的布局中使用它。表示表格的 json 有多种方式，我选择了使用我个人认为更方便的对象列表：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'I’ll add some tips:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我将添加一些提示：
- en: If you are more comfortable in Python than in Javascript, it is fine. In that
    case, make all your data transformations in Python. We will see in one of the
    coming articles how to connect our React application to a Python API where most
    of the data transformation logic will be handled.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你对 Python 比对 Javascript 更为熟悉，那也没问题。在这种情况下，可以在 Python 中完成所有数据转换。我们将在接下来的文章中看到如何将我们的
    React 应用程序连接到一个 Python API，其中大部分数据转换逻辑将由其处理。
- en: 'Using pandas, you can very easily convert a DataFrame to a list of objects
    and dump it as a json using:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 pandas，你可以非常轻松地将 DataFrame 转换为对象列表，并使用以下方式将其导出为 json：
- en: '[PRE25]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/ec2461d4f416fb3fb803d2570ea4eb38.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec2461d4f416fb3fb803d2570ea4eb38.png)'
- en: An example of DataFrame in python, before dumping in json
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在导出为 json 之前的 Python 中 DataFrame 的示例
- en: As with the plotly figure, let’s copy the file to the relevant folder
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 plotly 图形一样，让我们将文件复制到相关文件夹中。
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that we have a base of work, let’s code the table. This is the general
    layout in HTML:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了工作基础，让我们编写表格。这是 HTML 中的整体布局：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The <table> tag is used to initialize the table. We then define the table line
    by line. We start with the header which is a special part, indicated by the tag
    <thead>, and later by the body (the different rows of the table) in the <tbody>
    tag.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`<table>` 标签用于初始化表格。然后我们按行定义表格。我们从表头开始，这是一个特殊的部分，由 `<thead>` 标签指示，接下来是表体（表格的不同行），位于
    `<tbody>` 标签中。'
- en: Then each line is defined in the same way. <tr> is used to define a full row,
    and <th> a cell in that line. This means that if you have 4 cells in your header,
    you should define your cells in your rows with also 4 cells.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后每一行都按相同的方式定义。`<tr>` 用于定义整行，`<th>` 用于定义该行中的一个单元格。这意味着如果你的表头有4个单元格，你在行中也应定义4个单元格。
- en: 'Now let’s use our static data. As in the last part of the graph, we start by
    importing the pre-generated .json with the data:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用我们的静态数据。和图形的最后部分一样，我们开始导入预生成的 json 数据：
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Remember that this tableJson is an Array of Objects. We can use again the Array.map()
    method to iterate through the Objects of the array and generate dynamically our
    table.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这个 tableJson 是一个对象数组。我们可以再次使用 Array.map() 方法来迭代数组中的对象，并动态生成我们的表格。
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'A few comments here:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个评论：
- en: As we generate dynamically the rows of the table, React will generate a warning
    if we are not identifying each row with a unique key. I decided to pass the address
    which is in my case unique, but another way would have been to generate them automatically
    using an external lib like **uuid**
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们动态生成表格的行，React 将生成警告，如果我们没有使用唯一的键来标识每一行。我决定传递地址，因为在我这儿是唯一的，但另一种方法是使用像 **uuid**
    这样的外部库自动生成它们。
- en: Note that in JSX logic, the variables inside the tag have to be expressed using
    {} to indicate that they are variables (and their value should be accessed in
    the tag or in the parameters of the tag)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，在 JSX 逻辑中，标签内的变量必须使用 {} 表示，以指示它们是变量（它们的值应在标签或标签参数中访问）。
- en: We access the element of an Object in javascript the same way we do in python,
    so you should be familiar with the notation if you come from the python field
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在 JavaScript 中访问对象的元素的方式与在 Python 中相同，因此如果你来自 Python 领域，你应该对这种表示法很熟悉。
- en: I’ll never repeat it enough but keep a clean format. In this case, I don’t display
    only the raw numbers, but I add a suffix (€ or €/L) which makes the data more
    comprehensive
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我无法重复强调，保持格式清晰。在这种情况下，我不仅显示原始数据，还添加了一个后缀（€ 或 €/L），使数据更具可读性
- en: 'We have now a very simple version of the table which looks like this, after
    a bit of formatting with some .css:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了一个非常简单的表格，经过一些 .css 格式化后如下所示：
- en: '![](../Images/2d5e33d5bf9434232a7b833f4bf1f0f6.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d5e33d5bf9434232a7b833f4bf1f0f6.png)'
- en: Our data table, after some formatting, Author Illustration
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据表经过一些格式化处理后，作者插图
- en: 'This version is not a bad start, but we can certainly improve it. First, we
    can add the links to Google Maps as mentioned above. You can pre-compute them
    from the address of the station using the below formula:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本虽然不是一个坏的开始，但我们肯定可以改进。首先，我们可以添加前面提到的 Google Maps 链接。你可以使用以下公式从站点地址预先计算这些链接：
- en: '[PRE30]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then we can generate a hyperlink from the cell of the address in our table
    passing that google link in a <a href> tag:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以从表格中的地址单元格生成一个超链接，将 Google 链接放入 <a href> 标签中：
- en: '[PRE31]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We want to make a last improvement to this table. You might have noticed I
    added in my python table a column named “better than average”? This is a value
    that will help us create a color mapping to quickly see the cheap stations to
    the expensive ones. Let’s create a variable color in our mapping function that
    is by default black, but that can become red or green depending on the “better
    than average” field, and let''s pass that color to the style of the last cell
    of each row:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望对这个表格做最后的改进。你可能已经注意到我在 Python 表格中添加了一个名为“比平均值更好”的列？这是一个将帮助我们创建颜色映射，以快速区分便宜的站点和昂贵的站点的值。让我们在映射函数中创建一个默认为黑色的变量颜色，但根据“比平均值更好”字段可以变为红色或绿色，并将该颜色传递给每行最后一个单元格的样式：
- en: '[PRE32]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And let’s have a look at our final result:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最终结果：
- en: '![](../Images/ca6ca6a392967acc82cfc83d01bd110b.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca6ca6a392967acc82cfc83d01bd110b.png)'
- en: Our final Table component, Author Illustration
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终表格组件，作者插图
- en: Our table is ready, we can now see very easily which stations are the more competitive
    in terms of price, and by a simple click, check their location in Google Maps!
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表格已经准备好，我们现在可以很容易地查看哪些站点在价格方面更具竞争力，并通过简单的点击检查它们在 Google Maps 上的位置！
- en: Final App Layout
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终应用布局
- en: 'At that point, our layout is finalized. We already implemented the main App
    layout in the first chapter:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们的布局已定型。我们在第一章中已经实现了主要的应用布局：
- en: '[PRE33]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So we can simply look at [http://localhost:3000/](http://localhost:3000/) and
    check what it looks like:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以简单地查看 [http://localhost:3000/](http://localhost:3000/) 并检查其外观：
- en: '![](../Images/ae7743a4967e9d6f11b15e61b53171de.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae7743a4967e9d6f11b15e61b53171de.png)'
- en: The final app layout, Author Illustration
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 最终应用布局，作者插图
- en: Note that if you are not satisfied with this layout, given the modularity of
    our code, it is very simple to change it to a different configuration. (In our
    next article, we will also talk about application responsiveness)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您对这个布局不满意，考虑到我们代码的模块化，改变为不同配置是非常简单的。（在下一篇文章中，我们也将讨论应用程序的响应性）
- en: Conclusion
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we continued the work initiated last time about our Station
    Finder Application. In particular, we started to look in detail at the framework
    React to build robust and highly customizable Web Applications.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们继续了上次关于站点查找器应用程序的工作。特别是，我们开始详细了解 React 框架，以构建强大且高度可定制的 Web 应用程序。
- en: We reach a point where we can run a static version of the application on a test
    server locally, but we are still far from having an application fully operational.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经达到了可以在本地测试服务器上运行应用程序静态版本的阶段，但距离拥有完全运行的应用程序仍然很远。
- en: Our React prototype is not done yet, and in the next article, we will continue
    to explore React, focusing this time on interactive features.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 React 原型尚未完成，在下一篇文章中，我们将继续探索 React，这次重点关注交互功能。
