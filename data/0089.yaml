- en: Understand Polars’ Lack of Indexes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Polars 缺乏索引
- en: 原文：[https://towardsdatascience.com/understand-polars-lack-of-indexes-526ea75e413?source=collection_archive---------1-----------------------#2023-01-06](https://towardsdatascience.com/understand-polars-lack-of-indexes-526ea75e413?source=collection_archive---------1-----------------------#2023-01-06)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understand-polars-lack-of-indexes-526ea75e413?source=collection_archive---------1-----------------------#2023-01-06](https://towardsdatascience.com/understand-polars-lack-of-indexes-526ea75e413?source=collection_archive---------1-----------------------#2023-01-06)
- en: Switch from Pandas to Polars and forget about indexes
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Pandas 切换到 Polars，忘记索引吧
- en: '[](https://medium.com/@carlmkadie?source=post_page-----526ea75e413--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page-----526ea75e413--------------------------------)[](https://towardsdatascience.com/?source=post_page-----526ea75e413--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----526ea75e413--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page-----526ea75e413--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@carlmkadie?source=post_page-----526ea75e413--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page-----526ea75e413--------------------------------)[](https://towardsdatascience.com/?source=post_page-----526ea75e413--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----526ea75e413--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page-----526ea75e413--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa5e87027005f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-polars-lack-of-indexes-526ea75e413&user=Carl+M.+Kadie&userId=a5e87027005f&source=post_page-a5e87027005f----526ea75e413---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----526ea75e413--------------------------------)
    ·7 min read·Jan 6, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F526ea75e413&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-polars-lack-of-indexes-526ea75e413&user=Carl+M.+Kadie&userId=a5e87027005f&source=-----526ea75e413---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2Fa5e87027005f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-polars-lack-of-indexes-526ea75e413&user=Carl+M.+Kadie&userId=a5e87027005f&source=post_page-a5e87027005f----526ea75e413---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----526ea75e413--------------------------------)
    ·7 分钟阅读·2023年1月6日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F526ea75e413&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-polars-lack-of-indexes-526ea75e413&user=Carl+M.+Kadie&userId=a5e87027005f&source=-----526ea75e413---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F526ea75e413&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-polars-lack-of-indexes-526ea75e413&source=-----526ea75e413---------------------bookmark_footer-----------)![](../Images/e747b30f039731b4dff5b5663f6733be.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F526ea75e413&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Funderstand-polars-lack-of-indexes-526ea75e413&source=-----526ea75e413---------------------bookmark_footer-----------)![](../Images/e747b30f039731b4dff5b5663f6733be.png)'
- en: 'A Polar Bear racing a Panda — Source: [https://openai.com/dall-e-2](https://openai.com/dall-e-2/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一只北极熊与一只熊猫竞赛——来源：[https://openai.com/dall-e-2](https://openai.com/dall-e-2/)
- en: 'Pandas and Polars are two dataframe libraries for Python. In a [previous article](https://medium.com/towards-data-science/understand-pandas-indexes-1b94f5c078c6),
    I wrote this about Pandas and indexes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 和 Polars 是两个 Python 的数据框库。在[上一篇文章](https://medium.com/towards-data-science/understand-pandas-indexes-1b94f5c078c6)中，我这样写过
    Pandas 和索引的内容：
- en: To efficiently use Pandas, ignore its documentation and learn the [complicated]
    truth about indexes.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了高效使用 Pandas，忽略它的文档，学习关于索引的*[复杂]*真相。
- en: 'In contrast, the original [Polars book](https://web.archive.org/web/20230117102825/https://pola-rs.github.io/polars-book/user-guide/coming_from_pandas.html)
    said this about Polars and indexes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，原始的 [Polars 书籍](https://web.archive.org/web/20230117102825/https://pola-rs.github.io/polars-book/user-guide/coming_from_pandas.html)
    这样说 Polars 和索引：
- en: Indexes are not needed! Not having them makes things easier — convince us otherwise!
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不需要索引！没有它们会使事情变得更简单——说服我们相信相反的观点！
- en: Can we really forget about indexes? Let’s put Polars’ claim to the test. We’ll
    port all the examples in my previous article from Pandas to Polars. That will
    give us insight into the practicality of working without indexes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的可以忘记索引吗？让我们测试一下 Polars 的说法。我们将把我之前文章中的所有示例从 Pandas 移植到 Polars。这将让我们了解在没有索引的情况下工作的实际情况。
- en: 'In the end, we’ll see that:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们将看到：
- en: “Indexes are not needed! Not having them makes things easier.”
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “索引是不必要的！没有索引使事情更简单。”
- en: If you think you *really* need an index, you *really* need a dictionary.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你认为你 *真的* 需要一个索引，你 *真的* 需要一个字典。
- en: To reach that end, let’s start by creating a dataframe and retrieving a simple
    row.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到这一点，我们首先创建一个数据框并检索一行。
- en: Construction and Simple Row Retrieval
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和简单行检索
- en: 'In Pandas, we construct a dataframe and set an index like so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pandas 中，我们这样构建数据框并设置索引：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/fd9bea2dbf3fd94e7eb1fd86561270df.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd9bea2dbf3fd94e7eb1fd86561270df.png)'
- en: 'We turn key `b` into the row of interest with:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用以下方法将关键字`b`转化为感兴趣的行：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/709e72abb7fea9431964ae1127392bd3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/709e72abb7fea9431964ae1127392bd3.png)'
- en: 'In Polars, we could construct a dataframe from rows like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Polars 中，我们可以通过这样的方式从行构建数据框：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, Polars is column-centric, so a better way to construct the same dataframe
    is this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Polars 是以列为中心的，所以构建相同数据框的更好方法是：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/ad4ad59cb36ab7ce4315f568fb1a8a97.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ad4ad59cb36ab7ce4315f568fb1a8a97.png)'
- en: 'We don’t need to set an index. We turn key `b` into the row of interest with:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要设置索引。我们用以下方法将关键字`b`转化为感兴趣的行：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `filter` method finds rows of interest. The expression `pl.col("alpha")=='b'`
    tells `filter` which rows to find. Compared to Pandas, I find the Polars approach
    both simpler and more general. (We’ll discuss performance in a bit.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter` 方法用于查找感兴趣的行。表达式 `pl.col("alpha")==''b''` 告诉 `filter` 要查找哪些行。与 Pandas
    相比，我发现 Polars 的方法更简单、更通用。（我们稍后将讨论性能问题。）'
- en: We move next from finding a simple row to finding the number of a row.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从找到一个简单的行转向找到行的数量。
- en: Finding Row Numbers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找行号
- en: In Pandas, you can see the numbers for rows of interest via `index.get_loc(...):`
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pandas 中，你可以通过 `index.get_loc(...)` 查看感兴趣行的数字：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/0c60b62f4d6fe3a4ab8c4e84e3d06402.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c60b62f4d6fe3a4ab8c4e84e3d06402.png)'
- en: As the example shows, the function will only return a number when a single item
    matches. When multiple items match, it returns a Boolean array.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，函数仅在单个项匹配时返回一个数字。当多个项匹配时，它返回一个布尔数组。
- en: In Polars, you should first ask yourself if you really need to find row numbers.
    The answer is usually “no”. If, however, you answer “yes”, you may use `arg_where`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Polars 中，你应该首先问自己是否真的需要找到行号。答案通常是“否”。但是，如果你回答“是”，你可以使用 `arg_where`。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/35757dd75125a7b196997d939a3b65c3.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/35757dd75125a7b196997d939a3b65c3.png)'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/22da937716a2ecdda97225f4acfba5c9.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22da937716a2ecdda97225f4acfba5c9.png)'
- en: The result is a Polars `series`. In Polars, a `series` represents one column
    of values, here row numbers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个 Polars `series`。在 Polars 中，`series` 代表一列值，这里是行号。
- en: Comparing Pandas to Polars with respect to finding row numbers, I find the complexity
    similar. Polars may win, however, by making row numbers less important.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 比较 Pandas 和 Polars 在查找行号方面的复杂性，我发现两者类似。然而，Polars 可能会通过减少行号的重要性而占据优势。
- en: Let’s look next at complex row access.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们来看复杂的行访问。
- en: Row Access
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行访问
- en: 'In Pandas, the main way to access indexed rows is `.loc[…]`, where the input
    can be a: single element, list of elements, or slice of elements. The rows will
    be output in the order they appear in the input. These examples show each kind
    of input.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pandas 中，访问索引行的主要方式是 `.loc[…]`，其中输入可以是：单个元素、元素列表或元素切片。行将按输入中出现的顺序输出。这些示例展示了每种输入方式。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/8f1fc3e1f1d6a710d0f6348c41847ccb.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f1fc3e1f1d6a710d0f6348c41847ccb.png)'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/f3ba64f9f1e6e6e11cbe774a0a4e5281.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f3ba64f9f1e6e6e11cbe774a0a4e5281.png)'
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/5c9a45ec87cc7576cace6a0b954ebe55.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c9a45ec87cc7576cace6a0b954ebe55.png)'
- en: Note that unlike the rest of Python, with Pandas the *start:stop* slice is inclusive
    of the *stop* value. Also, note that Panda excluded the second ‘j’ row because
    it came after the (first) ‘k’ row.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与 Python 的其他部分不同，Pandas 中的 *start:stop* 切片包括 *stop* 值。同时注意，Pandas 排除了第二个‘j’行，因为它在（第一个）‘k’行之后。
- en: 'In Polars, we use `filter` and expressions:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Polars 中，我们使用 `filter` 和表达式：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/449c25bc8904e8368a897ec8fda838b1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/449c25bc8904e8368a897ec8fda838b1.png)'
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/51ff038fa8e5f8c76bf7ed8c3b874f34.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51ff038fa8e5f8c76bf7ed8c3b874f34.png)'
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/c107fc43b43143c324e399651127a532.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c107fc43b43143c324e399651127a532.png)'
- en: By default, Polars’ `is_between` will not include its bounds, but either or
    both bound can optionally be included. Also, note that Polars included the second
    ‘j’ row. Polars looks at `in_between` (on string values) based on alphabetical
    order, not row order.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Polars的`is_between`不会包含其边界，但可以选择包含其中一个或两个边界。同时，请注意，Polars包含了第二行的‘j’。Polars基于字母顺序而非行顺序查看`in_between`（在字符串值上）。
- en: Because it doesn’t require an index, I find Polars simpler than Pandas for these
    more complex row retrievals.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它不需要索引，我发现Polars在这些更复杂的行检索中比Pandas更简单。
- en: For our last basic task, let’s look at joining rows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最后一个基本任务，让我们看看连接行。
- en: Joining Rows
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接行
- en: 'In Pandas, the rules for left joins are:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pandas中，左连接的规则是：
- en: The left dataframe need not be indexed, but the right one does.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧的数据框不需要被索引，但右侧的数据框需要。
- en: Give the left column(s) of interest in the join’s `on` input.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在连接的`on`输入中给出左侧感兴趣的列。
- en: In this example, we will use `join` to add a “score” column to a dataframe.
    Here is the left dataframe. It isn't indexed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`join`向数据框中添加一个“score”列。这里是左侧的数据框。它没有被索引。
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In Pandas, the right dataframe needs an index, but it can be named anything.
    Here we call it `any_name`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pandas中，右侧的数据框需要一个索引，但它可以命名为任何名称。这里我们称它为`any_name`。
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We combine the two dataframes with a left join. We use column `alpha` from the
    first dataframe and whatever is indexed in the second dataframe. The result is
    a new dataframe with a score column.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过左连接组合这两个数据框。我们使用第一个数据框中的`alpha`列以及第二个数据框中的任何索引。结果是一个包含分数列的新数据框。
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/b8212a06ef0fe6d4bbd1a5d3c0e1ffa4.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8212a06ef0fe6d4bbd1a5d3c0e1ffa4.png)'
- en: 'In Polars, everything is similar, but a little simpler:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Polars中，一切都很类似，但稍微简单一些：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/3398575e61dd0ff3d9fc379c52ae0b7f.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3398575e61dd0ff3d9fc379c52ae0b7f.png)'
- en: The difference is that we don’t need to index the right dataframe. If the columns
    of interest have the same name (as here), we use `on`. If not, we use `left_on`
    and `right_on`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于我们不需要为右侧数据框建立索引。如果感兴趣的列具有相同的名称（如这里所示），我们使用`on`。如果没有，我们使用`left_on`和`right_on`。
- en: So, Polars is again simpler to use than Pandas, but at what cost?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Polars再次比Pandas更简单使用，但代价是什么呢？
- en: Performance
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: Surely, the lack of indexes makes Polars slower. Amazingly, no. Over a wide
    range of benchmarks, [Polars is much faster](https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/)
    than Pandas [[Vink, 2021]](https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/).
    It achieves this via optimizations including good memory layout and automatic
    vectorization/parallelization.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，缺少索引会使Polars变慢。但令人惊讶的是，实际上并非如此。在广泛的基准测试中，[Polars比Pandas快得多](https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/)
    [[Vink, 2021]](https://www.ritchievink.com/blog/2021/02/28/i-wrote-one-of-the-fastest-dataframe-libraries/)。它通过优化实现了这一点，包括良好的内存布局和自动向量化/并行化。
- en: Can we construct a case in which Pandas is faster than Polars? Yes, if we use
    a dataframe as a dictionary, Pandas can be 20 times faster than Polars. However…
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否构造出Pandas比Polars更快的情况？是的，如果我们将数据框用作字典，Pandas可能比Polars快20倍。然而……
- en: 'Guess what is 300 times faster than using Pandas as a dictionary? Answer: using
    a dictionary as a dictionary.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 猜猜什么比将Pandas用作字典快300倍？答案是：将字典用作字典。
- en: In this test, we construct a dataframe with two columns, filled with the numbers
    0 to 999,999\. We then look for the number 500,000.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们构造了一个包含两个列的数据框，填充了从0到999,999的数字。然后我们寻找数字500,000。
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here are the average results over many runs on my 4-core laptop:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我在4核笔记本电脑上多次运行的平均结果：
- en: '![](../Images/5267869dca5627d013a1d95a0b1aeab5.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5267869dca5627d013a1d95a0b1aeab5.png)'
- en: 'To summarize performance: according to other benchmarks, for typical use, Polars
    is faster than Pandas. For special cases — for example, when you should really
    use a dictionary —Polars gives tools to create a dictionary for the fastest performance.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 总结性能：根据其他基准测试，对于典型使用情况，Polars比Pandas更快。对于特殊情况——例如，当你确实需要使用字典时——Polars提供了创建字典以获得最快性能的工具。
- en: Conclusion
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In my opinion, eliminating indexes makes Polars much easier to use than Pandas.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，消除索引使得Polars比Pandas更易于使用。
- en: You would expect this simplification to cause slower performance. Benchmarks,
    however, show Polars is generally much faster than Pandas. It achieves this via
    optimizations including good memory layout and automatic vectorization/parallelization.
    There may still be cases where an index-like data structure is needed. For those
    cases, Polars provides tools to create, for example, dictionaries.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会预期这种简化会导致性能变慢。然而，基准测试显示 Polars 通常比 Pandas 快得多。它通过包括良好的内存布局和自动向量化/并行化等优化来实现这一点。可能仍然存在需要类似索引的数据结构的情况。对于这些情况，Polars
    提供了创建字典等工具。
- en: So, should you switch from Pandas to Polars? It depends.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你应该从 Pandas 切换到 Polars 吗？这要视情况而定。
- en: Our genomics project, [FaST-LMM](https://fastlmm.github.io/) uses Pandas to
    output tables of statistical results. FaST-LMM does almost all its computational
    work with custom code, outside of Pandas. It only uses Pandas to share final results
    with our users, who we can assume understand Pandas. Given this, we have no reason
    to switch from Pandas.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基因组学项目，[FaST-LMM](https://fastlmm.github.io/) 使用 Pandas 输出统计结果表格。FaST-LMM
    几乎所有的计算工作都在 Pandas 之外用自定义代码完成。它仅使用 Pandas 与我们的用户分享最终结果，我们可以假设这些用户了解 Pandas。考虑到这一点，我们没有理由从
    Pandas 切换。
- en: On the other hand, if I start a new project that involves interesting data analytics,
    I’ll do it in Polars. Polars gives me the speed and simplicity that I’ve always
    wanted from Pandas.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我开始一个涉及有趣数据分析的新项目，我会使用 Polars。Polars 给了我一直想从 Pandas 中获得的速度和简便性。
- en: '*Please* [*follow me on Medium*](https://medium.com/@carlmkadie)*. I write
    on scientific programming in Rust and Python, machine learning, and statistics.
    I tend to write about one article per month.*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*请* [*在 Medium 上关注我*](https://medium.com/@carlmkadie)*。我撰写关于 Rust 和 Python
    中的科学编程、机器学习和统计学的文章。我通常每个月写一篇文章。*'
