- en: Exploring Large-scale Raster Population Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索大规模栅格人口数据
- en: 原文：[https://towardsdatascience.com/exploring-large-scale-raster-population-data-72803cf7f2ad](https://towardsdatascience.com/exploring-large-scale-raster-population-data-72803cf7f2ad)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/exploring-large-scale-raster-population-data-72803cf7f2ad](https://towardsdatascience.com/exploring-large-scale-raster-population-data-72803cf7f2ad)
- en: '![](../Images/447d132fd00738a285dfd225d655e478.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/447d132fd00738a285dfd225d655e478.png)'
- en: Image by the author.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'Visualizing geospatial population data across multiple scales using Python:
    global, country, and urban-level data'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 可视化不同尺度的地理空间人口数据：全球、国家和城市级数据
- en: '[](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)[![Milan
    Janosov](../Images/77b62460041f66ec4585a81baef81a03.png)](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)[](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)[![Milan
    Janosov](../Images/77b62460041f66ec4585a81baef81a03.png)](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)[](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)
    ·9 min read·Sep 21, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)
    ·阅读时长 9 分钟·2023 年 9 月 21 日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: I have often seen beautiful population maps circulating online; however, I usually
    got stuck at some technical parts, like visualizing other map segments than shown
    in the tutorial or turning the large-scale raster data into more computation-friendly
    vector formats. I overcome some of these shortcomings in this article with a hands-on
    guide to two primary global population data sources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我常常看到漂亮的人口地图在网上传播；然而，我通常会在一些技术部分遇到困难，比如可视化教程中未显示的其他地图片段，或将大规模的栅格数据转换为更易计算的矢量格式。本文通过对两个主要全球人口数据来源的实用指南，克服了其中的一些不足。
- en: It is also important to note that besides their aesthetic value, population
    data and maps showing them are amongst the most basic information and valuable
    information one can gather and incorporate for any urban development or location
    intelligence task. They come in particularly handy in use cases such as planning
    new amenities, site selection and catchment analysis, estimating the scale of
    urban products, or profiling different neighborhoods, just to mention a few.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，除了它们的美学价值外，人口数据和显示这些数据的地图是任何城市发展或地点情报任务中最基本和最有价值的信息之一。它们在一些具体应用中特别有用，例如规划新设施、选址和流域分析、估算城市产品的规模，或对不同社区进行画像，仅举几例。
- en: 1\. Data sources
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 数据来源
- en: 'I am relying on the following two fine-grained population estimate data sources,
    which you can download the files via the attached links (at the date of the publication):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我依赖以下两个精细化的人口估计数据来源，您可以通过附上的链接下载文件（发布时的日期）：
- en: The [European Commission’s GHSL — Global Human Settlement Layer](https://ghsl.jrc.ec.europa.eu/ghs_pop2019.php)
    measures each grid cell’s population level. Find the overall description here
    and the particular set I used from their [2023 report](https://ghsl.jrc.ec.europa.eu/download.php?ds=pop)
    with a spatial resolution of 100m here.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[欧洲委员会的 GHSL — 全球人类居住层](https://ghsl.jrc.ec.europa.eu/ghs_pop2019.php) 测量每个网格单元的居民数量。可以在这里找到总体描述，特定的数据集来自他们的
    [2023 报告](https://ghsl.jrc.ec.europa.eu/download.php?ds=pop)，空间分辨率为 100m。'
- en: WorldPop hub, from where I will take Germany as an example using the constrained
    individual countries data set at a resolution of 100m. Find the [listing](https://hub.worldpop.org/geodata/listing?id=78)
    here and Germany’s data [here](https://hub.worldpop.org/geodata/summary?id=49789).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将以德国为例，使用 WorldPop hub 提供的约束性单国数据集，分辨率为 100m。可以在[此处](https://hub.worldpop.org/geodata/listing?id=78)找到数据清单，而德国的数据[在此处](https://hub.worldpop.org/geodata/summary?id=49789)。
- en: 2\. Visualizing the Global Human Settlement Layer
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 可视化全球人类居住层
- en: '**2.1\. Import the data!**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.1\. 导入数据！**'
- en: I first came across with this dataset in the [Datashader](/big-data-visualization-using-datashader-in-python-c3fd00b9b6fc)
    tutorial of the [Architecture Performance](https://www.architecture-performance.fr/ap_blog/plotting-population-density-with-datashader/).
    After reproducing their visualization, I hit a few roadblocks by extending it
    to a global map, which initiated this work, so now I show you the workarounds
    I found on how to do that!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次在[Datashader](/big-data-visualization-using-datashader-in-python-c3fd00b9b6fc)教程中遇到这个数据集，该教程来自[Architecture
    Performance](https://www.architecture-performance.fr/ap_blog/plotting-population-density-with-datashader/)。在复制他们的可视化后，我在将其扩展到全球地图时遇到了一些障碍，这引发了这项工作，所以现在我将向你展示我找到的解决方法！
- en: First, parse the raster file using the xarray package.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用xarray包解析光栅文件。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of this cell is a detailed description of the data set:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此单元的输出是数据集的详细描述：
- en: '![](../Images/f69f95c2b0fc4c48686f2886aa01e043.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f69f95c2b0fc4c48686f2886aa01e043.png)'
- en: '**2.2\. Visualizing segments of the data**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.2\. 可视化数据的各个块**'
- en: 'We can already see this is a pretty challenging amount of data for most of
    the standard laptops. Anyway, let’s try to visualize it using Datashader, a really
    handy tool for geospatial datasets of this magnitude:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经可以看到，对于大多数标准笔记本电脑来说，这是一大挑战。无论如何，让我们尝试使用Datashader可视化它，这是一种非常方便的工具，用于处理这种规模的地理空间数据集：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While this code looks technically OK, my 2021 M1 Macbook Pro with 16GB of RAM
    gives a miserable memory overflow error. So, let’s crop the image to look into
    the data! For this, I follow the Architecture Performance and focus on Europe,
    which I follow for the time being, as it certainly works.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这段代码从技术上看是可行的，但我的2021年M1 Macbook Pro（16GB RAM）却出现了可怜的内存溢出错误。因此，让我们裁剪图像来查看数据！为此，我遵循Architecture
    Performance，重点关注欧洲，暂时这样做，因为它肯定有效。
- en: However, the main question I will answer later is how can we visualize the entire
    globe’s data despite such memory limitations but still using our local machine?
    Wait for it!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我稍后将回答的主要问题是，尽管存在这样的内存限制，但我们如何仍然能够在本地机器上可视化整个地球的数据？请稍等！
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This code block outputs the following visual:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码块输出如下可视化：
- en: '![](../Images/1a8a26e8730664ee10c455aacfac1e34.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a8a26e8730664ee10c455aacfac1e34.png)'
- en: Population distribution in Europe. Image by the author.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 欧洲的人口分布。图片来自作者。
- en: 'Using the ‘fire’ colormap seems like an industry standard for a good reason;
    however, if you wish to mix things up, you may find other coloring schemes [here](https://colorcet.holoviz.org)
    and applied below:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用‘fire’颜色映射方案似乎是一个行业标准，这是有原因的；然而，如果你想尝试其他颜色方案，你可以在[这里](https://colorcet.holoviz.org)找到并应用于下方：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code block outputs the following visual:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码块输出如下可视化：
- en: '![](../Images/eb09c03b1f705e2e6a4ba3db6a34164c.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb09c03b1f705e2e6a4ba3db6a34164c.png)'
- en: Population distribution in Europe. Image by the author.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 欧洲的人口分布。图片来自作者。
- en: '**2.3\. Visualizing the entire globe**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.3\. 可视化整个地球**'
- en: So the data is there, but what if you have a regular computer at hand and still
    want to visualize the whole world at a resolution of 100m? The workaround I will
    show you here is relatively simple — I split the entire raster image into about
    a hundred smaller tiles so that my computer handles them well one by one, then
    use some image manipulation tricks to merge them into one image file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以数据在这里，但如果你手头有一台普通计算机，仍然想以100米的分辨率可视化整个世界怎么办？我在这里展示的解决方法相对简单 — 我将整个光栅图像拆分成大约一百个较小的瓦片，这样我的计算机可以逐个处理它们，然后使用一些图像处理技巧将它们合并成一个图像文件。
- en: However, before moving on — a quick note. There is also an option to downsample
    XArray arrays in the following way — however, I couldn’t find an appropriate downscaling
    that could have handled the whole data set. Additionally, I didn’t want to lose
    accuracy and wanted to see the entire data set in full glory.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在继续之前 — 快速说明。也有一种选项可以以下方式下采样XArray数组 — 但我找不到一个合适的下采样方法可以处理整个数据集。此外，我不想失去精度，还想看到整个数据集的全貌。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And the output — which is worth contracting to the previously plotted data_array:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果 — 值得与之前绘制的数据数组进行对比：
- en: '![](../Images/668929efc38e997f4bcdc636d5c3d16d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/668929efc38e997f4bcdc636d5c3d16d.png)'
- en: To split the whole raster image into grid segments, first, get its boundaries
    and define N as the step size. Then, create the list of image segment boundaries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要将整个光栅图像拆分成网格块，首先，获取其边界并定义N为步长。然后，创建图像块边界的列表。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, iterate over each x and y step and create each image segment, where each
    image file is named after its position in the original grid. This loop may take
    a while.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，迭代每一个 x 和 y 步骤，并创建每个图像段，其中每个图像文件以其在原始网格中的位置命名。这个循环可能需要一些时间。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, if we have all the image segments, we can assemble them quickly with
    the following function. For this piece of code, I also asked for some hints from
    ChatGPT to speed things up, but as usual, it also needed some manual tweaks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们拥有所有的图像段，我们可以使用以下函数快速组装它们。对于这段代码，我也向 ChatGPT 请求了一些提示来加快进度，但像往常一样，也需要一些手动调整。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the final result here, the entire globe mapped out:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是，这里是整个地球的映射：
- en: '![](../Images/0efb606c1cb483501ce587855c14fa7e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0efb606c1cb483501ce587855c14fa7e.png)'
- en: Global opulation distribution. Image by the author.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 全球人口分布。图像来源：作者。
- en: 3\. Visualizing and transforming WorldPop data
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 视觉化和转换 WorldPop 数据
- en: The second data source I would like to show you is the WorldPop population database,
    which has continents and countries separately at various resolutions. In this
    example, complementing the previous section’s continent and global levels, here
    I shoot for the level of countries and cities. For instance, I go with Germany
    and a resolution of 100m curated in 2020, and also show you how to carve out a
    city from the whole country and turn it into an easy-to-use vector format using
    GeoPandas.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我想向你展示的第二个数据源是 WorldPop 人口数据库，它提供了不同分辨率的大陆和国家数据。在这个示例中，除了前一部分的大陆和全球级别外，这里我瞄准了国家和城市的级别。例如，我选择了德国，并使用了
    2020 年整理的 100m 分辨率数据，并展示了如何从整个国家中提取一个城市，并使用 GeoPandas 将其转换为易于使用的矢量格式。
- en: '**3.1\. Visualizing WorldPop data**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.1\. 视觉化 WorldPop 数据**'
- en: 'Using the previous methods, we can again quickly visualize this raster file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的方法，我们可以再次快速可视化这个栅格文件：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This code block outputs the following visual:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块输出以下视觉效果：
- en: '![](../Images/025026110d70435dc34653a953a2b93a.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/025026110d70435dc34653a953a2b93a.png)'
- en: Population distribution of Germany. Image by the author.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 德国的人口分布。图像来源：作者。
- en: '**3.2\. Transforming WorldPop data**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.2\. 转换 WorldPop 数据**'
- en: After visualizing the entire planet, the continent of Europe, and the country
    of Germany, I would like to get more hands-on with the city of Berlin and show
    you how to transform such raster data into vector format and manipulate it easily
    with GeoPandas. For this, I access the administrative boundaries of Berlin in
    a geojson format [here](https://maps.princeton.edu/catalog/tufts-berlin-bezirke-boroughs01).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视化了整个地球、欧洲大陆和德国之后，我希望更深入地了解柏林，并向你展示如何将这样的栅格数据转换为矢量格式，并使用 GeoPandas 轻松处理它。为此，我访问了柏林的行政边界的
    geojson 格式数据[在这里](https://maps.princeton.edu/catalog/tufts-berlin-bezirke-boroughs01)。
- en: This admin file contains the boroughs of Berlin, so first, I merge them into
    the city as a whole.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个行政文件包含柏林的区，因此首先，我将它们合并成整个城市。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This code block outputs the following visual:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块输出以下视觉效果：
- en: '![](../Images/23c8a66589a0d8b73224d55ae4cf5336.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/23c8a66589a0d8b73224d55ae4cf5336.png)'
- en: The admin boundaries of Berlin. Image by the author.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 柏林的行政边界。图像来源：作者。
- en: 'Now turn the xarray into a Pandas DataFrame, extract the geometry information,
    and build a GeoPandas GeoDataFrame. One way to do this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 xarray 转换为 Pandas DataFrame，提取几何信息，并构建一个 GeoPandas GeoDataFrame。可以这样做：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, build a GeoDataFrame from this, focusing on Berlin:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从这个数据构建一个 GeoDataFrame，重点关注柏林：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, visualize the population as vector data:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将人口数据作为矢量数据进行可视化：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code block outputs the following visual:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块输出以下视觉效果：
- en: '![](../Images/76d1f00120479f42c10e5111fce1b633.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76d1f00120479f42c10e5111fce1b633.png)'
- en: Population distribution of Berlin. Image by the author.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 柏林的人口分布。图像来源：作者。
- en: Finally, here we have a standard GeoDataFrame with 100m resolution population
    levels assigned to each point geometry corresponding to each pixel in the raster
    file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里我们有一个标准的 GeoDataFrame，分辨率为 100m，每个点几何体对应于栅格文件中的每个像素。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, I explored two global population data sets based on various,
    which estimate population levels by combining various approximation, measurement,
    and modeling approaches at a remarkable spatial resolution of 100m using raster
    grids. This type of information is highly valuable for a wide range of applications
    in urban development and location intelligence, such as infrastructure planning,
    site selection, neighborhood profiling, and more. From the technical side, I showed
    examples at three spatial levels, covering the entire globe, then zooming in to
    countries, and finally, cities. While the methodology can handle even smaller
    resolutions, this all happened on a single laptop using powerful Python libraries
    like Xarray, DataShader, and GeoPandas.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我探索了基于各种数据集的全球人口数据，这些数据通过结合各种近似、测量和建模方法，以100米的显著空间分辨率使用栅格网格来估计人口水平。这类信息对于城市发展和位置智能的广泛应用具有高度价值，例如基础设施规划、场地选择、社区分析等。从技术角度来看，我展示了三个空间层级的示例，从覆盖整个地球，再到放大到国家，最后到城市。虽然这种方法可以处理更小的分辨率，但这一切都发生在一台使用强大Python库如Xarray、DataShader和GeoPandas的笔记本电脑上。
