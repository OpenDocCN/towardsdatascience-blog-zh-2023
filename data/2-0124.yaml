- en: 5 ways of Implementing Open Closed Principle with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 实现开放封闭原则的 5 种方法
- en: 原文：[https://towardsdatascience.com/5-ways-of-implementing-open-closed-principle-with-python-51fd21a90772](https://towardsdatascience.com/5-ways-of-implementing-open-closed-principle-with-python-51fd21a90772)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/5-ways-of-implementing-open-closed-principle-with-python-51fd21a90772](https://towardsdatascience.com/5-ways-of-implementing-open-closed-principle-with-python-51fd21a90772)
- en: Object Oriented Programming Principles for Data Scientists
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学家的面向对象编程原则
- en: '[](https://erdemisbilen.medium.com/?source=post_page-----51fd21a90772--------------------------------)[![Erdem
    Isbilen](../Images/6b6ca6806024725245132894b2958e49.png)](https://erdemisbilen.medium.com/?source=post_page-----51fd21a90772--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51fd21a90772--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51fd21a90772--------------------------------)
    [Erdem Isbilen](https://erdemisbilen.medium.com/?source=post_page-----51fd21a90772--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://erdemisbilen.medium.com/?source=post_page-----51fd21a90772--------------------------------)[![Erdem
    Isbilen](../Images/6b6ca6806024725245132894b2958e49.png)](https://erdemisbilen.medium.com/?source=post_page-----51fd21a90772--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51fd21a90772--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51fd21a90772--------------------------------)
    [Erdem Isbilen](https://erdemisbilen.medium.com/?source=post_page-----51fd21a90772--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51fd21a90772--------------------------------)
    ·9 min read·Mar 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51fd21a90772--------------------------------)
    ·阅读时间9分钟·2023年3月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1487410753331cb5a273091bd8223b81.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1487410753331cb5a273091bd8223b81.png)'
- en: Photo by [Tim Mossholder](https://unsplash.com/@timmossholder?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Tim Mossholder](https://unsplash.com/@timmossholder?utm_source=medium&utm_medium=referral)
    提供，发布于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The Open-Closed Principle (OCP) is one of the five SOLID principles of object-oriented
    programming. It states that software entities, such as classes, modules, and functions,
    should be open for extension but closed for modification. In other words, you
    should be able to add new features to your software without having to modify existing
    code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 开放封闭原则（OCP）是面向对象编程五大 SOLID 原则之一。它规定软件实体，如类、模块和函数，应对扩展开放，但对修改封闭。换句话说，你应该能够在不修改现有代码的情况下向软件添加新功能。
- en: The goal of the OCP is to create software that is more flexible and easier to
    maintain over time. By designing software that can be extended without modifying
    existing code, you can reduce the risk of introducing new bugs and make your code
    easier to read and understand.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OCP 的目标是创建更加灵活且易于维护的软件。通过设计可以扩展而无需修改现有代码的软件，你可以降低引入新错误的风险，并使你的代码更易读和理解。
- en: How Open-Closed Principle Helps Data Scientists?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放封闭原则如何帮助数据科学家？
- en: While the OCP is primarily concerned with software design, it can also be applied
    to data science. Data scientists often work with large, complex data sets and
    models that need to be updated and modified over time. By following the OCP, data
    scientists can ensure that their models are easily extensible and maintainable
    over time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 OCP 主要关注软件设计，但它也可以应用于数据科学。数据科学家经常处理需要随着时间更新和修改的大型复杂数据集和模型。通过遵循 OCP，数据科学家可以确保他们的模型在长期内易于扩展和维护。
- en: In the context of data science, a “model” typically refers to a mathematical
    or statistical representation of a real-world system or process. Models can be
    used to make predictions, classify data, or understand complex relationships between
    variables.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学的背景下，“模型”通常指的是现实世界系统或过程的数学或统计表示。模型可以用来做出预测、分类数据或理解变量之间的复杂关系。
- en: For example, a data scientist might build a machine learning model to predict
    customer churn for a business based on historical customer data. The model would
    be trained on a dataset of past customer behaviour and would use that information
    to make predictions about which customers are most likely to churn in the future.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，数据科学家可能会构建一个机器学习模型来预测基于历史客户数据的客户流失情况。该模型将以过去客户行为的数据集进行训练，并利用这些信息预测哪些客户未来最可能流失。
- en: Models can take many different forms, depending on the specific problem being
    solved and the data available. Some common types of models used in data science
    include regression models, decision trees, neural networks, and support vector
    machines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 模型可以采取多种形式，具体取决于解决的问题和可用的数据。在数据科学中，一些常见的模型类型包括回归模型、决策树、神经网络和支持向量机。
- en: 'Specifically, the OCP can help data scientists in the following ways:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，开闭原则可以在以下方面帮助数据科学家：
- en: 'Facilitating model extension: By designing models to be open for extension,
    data scientists can easily add new features and functionality to their models
    without modifying the original code. This can help them keep their models up-to-date
    and relevant over time.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 促进模型扩展：通过设计模型以便于扩展，数据科学家可以轻松地向模型中添加新特性和功能，而无需修改原始代码。这可以帮助他们保持模型的最新性和相关性。
- en: 'Encouraging modular design: The OCP encourages modular design, which can make
    it easier to update and modify models over time. By breaking down models into
    smaller, more manageable components, data scientists can make changes to specific
    parts of the model without affecting the rest of the code.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 鼓励模块化设计：开闭原则鼓励模块化设计，这可以使得更新和修改模型变得更容易。通过将模型分解为更小、更易管理的组件，数据科学家可以在不影响其他代码的情况下对模型的特定部分进行更改。
- en: 'Enhancing maintainability: By designing models that are closed for modification,
    data scientists can ensure that their code is more stable and less prone to errors.
    This can make it easier to maintain and update models over time.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提高可维护性：通过设计封闭于修改的模型，数据科学家可以确保他们的代码更稳定，出错的可能性更小。这可以使得维护和更新模型变得更容易。
- en: 5 Ways of Implementing Open-Closed Principle In Python?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中实现开闭原则的 5 种方法？
- en: '(1) Use abstraction:'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (1) 使用抽象：
- en: 'One way to implement the OCP in Python is to use abstraction to hide implementation
    details and allow for extension without modification. In this example, we define
    an abstract base class `DataTransformer` that defines a single abstract method
    `transform`. This class serves as an abstraction for any data transformer that
    we might create in the future. We then define two concrete implementations of
    this abstract class: `StandardScalerTransformer` and `LogTransformer`.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中实现开闭原则的一种方法是使用抽象来隐藏实现细节并允许扩展而不进行修改。在这个例子中，我们定义了一个抽象基类 `DataTransformer`，该类定义了一个抽象方法
    `transform`。这个类作为我们未来可能创建的任何数据转换器的抽象。然后我们定义了两个具体的实现：`StandardScalerTransformer`
    和 `LogTransformer`。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `DataPipeline` class takes a list of `DataTransformer` objects as an argument
    to its constructor. This allows us to add or remove transformers to the pipeline
    without modifying the class itself. The `run` method applies each transformer
    in the pipeline to the data sequentially.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataPipeline` 类将一组 `DataTransformer` 对象作为其构造函数的参数。这使我们可以在不修改类本身的情况下向管道中添加或移除转换器。`run`
    方法依次将管道中的每个转换器应用于数据。'
- en: 'Using this abstraction, we can easily create new transformers that implement
    the `transform` method and add them to the pipeline without modifying the existing
    `DataPipeline` class. This demonstrates the Open/Closed Principle in action: the
    `DataPipeline` class is open for extension (we can add new transformers to the
    pipeline) but closed for modification (we don''t need to modify the existing class
    to add new transformers).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种抽象，我们可以轻松地创建实现 `transform` 方法的新转换器，并将它们添加到管道中，而无需修改现有的 `DataPipeline` 类。这展示了开闭原则的实际应用：`DataPipeline`
    类对扩展是开放的（我们可以向管道中添加新转换器），但对修改是封闭的（我们无需修改现有类即可添加新转换器）。
- en: '(2) Use inheritance and/or composition:'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (2) 使用继承和/或组合：
- en: Another way to implement the OCP in Python is to use inheritance to extend the
    behaviour of your classes. By creating a base class with a well-defined interface,
    you can create new subclasses that inherit that interface and add new functionality.
    This allows you to extend the behaviour of your code without modifying the original
    implementation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中实现开闭原则的另一种方法是使用继承来扩展类的行为。通过创建一个具有良好定义接口的基类，你可以创建新的子类，这些子类继承了该接口并添加新功能。这允许你在不修改原始实现的情况下扩展代码的行为。
- en: We can implement the OCP in Python with composition rather than inheritance.
    By defining objects that contain other objects, data scientists can create code
    that is more modular and easier to extend.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过组合而非继承在 Python 中实现开闭原则（OCP）。通过定义包含其他对象的对象，数据科学家可以创建更模块化、更易于扩展的代码。
- en: In this example, we define the `DataAnalyzer` base class with abstract methods
    `preprocess` and `analyze`, which must be implemented by subclasses. We also define
    an `__init__` method that takes in the data to be analyzed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了`DataAnalyzer`基类，其中包含必须由子类实现的抽象方法`preprocess`和`analyze`。我们还定义了一个`__init__`方法，该方法接受要分析的数据。
- en: We then define three subclasses for analyzing numerical, text, and image data,
    respectively. Each subclass overrides the `preprocess` and `analyze` methods to
    provide specialized functionality for that type of data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义了三个子类，分别用于分析数值、文本和图像数据。每个子类重写了`preprocess`和`analyze`方法，以提供该数据类型的专门功能。
- en: For example, the `NumericalDataAnalyzer` subclass includes a `preprocess` method
    that scales the numerical data using a `StandardScaler` object, while the `TextDataAnalyzer`
    subclass includes a `preprocess` method that vectorizes the text data using a
    `TfidfVectorizer` object. Similarly, the `ImageDataAnalyzer` subclass includes
    a `preprocess` method that extracts features from the image data using a `ResNet50`
    object.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`NumericalDataAnalyzer`子类包括一个`preprocess`方法，该方法使用`StandardScaler`对象对数值数据进行缩放，而`TextDataAnalyzer`子类包括一个`preprocess`方法，该方法使用`TfidfVectorizer`对象对文本数据进行向量化。同样，`ImageDataAnalyzer`子类包括一个`preprocess`方法，该方法使用`ResNet50`对象从图像数据中提取特征。
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By using inheritance to create specialized subclasses and composition to include
    specialised objects within those subclasses, we can analyze each type of data
    consistently and flexibly, while adhering to the Open-Closed Principle. If we
    need to add support for a new type of data in the future, we can simply create
    a new subclass that inherits from `DataAnalyzer` and includes appropriate composition
    of specialized objects. This approach allows us to extend our program without
    modifying the existing code, making it easier to maintain and reuse.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用继承创建专门的子类，并使用组合将专门的对象包含在这些子类中，我们可以一致而灵活地分析每种类型的数据，同时遵循开放封闭原则。如果将来需要支持新的数据类型，我们只需创建一个新的子类，继承自`DataAnalyzer`并包含适当的专门对象组合。这种方法使我们能够在不修改现有代码的情况下扩展程序，从而更易于维护和重用。
- en: '(3) Use plugins:'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (3) 使用插件：
- en: The OCP can be applied to create a plugin architecture in Python. By defining
    a set of well-defined interfaces or abstract base classes, data scientists can
    allow other developers to write plugins that extend the functionality of their
    code without modifying the original implementation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: OCP（开放封闭原则）可以应用于创建Python中的插件架构。通过定义一组明确的接口或抽象基类，数据科学家可以允许其他开发者编写插件，扩展其代码的功能而无需修改原始实现。
- en: Suppose we have a script that performs some data processing on a given dataset.
    We want to be able to easily add and remove different data processing steps as
    plugins, without modifying the script code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个脚本在给定的数据集上执行一些数据处理。我们希望能够轻松地添加和移除不同的数据处理步骤作为插件，而无需修改脚本代码。
- en: 'We can use a plugin architecture to define data processing steps as plugins
    that can be loaded dynamically at runtime. Here’s some example code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用插件架构将数据处理步骤定义为可以在运行时动态加载的插件。以下是一些示例代码：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we define a `DataProcessingPlugin` class that defines the interface
    for data processing plugins. We also define two plugins, `RemoveDuplicatesPlugin`
    and `ImputeMissingValuesPlugin`, that implement the `DataProcessingPlugin` interface
    and define custom logic for removing duplicate rows and imputing missing values,
    respectively.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了一个`DataProcessingPlugin`类，该类定义了数据处理插件的接口。我们还定义了两个插件，`RemoveDuplicatesPlugin`和`ImputeMissingValuesPlugin`，它们实现了`DataProcessingPlugin`接口，并分别定义了去除重复行和填补缺失值的自定义逻辑。
- en: We then define a `process_data` function that takes a dataset and a list of
    processing steps as inputs. The function uses the `importlib` module to load each
    processing plugin corresponding to the given steps dynamically at runtime. It
    then applies each processing plugin to the data sequentially to produce a final
    processed dataset.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个`process_data`函数，该函数接受数据集和处理步骤列表作为输入。该函数使用`importlib`模块动态加载与给定步骤对应的每个处理插件，并按顺序将每个处理插件应用于数据，以生成最终的处理数据集。
- en: Using plugins in this way allows us to easily modify and experiment with different
    data processing steps without having to modify the `process_data` function code.
    It also makes it easier to share and reuse data processing code between different
    projects.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式使用插件使我们能够轻松修改和尝试不同的数据处理步骤，而无需修改`process_data`函数代码。这也使得在不同项目之间共享和重用数据处理代码变得更加容易。
- en: '(4) Use configuration files:'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (4) 使用配置文件：
- en: The OCP can be applied by using configuration files to control the behavior
    of a Python program. By separating configuration data from code, data scientists
    can create programs that are easier to extend and maintain. For example, a data
    scientist might define a configuration file that specifies the parameters for
    a machine learning model, allowing other developers to experiment with different
    parameter settings without modifying the original code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用配置文件来控制Python程序的行为，从而应用OCP。通过将配置数据与代码分离，数据科学家可以创建更易于扩展和维护的程序。例如，数据科学家可能会定义一个配置文件，指定机器学习模型的参数，使其他开发人员可以在不修改原始代码的情况下实验不同的参数设置。
- en: 'Here is an example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: Suppose we have a dataset of customer reviews and we want to analyze the sentiment
    of each review using various machine learning models. We want to be able to easily
    swap out the machine learning model being used without changing the code of our
    sentiment analysis script.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个客户评论的数据集，我们希望使用各种机器学习模型来分析每个评论的情感。我们希望能够轻松地更换所使用的机器学习模型，而无需更改情感分析脚本的代码。
- en: 'We can use a configuration file to specify which machine learning model to
    use and its associated hyperparameters. Here’s an example configuration file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用配置文件来指定使用哪个机器学习模型及其相关超参数。以下是一个示例配置文件：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we’re using logistic regression as our machine learning model
    and specifying a regularization parameter of 1.0.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用逻辑回归作为我们的机器学习模型，并指定了1.0的正则化参数。
- en: 'Our sentiment analysis script can then be read in this configuration file and
    use the specified machine learning model to analyze the sentiment of each review.
    Here’s some example code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的情感分析脚本可以读取这个配置文件，并使用指定的机器学习模型来分析每个评论的情感。以下是一些示例代码：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, we define a `load_data` function to load customer reviews from
    a CSV file, a `preprocess_data` function to preprocess the data for use with the
    machine learning model, and a `train_model` function to train the specified machine
    learning model on the preprocessed data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个`load_data`函数来从CSV文件中加载客户评论，一个`preprocess_data`函数来预处理数据以供机器学习模型使用，以及一个`train_model`函数来在预处理数据上训练指定的机器学习模型。
- en: We read in the configuration file using the `json.load` method and pass the
    specified machine learning model and its hyperparameters to the `train_model`
    function. This allows us to easily switch out the machine learning model being
    used by simply modifying the configuration file, without having to change any
    of the code in our sentiment analysis script.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`json.load`方法读取配置文件，并将指定的机器学习模型及其超参数传递给`train_model`函数。这使我们可以通过简单地修改配置文件来轻松更换所用的机器学习模型，而无需更改情感分析脚本中的任何代码。
- en: Using configuration files to specify parameters in this way is a common pattern
    in data science, as it allows for easy modification and experimentation without
    having to modify the code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式使用配置文件来指定参数是在数据科学中一种常见的模式，因为它允许轻松修改和实验，而无需修改代码。
- en: '(5) Use dependency injection:'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: (5) 使用依赖注入：
- en: The OCP can be applied by using dependency injection to allow objects to be
    created and configured dynamically.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用依赖注入来动态创建和配置对象，从而应用OCP。
- en: In this example, we define three classes for data cleaning, feature engineering,
    and machine learning. Each of these classes takes a strategy as a dependency that
    is injected when creating an instance of the class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了三个用于数据清理、特征工程和机器学习的类。每个类都将策略作为依赖项，在创建类的实例时注入。
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We create instances of the data cleaning and feature engineering strategies
    and inject them into instances of the `DataCleaner` and `FeatureEngineer` classes,
    respectively. This allows us to easily switch out the data cleaning and feature
    engineering strategies with different implementations, without modifying any of
    the code in our machine learning script.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建数据清理和特征工程策略的实例，并将它们分别注入到`DataCleaner`和`FeatureEngineer`类的实例中。这使我们可以轻松地用不同的实现替换数据清理和特征工程策略，而无需修改机器学习脚本中的任何代码。
- en: We also create an instance of the `DataLoader` class, which is not injected
    with any dependencies. This is because the data loading strategy is unlikely to
    change frequently, so it does not need to be specified as a dependency.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个`DataLoader`类的实例，该实例未注入任何依赖。这是因为数据加载策略不太可能频繁变化，因此不需要将其指定为依赖项。
- en: Using dependency injection in this way allows us to easily modify and experiment
    with different data cleaning and feature engineering strategies without having
    to modify the machine learning code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式使用依赖注入使我们能够轻松修改和实验不同的数据清洗和特征工程策略，而无需修改机器学习代码。
- en: Conclusion
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: By following the Open-Closed Principle, data scientists can create code that
    is not only functional, but also modular, extensible, and easy to maintain. This
    can help to ensure the longevity and effectiveness of our data science projects,
    enabling us to more easily meet the ever-changing demands of the data science
    landscape.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循开放-封闭原则，数据科学家可以创建不仅功能齐全，而且模块化、可扩展且易于维护的代码。这有助于确保我们数据科学项目的长期有效性，使我们能够更轻松地应对数据科学领域不断变化的需求。
