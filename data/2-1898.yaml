- en: Speed Up your Python Skills
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加速你的 Python 技能
- en: 原文：[https://towardsdatascience.com/speed-up-your-python-skills-in-2023-e680f4c56f37](https://towardsdatascience.com/speed-up-your-python-skills-in-2023-e680f4c56f37)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/speed-up-your-python-skills-in-2023-e680f4c56f37](https://towardsdatascience.com/speed-up-your-python-skills-in-2023-e680f4c56f37)
- en: Seven tips to take you to the next level
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 七个技巧助你更上一层楼
- en: '[](https://tinztwinspro.medium.com/?source=post_page-----e680f4c56f37--------------------------------)[![Janik
    and Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----e680f4c56f37--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e680f4c56f37--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e680f4c56f37--------------------------------)
    [Janik and Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----e680f4c56f37--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/?source=post_page-----e680f4c56f37--------------------------------)[![Janik
    和 Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----e680f4c56f37--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e680f4c56f37--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e680f4c56f37--------------------------------)
    [Janik 和 Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----e680f4c56f37--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e680f4c56f37--------------------------------)
    ·9 min read·Jan 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e680f4c56f37--------------------------------)
    ·阅读时间 9 分钟·2023年1月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/509f2e1b0475dabe336a49f134d00b80.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/509f2e1b0475dabe336a49f134d00b80.png)'
- en: Photo by [Emile Perron](https://unsplash.com/@emilep?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源 [Emile Perron](https://unsplash.com/@emilep?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**Python** is the most widely used programming language in the data science
    domain, and its popularity continues to grow. The entire data science field has
    grown enormously in recent years.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python** 是数据科学领域使用最广泛的编程语言，其受欢迎程度不断增长。近年来，整个数据科学领域也得到了巨大的发展。'
- en: In this article, we will show you seven tips on how to improve your Python skills.
    It’s often the little things that make a big difference. The tips will enrich
    your life as a Data Scientist. That’s why we give you seven tips that you can
    put into practice right now. **Be curious!**
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将向你展示七个提高 Python 技能的技巧。通常是那些小细节能产生大的差异。这些提示将丰富你作为数据科学家的生活。因此，我们提供了七个可以立即实践的技巧。**保持好奇！**
- en: As a Data Scientist, you often have to deal with large amounts of data. For
    this reason, you must code efficiently in terms of run time and memory. Your Python
    code should also be well-structured and easy to read. The tips will help you to
    write efficient and readable Python code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，你经常需要处理大量的数据。因此，你必须在运行时间和内存方面高效编码。你的 Python 代码也应该结构良好且易于阅读。这些提示将帮助你编写高效且易读的
    Python 代码。
- en: 'Tip 1: Speed up NumPy'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '提示 1: 加速 NumPy'
- en: '[NumPy](https://numpy.org) is a Python library to work efficiently with arrays.
    It also offers fast and optimised vectorised operations. But! It does not support
    parallel processing. As an alternative to NumPy, you can use [NumExpr](https://numexpr.readthedocs.io/en/latest/index.html).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[NumPy](https://numpy.org) 是一个用于高效处理数组的 Python 库。它还提供了快速和优化的矢量化操作。但！它不支持并行处理。作为
    NumPy 的替代品，你可以使用 [NumExpr](https://numexpr.readthedocs.io/en/latest/index.html)。'
- en: NumExpr achieves significantly better performance than NumPy because it supports
    multi-threading. Furthermore, it avoids allocating memory for intermediate results.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NumExpr 的性能显著优于 NumPy，因为它支持多线程。此外，它避免了为中间结果分配内存。
- en: 'First, you have to install the packages NumPy and NumExpr. For example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装 NumPy 和 NumExpr 包。例如：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Look at the example and try it out.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个例子并尝试一下。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Wow! The statement is performed approx. 5x faster with NumExpr. So if you want
    to speed up your NumPy statements, this gives you a way to do it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！该语句在 NumExpr 下执行速度大约提高了 5 倍。因此，如果你想加快 NumPy 语句的速度，这为你提供了一种实现方法。
- en: NumExpr works best when you have large arrays. It also develops its maximum
    performance if you have a powerful computer with many cores. For this reason,
    we recommend NumExpr when these two conditions are present. For small array operations,
    you can also use NumPy, as the performance differences are very minimal. The reason
    is that NumExpr splits the array operands into small chunks. These chunks easily
    fit into the CPU cache. The chunks are distributed among the available cores of
    the CPU, allowing parallel execution.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: NumExpr在处理大数组时效果最佳。如果你有一个强大的多核计算机，它也能发挥其最大性能。因此，当这两个条件都满足时，我们推荐使用NumExpr。对于小规模数组操作，你也可以使用NumPy，因为性能差异非常小。原因是NumExpr将数组操作数拆分成小块，这些小块很容易适应CPU缓存。这些小块在CPU的可用核心之间分配，从而实现并行执行。
- en: If you want to learn more about NumExpr, check out [NumExpr’s GitHub](https://github.com/pydata/numexpr)
    repository.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于NumExpr的内容，可以查看[NumExpr的GitHub](https://github.com/pydata/numexpr)库。
- en: 'Tip 2: Fast alternative to pandas apply()'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示 2：pandas apply()的快速替代方案
- en: The pandas apply() function can execute functions along an axis of a data frame.
    Many programmers use the apply() function in combination with lambda functions.
    But how can you increase the performance of an apply() function?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: pandas的apply()函数可以在数据框的一个轴上执行函数。许多程序员将apply()函数与lambda函数结合使用。但你如何提高apply()函数的性能呢？
- en: You can use the package swifter. This package applies functions very quickly
    to data frames or series. The pandas apply() function runs on one core, and the
    swifter provides multiple core support.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用swifter包。这个包将函数非常快速地应用于数据框或序列。pandas的apply()函数在一个核心上运行，而swifter则提供了多个核心支持。
- en: First, you need to install the swifter package.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装swifter包。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After the installation you can try it out directly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你可以直接尝试它。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This simple example shows that the swifter.apply() function has a faster run
    time. The difference is particularly noticeable on powerful computers with multiple
    cores. If you need a performance boost in your next project, consider the swifter
    package.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的例子显示了swifter.apply()函数的运行时间更快。尤其是在多核的强大计算机上，这一差异尤其明显。如果你在下一个项目中需要性能提升，考虑使用swifter包。
- en: 'Tip 3: Using Built-in Python Functions'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示 3：使用内置的Python函数
- en: Often you implement a function and don’t know that it already exists in Python.
    Especially if you come from other programming languages such as C or C++. First,
    you should always check if a Python built-in function already exists. Python built-in
    functions are much faster than custom implementations, so you should always use
    them. The following example demonstrates this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常实现一个函数却不知道它在Python中已经存在。尤其是如果你来自其他编程语言，如C或C++。首先，你应该总是检查Python内置函数是否已经存在。Python内置函数比自定义实现要快得多，因此你应该总是使用它们。以下示例演示了这一点。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the code above, we replicate a list of four entries 10 million times, so
    we get a list of 40 million entries. Then we convert the strings in the list to
    lower case. You can see that the built-in function is about 17 times faster. Especially
    with large amounts of data, this tip brings an enormous increase in performance.
    So use built-in functions!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们将一个包含四个条目的列表复制了1千万次，因此得到一个包含4千万个条目的列表。然后我们将列表中的字符串转换为小写。你可以看到，内置函数的速度约快了17倍。特别是在大量数据的情况下，这个提示带来了巨大的性能提升。所以要使用内置函数！
- en: There are many more built-in functions, such as min(), max(), all(), etc. Do
    your own research if you need a specific Python function. **It’s worth it!**
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多内置函数，如min()、max()、all()等。如果你需要特定的Python函数，可以自己查找。**这很值得！**
- en: 'Tip 4: Use list comprehension instead of loops'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示 4：使用列表推导代替循环
- en: Programmers often use lists in combination with loops to store calculated results.
    However, this approach is not efficient in terms of run time. For this reason,
    it is better to use list comprehension, which has better performance. The following
    example shows the difference in performance.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员经常将列表与循环结合使用来存储计算结果。然而，这种方法在运行时间上效率不高。因此，最好使用列表推导，它具有更好的性能。以下示例显示了性能的差异。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What do we learn from this example? Use list comprehension when possible. List
    comprehension is somewhat controversial in programming. Some programmers find
    the syntax hard to read, as one line of code expresses all statements. In our
    opinion, the syntax is clear and concise. It is a matter of taste, but the performance
    is better with a list comprehension.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个示例中我们学到了什么？尽可能使用列表推导式。列表推导式在编程中有些争议。一些程序员觉得语法难以阅读，因为一行代码表达了所有语句。在我们看来，语法清晰简洁。这是一个口味问题，但列表推导式的性能更好。
- en: A list comprehension begins with an opening bracket [. Then there is the calculation
    from the for-loop. Then comes the loop header with three elements (keyword for,
    run variable, length of the loop). The list comprehension is closed with a closing
    bracket ]. Once you understand the syntax, you can write for-loops much more compactly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导式以开括号[开始。然后是for循环中的计算。接着是循环头，包含三个元素（关键字for，运行变量，循环长度）。列表推导式以闭括号]结束。一旦你理解了语法，你可以更紧凑地编写for循环。
- en: But what about in terms of memory usage? How can we reduce the memory space?
    It is especially advisable with large lists if we want to perform further operations
    on them. In our example, we store 10000000 values in the list. But do we have
    to save all entries directly, or do we only need them when required?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在内存使用方面呢？我们如何减少内存空间？如果我们想对大列表进行进一步操作，这一点尤其建议。在我们的示例中，我们在列表中存储了10000000个值。但我们是否必须直接保存所有条目，还是仅在需要时才保存它们？
- en: In these cases, we can use generators. A generator creates a list item when
    needed. As a result, a generator requires less memory and has a better run time.
    Take a look at the following example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，我们可以使用生成器。生成器在需要时创建一个列表项。因此，生成器需要更少的内存并且运行时间更好。看看下面的示例。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can do all the operations as in the previous example. The only difference
    is that we now use () instead of []. Instead of a list, we store a generator.
    This approach is more memory efficient. Check if you can use list comprehension
    or generators in your projects. They can improve performance and reduce memory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以执行与之前示例相同的所有操作。唯一的区别是我们现在使用的是()而不是[]。我们存储的是生成器而不是列表。这种方法在内存上更为高效。检查一下你是否可以在项目中使用列表推导式或生成器。它们可以提高性能并减少内存使用。
- en: 'Tip 5: Merge dicts with double asterisk syntax **'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示 5：使用双星号语法**合并字典
- en: How do you merge dictionaries? You can do that with a one-liner. We use the
    asterisk syntax **. In the following example, you can see how it works.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如何合并字典？你可以用一行代码来实现。我们使用了星号语法**。在下面的示例中，你可以看到它是如何工作的。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: First, we define two dictionaries with identical and different key-value pairs.
    The foundation of Tesla was in 2003, so dict_2 is more up-to-date. If both dictionaries
    contain the same key and different values, then the value of the last dictionary
    is used. After merging, the new dictionary contains all three key-value pairs.
    The syntax is concise and compact, so merging is very easy. And the best thing
    is that you can merge three or more dictionaries. This trick can save a lot of
    time.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义两个字典，它们有相同和不同的键值对。特斯拉成立于2003年，所以dict_2更加最新。如果两个字典包含相同的键但值不同，则使用最后一个字典的值。合并后，新字典包含所有三个键值对。语法简洁紧凑，因此合并非常简单。而且最棒的是，你可以合并三个或更多字典。这个技巧可以节省大量时间。
- en: Another method is the update method. This method updates the first dictionary
    and does not create a copy. Take a look at the following example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是update方法。此方法更新第一个字典，并不创建副本。看看下面的示例。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The disadvantage of the update method is that you can only use one dictionary
    for updating. If you want to merge dictionaries in the future, remember this tip.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: update方法的缺点是你只能使用一个字典进行更新。如果你未来想要合并字典，请记住这个提示。
- en: 'Tip 6: Do not import unnecessary modules'
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示 6：不要导入不必要的模块
- en: You may have heard this tip many times, but it can significantly improve the
    performance of your code. It is not necessary to import entire libraries. You
    usually only need certain functions of it. In addition, your code takes a long
    time to start because the entire library has to import first. That should not
    be the case. In addition, you then have to access individual functions via the
    dot notation. That is very inefficient, and you should avoid dot notation. The
    following examples demonstrate this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听到过这个提示很多次，但它可以显著提高代码的性能。没有必要导入整个库。你通常只需要其中的某些函数。此外，由于必须先导入整个库，所以你的代码启动时间较长。这不应该是这样的。此外，你还必须通过点表示法访问单独的函数。这非常低效，你应该避免使用点表示法。以下示例演示了这一点。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we use math.exp() function with the dot notation. That leads
    to poor performance of your code. Also, we have imported the entire math library,
    although we only need the exp() function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了 `math.exp()` 函数和点表示法。这导致了代码性能不佳。此外，我们导入了整个 math 库，尽管我们只需要 `exp()`
    函数。
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, we import the exp() function without the dot notation. By using
    this trick, we can halve the run time of our code. Wow. That’s great!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们在没有点表示法的情况下导入了 `exp()` 函数。通过使用这个技巧，我们可以将代码的运行时间减半。哇，太棒了！
- en: 'Tip 7: Use just-in-time compiler'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示 7：使用即时编译器
- en: '[Numba](https://numba.readthedocs.io/en/stable/index.html) is a just-in-time
    (jit) compiler that works well with NumPy loops, arrays and functions. Decorators
    are used to instruct Numba to compile certain functions with Numba. Numba compiles
    decorated functions just-in-time into machine code so that all or part of the
    code runs at the speed of native machine code.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[Numba](https://numba.readthedocs.io/en/stable/index.html) 是一个即时 (jit) 编译器，能够很好地与
    NumPy 循环、数组和函数配合使用。装饰器用于指示 Numba 用 Numba 编译特定函数。Numba 将装饰过的函数即时编译为机器代码，以便所有或部分代码以本地机器代码的速度运行。'
- en: First we have to install Numba via pip.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要通过 pip 安装 Numba。
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After successful installation, you can use Numba. Take a look at the following
    example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，你可以使用 Numba。请查看以下示例：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can see that the decorator above the foo function speeds up the code. The
    decorator *nopython=True* indicates that the compilation will run without the
    involvement of the Python interpreter. Numba speeds up the execution of the loop
    and the NumPy trigonometric functions. However, it can not use with all Python
    functions. The followings are the advantages and disadvantages of [Numba](https://numba.readthedocs.io/en/stable/user/5minguide.html):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，上述 foo 函数的装饰器加快了代码的执行速度。装饰器 *nopython=True* 表明编译将不涉及 Python 解释器。Numba
    加速了循环和 NumPy 三角函数的执行。然而，它不能与所有 Python 函数一起使用。以下是 [Numba](https://numba.readthedocs.io/en/stable/user/5minguide.html)
    的优缺点：
- en: '***Cons:***'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '***缺点：***'
- en: Numba does not support pandas.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Numba 不支持 pandas。
- en: Unsupported code is executed via the interpreter and has the additional Numba
    overhead.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持的代码通过解释器执行，并且有额外的 Numba 开销。
- en: Only unofficial support on M1/Arm64.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅对 M1/Arm64 提供非官方支持。
- en: '***Pros:***'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '***优点：***'
- en: Very good support for NumPy arrays and functions, and loops.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 NumPy 数组和函数以及循环的支持非常好。
- en: Support for Nvidia CUDA. It can use well for the development of neural networks
    based on NumPy.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Nvidia CUDA。它可以很好地用于基于 NumPy 的神经网络开发。
- en: The cons and pros show that Numba should be used primarily for NumPy operations.
    In addition, you should always check at the beginning whether Numba is suitable
    for the respective implementation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点和优点表明 Numba 应主要用于 NumPy 操作。此外，你应该总是在开始时检查 Numba 是否适合相应的实现。
- en: Conclusion
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this article we have learned how to increase the efficiency of your code
    in terms of run time and memory. Lessons learned:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们学习了如何提高代码的运行时间和内存效率。学到的教训：
- en: NumPy does not support parallel processing. You can use NumExpr for that.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 不支持并行处理。你可以使用 NumExpr 来处理这个问题。
- en: Pandas apply() function can be accelerated by swifter.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas 的 `apply()` 函数可以通过 swifter 加速。
- en: Check if there are built-in functions.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否有内置函数。
- en: Use list comprehension instead of loops. Check if generators are suitable for
    your project.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列表推导而不是循环。检查生成器是否适合你的项目。
- en: Merge dicts with double asterisk syntax **.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用双星号语法合并字典**。
- en: Do not import unnecessary modules.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要导入不必要的模块。
- en: If you have run time problems, you can use just-in-time compilers. Just-in-time
    compilers speed up your code.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你遇到运行时间问题，你可以使用即时编译器。即时编译器可以加速你的代码。
- en: 👉🏽 [**You can find all our Freebies on our digital products page!**](https://shop.tinztwins.de/)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**您可以在我们的数字产品页面上找到所有免费的资源！**](https://shop.tinztwins.de/)
- en: 👉🏽 [**Join our free weekly Magic AI newsletter for the latest AI updates!**](https://magicai.tinztwins.de)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**加入我们的每周免费Magic AI通讯，获取最新的AI更新！**](https://magicai.tinztwins.de)
- en: '[**Subscribe for free**](https://tinztwinspro.medium.com/subscribe) **to get
    notified when we publish a new story:**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[**免费订阅**](https://tinztwinspro.medium.com/subscribe) **以便在我们发布新故事时收到通知：**'
- en: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----e680f4c56f37--------------------------------)
    [## Get an email whenever Janik and Patrick Tinz publishes.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----e680f4c56f37--------------------------------)
    [## 每当Janik和Patrick Tinz发布新内容时，您将收到电子邮件。'
- en: Get an email whenever Janik and Patrick Tinz publishes. By signing up, you will
    create a Medium account if you don’t…
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当Janik和Patrick Tinz发布新内容时，您将收到电子邮件。通过注册，您将创建一个Medium账户，如果您还没有的话…
- en: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----e680f4c56f37--------------------------------)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----e680f4c56f37--------------------------------)'
- en: Learn more about us on our [About page](https://medium.com/@tinztwinspro/about).
    Don’t forget to follow us on [X](https://twitter.com/tinztwins). Thanks so much
    for reading. If you liked this article, feel free to share it. **Have a great
    day!**
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的[关于页面](https://medium.com/@tinztwinspro/about)了解更多关于我们的信息。不要忘记在[X](https://twitter.com/tinztwins)上关注我们。非常感谢您的阅读。如果您喜欢这篇文章，请随意分享。**祝您一天愉快！**
- en: Sign up for a Medium membership using [our link](https://tinztwinspro.medium.com/membership)
    to read unlimited Medium stories.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[我们的链接](https://tinztwinspro.medium.com/membership)注册Medium会员，阅读无限制的Medium故事。
