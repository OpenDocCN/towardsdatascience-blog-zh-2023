- en: NP-What? Complexity Types of Optimization Problems Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NP-什么？优化问题的复杂性类型解释
- en: 原文：[https://towardsdatascience.com/np-what-complexity-types-of-optimization-problems-explained-558d43276044](https://towardsdatascience.com/np-what-complexity-types-of-optimization-problems-explained-558d43276044)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/np-what-complexity-types-of-optimization-problems-explained-558d43276044](https://towardsdatascience.com/np-what-complexity-types-of-optimization-problems-explained-558d43276044)
- en: '![](../Images/d71f4632f6eb7e92629cf29ff7352ffd.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d71f4632f6eb7e92629cf29ff7352ffd.png)'
- en: Complex building. Image created with [Midjourney](https://www.midjourney.com/)
    by the author.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的建筑。图片由作者使用 [Midjourney](https://www.midjourney.com/) 创建。
- en: An introduction to one of the central questions in computer science
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算机科学中的一个核心问题介绍
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)[](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)[](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----558d43276044--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)
    ·11 min read·Aug 17, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----558d43276044--------------------------------)
    ·阅读时间 11 分钟·2023年8月17日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**How come the** [**shortest path problem**](/optimizing-connections-mathematical-optimization-within-graphs-7364e082a984)
    **is easy to solve, but the** [**traveling salesman problem**](https://medium.com/towards-data-science/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06)
    **is not? What are the mathematical ideas on this? How to determine if a problem
    will take an unmanageable number of steps if its size increases? In this post
    you will learn the basics on this topic. And if you want to get serious with this,
    I’ve included a short note on one of the millennium prize problems related to
    this topic at the end of the post.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么** [**最短路径问题**](/optimizing-connections-mathematical-optimization-within-graphs-7364e082a984)
    **容易解决，而** [**旅行推销员问题**](https://medium.com/towards-data-science/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06)
    **却不容易？这些问题的数学原理是什么？如何确定如果问题规模增加，是否会需要不可管理的步骤？在这篇文章中你将了解这个主题的基础知识。如果你想深入了解，我在文章末尾还附上了与这个主题相关的千年大奖难题的简要说明。**'
- en: Before we get started with NP hardness, you should know the basics of time complexity.
    If you are familiar with time complexity, Big O notation, and worst case analysis,
    you can skip the following section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论 NP 难度之前，你应该了解时间复杂度的基础。如果你熟悉时间复杂度、大 O 符号和最坏情况分析，你可以跳过以下部分。
- en: Time Complexity
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间复杂度
- en: When we work with computers and write programs, we often deal with problems
    that can be solved in different ways. One important thing we need to consider
    is how efficient these solutions are. Time complexity helps us understand how
    fast an algorithm runs as the size of the problem it’s solving gets bigger.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用计算机编程时，我们经常会遇到可以用不同方式解决的问题。我们需要考虑的一个重要方面是这些解决方案的效率。时间复杂度帮助我们理解当问题规模变大时，算法运行的速度如何。
- en: '*Big O notation* can be compared with labeling the algorithm with a simple
    sticker that tells us how long the algorithm takes to finish based on how many
    things we’re dealing with. It’s a way to describe how the number of steps of an
    algorithm grows relative to the input size of the problem.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*大 O 符号* 可以比作用一个简单的标签来标记算法，这个标签告诉我们算法完成所需的时间，基于我们处理的事物数量。这是一种描述算法步骤数量相对于问题输入规模增长的方式。'
- en: 'Note: Time complexity essentially relates to the number of steps you take,
    instead of actual time, so it’s kind of bad naming. Otherwise you could use a
    faster computer and the same algorithm.'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：时间复杂度本质上与步骤数量有关，而不是实际时间，因此这个名字不太准确。否则你可以使用更快的计算机和相同的算法。
- en: '![](../Images/a1cd90807a084a5619866443709717a7.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1cd90807a084a5619866443709717a7.png)'
- en: 'Labeling boxes (algorithms) with a sticker: how fast are you? Image by author.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 给箱子（算法）贴上标签：你有多快？作者提供的图片。
- en: We usually focus on the *worst-case* scenario because we want to be sure that
    no matter what input we give the algorithm, it won’t take longer than a certain
    amount of time. This helps us make sure our solution is reliable even when things
    get tough.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常关注*最坏情况*，因为我们希望确保无论我们给算法什么输入，它都不会花费超过一定的时间。这有助于确保我们的解决方案在情况变得困难时仍然可靠。
- en: '![](../Images/e7e38e8011e4561f85e40c4c16e8f276.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7e38e8011e4561f85e40c4c16e8f276.png)'
- en: If you are searching for a specific page of a book and your algorithm goes from
    beginning to the end of the book, worst case would be it’s the final page. Image
    by author.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找一本书中的特定页面，而你的算法从书的开头查到结尾，最坏的情况就是那一页是最后一页。作者提供的图片。
- en: Just like we choose the fastest route when driving somewhere, we want to pick
    the most efficient algorithm for our problem. We compare algorithms based on their
    time complexities. An algorithm that runs faster (has a lower time complexity)
    is like taking the quicker route to our destination. As mentioned before, a faster
    algorithm needs less steps to find the solution in the worst-case scenario.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们驾驶时选择最快路线一样，我们也希望为我们的问题选择最有效的算法。我们根据算法的时间复杂度来比较算法。一个运行更快（时间复杂度更低）的算法就像是选择更快的路线到达目的地。如前所述，一个更快的算法在最坏情况下需要的步骤更少。
- en: Now, let’s explore these ideas with some real-world examples to make them clearer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一些实际的例子来探讨这些概念，使其更清晰。
- en: 'Constant Time: O(1)'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常数时间：O(1)
- en: Imagine you’re planning a trip to a nearby park. You live right next to it,
    so no matter how many friends you invite, the time it takes to walk there remains
    the same. Whether it’s just you or a group of 10, the time required to get to
    the park is constant — it doesn’t change based on the number of people.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你在计划去附近的公园旅行。你就住在公园旁边，所以无论你邀请多少朋友，步行到公园所需的时间始终不变。无论是你一个人还是一群10人，前往公园所需的时间都是恒定的——它不会因人数的不同而改变。
- en: '![](../Images/74e177f08432398615a477a74c85b6af.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74e177f08432398615a477a74c85b6af.png)'
- en: Walking to a park takes about the same amount of time disregarding the number
    of people. Image by author.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 去公园的时间大致相同，不论人数多少。作者提供的图片。
- en: A programming example of constant time is using a key to find the corresponding
    value in a dictionary.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 常数时间的编程例子是使用一个键在字典中找到对应的值。
- en: 'Linear Time: O(n)'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性时间：O(n)
- en: Now, think about planning a picnic and gathering all your friends. As you invite
    each friend, you need to call or message them individually. So, if you’re inviting
    10 friends, you make 10 calls; if you’re inviting 50 friends, you make 50 calls.
    The time it takes to contact your friends grows linearly as the number of friends
    increases.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一下计划一次野餐并召集所有朋友。当你邀请每个朋友时，你需要单独打电话或发消息。所以，如果你邀请10个朋友，你就打10个电话；如果你邀请50个朋友，你就打50个电话。联系朋友所需的时间随着朋友数量的增加而线性增长。
- en: '![](../Images/2f4836e2fd8337ff20af3297fcd0eeea.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2f4836e2fd8337ff20af3297fcd0eeea.png)'
- en: 'Inviting one or 10 friends makes a difference: it takes around 10 times the
    amount of time to invite 10 friends. Image by author.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 邀请一个朋友或10个朋友是有区别的：邀请10个朋友需要的时间大约是邀请1个朋友的10倍。作者提供的图片。
- en: If you loop once over all items in a list, it takes linear time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遍历列表中的所有项目一次，这需要线性时间。
- en: 'Logarithmic Time: O(log n)'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对数时间：O(log n)
- en: 'In the park you will play a game where you need to find a hidden treasure.
    The game gives you clues that help you narrow down the search area. Each clue
    helps you eliminate half of the park. As you find more clues, the search area
    becomes smaller. Another way to look at it is this: if the park is 100 m², it
    takes at most 7 steps to find the treasure (2⁷ = 128). Adding another square meter
    to the park doesn’t matter, it still takes 7 steps (101 < 128). Until we hit the
    128, we’ll never need an extra step for the worst case (what is worst case here?).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在公园里，你将玩一个需要寻找隐藏宝藏的游戏。游戏会给你线索，帮助你缩小搜索区域。每个线索帮助你排除掉公园的一半。随着你找到更多的线索，搜索区域变得更小。另一种看法是：如果公园的面积是100平方米，那么找到宝藏最多需要7步（2⁷
    = 128）。即使公园面积增加了1平方米，也没有关系，它仍然需要7步（101 < 128）。直到我们达到128之前，最坏情况下我们永远不需要额外的步骤（这里的最坏情况是什么？）。
- en: '![](../Images/2fb31bee6f0ff452fdddd6d4f1abb57b.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2fb31bee6f0ff452fdddd6d4f1abb57b.png)'
- en: Reduce the search space with 50% every step. An extra square meter will not
    make that much of a difference. Image by author.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每一步将搜索空间减少50%。额外的一平方米不会有太大区别。图片由作者提供。
- en: This is similar to how binary search works, where the number of possible locations
    reduces by half with each clue, leading to a logarithmic time complexity.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于二分搜索的工作原理，其中每个线索都将可能的位置数量减少一半，导致对数时间复杂度。
- en: 'Quadratic Time: O(n²)'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二次时间：O(n²)
- en: You’re trying to plan a road trip to visit various tourist spots in a city.
    To figure out the shortest routes between every pair of locations, you need to
    compare each location with every other location. So, if you have 5 locations,
    you make 5 * 4 = 20 comparisons; if you have 10 locations, you make 10 * 9 = 90
    comparisons. The number of comparisons grows quadratically as the number of locations
    increases.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在尝试规划一个公路旅行，访问城市中的各种旅游景点。为了找出每对位置之间的最短路线，你需要将每个位置与其他每个位置进行比较。因此，如果你有5个位置，你需要进行5
    * 4 = 20次比较；如果你有10个位置，你需要进行10 * 9 = 90次比较。随着位置数量的增加，比较次数会二次增长。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A nested for loop is an example that takes quadratic time. You’re looping over
    all elements twice, so it takes n * n iterations. The code sample above will print
    5 * 5 = 25 numbers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套的for循环是一个例子，它需要二次时间。你要对所有元素进行两次循环，因此需要n * n次迭代。上面的代码示例将打印5 * 5 = 25个数字。
- en: 'Factorial Time: O(n!)'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阶乘时间：O(n!)
- en: 'Last but not least: factorial time. Imagine you’re organizing a grand travel
    adventure with your friends. You want to plan the best route that visits all the
    countries on your wish list. However, finding the optimal route involves considering
    every possible permutation of the countries. As you add more countries to your
    list, the number of possible routes grows factorially. For example, if you have
    3 countries, there are 3! = 6 possible routes (ABC, ACB, BAC, BCA, CAB, CBA).
    If you have 4 countries, there are 4! = 24 routes, and so on.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是：阶乘时间。想象一下，你正在和朋友们组织一次盛大的旅行冒险。你想规划一个访问所有愿望列表上的国家的最佳路线。然而，找到最佳路线涉及考虑所有可能的国家排列。随着你在列表中添加更多国家，可能路线的数量会按阶乘增长。例如，如果你有3个国家，有3!
    = 6种可能的路线（ABC，ACB，BAC，BCA，CAB，CBA）。如果你有4个国家，则有4! = 24条路线，依此类推。
- en: In this scenario, as you increase the number of countries on your list, the
    time it takes to consider all possible routes increases dramatically due to the
    factorial growth. This mirrors the factorial time complexity, where the time required
    grows incredibly fast as the input size increases. Just as planning an itinerary
    becomes overwhelming as you add more countries, factorial time complexity becomes
    infeasible for large problem sizes due to its rapid growth.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，随着你在列表中增加国家的数量，考虑所有可能路线所需的时间会因阶乘增长而急剧增加。这反映了阶乘时间复杂度，其中所需的时间随着输入规模的增加而极快增长。正如规划行程随着你添加更多国家而变得繁重一样，阶乘时间复杂度由于其快速增长在处理大问题时变得不可行。
- en: We can visualize time complexities in a graph. The green ones are fast, while
    the orange and red ones are hard to handle when n increases. You should try to
    avoid those if possible.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在图表中可视化时间复杂度。绿色的是快速的，而橙色和红色的是在n增加时难以处理的。如果可能的话，你应该尽量避免这些。
- en: '![](../Images/07523d5f9234bac38238ff304345f582.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07523d5f9234bac38238ff304345f582.png)'
- en: Number of operations related to input size for different Big O time complexities.
    Image by author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与输入大小相关的不同Big O时间复杂度的操作数量。图片由作者提供。
- en: Let’s discover how this relates to NP-hardness.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这与NP-难度的关系。
- en: NP-Hardness
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NP-难度
- en: 'Constant, linear, and quadratic time are examples of *polynomial time*. Polynomial
    time is of the form O(nˣ). If we compare polynomial time with exponential and
    factorial time, you can see there’s a big difference for large values of n:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 常数、线性和二次时间是*多项式时间*的例子。多项式时间的形式是O(nˣ)。如果我们将多项式时间与指数和阶乘时间进行比较，你会发现对于大值n有很大的差异：
- en: '![](../Images/f4315ee3d2ca30b2572cb5eff9a0b799.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f4315ee3d2ca30b2572cb5eff9a0b799.png)'
- en: Look at the pink numbers, they show how the exponential and the factorial time
    complexity functions increase as the size of data increases. Click to enlarge.
    Image by author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 看看粉色数字，它们展示了随着数据大小的增加，指数和阶乘时间复杂度函数如何增加。点击放大。图片由作者提供。
- en: As you can see in the table, there is a huge difference between polynomial time
    and exponential and factorial time. Polynomial time is reasonably fast for large
    values of n, it doesn’t exceed 1 second for n < 100, while exponential and factorial
    time are unmanageable. (Although if the value of n becomes really large polynomial
    time can still take quite some time.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如表所示，多项式时间与指数时间和阶乘时间之间存在巨大差异。对于大值 n，多项式时间是相对快速的，对于 n < 100 不超过 1 秒，而指数时间和阶乘时间则无法管理。（尽管如果
    n 的值非常大，多项式时间仍可能需要相当长的时间。）
- en: The concept of NP-hardness helps classify problems based on their computational
    complexity. There are four categories of problems, and the easiest distinction
    is the one between P and NP problems.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: NP-难度的概念有助于根据计算复杂度对问题进行分类。问题分为四个类别，其中最简单的区分是 P 问题和 NP 问题之间的区别。
- en: P Problems
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: P 问题
- en: P problems, where the P stands for polynomial, are solvable in polynomial time.
    In other words, their solutions can be found relatively quickly, and the time
    it takes to solve them grows at most as a polynomial function of the problem size.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: P 问题，其中 P 代表多项式，是可以在多项式时间内解决的。换句话说，它们的解决方案可以相对快速地找到，解决它们所需的时间最多是问题规模的多项式函数。
- en: An example of a mathematical optimization problem that is a problem in P is
    the shortest path problem. How to get from point A to point B while minimizing
    the distance? [Dijkstra’s algorithm](https://medium.com/towards-data-science/optimizing-connections-mathematical-optimization-within-graphs-7364e082a984)
    is an algorithm that can solve this problem in polynomial time (or less with a
    priority queue).
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个数学优化问题的例子，它属于 P 问题，是最短路径问题。如何在最小化距离的情况下从点 A 到点 B？[迪杰斯特拉算法](https://medium.com/towards-data-science/optimizing-connections-mathematical-optimization-within-graphs-7364e082a984)
    是一个可以在多项式时间内解决这个问题的算法（或者通过优先队列更少的时间）。
- en: '![](../Images/d6c8edc1303505d8df6b4ab5fdceb4dc.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6c8edc1303505d8df6b4ab5fdceb4dc.png)'
- en: What’s the shortest path from A to B? Image by author.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从 A 到 B 的最短路径是什么？图像由作者提供。
- en: NP Problems
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NP 问题
- en: 'On the other hand, NP problems (or nondeterministic polynomial problems) encompass
    a broader range of challenges. These are problems for which a proposed solution
    can be *efficiently verified* in polynomial time. However, finding the solution
    itself might require exponential or even factorial time, making them much more
    difficult to solve compared to problems in P. In other words: If you are dealing
    with an NP problem that has a large size, it would be stupid to try to brute force
    it.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，NP 问题（或非确定性多项式问题）涵盖了更广泛的挑战。这些问题的特点是提出的解决方案可以在多项式时间内*有效验证*。然而，找到解决方案本身可能需要指数级或甚至阶乘时间，使得它们比
    P 问题更难解决。换句话说：如果你处理的是一个大型 NP 问题，尝试暴力破解是愚蠢的。
- en: 'An NP problem is the [Hamiltonian path problem](https://en.wikipedia.org/wiki/Hamiltonian_path_problem):
    Given a graph, is there a path that visits each vertex exactly once and returns
    to the starting vertex? If someone claims they found a Hamiltonian path, you can
    verify it by checking if it indeed visits every vertex exactly once.'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: NP 问题是[汉密尔顿路径问题](https://en.wikipedia.org/wiki/Hamiltonian_path_problem)：给定一个图，是否存在一条路径访问每个顶点一次并返回到起始顶点？如果有人声称他们找到了一个汉密尔顿路径，你可以通过检查它是否确实访问了每个顶点一次来验证。
- en: '![](../Images/32f8bf7a7b076e3e81e8592ec81d0633.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32f8bf7a7b076e3e81e8592ec81d0633.png)'
- en: It’s easy to verify that the yellow path is Hamiltonian. Image by author.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 验证黄色路径是否为汉密尔顿路径很简单。图像由作者提供。
- en: 'Within the realm of NP problems, we encounter two subcategories: NP-complete
    and NP-hard problems.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NP 问题的范围内，我们遇到两个子类别：NP 完全问题和 NP 难问题。
- en: NP-complete Problems
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NP 完全问题
- en: 'Among NP problems, NP-complete problems stand out as the most challenging.
    An NP-complete problem is one that is in NP and exhibits a special property: if
    you could find a polynomial-time algorithm to solve it, you could solve all problems
    in NP in polynomial time. In essence, NP-complete problems are “hardest” in NP
    because they are at least as hard as any other problem in NP.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NP 问题中，NP 完全问题是最具挑战性的。NP 完全问题是指属于 NP 且具有一个特殊属性的问题：如果你能找到一个多项式时间算法来解决它，你就能在多项式时间内解决所有
    NP 问题。实质上，NP 完全问题是 NP 中“最难”的，因为它们至少与 NP 中的其他任何问题一样困难。
- en: One of the most famous NP-complete problems is the traveling salesman problem
    (TSP), in which you need to find the shortest route while visiting all given locations
    once. The number of possible routes can be calculated with n! where n is the number
    of locations to visit. In previous posts, I coded solutions for TSP using [mixed
    integer programming](https://medium.com/towards-data-science/how-to-handle-optimization-problems-daf97b3c248c)
    (second example) and [simulated annealing](https://medium.com/towards-data-science/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06)
    (first example). Closely related is the Chinese Postman problem, for which you
    need to visit every edge of a graph at least once.
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最著名的NP-完全问题之一是旅行商问题（TSP），你需要找到一条最短的路线，同时访问所有给定的位置一次。可能的路线数量可以用n!计算，其中n是要访问的位置数量。在之前的文章中，我使用了[混合整数规划](https://medium.com/towards-data-science/how-to-handle-optimization-problems-daf97b3c248c)（第二个示例）和[模拟退火](https://medium.com/towards-data-science/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06)（第一个示例）对TSP进行了编码。与之密切相关的是中国邮差问题，你需要至少访问图中的每条边一次。
- en: '![](../Images/229d899a72d1abfeb1e256f140e68d1a.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/229d899a72d1abfeb1e256f140e68d1a.png)'
- en: 'TSP: visit every node. Chinese postman problem: visit every edge at least once.
    Both are NP-complete problems. Image by author.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: TSP：访问每个节点。中国邮差问题：至少访问每条边一次。这两个都是NP-完全问题。图片由作者提供。
- en: NP-hard Problems
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NP-困难问题
- en: NP-hard problems, while related, are distinct from NP-complete problems. An
    NP-hard problem is one that is at least as hard as the hardest problems in NP,
    regardless of whether it is in NP itself. In other words, NP-hard problems don’t
    necessarily have efficient verification processes like those in NP. Instead, they
    serve as a benchmark for problems that are extremely difficult to solve on a computational
    level.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: NP-困难问题虽然相关，但与NP-完全问题不同。NP-困难问题是指至少与NP中最难的问题一样困难的问题，不管它是否在NP中。换句话说，NP-困难问题不一定具有像NP中那样的高效验证过程。相反，它们作为极其困难的计算问题的基准。
- en: The [halting problem](https://en.wikipedia.org/wiki/Halting_problem) asks whether,
    given a program and an input, the program will halt (stop executing) or run forever
    on that input. It’s undecidable, which means there’s no algorithm that can solve
    it for all cases. The halting problem is NP-hard but not in NP because its solutions
    can’t be efficiently verified. In the next code snippet you find two easy examples
    of the halting problem, for other programs it can be problematic to determine.
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[停机问题](https://en.wikipedia.org/wiki/Halting_problem)询问的是，给定一个程序和输入，该程序是否会在该输入上停止（停止执行）或无限运行。它是不可判定的，这意味着没有算法可以在所有情况下解决它。停机问题是NP-困难的，但不在NP中，因为它的解决方案无法高效验证。在下一个代码片段中，你会看到停机问题的两个简单示例，对于其他程序，确定其是否为停机问题可能是有问题的。'
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In summary, the landscape of computational complexity encompasses problems that
    range from easily solvable to incredibly challenging. While P problems are efficiently
    solvable, NP problems introduce a layer of complexity, with NP-complete problems
    representing the apex of computational difficulty within the NP class. Additionally,
    NP-hard problems provide insights into the boundaries of computational feasibility,
    even if they are not directly in the NP class.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，计算复杂度的范围包括从易于解决到极具挑战性的问题。虽然P问题可以高效解决，但NP问题引入了一层复杂性，其中NP-完全问题代表了NP类中计算难度的巅峰。此外，NP-困难问题提供了对计算可行性边界的见解，即使它们不直接属于NP类。
- en: '![](../Images/fcbe47122bfa2fe54553453762de74c5.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcbe47122bfa2fe54553453762de74c5.png)'
- en: If we assume that P ≠ NP (more on this in the last section), this is what the
    Euler diagram looks like for the set of problems in P, NP, NP-complete and NP-hard.
    Image by author.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设P ≠ NP（更多内容在最后一部分），这就是P、NP、NP-完全和NP-困难问题集合的欧拉图。图片由作者提供。
- en: 'Unfortunately, NP problems are everywhere in real life. For example, optimizing
    routes for delivery trucks, scheduling tasks efficiently, designing electronic
    circuits, and even folding proteins are all instances of NP problems. The intractability
    of these problems makes finding optimal solutions a huge challenge: they are notoriously
    challenging to solve for large inputs. This difficulty often leads to the development
    of approximation algorithms, [heuristics](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6),
    and specialized techniques to find solutions that might not be optimal but are
    acceptable within certain bounds.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，NP 问题在现实生活中无处不在。例如，优化配送卡车的路线、高效安排任务、设计电子电路，甚至蛋白质折叠都是 NP 问题的实例。这些问题的难处理性使得寻找最佳解决方案成为一项巨大的挑战：它们在大输入下
    notoriously 难以解决。这种困难通常导致了近似算法、[启发式方法](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6)和专门技术的发展，以寻找可能不是最优但在某些范围内可接受的解决方案。
- en: '![](../Images/59b4ad5e130618d4b76f4169e5949749.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59b4ad5e130618d4b76f4169e5949749.png)'
- en: How to write history? Continue reading to find out! Photo by [Natalia Y.](https://unsplash.com/@foxfox?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如何书写历史？继续阅读以了解更多！照片由 [Natalia Y.](https://unsplash.com/@foxfox?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Millennium Prize Problem: P versus NP'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 千年奖问题：P 对 NP
- en: 'NP hardness is related to one of the unsolved millennium prize problems. The
    problem is easy to understand. If you can prove that P = NP or that P ≠ NP, you
    solved it! What does this mean? As you know by now, P problems take way less steps
    to solve than NP-complete problems for large n. But it has never been proven that
    P problems are truly different from NP problems, which means that it’s not for
    certain that there exists no polynomial time algorithm to solve an NP problem.
    How can this problem be solved? There are two possible outcomes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: NP 硬度与其中一个未解的千年奖问题有关。这个问题很容易理解。如果你能证明 P = NP 或者 P ≠ NP，你就解决了它！这意味着什么？正如你现在所知道的，P
    问题在大 n 下需要的步骤远少于 NP 完全问题。但从未证明 P 问题与 NP 问题确实不同，这意味着尚不确定是否存在多项式时间算法来解决 NP 问题。如何解决这个问题？有两种可能的结果：
- en: If you can find a polynomial time algorithm that solves an NP-complete problem
    (e.g. the traveling salesman problem), you have proven that P = NP.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你能找到一个解决 NP 完全问题（例如旅行商问题）的多项式时间算法，你就证明了 P = NP。
- en: If you can prove that there exists no polynomial time algorithm to solve a specific
    NP problem, you have proven that P ≠ NP. You might need to come up with a new
    NP-complete problem to make this possible.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你能证明不存在多项式时间算法来解决特定的 NP 问题，你就证明了 P ≠ NP。你可能需要提出一个新的 NP 完全问题来实现这一点。
- en: Proving the first point will shake up the world, because internet security is
    build upon the idea of NP hardness. If a polynomial time algorithm can be found
    to crack codes, it would be disastrous. Many scientists believe the second outcome
    is true, and that there exists no polynomial time algorithm that solves NP-complete
    problems. But this has never been proven. If you want to write history, this is
    your chance!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 证明第一个观点将震撼世界，因为互联网安全是建立在 NP 硬度的基础上的。如果能够找到破解代码的多项式时间算法，那将是灾难性的。许多科学家认为第二种结果是正确的，即不存在能够解决
    NP 完全问题的多项式时间算法。但这从未被证明。如果你想书写历史，这就是你的机会！
- en: Conclusion
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Delving into the intricacies of computational complexity shows the challenges
    of problem solving in computer science. Time complexity allows us to assess algorithm
    efficiency as problem sizes grow. Through this lens, we’ve explored scenarios
    like constant, linear, logarithmic, quadratic, and factorial complexities.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 深入探讨计算复杂性的细节揭示了计算机科学中问题解决的挑战。时间复杂性让我们能够在问题规模增长时评估算法效率。通过这种视角，我们探讨了常数、线性、对数、平方和阶乘复杂度等场景。
- en: Shifting to NP-hardness, we navigate the landscape of problems with varying
    degrees of complexity. P versus NP problems stand out — solvable in polynomial
    time for P, while NP problems offer quick verification but often demand exponential
    or factorial time for getting to the solution. NP-complete and NP-hard problems
    emerge as the pinnacles of computational challenge. NP-complete problems encompass
    the “hardest” in NP, offering shortcuts to solve all NP problems efficiently.
    NP-hard problems, not confined to NP, represent the zenith of computational complexity.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 转向 NP-困难性，我们探索了各种复杂度的问题。P 与 NP 问题尤为突出——P 问题可以在多项式时间内解决，而 NP 问题则提供快速验证，但通常需要指数级或阶乘时间才能找到解决方案。NP
    完全问题和 NP-困难问题成为计算挑战的巅峰。NP 完全问题涵盖了 NP 中的“最难”问题，提供了高效解决所有 NP 问题的捷径。NP-困难问题不局限于 NP，代表了计算复杂性的顶峰。
- en: Lastly, the enigma of P versus NP — an elusive millennium prize problem — holds
    the potential to reshape our comprehension of computational complexity. With far-reaching
    implications, the quest to prove P = NP or P ≠ NP beckons pioneers to shape the
    course of history.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，P 与 NP 问题的谜团——一个难以捉摸的千年难题——有潜力重塑我们对计算复杂性的理解。这个问题的深远影响使得证明 P = NP 或 P ≠ NP
    的探索者有可能改变历史的进程。
- en: Related
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关
- en: '[](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----558d43276044--------------------------------)
    [## Why Every Data Scientist Should Learn Mathematical Optimization'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----558d43276044--------------------------------)
    [## 为什么每位数据科学家都应该学习数学优化'
- en: Data science courses are focusing on data visualization, feature engineering,
    data processing, (un)supervised learning…
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据科学课程目前关注数据可视化、特征工程、数据处理、（有/无）监督学习……
- en: towardsdatascience.com](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----558d43276044--------------------------------)
    [](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----558d43276044--------------------------------)
    [## Five ways to combine Mathematical Optimization and Machine Learning
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----558d43276044--------------------------------)
    [](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----558d43276044--------------------------------)
    [## 五种将数学优化与机器学习结合的方法
- en: Practical examples of combining two forces.
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结合两种力量的实际例子。
- en: towardsdatascience.com](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----558d43276044--------------------------------)
    [](/exact-algorithm-or-heuristic-20d59d7fb359?source=post_page-----558d43276044--------------------------------)
    [## Exact Algorithm or Heuristic?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----558d43276044--------------------------------)
    [](/exact-algorithm-or-heuristic-20d59d7fb359?source=post_page-----558d43276044--------------------------------)
    [## 精确算法还是启发式算法?
- en: A step-by-step guide to make the right choice for your mathematical optimization
    problem
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逐步指南，帮助你为数学优化问题做出正确选择
- en: towardsdatascience.com](/exact-algorithm-or-heuristic-20d59d7fb359?source=post_page-----558d43276044--------------------------------)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/exact-algorithm-or-heuristic-20d59d7fb359?source=post_page-----558d43276044--------------------------------)
