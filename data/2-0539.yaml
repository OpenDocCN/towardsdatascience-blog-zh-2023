- en: Complete Guide to Caching in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整的 Python 缓存指南
- en: 原文：[https://towardsdatascience.com/complete-guide-to-caching-in-python-b4e37a4bcebf](https://towardsdatascience.com/complete-guide-to-caching-in-python-b4e37a4bcebf)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/complete-guide-to-caching-in-python-b4e37a4bcebf](https://towardsdatascience.com/complete-guide-to-caching-in-python-b4e37a4bcebf)
- en: How does caching work, and ways to cache your functions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存如何工作及缓存函数的方法
- en: '[](https://kayjanwong.medium.com/?source=post_page-----b4e37a4bcebf--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----b4e37a4bcebf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b4e37a4bcebf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b4e37a4bcebf--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----b4e37a4bcebf--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://kayjanwong.medium.com/?source=post_page-----b4e37a4bcebf--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----b4e37a4bcebf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b4e37a4bcebf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b4e37a4bcebf--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----b4e37a4bcebf--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b4e37a4bcebf--------------------------------)
    ·7 min read·Dec 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b4e37a4bcebf--------------------------------)
    ·阅读时间 7 分钟·2023年12月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b0f443c08318e8fb89a059bc3e15b59c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0f443c08318e8fb89a059bc3e15b59c.png)'
- en: Photo by [Nana Smirnova](https://unsplash.com/@nananadolgo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Nana Smirnova](https://unsplash.com/@nananadolgo?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: When repeated function calls are made with the same argument, this causes the
    computation to be repeated. **Memoization** is useful in such scenarios where
    the results of function calls can be ‘saved’ for future use. This results in time
    savings and code optimization as code becomes less computationally expensive.
    **Caching** is a more general term used to refer to storing of any data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当重复调用函数并使用相同参数时，会导致计算被重复执行。**记忆化** 在这种情况下非常有用，因为函数调用的结果可以被‘保存’以供将来使用。这将节省时间并优化代码，因为代码变得更少计算密集。**缓存**
    是一个更通用的术语，用于指代存储任何数据。
- en: This article will touch on the different caching strategies, caching considerations,
    and how to enable and implement different types of caching for your scripts (using
    Python package and your implementation)!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将探讨不同的缓存策略、缓存考虑因素以及如何启用和实现不同类型的缓存（使用 Python 包和你的实现）！
- en: Table of Contents
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: '[Types of Caching](https://medium.com/p/b4e37a4bcebf/#64d2)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[缓存类型](https://medium.com/p/b4e37a4bcebf/#64d2)'
- en: '[Caching Considerations](https://medium.com/p/b4e37a4bcebf/#4de0)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[缓存考虑因素](https://medium.com/p/b4e37a4bcebf/#4de0)'
- en: '[LRU Caching](https://medium.com/p/b4e37a4bcebf/#b4c2)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LRU 缓存](https://medium.com/p/b4e37a4bcebf/#b4c2)'
- en: '[LFU Caching](https://medium.com/p/b4e37a4bcebf/#b490)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LFU 缓存](https://medium.com/p/b4e37a4bcebf/#b490)'
- en: '[FIFO / LIFO Caching](https://medium.com/p/b4e37a4bcebf/#420a)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FIFO / LIFO 缓存](https://medium.com/p/b4e37a4bcebf/#420a)'
- en: Types of Caching
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存类型
- en: 'There are several strategies for caching based on your needs, such as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的需求，有几种缓存策略，例如：
- en: '**Least Recently Used (LRU)**: removes least recently used data, the most common
    type of caching'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最少最近使用（LRU）**：移除最少最近使用的数据，是最常见的缓存类型'
- en: '**Least Frequently Used (LFU)**: removes least frequently used data'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最少频繁使用（LFU）**：移除最少频繁使用的数据'
- en: '**First-In-First-Out (FIFO)**: removes the oldest data'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先进先出（FIFO）**：移除最旧的数据'
- en: '**Last-In-First-Out (LIFO)**: removes the newest data'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后进先出（LIFO）**：移除最新的数据'
- en: '**Most Recently Used (MRU)**: removes most recently used data'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最近使用（MRU）**：移除最近使用的数据'
- en: '**Random Replacement (RR)**: removes randomly selected data'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机替换（RR）**：移除随机选择的数据'
- en: Caching Considerations
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存考虑因素
- en: 'When using caching in your applications, you should consider the ***memory
    footprint*** of the cache as it is storing additional information. If you are
    deciding between different implementations, in terms of architecture and data
    structures, there are a few timing considerations such as:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中使用缓存时，您应该考虑缓存的***内存占用***，因为它存储了额外的信息。如果在不同的实现之间进行选择，就架构和数据结构而言，有几个时间考虑因素，例如：
- en: '***Access time***: For arguments that have been computed before, results should
    be accessed quickly in `O(1)` time'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***访问时间***：对于已经计算过的参数，结果应在`O(1)`时间内快速访问'
- en: '***Insertion time***: For new arguments, data should be inserted into the cache,
    preferably in `O(1)` time (depending on implementation, some may take `O(n)` time,
    choose wisely!)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***插入时间***：对于新参数，数据应尽可能在`O(1)`时间内插入缓存（根据实现，有些可能需要`O(n)`时间，选择时请谨慎！）'
- en: '***Deletion time***: In the case when the cache is full, data will need to
    be removed according to the caching strategy. Deletion involves identifying the
    data to be deleted and subsequently removing them from memory'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***删除时间***：当缓存满时，需要根据缓存策略删除数据。删除涉及识别要删除的数据，然后从内存中移除它们。'
- en: 1 — Least Recently Used (LRU) Caching
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 — 最少使用（LRU）缓存
- en: Implemented by adding a decorator to your Python function
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过为Python函数添加装饰器来实现
- en: '![](../Images/f1a04fe4afdb2e4f0abbaf75354c7bf2.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f1a04fe4afdb2e4f0abbaf75354c7bf2.png)'
- en: 'Fig 1: LRU Implementation (Image by author)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：LRU实现（图片由作者提供）
- en: '**How it works**: It uses a dictionary and a doubly linked list. In the dictionary,
    the key-value pairs are the supplied arguments and the entries in the doubly linked
    list. This allows the results to be quickly referenced given the supplied arguments
    (`O(1)` access time). Since arguments can be stored as a dictionary key, they
    must be hashable.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作原理**：它使用字典和双向链表。在字典中，键值对是提供的参数和双向链表中的条目。这使得根据提供的参数快速引用结果（`O(1)`访问时间）。由于参数可以作为字典键存储，因此它们必须是可哈希的。'
- en: In the doubly linked list, function results are stored in the entries. Entries
    are sorted according to their recency and can reference their immediate previous
    and next entries. This allows entries to be easily inserted or reordered and for
    quick identification and deletion of the least recent entry if the cache is full.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在双向链表中，函数结果存储在条目中。条目按其最近性排序，并可以引用其直接前一个和下一个条目。这允许条目轻松插入或重新排序，并在缓存满时快速识别和删除最久未用的条目。
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Advanced Usage
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级用法
- en: 'LRU caching can be enhanced by implementing the following features:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现以下功能来增强LRU缓存：
- en: Maximum cache size with `maxsize` argument
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`maxsize`参数设置最大缓存大小
- en: Unlimited cache size with `maxsize=None` argument or `functools.cache`. This
    means that data will never be deleted, which can lead to timing improvement at
    the expense of memory footprint.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`maxsize=None`参数或`functools.cache`设置无限缓存大小。这意味着数据将永远不会被删除，这可能在内存占用的代价下带来时间改进。
- en: Retrieve caching information on the number of hits and misses using `.cache_info()`.
    Cache statistics allow us to evaluate how efficiently the cache is being accessed
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`.cache_info()`检索缓存命中和未命中的信息。缓存统计信息使我们能够评估缓存的访问效率。
- en: Add expiration time with `cachetools.TTLCache`
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cachetools.TTLCache`添加过期时间
- en: '[Linking cache with CPU memory usage](https://stackoverflow.com/questions/23477284/memory-aware-lru-caching-in-python)
    instead of cache size'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[将缓存与CPU内存使用挂钩](https://stackoverflow.com/questions/23477284/memory-aware-lru-caching-in-python)而不是缓存大小'
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Note**: Other Python packages implement caching such as [fastcache](https://github.com/pbrady/fastcache)
    but they are not as popular or commonly used as `functools.lru_cache`'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**：其他Python包实现了缓存，例如[fastcache](https://github.com/pbrady/fastcache)，但它们没有`functools.lru_cache`那么受欢迎或常用。'
- en: 2 — Least Frequently Used (LFU) Caching
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 — 最少频繁使用（LFU）缓存
- en: Implemented by maintaining a cache dictionary and a frequency dictionary
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过维护一个缓存字典和一个频率字典来实现
- en: Many implementations of LFU caching can be found online, including `cachedtools`
    with usage similar to LRU caching in the previous section. There can be various
    implementations for LFU caching using Hash Map, Singly Linked List, or Doubly
    Linked List.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在线可以找到许多LFU缓存的实现，包括`cachedtools`，其使用方法类似于上一节中的LRU缓存。LFU缓存可以使用哈希映射、单向链表或双向链表实现。
- en: I find maintaining two dictionaries the most optimal way, considering the access,
    insertion, and deletion time. Memory usage can be improved further by the use
    of hashing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现维护两个字典是最优的方式，考虑到访问、插入和删除时间。通过使用哈希可以进一步提高内存使用效率。
- en: '![](../Images/442c18aac4e1c6b56cf92eeadb991df9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/442c18aac4e1c6b56cf92eeadb991df9.png)'
- en: 'Fig 2: LFU Implementation (Image by author)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2: LFU 实现（作者图片）'
- en: '**How it works**: It uses 2 dictionaries. In the cache dictionary, the key
    is the supplied arguments and the value is a tuple of the function results and
    frequency. This allows quick retrieval of the function results (`O(1)` access
    time!) and frequency (to be used for accessing frequency dictionary).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作原理**：它使用2个字典。在缓存字典中，键是提供的参数，值是一个包含函数结果和频率的元组。这允许快速检索函数结果（`O(1)`访问时间！）和频率（用于访问频率字典）。'
- en: In the frequency dictionary, the key is the frequency and the value is a list
    of supplied arguments. Storing the list of supplied arguments allows quick identification
    of the least frequently used argument and subsequent eviction of the argument
    and result from both dictionaries. Deque can be used instead of a list for quicker
    access, insertion, and deletion time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在频率字典中，键是频率，值是提供的参数列表。存储提供的参数列表允许快速识别最不常用的参数，并从两个字典中逐出该参数及其结果。可以使用Deque代替列表，以便更快的访问、插入和删除时间。
- en: '**Caveat**: In LFU caching, it is biased against recent entries as newer entries
    may not have as high frequency as the existing entries — making it hard to evict
    the older entries even if they are being accessed less frequently'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**警告**：在LFU缓存中，它对最近的条目有偏见，因为较新的条目可能没有现有条目的频率高——使得即使访问频率较低，也很难逐出较旧的条目。'
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code snippet above is adapted from [here](https://www.tutorialspoint.com/lfu-cache-in-python),
    with some tweaks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段改编自[这里](https://www.tutorialspoint.com/lfu-cache-in-python)，并做了一些调整。
- en: 'To use the LFU cache as a decorator, we can wrap the `LFUCache` class and use
    it similarly to `functools.lru_cache`. This can be done as such:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要将LFU缓存作为装饰器使用，我们可以封装`LFUCache`类，并类似于`functools.lru_cache`来使用。可以按如下方式进行：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 3 — First-In-First-Out (FIFO) / Last-In-First-Out (LIFO) Cache
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 — 先进先出 (FIFO) / 后进先出 (LIFO) 缓存
- en: Implemented by maintaining an ordered dictionary
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过维护一个有序字典实现
- en: '![](../Images/e741aa4449fdf5e820e041085a8f7d0d.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e741aa4449fdf5e820e041085a8f7d0d.png)'
- en: 'Fig 3: FIFO / LIFO Implementation (Image by author)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3: FIFO / LIFO 实现（作者图片）'
- en: '**How it works**: It uses an ordered dictionary where the key-value pairs are
    the supplied arguments and the function results. The dictionary is sorted chronologically
    according to when the supplied arguments were first called.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作原理**：它使用一个有序字典，其中键值对是提供的参数和函数结果。字典按照提供的参数首次调用的时间进行排序。'
- en: 'This allows the results to be quickly referenced given the supplied arguments
    (`O(1)` access time), and entries can be removed from the front or the back depending
    on the caching strategy (`O(1)` insertion and deletion time). Implementation can
    be done using `cachedtools` with usage similar to LRU caching in the previous
    section. To illustrate this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许根据提供的参数快速引用结果（`O(1)`访问时间），条目可以根据缓存策略从前面或后面移除（`O(1)`插入和删除时间）。实现可以使用`cachedtools`，使用方式类似于上一节中的LRU缓存。为了说明这一点：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Hope you have understood more about caching, types of caching strategies and
    their considerations, and implementations using Python libraries, or your implementation!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你对缓存、缓存策略的类型及其考虑因素，以及使用Python库或你自己的实现有了更多了解！
- en: Related Links
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关链接
- en: 'LRU Documentation: [https://docs.python.org/3/library/functools.html#functools.lru_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LRU 文档: [https://docs.python.org/3/library/functools.html#functools.lru_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache)'
- en: 'LFU Article: [https://www.tutorialspoint.com/lfu-cache-in-python](https://www.tutorialspoint.com/lfu-cache-in-python)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LFU文章: [https://www.tutorialspoint.com/lfu-cache-in-python](https://www.tutorialspoint.com/lfu-cache-in-python)'
- en: '`cachetools` Official GitHub: [https://github.com/tkem/cachetools](https://github.com/tkem/cachetools)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cachetools` 官方 GitHub: [https://github.com/tkem/cachetools](https://github.com/tkem/cachetools)'
