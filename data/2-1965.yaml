- en: 'Temporary Variables in Python: Readability versus Performance'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的临时变量：可读性与性能
- en: 原文：[https://towardsdatascience.com/temporary-variables-in-python-readability-versus-performance-f6708b5f293c](https://towardsdatascience.com/temporary-variables-in-python-readability-versus-performance-f6708b5f293c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/temporary-variables-in-python-readability-versus-performance-f6708b5f293c](https://towardsdatascience.com/temporary-variables-in-python-readability-versus-performance-f6708b5f293c)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Temporary variables can make code clearer. What about the performance of such
    code?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 临时变量可以使代码更清晰。那么这样的代码性能如何呢？
- en: '[](https://medium.com/@nyggus?source=post_page-----f6708b5f293c--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----f6708b5f293c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f6708b5f293c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f6708b5f293c--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----f6708b5f293c--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----f6708b5f293c--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----f6708b5f293c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f6708b5f293c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f6708b5f293c--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----f6708b5f293c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f6708b5f293c--------------------------------)
    ·8 min read·Jun 1, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----f6708b5f293c--------------------------------)
    ·8分钟阅读·2023年6月1日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/df7237943e419001b72e9b50f1dae8b8.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df7237943e419001b72e9b50f1dae8b8.png)'
- en: Are Python shortcuts fast? Photo by [Stefan Steinbauer](https://unsplash.com/@usinglight?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python的快捷方式快吗？图片由[Stefan Steinbauer](https://unsplash.com/@usinglight?utm_source=medium&utm_medium=referral)提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Temporary variables are variables with short lifetimes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 临时变量是生命周期很短的变量：
- en: '[](https://en.wikipedia.org/wiki/Temporary_variable?source=post_page-----f6708b5f293c--------------------------------#:~:text=In%20computer%20programming%2C%20a%20temporary,a%20variable%20with%20local%20scope)
    [## Temporary variable - Wikipedia'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://en.wikipedia.org/wiki/Temporary_variable?source=post_page-----f6708b5f293c--------------------------------#:~:text=In%20computer%20programming%2C%20a%20temporary,a%20variable%20with%20local%20scope)
    [## 临时变量 - 维基百科'
- en: From Wikipedia, the free encyclopedia In computer programming, a temporary variable
    is a variable with short lifetime…
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自维基百科，免费的百科全书。在计算机编程中，临时变量是生命周期很短的变量……
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/Temporary_variable?source=post_page-----f6708b5f293c--------------------------------#:~:text=In%20computer%20programming%2C%20a%20temporary,a%20variable%20with%20local%20scope)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[en.wikipedia.org](https://en.wikipedia.org/wiki/Temporary_variable?source=post_page-----f6708b5f293c--------------------------------#:~:text=In%20computer%20programming%2C%20a%20temporary,a%20variable%20with%20local%20scope)'
- en: 'They are used very often in programming, and you don’t have to know this term
    to use temporary variables. One of the most common use cases is to make code clearer,
    for instance, in pipelines:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 临时变量在编程中非常常用，你不需要知道这个术语也可以使用临时变量。一个最常见的用例是使代码更清晰，例如，在管道中：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, I used Python’s [walrus operator](https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions)
    to visually represent an assignment, just the way it’s used in Python code. In
    this pipeline, we have two temporary variables: `tempvar_1` and `tempvar_2`. Their
    lifetime is short in terms of data flow through the code, although it can be long
    in terms of real time. `tempvar_1` is used for only one purpose: to pass the results
    from the first step of the pipeline to the next. But note that technically, it’s
    unnecessary:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用了Python的[海象运算符](https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions)来直观地表示赋值，就像在Python代码中使用的一样。在这个管道中，我们有两个临时变量：`tempvar_1`
    和 `tempvar_2`。它们在数据流过代码的时间上生命周期很短，尽管在实际时间上可能很长。`tempvar_1` 仅用于一个目的：将管道第一步的结果传递到下一步。但请注意，从技术上讲，它是没有必要的：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both versions will work the same way, although the latter can be much less readable.
    Thus, the former version is used a lot in programming, with the only reason to
    make the code cleaner.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个版本的功能相同，但后者的可读性可能大大降低。因此，前者在编程中被广泛使用，唯一的原因是使代码更清晰。
- en: Note that had `tempvar_1` or `tempvar_2` been used later on in the code, it
    wouldn’t have been a temporary variable, since it wouldn’t have had a short lifetime.
    For the sake of simplicity, we can assume that a temporary variable is one you
    use just once, in order to pass the output of one callable as input to another.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果`tempvar_1`或`tempvar_2`在代码后续中使用，它们就不再是临时变量，因为它们的生命周期不会很短。为了简单起见，我们可以假设临时变量是你只使用一次的变量，用于将一个可调用的输出作为输入传递给另一个。
- en: Have you ever pondered if using temporary variables in a pipeline constitutes
    a better option than a direct — and shortest — way of calculating the pipeline?
    As in, which of the two following snippets is better?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经思考过在管道中使用临时变量是否比直接——和最短——的计算方式更好？比如，以下两个代码片段哪个更好？
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or, this time using simple arithmetics:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，这次使用简单的算术运算：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Which would you choose? Does it even matter?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你会选择哪种方式？这重要吗？
- en: 'Python is so popular for various reasons, and one of them is the *readability*
    of its code. At the same time, Python is known for its *poor performance* — although
    it isn’t as bad as many claim, as I wrote in the following article:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python因各种原因而非常受欢迎，其中之一是其代码的*可读性*。同时，Python也因其*性能差*而闻名——尽管它并不像许多人声称的那样糟糕，正如我在下面的文章中所写的：
- en: '[](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----f6708b5f293c--------------------------------)
    [## The Speed of Python: It Ain’t That Bad!'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----f6708b5f293c--------------------------------)
    [## Python的速度：并没有那么糟糕！'
- en: I hear all the time that Python is way too slow. Is it?
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我一直听到Python太慢了。这是真的吗？
- en: medium.com](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----f6708b5f293c--------------------------------)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----f6708b5f293c--------------------------------)
- en: Oftentimes, you can — and need to — choose between readability and performance.
    Sometimes you may need even the slightest improvement in performance, even if
    it means decreased readability. Other times, a small improvement in performance
    means no side effects and as readable and comprehensible code as its slower counterpart;
    why wouldn’t you go for it?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，你可以——也需要——在可读性和性能之间进行选择。有时你可能需要哪怕是最微小的性能提升，即使这意味着可读性降低。其他时候，小幅度的性能提升意味着没有副作用，并且代码既可读又易懂；为何不选择它呢？
- en: 'When an improvement in performance comes at some cost, however, you should
    be careful. You should ask yourself — or the development team you’re part of —
    the following question: Is this minor improvement in performance worth decreasing
    code readability?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当性能的提升带来一些成本时，你应该小心。你应该问自己——或你所在的开发团队——以下问题：这种微小的性能提升是否值得降低代码的可读性？
- en: 'In this article, I want to show you an example of such an improvement, achieved
    by avoiding temporary variables. Getting rid of them can improve performance a
    little bit, but usually at a cost of decreased readability. Yes, usually, so *not
    always*: if you’re lucky, getting rid of temporary variables can help you improve
    both performance *and* readability. A perfect situation, isn’t it?'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想向你展示一个通过避免临时变量实现的改进的例子。去除它们可以稍微提高性能，但通常会以降低可读性为代价。是的，通常是这样，所以*不总是*：如果你运气好，去除临时变量可以帮助你同时提高性能*和*可读性。这是完美的情况，不是吗？
- en: Temporary variables in Python code
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python代码中的临时变量
- en: Imagine you want to implement a function that calculates a sequence of things.
    For simplicity, we will perform some basic arithmetic calculations so that the
    example is simple. In real life, however, such pipelines can contain several functions
    doing various things, even quite complicated.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你想实现一个计算一系列事物的函数。为了简单起见，我们将进行一些基本的算术计算，使例子变得简单。然而，在现实生活中，这样的管道可能包含多个函数执行各种操作，甚至相当复杂。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So, we’re starting with `x`, and then we calculate `y`, `z`, `f` and finally
    `g`, `g` being the final output, so it’s returned. This is similar to [*function
    composition*](https://en.wikipedia.org/wiki/Function_composition_(computer_science)),
    the difference being that here we don’t compose functions but calculations. In
    many scenarios, however, you will have actual functions; for instance, instead
    of `y = x**2`, you can have `y = some_function(x)`. A perfect example of when
    something like that works in Python is generator pipelines:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们从 `x` 开始，然后计算 `y`、`z`、`f`，最终得到 `g`，`g` 是最终输出，因此返回。这类似于 [*函数组合*](https://en.wikipedia.org/wiki/Function_composition_(computer_science))，不同之处在于这里我们不是组合函数，而是组合计算。然而，在许多场景中，你将会有实际的函数；例如，代替
    `y = x**2`，你可以有 `y = some_function(x)`。在 Python 中类似的一个完美示例就是生成器管道：
- en: '[](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----f6708b5f293c--------------------------------)
    [## Building Generator Pipelines in Python'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----f6708b5f293c--------------------------------)
    [## 在 Python 中构建生成器管道'
- en: This article proposes an elegant way to build generator pipelines
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本文提出了一种优雅的构建生成器管道的方法。
- en: towardsdatascience.com](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----f6708b5f293c--------------------------------)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----f6708b5f293c--------------------------------)
- en: 'and their general version, comprehension pipelines:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 及其一般版本，理解管道：
- en: '[](/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----f6708b5f293c--------------------------------)
    [## Building Comprehension Pipelines in Python'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----f6708b5f293c--------------------------------)
    [## 在 Python 中构建理解管道'
- en: Comprehension pipelines are a Python-specific idea for building pipelines
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解管道是 Python 特有的构建管道的概念。
- en: towardsdatascience.com](/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----f6708b5f293c--------------------------------)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/building-comprehension-pipelines-in-python-ec68dce53d03?source=post_page-----f6708b5f293c--------------------------------)
- en: 'In simple situations, like the one in our `calc_with_tempvar()` function, such
    an approach seems to be an overkill. Instead, we could simply do the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单的情况下，例如我们的 `calc_with_tempvar()` 函数中，这种方法似乎有些多余。相反，我们可以简单地做如下操作：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Both lead to the very same results, as these tests show:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试表明，两者产生了完全相同的结果：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: No output means this is true indeed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 没有输出意味着这确实是正确的。
- en: 'First, let’s disassembly the two functions, to see their translations to Python
    bytecode:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们拆解这两个函数，看看它们如何转换为 Python 字节码：
- en: '![](../Images/cc0bd7ca49181294b52740181df7c134.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc0bd7ca49181294b52740181df7c134.png)'
- en: Disassembly of the two functions using the dis.dis() function. Image by author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 dis.dis() 函数对两个函数进行拆解。图片由作者提供
- en: Even without analyzing the bytecode of the two functions, we see that Python
    has a more complex job to do with the function employing the temporary variables
    than with the one without them. This does not come as a surprise, does it? The
    way the functions are defined suggests itself that `calc_with_tempvar()` will
    have to do more to reach the outcome than `calc_without_tempvar()`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不分析这两个函数的字节码，我们也可以看到，使用临时变量的函数比不使用临时变量的函数在 Python 中需要做更复杂的工作。这不奇怪，对吧？函数的定义方式本身表明
    `calc_with_tempvar()` 要达到结果需要做更多工作，而不是 `calc_without_tempvar()`。
- en: 'Temporary variables: Performance'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 临时变量：性能
- en: 'How does this translate into performance, however? To learn this, let’s use
    the `[perftester](https://github.com/nyggus/perftester)` Python package, dedicated
    to benchmarking and testing time and memory performance of Python functions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这如何转化为性能呢？为了了解这一点，让我们使用 `[perftester](https://github.com/nyggus/perftester)`
    Python 包，它专门用于基准测试和测试 Python 函数的时间和内存性能：
- en: '[](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----f6708b5f293c--------------------------------)
    [## Benchmarking Python Functions the Easy Way: perftester'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----f6708b5f293c--------------------------------)
    [## 轻松基准测试 Python 函数：perftester'
- en: You can use perftester to benchmark Python functions the easy way
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你可以使用 perftester 轻松地基准测试 Python 函数。
- en: towardsdatascience.com](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----f6708b5f293c--------------------------------)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----f6708b5f293c--------------------------------)
- en: For benchmarks, I used Python 3.11 on a Windows 10 machine, in WSL 1, 32GB of
    RAM and four physical (eight logical) cores. However, in our case, raw times do
    not matter that much; we will focus on relative comparisons instead.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基准测试，我在Windows 10机器上的WSL 1中使用了Python 3.11，配备32GB的RAM和四个物理（八个逻辑）核心。然而，在我们的案例中，原始时间并不那么重要；我们将重点关注相对比较。
- en: First, let me change the default settings for the benchmarks. I will use 20
    million function calls repeated 7 times; the quickest among the 7 times will be
    chosen as the benchmark result.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我更改基准测试的默认设置。我将使用2000万次函数调用重复7次；从中选择最快的一次作为基准结果。
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now the actual benchmarks, for a `float` number:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实际的基准测试，对于一个`float`数值：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And let’s see the results¹:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我们看看结果¹：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As expected, the one-shot version (without temporary variables) is faster —
    around 5% faster. On the one hand, it’s not much. On the other hand, it’s 5% achieved
    by something that small — so small a change!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，一次性版本（不使用临时变量）更快——大约快5%。一方面，这并不多。另一方面，这仅仅是通过如此微小的改变——如此小的变化就达到了5%！
- en: The above calculations are fast. For long calculations, however, the difference
    would likely be close to invisible.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述计算是快速的。然而，对于较长的计算，差异可能接近于不可见。
- en: 'Did you notice that we can improve the `calc_with_tempvar()` function a little
    bit? Do we need the last object, `g`? Sometimes an object like this can increase
    a function’s readability, via a good name, but not in this case — so we don’t
    need `g`. Let’s see if getting rid of it will help us in terms of performance:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到我们可以稍微改进一下`calc_with_tempvar()`函数吗？我们需要最后一个对象`g`吗？有时候，像这样的对象通过一个好的名字可以提高函数的可读性，但在这种情况下并不需要——所以我们不需要`g`。让我们看看去掉它是否会提高性能：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A minor improvement, as the composition version is about `1.032` times slower
    than this one, and this one is about `1.023` times slower than the one-shot version.
    But again, this improvement was achieved by such a small change! If so, isn’t
    this small change worth using?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个微小的改进，因为组合版本比这个版本慢`1.032`倍，而这个版本比一次性版本慢`1.023`倍。但再次强调，这种改进是通过如此微小的变化实现的！既然如此，这个微小的改变值得使用吗？
- en: Conclusions
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: '*For me — it definitely is, but not always.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*对我来说——绝对值得，但并非总是。*'
- en: The point is, when performance does not matter, go for readability. If it really
    does not change a thing when your program runs a minute, 10 seconds, or even half
    a second longer — simply don’t even think about improving performance by such
    tricks. Why should you? Why should you worsen readability in order to make minor
    improvements when these improvements do not matter whatsoever? Just go for readability.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，当性能不重要时，优先考虑可读性。如果程序运行多一分钟、10秒钟或甚至半秒钟都不会改变任何事情——干脆不要考虑通过这些技巧来提高性能。为什么要这样做？为什么要为了微小的改进而降低可读性呢？只需关注可读性。
- en: Of course, there will be times when getting rid of temporary variables will
    increase the readability of the function. In this case, why should we even discuss
    this? Again, just go for readability, and when this means increasing performance,
    too — well, a perfect situation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有时去掉临时变量会提高函数的可读性。在这种情况下，为什么我们还要讨论这个？再次强调，优先考虑可读性，当这也意味着提高性能时——那就完美了。
- en: Sometimes performance does matter. Even a split of a second can make a difference.
    If this is the case, you should profile your code and find bottlenecks. Other
    times, you may wish to optimize every single part of the code. One example is
    working on a framework to be used by others, and for some of them performance
    will matter. In that case, it’s *your* responsibility — as of the framework’s
    author — to offer as fast a tool as possible. Otherwise, you’re risking that some
    users will not use your framework.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有时性能确实很重要。即使是秒的分割也可能产生差异。如果是这种情况，你应该分析你的代码并找出瓶颈。其他时候，你可能希望优化代码的每一个部分。一个例子是为他人使用的框架进行工作，对于其中一些人，性能将很重要。在这种情况下，作为框架作者的*你*有责任提供尽可能快的工具。否则，你有可能会冒着一些用户不会使用你的框架的风险。
- en: '*To summarize*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*总结*：'
- en: If performance matters, avoid using temporary variables like those in `calc_with_tempvar()`.
    If performance is of secondary (if any) significance, go for readability — which
    means that a decision whether to use temporary variables or not should be based
    solely on code readability.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果性能很重要，避免使用像`calc_with_tempvar()`中的临时变量。如果性能重要性较低（如果有的话），则优先考虑可读性——这意味着是否使用临时变量的决定应该完全基于代码的可读性。
- en: It’s not that temporary variables always increase readability. For instance,
    imagine you have a mathematical function `y(x) = ((x**2)/2 + 78)/333.333`. Do
    you think `calc_with_tempvar()`, with all those temporary variables, would increase
    readability? I don’t.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时变量并不总是增加可读性。例如，假设你有一个数学函数 `y(x) = ((x**2)/2 + 78)/333.333`。你认为 `calc_with_tempvar()`，那个包含所有临时变量的函数，会提高可读性吗？我不这么认为。
- en: So, sometimes temporary variables will improve code readability, other times
    they won’t. If performance is of critical importance, remember that temporary
    variables can add some minor overhead. More often than not, this overhead will
    be negligible — but in some projects, even those splits of seconds can matter.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有时临时变量会提高代码的可读性，有时则不会。如果性能至关重要，请记住，临时变量可能会增加一些轻微的开销。更多时候，这些开销是微不足道的——但在一些项目中，即使是那些秒数的分割也可能很重要。
- en: All in all, always double-check if it’s worth getting rid of temporary variables
    in your code — or if it’s worth using them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，始终双重检查是否值得在你的代码中去除临时变量——或者是否值得使用它们。
- en: Footnotes
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: '¹ The code uses the `perftester.pp()` function, which pretty-prints (using
    a standard-library function `pprint.pprint()`) a Python object with all numbers
    in it rounded to four significant digits. It does so using the [rounder](https://pypi.org/project/rounder/)
    package:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 代码使用了 `perftester.pp()` 函数，该函数以标准库函数 `pprint.pprint()` 的方式美观地打印 Python 对象，并将其中的所有数字四舍五入到四位有效数字。它使用了[rounder](https://pypi.org/project/rounder/)包：
- en: '[](https://github.com/nyggus/rounder?source=post_page-----f6708b5f293c--------------------------------)
    [## GitHub - nyggus/rounder: Python package for rounding floats and complex numbers
    in complex Python…'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[## GitHub - nyggus/rounder: 用于在复杂 Python 对象中对浮点数和复杂数字进行四舍五入的 Python 包](https://github.com/nyggus/rounder?source=post_page-----f6708b5f293c--------------------------------)'
- en: rounder is a lightweight package for rounding numbers in complex Python objects,
    such as dictionaries, lists, tuples…
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rounder` 是一个轻量级的包，用于在复杂的 Python 对象（如字典、列表、元组等）中对数字进行四舍五入。'
- en: github.com](https://github.com/nyggus/rounder?source=post_page-----f6708b5f293c--------------------------------)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/nyggus/rounder?source=post_page-----f6708b5f293c--------------------------------)'
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)查看。如果你想加入
    Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----f6708b5f293c--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入 Medium - Marcin Kozak](https://medium.com/@nyggus/membership?source=post_page-----f6708b5f293c--------------------------------)'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Marcin Kozak 的每一个故事（以及 Medium 上成千上万其他作家的故事）。你的会员费直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----f6708b5f293c--------------------------------)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----f6708b5f293c--------------------------------)'
