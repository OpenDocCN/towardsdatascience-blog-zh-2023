- en: LangChain has added Cypher Search
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LangChain 增加了 Cypher 搜索功能
- en: 原文：[https://towardsdatascience.com/langchain-has-added-cypher-search-cb9d821120d5?source=collection_archive---------1-----------------------#2023-05-24](https://towardsdatascience.com/langchain-has-added-cypher-search-cb9d821120d5?source=collection_archive---------1-----------------------#2023-05-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/langchain-has-added-cypher-search-cb9d821120d5?source=collection_archive---------1-----------------------#2023-05-24](https://towardsdatascience.com/langchain-has-added-cypher-search-cb9d821120d5?source=collection_archive---------1-----------------------#2023-05-24)
- en: With the LangChain library, you can conveniently generate Cypher queries, enabling
    an efficient retrieval of information from Neo4j.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 LangChain 库，你可以方便地生成 Cypher 查询，从而高效地从 Neo4j 中检索信息。
- en: '[](https://bratanic-tomaz.medium.com/?source=post_page-----cb9d821120d5--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page-----cb9d821120d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb9d821120d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb9d821120d5--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page-----cb9d821120d5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://bratanic-tomaz.medium.com/?source=post_page-----cb9d821120d5--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page-----cb9d821120d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb9d821120d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb9d821120d5--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page-----cb9d821120d5--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F57f13c0ea39a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flangchain-has-added-cypher-search-cb9d821120d5&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=post_page-57f13c0ea39a----cb9d821120d5---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb9d821120d5--------------------------------)
    ·8 min read·May 24, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcb9d821120d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flangchain-has-added-cypher-search-cb9d821120d5&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=-----cb9d821120d5---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F57f13c0ea39a&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flangchain-has-added-cypher-search-cb9d821120d5&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=post_page-57f13c0ea39a----cb9d821120d5---------------------post_header-----------)
    发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb9d821120d5--------------------------------)
    ·8 分钟阅读·2023年5月24日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2Fcb9d821120d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flangchain-has-added-cypher-search-cb9d821120d5&user=Tomaz+Bratanic&userId=57f13c0ea39a&source=-----cb9d821120d5---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcb9d821120d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flangchain-has-added-cypher-search-cb9d821120d5&source=-----cb9d821120d5---------------------bookmark_footer-----------)![](../Images/4a327bfd5a51c910e0ac40a24bbff57d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fcb9d821120d5&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Flangchain-has-added-cypher-search-cb9d821120d5&source=-----cb9d821120d5---------------------bookmark_footer-----------)![](../Images/4a327bfd5a51c910e0ac40a24bbff57d.png)'
- en: Image generated by Midjourney paid subscription. [Midjourney ToS](https://docs.midjourney.com/docs/terms-of-service).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由 Midjourney 付费订阅生成。 [Midjourney 服务条款](https://docs.midjourney.com/docs/terms-of-service)。
- en: If you have developed or plan to implement any solution that uses Large Language
    Models, you have most likely heard of the [LangChain library](https://python.langchain.com/en/latest/index.html).
    LangChain library is the most widely known Python library used to develop applications
    that use LLMs in one or another capabilities. It is designed to be modular, allowing
    us to use any LLM in any available modules, such as chains, tools, memory, or
    agents.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你开发了或计划实施任何使用大型语言模型的解决方案，你很可能听说过 [LangChain 库](https://python.langchain.com/en/latest/index.html)。
    LangChain 库是最广泛使用的 Python 库，用于开发在不同能力下使用 LLM 的应用程序。它设计为模块化的，允许我们在任何可用模块中使用任何 LLM，例如链、工具、内存或代理。
- en: A month ago, I spent a week researching and implementing a solution allowing
    anyone to retrieve information from [Neo4j](https://neo4j.com/) directly from
    the LangChain library and use it in their LLM applications. I learned quite a
    lot about the internals of LangChain library and wrote up my experience in a [blog
    post](/integrating-neo4j-into-the-langchain-ecosystem-df0e988344d2).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个月前，我花了一周时间研究并实现了一种解决方案，使任何人都可以直接从[Neo4j](https://neo4j.com/)数据库中检索信息，并在他们的LLM应用程序中使用。我了解了很多关于LangChain库内部的知识，并在[博客文章](/integrating-neo4j-into-the-langchain-ecosystem-df0e988344d2)中记录了我的经历。
- en: A colleague of mine showed me a LangChain feature request, where the user requested
    that my work of having the option to retrieve information from the Neo4j database
    would be added as a module directly to the LangChain library so that no additional
    code or external modules would be needed to integrate Neo4j into LangChain applications.
    Since I was already familiar with LangChain internals, I decided to try and implement
    Cypher searching capabilities myself. I spent a weekend researching and coding
    the solution and ensuring it would conform to the contribution standards for it
    to be added to the library. Luckily, the maintainers of LangChain are very responsive
    and open to new ideas, and the Cypher Search has been added in the latest release
    of the LangChain library. Thanks to [Harrison Chase](https://medium.com/u/bbfa018ac706?source=post_page-----cb9d821120d5--------------------------------)
    for maintaining such a great library and also being very responsive to new ideas.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一个同事向我展示了一个LangChain的功能请求，用户请求将我实现的从Neo4j数据库中检索信息的选项作为一个模块直接添加到LangChain库中，以便不需要额外的代码或外部模块就能将Neo4j集成到LangChain应用中。由于我已经熟悉LangChain的内部工作原理，我决定自己尝试实现Cypher搜索功能。我花了一个周末研究和编码解决方案，并确保其符合贡献标准以便添加到库中。幸运的是，LangChain的维护者们非常响应并且开放新想法，Cypher搜索功能已经在LangChain库的最新版本中添加了。感谢[Harrison
    Chase](https://medium.com/u/bbfa018ac706?source=post_page-----cb9d821120d5--------------------------------)维护如此出色的库，并且对新想法非常响应。
- en: In this blog post, I will show you how you can use the newly added Cypher Search
    in the LangChain library to retrieve information from a Neo4j database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我将展示如何使用LangChain库中新添加的Cypher搜索功能从Neo4j数据库中检索信息。
- en: The code is available on [GitHub](https://github.com/tomasonjo/blogs/blob/master/llm/langchain_neo4j.ipynb).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可在[GitHub](https://github.com/tomasonjo/blogs/blob/master/llm/langchain_neo4j.ipynb)上获取。
- en: What is a knowledge graph
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 知识图谱是什么
- en: LangChain has already integrations with Vector and SQL databases, so why do
    we need an integration with a Graph Database like Neo4j?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain已经与Vector和SQL数据库集成，那么为什么我们还需要与像Neo4j这样的图形数据库集成呢？
- en: '![](../Images/fc7b909b07a0cfe91479086bff8ccf91.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fc7b909b07a0cfe91479086bff8ccf91.png)'
- en: '[WikiData Knowledge graph. Image licensed under CC BY-SA 4.0.](https://www.wikidata.org/wiki/Q33002955#/media/File:Wikidata_knowledge_graph_-_Christine_Choy.png)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[WikiData知识图谱。图片许可协议：CC BY-SA 4.0。](https://www.wikidata.org/wiki/Q33002955#/media/File:Wikidata_knowledge_graph_-_Christine_Choy.png)'
- en: Knowledge graphs are ideal for storing heterogeneous and highly connected data.
    For instance, the above image contains information about people, organizations,
    movies, websites, etc. While the ability to intuitively model and store diverse
    sets of data is incredible, I think the main benefit of using graphs is the ability
    to analyze data points through their relationships. Graphs enable us to uncover
    connections and correlations that might otherwise remain unnoticed with traditional
    database and analytics approaches as they often overlook the context surrounding
    individual data points.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱非常适合存储异质且高度关联的数据。例如，上面的图像包含了关于人物、组织、电影、网站等的信息。虽然能够直观地建模和存储多样化的数据集非常惊人，但我认为使用图谱的主要好处在于通过其关系分析数据点的能力。图谱使我们能够发现那些在传统数据库和分析方法中可能会被忽视的联系和关联，因为这些方法常常忽视个别数据点的上下文。
- en: The power of graph databases truly shines when dealing with complex systems
    where interdependencies and interactions are vital in understanding the system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理复杂系统时，图形数据库的强大之处真正显现出来，因为相互依赖和互动对于理解系统至关重要。
- en: They enable us to see beyond individual data points and delve into the intricate
    relationships that define their context. This provides a deeper, more holistic
    view of the data, facilitating better decision-making and knowledge discovery.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能使我们能够超越单个数据点，深入探讨定义其上下文的复杂关系。这提供了数据的更深层次、更全面的视图，有助于更好的决策和知识发现。
- en: Setting up Neo4j environment
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Neo4j 环境
- en: If you have an existing Neo4j database, you can use it to try the newly added
    Cypher Search. The Cypher Search module uses graph schema information to generate
    Cypher statements, meaning you can plug it into any Neo4j database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个现有的 Neo4j 数据库，你可以用它来尝试新添加的 Cypher 查询模块。Cypher 查询模块使用图谱模式信息生成 Cypher 语句，意味着你可以将其插件化到任何
    Neo4j 数据库中。
- en: If you don’t have any Neo4j database yet, you can use [Neo4j Sandbox](https://neo4j.com/sandbox/),
    which offers a free cloud instance of a Neo4j database. You need to register and
    instantiate any of the available pre-populated databases. I will be using the
    [**ICIJ Paradise Papers** dataset](https://sandbox.neo4j.com/?usecase=icij-paradise-papers)
    in this blog post, but you can use any other if you want. The dataset has been
    made available by [International Consortium of Investigative Journalists](https://www.icij.org/)
    as part of their [Offshore Leaks Database](https://offshoreleaks.icij.org/pages/database).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有 Neo4j 数据库，你可以使用 [Neo4j Sandbox](https://neo4j.com/sandbox/)，它提供了一个免费的
    Neo4j 数据库云实例。你需要注册并实例化任何一个现有的预填充数据库。在这篇博客中，我将使用 [**ICIJ Paradise Papers** 数据集](https://sandbox.neo4j.com/?usecase=icij-paradise-papers)，但如果你愿意，可以使用其他任何数据集。该数据集由
    [国际调查记者联盟](https://www.icij.org/) 提供，作为他们 [离岸泄露数据库](https://offshoreleaks.icij.org/pages/database)
    的一部分。
- en: '![](../Images/89fed8d3e032975331f4a222209f0fc5.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89fed8d3e032975331f4a222209f0fc5.png)'
- en: Paradise Papers dataset graph schema. Image by the author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Paradise Papers 数据集图谱模式。图片由作者提供。
- en: 'The graph contains four types of nodes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图谱包含四种类型的节点：
- en: '`**Entity**` - The offshore legal entity. This could be a company, trust, foundation,
    or other legal entity created in a low-tax jurisdiction.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**Entity**` - 离岸法律实体。它可以是公司、信托、基金会或其他在低税区创建的法律实体。'
- en: '`**Officer**` - A person or company who plays a role in an offshore entity,
    such as beneficiary, director, or shareholder. The relationships shown in the
    diagram are just a sample of all the existing ones.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**Officer**` - 在离岸实体中扮演角色的个人或公司，例如受益人、董事或股东。图中的关系只是所有现有关系的一部分。'
- en: '`**Intermediary**` - A go-between for someone seeking an offshore corporation
    and an offshore service provider — usually a law-firm or a middleman that asks
    an offshore service provider to create an offshore firm.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**Intermediary**` - 寻找离岸公司和离岸服务提供商之间的中介——通常是一个律师事务所或要求离岸服务提供商创建离岸公司的中介。'
- en: '`**Address**` - The registered address as it appears in the original databases
    obtained by ICIJ.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**Address**` - 在 ICIJ 获取的原始数据库中出现的注册地址。'
- en: Knowledge Graph Cypher Search
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 知识图谱 Cypher 查询
- en: The name Cypher Search comes from Cypher, which is a query language used to
    interact with graph databases like Neo4j.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Cypher 查询的名称源自 Cypher，它是一种用于与像 Neo4j 这样的图数据库互动的查询语言。
- en: '![](../Images/7e9d4ec8b6a7974e5904bc5e443260f2.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e9d4ec8b6a7974e5904bc5e443260f2.png)'
- en: Knowledge graph Cypher chain workflow. Image by the author.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱 Cypher 链工作流。图片由作者提供。
- en: In order to allow LangChain to retrieve information from graph databases, I
    implemented a module that can convert the natural language to a Cypher statement,
    use it to retrieve data from Neo4j and return the retrieved information to the
    user in a natural language form. This two-way conversion process between natural
    language and database language not only enhances the overall accessibility of
    data retrieval but also greatly improves the user experience.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 LangChain 从图数据库中检索信息，我实现了一个可以将自然语言转换为 Cypher 语句的模块，使用它从 Neo4j 中检索数据，并以自然语言形式将检索到的信息返回给用户。这种自然语言和数据库语言之间的双向转换过程不仅提高了数据检索的整体可访问性，还大大改善了用户体验。
- en: The beauty of the LangChain library is in its simplicity. We only need a couple
    of lines of code and we can retrieve information from Neo4j using natural language.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain 库的美在于其简洁性。我们只需几行代码即可使用自然语言从 Neo4j 中检索信息。
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are using the **gpt-3.5-turbo** model from OpenAI to generate Cypher
    statements. The Cypher statements are generated based on the graph schema, which
    means that, in theory, you can plug the Cypher chain into any Neo4j instance,
    and it should be able to answer natural language answers. Unfortunately, I haven’t
    yet tested other LLM providers in their ability to generate Cypher statements
    since I don’t have access to any of them. Still, I would love to hear your evaluation
    of other LLMs generating Cypher statements if you will give it a go. Of course,
    if you want to break the dependency on LLM cloud providers, you can [always fine-tune
    an open-source LLM to generate Cypher statements](/fine-tuning-an-llm-model-with-h2o-llm-studio-to-generate-cypher-statements-3f34822ad5).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用**gpt-3.5-turbo**模型来生成Cypher语句。Cypher语句是根据图形模式生成的，这意味着理论上，你可以将Cypher链插入任何Neo4j实例，它应该能够回答自然语言问题。不幸的是，我还没有测试其他LLM提供商生成Cypher语句的能力，因为我没有任何它们的访问权限。尽管如此，如果你愿意尝试，我很想听听你对其他LLM生成Cypher语句的评估。当然，如果你想摆脱对LLM云提供商的依赖，你可以[随时微调一个开源LLM以生成Cypher语句](/fine-tuning-an-llm-model-with-h2o-llm-studio-to-generate-cypher-statements-3f34822ad5)。
- en: Let’s start with a simple test.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的测试开始。
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Results*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*结果*'
- en: '![](../Images/a7015803caa34f67ea96a440067ce01a.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a7015803caa34f67ea96a440067ce01a.png)'
- en: Generated answer. Image by the author.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的答案。图片由作者提供。
- en: We can observe the generated Cypher statement and the retrieved information
    from Neo4j used to form the answer. That is as easy a setup as it gets. Let’s
    move on to the next example.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察生成的Cypher语句和从Neo4j中检索的信息，这些信息用来形成答案。这是最简单的设置了。让我们继续下一个例子。
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Results*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*结果*'
- en: '![](../Images/ea7c4cfdbe32c1f36026cff5bd7c9093.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea7c4cfdbe32c1f36026cff5bd7c9093.png)'
- en: Generated answer. Image by the author.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的答案。图片由作者提供。
- en: Since we are using a graph, let’s construct a question that would utilize the
    power of graph databases.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是图形，让我们构造一个可以利用图形数据库优势的问题。
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The generated Cypher statement looks fine at first glance. However, there is
    a problem as the Cypher statements used the variable-length path finding syntax
    and also treated relationships as undirected. As a result, this type of query
    is highly unoptimized and would explode in the number of rows.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的Cypher语句乍看之下没有问题。然而，存在一个问题，因为Cypher语句使用了可变长度路径查找语法，并且将关系视为无向的。因此，这种类型的查询高度未优化，会导致行数爆炸。
- en: The nice thing about gpt-3.5-turbo is that it follows hints and instructions
    we drop in the input. For example, we can ask it to find only the shortest path.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**gpt-3.5-turbo**的一个优点是它遵循我们在输入中留下的提示和指示。例如，我们可以要求它仅查找最短路径。'
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/ec99f25f8d358965e67cc7269b1b4073.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec99f25f8d358965e67cc7269b1b4073.png)'
- en: Generated answer. Image by the author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的答案。图片由作者提供。
- en: Now that we dropped a hint that only the shortest path should be retrieved,
    we don’t run into cardinality explosion troubles anymore. However, one thing I
    noticed is that the LLM sometimes doesn’t provide the best results if a path object
    is returned. The generated Cypher statement returns the following visualization
    in Neo4j Browser.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们给出了一个只应检索最短路径的提示，我们不再遇到基数爆炸的问题。然而，我注意到的一件事是，如果返回的是路径对象，LLM有时不会提供最佳结果。生成的Cypher语句在Neo4j浏览器中返回以下可视化结果。
- en: '![](../Images/2d1dcdd2ce07e0f8564e60101dec422e.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d1dcdd2ce07e0f8564e60101dec422e.png)'
- en: Graph visualization of the answer. Image by the author.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 答案的图形可视化。图片由作者提供。
- en: The generated natural language response didn’t really mention that the two companies
    are registered at the same address, but made it its own shortest path based on
    the node properties. However, we can also fix that by instructing the model what
    information to use.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的自然语言响应并没有真正提到这两家公司注册在同一个地址，而是根据节点属性生成了自己的最短路径。然而，我们也可以通过指导模型使用哪些信息来解决这个问题。
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Results*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*结果*'
- en: '![](../Images/9c225b05215012338afdc382473c497c.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c225b05215012338afdc382473c497c.png)'
- en: Generated answer. Image by the author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的答案。图片由作者提供。
- en: Now we can a better response and more appropriate response. The more hints you
    drop to an LLM, the better results you can expect. For example, you can also instruct
    it which relationships it can traverse.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以得到更好的响应和更合适的响应。你给LLM的提示越多，期望得到的结果就越好。例如，你还可以指导它可以遍历哪些关系。
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Results*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*结果*'
- en: '![](../Images/510392f2207ab79a80e1507e1bb32378.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/510392f2207ab79a80e1507e1bb32378.png)'
- en: Generated answer. Image by the author.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的答案。图片由作者提供。
- en: You can see that the generated Cypher statements allows the traversal of only
    **OFFICER_OF**, **INTERMEDIARY_OF**, and **CONNECTED_TO** relationships. The same
    Cypher statement produces the following graph visualization.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，生成的Cypher语句仅允许遍历**OFFICER_OF**、**INTERMEDIARY_OF**和**CONNECTED_TO**关系。相同的Cypher语句生成了以下图形化展示。
- en: '![](../Images/78a18b1af5a6fc1f286c787361feae4e.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78a18b1af5a6fc1f286c787361feae4e.png)'
- en: Graph visualization of the answer. Image by the author.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 答案的图形化展示。图像由作者提供。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Graph databases are an excellent tool for retrieving or analyzing the connections
    between various entities like people and organizations. In this blog post, we
    looked at a simple shortest path use case, where the number of relationships and
    the sequence of relationship types is unknown beforehand. These types of queries
    are virtually impossible in a vector database and could also be quite complicated
    in a SQL database.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图形数据库是检索或分析各种实体之间的连接（如人员和组织）的绝佳工具。在这篇博客文章中，我们查看了一个简单的最短路径用例，其中关系数量和关系类型的顺序事先是未知的。这些类型的查询在向量数据库中几乎是不可能的，并且在SQL数据库中也可能相当复杂。
- en: I am thrilled about the addition of Cypher Search to the LangChain library.
    Please test it out, and let me know how it works for you, especially if you are
    testing it on other LLM models or have exciting use cases. Also, remember to subscribe,
    as I have a couple of blog posts lined up to explore the Cypher Search in the
    LangChain library.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我对将Cypher Search添加到LangChain库中感到非常兴奋。请试用一下，并告诉我它对你是否有效，特别是如果你在其他LLM模型上进行测试或有有趣的用例。同时，记得订阅，因为我还有几篇博客文章将探讨LangChain库中的Cypher
    Search。
- en: As always, the code is available on [GitHub](https://github.com/tomasonjo/blogs/blob/master/llm/langchain_neo4j.ipynb).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，代码可以在[GitHub](https://github.com/tomasonjo/blogs/blob/master/llm/langchain_neo4j.ipynb)上找到。
