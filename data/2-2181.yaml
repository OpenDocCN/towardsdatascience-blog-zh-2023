- en: Understanding different cache types in Power BI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Power BI 中的不同缓存类型
- en: 原文：[https://towardsdatascience.com/understanding-different-cache-types-in-power-bi-f1e205f5956e](https://towardsdatascience.com/understanding-different-cache-types-in-power-bi-f1e205f5956e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understanding-different-cache-types-in-power-bi-f1e205f5956e](https://towardsdatascience.com/understanding-different-cache-types-in-power-bi-f1e205f5956e)
- en: Did you know that Power BI relies on two different cache types? In this article,
    we’ll demystify how each of them works in real life
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你知道 Power BI 依赖于两种不同的缓存类型吗？在本文中，我们将揭示它们在实际中的工作原理
- en: '[](https://datamozart.medium.com/?source=post_page-----f1e205f5956e--------------------------------)[![Nikola
    Ilic](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----f1e205f5956e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f1e205f5956e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f1e205f5956e--------------------------------)
    [Nikola Ilic](https://datamozart.medium.com/?source=post_page-----f1e205f5956e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://datamozart.medium.com/?source=post_page-----f1e205f5956e--------------------------------)[![Nikola
    Ilic](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----f1e205f5956e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f1e205f5956e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f1e205f5956e--------------------------------)
    [Nikola Ilic](https://datamozart.medium.com/?source=post_page-----f1e205f5956e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f1e205f5956e--------------------------------)
    ·9 min read·Mar 22, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----f1e205f5956e--------------------------------)
    ·9 分钟阅读·2023年3月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e99a5018a6e415699cf2771f590b9514.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e99a5018a6e415699cf2771f590b9514.png)'
- en: Image by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: How many times did you find yourself in the following situation? When you open
    the report for the first time, it takes a while to render, but once you go back
    and forth from other report pages, that same page renders significantly faster!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你多少次遇到过这样的情况？第一次打开报告时，渲染需要一些时间，但一旦你在其他报告页面之间来回切换，那个页面的渲染速度会显著提高！
- en: Yeah, I know, we’ve all been there multiple times. That’s happening because
    Power BI caches the data and can respond much faster after that first initial
    run.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我知道，我们都经历过多次。这是因为 Power BI 会缓存数据，并且在第一次运行之后响应会更快。
- en: Sounds easy, right? Well, it’s not just simple as that and this article will
    try to demystify different cache types in Power BI.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很简单，对吧？其实并不像那样简单，本文将尝试揭示 Power BI 中不同缓存类型的奥秘。
- en: '***Recommended reading before the start****:* Since I’ll be referring to some
    of the Power BI internal architecture components, namely Storage Engine and Formula
    Engine, I suggest [you first read this article](https://data-mozart.com/vertipaq-brain-muscles-behind-power-bi/)
    to understand the difference between the two. You should also understand [the
    different roles](https://data-mozart.com/inside-vertipaq-compress-for-success/)
    that these two engines perform in the process of data retrieval. This is of paramount
    importance, because the rest of this article will assume that you are aware of
    the key characteristics of both Storage and Formula engine.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '***开始前推荐阅读****:* 由于我会提到 Power BI 的一些内部架构组件，即存储引擎和公式引擎，我建议[你首先阅读这篇文章](https://data-mozart.com/vertipaq-brain-muscles-behind-power-bi/)以了解这两者之间的区别。你还应该了解[这两个引擎在数据检索过程中的不同角色](https://data-mozart.com/inside-vertipaq-compress-for-success/)。这非常重要，因为本文其余部分将假定你已经了解存储引擎和公式引擎的关键特性。'
- en: Cache types in a nutshell
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存类型一览
- en: Let’s kick it off by explaining two main cache types from a high-level perspective,
    and then we’ll dig deeper to explain nuances for each of these types.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先从高层次的视角解释两种主要的缓存类型，然后我们将深入探讨每种类型的细微差别。
- en: Visual cache in Power BI
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Power BI 中的视觉缓存
- en: Let’s start with a very simple example. I’ll be using a sample Contoso database
    for all of the demos.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从一个非常简单的例子开始。我将使用一个示例 Contoso 数据库进行所有演示。
- en: '![](../Images/ac29adefb63846a303322fdf00fa2f48.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac29adefb63846a303322fdf00fa2f48.png)'
- en: Image by author
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'I have one clustered column chart visual, showing the total sales amount for
    each brand that exists in the Contoso database. There is also a slicer for a brand
    name. Let’s turn on Performance Analyzer in Power BI Desktop, and choose one of
    the values in the slicer:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个簇状柱形图视觉对象，显示 Contoso 数据库中每个品牌的总销售额。还有一个品牌名称的切片器。让我们在 Power BI Desktop 中打开性能分析器，并选择切片器中的一个值：
- en: '![](../Images/b938374ddc36ad4d0ba3e6a6e38827e2.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b938374ddc36ad4d0ba3e6a6e38827e2.png)'
- en: Image by author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: As you may notice, a Formula Engine generated a DAX query to retrieve the data
    about Contoso brand sales, and Storage Engine needed 14ms to physically return
    that data. Since we are using an Import storage mode and I’m in the Power BI Desktop,
    the data is stored in the local instance of the Analysis Services.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能注意到的，公式引擎生成了一个 DAX 查询来检索有关 Contoso 品牌销售的数据，存储引擎需要 14 毫秒来实际返回这些数据。由于我们使用的是导入存储模式，并且我在
    Power BI Desktop 中，因此数据存储在 Analysis Services 的本地实例中。
- en: 'Let’s now change the slicer value to Litware:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将切片器值更改为 Litware：
- en: '![](../Images/8e1cc7d70f292fbe247c71f93fddc364.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e1cc7d70f292fbe247c71f93fddc364.png)'
- en: Image by author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Again, the same workflow occurred as in the previous case. Now, what happens
    if I switch back to Contoso in my slicer?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，和之前的情况一样，发生了相同的工作流程。现在，如果我在切片器中切换回 Contoso，会发生什么呢？
- en: '![](../Images/145b2c684d8f2ebf4c48a9c15d637aa0.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/145b2c684d8f2ebf4c48a9c15d637aa0.png)'
- en: Image by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Things become interesting now! There is no DAX query at all and Copy query option,
    that enables us to grab the query and [analyze it in more detail in, let’s say,
    DAX Studio](https://data-mozart.com/mastering-dp-500-exam-troubleshoot-dax-performance-with-dax-studio/)
    — is greyed out! That means, there was no query generated by the Formula engine,
    and the data for this visual was served from the cache. In this case, we’re talking
    about the ***visual cache***.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在事情变得有趣了！完全没有 DAX 查询，也没有“复制查询”选项，这使我们无法获取查询并在[例如 DAX Studio 中更详细地分析它](https://data-mozart.com/mastering-dp-500-exam-troubleshoot-dax-performance-with-dax-studio/)—这个选项被禁用了！这意味着，公式引擎没有生成查询，这个视觉对象的数据是从缓存中提供的。在这种情况下，我们谈论的是***视觉缓存***。
- en: The same will happen if I again select Litware in the slicer. However, once
    I click on the Refresh visuals option at the top…
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我再次在切片器中选择 Litware，情况也会如此。然而，一旦我点击顶部的刷新视觉对象选项……
- en: '![](../Images/e009b5fc7b5d4f3b51874a3e7594c150.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e009b5fc7b5d4f3b51874a3e7594c150.png)'
- en: Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Despite retrieving the data for Contoso again, in this case, the visual cache
    was cleared and the Formula engine generated a DAX query once more.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管再次检索 Contoso 的数据，在这种情况下，视觉缓存已被清除，公式引擎再次生成了一个 DAX 查询。
- en: Obviously, in this super basic example, it’s not easy to spot a significant
    difference in performance between the two scenarios. But, in reality, we usually
    apply more complex logic, and retrieving query results from the cache is usually
    dramatically faster than running the same query over and over again.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在这个超级基础的示例中，很难发现两个场景之间的显著性能差异。但实际上，我们通常会应用更复杂的逻辑，从缓存中检索查询结果通常比一遍遍运行相同的查询要快得多。
- en: 'If I now connect to my Analysis Services local instance from DAX Studio, and
    turn on All Queries, once I hit Refresh visuals, all the queries will be captured
    by DAX Studio:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我现在从 DAX Studio 连接到我的 Analysis Services 本地实例，并打开所有查询，一旦我点击刷新视觉对象，所有查询都将被 DAX
    Studio 捕获：
- en: '![](../Images/00334cccd0ef53c98196af1b35290e30.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/00334cccd0ef53c98196af1b35290e30.png)'
- en: Image by author
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'From here, I’ll double-click the first query and execute it within the DAX
    Studio:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我将双击第一个查询并在 DAX Studio 中执行它
- en: '![](../Images/b2d8da17ba63a64db23eb4780491eeef.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2d8da17ba63a64db23eb4780491eeef.png)'
- en: Image by author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: This table, which contains query results, will be cached by the report. And,
    whenever our visual asks for the same result, the data can be served from the
    cache.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包含查询结果的表格将被报告缓存。每当我们的视觉对象请求相同的结果时，数据可以从缓存中提供。
- en: What about Power BI Service?
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那 Power BI 服务呢？
- en: 'Ok, in the example above, we explained how Power BI will cache query results
    when working with Power BI Desktop, in the local instance of Analysis Services.
    The legitimate question would be: what happens once we move to Power BI Service?
    Does this cache “thingy” still work?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，在上面的示例中，我们解释了 Power BI 如何在使用 Power BI Desktop 时缓存查询结果，即在 Analysis Services
    的本地实例中。合理的问题是：一旦我们转到 Power BI 服务，这个缓存“东西”还会有效吗？
- en: The answer is — YES! In this case, it’s done using your web browser. However,
    keep in mind that the visual cache has a scope of the specific Power BI session.
    We’ll come later to explain in more detail how this works.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是——是的！在这种情况下，它是通过你的网页浏览器完成的。然而，请记住，视觉缓存的范围是特定的Power BI会话。我们稍后会更详细地解释这如何运作。
- en: Data cache in Power BI
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Power BI中的数据缓存
- en: The data cache is another cache type in Power BI. Unlike in the previous scenario,
    where caching occurs on the level of the individual report user, data cache operates
    on a more generic level — the level of the Analysis Services tabular model.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 数据缓存是Power BI中的另一种缓存类型。与之前场景中的缓存发生在个别报告用户级别不同，数据缓存是在更通用的级别——Analysis Services表格模型的级别上操作的。
- en: If you did your homework and read the articles I suggested at the beginning,
    you’re probably aware that VertiPaq stores our Contoso data in-memory, in a compressed
    way.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了作业并阅读了我一开始推荐的文章，你可能已经知道VertiPaq以压缩的方式将我们的Contoso数据存储在内存中。
- en: So, what exactly happens when we asked Power BI to calculate the total sales
    amount for the Contoso brand? Formula Engine generates and executes a DAX query,
    but then Storage Engine translates DAX to a special SQL-like language, called
    xmSQL, to physically pull the data from the tabular model.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当我们要求Power BI计算Contoso品牌的总销售额时，究竟发生了什么？公式引擎生成并执行DAX查询，但随后Storage Engine将DAX转换为一种类似SQL的特殊语言，称为xmSQL，以物理地从表格模型中提取数据。
- en: '![](../Images/a22cd034c88d764583f9929ca5260db0.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a22cd034c88d764583f9929ca5260db0.png)'
- en: Image by author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: For every xmSQL query, there is a special data structure, called datacache that’s
    being stored in-memory.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个xmSQL查询，都有一个特殊的数据结构，称为datacache，存储在内存中。
- en: 'If I turn on Server Timings in DAX Studio and run the DAX query captured in
    the previous example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在DAX Studio中开启服务器计时并运行前一个示例中捕获的DAX查询：
- en: '![](../Images/c11c7610ec294ee8f05c6d4e8ab48147.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c11c7610ec294ee8f05c6d4e8ab48147.png)'
- en: Image by author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: As you may notice, the query results were retrieved from the cache (we have
    one Storage Engine query, and that one Storage Engine query was using a cache).
    This means, in reality, we didn’t really query the Analysis Services model. To
    confirm that this is happening, I’ll turn on the Cache tab in the DAX Studio,
    and you’ll see on line 1 that this query was actually served from the cache, and
    not from the internal data structures of the Analysis Services.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，查询结果是从缓存中检索的（我们有一个Storage Engine查询，而那个Storage Engine查询是使用了缓存）。这意味着实际上，我们并没有真正查询Analysis
    Services模型。为了确认这一点，我会在DAX Studio中打开Cache选项卡，你会看到在第1行，这个查询实际上是从缓存中提供的，而不是来自Analysis
    Services的内部数据结构。
- en: '![](../Images/bd3f179e70d68919218a4c511ae946bf.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd3f179e70d68919218a4c511ae946bf.png)'
- en: Image by author
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Watch out! Things to keep in mind regarding the data cache
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注意！有关数据缓存需要记住的事项
- en: Now, there are at least two important considerations to keep in mind regarding
    the data cache.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有至少两个重要的考虑因素需要记住，关于数据缓存。
- en: First, ***it MAY trick you to think that your query is running fast, although
    it might not be true***. Let’s say that you are troubleshooting a poorly performing
    query and you leverage DAX Studio to get more insight into what is happening in
    the background. You run the query for the first time, and it required 2000 ms
    to return the results.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，***这可能会让你觉得你的查询运行得很快，尽管这可能不是真的***。假设你正在排查一个性能差的查询，并利用DAX Studio深入了解后台发生了什么。你第一次运行查询时，它需要2000毫秒才能返回结果。
- en: 'You then apply some minor changes and you run the query again — now it renders
    in 100 ms. Yaaay! You’ve already started thinking: “Well, why everyone says that
    DAX is hard? I’ve just reordered the lines in my code and it works 20x faster…”'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你进行了一些小的更改，再次运行查询——现在它在100毫秒内渲染完成。耶！你已经开始想着：“嗯，为什么大家都说DAX很难？我只是重新排序了代码中的行，它的速度快了20倍……”
- en: Yeah, right! The next morning, a report user complains again that the same report
    visual renders slow.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，没错！第二天早上，一位报告用户再次抱怨相同的报告视图渲染缓慢。
- en: You probably forgot to clear the data cache BEFORE running the “improved” version
    of the DAX calculation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能忘记在运行“改进版”DAX计算之前清除数据缓存了。
- en: '![](../Images/afa5fd99bc9792afe57a6c0ad5da4854.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/afa5fd99bc9792afe57a6c0ad5da4854.png)'
- en: Image by author
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Even on this immensely simple calculation, the scenario with the result set
    coming from the cache was almost 4x faster than the one querying internal data
    structures of the Analysis Services (please, pay attention to line 1 which contains
    Internal as a subclass).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在这个极其简单的计算中，从缓存中获得的结果集的场景也比查询分析服务内部数据结构的场景快了将近4倍（请注意第1行，其中包含Internal作为子类）。
- en: Second, as the data cache resides in-memory, this means that it does have limited
    resources. To put it simple, ***not all queries can be cached within the Analysis
    Services!*** Depending on the amount of data retrieved by the query, it may happen
    that only a portion (or none) of Storage Engine queries can be retrieved from
    the cache.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，由于数据缓存驻留在内存中，这意味着它确实有有限的资源。简单来说，***并不是所有的查询都可以在分析服务中缓存！*** 根据查询检索的数据量，可能发生只有一部分（或没有）存储引擎查询可以从缓存中检索到。
- en: 'Let me show you how this looks in reality. I’ve added some more ingredients
    to my Power BI report. Let’s say that I want to calculate how many distinct orders
    we had in each of the years. I’ve created a simple DAX measure to calculate this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我展示一下这在现实中是如何表现的。我在Power BI报告中添加了一些更多的内容。假设我想计算每一年中我们有多少个不同的订单。我创建了一个简单的DAX度量来计算这个：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, I want to compare this value with the value from the previous year, so
    I’ll go and create another measure to calculate the number of distinct orders
    from the previous year:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我想将这个值与去年值进行比较，因此我将创建另一个度量来计算去年的不同订单数量：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/f818b0d522a4d705b37c061124475b92.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f818b0d522a4d705b37c061124475b92.png)'
- en: Image by author
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: 'Let’s switch to DAX Studio and check the query generated to populate the data
    for this visual:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们切换到DAX Studio并检查生成的数据查询：
- en: '![](../Images/f41fdb79e3de03ae94a4ad470b7d8a38.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f41fdb79e3de03ae94a4ad470b7d8a38.png)'
- en: Image by author
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: Since I didn’t clear the data cache before running this query, all 10 Storage
    Engine queries were retrieved from the cache! In total, results were returned
    in 7ms.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在运行这个查询之前我没有清除数据缓存，所以所有10个存储引擎查询都从缓存中检索到了！总的来说，结果在7毫秒内返回。
- en: 'I’ll now clear the cache and re-run the same query:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在将清除缓存并重新运行相同的查询：
- en: '![](../Images/f41a41f5f73ad1de00e7e1c45f3c94e4.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f41a41f5f73ad1de00e7e1c45f3c94e4.png)'
- en: Image by author
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: Instead of 7ms, we now have more than 1 second! That’s why I told you that it
    is of key importance to clear the data cache before running the same query.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 结果从7毫秒变成了超过1秒！这就是我告诉你在运行相同的查询之前清除数据缓存至关重要的原因。
- en: 'Let’s now check what happens if we include individual dates in the scope, instead
    of years:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查一下如果我们将范围包括个别日期而不是年份会发生什么：
- en: '![](../Images/7d1e97036d0c25b41b0bc1bac2eb1118.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d1e97036d0c25b41b0bc1bac2eb1118.png)'
- en: Image by author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: Without clearing the cache, this query took more than 16 seconds to return results!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有清除缓存的情况下，这个查询花费了超过16秒来返回结果！
- en: 'To briefly explain what is happening here: when the query executes, Storage
    Engine retrieves the data and materializes intermediate query results in a special
    structure called datacache. This datacache is finally consumed by the Formula
    Engine before the final result set goes back to the report. Now, depending on
    many different things, sometimes all the necessary data can be materialized within
    one datacache, but sometimes it may happen that there is simply too much data
    to be scanned and materialized, so Storage Engine creates multiple datacaches.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 简要解释一下这里发生了什么：当查询执行时，存储引擎检索数据并在一个名为datacache的特殊结构中物化中间查询结果。这个datacache最终被公式引擎消耗，然后最终结果集才返回到报告中。现在，根据许多不同的因素，有时所有必要的数据可以在一个datacache中物化，但有时可能发生数据量过多，导致存储引擎创建多个datacache。
- en: 'In our example, we can see that each of these queries is very fast — only a
    few milliseconds — but there are a lot of them. To be entirely precise: 2195 queries!'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们可以看到这些查询都非常快——仅需几毫秒——但查询数量很多。准确地说：2195个查询！
- en: Now, what happens if there is not so much data to be materialized. Can we “help”
    the engine to leverage the data cache feature again?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果要物化的数据不是很多，会发生什么呢？我们能否“帮助”引擎再次利用数据缓存功能？
- en: 'I’ll add a date slicer to my report and include only dates after January 1st
    2010:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我将向我的报告中添加一个日期切片器，仅包含2010年1月1日之后的日期：
- en: '![](../Images/f72f95956eba454330169607f0b12b1f.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f72f95956eba454330169607f0b12b1f.png)'
- en: Image by author
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片
- en: 'Let’s see what DAX Studio Server Timings displays now:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看DAX Studio服务器时间现在显示什么：
- en: '![](../Images/3574d4bb6098b4c1783f0416525b4392.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3574d4bb6098b4c1783f0416525b4392.png)'
- en: Image by author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Obviously, the query runs faster, as the engine has to deal with a lower number
    of datacaches. But, we’re still not able to leverage the data cache.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，查询运行得更快，因为引擎需要处理的 datacaches 数量较少。但我们仍然无法充分利用数据缓存。
- en: 'Let’s now include only the dates after October 1st 2010 and check the query
    in DAX Studio:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只包含 2010 年 10 月 1 日之后的日期，并在 DAX Studio 中检查查询：
- en: '![](../Images/b3efc8d2e64272c749e4810905518fd1.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3efc8d2e64272c749e4810905518fd1.png)'
- en: Image by author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: This time, we’re hitting the cache and the difference is huuuuuge! This query
    took only 134ms to return results.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们命中了缓存，差异巨大！这个查询只用了 134 毫秒就返回了结果。
- en: To conclude, from the perspective of the data cache, it’s extremely important
    how much data your queries scan and materialize.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，从数据缓存的角度来看，查询扫描和物化的数据量非常重要。
- en: Conclusion
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Caching query results is one of the key performance optimization concepts, not
    exclusively related to Power BI and tabular model, but in general.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存查询结果是关键的性能优化概念之一，这不仅与 Power BI 和表格模型相关，而是普遍适用的。
- en: 'When we’re examining Power BI cache types, you should be aware of two different
    caches:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检查 Power BI 缓存类型时，你需要了解两种不同的缓存：
- en: '***Visual cache*** (or report cache) — data is cached in the scope of the specific
    Power BI session, nevertheless, if we are talking about the session in the Power
    BI Desktop on the local machine, or session in Power BI Service'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***视觉缓存***（或报告缓存）— 数据在特定的 Power BI 会话范围内被缓存，无论是本地机器上的 Power BI Desktop 会话，还是
    Power BI 服务中的会话。'
- en: '***Data cache*** — data is cached in the scope of the Analysis Services instance,
    nevertheless of the number of opened Power BI sessions'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***数据缓存*** — 数据在 Analysis Services 实例的范围内被缓存，而不管打开了多少 Power BI 会话。'
- en: Thanks for reading!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: '[Become a member and support thousands of authors on Medium!](https://datamozart.medium.com/membership)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[成为会员，支持 Medium 上成千上万的作者！](https://datamozart.medium.com/membership)'
