- en: Memoizing DataFrame Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存 DataFrame 函数
- en: 原文：[https://towardsdatascience.com/memoizing-dataframe-functions-7a27dff532f7?source=collection_archive---------5-----------------------#2023-03-03](https://towardsdatascience.com/memoizing-dataframe-functions-7a27dff532f7?source=collection_archive---------5-----------------------#2023-03-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/memoizing-dataframe-functions-7a27dff532f7?source=collection_archive---------5-----------------------#2023-03-03](https://towardsdatascience.com/memoizing-dataframe-functions-7a27dff532f7?source=collection_archive---------5-----------------------#2023-03-03)
- en: Using Hashable DataFrames and Message Digests to Optimize Repeated Calculations
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用可哈希 DataFrame 和消息摘要来优化重复计算
- en: '[](https://medium.com/@flexatone?source=post_page-----7a27dff532f7--------------------------------)[![Christopher
    Ariza](../Images/35208ace15080724e4cd6690e43d6502.png)](https://medium.com/@flexatone?source=post_page-----7a27dff532f7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7a27dff532f7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7a27dff532f7--------------------------------)
    [Christopher Ariza](https://medium.com/@flexatone?source=post_page-----7a27dff532f7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@flexatone?source=post_page-----7a27dff532f7--------------------------------)[![克里斯托弗·阿里萨](../Images/35208ace15080724e4cd6690e43d6502.png)](https://medium.com/@flexatone?source=post_page-----7a27dff532f7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7a27dff532f7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7a27dff532f7--------------------------------)
    [克里斯托弗·阿里萨](https://medium.com/@flexatone?source=post_page-----7a27dff532f7--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6a4f500b1e4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmemoizing-dataframe-functions-7a27dff532f7&user=Christopher+Ariza&userId=6a4f500b1e4f&source=post_page-6a4f500b1e4f----7a27dff532f7---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7a27dff532f7--------------------------------)
    ·7 min read·Mar 3, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7a27dff532f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmemoizing-dataframe-functions-7a27dff532f7&user=Christopher+Ariza&userId=6a4f500b1e4f&source=-----7a27dff532f7---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F6a4f500b1e4f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmemoizing-dataframe-functions-7a27dff532f7&user=Christopher+Ariza&userId=6a4f500b1e4f&source=post_page-6a4f500b1e4f----7a27dff532f7---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7a27dff532f7--------------------------------)
    ·7分钟阅读·2023年3月3日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F7a27dff532f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmemoizing-dataframe-functions-7a27dff532f7&user=Christopher+Ariza&userId=6a4f500b1e4f&source=-----7a27dff532f7---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7a27dff532f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmemoizing-dataframe-functions-7a27dff532f7&source=-----7a27dff532f7---------------------bookmark_footer-----------)![](../Images/9187973a594d0c3bf5dc93fa4b623095.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F7a27dff532f7&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fmemoizing-dataframe-functions-7a27dff532f7&source=-----7a27dff532f7---------------------bookmark_footer-----------)![](../Images/9187973a594d0c3bf5dc93fa4b623095.png)'
- en: Photo by Author
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的照片
- en: A well-known technique for improving the run-time performance of a software
    system (in Python or any language) is function memoization. Memoization is a type
    of caching applied to a single function. If a function is called multiple times
    with the same arguments, repeating the calculation can be avoided by storing the
    results in a mapping (or on disk), keyed by the arguments. Upon subsequent calls,
    if the arguments are found, the stored result is returned.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 提高软件系统运行性能的一个著名技术是函数缓存。缓存是一种应用于单个函数的缓存方法。如果函数多次使用相同的参数调用，可以通过将结果存储在映射（或磁盘）中来避免重复计算。后续调用时，如果找到参数，则返回存储的结果。
- en: 'This opportunity comes with tradeoffs. Memoization reduces time at the cost
    of space: previously calculated results must be stored either in memory or on
    disk. Additionally, the function memoized must be pure: the output must be determined
    exclusively by its inputs. Finally, not all types of function arguments are suitable.
    With in-memory memoization, where results are stored in a mapping, arguments must
    be hashable and immutable. With disk-based memoization, where results are stored
    in a file, arguments must be reducible to a unique file name; a message digest
    derived from a cryptographic hash function is optimal for this purpose.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种机会伴随着权衡。记忆化以空间换时间：先前计算的结果必须存储在内存或磁盘上。此外，被记忆化的函数必须是纯粹的：输出必须完全由输入决定。最后，并非所有类型的函数参数都是合适的。在内存记忆化中，结果存储在映射中，参数必须是可哈希和不可变的。在基于磁盘的记忆化中，结果存储在文件中，参数必须能还原为唯一的文件名；从密码学哈希函数派生的消息摘要是实现此目的的最佳选择。
- en: 'Another challenge of memoization is cache invalidation: to avoid excessive
    cache growth, caches must be dropped. The Python standard library provides an
    in-memory solution with the `functools.lru_cache()` decorator. This decorator
    implements memoization with a “least recently used” (LRU) cache invalidation strategy:
    after reaching a maximum count, caches that have least-recently been used are
    dropped.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆化的另一个挑战是缓存失效：为了避免缓存过度增长，必须丢弃缓存。Python 标准库通过 `functools.lru_cache()` 装饰器提供了一种内存解决方案。该装饰器通过“最近最少使用”（LRU）缓存失效策略实现记忆化：在达到最大计数后，会丢弃最近最少使用的缓存。
- en: For Python programmers using Pandas DataFrames as function arguments, there
    are further challenges. As mutable containers, Pandas `DataFrame` and `Series`
    are not hashable. The `functools.lru_cache()` will fail if an argument is a Pandas
    DataFrame.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 Pandas DataFrame 作为函数参数的 Python 程序员，还有更多挑战。由于 Pandas `DataFrame` 和 `Series`
    是可变容器，因此它们不可哈希。如果参数是 Pandas DataFrame，则 `functools.lru_cache()` 将失败。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[StaticFrame](https://github.com/static-frame/static-frame) is an alternative
    DataFrame library that offers efficient solutions to this problem, both for in-memory
    and disk-based memoization.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[StaticFrame](https://github.com/static-frame/static-frame) 是一个替代 DataFrame
    的库，为内存和基于磁盘的记忆化提供了高效的解决方案。'
- en: Hash Functions and Hash Collisions
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哈希函数和哈希碰撞
- en: Before demonstrating DataFrame memoization with StaticFrame, it is important
    to distinguish different types of hash functions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在展示使用 StaticFrame 的 DataFrame 记忆化之前，区分不同类型的哈希函数是重要的。
- en: A hashing function converts a variable-sized value into a smaller, (generally)
    fixed-sized value. A hash collision is when different inputs hash to the same
    result. For some applications, hash collisions are acceptable. Cryptographic hash
    functions aim to eliminate collisions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数将可变大小的值转换为较小的（通常是）固定大小的值。哈希碰撞是指不同的输入哈希到相同的结果。对于某些应用，哈希碰撞是可以接受的。密码学哈希函数旨在消除碰撞。
- en: 'In Python, the built-in `hash()` function converts hashable objects into an
    integer. Arbitrary types can provide support by implementing the magic method
    `__hash__()`. Importantly, the results of `hash()` are not collision resistant:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，内置的 `hash()` 函数将可哈希对象转换为整数。任意类型可以通过实现魔法方法 `__hash__()` 提供支持。重要的是，`hash()`
    的结果并不具备抗碰撞能力：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Python dictionaries use `hash()` to transform dictionary keys into storage positions
    in a low-level C array. Collisions are expected, and if found, are resolved with
    equality comparisons using `__eq__()`. Thus, for an arbitrary type to be hashable,
    it needs to implement both `__hash__()` and `__eq__()`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 字典使用 `hash()` 将字典键转换为低级 C 数组中的存储位置。预期会有碰撞，如果发生碰撞，会使用 `__eq__()` 进行相等性比较解决。因此，要使任意类型可哈希，它需要实现
    `__hash__()` 和 `__eq__()`。
- en: 'Cryptographic hashing functions are unlike `hash()`: they are designed to avoid
    collisions. Python implements a collection of cryptographic hashing functions
    in the `hashlib` library. These functions consume byte data and return, with the
    `hexdigest()` method, a message digest as a string.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学哈希函数不同于 `hash()`：它们旨在避免碰撞。Python 在 `hashlib` 库中实现了一系列密码学哈希函数。这些函数处理字节数据，并通过
    `hexdigest()` 方法返回一个消息摘要字符串。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In-Memory Memoization
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存记忆化
- en: To memoize functions that take DataFrames as arguments, an immutable and hashable
    DataFrame is required. StaticFrame offers the `FrameHE` for this purpose, where
    “HE” stands for “hash, equals,” the two required implementations for Python hashability.
    While the StaticFrame `Frame` is immutable, it is not hashable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要对以 DataFrames 作为参数的函数进行记忆化，需要一个不可变且可哈希的 DataFrame。StaticFrame 提供了 `FrameHE`
    来实现这一点，其中 “HE” 代表“哈希、相等”，这是 Python 哈希功能所需的两个实现。虽然 StaticFrame 的 `Frame` 是不可变的，但它不是可哈希的。
- en: The `FrameHE.__hash__()` method returns the `hash()` of the labels of the index
    and columns. While this will collide with any other `FrameHE` with the same labels
    but different values, using just the labels defers the more expensive full-value
    comparison to `__eq__()`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`FrameHE.__hash__()` 方法返回索引和列标签的 `hash()`。虽然这会与任何具有相同标签但值不同的 `FrameHE` 冲突，但仅使用标签会将更昂贵的完整值比较推迟到
    `__eq__()`。'
- en: The implementation of `FrameHE.__eq__()` simply delegates to `Frame.equals()`,
    a method that always returns a single Boolean. This contrasts with `Frame.__eq__()`,
    which returns an element-wise comparison in a Boolean `Frame`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`FrameHE.__eq__()` 方法的实现简单地委托给 `Frame.equals()`，这是一个始终返回单一布尔值的方法。这与 `Frame.__eq__()`
    不同，后者返回的是布尔 `Frame` 中的逐元素比较结果。'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With a `FrameHE` as an argument, the `cube()` function, decorated with `functools.lru_cache()`,
    can be used. If lacking a `FrameHE`, the `to_frame_he()` method can be used to
    efficiently create a `FrameHE` from other StaticFrame containers. As underlying
    NumPy array data is immutable and sharable among containers, this is a light-weight,
    no-copy operation. If coming from a Pandas DataFrame, `FrameHE.from_pandas()`
    can be used.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `FrameHE` 作为参数时，可以使用装饰了 `functools.lru_cache()` 的 `cube()` 函数。如果没有 `FrameHE`，可以使用
    `to_frame_he()` 方法从其他 StaticFrame 容器中高效地创建 `FrameHE`。由于底层的 NumPy 数组数据是不可变且可以在容器之间共享的，这是一种轻量级、无复制的操作。如果来自
    Pandas DataFrame，可以使用 `FrameHE.from_pandas()`。
- en: In the example below, `cube()` is called with the `FrameHE` created above. The
    IPython `%time` utility shows that, after being called once, subsequent calls
    with the same argument are three orders of magnitude faster (from ms to µs).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，`cube()` 函数与上述创建的 `FrameHE` 一起调用。IPython 的 `%time` 工具显示，在首次调用后，使用相同参数的后续调用速度提高了三个数量级（从毫秒到微秒）。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While helpful for in-memory memoization, `FrameHE` instances can also be members
    of sets, offering a novel approach to collecting unique containers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对内存中的记忆化非常有用，`FrameHE` 实例也可以作为集合的成员，提供了一种收集唯一容器的新方法。
- en: Creating a Message Digest from a DataFrame
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 DataFrame 创建消息摘要
- en: While in-memory memoization offers optimal performance, caches consume system
    memory and do not persist beyond the life of the process. If function results
    are large, or caches should persist, disk-based memoization is an alternative.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然内存中的记忆化提供了最佳性能，但缓存会消耗系统内存，并且在进程结束后不会持久化。如果函数结果较大或缓存需要持久化，基于磁盘的记忆化是一个替代方案。
- en: In this scenario, mutability and hashability of arguments is irrelevant. Instead,
    cached results can be retrieved from a file with a name derived from the arguments.
    Applying a cryptographic hash function on the arguments is ideal for this purpose.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，参数的可变性和可哈希性无关紧要。相反，可以从文件中检索缓存结果，该文件名源自参数。对参数应用加密哈希函数是理想的选择。
- en: As such hash functions generally take byte data as input, a `Frame` and all
    of its components must be converted to a byte representation. A common approach
    is to serialize the `Frame` as JSON (or some other string representation), which
    can then be converted to bytes. As underlying NumPy array data is already stored
    in bytes, converting that data to strings is inefficient. Further, as JSON does
    not support the full range of NumPy types, the JSON input might also be insufficiently
    distinct, leading to collisions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于哈希函数通常以字节数据作为输入，因此 `Frame` 及其所有组件必须转换为字节表示。常见的方法是将 `Frame` 序列化为 JSON（或其他字符串表示），然后再转换为字节。由于底层的
    NumPy 数组数据已经以字节存储，将这些数据转换为字符串是低效的。此外，由于 JSON 不支持全部 NumPy 类型，JSON 输入可能也不够独特，从而导致哈希碰撞。
- en: StaticFrame offers `via_hashlib()` to meet this need, providing an efficient
    way to provide byte input to cryptographic hash functions found in the Python
    `hashlib` module. An example using SHA-256 is given below.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: StaticFrame 提供了 `via_hashlib()` 来满足这一需求，提供了一种有效的方法来将字节输入传递给 Python `hashlib`
    模块中的加密哈希函数。以下是使用 SHA-256 的示例。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, `via_hashlib()` is called with options to determine which container components
    should be included in the input bytes. As the default `name` attribute, `None`,
    is not byte encodable, it is excluded. Second, the hash function constructor `sha256()`
    is called, returning an instance loaded with the appropriate input bytes. Third,
    the `hexdigest()` method is called to return the message digest as a string. Alternative
    cryptographic hash function constructors, such as `sha3_256`, `shake_256`, and
    `blake2b` are available.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，调用 `via_hashlib()` 并选择要包括在输入字节中的容器组件。由于默认的 `name` 属性 `None` 无法进行字节编码，因此被排除。其次，调用哈希函数构造器
    `sha256()`，返回一个加载了适当输入字节的实例。第三，调用 `hexdigest()` 方法以字符串形式返回消息摘要。还可以使用其他密码学哈希函数构造器，如
    `sha3_256`、`shake_256` 和 `blake2b`。
- en: To create the input bytes, StaticFrame concatenates all underlying byte data
    (both values and labels), optionally including container metadata (such as `name`
    and `__class__.__name__` attributes). This same byte representation is available
    with the `via_hashlib().to_bytes()` method. If necessary, this can be combined
    with other byte data to create a hash digest based on multiple components.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建输入字节，StaticFrame 连接了所有基础字节数据（包括值和标签），可选地包括容器元数据（如 `name` 和 `__class__.__name__`
    属性）。使用 `via_hashlib().to_bytes()` 方法可以获得相同的字节表示。如果需要，这可以与其他字节数据结合以创建基于多个组件的哈希摘要。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: StaticFrame’s built-in support for creating message digests is shown to be more
    efficient than two common approaches with Pandas. The first approach uses the
    Pandas utility function `pd.hash_pandas_object()` to derive per-column integer
    hashes. This routine uses a bespoke digest algorithm that makes no claim of cryptographic
    collision resistance. For comparison here, those per-column integer hashes are
    used as input to a `hashlib` message digest function. The second approach provides
    a JSON representation of the entire DataFrame as input to a `hashlib` message
    digest function. While this may be more collision resistant than `pd.hash_pandas_object()`,
    it is often slower. The following chart displays performance characteristics of
    these two approaches compared to `via_hashlib()`. Over a range of DataFrame shapes
    and type mixtures, `via_hashlib()` outperforms all except one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: StaticFrame 对创建消息摘要的内置支持显示出比 Pandas 的两种常见方法更高效。第一种方法使用 Pandas 工具函数 `pd.hash_pandas_object()`
    来派生每列的整数哈希值。这个例程使用了一种定制的摘要算法，没有声称具有密码学碰撞抵抗性。为了比较，这里将这些每列的整数哈希值作为 `hashlib` 消息摘要函数的输入。第二种方法提供了整个
    DataFrame 的 JSON 表示，作为 `hashlib` 消息摘要函数的输入。虽然这可能比 `pd.hash_pandas_object()` 更具碰撞抵抗性，但通常较慢。下图显示了这两种方法与
    `via_hashlib()` 的性能特征比较。在各种 DataFrame 形状和类型组合中，`via_hashlib()` 表现优于所有方法，只有一个例外。
- en: '![](../Images/e91a4ac7663ef6a30e0b4cf92a7340ed.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e91a4ac7663ef6a30e0b4cf92a7340ed.png)'
- en: Chart by Author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图表
- en: Disk-Based Memoization
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于磁盘的记忆化
- en: Given a means to convert a DataFrame into a hash digest, a disk-based caching
    routine can be implemented. The decorator below does this for the narrow case
    of a function that takes and returns a single `Frame`. In this routine, a file
    name is derived from a message digest of the argument, prefixed by the name of
    the function. If the file name does not exist, the decorated function is called
    and the result is written. If the file name does exist, it is loaded and returned.
    Here, the StaticFrame NPZ file format is used. As demonstrated in a recent PyCon
    [talk](https://youtu.be/HLH5AwF-jx4), storing a `Frame` as an NPZ is often much
    faster than Parquet and related formats, and provides complete round-trip serialization.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 给定将 DataFrame 转换为哈希摘要的方法后，可以实现基于磁盘的缓存例程。下面的装饰器适用于接收和返回单个`Frame`的函数。在这个例程中，文件名是从参数的消息摘要派生的，前缀是函数的名称。如果文件名不存在，则调用装饰的函数并写入结果。如果文件名存在，则加载并返回。这里使用了
    StaticFrame NPZ 文件格式。正如最近 PyCon [讲座](https://youtu.be/HLH5AwF-jx4)中演示的，将 `Frame`
    存储为 NPZ 通常比 Parquet 和相关格式要快得多，并提供完整的往返序列化。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To demonstrate this decorator, it can be applied to a function that iterates
    over windows of ten rows, sums the columns, and then concatenates the results
    into a single `Frame`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个装饰器，它可以应用于一个迭代十行窗口、对列求和，然后将结果连接成一个单一 `Frame` 的函数。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After first usage, performance is reduced to less than twenty percent of the
    original run time. While loading a disk-based cache is slower than retrieving
    an in-memory cache, the benefit of avoiding repeated calculations is gained without
    consuming memory and with the opportunity of persistent caches.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次使用后，性能降低到原始运行时间的不到20%。虽然加载基于磁盘的缓存比检索内存缓存要慢，但避免重复计算的好处可以在不消耗内存的情况下获得，并且可以利用持久缓存。
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `via_hashlib()` interfaces can be used in other situations as a digital
    signature or checksum of all characteristics of a DataFrame.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`via_hashlib()`接口可以在其他情况下作为DataFrame所有特征的数字签名或校验和。'
- en: Conclusion
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: If pure functions are called multiple times with the same arguments, memoization
    can vastly improve performance. While functions that input and output DataFrames
    require special handling, StaticFrame offers convenient tools to implement both
    in-memory and disk-based memoization. While care must be taken to ensure that
    caches are properly invalidated and collisions are avoided, great performance
    benefits can be realized when repeated work is eliminated.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果纯函数在相同的参数下被调用多次，记忆化可以极大地提高性能。虽然处理输入和输出DataFrame的函数需要特别处理，但StaticFrame提供了便捷的工具来实现内存和基于磁盘的记忆化。虽然必须小心确保缓存被正确失效并避免冲突，但当消除重复工作时，可以实现显著的性能提升。
