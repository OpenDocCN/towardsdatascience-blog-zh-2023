- en: Build a WebSocket Application with FastAPI and Angular
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FastAPI 和 Angular 构建 WebSocket 应用程序
- en: 原文：[https://towardsdatascience.com/build-a-websocket-application-with-fastapi-and-angular-988157dce554](https://towardsdatascience.com/build-a-websocket-application-with-fastapi-and-angular-988157dce554)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-a-websocket-application-with-fastapi-and-angular-988157dce554](https://towardsdatascience.com/build-a-websocket-application-with-fastapi-and-angular-988157dce554)
- en: Learn to build a two-way interactive communication application with the WebSocket
    protocol
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何使用 WebSocket 协议构建双向交互通信应用程序
- en: '[](https://lynn-kwong.medium.com/?source=post_page-----988157dce554--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----988157dce554--------------------------------)[](https://towardsdatascience.com/?source=post_page-----988157dce554--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----988157dce554--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----988157dce554--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://lynn-kwong.medium.com/?source=post_page-----988157dce554--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----988157dce554--------------------------------)[](https://towardsdatascience.com/?source=post_page-----988157dce554--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----988157dce554--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----988157dce554--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----988157dce554--------------------------------)
    ·7 min read·Jan 30, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----988157dce554--------------------------------)
    ·7 分钟阅读·2023 年 1 月 30 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/862e87ceb50015d6686e582d408222c1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/862e87ceb50015d6686e582d408222c1.png)'
- en: Image by geralt (Mobile Smartphone Stock Exchange) in Pixabay
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 geralt 提供（移动智能手机股票交易）在 Pixabay
- en: Similar to HTTP, WebSocket is also a communication protocol used in client-server
    communications. However, unlike HTTP, WebSocket is a bidirectional interactive
    protocol that allows the client to send messages to the server and also receive
    event-driven responses passively from the server without having to make requests
    to the server.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 HTTP，WebSocket 也是一种用于客户端-服务器通信的协议。然而，与 HTTP 不同的是，WebSocket 是一种双向交互协议，允许客户端向服务器发送消息，并且可以被动地从服务器接收事件驱动的响应，而无需向服务器发出请求。
- en: WebSocket is widely used in chatting and gaming where real-time data is a must-have.
    It can also be used in other fields where real-time or near real-time data is
    important. For example, an application using historical prices to predict future
    ones can benefit from WebSocket. When new data comes in from a client in a data
    stream, the predicted ones using some machine learning or deep learning models
    can be sent out to the client automatically.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket 广泛应用于聊天和游戏中，这些场景需要实时数据。它也可以用于其他需要实时或近实时数据的领域。例如，使用历史价格预测未来价格的应用程序可以从
    WebSocket 中受益。当来自客户端的数据流中出现新数据时，使用某些机器学习或深度学习模型预测的结果可以自动发送到客户端。
- en: In this post, we will build a simple WebSocket application with FastAPI and
    Angular, where the former will be used to build the WebSocket server and the latter
    the client. The concept may sound brand-new to you and it may seem daunting to
    build such an application. However, as you will see in this post, it is actually
    not that complex and we can build a WebSocket application with several lines of
    code quickly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将使用 FastAPI 和 Angular 构建一个简单的 WebSocket 应用程序，其中前者用于构建 WebSocket 服务器，后者用于客户端。这个概念可能对你来说全新，并且构建这样的应用程序可能看起来很令人畏惧。然而，正如你将在本文中看到的，它实际上并没有那么复杂，我们可以用几行代码快速构建一个
    WebSocket 应用程序。
- en: Build a WebSocket Server with FastAPI
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 FastAPI 构建 WebSocket 服务器
- en: FastAPI, which uses Starlette behind the scene, supports WebSocket and provides
    some standard methods to accept a client connection, and receive and send data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 使用 Starlette 作为底层框架，支持 WebSocket，并提供了一些标准方法来接受客户端连接，接收和发送数据。
- en: 'In this post, we will put the backend and frontend code in the same repository,
    in the `backend` and `frontend` folder, respectively. The FastAPI code will be
    put in the `backend/app` folder:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将把后端和前端代码放在同一个代码库中，分别位于 `backend` 和 `frontend` 文件夹中。FastAPI 代码将放在 `backend/app`
    文件夹里：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Keypoints for this code snippet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码片段的关键点：
- en: In the path decorator of a WebSocket endpoint, `@app.websocket` is used, rather
    than those with HTTP verbs like `@app.get`, `@app.post`, etc.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 WebSocket 端点的路径装饰器中，使用的是 `@app.websocket`，而不是像 `@app.get`、`@app.post` 等具有
    HTTP 动词的装饰器。
- en: A `WebSocket` object can be injected in the path operation function, which can
    be used to accept client connections, receive data from and send data to the client
    with some standard methods (`accept`, `receive_json` and `send_json`). The code
    is actually pretty self-explanatory and you can use it similarly in your application
    as well.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`WebSocket` 对象可以在路径操作函数中注入，它可以用来接受客户端连接，接收来自客户端的数据以及通过一些标准方法（`accept`、`receive_json`
    和 `send_json`）向客户端发送数据。代码实际上相当自解释，你可以在你的应用中类似地使用它。'
- en: 'Now you can start the WebSocket server with `uvicorn`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用 `uvicorn` 启动 WebSocket 服务器：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unlike HTTP endpoints, it’s not so straightforward to test WebSocket endpoints
    independently without a client. It is easier to set up a client and test them
    from there. In this post, we will use Angular to build a WebSocket client and
    will interact with the WebSocket server from there.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与 HTTP 端点不同，独立测试 WebSocket 端点没有客户端时并不那么简单。设置一个客户端并从那里进行测试更为容易。在这篇文章中，我们将使用 Angular
    构建一个 WebSocket 客户端，并从那里与 WebSocket 服务器进行交互。
- en: Set up the Angular project
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Angular 项目
- en: In this post, Node.js 18.13.0 and Angular v15.1.2 are used. It’s recommended
    to use these versions if you want to follow along and see the exact results as
    demonstrated. However, older or newer versions should also work properly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，使用的是 Node.js 18.13.0 和 Angular v15.1.2。如果你想跟随并看到展示的确切结果，建议使用这些版本。然而，旧版本或新版本也应该能够正常工作。
- en: 'To install Angular CLI, run:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Angular CLI，请运行：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then we can create a workspace with the *ng* command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 *ng* 命令创建一个工作区：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will not add routing for this simple demonstration project, and all the other
    settings can be left as default.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会为这个简单的演示项目添加路由，所有其他设置可以保持默认。
- en: We will not create a new component and will update the existing `app` component
    directly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会创建新的组件，而是直接更新现有的 `app` 组件。
- en: However, we will create a new service file to manage WebSocket-related code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我们将创建一个新的服务文件来管理与 WebSocket 相关的代码。
- en: A service class in Angular is just a regular class plus some settings, normally
    only the `providedIn` setting in the `Injectable` decorator. We can create the
    service file (`websocket.service.ts`) directly in the `app` folder.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 中的服务类只是一个普通的类加上一些设置，通常只有 `Injectable` 装饰器中的 `providedIn` 设置。我们可以直接在
    `app` 文件夹中创建服务文件（`websocket.service.ts`）。
- en: Create the WebSocket service
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 WebSocket 服务
- en: Thanks to the RxJS library, using WebSocket in Angular is very simple. We can
    import the `WebSocket` factory function from RxJS and use it to create a `WebSocketSubject`
    which can then be used to send data to and receive data from a WebSocket server.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 RxJS 库，在 Angular 中使用 WebSocket 非常简单。我们可以从 RxJS 中导入 `WebSocket` 工厂函数，并使用它创建一个
    `WebSocketSubject`，然后可以用来向 WebSocket 服务器发送数据和接收数据。
- en: 'The code of the service file is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 服务文件的代码如下：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Keypoints for this file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的重点：
- en: The `webSocket` factory function and the `WebSocketSubject` subject is the key
    to using WebSocket in Angular.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`webSocket` 工厂函数和 `WebSocketSubject` 主题是 Angular 中使用 WebSocket 的关键。'
- en: To create a `WebSocketSubject`, we need to pass in the URL of the WebSocket
    server, which is `ws://localhost:8000/ws` in this example. Note that the protocol
    is `ws`, not `http`. It is the one we set in the FastAPI application above, and
    is saved in `environment.ts` as an environment variable.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建 `WebSocketSubject`，我们需要传入 WebSocket 服务器的 URL，在这个示例中是 `ws://localhost:8000/ws`。请注意协议是
    `ws`，而不是 `http`。这是我们在上面的 FastAPI 应用中设置的，并作为环境变量保存在 `environment.ts` 中。
- en: '`WebSocketSubject` works in the same way as regular RxJS `Subject`. Therefore,
    it can be subscribed to receive data sent from the server, and we can also use
    `next()` to send messages to the server.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`WebSocketSubject` 的工作方式与普通的 RxJS `Subject` 相同。因此，它可以被订阅以接收来自服务器的数据，我们也可以使用
    `next()` 向服务器发送消息。'
- en: When we don’t need to interact with the WebSocket server anymore, or when the
    corresponding component is destroyed, we can call `complete()` on the `WebSocketSubject`
    to complete it and thus close the connection. We should handle the connection
    closing event properly in the backend code, otherwise, exceptions will be raised.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们不再需要与 WebSocket 服务器交互，或当相应的组件被销毁时，我们可以在 `WebSocketSubject` 上调用 `complete()`
    来完成它，从而关闭连接。我们应该在后端代码中妥善处理连接关闭事件，否则会引发异常。
- en: The received data are saved to an array and will be displayed to the user together
    as we will see later.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接收到的数据被保存到一个数组中，稍后会一起显示给用户。
- en: Use the WebSocket service in the component
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在组件中使用 WebSocket 服务
- en: Now that the WebSocket service is created, we can use it in our component. We
    should have some mechanism to open and close the connection to the WebSocket server.
    We will also implement the features to send messages to the server and display
    the received ones.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 WebSocket 服务已创建，我们可以在组件中使用它。我们应有一些机制来打开和关闭与 WebSocket 服务器的连接。我们还将实现向服务器发送消息和显示接收消息的功能。
- en: 'This is the code for the component file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是组件文件的代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we see, all the data logic is encapsulated in the `WebSocketService`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，所有的数据逻辑都封装在`WebSocketService`中。
- en: 'And this template file demonstrates how to send data and display the received
    data:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板文件演示了如何发送数据和显示接收到的数据：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that in order to use `ngModel` we need to import `FormsModule` in `app.module.ts`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了使用`ngModel`，我们需要在`app.module.ts`中导入`FormsModule`。
- en: 'After everything is set up, we can run `ng serve` to bring up the Angular application
    locally and go to http://127.0.0.1:4200 to visit it. Try to send some messages
    sequentially and see what will happen:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一切设置好后，我们可以运行`ng serve`在本地启动 Angular 应用程序，并访问 http://127.0.0.1:4200。尝试依次发送一些消息，看看会发生什么：
- en: '![](../Images/9d7d3c348bcbac5efa894d033f36fdad.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d7d3c348bcbac5efa894d033f36fdad.png)'
- en: As demonstrated, we can send messages to the server continuously and the processed
    data will pop up when it is ready in the backend, without having to poll the server
    for a reply.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如演示的那样，我们可以不断地向服务器发送消息，当后台处理的数据准备好时会弹出，无需轮询服务器回复。
- en: Dockerize the backend and frontend code
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对后端和前端代码进行 Docker 化
- en: To make the code easier to share on different platforms, let’s dockerize the
    backend and frontend code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使代码更容易在不同平台上共享，我们将后端和前端代码进行 Docker 化。
- en: 'For the FastAPI code, we need to create a custom Docker image with a `Dockerfile`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 FastAPI 代码，我们需要创建一个包含`Dockerfile`的自定义 Docker 镜像：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`requirements.txt` has the dependencies for the application:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements.txt` 包含了应用程序的依赖项：'
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that you must install `uvicorn[standard]` and not just `uvicorn`, otherwise,
    WebSocket cannot be used in FastAPI.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你必须安装`uvicorn[standard]`而不仅仅是`uvicorn`，否则 WebSocket 无法在 FastAPI 中使用。
- en: 'Then we need to create a `docker-compose.yaml` file in order to spin up the
    backend and frontend code more easily:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建一个`docker-compose.yaml`文件，以便更轻松地启动后端和前端代码：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The ports are set in a way that everything would work exactly the same as in
    the example above without using Docker.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 端口设置的方式使得一切与上述示例中的工作完全一致，而不需要使用 Docker。
- en: The code for the whole project can be found [here](https://github.com/lynnkwong/websocket-fastapi-angular).
    You are welcome to download it and test it yourself.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 整个项目的代码可以在[这里](https://github.com/lynnkwong/websocket-fastapi-angular)找到。欢迎下载并自行测试。
- en: 'When everything is set up, you can use `docker-compose` to start the services:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切设置好后，可以使用`docker-compose`启动服务：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In case you encounter port conflict issues, you can use the command below to
    find out which applications are using the ports (4200 and 8000) and kill them
    if applicable:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到端口冲突问题，可以使用以下命令找出哪些应用程序正在使用端口（4200 和 8000），并在适用时终止它们：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If everything works properly, you can access the WebSocket web application at
    http://localhost:4200 as before. Everything should work exactly the same as before.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你可以像以前一样在 http://localhost:4200 访问 WebSocket Web 应用程序。一切应该与以前完全相同。
- en: In this post, we have introduced how to write backend and frontend code to set
    up a simple interactive real-time web application using WebSocket. The WebSocket
    server is created with FastAPI and the web user interface is with Angular. Both
    FastAPI and Angular (through RxJS) provide simple ways to implement the WebSocket
    protocol and make it very easy to create web applications using WebSocket connections.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了如何编写后端和前端代码，使用 WebSocket 设置一个简单的实时互动 Web 应用程序。WebSocket 服务器使用 FastAPI
    创建，网页用户界面使用 Angular。FastAPI 和 Angular（通过 RxJS）都提供了简单的方式来实现 WebSocket 协议，使得使用 WebSocket
    连接创建 Web 应用程序变得非常容易。
- en: This post can help you get started building low-latency or real-time web applications
    using WebSocket. It can be a valuable tool for data processing as well. For example,
    most machine learning models take time to build and predict results. With WebSocket,
    we can build a near real-time application where machine learning predicted data
    can keep popping up when they become available in the backend.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章可以帮助你开始使用 WebSocket 构建低延迟或实时的 Web 应用程序。它也可以成为数据处理的有价值工具。例如，大多数机器学习模型在构建和预测结果时需要时间。利用
    WebSocket，我们可以构建一个接近实时的应用程序，使机器学习预测的数据在后台变得可用时不断弹出。
- en: 'Related articles:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 相关文章：
- en: '[Build APIs with FastAPI in Python — All Essentials You Need to Get Started](https://levelup.gitconnected.com/build-apis-with-fastapi-in-python-all-essentials-you-need-to-get-started-6bf9fa90c6b8)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 的 FastAPI 构建 API — 开始所需的所有必备知识](https://levelup.gitconnected.com/build-apis-with-fastapi-in-python-all-essentials-you-need-to-get-started-6bf9fa90c6b8)'
- en: '[How to Create a Simple Dialog Box with Angular Material](https://javascript.plainenglish.io/how-to-create-a-simple-dialog-box-with-angular-material-8cd68440ddd1)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Angular Material 创建一个简单的对话框](https://javascript.plainenglish.io/how-to-create-a-simple-dialog-box-with-angular-material-8cd68440ddd1)'
