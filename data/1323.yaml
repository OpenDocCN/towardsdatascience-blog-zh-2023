- en: The One Thing You Need to Learn Recursion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习递归所需了解的唯一一件事
- en: 原文：[https://towardsdatascience.com/the-one-thing-you-need-to-learn-lecursion-55c03637b5e1?source=collection_archive---------18-----------------------#2023-04-14](https://towardsdatascience.com/the-one-thing-you-need-to-learn-lecursion-55c03637b5e1?source=collection_archive---------18-----------------------#2023-04-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-one-thing-you-need-to-learn-lecursion-55c03637b5e1?source=collection_archive---------18-----------------------#2023-04-14](https://towardsdatascience.com/the-one-thing-you-need-to-learn-lecursion-55c03637b5e1?source=collection_archive---------18-----------------------#2023-04-14)
- en: (And *a lot* more)
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: （以及 *更多* ）
- en: '[](https://sassoli.medium.com/?source=post_page-----55c03637b5e1--------------------------------)[![Bernardino
    Sassoli](../Images/b4c956d5070100e4e798264f4947652a.png)](https://sassoli.medium.com/?source=post_page-----55c03637b5e1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----55c03637b5e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----55c03637b5e1--------------------------------)
    [Bernardino Sassoli](https://sassoli.medium.com/?source=post_page-----55c03637b5e1--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://sassoli.medium.com/?source=post_page-----55c03637b5e1--------------------------------)[![Bernardino
    Sassoli](../Images/b4c956d5070100e4e798264f4947652a.png)](https://sassoli.medium.com/?source=post_page-----55c03637b5e1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----55c03637b5e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----55c03637b5e1--------------------------------)
    [Bernardino Sassoli](https://sassoli.medium.com/?source=post_page-----55c03637b5e1--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64ab339d120f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-thing-you-need-to-learn-lecursion-55c03637b5e1&user=Bernardino+Sassoli&userId=64ab339d120f&source=post_page-64ab339d120f----55c03637b5e1---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----55c03637b5e1--------------------------------)
    ·9 min read·Apr 14, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F55c03637b5e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-thing-you-need-to-learn-lecursion-55c03637b5e1&user=Bernardino+Sassoli&userId=64ab339d120f&source=-----55c03637b5e1---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F64ab339d120f&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-thing-you-need-to-learn-lecursion-55c03637b5e1&user=Bernardino+Sassoli&userId=64ab339d120f&source=post_page-64ab339d120f----55c03637b5e1---------------------post_header-----------)
    发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----55c03637b5e1--------------------------------)
    ·9分钟阅读·2023年4月14日'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F55c03637b5e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-thing-you-need-to-learn-lecursion-55c03637b5e1&source=-----55c03637b5e1---------------------bookmark_footer-----------)![](../Images/0feb822326f96d5b06af9f9b11d93f3f.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F55c03637b5e1&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fthe-one-thing-you-need-to-learn-lecursion-55c03637b5e1&source=-----55c03637b5e1---------------------bookmark_footer-----------)![](../Images/0feb822326f96d5b06af9f9b11d93f3f.png)'
- en: Photo by [Szabo Viktor](https://unsplash.com/@vmxhu?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Szabo Viktor](https://unsplash.com/@vmxhu?utm_source=medium&utm_medium=referral)
    提供，发布在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
    上
- en: 'An old, somewhat abused quip goes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有一句老生常谈的笑话：
- en: '*To understand recursion, you need to understand recursion.*'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*要理解递归，你需要理解递归。*'
- en: It’s the kind of joke that only programmers, mathematicians, or logicians find
    funny. It also isn’t true.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个只有程序员、数学家或逻辑学家会觉得有趣的笑话。它也不是真的。
- en: Like many other things, the one thing you need to understand recursion is *practice*.
    Write a lot of simple recursive functions. Then write a lot more. Then write some
    more complex recursive ones. And so on. But how do you do it? I have a trick.
    It’s a book. It’s short (less than 200 pages), compelling, and will teach you
    much more than how to write recursion. It will also introduce you to some of the
    most foundational concepts in computer science, such as the Y combinator, interpreters,
    combinators, and the halting problem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多其他事物一样，理解递归的唯一方法是*练习*。编写大量简单的递归函数。然后再写更多。再接着写一些更复杂的递归函数。依此类推。但你怎么做呢？我有一个小窍门。这是一本书。它很短（不到200页），引人入胜，并且会教会你比写递归更多的东西。它还会向你介绍计算机科学中一些最基础的概念，例如
    Y 组合子、解释器、组合子和停机问题。
- en: 'This marvelous little book is called *The Little Schemer*.¹ In the “Preface”,
    almost at the very beginning, the authors emphatically state:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这本奇妙的小书叫做*《小程序员》*。¹ 在“前言”中，几乎在一开始，作者明确指出：
- en: The goal of the book is to teach the reader to thinkrecursively*.*
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这本书的目标是教会读者*递归思维*。
- en: If you go through *The Little Schemer*, recursion will become a familiar way
    of thinking about problems. But, in the meantime, you will learn a veritable treasure
    trove of basic ideas. Moreover, the book is written in a very peculiar style,
    forcing you to work through its problems and assimilate its concepts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读了*《小程序员》*，递归将成为你思考问题的一种熟悉方式。但是，在此过程中，你会学到大量的基本理念。此外，这本书采用了非常独特的风格，迫使你解决其中的问题并吸收其概念。
- en: In what follows, I will give a brief overview of what recursion is and why you
    should learn it. Then I will introduce you to the book and explain why it’s an
    outstanding tool that will make you a better programmer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将简要概述什么是递归以及为什么你应该学习它。然后我将介绍这本书，并解释为什么它是一种出色的工具，可以让你成为更好的程序员。
- en: '**Note**: if you are a complete beginner, and you aren’t into more abstract
    topics, this might not be the best book for you. If you are at the stage in which
    you want to learn to code and have something to show, my suggestion is come back
    to the book later, when you feel comfortable in one programming language. Then
    again, if your interests in programming are more philosophical or theoretical,
    this might be a good starting point.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：如果你是完全的初学者，并且对更抽象的主题不感兴趣，这本书可能不适合你。如果你处于想要学习编程并且希望有所展示的阶段，我的建议是等到你对某一种编程语言感到舒适时再回过头来看这本书。再者，如果你对编程的兴趣更偏向于哲学或理论，那么这可能是一个很好的起点。'
- en: 'Recursion: why it matters'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归：它为何重要
- en: 'Recursion is daunting; the word “magic” gets thrown around a lot. Advice to
    beginners abound. I read someone advising beginners to “trust the magic” — or
    something to that effect. You might get told to learn how the call stack works.
    Sure, it’s useful, even fundamental: yet, not the best way to become proficient
    or even comfortable using recursion. I know none of those suggestions truly worked
    for me. What *did* work was, you guessed it, practice. I may not be a master of
    recursion. But certainly, I am now more than comfortable with using it. As a matter
    of fact, I sometimes now struggle *not* to write recursive functions even when
    I could use simpler, more efficient solutions.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 递归是令人畏惧的；“魔法”这个词经常被提及。对于初学者的建议很多。我曾读到有人建议初学者“相信魔法”——或者类似的说法。你可能会被告知学习调用栈的工作原理。当然，这很有用，甚至是基础的：但不是成为熟练甚至舒适使用递归的最佳方式。我知道这些建议对我没有真正奏效。真正奏效的是，你猜对了，练习。我可能不是递归的高手。但确实，现在我对使用递归更加游刃有余。事实上，我有时现在甚至会挣扎于*不*编写递归函数，即使我可以使用更简单、更高效的解决方案。
- en: 'I suspect people struggle with recursion because it somehow (mistakenly) suggests
    that an *infinite regress* is going on behind the scenes. It *seems* as though
    recursion is akin to what happens when two mirrors are placed in front of themselves:
    the first reflects the reflection of the second which reflects the reflection
    of the first which reflects …. It’s an effect that was — incidentally — [cleverly
    employed](https://en.wikipedia.org/wiki/Droste_effect) by many artists and designers.
    But that’s not at all what happens.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑人们在递归上遇到困难，是因为它某种程度上（错误地）暗示在幕后发生了*无限回归*。它*似乎*像是当两面镜子相对放置时发生的现象：第一面镜子反射第二面镜子的反射，第二面镜子反射第一面镜子的反射，依此类推……这是一种效果——顺便提一下——被许多艺术家和设计师[巧妙地运用](https://en.wikipedia.org/wiki/Droste_effect)了。但这根本不是实际发生的情况。
- en: 'A recursive *function* is a function that calls itself. For example, here are
    two (slightly different) functions that consume an array or list of integers and
    return its sum, in Javascript and Python:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 递归的*函数*是一个调用自身的函数。例如，这里有两个（略有不同）函数，它们接受一个整数数组或列表并返回其和，分别用 Javascript 和 Python
    编写：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Both functions will:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 两个函数都将：
- en: Check if the input is empty, in which case they will return 0 (the *base case*)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查输入是否为空，如果为空则返回 0（*基本情况*）
- en: Otherwise, they will add the first item of the input to the result of calling
    that function of the remainder of the input (all of the items except the first
    one) (the *recursive call*).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，它们将把输入的第一个项目添加到调用该函数时剩余输入的结果中（除了第一个项目之外的所有项目）（即*递归调用*）。
- en: A recursive function *will* keep calling itself infinitely, *unless* it hits
    the base case. When that happens, the recursive calls stop — which is why we avoid
    an infinite loop.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 递归函数*会*无限调用自身，*除非*它达到了基本情况。当发生这种情况时，递归调用停止 — 这就是我们避免无限循环的原因。
- en: 'That may be all well and good: but why should I become proficient in writing
    recursive functions? After all, anything you can write recursively, you can do
    with iteration in a while loop. Why struggle with this magic-seeming tool? That’s
    a sensible question. Off the top of my head I can think of at least the following
    three reasons:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能都很好，但我为什么要熟练掌握编写递归函数呢？毕竟，你可以用 while 循环中的迭代来完成任何可以递归编写的东西。为什么要为这个看似神奇的工具而挣扎？这是一个合理的问题。脱口而出，我能想到至少以下三个理由：
- en: '**Algorithms and data structures**: many foundational algorithms are recursive
    in nature (think “divide and conquer”). Some data structures are best represented
    recursively (think graphs or trees)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算法和数据结构**：许多基础算法本质上是递归的（想想“分治”）。一些数据结构以递归方式表示最佳（想想图或树）'
- en: Even within **machine learning** recursive structures and algorithms are more
    common than one might think **(**not to mention **AI** in general, where they
    are ubiquitous). For example, the implementation of [decision trees](https://en.wikipedia.org/wiki/Decision_tree)
    is [inherently recursive](https://machinelearningmastery.com/implement-decision-tree-algorithm-scratch-python/).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使在**机器学习**领域，递归结构和算法也比人们想象的要常见**（**更不用说**人工智能**，它们无处不在）。例如，[决策树](https://en.wikipedia.org/wiki/Decision_tree)的实现是[本质上递归的](https://machinelearningmastery.com/implement-decision-tree-algorithm-scratch-python/)。
- en: '**Functional programming**: some say functional *languages* are slowly growing
    in popularity. That may or may not be true. Certainly, more and more “mainstream”
    languages such as Python or Javascript now support functional programming. Moreover,
    some widely used libraries and frameworks (such as React) are by and large based
    on functional practices. Given that the functional paradigm has no notion of *assignment*
    (a little more on that later), recursion is absolutely paramount for it'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数式编程**：有人说函数式*语言*的受欢迎程度正在慢慢增长。这可能是真的，也可能不是。确实，越来越多的“主流”语言如 Python 或 Javascript
    现在支持函数式编程。此外，一些广泛使用的库和框架（如 React）在很大程度上基于函数式实践。鉴于函数式范式没有*赋值*的概念（稍后会详细介绍），递归对它至关重要。'
- en: '**Understanding**: recursion forces you to reduce problems to other, smaller-sized,
    problems. That is one of the most valuable skills you may develop as a programmer.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解**：递归迫使你将问题简化为其他更小的问题。这是你作为程序员可能发展出的最有价值的技能之一。'
- en: Unfortunately, I can’t think of a single extensive resource dedicated to practicing
    recursion. That’s where *The Little Schemer* comes in.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我想不到一个专门用于练习递归的全面资源。这就是*The Little Schemer*的作用所在。
- en: The best book for learning recursion
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习递归的最佳书籍
- en: '![](../Images/b350f8680dd9e708e14f3af7170cf952.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b350f8680dd9e708e14f3af7170cf952.png)'
- en: My copy of TLS — and a cup of espresso (I am Italian!) [Image by the author]
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 TLS 版本 — 还有一杯浓缩咖啡（我来自意大利！）[作者提供的图片]
- en: Judging by the title, *The Little Schemer* (henceforth, *TLS*) should be a book
    about the programming language [Scheme](https://en.wikipedia.org/wiki/Scheme_(programming_language)),
    one of the many that compose the family of LISPs. So why would someone want to
    learn a LISP or Scheme specifically? The thing is, the title is a misnomer. Scheme
    is a language that is very well suited to teaching certain fundamentals of computer
    science² — and for the purposes of *TLS* the syntax you need is so sparse you
    can seriously pick it up in a few minutes. You can safely see it more as a pedagogical
    tool than as a full-fledged language³.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据标题，《*The Little Schemer*》（以下简称 *TLS*）应该是一本关于编程语言 [Scheme](https://en.wikipedia.org/wiki/Scheme_(programming_language))
    的书，它是组成 LISPs 家族的众多语言之一。那么为什么有人会特别想学习 LISP 或 Scheme 呢？问题是，标题并不准确。Scheme 是一种非常适合教授计算机科学某些基础知识的语言²——对于
    *TLS* 来说，你需要的语法是如此稀疏，你可以在几分钟内迅速掌握。你可以更安全地将其视为一种教学工具，而不是一门成熟的语言³。
- en: 'Speaking of pedagogy: the book employs a quirky style. It is written in two
    columns, as some sort of Socratic dialogue between a student and a teacher. This
    is how it begins:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 说到教学法：这本书采用了奇特的风格。它以两列的形式书写，类似于学生和老师之间的苏格拉底式对话。它是这样开始的：
- en: '*Is it true that this is an atom? atom*'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*这是否是一个原子？* 原子'
- en: It doesn’t give you definitions — it asks the reader questions (often in the
    form of exercises) and then provides answers (or solutions). It takes some getting
    used to, but it’s strangely effective.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它不给你定义——它向读者提出问题（通常以练习的形式），然后提供答案（或解决方案）。这需要一些适应，但非常有效。
- en: '![](../Images/9e674942a67744b3172fa55689b19168.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9e674942a67744b3172fa55689b19168.png)'
- en: The quirky style of TLS [Image by the author]
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: TLS 的奇特风格 [作者提供的图片]
- en: 'What does recursion have to do with all this? Well, in *TLS* the authors use
    Scheme in a way that doesn’t support variable assignment or iterations. There
    are no `while` or `for` loops. This means that if you have to write a function
    what will, for example, check if a certain number is contained in a list or array
    of numbers, you cannot do something like (in Python):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 递归与这一切有什么关系？好吧，在 *TLS* 中，作者使用 Scheme 的方式不支持变量赋值或迭代。没有 `while` 或 `for` 循环。这意味着，如果你必须编写一个函数，例如检查某个数字是否包含在列表或数组中，你不能像在
    Python 中那样做：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instead, you *have* to think recursively:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你*必须*以递归的方式思考：
- en: There is a base case in which the list will be *empty* and the function should
    return False
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个基本情况，即列表将是*空的*，函数应该返回 False
- en: Otherwise, you *select the first* item of the list and *check it for equality*
    against the given number; if they match the function returns True. If they do
    not, (recursively) call the function with the *remainder* of the list.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，你*选择第一个*列表项并*检查它是否等于*给定的数字；如果匹配，函数返回 True。如果不匹配，（递归地）调用函数处理列表的*其余部分*。
- en: 'This is how you write *everything* in TLS. Scheme operates on only two basic
    syntactic elements:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你在 TLS 中编写*所有内容*的方式。Scheme 仅在两个基本的语法元素上操作：
- en: '*atom*s: one or more alphanumeric characters'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*原子*：一个或多个字母数字字符'
- en: '*lists*: zero or more atoms or lists enclosed in parentheses.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*列表*：零个或多个被括号包围的原子或列表。'
- en: 'To write functions such as the above all you need is:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写如上所述的函数，你只需要：
- en: a programming construct to *test* if two expressions are the same
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个编程构造来*测试*两个表达式是否相同
- en: another *test* to check if a a list is *empty*
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个*测试*，用于检查列表是否*空*
- en: '*selectors* for the first element of a list and for the remainder of the list'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*选择器* 用于列表的第一个元素和列表的其余部分'
- en: a way to express conditionals (such as `if`)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达条件（例如 `if`）的一种方式
- en: For more complex functions, you also need a *constructor* to build lists. Together
    with some means of *defining* functions, that’s all. This is why almost all of
    the syntax you need is introduced in the first chapter, in less than 10 breezy
    pages (the exception is the list-building constructor cons which gets introduced
    in chapter 3). The first three chapters walk you through many simpler recursive
    functions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的函数，你还需要一个*构造器*来构建列表。加上一些*定义*函数的方法，仅此而已。这就是为什么几乎所有的语法都在第一章中介绍，在不到 10 页的简洁内容中（唯一的例外是列表构建构造器
    cons，它在第 3 章中介绍）。前三章带你了解许多更简单的递归函数。
- en: 'By the time you reach Chapter 4 you should have become familiar with the basic
    design pattern for writing recursive functions which operate on lists: functions
    such as the one above that check for whether a particular item is a member of
    a list. Or functions that replace the first (or all) occurrences of a given item
    in a list with another.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你到达第4章时，你应该已经对编写操作列表的递归函数的基本设计模式有所了解：例如上面提到的函数，它们检查特定项是否是列表的成员。或者，替换列表中给定项的第一个（或所有）出现的函数。
- en: 'That knowledge is subsequently applied to building the basic *arithmetic operations
    from first principles*. Again, this is done by using recursion on numbers and
    resorting to provided primitives, which increment and decrement a number by 1\.
    For example, addition of two numbers *n* and *m* is defined as:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，这些知识应用于从基本原理构建基本的*算术操作*。同样，这通过对数字进行递归以及使用提供的原语（这些原语将数字递增和递减1）来实现。例如，两个数字*n*和*m*的加法定义为：
- en: 'base case: if *m* is zero, return *n*'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本情况：如果*m*为零，返回*n*
- en: Otherwise, recursively return the result of applying the addition function to
    incremented *n* and decremented *m*.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，递归返回将加法函数应用于递增的*n*和递减的*m*的结果。
- en: 'Chapters 5 and 6 introduce recursive functions on arbitrarily deeply-nested
    lists: lists that may contain lists that may, in turn, contain lists, and so on.
    Basically, you rewrite all of the functions from the previous chapters so that
    they work in the “deeper” cases.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章和第6章介绍了对任意深度嵌套列表的递归函数：这些列表可能包含列表，而这些列表又可能包含列表，依此类推。基本上，你需要重写前几章中的所有函数，以便它们在“更深”的情况下也能工作。
- en: 'This knowledge finds its concrete application in Chapter 6, where you write
    an interpreter for arithmetic expressions. Let me emphasize: we are 100 pages
    into the book. We began with no knowledge of Scheme and the sparsest syntax —
    yet here we are, building an interpreter that evaluates operations *we defined*.
    If you are interested in the more theoretical aspects of programming, chances
    are you will find this very rewarding and exciting.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些知识在第6章中得到了具体应用，你将在其中编写一个用于算术表达式的解释器。让我强调：我们已经阅读了100页的内容。我们从没有Scheme知识和最简语法开始——而现在我们正在构建一个评估我们*定义*的操作的解释器。如果你对编程的更理论方面感兴趣，你可能会发现这非常有价值和激动人心。
- en: Chapter 7 is devoted to set-theoretic constructs, relations, and functions,
    all of which, again, is left for the reader to discover in the course of reading
    through the student-teacher dialogue.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章专注于集合论构造、关系和函数，这些内容同样留给读者在阅读师生对话的过程中发现。
- en: 'Chapter 8 is perhaps the least satisfying of the book: it is remarkably steep,
    and it’s hard to see the point of some of the constructs introduced here. The
    crux of it seems to be the introduction of [continuations](https://en.wikipedia.org/wiki/Continuation-passing_style),
    but I must confess that I struggled with this chapter (as, apparently, have many
    others).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章可能是本书中最令人不满意的章节：它相当陡峭，而且很难看出这里引入的一些构造的意义。其关键似乎是引入了[延续](https://en.wikipedia.org/wiki/Continuation-passing_style)，但我必须承认我在这一章中感到困难（显然，许多人也有同样的感受）。
- en: 'Like the preceding one, Chapter 9 is *challenging*: a lot of fundamental concepts
    get introduced in a few pages which lead up to a discussion of the *applicative-order
    Y combinator*. I did enjoy it a lot, but it took me quite a few attempts and the
    help of some online resources (see below) to get through it. By the way, if you
    ever wondered what on Earth the Y combinator is (while we are on the topic of
    recursion): it’s (very coarsely) how you *define* recursion in a language that
    has no way to name functions (and hence, a language in which all functions are
    anonymous — such as *lambda* functions in Python). Being able to grok the Y combinator
    is an enriching experience and, for me, one of the book’s highlights.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一章类似，第9章是*具有挑战性的*：在几页中介绍了许多基础概念，这些概念引出了对*应用顺序Y组合子*的讨论。我非常喜欢这一章，但我花了很多次尝试和一些在线资源的帮助（见下文）才理解它。顺便说一下，如果你曾经想知道Y组合子到底是什么（既然我们讨论递归的话题）：它是（非常粗略地说）在没有函数命名方式的语言中如何*定义*递归（因此，这种语言中的所有函数都是匿名的——例如Python中的*lambda*函数）。能够理解Y组合子是一次丰富的经历，对我来说，它是本书的亮点之一。
- en: 'The final chapter puts it all together when you end up writing a Scheme interpreter
    *in Scheme*. Let it sink in: with only a few primitives, and *using only recursion*
    you are writing an interpreter for a language by bootstrapping that language itself.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一章将所有内容整合在一起，你最终会用 Scheme 编写一个 Scheme 解释器 *在 Scheme 中*。让它沉淀下来：只用几个原语，*仅用递归*，你正在通过引导语言本身来编写一个语言的解释器。
- en: I hope I was able to convey the excitement I felt while going through *TLS*.
    And I hope you will reach out to me to share your experience.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我能够传达我在阅读 *TLS* 时的兴奋感。也希望你能与我分享你的经历。
- en: Additional resources
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外资源
- en: I have a GitHub repo (in progress!) where I am publishing notes, the solutions,
    and a fairly extensive test-suite for the book in Racket [here](https://github.com/bsassoli/The-Little-Schemer)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有一个 GitHub 仓库（正在进行中！），在这里我发布了笔记、解决方案和一个相当全面的 Racket 测试套件，[链接在此](https://github.com/bsassoli/The-Little-Schemer)
- en: 'Another GitHub repo (also in Racket) I like: [https://github.com/bmitc/the-little-scheme](https://github.com/bmitc/the-little-schemer)r'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个我喜欢的 GitHub 仓库（同样是 Racket）：[https://github.com/bmitc/the-little-scheme](https://github.com/bmitc/the-little-schemer)
- en: 'And yet another one: [https://github.com/willprice/little-schemer](https://github.com/willprice/little-schemer)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有另一个：[https://github.com/willprice/little-schemer](https://github.com/willprice/little-schemer)
- en: 'A negative (yet, not entirely off-base) review of the book: [https://inventwithpython.com/blog/2018/12/09/book-review-the-little-schemer/](https://inventwithpython.com/blog/2018/12/09/book-review-the-little-schemer/))
    to counterbalance my enthusiasm'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对这本书的一个负面（但不完全不相关）评论：[https://inventwithpython.com/blog/2018/12/09/book-review-the-little-schemer/](https://inventwithpython.com/blog/2018/12/09/book-review-the-little-schemer/)）以平衡我的热情
- en: An [excellent blog post](https://mvanier.livejournal.com/2897.html) on the Y
    combinator if you get stuck
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你遇到困难，关于 Y 组合子的一个[优秀博客文章](https://mvanier.livejournal.com/2897.html)
- en: '[**1**] Friedman, Daniel, P, Felleisen, Matthias [The Little Schemer], The
    MIT Press, Cambridge, MA, 1986, 4th edition 1996 ([https://mitpress.mit.edu/9780262560993/the-little-schemer/](https://mitpress.mit.edu/9780262560993/the-little-schemer/)).
    Originally published as *The Little LISPer*.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[**1**] Friedman, Daniel, P, Felleisen, Matthias [《小Scheme》], 麻省理工学院出版社，剑桥，MA，1986年，1996年第四版
    ([https://mitpress.mit.edu/9780262560993/the-little-schemer/](https://mitpress.mit.edu/9780262560993/the-little-schemer/))。最初出版为
    *《小LISPer》*。'
- en: '[**2**] In fact one of (if not the) most well-regarded computer science books
    of all time, [*Structure and Interpretation of Computer Programs*](https://web.mit.edu/6.001/6.037/sicp.pdf)
    utilizes Scheme.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[**2**] 事实上，《*计算机程序的结构与解释*》是有史以来最受推崇的计算机科学书籍之一，[*结构与解释计算机程序*](https://web.mit.edu/6.001/6.037/sicp.pdf)
    使用了 Scheme。'
- en: '[**3**] This is not significant but I should mention that my implementation
    of the exercises in TLS is not in Scheme but in [Racket](https://racket-lang.org/),
    which is basically a successor to Scheme.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[**3**] 这并不重要，但我应该提到我在 TLS 中的练习实现不是用 Scheme，而是用 [Racket](https://racket-lang.org/)，它基本上是
    Scheme 的继任者。'
