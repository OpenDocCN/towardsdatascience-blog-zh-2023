- en: NBA Analytics Using PySpark
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PySpark 的 NBA 分析
- en: 原文：[https://towardsdatascience.com/nba-analytics-using-pyspark-a1699ae1117a](https://towardsdatascience.com/nba-analytics-using-pyspark-a1699ae1117a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/nba-analytics-using-pyspark-a1699ae1117a](https://towardsdatascience.com/nba-analytics-using-pyspark-a1699ae1117a)
- en: Win ratio for back-to-back games, mean and standard deviation of game scores,
    and more with Python code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背靠背比赛的胜率、比赛得分的均值和标准差，以及更多的 Python 代码
- en: '[](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)[![Jin
    Cui](../Images/e5ddcbaa6d7da38f960d2c5fea71b538.png)](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)
    [Jin Cui](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)[![Jin
    Cui](../Images/e5ddcbaa6d7da38f960d2c5fea71b538.png)](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)
    [Jin Cui](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)
    ·7 min read·Apr 14, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)
    ·7 min read·2023年4月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/0fb8acf97beb22f7a127864f2d599ba7.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0fb8acf97beb22f7a127864f2d599ba7.png)'
- en: Photo by [Emanuel Ekström](https://unsplash.com/@emanuelekstrom?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Emanuel Ekström](https://unsplash.com/@emanuelekstrom?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Motivation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动机
- en: Just over a week ago I was watching an NBA game between the Milwaukee Bucks
    and the Boston Celtics. This was a match-up between the top 2 teams in the league,
    which many considered to be a prequel to the Eastern Conference finals. Being
    a big basketball and NBA fan myself, the game turned out rather disappointing
    as the Milwaukee Bucks lost to the Boston Celtics 140–99, a rare blow-out defeat
    for Milwaukee which holds the best (regular season) record in the 2022–2023 season.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一周多前，我观看了一场NBA比赛，密尔沃基雄鹿对阵波士顿凯尔特人。这是联赛前两名球队的对决，许多人认为这场比赛是东部决赛的前奏。作为一个篮球和NBA的狂热粉丝，这场比赛令人相当失望，因为密尔沃基雄鹿以99–140输给了波士顿凯尔特人，这是密尔沃基在2022–2023赛季中为数不多的惨败之一，而密尔沃基在常规赛中持有最佳战绩。
- en: Although this was out of character for Milwaukee especially given it’s a blow-out
    loss at home, the commentator of the game alerted me to the fact that they were
    actually playing a back-to-back game, which is a game played right after playing
    on the previous day (in this instance, a game away at Indiana on the previous
    day). In other words, fatigue may have played a role in their loss as playing
    back-to-back games is physically demanding for athletes, which may have been exacerbated
    by the travelling between games (from Indiana back to Milwaukee).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这对于密尔沃基来说显得有些不寻常，尤其是考虑到这是在主场的惨败，但比赛的评论员提醒我他们实际上是在打背靠背比赛，即在前一天比赛之后进行的比赛（在这种情况下，是前一天在印第安纳的客场比赛）。换句话说，疲劳可能在他们的失利中发挥了作用，因为背靠背比赛对运动员身体要求很高，加上比赛间的旅行（从印第安纳回到密尔沃基）可能加剧了这一点。
- en: Looking at team schedules, out of 80 odd games in a season, NBA teams do play
    a number of back-to-back games. Do you ever wonder how teams fare in these games,
    and does this change when teams are playing at away or home courts? This article
    demonstrates one way of getting these stats, which are typically not available
    in the public domain, using [PySpark](https://spark.apache.org/docs/latest/api/python/)
    — a ready-to-use interface for Apache Spark in Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看球队赛程，在一个赛季的80多场比赛中，NBA球队确实会进行多场背靠背比赛。你是否曾经好奇这些比赛中球队的表现如何，以及当球队在客场或主场比赛时这种情况是否有所变化？本文展示了使用
    [PySpark](https://spark.apache.org/docs/latest/api/python/) — 一个即用型的 Python Apache
    Spark 接口 — 来获取这些通常在公共领域中不可用的统计数据的一种方法。
- en: Data
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: To determine the win ratio for back-to-back games, we’ll need a history of back-to-back
    games played by each NBA team as well as their results. Although these stats are
    available on the official NBA website and other community sites, they are not
    licensed for commercial use and as such, I have simulated a synthetic dataset
    which contains the following fields.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定背靠背比赛的胜率，我们需要每支 NBA 球队背靠背比赛的历史记录及其结果。虽然这些统计数据可以在官方 NBA 网站和其他社区网站上找到，但它们不允许商业使用，因此我模拟了一个包含以下字段的合成数据集。
- en: Date when the game was played
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比赛进行的日期
- en: Team name for the home team
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主队名称
- en: Team name for the away team, and
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客队名称，以及
- en: Score of the game, and corresponding outcome by home and away team
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比赛分数，以及主客队的相应结果
- en: The table below shows a snippet of the synthetic dataset. You should be able
    to verify against the official NBA game schedule that that these were not actual
    games.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了合成数据集的一个片段。你应该能够通过官方 NBA 比赛时间表核实这些并不是实际的比赛。
- en: '![](../Images/9d730eae1ea6cc53a4c8fb4bb1f1afa7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d730eae1ea6cc53a4c8fb4bb1f1afa7.png)'
- en: 'Table 1: Synthetic game data. Table by author.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1：合成比赛数据。作者提供的表格。
- en: Data Transformation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据转换
- en: This section provides a step-by-step guide in Python on how to transform the
    above dataset into one which identifies whether a game played by a team is a back-to-back
    game and subsequently calculates the win ratio for these games for each team.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了一个逐步的 Python 指南，讲解如何将上述数据集转换为识别某场比赛是否为背靠背比赛的数据集，并随后计算每支球队这些比赛的胜率。
- en: '**Step 1: Load packages and data**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1：加载包和数据**'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Step 2: Format and create Date columns**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2：格式化并创建日期列**'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The ‘GAME_DATE_minus_ONE’ column created above represents the previous calendar
    date for each game in the dataset. This is discussed in more detail later (in
    **Step 4**) and is used for identifying whether a game is a back-to-back game.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述创建的‘GAME_DATE_minus_ONE’列表示数据集中每场比赛的前一个日历日期。这将在稍后（**步骤 4**）详细讨论，并用于识别是否为背靠背比赛。
- en: '**Step 3: Split dataset by team**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3：按队伍分割数据集**'
- en: As each row of the dataset is at a game level (i.e. it shows the result of a
    game between two teams), splitting is required to represent the result at a team
    level (i.e. splitting each row into two which represent the outcome of a game
    for each team). This can be achieved using the Python code below.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据集的每一行都处于比赛级别（即显示两队之间的比赛结果），因此需要进行分割以在队伍级别上表示结果（即将每一行分割为两个，表示每队的比赛结果）。可以使用下面的
    Python 代码实现这一点。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Step 4: Return for each game the date when the team played its previous game**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 4：返回每场比赛的日期，标记出该队上一次比赛的日期**'
- en: This is when PySpark comes in handy. In particular, we’ll be leveraging the
    *lag* function under the Window Functions in PySpark. In practice, as demonstrated
    in **Table 2** below, the *lag* function provides access to an offset value of
    a column of choice. In this instance, it returns the date when Atlanta Hawks played
    its previous game relative to a current game, over a **Window** which shows a
    view of all the games played by the Atlanta Hawks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，PySpark 就显得特别有用。特别是，我们将利用 PySpark 中窗口函数下的*lag*函数。实际上，如下面的 **表 2** 所示，*lag*函数提供了对所选列的偏移值的访问。在这种情况下，它返回亚特兰大老鹰队相对于当前比赛的上一场比赛的日期，通过一个**窗口**，该窗口显示了亚特兰大老鹰队所有的比赛记录。
- en: For example, in the row of index 1, the Atlanta Hawks played the Cleveland Cavaliers
    on 23/10/2021 (“current game”) as shown in the ‘GAME_DATE’ column, and its last
    game was against the Dallas Mavericks on 21/10/2021 as shown in the ‘GAME_DATE’
    column which is returned via the *lag* function in the same row as the current
    game, in the “GAME_DATE_PREV_GAME” column.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在索引 1 的行中，亚特兰大老鹰队在 23/10/2021 与克利夫兰骑士队进行了比赛（“当前比赛”），如‘GAME_DATE’列所示，其上一场比赛是在
    21/10/2021 对阵达拉斯小牛队，如‘GAME_DATE’列所示，该数据通过*lag*函数在当前比赛所在的行中返回，显示在“GAME_DATE_PREV_GAME”列。
- en: '![](../Images/50d52d848388173fac5ddd648b701c9a.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/50d52d848388173fac5ddd648b701c9a.png)'
- en: 'Table 2: Lag function demonstration. Table by author'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2：*lag*函数演示。作者提供的表格
- en: The ‘GAME_DATE_PREV_GAME’ column returned above, when equal to the ‘GAME_DATE_minus_ONE’
    column created under **Step 2** above, inform that a game is back-to-back (i.e.
    the date of last game played is equal to the previous calendar day of the current
    game). This would be the case for row of index 8 (and 14) in Table 1 above as
    Atlanta Hawks played the Utah Jazz on 4/11/2021 — one day after they played the
    Brookyln Nets on 3/11/2021.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上面返回的‘GAME_DATE_PREV_GAME’列，当其等于在**步骤 2**中创建的‘GAME_DATE_minus_ONE’列时，表示这是一场连续比赛（即上场比赛的日期等于当前比赛的前一个日历日）。这在表
    1 中索引 8（和 14）的行中是这样的，因为亚特兰大老鹰队在 2021 年 4 月 11 日对阵犹他爵士队——在 2021 年 3 月 11 日对布鲁克林篮网队之后的一天。
- en: The Python code for returning the ‘GAME_DATE_PREV_GAME ’ column as well as flagging
    a back-to-back game for all teams is provided below.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 返回‘GAME_DATE_PREV_GAME’列以及标记所有球队的连续比赛的 Python 代码如下所示。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Step 5: Calculate win ratio for back-to-back games**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 5：计算连续比赛的胜率**'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**What’s the win ratio for back-to-back games, by team?**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**各队连续比赛的胜率是多少？**'
- en: '![](../Images/d6ae74b69a5b541f3518f457209e67b6.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6ae74b69a5b541f3518f457209e67b6.png)'
- en: 'Table 3: Win ratio of back-to-back games by team. Table by author'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3：按球队的连续比赛胜率。表格由作者提供
- en: Based on the synthetic dataset, it seems the win ratio for back-to-back games
    varied by teams. The Houston Rockets had the lowest win ratio in back-to-back
    games (12.5%), followed by the Orlando Magic (14.8%).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基于合成数据集，似乎连续比赛的胜率因球队而异。休斯顿火箭队在连续比赛中的胜率最低（12.5%），其次是奥兰多魔术队（14.8%）。
- en: '**Does it matter if the back-to-back game was played on away or home court?**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**连续比赛是在客场还是主场进行的重要吗？**'
- en: '![](../Images/247c8713dd9415b67cd5d73d4ec6d087.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/247c8713dd9415b67cd5d73d4ec6d087.png)'
- en: 'Table 4: Win ratio of back-to-back games by team and home/away. Table by author'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4：按球队和主客场的连续比赛胜率。表格由作者提供
- en: Based on the synthetic dataset, it seems for most teams in **Table 4** above,
    teams were more likely to win back-to-back game playing at home rather than away
    courts (which was a sensible observation). The Brooklyn Nets, Chicago Bulls and
    Detroit Pistons were few exceptions to this observation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 基于合成数据集，似乎在**表 4**中的大多数球队，球队在主场赢得连续比赛的可能性更大，而不是在客场（这是一个合理的观察）。布鲁克林篮网队、芝加哥公牛队和底特律活塞队是这一观察结果的少数例外。
- en: Other splits can also be calculated, such as win ratio of non back-to-back games
    vs. back-to-back games, using the Python code below. A snippet of the output suggests
    teams were more likely to win non back-to-back games (which again was a sensible
    observation, with a few exceptions).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 其他拆分也可以计算，例如使用下面的 Python 代码计算连续比赛与非连续比赛的胜率。输出的片段表明，球队更有可能赢得非连续比赛（这仍然是一个合理的观察，尽管有一些例外）。
- en: '![](../Images/145d4da05bdca80d4b8e02b43b9c0a85.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/145d4da05bdca80d4b8e02b43b9c0a85.png)'
- en: 'Table 5: Win ratio, back-to-back games vs. otherwise. Table by author'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5：连续比赛与其他比赛的胜率。表格由作者提供
- en: Other Stats
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他统计
- en: The PySpark session and associated Window Functions in **Step 4** abovecan be
    further customized to return other game stats.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤 4**中使用的 PySpark 会话及相关窗口函数可以进一步自定义，以返回其他比赛统计数据。
- en: For example, if we would like to query the win ratio (of back-to-back games
    or not) by season, simply introduce a Window by team and season ID and partition
    over it like the below.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想按赛季查询胜率（无论是连续比赛还是非连续比赛），只需按球队和赛季 ID 引入一个窗口，并像下面这样对其进行分区。
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In addition, we all know the score line for an NBA game is volatile, but exactly
    how volatile? This can be measured by the standard deviation of scores which again
    may not be available in the public domain. We can easily calibrate this by bringing
    in the score (which is available in the dataset) and applying the *avg* and *stddev*
    Window Function, which returns the standard deviation over a pre-defined window.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们都知道 NBA 比赛的得分波动性很大，但究竟有多大？这可以通过得分的标准差来衡量，而这在公共领域中可能不可用。我们可以通过引入数据集中可用的得分，并应用
    *avg* 和 *stddev* 窗口函数来轻松校准，这将返回预定义窗口上的标准差。
- en: As an example, if the standard deviation of an NBA game is circa. 20 points.
    then there’s 70% chance that the score line will be within +/- 20 points of the
    average score line of an NBA game (assuming a Normal distribution).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，如果 NBA 比赛的标准差约为 20 分，那么有 70% 的概率得分会在 NBA 比赛平均得分线的 +/- 20 分以内（假设正态分布）。
- en: Example Python code for returning this stat is provided below.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 返回该统计数据的示例 Python 代码如下所示。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*As I ride the AI/ML wave, I enjoy writing and sharing step-by-step guides
    and how-to tutorials in a comprehensive language with ready-to-run codes. If you
    would like to access all my articles (and articles from other practitioners/writers
    on Medium), you can sign up using* [*the link*](https://medium.com/@jin-cui/membership)
    *here!*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*当我乘风破浪于 AI/ML 领域时，我喜欢以通俗易懂的语言编写和分享逐步指导和操作教程，并附有可运行的代码。如果你想访问我所有的文章（以及来自其他实践者/作者在
    Medium 上的文章），你可以通过* [*这个链接*](https://medium.com/@jin-cui/membership) *进行注册！*'
