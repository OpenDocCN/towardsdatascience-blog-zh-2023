- en: The smart, flexible way to run code on Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Kubernetes上运行代码的智能灵活方式
- en: 原文：[https://towardsdatascience.com/the-smart-flexible-way-to-run-code-on-kubernetes-94d1ae6c46f3](https://towardsdatascience.com/the-smart-flexible-way-to-run-code-on-kubernetes-94d1ae6c46f3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-smart-flexible-way-to-run-code-on-kubernetes-94d1ae6c46f3](https://towardsdatascience.com/the-smart-flexible-way-to-run-code-on-kubernetes-94d1ae6c46f3)
- en: '[](https://pascaljanetzky.medium.com/?source=post_page-----94d1ae6c46f3--------------------------------)[![Pascal
    Janetzky](../Images/43d68509b63c5f9b3fc9cef3cbfc1a88.png)](https://pascaljanetzky.medium.com/?source=post_page-----94d1ae6c46f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----94d1ae6c46f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----94d1ae6c46f3--------------------------------)
    [Pascal Janetzky](https://pascaljanetzky.medium.com/?source=post_page-----94d1ae6c46f3--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pascaljanetzky.medium.com/?source=post_page-----94d1ae6c46f3--------------------------------)[![Pascal
    Janetzky](../Images/43d68509b63c5f9b3fc9cef3cbfc1a88.png)](https://pascaljanetzky.medium.com/?source=post_page-----94d1ae6c46f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----94d1ae6c46f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----94d1ae6c46f3--------------------------------)
    [Pascal Janetzky](https://pascaljanetzky.medium.com/?source=post_page-----94d1ae6c46f3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----94d1ae6c46f3--------------------------------)
    ·6 min read·Jan 23, 2023
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----94d1ae6c46f3--------------------------------)
    ·6分钟阅读·2023年1月23日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: When I was a beginner using Kubernetes, my main concern was getting code to
    run on the cluster. Thrown into a new world, I saw all these confusing YAML-Files,
    each line and indentation bringing a new meaning.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我还是一个Kubernetes初学者时，我主要关心的是如何让代码在集群上运行。被投身于一个全新的世界，我看到所有这些令人困惑的YAML文件，每一行和缩进都带来新的意义。
- en: '![](../Images/77a4045112438f4e57e21a6fb9839dc5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/77a4045112438f4e57e21a6fb9839dc5.png)'
- en: Photo by [Thais Morais](https://unsplash.com/@tata_morais?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Thais Morais](https://unsplash.com/@tata_morais?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Once I learned the fastest way to get code into the file, I quickly flooded
    it with absolute paths. You can see a truncated example below, which I call the
    *beginner’s way*. Note that this is a perfectly valid way to run code; it just
    lacks features that upcoming sections focus on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我学会了将代码最快速度放入文件中，我很快就用绝对路径填满了它。你可以看到下面的截断示例，我称之为*初学者的方式*。请注意，这是一种完全有效的运行代码的方式；只是缺乏即将到来的部分所关注的特性。
- en: 'The quick, error-prone way: Full paths to the code’s directory'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速但容易出错的方式：代码目录的完整路径
- en: Let’s dig a bit into the .yaml-File and highlight the section most relevant
    for getting code (and data) into a container. Put simply, a container is merely
    a box that contains relevant stuff. This box is used by a Pod, which we might
    think of as a virtual computer. This virtual computer helps us run the content
    of the container.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨一下.yaml文件，并重点突出最相关的部分，以便将代码（和数据）放入容器中。简单来说，容器只是一个包含相关内容的盒子。这个盒子由Pod使用，我们可以将Pod视为一个虚拟计算机。这个虚拟计算机帮助我们运行容器中的内容。
- en: (If you are more versed with containerization, you might notice that this description
    is a simplification. a) That’s right, and b) you might already know more than
    this blog article can teach you)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: （如果你对容器化更熟悉，你可能会注意到这个描述是简化的。a) 这是正确的，b) 你可能已经知道比这篇博客文章教你的更多内容）
- en: 'The section in the YAML-File relevant to this article is where we decide which
    code to run, the “*command:”* portion. That already is the place where it gets
    tricky. Consider that your local development machine uses the following fictional
    path: */local/user/path/script.py*. Let’s imagine publishing this code to the
    compute cluster and storing it under */remote/cluster/path/script.py*. As we now
    know where the script lies on the Kubernetes cluster, we can turn to the YAML-File
    and paste its path there. If we are lucky, it will work.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在YAML文件中与本文相关的部分是我们决定运行哪些代码的“*command:*”部分。这已经是个棘手的地方。假设你的本地开发机器使用以下虚构路径：*/local/user/path/script.py*。假设我们将此代码发布到计算集群并存储在*/remote/cluster/path/script.py*下。既然我们知道脚本在Kubernetes集群中的位置，我们可以转到YAML文件中并粘贴它的路径。如果运气好，它会工作。
- en: 'But probably it won’t, especially not if we are using imports from other user-defined
    python files in our *script.py*. Most likely, our code will fail with a *“ModuleNotFoundError:
    No module named ‘xyz’.”* This error occurs because when we run script.py, python
    searches at well-known places for modules to import. And if the files we would
    like to read/import from are not in these locations, our code will not run.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '但很可能不会，特别是如果我们在*script.py*中使用了来自其他用户定义的 Python 文件的导入时。我们的代码很可能会因*“ModuleNotFoundError:
    No module named ‘xyz’”*而失败。这种错误发生是因为当我们运行 script.py 时，Python 在已知的位置搜索要导入的模块。如果我们希望读取/导入的文件不在这些位置，我们的代码将无法运行。'
- en: To illustrate this, consider yourself standing in the hot sun outside, profusely
    sweating in the summer heat. Something to drink, be it tap water, would be pretty
    awesome now, you think, and go inside.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，设想你站在烈日下，夏天的热浪让你汗流浃背。你想喝点水，哪怕是自来水，现在也非常棒，于是你走进屋里。
- en: 'From the kitchen sink’s faucet, you fill a glass and eagerly drink it. It’s
    good, so you want something to drink outside, too. Because the water came from
    the faucet, you simply tear the faucet from its construction site and take it
    with you. Outside again, you then get: “WaterNotFoundError: No water.”'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '从厨房水槽的水龙头中，你倒了一杯水，急切地喝下去。水很不错，所以你也想在外面喝点东西。因为水来自水龙头，所以你简单地撕下水龙头并带着它。再次走到外面，你会发现：“WaterNotFoundError:
    No water。”'
- en: 'In this constructed example, it’s obvious why one does not magically has access
    to an unlimited water supply simply by ripping a faucet from its place. The problem
    is the same in the python example: the point we operate from does not know where
    the required files are located. In the local development environment, the needed
    code might be in the same folder as the main script. But what happens when we
    — similar to the faucet case — operate from another folder (i.e., call the python
    script from another location*) on the cluster, after pushing our code? The answer
    is *“ModuleNotFoundError: No module named ‘xyz’”*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个构造的示例中，很明显为什么仅仅撕下水龙头并不能魔法般地获得无限的水供应。问题在 Python 示例中也是一样的：我们操作的点不知道所需文件的位置。在本地开发环境中，所需的代码可能与主脚本在同一文件夹中。但当我们——类似于水龙头的情况——从集群上的另一个文件夹（即从其他位置调用
    Python 脚本*）操作时，代码会发生什么？答案是*“ModuleNotFoundError: No module named ‘xyz’”*'
- en: 'There’s a quick but dirty fix here (I am guilty of using it not that long ago):
    In all python files that import from other user-created python files, add the
    directory where these auxiliary files reside to python’s search path:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个快速但粗糙的修复方法（我之前也用过）：在所有从其他用户创建的 Python 文件中导入的 Python 文件中，将这些辅助文件所在的目录添加到
    Python 的搜索路径中：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Repeat this step for all directories, and you are done.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有目录重复这一步，你就完成了。
- en: That fix does the job, but it’s not the best way. The code is inflated; we do
    not need the additional lines in the local setup, and what if we move the auxiliary
    files altogether on the file system? We’d have to update all the hard-coded paths!
    That’s too much hassle. Luckily, there’s a better way.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个修复能解决问题，但不是最好的方法。代码膨胀；我们不需要本地设置中的额外行，如果我们把辅助文件完全移动到文件系统上呢？我们将不得不更新所有硬编码路径！这太麻烦了。幸运的是，还有更好的方法。
- en: 'The smart, flexible way: Relative paths and code included'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能且灵活的方法：相对路径和包含代码
- en: The better way to run code is by using relative paths. In the running example,
    we stored our python file on the cluster under */remote/cluster/path/script.py*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码的更好方法是使用相对路径。在运行的示例中，我们将 Python 文件存储在集群的*/remote/cluster/path/script.py*下。
- en: I’ll assume that, following good conventions, all auxiliary code (e.g., “utils.py”)
    resides in this directory or a subdirectory. With this setup in mind, there are
    two steps to a more intelligent approach, one regarding the Docker image and one
    regarding the .yaml file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我将假设，根据良好的惯例，所有辅助代码（例如，“utils.py”）都位于此目录或其子目录中。考虑到这一点，采取更智能的方法有两个步骤，一个涉及 Docker
    镜像，另一个涉及 .yaml 文件。
- en: '**The improved Docker image** Before showing the improved version, here’s a
    pretty standard Dockerfile:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**改进后的 Docker 镜像** 在展示改进版本之前，这里有一个相当标准的 Dockerfile：'
- en: 'Although this default Dockerile does the job and gets us all packages installed,
    we can further improve it by slightly altering the *internal* folder structure:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个默认的 Dockerfile 能完成工作并安装所有包，但我们可以通过稍微改变*内部*文件夹结构来进一步改进它：
- en: 'In the improved Dockerfile, we first install the required python packages and
    then store the code directly in the image. This step is crucial, and the difference
    from the previous way is huge: before, we called the python scripts from the underlying
    file system; now, we call them from **within** the Dockerfile.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在改进后的 Dockerfile 中，我们首先安装所需的 Python 包，然后将代码直接存储在镜像中。这一步非常重要，和之前的方法相比差别巨大：之前我们从底层文件系统调用
    Python 脚本；现在我们从**Dockerfile 内部**调用它们。
- en: To do that, we create a folder aptly named *code,* set it as the working directory,
    and, by running “*COPY . .*” copy all our code/data/etc. to this directory in
    the Docker image. Afterward, we grant ourselves the privilege to run the code
    from within the container.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们创建一个名为*code*的文件夹，将其设置为工作目录，并通过运行“*COPY . .*”将所有代码/数据等复制到 Docker 镜像中的此目录中。之后，我们授予自己在容器中运行代码的权限。
- en: '**The improved .yaml-File** With this setup, the improved .yaml-File can be
    constructed. Where we previously called the script’s full path, e.g., by'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**改进后的 .yaml 文件** 使用这个设置，可以构建改进后的 .yaml 文件。我们之前调用脚本的完整路径，例如，'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: we can now reduce this to
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将其简化为
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Again, the difference might seem small: after all, we’ve only removed the path
    to the script (the */remote/cluster/path* thing).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，差异可能看起来很小：毕竟，我们只是移除了脚本的路径（* /remote/cluster/path*）。
- en: But under the hood, we are now reading — and running — the python file from
    within the image. In other words, we have a portable environment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但在幕后，我们现在正在读取并运行镜像中的 Python 文件。换句话说，我们有了一个可移植的环境。
- en: '**There’s one caveat, though**: what if we push new code to the remote server,
    thereby updating our scripts? Is this change reflected in the image? No, it is
    not. The image remains as we’ve last built it.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**不过有一个警告**：如果我们将新代码推送到远程服务器，从而更新我们的脚本，这一变化会反映在镜像中吗？不会，镜像保持为我们最后构建的状态。'
- en: Two Dockerfiles for fast build times
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 两个 Dockerfile 以加快构建时间
- en: 'Luckily, there’s a simple trick for this common scenario: Maintaining two Dockerfiles.
    In this case, my routine is as follows.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，对于这种常见情况，有一个简单的技巧：维护两个 Dockerfile。在这种情况下，我的常规步骤如下。
- en: I have one main Dockerfile, aptly called *Dockerfile_base*.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我有一个主要的 Dockerfile，恰当地叫做*Dockerfile_base*。
- en: 'I first build an image with this file, which contains just enough commands
    to create a project’s foundation. For example, this might be such a starter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先用这个文件构建一个镜像，文件中包含足够的命令来创建一个项目的基础。例如，这可能是这样的一个起始点：
- en: Looking closely, you can see that I am not copying any code-related files at
    this step. Instead, I only install the pip-Packages and get some further requirements
    via apt-get. This structure is unlikely to change, so I store the resulting image
    as, e.g., *project-audio-analysis-base:0.0.1*. Note the *-base* tag in the image’s
    name.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 细看，你会发现我在这一步并没有复制任何代码相关的文件。相反，我只安装了 pip 包，并通过 apt-get 获取一些额外的需求。这个结构不太可能发生变化，所以我将生成的镜像存储为，例如，*project-audio-analysis-base:0.0.1*。注意镜像名称中的
    *-base* 标签。
- en: 2\. After constructing the base, I build a second Docker image.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 构建基础镜像后，我构建第二个 Docker 镜像。
- en: 'For this image, I pull the previously created *project-audio-analysis-base:0.0.1*.
    This new image is constructed from a separate Dockerfile, which I often call *Dockerfile_update*
    or similar. An example of its content is the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个镜像，我拉取了之前创建的*project-audio-analysis-base:0.0.1*。这个新镜像是从一个单独的 Dockerfile
    构建的，我通常称之为*Dockerfile_update*或类似名称。其内容示例如下：
- en: 'Crucially, I store the resulting image **not** at the same location as the
    previous base script — this would overwrite our clean starting point. Instead,
    I store it at a distinct location; usually, I just omit the *base tag*, like so:
    *project-audio-analysis:0.0.1*. Whenever there has been a published change in
    the code, I use the thinner *Dockerfile_update*. This approach has the benefit
    of always having a clean starting point (for cases where you’ve wrecked your code)
    and significantly reduced build times.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，我将生成的镜像**不是**存储在与之前基础脚本相同的位置——这会覆盖我们干净的起点。相反，我将其存储在一个不同的位置；通常，我只是省略 *base
    tag*，如：*project-audio-analysis:0.0.1*。每当代码有已发布的更改时，我使用较薄的 *Dockerfile_update*。这种方法的好处是始终有一个干净的起点（对于你破坏了代码的情况）并显著减少构建时间。
- en: If we were to install all the packages all over every time we would create a
    new Docker image, we would have to wait every single time. That’s unnecessary.
    Simply store a fixed foundation with all these packages pre-installed and build
    upon this image.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们每次创建新的 Docker 镜像时都重新安装所有软件包，我们每次都需要等待。这是不必要的。只需存储一个已预装所有这些软件包的固定基础，并在此基础上构建镜像即可。
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Beginning to work with Kubernetes, one is often confronted with these huge,
    complicated YAML-Files. Understandably, one is pretty relieved once the code runs
    as intended. However, a mistake — or flawed design decision — is to use absolute
    paths and run the code from the file system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Kubernetes 时，常常会遇到这些巨大的、复杂的 YAML 文件。可以理解的是，一旦代码按预期运行，人们会感到相当释然。然而，一个错误——或错误的设计决策——是使用绝对路径并从文件系统中运行代码。
- en: 'To alleviate this, I presented a better, cleaner, and more portable way of
    running code within a Kubernetes cluster. It consists of two parts: First, including
    code within the image, and second, maintaining a base and an updated Dockerfile.
    Armed with these tools, one can produce improved images quickly.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解这个问题，我提出了一种更好、更清洁、更便携的在 Kubernetes 集群中运行代码的方法。它包括两个部分：首先，将代码包含在镜像内，其次，维护一个基础和更新的
    Dockerfile。拥有这些工具后，可以快速生成改进的镜像。
- en: '* Calling a python script from another location: Usually, we use the command
    line to change into the folder where the python script sits and then execute *python
    script.py*. However, when in another folder, we can also run *python /path/to/script.py*.
    In this case, the problems illustrated in the blog post arise.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* 从另一个位置调用 Python 脚本：通常，我们使用命令行进入 Python 脚本所在的文件夹，然后执行 *python script.py*。但是，当在另一个文件夹中时，我们也可以运行
    *python /path/to/script.py*。在这种情况下，博客文章中描述的问题会出现。'
