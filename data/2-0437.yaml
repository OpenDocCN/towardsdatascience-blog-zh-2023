- en: 'Help Start-Up Founders Find the Best Incubators: an end-to-end project.'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助初创公司创始人找到最佳孵化器：一个端到端的项目。
- en: 原文：[https://towardsdatascience.com/building-a-matching-tool-to-help-start-up-founders-find-the-best-incubators-an-end-to-end-bd65c41175bd](https://towardsdatascience.com/building-a-matching-tool-to-help-start-up-founders-find-the-best-incubators-an-end-to-end-bd65c41175bd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-a-matching-tool-to-help-start-up-founders-find-the-best-incubators-an-end-to-end-bd65c41175bd](https://towardsdatascience.com/building-a-matching-tool-to-help-start-up-founders-find-the-best-incubators-an-end-to-end-bd65c41175bd)
- en: A freelance project walkthrough to propose the best incubators for start-up
    founders, using Python, Pinecone, FastAPI, Pydantic, and Docker
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个自由职业项目的演示，使用 Python、Pinecone、FastAPI、Pydantic 和 Docker 提出最佳孵化器的建议
- en: '[](https://medium.com/@jeremyarancio?source=post_page-----bd65c41175bd--------------------------------)[![Jeremy
    Arancio](../Images/37c4c41e71eb91cfffc7e4ff2bb4394a.png)](https://medium.com/@jeremyarancio?source=post_page-----bd65c41175bd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd65c41175bd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd65c41175bd--------------------------------)
    [Jeremy Arancio](https://medium.com/@jeremyarancio?source=post_page-----bd65c41175bd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jeremyarancio?source=post_page-----bd65c41175bd--------------------------------)[![Jeremy
    Arancio](../Images/37c4c41e71eb91cfffc7e4ff2bb4394a.png)](https://medium.com/@jeremyarancio?source=post_page-----bd65c41175bd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd65c41175bd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd65c41175bd--------------------------------)
    [Jeremy Arancio](https://medium.com/@jeremyarancio?source=post_page-----bd65c41175bd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd65c41175bd--------------------------------)
    ·15 min read·Nov 26, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd65c41175bd--------------------------------)
    ·15 min 阅读·2023年11月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[Harness](https://www.joinharness.com/), a startup dedicated to assisting founders
    in their entrepreneurial journey, approached me to develop a tool that aids their
    community in finding the most suitable incubators: **the Matching Tool.**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Harness](https://www.joinharness.com/)，一个致力于帮助创始人创业的初创公司，找到我开发了一个帮助其社区找到最合适孵化器的工具：**匹配工具**。'
- en: In this article, we walk through the different stages of this project, from
    the solution design to the delivery.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将介绍这个项目的不同阶段，从解决方案设计到交付。
- en: '![](../Images/2488d4d84449aeb3c7adad531d8346bf.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2488d4d84449aeb3c7adad531d8346bf.png)'
- en: Photo by [Rames Quinerie](https://unsplash.com/@ramesquinerie?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Rames Quinerie](https://unsplash.com/@ramesquinerie?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 上的照片'
- en: Context
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: The company and its cofounders would like to create a tool that enables their
    community of start-up founders to find the best incubators & accelerators around
    the globe.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该公司及其联合创始人希望创建一个工具，使他们的初创公司创始人社区能够找到全球最佳的孵化器和加速器。
- en: To do so, they manually collected data from incubator websites, including details
    such as location, various requirements, funding opportunities, and more. Additionally,
    they leveraged an engaged community of founders.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，他们手动从孵化器网站收集数据，包括位置、各种要求、资金机会等详细信息。此外，他们还利用了一个活跃的创始人社区。
- en: With the data from incubators and their community, they needed to find a way
    to retrieve the **top-k incubators** based on start-up information.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 利用孵化器和其社区的数据，他们需要找到一种方法来检索基于初创公司信息的**前k名孵化器**。
- en: Challenge accepted.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战接受。
- en: Solution design
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案设计
- en: Overview
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: At first glance, the project looked like a Recommender system like Netflix or
    Amazon used to suggest the best series or products to their users. From user behavior
    such as clicks, reviews, or upvotes, a company can anticipate and recommend the
    most suitable product.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这个项目看起来像是一个推荐系统，比如 Netflix 或 Amazon 用于向用户推荐最佳的系列或产品。通过用户行为，如点击、评论或点赞，公司可以预测并推荐最合适的产品。
- en: Yet, in this particular scenario, we lacked any prior data on a founder’s preferences.
    Thus, building a Recommender System was unfeasible in this case.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种特定情况下，我们缺乏关于创始人偏好的任何先前数据。因此，在这种情况下构建推荐系统是不可行的。
- en: An alternative approach could have involved **embedding** incubator and startup
    data into a vector space for a *similarity search*. Put simply, this method entails
    measuring the distance between vectors to identify the closest incubators in proximity
    to a given startup.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法可以涉及将**孵化器**和初创企业数据嵌入到向量空间中进行*相似性搜索*。简而言之，这种方法涉及测量向量之间的距离，以确定最接近给定初创企业的孵化器。
- en: But this approach had many defaults in this case.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种方法在这种情况下有很多缺陷。
- en: Incubators have what I call *hard criteria*, factors that could result in immediate
    rejection for any startup that doesn’t meet the requirements. This might include
    not being located in the same city if the incubator requires a hybrid or in-person
    attendance or the absence of funding.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 孵化器具有我所称的*硬标准*，这些因素可能导致任何不符合要求的初创企业被立即拒绝。这可能包括如果孵化器要求混合或面对面的出席，位置不在同一城市，或缺乏资金。
- en: Those *hard criteria* would have made the usage of *embeddings*, the vectorial
    representation of the data, not a good approach in this case. For example, an
    incubator could match entirely a start-up, but if applications are not open, this
    incubator shouldn’t be recommended to the founder.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那些*硬标准*会使*嵌入*（数据的向量表示）在这种情况下不是一个好的方法。例如，一个孵化器可能完全匹配一个初创企业，但如果申请未开放，则不应向创始人推荐这个孵化器。
- en: The presence of these *hard criteria* makes the use of embeddings on the entire
    dataset unsuitable in this case. For instance, even if an incubator perfectly
    aligns with a startup, recommending it to the founder would not be appropriate
    if applications are not currently open.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些*硬标准*的存在使得在整个数据集上使用嵌入不适合这种情况。例如，即使一个孵化器与初创企业完美对接，如果当前没有开放申请，也不适合向创始人推荐。
- en: 'Finally, even if the majority of features could be transformed into numerical
    values (*funding amount, previous funding amount accepted, start-up revenue expectation*)
    or into categories (*countries, attendance requirement, MVP ready*), some features
    were just impossible to categorize due to their diversity:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即使大多数特征可以转化为数值（*融资金额，接受的前期融资金额，初创企业收入预期*）或分类（*国家，出席要求，MVP 准备好*），某些特征由于其多样性却无法分类：
- en: '***funding vehicle:*** *grant, 140k$, equity (SAFE), …*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***融资工具：*** *赠款，140k$，股权（SAFE），…*'
- en: '***industry focus:*** *medtech, AI, fintech, …*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***行业重点：*** *医疗科技，人工智能，金融科技，…*'
- en: Additionally, these features had to be taken into account in the matching tool
    but might not have been deemed as *hard criteria*. For instance, a founder might
    choose an incubator specializing in *health tech* and still be open to accepting
    a *biotech* startup.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些特征必须在匹配工具中考虑，但可能不会被视为*硬标准*。例如，创始人可能会选择一个专注于*健康科技*的孵化器，并且仍然愿意接受一个*生物技术*初创企业。
- en: A hybrid approach
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合方法
- en: To solve these problems, let’s consider the best of both worlds.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，我们来考虑最佳的两全其美的方案。
- en: If some incubator’s *hard* *criteria* would result in a mismatch, a possibility
    would be to *filter* those incubators based on the start-up information. After
    narrowing down the list of potential matches, we can perform a *similarity search*
    using the remaining *soft criteria* transformed into a unified text and embedding
    it into a vector.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些孵化器的*硬* *标准*会导致不匹配，可以考虑根据初创企业的信息*筛选*这些孵化器。经过缩小潜在匹配的列表后，我们可以使用剩余的*软标准*进行*相似性搜索*，将其转化为统一的文本并嵌入到向量中。
- en: 'And good news: **Pinecone** provides this feature to its vector database!'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是：**Pinecone** 向其向量数据库提供了这一功能！
- en: '[](https://www.pinecone.io/learn/vector-search-filtering/?source=post_page-----bd65c41175bd--------------------------------)
    [## The Missing WHERE Clause in Vector Search | Pinecone'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.pinecone.io/learn/vector-search-filtering/?source=post_page-----bd65c41175bd--------------------------------)
    [## 向量搜索中的缺失 WHERE 子句 | Pinecone]'
- en: Vector similarity search makes massive datasets searchable in fractions of a
    second. Yet despite the brilliance and…
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向量相似性搜索使得庞大的数据集可以在几分之一秒内进行检索。然而，尽管其卓越的表现和…
- en: www.pinecone.io](https://www.pinecone.io/learn/vector-search-filtering/?source=post_page-----bd65c41175bd--------------------------------)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: www.pinecone.io](https://www.pinecone.io/learn/vector-search-filtering/?source=post_page-----bd65c41175bd--------------------------------)
- en: 'The project path is now clear:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 项目路径现在已经明确：
- en: Incubators’ data need to be **preprocessed** to enable **filtering** with the
    *hard criteria* and **similarity search** with the *soft criteria.* The data is
    then stored on a Pinecone vector database.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 孵化器的数据需要**预处理**以便**过滤***硬标准*和**相似性搜索***软标准*。然后将数据存储在 Pinecone 向量数据库中。
- en: The *filter object* has to be built with respect to the Pinecone Python library.
    Also, it needs to stay **flexible** enough to let the client modify easily the
    criteria without modifying the algorithm.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*过滤对象*必须根据 Pinecone Python 库构建。此外，它还需要保持**灵活**，以便客户可以轻松修改标准而无需修改算法。'
- en: The *soft criteria* need to be unified and transform an embedding format, using
    an appropriate *embedding model.*
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*软标准*需要统一，并转换为嵌入格式，使用适当的*嵌入模型*。'
- en: Data being key here, we need to implement a Data validation step for the start-up
    information but also for *upserting* new incubator data to the vector database.
    We’ll use [**Pydantic**](https://docs.pydantic.dev/latest/).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据是关键，我们需要为启动信息实现数据验证步骤，也需要为*upserting*新的孵化器数据到向量数据库中进行验证。我们将使用[**Pydantic**](https://docs.pydantic.dev/latest/)。
- en: The algorithm will be served as an **API** in a **docker container**. We’ll
    use FastAPI and create a Dockerfile to ensure the code works no matter the environment.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该算法将作为**API**在**docker 容器**中提供。我们将使用 FastAPI 并创建一个 Dockerfile，以确保代码在任何环境下都能正常工作。
- en: '*Bonus*: **Unitests** and **Integration tests** will be set up to enable anyone
    to modify the code in a CI/CD manner.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*额外说明*：**单元测试**和**集成测试**将被设置，以便任何人可以以 CI/CD 方式修改代码。'
- en: All these points were discussed with the stakeholders and were accepted.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些点都与利益相关者讨论过并被接受了。
- en: We’re ready to go!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备出发了！
- en: '**Preprocessing the data**'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**数据预处理**'
- en: 'I received the incubators'' parsed information in a spreadsheet. At first sight,
    the data is quite chaotic: *manual extraction without a clear process, string
    instead of boolean, lack of consistency within the same feature, …*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我收到了孵化器的解析信息在一个电子表格中。乍一看，数据相当混乱：*手动提取没有明确的过程，字符串而不是布尔值，同一特征内的一致性缺乏，……*
- en: There is a lot of work to make the data usable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 需要做大量的工作来使数据可用。
- en: '![](../Images/9d5f5a7fd0af5d42c3e37054d0823421.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d5f5a7fd0af5d42c3e37054d0823421.png)'
- en: Different dates “format” for the same feature
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 相同特征的不同日期“格式”
- en: Regarding *null* values in the dataset, each feature was treated independently.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据集中*空值*，每个特征都是独立处理的。
- en: For example, *attendance requirements* could be *in-person, hybrid,* or *remote.*
    In this case, incubators for which this feature was missing were considered as
    requiring *in-person* attendance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*出勤要求*可能是*面对面、混合*或*远程*。在这种情况下，缺少此特征的孵化器被认为是要求*面对面*出勤。
- en: 'Another example was the *incorporation* of the start-up: *incorporated* or
    *unincorporated.* Instead of picking those 2 categories, it would be more logical
    to add a third category as a default value: *regardless*. This will be useful
    during the filtering stage to not only pick one of the main categories but also
    pick all the incubators that don’t precise it. We’ll talk about it in the **Filtering**
    section.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是启动公司的*注册*：*注册*或*未注册*。与其选择这两个类别中的一个，不如添加第三个类别作为默认值：*无论如何*。这将在过滤阶段有用，不仅选择主要类别之一，还选择所有未明确说明的孵化器。我们将在**过滤**部分讨论这个问题。
- en: Finally, we transform the *soft criteria* into a single prompt to be embedded.
    For this, we simply used a prompt template. If later in the project new features
    need to be added, this prompt just needs to be updated.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们将*软标准*转化为一个单一的提示以嵌入。为此，我们简单地使用了一个提示模板。如果在项目后期需要添加新特性，只需更新该提示即可。
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the incubator data was preprocessed, it was then exported to the **Pinecone
    vector database**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦孵化器数据经过预处理，就会导出到**Pinecone 向量数据库**中。
- en: Build the vector database with incubator data
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用孵化器数据构建向量数据库
- en: Pinecone provides an easy-to-use Python SDK to insert, modify, and query data
    from the vector database.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Pinecone 提供了一个易于使用的 Python SDK，用于插入、修改和查询向量数据库中的数据。
- en: In our case, we need to *upsert* (insert or update) a vector representing the
    *soft criteria* in addition to the *hard criteria*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们需要*upsert*（插入或更新）一个表示*软标准*的向量，此外还有*硬标准*。
- en: 'According to Pinecone, the data should respect the following format:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Pinecone，数据应遵循以下格式：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Embedding
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入
- en: 'There are many models, open-source or not, to embed texts into a vectorial
    representation. In this case, we’ll use [**sentence-bert**](https://www.sbert.net/),
    a Python library designed to exploit open-source embedding models. You can check
    one of my previous articles where I describe how it works:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多模型，无论是开源的还是非开源的，可以将文本嵌入到向量表示中。在这种情况下，我们将使用[**sentence-bert**](https://www.sbert.net/)，一个旨在利用开源嵌入模型的Python库。你可以查看我之前的文章，其中描述了它的工作原理：
- en: '[](https://medium.com/@jeremyarancio/semantic-search-using-sequence-bert-2116dabecfa3?source=post_page-----bd65c41175bd--------------------------------)
    [## Semantic search using Sentence-BERT'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jeremyarancio/semantic-search-using-sequence-bert-2116dabecfa3?source=post_page-----bd65c41175bd--------------------------------)
    [## 使用Sentence-BERT进行语义搜索'
- en: With the latest trends in AI pushed by Large Language Models and the success
    of ChatGPT (OpenAI), businesses have been…
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随着大型语言模型推动的AI最新趋势和ChatGPT（OpenAI）的成功，企业已经…
- en: medium.com](https://medium.com/@jeremyarancio/semantic-search-using-sequence-bert-2116dabecfa3?source=post_page-----bd65c41175bd--------------------------------)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@jeremyarancio/semantic-search-using-sequence-bert-2116dabecfa3?source=post_page-----bd65c41175bd--------------------------------)
- en: The simplicity of this library makes it a good choice for building the first
    version of the matching tool.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库的简洁性使其成为构建第一个匹配工具版本的良好选择。
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Prepare and export the incubator data.
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备并导出孵化器数据。
- en: To upsert new incubators into the vector database, we prepare the data as introduced
    in the Pinecone documentation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新的孵化器数据插入到向量数据库中，我们按照Pinecone文档中介绍的方式准备数据。
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see in the code, we created an `Incubators` object with Pydantic
    `BaseModel` .
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在代码中看到的，我们使用Pydantic的`BaseModel`创建了一个`Incubators`对象。
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This `BaseModel` class has two main benefits. Not only does it ensure the data
    is in the correct format for our algorithm and queries, but it also defines a
    default schema for the incubator data.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`BaseModel`类有两个主要好处。它不仅确保数据符合我们算法和查询的正确格式，而且还定义了孵化器数据的默认模式。
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The incubator data was then exported to the vector database using the Pinecone
    Python library. To allow other developers to implement this code within the overall
    architecture of the application, we used FastAPI:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 孵化器数据随后使用Pinecone Python库导出到向量数据库。为了让其他开发人员能够在应用程序的整体架构中实现这段代码，我们使用了FastAPI：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once the data was exported, we were able to start querying the vector database
    using the start-up information.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 数据导出后，我们能够开始使用初创公司信息查询向量数据库。
- en: Build the matching algorithm
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建匹配算法
- en: 'The algorithm executes the top-k incubators retrieving in two steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法在两个步骤中执行top-k孵化器的检索：
- en: Filter the irrelevant incubator,
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过滤掉不相关的孵化器，
- en: Perform the similarity search with the embedding vectors.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用嵌入向量执行相似性搜索。
- en: We also need to ensure that the algorithm stays flexible enough to add or change
    any data later in the project without touching the core of the algorithm.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保算法足够灵活，以便在项目后期添加或更改任何数据而不触及算法的核心。
- en: But how to do it?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何做到这一点呢？
- en: 'Here’s the solution I came up with:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我想到的解决方案：
- en: 'Pinecone uses the same language as MongoDB to filter the database [[source](https://docs.pinecone.io/docs/metadata-filtering#inserting-metadata-into-an-index)].
    It looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Pinecone使用与MongoDB相同的语言来过滤数据库[[source](https://docs.pinecone.io/docs/metadata-filtering#inserting-metadata-into-an-index)]。它看起来是这样的：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The filter map can also be more elaborate:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤映射也可以更为复杂：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By implementing the start-up information in the query, we were able to retrieve
    the incubator whose requirements match: `$gte` — *greater than,* `$eq` — *equal,*
    etc *…*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在查询中实现初创公司信息，我们能够检索出符合要求的孵化器：`$gte` — *大于，* `$eq` — *等于，* 等等*…*
- en: But some cases were more complex.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但有些情况更为复杂。
- en: For example, the *location* and *attendance requirements* work in pairs. If
    an incubator accepts only *hybrid* or *in-person,* the start-up should logically
    be located in the same city/country as the incubator. But the matching tool should
    also present all incubators that accept *remote*, no matter where the start-up
    is located.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*位置*和*出席要求*是配对使用的。如果一个孵化器只接受*混合*或*面对面*，那么初创公司逻辑上应该位于与孵化器相同的城市/国家。但匹配工具也应该展示所有接受*远程*的孵化器，无论初创公司位于何处。
- en: 'Another example: let’s say the start-up is led by *women founders*, or the
    start-up has built an *MVP*. Thus, start-ups with this statement True should be
    proposed incubators that accept women founders only, or that require an MVP, in
    addition to including all other incubators.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例：假设初创公司由 *女性创始人* 领导，或者初创公司已经构建了 *MVP*。因此，具有此陈述为真的初创公司应被提议孵化器，该孵化器仅接受女性创始人，或要求
    MVP，此外还包括所有其他孵化器。
- en: As you can see from these examples, criteria can be categorized into different
    “*templates”* called `Criterion`. These criteria templates will serve the building
    of the `filter_object` , which is the filter mapping used by Pinecone/MongoDB.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这些示例所示，标准可以分为不同的“*模板*”称为 `Criterion`。这些标准模板将用于构建 `filter_object`，这是 Pinecone/MongoDB
    使用的过滤映射。
- en: 'Using Python classes, it looks like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 类，它看起来是这样的：
- en: '[PRE9]python'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]python'
- en: 'criterion.name = {criterion.condition_type: payload[criterion.startup_correspondance]}'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criterion.name = {criterion.condition_type: payload[criterion.startup_correspondance]}'
- en: '[PRE10]python'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE10]python'
- en: 'max_funding_amount = {$gte: 10000}'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'max_funding_amount = {$gte: 10000}'
- en: '[PRE11]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The parent class object `Criterion` is used to build several sub-classes, representing
    each case. If we take the *woman founders/MVP* case introduced above:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 父类对象 `Criterion` 用于构建多个子类，表示每种情况。如果我们以上面介绍的 *女性创始人/MVP* 情况为例：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'if woman_founders_startup (False) != condition (True):'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if woman_founders_startup (False) != condition (True):'
- en: '{"woman_founders_incubator": {"$eq": woman_founders_startup_value (false)}}'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{"woman_founders_incubator": {"$eq": woman_founders_startup_value (false)}}'
- en: 'Args:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数：
- en: 'condition_type (str): comparison element like "$eq" (equal), "$lte" (lower
    than or equal), "$gt" (greater than)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'condition_type (str): 比较元素，如 "$eq"（等于），"$lte"（小于或等于），"$gt"（大于）'
- en: The complete list is available on the pinecone documentaton (https://docs.pinecone.io/docs/metadata-filtering#metadata-query-language).
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完整列表可在 pinecone 文档中找到 (https://docs.pinecone.io/docs/metadata-filtering#metadata-query-language)。
- en: 'startup_correspondance (str): start-up correspondance from the payload (see
    matching_tool/app/models.py)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'startup_correspondance (str): 从 payload 中的初创公司对应（见 matching_tool/app/models.py）'
- en: 'condition (bool): if condition validated, consider the criterion'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'condition (bool): 如果条件得到验证，考虑标准'
- en: '"""'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: def __init__(
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: def __init__(
- en: self,
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self,
- en: 'name: str,'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: str,'
- en: 'condition_type: str,'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'condition_type: str,'
- en: 'startup_correspondance: str,'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'startup_correspondance: str,'
- en: 'condition: bool'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'condition: bool'
- en: ') -> None:'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ') -> None:'
- en: self.condition_type = condition_type
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.condition_type = condition_type
- en: self.startup_correspondance = startup_correspondance
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.startup_correspondance = startup_correspondance
- en: self.condition = condition
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.condition = condition
- en: super().__init__(name)
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: super().__init__(name)
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: def normal_case(
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: def normal_case(
- en: 'payload: Mapping,'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'payload: Mapping,'
- en: 'criterion: NormalCriterion,'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criterion: NormalCriterion,'
- en: 'filter_object: Dict'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filter_object: Dict'
- en: ') -> Dict:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ') -> Dict:'
- en: '"""Simplest case: take the start-up value (funding amount, previous funding,
    etc...) and filter the vectordatabase in respect of'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""最简单的情况：取启动值（资金额，之前的资助等）并在 vectordatabase 中按此过滤'
- en: the condition_type ($eq, $lte, $gte, $gt, ...)
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition_type（$eq, $lte, $gte, $gt, ...）
- en: 'Args:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数：
- en: 'payload (Mapping): start-up information'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'payload (Mapping): 启动信息'
- en: 'criterion (NormalCriterion): normal criterion'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criterion (NormalCriterion): 普通标准'
- en: 'filter_object (Dict): the metadata filter during the vectordatabase query'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filter_object (Dict): 在 vectordatabase 查询期间的元数据过滤器'
- en: 'Returns:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回：
- en: 'Dict:'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Dict:'
- en: '[PRE14]'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"""'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: filter_object[criterion.name] = {
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object[criterion.name] = {
- en: 'criterion.condition_type: payload[criterion.startup_correspondance]'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criterion.condition_type: payload[criterion.startup_correspondance]'
- en: '}'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: return filter_object
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return filter_object
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: def inclusive_case(
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: def inclusive_case(
- en: 'payload: Mapping,'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'payload: Mapping,'
- en: 'criterion: InclusiveCriterion,'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criterion: InclusiveCriterion,'
- en: 'filter_object: Dict'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filter_object: Dict'
- en: ') -> Dict:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ') -> Dict:'
- en: '"""Inclusive case: prepare filter for inclusive case: women founder, student
    founders, MVP, other costs...'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""包容性案例：为包容性案例准备过滤器：女性创始人，学生创始人，MVP，其他费用...'
- en: If condition respected (women founders in startup == 1), therefore don't consider
    the criterion for filter => Take everything (incubators acccepting women only
    and all the others)
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果条件满足（初创公司中的女性创始人 == 1），因此不要考虑过滤标准 => 获取所有（仅接受女性的孵化器和其他所有孵化器）
- en: 'Else: consider only incubators with not women founders => {women_founders:
    {"$eq: 0}}'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '否则：只考虑没有女性创始人的孵化器 => {women_founders: {"$eq: 0}}'
- en: 'Args:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数：
- en: 'payload (Mapping): start-up information'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'payload (Mapping): 启动信息'
- en: 'criterion (NormalCriterion): normal criterion'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criterion (NormalCriterion): 普通标准'
- en: 'filter_object (Dict): the metadata filter during the vectordatabase query'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filter_object (Dict): 在 vectordatabase 查询期间的元数据过滤器'
- en: '"""'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: 'if payload[criterion.startup_correspondance] != criterion.condition:'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if payload[criterion.startup_correspondance] != criterion.condition:'
- en: 'filter_object[criterion.name] = {criterion.condition_type: payload[criterion.startup_correspondance]}'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filter_object[criterion.name] = {criterion.condition_type: payload[criterion.startup_correspondance]}'
- en: return filter_object
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return filter_object
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'class Criteria:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Criteria:'
- en: '"""Filter using Criterion templates.'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""使用 Criterion 模板进行过滤。'
- en: Add or remove any criterion you want with the adequate Criterion template.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用适当的 Criterion 模板添加或删除任何条件。
- en: '"""'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: country = DependendantCriterion(
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: country = DependendantCriterion(
- en: name="country",
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: name="country",
- en: condition_type="$eq",
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition_type="$eq",
- en: startup_correspondance="country"
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: startup_correspondance="country"
- en: )
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: city = DependendantCriterion(
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: city = DependendantCriterion(
- en: name="city",
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: name="city",
- en: condition_type="$eq",
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition_type="$eq",
- en: startup_correspondance="city"
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: startup_correspondance="city"
- en: )
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: attendance_requirement = ConditionalCriterion(
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: attendance_requirement = ConditionalCriterion(
- en: name="attendance_requirement",
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: name="attendance_requirement",
- en: condition=["remote"],
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition=["remote"],
- en: true_criteria=[],
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: true_criteria=[],
- en: else_criteria=[country, city]
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: else_criteria=[country, city]
- en: )
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: minimum_cofounders = NormalCriterion(
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: minimum_cofounders = NormalCriterion(
- en: name="minimum_cofounders",
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: name="minimum_cofounders",
- en: condition_type="$lte",
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition_type="$lte",
- en: startup_correspondance="n_cofounders"
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: startup_correspondance="n_cofounders"
- en: )
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: working_product_requirement = InclusiveCriterion(
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: working_product_requirement = InclusiveCriterion(
- en: name="working_product_requirement",
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: name="working_product_requirement",
- en: condition_type="$eq",
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition_type="$eq",
- en: startup_correspondance="working_product",
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: startup_correspondance="working_product",
- en: condition=True
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition=True
- en: )
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: woman_founders = InclusiveCriterion(
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: woman_founders = InclusiveCriterion(
- en: name="woman_founders",
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: name="woman_founders",
- en: condition_type="$eq",
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition_type="$eq",
- en: startup_correspondance="woman_founders",
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: startup_correspondance="woman_founders",
- en: condition=True
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: condition=True
- en: )
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '...'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE17]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'class Matcher:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Matcher:'
- en: '"Retrieve incubators that match a start-up information from the vector database."'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"从向量数据库中检索与初创公司信息匹配的孵化器。"'
- en: def __init__(
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: def __init__(
- en: self,
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self,
- en: 'index: Index,'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'index: Index,'
- en: 'criteria: Criteria = Criteria(),'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criteria: Criteria = Criteria(),'
- en: 'embedder: Embedding = SentenceTransformersEmbedding(),'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'embedder: Embedding = SentenceTransformersEmbedding(),'
- en: ') -> None:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ') -> None:'
- en: '"""'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: 'Args:'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参数:'
- en: 'index (Index): vector database index / table'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'index (Index): 向量数据库索引 / 表'
- en: 'criteria (Criteria, optional): Incubators metadata to perform the search. Defaults
    to Criteria().'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'criteria (Criteria, optional): 孵化器元数据以进行搜索。默认为 Criteria()。'
- en: 'embedder (Embedding, optional): Embedding method to transform text in a vectorial
    representation for'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'embedder (Embedding, optional): 嵌入方法，用于将文本转换为向量表示'
- en: semantic search. Defaults to SentenceTransformersEmbedding().
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语义搜索。默认为 SentenceTransformersEmbedding()。
- en: '"""'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: self.index = index
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.index = index
- en: self.criteria = criteria
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.criteria = criteria
- en: self.embedder = embedder
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.embedder = embedder
- en: def _get_filter(
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: def _get_filter(
- en: self,
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self,
- en: 'payload: Dict[str, Any],'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'payload: Dict[str, Any],'
- en: ') -> Mapping[str, Any]:'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ') -> Mapping[str, Any]:'
- en: '"""Build the dictionnary for filtering metadata on Pinecone.'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""构建用于在 Pinecone 上过滤元数据的字典。'
- en: 'The filter objecy should respect the following format. Check the official Pinecone
    documentation to know more about it:'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过滤对象应遵循以下格式。有关更多信息，请查看官方 Pinecone 文档：
- en: https://docs.pinecone.io/docs/metadata-filtering
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: https://docs.pinecone.io/docs/metadata-filtering
- en: 'Args:'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参数:'
- en: 'payload (Dict[str, Any]): start-up information'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'payload (Dict[str, Any]): 初创公司信息'
- en: 'Returns:'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '返回:'
- en: 'Mapping[str, Any]: filter object'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Mapping[str, Any]: 过滤对象'
- en: '[PRE18]'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"""'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: '# Initial filter'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '# 初始过滤器'
- en: 'filter_object = {"application_open": 1}'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filter_object = {"application_open": 1}'
- en: criteria = self.criteria.get_criteria()
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: criteria = self.criteria.get_criteria()
- en: 'for criterion in criteria:'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for criterion in criteria:'
- en: 'if isinstance(criterion, NormalCriterion):'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if isinstance(criterion, NormalCriterion):'
- en: 'if check_correspondance_in_payload(payload, criterion):'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if check_correspondance_in_payload(payload, criterion):'
- en: filter_object = normal_case(
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object = normal_case(
- en: payload=payload,
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: payload=payload,
- en: criterion=criterion,
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: criterion=criterion,
- en: filter_object=filter_object,
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object=filter_object,
- en: )
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: 'if isinstance(criterion, InclusiveCriterion):'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if isinstance(criterion, InclusiveCriterion):'
- en: 'if check_correspondance_in_payload(payload, criterion):'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if check_correspondance_in_payload(payload, criterion):'
- en: filter_object = inclusive_case(
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object = inclusive_case(
- en: payload=payload,
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: payload=payload,
- en: criterion=criterion,
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: criterion=criterion,
- en: filter_object=filter_object,
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object=filter_object,
- en: )
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: 'if isinstance(criterion, ConditionalCriterion):'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if isinstance(criterion, ConditionalCriterion):'
- en: 'if check_dependencies(payload, conditional_criterion=criterion):'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if check_dependencies(payload, conditional_criterion=criterion):'
- en: filter_object = conditional_case(
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object = conditional_case(
- en: payload=payload,
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: payload=payload,
- en: criterion=criterion,
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: criterion=criterion,
- en: filter_object=filter_object,
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object=filter_object,
- en: )
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: 'if isinstance(criterion, DefaultCriterion):'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if isinstance(criterion, DefaultCriterion):'
- en: 'if check_correspondance_in_payload(payload, criterion):'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if check_correspondance_in_payload(payload, criterion):'
- en: filter_object = default_case(
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object = default_case(
- en: payload=payload,
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: payload=payload,
- en: criterion=criterion,
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: criterion=criterion,
- en: filter_object=filter_object,
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter_object=filter_object,
- en: )
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: return filter_object
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return filter_object
- en: '[PRE19]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: matches = self.index.query(
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: matches = self.index.query(
- en: vector=embedding,
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: vector=embedding,
- en: filter=filter_object,
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: filter=filter_object,
- en: include_metadata=True,
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: include_metadata=True,
- en: top_k=top_k
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: top_k=top_k
- en: )
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE20]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '@app.post("/match")'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.post("/match")'
- en: 'def search(payload: StartUp, top_k: int = 5) -> Mapping:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 'def search(payload: StartUp, top_k: int = 5) -> Mapping:'
- en: LOGGER.info("Start matching.")
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LOGGER.info("开始匹配。")
- en: 'try:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'try:'
- en: payload = preprocess_payload(dict(payload))
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: payload = preprocess_payload(dict(payload))
- en: pinecone.init(api_key=PINECONE_API_KEY, environment=ENVIRONMENT)
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pinecone.init(api_key=PINECONE_API_KEY, environment=ENVIRONMENT)
- en: index = pinecone.Index(index_name=VectorDatabaseConfig.index_name)
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: index = pinecone.Index(index_name=VectorDatabaseConfig.index_name)
- en: matching_tool = Matcher(index=index)
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: matching_tool = Matcher(index=index)
- en: matches = matching_tool.match(payload=payload, top_k=top_k)
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: matches = matching_tool.match(payload=payload, top_k=top_k)
- en: return matches
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return matches
- en: 'except Exception as e:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'except Exception as e:'
- en: LOGGER.error(f"{str(e)}")
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: LOGGER.error(f"{str(e)}")
- en: raise HTTPException(status_code=500, detail=str(e))
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: raise HTTPException(status_code=500, detail=str(e))
- en: '[PRE21]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'class StartUp(BaseModel):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 'class StartUp(BaseModel):'
- en: 'country: Optional[str] = None'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'country: Optional[str] = None'
- en: 'city: Optional[str] = None'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'city: Optional[str] = None'
- en: 'funding_amount: Optional[int] = None'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'funding_amount: Optional[int] = None'
- en: 'n_cofounders: Optional[int] = None'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'n_cofounders: Optional[int] = None'
- en: 'n_employees: Optional[int] = None'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'n_employees: Optional[int] = None'
- en: 'woman_founders: Optional[bool] = None'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'woman_founders: Optional[bool] = None'
- en: 'industry_focus: str = ""'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'industry_focus: str = ""'
- en: 'funding_vehicle: str = ""'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'funding_vehicle: str = ""'
- en: '...'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE22]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: integration_test.py
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: integration_test.py
- en: pip install httpx
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pip install httpx
- en: from fastapi.testclient import TestClient
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: from fastapi.testclient import TestClient
- en: URL = "/match"
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: URL = "/match"
- en: client = TestClient(app)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: client = TestClient(app)
- en: DATA_PATH = Path(os.path.realpath(__file__)).parent / "data/integration_test_data.json"
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: DATA_PATH = Path(os.path.realpath(__file__)).parent / "data/integration_test_data.json"
- en: 'with open(DATA_PATH, ''r'') as data:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 'with open(DATA_PATH, ''r'') as data:'
- en: DATA = json.load(data)
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DATA = json.load(data)
- en: 'def test_match():'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 'def test_match():'
- en: 'for test in DATA["match_tests"]:'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for test in DATA["match_tests"]:'
- en: response = client.post(URL, json=test["payload"])
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: response = client.post(URL, json=test["payload"])
- en: assert response.status_code == 200
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: assert response.status_code == 200
- en: 'payload: Dict = json.loads(response.content)'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'payload: Dict = json.loads(response.content)'
- en: match_ids = [match["incubator_id"] for match in payload.values()]
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: match_ids = [match["incubator_id"] for match in payload.values()]
- en: 'for expected_id in test["expected"]:'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for expected_id in test["expected"]:'
- en: assert expected_id in match_ids
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: assert expected_id in match_ids
- en: '[PRE23]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: FROM python:3.9
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: FROM python:3.9
- en: WORKDIR /src
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: WORKDIR /src
- en: ENV PYTHONPATH=/src
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: ENV PYTHONPATH=/src
- en: COPY requirements.txt requirements.txt
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: COPY requirements.txt requirements.txt
- en: COPY matching_tool/ .
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: COPY matching_tool/ .
- en: RUN pip install -r requirements.txt
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: RUN pip install -r requirements.txt
- en: EXPOSE 8001
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: EXPOSE 8001
- en: CMD ["uvicorn", "app.api:app", "--host", "0.0.0.0", "--port", "8001"]
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: CMD ["uvicorn", "app.api:app", "--host", "0.0.0.0", "--port", "8001"]
- en: '[PRE24]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: docker build -t matching-tool:latest -f Dockerfile .
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: docker build -t matching-tool:latest -f Dockerfile .
- en: '[PRE25]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: docker run -p 8001:8001 --name matching-tool matching-tool
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: docker run -p 8001:8001 --name matching-tool matching-tool
- en: '```'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Once the container is running, anyone can call the API through the port 8001\.
    It is also possible to deploy the Docker container to any cloud provider, **making
    the Matching Tool instantly functional.**
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器运行，任何人都可以通过端口8001调用API。也可以将Docker容器部署到任何云提供商，**使匹配工具立即生效**。
- en: The project was ready to be delivered.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 项目已准备好交付。
- en: Conclusions
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I shared a real project I carried out for an American start-up.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我分享了我为一家美国初创公司进行的实际项目。
- en: From the data I was provided with, in addition to several iterations with the
    stakeholders, I developed a tool for start-up founders to find the best incubators
    regarding their needs. I explained step by step the process I followed and the
    different strategies I used to solve this problem.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我所提供的数据，以及与利益相关者的多次迭代，我开发了一个工具，帮助初创企业创始人找到最适合他们需求的孵化器。我逐步解释了我所遵循的过程和解决此问题的不同策略。
- en: The next step will be to embed this algorithm into the overall application and
    start collecting the user’s data. This will initiate the **flywheel** necessary
    in any machine learning feature. Indeed, from this data representing their users’
    preferences, it will be possible to build a Recommender System that will learn
    over time, and propose the best output for each present and future founders.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是将此算法嵌入到整体应用中，并开始收集用户数据。这将启动任何机器学习功能所需的**飞轮**。确实，从这些代表用户偏好的数据中，将能够构建一个会随时间学习的推荐系统，并为当前和未来的创始人提供最佳输出。
- en: It was a pleasure to work with [Harness](https://www.joinharness.com/) on this
    project. I wish them the best. They know they can call me for future collaborations.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 与[Harness](https://www.joinharness.com/)在这个项目中合作非常愉快。我祝愿他们一切顺利。他们知道未来有合作的机会可以随时联系我。
- en: If you like this article, [**feel free to join my newsletter**](https://medium.com/@jeremyarancio/subscribe)**.
    I share my content about NLP, MLOps, and entrepreneurship.**
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，[**欢迎订阅我的新闻通讯**](https://medium.com/@jeremyarancio/subscribe)**。我分享有关NLP、MLOps和创业的内容。**
- en: You can reach out to me on [Linkedin](https://www.linkedin.com/in/jeremy-arancio/),
    or check my [Github](https://github.com/JeremyArancio).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过[Linkedin](https://www.linkedin.com/in/jeremy-arancio/)联系我，或者查看我的[Github](https://github.com/JeremyArancio)。
- en: If you’re a business and want to implement Machine Learning into your product,
    you can also [**book a call**](https://topmate.io/jeremyarancio/555697).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是企业并希望将机器学习应用到你的产品中，你也可以[**预约通话**](https://topmate.io/jeremyarancio/555697)。
- en: See you around and happy coding!
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 再见，祝编码愉快！
