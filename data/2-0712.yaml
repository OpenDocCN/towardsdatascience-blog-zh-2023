- en: Learn How to Build and Deploy a Voice Chatbot with Langchain and BentoML
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何使用Langchain和BentoML构建和部署一个语音聊天机器人
- en: 原文：[https://towardsdatascience.com/deploy-a-voice-based-chatbot-with-bentoml-langchain-and-gradio-7f25af3e45df](https://towardsdatascience.com/deploy-a-voice-based-chatbot-with-bentoml-langchain-and-gradio-7f25af3e45df)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/deploy-a-voice-based-chatbot-with-bentoml-langchain-and-gradio-7f25af3e45df](https://towardsdatascience.com/deploy-a-voice-based-chatbot-with-bentoml-langchain-and-gradio-7f25af3e45df)
- en: BentoML is Like Lego for ML engineers
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BentoML 对机器学习工程师就像乐高积木
- en: '[](https://ahmedbesbes.medium.com/?source=post_page-----7f25af3e45df--------------------------------)[![Ahmed
    Besbes](../Images/93804d9291439715e578f204b79c9bdd.png)](https://ahmedbesbes.medium.com/?source=post_page-----7f25af3e45df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7f25af3e45df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7f25af3e45df--------------------------------)
    [Ahmed Besbes](https://ahmedbesbes.medium.com/?source=post_page-----7f25af3e45df--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ahmedbesbes.medium.com/?source=post_page-----7f25af3e45df--------------------------------)[![Ahmed
    Besbes](../Images/93804d9291439715e578f204b79c9bdd.png)](https://ahmedbesbes.medium.com/?source=post_page-----7f25af3e45df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7f25af3e45df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7f25af3e45df--------------------------------)
    [Ahmed Besbes](https://ahmedbesbes.medium.com/?source=post_page-----7f25af3e45df--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7f25af3e45df--------------------------------)
    ·11 min read·May 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----7f25af3e45df--------------------------------)
    ·阅读时长11分钟·2023年5月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/62bdc77c059993e827235577879e894c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62bdc77c059993e827235577879e894c.png)'
- en: Photo by [Jason Leung](https://unsplash.com/@ninjason?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jason Leung](https://unsplash.com/@ninjason?utm_source=medium&utm_medium=referral)的照片，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
- en: In this post, we will guide you through the process of building a voice-based
    ChatGPT clone that relies on the OpenAI API and uses Wikipedia as an additional
    data source.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将指导你如何构建一个基于语音的ChatGPT克隆，依赖于OpenAI API并使用维基百科作为额外的数据源。
- en: 'To build and deploy this app, we’ll be using [BentoML](https://github.com/bentoml/BentoML):
    a Python framework for model serving and deployment.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建和部署这个应用程序，我们将使用[BentoML](https://github.com/bentoml/BentoML)：一个用于模型服务和部署的Python框架。
- en: BentoML not only helps you build services that connect to third-party proprietary
    APIs. It also supercharges those services by combining them with other open-source
    models, resulting in complex and powerful inference graphs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: BentoML不仅帮助你构建连接到第三方专有API的服务，还通过将这些服务与其他开源模型结合起来，超级增强了这些服务，形成复杂且强大的推理图。
- en: In fact, the app we’ll be building will have **speech-to-text** and **text-to-speech**
    tasks that will be handled by separate models from the HuggingFace [hub](https://huggingface.co/)
    and an LLM task that will be managed by [**LangChain**](https://langchain.readthedocs.io/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们将要构建的应用程序将包含**语音转文本**和**文本转语音**任务，这些任务将由来自HuggingFace [hub](https://huggingface.co/)的不同模型处理，LLM任务将由[**LangChain**](https://langchain.readthedocs.io/)管理。
- en: After testing the project locally, we will push it to BentoCloud, a platform
    that smoothes the process of versioning, tracking, and deploying ML services to
    the cloud.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地测试项目后，我们将把它推送到BentoCloud，这个平台简化了版本控制、跟踪和将机器学习服务部署到云端的过程。
- en: '***By the end of this article, you should have comprehensive knowledge of building
    and deploying multi-model services using BentoML. You’ll also learn about some
    of its specific features that make industrializing models easier.***'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***在本文结束时，你应该对使用BentoML构建和部署多模型服务有全面的了解。你还将学习到一些特定的功能，使模型工业化变得更容易。***'
- en: Without further ado, let’s have a look 🔍.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不再赘言，让我们来看看 🔍。
- en: Demo
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示
- en: Here’s a one-minute demo of the app.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的一分钟演示。
- en: Video by the author — A quick demo
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的视频 — 快速演示
- en: Why BentoML? 🍱
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择BentoML？🍱
- en: With the ever-increasing number of open-source ML models that solve a huge variety
    of tasks, software applications will gradually become some sort of AI application
    that integrates pre-trained models, self-trained models, or models accessed through
    APIs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的开源机器学习模型解决各种任务，软件应用程序将逐渐成为一种集成了预训练模型、自我训练模型或通过API访问模型的人工智能应用程序。
- en: Given that many SOTA models are large and require powerful hardware and distributed
    deployment, fitting everything in one machine will not be a practical solution,
    especially if the application combines at least 2 or 3 models.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于许多 SOTA 模型很大并且需要强大的硬件和分布式部署，将所有内容放入一台机器中并不是一个实际的解决方案，尤其是当应用程序结合了至少 2 或 3 个模型时。
- en: '***→ BentoML is a framework that helps solve this problem by letting user write
    simple Python code yet deploy models as distributed microservices.***'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***→ BentoML 是一个框架，通过让用户编写简单的 Python 代码来解决这个问题，同时将模型部署为分布式微服务。***'
- en: 'I’ve been playing and experimenting with BentoML for a while now and it’s definitely
    my go-to solution to deploy machine learning models and services. With its own
    distribution format known as a *bento,* this library makes it easy to package
    everything ML-related into one place: source code and dependencies, API definitions,
    model weights, Docker image, etc.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经玩弄和实验了 BentoML 一段时间，它绝对是我部署机器学习模型和服务的首选解决方案。凭借其自己的分发格式 *bento*，这个库使得将所有与
    ML 相关的内容打包到一个地方变得非常简单：源代码和依赖项、API 定义、模型权重、Docker 镜像等。
- en: Deploying is even easier since it relies on pushing that said bento to the cloud.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 部署变得更加容易，因为它依赖于将上述 bento 推送到云端。
- en: In this tutorial, we’ll first prototype the app, build the bento locally and
    push it to BentoCloud for deployment.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将首先原型化应用程序，构建本地的 bento，并将其推送到 BentoCloud 进行部署。
- en: You can perform this last step on your own by self-managing a deployment platform
    (check the [Yatai](https://github.com/bentoml/Yatai) project for more details)
    or using a deployment utility called [bentoctl](https://github.com/bentoml/bentoctl)
    that deploys your bento to a variety of cloud services.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过自我管理一个部署平台（查看 [Yatai](https://github.com/bentoml/Yatai) 项目了解更多细节）或使用名为
    [bentoctl](https://github.com/bentoml/bentoctl) 的部署工具，将你的 bento 部署到各种云服务中。
- en: If you want to learn more about BentoML and the different deployment strategies,
    you can have a look at my previous posts *⏬*
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 BentoML 和不同部署策略的信息，可以查看我之前的帖子 *⏬*
- en: '[](/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d?source=post_page-----7f25af3e45df--------------------------------)
    [## 10 Ways BentoML Can Help You Serve and Scale Machine Learning Models'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[## BentoML 如何帮助你服务和扩展机器学习模型的 10 种方式](https://towardsdatascience.com/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d?source=post_page-----7f25af3e45df--------------------------------)'
- en: Moving from Jupyter notebooks to production is not that difficult after all
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Jupyter 笔记本迁移到生产其实并不是那么困难
- en: towardsdatascience.com](/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d?source=post_page-----7f25af3e45df--------------------------------)
    [](https://levelup.gitconnected.com/quickly-deploy-a-machine-learning-api-on-aws-ec2-using-bentoml-dbb13bc09d51?source=post_page-----7f25af3e45df--------------------------------)
    [## Quickly Deploy A Machine Learning API On AWS EC2 Using BentoML
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 快速在 AWS EC2 上使用 BentoML 部署机器学习 API](https://levelup.gitconnected.com/quickly-deploy-a-machine-learning-api-on-aws-ec2-using-bentoml-dbb13bc09d51?source=post_page-----7f25af3e45df--------------------------------)'
- en: 'Use case: an end-to-end service to summarize Youtube videos 🎥'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例：一个端到端的服务来总结 YouTube 视频 🎥
- en: levelup.gitconnected.com](https://levelup.gitconnected.com/quickly-deploy-a-machine-learning-api-on-aws-ec2-using-bentoml-dbb13bc09d51?source=post_page-----7f25af3e45df--------------------------------)
    [](/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244?source=post_page-----7f25af3e45df--------------------------------)
    [## How To Deploy PyTorch Models as Production-Ready APIs?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何将 PyTorch 模型部署为生产就绪的 API？](https://levelup.gitconnected.com/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244?source=post_page-----7f25af3e45df--------------------------------)'
- en: An end-to-end use-case combining PyTorch Lightning and BentoML 🚀
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个结合了 PyTorch Lightning 和 BentoML 的端到端用例 🚀
- en: towardsdatascience.com](/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244?source=post_page-----7f25af3e45df--------------------------------)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何将 PyTorch 模型部署为生产就绪的 API？](https://towardsdatascience.com/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244?source=post_page-----7f25af3e45df--------------------------------)'
- en: Code 💻
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码 💻
- en: The code of this project is available on [Github](https://github.com/ahmedbesbes/BentoChain).
    You can clone it and run the app locally or build a self-contained bento for later
    deployment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的代码可以在 [Github](https://github.com/ahmedbesbes/BentoChain) 上找到。你可以克隆它并在本地运行应用程序，或构建一个自包含的
    bento 以便后续部署。
- en: Dependencies
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项
- en: We’ll use [transformers](https://github.com/huggingface/transformers) with a
    couple of other libraries that process audio data and the popular [LangChain](https://langchain.readthedocs.io/)
    package to easily integrate with Large Language Models (LLMs).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 [transformers](https://github.com/huggingface/transformers) 和其他几个处理音频数据的库，以及流行的
    [LangChain](https://langchain.readthedocs.io/) 包来轻松集成大型语言模型（LLMs）。
- en: We’ll use [poetry](https://python-poetry.org/) to manage the project’s dependencies.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 [poetry](https://python-poetry.org/) 来管理项目的依赖。
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After installing the packages, you’ll need to generate an SSL key and certificate.
    This will establish an HTTPS connexion that will be needed on modern browsers
    to allow the use of the microphone.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装包后，你需要生成SSL密钥和证书。这将建立一个HTTPS连接，现代浏览器需要此连接以允许使用麦克风。
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Download the models and save them
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载模型并保存
- en: This project assumes no training. We will simply download the models’ weights
    from HuggingFace’s hub and save them as BentoML Models.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目假设没有训练。我们将从HuggingFace的hub下载模型权重，并将其保存为BentoML模型。
- en: Saving the models as BentoML artifacts helps incorporate them in the bento archive
    so that they don’t constitute an external dependency.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型保存为BentoML工件有助于将它们纳入bento归档中，以便它们不会构成外部依赖。
- en: After figuring out what models are needed precisely, you can first download
    them locally by simply initializing them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在精确确定所需模型后，你可以通过初始化模型先将其下载到本地。
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, you can save them as BentoML models by calling the `bentoml.transformers.save_model`
    function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过调用`bentoml.transformers.save_model`函数将其保存为BentoML模型：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The full code is available in the`train.py` script and should be run once:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码在`train.py`脚本中，并应运行一次：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/4eeac49acaaf50c39b99fa9fbba8bb55.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4eeac49acaaf50c39b99fa9fbba8bb55.png)'
- en: Saving models ✅ — Screenshot by the author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 保存模型 ✅ — 作者截图
- en: Overview of the app’s architecture
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用架构概述
- en: 'Before going into more detail, let’s first clarify the data workflow to understand
    how the app works:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细说明之前，让我们首先澄清数据工作流程，以了解应用的工作方式：
- en: The user sends an audio message to the API server over an HTTP POST request
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户通过HTTP POST请求向API服务器发送音频消息
- en: The API server redirects the audio message to the speech2text runner that transcribes
    it into text and sends it back
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API服务器将音频消息重定向到speech2text运行器，该运行器将其转录为文本并将其返回
- en: The API server takes the transcribed text message as input, passes it through
    a LangChain agent, generates a response, and sends it to the text2speech runner
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API服务器将转录的文本消息作为输入，通过LangChain代理传递，生成响应，然后将其发送到text2speech运行器
- en: The text2speech runner generates an audio clip from the input text and returns
    it to the API server which in turn sends it back to the user
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: text2speech运行器从输入文本生成音频片段，并将其返回给API服务器，后者再将其发送回用户
- en: The following diagram summarizes these steps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表总结了这些步骤。
- en: '![](../Images/7ad715efc3619895dadcb6660ec5dd9e.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ad715efc3619895dadcb6660ec5dd9e.png)'
- en: The architecture of the app ✅ — Image by the author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 应用架构 ✅ — 作者图片
- en: Why are we using 2 runners?
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们使用两个运行器？
- en: What’s interesting about BentoML is that when deploying to the BentoCloud (or
    to any self-managed platform) the runners and the API server can be deployed separately
    on three different Kubernetes pods.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: BentoML的有趣之处在于，当部署到BentoCloud（或任何自我管理的平台）时，运行器和API服务器可以在三个不同的Kubernetes pod上分别部署。
- en: 'This provides 3 main benefits:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了3个主要好处：
- en: '**Separation of concerns**: runners are focused on the compute and are decoupled
    from web serving'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注分离**：运行器专注于计算，并与网页服务解耦'
- en: '**Customization**: Each runner can have a specific hardware configuration depending
    on the task it’s performing: for example, the text2speech runner’s config will
    have a GPU while the speech2text runner won’t require one'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制化**：每个运行器可以根据其执行的任务具有特定的硬件配置：例如，text2speech运行器的配置将包括GPU，而speech2text运行器则不需要'
- en: '**Auto-scale**: Runners will also auto-scale independently based on resource
    usage'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：运行器还会根据资源使用情况独立自动扩展'
- en: '*To learn more about BentoML runners, have a look at this* [*page*](https://docs.bentoml.org/en/latest/concepts/runner.html)*.*'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*想了解更多关于BentoML运行器的信息，请查看这个* [*页面*](https://docs.bentoml.org/en/latest/concepts/runner.html)*。*'
- en: 'Now that we have a global picture of the app, let’s focus on each runner:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对应用有了整体了解，让我们关注每个运行器：
- en: A Speech-to-text runner 🎤 → 📝
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音转文本运行器 🎤 → 📝
- en: This runner will rely on OpenAI’s Whisper model to transcribe audio to text.
    Specifically, it’ll use the **tiny** [model](https://huggingface.co/openai/whisper-tiny).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个运行器将依赖 OpenAI 的 Whisper 模型将音频转录为文本。具体来说，它将使用 **tiny** [模型](https://huggingface.co/openai/whisper-tiny)。
- en: This model will receive a tensor of input features and will generate a transcription.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型将接收一个输入特征的张量，并生成一个转录结果。
- en: 'The code is pretty straightforward: it just defines a `**SpeechToTextRunnable**`
    class that inherits from `**bentoml.Runnable**`, instantiates the model and the
    processor, and defines the inference method.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 代码非常直接：它只定义了一个`**SpeechToTextRunnable**`类，该类继承自`**bentoml.Runnable**`，实例化了模型和处理器，并定义了推理方法。
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A Text-to-speech runner 📝 → 🎤
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个文本到语音的运行器 📝 → 🎤
- en: 'This runner performs the exact opposite task: it takes a text as input and
    generates a speech that will be represented by a NumPy array.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个运行器执行完全相反的任务：它接受文本作为输入，并生成一个由 NumPy 数组表示的语音。
- en: Note that a device must be declared as an attribute of the `**Text2SpeechRunnable**`
    class to support the GPU acceleration when it’s available.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当设备可用时，必须将其声明为 `**Text2SpeechRunnable**` 类的属性，以支持 GPU 加速。
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A BentoML service
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个 BentoML 服务
- en: In this section, we will create a service that defines the API routes that can
    be accessed when the bento is deployed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个服务，定义在 bento 部署时可以访问的 API 路由。
- en: 'We first start by initializing the two previous runners we defined:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先开始初始化我们定义的两个前一个运行器：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we create a Service object that depends on them:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个依赖于这些路由的 Service 对象：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the service is created, we will define two API routes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务创建完成，我们将定义两个 API 路由：
- en: '**generate_text:** this route will take an array as input and generate a text
    by calling the speech2text_runner'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**generate_text:** 这个路由将接受一个数组作为输入，并通过调用 speech2text_runner 生成文本'
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**generate_speech:** this route will take a text as input and generate an array
    as output by calling the text2speech_runner'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**generate_speech:** 这个路由将接受一个文本作为输入，并通过调用 text2speech_runner 生成一个数组作为输出'
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The ChatWrapper utility class
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ChatWrapper 实用程序类
- en: We are not done yet with the service source code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成服务源代码。
- en: In this section, we will mount a FastAPI app as an HTTP endpoint on the “/chatbot”
    path.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把 FastAPI 应用挂载为“/chatbot”路径上的 HTTP 端点。
- en: 'This app will serve a Gradio chatbot interface that will interact with the
    two previously defined API routes: `**generate_text**` and `**generate_speech**`
    .'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用将提供一个 Gradio 聊天机器人界面，该界面将与之前定义的两个 API 路由进行交互：`**generate_text**` 和 `**generate_speech**`。
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The “chat” variable is an object that gets the user's audio input, transcribes
    it into text, passes it to LangChain, extracts the response, and returns a bunch
    of data that update the app’s interface and state.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: “chat”变量是一个对象，它获取用户的音频输入，将其转录为文本，传递给 LangChain，提取响应，并返回一堆更新应用界面和状态的数据。
- en: 'The chat object is a callable that expects the following parameters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: chat 对象是一个可调用的对象，它期望以下参数：
- en: '**api_key**: OpenAI API key'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**api_key**: OpenAI API 密钥'
- en: '**audio_path**: temporary file location when an audio file is recorded with
    the microphone'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**audio_path**: 当使用麦克风录制音频文件时的临时文件位置'
- en: '**text_message**: a text message sent instead of an audio file'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**text_message**: 代替音频文件发送的文本消息'
- en: '**history**: a tuple of questions and the corresponding responses ((“Hello”,
    “hi”), (“How are you?”, “Fine, thank you. What about you?”))'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**history**: 一个包含问题及其对应响应的元组（（“Hello”, “hi”），（“How are you?”, “Fine, thank
    you. What about you?”））'
- en: '**chain**: a ConversationChain object from LangChain'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**chain**: 一个来自 LangChain 的 ConversationChain 对象'
- en: In the following code snippet, the ChatWrapper __call__’s method first checks
    the input data. If it’s in audio format, it transcribes it using the generate_text
    method, otherwise, it keeps it as is.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，ChatWrapper __call__ 方法首先检查输入数据。如果是音频格式，它会使用 generate_text 方法进行转录，否则保持原样。
- en: Then, it checks whether the OpenAI key is correctly loaded. If it’s not the
    case, it prints out the message “Please paste your Open AI key.”, along with the
    audio transcription.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它会检查 OpenAI 密钥是否正确加载。如果没有，它会打印出“Please paste your Open AI key.”的消息，并附上音频转录。
- en: If the key is correctly loaded, the LangChain agent runs and outputs a message
    that is then passed to the generate_speech method to produce the output audio.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果密钥正确加载，LangChain 代理将运行，并输出一条消息，然后将其传递给 generate_speech 方法以生成输出音频。
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Gradio UI
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradio 用户界面
- en: Remember the create_block function we saw earlier? This one takes a ChatWrapper
    instance as input and produces the UI.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们之前看到的 create_block 函数吗？这个函数接受一个 ChatWrapper 实例作为输入并生成用户界面。
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/4077681d5e4f02c67fa9bc38c7795045.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4077681d5e4f02c67fa9bc38c7795045.png)'
- en: The App’s UI — Screenshot by the user
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的 UI — 用户截图
- en: Let’s break the UI into pieces to understand how the data flows exactly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 UI 拆解开来，以准确理解数据的流动方式。
- en: '**openai_api_key_textbox:** This textbox expects you to paste your OpenAI key
    in it.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**openai_api_key_textbox:** 这个文本框期待您在其中粘贴您的 OpenAI 密钥。'
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the user pastes its key and submits it, the key is passed to the set_openai_api_key
    function that gets executed. This function then returns the loaded chain that
    is passed into the app’s state. That way, the chain object is not None and can
    be used when passed to the chat object.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户粘贴其密钥并提交时，该密钥会传递给执行的 set_openai_api_key 函数。然后，这个函数返回加载的链，并将其传递到应用的状态中。这样，链对象就不为
    None，并且可以在传递给聊天对象时使用。
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here are the other UI components:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是其他 UI 组件：
- en: '**chatbot:** It displays a chatbot output showing both user-submitted messages
    and responses.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**chatbot:** 显示聊天机器人输出，展示用户提交的消息和回应。'
- en: '**audio:** A widget thatplays the user’s recorded audio clip'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**audio:** 一个播放用户录制的音频片段的小部件'
- en: '**state**: a global state of the app'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**state**：应用的全局状态'
- en: '**audio_message:** user’s submitted audio'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**audio_message:** 用户提交的音频'
- en: '**text_message**: user’s submitted text'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**text_message**：用户提交的文本'
- en: Now, what happens when a user records an audio from the microphone? (same happens
    when he sends a text)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当用户从麦克风录制音频时会发生什么？（发送文本时也是如此）
- en: The chat object gets executed with a list of inputs from the UI [openai_api_key_textbox,
    audio_message, text_message, state, agent_state] and outputs a list of outputs
    that updates the following components [chatbot, state, audio, audio_message, text_message]
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天对象会使用来自 UI 的输入列表 [openai_api_key_textbox, audio_message, text_message, state,
    agent_state] 执行，并输出一个输出列表，该列表更新以下组件 [chatbot, state, audio, audio_message, text_message]
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To put it simply, this allows displaying the user’s questions and the bot’s
    answers as well as the history of the chat and the audio of the last response.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这允许显示用户的问题和机器人的回答，以及聊天记录和最后响应的音频。
- en: '![](../Images/7493404c7f1969da8149143173c515f0.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7493404c7f1969da8149143173c515f0.png)'
- en: Screenshot by the author
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Serve the app locally
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地提供应用
- en: 'To serve the app locally, run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地运行应用程序，请执行以下命令：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This starts a SwaggerUI from which you can try the two endpoints.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个 SwaggerUI，您可以在其中尝试两个端点。
- en: This also serves the Gradio app on the “/chatbot” path.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这也在“/chatbot”路径上提供 Gradio 应用。
- en: '![](../Images/c663a378e452b841d8d68e814613df44.png)![](../Images/f4395a4f7ca487b97d66faca46c2a7af.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c663a378e452b841d8d68e814613df44.png)![](../Images/f4395a4f7ca487b97d66faca46c2a7af.png)'
- en: Screenshot by the user
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 用户截图
- en: Deploy to BentoCloud
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到 BentoCloud
- en: 'Before deploying to BentoCloud, we first need to build the bento:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署到 BentoCloud 之前，我们首先需要构建 bento：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/ae1bb1ac88c9ad0b9e40dcff04f37327.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae1bb1ac88c9ad0b9e40dcff04f37327.png)'
- en: Screenshot by the author
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Then, we need to push it using the following command.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要使用以下命令推送它。
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will upload our **bento** and the underlying **models** simultaneously
    to the cloud.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这将同时将我们的 **bento** 和底层的 **models** 上传到云端。
- en: '![](../Images/39ec450b96bb2398140d984d65c0f803.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/39ec450b96bb2398140d984d65c0f803.png)'
- en: Screenshot by the author
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: 'Now, the easy part: you log in to BentoCloud, head over to the deployment tab,
    and hit create.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，简单的部分：登录 BentoCloud，前往部署选项卡，然后点击创建。
- en: You pick a deployment name, enable public access and select the appropriate
    bento tag version.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个部署名称，启用公共访问并选择合适的 bento 标签版本。
- en: '![](../Images/b40f1354a8791d04fa0f81883153a831.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b40f1354a8791d04fa0f81883153a831.png)'
- en: 'Now, you define the API server configuration:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，定义 API 服务器配置：
- en: '![](../Images/588fa38c5b62c70b9858533b17d4d278.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/588fa38c5b62c70b9858533b17d4d278.png)'
- en: API Server configuration — Screenshot by the author
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: API 服务器配置 — 作者截图
- en: And you set a configuration for each runner.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 并为每个运行器设置配置。
- en: '![](../Images/2fdb1f88115a47e5a03e52774fd4ccf4.png)![](../Images/be11f4ea4b6b1dc8fbe9e876b1b4a58f.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2fdb1f88115a47e5a03e52774fd4ccf4.png)![](../Images/be11f4ea4b6b1dc8fbe9e876b1b4a58f.png)'
- en: Runners configuration — Screenshots by the author
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Runners 配置 — 作者截图
- en: When everything is set, hit the submit button and wait for deployment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切准备就绪时，点击提交按钮并等待部署。
- en: When the bento is marked as running, you’ll see a public URL that serves the
    chatbot (don’t forget to add the HTTPS)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当 bento 被标记为正在运行时，您会看到一个公共 URL，用于提供聊天机器人服务（不要忘记添加 HTTPS）
- en: Conclusion
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This project was an opportunity to take part in the ongoing hype around LLMs
    and build an app from scratch that not only calls LangChain but combines it with
    other models as well.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目是一个机会，参与到围绕 LLM 的持续热潮中，并从零开始构建一个不仅调用 LangChain，还结合其他模型的应用。
- en: 'There’s of course room for improvement in the different steps of the workflow
    I’ve shown: I just hope this post was a good starter for you to start building
    more advanced bots.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我展示的工作流程中不同步骤还有改进的空间：我只是希望这篇文章能为你开始构建更高级的机器人提供一个良好的开端。
- en: New to Medium? You can subscribe for $5 per month and unlock unlimited articles
    on various topics (tech, design, entrepreneurship…) You can support me by clicking
    on my referral [link](https://ahmedbesbes.medium.com/membership)
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新加入 Medium？你可以以每月 $5 订阅，解锁各种主题（技术、设计、创业……）的无限文章。你可以通过点击我的推荐[链接](https://ahmedbesbes.medium.com/membership)来支持我。
- en: '[](https://ahmedbesbes.medium.com/membership?source=post_page-----7f25af3e45df--------------------------------)
    [## Join Medium with my referral link - Ahmed Besbes'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ahmedbesbes.medium.com/membership?source=post_page-----7f25af3e45df--------------------------------)
    [## 通过我的推荐链接加入 Medium - Ahmed Besbes'
- en: Read every story from Ahmed Besbes (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Ahmed Besbes 的每个故事（以及 Medium 上其他数千位作者的文章）。你的会员费直接支持……
- en: ahmedbesbes.medium.com](https://ahmedbesbes.medium.com/membership?source=post_page-----7f25af3e45df--------------------------------)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ahmedbesbes.medium.com](https://ahmedbesbes.medium.com/membership?source=post_page-----7f25af3e45df--------------------------------)
