- en: Bubble Sort Explained — A Data Scientists Algorithm Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冒泡排序解释——数据科学家的算法指南
- en: 原文：[https://towardsdatascience.com/bubble-sort-explained-a-data-scientists-algorithm-guide-853b2286e5ab](https://towardsdatascience.com/bubble-sort-explained-a-data-scientists-algorithm-guide-853b2286e5ab)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/bubble-sort-explained-a-data-scientists-algorithm-guide-853b2286e5ab](https://towardsdatascience.com/bubble-sort-explained-a-data-scientists-algorithm-guide-853b2286e5ab)
- en: An intuitive explanation of bubble sort with implementation in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 冒泡排序的直观解释及其在 Python 中的实现
- en: '[](https://richmondalake.medium.com/?source=post_page-----853b2286e5ab--------------------------------)[![Richmond
    Alake](../Images/7d563ac272e730f4f6a9ce8620cd11e3.png)](https://richmondalake.medium.com/?source=post_page-----853b2286e5ab--------------------------------)[](https://towardsdatascience.com/?source=post_page-----853b2286e5ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----853b2286e5ab--------------------------------)
    [Richmond Alake](https://richmondalake.medium.com/?source=post_page-----853b2286e5ab--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://richmondalake.medium.com/?source=post_page-----853b2286e5ab--------------------------------)[![Richmond
    Alake](../Images/7d563ac272e730f4f6a9ce8620cd11e3.png)](https://richmondalake.medium.com/?source=post_page-----853b2286e5ab--------------------------------)[](https://towardsdatascience.com/?source=post_page-----853b2286e5ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----853b2286e5ab--------------------------------)
    [Richmond Alake](https://richmondalake.medium.com/?source=post_page-----853b2286e5ab--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----853b2286e5ab--------------------------------)
    ·10 min read·Jan 5, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----853b2286e5ab--------------------------------)
    ·阅读时间 10 分钟·2023年1月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: As software engineers and data scientists, we often take sorting functions for
    granted. These algorithms may not be the most glamorous or heavily discussed aspects
    of our work, but they play a vital role in the technologies we use every day.
    For example, imagine trying to organize the contact list on your phone without
    a way to sort alphabetically or sorting products on an eCommerce website by price
    and category. It’s easy to overlook the importance of sorting algorithms, but
    they are integral to our work as programmers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件工程师和数据科学家，我们经常理所当然地看待排序函数。这些算法可能不是我们工作中最光鲜亮丽或讨论最多的方面，但它们在我们每天使用的技术中发挥着至关重要的作用。例如，想象一下在没有按字母顺序排序的功能时，如何整理手机上的联系人列表，或者如何在电子商务网站上按价格和类别排序产品。很容易忽视排序算法的重要性，但它们对我们作为程序员的工作至关重要。
- en: Even though most programming languages, such as Java, Python, C# etc., come
    with built-in functions for common sorting algorithms, it’s still important for
    us to have a basic understanding of how these algorithms work. This knowledge
    allows us to make informed decisions about which algorithm to use based on its
    space and time complexities, especially when working with large datasets as data
    scientists. So don’t underestimate the humble sorting function — they may not
    be the star of the show, but they are the unsung heroes of the tech industry.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数编程语言，如 Java、Python、C# 等，内置了常见排序算法的函数，但我们仍然需要对这些算法的工作原理有基本的了解。这些知识使我们能够根据算法的空间和时间复杂度做出明智的决策，特别是当数据科学家处理大型数据集时。因此，不要小看那些不起眼的排序函数——它们可能不是焦点，但却是科技行业的无名英雄。
- en: In this article, we’ll dive into the bubble sort algorithm, examining its implementation
    in Python and JavaScript. We’ll also take a closer look at the intuition behind
    the algorithm and discuss considerations for time and space complexity. By the
    end of this article, you’ll have a solid understanding of when it is appropriate
    to use the bubble sort algorithm in your programs, as well as an overview of its
    space and time complexities.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将深入探讨冒泡排序算法，考察其在 Python 和 JavaScript 中的实现。我们还将更详细地了解算法背后的直觉，并讨论时间和空间复杂度的考虑因素。阅读完这篇文章，你将对何时在程序中使用冒泡排序算法有一个扎实的理解，并了解其空间和时间复杂度的概述。
- en: Get a detailed overview of how hardware innovations are changing how data teams
    build analytics and machine learning applications in the free ebook, [Hardware
    > Software > Process](https://www.nvidia.com/en-us/ai-data-science/resources/hardware-software-process-book/?nvid=nv-int-tblg-423746#cid=dl13_nv-int-tblg_en-us).
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在免费的电子书 [硬件 > 软件 > 过程](https://www.nvidia.com/en-us/ai-data-science/resources/hardware-software-process-book/?nvid=nv-int-tblg-423746#cid=dl13_nv-int-tblg_en-us)
    中，详细了解硬件创新如何改变数据团队构建分析和机器学习应用的方式。
- en: Bubble Sort Intuition
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冒泡排序直观理解
- en: It is always more helpful to first grasp the concept when attempting to understand
    and later recall an algorithm. By familiarizing yourself with the idea before
    jumping into implementation, you will better retain the information for future
    use. Bubble sort is no exception.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在试图理解并回忆一个算法时，首先掌握概念总是更有帮助。在跳入实现之前，通过熟悉这个概念，你将更好地保留信息以备将来使用。冒泡排序也不例外。
- en: To sort an array [2, 3, 4, 5, 1] in ascending order using the bubble sort algorithm,
    we start from the first element [2] and compare it with the second element [3].
    If the first element is greater than the second, we swap them. We continue this
    process of comparing pairs of elements until we reach the end of the array. This
    way, the largest elements will be shifted to the end of the array, and the smallest
    elements will be shifted to the beginning of the array.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用冒泡排序算法将数组[2, 3, 4, 5, 1]按升序排序，我们从第一个元素[2]开始，并将其与第二个元素[3]进行比较。如果第一个元素大于第二个元素，我们交换它们。我们继续比较元素对，直到到达数组的末尾。这样，最大的元素将被移到数组的末尾，最小的元素将被移到数组的开头。
- en: The name “bubble sort” refers to the way in which larger elements “bubble” to
    the top or the end of the array as they are repeatedly compared and swapped with
    smaller elements. By the end of the sorting process, the array will be fully sorted
    in ascending order.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “冒泡排序”这个名字指的是较大的元素在被反复比较和交换较小元素时，“冒泡”到数组的顶部或末端。排序过程结束时，数组将完全按升序排序。
- en: Bubble Sort Algorithm Explanation (Step by Step)
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冒泡排序算法逐步解释
- en: 'The following is a list of unordered numbers that we will use bubble sort to
    organize:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将使用冒泡排序进行组织的无序数字列表：
- en: '![](../Images/f99f40bc2856d230ab08396ad2d66cd5.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f99f40bc2856d230ab08396ad2d66cd5.png)'
- en: Image by Author
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'The first step is to focus only on the first two numbers, which in this example
    are 5 and 9\. You can visualize considering just the two elemtns 5 and 9 as shown
    in the image below:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是只关注前两个数字，在这个例子中是5和9。你可以将只考虑这两个元素5和9的过程可视化，如下图所示：
- en: '![](../Images/1177ff3ca9581e555a7d91333459e232.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1177ff3ca9581e555a7d91333459e232.png)'
- en: Image by Author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Then, you must determine if the numbers inside the bubble are in order. If
    they aren’t in proper order, switch them around to make it right. Fortunately
    for us, they are already arranged in ascending order. 5 is less than 9, so it
    comes before 9\. This means we don’t have anything left to do — we move our bubble
    one step further like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你必须确定气泡中的数字是否按顺序排列。如果它们的顺序不正确，则需要进行交换以使其正确。幸运的是，它们已经按升序排列。5小于9，所以它在9之前。这意味着我们无需做更多的操作——我们将气泡再移动一步，如下所示：
- en: '![](../Images/8ace99ef64f5f6230e14c7c11c329ad0.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ace99ef64f5f6230e14c7c11c329ad0.png)'
- en: Image by Author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'We conduct the same step in the next iteration of the array. However, this
    time 9 is greater than 1, but it’s also in front of it. So, to rectify that, the
    position of both elements is swapped. Here’s how the list looks now:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组的下一次迭代中，我们进行相同的步骤。然而，这一次9大于1，但它也在1的前面。因此，为了纠正这个问题，我们交换了这两个元素的位置。现在列表的样子如下：
- en: '![](../Images/127b21ad18da3204ccd2183d72a8543f.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/127b21ad18da3204ccd2183d72a8543f.png)'
- en: Image by Author
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Now that the elements are swapped, the bubble progresses to successive pairs.
    And the steps repeat until the last pairs in the array have undergone a check
    to swap. The first run through the array will look like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在元素已经交换，冒泡排序将继续处理后续的元素对。这个过程会重复进行，直到数组中的最后一对元素也被检查和交换。第一次遍历数组的结果如下：
- en: '![](../Images/82e9178717c0e913d3ea32c30303e6d5.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82e9178717c0e913d3ea32c30303e6d5.png)'
- en: Image by Author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The bubble sort algorithm is a simple yet effective way to sort an array of
    elements. It works by repeatedly iterating through the array and comparing pairs
    of elements, swapping their positions if they are out of order. This process is
    repeated until the entire array is sorted.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序算法是一种简单但有效的排序方法。它通过反复遍历数组，比较元素对的顺序，如果顺序错误则交换位置。这一过程会重复进行，直到整个数组被排序完成。
- en: One thing to remember is that the number of passes required to sort an array
    is equal to the number of elements in the array. For example, a 6-element array
    will need to go through 6 passes in order to be fully sorted in ascending order.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一点是，对数组进行排序所需的遍数等于数组中的元素个数。例如，一个6个元素的数组需要进行6次遍历才能完全按升序排序。
- en: However, it’s possible to make the bubble sort algorithm more efficient by limiting
    the number of operations or passes conducted on the array. This is because the
    last element of the array is always the maximum value, so there is no need to
    continue comparing all elements beyond this point in future passes through the
    array. We’ll see this optimization in action as we implement the bubble sort algorithm
    in Python and JavaScript in the sections below.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过限制对数组进行的操作次数或遍历次数，可以使冒泡排序算法更高效。这是因为数组的最后一个元素始终是最大值，因此在未来的遍历中不需要继续比较这个位置之后的所有元素。我们将在下面的Python和JavaScript实现中看到这种优化的实际效果。
- en: Bubble Sort Algorithm implemented in Python
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Python实现的冒泡排序算法
- en: This section implements the bubble sort algorithm using the Python programming
    language. We will observe a naive implementation and a more efficient version
    of the bubble sort algorithm.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本节使用Python编程语言实现冒泡排序算法。我们将观察到一种朴素的实现方式和一种更高效的冒泡排序算法。
- en: Initialize a Python array containing integer elements
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个包含整数元素的Python数组
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Define a function named ‘bubbleSort’ that accepts an array in its parameter
    named ‘data’. First, let’s attempt to pass through the array that swaps any elements
    that satisfy the condition that if the left element at a particular index is greater
    than an element to the right, we execute a swap operation between those two elements.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为‘bubbleSort’的函数，该函数接受一个名为‘data’的数组作为参数。首先，我们尝试遍历数组，并交换满足条件的元素，即在特定索引处的左边元素大于右边元素时，我们对这两个元素执行交换操作。
- en: One thing to note is the assignment of the left element in any iteration to
    a temporary variable ‘tempValue’ and then assigning the right element to the temporary
    variable
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，在任何迭代中，将左边元素分配给临时变量‘tempValue’，然后将右边元素分配给临时变量。
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code snippet above, when called with an unsorted array passed as its arguments,
    will conduct the bubbleSort function pass once on the array. And in most cases,
    will not completely sort the array in ascending order.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段在用未排序的数组作为参数调用时，将对数组进行一次冒泡排序函数的遍历。在大多数情况下，可能不会完全将数组排序为升序。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To fix this, we have to iterate through the array we want to sort as many times
    as there are combinations of pairs. Simply kept, the number of iterations to conduct
    is the length of the unsorted array squared (len(unsortedArrray)²). This is the
    naive implementation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们必须按照配对组合的次数来遍历我们想要排序的数组。简单来说，进行的迭代次数是未排序数组长度的平方（len(unsortedArrray)²）。这是一种朴素的实现方式。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Running the bubble sort function again with the unsorted array passed as an
    argument will result in an array sorted in ascending order provided as an output
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行冒泡排序函数，并将未排序的数组作为参数传递，将得到一个升序排列的数组作为输出。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Optimized Version of Bubble Sort**'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**优化版冒泡排序**'
- en: While the naive version of the bubble sort algorithm does work, it has some
    unnecessary and redundant operations. In particular, it compares elements at the
    end of the array that are already the maximum values present in the array. This
    is because on each pass through the array, the bubble sort algorithm moves the
    maximum element values to the end of the array.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然朴素版的冒泡排序算法有效，但存在一些不必要和冗余的操作。特别是，它比较了数组末尾已经是最大值的元素。这是因为在每次遍历数组时，冒泡排序算法将最大元素值移动到数组末尾。
- en: To optimize the bubble sort algorithm, we can reduce the number of swap operations
    required by keeping track of the portion of the array that we want to consider
    for comparison. We can do this by starting with the maximum length of the array
    and decrementing it by 1 after each pass, reducing the area of the array that
    the swap operation acts upon. This way, we can avoid comparing with the last elements
    of the array on each pass, which are already in their correct position.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化冒泡排序算法，我们可以通过跟踪我们想要比较的数组部分来减少所需的交换操作次数。我们可以通过从数组的最大长度开始，并在每次遍历后将其减少1，从而减少交换操作作用的数组区域。这样，我们可以避免在每次遍历时与数组末尾的元素进行比较，因为这些元素已经在正确的位置。
- en: By using this optimization, we can make the bubble sort algorithm more efficient
    and reduce the number of unnecessary operations it performs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这种优化，我们可以使冒泡排序算法更高效，并减少其执行的多余操作次数。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Further refactoring could be conducted to ensure the code above is readable
    and efficient. Also, as pointed out in the comments by [Dr. Robert Kübler](https://medium.com/u/6d6b5fb431bf?source=post_page-----853b2286e5ab--------------------------------),
    further optimization can be made to this algorithm by checking if a swap operation
    occurs. If a swap operation doesn’t occur, we can break the loop to avoid unnecessary
    passes through the array.
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可以进一步重构以确保上述代码可读且高效。此外，正如 [Robert Kübler 博士](https://medium.com/u/6d6b5fb431bf?source=post_page-----853b2286e5ab--------------------------------)
    在评论中指出的，通过检查是否发生了交换操作，可以进一步优化该算法。如果没有发生交换操作，我们可以中断循环以避免不必要的数组遍历。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Below is an implementation of the same algorithm in JavaScript, a programming
    language popular with data practitioners and software engineers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用 JavaScript 实现的相同算法，JavaScript 是一种受到数据从业者和软件工程师欢迎的编程语言。
- en: Bubble Sort Algorithm implemented in JavaScript
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 JavaScript 实现的冒泡排序算法
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Time and Space Complexity (Big O notation)
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间和空间复杂度（大 O 记号）
- en: Data scientists must understand the performance of a sorting algorithm and how
    much time/space it requires. This allows you to select the best sorting algorithm
    depending on your specific situation, as many options are available.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家必须了解排序算法的性能及其所需的时间/空间。这使你能够根据具体情况选择最佳的排序算法，因为有很多选项可供选择。
- en: When bubble sort is used on an array already in ascending order, it requires
    only one pass through the entire array. This is considered the best-case scenario.
    In practice, though, this only occurs sometimes, and bubble sort usually necessitates
    n(n-1)/2 swaps or comparisons to achieve a sorted array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当冒泡排序用于已经按升序排列的数组时，只需遍历整个数组一次。这被视为最佳情况。然而，实际上，这种情况只偶尔发生，冒泡排序通常需要 n(n-1)/2 次交换或比较才能实现排序数组。
- en: The bubble sort algorithm’s average/worst time complexity is O(n²), as we have
    to pass through the array as many times as there are pairs in a provided array.
    Therefore, when time is a factor, there may be better options.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序算法的平均/最坏时间复杂度为 O(n²)，因为我们需要通过数组多次，与提供的数组中的对数一样。因此，当时间是一个因素时，可能会有更好的选择。
- en: 'Time complexity Worst Case: O(n²)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间复杂度 最坏情况：O(n²)
- en: 'Time complexity Average Case: O(n²)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间复杂度 平均情况：O(n²)
- en: 'Time complexity Best Case: O(n), the array is already sorted'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间复杂度 最佳情况：O(n)，数组已经排序
- en: In terms of space complexity, since we only swapped the elements with one another
    and never stored anything, we don’t need any extra space to run the algorithm.
    This is amazing because it means the space complexity comes out as constant, or
    O(1). This makes it an [in-place](https://www.techiedelight.com/in-place-vs-out-of-place-algorithms/)
    algorithm that works by modifying the input directly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在空间复杂度方面，由于我们只是交换了元素而没有存储任何东西，我们不需要额外的空间来运行算法。这非常了不起，因为这意味着空间复杂度为常数，即 O(1)。这使得它成为一个
    [原地](https://www.techiedelight.com/in-place-vs-out-of-place-algorithms/) 算法，通过直接修改输入来工作。
- en: Key Takeaways
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键要点
- en: The bubble sort algorithm may not be the most well-known or highly-regarded
    sorting algorithm, but as we’ve seen, it’s not a terrible option either. With
    a time complexity of O(n²) and a space complexity of O(1), it’s a simple algorithm
    that is easy for beginners to understand. However, its slow speed may make it
    less practical for certain applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序算法可能不是最知名或评价最高的排序算法，但正如我们所见，它也不是一个糟糕的选择。其时间复杂度为 O(n²)，空间复杂度为 O(1)，这是一个简单的算法，容易为初学者理解。然而，它的慢速度可能使得它在某些应用中不够实际。
- en: Despite its limitations, the bubble sort algorithm can be a useful starting
    point for learning about sorting algorithms and data structures. It’s a good way
    to get a basic understanding of how these algorithms work, and can help you build
    a foundation for learning more complex algorithms later on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有其局限性，冒泡排序算法可以作为学习排序算法和数据结构的一个有用起点。这是一个很好地理解这些算法如何工作的基础方式，并且可以帮助你为以后学习更复杂的算法奠定基础。
- en: That being said, the bubble sort algorithm may not be the best choice for time-sensitive
    material, as its slow speed can be prohibitive. However, if you’re willing to
    sacrifice some space for time, it may work well for you. Ultimately, the choice
    of sorting algorithm will depend on your specific needs and goals. By learning
    about the bubble sort algorithm, you can make more informed decisions about which
    algorithm is best for your needs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，冒泡排序算法可能不是处理时间敏感材料的最佳选择，因为其速度较慢可能会成为限制。然而，如果你愿意为了时间牺牲一些空间，它可能会对你有用。最终，排序算法的选择将取决于你的具体需求和目标。通过了解冒泡排序算法，你可以做出更明智的决策，选择最适合你需求的算法。
- en: FAQs
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: '**What is Bubble Sort?**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冒泡排序是什么？**'
- en: Bubble sort is a sorting algorithm that uses comparison methods to sort an array.
    The algorithm compares pairs of elements in an array and swaps them if the left
    pair(position) is greater than the right pair(position+1). This process is repeated
    until the entire array is sorted.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序是一种排序算法，它使用比较方法来排序数组。该算法比较数组中一对对的元素，并在左侧对（位置）大于右侧对（位置+1）时交换它们。这个过程重复进行，直到整个数组排序完成。
- en: '**How many passes does Bubble Sort require?**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冒泡排序需要多少次遍历？**'
- en: Bubble Sort requires n(n-1)/2 passes through all elements in order for the final
    array sorted in ascending order.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序需要 n(n-1)/2 次遍历所有元素，以便最终数组按升序排列。
- en: '**What is the worst time complexity of Bubble Sort?**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冒泡排序的最坏时间复杂度是多少？**'
- en: The worst time complexity of Bubble Sort is O(n2).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序的最坏时间复杂度是 O(n2)。
- en: '**What is the worst time complexity of Bubble Sort?**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冒泡排序的最坏时间复杂度是多少？**'
- en: The best time complexity of Bubble Sort is O(n), and this occurs when the array
    is already sorted.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序的最佳时间复杂度是 O(n)，当数组已经排序时会出现这种情况。
- en: '**What is the space complexity of Bubble Sort?**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冒泡排序的空间复杂度是多少？**'
- en: Bubble sort has an O(1) space complexity, as it works in-place by modifying
    the input directly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序具有 O(1) 的空间复杂度，因为它通过直接修改输入来原地操作。
- en: I hope you found the article useful.
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我希望你觉得这篇文章有用。
- en: 'To connect with me or find more content similar to this article, do the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要与我联系或找到更多类似于这篇文章的内容，请执行以下操作：
- en: '[**Support my writing**](https://richmondalake.medium.com/membership) by becoming
    a referred Medium member'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[**支持我的写作**](https://richmondalake.medium.com/membership) 成为推荐的 Medium 会员'
- en: Subscribe to my [**YouTube channel**](https://www.youtube.com/channel/UCNNYpuGCrihz_YsEpZjo8TA)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅我的 [**YouTube 频道**](https://www.youtube.com/channel/UCNNYpuGCrihz_YsEpZjo8TA)
- en: Subscribe to my Podcast [**Apple Podcasts**](https://apple.co/3tbXlIa) **|**
    [**Spotify**](https://spoti.fi/38IIC06) **|** [**Audible**](https://amzn.to/3m62Vb3)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅我的播客 [**Apple Podcasts**](https://apple.co/3tbXlIa) **|** [**Spotify**](https://spoti.fi/38IIC06)
    **|** [**Audible**](https://amzn.to/3m62Vb3)
- en: Subscribe to my [**Email List**](https://richmond-alake.ck.page/c8e63294ee)
    for my newsletters
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅我的 [**邮件列表**](https://richmond-alake.ck.page/c8e63294ee) 获取我的新闻通讯
- en: What to read next 👇🏾
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来读什么 👇🏾
- en: '[](/merge-sort-explained-a-data-scientists-algorithm-guide-2f79d5034ba3?source=post_page-----853b2286e5ab--------------------------------)
    [## Merge Sort Explained–A Data Scientist’s Algorithm Guide'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/merge-sort-explained-a-data-scientists-algorithm-guide-2f79d5034ba3?source=post_page-----853b2286e5ab--------------------------------)
    [## 合并排序解释–数据科学家的算法指南'
- en: An explanation of the merge sort algorithm with an implementation in Python
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一种合并排序算法的解释及其在 Python 中的实现
- en: towardsdatascience.com](/merge-sort-explained-a-data-scientists-algorithm-guide-2f79d5034ba3?source=post_page-----853b2286e5ab--------------------------------)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/merge-sort-explained-a-data-scientists-algorithm-guide-2f79d5034ba3?source=post_page-----853b2286e5ab--------------------------------)
