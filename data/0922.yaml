- en: 'geotiff.js: How to Get Projected GeoTIFF Data for a Latitude-Longitude Coordinate'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'geotiff.js: 如何获取纬度-经度坐标的投影 GeoTIFF 数据'
- en: 原文：[https://towardsdatascience.com/geotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0?source=collection_archive---------0-----------------------#2023-03-12](https://towardsdatascience.com/geotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0?source=collection_archive---------0-----------------------#2023-03-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/geotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0?source=collection_archive---------0-----------------------#2023-03-12](https://towardsdatascience.com/geotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0?source=collection_archive---------0-----------------------#2023-03-12)
- en: '![](../Images/5196241c4e66b4b7d69b25384b8338d6.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5196241c4e66b4b7d69b25384b8338d6.png)'
- en: Image by author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Reprojecting latitude and longitude coordinates into a GeoTIFF’s coordinate
    system using Javascript, and querying data with geotiff.js
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Javascript 将纬度和经度坐标重新投影到 GeoTIFF 的坐标系统中，并使用 geotiff.js 查询数据
- en: '[](https://medium.com/@potion_cellar?source=post_page-----87ca437b5aa0--------------------------------)[![Thomas
    Horner](../Images/9a50d463fb872d97f10f3ed454c08ac0.png)](https://medium.com/@potion_cellar?source=post_page-----87ca437b5aa0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----87ca437b5aa0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----87ca437b5aa0--------------------------------)
    [Thomas Horner](https://medium.com/@potion_cellar?source=post_page-----87ca437b5aa0--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@potion_cellar?source=post_page-----87ca437b5aa0--------------------------------)[![托马斯·霍纳](../Images/9a50d463fb872d97f10f3ed454c08ac0.png)](https://medium.com/@potion_cellar?source=post_page-----87ca437b5aa0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----87ca437b5aa0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----87ca437b5aa0--------------------------------)
    [托马斯·霍纳](https://medium.com/@potion_cellar?source=post_page-----87ca437b5aa0--------------------------------)'
- en: ·
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9e4260fa5487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0&user=Thomas+Horner&userId=9e4260fa5487&source=post_page-9e4260fa5487----87ca437b5aa0---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----87ca437b5aa0--------------------------------)
    ·10 min read·Mar 12, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F87ca437b5aa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0&user=Thomas+Horner&userId=9e4260fa5487&source=-----87ca437b5aa0---------------------clap_footer-----------)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F9e4260fa5487&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0&user=Thomas+Horner&userId=9e4260fa5487&source=post_page-9e4260fa5487----87ca437b5aa0---------------------post_header-----------)
    发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----87ca437b5aa0--------------------------------)
    · 10 min 阅读 · 2023年3月12日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F87ca437b5aa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0&user=Thomas+Horner&userId=9e4260fa5487&source=-----87ca437b5aa0---------------------clap_footer-----------)'
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F87ca437b5aa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0&source=-----87ca437b5aa0---------------------bookmark_footer-----------)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F87ca437b5aa0&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgeotiff-js-how-to-get-projected-data-for-a-latitude-longitude-coordinate-87ca437b5aa0&source=-----87ca437b5aa0---------------------bookmark_footer-----------)'
- en: Javascript has been used for many years to provide interactive webmaps that
    are usually composed of vector data and RGB image tiles. These simplistic frontends
    have historically required more capable languages and server technologies to actually
    provide and render the geospatial data being visualized, in addition to mechanisms
    for querying or analyze them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Javascript 已被使用多年来提供交互式网页地图，这些地图通常由矢量数据和 RGB 图像切片组成。这些简单的前端 historically 需要更强大的语言和服务器技术来实际提供和渲染正在可视化的地理空间数据，以及查询或分析它们的机制。
- en: As the Javascript language and ecosystem has matured, what was once almost impossible
    has become straightforward and even decently performant. Thanks to the work of
    dedicated open source developers, it is now fairly easy to work directly with
    geospatial raster data both in the frontend (browser) or backend (*NodeJS*). There
    is even multithreading support!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Javascript语言和生态系统的成熟，曾经几乎不可能的事情现在变得简单而且性能不错。多亏了专注的开源开发者，现在在前端（浏览器）或后端（*NodeJS*）直接处理地理空间光栅数据变得相当容易。甚至还有多线程支持！
- en: 'Let’s take a look at one piece of functionality that used to be quite difficult
    to do in pure Javascript: querying geospatial raster data for a specific coordinate.
    These datasets are most typically available in GeoTIFF format, and to work with
    that we’ll use one of the more popular libraries for working with the file format:
    *geotiff.js.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在纯Javascript中曾经非常困难的一个功能：查询特定坐标的地理空间光栅数据。这些数据集通常以GeoTIFF格式提供，为了处理这些数据集，我们将使用一个更流行的处理文件格式的库：*geotiff.js*。
- en: It is easy to use this library to extract pixel data from a GeoTIFF. But, given
    a latitude-longitude coordinate, how do you figure out what pixel to read from?
    What if the GeoTIFF is in a projected coordinate system?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个库从GeoTIFF中提取像素数据很简单。但是，给定一个纬度-经度坐标，你怎么知道读取哪个像素？如果GeoTIFF在一个投影坐标系统中怎么办？
- en: 'Unlike *GDAL* (a popular opensource geospatial library, which has bindings
    for NodeJS), *geotiff.js* has no reprojection functionality: it merely parses
    GeoTIFF files. This means our solution is going to be a little more involved than
    the equivalent approach in *GDAL,* which, at its simplest, is a single command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与*GDAL*（一个流行的开源地理空间库，具有NodeJS绑定）不同，*geotiff.js*没有重投影功能：它仅仅是解析GeoTIFF文件。这意味着我们的解决方案将比*GDAL*中的等效方法稍微复杂一些，后者在最简单的情况下只需一个命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We’ll just need to write some code to mirror the extra work that GDAL is doing
    under the hood: extracting the projection information from the raster, reprojecting
    the latitude-longitude coordinates into the raster’s coordinate system, and determining
    which pixel of the raster that point applies to.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需编写一些代码来镜像GDAL在后台进行的额外工作：从光栅中提取投影信息，将纬度-经度坐标重新投影到光栅的坐标系统中，并确定该点适用于光栅的哪个像素。
- en: Why Not Just Reproject the Entire GeoTIFF First?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不首先重新投影整个GeoTIFF？
- en: This entire process can mostly be circumvented by reprojecting our GeoTIFF into
    a latitude-longitude coordinate system like EPSG:4326\. But for many projected
    coordinate systems, this introduces serious inaccuracies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的GeoTIFF重新投影到像EPSG:4326这样的纬度-经度坐标系统，整个过程大部分可以被规避。但对于许多投影坐标系统，这会引入严重的不准确性。
- en: 'For example, let’s consider querying the NBM weather model to get the forecasted
    temperature for the summit of Little Bear Peak, Colorado:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑查询NBM天气模型以获取科罗拉多州小熊峰顶的预测温度：
- en: '![](../Images/0a24cfc9e19b012557b65ffcd2903554.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a24cfc9e19b012557b65ffcd2903554.png)'
- en: Image by author
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: This example was chosen as it is near the edge of a pixel in the dataset.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这个例子是因为它靠近数据集中一个像素的边缘。
- en: 'Now let’s reproject the dataset into EPSG:4326 using nearest-neighbor resampling.
    The same coordinate now returns a different value:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用最近邻重采样将数据集重新投影到EPSG:4326。相同的坐标现在返回了不同的值：
- en: '![](../Images/0844fda3e81165158fe1d5a000d53369.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0844fda3e81165158fe1d5a000d53369.png)'
- en: Image by author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: 'We can improve the reprojection slightly by using a different resampling method,
    such as bilinear:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用不同的重采样方法来稍微改进重投影，比如双线性插值：
- en: '![](../Images/3f51da4954cd2d1b19b3cb25bdf3b944.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f51da4954cd2d1b19b3cb25bdf3b944.png)'
- en: Image by author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: But clearly, we’ve lost some of the original weather model information. We can
    reduce how much information is lost by making the reprojected raster much, much
    larger, but even at massive sizes there will still be edge cases where locations
    near the boundary of a pixel will not pull the original weather model data correctly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但显然，我们丢失了一些原始天气模型的信息。我们可以通过使重新投影的光栅图像变得非常非常大来减少丢失的信息量，但即使在巨大的尺寸下，仍然会有一些边缘情况，其中靠近像素边界的地点无法正确提取原始天气模型数据。
- en: Whether or not this is a big deal depends on the purpose and resolution of your
    data. If you’re using a high resolution digital elevation model to construct elevation
    profile graphs for routes that are miles long, then it’s probably not much of
    a concern if the elevation data is slightly off in places. Conversely, if you’re
    using weather model data that has coarse resolution, then being in the wrong grid
    cell could result in a significantly different forecast for an area.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否重要取决于数据的用途和分辨率。如果你使用的是高分辨率的数字高程模型来为长达数英里的路线构建高程剖面图，那么如果高程数据在某些地方略有偏差可能不是什么大问题。相反，如果你使用的是分辨率较粗的气象模型数据，那么处于错误的网格单元可能会导致该区域的预测结果有显著不同。
- en: '***Overall: it’s best to use the original projection for querying raw data
    from a geospatial raster.***'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '***总体而言：最好使用原始投影来查询来自地理空间光栅的原始数据。***'
- en: Reprojecting Latitude and Longitude to the Raster Coordinate System
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将纬度和经度重投影到光栅坐标系统
- en: The first step is to get the GeoTIFF’s projection information and use that to
    reproject our desired coordinate(s) into the raster’s coordinate system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是获取GeoTIFF的投影信息，并使用该信息将我们期望的坐标重新投影到光栅的坐标系统中。
- en: 'A large part of what makes a GeoTIFF a geospatial raster, instead of a regular
    TIFF image, is the use of GeoKeys (per [the OGC GeoTIFF spec](https://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_underlying_tiff_requirements)).
    We can read the GeoKeys for a given raster using geotiff.js:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使GeoTIFF成为地理空间光栅而非普通TIFF图像的一个重要因素是使用GeoKeys（参见[OGC GeoTIFF规范](https://docs.opengeospatial.org/is/19-008r4/19-008r4.html#_underlying_tiff_requirements)）。我们可以使用geotiff.js读取给定光栅的GeoKeys：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will pass these GeoKeys to a projection library which will handle the heavy
    lifting, as projections tend to be quite complicated!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这些GeoKeys传递给一个投影库，它将处理繁重的计算，因为投影往往是相当复杂的！
- en: 'For instance, weather model data for North America tends to be in a Lambert
    conformal conic projection. If we start with a latitude-longitude coordinate derived
    from an ellipsoidal datum (commonly WGS84), then we’re faced with a rather complicated
    formula:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，北美的气象模型数据往往使用Lambert等角圆锥投影。如果我们从一个源自椭球基准（通常是WGS84）的纬度经度坐标开始，那么我们会面临一个相当复杂的公式：
- en: '![](../Images/4619872ac569874dee5d248f682cbb47.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4619872ac569874dee5d248f682cbb47.png)'
- en: 'Snyder, John (1987). [“Map Projections:A Working Manual (USGS Professional
    Paper: 1395)”](https://pubs.er.usgs.gov/publication/pp1395) — Public Domain'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Snyder, John (1987). [“地图投影：工作手册（USGS专业论文：1395）”](https://pubs.er.usgs.gov/publication/pp1395)
    — 公有领域
- en: No need to reinvent the wheel, as the open source community has poured years
    of works into comprehensive reprojection libraries which easily handle all sorts
    of transformations between complicated map projections.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要重新发明轮子，因为开源社区已经投入了多年的工作，创建了全面的重投影库，这些库可以轻松处理各种复杂的地图投影之间的转换。
- en: For Javascript, one of the most robust, popular, and full-featured libraries
    is [*Proj4js*](https://github.com/proj4js/proj4js), which is an offshoot of the
    common [*proj*](https://proj.org/)library that powers *GDAL*. We’ll just need
    to generate a *proj* string using our raster’s GeoKeys and pass the final string
    to the library.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JavaScript，最强大、最流行且功能齐全的库之一是[*Proj4js*](https://github.com/proj4js/proj4js)，它是常见的[*proj*](https://proj.org/)库的分支，支持*GDAL*。我们只需使用光栅的GeoKeys生成一个*proj*字符串，并将最终字符串传递给库即可。
- en: 'However, there are a lot of valid GeoKeys:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有很多有效的GeoKeys：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It may be worth using a helper library like [*geotiff-geokeys-to-proj4*](https://github.com/matafokka/geotiff-geokeys-to-proj4)
    to handle the proper translation of *geotiff.js*’s geokeys object into a *proj*
    string. In fact, the above comment block is from that library.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似[*geotiff-geokeys-to-proj4*](https://github.com/matafokka/geotiff-geokeys-to-proj4)的辅助库来处理*geotiff.js*的geokeys对象到*proj*字符串的正确转换可能是值得的。实际上，上面的注释块来自于那个库。
- en: 'With those two libraries installed, we don’t need much to code to set up our
    reprojection functionality:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这两个库后，我们无需编写太多代码就能设置我们的重投影功能：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We’ve now created a proj projection object called “projection.” It’s very easy
    to use:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在创建了一个名为“projection”的proj投影对象。使用起来非常简单：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above code reprojects the latitude-longitude coordinates into the raster
    coordinate system (likely meters or feet).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将纬度经度坐标重新投影到光栅坐标系统（可能是米或英尺）。
- en: 'Now we need to get the actual raster pixel associated with those new coordinates.
    First, let’s get some information about the size of the raster and its bounding
    box:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要获取与这些新坐标关联的实际栅格像素。首先，让我们获取有关栅格大小及其边界框的一些信息：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above code establishes a relationship between the size of the raster in
    pixels and the actual coordinates/size of the raster in the projected coordinate
    system.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码建立了栅格像素大小与投影坐标系统中栅格的实际坐标/大小之间的关系。
- en: We then take our projected coordinate relative to the origin coordinates of
    the raster and see where it falls in relation to the width and height of the raster.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将投影坐标相对于栅格的原点坐标进行处理，查看它在栅格的宽度和高度中的位置。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we have a pixel value for the original latitude-longitude coordinate!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了原始经纬度坐标的像素值！
- en: You’ll probably want to ensure this pixel is actually inside the raster. If
    the original coordinate didn’t intersect the raster, then pixelX or pixelY could
    be negative or greater than the width/height of the raster.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想确保这个像素确实在栅格内。如果原始坐标没有与栅格相交，那么 pixelX 或 pixelY 可能会是负值或大于栅格的宽度/高度。
- en: Extracting the GeoTIFF Data for the Pixel
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取像素的 GeoTIFF 数据
- en: If the pixel is inside the raster, then we have two methods of extracting the
    data, considering a GeoTIFF with one single band.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像素在栅格内，那么考虑到一个单一波段的 GeoTIFF，我们有两种提取数据的方法。
- en: 'The first method is to pass a 1x1 pixel window to *geotiff.js*’s “readRasters”
    function:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是将一个 1x1 像素的窗口传递给 *geotiff.js* 的“readRasters”函数：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This method is straightforward and obvious, but there is a small overhead to
    calling “readRasters” which could add up if you are querying thousands of coordinates.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法简单明了，但调用“readRasters”有一个小的开销，如果你查询数千个坐标，这个开销可能会累积。
- en: 'In that case, there may be a slight performance benefit with a different approach
    — at the cost of RAM, which could be considerable for very large GeoTIFFs. We
    can read the entire raster into memory as an ArrayBuffer:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，采用不同的方法可能会带来轻微的性能提升——但代价是 RAM，这对于非常大的 GeoTIFF 可能会相当可观。我们可以将整个栅格读取到内存中作为
    ArrayBuffer：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we just need to grab the corresponding index:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们只需要获取相应的索引：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In practice, *geotiff.js* caches tiles and stripes internally, so the performance
    gain is only slim at best, and generally unnoticeable for modest datasets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，*geotiff.js* 在内部缓存瓦片和条带，因此性能提升充其量是微乎其微的，并且对于适中的数据集通常不明显。
- en: Thus, this approach will only provide a (minor) speed benefit if querying a
    lot of data that is spread across a majority of the stripes or tiles in the GeoTIFF.
    Otherwise, the overhead of reading the entire image, including tiles or stripes
    that are unused, will outweigh the potential performance gain, though this can
    be mitigated by reading a window that is sized to the minimum and maximum x and
    y or the coordinate collection.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果查询的数据分布在 GeoTIFF 中的大多数条带或瓦片上，这种方法只会提供（轻微的）速度提升。否则，读取整个图像的开销，包括未使用的瓦片或条带，将超过潜在的性能提升，不过这可以通过读取一个大小调整到最小和最大
    x 和 y 或坐标集合的窗口来缓解。
- en: 'Using the above techniques, it is possible to implement the following features
    in an interactive web map, either entirely in the browser or with a basic NodeJS
    API:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述技术，可以在交互式网页地图中实现以下功能，无论是完全在浏览器中还是通过基本的 NodeJS API：
- en: Clicking on a web map to get raster data for a specific point
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击网页地图以获取特定点的栅格数据
- en: Labelling point features with underlying raster data (e.g. a weather map with
    city names showing the forecast temperature)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用底层栅格数据对点特征进行标注（例如，显示天气预报温度的城市名称的天气地图）
- en: Performing basic geometry operations against raster data (such as an intersection
    operation using a collection of points or a bounding box), and displaying that
    information in a table or exporting it as a CSV
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对栅格数据执行基本的几何操作（例如，使用点集合或边界框进行交集操作），并将该信息显示在表格中或导出为 CSV
- en: Generating charts or lists of data for a 2d cross-section or line (for instance,
    an elevation profile)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为二维横截面或线生成图表或数据列表（例如，海拔剖面）
- en: Performing statistical analysis and data transformations on raw GeoTIFF data
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对原始 GeoTIFF 数据进行统计分析和数据转换
- en: This sort of functionality (let alone actually rendering geospatial raster data
    onto a map) has traditionally required specialized GIS server software and dedicated
    infrastructure, with interactive web maps doing little more than sending requests
    to the server and displaying the response. As the Javascript ecosystem evolves,
    browsers are becoming more capable of parsing geospatial data and thus reducing
    reliance on specialized backend technology.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种功能（更不用说实际将地理空间栅格数据渲染到地图上）传统上需要专用的 GIS 服务器软件和专用基础设施，交互式网络地图的作用仅仅是向服务器发送请求并显示响应。随着
    JavaScript 生态系统的发展，浏览器变得越来越能够解析地理空间数据，从而减少了对专用后端技术的依赖。
- en: Traditionally, a popular method to make GeoTIFF/geospatial raster data available
    to web maps was having a GIS server application providing common Open Geospatial
    Consortium interfaces — such as WMS (Web Map Service) or WMTS (Web Map Tile Service).
    These interfaces would allow the browser to request image files or tiles of the
    data, which would be rendered server-side and sent to the browser as RGB image
    files.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，使 GeoTIFF/地理空间栅格数据可供网络地图使用的一种流行方法是拥有一个提供通用开放地理空间联盟接口的 GIS 服务器应用程序——如 WMS（Web
    地图服务）或 WMTS（Web 地图瓦片服务）。这些接口允许浏览器请求图像文件或数据的瓦片，这些图像在服务器端渲染后作为 RGB 图像文件发送到浏览器。
- en: The server could also provide a WCS (Web Coverage Service) interface, which
    would let the browser query the underlying geospatial raster data for specific
    coordinates. If using proprietary GIS server technology (such as Esri’s ArcGIS
    products), the endpoints and syntax may be a little different, but the end result
    is the same.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器还可以提供 WCS（Web 覆盖服务）接口，允许浏览器查询特定坐标的底层地理空间栅格数据。如果使用专有的 GIS 服务器技术（如 Esri 的 ArcGIS
    产品），端点和语法可能会有所不同，但最终结果是相同的。
- en: However, the recent maturity of the cloud-optimized GeoTIFF standard plus the
    ability to access and render the data directly in the browser using *openlayers*
    + *geotiff.js* has removed the need for a GIS server providing WMS and WMTS endpoints,
    at least for some scenarios. The querying techniques described in this article
    show one method of removing the need for a WCS or query endpoint.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着云优化 GeoTIFF 标准的成熟以及使用 *openlayers* + *geotiff.js* 直接在浏览器中访问和渲染数据的能力，这种技术在某些场景下已经消除了对提供
    WMS 和 WMTS 端点的 GIS 服务器的需求。本文描述的查询技术展示了一种去除对 WCS 或查询端点需求的方法。
- en: Instead, one can merely host COGs using their existing cloud provider (for instance,
    an S3 bucket) and make the web browser responsible for parsing and working with
    the geospatial data. Organizations with NodeJS backends can consolidate GIS functionality
    into these stacks and reduce the need for specialized software and additional
    hardware.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 取而代之的是，可以仅仅利用现有的云提供商（例如，一个 S3 存储桶）来托管 COGs，并让网络浏览器负责解析和处理地理空间数据。具有 NodeJS 后端的组织可以将
    GIS 功能整合到这些堆栈中，从而减少对专用软件和额外硬件的需求。
- en: Finally, another huge benefit of being able to do more in the browser with geospatial
    raster data is the reduction or elimination of the need for internet connectivity.
    For smartphone mapping applications, particularly those intended for use in remote
    areas, this provides an avenue to provide offline geospatial tools for apps that
    are already written in Javascript.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，能够在浏览器中处理更多地理空间栅格数据的另一个巨大好处是减少或消除了对互联网连接的需求。对于智能手机地图应用程序，特别是那些旨在远程地区使用的应用程序，这为已经用
    JavaScript 编写的应用程序提供了一种离线地理空间工具的途径。
- en: Several of these apps are very popular and provide functionality such as slope
    angle calculation, terrain profile charts, saved weather maps, etc. These apps
    will let you save maps or areas for offline usage — but once the user is offline,
    many features stop working as they rely on servers to actually parse and analyze
    the geospatial data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序中有几款非常流行，提供了诸如坡度角计算、地形剖面图、保存的天气地图等功能。这些应用允许你保存地图或区域以供离线使用——但一旦用户离线，许多功能会停止工作，因为它们依赖于服务器来实际解析和分析地理空间数据。
- en: These features don’t have to break once internet access is lost — the technique
    mentioned in this article is one of many that can allow for the app to remain
    functional while offline.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能在失去互联网连接后不一定会中断——本文提到的技术只是众多可以让应用在离线时仍然保持功能的技术之一。
