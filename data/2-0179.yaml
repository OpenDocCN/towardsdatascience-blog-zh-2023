- en: A Comprehensive Guide to Using Pandas in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pandas进行数据处理的全面指南
- en: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-using-pandas-in-python-4bc32a14f2ec](https://towardsdatascience.com/a-comprehensive-guide-to-using-pandas-in-python-4bc32a14f2ec)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-using-pandas-in-python-4bc32a14f2ec](https://towardsdatascience.com/a-comprehensive-guide-to-using-pandas-in-python-4bc32a14f2ec)
- en: Learn how to work with one of the most famous data manipulation libraries in
    Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何使用Python中最著名的数据处理库之一
- en: '[](https://ivopbernardo.medium.com/?source=post_page-----4bc32a14f2ec--------------------------------)[![Ivo
    Bernardo](../Images/39887b6f3e63a67c0545e87962ad5df0.png)](https://ivopbernardo.medium.com/?source=post_page-----4bc32a14f2ec--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4bc32a14f2ec--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4bc32a14f2ec--------------------------------)
    [Ivo Bernardo](https://ivopbernardo.medium.com/?source=post_page-----4bc32a14f2ec--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ivopbernardo.medium.com/?source=post_page-----4bc32a14f2ec--------------------------------)[![Ivo
    Bernardo](../Images/39887b6f3e63a67c0545e87962ad5df0.png)](https://ivopbernardo.medium.com/?source=post_page-----4bc32a14f2ec--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4bc32a14f2ec--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4bc32a14f2ec--------------------------------)
    [Ivo Bernardo](https://ivopbernardo.medium.com/?source=post_page-----4bc32a14f2ec--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4bc32a14f2ec--------------------------------)
    ·21 min read·Jul 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4bc32a14f2ec--------------------------------)
    ·阅读时间21分钟·2023年7月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/47725403daa0167f7868b12b8ce2150f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47725403daa0167f7868b12b8ce2150f.png)'
- en: Photo by [stonewyq](https://unsplash.com/pt-br/@stonewyq) @ Unsplash.com
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [stonewyq](https://unsplash.com/pt-br/@stonewyq) @ Unsplash.com
- en: When you start to work with Python in the context of Data Analysis, Engineering
    or Science, `pandas`is (likely) one of the first libraries that you will have
    to learn about. This incredible library enables you to manipulate two very important
    objects in the Python language — the 1 dimensional `Series` and the two dimensional
    `DataFrame`. These objects are part of a lot of data pipelines and mastering them
    is crucial to start your Pytyon career.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始在数据分析、工程或科学的上下文中使用Python时，`pandas`（可能）是你必须学习的第一个库之一。这个不可思议的库使你能够操作Python语言中的两个非常重要的对象——一维的`Series`和二维的`DataFrame`。这些对象是许多数据管道的一部分，掌握它们对开始你的Python职业生涯至关重要。
- en: Dataframes are widely used throughout data science and analytics, as they enable
    the creation of multidimensional and multi-type objects. The goal of this post
    is to provide a very complete guide on how to use some famous `pandas` functions
    and how to work with the most important features of the library. Hopefully, after
    reading this guide, you will be ready to work with the most important `pandas`
    eatures. It may also be very common that you are migrating from a SQL background,
    so I’ll try to leave a comparison with SQL code throughout some instructions in
    the post, so that it is easier to compare the instructions between the two frameworks.
    But, keep in mind that knowing SQL is definitely not a requirement to learn `pandas`
    !
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框在数据科学和分析中广泛使用，因为它们允许创建多维和多类型的对象。本文的目标是提供一个非常完整的指南，介绍如何使用一些著名的`pandas`函数以及如何操作库中最重要的功能。希望在阅读完本指南后，你能准备好使用最重要的`pandas`功能。你可能也很常从SQL背景迁移过来，所以我会尽量在一些说明中提供与SQL代码的比较，以便更容易比较两个框架之间的指令。但是，请记住，了解SQL并不是学习`pandas`的必要条件！
- en: 'Throughout this post, we’ll use a variety of data to learn about `pandas`,
    namely:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将使用各种数据来深入了解`pandas`，即：
- en: We’ll build our own `pandas` Series and DataFrames using object creation commands.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将通过对象创建命令构建自己的`pandas` Series和DataFrames。
- en: We’ll work with three datasets containing information about stock prices, available
    here ([https://www.kaggle.com/datasets/rprkh15/sp500-stock-prices](https://www.kaggle.com/datasets/rprkh15/sp500-stock-prices))
    — namely, we’ll use *Ford, Apple* and *Abbvie* stock price data.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用包含股票价格信息的三个数据集，这些数据集可以在这里找到（[https://www.kaggle.com/datasets/rprkh15/sp500-stock-prices](https://www.kaggle.com/datasets/rprkh15/sp500-stock-prices)）——具体来说，我们将使用*福特、苹果*和*Abbvie*的股票价格数据。
- en: 'In this post we’ll cover the most famous `pandas` features, namely:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将介绍`pandas`最著名的功能，即：
- en: Creating dataframes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据框
- en: Selecting rows
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择行
- en: Selecting columns
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择列
- en: Combining dataframes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并数据框
- en: Plotting data
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制数据
- en: Grouping data
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据分组
- en: Chaining functions
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接函数
- en: Without further ado, let’s start!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，让我们开始吧！
- en: Importing the Library
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入库
- en: Before we start, we need to import the `pandas` library into our Python environment
    to make sure that we can work with all the functions we will see throughout the
    post.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要将 `pandas` 库导入到 Python 环境中，以确保我们可以使用文章中会看到的所有函数。
- en: If you are new to Python, this is a standard in the language. We must import
    external libraries before using them in our code, as external libraries are not
    available on our environment when we install Python (on Windows) or in the base
    version (available on Mac or Ubuntu). This concept of library is pretty common
    in Open Source languages, as it is the main way that the community uses to extend
    the base features of the language.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Python 新手，这是语言中的一个标准。我们必须在代码中使用外部库之前导入它们，因为在安装 Python（在 Windows 上）或在基本版本（可在
    Mac 或 Ubuntu 上获得）时，外部库在我们的环境中不可用。这种库的概念在开源语言中很常见，因为这是社区用来扩展语言基础功能的主要方式。
- en: 'Importing pandas is easy, we just need to run the following code in our Python
    Notebook or executable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 pandas 很简单，我们只需在 Python Notebook 或可执行文件中运行以下代码：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And now you must be questioning yourself.. why `pandas as pd` ? Mostly, this
    is done so that we can use the library’s functions using an *alias*. As we will
    need to refer the library name every time we call a function in our code, it will
    be easier to use a shorter *alias* like `pd`. Pandas users commonly use this standard,
    and you see it in a lot of code scattered on the internet.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你一定会问自己……为什么 `pandas as pd`？主要是为了让我们使用库的函数时可以使用 *别名*。由于我们每次在代码中调用函数时都需要提到库的名称，使用像
    `pd` 这样的较短 *别名* 会更方便。Pandas 用户通常使用这个标准，你可以在互联网上看到许多相关的代码。
- en: The Pandas Series
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas Series
- en: No, Pandas do not have a TV Show!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不，Pandas 没有电视节目！
- en: 'A `pandas` Series is a uni-dimensional object able to store one data type at
    a single time. For example, let’s create a simple `pandas` Series with different
    integers using the `pd.Series` function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` Series 是一个一维对象，能够一次存储一种数据类型。例如，让我们使用 `pd.Series` 函数创建一个简单的 `pandas`
    Series，其中包含不同的整数：'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/805a5e55ad9771b026d51a90980000cb.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/805a5e55ad9771b026d51a90980000cb.png)'
- en: Output of pd.Series command — Image by Author
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.Series` 命令的输出——作者图片'
- en: 'Let me pause here for a moment. `pd.Series` means that we are calling the `Series`
    method from the `pd` (alias for pandas!) library we have loaded in our environment.
    This is a standard syntax in the Python language: *library.method*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我在这里暂停一下。`pd.Series` 意味着我们在调用从 `pd`（pandas 的别名！）库中加载的 `Series` 方法。这是 Python
    语言中的标准语法：*library.method*
- en: 'Our series contains 5 integers: 10, 20, 30, 40, 50\. In the output of our command,
    we also see `dtype: int 64` . By default pandas, stores integers has a 64-bit
    integer, allowing for a larger range of values when defining our numbers.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的 Series 包含 5 个整数：10、20、30、40、50。在命令的输出中，我们还看到了 `dtype: int 64`。默认情况下，pandas
    存储整数时使用 64 位整数，这允许在定义数字时拥有更大的值范围。'
- en: 'Apart from integers, we can also store floats in a `pd.Series`by passing numbers
    with decimal places in the `pd.Series`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了整数，我们还可以通过在 `pd.Series` 中传递带小数点的数字来存储浮点数：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/e603bffda8a4304d6e945eee8f02f9b4.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e603bffda8a4304d6e945eee8f02f9b4.png)'
- en: Output of pd.Series command with float numbers — Image by Author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.Series` 命令的浮点数输出——作者图片'
- en: Notice that our `dtype` is now `float64` . Any calculation done on top of these
    values will keep the numeric precision. We’ll see that in a bit!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们的 `dtype` 现在是 `float64`。对这些值进行的任何计算将保持数值精度。稍后我们将看到这一点！
- en: 'Naturally, we can also store strings in a `pd.Series` object:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，我们也可以在 `pd.Series` 对象中存储字符串：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/939a50d9799f57cfbbb4f5f3413f1635.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/939a50d9799f57cfbbb4f5f3413f1635.png)'
- en: Output of pd.Series command with strings — Image by Author
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.Series` 命令的字符串输出——作者图片'
- en: 'Don’t get too confused but in `pandas`, strings are stored with the *object*
    data type. In fact, most of the data (except time based datatypes, categoricals
    or boolean) that is not either `integers` or `floats` will be stored as an `object`
    data type — for example, defining a `Series` with nested lists:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不要太困惑，不过在 `pandas` 中，字符串是以 *object* 数据类型存储的。实际上，大多数数据（除了基于时间的数据类型、分类数据或布尔值）如果既不是
    `integers` 也不是 `floats`，都将以 `object` 数据类型存储——例如，定义一个包含嵌套列表的 `Series`：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/6a2829c23708861d268b53af61a97195.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a2829c23708861d268b53af61a97195.png)'
- en: Output of pd.Series command with lists — Image by Author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: pd.Series 命令输出的列表 — 作者提供的图片
- en: If you don’t master lists in Python, don’t worry too much. This is a pretty
    uncommon operation and I’ve just done this experiment to show you how the `object`
    data type is not exclusive to text data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉Python中的列表，不必过于担心。这是一个相当不常见的操作，我只是做了这个实验来展示`object`数据类型并不限于文本数据。
- en: 'A caveat — watch out for situations when you try to define a mix of strings
    and numbers in a `pd.Series` , as this turns the entire object into a string (object):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个警告 — 当你尝试在`pd.Series`中定义字符串和数字的混合时要小心，因为这会将整个对象转变为字符串（对象）：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/b9508696d4824b4ad57915b73fb1f7e8.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9508696d4824b4ad57915b73fb1f7e8.png)'
- en: Output of pd.Series command with Mixed Data Types — Image by Author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 混合数据类型的pd.Series命令输出 — 作者提供的图片
- en: 'In Python, we can save our objects using the assignment operator `=`. Let’s
    save this last series in an object named `series_1`, so that we can conveniently
    call `pandas`methods on it later:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以使用赋值操作符`=`来保存我们的对象。让我们将这个最后的系列保存到名为`series_1`的对象中，以便我们可以方便地在其上调用`pandas`方法：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'One property we can access on our `pd.Series` object is the `dtype` property.
    Accessing the `dtype` will output the data type stored in our Series:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问`pd.Series`对象的一个属性是`dtype`属性。访问`dtype`会输出我们Series中存储的数据类型：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/123afd378a7d924f065a9200ad72d83e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/123afd378a7d924f065a9200ad72d83e.png)'
- en: Data Type Object — Image by Author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型对象 — 作者提供的图片
- en: This will print the type of object our series contains — in the `series_1` example,
    the data type stored in it is `'O'` , for object.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出我们的系列包含的对象类型 — 在`series_1`示例中，它存储的数据类型是`'O'`，表示对象。
- en: 'In this first section of the `pandas` guide, we’ve seen the `pd.Series` , an
    object type that is, in a nutshell:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pandas`指南的第一部分中，我们已经看到了`pd.Series`，这种对象类型可以简要描述为：
- en: '- Series are *unidimensional* objects that can store a single dimension at
    a time.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '- 系列是*一维*对象，每次只能存储一个维度。'
- en: '- They can only hold one single data type at a time.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '- 它们一次只能容纳一种数据类型。'
- en: But.. we still have a lot to cover in our guide! For example, what if we want
    to retrieve specific elements from our `pd.Series`? Can we do that in pandas?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是……我们的指南中还有很多内容要涵盖！例如，如果我们想从`pd.Series`中检索特定元素怎么办？我们可以在pandas中做到吗？
- en: Yes, we can! And to do it, we need to rely on the concept of an *index*, something
    we will see next!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们可以！为了做到这一点，我们需要依赖于*索引*的概念，这将在接下来看到！
- en: Indexing Series
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引系列
- en: One of the neat tricks of `pandas` is that we can attach indexes to our data
    and use a value to retrieve elements from our objects.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`的一个巧妙技巧是我们可以将索引附加到我们的数据上，并使用值来从对象中检索元素。'
- en: For example, let me create a `pandas` series with some *countries* and *capitals:*
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我创建一个包含一些*国家*和*首都*的`pandas`系列：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice that we have something new on our `series` — the index argument! This
    argument unlocks the ability to give custom indexes to our values:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在`series`中有了新东西 — 索引参数！这个参数解锁了为我们的值提供自定义索引的能力。
- en: '![](../Images/4fd826027b041ae1e2c2539171d3d3ab.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4fd826027b041ae1e2c2539171d3d3ab.png)'
- en: countries_series object — Image by Author
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: countries_series 对象 — 作者提供的图片
- en: On the left side we have the values for the indexes. On the right side, we have
    the values stored in the `pandas Series` —text values with the capitals of each
    city.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧是索引的值。右侧是存储在`pandas Series`中的值 — 每个城市的首都的文本值。
- en: Now, imagine that we would like to retrieve the capital of `Portugal`from the
    `countries_series`— before using the named index, one way to do that is to provide
    **the numeric index, in the following way:**
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想从`countries_series`中检索`Portugal`的首都 —— 在使用命名索引之前，一种方法是提供**数字索引，如下所示：**
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/65f4c9e027968a52fee57e9a856cc789.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65f4c9e027968a52fee57e9a856cc789.png)'
- en: Output of Numeric Indexing Example— Image by Author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 数字索引示例输出 — 作者提供的图片
- en: Even if we don’t provide any custom index to the `series` , the numeric **indexing
    will always work!**
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们没有为`series`提供任何自定义索引，数字**索引始终有效！**
- en: But, of course, this is not very practical. What if we have 200 countries in
    our table? How can we retrieve the data without having to memorize the 200 indexes?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但当然，这并不是很实际。如果我们的表格中有200个国家怎么办？我们如何在不记住200个索引的情况下检索数据？
- en: 'Luckily, we can also use named indexes to retrieve our data by providing the
    custom index inside the square brackets:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们还可以使用命名索引来通过在方括号中提供自定义索引来检索数据：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/65f4c9e027968a52fee57e9a856cc789.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65f4c9e027968a52fee57e9a856cc789.png)'
- en: Output of Named Indexing Example — Image by Author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 命名索引示例的输出——作者提供的图片
- en: 'This is a more meaningful way to extract data from our `pandas` Series. Using
    indexes, we can extract specific data points from our object. Another common technique
    we use `pandas`is using lists to extract multiple elements at the same time:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种更有意义的从我们的`pandas`系列中提取数据的方法。通过使用索引，我们可以从对象中提取特定的数据点。我们常用的另一种`pandas`技术是使用列表同时提取多个元素：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/b3eda564294e50d05c77b50e5f3eeb6e.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3eda564294e50d05c77b50e5f3eeb6e.png)'
- en: Output of Multiple Numeric Indexing Example — Image by Author
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 多重数值索引示例的输出——作者提供的图片
- en: In the example above, we are extracting two data points from our `countries_series`
    — the elements on position 1 and 2\. Remember that Python indexes start at 0.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们从`countries_series`中提取了两个数据点——位置1和2的元素。记住，Python 索引是从0开始的。
- en: 'With named indexes, we can also pass multiple elements by passing a list inside
    the index:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名索引，我们还可以通过在索引中传递列表来传递多个元素：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/b3eda564294e50d05c77b50e5f3eeb6e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3eda564294e50d05c77b50e5f3eeb6e.png)'
- en: Output of Multiple Numeric Indexing Example — Image by Author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 多重数值索引示例的输出——作者提供的图片
- en: Getting to know the series object is an essential step to understand the staple
    object of pandas — the dataframe! We’ve seen that series object can only store
    data in one dimension and with a single type every time. This is a major setback
    that would prevent us from being productive on our data pipelines and that’s why
    we need to study an object that is a bit more complex! Let’s see that next.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 了解系列对象是理解 pandas 中核心对象——数据框（dataframe）的关键步骤！我们已经看到系列对象只能存储一维数据，每次存储一种类型的数据。这是一个重大障碍，会影响我们在数据管道中的生产力，因此我们需要研究一个更复杂的对象！接下来我们来看看这个对象。
- en: Creating DataFrames
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据框
- en: So far, we’ve only dealt with unidimensional and single type objects. This is
    not very practical, of course, particularly when we want to work with more complex
    data.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只处理了一维和单一类型的对象。当然，这不太实用，特别是当我们想处理更复杂的数据时。
- en: 'Creating dataframes is relatively easy — we can use the `pd.DataFrame` function
    to create one:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据框相对简单——我们可以使用`pd.DataFrame`函数创建一个：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'My `df_example` contains one column with three integer rows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我的`df_example`包含一列和三行整数：
- en: '![](../Images/248e62a244fddc86d0cdff9797d3dd1b.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/248e62a244fddc86d0cdff9797d3dd1b.png)'
- en: Example of DataFrame Object — Image by Author
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框对象示例——作者提供的图片
- en: 'A good thing about dataframes is that they support two dimensional objects
    (rows and columns). Let’s add another column to our data, something that `Series`
    do not support:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框的一个好处是它们支持二维对象（行和列）。让我们在数据中添加另一列，这是`Series`不支持的：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our `df_example` now looks like the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`df_example`现在看起来如下：
- en: '![](../Images/7b07b45ab9be27acfa2cfaf335eaf2e3.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b07b45ab9be27acfa2cfaf335eaf2e3.png)'
- en: DataFrame with Two Rows— Image by Author
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 两行数据框——作者提供的图片
- en: 'Uh-oh! Our `pd.DataFrame` command adds data row-by-row. Notice that we passed
    a list of lists with the data: `[[''John'',''Joe'',''Anne''], [24,23,22]]` .'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 哦哦！我们的`pd.DataFrame`命令逐行添加数据。注意我们传递了一个包含数据的列表：`[['John','Joe','Anne'], [24,23,22]]`。
- en: 'We have two ways to correct this behavior, either we transpose our `DataFrame`
    , or change the data structure we will feed to the `pd.DataFrame` — let’s start
    by transposing the `dataframe` :'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种方法来纠正这种行为，要么转置我们的`DataFrame`，要么更改我们将提供给`pd.DataFrame`的数据结构——我们先从转置`dataframe`开始：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This operation results in the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作会产生以下结果：
- en: '![](../Images/683d4a0a74446002dfadef1843dd6b71.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/683d4a0a74446002dfadef1843dd6b71.png)'
- en: DataFrame with Two Columns — Image by Author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 两列数据框——作者提供的图片
- en: 'Calling the`.T` property of a DataFrame will transpose the object, switching
    the rows with the columns. A more meaningful way to pass data into `pd.DataFrame`
    in this format is to use the power of Python dictionaries:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 调用数据框的`.T`属性会转置对象，将行和列互换。以这种格式将数据传递到`pd.DataFrame`的更有意义的方法是使用 Python 字典的力量：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here’s an explanation of what this dataframe creates:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这个数据框所创建内容的解释：
- en: '`students_name` will contain three names: `John` , `Joe` and `Anne` .'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`students_name`将包含三个名字：`John`、`Joe`和`Anne`。'
- en: '`age` will contain three ages: 24, 23 and 22.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`age`将包含三个年龄：24、23和22。'
- en: '![](../Images/85bc412ea9673e3dcc19614bbfe15f72.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85bc412ea9673e3dcc19614bbfe15f72.png)'
- en: DataFrame with Column Names — Image by Author
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 带有列名的数据框——作者提供的图片
- en: 'With this object, we immediately give column names: `students_name` and `age`
    . The column names will take the values of the keys of dictionary we are passing.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个对象，我们立即给列命名：`students_name`和`age`。列名将采用我们传递的字典的键的值。
- en: 'We know that, in this table, we only have one row per student — it would be
    interesting to have the name of the student as our index, so that we can benefit
    from the index properties available in `pandas` objects. We can do that by declaring
    the student name as an index instead:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，在这个表格中，每个学生只有一行——将学生姓名作为我们的索引会很有趣，这样我们可以利用`pandas`对象中的索引属性。我们可以通过将学生姓名声明为索引来实现这一点：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our `df_example` has a new look:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`df_example`有了新的外观：
- en: '![](../Images/8ca91086a43c9f195acf5a6e0d58f77e.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ca91086a43c9f195acf5a6e0d58f77e.png)'
- en: DataFrame with Index — Image by Author
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 带有索引的数据框 — 图片由作者提供
- en: Notice that `student_name` is no longer a column but it is being used as an
    index of the object. This means that we can now use all the indexing properties
    we’ve learned before — can you guess what `df_example['John']` will yield?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`student_name`不再是一个列，而是作为对象的索引。这意味着我们现在可以使用之前学到的所有索引属性——你能猜到`df_example['John']`会返回什么吗？
- en: '![](../Images/11675c4fcc020e52b9b16dd2d4dd968d.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11675c4fcc020e52b9b16dd2d4dd968d.png)'
- en: Indexing `John` from df_example — Image by Author
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从df_example中索引`John` — 图片由作者提供
- en: 'An error! Why? As DataFrames are multidimensional objects, we are not able
    to index them directly, just like we’ve done with `pd.Series` but we can rely
    on the `loc` method:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 出错了！为什么？因为数据框是多维对象，我们不能像对`pd.Series`那样直接对它们进行索引，但我们可以依赖`loc`方法：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/a2b46c23a815f1403b366ede28bd0d12.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2b46c23a815f1403b366ede28bd0d12.png)'
- en: Indexing `John` from df_example — Image by Author
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从df_example中索引`John` — 图片由作者提供
- en: 'We can also retrieve multiple values from our `DataFrame` by passing a list
    into `loc` :'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过将列表传递给`loc`来从我们的`DataFrame`中检索多个值：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/a4c4151e323e8b86c22a1b1161454fd7.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4c4151e323e8b86c22a1b1161454fd7.png)'
- en: Indexing `John` and `Anne` from df_example — Image by Author
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从df_example中索引`John`和`Anne` — 图片由作者提供
- en: In the practical example, we’ll see how we can expand selecting and indexing
    values to columns.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际示例中，我们将看到如何将选择和索引值扩展到列中。
- en: 'Lastly, let’s see how to index our `pandas` DataFrame by numeric index. For
    that, we need to rely on `iloc` :'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看如何通过数字索引来索引我们的`pandas`数据框。为此，我们需要依赖`iloc`：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/a2b46c23a815f1403b366ede28bd0d12.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2b46c23a815f1403b366ede28bd0d12.png)'
- en: Indexing `John` from df_example — Image by Author
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从df_example中索引`John` — 图片由作者提供
- en: This command will index the first row of our DataFrame and it acts similarly
    to the named version of indexing `df_example.loc['John']` .
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将索引数据框的第一行，其作用类似于命名版本的索引`df_example.loc['John']`。
- en: We’ve had our introduction to `Series` and `DataFrame` — let’s now dive deeper
    into a more practical example using the stock price data. This will help you understand
    more about pandas and how to use this great library.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了`Series`和`DataFrame`——现在让我们深入了解一个更实际的示例，使用股票价格数据。这将帮助你更好地理解pandas及其用法。
- en: Reading CSVs into DataFrames
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取CSV文件到数据框中
- en: As I’ve detailed in the introduction of the blog post, we’re going to use a
    subset of a Kaggle dataset available [here](https://www.kaggle.com/datasets/rprkh15/sp500-stock-prices).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在博客文章的介绍中详细说明的，我们将使用一个Kaggle数据集的子集，[点击这里](https://www.kaggle.com/datasets/rprkh15/sp500-stock-prices)。
- en: 'Let’s start by reading two *CSV* files into DataFrame objects. This can be
    achieved by accessing the `pd.read_csv` function:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将两个*CSV*文件读入数据框对象。这可以通过访问`pd.read_csv`函数来实现：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We’ve created two different data frames called `apple` and `ford` that will
    hold different information for both companies.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个不同的数据框，分别叫做`apple`和`ford`，它们将保存两个公司的不同信息。
- en: Next, let’s do a small pipeline where we’ll explore the content and structure
    of our newly created objects!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们进行一个小的管道操作，探索我们新创建的对象的内容和结构！
- en: Exploring our Newly Available DataFrames
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索我们新获得的数据框
- en: 'In this chapter, we’ll look into the `apple` DataFrame. The first thing that
    most people do as soon as they have a dataframe object is to call the `.head()`
    and `.tail()` methods. Let’s see the output of both below:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究`apple`数据框。大多数人一拿到数据框对象，就会首先调用`.head()`和`.tail()`方法。我们来看一下下面这两个方法的输出：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/294470d58046afd16d7a253983178d4b.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/294470d58046afd16d7a253983178d4b.png)'
- en: apple DataFrame top 10 rows — Image by Author
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: apple数据框前10行 — 图片由作者提供
- en: The `head` command extracts the top *n* rows from a DataFrame and shows it in
    the output. *n* is the integer we pass inside the method of the DataFrame.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`head` 命令提取 DataFrame 的前 *n* 行，并在输出中显示。*n* 是我们在 DataFrame 方法中传递的整数。'
- en: '`tail` will, as you may have guessed, return the last *n* elements of the DataFrame:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`tail` 方法将返回 DataFrame 的最后 *n* 个元素：'
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/c27de34d6b7c8b3a38a079c02b2bbb5d.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c27de34d6b7c8b3a38a079c02b2bbb5d.png)'
- en: apple DataFrame bottom 10 rows — Image by Author
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: apple DataFrame 最底部 10 行 — 作者图片
- en: These two commands are analogous to sorting tables in SQL and calling `LIMIT`
    . For instance, a query ``SELECT * FROM `APPLE` LIMIT 10`` would achieve the same
    result (assuming the rows are sorted by date).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令类似于在 SQL 中对表进行排序和调用 `LIMIT`。例如，查询 ``SELECT * FROM `APPLE` LIMIT 10`` 会达到相同的结果（假设行按日期排序）。
- en: 'When we have a DataFrame, it’s extremely usual to understand it’s structure
    by using some neat `pandas` properties. Let’s detail some of them below:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个 DataFrame 时，使用一些整洁的 `pandas` 属性来了解其结构非常常见。以下是一些详细介绍：
- en: '`.shape` method that gives us the number of rows and columns, in the format
    of *(number of rows, number of columns)*. For example `apple.shape` will give
    us the information that our DataFrame contains 10.483 rows and 8 columns:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.shape` 方法给我们提供行和列的数量，格式为 *(行数, 列数)*。例如，`apple.shape` 会告诉我们 DataFrame 包含 10,483
    行和 8 列：'
- en: '![](../Images/1a8a7ade80dff8f0bd961d4407764217.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a8a7ade80dff8f0bd961d4407764217.png)'
- en: apple DataFrame shape
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: apple DataFrame 形状
- en: '`.columns` will give us a list of our column names:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.columns` 会给我们列名的列表：'
- en: '![](../Images/edda411f3c9dae3ae0d50ca51181af3b.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/edda411f3c9dae3ae0d50ca51181af3b.png)'
- en: apple DataFrame column names
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: apple DataFrame 列名
- en: '`.index` will give us a name of our indexes (row names):'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.index` 将给我们索引的名称（行名）：'
- en: '![](../Images/82c0020629d15e22c87122ce0387c0f1.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82c0020629d15e22c87122ce0387c0f1.png)'
- en: apple DataFrame row names
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: apple DataFrame 行名
- en: We haven’t provided an index to our DataFrame (it’s still using the automatic
    numeric index created by the `read.csv` function). We’ll learn how to assign meaningful
    named indexes in a bit.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有为 DataFrame 提供索引（它仍然使用 `read.csv` 函数创建的自动数字索引）。我们稍后会学习如何分配有意义的命名索引。
- en: '`.describe()` gives us a cool overview of all numeric columns:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.describe()` 为我们提供所有数值列的一个很好的概述：'
- en: '![](../Images/0804a02fcd94440bacbb982a9e9c6d1c.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0804a02fcd94440bacbb982a9e9c6d1c.png)'
- en: pandas Describe command — Image by Author
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: pandas Describe 命令 — 作者图片
- en: The `describe`method outputs important statistics about our numeric columns
    such as the average, standard deviation, minimum, quantile data and maximum of
    the distribution.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe` 方法输出关于我们数值列的重要统计数据，例如平均值、标准差、最小值、分位数数据和分布的最大值。'
- en: 'If you want to take a peek at the values of a certain column, you can select
    the column directly — there are two main ways to do this in pandas:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看某一列的值，你可以直接选择该列——在 pandas 中有两种主要方式来做到这一点：
- en: 'Using indexing, we pass the name of the column inside the square brackets (similarly
    to how we select rows in pd.Series):'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用索引，我们将列名放在方括号内（类似于如何在 pd.Series 中选择行）：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/0b595da4ba109159a6a948869755a6e1.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b595da4ba109159a6a948869755a6e1.png)'
- en: apple Volume column — Image by Author
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: apple Volume 列 — 作者图片
- en: 'We can also use the dot notation:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用点表示法：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/0b595da4ba109159a6a948869755a6e1.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b595da4ba109159a6a948869755a6e1.png)'
- en: apple Volume column — Image by Author
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: apple Volume 列 — 作者图片
- en: 'Python programmers tend to prefer the indexing method for two main reasons:
    it’s hard to pass the column name as a parameter in the dot notation and the latter
    does not support columns with blank spaces in the name.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Python 程序员倾向于使用索引方法，主要有两个原因：在点表示法中传递列名比较困难，且点表示法不支持名称中有空格的列。
- en: 'Oh, and want to retrieve an average or a standard deviation from a specific
    `pandas` column really fast? Just call the method on top of the object! For example,
    to calculate the `mean` Volume:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，如果你想快速从特定的 `pandas` 列中检索平均值或标准差，只需在对象上调用该方法！例如，计算 `mean` Volume：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](../Images/d9a1a8af147783a4ccc1f8ebf6a8f6ef.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d9a1a8af147783a4ccc1f8ebf6a8f6ef.png)'
- en: apple Volume mean — Image by Author
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: apple Volume 平均值 — 作者图片
- en: Now that we have a complex pandas DataFrame with multiple columns and rows,
    let’s learn how we can subset information expanding our knowledge with `iloc`
    and `loc`
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个复杂的 pandas DataFrame，包含多个列和行，让我们学习如何通过 `iloc` 和 `loc` 扩展我们的知识来子集信息。
- en: Subsetting Information
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子集信息
- en: More than explaining you every nuance of the indexing methods in Pandas, in
    this section we will answer questions about our data with code! In this way, you
    will be able to practice the translation between natural language and indexing
    methods that can be used in the library.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们不仅解释了Pandas索引方法的每一个细节，还通过代码回答了有关数据的问题！这样，你将能够练习自然语言与库中可以使用的索引方法之间的转换。
- en: 'Let’s start by trying to select the rows that will answer some questions:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始尝试选择能够回答一些问题的行：
- en: '*Can we select the days where Apple’s closing stock price was higher than $20?*'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们能选择苹果公司收盘股票价格高于20美元的天数吗？*'
- en: 'We can answer this question by providing `apple.loc[apple[‘Close''] > 20]`
    .This code will output all days that respect this condition:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过提供`apple.loc[apple[‘Close'] > 20]`来回答这个问题。这段代码将输出所有满足该条件的天数：
- en: '![](../Images/25dc10f1fba202927cd054cd9b31e01a.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25dc10f1fba202927cd054cd9b31e01a.png)'
- en: apple data subset — days with Closing Stock Price above 20$— Image by Author
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果数据子集 — 收盘股票价格高于20美元的天数 — 图片由作者提供
- en: This is a really feature that we can achieve by using `.loc` . Notice that inside
    the loc we now pass our condition`apple[‘Close'] > 20` and the output will respect
    that condition.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个真正的特性，我们可以通过使用`.loc`来实现。请注意，在loc中我们现在传递了条件`apple[‘Close'] > 20`，输出将尊重该条件。
- en: 'But.. what if I want to subset a range of values, for example: *Can we select
    the days where Apple’s closing stock price was between 20$ and 30$?*'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 但是……如果我想要一个值的范围子集，例如：*我们能选择苹果公司收盘股票价格在20美元到30美元之间的天数吗？*
- en: 'We can achieve that by wrapping our conditions in parenthesis inside the `.loc`
    :'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`.loc`中将条件用括号括起来来实现这一点：
- en: '`apple.loc[(apple[‘Close''] > 20) & (apple[‘Close''] < 30)]`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`apple.loc[(apple[‘Close''] > 20) & (apple[‘Close''] < 30)]`'
- en: The ampersand `(&)`connects our conditions with an AND condition, while the
    pipe symbol`(|)`is used for OR conditions.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 和符号`(&)`将我们的条件与AND条件连接起来，而管道符号`(|)`用于OR条件。
- en: '![](../Images/148f980d559b75dc27f5326a7fdf79d3.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/148f980d559b75dc27f5326a7fdf79d3.png)'
- en: apple data subset — days with Closing Stock Price above 20$ and below 30$ —
    Image by Author
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果数据子集 — 收盘股票价格在20美元以上且低于30美元的天数 — 图片由作者提供
- en: 'Let me translate the conditions above into SQL-like code:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我将上面的条件翻译成类似SQL的代码：
- en: 'On `apple.loc[apple[‘Close''] > 20]` , we are doing something similar to this
    query: `SELECT * FROM ''apple'' WHERE Close > 20` .'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`apple.loc[apple[‘Close'] > 20]`中，我们正在做类似于这个查询的操作：`SELECT * FROM 'apple' WHERE
    Close > 20`。
- en: 'On `apple.loc[(apple[‘Close''] > 20) & (apple[‘Close''] < 30)]` , we are doing
    something similar to this query: `SELECT * FROM ''apple'' WHERE Close > 20 AND
    Close < 30`.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`apple.loc[(apple[‘Close'] > 20) & (apple[‘Close'] < 30)]`中，我们正在做类似于这个查询的操作：`SELECT
    * FROM 'apple' WHERE Close > 20 AND Close < 30`。
- en: 'We can also retrieve specific columns from our multidimensional object using
    a magic trick. Just by adding a comma in the `.loc` , we can subset columns (that
    are considered the second dimension of the object):'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用一个魔法技巧从我们的多维对象中提取特定的列。只需在`.loc`中添加一个逗号，我们就可以对子集列（被认为是对象的第二维）：
- en: '[PRE27]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](../Images/f43438dc218f819621ea1964900633a8.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f43438dc218f819621ea1964900633a8.png)'
- en: apple data subset — Volume from days where stock price was above 20$ — Image
    by Author
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果数据子集 — 股票价格高于20美元的天数 — 图片由作者提供
- en: 'Above, we are answering the question: *What is the Volume of the days where
    Apple’s closing stock price was higher than $20?*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作是在回答问题：*苹果公司收盘股票价格高于20美元的天数的成交量是多少？*
- en: 'Translating this into SQL: `SELECT Volume FROM ''apple'' WHERE Close > 20`
    .'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 将其翻译成SQL：`SELECT Volume FROM 'apple' WHERE Close > 20`。
- en: But, what if we want multiple columns? Can you guess how to change the `pandas`
    code above?
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，如果我们想要多个列呢？你能猜到如何修改上面的`pandas`代码吗？
- en: 'Answer: List indexing!'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：列表索引！
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/749061cf1c569b7eefde33caf3426a65.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/749061cf1c569b7eefde33caf3426a65.png)'
- en: apple data subset — Volume and Close from days where stock price was above 20$—
    Image by Author
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果数据子集 — 股票价格高于20美元的天数的成交量和收盘价 — 图片由作者提供
- en: Another common wrangling operation consists of grouping data. Let’s see how
    we can do that in the next section!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的数据整理操作是分组数据。我们将在下一部分中看看如何做到这一点！
- en: Grouping Information
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分组信息
- en: 'Right now, my data is too granular — I would like to extract the average price
    per year of `apple` and `ford` stock price. To do that, we need to do two things:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我的数据过于详细——我想提取`apple`和`ford`股票价格的年度平均值。为此，我们需要做两件事：
- en: Create a new column that will contain the year extracted from the `Date`column.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新列，其中包含从`Date`列提取的年份。
- en: Extract the mean of the `Close` price grouped by year column.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取按年份列分组的 `Close` 价格的均值。
- en: 'We have an issue with the `Date` column — why? Because, right now, it is being
    considered an `Object` column as we can see by calling the `.dtypes` property:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个问题在于 `Date` 列 — 为什么？因为现在，它被视为一个 `Object` 列，如通过调用 `.dtypes` 属性所见：
- en: '[PRE29]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](../Images/b2add89e45374da1a3d29ca929e56012.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2add89e45374da1a3d29ca929e56012.png)'
- en: apple DataFrame data types — Image by Author
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: apple 数据框数据类型 — 作者提供的图像
- en: Although we can perform a substring operation to extract year, it would be better
    to use datetime properties to extract information from this Date. Let me introduce
    another data type available in `pandas` — the `datetime` !
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以执行子字符串操作来提取年份，但使用日期时间属性从这个日期中提取信息会更好。让我介绍一下 `pandas` 中的另一种数据类型 —— `datetime`！
- en: 'To convert an object into `datetime` , we can call the `to_datetime` function:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要将对象转换为 `datetime`，我们可以调用 `to_datetime` 函数：
- en: '[PRE30]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the argument of the `to_datetime` function, we can pass the column(s) that
    we want to convert to date. Notice that we can convert this column because it
    has a format expected by `pandas` dates (more information about formats in the
    official documentation of the [library](https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html)).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `to_datetime` 函数的参数中，我们可以传入我们希望转换为日期的列。请注意，我们可以转换这个列，因为它具有 `pandas` 日期所期望的格式（有关格式的更多信息，请参见[官方文档](https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html)）。
- en: 'Now, the returning object `dtype` changed:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回的对象 `dtype` 已经改变：
- en: '![](../Images/7b89d3343c33b827c35125b796ed25f2.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b89d3343c33b827c35125b796ed25f2.png)'
- en: Datetime Conversion — Image by Author
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间转换 — 作者提供的图像
- en: 'Having this `datetime`object, we can access `dt`properties and conveniently
    extract the year using `.dt.year`. Let’s try that below:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个 `datetime` 对象，我们可以访问 `dt` 属性，并方便地使用 `.dt.year` 提取年份。让我们在下面尝试一下：
- en: '[PRE31]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](../Images/480c1083f53bd1cc599454dd45cb9b2d.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/480c1083f53bd1cc599454dd45cb9b2d.png)'
- en: Year Column — Image by Author
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 年份列 — 作者提供的图像
- en: 'But, how can we add this column to our existing DataFrame? That’s super easy
    — we just assign it to something that does not exist (yet!):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们如何将这个列添加到现有的数据框中呢？这非常简单——我们只需将其分配给一个尚不存在的东西（还没有！）：
- en: '[PRE32]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This will create a new column in our apple DataFrame named `Year`, containing
    the extracted year from the `Date`column.:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会在我们的 apple 数据框中创建一个名为 `Year` 的新列，包含从 `Date` 列提取的年份。
- en: '![](../Images/13f9bd81787505eed1ae5bcbf9295ce9.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/13f9bd81787505eed1ae5bcbf9295ce9.png)'
- en: Creating Year Column — Image by Author
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 创建年份列 — 作者提供的图像
- en: First part of our process is completed! Now, let’s go for the second part, where
    we will produce an average of the `Close` price by `Year` — that sounds difficult,
    right?
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的过程的第一部分已经完成！现在，让我们进入第二部分，我们将按 `Year` 计算 `Close` 价格的平均值——听起来很困难，对吧？
- en: But it is not! As you probably guessed, things in `pandas` are super simple,
    after getting the hang of how the library works. First, we need to call the `groupby`
    method that enables us to.. well.. group by a column!
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 但其实不是！正如你可能猜到的那样，一旦掌握了库的工作原理，`pandas` 中的事情其实非常简单。首先，我们需要调用 `groupby` 方法，这样我们就可以……嗯……按列分组！
- en: '[PRE33]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `groupby` method does not output anything (other than a generic method
    output), it just prepares `pandas` to receive something that will be grouped by
    the column in the argument. After generating the `groupby` object, we can pass
    the column that we want to aggregate and the metric:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupby` 方法不输出任何内容（除了通用的方法输出），它只是准备 `pandas` 接受将在参数列中进行分组的内容。生成 `groupby`
    对象后，我们可以传入我们希望聚合的列和度量：'
- en: '[PRE34]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![](../Images/4c6a3f78216bfb2a28bf8793097e47cc.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c6a3f78216bfb2a28bf8793097e47cc.png)'
- en: First rows of generated group by Object — Image by Author
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的分组对象的前几行 — 作者提供的图像
- en: 'We can also do other calculations with other functions — for example, extracting
    the max per group:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用其他函数进行其他计算——例如，按组提取最大值：
- en: '[PRE35]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![](../Images/eb939a49e4f97dadde3af4be63ee6654.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb939a49e4f97dadde3af4be63ee6654.png)'
- en: First rows of generated group by Object — Image by Author
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的分组对象的前几行 — 作者提供的图像
- en: 'This last instruction can be translated into the following SQL query: `SELECT
    Year, max(Close) as max_close from apple group by Year` .'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的指令可以转化为以下 SQL 查询：`SELECT Year, max(Close) as max_close from apple group
    by Year`。
- en: 'We can also perform aggregations on multiple columns at the same time, for
    example:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以同时对多个列进行聚合，例如：
- en: '![](../Images/0ab045a97697e99dc2222ae38174d11e.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ab045a97697e99dc2222ae38174d11e.png)'
- en: Extracting the max from Close and Volume columns — Image by Author
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Close 和 Volume 列中提取最大值 — 作者提供的图像
- en: 'Before we move on to the Combining tables section, let’s create two aggregated
    tables with information about the Dividends per share paid by each company after
    the year 2000:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入合并表格的部分之前，让我们创建两个汇总表，其中包含每家公司在 2000 年之后支付的每股股息信息：
- en: '[PRE36]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Ok, let’s take this last instruction a bit slow as we are compounding on a
    couple of things we’ve learned throughout the blog post:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们慢一点处理最后这条指令，因为我们要在这里综合运用我们在整个博客文章中学到的几个知识点：
- en: 'First, we are filtering our data for every row after 2000: `apple.loc[apple.Year
    >= 2000]`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们在 2000 年之后过滤每一行数据：`apple.loc[apple.Year >= 2000]`
- en: This will return a DataFrame where we can apply `groupby` and `sum`later, using
    `groupby(['Year'])['Dividends'].sum()`
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将返回一个 DataFrame，我们可以在之后使用 `groupby` 和 `sum`，例如 `groupby(['Year'])['Dividends'].sum()`。
- en: 'Let’s visualize our `apple_dividends` DataFrame (?):'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化一下我们的 `apple_dividends` DataFrame（?）：
- en: '![](../Images/777363d210af98c6a6a1cf06813e8a69.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/777363d210af98c6a6a1cf06813e8a69.png)'
- en: pandas grouped by Series— Image by Author
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 按 Series 分组— 作者提供的图片
- en: 'When we perform group by operations that return a single column, we output
    a `pd.Series` and not a DataFrame. We can explicitly convert the object into a
    `DataFrame` by wrapping it into a `pd.DataFrame` function:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行返回单列的 group by 操作时，我们会输出一个 `pd.Series`，而不是 DataFrame。我们可以通过将其包装在 `pd.DataFrame`
    函数中显式地将对象转换为 `DataFrame`：
- en: '[PRE38]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, in DataFrame format — looking at the `apple_dividends` object:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以 DataFrame 格式查看 `apple_dividends` 对象：
- en: '![](../Images/148440bd9d684d84737a25918e7f49ff.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/148440bd9d684d84737a25918e7f49ff.png)'
- en: pandas grouped by object — Image by Author
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 按对象分组 — 作者提供的图片
- en: It would be interesting to combine these DataFrames into a single object. That’s
    something we will take care of in the next section!
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些 DataFrames 合并成一个对象会很有趣。这是我们将在下一部分处理的内容！
- en: Combining Objects
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并对象
- en: 'In this section, I’m going to show you how to combine DataFrames in multiple
    ways:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我将向你展示如何以多种方式合并 DataFrames：
- en: Vertically, by stacking or appending them.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直地，通过堆叠或附加它们。
- en: Horizontally by using a join.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平地，通过使用连接。
- en: 'First, let’s learn how to stack tables vertically (similarly to a `UNION` operator)
    — we can do that by providing `pd.concat` :'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们学习如何垂直堆叠表格（类似于 `UNION` 操作符）——我们可以通过提供 `pd.concat` 来实现：
- en: '[PRE39]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This will create a DataFrame with the dividend data for both companies. In
    the current format, it will be hard to understand which company the row refers
    to. An alternative is to create a new column in the original DataFrames that state
    the name of the company:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含两家公司股息数据的 DataFrame。在当前格式下，很难理解每一行对应的公司。另一种方法是在原始 DataFrames 中创建一个新列，注明公司名称：
- en: '[PRE40]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![](../Images/7cb2e9f0607e8d2352e0e3e8ac65b4f5.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7cb2e9f0607e8d2352e0e3e8ac65b4f5.png)'
- en: Sample of combined apple and ford dividends data — Image by Author
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 合并后的苹果和福特股息数据的样本 — 作者提供的图片
- en: 'The indexes repeat themselves, which may be weird, although it may come in
    handy when indexing data from the same year:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 索引会重复，这可能会有些奇怪，尽管在索引同一年份的数据时可能会很方便：
- en: '[PRE41]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![](../Images/4dee9677f5acbd0b89c36963de8cbd10.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4dee9677f5acbd0b89c36963de8cbd10.png)'
- en: Subset of 2015 data — Image by Author
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 2015 年数据的子集 — 作者提供的图片
- en: 'We could also prefer to have this data with two time series side by side. To
    do that, we have to change our original data a bit and think about the process
    in the context of a table join. If we want to keep the `year` as index, we can
    use the `merge` function to combine the data:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以选择将这些数据以两个时间序列并排的方式呈现。为此，我们需要稍微修改原始数据，并将过程考虑为表连接。如果我们想保持 `year` 作为索引，我们可以使用
    `merge` 函数来合并数据：
- en: '[PRE42]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![](../Images/2590097157261ae701e4e1ba9ed74274.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2590097157261ae701e4e1ba9ed74274.png)'
- en: Joined Dividends Data — Image by Author
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 已连接的股息数据 — 作者提供的图片
- en: 'The example above is similar to doing the query:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例类似于执行查询：
- en: '[PRE43]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: As `pandas`does not support two columns with the same name during a merge, Python
    automatically adds an _x or _y suffix to differentiate the columns based on their
    origin in the tables.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `pandas` 在合并过程中不支持两个同名的列，Python 会自动添加 _x 或 _y 后缀，以区分列的来源。
- en: 'Alternatively, we can also use the convenient `on` argument, that supports
    joins by any column. To have our `Year` as column, we can reset the index of both
    tables:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们也可以使用方便的 `on` 参数，它支持按任何列进行连接。为了将我们的 `Year` 作为列，我们可以重置两个表的索引：
- en: '[PRE44]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Pay attention to the `inplace=True` in this query. This is a very important
    property in Python! Some operations may be done inplace, meaning that the object
    is changed dynamically, without a need to reassign it. In the example above, we
    just reset the index of both tables, turning the Year into a column:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这个查询中的`inplace=True`。这是 Python 中一个非常重要的属性！某些操作可以就地进行，这意味着对象会动态改变，无需重新赋值。在上面的例子中，我们只是重置了两个表的索引，将年份转换为一列：
- en: '![](../Images/43f876040387945e76428b41ac81519d.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/43f876040387945e76428b41ac81519d.png)'
- en: Index Reset example — Image by Author
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 索引重置示例 — 作者图片
- en: 'Now, we can use the `Year` in the merge function, explicitly:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以明确地在合并函数中使用 `Year`。
- en: '[PRE45]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![](../Images/6957bbfa7d582252116132ccf7f6a9da.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6957bbfa7d582252116132ccf7f6a9da.png)'
- en: Joined Dividends Data by column — Image by Author
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 按列连接的股息数据 — 作者图片
- en: This may be useful if you want to combine data by a specific column that does
    not belong to the index of the DataFrame.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想根据 DataFrame 中不属于索引的特定列组合数据，这可能会很有用。
- en: Having our «table saved, let’s finish this blog post by looking at some simple
    `pandas` plotting capabilities!
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的«表格已保存，让我们通过查看一些简单的`pandas`绘图功能来结束这篇博客文章吧！
- en: Plotting Capabilities
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘图功能
- en: '`pandas` contains an awesome integration with Python `matplotlib` . A cool
    way to plot data is just to call `.plot()` method:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 与 Python `matplotlib` 的集成非常棒。绘制数据的一个酷炫的方法是直接调用 `.plot()` 方法：'
- en: '[PRE46]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![](../Images/0a598bbad8d737ec1b54df104235d061.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a598bbad8d737ec1b54df104235d061.png)'
- en: Apple’s Dividends Plot — Image by Author
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果的股息图 — 作者图片
- en: 'And if I call a plot on both pandas series, they will show up in the same plot
    at the same time, enabling us to compare the dividends of both companies:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在两个 pandas 系列上调用图表，它们会同时显示在同一图表中，使我们能够比较两家公司的股息：
- en: '[PRE47]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![](../Images/354d6c8a104576718a51f9f4d57cfd33.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/354d6c8a104576718a51f9f4d57cfd33.png)'
- en: Ford and Apple’s Dividends Plot — Image by Author
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 福特和苹果的股息图 — 作者图片
- en: This plot is still a bit incomplete — we don’t have any title, axis legend,
    x-axis label or indication of which company each line refers to. Can we improve
    it using the `.plot()` function?
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图仍然有点不完整 — 我们没有标题、轴标签、x 轴标签或指示每条线对应哪家公司。我们可以使用`.plot()`函数来改进它吗？
- en: 'For sure! Instead of calling the `.plot` method on the column, we can call
    it method on the entire DataFrame and control `x` and `y` axis based on that:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当然！我们可以在整个 DataFrame 上调用 `.plot` 方法，并基于此控制 `x` 和 `y` 轴：
- en: '[PRE48]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: There are some properties that we can’t change on the `.plot()` method. For
    example, adding a custom legend to the lines must be done using the `matplotlib`
    library, by calling `plt.legend()` after creating our plot.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能在 `.plot()` 方法上更改一些属性。例如，添加自定义图例必须使用 `matplotlib` 库，通过在创建图表后调用 `plt.legend()`
    来完成。
- en: '![](../Images/3d3818627777839473e0640352819b87.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d3818627777839473e0640352819b87.png)'
- en: Ford and Apple’s Dividends Plot — Image by Author
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 福特和苹果的股息条形图 — 作者图片
- en: 'We can also change the type of plot by using the `kind` argument — for example,
    let’s view the dividends in a bar plot:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用 `kind` 参数来更改图表类型 — 例如，我们可以查看一个条形图中的股息：
- en: '[PRE49]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![](../Images/3f01fbeab0d0d5c37973d8761a5a95b9.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f01fbeab0d0d5c37973d8761a5a95b9.png)'
- en: Ford and Apple’s Dividends Bar Plot — Image by Author
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 福特和苹果的股息条形图 — 作者图片
- en: Although limited, `pandas` plotting capabilities add an extra flavor to the
    library’s features and it is very handy, particularly for plots related to a quick
    exploratory analysis of the data. The downside of using the `pandas` plotting
    API is that there are multiple `matplotlib` features that aren’t available, so
    it is normal that we import the two libraries, particularly when we want to create
    more complex plots.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有限，`pandas` 的绘图功能为库的特性增添了额外的风味，而且非常方便，特别是在进行快速数据探索分析时。使用 `pandas` 绘图 API 的缺点是有许多
    `matplotlib` 的功能不可用，因此我们通常会导入这两个库，特别是当我们想创建更复杂的图表时。
- en: And that’s it! Thank you for taking the time to read this post and I hope you’ve
    enjoyed learning about pandas.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！感谢你抽出时间阅读这篇文章，希望你喜欢学习 pandas。
- en: This library is a must for every professional or student that wants to work
    with DataFrames inside Python. Getting to know this object will also be very important
    for working with other frameworks (such as spark) or languages (such as R). Using
    `pandas`has become a very crucial skill for data scientists, engineers and analysts.
    I do believe that `pandas` will continue to be used throughout the next decade,
    as it is already engrained in a lot of data science pipelines.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一个想要在Python中使用DataFrame的专业人士或学生来说，这个库是必备的。了解这个对象对于使用其他框架（如spark）或语言（如R）也非常重要。使用`pandas`已经成为数据科学家、工程师和分析师的关键技能。我相信`pandas`将在未来十年继续被使用，因为它已经深深嵌入到许多数据科学流程中。
- en: 'On the downside, there’s a couple of limitations of `pandas` , namely:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 不足之处是，`pandas`存在一些局限性，具体如下：
- en: 'Memory Usage: Pandas may have a bad performance for large and diverse DataFrames.
    Other frameworks like `PySpark` may be more suited for these operations.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用：对于大型且多样化的DataFrame，`pandas`的性能可能较差。像`PySpark`这样的其他框架可能更适合这些操作。
- en: 'Mutability: For people that never worked with Python, the mutability property
    may be confusing, at first. Handing mutability incorrectly is one of the most
    common mistakes peopl make when working with the library.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可变性：对于从未使用过Python的人来说，可变性属性一开始可能会让人困惑。处理不当是使用该库时最常见的错误之一。
- en: Not able to deal with unstructured data. Although pandas may support lists or
    dictionaries as column, storing unstructured data inside it is a massive headache
    and a process that is error prone.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法处理非结构化数据。虽然`pandas`可能支持将列表或字典作为列，但将非结构化数据存储其中是一个大问题，且易出错。
- en: 'As a summary, let’s detail some of the topics that we’ve approached during
    the blog post:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，让我们详细说明一下在博客中涉及的一些主题：
- en: Dealing with the unidimensional `pandas`object, the `Series`, an object that
    works similarly to R vectors.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理一维的`pandas`对象`Series`，该对象的工作方式类似于R的向量。
- en: Creating, indexing and doing all sorts of operations with the main `pandas`
    object, the `DataFrame`.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、索引以及对主要的`pandas`对象`DataFrame`进行各种操作。
- en: Read external objects, such as CSV files into `DataFrame`objects.
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取外部对象，如CSV文件到`DataFrame`对象中。
- en: Combining different `DataFrames`, both vertically (append) and horizontally
    (joining data).
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并不同的`DataFrame`，包括垂直（追加）和水平（连接数据）。
- en: Plotting data using the `matplotlib` API in `pandas`.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`matplotlib` API在`pandas`中绘制数据。
- en: After reading this post, I recommend that you read the `pandas`official documentation
    and experiment with a few functions that we haven’t covered in the blog post,
    such as [windowing operations](https://pandas.pydata.org/docs/user_guide/window.html)
    or [DataFrame reshaping](https://pandas.pydata.org/docs/user_guide/reshaping.html).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这篇文章后，我建议你阅读一下`pandas`的官方文档，并尝试一些我们在博客中没有涉及的函数，比如[窗口操作](https://pandas.pydata.org/docs/user_guide/window.html)或[DataFrame重塑](https://pandas.pydata.org/docs/user_guide/reshaping.html)。
- en: Additionally, if you are on the path towards becoming a data scientists, you
    may find it relevant to learn about [NumPy](https://numpy.org/), [Matplotlib](https://matplotlib.org/),
    [scikit-learn](https://scikit-learn.org/stable/) or [PySpark](https://spark.apache.org/docs/latest/api/python/).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你正在走向数据科学家的道路，你可能会发现学习[NumPy](https://numpy.org/)、[Matplotlib](https://matplotlib.org/)、[scikit-learn](https://scikit-learn.org/stable/)或[PySpark](https://spark.apache.org/docs/latest/api/python/)是很有意义的。
- en: Do you think I’m missing something in this Comprehensive Guide? Let me know
    in the comments below so I can add it!
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为我在这个综合指南中遗漏了什么吗？请在下面的评论中告诉我，以便我添加！
- en: '*If you would like to drop by my Python courses, feel free to join* ***my free
    course*** *here (*[*Python For Busy People — Python Introduction in 2 Hours*](https://www.udemy.com/course/python-for-busy-people-python-introduction-2-hours/?referralCode=1588B6BF72D40253CDD4)*)*
    ***or a longer 16 hour version*** *(*[*The Complete Python Bootcamp for Beginners*](https://www.udemy.com/course/the-python-for-absolute-beginners-bootcamp/?couponCode=MEDIUMJULY)*)
    where you have a 30-day refund policy if it’s not a fit for you. My Python courses
    are suitable for beginners/mid-level developers and I would love to have you on
    my class!*'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你有兴趣参加我的Python课程，请随时加入* ***我的免费课程*** *（*[*Python For Busy People — Python
    Introduction in 2 Hours*](https://www.udemy.com/course/python-for-busy-people-python-introduction-2-hours/?referralCode=1588B6BF72D40253CDD4)*)*
    ***或者一个更长的16小时版本*** *（*[*The Complete Python Bootcamp for Beginners*](https://www.udemy.com/course/the-python-for-absolute-beginners-bootcamp/?couponCode=MEDIUMJULY)*)，如果不适合你，可以享受30天退款政策。我的Python课程适合初学者/中级开发者，欢迎你来我的课程！*'
- en: '![](../Images/92d3f3ac73c061a7abf0aee526aaca95.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92d3f3ac73c061a7abf0aee526aaca95.png)'
- en: '[Python for Absolute Beginners Course](https://www.udemy.com/course/the-python-for-absolute-beginners-bootcamp/?couponCode=MEDIUMJULY)
    — Image by Author'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[绝对初学者的 Python 课程](https://www.udemy.com/course/the-python-for-absolute-beginners-bootcamp/?couponCode=MEDIUMJULY)
    — 作者提供的图片'
- en: '*The dataset used on this post is licensed under a* [*Creative Commons Attribution
    CC0 Public Domain.*](https://creativecommons.org/licenses/by/4.0/legalcode)'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇文章中使用的数据集采用了* [*知识共享署名 CC0 公共领域授权。*](https://creativecommons.org/licenses/by/4.0/legalcode)'
