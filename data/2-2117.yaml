- en: Tips to Understand Regular Expressions in R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解R中的正则表达式的提示
- en: 原文：[https://towardsdatascience.com/tips-to-understand-regular-expressions-in-r-5d25be06f2a8](https://towardsdatascience.com/tips-to-understand-regular-expressions-in-r-5d25be06f2a8)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/tips-to-understand-regular-expressions-in-r-5d25be06f2a8](https://towardsdatascience.com/tips-to-understand-regular-expressions-in-r-5d25be06f2a8)
- en: Gain more knowledge in regexp with stringR
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用stringR获得更多的正则表达式知识
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)
    ·8 min read·Jan 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)
    ·8分钟阅读·2023年1月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ca3fa7161dcaa5cd562cdf85952ca062.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca3fa7161dcaa5cd562cdf85952ca062.png)'
- en: Photo by [Jason Leung](https://unsplash.com/ko/@ninjason?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/0sBTrm726C8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Jason Leung](https://unsplash.com/ko/@ninjason?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，来源于[Unsplash](https://unsplash.com/photos/0sBTrm726C8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: When a project involves text analysis, such as sentiment analysis, text mining,
    or any other task you were entitled to do analyzing textual information will probably
    require parsing text at some point. This mean that one will have to extract a
    piece of a text or find a given pattern within a text to be able to extract an
    insight, for example.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个项目涉及文本分析，比如情感分析、文本挖掘或你需要执行的其他分析任务时，通常会在某个时刻需要解析文本。这意味着需要提取文本的一部分或在文本中找到给定的模式，以便提取见解，例如。
- en: If we are dealing with a simple pattern, like a word, or a number, that is easy
    enough to deal with in R.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处理的是简单的模式，比如一个单词或一个数字，那么在R中处理起来相对容易。
- en: Imagine you have this following text and you want to find the word `random`.
    There are many simple functions that we can use to perform this task. But first
    load the `library(stringr)`. Then see three of its functions next.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有以下文本，并且你想找到单词`random`。我们可以使用许多简单的函数来执行这个任务。但首先加载`library(stringr)`。然后查看它的三个函数。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, let’s imagine we wanted to find another kind of pattern, a very specific
    one, like *any digit in a sentence*, or even more specific, *a combination of
    letters and numbers.* That is when the regular expressions, or *regexp* will be
    very handy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想找另一种类型的模式，非常具体的，比如*句子中的任何数字*，甚至更具体，*字母和数字的组合*。这就是正则表达式或*regexp*非常有用的地方。
- en: A Regular Expression is a sequence of characters that helps us to find a pattern
    within a text.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 正则表达式是一系列字符，帮助我们在文本中查找模式。
- en: The RegExp 101
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式101
- en: To write your first *regexps*, the way to start is to understand the elements
    that can compose one of these patterns. Additionally, remember to always wrap
    your pattern within quotes, single or double ones.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写你的第一个*正则表达式*，首先要理解这些模式可以由哪些元素组成。此外，记住始终将你的模式包裹在引号内，无论是单引号还是双引号。
- en: Let’s start.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧。
- en: 'Side note: the `*str_view_all*` function shows all the possible values captured
    by a given pattern, but it does not extract anything. That can be done by other
    functions from the stringR library. It is an excellent tool to see if you’re getting
    the right text, though.'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁注：`*str_view_all*`函数展示了由给定模式捕获的所有可能值，但它不会提取任何内容。这可以通过stringR库中的其他函数来完成。尽管如此，它是一个出色的工具，可以查看是否获得了正确的文本。
- en: 'One character: the square brackets'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个字符：方括号
- en: If you want to find a single character, the `[]` will be your best friend. When
    you write them, whatever you put inside means that one character you want to find.
    Let’s see it in a practical example to build a better intuition on this matter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查找一个字符，`[]` 将是你最好的朋友。当你写它们时，无论你放入什么，都表示你想要查找的那个字符。让我们通过实际示例来更好地理解这一点。
- en: 'If we want to find out if there is a letter `k` in our previous text, here’s
    the pattern to be used: `[k]` .'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想查找在我们之前的文本中是否有字母`k`，这里是要使用的模式：`[k]`。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And yes, we do have a letter **k**. It’s in the position 81\. As I realize
    that is useful only for education purposes, let’s climb another step. If we want
    to know if our text has either one of the letters k, w or b, we can use this pattern:
    `''[kwb]''` .'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们确实有一个字母**k**。它在位置81上。考虑到这仅对教育目的有用，我们再往上走一步。如果我们想知道我们的文本中是否包含字母k、w或b中的任意一个，我们可以使用这个模式：`'[kwb]'`。
- en: 'Notice how we are writing this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们是这样写的：
- en: We are using a `[]` to tell the program that we want to find a single character
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`[]`来告诉程序我们想要查找一个字符
- en: Inside the brackets, we have the patterns we are looking for, which is read
    as **k** OR **w** OR **b**, whichever comes first. And it happens to be a letter
    **w** on the 31st position.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在方括号内，我们有我们要查找的模式，它表示**k** 或 **w** 或 **b**，哪个先出现就查找哪个。结果在第31个位置上是字母**w**。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can use the `[]` for a number of other patterns. Let me tell you that is
    is one of the most used patterns in the *regexps* I usually write. And there are
    even some pre-created patterns that help us while writing our code. If you [follow
    this link](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf), in the
    stringR cheatsheet you can find many quick patterns like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`[]`来表示其他许多模式。让我告诉你，这是我通常编写的*正则表达式*中最常用的模式之一。甚至还有一些预先创建的模式可以帮助我们在编写代码时。如果你[点击这个链接](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)，在stringR的速查表中你可以找到许多快速模式，如：
- en: '`[:digit:]` to find all the numbers in a sentence. In our text: `“1” “2” “3”`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:digit:]` 用于查找句子中的所有数字。在我们的文本中：`“1” “2” “3”`'
- en: '`[:alpha:]` to find letters only.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:alpha:]` 用于查找字母。'
- en: '![](../Images/b69158d9dde1c38f568a0457dfcf59e9.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b69158d9dde1c38f568a0457dfcf59e9.png)'
- en: What is found in our text with ‘[:alpha]’. Image by the author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用‘[:alpha]’在我们的文本中找到的内容。图片由作者提供。
- en: '`[:punct:]` to find the punctuation. In our text: `"." "," "''" "," "."`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:punct:]` 用于查找标点符号。在我们的文本中：`"." "," "''" "," "."`'
- en: We also can use a range of values or differentiate between uppercase or lowercase
    within brackets. For example, `[a-z]` looks for one lowercase letter between a
    and z, always returning what is found first. Similarly, `[A-Z]` does the same,
    but looking for uppercase letters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在方括号内使用值范围或区分大写或小写字母。例如，`[a-z]` 查找从a到z之间的一个小写字母，总是返回首先找到的内容。类似地，`[A-Z]`
    做同样的事，但查找大写字母。
- en: Dot . means Find Anything
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点号`.`意味着查找任何东西
- en: The dot `.`, in a *regexp* means any character. So, if we create a pattern like
    this `'[Ii].'` and apply if to our text variable, we are saying we want to find
    any pattern with the letter *I or i* followed by any other character.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在*正则表达式*中，点号`.`表示任何字符。因此，如果我们创建一个类似`'[Ii].'`的模式并将其应用于我们的文本变量，我们就是在说我们要找的是一个字母*I
    或 i* 后面跟着任何其他字符的模式。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And this is the resulting image.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是生成的图像。
- en: '![](../Images/450174db75df641a24b8548c9a726f23.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/450174db75df641a24b8548c9a726f23.png)'
- en: Letter i followed by any other character. Image by the author.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 字母i后面跟着任何其他字符。图片由作者提供。
- en: Find presence or absence of something
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找某物的存在或缺失
- en: Another interesting portion of the *regexps* is the use of some patterns to
    find presence or absence of spaces, digits, letters. Generally, it will be a double
    backslash followed by a letter for presence and the same UPPERCASE letter for
    absence.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*正则表达式*的另一个有趣部分是使用一些模式来查找空格、数字、字母的存在或缺失。通常，这会是一个双反斜杠后跟一个字母表示存在，字母的大写形式表示缺失。'
- en: '`\\s` for space, `\\d` for digit, `\\w` for word and `\\b` boundary.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\\s` 表示空格，`\\d` 表示数字，`\\w` 表示单词，`\\b` 表示边界。'
- en: '`\\S` for non-space, `\\D` for non-digit, `\\W` for non-word.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\\S` 表示非空格，`\\D` 表示非数字，`\\W` 表示非单词。'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And the respective results are next.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的结果。
- en: '![](../Images/0f7ef9a0f53a4090cb9e8054e1576590.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f7ef9a0f53a4090cb9e8054e1576590.png)'
- en: Results from the regexps. Image by the author.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式的结果。图片由作者提供。
- en: It is important to note that a boundary can be anything that surrounds a pattern.
    Imagine you have an ID number like `ID-3234`. Here, if we wanted to extract only
    the numbers using this regexp `'\\b\\d+'`, the `-` would be recognized as the
    boundary.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，边界可以是任何包围模式的东西。想象一下你有一个ID号码如`ID-3234`。在这里，如果我们想仅使用这个正则表达式`'\\b\\d+'`提取数字，`-`将被识别为边界。
- en: 0, 1 or more repetitions
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0、1或更多次重复
- en: '`+, * , ? , { }` are the ways for you to indicate none or many repetitions
    of the characters.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`+, * , ? , { }`是你指示字符无或多次重复的方式。'
- en: '***** : Use the asterisk sign to indicate that regex can happen *zero or more
    times.*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***** : 使用星号表示正则表达式可以发生*零次或多次*。'
- en: '**?** : Question mark indicates the regex happens *zero or one time.*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**?** : 问号表示正则表达式发生*零次或一次*。'
- en: '**+** : Use the plus sign to indicate that regex can happen *one or more times.*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**+** : 使用加号表示正则表达式可以发生*一次或多次*。'
- en: '**{2,4}**: curly brackets is for customization of repetitions. Here, from 2
    to 4 times.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{2,4}**: 大括号用于定制重复次数。这里，从2次到4次。'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the except signal ^
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用除外符号^
- en: We can use the `^` within brackets as the synonymous of **except**. In our `text2`
    string, we can randomly say we don’t want the pattern to capture the letters *a,
    m, d, x, e*. The below *regexp* pattern with the `^` will remove one of the letters
    listed within the brackets.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在方括号内使用`^`作为**除外**的同义词。在我们的`text2`字符串中，我们可以随意说我们不想让模式捕获字母*a, m, d, x, e*。下面的*正则表达式*模式与`^`将移除方括号内列出的字母。
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The code returns the next figure.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 代码返回下图。
- en: '![](../Images/1881bf23115e7da5ee7a05c03ff985ff.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1881bf23115e7da5ee7a05c03ff985ff.png)'
- en: The letters in our regexp are not selected. Image by the author.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正则表达式中的字母没有被选择。图像由作者提供。
- en: Before and after
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 之前和之后
- en: To extract what is before or after a given pattern, here are the *regexps*.
    Say we have a `text5 <- ‘Extract the ID 321’` and we want to extract anything
    that comes before and after the word ID.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取给定模式之前或之后的内容，这里是*正则表达式*。假设我们有一个`text5 <- ‘Extract the ID 321’`，我们想提取单词ID之前和之后的任何内容。
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Starts and ends with
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以…开始和结束
- en: The next codes are to extract patterns that starts with or ends with something.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下一些代码是用来提取以某物开始或结束的模式。
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Build by parts
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分步构建
- en: 'After learning the basics of *regexps*, here’s a good tip to start creating
    your own: **build it by parts**. Look at the pattern you want to create, think
    about it and start to write each part having in mind the elements learned in this
    post.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了*正则表达式*的基础知识后，这里有一个好的提示来开始创建你自己的：**分步构建**。查看你想要创建的模式，思考它，然后开始编写每一部分，记住本文中学到的元素。
- en: Practice
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实践
- en: 'Pattern: Extract the letter A followed by any amount of numbers.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 模式：提取字母A后面跟着任何数量的数字。
- en: The first element is the capped *letter A*. So `[A]` will take care of it.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个元素是限定的*字母A*。因此`[A]`将处理它。
- en: The next part is *any amount of numbers*. So `\\d` is for digits and `+` is
    the symbol for one or more repetitions.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一部分是*任意数量的数字*。所以`\\d`代表数字，`+`是一个或多个重复的符号。
- en: '*RegExp* = `''[A]\\d+''`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正则表达式* = `''[A]\\d+''`'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Pattern: From a list of books like this example `Romeo and Juliet by William
    Shakespeare (6389)`, extract the names of the books, the names of the authors
    and the number of downloads.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 模式：从书单中，如示例`Romeo and Juliet by William Shakespeare (6389)`，提取书名、作者名和下载次数。
- en: To extract the name of the book, we must get everything until the word `by`.
    So, we use `.+` for any character one or more times `(?= by)` until *by.*
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提取书名，我们必须获取直到单词`by`的所有内容。因此，我们使用`.+`表示任意字符出现一次或多次`(?= by)`直到*by*。
- en: To extract the name of the author, we must get everything after the word `by`.
    Here, `(?<=by )` is the piece to look after *by*, `.+` is the same as previous
    bullet and `[^(\\d)]+` means ^ not ( ) with digits within.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提取作者名，我们必须获取单词`by`之后的所有内容。这里，`(?<=by )`是寻找*by*之后的部分，`.+`与前面的项目相同，`[^(\\d)]+`意味着^不（
    ）包含数字。
- en: The number of downloads is just digits `\\d` one or more times `+`.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载次数仅为数字`\\d`，出现一次或多次`+`。
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/7251500214fe2373f8ec852eb3a1cb51.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7251500214fe2373f8ec852eb3a1cb51.png)'
- en: Result of the exercise to bring the top 10 most downloaded books from [Gutenberg](https://www.gutenberg.org/browse/scores/top).
    Image by the author.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从[古腾堡](https://www.gutenberg.org/browse/scores/top)提取前10本最下载的书籍的练习结果。图像由作者提供。
- en: Before You Go
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你离开之前
- en: Well, this is the basics about *Regexp*. I hope you could feel the power that
    it has. You can find basically anything using regular expressions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这就是关于*正则表达式*的基础知识。我希望你能感受到它的强大。你可以使用正则表达式基本上找到任何东西。
- en: I know that it may look intimidating at first, but it’s just a matter of practicing
    and you will start to feel more confident about it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道一开始可能看起来很吓人，但这只是一个练习的问题，你会开始对它更加自信。
- en: You can always practice using the [Regex 101 web site](https://regex101.com/)
    on the References.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时使用 [Regex 101 网站](https://regex101.com/) 进行练习，参考资料。
- en: If you liked this content, follow my blog for more.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这些内容，请关注我的博客以获取更多信息。
- en: '[](http://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [## Gustavo Santos - Medium'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[](http://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [## Gustavo Santos - Medium'
- en: Read writing from Gustavo Santos on Medium. Data Scientist. I extract insights
    from data to help people and companies…
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Gustavo Santos 在 Medium 上的文章。数据科学家。我从数据中提取见解，以帮助个人和公司…
- en: gustavorsantos.medium.com](http://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: gustavorsantos.medium.com](http://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)
- en: References
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[](https://en.wikipedia.org/wiki/Regular_expression?source=post_page-----5d25be06f2a8--------------------------------)
    [## Regular expression - Wikipedia'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://en.wikipedia.org/wiki/Regular_expression?source=post_page-----5d25be06f2a8--------------------------------)
    [## 正则表达式 - 维基百科'
- en: A regular expression (shortened as regex or regexp; sometimes referred to as
    rational expression) is a sequence of…
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式（缩写为 regex 或 regexp，有时称为有理表达式）是一系列…
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/Regular_expression?source=post_page-----5d25be06f2a8--------------------------------)  [##
    Regular expressions
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: en.wikipedia.org](https://en.wikipedia.org/wiki/Regular_expression?source=post_page-----5d25be06f2a8--------------------------------)
    [## 正则表达式
- en: Regular expressions are a concise and flexible tool for describing patterns
    in strings. This vignette describes the key…
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式是一种简洁且灵活的工具，用于描述字符串中的模式。本小册子描述了关键…
- en: 'cran.r-project.org](https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html?source=post_page-----5d25be06f2a8--------------------------------)
    [](https://regex101.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [## regex101: build, test, and debug regex'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: cran.r-project.org](https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html?source=post_page-----5d25be06f2a8--------------------------------)
    [](https://regex101.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [## regex101：构建、测试和调试正则表达式
- en: Regular expression tester with syntax highlighting, explanation, cheat sheet
    for PHP/PCRE, Python, GO, JavaScript…
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有语法高亮、解释、PHP/PCRE、Python、GO、JavaScript 等的速查表的正则表达式测试器…
- en: regex101.com](https://regex101.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [](https://stringr.tidyverse.org/?source=post_page-----5d25be06f2a8--------------------------------)
    [## Simple, Consistent Wrappers for Common String Operations
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: regex101.com](https://regex101.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [](https://stringr.tidyverse.org/?source=post_page-----5d25be06f2a8--------------------------------)
    [## 简单、一致的常用字符串操作包装器
- en: A consistent, simple and easy to use set of wrappers around the fantastic stringi
    package. All function and argument…
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一套一致、简单且易于使用的封装在出色的 stringi 包周围的包装器。所有函数和参数…
- en: stringr.tidyverse.org](https://stringr.tidyverse.org/?source=post_page-----5d25be06f2a8--------------------------------)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: stringr.tidyverse.org](https://stringr.tidyverse.org/?source=post_page-----5d25be06f2a8--------------------------------)
- en: '[https://github.com/rstudio/cheatsheets/blob/main/strings.pdf](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/rstudio/cheatsheets/blob/main/strings.pdf](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)'
