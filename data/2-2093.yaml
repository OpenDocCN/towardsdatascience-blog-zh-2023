- en: Thread Your Python Program with Two Lines of Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用两行代码将你的Python程序多线程
- en: 原文：[https://towardsdatascience.com/thread-your-python-program-with-two-lines-of-code-3b474407dbb8](https://towardsdatascience.com/thread-your-python-program-with-two-lines-of-code-3b474407dbb8)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/thread-your-python-program-with-two-lines-of-code-3b474407dbb8](https://towardsdatascience.com/thread-your-python-program-with-two-lines-of-code-3b474407dbb8)
- en: Speed up your program by doing multiple things simultaneously
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过同时做多件事来加速你的程序
- en: '[](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mike Huls](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)
    [![Mike Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)
    [![Towards Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)
    ·8 min read·Jan 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)
    ·阅读时间8分钟·2023年1月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a45a0f3dc3164d2dedb79a814dca0124.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a45a0f3dc3164d2dedb79a814dca0124.png)'
- en: Better get our threads organized (image by [Karen Penroz](https://unsplash.com/@penrosekaren)
    on [Unsplash](https://unsplash.com/photos/06ZTGDcAQFs))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地组织我们的线程（图片来自[Karen Penroz](https://unsplash.com/@penrosekaren)在[Unsplash](https://unsplash.com/photos/06ZTGDcAQFs)）
- en: When your program has a lot of tasks that involve waiting you can speed up your
    program by executing those tasks simultaneously instead of one by one. When making
    breakfast you don’t wait for the coffee machine to finish before cooking an egg.
    Instead you flick on the coffee maker and pour yourself a cup of orange juice
    while heating up the pan for the scrambled eggs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的程序有很多涉及等待的任务时，你可以通过同时执行这些任务来加速程序，而不是一个一个地处理。比如在做早餐时，你不会等咖啡机完成后再煮鸡蛋。相反，你会启动咖啡机，同时给自己倒一杯橙汁，并加热平底锅以煎炒鸡蛋。
- en: This article shows you how to do precisely that. At the end you’ll be able to
    **safely apply threading in 2 lines** of code and achieve a **huge speedup** in
    your program. Let’s code!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章向你展示如何做到这一点。最后你将能够**安全地在两行**代码中**应用线程**，并在程序中实现**巨大的加速**。让我们开始编程吧！
- en: But first..
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但首先……
- en: This article will detail how to apply threads by applying the same function
    to a whole list of arguments. Then we’ll check out how to apply different functions
    in a threaded way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将详细介绍如何通过对整列表参数应用相同的函数来应用线程。然后我们将查看如何以线程方式应用不同的函数。
- en: '[](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----3b474407dbb8--------------------------------)
    [## Cython for absolute beginners: 30x faster code in two simple steps'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Cython入门：两步实现30倍速度提升'
- en: Easy Python code compilation for blazingly fast applications
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轻松的Python代码编译，打造飞快的应用程序
- en: towardsdatascience.com](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[前往数据科学](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)的文章链接'
- en: Are threads going to solve my problem? Understanding concurrency
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程能解决我的问题吗？理解并发
- en: 'It is true that in many cases your program can be sped up by doing “multiple
    things at the same time” but blindly applying threads everywhere isn’t a smart
    solution. There are two ways to multi-task in Python: multiprocessing and threading:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 确实在许多情况下，通过“同时做多件事”可以加速你的程序，但盲目地在各处应用线程并不是一个明智的解决方案。在Python中有两种多任务处理的方法：多进程和线程：
- en: '**threading** runs code **concurrently**: we have **one active CPU** that quickly
    switches between multiple threads'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程**以**并发**方式运行代码：我们有**一个活跃的CPU**，它在多个线程之间快速切换'
- en: '**multiprocessing** runs code in **parallel**: we have **multiple active CPU’s**
    that each run their own code (check out the article below)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多进程**以**并行**的方式运行代码：我们有**多个活动的 CPU** 每个都运行自己的代码（请查看下面的文章）'
- en: '[](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----3b474407dbb8--------------------------------)
    [## Applying Python multiprocessing in 2 lines of code'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Applying Python multiprocessing in 2 lines of code](https://towardsdatascience.com/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----3b474407dbb8--------------------------------)'
- en: When and how to use multiple cores to execute many times faster
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 何时以及如何使用多个核心以更快地执行多次任务
- en: towardsdatascience.com](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Applying Python multiprocessing in 2 lines of code](https://towardsdatascience.com/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----3b474407dbb8--------------------------------)'
- en: 'When threading you have one actor that executes all tasks simultaneously by
    switching between them. In the context of the breakfast-example from the intro:
    there is one actor (you) that switches between the coffee maker, the pan and the
    glass of orange juice.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在线程处理时，你有一个执行所有任务的角色，通过在任务之间切换来同时完成它们。在早餐示例的上下文中：有一个角色（你）在咖啡机、锅和橙汁杯之间切换。
- en: When multiprocessing you active multiple that you each give a task. In the breakfast
    analogy it’s like cloning yourself twice and giving each clone a separate task.
    Although it will also be much faster than running the tasks one-by-one, multiprocessing
    has a bit more overhead; cloning yourself is a lot of effort just to have the
    clones waiting for a pan to heat up!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在多进程中，你激活多个任务，每个任务都被分配一个任务。在早餐的类比中，这就像把自己克隆两次，并给每个克隆分配一个单独的任务。虽然它比一个一个地运行任务要快得多，但多进程有更多的开销；克隆自己是一项很大的工作，只是为了让克隆在等待锅加热！
- en: 'In short: **multiprocessing** is the best solution in situations when we have
    to **calculate** a lot, **threading** is more suitable for when we have to **wait**
    a lot.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：**多进程**在需要**计算**大量数据时是最佳解决方案，**线程**则更适合需要**等待**的情况。
- en: 'In this article we’ll focus on threading; check out the article below if you’re
    interested in multiprocessing:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将专注于线程处理；如果你对多进程感兴趣，请查看下面的文章：
- en: '[](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----3b474407dbb8--------------------------------)
    [## Multi-tasking in Python: Speed up your program 10x by executing things simultaneously'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Multi-tasking in Python: Speed up your program 10x by executing things
    simultaneously](https://towardsdatascience.com/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----3b474407dbb8--------------------------------)'
- en: Step-by-step guide to apply threads and processes to speed up your code
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逐步指南，以应用线程和进程来加速你的代码
- en: towardsdatascience.com](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Multi-tasking in Python: Speed up your program 10x by executing things
    simultaneously](https://towardsdatascience.com/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----3b474407dbb8--------------------------------)'
- en: Setup
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: For this article we’ll imagine that a tour program receives a big list of email-addresses
    that we have to validate. Imagine we’ve set up an API that we can send an email
    address and returns a true/false depending on whether the email address is valid.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这篇文章，我们假设一个旅行程序接收到一个需要验证的大型电子邮件地址列表。假设我们设置了一个 API，可以发送一个电子邮件地址，并根据电子邮件地址的有效性返回真/假。
- en: 'The most important thing is that we have to send requests and wait for the
    API to respond. This is a typical task that we can multi-thread: we don’t need
    extra cores to calculate faster; we just need some extra threads to send multiple
    email addresses at a time.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，我们需要发送请求并等待 API 响应。这是一个典型的可以多线程处理的任务：我们不需要额外的核心来加速计算；我们只需要一些额外的线程来同时发送多个电子邮件地址。
- en: 'For this article we’ll use this list of email addresses:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这篇文章，我们将使用这个电子邮件地址列表：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And this will be our function that simulates sending the email address to the
    validation API:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们的函数，它模拟将电子邮件地址发送到验证 API：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[](/docker-for-absolute-beginners-the-difference-between-an-image-and-a-container-7e07d4c0c01d?source=post_page-----3b474407dbb8--------------------------------)
    [## Docker for absolute beginners: the difference between an image and a container'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Docker for absolute beginners: the difference between an image and a container](https://towardsdatascience.com/docker-for-absolute-beginners-the-difference-between-an-image-and-a-container-7e07d4c0c01d?source=post_page-----3b474407dbb8--------------------------------)'
- en: Learn the difference between Docker images and containerscontainers and images
    are different + practical code examples
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解Docker镜像和容器的区别 + 实用代码示例
- en: towardsdatascience.com](/docker-for-absolute-beginners-the-difference-between-an-image-and-a-container-7e07d4c0c01d?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/docker-for-absolute-beginners-the-difference-between-an-image-and-a-container-7e07d4c0c01d?source=post_page-----3b474407dbb8--------------------------------)
- en: A. Non-threaded
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A. 非线程
- en: Let’s first see how we use this function without using threads.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看一下在不使用线程的情况下如何使用这个函数。
- en: Loop through email addresses
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历电子邮件地址
- en: 'We’ll just loop through the list of our 7 email addresses and send each value
    to the API; dead simple:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遍历我们的7个电子邮件地址列表，将每个值发送到API；简单明了：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is pretty easy to understand but is it fast? (spoiler: no). Since we validate
    each of our 7 email addresses consecutively, and each one takes between 1 and
    2 seconds, it takes anywhere between 7 and 14 seconds. I’ve timed it at **11.772
    seconds**.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易理解，但它快吗？（剧透：不快）。由于我们依次验证每个7个电子邮件地址，每个地址需要1到2秒，因此总共需要7到14秒。我测得的时间是**11.772秒**。
- en: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----3b474407dbb8--------------------------------)
    [## Destroying Duck Hunt with OpenCV — image analysis for beginners'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----3b474407dbb8--------------------------------)
    [## 用OpenCV摧毁《鸭子猎人》 — 初学者的图像分析'
- en: Write code that will beat every Duck Hunt high score
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写代码以打破每一个《鸭子猎人》的高分
- en: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----3b474407dbb8--------------------------------)
- en: Use the map function
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用映射函数
- en: 'In order to better understand the next part we’ll rewrite the code above using
    Python’s `map` function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解下一部分，我们将使用Python的`map`函数重写上面的代码：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The code above does exactly the same; it maps the function to the list of addresses
    which means that it executes the function for each value in the `email_addresses`
    list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码完全一样；它将函数映射到地址列表，这意味着它对`email_addresses`列表中的每个值执行该函数。
- en: 'Let’s add the time to our benchmark:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将时间添加到基准测试中：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----3b474407dbb8--------------------------------)
    [## Why Python is so slow and how to speed it up'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----3b474407dbb8--------------------------------)
    [## 为什么Python如此慢以及如何加快速度'
- en: Take a look under the hood to see where Python’s bottlenecks lie
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查一下Python的瓶颈在哪里
- en: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----3b474407dbb8--------------------------------)
- en: B. Using threads
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: B. 使用线程
- en: 'In this part we check out 3 different ways of applying threads to our function.
    All make use of a thread pool which can be imported with:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们检查3种不同的将线程应用到我们函数的方法。所有这些方法都使用线程池，可以通过以下方式导入：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Think of the thread pool as a number of threads that are waiting for a task.
    A thread pool has a `map` function that we can use just like in the unthreaded
    example above. As soon as a thread is finished with the task it returns to the
    pool, waiting for another task.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将线程池视为等待任务的线程集合。线程池具有一个`map`函数，我们可以像在上面的非线程示例中一样使用它。一旦线程完成任务，它会返回到线程池中，等待另一个任务。
- en: The thread pool allows us to apply threads easily and safely by providing a
    limit on how many thread can exit in the pool
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池允许我们通过提供对线程池中线程数量的限制，轻松且安全地使用线程
- en: '[](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----3b474407dbb8--------------------------------)
    [## Python to SQL — UPSERT Safely, Easily and Fast'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----3b474407dbb8--------------------------------)
    [## Python到SQL — 安全、简单且快速的UPSERT'
- en: Lightning-fast insert and/or update with Python
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python进行闪电般快速的插入和/或更新
- en: towardsdatascience.com](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----3b474407dbb8--------------------------------)
- en: 1\. Threadpool map
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 线程池映射
- en: We’ll first switch to the `map` function supplied by the thread pool.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先切换到线程池提供的`map`函数。
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you we define a thread pool with a maximum of 10 processes. Because of this
    the `map` function starts all calls to the function simultaneously. As soon as
    all workers are done we can assess the results, which is after **1.901 seconds**
    in this case.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个最大进程数为 10 的线程池。由于这个原因，`map` 函数会同时启动所有对函数的调用。一旦所有工作线程完成，我们就可以评估结果，在这种情况下是**1.901秒**。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[](/create-and-publish-your-own-python-package-ea45bee41cdc?source=post_page-----3b474407dbb8--------------------------------)
    [## Create and publish your own Python package'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/create-and-publish-your-own-python-package-ea45bee41cdc?source=post_page-----3b474407dbb8--------------------------------)
    [## 创建并发布自己的 Python 包'
- en: A short and simple guide on how to pip install your custom made package
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于如何使用 pip 安装你自制包的简短而简单的指南
- en: towardsdatascience.com](/create-and-publish-your-own-python-package-ea45bee41cdc?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/create-and-publish-your-own-python-package-ea45bee41cdc?source=post_page-----3b474407dbb8--------------------------------)
- en: 2\. Threadpool imap
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 线程池 imap
- en: 'In the previous example we had to wait for all function calls to finish. This
    is not the case if we `imap` in stead of `map`. The `imap` function returns an
    iterator that we can access a soon as the results are available:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们不得不等待所有函数调用完成。如果我们使用 `imap` 而不是 `map`，情况就不同了。`imap` 函数返回一个迭代器，我们可以在结果可用时立即访问：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code above is almost exactly the same. The only differences are that some
    timing code has been added. Also we obviously use the `imap` function on the `t_pool`
    on line 3.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码几乎完全相同。唯一的区别是添加了一些计时代码。此外，我们显然在第 3 行的 `t_pool` 上使用了 `imap` 函数。
- en: 'If we check out our print results we see this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看打印结果，我们会看到：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `imap` function returns an iterator that we can access as soon as our results
    are done. These results are returned ***in order*** though. That means that e.g.
    the second email address has to wait for the first; if the second email address
    is done in 1.3 seconds and the first one in 1.4; both are returned after 1.4 (as
    you’ll see in the print outputs above).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`imap` 函数返回一个迭代器，我们可以在结果完成后立即访问。不过，这些结果是***按顺序***返回的。这意味着例如第二个电子邮件地址必须等待第一个；如果第二个电子邮件地址在
    1.3 秒内完成，第一个电子邮件地址在 1.4 秒内完成；两者都在 1.4 秒后返回（正如你在上面的打印输出中看到的）。'
- en: Although the validation of the full list of email_addresses is completed in
    roughly the same time as the previous example; we can access the results much
    faster! The first result is accessible after **1.4 seconds!**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管验证完整的电子邮件地址列表所需的时间与之前的示例大致相同，但我们可以更快地获取结果！第一个结果在**1.4秒**后即可访问！
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[](https://mikehuls.medium.com/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----3b474407dbb8--------------------------------)
    [## Virtual environments for absolute beginners — what is it and how to create
    one (+ examples)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----3b474407dbb8--------------------------------)
    [## 针对绝对初学者的虚拟环境——什么是它以及如何创建一个（+ 示例）'
- en: A deep dive into Python virtual environments, pip and avoiding entangled dependencies
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入了解 Python 虚拟环境、pip 和避免复杂的依赖关系
- en: mikehuls.medium.com](https://mikehuls.medium.com/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: mikehuls.medium.com](https://mikehuls.medium.com/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----3b474407dbb8--------------------------------)
- en: 3\. Threadpool imap_unordered
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 线程池 imap_unordered
- en: 'One more improvement: instead of returning the iterator in order we’ll return
    it unordered:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个改进：我们将返回无序的迭代器，而不是按顺序返回：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With the code above we can access the results as soon as they are available.
    you can also see this in the print output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述代码，我们可以在结果可用时立即访问。你也可以在打印输出中看到这一点：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It’s pretty possible that the last email address completes in **1.09 seconds**
    and is returned first. This is very convenient.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的电子邮件地址可能在**1.09秒**内完成并最先返回。这非常方便。
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----3b474407dbb8--------------------------------)
    [## Create a fast auto-documented, maintainable and easy-to-use Python API in
    5 lines of code with…'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----3b474407dbb8--------------------------------)
    [## 创建一个快速自动文档生成、可维护且易于使用的 Python API，只需 5 行代码'
- en: Perfect for (unexperienced) developers who just need a complete, working, fast
    and secure API
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非经验丰富的开发者只需一个完整、有效、快速且安全的 API，这非常适合他们。
- en: towardsdatascience.com](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----3b474407dbb8--------------------------------)'
- en: 4\. Different functions
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 不同的函数
- en: 'In the previous examples we’ve gone through how to apply the same function
    in a threaded way but what if we have multiple ones? In the example below we simulate
    loading a web-page. We have different functions for loading banners, ads, posts
    and, of course, clickbait:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们探讨了如何以线程方式应用相同的函数，但如果我们有多个函数呢？在下面的示例中，我们模拟加载一个网页。我们有不同的函数用于加载横幅、广告、帖子以及当然，还有吸引点击的内容：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we run these consecutively our program will take around **7.5 seconds**.
    We can use the thread pool with its `map`, `imap` and `imap_unordered` functions
    with a small adjustment. See the `imap_unordered` example below:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们顺序运行这些函数，我们的程序将需要大约 **7.5 秒**。我们可以通过稍微调整来使用线程池及其 `map`、`imap` 和 `imap_unordered`
    函数。请参见下面的 `imap_unordered` 示例：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you see we map a list of the functions to a lambda function. The list of
    functions are executed by the lambda function (the `x` is a placeholder for each
    function and the `x()` will execute it). Executing this way rendering out webpage
    only takes **3.013 seconds**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们将函数列表映射到一个 lambda 函数。函数列表由 lambda 函数执行（`x` 是每个函数的占位符，`x()` 将执行它）。以这种方式执行，渲染网页仅需
    **3.013 秒**。
- en: '[](/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a?source=post_page-----3b474407dbb8--------------------------------)
    [## Git for absolute beginners: understanding Git with the help of a video game'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a?source=post_page-----3b474407dbb8--------------------------------)
    [## Git 入门：通过视频游戏了解 Git'
- en: Get an intuition about how to use git with a classic RPG as an analogy
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对如何使用 git 的经典 RPG 类比获得直观的理解
- en: towardsdatascience.com](/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a?source=post_page-----3b474407dbb8--------------------------------)'
- en: Conclusion
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'Multithreading with a thread pool is save and easy to apply. In summary: the
    Pool object of the multiprocessing library offers three functions. `map` is a
    concurrent version of Python’s built-in `map`. The `imap` function returns an
    ordered iterator, accessing the results is blocking. The `imap_unordered` function
    returns an unordered iterator; making it possible to access each result as soon
    as it’s done, without waiting for another function fist.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用线程池进行多线程处理是安全且易于应用的。总结：multiprocessing 库的 Pool 对象提供了三个函数。`map` 是 Python 内置
    `map` 的并发版本。`imap` 函数返回一个有序迭代器，访问结果是阻塞的。`imap_unordered` 函数返回一个无序迭代器，使得可以在每个结果完成后立即访问，而无需等待另一个函数先完成。
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles?tags=python) on all kinds
    of programming-related topics like these:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章的解释清晰明了，但如果不是，请告诉我我可以做什么进一步澄清。同时，查看我 [其他文章](https://mikehuls.com/articles?tags=python)，涉及各种编程相关主题：
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Git 入门：通过视频游戏了解 Git](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建并发布你自己的 Python 包](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 FastAPI 在 5 行代码中创建一个快速的自动文档、可维护且易于使用的 Python API](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
- en: Happy coding!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 编程愉快！
- en: — Mike
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: — Mike
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言：喜欢我做的事吗？* [*关注我！*](https://mikehuls.medium.com/membership)'
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)
    [## Join Medium with my referral link — Mike Huls'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)
    [## 使用我的推荐链接加入 Medium — Mike Huls'
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Mike Huls 的每一个故事（以及 Medium 上其他成千上万位作家的故事）。你的会员费用直接支持 Mike…
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)'
