- en: 'Getting Started with Weaviate: A Beginner’s Guide to Search with Vector Databases'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Weaviate：初学者的向量数据库搜索指南
- en: 原文：[https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18](https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18](https://towardsdatascience.com/getting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839?source=collection_archive---------1-----------------------#2023-07-18)
- en: How to use vector databases for semantic search, question answering, and generative
    search in Python with OpenAI and Weaviate
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Python 中使用 OpenAI 和 Weaviate 进行语义搜索、问答和生成搜索
- en: '[](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)[](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----14bbb9285839--------------------------------)'
- en: ·
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·
- en: '[Follow](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----14bbb9285839---------------------post_header-----------)
    Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    ·12 min read·Jul 18, 2023[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=-----14bbb9285839---------------------clap_footer-----------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[关注](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F3a38da70d8dc&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=post_page-3a38da70d8dc----14bbb9285839---------------------post_header-----------)
    发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----14bbb9285839--------------------------------)
    ·12分钟阅读·2023年7月18日[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Ftowards-data-science%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&user=Leonie+Monigatti&userId=3a38da70d8dc&source=-----14bbb9285839---------------------clap_footer-----------)'
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&source=-----14bbb9285839---------------------bookmark_footer-----------)![](../Images/6485587f0e926a7c26edc3221c1441f3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F14bbb9285839&operation=register&redirect=https%3A%2F%2Ftowardsdatascience.com%2Fgetting-started-with-weaviate-a-beginners-guide-to-search-with-vector-databases-14bbb9285839&source=-----14bbb9285839---------------------bookmark_footer-----------)![](../Images/6485587f0e926a7c26edc3221c1441f3.png)'
- en: If you landed on this article, I assume you have been playing around with building
    an app with a large language model (LLM) and came across the term vector database.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到这篇文章，我假设你已经开始尝试构建使用大语言模型（LLM）的应用，并遇到了“向量数据库”这一术语。
- en: The tool landscape around building apps with LLMs is growing rapidly, with tools
    such as [LangChain](https://python.langchain.com/docs/get_started/introduction.html)
    or [LlamaIndex](https://www.llamaindex.ai/) gaining popularity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随着构建 LLM 应用的工具快速增长，诸如[LangChain](https://python.langchain.com/docs/get_started/introduction.html)和[LlamaIndex](https://www.llamaindex.ai/)等工具正变得越来越受欢迎。
- en: In a [recent article, I described how to get started with LangChain](/getting-started-with-langchain-a-beginners-guide-to-building-llm-powered-applications-95fc8898732c),
    and in this article, I want to continue exploring the LLM tool landscape by playing
    around with [Weaviate](https://weaviate.io/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[最近的一篇文章中，我描述了如何开始使用 LangChain](/getting-started-with-langchain-a-beginners-guide-to-building-llm-powered-applications-95fc8898732c)，在这篇文章中，我想通过玩弄[Weaviate](https://weaviate.io/)来继续探索
    LLM 工具的景观。
- en: What is Weaviate?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Weaviate？
- en: '[Weaviate](https://weaviate.io/) is an open-source vector database. It enables
    you to store data objects and vector embeddings and query them based on similarity
    measures.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Weaviate](https://weaviate.io/) 是一个开源向量数据库。它使你能够存储数据对象和向量嵌入，并根据相似性度量查询它们。'
- en: '[](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)
    [## GitHub - weaviate/weaviate: Weaviate is an open source vector database that
    stores both objects and…'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[## GitHub - weaviate/weaviate: Weaviate 是一个开源向量数据库，既存储对象也存储向量…](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)'
- en: Weaviate is an open source vector database that stores both objects and vectors,
    allowing for combining vector search…
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Weaviate 是一个开源向量数据库，存储对象和向量，允许进行向量搜索的结合…
- en: github.com](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/weaviate/weaviate?source=post_page-----14bbb9285839--------------------------------)'
- en: Vector databases have been getting much attention since the rise of media attention
    on LLMs. Probably the most popular use case of vector databases in the context
    of LLMs is to “provide LLMs with long-term memory”.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 向量数据库自从 LLM 媒体关注度上升以来，受到了大量关注。可能最流行的向量数据库在 LLM 上下文中的应用是“为 LLM 提供长期记忆”。
- en: 'If you need a refresher on the concept of vector databases, you might want
    to have a look at my previous article:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要重新了解向量数据库的概念，你可能想查看我之前的文章：
- en: '[](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)
    [## Explaining Vector Databases in 3 Levels of Difficulty'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 解释向量数据库的三种难度级别](https://explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)'
- en: 'From noob to expert: Demystifying vector databases across different backgrounds'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从新手到专家：解密不同背景下的向量数据库
- en: towardsdatascience.com](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/explaining-vector-databases-in-3-levels-of-difficulty-fc392e48ab78?source=post_page-----14bbb9285839--------------------------------)'
- en: 'In this tutorial, we will walk through how to populate a Weaviate vector database
    with embeddings of your dataset. Then we will go over three different ways you
    can retrieve information from it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将演示如何用数据集的嵌入填充 Weaviate 向量数据库。然后，我们将介绍三种从中检索信息的方法：
- en: '[Vector Search](#abaf)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向量搜索](#abaf)'
- en: '[Question answering](#cf85)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[问答系统](#cf85)'
- en: '[Generative search](#a30a)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[生成搜索](#a30a)'
- en: Prerequisites
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'To follow along in this tutorial, you will need to have the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本教程，你需要具备以下条件：
- en: Python 3 environment
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3 环境
- en: '[OpenAI](https://openai.com/) API key (or alternatively, an API key for Hugging
    Face, Cohere, or PaLM)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenAI](https://openai.com/) API 密钥（或选择 Hugging Face、Cohere 或 PaLM 的 API 密钥）'
- en: '*A note on the API key:* In this tutorial, we will generate embeddings from
    text via an inference service (in this case, [OpenAI](https://openai.com/)). Depending
    on which inference service you use, make sure to check the provider''s pricing
    page to avoid unexpected costs. E.g., the used [Ada model (version 2) costs $0.0001
    per 1,000 tokens](https://openai.com/pricing) at the time of writing and resulted
    in less than 1 cent in inference costs for this tutorial.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于 API 密钥的说明：* 在本教程中，我们将通过一个推理服务（在这种情况下是[OpenAI](https://openai.com/)）从文本中生成嵌入。根据你使用的推理服务，请确保检查提供商的定价页面以避免意外费用。例如，使用的[阿达模型（版本
    2）在撰写时的费用为每 1,000 个令牌 $0.0001](https://openai.com/pricing)，在本教程中推理费用不到 1 美分。'
- en: Setup
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: You can run Weaviate either on your own instances (using Docker, Kubernetes,
    or Embedded Weaviate) or as a managed service using Weaviate Cloud Services (WCS).
    For this tutorial, we will run a Weaviate instance with WCS, as this is the recommended
    and most straightforward way.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在自己的实例上运行 Weaviate（使用 Docker、Kubernetes 或嵌入式 Weaviate），也可以通过 Weaviate Cloud
    Services (WCS) 作为托管服务运行。对于本教程，我们将使用 WCS 运行 Weaviate 实例，因为这是推荐的最简单的方法。
- en: How to Create a Cluster with Weaviate Cloud Services (WCS)
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Weaviate Cloud Services (WCS) 创建集群
- en: To be able to use the service, you first need to [register with WCS](https://console.weaviate.cloud/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用该服务，你首先需要 [注册 WCS](https://console.weaviate.cloud/)。
- en: Once you are registered, you can create a new Weaviate Cluster by clicking the
    “Create cluster” button.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，你可以通过点击“创建集群”按钮来创建一个新的 Weaviate 集群。
- en: '![](../Images/cac79d7af6e30a06e44d88de4ee8bee6.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cac79d7af6e30a06e44d88de4ee8bee6.png)'
- en: Screenshot of Weaviate Cloud Services
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Weaviate Cloud Services 的截图
- en: For this tutorial, we will be using the free trial plan, which will provide
    you with a sandbox for 14 days. (You won’t have to add any payment information.
    Instead, the sandbox simply expires after the trial period. But you can create
    a new free trial sandbox anytime.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们将使用免费的试用计划，该计划为你提供 14 天的沙盒。（你无需添加任何支付信息。相反，沙盒将在试用期结束后过期。但你可以随时创建一个新的免费试用沙盒。）
- en: 'Under the “Free sandbox” tab, make the following settings:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在“免费沙盒”标签下，进行以下设置：
- en: Enter a cluster name
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入集群名称
- en: Enable Authentication (set to “YES”)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用身份验证（设置为“是”）
- en: '![](../Images/db24341de07f83075b91e11d83f80aef.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db24341de07f83075b91e11d83f80aef.png)'
- en: Screenshot of Weaviate Cloud Services plans
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Weaviate Cloud Services 计划的截图
- en: Finally, click “Create” to create your sandbox instance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击“创建”以创建你的沙盒实例。
- en: How to Install Weaviate in Python
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Python 中安装 Weaviate
- en: Last but not least, add the `weaviate-client` to your Python environment with
    `pip`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，使用 `pip` 将 `weaviate-client` 添加到你的 Python 环境中
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and import the library:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 并导入库：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**How To Access a Weaviate Cluster Through a Client**'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**如何通过客户端访问 Weaviate 集群**'
- en: 'For the next step, you will need the following two pieces of information to
    access your cluster:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一步，你将需要以下两项信息来访问你的集群：
- en: The cluster URL
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群 URL
- en: Weaviate API key (under “Enabled — Authentication”)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Weaviate API 密钥（在“启用 — 身份验证”下）
- en: '![](../Images/5f272ff38d248ed5e5f866d4e61f3c37.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5f272ff38d248ed5e5f866d4e61f3c37.png)'
- en: Screenshot of Weaviate Cloud Services sandbox
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Weaviate Cloud Services 沙盒的截图
- en: Now, you can instantiate a Weaviate client to access your Weaviate cluster as
    follows.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以实例化一个 Weaviate 客户端以访问你的 Weaviate 集群，如下所示。
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, we are using the OpenAI API key under `additional_headers`
    to access the embedding model later. If you are using a different provider than
    OpenAI, change the key parameter to one of the following that apply: `X-Cohere-Api-Key`,
    `X-HuggingFace-Api-Key`, or `X-Palm-Api-Key`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用`additional_headers`下的 OpenAI API 密钥来访问嵌入模型。如果你使用的是不同于 OpenAI 的提供者，请将密钥参数更改为以下之一：`X-Cohere-Api-Key`，`X-HuggingFace-Api-Key`
    或 `X-Palm-Api-Key`。
- en: 'To check if everything is set up correctly, run:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否一切设置正确，请运行：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If it returns `True`, you’re all set for the next steps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回`True`，你已为下一步做好准备。
- en: How to Create and Populate a Weaviate Vector Database
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建和填充 Weaviate 向量数据库
- en: Now, we’re ready to create a vector database in Weaviate and populate it with
    some data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备在 Weaviate 中创建一个向量数据库并用一些数据填充它。
- en: For this tutorial, we will use the first 100 rows of the [200.000+ Jeopardy
    Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    dataset [1] from Kaggle.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们将使用 Kaggle 上的 [200,000+ Jeopardy 问题](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    数据集的前 100 行 [1]。
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/0537b31ea6ffbae1f3adae0b122ec306.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0537b31ea6ffbae1f3adae0b122ec306.png)'
- en: First few rows of the [200.000+ Jeopardy Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    dataset [1] from Kaggle.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Kaggle 上的 [200,000+ Jeopardy 问题](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    数据集的前几行 [1]。
- en: '*A note on the number of tokens and related costs: In the following example,
    we will embed the columns “category”, “question”, and “answer” for the first 100
    rows. Based on a calculation with the* `*tiktoken*` *library, this will result
    in roughly 3,000 tokens to embed, which* [*roughly results in $0.0003 inference
    costs with OpenAI’s Ada model (version 2) as of July 2023*](https://openai.com/pricing)*.*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于令牌数量和相关成本的说明：在以下示例中，我们将为前 100 行嵌入“category”、“question”和“answer”列。根据与* `*tiktoken*`
    *库的计算，这将产生大约 3,000 个令牌用于嵌入，这* [*大约会导致 OpenAI 的 Ada 模型（版本 2）在 2023 年 7 月的推理成本为
    $0.0003*](https://openai.com/pricing)*。*'
- en: 'Step 1: Create a Schema'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一步：创建模式
- en: 'First, we need to define the underlying data structure and some configurations:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义底层数据结构和一些配置：
- en: '`class`: What will the collection of objects in this vector space be called?'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class`：这个向量空间中的对象集合将被称为什么？'
- en: '`properties`: The properties of an object, including the property name and
    data type. In the Pandas Dataframe analogy, these would be the columns in the
    DataFrame.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`properties`：对象的属性，包括属性名称和数据类型。在Pandas Dataframe类比中，这些就是DataFrame中的列。'
- en: '`vectorizer`: The model that generates the embeddings. For text objects, you
    would typically select one of the `[text2vec](https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules)`
    modules (`text2vec-cohere`, `text2vec-huggingface`, `text2vec-openai`, or `text2vec-palm`)
    according to the provider you are using.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vectorizer`：生成嵌入的模型。对于文本对象，通常你会选择一个`[text2vec](https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules)`模块（`text2vec-cohere`、`text2vec-huggingface`、`text2vec-openai`或`text2vec-palm`），具体选择取决于你使用的提供商。'
- en: '`moduleConfig`: Here, you can define the details of the used modules. E.g.,
    the vectorizer is a module for which you can define which model and version to
    use.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moduleConfig`：在这里，你可以定义所用模块的详细信息。例如，向量化器是一个模块，你可以定义使用哪个模型和版本。'
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the above schema, you can see that we will create a class called `"JeopardyQuestion"`,
    with the three text properties `"category"`, `"question"`, and `"answer"`. The
    vectorizer we are using is OpenAI’s Ada model (version 2). All properties will
    be vectorized but not the class name (`"vectorizeClassName" : False`). If you
    have properties you don’t want to embed, you could specify this (see the [docs](https://weaviate.io/developers/academy/zero_to_mvp/schema_and_imports/schema)).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述模式中，你可以看到我们将创建一个名为`"JeopardyQuestion"`的类，具有三个文本属性`"category"`、`"question"`和`"answer"`。我们使用的向量化器是OpenAI的Ada模型（版本2）。所有属性都将被向量化，但类名（`"vectorizeClassName"
    : False`）不会。如果你有不希望嵌入的属性，可以指定这一点（见[文档](https://weaviate.io/developers/academy/zero_to_mvp/schema_and_imports/schema)）。'
- en: Once you have defined the schema, you can create the class with the `create_class()`
    method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了模式，你可以使用`create_class()`方法创建类。
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To check if the class has been created successfully, you can review its schema
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查类是否已成功创建，你可以如下查看其模式：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The created schema looks as shown below:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的模式如下所示：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Step 2: Import data into Weaviate'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤2：将数据导入Weaviate
- en: At this stage, the vector database has a schema but is still empty. So, let’s
    populate it with our dataset. This process is also called “upserting”.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，向量数据库已有模式但仍为空。因此，让我们用数据集填充它。这一过程也称为“upserting”。
- en: 'We will upsert the data in batches of 200\. If you paid attention, you know
    this isn’t necessary here because we only have 100 rows of data. But once you
    are ready to upsert larger amounts of data, you will want to do this in batches.
    That’s why I’ll leave the code for batching here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以每批200条的方式进行数据的upsert。如果你注意到了，你会知道这里不需要这样做，因为我们只有100行数据。但一旦你准备好进行更大规模的数据upsert，你会希望以批量方式进行。这就是为什么我在这里留下批处理代码：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Although, Weaviate will generate a universally unique identifier (`uuid`) automatically,
    we will manually generate the `uuid` with the `generate_uuid5()` function from
    the `question_object` to avoid importing duplicate items.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Weaviate会自动生成一个通用唯一标识符（`uuid`），我们将通过`question_object`的`generate_uuid5()`函数手动生成`uuid`，以避免导入重复的项目。
- en: 'For a sanity check, you can review the number of imported objects with the
    following code snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 进行完整性检查时，你可以使用以下代码片段查看导入对象的数量：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to Query the Weaviate Vector Database
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何查询Weaviate向量数据库
- en: 'The most common operation you will do with a vector database is to retrieve
    objects. To retrieve objects, you query the Weaviate vector database with the
    `get()` function:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你最常做的操作是检索对象。要检索对象，你可以使用`get()`函数查询Weaviate向量数据库：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Class`: specifies the name of the class of objects to be retrieved. Here:
    `"JeopardyQuestion"`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Class`：指定要检索的对象类的名称。这里是`"JeopardyQuestion"`。'
- en: '`properties`: specifies the properties of the objects to be retrieved. Here:
    one or more of `"category"`, `"question"`, and `"answer"`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`properties`：指定要检索的对象属性。这里包括`"category"`、`"question"`和`"answer"`中的一个或多个。'
- en: '`arguments`: specifies the search criteria to retrieve the objects, such as
    limits or aggregations. We will cover some of these in the following examples.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arguments`：指定检索对象的搜索标准，例如限制条件或聚合。在以下示例中，我们将介绍一些这些标准。'
- en: Let’s retrieve some entries from the `JeopardyQuestion` class with the `get()`
    function to see what they look like. In the Pandas analogy, you can think of the
    following as `df.head(2)`. Because the `get()` function’s response is in JSON
    format, we will import the related library to display the result in a visually
    appealing format.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`get()`函数从`JeopardyQuestion`类中检索一些条目，以查看它们的样子。在Pandas的类比中，你可以将以下内容视为`df.head(2)`。由于`get()`函数的响应是JSON格式的，我们将导入相关库以以视觉上吸引人的格式显示结果。
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the above code snippet, you can see that we are retrieving objects from the
    `"JeopardyQuestion"` class. We specified to retrieve the properties `"category"`,
    `"question"`, and `"answer"`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，你可以看到我们从`"JeopardyQuestion"`类中检索对象。我们指定了检索属性`"category"`、`"question"`和`"answer"`。
- en: 'We specified two additional `arguments`: First, we specified with the `.with_additional()`
    argument to retrieve additional information about the object''s id and the vector
    embedding. And with the `.with_limit(2)` argument, we specified only to retrieve
    two objects. This limitation is important, and you will see it again in the later
    examples. This is because retrieving objects from a vector database does not return
    the exact matches but returns objects based on similarity, which has to be limited
    by a threshold.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了两个额外的`arguments`：首先，我们使用`.with_additional()`参数指定检索关于对象ID和向量嵌入的额外信息。然后，使用`.with_limit(2)`参数，我们指定只检索两个对象。这种限制很重要，你将在后续示例中再次看到。这是因为从矢量数据库中检索对象不会返回完全匹配的结果，而是基于相似性返回对象，这需要通过阈值来限制。
- en: Vector search
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矢量搜索
- en: Now, we’re ready to do some vector search! What’s cool about retrieving information
    from a vector database is that you can e.g., tell it to retrieve Jeopardy questions
    related to the `"concepts"` around animals.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备进行一些矢量搜索！从矢量数据库中检索信息的酷炫之处在于，你可以例如要求它检索与`"concepts"`相关的Jeopardy问题。
- en: 'For this, we can use the `.with_near_text()` argument and pass it the `"concepts"`
    we are interested in as shown below:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以使用`.with_near_text()`参数，并传入我们感兴趣的`"concepts"`，如下所示：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The specified `vectorizer` then converts the input text (`"animals”`) to a
    vector embedding and retrieves the two closest results:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 指定的`vectorizer`将输入文本（`"animals”`）转换为向量嵌入，并检索两个最接近的结果：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can already see how cool this is: We can see that the vector search returned
    two questions where the answer is an animal from two completely different categories.
    With a classical keyword search, you would have had first to define a list of
    animals and then retrieve all questions that contain one of the defined animals.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这有多酷：我们看到矢量搜索返回了两个问题，其答案都是动物，但来自两个完全不同的类别。使用传统的关键词搜索，你必须首先定义一个动物列表，然后检索所有包含其中一个定义动物的问题。
- en: Question answering
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问答功能
- en: Question answering is one of the most popular examples when it comes to combining
    LLMs with vector databases.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 问答是将LLMs与矢量数据库结合使用时最受欢迎的示例之一。
- en: 'To enable question answering, you need to specify a vectorizer (which you should
    already have) and a question-answering module under the module configuration,
    as shown in the following example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用问答功能，你需要在模块配置中指定一个矢量化器（你应该已经有了）和一个问答模块，如下例所示：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For question-answering, you need to add the `with_ask()` argument and also retrieve
    `_additional`properties.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于问答功能，你需要添加`with_ask()`参数，并且检索`_additional`属性。
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The above piece of code looks through all questions that may contain the answer
    to the question `"Which animal was mentioned in the title of the Aesop fable?"`
    and returns the answer `"The ant"`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码会查找所有可能包含问题`"Which animal was mentioned in the title of the Aesop fable?"`答案的提问，并返回答案`"The
    ant"`。
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Generative search
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成搜索
- en: By incorporating LLMs, you can also transform the data before returning the
    search result. This concept is called generative search.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合LLMs，你还可以在返回搜索结果之前转换数据。这一概念称为生成搜索。
- en: 'To enable generative search, you need to specify a generative module under
    the module configuration, as shown in the following example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用生成搜索，你需要在模块配置中指定一个生成模块，如下例所示：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For generative search, you only need to add the `with_generate()` argument
    to your previous vector search code as shown below:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生成搜索，你只需在之前的矢量搜索代码中添加`with_generate()`参数，如下所示：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The above piece of code does the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码做了以下操作：
- en: Search for the question closest to the concept of `"animals"`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索最接近`"animals"`概念的问题
- en: Return the question `"Say the name of this type of mollusk you see"` with the
    answer `"an octopus"`
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回问题 `"说出你看到的这种软体动物的名字"`，答案是 `"章鱼"`
- en: 'Generate a completion for the prompt `"Generate a question to which the answer
    is an octopus”` with the final result:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为提示 `"生成一个答案是章鱼的问题"` 生成一个完成的结果：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The popularity of the LLM space has not only brought up many interesting new
    developer tools like LangChain or LLaMaIndex. It also has shown us how to use
    already existing tools, such as vector databases, to enhance the potential of
    LLM-powered applications.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: LLM 领域的流行不仅带来了许多有趣的新开发者工具，如 LangChain 或 LLaMaIndex，还展示了如何利用现有工具（如向量数据库）来增强 LLM
    驱动的应用程序的潜力。
- en: In this article, we have started playing around with Weaviate to not only use
    vector databases for vector search but also for question-answering and generative
    search in combination with LLMs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们开始尝试使用 Weaviate，不仅利用向量数据库进行向量搜索，还结合 LLM 进行问答和生成搜索。
- en: 'If you are interested in a more in-depth walkthrough, I recommend checking
    out this comprehensive four part course on vector databases and Weaviate:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对更深入的教程感兴趣，我推荐查看这门全面的四部分课程，内容涉及向量数据库和 Weaviate：
- en: '[](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
    [## 1\. Zero to MVP | Weaviate — vector database'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
    [## 1\. 从零到 MVP | Weaviate — 向量数据库'
- en: Course overview
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 课程概述
- en: weaviate.io](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: weaviate.io](https://weaviate.io/developers/academy/zero_to_mvp?source=post_page-----14bbb9285839--------------------------------)
- en: '*Disclaimer: I am a Developer Advocate at Weaviate at the time of this writing.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明：撰写本文时，我是 Weaviate 的开发者倡导者。*'
- en: Enjoyed This Story?
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 喜欢这个故事吗？
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[*免费订阅*](https://medium.com/subscribe/@iamleonie) *以在我发布新故事时收到通知。*'
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
    [## 每当 Leonie Monigatti 发布时获取电子邮件通知。'
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当 Leonie Monigatti 发布时获取电子邮件通知。通过注册，如果你还没有 Medium 账户，将创建一个…
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----14bbb9285839--------------------------------)
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*在* [*LinkedIn*](https://www.linkedin.com/in/804250ab/)、[*Twitter*](https://twitter.com/helloiamleonie)
    *和* [*Kaggle*](https://www.kaggle.com/iamleonie) *上找到我！*'
- en: References
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: Dataset
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集
- en: '[1] Ulrik Thyge Pedersen(2023). [200.000+ Jeopardy Questions](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    in Kaggle Datasets.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Ulrik Thyge Pedersen (2023). [200,000+ Jeopardy 问题](https://www.kaggle.com/datasets/ulrikthygepedersen/200000-jeopardy-questions)
    在 Kaggle 数据集中。'
- en: '**License:** Attribution 4.0 International (CC BY 4.0)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**许可证：** 4.0 国际版（CC BY 4.0）'
- en: Image References
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片参考
- en: If not otherwise stated, all images are created by the author.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有另行说明，所有图片均由作者创作。
- en: Web & Literature
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络与文献
- en: '[2] Weaviate (2023). [Weaviate documentation](https://weaviate.io/developers/weaviate)
    (accessed 14\. July 2023)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Weaviate (2023). [Weaviate 文档](https://weaviate.io/developers/weaviate)（访问日期：2023年7月14日）'
