- en: 'Taipy: a Tool for Building User-Friendly Production-Ready Data Scientists Applications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Taipy：构建用户友好的生产就绪数据科学应用程序的工具
- en: 原文：[https://towardsdatascience.com/taipy-a-tool-for-building-user-friendly-production-ready-data-scientists-applications-80de97aaf7dd](https://towardsdatascience.com/taipy-a-tool-for-building-user-friendly-production-ready-data-scientists-applications-80de97aaf7dd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/taipy-a-tool-for-building-user-friendly-production-ready-data-scientists-applications-80de97aaf7dd](https://towardsdatascience.com/taipy-a-tool-for-building-user-friendly-production-ready-data-scientists-applications-80de97aaf7dd)
- en: A simple, quick, and efficient way to build a full-stack data application
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一种简单、快速且高效的方式来构建全栈数据应用程序
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)
    ·14 min read·Jul 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)
    ·14分钟阅读·2023年7月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/dd3f4a403960bdb49c1abb76cda2d813.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd3f4a403960bdb49c1abb76cda2d813.png)'
- en: Image by [Campaign Creators](https://unsplash.com/@campaign_creators) on [Unsplash](https://unsplash.com/photos/pypeCEaJeZY)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Campaign Creators](https://unsplash.com/@campaign_creators) 提供，来源于 [Unsplash](https://unsplash.com/photos/pypeCEaJeZY)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As a Data Scientist, you might want to create dashboards for data visualization,
    visualize data and even implement business applications to assist stakeholders
    in making actionable decisions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，你可能希望创建数据可视化的仪表板，展示数据，甚至实现商业应用来协助利益相关者做出可操作的决策。
- en: 'Multiple tools and technology can be used to perform those tasks, whether open-source
    or proprietary software. However, these might not be ideal for the following reasons:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 多种工具和技术可以用于执行这些任务，无论是开源还是专有软件。然而，这些可能由于以下原因而不理想：
- en: Some of the open-source technologies require a steep learning curve and hiring
    individuals with the appropriate expertise. Consequently, organizations may face
    an increased onboarding time for new employees, higher training costs, and potential
    challenges in finding qualified candidates.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些开源技术需要陡峭的学习曲线和聘请具备相应专长的人员。因此，组织可能面临新员工的入职时间增加、培训成本更高以及寻找合格候选人的潜在挑战。
- en: Other open-source solutions are great for prototypes but will not scale to a
    production-ready application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他开源解决方案非常适合原型设计，但无法扩展到生产就绪的应用程序。
- en: Similarly, proprietary tools also come with their own challenges, including
    higher licensing costs, limited customization, and difficulty for businesses to
    switch to other solutions.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，专有工具也带来了自己的挑战，包括更高的许可费用、有限的自定义和企业难以切换到其他解决方案。
- en: '*Wouldn’t it be nice if there was a tool that is not only open-source but also
    easy to learn and able to scale into a full application?*'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果有一个不仅是开源的，而且易于学习并能够扩展为完整应用程序的工具，那该多好啊？*'
- en: That’s where Taipy comes in handy 🎉
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Taipy发挥作用的地方🎉
- en: This article will explain what Taipy is, along with some business cases that
    it can solve before exploring its key features. Furthermore, it will illustrate
    all the steps to create a full web application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将解释Taipy是什么，并展示它可以解决的一些商业案例，然后再深入探讨其关键特性。此外，它还将说明创建完整Web应用程序的所有步骤。
- en: What is Taipy and why should you care?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Taipy是什么，为什么你应该关心它？
- en: It is an open-source, 100% Python library and only requires basic knowledge
    of Python programming. It allows data scientists and machine learning engineers,
    and any other Python programmer to quickly turn their data and machine learning
    models into a fully functional web application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个开源的、100% Python 库，只需要基本的 Python 编程知识即可使用。它允许数据科学家、机器学习工程师以及任何其他 Python 程序员迅速将他们的数据和机器学习模型转化为功能齐全的
    Web 应用程序。
- en: 'In today’s rapidly changing environment, the demand for robust, flexible, and
    powerful tools becomes essential, and below are some of the features that make
    Taipy such a unique platform:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今迅速变化的环境中，对强大、灵活且高效工具的需求变得至关重要，以下是一些使 Taipy 成为独特平台的特性：
- en: It is not exclusively designed for pilots but can also be extended to industrialized
    projects.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不仅仅为试点项目设计，还可以扩展到工业化项目。
- en: The simplicity of Taipy combined with powerful functionalities allow Python
    developers with a minimal programming background to build robust solutions in
    a short amount of time.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taipy 的简单性与强大的功能相结合，使得具有最低编程背景的 Python 开发者可以在短时间内构建强大的解决方案。
- en: A high level of customizability authorizes users quickly modify and adapt Taipy’s
    functionalities to their needs, which provides a personalized experience many
    open-source tools fail to offer.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度的可定制性使用户能够快速修改和调整 Taipy 的功能以满足他们的需求，这提供了许多开源工具无法提供的个性化体验。
- en: The synchronous and asynchronous calls provided by Taipy allow the execution
    of multiple tasks simultaneously, which improves its overall performance.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taipy 提供的同步和异步调用允许同时执行多个任务，从而提高了整体性能。
- en: A Taipy application can be developed using Python scripts or Jupyter Notebooks
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taipy 应用程序可以通过 Python 脚本或 Jupyter Notebooks 开发。
- en: With Taipy’s pipeline versioning capability, users can effectively manage different
    project versions.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 借助 Taipy 的管道版本控制功能，用户可以有效地管理不同的项目版本。
- en: '[Taipy studio](https://docs.taipy.io/en/release-2.1/manuals/studio/) extension
    can be installed to Visual Studio Code to significantly accelerate the development
    of Taipy applications.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[Taipy studio](https://docs.taipy.io/en/release-2.1/manuals/studio/) 扩展可以安装到
    Visual Studio Code 中，从而显著加快 Taipy 应用程序的开发速度。'
- en: Key Features of Taipy
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Taipy 的关键特性
- en: Even though Taipy is great for Front-End or Back-End development, its true potential
    shines when developing a full web app with both front-end and back-end components
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Taipy 对于前端或后端开发非常出色，但当涉及到开发具有前端和后端组件的完整 Web 应用程序时，其真正的潜力才会显现。
- en: 'Let’s have a closer look at the main features of each one of them:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看它们的主要功能：
- en: Taipy Front-End Functionalities
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Taipy 前端功能
- en: Creating a user interface is performed with a basic knowledge of Python programming.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户界面只需具备基本的 Python 编程知识。
- en: Taipy is designed to be user-friendly, which makes the user interface creation
    simple and intuitive.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taipy 旨在用户友好，使用户界面的创建简单直观。
- en: No web design knowledge is required and it eliminates all prerequisites for
    CSS and HTML.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要网页设计知识，消除了所有 CSS 和 HTML 的先决条件。
- en: It leverages augmented markdown syntax to assist users in the creation of their
    desired web pages.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它利用增强的 Markdown 语法来帮助用户创建他们想要的网页。
- en: Taipy Back-End Functionalities
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Taipy 后端功能
- en: Taipy supports the creation of a robust pipeline to handle different scenarios.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taipy 支持创建强大的管道以处理不同的场景。
- en: It makes the modeling of Directed Acyclic Graphs (DAGs) straightforward.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使得有向无环图（DAGs）的建模变得简单明了。
- en: The data caching feature improves the overall performance of Taipy applications.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据缓存功能提升了 Taipy 应用程序的整体性能。
- en: Registry of Pipeline executions.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道执行的注册。
- en: Pipeline Versioning.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道版本控制。
- en: Users can track and evaluate their applications’ performance with Taipy’s KPI
    tracking tool.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以通过 Taipy 的 KPI 追踪工具跟踪和评估他们应用程序的性能。
- en: Built-in Visualization of your pipelines and associated data.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的管道和相关数据的可视化。
- en: Getting started with Taipy
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Taipy
- en: Now that you have a better understanding of Taipy, let’s dive into an end-to-end
    implementation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对 Taipy 有了更好的了解，让我们深入探讨一个端到端的实现。
- en: The core [Taipy documentation](https://docs.taipy.io/en/latest/) and [community
    contributions](https://www.taipy.io/community-contributions/) contain relevant
    information, and this article will by no means replace them but can be used as
    an alternative place to start learning about Taipy in a real-world scenario.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 核心[Taipy文档](https://docs.taipy.io/en/latest/)和[社区贡献](https://www.taipy.io/community-contributions/)包含相关信息，本文绝不会取代它们，但可以作为了解Taipy在实际场景中的一种替代起点。
- en: To better illustrate our case, we will use the [health-related data breaches](https://ocrportal.hhs.gov/ocr/breach/breach_report.jsf)
    maintained by the U.S. Department of Health and Human Services Office for Civil
    Rights. It provides information on reported breaches of unsecured protected health
    information about 500+ individuals.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明我们的案例，我们将使用[健康相关数据泄露](https://ocrportal.hhs.gov/ocr/breach/breach_report.jsf)，这些数据由美国卫生与公众服务部民权办公室维护。它提供了关于500多名个人的未加密受保护健康信息泄露的报告信息。
- en: 'This section will be two-fold:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将分为两个部分：
- en: Build a graphical interface using Taipy to help end users have a global overview
    of different types of breaches for actionable decision-making.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Taipy构建一个图形界面，以帮助最终用户对不同类型的漏洞有一个整体概述，从而做出可操作的决策。
- en: Develop a Taipy back-end framework to interact with a classification machine
    learning model in order to predict the type of breach for a given information.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个Taipy后端框架，以与分类机器学习模型互动，以预测给定信息的漏洞类型。
- en: Quick installation
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速安装
- en: 'Using Taipy requires Python 3.8 or above. Anaconda Python distribution (conda)
    and visual studio code IDE are used to install Taipy as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Taipy需要Python 3.8或更高版本。使用Anaconda Python发行版（conda）和Visual Studio Code IDE安装Taipy，如下所示：
- en: Create the virtual environment with the name **taipy-env** and install Python
    3.8
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建名为**taipy-env**的虚拟环境并安装Python 3.8
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Activate the previously created environment
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 激活之前创建的环境
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The following command installs the taipy library within the virtual environment
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将在虚拟环境中安装taipy库
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running a Taipy App
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Taipy应用程序
- en: Create a Python script file <taipy_app.py>
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Python脚本文件<taipy_app.py>
- en: 'Enter the following code, then save the file:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入以下代码，然后保存文件：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the conda console, from the taipy_app.py type the command below:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在conda控制台中，从taipy_app.py中输入以下命令：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Successful execution of the code above generates this URL, and automatically
    opens a navigator window:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的成功执行会生成此URL，并自动打开一个浏览器窗口：
- en: '![](../Images/40f95eada7cdd380a081793333e59e63.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/40f95eada7cdd380a081793333e59e63.png)'
- en: URL to access the App
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 访问应用程序的URL
- en: '![](../Images/764e1c6b2226c8eb7d2ffeaee5813f46.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/764e1c6b2226c8eb7d2ffeaee5813f46.png)'
- en: Image by Author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: That’s awesome!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Now, let’s understand the previous code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解之前的代码。
- en: Import the Gui module used for creating Dashboards.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入用于创建仪表盘的Gui模块。
- en: The `analytics_choice` is the list of possible choices.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`analytics_choice`是可能选择的列表。'
- en: Then the variable `choice` will hold a value from the `analytics_choice`and
    the interpolation of these variables is done using the <|…|> syntax.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，变量`choice`将保存来自`analytics_choice`的值，这些变量的插值使用<|…|>语法完成。
- en: 'my_page contains the information below in markdown format:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: my_page包含以下markdown格式的信息：
- en: '**Security Breach Analytics Dashboard** has the H1 level represented with a
    single “#” symbol.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全漏洞分析仪表盘**的H1级别用单个“#”符号表示。'
- en: '**Breach Analysis** has the H2 level represented with a double “#” symbol followed
    by a simple text “Please choose from … analysis”'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞分析**的H2级别用双“#”符号表示，后跟简单的文本“请选择…分析”'
- en: We create a dropdown list using the original `analytics_choice` and choicevariables.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用原始的`analytics_choice`和choice变量创建一个下拉列表。
- en: Display the choice made by the user.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示用户做出的选择。
- en: Finally, run the application by giving the my_app_page and specifying the port
    and host. Not specifying the server port will open on a default port (5000). For
    this specific example, the app opens on **9696** at [**http://localhost:9696**](http://localhost:9696)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过指定my_app_page以及端口和主机来运行应用程序。不指定服务器端口将使用默认端口（5000）。对于这个特定的示例，应用程序在**9696**端口打开，网址为[**http://localhost:9696**](http://localhost:9696)
- en: Time to create a Taipy Dashboard from Scratch
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头开始创建一个Taipy仪表盘
- en: 'Let’s take our Taipy knowledge to the next level by implementing a complete
    dashboard. The main sections of the dashboard will leverage the following visual
    elements of Taipy:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现一个完整的仪表盘，将我们的Taipy知识提升到一个新的水平。仪表盘的主要部分将利用Taipy的以下视觉元素：
- en: Make a choice from a list of options using **Selectors**.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从选项列表中进行选择，使用 **选择器**。
- en: Trigger an action by clicking the button using **Buttons**.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **按钮** 通过点击按钮触发操作。
- en: Show the raw data in **Tables.**
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**表格**中显示原始数据。
- en: Display the graphical results with **Charts**.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **图表** 显示图形结果。
- en: 'All these visualization elements mentioned above are created by introducing
    the following markdown syntax:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些可视化元素都是通过引入以下 Markdown 语法创建的：
- en: <|{variable}|visual_element_name|param1=param1|param2=param2|…|>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <|{variable}|visual_element_name|param1=param1|param2=param2|…|>
- en: The final dashboard will appear as follows, and the final source code is available
    at the end of the article.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最终仪表板将如下所示，最终的源代码将在文章末尾提供。
- en: '![](../Images/373486536a0723ee92d23c8ed63e4775.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/373486536a0723ee92d23c8ed63e4775.png)'
- en: Final dashboard created with Taipy GUI (Image by Author)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Taipy GUI 创建的最终仪表板（作者提供的图像）
- en: 'To perform a step-by-step illustration, an example of each component will be
    given in a separate file and each file is run with the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行逐步演示，将在单独的文件中提供每个组件的示例，并使用以下命令运行每个文件：
- en: '`python file_name.py`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`python file_name.py`'
- en: Selectors
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器
- en: These give users the opportunity to choose from a dropdown list and it corresponds
    to what we have implemented in the “Running a Taipy App” section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项允许用户从下拉列表中选择，这与我们在“运行 Taipy 应用程序”部分中实现的功能相对应。
- en: Buttons and Tables
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮和表格
- en: Buttons in the user interface initiate a specific function when clicked or pressed.
    The ***on_action*** function is triggered upon the button press.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面中的按钮在被点击或按下时会启动特定的功能。***on_action*** 函数会在按钮被按下时触发。
- en: 'Tables, on the other hand, are used to organize data offering three display
    modes: paginated, ***allow_all_rows***, ***unpaginated***, and ***auto_loading***.
    The [official documentation](https://www.taipy.io/tips/using-tables/) provides
    more information about each one of these modes.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 表格用于组织数据，提供三种显示模式：分页、***allow_all_rows***、***unpaginated*** 和 ***auto_loading***。
    [官方文档](https://www.taipy.io/tips/using-tables/) 提供了关于这些模式的更多信息。
- en: 'Create a new file `button.py` with the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件 `button.py`，并包含以下代码：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We start by loading the breach data into a Pandas dataframe. Then, selecting
    “Display Raw Data” displays the whole data in a table format as shown below:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将违约数据加载到 Pandas 数据框中。然后，选择“显示原始数据”将所有数据以表格格式展示，如下所示：
- en: '![](../Images/bdc3208aecbc777cfd5bfeddf0721faa.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdc3208aecbc777cfd5bfeddf0721faa.png)'
- en: Button creation result with Taipy (Image by Author)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Taipy 创建的按钮结果（作者提供的图像）
- en: Charts
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表
- en: 'With a better understanding of the above components, we can combine them to
    create charts, built upon the comprehensive poltly.js graphs library Otherwise,
    [Taipy’s documentation](https://docs.taipy.io/en/latest/manuals/gui/viselements/chart/)
    provides great examples to serve as starting points. Similarly to the previous
    section, create a `charts.py` with the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更好地理解上述组件，我们可以将它们结合起来创建图表，基于全面的 plotly.js 图形库。否则，[Taipy 的文档](https://docs.taipy.io/en/latest/manuals/gui/viselements/chart/)
    提供了很好的示例作为起点。与前一部分类似，创建一个 `charts.py` 文件并包含以下代码：
- en: A chart of type bar is created with State on the `x-axis` and the Proportion
    on the `y-axis` .
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个条形图，其中 State 位于 `x 轴`，Proportion 位于 `y 轴`。
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The final result is this dynamic chart of the number of individuals affected
    by State, and California seems to be the most affected.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是这个动态图表，显示了按 State 受影响的个人数量，似乎加利福尼亚州受影响最严重。
- en: '![](../Images/d29bc220ec409ed9fb528687430e1ce9.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d29bc220ec409ed9fb528687430e1ce9.png)'
- en: Chart with Taipy (Image by Author)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Taipy 的图表（作者提供的图像）
- en: Display an Image
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示图像
- en: 'Displaying an image in Taipy GUI is also straightforward and can be achieved
    with the `image` attribute. The following code displays the word cloud generated
    by the `generate_word_cloud` . The image has a width of 2400 pixels and a height
    of 1000 pixels. Whenever the user’s mouse is on the image, the value of the `hover_text`
    attribute is shown: **“Word Cloud of Breach Location”** in this specific scenario.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Taipy GUI 中显示图像也很简单，可以使用 `image` 属性实现。以下代码展示了由 `generate_word_cloud` 生成的词云。图像的宽度为
    2400 像素，高度为 1000 像素。当用户的鼠标悬停在图像上时，将显示 `hover_text` 属性的值：在这种特定情况下为 **“违约地点的词云”**。
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/60f6489633007a7f2d2ac13b37de63c6.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60f6489633007a7f2d2ac13b37de63c6.png)'
- en: Word cloud of the location of breach information (Image by Author)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 违约信息的位置词云（作者提供的图像）
- en: 'Also, the helper function `generate_word_cloud` is defined as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，辅助函数`generate_word_cloud`的定义如下：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Callback function
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回调函数
- en: 'The goal is to have a dynamic GUI that is updated based on the user’s selection.
    This is achieved using Taipys callback function which automatically triggers any
    function with the name `on_change` in the local namespace as the global callback
    function. The implementation is given as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是拥有一个基于用户选择动态更新的GUI。通过使用Taipy的回调函数实现，这些函数会自动触发局部命名空间中的任何`on_change`函数作为全局回调函数。实现如下：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Layouts
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局
- en: Multiple charts can provide valuable business insights, but displaying them
    vertically one after another may not be the most effective approach
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 多个图表可以提供有价值的商业洞察，但将它们垂直展示一个接一个可能不是最有效的方法。
- en: Instead, we can create a layout to organize the components into a regular grid
    between `layout.start` and `layout.end` block. Each component is created within
    the `part.start` and `part.end` block.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以创建一个布局，将组件组织成一个规则网格，放置在`layout.start`和`layout.end`块之间。每个组件都在`part.start`和`part.end`块内创建。
- en: 'The following basic syntax creates a 2 columns grid with a 1.8 root element’s
    font size:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下基本语法创建了一个2列网格，根元素的字体大小为1.8：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With this understanding of the layout, we can create the final dashboard with
    five main charts:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 理解布局后，我们可以创建最终的仪表板，其中包含五个主要图表：
- en: Chart 1 gives the word cloud related to the location of breach information.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表1展示了与漏洞信息位置相关的词云。
- en: Chart 2 shows the number of individuals affected by State.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表2显示了按州受影响的人员数量。
- en: Chart 3 determines the total number of individuals affected by the Type of breach.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表3确定了按漏洞类型受影响的总人数。
- en: Chart 4 gives for each year the total number of individuals affected.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表4展示了每年受影响的总人数。
- en: Chart 5 shows the number of individuals affected per Covered Entity.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表5显示了每个覆盖实体的受影响人数。
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Before configuring the dashboard, a new `Year` column is created from the `Breach_Submission`
    column, which is then used as the x-axis in Chart 4.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置仪表板之前，从`Breach_Submission`列创建一个新的`Year`列，然后将其用作图表4中的x轴。
- en: Running all the code should generate the first dashboard illustrated above.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 运行所有代码应生成上面展示的第一个仪表板。
- en: Taipy Back-end in Action
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Taipy后端运作情况
- en: In the next section, you will use Taipy’s back-end capabilities to easily and
    efficiently create, manage and execute your data pipelines to train a Random Forest
    classifier and so determine the type of breach of a given breach information.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将使用Taipy的后端功能轻松高效地创建、管理和执行数据管道，以训练一个随机森林分类器，从而确定给定数据的漏洞类型。
- en: There are two main parts in this section. First, you will build the complete
    graphical representation of the workflow using Taipy Studio. Then, write the corresponding
    Python code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本节分为两个主要部分。首先，你将使用Taipy Studio构建完整的工作流图形表示。然后，编写相应的Python代码。
- en: Taipy Studio
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Taipy Studio
- en: 'Taipy Studio is an extension to Visual Studio Code and can be installed as
    follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Taipy Studio是Visual Studio Code的一个扩展，安装方法如下：
- en: '![](../Images/8907b4349764311433eef3564e40954c.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8907b4349764311433eef3564e40954c.png)'
- en: Taipy installation process (Image by Author)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Taipy安装过程（图像由作者提供）
- en: Restart VSCode after the installation is completed, then a Taipy Studio interface
    will be displayed after clicking on the Taipy logo on the bottom left. This will
    show four main tabs such as Config Files, Data Notes, Tasks, Pipelines, and Scenarios.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后重启VSCode，然后点击左下角的Taipy图标将显示Taipy Studio界面。这将显示四个主要标签，如配置文件、数据笔记、任务、管道和场景。
- en: '![](../Images/3e4933bdd8a65fd301a252ba9335094d.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e4933bdd8a65fd301a252ba9335094d.png)'
- en: Taipy Studio interface (Image by Author)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Taipy Studio界面（图像由作者提供）
- en: 'All these tabs can be used to achieve our goal of implementing an end-to-end
    pipeline, and the first step is to create a configuration file (**taipy_config.toml**)
    that will contain all these tabs represented by 4 logos on the top right after
    selecting the “Taipy: Show View” icon.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '所有这些标签都可以用来实现我们的端到端管道目标，第一步是创建一个配置文件（**taipy_config.toml**），该文件将包含所有这些标签，这些标签由选择“Taipy:
    Show View”图标后右上角的4个图标表示。'
- en: '![](../Images/18492c90e07f5f9d26e2719a8e0df612.png)![](../Images/4a794480c5b3c70520ee7122bf24170d.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18492c90e07f5f9d26e2719a8e0df612.png)![](../Images/4a794480c5b3c70520ee7122bf24170d.png)'
- en: Taipy Studio components (Image by Author)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Taipy Studio 组件（图像由作者提供）
- en: '![](../Images/cc8f2c4c689f0f41cd067d683779ec5f.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc8f2c4c689f0f41cd067d683779ec5f.png)'
- en: Taipy tabs illustration
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Taipy 标签说明
- en: Below are the main functions that will be implemented, along with a brief explanation
    of each of the previous tabs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将要实现的主要函数，并附有对每个先前选项卡的简要说明。
- en: '`filter_columns` function is responsible for selecting the relevant columns
    from the data and generating a Pandas dataframe.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_columns` 函数负责从数据中选择相关列并生成 Pandas 数据框。'
- en: '`preprocess_columns` used for performing feature engineering.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preprocess_columns` 用于执行特征工程。'
- en: '`encode_features` responsible for encoding the relevant features in the correct
    format.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encode_features` 负责以正确的格式对相关特征进行编码。'
- en: '`split_data` is the function to split the data into training and testing datasets.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`split_data` 是将数据拆分为训练集和测试集的函数。'
- en: '`train_model` is used to train the model.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train_model` 用于训练模型。'
- en: '`show_performance` is the final stage for displaying the performance of the
    model.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show_performance` 是展示模型性能的最后阶段。'
- en: Scenarios and Pipelines
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景和管道
- en: 'This is the first thing to do when setting up a pipeline. A scenario is made
    up of one or more pipelines. It works as a registry of executions. Let’s create
    a scenario with the name DATA_BREACH_SCENARIO followed by the pipeline DATA_BREACH_PIPELINE
    as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设置管道时要做的第一件事。一个场景由一个或多个管道组成。它作为执行的注册表。让我们创建一个名为 DATA_BREACH_SCENARIO 的场景，然后创建一个名为
    DATA_BREACH_PIPELINE 的管道，如下所示：
- en: '![](../Images/91dae4c5760de2a948f0ff12e7d45347.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91dae4c5760de2a948f0ff12e7d45347.png)'
- en: From Scenario to Pipeline (Image by Author)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从场景到管道（作者提供的图像）
- en: Tasks
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务
- en: A task refers to a Python function that can be executed, and there are overall
    six tasks that will be implemented, from `filter_columns` to `show_performance`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个任务指的是一个可以执行的 Python 函数，总共会实现六个任务，从 `filter_columns` 到 `show_performance`。
- en: 'The output of the pipeline is connected to the input of each task as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的输出连接到每个任务的输入，如下所示：
- en: '![](../Images/ae0ff263a569db05a50b83ebb62712ba.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae0ff263a569db05a50b83ebb62712ba.png)'
- en: From Pipeline to Tasks
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从管道到任务
- en: 'The next step is to configure these tasks in Taipy Studio by connecting each
    Python function to the corresponding task. But before that, we need to create
    those functions'' signatures in the `data_breach_tasks.py` file as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在 Taipy Studio 中配置这些任务，通过将每个 Python 函数连接到相应的任务。但是在此之前，我们需要在 `data_breach_tasks.py`
    文件中创建这些函数的签名，如下所示：
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, we link each task to the corresponding Python following the 3 steps below.
    The illustration is given for the `filter_columns` tasks but has to be performed
    for every task.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们按照以下 3 个步骤将每个任务链接到相应的 Python。下面的插图是针对 `filter_columns` 任务的，但必须对每个任务执行。
- en: '![](../Images/2faf3412f283b7ee41c912a1c25f5c18.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2faf3412f283b7ee41c912a1c25f5c18.png)'
- en: 3 main steps to link a task to a script (Image by Author)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将任务链接到脚本的 3 个主要步骤（作者提供的图像）
- en: Data Nodes
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据节点
- en: Data nodes do not contain the actual data but contain all the necessary information
    to read and write those data. They can be the reference to any data type such
    as text, CSV, JSON, and more.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 数据节点不包含实际数据，而是包含读取和写入这些数据所需的所有信息。它们可以是对任何数据类型的引用，例如文本、CSV、JSON 等。
- en: 'For instance, the `filter_columns` function has:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`filter_columns` 函数包含：
- en: One input node (**filtering_node**) which is a .CSV file, and
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个输入节点 (**filtering_node**)，其类型为 .CSV 文件，以及
- en: 'One output node (**filtered_df**): which is also stored as a .CSV file. This
    is then used as the input of the preprocess_columns function.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个输出节点 (**filtered_df**)：也以 .CSV 文件的形式存储。这然后作为 preprocess_columns 函数的输入。
- en: 'The node for the interaction is defined as follows showing the modification
    of the storage type from pickle to .csv:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 交互节点定义如下，显示了存储类型从 pickle 修改为 .csv：
- en: '![](../Images/4b4ee9cb7cdcaeb8dc81a3bee2080b31.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b4ee9cb7cdcaeb8dc81a3bee2080b31.png)'
- en: Definition of the input type of the filtering_node (Image by Author)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤节点输入类型的定义（作者提供的图像）
- en: '![](../Images/26be0995bdc760738053a68a7740951b.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26be0995bdc760738053a68a7740951b.png)'
- en: Input type of the filtering_node after update (Image by Author)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的过滤节点的输入类型（作者提供的图像）
- en: The next step is to define the path to the original input dataset. This is done
    with the help of the “New property” attribute in the data node. Then, type Enter
    and provide the path to the .CSV file.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义原始输入数据集的路径。这是通过数据节点中的“新属性”属性完成的。然后，按 Enter 并提供 .CSV 文件的路径。
- en: '![](../Images/a394c57ca06c4006cf271ba5441b3ff9.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a394c57ca06c4006cf271ba5441b3ff9.png)'
- en: Definition of the property of the filtering node (Image by Author)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤节点属性的定义（作者提供的图像）
- en: '![](../Images/698a49bc92a446e90c2db9375f36779c.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/698a49bc92a446e90c2db9375f36779c.png)'
- en: Definition of the path to the filtering node (Image by Author)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤节点路径的定义（图片来源于作者）
- en: Repeat the same process for all the inputs where a .CSV file is required, and
    the final diagram will look like this after specifying all the data nodes and
    their relationships.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有需要.csv文件的输入，重复相同的过程，最终图示在指定所有数据节点及其关系后将如下所示。
- en: '![](../Images/ef259b331345b23a85a831c979c68add.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef259b331345b23a85a831c979c68add.png)'
- en: State of the workflow after specifying all the data nodes and their relationships
    (Image by Author)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 指定所有数据节点及其关系后的工作流程状态（图片来源于作者）
- en: After the configuration of the pipeline, a .toml script format of the whole
    diagram is generated in the **taipy_config.toml** file and looks like the one
    shown in the animation below.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置管道后，整个图示的.toml脚本格式会生成在**taipy_config.toml**文件中，其样式如下面的动画所示。
- en: '![](../Images/864d39d9d3d588d960b4da96b694bcb3.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/864d39d9d3d588d960b4da96b694bcb3.png)'
- en: Content of the taipy_config.toml file
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: taipy_config.toml文件的内容
- en: Then, this .toml file can be loaded in any Python script to execute the pipeline.
    Let’s create such a file with the name `run_pipeline.py`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以在任何Python脚本中加载这个.toml文件来执行管道。我们来创建一个名为`run_pipeline.py`的文件。
- en: '[PRE13]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We start by importing the relevant modules, followed by the definition of the
    configuration file and the name of the scenario to trigger.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入相关模块，然后定义配置文件及触发场景的名称。
- en: Then, the pipeline is executed using the submit() function.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用submit()函数执行管道。
- en: 'Finally, we retrieve the model’s performance and print the results, as shown
    below:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检索模型的性能并打印结果，如下所示：
- en: '![](../Images/8b72ef29a754383e17662abb03de55ab.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b72ef29a754383e17662abb03de55ab.png)'
- en: Result of the run_pipeline.py (Image by Author)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: run_pipeline.py的结果（图片来源于作者）
- en: This dataframe can be further integrated into the initial dashboard to display
    in a graphical manner the numerical values.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据框可以进一步整合到初始仪表盘中，以图形化的方式展示数值。
- en: '**Conclusion**'
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This article has provided a complete overview of Taipy, and how to bring front-end
    and back-end to any data and machine learning models to create fully functional
    web applications.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本文提供了对Taipy的全面概述，并展示了如何将前端和后端与任何数据和机器学习模型结合起来，创建完全功能的Web应用程序。
- en: Furthermore, with the new release, Taipy provides Core visual elements that
    allow seamless integration between the front-end and the back-end, empowering
    users to create powerful Business objects effortlessly, and these integrations
    are available from the [official website](https://www.taipy.io/).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，随着新版本的发布，Taipy提供了核心可视化元素，允许前端和后端之间的无缝集成，使用户能够轻松创建强大的业务对象，这些集成功能可以从[官方网站](https://www.taipy.io/)获取。
- en: If you are still hesitant about using Taipy, it is time to give it a try to
    save time, energy, and most importantly, money. Finally, these [awesome tutorials](https://www.taipy.io/tutorials/)
    from Taipy can help you further your learning and strengthen your skill sets.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还在犹豫是否使用Taipy，是时候尝试一下，以节省时间、精力，最重要的是金钱。最后，这些[绝妙的教程](https://www.taipy.io/tutorials/)可以帮助你进一步学习并提升技能。
