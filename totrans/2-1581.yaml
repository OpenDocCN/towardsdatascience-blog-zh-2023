- en: 'NLP with Python: Knowledge Graph'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/nlp-with-python-knowledge-graph-12b93146a458](https://towardsdatascience.com/nlp-with-python-knowledge-graph-12b93146a458)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/bf7a59d41b19f964ce71b34753c515bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: SpaCy, Sentence segmentation, Part-Of-Speech tagging, D**ependency parsing,**
    Named Entity Recognition, and more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)[![Mauro
    Di Pietro](../Images/3586d9d3238d904a1e1fa39c77b59d3f.png)](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)[](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)
    [Mauro Di Pietro](https://maurodp.medium.com/?source=post_page-----12b93146a458--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----12b93146a458--------------------------------)
    ·14 min read·Apr 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, I will show how to build a Knowledge Graph with Python and
    Natural Language Processing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/321c5d15bba2bcd22a3328c17f2827ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Moritz Kindler](https://unsplash.com/@moritz_photography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A [**network graph**](https://en.wikipedia.org/wiki/Graph_theory) is a mathematical
    structure to show relations between points that can be visualized with undirected/directed
    graph structures. It’s a form of database that maps linked nodes.
  prefs: []
  type: TYPE_NORMAL
- en: A [**knowledge base**](https://en.wikipedia.org/wiki/Knowledge_base) is a unified
    repository of information from different sources, like *Wikipedia*.
  prefs: []
  type: TYPE_NORMAL
- en: A [**Knowledge Graph**](https://en.wikipedia.org/wiki/Knowledge_graph) is a
    knowledge base that uses a graph-structured data model. To put it in simple words,
    it’s a particular type of network graph that shows qualitative relationships between
    real-world entities, facts, concepts and events. The term “Knowledge Graph” was
    used for the first time by *Google* in 2012 to introduce [their model](https://en.wikipedia.org/wiki/Google_Knowledge_Graph).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c6b4397f08ef1f66cf0e7624bae5507.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Currently, most companies are building [Data Lakes](https://en.wikipedia.org/wiki/Data_lake),
    a central database in which they toss raw data of all types (i.e. structured and
    unstructured) taken from different sources. Therefore, people need tools to make
    sense of all those pieces of different information. Knowledge Graphs are becoming
    popular as they can simplify exploration of large datasets and insight discovery.
    To put it in another way, a Knowledge Graph connects data and associated metadata,
    so it can be used to build a comprehensive representation of an organization’s
    information assets. For instance, a Knowledge Graph might replace all the piles
    of documents you have to go through in order to ﬁnd one particular information.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge Graphs are considered part of the Natural Language Processing landscape
    because, in order to build “knowledge”, you must go through a process called “**semantic
    enrichment**”. Since nobody wants to do that manually, we need machines and NLP
    algorithms to perform this task for us.
  prefs: []
  type: TYPE_NORMAL
- en: I will present some useful Python code that can be easily applied in other similar
    cases (just copy, paste, run) and walk through every line of code with comments
    so that you can replicate this example (link to the full code below).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/natural_language_processing/example_knowledge_graph.ipynb?source=post_page-----12b93146a458--------------------------------)
    [## DataScience_ArtificialIntelligence_Utils/example_knowledge_graph.ipynb at
    master ·…'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/natural_language_processing/example_knowledge_graph.ipynb?source=post_page-----12b93146a458--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I will parse Wikipedia and extract a page that shall be used as the dataset
    of this tutorial (link below).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://en.wikipedia.org/wiki/Russo-Ukrainian_War?source=post_page-----12b93146a458--------------------------------)
    [## Russo-Ukrainian War - Wikipedia'
  prefs: []
  type: TYPE_NORMAL
- en: The Russo-Ukrainian War is an ongoing international conflict between Russia,
    alongside Russian-backed separatists, and…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/Russo-Ukrainian_War?source=post_page-----12b93146a458--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, I will go through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup: read packages and data with web scraping with [*Wikipedia-API*](https://pypi.org/project/Wikipedia-API/)*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NLP with [*SpaCy*](https://spacy.io/usage/linguistic-features):Sentence segmentation,
    POS tagging, Dependency parsing, NER.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extraction of Entities and their Relations with [*Textacy*](https://spacy.io/universe/project/textacy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network Graph building with [*NetworkX*](https://networkx.org/documentation/stable/auto_examples/index.html)*.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timeline Graph with [*DateParser*](https://dateparser.readthedocs.io/en/latest/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, I need to import the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Wikipedia-api* is the Python wrapper that easily lets you parse Wikipedia
    pages. I shall extract the page I want, excluding all the “notes” and “bibliography”
    at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98801f2ea84a245c028d4c26538a7239.png)'
  prefs: []
  type: TYPE_IMG
- en: from Wikipedia
  prefs: []
  type: TYPE_NORMAL
- en: 'We can simply write the name of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/94afa2a5e25e3dbda1692246d27596bf.png)'
  prefs: []
  type: TYPE_IMG
- en: In this usecase, I will try to map historical events by identifying and extracting
    subjects-actions-objects from the text (so the action is the relation).
  prefs: []
  type: TYPE_NORMAL
- en: NLP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to build a Knowledge Graph, we need first to identify entities and
    their relations. Therefore, we need to process the text dataset with NLP techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the most used library for this type of task is *SpaCy*, an open-source
    software for advanced NLP that leverages *Cython* (C+Python). *SpaCy* uses pre-trained
    language models to tokenize the text and transform it into an object commonly
    called “[document](https://spacy.io/api/doc)”, basically a class that contains
    all the annotations predicted by the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first output of the NLP model is [**Sentence segmentation**](https://spacy.io/usage/linguistic-features#sbd):
    the problem of deciding where a sentence begins and ends. Usually, it’s done by
    splitting paragraphs based on punctuation. Let’s see how many sentences *SpaCy*
    split the text into:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3ec6987c0ef8065f19a9f2d4b1b6e9ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for each sentence, we are going to extract entities and their relations.
    In order to do that, first we need to understand [**Part-of-Speech (POS) tagging**](https://spacy.io/usage/linguistic-features#pos-tagging)**:**
    the process of labeling each word in a sentence with its appropriate grammar tag.
    Here’s the full list of possible tags (as of today):'
  prefs: []
  type: TYPE_NORMAL
- en: '- ***ADJ***: adjective, e.g. big, old, green, incomprehensible, first'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ADP***: adposition (preposition/postposition) e.g. in, to, during'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ADV***: adverb, e.g. very, tomorrow, down, where, there'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***AUX***: auxiliary, e.g. is, has (done), will (do), should (do)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CONJ***: conjunction, e.g. and, or, but'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CCONJ***: coordinating conjunction, e.g. and, or, but'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***DET***: determiner, e.g. a, an, the'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***INTJ***: interjection, e.g. psst, ouch, bravo, hello'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NOUN***: noun, e.g. girl, cat, tree, air, beauty'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NUM***: numeral, e.g. 1, 2017, one, seventy-seven, IV, MMXIV'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PART***: particle, e.g. ‘s, not'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PRON***: pronoun, e.g I, you, he, she, myself, themselves, somebody'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PROPN***: proper noun, e.g. Mary, John, London, NATO, HBO'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PUNCT***: punctuation, e.g. ., (, ), ?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***SCONJ***: subordinating conjunction, e.g. if, while, that'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***SYM***: symbol, e.g. $, %, §, ©, +, −, ×, ÷, =, :), emojis'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***VERB***: verb, e.g. run, runs, running, eat, ate, eating'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***X***: other, e.g. sfpksdpsxmsa'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***SPACE***: space, e.g.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'POS tagging alone is not enough, the model also tries to understand the relationship
    between pairs of words. This task is called [**Dependency (DEP) parsing**](https://spacy.io/usage/linguistic-features#dependency-parse).
    Here’s the full list of possible tags (as of today):'
  prefs: []
  type: TYPE_NORMAL
- en: '- ***ACL***: clausal modifier of noun'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ACOMP***: adjectival complement'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ADVCL:*** adverbial clause modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ADVMOD:*** adverbial modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***AGENT:*** agent'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***AMOD:*** adjectival modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***APPOS:*** appositional modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ATTR:*** attribute'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***AUX:*** auxiliary'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***AUXPASS:*** auxiliary (passive)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CASE:*** case marker'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CC***: coordinating conjunction'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CCOMP:*** clausal complement'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***COMPOUND:*** compound modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CONJ:*** conjunct'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CSUBJ:*** clausal subject'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CSUBJPASS:*** clausal subject (passive)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***DATIVE:*** dative'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***DEP:*** unclassified dependent'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***DET:*** determiner'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***DOBJ:*** direct object'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***EXPL:*** expletive'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***INTJ:*** interjection'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***MARK:*** marker'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***META:*** meta modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NEG:*** negation modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NOUNMOD:*** modifier of nominal'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NPMOD:*** noun phrase as adverbial modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NSUBJ:*** nominal subject'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NSUBJPASS:*** nominal subject (passive)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NUMMOD:*** number modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***OPRD:*** object predicate'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PARATAXIS:*** parataxis'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PCOMP:*** complement of preposition'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***POBJ:*** object of preposition'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***POSS:*** possession modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PRECONJ*:** pre-correlative conjunction'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PREDET:*** pre-determiner'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PREP:*** prepositional modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PRT:*** particle'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PUNCT:*** punctuation'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***QUANTMOD:*** modifier of quantifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***RELCL:*** relative clause modifier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ROOT:*** root'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***XCOMP:*** open clausal complement'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s make an example to understand POS tagging and DEP parsing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4ca9e2e7ea244d3a1bd20faf05a22517.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s check the POS and DEP tags predicted by the NLP model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1410ef9f475e206da6e054efb8c69c85.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '*SpaCy* provides also a [graphic tool](https://spacy.io/usage/visualizers)
    to visualize those annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b8d9a5d99388ba97c4c4eaa3144f8dd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The most important token is the verb (*POS=VERB*) because is the root (*DEP=ROOT*)
    of the meaning in a sentence.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64e0fa11ce6e368669c43d8859a55538.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Auxiliary particles, like adverbs and adpositions (*POS=ADV/ADP*), are often
    linked to the verb as modifiers (*DEP=*mod*), as they can modify the meaning of
    the verb. For instance, “*travel to*” and “*travel from*” have different meanings
    even though the root is the same (“*travel*”).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3287c63bbc5adc3e8332d44c1928d30.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Among the words linked to the verb, there must be some nouns (*POS=PROPN/NOUN*)
    that work as the subject and object (*DEP=nsubj/*obj*) of the sentence.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8a6d2c219de36e650bce6151b5bf3a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Nouns are often near an adjective (*POS=ADJ*) that acts as a modifier of their
    meaning (*DEP=amod*). For instance, in “*good person*” and “*bad person*” the
    adjectives give opposite meanings to the noun *“person”.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e6293965ae065dafede1c255e1a0564.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Another cool task performed by *SpaCy* is [**Named Entity Recognition (NER)**](https://spacy.io/usage/linguistic-features#named-entities).
    A named entity is a “real-world object” (i.e. person, country, product, date)
    and models can recognize various types in a document. Here’s the full list of
    possible tags (as of today):'
  prefs: []
  type: TYPE_NORMAL
- en: '- ***PERSON:*** people, including fictional.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***NORP:*** nationalities or religious or political groups.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***FAC:*** buildings, airports, highways, bridges, etc.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ORG:*** companies, agencies, institutions, etc.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***GPE:*** countries, cities, states.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***LOC:*** non-GPE locations, mountain ranges, bodies of water.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PRODUCT:*** objects, vehicles, foods, etc. (Not services.)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***EVENT:*** named hurricanes, battles, wars, sports events, etc.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***WORK_OF_ART:*** titles of books, songs, etc.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***LAW:*** named documents made into laws.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***LANGUAGE:*** any named language.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***DATE:*** absolute or relative dates or periods.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***TIME:*** times smaller than a day.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***PERCENT:*** percentage, including “%”.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***MONEY:*** monetary values, including unit.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***QUANTITY:*** measurements, as of weight or distance.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***ORDINAL:*** “first”, “second”, etc.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- ***CARDINAL:*** numerals that do not fall under another type.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s see our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/848b13980abc501d3ac140d9e5acc8d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'or even better with *SpaCy* graphic tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b9006404b0c49d328aca53ab28813899.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: That is useful in case we want to add several attributes to our Knowledge Graph.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on, using the tags predicted by the NLP model, we can extract entities
    and their relations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Entity & Relation Extraction**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea is very simple but the implementation can be tricky. For each sentence,
    we’re going to extract the subject and object along with their modifiers, compound
    words, and punctuation marks between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done in 2 ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Manually**, you can start from the baseline code, which probably must be
    slightly modified and adapted to your specific dataset/usecase.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s try it out on this dataset and check out the usual example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/31084e80201ba04ce021dd92e2a13cec.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/67878e59e8bd4936a43a10c30a1bce21.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ab08673c6872b979eb3c506abcb60b0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. Alternatively, you can use ***Textacy***, a library built on top of *SpaCy*
    for extending its core functionalities. This is much more user-friendly and in
    general more accurate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2c430480ba4a981daa8c9c2822bf85af.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s extract also the attributes using NER tags (i.e. dates):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d61096259f6f1b6ed84bc617a5fd3795.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have extracted “knowledge”, we can build the graph.
  prefs: []
  type: TYPE_NORMAL
- en: Network Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard Python library to create and manipulate graph networks is ***NetworkX***.
    We can create the graph starting from the whole dataset but, if there are too
    many nodes, the visualization will be messy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4bfc74c9eb2a4af92f33d79e754fed87.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowledge Graphs make it possible to see how everything is related at a big
    picture level, but like this is quite useless… so better to apply some filters
    based on the information we are looking for. For this example, I shall take only
    the part of the graph involving the most frequent entity (basically the most connected
    node):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c2ff0f03744dec80e73556d39245abb2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/62f9aba479b0b678fadcd734acc63dc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s better. And if you want to make it 3D, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c92571d1d1e576e2b06ffc77a5922888.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Please note that a graph might be useful and nice to see, but it’s not the main
    focus of this tutorial. The most important part of a Knowledge Graph is the “knowledge”
    (text processing), then results can be shown on a dataframe, a graph, or a different
    plot. For instance, I could use the dates recognized with NER to build a Timeline
    graph.
  prefs: []
  type: TYPE_NORMAL
- en: Timeline Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, I have to transform the strings identified as a “date” to datetime
    format. The library ***DateParser***parses dates in almost any string format commonly
    found on web pages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s apply it to the dataframe of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/70777e12da6d469ee726b17e5717e20d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I shall join it with the main dataframe of entities-relations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4295cf217f9e8c39cd2e529feb4b21d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, I can plot the timeline. As we already know, a full plot probably
    won’t be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cd5408bb3670cdc5ca8e046212b647cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'So it’s better to filter a specific time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1b71d3d0ba0a63a3ba9c68789e0a79aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, once the “knowledge” has been extracted, you can plot it any
    way you like.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article has been a tutorial about **how to build a Knowledge Graph with
    Python.** I used several NLP techniques on data parsed from Wikipedia to extract
    “knowledge” (i.e. entities and relations) and stored it in a Network Graph object.
  prefs: []
  type: TYPE_NORMAL
- en: Now you understand why companies are leveraging NLP and Knowledge Graphs to
    map relevant data from multiple sources and find insights useful for the business.
    Just imagine how much value can be extracted by applying this kind of models on
    all documents (i.e. financial reports, news, tweets) related to a single entity
    (i.e. Apple Inc). You could quickly understand all the facts, people, and companies
    directly connected to that entity. And then, by extending the network, even the
    information not directly connected to starting entity (A — > B — > C).
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed it! Feel free to contact me for questions and feedback or
    just to share your interesting projects.
  prefs: []
  type: TYPE_NORMAL
- en: 👉 [Let’s Connect](https://linktr.ee/maurodp) 👈
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This article is part of the series **NLP with Python**, see also:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](/text-summarization-with-nlp-textrank-vs-seq2seq-vs-bart-474943efeb09?source=post_page-----12b93146a458--------------------------------)
    [## Text Summarization with NLP: TextRank vs Seq2Seq vs BART'
  prefs: []
  type: TYPE_NORMAL
- en: Natural Language Processing with Python, Gensim, Tensorflow, Transformers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/text-summarization-with-nlp-textrank-vs-seq2seq-vs-bart-474943efeb09?source=post_page-----12b93146a458--------------------------------)
    [](/text-classification-with-nlp-tf-idf-vs-word2vec-vs-bert-41ff868d1794?source=post_page-----12b93146a458--------------------------------)
    [## Text Classification with NLP: Tf-Idf vs Word2Vec vs BERT'
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessing, Model Design, Evaluation, Explainability for Bag-of-Words, Word
    Embedding, Language models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/text-classification-with-nlp-tf-idf-vs-word2vec-vs-bert-41ff868d1794?source=post_page-----12b93146a458--------------------------------)
    [](/text-analysis-feature-engineering-with-nlp-502d6ea9225d?source=post_page-----12b93146a458--------------------------------)
    [## Text Analysis & Feature Engineering with NLP
  prefs: []
  type: TYPE_NORMAL
- en: Language Detection, Text Cleaning, Length, Sentiment, Named-Entity Recognition,
    N-grams Frequency, Word Vectors, Topic…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/text-analysis-feature-engineering-with-nlp-502d6ea9225d?source=post_page-----12b93146a458--------------------------------)
    [](/text-classification-with-no-model-training-935fe0e42180?source=post_page-----12b93146a458--------------------------------)
    [## BERT for Text Classification with NO model training
  prefs: []
  type: TYPE_NORMAL
- en: Use BERT, Word Embedding, and Vector Similarity when you don’t have a labeled
    training set
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/text-classification-with-no-model-training-935fe0e42180?source=post_page-----12b93146a458--------------------------------)
    [](/ai-chatbot-with-nlp-speech-recognition-transformers-583716a299e9?source=post_page-----12b93146a458--------------------------------)
    [## AI Chatbot with NLP: Speech Recognition + Transformers'
  prefs: []
  type: TYPE_NORMAL
- en: Build a talking ChatBot with Python and have a conversation with your AI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/ai-chatbot-with-nlp-speech-recognition-transformers-583716a299e9?source=post_page-----12b93146a458--------------------------------)
  prefs: []
  type: TYPE_NORMAL
