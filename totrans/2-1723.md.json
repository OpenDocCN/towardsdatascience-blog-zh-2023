["```py\ngetattr(object, name[, default])\n```", "```py\nclass Car:\n\n    def __init__(self, make, model, price):\n\n        self.make = make\n        self.model = model\n        self.price = price\n```", "```py\ncar = Car('Audi', 'Q7', 100000)\n```", "```py\nattr_name = 'price'\n\nattr_value = getattr(car, attr_name)\n\nprint(attr_value)\n```", "```py\n100000\n```", "```py\nattr_name = 'colour'\n\nattr_value = getattr(car, attr_name)\n\nprint(attr_value)\n```", "```py\nAttributeError: 'Car' object has no attribute 'colour'\n```", "```py\nclass Calculator:\n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n```", "```py\nclass CalculatorAPI:\n\n    def __init__(self, calculator):\n\n        self.calculator = calculator\n\n    def call_method(self, method_name, *args):\n\n        method = getattr(self.calculator, method_name, None)\n\n        if method:\n            return method(*args)\n        else:\n            return f\"Method '{method_name}' not found\"\n```", "```py\ncalculator = Calculator()\n\napi = CalculatorAPI(calculator)\n\nprint(api.call_method(\"add\", 7, 8))\nprint(api.call_method(\"subtract\", 9, 1))\n```", "```py\n15\n8\n```", "```py\n#Import the required dependency\nimport importlib\n\n#Define module name\nmodule_name = 'math'\n\n#Programmatically load module\nmodule = importlib.import_module(module_name)\n\n#Define function name\nfunction_name = 'sqrt'\n\n#Programmatically load function\nfunction = getattr(module, function_name)\n\n#Define input for the function\nnum = 25\n\n#Calculate the result\nresult = function(num)\n\n#Print the result\nprint(f\"Result: {result}\")\n```", "```py\n5.0\n```"]