["```py\nclass AutoEncoder(nn.Module):\n    def __init__(self, **kwargs):\n        super().__init__()\n        self.encoder = nn.Linear(\n          in_features=kwargs[\"input_shape\"], out_features=128\n        )\n        self.decoder = nn.Linear(\n            in_features=128, out_features=kwargs[\"input_shape\"]\n        )\n\n    def forward(self, x):\n        latent_vector = torch.relu(self.encoder(x))\n        reconstructed = torch.relu(self.decoder(latent_vector))\n        return reconstructed\n```", "```py\n!pip install torchvision\n!pip install torch\n\nfrom torchvision import datasets\nfrom torchvision import transforms\nimport torch\nimport matplotlib.pyplot as plt\n```", "```py\ndataset = datasets.MNIST(root = \"./data\",\n      train = True,\n      download = True,\n      transform = tensor_transform)\n\nloader = torch.utils.data.DataLoader(dataset = dataset,\n         batch_size = 64,\n         shuffle = True)\n\ntensor_transform = transforms.ToTensor()\n```", "```py\nclass AutoEncoder(torch.nn.Module):\n def __init__(self):\n  super().__init__()\n\n  self.encoder = torch.nn.Sequential(\n   torch.nn.Linear(28 * 28, 128),\n   torch.nn.ReLU(),\n   torch.nn.Linear(128, 64),\n   torch.nn.ReLU(),\n   torch.nn.Linear(64, 36),\n   torch.nn.ReLU(),\n   torch.nn.Linear(36, 18),\n   torch.nn.ReLU(),\n   torch.nn.Linear(18, 9)\n  )\n\n  self.decoder = torch.nn.Sequential(\n   torch.nn.Linear(9, 18),\n   torch.nn.ReLU(),\n   torch.nn.Linear(18, 36),\n   torch.nn.ReLU(),\n   torch.nn.Linear(36, 64),\n   torch.nn.ReLU(),\n   torch.nn.Linear(64, 128),\n   torch.nn.ReLU(),\n   torch.nn.Linear(128, 28 * 28),\n   torch.nn.Sigmoid()\n  )\n\n def forward(self, x):\n  encoded = self.encoder(x)\n  decoded = self.decoder(encoded)\n  return decoded\n```", "```py\nmodel = AutoEncoder()\nloss_function = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(),\n       lr = 1e-1,\n       weight_decay = 1e-6)\n```", "```py\nepochs = 25\nlosses = []\nfor epoch in range(epochs):\n for (image, _) in loader:\n\n   image = image.reshape(-1, 28*28)\n   reconstructed = model(image)\n\n   loss = loss_function(reconstructed, image)\n   optimizer.zero_grad()\n   loss.backward()\n   optimizer.step()\n\n   losses.append(loss)\n\nplt.style.use('fivethirtyeight')\nplt.xlabel('Iteration')\nplt.ylabel('MSE-Loss')\nplt.plot(losses[-100:])\n```", "```py\nplt.imshow(dataset[0])\nplt.imshow(model(dataset[0].reshape(-1, 28, 28))\n```"]