- en: Use Frequency More Frequently
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/use-frequency-more-frequently-14715714de38](https://towardsdatascience.com/use-frequency-more-frequently-14715714de38)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A handbook from simple to advanced frequency analysis: exploring a vital tool
    which is widely underutilized in data science'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@danielwarfield1?source=post_page-----14715714de38--------------------------------)[![Daniel
    Warfield](../Images/c1c8b4dd514f6813e08e401401324bca.png)](https://medium.com/@danielwarfield1?source=post_page-----14715714de38--------------------------------)[](https://towardsdatascience.com/?source=post_page-----14715714de38--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----14715714de38--------------------------------)
    [Daniel Warfield](https://medium.com/@danielwarfield1?source=post_page-----14715714de38--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----14715714de38--------------------------------)
    ·20 min read·May 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Frequency analysis is extremely useful in a vast number of domains. From audio,
    to mechanical systems, to natural language processing and unsupervised learning.
    For many scientists and engineers it’s a vital tool, but for many data scientists
    and developers it’s hardly understood, if at all. If you don’t know about frequency
    analysis, don’t fret, you just found your handbook.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ed73a6c744b310272e6a50573d693d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Daniel Warfield using p5.js. All images in this document are either
    created with p5.js or Python’s Matplotlib library unless otherwise specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**Who is this useful for?** Anyone who works with virtually any signal, sensor,
    image, or AI/ML model.'
  prefs: []
  type: TYPE_NORMAL
- en: '**How advanced is this post?** This post is accessible to beginners and contains
    examples that will interest even the most advanced users of frequency analysis.
    You will likely get something out of this article regardless of your skill level.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What will you get from this post?** Both a conceptual and mathematical understanding
    of waves and frequencies, a practical understanding of how to employ those concepts
    in Python, some common use cases, and some more advanced use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** To help you skim through, I’ve labeled subsections as **Basic**,
    **Intermediate**, and **Advanced**. This is a long article designed to get someone
    from zero to hero. However, if you already have education or experience in the
    frequency domain, you can probably skim the intermediate sections or jump right
    to the advanced topics.'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve also set up **links** so you can click to navigate to and from the table
    of contents
  prefs: []
  type: TYPE_NORMAL
- en: Table Of Contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click the links to navigate to specific sections
  prefs: []
  type: TYPE_NORMAL
- en: '**1) The Frequency Domain**'
  prefs: []
  type: TYPE_NORMAL
- en: 1.1) [The Basics of the Frequency Domain (Basic)](#a905)
  prefs: []
  type: TYPE_NORMAL
- en: 1.2) [The Specifics of the Frequency Domain (Intermediate)](#ca52)
  prefs: []
  type: TYPE_NORMAL
- en: 1.3) [A Simple Example in Python (Intermediate)](#1c83)
  prefs: []
  type: TYPE_NORMAL
- en: '**2) Common Uses of the Frequency Domain** 2.1) [De-trending and Signal Processing
    (Intermediate)](#5099)'
  prefs: []
  type: TYPE_NORMAL
- en: 2.2) [Vibration Analysis (Advanced)](#6742)
  prefs: []
  type: TYPE_NORMAL
- en: '**3) Advanced Uses of the Frequency Domain**'
  prefs: []
  type: TYPE_NORMAL
- en: 3.1) [Data Augmentation (Advanced)](#cbd0)
  prefs: []
  type: TYPE_NORMAL
- en: 3.2) [Embedding and Clustering (Advanced)](#2036)
  prefs: []
  type: TYPE_NORMAL
- en: 3.3) [Compression (Intermediate)](#cbd8)
  prefs: []
  type: TYPE_NORMAL
- en: '**4)** [**Conceptual Takeaways for Data Scientists**](#b5c9) **5)** [**Summary**](#79f8)'
  prefs: []
  type: TYPE_NORMAL
- en: '**1) The Frequency Domain**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**1.1) The Basics of the Frequency Domain (Basic)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: 'First, what is a *domain*? Imagine you want to understand temperature changes
    over time. Just reading that sentence, you probably imagined a graph like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7802984b94909fa9bbae2cac7f211243.png)'
  prefs: []
  type: TYPE_IMG
- en: What you might be imagining when you think of temperature over some period of
    time
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you imagine time progressing from left to right, and greater temperatures
    corresponding to higher vertical points. Congratulations, you’ve taken data and
    mapped it to a 2d time *domain*. In other words, you’ve taken temperature readings,
    recorded at certain times, and mapped that information to a space where time is
    one axis, and the value is another.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other ways to represent our temperature vs time data. As you can
    see, there’s a “periodic” nature to this data, meaning it oscillates back and
    forth. A lot of data behaves this way: sound, ECG data from heartbeats, movement
    sensors like accelerometers, and even images. In one way or another, a lot of
    things have data that goes to and fro periodically.'
  prefs: []
  type: TYPE_NORMAL
- en: “If you want to find the secrets of the universe, think in terms of energy,
    frequency and vibration.” ― Nikola Tesla
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I could get to this point in a circuitous way, but a picture speaks 1000 words.
    In essence, we can disassemble our temperature graph into a bunch of simple waves,
    with various frequencies and amplitudes (frequency being the speed it goes back
    in forth, and amplitude being how high and low it goes), and use that to describe
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/627c17dea2b4213d3157ce727d6ed8dc.png)'
  prefs: []
  type: TYPE_IMG
- en: All the waves, of various frequencies and amplitudes, which goes into making
    our original wave. You might notice that there’s one wave which is more subtle
    than the other two and is practically impossible to see in the original. Finding
    this hidden information is one benefit of frequency analysis.
  prefs: []
  type: TYPE_NORMAL
- en: These waves are extracted using a Fourier Transform, which maps our original
    wave from the time domain to the frequency domain. Instead of value vs time, the
    frequency domain is amplitude vs frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e277cebb3f4cb61b2b9fb248007309f.png)'
  prefs: []
  type: TYPE_IMG
- en: Each of the extracted waves has a frequency and amplitude. If we plot frequency
    on the x axis, and amplitude on the y axis, we have plotted what is called a spectrogram
  prefs: []
  type: TYPE_NORMAL
- en: So, to summarize, the Fourier Transform maps data (usually, but not always in
    the time domain) into the frequency domain. The frequency domain describes all
    of the waves, with different frequencies and amplitudes, which when added together
    reconstruct the original wave.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/68595f1999672457599d64a5d4288133.png)'
  prefs: []
  type: TYPE_IMG
- en: The original wave, in the time domain, and the frequency content in the frequency
    domain. These both describe the same signal
  prefs: []
  type: TYPE_NORMAL
- en: 1.2) The Specifics of the Frequency Domain (Intermediate)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: The *sin* function is the ratio of the opposite side of a triangle vs the hypotenuse
    of that right triangle, for some angle.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43b4d1dc1f3aa8790833185f7bfd85a9.png)'
  prefs: []
  type: TYPE_IMG
- en: θ(theta) is an angle of a right triangle, a is the length of the opposite side
    of θ, and c is the length of the hypotenuse
  prefs: []
  type: TYPE_NORMAL
- en: The *sin* wave is what you get when you plot *a/c* for different values of *θ*
    (Different Angles)*,* andis used in virtually all scientific disciplines as the
    most fundamental wave.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4870f5af414757c21e4ee110cb7eced.png)'
  prefs: []
  type: TYPE_IMG
- en: The relationship between the sin function, right triangles, and the sin wave
  prefs: []
  type: TYPE_NORMAL
- en: Often *sin(θ)* is expanded to *A*sin(ωθ*+*ϕ).*
  prefs: []
  type: TYPE_NORMAL
- en: '***ω***(omega) represents frequency (larger values of *ω* mean the sin wave
    oscillates more quickly)'
  prefs: []
  type: TYPE_NORMAL
- en: '***ϕ***(phi) represents phase (changing *ϕ* shifts the wave to the right or
    left)'
  prefs: []
  type: TYPE_NORMAL
- en: '***A*** scales the function, which defines the amplitude (how large the oscillations
    are).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eab1a90ed8e7234166ec31b9bfb20bbe.png)'
  prefs: []
  type: TYPE_IMG
- en: “A” controls the amplitude (height), “omega” controls the frequency (speed of
    oscillation), and “phi” controls the phase (shift from side to side)
  prefs: []
  type: TYPE_NORMAL
- en: 'When I explained the frequency domain I presented a simplified representation,
    where the horizontal axis is frequency, and the vertical axis is amplitude. In
    actuality the frequency domain is not 2 dimensional, but 3: one dimension for
    frequency, one for amplitude, and one for phase. A spectrogram can be of even
    higher dimension for higher dimensional signals (like images).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5a63781adc46b90da61e9a09a872676.png)'
  prefs: []
  type: TYPE_IMG
- en: A Traditional Amplitude vs frequency spectrogram (left) vs a more descriptive
    amplitude, frequency, and phase plot.
  prefs: []
  type: TYPE_NORMAL
- en: When converting a signal to the frequency domain (using a library like scipy,
    for instance) you’ll get a list of imaginary numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you’re not familiar with imaginary numbers, don’t worry about it. You can
    imagine these lists as points, where the index of the list corresponds to frequency,
    and the complex imaginary number represents a tuple corresponding to amplitude
    and phase respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I haven’t talked about the units of these numbers. Because units are, essentially,
    linear transformations to all data, they can often be disregarded from a data
    science perspective. However, if you do use the frequency domain in the future,
    you will likely encounter words like Hertz (Hz), Period (T), and other frequency
    domain-specific concepts. You will see these units explored in the examples.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about units in general, and how to deal with them
    as a data scientist, I have an article all about it [here](https://medium.com/@danielwarfield1/how-to-deal-with-units-as-a-data-scientist-7d59fc0c6506)
  prefs: []
  type: TYPE_NORMAL
- en: 1.3) A Simple Example in Python (Intermediate)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we load a snippet of trumpet music, convert it to the frequency
    domain, plot the frequency spectrogram, and use the spectrogram to understand
    the original signal.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll load and plot the sound data, which is an amplitude over time.
    This data is used to control the location of the diaphragm within a speaker, the
    oscillation of which generates sound.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/843d274f389d75215e1c5cc403ac1a18.png)'
  prefs: []
  type: TYPE_IMG
- en: The left and right sound waves from a snippet of stereo trumpet music, in the
    time domain. The X axis corresponds to time, in seconds, and the y axis corresponds
    to the amplitude of the signal, which controls the location of a speaker diaphragm,
    generating sound. (Raw trumpet data from storyblocks.com)
  prefs: []
  type: TYPE_NORMAL
- en: Lets convert these waveforms to the frequency domain
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f515725187bbde46bf095bf33aedddb3.png)'
  prefs: []
  type: TYPE_IMG
- en: The frequency domain representation of the previously loaded trumpet audio.
    The X axis is the frequency (in Hz, which is oscillations/second), and the y axis
    is the amplitude of the signal.
  prefs: []
  type: TYPE_NORMAL
- en: Just by visualizing this graph, a few insights can be made.
  prefs: []
  type: TYPE_NORMAL
- en: Both signals contain very similar frequency content, which makes sense because
    they’re both from the same recording. Often stereo recordings are recorded with
    two separate microphones simultaneously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dominant frequency is around 523Hz, which corresponds to a C5 note.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a lot of sympathetic resonance, which can be seen as spikes at frequencies
    that are at integer multiples of the base frequency. This trait is critical in
    making an instrument sound good and is the result of various pieces of the instrument
    resonating at different frequencies which is induced by the primary vibration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a very clear sound, the spikes are not muddled by a lot of unrelated
    frequency content
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is an organic sound. There is some frequency content which is not related
    to the base frequency. This can be thought of as the timbre of the instrument
    and makes it sound like a trumpet, rather than some other instrument performing
    the same note.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In section 2 we’ll explore how the frequency domain is used commonly in time
    series signal processing. In section 3 we’ll explore more advanced topics.
  prefs: []
  type: TYPE_NORMAL
- en: 2) Common Uses of the Frequency Domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1) De-trending and Signal Processing (Intermediate)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you have an electrical system, and you want to understand the minute-by-minute
    voltage changes in that system over the course of a day. You set up a voltage
    meter, capture, and plot the voltage information over time.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say, for the purposes of this example, we only cared about the graph for
    the minute-by-minute data, and we consider waves which are too high of a frequency
    to be noise, and waves which are too low in frequency to be a trend that we want
    to ignore.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/147dffca4bcc40ccf60b0cb50707fddb.png)'
  prefs: []
  type: TYPE_IMG
- en: We don’t care about the long term trends which take place over the course of
    hours. We’re interested in minute-by-minute data (raw data synthetically generated
    by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/97e113091cf3ed32bffa9899070d4f65.png)'
  prefs: []
  type: TYPE_IMG
- en: We care about the trends going on in around this time frame
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14589bb4c33436af53d3ac982053bbee.png)'
  prefs: []
  type: TYPE_IMG
- en: We don’t care about waves which oscillate too quickly, these are considered
    as noise in the signal
  prefs: []
  type: TYPE_NORMAL
- en: So, for this example, we only care about observing content which oscillates
    slower than once per second, and faster than once every 5 minutes. We can convert
    our data to the frequency domain, remove all but the frequencies we’re interested
    in observing, then convert back to the time domain. so we can visualize the wave
    including only the trends we’re interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s observe the frequency domain unaltered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a904859a34345a84a5ecf09ce8cf2f20.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the complete , unfiltered spectrogram for the electrical system we are
    analyzing
  prefs: []
  type: TYPE_NORMAL
- en: We can set all the frequency content we are not interested into zero. Often
    you use a special filter, like a butter-worth filter, to do this, but we’ll keep
    it simple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3a684dcf898674dc50c9ba167e87dbbd.png)'
  prefs: []
  type: TYPE_IMG
- en: The plot of the frequency domain we’re isolating, with all other frequency information
    set to zero
  prefs: []
  type: TYPE_NORMAL
- en: Now we can perform an inverse Fast Fourier Transform to reconstruct the wave,
    including only the data we care about
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eef112a660edce837ad014dc8d104834.png)'
  prefs: []
  type: TYPE_IMG
- en: A few minutes of data, with our filter enabled. We have removed excessively
    high frequency content, and brought the wave to center around 0 by removing excessively
    low frequency content.
  prefs: []
  type: TYPE_NORMAL
- en: And that’s it. We have successfully removed high-frequency information we don’t
    care about, and centered the data we do care about around zero by removing low-frequency
    trends. We can now use this minute-by-minute data to hone in on understanding
    the electrical system we’re measuring.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2) Vibration Analysis (Advanced)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: I covered vibration analysis in a previous example in the form of analyzing
    a sound wave. In this example, I’ll discuss analyzing vibrations in physical systems,
    like a motor in a factory.
  prefs: []
  type: TYPE_NORMAL
- en: It can be difficult to predict when certain motors require maintenance. Often,
    simple issues like a misalignment can cascade into much more severe issues, like
    a complete engine failure. We can use frequency recordings, collected periodically
    over time, to help us understand when a motor is operating differently; allowing
    us to diagnose issues within an engine before it cascades into a larger issue.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6891d0d263dcd99ca63cd493bd5dce3.png)'
  prefs: []
  type: TYPE_IMG
- en: Vibration data taken over a period of time where the engine experienced a minor
    failure. In the time domain it’s virtually impossible to see the time of failure.
    (raw data synthetically generated by the author)
  prefs: []
  type: TYPE_NORMAL
- en: To analyze this data, we will compute and render what is called a mel spectrogram.
    A mel spectrogram is just like a normal spectrogram, but instead of computing
    the frequency content across the entire waveform, we extract the frequency content
    from small rolling windows extracted from the signal. This allows us to plot **how
    the frequency content changes over time**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2dcad45ee0f252470884f45174f8d356.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A mel spectrogram of the motor data. Instead of the a 2d frequency spectrogram,
    mel spectrograms are 3d: The vertical axis is the frequency of oscillation, the
    x axis is time (in this case a percentage of time) that the frequency content
    was calculated, and the color represents amplitude, which is measured in a unit
    called decibels. Note that at time 0.2, the frequency content of the motor suddenly
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: In a Mel Spectrogram, each vertical slice represents a region of time, with
    high-frequency content being shown higher up, and low-frequency content being
    shown lower down in the plot. It’s easy to see that at time 0.2 (20% through our
    data), the frequency content changed dramatically. At this point a balancing weight
    became loose, causing the engine to become unbalanced. Maintenance at this point
    may save the engine from excess wear in the future.
  prefs: []
  type: TYPE_NORMAL
- en: A simple yet effective way to employ this principle is with scheduled vibration
    readings. A worker sticks an accelerometer on the body of a motor with a magnet
    and records the frequency content once or twice a month. Those windows of vibration
    data are then converted to the frequency domain, where certain key features are
    extracted. A common extracted feature from the frequency domain is power spectral
    density, which is essentially the area under the frequency domain curve over certain
    regions of frequencies. Extracted features can be plotted over several weeks of
    recordings and used as a proxy for overall motor health.
  prefs: []
  type: TYPE_NORMAL
- en: 3) Advanced Uses of the Frequency Domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3.1) Data Augmentation (Advanced)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: Data augmentation is the process of creating fake data from real data. The quintessential
    example is image classification to bolster a data set for classifying if images
    are of a dog or a cat.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0da109bceaefeda69ec917f5fe384d06.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of image augmentation, where a single image can be used to generate
    multiple images for a machine learning model to learn from. Created with Affinity
    Designer 2, stock photo from storyblocks.com
  prefs: []
  type: TYPE_NORMAL
- en: 'Augmentation can be an incredibly powerful tool, but what if you don’t have
    images? What if you have sound, motion, temperature, or some other signal? How
    can one sensibly augment these types of data? In the time domain, augmentation
    strategies look a lot more like regularization strategies: add a bit of noise
    here, and shift the data up or down there. They add random information to data,
    which can be useful, but they don’t really make new examples.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can steal something from the music production scene: a wavetable. The idea
    behind a wavetable is to convert two waves to the frequency domain, interpolate
    between the two in the frequency domain, then convert the interpolation back to
    the time domain. I don’t mean blending, where you overlay one signal over the
    other, but making a completely new wave which contains frequency content from
    two (or more) other waves.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s imagine we’re trying to build a model to detect if people are talking
    or not in an audio snippet. We have a bunch of samples of audio where people are
    talking, and a bunch of samples where people aren’t, both in a variety of situations.
    This data requires someone to go out with a collection of different microphones
    and capture sounds, and then manually flag if the data contains someone talking
    or not, in a variety of situations. let’s say the model has to be very robust,
    and very accurate, and recording sufficient data to reach desired performance
    levels is not financially feasible.
  prefs: []
  type: TYPE_NORMAL
- en: In theory, the thing that makes human speech sound the way it does is frequency
    content. A blend of frequency content from one snippet of talking and another
    snippet of talking should still sound like someone talking. We can use a wave
    table to construct these artificial waves, thus making more data for free (besides
    a data scientist's salary and big old expensive computing resources on the cloud).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/73857b9384d30e0deefa9241a7d11935.png)'
  prefs: []
  type: TYPE_IMG
- en: Two waveforms, both prominently including people talking. (raw data from storyblocks.com)
  prefs: []
  type: TYPE_NORMAL
- en: We can convert both of these waves to the frequency domain, and create several
    frequency representations which are interpolations between the two waves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8111a739cb92ea5dcc3c99c560517783.png)'
  prefs: []
  type: TYPE_IMG
- en: Frequency spectrograms for both the original waveforms (at the extremes) and
    the waveforms in the middle. Note that the the plot shows the spectrogram as frequency
    vs amplitude, but the interpolation also is done over the phase as well.
  prefs: []
  type: TYPE_NORMAL
- en: We can now compute the inverse Fast Fourier Transform on all of these interpolated
    frequency domains, and extract our table of waves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/19d8f03769f33933e0a485e9827c84a7.png)'
  prefs: []
  type: TYPE_IMG
- en: The final wave table. The extreme waves are the source waves, while the ones
    in between are interpolations in the frequency domain.
  prefs: []
  type: TYPE_NORMAL
- en: And there we go. From 2 waves of people talking, we now have 10 waves of people
    talking. Data augmentation can be a tricky task, as you can easily create data
    which is not actually indicative of the data you’re trying to emulate. When employing
    a similar augmentation strategy, you can use augmentations which are closer to
    the source waves (80% one wave, 20% another). These will be more likely to be
    realistic than waves closer to the center (50%, 50%).
  prefs: []
  type: TYPE_NORMAL
- en: 3.2) Embedding and Clustering (Advanced)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we’ll use the output from a sentiment analysis model to cluster
    different products based on their customer sentiment over time. Let’s say we run
    a store with reviews, and those reviews fluctuate between positive and negative.
    We notice we have some reviews which correlate with one another. We want to find
    products which have similar sentiment analysis trends, such that they can be grouped
    together and further understood.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s look at our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0c2af187a0fc72154f2660c41715edd5.png)'
  prefs: []
  type: TYPE_IMG
- en: first 10 examples of sentiment (data synthetically generated by the author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have many examples of user sentiment, averaged on a per-day
    basis. We can remove the very low-frequency content, which will remove very long-term
    average trends (like the average), and we will remove very high-frequency content,
    which is noise and is unlikely to create useful clusters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cfbde06bf5cd16b89a13c83518427192.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ultimately, we will be clustering data in the frequency domain. We generate
    this plot just so we can confirm that we’re preserving the type of content we
    care about: not too low frequency, and not too high frequency.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we’re done with the time domain, and will begin working on building up our
    clustering in the frequency domain. Let’s look at our filtered frequency domain
    plots
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43f844f3e9148310fa80db7334cc789b.png)'
  prefs: []
  type: TYPE_IMG
- en: The frequency content used to construct the waves above
  prefs: []
  type: TYPE_NORMAL
- en: 'The input to our clustering operation will be a list of amplitudes, each of
    which corresponds to a specific frequency. We could feed this data to our clustering
    algorithm, but there is an additional step which can create significant improvements.
    Imagine we are trying to cluster four simple sin waves, with frequency domain
    content which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6c466326173de6ecf4fca28a978c584.png)'
  prefs: []
  type: TYPE_IMG
- en: a representation of four sin waves, plotted in the frequency domain, for demonstrative
    purposes
  prefs: []
  type: TYPE_NORMAL
- en: 'You would expect the waves on the left to cluster together, and the waves on
    the right to cluster closely together. However, the vectors which describe this
    data look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: From the perspective of t-SNE, all of these waves are, equally, orthogonal to
    each-other, as none of them share any value along a similar axis. We can get around
    this issue by making the frequency domain “fuzzy”; we can apply a moving average
    to this data such that frequency content blends to adjacent regions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70cbd79ff99612d4a79299395da285e8.png)'
  prefs: []
  type: TYPE_IMG
- en: our sample data, with an exponential moving average applied in both directions,
    causing similar frequency content to bleed into one another.
  prefs: []
  type: TYPE_NORMAL
- en: 'This data is significantly more likely to yield good clustering results, as
    similar frequency content spikes are more apt to bleed into one another. Let’s
    apply this concept to our sample plot of sentiment data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a8517595b8767530641a32fc4f3351f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Filtered amplitude over frequency data, for clustering. Keep in mind, there
    are numerous changes that can be made to this general approach. Different high
    and low frequencies can be used, different spans of the exponential average can
    be used, the frequency domain can be normalized such that relative amplitudes
    are similar, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result of our processing steps, this data is significantly more likely
    to create clusters of data we actually care about. Now we can tie all this together,
    and create our final cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5f2341cdd5e7f3e721edd0ac9bdb27e4.png)'
  prefs: []
  type: TYPE_IMG
- en: t-SNE plot of the filtered frequency domain for all user sentiment product reviews.
  prefs: []
  type: TYPE_NORMAL
- en: And that’s it! Naturally, for a practical application, a lot of work has to
    be done after this graph is generated. Likely, these clouds of data would have
    to be explored, and potentially labeled, and further refinement of key parameters
    would have to be done to gain further insights. For this example, though, we have
    used the frequency domain to apply a clustering algorithm to time series data,
    allowing us to see which sentiments oscillate in similar ways. This type of analysis
    could inform product recommendations within a website, for instance.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3) Compression (Intermediate)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: Signals contain a lot of data. Sampling at 96,000 samples per second for a few
    hours yields massive audio files. These raw recordings are useful for high-quality
    audio processing, but when you’re done and want to send a sample to a friend,
    you’re willing to sacrifice a bit of audio quality for speed and size. You can
    down-sample to a point (send fewer samples per second), however, that will limit
    the maximum pitch of the frequencies you can send (If you’re only sending 200
    samples/second you can’t send any frequency higher than 100 Hz). Instead, you
    can convert your sample to the frequency domain, compress similar frequencies
    together, then send the frequency domain along with the sampling rate. the recipient
    can then rebuild the compressed audio via a transform from the frequency domain
    to the time domain. This allows you to send arbitrarily high frequencies without
    needing to send an arbitrarily large amount of data. The reason mp3 files, for
    instance, are so much smaller than .wav files is that they use a Fourier transform
    prominently in their encoding.
  prefs: []
  type: TYPE_NORMAL
- en: 4) Conceptual Takeaways for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: Using frequency analysis directly as a tool can be vital for solving certain
    problems, as we’ve seen in previous examples. What often goes unappreciated is
    the usage of the frequency domain as a concept. As a data scientist, it might
    be difficult to wrap your brain around self-similar modeling strategies like recurrent
    and convolutional networks, especially when solving specific, subtle problems.
    Sometimes, thinking of these problems as a quasi-frequency domain extraction can
    be more useful.
  prefs: []
  type: TYPE_NORMAL
- en: Convolutional networks, for instance, use wavelets (convolutions) that propagate
    over data. The result then gets pooled, reducing the resolution of the data, and
    further wavelets get applied. You can think of convolutions as extracting **varying
    frequencies of information**, often from high-frequency information to low-frequency
    information. Keeping this in mind can lead to a more intuitive understanding of
    stride, kernel size, and other hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 5) Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ([Back To Table of Contents](#ff9b))
  prefs: []
  type: TYPE_NORMAL
- en: In this article we covered the frequency domain, how it relates to signals and
    sin waves, and saw a few examples of frequency domain representations. We saw
    how a time-series signal can be converted to the frequency domain, and vice versa,
    and saw several examples of how, by converting to the frequency domain, several
    classes of problems can be solved.
  prefs: []
  type: TYPE_NORMAL
- en: Follow For More!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a future post, I’ll describe how the frequency domain can be applied to higher
    dimensional signals, like images and video, and how that can be used to great
    effect in machine learning/data science applications. I’ll also be describing
    several landmark papers in the ML space, with an emphasis on practical and intuitive
    explanations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Attribution:** All of the images in this document were created by Daniel
    Warfield. You can use any images in this post for your own non-commercial purposes,
    so long as you reference this article, [https://danielwarfield.dev](https://danielwarfield.dev),
    or both.'
  prefs: []
  type: TYPE_NORMAL
- en: P.S. — Join me on RoundtableML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RoundtableML is a vibrant community where ambitious and driven individuals come
    together to collaborate and push boundaries of ML and AI application in a safe
    and responsible way. If you're eager to expand your knowledge of ML, engage in
    open research diveinto scientific papers and work on ML project within small intimate
    groups — this is the place for you!
  prefs: []
  type: TYPE_NORMAL
- en: You can join using this discord [invite](https://discord.gg/3gT8PVggPN).
  prefs: []
  type: TYPE_NORMAL
