- en: RANK() vs DENSE_RANK() vs ROW_NUMBER() in SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/rank-vs-dense-rank-vs-row-number-sql-1b6c09097b21](https://towardsdatascience.com/rank-vs-dense-rank-vs-row-number-sql-1b6c09097b21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Understanding the difference between these window functions in SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----1b6c09097b21--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----1b6c09097b21--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1b6c09097b21--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1b6c09097b21--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----1b6c09097b21--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1b6c09097b21--------------------------------)
    Â·6 min readÂ·Mar 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14a0fd288583774a244801d6caf38161.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nik](https://unsplash.com/@helloimnik?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/UNCQklgSUd4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: In the world of SQL, a window function is a powerful construct that allows users
    to segment and manipulate data in precise ways. By grouping data based on specific
    columns and sorting criteria, window functions enable advanced computations within
    partitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this comprehensive tutorial, we will explore three of the most frequently
    used window functions: `ROW_NUMBER()`, `DENSE_RANK()`, and `RANK()`. Whether youâ€™re
    a seasoned SQL veteran or just getting started, this guide will equip you with
    the knowledge and practical examples you need to master these essential tools.'
  prefs: []
  type: TYPE_NORMAL
- en: All code snippets included have been tested on a MySQL database, and these functions
    should run for pretty much any SQL flavour with minimal or no modifications required.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  prefs: []
  type: TYPE_NORMAL
- en: First, letâ€™s create an example table that we will be referencing throughout
    the tutorial in order to demonstrate a few different concepts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And hereâ€™s how our sample table looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What is a window function?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A window function is used in SQL to perform calculations over a group of rows
    and returns one value per row. Note the difference from an aggregate function
    that is used to return just a single value for each group. Window functions are
    usually used to compute cumulative sums, rankings as well as moving averages.
  prefs: []
  type: TYPE_NORMAL
- en: A valid syntax for window functions should include
  prefs: []
  type: TYPE_NORMAL
- en: the `**OVER**` **clause** is specified after the function and is used to reference
    the window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and the **window specification** that specifies the way the rows should be grouped
    (this specification can include `PARTITION BY` and/or `ORDER BY` clauses)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The RANK() window function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `RANK()` function returns the rank for each row within the specified group
    or partition(s). In case more than one rows have the same value within the partition,
    then all of them will be assigned the same ranking. In this case, a gap will be
    created in the rankings given that subsequent rows will be assigned the number
    that corresponds to their actual position in the rank (and not the next available
    rank).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now letâ€™s consider we would like to create a ranking for the records in `employees`
    such that employees serving in the same position are ranked based on their earnings.
    This can be achieved using the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note the gap created in the rankings for `Senior Associate` position. Two employees
    were assigned the second rank which means the record following these two records
    will be assigned a rank of `4` (and not `3`).
  prefs: []
  type: TYPE_NORMAL
- en: The DENSE_RANK() window function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `DENSE_RANK()` function returns the rank for each row within the specified
    group or partition(s). In contrast to `RANK()`, the `DENSE_RANK()` will have no
    gaps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note how the 4th Senior Associate will now get a rank equal to 3, given that
    two other emloyees are sharing the second rank and no gaps should be created by
    `DENSE_RANK` window function.
  prefs: []
  type: TYPE_NORMAL
- en: The ROW_NUMBER() window function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, the `ROW_NUMBER` window function will assign a number to every row
    starting from index `1` for the first row within each partition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In conclusion, window functions are a powerful feature of SQL that allow for
    complex calculations to be performed over a specific subset of rows in a result
    set. They can be used to calculate running totals, rolling averages, and other
    metrics that require a reference to neighboring rows.
  prefs: []
  type: TYPE_NORMAL
- en: In todayâ€™s article we discussed about the difference between `RANK()`, `DENSE_RANK()`
    and `ROW_NUMBER()` functions. By understanding the differences between these types
    of window functions, you can choose the most appropriate one for your specific
    use case and optimize the performance of your SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ‘‰ [**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ‘‡**Related articles you may also like** ðŸ‘‡
  prefs: []
  type: TYPE_NORMAL
- en: '[](/dbt-55b35c974533?source=post_page-----1b6c09097b21--------------------------------)
    [## What is dbt (data build tool)'
  prefs: []
  type: TYPE_NORMAL
- en: A gentle introduction to dbt that is taking over the data world
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/dbt-55b35c974533?source=post_page-----1b6c09097b21--------------------------------)
    [](/etl-vs-elt-68e221d78719?source=post_page-----1b6c09097b21--------------------------------)
    [## ETL vs ELT: Whatâ€™s the Difference?'
  prefs: []
  type: TYPE_NORMAL
- en: A comparison between ETL and ELT in the context of Data Engineering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/etl-vs-elt-68e221d78719?source=post_page-----1b6c09097b21--------------------------------)
    [](/cte-sql-945e4b461de3?source=post_page-----1b6c09097b21--------------------------------)
    [## What are CTEs in SQL
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Common Table Expression (CTE) in SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/cte-sql-945e4b461de3?source=post_page-----1b6c09097b21--------------------------------)
  prefs: []
  type: TYPE_NORMAL
