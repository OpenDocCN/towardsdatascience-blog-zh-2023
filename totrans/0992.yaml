- en: Google Cloud Alternatives to Cloud Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/google-cloud-alternatives-to-cloud-composer-972836388a3f](https://towardsdatascience.com/google-cloud-alternatives-to-cloud-composer-972836388a3f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Opinion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do not kill a fly with a hammer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://marcgeremie.medium.com/?source=post_page-----972836388a3f--------------------------------)[![Marc
    Djohossou](../Images/096f7877d14b7671e48500175931dbea.png)](https://marcgeremie.medium.com/?source=post_page-----972836388a3f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----972836388a3f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----972836388a3f--------------------------------)
    [Marc Djohossou](https://marcgeremie.medium.com/?source=post_page-----972836388a3f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----972836388a3f--------------------------------)
    ·4 min read·Apr 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0cf29fbc7596f1d94922f924641c5cb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author, Fire Logo Designed By Freepik¹
  prefs: []
  type: TYPE_NORMAL
- en: Did you know that as a Google Cloud user, there are many services to choose
    from to orchestrate your jobs ? For batch jobs, the natural choice has been Cloud
    Composer for a long time. However, it does not have to continue. This article
    is about introducing 2 alternatives to Cloud Composer for job orchestration in
    Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics of this content are as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Cases where Cloud Composer Shines
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Two Alternatives to Cloud Composer
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Strengths And Weaknesses Benchmark
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summing Up
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use Cases where Cloud Composer Shines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A job orchestrator needs to satisfy a few requirements to qualify as such.
    Personally I expect to see 3 things in a job orchestrator at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, an orchestrator must be able to orchestrate any group of tasks with
    dependencies between them, no matter what job the tasks perform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, an orchestrator must support sharing data between the tasks of a job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thirdly, an orchestrator must allow recurrent job execution and on demand job
    execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cloud Composer](https://cloud.google.com/composer?hl=en) satisfies the 3 aforementioned
    criteria and more. It is a powerful fully fledged orchestrator based on [Apache
    Airflow](https://airflow.apache.org/) which supports nice features like backfill,
    catch up, task rerun, and [dynamic task mapping](https://airflow.apache.org/docs/apache-airflow/stable/authoring-and-scheduling/dynamic-task-mapping.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Power is dangerous. Power attracts the worst and corrupts the best (Edward Abbey)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Power is dangerous. The statement holds true for Cloud Composer. I’d always
    advise to try simpler solutions (more on them in the next sections) and keep Cloud
    Composer for complex cases. In my opinion, following are some situations where
    using Cloud Composer is completely justified:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to run a large scale job orchestration system with hundreds or thousands
    of jobs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have jobs with complex and/or dynamic dependencies between the tasks. For
    instance, the final structure of your jobs depends on the outputs of the first
    tasks in the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have tasks with non trivial trigger rules and constraints. For instance
    you want the task to trigger as soon as any of its upstream tasks has failed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two Alternatives to Cloud Composer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are simpler solutions to consider when looking for a job orchestrator
    in Cloud Composer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alternative 1: Vertex AI Pipelines**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/148ec11f9816bfadb638cfc8b4d12659.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of Pipeline Run in Vertex AI Pipeline, Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: '[Vertex AI Pipelines](https://cloud.google.com/vertex-ai/docs/pipelines?hl=en)
    is a job orchestrator based on [Kubeflow Pipelines](https://www.kubeflow.org/docs/components/pipelines/)
    (which is based on Kubernetes). It is a serverless product, meaning that there
    is no virtual machines or clusters to create. Although the orchestrator has been
    originally used for Machine Learning (ML) based pipelines, it is generic enough
    to adapt to any type of job. In my opinion, binding Vertex AI Pipelines (and more
    generally Kubeflow Pipelines) to ML is more of a cliché that is adversely affecting
    the popularity of the solution.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alternative 2: Cloud Workflows (+ Cloud Scheduler)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d849710e7d7cf86e29fd073f8f8c3f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of Workflow Run in Cloud Workflows, Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloud Workflows is a serverless, lightweight service orchestrator. It has 2
    major requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The tasks to orchestrate must be HTTP based services ([Cloud Functions](https://cloud.google.com/functions)
    or [Cloud Run](https://cloud.google.com/run?hl=en) are used most of the time)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The scheduling of the jobs is externalized to [Cloud scheduler](https://cloud.google.com/scheduler?hl=en)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: People will often used it to orchestrate APIs or micro-services, thus avoiding
    monolithic architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Strengths And Weaknesses Benchmark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When comes the time to choose between many options, it is usually a good idea
    to rank the options according to well defined success criteria. I’ve chosen 4
    criteria here (0: bad — 2: average — 5: good)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simplicity**: How simple it is for a team to learn and use the solution ?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Maintenability**: How easy it is to make changes to the workflows after they
    are created ?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scalability**: How stable the solution remains when the number of worflow
    increases ?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cost**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Note**: Please, be aware that the criteria as well as the evaluations are
    subjective and only represent my point of view'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/881e29f0313e172b6ad7a030ed07bb69.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison of the solutions, Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: With its steep learning curve, Cloud Composer is not the easiest solution to
    pick up. That’s being said, Cloud Workflows does not have any processing capability
    on its own, which is why it’s always used in combination with other services like
    Cloud Functions or Cloud Runs. In addition, scheduling has to be taken care of
    by Cloud Scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: As for maintenability and scalability, Cloud Composer is the master because
    of its infinite scalability and because the system is very observable with detailed
    logs and metrics available for all components. On this scale, Cloud Composer is
    tightly followed by Vertex AI Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Composer is on the highest side, as far as Cost is concerned, with Cloud
    Workflows easily winning the battle as the cheapest solution among the three.
  prefs: []
  type: TYPE_NORMAL
- en: Summing Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on your needs in terms of jobs orchestration, there might be in Google
    Cloud, a more appropriate solution than Cloud Composer. In the one hand, Cloud
    Workflows is much cheaper and meets all the basic requirements for a job orchestrator.
    In the other hand, Vertex AI Pipelines is more integrated to Kubernetes and will
    probably be easier to pick up for teams that already have a good knowledge of
    Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for your time and stay tuned for more.
  prefs: []
  type: TYPE_NORMAL
- en: '[1] [www.freepik.com](http://www.freepik.com/)'
  prefs: []
  type: TYPE_NORMAL
