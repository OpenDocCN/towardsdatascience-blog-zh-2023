- en: Create a Local dbt Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个本地 dbt 项目
- en: 原文：[https://towardsdatascience.com/create-local-dbt-project-e12c31bd3992](https://towardsdatascience.com/create-local-dbt-project-e12c31bd3992)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/create-local-dbt-project-e12c31bd3992](https://towardsdatascience.com/create-local-dbt-project-e12c31bd3992)
- en: How to create a local dbt project with dummy data for testing purposes with
    Docker
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Docker 创建一个带有虚拟数据的本地 dbt 项目以用于测试
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----e12c31bd3992--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----e12c31bd3992--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e12c31bd3992--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e12c31bd3992--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----e12c31bd3992--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/?source=post_page-----e12c31bd3992--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----e12c31bd3992--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e12c31bd3992--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e12c31bd3992--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----e12c31bd3992--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e12c31bd3992--------------------------------)
    ·7 min read·Jan 12, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e12c31bd3992--------------------------------)
    ·阅读时间 7 分钟·2023年1月12日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/481b848f924c744cbd3a67c44800e6fb.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/481b848f924c744cbd3a67c44800e6fb.png)'
- en: Photo by [Daniel K Cheung](https://unsplash.com/@danielkcheung?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/ZqqlOZyGG7g?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Daniel K Cheung](https://unsplash.com/@danielkcheung?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    拍摄，来源于 [Unsplash](https://unsplash.com/photos/ZqqlOZyGG7g?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: '[dbt (data build tool) is one of the hottest technologies in the data engineering
    and analytics space](/dbt-55b35c974533). Recently, I’ve been working on a task
    that performs some post-processing over dbt artefacts and wanted to write up some
    tests. In order to do so, I’ve had to create an example project that could run
    locally (or in a docker container), so that I wouldn’t have to interact with the
    actual Data Warehouse.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[dbt（数据构建工具）是数据工程和分析领域最热门的技术之一](/dbt-55b35c974533)。最近，我一直在处理一个任务，该任务对 dbt 生成的产物进行一些后处理，并且想编写一些测试。为此，我不得不创建一个可以在本地（或在
    docker 容器中）运行的示例项目，以便我不必与实际的数据仓库进行交互。'
- en: In this article we will go through a step-by-step process one can follow in
    order to create a dbt project and connect it with a containerized Postgres instance.
    You can use such projects either for testing purposes, or even for experimenting
    with the dbt itself in order to try out features or even practise your skills.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将逐步介绍创建 dbt 项目并将其与容器化的 Postgres 实例连接的过程。你可以使用这样的项目进行测试，甚至可以用来尝试 dbt
    本身的功能，或者练习你的技能。
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[**订阅数据管道**](https://thedatapipeline.substack.com/welcome)**，这是一个专注于数据工程的新闻通讯**'
- en: 'Step 1: Create a dbt project'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：创建一个 dbt 项目
- en: 'We will be populating some data in a Postgres database therefore, we first
    need to install the dbt Postgres adapter from PyPI:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向 Postgres 数据库中填充一些数据，因此我们首先需要从 PyPI 安装 dbt Postgres 适配器：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the command will also install the `dbt-core` package as well as other
    dependencies that are required for running dbt.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，命令还会安装 `dbt-core` 包以及运行 dbt 所需的其他依赖项。
- en: 'Now let’s go ahead and create a dbt project — to do so, we can initialise a
    new dbt project by running the `dbt init` command in the terminal:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建一个 dbt 项目——为此，我们可以通过在终端中运行 `dbt init` 命令来初始化一个新的 dbt 项目：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will then be prompted to select which database you like to use (depending
    on the adapters you have installed locally, you may see different options):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后系统会提示你选择要使用的数据库（根据你本地安装的适配器，你可能会看到不同的选项）：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Make sure to enter the number that corresponds to the Postgres adapter, as
    shown in the output list. Now the `init` command should have created the following
    basic structure in the directory where you’ve executed it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确保输入与 Postgres 适配器对应的数字，如输出列表中所示。现在，`init` 命令应该在你执行的目录中创建了以下基本结构：
- en: '![](../Images/77dcaab10f55daf3e04ee716be8e6f9f.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/77dcaab10f55daf3e04ee716be8e6f9f.png)'
- en: 'dbt project structure created by `dbt init` command — Source: Author'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `dbt init` 命令创建的 dbt 项目结构 — 来源：作者
- en: 'Step 2: Create a Docker Compose file'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2：创建一个 Docker Compose 文件
- en: 'Now let’s create a `docker-compose.yml` file (place the file at the same level
    as the `test_dbt_project`directory) in which we will be specifying two services
    — one would correspond to a ready-made Postgres image and the second one to a
    `dbt` image that we will define in a `Dockerfile` in the next step:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个 `docker-compose.yml` 文件（将文件放在与 `test_dbt_project` 目录相同的级别），在该文件中我们将指定两个服务
    — 一个对应于现成的 Postgres 镜像，另一个对应于我们将在下一步的 `Dockerfile` 中定义的 `dbt` 镜像：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can tell, for the Postgres container, we will be using an image called
    `frantiseks/postgres-sakila` which is publicly available and accessible on Docker
    Hub. This image, will populate the Sakila Database on the Postgres instance. The
    database models a DVD rental store and is consisted of multiple tables which are
    normalised and correspond to entities such as films, actors, customers and payments.
    In the next few following sections we’ll make use of this data in order to build
    some example dbt data models.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，对于 Postgres 容器，我们将使用一个名为 `frantiseks/postgres-sakila` 的镜像，该镜像在 Docker
    Hub 上公开可用。此镜像将填充 Postgres 实例上的 Sakila 数据库。该数据库模型化了一个 DVD 租赁店，由多个表组成，这些表经过规范化并对应于电影、演员、客户和付款等实体。在接下来的几个部分中，我们将利用这些数据来构建一些示例
    dbt 数据模型。
- en: The second service, called `dbt`, will be the one that creates an environment
    where we will build our data models. Note that we mount the current directory
    into the docker container. This will let the container have access to any changes
    we may be doing to the data models without having to re-build the image. Additionally,
    any metadata generated by dbt commands (such as `manifet.json`) will appear instantly
    on the host machine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个服务，称为 `dbt`，将创建一个我们将构建数据模型的环境。请注意，我们将当前目录挂载到 Docker 容器中。这将使容器能够访问我们对数据模型所做的任何更改，而无需重新构建镜像。此外，任何由
    dbt 命令生成的元数据（如 `manifet.json`）将在主机机器上立即出现。
- en: 'Step 3: Create a Dockerfile'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3：创建一个 Dockerfile
- en: Now let’s specify a `Dockerfile` that will be used to build an image on top
    of which the running container will then build the models specified in our example
    dbt project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们指定一个将用于构建镜像的`Dockerfile`，在这个镜像上运行的容器将构建我们示例 dbt 项目中指定的模型。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that in the last `CMD` command, we intentionally added an extra `&& sleep
    infinity` command such that the container won’t exit after running the steps specified
    in the `Dockerfile` so that we can then access the container and run additional
    dbt commands (if needed).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在最后一个 `CMD` 命令中，我们故意添加了一个额外的 `&& sleep infinity` 命令，以使容器在运行完 `Dockerfile`
    中指定的步骤后不会退出，这样我们就可以访问容器并运行额外的 dbt 命令（如果需要）。
- en: 'Step 4: Create a dbt profile for the Postgres database'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 4：为 Postgres 数据库创建一个 dbt 配置文件
- en: Now that we have created the required infrastructure for our host machines in
    order to create a Postgres database, populate some dummy data as well as creating
    an image for our dbt environment, let’s focus on the dbt side.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经为主机机器创建了所需的基础设施，以创建一个 Postgres 数据库、填充一些虚拟数据以及创建一个用于 dbt 环境的镜像，让我们专注于 dbt
    部分。
- en: 'We will first have to create a dbt profile that will be used when interacting
    with the target Postgres database. Within the `test_dbt_project` directory, create
    another directory called `profiles` and then a file called `profiles.yml` with
    the following content:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要创建一个 dbt 配置文件，用于与目标 Postgres 数据库交互。在 `test_dbt_project` 目录内，创建另一个名为 `profiles`
    的目录，然后创建一个名为 `profiles.yml` 的文件，内容如下：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Step 5: Define some data models'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 5：定义一些数据模型
- en: The next step is to create some data models based on the Sakila data populated
    by the Postgres container. If you are planning to use this project for testing
    purposes, I would advise to create at least one seed, one model and a snapshot
    (with tests if possible) so that you have a full coverage of all dbt entities
    (macros excluding).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是根据 Postgres 容器填充的 Sakila 数据创建一些数据模型。如果你计划将这个项目用于测试目的，我建议你至少创建一个种子数据，一个模型和一个快照（如果可能的话带有测试），以便全面覆盖所有
    dbt 实体（不包括宏）。
- en: I have created some data models, seeds and snapshots already, that you can access
    them on this repository
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经创建了一些数据模型、种子数据和快照，你可以在这个仓库中访问它们。
- en: '[](https://github.com/gmyrianthous/dbt-dummy/tree/main/dbt_project?source=post_page-----e12c31bd3992--------------------------------)
    [## dbt-dummy/dbt_project at main · gmyrianthous/dbt-dummy'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/gmyrianthous/dbt-dummy/tree/main/dbt_project?source=post_page-----e12c31bd3992--------------------------------)
    [## dbt-dummy/dbt_project at main · gmyrianthous/dbt-dummy'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你现在无法执行该操作。你在另一个标签页或窗口中登录了。你在另一个标签页中注销了...
- en: github.com](https://github.com/gmyrianthous/dbt-dummy/tree/main/dbt_project?source=post_page-----e12c31bd3992--------------------------------)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/gmyrianthous/dbt-dummy/tree/main/dbt_project?source=post_page-----e12c31bd3992--------------------------------)
- en: 'Step 6: Run the Docker containers'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 步：运行 Docker 容器
- en: We now have everything we need in order to spin up the two docker containers
    we specified in the `docker-compose.yml` file earlier, and build the data models
    defined in our example dbt project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了启动 `docker-compose.yml` 文件中指定的两个 Docker 容器，并构建我们示例 dbt 项目中定义的数据模型所需的一切。
- en: First, let’s build the images
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，构建镜像：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And now let’s spin up the running containers:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们启动运行的容器：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command should have initialised a Postgres database using the Sakila Database,
    and created the dbt models specified. For now, let’s make sure you have two running
    containers:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令应该已经使用 Sakila 数据库初始化了一个 Postgres 数据库，并创建了指定的 dbt 模型。现在，让我们确保你有两个正在运行的容器：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: should give an output that includes one container with name `dbt` and another
    one with name `postgres`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 应该输出包括一个名为 `dbt` 的容器和另一个名为 `postgres` 的容器。
- en: 'Step 7: Query the models on Postgres database'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 7 步：查询 Postgres 数据库上的模型
- en: In order to access the Postgres container, you’ll first need to infer the container
    id
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 Postgres 容器，首先需要推断容器 id。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And then run
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will then need to use `psql`, a command-line interface that gives us access
    the postgres instance:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要使用 `psql`，这是一个命令行接口，可以访问 Postgres 实例：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you have used the data models I’ve shared in the previous sections, you can
    now query each of the models created on Postgres using the queries below.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用了我在前面部分分享的数据模型，现在可以使用以下查询来查询在 Postgres 上创建的每个模型。
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Step 8: Creating additional or modifying existing models'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 8 步：创建额外的或修改现有的模型
- en: As mentioned already, the `Dockerfile` and `docker-compose.yml` files were written
    in such a way such that the dbt container would still be up and running. Therefore,
    whenever you modify or create data models, you can still use that container to
    re-build seeds, models, snapshots and/or tests.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`Dockerfile` 和 `docker-compose.yml` 文件被编写成 dbt 容器仍然会保持运行。因此，无论何时你修改或创建数据模型，你仍然可以使用该容器重新构建种子数据、模型、快照和/或测试。
- en: 'To do so, first infer the container id of the `dbt` container:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，首先推断 `dbt` 容器的 id：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then enter the running container by running
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过运行以下命令进入正在运行的容器：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And finally run any dbt command you wish, depending on the modifications you’ve
    made to the example dbt project. Here’s a quick reference of the most commonly
    used commands for these purposes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后运行你希望的任何 dbt 命令，这取决于你对示例 dbt 项目所做的修改。以下是这些用途最常用命令的快速参考：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How to get the full code of this tutorial
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何获取本教程的完整代码。
- en: I’ve created a GitHub repository called `dbt-dummy` that contains all the pieces
    you need in order to quickly create a containerized dbt project that uses Postgres.
    You can access it in the link below.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个名为 `dbt-dummy` 的 GitHub 仓库，其中包含了你需要的所有部分，以便快速创建一个使用 Postgres 的容器化 dbt
    项目。你可以通过以下链接访问它。
- en: '[](https://github.com/gmyrianthous/dbt-dummy?source=post_page-----e12c31bd3992--------------------------------)
    [## GitHub - gmyrianthous/dbt-dummy: This is a dummy dbt (data build tool) project
    you can use for…'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/gmyrianthous/dbt-dummy?source=post_page-----e12c31bd3992--------------------------------)
    [## GitHub - gmyrianthous/dbt-dummy: 这是一个虚拟的 dbt（数据构建工具）项目，你可以用于…'
- en: This is a dummy dbt (data build tool) project you can use to populate dbt seeds,
    models, snapshots and tests for…
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是一个虚拟的 dbt（数据构建工具）项目，你可以用它来填充 dbt seeds、模型、快照和测试……
- en: github.com](https://github.com/gmyrianthous/dbt-dummy?source=post_page-----e12c31bd3992--------------------------------)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/gmyrianthous/dbt-dummy?source=post_page-----e12c31bd3992--------------------------------)'
- en: This project is also available in the [example projects section of the official
    dbt documentation](https://docs.getdbt.com/faqs/project/example-projects)!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目也可以在[官方 dbt 文档的示例项目部分](https://docs.getdbt.com/faqs/project/example-projects)找到！
- en: Final Thoughts
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终思考
- en: In today’s tutorial we went through a step by step process for creating a dbt
    project on a local machine using Docker. We’ve built two images, one for the Postgres
    database that also populates the Sakila database, and another one for our dbt
    environment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的教程中，我们逐步讲解了如何在本地机器上使用 Docker 创建 dbt 项目。我们构建了两个镜像，一个用于 Postgres 数据库，同时填充了
    Sakila 数据库，另一个用于我们的 dbt 环境。
- en: It’s important to be able to quickly build some example projects with data build
    tool that can then be used as a testing environment or even a playground for experimenting
    and learning.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 能够快速构建一些示例项目是很重要的，这些项目可以作为测试环境，甚至是实验和学习的游乐场。
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[**订阅 Data Pipeline**](https://thedatapipeline.substack.com/welcome)**，这是一个专注于数据工程的新闻通讯**'
- en: '**Related articles you may also like**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关的文章你可能也会喜欢**'
- en: '[](/dbt-models-structure-c31c8977b5fc?source=post_page-----e12c31bd3992--------------------------------)
    [## How to Structure Your dbt Projects and Data Models'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/dbt-models-structure-c31c8977b5fc?source=post_page-----e12c31bd3992--------------------------------)
    [## 如何构建你的 dbt 项目和数据模型'
- en: Enforcing meaningful structure to dbt data models
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 dbt 数据模型实施有意义的结构
- en: towardsdatascience.com](/dbt-models-structure-c31c8977b5fc?source=post_page-----e12c31bd3992--------------------------------)
    [](/staging-intermediate-mart-models-dbt-2a759ecc1db1?source=post_page-----e12c31bd3992--------------------------------)
    [## Staging vs Intermediate vs Mart Models in dbt
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/dbt-models-structure-c31c8977b5fc?source=post_page-----e12c31bd3992--------------------------------)
    [](/staging-intermediate-mart-models-dbt-2a759ecc1db1?source=post_page-----e12c31bd3992--------------------------------)
    [## dbt 中的 Staging vs Intermediate vs Mart 模型'
- en: Understanding the purpose of staging, intermediate and mart models in the context
    of data build tool (dbt)
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解在数据构建工具（dbt）背景下，staging、intermediate 和 mart 模型的目的
- en: towardsdatascience.com](/staging-intermediate-mart-models-dbt-2a759ecc1db1?source=post_page-----e12c31bd3992--------------------------------)
    [](/install-dbt-1bd6a4259a14?source=post_page-----e12c31bd3992--------------------------------)
    [## How to Install dbt (data build tool)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/staging-intermediate-mart-models-dbt-2a759ecc1db1?source=post_page-----e12c31bd3992--------------------------------)
    [](/install-dbt-1bd6a4259a14?source=post_page-----e12c31bd3992--------------------------------)
    [## 如何安装 dbt（数据构建工具）'
- en: Installing data build tool for your specific data warehouse
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为你的特定数据仓库安装数据构建工具
- en: towardsdatascience.com](/install-dbt-1bd6a4259a14?source=post_page-----e12c31bd3992--------------------------------)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/install-dbt-1bd6a4259a14?source=post_page-----e12c31bd3992--------------------------------)'
