- en: 'Python Dependency Management: Which Tool Should You Choose?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/poetry-a-better-way-to-manage-python-dependencies-bd7b5f1eab25](https://towardsdatascience.com/poetry-a-better-way-to-manage-python-dependencies-bd7b5f1eab25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An in-depth comparison between Poetry, Pip, and Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----bd7b5f1eab25--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----bd7b5f1eab25--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd7b5f1eab25--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd7b5f1eab25--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----bd7b5f1eab25--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd7b5f1eab25--------------------------------)
    ·10 min read·Jun 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a87494b4a6efa276955127728c116a55.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://mathdatasimplified.com*](https://mathdatasimplified.com/2023/06/12/poetry-a-better-way-to-manage-python-dependencies/)
    *on June 13, 2023.*'
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your data science project expands, the number of dependencies also increases.
    To keep the project’s environment reproducible and maintainable, it’s important
    to use an efficient dependency management tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, I decided to compare three popular tools for dependency management: Pip,
    Conda, and Poetry. After careful evaluation, I’m convinced that Poetry surpasses
    the other two options in terms of effectiveness and performance.'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will delve into the advantages of Poetry and highlight its
    key distinctions from Pip and Conda.
  prefs: []
  type: TYPE_NORMAL
- en: Available packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a broad selection of packages makes it easier for developers to find
    the specific package and version that best suits their needs.
  prefs: []
  type: TYPE_NORMAL
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some packages, like “snscrape,” cannot be installed with conda. Additionally,
    certain versions, such as Pandas 2.0, might not be available for installation
    through Conda.
  prefs: []
  type: TYPE_NORMAL
- en: While you can use pip inside a conda virtual environment to address package
    limitations, conda cannot track dependencies installed with pip, making dependency
    management challenging.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pip can install any packages from the Python Package Index (PyPI) and other
    repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Poetry also allows the installation of packages from the Python Package Index
    (PyPI) and other repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Number of Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reducing the number of dependencies in an environment simplifies the development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conda provides full environment isolation, managing both Python packages and
    system-level dependencies. This can result in larger package sizes compared to
    other package managers, potentially consuming more storage space during installation
    and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pip installs only the dependencies required by a package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Poetry also installs only the dependencies required by a package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Uninstall Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uninstalling packages and their dependencies frees up disk space, prevents unnecessary
    clutter, and optimizes storage resource usage.
  prefs: []
  type: TYPE_NORMAL
- en: Pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pip removes only the specified package, not its dependencies, potentially leading
    to the accumulation of unused dependencies over time. This can result in increased
    storage space usage and potential conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conda removes the package and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Poetry also removes the package and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Dependency Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency files ensure the reproducibility of a software project’s environment
    by specifying the exact versions or version ranges of required packages.
  prefs: []
  type: TYPE_NORMAL
- en: This helps recreate the same environment across different systems or at different
    points in time, ensuring collaboration among developers with the same set of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To save dependencies in a Conda environment, you need to manually write them
    to a file. Version ranges specified in an environment.yml file can result in different
    versions being installed, potentially introducing compatibility issues when reproducing
    the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume that we have installed pandas version 1.5.3 as an example. Here
    is an example environment.yml file that specifies the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If a new user tries to reproduce the environment when the latest version of
    pandas is 2.0, pandas 2.0 will be installed instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If the codebase relies on syntax or behavior specific to pandas version 1.5.3
    and the syntax has changed in version 2.0, running the code with pandas 2.0 could
    introduce bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same problem can occur with pip.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pin down the version by freezing them in a requirements.txt file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: However, this makes the code environment less flexible and potentially harder
    to maintain in the long run. Any changes to the dependencies would require manual
    modifications to the requirements.txt file, which can be time-consuming and error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: Poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Poetry automatically updates the pyproject.toml file when installing a package.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, the “pandas” package is added with the version constraint
    `^1.5`. This flexible versioning approach ensures that your project can adapt
    to newer releases without manual adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The poetry.lock file stores the precise version numbers for each package and
    its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This guarantees consistency in the installed packages, even if a package has
    a version range specified in the pyproject.toml file. Here, we can see that pandas
    1.5.3 is installed instead of pandas 2.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Separate dependencies for dev and prod
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By separating the dependencies, you can clearly distinguish between the packages
    required for development purposes, such as testing frameworks and code quality
    tools, from the packages needed for the production environment, which typically
    include the core dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Conda doesn’t inherently support separate dependencies for different environments,
    but a workaround involves creating two environment files: one for the development
    environment and one for production. The development file contains both production
    and development dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pip also doesn’t directly support separate dependencies, but a similar approach
    can be used with separate requirement files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Poetry simplifies managing dependencies by supporting groups within one file.
    This allows you to keep track of all dependencies in a single place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To install only production dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To install both development and production dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Update an Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Updating dependencies is essential to benefit from bug fixes, performance improvements,
    and new features introduced in newer package versions.
  prefs: []
  type: TYPE_NORMAL
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conda allows you to update only a specified package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Afterward, you need to manually update the environment.yaml file to keep it
    in sync with the updated dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pip also only allows you to update a specified package and requires you to manually
    update the requirements.txt file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Poetry, you can use the `update` command to upgrade all packages specified
    in the pyproject.toml file. This action automatically updates the poetry.lock
    file, ensuring consistency between the package specifications and the lock file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Dependency Resolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency conflicts occur when packages or libraries required by a project
    have conflicting versions or incompatible dependencies. Properly resolving conflicts
    is crucial to avoid errors, runtime issues, or project failures.
  prefs: []
  type: TYPE_NORMAL
- en: Pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pip installs packages sequentially, which means it installs each package one
    by one, following the specified order. This sequential approach can sometimes
    lead to conflicts when packages have incompatible dependencies or version requirements.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you install `pandas==2.0.2` first, which requires `numpy>=1.20.3`.
    Later, you install `numpy==1.20.2` using pip. Even though this will create dependency
    conflicts, pip will proceed to update the version of numpy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conda uses a SAT solver to explore all combinations of package versions and
    dependencies to find a compatible set.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if an existing package has a specific constraint for its dependency
    (e.g., statsmodels==0.13.2 requires numpy>=1.21.2,<2.0a0), and the package you
    want to install doesn’t meet that requirement (e.g., numpy<1.21.2), conda won’t
    immediately raise an error. Instead, it will diligently search for compatible
    versions of all the required packages and their dependencies, only reporting an
    error if no suitable solution is found.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: While this approach enhances the chances of finding a resolution, it can be
    computationally intensive, particularly when dealing with extensive environments.
  prefs: []
  type: TYPE_NORMAL
- en: Poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By focusing on the direct dependencies of the project, Poetry’s deterministic
    resolver narrows down the search space, making the resolution process more efficient.
    It evaluates the specified constraints, such as version ranges or specific versions,
    and immediately identifies any conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This immediate feedback helps prevent potential issues from escalating and
    allows developers to address the problem early in the development process. For
    example, in the following code, we can relax the requirements for seaborn to enable
    the installation of a specific version of matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In summary, Poetry provides several advantages over pip and conda:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Broad Package Selection:** Poetry provides access to a wide range of packages
    available on PyPI, allowing you to leverage a diverse ecosystem for your project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Efficient Dependency Management:** Poetry installs only the necessary dependencies
    for a specified package, reducing the number of extraneous packages in your environment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Streamlined Package Removal:** Poetry simplifies the removal of packages
    and their associated dependencies, making it easy to maintain a clean and efficient
    project environment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Dependency Resolution:** Poetry’s deterministic resolver efficiently resolves
    dependencies, identifying and addressing any inconsistencies or conflicts promptly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While Poetry may require some additional time and effort for your teammates
    to learn and adapt to, using a tool like Poetry can save you time and effort in
    the long run.
  prefs: []
  type: TYPE_NORMAL
- en: 'I love writing about data science concepts and playing with different data
    science tools. You can stay up-to-date with my latest posts by:'
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to my newsletter on [Data Science Simplified](https://mathdatasimplified.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect with me on [LinkedIn](https://www.linkedin.com/in/khuyen-tran-1401/)
    and [Twitter](https://twitter.com/KhuyenTran16).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
