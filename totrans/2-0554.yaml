- en: 'Containers: How They Work Under the Hood and Why They’re Taking Over the Data
    Science World'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa](https://towardsdatascience.com/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Beginner’s Guide to Understanding the Magic of Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----6b94702609aa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6b94702609aa--------------------------------)
    ·7 min read·Jan 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/13ff5f2e19441c4680fe692971465852.png)'
  prefs: []
  type: TYPE_IMG
- en: Containerized city — Image generated by Stable Diffusion
  prefs: []
  type: TYPE_NORMAL
- en: Docker has taken the world by storm, and for a good reason. Lightweight, portable
    containers make it easy to package and deploy applications, ensuring they run
    consistently and reliably on any platform.
  prefs: []
  type: TYPE_NORMAL
- en: But what exactly are Docker containers, and how do they work under the hood?
    A Google search will give you hundreds of articles about how containers compare
    to Virtual Machines (VMs), but this does not answer the question. What does Docker
    do? Is it something they invented? Can we create containers without Docker or
    Podman, or any other platform you may use?
  prefs: []
  type: TYPE_NORMAL
- en: This series of articles will break down the concept of containers and explain
    how Docker uses them to revolutionize how we build and deploy software. We’ll
    see what Linux namespaces are, how you can use `cgroups` to limit the resources
    a container can dip into, and why overlay file systems play a critical role in
    creating container-like environments.
  prefs: []
  type: TYPE_NORMAL
- en: Are you ready to understand the magic of Docker containers? By the end of this
    series, you will be able to create your own container-like environments without
    Docker.
  prefs: []
  type: TYPE_NORMAL
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=namespaces)
    is a newsletter for those who are curious about the world of MLOps. MLOps is a
    broad field that strives to bring ML models to production in an efficient and
    rerpoducible way. Containers play a crucial role in the pipeline. If you want
    to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=namespaces).
    You’ll hear from me on the first Saturday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Key Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s move away from Docker a bit and start discussing the key components that
    make up Linux Containers. Linux containers are a powerful technology that allows
    you to run multiple sandboxed processes on a single host.
  prefs: []
  type: TYPE_NORMAL
- en: 'These processes share the host’s kernel but have their own user space, meaning
    that they have their own set of libraries, dependencies, and runtime environments.
    There are three key components that make up a Linux container: namespaces, control
    groups (`cgroups`), and overlay file systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Namespaces is a kernel feature that allows you to create isolated environments
    within a single Linux system. Each namespace has its own view of the system, meaning
    that processes within a namespace are unaware of the processes running in other
    namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: Control groups (`cgroups`) are kernel features that allow you to manage and
    allocate resources, such as CPU, memory, and I/O bandwidth, to groups of processes.
  prefs: []
  type: TYPE_NORMAL
- en: Overlay file systems allow you to stack one file system on top of another, creating
    a single logical file system. We’ll see why this is important in later articles.
  prefs: []
  type: TYPE_NORMAL
- en: This is a high-level view of what each component that makes up a container does.
    In this article, we will talk more about namespaces. In later articles, we will
    discuss how `cgroups` and the overlay file systems complete the picture.
  prefs: []
  type: TYPE_NORMAL
- en: Namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Namespaces are kernel features that allow you to create isolated environments
    within a single Linux system. Each namespace has its own view of the system, meaning
    that processes within a namespace are unaware of the processes running in other
    namespaces. Namespaces are used to create the isolated environments in which containers
    run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try a simple analogy: a namespace in Linux is like a room in a house.
    Each room has its own things inside of it, and you can only see and use the things
    in the room you are in. But there might be other rooms in the house with different
    things inside of them, and you can’t see or use those things unless you go into
    those rooms.'
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, each process (which is like a program that is running on the computer)
    can be in a different namespace. So if you have two processes in different namespaces,
    they can each have their own separate things (like their own list of files or
    their own network connections), and they won’t be able to see or use each other’s
    things. This is useful for keeping different processes separate from each other
    and for making sure that one process can’t interfere with another process.
  prefs: []
  type: TYPE_NORMAL
- en: Types of namespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several different types of namespaces in Linux, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PID` namespace: Isolates the process ID space so that processes in different
    `PID` namespaces can have the same `PID` without conflicting with each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`net` namespace: Isolates the network stack, including network interfaces,
    IP addresses, and routing tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mount` namespace: Isolates the mount points so that processes in different
    mount namespaces can have their own private file systems that are separate from
    each other and from the host file system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IPC` namespace: Isolates interprocess communication resources, such as System
    V `IPC` objects and POSIX message queues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uts` namespace: Isolates the hostname.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let’s create our own `PID` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Create your own namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, let’s create a new `PID` namespace and run the `bash` command in it. First,
    let’s explore the current state of our system using the `pstree` command. I work
    in a VM running Ubuntu in VirtualBox, so the command returns the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/91e844a4cb5f22aed6fa8cb5db44ef26.png)'
  prefs: []
  type: TYPE_IMG
- en: '`pstree` — Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we see the way processes in Linux are structured. Every process has a
    parent except the first process. Typically the `init` process (usually `systemd`)
    will be `PID` 1 and has no parent. To learn more about `systemd` read the following
    story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/geekculture/the-rise-of-linux-systemd-a-beginners-guide-8ca1e226103a?source=post_page-----6b94702609aa--------------------------------)
    [## The Rise of Linux Systemd: A Beginner’s Guide'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Power and Flexibility of Linux Systemd.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/geekculture/the-rise-of-linux-systemd-a-beginners-guide-8ca1e226103a?source=post_page-----6b94702609aa--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'If we create a new `PID` namespace, we expect to have a new tree structure
    with the processes that belong to this namespace. Moreover, the command we will
    run first in this namespace will take the `PID` 1, which will be mapped to a higher
    `PID` number in the host. Let’s see that in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `unshare` command is the one you want to use to create new namespaces. In
    this context and with these flags, it will create a new `PID` namespace (the `p`
    flag) and a new `IPC` namespace (the `i` flag).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you try to get the processes running in this namespace, you should
    be able to see `bash` as `PID` 1, right? Let’s check this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result I get in my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aba675af1e2d20228d19a6ffc1727d91.png)'
  prefs: []
  type: TYPE_IMG
- en: ps — Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: So, what is going on? Why do I still see the `init` process as `PID` 1? The
    Linux kernel uses the `/proc` file system to get data about the running processes.
    Thus, we’re missing a component here. We need to also create a new `mount` namespace
    and mount a new `/proc` file system because now we’re getting this information
    from the default `mount` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve this error, we will use the `--mount-proc` flag, which creates a
    new `mount` namespace and mounts a new `/proc` file system. Type `exit` to get
    out of the `PID` namespace you created and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you run `ps -ef` again you’ll get what you were looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/79e01f77ad86464553dd1d773f5f453f.png)'
  prefs: []
  type: TYPE_IMG
- en: pc-proc — Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you created a new `PID` namespace. This is the first step to
    understanding how containers work under the hood. Of course, it helps if you try
    to run something more meaningful than bash, but keep in mind that you have created
    an isolated view of your system. To exit this view, just type `exit` in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker containers are a revolutionary technology that has taken the world by
    storm. These lightweight, portable containers make it easy to package and deploy
    applications, ensuring that they run consistently and reliably on any platform.
    But what exactly are Docker containers, and how do they work under the hood?
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we discussed about the key components that make up a Linux
    container and looked at namespaces in detail. Next, we’ll take a deep dive into
    `cgroups`. Our goal is to create a container-like environment without using Docker!
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=namespaces),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  prefs: []
  type: TYPE_NORMAL
