- en: NaN Values in the Python Standard Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 标准库中的 NaN 值
- en: 原文：[https://towardsdatascience.com/nan-values-in-the-python-standard-library-798d9ed946c0](https://towardsdatascience.com/nan-values-in-the-python-standard-library-798d9ed946c0)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/nan-values-in-the-python-standard-library-798d9ed946c0](https://towardsdatascience.com/nan-values-in-the-python-standard-library-798d9ed946c0)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: NaN means Not-a-Number. You can use it in numerical libraries — but also in
    the Python standard library.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NaN 意味着 Not-a-Number。你可以在数值库中使用它——但也可以在 Python 标准库中使用。
- en: '[](https://medium.com/@nyggus?source=post_page-----798d9ed946c0--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----798d9ed946c0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----798d9ed946c0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----798d9ed946c0--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----798d9ed946c0--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----798d9ed946c0--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----798d9ed946c0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----798d9ed946c0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----798d9ed946c0--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----798d9ed946c0--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----798d9ed946c0--------------------------------)
    ·11 min read·Oct 7, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----798d9ed946c0--------------------------------)
    ·11 分钟阅读·2023 年 10 月 7 日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f4310ba7fa2b1ab8177d7c517788116b.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f4310ba7fa2b1ab8177d7c517788116b.png)'
- en: Photo by [cyrus gomez](https://unsplash.com/@cyrusgomez?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [cyrus gomez](https://unsplash.com/@cyrusgomez?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '`NaN` stands for *Not-a-Number*. Thus, a `NaN` object represents what this
    very name conveys — something that isn’t a number. It can be a missing value but
    also a non-numerical value in a numerical variable. As we shouldn’t use a non-numerical
    value in purely numerical containers, we indicate such a value as *not-a-number*,
    `NaN`. In other words, we can say `NaN` represents a *missing numerical value*.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN` 代表 *Not-a-Number*。因此，`NaN` 对象表示它的名字所传达的意思——某物不是一个数字。它可以是一个缺失值，也可以是数值变量中的非数值值。由于我们不应该在纯数值容器中使用非数值值，因此我们将这样的值标记为
    *not-a-number*，即 `NaN`。换句话说，我们可以说 `NaN` 代表一个 *缺失的数值*。'
- en: In this article, we will discuss `NaN` objects available in the Python standard
    library.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将讨论 Python 标准库中可用的 `NaN` 对象。
- en: '`NaN` values occur frequently in numerical data. If you’re interested in details
    of this value, you will find them, for instance, here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN` 值在数值数据中经常出现。如果你对这个值的细节感兴趣，你可以在这里找到它们：'
- en: '[](https://en.wikipedia.org/wiki/NaN?source=post_page-----798d9ed946c0--------------------------------)
    [## NaN - Wikipedia'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://en.wikipedia.org/wiki/NaN?source=post_page-----798d9ed946c0--------------------------------)
    [## NaN - 维基百科'
- en: In computing, NaN (), standing for Not a Number, is a particular value of a
    numeric data type (often a floating-point…
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在计算中，NaN（代表 Not a Number）是数字数据类型的一种特定值（通常是浮点数）……
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/NaN?source=post_page-----798d9ed946c0--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: en.wikipedia.org](https://en.wikipedia.org/wiki/NaN?source=post_page-----798d9ed946c0--------------------------------)
- en: In this article, we will not discuss all the details of `NaN` values.¹ Instead,
    we will discuss several examples of how to work with `NaN` values in Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们不会讨论 `NaN` 值的所有细节。¹ 相反，我们将讨论一些如何在 Python 中处理 `NaN` 值的示例。
- en: 'Each programming language has its own approach to `NaN` values. In programming
    languages focused on computation, `NaN` values are fundamental. For example, in
    R, you have `NULL` (a counterpart of Python’s `None`), `NA` (for *not available*),
    and `NaN` (for *not-a-number*):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言对 `NaN` 值有自己独特的方法。在以计算为重点的编程语言中，`NaN` 值是基本的。例如，在 R 语言中，你有 `NULL`（相当于 Python
    的 `None`）、`NA`（表示 *not available*）和 `NaN`（表示 *not-a-number*）：
- en: '![](../Images/3eb21b5a8f621d1a124a530c2a66c834.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3eb21b5a8f621d1a124a530c2a66c834.png)'
- en: Screenshot from an R session. Image by author.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 R 会话的截图。图片由作者提供。
- en: In Python, you have `None` and a number of objects representing `NaN`. It’s
    worth to know that Pandas differentiates between `NaN` and `NaT`, a value representing
    missing time. This article will discuss `NaN` values in the standard library;
    `NaN` (and `NaT`, for that matter) in the mainstream numerical Python frameworks
    — such as NumPy and Pandas — will be covered in a future article.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你有`None`和多个表示`NaN`的对象。值得注意的是，Pandas区分`NaN`和`NaT`，后者代表缺失的时间。本文将讨论标准库中的`NaN`值；主流数值Python框架中的`NaN`（以及`NaT`）——例如NumPy和Pandas——将在未来的文章中讨论。
- en: If you haven’t worked with numerical data in Python, you may not have encountered
    `NaN` at all. However, `NaN` values are ubiquitous in Python programming, so it’s
    important to know how to work with them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在Python中处理过数值数据，可能根本没有遇到过`NaN`。然而，`NaN`值在Python编程中无处不在，因此了解如何处理它们非常重要。
- en: Introduction to `NaN` in Python
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中`NaN`的介绍
- en: 'When you work with a `list` object, you can use both numerical and non-numerical
    values. So, it can be `[1, 2, "three"]` or `[1, 2, None]` and the like. You can
    even do this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理一个`list`对象时，可以使用数字值和非数字值。因此，它可以是`[1, 2, "three"]`或`[1, 2, None]`等。你甚至可以这样做：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, lists accept any objects. If you want to perform numerical calculations
    on such lists, you can, but you need to adapt the code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，列表可以接受任何对象。如果你想对这些列表进行数字计算，可以做到，但需要调整代码：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, objects that are not numbers can stay whatever they are here,
    and you can still perform numerical computations — it’s not simple or concise
    code, but it works.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，非数字对象在这里可以保持原样，你仍然可以进行数字计算——这不是简单或简洁的代码，但它有效。
- en: '`NaN` — not a number — stands for a *missing numerical value*.'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`NaN`——非数字——代表一个*缺失的数值*。'
- en: 'This is not the case, however, with container types that only accept objects
    of a particular numerical type. This can be `array.array`, `numpy.array` or a
    `pandas` series (and equivalently, a numerical column of a `pandas` dataframe).
    If defined as numerical, they don’t accept non-numerical values, with one exception:
    a `NaN` value.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于只接受特定数字类型对象的容器类型来说情况并非如此。这包括`array.array`、`numpy.array`或`pandas`系列（以及`pandas`数据框中的数值列）。如果定义为数字，它们不接受非数字值，唯一的例外是：`NaN`值。
- en: '`NaN` means a non-numerical value, but as you will see soon, its type is numerical
    — `float`, to be precise. Why? For the simple reason that thanks to that, you
    can use `NaN` in numerical containers.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`表示一个非数字值，但正如你将很快看到的，它的类型是数字类型——准确地说是`float`。为什么？原因很简单，因为这样你可以在数字容器中使用`NaN`。'
- en: Why not get rid of them?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不去掉它们呢？
- en: Why not just get rid of all such values? Why bother in the first place?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不干脆去掉所有这些值呢？干嘛要费这个劲呢？
- en: 'One common use case for `NaN` values is data analysis and visualization. For
    example, consider a dataset that includes several columns with missing values
    for some rows. You cannot remove a cell from a data frame, so you can either keep
    all these rows and handle somehow the missing values or remove all rows with one
    or more `NaN` values. Removing rows with missing values is a common practice,
    but it has a cost: It removes non-NaN values for some of the columns, and it is
    rarely wise to discard information we already have.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`值的一个常见用例是数据分析和可视化。例如，考虑一个数据集，其中几列有某些行的缺失值。你不能从数据框中删除一个单元格，因此你可以选择保留所有这些行并以某种方式处理缺失值，或者删除所有包含一个或多个`NaN`值的行。删除缺失值的行是一个常见的做法，但它有代价：它会删除某些列中的非`NaN`值，通常不明智地丢弃我们已经拥有的信息。'
- en: Another use case for `NaN` values is in error handling. For example, if a function
    expects a numerical input but receives a string or other non-numeric value, it
    may return a `NaN` value to indicate that the input was invalid. We will see an
    example soon. This allows the calling code to handle the error gracefully, rather
    than raising an exception or returning an unexpected result. By using `NaN` values
    to represent errors or missing data, it’s possible to perform calculations and
    processing on datasets that may include invalid or missing values. You could return
    `None` instead, but in Python `None` can mean a variety of things while `NaN`
    conveys a more specific piece of information, one directly related to the numerical
    character of values — that this is *not a number*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN` 值的另一个用途是在错误处理。例如，如果一个函数期望一个数值输入，但接收到一个字符串或其他非数值的值，它可能会返回一个 `NaN` 值以表示输入无效。我们很快会看到一个例子。这使得调用代码可以优雅地处理错误，而不是引发异常或返回意外结果。通过使用
    `NaN` 值来表示错误或缺失的数据，可以对可能包含无效或缺失值的数据集进行计算和处理。你可以返回 `None`，但在 Python 中，`None` 可能表示各种不同的含义，而
    `NaN` 传达了更具体的信息，直接与值的数值特性相关——这*不是一个数字*。'
- en: When you work with numerical values and tools, you should know how to use `NaN`.
    However, when your application is of a general character and thus does not need
    a numerical framework (like NumPy or Pandas), quite often you will see that `NaN`
    can be simply ignored, or represented by `None`. If this makes code simpler without
    any sacrifice, consider doing this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理数值和工具时，你应该知道如何使用 `NaN`。然而，当你的应用是通用性质的，因此不需要数值框架（如 NumPy 或 Pandas）时，你会发现
    `NaN` 常常可以被忽略，或者用 `None` 表示。如果这样可以使代码更简单而不牺牲任何功能，考虑这样做。
- en: Examples
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: '`NaN` values can mean a variety of thing:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN` 值可以意味着各种事情：'
- en: 'A regular missing value — it was not provided, did not come through, things
    like that. In your notebook, you would indicate it as “NA” or “N/A”: Not Applicable.
    *Not Applicable* as in, you can’t apply it. It’s missing, and so we need to indicate
    it as missing. You can use `NaN`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个普通的缺失值——它没有提供，未传输，等等。在你的笔记本中，你会将其标记为“NA”或“N/A”：不适用。*不适用*，即你无法应用它。它是缺失的，因此我们需要将其标记为缺失。你可以使用
    `NaN`。
- en: A result from a function that got incorrect values of arguments of numerical
    types. Instead of throwing an error, the function returns `NaN`.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数的结果得到了数值类型参数的错误值。函数返回 `NaN`，而不是抛出错误。
- en: A mistake. This can be an input error; believe me or not, input errors are more
    frequent than most of us imagine, and [they can affect subsequent analyses quite
    a lot](https://www.tandfonline.com/doi/abs/10.1080/02664763.2015.1016410). For
    instance, many people still think that spinach is a great source of iron. Well,
    it isn’t, so why so many think so? It came from [an input error — a misplaced
    decimal point](https://uamshealth.com/medical-myths/is-spinach-a-great-source-of-iron/).
    You can use `NaN` to indicate data elements with mistakes — unless you’re certain
    you can correct the mistake.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个错误。这可能是输入错误；信不信由你，输入错误比我们大多数人想象的要频繁得多，[它们可能会对后续分析产生很大影响](https://www.tandfonline.com/doi/abs/10.1080/02664763.2015.1016410)。例如，许多人仍然认为菠菜是铁的良好来源。实际上并不是，那为什么这么多人认为如此呢？这源于[一个输入错误——一个错误的十进制点](https://uamshealth.com/medical-myths/is-spinach-a-great-source-of-iron/)。你可以使用
    `NaN` 来表示有错误的数据元素——除非你确定可以纠正这个错误。
- en: A comment. It’s a string value that has been mistakenly entered into a numerical
    variable. This can happen when a person entering data wants to explain why a particular
    value is missing, such as “Unclear reading” or “I overslept.” Although these are
    still missing data, they provide more information than simply a blank value. Sometimes
    this information is important, but other times it is not. For numerical computation,
    however, the value of such a comment is usually minor or nonexistent. Therefore,
    if you need to use a numerical container for this variable, you can use `NaN`
    to represent the comment.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个注释。这是一个被错误地输入到数值变量中的字符串值。当输入数据的人想解释某个特定值缺失的原因时，比如“读取不清”或“我睡过头了”。虽然这些仍然是缺失的数据，但它们提供的信息比单纯的空白值要多。有时这些信息很重要，但有时则不然。然而，对于数值计算来说，这样的注释值通常是微不足道的。因此，如果你需要使用数值容器来表示这个变量，你可以使用
    `NaN` 来表示注释。
- en: 'These are four examples, but other situations are also possible. Although each
    situation is slightly different, from a numerical computation point of view, they
    are all the same: the value is not a number. We need to do something with it,
    and using `NaN` is a common option.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是四个例子，但也有其他情况。虽然每种情况略有不同，但从数值计算的角度来看，它们都是相同的：这个值不是一个数字。我们需要对它做点什么，使用 `NaN`
    是一个常见的选择。
- en: NaN in the standard library
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准库中的 NaN
- en: Python offers several types of `NaN` values, and we will discuss them below.
    In this article, we focus on the standard library, but be aware that if you use
    a numerical framework, it most likely has its own implementation (or rather representation)
    of `NaN` and functions / methods that work with it.²
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了几种类型的 `NaN` 值，我们将在下文中讨论它们。本文重点关注标准库，但请注意，如果你使用数值框架，它很可能有自己对 `NaN`
    的实现（或说是表示）以及与之配套的函数/方法。²
- en: 'Although the Python standard library is not the most suitable tool for numerical
    computation, it does offer both numerical containers and dedicated tools. An example
    of a numerical container is the `array` module with its `array.array` container
    type. While it’s not the best tool to work with directly, it enables you to work
    with Cython efficiently without using non-standard-library tools like NumPy. An
    example of a dedicated numerical tool from the standard library is the `math`
    module:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Python 标准库不是进行数值计算的最佳工具，但它确实提供了数值容器和专用工具。一个数值容器的例子是 `array` 模块及其 `array.array`
    容器类型。虽然它不是直接使用的最佳工具，但它使你可以高效地使用 Cython，而无需使用像 NumPy 这样的非标准库工具。一个标准库中的专用数值工具的例子是
    `math` 模块：
- en: '[## math — Mathematical functions — Python 3.10.8 documentation'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[## math — 数学函数 — Python 3.10.8 文档'
- en: This module provides access to the mathematical functions defined by the C standard.
    These functions cannot be used…
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 该模块提供了 C 标准定义的数学函数的访问。这些函数不能被使用…
- en: docs.python.org](https://docs.python.org/3/library/math.html?source=post_page-----798d9ed946c0--------------------------------)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.python.org](https://docs.python.org/3/library/math.html?source=post_page-----798d9ed946c0--------------------------------)'
- en: 'You have two ways to use `NaN` values in the Python standard library: `float("nan")`
    and `math.nan`. I have read many books on Python, but I don’t recall seeing either
    of these values mentioned. My memory is not perfect, but I suspect that even if
    these values are mentioned in some books, they are not given much attention. As
    a result, I believe that many data scientists, and even Python developers outside
    of the data science realm, are unaware of `float("nan")` and `math.nan`, even
    though they may be familiar with `np.nan`, which is the standard way to represent
    NaN values in NumPy arrays and pandas DataFrames (see below). A possible reason
    is that these two are not as widely used as `np.nan`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 标准库中使用 `NaN` 值有两种方式：`float("nan")` 和 `math.nan`。我读过许多关于 Python 的书，但我不记得看到过这两个值的提及。我的记忆并不完美，但我怀疑即使这些值在一些书中被提到，也没有得到足够的关注。因此，我认为许多数据科学家，甚至是数据科学领域之外的
    Python 开发者，可能对 `float("nan")` 和 `math.nan` 并不知晓，尽管他们可能熟悉 `np.nan`，这是在 NumPy 数组和
    pandas DataFrame 中表示 NaN 值的标准方式（见下文）。一个可能的原因是这两个值不像 `np.nan` 那样广泛使用。
- en: 'Both of these `NaN` objects are values, both of the `float` type:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个 `NaN` 对象都是值，都是 `float` 类型：
- en: '![](../Images/45ea8e0ae1ffb137bfd19566efb9efe5.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/45ea8e0ae1ffb137bfd19566efb9efe5.png)'
- en: The type of both float(“nan”) and math.nan is float. Image by author.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: float(“nan”) 和 math.nan 的类型都是 float。图像由作者提供。
- en: By the way, at this point you shouldn’t be surprised to learn that the type
    of `np.nan` is also `float`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，现在你不应该感到惊讶，了解到 `np.nan` 的类型也是 `float`。
- en: 'It’s important to remember how two `NaN` values compare:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记住两个 `NaN` 值的比较是很重要的：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is because we only know that `NaN` is not a number, but we have no idea
    what sort of value it is. In one case, it can be a string; in another case, it
    can be a different string; still another, it can be a long dictionary; and yet
    in another, it can be a missing value, as `NaN` is frequently used for `NA`. So,
    we cannot assume that two `NaN` values are equal to each other. This can make
    quite a difference when working with numerical vectors and matrices:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们只知道 `NaN` 不是一个数字，但我们不知道它是什么类型的值。在一种情况下，它可以是一个字符串；在另一种情况下，它可以是一个不同的字符串；还有一种，它可以是一个长字典；再一种，它可以是一个缺失值，因为
    `NaN` 经常用于表示 `NA`。因此，我们不能假设两个 `NaN` 值彼此相等。这在处理数值向量和矩阵时可能会产生相当大的差异：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/4e11b8a68ef909eae1f0efb8870cf014.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e11b8a68ef909eae1f0efb8870cf014.png)'
- en: 'However, if we create a new `NaN` object, we will see this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们创建一个新的`NaN`对象，我们将看到：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Have you noticed that even though the `is` comparison returns `True`, the `==`
    comparison returns `False`? So, the object is itself, but it’s not equal to itself…
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到，即使`is`比较返回`True`，`==`比较却返回`False`？所以，这个对象是它自己，但它却不等于自己……
- en: Remember about this behavior when using a newly defined sentinel like `NaN`
    or `NaNmath` above. I know it’s tempting, and I myself have done this more than
    once. Hence, do so only if this behavior is what you want to achieve.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 记住使用新定义的哨兵值如`NaN`或`NaNmath`时的这种行为。我知道这很诱人，我自己也做过不止一次。因此，只有当这种行为是你想要实现的时，才这样做。
- en: '![](../Images/2140c5bcdcc9ec27f5c88cd67d808032.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2140c5bcdcc9ec27f5c88cd67d808032.png)'
- en: 'Let’s return to this example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到这个例子：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: and let’s see our `NaN` values in action. Instead of adjusting the `sum()` function,
    let us replace `"three"` with a `NaN` value. In order to do so, we can use the
    following function:³
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`NaN`值的实际应用。我们可以用`NaN`值替换掉`"three"`，而不是调整`sum()`函数。为此，我们可以使用以下函数：³
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let’s use the function right before using the `sum()` function, which,
    as we saw above, doesn’t accept non-numerical values:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在使用`sum()`函数之前使用该函数，如上所述，它不接受非数值型的值：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Hah? What’s happening? We used `NaN` values in order to make `sum()` work, and
    indeed it does not throw an error the way it did before. But it simply returns
    `nan`…
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 哈？发生了什么？我们使用了`NaN`值来使`sum()`工作，确实它不像之前那样抛出错误。但它只是返回了`nan`……
- en: 'From a mathematical point of view, it makes perfect sense: Adding a number
    to not a number will not give a number, will it? This is the reason we got `nan`
    above. But is it what we want to achieve?'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学角度来看，这完全合理：将一个数字加到不是数字的东西上不会得到一个数字，对吧？这就是我们上面得到`nan`的原因。但这真的是我们想要实现的结果吗？
- en: It depends. Usually, we have a choice of how we want to handle `NaN` values.
    The most typical approach is to drop `them`. This is done by removing whole rows
    or columns from a dataframe or cells from a variable. Another approach— frequently
    used in statistics — is to fill in missing values with other values; this is called
    imputation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这要视情况而定。通常，我们可以选择如何处理`NaN`值。最典型的方法是删除`它们`。这通过从数据框中删除整行或整列，或从变量中删除单元格来完成。另一种方法——在统计学中常用——是用其他值填充缺失值，这称为插补。
- en: 'This article doesn’t aim to go into detail about these methods. You can read
    about them in a number of statistics books, but also in various articles; the
    two below describe using such methods in Python:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本文并不打算详细讨论这些方法。你可以在许多统计学书籍中阅读这些方法，也可以在各种文章中找到它们；下面的两篇文章描述了在 Python 中使用这些方法：
- en: '[](/3-ultimate-ways-to-deal-with-missing-values-in-python-ac5a17c53787?source=post_page-----798d9ed946c0--------------------------------)
    [## 3 Ultimate Ways to Deal With Missing Values in Python'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/3-ultimate-ways-to-deal-with-missing-values-in-python-ac5a17c53787?source=post_page-----798d9ed946c0--------------------------------)
    [## 3 种处理 Python 中缺失值的终极方法]'
- en: Choose wisely between imputation and removal of data
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在插补和数据删除之间明智地选择
- en: towardsdatascience.com](/3-ultimate-ways-to-deal-with-missing-values-in-python-ac5a17c53787?source=post_page-----798d9ed946c0--------------------------------)
    [](https://www.analyticsvidhya.com/blog/2021/05/dealing-with-missing-values-in-python-a-complete-guide/?source=post_page-----798d9ed946c0--------------------------------)
    [## How to Handle Missing Data in Python? [Explained in 5 Easy Steps]
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/3-ultimate-ways-to-deal-with-missing-values-in-python-ac5a17c53787?source=post_page-----798d9ed946c0--------------------------------)
    [](https://www.analyticsvidhya.com/blog/2021/05/dealing-with-missing-values-in-python-a-complete-guide/?source=post_page-----798d9ed946c0--------------------------------)
    [## 如何处理 Python 中的缺失数据？ [5 个简单步骤说明]]
- en: Learn how to handle missing data in python. Identify, assess and address missing
    data, so you can make the most of your…
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何处理 Python 中的缺失数据。识别、评估并处理缺失数据，以便你能最大限度地发挥……
- en: www.analyticsvidhya.com](https://www.analyticsvidhya.com/blog/2021/05/dealing-with-missing-values-in-python-a-complete-guide/?source=post_page-----798d9ed946c0--------------------------------)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: www.analyticsvidhya.com](https://www.analyticsvidhya.com/blog/2021/05/dealing-with-missing-values-in-python-a-complete-guide/?source=post_page-----798d9ed946c0--------------------------------)
- en: As we saw above, methods from the standard library do work with `NaN` values,
    but they will simply return `nan`, which is both a `repr` and a `str` representation
    of `float("nan")`. So, we need to remove the not-a-number values manually from
    the container. Unfortunately, given how comparisons of `NaN` values work, the
    following will not work
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，标准库中的方法确实能处理 `NaN` 值，但它们会简单地返回 `nan`，这是 `float("nan")` 的 `repr` 和 `str`
    表示。因此，我们需要手动从容器中移除不是数字的值。不幸的是，鉴于 `NaN` 值的比较方式，以下方法将无效
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, `nan` again. How come?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`nan` 又来了。这是怎么回事？
- en: 'We know already what’s happening: `NaN` returns `False` when being compared
    to other `NaN` values, which is done in `if xi is not NaN` and `if xi != NaN`.
    Hence, we need a dedicated function to check for `NaN` values. The standard library
    offers such a function, in the `math` module:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道发生了什么：`NaN` 在与其他 `NaN` 值进行比较时返回 `False`，这发生在 `if xi is not NaN` 和 `if
    xi != NaN` 中。因此，我们需要一个专门的函数来检查 `NaN` 值。标准库提供了这样的一个函数，在 `math` 模块中：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Conclusion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We discussed using `NaN` values in the Python standard library. This knowledge
    should be enough for you to work with `NaN` values in the standard library tools.
    Numerical frameworks can implement their own `NaN` values, however. An example
    is NumPy’s `np.nan`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了在 Python 标准库中使用 `NaN` 值。这些知识应该足够你在标准库工具中处理 `NaN` 值。然而，数值框架可以实现自己的 `NaN`
    值。例如 NumPy 的 `np.nan`。
- en: As already mentioned, I don’t believe that as a Python programmer, you will
    frequently use these two `NaN` sentinels from the standard library. You should,
    however, know how to work with them anyway, as there may be times when you need
    to use them, even if you are using a numerical framework like NumPy. Also, I don’t
    think installing NumPy only to use `np.nan` would be a wise thing to do. I hope
    this article will help you handle such situations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前提到的，我不认为作为 Python 程序员，你会频繁使用标准库中的这两个 `NaN` 哨兵。然而，你应该知道如何处理它们，因为有时你可能需要使用它们，即使你在使用像
    NumPy 这样的数值框架。此外，我认为仅为了使用 `np.nan` 而安装 NumPy 并不明智。我希望这篇文章能帮助你处理这样的情况。
- en: Footnotes
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: '¹ It’s worth noting that, line `None`, `NaN` values are sentinel values:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 值得注意的是，像 `None` 一样，`NaN` 值也是哨兵值：
- en: '[## Sentinel value — Wikipedia'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 哨兵值 — 维基百科'
- en: In computer programming, a sentinel value (also referred to as a flag value,
    trip value, rogue value, signal value, or…
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在计算机编程中，哨兵值（也称为标志值、三值、恶意值、信号值或…
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/Sentinel_value?source=post_page-----798d9ed946c0--------------------------------)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[en.wikipedia.org](https://en.wikipedia.org/wiki/Sentinel_value?source=post_page-----798d9ed946c0--------------------------------)'
- en: ² An example is `np.nan` and Numpy functions that work with data with `NaN`
    values, such as `np.nansum()`, `np.nanmean()`, `np.nanmax()`, `np.nanmin()` and
    `np.nanstd()`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ² 一个例子是 `np.nan` 和处理 `NaN` 值数据的 Numpy 函数，如 `np.nansum()`、`np.nanmean()`、`np.nanmax()`、`np.nanmin()`
    和 `np.nanstd()`。
- en: '³ The function’s docstring contains a number of doctests; you can read about
    this fantastic documentation-testing tool, which can also be used for unit testing,
    in the following article:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ³ 函数的文档字符串包含多个 doctest；你可以在以下文章中阅读关于这个出色的文档测试工具的信息，它也可以用于单元测试：
- en: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----798d9ed946c0--------------------------------)
    [## Python Documentation Testing with doctest: The Easy Way'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----798d9ed946c0--------------------------------)
    [## 使用 doctest 进行 Python 文档测试：简便方法'
- en: doctest allows for documentation, unit and integration testing, and test-driven
    development.
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: doctest 允许进行文档、单元和集成测试，以及测试驱动开发。
- en: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----798d9ed946c0--------------------------------)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----798d9ed946c0--------------------------------)'
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在 [这里](https://medium.com/@nyggus) 查看。如果你想加入
    Medium，请使用我下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----798d9ed946c0--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----798d9ed946c0--------------------------------)
    [## 使用我的推荐链接加入 Medium - Marcin Kozak'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的一部分会员费会转给你阅读的作者，并且你可以完全访问所有故事……
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----798d9ed946c0--------------------------------)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----798d9ed946c0--------------------------------)'
