- en: 'Python Type Hinting in Data Science Projects: A Must, a Maybe, or a No-No?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 类型提示在数据科学项目中：必须、可能还是不推荐？
- en: 原文：[https://towardsdatascience.com/python-type-hinting-in-data-science-projects-a-must-a-maybe-or-a-no-no-d76b8a53e37b](https://towardsdatascience.com/python-type-hinting-in-data-science-projects-a-must-a-maybe-or-a-no-no-d76b8a53e37b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-type-hinting-in-data-science-projects-a-must-a-maybe-or-a-no-no-d76b8a53e37b](https://towardsdatascience.com/python-type-hinting-in-data-science-projects-a-must-a-maybe-or-a-no-no-d76b8a53e37b)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Should we use type hints in data-science projects realized in Python?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们应该在 Python 实现的数据科学项目中使用类型提示吗？
- en: '[](https://medium.com/@nyggus?source=post_page-----d76b8a53e37b--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----d76b8a53e37b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d76b8a53e37b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d76b8a53e37b--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----d76b8a53e37b--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----d76b8a53e37b--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----d76b8a53e37b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d76b8a53e37b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d76b8a53e37b--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----d76b8a53e37b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d76b8a53e37b--------------------------------)
    ·6 min read·Sep 26, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d76b8a53e37b--------------------------------)
    ·阅读时间 6 分钟·2023年9月26日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/fb8966e277eba25a6d58485fa18f1c9d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb8966e277eba25a6d58485fa18f1c9d.png)'
- en: Whether or not you’re a happy user of type hinting in Python, you do have to
    know these concepts and how to use them. Photo by [Kerin Gedge](https://unsplash.com/@keringedge?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否是 Python 类型提示的满意用户，你都需要了解这些概念以及如何使用它们。照片由 [Kerin Gedge](https://unsplash.com/@keringedge?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Should we use type hints in data-science projects realized in Python?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在 Python 实现的数据科学项目中使用类型提示吗？
- en: 'Want a disclaimer? Here you are: It depends. In Proof-of-Concept types of projects,
    it’s often unnecessary. In production projects, at least in 2023, it rather is.
    But again, that depends.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想要免责声明吗？请看这里：这要看情况。在概念验证类型的项目中，通常是不必要的。在生产项目中，至少在 2023 年，这还是有必要的。但再次说明，这要看情况。
- en: I will try to be as concise as possible, and get to the point as fast as possible.
    I don’t want to spend hours on considering all pros and cons, for the simple reason
    that the data-science market has quite clear expectations of our work. My goal
    is to present these expectations to you, not to discuss them in detail.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我会尽量简明扼要，尽快切入重点。我不想花费数小时考虑所有的利弊，原因很简单，因为数据科学市场对我们的工作有明确的期望。我的目标是向你展示这些期望，而不是详细讨论它们。
- en: 'Let’s start by stating the obvious. First of all, type hints in Python are
    *optional*. Optional like in *you don’t have to use type hints in Python*. If
    so, there’s only one answer to our main question: You can but no, you don’t have
    to use type hints in data science projects!'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从显而易见的事情开始。首先，Python 中的类型提示是 *可选的*。可选的意思是 *你不必在 Python 中使用类型提示*。如果是这样，那么我们主要问题的唯一答案是：你可以，但不，您不必在数据科学项目中使用类型提示！
- en: So… that’s it? Are we done here?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么…就这样吗？我们完成了吗？
- en: Wait a second. We did state the obvious, but we did not touch upon anything
    beyond the obvious.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下。我们确实陈述了显而易见的内容，但我们并没有触及任何超出显而易见的内容。
- en: Should we use type hints in data-science projects realized in Python? It depends.
    In Proof-of-Concept types of projects, it’s not necessary. In production projects,
    at least in 2023, it rather is.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们应该在 Python 实现的数据科学项目中使用类型提示吗？这要看情况。在概念验证类型的项目中，这并不是必要的。在生产项目中，至少在 2023 年，这还是有必要的。
- en: 'An example. Imagine you’re a Python developer working for a private company.
    The company has its own rules and recommendations for Python development. One
    of the rules is: Use type hints. That’s it — irrespective of what you prefer,
    you have to use them. Had this been a recommendation, you wouldn’t have had to
    use them. However, since this is a rule, you have to use *optional* type hints.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子。假设你是一个在私人公司工作的 Python 开发者。公司有自己关于 Python 开发的规则和建议。其中一条规则是：使用类型提示。就这么简单——不管你偏好什么，你都必须使用它们。如果这只是一个建议，你可能不需要使用它们。然而，由于这是一个规则，你必须使用*可选*类型提示。
- en: Okay, good point. But we’re talking about type hints in data science projects
    in general, not in a particular company. So, optional, right? You don’t have to
    use them?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这点说得很好。但我们讨论的是一般数据科学项目中的类型提示，而不是某个特定公司里的情况。那么，是可选的，对吗？你不一定非得使用它们？
- en: Before answering, let me tell you how, when and why I use type hints in Python.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在回答之前，让我告诉你我在 Python 中使用类型提示的方式、时间和原因。
- en: 'I wrote what I think about type hints here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里写了我对类型提示的看法：
- en: '[](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----d76b8a53e37b--------------------------------)
    [## Python’s Type Hinting: Friend, Foe, or Just a Headache?'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----d76b8a53e37b--------------------------------)
    [## Python 的类型提示：朋友、敌人还是仅仅是个麻烦？'
- en: Type hinting’s popularity is increasing in the Python community. Where will
    this lead us? What can we do to use it…
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型提示在 Python 社区中的受欢迎程度不断上升。这会把我们带向何方？我们可以做些什么来使用它……
- en: betterprogramming.pub](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----d76b8a53e37b--------------------------------)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[betterprogramming.pub](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----d76b8a53e37b--------------------------------)'
- en: To put it short, I try to use type hints in a way that makes the code more readable.
    Also, thanks to type hints, static checkers can help keep code correct.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我尝试以一种使代码更具可读性的方法来使用类型提示。此外，多亏了类型提示，静态检查器可以帮助保持代码的正确性。
- en: We should remember that in the heart of Python lies dynamic typing.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们应该记住，Python 的核心在于动态类型。
- en: At the same time, we should remember that in the heart of Python lies dynamic
    typing. And when we put much effort on implementing type hints, we’re sort of
    taking out this dynamic typing from Python. And what’s left? What’s left is Python
    without its heart.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们应该记住，Python 的核心在于动态类型。当我们在实现类型提示上花费大量精力时，我们有点像是在剥离 Python 的动态类型。那么剩下的是什么？剩下的就是没有核心的
    Python。
- en: When we put much effort on implementing type hints, we’re sort of taking out
    this dynamic typing from Python. And what’s left? What’s left is Python without
    its heart.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我们在实现类型提示上花费大量精力时，我们有点像是在剥离 Python 的动态类型。那么剩下的是什么？剩下的就是没有核心的 Python。
- en: 'The way I see this, there are situations in which type hints should *not* be
    used. Like quick prototyping. I do that very often: in order to see how something
    could work, I implement a simple prototype. Sometimes I may use some type hints,
    just to show the required types of arguments, especially if they are to be some
    custom types. Remember, I am talking about prototyping, and if it’s important
    to state that a particular function returns an object of `dict[str, tuple[int,
    str]]`, then I do state it in a type hint. Not make static checkers happy, but
    to show what needs to be shown.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，有些情况下不应该使用类型提示。例如快速原型设计。我经常这样做：为了看看某些东西如何工作，我实现一个简单的原型。有时我可能会使用一些类型提示，只是为了展示所需的参数类型，尤其是当这些类型是自定义类型时。记住，我说的是原型设计，如果说明一个特定的函数返回`dict[str,
    tuple[int, str]]`类型的对象很重要，那我会在类型提示中说明它。不是为了让静态检查器满意，而是为了展示需要展示的内容。
- en: But more often than not, I don’t care during prototyping about type hints. The
    time will come for them. What’s important for now is that the code would work
    dynamically. This is when static types are *not* that useful.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但在原型设计阶段，我更常忽略类型提示。到时自然会用到它们。现在重要的是代码能够动态运行。这时静态类型*并不*那么有用。
- en: 'But when I write a data-science software product, these days I always use type
    hints. I will be honest with you. Yes, they can (dynamically) help catch some
    static errors — but they can be quite a hindrance. Sometimes I feel implementing
    good type hints takes more time than everything else taken together. The code
    is much longer and much more complicated. In advanced projects, good type hints
    can be difficult to implement, mainly due to the complexity of the code. What
    makes things worse is that many type checkers are still far from optimal, showing
    errors where type hints are correct. Sure, you can keep type hints overly simplistic
    (`x: dict`), but usually you shouldn’t do that. In a production project, you should
    go into more detail, so instead of doing this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '但当我编写数据科学软件产品时，现在我总是使用类型提示。我会坦白地说。是的，它们可以（动态地）帮助捕捉一些静态错误——但它们也可能成为很大的障碍。有时候，我觉得实现良好的类型提示比其他所有工作加起来还要花费更多的时间。代码会变得更长、更复杂。在高级项目中，良好的类型提示可能很难实现，主要是由于代码的复杂性。更糟糕的是，许多类型检查器仍然远未达到最佳状态，可能会在类型提示正确时显示错误。确实，你可以保持类型提示过于简单（`x:
    dict`），但通常不应该这样做。在生产项目中，你应该更详细，因此，不应做如下操作：'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'you may need to do, for instance, something like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，你可能需要做如下操作：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'or, equivalently:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，相当于：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Without type hints, the code becomes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 没有类型提示，代码变成了：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Which is better? You won’t be surprised to see my answer: Well, that depends.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种更好？你不会惊讶于我的答案：好吧，这要看情况。
- en: 'Let’s summarize the options provided above:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下上述提供的选项：
- en: 'No type hints: fast coding based on duck typing.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无类型提示：基于鸭子类型的快速编码。
- en: 'Overly simplified type hints: only a little slower coding, but the advantages
    of such type hinting are rather minor.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过于简化的类型提示：编码稍慢，但这种类型提示的优势相当有限。
- en: 'More detailed type hints: much help from static checkers at the cost of much
    slower coding, but also a much bigger risk for static checkers to fail; usually,
    duck typing becomes hidden if not forgotten; less readable code.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更详细的类型提示：静态检查器提供了很大的帮助，但编码速度大幅降低，同时静态检查器失败的风险也大大增加；通常，鸭子类型变得隐蔽，如果不是被遗忘的话；代码可读性下降。
- en: 'More detailed type hints based on type aliases: like above, but the code is
    much more readable.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于类型别名的更详细类型提示：与上述类似，但代码更易读。
- en: 'Extremely detailed type hints, to the very deepest level of detail: for me,
    definitely too fanatical approach without advantages and plenty of disadvantages,
    the same as for detailed type hinting — but in an exaggerated form.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极其详细的类型提示，细节到最深层次：对我来说，绝对是一种过于狂热的方法，没有优势且有许多缺点，和详细的类型提示一样——但在一种夸张的形式中。
- en: Dedicated tools such as `[pylance](https://pypi.org/project/pylance/)` or `[typeguard](https://pypi.org/project/typeguard/)`.
    Do remember, however, that such tools may lead to runtime efficiency costs, if
    you decide to use them in for runtime type checking — while type hinting itself
    is a static checking tool that has no effect on runtime.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用工具如 `[pylance](https://pypi.org/project/pylance/)` 或 `[typeguard](https://pypi.org/project/typeguard/)`。但请记住，这些工具可能会导致运行时效率成本，如果你决定在运行时类型检查中使用它们——而类型提示本身是一个静态检查工具，对运行时没有影响。
- en: As often, the best choice lies somewhere in between those options, in a place
    you would call a golden choice. But where this choice lies depends on several
    aspects of the projects, such as expectations from the client, the company, the
    project leader, and — most of all — the type of the project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，最佳选择通常在这些选项之间的某个地方，你可以称之为黄金选择。但这个选择的位置取决于项目的多个方面，如客户、公司、项目负责人以及——最重要的——项目的类型。
- en: While prototyping, you will often choose not to use type hints, especially when
    you’re not a devoted fan of type hinting. When you are, however, more often than
    not you will find yourself using them — unless the deadline is too close to spend
    even an additional unnecessary minute. Is it unnecessary? Well, you already know
    the answer… It depends.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在原型设计过程中，你通常会选择不使用类型提示，特别是当你不是类型提示的忠实粉丝时。然而，当你是时，你会发现自己更经常地使用它们——除非截止日期太紧迫，甚至无法再多花一分多余的时间。那是多余的吗？好吧，你已经知道答案了……这要看情况。
- en: The above approach is what I follow in my daily data science work. Some details
    vary from project to project, but the generalities are almost always the same.
    I suppose these are the rules that most companies conducting data-science projects
    follow, and so you may wish to follow these rules as well — unless the company
    or project rules are strict. Then you simply don’t have options to choose from.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法是我在日常数据科学工作中遵循的做法。一些细节因项目而异，但大体上几乎都是一样的。我认为这些是大多数进行数据科学项目的公司遵循的规则，因此你也可能希望遵循这些规则——除非公司或项目的规则非常严格。否则，你可能没有选择的余地。
- en: 'Whether or not you’re a happy type-hinting user, you should know how it works
    and how to use it. These days, a Python developer who does not know how to use
    type hints… is not a Python developer anymore. Accept that: you must know type
    hinting, and you must know it well.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否是一个快乐的类型提示用户，你都应该了解它是如何工作的以及如何使用它。如今，一个不知道如何使用类型提示的 Python 开发者… 已经不再是 Python
    开发者了。接受这一点：你必须了解类型提示，并且要了解得很透彻。
- en: Do remember, however, that the Python type-hinting system is helpful only to
    some point of complexity. Even if you, as the code’s author, understand all the
    nuances of complex type hints you implemented, other developers will likely need
    to spend much time to understand the code. If I was forced to cross this line,
    I would’ve thought that maybe it was time to change the language. Being forced
    to go that far, I’d likely think a static-typing language like Go would do better.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不过请记住，Python 的类型提示系统仅在一定复杂度下才有帮助。即使你作为代码的作者了解你实现的复杂类型提示的所有细节，其他开发者也可能需要花费很多时间来理解代码。如果我被迫越过这一界限，我可能会认为是时候换一种语言了。被迫走到这一步，我会认为像
    Go 这样的静态类型语言可能会更好。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你也可能喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)查看。如果你想加入 Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----d76b8a53e37b--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入 Medium - Marcin Kozak](https://medium.com/@nyggus/membership?source=post_page-----d76b8a53e37b--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 的会员，你的一部分会员费用会流向你阅读的作者，你可以完全访问每一个故事…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----d76b8a53e37b--------------------------------)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----d76b8a53e37b--------------------------------)'
