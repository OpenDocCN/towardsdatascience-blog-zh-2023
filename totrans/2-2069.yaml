- en: The Top 3 SQL Skills Needed to Get to the Next Round
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 晋级下一轮所需的前三种 SQL 技能
- en: 原文：[https://towardsdatascience.com/the-top-3-sql-skills-needed-to-get-to-the-next-round-51ad1699a213](https://towardsdatascience.com/the-top-3-sql-skills-needed-to-get-to-the-next-round-51ad1699a213)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-top-3-sql-skills-needed-to-get-to-the-next-round-51ad1699a213](https://towardsdatascience.com/the-top-3-sql-skills-needed-to-get-to-the-next-round-51ad1699a213)
- en: Technical Interview Help for Data Professionals
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据专业人士的技术面试帮助
- en: '[](https://medium.com/@violante.andre?source=post_page-----51ad1699a213--------------------------------)[![Andre
    Violante](../Images/0382695157126b7ed742649d348cae61.png)](https://medium.com/@violante.andre?source=post_page-----51ad1699a213--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51ad1699a213--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51ad1699a213--------------------------------)
    [Andre Violante](https://medium.com/@violante.andre?source=post_page-----51ad1699a213--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@violante.andre?source=post_page-----51ad1699a213--------------------------------)[![Andre
    Violante](../Images/0382695157126b7ed742649d348cae61.png)](https://medium.com/@violante.andre?source=post_page-----51ad1699a213--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51ad1699a213--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51ad1699a213--------------------------------)
    [Andre Violante](https://medium.com/@violante.andre?source=post_page-----51ad1699a213--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51ad1699a213--------------------------------)
    ·6 min read·Aug 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51ad1699a213--------------------------------)
    ·阅读时间 6 分钟·2023 年 8 月 28 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/584c4b12a0d4da972d8f858eddd3f5f9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/584c4b12a0d4da972d8f858eddd3f5f9.png)'
- en: 'Picture Credit: [Arnold Francisa at Unsplash](https://unsplash.com/@clark_fransa)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Arnold Francisa at Unsplash](https://unsplash.com/@clark_fransa)
- en: If you’re aspiring and currently interviewing for roles such as data scientists,
    data analysts, and data engineers then you are likely to encounter one or more
    technical interviews that require live coding, usually involving SQL. While later
    interviews might require different programming languages like Python, which is
    common in the data domain, let’s focus on the typical SQL questions that I’ve
    encountered during these interviews. For the purpose of this discussion, I’ll
    assume that you’re already familiar with fundamental SQL concepts such as `SELECT`,
    `FROM`, `WHERE`, as well as aggregate functions like `SUM` and `COUNT`. Let’s
    get into the specifics!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有志于从事数据科学家、数据分析师和数据工程师等角色，并且正在面试，那么你可能会遇到一个或多个需要现场编码的技术面试，通常涉及 SQL。虽然后续面试可能需要其他编程语言，如
    Python，这在数据领域很常见，但让我们专注于我在这些面试中遇到的典型 SQL 问题。为了讨论的目的，我会假设你已经熟悉基础的 SQL 概念，如 `SELECT`、`FROM`、`WHERE`
    以及聚合函数如 `SUM` 和 `COUNT`。让我们进入具体细节吧！
- en: 1\. Mastering Joins and Table Types
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 掌握连接和表类型
- en: 'Without a doubt, the most common SQL question is around table joins. It might
    seem too obvious, but every interview I’ve participated in has centered around
    this topic. You should feel at ease with inner joins and left joins. Additionally,
    proficiency in handling self-joins and unions is valuable. Equally important is
    the ability to execute these joins across different table types, particularly
    ***fact*** and ***dimension*** tables. Here are my loose definitions for these
    two terms:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，最常见的 SQL 问题是关于表连接的。这个问题可能看起来太显而易见，但我参与过的每一次面试都围绕这个话题展开。你应该对内连接和左连接感到游刃有余。此外，处理自连接和并集的熟练程度也是非常重要的。执行这些连接操作时，特别是在***事实表***和***维度表***等不同表类型之间的能力同样重要。以下是我对这两个术语的宽松定义：
- en: '***Fact Table:*** A table containing numerous rows but relatively few attributes
    or columns. Imagine an example where an online retailer maintains an “*orders*”
    table with columns like: `date, customer_id, order_id, product_id, units, amount`.
    This table has few attributes but contains a huge volume of records.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '***事实表：*** 一种包含大量行但属性或列相对较少的表。比如，在线零售商维护一个“*订单*”表，包含如下列：`date, customer_id,
    order_id, product_id, units, amount`。这个表属性较少，但记录量巨大。'
- en: '***Dimension Table:*** A dimensional table with fewer rows yet many attributes.
    For instance, the same online retailer’s “*customer*” table might hold one row
    per customer, featuring attributes such as `customer_id, first_name, last_name,
    ship_street_addr, ship_zip_code` and more.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '***维度表：*** 具有较少行但许多属性的维度表。例如，某在线零售商的“*customer*”表可能包含每个客户的一行，具有`customer_id,
    first_name, last_name, ship_street_addr, ship_zip_code`等属性。'
- en: 'Understanding these two primary table types is important. It’s crucial to grasp
    why and how to merge fact and dimension tables to ensure accurate results. Let’s
    consider a real-world example: the interview question presents two tables (*“orders”*
    and *“customer”*) and asks:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这两种主要表类型是很重要的。掌握如何合并事实表和维度表以确保准确结果是至关重要的。让我们考虑一个实际的例子：面试问题提出了两个表（*“orders”*和*“customer”*）并询问：
- en: How many customers have purchased at least 3 units in their lifetime and have
    a shipping zip code of 90210?
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有多少客户在其一生中至少购买了3个单位并且邮政编码为90210？
- en: 'By just running an inner join followed by counts, sums, and / or filters might
    yield huge discrepancies due to overcounting. Even within this seemingly straightforward
    question, various parts require careful thought. To effectively communicate your
    thought process to the interviewer, think these items aloud:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅运行内连接后再进行计数、求和和/或过滤可能会由于重复计算产生巨大的差异。即使在这个看似简单的问题中，许多部分也需要仔细思考。为了有效地将你的思路传达给面试官，请将这些事项考虑清楚并说出来：
- en: Which table encompasses ALL customers? The *“orders”* fact table only includes
    customers with confirmed purchases, whereas the *“customer”* dimension table includes
    all customers, including those who’ve registered but haven’t purchased. A quick
    `count(distinct )` comparison would show the table with more unique customers.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个表包含所有客户？*“orders”*事实表仅包括已确认购买的客户，而*“customer”*维度表包括所有客户，包括那些已注册但未购买的客户。通过快速的`count(distinct
    )`对比，可以看到哪个表有更多独特的客户。
- en: Calculating the sum or count of units bought by each customer requires an aggregate
    function with a `GROUP BY` clause.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算每个客户购买的单位总数或计数需要使用带有`GROUP BY`子句的聚合函数。
- en: A join with the *“customer”* table is needed to narrow down customers in zip
    code 90210\. When using joins I would recommend creating aliases for tables which
    then may require you to add that alias in the select statement with the associated
    attribute.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要与*“customer”*表进行连接，以缩小邮政编码为90210的客户范围。在使用连接时，我建议为表创建别名，这可能需要你在select语句中添加该别名以及相关属性。
- en: Having outlined the thought process, let’s translate it into code!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 概述了思路后，让我们将其转化为代码！
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This solution uses a Common Table Expression (CTE), but remember, there are
    a lot of different ways to achieve the same outcome in SQL. As long as you arrive
    at the correct result and can explain your approach, you’re on the right track.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案使用了公共表表达式（CTE），但请记住，有很多不同的方法可以在SQL中实现相同的结果。只要你能得到正确的结果并且能够解释你的方法，你就走在了正确的道路上。
- en: 2\. Tackling Complexity with Subqueries, Temp Tables, and CTEs
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 使用子查询、临时表和CTE处理复杂性
- en: 'Like the previous example, almost every SQL coding interview will require multi-step
    procedures. This is where subqueries, temporary tables, and CTEs are beneficial.
    Proficiency in these techniques or at least familiarity with them is a must. Let’s
    explore each approach:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的例子一样，几乎每次SQL编码面试都需要多步骤程序。这时候子查询、临时表和CTE就非常有用。熟练掌握这些技术或至少对它们有所了解是必须的。让我们深入探讨每种方法：
- en: '**Subqueries:** These nested queries involve constructs like `select * from
    (select * from table)` or filtering `select * from table1 where table1_value <
    (select max(table2_value) from table2)`, encompassing inner and outer queries.
    Subqueries are useful, but their syntax can become difficult or messy for both
    code writers and readers. For complex scenarios, avoid excessive subqueries.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子查询：**这些嵌套查询涉及像`select * from (select * from table)`或过滤`select * from table1
    where table1_value < (select max(table2_value) from table2)`这样的构造，包含内查询和外查询。子查询是有用的，但它们的语法可能对编写者和阅读者都变得困难或混乱。对于复杂场景，避免过多的子查询。'
- en: '**Temporary Tables:** As the name suggests, temporary tables only persist for
    a session’s duration. You can create them incrementally, building one after another
    to aid in troubleshooting or logical sequencing. They are helpful for breaking
    down multifaceted problems into smaller, more manageable steps.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**临时表：** 正如其名称所示，临时表仅在会话期间存在。你可以逐步创建它们，一个接一个地构建，以帮助故障排除或逻辑排序。它们有助于将复杂问题分解成较小、更易管理的步骤。'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Common Table Expressions (CTEs):** As demonstrated in the joins example,
    CTEs offer a flexible way to structure queries. They resemble temporary tables
    but don’t persist beyond the following `SELECT` statement. This requires CTEs
    to be “chained” (see below code example) if you have many steps. When chaining
    CTEs together, remember that only one `WITH` statement is used, followed by the
    CTEs, and finally, the main query. Also, the semicolon comes after the final `SELECT`
    statement within the CTE chain. CTEs can’t be referenced beyond this point due
    to their limited scope.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共表表达式（CTE）：** 如连接示例所示，CTE 提供了一种灵活的查询结构方式。它们类似于临时表，但不会在下一个`SELECT`语句之后持续存在。这要求将CTE“链式”连接（见下方代码示例），如果有很多步骤的话。在链式连接CTE时，请记住只使用一个`WITH`语句，后接CTE，最后是主查询。此外，分号位于CTE链中的最终`SELECT`语句之后。由于其有限的作用域，CTE
    不能在这一点之外被引用。'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In practice, once you get hired, you can decide on the best approach or what
    others are using. Currently, CTEs appear to be the more popular choice. Given
    that interview scenarios usually don’t necessitate chained CTEs, incorporating
    a CTE should prove relatively straightforward and effective.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，一旦你被聘用，你可以决定最佳的方法或其他人正在使用的方案。目前，CTE 似乎是更受欢迎的选择。鉴于面试情境通常不需要链式CTE，融入CTE 应该相对简单且有效。
- en: 3\. Navigating Window Functions for Advanced Analysis
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 高级分析中的窗口函数导航
- en: A recurring topic that arises in nearly every interview pertains to window functions.
    The [PostgreSQL documentation](https://www.postgresql.org/docs/9.1/tutorial-window.html)
    effectively explains window functions and highlights the difference compared to
    group by operations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每次面试中都会出现的一个反复话题是窗口函数。 [PostgreSQL 文档](https://www.postgresql.org/docs/9.1/tutorial-window.html)
    有效地解释了窗口函数，并突出了与分组操作的区别。
- en: A window function performs a calculation across a set of table rows that are
    somehow related to the current row. This is comparable to the type of calculation
    that can be done with an aggregate function. But unlike regular aggregate functions,
    use of a window function does not cause rows to become grouped into a single output
    row — the rows retain their separate identities. Behind the scenes, the window
    function is able to access more than just the current row of the query result.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 窗口函数在一组与当前行相关的表行上执行计算。这类似于可以通过聚合函数完成的计算。但与常规的聚合函数不同，使用窗口函数不会将行分组为单个输出行——行仍然保持各自的独立性。在幕后，窗口函数能够访问的不仅仅是查询结果的当前行。
- en: The key is in the final two sentences. The non-grouping of rows and the window
    function accesses more than the current row behind the scenes. Interview questions
    often span a range from theoretical, such as “What types of window functions have
    you used?” to coding questions where the use of window functions is needed. Consider
    scenarios like “show me with the three highest earning employees within each department”
    or “show the three most recent items purchased by each customer.” In my experience,
    the most common window functions encompass `rank()`, `row_number()`, and `dense_rank()`
    all using the `OVER` function. It’s worth noting that most aggregate functions
    can be used alongside the `OVER` function. For a good illustration of the differences
    between rank functions you can see this [example on Stack Overflow](https://stackoverflow.com/questions/7747327/sql-rank-versus-row-number).
    Also, this [Window Functions Cheat Sheet](https://learnsql.com/blog/sql-window-functions-cheat-sheet/Window_Functions_Cheat_Sheet_Letter.pdf)
    by LearnSQL is a great visual to see the different types of functions as well
    as some output visuals.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于最后两句话。行的非分组和窗口函数在幕后访问当前行以上的更多内容。面试问题通常涵盖从理论性问题，例如“你使用过哪些类型的窗口函数？”到需要使用窗口函数的编码问题。考虑诸如“显示每个部门中收入最高的三名员工”或“显示每位客户购买的最新三项商品”等场景。根据我的经验，最常见的窗口函数包括`rank()`、`row_number()`和`dense_rank()`，它们都使用`OVER`函数。值得注意的是，大多数聚合函数可以与`OVER`函数一起使用。有关排名函数差异的良好说明可以参见这个
    [Stack Overflow 示例](https://stackoverflow.com/questions/7747327/sql-rank-versus-row-number)。此外，LearnSQL
    提供的这个 [窗口函数备忘单](https://learnsql.com/blog/sql-window-functions-cheat-sheet/Window_Functions_Cheat_Sheet_Letter.pdf)
    是一个很好的视觉参考，展示了不同类型的函数以及一些输出视觉效果。
- en: Conclusion
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: These are the top three SQL skills that interviewers have repeatedly inquired
    about over the past month during coding interviews. Proficiency in these areas
    should easily help you navigate almost all SQL interview scenarios.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是过去一个月中面试官在编码面试中反复询问的前三大 SQL 技能。掌握这些领域应能轻松帮助你应对几乎所有 SQL 面试场景。
- en: 'Finally, here’s my last tip: If you find yourself in a coding interview and
    you’re unsure about syntax or terminology, jot down a step-by-step outline of
    your problem-solving process. Emphasize your thought process and creativity, as
    they often outweigh strict syntax. Best of luck in your upcoming data-related
    interviews!'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是我的最后一个建议：如果你在编码面试中对语法或术语不确定，请写下逐步的大纲来展示你的问题解决过程。强调你的思维过程和创造力，因为它们往往比严格的语法更重要。祝你在即将到来的数据相关面试中好运！
