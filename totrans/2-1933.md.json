["```py\nimport streamlit as st\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport docx\n```", "```py\nst.set_page_config(layout='wide')\n```", "```py\nst.title('Streamlit Data Report Generator')\n```", "```py\ndf = pd.read_csv('Xeek_Well_15-9-15.csv')\n```", "```py\n report_title = col1.text_input(\"Enter report title\")\n    report_author = col1.text_input(\"Enter the report author's name\")\n    report_date = col2.date_input(\"Select a date for the report\")\n    report_client = col2.text_input(\"Enter the client's name\")\n```", "```py\nif st.form_submit_button('Generate'):\n        generate_report(report_title)\n```", "```py\nwith st.form('report'):\n    st.write(\"### Report Details\")\n    col1, col2 = st.columns(2, gap='large')\n\n    report_title = col1.text_input(\"Enter report title\")\n    report_author = col1.text_input(\"Enter the report author's name\")\n    report_date = col2.date_input(\"Select a date for the report\")\n    report_client = col2.text_input(\"Enter the client's name\")\n\n    if st.form_submit_button('Generate'):\n        generate_report(report_title)\n```", "```py\nwith st.form('report'):\n    st.write(\"### Report Details\")\n    col1, col2 = st.columns(2, gap='large')\n\n    report_title = col1.text_input(\"Enter report title\")\n    report_author = col1.text_input(\"Enter the report author's name\")\n    report_date = col2.date_input(\"Select a date for the report\")\n    report_client = col2.text_input(\"Enter the client's name\")\n\n    sect_col1, sect_col2 = st.columns(2, gap='large')\n\n    sect_col1.write(\"### Section Details\")\n    section_title = sect_col1.text_input(\"Enter section title\")\n    section_text_summary = sect_col1.text_area(\"Section Summary\")\n```", "```py\nwith st.form('report'):\n    st.write(\"### Report Details\")\n    col1, col2 = st.columns(2, gap='large')\n\n    report_title = col1.text_input(\"Enter report title\")\n    report_author = col1.text_input(\"Enter the report author's name\")\n    report_date = col2.date_input(\"Select a date for the report\")\n    report_client = col2.text_input(\"Enter the client's name\")\n\n    sect_col1, sect_col2 = st.columns(2, gap='large')\n\n    sect_col1.write(\"### Section Details\")\n    section_title = sect_col1.text_input(\"Enter section title\")\n    section_text_summary = sect_col1.text_area(\"Section Summary\")\n\n    data_features = df.columns\n\n    sect_col2.write(\"### Data Summary\")\n    data_to_summarise = sect_col2.multiselect(\"Select features to include in statistical summary\", \n                                              options=data_features)\n\n    if st.form_submit_button('Generate'):\n        generate_report(report_title)\n```", "```py\ndef create_df_stats_summary(dataframe, features_to_include):\n    sub_df = dataframe[features_to_include].copy()\n    return sub_df.describe()\n```", "```py\ndef add_df_to_docx(doc, dataframe):\n    # Reset the index and get the new shape\n    dataframe = dataframe.reset_index()\n    num_rows, num_cols = dataframe.shape\n\n    # Add a table to the document with the necessary number \n    # of rows and columns\n    table = doc.add_table(rows=num_rows + 1, cols=num_cols)\n\n    # Add the header row\n    for i, col in enumerate(dataframe.columns):\n        table.cell(0, i).text = str(col)\n\n    # Add the data rows\n    for i, row in dataframe.iterrows():\n        for j, value in enumerate(row):\n            table.cell(i + 1, j).text = str(value)\n\n    return table\n```", "```py\nwith st.form('report'):\n    st.write(\"### Report Details\")\n    col1, col2 = st.columns(2, gap='large')\n\n    report_title = col1.text_input(\"Enter report title\")\n    report_author = col1.text_input(\"Enter the report author's name\")\n    report_date = col2.date_input(\"Select a date for the report\")\n    report_client = col2.text_input(\"Enter the client's name\")\n\n    sect_col1, sect_col2 = st.columns(2, gap='large')\n\n    sect_col1.write(\"### Section Details\")\n    section_title = sect_col1.text_input(\"Enter section title\")\n    section_text_summary = sect_col1.text_area(\"Section Summary\")\n\n    data_features = df.columns\n\n    sect_col2.write(\"### Data Summary\")\n    data_to_summarise = sect_col2.multiselect(\"Select features to include in statistical summary\", \n                                              options=data_features)\n\n    st.write(\"### Scatterplot Setup\")\n    sub_col1, sub_col2, sub_col3 = st.columns(3)\n\n    chart_x = sub_col1.selectbox('X axis', options=data_features)\n    chart_y = sub_col2.selectbox('Y axis', options=data_features)\n    chart_z = sub_col3.selectbox('Z axis', options=data_features)\n\n    if st.form_submit_button('Generate'):\n        generate_report(report_title)\n```", "```py\ndef create_scatterplot(dataframe, xaxis, yaxis, colour, plot_name,\n                       xaxis_scale= None, yaxis_scale=None):\n    fig, ax = plt.subplots()\n\n    ax.scatter(dataframe[xaxis], dataframe[yaxis],\n                c=dataframe[colour], cmap='viridis')\n\n    ax.set_xlabel(xaxis)\n    ax.set_ylabel(yaxis)\n\n    if xaxis_scale is not None:\n        ax.set_xlim(xmin=xaxis_scale[0], xmax=xaxis_scale[1])\n\n    if yaxis_scale is not None:\n        ax.set_ylim(ymin=yaxis_scale[0], ymax=yaxis_scale[1])\n\n    filename = f'{plot_name}.png'\n    plt.savefig(filename)\n```", "```py\nwith st.form('report'):\n    st.write(\"### Report Details\")\n    col1, col2 = st.columns(2, gap='large')\n\n    report_title = col1.text_input(\"Enter report title\")\n    report_author = col1.text_input(\"Enter the report author's name\")\n    report_date = col2.date_input(\"Select a date for the report\")\n    report_client = col2.text_input(\"Enter the client's name\")\n\n    st.write(\"---\")\n    sect_col1, sect_col2 = st.columns(2, gap='large')\n\n    sect_col1.write(\"### Section Details\")\n    section_title = sect_col1.text_input(\"Enter section title\")\n    section_text_summary = sect_col1.text_area(\"Section Summary\")\n\n    data_features = df.columns\n\n    sect_col2.write(\"### Data Summary\")\n    data_to_summarise = sect_col2.multiselect(\"Select features to include in statistical summary\", \n                                              options=data_features)\n\n    st.write(\"---\")\n\n    st.write(\"### Scatterplot Setup\")\n    sub_col1, sub_col2, sub_col3 = st.columns(3)\n\n    chart_x = sub_col1.selectbox('X axis', options=data_features)\n    chart_y = sub_col2.selectbox('Y axis', options=data_features)\n    chart_z = sub_col3.selectbox('Z axis', options=data_features)\n\n    if st.form_submit_button('Generate'):\n        generate_report(report_title)\n```", "```py\ndef generate_report(report_title, report_author, report_date, report_client,\n                    section_title=None, \n                    section_text_summary=None, \n                    data_stats_summary=None, \n                    graph_figure=None):\n\n    doc = docx.Document()\n\n    # Add Title Page followed by section summary\n    doc.add_heading(report_title, 0)\n    doc.add_paragraph(f'Authored By: {report_author}')\n    doc.add_paragraph(f'Created On: {str(report_date)}')\n    doc.add_paragraph(f'Created For: {report_client}')\n    doc.add_heading(section_title, 1)\n    doc.add_paragraph(section_text_summary)\n\n    # Add Scatter plot\n    doc.add_heading('Data Visualisation', 2)\n    doc.add_picture(graph_figure)\n\n    # Add dataframe summary\n    doc.add_heading('Data Summary', 2)\n    summary_table = add_df_to_docx(doc, data_stats_summary)\n    summary_table.style = 'LightShading-Accent1'\n\n    doc.save('report.docx')\n\n    return st.info('Report Generated')\n```", "```py\n if st.form_submit_button('Generate'):\n        summary_stats = create_df_stats_summary(df, data_to_summarise)\n        scatter_plot_file = create_scatterplot(df, chart_x, chart_y, chart_z, \n                                               plot_name='scatter', yaxis_scale=[3,1], )\n\n        generate_report(report_title, report_author, report_date, report_client, \n                        section_title, section_text_summary, summary_stats,\n                        graph_figure='scatter.png')\n```", "```py\nimport streamlit as st\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport docx\n\nst.set_page_config(layout='wide')\n\ndef create_df_stats_summary(dataframe, features_to_include):\n    sub_df = dataframe[features_to_include].copy()\n    return sub_df.describe()\n\ndef create_scatterplot(dataframe, xaxis, yaxis, colour, plot_name,\n                       xaxis_scale= None, yaxis_scale=None):\n    fig, ax = plt.subplots()\n\n    ax.scatter(dataframe[xaxis], dataframe[yaxis],\n                c=dataframe[colour], cmap='viridis')\n\n    ax.set_xlabel(xaxis)\n    ax.set_ylabel(yaxis)\n\n    if xaxis_scale is not None:\n        ax.set_xlim(xmin=xaxis_scale[0], xmax=xaxis_scale[1])\n\n    if yaxis_scale is not None:\n        ax.set_ylim(ymin=yaxis_scale[0], ymax=yaxis_scale[1])\n\n    filename = f'{plot_name}.png'\n    plt.savefig(filename)\n\ndef add_df_to_docx(doc, dataframe):\n    # Reset the index and get the new shape\n    dataframe = dataframe.reset_index()\n    num_rows, num_cols = dataframe.shape\n\n    # Add a table to the document with the necessary number \n    # of rows and columns\n    table = doc.add_table(rows=num_rows + 1, cols=num_cols)\n\n    # Add the header row\n    for i, col in enumerate(dataframe.columns):\n        table.cell(0, i).text = str(col)\n\n    # Add the data rows\n    for i, row in dataframe.iterrows():\n        for j, value in enumerate(row):\n            table.cell(i + 1, j).text = str(value)\n\n    return table\n\ndef generate_report(report_title, report_author, report_date, report_client,\n                    section_title=None, \n                    section_text_summary=None, \n                    data_stats_summary=None, \n                    graph_figure=None):\n\n    doc = docx.Document()\n\n    # Add Title Page followed by section summary\n    doc.add_heading(report_title, 0)\n    doc.add_paragraph(f'Authored By: {report_author}')\n    doc.add_paragraph(f'Created On: {str(report_date)}')\n    doc.add_paragraph(f'Created For: {report_client}')\n    doc.add_heading(section_title, 1)\n    doc.add_paragraph(section_text_summary)\n\n    # Add Scatter plot\n    doc.add_heading('Data Visualisation', 2)\n    doc.add_picture(graph_figure)\n\n    # Add dataframe summary\n    doc.add_heading('Data Summary', 2)\n    summary_table = add_df_to_docx(doc, data_stats_summary)\n    summary_table.style = 'LightShading-Accent1'\n\n    doc.save('report.docx')\n\n    return st.info('Report Generated')\n\nst.title('Streamlit Data Report Generator')\ndf = pd.read_csv('Xeek_Well_15-9-15.csv')\n\nwith st.form('report'):\n    st.write(\"### Report Details\")\n    col1, col2 = st.columns(2, gap='large')\n\n    # Setup the title and associated data\n    report_title = col1.text_input(\"Enter report title\")\n    report_author = col1.text_input(\"Enter the report author's name\")\n    report_date = col2.date_input(\"Select a date for the report\")\n    report_client = col2.text_input(\"Enter the client's name\")\n\n    st.write(\"---\")\n    sect_col1, sect_col2 = st.columns(2, gap='large')\n\n    # Setup the first report section and associated data\n    sect_col1.write(\"### Section Details\")\n    section_title = sect_col1.text_input(\"Enter section title\")\n    section_text_summary = sect_col1.text_area(\"Section Summary\")\n\n    data_features = df.columns\n\n    sect_col2.write(\"### Data Summary\")\n    data_to_summarise = sect_col2.multiselect(\"Select features to include in statistical summary\", \n                                              options=data_features)\n\n    st.write(\"---\")\n\n    st.write(\"### Scatterplot Setup\")\n    sub_col1, sub_col2, sub_col3 = st.columns(3)\n\n    chart_x = sub_col1.selectbox('X axis', options=data_features)\n    chart_y = sub_col2.selectbox('Y axis', options=data_features)\n    chart_z = sub_col3.selectbox('Z axis', options=data_features)\n\n    if st.form_submit_button('Generate'):\n        summary_stats = create_df_stats_summary(df, data_to_summarise)\n        scatter_plot_file = create_scatterplot(df, chart_x, chart_y, chart_z, \n                                               plot_name='scatter', yaxis_scale=[3,1], )\n\n        generate_report(report_title, report_author, report_date, report_client, \n                        section_title, section_text_summary, summary_stats,\n                        graph_figure='scatter.png')\n```"]