- en: 'Copulas: An Essential Guide & Applications in Time Series Forecasting'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/copulas-an-essential-guide-applications-in-time-series-forecasting-f5c93dcd6e99](https://towardsdatascience.com/copulas-an-essential-guide-applications-in-time-series-forecasting-f5c93dcd6e99)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What are copula functions and why do we need them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nikoskafritsas?source=post_page-----f5c93dcd6e99--------------------------------)[![Nikos
    Kafritsas](../Images/de965cfcd8fbd8e1baf849017d365cbb.png)](https://medium.com/@nikoskafritsas?source=post_page-----f5c93dcd6e99--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f5c93dcd6e99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f5c93dcd6e99--------------------------------)
    [Nikos Kafritsas](https://medium.com/@nikoskafritsas?source=post_page-----f5c93dcd6e99--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f5c93dcd6e99--------------------------------)
    ·14 min read·Mar 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6961adaebffc5f8815c5d29ac5619b81.png)'
  prefs: []
  type: TYPE_IMG
- en: A 3D Gaussian Copula (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Copulas are functions that model the dependency among several distributions.
  prefs: []
  type: TYPE_NORMAL
- en: They are mostly used in financial applications like portfolio risk assessment
    and hedge fund management. They came to prominence in 2008, when it was discovered
    that quantitative scientists had misused copulas in their calculations, [failing
    to predict significant events.](http://samueldwatts.com/wp-content/uploads/2016/08/Watts-Gaussian-Copula_Financial_Crisis.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, copulas are still great mathematical tools. One compelling reason
    for studying copulas is that they find numerous applications in **Time-Series
    Forecasting** models.
  prefs: []
  type: TYPE_NORMAL
- en: In the past few years, many **Deep Learning Forecasting** models started incorporating
    statistical concepts in their architecture. This is good because the community
    is moving from the traditional “*stacking transformer blocks with attention”*
    approach to using *elegant statistical techniques.*
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: Some introductory concepts in statistics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why copulas are useful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create Gaussian copulas in Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modern Deep Learning models that use copulas for Time-Series Forecasting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s dive in.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve launched [**AI Horizon Forecast**](https://aihorizonforecast.substack.com/)**,**
    a newsletter focusing on time-series and innovative AI research. Subscribe [here](https://aihorizonforecast.substack.com/)
    to broaden your horizons!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introductory concepts — Optional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the following terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Probability Integral Transform](https://en.wikipedia.org/wiki/Probability_integral_transform)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Inverse sampling](https://en.wikipedia.org/wiki/Inverse_transform_sampling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Empirical Cumulative Distribution Function](https://en.wikipedia.org/wiki/Empirical_distribution_function)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: are unknown to you, I suggest reading this section too.
  prefs: []
  type: TYPE_NORMAL
- en: Copulas are easy to understand, but they may intimidate you at first if you
    are not familiar with the above concepts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Probability integral transform** Assume we have a continuous random variable
    `X`**.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the **CDF** (*cumulative distribution function*) of `X`, called `F_x`,
    generates a **uniform** random variable `U` . Specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bab32265506302f05fb5737ccd5ab40.png)'
  prefs: []
  type: TYPE_IMG
- en: The technique says we can transform any continuous random variable into a uniform.
    We will later visually demonstrate how all these techniques work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Inverse sampling** Have you ever wondered how distribution generator functions
    like `rnorm()` in R and `np.random.randn()` in Python generate samples?'
  prefs: []
  type: TYPE_NORMAL
- en: They use sampling techniques, one of which is called *inverse sampling*. There
    are numerous sampling techniques — some are more sophisticated and faster than
    *inverse sampling*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Inverse sampling* is simply the inverse of the *probability integral transform*
    theorem. Given the uniform samples we generated earlier, we can pass them through
    the **inverse cumulative distribution function** of the original rv `X`, symbolized
    as `F(x)^(-1)`, to get back the original `X` distribution. Specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e6daec2fe7ccb0ef2a6d0e3f52ec59e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Both techniques use the CDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Probability integral transform** uses the **CDF** to convert our samples
    from `[a,b]`->`[0,1]`, (where `[a,b]` is the function’s domain).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inverse sampling** uses the **inverse CDF** to convert back our uniform samples
    to the function’s original samples: `[0,1]`->`[a,b]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Figure 1** displays with more clarity how both techniques work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36bffce4264c1e774bc4f861a9eb78c7.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 1:** The red line is the **probability integral transform**, and the
    blue line is the i**nverse sampling** (Image by author)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I will demonstrate how these techniques work with a few plots in Python.
    Our plan is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate samples from a beta distribution **B**~(10,3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the *probability integral transform* to create uniform samples from the
    beta distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use *inverse sampling* to recreate the original beta samples(10,3) from the
    uniform samples in **step 2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a55bf52ef2ac636c754ac9aaaaef3114.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 2:** (Top) The original beta distribution, (Center) The uniform samples
    from the cdf of beta, (Bottom) The transformed beta distribution (Image by author)'
  prefs: []
  type: TYPE_NORMAL
- en: Hence, we returned to our original distribution. You can also experiment with
    other continuous variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try a gamma distribution. We leave everything as-is, except for switching
    beta with gamma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/35568a001c89412c32970c748cc01468.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 3:** (Top) The original gamma distribution, (Center) The uniform samples
    from the cdf of gamma, (Bottom) The transformed gamma distribution (Image by author)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notes:**'
  prefs: []
  type: TYPE_NORMAL
- en: If you use more samples, the plots will better approximate the original distributions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Inverse sampling* does not work with all distributions — e.g. because their
    inverse CDF is not well-defined (such as in bivariate distributions). There, we
    use other sampling methods such as [Metropolis-Hastings Monte Carlo](https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm)
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you prefer **R**, here is the example using the gamma distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4e57b45d1cd28aa3e918d50ca24dd0c4.png)![](../Images/77d06433d921db40c20cac19ed5254b9.png)![](../Images/495a74c0c0833f35939d2c38482a35c0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4:** (Left) The original gamma distribution, (Center) The uniform
    samples from the cdf of gamma, (Right) The transformed gamma distribution (Image
    by author)'
  prefs: []
  type: TYPE_NORMAL
- en: Again, we get the same results.
  prefs: []
  type: TYPE_NORMAL
- en: '**Empirical distribution function**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually, the original distribution of our data is unknown.
  prefs: []
  type: TYPE_NORMAL
- en: Or, we want to build a distribution-agnostic model that does not make assumptions
    about the underlying data.
  prefs: []
  type: TYPE_NORMAL
- en: In that case, the empirical distribution comes handy. It is a powerful and simple
    method that provides a **non-parametric** estimate of a population’s cumulative
    distribution function (CDF).
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we can estimate our data’s CDF regardless of their underlying distribution.
    It is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `X_1`, `X_2`, …, `X_n` be a sample of size `n` from a population with CDF
    `F(x)`. Then the **empirical CDF** `F_n(x)` is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04c62b804782dcdd21411af58191a544.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If that formula confuses you, here’s a more intuitive explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: Take `N` samples from an unknown distribution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sort these samples, and place them on the x-axis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start plotting a ‘step-function’ style line — each time you encounter a datapoint
    on the x-axis, increase the step by `1/N`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the sake of clarity, that process is documented in **Figure 5:**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d5e96e76f9c8f891226ea4338233cad.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 5:** The CDF of a normal distribution (green) and its empirical CDF
    (blue) (Source: [1] )'
  prefs: []
  type: TYPE_NORMAL
- en: The more samples you take, the closer the empirical distribution will resemble
    the true distribution. The [Kolmogorov-Smirnov test](https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test)
    does exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, this test determines the distribution of your unknown data sample
    by constructing and comparing the sample’s *empirical CDF* with the *CDF* you
    hypothesized. If the two CDFs are close, your unknown data sample likely follows
    the hypothesized distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in this article, we will use the empirical CDFs slightly differently:
    To create copulas from data originating from an unknown population.'
  prefs: []
  type: TYPE_NORMAL
- en: Copulas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before presenting the maths of copulas, we first discuss why we need them.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need copulas?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s say we have a collection of random variables. Each random variable reflects
    a different ‘*entity*’ among a collection, e.g.
  prefs: []
  type: TYPE_NORMAL
- en: The securities of a portfolio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sales numbers of a store’s products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The electrical energy consumption patterns of various households.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Challenge 1:** What mathematical concept can we use to explain those entities?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We can use a **multivariate distribution** — one that optimally describes our
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge 2:** What if I tell you that these entities are **not** of the
    same distribution?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If each entity has a different behavior, we **cannot** assume they follow the
    same distribution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And most importantly, each entity is likely to influence the others — we **cannot**
    assume they are independent. Take *product cannibalization*, for example: In retail,
    a successful product pulls demand away from similar items in its category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hence, each *entity* may have a different distribution. Plus, we should find
    a way to model their correlation, since independence is seldom feasible in most
    practical scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: We can solve both of these challenges using **copulas**.
  prefs: []
  type: TYPE_NORMAL
- en: Copulas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s say we have a random vector `**z**` **.** You can think of a random vector
    as a collection of random variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/664fdec17126ab7f2f266ca7fcf9a9f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let `F_j` be the marginal CDF of `z_j` for `j ∈ [1,N]`. Using the *probability
    integral transform* from earlier, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf4008ee75a0d45b58dbf0ce438b3dfb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we define a copula `**C** : [0,1] → [0,1]^N` the joint CDF of `[u_1,
    u_2, … u_N]` :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9e0830901e6ed37c917f22dfa1524239.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And that’s the definition of the copula. Or, in plain English:'
  prefs: []
  type: TYPE_NORMAL
- en: A copula is just a multivariate CDF of multiple random variables with uniform
    marginals U~[0,1]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Notice the function’s **domain** and **range** of values: For example, a copula
    with two variables has a domain of [0,1]² and a range of [0,1]. Don’t worry if
    you are confused, I will later explain in detail how to plot a copula.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s write the copula function for more clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/628d53a78c3e9c8beba51ab47be785d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Moreover, the biggest advantage of copulas is that any CDF `**F(z)**` can be
    written using a copula function `**C**` and its marginals `F_j` .This is also
    known as ***Sklar’s theorem:***
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c88bf19a2118458125b904a34e265bbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Hence, **we can express any CDF function using a copula**. Note the second line
    where we used the *probability integral transform.*
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian copulas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Sklar’s theorem* is extremely useful. Let’s try to represent a multivariate
    Gaussian distribution. In other words, **we will create a Gaussian Copula.**'
  prefs: []
  type: TYPE_NORMAL
- en: To make things simple, we will create a **bivariate** Gaussian Copula (`N =
    2`)
  prefs: []
  type: TYPE_NORMAL
- en: First, consider a bivariate Gaussian distribution of 2 random variables, `[Z_1,
    Z_2]`**.**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ada024ed7e796b52bf621ec5925969c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, the Gaussian Copula is expressed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a18cd26a78aabed743b2871d4a9c414.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Gaussian Copula Formula**'
  prefs: []
  type: TYPE_NORMAL
- en: 'where `Φ`is the CDF of the standard normal distribution, and `Φ_2`is the joint
    CDF of `**[**Z_1, Z_2**]**`parameterized by the correlation factor `**ρ**`. Let’s
    break down the above equations of the Gaussian Copula:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Line 1:** We start with the generic copula definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line 2:** We use the inverse sampling trick to convert our uniform marginals
    to Gaussian.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line 3:** We re-format our equation to express the Gaussian Copula. **The
    last line is the formal Gaussian Copula formula.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are still confused by the maths, don’t worry. In the next section, we
    will show step-by-step how to plot Gaussian copulas.
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian Copulas in Practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To code and plot a Gaussian Copula we need 3 things:'
  prefs: []
  type: TYPE_NORMAL
- en: '`N` continuous variables of any continuous distribution.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Gaussian Copula formula.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To decide how correlated our random variables will be — the correlation factor
    `**ρ**`previously mentioned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To keep our example simple, we will use 2 random variables instead of `N`**.**
    Since these 2 distributions are part of the joint copula CDF, we will refer to
    them as **marginal distributions:**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bba9c36834256cd793eb1e4791926f0b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Table 1:** The Gaussian Copula formula'
  prefs: []
  type: TYPE_NORMAL
- en: That is the theoretical background. We have now everything we need to plot our
    copula.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s start by plotting the marginals distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b6c0bc235b7b20bb36c1444f9586b0fe.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6:** Jointscatterplot of Z1 and Z2'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we convert the Gaussian variables to uniform ones, using the *Probability
    integral transform*. Remember, copulas take as input the uniform marginals u1
    and `u2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/001912533d3ca681864f1282e28f8cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 7:** Jointscatterplot of u1 and u2 — both are uniform'
  prefs: []
  type: TYPE_NORMAL
- en: Having computed the `u1`and `u2`variables**,** we can input them into the Gaussian
    Copula.
  prefs: []
  type: TYPE_NORMAL
- en: The only thing left to configure is the copula’s correlation factor `**ρ**`
    which decides how correlated the two distributions should be. Let’s use `**ρ**=0.8`
  prefs: []
  type: TYPE_NORMAL
- en: The Gaussian Copula plot is displayed in **Figure 8\.** To create the copula,
    we will use the transformations displayed in **Table 1:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3b170c0d5329b62553dc67415c9d8234.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 8:** The Gaussian Copula plot from 2 gaussian distributions'
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with `**ρ**` to observe how the plot changes. Modify mean and variance
    vectors as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, notice in **Figure 8** that copulas take inputs and outputs in the [0,1]
    range. Remember earlier how we defined copulas ( `**C** : [0,1] → [0,1]^N` , where
    `N` is the number of marginals — here we have 2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it’s time for the crucial question:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenge 3:** Why do we need a Gaussian copula instead of a multivariate
    Gaussian PDF? After all, a Gaussian copula is just a multivariate CDF.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Well, a multivariate Gaussian PDF only requires Gaussian marginals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With copulas, we can use the *probability integral transform* to convert **any
    continuous distribution** to uniform marginals — **while still preserving** the
    dependency structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, the inputs of copulas can be a mix of any continuous random
    variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Experiment: Using Beta and Gamma as marginals**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s make some plots to demonstrate the above claim.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using 2 standard normal distributions as inputs, we will use a beta
    and a gamma random variable — and still get a Gaussian Copula.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, we can use any continuous distribution as input. Also, we can assume
    our copula knows nothing about the underlying data distributions. To achieve this,
    we can use the *empirical CDF*, which computes the CDF of the input data regardless
    of how they are distributed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember, the input distributions for our copula can represent any random event,
    like a product’s sales. For the sake of clarity, we will use a beta and a gamma
    distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/90118b4177f84a19f917e3ecc5f603b9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9:** The Gaussian Copula plot from a beta and a gamma distribution'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it. We got the same result. You can find a notebook with all plots [here](https://jovian.com/nkafr/copulas-medium).
  prefs: []
  type: TYPE_NORMAL
- en: Note that other types of copulas exist, such as **Archimedean copulas**. Each
    copula type has its pros and cons. For example, Archimedean copulas are better
    at modeling heavy-tailed or skewed distributions.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we focused on Gaussians Copulas since they are easier to understand
    — and abundant in time-series applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use Copulas as a Data Scientist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unless you are an econometrician or a quantitative data scientist, it is unlikely
    to use copulas. There are some rare use cases in medicine too.
  prefs: []
  type: TYPE_NORMAL
- en: However, copulas have resurfaced again. They find numerous applications in **Deep
    Learning** models, especially in Time Series Forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s view some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Deep GPVAR: Deep Gaussian-Process Vector-Autoregressive Model*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An improved and novel version of Amazon’s popular TS Forecasting model [**DeepAR**](https://medium.com/towards-data-science/deepar-mastering-time-series-forecasting-with-deep-learning-bc717771ce85)**.**
  prefs: []
  type: TYPE_NORMAL
- en: '**Deep GPVAR[2]** uses an LSTM network to parameterize a Gaussian copula. By
    applying a Gaussian copula, *Deep GPVAR* jointlymodels thousands of time series,
    considering their interdependence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the **product cannibalization** we mentioned earlier: Let’s say your
    dataset consists of multiple time series, and each time series represents the
    sales of a product. If a product suddenly goes well, it will likely influence
    the sales of similar products.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want a model that captures the interdependencies among multiple time
    sequences, then *Deep GPVAR* is an ideal choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'TACTiS: Transformer-Attentional Copulas for Time Series'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**TACTiS[3]**is a novel Transformed-based TS forecasting model that also uses
    copulas.'
  prefs: []
  type: TYPE_NORMAL
- en: The model was published by the ServiceNow team — the team behind the breakthrough
    [***N-BEATS***](https://medium.com/towards-data-science/n-beats-time-series-forecasting-with-neural-basis-expansion-af09ea39f538)
    model.
  prefs: []
  type: TYPE_NORMAL
- en: '*TaCTICS* works by estimating joint distributions of high-dimensional time
    series using a transformer architecture that learns to mimic non-parametric copulas.
    Although *TaCTICS* does not assume that copulas follow a specific distribution
    (that’s why they are non-parametric), the model uses attention to estimate them.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, the model can handle hundreds of time series, supports forecasting and
    interpolation, handles unaligned and non-uniformly sampled data, and can adapt
    to missing data during training.
  prefs: []
  type: TYPE_NORMAL
- en: 'CopulaCPTS: Copula Conformal Prediction for Multi-Step Time Series Forecasting'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**CopulaCPTS[4]** is also a revolutionary model that combines copulas with
    a promising method, known as *conformal prediction.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*CopulaCPTS* is based on conformal prediction, a distribution-free quantification
    uncertainty method that provides well-calibrated prediction intervals.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, *CopulaCPTS* leverages copulas to capture uncertainty between multiple
    time steps. Thanks to copulas, the model improves upon existing conformal-based
    implementations by enabling predictions to extend to multiple steps.
  prefs: []
  type: TYPE_NORMAL
- en: Closing Remarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copulas are an essential tool for modeling complex dependencies between variables,
    particularly in the context of high-dimensional data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Also, recent advances in Deep Learning have sparked a new interest in them,
    particularly in Time-Series Forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: 'We saw 3 novel papers that use copulas in their architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Deep GPVAR uses an LSTM* to parameterize a Gaussian copula and simulate a
    Gaussian process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*TaCTICS* uses attention to formulate non-parametric copulas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CopulaCPTS* also creates non-parametric copulas empirically from the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Deep GPVAR and TaCTICS* are open-source, so feel free to check them out. Also,
    *Deep GPVAR* is part of Amazon’s Forecasting Suite. *TaCTICS* claims SOTA performance
    compared to other Transformer-based forecasting models.'
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, after reading and understanding this article, you will have
    an easier time comprehending the aforementioned papers.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the resurgence of copulas highlights the importance of modeling complex
    dependencies between variables in a wide range of applications. Also, their continued
    use in Deep Learning models suggests that copulas will continue to play a crucial
    role for the foreseeable future.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow me on [Linkedin](https://www.linkedin.com/in/nikos-kafritsas-b3699180/)!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscribe to my [newsletter](https://aihorizonforecast.substack.com/welcome),
    AI Horizon Forecast!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://aihorizonforecast.substack.com/p/autogluon-timeseries-creating-powerful?source=post_page-----f5c93dcd6e99--------------------------------)
    [## AutoGluon-TimeSeries : Creating Powerful Ensemble Forecasts — Complete Tutorial'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon’s framework for time-series forecasting has it all.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: aihorizonforecast.substack.com](https://aihorizonforecast.substack.com/p/autogluon-timeseries-creating-powerful?source=post_page-----f5c93dcd6e99--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Empirical distribution function, [Wikipedia,](https://en.wikipedia.org/wiki/Empirical_distribution_function)
    Licence: Public Domain'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Salinas et al. [*High-Dimensional Multivariate Forecasting with Low-Rank
    Gaussian Copula Processes*](https://arxiv.org/pdf/1910.03002.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Drouin et al. [*TACTiS: Transformer-Attentional Copulas for Time Series*](https://arxiv.org/abs/2202.03528),
    ICML (June 2022)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Sun et al. [*Copula Conformal Prediction for Multi-Step Time Series Forecasting*](https://arxiv.org/pdf/2212.03281.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '*All images are created by the author, unless stated otherwise*'
  prefs: []
  type: TYPE_NORMAL
